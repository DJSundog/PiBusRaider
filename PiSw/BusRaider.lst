
M:/RobDev/Projects/Vintage/RC2014/PiBusRaider/PiSw/build/BusRaider.elf:     file format elf32-littlearm


Disassembly of section .text:

00008000 <_startup>:
    8000:	e59ff018 	ldr	pc, [pc, #24]	; 8020 <_reset_h>
    8004:	e59ff018 	ldr	pc, [pc, #24]	; 8024 <_undefined_instruction_h>
    8008:	e59ff018 	ldr	pc, [pc, #24]	; 8028 <_software_interrupt_h>
    800c:	e59ff018 	ldr	pc, [pc, #24]	; 802c <_prefetch_abort_h>
    8010:	e59ff018 	ldr	pc, [pc, #24]	; 8030 <_data_abort_h>
    8014:	e59ff018 	ldr	pc, [pc, #24]	; 8034 <_unused_handler_h>
    8018:	e59ff018 	ldr	pc, [pc, #24]	; 8038 <_interrupt_h>
    801c:	e59ff018 	ldr	pc, [pc, #24]	; 803c <_fast_interrupt_h>

00008020 <_reset_h>:
    8020:	00008048 	.word	0x00008048

00008024 <_undefined_instruction_h>:
    8024:	000080d4 	.word	0x000080d4

00008028 <_software_interrupt_h>:
    8028:	000080d4 	.word	0x000080d4

0000802c <_prefetch_abort_h>:
    802c:	000080d4 	.word	0x000080d4

00008030 <_data_abort_h>:
    8030:	000080d4 	.word	0x000080d4

00008034 <_unused_handler_h>:
    8034:	000080d4 	.word	0x000080d4

00008038 <_interrupt_h>:
    8038:	00032c88 	.word	0x00032c88

0000803c <_fast_interrupt_h>:
    803c:	000080c4 	.word	0x000080c4

00008040 <bss_start>:
    8040:	0006fafc 	.word	0x0006fafc

00008044 <bss_end>:
    8044:	000bfe6c 	.word	0x000bfe6c

00008048 <_reset_>:
    8048:	e3a00902 	mov	r0, #32768	; 0x8000
    804c:	e3a01000 	mov	r1, #0
    8050:	e8b003fc 	ldm	r0!, {r2, r3, r4, r5, r6, r7, r8, r9}
    8054:	e8a103fc 	stmia	r1!, {r2, r3, r4, r5, r6, r7, r8, r9}
    8058:	e8b003fc 	ldm	r0!, {r2, r3, r4, r5, r6, r7, r8, r9}
    805c:	e8a103fc 	stmia	r1!, {r2, r3, r4, r5, r6, r7, r8, r9}
    8060:	e3a000d2 	mov	r0, #210	; 0xd2
    8064:	e121f000 	msr	CPSR_c, r0
    8068:	e59fd068 	ldr	sp, [pc, #104]	; 80d8 <hang+0x4>
    806c:	e3a000d1 	mov	r0, #209	; 0xd1
    8070:	e121f000 	msr	CPSR_c, r0
    8074:	e59fd060 	ldr	sp, [pc, #96]	; 80dc <hang+0x8>
    8078:	e3a000d3 	mov	r0, #211	; 0xd3
    807c:	e121f000 	msr	CPSR_c, r0
    8080:	e59fd054 	ldr	sp, [pc, #84]	; 80dc <hang+0x8>
    8084:	e3a00000 	mov	r0, #0
    8088:	ee070f17 	mcr	15, 0, r0, cr7, cr7, {0}
    808c:	ee080f17 	mcr	15, 0, r0, cr8, cr7, {0}
    8090:	ee110f10 	mrc	15, 0, r0, cr1, cr0, {0}
    8094:	e3a01003 	mov	r1, #3
    8098:	e1800581 	orr	r0, r0, r1, lsl #11
    809c:	ee010f10 	mcr	15, 0, r0, cr1, cr0, {0}
    80a0:	e51f3068 	ldr	r3, [pc, #-104]	; 8040 <bss_start>
    80a4:	e51f2068 	ldr	r2, [pc, #-104]	; 8044 <bss_end>
    80a8:	e3a00000 	mov	r0, #0

000080ac <bssZeroLoop>:
    80ac:	e1520003 	cmp	r2, r3
    80b0:	0a000002 	beq	80c0 <bssZeroDone>
    80b4:	e5830000 	str	r0, [r3]
    80b8:	e2833001 	add	r3, r3, #1
    80bc:	eafffffa 	b	80ac <bssZeroLoop>

000080c0 <bssZeroDone>:
    80c0:	eb00b9d6 	bl	36820 <entry_point>

000080c4 <fiq_handler_>:
    80c4:	e92d40ff 	push	{r0, r1, r2, r3, r4, r5, r6, r7, lr}
    80c8:	eb00ab29 	bl	32d74 <c_firq_handler>
    80cc:	e8bd40ff 	pop	{r0, r1, r2, r3, r4, r5, r6, r7, lr}
    80d0:	e25ef004 	subs	pc, lr, #4

000080d4 <hang>:
    80d4:	ea000040 	b	81dc <blinkLEDForever>
    80d8:	17f00000 	.word	0x17f00000
    80dc:	17e00000 	.word	0x17e00000

000080e0 <lowlev_enable_irq>:
    80e0:	e10f0000 	mrs	r0, CPSR
    80e4:	e3c00080 	bic	r0, r0, #128	; 0x80
    80e8:	e121f000 	msr	CPSR_c, r0
    80ec:	e12fff1e 	bx	lr

000080f0 <lowlev_disable_irq>:
    80f0:	f10c0080 	cpsid	i
    80f4:	e1a0f00e 	mov	pc, lr

000080f8 <lowlev_enable_fiq>:
    80f8:	e10f0000 	mrs	r0, CPSR
    80fc:	e3c00040 	bic	r0, r0, #64	; 0x40
    8100:	e121f000 	msr	CPSR_c, r0
    8104:	e12fff1e 	bx	lr

00008108 <lowlev_disable_fiq>:
    8108:	f10c0040 	cpsid	f
    810c:	e1a0f00e 	mov	pc, lr

00008110 <lowlev_cycleDelay>:
    8110:	e52d1004 	push	{r1}		; (str r1, [sp, #-4]!)
    8114:	e1a000c0 	asr	r0, r0, #1

00008118 <bloop>:
    8118:	e2500001 	subs	r0, r0, #1
    811c:	1afffffd 	bne	8118 <bloop>
    8120:	e49d1004 	pop	{r1}		; (ldr r1, [sp], #4)
    8124:	e12fff1e 	bx	lr

00008128 <membarrier>:
    8128:	e52d3004 	push	{r3}		; (str r3, [sp, #-4]!)
    812c:	e3a03000 	mov	r3, #0
    8130:	ee073f16 	mcr	15, 0, r3, cr7, cr6, {0}
    8134:	ee073f1a 	mcr	15, 0, r3, cr7, cr10, {0}
    8138:	ee073f1e 	mcr	15, 0, r3, cr7, cr14, {0}
    813c:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
    8140:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
    8144:	e12fff1e 	bx	lr

00008148 <disable_mmu_and_cache>:
    8148:	ee110f10 	mrc	15, 0, r0, cr1, cr0, {0}
    814c:	e3c00a01 	bic	r0, r0, #4096	; 0x1000
    8150:	e3c00004 	bic	r0, r0, #4
    8154:	ee010f10 	mcr	15, 0, r0, cr1, cr0, {0}
    8158:	e92d040f 	push	{r0, r1, r2, r3, sl}
    815c:	e3a03000 	mov	r3, #0
    8160:	ee073f16 	mcr	15, 0, r3, cr7, cr6, {0}
    8164:	ee073f1a 	mcr	15, 0, r3, cr7, cr10, {0}
    8168:	ee073f1e 	mcr	15, 0, r3, cr7, cr14, {0}
    816c:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
    8170:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
    8174:	ee113f10 	mrc	15, 0, r3, cr1, cr0, {0}
    8178:	e3a00005 	mov	r0, #5
    817c:	e1c33000 	bic	r3, r3, r0
    8180:	e3a00003 	mov	r0, #3
    8184:	e1c33580 	bic	r3, r3, r0, lsl #11
    8188:	ee013f10 	mcr	15, 0, r3, cr1, cr0, {0}
    818c:	e8bd040f 	pop	{r0, r1, r2, r3, sl}
    8190:	e12fff1e 	bx	lr

00008194 <blinkCE0>:
    8194:	e92d040f 	push	{r0, r1, r2, r3, sl}
    8198:	e59f0108 	ldr	r0, [pc, #264]	; 82a8 <memcopyfast+0x5c>
    819c:	e3a01401 	mov	r1, #16777216	; 0x1000000
    81a0:	e5801000 	str	r1, [r0]
    81a4:	e3a01c01 	mov	r1, #256	; 0x100
    81a8:	e3a02c01 	mov	r2, #256	; 0x100
    81ac:	e580101c 	str	r1, [r0, #28]
    81b0:	e3a0a000 	mov	sl, #0

000081b4 <delay>:
    81b4:	e28aa001 	add	sl, sl, #1
    81b8:	e15a0002 	cmp	sl, r2
    81bc:	1afffffc 	bne	81b4 <delay>
    81c0:	e5801028 	str	r1, [r0, #40]	; 0x28
    81c4:	e3a0a000 	mov	sl, #0

000081c8 <delay2>:
    81c8:	e28aa001 	add	sl, sl, #1
    81cc:	e15a0002 	cmp	sl, r2
    81d0:	1afffffc 	bne	81c8 <delay2>
    81d4:	e8bd040f 	pop	{r0, r1, r2, r3, sl}
    81d8:	e12fff1e 	bx	lr

000081dc <blinkLEDForever>:
    81dc:	e59f00c4 	ldr	r0, [pc, #196]	; 82a8 <memcopyfast+0x5c>
    81e0:	e3a0260f 	mov	r2, #15728640	; 0xf00000
    81e4:	e3a01602 	mov	r1, #2097152	; 0x200000
    81e8:	e5801010 	str	r1, [r0, #16]
    81ec:	e3a01902 	mov	r1, #32768	; 0x8000
    81f0:	e5801020 	str	r1, [r0, #32]

000081f4 <loopBlink>:
    81f4:	e5801020 	str	r1, [r0, #32]
    81f8:	e3a0a000 	mov	sl, #0

000081fc <delay1a>:
    81fc:	e28aa001 	add	sl, sl, #1
    8200:	e15a0002 	cmp	sl, r2
    8204:	1afffffc 	bne	81fc <delay1a>
    8208:	e580102c 	str	r1, [r0, #44]	; 0x2c
    820c:	e3a0a000 	mov	sl, #0

00008210 <delay2a>:
    8210:	e28aa001 	add	sl, sl, #1
    8214:	e15a0002 	cmp	sl, r2
    8218:	1afffffc 	bne	8210 <delay2a>
    821c:	eafffff4 	b	81f4 <loopBlink>

00008220 <lowlev_blockCopyExecRelocatable>:
    8220:	e52d3004 	push	{r3}		; (str r3, [sp, #-4]!)

00008224 <blockCopyExecRelocatableLoop>:
    8224:	e4d13001 	ldrb	r3, [r1], #1
    8228:	e4c03001 	strb	r3, [r0], #1
    822c:	e2522001 	subs	r2, r2, #1
    8230:	aafffffb 	bge	8224 <blockCopyExecRelocatableLoop>
    8234:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
    8238:	e12fff10 	bx	r0

0000823c <lowlev_blockCopyExecRelocatableLen>:
    823c:	0000001c 	.word	0x0000001c

00008240 <lowlev_goto>:
    8240:	e12fff10 	bx	r0

00008244 <lowlev_store_abs8>:
    8244:	e5c01000 	strb	r1, [r0]
    8248:	e12fff1e 	bx	lr

0000824c <memcopyfast>:
    824c:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    8250:	e352007f 	cmp	r2, #127	; 0x7f
    8254:	9a00000b 	bls	8288 <memcopyfast+0x3c>
    8258:	e3110003 	tst	r1, #3
    825c:	1a000009 	bne	8288 <memcopyfast+0x3c>
    8260:	e3100003 	tst	r0, #3
    8264:	1a000007 	bne	8288 <memcopyfast+0x3c>
    8268:	e92d07f0 	push	{r4, r5, r6, r7, r8, r9, sl}
    826c:	e8b107f8 	ldm	r1!, {r3, r4, r5, r6, r7, r8, r9, sl}
    8270:	e2422020 	sub	r2, r2, #32
    8274:	e8a007f8 	stmia	r0!, {r3, r4, r5, r6, r7, r8, r9, sl}
    8278:	f5d1f040 	pld	[r1, #64]	; 0x40
    827c:	e352001f 	cmp	r2, #31
    8280:	8afffff9 	bhi	826c <memcopyfast+0x20>
    8284:	e8bd07f0 	pop	{r4, r5, r6, r7, r8, r9, sl}
    8288:	e3520000 	cmp	r2, #0
    828c:	0a000003 	beq	82a0 <memcopyfast+0x54>
    8290:	e4d13001 	ldrb	r3, [r1], #1
    8294:	e2522001 	subs	r2, r2, #1
    8298:	e4c03001 	strb	r3, [r0], #1
    829c:	1afffffb 	bne	8290 <memcopyfast+0x44>
    82a0:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
    82a4:	e12fff1e 	bx	lr
    82a8:	20200000 	.word	0x20200000

000082ac <read16>:
}


static byte read8 (Z80Context* ctx, ushort addr)
{
	ctx->tstates += 3;
    82ac:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
}


static ushort read16 (Z80Context* ctx, ushort addr)
{
    82b0:	e92d4070 	push	{r4, r5, r6, lr}
    82b4:	e1a04000 	mov	r4, r0
	ctx->tstates += 3;
    82b8:	e2833003 	add	r3, r3, #3
	return ctx->memRead(ctx->memParam, addr);	
    82bc:	e5902024 	ldr	r2, [r0, #36]	; 0x24
{
    82c0:	e1a06001 	mov	r6, r1
	ctx->tstates += 3;
    82c4:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    82c8:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
    82cc:	e12fff32 	blx	r2
	ctx->tstates += 3;
    82d0:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	byte lsb = read8(ctx, addr);
	byte msb = read8(ctx, addr + 1);
    82d4:	e2861001 	add	r1, r6, #1
	ctx->tstates += 3;
    82d8:	e2833003 	add	r3, r3, #3
	return ctx->memRead(ctx->memParam, addr);	
    82dc:	e1a05000 	mov	r5, r0
	ctx->tstates += 3;
    82e0:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    82e4:	e6ff1071 	uxth	r1, r1
    82e8:	e5943024 	ldr	r3, [r4, #36]	; 0x24
    82ec:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    82f0:	e12fff33 	blx	r3
	return msb << 8 | lsb;
    82f4:	e1850400 	orr	r0, r5, r0, lsl #8
}
    82f8:	e6ff0070 	uxth	r0, r0
    82fc:	e8bd8070 	pop	{r4, r5, r6, pc}

00008300 <adjustFlagSZP>:
	VALFLAG(F_3, (val & F_3) != 0);
}


static void adjustFlagSZP (Z80Context* ctx, byte val)
{
    8300:	e5d03000 	ldrb	r3, [r0]
	if (val)
    8304:	e3110080 	tst	r1, #128	; 0x80
	BR.F |= flag;
    8308:	13833080 	orrne	r3, r3, #128	; 0x80
	if (val)
    830c:	1a000007 	bne	8330 <adjustFlagSZP+0x30>
	BR.F &= ~flag;
    8310:	e203307f 	and	r3, r3, #127	; 0x7f
	if (val)
    8314:	e3510000 	cmp	r1, #0
	BR.F &= ~flag;
    8318:	e5c03000 	strb	r3, [r0]
	BR.F |= flag;
    831c:	03832040 	orreq	r2, r3, #64	; 0x40
	if (val)
    8320:	1a000002 	bne	8330 <adjustFlagSZP+0x30>
	BR.F |= flag;
    8324:	e3823004 	orr	r3, r2, #4
    8328:	e5c03000 	strb	r3, [r0]
	VALFLAG(F_S, (val & 0x80) != 0);
	VALFLAG(F_Z, (val == 0));
	VALFLAG(F_PV, parityBit[val]);
}
    832c:	e12fff1e 	bx	lr
	VALFLAG(F_PV, parityBit[val]);
    8330:	e59f2020 	ldr	r2, [pc, #32]	; 8358 <adjustFlagSZP+0x58>
	BR.F &= ~flag;
    8334:	e6af3073 	sxtb	r3, r3
	if (val)
    8338:	e7921101 	ldr	r1, [r2, r1, lsl #2]
	BR.F &= ~flag;
    833c:	e20320bf 	and	r2, r3, #191	; 0xbf
	if (val)
    8340:	e3510000 	cmp	r1, #0
    8344:	e5c02000 	strb	r2, [r0]
	BR.F &= ~flag;
    8348:	020330bb 	andeq	r3, r3, #187	; 0xbb
	if (val)
    834c:	1afffff4 	bne	8324 <adjustFlagSZP+0x24>
    8350:	e5c03000 	strb	r3, [r0]
}
    8354:	e12fff1e 	bx	lr
    8358:	0004f000 	.word	0x0004f000

0000835c <doBIT_indexed>:
	ctx->tstates += 3;
    835c:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	VALFLAG(F_3, val & F_3);
}


static void doBIT_indexed(Z80Context* ctx, int b, ushort address)
{
    8360:	e92d4070 	push	{r4, r5, r6, lr}
	ctx->tstates += 3;
    8364:	e2833003 	add	r3, r3, #3
{
    8368:	e1a04000 	mov	r4, r0
    836c:	e1a06001 	mov	r6, r1
	ctx->tstates += 3;
    8370:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    8374:	e1a01002 	mov	r1, r2
    8378:	e5903024 	ldr	r3, [r0, #36]	; 0x24
    837c:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
{
    8380:	e1a05002 	mov	r5, r2
	return ctx->memRead(ctx->memParam, addr);	
    8384:	e12fff33 	blx	r3
	BR.F &= ~flag;
    8388:	e5d43000 	ldrb	r3, [r4]
	if (val & (1 << b))
    838c:	e1a00650 	asr	r0, r0, r6
    8390:	e3100001 	tst	r0, #1
	BR.F &= ~flag;
    8394:	120330bb 	andne	r3, r3, #187	; 0xbb
	BR.F |= flag;
    8398:	03833044 	orreq	r3, r3, #68	; 0x44
    839c:	e3833010 	orr	r3, r3, #16
	BR.F &= ~flag;
    83a0:	e203307d 	and	r3, r3, #125	; 0x7d
    if ((b == 7) && !GETFLAG(F_Z))
    83a4:	e3560007 	cmp	r6, #7
	BR.F &= ~flag;
    83a8:	e5c43000 	strb	r3, [r4]
    if ((b == 7) && !GETFLAG(F_Z))
    83ac:	1a000001 	bne	83b8 <doBIT_indexed+0x5c>
    83b0:	e3130040 	tst	r3, #64	; 0x40
	BR.F |= flag;
    83b4:	03833080 	orreq	r3, r3, #128	; 0x80
	byte val = read8(ctx, address);
	doBIT(ctx, b, val);
	VALFLAG(F_5, (address >> 8) & F_5);
    83b8:	e1a05425 	lsr	r5, r5, #8
	if (val)
    83bc:	e3150020 	tst	r5, #32
	BR.F |= flag;
    83c0:	13833020 	orrne	r3, r3, #32
	BR.F &= ~flag;
    83c4:	020330dd 	andeq	r3, r3, #221	; 0xdd
	if (val)
    83c8:	e3150008 	tst	r5, #8
	BR.F |= flag;
    83cc:	13833008 	orrne	r3, r3, #8
	BR.F &= ~flag;
    83d0:	020330f7 	andeq	r3, r3, #247	; 0xf7
    83d4:	e5c43000 	strb	r3, [r4]
	VALFLAG(F_3, (address >> 8) & F_3);
}
    83d8:	e8bd8070 	pop	{r4, r5, r6, pc}

000083dc <doPush>:
    return val;
}


static void doPush (Z80Context* ctx, ushort val)
{
    83dc:	e92d4070 	push	{r4, r5, r6, lr}
    83e0:	e1a05001 	mov	r5, r1
    83e4:	e1a04000 	mov	r4, r0
	WR.SP--;
    83e8:	e1d010bc 	ldrh	r1, [r0, #12]
	ctx->tstates += 3;
    83ec:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	WR.SP--;
    83f0:	e2411001 	sub	r1, r1, #1
    83f4:	e6ff1071 	uxth	r1, r1
	ctx->tstates += 3;
    83f8:	e2833003 	add	r3, r3, #3
    83fc:	e5803040 	str	r3, [r0, #64]	; 0x40
	WR.SP--;
    8400:	e1c010bc 	strh	r1, [r0, #12]
	ctx->memWrite(ctx->memParam, addr, val);	
    8404:	e5903028 	ldr	r3, [r0, #40]	; 0x28
    8408:	e1a02425 	lsr	r2, r5, #8
    840c:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
    8410:	e12fff33 	blx	r3
	write8(ctx, WR.SP, val >> 8);
	WR.SP--;
    8414:	e1d410bc 	ldrh	r1, [r4, #12]
	ctx->tstates += 3;
    8418:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	WR.SP--;
    841c:	e2411001 	sub	r1, r1, #1
	ctx->tstates += 3;
    8420:	e2833003 	add	r3, r3, #3
	WR.SP--;
    8424:	e6ff1071 	uxth	r1, r1
	ctx->tstates += 3;
    8428:	e5843040 	str	r3, [r4, #64]	; 0x40
	ctx->memWrite(ctx->memParam, addr, val);	
    842c:	e6ef2075 	uxtb	r2, r5
	WR.SP--;
    8430:	e1c410bc 	strh	r1, [r4, #12]
	ctx->memWrite(ctx->memParam, addr, val);	
    8434:	e5943028 	ldr	r3, [r4, #40]	; 0x28
    8438:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
	write8(ctx, WR.SP, val & 0xff);
}
    843c:	e8bd4070 	pop	{r4, r5, r6, lr}
	ctx->memWrite(ctx->memParam, addr, val);	
    8440:	e12fff13 	bx	r3

00008444 <BIT_0_off_IX_d>:
	doBIT_r(ctx, 0, read8(ctx, WR.HL));
}


static void BIT_0_off_IX_d (Z80Context* ctx)
{
    8444:	e92d4070 	push	{r4, r5, r6, lr}
    8448:	e1a04000 	mov	r4, r0
	ctx->tstates += 2;
	ushort address = WR.IX + (char) read8(ctx, ctx->PC++);
    844c:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
    8450:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	ushort address = WR.IX + (char) read8(ctx, ctx->PC++);
    8454:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
    8458:	e2833005 	add	r3, r3, #5
    845c:	e1c021bc 	strh	r2, [r0, #28]
    8460:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    8464:	e5903024 	ldr	r3, [r0, #36]	; 0x24
    8468:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
    846c:	e1d450b8 	ldrh	r5, [r4, #8]
    8470:	e12fff33 	blx	r3
    8474:	e0852000 	add	r2, r5, r0
	doBIT_indexed(ctx, 0, address);
    8478:	e6ff2072 	uxth	r2, r2
    847c:	e1a00004 	mov	r0, r4
}
    8480:	e8bd4070 	pop	{r4, r5, r6, lr}
	doBIT_indexed(ctx, 0, address);
    8484:	e3a01000 	mov	r1, #0
    8488:	eaffffb3 	b	835c <doBIT_indexed>

0000848c <BIT_0_off_IY_d>:


static void BIT_0_off_IY_d (Z80Context* ctx)
{
    848c:	e92d4070 	push	{r4, r5, r6, lr}
    8490:	e1a04000 	mov	r4, r0
	ctx->tstates += 2;
	ushort address = WR.IY + (char) read8(ctx, ctx->PC++);
    8494:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
    8498:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	ushort address = WR.IY + (char) read8(ctx, ctx->PC++);
    849c:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
    84a0:	e2833005 	add	r3, r3, #5
    84a4:	e1c021bc 	strh	r2, [r0, #28]
    84a8:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    84ac:	e5903024 	ldr	r3, [r0, #36]	; 0x24
    84b0:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
    84b4:	e1d450ba 	ldrh	r5, [r4, #10]
    84b8:	e12fff33 	blx	r3
    84bc:	e0852000 	add	r2, r5, r0
	doBIT_indexed(ctx, 0, address);
    84c0:	e6ff2072 	uxth	r2, r2
    84c4:	e1a00004 	mov	r0, r4
}
    84c8:	e8bd4070 	pop	{r4, r5, r6, lr}
	doBIT_indexed(ctx, 0, address);
    84cc:	e3a01000 	mov	r1, #0
    84d0:	eaffffa1 	b	835c <doBIT_indexed>

000084d4 <BIT_1_off_IX_d>:
	doBIT_r(ctx, 1, read8(ctx, WR.HL));
}


static void BIT_1_off_IX_d (Z80Context* ctx)
{
    84d4:	e92d4070 	push	{r4, r5, r6, lr}
    84d8:	e1a04000 	mov	r4, r0
	ctx->tstates += 2;
	ushort address = WR.IX + (char) read8(ctx, ctx->PC++);
    84dc:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
    84e0:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	ushort address = WR.IX + (char) read8(ctx, ctx->PC++);
    84e4:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
    84e8:	e2833005 	add	r3, r3, #5
    84ec:	e1c021bc 	strh	r2, [r0, #28]
    84f0:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    84f4:	e5903024 	ldr	r3, [r0, #36]	; 0x24
    84f8:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
    84fc:	e1d450b8 	ldrh	r5, [r4, #8]
    8500:	e12fff33 	blx	r3
    8504:	e0852000 	add	r2, r5, r0
	doBIT_indexed(ctx, 1, address);
    8508:	e6ff2072 	uxth	r2, r2
    850c:	e1a00004 	mov	r0, r4
}
    8510:	e8bd4070 	pop	{r4, r5, r6, lr}
	doBIT_indexed(ctx, 1, address);
    8514:	e3a01001 	mov	r1, #1
    8518:	eaffff8f 	b	835c <doBIT_indexed>

0000851c <BIT_1_off_IY_d>:


static void BIT_1_off_IY_d (Z80Context* ctx)
{
    851c:	e92d4070 	push	{r4, r5, r6, lr}
    8520:	e1a04000 	mov	r4, r0
	ctx->tstates += 2;
	ushort address = WR.IY + (char) read8(ctx, ctx->PC++);
    8524:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
    8528:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	ushort address = WR.IY + (char) read8(ctx, ctx->PC++);
    852c:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
    8530:	e2833005 	add	r3, r3, #5
    8534:	e1c021bc 	strh	r2, [r0, #28]
    8538:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    853c:	e5903024 	ldr	r3, [r0, #36]	; 0x24
    8540:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
    8544:	e1d450ba 	ldrh	r5, [r4, #10]
    8548:	e12fff33 	blx	r3
    854c:	e0852000 	add	r2, r5, r0
	doBIT_indexed(ctx, 1, address);
    8550:	e6ff2072 	uxth	r2, r2
    8554:	e1a00004 	mov	r0, r4
}
    8558:	e8bd4070 	pop	{r4, r5, r6, lr}
	doBIT_indexed(ctx, 1, address);
    855c:	e3a01001 	mov	r1, #1
    8560:	eaffff7d 	b	835c <doBIT_indexed>

00008564 <BIT_2_off_IX_d>:
	doBIT_r(ctx, 2, read8(ctx, WR.HL));
}


static void BIT_2_off_IX_d (Z80Context* ctx)
{
    8564:	e92d4070 	push	{r4, r5, r6, lr}
    8568:	e1a04000 	mov	r4, r0
	ctx->tstates += 2;
	ushort address = WR.IX + (char) read8(ctx, ctx->PC++);
    856c:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
    8570:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	ushort address = WR.IX + (char) read8(ctx, ctx->PC++);
    8574:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
    8578:	e2833005 	add	r3, r3, #5
    857c:	e1c021bc 	strh	r2, [r0, #28]
    8580:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    8584:	e5903024 	ldr	r3, [r0, #36]	; 0x24
    8588:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
    858c:	e1d450b8 	ldrh	r5, [r4, #8]
    8590:	e12fff33 	blx	r3
    8594:	e0852000 	add	r2, r5, r0
	doBIT_indexed(ctx, 2, address);
    8598:	e6ff2072 	uxth	r2, r2
    859c:	e1a00004 	mov	r0, r4
}
    85a0:	e8bd4070 	pop	{r4, r5, r6, lr}
	doBIT_indexed(ctx, 2, address);
    85a4:	e3a01002 	mov	r1, #2
    85a8:	eaffff6b 	b	835c <doBIT_indexed>

000085ac <BIT_2_off_IY_d>:


static void BIT_2_off_IY_d (Z80Context* ctx)
{
    85ac:	e92d4070 	push	{r4, r5, r6, lr}
    85b0:	e1a04000 	mov	r4, r0
	ctx->tstates += 2;
	ushort address = WR.IY + (char) read8(ctx, ctx->PC++);
    85b4:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
    85b8:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	ushort address = WR.IY + (char) read8(ctx, ctx->PC++);
    85bc:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
    85c0:	e2833005 	add	r3, r3, #5
    85c4:	e1c021bc 	strh	r2, [r0, #28]
    85c8:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    85cc:	e5903024 	ldr	r3, [r0, #36]	; 0x24
    85d0:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
    85d4:	e1d450ba 	ldrh	r5, [r4, #10]
    85d8:	e12fff33 	blx	r3
    85dc:	e0852000 	add	r2, r5, r0
	doBIT_indexed(ctx, 2, address);
    85e0:	e6ff2072 	uxth	r2, r2
    85e4:	e1a00004 	mov	r0, r4
}
    85e8:	e8bd4070 	pop	{r4, r5, r6, lr}
	doBIT_indexed(ctx, 2, address);
    85ec:	e3a01002 	mov	r1, #2
    85f0:	eaffff59 	b	835c <doBIT_indexed>

000085f4 <BIT_3_off_IX_d>:
	doBIT_r(ctx, 3, read8(ctx, WR.HL));
}


static void BIT_3_off_IX_d (Z80Context* ctx)
{
    85f4:	e92d4070 	push	{r4, r5, r6, lr}
    85f8:	e1a04000 	mov	r4, r0
	ctx->tstates += 2;
	ushort address = WR.IX + (char) read8(ctx, ctx->PC++);
    85fc:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
    8600:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	ushort address = WR.IX + (char) read8(ctx, ctx->PC++);
    8604:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
    8608:	e2833005 	add	r3, r3, #5
    860c:	e1c021bc 	strh	r2, [r0, #28]
    8610:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    8614:	e5903024 	ldr	r3, [r0, #36]	; 0x24
    8618:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
    861c:	e1d450b8 	ldrh	r5, [r4, #8]
    8620:	e12fff33 	blx	r3
    8624:	e0852000 	add	r2, r5, r0
	doBIT_indexed(ctx, 3, address);
    8628:	e6ff2072 	uxth	r2, r2
    862c:	e1a00004 	mov	r0, r4
}
    8630:	e8bd4070 	pop	{r4, r5, r6, lr}
	doBIT_indexed(ctx, 3, address);
    8634:	e3a01003 	mov	r1, #3
    8638:	eaffff47 	b	835c <doBIT_indexed>

0000863c <BIT_3_off_IY_d>:


static void BIT_3_off_IY_d (Z80Context* ctx)
{
    863c:	e92d4070 	push	{r4, r5, r6, lr}
    8640:	e1a04000 	mov	r4, r0
	ctx->tstates += 2;
	ushort address = WR.IY + (char) read8(ctx, ctx->PC++);
    8644:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
    8648:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	ushort address = WR.IY + (char) read8(ctx, ctx->PC++);
    864c:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
    8650:	e2833005 	add	r3, r3, #5
    8654:	e1c021bc 	strh	r2, [r0, #28]
    8658:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    865c:	e5903024 	ldr	r3, [r0, #36]	; 0x24
    8660:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
    8664:	e1d450ba 	ldrh	r5, [r4, #10]
    8668:	e12fff33 	blx	r3
    866c:	e0852000 	add	r2, r5, r0
	doBIT_indexed(ctx, 3, address);
    8670:	e6ff2072 	uxth	r2, r2
    8674:	e1a00004 	mov	r0, r4
}
    8678:	e8bd4070 	pop	{r4, r5, r6, lr}
	doBIT_indexed(ctx, 3, address);
    867c:	e3a01003 	mov	r1, #3
    8680:	eaffff35 	b	835c <doBIT_indexed>

00008684 <BIT_4_off_IX_d>:
	doBIT_r(ctx, 4, read8(ctx, WR.HL));
}


static void BIT_4_off_IX_d (Z80Context* ctx)
{
    8684:	e92d4070 	push	{r4, r5, r6, lr}
    8688:	e1a04000 	mov	r4, r0
	ctx->tstates += 2;
	ushort address = WR.IX + (char) read8(ctx, ctx->PC++);
    868c:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
    8690:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	ushort address = WR.IX + (char) read8(ctx, ctx->PC++);
    8694:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
    8698:	e2833005 	add	r3, r3, #5
    869c:	e1c021bc 	strh	r2, [r0, #28]
    86a0:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    86a4:	e5903024 	ldr	r3, [r0, #36]	; 0x24
    86a8:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
    86ac:	e1d450b8 	ldrh	r5, [r4, #8]
    86b0:	e12fff33 	blx	r3
    86b4:	e0852000 	add	r2, r5, r0
	doBIT_indexed(ctx, 4, address);
    86b8:	e6ff2072 	uxth	r2, r2
    86bc:	e1a00004 	mov	r0, r4
}
    86c0:	e8bd4070 	pop	{r4, r5, r6, lr}
	doBIT_indexed(ctx, 4, address);
    86c4:	e3a01004 	mov	r1, #4
    86c8:	eaffff23 	b	835c <doBIT_indexed>

000086cc <BIT_4_off_IY_d>:


static void BIT_4_off_IY_d (Z80Context* ctx)
{
    86cc:	e92d4070 	push	{r4, r5, r6, lr}
    86d0:	e1a04000 	mov	r4, r0
	ctx->tstates += 2;
	ushort address = WR.IY + (char) read8(ctx, ctx->PC++);
    86d4:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
    86d8:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	ushort address = WR.IY + (char) read8(ctx, ctx->PC++);
    86dc:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
    86e0:	e2833005 	add	r3, r3, #5
    86e4:	e1c021bc 	strh	r2, [r0, #28]
    86e8:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    86ec:	e5903024 	ldr	r3, [r0, #36]	; 0x24
    86f0:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
    86f4:	e1d450ba 	ldrh	r5, [r4, #10]
    86f8:	e12fff33 	blx	r3
    86fc:	e0852000 	add	r2, r5, r0
	doBIT_indexed(ctx, 4, address);
    8700:	e6ff2072 	uxth	r2, r2
    8704:	e1a00004 	mov	r0, r4
}
    8708:	e8bd4070 	pop	{r4, r5, r6, lr}
	doBIT_indexed(ctx, 4, address);
    870c:	e3a01004 	mov	r1, #4
    8710:	eaffff11 	b	835c <doBIT_indexed>

00008714 <BIT_5_off_IX_d>:
	doBIT_r(ctx, 5, read8(ctx, WR.HL));
}


static void BIT_5_off_IX_d (Z80Context* ctx)
{
    8714:	e92d4070 	push	{r4, r5, r6, lr}
    8718:	e1a04000 	mov	r4, r0
	ctx->tstates += 2;
	ushort address = WR.IX + (char) read8(ctx, ctx->PC++);
    871c:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
    8720:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	ushort address = WR.IX + (char) read8(ctx, ctx->PC++);
    8724:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
    8728:	e2833005 	add	r3, r3, #5
    872c:	e1c021bc 	strh	r2, [r0, #28]
    8730:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    8734:	e5903024 	ldr	r3, [r0, #36]	; 0x24
    8738:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
    873c:	e1d450b8 	ldrh	r5, [r4, #8]
    8740:	e12fff33 	blx	r3
    8744:	e0852000 	add	r2, r5, r0
	doBIT_indexed(ctx, 5, address);
    8748:	e6ff2072 	uxth	r2, r2
    874c:	e1a00004 	mov	r0, r4
}
    8750:	e8bd4070 	pop	{r4, r5, r6, lr}
	doBIT_indexed(ctx, 5, address);
    8754:	e3a01005 	mov	r1, #5
    8758:	eafffeff 	b	835c <doBIT_indexed>

0000875c <BIT_5_off_IY_d>:


static void BIT_5_off_IY_d (Z80Context* ctx)
{
    875c:	e92d4070 	push	{r4, r5, r6, lr}
    8760:	e1a04000 	mov	r4, r0
	ctx->tstates += 2;
	ushort address = WR.IY + (char) read8(ctx, ctx->PC++);
    8764:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
    8768:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	ushort address = WR.IY + (char) read8(ctx, ctx->PC++);
    876c:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
    8770:	e2833005 	add	r3, r3, #5
    8774:	e1c021bc 	strh	r2, [r0, #28]
    8778:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    877c:	e5903024 	ldr	r3, [r0, #36]	; 0x24
    8780:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
    8784:	e1d450ba 	ldrh	r5, [r4, #10]
    8788:	e12fff33 	blx	r3
    878c:	e0852000 	add	r2, r5, r0
	doBIT_indexed(ctx, 5, address);
    8790:	e6ff2072 	uxth	r2, r2
    8794:	e1a00004 	mov	r0, r4
}
    8798:	e8bd4070 	pop	{r4, r5, r6, lr}
	doBIT_indexed(ctx, 5, address);
    879c:	e3a01005 	mov	r1, #5
    87a0:	eafffeed 	b	835c <doBIT_indexed>

000087a4 <BIT_6_off_IX_d>:
	doBIT_r(ctx, 6, read8(ctx, WR.HL));
}


static void BIT_6_off_IX_d (Z80Context* ctx)
{
    87a4:	e92d4070 	push	{r4, r5, r6, lr}
    87a8:	e1a04000 	mov	r4, r0
	ctx->tstates += 2;
	ushort address = WR.IX + (char) read8(ctx, ctx->PC++);
    87ac:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
    87b0:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	ushort address = WR.IX + (char) read8(ctx, ctx->PC++);
    87b4:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
    87b8:	e2833005 	add	r3, r3, #5
    87bc:	e1c021bc 	strh	r2, [r0, #28]
    87c0:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    87c4:	e5903024 	ldr	r3, [r0, #36]	; 0x24
    87c8:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
    87cc:	e1d450b8 	ldrh	r5, [r4, #8]
    87d0:	e12fff33 	blx	r3
    87d4:	e0852000 	add	r2, r5, r0
	doBIT_indexed(ctx, 6, address);
    87d8:	e6ff2072 	uxth	r2, r2
    87dc:	e1a00004 	mov	r0, r4
}
    87e0:	e8bd4070 	pop	{r4, r5, r6, lr}
	doBIT_indexed(ctx, 6, address);
    87e4:	e3a01006 	mov	r1, #6
    87e8:	eafffedb 	b	835c <doBIT_indexed>

000087ec <BIT_6_off_IY_d>:


static void BIT_6_off_IY_d (Z80Context* ctx)
{
    87ec:	e92d4070 	push	{r4, r5, r6, lr}
    87f0:	e1a04000 	mov	r4, r0
	ctx->tstates += 2;
	ushort address = WR.IY + (char) read8(ctx, ctx->PC++);
    87f4:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
    87f8:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	ushort address = WR.IY + (char) read8(ctx, ctx->PC++);
    87fc:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
    8800:	e2833005 	add	r3, r3, #5
    8804:	e1c021bc 	strh	r2, [r0, #28]
    8808:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    880c:	e5903024 	ldr	r3, [r0, #36]	; 0x24
    8810:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
    8814:	e1d450ba 	ldrh	r5, [r4, #10]
    8818:	e12fff33 	blx	r3
    881c:	e0852000 	add	r2, r5, r0
	doBIT_indexed(ctx, 6, address);
    8820:	e6ff2072 	uxth	r2, r2
    8824:	e1a00004 	mov	r0, r4
}
    8828:	e8bd4070 	pop	{r4, r5, r6, lr}
	doBIT_indexed(ctx, 6, address);
    882c:	e3a01006 	mov	r1, #6
    8830:	eafffec9 	b	835c <doBIT_indexed>

00008834 <BIT_7_off_IX_d>:
	doBIT_r(ctx, 7, read8(ctx, WR.HL));
}


static void BIT_7_off_IX_d (Z80Context* ctx)
{
    8834:	e92d4070 	push	{r4, r5, r6, lr}
    8838:	e1a04000 	mov	r4, r0
	ctx->tstates += 2;
	ushort address = WR.IX + (char) read8(ctx, ctx->PC++);
    883c:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
    8840:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	ushort address = WR.IX + (char) read8(ctx, ctx->PC++);
    8844:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
    8848:	e2833005 	add	r3, r3, #5
    884c:	e1c021bc 	strh	r2, [r0, #28]
    8850:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    8854:	e5903024 	ldr	r3, [r0, #36]	; 0x24
    8858:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
    885c:	e1d450b8 	ldrh	r5, [r4, #8]
    8860:	e12fff33 	blx	r3
    8864:	e0852000 	add	r2, r5, r0
	doBIT_indexed(ctx, 7, address);
    8868:	e6ff2072 	uxth	r2, r2
    886c:	e1a00004 	mov	r0, r4
}
    8870:	e8bd4070 	pop	{r4, r5, r6, lr}
	doBIT_indexed(ctx, 7, address);
    8874:	e3a01007 	mov	r1, #7
    8878:	eafffeb7 	b	835c <doBIT_indexed>

0000887c <BIT_7_off_IY_d>:


static void BIT_7_off_IY_d (Z80Context* ctx)
{
    887c:	e92d4070 	push	{r4, r5, r6, lr}
    8880:	e1a04000 	mov	r4, r0
	ctx->tstates += 2;
	ushort address = WR.IY + (char) read8(ctx, ctx->PC++);
    8884:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
    8888:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	ushort address = WR.IY + (char) read8(ctx, ctx->PC++);
    888c:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
    8890:	e2833005 	add	r3, r3, #5
    8894:	e1c021bc 	strh	r2, [r0, #28]
    8898:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    889c:	e5903024 	ldr	r3, [r0, #36]	; 0x24
    88a0:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
    88a4:	e1d450ba 	ldrh	r5, [r4, #10]
    88a8:	e12fff33 	blx	r3
    88ac:	e0852000 	add	r2, r5, r0
	doBIT_indexed(ctx, 7, address);
    88b0:	e6ff2072 	uxth	r2, r2
    88b4:	e1a00004 	mov	r0, r4
}
    88b8:	e8bd4070 	pop	{r4, r5, r6, lr}
	doBIT_indexed(ctx, 7, address);
    88bc:	e3a01007 	mov	r1, #7
    88c0:	eafffea5 	b	835c <doBIT_indexed>

000088c4 <CCF>:
	
}


static void CCF (Z80Context* ctx)
{
    88c4:	e5d03000 	ldrb	r3, [r0]
	VALFLAG(F_C, (1 - (byte)GETFLAG(F_C) != 0));
	RESFLAG(F_N);
	adjustFlags(ctx, BR.A);
    88c8:	e5d02001 	ldrb	r2, [r0, #1]
	if (val)
    88cc:	e3130001 	tst	r3, #1
	BR.F |= flag;
    88d0:	03833001 	orreq	r3, r3, #1
	BR.F &= ~flag;
    88d4:	120330fe 	andne	r3, r3, #254	; 0xfe
    88d8:	e6af3073 	sxtb	r3, r3
	BR.F |= flag;
    88dc:	e20330dd 	and	r3, r3, #221	; 0xdd
	if (val)
    88e0:	e3120020 	tst	r2, #32
	BR.F |= flag;
    88e4:	13833020 	orrne	r3, r3, #32
	if (val)
    88e8:	e3120008 	tst	r2, #8
	BR.F |= flag;
    88ec:	13833008 	orrne	r3, r3, #8
	BR.F &= ~flag;
    88f0:	020330f5 	andeq	r3, r3, #245	; 0xf5
    88f4:	e5c03000 	strb	r3, [r0]
}
    88f8:	e12fff1e 	bx	lr

000088fc <CPL>:
}


static void CPL (Z80Context* ctx)
{
	BR.A = ~BR.A;
    88fc:	e5d03001 	ldrb	r3, [r0, #1]
	BR.F |= flag;
    8900:	e5d02000 	ldrb	r2, [r0]
    8904:	e1e03003 	mvn	r3, r3
    8908:	e6ef3073 	uxtb	r3, r3
	if (val)
    890c:	e3130020 	tst	r3, #32
	BR.F |= flag;
    8910:	03822012 	orreq	r2, r2, #18
    8914:	13822032 	orrne	r2, r2, #50	; 0x32
	BR.F &= ~flag;
    8918:	020220df 	andeq	r2, r2, #223	; 0xdf
	if (val)
    891c:	e3130008 	tst	r3, #8
    8920:	e5c03001 	strb	r3, [r0, #1]
	BR.F |= flag;
    8924:	13823008 	orrne	r3, r2, #8
	BR.F &= ~flag;
    8928:	020230f7 	andeq	r3, r2, #247	; 0xf7
    892c:	e5c03000 	strb	r3, [r0]
	SETFLAG(F_H | F_N);
	adjustFlags(ctx, BR.A);
	
}
    8930:	e12fff1e 	bx	lr

00008934 <DAA>:
 */	

static void doDAA(Z80Context * ctx) {
  int correction_factor = 0x00;
  int carry = 0;
  if(BR.A > 0x99 || GETFLAG(F_C)) {
    8934:	e5d01001 	ldrb	r1, [r0, #1]


static void DAA (Z80Context* ctx)
{
    8938:	e92d4010 	push	{r4, lr}
    893c:	e3510099 	cmp	r1, #153	; 0x99
    8940:	e5d03000 	ldrb	r3, [r0]
    8944:	8a000026 	bhi	89e4 <DAA+0xb0>
    8948:	e213e001 	ands	lr, r3, #1
    894c:	03a02006 	moveq	r2, #6
  int carry = 0;
    8950:	01a0c00e 	moveq	ip, lr
  if(BR.A > 0x99 || GETFLAG(F_C)) {
    8954:	1a000022 	bne	89e4 <DAA+0xb0>
    correction_factor |= 0x60;
    carry = 1;
  }
  if((BR.A & 0x0f) > 9 || GETFLAG(F_H))
    8958:	e201400f 	and	r4, r1, #15
    895c:	e3540009 	cmp	r4, #9
    8960:	8a000001 	bhi	896c <DAA+0x38>
    8964:	e3130010 	tst	r3, #16
    8968:	01a0200e 	moveq	r2, lr
    correction_factor |= 0x06;
  int a_before = BR.A;
  if(GETFLAG(F_N))
    896c:	e3130002 	tst	r3, #2
    BR.A -= correction_factor;
    8970:	10412002 	subne	r2, r1, r2
  else              
    BR.A += correction_factor;
    8974:	00812002 	addeq	r2, r1, r2
    8978:	e6ef2072 	uxtb	r2, r2
	if (val)
    897c:	e0211002 	eor	r1, r1, r2
    8980:	e3110010 	tst	r1, #16
	BR.F |= flag;
    8984:	13833010 	orrne	r3, r3, #16
	BR.F &= ~flag;
    8988:	020330ef 	andeq	r3, r3, #239	; 0xef
	if (val)
    898c:	e35c0000 	cmp	ip, #0
	BR.F |= flag;
    8990:	13833001 	orrne	r3, r3, #1
	BR.F &= ~flag;
    8994:	020330fe 	andeq	r3, r3, #254	; 0xfe
	if (val)
    8998:	e3120080 	tst	r2, #128	; 0x80
    899c:	e5c03000 	strb	r3, [r0]
    89a0:	e5c02001 	strb	r2, [r0, #1]
	BR.F |= flag;
    89a4:	13833080 	orrne	r3, r3, #128	; 0x80
	if (val)
    89a8:	1a000011 	bne	89f4 <DAA+0xc0>
	BR.F &= ~flag;
    89ac:	e203307f 	and	r3, r3, #127	; 0x7f
	if (val)
    89b0:	e3520000 	cmp	r2, #0
	BR.F &= ~flag;
    89b4:	e5c03000 	strb	r3, [r0]
	BR.F |= flag;
    89b8:	03831040 	orreq	r1, r3, #64	; 0x40
	if (val)
    89bc:	1a00000c 	bne	89f4 <DAA+0xc0>
	BR.F |= flag;
    89c0:	e3813004 	orr	r3, r1, #4
	if (val)
    89c4:	e3120020 	tst	r2, #32
	BR.F |= flag;
    89c8:	13833020 	orrne	r3, r3, #32
	BR.F &= ~flag;
    89cc:	020330df 	andeq	r3, r3, #223	; 0xdf
	if (val)
    89d0:	e3120008 	tst	r2, #8
	BR.F |= flag;
    89d4:	13833008 	orrne	r3, r3, #8
	BR.F &= ~flag;
    89d8:	020330f7 	andeq	r3, r3, #247	; 0xf7
    89dc:	e5c03000 	strb	r3, [r0]
	doDAA(ctx);
	
}
    89e0:	e8bd8010 	pop	{r4, pc}
  if(BR.A > 0x99 || GETFLAG(F_C)) {
    89e4:	e3a0e060 	mov	lr, #96	; 0x60
    89e8:	e3a02066 	mov	r2, #102	; 0x66
    carry = 1;
    89ec:	e3a0c001 	mov	ip, #1
    89f0:	eaffffd8 	b	8958 <DAA+0x24>
  VALFLAG(F_H, (a_before ^ BR.A) & 0x10);
  VALFLAG(F_C, carry);
  VALFLAG(F_S, (BR.A & 0x80) != 0);
  VALFLAG(F_Z, (BR.A == 0));
  VALFLAG(F_PV, parityBit[BR.A]);
    89f4:	e59f101c 	ldr	r1, [pc, #28]	; 8a18 <DAA+0xe4>
	BR.F &= ~flag;
    89f8:	e6af3073 	sxtb	r3, r3
	if (val)
    89fc:	e791c102 	ldr	ip, [r1, r2, lsl #2]
	BR.F &= ~flag;
    8a00:	e20310bf 	and	r1, r3, #191	; 0xbf
	if (val)
    8a04:	e35c0000 	cmp	ip, #0
    8a08:	e5c01000 	strb	r1, [r0]
	BR.F &= ~flag;
    8a0c:	020330bb 	andeq	r3, r3, #187	; 0xbb
	if (val)
    8a10:	0affffeb 	beq	89c4 <DAA+0x90>
    8a14:	eaffffe9 	b	89c0 <DAA+0x8c>
    8a18:	0004f000 	.word	0x0004f000

00008a1c <DEC_BC>:
}


static void DEC_BC (Z80Context* ctx)
{
	ctx->tstates += 2;
    8a1c:	e5902040 	ldr	r2, [r0, #64]	; 0x40
	WR.BC--;
    8a20:	e1d030b2 	ldrh	r3, [r0, #2]
	ctx->tstates += 2;
    8a24:	e2822002 	add	r2, r2, #2
	WR.BC--;
    8a28:	e2433001 	sub	r3, r3, #1
	ctx->tstates += 2;
    8a2c:	e5802040 	str	r2, [r0, #64]	; 0x40
	WR.BC--;
    8a30:	e1c030b2 	strh	r3, [r0, #2]
}
    8a34:	e12fff1e 	bx	lr

00008a38 <DEC_DE>:
}


static void DEC_DE (Z80Context* ctx)
{
	ctx->tstates += 2;
    8a38:	e5902040 	ldr	r2, [r0, #64]	; 0x40
	WR.DE--;
    8a3c:	e1d030b4 	ldrh	r3, [r0, #4]
	ctx->tstates += 2;
    8a40:	e2822002 	add	r2, r2, #2
	WR.DE--;
    8a44:	e2433001 	sub	r3, r3, #1
	ctx->tstates += 2;
    8a48:	e5802040 	str	r2, [r0, #64]	; 0x40
	WR.DE--;
    8a4c:	e1c030b4 	strh	r3, [r0, #4]
}
    8a50:	e12fff1e 	bx	lr

00008a54 <DEC_HL>:
}


static void DEC_HL (Z80Context* ctx)
{
	ctx->tstates += 2;
    8a54:	e5902040 	ldr	r2, [r0, #64]	; 0x40
	WR.HL--;
    8a58:	e1d030b6 	ldrh	r3, [r0, #6]
	ctx->tstates += 2;
    8a5c:	e2822002 	add	r2, r2, #2
	WR.HL--;
    8a60:	e2433001 	sub	r3, r3, #1
	ctx->tstates += 2;
    8a64:	e5802040 	str	r2, [r0, #64]	; 0x40
	WR.HL--;
    8a68:	e1c030b6 	strh	r3, [r0, #6]
}
    8a6c:	e12fff1e 	bx	lr

00008a70 <DEC_IX>:


static void DEC_IX (Z80Context* ctx)
{
	ctx->tstates += 2;
    8a70:	e5902040 	ldr	r2, [r0, #64]	; 0x40
	WR.IX--;
    8a74:	e1d030b8 	ldrh	r3, [r0, #8]
	ctx->tstates += 2;
    8a78:	e2822002 	add	r2, r2, #2
	WR.IX--;
    8a7c:	e2433001 	sub	r3, r3, #1
	ctx->tstates += 2;
    8a80:	e5802040 	str	r2, [r0, #64]	; 0x40
	WR.IX--;
    8a84:	e1c030b8 	strh	r3, [r0, #8]
}
    8a88:	e12fff1e 	bx	lr

00008a8c <DEC_IY>:
}


static void DEC_IY (Z80Context* ctx)
{
	ctx->tstates += 2;
    8a8c:	e5902040 	ldr	r2, [r0, #64]	; 0x40
	WR.IY--;
    8a90:	e1d030ba 	ldrh	r3, [r0, #10]
	ctx->tstates += 2;
    8a94:	e2822002 	add	r2, r2, #2
	WR.IY--;
    8a98:	e2433001 	sub	r3, r3, #1
	ctx->tstates += 2;
    8a9c:	e5802040 	str	r2, [r0, #64]	; 0x40
	WR.IY--;
    8aa0:	e1c030ba 	strh	r3, [r0, #10]
}
    8aa4:	e12fff1e 	bx	lr

00008aa8 <DEC_SP>:
}


static void DEC_SP (Z80Context* ctx)
{
	ctx->tstates += 2;
    8aa8:	e5902040 	ldr	r2, [r0, #64]	; 0x40
	WR.SP--;
    8aac:	e1d030bc 	ldrh	r3, [r0, #12]
	ctx->tstates += 2;
    8ab0:	e2822002 	add	r2, r2, #2
	WR.SP--;
    8ab4:	e2433001 	sub	r3, r3, #1
	ctx->tstates += 2;
    8ab8:	e5802040 	str	r2, [r0, #64]	; 0x40
	WR.SP--;
    8abc:	e1c030bc 	strh	r3, [r0, #12]
}
    8ac0:	e12fff1e 	bx	lr

00008ac4 <DI>:


static void DI (Z80Context* ctx)
{
	ctx->IFF1 = ctx->IFF2 = IE_DI;
    8ac4:	e3a02000 	mov	r2, #0
	ctx->defer_int = 1;
    8ac8:	e3a03001 	mov	r3, #1
	ctx->IFF1 = ctx->IFF2 = IE_DI;
    8acc:	e1c022b0 	strh	r2, [r0, #32]
	ctx->defer_int = 1;
    8ad0:	e5c03046 	strb	r3, [r0, #70]	; 0x46
}
    8ad4:	e12fff1e 	bx	lr

00008ad8 <DJNZ_off_PC_e>:


static void DJNZ_off_PC_e (Z80Context* ctx)
{
    8ad8:	e92d4010 	push	{r4, lr}
    8adc:	e1a04000 	mov	r4, r0
	ctx->tstates += 1;
	char off = read8(ctx, ctx->PC++);
    8ae0:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 1;
    8ae4:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	char off = read8(ctx, ctx->PC++);
    8ae8:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
    8aec:	e2833004 	add	r3, r3, #4
    8af0:	e5803040 	str	r3, [r0, #64]	; 0x40
    8af4:	e1c021bc 	strh	r2, [r0, #28]
	return ctx->memRead(ctx->memParam, addr);	
    8af8:	e5903024 	ldr	r3, [r0, #36]	; 0x24
    8afc:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
    8b00:	e12fff33 	blx	r3
	BR.B--;
    8b04:	e5d43003 	ldrb	r3, [r4, #3]
    8b08:	e2433001 	sub	r3, r3, #1
    8b0c:	e6ef3073 	uxtb	r3, r3
	if (BR.B)
    8b10:	e3530000 	cmp	r3, #0
	BR.B--;
    8b14:	e5c43003 	strb	r3, [r4, #3]
	if (BR.B)
    8b18:	08bd8010 	popeq	{r4, pc}
	{
		ctx->tstates += 5;
    8b1c:	e5942040 	ldr	r2, [r4, #64]	; 0x40
		ctx->PC += off;
    8b20:	e1d431bc 	ldrh	r3, [r4, #28]
		ctx->tstates += 5;
    8b24:	e2822005 	add	r2, r2, #5
		ctx->PC += off;
    8b28:	e0830000 	add	r0, r3, r0
		ctx->tstates += 5;
    8b2c:	e5842040 	str	r2, [r4, #64]	; 0x40
		ctx->PC += off;
    8b30:	e1c401bc 	strh	r0, [r4, #28]
	}
}
    8b34:	e8bd8010 	pop	{r4, pc}

00008b38 <EI>:


static void EI (Z80Context* ctx)
{
	ctx->IFF1 = ctx->IFF2 = IE_EI;
	ctx->defer_int = 1;
    8b38:	e3a02001 	mov	r2, #1
	ctx->IFF1 = ctx->IFF2 = IE_EI;
    8b3c:	e59f3008 	ldr	r3, [pc, #8]	; 8b4c <EI+0x14>
	ctx->defer_int = 1;
    8b40:	e5c02046 	strb	r2, [r0, #70]	; 0x46
	ctx->IFF1 = ctx->IFF2 = IE_EI;
    8b44:	e1c032b0 	strh	r3, [r0, #32]
}
    8b48:	e12fff1e 	bx	lr
    8b4c:	00000101 	.word	0x00000101

00008b50 <EX_AF_AF_>:
}


static void EX_AF_AF_ (Z80Context* ctx)
{
	ushort tmp = ctx->R1.wr.AF;
    8b50:	e1d020b0 	ldrh	r2, [r0]
	ctx->R1.wr.AF = ctx->R2.wr.AF;
    8b54:	e1d030be 	ldrh	r3, [r0, #14]
	ctx->R2.wr.AF = tmp;
    8b58:	e1c020be 	strh	r2, [r0, #14]
	ctx->R1.wr.AF = ctx->R2.wr.AF;
    8b5c:	e1c030b0 	strh	r3, [r0]
}
    8b60:	e12fff1e 	bx	lr

00008b64 <EX_DE_HL>:


static void EX_DE_HL (Z80Context* ctx)
{
	ushort tmp = WR.DE;
    8b64:	e1d020b4 	ldrh	r2, [r0, #4]
	WR.DE = WR.HL;
    8b68:	e1d030b6 	ldrh	r3, [r0, #6]
	WR.HL = tmp;
    8b6c:	e1c020b6 	strh	r2, [r0, #6]
	WR.DE = WR.HL;
    8b70:	e1c030b4 	strh	r3, [r0, #4]
}
    8b74:	e12fff1e 	bx	lr

00008b78 <EXX>:

static void EXX (Z80Context* ctx)
{
	ushort tmp;	
	tmp = ctx->R1.wr.BC;
	ctx->R1.wr.BC = ctx->R2.wr.BC;
    8b78:	e1d021b0 	ldrh	r2, [r0, #16]
	ctx->R2.wr.BC = tmp;	
	
	tmp = ctx->R1.wr.DE;
    8b7c:	e1d010b4 	ldrh	r1, [r0, #4]
	ctx->R1.wr.DE = ctx->R2.wr.DE;
    8b80:	e1d0c1b2 	ldrh	ip, [r0, #18]
	ctx->R2.wr.DE = tmp;	
	
	tmp = ctx->R1.wr.HL;
    8b84:	e1d030b6 	ldrh	r3, [r0, #6]
{
    8b88:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
	tmp = ctx->R1.wr.BC;
    8b8c:	e1d0e0b2 	ldrh	lr, [r0, #2]
	ctx->R1.wr.BC = ctx->R2.wr.BC;
    8b90:	e1c020b2 	strh	r2, [r0, #2]
	ctx->R1.wr.HL = ctx->R2.wr.HL;
    8b94:	e1d021b4 	ldrh	r2, [r0, #20]
	ctx->R2.wr.BC = tmp;	
    8b98:	e1c0e1b0 	strh	lr, [r0, #16]
	ctx->R1.wr.DE = ctx->R2.wr.DE;
    8b9c:	e1c0c0b4 	strh	ip, [r0, #4]
	ctx->R2.wr.DE = tmp;	
    8ba0:	e1c011b2 	strh	r1, [r0, #18]
	ctx->R1.wr.HL = ctx->R2.wr.HL;
    8ba4:	e1c020b6 	strh	r2, [r0, #6]
	ctx->R2.wr.HL = tmp;
    8ba8:	e1c031b4 	strh	r3, [r0, #20]
}
    8bac:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

00008bb0 <HALT>:


static void HALT (Z80Context* ctx)
{
	ctx->halted = 1;
    8bb0:	e3a02001 	mov	r2, #1
	ctx->PC--;
    8bb4:	e1d031bc 	ldrh	r3, [r0, #28]
	ctx->halted = 1;
    8bb8:	e5c0203c 	strb	r2, [r0, #60]	; 0x3c
	ctx->PC--;
    8bbc:	e2433001 	sub	r3, r3, #1
    8bc0:	e1c031bc 	strh	r3, [r0, #28]
}
    8bc4:	e12fff1e 	bx	lr

00008bc8 <IM_0>:


static void IM_0 (Z80Context* ctx)
{
	ctx->IM = 0;
    8bc8:	e3a03000 	mov	r3, #0
    8bcc:	e5c03022 	strb	r3, [r0, #34]	; 0x22
}
    8bd0:	e12fff1e 	bx	lr

00008bd4 <IM_1>:


static void IM_1 (Z80Context* ctx)
{
	ctx->IM = 1;
    8bd4:	e3a03001 	mov	r3, #1
    8bd8:	e5c03022 	strb	r3, [r0, #34]	; 0x22
}
    8bdc:	e12fff1e 	bx	lr

00008be0 <IM_2>:


static void IM_2 (Z80Context* ctx)
{
	ctx->IM = 2;
    8be0:	e3a03002 	mov	r3, #2
    8be4:	e5c03022 	strb	r3, [r0, #34]	; 0x22
}
    8be8:	e12fff1e 	bx	lr

00008bec <IN_A_off_n>:
}


static void IN_A_off_n (Z80Context* ctx)
{
	byte port = read8(ctx, ctx->PC++);	
    8bec:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 3;
    8bf0:	e5903040 	ldr	r3, [r0, #64]	; 0x40
{
    8bf4:	e92d4010 	push	{r4, lr}
	byte port = read8(ctx, ctx->PC++);	
    8bf8:	e2812001 	add	r2, r1, #1
{
    8bfc:	e1a04000 	mov	r4, r0
    8c00:	e2833003 	add	r3, r3, #3
	byte port = read8(ctx, ctx->PC++);	
    8c04:	e1c021bc 	strh	r2, [r0, #28]
    8c08:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    8c0c:	e5903024 	ldr	r3, [r0, #36]	; 0x24
    8c10:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
    8c14:	e12fff33 	blx	r3
	ctx->tstates += 4;
    8c18:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	BR.A = ioRead(ctx, BR.A << 8 | port);
    8c1c:	e5d41001 	ldrb	r1, [r4, #1]
    8c20:	e2833004 	add	r3, r3, #4
    8c24:	e1801401 	orr	r1, r0, r1, lsl #8
    8c28:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->ioRead(ctx->ioParam, addr);
    8c2c:	e6ff1071 	uxth	r1, r1
    8c30:	e5943030 	ldr	r3, [r4, #48]	; 0x30
    8c34:	e5940038 	ldr	r0, [r4, #56]	; 0x38
    8c38:	e12fff33 	blx	r3
    8c3c:	e5c40001 	strb	r0, [r4, #1]
}
    8c40:	e8bd8010 	pop	{r4, pc}

00008c44 <INC_BC>:
}


static void INC_BC (Z80Context* ctx)
{
	ctx->tstates += 2;
    8c44:	e5902040 	ldr	r2, [r0, #64]	; 0x40
	WR.BC++;
    8c48:	e1d030b2 	ldrh	r3, [r0, #2]
	ctx->tstates += 2;
    8c4c:	e2822002 	add	r2, r2, #2
	WR.BC++;
    8c50:	e2833001 	add	r3, r3, #1
	ctx->tstates += 2;
    8c54:	e5802040 	str	r2, [r0, #64]	; 0x40
	WR.BC++;
    8c58:	e1c030b2 	strh	r3, [r0, #2]
}
    8c5c:	e12fff1e 	bx	lr

00008c60 <INC_DE>:
}


static void INC_DE (Z80Context* ctx)
{
	ctx->tstates += 2;
    8c60:	e5902040 	ldr	r2, [r0, #64]	; 0x40
	WR.DE++;
    8c64:	e1d030b4 	ldrh	r3, [r0, #4]
	ctx->tstates += 2;
    8c68:	e2822002 	add	r2, r2, #2
	WR.DE++;
    8c6c:	e2833001 	add	r3, r3, #1
	ctx->tstates += 2;
    8c70:	e5802040 	str	r2, [r0, #64]	; 0x40
	WR.DE++;
    8c74:	e1c030b4 	strh	r3, [r0, #4]
}
    8c78:	e12fff1e 	bx	lr

00008c7c <INC_HL>:
}


static void INC_HL (Z80Context* ctx)
{
	ctx->tstates += 2;
    8c7c:	e5902040 	ldr	r2, [r0, #64]	; 0x40
	WR.HL++;
    8c80:	e1d030b6 	ldrh	r3, [r0, #6]
	ctx->tstates += 2;
    8c84:	e2822002 	add	r2, r2, #2
	WR.HL++;
    8c88:	e2833001 	add	r3, r3, #1
	ctx->tstates += 2;
    8c8c:	e5802040 	str	r2, [r0, #64]	; 0x40
	WR.HL++;
    8c90:	e1c030b6 	strh	r3, [r0, #6]
}
    8c94:	e12fff1e 	bx	lr

00008c98 <INC_IX>:


static void INC_IX (Z80Context* ctx)
{
	ctx->tstates += 2;
    8c98:	e5902040 	ldr	r2, [r0, #64]	; 0x40
	WR.IX++;
    8c9c:	e1d030b8 	ldrh	r3, [r0, #8]
	ctx->tstates += 2;
    8ca0:	e2822002 	add	r2, r2, #2
	WR.IX++;
    8ca4:	e2833001 	add	r3, r3, #1
	ctx->tstates += 2;
    8ca8:	e5802040 	str	r2, [r0, #64]	; 0x40
	WR.IX++;
    8cac:	e1c030b8 	strh	r3, [r0, #8]
}
    8cb0:	e12fff1e 	bx	lr

00008cb4 <INC_IY>:
}


static void INC_IY (Z80Context* ctx)
{
	ctx->tstates += 2;
    8cb4:	e5902040 	ldr	r2, [r0, #64]	; 0x40
	WR.IY++;
    8cb8:	e1d030ba 	ldrh	r3, [r0, #10]
	ctx->tstates += 2;
    8cbc:	e2822002 	add	r2, r2, #2
	WR.IY++;
    8cc0:	e2833001 	add	r3, r3, #1
	ctx->tstates += 2;
    8cc4:	e5802040 	str	r2, [r0, #64]	; 0x40
	WR.IY++;
    8cc8:	e1c030ba 	strh	r3, [r0, #10]
}
    8ccc:	e12fff1e 	bx	lr

00008cd0 <INC_SP>:
}


static void INC_SP (Z80Context* ctx)
{
	ctx->tstates += 2;
    8cd0:	e5902040 	ldr	r2, [r0, #64]	; 0x40
	WR.SP++;
    8cd4:	e1d030bc 	ldrh	r3, [r0, #12]
	ctx->tstates += 2;
    8cd8:	e2822002 	add	r2, r2, #2
	WR.SP++;
    8cdc:	e2833001 	add	r3, r3, #1
	ctx->tstates += 2;
    8ce0:	e5802040 	str	r2, [r0, #64]	; 0x40
	WR.SP++;
    8ce4:	e1c030bc 	strh	r3, [r0, #12]
}
    8ce8:	e12fff1e 	bx	lr

00008cec <JP_off_HL>:
}


static void JP_off_HL (Z80Context* ctx)
{
	ctx->PC = WR.HL;
    8cec:	e1d030b6 	ldrh	r3, [r0, #6]
    8cf0:	e1c031bc 	strh	r3, [r0, #28]
	
}
    8cf4:	e12fff1e 	bx	lr

00008cf8 <JP_off_IX>:


static void JP_off_IX (Z80Context* ctx)
{
	ctx->PC = WR.IX;
    8cf8:	e1d030b8 	ldrh	r3, [r0, #8]
    8cfc:	e1c031bc 	strh	r3, [r0, #28]
	
}
    8d00:	e12fff1e 	bx	lr

00008d04 <JP_off_IY>:


static void JP_off_IY (Z80Context* ctx)
{
	ctx->PC = WR.IY;
    8d04:	e1d030ba 	ldrh	r3, [r0, #10]
    8d08:	e1c031bc 	strh	r3, [r0, #28]
	
}
    8d0c:	e12fff1e 	bx	lr

00008d10 <LD_off_BC_A>:
	ctx->tstates += 3;
    8d10:	e5903040 	ldr	r3, [r0, #64]	; 0x40
}


static void LD_off_BC_A (Z80Context* ctx)
{
	write8(ctx, WR.BC, BR.A);
    8d14:	e1d010b2 	ldrh	r1, [r0, #2]
    8d18:	e2833003 	add	r3, r3, #3
    8d1c:	e5803040 	str	r3, [r0, #64]	; 0x40
    8d20:	e5d02001 	ldrb	r2, [r0, #1]
	ctx->memWrite(ctx->memParam, addr, val);	
    8d24:	e5903028 	ldr	r3, [r0, #40]	; 0x28
    8d28:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
    8d2c:	e12fff13 	bx	r3

00008d30 <LD_off_DE_A>:
	ctx->tstates += 3;
    8d30:	e5903040 	ldr	r3, [r0, #64]	; 0x40
}


static void LD_off_DE_A (Z80Context* ctx)
{
	write8(ctx, WR.DE, BR.A);
    8d34:	e1d010b4 	ldrh	r1, [r0, #4]
    8d38:	e2833003 	add	r3, r3, #3
    8d3c:	e5803040 	str	r3, [r0, #64]	; 0x40
    8d40:	e5d02001 	ldrb	r2, [r0, #1]
	ctx->memWrite(ctx->memParam, addr, val);	
    8d44:	e5903028 	ldr	r3, [r0, #40]	; 0x28
    8d48:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
    8d4c:	e12fff13 	bx	r3

00008d50 <LD_off_HL_A>:
	ctx->tstates += 3;
    8d50:	e5903040 	ldr	r3, [r0, #64]	; 0x40
}


static void LD_off_HL_A (Z80Context* ctx)
{
	write8(ctx, WR.HL, BR.A);
    8d54:	e1d010b6 	ldrh	r1, [r0, #6]
    8d58:	e2833003 	add	r3, r3, #3
    8d5c:	e5803040 	str	r3, [r0, #64]	; 0x40
    8d60:	e5d02001 	ldrb	r2, [r0, #1]
	ctx->memWrite(ctx->memParam, addr, val);	
    8d64:	e5903028 	ldr	r3, [r0, #40]	; 0x28
    8d68:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
    8d6c:	e12fff13 	bx	r3

00008d70 <LD_off_HL_B>:
	ctx->tstates += 3;
    8d70:	e5903040 	ldr	r3, [r0, #64]	; 0x40
}


static void LD_off_HL_B (Z80Context* ctx)
{
	write8(ctx, WR.HL, BR.B);
    8d74:	e1d010b6 	ldrh	r1, [r0, #6]
    8d78:	e2833003 	add	r3, r3, #3
    8d7c:	e5803040 	str	r3, [r0, #64]	; 0x40
    8d80:	e5d02003 	ldrb	r2, [r0, #3]
	ctx->memWrite(ctx->memParam, addr, val);	
    8d84:	e5903028 	ldr	r3, [r0, #40]	; 0x28
    8d88:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
    8d8c:	e12fff13 	bx	r3

00008d90 <LD_off_HL_C>:
	ctx->tstates += 3;
    8d90:	e5903040 	ldr	r3, [r0, #64]	; 0x40
}


static void LD_off_HL_C (Z80Context* ctx)
{
	write8(ctx, WR.HL, BR.C);
    8d94:	e1d010b6 	ldrh	r1, [r0, #6]
    8d98:	e2833003 	add	r3, r3, #3
    8d9c:	e5803040 	str	r3, [r0, #64]	; 0x40
    8da0:	e5d02002 	ldrb	r2, [r0, #2]
	ctx->memWrite(ctx->memParam, addr, val);	
    8da4:	e5903028 	ldr	r3, [r0, #40]	; 0x28
    8da8:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
    8dac:	e12fff13 	bx	r3

00008db0 <LD_off_HL_D>:
	ctx->tstates += 3;
    8db0:	e5903040 	ldr	r3, [r0, #64]	; 0x40
}


static void LD_off_HL_D (Z80Context* ctx)
{
	write8(ctx, WR.HL, BR.D);
    8db4:	e1d010b6 	ldrh	r1, [r0, #6]
    8db8:	e2833003 	add	r3, r3, #3
    8dbc:	e5803040 	str	r3, [r0, #64]	; 0x40
    8dc0:	e5d02005 	ldrb	r2, [r0, #5]
	ctx->memWrite(ctx->memParam, addr, val);	
    8dc4:	e5903028 	ldr	r3, [r0, #40]	; 0x28
    8dc8:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
    8dcc:	e12fff13 	bx	r3

00008dd0 <LD_off_HL_E>:
	ctx->tstates += 3;
    8dd0:	e5903040 	ldr	r3, [r0, #64]	; 0x40
}


static void LD_off_HL_E (Z80Context* ctx)
{
	write8(ctx, WR.HL, BR.E);
    8dd4:	e1d010b6 	ldrh	r1, [r0, #6]
    8dd8:	e2833003 	add	r3, r3, #3
    8ddc:	e5803040 	str	r3, [r0, #64]	; 0x40
    8de0:	e5d02004 	ldrb	r2, [r0, #4]
	ctx->memWrite(ctx->memParam, addr, val);	
    8de4:	e5903028 	ldr	r3, [r0, #40]	; 0x28
    8de8:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
    8dec:	e12fff13 	bx	r3

00008df0 <LD_off_HL_H>:
	ctx->tstates += 3;
    8df0:	e5903040 	ldr	r3, [r0, #64]	; 0x40
}


static void LD_off_HL_H (Z80Context* ctx)
{
	write8(ctx, WR.HL, BR.H);
    8df4:	e1d010b6 	ldrh	r1, [r0, #6]
    8df8:	e2833003 	add	r3, r3, #3
    8dfc:	e5803040 	str	r3, [r0, #64]	; 0x40
    8e00:	e5d02007 	ldrb	r2, [r0, #7]
	ctx->memWrite(ctx->memParam, addr, val);	
    8e04:	e5903028 	ldr	r3, [r0, #40]	; 0x28
    8e08:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
    8e0c:	e12fff13 	bx	r3

00008e10 <LD_off_HL_L>:
	ctx->tstates += 3;
    8e10:	e5903040 	ldr	r3, [r0, #64]	; 0x40
}


static void LD_off_HL_L (Z80Context* ctx)
{
	write8(ctx, WR.HL, BR.L);
    8e14:	e1d010b6 	ldrh	r1, [r0, #6]
    8e18:	e2833003 	add	r3, r3, #3
    8e1c:	e5803040 	str	r3, [r0, #64]	; 0x40
    8e20:	e5d02006 	ldrb	r2, [r0, #6]
	ctx->memWrite(ctx->memParam, addr, val);	
    8e24:	e5903028 	ldr	r3, [r0, #40]	; 0x28
    8e28:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
    8e2c:	e12fff13 	bx	r3

00008e30 <LD_off_HL_n>:
}


static void LD_off_HL_n (Z80Context* ctx)
{
    8e30:	e92d4070 	push	{r4, r5, r6, lr}
    8e34:	e1a04000 	mov	r4, r0
	write8(ctx, WR.HL, read8(ctx, ctx->PC++));
    8e38:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 3;
    8e3c:	e5903040 	ldr	r3, [r0, #64]	; 0x40
    8e40:	e2812001 	add	r2, r1, #1
    8e44:	e2833003 	add	r3, r3, #3
    8e48:	e1c021bc 	strh	r2, [r0, #28]
    8e4c:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    8e50:	e5903024 	ldr	r3, [r0, #36]	; 0x24
    8e54:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
    8e58:	e1d450b6 	ldrh	r5, [r4, #6]
    8e5c:	e12fff33 	blx	r3
	ctx->tstates += 3;
    8e60:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	ctx->memWrite(ctx->memParam, addr, val);	
    8e64:	e1a02000 	mov	r2, r0
	ctx->tstates += 3;
    8e68:	e2833003 	add	r3, r3, #3
    8e6c:	e5843040 	str	r3, [r4, #64]	; 0x40
	ctx->memWrite(ctx->memParam, addr, val);	
    8e70:	e1a01005 	mov	r1, r5
    8e74:	e5943028 	ldr	r3, [r4, #40]	; 0x28
    8e78:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
	
}
    8e7c:	e8bd4070 	pop	{r4, r5, r6, lr}
    8e80:	e12fff13 	bx	r3

00008e84 <LD_off_IX_d_A>:


static void LD_off_IX_d_A (Z80Context* ctx)
{
    8e84:	e92d4070 	push	{r4, r5, r6, lr}
    8e88:	e1a04000 	mov	r4, r0
	ctx->tstates += 5;
	write8(ctx, WR.IX + (char) read8(ctx, ctx->PC++), BR.A);
    8e8c:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 5;
    8e90:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	write8(ctx, WR.IX + (char) read8(ctx, ctx->PC++), BR.A);
    8e94:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
    8e98:	e2833008 	add	r3, r3, #8
    8e9c:	e1c021bc 	strh	r2, [r0, #28]
    8ea0:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    8ea4:	e5903024 	ldr	r3, [r0, #36]	; 0x24
    8ea8:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
    8eac:	e1d450b8 	ldrh	r5, [r4, #8]
    8eb0:	e12fff33 	blx	r3
	ctx->tstates += 3;
    8eb4:	e5943040 	ldr	r3, [r4, #64]	; 0x40
    8eb8:	e0851000 	add	r1, r5, r0
    8ebc:	e2833003 	add	r3, r3, #3
    8ec0:	e5843040 	str	r3, [r4, #64]	; 0x40
    8ec4:	e5d42001 	ldrb	r2, [r4, #1]
	ctx->memWrite(ctx->memParam, addr, val);	
    8ec8:	e5943028 	ldr	r3, [r4, #40]	; 0x28
    8ecc:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    8ed0:	e6ff1071 	uxth	r1, r1
	
}
    8ed4:	e8bd4070 	pop	{r4, r5, r6, lr}
    8ed8:	e12fff13 	bx	r3

00008edc <LD_off_IX_d_B>:


static void LD_off_IX_d_B (Z80Context* ctx)
{
    8edc:	e92d4070 	push	{r4, r5, r6, lr}
    8ee0:	e1a04000 	mov	r4, r0
	ctx->tstates += 5;
	write8(ctx, WR.IX + (char) read8(ctx, ctx->PC++), BR.B);
    8ee4:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 5;
    8ee8:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	write8(ctx, WR.IX + (char) read8(ctx, ctx->PC++), BR.B);
    8eec:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
    8ef0:	e2833008 	add	r3, r3, #8
    8ef4:	e1c021bc 	strh	r2, [r0, #28]
    8ef8:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    8efc:	e5903024 	ldr	r3, [r0, #36]	; 0x24
    8f00:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
    8f04:	e1d450b8 	ldrh	r5, [r4, #8]
    8f08:	e12fff33 	blx	r3
	ctx->tstates += 3;
    8f0c:	e5943040 	ldr	r3, [r4, #64]	; 0x40
    8f10:	e0851000 	add	r1, r5, r0
    8f14:	e2833003 	add	r3, r3, #3
    8f18:	e5843040 	str	r3, [r4, #64]	; 0x40
    8f1c:	e5d42003 	ldrb	r2, [r4, #3]
	ctx->memWrite(ctx->memParam, addr, val);	
    8f20:	e5943028 	ldr	r3, [r4, #40]	; 0x28
    8f24:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    8f28:	e6ff1071 	uxth	r1, r1
	
}
    8f2c:	e8bd4070 	pop	{r4, r5, r6, lr}
    8f30:	e12fff13 	bx	r3

00008f34 <LD_off_IX_d_C>:


static void LD_off_IX_d_C (Z80Context* ctx)
{
    8f34:	e92d4070 	push	{r4, r5, r6, lr}
    8f38:	e1a04000 	mov	r4, r0
	ctx->tstates += 5;
	write8(ctx, WR.IX + (char) read8(ctx, ctx->PC++), BR.C);
    8f3c:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 5;
    8f40:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	write8(ctx, WR.IX + (char) read8(ctx, ctx->PC++), BR.C);
    8f44:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
    8f48:	e2833008 	add	r3, r3, #8
    8f4c:	e1c021bc 	strh	r2, [r0, #28]
    8f50:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    8f54:	e5903024 	ldr	r3, [r0, #36]	; 0x24
    8f58:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
    8f5c:	e1d450b8 	ldrh	r5, [r4, #8]
    8f60:	e12fff33 	blx	r3
	ctx->tstates += 3;
    8f64:	e5943040 	ldr	r3, [r4, #64]	; 0x40
    8f68:	e0851000 	add	r1, r5, r0
    8f6c:	e2833003 	add	r3, r3, #3
    8f70:	e5843040 	str	r3, [r4, #64]	; 0x40
    8f74:	e5d42002 	ldrb	r2, [r4, #2]
	ctx->memWrite(ctx->memParam, addr, val);	
    8f78:	e5943028 	ldr	r3, [r4, #40]	; 0x28
    8f7c:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    8f80:	e6ff1071 	uxth	r1, r1
	
}
    8f84:	e8bd4070 	pop	{r4, r5, r6, lr}
    8f88:	e12fff13 	bx	r3

00008f8c <LD_off_IX_d_D>:


static void LD_off_IX_d_D (Z80Context* ctx)
{
    8f8c:	e92d4070 	push	{r4, r5, r6, lr}
    8f90:	e1a04000 	mov	r4, r0
	ctx->tstates += 5;
	write8(ctx, WR.IX + (char) read8(ctx, ctx->PC++), BR.D);
    8f94:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 5;
    8f98:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	write8(ctx, WR.IX + (char) read8(ctx, ctx->PC++), BR.D);
    8f9c:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
    8fa0:	e2833008 	add	r3, r3, #8
    8fa4:	e1c021bc 	strh	r2, [r0, #28]
    8fa8:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    8fac:	e5903024 	ldr	r3, [r0, #36]	; 0x24
    8fb0:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
    8fb4:	e1d450b8 	ldrh	r5, [r4, #8]
    8fb8:	e12fff33 	blx	r3
	ctx->tstates += 3;
    8fbc:	e5943040 	ldr	r3, [r4, #64]	; 0x40
    8fc0:	e0851000 	add	r1, r5, r0
    8fc4:	e2833003 	add	r3, r3, #3
    8fc8:	e5843040 	str	r3, [r4, #64]	; 0x40
    8fcc:	e5d42005 	ldrb	r2, [r4, #5]
	ctx->memWrite(ctx->memParam, addr, val);	
    8fd0:	e5943028 	ldr	r3, [r4, #40]	; 0x28
    8fd4:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    8fd8:	e6ff1071 	uxth	r1, r1
	
}
    8fdc:	e8bd4070 	pop	{r4, r5, r6, lr}
    8fe0:	e12fff13 	bx	r3

00008fe4 <LD_off_IX_d_E>:


static void LD_off_IX_d_E (Z80Context* ctx)
{
    8fe4:	e92d4070 	push	{r4, r5, r6, lr}
    8fe8:	e1a04000 	mov	r4, r0
	ctx->tstates += 5;
	write8(ctx, WR.IX + (char) read8(ctx, ctx->PC++), BR.E);
    8fec:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 5;
    8ff0:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	write8(ctx, WR.IX + (char) read8(ctx, ctx->PC++), BR.E);
    8ff4:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
    8ff8:	e2833008 	add	r3, r3, #8
    8ffc:	e1c021bc 	strh	r2, [r0, #28]
    9000:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    9004:	e5903024 	ldr	r3, [r0, #36]	; 0x24
    9008:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
    900c:	e1d450b8 	ldrh	r5, [r4, #8]
    9010:	e12fff33 	blx	r3
	ctx->tstates += 3;
    9014:	e5943040 	ldr	r3, [r4, #64]	; 0x40
    9018:	e0851000 	add	r1, r5, r0
    901c:	e2833003 	add	r3, r3, #3
    9020:	e5843040 	str	r3, [r4, #64]	; 0x40
    9024:	e5d42004 	ldrb	r2, [r4, #4]
	ctx->memWrite(ctx->memParam, addr, val);	
    9028:	e5943028 	ldr	r3, [r4, #40]	; 0x28
    902c:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    9030:	e6ff1071 	uxth	r1, r1
	
}
    9034:	e8bd4070 	pop	{r4, r5, r6, lr}
    9038:	e12fff13 	bx	r3

0000903c <LD_off_IX_d_H>:


static void LD_off_IX_d_H (Z80Context* ctx)
{
    903c:	e92d4070 	push	{r4, r5, r6, lr}
    9040:	e1a04000 	mov	r4, r0
	ctx->tstates += 5;
	write8(ctx, WR.IX + (char) read8(ctx, ctx->PC++), BR.H);
    9044:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 5;
    9048:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	write8(ctx, WR.IX + (char) read8(ctx, ctx->PC++), BR.H);
    904c:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
    9050:	e2833008 	add	r3, r3, #8
    9054:	e1c021bc 	strh	r2, [r0, #28]
    9058:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    905c:	e5903024 	ldr	r3, [r0, #36]	; 0x24
    9060:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
    9064:	e1d450b8 	ldrh	r5, [r4, #8]
    9068:	e12fff33 	blx	r3
	ctx->tstates += 3;
    906c:	e5943040 	ldr	r3, [r4, #64]	; 0x40
    9070:	e0851000 	add	r1, r5, r0
    9074:	e2833003 	add	r3, r3, #3
    9078:	e5843040 	str	r3, [r4, #64]	; 0x40
    907c:	e5d42007 	ldrb	r2, [r4, #7]
	ctx->memWrite(ctx->memParam, addr, val);	
    9080:	e5943028 	ldr	r3, [r4, #40]	; 0x28
    9084:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    9088:	e6ff1071 	uxth	r1, r1
	
}
    908c:	e8bd4070 	pop	{r4, r5, r6, lr}
    9090:	e12fff13 	bx	r3

00009094 <LD_off_IX_d_L>:


static void LD_off_IX_d_L (Z80Context* ctx)
{
    9094:	e92d4070 	push	{r4, r5, r6, lr}
    9098:	e1a04000 	mov	r4, r0
	ctx->tstates += 5;
	write8(ctx, WR.IX + (char) read8(ctx, ctx->PC++), BR.L);
    909c:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 5;
    90a0:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	write8(ctx, WR.IX + (char) read8(ctx, ctx->PC++), BR.L);
    90a4:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
    90a8:	e2833008 	add	r3, r3, #8
    90ac:	e1c021bc 	strh	r2, [r0, #28]
    90b0:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    90b4:	e5903024 	ldr	r3, [r0, #36]	; 0x24
    90b8:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
    90bc:	e1d450b8 	ldrh	r5, [r4, #8]
    90c0:	e12fff33 	blx	r3
	ctx->tstates += 3;
    90c4:	e5943040 	ldr	r3, [r4, #64]	; 0x40
    90c8:	e0851000 	add	r1, r5, r0
    90cc:	e2833003 	add	r3, r3, #3
    90d0:	e5843040 	str	r3, [r4, #64]	; 0x40
    90d4:	e5d42006 	ldrb	r2, [r4, #6]
	ctx->memWrite(ctx->memParam, addr, val);	
    90d8:	e5943028 	ldr	r3, [r4, #40]	; 0x28
    90dc:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    90e0:	e6ff1071 	uxth	r1, r1
	
}
    90e4:	e8bd4070 	pop	{r4, r5, r6, lr}
    90e8:	e12fff13 	bx	r3

000090ec <LD_off_IX_d_n>:


static void LD_off_IX_d_n (Z80Context* ctx)
{
	ctx->tstates += 2;
	char offset = read8(ctx, ctx->PC++);
    90ec:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
    90f0:	e5903040 	ldr	r3, [r0, #64]	; 0x40
{
    90f4:	e92d4070 	push	{r4, r5, r6, lr}
    90f8:	e1a04000 	mov	r4, r0
	char offset = read8(ctx, ctx->PC++);
    90fc:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
    9100:	e2833005 	add	r3, r3, #5
    9104:	e1c021bc 	strh	r2, [r0, #28]
    9108:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    910c:	e5903024 	ldr	r3, [r0, #36]	; 0x24
    9110:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
    9114:	e12fff33 	blx	r3
	byte n = read8(ctx, ctx->PC++);
    9118:	e1d411bc 	ldrh	r1, [r4, #28]
	ctx->tstates += 3;
    911c:	e5943040 	ldr	r3, [r4, #64]	; 0x40
    9120:	e2812001 	add	r2, r1, #1
    9124:	e2833003 	add	r3, r3, #3
	return ctx->memRead(ctx->memParam, addr);	
    9128:	e1a05000 	mov	r5, r0
    912c:	e1c421bc 	strh	r2, [r4, #28]
	ctx->tstates += 3;
    9130:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    9134:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    9138:	e5943024 	ldr	r3, [r4, #36]	; 0x24
    913c:	e12fff33 	blx	r3
	ctx->tstates += 3;
    9140:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	write8(ctx, WR.IX + offset, n);
    9144:	e1d410b8 	ldrh	r1, [r4, #8]
    9148:	e2833003 	add	r3, r3, #3
    914c:	e0811005 	add	r1, r1, r5
    9150:	e5843040 	str	r3, [r4, #64]	; 0x40
	ctx->memWrite(ctx->memParam, addr, val);	
    9154:	e1a02000 	mov	r2, r0
    9158:	e5943028 	ldr	r3, [r4, #40]	; 0x28
    915c:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    9160:	e6ff1071 	uxth	r1, r1
	
}
    9164:	e8bd4070 	pop	{r4, r5, r6, lr}
    9168:	e12fff13 	bx	r3

0000916c <LD_off_IY_d_A>:


static void LD_off_IY_d_A (Z80Context* ctx)
{
    916c:	e92d4070 	push	{r4, r5, r6, lr}
    9170:	e1a04000 	mov	r4, r0
	ctx->tstates += 5;
	write8(ctx, WR.IY + (char) read8(ctx, ctx->PC++), BR.A);
    9174:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 5;
    9178:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	write8(ctx, WR.IY + (char) read8(ctx, ctx->PC++), BR.A);
    917c:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
    9180:	e2833008 	add	r3, r3, #8
    9184:	e1c021bc 	strh	r2, [r0, #28]
    9188:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    918c:	e5903024 	ldr	r3, [r0, #36]	; 0x24
    9190:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
    9194:	e1d450ba 	ldrh	r5, [r4, #10]
    9198:	e12fff33 	blx	r3
	ctx->tstates += 3;
    919c:	e5943040 	ldr	r3, [r4, #64]	; 0x40
    91a0:	e0851000 	add	r1, r5, r0
    91a4:	e2833003 	add	r3, r3, #3
    91a8:	e5843040 	str	r3, [r4, #64]	; 0x40
    91ac:	e5d42001 	ldrb	r2, [r4, #1]
	ctx->memWrite(ctx->memParam, addr, val);	
    91b0:	e5943028 	ldr	r3, [r4, #40]	; 0x28
    91b4:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    91b8:	e6ff1071 	uxth	r1, r1
	
}
    91bc:	e8bd4070 	pop	{r4, r5, r6, lr}
    91c0:	e12fff13 	bx	r3

000091c4 <LD_off_IY_d_B>:


static void LD_off_IY_d_B (Z80Context* ctx)
{
    91c4:	e92d4070 	push	{r4, r5, r6, lr}
    91c8:	e1a04000 	mov	r4, r0
	ctx->tstates += 5;
	write8(ctx, WR.IY + (char) read8(ctx, ctx->PC++), BR.B);
    91cc:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 5;
    91d0:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	write8(ctx, WR.IY + (char) read8(ctx, ctx->PC++), BR.B);
    91d4:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
    91d8:	e2833008 	add	r3, r3, #8
    91dc:	e1c021bc 	strh	r2, [r0, #28]
    91e0:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    91e4:	e5903024 	ldr	r3, [r0, #36]	; 0x24
    91e8:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
    91ec:	e1d450ba 	ldrh	r5, [r4, #10]
    91f0:	e12fff33 	blx	r3
	ctx->tstates += 3;
    91f4:	e5943040 	ldr	r3, [r4, #64]	; 0x40
    91f8:	e0851000 	add	r1, r5, r0
    91fc:	e2833003 	add	r3, r3, #3
    9200:	e5843040 	str	r3, [r4, #64]	; 0x40
    9204:	e5d42003 	ldrb	r2, [r4, #3]
	ctx->memWrite(ctx->memParam, addr, val);	
    9208:	e5943028 	ldr	r3, [r4, #40]	; 0x28
    920c:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    9210:	e6ff1071 	uxth	r1, r1
	
}
    9214:	e8bd4070 	pop	{r4, r5, r6, lr}
    9218:	e12fff13 	bx	r3

0000921c <LD_off_IY_d_C>:


static void LD_off_IY_d_C (Z80Context* ctx)
{
    921c:	e92d4070 	push	{r4, r5, r6, lr}
    9220:	e1a04000 	mov	r4, r0
	ctx->tstates += 5;
	write8(ctx, WR.IY + (char) read8(ctx, ctx->PC++), BR.C);
    9224:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 5;
    9228:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	write8(ctx, WR.IY + (char) read8(ctx, ctx->PC++), BR.C);
    922c:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
    9230:	e2833008 	add	r3, r3, #8
    9234:	e1c021bc 	strh	r2, [r0, #28]
    9238:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    923c:	e5903024 	ldr	r3, [r0, #36]	; 0x24
    9240:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
    9244:	e1d450ba 	ldrh	r5, [r4, #10]
    9248:	e12fff33 	blx	r3
	ctx->tstates += 3;
    924c:	e5943040 	ldr	r3, [r4, #64]	; 0x40
    9250:	e0851000 	add	r1, r5, r0
    9254:	e2833003 	add	r3, r3, #3
    9258:	e5843040 	str	r3, [r4, #64]	; 0x40
    925c:	e5d42002 	ldrb	r2, [r4, #2]
	ctx->memWrite(ctx->memParam, addr, val);	
    9260:	e5943028 	ldr	r3, [r4, #40]	; 0x28
    9264:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    9268:	e6ff1071 	uxth	r1, r1
	
}
    926c:	e8bd4070 	pop	{r4, r5, r6, lr}
    9270:	e12fff13 	bx	r3

00009274 <LD_off_IY_d_D>:


static void LD_off_IY_d_D (Z80Context* ctx)
{
    9274:	e92d4070 	push	{r4, r5, r6, lr}
    9278:	e1a04000 	mov	r4, r0
	ctx->tstates += 5;
	write8(ctx, WR.IY + (char) read8(ctx, ctx->PC++), BR.D);
    927c:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 5;
    9280:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	write8(ctx, WR.IY + (char) read8(ctx, ctx->PC++), BR.D);
    9284:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
    9288:	e2833008 	add	r3, r3, #8
    928c:	e1c021bc 	strh	r2, [r0, #28]
    9290:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    9294:	e5903024 	ldr	r3, [r0, #36]	; 0x24
    9298:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
    929c:	e1d450ba 	ldrh	r5, [r4, #10]
    92a0:	e12fff33 	blx	r3
	ctx->tstates += 3;
    92a4:	e5943040 	ldr	r3, [r4, #64]	; 0x40
    92a8:	e0851000 	add	r1, r5, r0
    92ac:	e2833003 	add	r3, r3, #3
    92b0:	e5843040 	str	r3, [r4, #64]	; 0x40
    92b4:	e5d42005 	ldrb	r2, [r4, #5]
	ctx->memWrite(ctx->memParam, addr, val);	
    92b8:	e5943028 	ldr	r3, [r4, #40]	; 0x28
    92bc:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    92c0:	e6ff1071 	uxth	r1, r1
	
}
    92c4:	e8bd4070 	pop	{r4, r5, r6, lr}
    92c8:	e12fff13 	bx	r3

000092cc <LD_off_IY_d_E>:


static void LD_off_IY_d_E (Z80Context* ctx)
{
    92cc:	e92d4070 	push	{r4, r5, r6, lr}
    92d0:	e1a04000 	mov	r4, r0
	ctx->tstates += 5;
	write8(ctx, WR.IY + (char) read8(ctx, ctx->PC++), BR.E);
    92d4:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 5;
    92d8:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	write8(ctx, WR.IY + (char) read8(ctx, ctx->PC++), BR.E);
    92dc:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
    92e0:	e2833008 	add	r3, r3, #8
    92e4:	e1c021bc 	strh	r2, [r0, #28]
    92e8:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    92ec:	e5903024 	ldr	r3, [r0, #36]	; 0x24
    92f0:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
    92f4:	e1d450ba 	ldrh	r5, [r4, #10]
    92f8:	e12fff33 	blx	r3
	ctx->tstates += 3;
    92fc:	e5943040 	ldr	r3, [r4, #64]	; 0x40
    9300:	e0851000 	add	r1, r5, r0
    9304:	e2833003 	add	r3, r3, #3
    9308:	e5843040 	str	r3, [r4, #64]	; 0x40
    930c:	e5d42004 	ldrb	r2, [r4, #4]
	ctx->memWrite(ctx->memParam, addr, val);	
    9310:	e5943028 	ldr	r3, [r4, #40]	; 0x28
    9314:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    9318:	e6ff1071 	uxth	r1, r1
	
}
    931c:	e8bd4070 	pop	{r4, r5, r6, lr}
    9320:	e12fff13 	bx	r3

00009324 <LD_off_IY_d_H>:


static void LD_off_IY_d_H (Z80Context* ctx)
{
    9324:	e92d4070 	push	{r4, r5, r6, lr}
    9328:	e1a04000 	mov	r4, r0
	ctx->tstates += 5;
	write8(ctx, WR.IY + (char) read8(ctx, ctx->PC++), BR.H);
    932c:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 5;
    9330:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	write8(ctx, WR.IY + (char) read8(ctx, ctx->PC++), BR.H);
    9334:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
    9338:	e2833008 	add	r3, r3, #8
    933c:	e1c021bc 	strh	r2, [r0, #28]
    9340:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    9344:	e5903024 	ldr	r3, [r0, #36]	; 0x24
    9348:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
    934c:	e1d450ba 	ldrh	r5, [r4, #10]
    9350:	e12fff33 	blx	r3
	ctx->tstates += 3;
    9354:	e5943040 	ldr	r3, [r4, #64]	; 0x40
    9358:	e0851000 	add	r1, r5, r0
    935c:	e2833003 	add	r3, r3, #3
    9360:	e5843040 	str	r3, [r4, #64]	; 0x40
    9364:	e5d42007 	ldrb	r2, [r4, #7]
	ctx->memWrite(ctx->memParam, addr, val);	
    9368:	e5943028 	ldr	r3, [r4, #40]	; 0x28
    936c:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    9370:	e6ff1071 	uxth	r1, r1
	
}
    9374:	e8bd4070 	pop	{r4, r5, r6, lr}
    9378:	e12fff13 	bx	r3

0000937c <LD_off_IY_d_L>:


static void LD_off_IY_d_L (Z80Context* ctx)
{
    937c:	e92d4070 	push	{r4, r5, r6, lr}
    9380:	e1a04000 	mov	r4, r0
	ctx->tstates += 5;
	write8(ctx, WR.IY + (char) read8(ctx, ctx->PC++), BR.L);
    9384:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 5;
    9388:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	write8(ctx, WR.IY + (char) read8(ctx, ctx->PC++), BR.L);
    938c:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
    9390:	e2833008 	add	r3, r3, #8
    9394:	e1c021bc 	strh	r2, [r0, #28]
    9398:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    939c:	e5903024 	ldr	r3, [r0, #36]	; 0x24
    93a0:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
    93a4:	e1d450ba 	ldrh	r5, [r4, #10]
    93a8:	e12fff33 	blx	r3
	ctx->tstates += 3;
    93ac:	e5943040 	ldr	r3, [r4, #64]	; 0x40
    93b0:	e0851000 	add	r1, r5, r0
    93b4:	e2833003 	add	r3, r3, #3
    93b8:	e5843040 	str	r3, [r4, #64]	; 0x40
    93bc:	e5d42006 	ldrb	r2, [r4, #6]
	ctx->memWrite(ctx->memParam, addr, val);	
    93c0:	e5943028 	ldr	r3, [r4, #40]	; 0x28
    93c4:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    93c8:	e6ff1071 	uxth	r1, r1
	
}
    93cc:	e8bd4070 	pop	{r4, r5, r6, lr}
    93d0:	e12fff13 	bx	r3

000093d4 <LD_off_IY_d_n>:


static void LD_off_IY_d_n (Z80Context* ctx)
{
	ctx->tstates += 2;
	char offset = read8(ctx, ctx->PC++);
    93d4:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
    93d8:	e5903040 	ldr	r3, [r0, #64]	; 0x40
{
    93dc:	e92d4070 	push	{r4, r5, r6, lr}
    93e0:	e1a04000 	mov	r4, r0
	char offset = read8(ctx, ctx->PC++);
    93e4:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
    93e8:	e2833005 	add	r3, r3, #5
    93ec:	e1c021bc 	strh	r2, [r0, #28]
    93f0:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    93f4:	e5903024 	ldr	r3, [r0, #36]	; 0x24
    93f8:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
    93fc:	e12fff33 	blx	r3
	byte n = read8(ctx, ctx->PC++);
    9400:	e1d411bc 	ldrh	r1, [r4, #28]
	ctx->tstates += 3;
    9404:	e5943040 	ldr	r3, [r4, #64]	; 0x40
    9408:	e2812001 	add	r2, r1, #1
    940c:	e2833003 	add	r3, r3, #3
	return ctx->memRead(ctx->memParam, addr);	
    9410:	e1a05000 	mov	r5, r0
    9414:	e1c421bc 	strh	r2, [r4, #28]
	ctx->tstates += 3;
    9418:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    941c:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    9420:	e5943024 	ldr	r3, [r4, #36]	; 0x24
    9424:	e12fff33 	blx	r3
	ctx->tstates += 3;
    9428:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	write8(ctx, WR.IY + offset, n);
    942c:	e1d410ba 	ldrh	r1, [r4, #10]
    9430:	e2833003 	add	r3, r3, #3
    9434:	e0811005 	add	r1, r1, r5
    9438:	e5843040 	str	r3, [r4, #64]	; 0x40
	ctx->memWrite(ctx->memParam, addr, val);	
    943c:	e1a02000 	mov	r2, r0
    9440:	e5943028 	ldr	r3, [r4, #40]	; 0x28
    9444:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    9448:	e6ff1071 	uxth	r1, r1
	
}
    944c:	e8bd4070 	pop	{r4, r5, r6, lr}
    9450:	e12fff13 	bx	r3

00009454 <LD_A_off_BC>:
	ctx->tstates += 3;
    9454:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	
}


static void LD_A_off_BC (Z80Context* ctx)
{
    9458:	e92d4010 	push	{r4, lr}
    945c:	e2833003 	add	r3, r3, #3
    9460:	e5803040 	str	r3, [r0, #64]	; 0x40
    9464:	e1a04000 	mov	r4, r0
	BR.A = read8(ctx, WR.BC);
    9468:	e1d010b2 	ldrh	r1, [r0, #2]
	return ctx->memRead(ctx->memParam, addr);	
    946c:	e5903024 	ldr	r3, [r0, #36]	; 0x24
    9470:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
    9474:	e12fff33 	blx	r3
    9478:	e5c40001 	strb	r0, [r4, #1]
}
    947c:	e8bd8010 	pop	{r4, pc}

00009480 <LD_A_off_DE>:
	ctx->tstates += 3;
    9480:	e5903040 	ldr	r3, [r0, #64]	; 0x40


static void LD_A_off_DE (Z80Context* ctx)
{
    9484:	e92d4010 	push	{r4, lr}
    9488:	e2833003 	add	r3, r3, #3
    948c:	e5803040 	str	r3, [r0, #64]	; 0x40
    9490:	e1a04000 	mov	r4, r0
	BR.A = read8(ctx, WR.DE);
    9494:	e1d010b4 	ldrh	r1, [r0, #4]
	return ctx->memRead(ctx->memParam, addr);	
    9498:	e5903024 	ldr	r3, [r0, #36]	; 0x24
    949c:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
    94a0:	e12fff33 	blx	r3
    94a4:	e5c40001 	strb	r0, [r4, #1]
}
    94a8:	e8bd8010 	pop	{r4, pc}

000094ac <LD_A_off_HL>:
	ctx->tstates += 3;
    94ac:	e5903040 	ldr	r3, [r0, #64]	; 0x40


static void LD_A_off_HL (Z80Context* ctx)
{
    94b0:	e92d4010 	push	{r4, lr}
    94b4:	e2833003 	add	r3, r3, #3
    94b8:	e5803040 	str	r3, [r0, #64]	; 0x40
    94bc:	e1a04000 	mov	r4, r0
	BR.A = read8(ctx, WR.HL);
    94c0:	e1d010b6 	ldrh	r1, [r0, #6]
	return ctx->memRead(ctx->memParam, addr);	
    94c4:	e5903024 	ldr	r3, [r0, #36]	; 0x24
    94c8:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
    94cc:	e12fff33 	blx	r3
    94d0:	e5c40001 	strb	r0, [r4, #1]
}
    94d4:	e8bd8010 	pop	{r4, pc}

000094d8 <LD_A_off_IX_d>:


static void LD_A_off_IX_d (Z80Context* ctx)
{
    94d8:	e92d4070 	push	{r4, r5, r6, lr}
    94dc:	e1a04000 	mov	r4, r0
	ctx->tstates += 5;
	BR.A = read8(ctx, WR.IX + (char) read8(ctx, ctx->PC++));
    94e0:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 5;
    94e4:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	BR.A = read8(ctx, WR.IX + (char) read8(ctx, ctx->PC++));
    94e8:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
    94ec:	e2833008 	add	r3, r3, #8
    94f0:	e1c021bc 	strh	r2, [r0, #28]
    94f4:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    94f8:	e5903024 	ldr	r3, [r0, #36]	; 0x24
    94fc:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
    9500:	e1d450b8 	ldrh	r5, [r4, #8]
    9504:	e12fff33 	blx	r3
	ctx->tstates += 3;
    9508:	e5943040 	ldr	r3, [r4, #64]	; 0x40
    950c:	e0851000 	add	r1, r5, r0
    9510:	e2833003 	add	r3, r3, #3
    9514:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    9518:	e6ff1071 	uxth	r1, r1
    951c:	e5943024 	ldr	r3, [r4, #36]	; 0x24
    9520:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    9524:	e12fff33 	blx	r3
    9528:	e5c40001 	strb	r0, [r4, #1]
}
    952c:	e8bd8070 	pop	{r4, r5, r6, pc}

00009530 <LD_A_off_IY_d>:


static void LD_A_off_IY_d (Z80Context* ctx)
{
    9530:	e92d4070 	push	{r4, r5, r6, lr}
    9534:	e1a04000 	mov	r4, r0
	ctx->tstates += 5;
	BR.A = read8(ctx, WR.IY + (char) read8(ctx, ctx->PC++));
    9538:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 5;
    953c:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	BR.A = read8(ctx, WR.IY + (char) read8(ctx, ctx->PC++));
    9540:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
    9544:	e2833008 	add	r3, r3, #8
    9548:	e1c021bc 	strh	r2, [r0, #28]
    954c:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    9550:	e5903024 	ldr	r3, [r0, #36]	; 0x24
    9554:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
    9558:	e1d450ba 	ldrh	r5, [r4, #10]
    955c:	e12fff33 	blx	r3
	ctx->tstates += 3;
    9560:	e5943040 	ldr	r3, [r4, #64]	; 0x40
    9564:	e0851000 	add	r1, r5, r0
    9568:	e2833003 	add	r3, r3, #3
    956c:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    9570:	e6ff1071 	uxth	r1, r1
    9574:	e5943024 	ldr	r3, [r4, #36]	; 0x24
    9578:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    957c:	e12fff33 	blx	r3
    9580:	e5c40001 	strb	r0, [r4, #1]
}
    9584:	e8bd8070 	pop	{r4, r5, r6, pc}

00009588 <LD_A_A>:


static void LD_A_A (Z80Context* ctx)
{
	BR.A = BR.A;
}
    9588:	e12fff1e 	bx	lr

0000958c <LD_A_B>:


static void LD_A_B (Z80Context* ctx)
{
	BR.A = BR.B;
    958c:	e5d03003 	ldrb	r3, [r0, #3]
    9590:	e5c03001 	strb	r3, [r0, #1]
}
    9594:	e12fff1e 	bx	lr

00009598 <LD_A_C>:


static void LD_A_C (Z80Context* ctx)
{
	BR.A = BR.C;
    9598:	e5d03002 	ldrb	r3, [r0, #2]
    959c:	e5c03001 	strb	r3, [r0, #1]
}
    95a0:	e12fff1e 	bx	lr

000095a4 <LD_A_D>:


static void LD_A_D (Z80Context* ctx)
{
	BR.A = BR.D;
    95a4:	e5d03005 	ldrb	r3, [r0, #5]
    95a8:	e5c03001 	strb	r3, [r0, #1]
}
    95ac:	e12fff1e 	bx	lr

000095b0 <LD_A_E>:


static void LD_A_E (Z80Context* ctx)
{
	BR.A = BR.E;
    95b0:	e5d03004 	ldrb	r3, [r0, #4]
    95b4:	e5c03001 	strb	r3, [r0, #1]
}
    95b8:	e12fff1e 	bx	lr

000095bc <LD_A_H>:


static void LD_A_H (Z80Context* ctx)
{
	BR.A = BR.H;
    95bc:	e5d03007 	ldrb	r3, [r0, #7]
    95c0:	e5c03001 	strb	r3, [r0, #1]
}
    95c4:	e12fff1e 	bx	lr

000095c8 <LD_A_I>:


static void LD_A_I (Z80Context* ctx)
{
	ctx->tstates += 1;
    95c8:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	BR.A = ctx->I;
    95cc:	e5d0201f 	ldrb	r2, [r0, #31]
	ctx->tstates += 1;
    95d0:	e2833001 	add	r3, r3, #1
    95d4:	e5803040 	str	r3, [r0, #64]	; 0x40
    95d8:	e5d03000 	ldrb	r3, [r0]
	if (val)
    95dc:	e3120020 	tst	r2, #32
	BR.F |= flag;
    95e0:	13833020 	orrne	r3, r3, #32
	BR.F &= ~flag;
    95e4:	020330df 	andeq	r3, r3, #223	; 0xdf
	if (val)
    95e8:	e3120008 	tst	r2, #8
	BR.F |= flag;
    95ec:	13833008 	orrne	r3, r3, #8
	BR.F &= ~flag;
    95f0:	020330f7 	andeq	r3, r3, #247	; 0xf7
	if (val)
    95f4:	e5d01021 	ldrb	r1, [r0, #33]	; 0x21
	BR.F &= ~flag;
    95f8:	e6af3073 	sxtb	r3, r3
	BR.F |= flag;
    95fc:	e20330e9 	and	r3, r3, #233	; 0xe9
	if (val)
    9600:	e3510000 	cmp	r1, #0
	BR.F |= flag;
    9604:	13833004 	orrne	r3, r3, #4
	if (val)
    9608:	e3120080 	tst	r2, #128	; 0x80
    960c:	e5c03000 	strb	r3, [r0]
	BR.A = ctx->I;
    9610:	e5c02001 	strb	r2, [r0, #1]
	BR.F |= flag;
    9614:	13833080 	orrne	r3, r3, #128	; 0x80
	if (val)
    9618:	1a000006 	bne	9638 <LD_A_I+0x70>
	BR.F &= ~flag;
    961c:	e203306d 	and	r3, r3, #109	; 0x6d
	if (val)
    9620:	e3520000 	cmp	r2, #0
	BR.F &= ~flag;
    9624:	e5c03000 	strb	r3, [r0]
	BR.F |= flag;
    9628:	03833040 	orreq	r3, r3, #64	; 0x40
	if (val)
    962c:	1a000001 	bne	9638 <LD_A_I+0x70>
    9630:	e5c03000 	strb	r3, [r0]
	RESFLAG(F_H | F_N);
	VALFLAG(F_PV, ctx->IFF2);
	VALFLAG(F_S, (BR.A & 0x80) != 0);
	VALFLAG(F_Z, (BR.A == 0));
	
}
    9634:	e12fff1e 	bx	lr
	BR.F &= ~flag;
    9638:	e20330bf 	and	r3, r3, #191	; 0xbf
    963c:	e5c03000 	strb	r3, [r0]
    9640:	e12fff1e 	bx	lr

00009644 <LD_A_IXh>:


static void LD_A_IXh (Z80Context* ctx)
{
	BR.A = BR.IXh;
    9644:	e5d03009 	ldrb	r3, [r0, #9]
    9648:	e5c03001 	strb	r3, [r0, #1]
}
    964c:	e12fff1e 	bx	lr

00009650 <LD_A_IXl>:


static void LD_A_IXl (Z80Context* ctx)
{
	BR.A = BR.IXl;
    9650:	e5d03008 	ldrb	r3, [r0, #8]
    9654:	e5c03001 	strb	r3, [r0, #1]
}
    9658:	e12fff1e 	bx	lr

0000965c <LD_A_IYh>:


static void LD_A_IYh (Z80Context* ctx)
{
	BR.A = BR.IYh;
    965c:	e5d0300b 	ldrb	r3, [r0, #11]
    9660:	e5c03001 	strb	r3, [r0, #1]
}
    9664:	e12fff1e 	bx	lr

00009668 <LD_A_IYl>:


static void LD_A_IYl (Z80Context* ctx)
{
	BR.A = BR.IYl;
    9668:	e5d0300a 	ldrb	r3, [r0, #10]
    966c:	e5c03001 	strb	r3, [r0, #1]
}
    9670:	e12fff1e 	bx	lr

00009674 <LD_A_L>:


static void LD_A_L (Z80Context* ctx)
{
	BR.A = BR.L;
    9674:	e5d03006 	ldrb	r3, [r0, #6]
    9678:	e5c03001 	strb	r3, [r0, #1]
}
    967c:	e12fff1e 	bx	lr

00009680 <LD_A_n>:


static void LD_A_n (Z80Context* ctx)
{
	BR.A = read8(ctx, ctx->PC++);
    9680:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 3;
    9684:	e5903040 	ldr	r3, [r0, #64]	; 0x40
    9688:	e2812001 	add	r2, r1, #1
    968c:	e2833003 	add	r3, r3, #3
{
    9690:	e92d4010 	push	{r4, lr}
    9694:	e5803040 	str	r3, [r0, #64]	; 0x40
    9698:	e1a04000 	mov	r4, r0
	BR.A = read8(ctx, ctx->PC++);
    969c:	e1c021bc 	strh	r2, [r0, #28]
	return ctx->memRead(ctx->memParam, addr);	
    96a0:	e5903024 	ldr	r3, [r0, #36]	; 0x24
    96a4:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
    96a8:	e12fff33 	blx	r3
    96ac:	e5c40001 	strb	r0, [r4, #1]
	
}
    96b0:	e8bd8010 	pop	{r4, pc}

000096b4 <LD_A_R>:


static void LD_A_R (Z80Context* ctx)
{
	ctx->tstates += 1;
    96b4:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	BR.A = ctx->R;
    96b8:	e5d0201e 	ldrb	r2, [r0, #30]
	ctx->tstates += 1;
    96bc:	e2833001 	add	r3, r3, #1
    96c0:	e5803040 	str	r3, [r0, #64]	; 0x40
    96c4:	e5d03000 	ldrb	r3, [r0]
	if (val)
    96c8:	e3120020 	tst	r2, #32
	BR.F |= flag;
    96cc:	13833020 	orrne	r3, r3, #32
	BR.F &= ~flag;
    96d0:	020330df 	andeq	r3, r3, #223	; 0xdf
	if (val)
    96d4:	e3120008 	tst	r2, #8
	BR.F |= flag;
    96d8:	13833008 	orrne	r3, r3, #8
	BR.F &= ~flag;
    96dc:	020330f7 	andeq	r3, r3, #247	; 0xf7
	if (val)
    96e0:	e5d01021 	ldrb	r1, [r0, #33]	; 0x21
	BR.F &= ~flag;
    96e4:	e6af3073 	sxtb	r3, r3
	BR.F |= flag;
    96e8:	e20330e9 	and	r3, r3, #233	; 0xe9
	if (val)
    96ec:	e3510000 	cmp	r1, #0
	BR.F |= flag;
    96f0:	13833004 	orrne	r3, r3, #4
	if (val)
    96f4:	e3120080 	tst	r2, #128	; 0x80
    96f8:	e5c03000 	strb	r3, [r0]
	BR.A = ctx->R;
    96fc:	e5c02001 	strb	r2, [r0, #1]
	BR.F |= flag;
    9700:	13833080 	orrne	r3, r3, #128	; 0x80
	if (val)
    9704:	1a000006 	bne	9724 <LD_A_R+0x70>
	BR.F &= ~flag;
    9708:	e203306d 	and	r3, r3, #109	; 0x6d
	if (val)
    970c:	e3520000 	cmp	r2, #0
	BR.F &= ~flag;
    9710:	e5c03000 	strb	r3, [r0]
	BR.F |= flag;
    9714:	03833040 	orreq	r3, r3, #64	; 0x40
	if (val)
    9718:	1a000001 	bne	9724 <LD_A_R+0x70>
    971c:	e5c03000 	strb	r3, [r0]
	RESFLAG(F_H | F_N);
	VALFLAG(F_PV, ctx->IFF2);
	VALFLAG(F_S, (BR.A & 0x80) != 0);
	VALFLAG(F_Z, (BR.A == 0));
	
}
    9720:	e12fff1e 	bx	lr
	BR.F &= ~flag;
    9724:	e20330bf 	and	r3, r3, #191	; 0xbf
    9728:	e5c03000 	strb	r3, [r0]
    972c:	e12fff1e 	bx	lr

00009730 <LD_A_RES_0_off_IX_d>:


static void LD_A_RES_0_off_IX_d (Z80Context* ctx)
{
	ctx->tstates += 2;
	char off = read8(ctx, ctx->PC++);
    9730:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
    9734:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	char off = read8(ctx, ctx->PC++);
    9738:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
    973c:	e2833005 	add	r3, r3, #5
{
    9740:	e92d4070 	push	{r4, r5, r6, lr}
    9744:	e1a04000 	mov	r4, r0
	char off = read8(ctx, ctx->PC++);
    9748:	e1c021bc 	strh	r2, [r0, #28]
    974c:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    9750:	e5903024 	ldr	r3, [r0, #36]	; 0x24
    9754:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
    9758:	e12fff33 	blx	r3
	ctx->tstates += 3;
    975c:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	BR.A = doSetRes(ctx, SR_RES, 0, read8(ctx, WR.IX + off));
    9760:	e1d410b8 	ldrh	r1, [r4, #8]
    9764:	e6ff5070 	uxth	r5, r0
    9768:	e2833003 	add	r3, r3, #3
    976c:	e0851001 	add	r1, r5, r1
    9770:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    9774:	e6ff1071 	uxth	r1, r1
    9778:	e5943024 	ldr	r3, [r4, #36]	; 0x24
    977c:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    9780:	e12fff33 	blx	r3
	ctx->tstates += 3;
    9784:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	write8(ctx, WR.IX + off, BR.A);	
    9788:	e1d410b8 	ldrh	r1, [r4, #8]
		val &= ~(1 << pos);
    978c:	e20020fe 	and	r2, r0, #254	; 0xfe
    9790:	e0851001 	add	r1, r5, r1
	ctx->tstates += 3;
    9794:	e2833003 	add	r3, r3, #3
    9798:	e5843040 	str	r3, [r4, #64]	; 0x40
	BR.A = doSetRes(ctx, SR_RES, 0, read8(ctx, WR.IX + off));
    979c:	e5c42001 	strb	r2, [r4, #1]
	ctx->memWrite(ctx->memParam, addr, val);	
    97a0:	e5943028 	ldr	r3, [r4, #40]	; 0x28
    97a4:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    97a8:	e6ff1071 	uxth	r1, r1
}
    97ac:	e8bd4070 	pop	{r4, r5, r6, lr}
    97b0:	e12fff13 	bx	r3

000097b4 <LD_A_RES_0_off_IY_d>:


static void LD_A_RES_0_off_IY_d (Z80Context* ctx)
{
	ctx->tstates += 2;
	char off = read8(ctx, ctx->PC++);
    97b4:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
    97b8:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	char off = read8(ctx, ctx->PC++);
    97bc:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
    97c0:	e2833005 	add	r3, r3, #5
{
    97c4:	e92d4070 	push	{r4, r5, r6, lr}
    97c8:	e1a04000 	mov	r4, r0
	char off = read8(ctx, ctx->PC++);
    97cc:	e1c021bc 	strh	r2, [r0, #28]
    97d0:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    97d4:	e5903024 	ldr	r3, [r0, #36]	; 0x24
    97d8:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
    97dc:	e12fff33 	blx	r3
	ctx->tstates += 3;
    97e0:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	BR.A = doSetRes(ctx, SR_RES, 0, read8(ctx, WR.IY + off));
    97e4:	e1d410ba 	ldrh	r1, [r4, #10]
    97e8:	e6ff5070 	uxth	r5, r0
    97ec:	e2833003 	add	r3, r3, #3
    97f0:	e0851001 	add	r1, r5, r1
    97f4:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    97f8:	e6ff1071 	uxth	r1, r1
    97fc:	e5943024 	ldr	r3, [r4, #36]	; 0x24
    9800:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    9804:	e12fff33 	blx	r3
	ctx->tstates += 3;
    9808:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	write8(ctx, WR.IY + off, BR.A);	
    980c:	e1d410ba 	ldrh	r1, [r4, #10]
		val &= ~(1 << pos);
    9810:	e20020fe 	and	r2, r0, #254	; 0xfe
    9814:	e0851001 	add	r1, r5, r1
	ctx->tstates += 3;
    9818:	e2833003 	add	r3, r3, #3
    981c:	e5843040 	str	r3, [r4, #64]	; 0x40
	BR.A = doSetRes(ctx, SR_RES, 0, read8(ctx, WR.IY + off));
    9820:	e5c42001 	strb	r2, [r4, #1]
	ctx->memWrite(ctx->memParam, addr, val);	
    9824:	e5943028 	ldr	r3, [r4, #40]	; 0x28
    9828:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    982c:	e6ff1071 	uxth	r1, r1
}
    9830:	e8bd4070 	pop	{r4, r5, r6, lr}
    9834:	e12fff13 	bx	r3

00009838 <LD_A_RES_1_off_IX_d>:


static void LD_A_RES_1_off_IX_d (Z80Context* ctx)
{
	ctx->tstates += 2;
	char off = read8(ctx, ctx->PC++);
    9838:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
    983c:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	char off = read8(ctx, ctx->PC++);
    9840:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
    9844:	e2833005 	add	r3, r3, #5
{
    9848:	e92d4070 	push	{r4, r5, r6, lr}
    984c:	e1a04000 	mov	r4, r0
	char off = read8(ctx, ctx->PC++);
    9850:	e1c021bc 	strh	r2, [r0, #28]
    9854:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    9858:	e5903024 	ldr	r3, [r0, #36]	; 0x24
    985c:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
    9860:	e12fff33 	blx	r3
	ctx->tstates += 3;
    9864:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	BR.A = doSetRes(ctx, SR_RES, 1, read8(ctx, WR.IX + off));
    9868:	e1d410b8 	ldrh	r1, [r4, #8]
    986c:	e6ff5070 	uxth	r5, r0
    9870:	e2833003 	add	r3, r3, #3
    9874:	e0851001 	add	r1, r5, r1
    9878:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    987c:	e6ff1071 	uxth	r1, r1
    9880:	e5943024 	ldr	r3, [r4, #36]	; 0x24
    9884:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    9888:	e12fff33 	blx	r3
	ctx->tstates += 3;
    988c:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	write8(ctx, WR.IX + off, BR.A);	
    9890:	e1d410b8 	ldrh	r1, [r4, #8]
		val &= ~(1 << pos);
    9894:	e20020fd 	and	r2, r0, #253	; 0xfd
    9898:	e0851001 	add	r1, r5, r1
	ctx->tstates += 3;
    989c:	e2833003 	add	r3, r3, #3
    98a0:	e5843040 	str	r3, [r4, #64]	; 0x40
	BR.A = doSetRes(ctx, SR_RES, 1, read8(ctx, WR.IX + off));
    98a4:	e5c42001 	strb	r2, [r4, #1]
	ctx->memWrite(ctx->memParam, addr, val);	
    98a8:	e5943028 	ldr	r3, [r4, #40]	; 0x28
    98ac:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    98b0:	e6ff1071 	uxth	r1, r1
}
    98b4:	e8bd4070 	pop	{r4, r5, r6, lr}
    98b8:	e12fff13 	bx	r3

000098bc <LD_A_RES_1_off_IY_d>:


static void LD_A_RES_1_off_IY_d (Z80Context* ctx)
{
	ctx->tstates += 2;
	char off = read8(ctx, ctx->PC++);
    98bc:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
    98c0:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	char off = read8(ctx, ctx->PC++);
    98c4:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
    98c8:	e2833005 	add	r3, r3, #5
{
    98cc:	e92d4070 	push	{r4, r5, r6, lr}
    98d0:	e1a04000 	mov	r4, r0
	char off = read8(ctx, ctx->PC++);
    98d4:	e1c021bc 	strh	r2, [r0, #28]
    98d8:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    98dc:	e5903024 	ldr	r3, [r0, #36]	; 0x24
    98e0:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
    98e4:	e12fff33 	blx	r3
	ctx->tstates += 3;
    98e8:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	BR.A = doSetRes(ctx, SR_RES, 1, read8(ctx, WR.IY + off));
    98ec:	e1d410ba 	ldrh	r1, [r4, #10]
    98f0:	e6ff5070 	uxth	r5, r0
    98f4:	e2833003 	add	r3, r3, #3
    98f8:	e0851001 	add	r1, r5, r1
    98fc:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    9900:	e6ff1071 	uxth	r1, r1
    9904:	e5943024 	ldr	r3, [r4, #36]	; 0x24
    9908:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    990c:	e12fff33 	blx	r3
	ctx->tstates += 3;
    9910:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	write8(ctx, WR.IY + off, BR.A);	
    9914:	e1d410ba 	ldrh	r1, [r4, #10]
		val &= ~(1 << pos);
    9918:	e20020fd 	and	r2, r0, #253	; 0xfd
    991c:	e0851001 	add	r1, r5, r1
	ctx->tstates += 3;
    9920:	e2833003 	add	r3, r3, #3
    9924:	e5843040 	str	r3, [r4, #64]	; 0x40
	BR.A = doSetRes(ctx, SR_RES, 1, read8(ctx, WR.IY + off));
    9928:	e5c42001 	strb	r2, [r4, #1]
	ctx->memWrite(ctx->memParam, addr, val);	
    992c:	e5943028 	ldr	r3, [r4, #40]	; 0x28
    9930:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    9934:	e6ff1071 	uxth	r1, r1
}
    9938:	e8bd4070 	pop	{r4, r5, r6, lr}
    993c:	e12fff13 	bx	r3

00009940 <LD_A_RES_2_off_IX_d>:


static void LD_A_RES_2_off_IX_d (Z80Context* ctx)
{
	ctx->tstates += 2;
	char off = read8(ctx, ctx->PC++);
    9940:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
    9944:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	char off = read8(ctx, ctx->PC++);
    9948:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
    994c:	e2833005 	add	r3, r3, #5
{
    9950:	e92d4070 	push	{r4, r5, r6, lr}
    9954:	e1a04000 	mov	r4, r0
	char off = read8(ctx, ctx->PC++);
    9958:	e1c021bc 	strh	r2, [r0, #28]
    995c:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    9960:	e5903024 	ldr	r3, [r0, #36]	; 0x24
    9964:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
    9968:	e12fff33 	blx	r3
	ctx->tstates += 3;
    996c:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	BR.A = doSetRes(ctx, SR_RES, 2, read8(ctx, WR.IX + off));
    9970:	e1d410b8 	ldrh	r1, [r4, #8]
    9974:	e6ff5070 	uxth	r5, r0
    9978:	e2833003 	add	r3, r3, #3
    997c:	e0851001 	add	r1, r5, r1
    9980:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    9984:	e6ff1071 	uxth	r1, r1
    9988:	e5943024 	ldr	r3, [r4, #36]	; 0x24
    998c:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    9990:	e12fff33 	blx	r3
	ctx->tstates += 3;
    9994:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	write8(ctx, WR.IX + off, BR.A);	
    9998:	e1d410b8 	ldrh	r1, [r4, #8]
		val &= ~(1 << pos);
    999c:	e20020fb 	and	r2, r0, #251	; 0xfb
    99a0:	e0851001 	add	r1, r5, r1
	ctx->tstates += 3;
    99a4:	e2833003 	add	r3, r3, #3
    99a8:	e5843040 	str	r3, [r4, #64]	; 0x40
	BR.A = doSetRes(ctx, SR_RES, 2, read8(ctx, WR.IX + off));
    99ac:	e5c42001 	strb	r2, [r4, #1]
	ctx->memWrite(ctx->memParam, addr, val);	
    99b0:	e5943028 	ldr	r3, [r4, #40]	; 0x28
    99b4:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    99b8:	e6ff1071 	uxth	r1, r1
}
    99bc:	e8bd4070 	pop	{r4, r5, r6, lr}
    99c0:	e12fff13 	bx	r3

000099c4 <LD_A_RES_2_off_IY_d>:


static void LD_A_RES_2_off_IY_d (Z80Context* ctx)
{
	ctx->tstates += 2;
	char off = read8(ctx, ctx->PC++);
    99c4:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
    99c8:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	char off = read8(ctx, ctx->PC++);
    99cc:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
    99d0:	e2833005 	add	r3, r3, #5
{
    99d4:	e92d4070 	push	{r4, r5, r6, lr}
    99d8:	e1a04000 	mov	r4, r0
	char off = read8(ctx, ctx->PC++);
    99dc:	e1c021bc 	strh	r2, [r0, #28]
    99e0:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    99e4:	e5903024 	ldr	r3, [r0, #36]	; 0x24
    99e8:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
    99ec:	e12fff33 	blx	r3
	ctx->tstates += 3;
    99f0:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	BR.A = doSetRes(ctx, SR_RES, 2, read8(ctx, WR.IY + off));
    99f4:	e1d410ba 	ldrh	r1, [r4, #10]
    99f8:	e6ff5070 	uxth	r5, r0
    99fc:	e2833003 	add	r3, r3, #3
    9a00:	e0851001 	add	r1, r5, r1
    9a04:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    9a08:	e6ff1071 	uxth	r1, r1
    9a0c:	e5943024 	ldr	r3, [r4, #36]	; 0x24
    9a10:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    9a14:	e12fff33 	blx	r3
	ctx->tstates += 3;
    9a18:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	write8(ctx, WR.IY + off, BR.A);	
    9a1c:	e1d410ba 	ldrh	r1, [r4, #10]
		val &= ~(1 << pos);
    9a20:	e20020fb 	and	r2, r0, #251	; 0xfb
    9a24:	e0851001 	add	r1, r5, r1
	ctx->tstates += 3;
    9a28:	e2833003 	add	r3, r3, #3
    9a2c:	e5843040 	str	r3, [r4, #64]	; 0x40
	BR.A = doSetRes(ctx, SR_RES, 2, read8(ctx, WR.IY + off));
    9a30:	e5c42001 	strb	r2, [r4, #1]
	ctx->memWrite(ctx->memParam, addr, val);	
    9a34:	e5943028 	ldr	r3, [r4, #40]	; 0x28
    9a38:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    9a3c:	e6ff1071 	uxth	r1, r1
}
    9a40:	e8bd4070 	pop	{r4, r5, r6, lr}
    9a44:	e12fff13 	bx	r3

00009a48 <LD_A_RES_3_off_IX_d>:


static void LD_A_RES_3_off_IX_d (Z80Context* ctx)
{
	ctx->tstates += 2;
	char off = read8(ctx, ctx->PC++);
    9a48:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
    9a4c:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	char off = read8(ctx, ctx->PC++);
    9a50:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
    9a54:	e2833005 	add	r3, r3, #5
{
    9a58:	e92d4070 	push	{r4, r5, r6, lr}
    9a5c:	e1a04000 	mov	r4, r0
	char off = read8(ctx, ctx->PC++);
    9a60:	e1c021bc 	strh	r2, [r0, #28]
    9a64:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    9a68:	e5903024 	ldr	r3, [r0, #36]	; 0x24
    9a6c:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
    9a70:	e12fff33 	blx	r3
	ctx->tstates += 3;
    9a74:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	BR.A = doSetRes(ctx, SR_RES, 3, read8(ctx, WR.IX + off));
    9a78:	e1d410b8 	ldrh	r1, [r4, #8]
    9a7c:	e6ff5070 	uxth	r5, r0
    9a80:	e2833003 	add	r3, r3, #3
    9a84:	e0851001 	add	r1, r5, r1
    9a88:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    9a8c:	e6ff1071 	uxth	r1, r1
    9a90:	e5943024 	ldr	r3, [r4, #36]	; 0x24
    9a94:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    9a98:	e12fff33 	blx	r3
	ctx->tstates += 3;
    9a9c:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	write8(ctx, WR.IX + off, BR.A);	
    9aa0:	e1d410b8 	ldrh	r1, [r4, #8]
		val &= ~(1 << pos);
    9aa4:	e20020f7 	and	r2, r0, #247	; 0xf7
    9aa8:	e0851001 	add	r1, r5, r1
	ctx->tstates += 3;
    9aac:	e2833003 	add	r3, r3, #3
    9ab0:	e5843040 	str	r3, [r4, #64]	; 0x40
	BR.A = doSetRes(ctx, SR_RES, 3, read8(ctx, WR.IX + off));
    9ab4:	e5c42001 	strb	r2, [r4, #1]
	ctx->memWrite(ctx->memParam, addr, val);	
    9ab8:	e5943028 	ldr	r3, [r4, #40]	; 0x28
    9abc:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    9ac0:	e6ff1071 	uxth	r1, r1
}
    9ac4:	e8bd4070 	pop	{r4, r5, r6, lr}
    9ac8:	e12fff13 	bx	r3

00009acc <LD_A_RES_3_off_IY_d>:


static void LD_A_RES_3_off_IY_d (Z80Context* ctx)
{
	ctx->tstates += 2;
	char off = read8(ctx, ctx->PC++);
    9acc:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
    9ad0:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	char off = read8(ctx, ctx->PC++);
    9ad4:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
    9ad8:	e2833005 	add	r3, r3, #5
{
    9adc:	e92d4070 	push	{r4, r5, r6, lr}
    9ae0:	e1a04000 	mov	r4, r0
	char off = read8(ctx, ctx->PC++);
    9ae4:	e1c021bc 	strh	r2, [r0, #28]
    9ae8:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    9aec:	e5903024 	ldr	r3, [r0, #36]	; 0x24
    9af0:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
    9af4:	e12fff33 	blx	r3
	ctx->tstates += 3;
    9af8:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	BR.A = doSetRes(ctx, SR_RES, 3, read8(ctx, WR.IY + off));
    9afc:	e1d410ba 	ldrh	r1, [r4, #10]
    9b00:	e6ff5070 	uxth	r5, r0
    9b04:	e2833003 	add	r3, r3, #3
    9b08:	e0851001 	add	r1, r5, r1
    9b0c:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    9b10:	e6ff1071 	uxth	r1, r1
    9b14:	e5943024 	ldr	r3, [r4, #36]	; 0x24
    9b18:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    9b1c:	e12fff33 	blx	r3
	ctx->tstates += 3;
    9b20:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	write8(ctx, WR.IY + off, BR.A);	
    9b24:	e1d410ba 	ldrh	r1, [r4, #10]
		val &= ~(1 << pos);
    9b28:	e20020f7 	and	r2, r0, #247	; 0xf7
    9b2c:	e0851001 	add	r1, r5, r1
	ctx->tstates += 3;
    9b30:	e2833003 	add	r3, r3, #3
    9b34:	e5843040 	str	r3, [r4, #64]	; 0x40
	BR.A = doSetRes(ctx, SR_RES, 3, read8(ctx, WR.IY + off));
    9b38:	e5c42001 	strb	r2, [r4, #1]
	ctx->memWrite(ctx->memParam, addr, val);	
    9b3c:	e5943028 	ldr	r3, [r4, #40]	; 0x28
    9b40:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    9b44:	e6ff1071 	uxth	r1, r1
}
    9b48:	e8bd4070 	pop	{r4, r5, r6, lr}
    9b4c:	e12fff13 	bx	r3

00009b50 <LD_A_RES_4_off_IX_d>:


static void LD_A_RES_4_off_IX_d (Z80Context* ctx)
{
	ctx->tstates += 2;
	char off = read8(ctx, ctx->PC++);
    9b50:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
    9b54:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	char off = read8(ctx, ctx->PC++);
    9b58:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
    9b5c:	e2833005 	add	r3, r3, #5
{
    9b60:	e92d4070 	push	{r4, r5, r6, lr}
    9b64:	e1a04000 	mov	r4, r0
	char off = read8(ctx, ctx->PC++);
    9b68:	e1c021bc 	strh	r2, [r0, #28]
    9b6c:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    9b70:	e5903024 	ldr	r3, [r0, #36]	; 0x24
    9b74:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
    9b78:	e12fff33 	blx	r3
	ctx->tstates += 3;
    9b7c:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	BR.A = doSetRes(ctx, SR_RES, 4, read8(ctx, WR.IX + off));
    9b80:	e1d410b8 	ldrh	r1, [r4, #8]
    9b84:	e6ff5070 	uxth	r5, r0
    9b88:	e2833003 	add	r3, r3, #3
    9b8c:	e0851001 	add	r1, r5, r1
    9b90:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    9b94:	e6ff1071 	uxth	r1, r1
    9b98:	e5943024 	ldr	r3, [r4, #36]	; 0x24
    9b9c:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    9ba0:	e12fff33 	blx	r3
	ctx->tstates += 3;
    9ba4:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	write8(ctx, WR.IX + off, BR.A);	
    9ba8:	e1d410b8 	ldrh	r1, [r4, #8]
		val &= ~(1 << pos);
    9bac:	e20020ef 	and	r2, r0, #239	; 0xef
    9bb0:	e0851001 	add	r1, r5, r1
	ctx->tstates += 3;
    9bb4:	e2833003 	add	r3, r3, #3
    9bb8:	e5843040 	str	r3, [r4, #64]	; 0x40
	BR.A = doSetRes(ctx, SR_RES, 4, read8(ctx, WR.IX + off));
    9bbc:	e5c42001 	strb	r2, [r4, #1]
	ctx->memWrite(ctx->memParam, addr, val);	
    9bc0:	e5943028 	ldr	r3, [r4, #40]	; 0x28
    9bc4:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    9bc8:	e6ff1071 	uxth	r1, r1
}
    9bcc:	e8bd4070 	pop	{r4, r5, r6, lr}
    9bd0:	e12fff13 	bx	r3

00009bd4 <LD_A_RES_4_off_IY_d>:


static void LD_A_RES_4_off_IY_d (Z80Context* ctx)
{
	ctx->tstates += 2;
	char off = read8(ctx, ctx->PC++);
    9bd4:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
    9bd8:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	char off = read8(ctx, ctx->PC++);
    9bdc:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
    9be0:	e2833005 	add	r3, r3, #5
{
    9be4:	e92d4070 	push	{r4, r5, r6, lr}
    9be8:	e1a04000 	mov	r4, r0
	char off = read8(ctx, ctx->PC++);
    9bec:	e1c021bc 	strh	r2, [r0, #28]
    9bf0:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    9bf4:	e5903024 	ldr	r3, [r0, #36]	; 0x24
    9bf8:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
    9bfc:	e12fff33 	blx	r3
	ctx->tstates += 3;
    9c00:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	BR.A = doSetRes(ctx, SR_RES, 4, read8(ctx, WR.IY + off));
    9c04:	e1d410ba 	ldrh	r1, [r4, #10]
    9c08:	e6ff5070 	uxth	r5, r0
    9c0c:	e2833003 	add	r3, r3, #3
    9c10:	e0851001 	add	r1, r5, r1
    9c14:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    9c18:	e6ff1071 	uxth	r1, r1
    9c1c:	e5943024 	ldr	r3, [r4, #36]	; 0x24
    9c20:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    9c24:	e12fff33 	blx	r3
	ctx->tstates += 3;
    9c28:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	write8(ctx, WR.IY + off, BR.A);	
    9c2c:	e1d410ba 	ldrh	r1, [r4, #10]
		val &= ~(1 << pos);
    9c30:	e20020ef 	and	r2, r0, #239	; 0xef
    9c34:	e0851001 	add	r1, r5, r1
	ctx->tstates += 3;
    9c38:	e2833003 	add	r3, r3, #3
    9c3c:	e5843040 	str	r3, [r4, #64]	; 0x40
	BR.A = doSetRes(ctx, SR_RES, 4, read8(ctx, WR.IY + off));
    9c40:	e5c42001 	strb	r2, [r4, #1]
	ctx->memWrite(ctx->memParam, addr, val);	
    9c44:	e5943028 	ldr	r3, [r4, #40]	; 0x28
    9c48:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    9c4c:	e6ff1071 	uxth	r1, r1
}
    9c50:	e8bd4070 	pop	{r4, r5, r6, lr}
    9c54:	e12fff13 	bx	r3

00009c58 <LD_A_RES_5_off_IX_d>:


static void LD_A_RES_5_off_IX_d (Z80Context* ctx)
{
	ctx->tstates += 2;
	char off = read8(ctx, ctx->PC++);
    9c58:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
    9c5c:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	char off = read8(ctx, ctx->PC++);
    9c60:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
    9c64:	e2833005 	add	r3, r3, #5
{
    9c68:	e92d4070 	push	{r4, r5, r6, lr}
    9c6c:	e1a04000 	mov	r4, r0
	char off = read8(ctx, ctx->PC++);
    9c70:	e1c021bc 	strh	r2, [r0, #28]
    9c74:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    9c78:	e5903024 	ldr	r3, [r0, #36]	; 0x24
    9c7c:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
    9c80:	e12fff33 	blx	r3
	ctx->tstates += 3;
    9c84:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	BR.A = doSetRes(ctx, SR_RES, 5, read8(ctx, WR.IX + off));
    9c88:	e1d410b8 	ldrh	r1, [r4, #8]
    9c8c:	e6ff5070 	uxth	r5, r0
    9c90:	e2833003 	add	r3, r3, #3
    9c94:	e0851001 	add	r1, r5, r1
    9c98:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    9c9c:	e6ff1071 	uxth	r1, r1
    9ca0:	e5943024 	ldr	r3, [r4, #36]	; 0x24
    9ca4:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    9ca8:	e12fff33 	blx	r3
	ctx->tstates += 3;
    9cac:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	write8(ctx, WR.IX + off, BR.A);	
    9cb0:	e1d410b8 	ldrh	r1, [r4, #8]
		val &= ~(1 << pos);
    9cb4:	e20020df 	and	r2, r0, #223	; 0xdf
    9cb8:	e0851001 	add	r1, r5, r1
	ctx->tstates += 3;
    9cbc:	e2833003 	add	r3, r3, #3
    9cc0:	e5843040 	str	r3, [r4, #64]	; 0x40
	BR.A = doSetRes(ctx, SR_RES, 5, read8(ctx, WR.IX + off));
    9cc4:	e5c42001 	strb	r2, [r4, #1]
	ctx->memWrite(ctx->memParam, addr, val);	
    9cc8:	e5943028 	ldr	r3, [r4, #40]	; 0x28
    9ccc:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    9cd0:	e6ff1071 	uxth	r1, r1
}
    9cd4:	e8bd4070 	pop	{r4, r5, r6, lr}
    9cd8:	e12fff13 	bx	r3

00009cdc <LD_A_RES_5_off_IY_d>:


static void LD_A_RES_5_off_IY_d (Z80Context* ctx)
{
	ctx->tstates += 2;
	char off = read8(ctx, ctx->PC++);
    9cdc:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
    9ce0:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	char off = read8(ctx, ctx->PC++);
    9ce4:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
    9ce8:	e2833005 	add	r3, r3, #5
{
    9cec:	e92d4070 	push	{r4, r5, r6, lr}
    9cf0:	e1a04000 	mov	r4, r0
	char off = read8(ctx, ctx->PC++);
    9cf4:	e1c021bc 	strh	r2, [r0, #28]
    9cf8:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    9cfc:	e5903024 	ldr	r3, [r0, #36]	; 0x24
    9d00:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
    9d04:	e12fff33 	blx	r3
	ctx->tstates += 3;
    9d08:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	BR.A = doSetRes(ctx, SR_RES, 5, read8(ctx, WR.IY + off));
    9d0c:	e1d410ba 	ldrh	r1, [r4, #10]
    9d10:	e6ff5070 	uxth	r5, r0
    9d14:	e2833003 	add	r3, r3, #3
    9d18:	e0851001 	add	r1, r5, r1
    9d1c:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    9d20:	e6ff1071 	uxth	r1, r1
    9d24:	e5943024 	ldr	r3, [r4, #36]	; 0x24
    9d28:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    9d2c:	e12fff33 	blx	r3
	ctx->tstates += 3;
    9d30:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	write8(ctx, WR.IY + off, BR.A);	
    9d34:	e1d410ba 	ldrh	r1, [r4, #10]
		val &= ~(1 << pos);
    9d38:	e20020df 	and	r2, r0, #223	; 0xdf
    9d3c:	e0851001 	add	r1, r5, r1
	ctx->tstates += 3;
    9d40:	e2833003 	add	r3, r3, #3
    9d44:	e5843040 	str	r3, [r4, #64]	; 0x40
	BR.A = doSetRes(ctx, SR_RES, 5, read8(ctx, WR.IY + off));
    9d48:	e5c42001 	strb	r2, [r4, #1]
	ctx->memWrite(ctx->memParam, addr, val);	
    9d4c:	e5943028 	ldr	r3, [r4, #40]	; 0x28
    9d50:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    9d54:	e6ff1071 	uxth	r1, r1
}
    9d58:	e8bd4070 	pop	{r4, r5, r6, lr}
    9d5c:	e12fff13 	bx	r3

00009d60 <LD_A_RES_6_off_IX_d>:


static void LD_A_RES_6_off_IX_d (Z80Context* ctx)
{
	ctx->tstates += 2;
	char off = read8(ctx, ctx->PC++);
    9d60:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
    9d64:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	char off = read8(ctx, ctx->PC++);
    9d68:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
    9d6c:	e2833005 	add	r3, r3, #5
{
    9d70:	e92d4070 	push	{r4, r5, r6, lr}
    9d74:	e1a04000 	mov	r4, r0
	char off = read8(ctx, ctx->PC++);
    9d78:	e1c021bc 	strh	r2, [r0, #28]
    9d7c:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    9d80:	e5903024 	ldr	r3, [r0, #36]	; 0x24
    9d84:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
    9d88:	e12fff33 	blx	r3
	ctx->tstates += 3;
    9d8c:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	BR.A = doSetRes(ctx, SR_RES, 6, read8(ctx, WR.IX + off));
    9d90:	e1d410b8 	ldrh	r1, [r4, #8]
    9d94:	e6ff5070 	uxth	r5, r0
    9d98:	e2833003 	add	r3, r3, #3
    9d9c:	e0851001 	add	r1, r5, r1
    9da0:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    9da4:	e6ff1071 	uxth	r1, r1
    9da8:	e5943024 	ldr	r3, [r4, #36]	; 0x24
    9dac:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    9db0:	e12fff33 	blx	r3
	ctx->tstates += 3;
    9db4:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	write8(ctx, WR.IX + off, BR.A);	
    9db8:	e1d410b8 	ldrh	r1, [r4, #8]
		val &= ~(1 << pos);
    9dbc:	e20020bf 	and	r2, r0, #191	; 0xbf
    9dc0:	e0851001 	add	r1, r5, r1
	ctx->tstates += 3;
    9dc4:	e2833003 	add	r3, r3, #3
    9dc8:	e5843040 	str	r3, [r4, #64]	; 0x40
	BR.A = doSetRes(ctx, SR_RES, 6, read8(ctx, WR.IX + off));
    9dcc:	e5c42001 	strb	r2, [r4, #1]
	ctx->memWrite(ctx->memParam, addr, val);	
    9dd0:	e5943028 	ldr	r3, [r4, #40]	; 0x28
    9dd4:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    9dd8:	e6ff1071 	uxth	r1, r1
}
    9ddc:	e8bd4070 	pop	{r4, r5, r6, lr}
    9de0:	e12fff13 	bx	r3

00009de4 <LD_A_RES_6_off_IY_d>:


static void LD_A_RES_6_off_IY_d (Z80Context* ctx)
{
	ctx->tstates += 2;
	char off = read8(ctx, ctx->PC++);
    9de4:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
    9de8:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	char off = read8(ctx, ctx->PC++);
    9dec:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
    9df0:	e2833005 	add	r3, r3, #5
{
    9df4:	e92d4070 	push	{r4, r5, r6, lr}
    9df8:	e1a04000 	mov	r4, r0
	char off = read8(ctx, ctx->PC++);
    9dfc:	e1c021bc 	strh	r2, [r0, #28]
    9e00:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    9e04:	e5903024 	ldr	r3, [r0, #36]	; 0x24
    9e08:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
    9e0c:	e12fff33 	blx	r3
	ctx->tstates += 3;
    9e10:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	BR.A = doSetRes(ctx, SR_RES, 6, read8(ctx, WR.IY + off));
    9e14:	e1d410ba 	ldrh	r1, [r4, #10]
    9e18:	e6ff5070 	uxth	r5, r0
    9e1c:	e2833003 	add	r3, r3, #3
    9e20:	e0851001 	add	r1, r5, r1
    9e24:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    9e28:	e6ff1071 	uxth	r1, r1
    9e2c:	e5943024 	ldr	r3, [r4, #36]	; 0x24
    9e30:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    9e34:	e12fff33 	blx	r3
	ctx->tstates += 3;
    9e38:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	write8(ctx, WR.IY + off, BR.A);	
    9e3c:	e1d410ba 	ldrh	r1, [r4, #10]
		val &= ~(1 << pos);
    9e40:	e20020bf 	and	r2, r0, #191	; 0xbf
    9e44:	e0851001 	add	r1, r5, r1
	ctx->tstates += 3;
    9e48:	e2833003 	add	r3, r3, #3
    9e4c:	e5843040 	str	r3, [r4, #64]	; 0x40
	BR.A = doSetRes(ctx, SR_RES, 6, read8(ctx, WR.IY + off));
    9e50:	e5c42001 	strb	r2, [r4, #1]
	ctx->memWrite(ctx->memParam, addr, val);	
    9e54:	e5943028 	ldr	r3, [r4, #40]	; 0x28
    9e58:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    9e5c:	e6ff1071 	uxth	r1, r1
}
    9e60:	e8bd4070 	pop	{r4, r5, r6, lr}
    9e64:	e12fff13 	bx	r3

00009e68 <LD_A_RES_7_off_IX_d>:


static void LD_A_RES_7_off_IX_d (Z80Context* ctx)
{
	ctx->tstates += 2;
	char off = read8(ctx, ctx->PC++);
    9e68:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
    9e6c:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	char off = read8(ctx, ctx->PC++);
    9e70:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
    9e74:	e2833005 	add	r3, r3, #5
{
    9e78:	e92d4070 	push	{r4, r5, r6, lr}
    9e7c:	e1a04000 	mov	r4, r0
	char off = read8(ctx, ctx->PC++);
    9e80:	e1c021bc 	strh	r2, [r0, #28]
    9e84:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    9e88:	e5903024 	ldr	r3, [r0, #36]	; 0x24
    9e8c:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
    9e90:	e12fff33 	blx	r3
	ctx->tstates += 3;
    9e94:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	BR.A = doSetRes(ctx, SR_RES, 7, read8(ctx, WR.IX + off));
    9e98:	e1d410b8 	ldrh	r1, [r4, #8]
    9e9c:	e6ff5070 	uxth	r5, r0
    9ea0:	e2833003 	add	r3, r3, #3
    9ea4:	e0851001 	add	r1, r5, r1
    9ea8:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    9eac:	e6ff1071 	uxth	r1, r1
    9eb0:	e5943024 	ldr	r3, [r4, #36]	; 0x24
    9eb4:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    9eb8:	e12fff33 	blx	r3
	ctx->tstates += 3;
    9ebc:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	write8(ctx, WR.IX + off, BR.A);	
    9ec0:	e1d410b8 	ldrh	r1, [r4, #8]
		val &= ~(1 << pos);
    9ec4:	e200207f 	and	r2, r0, #127	; 0x7f
    9ec8:	e0851001 	add	r1, r5, r1
	ctx->tstates += 3;
    9ecc:	e2833003 	add	r3, r3, #3
    9ed0:	e5843040 	str	r3, [r4, #64]	; 0x40
	BR.A = doSetRes(ctx, SR_RES, 7, read8(ctx, WR.IX + off));
    9ed4:	e5c42001 	strb	r2, [r4, #1]
	ctx->memWrite(ctx->memParam, addr, val);	
    9ed8:	e5943028 	ldr	r3, [r4, #40]	; 0x28
    9edc:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    9ee0:	e6ff1071 	uxth	r1, r1
}
    9ee4:	e8bd4070 	pop	{r4, r5, r6, lr}
    9ee8:	e12fff13 	bx	r3

00009eec <LD_A_RES_7_off_IY_d>:


static void LD_A_RES_7_off_IY_d (Z80Context* ctx)
{
	ctx->tstates += 2;
	char off = read8(ctx, ctx->PC++);
    9eec:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
    9ef0:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	char off = read8(ctx, ctx->PC++);
    9ef4:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
    9ef8:	e2833005 	add	r3, r3, #5
{
    9efc:	e92d4070 	push	{r4, r5, r6, lr}
    9f00:	e1a04000 	mov	r4, r0
	char off = read8(ctx, ctx->PC++);
    9f04:	e1c021bc 	strh	r2, [r0, #28]
    9f08:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    9f0c:	e5903024 	ldr	r3, [r0, #36]	; 0x24
    9f10:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
    9f14:	e12fff33 	blx	r3
	ctx->tstates += 3;
    9f18:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	BR.A = doSetRes(ctx, SR_RES, 7, read8(ctx, WR.IY + off));
    9f1c:	e1d410ba 	ldrh	r1, [r4, #10]
    9f20:	e6ff5070 	uxth	r5, r0
    9f24:	e2833003 	add	r3, r3, #3
    9f28:	e0851001 	add	r1, r5, r1
    9f2c:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    9f30:	e6ff1071 	uxth	r1, r1
    9f34:	e5943024 	ldr	r3, [r4, #36]	; 0x24
    9f38:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    9f3c:	e12fff33 	blx	r3
	ctx->tstates += 3;
    9f40:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	write8(ctx, WR.IY + off, BR.A);	
    9f44:	e1d410ba 	ldrh	r1, [r4, #10]
		val &= ~(1 << pos);
    9f48:	e200207f 	and	r2, r0, #127	; 0x7f
    9f4c:	e0851001 	add	r1, r5, r1
	ctx->tstates += 3;
    9f50:	e2833003 	add	r3, r3, #3
    9f54:	e5843040 	str	r3, [r4, #64]	; 0x40
	BR.A = doSetRes(ctx, SR_RES, 7, read8(ctx, WR.IY + off));
    9f58:	e5c42001 	strb	r2, [r4, #1]
	ctx->memWrite(ctx->memParam, addr, val);	
    9f5c:	e5943028 	ldr	r3, [r4, #40]	; 0x28
    9f60:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    9f64:	e6ff1071 	uxth	r1, r1
}
    9f68:	e8bd4070 	pop	{r4, r5, r6, lr}
    9f6c:	e12fff13 	bx	r3

00009f70 <LD_A_SET_0_off_IX_d>:


static void LD_A_SET_0_off_IX_d (Z80Context* ctx)
{
	ctx->tstates += 2;
	char off = read8(ctx, ctx->PC++);
    9f70:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
    9f74:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	char off = read8(ctx, ctx->PC++);
    9f78:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
    9f7c:	e2833005 	add	r3, r3, #5
{
    9f80:	e92d4070 	push	{r4, r5, r6, lr}
    9f84:	e1a04000 	mov	r4, r0
	char off = read8(ctx, ctx->PC++);
    9f88:	e1c021bc 	strh	r2, [r0, #28]
    9f8c:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    9f90:	e5903024 	ldr	r3, [r0, #36]	; 0x24
    9f94:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
    9f98:	e12fff33 	blx	r3
	ctx->tstates += 3;
    9f9c:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	BR.A = doSetRes(ctx, SR_SET, 0, read8(ctx, WR.IX + off));
    9fa0:	e1d410b8 	ldrh	r1, [r4, #8]
    9fa4:	e6ff5070 	uxth	r5, r0
    9fa8:	e2833003 	add	r3, r3, #3
    9fac:	e0851001 	add	r1, r5, r1
    9fb0:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    9fb4:	e6ff1071 	uxth	r1, r1
    9fb8:	e5943024 	ldr	r3, [r4, #36]	; 0x24
    9fbc:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    9fc0:	e12fff33 	blx	r3
	ctx->tstates += 3;
    9fc4:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	write8(ctx, WR.IX + off, BR.A);	
    9fc8:	e1d410b8 	ldrh	r1, [r4, #8]
		val |= (1 << pos);
    9fcc:	e3802001 	orr	r2, r0, #1
    9fd0:	e0851001 	add	r1, r5, r1
	ctx->tstates += 3;
    9fd4:	e2833003 	add	r3, r3, #3
		val |= (1 << pos);
    9fd8:	e6ef2072 	uxtb	r2, r2
	ctx->tstates += 3;
    9fdc:	e5843040 	str	r3, [r4, #64]	; 0x40
	BR.A = doSetRes(ctx, SR_SET, 0, read8(ctx, WR.IX + off));
    9fe0:	e5c42001 	strb	r2, [r4, #1]
	ctx->memWrite(ctx->memParam, addr, val);	
    9fe4:	e5943028 	ldr	r3, [r4, #40]	; 0x28
    9fe8:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    9fec:	e6ff1071 	uxth	r1, r1
}
    9ff0:	e8bd4070 	pop	{r4, r5, r6, lr}
    9ff4:	e12fff13 	bx	r3

00009ff8 <LD_A_SET_0_off_IY_d>:


static void LD_A_SET_0_off_IY_d (Z80Context* ctx)
{
	ctx->tstates += 2;
	char off = read8(ctx, ctx->PC++);
    9ff8:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
    9ffc:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	char off = read8(ctx, ctx->PC++);
    a000:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
    a004:	e2833005 	add	r3, r3, #5
{
    a008:	e92d4070 	push	{r4, r5, r6, lr}
    a00c:	e1a04000 	mov	r4, r0
	char off = read8(ctx, ctx->PC++);
    a010:	e1c021bc 	strh	r2, [r0, #28]
    a014:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    a018:	e5903024 	ldr	r3, [r0, #36]	; 0x24
    a01c:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
    a020:	e12fff33 	blx	r3
	ctx->tstates += 3;
    a024:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	BR.A = doSetRes(ctx, SR_SET, 0, read8(ctx, WR.IY + off));
    a028:	e1d410ba 	ldrh	r1, [r4, #10]
    a02c:	e6ff5070 	uxth	r5, r0
    a030:	e2833003 	add	r3, r3, #3
    a034:	e0851001 	add	r1, r5, r1
    a038:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    a03c:	e6ff1071 	uxth	r1, r1
    a040:	e5943024 	ldr	r3, [r4, #36]	; 0x24
    a044:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    a048:	e12fff33 	blx	r3
	ctx->tstates += 3;
    a04c:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	write8(ctx, WR.IY + off, BR.A);	
    a050:	e1d410ba 	ldrh	r1, [r4, #10]
		val |= (1 << pos);
    a054:	e3802001 	orr	r2, r0, #1
    a058:	e0851001 	add	r1, r5, r1
	ctx->tstates += 3;
    a05c:	e2833003 	add	r3, r3, #3
		val |= (1 << pos);
    a060:	e6ef2072 	uxtb	r2, r2
	ctx->tstates += 3;
    a064:	e5843040 	str	r3, [r4, #64]	; 0x40
	BR.A = doSetRes(ctx, SR_SET, 0, read8(ctx, WR.IY + off));
    a068:	e5c42001 	strb	r2, [r4, #1]
	ctx->memWrite(ctx->memParam, addr, val);	
    a06c:	e5943028 	ldr	r3, [r4, #40]	; 0x28
    a070:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    a074:	e6ff1071 	uxth	r1, r1
}
    a078:	e8bd4070 	pop	{r4, r5, r6, lr}
    a07c:	e12fff13 	bx	r3

0000a080 <LD_A_SET_1_off_IX_d>:


static void LD_A_SET_1_off_IX_d (Z80Context* ctx)
{
	ctx->tstates += 2;
	char off = read8(ctx, ctx->PC++);
    a080:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
    a084:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	char off = read8(ctx, ctx->PC++);
    a088:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
    a08c:	e2833005 	add	r3, r3, #5
{
    a090:	e92d4070 	push	{r4, r5, r6, lr}
    a094:	e1a04000 	mov	r4, r0
	char off = read8(ctx, ctx->PC++);
    a098:	e1c021bc 	strh	r2, [r0, #28]
    a09c:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    a0a0:	e5903024 	ldr	r3, [r0, #36]	; 0x24
    a0a4:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
    a0a8:	e12fff33 	blx	r3
	ctx->tstates += 3;
    a0ac:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	BR.A = doSetRes(ctx, SR_SET, 1, read8(ctx, WR.IX + off));
    a0b0:	e1d410b8 	ldrh	r1, [r4, #8]
    a0b4:	e6ff5070 	uxth	r5, r0
    a0b8:	e2833003 	add	r3, r3, #3
    a0bc:	e0851001 	add	r1, r5, r1
    a0c0:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    a0c4:	e6ff1071 	uxth	r1, r1
    a0c8:	e5943024 	ldr	r3, [r4, #36]	; 0x24
    a0cc:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    a0d0:	e12fff33 	blx	r3
	ctx->tstates += 3;
    a0d4:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	write8(ctx, WR.IX + off, BR.A);	
    a0d8:	e1d410b8 	ldrh	r1, [r4, #8]
		val |= (1 << pos);
    a0dc:	e3802002 	orr	r2, r0, #2
    a0e0:	e0851001 	add	r1, r5, r1
	ctx->tstates += 3;
    a0e4:	e2833003 	add	r3, r3, #3
		val |= (1 << pos);
    a0e8:	e6ef2072 	uxtb	r2, r2
	ctx->tstates += 3;
    a0ec:	e5843040 	str	r3, [r4, #64]	; 0x40
	BR.A = doSetRes(ctx, SR_SET, 1, read8(ctx, WR.IX + off));
    a0f0:	e5c42001 	strb	r2, [r4, #1]
	ctx->memWrite(ctx->memParam, addr, val);	
    a0f4:	e5943028 	ldr	r3, [r4, #40]	; 0x28
    a0f8:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    a0fc:	e6ff1071 	uxth	r1, r1
}
    a100:	e8bd4070 	pop	{r4, r5, r6, lr}
    a104:	e12fff13 	bx	r3

0000a108 <LD_A_SET_1_off_IY_d>:


static void LD_A_SET_1_off_IY_d (Z80Context* ctx)
{
	ctx->tstates += 2;
	char off = read8(ctx, ctx->PC++);
    a108:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
    a10c:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	char off = read8(ctx, ctx->PC++);
    a110:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
    a114:	e2833005 	add	r3, r3, #5
{
    a118:	e92d4070 	push	{r4, r5, r6, lr}
    a11c:	e1a04000 	mov	r4, r0
	char off = read8(ctx, ctx->PC++);
    a120:	e1c021bc 	strh	r2, [r0, #28]
    a124:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    a128:	e5903024 	ldr	r3, [r0, #36]	; 0x24
    a12c:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
    a130:	e12fff33 	blx	r3
	ctx->tstates += 3;
    a134:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	BR.A = doSetRes(ctx, SR_SET, 1, read8(ctx, WR.IY + off));
    a138:	e1d410ba 	ldrh	r1, [r4, #10]
    a13c:	e6ff5070 	uxth	r5, r0
    a140:	e2833003 	add	r3, r3, #3
    a144:	e0851001 	add	r1, r5, r1
    a148:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    a14c:	e6ff1071 	uxth	r1, r1
    a150:	e5943024 	ldr	r3, [r4, #36]	; 0x24
    a154:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    a158:	e12fff33 	blx	r3
	ctx->tstates += 3;
    a15c:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	write8(ctx, WR.IY + off, BR.A);	
    a160:	e1d410ba 	ldrh	r1, [r4, #10]
		val |= (1 << pos);
    a164:	e3802002 	orr	r2, r0, #2
    a168:	e0851001 	add	r1, r5, r1
	ctx->tstates += 3;
    a16c:	e2833003 	add	r3, r3, #3
		val |= (1 << pos);
    a170:	e6ef2072 	uxtb	r2, r2
	ctx->tstates += 3;
    a174:	e5843040 	str	r3, [r4, #64]	; 0x40
	BR.A = doSetRes(ctx, SR_SET, 1, read8(ctx, WR.IY + off));
    a178:	e5c42001 	strb	r2, [r4, #1]
	ctx->memWrite(ctx->memParam, addr, val);	
    a17c:	e5943028 	ldr	r3, [r4, #40]	; 0x28
    a180:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    a184:	e6ff1071 	uxth	r1, r1
}
    a188:	e8bd4070 	pop	{r4, r5, r6, lr}
    a18c:	e12fff13 	bx	r3

0000a190 <LD_A_SET_2_off_IX_d>:


static void LD_A_SET_2_off_IX_d (Z80Context* ctx)
{
	ctx->tstates += 2;
	char off = read8(ctx, ctx->PC++);
    a190:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
    a194:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	char off = read8(ctx, ctx->PC++);
    a198:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
    a19c:	e2833005 	add	r3, r3, #5
{
    a1a0:	e92d4070 	push	{r4, r5, r6, lr}
    a1a4:	e1a04000 	mov	r4, r0
	char off = read8(ctx, ctx->PC++);
    a1a8:	e1c021bc 	strh	r2, [r0, #28]
    a1ac:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    a1b0:	e5903024 	ldr	r3, [r0, #36]	; 0x24
    a1b4:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
    a1b8:	e12fff33 	blx	r3
	ctx->tstates += 3;
    a1bc:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	BR.A = doSetRes(ctx, SR_SET, 2, read8(ctx, WR.IX + off));
    a1c0:	e1d410b8 	ldrh	r1, [r4, #8]
    a1c4:	e6ff5070 	uxth	r5, r0
    a1c8:	e2833003 	add	r3, r3, #3
    a1cc:	e0851001 	add	r1, r5, r1
    a1d0:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    a1d4:	e6ff1071 	uxth	r1, r1
    a1d8:	e5943024 	ldr	r3, [r4, #36]	; 0x24
    a1dc:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    a1e0:	e12fff33 	blx	r3
	ctx->tstates += 3;
    a1e4:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	write8(ctx, WR.IX + off, BR.A);	
    a1e8:	e1d410b8 	ldrh	r1, [r4, #8]
		val |= (1 << pos);
    a1ec:	e3802004 	orr	r2, r0, #4
    a1f0:	e0851001 	add	r1, r5, r1
	ctx->tstates += 3;
    a1f4:	e2833003 	add	r3, r3, #3
		val |= (1 << pos);
    a1f8:	e6ef2072 	uxtb	r2, r2
	ctx->tstates += 3;
    a1fc:	e5843040 	str	r3, [r4, #64]	; 0x40
	BR.A = doSetRes(ctx, SR_SET, 2, read8(ctx, WR.IX + off));
    a200:	e5c42001 	strb	r2, [r4, #1]
	ctx->memWrite(ctx->memParam, addr, val);	
    a204:	e5943028 	ldr	r3, [r4, #40]	; 0x28
    a208:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    a20c:	e6ff1071 	uxth	r1, r1
}
    a210:	e8bd4070 	pop	{r4, r5, r6, lr}
    a214:	e12fff13 	bx	r3

0000a218 <LD_A_SET_2_off_IY_d>:


static void LD_A_SET_2_off_IY_d (Z80Context* ctx)
{
	ctx->tstates += 2;
	char off = read8(ctx, ctx->PC++);
    a218:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
    a21c:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	char off = read8(ctx, ctx->PC++);
    a220:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
    a224:	e2833005 	add	r3, r3, #5
{
    a228:	e92d4070 	push	{r4, r5, r6, lr}
    a22c:	e1a04000 	mov	r4, r0
	char off = read8(ctx, ctx->PC++);
    a230:	e1c021bc 	strh	r2, [r0, #28]
    a234:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    a238:	e5903024 	ldr	r3, [r0, #36]	; 0x24
    a23c:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
    a240:	e12fff33 	blx	r3
	ctx->tstates += 3;
    a244:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	BR.A = doSetRes(ctx, SR_SET, 2, read8(ctx, WR.IY + off));
    a248:	e1d410ba 	ldrh	r1, [r4, #10]
    a24c:	e6ff5070 	uxth	r5, r0
    a250:	e2833003 	add	r3, r3, #3
    a254:	e0851001 	add	r1, r5, r1
    a258:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    a25c:	e6ff1071 	uxth	r1, r1
    a260:	e5943024 	ldr	r3, [r4, #36]	; 0x24
    a264:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    a268:	e12fff33 	blx	r3
	ctx->tstates += 3;
    a26c:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	write8(ctx, WR.IY + off, BR.A);	
    a270:	e1d410ba 	ldrh	r1, [r4, #10]
		val |= (1 << pos);
    a274:	e3802004 	orr	r2, r0, #4
    a278:	e0851001 	add	r1, r5, r1
	ctx->tstates += 3;
    a27c:	e2833003 	add	r3, r3, #3
		val |= (1 << pos);
    a280:	e6ef2072 	uxtb	r2, r2
	ctx->tstates += 3;
    a284:	e5843040 	str	r3, [r4, #64]	; 0x40
	BR.A = doSetRes(ctx, SR_SET, 2, read8(ctx, WR.IY + off));
    a288:	e5c42001 	strb	r2, [r4, #1]
	ctx->memWrite(ctx->memParam, addr, val);	
    a28c:	e5943028 	ldr	r3, [r4, #40]	; 0x28
    a290:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    a294:	e6ff1071 	uxth	r1, r1
}
    a298:	e8bd4070 	pop	{r4, r5, r6, lr}
    a29c:	e12fff13 	bx	r3

0000a2a0 <LD_A_SET_3_off_IX_d>:


static void LD_A_SET_3_off_IX_d (Z80Context* ctx)
{
	ctx->tstates += 2;
	char off = read8(ctx, ctx->PC++);
    a2a0:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
    a2a4:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	char off = read8(ctx, ctx->PC++);
    a2a8:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
    a2ac:	e2833005 	add	r3, r3, #5
{
    a2b0:	e92d4070 	push	{r4, r5, r6, lr}
    a2b4:	e1a04000 	mov	r4, r0
	char off = read8(ctx, ctx->PC++);
    a2b8:	e1c021bc 	strh	r2, [r0, #28]
    a2bc:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    a2c0:	e5903024 	ldr	r3, [r0, #36]	; 0x24
    a2c4:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
    a2c8:	e12fff33 	blx	r3
	ctx->tstates += 3;
    a2cc:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	BR.A = doSetRes(ctx, SR_SET, 3, read8(ctx, WR.IX + off));
    a2d0:	e1d410b8 	ldrh	r1, [r4, #8]
    a2d4:	e6ff5070 	uxth	r5, r0
    a2d8:	e2833003 	add	r3, r3, #3
    a2dc:	e0851001 	add	r1, r5, r1
    a2e0:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    a2e4:	e6ff1071 	uxth	r1, r1
    a2e8:	e5943024 	ldr	r3, [r4, #36]	; 0x24
    a2ec:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    a2f0:	e12fff33 	blx	r3
	ctx->tstates += 3;
    a2f4:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	write8(ctx, WR.IX + off, BR.A);	
    a2f8:	e1d410b8 	ldrh	r1, [r4, #8]
		val |= (1 << pos);
    a2fc:	e3802008 	orr	r2, r0, #8
    a300:	e0851001 	add	r1, r5, r1
	ctx->tstates += 3;
    a304:	e2833003 	add	r3, r3, #3
		val |= (1 << pos);
    a308:	e6ef2072 	uxtb	r2, r2
	ctx->tstates += 3;
    a30c:	e5843040 	str	r3, [r4, #64]	; 0x40
	BR.A = doSetRes(ctx, SR_SET, 3, read8(ctx, WR.IX + off));
    a310:	e5c42001 	strb	r2, [r4, #1]
	ctx->memWrite(ctx->memParam, addr, val);	
    a314:	e5943028 	ldr	r3, [r4, #40]	; 0x28
    a318:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    a31c:	e6ff1071 	uxth	r1, r1
}
    a320:	e8bd4070 	pop	{r4, r5, r6, lr}
    a324:	e12fff13 	bx	r3

0000a328 <LD_A_SET_3_off_IY_d>:


static void LD_A_SET_3_off_IY_d (Z80Context* ctx)
{
	ctx->tstates += 2;
	char off = read8(ctx, ctx->PC++);
    a328:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
    a32c:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	char off = read8(ctx, ctx->PC++);
    a330:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
    a334:	e2833005 	add	r3, r3, #5
{
    a338:	e92d4070 	push	{r4, r5, r6, lr}
    a33c:	e1a04000 	mov	r4, r0
	char off = read8(ctx, ctx->PC++);
    a340:	e1c021bc 	strh	r2, [r0, #28]
    a344:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    a348:	e5903024 	ldr	r3, [r0, #36]	; 0x24
    a34c:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
    a350:	e12fff33 	blx	r3
	ctx->tstates += 3;
    a354:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	BR.A = doSetRes(ctx, SR_SET, 3, read8(ctx, WR.IY + off));
    a358:	e1d410ba 	ldrh	r1, [r4, #10]
    a35c:	e6ff5070 	uxth	r5, r0
    a360:	e2833003 	add	r3, r3, #3
    a364:	e0851001 	add	r1, r5, r1
    a368:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    a36c:	e6ff1071 	uxth	r1, r1
    a370:	e5943024 	ldr	r3, [r4, #36]	; 0x24
    a374:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    a378:	e12fff33 	blx	r3
	ctx->tstates += 3;
    a37c:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	write8(ctx, WR.IY + off, BR.A);	
    a380:	e1d410ba 	ldrh	r1, [r4, #10]
		val |= (1 << pos);
    a384:	e3802008 	orr	r2, r0, #8
    a388:	e0851001 	add	r1, r5, r1
	ctx->tstates += 3;
    a38c:	e2833003 	add	r3, r3, #3
		val |= (1 << pos);
    a390:	e6ef2072 	uxtb	r2, r2
	ctx->tstates += 3;
    a394:	e5843040 	str	r3, [r4, #64]	; 0x40
	BR.A = doSetRes(ctx, SR_SET, 3, read8(ctx, WR.IY + off));
    a398:	e5c42001 	strb	r2, [r4, #1]
	ctx->memWrite(ctx->memParam, addr, val);	
    a39c:	e5943028 	ldr	r3, [r4, #40]	; 0x28
    a3a0:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    a3a4:	e6ff1071 	uxth	r1, r1
}
    a3a8:	e8bd4070 	pop	{r4, r5, r6, lr}
    a3ac:	e12fff13 	bx	r3

0000a3b0 <LD_A_SET_4_off_IX_d>:


static void LD_A_SET_4_off_IX_d (Z80Context* ctx)
{
	ctx->tstates += 2;
	char off = read8(ctx, ctx->PC++);
    a3b0:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
    a3b4:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	char off = read8(ctx, ctx->PC++);
    a3b8:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
    a3bc:	e2833005 	add	r3, r3, #5
{
    a3c0:	e92d4070 	push	{r4, r5, r6, lr}
    a3c4:	e1a04000 	mov	r4, r0
	char off = read8(ctx, ctx->PC++);
    a3c8:	e1c021bc 	strh	r2, [r0, #28]
    a3cc:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    a3d0:	e5903024 	ldr	r3, [r0, #36]	; 0x24
    a3d4:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
    a3d8:	e12fff33 	blx	r3
	ctx->tstates += 3;
    a3dc:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	BR.A = doSetRes(ctx, SR_SET, 4, read8(ctx, WR.IX + off));
    a3e0:	e1d410b8 	ldrh	r1, [r4, #8]
    a3e4:	e6ff5070 	uxth	r5, r0
    a3e8:	e2833003 	add	r3, r3, #3
    a3ec:	e0851001 	add	r1, r5, r1
    a3f0:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    a3f4:	e6ff1071 	uxth	r1, r1
    a3f8:	e5943024 	ldr	r3, [r4, #36]	; 0x24
    a3fc:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    a400:	e12fff33 	blx	r3
	ctx->tstates += 3;
    a404:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	write8(ctx, WR.IX + off, BR.A);	
    a408:	e1d410b8 	ldrh	r1, [r4, #8]
		val |= (1 << pos);
    a40c:	e3802010 	orr	r2, r0, #16
    a410:	e0851001 	add	r1, r5, r1
	ctx->tstates += 3;
    a414:	e2833003 	add	r3, r3, #3
		val |= (1 << pos);
    a418:	e6ef2072 	uxtb	r2, r2
	ctx->tstates += 3;
    a41c:	e5843040 	str	r3, [r4, #64]	; 0x40
	BR.A = doSetRes(ctx, SR_SET, 4, read8(ctx, WR.IX + off));
    a420:	e5c42001 	strb	r2, [r4, #1]
	ctx->memWrite(ctx->memParam, addr, val);	
    a424:	e5943028 	ldr	r3, [r4, #40]	; 0x28
    a428:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    a42c:	e6ff1071 	uxth	r1, r1
}
    a430:	e8bd4070 	pop	{r4, r5, r6, lr}
    a434:	e12fff13 	bx	r3

0000a438 <LD_A_SET_4_off_IY_d>:


static void LD_A_SET_4_off_IY_d (Z80Context* ctx)
{
	ctx->tstates += 2;
	char off = read8(ctx, ctx->PC++);
    a438:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
    a43c:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	char off = read8(ctx, ctx->PC++);
    a440:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
    a444:	e2833005 	add	r3, r3, #5
{
    a448:	e92d4070 	push	{r4, r5, r6, lr}
    a44c:	e1a04000 	mov	r4, r0
	char off = read8(ctx, ctx->PC++);
    a450:	e1c021bc 	strh	r2, [r0, #28]
    a454:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    a458:	e5903024 	ldr	r3, [r0, #36]	; 0x24
    a45c:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
    a460:	e12fff33 	blx	r3
	ctx->tstates += 3;
    a464:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	BR.A = doSetRes(ctx, SR_SET, 4, read8(ctx, WR.IY + off));
    a468:	e1d410ba 	ldrh	r1, [r4, #10]
    a46c:	e6ff5070 	uxth	r5, r0
    a470:	e2833003 	add	r3, r3, #3
    a474:	e0851001 	add	r1, r5, r1
    a478:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    a47c:	e6ff1071 	uxth	r1, r1
    a480:	e5943024 	ldr	r3, [r4, #36]	; 0x24
    a484:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    a488:	e12fff33 	blx	r3
	ctx->tstates += 3;
    a48c:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	write8(ctx, WR.IY + off, BR.A);	
    a490:	e1d410ba 	ldrh	r1, [r4, #10]
		val |= (1 << pos);
    a494:	e3802010 	orr	r2, r0, #16
    a498:	e0851001 	add	r1, r5, r1
	ctx->tstates += 3;
    a49c:	e2833003 	add	r3, r3, #3
		val |= (1 << pos);
    a4a0:	e6ef2072 	uxtb	r2, r2
	ctx->tstates += 3;
    a4a4:	e5843040 	str	r3, [r4, #64]	; 0x40
	BR.A = doSetRes(ctx, SR_SET, 4, read8(ctx, WR.IY + off));
    a4a8:	e5c42001 	strb	r2, [r4, #1]
	ctx->memWrite(ctx->memParam, addr, val);	
    a4ac:	e5943028 	ldr	r3, [r4, #40]	; 0x28
    a4b0:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    a4b4:	e6ff1071 	uxth	r1, r1
}
    a4b8:	e8bd4070 	pop	{r4, r5, r6, lr}
    a4bc:	e12fff13 	bx	r3

0000a4c0 <LD_A_SET_5_off_IX_d>:


static void LD_A_SET_5_off_IX_d (Z80Context* ctx)
{
	ctx->tstates += 2;
	char off = read8(ctx, ctx->PC++);
    a4c0:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
    a4c4:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	char off = read8(ctx, ctx->PC++);
    a4c8:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
    a4cc:	e2833005 	add	r3, r3, #5
{
    a4d0:	e92d4070 	push	{r4, r5, r6, lr}
    a4d4:	e1a04000 	mov	r4, r0
	char off = read8(ctx, ctx->PC++);
    a4d8:	e1c021bc 	strh	r2, [r0, #28]
    a4dc:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    a4e0:	e5903024 	ldr	r3, [r0, #36]	; 0x24
    a4e4:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
    a4e8:	e12fff33 	blx	r3
	ctx->tstates += 3;
    a4ec:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	BR.A = doSetRes(ctx, SR_SET, 5, read8(ctx, WR.IX + off));
    a4f0:	e1d410b8 	ldrh	r1, [r4, #8]
    a4f4:	e6ff5070 	uxth	r5, r0
    a4f8:	e2833003 	add	r3, r3, #3
    a4fc:	e0851001 	add	r1, r5, r1
    a500:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    a504:	e6ff1071 	uxth	r1, r1
    a508:	e5943024 	ldr	r3, [r4, #36]	; 0x24
    a50c:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    a510:	e12fff33 	blx	r3
	ctx->tstates += 3;
    a514:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	write8(ctx, WR.IX + off, BR.A);	
    a518:	e1d410b8 	ldrh	r1, [r4, #8]
		val |= (1 << pos);
    a51c:	e3802020 	orr	r2, r0, #32
    a520:	e0851001 	add	r1, r5, r1
	ctx->tstates += 3;
    a524:	e2833003 	add	r3, r3, #3
		val |= (1 << pos);
    a528:	e6ef2072 	uxtb	r2, r2
	ctx->tstates += 3;
    a52c:	e5843040 	str	r3, [r4, #64]	; 0x40
	BR.A = doSetRes(ctx, SR_SET, 5, read8(ctx, WR.IX + off));
    a530:	e5c42001 	strb	r2, [r4, #1]
	ctx->memWrite(ctx->memParam, addr, val);	
    a534:	e5943028 	ldr	r3, [r4, #40]	; 0x28
    a538:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    a53c:	e6ff1071 	uxth	r1, r1
}
    a540:	e8bd4070 	pop	{r4, r5, r6, lr}
    a544:	e12fff13 	bx	r3

0000a548 <LD_A_SET_5_off_IY_d>:


static void LD_A_SET_5_off_IY_d (Z80Context* ctx)
{
	ctx->tstates += 2;
	char off = read8(ctx, ctx->PC++);
    a548:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
    a54c:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	char off = read8(ctx, ctx->PC++);
    a550:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
    a554:	e2833005 	add	r3, r3, #5
{
    a558:	e92d4070 	push	{r4, r5, r6, lr}
    a55c:	e1a04000 	mov	r4, r0
	char off = read8(ctx, ctx->PC++);
    a560:	e1c021bc 	strh	r2, [r0, #28]
    a564:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    a568:	e5903024 	ldr	r3, [r0, #36]	; 0x24
    a56c:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
    a570:	e12fff33 	blx	r3
	ctx->tstates += 3;
    a574:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	BR.A = doSetRes(ctx, SR_SET, 5, read8(ctx, WR.IY + off));
    a578:	e1d410ba 	ldrh	r1, [r4, #10]
    a57c:	e6ff5070 	uxth	r5, r0
    a580:	e2833003 	add	r3, r3, #3
    a584:	e0851001 	add	r1, r5, r1
    a588:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    a58c:	e6ff1071 	uxth	r1, r1
    a590:	e5943024 	ldr	r3, [r4, #36]	; 0x24
    a594:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    a598:	e12fff33 	blx	r3
	ctx->tstates += 3;
    a59c:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	write8(ctx, WR.IY + off, BR.A);	
    a5a0:	e1d410ba 	ldrh	r1, [r4, #10]
		val |= (1 << pos);
    a5a4:	e3802020 	orr	r2, r0, #32
    a5a8:	e0851001 	add	r1, r5, r1
	ctx->tstates += 3;
    a5ac:	e2833003 	add	r3, r3, #3
		val |= (1 << pos);
    a5b0:	e6ef2072 	uxtb	r2, r2
	ctx->tstates += 3;
    a5b4:	e5843040 	str	r3, [r4, #64]	; 0x40
	BR.A = doSetRes(ctx, SR_SET, 5, read8(ctx, WR.IY + off));
    a5b8:	e5c42001 	strb	r2, [r4, #1]
	ctx->memWrite(ctx->memParam, addr, val);	
    a5bc:	e5943028 	ldr	r3, [r4, #40]	; 0x28
    a5c0:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    a5c4:	e6ff1071 	uxth	r1, r1
}
    a5c8:	e8bd4070 	pop	{r4, r5, r6, lr}
    a5cc:	e12fff13 	bx	r3

0000a5d0 <LD_A_SET_6_off_IX_d>:


static void LD_A_SET_6_off_IX_d (Z80Context* ctx)
{
	ctx->tstates += 2;
	char off = read8(ctx, ctx->PC++);
    a5d0:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
    a5d4:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	char off = read8(ctx, ctx->PC++);
    a5d8:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
    a5dc:	e2833005 	add	r3, r3, #5
{
    a5e0:	e92d4070 	push	{r4, r5, r6, lr}
    a5e4:	e1a04000 	mov	r4, r0
	char off = read8(ctx, ctx->PC++);
    a5e8:	e1c021bc 	strh	r2, [r0, #28]
    a5ec:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    a5f0:	e5903024 	ldr	r3, [r0, #36]	; 0x24
    a5f4:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
    a5f8:	e12fff33 	blx	r3
	ctx->tstates += 3;
    a5fc:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	BR.A = doSetRes(ctx, SR_SET, 6, read8(ctx, WR.IX + off));
    a600:	e1d410b8 	ldrh	r1, [r4, #8]
    a604:	e6ff5070 	uxth	r5, r0
    a608:	e2833003 	add	r3, r3, #3
    a60c:	e0851001 	add	r1, r5, r1
    a610:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    a614:	e6ff1071 	uxth	r1, r1
    a618:	e5943024 	ldr	r3, [r4, #36]	; 0x24
    a61c:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    a620:	e12fff33 	blx	r3
	ctx->tstates += 3;
    a624:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	write8(ctx, WR.IX + off, BR.A);	
    a628:	e1d410b8 	ldrh	r1, [r4, #8]
		val |= (1 << pos);
    a62c:	e3802040 	orr	r2, r0, #64	; 0x40
    a630:	e0851001 	add	r1, r5, r1
	ctx->tstates += 3;
    a634:	e2833003 	add	r3, r3, #3
		val |= (1 << pos);
    a638:	e6ef2072 	uxtb	r2, r2
	ctx->tstates += 3;
    a63c:	e5843040 	str	r3, [r4, #64]	; 0x40
	BR.A = doSetRes(ctx, SR_SET, 6, read8(ctx, WR.IX + off));
    a640:	e5c42001 	strb	r2, [r4, #1]
	ctx->memWrite(ctx->memParam, addr, val);	
    a644:	e5943028 	ldr	r3, [r4, #40]	; 0x28
    a648:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    a64c:	e6ff1071 	uxth	r1, r1
}
    a650:	e8bd4070 	pop	{r4, r5, r6, lr}
    a654:	e12fff13 	bx	r3

0000a658 <LD_A_SET_6_off_IY_d>:


static void LD_A_SET_6_off_IY_d (Z80Context* ctx)
{
	ctx->tstates += 2;
	char off = read8(ctx, ctx->PC++);
    a658:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
    a65c:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	char off = read8(ctx, ctx->PC++);
    a660:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
    a664:	e2833005 	add	r3, r3, #5
{
    a668:	e92d4070 	push	{r4, r5, r6, lr}
    a66c:	e1a04000 	mov	r4, r0
	char off = read8(ctx, ctx->PC++);
    a670:	e1c021bc 	strh	r2, [r0, #28]
    a674:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    a678:	e5903024 	ldr	r3, [r0, #36]	; 0x24
    a67c:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
    a680:	e12fff33 	blx	r3
	ctx->tstates += 3;
    a684:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	BR.A = doSetRes(ctx, SR_SET, 6, read8(ctx, WR.IY + off));
    a688:	e1d410ba 	ldrh	r1, [r4, #10]
    a68c:	e6ff5070 	uxth	r5, r0
    a690:	e2833003 	add	r3, r3, #3
    a694:	e0851001 	add	r1, r5, r1
    a698:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    a69c:	e6ff1071 	uxth	r1, r1
    a6a0:	e5943024 	ldr	r3, [r4, #36]	; 0x24
    a6a4:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    a6a8:	e12fff33 	blx	r3
	ctx->tstates += 3;
    a6ac:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	write8(ctx, WR.IY + off, BR.A);	
    a6b0:	e1d410ba 	ldrh	r1, [r4, #10]
		val |= (1 << pos);
    a6b4:	e3802040 	orr	r2, r0, #64	; 0x40
    a6b8:	e0851001 	add	r1, r5, r1
	ctx->tstates += 3;
    a6bc:	e2833003 	add	r3, r3, #3
		val |= (1 << pos);
    a6c0:	e6ef2072 	uxtb	r2, r2
	ctx->tstates += 3;
    a6c4:	e5843040 	str	r3, [r4, #64]	; 0x40
	BR.A = doSetRes(ctx, SR_SET, 6, read8(ctx, WR.IY + off));
    a6c8:	e5c42001 	strb	r2, [r4, #1]
	ctx->memWrite(ctx->memParam, addr, val);	
    a6cc:	e5943028 	ldr	r3, [r4, #40]	; 0x28
    a6d0:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    a6d4:	e6ff1071 	uxth	r1, r1
}
    a6d8:	e8bd4070 	pop	{r4, r5, r6, lr}
    a6dc:	e12fff13 	bx	r3

0000a6e0 <LD_A_SET_7_off_IX_d>:


static void LD_A_SET_7_off_IX_d (Z80Context* ctx)
{
	ctx->tstates += 2;
	char off = read8(ctx, ctx->PC++);
    a6e0:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
    a6e4:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	char off = read8(ctx, ctx->PC++);
    a6e8:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
    a6ec:	e2833005 	add	r3, r3, #5
{
    a6f0:	e92d4070 	push	{r4, r5, r6, lr}
    a6f4:	e1a04000 	mov	r4, r0
	char off = read8(ctx, ctx->PC++);
    a6f8:	e1c021bc 	strh	r2, [r0, #28]
    a6fc:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    a700:	e5903024 	ldr	r3, [r0, #36]	; 0x24
    a704:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
    a708:	e12fff33 	blx	r3
	ctx->tstates += 3;
    a70c:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	BR.A = doSetRes(ctx, SR_SET, 7, read8(ctx, WR.IX + off));
    a710:	e1d410b8 	ldrh	r1, [r4, #8]
    a714:	e6ff5070 	uxth	r5, r0
    a718:	e2833003 	add	r3, r3, #3
    a71c:	e0851001 	add	r1, r5, r1
    a720:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    a724:	e6ff1071 	uxth	r1, r1
    a728:	e5943024 	ldr	r3, [r4, #36]	; 0x24
    a72c:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    a730:	e12fff33 	blx	r3
		val |= (1 << pos);
    a734:	e1e00c80 	mvn	r0, r0, lsl #25
    a738:	e1e00ca0 	mvn	r0, r0, lsr #25
	ctx->tstates += 3;
    a73c:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	write8(ctx, WR.IX + off, BR.A);	
    a740:	e1d410b8 	ldrh	r1, [r4, #8]
		val |= (1 << pos);
    a744:	e6ef2070 	uxtb	r2, r0
    a748:	e0851001 	add	r1, r5, r1
	ctx->tstates += 3;
    a74c:	e2833003 	add	r3, r3, #3
    a750:	e5843040 	str	r3, [r4, #64]	; 0x40
	BR.A = doSetRes(ctx, SR_SET, 7, read8(ctx, WR.IX + off));
    a754:	e5c42001 	strb	r2, [r4, #1]
	ctx->memWrite(ctx->memParam, addr, val);	
    a758:	e5943028 	ldr	r3, [r4, #40]	; 0x28
    a75c:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    a760:	e6ff1071 	uxth	r1, r1
}
    a764:	e8bd4070 	pop	{r4, r5, r6, lr}
    a768:	e12fff13 	bx	r3

0000a76c <LD_A_SET_7_off_IY_d>:


static void LD_A_SET_7_off_IY_d (Z80Context* ctx)
{
	ctx->tstates += 2;
	char off = read8(ctx, ctx->PC++);
    a76c:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
    a770:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	char off = read8(ctx, ctx->PC++);
    a774:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
    a778:	e2833005 	add	r3, r3, #5
{
    a77c:	e92d4070 	push	{r4, r5, r6, lr}
    a780:	e1a04000 	mov	r4, r0
	char off = read8(ctx, ctx->PC++);
    a784:	e1c021bc 	strh	r2, [r0, #28]
    a788:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    a78c:	e5903024 	ldr	r3, [r0, #36]	; 0x24
    a790:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
    a794:	e12fff33 	blx	r3
	ctx->tstates += 3;
    a798:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	BR.A = doSetRes(ctx, SR_SET, 7, read8(ctx, WR.IY + off));
    a79c:	e1d410ba 	ldrh	r1, [r4, #10]
    a7a0:	e6ff5070 	uxth	r5, r0
    a7a4:	e2833003 	add	r3, r3, #3
    a7a8:	e0851001 	add	r1, r5, r1
    a7ac:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    a7b0:	e6ff1071 	uxth	r1, r1
    a7b4:	e5943024 	ldr	r3, [r4, #36]	; 0x24
    a7b8:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    a7bc:	e12fff33 	blx	r3
		val |= (1 << pos);
    a7c0:	e1e00c80 	mvn	r0, r0, lsl #25
    a7c4:	e1e00ca0 	mvn	r0, r0, lsr #25
	ctx->tstates += 3;
    a7c8:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	write8(ctx, WR.IY + off, BR.A);	
    a7cc:	e1d410ba 	ldrh	r1, [r4, #10]
		val |= (1 << pos);
    a7d0:	e6ef2070 	uxtb	r2, r0
    a7d4:	e0851001 	add	r1, r5, r1
	ctx->tstates += 3;
    a7d8:	e2833003 	add	r3, r3, #3
    a7dc:	e5843040 	str	r3, [r4, #64]	; 0x40
	BR.A = doSetRes(ctx, SR_SET, 7, read8(ctx, WR.IY + off));
    a7e0:	e5c42001 	strb	r2, [r4, #1]
	ctx->memWrite(ctx->memParam, addr, val);	
    a7e4:	e5943028 	ldr	r3, [r4, #40]	; 0x28
    a7e8:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    a7ec:	e6ff1071 	uxth	r1, r1
}
    a7f0:	e8bd4070 	pop	{r4, r5, r6, lr}
    a7f4:	e12fff13 	bx	r3

0000a7f8 <LD_B_off_HL>:
	ctx->tstates += 3;
    a7f8:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	  
}


static void LD_B_off_HL (Z80Context* ctx)
{
    a7fc:	e92d4010 	push	{r4, lr}
    a800:	e2833003 	add	r3, r3, #3
    a804:	e5803040 	str	r3, [r0, #64]	; 0x40
    a808:	e1a04000 	mov	r4, r0
	BR.B = read8(ctx, WR.HL);
    a80c:	e1d010b6 	ldrh	r1, [r0, #6]
	return ctx->memRead(ctx->memParam, addr);	
    a810:	e5903024 	ldr	r3, [r0, #36]	; 0x24
    a814:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
    a818:	e12fff33 	blx	r3
    a81c:	e5c40003 	strb	r0, [r4, #3]
}
    a820:	e8bd8010 	pop	{r4, pc}

0000a824 <LD_B_off_IX_d>:


static void LD_B_off_IX_d (Z80Context* ctx)
{
    a824:	e92d4070 	push	{r4, r5, r6, lr}
    a828:	e1a04000 	mov	r4, r0
	ctx->tstates += 5;
	BR.B = read8(ctx, WR.IX + (char) read8(ctx, ctx->PC++));
    a82c:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 5;
    a830:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	BR.B = read8(ctx, WR.IX + (char) read8(ctx, ctx->PC++));
    a834:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
    a838:	e2833008 	add	r3, r3, #8
    a83c:	e1c021bc 	strh	r2, [r0, #28]
    a840:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    a844:	e5903024 	ldr	r3, [r0, #36]	; 0x24
    a848:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
    a84c:	e1d450b8 	ldrh	r5, [r4, #8]
    a850:	e12fff33 	blx	r3
	ctx->tstates += 3;
    a854:	e5943040 	ldr	r3, [r4, #64]	; 0x40
    a858:	e0851000 	add	r1, r5, r0
    a85c:	e2833003 	add	r3, r3, #3
    a860:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    a864:	e6ff1071 	uxth	r1, r1
    a868:	e5943024 	ldr	r3, [r4, #36]	; 0x24
    a86c:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    a870:	e12fff33 	blx	r3
    a874:	e5c40003 	strb	r0, [r4, #3]
}
    a878:	e8bd8070 	pop	{r4, r5, r6, pc}

0000a87c <LD_B_off_IY_d>:


static void LD_B_off_IY_d (Z80Context* ctx)
{
    a87c:	e92d4070 	push	{r4, r5, r6, lr}
    a880:	e1a04000 	mov	r4, r0
	ctx->tstates += 5;
	BR.B = read8(ctx, WR.IY + (char) read8(ctx, ctx->PC++));
    a884:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 5;
    a888:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	BR.B = read8(ctx, WR.IY + (char) read8(ctx, ctx->PC++));
    a88c:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
    a890:	e2833008 	add	r3, r3, #8
    a894:	e1c021bc 	strh	r2, [r0, #28]
    a898:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    a89c:	e5903024 	ldr	r3, [r0, #36]	; 0x24
    a8a0:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
    a8a4:	e1d450ba 	ldrh	r5, [r4, #10]
    a8a8:	e12fff33 	blx	r3
	ctx->tstates += 3;
    a8ac:	e5943040 	ldr	r3, [r4, #64]	; 0x40
    a8b0:	e0851000 	add	r1, r5, r0
    a8b4:	e2833003 	add	r3, r3, #3
    a8b8:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    a8bc:	e6ff1071 	uxth	r1, r1
    a8c0:	e5943024 	ldr	r3, [r4, #36]	; 0x24
    a8c4:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    a8c8:	e12fff33 	blx	r3
    a8cc:	e5c40003 	strb	r0, [r4, #3]
}
    a8d0:	e8bd8070 	pop	{r4, r5, r6, pc}

0000a8d4 <LD_B_A>:


static void LD_B_A (Z80Context* ctx)
{
	BR.B = BR.A;
    a8d4:	e5d03001 	ldrb	r3, [r0, #1]
    a8d8:	e5c03003 	strb	r3, [r0, #3]
}
    a8dc:	e12fff1e 	bx	lr

0000a8e0 <LD_B_C>:
}


static void LD_B_C (Z80Context* ctx)
{
	BR.B = BR.C;
    a8e0:	e5d03002 	ldrb	r3, [r0, #2]
    a8e4:	e5c03003 	strb	r3, [r0, #3]
}
    a8e8:	e12fff1e 	bx	lr

0000a8ec <LD_B_D>:


static void LD_B_D (Z80Context* ctx)
{
	BR.B = BR.D;
    a8ec:	e5d03005 	ldrb	r3, [r0, #5]
    a8f0:	e5c03003 	strb	r3, [r0, #3]
}
    a8f4:	e12fff1e 	bx	lr

0000a8f8 <LD_B_E>:


static void LD_B_E (Z80Context* ctx)
{
	BR.B = BR.E;
    a8f8:	e5d03004 	ldrb	r3, [r0, #4]
    a8fc:	e5c03003 	strb	r3, [r0, #3]
}
    a900:	e12fff1e 	bx	lr

0000a904 <LD_B_H>:


static void LD_B_H (Z80Context* ctx)
{
	BR.B = BR.H;
    a904:	e5d03007 	ldrb	r3, [r0, #7]
    a908:	e5c03003 	strb	r3, [r0, #3]
}
    a90c:	e12fff1e 	bx	lr

0000a910 <LD_B_IXh>:


static void LD_B_IXh (Z80Context* ctx)
{
	BR.B = BR.IXh;
    a910:	e5d03009 	ldrb	r3, [r0, #9]
    a914:	e5c03003 	strb	r3, [r0, #3]
}
    a918:	e12fff1e 	bx	lr

0000a91c <LD_B_IXl>:


static void LD_B_IXl (Z80Context* ctx)
{
	BR.B = BR.IXl;
    a91c:	e5d03008 	ldrb	r3, [r0, #8]
    a920:	e5c03003 	strb	r3, [r0, #3]
}
    a924:	e12fff1e 	bx	lr

0000a928 <LD_B_IYh>:


static void LD_B_IYh (Z80Context* ctx)
{
	BR.B = BR.IYh;
    a928:	e5d0300b 	ldrb	r3, [r0, #11]
    a92c:	e5c03003 	strb	r3, [r0, #3]
}
    a930:	e12fff1e 	bx	lr

0000a934 <LD_B_IYl>:


static void LD_B_IYl (Z80Context* ctx)
{
	BR.B = BR.IYl;
    a934:	e5d0300a 	ldrb	r3, [r0, #10]
    a938:	e5c03003 	strb	r3, [r0, #3]
}
    a93c:	e12fff1e 	bx	lr

0000a940 <LD_B_L>:


static void LD_B_L (Z80Context* ctx)
{
	BR.B = BR.L;
    a940:	e5d03006 	ldrb	r3, [r0, #6]
    a944:	e5c03003 	strb	r3, [r0, #3]
}
    a948:	e12fff1e 	bx	lr

0000a94c <LD_B_n>:


static void LD_B_n (Z80Context* ctx)
{
	BR.B = read8(ctx, ctx->PC++);
    a94c:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 3;
    a950:	e5903040 	ldr	r3, [r0, #64]	; 0x40
    a954:	e2812001 	add	r2, r1, #1
    a958:	e2833003 	add	r3, r3, #3
{
    a95c:	e92d4010 	push	{r4, lr}
    a960:	e5803040 	str	r3, [r0, #64]	; 0x40
    a964:	e1a04000 	mov	r4, r0
	BR.B = read8(ctx, ctx->PC++);
    a968:	e1c021bc 	strh	r2, [r0, #28]
	return ctx->memRead(ctx->memParam, addr);	
    a96c:	e5903024 	ldr	r3, [r0, #36]	; 0x24
    a970:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
    a974:	e12fff33 	blx	r3
    a978:	e5c40003 	strb	r0, [r4, #3]
	
}
    a97c:	e8bd8010 	pop	{r4, pc}

0000a980 <LD_B_RES_0_off_IX_d>:


static void LD_B_RES_0_off_IX_d (Z80Context* ctx)
{
	ctx->tstates += 2;
	char off = read8(ctx, ctx->PC++);
    a980:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
    a984:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	char off = read8(ctx, ctx->PC++);
    a988:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
    a98c:	e2833005 	add	r3, r3, #5
{
    a990:	e92d4070 	push	{r4, r5, r6, lr}
    a994:	e1a04000 	mov	r4, r0
	char off = read8(ctx, ctx->PC++);
    a998:	e1c021bc 	strh	r2, [r0, #28]
    a99c:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    a9a0:	e5903024 	ldr	r3, [r0, #36]	; 0x24
    a9a4:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
    a9a8:	e12fff33 	blx	r3
	ctx->tstates += 3;
    a9ac:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	BR.B = doSetRes(ctx, SR_RES, 0, read8(ctx, WR.IX + off));
    a9b0:	e1d410b8 	ldrh	r1, [r4, #8]
    a9b4:	e6ff5070 	uxth	r5, r0
    a9b8:	e2833003 	add	r3, r3, #3
    a9bc:	e0851001 	add	r1, r5, r1
    a9c0:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    a9c4:	e6ff1071 	uxth	r1, r1
    a9c8:	e5943024 	ldr	r3, [r4, #36]	; 0x24
    a9cc:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    a9d0:	e12fff33 	blx	r3
	ctx->tstates += 3;
    a9d4:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	write8(ctx, WR.IX + off, BR.B);	
    a9d8:	e1d410b8 	ldrh	r1, [r4, #8]
		val &= ~(1 << pos);
    a9dc:	e20020fe 	and	r2, r0, #254	; 0xfe
    a9e0:	e0851001 	add	r1, r5, r1
	ctx->tstates += 3;
    a9e4:	e2833003 	add	r3, r3, #3
    a9e8:	e5843040 	str	r3, [r4, #64]	; 0x40
	BR.B = doSetRes(ctx, SR_RES, 0, read8(ctx, WR.IX + off));
    a9ec:	e5c42003 	strb	r2, [r4, #3]
	ctx->memWrite(ctx->memParam, addr, val);	
    a9f0:	e5943028 	ldr	r3, [r4, #40]	; 0x28
    a9f4:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    a9f8:	e6ff1071 	uxth	r1, r1
}
    a9fc:	e8bd4070 	pop	{r4, r5, r6, lr}
    aa00:	e12fff13 	bx	r3

0000aa04 <LD_B_RES_0_off_IY_d>:


static void LD_B_RES_0_off_IY_d (Z80Context* ctx)
{
	ctx->tstates += 2;
	char off = read8(ctx, ctx->PC++);
    aa04:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
    aa08:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	char off = read8(ctx, ctx->PC++);
    aa0c:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
    aa10:	e2833005 	add	r3, r3, #5
{
    aa14:	e92d4070 	push	{r4, r5, r6, lr}
    aa18:	e1a04000 	mov	r4, r0
	char off = read8(ctx, ctx->PC++);
    aa1c:	e1c021bc 	strh	r2, [r0, #28]
    aa20:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    aa24:	e5903024 	ldr	r3, [r0, #36]	; 0x24
    aa28:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
    aa2c:	e12fff33 	blx	r3
	ctx->tstates += 3;
    aa30:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	BR.B = doSetRes(ctx, SR_RES, 0, read8(ctx, WR.IY + off));
    aa34:	e1d410ba 	ldrh	r1, [r4, #10]
    aa38:	e6ff5070 	uxth	r5, r0
    aa3c:	e2833003 	add	r3, r3, #3
    aa40:	e0851001 	add	r1, r5, r1
    aa44:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    aa48:	e6ff1071 	uxth	r1, r1
    aa4c:	e5943024 	ldr	r3, [r4, #36]	; 0x24
    aa50:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    aa54:	e12fff33 	blx	r3
	ctx->tstates += 3;
    aa58:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	write8(ctx, WR.IY + off, BR.B);	
    aa5c:	e1d410ba 	ldrh	r1, [r4, #10]
		val &= ~(1 << pos);
    aa60:	e20020fe 	and	r2, r0, #254	; 0xfe
    aa64:	e0851001 	add	r1, r5, r1
	ctx->tstates += 3;
    aa68:	e2833003 	add	r3, r3, #3
    aa6c:	e5843040 	str	r3, [r4, #64]	; 0x40
	BR.B = doSetRes(ctx, SR_RES, 0, read8(ctx, WR.IY + off));
    aa70:	e5c42003 	strb	r2, [r4, #3]
	ctx->memWrite(ctx->memParam, addr, val);	
    aa74:	e5943028 	ldr	r3, [r4, #40]	; 0x28
    aa78:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    aa7c:	e6ff1071 	uxth	r1, r1
}
    aa80:	e8bd4070 	pop	{r4, r5, r6, lr}
    aa84:	e12fff13 	bx	r3

0000aa88 <LD_B_RES_1_off_IX_d>:


static void LD_B_RES_1_off_IX_d (Z80Context* ctx)
{
	ctx->tstates += 2;
	char off = read8(ctx, ctx->PC++);
    aa88:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
    aa8c:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	char off = read8(ctx, ctx->PC++);
    aa90:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
    aa94:	e2833005 	add	r3, r3, #5
{
    aa98:	e92d4070 	push	{r4, r5, r6, lr}
    aa9c:	e1a04000 	mov	r4, r0
	char off = read8(ctx, ctx->PC++);
    aaa0:	e1c021bc 	strh	r2, [r0, #28]
    aaa4:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    aaa8:	e5903024 	ldr	r3, [r0, #36]	; 0x24
    aaac:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
    aab0:	e12fff33 	blx	r3
	ctx->tstates += 3;
    aab4:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	BR.B = doSetRes(ctx, SR_RES, 1, read8(ctx, WR.IX + off));
    aab8:	e1d410b8 	ldrh	r1, [r4, #8]
    aabc:	e6ff5070 	uxth	r5, r0
    aac0:	e2833003 	add	r3, r3, #3
    aac4:	e0851001 	add	r1, r5, r1
    aac8:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    aacc:	e6ff1071 	uxth	r1, r1
    aad0:	e5943024 	ldr	r3, [r4, #36]	; 0x24
    aad4:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    aad8:	e12fff33 	blx	r3
	ctx->tstates += 3;
    aadc:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	write8(ctx, WR.IX + off, BR.B);	
    aae0:	e1d410b8 	ldrh	r1, [r4, #8]
		val &= ~(1 << pos);
    aae4:	e20020fd 	and	r2, r0, #253	; 0xfd
    aae8:	e0851001 	add	r1, r5, r1
	ctx->tstates += 3;
    aaec:	e2833003 	add	r3, r3, #3
    aaf0:	e5843040 	str	r3, [r4, #64]	; 0x40
	BR.B = doSetRes(ctx, SR_RES, 1, read8(ctx, WR.IX + off));
    aaf4:	e5c42003 	strb	r2, [r4, #3]
	ctx->memWrite(ctx->memParam, addr, val);	
    aaf8:	e5943028 	ldr	r3, [r4, #40]	; 0x28
    aafc:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    ab00:	e6ff1071 	uxth	r1, r1
}
    ab04:	e8bd4070 	pop	{r4, r5, r6, lr}
    ab08:	e12fff13 	bx	r3

0000ab0c <LD_B_RES_1_off_IY_d>:


static void LD_B_RES_1_off_IY_d (Z80Context* ctx)
{
	ctx->tstates += 2;
	char off = read8(ctx, ctx->PC++);
    ab0c:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
    ab10:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	char off = read8(ctx, ctx->PC++);
    ab14:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
    ab18:	e2833005 	add	r3, r3, #5
{
    ab1c:	e92d4070 	push	{r4, r5, r6, lr}
    ab20:	e1a04000 	mov	r4, r0
	char off = read8(ctx, ctx->PC++);
    ab24:	e1c021bc 	strh	r2, [r0, #28]
    ab28:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    ab2c:	e5903024 	ldr	r3, [r0, #36]	; 0x24
    ab30:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
    ab34:	e12fff33 	blx	r3
	ctx->tstates += 3;
    ab38:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	BR.B = doSetRes(ctx, SR_RES, 1, read8(ctx, WR.IY + off));
    ab3c:	e1d410ba 	ldrh	r1, [r4, #10]
    ab40:	e6ff5070 	uxth	r5, r0
    ab44:	e2833003 	add	r3, r3, #3
    ab48:	e0851001 	add	r1, r5, r1
    ab4c:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    ab50:	e6ff1071 	uxth	r1, r1
    ab54:	e5943024 	ldr	r3, [r4, #36]	; 0x24
    ab58:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    ab5c:	e12fff33 	blx	r3
	ctx->tstates += 3;
    ab60:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	write8(ctx, WR.IY + off, BR.B);	
    ab64:	e1d410ba 	ldrh	r1, [r4, #10]
		val &= ~(1 << pos);
    ab68:	e20020fd 	and	r2, r0, #253	; 0xfd
    ab6c:	e0851001 	add	r1, r5, r1
	ctx->tstates += 3;
    ab70:	e2833003 	add	r3, r3, #3
    ab74:	e5843040 	str	r3, [r4, #64]	; 0x40
	BR.B = doSetRes(ctx, SR_RES, 1, read8(ctx, WR.IY + off));
    ab78:	e5c42003 	strb	r2, [r4, #3]
	ctx->memWrite(ctx->memParam, addr, val);	
    ab7c:	e5943028 	ldr	r3, [r4, #40]	; 0x28
    ab80:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    ab84:	e6ff1071 	uxth	r1, r1
}
    ab88:	e8bd4070 	pop	{r4, r5, r6, lr}
    ab8c:	e12fff13 	bx	r3

0000ab90 <LD_B_RES_2_off_IX_d>:


static void LD_B_RES_2_off_IX_d (Z80Context* ctx)
{
	ctx->tstates += 2;
	char off = read8(ctx, ctx->PC++);
    ab90:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
    ab94:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	char off = read8(ctx, ctx->PC++);
    ab98:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
    ab9c:	e2833005 	add	r3, r3, #5
{
    aba0:	e92d4070 	push	{r4, r5, r6, lr}
    aba4:	e1a04000 	mov	r4, r0
	char off = read8(ctx, ctx->PC++);
    aba8:	e1c021bc 	strh	r2, [r0, #28]
    abac:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    abb0:	e5903024 	ldr	r3, [r0, #36]	; 0x24
    abb4:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
    abb8:	e12fff33 	blx	r3
	ctx->tstates += 3;
    abbc:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	BR.B = doSetRes(ctx, SR_RES, 2, read8(ctx, WR.IX + off));
    abc0:	e1d410b8 	ldrh	r1, [r4, #8]
    abc4:	e6ff5070 	uxth	r5, r0
    abc8:	e2833003 	add	r3, r3, #3
    abcc:	e0851001 	add	r1, r5, r1
    abd0:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    abd4:	e6ff1071 	uxth	r1, r1
    abd8:	e5943024 	ldr	r3, [r4, #36]	; 0x24
    abdc:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    abe0:	e12fff33 	blx	r3
	ctx->tstates += 3;
    abe4:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	write8(ctx, WR.IX + off, BR.B);	
    abe8:	e1d410b8 	ldrh	r1, [r4, #8]
		val &= ~(1 << pos);
    abec:	e20020fb 	and	r2, r0, #251	; 0xfb
    abf0:	e0851001 	add	r1, r5, r1
	ctx->tstates += 3;
    abf4:	e2833003 	add	r3, r3, #3
    abf8:	e5843040 	str	r3, [r4, #64]	; 0x40
	BR.B = doSetRes(ctx, SR_RES, 2, read8(ctx, WR.IX + off));
    abfc:	e5c42003 	strb	r2, [r4, #3]
	ctx->memWrite(ctx->memParam, addr, val);	
    ac00:	e5943028 	ldr	r3, [r4, #40]	; 0x28
    ac04:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    ac08:	e6ff1071 	uxth	r1, r1
}
    ac0c:	e8bd4070 	pop	{r4, r5, r6, lr}
    ac10:	e12fff13 	bx	r3

0000ac14 <LD_B_RES_2_off_IY_d>:


static void LD_B_RES_2_off_IY_d (Z80Context* ctx)
{
	ctx->tstates += 2;
	char off = read8(ctx, ctx->PC++);
    ac14:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
    ac18:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	char off = read8(ctx, ctx->PC++);
    ac1c:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
    ac20:	e2833005 	add	r3, r3, #5
{
    ac24:	e92d4070 	push	{r4, r5, r6, lr}
    ac28:	e1a04000 	mov	r4, r0
	char off = read8(ctx, ctx->PC++);
    ac2c:	e1c021bc 	strh	r2, [r0, #28]
    ac30:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    ac34:	e5903024 	ldr	r3, [r0, #36]	; 0x24
    ac38:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
    ac3c:	e12fff33 	blx	r3
	ctx->tstates += 3;
    ac40:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	BR.B = doSetRes(ctx, SR_RES, 2, read8(ctx, WR.IY + off));
    ac44:	e1d410ba 	ldrh	r1, [r4, #10]
    ac48:	e6ff5070 	uxth	r5, r0
    ac4c:	e2833003 	add	r3, r3, #3
    ac50:	e0851001 	add	r1, r5, r1
    ac54:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    ac58:	e6ff1071 	uxth	r1, r1
    ac5c:	e5943024 	ldr	r3, [r4, #36]	; 0x24
    ac60:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    ac64:	e12fff33 	blx	r3
	ctx->tstates += 3;
    ac68:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	write8(ctx, WR.IY + off, BR.B);	
    ac6c:	e1d410ba 	ldrh	r1, [r4, #10]
		val &= ~(1 << pos);
    ac70:	e20020fb 	and	r2, r0, #251	; 0xfb
    ac74:	e0851001 	add	r1, r5, r1
	ctx->tstates += 3;
    ac78:	e2833003 	add	r3, r3, #3
    ac7c:	e5843040 	str	r3, [r4, #64]	; 0x40
	BR.B = doSetRes(ctx, SR_RES, 2, read8(ctx, WR.IY + off));
    ac80:	e5c42003 	strb	r2, [r4, #3]
	ctx->memWrite(ctx->memParam, addr, val);	
    ac84:	e5943028 	ldr	r3, [r4, #40]	; 0x28
    ac88:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    ac8c:	e6ff1071 	uxth	r1, r1
}
    ac90:	e8bd4070 	pop	{r4, r5, r6, lr}
    ac94:	e12fff13 	bx	r3

0000ac98 <LD_B_RES_3_off_IX_d>:


static void LD_B_RES_3_off_IX_d (Z80Context* ctx)
{
	ctx->tstates += 2;
	char off = read8(ctx, ctx->PC++);
    ac98:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
    ac9c:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	char off = read8(ctx, ctx->PC++);
    aca0:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
    aca4:	e2833005 	add	r3, r3, #5
{
    aca8:	e92d4070 	push	{r4, r5, r6, lr}
    acac:	e1a04000 	mov	r4, r0
	char off = read8(ctx, ctx->PC++);
    acb0:	e1c021bc 	strh	r2, [r0, #28]
    acb4:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    acb8:	e5903024 	ldr	r3, [r0, #36]	; 0x24
    acbc:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
    acc0:	e12fff33 	blx	r3
	ctx->tstates += 3;
    acc4:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	BR.B = doSetRes(ctx, SR_RES, 3, read8(ctx, WR.IX + off));
    acc8:	e1d410b8 	ldrh	r1, [r4, #8]
    accc:	e6ff5070 	uxth	r5, r0
    acd0:	e2833003 	add	r3, r3, #3
    acd4:	e0851001 	add	r1, r5, r1
    acd8:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    acdc:	e6ff1071 	uxth	r1, r1
    ace0:	e5943024 	ldr	r3, [r4, #36]	; 0x24
    ace4:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    ace8:	e12fff33 	blx	r3
	ctx->tstates += 3;
    acec:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	write8(ctx, WR.IX + off, BR.B);	
    acf0:	e1d410b8 	ldrh	r1, [r4, #8]
		val &= ~(1 << pos);
    acf4:	e20020f7 	and	r2, r0, #247	; 0xf7
    acf8:	e0851001 	add	r1, r5, r1
	ctx->tstates += 3;
    acfc:	e2833003 	add	r3, r3, #3
    ad00:	e5843040 	str	r3, [r4, #64]	; 0x40
	BR.B = doSetRes(ctx, SR_RES, 3, read8(ctx, WR.IX + off));
    ad04:	e5c42003 	strb	r2, [r4, #3]
	ctx->memWrite(ctx->memParam, addr, val);	
    ad08:	e5943028 	ldr	r3, [r4, #40]	; 0x28
    ad0c:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    ad10:	e6ff1071 	uxth	r1, r1
}
    ad14:	e8bd4070 	pop	{r4, r5, r6, lr}
    ad18:	e12fff13 	bx	r3

0000ad1c <LD_B_RES_3_off_IY_d>:


static void LD_B_RES_3_off_IY_d (Z80Context* ctx)
{
	ctx->tstates += 2;
	char off = read8(ctx, ctx->PC++);
    ad1c:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
    ad20:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	char off = read8(ctx, ctx->PC++);
    ad24:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
    ad28:	e2833005 	add	r3, r3, #5
{
    ad2c:	e92d4070 	push	{r4, r5, r6, lr}
    ad30:	e1a04000 	mov	r4, r0
	char off = read8(ctx, ctx->PC++);
    ad34:	e1c021bc 	strh	r2, [r0, #28]
    ad38:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    ad3c:	e5903024 	ldr	r3, [r0, #36]	; 0x24
    ad40:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
    ad44:	e12fff33 	blx	r3
	ctx->tstates += 3;
    ad48:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	BR.B = doSetRes(ctx, SR_RES, 3, read8(ctx, WR.IY + off));
    ad4c:	e1d410ba 	ldrh	r1, [r4, #10]
    ad50:	e6ff5070 	uxth	r5, r0
    ad54:	e2833003 	add	r3, r3, #3
    ad58:	e0851001 	add	r1, r5, r1
    ad5c:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    ad60:	e6ff1071 	uxth	r1, r1
    ad64:	e5943024 	ldr	r3, [r4, #36]	; 0x24
    ad68:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    ad6c:	e12fff33 	blx	r3
	ctx->tstates += 3;
    ad70:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	write8(ctx, WR.IY + off, BR.B);	
    ad74:	e1d410ba 	ldrh	r1, [r4, #10]
		val &= ~(1 << pos);
    ad78:	e20020f7 	and	r2, r0, #247	; 0xf7
    ad7c:	e0851001 	add	r1, r5, r1
	ctx->tstates += 3;
    ad80:	e2833003 	add	r3, r3, #3
    ad84:	e5843040 	str	r3, [r4, #64]	; 0x40
	BR.B = doSetRes(ctx, SR_RES, 3, read8(ctx, WR.IY + off));
    ad88:	e5c42003 	strb	r2, [r4, #3]
	ctx->memWrite(ctx->memParam, addr, val);	
    ad8c:	e5943028 	ldr	r3, [r4, #40]	; 0x28
    ad90:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    ad94:	e6ff1071 	uxth	r1, r1
}
    ad98:	e8bd4070 	pop	{r4, r5, r6, lr}
    ad9c:	e12fff13 	bx	r3

0000ada0 <LD_B_RES_4_off_IX_d>:


static void LD_B_RES_4_off_IX_d (Z80Context* ctx)
{
	ctx->tstates += 2;
	char off = read8(ctx, ctx->PC++);
    ada0:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
    ada4:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	char off = read8(ctx, ctx->PC++);
    ada8:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
    adac:	e2833005 	add	r3, r3, #5
{
    adb0:	e92d4070 	push	{r4, r5, r6, lr}
    adb4:	e1a04000 	mov	r4, r0
	char off = read8(ctx, ctx->PC++);
    adb8:	e1c021bc 	strh	r2, [r0, #28]
    adbc:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    adc0:	e5903024 	ldr	r3, [r0, #36]	; 0x24
    adc4:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
    adc8:	e12fff33 	blx	r3
	ctx->tstates += 3;
    adcc:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	BR.B = doSetRes(ctx, SR_RES, 4, read8(ctx, WR.IX + off));
    add0:	e1d410b8 	ldrh	r1, [r4, #8]
    add4:	e6ff5070 	uxth	r5, r0
    add8:	e2833003 	add	r3, r3, #3
    addc:	e0851001 	add	r1, r5, r1
    ade0:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    ade4:	e6ff1071 	uxth	r1, r1
    ade8:	e5943024 	ldr	r3, [r4, #36]	; 0x24
    adec:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    adf0:	e12fff33 	blx	r3
	ctx->tstates += 3;
    adf4:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	write8(ctx, WR.IX + off, BR.B);	
    adf8:	e1d410b8 	ldrh	r1, [r4, #8]
		val &= ~(1 << pos);
    adfc:	e20020ef 	and	r2, r0, #239	; 0xef
    ae00:	e0851001 	add	r1, r5, r1
	ctx->tstates += 3;
    ae04:	e2833003 	add	r3, r3, #3
    ae08:	e5843040 	str	r3, [r4, #64]	; 0x40
	BR.B = doSetRes(ctx, SR_RES, 4, read8(ctx, WR.IX + off));
    ae0c:	e5c42003 	strb	r2, [r4, #3]
	ctx->memWrite(ctx->memParam, addr, val);	
    ae10:	e5943028 	ldr	r3, [r4, #40]	; 0x28
    ae14:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    ae18:	e6ff1071 	uxth	r1, r1
}
    ae1c:	e8bd4070 	pop	{r4, r5, r6, lr}
    ae20:	e12fff13 	bx	r3

0000ae24 <LD_B_RES_4_off_IY_d>:


static void LD_B_RES_4_off_IY_d (Z80Context* ctx)
{
	ctx->tstates += 2;
	char off = read8(ctx, ctx->PC++);
    ae24:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
    ae28:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	char off = read8(ctx, ctx->PC++);
    ae2c:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
    ae30:	e2833005 	add	r3, r3, #5
{
    ae34:	e92d4070 	push	{r4, r5, r6, lr}
    ae38:	e1a04000 	mov	r4, r0
	char off = read8(ctx, ctx->PC++);
    ae3c:	e1c021bc 	strh	r2, [r0, #28]
    ae40:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    ae44:	e5903024 	ldr	r3, [r0, #36]	; 0x24
    ae48:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
    ae4c:	e12fff33 	blx	r3
	ctx->tstates += 3;
    ae50:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	BR.B = doSetRes(ctx, SR_RES, 4, read8(ctx, WR.IY + off));
    ae54:	e1d410ba 	ldrh	r1, [r4, #10]
    ae58:	e6ff5070 	uxth	r5, r0
    ae5c:	e2833003 	add	r3, r3, #3
    ae60:	e0851001 	add	r1, r5, r1
    ae64:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    ae68:	e6ff1071 	uxth	r1, r1
    ae6c:	e5943024 	ldr	r3, [r4, #36]	; 0x24
    ae70:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    ae74:	e12fff33 	blx	r3
	ctx->tstates += 3;
    ae78:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	write8(ctx, WR.IY + off, BR.B);	
    ae7c:	e1d410ba 	ldrh	r1, [r4, #10]
		val &= ~(1 << pos);
    ae80:	e20020ef 	and	r2, r0, #239	; 0xef
    ae84:	e0851001 	add	r1, r5, r1
	ctx->tstates += 3;
    ae88:	e2833003 	add	r3, r3, #3
    ae8c:	e5843040 	str	r3, [r4, #64]	; 0x40
	BR.B = doSetRes(ctx, SR_RES, 4, read8(ctx, WR.IY + off));
    ae90:	e5c42003 	strb	r2, [r4, #3]
	ctx->memWrite(ctx->memParam, addr, val);	
    ae94:	e5943028 	ldr	r3, [r4, #40]	; 0x28
    ae98:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    ae9c:	e6ff1071 	uxth	r1, r1
}
    aea0:	e8bd4070 	pop	{r4, r5, r6, lr}
    aea4:	e12fff13 	bx	r3

0000aea8 <LD_B_RES_5_off_IX_d>:


static void LD_B_RES_5_off_IX_d (Z80Context* ctx)
{
	ctx->tstates += 2;
	char off = read8(ctx, ctx->PC++);
    aea8:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
    aeac:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	char off = read8(ctx, ctx->PC++);
    aeb0:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
    aeb4:	e2833005 	add	r3, r3, #5
{
    aeb8:	e92d4070 	push	{r4, r5, r6, lr}
    aebc:	e1a04000 	mov	r4, r0
	char off = read8(ctx, ctx->PC++);
    aec0:	e1c021bc 	strh	r2, [r0, #28]
    aec4:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    aec8:	e5903024 	ldr	r3, [r0, #36]	; 0x24
    aecc:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
    aed0:	e12fff33 	blx	r3
	ctx->tstates += 3;
    aed4:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	BR.B = doSetRes(ctx, SR_RES, 5, read8(ctx, WR.IX + off));
    aed8:	e1d410b8 	ldrh	r1, [r4, #8]
    aedc:	e6ff5070 	uxth	r5, r0
    aee0:	e2833003 	add	r3, r3, #3
    aee4:	e0851001 	add	r1, r5, r1
    aee8:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    aeec:	e6ff1071 	uxth	r1, r1
    aef0:	e5943024 	ldr	r3, [r4, #36]	; 0x24
    aef4:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    aef8:	e12fff33 	blx	r3
	ctx->tstates += 3;
    aefc:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	write8(ctx, WR.IX + off, BR.B);	
    af00:	e1d410b8 	ldrh	r1, [r4, #8]
		val &= ~(1 << pos);
    af04:	e20020df 	and	r2, r0, #223	; 0xdf
    af08:	e0851001 	add	r1, r5, r1
	ctx->tstates += 3;
    af0c:	e2833003 	add	r3, r3, #3
    af10:	e5843040 	str	r3, [r4, #64]	; 0x40
	BR.B = doSetRes(ctx, SR_RES, 5, read8(ctx, WR.IX + off));
    af14:	e5c42003 	strb	r2, [r4, #3]
	ctx->memWrite(ctx->memParam, addr, val);	
    af18:	e5943028 	ldr	r3, [r4, #40]	; 0x28
    af1c:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    af20:	e6ff1071 	uxth	r1, r1
}
    af24:	e8bd4070 	pop	{r4, r5, r6, lr}
    af28:	e12fff13 	bx	r3

0000af2c <LD_B_RES_5_off_IY_d>:


static void LD_B_RES_5_off_IY_d (Z80Context* ctx)
{
	ctx->tstates += 2;
	char off = read8(ctx, ctx->PC++);
    af2c:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
    af30:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	char off = read8(ctx, ctx->PC++);
    af34:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
    af38:	e2833005 	add	r3, r3, #5
{
    af3c:	e92d4070 	push	{r4, r5, r6, lr}
    af40:	e1a04000 	mov	r4, r0
	char off = read8(ctx, ctx->PC++);
    af44:	e1c021bc 	strh	r2, [r0, #28]
    af48:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    af4c:	e5903024 	ldr	r3, [r0, #36]	; 0x24
    af50:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
    af54:	e12fff33 	blx	r3
	ctx->tstates += 3;
    af58:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	BR.B = doSetRes(ctx, SR_RES, 5, read8(ctx, WR.IY + off));
    af5c:	e1d410ba 	ldrh	r1, [r4, #10]
    af60:	e6ff5070 	uxth	r5, r0
    af64:	e2833003 	add	r3, r3, #3
    af68:	e0851001 	add	r1, r5, r1
    af6c:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    af70:	e6ff1071 	uxth	r1, r1
    af74:	e5943024 	ldr	r3, [r4, #36]	; 0x24
    af78:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    af7c:	e12fff33 	blx	r3
	ctx->tstates += 3;
    af80:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	write8(ctx, WR.IY + off, BR.B);	
    af84:	e1d410ba 	ldrh	r1, [r4, #10]
		val &= ~(1 << pos);
    af88:	e20020df 	and	r2, r0, #223	; 0xdf
    af8c:	e0851001 	add	r1, r5, r1
	ctx->tstates += 3;
    af90:	e2833003 	add	r3, r3, #3
    af94:	e5843040 	str	r3, [r4, #64]	; 0x40
	BR.B = doSetRes(ctx, SR_RES, 5, read8(ctx, WR.IY + off));
    af98:	e5c42003 	strb	r2, [r4, #3]
	ctx->memWrite(ctx->memParam, addr, val);	
    af9c:	e5943028 	ldr	r3, [r4, #40]	; 0x28
    afa0:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    afa4:	e6ff1071 	uxth	r1, r1
}
    afa8:	e8bd4070 	pop	{r4, r5, r6, lr}
    afac:	e12fff13 	bx	r3

0000afb0 <LD_B_RES_6_off_IX_d>:


static void LD_B_RES_6_off_IX_d (Z80Context* ctx)
{
	ctx->tstates += 2;
	char off = read8(ctx, ctx->PC++);
    afb0:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
    afb4:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	char off = read8(ctx, ctx->PC++);
    afb8:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
    afbc:	e2833005 	add	r3, r3, #5
{
    afc0:	e92d4070 	push	{r4, r5, r6, lr}
    afc4:	e1a04000 	mov	r4, r0
	char off = read8(ctx, ctx->PC++);
    afc8:	e1c021bc 	strh	r2, [r0, #28]
    afcc:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    afd0:	e5903024 	ldr	r3, [r0, #36]	; 0x24
    afd4:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
    afd8:	e12fff33 	blx	r3
	ctx->tstates += 3;
    afdc:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	BR.B = doSetRes(ctx, SR_RES, 6, read8(ctx, WR.IX + off));
    afe0:	e1d410b8 	ldrh	r1, [r4, #8]
    afe4:	e6ff5070 	uxth	r5, r0
    afe8:	e2833003 	add	r3, r3, #3
    afec:	e0851001 	add	r1, r5, r1
    aff0:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    aff4:	e6ff1071 	uxth	r1, r1
    aff8:	e5943024 	ldr	r3, [r4, #36]	; 0x24
    affc:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    b000:	e12fff33 	blx	r3
	ctx->tstates += 3;
    b004:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	write8(ctx, WR.IX + off, BR.B);	
    b008:	e1d410b8 	ldrh	r1, [r4, #8]
		val &= ~(1 << pos);
    b00c:	e20020bf 	and	r2, r0, #191	; 0xbf
    b010:	e0851001 	add	r1, r5, r1
	ctx->tstates += 3;
    b014:	e2833003 	add	r3, r3, #3
    b018:	e5843040 	str	r3, [r4, #64]	; 0x40
	BR.B = doSetRes(ctx, SR_RES, 6, read8(ctx, WR.IX + off));
    b01c:	e5c42003 	strb	r2, [r4, #3]
	ctx->memWrite(ctx->memParam, addr, val);	
    b020:	e5943028 	ldr	r3, [r4, #40]	; 0x28
    b024:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    b028:	e6ff1071 	uxth	r1, r1
}
    b02c:	e8bd4070 	pop	{r4, r5, r6, lr}
    b030:	e12fff13 	bx	r3

0000b034 <LD_B_RES_6_off_IY_d>:


static void LD_B_RES_6_off_IY_d (Z80Context* ctx)
{
	ctx->tstates += 2;
	char off = read8(ctx, ctx->PC++);
    b034:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
    b038:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	char off = read8(ctx, ctx->PC++);
    b03c:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
    b040:	e2833005 	add	r3, r3, #5
{
    b044:	e92d4070 	push	{r4, r5, r6, lr}
    b048:	e1a04000 	mov	r4, r0
	char off = read8(ctx, ctx->PC++);
    b04c:	e1c021bc 	strh	r2, [r0, #28]
    b050:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    b054:	e5903024 	ldr	r3, [r0, #36]	; 0x24
    b058:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
    b05c:	e12fff33 	blx	r3
	ctx->tstates += 3;
    b060:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	BR.B = doSetRes(ctx, SR_RES, 6, read8(ctx, WR.IY + off));
    b064:	e1d410ba 	ldrh	r1, [r4, #10]
    b068:	e6ff5070 	uxth	r5, r0
    b06c:	e2833003 	add	r3, r3, #3
    b070:	e0851001 	add	r1, r5, r1
    b074:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    b078:	e6ff1071 	uxth	r1, r1
    b07c:	e5943024 	ldr	r3, [r4, #36]	; 0x24
    b080:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    b084:	e12fff33 	blx	r3
	ctx->tstates += 3;
    b088:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	write8(ctx, WR.IY + off, BR.B);	
    b08c:	e1d410ba 	ldrh	r1, [r4, #10]
		val &= ~(1 << pos);
    b090:	e20020bf 	and	r2, r0, #191	; 0xbf
    b094:	e0851001 	add	r1, r5, r1
	ctx->tstates += 3;
    b098:	e2833003 	add	r3, r3, #3
    b09c:	e5843040 	str	r3, [r4, #64]	; 0x40
	BR.B = doSetRes(ctx, SR_RES, 6, read8(ctx, WR.IY + off));
    b0a0:	e5c42003 	strb	r2, [r4, #3]
	ctx->memWrite(ctx->memParam, addr, val);	
    b0a4:	e5943028 	ldr	r3, [r4, #40]	; 0x28
    b0a8:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    b0ac:	e6ff1071 	uxth	r1, r1
}
    b0b0:	e8bd4070 	pop	{r4, r5, r6, lr}
    b0b4:	e12fff13 	bx	r3

0000b0b8 <LD_B_RES_7_off_IX_d>:


static void LD_B_RES_7_off_IX_d (Z80Context* ctx)
{
	ctx->tstates += 2;
	char off = read8(ctx, ctx->PC++);
    b0b8:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
    b0bc:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	char off = read8(ctx, ctx->PC++);
    b0c0:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
    b0c4:	e2833005 	add	r3, r3, #5
{
    b0c8:	e92d4070 	push	{r4, r5, r6, lr}
    b0cc:	e1a04000 	mov	r4, r0
	char off = read8(ctx, ctx->PC++);
    b0d0:	e1c021bc 	strh	r2, [r0, #28]
    b0d4:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    b0d8:	e5903024 	ldr	r3, [r0, #36]	; 0x24
    b0dc:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
    b0e0:	e12fff33 	blx	r3
	ctx->tstates += 3;
    b0e4:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	BR.B = doSetRes(ctx, SR_RES, 7, read8(ctx, WR.IX + off));
    b0e8:	e1d410b8 	ldrh	r1, [r4, #8]
    b0ec:	e6ff5070 	uxth	r5, r0
    b0f0:	e2833003 	add	r3, r3, #3
    b0f4:	e0851001 	add	r1, r5, r1
    b0f8:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    b0fc:	e6ff1071 	uxth	r1, r1
    b100:	e5943024 	ldr	r3, [r4, #36]	; 0x24
    b104:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    b108:	e12fff33 	blx	r3
	ctx->tstates += 3;
    b10c:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	write8(ctx, WR.IX + off, BR.B);	
    b110:	e1d410b8 	ldrh	r1, [r4, #8]
		val &= ~(1 << pos);
    b114:	e200207f 	and	r2, r0, #127	; 0x7f
    b118:	e0851001 	add	r1, r5, r1
	ctx->tstates += 3;
    b11c:	e2833003 	add	r3, r3, #3
    b120:	e5843040 	str	r3, [r4, #64]	; 0x40
	BR.B = doSetRes(ctx, SR_RES, 7, read8(ctx, WR.IX + off));
    b124:	e5c42003 	strb	r2, [r4, #3]
	ctx->memWrite(ctx->memParam, addr, val);	
    b128:	e5943028 	ldr	r3, [r4, #40]	; 0x28
    b12c:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    b130:	e6ff1071 	uxth	r1, r1
}
    b134:	e8bd4070 	pop	{r4, r5, r6, lr}
    b138:	e12fff13 	bx	r3

0000b13c <LD_B_RES_7_off_IY_d>:


static void LD_B_RES_7_off_IY_d (Z80Context* ctx)
{
	ctx->tstates += 2;
	char off = read8(ctx, ctx->PC++);
    b13c:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
    b140:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	char off = read8(ctx, ctx->PC++);
    b144:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
    b148:	e2833005 	add	r3, r3, #5
{
    b14c:	e92d4070 	push	{r4, r5, r6, lr}
    b150:	e1a04000 	mov	r4, r0
	char off = read8(ctx, ctx->PC++);
    b154:	e1c021bc 	strh	r2, [r0, #28]
    b158:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    b15c:	e5903024 	ldr	r3, [r0, #36]	; 0x24
    b160:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
    b164:	e12fff33 	blx	r3
	ctx->tstates += 3;
    b168:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	BR.B = doSetRes(ctx, SR_RES, 7, read8(ctx, WR.IY + off));
    b16c:	e1d410ba 	ldrh	r1, [r4, #10]
    b170:	e6ff5070 	uxth	r5, r0
    b174:	e2833003 	add	r3, r3, #3
    b178:	e0851001 	add	r1, r5, r1
    b17c:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    b180:	e6ff1071 	uxth	r1, r1
    b184:	e5943024 	ldr	r3, [r4, #36]	; 0x24
    b188:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    b18c:	e12fff33 	blx	r3
	ctx->tstates += 3;
    b190:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	write8(ctx, WR.IY + off, BR.B);	
    b194:	e1d410ba 	ldrh	r1, [r4, #10]
		val &= ~(1 << pos);
    b198:	e200207f 	and	r2, r0, #127	; 0x7f
    b19c:	e0851001 	add	r1, r5, r1
	ctx->tstates += 3;
    b1a0:	e2833003 	add	r3, r3, #3
    b1a4:	e5843040 	str	r3, [r4, #64]	; 0x40
	BR.B = doSetRes(ctx, SR_RES, 7, read8(ctx, WR.IY + off));
    b1a8:	e5c42003 	strb	r2, [r4, #3]
	ctx->memWrite(ctx->memParam, addr, val);	
    b1ac:	e5943028 	ldr	r3, [r4, #40]	; 0x28
    b1b0:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    b1b4:	e6ff1071 	uxth	r1, r1
}
    b1b8:	e8bd4070 	pop	{r4, r5, r6, lr}
    b1bc:	e12fff13 	bx	r3

0000b1c0 <LD_B_SET_0_off_IX_d>:


static void LD_B_SET_0_off_IX_d (Z80Context* ctx)
{
	ctx->tstates += 2;
	char off = read8(ctx, ctx->PC++);
    b1c0:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
    b1c4:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	char off = read8(ctx, ctx->PC++);
    b1c8:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
    b1cc:	e2833005 	add	r3, r3, #5
{
    b1d0:	e92d4070 	push	{r4, r5, r6, lr}
    b1d4:	e1a04000 	mov	r4, r0
	char off = read8(ctx, ctx->PC++);
    b1d8:	e1c021bc 	strh	r2, [r0, #28]
    b1dc:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    b1e0:	e5903024 	ldr	r3, [r0, #36]	; 0x24
    b1e4:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
    b1e8:	e12fff33 	blx	r3
	ctx->tstates += 3;
    b1ec:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	BR.B = doSetRes(ctx, SR_SET, 0, read8(ctx, WR.IX + off));
    b1f0:	e1d410b8 	ldrh	r1, [r4, #8]
    b1f4:	e6ff5070 	uxth	r5, r0
    b1f8:	e2833003 	add	r3, r3, #3
    b1fc:	e0851001 	add	r1, r5, r1
    b200:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    b204:	e6ff1071 	uxth	r1, r1
    b208:	e5943024 	ldr	r3, [r4, #36]	; 0x24
    b20c:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    b210:	e12fff33 	blx	r3
	ctx->tstates += 3;
    b214:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	write8(ctx, WR.IX + off, BR.B);	
    b218:	e1d410b8 	ldrh	r1, [r4, #8]
		val |= (1 << pos);
    b21c:	e3802001 	orr	r2, r0, #1
    b220:	e0851001 	add	r1, r5, r1
	ctx->tstates += 3;
    b224:	e2833003 	add	r3, r3, #3
		val |= (1 << pos);
    b228:	e6ef2072 	uxtb	r2, r2
	ctx->tstates += 3;
    b22c:	e5843040 	str	r3, [r4, #64]	; 0x40
	BR.B = doSetRes(ctx, SR_SET, 0, read8(ctx, WR.IX + off));
    b230:	e5c42003 	strb	r2, [r4, #3]
	ctx->memWrite(ctx->memParam, addr, val);	
    b234:	e5943028 	ldr	r3, [r4, #40]	; 0x28
    b238:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    b23c:	e6ff1071 	uxth	r1, r1
}
    b240:	e8bd4070 	pop	{r4, r5, r6, lr}
    b244:	e12fff13 	bx	r3

0000b248 <LD_B_SET_0_off_IY_d>:


static void LD_B_SET_0_off_IY_d (Z80Context* ctx)
{
	ctx->tstates += 2;
	char off = read8(ctx, ctx->PC++);
    b248:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
    b24c:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	char off = read8(ctx, ctx->PC++);
    b250:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
    b254:	e2833005 	add	r3, r3, #5
{
    b258:	e92d4070 	push	{r4, r5, r6, lr}
    b25c:	e1a04000 	mov	r4, r0
	char off = read8(ctx, ctx->PC++);
    b260:	e1c021bc 	strh	r2, [r0, #28]
    b264:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    b268:	e5903024 	ldr	r3, [r0, #36]	; 0x24
    b26c:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
    b270:	e12fff33 	blx	r3
	ctx->tstates += 3;
    b274:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	BR.B = doSetRes(ctx, SR_SET, 0, read8(ctx, WR.IY + off));
    b278:	e1d410ba 	ldrh	r1, [r4, #10]
    b27c:	e6ff5070 	uxth	r5, r0
    b280:	e2833003 	add	r3, r3, #3
    b284:	e0851001 	add	r1, r5, r1
    b288:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    b28c:	e6ff1071 	uxth	r1, r1
    b290:	e5943024 	ldr	r3, [r4, #36]	; 0x24
    b294:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    b298:	e12fff33 	blx	r3
	ctx->tstates += 3;
    b29c:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	write8(ctx, WR.IY + off, BR.B);	
    b2a0:	e1d410ba 	ldrh	r1, [r4, #10]
		val |= (1 << pos);
    b2a4:	e3802001 	orr	r2, r0, #1
    b2a8:	e0851001 	add	r1, r5, r1
	ctx->tstates += 3;
    b2ac:	e2833003 	add	r3, r3, #3
		val |= (1 << pos);
    b2b0:	e6ef2072 	uxtb	r2, r2
	ctx->tstates += 3;
    b2b4:	e5843040 	str	r3, [r4, #64]	; 0x40
	BR.B = doSetRes(ctx, SR_SET, 0, read8(ctx, WR.IY + off));
    b2b8:	e5c42003 	strb	r2, [r4, #3]
	ctx->memWrite(ctx->memParam, addr, val);	
    b2bc:	e5943028 	ldr	r3, [r4, #40]	; 0x28
    b2c0:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    b2c4:	e6ff1071 	uxth	r1, r1
}
    b2c8:	e8bd4070 	pop	{r4, r5, r6, lr}
    b2cc:	e12fff13 	bx	r3

0000b2d0 <LD_B_SET_1_off_IX_d>:


static void LD_B_SET_1_off_IX_d (Z80Context* ctx)
{
	ctx->tstates += 2;
	char off = read8(ctx, ctx->PC++);
    b2d0:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
    b2d4:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	char off = read8(ctx, ctx->PC++);
    b2d8:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
    b2dc:	e2833005 	add	r3, r3, #5
{
    b2e0:	e92d4070 	push	{r4, r5, r6, lr}
    b2e4:	e1a04000 	mov	r4, r0
	char off = read8(ctx, ctx->PC++);
    b2e8:	e1c021bc 	strh	r2, [r0, #28]
    b2ec:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    b2f0:	e5903024 	ldr	r3, [r0, #36]	; 0x24
    b2f4:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
    b2f8:	e12fff33 	blx	r3
	ctx->tstates += 3;
    b2fc:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	BR.B = doSetRes(ctx, SR_SET, 1, read8(ctx, WR.IX + off));
    b300:	e1d410b8 	ldrh	r1, [r4, #8]
    b304:	e6ff5070 	uxth	r5, r0
    b308:	e2833003 	add	r3, r3, #3
    b30c:	e0851001 	add	r1, r5, r1
    b310:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    b314:	e6ff1071 	uxth	r1, r1
    b318:	e5943024 	ldr	r3, [r4, #36]	; 0x24
    b31c:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    b320:	e12fff33 	blx	r3
	ctx->tstates += 3;
    b324:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	write8(ctx, WR.IX + off, BR.B);	
    b328:	e1d410b8 	ldrh	r1, [r4, #8]
		val |= (1 << pos);
    b32c:	e3802002 	orr	r2, r0, #2
    b330:	e0851001 	add	r1, r5, r1
	ctx->tstates += 3;
    b334:	e2833003 	add	r3, r3, #3
		val |= (1 << pos);
    b338:	e6ef2072 	uxtb	r2, r2
	ctx->tstates += 3;
    b33c:	e5843040 	str	r3, [r4, #64]	; 0x40
	BR.B = doSetRes(ctx, SR_SET, 1, read8(ctx, WR.IX + off));
    b340:	e5c42003 	strb	r2, [r4, #3]
	ctx->memWrite(ctx->memParam, addr, val);	
    b344:	e5943028 	ldr	r3, [r4, #40]	; 0x28
    b348:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    b34c:	e6ff1071 	uxth	r1, r1
}
    b350:	e8bd4070 	pop	{r4, r5, r6, lr}
    b354:	e12fff13 	bx	r3

0000b358 <LD_B_SET_1_off_IY_d>:


static void LD_B_SET_1_off_IY_d (Z80Context* ctx)
{
	ctx->tstates += 2;
	char off = read8(ctx, ctx->PC++);
    b358:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
    b35c:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	char off = read8(ctx, ctx->PC++);
    b360:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
    b364:	e2833005 	add	r3, r3, #5
{
    b368:	e92d4070 	push	{r4, r5, r6, lr}
    b36c:	e1a04000 	mov	r4, r0
	char off = read8(ctx, ctx->PC++);
    b370:	e1c021bc 	strh	r2, [r0, #28]
    b374:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    b378:	e5903024 	ldr	r3, [r0, #36]	; 0x24
    b37c:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
    b380:	e12fff33 	blx	r3
	ctx->tstates += 3;
    b384:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	BR.B = doSetRes(ctx, SR_SET, 1, read8(ctx, WR.IY + off));
    b388:	e1d410ba 	ldrh	r1, [r4, #10]
    b38c:	e6ff5070 	uxth	r5, r0
    b390:	e2833003 	add	r3, r3, #3
    b394:	e0851001 	add	r1, r5, r1
    b398:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    b39c:	e6ff1071 	uxth	r1, r1
    b3a0:	e5943024 	ldr	r3, [r4, #36]	; 0x24
    b3a4:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    b3a8:	e12fff33 	blx	r3
	ctx->tstates += 3;
    b3ac:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	write8(ctx, WR.IY + off, BR.B);	
    b3b0:	e1d410ba 	ldrh	r1, [r4, #10]
		val |= (1 << pos);
    b3b4:	e3802002 	orr	r2, r0, #2
    b3b8:	e0851001 	add	r1, r5, r1
	ctx->tstates += 3;
    b3bc:	e2833003 	add	r3, r3, #3
		val |= (1 << pos);
    b3c0:	e6ef2072 	uxtb	r2, r2
	ctx->tstates += 3;
    b3c4:	e5843040 	str	r3, [r4, #64]	; 0x40
	BR.B = doSetRes(ctx, SR_SET, 1, read8(ctx, WR.IY + off));
    b3c8:	e5c42003 	strb	r2, [r4, #3]
	ctx->memWrite(ctx->memParam, addr, val);	
    b3cc:	e5943028 	ldr	r3, [r4, #40]	; 0x28
    b3d0:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    b3d4:	e6ff1071 	uxth	r1, r1
}
    b3d8:	e8bd4070 	pop	{r4, r5, r6, lr}
    b3dc:	e12fff13 	bx	r3

0000b3e0 <LD_B_SET_2_off_IX_d>:


static void LD_B_SET_2_off_IX_d (Z80Context* ctx)
{
	ctx->tstates += 2;
	char off = read8(ctx, ctx->PC++);
    b3e0:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
    b3e4:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	char off = read8(ctx, ctx->PC++);
    b3e8:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
    b3ec:	e2833005 	add	r3, r3, #5
{
    b3f0:	e92d4070 	push	{r4, r5, r6, lr}
    b3f4:	e1a04000 	mov	r4, r0
	char off = read8(ctx, ctx->PC++);
    b3f8:	e1c021bc 	strh	r2, [r0, #28]
    b3fc:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    b400:	e5903024 	ldr	r3, [r0, #36]	; 0x24
    b404:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
    b408:	e12fff33 	blx	r3
	ctx->tstates += 3;
    b40c:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	BR.B = doSetRes(ctx, SR_SET, 2, read8(ctx, WR.IX + off));
    b410:	e1d410b8 	ldrh	r1, [r4, #8]
    b414:	e6ff5070 	uxth	r5, r0
    b418:	e2833003 	add	r3, r3, #3
    b41c:	e0851001 	add	r1, r5, r1
    b420:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    b424:	e6ff1071 	uxth	r1, r1
    b428:	e5943024 	ldr	r3, [r4, #36]	; 0x24
    b42c:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    b430:	e12fff33 	blx	r3
	ctx->tstates += 3;
    b434:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	write8(ctx, WR.IX + off, BR.B);	
    b438:	e1d410b8 	ldrh	r1, [r4, #8]
		val |= (1 << pos);
    b43c:	e3802004 	orr	r2, r0, #4
    b440:	e0851001 	add	r1, r5, r1
	ctx->tstates += 3;
    b444:	e2833003 	add	r3, r3, #3
		val |= (1 << pos);
    b448:	e6ef2072 	uxtb	r2, r2
	ctx->tstates += 3;
    b44c:	e5843040 	str	r3, [r4, #64]	; 0x40
	BR.B = doSetRes(ctx, SR_SET, 2, read8(ctx, WR.IX + off));
    b450:	e5c42003 	strb	r2, [r4, #3]
	ctx->memWrite(ctx->memParam, addr, val);	
    b454:	e5943028 	ldr	r3, [r4, #40]	; 0x28
    b458:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    b45c:	e6ff1071 	uxth	r1, r1
}
    b460:	e8bd4070 	pop	{r4, r5, r6, lr}
    b464:	e12fff13 	bx	r3

0000b468 <LD_B_SET_2_off_IY_d>:


static void LD_B_SET_2_off_IY_d (Z80Context* ctx)
{
	ctx->tstates += 2;
	char off = read8(ctx, ctx->PC++);
    b468:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
    b46c:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	char off = read8(ctx, ctx->PC++);
    b470:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
    b474:	e2833005 	add	r3, r3, #5
{
    b478:	e92d4070 	push	{r4, r5, r6, lr}
    b47c:	e1a04000 	mov	r4, r0
	char off = read8(ctx, ctx->PC++);
    b480:	e1c021bc 	strh	r2, [r0, #28]
    b484:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    b488:	e5903024 	ldr	r3, [r0, #36]	; 0x24
    b48c:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
    b490:	e12fff33 	blx	r3
	ctx->tstates += 3;
    b494:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	BR.B = doSetRes(ctx, SR_SET, 2, read8(ctx, WR.IY + off));
    b498:	e1d410ba 	ldrh	r1, [r4, #10]
    b49c:	e6ff5070 	uxth	r5, r0
    b4a0:	e2833003 	add	r3, r3, #3
    b4a4:	e0851001 	add	r1, r5, r1
    b4a8:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    b4ac:	e6ff1071 	uxth	r1, r1
    b4b0:	e5943024 	ldr	r3, [r4, #36]	; 0x24
    b4b4:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    b4b8:	e12fff33 	blx	r3
	ctx->tstates += 3;
    b4bc:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	write8(ctx, WR.IY + off, BR.B);	
    b4c0:	e1d410ba 	ldrh	r1, [r4, #10]
		val |= (1 << pos);
    b4c4:	e3802004 	orr	r2, r0, #4
    b4c8:	e0851001 	add	r1, r5, r1
	ctx->tstates += 3;
    b4cc:	e2833003 	add	r3, r3, #3
		val |= (1 << pos);
    b4d0:	e6ef2072 	uxtb	r2, r2
	ctx->tstates += 3;
    b4d4:	e5843040 	str	r3, [r4, #64]	; 0x40
	BR.B = doSetRes(ctx, SR_SET, 2, read8(ctx, WR.IY + off));
    b4d8:	e5c42003 	strb	r2, [r4, #3]
	ctx->memWrite(ctx->memParam, addr, val);	
    b4dc:	e5943028 	ldr	r3, [r4, #40]	; 0x28
    b4e0:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    b4e4:	e6ff1071 	uxth	r1, r1
}
    b4e8:	e8bd4070 	pop	{r4, r5, r6, lr}
    b4ec:	e12fff13 	bx	r3

0000b4f0 <LD_B_SET_3_off_IX_d>:


static void LD_B_SET_3_off_IX_d (Z80Context* ctx)
{
	ctx->tstates += 2;
	char off = read8(ctx, ctx->PC++);
    b4f0:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
    b4f4:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	char off = read8(ctx, ctx->PC++);
    b4f8:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
    b4fc:	e2833005 	add	r3, r3, #5
{
    b500:	e92d4070 	push	{r4, r5, r6, lr}
    b504:	e1a04000 	mov	r4, r0
	char off = read8(ctx, ctx->PC++);
    b508:	e1c021bc 	strh	r2, [r0, #28]
    b50c:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    b510:	e5903024 	ldr	r3, [r0, #36]	; 0x24
    b514:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
    b518:	e12fff33 	blx	r3
	ctx->tstates += 3;
    b51c:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	BR.B = doSetRes(ctx, SR_SET, 3, read8(ctx, WR.IX + off));
    b520:	e1d410b8 	ldrh	r1, [r4, #8]
    b524:	e6ff5070 	uxth	r5, r0
    b528:	e2833003 	add	r3, r3, #3
    b52c:	e0851001 	add	r1, r5, r1
    b530:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    b534:	e6ff1071 	uxth	r1, r1
    b538:	e5943024 	ldr	r3, [r4, #36]	; 0x24
    b53c:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    b540:	e12fff33 	blx	r3
	ctx->tstates += 3;
    b544:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	write8(ctx, WR.IX + off, BR.B);	
    b548:	e1d410b8 	ldrh	r1, [r4, #8]
		val |= (1 << pos);
    b54c:	e3802008 	orr	r2, r0, #8
    b550:	e0851001 	add	r1, r5, r1
	ctx->tstates += 3;
    b554:	e2833003 	add	r3, r3, #3
		val |= (1 << pos);
    b558:	e6ef2072 	uxtb	r2, r2
	ctx->tstates += 3;
    b55c:	e5843040 	str	r3, [r4, #64]	; 0x40
	BR.B = doSetRes(ctx, SR_SET, 3, read8(ctx, WR.IX + off));
    b560:	e5c42003 	strb	r2, [r4, #3]
	ctx->memWrite(ctx->memParam, addr, val);	
    b564:	e5943028 	ldr	r3, [r4, #40]	; 0x28
    b568:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    b56c:	e6ff1071 	uxth	r1, r1
}
    b570:	e8bd4070 	pop	{r4, r5, r6, lr}
    b574:	e12fff13 	bx	r3

0000b578 <LD_B_SET_3_off_IY_d>:


static void LD_B_SET_3_off_IY_d (Z80Context* ctx)
{
	ctx->tstates += 2;
	char off = read8(ctx, ctx->PC++);
    b578:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
    b57c:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	char off = read8(ctx, ctx->PC++);
    b580:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
    b584:	e2833005 	add	r3, r3, #5
{
    b588:	e92d4070 	push	{r4, r5, r6, lr}
    b58c:	e1a04000 	mov	r4, r0
	char off = read8(ctx, ctx->PC++);
    b590:	e1c021bc 	strh	r2, [r0, #28]
    b594:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    b598:	e5903024 	ldr	r3, [r0, #36]	; 0x24
    b59c:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
    b5a0:	e12fff33 	blx	r3
	ctx->tstates += 3;
    b5a4:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	BR.B = doSetRes(ctx, SR_SET, 3, read8(ctx, WR.IY + off));
    b5a8:	e1d410ba 	ldrh	r1, [r4, #10]
    b5ac:	e6ff5070 	uxth	r5, r0
    b5b0:	e2833003 	add	r3, r3, #3
    b5b4:	e0851001 	add	r1, r5, r1
    b5b8:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    b5bc:	e6ff1071 	uxth	r1, r1
    b5c0:	e5943024 	ldr	r3, [r4, #36]	; 0x24
    b5c4:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    b5c8:	e12fff33 	blx	r3
	ctx->tstates += 3;
    b5cc:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	write8(ctx, WR.IY + off, BR.B);	
    b5d0:	e1d410ba 	ldrh	r1, [r4, #10]
		val |= (1 << pos);
    b5d4:	e3802008 	orr	r2, r0, #8
    b5d8:	e0851001 	add	r1, r5, r1
	ctx->tstates += 3;
    b5dc:	e2833003 	add	r3, r3, #3
		val |= (1 << pos);
    b5e0:	e6ef2072 	uxtb	r2, r2
	ctx->tstates += 3;
    b5e4:	e5843040 	str	r3, [r4, #64]	; 0x40
	BR.B = doSetRes(ctx, SR_SET, 3, read8(ctx, WR.IY + off));
    b5e8:	e5c42003 	strb	r2, [r4, #3]
	ctx->memWrite(ctx->memParam, addr, val);	
    b5ec:	e5943028 	ldr	r3, [r4, #40]	; 0x28
    b5f0:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    b5f4:	e6ff1071 	uxth	r1, r1
}
    b5f8:	e8bd4070 	pop	{r4, r5, r6, lr}
    b5fc:	e12fff13 	bx	r3

0000b600 <LD_B_SET_4_off_IX_d>:


static void LD_B_SET_4_off_IX_d (Z80Context* ctx)
{
	ctx->tstates += 2;
	char off = read8(ctx, ctx->PC++);
    b600:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
    b604:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	char off = read8(ctx, ctx->PC++);
    b608:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
    b60c:	e2833005 	add	r3, r3, #5
{
    b610:	e92d4070 	push	{r4, r5, r6, lr}
    b614:	e1a04000 	mov	r4, r0
	char off = read8(ctx, ctx->PC++);
    b618:	e1c021bc 	strh	r2, [r0, #28]
    b61c:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    b620:	e5903024 	ldr	r3, [r0, #36]	; 0x24
    b624:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
    b628:	e12fff33 	blx	r3
	ctx->tstates += 3;
    b62c:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	BR.B = doSetRes(ctx, SR_SET, 4, read8(ctx, WR.IX + off));
    b630:	e1d410b8 	ldrh	r1, [r4, #8]
    b634:	e6ff5070 	uxth	r5, r0
    b638:	e2833003 	add	r3, r3, #3
    b63c:	e0851001 	add	r1, r5, r1
    b640:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    b644:	e6ff1071 	uxth	r1, r1
    b648:	e5943024 	ldr	r3, [r4, #36]	; 0x24
    b64c:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    b650:	e12fff33 	blx	r3
	ctx->tstates += 3;
    b654:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	write8(ctx, WR.IX + off, BR.B);	
    b658:	e1d410b8 	ldrh	r1, [r4, #8]
		val |= (1 << pos);
    b65c:	e3802010 	orr	r2, r0, #16
    b660:	e0851001 	add	r1, r5, r1
	ctx->tstates += 3;
    b664:	e2833003 	add	r3, r3, #3
		val |= (1 << pos);
    b668:	e6ef2072 	uxtb	r2, r2
	ctx->tstates += 3;
    b66c:	e5843040 	str	r3, [r4, #64]	; 0x40
	BR.B = doSetRes(ctx, SR_SET, 4, read8(ctx, WR.IX + off));
    b670:	e5c42003 	strb	r2, [r4, #3]
	ctx->memWrite(ctx->memParam, addr, val);	
    b674:	e5943028 	ldr	r3, [r4, #40]	; 0x28
    b678:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    b67c:	e6ff1071 	uxth	r1, r1
}
    b680:	e8bd4070 	pop	{r4, r5, r6, lr}
    b684:	e12fff13 	bx	r3

0000b688 <LD_B_SET_4_off_IY_d>:


static void LD_B_SET_4_off_IY_d (Z80Context* ctx)
{
	ctx->tstates += 2;
	char off = read8(ctx, ctx->PC++);
    b688:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
    b68c:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	char off = read8(ctx, ctx->PC++);
    b690:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
    b694:	e2833005 	add	r3, r3, #5
{
    b698:	e92d4070 	push	{r4, r5, r6, lr}
    b69c:	e1a04000 	mov	r4, r0
	char off = read8(ctx, ctx->PC++);
    b6a0:	e1c021bc 	strh	r2, [r0, #28]
    b6a4:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    b6a8:	e5903024 	ldr	r3, [r0, #36]	; 0x24
    b6ac:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
    b6b0:	e12fff33 	blx	r3
	ctx->tstates += 3;
    b6b4:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	BR.B = doSetRes(ctx, SR_SET, 4, read8(ctx, WR.IY + off));
    b6b8:	e1d410ba 	ldrh	r1, [r4, #10]
    b6bc:	e6ff5070 	uxth	r5, r0
    b6c0:	e2833003 	add	r3, r3, #3
    b6c4:	e0851001 	add	r1, r5, r1
    b6c8:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    b6cc:	e6ff1071 	uxth	r1, r1
    b6d0:	e5943024 	ldr	r3, [r4, #36]	; 0x24
    b6d4:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    b6d8:	e12fff33 	blx	r3
	ctx->tstates += 3;
    b6dc:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	write8(ctx, WR.IY + off, BR.B);	
    b6e0:	e1d410ba 	ldrh	r1, [r4, #10]
		val |= (1 << pos);
    b6e4:	e3802010 	orr	r2, r0, #16
    b6e8:	e0851001 	add	r1, r5, r1
	ctx->tstates += 3;
    b6ec:	e2833003 	add	r3, r3, #3
		val |= (1 << pos);
    b6f0:	e6ef2072 	uxtb	r2, r2
	ctx->tstates += 3;
    b6f4:	e5843040 	str	r3, [r4, #64]	; 0x40
	BR.B = doSetRes(ctx, SR_SET, 4, read8(ctx, WR.IY + off));
    b6f8:	e5c42003 	strb	r2, [r4, #3]
	ctx->memWrite(ctx->memParam, addr, val);	
    b6fc:	e5943028 	ldr	r3, [r4, #40]	; 0x28
    b700:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    b704:	e6ff1071 	uxth	r1, r1
}
    b708:	e8bd4070 	pop	{r4, r5, r6, lr}
    b70c:	e12fff13 	bx	r3

0000b710 <LD_B_SET_5_off_IX_d>:


static void LD_B_SET_5_off_IX_d (Z80Context* ctx)
{
	ctx->tstates += 2;
	char off = read8(ctx, ctx->PC++);
    b710:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
    b714:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	char off = read8(ctx, ctx->PC++);
    b718:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
    b71c:	e2833005 	add	r3, r3, #5
{
    b720:	e92d4070 	push	{r4, r5, r6, lr}
    b724:	e1a04000 	mov	r4, r0
	char off = read8(ctx, ctx->PC++);
    b728:	e1c021bc 	strh	r2, [r0, #28]
    b72c:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    b730:	e5903024 	ldr	r3, [r0, #36]	; 0x24
    b734:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
    b738:	e12fff33 	blx	r3
	ctx->tstates += 3;
    b73c:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	BR.B = doSetRes(ctx, SR_SET, 5, read8(ctx, WR.IX + off));
    b740:	e1d410b8 	ldrh	r1, [r4, #8]
    b744:	e6ff5070 	uxth	r5, r0
    b748:	e2833003 	add	r3, r3, #3
    b74c:	e0851001 	add	r1, r5, r1
    b750:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    b754:	e6ff1071 	uxth	r1, r1
    b758:	e5943024 	ldr	r3, [r4, #36]	; 0x24
    b75c:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    b760:	e12fff33 	blx	r3
	ctx->tstates += 3;
    b764:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	write8(ctx, WR.IX + off, BR.B);	
    b768:	e1d410b8 	ldrh	r1, [r4, #8]
		val |= (1 << pos);
    b76c:	e3802020 	orr	r2, r0, #32
    b770:	e0851001 	add	r1, r5, r1
	ctx->tstates += 3;
    b774:	e2833003 	add	r3, r3, #3
		val |= (1 << pos);
    b778:	e6ef2072 	uxtb	r2, r2
	ctx->tstates += 3;
    b77c:	e5843040 	str	r3, [r4, #64]	; 0x40
	BR.B = doSetRes(ctx, SR_SET, 5, read8(ctx, WR.IX + off));
    b780:	e5c42003 	strb	r2, [r4, #3]
	ctx->memWrite(ctx->memParam, addr, val);	
    b784:	e5943028 	ldr	r3, [r4, #40]	; 0x28
    b788:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    b78c:	e6ff1071 	uxth	r1, r1
}
    b790:	e8bd4070 	pop	{r4, r5, r6, lr}
    b794:	e12fff13 	bx	r3

0000b798 <LD_B_SET_5_off_IY_d>:


static void LD_B_SET_5_off_IY_d (Z80Context* ctx)
{
	ctx->tstates += 2;
	char off = read8(ctx, ctx->PC++);
    b798:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
    b79c:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	char off = read8(ctx, ctx->PC++);
    b7a0:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
    b7a4:	e2833005 	add	r3, r3, #5
{
    b7a8:	e92d4070 	push	{r4, r5, r6, lr}
    b7ac:	e1a04000 	mov	r4, r0
	char off = read8(ctx, ctx->PC++);
    b7b0:	e1c021bc 	strh	r2, [r0, #28]
    b7b4:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    b7b8:	e5903024 	ldr	r3, [r0, #36]	; 0x24
    b7bc:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
    b7c0:	e12fff33 	blx	r3
	ctx->tstates += 3;
    b7c4:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	BR.B = doSetRes(ctx, SR_SET, 5, read8(ctx, WR.IY + off));
    b7c8:	e1d410ba 	ldrh	r1, [r4, #10]
    b7cc:	e6ff5070 	uxth	r5, r0
    b7d0:	e2833003 	add	r3, r3, #3
    b7d4:	e0851001 	add	r1, r5, r1
    b7d8:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    b7dc:	e6ff1071 	uxth	r1, r1
    b7e0:	e5943024 	ldr	r3, [r4, #36]	; 0x24
    b7e4:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    b7e8:	e12fff33 	blx	r3
	ctx->tstates += 3;
    b7ec:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	write8(ctx, WR.IY + off, BR.B);	
    b7f0:	e1d410ba 	ldrh	r1, [r4, #10]
		val |= (1 << pos);
    b7f4:	e3802020 	orr	r2, r0, #32
    b7f8:	e0851001 	add	r1, r5, r1
	ctx->tstates += 3;
    b7fc:	e2833003 	add	r3, r3, #3
		val |= (1 << pos);
    b800:	e6ef2072 	uxtb	r2, r2
	ctx->tstates += 3;
    b804:	e5843040 	str	r3, [r4, #64]	; 0x40
	BR.B = doSetRes(ctx, SR_SET, 5, read8(ctx, WR.IY + off));
    b808:	e5c42003 	strb	r2, [r4, #3]
	ctx->memWrite(ctx->memParam, addr, val);	
    b80c:	e5943028 	ldr	r3, [r4, #40]	; 0x28
    b810:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    b814:	e6ff1071 	uxth	r1, r1
}
    b818:	e8bd4070 	pop	{r4, r5, r6, lr}
    b81c:	e12fff13 	bx	r3

0000b820 <LD_B_SET_6_off_IX_d>:


static void LD_B_SET_6_off_IX_d (Z80Context* ctx)
{
	ctx->tstates += 2;
	char off = read8(ctx, ctx->PC++);
    b820:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
    b824:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	char off = read8(ctx, ctx->PC++);
    b828:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
    b82c:	e2833005 	add	r3, r3, #5
{
    b830:	e92d4070 	push	{r4, r5, r6, lr}
    b834:	e1a04000 	mov	r4, r0
	char off = read8(ctx, ctx->PC++);
    b838:	e1c021bc 	strh	r2, [r0, #28]
    b83c:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    b840:	e5903024 	ldr	r3, [r0, #36]	; 0x24
    b844:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
    b848:	e12fff33 	blx	r3
	ctx->tstates += 3;
    b84c:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	BR.B = doSetRes(ctx, SR_SET, 6, read8(ctx, WR.IX + off));
    b850:	e1d410b8 	ldrh	r1, [r4, #8]
    b854:	e6ff5070 	uxth	r5, r0
    b858:	e2833003 	add	r3, r3, #3
    b85c:	e0851001 	add	r1, r5, r1
    b860:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    b864:	e6ff1071 	uxth	r1, r1
    b868:	e5943024 	ldr	r3, [r4, #36]	; 0x24
    b86c:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    b870:	e12fff33 	blx	r3
	ctx->tstates += 3;
    b874:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	write8(ctx, WR.IX + off, BR.B);	
    b878:	e1d410b8 	ldrh	r1, [r4, #8]
		val |= (1 << pos);
    b87c:	e3802040 	orr	r2, r0, #64	; 0x40
    b880:	e0851001 	add	r1, r5, r1
	ctx->tstates += 3;
    b884:	e2833003 	add	r3, r3, #3
		val |= (1 << pos);
    b888:	e6ef2072 	uxtb	r2, r2
	ctx->tstates += 3;
    b88c:	e5843040 	str	r3, [r4, #64]	; 0x40
	BR.B = doSetRes(ctx, SR_SET, 6, read8(ctx, WR.IX + off));
    b890:	e5c42003 	strb	r2, [r4, #3]
	ctx->memWrite(ctx->memParam, addr, val);	
    b894:	e5943028 	ldr	r3, [r4, #40]	; 0x28
    b898:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    b89c:	e6ff1071 	uxth	r1, r1
}
    b8a0:	e8bd4070 	pop	{r4, r5, r6, lr}
    b8a4:	e12fff13 	bx	r3

0000b8a8 <LD_B_SET_6_off_IY_d>:


static void LD_B_SET_6_off_IY_d (Z80Context* ctx)
{
	ctx->tstates += 2;
	char off = read8(ctx, ctx->PC++);
    b8a8:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
    b8ac:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	char off = read8(ctx, ctx->PC++);
    b8b0:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
    b8b4:	e2833005 	add	r3, r3, #5
{
    b8b8:	e92d4070 	push	{r4, r5, r6, lr}
    b8bc:	e1a04000 	mov	r4, r0
	char off = read8(ctx, ctx->PC++);
    b8c0:	e1c021bc 	strh	r2, [r0, #28]
    b8c4:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    b8c8:	e5903024 	ldr	r3, [r0, #36]	; 0x24
    b8cc:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
    b8d0:	e12fff33 	blx	r3
	ctx->tstates += 3;
    b8d4:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	BR.B = doSetRes(ctx, SR_SET, 6, read8(ctx, WR.IY + off));
    b8d8:	e1d410ba 	ldrh	r1, [r4, #10]
    b8dc:	e6ff5070 	uxth	r5, r0
    b8e0:	e2833003 	add	r3, r3, #3
    b8e4:	e0851001 	add	r1, r5, r1
    b8e8:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    b8ec:	e6ff1071 	uxth	r1, r1
    b8f0:	e5943024 	ldr	r3, [r4, #36]	; 0x24
    b8f4:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    b8f8:	e12fff33 	blx	r3
	ctx->tstates += 3;
    b8fc:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	write8(ctx, WR.IY + off, BR.B);	
    b900:	e1d410ba 	ldrh	r1, [r4, #10]
		val |= (1 << pos);
    b904:	e3802040 	orr	r2, r0, #64	; 0x40
    b908:	e0851001 	add	r1, r5, r1
	ctx->tstates += 3;
    b90c:	e2833003 	add	r3, r3, #3
		val |= (1 << pos);
    b910:	e6ef2072 	uxtb	r2, r2
	ctx->tstates += 3;
    b914:	e5843040 	str	r3, [r4, #64]	; 0x40
	BR.B = doSetRes(ctx, SR_SET, 6, read8(ctx, WR.IY + off));
    b918:	e5c42003 	strb	r2, [r4, #3]
	ctx->memWrite(ctx->memParam, addr, val);	
    b91c:	e5943028 	ldr	r3, [r4, #40]	; 0x28
    b920:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    b924:	e6ff1071 	uxth	r1, r1
}
    b928:	e8bd4070 	pop	{r4, r5, r6, lr}
    b92c:	e12fff13 	bx	r3

0000b930 <LD_B_SET_7_off_IX_d>:


static void LD_B_SET_7_off_IX_d (Z80Context* ctx)
{
	ctx->tstates += 2;
	char off = read8(ctx, ctx->PC++);
    b930:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
    b934:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	char off = read8(ctx, ctx->PC++);
    b938:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
    b93c:	e2833005 	add	r3, r3, #5
{
    b940:	e92d4070 	push	{r4, r5, r6, lr}
    b944:	e1a04000 	mov	r4, r0
	char off = read8(ctx, ctx->PC++);
    b948:	e1c021bc 	strh	r2, [r0, #28]
    b94c:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    b950:	e5903024 	ldr	r3, [r0, #36]	; 0x24
    b954:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
    b958:	e12fff33 	blx	r3
	ctx->tstates += 3;
    b95c:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	BR.B = doSetRes(ctx, SR_SET, 7, read8(ctx, WR.IX + off));
    b960:	e1d410b8 	ldrh	r1, [r4, #8]
    b964:	e6ff5070 	uxth	r5, r0
    b968:	e2833003 	add	r3, r3, #3
    b96c:	e0851001 	add	r1, r5, r1
    b970:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    b974:	e6ff1071 	uxth	r1, r1
    b978:	e5943024 	ldr	r3, [r4, #36]	; 0x24
    b97c:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    b980:	e12fff33 	blx	r3
		val |= (1 << pos);
    b984:	e1e00c80 	mvn	r0, r0, lsl #25
    b988:	e1e00ca0 	mvn	r0, r0, lsr #25
	ctx->tstates += 3;
    b98c:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	write8(ctx, WR.IX + off, BR.B);	
    b990:	e1d410b8 	ldrh	r1, [r4, #8]
		val |= (1 << pos);
    b994:	e6ef2070 	uxtb	r2, r0
    b998:	e0851001 	add	r1, r5, r1
	ctx->tstates += 3;
    b99c:	e2833003 	add	r3, r3, #3
    b9a0:	e5843040 	str	r3, [r4, #64]	; 0x40
	BR.B = doSetRes(ctx, SR_SET, 7, read8(ctx, WR.IX + off));
    b9a4:	e5c42003 	strb	r2, [r4, #3]
	ctx->memWrite(ctx->memParam, addr, val);	
    b9a8:	e5943028 	ldr	r3, [r4, #40]	; 0x28
    b9ac:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    b9b0:	e6ff1071 	uxth	r1, r1
}
    b9b4:	e8bd4070 	pop	{r4, r5, r6, lr}
    b9b8:	e12fff13 	bx	r3

0000b9bc <LD_B_SET_7_off_IY_d>:


static void LD_B_SET_7_off_IY_d (Z80Context* ctx)
{
	ctx->tstates += 2;
	char off = read8(ctx, ctx->PC++);
    b9bc:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
    b9c0:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	char off = read8(ctx, ctx->PC++);
    b9c4:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
    b9c8:	e2833005 	add	r3, r3, #5
{
    b9cc:	e92d4070 	push	{r4, r5, r6, lr}
    b9d0:	e1a04000 	mov	r4, r0
	char off = read8(ctx, ctx->PC++);
    b9d4:	e1c021bc 	strh	r2, [r0, #28]
    b9d8:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    b9dc:	e5903024 	ldr	r3, [r0, #36]	; 0x24
    b9e0:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
    b9e4:	e12fff33 	blx	r3
	ctx->tstates += 3;
    b9e8:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	BR.B = doSetRes(ctx, SR_SET, 7, read8(ctx, WR.IY + off));
    b9ec:	e1d410ba 	ldrh	r1, [r4, #10]
    b9f0:	e6ff5070 	uxth	r5, r0
    b9f4:	e2833003 	add	r3, r3, #3
    b9f8:	e0851001 	add	r1, r5, r1
    b9fc:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    ba00:	e6ff1071 	uxth	r1, r1
    ba04:	e5943024 	ldr	r3, [r4, #36]	; 0x24
    ba08:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    ba0c:	e12fff33 	blx	r3
		val |= (1 << pos);
    ba10:	e1e00c80 	mvn	r0, r0, lsl #25
    ba14:	e1e00ca0 	mvn	r0, r0, lsr #25
	ctx->tstates += 3;
    ba18:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	write8(ctx, WR.IY + off, BR.B);	
    ba1c:	e1d410ba 	ldrh	r1, [r4, #10]
		val |= (1 << pos);
    ba20:	e6ef2070 	uxtb	r2, r0
    ba24:	e0851001 	add	r1, r5, r1
	ctx->tstates += 3;
    ba28:	e2833003 	add	r3, r3, #3
    ba2c:	e5843040 	str	r3, [r4, #64]	; 0x40
	BR.B = doSetRes(ctx, SR_SET, 7, read8(ctx, WR.IY + off));
    ba30:	e5c42003 	strb	r2, [r4, #3]
	ctx->memWrite(ctx->memParam, addr, val);	
    ba34:	e5943028 	ldr	r3, [r4, #40]	; 0x28
    ba38:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    ba3c:	e6ff1071 	uxth	r1, r1
}
    ba40:	e8bd4070 	pop	{r4, r5, r6, lr}
    ba44:	e12fff13 	bx	r3

0000ba48 <LD_C_off_HL>:
	ctx->tstates += 3;
    ba48:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	
}


static void LD_C_off_HL (Z80Context* ctx)
{
    ba4c:	e92d4010 	push	{r4, lr}
    ba50:	e2833003 	add	r3, r3, #3
    ba54:	e5803040 	str	r3, [r0, #64]	; 0x40
    ba58:	e1a04000 	mov	r4, r0
	BR.C = read8(ctx, WR.HL);
    ba5c:	e1d010b6 	ldrh	r1, [r0, #6]
	return ctx->memRead(ctx->memParam, addr);	
    ba60:	e5903024 	ldr	r3, [r0, #36]	; 0x24
    ba64:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
    ba68:	e12fff33 	blx	r3
    ba6c:	e5c40002 	strb	r0, [r4, #2]
}
    ba70:	e8bd8010 	pop	{r4, pc}

0000ba74 <LD_C_off_IX_d>:


static void LD_C_off_IX_d (Z80Context* ctx)
{
    ba74:	e92d4070 	push	{r4, r5, r6, lr}
    ba78:	e1a04000 	mov	r4, r0
	ctx->tstates += 5;
	BR.C = read8(ctx, WR.IX + (char) read8(ctx, ctx->PC++));
    ba7c:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 5;
    ba80:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	BR.C = read8(ctx, WR.IX + (char) read8(ctx, ctx->PC++));
    ba84:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
    ba88:	e2833008 	add	r3, r3, #8
    ba8c:	e1c021bc 	strh	r2, [r0, #28]
    ba90:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    ba94:	e5903024 	ldr	r3, [r0, #36]	; 0x24
    ba98:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
    ba9c:	e1d450b8 	ldrh	r5, [r4, #8]
    baa0:	e12fff33 	blx	r3
	ctx->tstates += 3;
    baa4:	e5943040 	ldr	r3, [r4, #64]	; 0x40
    baa8:	e0851000 	add	r1, r5, r0
    baac:	e2833003 	add	r3, r3, #3
    bab0:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    bab4:	e6ff1071 	uxth	r1, r1
    bab8:	e5943024 	ldr	r3, [r4, #36]	; 0x24
    babc:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    bac0:	e12fff33 	blx	r3
    bac4:	e5c40002 	strb	r0, [r4, #2]
}
    bac8:	e8bd8070 	pop	{r4, r5, r6, pc}

0000bacc <LD_C_off_IY_d>:


static void LD_C_off_IY_d (Z80Context* ctx)
{
    bacc:	e92d4070 	push	{r4, r5, r6, lr}
    bad0:	e1a04000 	mov	r4, r0
	ctx->tstates += 5;
	BR.C = read8(ctx, WR.IY + (char) read8(ctx, ctx->PC++));
    bad4:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 5;
    bad8:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	BR.C = read8(ctx, WR.IY + (char) read8(ctx, ctx->PC++));
    badc:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
    bae0:	e2833008 	add	r3, r3, #8
    bae4:	e1c021bc 	strh	r2, [r0, #28]
    bae8:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    baec:	e5903024 	ldr	r3, [r0, #36]	; 0x24
    baf0:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
    baf4:	e1d450ba 	ldrh	r5, [r4, #10]
    baf8:	e12fff33 	blx	r3
	ctx->tstates += 3;
    bafc:	e5943040 	ldr	r3, [r4, #64]	; 0x40
    bb00:	e0851000 	add	r1, r5, r0
    bb04:	e2833003 	add	r3, r3, #3
    bb08:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    bb0c:	e6ff1071 	uxth	r1, r1
    bb10:	e5943024 	ldr	r3, [r4, #36]	; 0x24
    bb14:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    bb18:	e12fff33 	blx	r3
    bb1c:	e5c40002 	strb	r0, [r4, #2]
}
    bb20:	e8bd8070 	pop	{r4, r5, r6, pc}

0000bb24 <LD_C_A>:


static void LD_C_A (Z80Context* ctx)
{
	BR.C = BR.A;
    bb24:	e5d03001 	ldrb	r3, [r0, #1]
    bb28:	e5c03002 	strb	r3, [r0, #2]
}
    bb2c:	e12fff1e 	bx	lr

0000bb30 <LD_C_B>:


static void LD_C_B (Z80Context* ctx)
{
	BR.C = BR.B;
    bb30:	e5d03003 	ldrb	r3, [r0, #3]
    bb34:	e5c03002 	strb	r3, [r0, #2]
}
    bb38:	e12fff1e 	bx	lr

0000bb3c <LD_C_D>:
}


static void LD_C_D (Z80Context* ctx)
{
	BR.C = BR.D;
    bb3c:	e5d03005 	ldrb	r3, [r0, #5]
    bb40:	e5c03002 	strb	r3, [r0, #2]
}
    bb44:	e12fff1e 	bx	lr

0000bb48 <LD_C_E>:


static void LD_C_E (Z80Context* ctx)
{
	BR.C = BR.E;
    bb48:	e5d03004 	ldrb	r3, [r0, #4]
    bb4c:	e5c03002 	strb	r3, [r0, #2]
}
    bb50:	e12fff1e 	bx	lr

0000bb54 <LD_C_H>:


static void LD_C_H (Z80Context* ctx)
{
	BR.C = BR.H;
    bb54:	e5d03007 	ldrb	r3, [r0, #7]
    bb58:	e5c03002 	strb	r3, [r0, #2]
}
    bb5c:	e12fff1e 	bx	lr

0000bb60 <LD_C_IXh>:


static void LD_C_IXh (Z80Context* ctx)
{
	BR.C = BR.IXh;
    bb60:	e5d03009 	ldrb	r3, [r0, #9]
    bb64:	e5c03002 	strb	r3, [r0, #2]
}
    bb68:	e12fff1e 	bx	lr

0000bb6c <LD_C_IXl>:


static void LD_C_IXl (Z80Context* ctx)
{
	BR.C = BR.IXl;
    bb6c:	e5d03008 	ldrb	r3, [r0, #8]
    bb70:	e5c03002 	strb	r3, [r0, #2]
}
    bb74:	e12fff1e 	bx	lr

0000bb78 <LD_C_IYh>:


static void LD_C_IYh (Z80Context* ctx)
{
	BR.C = BR.IYh;
    bb78:	e5d0300b 	ldrb	r3, [r0, #11]
    bb7c:	e5c03002 	strb	r3, [r0, #2]
}
    bb80:	e12fff1e 	bx	lr

0000bb84 <LD_C_IYl>:


static void LD_C_IYl (Z80Context* ctx)
{
	BR.C = BR.IYl;
    bb84:	e5d0300a 	ldrb	r3, [r0, #10]
    bb88:	e5c03002 	strb	r3, [r0, #2]
}
    bb8c:	e12fff1e 	bx	lr

0000bb90 <LD_C_L>:


static void LD_C_L (Z80Context* ctx)
{
	BR.C = BR.L;
    bb90:	e5d03006 	ldrb	r3, [r0, #6]
    bb94:	e5c03002 	strb	r3, [r0, #2]
}
    bb98:	e12fff1e 	bx	lr

0000bb9c <LD_C_n>:


static void LD_C_n (Z80Context* ctx)
{
	BR.C = read8(ctx, ctx->PC++);
    bb9c:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 3;
    bba0:	e5903040 	ldr	r3, [r0, #64]	; 0x40
    bba4:	e2812001 	add	r2, r1, #1
    bba8:	e2833003 	add	r3, r3, #3
{
    bbac:	e92d4010 	push	{r4, lr}
    bbb0:	e5803040 	str	r3, [r0, #64]	; 0x40
    bbb4:	e1a04000 	mov	r4, r0
	BR.C = read8(ctx, ctx->PC++);
    bbb8:	e1c021bc 	strh	r2, [r0, #28]
	return ctx->memRead(ctx->memParam, addr);	
    bbbc:	e5903024 	ldr	r3, [r0, #36]	; 0x24
    bbc0:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
    bbc4:	e12fff33 	blx	r3
    bbc8:	e5c40002 	strb	r0, [r4, #2]
	
}
    bbcc:	e8bd8010 	pop	{r4, pc}

0000bbd0 <LD_C_RES_0_off_IX_d>:


static void LD_C_RES_0_off_IX_d (Z80Context* ctx)
{
	ctx->tstates += 2;
	char off = read8(ctx, ctx->PC++);
    bbd0:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
    bbd4:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	char off = read8(ctx, ctx->PC++);
    bbd8:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
    bbdc:	e2833005 	add	r3, r3, #5
{
    bbe0:	e92d4070 	push	{r4, r5, r6, lr}
    bbe4:	e1a04000 	mov	r4, r0
	char off = read8(ctx, ctx->PC++);
    bbe8:	e1c021bc 	strh	r2, [r0, #28]
    bbec:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    bbf0:	e5903024 	ldr	r3, [r0, #36]	; 0x24
    bbf4:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
    bbf8:	e12fff33 	blx	r3
	ctx->tstates += 3;
    bbfc:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	BR.C = doSetRes(ctx, SR_RES, 0, read8(ctx, WR.IX + off));
    bc00:	e1d410b8 	ldrh	r1, [r4, #8]
    bc04:	e6ff5070 	uxth	r5, r0
    bc08:	e2833003 	add	r3, r3, #3
    bc0c:	e0851001 	add	r1, r5, r1
    bc10:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    bc14:	e6ff1071 	uxth	r1, r1
    bc18:	e5943024 	ldr	r3, [r4, #36]	; 0x24
    bc1c:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    bc20:	e12fff33 	blx	r3
	ctx->tstates += 3;
    bc24:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	write8(ctx, WR.IX + off, BR.C);	
    bc28:	e1d410b8 	ldrh	r1, [r4, #8]
		val &= ~(1 << pos);
    bc2c:	e20020fe 	and	r2, r0, #254	; 0xfe
    bc30:	e0851001 	add	r1, r5, r1
	ctx->tstates += 3;
    bc34:	e2833003 	add	r3, r3, #3
    bc38:	e5843040 	str	r3, [r4, #64]	; 0x40
	BR.C = doSetRes(ctx, SR_RES, 0, read8(ctx, WR.IX + off));
    bc3c:	e5c42002 	strb	r2, [r4, #2]
	ctx->memWrite(ctx->memParam, addr, val);	
    bc40:	e5943028 	ldr	r3, [r4, #40]	; 0x28
    bc44:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    bc48:	e6ff1071 	uxth	r1, r1
}
    bc4c:	e8bd4070 	pop	{r4, r5, r6, lr}
    bc50:	e12fff13 	bx	r3

0000bc54 <LD_C_RES_0_off_IY_d>:


static void LD_C_RES_0_off_IY_d (Z80Context* ctx)
{
	ctx->tstates += 2;
	char off = read8(ctx, ctx->PC++);
    bc54:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
    bc58:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	char off = read8(ctx, ctx->PC++);
    bc5c:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
    bc60:	e2833005 	add	r3, r3, #5
{
    bc64:	e92d4070 	push	{r4, r5, r6, lr}
    bc68:	e1a04000 	mov	r4, r0
	char off = read8(ctx, ctx->PC++);
    bc6c:	e1c021bc 	strh	r2, [r0, #28]
    bc70:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    bc74:	e5903024 	ldr	r3, [r0, #36]	; 0x24
    bc78:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
    bc7c:	e12fff33 	blx	r3
	ctx->tstates += 3;
    bc80:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	BR.C = doSetRes(ctx, SR_RES, 0, read8(ctx, WR.IY + off));
    bc84:	e1d410ba 	ldrh	r1, [r4, #10]
    bc88:	e6ff5070 	uxth	r5, r0
    bc8c:	e2833003 	add	r3, r3, #3
    bc90:	e0851001 	add	r1, r5, r1
    bc94:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    bc98:	e6ff1071 	uxth	r1, r1
    bc9c:	e5943024 	ldr	r3, [r4, #36]	; 0x24
    bca0:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    bca4:	e12fff33 	blx	r3
	ctx->tstates += 3;
    bca8:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	write8(ctx, WR.IY + off, BR.C);	
    bcac:	e1d410ba 	ldrh	r1, [r4, #10]
		val &= ~(1 << pos);
    bcb0:	e20020fe 	and	r2, r0, #254	; 0xfe
    bcb4:	e0851001 	add	r1, r5, r1
	ctx->tstates += 3;
    bcb8:	e2833003 	add	r3, r3, #3
    bcbc:	e5843040 	str	r3, [r4, #64]	; 0x40
	BR.C = doSetRes(ctx, SR_RES, 0, read8(ctx, WR.IY + off));
    bcc0:	e5c42002 	strb	r2, [r4, #2]
	ctx->memWrite(ctx->memParam, addr, val);	
    bcc4:	e5943028 	ldr	r3, [r4, #40]	; 0x28
    bcc8:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    bccc:	e6ff1071 	uxth	r1, r1
}
    bcd0:	e8bd4070 	pop	{r4, r5, r6, lr}
    bcd4:	e12fff13 	bx	r3

0000bcd8 <LD_C_RES_1_off_IX_d>:


static void LD_C_RES_1_off_IX_d (Z80Context* ctx)
{
	ctx->tstates += 2;
	char off = read8(ctx, ctx->PC++);
    bcd8:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
    bcdc:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	char off = read8(ctx, ctx->PC++);
    bce0:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
    bce4:	e2833005 	add	r3, r3, #5
{
    bce8:	e92d4070 	push	{r4, r5, r6, lr}
    bcec:	e1a04000 	mov	r4, r0
	char off = read8(ctx, ctx->PC++);
    bcf0:	e1c021bc 	strh	r2, [r0, #28]
    bcf4:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    bcf8:	e5903024 	ldr	r3, [r0, #36]	; 0x24
    bcfc:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
    bd00:	e12fff33 	blx	r3
	ctx->tstates += 3;
    bd04:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	BR.C = doSetRes(ctx, SR_RES, 1, read8(ctx, WR.IX + off));
    bd08:	e1d410b8 	ldrh	r1, [r4, #8]
    bd0c:	e6ff5070 	uxth	r5, r0
    bd10:	e2833003 	add	r3, r3, #3
    bd14:	e0851001 	add	r1, r5, r1
    bd18:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    bd1c:	e6ff1071 	uxth	r1, r1
    bd20:	e5943024 	ldr	r3, [r4, #36]	; 0x24
    bd24:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    bd28:	e12fff33 	blx	r3
	ctx->tstates += 3;
    bd2c:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	write8(ctx, WR.IX + off, BR.C);	
    bd30:	e1d410b8 	ldrh	r1, [r4, #8]
		val &= ~(1 << pos);
    bd34:	e20020fd 	and	r2, r0, #253	; 0xfd
    bd38:	e0851001 	add	r1, r5, r1
	ctx->tstates += 3;
    bd3c:	e2833003 	add	r3, r3, #3
    bd40:	e5843040 	str	r3, [r4, #64]	; 0x40
	BR.C = doSetRes(ctx, SR_RES, 1, read8(ctx, WR.IX + off));
    bd44:	e5c42002 	strb	r2, [r4, #2]
	ctx->memWrite(ctx->memParam, addr, val);	
    bd48:	e5943028 	ldr	r3, [r4, #40]	; 0x28
    bd4c:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    bd50:	e6ff1071 	uxth	r1, r1
}
    bd54:	e8bd4070 	pop	{r4, r5, r6, lr}
    bd58:	e12fff13 	bx	r3

0000bd5c <LD_C_RES_1_off_IY_d>:


static void LD_C_RES_1_off_IY_d (Z80Context* ctx)
{
	ctx->tstates += 2;
	char off = read8(ctx, ctx->PC++);
    bd5c:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
    bd60:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	char off = read8(ctx, ctx->PC++);
    bd64:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
    bd68:	e2833005 	add	r3, r3, #5
{
    bd6c:	e92d4070 	push	{r4, r5, r6, lr}
    bd70:	e1a04000 	mov	r4, r0
	char off = read8(ctx, ctx->PC++);
    bd74:	e1c021bc 	strh	r2, [r0, #28]
    bd78:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    bd7c:	e5903024 	ldr	r3, [r0, #36]	; 0x24
    bd80:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
    bd84:	e12fff33 	blx	r3
	ctx->tstates += 3;
    bd88:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	BR.C = doSetRes(ctx, SR_RES, 1, read8(ctx, WR.IY + off));
    bd8c:	e1d410ba 	ldrh	r1, [r4, #10]
    bd90:	e6ff5070 	uxth	r5, r0
    bd94:	e2833003 	add	r3, r3, #3
    bd98:	e0851001 	add	r1, r5, r1
    bd9c:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    bda0:	e6ff1071 	uxth	r1, r1
    bda4:	e5943024 	ldr	r3, [r4, #36]	; 0x24
    bda8:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    bdac:	e12fff33 	blx	r3
	ctx->tstates += 3;
    bdb0:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	write8(ctx, WR.IY + off, BR.C);	
    bdb4:	e1d410ba 	ldrh	r1, [r4, #10]
		val &= ~(1 << pos);
    bdb8:	e20020fd 	and	r2, r0, #253	; 0xfd
    bdbc:	e0851001 	add	r1, r5, r1
	ctx->tstates += 3;
    bdc0:	e2833003 	add	r3, r3, #3
    bdc4:	e5843040 	str	r3, [r4, #64]	; 0x40
	BR.C = doSetRes(ctx, SR_RES, 1, read8(ctx, WR.IY + off));
    bdc8:	e5c42002 	strb	r2, [r4, #2]
	ctx->memWrite(ctx->memParam, addr, val);	
    bdcc:	e5943028 	ldr	r3, [r4, #40]	; 0x28
    bdd0:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    bdd4:	e6ff1071 	uxth	r1, r1
}
    bdd8:	e8bd4070 	pop	{r4, r5, r6, lr}
    bddc:	e12fff13 	bx	r3

0000bde0 <LD_C_RES_2_off_IX_d>:


static void LD_C_RES_2_off_IX_d (Z80Context* ctx)
{
	ctx->tstates += 2;
	char off = read8(ctx, ctx->PC++);
    bde0:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
    bde4:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	char off = read8(ctx, ctx->PC++);
    bde8:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
    bdec:	e2833005 	add	r3, r3, #5
{
    bdf0:	e92d4070 	push	{r4, r5, r6, lr}
    bdf4:	e1a04000 	mov	r4, r0
	char off = read8(ctx, ctx->PC++);
    bdf8:	e1c021bc 	strh	r2, [r0, #28]
    bdfc:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    be00:	e5903024 	ldr	r3, [r0, #36]	; 0x24
    be04:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
    be08:	e12fff33 	blx	r3
	ctx->tstates += 3;
    be0c:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	BR.C = doSetRes(ctx, SR_RES, 2, read8(ctx, WR.IX + off));
    be10:	e1d410b8 	ldrh	r1, [r4, #8]
    be14:	e6ff5070 	uxth	r5, r0
    be18:	e2833003 	add	r3, r3, #3
    be1c:	e0851001 	add	r1, r5, r1
    be20:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    be24:	e6ff1071 	uxth	r1, r1
    be28:	e5943024 	ldr	r3, [r4, #36]	; 0x24
    be2c:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    be30:	e12fff33 	blx	r3
	ctx->tstates += 3;
    be34:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	write8(ctx, WR.IX + off, BR.C);	
    be38:	e1d410b8 	ldrh	r1, [r4, #8]
		val &= ~(1 << pos);
    be3c:	e20020fb 	and	r2, r0, #251	; 0xfb
    be40:	e0851001 	add	r1, r5, r1
	ctx->tstates += 3;
    be44:	e2833003 	add	r3, r3, #3
    be48:	e5843040 	str	r3, [r4, #64]	; 0x40
	BR.C = doSetRes(ctx, SR_RES, 2, read8(ctx, WR.IX + off));
    be4c:	e5c42002 	strb	r2, [r4, #2]
	ctx->memWrite(ctx->memParam, addr, val);	
    be50:	e5943028 	ldr	r3, [r4, #40]	; 0x28
    be54:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    be58:	e6ff1071 	uxth	r1, r1
}
    be5c:	e8bd4070 	pop	{r4, r5, r6, lr}
    be60:	e12fff13 	bx	r3

0000be64 <LD_C_RES_2_off_IY_d>:


static void LD_C_RES_2_off_IY_d (Z80Context* ctx)
{
	ctx->tstates += 2;
	char off = read8(ctx, ctx->PC++);
    be64:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
    be68:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	char off = read8(ctx, ctx->PC++);
    be6c:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
    be70:	e2833005 	add	r3, r3, #5
{
    be74:	e92d4070 	push	{r4, r5, r6, lr}
    be78:	e1a04000 	mov	r4, r0
	char off = read8(ctx, ctx->PC++);
    be7c:	e1c021bc 	strh	r2, [r0, #28]
    be80:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    be84:	e5903024 	ldr	r3, [r0, #36]	; 0x24
    be88:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
    be8c:	e12fff33 	blx	r3
	ctx->tstates += 3;
    be90:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	BR.C = doSetRes(ctx, SR_RES, 2, read8(ctx, WR.IY + off));
    be94:	e1d410ba 	ldrh	r1, [r4, #10]
    be98:	e6ff5070 	uxth	r5, r0
    be9c:	e2833003 	add	r3, r3, #3
    bea0:	e0851001 	add	r1, r5, r1
    bea4:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    bea8:	e6ff1071 	uxth	r1, r1
    beac:	e5943024 	ldr	r3, [r4, #36]	; 0x24
    beb0:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    beb4:	e12fff33 	blx	r3
	ctx->tstates += 3;
    beb8:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	write8(ctx, WR.IY + off, BR.C);	
    bebc:	e1d410ba 	ldrh	r1, [r4, #10]
		val &= ~(1 << pos);
    bec0:	e20020fb 	and	r2, r0, #251	; 0xfb
    bec4:	e0851001 	add	r1, r5, r1
	ctx->tstates += 3;
    bec8:	e2833003 	add	r3, r3, #3
    becc:	e5843040 	str	r3, [r4, #64]	; 0x40
	BR.C = doSetRes(ctx, SR_RES, 2, read8(ctx, WR.IY + off));
    bed0:	e5c42002 	strb	r2, [r4, #2]
	ctx->memWrite(ctx->memParam, addr, val);	
    bed4:	e5943028 	ldr	r3, [r4, #40]	; 0x28
    bed8:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    bedc:	e6ff1071 	uxth	r1, r1
}
    bee0:	e8bd4070 	pop	{r4, r5, r6, lr}
    bee4:	e12fff13 	bx	r3

0000bee8 <LD_C_RES_3_off_IX_d>:


static void LD_C_RES_3_off_IX_d (Z80Context* ctx)
{
	ctx->tstates += 2;
	char off = read8(ctx, ctx->PC++);
    bee8:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
    beec:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	char off = read8(ctx, ctx->PC++);
    bef0:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
    bef4:	e2833005 	add	r3, r3, #5
{
    bef8:	e92d4070 	push	{r4, r5, r6, lr}
    befc:	e1a04000 	mov	r4, r0
	char off = read8(ctx, ctx->PC++);
    bf00:	e1c021bc 	strh	r2, [r0, #28]
    bf04:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    bf08:	e5903024 	ldr	r3, [r0, #36]	; 0x24
    bf0c:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
    bf10:	e12fff33 	blx	r3
	ctx->tstates += 3;
    bf14:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	BR.C = doSetRes(ctx, SR_RES, 3, read8(ctx, WR.IX + off));
    bf18:	e1d410b8 	ldrh	r1, [r4, #8]
    bf1c:	e6ff5070 	uxth	r5, r0
    bf20:	e2833003 	add	r3, r3, #3
    bf24:	e0851001 	add	r1, r5, r1
    bf28:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    bf2c:	e6ff1071 	uxth	r1, r1
    bf30:	e5943024 	ldr	r3, [r4, #36]	; 0x24
    bf34:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    bf38:	e12fff33 	blx	r3
	ctx->tstates += 3;
    bf3c:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	write8(ctx, WR.IX + off, BR.C);	
    bf40:	e1d410b8 	ldrh	r1, [r4, #8]
		val &= ~(1 << pos);
    bf44:	e20020f7 	and	r2, r0, #247	; 0xf7
    bf48:	e0851001 	add	r1, r5, r1
	ctx->tstates += 3;
    bf4c:	e2833003 	add	r3, r3, #3
    bf50:	e5843040 	str	r3, [r4, #64]	; 0x40
	BR.C = doSetRes(ctx, SR_RES, 3, read8(ctx, WR.IX + off));
    bf54:	e5c42002 	strb	r2, [r4, #2]
	ctx->memWrite(ctx->memParam, addr, val);	
    bf58:	e5943028 	ldr	r3, [r4, #40]	; 0x28
    bf5c:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    bf60:	e6ff1071 	uxth	r1, r1
}
    bf64:	e8bd4070 	pop	{r4, r5, r6, lr}
    bf68:	e12fff13 	bx	r3

0000bf6c <LD_C_RES_3_off_IY_d>:


static void LD_C_RES_3_off_IY_d (Z80Context* ctx)
{
	ctx->tstates += 2;
	char off = read8(ctx, ctx->PC++);
    bf6c:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
    bf70:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	char off = read8(ctx, ctx->PC++);
    bf74:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
    bf78:	e2833005 	add	r3, r3, #5
{
    bf7c:	e92d4070 	push	{r4, r5, r6, lr}
    bf80:	e1a04000 	mov	r4, r0
	char off = read8(ctx, ctx->PC++);
    bf84:	e1c021bc 	strh	r2, [r0, #28]
    bf88:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    bf8c:	e5903024 	ldr	r3, [r0, #36]	; 0x24
    bf90:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
    bf94:	e12fff33 	blx	r3
	ctx->tstates += 3;
    bf98:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	BR.C = doSetRes(ctx, SR_RES, 3, read8(ctx, WR.IY + off));
    bf9c:	e1d410ba 	ldrh	r1, [r4, #10]
    bfa0:	e6ff5070 	uxth	r5, r0
    bfa4:	e2833003 	add	r3, r3, #3
    bfa8:	e0851001 	add	r1, r5, r1
    bfac:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    bfb0:	e6ff1071 	uxth	r1, r1
    bfb4:	e5943024 	ldr	r3, [r4, #36]	; 0x24
    bfb8:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    bfbc:	e12fff33 	blx	r3
	ctx->tstates += 3;
    bfc0:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	write8(ctx, WR.IY + off, BR.C);	
    bfc4:	e1d410ba 	ldrh	r1, [r4, #10]
		val &= ~(1 << pos);
    bfc8:	e20020f7 	and	r2, r0, #247	; 0xf7
    bfcc:	e0851001 	add	r1, r5, r1
	ctx->tstates += 3;
    bfd0:	e2833003 	add	r3, r3, #3
    bfd4:	e5843040 	str	r3, [r4, #64]	; 0x40
	BR.C = doSetRes(ctx, SR_RES, 3, read8(ctx, WR.IY + off));
    bfd8:	e5c42002 	strb	r2, [r4, #2]
	ctx->memWrite(ctx->memParam, addr, val);	
    bfdc:	e5943028 	ldr	r3, [r4, #40]	; 0x28
    bfe0:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    bfe4:	e6ff1071 	uxth	r1, r1
}
    bfe8:	e8bd4070 	pop	{r4, r5, r6, lr}
    bfec:	e12fff13 	bx	r3

0000bff0 <LD_C_RES_4_off_IX_d>:


static void LD_C_RES_4_off_IX_d (Z80Context* ctx)
{
	ctx->tstates += 2;
	char off = read8(ctx, ctx->PC++);
    bff0:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
    bff4:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	char off = read8(ctx, ctx->PC++);
    bff8:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
    bffc:	e2833005 	add	r3, r3, #5
{
    c000:	e92d4070 	push	{r4, r5, r6, lr}
    c004:	e1a04000 	mov	r4, r0
	char off = read8(ctx, ctx->PC++);
    c008:	e1c021bc 	strh	r2, [r0, #28]
    c00c:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    c010:	e5903024 	ldr	r3, [r0, #36]	; 0x24
    c014:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
    c018:	e12fff33 	blx	r3
	ctx->tstates += 3;
    c01c:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	BR.C = doSetRes(ctx, SR_RES, 4, read8(ctx, WR.IX + off));
    c020:	e1d410b8 	ldrh	r1, [r4, #8]
    c024:	e6ff5070 	uxth	r5, r0
    c028:	e2833003 	add	r3, r3, #3
    c02c:	e0851001 	add	r1, r5, r1
    c030:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    c034:	e6ff1071 	uxth	r1, r1
    c038:	e5943024 	ldr	r3, [r4, #36]	; 0x24
    c03c:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    c040:	e12fff33 	blx	r3
	ctx->tstates += 3;
    c044:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	write8(ctx, WR.IX + off, BR.C);	
    c048:	e1d410b8 	ldrh	r1, [r4, #8]
		val &= ~(1 << pos);
    c04c:	e20020ef 	and	r2, r0, #239	; 0xef
    c050:	e0851001 	add	r1, r5, r1
	ctx->tstates += 3;
    c054:	e2833003 	add	r3, r3, #3
    c058:	e5843040 	str	r3, [r4, #64]	; 0x40
	BR.C = doSetRes(ctx, SR_RES, 4, read8(ctx, WR.IX + off));
    c05c:	e5c42002 	strb	r2, [r4, #2]
	ctx->memWrite(ctx->memParam, addr, val);	
    c060:	e5943028 	ldr	r3, [r4, #40]	; 0x28
    c064:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    c068:	e6ff1071 	uxth	r1, r1
}
    c06c:	e8bd4070 	pop	{r4, r5, r6, lr}
    c070:	e12fff13 	bx	r3

0000c074 <LD_C_RES_4_off_IY_d>:


static void LD_C_RES_4_off_IY_d (Z80Context* ctx)
{
	ctx->tstates += 2;
	char off = read8(ctx, ctx->PC++);
    c074:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
    c078:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	char off = read8(ctx, ctx->PC++);
    c07c:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
    c080:	e2833005 	add	r3, r3, #5
{
    c084:	e92d4070 	push	{r4, r5, r6, lr}
    c088:	e1a04000 	mov	r4, r0
	char off = read8(ctx, ctx->PC++);
    c08c:	e1c021bc 	strh	r2, [r0, #28]
    c090:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    c094:	e5903024 	ldr	r3, [r0, #36]	; 0x24
    c098:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
    c09c:	e12fff33 	blx	r3
	ctx->tstates += 3;
    c0a0:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	BR.C = doSetRes(ctx, SR_RES, 4, read8(ctx, WR.IY + off));
    c0a4:	e1d410ba 	ldrh	r1, [r4, #10]
    c0a8:	e6ff5070 	uxth	r5, r0
    c0ac:	e2833003 	add	r3, r3, #3
    c0b0:	e0851001 	add	r1, r5, r1
    c0b4:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    c0b8:	e6ff1071 	uxth	r1, r1
    c0bc:	e5943024 	ldr	r3, [r4, #36]	; 0x24
    c0c0:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    c0c4:	e12fff33 	blx	r3
	ctx->tstates += 3;
    c0c8:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	write8(ctx, WR.IY + off, BR.C);	
    c0cc:	e1d410ba 	ldrh	r1, [r4, #10]
		val &= ~(1 << pos);
    c0d0:	e20020ef 	and	r2, r0, #239	; 0xef
    c0d4:	e0851001 	add	r1, r5, r1
	ctx->tstates += 3;
    c0d8:	e2833003 	add	r3, r3, #3
    c0dc:	e5843040 	str	r3, [r4, #64]	; 0x40
	BR.C = doSetRes(ctx, SR_RES, 4, read8(ctx, WR.IY + off));
    c0e0:	e5c42002 	strb	r2, [r4, #2]
	ctx->memWrite(ctx->memParam, addr, val);	
    c0e4:	e5943028 	ldr	r3, [r4, #40]	; 0x28
    c0e8:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    c0ec:	e6ff1071 	uxth	r1, r1
}
    c0f0:	e8bd4070 	pop	{r4, r5, r6, lr}
    c0f4:	e12fff13 	bx	r3

0000c0f8 <LD_C_RES_5_off_IX_d>:


static void LD_C_RES_5_off_IX_d (Z80Context* ctx)
{
	ctx->tstates += 2;
	char off = read8(ctx, ctx->PC++);
    c0f8:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
    c0fc:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	char off = read8(ctx, ctx->PC++);
    c100:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
    c104:	e2833005 	add	r3, r3, #5
{
    c108:	e92d4070 	push	{r4, r5, r6, lr}
    c10c:	e1a04000 	mov	r4, r0
	char off = read8(ctx, ctx->PC++);
    c110:	e1c021bc 	strh	r2, [r0, #28]
    c114:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    c118:	e5903024 	ldr	r3, [r0, #36]	; 0x24
    c11c:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
    c120:	e12fff33 	blx	r3
	ctx->tstates += 3;
    c124:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	BR.C = doSetRes(ctx, SR_RES, 5, read8(ctx, WR.IX + off));
    c128:	e1d410b8 	ldrh	r1, [r4, #8]
    c12c:	e6ff5070 	uxth	r5, r0
    c130:	e2833003 	add	r3, r3, #3
    c134:	e0851001 	add	r1, r5, r1
    c138:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    c13c:	e6ff1071 	uxth	r1, r1
    c140:	e5943024 	ldr	r3, [r4, #36]	; 0x24
    c144:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    c148:	e12fff33 	blx	r3
	ctx->tstates += 3;
    c14c:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	write8(ctx, WR.IX + off, BR.C);	
    c150:	e1d410b8 	ldrh	r1, [r4, #8]
		val &= ~(1 << pos);
    c154:	e20020df 	and	r2, r0, #223	; 0xdf
    c158:	e0851001 	add	r1, r5, r1
	ctx->tstates += 3;
    c15c:	e2833003 	add	r3, r3, #3
    c160:	e5843040 	str	r3, [r4, #64]	; 0x40
	BR.C = doSetRes(ctx, SR_RES, 5, read8(ctx, WR.IX + off));
    c164:	e5c42002 	strb	r2, [r4, #2]
	ctx->memWrite(ctx->memParam, addr, val);	
    c168:	e5943028 	ldr	r3, [r4, #40]	; 0x28
    c16c:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    c170:	e6ff1071 	uxth	r1, r1
}
    c174:	e8bd4070 	pop	{r4, r5, r6, lr}
    c178:	e12fff13 	bx	r3

0000c17c <LD_C_RES_5_off_IY_d>:


static void LD_C_RES_5_off_IY_d (Z80Context* ctx)
{
	ctx->tstates += 2;
	char off = read8(ctx, ctx->PC++);
    c17c:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
    c180:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	char off = read8(ctx, ctx->PC++);
    c184:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
    c188:	e2833005 	add	r3, r3, #5
{
    c18c:	e92d4070 	push	{r4, r5, r6, lr}
    c190:	e1a04000 	mov	r4, r0
	char off = read8(ctx, ctx->PC++);
    c194:	e1c021bc 	strh	r2, [r0, #28]
    c198:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    c19c:	e5903024 	ldr	r3, [r0, #36]	; 0x24
    c1a0:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
    c1a4:	e12fff33 	blx	r3
	ctx->tstates += 3;
    c1a8:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	BR.C = doSetRes(ctx, SR_RES, 5, read8(ctx, WR.IY + off));
    c1ac:	e1d410ba 	ldrh	r1, [r4, #10]
    c1b0:	e6ff5070 	uxth	r5, r0
    c1b4:	e2833003 	add	r3, r3, #3
    c1b8:	e0851001 	add	r1, r5, r1
    c1bc:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    c1c0:	e6ff1071 	uxth	r1, r1
    c1c4:	e5943024 	ldr	r3, [r4, #36]	; 0x24
    c1c8:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    c1cc:	e12fff33 	blx	r3
	ctx->tstates += 3;
    c1d0:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	write8(ctx, WR.IY + off, BR.C);	
    c1d4:	e1d410ba 	ldrh	r1, [r4, #10]
		val &= ~(1 << pos);
    c1d8:	e20020df 	and	r2, r0, #223	; 0xdf
    c1dc:	e0851001 	add	r1, r5, r1
	ctx->tstates += 3;
    c1e0:	e2833003 	add	r3, r3, #3
    c1e4:	e5843040 	str	r3, [r4, #64]	; 0x40
	BR.C = doSetRes(ctx, SR_RES, 5, read8(ctx, WR.IY + off));
    c1e8:	e5c42002 	strb	r2, [r4, #2]
	ctx->memWrite(ctx->memParam, addr, val);	
    c1ec:	e5943028 	ldr	r3, [r4, #40]	; 0x28
    c1f0:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    c1f4:	e6ff1071 	uxth	r1, r1
}
    c1f8:	e8bd4070 	pop	{r4, r5, r6, lr}
    c1fc:	e12fff13 	bx	r3

0000c200 <LD_C_RES_6_off_IX_d>:


static void LD_C_RES_6_off_IX_d (Z80Context* ctx)
{
	ctx->tstates += 2;
	char off = read8(ctx, ctx->PC++);
    c200:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
    c204:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	char off = read8(ctx, ctx->PC++);
    c208:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
    c20c:	e2833005 	add	r3, r3, #5
{
    c210:	e92d4070 	push	{r4, r5, r6, lr}
    c214:	e1a04000 	mov	r4, r0
	char off = read8(ctx, ctx->PC++);
    c218:	e1c021bc 	strh	r2, [r0, #28]
    c21c:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    c220:	e5903024 	ldr	r3, [r0, #36]	; 0x24
    c224:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
    c228:	e12fff33 	blx	r3
	ctx->tstates += 3;
    c22c:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	BR.C = doSetRes(ctx, SR_RES, 6, read8(ctx, WR.IX + off));
    c230:	e1d410b8 	ldrh	r1, [r4, #8]
    c234:	e6ff5070 	uxth	r5, r0
    c238:	e2833003 	add	r3, r3, #3
    c23c:	e0851001 	add	r1, r5, r1
    c240:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    c244:	e6ff1071 	uxth	r1, r1
    c248:	e5943024 	ldr	r3, [r4, #36]	; 0x24
    c24c:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    c250:	e12fff33 	blx	r3
	ctx->tstates += 3;
    c254:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	write8(ctx, WR.IX + off, BR.C);	
    c258:	e1d410b8 	ldrh	r1, [r4, #8]
		val &= ~(1 << pos);
    c25c:	e20020bf 	and	r2, r0, #191	; 0xbf
    c260:	e0851001 	add	r1, r5, r1
	ctx->tstates += 3;
    c264:	e2833003 	add	r3, r3, #3
    c268:	e5843040 	str	r3, [r4, #64]	; 0x40
	BR.C = doSetRes(ctx, SR_RES, 6, read8(ctx, WR.IX + off));
    c26c:	e5c42002 	strb	r2, [r4, #2]
	ctx->memWrite(ctx->memParam, addr, val);	
    c270:	e5943028 	ldr	r3, [r4, #40]	; 0x28
    c274:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    c278:	e6ff1071 	uxth	r1, r1
}
    c27c:	e8bd4070 	pop	{r4, r5, r6, lr}
    c280:	e12fff13 	bx	r3

0000c284 <LD_C_RES_6_off_IY_d>:


static void LD_C_RES_6_off_IY_d (Z80Context* ctx)
{
	ctx->tstates += 2;
	char off = read8(ctx, ctx->PC++);
    c284:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
    c288:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	char off = read8(ctx, ctx->PC++);
    c28c:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
    c290:	e2833005 	add	r3, r3, #5
{
    c294:	e92d4070 	push	{r4, r5, r6, lr}
    c298:	e1a04000 	mov	r4, r0
	char off = read8(ctx, ctx->PC++);
    c29c:	e1c021bc 	strh	r2, [r0, #28]
    c2a0:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    c2a4:	e5903024 	ldr	r3, [r0, #36]	; 0x24
    c2a8:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
    c2ac:	e12fff33 	blx	r3
	ctx->tstates += 3;
    c2b0:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	BR.C = doSetRes(ctx, SR_RES, 6, read8(ctx, WR.IY + off));
    c2b4:	e1d410ba 	ldrh	r1, [r4, #10]
    c2b8:	e6ff5070 	uxth	r5, r0
    c2bc:	e2833003 	add	r3, r3, #3
    c2c0:	e0851001 	add	r1, r5, r1
    c2c4:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    c2c8:	e6ff1071 	uxth	r1, r1
    c2cc:	e5943024 	ldr	r3, [r4, #36]	; 0x24
    c2d0:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    c2d4:	e12fff33 	blx	r3
	ctx->tstates += 3;
    c2d8:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	write8(ctx, WR.IY + off, BR.C);	
    c2dc:	e1d410ba 	ldrh	r1, [r4, #10]
		val &= ~(1 << pos);
    c2e0:	e20020bf 	and	r2, r0, #191	; 0xbf
    c2e4:	e0851001 	add	r1, r5, r1
	ctx->tstates += 3;
    c2e8:	e2833003 	add	r3, r3, #3
    c2ec:	e5843040 	str	r3, [r4, #64]	; 0x40
	BR.C = doSetRes(ctx, SR_RES, 6, read8(ctx, WR.IY + off));
    c2f0:	e5c42002 	strb	r2, [r4, #2]
	ctx->memWrite(ctx->memParam, addr, val);	
    c2f4:	e5943028 	ldr	r3, [r4, #40]	; 0x28
    c2f8:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    c2fc:	e6ff1071 	uxth	r1, r1
}
    c300:	e8bd4070 	pop	{r4, r5, r6, lr}
    c304:	e12fff13 	bx	r3

0000c308 <LD_C_RES_7_off_IX_d>:


static void LD_C_RES_7_off_IX_d (Z80Context* ctx)
{
	ctx->tstates += 2;
	char off = read8(ctx, ctx->PC++);
    c308:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
    c30c:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	char off = read8(ctx, ctx->PC++);
    c310:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
    c314:	e2833005 	add	r3, r3, #5
{
    c318:	e92d4070 	push	{r4, r5, r6, lr}
    c31c:	e1a04000 	mov	r4, r0
	char off = read8(ctx, ctx->PC++);
    c320:	e1c021bc 	strh	r2, [r0, #28]
    c324:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    c328:	e5903024 	ldr	r3, [r0, #36]	; 0x24
    c32c:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
    c330:	e12fff33 	blx	r3
	ctx->tstates += 3;
    c334:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	BR.C = doSetRes(ctx, SR_RES, 7, read8(ctx, WR.IX + off));
    c338:	e1d410b8 	ldrh	r1, [r4, #8]
    c33c:	e6ff5070 	uxth	r5, r0
    c340:	e2833003 	add	r3, r3, #3
    c344:	e0851001 	add	r1, r5, r1
    c348:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    c34c:	e6ff1071 	uxth	r1, r1
    c350:	e5943024 	ldr	r3, [r4, #36]	; 0x24
    c354:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    c358:	e12fff33 	blx	r3
	ctx->tstates += 3;
    c35c:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	write8(ctx, WR.IX + off, BR.C);	
    c360:	e1d410b8 	ldrh	r1, [r4, #8]
		val &= ~(1 << pos);
    c364:	e200207f 	and	r2, r0, #127	; 0x7f
    c368:	e0851001 	add	r1, r5, r1
	ctx->tstates += 3;
    c36c:	e2833003 	add	r3, r3, #3
    c370:	e5843040 	str	r3, [r4, #64]	; 0x40
	BR.C = doSetRes(ctx, SR_RES, 7, read8(ctx, WR.IX + off));
    c374:	e5c42002 	strb	r2, [r4, #2]
	ctx->memWrite(ctx->memParam, addr, val);	
    c378:	e5943028 	ldr	r3, [r4, #40]	; 0x28
    c37c:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    c380:	e6ff1071 	uxth	r1, r1
}
    c384:	e8bd4070 	pop	{r4, r5, r6, lr}
    c388:	e12fff13 	bx	r3

0000c38c <LD_C_RES_7_off_IY_d>:


static void LD_C_RES_7_off_IY_d (Z80Context* ctx)
{
	ctx->tstates += 2;
	char off = read8(ctx, ctx->PC++);
    c38c:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
    c390:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	char off = read8(ctx, ctx->PC++);
    c394:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
    c398:	e2833005 	add	r3, r3, #5
{
    c39c:	e92d4070 	push	{r4, r5, r6, lr}
    c3a0:	e1a04000 	mov	r4, r0
	char off = read8(ctx, ctx->PC++);
    c3a4:	e1c021bc 	strh	r2, [r0, #28]
    c3a8:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    c3ac:	e5903024 	ldr	r3, [r0, #36]	; 0x24
    c3b0:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
    c3b4:	e12fff33 	blx	r3
	ctx->tstates += 3;
    c3b8:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	BR.C = doSetRes(ctx, SR_RES, 7, read8(ctx, WR.IY + off));
    c3bc:	e1d410ba 	ldrh	r1, [r4, #10]
    c3c0:	e6ff5070 	uxth	r5, r0
    c3c4:	e2833003 	add	r3, r3, #3
    c3c8:	e0851001 	add	r1, r5, r1
    c3cc:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    c3d0:	e6ff1071 	uxth	r1, r1
    c3d4:	e5943024 	ldr	r3, [r4, #36]	; 0x24
    c3d8:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    c3dc:	e12fff33 	blx	r3
	ctx->tstates += 3;
    c3e0:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	write8(ctx, WR.IY + off, BR.C);	
    c3e4:	e1d410ba 	ldrh	r1, [r4, #10]
		val &= ~(1 << pos);
    c3e8:	e200207f 	and	r2, r0, #127	; 0x7f
    c3ec:	e0851001 	add	r1, r5, r1
	ctx->tstates += 3;
    c3f0:	e2833003 	add	r3, r3, #3
    c3f4:	e5843040 	str	r3, [r4, #64]	; 0x40
	BR.C = doSetRes(ctx, SR_RES, 7, read8(ctx, WR.IY + off));
    c3f8:	e5c42002 	strb	r2, [r4, #2]
	ctx->memWrite(ctx->memParam, addr, val);	
    c3fc:	e5943028 	ldr	r3, [r4, #40]	; 0x28
    c400:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    c404:	e6ff1071 	uxth	r1, r1
}
    c408:	e8bd4070 	pop	{r4, r5, r6, lr}
    c40c:	e12fff13 	bx	r3

0000c410 <LD_C_SET_0_off_IX_d>:


static void LD_C_SET_0_off_IX_d (Z80Context* ctx)
{
	ctx->tstates += 2;
	char off = read8(ctx, ctx->PC++);
    c410:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
    c414:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	char off = read8(ctx, ctx->PC++);
    c418:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
    c41c:	e2833005 	add	r3, r3, #5
{
    c420:	e92d4070 	push	{r4, r5, r6, lr}
    c424:	e1a04000 	mov	r4, r0
	char off = read8(ctx, ctx->PC++);
    c428:	e1c021bc 	strh	r2, [r0, #28]
    c42c:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    c430:	e5903024 	ldr	r3, [r0, #36]	; 0x24
    c434:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
    c438:	e12fff33 	blx	r3
	ctx->tstates += 3;
    c43c:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	BR.C = doSetRes(ctx, SR_SET, 0, read8(ctx, WR.IX + off));
    c440:	e1d410b8 	ldrh	r1, [r4, #8]
    c444:	e6ff5070 	uxth	r5, r0
    c448:	e2833003 	add	r3, r3, #3
    c44c:	e0851001 	add	r1, r5, r1
    c450:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    c454:	e6ff1071 	uxth	r1, r1
    c458:	e5943024 	ldr	r3, [r4, #36]	; 0x24
    c45c:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    c460:	e12fff33 	blx	r3
	ctx->tstates += 3;
    c464:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	write8(ctx, WR.IX + off, BR.C);	
    c468:	e1d410b8 	ldrh	r1, [r4, #8]
		val |= (1 << pos);
    c46c:	e3802001 	orr	r2, r0, #1
    c470:	e0851001 	add	r1, r5, r1
	ctx->tstates += 3;
    c474:	e2833003 	add	r3, r3, #3
		val |= (1 << pos);
    c478:	e6ef2072 	uxtb	r2, r2
	ctx->tstates += 3;
    c47c:	e5843040 	str	r3, [r4, #64]	; 0x40
	BR.C = doSetRes(ctx, SR_SET, 0, read8(ctx, WR.IX + off));
    c480:	e5c42002 	strb	r2, [r4, #2]
	ctx->memWrite(ctx->memParam, addr, val);	
    c484:	e5943028 	ldr	r3, [r4, #40]	; 0x28
    c488:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    c48c:	e6ff1071 	uxth	r1, r1
}
    c490:	e8bd4070 	pop	{r4, r5, r6, lr}
    c494:	e12fff13 	bx	r3

0000c498 <LD_C_SET_0_off_IY_d>:


static void LD_C_SET_0_off_IY_d (Z80Context* ctx)
{
	ctx->tstates += 2;
	char off = read8(ctx, ctx->PC++);
    c498:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
    c49c:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	char off = read8(ctx, ctx->PC++);
    c4a0:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
    c4a4:	e2833005 	add	r3, r3, #5
{
    c4a8:	e92d4070 	push	{r4, r5, r6, lr}
    c4ac:	e1a04000 	mov	r4, r0
	char off = read8(ctx, ctx->PC++);
    c4b0:	e1c021bc 	strh	r2, [r0, #28]
    c4b4:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    c4b8:	e5903024 	ldr	r3, [r0, #36]	; 0x24
    c4bc:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
    c4c0:	e12fff33 	blx	r3
	ctx->tstates += 3;
    c4c4:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	BR.C = doSetRes(ctx, SR_SET, 0, read8(ctx, WR.IY + off));
    c4c8:	e1d410ba 	ldrh	r1, [r4, #10]
    c4cc:	e6ff5070 	uxth	r5, r0
    c4d0:	e2833003 	add	r3, r3, #3
    c4d4:	e0851001 	add	r1, r5, r1
    c4d8:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    c4dc:	e6ff1071 	uxth	r1, r1
    c4e0:	e5943024 	ldr	r3, [r4, #36]	; 0x24
    c4e4:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    c4e8:	e12fff33 	blx	r3
	ctx->tstates += 3;
    c4ec:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	write8(ctx, WR.IY + off, BR.C);	
    c4f0:	e1d410ba 	ldrh	r1, [r4, #10]
		val |= (1 << pos);
    c4f4:	e3802001 	orr	r2, r0, #1
    c4f8:	e0851001 	add	r1, r5, r1
	ctx->tstates += 3;
    c4fc:	e2833003 	add	r3, r3, #3
		val |= (1 << pos);
    c500:	e6ef2072 	uxtb	r2, r2
	ctx->tstates += 3;
    c504:	e5843040 	str	r3, [r4, #64]	; 0x40
	BR.C = doSetRes(ctx, SR_SET, 0, read8(ctx, WR.IY + off));
    c508:	e5c42002 	strb	r2, [r4, #2]
	ctx->memWrite(ctx->memParam, addr, val);	
    c50c:	e5943028 	ldr	r3, [r4, #40]	; 0x28
    c510:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    c514:	e6ff1071 	uxth	r1, r1
}
    c518:	e8bd4070 	pop	{r4, r5, r6, lr}
    c51c:	e12fff13 	bx	r3

0000c520 <LD_C_SET_1_off_IX_d>:


static void LD_C_SET_1_off_IX_d (Z80Context* ctx)
{
	ctx->tstates += 2;
	char off = read8(ctx, ctx->PC++);
    c520:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
    c524:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	char off = read8(ctx, ctx->PC++);
    c528:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
    c52c:	e2833005 	add	r3, r3, #5
{
    c530:	e92d4070 	push	{r4, r5, r6, lr}
    c534:	e1a04000 	mov	r4, r0
	char off = read8(ctx, ctx->PC++);
    c538:	e1c021bc 	strh	r2, [r0, #28]
    c53c:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    c540:	e5903024 	ldr	r3, [r0, #36]	; 0x24
    c544:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
    c548:	e12fff33 	blx	r3
	ctx->tstates += 3;
    c54c:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	BR.C = doSetRes(ctx, SR_SET, 1, read8(ctx, WR.IX + off));
    c550:	e1d410b8 	ldrh	r1, [r4, #8]
    c554:	e6ff5070 	uxth	r5, r0
    c558:	e2833003 	add	r3, r3, #3
    c55c:	e0851001 	add	r1, r5, r1
    c560:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    c564:	e6ff1071 	uxth	r1, r1
    c568:	e5943024 	ldr	r3, [r4, #36]	; 0x24
    c56c:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    c570:	e12fff33 	blx	r3
	ctx->tstates += 3;
    c574:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	write8(ctx, WR.IX + off, BR.C);	
    c578:	e1d410b8 	ldrh	r1, [r4, #8]
		val |= (1 << pos);
    c57c:	e3802002 	orr	r2, r0, #2
    c580:	e0851001 	add	r1, r5, r1
	ctx->tstates += 3;
    c584:	e2833003 	add	r3, r3, #3
		val |= (1 << pos);
    c588:	e6ef2072 	uxtb	r2, r2
	ctx->tstates += 3;
    c58c:	e5843040 	str	r3, [r4, #64]	; 0x40
	BR.C = doSetRes(ctx, SR_SET, 1, read8(ctx, WR.IX + off));
    c590:	e5c42002 	strb	r2, [r4, #2]
	ctx->memWrite(ctx->memParam, addr, val);	
    c594:	e5943028 	ldr	r3, [r4, #40]	; 0x28
    c598:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    c59c:	e6ff1071 	uxth	r1, r1
}
    c5a0:	e8bd4070 	pop	{r4, r5, r6, lr}
    c5a4:	e12fff13 	bx	r3

0000c5a8 <LD_C_SET_1_off_IY_d>:


static void LD_C_SET_1_off_IY_d (Z80Context* ctx)
{
	ctx->tstates += 2;
	char off = read8(ctx, ctx->PC++);
    c5a8:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
    c5ac:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	char off = read8(ctx, ctx->PC++);
    c5b0:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
    c5b4:	e2833005 	add	r3, r3, #5
{
    c5b8:	e92d4070 	push	{r4, r5, r6, lr}
    c5bc:	e1a04000 	mov	r4, r0
	char off = read8(ctx, ctx->PC++);
    c5c0:	e1c021bc 	strh	r2, [r0, #28]
    c5c4:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    c5c8:	e5903024 	ldr	r3, [r0, #36]	; 0x24
    c5cc:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
    c5d0:	e12fff33 	blx	r3
	ctx->tstates += 3;
    c5d4:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	BR.C = doSetRes(ctx, SR_SET, 1, read8(ctx, WR.IY + off));
    c5d8:	e1d410ba 	ldrh	r1, [r4, #10]
    c5dc:	e6ff5070 	uxth	r5, r0
    c5e0:	e2833003 	add	r3, r3, #3
    c5e4:	e0851001 	add	r1, r5, r1
    c5e8:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    c5ec:	e6ff1071 	uxth	r1, r1
    c5f0:	e5943024 	ldr	r3, [r4, #36]	; 0x24
    c5f4:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    c5f8:	e12fff33 	blx	r3
	ctx->tstates += 3;
    c5fc:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	write8(ctx, WR.IY + off, BR.C);	
    c600:	e1d410ba 	ldrh	r1, [r4, #10]
		val |= (1 << pos);
    c604:	e3802002 	orr	r2, r0, #2
    c608:	e0851001 	add	r1, r5, r1
	ctx->tstates += 3;
    c60c:	e2833003 	add	r3, r3, #3
		val |= (1 << pos);
    c610:	e6ef2072 	uxtb	r2, r2
	ctx->tstates += 3;
    c614:	e5843040 	str	r3, [r4, #64]	; 0x40
	BR.C = doSetRes(ctx, SR_SET, 1, read8(ctx, WR.IY + off));
    c618:	e5c42002 	strb	r2, [r4, #2]
	ctx->memWrite(ctx->memParam, addr, val);	
    c61c:	e5943028 	ldr	r3, [r4, #40]	; 0x28
    c620:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    c624:	e6ff1071 	uxth	r1, r1
}
    c628:	e8bd4070 	pop	{r4, r5, r6, lr}
    c62c:	e12fff13 	bx	r3

0000c630 <LD_C_SET_2_off_IX_d>:


static void LD_C_SET_2_off_IX_d (Z80Context* ctx)
{
	ctx->tstates += 2;
	char off = read8(ctx, ctx->PC++);
    c630:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
    c634:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	char off = read8(ctx, ctx->PC++);
    c638:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
    c63c:	e2833005 	add	r3, r3, #5
{
    c640:	e92d4070 	push	{r4, r5, r6, lr}
    c644:	e1a04000 	mov	r4, r0
	char off = read8(ctx, ctx->PC++);
    c648:	e1c021bc 	strh	r2, [r0, #28]
    c64c:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    c650:	e5903024 	ldr	r3, [r0, #36]	; 0x24
    c654:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
    c658:	e12fff33 	blx	r3
	ctx->tstates += 3;
    c65c:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	BR.C = doSetRes(ctx, SR_SET, 2, read8(ctx, WR.IX + off));
    c660:	e1d410b8 	ldrh	r1, [r4, #8]
    c664:	e6ff5070 	uxth	r5, r0
    c668:	e2833003 	add	r3, r3, #3
    c66c:	e0851001 	add	r1, r5, r1
    c670:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    c674:	e6ff1071 	uxth	r1, r1
    c678:	e5943024 	ldr	r3, [r4, #36]	; 0x24
    c67c:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    c680:	e12fff33 	blx	r3
	ctx->tstates += 3;
    c684:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	write8(ctx, WR.IX + off, BR.C);	
    c688:	e1d410b8 	ldrh	r1, [r4, #8]
		val |= (1 << pos);
    c68c:	e3802004 	orr	r2, r0, #4
    c690:	e0851001 	add	r1, r5, r1
	ctx->tstates += 3;
    c694:	e2833003 	add	r3, r3, #3
		val |= (1 << pos);
    c698:	e6ef2072 	uxtb	r2, r2
	ctx->tstates += 3;
    c69c:	e5843040 	str	r3, [r4, #64]	; 0x40
	BR.C = doSetRes(ctx, SR_SET, 2, read8(ctx, WR.IX + off));
    c6a0:	e5c42002 	strb	r2, [r4, #2]
	ctx->memWrite(ctx->memParam, addr, val);	
    c6a4:	e5943028 	ldr	r3, [r4, #40]	; 0x28
    c6a8:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    c6ac:	e6ff1071 	uxth	r1, r1
}
    c6b0:	e8bd4070 	pop	{r4, r5, r6, lr}
    c6b4:	e12fff13 	bx	r3

0000c6b8 <LD_C_SET_2_off_IY_d>:


static void LD_C_SET_2_off_IY_d (Z80Context* ctx)
{
	ctx->tstates += 2;
	char off = read8(ctx, ctx->PC++);
    c6b8:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
    c6bc:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	char off = read8(ctx, ctx->PC++);
    c6c0:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
    c6c4:	e2833005 	add	r3, r3, #5
{
    c6c8:	e92d4070 	push	{r4, r5, r6, lr}
    c6cc:	e1a04000 	mov	r4, r0
	char off = read8(ctx, ctx->PC++);
    c6d0:	e1c021bc 	strh	r2, [r0, #28]
    c6d4:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    c6d8:	e5903024 	ldr	r3, [r0, #36]	; 0x24
    c6dc:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
    c6e0:	e12fff33 	blx	r3
	ctx->tstates += 3;
    c6e4:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	BR.C = doSetRes(ctx, SR_SET, 2, read8(ctx, WR.IY + off));
    c6e8:	e1d410ba 	ldrh	r1, [r4, #10]
    c6ec:	e6ff5070 	uxth	r5, r0
    c6f0:	e2833003 	add	r3, r3, #3
    c6f4:	e0851001 	add	r1, r5, r1
    c6f8:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    c6fc:	e6ff1071 	uxth	r1, r1
    c700:	e5943024 	ldr	r3, [r4, #36]	; 0x24
    c704:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    c708:	e12fff33 	blx	r3
	ctx->tstates += 3;
    c70c:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	write8(ctx, WR.IY + off, BR.C);	
    c710:	e1d410ba 	ldrh	r1, [r4, #10]
		val |= (1 << pos);
    c714:	e3802004 	orr	r2, r0, #4
    c718:	e0851001 	add	r1, r5, r1
	ctx->tstates += 3;
    c71c:	e2833003 	add	r3, r3, #3
		val |= (1 << pos);
    c720:	e6ef2072 	uxtb	r2, r2
	ctx->tstates += 3;
    c724:	e5843040 	str	r3, [r4, #64]	; 0x40
	BR.C = doSetRes(ctx, SR_SET, 2, read8(ctx, WR.IY + off));
    c728:	e5c42002 	strb	r2, [r4, #2]
	ctx->memWrite(ctx->memParam, addr, val);	
    c72c:	e5943028 	ldr	r3, [r4, #40]	; 0x28
    c730:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    c734:	e6ff1071 	uxth	r1, r1
}
    c738:	e8bd4070 	pop	{r4, r5, r6, lr}
    c73c:	e12fff13 	bx	r3

0000c740 <LD_C_SET_3_off_IX_d>:


static void LD_C_SET_3_off_IX_d (Z80Context* ctx)
{
	ctx->tstates += 2;
	char off = read8(ctx, ctx->PC++);
    c740:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
    c744:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	char off = read8(ctx, ctx->PC++);
    c748:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
    c74c:	e2833005 	add	r3, r3, #5
{
    c750:	e92d4070 	push	{r4, r5, r6, lr}
    c754:	e1a04000 	mov	r4, r0
	char off = read8(ctx, ctx->PC++);
    c758:	e1c021bc 	strh	r2, [r0, #28]
    c75c:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    c760:	e5903024 	ldr	r3, [r0, #36]	; 0x24
    c764:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
    c768:	e12fff33 	blx	r3
	ctx->tstates += 3;
    c76c:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	BR.C = doSetRes(ctx, SR_SET, 3, read8(ctx, WR.IX + off));
    c770:	e1d410b8 	ldrh	r1, [r4, #8]
    c774:	e6ff5070 	uxth	r5, r0
    c778:	e2833003 	add	r3, r3, #3
    c77c:	e0851001 	add	r1, r5, r1
    c780:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    c784:	e6ff1071 	uxth	r1, r1
    c788:	e5943024 	ldr	r3, [r4, #36]	; 0x24
    c78c:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    c790:	e12fff33 	blx	r3
	ctx->tstates += 3;
    c794:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	write8(ctx, WR.IX + off, BR.C);	
    c798:	e1d410b8 	ldrh	r1, [r4, #8]
		val |= (1 << pos);
    c79c:	e3802008 	orr	r2, r0, #8
    c7a0:	e0851001 	add	r1, r5, r1
	ctx->tstates += 3;
    c7a4:	e2833003 	add	r3, r3, #3
		val |= (1 << pos);
    c7a8:	e6ef2072 	uxtb	r2, r2
	ctx->tstates += 3;
    c7ac:	e5843040 	str	r3, [r4, #64]	; 0x40
	BR.C = doSetRes(ctx, SR_SET, 3, read8(ctx, WR.IX + off));
    c7b0:	e5c42002 	strb	r2, [r4, #2]
	ctx->memWrite(ctx->memParam, addr, val);	
    c7b4:	e5943028 	ldr	r3, [r4, #40]	; 0x28
    c7b8:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    c7bc:	e6ff1071 	uxth	r1, r1
}
    c7c0:	e8bd4070 	pop	{r4, r5, r6, lr}
    c7c4:	e12fff13 	bx	r3

0000c7c8 <LD_C_SET_3_off_IY_d>:


static void LD_C_SET_3_off_IY_d (Z80Context* ctx)
{
	ctx->tstates += 2;
	char off = read8(ctx, ctx->PC++);
    c7c8:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
    c7cc:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	char off = read8(ctx, ctx->PC++);
    c7d0:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
    c7d4:	e2833005 	add	r3, r3, #5
{
    c7d8:	e92d4070 	push	{r4, r5, r6, lr}
    c7dc:	e1a04000 	mov	r4, r0
	char off = read8(ctx, ctx->PC++);
    c7e0:	e1c021bc 	strh	r2, [r0, #28]
    c7e4:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    c7e8:	e5903024 	ldr	r3, [r0, #36]	; 0x24
    c7ec:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
    c7f0:	e12fff33 	blx	r3
	ctx->tstates += 3;
    c7f4:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	BR.C = doSetRes(ctx, SR_SET, 3, read8(ctx, WR.IY + off));
    c7f8:	e1d410ba 	ldrh	r1, [r4, #10]
    c7fc:	e6ff5070 	uxth	r5, r0
    c800:	e2833003 	add	r3, r3, #3
    c804:	e0851001 	add	r1, r5, r1
    c808:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    c80c:	e6ff1071 	uxth	r1, r1
    c810:	e5943024 	ldr	r3, [r4, #36]	; 0x24
    c814:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    c818:	e12fff33 	blx	r3
	ctx->tstates += 3;
    c81c:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	write8(ctx, WR.IY + off, BR.C);	
    c820:	e1d410ba 	ldrh	r1, [r4, #10]
		val |= (1 << pos);
    c824:	e3802008 	orr	r2, r0, #8
    c828:	e0851001 	add	r1, r5, r1
	ctx->tstates += 3;
    c82c:	e2833003 	add	r3, r3, #3
		val |= (1 << pos);
    c830:	e6ef2072 	uxtb	r2, r2
	ctx->tstates += 3;
    c834:	e5843040 	str	r3, [r4, #64]	; 0x40
	BR.C = doSetRes(ctx, SR_SET, 3, read8(ctx, WR.IY + off));
    c838:	e5c42002 	strb	r2, [r4, #2]
	ctx->memWrite(ctx->memParam, addr, val);	
    c83c:	e5943028 	ldr	r3, [r4, #40]	; 0x28
    c840:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    c844:	e6ff1071 	uxth	r1, r1
}
    c848:	e8bd4070 	pop	{r4, r5, r6, lr}
    c84c:	e12fff13 	bx	r3

0000c850 <LD_C_SET_4_off_IX_d>:


static void LD_C_SET_4_off_IX_d (Z80Context* ctx)
{
	ctx->tstates += 2;
	char off = read8(ctx, ctx->PC++);
    c850:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
    c854:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	char off = read8(ctx, ctx->PC++);
    c858:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
    c85c:	e2833005 	add	r3, r3, #5
{
    c860:	e92d4070 	push	{r4, r5, r6, lr}
    c864:	e1a04000 	mov	r4, r0
	char off = read8(ctx, ctx->PC++);
    c868:	e1c021bc 	strh	r2, [r0, #28]
    c86c:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    c870:	e5903024 	ldr	r3, [r0, #36]	; 0x24
    c874:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
    c878:	e12fff33 	blx	r3
	ctx->tstates += 3;
    c87c:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	BR.C = doSetRes(ctx, SR_SET, 4, read8(ctx, WR.IX + off));
    c880:	e1d410b8 	ldrh	r1, [r4, #8]
    c884:	e6ff5070 	uxth	r5, r0
    c888:	e2833003 	add	r3, r3, #3
    c88c:	e0851001 	add	r1, r5, r1
    c890:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    c894:	e6ff1071 	uxth	r1, r1
    c898:	e5943024 	ldr	r3, [r4, #36]	; 0x24
    c89c:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    c8a0:	e12fff33 	blx	r3
	ctx->tstates += 3;
    c8a4:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	write8(ctx, WR.IX + off, BR.C);	
    c8a8:	e1d410b8 	ldrh	r1, [r4, #8]
		val |= (1 << pos);
    c8ac:	e3802010 	orr	r2, r0, #16
    c8b0:	e0851001 	add	r1, r5, r1
	ctx->tstates += 3;
    c8b4:	e2833003 	add	r3, r3, #3
		val |= (1 << pos);
    c8b8:	e6ef2072 	uxtb	r2, r2
	ctx->tstates += 3;
    c8bc:	e5843040 	str	r3, [r4, #64]	; 0x40
	BR.C = doSetRes(ctx, SR_SET, 4, read8(ctx, WR.IX + off));
    c8c0:	e5c42002 	strb	r2, [r4, #2]
	ctx->memWrite(ctx->memParam, addr, val);	
    c8c4:	e5943028 	ldr	r3, [r4, #40]	; 0x28
    c8c8:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    c8cc:	e6ff1071 	uxth	r1, r1
}
    c8d0:	e8bd4070 	pop	{r4, r5, r6, lr}
    c8d4:	e12fff13 	bx	r3

0000c8d8 <LD_C_SET_4_off_IY_d>:


static void LD_C_SET_4_off_IY_d (Z80Context* ctx)
{
	ctx->tstates += 2;
	char off = read8(ctx, ctx->PC++);
    c8d8:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
    c8dc:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	char off = read8(ctx, ctx->PC++);
    c8e0:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
    c8e4:	e2833005 	add	r3, r3, #5
{
    c8e8:	e92d4070 	push	{r4, r5, r6, lr}
    c8ec:	e1a04000 	mov	r4, r0
	char off = read8(ctx, ctx->PC++);
    c8f0:	e1c021bc 	strh	r2, [r0, #28]
    c8f4:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    c8f8:	e5903024 	ldr	r3, [r0, #36]	; 0x24
    c8fc:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
    c900:	e12fff33 	blx	r3
	ctx->tstates += 3;
    c904:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	BR.C = doSetRes(ctx, SR_SET, 4, read8(ctx, WR.IY + off));
    c908:	e1d410ba 	ldrh	r1, [r4, #10]
    c90c:	e6ff5070 	uxth	r5, r0
    c910:	e2833003 	add	r3, r3, #3
    c914:	e0851001 	add	r1, r5, r1
    c918:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    c91c:	e6ff1071 	uxth	r1, r1
    c920:	e5943024 	ldr	r3, [r4, #36]	; 0x24
    c924:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    c928:	e12fff33 	blx	r3
	ctx->tstates += 3;
    c92c:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	write8(ctx, WR.IY + off, BR.C);	
    c930:	e1d410ba 	ldrh	r1, [r4, #10]
		val |= (1 << pos);
    c934:	e3802010 	orr	r2, r0, #16
    c938:	e0851001 	add	r1, r5, r1
	ctx->tstates += 3;
    c93c:	e2833003 	add	r3, r3, #3
		val |= (1 << pos);
    c940:	e6ef2072 	uxtb	r2, r2
	ctx->tstates += 3;
    c944:	e5843040 	str	r3, [r4, #64]	; 0x40
	BR.C = doSetRes(ctx, SR_SET, 4, read8(ctx, WR.IY + off));
    c948:	e5c42002 	strb	r2, [r4, #2]
	ctx->memWrite(ctx->memParam, addr, val);	
    c94c:	e5943028 	ldr	r3, [r4, #40]	; 0x28
    c950:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    c954:	e6ff1071 	uxth	r1, r1
}
    c958:	e8bd4070 	pop	{r4, r5, r6, lr}
    c95c:	e12fff13 	bx	r3

0000c960 <LD_C_SET_5_off_IX_d>:


static void LD_C_SET_5_off_IX_d (Z80Context* ctx)
{
	ctx->tstates += 2;
	char off = read8(ctx, ctx->PC++);
    c960:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
    c964:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	char off = read8(ctx, ctx->PC++);
    c968:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
    c96c:	e2833005 	add	r3, r3, #5
{
    c970:	e92d4070 	push	{r4, r5, r6, lr}
    c974:	e1a04000 	mov	r4, r0
	char off = read8(ctx, ctx->PC++);
    c978:	e1c021bc 	strh	r2, [r0, #28]
    c97c:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    c980:	e5903024 	ldr	r3, [r0, #36]	; 0x24
    c984:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
    c988:	e12fff33 	blx	r3
	ctx->tstates += 3;
    c98c:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	BR.C = doSetRes(ctx, SR_SET, 5, read8(ctx, WR.IX + off));
    c990:	e1d410b8 	ldrh	r1, [r4, #8]
    c994:	e6ff5070 	uxth	r5, r0
    c998:	e2833003 	add	r3, r3, #3
    c99c:	e0851001 	add	r1, r5, r1
    c9a0:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    c9a4:	e6ff1071 	uxth	r1, r1
    c9a8:	e5943024 	ldr	r3, [r4, #36]	; 0x24
    c9ac:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    c9b0:	e12fff33 	blx	r3
	ctx->tstates += 3;
    c9b4:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	write8(ctx, WR.IX + off, BR.C);	
    c9b8:	e1d410b8 	ldrh	r1, [r4, #8]
		val |= (1 << pos);
    c9bc:	e3802020 	orr	r2, r0, #32
    c9c0:	e0851001 	add	r1, r5, r1
	ctx->tstates += 3;
    c9c4:	e2833003 	add	r3, r3, #3
		val |= (1 << pos);
    c9c8:	e6ef2072 	uxtb	r2, r2
	ctx->tstates += 3;
    c9cc:	e5843040 	str	r3, [r4, #64]	; 0x40
	BR.C = doSetRes(ctx, SR_SET, 5, read8(ctx, WR.IX + off));
    c9d0:	e5c42002 	strb	r2, [r4, #2]
	ctx->memWrite(ctx->memParam, addr, val);	
    c9d4:	e5943028 	ldr	r3, [r4, #40]	; 0x28
    c9d8:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    c9dc:	e6ff1071 	uxth	r1, r1
}
    c9e0:	e8bd4070 	pop	{r4, r5, r6, lr}
    c9e4:	e12fff13 	bx	r3

0000c9e8 <LD_C_SET_5_off_IY_d>:


static void LD_C_SET_5_off_IY_d (Z80Context* ctx)
{
	ctx->tstates += 2;
	char off = read8(ctx, ctx->PC++);
    c9e8:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
    c9ec:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	char off = read8(ctx, ctx->PC++);
    c9f0:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
    c9f4:	e2833005 	add	r3, r3, #5
{
    c9f8:	e92d4070 	push	{r4, r5, r6, lr}
    c9fc:	e1a04000 	mov	r4, r0
	char off = read8(ctx, ctx->PC++);
    ca00:	e1c021bc 	strh	r2, [r0, #28]
    ca04:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    ca08:	e5903024 	ldr	r3, [r0, #36]	; 0x24
    ca0c:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
    ca10:	e12fff33 	blx	r3
	ctx->tstates += 3;
    ca14:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	BR.C = doSetRes(ctx, SR_SET, 5, read8(ctx, WR.IY + off));
    ca18:	e1d410ba 	ldrh	r1, [r4, #10]
    ca1c:	e6ff5070 	uxth	r5, r0
    ca20:	e2833003 	add	r3, r3, #3
    ca24:	e0851001 	add	r1, r5, r1
    ca28:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    ca2c:	e6ff1071 	uxth	r1, r1
    ca30:	e5943024 	ldr	r3, [r4, #36]	; 0x24
    ca34:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    ca38:	e12fff33 	blx	r3
	ctx->tstates += 3;
    ca3c:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	write8(ctx, WR.IY + off, BR.C);	
    ca40:	e1d410ba 	ldrh	r1, [r4, #10]
		val |= (1 << pos);
    ca44:	e3802020 	orr	r2, r0, #32
    ca48:	e0851001 	add	r1, r5, r1
	ctx->tstates += 3;
    ca4c:	e2833003 	add	r3, r3, #3
		val |= (1 << pos);
    ca50:	e6ef2072 	uxtb	r2, r2
	ctx->tstates += 3;
    ca54:	e5843040 	str	r3, [r4, #64]	; 0x40
	BR.C = doSetRes(ctx, SR_SET, 5, read8(ctx, WR.IY + off));
    ca58:	e5c42002 	strb	r2, [r4, #2]
	ctx->memWrite(ctx->memParam, addr, val);	
    ca5c:	e5943028 	ldr	r3, [r4, #40]	; 0x28
    ca60:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    ca64:	e6ff1071 	uxth	r1, r1
}
    ca68:	e8bd4070 	pop	{r4, r5, r6, lr}
    ca6c:	e12fff13 	bx	r3

0000ca70 <LD_C_SET_6_off_IX_d>:


static void LD_C_SET_6_off_IX_d (Z80Context* ctx)
{
	ctx->tstates += 2;
	char off = read8(ctx, ctx->PC++);
    ca70:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
    ca74:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	char off = read8(ctx, ctx->PC++);
    ca78:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
    ca7c:	e2833005 	add	r3, r3, #5
{
    ca80:	e92d4070 	push	{r4, r5, r6, lr}
    ca84:	e1a04000 	mov	r4, r0
	char off = read8(ctx, ctx->PC++);
    ca88:	e1c021bc 	strh	r2, [r0, #28]
    ca8c:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    ca90:	e5903024 	ldr	r3, [r0, #36]	; 0x24
    ca94:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
    ca98:	e12fff33 	blx	r3
	ctx->tstates += 3;
    ca9c:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	BR.C = doSetRes(ctx, SR_SET, 6, read8(ctx, WR.IX + off));
    caa0:	e1d410b8 	ldrh	r1, [r4, #8]
    caa4:	e6ff5070 	uxth	r5, r0
    caa8:	e2833003 	add	r3, r3, #3
    caac:	e0851001 	add	r1, r5, r1
    cab0:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    cab4:	e6ff1071 	uxth	r1, r1
    cab8:	e5943024 	ldr	r3, [r4, #36]	; 0x24
    cabc:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    cac0:	e12fff33 	blx	r3
	ctx->tstates += 3;
    cac4:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	write8(ctx, WR.IX + off, BR.C);	
    cac8:	e1d410b8 	ldrh	r1, [r4, #8]
		val |= (1 << pos);
    cacc:	e3802040 	orr	r2, r0, #64	; 0x40
    cad0:	e0851001 	add	r1, r5, r1
	ctx->tstates += 3;
    cad4:	e2833003 	add	r3, r3, #3
		val |= (1 << pos);
    cad8:	e6ef2072 	uxtb	r2, r2
	ctx->tstates += 3;
    cadc:	e5843040 	str	r3, [r4, #64]	; 0x40
	BR.C = doSetRes(ctx, SR_SET, 6, read8(ctx, WR.IX + off));
    cae0:	e5c42002 	strb	r2, [r4, #2]
	ctx->memWrite(ctx->memParam, addr, val);	
    cae4:	e5943028 	ldr	r3, [r4, #40]	; 0x28
    cae8:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    caec:	e6ff1071 	uxth	r1, r1
}
    caf0:	e8bd4070 	pop	{r4, r5, r6, lr}
    caf4:	e12fff13 	bx	r3

0000caf8 <LD_C_SET_6_off_IY_d>:


static void LD_C_SET_6_off_IY_d (Z80Context* ctx)
{
	ctx->tstates += 2;
	char off = read8(ctx, ctx->PC++);
    caf8:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
    cafc:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	char off = read8(ctx, ctx->PC++);
    cb00:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
    cb04:	e2833005 	add	r3, r3, #5
{
    cb08:	e92d4070 	push	{r4, r5, r6, lr}
    cb0c:	e1a04000 	mov	r4, r0
	char off = read8(ctx, ctx->PC++);
    cb10:	e1c021bc 	strh	r2, [r0, #28]
    cb14:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    cb18:	e5903024 	ldr	r3, [r0, #36]	; 0x24
    cb1c:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
    cb20:	e12fff33 	blx	r3
	ctx->tstates += 3;
    cb24:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	BR.C = doSetRes(ctx, SR_SET, 6, read8(ctx, WR.IY + off));
    cb28:	e1d410ba 	ldrh	r1, [r4, #10]
    cb2c:	e6ff5070 	uxth	r5, r0
    cb30:	e2833003 	add	r3, r3, #3
    cb34:	e0851001 	add	r1, r5, r1
    cb38:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    cb3c:	e6ff1071 	uxth	r1, r1
    cb40:	e5943024 	ldr	r3, [r4, #36]	; 0x24
    cb44:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    cb48:	e12fff33 	blx	r3
	ctx->tstates += 3;
    cb4c:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	write8(ctx, WR.IY + off, BR.C);	
    cb50:	e1d410ba 	ldrh	r1, [r4, #10]
		val |= (1 << pos);
    cb54:	e3802040 	orr	r2, r0, #64	; 0x40
    cb58:	e0851001 	add	r1, r5, r1
	ctx->tstates += 3;
    cb5c:	e2833003 	add	r3, r3, #3
		val |= (1 << pos);
    cb60:	e6ef2072 	uxtb	r2, r2
	ctx->tstates += 3;
    cb64:	e5843040 	str	r3, [r4, #64]	; 0x40
	BR.C = doSetRes(ctx, SR_SET, 6, read8(ctx, WR.IY + off));
    cb68:	e5c42002 	strb	r2, [r4, #2]
	ctx->memWrite(ctx->memParam, addr, val);	
    cb6c:	e5943028 	ldr	r3, [r4, #40]	; 0x28
    cb70:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    cb74:	e6ff1071 	uxth	r1, r1
}
    cb78:	e8bd4070 	pop	{r4, r5, r6, lr}
    cb7c:	e12fff13 	bx	r3

0000cb80 <LD_C_SET_7_off_IX_d>:


static void LD_C_SET_7_off_IX_d (Z80Context* ctx)
{
	ctx->tstates += 2;
	char off = read8(ctx, ctx->PC++);
    cb80:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
    cb84:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	char off = read8(ctx, ctx->PC++);
    cb88:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
    cb8c:	e2833005 	add	r3, r3, #5
{
    cb90:	e92d4070 	push	{r4, r5, r6, lr}
    cb94:	e1a04000 	mov	r4, r0
	char off = read8(ctx, ctx->PC++);
    cb98:	e1c021bc 	strh	r2, [r0, #28]
    cb9c:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    cba0:	e5903024 	ldr	r3, [r0, #36]	; 0x24
    cba4:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
    cba8:	e12fff33 	blx	r3
	ctx->tstates += 3;
    cbac:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	BR.C = doSetRes(ctx, SR_SET, 7, read8(ctx, WR.IX + off));
    cbb0:	e1d410b8 	ldrh	r1, [r4, #8]
    cbb4:	e6ff5070 	uxth	r5, r0
    cbb8:	e2833003 	add	r3, r3, #3
    cbbc:	e0851001 	add	r1, r5, r1
    cbc0:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    cbc4:	e6ff1071 	uxth	r1, r1
    cbc8:	e5943024 	ldr	r3, [r4, #36]	; 0x24
    cbcc:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    cbd0:	e12fff33 	blx	r3
		val |= (1 << pos);
    cbd4:	e1e00c80 	mvn	r0, r0, lsl #25
    cbd8:	e1e00ca0 	mvn	r0, r0, lsr #25
	ctx->tstates += 3;
    cbdc:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	write8(ctx, WR.IX + off, BR.C);	
    cbe0:	e1d410b8 	ldrh	r1, [r4, #8]
		val |= (1 << pos);
    cbe4:	e6ef2070 	uxtb	r2, r0
    cbe8:	e0851001 	add	r1, r5, r1
	ctx->tstates += 3;
    cbec:	e2833003 	add	r3, r3, #3
    cbf0:	e5843040 	str	r3, [r4, #64]	; 0x40
	BR.C = doSetRes(ctx, SR_SET, 7, read8(ctx, WR.IX + off));
    cbf4:	e5c42002 	strb	r2, [r4, #2]
	ctx->memWrite(ctx->memParam, addr, val);	
    cbf8:	e5943028 	ldr	r3, [r4, #40]	; 0x28
    cbfc:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    cc00:	e6ff1071 	uxth	r1, r1
}
    cc04:	e8bd4070 	pop	{r4, r5, r6, lr}
    cc08:	e12fff13 	bx	r3

0000cc0c <LD_C_SET_7_off_IY_d>:


static void LD_C_SET_7_off_IY_d (Z80Context* ctx)
{
	ctx->tstates += 2;
	char off = read8(ctx, ctx->PC++);
    cc0c:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
    cc10:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	char off = read8(ctx, ctx->PC++);
    cc14:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
    cc18:	e2833005 	add	r3, r3, #5
{
    cc1c:	e92d4070 	push	{r4, r5, r6, lr}
    cc20:	e1a04000 	mov	r4, r0
	char off = read8(ctx, ctx->PC++);
    cc24:	e1c021bc 	strh	r2, [r0, #28]
    cc28:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    cc2c:	e5903024 	ldr	r3, [r0, #36]	; 0x24
    cc30:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
    cc34:	e12fff33 	blx	r3
	ctx->tstates += 3;
    cc38:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	BR.C = doSetRes(ctx, SR_SET, 7, read8(ctx, WR.IY + off));
    cc3c:	e1d410ba 	ldrh	r1, [r4, #10]
    cc40:	e6ff5070 	uxth	r5, r0
    cc44:	e2833003 	add	r3, r3, #3
    cc48:	e0851001 	add	r1, r5, r1
    cc4c:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    cc50:	e6ff1071 	uxth	r1, r1
    cc54:	e5943024 	ldr	r3, [r4, #36]	; 0x24
    cc58:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    cc5c:	e12fff33 	blx	r3
		val |= (1 << pos);
    cc60:	e1e00c80 	mvn	r0, r0, lsl #25
    cc64:	e1e00ca0 	mvn	r0, r0, lsr #25
	ctx->tstates += 3;
    cc68:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	write8(ctx, WR.IY + off, BR.C);	
    cc6c:	e1d410ba 	ldrh	r1, [r4, #10]
		val |= (1 << pos);
    cc70:	e6ef2070 	uxtb	r2, r0
    cc74:	e0851001 	add	r1, r5, r1
	ctx->tstates += 3;
    cc78:	e2833003 	add	r3, r3, #3
    cc7c:	e5843040 	str	r3, [r4, #64]	; 0x40
	BR.C = doSetRes(ctx, SR_SET, 7, read8(ctx, WR.IY + off));
    cc80:	e5c42002 	strb	r2, [r4, #2]
	ctx->memWrite(ctx->memParam, addr, val);	
    cc84:	e5943028 	ldr	r3, [r4, #40]	; 0x28
    cc88:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    cc8c:	e6ff1071 	uxth	r1, r1
}
    cc90:	e8bd4070 	pop	{r4, r5, r6, lr}
    cc94:	e12fff13 	bx	r3

0000cc98 <LD_D_off_HL>:
	ctx->tstates += 3;
    cc98:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	  
}


static void LD_D_off_HL (Z80Context* ctx)
{
    cc9c:	e92d4010 	push	{r4, lr}
    cca0:	e2833003 	add	r3, r3, #3
    cca4:	e5803040 	str	r3, [r0, #64]	; 0x40
    cca8:	e1a04000 	mov	r4, r0
	BR.D = read8(ctx, WR.HL);
    ccac:	e1d010b6 	ldrh	r1, [r0, #6]
	return ctx->memRead(ctx->memParam, addr);	
    ccb0:	e5903024 	ldr	r3, [r0, #36]	; 0x24
    ccb4:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
    ccb8:	e12fff33 	blx	r3
    ccbc:	e5c40005 	strb	r0, [r4, #5]
}
    ccc0:	e8bd8010 	pop	{r4, pc}

0000ccc4 <LD_D_off_IX_d>:


static void LD_D_off_IX_d (Z80Context* ctx)
{
    ccc4:	e92d4070 	push	{r4, r5, r6, lr}
    ccc8:	e1a04000 	mov	r4, r0
	ctx->tstates += 5;
	BR.D = read8(ctx, WR.IX + (char) read8(ctx, ctx->PC++));
    cccc:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 5;
    ccd0:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	BR.D = read8(ctx, WR.IX + (char) read8(ctx, ctx->PC++));
    ccd4:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
    ccd8:	e2833008 	add	r3, r3, #8
    ccdc:	e1c021bc 	strh	r2, [r0, #28]
    cce0:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    cce4:	e5903024 	ldr	r3, [r0, #36]	; 0x24
    cce8:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
    ccec:	e1d450b8 	ldrh	r5, [r4, #8]
    ccf0:	e12fff33 	blx	r3
	ctx->tstates += 3;
    ccf4:	e5943040 	ldr	r3, [r4, #64]	; 0x40
    ccf8:	e0851000 	add	r1, r5, r0
    ccfc:	e2833003 	add	r3, r3, #3
    cd00:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    cd04:	e6ff1071 	uxth	r1, r1
    cd08:	e5943024 	ldr	r3, [r4, #36]	; 0x24
    cd0c:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    cd10:	e12fff33 	blx	r3
    cd14:	e5c40005 	strb	r0, [r4, #5]
}
    cd18:	e8bd8070 	pop	{r4, r5, r6, pc}

0000cd1c <LD_D_off_IY_d>:


static void LD_D_off_IY_d (Z80Context* ctx)
{
    cd1c:	e92d4070 	push	{r4, r5, r6, lr}
    cd20:	e1a04000 	mov	r4, r0
	ctx->tstates += 5;
	BR.D = read8(ctx, WR.IY + (char) read8(ctx, ctx->PC++));
    cd24:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 5;
    cd28:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	BR.D = read8(ctx, WR.IY + (char) read8(ctx, ctx->PC++));
    cd2c:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
    cd30:	e2833008 	add	r3, r3, #8
    cd34:	e1c021bc 	strh	r2, [r0, #28]
    cd38:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    cd3c:	e5903024 	ldr	r3, [r0, #36]	; 0x24
    cd40:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
    cd44:	e1d450ba 	ldrh	r5, [r4, #10]
    cd48:	e12fff33 	blx	r3
	ctx->tstates += 3;
    cd4c:	e5943040 	ldr	r3, [r4, #64]	; 0x40
    cd50:	e0851000 	add	r1, r5, r0
    cd54:	e2833003 	add	r3, r3, #3
    cd58:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    cd5c:	e6ff1071 	uxth	r1, r1
    cd60:	e5943024 	ldr	r3, [r4, #36]	; 0x24
    cd64:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    cd68:	e12fff33 	blx	r3
    cd6c:	e5c40005 	strb	r0, [r4, #5]
}
    cd70:	e8bd8070 	pop	{r4, r5, r6, pc}

0000cd74 <LD_D_A>:


static void LD_D_A (Z80Context* ctx)
{
	BR.D = BR.A;
    cd74:	e5d03001 	ldrb	r3, [r0, #1]
    cd78:	e5c03005 	strb	r3, [r0, #5]
}
    cd7c:	e12fff1e 	bx	lr

0000cd80 <LD_D_B>:


static void LD_D_B (Z80Context* ctx)
{
	BR.D = BR.B;
    cd80:	e5d03003 	ldrb	r3, [r0, #3]
    cd84:	e5c03005 	strb	r3, [r0, #5]
}
    cd88:	e12fff1e 	bx	lr

0000cd8c <LD_D_C>:


static void LD_D_C (Z80Context* ctx)
{
	BR.D = BR.C;
    cd8c:	e5d03002 	ldrb	r3, [r0, #2]
    cd90:	e5c03005 	strb	r3, [r0, #5]
}
    cd94:	e12fff1e 	bx	lr

0000cd98 <LD_D_E>:
}


static void LD_D_E (Z80Context* ctx)
{
	BR.D = BR.E;
    cd98:	e5d03004 	ldrb	r3, [r0, #4]
    cd9c:	e5c03005 	strb	r3, [r0, #5]
}
    cda0:	e12fff1e 	bx	lr

0000cda4 <LD_D_H>:


static void LD_D_H (Z80Context* ctx)
{
	BR.D = BR.H;
    cda4:	e5d03007 	ldrb	r3, [r0, #7]
    cda8:	e5c03005 	strb	r3, [r0, #5]
}
    cdac:	e12fff1e 	bx	lr

0000cdb0 <LD_D_IXh>:


static void LD_D_IXh (Z80Context* ctx)
{
	BR.D = BR.IXh;
    cdb0:	e5d03009 	ldrb	r3, [r0, #9]
    cdb4:	e5c03005 	strb	r3, [r0, #5]
}
    cdb8:	e12fff1e 	bx	lr

0000cdbc <LD_D_IXl>:


static void LD_D_IXl (Z80Context* ctx)
{
	BR.D = BR.IXl;
    cdbc:	e5d03008 	ldrb	r3, [r0, #8]
    cdc0:	e5c03005 	strb	r3, [r0, #5]
}
    cdc4:	e12fff1e 	bx	lr

0000cdc8 <LD_D_IYh>:


static void LD_D_IYh (Z80Context* ctx)
{
	BR.D = BR.IYh;
    cdc8:	e5d0300b 	ldrb	r3, [r0, #11]
    cdcc:	e5c03005 	strb	r3, [r0, #5]
}
    cdd0:	e12fff1e 	bx	lr

0000cdd4 <LD_D_IYl>:


static void LD_D_IYl (Z80Context* ctx)
{
	BR.D = BR.IYl;
    cdd4:	e5d0300a 	ldrb	r3, [r0, #10]
    cdd8:	e5c03005 	strb	r3, [r0, #5]
}
    cddc:	e12fff1e 	bx	lr

0000cde0 <LD_D_L>:


static void LD_D_L (Z80Context* ctx)
{
	BR.D = BR.L;
    cde0:	e5d03006 	ldrb	r3, [r0, #6]
    cde4:	e5c03005 	strb	r3, [r0, #5]
}
    cde8:	e12fff1e 	bx	lr

0000cdec <LD_D_n>:


static void LD_D_n (Z80Context* ctx)
{
	BR.D = read8(ctx, ctx->PC++);
    cdec:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 3;
    cdf0:	e5903040 	ldr	r3, [r0, #64]	; 0x40
    cdf4:	e2812001 	add	r2, r1, #1
    cdf8:	e2833003 	add	r3, r3, #3
{
    cdfc:	e92d4010 	push	{r4, lr}
    ce00:	e5803040 	str	r3, [r0, #64]	; 0x40
    ce04:	e1a04000 	mov	r4, r0
	BR.D = read8(ctx, ctx->PC++);
    ce08:	e1c021bc 	strh	r2, [r0, #28]
	return ctx->memRead(ctx->memParam, addr);	
    ce0c:	e5903024 	ldr	r3, [r0, #36]	; 0x24
    ce10:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
    ce14:	e12fff33 	blx	r3
    ce18:	e5c40005 	strb	r0, [r4, #5]
	
}
    ce1c:	e8bd8010 	pop	{r4, pc}

0000ce20 <LD_D_RES_0_off_IX_d>:


static void LD_D_RES_0_off_IX_d (Z80Context* ctx)
{
	ctx->tstates += 2;
	char off = read8(ctx, ctx->PC++);
    ce20:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
    ce24:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	char off = read8(ctx, ctx->PC++);
    ce28:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
    ce2c:	e2833005 	add	r3, r3, #5
{
    ce30:	e92d4070 	push	{r4, r5, r6, lr}
    ce34:	e1a04000 	mov	r4, r0
	char off = read8(ctx, ctx->PC++);
    ce38:	e1c021bc 	strh	r2, [r0, #28]
    ce3c:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    ce40:	e5903024 	ldr	r3, [r0, #36]	; 0x24
    ce44:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
    ce48:	e12fff33 	blx	r3
	ctx->tstates += 3;
    ce4c:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	BR.D = doSetRes(ctx, SR_RES, 0, read8(ctx, WR.IX + off));
    ce50:	e1d410b8 	ldrh	r1, [r4, #8]
    ce54:	e6ff5070 	uxth	r5, r0
    ce58:	e2833003 	add	r3, r3, #3
    ce5c:	e0851001 	add	r1, r5, r1
    ce60:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    ce64:	e6ff1071 	uxth	r1, r1
    ce68:	e5943024 	ldr	r3, [r4, #36]	; 0x24
    ce6c:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    ce70:	e12fff33 	blx	r3
	ctx->tstates += 3;
    ce74:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	write8(ctx, WR.IX + off, BR.D);	
    ce78:	e1d410b8 	ldrh	r1, [r4, #8]
		val &= ~(1 << pos);
    ce7c:	e20020fe 	and	r2, r0, #254	; 0xfe
    ce80:	e0851001 	add	r1, r5, r1
	ctx->tstates += 3;
    ce84:	e2833003 	add	r3, r3, #3
    ce88:	e5843040 	str	r3, [r4, #64]	; 0x40
	BR.D = doSetRes(ctx, SR_RES, 0, read8(ctx, WR.IX + off));
    ce8c:	e5c42005 	strb	r2, [r4, #5]
	ctx->memWrite(ctx->memParam, addr, val);	
    ce90:	e5943028 	ldr	r3, [r4, #40]	; 0x28
    ce94:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    ce98:	e6ff1071 	uxth	r1, r1
}
    ce9c:	e8bd4070 	pop	{r4, r5, r6, lr}
    cea0:	e12fff13 	bx	r3

0000cea4 <LD_D_RES_0_off_IY_d>:


static void LD_D_RES_0_off_IY_d (Z80Context* ctx)
{
	ctx->tstates += 2;
	char off = read8(ctx, ctx->PC++);
    cea4:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
    cea8:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	char off = read8(ctx, ctx->PC++);
    ceac:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
    ceb0:	e2833005 	add	r3, r3, #5
{
    ceb4:	e92d4070 	push	{r4, r5, r6, lr}
    ceb8:	e1a04000 	mov	r4, r0
	char off = read8(ctx, ctx->PC++);
    cebc:	e1c021bc 	strh	r2, [r0, #28]
    cec0:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    cec4:	e5903024 	ldr	r3, [r0, #36]	; 0x24
    cec8:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
    cecc:	e12fff33 	blx	r3
	ctx->tstates += 3;
    ced0:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	BR.D = doSetRes(ctx, SR_RES, 0, read8(ctx, WR.IY + off));
    ced4:	e1d410ba 	ldrh	r1, [r4, #10]
    ced8:	e6ff5070 	uxth	r5, r0
    cedc:	e2833003 	add	r3, r3, #3
    cee0:	e0851001 	add	r1, r5, r1
    cee4:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    cee8:	e6ff1071 	uxth	r1, r1
    ceec:	e5943024 	ldr	r3, [r4, #36]	; 0x24
    cef0:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    cef4:	e12fff33 	blx	r3
	ctx->tstates += 3;
    cef8:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	write8(ctx, WR.IY + off, BR.D);	
    cefc:	e1d410ba 	ldrh	r1, [r4, #10]
		val &= ~(1 << pos);
    cf00:	e20020fe 	and	r2, r0, #254	; 0xfe
    cf04:	e0851001 	add	r1, r5, r1
	ctx->tstates += 3;
    cf08:	e2833003 	add	r3, r3, #3
    cf0c:	e5843040 	str	r3, [r4, #64]	; 0x40
	BR.D = doSetRes(ctx, SR_RES, 0, read8(ctx, WR.IY + off));
    cf10:	e5c42005 	strb	r2, [r4, #5]
	ctx->memWrite(ctx->memParam, addr, val);	
    cf14:	e5943028 	ldr	r3, [r4, #40]	; 0x28
    cf18:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    cf1c:	e6ff1071 	uxth	r1, r1
}
    cf20:	e8bd4070 	pop	{r4, r5, r6, lr}
    cf24:	e12fff13 	bx	r3

0000cf28 <LD_D_RES_1_off_IX_d>:


static void LD_D_RES_1_off_IX_d (Z80Context* ctx)
{
	ctx->tstates += 2;
	char off = read8(ctx, ctx->PC++);
    cf28:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
    cf2c:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	char off = read8(ctx, ctx->PC++);
    cf30:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
    cf34:	e2833005 	add	r3, r3, #5
{
    cf38:	e92d4070 	push	{r4, r5, r6, lr}
    cf3c:	e1a04000 	mov	r4, r0
	char off = read8(ctx, ctx->PC++);
    cf40:	e1c021bc 	strh	r2, [r0, #28]
    cf44:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    cf48:	e5903024 	ldr	r3, [r0, #36]	; 0x24
    cf4c:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
    cf50:	e12fff33 	blx	r3
	ctx->tstates += 3;
    cf54:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	BR.D = doSetRes(ctx, SR_RES, 1, read8(ctx, WR.IX + off));
    cf58:	e1d410b8 	ldrh	r1, [r4, #8]
    cf5c:	e6ff5070 	uxth	r5, r0
    cf60:	e2833003 	add	r3, r3, #3
    cf64:	e0851001 	add	r1, r5, r1
    cf68:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    cf6c:	e6ff1071 	uxth	r1, r1
    cf70:	e5943024 	ldr	r3, [r4, #36]	; 0x24
    cf74:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    cf78:	e12fff33 	blx	r3
	ctx->tstates += 3;
    cf7c:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	write8(ctx, WR.IX + off, BR.D);	
    cf80:	e1d410b8 	ldrh	r1, [r4, #8]
		val &= ~(1 << pos);
    cf84:	e20020fd 	and	r2, r0, #253	; 0xfd
    cf88:	e0851001 	add	r1, r5, r1
	ctx->tstates += 3;
    cf8c:	e2833003 	add	r3, r3, #3
    cf90:	e5843040 	str	r3, [r4, #64]	; 0x40
	BR.D = doSetRes(ctx, SR_RES, 1, read8(ctx, WR.IX + off));
    cf94:	e5c42005 	strb	r2, [r4, #5]
	ctx->memWrite(ctx->memParam, addr, val);	
    cf98:	e5943028 	ldr	r3, [r4, #40]	; 0x28
    cf9c:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    cfa0:	e6ff1071 	uxth	r1, r1
}
    cfa4:	e8bd4070 	pop	{r4, r5, r6, lr}
    cfa8:	e12fff13 	bx	r3

0000cfac <LD_D_RES_1_off_IY_d>:


static void LD_D_RES_1_off_IY_d (Z80Context* ctx)
{
	ctx->tstates += 2;
	char off = read8(ctx, ctx->PC++);
    cfac:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
    cfb0:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	char off = read8(ctx, ctx->PC++);
    cfb4:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
    cfb8:	e2833005 	add	r3, r3, #5
{
    cfbc:	e92d4070 	push	{r4, r5, r6, lr}
    cfc0:	e1a04000 	mov	r4, r0
	char off = read8(ctx, ctx->PC++);
    cfc4:	e1c021bc 	strh	r2, [r0, #28]
    cfc8:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    cfcc:	e5903024 	ldr	r3, [r0, #36]	; 0x24
    cfd0:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
    cfd4:	e12fff33 	blx	r3
	ctx->tstates += 3;
    cfd8:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	BR.D = doSetRes(ctx, SR_RES, 1, read8(ctx, WR.IY + off));
    cfdc:	e1d410ba 	ldrh	r1, [r4, #10]
    cfe0:	e6ff5070 	uxth	r5, r0
    cfe4:	e2833003 	add	r3, r3, #3
    cfe8:	e0851001 	add	r1, r5, r1
    cfec:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    cff0:	e6ff1071 	uxth	r1, r1
    cff4:	e5943024 	ldr	r3, [r4, #36]	; 0x24
    cff8:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    cffc:	e12fff33 	blx	r3
	ctx->tstates += 3;
    d000:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	write8(ctx, WR.IY + off, BR.D);	
    d004:	e1d410ba 	ldrh	r1, [r4, #10]
		val &= ~(1 << pos);
    d008:	e20020fd 	and	r2, r0, #253	; 0xfd
    d00c:	e0851001 	add	r1, r5, r1
	ctx->tstates += 3;
    d010:	e2833003 	add	r3, r3, #3
    d014:	e5843040 	str	r3, [r4, #64]	; 0x40
	BR.D = doSetRes(ctx, SR_RES, 1, read8(ctx, WR.IY + off));
    d018:	e5c42005 	strb	r2, [r4, #5]
	ctx->memWrite(ctx->memParam, addr, val);	
    d01c:	e5943028 	ldr	r3, [r4, #40]	; 0x28
    d020:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    d024:	e6ff1071 	uxth	r1, r1
}
    d028:	e8bd4070 	pop	{r4, r5, r6, lr}
    d02c:	e12fff13 	bx	r3

0000d030 <LD_D_RES_2_off_IX_d>:


static void LD_D_RES_2_off_IX_d (Z80Context* ctx)
{
	ctx->tstates += 2;
	char off = read8(ctx, ctx->PC++);
    d030:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
    d034:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	char off = read8(ctx, ctx->PC++);
    d038:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
    d03c:	e2833005 	add	r3, r3, #5
{
    d040:	e92d4070 	push	{r4, r5, r6, lr}
    d044:	e1a04000 	mov	r4, r0
	char off = read8(ctx, ctx->PC++);
    d048:	e1c021bc 	strh	r2, [r0, #28]
    d04c:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    d050:	e5903024 	ldr	r3, [r0, #36]	; 0x24
    d054:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
    d058:	e12fff33 	blx	r3
	ctx->tstates += 3;
    d05c:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	BR.D = doSetRes(ctx, SR_RES, 2, read8(ctx, WR.IX + off));
    d060:	e1d410b8 	ldrh	r1, [r4, #8]
    d064:	e6ff5070 	uxth	r5, r0
    d068:	e2833003 	add	r3, r3, #3
    d06c:	e0851001 	add	r1, r5, r1
    d070:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    d074:	e6ff1071 	uxth	r1, r1
    d078:	e5943024 	ldr	r3, [r4, #36]	; 0x24
    d07c:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    d080:	e12fff33 	blx	r3
	ctx->tstates += 3;
    d084:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	write8(ctx, WR.IX + off, BR.D);	
    d088:	e1d410b8 	ldrh	r1, [r4, #8]
		val &= ~(1 << pos);
    d08c:	e20020fb 	and	r2, r0, #251	; 0xfb
    d090:	e0851001 	add	r1, r5, r1
	ctx->tstates += 3;
    d094:	e2833003 	add	r3, r3, #3
    d098:	e5843040 	str	r3, [r4, #64]	; 0x40
	BR.D = doSetRes(ctx, SR_RES, 2, read8(ctx, WR.IX + off));
    d09c:	e5c42005 	strb	r2, [r4, #5]
	ctx->memWrite(ctx->memParam, addr, val);	
    d0a0:	e5943028 	ldr	r3, [r4, #40]	; 0x28
    d0a4:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    d0a8:	e6ff1071 	uxth	r1, r1
}
    d0ac:	e8bd4070 	pop	{r4, r5, r6, lr}
    d0b0:	e12fff13 	bx	r3

0000d0b4 <LD_D_RES_2_off_IY_d>:


static void LD_D_RES_2_off_IY_d (Z80Context* ctx)
{
	ctx->tstates += 2;
	char off = read8(ctx, ctx->PC++);
    d0b4:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
    d0b8:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	char off = read8(ctx, ctx->PC++);
    d0bc:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
    d0c0:	e2833005 	add	r3, r3, #5
{
    d0c4:	e92d4070 	push	{r4, r5, r6, lr}
    d0c8:	e1a04000 	mov	r4, r0
	char off = read8(ctx, ctx->PC++);
    d0cc:	e1c021bc 	strh	r2, [r0, #28]
    d0d0:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    d0d4:	e5903024 	ldr	r3, [r0, #36]	; 0x24
    d0d8:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
    d0dc:	e12fff33 	blx	r3
	ctx->tstates += 3;
    d0e0:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	BR.D = doSetRes(ctx, SR_RES, 2, read8(ctx, WR.IY + off));
    d0e4:	e1d410ba 	ldrh	r1, [r4, #10]
    d0e8:	e6ff5070 	uxth	r5, r0
    d0ec:	e2833003 	add	r3, r3, #3
    d0f0:	e0851001 	add	r1, r5, r1
    d0f4:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    d0f8:	e6ff1071 	uxth	r1, r1
    d0fc:	e5943024 	ldr	r3, [r4, #36]	; 0x24
    d100:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    d104:	e12fff33 	blx	r3
	ctx->tstates += 3;
    d108:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	write8(ctx, WR.IY + off, BR.D);	
    d10c:	e1d410ba 	ldrh	r1, [r4, #10]
		val &= ~(1 << pos);
    d110:	e20020fb 	and	r2, r0, #251	; 0xfb
    d114:	e0851001 	add	r1, r5, r1
	ctx->tstates += 3;
    d118:	e2833003 	add	r3, r3, #3
    d11c:	e5843040 	str	r3, [r4, #64]	; 0x40
	BR.D = doSetRes(ctx, SR_RES, 2, read8(ctx, WR.IY + off));
    d120:	e5c42005 	strb	r2, [r4, #5]
	ctx->memWrite(ctx->memParam, addr, val);	
    d124:	e5943028 	ldr	r3, [r4, #40]	; 0x28
    d128:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    d12c:	e6ff1071 	uxth	r1, r1
}
    d130:	e8bd4070 	pop	{r4, r5, r6, lr}
    d134:	e12fff13 	bx	r3

0000d138 <LD_D_RES_3_off_IX_d>:


static void LD_D_RES_3_off_IX_d (Z80Context* ctx)
{
	ctx->tstates += 2;
	char off = read8(ctx, ctx->PC++);
    d138:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
    d13c:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	char off = read8(ctx, ctx->PC++);
    d140:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
    d144:	e2833005 	add	r3, r3, #5
{
    d148:	e92d4070 	push	{r4, r5, r6, lr}
    d14c:	e1a04000 	mov	r4, r0
	char off = read8(ctx, ctx->PC++);
    d150:	e1c021bc 	strh	r2, [r0, #28]
    d154:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    d158:	e5903024 	ldr	r3, [r0, #36]	; 0x24
    d15c:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
    d160:	e12fff33 	blx	r3
	ctx->tstates += 3;
    d164:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	BR.D = doSetRes(ctx, SR_RES, 3, read8(ctx, WR.IX + off));
    d168:	e1d410b8 	ldrh	r1, [r4, #8]
    d16c:	e6ff5070 	uxth	r5, r0
    d170:	e2833003 	add	r3, r3, #3
    d174:	e0851001 	add	r1, r5, r1
    d178:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    d17c:	e6ff1071 	uxth	r1, r1
    d180:	e5943024 	ldr	r3, [r4, #36]	; 0x24
    d184:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    d188:	e12fff33 	blx	r3
	ctx->tstates += 3;
    d18c:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	write8(ctx, WR.IX + off, BR.D);	
    d190:	e1d410b8 	ldrh	r1, [r4, #8]
		val &= ~(1 << pos);
    d194:	e20020f7 	and	r2, r0, #247	; 0xf7
    d198:	e0851001 	add	r1, r5, r1
	ctx->tstates += 3;
    d19c:	e2833003 	add	r3, r3, #3
    d1a0:	e5843040 	str	r3, [r4, #64]	; 0x40
	BR.D = doSetRes(ctx, SR_RES, 3, read8(ctx, WR.IX + off));
    d1a4:	e5c42005 	strb	r2, [r4, #5]
	ctx->memWrite(ctx->memParam, addr, val);	
    d1a8:	e5943028 	ldr	r3, [r4, #40]	; 0x28
    d1ac:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    d1b0:	e6ff1071 	uxth	r1, r1
}
    d1b4:	e8bd4070 	pop	{r4, r5, r6, lr}
    d1b8:	e12fff13 	bx	r3

0000d1bc <LD_D_RES_3_off_IY_d>:


static void LD_D_RES_3_off_IY_d (Z80Context* ctx)
{
	ctx->tstates += 2;
	char off = read8(ctx, ctx->PC++);
    d1bc:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
    d1c0:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	char off = read8(ctx, ctx->PC++);
    d1c4:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
    d1c8:	e2833005 	add	r3, r3, #5
{
    d1cc:	e92d4070 	push	{r4, r5, r6, lr}
    d1d0:	e1a04000 	mov	r4, r0
	char off = read8(ctx, ctx->PC++);
    d1d4:	e1c021bc 	strh	r2, [r0, #28]
    d1d8:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    d1dc:	e5903024 	ldr	r3, [r0, #36]	; 0x24
    d1e0:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
    d1e4:	e12fff33 	blx	r3
	ctx->tstates += 3;
    d1e8:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	BR.D = doSetRes(ctx, SR_RES, 3, read8(ctx, WR.IY + off));
    d1ec:	e1d410ba 	ldrh	r1, [r4, #10]
    d1f0:	e6ff5070 	uxth	r5, r0
    d1f4:	e2833003 	add	r3, r3, #3
    d1f8:	e0851001 	add	r1, r5, r1
    d1fc:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    d200:	e6ff1071 	uxth	r1, r1
    d204:	e5943024 	ldr	r3, [r4, #36]	; 0x24
    d208:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    d20c:	e12fff33 	blx	r3
	ctx->tstates += 3;
    d210:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	write8(ctx, WR.IY + off, BR.D);	
    d214:	e1d410ba 	ldrh	r1, [r4, #10]
		val &= ~(1 << pos);
    d218:	e20020f7 	and	r2, r0, #247	; 0xf7
    d21c:	e0851001 	add	r1, r5, r1
	ctx->tstates += 3;
    d220:	e2833003 	add	r3, r3, #3
    d224:	e5843040 	str	r3, [r4, #64]	; 0x40
	BR.D = doSetRes(ctx, SR_RES, 3, read8(ctx, WR.IY + off));
    d228:	e5c42005 	strb	r2, [r4, #5]
	ctx->memWrite(ctx->memParam, addr, val);	
    d22c:	e5943028 	ldr	r3, [r4, #40]	; 0x28
    d230:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    d234:	e6ff1071 	uxth	r1, r1
}
    d238:	e8bd4070 	pop	{r4, r5, r6, lr}
    d23c:	e12fff13 	bx	r3

0000d240 <LD_D_RES_4_off_IX_d>:


static void LD_D_RES_4_off_IX_d (Z80Context* ctx)
{
	ctx->tstates += 2;
	char off = read8(ctx, ctx->PC++);
    d240:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
    d244:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	char off = read8(ctx, ctx->PC++);
    d248:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
    d24c:	e2833005 	add	r3, r3, #5
{
    d250:	e92d4070 	push	{r4, r5, r6, lr}
    d254:	e1a04000 	mov	r4, r0
	char off = read8(ctx, ctx->PC++);
    d258:	e1c021bc 	strh	r2, [r0, #28]
    d25c:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    d260:	e5903024 	ldr	r3, [r0, #36]	; 0x24
    d264:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
    d268:	e12fff33 	blx	r3
	ctx->tstates += 3;
    d26c:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	BR.D = doSetRes(ctx, SR_RES, 4, read8(ctx, WR.IX + off));
    d270:	e1d410b8 	ldrh	r1, [r4, #8]
    d274:	e6ff5070 	uxth	r5, r0
    d278:	e2833003 	add	r3, r3, #3
    d27c:	e0851001 	add	r1, r5, r1
    d280:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    d284:	e6ff1071 	uxth	r1, r1
    d288:	e5943024 	ldr	r3, [r4, #36]	; 0x24
    d28c:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    d290:	e12fff33 	blx	r3
	ctx->tstates += 3;
    d294:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	write8(ctx, WR.IX + off, BR.D);	
    d298:	e1d410b8 	ldrh	r1, [r4, #8]
		val &= ~(1 << pos);
    d29c:	e20020ef 	and	r2, r0, #239	; 0xef
    d2a0:	e0851001 	add	r1, r5, r1
	ctx->tstates += 3;
    d2a4:	e2833003 	add	r3, r3, #3
    d2a8:	e5843040 	str	r3, [r4, #64]	; 0x40
	BR.D = doSetRes(ctx, SR_RES, 4, read8(ctx, WR.IX + off));
    d2ac:	e5c42005 	strb	r2, [r4, #5]
	ctx->memWrite(ctx->memParam, addr, val);	
    d2b0:	e5943028 	ldr	r3, [r4, #40]	; 0x28
    d2b4:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    d2b8:	e6ff1071 	uxth	r1, r1
}
    d2bc:	e8bd4070 	pop	{r4, r5, r6, lr}
    d2c0:	e12fff13 	bx	r3

0000d2c4 <LD_D_RES_4_off_IY_d>:


static void LD_D_RES_4_off_IY_d (Z80Context* ctx)
{
	ctx->tstates += 2;
	char off = read8(ctx, ctx->PC++);
    d2c4:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
    d2c8:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	char off = read8(ctx, ctx->PC++);
    d2cc:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
    d2d0:	e2833005 	add	r3, r3, #5
{
    d2d4:	e92d4070 	push	{r4, r5, r6, lr}
    d2d8:	e1a04000 	mov	r4, r0
	char off = read8(ctx, ctx->PC++);
    d2dc:	e1c021bc 	strh	r2, [r0, #28]
    d2e0:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    d2e4:	e5903024 	ldr	r3, [r0, #36]	; 0x24
    d2e8:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
    d2ec:	e12fff33 	blx	r3
	ctx->tstates += 3;
    d2f0:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	BR.D = doSetRes(ctx, SR_RES, 4, read8(ctx, WR.IY + off));
    d2f4:	e1d410ba 	ldrh	r1, [r4, #10]
    d2f8:	e6ff5070 	uxth	r5, r0
    d2fc:	e2833003 	add	r3, r3, #3
    d300:	e0851001 	add	r1, r5, r1
    d304:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    d308:	e6ff1071 	uxth	r1, r1
    d30c:	e5943024 	ldr	r3, [r4, #36]	; 0x24
    d310:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    d314:	e12fff33 	blx	r3
	ctx->tstates += 3;
    d318:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	write8(ctx, WR.IY + off, BR.D);	
    d31c:	e1d410ba 	ldrh	r1, [r4, #10]
		val &= ~(1 << pos);
    d320:	e20020ef 	and	r2, r0, #239	; 0xef
    d324:	e0851001 	add	r1, r5, r1
	ctx->tstates += 3;
    d328:	e2833003 	add	r3, r3, #3
    d32c:	e5843040 	str	r3, [r4, #64]	; 0x40
	BR.D = doSetRes(ctx, SR_RES, 4, read8(ctx, WR.IY + off));
    d330:	e5c42005 	strb	r2, [r4, #5]
	ctx->memWrite(ctx->memParam, addr, val);	
    d334:	e5943028 	ldr	r3, [r4, #40]	; 0x28
    d338:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    d33c:	e6ff1071 	uxth	r1, r1
}
    d340:	e8bd4070 	pop	{r4, r5, r6, lr}
    d344:	e12fff13 	bx	r3

0000d348 <LD_D_RES_5_off_IX_d>:


static void LD_D_RES_5_off_IX_d (Z80Context* ctx)
{
	ctx->tstates += 2;
	char off = read8(ctx, ctx->PC++);
    d348:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
    d34c:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	char off = read8(ctx, ctx->PC++);
    d350:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
    d354:	e2833005 	add	r3, r3, #5
{
    d358:	e92d4070 	push	{r4, r5, r6, lr}
    d35c:	e1a04000 	mov	r4, r0
	char off = read8(ctx, ctx->PC++);
    d360:	e1c021bc 	strh	r2, [r0, #28]
    d364:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    d368:	e5903024 	ldr	r3, [r0, #36]	; 0x24
    d36c:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
    d370:	e12fff33 	blx	r3
	ctx->tstates += 3;
    d374:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	BR.D = doSetRes(ctx, SR_RES, 5, read8(ctx, WR.IX + off));
    d378:	e1d410b8 	ldrh	r1, [r4, #8]
    d37c:	e6ff5070 	uxth	r5, r0
    d380:	e2833003 	add	r3, r3, #3
    d384:	e0851001 	add	r1, r5, r1
    d388:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    d38c:	e6ff1071 	uxth	r1, r1
    d390:	e5943024 	ldr	r3, [r4, #36]	; 0x24
    d394:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    d398:	e12fff33 	blx	r3
	ctx->tstates += 3;
    d39c:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	write8(ctx, WR.IX + off, BR.D);	
    d3a0:	e1d410b8 	ldrh	r1, [r4, #8]
		val &= ~(1 << pos);
    d3a4:	e20020df 	and	r2, r0, #223	; 0xdf
    d3a8:	e0851001 	add	r1, r5, r1
	ctx->tstates += 3;
    d3ac:	e2833003 	add	r3, r3, #3
    d3b0:	e5843040 	str	r3, [r4, #64]	; 0x40
	BR.D = doSetRes(ctx, SR_RES, 5, read8(ctx, WR.IX + off));
    d3b4:	e5c42005 	strb	r2, [r4, #5]
	ctx->memWrite(ctx->memParam, addr, val);	
    d3b8:	e5943028 	ldr	r3, [r4, #40]	; 0x28
    d3bc:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    d3c0:	e6ff1071 	uxth	r1, r1
}
    d3c4:	e8bd4070 	pop	{r4, r5, r6, lr}
    d3c8:	e12fff13 	bx	r3

0000d3cc <LD_D_RES_5_off_IY_d>:


static void LD_D_RES_5_off_IY_d (Z80Context* ctx)
{
	ctx->tstates += 2;
	char off = read8(ctx, ctx->PC++);
    d3cc:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
    d3d0:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	char off = read8(ctx, ctx->PC++);
    d3d4:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
    d3d8:	e2833005 	add	r3, r3, #5
{
    d3dc:	e92d4070 	push	{r4, r5, r6, lr}
    d3e0:	e1a04000 	mov	r4, r0
	char off = read8(ctx, ctx->PC++);
    d3e4:	e1c021bc 	strh	r2, [r0, #28]
    d3e8:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    d3ec:	e5903024 	ldr	r3, [r0, #36]	; 0x24
    d3f0:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
    d3f4:	e12fff33 	blx	r3
	ctx->tstates += 3;
    d3f8:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	BR.D = doSetRes(ctx, SR_RES, 5, read8(ctx, WR.IY + off));
    d3fc:	e1d410ba 	ldrh	r1, [r4, #10]
    d400:	e6ff5070 	uxth	r5, r0
    d404:	e2833003 	add	r3, r3, #3
    d408:	e0851001 	add	r1, r5, r1
    d40c:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    d410:	e6ff1071 	uxth	r1, r1
    d414:	e5943024 	ldr	r3, [r4, #36]	; 0x24
    d418:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    d41c:	e12fff33 	blx	r3
	ctx->tstates += 3;
    d420:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	write8(ctx, WR.IY + off, BR.D);	
    d424:	e1d410ba 	ldrh	r1, [r4, #10]
		val &= ~(1 << pos);
    d428:	e20020df 	and	r2, r0, #223	; 0xdf
    d42c:	e0851001 	add	r1, r5, r1
	ctx->tstates += 3;
    d430:	e2833003 	add	r3, r3, #3
    d434:	e5843040 	str	r3, [r4, #64]	; 0x40
	BR.D = doSetRes(ctx, SR_RES, 5, read8(ctx, WR.IY + off));
    d438:	e5c42005 	strb	r2, [r4, #5]
	ctx->memWrite(ctx->memParam, addr, val);	
    d43c:	e5943028 	ldr	r3, [r4, #40]	; 0x28
    d440:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    d444:	e6ff1071 	uxth	r1, r1
}
    d448:	e8bd4070 	pop	{r4, r5, r6, lr}
    d44c:	e12fff13 	bx	r3

0000d450 <LD_D_RES_6_off_IX_d>:


static void LD_D_RES_6_off_IX_d (Z80Context* ctx)
{
	ctx->tstates += 2;
	char off = read8(ctx, ctx->PC++);
    d450:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
    d454:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	char off = read8(ctx, ctx->PC++);
    d458:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
    d45c:	e2833005 	add	r3, r3, #5
{
    d460:	e92d4070 	push	{r4, r5, r6, lr}
    d464:	e1a04000 	mov	r4, r0
	char off = read8(ctx, ctx->PC++);
    d468:	e1c021bc 	strh	r2, [r0, #28]
    d46c:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    d470:	e5903024 	ldr	r3, [r0, #36]	; 0x24
    d474:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
    d478:	e12fff33 	blx	r3
	ctx->tstates += 3;
    d47c:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	BR.D = doSetRes(ctx, SR_RES, 6, read8(ctx, WR.IX + off));
    d480:	e1d410b8 	ldrh	r1, [r4, #8]
    d484:	e6ff5070 	uxth	r5, r0
    d488:	e2833003 	add	r3, r3, #3
    d48c:	e0851001 	add	r1, r5, r1
    d490:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    d494:	e6ff1071 	uxth	r1, r1
    d498:	e5943024 	ldr	r3, [r4, #36]	; 0x24
    d49c:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    d4a0:	e12fff33 	blx	r3
	ctx->tstates += 3;
    d4a4:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	write8(ctx, WR.IX + off, BR.D);	
    d4a8:	e1d410b8 	ldrh	r1, [r4, #8]
		val &= ~(1 << pos);
    d4ac:	e20020bf 	and	r2, r0, #191	; 0xbf
    d4b0:	e0851001 	add	r1, r5, r1
	ctx->tstates += 3;
    d4b4:	e2833003 	add	r3, r3, #3
    d4b8:	e5843040 	str	r3, [r4, #64]	; 0x40
	BR.D = doSetRes(ctx, SR_RES, 6, read8(ctx, WR.IX + off));
    d4bc:	e5c42005 	strb	r2, [r4, #5]
	ctx->memWrite(ctx->memParam, addr, val);	
    d4c0:	e5943028 	ldr	r3, [r4, #40]	; 0x28
    d4c4:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    d4c8:	e6ff1071 	uxth	r1, r1
}
    d4cc:	e8bd4070 	pop	{r4, r5, r6, lr}
    d4d0:	e12fff13 	bx	r3

0000d4d4 <LD_D_RES_6_off_IY_d>:


static void LD_D_RES_6_off_IY_d (Z80Context* ctx)
{
	ctx->tstates += 2;
	char off = read8(ctx, ctx->PC++);
    d4d4:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
    d4d8:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	char off = read8(ctx, ctx->PC++);
    d4dc:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
    d4e0:	e2833005 	add	r3, r3, #5
{
    d4e4:	e92d4070 	push	{r4, r5, r6, lr}
    d4e8:	e1a04000 	mov	r4, r0
	char off = read8(ctx, ctx->PC++);
    d4ec:	e1c021bc 	strh	r2, [r0, #28]
    d4f0:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    d4f4:	e5903024 	ldr	r3, [r0, #36]	; 0x24
    d4f8:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
    d4fc:	e12fff33 	blx	r3
	ctx->tstates += 3;
    d500:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	BR.D = doSetRes(ctx, SR_RES, 6, read8(ctx, WR.IY + off));
    d504:	e1d410ba 	ldrh	r1, [r4, #10]
    d508:	e6ff5070 	uxth	r5, r0
    d50c:	e2833003 	add	r3, r3, #3
    d510:	e0851001 	add	r1, r5, r1
    d514:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    d518:	e6ff1071 	uxth	r1, r1
    d51c:	e5943024 	ldr	r3, [r4, #36]	; 0x24
    d520:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    d524:	e12fff33 	blx	r3
	ctx->tstates += 3;
    d528:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	write8(ctx, WR.IY + off, BR.D);	
    d52c:	e1d410ba 	ldrh	r1, [r4, #10]
		val &= ~(1 << pos);
    d530:	e20020bf 	and	r2, r0, #191	; 0xbf
    d534:	e0851001 	add	r1, r5, r1
	ctx->tstates += 3;
    d538:	e2833003 	add	r3, r3, #3
    d53c:	e5843040 	str	r3, [r4, #64]	; 0x40
	BR.D = doSetRes(ctx, SR_RES, 6, read8(ctx, WR.IY + off));
    d540:	e5c42005 	strb	r2, [r4, #5]
	ctx->memWrite(ctx->memParam, addr, val);	
    d544:	e5943028 	ldr	r3, [r4, #40]	; 0x28
    d548:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    d54c:	e6ff1071 	uxth	r1, r1
}
    d550:	e8bd4070 	pop	{r4, r5, r6, lr}
    d554:	e12fff13 	bx	r3

0000d558 <LD_D_RES_7_off_IX_d>:


static void LD_D_RES_7_off_IX_d (Z80Context* ctx)
{
	ctx->tstates += 2;
	char off = read8(ctx, ctx->PC++);
    d558:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
    d55c:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	char off = read8(ctx, ctx->PC++);
    d560:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
    d564:	e2833005 	add	r3, r3, #5
{
    d568:	e92d4070 	push	{r4, r5, r6, lr}
    d56c:	e1a04000 	mov	r4, r0
	char off = read8(ctx, ctx->PC++);
    d570:	e1c021bc 	strh	r2, [r0, #28]
    d574:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    d578:	e5903024 	ldr	r3, [r0, #36]	; 0x24
    d57c:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
    d580:	e12fff33 	blx	r3
	ctx->tstates += 3;
    d584:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	BR.D = doSetRes(ctx, SR_RES, 7, read8(ctx, WR.IX + off));
    d588:	e1d410b8 	ldrh	r1, [r4, #8]
    d58c:	e6ff5070 	uxth	r5, r0
    d590:	e2833003 	add	r3, r3, #3
    d594:	e0851001 	add	r1, r5, r1
    d598:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    d59c:	e6ff1071 	uxth	r1, r1
    d5a0:	e5943024 	ldr	r3, [r4, #36]	; 0x24
    d5a4:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    d5a8:	e12fff33 	blx	r3
	ctx->tstates += 3;
    d5ac:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	write8(ctx, WR.IX + off, BR.D);	
    d5b0:	e1d410b8 	ldrh	r1, [r4, #8]
		val &= ~(1 << pos);
    d5b4:	e200207f 	and	r2, r0, #127	; 0x7f
    d5b8:	e0851001 	add	r1, r5, r1
	ctx->tstates += 3;
    d5bc:	e2833003 	add	r3, r3, #3
    d5c0:	e5843040 	str	r3, [r4, #64]	; 0x40
	BR.D = doSetRes(ctx, SR_RES, 7, read8(ctx, WR.IX + off));
    d5c4:	e5c42005 	strb	r2, [r4, #5]
	ctx->memWrite(ctx->memParam, addr, val);	
    d5c8:	e5943028 	ldr	r3, [r4, #40]	; 0x28
    d5cc:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    d5d0:	e6ff1071 	uxth	r1, r1
}
    d5d4:	e8bd4070 	pop	{r4, r5, r6, lr}
    d5d8:	e12fff13 	bx	r3

0000d5dc <LD_D_RES_7_off_IY_d>:


static void LD_D_RES_7_off_IY_d (Z80Context* ctx)
{
	ctx->tstates += 2;
	char off = read8(ctx, ctx->PC++);
    d5dc:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
    d5e0:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	char off = read8(ctx, ctx->PC++);
    d5e4:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
    d5e8:	e2833005 	add	r3, r3, #5
{
    d5ec:	e92d4070 	push	{r4, r5, r6, lr}
    d5f0:	e1a04000 	mov	r4, r0
	char off = read8(ctx, ctx->PC++);
    d5f4:	e1c021bc 	strh	r2, [r0, #28]
    d5f8:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    d5fc:	e5903024 	ldr	r3, [r0, #36]	; 0x24
    d600:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
    d604:	e12fff33 	blx	r3
	ctx->tstates += 3;
    d608:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	BR.D = doSetRes(ctx, SR_RES, 7, read8(ctx, WR.IY + off));
    d60c:	e1d410ba 	ldrh	r1, [r4, #10]
    d610:	e6ff5070 	uxth	r5, r0
    d614:	e2833003 	add	r3, r3, #3
    d618:	e0851001 	add	r1, r5, r1
    d61c:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    d620:	e6ff1071 	uxth	r1, r1
    d624:	e5943024 	ldr	r3, [r4, #36]	; 0x24
    d628:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    d62c:	e12fff33 	blx	r3
	ctx->tstates += 3;
    d630:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	write8(ctx, WR.IY + off, BR.D);	
    d634:	e1d410ba 	ldrh	r1, [r4, #10]
		val &= ~(1 << pos);
    d638:	e200207f 	and	r2, r0, #127	; 0x7f
    d63c:	e0851001 	add	r1, r5, r1
	ctx->tstates += 3;
    d640:	e2833003 	add	r3, r3, #3
    d644:	e5843040 	str	r3, [r4, #64]	; 0x40
	BR.D = doSetRes(ctx, SR_RES, 7, read8(ctx, WR.IY + off));
    d648:	e5c42005 	strb	r2, [r4, #5]
	ctx->memWrite(ctx->memParam, addr, val);	
    d64c:	e5943028 	ldr	r3, [r4, #40]	; 0x28
    d650:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    d654:	e6ff1071 	uxth	r1, r1
}
    d658:	e8bd4070 	pop	{r4, r5, r6, lr}
    d65c:	e12fff13 	bx	r3

0000d660 <LD_D_SET_0_off_IX_d>:


static void LD_D_SET_0_off_IX_d (Z80Context* ctx)
{
	ctx->tstates += 2;
	char off = read8(ctx, ctx->PC++);
    d660:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
    d664:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	char off = read8(ctx, ctx->PC++);
    d668:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
    d66c:	e2833005 	add	r3, r3, #5
{
    d670:	e92d4070 	push	{r4, r5, r6, lr}
    d674:	e1a04000 	mov	r4, r0
	char off = read8(ctx, ctx->PC++);
    d678:	e1c021bc 	strh	r2, [r0, #28]
    d67c:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    d680:	e5903024 	ldr	r3, [r0, #36]	; 0x24
    d684:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
    d688:	e12fff33 	blx	r3
	ctx->tstates += 3;
    d68c:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	BR.D = doSetRes(ctx, SR_SET, 0, read8(ctx, WR.IX + off));
    d690:	e1d410b8 	ldrh	r1, [r4, #8]
    d694:	e6ff5070 	uxth	r5, r0
    d698:	e2833003 	add	r3, r3, #3
    d69c:	e0851001 	add	r1, r5, r1
    d6a0:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    d6a4:	e6ff1071 	uxth	r1, r1
    d6a8:	e5943024 	ldr	r3, [r4, #36]	; 0x24
    d6ac:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    d6b0:	e12fff33 	blx	r3
	ctx->tstates += 3;
    d6b4:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	write8(ctx, WR.IX + off, BR.D);	
    d6b8:	e1d410b8 	ldrh	r1, [r4, #8]
		val |= (1 << pos);
    d6bc:	e3802001 	orr	r2, r0, #1
    d6c0:	e0851001 	add	r1, r5, r1
	ctx->tstates += 3;
    d6c4:	e2833003 	add	r3, r3, #3
		val |= (1 << pos);
    d6c8:	e6ef2072 	uxtb	r2, r2
	ctx->tstates += 3;
    d6cc:	e5843040 	str	r3, [r4, #64]	; 0x40
	BR.D = doSetRes(ctx, SR_SET, 0, read8(ctx, WR.IX + off));
    d6d0:	e5c42005 	strb	r2, [r4, #5]
	ctx->memWrite(ctx->memParam, addr, val);	
    d6d4:	e5943028 	ldr	r3, [r4, #40]	; 0x28
    d6d8:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    d6dc:	e6ff1071 	uxth	r1, r1
}
    d6e0:	e8bd4070 	pop	{r4, r5, r6, lr}
    d6e4:	e12fff13 	bx	r3

0000d6e8 <LD_D_SET_0_off_IY_d>:


static void LD_D_SET_0_off_IY_d (Z80Context* ctx)
{
	ctx->tstates += 2;
	char off = read8(ctx, ctx->PC++);
    d6e8:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
    d6ec:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	char off = read8(ctx, ctx->PC++);
    d6f0:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
    d6f4:	e2833005 	add	r3, r3, #5
{
    d6f8:	e92d4070 	push	{r4, r5, r6, lr}
    d6fc:	e1a04000 	mov	r4, r0
	char off = read8(ctx, ctx->PC++);
    d700:	e1c021bc 	strh	r2, [r0, #28]
    d704:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    d708:	e5903024 	ldr	r3, [r0, #36]	; 0x24
    d70c:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
    d710:	e12fff33 	blx	r3
	ctx->tstates += 3;
    d714:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	BR.D = doSetRes(ctx, SR_SET, 0, read8(ctx, WR.IY + off));
    d718:	e1d410ba 	ldrh	r1, [r4, #10]
    d71c:	e6ff5070 	uxth	r5, r0
    d720:	e2833003 	add	r3, r3, #3
    d724:	e0851001 	add	r1, r5, r1
    d728:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    d72c:	e6ff1071 	uxth	r1, r1
    d730:	e5943024 	ldr	r3, [r4, #36]	; 0x24
    d734:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    d738:	e12fff33 	blx	r3
	ctx->tstates += 3;
    d73c:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	write8(ctx, WR.IY + off, BR.D);	
    d740:	e1d410ba 	ldrh	r1, [r4, #10]
		val |= (1 << pos);
    d744:	e3802001 	orr	r2, r0, #1
    d748:	e0851001 	add	r1, r5, r1
	ctx->tstates += 3;
    d74c:	e2833003 	add	r3, r3, #3
		val |= (1 << pos);
    d750:	e6ef2072 	uxtb	r2, r2
	ctx->tstates += 3;
    d754:	e5843040 	str	r3, [r4, #64]	; 0x40
	BR.D = doSetRes(ctx, SR_SET, 0, read8(ctx, WR.IY + off));
    d758:	e5c42005 	strb	r2, [r4, #5]
	ctx->memWrite(ctx->memParam, addr, val);	
    d75c:	e5943028 	ldr	r3, [r4, #40]	; 0x28
    d760:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    d764:	e6ff1071 	uxth	r1, r1
}
    d768:	e8bd4070 	pop	{r4, r5, r6, lr}
    d76c:	e12fff13 	bx	r3

0000d770 <LD_D_SET_1_off_IX_d>:


static void LD_D_SET_1_off_IX_d (Z80Context* ctx)
{
	ctx->tstates += 2;
	char off = read8(ctx, ctx->PC++);
    d770:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
    d774:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	char off = read8(ctx, ctx->PC++);
    d778:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
    d77c:	e2833005 	add	r3, r3, #5
{
    d780:	e92d4070 	push	{r4, r5, r6, lr}
    d784:	e1a04000 	mov	r4, r0
	char off = read8(ctx, ctx->PC++);
    d788:	e1c021bc 	strh	r2, [r0, #28]
    d78c:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    d790:	e5903024 	ldr	r3, [r0, #36]	; 0x24
    d794:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
    d798:	e12fff33 	blx	r3
	ctx->tstates += 3;
    d79c:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	BR.D = doSetRes(ctx, SR_SET, 1, read8(ctx, WR.IX + off));
    d7a0:	e1d410b8 	ldrh	r1, [r4, #8]
    d7a4:	e6ff5070 	uxth	r5, r0
    d7a8:	e2833003 	add	r3, r3, #3
    d7ac:	e0851001 	add	r1, r5, r1
    d7b0:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    d7b4:	e6ff1071 	uxth	r1, r1
    d7b8:	e5943024 	ldr	r3, [r4, #36]	; 0x24
    d7bc:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    d7c0:	e12fff33 	blx	r3
	ctx->tstates += 3;
    d7c4:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	write8(ctx, WR.IX + off, BR.D);	
    d7c8:	e1d410b8 	ldrh	r1, [r4, #8]
		val |= (1 << pos);
    d7cc:	e3802002 	orr	r2, r0, #2
    d7d0:	e0851001 	add	r1, r5, r1
	ctx->tstates += 3;
    d7d4:	e2833003 	add	r3, r3, #3
		val |= (1 << pos);
    d7d8:	e6ef2072 	uxtb	r2, r2
	ctx->tstates += 3;
    d7dc:	e5843040 	str	r3, [r4, #64]	; 0x40
	BR.D = doSetRes(ctx, SR_SET, 1, read8(ctx, WR.IX + off));
    d7e0:	e5c42005 	strb	r2, [r4, #5]
	ctx->memWrite(ctx->memParam, addr, val);	
    d7e4:	e5943028 	ldr	r3, [r4, #40]	; 0x28
    d7e8:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    d7ec:	e6ff1071 	uxth	r1, r1
}
    d7f0:	e8bd4070 	pop	{r4, r5, r6, lr}
    d7f4:	e12fff13 	bx	r3

0000d7f8 <LD_D_SET_1_off_IY_d>:


static void LD_D_SET_1_off_IY_d (Z80Context* ctx)
{
	ctx->tstates += 2;
	char off = read8(ctx, ctx->PC++);
    d7f8:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
    d7fc:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	char off = read8(ctx, ctx->PC++);
    d800:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
    d804:	e2833005 	add	r3, r3, #5
{
    d808:	e92d4070 	push	{r4, r5, r6, lr}
    d80c:	e1a04000 	mov	r4, r0
	char off = read8(ctx, ctx->PC++);
    d810:	e1c021bc 	strh	r2, [r0, #28]
    d814:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    d818:	e5903024 	ldr	r3, [r0, #36]	; 0x24
    d81c:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
    d820:	e12fff33 	blx	r3
	ctx->tstates += 3;
    d824:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	BR.D = doSetRes(ctx, SR_SET, 1, read8(ctx, WR.IY + off));
    d828:	e1d410ba 	ldrh	r1, [r4, #10]
    d82c:	e6ff5070 	uxth	r5, r0
    d830:	e2833003 	add	r3, r3, #3
    d834:	e0851001 	add	r1, r5, r1
    d838:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    d83c:	e6ff1071 	uxth	r1, r1
    d840:	e5943024 	ldr	r3, [r4, #36]	; 0x24
    d844:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    d848:	e12fff33 	blx	r3
	ctx->tstates += 3;
    d84c:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	write8(ctx, WR.IY + off, BR.D);	
    d850:	e1d410ba 	ldrh	r1, [r4, #10]
		val |= (1 << pos);
    d854:	e3802002 	orr	r2, r0, #2
    d858:	e0851001 	add	r1, r5, r1
	ctx->tstates += 3;
    d85c:	e2833003 	add	r3, r3, #3
		val |= (1 << pos);
    d860:	e6ef2072 	uxtb	r2, r2
	ctx->tstates += 3;
    d864:	e5843040 	str	r3, [r4, #64]	; 0x40
	BR.D = doSetRes(ctx, SR_SET, 1, read8(ctx, WR.IY + off));
    d868:	e5c42005 	strb	r2, [r4, #5]
	ctx->memWrite(ctx->memParam, addr, val);	
    d86c:	e5943028 	ldr	r3, [r4, #40]	; 0x28
    d870:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    d874:	e6ff1071 	uxth	r1, r1
}
    d878:	e8bd4070 	pop	{r4, r5, r6, lr}
    d87c:	e12fff13 	bx	r3

0000d880 <LD_D_SET_2_off_IX_d>:


static void LD_D_SET_2_off_IX_d (Z80Context* ctx)
{
	ctx->tstates += 2;
	char off = read8(ctx, ctx->PC++);
    d880:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
    d884:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	char off = read8(ctx, ctx->PC++);
    d888:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
    d88c:	e2833005 	add	r3, r3, #5
{
    d890:	e92d4070 	push	{r4, r5, r6, lr}
    d894:	e1a04000 	mov	r4, r0
	char off = read8(ctx, ctx->PC++);
    d898:	e1c021bc 	strh	r2, [r0, #28]
    d89c:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    d8a0:	e5903024 	ldr	r3, [r0, #36]	; 0x24
    d8a4:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
    d8a8:	e12fff33 	blx	r3
	ctx->tstates += 3;
    d8ac:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	BR.D = doSetRes(ctx, SR_SET, 2, read8(ctx, WR.IX + off));
    d8b0:	e1d410b8 	ldrh	r1, [r4, #8]
    d8b4:	e6ff5070 	uxth	r5, r0
    d8b8:	e2833003 	add	r3, r3, #3
    d8bc:	e0851001 	add	r1, r5, r1
    d8c0:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    d8c4:	e6ff1071 	uxth	r1, r1
    d8c8:	e5943024 	ldr	r3, [r4, #36]	; 0x24
    d8cc:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    d8d0:	e12fff33 	blx	r3
	ctx->tstates += 3;
    d8d4:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	write8(ctx, WR.IX + off, BR.D);	
    d8d8:	e1d410b8 	ldrh	r1, [r4, #8]
		val |= (1 << pos);
    d8dc:	e3802004 	orr	r2, r0, #4
    d8e0:	e0851001 	add	r1, r5, r1
	ctx->tstates += 3;
    d8e4:	e2833003 	add	r3, r3, #3
		val |= (1 << pos);
    d8e8:	e6ef2072 	uxtb	r2, r2
	ctx->tstates += 3;
    d8ec:	e5843040 	str	r3, [r4, #64]	; 0x40
	BR.D = doSetRes(ctx, SR_SET, 2, read8(ctx, WR.IX + off));
    d8f0:	e5c42005 	strb	r2, [r4, #5]
	ctx->memWrite(ctx->memParam, addr, val);	
    d8f4:	e5943028 	ldr	r3, [r4, #40]	; 0x28
    d8f8:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    d8fc:	e6ff1071 	uxth	r1, r1
}
    d900:	e8bd4070 	pop	{r4, r5, r6, lr}
    d904:	e12fff13 	bx	r3

0000d908 <LD_D_SET_2_off_IY_d>:


static void LD_D_SET_2_off_IY_d (Z80Context* ctx)
{
	ctx->tstates += 2;
	char off = read8(ctx, ctx->PC++);
    d908:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
    d90c:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	char off = read8(ctx, ctx->PC++);
    d910:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
    d914:	e2833005 	add	r3, r3, #5
{
    d918:	e92d4070 	push	{r4, r5, r6, lr}
    d91c:	e1a04000 	mov	r4, r0
	char off = read8(ctx, ctx->PC++);
    d920:	e1c021bc 	strh	r2, [r0, #28]
    d924:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    d928:	e5903024 	ldr	r3, [r0, #36]	; 0x24
    d92c:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
    d930:	e12fff33 	blx	r3
	ctx->tstates += 3;
    d934:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	BR.D = doSetRes(ctx, SR_SET, 2, read8(ctx, WR.IY + off));
    d938:	e1d410ba 	ldrh	r1, [r4, #10]
    d93c:	e6ff5070 	uxth	r5, r0
    d940:	e2833003 	add	r3, r3, #3
    d944:	e0851001 	add	r1, r5, r1
    d948:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    d94c:	e6ff1071 	uxth	r1, r1
    d950:	e5943024 	ldr	r3, [r4, #36]	; 0x24
    d954:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    d958:	e12fff33 	blx	r3
	ctx->tstates += 3;
    d95c:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	write8(ctx, WR.IY + off, BR.D);	
    d960:	e1d410ba 	ldrh	r1, [r4, #10]
		val |= (1 << pos);
    d964:	e3802004 	orr	r2, r0, #4
    d968:	e0851001 	add	r1, r5, r1
	ctx->tstates += 3;
    d96c:	e2833003 	add	r3, r3, #3
		val |= (1 << pos);
    d970:	e6ef2072 	uxtb	r2, r2
	ctx->tstates += 3;
    d974:	e5843040 	str	r3, [r4, #64]	; 0x40
	BR.D = doSetRes(ctx, SR_SET, 2, read8(ctx, WR.IY + off));
    d978:	e5c42005 	strb	r2, [r4, #5]
	ctx->memWrite(ctx->memParam, addr, val);	
    d97c:	e5943028 	ldr	r3, [r4, #40]	; 0x28
    d980:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    d984:	e6ff1071 	uxth	r1, r1
}
    d988:	e8bd4070 	pop	{r4, r5, r6, lr}
    d98c:	e12fff13 	bx	r3

0000d990 <LD_D_SET_3_off_IX_d>:


static void LD_D_SET_3_off_IX_d (Z80Context* ctx)
{
	ctx->tstates += 2;
	char off = read8(ctx, ctx->PC++);
    d990:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
    d994:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	char off = read8(ctx, ctx->PC++);
    d998:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
    d99c:	e2833005 	add	r3, r3, #5
{
    d9a0:	e92d4070 	push	{r4, r5, r6, lr}
    d9a4:	e1a04000 	mov	r4, r0
	char off = read8(ctx, ctx->PC++);
    d9a8:	e1c021bc 	strh	r2, [r0, #28]
    d9ac:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    d9b0:	e5903024 	ldr	r3, [r0, #36]	; 0x24
    d9b4:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
    d9b8:	e12fff33 	blx	r3
	ctx->tstates += 3;
    d9bc:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	BR.D = doSetRes(ctx, SR_SET, 3, read8(ctx, WR.IX + off));
    d9c0:	e1d410b8 	ldrh	r1, [r4, #8]
    d9c4:	e6ff5070 	uxth	r5, r0
    d9c8:	e2833003 	add	r3, r3, #3
    d9cc:	e0851001 	add	r1, r5, r1
    d9d0:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    d9d4:	e6ff1071 	uxth	r1, r1
    d9d8:	e5943024 	ldr	r3, [r4, #36]	; 0x24
    d9dc:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    d9e0:	e12fff33 	blx	r3
	ctx->tstates += 3;
    d9e4:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	write8(ctx, WR.IX + off, BR.D);	
    d9e8:	e1d410b8 	ldrh	r1, [r4, #8]
		val |= (1 << pos);
    d9ec:	e3802008 	orr	r2, r0, #8
    d9f0:	e0851001 	add	r1, r5, r1
	ctx->tstates += 3;
    d9f4:	e2833003 	add	r3, r3, #3
		val |= (1 << pos);
    d9f8:	e6ef2072 	uxtb	r2, r2
	ctx->tstates += 3;
    d9fc:	e5843040 	str	r3, [r4, #64]	; 0x40
	BR.D = doSetRes(ctx, SR_SET, 3, read8(ctx, WR.IX + off));
    da00:	e5c42005 	strb	r2, [r4, #5]
	ctx->memWrite(ctx->memParam, addr, val);	
    da04:	e5943028 	ldr	r3, [r4, #40]	; 0x28
    da08:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    da0c:	e6ff1071 	uxth	r1, r1
}
    da10:	e8bd4070 	pop	{r4, r5, r6, lr}
    da14:	e12fff13 	bx	r3

0000da18 <LD_D_SET_3_off_IY_d>:


static void LD_D_SET_3_off_IY_d (Z80Context* ctx)
{
	ctx->tstates += 2;
	char off = read8(ctx, ctx->PC++);
    da18:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
    da1c:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	char off = read8(ctx, ctx->PC++);
    da20:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
    da24:	e2833005 	add	r3, r3, #5
{
    da28:	e92d4070 	push	{r4, r5, r6, lr}
    da2c:	e1a04000 	mov	r4, r0
	char off = read8(ctx, ctx->PC++);
    da30:	e1c021bc 	strh	r2, [r0, #28]
    da34:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    da38:	e5903024 	ldr	r3, [r0, #36]	; 0x24
    da3c:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
    da40:	e12fff33 	blx	r3
	ctx->tstates += 3;
    da44:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	BR.D = doSetRes(ctx, SR_SET, 3, read8(ctx, WR.IY + off));
    da48:	e1d410ba 	ldrh	r1, [r4, #10]
    da4c:	e6ff5070 	uxth	r5, r0
    da50:	e2833003 	add	r3, r3, #3
    da54:	e0851001 	add	r1, r5, r1
    da58:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    da5c:	e6ff1071 	uxth	r1, r1
    da60:	e5943024 	ldr	r3, [r4, #36]	; 0x24
    da64:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    da68:	e12fff33 	blx	r3
	ctx->tstates += 3;
    da6c:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	write8(ctx, WR.IY + off, BR.D);	
    da70:	e1d410ba 	ldrh	r1, [r4, #10]
		val |= (1 << pos);
    da74:	e3802008 	orr	r2, r0, #8
    da78:	e0851001 	add	r1, r5, r1
	ctx->tstates += 3;
    da7c:	e2833003 	add	r3, r3, #3
		val |= (1 << pos);
    da80:	e6ef2072 	uxtb	r2, r2
	ctx->tstates += 3;
    da84:	e5843040 	str	r3, [r4, #64]	; 0x40
	BR.D = doSetRes(ctx, SR_SET, 3, read8(ctx, WR.IY + off));
    da88:	e5c42005 	strb	r2, [r4, #5]
	ctx->memWrite(ctx->memParam, addr, val);	
    da8c:	e5943028 	ldr	r3, [r4, #40]	; 0x28
    da90:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    da94:	e6ff1071 	uxth	r1, r1
}
    da98:	e8bd4070 	pop	{r4, r5, r6, lr}
    da9c:	e12fff13 	bx	r3

0000daa0 <LD_D_SET_4_off_IX_d>:


static void LD_D_SET_4_off_IX_d (Z80Context* ctx)
{
	ctx->tstates += 2;
	char off = read8(ctx, ctx->PC++);
    daa0:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
    daa4:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	char off = read8(ctx, ctx->PC++);
    daa8:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
    daac:	e2833005 	add	r3, r3, #5
{
    dab0:	e92d4070 	push	{r4, r5, r6, lr}
    dab4:	e1a04000 	mov	r4, r0
	char off = read8(ctx, ctx->PC++);
    dab8:	e1c021bc 	strh	r2, [r0, #28]
    dabc:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    dac0:	e5903024 	ldr	r3, [r0, #36]	; 0x24
    dac4:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
    dac8:	e12fff33 	blx	r3
	ctx->tstates += 3;
    dacc:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	BR.D = doSetRes(ctx, SR_SET, 4, read8(ctx, WR.IX + off));
    dad0:	e1d410b8 	ldrh	r1, [r4, #8]
    dad4:	e6ff5070 	uxth	r5, r0
    dad8:	e2833003 	add	r3, r3, #3
    dadc:	e0851001 	add	r1, r5, r1
    dae0:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    dae4:	e6ff1071 	uxth	r1, r1
    dae8:	e5943024 	ldr	r3, [r4, #36]	; 0x24
    daec:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    daf0:	e12fff33 	blx	r3
	ctx->tstates += 3;
    daf4:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	write8(ctx, WR.IX + off, BR.D);	
    daf8:	e1d410b8 	ldrh	r1, [r4, #8]
		val |= (1 << pos);
    dafc:	e3802010 	orr	r2, r0, #16
    db00:	e0851001 	add	r1, r5, r1
	ctx->tstates += 3;
    db04:	e2833003 	add	r3, r3, #3
		val |= (1 << pos);
    db08:	e6ef2072 	uxtb	r2, r2
	ctx->tstates += 3;
    db0c:	e5843040 	str	r3, [r4, #64]	; 0x40
	BR.D = doSetRes(ctx, SR_SET, 4, read8(ctx, WR.IX + off));
    db10:	e5c42005 	strb	r2, [r4, #5]
	ctx->memWrite(ctx->memParam, addr, val);	
    db14:	e5943028 	ldr	r3, [r4, #40]	; 0x28
    db18:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    db1c:	e6ff1071 	uxth	r1, r1
}
    db20:	e8bd4070 	pop	{r4, r5, r6, lr}
    db24:	e12fff13 	bx	r3

0000db28 <LD_D_SET_4_off_IY_d>:


static void LD_D_SET_4_off_IY_d (Z80Context* ctx)
{
	ctx->tstates += 2;
	char off = read8(ctx, ctx->PC++);
    db28:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
    db2c:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	char off = read8(ctx, ctx->PC++);
    db30:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
    db34:	e2833005 	add	r3, r3, #5
{
    db38:	e92d4070 	push	{r4, r5, r6, lr}
    db3c:	e1a04000 	mov	r4, r0
	char off = read8(ctx, ctx->PC++);
    db40:	e1c021bc 	strh	r2, [r0, #28]
    db44:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    db48:	e5903024 	ldr	r3, [r0, #36]	; 0x24
    db4c:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
    db50:	e12fff33 	blx	r3
	ctx->tstates += 3;
    db54:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	BR.D = doSetRes(ctx, SR_SET, 4, read8(ctx, WR.IY + off));
    db58:	e1d410ba 	ldrh	r1, [r4, #10]
    db5c:	e6ff5070 	uxth	r5, r0
    db60:	e2833003 	add	r3, r3, #3
    db64:	e0851001 	add	r1, r5, r1
    db68:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    db6c:	e6ff1071 	uxth	r1, r1
    db70:	e5943024 	ldr	r3, [r4, #36]	; 0x24
    db74:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    db78:	e12fff33 	blx	r3
	ctx->tstates += 3;
    db7c:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	write8(ctx, WR.IY + off, BR.D);	
    db80:	e1d410ba 	ldrh	r1, [r4, #10]
		val |= (1 << pos);
    db84:	e3802010 	orr	r2, r0, #16
    db88:	e0851001 	add	r1, r5, r1
	ctx->tstates += 3;
    db8c:	e2833003 	add	r3, r3, #3
		val |= (1 << pos);
    db90:	e6ef2072 	uxtb	r2, r2
	ctx->tstates += 3;
    db94:	e5843040 	str	r3, [r4, #64]	; 0x40
	BR.D = doSetRes(ctx, SR_SET, 4, read8(ctx, WR.IY + off));
    db98:	e5c42005 	strb	r2, [r4, #5]
	ctx->memWrite(ctx->memParam, addr, val);	
    db9c:	e5943028 	ldr	r3, [r4, #40]	; 0x28
    dba0:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    dba4:	e6ff1071 	uxth	r1, r1
}
    dba8:	e8bd4070 	pop	{r4, r5, r6, lr}
    dbac:	e12fff13 	bx	r3

0000dbb0 <LD_D_SET_5_off_IX_d>:


static void LD_D_SET_5_off_IX_d (Z80Context* ctx)
{
	ctx->tstates += 2;
	char off = read8(ctx, ctx->PC++);
    dbb0:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
    dbb4:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	char off = read8(ctx, ctx->PC++);
    dbb8:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
    dbbc:	e2833005 	add	r3, r3, #5
{
    dbc0:	e92d4070 	push	{r4, r5, r6, lr}
    dbc4:	e1a04000 	mov	r4, r0
	char off = read8(ctx, ctx->PC++);
    dbc8:	e1c021bc 	strh	r2, [r0, #28]
    dbcc:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    dbd0:	e5903024 	ldr	r3, [r0, #36]	; 0x24
    dbd4:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
    dbd8:	e12fff33 	blx	r3
	ctx->tstates += 3;
    dbdc:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	BR.D = doSetRes(ctx, SR_SET, 5, read8(ctx, WR.IX + off));
    dbe0:	e1d410b8 	ldrh	r1, [r4, #8]
    dbe4:	e6ff5070 	uxth	r5, r0
    dbe8:	e2833003 	add	r3, r3, #3
    dbec:	e0851001 	add	r1, r5, r1
    dbf0:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    dbf4:	e6ff1071 	uxth	r1, r1
    dbf8:	e5943024 	ldr	r3, [r4, #36]	; 0x24
    dbfc:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    dc00:	e12fff33 	blx	r3
	ctx->tstates += 3;
    dc04:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	write8(ctx, WR.IX + off, BR.D);	
    dc08:	e1d410b8 	ldrh	r1, [r4, #8]
		val |= (1 << pos);
    dc0c:	e3802020 	orr	r2, r0, #32
    dc10:	e0851001 	add	r1, r5, r1
	ctx->tstates += 3;
    dc14:	e2833003 	add	r3, r3, #3
		val |= (1 << pos);
    dc18:	e6ef2072 	uxtb	r2, r2
	ctx->tstates += 3;
    dc1c:	e5843040 	str	r3, [r4, #64]	; 0x40
	BR.D = doSetRes(ctx, SR_SET, 5, read8(ctx, WR.IX + off));
    dc20:	e5c42005 	strb	r2, [r4, #5]
	ctx->memWrite(ctx->memParam, addr, val);	
    dc24:	e5943028 	ldr	r3, [r4, #40]	; 0x28
    dc28:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    dc2c:	e6ff1071 	uxth	r1, r1
}
    dc30:	e8bd4070 	pop	{r4, r5, r6, lr}
    dc34:	e12fff13 	bx	r3

0000dc38 <LD_D_SET_5_off_IY_d>:


static void LD_D_SET_5_off_IY_d (Z80Context* ctx)
{
	ctx->tstates += 2;
	char off = read8(ctx, ctx->PC++);
    dc38:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
    dc3c:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	char off = read8(ctx, ctx->PC++);
    dc40:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
    dc44:	e2833005 	add	r3, r3, #5
{
    dc48:	e92d4070 	push	{r4, r5, r6, lr}
    dc4c:	e1a04000 	mov	r4, r0
	char off = read8(ctx, ctx->PC++);
    dc50:	e1c021bc 	strh	r2, [r0, #28]
    dc54:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    dc58:	e5903024 	ldr	r3, [r0, #36]	; 0x24
    dc5c:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
    dc60:	e12fff33 	blx	r3
	ctx->tstates += 3;
    dc64:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	BR.D = doSetRes(ctx, SR_SET, 5, read8(ctx, WR.IY + off));
    dc68:	e1d410ba 	ldrh	r1, [r4, #10]
    dc6c:	e6ff5070 	uxth	r5, r0
    dc70:	e2833003 	add	r3, r3, #3
    dc74:	e0851001 	add	r1, r5, r1
    dc78:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    dc7c:	e6ff1071 	uxth	r1, r1
    dc80:	e5943024 	ldr	r3, [r4, #36]	; 0x24
    dc84:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    dc88:	e12fff33 	blx	r3
	ctx->tstates += 3;
    dc8c:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	write8(ctx, WR.IY + off, BR.D);	
    dc90:	e1d410ba 	ldrh	r1, [r4, #10]
		val |= (1 << pos);
    dc94:	e3802020 	orr	r2, r0, #32
    dc98:	e0851001 	add	r1, r5, r1
	ctx->tstates += 3;
    dc9c:	e2833003 	add	r3, r3, #3
		val |= (1 << pos);
    dca0:	e6ef2072 	uxtb	r2, r2
	ctx->tstates += 3;
    dca4:	e5843040 	str	r3, [r4, #64]	; 0x40
	BR.D = doSetRes(ctx, SR_SET, 5, read8(ctx, WR.IY + off));
    dca8:	e5c42005 	strb	r2, [r4, #5]
	ctx->memWrite(ctx->memParam, addr, val);	
    dcac:	e5943028 	ldr	r3, [r4, #40]	; 0x28
    dcb0:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    dcb4:	e6ff1071 	uxth	r1, r1
}
    dcb8:	e8bd4070 	pop	{r4, r5, r6, lr}
    dcbc:	e12fff13 	bx	r3

0000dcc0 <LD_D_SET_6_off_IX_d>:


static void LD_D_SET_6_off_IX_d (Z80Context* ctx)
{
	ctx->tstates += 2;
	char off = read8(ctx, ctx->PC++);
    dcc0:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
    dcc4:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	char off = read8(ctx, ctx->PC++);
    dcc8:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
    dccc:	e2833005 	add	r3, r3, #5
{
    dcd0:	e92d4070 	push	{r4, r5, r6, lr}
    dcd4:	e1a04000 	mov	r4, r0
	char off = read8(ctx, ctx->PC++);
    dcd8:	e1c021bc 	strh	r2, [r0, #28]
    dcdc:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    dce0:	e5903024 	ldr	r3, [r0, #36]	; 0x24
    dce4:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
    dce8:	e12fff33 	blx	r3
	ctx->tstates += 3;
    dcec:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	BR.D = doSetRes(ctx, SR_SET, 6, read8(ctx, WR.IX + off));
    dcf0:	e1d410b8 	ldrh	r1, [r4, #8]
    dcf4:	e6ff5070 	uxth	r5, r0
    dcf8:	e2833003 	add	r3, r3, #3
    dcfc:	e0851001 	add	r1, r5, r1
    dd00:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    dd04:	e6ff1071 	uxth	r1, r1
    dd08:	e5943024 	ldr	r3, [r4, #36]	; 0x24
    dd0c:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    dd10:	e12fff33 	blx	r3
	ctx->tstates += 3;
    dd14:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	write8(ctx, WR.IX + off, BR.D);	
    dd18:	e1d410b8 	ldrh	r1, [r4, #8]
		val |= (1 << pos);
    dd1c:	e3802040 	orr	r2, r0, #64	; 0x40
    dd20:	e0851001 	add	r1, r5, r1
	ctx->tstates += 3;
    dd24:	e2833003 	add	r3, r3, #3
		val |= (1 << pos);
    dd28:	e6ef2072 	uxtb	r2, r2
	ctx->tstates += 3;
    dd2c:	e5843040 	str	r3, [r4, #64]	; 0x40
	BR.D = doSetRes(ctx, SR_SET, 6, read8(ctx, WR.IX + off));
    dd30:	e5c42005 	strb	r2, [r4, #5]
	ctx->memWrite(ctx->memParam, addr, val);	
    dd34:	e5943028 	ldr	r3, [r4, #40]	; 0x28
    dd38:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    dd3c:	e6ff1071 	uxth	r1, r1
}
    dd40:	e8bd4070 	pop	{r4, r5, r6, lr}
    dd44:	e12fff13 	bx	r3

0000dd48 <LD_D_SET_6_off_IY_d>:


static void LD_D_SET_6_off_IY_d (Z80Context* ctx)
{
	ctx->tstates += 2;
	char off = read8(ctx, ctx->PC++);
    dd48:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
    dd4c:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	char off = read8(ctx, ctx->PC++);
    dd50:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
    dd54:	e2833005 	add	r3, r3, #5
{
    dd58:	e92d4070 	push	{r4, r5, r6, lr}
    dd5c:	e1a04000 	mov	r4, r0
	char off = read8(ctx, ctx->PC++);
    dd60:	e1c021bc 	strh	r2, [r0, #28]
    dd64:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    dd68:	e5903024 	ldr	r3, [r0, #36]	; 0x24
    dd6c:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
    dd70:	e12fff33 	blx	r3
	ctx->tstates += 3;
    dd74:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	BR.D = doSetRes(ctx, SR_SET, 6, read8(ctx, WR.IY + off));
    dd78:	e1d410ba 	ldrh	r1, [r4, #10]
    dd7c:	e6ff5070 	uxth	r5, r0
    dd80:	e2833003 	add	r3, r3, #3
    dd84:	e0851001 	add	r1, r5, r1
    dd88:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    dd8c:	e6ff1071 	uxth	r1, r1
    dd90:	e5943024 	ldr	r3, [r4, #36]	; 0x24
    dd94:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    dd98:	e12fff33 	blx	r3
	ctx->tstates += 3;
    dd9c:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	write8(ctx, WR.IY + off, BR.D);	
    dda0:	e1d410ba 	ldrh	r1, [r4, #10]
		val |= (1 << pos);
    dda4:	e3802040 	orr	r2, r0, #64	; 0x40
    dda8:	e0851001 	add	r1, r5, r1
	ctx->tstates += 3;
    ddac:	e2833003 	add	r3, r3, #3
		val |= (1 << pos);
    ddb0:	e6ef2072 	uxtb	r2, r2
	ctx->tstates += 3;
    ddb4:	e5843040 	str	r3, [r4, #64]	; 0x40
	BR.D = doSetRes(ctx, SR_SET, 6, read8(ctx, WR.IY + off));
    ddb8:	e5c42005 	strb	r2, [r4, #5]
	ctx->memWrite(ctx->memParam, addr, val);	
    ddbc:	e5943028 	ldr	r3, [r4, #40]	; 0x28
    ddc0:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    ddc4:	e6ff1071 	uxth	r1, r1
}
    ddc8:	e8bd4070 	pop	{r4, r5, r6, lr}
    ddcc:	e12fff13 	bx	r3

0000ddd0 <LD_D_SET_7_off_IX_d>:


static void LD_D_SET_7_off_IX_d (Z80Context* ctx)
{
	ctx->tstates += 2;
	char off = read8(ctx, ctx->PC++);
    ddd0:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
    ddd4:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	char off = read8(ctx, ctx->PC++);
    ddd8:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
    dddc:	e2833005 	add	r3, r3, #5
{
    dde0:	e92d4070 	push	{r4, r5, r6, lr}
    dde4:	e1a04000 	mov	r4, r0
	char off = read8(ctx, ctx->PC++);
    dde8:	e1c021bc 	strh	r2, [r0, #28]
    ddec:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    ddf0:	e5903024 	ldr	r3, [r0, #36]	; 0x24
    ddf4:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
    ddf8:	e12fff33 	blx	r3
	ctx->tstates += 3;
    ddfc:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	BR.D = doSetRes(ctx, SR_SET, 7, read8(ctx, WR.IX + off));
    de00:	e1d410b8 	ldrh	r1, [r4, #8]
    de04:	e6ff5070 	uxth	r5, r0
    de08:	e2833003 	add	r3, r3, #3
    de0c:	e0851001 	add	r1, r5, r1
    de10:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    de14:	e6ff1071 	uxth	r1, r1
    de18:	e5943024 	ldr	r3, [r4, #36]	; 0x24
    de1c:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    de20:	e12fff33 	blx	r3
		val |= (1 << pos);
    de24:	e1e00c80 	mvn	r0, r0, lsl #25
    de28:	e1e00ca0 	mvn	r0, r0, lsr #25
	ctx->tstates += 3;
    de2c:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	write8(ctx, WR.IX + off, BR.D);	
    de30:	e1d410b8 	ldrh	r1, [r4, #8]
		val |= (1 << pos);
    de34:	e6ef2070 	uxtb	r2, r0
    de38:	e0851001 	add	r1, r5, r1
	ctx->tstates += 3;
    de3c:	e2833003 	add	r3, r3, #3
    de40:	e5843040 	str	r3, [r4, #64]	; 0x40
	BR.D = doSetRes(ctx, SR_SET, 7, read8(ctx, WR.IX + off));
    de44:	e5c42005 	strb	r2, [r4, #5]
	ctx->memWrite(ctx->memParam, addr, val);	
    de48:	e5943028 	ldr	r3, [r4, #40]	; 0x28
    de4c:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    de50:	e6ff1071 	uxth	r1, r1
}
    de54:	e8bd4070 	pop	{r4, r5, r6, lr}
    de58:	e12fff13 	bx	r3

0000de5c <LD_D_SET_7_off_IY_d>:


static void LD_D_SET_7_off_IY_d (Z80Context* ctx)
{
	ctx->tstates += 2;
	char off = read8(ctx, ctx->PC++);
    de5c:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
    de60:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	char off = read8(ctx, ctx->PC++);
    de64:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
    de68:	e2833005 	add	r3, r3, #5
{
    de6c:	e92d4070 	push	{r4, r5, r6, lr}
    de70:	e1a04000 	mov	r4, r0
	char off = read8(ctx, ctx->PC++);
    de74:	e1c021bc 	strh	r2, [r0, #28]
    de78:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    de7c:	e5903024 	ldr	r3, [r0, #36]	; 0x24
    de80:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
    de84:	e12fff33 	blx	r3
	ctx->tstates += 3;
    de88:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	BR.D = doSetRes(ctx, SR_SET, 7, read8(ctx, WR.IY + off));
    de8c:	e1d410ba 	ldrh	r1, [r4, #10]
    de90:	e6ff5070 	uxth	r5, r0
    de94:	e2833003 	add	r3, r3, #3
    de98:	e0851001 	add	r1, r5, r1
    de9c:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    dea0:	e6ff1071 	uxth	r1, r1
    dea4:	e5943024 	ldr	r3, [r4, #36]	; 0x24
    dea8:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    deac:	e12fff33 	blx	r3
		val |= (1 << pos);
    deb0:	e1e00c80 	mvn	r0, r0, lsl #25
    deb4:	e1e00ca0 	mvn	r0, r0, lsr #25
	ctx->tstates += 3;
    deb8:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	write8(ctx, WR.IY + off, BR.D);	
    debc:	e1d410ba 	ldrh	r1, [r4, #10]
		val |= (1 << pos);
    dec0:	e6ef2070 	uxtb	r2, r0
    dec4:	e0851001 	add	r1, r5, r1
	ctx->tstates += 3;
    dec8:	e2833003 	add	r3, r3, #3
    decc:	e5843040 	str	r3, [r4, #64]	; 0x40
	BR.D = doSetRes(ctx, SR_SET, 7, read8(ctx, WR.IY + off));
    ded0:	e5c42005 	strb	r2, [r4, #5]
	ctx->memWrite(ctx->memParam, addr, val);	
    ded4:	e5943028 	ldr	r3, [r4, #40]	; 0x28
    ded8:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    dedc:	e6ff1071 	uxth	r1, r1
}
    dee0:	e8bd4070 	pop	{r4, r5, r6, lr}
    dee4:	e12fff13 	bx	r3

0000dee8 <LD_E_off_HL>:
	ctx->tstates += 3;
    dee8:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	
}


static void LD_E_off_HL (Z80Context* ctx)
{
    deec:	e92d4010 	push	{r4, lr}
    def0:	e2833003 	add	r3, r3, #3
    def4:	e5803040 	str	r3, [r0, #64]	; 0x40
    def8:	e1a04000 	mov	r4, r0
	BR.E = read8(ctx, WR.HL);
    defc:	e1d010b6 	ldrh	r1, [r0, #6]
	return ctx->memRead(ctx->memParam, addr);	
    df00:	e5903024 	ldr	r3, [r0, #36]	; 0x24
    df04:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
    df08:	e12fff33 	blx	r3
    df0c:	e5c40004 	strb	r0, [r4, #4]
}
    df10:	e8bd8010 	pop	{r4, pc}

0000df14 <LD_E_off_IX_d>:


static void LD_E_off_IX_d (Z80Context* ctx)
{
    df14:	e92d4070 	push	{r4, r5, r6, lr}
    df18:	e1a04000 	mov	r4, r0
	ctx->tstates += 5;
	BR.E = read8(ctx, WR.IX + (char) read8(ctx, ctx->PC++));
    df1c:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 5;
    df20:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	BR.E = read8(ctx, WR.IX + (char) read8(ctx, ctx->PC++));
    df24:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
    df28:	e2833008 	add	r3, r3, #8
    df2c:	e1c021bc 	strh	r2, [r0, #28]
    df30:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    df34:	e5903024 	ldr	r3, [r0, #36]	; 0x24
    df38:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
    df3c:	e1d450b8 	ldrh	r5, [r4, #8]
    df40:	e12fff33 	blx	r3
	ctx->tstates += 3;
    df44:	e5943040 	ldr	r3, [r4, #64]	; 0x40
    df48:	e0851000 	add	r1, r5, r0
    df4c:	e2833003 	add	r3, r3, #3
    df50:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    df54:	e6ff1071 	uxth	r1, r1
    df58:	e5943024 	ldr	r3, [r4, #36]	; 0x24
    df5c:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    df60:	e12fff33 	blx	r3
    df64:	e5c40004 	strb	r0, [r4, #4]
}
    df68:	e8bd8070 	pop	{r4, r5, r6, pc}

0000df6c <LD_E_off_IY_d>:


static void LD_E_off_IY_d (Z80Context* ctx)
{
    df6c:	e92d4070 	push	{r4, r5, r6, lr}
    df70:	e1a04000 	mov	r4, r0
	ctx->tstates += 5;
	BR.E = read8(ctx, WR.IY + (char) read8(ctx, ctx->PC++));
    df74:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 5;
    df78:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	BR.E = read8(ctx, WR.IY + (char) read8(ctx, ctx->PC++));
    df7c:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
    df80:	e2833008 	add	r3, r3, #8
    df84:	e1c021bc 	strh	r2, [r0, #28]
    df88:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    df8c:	e5903024 	ldr	r3, [r0, #36]	; 0x24
    df90:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
    df94:	e1d450ba 	ldrh	r5, [r4, #10]
    df98:	e12fff33 	blx	r3
	ctx->tstates += 3;
    df9c:	e5943040 	ldr	r3, [r4, #64]	; 0x40
    dfa0:	e0851000 	add	r1, r5, r0
    dfa4:	e2833003 	add	r3, r3, #3
    dfa8:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    dfac:	e6ff1071 	uxth	r1, r1
    dfb0:	e5943024 	ldr	r3, [r4, #36]	; 0x24
    dfb4:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    dfb8:	e12fff33 	blx	r3
    dfbc:	e5c40004 	strb	r0, [r4, #4]
}
    dfc0:	e8bd8070 	pop	{r4, r5, r6, pc}

0000dfc4 <LD_E_A>:


static void LD_E_A (Z80Context* ctx)
{
	BR.E = BR.A;
    dfc4:	e5d03001 	ldrb	r3, [r0, #1]
    dfc8:	e5c03004 	strb	r3, [r0, #4]
}
    dfcc:	e12fff1e 	bx	lr

0000dfd0 <LD_E_B>:


static void LD_E_B (Z80Context* ctx)
{
	BR.E = BR.B;
    dfd0:	e5d03003 	ldrb	r3, [r0, #3]
    dfd4:	e5c03004 	strb	r3, [r0, #4]
}
    dfd8:	e12fff1e 	bx	lr

0000dfdc <LD_E_C>:


static void LD_E_C (Z80Context* ctx)
{
	BR.E = BR.C;
    dfdc:	e5d03002 	ldrb	r3, [r0, #2]
    dfe0:	e5c03004 	strb	r3, [r0, #4]
}
    dfe4:	e12fff1e 	bx	lr

0000dfe8 <LD_E_D>:


static void LD_E_D (Z80Context* ctx)
{
	BR.E = BR.D;
    dfe8:	e5d03005 	ldrb	r3, [r0, #5]
    dfec:	e5c03004 	strb	r3, [r0, #4]
}
    dff0:	e12fff1e 	bx	lr

0000dff4 <LD_E_H>:
}


static void LD_E_H (Z80Context* ctx)
{
	BR.E = BR.H;
    dff4:	e5d03007 	ldrb	r3, [r0, #7]
    dff8:	e5c03004 	strb	r3, [r0, #4]
}
    dffc:	e12fff1e 	bx	lr

0000e000 <LD_E_IXh>:


static void LD_E_IXh (Z80Context* ctx)
{
	BR.E = BR.IXh;
    e000:	e5d03009 	ldrb	r3, [r0, #9]
    e004:	e5c03004 	strb	r3, [r0, #4]
}
    e008:	e12fff1e 	bx	lr

0000e00c <LD_E_IXl>:


static void LD_E_IXl (Z80Context* ctx)
{
	BR.E = BR.IXl;
    e00c:	e5d03008 	ldrb	r3, [r0, #8]
    e010:	e5c03004 	strb	r3, [r0, #4]
}
    e014:	e12fff1e 	bx	lr

0000e018 <LD_E_IYh>:


static void LD_E_IYh (Z80Context* ctx)
{
	BR.E = BR.IYh;
    e018:	e5d0300b 	ldrb	r3, [r0, #11]
    e01c:	e5c03004 	strb	r3, [r0, #4]
}
    e020:	e12fff1e 	bx	lr

0000e024 <LD_E_IYl>:


static void LD_E_IYl (Z80Context* ctx)
{
	BR.E = BR.IYl;
    e024:	e5d0300a 	ldrb	r3, [r0, #10]
    e028:	e5c03004 	strb	r3, [r0, #4]
}
    e02c:	e12fff1e 	bx	lr

0000e030 <LD_E_L>:


static void LD_E_L (Z80Context* ctx)
{
	BR.E = BR.L;
    e030:	e5d03006 	ldrb	r3, [r0, #6]
    e034:	e5c03004 	strb	r3, [r0, #4]
}
    e038:	e12fff1e 	bx	lr

0000e03c <LD_E_n>:


static void LD_E_n (Z80Context* ctx)
{
	BR.E = read8(ctx, ctx->PC++);
    e03c:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 3;
    e040:	e5903040 	ldr	r3, [r0, #64]	; 0x40
    e044:	e2812001 	add	r2, r1, #1
    e048:	e2833003 	add	r3, r3, #3
{
    e04c:	e92d4010 	push	{r4, lr}
    e050:	e5803040 	str	r3, [r0, #64]	; 0x40
    e054:	e1a04000 	mov	r4, r0
	BR.E = read8(ctx, ctx->PC++);
    e058:	e1c021bc 	strh	r2, [r0, #28]
	return ctx->memRead(ctx->memParam, addr);	
    e05c:	e5903024 	ldr	r3, [r0, #36]	; 0x24
    e060:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
    e064:	e12fff33 	blx	r3
    e068:	e5c40004 	strb	r0, [r4, #4]
	
}
    e06c:	e8bd8010 	pop	{r4, pc}

0000e070 <LD_E_RES_0_off_IX_d>:


static void LD_E_RES_0_off_IX_d (Z80Context* ctx)
{
	ctx->tstates += 2;
	char off = read8(ctx, ctx->PC++);
    e070:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
    e074:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	char off = read8(ctx, ctx->PC++);
    e078:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
    e07c:	e2833005 	add	r3, r3, #5
{
    e080:	e92d4070 	push	{r4, r5, r6, lr}
    e084:	e1a04000 	mov	r4, r0
	char off = read8(ctx, ctx->PC++);
    e088:	e1c021bc 	strh	r2, [r0, #28]
    e08c:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    e090:	e5903024 	ldr	r3, [r0, #36]	; 0x24
    e094:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
    e098:	e12fff33 	blx	r3
	ctx->tstates += 3;
    e09c:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	BR.E = doSetRes(ctx, SR_RES, 0, read8(ctx, WR.IX + off));
    e0a0:	e1d410b8 	ldrh	r1, [r4, #8]
    e0a4:	e6ff5070 	uxth	r5, r0
    e0a8:	e2833003 	add	r3, r3, #3
    e0ac:	e0851001 	add	r1, r5, r1
    e0b0:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    e0b4:	e6ff1071 	uxth	r1, r1
    e0b8:	e5943024 	ldr	r3, [r4, #36]	; 0x24
    e0bc:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    e0c0:	e12fff33 	blx	r3
	ctx->tstates += 3;
    e0c4:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	write8(ctx, WR.IX + off, BR.E);	
    e0c8:	e1d410b8 	ldrh	r1, [r4, #8]
		val &= ~(1 << pos);
    e0cc:	e20020fe 	and	r2, r0, #254	; 0xfe
    e0d0:	e0851001 	add	r1, r5, r1
	ctx->tstates += 3;
    e0d4:	e2833003 	add	r3, r3, #3
    e0d8:	e5843040 	str	r3, [r4, #64]	; 0x40
	BR.E = doSetRes(ctx, SR_RES, 0, read8(ctx, WR.IX + off));
    e0dc:	e5c42004 	strb	r2, [r4, #4]
	ctx->memWrite(ctx->memParam, addr, val);	
    e0e0:	e5943028 	ldr	r3, [r4, #40]	; 0x28
    e0e4:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    e0e8:	e6ff1071 	uxth	r1, r1
}
    e0ec:	e8bd4070 	pop	{r4, r5, r6, lr}
    e0f0:	e12fff13 	bx	r3

0000e0f4 <LD_E_RES_0_off_IY_d>:


static void LD_E_RES_0_off_IY_d (Z80Context* ctx)
{
	ctx->tstates += 2;
	char off = read8(ctx, ctx->PC++);
    e0f4:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
    e0f8:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	char off = read8(ctx, ctx->PC++);
    e0fc:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
    e100:	e2833005 	add	r3, r3, #5
{
    e104:	e92d4070 	push	{r4, r5, r6, lr}
    e108:	e1a04000 	mov	r4, r0
	char off = read8(ctx, ctx->PC++);
    e10c:	e1c021bc 	strh	r2, [r0, #28]
    e110:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    e114:	e5903024 	ldr	r3, [r0, #36]	; 0x24
    e118:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
    e11c:	e12fff33 	blx	r3
	ctx->tstates += 3;
    e120:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	BR.E = doSetRes(ctx, SR_RES, 0, read8(ctx, WR.IY + off));
    e124:	e1d410ba 	ldrh	r1, [r4, #10]
    e128:	e6ff5070 	uxth	r5, r0
    e12c:	e2833003 	add	r3, r3, #3
    e130:	e0851001 	add	r1, r5, r1
    e134:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    e138:	e6ff1071 	uxth	r1, r1
    e13c:	e5943024 	ldr	r3, [r4, #36]	; 0x24
    e140:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    e144:	e12fff33 	blx	r3
	ctx->tstates += 3;
    e148:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	write8(ctx, WR.IY + off, BR.E);	
    e14c:	e1d410ba 	ldrh	r1, [r4, #10]
		val &= ~(1 << pos);
    e150:	e20020fe 	and	r2, r0, #254	; 0xfe
    e154:	e0851001 	add	r1, r5, r1
	ctx->tstates += 3;
    e158:	e2833003 	add	r3, r3, #3
    e15c:	e5843040 	str	r3, [r4, #64]	; 0x40
	BR.E = doSetRes(ctx, SR_RES, 0, read8(ctx, WR.IY + off));
    e160:	e5c42004 	strb	r2, [r4, #4]
	ctx->memWrite(ctx->memParam, addr, val);	
    e164:	e5943028 	ldr	r3, [r4, #40]	; 0x28
    e168:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    e16c:	e6ff1071 	uxth	r1, r1
}
    e170:	e8bd4070 	pop	{r4, r5, r6, lr}
    e174:	e12fff13 	bx	r3

0000e178 <LD_E_RES_1_off_IX_d>:


static void LD_E_RES_1_off_IX_d (Z80Context* ctx)
{
	ctx->tstates += 2;
	char off = read8(ctx, ctx->PC++);
    e178:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
    e17c:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	char off = read8(ctx, ctx->PC++);
    e180:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
    e184:	e2833005 	add	r3, r3, #5
{
    e188:	e92d4070 	push	{r4, r5, r6, lr}
    e18c:	e1a04000 	mov	r4, r0
	char off = read8(ctx, ctx->PC++);
    e190:	e1c021bc 	strh	r2, [r0, #28]
    e194:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    e198:	e5903024 	ldr	r3, [r0, #36]	; 0x24
    e19c:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
    e1a0:	e12fff33 	blx	r3
	ctx->tstates += 3;
    e1a4:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	BR.E = doSetRes(ctx, SR_RES, 1, read8(ctx, WR.IX + off));
    e1a8:	e1d410b8 	ldrh	r1, [r4, #8]
    e1ac:	e6ff5070 	uxth	r5, r0
    e1b0:	e2833003 	add	r3, r3, #3
    e1b4:	e0851001 	add	r1, r5, r1
    e1b8:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    e1bc:	e6ff1071 	uxth	r1, r1
    e1c0:	e5943024 	ldr	r3, [r4, #36]	; 0x24
    e1c4:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    e1c8:	e12fff33 	blx	r3
	ctx->tstates += 3;
    e1cc:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	write8(ctx, WR.IX + off, BR.E);	
    e1d0:	e1d410b8 	ldrh	r1, [r4, #8]
		val &= ~(1 << pos);
    e1d4:	e20020fd 	and	r2, r0, #253	; 0xfd
    e1d8:	e0851001 	add	r1, r5, r1
	ctx->tstates += 3;
    e1dc:	e2833003 	add	r3, r3, #3
    e1e0:	e5843040 	str	r3, [r4, #64]	; 0x40
	BR.E = doSetRes(ctx, SR_RES, 1, read8(ctx, WR.IX + off));
    e1e4:	e5c42004 	strb	r2, [r4, #4]
	ctx->memWrite(ctx->memParam, addr, val);	
    e1e8:	e5943028 	ldr	r3, [r4, #40]	; 0x28
    e1ec:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    e1f0:	e6ff1071 	uxth	r1, r1
}
    e1f4:	e8bd4070 	pop	{r4, r5, r6, lr}
    e1f8:	e12fff13 	bx	r3

0000e1fc <LD_E_RES_1_off_IY_d>:


static void LD_E_RES_1_off_IY_d (Z80Context* ctx)
{
	ctx->tstates += 2;
	char off = read8(ctx, ctx->PC++);
    e1fc:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
    e200:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	char off = read8(ctx, ctx->PC++);
    e204:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
    e208:	e2833005 	add	r3, r3, #5
{
    e20c:	e92d4070 	push	{r4, r5, r6, lr}
    e210:	e1a04000 	mov	r4, r0
	char off = read8(ctx, ctx->PC++);
    e214:	e1c021bc 	strh	r2, [r0, #28]
    e218:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    e21c:	e5903024 	ldr	r3, [r0, #36]	; 0x24
    e220:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
    e224:	e12fff33 	blx	r3
	ctx->tstates += 3;
    e228:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	BR.E = doSetRes(ctx, SR_RES, 1, read8(ctx, WR.IY + off));
    e22c:	e1d410ba 	ldrh	r1, [r4, #10]
    e230:	e6ff5070 	uxth	r5, r0
    e234:	e2833003 	add	r3, r3, #3
    e238:	e0851001 	add	r1, r5, r1
    e23c:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    e240:	e6ff1071 	uxth	r1, r1
    e244:	e5943024 	ldr	r3, [r4, #36]	; 0x24
    e248:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    e24c:	e12fff33 	blx	r3
	ctx->tstates += 3;
    e250:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	write8(ctx, WR.IY + off, BR.E);	
    e254:	e1d410ba 	ldrh	r1, [r4, #10]
		val &= ~(1 << pos);
    e258:	e20020fd 	and	r2, r0, #253	; 0xfd
    e25c:	e0851001 	add	r1, r5, r1
	ctx->tstates += 3;
    e260:	e2833003 	add	r3, r3, #3
    e264:	e5843040 	str	r3, [r4, #64]	; 0x40
	BR.E = doSetRes(ctx, SR_RES, 1, read8(ctx, WR.IY + off));
    e268:	e5c42004 	strb	r2, [r4, #4]
	ctx->memWrite(ctx->memParam, addr, val);	
    e26c:	e5943028 	ldr	r3, [r4, #40]	; 0x28
    e270:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    e274:	e6ff1071 	uxth	r1, r1
}
    e278:	e8bd4070 	pop	{r4, r5, r6, lr}
    e27c:	e12fff13 	bx	r3

0000e280 <LD_E_RES_2_off_IX_d>:


static void LD_E_RES_2_off_IX_d (Z80Context* ctx)
{
	ctx->tstates += 2;
	char off = read8(ctx, ctx->PC++);
    e280:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
    e284:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	char off = read8(ctx, ctx->PC++);
    e288:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
    e28c:	e2833005 	add	r3, r3, #5
{
    e290:	e92d4070 	push	{r4, r5, r6, lr}
    e294:	e1a04000 	mov	r4, r0
	char off = read8(ctx, ctx->PC++);
    e298:	e1c021bc 	strh	r2, [r0, #28]
    e29c:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    e2a0:	e5903024 	ldr	r3, [r0, #36]	; 0x24
    e2a4:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
    e2a8:	e12fff33 	blx	r3
	ctx->tstates += 3;
    e2ac:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	BR.E = doSetRes(ctx, SR_RES, 2, read8(ctx, WR.IX + off));
    e2b0:	e1d410b8 	ldrh	r1, [r4, #8]
    e2b4:	e6ff5070 	uxth	r5, r0
    e2b8:	e2833003 	add	r3, r3, #3
    e2bc:	e0851001 	add	r1, r5, r1
    e2c0:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    e2c4:	e6ff1071 	uxth	r1, r1
    e2c8:	e5943024 	ldr	r3, [r4, #36]	; 0x24
    e2cc:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    e2d0:	e12fff33 	blx	r3
	ctx->tstates += 3;
    e2d4:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	write8(ctx, WR.IX + off, BR.E);	
    e2d8:	e1d410b8 	ldrh	r1, [r4, #8]
		val &= ~(1 << pos);
    e2dc:	e20020fb 	and	r2, r0, #251	; 0xfb
    e2e0:	e0851001 	add	r1, r5, r1
	ctx->tstates += 3;
    e2e4:	e2833003 	add	r3, r3, #3
    e2e8:	e5843040 	str	r3, [r4, #64]	; 0x40
	BR.E = doSetRes(ctx, SR_RES, 2, read8(ctx, WR.IX + off));
    e2ec:	e5c42004 	strb	r2, [r4, #4]
	ctx->memWrite(ctx->memParam, addr, val);	
    e2f0:	e5943028 	ldr	r3, [r4, #40]	; 0x28
    e2f4:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    e2f8:	e6ff1071 	uxth	r1, r1
}
    e2fc:	e8bd4070 	pop	{r4, r5, r6, lr}
    e300:	e12fff13 	bx	r3

0000e304 <LD_E_RES_2_off_IY_d>:


static void LD_E_RES_2_off_IY_d (Z80Context* ctx)
{
	ctx->tstates += 2;
	char off = read8(ctx, ctx->PC++);
    e304:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
    e308:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	char off = read8(ctx, ctx->PC++);
    e30c:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
    e310:	e2833005 	add	r3, r3, #5
{
    e314:	e92d4070 	push	{r4, r5, r6, lr}
    e318:	e1a04000 	mov	r4, r0
	char off = read8(ctx, ctx->PC++);
    e31c:	e1c021bc 	strh	r2, [r0, #28]
    e320:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    e324:	e5903024 	ldr	r3, [r0, #36]	; 0x24
    e328:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
    e32c:	e12fff33 	blx	r3
	ctx->tstates += 3;
    e330:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	BR.E = doSetRes(ctx, SR_RES, 2, read8(ctx, WR.IY + off));
    e334:	e1d410ba 	ldrh	r1, [r4, #10]
    e338:	e6ff5070 	uxth	r5, r0
    e33c:	e2833003 	add	r3, r3, #3
    e340:	e0851001 	add	r1, r5, r1
    e344:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    e348:	e6ff1071 	uxth	r1, r1
    e34c:	e5943024 	ldr	r3, [r4, #36]	; 0x24
    e350:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    e354:	e12fff33 	blx	r3
	ctx->tstates += 3;
    e358:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	write8(ctx, WR.IY + off, BR.E);	
    e35c:	e1d410ba 	ldrh	r1, [r4, #10]
		val &= ~(1 << pos);
    e360:	e20020fb 	and	r2, r0, #251	; 0xfb
    e364:	e0851001 	add	r1, r5, r1
	ctx->tstates += 3;
    e368:	e2833003 	add	r3, r3, #3
    e36c:	e5843040 	str	r3, [r4, #64]	; 0x40
	BR.E = doSetRes(ctx, SR_RES, 2, read8(ctx, WR.IY + off));
    e370:	e5c42004 	strb	r2, [r4, #4]
	ctx->memWrite(ctx->memParam, addr, val);	
    e374:	e5943028 	ldr	r3, [r4, #40]	; 0x28
    e378:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    e37c:	e6ff1071 	uxth	r1, r1
}
    e380:	e8bd4070 	pop	{r4, r5, r6, lr}
    e384:	e12fff13 	bx	r3

0000e388 <LD_E_RES_3_off_IX_d>:


static void LD_E_RES_3_off_IX_d (Z80Context* ctx)
{
	ctx->tstates += 2;
	char off = read8(ctx, ctx->PC++);
    e388:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
    e38c:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	char off = read8(ctx, ctx->PC++);
    e390:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
    e394:	e2833005 	add	r3, r3, #5
{
    e398:	e92d4070 	push	{r4, r5, r6, lr}
    e39c:	e1a04000 	mov	r4, r0
	char off = read8(ctx, ctx->PC++);
    e3a0:	e1c021bc 	strh	r2, [r0, #28]
    e3a4:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    e3a8:	e5903024 	ldr	r3, [r0, #36]	; 0x24
    e3ac:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
    e3b0:	e12fff33 	blx	r3
	ctx->tstates += 3;
    e3b4:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	BR.E = doSetRes(ctx, SR_RES, 3, read8(ctx, WR.IX + off));
    e3b8:	e1d410b8 	ldrh	r1, [r4, #8]
    e3bc:	e6ff5070 	uxth	r5, r0
    e3c0:	e2833003 	add	r3, r3, #3
    e3c4:	e0851001 	add	r1, r5, r1
    e3c8:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    e3cc:	e6ff1071 	uxth	r1, r1
    e3d0:	e5943024 	ldr	r3, [r4, #36]	; 0x24
    e3d4:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    e3d8:	e12fff33 	blx	r3
	ctx->tstates += 3;
    e3dc:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	write8(ctx, WR.IX + off, BR.E);	
    e3e0:	e1d410b8 	ldrh	r1, [r4, #8]
		val &= ~(1 << pos);
    e3e4:	e20020f7 	and	r2, r0, #247	; 0xf7
    e3e8:	e0851001 	add	r1, r5, r1
	ctx->tstates += 3;
    e3ec:	e2833003 	add	r3, r3, #3
    e3f0:	e5843040 	str	r3, [r4, #64]	; 0x40
	BR.E = doSetRes(ctx, SR_RES, 3, read8(ctx, WR.IX + off));
    e3f4:	e5c42004 	strb	r2, [r4, #4]
	ctx->memWrite(ctx->memParam, addr, val);	
    e3f8:	e5943028 	ldr	r3, [r4, #40]	; 0x28
    e3fc:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    e400:	e6ff1071 	uxth	r1, r1
}
    e404:	e8bd4070 	pop	{r4, r5, r6, lr}
    e408:	e12fff13 	bx	r3

0000e40c <LD_E_RES_3_off_IY_d>:


static void LD_E_RES_3_off_IY_d (Z80Context* ctx)
{
	ctx->tstates += 2;
	char off = read8(ctx, ctx->PC++);
    e40c:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
    e410:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	char off = read8(ctx, ctx->PC++);
    e414:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
    e418:	e2833005 	add	r3, r3, #5
{
    e41c:	e92d4070 	push	{r4, r5, r6, lr}
    e420:	e1a04000 	mov	r4, r0
	char off = read8(ctx, ctx->PC++);
    e424:	e1c021bc 	strh	r2, [r0, #28]
    e428:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    e42c:	e5903024 	ldr	r3, [r0, #36]	; 0x24
    e430:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
    e434:	e12fff33 	blx	r3
	ctx->tstates += 3;
    e438:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	BR.E = doSetRes(ctx, SR_RES, 3, read8(ctx, WR.IY + off));
    e43c:	e1d410ba 	ldrh	r1, [r4, #10]
    e440:	e6ff5070 	uxth	r5, r0
    e444:	e2833003 	add	r3, r3, #3
    e448:	e0851001 	add	r1, r5, r1
    e44c:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    e450:	e6ff1071 	uxth	r1, r1
    e454:	e5943024 	ldr	r3, [r4, #36]	; 0x24
    e458:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    e45c:	e12fff33 	blx	r3
	ctx->tstates += 3;
    e460:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	write8(ctx, WR.IY + off, BR.E);	
    e464:	e1d410ba 	ldrh	r1, [r4, #10]
		val &= ~(1 << pos);
    e468:	e20020f7 	and	r2, r0, #247	; 0xf7
    e46c:	e0851001 	add	r1, r5, r1
	ctx->tstates += 3;
    e470:	e2833003 	add	r3, r3, #3
    e474:	e5843040 	str	r3, [r4, #64]	; 0x40
	BR.E = doSetRes(ctx, SR_RES, 3, read8(ctx, WR.IY + off));
    e478:	e5c42004 	strb	r2, [r4, #4]
	ctx->memWrite(ctx->memParam, addr, val);	
    e47c:	e5943028 	ldr	r3, [r4, #40]	; 0x28
    e480:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    e484:	e6ff1071 	uxth	r1, r1
}
    e488:	e8bd4070 	pop	{r4, r5, r6, lr}
    e48c:	e12fff13 	bx	r3

0000e490 <LD_E_RES_4_off_IX_d>:


static void LD_E_RES_4_off_IX_d (Z80Context* ctx)
{
	ctx->tstates += 2;
	char off = read8(ctx, ctx->PC++);
    e490:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
    e494:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	char off = read8(ctx, ctx->PC++);
    e498:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
    e49c:	e2833005 	add	r3, r3, #5
{
    e4a0:	e92d4070 	push	{r4, r5, r6, lr}
    e4a4:	e1a04000 	mov	r4, r0
	char off = read8(ctx, ctx->PC++);
    e4a8:	e1c021bc 	strh	r2, [r0, #28]
    e4ac:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    e4b0:	e5903024 	ldr	r3, [r0, #36]	; 0x24
    e4b4:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
    e4b8:	e12fff33 	blx	r3
	ctx->tstates += 3;
    e4bc:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	BR.E = doSetRes(ctx, SR_RES, 4, read8(ctx, WR.IX + off));
    e4c0:	e1d410b8 	ldrh	r1, [r4, #8]
    e4c4:	e6ff5070 	uxth	r5, r0
    e4c8:	e2833003 	add	r3, r3, #3
    e4cc:	e0851001 	add	r1, r5, r1
    e4d0:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    e4d4:	e6ff1071 	uxth	r1, r1
    e4d8:	e5943024 	ldr	r3, [r4, #36]	; 0x24
    e4dc:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    e4e0:	e12fff33 	blx	r3
	ctx->tstates += 3;
    e4e4:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	write8(ctx, WR.IX + off, BR.E);	
    e4e8:	e1d410b8 	ldrh	r1, [r4, #8]
		val &= ~(1 << pos);
    e4ec:	e20020ef 	and	r2, r0, #239	; 0xef
    e4f0:	e0851001 	add	r1, r5, r1
	ctx->tstates += 3;
    e4f4:	e2833003 	add	r3, r3, #3
    e4f8:	e5843040 	str	r3, [r4, #64]	; 0x40
	BR.E = doSetRes(ctx, SR_RES, 4, read8(ctx, WR.IX + off));
    e4fc:	e5c42004 	strb	r2, [r4, #4]
	ctx->memWrite(ctx->memParam, addr, val);	
    e500:	e5943028 	ldr	r3, [r4, #40]	; 0x28
    e504:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    e508:	e6ff1071 	uxth	r1, r1
}
    e50c:	e8bd4070 	pop	{r4, r5, r6, lr}
    e510:	e12fff13 	bx	r3

0000e514 <LD_E_RES_4_off_IY_d>:


static void LD_E_RES_4_off_IY_d (Z80Context* ctx)
{
	ctx->tstates += 2;
	char off = read8(ctx, ctx->PC++);
    e514:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
    e518:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	char off = read8(ctx, ctx->PC++);
    e51c:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
    e520:	e2833005 	add	r3, r3, #5
{
    e524:	e92d4070 	push	{r4, r5, r6, lr}
    e528:	e1a04000 	mov	r4, r0
	char off = read8(ctx, ctx->PC++);
    e52c:	e1c021bc 	strh	r2, [r0, #28]
    e530:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    e534:	e5903024 	ldr	r3, [r0, #36]	; 0x24
    e538:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
    e53c:	e12fff33 	blx	r3
	ctx->tstates += 3;
    e540:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	BR.E = doSetRes(ctx, SR_RES, 4, read8(ctx, WR.IY + off));
    e544:	e1d410ba 	ldrh	r1, [r4, #10]
    e548:	e6ff5070 	uxth	r5, r0
    e54c:	e2833003 	add	r3, r3, #3
    e550:	e0851001 	add	r1, r5, r1
    e554:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    e558:	e6ff1071 	uxth	r1, r1
    e55c:	e5943024 	ldr	r3, [r4, #36]	; 0x24
    e560:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    e564:	e12fff33 	blx	r3
	ctx->tstates += 3;
    e568:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	write8(ctx, WR.IY + off, BR.E);	
    e56c:	e1d410ba 	ldrh	r1, [r4, #10]
		val &= ~(1 << pos);
    e570:	e20020ef 	and	r2, r0, #239	; 0xef
    e574:	e0851001 	add	r1, r5, r1
	ctx->tstates += 3;
    e578:	e2833003 	add	r3, r3, #3
    e57c:	e5843040 	str	r3, [r4, #64]	; 0x40
	BR.E = doSetRes(ctx, SR_RES, 4, read8(ctx, WR.IY + off));
    e580:	e5c42004 	strb	r2, [r4, #4]
	ctx->memWrite(ctx->memParam, addr, val);	
    e584:	e5943028 	ldr	r3, [r4, #40]	; 0x28
    e588:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    e58c:	e6ff1071 	uxth	r1, r1
}
    e590:	e8bd4070 	pop	{r4, r5, r6, lr}
    e594:	e12fff13 	bx	r3

0000e598 <LD_E_RES_5_off_IX_d>:


static void LD_E_RES_5_off_IX_d (Z80Context* ctx)
{
	ctx->tstates += 2;
	char off = read8(ctx, ctx->PC++);
    e598:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
    e59c:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	char off = read8(ctx, ctx->PC++);
    e5a0:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
    e5a4:	e2833005 	add	r3, r3, #5
{
    e5a8:	e92d4070 	push	{r4, r5, r6, lr}
    e5ac:	e1a04000 	mov	r4, r0
	char off = read8(ctx, ctx->PC++);
    e5b0:	e1c021bc 	strh	r2, [r0, #28]
    e5b4:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    e5b8:	e5903024 	ldr	r3, [r0, #36]	; 0x24
    e5bc:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
    e5c0:	e12fff33 	blx	r3
	ctx->tstates += 3;
    e5c4:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	BR.E = doSetRes(ctx, SR_RES, 5, read8(ctx, WR.IX + off));
    e5c8:	e1d410b8 	ldrh	r1, [r4, #8]
    e5cc:	e6ff5070 	uxth	r5, r0
    e5d0:	e2833003 	add	r3, r3, #3
    e5d4:	e0851001 	add	r1, r5, r1
    e5d8:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    e5dc:	e6ff1071 	uxth	r1, r1
    e5e0:	e5943024 	ldr	r3, [r4, #36]	; 0x24
    e5e4:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    e5e8:	e12fff33 	blx	r3
	ctx->tstates += 3;
    e5ec:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	write8(ctx, WR.IX + off, BR.E);	
    e5f0:	e1d410b8 	ldrh	r1, [r4, #8]
		val &= ~(1 << pos);
    e5f4:	e20020df 	and	r2, r0, #223	; 0xdf
    e5f8:	e0851001 	add	r1, r5, r1
	ctx->tstates += 3;
    e5fc:	e2833003 	add	r3, r3, #3
    e600:	e5843040 	str	r3, [r4, #64]	; 0x40
	BR.E = doSetRes(ctx, SR_RES, 5, read8(ctx, WR.IX + off));
    e604:	e5c42004 	strb	r2, [r4, #4]
	ctx->memWrite(ctx->memParam, addr, val);	
    e608:	e5943028 	ldr	r3, [r4, #40]	; 0x28
    e60c:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    e610:	e6ff1071 	uxth	r1, r1
}
    e614:	e8bd4070 	pop	{r4, r5, r6, lr}
    e618:	e12fff13 	bx	r3

0000e61c <LD_E_RES_5_off_IY_d>:


static void LD_E_RES_5_off_IY_d (Z80Context* ctx)
{
	ctx->tstates += 2;
	char off = read8(ctx, ctx->PC++);
    e61c:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
    e620:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	char off = read8(ctx, ctx->PC++);
    e624:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
    e628:	e2833005 	add	r3, r3, #5
{
    e62c:	e92d4070 	push	{r4, r5, r6, lr}
    e630:	e1a04000 	mov	r4, r0
	char off = read8(ctx, ctx->PC++);
    e634:	e1c021bc 	strh	r2, [r0, #28]
    e638:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    e63c:	e5903024 	ldr	r3, [r0, #36]	; 0x24
    e640:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
    e644:	e12fff33 	blx	r3
	ctx->tstates += 3;
    e648:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	BR.E = doSetRes(ctx, SR_RES, 5, read8(ctx, WR.IY + off));
    e64c:	e1d410ba 	ldrh	r1, [r4, #10]
    e650:	e6ff5070 	uxth	r5, r0
    e654:	e2833003 	add	r3, r3, #3
    e658:	e0851001 	add	r1, r5, r1
    e65c:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    e660:	e6ff1071 	uxth	r1, r1
    e664:	e5943024 	ldr	r3, [r4, #36]	; 0x24
    e668:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    e66c:	e12fff33 	blx	r3
	ctx->tstates += 3;
    e670:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	write8(ctx, WR.IY + off, BR.E);	
    e674:	e1d410ba 	ldrh	r1, [r4, #10]
		val &= ~(1 << pos);
    e678:	e20020df 	and	r2, r0, #223	; 0xdf
    e67c:	e0851001 	add	r1, r5, r1
	ctx->tstates += 3;
    e680:	e2833003 	add	r3, r3, #3
    e684:	e5843040 	str	r3, [r4, #64]	; 0x40
	BR.E = doSetRes(ctx, SR_RES, 5, read8(ctx, WR.IY + off));
    e688:	e5c42004 	strb	r2, [r4, #4]
	ctx->memWrite(ctx->memParam, addr, val);	
    e68c:	e5943028 	ldr	r3, [r4, #40]	; 0x28
    e690:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    e694:	e6ff1071 	uxth	r1, r1
}
    e698:	e8bd4070 	pop	{r4, r5, r6, lr}
    e69c:	e12fff13 	bx	r3

0000e6a0 <LD_E_RES_6_off_IX_d>:


static void LD_E_RES_6_off_IX_d (Z80Context* ctx)
{
	ctx->tstates += 2;
	char off = read8(ctx, ctx->PC++);
    e6a0:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
    e6a4:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	char off = read8(ctx, ctx->PC++);
    e6a8:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
    e6ac:	e2833005 	add	r3, r3, #5
{
    e6b0:	e92d4070 	push	{r4, r5, r6, lr}
    e6b4:	e1a04000 	mov	r4, r0
	char off = read8(ctx, ctx->PC++);
    e6b8:	e1c021bc 	strh	r2, [r0, #28]
    e6bc:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    e6c0:	e5903024 	ldr	r3, [r0, #36]	; 0x24
    e6c4:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
    e6c8:	e12fff33 	blx	r3
	ctx->tstates += 3;
    e6cc:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	BR.E = doSetRes(ctx, SR_RES, 6, read8(ctx, WR.IX + off));
    e6d0:	e1d410b8 	ldrh	r1, [r4, #8]
    e6d4:	e6ff5070 	uxth	r5, r0
    e6d8:	e2833003 	add	r3, r3, #3
    e6dc:	e0851001 	add	r1, r5, r1
    e6e0:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    e6e4:	e6ff1071 	uxth	r1, r1
    e6e8:	e5943024 	ldr	r3, [r4, #36]	; 0x24
    e6ec:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    e6f0:	e12fff33 	blx	r3
	ctx->tstates += 3;
    e6f4:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	write8(ctx, WR.IX + off, BR.E);	
    e6f8:	e1d410b8 	ldrh	r1, [r4, #8]
		val &= ~(1 << pos);
    e6fc:	e20020bf 	and	r2, r0, #191	; 0xbf
    e700:	e0851001 	add	r1, r5, r1
	ctx->tstates += 3;
    e704:	e2833003 	add	r3, r3, #3
    e708:	e5843040 	str	r3, [r4, #64]	; 0x40
	BR.E = doSetRes(ctx, SR_RES, 6, read8(ctx, WR.IX + off));
    e70c:	e5c42004 	strb	r2, [r4, #4]
	ctx->memWrite(ctx->memParam, addr, val);	
    e710:	e5943028 	ldr	r3, [r4, #40]	; 0x28
    e714:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    e718:	e6ff1071 	uxth	r1, r1
}
    e71c:	e8bd4070 	pop	{r4, r5, r6, lr}
    e720:	e12fff13 	bx	r3

0000e724 <LD_E_RES_6_off_IY_d>:


static void LD_E_RES_6_off_IY_d (Z80Context* ctx)
{
	ctx->tstates += 2;
	char off = read8(ctx, ctx->PC++);
    e724:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
    e728:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	char off = read8(ctx, ctx->PC++);
    e72c:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
    e730:	e2833005 	add	r3, r3, #5
{
    e734:	e92d4070 	push	{r4, r5, r6, lr}
    e738:	e1a04000 	mov	r4, r0
	char off = read8(ctx, ctx->PC++);
    e73c:	e1c021bc 	strh	r2, [r0, #28]
    e740:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    e744:	e5903024 	ldr	r3, [r0, #36]	; 0x24
    e748:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
    e74c:	e12fff33 	blx	r3
	ctx->tstates += 3;
    e750:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	BR.E = doSetRes(ctx, SR_RES, 6, read8(ctx, WR.IY + off));
    e754:	e1d410ba 	ldrh	r1, [r4, #10]
    e758:	e6ff5070 	uxth	r5, r0
    e75c:	e2833003 	add	r3, r3, #3
    e760:	e0851001 	add	r1, r5, r1
    e764:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    e768:	e6ff1071 	uxth	r1, r1
    e76c:	e5943024 	ldr	r3, [r4, #36]	; 0x24
    e770:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    e774:	e12fff33 	blx	r3
	ctx->tstates += 3;
    e778:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	write8(ctx, WR.IY + off, BR.E);	
    e77c:	e1d410ba 	ldrh	r1, [r4, #10]
		val &= ~(1 << pos);
    e780:	e20020bf 	and	r2, r0, #191	; 0xbf
    e784:	e0851001 	add	r1, r5, r1
	ctx->tstates += 3;
    e788:	e2833003 	add	r3, r3, #3
    e78c:	e5843040 	str	r3, [r4, #64]	; 0x40
	BR.E = doSetRes(ctx, SR_RES, 6, read8(ctx, WR.IY + off));
    e790:	e5c42004 	strb	r2, [r4, #4]
	ctx->memWrite(ctx->memParam, addr, val);	
    e794:	e5943028 	ldr	r3, [r4, #40]	; 0x28
    e798:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    e79c:	e6ff1071 	uxth	r1, r1
}
    e7a0:	e8bd4070 	pop	{r4, r5, r6, lr}
    e7a4:	e12fff13 	bx	r3

0000e7a8 <LD_E_RES_7_off_IX_d>:


static void LD_E_RES_7_off_IX_d (Z80Context* ctx)
{
	ctx->tstates += 2;
	char off = read8(ctx, ctx->PC++);
    e7a8:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
    e7ac:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	char off = read8(ctx, ctx->PC++);
    e7b0:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
    e7b4:	e2833005 	add	r3, r3, #5
{
    e7b8:	e92d4070 	push	{r4, r5, r6, lr}
    e7bc:	e1a04000 	mov	r4, r0
	char off = read8(ctx, ctx->PC++);
    e7c0:	e1c021bc 	strh	r2, [r0, #28]
    e7c4:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    e7c8:	e5903024 	ldr	r3, [r0, #36]	; 0x24
    e7cc:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
    e7d0:	e12fff33 	blx	r3
	ctx->tstates += 3;
    e7d4:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	BR.E = doSetRes(ctx, SR_RES, 7, read8(ctx, WR.IX + off));
    e7d8:	e1d410b8 	ldrh	r1, [r4, #8]
    e7dc:	e6ff5070 	uxth	r5, r0
    e7e0:	e2833003 	add	r3, r3, #3
    e7e4:	e0851001 	add	r1, r5, r1
    e7e8:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    e7ec:	e6ff1071 	uxth	r1, r1
    e7f0:	e5943024 	ldr	r3, [r4, #36]	; 0x24
    e7f4:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    e7f8:	e12fff33 	blx	r3
	ctx->tstates += 3;
    e7fc:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	write8(ctx, WR.IX + off, BR.E);	
    e800:	e1d410b8 	ldrh	r1, [r4, #8]
		val &= ~(1 << pos);
    e804:	e200207f 	and	r2, r0, #127	; 0x7f
    e808:	e0851001 	add	r1, r5, r1
	ctx->tstates += 3;
    e80c:	e2833003 	add	r3, r3, #3
    e810:	e5843040 	str	r3, [r4, #64]	; 0x40
	BR.E = doSetRes(ctx, SR_RES, 7, read8(ctx, WR.IX + off));
    e814:	e5c42004 	strb	r2, [r4, #4]
	ctx->memWrite(ctx->memParam, addr, val);	
    e818:	e5943028 	ldr	r3, [r4, #40]	; 0x28
    e81c:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    e820:	e6ff1071 	uxth	r1, r1
}
    e824:	e8bd4070 	pop	{r4, r5, r6, lr}
    e828:	e12fff13 	bx	r3

0000e82c <LD_E_RES_7_off_IY_d>:


static void LD_E_RES_7_off_IY_d (Z80Context* ctx)
{
	ctx->tstates += 2;
	char off = read8(ctx, ctx->PC++);
    e82c:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
    e830:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	char off = read8(ctx, ctx->PC++);
    e834:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
    e838:	e2833005 	add	r3, r3, #5
{
    e83c:	e92d4070 	push	{r4, r5, r6, lr}
    e840:	e1a04000 	mov	r4, r0
	char off = read8(ctx, ctx->PC++);
    e844:	e1c021bc 	strh	r2, [r0, #28]
    e848:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    e84c:	e5903024 	ldr	r3, [r0, #36]	; 0x24
    e850:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
    e854:	e12fff33 	blx	r3
	ctx->tstates += 3;
    e858:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	BR.E = doSetRes(ctx, SR_RES, 7, read8(ctx, WR.IY + off));
    e85c:	e1d410ba 	ldrh	r1, [r4, #10]
    e860:	e6ff5070 	uxth	r5, r0
    e864:	e2833003 	add	r3, r3, #3
    e868:	e0851001 	add	r1, r5, r1
    e86c:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    e870:	e6ff1071 	uxth	r1, r1
    e874:	e5943024 	ldr	r3, [r4, #36]	; 0x24
    e878:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    e87c:	e12fff33 	blx	r3
	ctx->tstates += 3;
    e880:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	write8(ctx, WR.IY + off, BR.E);	
    e884:	e1d410ba 	ldrh	r1, [r4, #10]
		val &= ~(1 << pos);
    e888:	e200207f 	and	r2, r0, #127	; 0x7f
    e88c:	e0851001 	add	r1, r5, r1
	ctx->tstates += 3;
    e890:	e2833003 	add	r3, r3, #3
    e894:	e5843040 	str	r3, [r4, #64]	; 0x40
	BR.E = doSetRes(ctx, SR_RES, 7, read8(ctx, WR.IY + off));
    e898:	e5c42004 	strb	r2, [r4, #4]
	ctx->memWrite(ctx->memParam, addr, val);	
    e89c:	e5943028 	ldr	r3, [r4, #40]	; 0x28
    e8a0:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    e8a4:	e6ff1071 	uxth	r1, r1
}
    e8a8:	e8bd4070 	pop	{r4, r5, r6, lr}
    e8ac:	e12fff13 	bx	r3

0000e8b0 <LD_E_SET_0_off_IX_d>:


static void LD_E_SET_0_off_IX_d (Z80Context* ctx)
{
	ctx->tstates += 2;
	char off = read8(ctx, ctx->PC++);
    e8b0:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
    e8b4:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	char off = read8(ctx, ctx->PC++);
    e8b8:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
    e8bc:	e2833005 	add	r3, r3, #5
{
    e8c0:	e92d4070 	push	{r4, r5, r6, lr}
    e8c4:	e1a04000 	mov	r4, r0
	char off = read8(ctx, ctx->PC++);
    e8c8:	e1c021bc 	strh	r2, [r0, #28]
    e8cc:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    e8d0:	e5903024 	ldr	r3, [r0, #36]	; 0x24
    e8d4:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
    e8d8:	e12fff33 	blx	r3
	ctx->tstates += 3;
    e8dc:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	BR.E = doSetRes(ctx, SR_SET, 0, read8(ctx, WR.IX + off));
    e8e0:	e1d410b8 	ldrh	r1, [r4, #8]
    e8e4:	e6ff5070 	uxth	r5, r0
    e8e8:	e2833003 	add	r3, r3, #3
    e8ec:	e0851001 	add	r1, r5, r1
    e8f0:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    e8f4:	e6ff1071 	uxth	r1, r1
    e8f8:	e5943024 	ldr	r3, [r4, #36]	; 0x24
    e8fc:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    e900:	e12fff33 	blx	r3
	ctx->tstates += 3;
    e904:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	write8(ctx, WR.IX + off, BR.E);	
    e908:	e1d410b8 	ldrh	r1, [r4, #8]
		val |= (1 << pos);
    e90c:	e3802001 	orr	r2, r0, #1
    e910:	e0851001 	add	r1, r5, r1
	ctx->tstates += 3;
    e914:	e2833003 	add	r3, r3, #3
		val |= (1 << pos);
    e918:	e6ef2072 	uxtb	r2, r2
	ctx->tstates += 3;
    e91c:	e5843040 	str	r3, [r4, #64]	; 0x40
	BR.E = doSetRes(ctx, SR_SET, 0, read8(ctx, WR.IX + off));
    e920:	e5c42004 	strb	r2, [r4, #4]
	ctx->memWrite(ctx->memParam, addr, val);	
    e924:	e5943028 	ldr	r3, [r4, #40]	; 0x28
    e928:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    e92c:	e6ff1071 	uxth	r1, r1
}
    e930:	e8bd4070 	pop	{r4, r5, r6, lr}
    e934:	e12fff13 	bx	r3

0000e938 <LD_E_SET_0_off_IY_d>:


static void LD_E_SET_0_off_IY_d (Z80Context* ctx)
{
	ctx->tstates += 2;
	char off = read8(ctx, ctx->PC++);
    e938:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
    e93c:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	char off = read8(ctx, ctx->PC++);
    e940:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
    e944:	e2833005 	add	r3, r3, #5
{
    e948:	e92d4070 	push	{r4, r5, r6, lr}
    e94c:	e1a04000 	mov	r4, r0
	char off = read8(ctx, ctx->PC++);
    e950:	e1c021bc 	strh	r2, [r0, #28]
    e954:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    e958:	e5903024 	ldr	r3, [r0, #36]	; 0x24
    e95c:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
    e960:	e12fff33 	blx	r3
	ctx->tstates += 3;
    e964:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	BR.E = doSetRes(ctx, SR_SET, 0, read8(ctx, WR.IY + off));
    e968:	e1d410ba 	ldrh	r1, [r4, #10]
    e96c:	e6ff5070 	uxth	r5, r0
    e970:	e2833003 	add	r3, r3, #3
    e974:	e0851001 	add	r1, r5, r1
    e978:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    e97c:	e6ff1071 	uxth	r1, r1
    e980:	e5943024 	ldr	r3, [r4, #36]	; 0x24
    e984:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    e988:	e12fff33 	blx	r3
	ctx->tstates += 3;
    e98c:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	write8(ctx, WR.IY + off, BR.E);	
    e990:	e1d410ba 	ldrh	r1, [r4, #10]
		val |= (1 << pos);
    e994:	e3802001 	orr	r2, r0, #1
    e998:	e0851001 	add	r1, r5, r1
	ctx->tstates += 3;
    e99c:	e2833003 	add	r3, r3, #3
		val |= (1 << pos);
    e9a0:	e6ef2072 	uxtb	r2, r2
	ctx->tstates += 3;
    e9a4:	e5843040 	str	r3, [r4, #64]	; 0x40
	BR.E = doSetRes(ctx, SR_SET, 0, read8(ctx, WR.IY + off));
    e9a8:	e5c42004 	strb	r2, [r4, #4]
	ctx->memWrite(ctx->memParam, addr, val);	
    e9ac:	e5943028 	ldr	r3, [r4, #40]	; 0x28
    e9b0:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    e9b4:	e6ff1071 	uxth	r1, r1
}
    e9b8:	e8bd4070 	pop	{r4, r5, r6, lr}
    e9bc:	e12fff13 	bx	r3

0000e9c0 <LD_E_SET_1_off_IX_d>:


static void LD_E_SET_1_off_IX_d (Z80Context* ctx)
{
	ctx->tstates += 2;
	char off = read8(ctx, ctx->PC++);
    e9c0:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
    e9c4:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	char off = read8(ctx, ctx->PC++);
    e9c8:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
    e9cc:	e2833005 	add	r3, r3, #5
{
    e9d0:	e92d4070 	push	{r4, r5, r6, lr}
    e9d4:	e1a04000 	mov	r4, r0
	char off = read8(ctx, ctx->PC++);
    e9d8:	e1c021bc 	strh	r2, [r0, #28]
    e9dc:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    e9e0:	e5903024 	ldr	r3, [r0, #36]	; 0x24
    e9e4:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
    e9e8:	e12fff33 	blx	r3
	ctx->tstates += 3;
    e9ec:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	BR.E = doSetRes(ctx, SR_SET, 1, read8(ctx, WR.IX + off));
    e9f0:	e1d410b8 	ldrh	r1, [r4, #8]
    e9f4:	e6ff5070 	uxth	r5, r0
    e9f8:	e2833003 	add	r3, r3, #3
    e9fc:	e0851001 	add	r1, r5, r1
    ea00:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    ea04:	e6ff1071 	uxth	r1, r1
    ea08:	e5943024 	ldr	r3, [r4, #36]	; 0x24
    ea0c:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    ea10:	e12fff33 	blx	r3
	ctx->tstates += 3;
    ea14:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	write8(ctx, WR.IX + off, BR.E);	
    ea18:	e1d410b8 	ldrh	r1, [r4, #8]
		val |= (1 << pos);
    ea1c:	e3802002 	orr	r2, r0, #2
    ea20:	e0851001 	add	r1, r5, r1
	ctx->tstates += 3;
    ea24:	e2833003 	add	r3, r3, #3
		val |= (1 << pos);
    ea28:	e6ef2072 	uxtb	r2, r2
	ctx->tstates += 3;
    ea2c:	e5843040 	str	r3, [r4, #64]	; 0x40
	BR.E = doSetRes(ctx, SR_SET, 1, read8(ctx, WR.IX + off));
    ea30:	e5c42004 	strb	r2, [r4, #4]
	ctx->memWrite(ctx->memParam, addr, val);	
    ea34:	e5943028 	ldr	r3, [r4, #40]	; 0x28
    ea38:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    ea3c:	e6ff1071 	uxth	r1, r1
}
    ea40:	e8bd4070 	pop	{r4, r5, r6, lr}
    ea44:	e12fff13 	bx	r3

0000ea48 <LD_E_SET_1_off_IY_d>:


static void LD_E_SET_1_off_IY_d (Z80Context* ctx)
{
	ctx->tstates += 2;
	char off = read8(ctx, ctx->PC++);
    ea48:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
    ea4c:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	char off = read8(ctx, ctx->PC++);
    ea50:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
    ea54:	e2833005 	add	r3, r3, #5
{
    ea58:	e92d4070 	push	{r4, r5, r6, lr}
    ea5c:	e1a04000 	mov	r4, r0
	char off = read8(ctx, ctx->PC++);
    ea60:	e1c021bc 	strh	r2, [r0, #28]
    ea64:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    ea68:	e5903024 	ldr	r3, [r0, #36]	; 0x24
    ea6c:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
    ea70:	e12fff33 	blx	r3
	ctx->tstates += 3;
    ea74:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	BR.E = doSetRes(ctx, SR_SET, 1, read8(ctx, WR.IY + off));
    ea78:	e1d410ba 	ldrh	r1, [r4, #10]
    ea7c:	e6ff5070 	uxth	r5, r0
    ea80:	e2833003 	add	r3, r3, #3
    ea84:	e0851001 	add	r1, r5, r1
    ea88:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    ea8c:	e6ff1071 	uxth	r1, r1
    ea90:	e5943024 	ldr	r3, [r4, #36]	; 0x24
    ea94:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    ea98:	e12fff33 	blx	r3
	ctx->tstates += 3;
    ea9c:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	write8(ctx, WR.IY + off, BR.E);	
    eaa0:	e1d410ba 	ldrh	r1, [r4, #10]
		val |= (1 << pos);
    eaa4:	e3802002 	orr	r2, r0, #2
    eaa8:	e0851001 	add	r1, r5, r1
	ctx->tstates += 3;
    eaac:	e2833003 	add	r3, r3, #3
		val |= (1 << pos);
    eab0:	e6ef2072 	uxtb	r2, r2
	ctx->tstates += 3;
    eab4:	e5843040 	str	r3, [r4, #64]	; 0x40
	BR.E = doSetRes(ctx, SR_SET, 1, read8(ctx, WR.IY + off));
    eab8:	e5c42004 	strb	r2, [r4, #4]
	ctx->memWrite(ctx->memParam, addr, val);	
    eabc:	e5943028 	ldr	r3, [r4, #40]	; 0x28
    eac0:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    eac4:	e6ff1071 	uxth	r1, r1
}
    eac8:	e8bd4070 	pop	{r4, r5, r6, lr}
    eacc:	e12fff13 	bx	r3

0000ead0 <LD_E_SET_2_off_IX_d>:


static void LD_E_SET_2_off_IX_d (Z80Context* ctx)
{
	ctx->tstates += 2;
	char off = read8(ctx, ctx->PC++);
    ead0:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
    ead4:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	char off = read8(ctx, ctx->PC++);
    ead8:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
    eadc:	e2833005 	add	r3, r3, #5
{
    eae0:	e92d4070 	push	{r4, r5, r6, lr}
    eae4:	e1a04000 	mov	r4, r0
	char off = read8(ctx, ctx->PC++);
    eae8:	e1c021bc 	strh	r2, [r0, #28]
    eaec:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    eaf0:	e5903024 	ldr	r3, [r0, #36]	; 0x24
    eaf4:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
    eaf8:	e12fff33 	blx	r3
	ctx->tstates += 3;
    eafc:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	BR.E = doSetRes(ctx, SR_SET, 2, read8(ctx, WR.IX + off));
    eb00:	e1d410b8 	ldrh	r1, [r4, #8]
    eb04:	e6ff5070 	uxth	r5, r0
    eb08:	e2833003 	add	r3, r3, #3
    eb0c:	e0851001 	add	r1, r5, r1
    eb10:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    eb14:	e6ff1071 	uxth	r1, r1
    eb18:	e5943024 	ldr	r3, [r4, #36]	; 0x24
    eb1c:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    eb20:	e12fff33 	blx	r3
	ctx->tstates += 3;
    eb24:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	write8(ctx, WR.IX + off, BR.E);	
    eb28:	e1d410b8 	ldrh	r1, [r4, #8]
		val |= (1 << pos);
    eb2c:	e3802004 	orr	r2, r0, #4
    eb30:	e0851001 	add	r1, r5, r1
	ctx->tstates += 3;
    eb34:	e2833003 	add	r3, r3, #3
		val |= (1 << pos);
    eb38:	e6ef2072 	uxtb	r2, r2
	ctx->tstates += 3;
    eb3c:	e5843040 	str	r3, [r4, #64]	; 0x40
	BR.E = doSetRes(ctx, SR_SET, 2, read8(ctx, WR.IX + off));
    eb40:	e5c42004 	strb	r2, [r4, #4]
	ctx->memWrite(ctx->memParam, addr, val);	
    eb44:	e5943028 	ldr	r3, [r4, #40]	; 0x28
    eb48:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    eb4c:	e6ff1071 	uxth	r1, r1
}
    eb50:	e8bd4070 	pop	{r4, r5, r6, lr}
    eb54:	e12fff13 	bx	r3

0000eb58 <LD_E_SET_2_off_IY_d>:


static void LD_E_SET_2_off_IY_d (Z80Context* ctx)
{
	ctx->tstates += 2;
	char off = read8(ctx, ctx->PC++);
    eb58:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
    eb5c:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	char off = read8(ctx, ctx->PC++);
    eb60:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
    eb64:	e2833005 	add	r3, r3, #5
{
    eb68:	e92d4070 	push	{r4, r5, r6, lr}
    eb6c:	e1a04000 	mov	r4, r0
	char off = read8(ctx, ctx->PC++);
    eb70:	e1c021bc 	strh	r2, [r0, #28]
    eb74:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    eb78:	e5903024 	ldr	r3, [r0, #36]	; 0x24
    eb7c:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
    eb80:	e12fff33 	blx	r3
	ctx->tstates += 3;
    eb84:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	BR.E = doSetRes(ctx, SR_SET, 2, read8(ctx, WR.IY + off));
    eb88:	e1d410ba 	ldrh	r1, [r4, #10]
    eb8c:	e6ff5070 	uxth	r5, r0
    eb90:	e2833003 	add	r3, r3, #3
    eb94:	e0851001 	add	r1, r5, r1
    eb98:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    eb9c:	e6ff1071 	uxth	r1, r1
    eba0:	e5943024 	ldr	r3, [r4, #36]	; 0x24
    eba4:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    eba8:	e12fff33 	blx	r3
	ctx->tstates += 3;
    ebac:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	write8(ctx, WR.IY + off, BR.E);	
    ebb0:	e1d410ba 	ldrh	r1, [r4, #10]
		val |= (1 << pos);
    ebb4:	e3802004 	orr	r2, r0, #4
    ebb8:	e0851001 	add	r1, r5, r1
	ctx->tstates += 3;
    ebbc:	e2833003 	add	r3, r3, #3
		val |= (1 << pos);
    ebc0:	e6ef2072 	uxtb	r2, r2
	ctx->tstates += 3;
    ebc4:	e5843040 	str	r3, [r4, #64]	; 0x40
	BR.E = doSetRes(ctx, SR_SET, 2, read8(ctx, WR.IY + off));
    ebc8:	e5c42004 	strb	r2, [r4, #4]
	ctx->memWrite(ctx->memParam, addr, val);	
    ebcc:	e5943028 	ldr	r3, [r4, #40]	; 0x28
    ebd0:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    ebd4:	e6ff1071 	uxth	r1, r1
}
    ebd8:	e8bd4070 	pop	{r4, r5, r6, lr}
    ebdc:	e12fff13 	bx	r3

0000ebe0 <LD_E_SET_3_off_IX_d>:


static void LD_E_SET_3_off_IX_d (Z80Context* ctx)
{
	ctx->tstates += 2;
	char off = read8(ctx, ctx->PC++);
    ebe0:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
    ebe4:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	char off = read8(ctx, ctx->PC++);
    ebe8:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
    ebec:	e2833005 	add	r3, r3, #5
{
    ebf0:	e92d4070 	push	{r4, r5, r6, lr}
    ebf4:	e1a04000 	mov	r4, r0
	char off = read8(ctx, ctx->PC++);
    ebf8:	e1c021bc 	strh	r2, [r0, #28]
    ebfc:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    ec00:	e5903024 	ldr	r3, [r0, #36]	; 0x24
    ec04:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
    ec08:	e12fff33 	blx	r3
	ctx->tstates += 3;
    ec0c:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	BR.E = doSetRes(ctx, SR_SET, 3, read8(ctx, WR.IX + off));
    ec10:	e1d410b8 	ldrh	r1, [r4, #8]
    ec14:	e6ff5070 	uxth	r5, r0
    ec18:	e2833003 	add	r3, r3, #3
    ec1c:	e0851001 	add	r1, r5, r1
    ec20:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    ec24:	e6ff1071 	uxth	r1, r1
    ec28:	e5943024 	ldr	r3, [r4, #36]	; 0x24
    ec2c:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    ec30:	e12fff33 	blx	r3
	ctx->tstates += 3;
    ec34:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	write8(ctx, WR.IX + off, BR.E);	
    ec38:	e1d410b8 	ldrh	r1, [r4, #8]
		val |= (1 << pos);
    ec3c:	e3802008 	orr	r2, r0, #8
    ec40:	e0851001 	add	r1, r5, r1
	ctx->tstates += 3;
    ec44:	e2833003 	add	r3, r3, #3
		val |= (1 << pos);
    ec48:	e6ef2072 	uxtb	r2, r2
	ctx->tstates += 3;
    ec4c:	e5843040 	str	r3, [r4, #64]	; 0x40
	BR.E = doSetRes(ctx, SR_SET, 3, read8(ctx, WR.IX + off));
    ec50:	e5c42004 	strb	r2, [r4, #4]
	ctx->memWrite(ctx->memParam, addr, val);	
    ec54:	e5943028 	ldr	r3, [r4, #40]	; 0x28
    ec58:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    ec5c:	e6ff1071 	uxth	r1, r1
}
    ec60:	e8bd4070 	pop	{r4, r5, r6, lr}
    ec64:	e12fff13 	bx	r3

0000ec68 <LD_E_SET_3_off_IY_d>:


static void LD_E_SET_3_off_IY_d (Z80Context* ctx)
{
	ctx->tstates += 2;
	char off = read8(ctx, ctx->PC++);
    ec68:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
    ec6c:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	char off = read8(ctx, ctx->PC++);
    ec70:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
    ec74:	e2833005 	add	r3, r3, #5
{
    ec78:	e92d4070 	push	{r4, r5, r6, lr}
    ec7c:	e1a04000 	mov	r4, r0
	char off = read8(ctx, ctx->PC++);
    ec80:	e1c021bc 	strh	r2, [r0, #28]
    ec84:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    ec88:	e5903024 	ldr	r3, [r0, #36]	; 0x24
    ec8c:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
    ec90:	e12fff33 	blx	r3
	ctx->tstates += 3;
    ec94:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	BR.E = doSetRes(ctx, SR_SET, 3, read8(ctx, WR.IY + off));
    ec98:	e1d410ba 	ldrh	r1, [r4, #10]
    ec9c:	e6ff5070 	uxth	r5, r0
    eca0:	e2833003 	add	r3, r3, #3
    eca4:	e0851001 	add	r1, r5, r1
    eca8:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    ecac:	e6ff1071 	uxth	r1, r1
    ecb0:	e5943024 	ldr	r3, [r4, #36]	; 0x24
    ecb4:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    ecb8:	e12fff33 	blx	r3
	ctx->tstates += 3;
    ecbc:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	write8(ctx, WR.IY + off, BR.E);	
    ecc0:	e1d410ba 	ldrh	r1, [r4, #10]
		val |= (1 << pos);
    ecc4:	e3802008 	orr	r2, r0, #8
    ecc8:	e0851001 	add	r1, r5, r1
	ctx->tstates += 3;
    eccc:	e2833003 	add	r3, r3, #3
		val |= (1 << pos);
    ecd0:	e6ef2072 	uxtb	r2, r2
	ctx->tstates += 3;
    ecd4:	e5843040 	str	r3, [r4, #64]	; 0x40
	BR.E = doSetRes(ctx, SR_SET, 3, read8(ctx, WR.IY + off));
    ecd8:	e5c42004 	strb	r2, [r4, #4]
	ctx->memWrite(ctx->memParam, addr, val);	
    ecdc:	e5943028 	ldr	r3, [r4, #40]	; 0x28
    ece0:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    ece4:	e6ff1071 	uxth	r1, r1
}
    ece8:	e8bd4070 	pop	{r4, r5, r6, lr}
    ecec:	e12fff13 	bx	r3

0000ecf0 <LD_E_SET_4_off_IX_d>:


static void LD_E_SET_4_off_IX_d (Z80Context* ctx)
{
	ctx->tstates += 2;
	char off = read8(ctx, ctx->PC++);
    ecf0:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
    ecf4:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	char off = read8(ctx, ctx->PC++);
    ecf8:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
    ecfc:	e2833005 	add	r3, r3, #5
{
    ed00:	e92d4070 	push	{r4, r5, r6, lr}
    ed04:	e1a04000 	mov	r4, r0
	char off = read8(ctx, ctx->PC++);
    ed08:	e1c021bc 	strh	r2, [r0, #28]
    ed0c:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    ed10:	e5903024 	ldr	r3, [r0, #36]	; 0x24
    ed14:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
    ed18:	e12fff33 	blx	r3
	ctx->tstates += 3;
    ed1c:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	BR.E = doSetRes(ctx, SR_SET, 4, read8(ctx, WR.IX + off));
    ed20:	e1d410b8 	ldrh	r1, [r4, #8]
    ed24:	e6ff5070 	uxth	r5, r0
    ed28:	e2833003 	add	r3, r3, #3
    ed2c:	e0851001 	add	r1, r5, r1
    ed30:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    ed34:	e6ff1071 	uxth	r1, r1
    ed38:	e5943024 	ldr	r3, [r4, #36]	; 0x24
    ed3c:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    ed40:	e12fff33 	blx	r3
	ctx->tstates += 3;
    ed44:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	write8(ctx, WR.IX + off, BR.E);	
    ed48:	e1d410b8 	ldrh	r1, [r4, #8]
		val |= (1 << pos);
    ed4c:	e3802010 	orr	r2, r0, #16
    ed50:	e0851001 	add	r1, r5, r1
	ctx->tstates += 3;
    ed54:	e2833003 	add	r3, r3, #3
		val |= (1 << pos);
    ed58:	e6ef2072 	uxtb	r2, r2
	ctx->tstates += 3;
    ed5c:	e5843040 	str	r3, [r4, #64]	; 0x40
	BR.E = doSetRes(ctx, SR_SET, 4, read8(ctx, WR.IX + off));
    ed60:	e5c42004 	strb	r2, [r4, #4]
	ctx->memWrite(ctx->memParam, addr, val);	
    ed64:	e5943028 	ldr	r3, [r4, #40]	; 0x28
    ed68:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    ed6c:	e6ff1071 	uxth	r1, r1
}
    ed70:	e8bd4070 	pop	{r4, r5, r6, lr}
    ed74:	e12fff13 	bx	r3

0000ed78 <LD_E_SET_4_off_IY_d>:


static void LD_E_SET_4_off_IY_d (Z80Context* ctx)
{
	ctx->tstates += 2;
	char off = read8(ctx, ctx->PC++);
    ed78:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
    ed7c:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	char off = read8(ctx, ctx->PC++);
    ed80:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
    ed84:	e2833005 	add	r3, r3, #5
{
    ed88:	e92d4070 	push	{r4, r5, r6, lr}
    ed8c:	e1a04000 	mov	r4, r0
	char off = read8(ctx, ctx->PC++);
    ed90:	e1c021bc 	strh	r2, [r0, #28]
    ed94:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    ed98:	e5903024 	ldr	r3, [r0, #36]	; 0x24
    ed9c:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
    eda0:	e12fff33 	blx	r3
	ctx->tstates += 3;
    eda4:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	BR.E = doSetRes(ctx, SR_SET, 4, read8(ctx, WR.IY + off));
    eda8:	e1d410ba 	ldrh	r1, [r4, #10]
    edac:	e6ff5070 	uxth	r5, r0
    edb0:	e2833003 	add	r3, r3, #3
    edb4:	e0851001 	add	r1, r5, r1
    edb8:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    edbc:	e6ff1071 	uxth	r1, r1
    edc0:	e5943024 	ldr	r3, [r4, #36]	; 0x24
    edc4:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    edc8:	e12fff33 	blx	r3
	ctx->tstates += 3;
    edcc:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	write8(ctx, WR.IY + off, BR.E);	
    edd0:	e1d410ba 	ldrh	r1, [r4, #10]
		val |= (1 << pos);
    edd4:	e3802010 	orr	r2, r0, #16
    edd8:	e0851001 	add	r1, r5, r1
	ctx->tstates += 3;
    eddc:	e2833003 	add	r3, r3, #3
		val |= (1 << pos);
    ede0:	e6ef2072 	uxtb	r2, r2
	ctx->tstates += 3;
    ede4:	e5843040 	str	r3, [r4, #64]	; 0x40
	BR.E = doSetRes(ctx, SR_SET, 4, read8(ctx, WR.IY + off));
    ede8:	e5c42004 	strb	r2, [r4, #4]
	ctx->memWrite(ctx->memParam, addr, val);	
    edec:	e5943028 	ldr	r3, [r4, #40]	; 0x28
    edf0:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    edf4:	e6ff1071 	uxth	r1, r1
}
    edf8:	e8bd4070 	pop	{r4, r5, r6, lr}
    edfc:	e12fff13 	bx	r3

0000ee00 <LD_E_SET_5_off_IX_d>:


static void LD_E_SET_5_off_IX_d (Z80Context* ctx)
{
	ctx->tstates += 2;
	char off = read8(ctx, ctx->PC++);
    ee00:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
    ee04:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	char off = read8(ctx, ctx->PC++);
    ee08:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
    ee0c:	e2833005 	add	r3, r3, #5
{
    ee10:	e92d4070 	push	{r4, r5, r6, lr}
    ee14:	e1a04000 	mov	r4, r0
	char off = read8(ctx, ctx->PC++);
    ee18:	e1c021bc 	strh	r2, [r0, #28]
    ee1c:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    ee20:	e5903024 	ldr	r3, [r0, #36]	; 0x24
    ee24:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
    ee28:	e12fff33 	blx	r3
	ctx->tstates += 3;
    ee2c:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	BR.E = doSetRes(ctx, SR_SET, 5, read8(ctx, WR.IX + off));
    ee30:	e1d410b8 	ldrh	r1, [r4, #8]
    ee34:	e6ff5070 	uxth	r5, r0
    ee38:	e2833003 	add	r3, r3, #3
    ee3c:	e0851001 	add	r1, r5, r1
    ee40:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    ee44:	e6ff1071 	uxth	r1, r1
    ee48:	e5943024 	ldr	r3, [r4, #36]	; 0x24
    ee4c:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    ee50:	e12fff33 	blx	r3
	ctx->tstates += 3;
    ee54:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	write8(ctx, WR.IX + off, BR.E);	
    ee58:	e1d410b8 	ldrh	r1, [r4, #8]
		val |= (1 << pos);
    ee5c:	e3802020 	orr	r2, r0, #32
    ee60:	e0851001 	add	r1, r5, r1
	ctx->tstates += 3;
    ee64:	e2833003 	add	r3, r3, #3
		val |= (1 << pos);
    ee68:	e6ef2072 	uxtb	r2, r2
	ctx->tstates += 3;
    ee6c:	e5843040 	str	r3, [r4, #64]	; 0x40
	BR.E = doSetRes(ctx, SR_SET, 5, read8(ctx, WR.IX + off));
    ee70:	e5c42004 	strb	r2, [r4, #4]
	ctx->memWrite(ctx->memParam, addr, val);	
    ee74:	e5943028 	ldr	r3, [r4, #40]	; 0x28
    ee78:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    ee7c:	e6ff1071 	uxth	r1, r1
}
    ee80:	e8bd4070 	pop	{r4, r5, r6, lr}
    ee84:	e12fff13 	bx	r3

0000ee88 <LD_E_SET_5_off_IY_d>:


static void LD_E_SET_5_off_IY_d (Z80Context* ctx)
{
	ctx->tstates += 2;
	char off = read8(ctx, ctx->PC++);
    ee88:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
    ee8c:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	char off = read8(ctx, ctx->PC++);
    ee90:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
    ee94:	e2833005 	add	r3, r3, #5
{
    ee98:	e92d4070 	push	{r4, r5, r6, lr}
    ee9c:	e1a04000 	mov	r4, r0
	char off = read8(ctx, ctx->PC++);
    eea0:	e1c021bc 	strh	r2, [r0, #28]
    eea4:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    eea8:	e5903024 	ldr	r3, [r0, #36]	; 0x24
    eeac:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
    eeb0:	e12fff33 	blx	r3
	ctx->tstates += 3;
    eeb4:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	BR.E = doSetRes(ctx, SR_SET, 5, read8(ctx, WR.IY + off));
    eeb8:	e1d410ba 	ldrh	r1, [r4, #10]
    eebc:	e6ff5070 	uxth	r5, r0
    eec0:	e2833003 	add	r3, r3, #3
    eec4:	e0851001 	add	r1, r5, r1
    eec8:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    eecc:	e6ff1071 	uxth	r1, r1
    eed0:	e5943024 	ldr	r3, [r4, #36]	; 0x24
    eed4:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    eed8:	e12fff33 	blx	r3
	ctx->tstates += 3;
    eedc:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	write8(ctx, WR.IY + off, BR.E);	
    eee0:	e1d410ba 	ldrh	r1, [r4, #10]
		val |= (1 << pos);
    eee4:	e3802020 	orr	r2, r0, #32
    eee8:	e0851001 	add	r1, r5, r1
	ctx->tstates += 3;
    eeec:	e2833003 	add	r3, r3, #3
		val |= (1 << pos);
    eef0:	e6ef2072 	uxtb	r2, r2
	ctx->tstates += 3;
    eef4:	e5843040 	str	r3, [r4, #64]	; 0x40
	BR.E = doSetRes(ctx, SR_SET, 5, read8(ctx, WR.IY + off));
    eef8:	e5c42004 	strb	r2, [r4, #4]
	ctx->memWrite(ctx->memParam, addr, val);	
    eefc:	e5943028 	ldr	r3, [r4, #40]	; 0x28
    ef00:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    ef04:	e6ff1071 	uxth	r1, r1
}
    ef08:	e8bd4070 	pop	{r4, r5, r6, lr}
    ef0c:	e12fff13 	bx	r3

0000ef10 <LD_E_SET_6_off_IX_d>:


static void LD_E_SET_6_off_IX_d (Z80Context* ctx)
{
	ctx->tstates += 2;
	char off = read8(ctx, ctx->PC++);
    ef10:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
    ef14:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	char off = read8(ctx, ctx->PC++);
    ef18:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
    ef1c:	e2833005 	add	r3, r3, #5
{
    ef20:	e92d4070 	push	{r4, r5, r6, lr}
    ef24:	e1a04000 	mov	r4, r0
	char off = read8(ctx, ctx->PC++);
    ef28:	e1c021bc 	strh	r2, [r0, #28]
    ef2c:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    ef30:	e5903024 	ldr	r3, [r0, #36]	; 0x24
    ef34:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
    ef38:	e12fff33 	blx	r3
	ctx->tstates += 3;
    ef3c:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	BR.E = doSetRes(ctx, SR_SET, 6, read8(ctx, WR.IX + off));
    ef40:	e1d410b8 	ldrh	r1, [r4, #8]
    ef44:	e6ff5070 	uxth	r5, r0
    ef48:	e2833003 	add	r3, r3, #3
    ef4c:	e0851001 	add	r1, r5, r1
    ef50:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    ef54:	e6ff1071 	uxth	r1, r1
    ef58:	e5943024 	ldr	r3, [r4, #36]	; 0x24
    ef5c:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    ef60:	e12fff33 	blx	r3
	ctx->tstates += 3;
    ef64:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	write8(ctx, WR.IX + off, BR.E);	
    ef68:	e1d410b8 	ldrh	r1, [r4, #8]
		val |= (1 << pos);
    ef6c:	e3802040 	orr	r2, r0, #64	; 0x40
    ef70:	e0851001 	add	r1, r5, r1
	ctx->tstates += 3;
    ef74:	e2833003 	add	r3, r3, #3
		val |= (1 << pos);
    ef78:	e6ef2072 	uxtb	r2, r2
	ctx->tstates += 3;
    ef7c:	e5843040 	str	r3, [r4, #64]	; 0x40
	BR.E = doSetRes(ctx, SR_SET, 6, read8(ctx, WR.IX + off));
    ef80:	e5c42004 	strb	r2, [r4, #4]
	ctx->memWrite(ctx->memParam, addr, val);	
    ef84:	e5943028 	ldr	r3, [r4, #40]	; 0x28
    ef88:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    ef8c:	e6ff1071 	uxth	r1, r1
}
    ef90:	e8bd4070 	pop	{r4, r5, r6, lr}
    ef94:	e12fff13 	bx	r3

0000ef98 <LD_E_SET_6_off_IY_d>:


static void LD_E_SET_6_off_IY_d (Z80Context* ctx)
{
	ctx->tstates += 2;
	char off = read8(ctx, ctx->PC++);
    ef98:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
    ef9c:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	char off = read8(ctx, ctx->PC++);
    efa0:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
    efa4:	e2833005 	add	r3, r3, #5
{
    efa8:	e92d4070 	push	{r4, r5, r6, lr}
    efac:	e1a04000 	mov	r4, r0
	char off = read8(ctx, ctx->PC++);
    efb0:	e1c021bc 	strh	r2, [r0, #28]
    efb4:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    efb8:	e5903024 	ldr	r3, [r0, #36]	; 0x24
    efbc:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
    efc0:	e12fff33 	blx	r3
	ctx->tstates += 3;
    efc4:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	BR.E = doSetRes(ctx, SR_SET, 6, read8(ctx, WR.IY + off));
    efc8:	e1d410ba 	ldrh	r1, [r4, #10]
    efcc:	e6ff5070 	uxth	r5, r0
    efd0:	e2833003 	add	r3, r3, #3
    efd4:	e0851001 	add	r1, r5, r1
    efd8:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    efdc:	e6ff1071 	uxth	r1, r1
    efe0:	e5943024 	ldr	r3, [r4, #36]	; 0x24
    efe4:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    efe8:	e12fff33 	blx	r3
	ctx->tstates += 3;
    efec:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	write8(ctx, WR.IY + off, BR.E);	
    eff0:	e1d410ba 	ldrh	r1, [r4, #10]
		val |= (1 << pos);
    eff4:	e3802040 	orr	r2, r0, #64	; 0x40
    eff8:	e0851001 	add	r1, r5, r1
	ctx->tstates += 3;
    effc:	e2833003 	add	r3, r3, #3
		val |= (1 << pos);
    f000:	e6ef2072 	uxtb	r2, r2
	ctx->tstates += 3;
    f004:	e5843040 	str	r3, [r4, #64]	; 0x40
	BR.E = doSetRes(ctx, SR_SET, 6, read8(ctx, WR.IY + off));
    f008:	e5c42004 	strb	r2, [r4, #4]
	ctx->memWrite(ctx->memParam, addr, val);	
    f00c:	e5943028 	ldr	r3, [r4, #40]	; 0x28
    f010:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    f014:	e6ff1071 	uxth	r1, r1
}
    f018:	e8bd4070 	pop	{r4, r5, r6, lr}
    f01c:	e12fff13 	bx	r3

0000f020 <LD_E_SET_7_off_IX_d>:


static void LD_E_SET_7_off_IX_d (Z80Context* ctx)
{
	ctx->tstates += 2;
	char off = read8(ctx, ctx->PC++);
    f020:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
    f024:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	char off = read8(ctx, ctx->PC++);
    f028:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
    f02c:	e2833005 	add	r3, r3, #5
{
    f030:	e92d4070 	push	{r4, r5, r6, lr}
    f034:	e1a04000 	mov	r4, r0
	char off = read8(ctx, ctx->PC++);
    f038:	e1c021bc 	strh	r2, [r0, #28]
    f03c:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    f040:	e5903024 	ldr	r3, [r0, #36]	; 0x24
    f044:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
    f048:	e12fff33 	blx	r3
	ctx->tstates += 3;
    f04c:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	BR.E = doSetRes(ctx, SR_SET, 7, read8(ctx, WR.IX + off));
    f050:	e1d410b8 	ldrh	r1, [r4, #8]
    f054:	e6ff5070 	uxth	r5, r0
    f058:	e2833003 	add	r3, r3, #3
    f05c:	e0851001 	add	r1, r5, r1
    f060:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    f064:	e6ff1071 	uxth	r1, r1
    f068:	e5943024 	ldr	r3, [r4, #36]	; 0x24
    f06c:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    f070:	e12fff33 	blx	r3
		val |= (1 << pos);
    f074:	e1e00c80 	mvn	r0, r0, lsl #25
    f078:	e1e00ca0 	mvn	r0, r0, lsr #25
	ctx->tstates += 3;
    f07c:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	write8(ctx, WR.IX + off, BR.E);	
    f080:	e1d410b8 	ldrh	r1, [r4, #8]
		val |= (1 << pos);
    f084:	e6ef2070 	uxtb	r2, r0
    f088:	e0851001 	add	r1, r5, r1
	ctx->tstates += 3;
    f08c:	e2833003 	add	r3, r3, #3
    f090:	e5843040 	str	r3, [r4, #64]	; 0x40
	BR.E = doSetRes(ctx, SR_SET, 7, read8(ctx, WR.IX + off));
    f094:	e5c42004 	strb	r2, [r4, #4]
	ctx->memWrite(ctx->memParam, addr, val);	
    f098:	e5943028 	ldr	r3, [r4, #40]	; 0x28
    f09c:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    f0a0:	e6ff1071 	uxth	r1, r1
}
    f0a4:	e8bd4070 	pop	{r4, r5, r6, lr}
    f0a8:	e12fff13 	bx	r3

0000f0ac <LD_E_SET_7_off_IY_d>:


static void LD_E_SET_7_off_IY_d (Z80Context* ctx)
{
	ctx->tstates += 2;
	char off = read8(ctx, ctx->PC++);
    f0ac:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
    f0b0:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	char off = read8(ctx, ctx->PC++);
    f0b4:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
    f0b8:	e2833005 	add	r3, r3, #5
{
    f0bc:	e92d4070 	push	{r4, r5, r6, lr}
    f0c0:	e1a04000 	mov	r4, r0
	char off = read8(ctx, ctx->PC++);
    f0c4:	e1c021bc 	strh	r2, [r0, #28]
    f0c8:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    f0cc:	e5903024 	ldr	r3, [r0, #36]	; 0x24
    f0d0:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
    f0d4:	e12fff33 	blx	r3
	ctx->tstates += 3;
    f0d8:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	BR.E = doSetRes(ctx, SR_SET, 7, read8(ctx, WR.IY + off));
    f0dc:	e1d410ba 	ldrh	r1, [r4, #10]
    f0e0:	e6ff5070 	uxth	r5, r0
    f0e4:	e2833003 	add	r3, r3, #3
    f0e8:	e0851001 	add	r1, r5, r1
    f0ec:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    f0f0:	e6ff1071 	uxth	r1, r1
    f0f4:	e5943024 	ldr	r3, [r4, #36]	; 0x24
    f0f8:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    f0fc:	e12fff33 	blx	r3
		val |= (1 << pos);
    f100:	e1e00c80 	mvn	r0, r0, lsl #25
    f104:	e1e00ca0 	mvn	r0, r0, lsr #25
	ctx->tstates += 3;
    f108:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	write8(ctx, WR.IY + off, BR.E);	
    f10c:	e1d410ba 	ldrh	r1, [r4, #10]
		val |= (1 << pos);
    f110:	e6ef2070 	uxtb	r2, r0
    f114:	e0851001 	add	r1, r5, r1
	ctx->tstates += 3;
    f118:	e2833003 	add	r3, r3, #3
    f11c:	e5843040 	str	r3, [r4, #64]	; 0x40
	BR.E = doSetRes(ctx, SR_SET, 7, read8(ctx, WR.IY + off));
    f120:	e5c42004 	strb	r2, [r4, #4]
	ctx->memWrite(ctx->memParam, addr, val);	
    f124:	e5943028 	ldr	r3, [r4, #40]	; 0x28
    f128:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    f12c:	e6ff1071 	uxth	r1, r1
}
    f130:	e8bd4070 	pop	{r4, r5, r6, lr}
    f134:	e12fff13 	bx	r3

0000f138 <LD_H_off_HL>:
	ctx->tstates += 3;
    f138:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	  
}


static void LD_H_off_HL (Z80Context* ctx)
{
    f13c:	e92d4010 	push	{r4, lr}
    f140:	e2833003 	add	r3, r3, #3
    f144:	e5803040 	str	r3, [r0, #64]	; 0x40
    f148:	e1a04000 	mov	r4, r0
	BR.H = read8(ctx, WR.HL);
    f14c:	e1d010b6 	ldrh	r1, [r0, #6]
	return ctx->memRead(ctx->memParam, addr);	
    f150:	e5903024 	ldr	r3, [r0, #36]	; 0x24
    f154:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
    f158:	e12fff33 	blx	r3
    f15c:	e5c40007 	strb	r0, [r4, #7]
}
    f160:	e8bd8010 	pop	{r4, pc}

0000f164 <LD_H_off_IX_d>:


static void LD_H_off_IX_d (Z80Context* ctx)
{
    f164:	e92d4070 	push	{r4, r5, r6, lr}
    f168:	e1a04000 	mov	r4, r0
	ctx->tstates += 5;
	BR.H = read8(ctx, WR.IX + (char) read8(ctx, ctx->PC++));
    f16c:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 5;
    f170:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	BR.H = read8(ctx, WR.IX + (char) read8(ctx, ctx->PC++));
    f174:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
    f178:	e2833008 	add	r3, r3, #8
    f17c:	e1c021bc 	strh	r2, [r0, #28]
    f180:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    f184:	e5903024 	ldr	r3, [r0, #36]	; 0x24
    f188:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
    f18c:	e1d450b8 	ldrh	r5, [r4, #8]
    f190:	e12fff33 	blx	r3
	ctx->tstates += 3;
    f194:	e5943040 	ldr	r3, [r4, #64]	; 0x40
    f198:	e0851000 	add	r1, r5, r0
    f19c:	e2833003 	add	r3, r3, #3
    f1a0:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    f1a4:	e6ff1071 	uxth	r1, r1
    f1a8:	e5943024 	ldr	r3, [r4, #36]	; 0x24
    f1ac:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    f1b0:	e12fff33 	blx	r3
    f1b4:	e5c40007 	strb	r0, [r4, #7]
}
    f1b8:	e8bd8070 	pop	{r4, r5, r6, pc}

0000f1bc <LD_H_off_IY_d>:


static void LD_H_off_IY_d (Z80Context* ctx)
{
    f1bc:	e92d4070 	push	{r4, r5, r6, lr}
    f1c0:	e1a04000 	mov	r4, r0
	ctx->tstates += 5;
	BR.H = read8(ctx, WR.IY + (char) read8(ctx, ctx->PC++));
    f1c4:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 5;
    f1c8:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	BR.H = read8(ctx, WR.IY + (char) read8(ctx, ctx->PC++));
    f1cc:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
    f1d0:	e2833008 	add	r3, r3, #8
    f1d4:	e1c021bc 	strh	r2, [r0, #28]
    f1d8:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    f1dc:	e5903024 	ldr	r3, [r0, #36]	; 0x24
    f1e0:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
    f1e4:	e1d450ba 	ldrh	r5, [r4, #10]
    f1e8:	e12fff33 	blx	r3
	ctx->tstates += 3;
    f1ec:	e5943040 	ldr	r3, [r4, #64]	; 0x40
    f1f0:	e0851000 	add	r1, r5, r0
    f1f4:	e2833003 	add	r3, r3, #3
    f1f8:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    f1fc:	e6ff1071 	uxth	r1, r1
    f200:	e5943024 	ldr	r3, [r4, #36]	; 0x24
    f204:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    f208:	e12fff33 	blx	r3
    f20c:	e5c40007 	strb	r0, [r4, #7]
}
    f210:	e8bd8070 	pop	{r4, r5, r6, pc}

0000f214 <LD_H_A>:


static void LD_H_A (Z80Context* ctx)
{
	BR.H = BR.A;
    f214:	e5d03001 	ldrb	r3, [r0, #1]
    f218:	e5c03007 	strb	r3, [r0, #7]
}
    f21c:	e12fff1e 	bx	lr

0000f220 <LD_H_B>:


static void LD_H_B (Z80Context* ctx)
{
	BR.H = BR.B;
    f220:	e5d03003 	ldrb	r3, [r0, #3]
    f224:	e5c03007 	strb	r3, [r0, #7]
}
    f228:	e12fff1e 	bx	lr

0000f22c <LD_H_C>:


static void LD_H_C (Z80Context* ctx)
{
	BR.H = BR.C;
    f22c:	e5d03002 	ldrb	r3, [r0, #2]
    f230:	e5c03007 	strb	r3, [r0, #7]
}
    f234:	e12fff1e 	bx	lr

0000f238 <LD_H_D>:


static void LD_H_D (Z80Context* ctx)
{
	BR.H = BR.D;
    f238:	e5d03005 	ldrb	r3, [r0, #5]
    f23c:	e5c03007 	strb	r3, [r0, #7]
}
    f240:	e12fff1e 	bx	lr

0000f244 <LD_H_E>:


static void LD_H_E (Z80Context* ctx)
{
	BR.H = BR.E;
    f244:	e5d03004 	ldrb	r3, [r0, #4]
    f248:	e5c03007 	strb	r3, [r0, #7]
}
    f24c:	e12fff1e 	bx	lr

0000f250 <LD_H_L>:
}


static void LD_H_L (Z80Context* ctx)
{
	BR.H = BR.L;
    f250:	e5d03006 	ldrb	r3, [r0, #6]
    f254:	e5c03007 	strb	r3, [r0, #7]
}
    f258:	e12fff1e 	bx	lr

0000f25c <LD_H_n>:


static void LD_H_n (Z80Context* ctx)
{
	BR.H = read8(ctx, ctx->PC++);
    f25c:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 3;
    f260:	e5903040 	ldr	r3, [r0, #64]	; 0x40
    f264:	e2812001 	add	r2, r1, #1
    f268:	e2833003 	add	r3, r3, #3
{
    f26c:	e92d4010 	push	{r4, lr}
    f270:	e5803040 	str	r3, [r0, #64]	; 0x40
    f274:	e1a04000 	mov	r4, r0
	BR.H = read8(ctx, ctx->PC++);
    f278:	e1c021bc 	strh	r2, [r0, #28]
	return ctx->memRead(ctx->memParam, addr);	
    f27c:	e5903024 	ldr	r3, [r0, #36]	; 0x24
    f280:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
    f284:	e12fff33 	blx	r3
    f288:	e5c40007 	strb	r0, [r4, #7]
	
}
    f28c:	e8bd8010 	pop	{r4, pc}

0000f290 <LD_H_RES_0_off_IX_d>:


static void LD_H_RES_0_off_IX_d (Z80Context* ctx)
{
	ctx->tstates += 2;
	char off = read8(ctx, ctx->PC++);
    f290:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
    f294:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	char off = read8(ctx, ctx->PC++);
    f298:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
    f29c:	e2833005 	add	r3, r3, #5
{
    f2a0:	e92d4070 	push	{r4, r5, r6, lr}
    f2a4:	e1a04000 	mov	r4, r0
	char off = read8(ctx, ctx->PC++);
    f2a8:	e1c021bc 	strh	r2, [r0, #28]
    f2ac:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    f2b0:	e5903024 	ldr	r3, [r0, #36]	; 0x24
    f2b4:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
    f2b8:	e12fff33 	blx	r3
	ctx->tstates += 3;
    f2bc:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	BR.H = doSetRes(ctx, SR_RES, 0, read8(ctx, WR.IX + off));
    f2c0:	e1d410b8 	ldrh	r1, [r4, #8]
    f2c4:	e6ff5070 	uxth	r5, r0
    f2c8:	e2833003 	add	r3, r3, #3
    f2cc:	e0851001 	add	r1, r5, r1
    f2d0:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    f2d4:	e6ff1071 	uxth	r1, r1
    f2d8:	e5943024 	ldr	r3, [r4, #36]	; 0x24
    f2dc:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    f2e0:	e12fff33 	blx	r3
	ctx->tstates += 3;
    f2e4:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	write8(ctx, WR.IX + off, BR.H);	
    f2e8:	e1d410b8 	ldrh	r1, [r4, #8]
		val &= ~(1 << pos);
    f2ec:	e20020fe 	and	r2, r0, #254	; 0xfe
    f2f0:	e0851001 	add	r1, r5, r1
	ctx->tstates += 3;
    f2f4:	e2833003 	add	r3, r3, #3
    f2f8:	e5843040 	str	r3, [r4, #64]	; 0x40
	BR.H = doSetRes(ctx, SR_RES, 0, read8(ctx, WR.IX + off));
    f2fc:	e5c42007 	strb	r2, [r4, #7]
	ctx->memWrite(ctx->memParam, addr, val);	
    f300:	e5943028 	ldr	r3, [r4, #40]	; 0x28
    f304:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    f308:	e6ff1071 	uxth	r1, r1
}
    f30c:	e8bd4070 	pop	{r4, r5, r6, lr}
    f310:	e12fff13 	bx	r3

0000f314 <LD_H_RES_0_off_IY_d>:


static void LD_H_RES_0_off_IY_d (Z80Context* ctx)
{
	ctx->tstates += 2;
	char off = read8(ctx, ctx->PC++);
    f314:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
    f318:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	char off = read8(ctx, ctx->PC++);
    f31c:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
    f320:	e2833005 	add	r3, r3, #5
{
    f324:	e92d4070 	push	{r4, r5, r6, lr}
    f328:	e1a04000 	mov	r4, r0
	char off = read8(ctx, ctx->PC++);
    f32c:	e1c021bc 	strh	r2, [r0, #28]
    f330:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    f334:	e5903024 	ldr	r3, [r0, #36]	; 0x24
    f338:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
    f33c:	e12fff33 	blx	r3
	ctx->tstates += 3;
    f340:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	BR.H = doSetRes(ctx, SR_RES, 0, read8(ctx, WR.IY + off));
    f344:	e1d410ba 	ldrh	r1, [r4, #10]
    f348:	e6ff5070 	uxth	r5, r0
    f34c:	e2833003 	add	r3, r3, #3
    f350:	e0851001 	add	r1, r5, r1
    f354:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    f358:	e6ff1071 	uxth	r1, r1
    f35c:	e5943024 	ldr	r3, [r4, #36]	; 0x24
    f360:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    f364:	e12fff33 	blx	r3
	ctx->tstates += 3;
    f368:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	write8(ctx, WR.IY + off, BR.H);	
    f36c:	e1d410ba 	ldrh	r1, [r4, #10]
		val &= ~(1 << pos);
    f370:	e20020fe 	and	r2, r0, #254	; 0xfe
    f374:	e0851001 	add	r1, r5, r1
	ctx->tstates += 3;
    f378:	e2833003 	add	r3, r3, #3
    f37c:	e5843040 	str	r3, [r4, #64]	; 0x40
	BR.H = doSetRes(ctx, SR_RES, 0, read8(ctx, WR.IY + off));
    f380:	e5c42007 	strb	r2, [r4, #7]
	ctx->memWrite(ctx->memParam, addr, val);	
    f384:	e5943028 	ldr	r3, [r4, #40]	; 0x28
    f388:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    f38c:	e6ff1071 	uxth	r1, r1
}
    f390:	e8bd4070 	pop	{r4, r5, r6, lr}
    f394:	e12fff13 	bx	r3

0000f398 <LD_H_RES_1_off_IX_d>:


static void LD_H_RES_1_off_IX_d (Z80Context* ctx)
{
	ctx->tstates += 2;
	char off = read8(ctx, ctx->PC++);
    f398:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
    f39c:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	char off = read8(ctx, ctx->PC++);
    f3a0:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
    f3a4:	e2833005 	add	r3, r3, #5
{
    f3a8:	e92d4070 	push	{r4, r5, r6, lr}
    f3ac:	e1a04000 	mov	r4, r0
	char off = read8(ctx, ctx->PC++);
    f3b0:	e1c021bc 	strh	r2, [r0, #28]
    f3b4:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    f3b8:	e5903024 	ldr	r3, [r0, #36]	; 0x24
    f3bc:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
    f3c0:	e12fff33 	blx	r3
	ctx->tstates += 3;
    f3c4:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	BR.H = doSetRes(ctx, SR_RES, 1, read8(ctx, WR.IX + off));
    f3c8:	e1d410b8 	ldrh	r1, [r4, #8]
    f3cc:	e6ff5070 	uxth	r5, r0
    f3d0:	e2833003 	add	r3, r3, #3
    f3d4:	e0851001 	add	r1, r5, r1
    f3d8:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    f3dc:	e6ff1071 	uxth	r1, r1
    f3e0:	e5943024 	ldr	r3, [r4, #36]	; 0x24
    f3e4:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    f3e8:	e12fff33 	blx	r3
	ctx->tstates += 3;
    f3ec:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	write8(ctx, WR.IX + off, BR.H);	
    f3f0:	e1d410b8 	ldrh	r1, [r4, #8]
		val &= ~(1 << pos);
    f3f4:	e20020fd 	and	r2, r0, #253	; 0xfd
    f3f8:	e0851001 	add	r1, r5, r1
	ctx->tstates += 3;
    f3fc:	e2833003 	add	r3, r3, #3
    f400:	e5843040 	str	r3, [r4, #64]	; 0x40
	BR.H = doSetRes(ctx, SR_RES, 1, read8(ctx, WR.IX + off));
    f404:	e5c42007 	strb	r2, [r4, #7]
	ctx->memWrite(ctx->memParam, addr, val);	
    f408:	e5943028 	ldr	r3, [r4, #40]	; 0x28
    f40c:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    f410:	e6ff1071 	uxth	r1, r1
}
    f414:	e8bd4070 	pop	{r4, r5, r6, lr}
    f418:	e12fff13 	bx	r3

0000f41c <LD_H_RES_1_off_IY_d>:


static void LD_H_RES_1_off_IY_d (Z80Context* ctx)
{
	ctx->tstates += 2;
	char off = read8(ctx, ctx->PC++);
    f41c:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
    f420:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	char off = read8(ctx, ctx->PC++);
    f424:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
    f428:	e2833005 	add	r3, r3, #5
{
    f42c:	e92d4070 	push	{r4, r5, r6, lr}
    f430:	e1a04000 	mov	r4, r0
	char off = read8(ctx, ctx->PC++);
    f434:	e1c021bc 	strh	r2, [r0, #28]
    f438:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    f43c:	e5903024 	ldr	r3, [r0, #36]	; 0x24
    f440:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
    f444:	e12fff33 	blx	r3
	ctx->tstates += 3;
    f448:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	BR.H = doSetRes(ctx, SR_RES, 1, read8(ctx, WR.IY + off));
    f44c:	e1d410ba 	ldrh	r1, [r4, #10]
    f450:	e6ff5070 	uxth	r5, r0
    f454:	e2833003 	add	r3, r3, #3
    f458:	e0851001 	add	r1, r5, r1
    f45c:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    f460:	e6ff1071 	uxth	r1, r1
    f464:	e5943024 	ldr	r3, [r4, #36]	; 0x24
    f468:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    f46c:	e12fff33 	blx	r3
	ctx->tstates += 3;
    f470:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	write8(ctx, WR.IY + off, BR.H);	
    f474:	e1d410ba 	ldrh	r1, [r4, #10]
		val &= ~(1 << pos);
    f478:	e20020fd 	and	r2, r0, #253	; 0xfd
    f47c:	e0851001 	add	r1, r5, r1
	ctx->tstates += 3;
    f480:	e2833003 	add	r3, r3, #3
    f484:	e5843040 	str	r3, [r4, #64]	; 0x40
	BR.H = doSetRes(ctx, SR_RES, 1, read8(ctx, WR.IY + off));
    f488:	e5c42007 	strb	r2, [r4, #7]
	ctx->memWrite(ctx->memParam, addr, val);	
    f48c:	e5943028 	ldr	r3, [r4, #40]	; 0x28
    f490:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    f494:	e6ff1071 	uxth	r1, r1
}
    f498:	e8bd4070 	pop	{r4, r5, r6, lr}
    f49c:	e12fff13 	bx	r3

0000f4a0 <LD_H_RES_2_off_IX_d>:


static void LD_H_RES_2_off_IX_d (Z80Context* ctx)
{
	ctx->tstates += 2;
	char off = read8(ctx, ctx->PC++);
    f4a0:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
    f4a4:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	char off = read8(ctx, ctx->PC++);
    f4a8:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
    f4ac:	e2833005 	add	r3, r3, #5
{
    f4b0:	e92d4070 	push	{r4, r5, r6, lr}
    f4b4:	e1a04000 	mov	r4, r0
	char off = read8(ctx, ctx->PC++);
    f4b8:	e1c021bc 	strh	r2, [r0, #28]
    f4bc:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    f4c0:	e5903024 	ldr	r3, [r0, #36]	; 0x24
    f4c4:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
    f4c8:	e12fff33 	blx	r3
	ctx->tstates += 3;
    f4cc:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	BR.H = doSetRes(ctx, SR_RES, 2, read8(ctx, WR.IX + off));
    f4d0:	e1d410b8 	ldrh	r1, [r4, #8]
    f4d4:	e6ff5070 	uxth	r5, r0
    f4d8:	e2833003 	add	r3, r3, #3
    f4dc:	e0851001 	add	r1, r5, r1
    f4e0:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    f4e4:	e6ff1071 	uxth	r1, r1
    f4e8:	e5943024 	ldr	r3, [r4, #36]	; 0x24
    f4ec:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    f4f0:	e12fff33 	blx	r3
	ctx->tstates += 3;
    f4f4:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	write8(ctx, WR.IX + off, BR.H);	
    f4f8:	e1d410b8 	ldrh	r1, [r4, #8]
		val &= ~(1 << pos);
    f4fc:	e20020fb 	and	r2, r0, #251	; 0xfb
    f500:	e0851001 	add	r1, r5, r1
	ctx->tstates += 3;
    f504:	e2833003 	add	r3, r3, #3
    f508:	e5843040 	str	r3, [r4, #64]	; 0x40
	BR.H = doSetRes(ctx, SR_RES, 2, read8(ctx, WR.IX + off));
    f50c:	e5c42007 	strb	r2, [r4, #7]
	ctx->memWrite(ctx->memParam, addr, val);	
    f510:	e5943028 	ldr	r3, [r4, #40]	; 0x28
    f514:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    f518:	e6ff1071 	uxth	r1, r1
}
    f51c:	e8bd4070 	pop	{r4, r5, r6, lr}
    f520:	e12fff13 	bx	r3

0000f524 <LD_H_RES_2_off_IY_d>:


static void LD_H_RES_2_off_IY_d (Z80Context* ctx)
{
	ctx->tstates += 2;
	char off = read8(ctx, ctx->PC++);
    f524:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
    f528:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	char off = read8(ctx, ctx->PC++);
    f52c:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
    f530:	e2833005 	add	r3, r3, #5
{
    f534:	e92d4070 	push	{r4, r5, r6, lr}
    f538:	e1a04000 	mov	r4, r0
	char off = read8(ctx, ctx->PC++);
    f53c:	e1c021bc 	strh	r2, [r0, #28]
    f540:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    f544:	e5903024 	ldr	r3, [r0, #36]	; 0x24
    f548:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
    f54c:	e12fff33 	blx	r3
	ctx->tstates += 3;
    f550:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	BR.H = doSetRes(ctx, SR_RES, 2, read8(ctx, WR.IY + off));
    f554:	e1d410ba 	ldrh	r1, [r4, #10]
    f558:	e6ff5070 	uxth	r5, r0
    f55c:	e2833003 	add	r3, r3, #3
    f560:	e0851001 	add	r1, r5, r1
    f564:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    f568:	e6ff1071 	uxth	r1, r1
    f56c:	e5943024 	ldr	r3, [r4, #36]	; 0x24
    f570:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    f574:	e12fff33 	blx	r3
	ctx->tstates += 3;
    f578:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	write8(ctx, WR.IY + off, BR.H);	
    f57c:	e1d410ba 	ldrh	r1, [r4, #10]
		val &= ~(1 << pos);
    f580:	e20020fb 	and	r2, r0, #251	; 0xfb
    f584:	e0851001 	add	r1, r5, r1
	ctx->tstates += 3;
    f588:	e2833003 	add	r3, r3, #3
    f58c:	e5843040 	str	r3, [r4, #64]	; 0x40
	BR.H = doSetRes(ctx, SR_RES, 2, read8(ctx, WR.IY + off));
    f590:	e5c42007 	strb	r2, [r4, #7]
	ctx->memWrite(ctx->memParam, addr, val);	
    f594:	e5943028 	ldr	r3, [r4, #40]	; 0x28
    f598:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    f59c:	e6ff1071 	uxth	r1, r1
}
    f5a0:	e8bd4070 	pop	{r4, r5, r6, lr}
    f5a4:	e12fff13 	bx	r3

0000f5a8 <LD_H_RES_3_off_IX_d>:


static void LD_H_RES_3_off_IX_d (Z80Context* ctx)
{
	ctx->tstates += 2;
	char off = read8(ctx, ctx->PC++);
    f5a8:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
    f5ac:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	char off = read8(ctx, ctx->PC++);
    f5b0:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
    f5b4:	e2833005 	add	r3, r3, #5
{
    f5b8:	e92d4070 	push	{r4, r5, r6, lr}
    f5bc:	e1a04000 	mov	r4, r0
	char off = read8(ctx, ctx->PC++);
    f5c0:	e1c021bc 	strh	r2, [r0, #28]
    f5c4:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    f5c8:	e5903024 	ldr	r3, [r0, #36]	; 0x24
    f5cc:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
    f5d0:	e12fff33 	blx	r3
	ctx->tstates += 3;
    f5d4:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	BR.H = doSetRes(ctx, SR_RES, 3, read8(ctx, WR.IX + off));
    f5d8:	e1d410b8 	ldrh	r1, [r4, #8]
    f5dc:	e6ff5070 	uxth	r5, r0
    f5e0:	e2833003 	add	r3, r3, #3
    f5e4:	e0851001 	add	r1, r5, r1
    f5e8:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    f5ec:	e6ff1071 	uxth	r1, r1
    f5f0:	e5943024 	ldr	r3, [r4, #36]	; 0x24
    f5f4:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    f5f8:	e12fff33 	blx	r3
	ctx->tstates += 3;
    f5fc:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	write8(ctx, WR.IX + off, BR.H);	
    f600:	e1d410b8 	ldrh	r1, [r4, #8]
		val &= ~(1 << pos);
    f604:	e20020f7 	and	r2, r0, #247	; 0xf7
    f608:	e0851001 	add	r1, r5, r1
	ctx->tstates += 3;
    f60c:	e2833003 	add	r3, r3, #3
    f610:	e5843040 	str	r3, [r4, #64]	; 0x40
	BR.H = doSetRes(ctx, SR_RES, 3, read8(ctx, WR.IX + off));
    f614:	e5c42007 	strb	r2, [r4, #7]
	ctx->memWrite(ctx->memParam, addr, val);	
    f618:	e5943028 	ldr	r3, [r4, #40]	; 0x28
    f61c:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    f620:	e6ff1071 	uxth	r1, r1
}
    f624:	e8bd4070 	pop	{r4, r5, r6, lr}
    f628:	e12fff13 	bx	r3

0000f62c <LD_H_RES_3_off_IY_d>:


static void LD_H_RES_3_off_IY_d (Z80Context* ctx)
{
	ctx->tstates += 2;
	char off = read8(ctx, ctx->PC++);
    f62c:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
    f630:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	char off = read8(ctx, ctx->PC++);
    f634:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
    f638:	e2833005 	add	r3, r3, #5
{
    f63c:	e92d4070 	push	{r4, r5, r6, lr}
    f640:	e1a04000 	mov	r4, r0
	char off = read8(ctx, ctx->PC++);
    f644:	e1c021bc 	strh	r2, [r0, #28]
    f648:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    f64c:	e5903024 	ldr	r3, [r0, #36]	; 0x24
    f650:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
    f654:	e12fff33 	blx	r3
	ctx->tstates += 3;
    f658:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	BR.H = doSetRes(ctx, SR_RES, 3, read8(ctx, WR.IY + off));
    f65c:	e1d410ba 	ldrh	r1, [r4, #10]
    f660:	e6ff5070 	uxth	r5, r0
    f664:	e2833003 	add	r3, r3, #3
    f668:	e0851001 	add	r1, r5, r1
    f66c:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    f670:	e6ff1071 	uxth	r1, r1
    f674:	e5943024 	ldr	r3, [r4, #36]	; 0x24
    f678:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    f67c:	e12fff33 	blx	r3
	ctx->tstates += 3;
    f680:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	write8(ctx, WR.IY + off, BR.H);	
    f684:	e1d410ba 	ldrh	r1, [r4, #10]
		val &= ~(1 << pos);
    f688:	e20020f7 	and	r2, r0, #247	; 0xf7
    f68c:	e0851001 	add	r1, r5, r1
	ctx->tstates += 3;
    f690:	e2833003 	add	r3, r3, #3
    f694:	e5843040 	str	r3, [r4, #64]	; 0x40
	BR.H = doSetRes(ctx, SR_RES, 3, read8(ctx, WR.IY + off));
    f698:	e5c42007 	strb	r2, [r4, #7]
	ctx->memWrite(ctx->memParam, addr, val);	
    f69c:	e5943028 	ldr	r3, [r4, #40]	; 0x28
    f6a0:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    f6a4:	e6ff1071 	uxth	r1, r1
}
    f6a8:	e8bd4070 	pop	{r4, r5, r6, lr}
    f6ac:	e12fff13 	bx	r3

0000f6b0 <LD_H_RES_4_off_IX_d>:


static void LD_H_RES_4_off_IX_d (Z80Context* ctx)
{
	ctx->tstates += 2;
	char off = read8(ctx, ctx->PC++);
    f6b0:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
    f6b4:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	char off = read8(ctx, ctx->PC++);
    f6b8:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
    f6bc:	e2833005 	add	r3, r3, #5
{
    f6c0:	e92d4070 	push	{r4, r5, r6, lr}
    f6c4:	e1a04000 	mov	r4, r0
	char off = read8(ctx, ctx->PC++);
    f6c8:	e1c021bc 	strh	r2, [r0, #28]
    f6cc:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    f6d0:	e5903024 	ldr	r3, [r0, #36]	; 0x24
    f6d4:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
    f6d8:	e12fff33 	blx	r3
	ctx->tstates += 3;
    f6dc:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	BR.H = doSetRes(ctx, SR_RES, 4, read8(ctx, WR.IX + off));
    f6e0:	e1d410b8 	ldrh	r1, [r4, #8]
    f6e4:	e6ff5070 	uxth	r5, r0
    f6e8:	e2833003 	add	r3, r3, #3
    f6ec:	e0851001 	add	r1, r5, r1
    f6f0:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    f6f4:	e6ff1071 	uxth	r1, r1
    f6f8:	e5943024 	ldr	r3, [r4, #36]	; 0x24
    f6fc:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    f700:	e12fff33 	blx	r3
	ctx->tstates += 3;
    f704:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	write8(ctx, WR.IX + off, BR.H);	
    f708:	e1d410b8 	ldrh	r1, [r4, #8]
		val &= ~(1 << pos);
    f70c:	e20020ef 	and	r2, r0, #239	; 0xef
    f710:	e0851001 	add	r1, r5, r1
	ctx->tstates += 3;
    f714:	e2833003 	add	r3, r3, #3
    f718:	e5843040 	str	r3, [r4, #64]	; 0x40
	BR.H = doSetRes(ctx, SR_RES, 4, read8(ctx, WR.IX + off));
    f71c:	e5c42007 	strb	r2, [r4, #7]
	ctx->memWrite(ctx->memParam, addr, val);	
    f720:	e5943028 	ldr	r3, [r4, #40]	; 0x28
    f724:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    f728:	e6ff1071 	uxth	r1, r1
}
    f72c:	e8bd4070 	pop	{r4, r5, r6, lr}
    f730:	e12fff13 	bx	r3

0000f734 <LD_H_RES_4_off_IY_d>:


static void LD_H_RES_4_off_IY_d (Z80Context* ctx)
{
	ctx->tstates += 2;
	char off = read8(ctx, ctx->PC++);
    f734:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
    f738:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	char off = read8(ctx, ctx->PC++);
    f73c:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
    f740:	e2833005 	add	r3, r3, #5
{
    f744:	e92d4070 	push	{r4, r5, r6, lr}
    f748:	e1a04000 	mov	r4, r0
	char off = read8(ctx, ctx->PC++);
    f74c:	e1c021bc 	strh	r2, [r0, #28]
    f750:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    f754:	e5903024 	ldr	r3, [r0, #36]	; 0x24
    f758:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
    f75c:	e12fff33 	blx	r3
	ctx->tstates += 3;
    f760:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	BR.H = doSetRes(ctx, SR_RES, 4, read8(ctx, WR.IY + off));
    f764:	e1d410ba 	ldrh	r1, [r4, #10]
    f768:	e6ff5070 	uxth	r5, r0
    f76c:	e2833003 	add	r3, r3, #3
    f770:	e0851001 	add	r1, r5, r1
    f774:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    f778:	e6ff1071 	uxth	r1, r1
    f77c:	e5943024 	ldr	r3, [r4, #36]	; 0x24
    f780:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    f784:	e12fff33 	blx	r3
	ctx->tstates += 3;
    f788:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	write8(ctx, WR.IY + off, BR.H);	
    f78c:	e1d410ba 	ldrh	r1, [r4, #10]
		val &= ~(1 << pos);
    f790:	e20020ef 	and	r2, r0, #239	; 0xef
    f794:	e0851001 	add	r1, r5, r1
	ctx->tstates += 3;
    f798:	e2833003 	add	r3, r3, #3
    f79c:	e5843040 	str	r3, [r4, #64]	; 0x40
	BR.H = doSetRes(ctx, SR_RES, 4, read8(ctx, WR.IY + off));
    f7a0:	e5c42007 	strb	r2, [r4, #7]
	ctx->memWrite(ctx->memParam, addr, val);	
    f7a4:	e5943028 	ldr	r3, [r4, #40]	; 0x28
    f7a8:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    f7ac:	e6ff1071 	uxth	r1, r1
}
    f7b0:	e8bd4070 	pop	{r4, r5, r6, lr}
    f7b4:	e12fff13 	bx	r3

0000f7b8 <LD_H_RES_5_off_IX_d>:


static void LD_H_RES_5_off_IX_d (Z80Context* ctx)
{
	ctx->tstates += 2;
	char off = read8(ctx, ctx->PC++);
    f7b8:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
    f7bc:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	char off = read8(ctx, ctx->PC++);
    f7c0:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
    f7c4:	e2833005 	add	r3, r3, #5
{
    f7c8:	e92d4070 	push	{r4, r5, r6, lr}
    f7cc:	e1a04000 	mov	r4, r0
	char off = read8(ctx, ctx->PC++);
    f7d0:	e1c021bc 	strh	r2, [r0, #28]
    f7d4:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    f7d8:	e5903024 	ldr	r3, [r0, #36]	; 0x24
    f7dc:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
    f7e0:	e12fff33 	blx	r3
	ctx->tstates += 3;
    f7e4:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	BR.H = doSetRes(ctx, SR_RES, 5, read8(ctx, WR.IX + off));
    f7e8:	e1d410b8 	ldrh	r1, [r4, #8]
    f7ec:	e6ff5070 	uxth	r5, r0
    f7f0:	e2833003 	add	r3, r3, #3
    f7f4:	e0851001 	add	r1, r5, r1
    f7f8:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    f7fc:	e6ff1071 	uxth	r1, r1
    f800:	e5943024 	ldr	r3, [r4, #36]	; 0x24
    f804:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    f808:	e12fff33 	blx	r3
	ctx->tstates += 3;
    f80c:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	write8(ctx, WR.IX + off, BR.H);	
    f810:	e1d410b8 	ldrh	r1, [r4, #8]
		val &= ~(1 << pos);
    f814:	e20020df 	and	r2, r0, #223	; 0xdf
    f818:	e0851001 	add	r1, r5, r1
	ctx->tstates += 3;
    f81c:	e2833003 	add	r3, r3, #3
    f820:	e5843040 	str	r3, [r4, #64]	; 0x40
	BR.H = doSetRes(ctx, SR_RES, 5, read8(ctx, WR.IX + off));
    f824:	e5c42007 	strb	r2, [r4, #7]
	ctx->memWrite(ctx->memParam, addr, val);	
    f828:	e5943028 	ldr	r3, [r4, #40]	; 0x28
    f82c:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    f830:	e6ff1071 	uxth	r1, r1
}
    f834:	e8bd4070 	pop	{r4, r5, r6, lr}
    f838:	e12fff13 	bx	r3

0000f83c <LD_H_RES_5_off_IY_d>:


static void LD_H_RES_5_off_IY_d (Z80Context* ctx)
{
	ctx->tstates += 2;
	char off = read8(ctx, ctx->PC++);
    f83c:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
    f840:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	char off = read8(ctx, ctx->PC++);
    f844:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
    f848:	e2833005 	add	r3, r3, #5
{
    f84c:	e92d4070 	push	{r4, r5, r6, lr}
    f850:	e1a04000 	mov	r4, r0
	char off = read8(ctx, ctx->PC++);
    f854:	e1c021bc 	strh	r2, [r0, #28]
    f858:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    f85c:	e5903024 	ldr	r3, [r0, #36]	; 0x24
    f860:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
    f864:	e12fff33 	blx	r3
	ctx->tstates += 3;
    f868:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	BR.H = doSetRes(ctx, SR_RES, 5, read8(ctx, WR.IY + off));
    f86c:	e1d410ba 	ldrh	r1, [r4, #10]
    f870:	e6ff5070 	uxth	r5, r0
    f874:	e2833003 	add	r3, r3, #3
    f878:	e0851001 	add	r1, r5, r1
    f87c:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    f880:	e6ff1071 	uxth	r1, r1
    f884:	e5943024 	ldr	r3, [r4, #36]	; 0x24
    f888:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    f88c:	e12fff33 	blx	r3
	ctx->tstates += 3;
    f890:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	write8(ctx, WR.IY + off, BR.H);	
    f894:	e1d410ba 	ldrh	r1, [r4, #10]
		val &= ~(1 << pos);
    f898:	e20020df 	and	r2, r0, #223	; 0xdf
    f89c:	e0851001 	add	r1, r5, r1
	ctx->tstates += 3;
    f8a0:	e2833003 	add	r3, r3, #3
    f8a4:	e5843040 	str	r3, [r4, #64]	; 0x40
	BR.H = doSetRes(ctx, SR_RES, 5, read8(ctx, WR.IY + off));
    f8a8:	e5c42007 	strb	r2, [r4, #7]
	ctx->memWrite(ctx->memParam, addr, val);	
    f8ac:	e5943028 	ldr	r3, [r4, #40]	; 0x28
    f8b0:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    f8b4:	e6ff1071 	uxth	r1, r1
}
    f8b8:	e8bd4070 	pop	{r4, r5, r6, lr}
    f8bc:	e12fff13 	bx	r3

0000f8c0 <LD_H_RES_6_off_IX_d>:


static void LD_H_RES_6_off_IX_d (Z80Context* ctx)
{
	ctx->tstates += 2;
	char off = read8(ctx, ctx->PC++);
    f8c0:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
    f8c4:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	char off = read8(ctx, ctx->PC++);
    f8c8:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
    f8cc:	e2833005 	add	r3, r3, #5
{
    f8d0:	e92d4070 	push	{r4, r5, r6, lr}
    f8d4:	e1a04000 	mov	r4, r0
	char off = read8(ctx, ctx->PC++);
    f8d8:	e1c021bc 	strh	r2, [r0, #28]
    f8dc:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    f8e0:	e5903024 	ldr	r3, [r0, #36]	; 0x24
    f8e4:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
    f8e8:	e12fff33 	blx	r3
	ctx->tstates += 3;
    f8ec:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	BR.H = doSetRes(ctx, SR_RES, 6, read8(ctx, WR.IX + off));
    f8f0:	e1d410b8 	ldrh	r1, [r4, #8]
    f8f4:	e6ff5070 	uxth	r5, r0
    f8f8:	e2833003 	add	r3, r3, #3
    f8fc:	e0851001 	add	r1, r5, r1
    f900:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    f904:	e6ff1071 	uxth	r1, r1
    f908:	e5943024 	ldr	r3, [r4, #36]	; 0x24
    f90c:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    f910:	e12fff33 	blx	r3
	ctx->tstates += 3;
    f914:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	write8(ctx, WR.IX + off, BR.H);	
    f918:	e1d410b8 	ldrh	r1, [r4, #8]
		val &= ~(1 << pos);
    f91c:	e20020bf 	and	r2, r0, #191	; 0xbf
    f920:	e0851001 	add	r1, r5, r1
	ctx->tstates += 3;
    f924:	e2833003 	add	r3, r3, #3
    f928:	e5843040 	str	r3, [r4, #64]	; 0x40
	BR.H = doSetRes(ctx, SR_RES, 6, read8(ctx, WR.IX + off));
    f92c:	e5c42007 	strb	r2, [r4, #7]
	ctx->memWrite(ctx->memParam, addr, val);	
    f930:	e5943028 	ldr	r3, [r4, #40]	; 0x28
    f934:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    f938:	e6ff1071 	uxth	r1, r1
}
    f93c:	e8bd4070 	pop	{r4, r5, r6, lr}
    f940:	e12fff13 	bx	r3

0000f944 <LD_H_RES_6_off_IY_d>:


static void LD_H_RES_6_off_IY_d (Z80Context* ctx)
{
	ctx->tstates += 2;
	char off = read8(ctx, ctx->PC++);
    f944:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
    f948:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	char off = read8(ctx, ctx->PC++);
    f94c:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
    f950:	e2833005 	add	r3, r3, #5
{
    f954:	e92d4070 	push	{r4, r5, r6, lr}
    f958:	e1a04000 	mov	r4, r0
	char off = read8(ctx, ctx->PC++);
    f95c:	e1c021bc 	strh	r2, [r0, #28]
    f960:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    f964:	e5903024 	ldr	r3, [r0, #36]	; 0x24
    f968:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
    f96c:	e12fff33 	blx	r3
	ctx->tstates += 3;
    f970:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	BR.H = doSetRes(ctx, SR_RES, 6, read8(ctx, WR.IY + off));
    f974:	e1d410ba 	ldrh	r1, [r4, #10]
    f978:	e6ff5070 	uxth	r5, r0
    f97c:	e2833003 	add	r3, r3, #3
    f980:	e0851001 	add	r1, r5, r1
    f984:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    f988:	e6ff1071 	uxth	r1, r1
    f98c:	e5943024 	ldr	r3, [r4, #36]	; 0x24
    f990:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    f994:	e12fff33 	blx	r3
	ctx->tstates += 3;
    f998:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	write8(ctx, WR.IY + off, BR.H);	
    f99c:	e1d410ba 	ldrh	r1, [r4, #10]
		val &= ~(1 << pos);
    f9a0:	e20020bf 	and	r2, r0, #191	; 0xbf
    f9a4:	e0851001 	add	r1, r5, r1
	ctx->tstates += 3;
    f9a8:	e2833003 	add	r3, r3, #3
    f9ac:	e5843040 	str	r3, [r4, #64]	; 0x40
	BR.H = doSetRes(ctx, SR_RES, 6, read8(ctx, WR.IY + off));
    f9b0:	e5c42007 	strb	r2, [r4, #7]
	ctx->memWrite(ctx->memParam, addr, val);	
    f9b4:	e5943028 	ldr	r3, [r4, #40]	; 0x28
    f9b8:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    f9bc:	e6ff1071 	uxth	r1, r1
}
    f9c0:	e8bd4070 	pop	{r4, r5, r6, lr}
    f9c4:	e12fff13 	bx	r3

0000f9c8 <LD_H_RES_7_off_IX_d>:


static void LD_H_RES_7_off_IX_d (Z80Context* ctx)
{
	ctx->tstates += 2;
	char off = read8(ctx, ctx->PC++);
    f9c8:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
    f9cc:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	char off = read8(ctx, ctx->PC++);
    f9d0:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
    f9d4:	e2833005 	add	r3, r3, #5
{
    f9d8:	e92d4070 	push	{r4, r5, r6, lr}
    f9dc:	e1a04000 	mov	r4, r0
	char off = read8(ctx, ctx->PC++);
    f9e0:	e1c021bc 	strh	r2, [r0, #28]
    f9e4:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    f9e8:	e5903024 	ldr	r3, [r0, #36]	; 0x24
    f9ec:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
    f9f0:	e12fff33 	blx	r3
	ctx->tstates += 3;
    f9f4:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	BR.H = doSetRes(ctx, SR_RES, 7, read8(ctx, WR.IX + off));
    f9f8:	e1d410b8 	ldrh	r1, [r4, #8]
    f9fc:	e6ff5070 	uxth	r5, r0
    fa00:	e2833003 	add	r3, r3, #3
    fa04:	e0851001 	add	r1, r5, r1
    fa08:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    fa0c:	e6ff1071 	uxth	r1, r1
    fa10:	e5943024 	ldr	r3, [r4, #36]	; 0x24
    fa14:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    fa18:	e12fff33 	blx	r3
	ctx->tstates += 3;
    fa1c:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	write8(ctx, WR.IX + off, BR.H);	
    fa20:	e1d410b8 	ldrh	r1, [r4, #8]
		val &= ~(1 << pos);
    fa24:	e200207f 	and	r2, r0, #127	; 0x7f
    fa28:	e0851001 	add	r1, r5, r1
	ctx->tstates += 3;
    fa2c:	e2833003 	add	r3, r3, #3
    fa30:	e5843040 	str	r3, [r4, #64]	; 0x40
	BR.H = doSetRes(ctx, SR_RES, 7, read8(ctx, WR.IX + off));
    fa34:	e5c42007 	strb	r2, [r4, #7]
	ctx->memWrite(ctx->memParam, addr, val);	
    fa38:	e5943028 	ldr	r3, [r4, #40]	; 0x28
    fa3c:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    fa40:	e6ff1071 	uxth	r1, r1
}
    fa44:	e8bd4070 	pop	{r4, r5, r6, lr}
    fa48:	e12fff13 	bx	r3

0000fa4c <LD_H_RES_7_off_IY_d>:


static void LD_H_RES_7_off_IY_d (Z80Context* ctx)
{
	ctx->tstates += 2;
	char off = read8(ctx, ctx->PC++);
    fa4c:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
    fa50:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	char off = read8(ctx, ctx->PC++);
    fa54:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
    fa58:	e2833005 	add	r3, r3, #5
{
    fa5c:	e92d4070 	push	{r4, r5, r6, lr}
    fa60:	e1a04000 	mov	r4, r0
	char off = read8(ctx, ctx->PC++);
    fa64:	e1c021bc 	strh	r2, [r0, #28]
    fa68:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    fa6c:	e5903024 	ldr	r3, [r0, #36]	; 0x24
    fa70:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
    fa74:	e12fff33 	blx	r3
	ctx->tstates += 3;
    fa78:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	BR.H = doSetRes(ctx, SR_RES, 7, read8(ctx, WR.IY + off));
    fa7c:	e1d410ba 	ldrh	r1, [r4, #10]
    fa80:	e6ff5070 	uxth	r5, r0
    fa84:	e2833003 	add	r3, r3, #3
    fa88:	e0851001 	add	r1, r5, r1
    fa8c:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    fa90:	e6ff1071 	uxth	r1, r1
    fa94:	e5943024 	ldr	r3, [r4, #36]	; 0x24
    fa98:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    fa9c:	e12fff33 	blx	r3
	ctx->tstates += 3;
    faa0:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	write8(ctx, WR.IY + off, BR.H);	
    faa4:	e1d410ba 	ldrh	r1, [r4, #10]
		val &= ~(1 << pos);
    faa8:	e200207f 	and	r2, r0, #127	; 0x7f
    faac:	e0851001 	add	r1, r5, r1
	ctx->tstates += 3;
    fab0:	e2833003 	add	r3, r3, #3
    fab4:	e5843040 	str	r3, [r4, #64]	; 0x40
	BR.H = doSetRes(ctx, SR_RES, 7, read8(ctx, WR.IY + off));
    fab8:	e5c42007 	strb	r2, [r4, #7]
	ctx->memWrite(ctx->memParam, addr, val);	
    fabc:	e5943028 	ldr	r3, [r4, #40]	; 0x28
    fac0:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    fac4:	e6ff1071 	uxth	r1, r1
}
    fac8:	e8bd4070 	pop	{r4, r5, r6, lr}
    facc:	e12fff13 	bx	r3

0000fad0 <LD_H_SET_0_off_IX_d>:


static void LD_H_SET_0_off_IX_d (Z80Context* ctx)
{
	ctx->tstates += 2;
	char off = read8(ctx, ctx->PC++);
    fad0:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
    fad4:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	char off = read8(ctx, ctx->PC++);
    fad8:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
    fadc:	e2833005 	add	r3, r3, #5
{
    fae0:	e92d4070 	push	{r4, r5, r6, lr}
    fae4:	e1a04000 	mov	r4, r0
	char off = read8(ctx, ctx->PC++);
    fae8:	e1c021bc 	strh	r2, [r0, #28]
    faec:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    faf0:	e5903024 	ldr	r3, [r0, #36]	; 0x24
    faf4:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
    faf8:	e12fff33 	blx	r3
	ctx->tstates += 3;
    fafc:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	BR.H = doSetRes(ctx, SR_SET, 0, read8(ctx, WR.IX + off));
    fb00:	e1d410b8 	ldrh	r1, [r4, #8]
    fb04:	e6ff5070 	uxth	r5, r0
    fb08:	e2833003 	add	r3, r3, #3
    fb0c:	e0851001 	add	r1, r5, r1
    fb10:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    fb14:	e6ff1071 	uxth	r1, r1
    fb18:	e5943024 	ldr	r3, [r4, #36]	; 0x24
    fb1c:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    fb20:	e12fff33 	blx	r3
	ctx->tstates += 3;
    fb24:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	write8(ctx, WR.IX + off, BR.H);	
    fb28:	e1d410b8 	ldrh	r1, [r4, #8]
		val |= (1 << pos);
    fb2c:	e3802001 	orr	r2, r0, #1
    fb30:	e0851001 	add	r1, r5, r1
	ctx->tstates += 3;
    fb34:	e2833003 	add	r3, r3, #3
		val |= (1 << pos);
    fb38:	e6ef2072 	uxtb	r2, r2
	ctx->tstates += 3;
    fb3c:	e5843040 	str	r3, [r4, #64]	; 0x40
	BR.H = doSetRes(ctx, SR_SET, 0, read8(ctx, WR.IX + off));
    fb40:	e5c42007 	strb	r2, [r4, #7]
	ctx->memWrite(ctx->memParam, addr, val);	
    fb44:	e5943028 	ldr	r3, [r4, #40]	; 0x28
    fb48:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    fb4c:	e6ff1071 	uxth	r1, r1
}
    fb50:	e8bd4070 	pop	{r4, r5, r6, lr}
    fb54:	e12fff13 	bx	r3

0000fb58 <LD_H_SET_0_off_IY_d>:


static void LD_H_SET_0_off_IY_d (Z80Context* ctx)
{
	ctx->tstates += 2;
	char off = read8(ctx, ctx->PC++);
    fb58:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
    fb5c:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	char off = read8(ctx, ctx->PC++);
    fb60:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
    fb64:	e2833005 	add	r3, r3, #5
{
    fb68:	e92d4070 	push	{r4, r5, r6, lr}
    fb6c:	e1a04000 	mov	r4, r0
	char off = read8(ctx, ctx->PC++);
    fb70:	e1c021bc 	strh	r2, [r0, #28]
    fb74:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    fb78:	e5903024 	ldr	r3, [r0, #36]	; 0x24
    fb7c:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
    fb80:	e12fff33 	blx	r3
	ctx->tstates += 3;
    fb84:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	BR.H = doSetRes(ctx, SR_SET, 0, read8(ctx, WR.IY + off));
    fb88:	e1d410ba 	ldrh	r1, [r4, #10]
    fb8c:	e6ff5070 	uxth	r5, r0
    fb90:	e2833003 	add	r3, r3, #3
    fb94:	e0851001 	add	r1, r5, r1
    fb98:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    fb9c:	e6ff1071 	uxth	r1, r1
    fba0:	e5943024 	ldr	r3, [r4, #36]	; 0x24
    fba4:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    fba8:	e12fff33 	blx	r3
	ctx->tstates += 3;
    fbac:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	write8(ctx, WR.IY + off, BR.H);	
    fbb0:	e1d410ba 	ldrh	r1, [r4, #10]
		val |= (1 << pos);
    fbb4:	e3802001 	orr	r2, r0, #1
    fbb8:	e0851001 	add	r1, r5, r1
	ctx->tstates += 3;
    fbbc:	e2833003 	add	r3, r3, #3
		val |= (1 << pos);
    fbc0:	e6ef2072 	uxtb	r2, r2
	ctx->tstates += 3;
    fbc4:	e5843040 	str	r3, [r4, #64]	; 0x40
	BR.H = doSetRes(ctx, SR_SET, 0, read8(ctx, WR.IY + off));
    fbc8:	e5c42007 	strb	r2, [r4, #7]
	ctx->memWrite(ctx->memParam, addr, val);	
    fbcc:	e5943028 	ldr	r3, [r4, #40]	; 0x28
    fbd0:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    fbd4:	e6ff1071 	uxth	r1, r1
}
    fbd8:	e8bd4070 	pop	{r4, r5, r6, lr}
    fbdc:	e12fff13 	bx	r3

0000fbe0 <LD_H_SET_1_off_IX_d>:


static void LD_H_SET_1_off_IX_d (Z80Context* ctx)
{
	ctx->tstates += 2;
	char off = read8(ctx, ctx->PC++);
    fbe0:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
    fbe4:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	char off = read8(ctx, ctx->PC++);
    fbe8:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
    fbec:	e2833005 	add	r3, r3, #5
{
    fbf0:	e92d4070 	push	{r4, r5, r6, lr}
    fbf4:	e1a04000 	mov	r4, r0
	char off = read8(ctx, ctx->PC++);
    fbf8:	e1c021bc 	strh	r2, [r0, #28]
    fbfc:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    fc00:	e5903024 	ldr	r3, [r0, #36]	; 0x24
    fc04:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
    fc08:	e12fff33 	blx	r3
	ctx->tstates += 3;
    fc0c:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	BR.H = doSetRes(ctx, SR_SET, 1, read8(ctx, WR.IX + off));
    fc10:	e1d410b8 	ldrh	r1, [r4, #8]
    fc14:	e6ff5070 	uxth	r5, r0
    fc18:	e2833003 	add	r3, r3, #3
    fc1c:	e0851001 	add	r1, r5, r1
    fc20:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    fc24:	e6ff1071 	uxth	r1, r1
    fc28:	e5943024 	ldr	r3, [r4, #36]	; 0x24
    fc2c:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    fc30:	e12fff33 	blx	r3
	ctx->tstates += 3;
    fc34:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	write8(ctx, WR.IX + off, BR.H);	
    fc38:	e1d410b8 	ldrh	r1, [r4, #8]
		val |= (1 << pos);
    fc3c:	e3802002 	orr	r2, r0, #2
    fc40:	e0851001 	add	r1, r5, r1
	ctx->tstates += 3;
    fc44:	e2833003 	add	r3, r3, #3
		val |= (1 << pos);
    fc48:	e6ef2072 	uxtb	r2, r2
	ctx->tstates += 3;
    fc4c:	e5843040 	str	r3, [r4, #64]	; 0x40
	BR.H = doSetRes(ctx, SR_SET, 1, read8(ctx, WR.IX + off));
    fc50:	e5c42007 	strb	r2, [r4, #7]
	ctx->memWrite(ctx->memParam, addr, val);	
    fc54:	e5943028 	ldr	r3, [r4, #40]	; 0x28
    fc58:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    fc5c:	e6ff1071 	uxth	r1, r1
}
    fc60:	e8bd4070 	pop	{r4, r5, r6, lr}
    fc64:	e12fff13 	bx	r3

0000fc68 <LD_H_SET_1_off_IY_d>:


static void LD_H_SET_1_off_IY_d (Z80Context* ctx)
{
	ctx->tstates += 2;
	char off = read8(ctx, ctx->PC++);
    fc68:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
    fc6c:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	char off = read8(ctx, ctx->PC++);
    fc70:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
    fc74:	e2833005 	add	r3, r3, #5
{
    fc78:	e92d4070 	push	{r4, r5, r6, lr}
    fc7c:	e1a04000 	mov	r4, r0
	char off = read8(ctx, ctx->PC++);
    fc80:	e1c021bc 	strh	r2, [r0, #28]
    fc84:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    fc88:	e5903024 	ldr	r3, [r0, #36]	; 0x24
    fc8c:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
    fc90:	e12fff33 	blx	r3
	ctx->tstates += 3;
    fc94:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	BR.H = doSetRes(ctx, SR_SET, 1, read8(ctx, WR.IY + off));
    fc98:	e1d410ba 	ldrh	r1, [r4, #10]
    fc9c:	e6ff5070 	uxth	r5, r0
    fca0:	e2833003 	add	r3, r3, #3
    fca4:	e0851001 	add	r1, r5, r1
    fca8:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    fcac:	e6ff1071 	uxth	r1, r1
    fcb0:	e5943024 	ldr	r3, [r4, #36]	; 0x24
    fcb4:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    fcb8:	e12fff33 	blx	r3
	ctx->tstates += 3;
    fcbc:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	write8(ctx, WR.IY + off, BR.H);	
    fcc0:	e1d410ba 	ldrh	r1, [r4, #10]
		val |= (1 << pos);
    fcc4:	e3802002 	orr	r2, r0, #2
    fcc8:	e0851001 	add	r1, r5, r1
	ctx->tstates += 3;
    fccc:	e2833003 	add	r3, r3, #3
		val |= (1 << pos);
    fcd0:	e6ef2072 	uxtb	r2, r2
	ctx->tstates += 3;
    fcd4:	e5843040 	str	r3, [r4, #64]	; 0x40
	BR.H = doSetRes(ctx, SR_SET, 1, read8(ctx, WR.IY + off));
    fcd8:	e5c42007 	strb	r2, [r4, #7]
	ctx->memWrite(ctx->memParam, addr, val);	
    fcdc:	e5943028 	ldr	r3, [r4, #40]	; 0x28
    fce0:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    fce4:	e6ff1071 	uxth	r1, r1
}
    fce8:	e8bd4070 	pop	{r4, r5, r6, lr}
    fcec:	e12fff13 	bx	r3

0000fcf0 <LD_H_SET_2_off_IX_d>:


static void LD_H_SET_2_off_IX_d (Z80Context* ctx)
{
	ctx->tstates += 2;
	char off = read8(ctx, ctx->PC++);
    fcf0:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
    fcf4:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	char off = read8(ctx, ctx->PC++);
    fcf8:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
    fcfc:	e2833005 	add	r3, r3, #5
{
    fd00:	e92d4070 	push	{r4, r5, r6, lr}
    fd04:	e1a04000 	mov	r4, r0
	char off = read8(ctx, ctx->PC++);
    fd08:	e1c021bc 	strh	r2, [r0, #28]
    fd0c:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    fd10:	e5903024 	ldr	r3, [r0, #36]	; 0x24
    fd14:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
    fd18:	e12fff33 	blx	r3
	ctx->tstates += 3;
    fd1c:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	BR.H = doSetRes(ctx, SR_SET, 2, read8(ctx, WR.IX + off));
    fd20:	e1d410b8 	ldrh	r1, [r4, #8]
    fd24:	e6ff5070 	uxth	r5, r0
    fd28:	e2833003 	add	r3, r3, #3
    fd2c:	e0851001 	add	r1, r5, r1
    fd30:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    fd34:	e6ff1071 	uxth	r1, r1
    fd38:	e5943024 	ldr	r3, [r4, #36]	; 0x24
    fd3c:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    fd40:	e12fff33 	blx	r3
	ctx->tstates += 3;
    fd44:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	write8(ctx, WR.IX + off, BR.H);	
    fd48:	e1d410b8 	ldrh	r1, [r4, #8]
		val |= (1 << pos);
    fd4c:	e3802004 	orr	r2, r0, #4
    fd50:	e0851001 	add	r1, r5, r1
	ctx->tstates += 3;
    fd54:	e2833003 	add	r3, r3, #3
		val |= (1 << pos);
    fd58:	e6ef2072 	uxtb	r2, r2
	ctx->tstates += 3;
    fd5c:	e5843040 	str	r3, [r4, #64]	; 0x40
	BR.H = doSetRes(ctx, SR_SET, 2, read8(ctx, WR.IX + off));
    fd60:	e5c42007 	strb	r2, [r4, #7]
	ctx->memWrite(ctx->memParam, addr, val);	
    fd64:	e5943028 	ldr	r3, [r4, #40]	; 0x28
    fd68:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    fd6c:	e6ff1071 	uxth	r1, r1
}
    fd70:	e8bd4070 	pop	{r4, r5, r6, lr}
    fd74:	e12fff13 	bx	r3

0000fd78 <LD_H_SET_2_off_IY_d>:


static void LD_H_SET_2_off_IY_d (Z80Context* ctx)
{
	ctx->tstates += 2;
	char off = read8(ctx, ctx->PC++);
    fd78:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
    fd7c:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	char off = read8(ctx, ctx->PC++);
    fd80:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
    fd84:	e2833005 	add	r3, r3, #5
{
    fd88:	e92d4070 	push	{r4, r5, r6, lr}
    fd8c:	e1a04000 	mov	r4, r0
	char off = read8(ctx, ctx->PC++);
    fd90:	e1c021bc 	strh	r2, [r0, #28]
    fd94:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    fd98:	e5903024 	ldr	r3, [r0, #36]	; 0x24
    fd9c:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
    fda0:	e12fff33 	blx	r3
	ctx->tstates += 3;
    fda4:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	BR.H = doSetRes(ctx, SR_SET, 2, read8(ctx, WR.IY + off));
    fda8:	e1d410ba 	ldrh	r1, [r4, #10]
    fdac:	e6ff5070 	uxth	r5, r0
    fdb0:	e2833003 	add	r3, r3, #3
    fdb4:	e0851001 	add	r1, r5, r1
    fdb8:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    fdbc:	e6ff1071 	uxth	r1, r1
    fdc0:	e5943024 	ldr	r3, [r4, #36]	; 0x24
    fdc4:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    fdc8:	e12fff33 	blx	r3
	ctx->tstates += 3;
    fdcc:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	write8(ctx, WR.IY + off, BR.H);	
    fdd0:	e1d410ba 	ldrh	r1, [r4, #10]
		val |= (1 << pos);
    fdd4:	e3802004 	orr	r2, r0, #4
    fdd8:	e0851001 	add	r1, r5, r1
	ctx->tstates += 3;
    fddc:	e2833003 	add	r3, r3, #3
		val |= (1 << pos);
    fde0:	e6ef2072 	uxtb	r2, r2
	ctx->tstates += 3;
    fde4:	e5843040 	str	r3, [r4, #64]	; 0x40
	BR.H = doSetRes(ctx, SR_SET, 2, read8(ctx, WR.IY + off));
    fde8:	e5c42007 	strb	r2, [r4, #7]
	ctx->memWrite(ctx->memParam, addr, val);	
    fdec:	e5943028 	ldr	r3, [r4, #40]	; 0x28
    fdf0:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    fdf4:	e6ff1071 	uxth	r1, r1
}
    fdf8:	e8bd4070 	pop	{r4, r5, r6, lr}
    fdfc:	e12fff13 	bx	r3

0000fe00 <LD_H_SET_3_off_IX_d>:


static void LD_H_SET_3_off_IX_d (Z80Context* ctx)
{
	ctx->tstates += 2;
	char off = read8(ctx, ctx->PC++);
    fe00:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
    fe04:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	char off = read8(ctx, ctx->PC++);
    fe08:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
    fe0c:	e2833005 	add	r3, r3, #5
{
    fe10:	e92d4070 	push	{r4, r5, r6, lr}
    fe14:	e1a04000 	mov	r4, r0
	char off = read8(ctx, ctx->PC++);
    fe18:	e1c021bc 	strh	r2, [r0, #28]
    fe1c:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    fe20:	e5903024 	ldr	r3, [r0, #36]	; 0x24
    fe24:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
    fe28:	e12fff33 	blx	r3
	ctx->tstates += 3;
    fe2c:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	BR.H = doSetRes(ctx, SR_SET, 3, read8(ctx, WR.IX + off));
    fe30:	e1d410b8 	ldrh	r1, [r4, #8]
    fe34:	e6ff5070 	uxth	r5, r0
    fe38:	e2833003 	add	r3, r3, #3
    fe3c:	e0851001 	add	r1, r5, r1
    fe40:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    fe44:	e6ff1071 	uxth	r1, r1
    fe48:	e5943024 	ldr	r3, [r4, #36]	; 0x24
    fe4c:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    fe50:	e12fff33 	blx	r3
	ctx->tstates += 3;
    fe54:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	write8(ctx, WR.IX + off, BR.H);	
    fe58:	e1d410b8 	ldrh	r1, [r4, #8]
		val |= (1 << pos);
    fe5c:	e3802008 	orr	r2, r0, #8
    fe60:	e0851001 	add	r1, r5, r1
	ctx->tstates += 3;
    fe64:	e2833003 	add	r3, r3, #3
		val |= (1 << pos);
    fe68:	e6ef2072 	uxtb	r2, r2
	ctx->tstates += 3;
    fe6c:	e5843040 	str	r3, [r4, #64]	; 0x40
	BR.H = doSetRes(ctx, SR_SET, 3, read8(ctx, WR.IX + off));
    fe70:	e5c42007 	strb	r2, [r4, #7]
	ctx->memWrite(ctx->memParam, addr, val);	
    fe74:	e5943028 	ldr	r3, [r4, #40]	; 0x28
    fe78:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    fe7c:	e6ff1071 	uxth	r1, r1
}
    fe80:	e8bd4070 	pop	{r4, r5, r6, lr}
    fe84:	e12fff13 	bx	r3

0000fe88 <LD_H_SET_3_off_IY_d>:


static void LD_H_SET_3_off_IY_d (Z80Context* ctx)
{
	ctx->tstates += 2;
	char off = read8(ctx, ctx->PC++);
    fe88:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
    fe8c:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	char off = read8(ctx, ctx->PC++);
    fe90:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
    fe94:	e2833005 	add	r3, r3, #5
{
    fe98:	e92d4070 	push	{r4, r5, r6, lr}
    fe9c:	e1a04000 	mov	r4, r0
	char off = read8(ctx, ctx->PC++);
    fea0:	e1c021bc 	strh	r2, [r0, #28]
    fea4:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    fea8:	e5903024 	ldr	r3, [r0, #36]	; 0x24
    feac:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
    feb0:	e12fff33 	blx	r3
	ctx->tstates += 3;
    feb4:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	BR.H = doSetRes(ctx, SR_SET, 3, read8(ctx, WR.IY + off));
    feb8:	e1d410ba 	ldrh	r1, [r4, #10]
    febc:	e6ff5070 	uxth	r5, r0
    fec0:	e2833003 	add	r3, r3, #3
    fec4:	e0851001 	add	r1, r5, r1
    fec8:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    fecc:	e6ff1071 	uxth	r1, r1
    fed0:	e5943024 	ldr	r3, [r4, #36]	; 0x24
    fed4:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    fed8:	e12fff33 	blx	r3
	ctx->tstates += 3;
    fedc:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	write8(ctx, WR.IY + off, BR.H);	
    fee0:	e1d410ba 	ldrh	r1, [r4, #10]
		val |= (1 << pos);
    fee4:	e3802008 	orr	r2, r0, #8
    fee8:	e0851001 	add	r1, r5, r1
	ctx->tstates += 3;
    feec:	e2833003 	add	r3, r3, #3
		val |= (1 << pos);
    fef0:	e6ef2072 	uxtb	r2, r2
	ctx->tstates += 3;
    fef4:	e5843040 	str	r3, [r4, #64]	; 0x40
	BR.H = doSetRes(ctx, SR_SET, 3, read8(ctx, WR.IY + off));
    fef8:	e5c42007 	strb	r2, [r4, #7]
	ctx->memWrite(ctx->memParam, addr, val);	
    fefc:	e5943028 	ldr	r3, [r4, #40]	; 0x28
    ff00:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    ff04:	e6ff1071 	uxth	r1, r1
}
    ff08:	e8bd4070 	pop	{r4, r5, r6, lr}
    ff0c:	e12fff13 	bx	r3

0000ff10 <LD_H_SET_4_off_IX_d>:


static void LD_H_SET_4_off_IX_d (Z80Context* ctx)
{
	ctx->tstates += 2;
	char off = read8(ctx, ctx->PC++);
    ff10:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
    ff14:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	char off = read8(ctx, ctx->PC++);
    ff18:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
    ff1c:	e2833005 	add	r3, r3, #5
{
    ff20:	e92d4070 	push	{r4, r5, r6, lr}
    ff24:	e1a04000 	mov	r4, r0
	char off = read8(ctx, ctx->PC++);
    ff28:	e1c021bc 	strh	r2, [r0, #28]
    ff2c:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    ff30:	e5903024 	ldr	r3, [r0, #36]	; 0x24
    ff34:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
    ff38:	e12fff33 	blx	r3
	ctx->tstates += 3;
    ff3c:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	BR.H = doSetRes(ctx, SR_SET, 4, read8(ctx, WR.IX + off));
    ff40:	e1d410b8 	ldrh	r1, [r4, #8]
    ff44:	e6ff5070 	uxth	r5, r0
    ff48:	e2833003 	add	r3, r3, #3
    ff4c:	e0851001 	add	r1, r5, r1
    ff50:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    ff54:	e6ff1071 	uxth	r1, r1
    ff58:	e5943024 	ldr	r3, [r4, #36]	; 0x24
    ff5c:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    ff60:	e12fff33 	blx	r3
	ctx->tstates += 3;
    ff64:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	write8(ctx, WR.IX + off, BR.H);	
    ff68:	e1d410b8 	ldrh	r1, [r4, #8]
		val |= (1 << pos);
    ff6c:	e3802010 	orr	r2, r0, #16
    ff70:	e0851001 	add	r1, r5, r1
	ctx->tstates += 3;
    ff74:	e2833003 	add	r3, r3, #3
		val |= (1 << pos);
    ff78:	e6ef2072 	uxtb	r2, r2
	ctx->tstates += 3;
    ff7c:	e5843040 	str	r3, [r4, #64]	; 0x40
	BR.H = doSetRes(ctx, SR_SET, 4, read8(ctx, WR.IX + off));
    ff80:	e5c42007 	strb	r2, [r4, #7]
	ctx->memWrite(ctx->memParam, addr, val);	
    ff84:	e5943028 	ldr	r3, [r4, #40]	; 0x28
    ff88:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    ff8c:	e6ff1071 	uxth	r1, r1
}
    ff90:	e8bd4070 	pop	{r4, r5, r6, lr}
    ff94:	e12fff13 	bx	r3

0000ff98 <LD_H_SET_4_off_IY_d>:


static void LD_H_SET_4_off_IY_d (Z80Context* ctx)
{
	ctx->tstates += 2;
	char off = read8(ctx, ctx->PC++);
    ff98:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
    ff9c:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	char off = read8(ctx, ctx->PC++);
    ffa0:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
    ffa4:	e2833005 	add	r3, r3, #5
{
    ffa8:	e92d4070 	push	{r4, r5, r6, lr}
    ffac:	e1a04000 	mov	r4, r0
	char off = read8(ctx, ctx->PC++);
    ffb0:	e1c021bc 	strh	r2, [r0, #28]
    ffb4:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    ffb8:	e5903024 	ldr	r3, [r0, #36]	; 0x24
    ffbc:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
    ffc0:	e12fff33 	blx	r3
	ctx->tstates += 3;
    ffc4:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	BR.H = doSetRes(ctx, SR_SET, 4, read8(ctx, WR.IY + off));
    ffc8:	e1d410ba 	ldrh	r1, [r4, #10]
    ffcc:	e6ff5070 	uxth	r5, r0
    ffd0:	e2833003 	add	r3, r3, #3
    ffd4:	e0851001 	add	r1, r5, r1
    ffd8:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
    ffdc:	e6ff1071 	uxth	r1, r1
    ffe0:	e5943024 	ldr	r3, [r4, #36]	; 0x24
    ffe4:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    ffe8:	e12fff33 	blx	r3
	ctx->tstates += 3;
    ffec:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	write8(ctx, WR.IY + off, BR.H);	
    fff0:	e1d410ba 	ldrh	r1, [r4, #10]
		val |= (1 << pos);
    fff4:	e3802010 	orr	r2, r0, #16
    fff8:	e0851001 	add	r1, r5, r1
	ctx->tstates += 3;
    fffc:	e2833003 	add	r3, r3, #3
		val |= (1 << pos);
   10000:	e6ef2072 	uxtb	r2, r2
	ctx->tstates += 3;
   10004:	e5843040 	str	r3, [r4, #64]	; 0x40
	BR.H = doSetRes(ctx, SR_SET, 4, read8(ctx, WR.IY + off));
   10008:	e5c42007 	strb	r2, [r4, #7]
	ctx->memWrite(ctx->memParam, addr, val);	
   1000c:	e5943028 	ldr	r3, [r4, #40]	; 0x28
   10010:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   10014:	e6ff1071 	uxth	r1, r1
}
   10018:	e8bd4070 	pop	{r4, r5, r6, lr}
   1001c:	e12fff13 	bx	r3

00010020 <LD_H_SET_5_off_IX_d>:


static void LD_H_SET_5_off_IX_d (Z80Context* ctx)
{
	ctx->tstates += 2;
	char off = read8(ctx, ctx->PC++);
   10020:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
   10024:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	char off = read8(ctx, ctx->PC++);
   10028:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
   1002c:	e2833005 	add	r3, r3, #5
{
   10030:	e92d4070 	push	{r4, r5, r6, lr}
   10034:	e1a04000 	mov	r4, r0
	char off = read8(ctx, ctx->PC++);
   10038:	e1c021bc 	strh	r2, [r0, #28]
   1003c:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   10040:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   10044:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   10048:	e12fff33 	blx	r3
	ctx->tstates += 3;
   1004c:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	BR.H = doSetRes(ctx, SR_SET, 5, read8(ctx, WR.IX + off));
   10050:	e1d410b8 	ldrh	r1, [r4, #8]
   10054:	e6ff5070 	uxth	r5, r0
   10058:	e2833003 	add	r3, r3, #3
   1005c:	e0851001 	add	r1, r5, r1
   10060:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   10064:	e6ff1071 	uxth	r1, r1
   10068:	e5943024 	ldr	r3, [r4, #36]	; 0x24
   1006c:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   10070:	e12fff33 	blx	r3
	ctx->tstates += 3;
   10074:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	write8(ctx, WR.IX + off, BR.H);	
   10078:	e1d410b8 	ldrh	r1, [r4, #8]
		val |= (1 << pos);
   1007c:	e3802020 	orr	r2, r0, #32
   10080:	e0851001 	add	r1, r5, r1
	ctx->tstates += 3;
   10084:	e2833003 	add	r3, r3, #3
		val |= (1 << pos);
   10088:	e6ef2072 	uxtb	r2, r2
	ctx->tstates += 3;
   1008c:	e5843040 	str	r3, [r4, #64]	; 0x40
	BR.H = doSetRes(ctx, SR_SET, 5, read8(ctx, WR.IX + off));
   10090:	e5c42007 	strb	r2, [r4, #7]
	ctx->memWrite(ctx->memParam, addr, val);	
   10094:	e5943028 	ldr	r3, [r4, #40]	; 0x28
   10098:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   1009c:	e6ff1071 	uxth	r1, r1
}
   100a0:	e8bd4070 	pop	{r4, r5, r6, lr}
   100a4:	e12fff13 	bx	r3

000100a8 <LD_H_SET_5_off_IY_d>:


static void LD_H_SET_5_off_IY_d (Z80Context* ctx)
{
	ctx->tstates += 2;
	char off = read8(ctx, ctx->PC++);
   100a8:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
   100ac:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	char off = read8(ctx, ctx->PC++);
   100b0:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
   100b4:	e2833005 	add	r3, r3, #5
{
   100b8:	e92d4070 	push	{r4, r5, r6, lr}
   100bc:	e1a04000 	mov	r4, r0
	char off = read8(ctx, ctx->PC++);
   100c0:	e1c021bc 	strh	r2, [r0, #28]
   100c4:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   100c8:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   100cc:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   100d0:	e12fff33 	blx	r3
	ctx->tstates += 3;
   100d4:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	BR.H = doSetRes(ctx, SR_SET, 5, read8(ctx, WR.IY + off));
   100d8:	e1d410ba 	ldrh	r1, [r4, #10]
   100dc:	e6ff5070 	uxth	r5, r0
   100e0:	e2833003 	add	r3, r3, #3
   100e4:	e0851001 	add	r1, r5, r1
   100e8:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   100ec:	e6ff1071 	uxth	r1, r1
   100f0:	e5943024 	ldr	r3, [r4, #36]	; 0x24
   100f4:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   100f8:	e12fff33 	blx	r3
	ctx->tstates += 3;
   100fc:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	write8(ctx, WR.IY + off, BR.H);	
   10100:	e1d410ba 	ldrh	r1, [r4, #10]
		val |= (1 << pos);
   10104:	e3802020 	orr	r2, r0, #32
   10108:	e0851001 	add	r1, r5, r1
	ctx->tstates += 3;
   1010c:	e2833003 	add	r3, r3, #3
		val |= (1 << pos);
   10110:	e6ef2072 	uxtb	r2, r2
	ctx->tstates += 3;
   10114:	e5843040 	str	r3, [r4, #64]	; 0x40
	BR.H = doSetRes(ctx, SR_SET, 5, read8(ctx, WR.IY + off));
   10118:	e5c42007 	strb	r2, [r4, #7]
	ctx->memWrite(ctx->memParam, addr, val);	
   1011c:	e5943028 	ldr	r3, [r4, #40]	; 0x28
   10120:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   10124:	e6ff1071 	uxth	r1, r1
}
   10128:	e8bd4070 	pop	{r4, r5, r6, lr}
   1012c:	e12fff13 	bx	r3

00010130 <LD_H_SET_6_off_IX_d>:


static void LD_H_SET_6_off_IX_d (Z80Context* ctx)
{
	ctx->tstates += 2;
	char off = read8(ctx, ctx->PC++);
   10130:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
   10134:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	char off = read8(ctx, ctx->PC++);
   10138:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
   1013c:	e2833005 	add	r3, r3, #5
{
   10140:	e92d4070 	push	{r4, r5, r6, lr}
   10144:	e1a04000 	mov	r4, r0
	char off = read8(ctx, ctx->PC++);
   10148:	e1c021bc 	strh	r2, [r0, #28]
   1014c:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   10150:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   10154:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   10158:	e12fff33 	blx	r3
	ctx->tstates += 3;
   1015c:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	BR.H = doSetRes(ctx, SR_SET, 6, read8(ctx, WR.IX + off));
   10160:	e1d410b8 	ldrh	r1, [r4, #8]
   10164:	e6ff5070 	uxth	r5, r0
   10168:	e2833003 	add	r3, r3, #3
   1016c:	e0851001 	add	r1, r5, r1
   10170:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   10174:	e6ff1071 	uxth	r1, r1
   10178:	e5943024 	ldr	r3, [r4, #36]	; 0x24
   1017c:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   10180:	e12fff33 	blx	r3
	ctx->tstates += 3;
   10184:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	write8(ctx, WR.IX + off, BR.H);	
   10188:	e1d410b8 	ldrh	r1, [r4, #8]
		val |= (1 << pos);
   1018c:	e3802040 	orr	r2, r0, #64	; 0x40
   10190:	e0851001 	add	r1, r5, r1
	ctx->tstates += 3;
   10194:	e2833003 	add	r3, r3, #3
		val |= (1 << pos);
   10198:	e6ef2072 	uxtb	r2, r2
	ctx->tstates += 3;
   1019c:	e5843040 	str	r3, [r4, #64]	; 0x40
	BR.H = doSetRes(ctx, SR_SET, 6, read8(ctx, WR.IX + off));
   101a0:	e5c42007 	strb	r2, [r4, #7]
	ctx->memWrite(ctx->memParam, addr, val);	
   101a4:	e5943028 	ldr	r3, [r4, #40]	; 0x28
   101a8:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   101ac:	e6ff1071 	uxth	r1, r1
}
   101b0:	e8bd4070 	pop	{r4, r5, r6, lr}
   101b4:	e12fff13 	bx	r3

000101b8 <LD_H_SET_6_off_IY_d>:


static void LD_H_SET_6_off_IY_d (Z80Context* ctx)
{
	ctx->tstates += 2;
	char off = read8(ctx, ctx->PC++);
   101b8:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
   101bc:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	char off = read8(ctx, ctx->PC++);
   101c0:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
   101c4:	e2833005 	add	r3, r3, #5
{
   101c8:	e92d4070 	push	{r4, r5, r6, lr}
   101cc:	e1a04000 	mov	r4, r0
	char off = read8(ctx, ctx->PC++);
   101d0:	e1c021bc 	strh	r2, [r0, #28]
   101d4:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   101d8:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   101dc:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   101e0:	e12fff33 	blx	r3
	ctx->tstates += 3;
   101e4:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	BR.H = doSetRes(ctx, SR_SET, 6, read8(ctx, WR.IY + off));
   101e8:	e1d410ba 	ldrh	r1, [r4, #10]
   101ec:	e6ff5070 	uxth	r5, r0
   101f0:	e2833003 	add	r3, r3, #3
   101f4:	e0851001 	add	r1, r5, r1
   101f8:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   101fc:	e6ff1071 	uxth	r1, r1
   10200:	e5943024 	ldr	r3, [r4, #36]	; 0x24
   10204:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   10208:	e12fff33 	blx	r3
	ctx->tstates += 3;
   1020c:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	write8(ctx, WR.IY + off, BR.H);	
   10210:	e1d410ba 	ldrh	r1, [r4, #10]
		val |= (1 << pos);
   10214:	e3802040 	orr	r2, r0, #64	; 0x40
   10218:	e0851001 	add	r1, r5, r1
	ctx->tstates += 3;
   1021c:	e2833003 	add	r3, r3, #3
		val |= (1 << pos);
   10220:	e6ef2072 	uxtb	r2, r2
	ctx->tstates += 3;
   10224:	e5843040 	str	r3, [r4, #64]	; 0x40
	BR.H = doSetRes(ctx, SR_SET, 6, read8(ctx, WR.IY + off));
   10228:	e5c42007 	strb	r2, [r4, #7]
	ctx->memWrite(ctx->memParam, addr, val);	
   1022c:	e5943028 	ldr	r3, [r4, #40]	; 0x28
   10230:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   10234:	e6ff1071 	uxth	r1, r1
}
   10238:	e8bd4070 	pop	{r4, r5, r6, lr}
   1023c:	e12fff13 	bx	r3

00010240 <LD_H_SET_7_off_IX_d>:


static void LD_H_SET_7_off_IX_d (Z80Context* ctx)
{
	ctx->tstates += 2;
	char off = read8(ctx, ctx->PC++);
   10240:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
   10244:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	char off = read8(ctx, ctx->PC++);
   10248:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
   1024c:	e2833005 	add	r3, r3, #5
{
   10250:	e92d4070 	push	{r4, r5, r6, lr}
   10254:	e1a04000 	mov	r4, r0
	char off = read8(ctx, ctx->PC++);
   10258:	e1c021bc 	strh	r2, [r0, #28]
   1025c:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   10260:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   10264:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   10268:	e12fff33 	blx	r3
	ctx->tstates += 3;
   1026c:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	BR.H = doSetRes(ctx, SR_SET, 7, read8(ctx, WR.IX + off));
   10270:	e1d410b8 	ldrh	r1, [r4, #8]
   10274:	e6ff5070 	uxth	r5, r0
   10278:	e2833003 	add	r3, r3, #3
   1027c:	e0851001 	add	r1, r5, r1
   10280:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   10284:	e6ff1071 	uxth	r1, r1
   10288:	e5943024 	ldr	r3, [r4, #36]	; 0x24
   1028c:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   10290:	e12fff33 	blx	r3
		val |= (1 << pos);
   10294:	e1e00c80 	mvn	r0, r0, lsl #25
   10298:	e1e00ca0 	mvn	r0, r0, lsr #25
	ctx->tstates += 3;
   1029c:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	write8(ctx, WR.IX + off, BR.H);	
   102a0:	e1d410b8 	ldrh	r1, [r4, #8]
		val |= (1 << pos);
   102a4:	e6ef2070 	uxtb	r2, r0
   102a8:	e0851001 	add	r1, r5, r1
	ctx->tstates += 3;
   102ac:	e2833003 	add	r3, r3, #3
   102b0:	e5843040 	str	r3, [r4, #64]	; 0x40
	BR.H = doSetRes(ctx, SR_SET, 7, read8(ctx, WR.IX + off));
   102b4:	e5c42007 	strb	r2, [r4, #7]
	ctx->memWrite(ctx->memParam, addr, val);	
   102b8:	e5943028 	ldr	r3, [r4, #40]	; 0x28
   102bc:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   102c0:	e6ff1071 	uxth	r1, r1
}
   102c4:	e8bd4070 	pop	{r4, r5, r6, lr}
   102c8:	e12fff13 	bx	r3

000102cc <LD_H_SET_7_off_IY_d>:


static void LD_H_SET_7_off_IY_d (Z80Context* ctx)
{
	ctx->tstates += 2;
	char off = read8(ctx, ctx->PC++);
   102cc:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
   102d0:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	char off = read8(ctx, ctx->PC++);
   102d4:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
   102d8:	e2833005 	add	r3, r3, #5
{
   102dc:	e92d4070 	push	{r4, r5, r6, lr}
   102e0:	e1a04000 	mov	r4, r0
	char off = read8(ctx, ctx->PC++);
   102e4:	e1c021bc 	strh	r2, [r0, #28]
   102e8:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   102ec:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   102f0:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   102f4:	e12fff33 	blx	r3
	ctx->tstates += 3;
   102f8:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	BR.H = doSetRes(ctx, SR_SET, 7, read8(ctx, WR.IY + off));
   102fc:	e1d410ba 	ldrh	r1, [r4, #10]
   10300:	e6ff5070 	uxth	r5, r0
   10304:	e2833003 	add	r3, r3, #3
   10308:	e0851001 	add	r1, r5, r1
   1030c:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   10310:	e6ff1071 	uxth	r1, r1
   10314:	e5943024 	ldr	r3, [r4, #36]	; 0x24
   10318:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   1031c:	e12fff33 	blx	r3
		val |= (1 << pos);
   10320:	e1e00c80 	mvn	r0, r0, lsl #25
   10324:	e1e00ca0 	mvn	r0, r0, lsr #25
	ctx->tstates += 3;
   10328:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	write8(ctx, WR.IY + off, BR.H);	
   1032c:	e1d410ba 	ldrh	r1, [r4, #10]
		val |= (1 << pos);
   10330:	e6ef2070 	uxtb	r2, r0
   10334:	e0851001 	add	r1, r5, r1
	ctx->tstates += 3;
   10338:	e2833003 	add	r3, r3, #3
   1033c:	e5843040 	str	r3, [r4, #64]	; 0x40
	BR.H = doSetRes(ctx, SR_SET, 7, read8(ctx, WR.IY + off));
   10340:	e5c42007 	strb	r2, [r4, #7]
	ctx->memWrite(ctx->memParam, addr, val);	
   10344:	e5943028 	ldr	r3, [r4, #40]	; 0x28
   10348:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   1034c:	e6ff1071 	uxth	r1, r1
}
   10350:	e8bd4070 	pop	{r4, r5, r6, lr}
   10354:	e12fff13 	bx	r3

00010358 <LD_I_A>:
}


static void LD_I_A (Z80Context* ctx)
{
	ctx->tstates += 1;
   10358:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	ctx->I = BR.A;
   1035c:	e5d02001 	ldrb	r2, [r0, #1]
	ctx->tstates += 1;
   10360:	e2833001 	add	r3, r3, #1
   10364:	e5803040 	str	r3, [r0, #64]	; 0x40
	ctx->I = BR.A;
   10368:	e5c0201f 	strb	r2, [r0, #31]
}
   1036c:	e12fff1e 	bx	lr

00010370 <LD_IXh_A>:
}


static void LD_IXh_A (Z80Context* ctx)
{
	BR.IXh = BR.A;
   10370:	e5d03001 	ldrb	r3, [r0, #1]
   10374:	e5c03009 	strb	r3, [r0, #9]
}
   10378:	e12fff1e 	bx	lr

0001037c <LD_IXh_B>:


static void LD_IXh_B (Z80Context* ctx)
{
	BR.IXh = BR.B;
   1037c:	e5d03003 	ldrb	r3, [r0, #3]
   10380:	e5c03009 	strb	r3, [r0, #9]
}
   10384:	e12fff1e 	bx	lr

00010388 <LD_IXh_C>:


static void LD_IXh_C (Z80Context* ctx)
{
	BR.IXh = BR.C;
   10388:	e5d03002 	ldrb	r3, [r0, #2]
   1038c:	e5c03009 	strb	r3, [r0, #9]
}
   10390:	e12fff1e 	bx	lr

00010394 <LD_IXh_D>:


static void LD_IXh_D (Z80Context* ctx)
{
	BR.IXh = BR.D;
   10394:	e5d03005 	ldrb	r3, [r0, #5]
   10398:	e5c03009 	strb	r3, [r0, #9]
}
   1039c:	e12fff1e 	bx	lr

000103a0 <LD_IXh_E>:


static void LD_IXh_E (Z80Context* ctx)
{
	BR.IXh = BR.E;
   103a0:	e5d03004 	ldrb	r3, [r0, #4]
   103a4:	e5c03009 	strb	r3, [r0, #9]
}
   103a8:	e12fff1e 	bx	lr

000103ac <LD_IXh_IXl>:
}


static void LD_IXh_IXl (Z80Context* ctx)
{
	BR.IXh = BR.IXl;
   103ac:	e5d03008 	ldrb	r3, [r0, #8]
   103b0:	e5c03009 	strb	r3, [r0, #9]
}
   103b4:	e12fff1e 	bx	lr

000103b8 <LD_IXh_n>:


static void LD_IXh_n (Z80Context* ctx)
{
	BR.IXh = read8(ctx, ctx->PC++);
   103b8:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 3;
   103bc:	e5903040 	ldr	r3, [r0, #64]	; 0x40
   103c0:	e2812001 	add	r2, r1, #1
   103c4:	e2833003 	add	r3, r3, #3
{
   103c8:	e92d4010 	push	{r4, lr}
   103cc:	e5803040 	str	r3, [r0, #64]	; 0x40
   103d0:	e1a04000 	mov	r4, r0
	BR.IXh = read8(ctx, ctx->PC++);
   103d4:	e1c021bc 	strh	r2, [r0, #28]
	return ctx->memRead(ctx->memParam, addr);	
   103d8:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   103dc:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   103e0:	e12fff33 	blx	r3
   103e4:	e5c40009 	strb	r0, [r4, #9]
	
}
   103e8:	e8bd8010 	pop	{r4, pc}

000103ec <LD_IXl_A>:


static void LD_IXl_A (Z80Context* ctx)
{
	BR.IXl = BR.A;
   103ec:	e5d03001 	ldrb	r3, [r0, #1]
   103f0:	e5c03008 	strb	r3, [r0, #8]
}
   103f4:	e12fff1e 	bx	lr

000103f8 <LD_IXl_B>:


static void LD_IXl_B (Z80Context* ctx)
{
	BR.IXl = BR.B;
   103f8:	e5d03003 	ldrb	r3, [r0, #3]
   103fc:	e5c03008 	strb	r3, [r0, #8]
}
   10400:	e12fff1e 	bx	lr

00010404 <LD_IXl_C>:


static void LD_IXl_C (Z80Context* ctx)
{
	BR.IXl = BR.C;
   10404:	e5d03002 	ldrb	r3, [r0, #2]
   10408:	e5c03008 	strb	r3, [r0, #8]
}
   1040c:	e12fff1e 	bx	lr

00010410 <LD_IXl_D>:


static void LD_IXl_D (Z80Context* ctx)
{
	BR.IXl = BR.D;
   10410:	e5d03005 	ldrb	r3, [r0, #5]
   10414:	e5c03008 	strb	r3, [r0, #8]
}
   10418:	e12fff1e 	bx	lr

0001041c <LD_IXl_E>:


static void LD_IXl_E (Z80Context* ctx)
{
	BR.IXl = BR.E;
   1041c:	e5d03004 	ldrb	r3, [r0, #4]
   10420:	e5c03008 	strb	r3, [r0, #8]
}
   10424:	e12fff1e 	bx	lr

00010428 <LD_IXl_IXh>:


static void LD_IXl_IXh (Z80Context* ctx)
{
	BR.IXl = BR.IXh;
   10428:	e5d03009 	ldrb	r3, [r0, #9]
   1042c:	e5c03008 	strb	r3, [r0, #8]
}
   10430:	e12fff1e 	bx	lr

00010434 <LD_IXl_n>:
}


static void LD_IXl_n (Z80Context* ctx)
{
	BR.IXl = read8(ctx, ctx->PC++);
   10434:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 3;
   10438:	e5903040 	ldr	r3, [r0, #64]	; 0x40
   1043c:	e2812001 	add	r2, r1, #1
   10440:	e2833003 	add	r3, r3, #3
{
   10444:	e92d4010 	push	{r4, lr}
   10448:	e5803040 	str	r3, [r0, #64]	; 0x40
   1044c:	e1a04000 	mov	r4, r0
	BR.IXl = read8(ctx, ctx->PC++);
   10450:	e1c021bc 	strh	r2, [r0, #28]
	return ctx->memRead(ctx->memParam, addr);	
   10454:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   10458:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   1045c:	e12fff33 	blx	r3
   10460:	e5c40008 	strb	r0, [r4, #8]
	
}
   10464:	e8bd8010 	pop	{r4, pc}

00010468 <LD_IYh_A>:
}


static void LD_IYh_A (Z80Context* ctx)
{
	BR.IYh = BR.A;
   10468:	e5d03001 	ldrb	r3, [r0, #1]
   1046c:	e5c0300b 	strb	r3, [r0, #11]
}
   10470:	e12fff1e 	bx	lr

00010474 <LD_IYh_B>:


static void LD_IYh_B (Z80Context* ctx)
{
	BR.IYh = BR.B;
   10474:	e5d03003 	ldrb	r3, [r0, #3]
   10478:	e5c0300b 	strb	r3, [r0, #11]
}
   1047c:	e12fff1e 	bx	lr

00010480 <LD_IYh_C>:


static void LD_IYh_C (Z80Context* ctx)
{
	BR.IYh = BR.C;
   10480:	e5d03002 	ldrb	r3, [r0, #2]
   10484:	e5c0300b 	strb	r3, [r0, #11]
}
   10488:	e12fff1e 	bx	lr

0001048c <LD_IYh_D>:


static void LD_IYh_D (Z80Context* ctx)
{
	BR.IYh = BR.D;
   1048c:	e5d03005 	ldrb	r3, [r0, #5]
   10490:	e5c0300b 	strb	r3, [r0, #11]
}
   10494:	e12fff1e 	bx	lr

00010498 <LD_IYh_E>:


static void LD_IYh_E (Z80Context* ctx)
{
	BR.IYh = BR.E;
   10498:	e5d03004 	ldrb	r3, [r0, #4]
   1049c:	e5c0300b 	strb	r3, [r0, #11]
}
   104a0:	e12fff1e 	bx	lr

000104a4 <LD_IYh_IYl>:
}


static void LD_IYh_IYl (Z80Context* ctx)
{
	BR.IYh = BR.IYl;
   104a4:	e5d0300a 	ldrb	r3, [r0, #10]
   104a8:	e5c0300b 	strb	r3, [r0, #11]
}
   104ac:	e12fff1e 	bx	lr

000104b0 <LD_IYh_n>:


static void LD_IYh_n (Z80Context* ctx)
{
	BR.IYh = read8(ctx, ctx->PC++);
   104b0:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 3;
   104b4:	e5903040 	ldr	r3, [r0, #64]	; 0x40
   104b8:	e2812001 	add	r2, r1, #1
   104bc:	e2833003 	add	r3, r3, #3
{
   104c0:	e92d4010 	push	{r4, lr}
   104c4:	e5803040 	str	r3, [r0, #64]	; 0x40
   104c8:	e1a04000 	mov	r4, r0
	BR.IYh = read8(ctx, ctx->PC++);
   104cc:	e1c021bc 	strh	r2, [r0, #28]
	return ctx->memRead(ctx->memParam, addr);	
   104d0:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   104d4:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   104d8:	e12fff33 	blx	r3
   104dc:	e5c4000b 	strb	r0, [r4, #11]
	
}
   104e0:	e8bd8010 	pop	{r4, pc}

000104e4 <LD_IYl_A>:


static void LD_IYl_A (Z80Context* ctx)
{
	BR.IYl = BR.A;
   104e4:	e5d03001 	ldrb	r3, [r0, #1]
   104e8:	e5c0300a 	strb	r3, [r0, #10]
}
   104ec:	e12fff1e 	bx	lr

000104f0 <LD_IYl_B>:


static void LD_IYl_B (Z80Context* ctx)
{
	BR.IYl = BR.B;
   104f0:	e5d03003 	ldrb	r3, [r0, #3]
   104f4:	e5c0300a 	strb	r3, [r0, #10]
}
   104f8:	e12fff1e 	bx	lr

000104fc <LD_IYl_C>:


static void LD_IYl_C (Z80Context* ctx)
{
	BR.IYl = BR.C;
   104fc:	e5d03002 	ldrb	r3, [r0, #2]
   10500:	e5c0300a 	strb	r3, [r0, #10]
}
   10504:	e12fff1e 	bx	lr

00010508 <LD_IYl_D>:


static void LD_IYl_D (Z80Context* ctx)
{
	BR.IYl = BR.D;
   10508:	e5d03005 	ldrb	r3, [r0, #5]
   1050c:	e5c0300a 	strb	r3, [r0, #10]
}
   10510:	e12fff1e 	bx	lr

00010514 <LD_IYl_E>:


static void LD_IYl_E (Z80Context* ctx)
{
	BR.IYl = BR.E;
   10514:	e5d03004 	ldrb	r3, [r0, #4]
   10518:	e5c0300a 	strb	r3, [r0, #10]
}
   1051c:	e12fff1e 	bx	lr

00010520 <LD_IYl_IYh>:


static void LD_IYl_IYh (Z80Context* ctx)
{
	BR.IYl = BR.IYh;
   10520:	e5d0300b 	ldrb	r3, [r0, #11]
   10524:	e5c0300a 	strb	r3, [r0, #10]
}
   10528:	e12fff1e 	bx	lr

0001052c <LD_IYl_n>:
}


static void LD_IYl_n (Z80Context* ctx)
{
	BR.IYl = read8(ctx, ctx->PC++);
   1052c:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 3;
   10530:	e5903040 	ldr	r3, [r0, #64]	; 0x40
   10534:	e2812001 	add	r2, r1, #1
   10538:	e2833003 	add	r3, r3, #3
{
   1053c:	e92d4010 	push	{r4, lr}
   10540:	e5803040 	str	r3, [r0, #64]	; 0x40
   10544:	e1a04000 	mov	r4, r0
	BR.IYl = read8(ctx, ctx->PC++);
   10548:	e1c021bc 	strh	r2, [r0, #28]
	return ctx->memRead(ctx->memParam, addr);	
   1054c:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   10550:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   10554:	e12fff33 	blx	r3
   10558:	e5c4000a 	strb	r0, [r4, #10]
	
}
   1055c:	e8bd8010 	pop	{r4, pc}

00010560 <LD_L_off_HL>:
	ctx->tstates += 3;
   10560:	e5903040 	ldr	r3, [r0, #64]	; 0x40


static void LD_L_off_HL (Z80Context* ctx)
{
   10564:	e92d4010 	push	{r4, lr}
   10568:	e2833003 	add	r3, r3, #3
   1056c:	e5803040 	str	r3, [r0, #64]	; 0x40
   10570:	e1a04000 	mov	r4, r0
	BR.L = read8(ctx, WR.HL);
   10574:	e1d010b6 	ldrh	r1, [r0, #6]
	return ctx->memRead(ctx->memParam, addr);	
   10578:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   1057c:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   10580:	e12fff33 	blx	r3
   10584:	e5c40006 	strb	r0, [r4, #6]
}
   10588:	e8bd8010 	pop	{r4, pc}

0001058c <LD_L_off_IX_d>:


static void LD_L_off_IX_d (Z80Context* ctx)
{
   1058c:	e92d4070 	push	{r4, r5, r6, lr}
   10590:	e1a04000 	mov	r4, r0
	ctx->tstates += 5;
	BR.L = read8(ctx, WR.IX + (char) read8(ctx, ctx->PC++));
   10594:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 5;
   10598:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	BR.L = read8(ctx, WR.IX + (char) read8(ctx, ctx->PC++));
   1059c:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
   105a0:	e2833008 	add	r3, r3, #8
   105a4:	e1c021bc 	strh	r2, [r0, #28]
   105a8:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   105ac:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   105b0:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   105b4:	e1d450b8 	ldrh	r5, [r4, #8]
   105b8:	e12fff33 	blx	r3
	ctx->tstates += 3;
   105bc:	e5943040 	ldr	r3, [r4, #64]	; 0x40
   105c0:	e0851000 	add	r1, r5, r0
   105c4:	e2833003 	add	r3, r3, #3
   105c8:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   105cc:	e6ff1071 	uxth	r1, r1
   105d0:	e5943024 	ldr	r3, [r4, #36]	; 0x24
   105d4:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   105d8:	e12fff33 	blx	r3
   105dc:	e5c40006 	strb	r0, [r4, #6]
}
   105e0:	e8bd8070 	pop	{r4, r5, r6, pc}

000105e4 <LD_L_off_IY_d>:


static void LD_L_off_IY_d (Z80Context* ctx)
{
   105e4:	e92d4070 	push	{r4, r5, r6, lr}
   105e8:	e1a04000 	mov	r4, r0
	ctx->tstates += 5;
	BR.L = read8(ctx, WR.IY + (char) read8(ctx, ctx->PC++));
   105ec:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 5;
   105f0:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	BR.L = read8(ctx, WR.IY + (char) read8(ctx, ctx->PC++));
   105f4:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
   105f8:	e2833008 	add	r3, r3, #8
   105fc:	e1c021bc 	strh	r2, [r0, #28]
   10600:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   10604:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   10608:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   1060c:	e1d450ba 	ldrh	r5, [r4, #10]
   10610:	e12fff33 	blx	r3
	ctx->tstates += 3;
   10614:	e5943040 	ldr	r3, [r4, #64]	; 0x40
   10618:	e0851000 	add	r1, r5, r0
   1061c:	e2833003 	add	r3, r3, #3
   10620:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   10624:	e6ff1071 	uxth	r1, r1
   10628:	e5943024 	ldr	r3, [r4, #36]	; 0x24
   1062c:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   10630:	e12fff33 	blx	r3
   10634:	e5c40006 	strb	r0, [r4, #6]
}
   10638:	e8bd8070 	pop	{r4, r5, r6, pc}

0001063c <LD_L_A>:


static void LD_L_A (Z80Context* ctx)
{
	BR.L = BR.A;
   1063c:	e5d03001 	ldrb	r3, [r0, #1]
   10640:	e5c03006 	strb	r3, [r0, #6]
}
   10644:	e12fff1e 	bx	lr

00010648 <LD_L_B>:


static void LD_L_B (Z80Context* ctx)
{
	BR.L = BR.B;
   10648:	e5d03003 	ldrb	r3, [r0, #3]
   1064c:	e5c03006 	strb	r3, [r0, #6]
}
   10650:	e12fff1e 	bx	lr

00010654 <LD_L_C>:


static void LD_L_C (Z80Context* ctx)
{
	BR.L = BR.C;
   10654:	e5d03002 	ldrb	r3, [r0, #2]
   10658:	e5c03006 	strb	r3, [r0, #6]
}
   1065c:	e12fff1e 	bx	lr

00010660 <LD_L_D>:


static void LD_L_D (Z80Context* ctx)
{
	BR.L = BR.D;
   10660:	e5d03005 	ldrb	r3, [r0, #5]
   10664:	e5c03006 	strb	r3, [r0, #6]
}
   10668:	e12fff1e 	bx	lr

0001066c <LD_L_E>:


static void LD_L_E (Z80Context* ctx)
{
	BR.L = BR.E;
   1066c:	e5d03004 	ldrb	r3, [r0, #4]
   10670:	e5c03006 	strb	r3, [r0, #6]
}
   10674:	e12fff1e 	bx	lr

00010678 <LD_L_H>:


static void LD_L_H (Z80Context* ctx)
{
	BR.L = BR.H;
   10678:	e5d03007 	ldrb	r3, [r0, #7]
   1067c:	e5c03006 	strb	r3, [r0, #6]
}
   10680:	e12fff1e 	bx	lr

00010684 <LD_L_n>:
}


static void LD_L_n (Z80Context* ctx)
{
	BR.L = read8(ctx, ctx->PC++);
   10684:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 3;
   10688:	e5903040 	ldr	r3, [r0, #64]	; 0x40
   1068c:	e2812001 	add	r2, r1, #1
   10690:	e2833003 	add	r3, r3, #3
{
   10694:	e92d4010 	push	{r4, lr}
   10698:	e5803040 	str	r3, [r0, #64]	; 0x40
   1069c:	e1a04000 	mov	r4, r0
	BR.L = read8(ctx, ctx->PC++);
   106a0:	e1c021bc 	strh	r2, [r0, #28]
	return ctx->memRead(ctx->memParam, addr);	
   106a4:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   106a8:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   106ac:	e12fff33 	blx	r3
   106b0:	e5c40006 	strb	r0, [r4, #6]
	
}
   106b4:	e8bd8010 	pop	{r4, pc}

000106b8 <LD_L_RES_0_off_IX_d>:


static void LD_L_RES_0_off_IX_d (Z80Context* ctx)
{
	ctx->tstates += 2;
	char off = read8(ctx, ctx->PC++);
   106b8:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
   106bc:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	char off = read8(ctx, ctx->PC++);
   106c0:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
   106c4:	e2833005 	add	r3, r3, #5
{
   106c8:	e92d4070 	push	{r4, r5, r6, lr}
   106cc:	e1a04000 	mov	r4, r0
	char off = read8(ctx, ctx->PC++);
   106d0:	e1c021bc 	strh	r2, [r0, #28]
   106d4:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   106d8:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   106dc:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   106e0:	e12fff33 	blx	r3
	ctx->tstates += 3;
   106e4:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	BR.L = doSetRes(ctx, SR_RES, 0, read8(ctx, WR.IX + off));
   106e8:	e1d410b8 	ldrh	r1, [r4, #8]
   106ec:	e6ff5070 	uxth	r5, r0
   106f0:	e2833003 	add	r3, r3, #3
   106f4:	e0851001 	add	r1, r5, r1
   106f8:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   106fc:	e6ff1071 	uxth	r1, r1
   10700:	e5943024 	ldr	r3, [r4, #36]	; 0x24
   10704:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   10708:	e12fff33 	blx	r3
	ctx->tstates += 3;
   1070c:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	write8(ctx, WR.IX + off, BR.L);	
   10710:	e1d410b8 	ldrh	r1, [r4, #8]
		val &= ~(1 << pos);
   10714:	e20020fe 	and	r2, r0, #254	; 0xfe
   10718:	e0851001 	add	r1, r5, r1
	ctx->tstates += 3;
   1071c:	e2833003 	add	r3, r3, #3
   10720:	e5843040 	str	r3, [r4, #64]	; 0x40
	BR.L = doSetRes(ctx, SR_RES, 0, read8(ctx, WR.IX + off));
   10724:	e5c42006 	strb	r2, [r4, #6]
	ctx->memWrite(ctx->memParam, addr, val);	
   10728:	e5943028 	ldr	r3, [r4, #40]	; 0x28
   1072c:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   10730:	e6ff1071 	uxth	r1, r1
}
   10734:	e8bd4070 	pop	{r4, r5, r6, lr}
   10738:	e12fff13 	bx	r3

0001073c <LD_L_RES_0_off_IY_d>:


static void LD_L_RES_0_off_IY_d (Z80Context* ctx)
{
	ctx->tstates += 2;
	char off = read8(ctx, ctx->PC++);
   1073c:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
   10740:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	char off = read8(ctx, ctx->PC++);
   10744:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
   10748:	e2833005 	add	r3, r3, #5
{
   1074c:	e92d4070 	push	{r4, r5, r6, lr}
   10750:	e1a04000 	mov	r4, r0
	char off = read8(ctx, ctx->PC++);
   10754:	e1c021bc 	strh	r2, [r0, #28]
   10758:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   1075c:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   10760:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   10764:	e12fff33 	blx	r3
	ctx->tstates += 3;
   10768:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	BR.L = doSetRes(ctx, SR_RES, 0, read8(ctx, WR.IY + off));
   1076c:	e1d410ba 	ldrh	r1, [r4, #10]
   10770:	e6ff5070 	uxth	r5, r0
   10774:	e2833003 	add	r3, r3, #3
   10778:	e0851001 	add	r1, r5, r1
   1077c:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   10780:	e6ff1071 	uxth	r1, r1
   10784:	e5943024 	ldr	r3, [r4, #36]	; 0x24
   10788:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   1078c:	e12fff33 	blx	r3
	ctx->tstates += 3;
   10790:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	write8(ctx, WR.IY + off, BR.L);	
   10794:	e1d410ba 	ldrh	r1, [r4, #10]
		val &= ~(1 << pos);
   10798:	e20020fe 	and	r2, r0, #254	; 0xfe
   1079c:	e0851001 	add	r1, r5, r1
	ctx->tstates += 3;
   107a0:	e2833003 	add	r3, r3, #3
   107a4:	e5843040 	str	r3, [r4, #64]	; 0x40
	BR.L = doSetRes(ctx, SR_RES, 0, read8(ctx, WR.IY + off));
   107a8:	e5c42006 	strb	r2, [r4, #6]
	ctx->memWrite(ctx->memParam, addr, val);	
   107ac:	e5943028 	ldr	r3, [r4, #40]	; 0x28
   107b0:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   107b4:	e6ff1071 	uxth	r1, r1
}
   107b8:	e8bd4070 	pop	{r4, r5, r6, lr}
   107bc:	e12fff13 	bx	r3

000107c0 <LD_L_RES_1_off_IX_d>:


static void LD_L_RES_1_off_IX_d (Z80Context* ctx)
{
	ctx->tstates += 2;
	char off = read8(ctx, ctx->PC++);
   107c0:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
   107c4:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	char off = read8(ctx, ctx->PC++);
   107c8:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
   107cc:	e2833005 	add	r3, r3, #5
{
   107d0:	e92d4070 	push	{r4, r5, r6, lr}
   107d4:	e1a04000 	mov	r4, r0
	char off = read8(ctx, ctx->PC++);
   107d8:	e1c021bc 	strh	r2, [r0, #28]
   107dc:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   107e0:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   107e4:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   107e8:	e12fff33 	blx	r3
	ctx->tstates += 3;
   107ec:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	BR.L = doSetRes(ctx, SR_RES, 1, read8(ctx, WR.IX + off));
   107f0:	e1d410b8 	ldrh	r1, [r4, #8]
   107f4:	e6ff5070 	uxth	r5, r0
   107f8:	e2833003 	add	r3, r3, #3
   107fc:	e0851001 	add	r1, r5, r1
   10800:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   10804:	e6ff1071 	uxth	r1, r1
   10808:	e5943024 	ldr	r3, [r4, #36]	; 0x24
   1080c:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   10810:	e12fff33 	blx	r3
	ctx->tstates += 3;
   10814:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	write8(ctx, WR.IX + off, BR.L);	
   10818:	e1d410b8 	ldrh	r1, [r4, #8]
		val &= ~(1 << pos);
   1081c:	e20020fd 	and	r2, r0, #253	; 0xfd
   10820:	e0851001 	add	r1, r5, r1
	ctx->tstates += 3;
   10824:	e2833003 	add	r3, r3, #3
   10828:	e5843040 	str	r3, [r4, #64]	; 0x40
	BR.L = doSetRes(ctx, SR_RES, 1, read8(ctx, WR.IX + off));
   1082c:	e5c42006 	strb	r2, [r4, #6]
	ctx->memWrite(ctx->memParam, addr, val);	
   10830:	e5943028 	ldr	r3, [r4, #40]	; 0x28
   10834:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   10838:	e6ff1071 	uxth	r1, r1
}
   1083c:	e8bd4070 	pop	{r4, r5, r6, lr}
   10840:	e12fff13 	bx	r3

00010844 <LD_L_RES_1_off_IY_d>:


static void LD_L_RES_1_off_IY_d (Z80Context* ctx)
{
	ctx->tstates += 2;
	char off = read8(ctx, ctx->PC++);
   10844:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
   10848:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	char off = read8(ctx, ctx->PC++);
   1084c:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
   10850:	e2833005 	add	r3, r3, #5
{
   10854:	e92d4070 	push	{r4, r5, r6, lr}
   10858:	e1a04000 	mov	r4, r0
	char off = read8(ctx, ctx->PC++);
   1085c:	e1c021bc 	strh	r2, [r0, #28]
   10860:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   10864:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   10868:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   1086c:	e12fff33 	blx	r3
	ctx->tstates += 3;
   10870:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	BR.L = doSetRes(ctx, SR_RES, 1, read8(ctx, WR.IY + off));
   10874:	e1d410ba 	ldrh	r1, [r4, #10]
   10878:	e6ff5070 	uxth	r5, r0
   1087c:	e2833003 	add	r3, r3, #3
   10880:	e0851001 	add	r1, r5, r1
   10884:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   10888:	e6ff1071 	uxth	r1, r1
   1088c:	e5943024 	ldr	r3, [r4, #36]	; 0x24
   10890:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   10894:	e12fff33 	blx	r3
	ctx->tstates += 3;
   10898:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	write8(ctx, WR.IY + off, BR.L);	
   1089c:	e1d410ba 	ldrh	r1, [r4, #10]
		val &= ~(1 << pos);
   108a0:	e20020fd 	and	r2, r0, #253	; 0xfd
   108a4:	e0851001 	add	r1, r5, r1
	ctx->tstates += 3;
   108a8:	e2833003 	add	r3, r3, #3
   108ac:	e5843040 	str	r3, [r4, #64]	; 0x40
	BR.L = doSetRes(ctx, SR_RES, 1, read8(ctx, WR.IY + off));
   108b0:	e5c42006 	strb	r2, [r4, #6]
	ctx->memWrite(ctx->memParam, addr, val);	
   108b4:	e5943028 	ldr	r3, [r4, #40]	; 0x28
   108b8:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   108bc:	e6ff1071 	uxth	r1, r1
}
   108c0:	e8bd4070 	pop	{r4, r5, r6, lr}
   108c4:	e12fff13 	bx	r3

000108c8 <LD_L_RES_2_off_IX_d>:


static void LD_L_RES_2_off_IX_d (Z80Context* ctx)
{
	ctx->tstates += 2;
	char off = read8(ctx, ctx->PC++);
   108c8:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
   108cc:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	char off = read8(ctx, ctx->PC++);
   108d0:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
   108d4:	e2833005 	add	r3, r3, #5
{
   108d8:	e92d4070 	push	{r4, r5, r6, lr}
   108dc:	e1a04000 	mov	r4, r0
	char off = read8(ctx, ctx->PC++);
   108e0:	e1c021bc 	strh	r2, [r0, #28]
   108e4:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   108e8:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   108ec:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   108f0:	e12fff33 	blx	r3
	ctx->tstates += 3;
   108f4:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	BR.L = doSetRes(ctx, SR_RES, 2, read8(ctx, WR.IX + off));
   108f8:	e1d410b8 	ldrh	r1, [r4, #8]
   108fc:	e6ff5070 	uxth	r5, r0
   10900:	e2833003 	add	r3, r3, #3
   10904:	e0851001 	add	r1, r5, r1
   10908:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   1090c:	e6ff1071 	uxth	r1, r1
   10910:	e5943024 	ldr	r3, [r4, #36]	; 0x24
   10914:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   10918:	e12fff33 	blx	r3
	ctx->tstates += 3;
   1091c:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	write8(ctx, WR.IX + off, BR.L);	
   10920:	e1d410b8 	ldrh	r1, [r4, #8]
		val &= ~(1 << pos);
   10924:	e20020fb 	and	r2, r0, #251	; 0xfb
   10928:	e0851001 	add	r1, r5, r1
	ctx->tstates += 3;
   1092c:	e2833003 	add	r3, r3, #3
   10930:	e5843040 	str	r3, [r4, #64]	; 0x40
	BR.L = doSetRes(ctx, SR_RES, 2, read8(ctx, WR.IX + off));
   10934:	e5c42006 	strb	r2, [r4, #6]
	ctx->memWrite(ctx->memParam, addr, val);	
   10938:	e5943028 	ldr	r3, [r4, #40]	; 0x28
   1093c:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   10940:	e6ff1071 	uxth	r1, r1
}
   10944:	e8bd4070 	pop	{r4, r5, r6, lr}
   10948:	e12fff13 	bx	r3

0001094c <LD_L_RES_2_off_IY_d>:


static void LD_L_RES_2_off_IY_d (Z80Context* ctx)
{
	ctx->tstates += 2;
	char off = read8(ctx, ctx->PC++);
   1094c:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
   10950:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	char off = read8(ctx, ctx->PC++);
   10954:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
   10958:	e2833005 	add	r3, r3, #5
{
   1095c:	e92d4070 	push	{r4, r5, r6, lr}
   10960:	e1a04000 	mov	r4, r0
	char off = read8(ctx, ctx->PC++);
   10964:	e1c021bc 	strh	r2, [r0, #28]
   10968:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   1096c:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   10970:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   10974:	e12fff33 	blx	r3
	ctx->tstates += 3;
   10978:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	BR.L = doSetRes(ctx, SR_RES, 2, read8(ctx, WR.IY + off));
   1097c:	e1d410ba 	ldrh	r1, [r4, #10]
   10980:	e6ff5070 	uxth	r5, r0
   10984:	e2833003 	add	r3, r3, #3
   10988:	e0851001 	add	r1, r5, r1
   1098c:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   10990:	e6ff1071 	uxth	r1, r1
   10994:	e5943024 	ldr	r3, [r4, #36]	; 0x24
   10998:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   1099c:	e12fff33 	blx	r3
	ctx->tstates += 3;
   109a0:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	write8(ctx, WR.IY + off, BR.L);	
   109a4:	e1d410ba 	ldrh	r1, [r4, #10]
		val &= ~(1 << pos);
   109a8:	e20020fb 	and	r2, r0, #251	; 0xfb
   109ac:	e0851001 	add	r1, r5, r1
	ctx->tstates += 3;
   109b0:	e2833003 	add	r3, r3, #3
   109b4:	e5843040 	str	r3, [r4, #64]	; 0x40
	BR.L = doSetRes(ctx, SR_RES, 2, read8(ctx, WR.IY + off));
   109b8:	e5c42006 	strb	r2, [r4, #6]
	ctx->memWrite(ctx->memParam, addr, val);	
   109bc:	e5943028 	ldr	r3, [r4, #40]	; 0x28
   109c0:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   109c4:	e6ff1071 	uxth	r1, r1
}
   109c8:	e8bd4070 	pop	{r4, r5, r6, lr}
   109cc:	e12fff13 	bx	r3

000109d0 <LD_L_RES_3_off_IX_d>:


static void LD_L_RES_3_off_IX_d (Z80Context* ctx)
{
	ctx->tstates += 2;
	char off = read8(ctx, ctx->PC++);
   109d0:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
   109d4:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	char off = read8(ctx, ctx->PC++);
   109d8:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
   109dc:	e2833005 	add	r3, r3, #5
{
   109e0:	e92d4070 	push	{r4, r5, r6, lr}
   109e4:	e1a04000 	mov	r4, r0
	char off = read8(ctx, ctx->PC++);
   109e8:	e1c021bc 	strh	r2, [r0, #28]
   109ec:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   109f0:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   109f4:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   109f8:	e12fff33 	blx	r3
	ctx->tstates += 3;
   109fc:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	BR.L = doSetRes(ctx, SR_RES, 3, read8(ctx, WR.IX + off));
   10a00:	e1d410b8 	ldrh	r1, [r4, #8]
   10a04:	e6ff5070 	uxth	r5, r0
   10a08:	e2833003 	add	r3, r3, #3
   10a0c:	e0851001 	add	r1, r5, r1
   10a10:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   10a14:	e6ff1071 	uxth	r1, r1
   10a18:	e5943024 	ldr	r3, [r4, #36]	; 0x24
   10a1c:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   10a20:	e12fff33 	blx	r3
	ctx->tstates += 3;
   10a24:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	write8(ctx, WR.IX + off, BR.L);	
   10a28:	e1d410b8 	ldrh	r1, [r4, #8]
		val &= ~(1 << pos);
   10a2c:	e20020f7 	and	r2, r0, #247	; 0xf7
   10a30:	e0851001 	add	r1, r5, r1
	ctx->tstates += 3;
   10a34:	e2833003 	add	r3, r3, #3
   10a38:	e5843040 	str	r3, [r4, #64]	; 0x40
	BR.L = doSetRes(ctx, SR_RES, 3, read8(ctx, WR.IX + off));
   10a3c:	e5c42006 	strb	r2, [r4, #6]
	ctx->memWrite(ctx->memParam, addr, val);	
   10a40:	e5943028 	ldr	r3, [r4, #40]	; 0x28
   10a44:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   10a48:	e6ff1071 	uxth	r1, r1
}
   10a4c:	e8bd4070 	pop	{r4, r5, r6, lr}
   10a50:	e12fff13 	bx	r3

00010a54 <LD_L_RES_3_off_IY_d>:


static void LD_L_RES_3_off_IY_d (Z80Context* ctx)
{
	ctx->tstates += 2;
	char off = read8(ctx, ctx->PC++);
   10a54:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
   10a58:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	char off = read8(ctx, ctx->PC++);
   10a5c:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
   10a60:	e2833005 	add	r3, r3, #5
{
   10a64:	e92d4070 	push	{r4, r5, r6, lr}
   10a68:	e1a04000 	mov	r4, r0
	char off = read8(ctx, ctx->PC++);
   10a6c:	e1c021bc 	strh	r2, [r0, #28]
   10a70:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   10a74:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   10a78:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   10a7c:	e12fff33 	blx	r3
	ctx->tstates += 3;
   10a80:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	BR.L = doSetRes(ctx, SR_RES, 3, read8(ctx, WR.IY + off));
   10a84:	e1d410ba 	ldrh	r1, [r4, #10]
   10a88:	e6ff5070 	uxth	r5, r0
   10a8c:	e2833003 	add	r3, r3, #3
   10a90:	e0851001 	add	r1, r5, r1
   10a94:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   10a98:	e6ff1071 	uxth	r1, r1
   10a9c:	e5943024 	ldr	r3, [r4, #36]	; 0x24
   10aa0:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   10aa4:	e12fff33 	blx	r3
	ctx->tstates += 3;
   10aa8:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	write8(ctx, WR.IY + off, BR.L);	
   10aac:	e1d410ba 	ldrh	r1, [r4, #10]
		val &= ~(1 << pos);
   10ab0:	e20020f7 	and	r2, r0, #247	; 0xf7
   10ab4:	e0851001 	add	r1, r5, r1
	ctx->tstates += 3;
   10ab8:	e2833003 	add	r3, r3, #3
   10abc:	e5843040 	str	r3, [r4, #64]	; 0x40
	BR.L = doSetRes(ctx, SR_RES, 3, read8(ctx, WR.IY + off));
   10ac0:	e5c42006 	strb	r2, [r4, #6]
	ctx->memWrite(ctx->memParam, addr, val);	
   10ac4:	e5943028 	ldr	r3, [r4, #40]	; 0x28
   10ac8:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   10acc:	e6ff1071 	uxth	r1, r1
}
   10ad0:	e8bd4070 	pop	{r4, r5, r6, lr}
   10ad4:	e12fff13 	bx	r3

00010ad8 <LD_L_RES_4_off_IX_d>:


static void LD_L_RES_4_off_IX_d (Z80Context* ctx)
{
	ctx->tstates += 2;
	char off = read8(ctx, ctx->PC++);
   10ad8:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
   10adc:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	char off = read8(ctx, ctx->PC++);
   10ae0:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
   10ae4:	e2833005 	add	r3, r3, #5
{
   10ae8:	e92d4070 	push	{r4, r5, r6, lr}
   10aec:	e1a04000 	mov	r4, r0
	char off = read8(ctx, ctx->PC++);
   10af0:	e1c021bc 	strh	r2, [r0, #28]
   10af4:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   10af8:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   10afc:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   10b00:	e12fff33 	blx	r3
	ctx->tstates += 3;
   10b04:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	BR.L = doSetRes(ctx, SR_RES, 4, read8(ctx, WR.IX + off));
   10b08:	e1d410b8 	ldrh	r1, [r4, #8]
   10b0c:	e6ff5070 	uxth	r5, r0
   10b10:	e2833003 	add	r3, r3, #3
   10b14:	e0851001 	add	r1, r5, r1
   10b18:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   10b1c:	e6ff1071 	uxth	r1, r1
   10b20:	e5943024 	ldr	r3, [r4, #36]	; 0x24
   10b24:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   10b28:	e12fff33 	blx	r3
	ctx->tstates += 3;
   10b2c:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	write8(ctx, WR.IX + off, BR.L);	
   10b30:	e1d410b8 	ldrh	r1, [r4, #8]
		val &= ~(1 << pos);
   10b34:	e20020ef 	and	r2, r0, #239	; 0xef
   10b38:	e0851001 	add	r1, r5, r1
	ctx->tstates += 3;
   10b3c:	e2833003 	add	r3, r3, #3
   10b40:	e5843040 	str	r3, [r4, #64]	; 0x40
	BR.L = doSetRes(ctx, SR_RES, 4, read8(ctx, WR.IX + off));
   10b44:	e5c42006 	strb	r2, [r4, #6]
	ctx->memWrite(ctx->memParam, addr, val);	
   10b48:	e5943028 	ldr	r3, [r4, #40]	; 0x28
   10b4c:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   10b50:	e6ff1071 	uxth	r1, r1
}
   10b54:	e8bd4070 	pop	{r4, r5, r6, lr}
   10b58:	e12fff13 	bx	r3

00010b5c <LD_L_RES_4_off_IY_d>:


static void LD_L_RES_4_off_IY_d (Z80Context* ctx)
{
	ctx->tstates += 2;
	char off = read8(ctx, ctx->PC++);
   10b5c:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
   10b60:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	char off = read8(ctx, ctx->PC++);
   10b64:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
   10b68:	e2833005 	add	r3, r3, #5
{
   10b6c:	e92d4070 	push	{r4, r5, r6, lr}
   10b70:	e1a04000 	mov	r4, r0
	char off = read8(ctx, ctx->PC++);
   10b74:	e1c021bc 	strh	r2, [r0, #28]
   10b78:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   10b7c:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   10b80:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   10b84:	e12fff33 	blx	r3
	ctx->tstates += 3;
   10b88:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	BR.L = doSetRes(ctx, SR_RES, 4, read8(ctx, WR.IY + off));
   10b8c:	e1d410ba 	ldrh	r1, [r4, #10]
   10b90:	e6ff5070 	uxth	r5, r0
   10b94:	e2833003 	add	r3, r3, #3
   10b98:	e0851001 	add	r1, r5, r1
   10b9c:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   10ba0:	e6ff1071 	uxth	r1, r1
   10ba4:	e5943024 	ldr	r3, [r4, #36]	; 0x24
   10ba8:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   10bac:	e12fff33 	blx	r3
	ctx->tstates += 3;
   10bb0:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	write8(ctx, WR.IY + off, BR.L);	
   10bb4:	e1d410ba 	ldrh	r1, [r4, #10]
		val &= ~(1 << pos);
   10bb8:	e20020ef 	and	r2, r0, #239	; 0xef
   10bbc:	e0851001 	add	r1, r5, r1
	ctx->tstates += 3;
   10bc0:	e2833003 	add	r3, r3, #3
   10bc4:	e5843040 	str	r3, [r4, #64]	; 0x40
	BR.L = doSetRes(ctx, SR_RES, 4, read8(ctx, WR.IY + off));
   10bc8:	e5c42006 	strb	r2, [r4, #6]
	ctx->memWrite(ctx->memParam, addr, val);	
   10bcc:	e5943028 	ldr	r3, [r4, #40]	; 0x28
   10bd0:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   10bd4:	e6ff1071 	uxth	r1, r1
}
   10bd8:	e8bd4070 	pop	{r4, r5, r6, lr}
   10bdc:	e12fff13 	bx	r3

00010be0 <LD_L_RES_5_off_IX_d>:


static void LD_L_RES_5_off_IX_d (Z80Context* ctx)
{
	ctx->tstates += 2;
	char off = read8(ctx, ctx->PC++);
   10be0:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
   10be4:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	char off = read8(ctx, ctx->PC++);
   10be8:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
   10bec:	e2833005 	add	r3, r3, #5
{
   10bf0:	e92d4070 	push	{r4, r5, r6, lr}
   10bf4:	e1a04000 	mov	r4, r0
	char off = read8(ctx, ctx->PC++);
   10bf8:	e1c021bc 	strh	r2, [r0, #28]
   10bfc:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   10c00:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   10c04:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   10c08:	e12fff33 	blx	r3
	ctx->tstates += 3;
   10c0c:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	BR.L = doSetRes(ctx, SR_RES, 5, read8(ctx, WR.IX + off));
   10c10:	e1d410b8 	ldrh	r1, [r4, #8]
   10c14:	e6ff5070 	uxth	r5, r0
   10c18:	e2833003 	add	r3, r3, #3
   10c1c:	e0851001 	add	r1, r5, r1
   10c20:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   10c24:	e6ff1071 	uxth	r1, r1
   10c28:	e5943024 	ldr	r3, [r4, #36]	; 0x24
   10c2c:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   10c30:	e12fff33 	blx	r3
	ctx->tstates += 3;
   10c34:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	write8(ctx, WR.IX + off, BR.L);	
   10c38:	e1d410b8 	ldrh	r1, [r4, #8]
		val &= ~(1 << pos);
   10c3c:	e20020df 	and	r2, r0, #223	; 0xdf
   10c40:	e0851001 	add	r1, r5, r1
	ctx->tstates += 3;
   10c44:	e2833003 	add	r3, r3, #3
   10c48:	e5843040 	str	r3, [r4, #64]	; 0x40
	BR.L = doSetRes(ctx, SR_RES, 5, read8(ctx, WR.IX + off));
   10c4c:	e5c42006 	strb	r2, [r4, #6]
	ctx->memWrite(ctx->memParam, addr, val);	
   10c50:	e5943028 	ldr	r3, [r4, #40]	; 0x28
   10c54:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   10c58:	e6ff1071 	uxth	r1, r1
}
   10c5c:	e8bd4070 	pop	{r4, r5, r6, lr}
   10c60:	e12fff13 	bx	r3

00010c64 <LD_L_RES_5_off_IY_d>:


static void LD_L_RES_5_off_IY_d (Z80Context* ctx)
{
	ctx->tstates += 2;
	char off = read8(ctx, ctx->PC++);
   10c64:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
   10c68:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	char off = read8(ctx, ctx->PC++);
   10c6c:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
   10c70:	e2833005 	add	r3, r3, #5
{
   10c74:	e92d4070 	push	{r4, r5, r6, lr}
   10c78:	e1a04000 	mov	r4, r0
	char off = read8(ctx, ctx->PC++);
   10c7c:	e1c021bc 	strh	r2, [r0, #28]
   10c80:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   10c84:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   10c88:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   10c8c:	e12fff33 	blx	r3
	ctx->tstates += 3;
   10c90:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	BR.L = doSetRes(ctx, SR_RES, 5, read8(ctx, WR.IY + off));
   10c94:	e1d410ba 	ldrh	r1, [r4, #10]
   10c98:	e6ff5070 	uxth	r5, r0
   10c9c:	e2833003 	add	r3, r3, #3
   10ca0:	e0851001 	add	r1, r5, r1
   10ca4:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   10ca8:	e6ff1071 	uxth	r1, r1
   10cac:	e5943024 	ldr	r3, [r4, #36]	; 0x24
   10cb0:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   10cb4:	e12fff33 	blx	r3
	ctx->tstates += 3;
   10cb8:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	write8(ctx, WR.IY + off, BR.L);	
   10cbc:	e1d410ba 	ldrh	r1, [r4, #10]
		val &= ~(1 << pos);
   10cc0:	e20020df 	and	r2, r0, #223	; 0xdf
   10cc4:	e0851001 	add	r1, r5, r1
	ctx->tstates += 3;
   10cc8:	e2833003 	add	r3, r3, #3
   10ccc:	e5843040 	str	r3, [r4, #64]	; 0x40
	BR.L = doSetRes(ctx, SR_RES, 5, read8(ctx, WR.IY + off));
   10cd0:	e5c42006 	strb	r2, [r4, #6]
	ctx->memWrite(ctx->memParam, addr, val);	
   10cd4:	e5943028 	ldr	r3, [r4, #40]	; 0x28
   10cd8:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   10cdc:	e6ff1071 	uxth	r1, r1
}
   10ce0:	e8bd4070 	pop	{r4, r5, r6, lr}
   10ce4:	e12fff13 	bx	r3

00010ce8 <LD_L_RES_6_off_IX_d>:


static void LD_L_RES_6_off_IX_d (Z80Context* ctx)
{
	ctx->tstates += 2;
	char off = read8(ctx, ctx->PC++);
   10ce8:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
   10cec:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	char off = read8(ctx, ctx->PC++);
   10cf0:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
   10cf4:	e2833005 	add	r3, r3, #5
{
   10cf8:	e92d4070 	push	{r4, r5, r6, lr}
   10cfc:	e1a04000 	mov	r4, r0
	char off = read8(ctx, ctx->PC++);
   10d00:	e1c021bc 	strh	r2, [r0, #28]
   10d04:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   10d08:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   10d0c:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   10d10:	e12fff33 	blx	r3
	ctx->tstates += 3;
   10d14:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	BR.L = doSetRes(ctx, SR_RES, 6, read8(ctx, WR.IX + off));
   10d18:	e1d410b8 	ldrh	r1, [r4, #8]
   10d1c:	e6ff5070 	uxth	r5, r0
   10d20:	e2833003 	add	r3, r3, #3
   10d24:	e0851001 	add	r1, r5, r1
   10d28:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   10d2c:	e6ff1071 	uxth	r1, r1
   10d30:	e5943024 	ldr	r3, [r4, #36]	; 0x24
   10d34:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   10d38:	e12fff33 	blx	r3
	ctx->tstates += 3;
   10d3c:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	write8(ctx, WR.IX + off, BR.L);	
   10d40:	e1d410b8 	ldrh	r1, [r4, #8]
		val &= ~(1 << pos);
   10d44:	e20020bf 	and	r2, r0, #191	; 0xbf
   10d48:	e0851001 	add	r1, r5, r1
	ctx->tstates += 3;
   10d4c:	e2833003 	add	r3, r3, #3
   10d50:	e5843040 	str	r3, [r4, #64]	; 0x40
	BR.L = doSetRes(ctx, SR_RES, 6, read8(ctx, WR.IX + off));
   10d54:	e5c42006 	strb	r2, [r4, #6]
	ctx->memWrite(ctx->memParam, addr, val);	
   10d58:	e5943028 	ldr	r3, [r4, #40]	; 0x28
   10d5c:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   10d60:	e6ff1071 	uxth	r1, r1
}
   10d64:	e8bd4070 	pop	{r4, r5, r6, lr}
   10d68:	e12fff13 	bx	r3

00010d6c <LD_L_RES_6_off_IY_d>:


static void LD_L_RES_6_off_IY_d (Z80Context* ctx)
{
	ctx->tstates += 2;
	char off = read8(ctx, ctx->PC++);
   10d6c:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
   10d70:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	char off = read8(ctx, ctx->PC++);
   10d74:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
   10d78:	e2833005 	add	r3, r3, #5
{
   10d7c:	e92d4070 	push	{r4, r5, r6, lr}
   10d80:	e1a04000 	mov	r4, r0
	char off = read8(ctx, ctx->PC++);
   10d84:	e1c021bc 	strh	r2, [r0, #28]
   10d88:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   10d8c:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   10d90:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   10d94:	e12fff33 	blx	r3
	ctx->tstates += 3;
   10d98:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	BR.L = doSetRes(ctx, SR_RES, 6, read8(ctx, WR.IY + off));
   10d9c:	e1d410ba 	ldrh	r1, [r4, #10]
   10da0:	e6ff5070 	uxth	r5, r0
   10da4:	e2833003 	add	r3, r3, #3
   10da8:	e0851001 	add	r1, r5, r1
   10dac:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   10db0:	e6ff1071 	uxth	r1, r1
   10db4:	e5943024 	ldr	r3, [r4, #36]	; 0x24
   10db8:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   10dbc:	e12fff33 	blx	r3
	ctx->tstates += 3;
   10dc0:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	write8(ctx, WR.IY + off, BR.L);	
   10dc4:	e1d410ba 	ldrh	r1, [r4, #10]
		val &= ~(1 << pos);
   10dc8:	e20020bf 	and	r2, r0, #191	; 0xbf
   10dcc:	e0851001 	add	r1, r5, r1
	ctx->tstates += 3;
   10dd0:	e2833003 	add	r3, r3, #3
   10dd4:	e5843040 	str	r3, [r4, #64]	; 0x40
	BR.L = doSetRes(ctx, SR_RES, 6, read8(ctx, WR.IY + off));
   10dd8:	e5c42006 	strb	r2, [r4, #6]
	ctx->memWrite(ctx->memParam, addr, val);	
   10ddc:	e5943028 	ldr	r3, [r4, #40]	; 0x28
   10de0:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   10de4:	e6ff1071 	uxth	r1, r1
}
   10de8:	e8bd4070 	pop	{r4, r5, r6, lr}
   10dec:	e12fff13 	bx	r3

00010df0 <LD_L_RES_7_off_IX_d>:


static void LD_L_RES_7_off_IX_d (Z80Context* ctx)
{
	ctx->tstates += 2;
	char off = read8(ctx, ctx->PC++);
   10df0:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
   10df4:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	char off = read8(ctx, ctx->PC++);
   10df8:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
   10dfc:	e2833005 	add	r3, r3, #5
{
   10e00:	e92d4070 	push	{r4, r5, r6, lr}
   10e04:	e1a04000 	mov	r4, r0
	char off = read8(ctx, ctx->PC++);
   10e08:	e1c021bc 	strh	r2, [r0, #28]
   10e0c:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   10e10:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   10e14:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   10e18:	e12fff33 	blx	r3
	ctx->tstates += 3;
   10e1c:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	BR.L = doSetRes(ctx, SR_RES, 7, read8(ctx, WR.IX + off));
   10e20:	e1d410b8 	ldrh	r1, [r4, #8]
   10e24:	e6ff5070 	uxth	r5, r0
   10e28:	e2833003 	add	r3, r3, #3
   10e2c:	e0851001 	add	r1, r5, r1
   10e30:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   10e34:	e6ff1071 	uxth	r1, r1
   10e38:	e5943024 	ldr	r3, [r4, #36]	; 0x24
   10e3c:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   10e40:	e12fff33 	blx	r3
	ctx->tstates += 3;
   10e44:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	write8(ctx, WR.IX + off, BR.L);	
   10e48:	e1d410b8 	ldrh	r1, [r4, #8]
		val &= ~(1 << pos);
   10e4c:	e200207f 	and	r2, r0, #127	; 0x7f
   10e50:	e0851001 	add	r1, r5, r1
	ctx->tstates += 3;
   10e54:	e2833003 	add	r3, r3, #3
   10e58:	e5843040 	str	r3, [r4, #64]	; 0x40
	BR.L = doSetRes(ctx, SR_RES, 7, read8(ctx, WR.IX + off));
   10e5c:	e5c42006 	strb	r2, [r4, #6]
	ctx->memWrite(ctx->memParam, addr, val);	
   10e60:	e5943028 	ldr	r3, [r4, #40]	; 0x28
   10e64:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   10e68:	e6ff1071 	uxth	r1, r1
}
   10e6c:	e8bd4070 	pop	{r4, r5, r6, lr}
   10e70:	e12fff13 	bx	r3

00010e74 <LD_L_RES_7_off_IY_d>:


static void LD_L_RES_7_off_IY_d (Z80Context* ctx)
{
	ctx->tstates += 2;
	char off = read8(ctx, ctx->PC++);
   10e74:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
   10e78:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	char off = read8(ctx, ctx->PC++);
   10e7c:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
   10e80:	e2833005 	add	r3, r3, #5
{
   10e84:	e92d4070 	push	{r4, r5, r6, lr}
   10e88:	e1a04000 	mov	r4, r0
	char off = read8(ctx, ctx->PC++);
   10e8c:	e1c021bc 	strh	r2, [r0, #28]
   10e90:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   10e94:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   10e98:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   10e9c:	e12fff33 	blx	r3
	ctx->tstates += 3;
   10ea0:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	BR.L = doSetRes(ctx, SR_RES, 7, read8(ctx, WR.IY + off));
   10ea4:	e1d410ba 	ldrh	r1, [r4, #10]
   10ea8:	e6ff5070 	uxth	r5, r0
   10eac:	e2833003 	add	r3, r3, #3
   10eb0:	e0851001 	add	r1, r5, r1
   10eb4:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   10eb8:	e6ff1071 	uxth	r1, r1
   10ebc:	e5943024 	ldr	r3, [r4, #36]	; 0x24
   10ec0:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   10ec4:	e12fff33 	blx	r3
	ctx->tstates += 3;
   10ec8:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	write8(ctx, WR.IY + off, BR.L);	
   10ecc:	e1d410ba 	ldrh	r1, [r4, #10]
		val &= ~(1 << pos);
   10ed0:	e200207f 	and	r2, r0, #127	; 0x7f
   10ed4:	e0851001 	add	r1, r5, r1
	ctx->tstates += 3;
   10ed8:	e2833003 	add	r3, r3, #3
   10edc:	e5843040 	str	r3, [r4, #64]	; 0x40
	BR.L = doSetRes(ctx, SR_RES, 7, read8(ctx, WR.IY + off));
   10ee0:	e5c42006 	strb	r2, [r4, #6]
	ctx->memWrite(ctx->memParam, addr, val);	
   10ee4:	e5943028 	ldr	r3, [r4, #40]	; 0x28
   10ee8:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   10eec:	e6ff1071 	uxth	r1, r1
}
   10ef0:	e8bd4070 	pop	{r4, r5, r6, lr}
   10ef4:	e12fff13 	bx	r3

00010ef8 <LD_L_SET_0_off_IX_d>:


static void LD_L_SET_0_off_IX_d (Z80Context* ctx)
{
	ctx->tstates += 2;
	char off = read8(ctx, ctx->PC++);
   10ef8:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
   10efc:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	char off = read8(ctx, ctx->PC++);
   10f00:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
   10f04:	e2833005 	add	r3, r3, #5
{
   10f08:	e92d4070 	push	{r4, r5, r6, lr}
   10f0c:	e1a04000 	mov	r4, r0
	char off = read8(ctx, ctx->PC++);
   10f10:	e1c021bc 	strh	r2, [r0, #28]
   10f14:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   10f18:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   10f1c:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   10f20:	e12fff33 	blx	r3
	ctx->tstates += 3;
   10f24:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	BR.L = doSetRes(ctx, SR_SET, 0, read8(ctx, WR.IX + off));
   10f28:	e1d410b8 	ldrh	r1, [r4, #8]
   10f2c:	e6ff5070 	uxth	r5, r0
   10f30:	e2833003 	add	r3, r3, #3
   10f34:	e0851001 	add	r1, r5, r1
   10f38:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   10f3c:	e6ff1071 	uxth	r1, r1
   10f40:	e5943024 	ldr	r3, [r4, #36]	; 0x24
   10f44:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   10f48:	e12fff33 	blx	r3
	ctx->tstates += 3;
   10f4c:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	write8(ctx, WR.IX + off, BR.L);	
   10f50:	e1d410b8 	ldrh	r1, [r4, #8]
		val |= (1 << pos);
   10f54:	e3802001 	orr	r2, r0, #1
   10f58:	e0851001 	add	r1, r5, r1
	ctx->tstates += 3;
   10f5c:	e2833003 	add	r3, r3, #3
		val |= (1 << pos);
   10f60:	e6ef2072 	uxtb	r2, r2
	ctx->tstates += 3;
   10f64:	e5843040 	str	r3, [r4, #64]	; 0x40
	BR.L = doSetRes(ctx, SR_SET, 0, read8(ctx, WR.IX + off));
   10f68:	e5c42006 	strb	r2, [r4, #6]
	ctx->memWrite(ctx->memParam, addr, val);	
   10f6c:	e5943028 	ldr	r3, [r4, #40]	; 0x28
   10f70:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   10f74:	e6ff1071 	uxth	r1, r1
}
   10f78:	e8bd4070 	pop	{r4, r5, r6, lr}
   10f7c:	e12fff13 	bx	r3

00010f80 <LD_L_SET_0_off_IY_d>:


static void LD_L_SET_0_off_IY_d (Z80Context* ctx)
{
	ctx->tstates += 2;
	char off = read8(ctx, ctx->PC++);
   10f80:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
   10f84:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	char off = read8(ctx, ctx->PC++);
   10f88:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
   10f8c:	e2833005 	add	r3, r3, #5
{
   10f90:	e92d4070 	push	{r4, r5, r6, lr}
   10f94:	e1a04000 	mov	r4, r0
	char off = read8(ctx, ctx->PC++);
   10f98:	e1c021bc 	strh	r2, [r0, #28]
   10f9c:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   10fa0:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   10fa4:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   10fa8:	e12fff33 	blx	r3
	ctx->tstates += 3;
   10fac:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	BR.L = doSetRes(ctx, SR_SET, 0, read8(ctx, WR.IY + off));
   10fb0:	e1d410ba 	ldrh	r1, [r4, #10]
   10fb4:	e6ff5070 	uxth	r5, r0
   10fb8:	e2833003 	add	r3, r3, #3
   10fbc:	e0851001 	add	r1, r5, r1
   10fc0:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   10fc4:	e6ff1071 	uxth	r1, r1
   10fc8:	e5943024 	ldr	r3, [r4, #36]	; 0x24
   10fcc:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   10fd0:	e12fff33 	blx	r3
	ctx->tstates += 3;
   10fd4:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	write8(ctx, WR.IY + off, BR.L);	
   10fd8:	e1d410ba 	ldrh	r1, [r4, #10]
		val |= (1 << pos);
   10fdc:	e3802001 	orr	r2, r0, #1
   10fe0:	e0851001 	add	r1, r5, r1
	ctx->tstates += 3;
   10fe4:	e2833003 	add	r3, r3, #3
		val |= (1 << pos);
   10fe8:	e6ef2072 	uxtb	r2, r2
	ctx->tstates += 3;
   10fec:	e5843040 	str	r3, [r4, #64]	; 0x40
	BR.L = doSetRes(ctx, SR_SET, 0, read8(ctx, WR.IY + off));
   10ff0:	e5c42006 	strb	r2, [r4, #6]
	ctx->memWrite(ctx->memParam, addr, val);	
   10ff4:	e5943028 	ldr	r3, [r4, #40]	; 0x28
   10ff8:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   10ffc:	e6ff1071 	uxth	r1, r1
}
   11000:	e8bd4070 	pop	{r4, r5, r6, lr}
   11004:	e12fff13 	bx	r3

00011008 <LD_L_SET_1_off_IX_d>:


static void LD_L_SET_1_off_IX_d (Z80Context* ctx)
{
	ctx->tstates += 2;
	char off = read8(ctx, ctx->PC++);
   11008:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
   1100c:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	char off = read8(ctx, ctx->PC++);
   11010:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
   11014:	e2833005 	add	r3, r3, #5
{
   11018:	e92d4070 	push	{r4, r5, r6, lr}
   1101c:	e1a04000 	mov	r4, r0
	char off = read8(ctx, ctx->PC++);
   11020:	e1c021bc 	strh	r2, [r0, #28]
   11024:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   11028:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   1102c:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   11030:	e12fff33 	blx	r3
	ctx->tstates += 3;
   11034:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	BR.L = doSetRes(ctx, SR_SET, 1, read8(ctx, WR.IX + off));
   11038:	e1d410b8 	ldrh	r1, [r4, #8]
   1103c:	e6ff5070 	uxth	r5, r0
   11040:	e2833003 	add	r3, r3, #3
   11044:	e0851001 	add	r1, r5, r1
   11048:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   1104c:	e6ff1071 	uxth	r1, r1
   11050:	e5943024 	ldr	r3, [r4, #36]	; 0x24
   11054:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   11058:	e12fff33 	blx	r3
	ctx->tstates += 3;
   1105c:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	write8(ctx, WR.IX + off, BR.L);	
   11060:	e1d410b8 	ldrh	r1, [r4, #8]
		val |= (1 << pos);
   11064:	e3802002 	orr	r2, r0, #2
   11068:	e0851001 	add	r1, r5, r1
	ctx->tstates += 3;
   1106c:	e2833003 	add	r3, r3, #3
		val |= (1 << pos);
   11070:	e6ef2072 	uxtb	r2, r2
	ctx->tstates += 3;
   11074:	e5843040 	str	r3, [r4, #64]	; 0x40
	BR.L = doSetRes(ctx, SR_SET, 1, read8(ctx, WR.IX + off));
   11078:	e5c42006 	strb	r2, [r4, #6]
	ctx->memWrite(ctx->memParam, addr, val);	
   1107c:	e5943028 	ldr	r3, [r4, #40]	; 0x28
   11080:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   11084:	e6ff1071 	uxth	r1, r1
}
   11088:	e8bd4070 	pop	{r4, r5, r6, lr}
   1108c:	e12fff13 	bx	r3

00011090 <LD_L_SET_1_off_IY_d>:


static void LD_L_SET_1_off_IY_d (Z80Context* ctx)
{
	ctx->tstates += 2;
	char off = read8(ctx, ctx->PC++);
   11090:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
   11094:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	char off = read8(ctx, ctx->PC++);
   11098:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
   1109c:	e2833005 	add	r3, r3, #5
{
   110a0:	e92d4070 	push	{r4, r5, r6, lr}
   110a4:	e1a04000 	mov	r4, r0
	char off = read8(ctx, ctx->PC++);
   110a8:	e1c021bc 	strh	r2, [r0, #28]
   110ac:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   110b0:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   110b4:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   110b8:	e12fff33 	blx	r3
	ctx->tstates += 3;
   110bc:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	BR.L = doSetRes(ctx, SR_SET, 1, read8(ctx, WR.IY + off));
   110c0:	e1d410ba 	ldrh	r1, [r4, #10]
   110c4:	e6ff5070 	uxth	r5, r0
   110c8:	e2833003 	add	r3, r3, #3
   110cc:	e0851001 	add	r1, r5, r1
   110d0:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   110d4:	e6ff1071 	uxth	r1, r1
   110d8:	e5943024 	ldr	r3, [r4, #36]	; 0x24
   110dc:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   110e0:	e12fff33 	blx	r3
	ctx->tstates += 3;
   110e4:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	write8(ctx, WR.IY + off, BR.L);	
   110e8:	e1d410ba 	ldrh	r1, [r4, #10]
		val |= (1 << pos);
   110ec:	e3802002 	orr	r2, r0, #2
   110f0:	e0851001 	add	r1, r5, r1
	ctx->tstates += 3;
   110f4:	e2833003 	add	r3, r3, #3
		val |= (1 << pos);
   110f8:	e6ef2072 	uxtb	r2, r2
	ctx->tstates += 3;
   110fc:	e5843040 	str	r3, [r4, #64]	; 0x40
	BR.L = doSetRes(ctx, SR_SET, 1, read8(ctx, WR.IY + off));
   11100:	e5c42006 	strb	r2, [r4, #6]
	ctx->memWrite(ctx->memParam, addr, val);	
   11104:	e5943028 	ldr	r3, [r4, #40]	; 0x28
   11108:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   1110c:	e6ff1071 	uxth	r1, r1
}
   11110:	e8bd4070 	pop	{r4, r5, r6, lr}
   11114:	e12fff13 	bx	r3

00011118 <LD_L_SET_2_off_IX_d>:


static void LD_L_SET_2_off_IX_d (Z80Context* ctx)
{
	ctx->tstates += 2;
	char off = read8(ctx, ctx->PC++);
   11118:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
   1111c:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	char off = read8(ctx, ctx->PC++);
   11120:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
   11124:	e2833005 	add	r3, r3, #5
{
   11128:	e92d4070 	push	{r4, r5, r6, lr}
   1112c:	e1a04000 	mov	r4, r0
	char off = read8(ctx, ctx->PC++);
   11130:	e1c021bc 	strh	r2, [r0, #28]
   11134:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   11138:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   1113c:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   11140:	e12fff33 	blx	r3
	ctx->tstates += 3;
   11144:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	BR.L = doSetRes(ctx, SR_SET, 2, read8(ctx, WR.IX + off));
   11148:	e1d410b8 	ldrh	r1, [r4, #8]
   1114c:	e6ff5070 	uxth	r5, r0
   11150:	e2833003 	add	r3, r3, #3
   11154:	e0851001 	add	r1, r5, r1
   11158:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   1115c:	e6ff1071 	uxth	r1, r1
   11160:	e5943024 	ldr	r3, [r4, #36]	; 0x24
   11164:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   11168:	e12fff33 	blx	r3
	ctx->tstates += 3;
   1116c:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	write8(ctx, WR.IX + off, BR.L);	
   11170:	e1d410b8 	ldrh	r1, [r4, #8]
		val |= (1 << pos);
   11174:	e3802004 	orr	r2, r0, #4
   11178:	e0851001 	add	r1, r5, r1
	ctx->tstates += 3;
   1117c:	e2833003 	add	r3, r3, #3
		val |= (1 << pos);
   11180:	e6ef2072 	uxtb	r2, r2
	ctx->tstates += 3;
   11184:	e5843040 	str	r3, [r4, #64]	; 0x40
	BR.L = doSetRes(ctx, SR_SET, 2, read8(ctx, WR.IX + off));
   11188:	e5c42006 	strb	r2, [r4, #6]
	ctx->memWrite(ctx->memParam, addr, val);	
   1118c:	e5943028 	ldr	r3, [r4, #40]	; 0x28
   11190:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   11194:	e6ff1071 	uxth	r1, r1
}
   11198:	e8bd4070 	pop	{r4, r5, r6, lr}
   1119c:	e12fff13 	bx	r3

000111a0 <LD_L_SET_2_off_IY_d>:


static void LD_L_SET_2_off_IY_d (Z80Context* ctx)
{
	ctx->tstates += 2;
	char off = read8(ctx, ctx->PC++);
   111a0:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
   111a4:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	char off = read8(ctx, ctx->PC++);
   111a8:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
   111ac:	e2833005 	add	r3, r3, #5
{
   111b0:	e92d4070 	push	{r4, r5, r6, lr}
   111b4:	e1a04000 	mov	r4, r0
	char off = read8(ctx, ctx->PC++);
   111b8:	e1c021bc 	strh	r2, [r0, #28]
   111bc:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   111c0:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   111c4:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   111c8:	e12fff33 	blx	r3
	ctx->tstates += 3;
   111cc:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	BR.L = doSetRes(ctx, SR_SET, 2, read8(ctx, WR.IY + off));
   111d0:	e1d410ba 	ldrh	r1, [r4, #10]
   111d4:	e6ff5070 	uxth	r5, r0
   111d8:	e2833003 	add	r3, r3, #3
   111dc:	e0851001 	add	r1, r5, r1
   111e0:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   111e4:	e6ff1071 	uxth	r1, r1
   111e8:	e5943024 	ldr	r3, [r4, #36]	; 0x24
   111ec:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   111f0:	e12fff33 	blx	r3
	ctx->tstates += 3;
   111f4:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	write8(ctx, WR.IY + off, BR.L);	
   111f8:	e1d410ba 	ldrh	r1, [r4, #10]
		val |= (1 << pos);
   111fc:	e3802004 	orr	r2, r0, #4
   11200:	e0851001 	add	r1, r5, r1
	ctx->tstates += 3;
   11204:	e2833003 	add	r3, r3, #3
		val |= (1 << pos);
   11208:	e6ef2072 	uxtb	r2, r2
	ctx->tstates += 3;
   1120c:	e5843040 	str	r3, [r4, #64]	; 0x40
	BR.L = doSetRes(ctx, SR_SET, 2, read8(ctx, WR.IY + off));
   11210:	e5c42006 	strb	r2, [r4, #6]
	ctx->memWrite(ctx->memParam, addr, val);	
   11214:	e5943028 	ldr	r3, [r4, #40]	; 0x28
   11218:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   1121c:	e6ff1071 	uxth	r1, r1
}
   11220:	e8bd4070 	pop	{r4, r5, r6, lr}
   11224:	e12fff13 	bx	r3

00011228 <LD_L_SET_3_off_IX_d>:


static void LD_L_SET_3_off_IX_d (Z80Context* ctx)
{
	ctx->tstates += 2;
	char off = read8(ctx, ctx->PC++);
   11228:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
   1122c:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	char off = read8(ctx, ctx->PC++);
   11230:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
   11234:	e2833005 	add	r3, r3, #5
{
   11238:	e92d4070 	push	{r4, r5, r6, lr}
   1123c:	e1a04000 	mov	r4, r0
	char off = read8(ctx, ctx->PC++);
   11240:	e1c021bc 	strh	r2, [r0, #28]
   11244:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   11248:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   1124c:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   11250:	e12fff33 	blx	r3
	ctx->tstates += 3;
   11254:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	BR.L = doSetRes(ctx, SR_SET, 3, read8(ctx, WR.IX + off));
   11258:	e1d410b8 	ldrh	r1, [r4, #8]
   1125c:	e6ff5070 	uxth	r5, r0
   11260:	e2833003 	add	r3, r3, #3
   11264:	e0851001 	add	r1, r5, r1
   11268:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   1126c:	e6ff1071 	uxth	r1, r1
   11270:	e5943024 	ldr	r3, [r4, #36]	; 0x24
   11274:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   11278:	e12fff33 	blx	r3
	ctx->tstates += 3;
   1127c:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	write8(ctx, WR.IX + off, BR.L);	
   11280:	e1d410b8 	ldrh	r1, [r4, #8]
		val |= (1 << pos);
   11284:	e3802008 	orr	r2, r0, #8
   11288:	e0851001 	add	r1, r5, r1
	ctx->tstates += 3;
   1128c:	e2833003 	add	r3, r3, #3
		val |= (1 << pos);
   11290:	e6ef2072 	uxtb	r2, r2
	ctx->tstates += 3;
   11294:	e5843040 	str	r3, [r4, #64]	; 0x40
	BR.L = doSetRes(ctx, SR_SET, 3, read8(ctx, WR.IX + off));
   11298:	e5c42006 	strb	r2, [r4, #6]
	ctx->memWrite(ctx->memParam, addr, val);	
   1129c:	e5943028 	ldr	r3, [r4, #40]	; 0x28
   112a0:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   112a4:	e6ff1071 	uxth	r1, r1
}
   112a8:	e8bd4070 	pop	{r4, r5, r6, lr}
   112ac:	e12fff13 	bx	r3

000112b0 <LD_L_SET_3_off_IY_d>:


static void LD_L_SET_3_off_IY_d (Z80Context* ctx)
{
	ctx->tstates += 2;
	char off = read8(ctx, ctx->PC++);
   112b0:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
   112b4:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	char off = read8(ctx, ctx->PC++);
   112b8:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
   112bc:	e2833005 	add	r3, r3, #5
{
   112c0:	e92d4070 	push	{r4, r5, r6, lr}
   112c4:	e1a04000 	mov	r4, r0
	char off = read8(ctx, ctx->PC++);
   112c8:	e1c021bc 	strh	r2, [r0, #28]
   112cc:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   112d0:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   112d4:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   112d8:	e12fff33 	blx	r3
	ctx->tstates += 3;
   112dc:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	BR.L = doSetRes(ctx, SR_SET, 3, read8(ctx, WR.IY + off));
   112e0:	e1d410ba 	ldrh	r1, [r4, #10]
   112e4:	e6ff5070 	uxth	r5, r0
   112e8:	e2833003 	add	r3, r3, #3
   112ec:	e0851001 	add	r1, r5, r1
   112f0:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   112f4:	e6ff1071 	uxth	r1, r1
   112f8:	e5943024 	ldr	r3, [r4, #36]	; 0x24
   112fc:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   11300:	e12fff33 	blx	r3
	ctx->tstates += 3;
   11304:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	write8(ctx, WR.IY + off, BR.L);	
   11308:	e1d410ba 	ldrh	r1, [r4, #10]
		val |= (1 << pos);
   1130c:	e3802008 	orr	r2, r0, #8
   11310:	e0851001 	add	r1, r5, r1
	ctx->tstates += 3;
   11314:	e2833003 	add	r3, r3, #3
		val |= (1 << pos);
   11318:	e6ef2072 	uxtb	r2, r2
	ctx->tstates += 3;
   1131c:	e5843040 	str	r3, [r4, #64]	; 0x40
	BR.L = doSetRes(ctx, SR_SET, 3, read8(ctx, WR.IY + off));
   11320:	e5c42006 	strb	r2, [r4, #6]
	ctx->memWrite(ctx->memParam, addr, val);	
   11324:	e5943028 	ldr	r3, [r4, #40]	; 0x28
   11328:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   1132c:	e6ff1071 	uxth	r1, r1
}
   11330:	e8bd4070 	pop	{r4, r5, r6, lr}
   11334:	e12fff13 	bx	r3

00011338 <LD_L_SET_4_off_IX_d>:


static void LD_L_SET_4_off_IX_d (Z80Context* ctx)
{
	ctx->tstates += 2;
	char off = read8(ctx, ctx->PC++);
   11338:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
   1133c:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	char off = read8(ctx, ctx->PC++);
   11340:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
   11344:	e2833005 	add	r3, r3, #5
{
   11348:	e92d4070 	push	{r4, r5, r6, lr}
   1134c:	e1a04000 	mov	r4, r0
	char off = read8(ctx, ctx->PC++);
   11350:	e1c021bc 	strh	r2, [r0, #28]
   11354:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   11358:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   1135c:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   11360:	e12fff33 	blx	r3
	ctx->tstates += 3;
   11364:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	BR.L = doSetRes(ctx, SR_SET, 4, read8(ctx, WR.IX + off));
   11368:	e1d410b8 	ldrh	r1, [r4, #8]
   1136c:	e6ff5070 	uxth	r5, r0
   11370:	e2833003 	add	r3, r3, #3
   11374:	e0851001 	add	r1, r5, r1
   11378:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   1137c:	e6ff1071 	uxth	r1, r1
   11380:	e5943024 	ldr	r3, [r4, #36]	; 0x24
   11384:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   11388:	e12fff33 	blx	r3
	ctx->tstates += 3;
   1138c:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	write8(ctx, WR.IX + off, BR.L);	
   11390:	e1d410b8 	ldrh	r1, [r4, #8]
		val |= (1 << pos);
   11394:	e3802010 	orr	r2, r0, #16
   11398:	e0851001 	add	r1, r5, r1
	ctx->tstates += 3;
   1139c:	e2833003 	add	r3, r3, #3
		val |= (1 << pos);
   113a0:	e6ef2072 	uxtb	r2, r2
	ctx->tstates += 3;
   113a4:	e5843040 	str	r3, [r4, #64]	; 0x40
	BR.L = doSetRes(ctx, SR_SET, 4, read8(ctx, WR.IX + off));
   113a8:	e5c42006 	strb	r2, [r4, #6]
	ctx->memWrite(ctx->memParam, addr, val);	
   113ac:	e5943028 	ldr	r3, [r4, #40]	; 0x28
   113b0:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   113b4:	e6ff1071 	uxth	r1, r1
}
   113b8:	e8bd4070 	pop	{r4, r5, r6, lr}
   113bc:	e12fff13 	bx	r3

000113c0 <LD_L_SET_4_off_IY_d>:


static void LD_L_SET_4_off_IY_d (Z80Context* ctx)
{
	ctx->tstates += 2;
	char off = read8(ctx, ctx->PC++);
   113c0:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
   113c4:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	char off = read8(ctx, ctx->PC++);
   113c8:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
   113cc:	e2833005 	add	r3, r3, #5
{
   113d0:	e92d4070 	push	{r4, r5, r6, lr}
   113d4:	e1a04000 	mov	r4, r0
	char off = read8(ctx, ctx->PC++);
   113d8:	e1c021bc 	strh	r2, [r0, #28]
   113dc:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   113e0:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   113e4:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   113e8:	e12fff33 	blx	r3
	ctx->tstates += 3;
   113ec:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	BR.L = doSetRes(ctx, SR_SET, 4, read8(ctx, WR.IY + off));
   113f0:	e1d410ba 	ldrh	r1, [r4, #10]
   113f4:	e6ff5070 	uxth	r5, r0
   113f8:	e2833003 	add	r3, r3, #3
   113fc:	e0851001 	add	r1, r5, r1
   11400:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   11404:	e6ff1071 	uxth	r1, r1
   11408:	e5943024 	ldr	r3, [r4, #36]	; 0x24
   1140c:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   11410:	e12fff33 	blx	r3
	ctx->tstates += 3;
   11414:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	write8(ctx, WR.IY + off, BR.L);	
   11418:	e1d410ba 	ldrh	r1, [r4, #10]
		val |= (1 << pos);
   1141c:	e3802010 	orr	r2, r0, #16
   11420:	e0851001 	add	r1, r5, r1
	ctx->tstates += 3;
   11424:	e2833003 	add	r3, r3, #3
		val |= (1 << pos);
   11428:	e6ef2072 	uxtb	r2, r2
	ctx->tstates += 3;
   1142c:	e5843040 	str	r3, [r4, #64]	; 0x40
	BR.L = doSetRes(ctx, SR_SET, 4, read8(ctx, WR.IY + off));
   11430:	e5c42006 	strb	r2, [r4, #6]
	ctx->memWrite(ctx->memParam, addr, val);	
   11434:	e5943028 	ldr	r3, [r4, #40]	; 0x28
   11438:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   1143c:	e6ff1071 	uxth	r1, r1
}
   11440:	e8bd4070 	pop	{r4, r5, r6, lr}
   11444:	e12fff13 	bx	r3

00011448 <LD_L_SET_5_off_IX_d>:


static void LD_L_SET_5_off_IX_d (Z80Context* ctx)
{
	ctx->tstates += 2;
	char off = read8(ctx, ctx->PC++);
   11448:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
   1144c:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	char off = read8(ctx, ctx->PC++);
   11450:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
   11454:	e2833005 	add	r3, r3, #5
{
   11458:	e92d4070 	push	{r4, r5, r6, lr}
   1145c:	e1a04000 	mov	r4, r0
	char off = read8(ctx, ctx->PC++);
   11460:	e1c021bc 	strh	r2, [r0, #28]
   11464:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   11468:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   1146c:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   11470:	e12fff33 	blx	r3
	ctx->tstates += 3;
   11474:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	BR.L = doSetRes(ctx, SR_SET, 5, read8(ctx, WR.IX + off));
   11478:	e1d410b8 	ldrh	r1, [r4, #8]
   1147c:	e6ff5070 	uxth	r5, r0
   11480:	e2833003 	add	r3, r3, #3
   11484:	e0851001 	add	r1, r5, r1
   11488:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   1148c:	e6ff1071 	uxth	r1, r1
   11490:	e5943024 	ldr	r3, [r4, #36]	; 0x24
   11494:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   11498:	e12fff33 	blx	r3
	ctx->tstates += 3;
   1149c:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	write8(ctx, WR.IX + off, BR.L);	
   114a0:	e1d410b8 	ldrh	r1, [r4, #8]
		val |= (1 << pos);
   114a4:	e3802020 	orr	r2, r0, #32
   114a8:	e0851001 	add	r1, r5, r1
	ctx->tstates += 3;
   114ac:	e2833003 	add	r3, r3, #3
		val |= (1 << pos);
   114b0:	e6ef2072 	uxtb	r2, r2
	ctx->tstates += 3;
   114b4:	e5843040 	str	r3, [r4, #64]	; 0x40
	BR.L = doSetRes(ctx, SR_SET, 5, read8(ctx, WR.IX + off));
   114b8:	e5c42006 	strb	r2, [r4, #6]
	ctx->memWrite(ctx->memParam, addr, val);	
   114bc:	e5943028 	ldr	r3, [r4, #40]	; 0x28
   114c0:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   114c4:	e6ff1071 	uxth	r1, r1
}
   114c8:	e8bd4070 	pop	{r4, r5, r6, lr}
   114cc:	e12fff13 	bx	r3

000114d0 <LD_L_SET_5_off_IY_d>:


static void LD_L_SET_5_off_IY_d (Z80Context* ctx)
{
	ctx->tstates += 2;
	char off = read8(ctx, ctx->PC++);
   114d0:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
   114d4:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	char off = read8(ctx, ctx->PC++);
   114d8:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
   114dc:	e2833005 	add	r3, r3, #5
{
   114e0:	e92d4070 	push	{r4, r5, r6, lr}
   114e4:	e1a04000 	mov	r4, r0
	char off = read8(ctx, ctx->PC++);
   114e8:	e1c021bc 	strh	r2, [r0, #28]
   114ec:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   114f0:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   114f4:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   114f8:	e12fff33 	blx	r3
	ctx->tstates += 3;
   114fc:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	BR.L = doSetRes(ctx, SR_SET, 5, read8(ctx, WR.IY + off));
   11500:	e1d410ba 	ldrh	r1, [r4, #10]
   11504:	e6ff5070 	uxth	r5, r0
   11508:	e2833003 	add	r3, r3, #3
   1150c:	e0851001 	add	r1, r5, r1
   11510:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   11514:	e6ff1071 	uxth	r1, r1
   11518:	e5943024 	ldr	r3, [r4, #36]	; 0x24
   1151c:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   11520:	e12fff33 	blx	r3
	ctx->tstates += 3;
   11524:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	write8(ctx, WR.IY + off, BR.L);	
   11528:	e1d410ba 	ldrh	r1, [r4, #10]
		val |= (1 << pos);
   1152c:	e3802020 	orr	r2, r0, #32
   11530:	e0851001 	add	r1, r5, r1
	ctx->tstates += 3;
   11534:	e2833003 	add	r3, r3, #3
		val |= (1 << pos);
   11538:	e6ef2072 	uxtb	r2, r2
	ctx->tstates += 3;
   1153c:	e5843040 	str	r3, [r4, #64]	; 0x40
	BR.L = doSetRes(ctx, SR_SET, 5, read8(ctx, WR.IY + off));
   11540:	e5c42006 	strb	r2, [r4, #6]
	ctx->memWrite(ctx->memParam, addr, val);	
   11544:	e5943028 	ldr	r3, [r4, #40]	; 0x28
   11548:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   1154c:	e6ff1071 	uxth	r1, r1
}
   11550:	e8bd4070 	pop	{r4, r5, r6, lr}
   11554:	e12fff13 	bx	r3

00011558 <LD_L_SET_6_off_IX_d>:


static void LD_L_SET_6_off_IX_d (Z80Context* ctx)
{
	ctx->tstates += 2;
	char off = read8(ctx, ctx->PC++);
   11558:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
   1155c:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	char off = read8(ctx, ctx->PC++);
   11560:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
   11564:	e2833005 	add	r3, r3, #5
{
   11568:	e92d4070 	push	{r4, r5, r6, lr}
   1156c:	e1a04000 	mov	r4, r0
	char off = read8(ctx, ctx->PC++);
   11570:	e1c021bc 	strh	r2, [r0, #28]
   11574:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   11578:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   1157c:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   11580:	e12fff33 	blx	r3
	ctx->tstates += 3;
   11584:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	BR.L = doSetRes(ctx, SR_SET, 6, read8(ctx, WR.IX + off));
   11588:	e1d410b8 	ldrh	r1, [r4, #8]
   1158c:	e6ff5070 	uxth	r5, r0
   11590:	e2833003 	add	r3, r3, #3
   11594:	e0851001 	add	r1, r5, r1
   11598:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   1159c:	e6ff1071 	uxth	r1, r1
   115a0:	e5943024 	ldr	r3, [r4, #36]	; 0x24
   115a4:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   115a8:	e12fff33 	blx	r3
	ctx->tstates += 3;
   115ac:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	write8(ctx, WR.IX + off, BR.L);	
   115b0:	e1d410b8 	ldrh	r1, [r4, #8]
		val |= (1 << pos);
   115b4:	e3802040 	orr	r2, r0, #64	; 0x40
   115b8:	e0851001 	add	r1, r5, r1
	ctx->tstates += 3;
   115bc:	e2833003 	add	r3, r3, #3
		val |= (1 << pos);
   115c0:	e6ef2072 	uxtb	r2, r2
	ctx->tstates += 3;
   115c4:	e5843040 	str	r3, [r4, #64]	; 0x40
	BR.L = doSetRes(ctx, SR_SET, 6, read8(ctx, WR.IX + off));
   115c8:	e5c42006 	strb	r2, [r4, #6]
	ctx->memWrite(ctx->memParam, addr, val);	
   115cc:	e5943028 	ldr	r3, [r4, #40]	; 0x28
   115d0:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   115d4:	e6ff1071 	uxth	r1, r1
}
   115d8:	e8bd4070 	pop	{r4, r5, r6, lr}
   115dc:	e12fff13 	bx	r3

000115e0 <LD_L_SET_6_off_IY_d>:


static void LD_L_SET_6_off_IY_d (Z80Context* ctx)
{
	ctx->tstates += 2;
	char off = read8(ctx, ctx->PC++);
   115e0:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
   115e4:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	char off = read8(ctx, ctx->PC++);
   115e8:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
   115ec:	e2833005 	add	r3, r3, #5
{
   115f0:	e92d4070 	push	{r4, r5, r6, lr}
   115f4:	e1a04000 	mov	r4, r0
	char off = read8(ctx, ctx->PC++);
   115f8:	e1c021bc 	strh	r2, [r0, #28]
   115fc:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   11600:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   11604:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   11608:	e12fff33 	blx	r3
	ctx->tstates += 3;
   1160c:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	BR.L = doSetRes(ctx, SR_SET, 6, read8(ctx, WR.IY + off));
   11610:	e1d410ba 	ldrh	r1, [r4, #10]
   11614:	e6ff5070 	uxth	r5, r0
   11618:	e2833003 	add	r3, r3, #3
   1161c:	e0851001 	add	r1, r5, r1
   11620:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   11624:	e6ff1071 	uxth	r1, r1
   11628:	e5943024 	ldr	r3, [r4, #36]	; 0x24
   1162c:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   11630:	e12fff33 	blx	r3
	ctx->tstates += 3;
   11634:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	write8(ctx, WR.IY + off, BR.L);	
   11638:	e1d410ba 	ldrh	r1, [r4, #10]
		val |= (1 << pos);
   1163c:	e3802040 	orr	r2, r0, #64	; 0x40
   11640:	e0851001 	add	r1, r5, r1
	ctx->tstates += 3;
   11644:	e2833003 	add	r3, r3, #3
		val |= (1 << pos);
   11648:	e6ef2072 	uxtb	r2, r2
	ctx->tstates += 3;
   1164c:	e5843040 	str	r3, [r4, #64]	; 0x40
	BR.L = doSetRes(ctx, SR_SET, 6, read8(ctx, WR.IY + off));
   11650:	e5c42006 	strb	r2, [r4, #6]
	ctx->memWrite(ctx->memParam, addr, val);	
   11654:	e5943028 	ldr	r3, [r4, #40]	; 0x28
   11658:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   1165c:	e6ff1071 	uxth	r1, r1
}
   11660:	e8bd4070 	pop	{r4, r5, r6, lr}
   11664:	e12fff13 	bx	r3

00011668 <LD_L_SET_7_off_IX_d>:


static void LD_L_SET_7_off_IX_d (Z80Context* ctx)
{
	ctx->tstates += 2;
	char off = read8(ctx, ctx->PC++);
   11668:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
   1166c:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	char off = read8(ctx, ctx->PC++);
   11670:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
   11674:	e2833005 	add	r3, r3, #5
{
   11678:	e92d4070 	push	{r4, r5, r6, lr}
   1167c:	e1a04000 	mov	r4, r0
	char off = read8(ctx, ctx->PC++);
   11680:	e1c021bc 	strh	r2, [r0, #28]
   11684:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   11688:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   1168c:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   11690:	e12fff33 	blx	r3
	ctx->tstates += 3;
   11694:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	BR.L = doSetRes(ctx, SR_SET, 7, read8(ctx, WR.IX + off));
   11698:	e1d410b8 	ldrh	r1, [r4, #8]
   1169c:	e6ff5070 	uxth	r5, r0
   116a0:	e2833003 	add	r3, r3, #3
   116a4:	e0851001 	add	r1, r5, r1
   116a8:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   116ac:	e6ff1071 	uxth	r1, r1
   116b0:	e5943024 	ldr	r3, [r4, #36]	; 0x24
   116b4:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   116b8:	e12fff33 	blx	r3
		val |= (1 << pos);
   116bc:	e1e00c80 	mvn	r0, r0, lsl #25
   116c0:	e1e00ca0 	mvn	r0, r0, lsr #25
	ctx->tstates += 3;
   116c4:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	write8(ctx, WR.IX + off, BR.L);	
   116c8:	e1d410b8 	ldrh	r1, [r4, #8]
		val |= (1 << pos);
   116cc:	e6ef2070 	uxtb	r2, r0
   116d0:	e0851001 	add	r1, r5, r1
	ctx->tstates += 3;
   116d4:	e2833003 	add	r3, r3, #3
   116d8:	e5843040 	str	r3, [r4, #64]	; 0x40
	BR.L = doSetRes(ctx, SR_SET, 7, read8(ctx, WR.IX + off));
   116dc:	e5c42006 	strb	r2, [r4, #6]
	ctx->memWrite(ctx->memParam, addr, val);	
   116e0:	e5943028 	ldr	r3, [r4, #40]	; 0x28
   116e4:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   116e8:	e6ff1071 	uxth	r1, r1
}
   116ec:	e8bd4070 	pop	{r4, r5, r6, lr}
   116f0:	e12fff13 	bx	r3

000116f4 <LD_L_SET_7_off_IY_d>:


static void LD_L_SET_7_off_IY_d (Z80Context* ctx)
{
	ctx->tstates += 2;
	char off = read8(ctx, ctx->PC++);
   116f4:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
   116f8:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	char off = read8(ctx, ctx->PC++);
   116fc:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
   11700:	e2833005 	add	r3, r3, #5
{
   11704:	e92d4070 	push	{r4, r5, r6, lr}
   11708:	e1a04000 	mov	r4, r0
	char off = read8(ctx, ctx->PC++);
   1170c:	e1c021bc 	strh	r2, [r0, #28]
   11710:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   11714:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   11718:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   1171c:	e12fff33 	blx	r3
	ctx->tstates += 3;
   11720:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	BR.L = doSetRes(ctx, SR_SET, 7, read8(ctx, WR.IY + off));
   11724:	e1d410ba 	ldrh	r1, [r4, #10]
   11728:	e6ff5070 	uxth	r5, r0
   1172c:	e2833003 	add	r3, r3, #3
   11730:	e0851001 	add	r1, r5, r1
   11734:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   11738:	e6ff1071 	uxth	r1, r1
   1173c:	e5943024 	ldr	r3, [r4, #36]	; 0x24
   11740:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   11744:	e12fff33 	blx	r3
		val |= (1 << pos);
   11748:	e1e00c80 	mvn	r0, r0, lsl #25
   1174c:	e1e00ca0 	mvn	r0, r0, lsr #25
	ctx->tstates += 3;
   11750:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	write8(ctx, WR.IY + off, BR.L);	
   11754:	e1d410ba 	ldrh	r1, [r4, #10]
		val |= (1 << pos);
   11758:	e6ef2070 	uxtb	r2, r0
   1175c:	e0851001 	add	r1, r5, r1
	ctx->tstates += 3;
   11760:	e2833003 	add	r3, r3, #3
   11764:	e5843040 	str	r3, [r4, #64]	; 0x40
	BR.L = doSetRes(ctx, SR_SET, 7, read8(ctx, WR.IY + off));
   11768:	e5c42006 	strb	r2, [r4, #6]
	ctx->memWrite(ctx->memParam, addr, val);	
   1176c:	e5943028 	ldr	r3, [r4, #40]	; 0x28
   11770:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   11774:	e6ff1071 	uxth	r1, r1
}
   11778:	e8bd4070 	pop	{r4, r5, r6, lr}
   1177c:	e12fff13 	bx	r3

00011780 <LD_R_A>:
}


static void LD_R_A (Z80Context* ctx)
{
	ctx->tstates += 1;
   11780:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	ctx->R = BR.A;
   11784:	e5d02001 	ldrb	r2, [r0, #1]
	ctx->tstates += 1;
   11788:	e2833001 	add	r3, r3, #1
   1178c:	e5803040 	str	r3, [r0, #64]	; 0x40
	ctx->R = BR.A;
   11790:	e5c0201e 	strb	r2, [r0, #30]
}
   11794:	e12fff1e 	bx	lr

00011798 <LD_SP_HL>:
}


static void LD_SP_HL (Z80Context* ctx)
{
	ctx->tstates += 2;
   11798:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	WR.SP = WR.HL;
   1179c:	e1d020b6 	ldrh	r2, [r0, #6]
	ctx->tstates += 2;
   117a0:	e2833002 	add	r3, r3, #2
   117a4:	e5803040 	str	r3, [r0, #64]	; 0x40
	WR.SP = WR.HL;
   117a8:	e1c020bc 	strh	r2, [r0, #12]
}
   117ac:	e12fff1e 	bx	lr

000117b0 <LD_SP_IX>:


static void LD_SP_IX (Z80Context* ctx)
{
	ctx->tstates += 2;
   117b0:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	WR.SP = WR.IX;
   117b4:	e1d020b8 	ldrh	r2, [r0, #8]
	ctx->tstates += 2;
   117b8:	e2833002 	add	r3, r3, #2
   117bc:	e5803040 	str	r3, [r0, #64]	; 0x40
	WR.SP = WR.IX;
   117c0:	e1c020bc 	strh	r2, [r0, #12]
}
   117c4:	e12fff1e 	bx	lr

000117c8 <LD_SP_IY>:


static void LD_SP_IY (Z80Context* ctx)
{
	ctx->tstates += 2;
   117c8:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	WR.SP = WR.IY;
   117cc:	e1d020ba 	ldrh	r2, [r0, #10]
	ctx->tstates += 2;
   117d0:	e2833002 	add	r3, r3, #2
   117d4:	e5803040 	str	r3, [r0, #64]	; 0x40
	WR.SP = WR.IY;
   117d8:	e1c020bc 	strh	r2, [r0, #12]
}
   117dc:	e12fff1e 	bx	lr

000117e0 <LDD>:
	ctx->tstates += 3;
   117e0:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	
}


static void LDD (Z80Context* ctx)
{
   117e4:	e92d4070 	push	{r4, r5, r6, lr}
   117e8:	e2833005 	add	r3, r3, #5
   117ec:	e1a04000 	mov	r4, r0
	ctx->tstates += 2;
	byte val = read8(ctx, WR.HL);
   117f0:	e1d010b6 	ldrh	r1, [r0, #6]
   117f4:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   117f8:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   117fc:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   11800:	e12fff33 	blx	r3
   11804:	e1a05000 	mov	r5, r0
	ctx->tstates += 3;
   11808:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	ctx->memWrite(ctx->memParam, addr, val);	
   1180c:	e1a02000 	mov	r2, r0
	ctx->tstates += 3;
   11810:	e2833003 	add	r3, r3, #3
	write8(ctx, WR.DE, val);
   11814:	e1d410b4 	ldrh	r1, [r4, #4]
   11818:	e5843040 	str	r3, [r4, #64]	; 0x40
	ctx->memWrite(ctx->memParam, addr, val);	
   1181c:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   11820:	e5943028 	ldr	r3, [r4, #40]	; 0x28
   11824:	e12fff33 	blx	r3
	WR.DE--;
	WR.HL--;
	WR.BC--;
	VALFLAG(F_5, ((BR.A + val) & 0x02) != 0);
   11828:	e5d43001 	ldrb	r3, [r4, #1]
	WR.BC--;
   1182c:	e1d420b2 	ldrh	r2, [r4, #2]
	VALFLAG(F_5, ((BR.A + val) & 0x02) != 0);
   11830:	e0855003 	add	r5, r5, r3
	WR.HL--;
   11834:	e1d430b6 	ldrh	r3, [r4, #6]
	VALFLAG(F_5, ((BR.A + val) & 0x02) != 0);
   11838:	e6ef5075 	uxtb	r5, r5
	WR.HL--;
   1183c:	e2433001 	sub	r3, r3, #1
   11840:	e1c430b6 	strh	r3, [r4, #6]
	BR.F |= flag;
   11844:	e5d43000 	ldrb	r3, [r4]
	if (val)
   11848:	e3150002 	tst	r5, #2
	BR.F |= flag;
   1184c:	13833020 	orrne	r3, r3, #32
	BR.F &= ~flag;
   11850:	020330df 	andeq	r3, r3, #223	; 0xdf
	if (val)
   11854:	e3150008 	tst	r5, #8
	BR.F |= flag;
   11858:	13833008 	orrne	r3, r3, #8
	BR.F &= ~flag;
   1185c:	020330f7 	andeq	r3, r3, #247	; 0xf7
	WR.BC--;
   11860:	e2422001 	sub	r2, r2, #1
	WR.DE--;
   11864:	e1d410b4 	ldrh	r1, [r4, #4]
	WR.BC--;
   11868:	e6ff2072 	uxth	r2, r2
   1186c:	e6af3073 	sxtb	r3, r3
	BR.F |= flag;
   11870:	e20330e9 	and	r3, r3, #233	; 0xe9
	if (val)
   11874:	e3520000 	cmp	r2, #0
	WR.DE--;
   11878:	e2411001 	sub	r1, r1, #1
	BR.F |= flag;
   1187c:	13833004 	orrne	r3, r3, #4
   11880:	e1c410b4 	strh	r1, [r4, #4]
	WR.BC--;
   11884:	e1c420b2 	strh	r2, [r4, #2]
   11888:	e5c43000 	strb	r3, [r4]
	VALFLAG(F_3, ((BR.A + val) & F_3) != 0);
	RESFLAG(F_H | F_N);
	VALFLAG(F_PV, WR.BC != 0);
}
   1188c:	e8bd8070 	pop	{r4, r5, r6, pc}

00011890 <LDI>:
	ctx->tstates += 3;
   11890:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	}
}


static void LDI (Z80Context* ctx)
{
   11894:	e92d4070 	push	{r4, r5, r6, lr}
   11898:	e2833005 	add	r3, r3, #5
   1189c:	e1a04000 	mov	r4, r0
	ctx->tstates += 2;
	byte val = read8(ctx, WR.HL);
   118a0:	e1d010b6 	ldrh	r1, [r0, #6]
   118a4:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   118a8:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   118ac:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   118b0:	e12fff33 	blx	r3
   118b4:	e1a05000 	mov	r5, r0
	ctx->tstates += 3;
   118b8:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	ctx->memWrite(ctx->memParam, addr, val);	
   118bc:	e1a02000 	mov	r2, r0
	ctx->tstates += 3;
   118c0:	e2833003 	add	r3, r3, #3
	write8(ctx, WR.DE, val);
   118c4:	e1d410b4 	ldrh	r1, [r4, #4]
   118c8:	e5843040 	str	r3, [r4, #64]	; 0x40
	ctx->memWrite(ctx->memParam, addr, val);	
   118cc:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   118d0:	e5943028 	ldr	r3, [r4, #40]	; 0x28
   118d4:	e12fff33 	blx	r3
	WR.DE++;
	WR.HL++;
	WR.BC--;
	VALFLAG(F_5, (BR.A + val) & 0x02);
   118d8:	e5d43001 	ldrb	r3, [r4, #1]
	WR.BC--;
   118dc:	e1d420b2 	ldrh	r2, [r4, #2]
	VALFLAG(F_5, (BR.A + val) & 0x02);
   118e0:	e0855003 	add	r5, r5, r3
	WR.HL++;
   118e4:	e1d430b6 	ldrh	r3, [r4, #6]
	VALFLAG(F_5, (BR.A + val) & 0x02);
   118e8:	e6ef5075 	uxtb	r5, r5
	WR.HL++;
   118ec:	e2833001 	add	r3, r3, #1
   118f0:	e1c430b6 	strh	r3, [r4, #6]
	BR.F |= flag;
   118f4:	e5d43000 	ldrb	r3, [r4]
	if (val)
   118f8:	e3150002 	tst	r5, #2
	BR.F |= flag;
   118fc:	13833020 	orrne	r3, r3, #32
	BR.F &= ~flag;
   11900:	020330df 	andeq	r3, r3, #223	; 0xdf
	if (val)
   11904:	e3150008 	tst	r5, #8
	BR.F |= flag;
   11908:	13833008 	orrne	r3, r3, #8
	BR.F &= ~flag;
   1190c:	020330f7 	andeq	r3, r3, #247	; 0xf7
	WR.BC--;
   11910:	e2422001 	sub	r2, r2, #1
	WR.DE++;
   11914:	e1d410b4 	ldrh	r1, [r4, #4]
	WR.BC--;
   11918:	e6ff2072 	uxth	r2, r2
   1191c:	e6af3073 	sxtb	r3, r3
	BR.F |= flag;
   11920:	e20330e9 	and	r3, r3, #233	; 0xe9
	if (val)
   11924:	e3520000 	cmp	r2, #0
	WR.DE++;
   11928:	e2811001 	add	r1, r1, #1
	BR.F |= flag;
   1192c:	13833004 	orrne	r3, r3, #4
   11930:	e1c410b4 	strh	r1, [r4, #4]
	WR.BC--;
   11934:	e1c420b2 	strh	r2, [r4, #2]
   11938:	e5c43000 	strb	r3, [r4]
	VALFLAG(F_3, ((BR.A + val) & F_3) != 0);
	RESFLAG(F_H | F_N);
	VALFLAG(F_PV, WR.BC != 0);
}
   1193c:	e8bd8070 	pop	{r4, r5, r6, pc}

00011940 <OUT_off_C_0>:
	ctx->tstates += 4;
   11940:	e5903040 	ldr	r3, [r0, #64]	; 0x40
}


static void OUT_off_C_0 (Z80Context* ctx)
{
	ioWrite(ctx, WR.BC, 0);
   11944:	e1d010b2 	ldrh	r1, [r0, #2]
   11948:	e2833004 	add	r3, r3, #4
   1194c:	e5803040 	str	r3, [r0, #64]	; 0x40
	ctx->ioWrite(ctx->ioParam, addr, val);
   11950:	e3a02000 	mov	r2, #0
   11954:	e5903034 	ldr	r3, [r0, #52]	; 0x34
   11958:	e5900038 	ldr	r0, [r0, #56]	; 0x38
   1195c:	e12fff13 	bx	r3

00011960 <OUT_off_C_A>:
	ctx->tstates += 4;
   11960:	e5903040 	ldr	r3, [r0, #64]	; 0x40
}


static void OUT_off_C_A (Z80Context* ctx)
{
	ioWrite(ctx, WR.BC, BR.A);
   11964:	e1d010b2 	ldrh	r1, [r0, #2]
   11968:	e2833004 	add	r3, r3, #4
   1196c:	e5803040 	str	r3, [r0, #64]	; 0x40
   11970:	e5d02001 	ldrb	r2, [r0, #1]
	ctx->ioWrite(ctx->ioParam, addr, val);
   11974:	e5903034 	ldr	r3, [r0, #52]	; 0x34
   11978:	e5900038 	ldr	r0, [r0, #56]	; 0x38
   1197c:	e12fff13 	bx	r3

00011980 <OUT_off_C_B>:
	ctx->tstates += 4;
   11980:	e5903040 	ldr	r3, [r0, #64]	; 0x40
}


static void OUT_off_C_B (Z80Context* ctx)
{
	ioWrite(ctx, WR.BC, BR.B);
   11984:	e1d010b2 	ldrh	r1, [r0, #2]
   11988:	e2833004 	add	r3, r3, #4
   1198c:	e5803040 	str	r3, [r0, #64]	; 0x40
   11990:	e5d02003 	ldrb	r2, [r0, #3]
	ctx->ioWrite(ctx->ioParam, addr, val);
   11994:	e5903034 	ldr	r3, [r0, #52]	; 0x34
   11998:	e5900038 	ldr	r0, [r0, #56]	; 0x38
   1199c:	e12fff13 	bx	r3

000119a0 <OUT_off_C_C>:
	ctx->tstates += 4;
   119a0:	e5903040 	ldr	r3, [r0, #64]	; 0x40
}


static void OUT_off_C_C (Z80Context* ctx)
{
	ioWrite(ctx, WR.BC, BR.C);
   119a4:	e1d010b2 	ldrh	r1, [r0, #2]
   119a8:	e2833004 	add	r3, r3, #4
   119ac:	e5803040 	str	r3, [r0, #64]	; 0x40
   119b0:	e5d02002 	ldrb	r2, [r0, #2]
	ctx->ioWrite(ctx->ioParam, addr, val);
   119b4:	e5903034 	ldr	r3, [r0, #52]	; 0x34
   119b8:	e5900038 	ldr	r0, [r0, #56]	; 0x38
   119bc:	e12fff13 	bx	r3

000119c0 <OUT_off_C_D>:
	ctx->tstates += 4;
   119c0:	e5903040 	ldr	r3, [r0, #64]	; 0x40
}


static void OUT_off_C_D (Z80Context* ctx)
{
	ioWrite(ctx, WR.BC, BR.D);
   119c4:	e1d010b2 	ldrh	r1, [r0, #2]
   119c8:	e2833004 	add	r3, r3, #4
   119cc:	e5803040 	str	r3, [r0, #64]	; 0x40
   119d0:	e5d02005 	ldrb	r2, [r0, #5]
	ctx->ioWrite(ctx->ioParam, addr, val);
   119d4:	e5903034 	ldr	r3, [r0, #52]	; 0x34
   119d8:	e5900038 	ldr	r0, [r0, #56]	; 0x38
   119dc:	e12fff13 	bx	r3

000119e0 <OUT_off_C_E>:
	ctx->tstates += 4;
   119e0:	e5903040 	ldr	r3, [r0, #64]	; 0x40
}


static void OUT_off_C_E (Z80Context* ctx)
{
	ioWrite(ctx, WR.BC, BR.E);
   119e4:	e1d010b2 	ldrh	r1, [r0, #2]
   119e8:	e2833004 	add	r3, r3, #4
   119ec:	e5803040 	str	r3, [r0, #64]	; 0x40
   119f0:	e5d02004 	ldrb	r2, [r0, #4]
	ctx->ioWrite(ctx->ioParam, addr, val);
   119f4:	e5903034 	ldr	r3, [r0, #52]	; 0x34
   119f8:	e5900038 	ldr	r0, [r0, #56]	; 0x38
   119fc:	e12fff13 	bx	r3

00011a00 <OUT_off_C_H>:
	ctx->tstates += 4;
   11a00:	e5903040 	ldr	r3, [r0, #64]	; 0x40
}


static void OUT_off_C_H (Z80Context* ctx)
{
	ioWrite(ctx, WR.BC, BR.H);
   11a04:	e1d010b2 	ldrh	r1, [r0, #2]
   11a08:	e2833004 	add	r3, r3, #4
   11a0c:	e5803040 	str	r3, [r0, #64]	; 0x40
   11a10:	e5d02007 	ldrb	r2, [r0, #7]
	ctx->ioWrite(ctx->ioParam, addr, val);
   11a14:	e5903034 	ldr	r3, [r0, #52]	; 0x34
   11a18:	e5900038 	ldr	r0, [r0, #56]	; 0x38
   11a1c:	e12fff13 	bx	r3

00011a20 <OUT_off_C_L>:
	ctx->tstates += 4;
   11a20:	e5903040 	ldr	r3, [r0, #64]	; 0x40
}


static void OUT_off_C_L (Z80Context* ctx)
{
	ioWrite(ctx, WR.BC, BR.L);
   11a24:	e1d010b2 	ldrh	r1, [r0, #2]
   11a28:	e2833004 	add	r3, r3, #4
   11a2c:	e5803040 	str	r3, [r0, #64]	; 0x40
   11a30:	e5d02006 	ldrb	r2, [r0, #6]
	ctx->ioWrite(ctx->ioParam, addr, val);
   11a34:	e5903034 	ldr	r3, [r0, #52]	; 0x34
   11a38:	e5900038 	ldr	r0, [r0, #56]	; 0x38
   11a3c:	e12fff13 	bx	r3

00011a40 <OUT_off_n_A>:
}


static void OUT_off_n_A (Z80Context* ctx)
{
	ioWrite(ctx, BR.A << 8 | read8(ctx, ctx->PC++), BR.A);
   11a40:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 3;
   11a44:	e5903040 	ldr	r3, [r0, #64]	; 0x40
{
   11a48:	e92d4070 	push	{r4, r5, r6, lr}
	ioWrite(ctx, BR.A << 8 | read8(ctx, ctx->PC++), BR.A);
   11a4c:	e2812001 	add	r2, r1, #1
{
   11a50:	e1a04000 	mov	r4, r0
   11a54:	e2833003 	add	r3, r3, #3
	ioWrite(ctx, BR.A << 8 | read8(ctx, ctx->PC++), BR.A);
   11a58:	e1d050d1 	ldrsb	r5, [r0, #1]
   11a5c:	e1c021bc 	strh	r2, [r0, #28]
   11a60:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   11a64:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   11a68:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   11a6c:	e12fff33 	blx	r3
	ctx->tstates += 4;
   11a70:	e5943040 	ldr	r3, [r4, #64]	; 0x40
   11a74:	e1a05405 	lsl	r5, r5, #8
   11a78:	e1851000 	orr	r1, r5, r0
   11a7c:	e2833004 	add	r3, r3, #4
   11a80:	e5843040 	str	r3, [r4, #64]	; 0x40
   11a84:	e5d42001 	ldrb	r2, [r4, #1]
	ctx->ioWrite(ctx->ioParam, addr, val);
   11a88:	e5943034 	ldr	r3, [r4, #52]	; 0x34
   11a8c:	e5940038 	ldr	r0, [r4, #56]	; 0x38
   11a90:	e6ff1071 	uxth	r1, r1
}
   11a94:	e8bd4070 	pop	{r4, r5, r6, lr}
   11a98:	e12fff13 	bx	r3

00011a9c <RES_0_off_HL>:
	ctx->tstates += 3;
   11a9c:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	doPush(ctx, WR.IY);
}


static void RES_0_off_HL (Z80Context* ctx)
{
   11aa0:	e92d4070 	push	{r4, r5, r6, lr}
   11aa4:	e1a04000 	mov	r4, r0
	ctx->tstates += 1;
	write8(ctx, WR.HL, doSetRes(ctx, SR_RES, 0, read8(ctx, WR.HL)));
   11aa8:	e1d050b6 	ldrh	r5, [r0, #6]
   11aac:	e2833004 	add	r3, r3, #4
   11ab0:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   11ab4:	e1a01005 	mov	r1, r5
   11ab8:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   11abc:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   11ac0:	e12fff33 	blx	r3
	ctx->tstates += 3;
   11ac4:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	ctx->memWrite(ctx->memParam, addr, val);	
   11ac8:	e20020fe 	and	r2, r0, #254	; 0xfe
	ctx->tstates += 3;
   11acc:	e2833003 	add	r3, r3, #3
   11ad0:	e5843040 	str	r3, [r4, #64]	; 0x40
	ctx->memWrite(ctx->memParam, addr, val);	
   11ad4:	e1a01005 	mov	r1, r5
   11ad8:	e5943028 	ldr	r3, [r4, #40]	; 0x28
   11adc:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
}
   11ae0:	e8bd4070 	pop	{r4, r5, r6, lr}
   11ae4:	e12fff13 	bx	r3

00011ae8 <RES_0_off_IX_d>:


static void RES_0_off_IX_d (Z80Context* ctx)
{
	ctx->tstates += 2;
	char off = read8(ctx, ctx->PC++);
   11ae8:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
   11aec:	e5903040 	ldr	r3, [r0, #64]	; 0x40
{
   11af0:	e92d4070 	push	{r4, r5, r6, lr}
	char off = read8(ctx, ctx->PC++);
   11af4:	e2812001 	add	r2, r1, #1
{
   11af8:	e1a04000 	mov	r4, r0
	ctx->tstates += 3;
   11afc:	e2833005 	add	r3, r3, #5
	char off = read8(ctx, ctx->PC++);
   11b00:	e1c021bc 	strh	r2, [r0, #28]
   11b04:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   11b08:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   11b0c:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   11b10:	e12fff33 	blx	r3
	write8(ctx, WR.IX + off, doSetRes(ctx, SR_RES, 0, read8(ctx, WR.IX + off)));
   11b14:	e1d450b8 	ldrh	r5, [r4, #8]
	ctx->tstates += 3;
   11b18:	e5943040 	ldr	r3, [r4, #64]	; 0x40
   11b1c:	e0855000 	add	r5, r5, r0
   11b20:	e6ff5075 	uxth	r5, r5
   11b24:	e2833003 	add	r3, r3, #3
   11b28:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   11b2c:	e1a01005 	mov	r1, r5
   11b30:	e5943024 	ldr	r3, [r4, #36]	; 0x24
   11b34:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   11b38:	e12fff33 	blx	r3
	ctx->tstates += 3;
   11b3c:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	ctx->memWrite(ctx->memParam, addr, val);	
   11b40:	e20020fe 	and	r2, r0, #254	; 0xfe
	ctx->tstates += 3;
   11b44:	e2833003 	add	r3, r3, #3
   11b48:	e5843040 	str	r3, [r4, #64]	; 0x40
	ctx->memWrite(ctx->memParam, addr, val);	
   11b4c:	e1a01005 	mov	r1, r5
   11b50:	e5943028 	ldr	r3, [r4, #40]	; 0x28
   11b54:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
	
	
}
   11b58:	e8bd4070 	pop	{r4, r5, r6, lr}
   11b5c:	e12fff13 	bx	r3

00011b60 <RES_0_off_IY_d>:


static void RES_0_off_IY_d (Z80Context* ctx)
{
	ctx->tstates += 2;
	char off = read8(ctx, ctx->PC++);
   11b60:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
   11b64:	e5903040 	ldr	r3, [r0, #64]	; 0x40
{
   11b68:	e92d4070 	push	{r4, r5, r6, lr}
	char off = read8(ctx, ctx->PC++);
   11b6c:	e2812001 	add	r2, r1, #1
{
   11b70:	e1a04000 	mov	r4, r0
	ctx->tstates += 3;
   11b74:	e2833005 	add	r3, r3, #5
	char off = read8(ctx, ctx->PC++);
   11b78:	e1c021bc 	strh	r2, [r0, #28]
   11b7c:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   11b80:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   11b84:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   11b88:	e12fff33 	blx	r3
	write8(ctx, WR.IY + off, doSetRes(ctx, SR_RES, 0, read8(ctx, WR.IY + off)));
   11b8c:	e1d450ba 	ldrh	r5, [r4, #10]
	ctx->tstates += 3;
   11b90:	e5943040 	ldr	r3, [r4, #64]	; 0x40
   11b94:	e0855000 	add	r5, r5, r0
   11b98:	e6ff5075 	uxth	r5, r5
   11b9c:	e2833003 	add	r3, r3, #3
   11ba0:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   11ba4:	e1a01005 	mov	r1, r5
   11ba8:	e5943024 	ldr	r3, [r4, #36]	; 0x24
   11bac:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   11bb0:	e12fff33 	blx	r3
	ctx->tstates += 3;
   11bb4:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	ctx->memWrite(ctx->memParam, addr, val);	
   11bb8:	e20020fe 	and	r2, r0, #254	; 0xfe
	ctx->tstates += 3;
   11bbc:	e2833003 	add	r3, r3, #3
   11bc0:	e5843040 	str	r3, [r4, #64]	; 0x40
	ctx->memWrite(ctx->memParam, addr, val);	
   11bc4:	e1a01005 	mov	r1, r5
   11bc8:	e5943028 	ldr	r3, [r4, #40]	; 0x28
   11bcc:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
	
	
}
   11bd0:	e8bd4070 	pop	{r4, r5, r6, lr}
   11bd4:	e12fff13 	bx	r3

00011bd8 <RES_0_A>:
		val &= ~(1 << pos);
   11bd8:	e5d03001 	ldrb	r3, [r0, #1]
   11bdc:	e3c33001 	bic	r3, r3, #1


static void RES_0_A (Z80Context* ctx)
{
	BR.A = doSetRes(ctx, SR_RES, 0, BR.A);
   11be0:	e5c03001 	strb	r3, [r0, #1]
}
   11be4:	e12fff1e 	bx	lr

00011be8 <RES_0_B>:
   11be8:	e5d03003 	ldrb	r3, [r0, #3]
   11bec:	e3c33001 	bic	r3, r3, #1


static void RES_0_B (Z80Context* ctx)
{
	BR.B = doSetRes(ctx, SR_RES, 0, BR.B);
   11bf0:	e5c03003 	strb	r3, [r0, #3]
}
   11bf4:	e12fff1e 	bx	lr

00011bf8 <RES_0_C>:
   11bf8:	e5d03002 	ldrb	r3, [r0, #2]
   11bfc:	e3c33001 	bic	r3, r3, #1


static void RES_0_C (Z80Context* ctx)
{
	BR.C = doSetRes(ctx, SR_RES, 0, BR.C);
   11c00:	e5c03002 	strb	r3, [r0, #2]
}
   11c04:	e12fff1e 	bx	lr

00011c08 <RES_0_D>:
   11c08:	e5d03005 	ldrb	r3, [r0, #5]
   11c0c:	e3c33001 	bic	r3, r3, #1


static void RES_0_D (Z80Context* ctx)
{
	BR.D = doSetRes(ctx, SR_RES, 0, BR.D);
   11c10:	e5c03005 	strb	r3, [r0, #5]
}
   11c14:	e12fff1e 	bx	lr

00011c18 <RES_0_E>:
   11c18:	e5d03004 	ldrb	r3, [r0, #4]
   11c1c:	e3c33001 	bic	r3, r3, #1


static void RES_0_E (Z80Context* ctx)
{
	BR.E = doSetRes(ctx, SR_RES, 0, BR.E);
   11c20:	e5c03004 	strb	r3, [r0, #4]
}
   11c24:	e12fff1e 	bx	lr

00011c28 <RES_0_H>:
   11c28:	e5d03007 	ldrb	r3, [r0, #7]
   11c2c:	e3c33001 	bic	r3, r3, #1


static void RES_0_H (Z80Context* ctx)
{
	BR.H = doSetRes(ctx, SR_RES, 0, BR.H);
   11c30:	e5c03007 	strb	r3, [r0, #7]
}
   11c34:	e12fff1e 	bx	lr

00011c38 <RES_0_L>:
   11c38:	e5d03006 	ldrb	r3, [r0, #6]
   11c3c:	e3c33001 	bic	r3, r3, #1


static void RES_0_L (Z80Context* ctx)
{
	BR.L = doSetRes(ctx, SR_RES, 0, BR.L);
   11c40:	e5c03006 	strb	r3, [r0, #6]
}
   11c44:	e12fff1e 	bx	lr

00011c48 <RES_1_off_HL>:
	ctx->tstates += 3;
   11c48:	e5903040 	ldr	r3, [r0, #64]	; 0x40


static void RES_1_off_HL (Z80Context* ctx)
{
   11c4c:	e92d4070 	push	{r4, r5, r6, lr}
   11c50:	e1a04000 	mov	r4, r0
	ctx->tstates += 1;
	write8(ctx, WR.HL, doSetRes(ctx, SR_RES, 1, read8(ctx, WR.HL)));
   11c54:	e1d050b6 	ldrh	r5, [r0, #6]
   11c58:	e2833004 	add	r3, r3, #4
   11c5c:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   11c60:	e1a01005 	mov	r1, r5
   11c64:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   11c68:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   11c6c:	e12fff33 	blx	r3
	ctx->tstates += 3;
   11c70:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	ctx->memWrite(ctx->memParam, addr, val);	
   11c74:	e20020fd 	and	r2, r0, #253	; 0xfd
	ctx->tstates += 3;
   11c78:	e2833003 	add	r3, r3, #3
   11c7c:	e5843040 	str	r3, [r4, #64]	; 0x40
	ctx->memWrite(ctx->memParam, addr, val);	
   11c80:	e1a01005 	mov	r1, r5
   11c84:	e5943028 	ldr	r3, [r4, #40]	; 0x28
   11c88:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
}
   11c8c:	e8bd4070 	pop	{r4, r5, r6, lr}
   11c90:	e12fff13 	bx	r3

00011c94 <RES_1_off_IX_d>:


static void RES_1_off_IX_d (Z80Context* ctx)
{
	ctx->tstates += 2;
	char off = read8(ctx, ctx->PC++);
   11c94:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
   11c98:	e5903040 	ldr	r3, [r0, #64]	; 0x40
{
   11c9c:	e92d4070 	push	{r4, r5, r6, lr}
	char off = read8(ctx, ctx->PC++);
   11ca0:	e2812001 	add	r2, r1, #1
{
   11ca4:	e1a04000 	mov	r4, r0
	ctx->tstates += 3;
   11ca8:	e2833005 	add	r3, r3, #5
	char off = read8(ctx, ctx->PC++);
   11cac:	e1c021bc 	strh	r2, [r0, #28]
   11cb0:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   11cb4:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   11cb8:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   11cbc:	e12fff33 	blx	r3
	write8(ctx, WR.IX + off, doSetRes(ctx, SR_RES, 1, read8(ctx, WR.IX + off)));
   11cc0:	e1d450b8 	ldrh	r5, [r4, #8]
	ctx->tstates += 3;
   11cc4:	e5943040 	ldr	r3, [r4, #64]	; 0x40
   11cc8:	e0855000 	add	r5, r5, r0
   11ccc:	e6ff5075 	uxth	r5, r5
   11cd0:	e2833003 	add	r3, r3, #3
   11cd4:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   11cd8:	e1a01005 	mov	r1, r5
   11cdc:	e5943024 	ldr	r3, [r4, #36]	; 0x24
   11ce0:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   11ce4:	e12fff33 	blx	r3
	ctx->tstates += 3;
   11ce8:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	ctx->memWrite(ctx->memParam, addr, val);	
   11cec:	e20020fd 	and	r2, r0, #253	; 0xfd
	ctx->tstates += 3;
   11cf0:	e2833003 	add	r3, r3, #3
   11cf4:	e5843040 	str	r3, [r4, #64]	; 0x40
	ctx->memWrite(ctx->memParam, addr, val);	
   11cf8:	e1a01005 	mov	r1, r5
   11cfc:	e5943028 	ldr	r3, [r4, #40]	; 0x28
   11d00:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
	
	
}
   11d04:	e8bd4070 	pop	{r4, r5, r6, lr}
   11d08:	e12fff13 	bx	r3

00011d0c <RES_1_off_IY_d>:


static void RES_1_off_IY_d (Z80Context* ctx)
{
	ctx->tstates += 2;
	char off = read8(ctx, ctx->PC++);
   11d0c:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
   11d10:	e5903040 	ldr	r3, [r0, #64]	; 0x40
{
   11d14:	e92d4070 	push	{r4, r5, r6, lr}
	char off = read8(ctx, ctx->PC++);
   11d18:	e2812001 	add	r2, r1, #1
{
   11d1c:	e1a04000 	mov	r4, r0
	ctx->tstates += 3;
   11d20:	e2833005 	add	r3, r3, #5
	char off = read8(ctx, ctx->PC++);
   11d24:	e1c021bc 	strh	r2, [r0, #28]
   11d28:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   11d2c:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   11d30:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   11d34:	e12fff33 	blx	r3
	write8(ctx, WR.IY + off, doSetRes(ctx, SR_RES, 1, read8(ctx, WR.IY + off)));
   11d38:	e1d450ba 	ldrh	r5, [r4, #10]
	ctx->tstates += 3;
   11d3c:	e5943040 	ldr	r3, [r4, #64]	; 0x40
   11d40:	e0855000 	add	r5, r5, r0
   11d44:	e6ff5075 	uxth	r5, r5
   11d48:	e2833003 	add	r3, r3, #3
   11d4c:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   11d50:	e1a01005 	mov	r1, r5
   11d54:	e5943024 	ldr	r3, [r4, #36]	; 0x24
   11d58:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   11d5c:	e12fff33 	blx	r3
	ctx->tstates += 3;
   11d60:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	ctx->memWrite(ctx->memParam, addr, val);	
   11d64:	e20020fd 	and	r2, r0, #253	; 0xfd
	ctx->tstates += 3;
   11d68:	e2833003 	add	r3, r3, #3
   11d6c:	e5843040 	str	r3, [r4, #64]	; 0x40
	ctx->memWrite(ctx->memParam, addr, val);	
   11d70:	e1a01005 	mov	r1, r5
   11d74:	e5943028 	ldr	r3, [r4, #40]	; 0x28
   11d78:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
	
	
}
   11d7c:	e8bd4070 	pop	{r4, r5, r6, lr}
   11d80:	e12fff13 	bx	r3

00011d84 <RES_1_A>:
		val &= ~(1 << pos);
   11d84:	e5d03001 	ldrb	r3, [r0, #1]
   11d88:	e3c33002 	bic	r3, r3, #2


static void RES_1_A (Z80Context* ctx)
{
	BR.A = doSetRes(ctx, SR_RES, 1, BR.A);
   11d8c:	e5c03001 	strb	r3, [r0, #1]
}
   11d90:	e12fff1e 	bx	lr

00011d94 <RES_1_B>:
   11d94:	e5d03003 	ldrb	r3, [r0, #3]
   11d98:	e3c33002 	bic	r3, r3, #2


static void RES_1_B (Z80Context* ctx)
{
	BR.B = doSetRes(ctx, SR_RES, 1, BR.B);
   11d9c:	e5c03003 	strb	r3, [r0, #3]
}
   11da0:	e12fff1e 	bx	lr

00011da4 <RES_1_C>:
   11da4:	e5d03002 	ldrb	r3, [r0, #2]
   11da8:	e3c33002 	bic	r3, r3, #2


static void RES_1_C (Z80Context* ctx)
{
	BR.C = doSetRes(ctx, SR_RES, 1, BR.C);
   11dac:	e5c03002 	strb	r3, [r0, #2]
}
   11db0:	e12fff1e 	bx	lr

00011db4 <RES_1_D>:
   11db4:	e5d03005 	ldrb	r3, [r0, #5]
   11db8:	e3c33002 	bic	r3, r3, #2


static void RES_1_D (Z80Context* ctx)
{
	BR.D = doSetRes(ctx, SR_RES, 1, BR.D);
   11dbc:	e5c03005 	strb	r3, [r0, #5]
}
   11dc0:	e12fff1e 	bx	lr

00011dc4 <RES_1_E>:
   11dc4:	e5d03004 	ldrb	r3, [r0, #4]
   11dc8:	e3c33002 	bic	r3, r3, #2


static void RES_1_E (Z80Context* ctx)
{
	BR.E = doSetRes(ctx, SR_RES, 1, BR.E);
   11dcc:	e5c03004 	strb	r3, [r0, #4]
}
   11dd0:	e12fff1e 	bx	lr

00011dd4 <RES_1_H>:
   11dd4:	e5d03007 	ldrb	r3, [r0, #7]
   11dd8:	e3c33002 	bic	r3, r3, #2


static void RES_1_H (Z80Context* ctx)
{
	BR.H = doSetRes(ctx, SR_RES, 1, BR.H);
   11ddc:	e5c03007 	strb	r3, [r0, #7]
}
   11de0:	e12fff1e 	bx	lr

00011de4 <RES_1_L>:
   11de4:	e5d03006 	ldrb	r3, [r0, #6]
   11de8:	e3c33002 	bic	r3, r3, #2


static void RES_1_L (Z80Context* ctx)
{
	BR.L = doSetRes(ctx, SR_RES, 1, BR.L);
   11dec:	e5c03006 	strb	r3, [r0, #6]
}
   11df0:	e12fff1e 	bx	lr

00011df4 <RES_2_off_HL>:
	ctx->tstates += 3;
   11df4:	e5903040 	ldr	r3, [r0, #64]	; 0x40


static void RES_2_off_HL (Z80Context* ctx)
{
   11df8:	e92d4070 	push	{r4, r5, r6, lr}
   11dfc:	e1a04000 	mov	r4, r0
	ctx->tstates += 1;
	write8(ctx, WR.HL, doSetRes(ctx, SR_RES, 2, read8(ctx, WR.HL)));
   11e00:	e1d050b6 	ldrh	r5, [r0, #6]
   11e04:	e2833004 	add	r3, r3, #4
   11e08:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   11e0c:	e1a01005 	mov	r1, r5
   11e10:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   11e14:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   11e18:	e12fff33 	blx	r3
	ctx->tstates += 3;
   11e1c:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	ctx->memWrite(ctx->memParam, addr, val);	
   11e20:	e20020fb 	and	r2, r0, #251	; 0xfb
	ctx->tstates += 3;
   11e24:	e2833003 	add	r3, r3, #3
   11e28:	e5843040 	str	r3, [r4, #64]	; 0x40
	ctx->memWrite(ctx->memParam, addr, val);	
   11e2c:	e1a01005 	mov	r1, r5
   11e30:	e5943028 	ldr	r3, [r4, #40]	; 0x28
   11e34:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
}
   11e38:	e8bd4070 	pop	{r4, r5, r6, lr}
   11e3c:	e12fff13 	bx	r3

00011e40 <RES_2_off_IX_d>:


static void RES_2_off_IX_d (Z80Context* ctx)
{
	ctx->tstates += 2;
	char off = read8(ctx, ctx->PC++);
   11e40:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
   11e44:	e5903040 	ldr	r3, [r0, #64]	; 0x40
{
   11e48:	e92d4070 	push	{r4, r5, r6, lr}
	char off = read8(ctx, ctx->PC++);
   11e4c:	e2812001 	add	r2, r1, #1
{
   11e50:	e1a04000 	mov	r4, r0
	ctx->tstates += 3;
   11e54:	e2833005 	add	r3, r3, #5
	char off = read8(ctx, ctx->PC++);
   11e58:	e1c021bc 	strh	r2, [r0, #28]
   11e5c:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   11e60:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   11e64:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   11e68:	e12fff33 	blx	r3
	write8(ctx, WR.IX + off, doSetRes(ctx, SR_RES, 2, read8(ctx, WR.IX + off)));
   11e6c:	e1d450b8 	ldrh	r5, [r4, #8]
	ctx->tstates += 3;
   11e70:	e5943040 	ldr	r3, [r4, #64]	; 0x40
   11e74:	e0855000 	add	r5, r5, r0
   11e78:	e6ff5075 	uxth	r5, r5
   11e7c:	e2833003 	add	r3, r3, #3
   11e80:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   11e84:	e1a01005 	mov	r1, r5
   11e88:	e5943024 	ldr	r3, [r4, #36]	; 0x24
   11e8c:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   11e90:	e12fff33 	blx	r3
	ctx->tstates += 3;
   11e94:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	ctx->memWrite(ctx->memParam, addr, val);	
   11e98:	e20020fb 	and	r2, r0, #251	; 0xfb
	ctx->tstates += 3;
   11e9c:	e2833003 	add	r3, r3, #3
   11ea0:	e5843040 	str	r3, [r4, #64]	; 0x40
	ctx->memWrite(ctx->memParam, addr, val);	
   11ea4:	e1a01005 	mov	r1, r5
   11ea8:	e5943028 	ldr	r3, [r4, #40]	; 0x28
   11eac:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
	
	
}
   11eb0:	e8bd4070 	pop	{r4, r5, r6, lr}
   11eb4:	e12fff13 	bx	r3

00011eb8 <RES_2_off_IY_d>:


static void RES_2_off_IY_d (Z80Context* ctx)
{
	ctx->tstates += 2;
	char off = read8(ctx, ctx->PC++);
   11eb8:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
   11ebc:	e5903040 	ldr	r3, [r0, #64]	; 0x40
{
   11ec0:	e92d4070 	push	{r4, r5, r6, lr}
	char off = read8(ctx, ctx->PC++);
   11ec4:	e2812001 	add	r2, r1, #1
{
   11ec8:	e1a04000 	mov	r4, r0
	ctx->tstates += 3;
   11ecc:	e2833005 	add	r3, r3, #5
	char off = read8(ctx, ctx->PC++);
   11ed0:	e1c021bc 	strh	r2, [r0, #28]
   11ed4:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   11ed8:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   11edc:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   11ee0:	e12fff33 	blx	r3
	write8(ctx, WR.IY + off, doSetRes(ctx, SR_RES, 2, read8(ctx, WR.IY + off)));
   11ee4:	e1d450ba 	ldrh	r5, [r4, #10]
	ctx->tstates += 3;
   11ee8:	e5943040 	ldr	r3, [r4, #64]	; 0x40
   11eec:	e0855000 	add	r5, r5, r0
   11ef0:	e6ff5075 	uxth	r5, r5
   11ef4:	e2833003 	add	r3, r3, #3
   11ef8:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   11efc:	e1a01005 	mov	r1, r5
   11f00:	e5943024 	ldr	r3, [r4, #36]	; 0x24
   11f04:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   11f08:	e12fff33 	blx	r3
	ctx->tstates += 3;
   11f0c:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	ctx->memWrite(ctx->memParam, addr, val);	
   11f10:	e20020fb 	and	r2, r0, #251	; 0xfb
	ctx->tstates += 3;
   11f14:	e2833003 	add	r3, r3, #3
   11f18:	e5843040 	str	r3, [r4, #64]	; 0x40
	ctx->memWrite(ctx->memParam, addr, val);	
   11f1c:	e1a01005 	mov	r1, r5
   11f20:	e5943028 	ldr	r3, [r4, #40]	; 0x28
   11f24:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
	
	
}
   11f28:	e8bd4070 	pop	{r4, r5, r6, lr}
   11f2c:	e12fff13 	bx	r3

00011f30 <RES_2_A>:
		val &= ~(1 << pos);
   11f30:	e5d03001 	ldrb	r3, [r0, #1]
   11f34:	e3c33004 	bic	r3, r3, #4


static void RES_2_A (Z80Context* ctx)
{
	BR.A = doSetRes(ctx, SR_RES, 2, BR.A);
   11f38:	e5c03001 	strb	r3, [r0, #1]
}
   11f3c:	e12fff1e 	bx	lr

00011f40 <RES_2_B>:
   11f40:	e5d03003 	ldrb	r3, [r0, #3]
   11f44:	e3c33004 	bic	r3, r3, #4


static void RES_2_B (Z80Context* ctx)
{
	BR.B = doSetRes(ctx, SR_RES, 2, BR.B);
   11f48:	e5c03003 	strb	r3, [r0, #3]
}
   11f4c:	e12fff1e 	bx	lr

00011f50 <RES_2_C>:
   11f50:	e5d03002 	ldrb	r3, [r0, #2]
   11f54:	e3c33004 	bic	r3, r3, #4


static void RES_2_C (Z80Context* ctx)
{
	BR.C = doSetRes(ctx, SR_RES, 2, BR.C);
   11f58:	e5c03002 	strb	r3, [r0, #2]
}
   11f5c:	e12fff1e 	bx	lr

00011f60 <RES_2_D>:
   11f60:	e5d03005 	ldrb	r3, [r0, #5]
   11f64:	e3c33004 	bic	r3, r3, #4


static void RES_2_D (Z80Context* ctx)
{
	BR.D = doSetRes(ctx, SR_RES, 2, BR.D);
   11f68:	e5c03005 	strb	r3, [r0, #5]
}
   11f6c:	e12fff1e 	bx	lr

00011f70 <RES_2_E>:
   11f70:	e5d03004 	ldrb	r3, [r0, #4]
   11f74:	e3c33004 	bic	r3, r3, #4


static void RES_2_E (Z80Context* ctx)
{
	BR.E = doSetRes(ctx, SR_RES, 2, BR.E);
   11f78:	e5c03004 	strb	r3, [r0, #4]
}
   11f7c:	e12fff1e 	bx	lr

00011f80 <RES_2_H>:
   11f80:	e5d03007 	ldrb	r3, [r0, #7]
   11f84:	e3c33004 	bic	r3, r3, #4


static void RES_2_H (Z80Context* ctx)
{
	BR.H = doSetRes(ctx, SR_RES, 2, BR.H);
   11f88:	e5c03007 	strb	r3, [r0, #7]
}
   11f8c:	e12fff1e 	bx	lr

00011f90 <RES_2_L>:
   11f90:	e5d03006 	ldrb	r3, [r0, #6]
   11f94:	e3c33004 	bic	r3, r3, #4


static void RES_2_L (Z80Context* ctx)
{
	BR.L = doSetRes(ctx, SR_RES, 2, BR.L);
   11f98:	e5c03006 	strb	r3, [r0, #6]
}
   11f9c:	e12fff1e 	bx	lr

00011fa0 <RES_3_off_HL>:
	ctx->tstates += 3;
   11fa0:	e5903040 	ldr	r3, [r0, #64]	; 0x40


static void RES_3_off_HL (Z80Context* ctx)
{
   11fa4:	e92d4070 	push	{r4, r5, r6, lr}
   11fa8:	e1a04000 	mov	r4, r0
	ctx->tstates += 1;
	write8(ctx, WR.HL, doSetRes(ctx, SR_RES, 3, read8(ctx, WR.HL)));
   11fac:	e1d050b6 	ldrh	r5, [r0, #6]
   11fb0:	e2833004 	add	r3, r3, #4
   11fb4:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   11fb8:	e1a01005 	mov	r1, r5
   11fbc:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   11fc0:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   11fc4:	e12fff33 	blx	r3
	ctx->tstates += 3;
   11fc8:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	ctx->memWrite(ctx->memParam, addr, val);	
   11fcc:	e20020f7 	and	r2, r0, #247	; 0xf7
	ctx->tstates += 3;
   11fd0:	e2833003 	add	r3, r3, #3
   11fd4:	e5843040 	str	r3, [r4, #64]	; 0x40
	ctx->memWrite(ctx->memParam, addr, val);	
   11fd8:	e1a01005 	mov	r1, r5
   11fdc:	e5943028 	ldr	r3, [r4, #40]	; 0x28
   11fe0:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
}
   11fe4:	e8bd4070 	pop	{r4, r5, r6, lr}
   11fe8:	e12fff13 	bx	r3

00011fec <RES_3_off_IX_d>:


static void RES_3_off_IX_d (Z80Context* ctx)
{
	ctx->tstates += 2;
	char off = read8(ctx, ctx->PC++);
   11fec:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
   11ff0:	e5903040 	ldr	r3, [r0, #64]	; 0x40
{
   11ff4:	e92d4070 	push	{r4, r5, r6, lr}
	char off = read8(ctx, ctx->PC++);
   11ff8:	e2812001 	add	r2, r1, #1
{
   11ffc:	e1a04000 	mov	r4, r0
	ctx->tstates += 3;
   12000:	e2833005 	add	r3, r3, #5
	char off = read8(ctx, ctx->PC++);
   12004:	e1c021bc 	strh	r2, [r0, #28]
   12008:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   1200c:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   12010:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   12014:	e12fff33 	blx	r3
	write8(ctx, WR.IX + off, doSetRes(ctx, SR_RES, 3, read8(ctx, WR.IX + off)));
   12018:	e1d450b8 	ldrh	r5, [r4, #8]
	ctx->tstates += 3;
   1201c:	e5943040 	ldr	r3, [r4, #64]	; 0x40
   12020:	e0855000 	add	r5, r5, r0
   12024:	e6ff5075 	uxth	r5, r5
   12028:	e2833003 	add	r3, r3, #3
   1202c:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   12030:	e1a01005 	mov	r1, r5
   12034:	e5943024 	ldr	r3, [r4, #36]	; 0x24
   12038:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   1203c:	e12fff33 	blx	r3
	ctx->tstates += 3;
   12040:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	ctx->memWrite(ctx->memParam, addr, val);	
   12044:	e20020f7 	and	r2, r0, #247	; 0xf7
	ctx->tstates += 3;
   12048:	e2833003 	add	r3, r3, #3
   1204c:	e5843040 	str	r3, [r4, #64]	; 0x40
	ctx->memWrite(ctx->memParam, addr, val);	
   12050:	e1a01005 	mov	r1, r5
   12054:	e5943028 	ldr	r3, [r4, #40]	; 0x28
   12058:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
	
	
}
   1205c:	e8bd4070 	pop	{r4, r5, r6, lr}
   12060:	e12fff13 	bx	r3

00012064 <RES_3_off_IY_d>:


static void RES_3_off_IY_d (Z80Context* ctx)
{
	ctx->tstates += 2;
	char off = read8(ctx, ctx->PC++);
   12064:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
   12068:	e5903040 	ldr	r3, [r0, #64]	; 0x40
{
   1206c:	e92d4070 	push	{r4, r5, r6, lr}
	char off = read8(ctx, ctx->PC++);
   12070:	e2812001 	add	r2, r1, #1
{
   12074:	e1a04000 	mov	r4, r0
	ctx->tstates += 3;
   12078:	e2833005 	add	r3, r3, #5
	char off = read8(ctx, ctx->PC++);
   1207c:	e1c021bc 	strh	r2, [r0, #28]
   12080:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   12084:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   12088:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   1208c:	e12fff33 	blx	r3
	write8(ctx, WR.IY + off, doSetRes(ctx, SR_RES, 3, read8(ctx, WR.IY + off)));
   12090:	e1d450ba 	ldrh	r5, [r4, #10]
	ctx->tstates += 3;
   12094:	e5943040 	ldr	r3, [r4, #64]	; 0x40
   12098:	e0855000 	add	r5, r5, r0
   1209c:	e6ff5075 	uxth	r5, r5
   120a0:	e2833003 	add	r3, r3, #3
   120a4:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   120a8:	e1a01005 	mov	r1, r5
   120ac:	e5943024 	ldr	r3, [r4, #36]	; 0x24
   120b0:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   120b4:	e12fff33 	blx	r3
	ctx->tstates += 3;
   120b8:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	ctx->memWrite(ctx->memParam, addr, val);	
   120bc:	e20020f7 	and	r2, r0, #247	; 0xf7
	ctx->tstates += 3;
   120c0:	e2833003 	add	r3, r3, #3
   120c4:	e5843040 	str	r3, [r4, #64]	; 0x40
	ctx->memWrite(ctx->memParam, addr, val);	
   120c8:	e1a01005 	mov	r1, r5
   120cc:	e5943028 	ldr	r3, [r4, #40]	; 0x28
   120d0:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
	
	
}
   120d4:	e8bd4070 	pop	{r4, r5, r6, lr}
   120d8:	e12fff13 	bx	r3

000120dc <RES_3_A>:
		val &= ~(1 << pos);
   120dc:	e5d03001 	ldrb	r3, [r0, #1]
   120e0:	e3c33008 	bic	r3, r3, #8


static void RES_3_A (Z80Context* ctx)
{
	BR.A = doSetRes(ctx, SR_RES, 3, BR.A);
   120e4:	e5c03001 	strb	r3, [r0, #1]
}
   120e8:	e12fff1e 	bx	lr

000120ec <RES_3_B>:
   120ec:	e5d03003 	ldrb	r3, [r0, #3]
   120f0:	e3c33008 	bic	r3, r3, #8


static void RES_3_B (Z80Context* ctx)
{
	BR.B = doSetRes(ctx, SR_RES, 3, BR.B);
   120f4:	e5c03003 	strb	r3, [r0, #3]
}
   120f8:	e12fff1e 	bx	lr

000120fc <RES_3_C>:
   120fc:	e5d03002 	ldrb	r3, [r0, #2]
   12100:	e3c33008 	bic	r3, r3, #8


static void RES_3_C (Z80Context* ctx)
{
	BR.C = doSetRes(ctx, SR_RES, 3, BR.C);
   12104:	e5c03002 	strb	r3, [r0, #2]
}
   12108:	e12fff1e 	bx	lr

0001210c <RES_3_D>:
   1210c:	e5d03005 	ldrb	r3, [r0, #5]
   12110:	e3c33008 	bic	r3, r3, #8


static void RES_3_D (Z80Context* ctx)
{
	BR.D = doSetRes(ctx, SR_RES, 3, BR.D);
   12114:	e5c03005 	strb	r3, [r0, #5]
}
   12118:	e12fff1e 	bx	lr

0001211c <RES_3_E>:
   1211c:	e5d03004 	ldrb	r3, [r0, #4]
   12120:	e3c33008 	bic	r3, r3, #8


static void RES_3_E (Z80Context* ctx)
{
	BR.E = doSetRes(ctx, SR_RES, 3, BR.E);
   12124:	e5c03004 	strb	r3, [r0, #4]
}
   12128:	e12fff1e 	bx	lr

0001212c <RES_3_H>:
   1212c:	e5d03007 	ldrb	r3, [r0, #7]
   12130:	e3c33008 	bic	r3, r3, #8


static void RES_3_H (Z80Context* ctx)
{
	BR.H = doSetRes(ctx, SR_RES, 3, BR.H);
   12134:	e5c03007 	strb	r3, [r0, #7]
}
   12138:	e12fff1e 	bx	lr

0001213c <RES_3_L>:
   1213c:	e5d03006 	ldrb	r3, [r0, #6]
   12140:	e3c33008 	bic	r3, r3, #8


static void RES_3_L (Z80Context* ctx)
{
	BR.L = doSetRes(ctx, SR_RES, 3, BR.L);
   12144:	e5c03006 	strb	r3, [r0, #6]
}
   12148:	e12fff1e 	bx	lr

0001214c <RES_4_off_HL>:
	ctx->tstates += 3;
   1214c:	e5903040 	ldr	r3, [r0, #64]	; 0x40


static void RES_4_off_HL (Z80Context* ctx)
{
   12150:	e92d4070 	push	{r4, r5, r6, lr}
   12154:	e1a04000 	mov	r4, r0
	ctx->tstates += 1;
	write8(ctx, WR.HL, doSetRes(ctx, SR_RES, 4, read8(ctx, WR.HL)));
   12158:	e1d050b6 	ldrh	r5, [r0, #6]
   1215c:	e2833004 	add	r3, r3, #4
   12160:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   12164:	e1a01005 	mov	r1, r5
   12168:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   1216c:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   12170:	e12fff33 	blx	r3
	ctx->tstates += 3;
   12174:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	ctx->memWrite(ctx->memParam, addr, val);	
   12178:	e20020ef 	and	r2, r0, #239	; 0xef
	ctx->tstates += 3;
   1217c:	e2833003 	add	r3, r3, #3
   12180:	e5843040 	str	r3, [r4, #64]	; 0x40
	ctx->memWrite(ctx->memParam, addr, val);	
   12184:	e1a01005 	mov	r1, r5
   12188:	e5943028 	ldr	r3, [r4, #40]	; 0x28
   1218c:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
}
   12190:	e8bd4070 	pop	{r4, r5, r6, lr}
   12194:	e12fff13 	bx	r3

00012198 <RES_4_off_IX_d>:


static void RES_4_off_IX_d (Z80Context* ctx)
{
	ctx->tstates += 2;
	char off = read8(ctx, ctx->PC++);
   12198:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
   1219c:	e5903040 	ldr	r3, [r0, #64]	; 0x40
{
   121a0:	e92d4070 	push	{r4, r5, r6, lr}
	char off = read8(ctx, ctx->PC++);
   121a4:	e2812001 	add	r2, r1, #1
{
   121a8:	e1a04000 	mov	r4, r0
	ctx->tstates += 3;
   121ac:	e2833005 	add	r3, r3, #5
	char off = read8(ctx, ctx->PC++);
   121b0:	e1c021bc 	strh	r2, [r0, #28]
   121b4:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   121b8:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   121bc:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   121c0:	e12fff33 	blx	r3
	write8(ctx, WR.IX + off, doSetRes(ctx, SR_RES, 4, read8(ctx, WR.IX + off)));
   121c4:	e1d450b8 	ldrh	r5, [r4, #8]
	ctx->tstates += 3;
   121c8:	e5943040 	ldr	r3, [r4, #64]	; 0x40
   121cc:	e0855000 	add	r5, r5, r0
   121d0:	e6ff5075 	uxth	r5, r5
   121d4:	e2833003 	add	r3, r3, #3
   121d8:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   121dc:	e1a01005 	mov	r1, r5
   121e0:	e5943024 	ldr	r3, [r4, #36]	; 0x24
   121e4:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   121e8:	e12fff33 	blx	r3
	ctx->tstates += 3;
   121ec:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	ctx->memWrite(ctx->memParam, addr, val);	
   121f0:	e20020ef 	and	r2, r0, #239	; 0xef
	ctx->tstates += 3;
   121f4:	e2833003 	add	r3, r3, #3
   121f8:	e5843040 	str	r3, [r4, #64]	; 0x40
	ctx->memWrite(ctx->memParam, addr, val);	
   121fc:	e1a01005 	mov	r1, r5
   12200:	e5943028 	ldr	r3, [r4, #40]	; 0x28
   12204:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
	
	
}
   12208:	e8bd4070 	pop	{r4, r5, r6, lr}
   1220c:	e12fff13 	bx	r3

00012210 <RES_4_off_IY_d>:


static void RES_4_off_IY_d (Z80Context* ctx)
{
	ctx->tstates += 2;
	char off = read8(ctx, ctx->PC++);
   12210:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
   12214:	e5903040 	ldr	r3, [r0, #64]	; 0x40
{
   12218:	e92d4070 	push	{r4, r5, r6, lr}
	char off = read8(ctx, ctx->PC++);
   1221c:	e2812001 	add	r2, r1, #1
{
   12220:	e1a04000 	mov	r4, r0
	ctx->tstates += 3;
   12224:	e2833005 	add	r3, r3, #5
	char off = read8(ctx, ctx->PC++);
   12228:	e1c021bc 	strh	r2, [r0, #28]
   1222c:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   12230:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   12234:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   12238:	e12fff33 	blx	r3
	write8(ctx, WR.IY + off, doSetRes(ctx, SR_RES, 4, read8(ctx, WR.IY + off)));
   1223c:	e1d450ba 	ldrh	r5, [r4, #10]
	ctx->tstates += 3;
   12240:	e5943040 	ldr	r3, [r4, #64]	; 0x40
   12244:	e0855000 	add	r5, r5, r0
   12248:	e6ff5075 	uxth	r5, r5
   1224c:	e2833003 	add	r3, r3, #3
   12250:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   12254:	e1a01005 	mov	r1, r5
   12258:	e5943024 	ldr	r3, [r4, #36]	; 0x24
   1225c:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   12260:	e12fff33 	blx	r3
	ctx->tstates += 3;
   12264:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	ctx->memWrite(ctx->memParam, addr, val);	
   12268:	e20020ef 	and	r2, r0, #239	; 0xef
	ctx->tstates += 3;
   1226c:	e2833003 	add	r3, r3, #3
   12270:	e5843040 	str	r3, [r4, #64]	; 0x40
	ctx->memWrite(ctx->memParam, addr, val);	
   12274:	e1a01005 	mov	r1, r5
   12278:	e5943028 	ldr	r3, [r4, #40]	; 0x28
   1227c:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
	
	
}
   12280:	e8bd4070 	pop	{r4, r5, r6, lr}
   12284:	e12fff13 	bx	r3

00012288 <RES_4_A>:
		val &= ~(1 << pos);
   12288:	e5d03001 	ldrb	r3, [r0, #1]
   1228c:	e3c33010 	bic	r3, r3, #16


static void RES_4_A (Z80Context* ctx)
{
	BR.A = doSetRes(ctx, SR_RES, 4, BR.A);
   12290:	e5c03001 	strb	r3, [r0, #1]
}
   12294:	e12fff1e 	bx	lr

00012298 <RES_4_B>:
   12298:	e5d03003 	ldrb	r3, [r0, #3]
   1229c:	e3c33010 	bic	r3, r3, #16


static void RES_4_B (Z80Context* ctx)
{
	BR.B = doSetRes(ctx, SR_RES, 4, BR.B);
   122a0:	e5c03003 	strb	r3, [r0, #3]
}
   122a4:	e12fff1e 	bx	lr

000122a8 <RES_4_C>:
   122a8:	e5d03002 	ldrb	r3, [r0, #2]
   122ac:	e3c33010 	bic	r3, r3, #16


static void RES_4_C (Z80Context* ctx)
{
	BR.C = doSetRes(ctx, SR_RES, 4, BR.C);
   122b0:	e5c03002 	strb	r3, [r0, #2]
}
   122b4:	e12fff1e 	bx	lr

000122b8 <RES_4_D>:
   122b8:	e5d03005 	ldrb	r3, [r0, #5]
   122bc:	e3c33010 	bic	r3, r3, #16


static void RES_4_D (Z80Context* ctx)
{
	BR.D = doSetRes(ctx, SR_RES, 4, BR.D);
   122c0:	e5c03005 	strb	r3, [r0, #5]
}
   122c4:	e12fff1e 	bx	lr

000122c8 <RES_4_E>:
   122c8:	e5d03004 	ldrb	r3, [r0, #4]
   122cc:	e3c33010 	bic	r3, r3, #16


static void RES_4_E (Z80Context* ctx)
{
	BR.E = doSetRes(ctx, SR_RES, 4, BR.E);
   122d0:	e5c03004 	strb	r3, [r0, #4]
}
   122d4:	e12fff1e 	bx	lr

000122d8 <RES_4_H>:
   122d8:	e5d03007 	ldrb	r3, [r0, #7]
   122dc:	e3c33010 	bic	r3, r3, #16


static void RES_4_H (Z80Context* ctx)
{
	BR.H = doSetRes(ctx, SR_RES, 4, BR.H);
   122e0:	e5c03007 	strb	r3, [r0, #7]
}
   122e4:	e12fff1e 	bx	lr

000122e8 <RES_4_L>:
   122e8:	e5d03006 	ldrb	r3, [r0, #6]
   122ec:	e3c33010 	bic	r3, r3, #16


static void RES_4_L (Z80Context* ctx)
{
	BR.L = doSetRes(ctx, SR_RES, 4, BR.L);
   122f0:	e5c03006 	strb	r3, [r0, #6]
}
   122f4:	e12fff1e 	bx	lr

000122f8 <RES_5_off_HL>:
	ctx->tstates += 3;
   122f8:	e5903040 	ldr	r3, [r0, #64]	; 0x40


static void RES_5_off_HL (Z80Context* ctx)
{
   122fc:	e92d4070 	push	{r4, r5, r6, lr}
   12300:	e1a04000 	mov	r4, r0
	ctx->tstates += 1;
	write8(ctx, WR.HL, doSetRes(ctx, SR_RES, 5, read8(ctx, WR.HL)));
   12304:	e1d050b6 	ldrh	r5, [r0, #6]
   12308:	e2833004 	add	r3, r3, #4
   1230c:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   12310:	e1a01005 	mov	r1, r5
   12314:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   12318:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   1231c:	e12fff33 	blx	r3
	ctx->tstates += 3;
   12320:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	ctx->memWrite(ctx->memParam, addr, val);	
   12324:	e20020df 	and	r2, r0, #223	; 0xdf
	ctx->tstates += 3;
   12328:	e2833003 	add	r3, r3, #3
   1232c:	e5843040 	str	r3, [r4, #64]	; 0x40
	ctx->memWrite(ctx->memParam, addr, val);	
   12330:	e1a01005 	mov	r1, r5
   12334:	e5943028 	ldr	r3, [r4, #40]	; 0x28
   12338:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
}
   1233c:	e8bd4070 	pop	{r4, r5, r6, lr}
   12340:	e12fff13 	bx	r3

00012344 <RES_5_off_IX_d>:


static void RES_5_off_IX_d (Z80Context* ctx)
{
	ctx->tstates += 2;
	char off = read8(ctx, ctx->PC++);
   12344:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
   12348:	e5903040 	ldr	r3, [r0, #64]	; 0x40
{
   1234c:	e92d4070 	push	{r4, r5, r6, lr}
	char off = read8(ctx, ctx->PC++);
   12350:	e2812001 	add	r2, r1, #1
{
   12354:	e1a04000 	mov	r4, r0
	ctx->tstates += 3;
   12358:	e2833005 	add	r3, r3, #5
	char off = read8(ctx, ctx->PC++);
   1235c:	e1c021bc 	strh	r2, [r0, #28]
   12360:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   12364:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   12368:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   1236c:	e12fff33 	blx	r3
	write8(ctx, WR.IX + off, doSetRes(ctx, SR_RES, 5, read8(ctx, WR.IX + off)));
   12370:	e1d450b8 	ldrh	r5, [r4, #8]
	ctx->tstates += 3;
   12374:	e5943040 	ldr	r3, [r4, #64]	; 0x40
   12378:	e0855000 	add	r5, r5, r0
   1237c:	e6ff5075 	uxth	r5, r5
   12380:	e2833003 	add	r3, r3, #3
   12384:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   12388:	e1a01005 	mov	r1, r5
   1238c:	e5943024 	ldr	r3, [r4, #36]	; 0x24
   12390:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   12394:	e12fff33 	blx	r3
	ctx->tstates += 3;
   12398:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	ctx->memWrite(ctx->memParam, addr, val);	
   1239c:	e20020df 	and	r2, r0, #223	; 0xdf
	ctx->tstates += 3;
   123a0:	e2833003 	add	r3, r3, #3
   123a4:	e5843040 	str	r3, [r4, #64]	; 0x40
	ctx->memWrite(ctx->memParam, addr, val);	
   123a8:	e1a01005 	mov	r1, r5
   123ac:	e5943028 	ldr	r3, [r4, #40]	; 0x28
   123b0:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
	
	
}
   123b4:	e8bd4070 	pop	{r4, r5, r6, lr}
   123b8:	e12fff13 	bx	r3

000123bc <RES_5_off_IY_d>:


static void RES_5_off_IY_d (Z80Context* ctx)
{
	ctx->tstates += 2;
	char off = read8(ctx, ctx->PC++);
   123bc:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
   123c0:	e5903040 	ldr	r3, [r0, #64]	; 0x40
{
   123c4:	e92d4070 	push	{r4, r5, r6, lr}
	char off = read8(ctx, ctx->PC++);
   123c8:	e2812001 	add	r2, r1, #1
{
   123cc:	e1a04000 	mov	r4, r0
	ctx->tstates += 3;
   123d0:	e2833005 	add	r3, r3, #5
	char off = read8(ctx, ctx->PC++);
   123d4:	e1c021bc 	strh	r2, [r0, #28]
   123d8:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   123dc:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   123e0:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   123e4:	e12fff33 	blx	r3
	write8(ctx, WR.IY + off, doSetRes(ctx, SR_RES, 5, read8(ctx, WR.IY + off)));
   123e8:	e1d450ba 	ldrh	r5, [r4, #10]
	ctx->tstates += 3;
   123ec:	e5943040 	ldr	r3, [r4, #64]	; 0x40
   123f0:	e0855000 	add	r5, r5, r0
   123f4:	e6ff5075 	uxth	r5, r5
   123f8:	e2833003 	add	r3, r3, #3
   123fc:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   12400:	e1a01005 	mov	r1, r5
   12404:	e5943024 	ldr	r3, [r4, #36]	; 0x24
   12408:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   1240c:	e12fff33 	blx	r3
	ctx->tstates += 3;
   12410:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	ctx->memWrite(ctx->memParam, addr, val);	
   12414:	e20020df 	and	r2, r0, #223	; 0xdf
	ctx->tstates += 3;
   12418:	e2833003 	add	r3, r3, #3
   1241c:	e5843040 	str	r3, [r4, #64]	; 0x40
	ctx->memWrite(ctx->memParam, addr, val);	
   12420:	e1a01005 	mov	r1, r5
   12424:	e5943028 	ldr	r3, [r4, #40]	; 0x28
   12428:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
	
	
}
   1242c:	e8bd4070 	pop	{r4, r5, r6, lr}
   12430:	e12fff13 	bx	r3

00012434 <RES_5_A>:
		val &= ~(1 << pos);
   12434:	e5d03001 	ldrb	r3, [r0, #1]
   12438:	e3c33020 	bic	r3, r3, #32


static void RES_5_A (Z80Context* ctx)
{
	BR.A = doSetRes(ctx, SR_RES, 5, BR.A);
   1243c:	e5c03001 	strb	r3, [r0, #1]
}
   12440:	e12fff1e 	bx	lr

00012444 <RES_5_B>:
   12444:	e5d03003 	ldrb	r3, [r0, #3]
   12448:	e3c33020 	bic	r3, r3, #32


static void RES_5_B (Z80Context* ctx)
{
	BR.B = doSetRes(ctx, SR_RES, 5, BR.B);
   1244c:	e5c03003 	strb	r3, [r0, #3]
}
   12450:	e12fff1e 	bx	lr

00012454 <RES_5_C>:
   12454:	e5d03002 	ldrb	r3, [r0, #2]
   12458:	e3c33020 	bic	r3, r3, #32


static void RES_5_C (Z80Context* ctx)
{
	BR.C = doSetRes(ctx, SR_RES, 5, BR.C);
   1245c:	e5c03002 	strb	r3, [r0, #2]
}
   12460:	e12fff1e 	bx	lr

00012464 <RES_5_D>:
   12464:	e5d03005 	ldrb	r3, [r0, #5]
   12468:	e3c33020 	bic	r3, r3, #32


static void RES_5_D (Z80Context* ctx)
{
	BR.D = doSetRes(ctx, SR_RES, 5, BR.D);
   1246c:	e5c03005 	strb	r3, [r0, #5]
}
   12470:	e12fff1e 	bx	lr

00012474 <RES_5_E>:
   12474:	e5d03004 	ldrb	r3, [r0, #4]
   12478:	e3c33020 	bic	r3, r3, #32


static void RES_5_E (Z80Context* ctx)
{
	BR.E = doSetRes(ctx, SR_RES, 5, BR.E);
   1247c:	e5c03004 	strb	r3, [r0, #4]
}
   12480:	e12fff1e 	bx	lr

00012484 <RES_5_H>:
   12484:	e5d03007 	ldrb	r3, [r0, #7]
   12488:	e3c33020 	bic	r3, r3, #32


static void RES_5_H (Z80Context* ctx)
{
	BR.H = doSetRes(ctx, SR_RES, 5, BR.H);
   1248c:	e5c03007 	strb	r3, [r0, #7]
}
   12490:	e12fff1e 	bx	lr

00012494 <RES_5_L>:
   12494:	e5d03006 	ldrb	r3, [r0, #6]
   12498:	e3c33020 	bic	r3, r3, #32


static void RES_5_L (Z80Context* ctx)
{
	BR.L = doSetRes(ctx, SR_RES, 5, BR.L);
   1249c:	e5c03006 	strb	r3, [r0, #6]
}
   124a0:	e12fff1e 	bx	lr

000124a4 <RES_6_off_HL>:
	ctx->tstates += 3;
   124a4:	e5903040 	ldr	r3, [r0, #64]	; 0x40


static void RES_6_off_HL (Z80Context* ctx)
{
   124a8:	e92d4070 	push	{r4, r5, r6, lr}
   124ac:	e1a04000 	mov	r4, r0
	ctx->tstates += 1;
	write8(ctx, WR.HL, doSetRes(ctx, SR_RES, 6, read8(ctx, WR.HL)));
   124b0:	e1d050b6 	ldrh	r5, [r0, #6]
   124b4:	e2833004 	add	r3, r3, #4
   124b8:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   124bc:	e1a01005 	mov	r1, r5
   124c0:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   124c4:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   124c8:	e12fff33 	blx	r3
	ctx->tstates += 3;
   124cc:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	ctx->memWrite(ctx->memParam, addr, val);	
   124d0:	e20020bf 	and	r2, r0, #191	; 0xbf
	ctx->tstates += 3;
   124d4:	e2833003 	add	r3, r3, #3
   124d8:	e5843040 	str	r3, [r4, #64]	; 0x40
	ctx->memWrite(ctx->memParam, addr, val);	
   124dc:	e1a01005 	mov	r1, r5
   124e0:	e5943028 	ldr	r3, [r4, #40]	; 0x28
   124e4:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
}
   124e8:	e8bd4070 	pop	{r4, r5, r6, lr}
   124ec:	e12fff13 	bx	r3

000124f0 <RES_6_off_IX_d>:


static void RES_6_off_IX_d (Z80Context* ctx)
{
	ctx->tstates += 2;
	char off = read8(ctx, ctx->PC++);
   124f0:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
   124f4:	e5903040 	ldr	r3, [r0, #64]	; 0x40
{
   124f8:	e92d4070 	push	{r4, r5, r6, lr}
	char off = read8(ctx, ctx->PC++);
   124fc:	e2812001 	add	r2, r1, #1
{
   12500:	e1a04000 	mov	r4, r0
	ctx->tstates += 3;
   12504:	e2833005 	add	r3, r3, #5
	char off = read8(ctx, ctx->PC++);
   12508:	e1c021bc 	strh	r2, [r0, #28]
   1250c:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   12510:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   12514:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   12518:	e12fff33 	blx	r3
	write8(ctx, WR.IX + off, doSetRes(ctx, SR_RES, 6, read8(ctx, WR.IX + off)));
   1251c:	e1d450b8 	ldrh	r5, [r4, #8]
	ctx->tstates += 3;
   12520:	e5943040 	ldr	r3, [r4, #64]	; 0x40
   12524:	e0855000 	add	r5, r5, r0
   12528:	e6ff5075 	uxth	r5, r5
   1252c:	e2833003 	add	r3, r3, #3
   12530:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   12534:	e1a01005 	mov	r1, r5
   12538:	e5943024 	ldr	r3, [r4, #36]	; 0x24
   1253c:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   12540:	e12fff33 	blx	r3
	ctx->tstates += 3;
   12544:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	ctx->memWrite(ctx->memParam, addr, val);	
   12548:	e20020bf 	and	r2, r0, #191	; 0xbf
	ctx->tstates += 3;
   1254c:	e2833003 	add	r3, r3, #3
   12550:	e5843040 	str	r3, [r4, #64]	; 0x40
	ctx->memWrite(ctx->memParam, addr, val);	
   12554:	e1a01005 	mov	r1, r5
   12558:	e5943028 	ldr	r3, [r4, #40]	; 0x28
   1255c:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
	
	
}
   12560:	e8bd4070 	pop	{r4, r5, r6, lr}
   12564:	e12fff13 	bx	r3

00012568 <RES_6_off_IY_d>:


static void RES_6_off_IY_d (Z80Context* ctx)
{
	ctx->tstates += 2;
	char off = read8(ctx, ctx->PC++);
   12568:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
   1256c:	e5903040 	ldr	r3, [r0, #64]	; 0x40
{
   12570:	e92d4070 	push	{r4, r5, r6, lr}
	char off = read8(ctx, ctx->PC++);
   12574:	e2812001 	add	r2, r1, #1
{
   12578:	e1a04000 	mov	r4, r0
	ctx->tstates += 3;
   1257c:	e2833005 	add	r3, r3, #5
	char off = read8(ctx, ctx->PC++);
   12580:	e1c021bc 	strh	r2, [r0, #28]
   12584:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   12588:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   1258c:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   12590:	e12fff33 	blx	r3
	write8(ctx, WR.IY + off, doSetRes(ctx, SR_RES, 6, read8(ctx, WR.IY + off)));
   12594:	e1d450ba 	ldrh	r5, [r4, #10]
	ctx->tstates += 3;
   12598:	e5943040 	ldr	r3, [r4, #64]	; 0x40
   1259c:	e0855000 	add	r5, r5, r0
   125a0:	e6ff5075 	uxth	r5, r5
   125a4:	e2833003 	add	r3, r3, #3
   125a8:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   125ac:	e1a01005 	mov	r1, r5
   125b0:	e5943024 	ldr	r3, [r4, #36]	; 0x24
   125b4:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   125b8:	e12fff33 	blx	r3
	ctx->tstates += 3;
   125bc:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	ctx->memWrite(ctx->memParam, addr, val);	
   125c0:	e20020bf 	and	r2, r0, #191	; 0xbf
	ctx->tstates += 3;
   125c4:	e2833003 	add	r3, r3, #3
   125c8:	e5843040 	str	r3, [r4, #64]	; 0x40
	ctx->memWrite(ctx->memParam, addr, val);	
   125cc:	e1a01005 	mov	r1, r5
   125d0:	e5943028 	ldr	r3, [r4, #40]	; 0x28
   125d4:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
	
	
}
   125d8:	e8bd4070 	pop	{r4, r5, r6, lr}
   125dc:	e12fff13 	bx	r3

000125e0 <RES_6_A>:
		val &= ~(1 << pos);
   125e0:	e5d03001 	ldrb	r3, [r0, #1]
   125e4:	e3c33040 	bic	r3, r3, #64	; 0x40


static void RES_6_A (Z80Context* ctx)
{
	BR.A = doSetRes(ctx, SR_RES, 6, BR.A);
   125e8:	e5c03001 	strb	r3, [r0, #1]
}
   125ec:	e12fff1e 	bx	lr

000125f0 <RES_6_B>:
   125f0:	e5d03003 	ldrb	r3, [r0, #3]
   125f4:	e3c33040 	bic	r3, r3, #64	; 0x40


static void RES_6_B (Z80Context* ctx)
{
	BR.B = doSetRes(ctx, SR_RES, 6, BR.B);
   125f8:	e5c03003 	strb	r3, [r0, #3]
}
   125fc:	e12fff1e 	bx	lr

00012600 <RES_6_C>:
   12600:	e5d03002 	ldrb	r3, [r0, #2]
   12604:	e3c33040 	bic	r3, r3, #64	; 0x40


static void RES_6_C (Z80Context* ctx)
{
	BR.C = doSetRes(ctx, SR_RES, 6, BR.C);
   12608:	e5c03002 	strb	r3, [r0, #2]
}
   1260c:	e12fff1e 	bx	lr

00012610 <RES_6_D>:
   12610:	e5d03005 	ldrb	r3, [r0, #5]
   12614:	e3c33040 	bic	r3, r3, #64	; 0x40


static void RES_6_D (Z80Context* ctx)
{
	BR.D = doSetRes(ctx, SR_RES, 6, BR.D);
   12618:	e5c03005 	strb	r3, [r0, #5]
}
   1261c:	e12fff1e 	bx	lr

00012620 <RES_6_E>:
   12620:	e5d03004 	ldrb	r3, [r0, #4]
   12624:	e3c33040 	bic	r3, r3, #64	; 0x40


static void RES_6_E (Z80Context* ctx)
{
	BR.E = doSetRes(ctx, SR_RES, 6, BR.E);
   12628:	e5c03004 	strb	r3, [r0, #4]
}
   1262c:	e12fff1e 	bx	lr

00012630 <RES_6_H>:
   12630:	e5d03007 	ldrb	r3, [r0, #7]
   12634:	e3c33040 	bic	r3, r3, #64	; 0x40


static void RES_6_H (Z80Context* ctx)
{
	BR.H = doSetRes(ctx, SR_RES, 6, BR.H);
   12638:	e5c03007 	strb	r3, [r0, #7]
}
   1263c:	e12fff1e 	bx	lr

00012640 <RES_6_L>:
   12640:	e5d03006 	ldrb	r3, [r0, #6]
   12644:	e3c33040 	bic	r3, r3, #64	; 0x40


static void RES_6_L (Z80Context* ctx)
{
	BR.L = doSetRes(ctx, SR_RES, 6, BR.L);
   12648:	e5c03006 	strb	r3, [r0, #6]
}
   1264c:	e12fff1e 	bx	lr

00012650 <RES_7_off_HL>:
	ctx->tstates += 3;
   12650:	e5903040 	ldr	r3, [r0, #64]	; 0x40


static void RES_7_off_HL (Z80Context* ctx)
{
   12654:	e92d4070 	push	{r4, r5, r6, lr}
   12658:	e1a04000 	mov	r4, r0
	ctx->tstates += 1;
	write8(ctx, WR.HL, doSetRes(ctx, SR_RES, 7, read8(ctx, WR.HL)));
   1265c:	e1d050b6 	ldrh	r5, [r0, #6]
   12660:	e2833004 	add	r3, r3, #4
   12664:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   12668:	e1a01005 	mov	r1, r5
   1266c:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   12670:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   12674:	e12fff33 	blx	r3
	ctx->tstates += 3;
   12678:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	ctx->memWrite(ctx->memParam, addr, val);	
   1267c:	e200207f 	and	r2, r0, #127	; 0x7f
	ctx->tstates += 3;
   12680:	e2833003 	add	r3, r3, #3
   12684:	e5843040 	str	r3, [r4, #64]	; 0x40
	ctx->memWrite(ctx->memParam, addr, val);	
   12688:	e1a01005 	mov	r1, r5
   1268c:	e5943028 	ldr	r3, [r4, #40]	; 0x28
   12690:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
}
   12694:	e8bd4070 	pop	{r4, r5, r6, lr}
   12698:	e12fff13 	bx	r3

0001269c <RES_7_off_IX_d>:


static void RES_7_off_IX_d (Z80Context* ctx)
{
	ctx->tstates += 2;
	char off = read8(ctx, ctx->PC++);
   1269c:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
   126a0:	e5903040 	ldr	r3, [r0, #64]	; 0x40
{
   126a4:	e92d4070 	push	{r4, r5, r6, lr}
	char off = read8(ctx, ctx->PC++);
   126a8:	e2812001 	add	r2, r1, #1
{
   126ac:	e1a04000 	mov	r4, r0
	ctx->tstates += 3;
   126b0:	e2833005 	add	r3, r3, #5
	char off = read8(ctx, ctx->PC++);
   126b4:	e1c021bc 	strh	r2, [r0, #28]
   126b8:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   126bc:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   126c0:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   126c4:	e12fff33 	blx	r3
	write8(ctx, WR.IX + off, doSetRes(ctx, SR_RES, 7, read8(ctx, WR.IX + off)));
   126c8:	e1d450b8 	ldrh	r5, [r4, #8]
	ctx->tstates += 3;
   126cc:	e5943040 	ldr	r3, [r4, #64]	; 0x40
   126d0:	e0855000 	add	r5, r5, r0
   126d4:	e6ff5075 	uxth	r5, r5
   126d8:	e2833003 	add	r3, r3, #3
   126dc:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   126e0:	e1a01005 	mov	r1, r5
   126e4:	e5943024 	ldr	r3, [r4, #36]	; 0x24
   126e8:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   126ec:	e12fff33 	blx	r3
	ctx->tstates += 3;
   126f0:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	ctx->memWrite(ctx->memParam, addr, val);	
   126f4:	e200207f 	and	r2, r0, #127	; 0x7f
	ctx->tstates += 3;
   126f8:	e2833003 	add	r3, r3, #3
   126fc:	e5843040 	str	r3, [r4, #64]	; 0x40
	ctx->memWrite(ctx->memParam, addr, val);	
   12700:	e1a01005 	mov	r1, r5
   12704:	e5943028 	ldr	r3, [r4, #40]	; 0x28
   12708:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
	
	
}
   1270c:	e8bd4070 	pop	{r4, r5, r6, lr}
   12710:	e12fff13 	bx	r3

00012714 <RES_7_off_IY_d>:


static void RES_7_off_IY_d (Z80Context* ctx)
{
	ctx->tstates += 2;
	char off = read8(ctx, ctx->PC++);
   12714:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
   12718:	e5903040 	ldr	r3, [r0, #64]	; 0x40
{
   1271c:	e92d4070 	push	{r4, r5, r6, lr}
	char off = read8(ctx, ctx->PC++);
   12720:	e2812001 	add	r2, r1, #1
{
   12724:	e1a04000 	mov	r4, r0
	ctx->tstates += 3;
   12728:	e2833005 	add	r3, r3, #5
	char off = read8(ctx, ctx->PC++);
   1272c:	e1c021bc 	strh	r2, [r0, #28]
   12730:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   12734:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   12738:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   1273c:	e12fff33 	blx	r3
	write8(ctx, WR.IY + off, doSetRes(ctx, SR_RES, 7, read8(ctx, WR.IY + off)));
   12740:	e1d450ba 	ldrh	r5, [r4, #10]
	ctx->tstates += 3;
   12744:	e5943040 	ldr	r3, [r4, #64]	; 0x40
   12748:	e0855000 	add	r5, r5, r0
   1274c:	e6ff5075 	uxth	r5, r5
   12750:	e2833003 	add	r3, r3, #3
   12754:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   12758:	e1a01005 	mov	r1, r5
   1275c:	e5943024 	ldr	r3, [r4, #36]	; 0x24
   12760:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   12764:	e12fff33 	blx	r3
	ctx->tstates += 3;
   12768:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	ctx->memWrite(ctx->memParam, addr, val);	
   1276c:	e200207f 	and	r2, r0, #127	; 0x7f
	ctx->tstates += 3;
   12770:	e2833003 	add	r3, r3, #3
   12774:	e5843040 	str	r3, [r4, #64]	; 0x40
	ctx->memWrite(ctx->memParam, addr, val);	
   12778:	e1a01005 	mov	r1, r5
   1277c:	e5943028 	ldr	r3, [r4, #40]	; 0x28
   12780:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
	
	
}
   12784:	e8bd4070 	pop	{r4, r5, r6, lr}
   12788:	e12fff13 	bx	r3

0001278c <RES_7_A>:
		val &= ~(1 << pos);
   1278c:	e5d03001 	ldrb	r3, [r0, #1]
   12790:	e203307f 	and	r3, r3, #127	; 0x7f


static void RES_7_A (Z80Context* ctx)
{
	BR.A = doSetRes(ctx, SR_RES, 7, BR.A);
   12794:	e5c03001 	strb	r3, [r0, #1]
}
   12798:	e12fff1e 	bx	lr

0001279c <RES_7_B>:
   1279c:	e5d03003 	ldrb	r3, [r0, #3]
   127a0:	e203307f 	and	r3, r3, #127	; 0x7f


static void RES_7_B (Z80Context* ctx)
{
	BR.B = doSetRes(ctx, SR_RES, 7, BR.B);
   127a4:	e5c03003 	strb	r3, [r0, #3]
}
   127a8:	e12fff1e 	bx	lr

000127ac <RES_7_C>:
   127ac:	e5d03002 	ldrb	r3, [r0, #2]
   127b0:	e203307f 	and	r3, r3, #127	; 0x7f


static void RES_7_C (Z80Context* ctx)
{
	BR.C = doSetRes(ctx, SR_RES, 7, BR.C);
   127b4:	e5c03002 	strb	r3, [r0, #2]
}
   127b8:	e12fff1e 	bx	lr

000127bc <RES_7_D>:
   127bc:	e5d03005 	ldrb	r3, [r0, #5]
   127c0:	e203307f 	and	r3, r3, #127	; 0x7f


static void RES_7_D (Z80Context* ctx)
{
	BR.D = doSetRes(ctx, SR_RES, 7, BR.D);
   127c4:	e5c03005 	strb	r3, [r0, #5]
}
   127c8:	e12fff1e 	bx	lr

000127cc <RES_7_E>:
   127cc:	e5d03004 	ldrb	r3, [r0, #4]
   127d0:	e203307f 	and	r3, r3, #127	; 0x7f


static void RES_7_E (Z80Context* ctx)
{
	BR.E = doSetRes(ctx, SR_RES, 7, BR.E);
   127d4:	e5c03004 	strb	r3, [r0, #4]
}
   127d8:	e12fff1e 	bx	lr

000127dc <RES_7_H>:
   127dc:	e5d03007 	ldrb	r3, [r0, #7]
   127e0:	e203307f 	and	r3, r3, #127	; 0x7f


static void RES_7_H (Z80Context* ctx)
{
	BR.H = doSetRes(ctx, SR_RES, 7, BR.H);
   127e4:	e5c03007 	strb	r3, [r0, #7]
}
   127e8:	e12fff1e 	bx	lr

000127ec <RES_7_L>:
   127ec:	e5d03006 	ldrb	r3, [r0, #6]
   127f0:	e203307f 	and	r3, r3, #127	; 0x7f


static void RES_7_L (Z80Context* ctx)
{
	BR.L = doSetRes(ctx, SR_RES, 7, BR.L);
   127f4:	e5c03006 	strb	r3, [r0, #6]
}
   127f8:	e12fff1e 	bx	lr

000127fc <RLD>:
	ctx->tstates += 3;
   127fc:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	
}


static void RLD (Z80Context* ctx)
{
   12800:	e92d4070 	push	{r4, r5, r6, lr}
   12804:	e1a04000 	mov	r4, r0
   12808:	e2833007 	add	r3, r3, #7
	ctx->tstates += 4;
	byte Ah = BR.A & 0x0f;
	byte hl = read8(ctx, WR.HL);
   1280c:	e1d010b6 	ldrh	r1, [r0, #6]
	byte Ah = BR.A & 0x0f;
   12810:	e5d05001 	ldrb	r5, [r0, #1]
   12814:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   12818:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   1281c:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   12820:	e12fff33 	blx	r3
	BR.A = (BR.A & 0xf0) | ((hl & 0xf0) >> 4);
   12824:	e5d43001 	ldrb	r3, [r4, #1]
	ctx->tstates += 3;
   12828:	e594c040 	ldr	ip, [r4, #64]	; 0x40
   1282c:	e3c3300f 	bic	r3, r3, #15
	byte Ah = BR.A & 0x0f;
   12830:	e205500f 	and	r5, r5, #15
	hl = (hl << 4) | Ah;
   12834:	e1852200 	orr	r2, r5, r0, lsl #4
	BR.A = (BR.A & 0xf0) | ((hl & 0xf0) >> 4);
   12838:	e1830220 	orr	r0, r3, r0, lsr #4
   1283c:	e28c3003 	add	r3, ip, #3
	ctx->memWrite(ctx->memParam, addr, val);	
   12840:	e6ef2072 	uxtb	r2, r2
	write8(ctx, WR.HL, hl);
   12844:	e1d410b6 	ldrh	r1, [r4, #6]
	BR.A = (BR.A & 0xf0) | ((hl & 0xf0) >> 4);
   12848:	e5c40001 	strb	r0, [r4, #1]
	ctx->tstates += 3;
   1284c:	e5843040 	str	r3, [r4, #64]	; 0x40
	ctx->memWrite(ctx->memParam, addr, val);	
   12850:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   12854:	e5943028 	ldr	r3, [r4, #40]	; 0x28
   12858:	e12fff33 	blx	r3
	BR.F &= ~flag;
   1285c:	e5d43000 	ldrb	r3, [r4]
	RESFLAG(F_H | F_N);
	adjustFlagSZP(ctx, BR.A);
   12860:	e5d41001 	ldrb	r1, [r4, #1]
   12864:	e3c33012 	bic	r3, r3, #18
   12868:	e5c43000 	strb	r3, [r4]
   1286c:	e1a00004 	mov	r0, r4
   12870:	ebffd6a2 	bl	8300 <adjustFlagSZP>
	adjustFlags(ctx, BR.A);
   12874:	e5d42001 	ldrb	r2, [r4, #1]
	BR.F |= flag;
   12878:	e5d43000 	ldrb	r3, [r4]
	if (val)
   1287c:	e3120020 	tst	r2, #32
	BR.F |= flag;
   12880:	13833020 	orrne	r3, r3, #32
	BR.F &= ~flag;
   12884:	020330df 	andeq	r3, r3, #223	; 0xdf
	if (val)
   12888:	e3120008 	tst	r2, #8
	BR.F |= flag;
   1288c:	13833008 	orrne	r3, r3, #8
	BR.F &= ~flag;
   12890:	020330f7 	andeq	r3, r3, #247	; 0xf7
   12894:	e5c43000 	strb	r3, [r4]
}
   12898:	e8bd8070 	pop	{r4, r5, r6, pc}

0001289c <SCF>:
	BR.F |= flag;
   1289c:	e1d030d0 	ldrsb	r3, [r0]

static void SCF (Z80Context* ctx)
{
	SETFLAG(F_C);
	RESFLAG(F_N | F_H);
	adjustFlags(ctx, BR.A);
   128a0:	e5d02001 	ldrb	r2, [r0, #1]
	BR.F &= ~flag;
   128a4:	e3833001 	orr	r3, r3, #1
	BR.F |= flag;
   128a8:	e20330cd 	and	r3, r3, #205	; 0xcd
	if (val)
   128ac:	e3120020 	tst	r2, #32
	BR.F |= flag;
   128b0:	13833020 	orrne	r3, r3, #32
	if (val)
   128b4:	e3120008 	tst	r2, #8
	BR.F |= flag;
   128b8:	13833008 	orrne	r3, r3, #8
	BR.F &= ~flag;
   128bc:	020330e5 	andeq	r3, r3, #229	; 0xe5
   128c0:	e5c03000 	strb	r3, [r0]
}
   128c4:	e12fff1e 	bx	lr

000128c8 <SET_0_off_HL>:
	ctx->tstates += 3;
   128c8:	e5903040 	ldr	r3, [r0, #64]	; 0x40


static void SET_0_off_HL (Z80Context* ctx)
{
   128cc:	e92d4070 	push	{r4, r5, r6, lr}
	ctx->tstates += 1;
	write8(ctx, WR.HL, doSetRes(ctx, SR_SET, 0, read8(ctx, WR.HL)));
   128d0:	e1d050b6 	ldrh	r5, [r0, #6]
{
   128d4:	e1a04000 	mov	r4, r0
   128d8:	e2833004 	add	r3, r3, #4
   128dc:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   128e0:	e1a01005 	mov	r1, r5
   128e4:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   128e8:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   128ec:	e12fff33 	blx	r3
	ctx->tstates += 3;
   128f0:	e5943040 	ldr	r3, [r4, #64]	; 0x40
		val |= (1 << pos);
   128f4:	e3802001 	orr	r2, r0, #1
	ctx->tstates += 3;
   128f8:	e2833003 	add	r3, r3, #3
   128fc:	e5843040 	str	r3, [r4, #64]	; 0x40
	ctx->memWrite(ctx->memParam, addr, val);	
   12900:	e1a01005 	mov	r1, r5
   12904:	e5943028 	ldr	r3, [r4, #40]	; 0x28
   12908:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   1290c:	e6ef2072 	uxtb	r2, r2
}
   12910:	e8bd4070 	pop	{r4, r5, r6, lr}
   12914:	e12fff13 	bx	r3

00012918 <SET_0_off_IX_d>:


static void SET_0_off_IX_d (Z80Context* ctx)
{
	ctx->tstates += 2;
	char off = read8(ctx, ctx->PC++);
   12918:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
   1291c:	e5903040 	ldr	r3, [r0, #64]	; 0x40
{
   12920:	e92d4070 	push	{r4, r5, r6, lr}
	char off = read8(ctx, ctx->PC++);
   12924:	e2812001 	add	r2, r1, #1
{
   12928:	e1a04000 	mov	r4, r0
	ctx->tstates += 3;
   1292c:	e2833005 	add	r3, r3, #5
	char off = read8(ctx, ctx->PC++);
   12930:	e1c021bc 	strh	r2, [r0, #28]
   12934:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   12938:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   1293c:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   12940:	e12fff33 	blx	r3
	write8(ctx, WR.IX + off, doSetRes(ctx, SR_SET, 0, read8(ctx, WR.IX + off)));
   12944:	e1d450b8 	ldrh	r5, [r4, #8]
	ctx->tstates += 3;
   12948:	e5943040 	ldr	r3, [r4, #64]	; 0x40
   1294c:	e0855000 	add	r5, r5, r0
   12950:	e6ff5075 	uxth	r5, r5
   12954:	e2833003 	add	r3, r3, #3
   12958:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   1295c:	e1a01005 	mov	r1, r5
   12960:	e5943024 	ldr	r3, [r4, #36]	; 0x24
   12964:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   12968:	e12fff33 	blx	r3
	ctx->tstates += 3;
   1296c:	e5943040 	ldr	r3, [r4, #64]	; 0x40
		val |= (1 << pos);
   12970:	e3802001 	orr	r2, r0, #1
	ctx->tstates += 3;
   12974:	e2833003 	add	r3, r3, #3
   12978:	e5843040 	str	r3, [r4, #64]	; 0x40
	ctx->memWrite(ctx->memParam, addr, val);	
   1297c:	e1a01005 	mov	r1, r5
   12980:	e5943028 	ldr	r3, [r4, #40]	; 0x28
   12984:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   12988:	e6ef2072 	uxtb	r2, r2
	
	
}
   1298c:	e8bd4070 	pop	{r4, r5, r6, lr}
   12990:	e12fff13 	bx	r3

00012994 <SET_0_off_IY_d>:


static void SET_0_off_IY_d (Z80Context* ctx)
{
	ctx->tstates += 2;
	char off = read8(ctx, ctx->PC++);
   12994:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
   12998:	e5903040 	ldr	r3, [r0, #64]	; 0x40
{
   1299c:	e92d4070 	push	{r4, r5, r6, lr}
	char off = read8(ctx, ctx->PC++);
   129a0:	e2812001 	add	r2, r1, #1
{
   129a4:	e1a04000 	mov	r4, r0
	ctx->tstates += 3;
   129a8:	e2833005 	add	r3, r3, #5
	char off = read8(ctx, ctx->PC++);
   129ac:	e1c021bc 	strh	r2, [r0, #28]
   129b0:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   129b4:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   129b8:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   129bc:	e12fff33 	blx	r3
	write8(ctx, WR.IY + off, doSetRes(ctx, SR_SET, 0, read8(ctx, WR.IY + off)));
   129c0:	e1d450ba 	ldrh	r5, [r4, #10]
	ctx->tstates += 3;
   129c4:	e5943040 	ldr	r3, [r4, #64]	; 0x40
   129c8:	e0855000 	add	r5, r5, r0
   129cc:	e6ff5075 	uxth	r5, r5
   129d0:	e2833003 	add	r3, r3, #3
   129d4:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   129d8:	e1a01005 	mov	r1, r5
   129dc:	e5943024 	ldr	r3, [r4, #36]	; 0x24
   129e0:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   129e4:	e12fff33 	blx	r3
	ctx->tstates += 3;
   129e8:	e5943040 	ldr	r3, [r4, #64]	; 0x40
		val |= (1 << pos);
   129ec:	e3802001 	orr	r2, r0, #1
	ctx->tstates += 3;
   129f0:	e2833003 	add	r3, r3, #3
   129f4:	e5843040 	str	r3, [r4, #64]	; 0x40
	ctx->memWrite(ctx->memParam, addr, val);	
   129f8:	e1a01005 	mov	r1, r5
   129fc:	e5943028 	ldr	r3, [r4, #40]	; 0x28
   12a00:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   12a04:	e6ef2072 	uxtb	r2, r2
	
	
}
   12a08:	e8bd4070 	pop	{r4, r5, r6, lr}
   12a0c:	e12fff13 	bx	r3

00012a10 <SET_0_A>:
		val |= (1 << pos);
   12a10:	e5d03001 	ldrb	r3, [r0, #1]
   12a14:	e3833001 	orr	r3, r3, #1


static void SET_0_A (Z80Context* ctx)
{
	BR.A = doSetRes(ctx, SR_SET, 0, BR.A);
   12a18:	e5c03001 	strb	r3, [r0, #1]
}
   12a1c:	e12fff1e 	bx	lr

00012a20 <SET_0_B>:
   12a20:	e5d03003 	ldrb	r3, [r0, #3]
   12a24:	e3833001 	orr	r3, r3, #1


static void SET_0_B (Z80Context* ctx)
{
	BR.B = doSetRes(ctx, SR_SET, 0, BR.B);
   12a28:	e5c03003 	strb	r3, [r0, #3]
}
   12a2c:	e12fff1e 	bx	lr

00012a30 <SET_0_C>:
   12a30:	e5d03002 	ldrb	r3, [r0, #2]
   12a34:	e3833001 	orr	r3, r3, #1


static void SET_0_C (Z80Context* ctx)
{
	BR.C = doSetRes(ctx, SR_SET, 0, BR.C);
   12a38:	e5c03002 	strb	r3, [r0, #2]
}
   12a3c:	e12fff1e 	bx	lr

00012a40 <SET_0_D>:
   12a40:	e5d03005 	ldrb	r3, [r0, #5]
   12a44:	e3833001 	orr	r3, r3, #1


static void SET_0_D (Z80Context* ctx)
{
	BR.D = doSetRes(ctx, SR_SET, 0, BR.D);
   12a48:	e5c03005 	strb	r3, [r0, #5]
}
   12a4c:	e12fff1e 	bx	lr

00012a50 <SET_0_E>:
   12a50:	e5d03004 	ldrb	r3, [r0, #4]
   12a54:	e3833001 	orr	r3, r3, #1


static void SET_0_E (Z80Context* ctx)
{
	BR.E = doSetRes(ctx, SR_SET, 0, BR.E);
   12a58:	e5c03004 	strb	r3, [r0, #4]
}
   12a5c:	e12fff1e 	bx	lr

00012a60 <SET_0_H>:
   12a60:	e5d03007 	ldrb	r3, [r0, #7]
   12a64:	e3833001 	orr	r3, r3, #1


static void SET_0_H (Z80Context* ctx)
{
	BR.H = doSetRes(ctx, SR_SET, 0, BR.H);
   12a68:	e5c03007 	strb	r3, [r0, #7]
}
   12a6c:	e12fff1e 	bx	lr

00012a70 <SET_0_L>:
   12a70:	e5d03006 	ldrb	r3, [r0, #6]
   12a74:	e3833001 	orr	r3, r3, #1


static void SET_0_L (Z80Context* ctx)
{
	BR.L = doSetRes(ctx, SR_SET, 0, BR.L);
   12a78:	e5c03006 	strb	r3, [r0, #6]
}
   12a7c:	e12fff1e 	bx	lr

00012a80 <SET_1_off_HL>:
	ctx->tstates += 3;
   12a80:	e5903040 	ldr	r3, [r0, #64]	; 0x40


static void SET_1_off_HL (Z80Context* ctx)
{
   12a84:	e92d4070 	push	{r4, r5, r6, lr}
	ctx->tstates += 1;
	write8(ctx, WR.HL, doSetRes(ctx, SR_SET, 1, read8(ctx, WR.HL)));
   12a88:	e1d050b6 	ldrh	r5, [r0, #6]
{
   12a8c:	e1a04000 	mov	r4, r0
   12a90:	e2833004 	add	r3, r3, #4
   12a94:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   12a98:	e1a01005 	mov	r1, r5
   12a9c:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   12aa0:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   12aa4:	e12fff33 	blx	r3
	ctx->tstates += 3;
   12aa8:	e5943040 	ldr	r3, [r4, #64]	; 0x40
		val |= (1 << pos);
   12aac:	e3802002 	orr	r2, r0, #2
	ctx->tstates += 3;
   12ab0:	e2833003 	add	r3, r3, #3
   12ab4:	e5843040 	str	r3, [r4, #64]	; 0x40
	ctx->memWrite(ctx->memParam, addr, val);	
   12ab8:	e1a01005 	mov	r1, r5
   12abc:	e5943028 	ldr	r3, [r4, #40]	; 0x28
   12ac0:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   12ac4:	e6ef2072 	uxtb	r2, r2
}
   12ac8:	e8bd4070 	pop	{r4, r5, r6, lr}
   12acc:	e12fff13 	bx	r3

00012ad0 <SET_1_off_IX_d>:


static void SET_1_off_IX_d (Z80Context* ctx)
{
	ctx->tstates += 2;
	char off = read8(ctx, ctx->PC++);
   12ad0:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
   12ad4:	e5903040 	ldr	r3, [r0, #64]	; 0x40
{
   12ad8:	e92d4070 	push	{r4, r5, r6, lr}
	char off = read8(ctx, ctx->PC++);
   12adc:	e2812001 	add	r2, r1, #1
{
   12ae0:	e1a04000 	mov	r4, r0
	ctx->tstates += 3;
   12ae4:	e2833005 	add	r3, r3, #5
	char off = read8(ctx, ctx->PC++);
   12ae8:	e1c021bc 	strh	r2, [r0, #28]
   12aec:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   12af0:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   12af4:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   12af8:	e12fff33 	blx	r3
	write8(ctx, WR.IX + off, doSetRes(ctx, SR_SET, 1, read8(ctx, WR.IX + off)));
   12afc:	e1d450b8 	ldrh	r5, [r4, #8]
	ctx->tstates += 3;
   12b00:	e5943040 	ldr	r3, [r4, #64]	; 0x40
   12b04:	e0855000 	add	r5, r5, r0
   12b08:	e6ff5075 	uxth	r5, r5
   12b0c:	e2833003 	add	r3, r3, #3
   12b10:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   12b14:	e1a01005 	mov	r1, r5
   12b18:	e5943024 	ldr	r3, [r4, #36]	; 0x24
   12b1c:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   12b20:	e12fff33 	blx	r3
	ctx->tstates += 3;
   12b24:	e5943040 	ldr	r3, [r4, #64]	; 0x40
		val |= (1 << pos);
   12b28:	e3802002 	orr	r2, r0, #2
	ctx->tstates += 3;
   12b2c:	e2833003 	add	r3, r3, #3
   12b30:	e5843040 	str	r3, [r4, #64]	; 0x40
	ctx->memWrite(ctx->memParam, addr, val);	
   12b34:	e1a01005 	mov	r1, r5
   12b38:	e5943028 	ldr	r3, [r4, #40]	; 0x28
   12b3c:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   12b40:	e6ef2072 	uxtb	r2, r2
	
	
}
   12b44:	e8bd4070 	pop	{r4, r5, r6, lr}
   12b48:	e12fff13 	bx	r3

00012b4c <SET_1_off_IY_d>:


static void SET_1_off_IY_d (Z80Context* ctx)
{
	ctx->tstates += 2;
	char off = read8(ctx, ctx->PC++);
   12b4c:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
   12b50:	e5903040 	ldr	r3, [r0, #64]	; 0x40
{
   12b54:	e92d4070 	push	{r4, r5, r6, lr}
	char off = read8(ctx, ctx->PC++);
   12b58:	e2812001 	add	r2, r1, #1
{
   12b5c:	e1a04000 	mov	r4, r0
	ctx->tstates += 3;
   12b60:	e2833005 	add	r3, r3, #5
	char off = read8(ctx, ctx->PC++);
   12b64:	e1c021bc 	strh	r2, [r0, #28]
   12b68:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   12b6c:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   12b70:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   12b74:	e12fff33 	blx	r3
	write8(ctx, WR.IY + off, doSetRes(ctx, SR_SET, 1, read8(ctx, WR.IY + off)));
   12b78:	e1d450ba 	ldrh	r5, [r4, #10]
	ctx->tstates += 3;
   12b7c:	e5943040 	ldr	r3, [r4, #64]	; 0x40
   12b80:	e0855000 	add	r5, r5, r0
   12b84:	e6ff5075 	uxth	r5, r5
   12b88:	e2833003 	add	r3, r3, #3
   12b8c:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   12b90:	e1a01005 	mov	r1, r5
   12b94:	e5943024 	ldr	r3, [r4, #36]	; 0x24
   12b98:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   12b9c:	e12fff33 	blx	r3
	ctx->tstates += 3;
   12ba0:	e5943040 	ldr	r3, [r4, #64]	; 0x40
		val |= (1 << pos);
   12ba4:	e3802002 	orr	r2, r0, #2
	ctx->tstates += 3;
   12ba8:	e2833003 	add	r3, r3, #3
   12bac:	e5843040 	str	r3, [r4, #64]	; 0x40
	ctx->memWrite(ctx->memParam, addr, val);	
   12bb0:	e1a01005 	mov	r1, r5
   12bb4:	e5943028 	ldr	r3, [r4, #40]	; 0x28
   12bb8:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   12bbc:	e6ef2072 	uxtb	r2, r2
	
	
}
   12bc0:	e8bd4070 	pop	{r4, r5, r6, lr}
   12bc4:	e12fff13 	bx	r3

00012bc8 <SET_1_A>:
		val |= (1 << pos);
   12bc8:	e5d03001 	ldrb	r3, [r0, #1]
   12bcc:	e3833002 	orr	r3, r3, #2


static void SET_1_A (Z80Context* ctx)
{
	BR.A = doSetRes(ctx, SR_SET, 1, BR.A);
   12bd0:	e5c03001 	strb	r3, [r0, #1]
}
   12bd4:	e12fff1e 	bx	lr

00012bd8 <SET_1_B>:
   12bd8:	e5d03003 	ldrb	r3, [r0, #3]
   12bdc:	e3833002 	orr	r3, r3, #2


static void SET_1_B (Z80Context* ctx)
{
	BR.B = doSetRes(ctx, SR_SET, 1, BR.B);
   12be0:	e5c03003 	strb	r3, [r0, #3]
}
   12be4:	e12fff1e 	bx	lr

00012be8 <SET_1_C>:
   12be8:	e5d03002 	ldrb	r3, [r0, #2]
   12bec:	e3833002 	orr	r3, r3, #2


static void SET_1_C (Z80Context* ctx)
{
	BR.C = doSetRes(ctx, SR_SET, 1, BR.C);
   12bf0:	e5c03002 	strb	r3, [r0, #2]
}
   12bf4:	e12fff1e 	bx	lr

00012bf8 <SET_1_D>:
   12bf8:	e5d03005 	ldrb	r3, [r0, #5]
   12bfc:	e3833002 	orr	r3, r3, #2


static void SET_1_D (Z80Context* ctx)
{
	BR.D = doSetRes(ctx, SR_SET, 1, BR.D);
   12c00:	e5c03005 	strb	r3, [r0, #5]
}
   12c04:	e12fff1e 	bx	lr

00012c08 <SET_1_E>:
   12c08:	e5d03004 	ldrb	r3, [r0, #4]
   12c0c:	e3833002 	orr	r3, r3, #2


static void SET_1_E (Z80Context* ctx)
{
	BR.E = doSetRes(ctx, SR_SET, 1, BR.E);
   12c10:	e5c03004 	strb	r3, [r0, #4]
}
   12c14:	e12fff1e 	bx	lr

00012c18 <SET_1_H>:
   12c18:	e5d03007 	ldrb	r3, [r0, #7]
   12c1c:	e3833002 	orr	r3, r3, #2


static void SET_1_H (Z80Context* ctx)
{
	BR.H = doSetRes(ctx, SR_SET, 1, BR.H);
   12c20:	e5c03007 	strb	r3, [r0, #7]
}
   12c24:	e12fff1e 	bx	lr

00012c28 <SET_1_L>:
   12c28:	e5d03006 	ldrb	r3, [r0, #6]
   12c2c:	e3833002 	orr	r3, r3, #2


static void SET_1_L (Z80Context* ctx)
{
	BR.L = doSetRes(ctx, SR_SET, 1, BR.L);
   12c30:	e5c03006 	strb	r3, [r0, #6]
}
   12c34:	e12fff1e 	bx	lr

00012c38 <SET_2_off_HL>:
	ctx->tstates += 3;
   12c38:	e5903040 	ldr	r3, [r0, #64]	; 0x40


static void SET_2_off_HL (Z80Context* ctx)
{
   12c3c:	e92d4070 	push	{r4, r5, r6, lr}
	ctx->tstates += 1;
	write8(ctx, WR.HL, doSetRes(ctx, SR_SET, 2, read8(ctx, WR.HL)));
   12c40:	e1d050b6 	ldrh	r5, [r0, #6]
{
   12c44:	e1a04000 	mov	r4, r0
   12c48:	e2833004 	add	r3, r3, #4
   12c4c:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   12c50:	e1a01005 	mov	r1, r5
   12c54:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   12c58:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   12c5c:	e12fff33 	blx	r3
	ctx->tstates += 3;
   12c60:	e5943040 	ldr	r3, [r4, #64]	; 0x40
		val |= (1 << pos);
   12c64:	e3802004 	orr	r2, r0, #4
	ctx->tstates += 3;
   12c68:	e2833003 	add	r3, r3, #3
   12c6c:	e5843040 	str	r3, [r4, #64]	; 0x40
	ctx->memWrite(ctx->memParam, addr, val);	
   12c70:	e1a01005 	mov	r1, r5
   12c74:	e5943028 	ldr	r3, [r4, #40]	; 0x28
   12c78:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   12c7c:	e6ef2072 	uxtb	r2, r2
}
   12c80:	e8bd4070 	pop	{r4, r5, r6, lr}
   12c84:	e12fff13 	bx	r3

00012c88 <SET_2_off_IX_d>:


static void SET_2_off_IX_d (Z80Context* ctx)
{
	ctx->tstates += 2;
	char off = read8(ctx, ctx->PC++);
   12c88:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
   12c8c:	e5903040 	ldr	r3, [r0, #64]	; 0x40
{
   12c90:	e92d4070 	push	{r4, r5, r6, lr}
	char off = read8(ctx, ctx->PC++);
   12c94:	e2812001 	add	r2, r1, #1
{
   12c98:	e1a04000 	mov	r4, r0
	ctx->tstates += 3;
   12c9c:	e2833005 	add	r3, r3, #5
	char off = read8(ctx, ctx->PC++);
   12ca0:	e1c021bc 	strh	r2, [r0, #28]
   12ca4:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   12ca8:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   12cac:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   12cb0:	e12fff33 	blx	r3
	write8(ctx, WR.IX + off, doSetRes(ctx, SR_SET, 2, read8(ctx, WR.IX + off)));
   12cb4:	e1d450b8 	ldrh	r5, [r4, #8]
	ctx->tstates += 3;
   12cb8:	e5943040 	ldr	r3, [r4, #64]	; 0x40
   12cbc:	e0855000 	add	r5, r5, r0
   12cc0:	e6ff5075 	uxth	r5, r5
   12cc4:	e2833003 	add	r3, r3, #3
   12cc8:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   12ccc:	e1a01005 	mov	r1, r5
   12cd0:	e5943024 	ldr	r3, [r4, #36]	; 0x24
   12cd4:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   12cd8:	e12fff33 	blx	r3
	ctx->tstates += 3;
   12cdc:	e5943040 	ldr	r3, [r4, #64]	; 0x40
		val |= (1 << pos);
   12ce0:	e3802004 	orr	r2, r0, #4
	ctx->tstates += 3;
   12ce4:	e2833003 	add	r3, r3, #3
   12ce8:	e5843040 	str	r3, [r4, #64]	; 0x40
	ctx->memWrite(ctx->memParam, addr, val);	
   12cec:	e1a01005 	mov	r1, r5
   12cf0:	e5943028 	ldr	r3, [r4, #40]	; 0x28
   12cf4:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   12cf8:	e6ef2072 	uxtb	r2, r2
	
	
}
   12cfc:	e8bd4070 	pop	{r4, r5, r6, lr}
   12d00:	e12fff13 	bx	r3

00012d04 <SET_2_off_IY_d>:


static void SET_2_off_IY_d (Z80Context* ctx)
{
	ctx->tstates += 2;
	char off = read8(ctx, ctx->PC++);
   12d04:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
   12d08:	e5903040 	ldr	r3, [r0, #64]	; 0x40
{
   12d0c:	e92d4070 	push	{r4, r5, r6, lr}
	char off = read8(ctx, ctx->PC++);
   12d10:	e2812001 	add	r2, r1, #1
{
   12d14:	e1a04000 	mov	r4, r0
	ctx->tstates += 3;
   12d18:	e2833005 	add	r3, r3, #5
	char off = read8(ctx, ctx->PC++);
   12d1c:	e1c021bc 	strh	r2, [r0, #28]
   12d20:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   12d24:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   12d28:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   12d2c:	e12fff33 	blx	r3
	write8(ctx, WR.IY + off, doSetRes(ctx, SR_SET, 2, read8(ctx, WR.IY + off)));
   12d30:	e1d450ba 	ldrh	r5, [r4, #10]
	ctx->tstates += 3;
   12d34:	e5943040 	ldr	r3, [r4, #64]	; 0x40
   12d38:	e0855000 	add	r5, r5, r0
   12d3c:	e6ff5075 	uxth	r5, r5
   12d40:	e2833003 	add	r3, r3, #3
   12d44:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   12d48:	e1a01005 	mov	r1, r5
   12d4c:	e5943024 	ldr	r3, [r4, #36]	; 0x24
   12d50:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   12d54:	e12fff33 	blx	r3
	ctx->tstates += 3;
   12d58:	e5943040 	ldr	r3, [r4, #64]	; 0x40
		val |= (1 << pos);
   12d5c:	e3802004 	orr	r2, r0, #4
	ctx->tstates += 3;
   12d60:	e2833003 	add	r3, r3, #3
   12d64:	e5843040 	str	r3, [r4, #64]	; 0x40
	ctx->memWrite(ctx->memParam, addr, val);	
   12d68:	e1a01005 	mov	r1, r5
   12d6c:	e5943028 	ldr	r3, [r4, #40]	; 0x28
   12d70:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   12d74:	e6ef2072 	uxtb	r2, r2
	
	
}
   12d78:	e8bd4070 	pop	{r4, r5, r6, lr}
   12d7c:	e12fff13 	bx	r3

00012d80 <SET_2_A>:
		val |= (1 << pos);
   12d80:	e5d03001 	ldrb	r3, [r0, #1]
   12d84:	e3833004 	orr	r3, r3, #4


static void SET_2_A (Z80Context* ctx)
{
	BR.A = doSetRes(ctx, SR_SET, 2, BR.A);
   12d88:	e5c03001 	strb	r3, [r0, #1]
}
   12d8c:	e12fff1e 	bx	lr

00012d90 <SET_2_B>:
   12d90:	e5d03003 	ldrb	r3, [r0, #3]
   12d94:	e3833004 	orr	r3, r3, #4


static void SET_2_B (Z80Context* ctx)
{
	BR.B = doSetRes(ctx, SR_SET, 2, BR.B);
   12d98:	e5c03003 	strb	r3, [r0, #3]
}
   12d9c:	e12fff1e 	bx	lr

00012da0 <SET_2_C>:
   12da0:	e5d03002 	ldrb	r3, [r0, #2]
   12da4:	e3833004 	orr	r3, r3, #4


static void SET_2_C (Z80Context* ctx)
{
	BR.C = doSetRes(ctx, SR_SET, 2, BR.C);
   12da8:	e5c03002 	strb	r3, [r0, #2]
}
   12dac:	e12fff1e 	bx	lr

00012db0 <SET_2_D>:
   12db0:	e5d03005 	ldrb	r3, [r0, #5]
   12db4:	e3833004 	orr	r3, r3, #4


static void SET_2_D (Z80Context* ctx)
{
	BR.D = doSetRes(ctx, SR_SET, 2, BR.D);
   12db8:	e5c03005 	strb	r3, [r0, #5]
}
   12dbc:	e12fff1e 	bx	lr

00012dc0 <SET_2_E>:
   12dc0:	e5d03004 	ldrb	r3, [r0, #4]
   12dc4:	e3833004 	orr	r3, r3, #4


static void SET_2_E (Z80Context* ctx)
{
	BR.E = doSetRes(ctx, SR_SET, 2, BR.E);
   12dc8:	e5c03004 	strb	r3, [r0, #4]
}
   12dcc:	e12fff1e 	bx	lr

00012dd0 <SET_2_H>:
   12dd0:	e5d03007 	ldrb	r3, [r0, #7]
   12dd4:	e3833004 	orr	r3, r3, #4


static void SET_2_H (Z80Context* ctx)
{
	BR.H = doSetRes(ctx, SR_SET, 2, BR.H);
   12dd8:	e5c03007 	strb	r3, [r0, #7]
}
   12ddc:	e12fff1e 	bx	lr

00012de0 <SET_2_L>:
   12de0:	e5d03006 	ldrb	r3, [r0, #6]
   12de4:	e3833004 	orr	r3, r3, #4


static void SET_2_L (Z80Context* ctx)
{
	BR.L = doSetRes(ctx, SR_SET, 2, BR.L);
   12de8:	e5c03006 	strb	r3, [r0, #6]
}
   12dec:	e12fff1e 	bx	lr

00012df0 <SET_3_off_HL>:
	ctx->tstates += 3;
   12df0:	e5903040 	ldr	r3, [r0, #64]	; 0x40


static void SET_3_off_HL (Z80Context* ctx)
{
   12df4:	e92d4070 	push	{r4, r5, r6, lr}
	ctx->tstates += 1;
	write8(ctx, WR.HL, doSetRes(ctx, SR_SET, 3, read8(ctx, WR.HL)));
   12df8:	e1d050b6 	ldrh	r5, [r0, #6]
{
   12dfc:	e1a04000 	mov	r4, r0
   12e00:	e2833004 	add	r3, r3, #4
   12e04:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   12e08:	e1a01005 	mov	r1, r5
   12e0c:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   12e10:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   12e14:	e12fff33 	blx	r3
	ctx->tstates += 3;
   12e18:	e5943040 	ldr	r3, [r4, #64]	; 0x40
		val |= (1 << pos);
   12e1c:	e3802008 	orr	r2, r0, #8
	ctx->tstates += 3;
   12e20:	e2833003 	add	r3, r3, #3
   12e24:	e5843040 	str	r3, [r4, #64]	; 0x40
	ctx->memWrite(ctx->memParam, addr, val);	
   12e28:	e1a01005 	mov	r1, r5
   12e2c:	e5943028 	ldr	r3, [r4, #40]	; 0x28
   12e30:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   12e34:	e6ef2072 	uxtb	r2, r2
}
   12e38:	e8bd4070 	pop	{r4, r5, r6, lr}
   12e3c:	e12fff13 	bx	r3

00012e40 <SET_3_off_IX_d>:


static void SET_3_off_IX_d (Z80Context* ctx)
{
	ctx->tstates += 2;
	char off = read8(ctx, ctx->PC++);
   12e40:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
   12e44:	e5903040 	ldr	r3, [r0, #64]	; 0x40
{
   12e48:	e92d4070 	push	{r4, r5, r6, lr}
	char off = read8(ctx, ctx->PC++);
   12e4c:	e2812001 	add	r2, r1, #1
{
   12e50:	e1a04000 	mov	r4, r0
	ctx->tstates += 3;
   12e54:	e2833005 	add	r3, r3, #5
	char off = read8(ctx, ctx->PC++);
   12e58:	e1c021bc 	strh	r2, [r0, #28]
   12e5c:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   12e60:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   12e64:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   12e68:	e12fff33 	blx	r3
	write8(ctx, WR.IX + off, doSetRes(ctx, SR_SET, 3, read8(ctx, WR.IX + off)));
   12e6c:	e1d450b8 	ldrh	r5, [r4, #8]
	ctx->tstates += 3;
   12e70:	e5943040 	ldr	r3, [r4, #64]	; 0x40
   12e74:	e0855000 	add	r5, r5, r0
   12e78:	e6ff5075 	uxth	r5, r5
   12e7c:	e2833003 	add	r3, r3, #3
   12e80:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   12e84:	e1a01005 	mov	r1, r5
   12e88:	e5943024 	ldr	r3, [r4, #36]	; 0x24
   12e8c:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   12e90:	e12fff33 	blx	r3
	ctx->tstates += 3;
   12e94:	e5943040 	ldr	r3, [r4, #64]	; 0x40
		val |= (1 << pos);
   12e98:	e3802008 	orr	r2, r0, #8
	ctx->tstates += 3;
   12e9c:	e2833003 	add	r3, r3, #3
   12ea0:	e5843040 	str	r3, [r4, #64]	; 0x40
	ctx->memWrite(ctx->memParam, addr, val);	
   12ea4:	e1a01005 	mov	r1, r5
   12ea8:	e5943028 	ldr	r3, [r4, #40]	; 0x28
   12eac:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   12eb0:	e6ef2072 	uxtb	r2, r2
	
	
}
   12eb4:	e8bd4070 	pop	{r4, r5, r6, lr}
   12eb8:	e12fff13 	bx	r3

00012ebc <SET_3_off_IY_d>:


static void SET_3_off_IY_d (Z80Context* ctx)
{
	ctx->tstates += 2;
	char off = read8(ctx, ctx->PC++);
   12ebc:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
   12ec0:	e5903040 	ldr	r3, [r0, #64]	; 0x40
{
   12ec4:	e92d4070 	push	{r4, r5, r6, lr}
	char off = read8(ctx, ctx->PC++);
   12ec8:	e2812001 	add	r2, r1, #1
{
   12ecc:	e1a04000 	mov	r4, r0
	ctx->tstates += 3;
   12ed0:	e2833005 	add	r3, r3, #5
	char off = read8(ctx, ctx->PC++);
   12ed4:	e1c021bc 	strh	r2, [r0, #28]
   12ed8:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   12edc:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   12ee0:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   12ee4:	e12fff33 	blx	r3
	write8(ctx, WR.IY + off, doSetRes(ctx, SR_SET, 3, read8(ctx, WR.IY + off)));
   12ee8:	e1d450ba 	ldrh	r5, [r4, #10]
	ctx->tstates += 3;
   12eec:	e5943040 	ldr	r3, [r4, #64]	; 0x40
   12ef0:	e0855000 	add	r5, r5, r0
   12ef4:	e6ff5075 	uxth	r5, r5
   12ef8:	e2833003 	add	r3, r3, #3
   12efc:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   12f00:	e1a01005 	mov	r1, r5
   12f04:	e5943024 	ldr	r3, [r4, #36]	; 0x24
   12f08:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   12f0c:	e12fff33 	blx	r3
	ctx->tstates += 3;
   12f10:	e5943040 	ldr	r3, [r4, #64]	; 0x40
		val |= (1 << pos);
   12f14:	e3802008 	orr	r2, r0, #8
	ctx->tstates += 3;
   12f18:	e2833003 	add	r3, r3, #3
   12f1c:	e5843040 	str	r3, [r4, #64]	; 0x40
	ctx->memWrite(ctx->memParam, addr, val);	
   12f20:	e1a01005 	mov	r1, r5
   12f24:	e5943028 	ldr	r3, [r4, #40]	; 0x28
   12f28:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   12f2c:	e6ef2072 	uxtb	r2, r2
	
	
}
   12f30:	e8bd4070 	pop	{r4, r5, r6, lr}
   12f34:	e12fff13 	bx	r3

00012f38 <SET_3_A>:
		val |= (1 << pos);
   12f38:	e5d03001 	ldrb	r3, [r0, #1]
   12f3c:	e3833008 	orr	r3, r3, #8


static void SET_3_A (Z80Context* ctx)
{
	BR.A = doSetRes(ctx, SR_SET, 3, BR.A);
   12f40:	e5c03001 	strb	r3, [r0, #1]
}
   12f44:	e12fff1e 	bx	lr

00012f48 <SET_3_B>:
   12f48:	e5d03003 	ldrb	r3, [r0, #3]
   12f4c:	e3833008 	orr	r3, r3, #8


static void SET_3_B (Z80Context* ctx)
{
	BR.B = doSetRes(ctx, SR_SET, 3, BR.B);
   12f50:	e5c03003 	strb	r3, [r0, #3]
}
   12f54:	e12fff1e 	bx	lr

00012f58 <SET_3_C>:
   12f58:	e5d03002 	ldrb	r3, [r0, #2]
   12f5c:	e3833008 	orr	r3, r3, #8


static void SET_3_C (Z80Context* ctx)
{
	BR.C = doSetRes(ctx, SR_SET, 3, BR.C);
   12f60:	e5c03002 	strb	r3, [r0, #2]
}
   12f64:	e12fff1e 	bx	lr

00012f68 <SET_3_D>:
   12f68:	e5d03005 	ldrb	r3, [r0, #5]
   12f6c:	e3833008 	orr	r3, r3, #8


static void SET_3_D (Z80Context* ctx)
{
	BR.D = doSetRes(ctx, SR_SET, 3, BR.D);
   12f70:	e5c03005 	strb	r3, [r0, #5]
}
   12f74:	e12fff1e 	bx	lr

00012f78 <SET_3_E>:
   12f78:	e5d03004 	ldrb	r3, [r0, #4]
   12f7c:	e3833008 	orr	r3, r3, #8


static void SET_3_E (Z80Context* ctx)
{
	BR.E = doSetRes(ctx, SR_SET, 3, BR.E);
   12f80:	e5c03004 	strb	r3, [r0, #4]
}
   12f84:	e12fff1e 	bx	lr

00012f88 <SET_3_H>:
   12f88:	e5d03007 	ldrb	r3, [r0, #7]
   12f8c:	e3833008 	orr	r3, r3, #8


static void SET_3_H (Z80Context* ctx)
{
	BR.H = doSetRes(ctx, SR_SET, 3, BR.H);
   12f90:	e5c03007 	strb	r3, [r0, #7]
}
   12f94:	e12fff1e 	bx	lr

00012f98 <SET_3_L>:
   12f98:	e5d03006 	ldrb	r3, [r0, #6]
   12f9c:	e3833008 	orr	r3, r3, #8


static void SET_3_L (Z80Context* ctx)
{
	BR.L = doSetRes(ctx, SR_SET, 3, BR.L);
   12fa0:	e5c03006 	strb	r3, [r0, #6]
}
   12fa4:	e12fff1e 	bx	lr

00012fa8 <SET_4_off_HL>:
	ctx->tstates += 3;
   12fa8:	e5903040 	ldr	r3, [r0, #64]	; 0x40


static void SET_4_off_HL (Z80Context* ctx)
{
   12fac:	e92d4070 	push	{r4, r5, r6, lr}
	ctx->tstates += 1;
	write8(ctx, WR.HL, doSetRes(ctx, SR_SET, 4, read8(ctx, WR.HL)));
   12fb0:	e1d050b6 	ldrh	r5, [r0, #6]
{
   12fb4:	e1a04000 	mov	r4, r0
   12fb8:	e2833004 	add	r3, r3, #4
   12fbc:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   12fc0:	e1a01005 	mov	r1, r5
   12fc4:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   12fc8:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   12fcc:	e12fff33 	blx	r3
	ctx->tstates += 3;
   12fd0:	e5943040 	ldr	r3, [r4, #64]	; 0x40
		val |= (1 << pos);
   12fd4:	e3802010 	orr	r2, r0, #16
	ctx->tstates += 3;
   12fd8:	e2833003 	add	r3, r3, #3
   12fdc:	e5843040 	str	r3, [r4, #64]	; 0x40
	ctx->memWrite(ctx->memParam, addr, val);	
   12fe0:	e1a01005 	mov	r1, r5
   12fe4:	e5943028 	ldr	r3, [r4, #40]	; 0x28
   12fe8:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   12fec:	e6ef2072 	uxtb	r2, r2
}
   12ff0:	e8bd4070 	pop	{r4, r5, r6, lr}
   12ff4:	e12fff13 	bx	r3

00012ff8 <SET_4_off_IX_d>:


static void SET_4_off_IX_d (Z80Context* ctx)
{
	ctx->tstates += 2;
	char off = read8(ctx, ctx->PC++);
   12ff8:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
   12ffc:	e5903040 	ldr	r3, [r0, #64]	; 0x40
{
   13000:	e92d4070 	push	{r4, r5, r6, lr}
	char off = read8(ctx, ctx->PC++);
   13004:	e2812001 	add	r2, r1, #1
{
   13008:	e1a04000 	mov	r4, r0
	ctx->tstates += 3;
   1300c:	e2833005 	add	r3, r3, #5
	char off = read8(ctx, ctx->PC++);
   13010:	e1c021bc 	strh	r2, [r0, #28]
   13014:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   13018:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   1301c:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   13020:	e12fff33 	blx	r3
	write8(ctx, WR.IX + off, doSetRes(ctx, SR_SET, 4, read8(ctx, WR.IX + off)));
   13024:	e1d450b8 	ldrh	r5, [r4, #8]
	ctx->tstates += 3;
   13028:	e5943040 	ldr	r3, [r4, #64]	; 0x40
   1302c:	e0855000 	add	r5, r5, r0
   13030:	e6ff5075 	uxth	r5, r5
   13034:	e2833003 	add	r3, r3, #3
   13038:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   1303c:	e1a01005 	mov	r1, r5
   13040:	e5943024 	ldr	r3, [r4, #36]	; 0x24
   13044:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   13048:	e12fff33 	blx	r3
	ctx->tstates += 3;
   1304c:	e5943040 	ldr	r3, [r4, #64]	; 0x40
		val |= (1 << pos);
   13050:	e3802010 	orr	r2, r0, #16
	ctx->tstates += 3;
   13054:	e2833003 	add	r3, r3, #3
   13058:	e5843040 	str	r3, [r4, #64]	; 0x40
	ctx->memWrite(ctx->memParam, addr, val);	
   1305c:	e1a01005 	mov	r1, r5
   13060:	e5943028 	ldr	r3, [r4, #40]	; 0x28
   13064:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   13068:	e6ef2072 	uxtb	r2, r2
	
	
}
   1306c:	e8bd4070 	pop	{r4, r5, r6, lr}
   13070:	e12fff13 	bx	r3

00013074 <SET_4_off_IY_d>:


static void SET_4_off_IY_d (Z80Context* ctx)
{
	ctx->tstates += 2;
	char off = read8(ctx, ctx->PC++);
   13074:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
   13078:	e5903040 	ldr	r3, [r0, #64]	; 0x40
{
   1307c:	e92d4070 	push	{r4, r5, r6, lr}
	char off = read8(ctx, ctx->PC++);
   13080:	e2812001 	add	r2, r1, #1
{
   13084:	e1a04000 	mov	r4, r0
	ctx->tstates += 3;
   13088:	e2833005 	add	r3, r3, #5
	char off = read8(ctx, ctx->PC++);
   1308c:	e1c021bc 	strh	r2, [r0, #28]
   13090:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   13094:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   13098:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   1309c:	e12fff33 	blx	r3
	write8(ctx, WR.IY + off, doSetRes(ctx, SR_SET, 4, read8(ctx, WR.IY + off)));
   130a0:	e1d450ba 	ldrh	r5, [r4, #10]
	ctx->tstates += 3;
   130a4:	e5943040 	ldr	r3, [r4, #64]	; 0x40
   130a8:	e0855000 	add	r5, r5, r0
   130ac:	e6ff5075 	uxth	r5, r5
   130b0:	e2833003 	add	r3, r3, #3
   130b4:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   130b8:	e1a01005 	mov	r1, r5
   130bc:	e5943024 	ldr	r3, [r4, #36]	; 0x24
   130c0:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   130c4:	e12fff33 	blx	r3
	ctx->tstates += 3;
   130c8:	e5943040 	ldr	r3, [r4, #64]	; 0x40
		val |= (1 << pos);
   130cc:	e3802010 	orr	r2, r0, #16
	ctx->tstates += 3;
   130d0:	e2833003 	add	r3, r3, #3
   130d4:	e5843040 	str	r3, [r4, #64]	; 0x40
	ctx->memWrite(ctx->memParam, addr, val);	
   130d8:	e1a01005 	mov	r1, r5
   130dc:	e5943028 	ldr	r3, [r4, #40]	; 0x28
   130e0:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   130e4:	e6ef2072 	uxtb	r2, r2
	
	
}
   130e8:	e8bd4070 	pop	{r4, r5, r6, lr}
   130ec:	e12fff13 	bx	r3

000130f0 <SET_4_A>:
		val |= (1 << pos);
   130f0:	e5d03001 	ldrb	r3, [r0, #1]
   130f4:	e3833010 	orr	r3, r3, #16


static void SET_4_A (Z80Context* ctx)
{
	BR.A = doSetRes(ctx, SR_SET, 4, BR.A);
   130f8:	e5c03001 	strb	r3, [r0, #1]
}
   130fc:	e12fff1e 	bx	lr

00013100 <SET_4_B>:
   13100:	e5d03003 	ldrb	r3, [r0, #3]
   13104:	e3833010 	orr	r3, r3, #16


static void SET_4_B (Z80Context* ctx)
{
	BR.B = doSetRes(ctx, SR_SET, 4, BR.B);
   13108:	e5c03003 	strb	r3, [r0, #3]
}
   1310c:	e12fff1e 	bx	lr

00013110 <SET_4_C>:
   13110:	e5d03002 	ldrb	r3, [r0, #2]
   13114:	e3833010 	orr	r3, r3, #16


static void SET_4_C (Z80Context* ctx)
{
	BR.C = doSetRes(ctx, SR_SET, 4, BR.C);
   13118:	e5c03002 	strb	r3, [r0, #2]
}
   1311c:	e12fff1e 	bx	lr

00013120 <SET_4_D>:
   13120:	e5d03005 	ldrb	r3, [r0, #5]
   13124:	e3833010 	orr	r3, r3, #16


static void SET_4_D (Z80Context* ctx)
{
	BR.D = doSetRes(ctx, SR_SET, 4, BR.D);
   13128:	e5c03005 	strb	r3, [r0, #5]
}
   1312c:	e12fff1e 	bx	lr

00013130 <SET_4_E>:
   13130:	e5d03004 	ldrb	r3, [r0, #4]
   13134:	e3833010 	orr	r3, r3, #16


static void SET_4_E (Z80Context* ctx)
{
	BR.E = doSetRes(ctx, SR_SET, 4, BR.E);
   13138:	e5c03004 	strb	r3, [r0, #4]
}
   1313c:	e12fff1e 	bx	lr

00013140 <SET_4_H>:
   13140:	e5d03007 	ldrb	r3, [r0, #7]
   13144:	e3833010 	orr	r3, r3, #16


static void SET_4_H (Z80Context* ctx)
{
	BR.H = doSetRes(ctx, SR_SET, 4, BR.H);
   13148:	e5c03007 	strb	r3, [r0, #7]
}
   1314c:	e12fff1e 	bx	lr

00013150 <SET_4_L>:
   13150:	e5d03006 	ldrb	r3, [r0, #6]
   13154:	e3833010 	orr	r3, r3, #16


static void SET_4_L (Z80Context* ctx)
{
	BR.L = doSetRes(ctx, SR_SET, 4, BR.L);
   13158:	e5c03006 	strb	r3, [r0, #6]
}
   1315c:	e12fff1e 	bx	lr

00013160 <SET_5_off_HL>:
	ctx->tstates += 3;
   13160:	e5903040 	ldr	r3, [r0, #64]	; 0x40


static void SET_5_off_HL (Z80Context* ctx)
{
   13164:	e92d4070 	push	{r4, r5, r6, lr}
	ctx->tstates += 1;
	write8(ctx, WR.HL, doSetRes(ctx, SR_SET, 5, read8(ctx, WR.HL)));
   13168:	e1d050b6 	ldrh	r5, [r0, #6]
{
   1316c:	e1a04000 	mov	r4, r0
   13170:	e2833004 	add	r3, r3, #4
   13174:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   13178:	e1a01005 	mov	r1, r5
   1317c:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   13180:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   13184:	e12fff33 	blx	r3
	ctx->tstates += 3;
   13188:	e5943040 	ldr	r3, [r4, #64]	; 0x40
		val |= (1 << pos);
   1318c:	e3802020 	orr	r2, r0, #32
	ctx->tstates += 3;
   13190:	e2833003 	add	r3, r3, #3
   13194:	e5843040 	str	r3, [r4, #64]	; 0x40
	ctx->memWrite(ctx->memParam, addr, val);	
   13198:	e1a01005 	mov	r1, r5
   1319c:	e5943028 	ldr	r3, [r4, #40]	; 0x28
   131a0:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   131a4:	e6ef2072 	uxtb	r2, r2
}
   131a8:	e8bd4070 	pop	{r4, r5, r6, lr}
   131ac:	e12fff13 	bx	r3

000131b0 <SET_5_off_IX_d>:


static void SET_5_off_IX_d (Z80Context* ctx)
{
	ctx->tstates += 2;
	char off = read8(ctx, ctx->PC++);
   131b0:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
   131b4:	e5903040 	ldr	r3, [r0, #64]	; 0x40
{
   131b8:	e92d4070 	push	{r4, r5, r6, lr}
	char off = read8(ctx, ctx->PC++);
   131bc:	e2812001 	add	r2, r1, #1
{
   131c0:	e1a04000 	mov	r4, r0
	ctx->tstates += 3;
   131c4:	e2833005 	add	r3, r3, #5
	char off = read8(ctx, ctx->PC++);
   131c8:	e1c021bc 	strh	r2, [r0, #28]
   131cc:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   131d0:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   131d4:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   131d8:	e12fff33 	blx	r3
	write8(ctx, WR.IX + off, doSetRes(ctx, SR_SET, 5, read8(ctx, WR.IX + off)));
   131dc:	e1d450b8 	ldrh	r5, [r4, #8]
	ctx->tstates += 3;
   131e0:	e5943040 	ldr	r3, [r4, #64]	; 0x40
   131e4:	e0855000 	add	r5, r5, r0
   131e8:	e6ff5075 	uxth	r5, r5
   131ec:	e2833003 	add	r3, r3, #3
   131f0:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   131f4:	e1a01005 	mov	r1, r5
   131f8:	e5943024 	ldr	r3, [r4, #36]	; 0x24
   131fc:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   13200:	e12fff33 	blx	r3
	ctx->tstates += 3;
   13204:	e5943040 	ldr	r3, [r4, #64]	; 0x40
		val |= (1 << pos);
   13208:	e3802020 	orr	r2, r0, #32
	ctx->tstates += 3;
   1320c:	e2833003 	add	r3, r3, #3
   13210:	e5843040 	str	r3, [r4, #64]	; 0x40
	ctx->memWrite(ctx->memParam, addr, val);	
   13214:	e1a01005 	mov	r1, r5
   13218:	e5943028 	ldr	r3, [r4, #40]	; 0x28
   1321c:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   13220:	e6ef2072 	uxtb	r2, r2
	
	
}
   13224:	e8bd4070 	pop	{r4, r5, r6, lr}
   13228:	e12fff13 	bx	r3

0001322c <SET_5_off_IY_d>:


static void SET_5_off_IY_d (Z80Context* ctx)
{
	ctx->tstates += 2;
	char off = read8(ctx, ctx->PC++);
   1322c:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
   13230:	e5903040 	ldr	r3, [r0, #64]	; 0x40
{
   13234:	e92d4070 	push	{r4, r5, r6, lr}
	char off = read8(ctx, ctx->PC++);
   13238:	e2812001 	add	r2, r1, #1
{
   1323c:	e1a04000 	mov	r4, r0
	ctx->tstates += 3;
   13240:	e2833005 	add	r3, r3, #5
	char off = read8(ctx, ctx->PC++);
   13244:	e1c021bc 	strh	r2, [r0, #28]
   13248:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   1324c:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   13250:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   13254:	e12fff33 	blx	r3
	write8(ctx, WR.IY + off, doSetRes(ctx, SR_SET, 5, read8(ctx, WR.IY + off)));
   13258:	e1d450ba 	ldrh	r5, [r4, #10]
	ctx->tstates += 3;
   1325c:	e5943040 	ldr	r3, [r4, #64]	; 0x40
   13260:	e0855000 	add	r5, r5, r0
   13264:	e6ff5075 	uxth	r5, r5
   13268:	e2833003 	add	r3, r3, #3
   1326c:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   13270:	e1a01005 	mov	r1, r5
   13274:	e5943024 	ldr	r3, [r4, #36]	; 0x24
   13278:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   1327c:	e12fff33 	blx	r3
	ctx->tstates += 3;
   13280:	e5943040 	ldr	r3, [r4, #64]	; 0x40
		val |= (1 << pos);
   13284:	e3802020 	orr	r2, r0, #32
	ctx->tstates += 3;
   13288:	e2833003 	add	r3, r3, #3
   1328c:	e5843040 	str	r3, [r4, #64]	; 0x40
	ctx->memWrite(ctx->memParam, addr, val);	
   13290:	e1a01005 	mov	r1, r5
   13294:	e5943028 	ldr	r3, [r4, #40]	; 0x28
   13298:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   1329c:	e6ef2072 	uxtb	r2, r2
	
	
}
   132a0:	e8bd4070 	pop	{r4, r5, r6, lr}
   132a4:	e12fff13 	bx	r3

000132a8 <SET_5_A>:
		val |= (1 << pos);
   132a8:	e5d03001 	ldrb	r3, [r0, #1]
   132ac:	e3833020 	orr	r3, r3, #32


static void SET_5_A (Z80Context* ctx)
{
	BR.A = doSetRes(ctx, SR_SET, 5, BR.A);
   132b0:	e5c03001 	strb	r3, [r0, #1]
}
   132b4:	e12fff1e 	bx	lr

000132b8 <SET_5_B>:
   132b8:	e5d03003 	ldrb	r3, [r0, #3]
   132bc:	e3833020 	orr	r3, r3, #32


static void SET_5_B (Z80Context* ctx)
{
	BR.B = doSetRes(ctx, SR_SET, 5, BR.B);
   132c0:	e5c03003 	strb	r3, [r0, #3]
}
   132c4:	e12fff1e 	bx	lr

000132c8 <SET_5_C>:
   132c8:	e5d03002 	ldrb	r3, [r0, #2]
   132cc:	e3833020 	orr	r3, r3, #32


static void SET_5_C (Z80Context* ctx)
{
	BR.C = doSetRes(ctx, SR_SET, 5, BR.C);
   132d0:	e5c03002 	strb	r3, [r0, #2]
}
   132d4:	e12fff1e 	bx	lr

000132d8 <SET_5_D>:
   132d8:	e5d03005 	ldrb	r3, [r0, #5]
   132dc:	e3833020 	orr	r3, r3, #32


static void SET_5_D (Z80Context* ctx)
{
	BR.D = doSetRes(ctx, SR_SET, 5, BR.D);
   132e0:	e5c03005 	strb	r3, [r0, #5]
}
   132e4:	e12fff1e 	bx	lr

000132e8 <SET_5_E>:
   132e8:	e5d03004 	ldrb	r3, [r0, #4]
   132ec:	e3833020 	orr	r3, r3, #32


static void SET_5_E (Z80Context* ctx)
{
	BR.E = doSetRes(ctx, SR_SET, 5, BR.E);
   132f0:	e5c03004 	strb	r3, [r0, #4]
}
   132f4:	e12fff1e 	bx	lr

000132f8 <SET_5_H>:
   132f8:	e5d03007 	ldrb	r3, [r0, #7]
   132fc:	e3833020 	orr	r3, r3, #32


static void SET_5_H (Z80Context* ctx)
{
	BR.H = doSetRes(ctx, SR_SET, 5, BR.H);
   13300:	e5c03007 	strb	r3, [r0, #7]
}
   13304:	e12fff1e 	bx	lr

00013308 <SET_5_L>:
   13308:	e5d03006 	ldrb	r3, [r0, #6]
   1330c:	e3833020 	orr	r3, r3, #32


static void SET_5_L (Z80Context* ctx)
{
	BR.L = doSetRes(ctx, SR_SET, 5, BR.L);
   13310:	e5c03006 	strb	r3, [r0, #6]
}
   13314:	e12fff1e 	bx	lr

00013318 <SET_6_off_HL>:
	ctx->tstates += 3;
   13318:	e5903040 	ldr	r3, [r0, #64]	; 0x40


static void SET_6_off_HL (Z80Context* ctx)
{
   1331c:	e92d4070 	push	{r4, r5, r6, lr}
	ctx->tstates += 1;
	write8(ctx, WR.HL, doSetRes(ctx, SR_SET, 6, read8(ctx, WR.HL)));
   13320:	e1d050b6 	ldrh	r5, [r0, #6]
{
   13324:	e1a04000 	mov	r4, r0
   13328:	e2833004 	add	r3, r3, #4
   1332c:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   13330:	e1a01005 	mov	r1, r5
   13334:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   13338:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   1333c:	e12fff33 	blx	r3
	ctx->tstates += 3;
   13340:	e5943040 	ldr	r3, [r4, #64]	; 0x40
		val |= (1 << pos);
   13344:	e3802040 	orr	r2, r0, #64	; 0x40
	ctx->tstates += 3;
   13348:	e2833003 	add	r3, r3, #3
   1334c:	e5843040 	str	r3, [r4, #64]	; 0x40
	ctx->memWrite(ctx->memParam, addr, val);	
   13350:	e1a01005 	mov	r1, r5
   13354:	e5943028 	ldr	r3, [r4, #40]	; 0x28
   13358:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   1335c:	e6ef2072 	uxtb	r2, r2
}
   13360:	e8bd4070 	pop	{r4, r5, r6, lr}
   13364:	e12fff13 	bx	r3

00013368 <SET_6_off_IX_d>:


static void SET_6_off_IX_d (Z80Context* ctx)
{
	ctx->tstates += 2;
	char off = read8(ctx, ctx->PC++);
   13368:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
   1336c:	e5903040 	ldr	r3, [r0, #64]	; 0x40
{
   13370:	e92d4070 	push	{r4, r5, r6, lr}
	char off = read8(ctx, ctx->PC++);
   13374:	e2812001 	add	r2, r1, #1
{
   13378:	e1a04000 	mov	r4, r0
	ctx->tstates += 3;
   1337c:	e2833005 	add	r3, r3, #5
	char off = read8(ctx, ctx->PC++);
   13380:	e1c021bc 	strh	r2, [r0, #28]
   13384:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   13388:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   1338c:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   13390:	e12fff33 	blx	r3
	write8(ctx, WR.IX + off, doSetRes(ctx, SR_SET, 6, read8(ctx, WR.IX + off)));
   13394:	e1d450b8 	ldrh	r5, [r4, #8]
	ctx->tstates += 3;
   13398:	e5943040 	ldr	r3, [r4, #64]	; 0x40
   1339c:	e0855000 	add	r5, r5, r0
   133a0:	e6ff5075 	uxth	r5, r5
   133a4:	e2833003 	add	r3, r3, #3
   133a8:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   133ac:	e1a01005 	mov	r1, r5
   133b0:	e5943024 	ldr	r3, [r4, #36]	; 0x24
   133b4:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   133b8:	e12fff33 	blx	r3
	ctx->tstates += 3;
   133bc:	e5943040 	ldr	r3, [r4, #64]	; 0x40
		val |= (1 << pos);
   133c0:	e3802040 	orr	r2, r0, #64	; 0x40
	ctx->tstates += 3;
   133c4:	e2833003 	add	r3, r3, #3
   133c8:	e5843040 	str	r3, [r4, #64]	; 0x40
	ctx->memWrite(ctx->memParam, addr, val);	
   133cc:	e1a01005 	mov	r1, r5
   133d0:	e5943028 	ldr	r3, [r4, #40]	; 0x28
   133d4:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   133d8:	e6ef2072 	uxtb	r2, r2
	
	
}
   133dc:	e8bd4070 	pop	{r4, r5, r6, lr}
   133e0:	e12fff13 	bx	r3

000133e4 <SET_6_off_IY_d>:


static void SET_6_off_IY_d (Z80Context* ctx)
{
	ctx->tstates += 2;
	char off = read8(ctx, ctx->PC++);
   133e4:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
   133e8:	e5903040 	ldr	r3, [r0, #64]	; 0x40
{
   133ec:	e92d4070 	push	{r4, r5, r6, lr}
	char off = read8(ctx, ctx->PC++);
   133f0:	e2812001 	add	r2, r1, #1
{
   133f4:	e1a04000 	mov	r4, r0
	ctx->tstates += 3;
   133f8:	e2833005 	add	r3, r3, #5
	char off = read8(ctx, ctx->PC++);
   133fc:	e1c021bc 	strh	r2, [r0, #28]
   13400:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   13404:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   13408:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   1340c:	e12fff33 	blx	r3
	write8(ctx, WR.IY + off, doSetRes(ctx, SR_SET, 6, read8(ctx, WR.IY + off)));
   13410:	e1d450ba 	ldrh	r5, [r4, #10]
	ctx->tstates += 3;
   13414:	e5943040 	ldr	r3, [r4, #64]	; 0x40
   13418:	e0855000 	add	r5, r5, r0
   1341c:	e6ff5075 	uxth	r5, r5
   13420:	e2833003 	add	r3, r3, #3
   13424:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   13428:	e1a01005 	mov	r1, r5
   1342c:	e5943024 	ldr	r3, [r4, #36]	; 0x24
   13430:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   13434:	e12fff33 	blx	r3
	ctx->tstates += 3;
   13438:	e5943040 	ldr	r3, [r4, #64]	; 0x40
		val |= (1 << pos);
   1343c:	e3802040 	orr	r2, r0, #64	; 0x40
	ctx->tstates += 3;
   13440:	e2833003 	add	r3, r3, #3
   13444:	e5843040 	str	r3, [r4, #64]	; 0x40
	ctx->memWrite(ctx->memParam, addr, val);	
   13448:	e1a01005 	mov	r1, r5
   1344c:	e5943028 	ldr	r3, [r4, #40]	; 0x28
   13450:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   13454:	e6ef2072 	uxtb	r2, r2
	
	
}
   13458:	e8bd4070 	pop	{r4, r5, r6, lr}
   1345c:	e12fff13 	bx	r3

00013460 <SET_6_A>:
		val |= (1 << pos);
   13460:	e5d03001 	ldrb	r3, [r0, #1]
   13464:	e3833040 	orr	r3, r3, #64	; 0x40


static void SET_6_A (Z80Context* ctx)
{
	BR.A = doSetRes(ctx, SR_SET, 6, BR.A);
   13468:	e5c03001 	strb	r3, [r0, #1]
}
   1346c:	e12fff1e 	bx	lr

00013470 <SET_6_B>:
   13470:	e5d03003 	ldrb	r3, [r0, #3]
   13474:	e3833040 	orr	r3, r3, #64	; 0x40


static void SET_6_B (Z80Context* ctx)
{
	BR.B = doSetRes(ctx, SR_SET, 6, BR.B);
   13478:	e5c03003 	strb	r3, [r0, #3]
}
   1347c:	e12fff1e 	bx	lr

00013480 <SET_6_C>:
   13480:	e5d03002 	ldrb	r3, [r0, #2]
   13484:	e3833040 	orr	r3, r3, #64	; 0x40


static void SET_6_C (Z80Context* ctx)
{
	BR.C = doSetRes(ctx, SR_SET, 6, BR.C);
   13488:	e5c03002 	strb	r3, [r0, #2]
}
   1348c:	e12fff1e 	bx	lr

00013490 <SET_6_D>:
   13490:	e5d03005 	ldrb	r3, [r0, #5]
   13494:	e3833040 	orr	r3, r3, #64	; 0x40


static void SET_6_D (Z80Context* ctx)
{
	BR.D = doSetRes(ctx, SR_SET, 6, BR.D);
   13498:	e5c03005 	strb	r3, [r0, #5]
}
   1349c:	e12fff1e 	bx	lr

000134a0 <SET_6_E>:
   134a0:	e5d03004 	ldrb	r3, [r0, #4]
   134a4:	e3833040 	orr	r3, r3, #64	; 0x40


static void SET_6_E (Z80Context* ctx)
{
	BR.E = doSetRes(ctx, SR_SET, 6, BR.E);
   134a8:	e5c03004 	strb	r3, [r0, #4]
}
   134ac:	e12fff1e 	bx	lr

000134b0 <SET_6_H>:
   134b0:	e5d03007 	ldrb	r3, [r0, #7]
   134b4:	e3833040 	orr	r3, r3, #64	; 0x40


static void SET_6_H (Z80Context* ctx)
{
	BR.H = doSetRes(ctx, SR_SET, 6, BR.H);
   134b8:	e5c03007 	strb	r3, [r0, #7]
}
   134bc:	e12fff1e 	bx	lr

000134c0 <SET_6_L>:
   134c0:	e5d03006 	ldrb	r3, [r0, #6]
   134c4:	e3833040 	orr	r3, r3, #64	; 0x40


static void SET_6_L (Z80Context* ctx)
{
	BR.L = doSetRes(ctx, SR_SET, 6, BR.L);
   134c8:	e5c03006 	strb	r3, [r0, #6]
}
   134cc:	e12fff1e 	bx	lr

000134d0 <SET_7_off_HL>:
	ctx->tstates += 3;
   134d0:	e5903040 	ldr	r3, [r0, #64]	; 0x40


static void SET_7_off_HL (Z80Context* ctx)
{
   134d4:	e92d4070 	push	{r4, r5, r6, lr}
	ctx->tstates += 1;
	write8(ctx, WR.HL, doSetRes(ctx, SR_SET, 7, read8(ctx, WR.HL)));
   134d8:	e1d050b6 	ldrh	r5, [r0, #6]
   134dc:	e2833004 	add	r3, r3, #4
{
   134e0:	e1a04000 	mov	r4, r0
   134e4:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   134e8:	e1a01005 	mov	r1, r5
   134ec:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   134f0:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   134f4:	e12fff33 	blx	r3
		val |= (1 << pos);
   134f8:	e1e02c80 	mvn	r2, r0, lsl #25
   134fc:	e1e02ca2 	mvn	r2, r2, lsr #25
	ctx->tstates += 3;
   13500:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	ctx->memWrite(ctx->memParam, addr, val);	
   13504:	e1a01005 	mov	r1, r5
	ctx->tstates += 3;
   13508:	e2833003 	add	r3, r3, #3
   1350c:	e5843040 	str	r3, [r4, #64]	; 0x40
	ctx->memWrite(ctx->memParam, addr, val);	
   13510:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   13514:	e5943028 	ldr	r3, [r4, #40]	; 0x28
   13518:	e6ef2072 	uxtb	r2, r2
}
   1351c:	e8bd4070 	pop	{r4, r5, r6, lr}
   13520:	e12fff13 	bx	r3

00013524 <SET_7_off_IX_d>:


static void SET_7_off_IX_d (Z80Context* ctx)
{
	ctx->tstates += 2;
	char off = read8(ctx, ctx->PC++);
   13524:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
   13528:	e5903040 	ldr	r3, [r0, #64]	; 0x40
{
   1352c:	e92d4070 	push	{r4, r5, r6, lr}
	char off = read8(ctx, ctx->PC++);
   13530:	e2812001 	add	r2, r1, #1
{
   13534:	e1a04000 	mov	r4, r0
	ctx->tstates += 3;
   13538:	e2833005 	add	r3, r3, #5
	char off = read8(ctx, ctx->PC++);
   1353c:	e1c021bc 	strh	r2, [r0, #28]
   13540:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   13544:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   13548:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   1354c:	e12fff33 	blx	r3
	write8(ctx, WR.IX + off, doSetRes(ctx, SR_SET, 7, read8(ctx, WR.IX + off)));
   13550:	e1d450b8 	ldrh	r5, [r4, #8]
	ctx->tstates += 3;
   13554:	e5943040 	ldr	r3, [r4, #64]	; 0x40
   13558:	e0855000 	add	r5, r5, r0
   1355c:	e6ff5075 	uxth	r5, r5
   13560:	e2833003 	add	r3, r3, #3
   13564:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   13568:	e1a01005 	mov	r1, r5
   1356c:	e5943024 	ldr	r3, [r4, #36]	; 0x24
   13570:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   13574:	e12fff33 	blx	r3
		val |= (1 << pos);
   13578:	e1e02c80 	mvn	r2, r0, lsl #25
   1357c:	e1e02ca2 	mvn	r2, r2, lsr #25
	ctx->tstates += 3;
   13580:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	ctx->memWrite(ctx->memParam, addr, val);	
   13584:	e1a01005 	mov	r1, r5
	ctx->tstates += 3;
   13588:	e2833003 	add	r3, r3, #3
   1358c:	e5843040 	str	r3, [r4, #64]	; 0x40
	ctx->memWrite(ctx->memParam, addr, val);	
   13590:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   13594:	e5943028 	ldr	r3, [r4, #40]	; 0x28
   13598:	e6ef2072 	uxtb	r2, r2
	
	
}
   1359c:	e8bd4070 	pop	{r4, r5, r6, lr}
   135a0:	e12fff13 	bx	r3

000135a4 <SET_7_off_IY_d>:


static void SET_7_off_IY_d (Z80Context* ctx)
{
	ctx->tstates += 2;
	char off = read8(ctx, ctx->PC++);
   135a4:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
   135a8:	e5903040 	ldr	r3, [r0, #64]	; 0x40
{
   135ac:	e92d4070 	push	{r4, r5, r6, lr}
	char off = read8(ctx, ctx->PC++);
   135b0:	e2812001 	add	r2, r1, #1
{
   135b4:	e1a04000 	mov	r4, r0
	ctx->tstates += 3;
   135b8:	e2833005 	add	r3, r3, #5
	char off = read8(ctx, ctx->PC++);
   135bc:	e1c021bc 	strh	r2, [r0, #28]
   135c0:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   135c4:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   135c8:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   135cc:	e12fff33 	blx	r3
	write8(ctx, WR.IY + off, doSetRes(ctx, SR_SET, 7, read8(ctx, WR.IY + off)));
   135d0:	e1d450ba 	ldrh	r5, [r4, #10]
	ctx->tstates += 3;
   135d4:	e5943040 	ldr	r3, [r4, #64]	; 0x40
   135d8:	e0855000 	add	r5, r5, r0
   135dc:	e6ff5075 	uxth	r5, r5
   135e0:	e2833003 	add	r3, r3, #3
   135e4:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   135e8:	e1a01005 	mov	r1, r5
   135ec:	e5943024 	ldr	r3, [r4, #36]	; 0x24
   135f0:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   135f4:	e12fff33 	blx	r3
		val |= (1 << pos);
   135f8:	e1e02c80 	mvn	r2, r0, lsl #25
   135fc:	e1e02ca2 	mvn	r2, r2, lsr #25
	ctx->tstates += 3;
   13600:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	ctx->memWrite(ctx->memParam, addr, val);	
   13604:	e1a01005 	mov	r1, r5
	ctx->tstates += 3;
   13608:	e2833003 	add	r3, r3, #3
   1360c:	e5843040 	str	r3, [r4, #64]	; 0x40
	ctx->memWrite(ctx->memParam, addr, val);	
   13610:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   13614:	e5943028 	ldr	r3, [r4, #40]	; 0x28
   13618:	e6ef2072 	uxtb	r2, r2
	
	
}
   1361c:	e8bd4070 	pop	{r4, r5, r6, lr}
   13620:	e12fff13 	bx	r3

00013624 <SET_7_A>:
		val |= (1 << pos);
   13624:	e5d03001 	ldrb	r3, [r0, #1]
   13628:	e1e03c83 	mvn	r3, r3, lsl #25
   1362c:	e1e03ca3 	mvn	r3, r3, lsr #25


static void SET_7_A (Z80Context* ctx)
{
	BR.A = doSetRes(ctx, SR_SET, 7, BR.A);
   13630:	e5c03001 	strb	r3, [r0, #1]
}
   13634:	e12fff1e 	bx	lr

00013638 <SET_7_B>:
   13638:	e5d03003 	ldrb	r3, [r0, #3]
   1363c:	e1e03c83 	mvn	r3, r3, lsl #25
   13640:	e1e03ca3 	mvn	r3, r3, lsr #25


static void SET_7_B (Z80Context* ctx)
{
	BR.B = doSetRes(ctx, SR_SET, 7, BR.B);
   13644:	e5c03003 	strb	r3, [r0, #3]
}
   13648:	e12fff1e 	bx	lr

0001364c <SET_7_C>:
   1364c:	e5d03002 	ldrb	r3, [r0, #2]
   13650:	e1e03c83 	mvn	r3, r3, lsl #25
   13654:	e1e03ca3 	mvn	r3, r3, lsr #25


static void SET_7_C (Z80Context* ctx)
{
	BR.C = doSetRes(ctx, SR_SET, 7, BR.C);
   13658:	e5c03002 	strb	r3, [r0, #2]
}
   1365c:	e12fff1e 	bx	lr

00013660 <SET_7_D>:
   13660:	e5d03005 	ldrb	r3, [r0, #5]
   13664:	e1e03c83 	mvn	r3, r3, lsl #25
   13668:	e1e03ca3 	mvn	r3, r3, lsr #25


static void SET_7_D (Z80Context* ctx)
{
	BR.D = doSetRes(ctx, SR_SET, 7, BR.D);
   1366c:	e5c03005 	strb	r3, [r0, #5]
}
   13670:	e12fff1e 	bx	lr

00013674 <SET_7_E>:
   13674:	e5d03004 	ldrb	r3, [r0, #4]
   13678:	e1e03c83 	mvn	r3, r3, lsl #25
   1367c:	e1e03ca3 	mvn	r3, r3, lsr #25


static void SET_7_E (Z80Context* ctx)
{
	BR.E = doSetRes(ctx, SR_SET, 7, BR.E);
   13680:	e5c03004 	strb	r3, [r0, #4]
}
   13684:	e12fff1e 	bx	lr

00013688 <SET_7_H>:
   13688:	e5d03007 	ldrb	r3, [r0, #7]
   1368c:	e1e03c83 	mvn	r3, r3, lsl #25
   13690:	e1e03ca3 	mvn	r3, r3, lsr #25


static void SET_7_H (Z80Context* ctx)
{
	BR.H = doSetRes(ctx, SR_SET, 7, BR.H);
   13694:	e5c03007 	strb	r3, [r0, #7]
}
   13698:	e12fff1e 	bx	lr

0001369c <SET_7_L>:
   1369c:	e5d03006 	ldrb	r3, [r0, #6]
   136a0:	e1e03c83 	mvn	r3, r3, lsl #25
   136a4:	e1e03ca3 	mvn	r3, r3, lsr #25


static void SET_7_L (Z80Context* ctx)
{
	BR.L = doSetRes(ctx, SR_SET, 7, BR.L);
   136a8:	e5c03006 	strb	r3, [r0, #6]
}
   136ac:	e12fff1e 	bx	lr

000136b0 <do_execute>:
 * --------------------------------------------------------- 
 */ 


static void do_execute(Z80Context* ctx)
{
   136b0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   136b4:	e5901040 	ldr	r1, [r0, #64]	; 0x40
   136b8:	e1a04000 	mov	r4, r0
	struct Z80OpcodeTable* current = &opcodes_main;
	struct Z80OpcodeEntry* entries = current->entries;
	Z80OpcodeFunc func;
	
	byte opcode;
	int offset = 0;
   136bc:	e3a07000 	mov	r7, #0
			opcode = ctx->int_vector;
			ctx->tstates += 6;
		}
		else
		{
			ctx->M1 = 1;
   136c0:	e3a05001 	mov	r5, #1
	struct Z80OpcodeEntry* entries = current->entries;
   136c4:	e59f60e4 	ldr	r6, [pc, #228]	; 137b0 <do_execute+0x100>
   136c8:	ea000026 	b	13768 <do_execute+0xb8>
			opcode = read8(ctx, ctx->PC + offset);
   136cc:	e1d411bc 	ldrh	r1, [r4, #28]
	ctx->tstates += 3;
   136d0:	e5843040 	str	r3, [r4, #64]	; 0x40
			opcode = read8(ctx, ctx->PC + offset);
   136d4:	e0811007 	add	r1, r1, r7
	return ctx->memRead(ctx->memParam, addr);	
   136d8:	e6ff1071 	uxth	r1, r1
   136dc:	e5943024 	ldr	r3, [r4, #36]	; 0x24
			ctx->M1 = 1;
   136e0:	e5c45023 	strb	r5, [r4, #35]	; 0x23
	return ctx->memRead(ctx->memParam, addr);	
   136e4:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   136e8:	e12fff33 	blx	r3
			ctx->M1 = 0;
			ctx->PC++;
   136ec:	e1d431bc 	ldrh	r3, [r4, #28]
			ctx->tstates += 1;
   136f0:	e5941040 	ldr	r1, [r4, #64]	; 0x40
			ctx->PC++;
   136f4:	e2833001 	add	r3, r3, #1
			ctx->tstates += 1;
   136f8:	e2811001 	add	r1, r1, #1
			ctx->M1 = 0;
   136fc:	e5c48023 	strb	r8, [r4, #35]	; 0x23
			ctx->PC++;
   13700:	e1c431bc 	strh	r3, [r4, #28]
			ctx->tstates += 1;
   13704:	e5841040 	str	r1, [r4, #64]	; 0x40
		}

		INCR;
   13708:	e5d4201e 	ldrb	r2, [r4, #30]
		func = entries[opcode].func;
   1370c:	e6bf0070 	sxth	r0, r0
		INCR;
   13710:	e2823001 	add	r3, r2, #1
   13714:	e203307f 	and	r3, r3, #127	; 0x7f
   13718:	e3c2207f 	bic	r2, r2, #127	; 0x7f
   1371c:	e1833002 	orr	r3, r3, r2
   13720:	e6af3073 	sxtb	r3, r3
   13724:	e6ef2073 	uxtb	r2, r3
   13728:	e5c4201e 	strb	r2, [r4, #30]
		func = entries[opcode].func;
   1372c:	e7968200 	ldr	r8, [r6, r0, lsl #4]
		{
			current = entries[opcode].table;
			entries = current->entries;
			offset = current->opcode_offset;
			if (offset > 0)
				DECR;
   13730:	e2422001 	sub	r2, r2, #1
   13734:	e202207f 	and	r2, r2, #127	; 0x7f
   13738:	e3c3307f 	bic	r3, r3, #127	; 0x7f
		if (func != NULL)
   1373c:	e3580000 	cmp	r8, #0
				DECR;
   13740:	e1823003 	orr	r3, r2, r3
		func = entries[opcode].func;
   13744:	e0860200 	add	r0, r6, r0, lsl #4
		if (func != NULL)
   13748:	1a00000e 	bne	13788 <do_execute+0xd8>
		else if (entries[opcode].table != NULL)
   1374c:	e590600c 	ldr	r6, [r0, #12]
   13750:	e3560000 	cmp	r6, #0
   13754:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
			offset = current->opcode_offset;
   13758:	e5967000 	ldr	r7, [r6]
			entries = current->entries;
   1375c:	e2866004 	add	r6, r6, #4
			if (offset > 0)
   13760:	e3570000 	cmp	r7, #0
				DECR;
   13764:	c5c4301e 	strbgt	r3, [r4, #30]
		if (ctx->exec_int_vector)
   13768:	e5d48048 	ldrb	r8, [r4, #72]	; 0x48
	ctx->tstates += 3;
   1376c:	e2813003 	add	r3, r1, #3
		if (ctx->exec_int_vector)
   13770:	e3580000 	cmp	r8, #0
   13774:	0affffd4 	beq	136cc <do_execute+0x1c>
			ctx->tstates += 6;
   13778:	e2811006 	add	r1, r1, #6
   1377c:	e5841040 	str	r1, [r4, #64]	; 0x40
			opcode = ctx->int_vector;
   13780:	e5d40047 	ldrb	r0, [r4, #71]	; 0x47
   13784:	eaffffdf 	b	13708 <do_execute+0x58>
			ctx->PC -= offset;
   13788:	e1d431bc 	ldrh	r3, [r4, #28]
   1378c:	e6ff7077 	uxth	r7, r7
   13790:	e0433007 	sub	r3, r3, r7
   13794:	e1c431bc 	strh	r3, [r4, #28]
			func(ctx);
   13798:	e1a00004 	mov	r0, r4
   1379c:	e12fff38 	blx	r8
			ctx->PC += offset;
   137a0:	e1d431bc 	ldrh	r3, [r4, #28]
   137a4:	e0877003 	add	r7, r7, r3
   137a8:	e1c471bc 	strh	r7, [r4, #28]
			break;
   137ac:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   137b0:	00061a58 	.word	0x00061a58

000137b4 <JR_Z_off_PC_e>:
	int off = doComplement(read8(ctx, ctx->PC++));
   137b4:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 3;
   137b8:	e5903040 	ldr	r3, [r0, #64]	; 0x40
   137bc:	e2812001 	add	r2, r1, #1
   137c0:	e2833003 	add	r3, r3, #3
{
   137c4:	e92d4010 	push	{r4, lr}
   137c8:	e5803040 	str	r3, [r0, #64]	; 0x40
   137cc:	e1a04000 	mov	r4, r0
	return ctx->memRead(ctx->memParam, addr);	
   137d0:	e5903024 	ldr	r3, [r0, #36]	; 0x24
	int off = doComplement(read8(ctx, ctx->PC++));
   137d4:	e1c021bc 	strh	r2, [r0, #28]
   137d8:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   137dc:	e12fff33 	blx	r3
	if ((v & 0x80) == 0)
   137e0:	e3100080 	tst	r0, #128	; 0x80
	v++;
   137e4:	12600000 	rsbne	r0, r0, #0
	return (BR.F & flag) != 0;
   137e8:	e5d43000 	ldrb	r3, [r4]
	return -v;
   137ec:	16ef0070 	uxtbne	r0, r0
   137f0:	12600000 	rsbne	r0, r0, #0
	if (condition(ctx, C_Z))
   137f4:	e3130040 	tst	r3, #64	; 0x40
   137f8:	08bd8010 	popeq	{r4, pc}
		ctx->tstates += 5;
   137fc:	e5942040 	ldr	r2, [r4, #64]	; 0x40
		ctx->PC += off;
   13800:	e1d431bc 	ldrh	r3, [r4, #28]
		ctx->tstates += 5;
   13804:	e2822005 	add	r2, r2, #5
		ctx->PC += off;
   13808:	e0830000 	add	r0, r3, r0
		ctx->tstates += 5;
   1380c:	e5842040 	str	r2, [r4, #64]	; 0x40
		ctx->PC += off;
   13810:	e1c401bc 	strh	r0, [r4, #28]
}
   13814:	e8bd8010 	pop	{r4, pc}

00013818 <RET_M>:
	ctx->tstates += 1;
   13818:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	if (condition(ctx, C_M))
   1381c:	e1d010d0 	ldrsb	r1, [r0]
	ctx->tstates += 1;
   13820:	e2832001 	add	r2, r3, #1
	if (condition(ctx, C_M))
   13824:	e3510000 	cmp	r1, #0
	ctx->tstates += 1;
   13828:	e5802040 	str	r2, [r0, #64]	; 0x40
	if (condition(ctx, C_M))
   1382c:	a12fff1e 	bxge	lr
{
   13830:	e92d4070 	push	{r4, r5, r6, lr}
   13834:	e1a04000 	mov	r4, r0
	ctx->tstates += 3;
   13838:	e2833004 	add	r3, r3, #4
	val = read8(ctx, WR.SP);
   1383c:	e1d010bc 	ldrh	r1, [r0, #12]
	ctx->tstates += 3;
   13840:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   13844:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   13848:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   1384c:	e12fff33 	blx	r3
	WR.SP++;
   13850:	e1d410bc 	ldrh	r1, [r4, #12]
	ctx->tstates += 3;
   13854:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	WR.SP++;
   13858:	e2811001 	add	r1, r1, #1
   1385c:	e6ff1071 	uxth	r1, r1
	ctx->tstates += 3;
   13860:	e2833003 	add	r3, r3, #3
	return ctx->memRead(ctx->memParam, addr);	
   13864:	e1a05000 	mov	r5, r0
	ctx->tstates += 3;
   13868:	e5843040 	str	r3, [r4, #64]	; 0x40
	WR.SP++;
   1386c:	e1c410bc 	strh	r1, [r4, #12]
	return ctx->memRead(ctx->memParam, addr);	
   13870:	e5943024 	ldr	r3, [r4, #36]	; 0x24
   13874:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   13878:	e12fff33 	blx	r3
	WR.SP++;
   1387c:	e1d430bc 	ldrh	r3, [r4, #12]
	val = val | (read8(ctx, WR.SP) << 8);
   13880:	e1850400 	orr	r0, r5, r0, lsl #8
	WR.SP++;
   13884:	e2833001 	add	r3, r3, #1
		ctx->PC = doPop(ctx);
   13888:	e1c401bc 	strh	r0, [r4, #28]
   1388c:	e1c430bc 	strh	r3, [r4, #12]
}
   13890:	e8bd8070 	pop	{r4, r5, r6, pc}

00013894 <LD_L_L>:
   13894:	e12fff1e 	bx	lr

00013898 <doRR.constprop.29>:
static byte doRR (Z80Context* ctx, int adjFlags, byte val)
   13898:	e5d03000 	ldrb	r3, [r0]
   1389c:	e92d4010 	push	{r4, lr}
	if (val)
   138a0:	e3110001 	tst	r1, #1
	return (BR.F & flag) != 0;
   138a4:	e2034001 	and	r4, r3, #1
    val >>= 1;
   138a8:	e1a010a1 	lsr	r1, r1, #1
    val |= (CY << 7);
   138ac:	e1814384 	orr	r4, r1, r4, lsl #7
	BR.F |= flag;
   138b0:	13833001 	orrne	r3, r3, #1
	BR.F &= ~flag;
   138b4:	020330fe 	andeq	r3, r3, #254	; 0xfe
	if (val)
   138b8:	e3140020 	tst	r4, #32
	BR.F |= flag;
   138bc:	13833020 	orrne	r3, r3, #32
	BR.F &= ~flag;
   138c0:	020330df 	andeq	r3, r3, #223	; 0xdf
	if (val)
   138c4:	e3140008 	tst	r4, #8
	BR.F |= flag;
   138c8:	13833008 	orrne	r3, r3, #8
	BR.F &= ~flag;
   138cc:	020330f7 	andeq	r3, r3, #247	; 0xf7
   138d0:	e3c33012 	bic	r3, r3, #18
   138d4:	e5c03000 	strb	r3, [r0]
        adjustFlagSZP(ctx, val);
   138d8:	e1a01004 	mov	r1, r4
   138dc:	ebffd287 	bl	8300 <adjustFlagSZP>
}
   138e0:	e1a00004 	mov	r0, r4
   138e4:	e8bd8010 	pop	{r4, pc}

000138e8 <LD_A_RR_off_IX_d>:
	char off = read8(ctx, ctx->PC++);
   138e8:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
   138ec:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	char off = read8(ctx, ctx->PC++);
   138f0:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
   138f4:	e2833005 	add	r3, r3, #5
{
   138f8:	e92d4070 	push	{r4, r5, r6, lr}
   138fc:	e1a04000 	mov	r4, r0
	char off = read8(ctx, ctx->PC++);
   13900:	e1c021bc 	strh	r2, [r0, #28]
   13904:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   13908:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   1390c:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   13910:	e12fff33 	blx	r3
	ctx->tstates += 3;
   13914:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	BR.A = doRR(ctx, 1, read8(ctx, WR.IX + off));
   13918:	e1d410b8 	ldrh	r1, [r4, #8]
   1391c:	e6ff5070 	uxth	r5, r0
   13920:	e2833003 	add	r3, r3, #3
   13924:	e0851001 	add	r1, r5, r1
   13928:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   1392c:	e6ff1071 	uxth	r1, r1
   13930:	e5943024 	ldr	r3, [r4, #36]	; 0x24
   13934:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   13938:	e12fff33 	blx	r3
   1393c:	e1a01000 	mov	r1, r0
   13940:	e1a00004 	mov	r0, r4
   13944:	ebffffd3 	bl	13898 <doRR.constprop.29>
	ctx->tstates += 3;
   13948:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	write8(ctx, WR.IX + off, BR.A);
   1394c:	e1d410b8 	ldrh	r1, [r4, #8]
   13950:	e2833003 	add	r3, r3, #3
   13954:	e0851001 	add	r1, r5, r1
	BR.A = doRR(ctx, 1, read8(ctx, WR.IX + off));
   13958:	e5c40001 	strb	r0, [r4, #1]
   1395c:	e5843040 	str	r3, [r4, #64]	; 0x40
   13960:	e1a02000 	mov	r2, r0
	ctx->memWrite(ctx->memParam, addr, val);	
   13964:	e5943028 	ldr	r3, [r4, #40]	; 0x28
   13968:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   1396c:	e6ff1071 	uxth	r1, r1
}
   13970:	e8bd4070 	pop	{r4, r5, r6, lr}
   13974:	e12fff13 	bx	r3

00013978 <LD_A_RR_off_IY_d>:
	char off = read8(ctx, ctx->PC++);
   13978:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
   1397c:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	char off = read8(ctx, ctx->PC++);
   13980:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
   13984:	e2833005 	add	r3, r3, #5
{
   13988:	e92d4070 	push	{r4, r5, r6, lr}
   1398c:	e1a04000 	mov	r4, r0
	char off = read8(ctx, ctx->PC++);
   13990:	e1c021bc 	strh	r2, [r0, #28]
   13994:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   13998:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   1399c:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   139a0:	e12fff33 	blx	r3
	ctx->tstates += 3;
   139a4:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	BR.A = doRR(ctx, 1, read8(ctx, WR.IY + off));
   139a8:	e1d410ba 	ldrh	r1, [r4, #10]
   139ac:	e6ff5070 	uxth	r5, r0
   139b0:	e2833003 	add	r3, r3, #3
   139b4:	e0851001 	add	r1, r5, r1
   139b8:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   139bc:	e6ff1071 	uxth	r1, r1
   139c0:	e5943024 	ldr	r3, [r4, #36]	; 0x24
   139c4:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   139c8:	e12fff33 	blx	r3
   139cc:	e1a01000 	mov	r1, r0
   139d0:	e1a00004 	mov	r0, r4
   139d4:	ebffffaf 	bl	13898 <doRR.constprop.29>
	ctx->tstates += 3;
   139d8:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	write8(ctx, WR.IY + off, BR.A);
   139dc:	e1d410ba 	ldrh	r1, [r4, #10]
   139e0:	e2833003 	add	r3, r3, #3
   139e4:	e0851001 	add	r1, r5, r1
	BR.A = doRR(ctx, 1, read8(ctx, WR.IY + off));
   139e8:	e5c40001 	strb	r0, [r4, #1]
   139ec:	e5843040 	str	r3, [r4, #64]	; 0x40
   139f0:	e1a02000 	mov	r2, r0
	ctx->memWrite(ctx->memParam, addr, val);	
   139f4:	e5943028 	ldr	r3, [r4, #40]	; 0x28
   139f8:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   139fc:	e6ff1071 	uxth	r1, r1
}
   13a00:	e8bd4070 	pop	{r4, r5, r6, lr}
   13a04:	e12fff13 	bx	r3

00013a08 <LD_B_RR_off_IX_d>:
	char off = read8(ctx, ctx->PC++);
   13a08:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
   13a0c:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	char off = read8(ctx, ctx->PC++);
   13a10:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
   13a14:	e2833005 	add	r3, r3, #5
{
   13a18:	e92d4070 	push	{r4, r5, r6, lr}
   13a1c:	e1a04000 	mov	r4, r0
	char off = read8(ctx, ctx->PC++);
   13a20:	e1c021bc 	strh	r2, [r0, #28]
   13a24:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   13a28:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   13a2c:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   13a30:	e12fff33 	blx	r3
	ctx->tstates += 3;
   13a34:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	BR.B = doRR(ctx, 1, read8(ctx, WR.IX + off));
   13a38:	e1d410b8 	ldrh	r1, [r4, #8]
   13a3c:	e6ff5070 	uxth	r5, r0
   13a40:	e2833003 	add	r3, r3, #3
   13a44:	e0851001 	add	r1, r5, r1
   13a48:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   13a4c:	e6ff1071 	uxth	r1, r1
   13a50:	e5943024 	ldr	r3, [r4, #36]	; 0x24
   13a54:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   13a58:	e12fff33 	blx	r3
   13a5c:	e1a01000 	mov	r1, r0
   13a60:	e1a00004 	mov	r0, r4
   13a64:	ebffff8b 	bl	13898 <doRR.constprop.29>
	ctx->tstates += 3;
   13a68:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	write8(ctx, WR.IX + off, BR.B);
   13a6c:	e1d410b8 	ldrh	r1, [r4, #8]
   13a70:	e2833003 	add	r3, r3, #3
   13a74:	e0851001 	add	r1, r5, r1
	BR.B = doRR(ctx, 1, read8(ctx, WR.IX + off));
   13a78:	e5c40003 	strb	r0, [r4, #3]
   13a7c:	e5843040 	str	r3, [r4, #64]	; 0x40
   13a80:	e1a02000 	mov	r2, r0
	ctx->memWrite(ctx->memParam, addr, val);	
   13a84:	e5943028 	ldr	r3, [r4, #40]	; 0x28
   13a88:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   13a8c:	e6ff1071 	uxth	r1, r1
}
   13a90:	e8bd4070 	pop	{r4, r5, r6, lr}
   13a94:	e12fff13 	bx	r3

00013a98 <LD_B_RR_off_IY_d>:
	char off = read8(ctx, ctx->PC++);
   13a98:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
   13a9c:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	char off = read8(ctx, ctx->PC++);
   13aa0:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
   13aa4:	e2833005 	add	r3, r3, #5
{
   13aa8:	e92d4070 	push	{r4, r5, r6, lr}
   13aac:	e1a04000 	mov	r4, r0
	char off = read8(ctx, ctx->PC++);
   13ab0:	e1c021bc 	strh	r2, [r0, #28]
   13ab4:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   13ab8:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   13abc:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   13ac0:	e12fff33 	blx	r3
	ctx->tstates += 3;
   13ac4:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	BR.B = doRR(ctx, 1, read8(ctx, WR.IY + off));
   13ac8:	e1d410ba 	ldrh	r1, [r4, #10]
   13acc:	e6ff5070 	uxth	r5, r0
   13ad0:	e2833003 	add	r3, r3, #3
   13ad4:	e0851001 	add	r1, r5, r1
   13ad8:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   13adc:	e6ff1071 	uxth	r1, r1
   13ae0:	e5943024 	ldr	r3, [r4, #36]	; 0x24
   13ae4:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   13ae8:	e12fff33 	blx	r3
   13aec:	e1a01000 	mov	r1, r0
   13af0:	e1a00004 	mov	r0, r4
   13af4:	ebffff67 	bl	13898 <doRR.constprop.29>
	ctx->tstates += 3;
   13af8:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	write8(ctx, WR.IY + off, BR.B);
   13afc:	e1d410ba 	ldrh	r1, [r4, #10]
   13b00:	e2833003 	add	r3, r3, #3
   13b04:	e0851001 	add	r1, r5, r1
	BR.B = doRR(ctx, 1, read8(ctx, WR.IY + off));
   13b08:	e5c40003 	strb	r0, [r4, #3]
   13b0c:	e5843040 	str	r3, [r4, #64]	; 0x40
   13b10:	e1a02000 	mov	r2, r0
	ctx->memWrite(ctx->memParam, addr, val);	
   13b14:	e5943028 	ldr	r3, [r4, #40]	; 0x28
   13b18:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   13b1c:	e6ff1071 	uxth	r1, r1
}
   13b20:	e8bd4070 	pop	{r4, r5, r6, lr}
   13b24:	e12fff13 	bx	r3

00013b28 <LD_C_RR_off_IX_d>:
	char off = read8(ctx, ctx->PC++);
   13b28:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
   13b2c:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	char off = read8(ctx, ctx->PC++);
   13b30:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
   13b34:	e2833005 	add	r3, r3, #5
{
   13b38:	e92d4070 	push	{r4, r5, r6, lr}
   13b3c:	e1a04000 	mov	r4, r0
	char off = read8(ctx, ctx->PC++);
   13b40:	e1c021bc 	strh	r2, [r0, #28]
   13b44:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   13b48:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   13b4c:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   13b50:	e12fff33 	blx	r3
	ctx->tstates += 3;
   13b54:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	BR.C = doRR(ctx, 1, read8(ctx, WR.IX + off));
   13b58:	e1d410b8 	ldrh	r1, [r4, #8]
   13b5c:	e6ff5070 	uxth	r5, r0
   13b60:	e2833003 	add	r3, r3, #3
   13b64:	e0851001 	add	r1, r5, r1
   13b68:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   13b6c:	e6ff1071 	uxth	r1, r1
   13b70:	e5943024 	ldr	r3, [r4, #36]	; 0x24
   13b74:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   13b78:	e12fff33 	blx	r3
   13b7c:	e1a01000 	mov	r1, r0
   13b80:	e1a00004 	mov	r0, r4
   13b84:	ebffff43 	bl	13898 <doRR.constprop.29>
	ctx->tstates += 3;
   13b88:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	write8(ctx, WR.IX + off, BR.C);
   13b8c:	e1d410b8 	ldrh	r1, [r4, #8]
   13b90:	e2833003 	add	r3, r3, #3
   13b94:	e0851001 	add	r1, r5, r1
	BR.C = doRR(ctx, 1, read8(ctx, WR.IX + off));
   13b98:	e5c40002 	strb	r0, [r4, #2]
   13b9c:	e5843040 	str	r3, [r4, #64]	; 0x40
   13ba0:	e1a02000 	mov	r2, r0
	ctx->memWrite(ctx->memParam, addr, val);	
   13ba4:	e5943028 	ldr	r3, [r4, #40]	; 0x28
   13ba8:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   13bac:	e6ff1071 	uxth	r1, r1
}
   13bb0:	e8bd4070 	pop	{r4, r5, r6, lr}
   13bb4:	e12fff13 	bx	r3

00013bb8 <LD_C_RR_off_IY_d>:
	char off = read8(ctx, ctx->PC++);
   13bb8:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
   13bbc:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	char off = read8(ctx, ctx->PC++);
   13bc0:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
   13bc4:	e2833005 	add	r3, r3, #5
{
   13bc8:	e92d4070 	push	{r4, r5, r6, lr}
   13bcc:	e1a04000 	mov	r4, r0
	char off = read8(ctx, ctx->PC++);
   13bd0:	e1c021bc 	strh	r2, [r0, #28]
   13bd4:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   13bd8:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   13bdc:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   13be0:	e12fff33 	blx	r3
	ctx->tstates += 3;
   13be4:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	BR.C = doRR(ctx, 1, read8(ctx, WR.IY + off));
   13be8:	e1d410ba 	ldrh	r1, [r4, #10]
   13bec:	e6ff5070 	uxth	r5, r0
   13bf0:	e2833003 	add	r3, r3, #3
   13bf4:	e0851001 	add	r1, r5, r1
   13bf8:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   13bfc:	e6ff1071 	uxth	r1, r1
   13c00:	e5943024 	ldr	r3, [r4, #36]	; 0x24
   13c04:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   13c08:	e12fff33 	blx	r3
   13c0c:	e1a01000 	mov	r1, r0
   13c10:	e1a00004 	mov	r0, r4
   13c14:	ebffff1f 	bl	13898 <doRR.constprop.29>
	ctx->tstates += 3;
   13c18:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	write8(ctx, WR.IY + off, BR.C);
   13c1c:	e1d410ba 	ldrh	r1, [r4, #10]
   13c20:	e2833003 	add	r3, r3, #3
   13c24:	e0851001 	add	r1, r5, r1
	BR.C = doRR(ctx, 1, read8(ctx, WR.IY + off));
   13c28:	e5c40002 	strb	r0, [r4, #2]
   13c2c:	e5843040 	str	r3, [r4, #64]	; 0x40
   13c30:	e1a02000 	mov	r2, r0
	ctx->memWrite(ctx->memParam, addr, val);	
   13c34:	e5943028 	ldr	r3, [r4, #40]	; 0x28
   13c38:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   13c3c:	e6ff1071 	uxth	r1, r1
}
   13c40:	e8bd4070 	pop	{r4, r5, r6, lr}
   13c44:	e12fff13 	bx	r3

00013c48 <LD_D_RR_off_IX_d>:
	char off = read8(ctx, ctx->PC++);
   13c48:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
   13c4c:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	char off = read8(ctx, ctx->PC++);
   13c50:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
   13c54:	e2833005 	add	r3, r3, #5
{
   13c58:	e92d4070 	push	{r4, r5, r6, lr}
   13c5c:	e1a04000 	mov	r4, r0
	char off = read8(ctx, ctx->PC++);
   13c60:	e1c021bc 	strh	r2, [r0, #28]
   13c64:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   13c68:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   13c6c:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   13c70:	e12fff33 	blx	r3
	ctx->tstates += 3;
   13c74:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	BR.D = doRR(ctx, 1, read8(ctx, WR.IX + off));
   13c78:	e1d410b8 	ldrh	r1, [r4, #8]
   13c7c:	e6ff5070 	uxth	r5, r0
   13c80:	e2833003 	add	r3, r3, #3
   13c84:	e0851001 	add	r1, r5, r1
   13c88:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   13c8c:	e6ff1071 	uxth	r1, r1
   13c90:	e5943024 	ldr	r3, [r4, #36]	; 0x24
   13c94:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   13c98:	e12fff33 	blx	r3
   13c9c:	e1a01000 	mov	r1, r0
   13ca0:	e1a00004 	mov	r0, r4
   13ca4:	ebfffefb 	bl	13898 <doRR.constprop.29>
	ctx->tstates += 3;
   13ca8:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	write8(ctx, WR.IX + off, BR.D);
   13cac:	e1d410b8 	ldrh	r1, [r4, #8]
   13cb0:	e2833003 	add	r3, r3, #3
   13cb4:	e0851001 	add	r1, r5, r1
	BR.D = doRR(ctx, 1, read8(ctx, WR.IX + off));
   13cb8:	e5c40005 	strb	r0, [r4, #5]
   13cbc:	e5843040 	str	r3, [r4, #64]	; 0x40
   13cc0:	e1a02000 	mov	r2, r0
	ctx->memWrite(ctx->memParam, addr, val);	
   13cc4:	e5943028 	ldr	r3, [r4, #40]	; 0x28
   13cc8:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   13ccc:	e6ff1071 	uxth	r1, r1
}
   13cd0:	e8bd4070 	pop	{r4, r5, r6, lr}
   13cd4:	e12fff13 	bx	r3

00013cd8 <LD_D_RR_off_IY_d>:
	char off = read8(ctx, ctx->PC++);
   13cd8:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
   13cdc:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	char off = read8(ctx, ctx->PC++);
   13ce0:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
   13ce4:	e2833005 	add	r3, r3, #5
{
   13ce8:	e92d4070 	push	{r4, r5, r6, lr}
   13cec:	e1a04000 	mov	r4, r0
	char off = read8(ctx, ctx->PC++);
   13cf0:	e1c021bc 	strh	r2, [r0, #28]
   13cf4:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   13cf8:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   13cfc:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   13d00:	e12fff33 	blx	r3
	ctx->tstates += 3;
   13d04:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	BR.D = doRR(ctx, 1, read8(ctx, WR.IY + off));
   13d08:	e1d410ba 	ldrh	r1, [r4, #10]
   13d0c:	e6ff5070 	uxth	r5, r0
   13d10:	e2833003 	add	r3, r3, #3
   13d14:	e0851001 	add	r1, r5, r1
   13d18:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   13d1c:	e6ff1071 	uxth	r1, r1
   13d20:	e5943024 	ldr	r3, [r4, #36]	; 0x24
   13d24:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   13d28:	e12fff33 	blx	r3
   13d2c:	e1a01000 	mov	r1, r0
   13d30:	e1a00004 	mov	r0, r4
   13d34:	ebfffed7 	bl	13898 <doRR.constprop.29>
	ctx->tstates += 3;
   13d38:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	write8(ctx, WR.IY + off, BR.D);
   13d3c:	e1d410ba 	ldrh	r1, [r4, #10]
   13d40:	e2833003 	add	r3, r3, #3
   13d44:	e0851001 	add	r1, r5, r1
	BR.D = doRR(ctx, 1, read8(ctx, WR.IY + off));
   13d48:	e5c40005 	strb	r0, [r4, #5]
   13d4c:	e5843040 	str	r3, [r4, #64]	; 0x40
   13d50:	e1a02000 	mov	r2, r0
	ctx->memWrite(ctx->memParam, addr, val);	
   13d54:	e5943028 	ldr	r3, [r4, #40]	; 0x28
   13d58:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   13d5c:	e6ff1071 	uxth	r1, r1
}
   13d60:	e8bd4070 	pop	{r4, r5, r6, lr}
   13d64:	e12fff13 	bx	r3

00013d68 <LD_E_RR_off_IX_d>:
	char off = read8(ctx, ctx->PC++);
   13d68:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
   13d6c:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	char off = read8(ctx, ctx->PC++);
   13d70:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
   13d74:	e2833005 	add	r3, r3, #5
{
   13d78:	e92d4070 	push	{r4, r5, r6, lr}
   13d7c:	e1a04000 	mov	r4, r0
	char off = read8(ctx, ctx->PC++);
   13d80:	e1c021bc 	strh	r2, [r0, #28]
   13d84:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   13d88:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   13d8c:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   13d90:	e12fff33 	blx	r3
	ctx->tstates += 3;
   13d94:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	BR.E = doRR(ctx, 1, read8(ctx, WR.IX + off));
   13d98:	e1d410b8 	ldrh	r1, [r4, #8]
   13d9c:	e6ff5070 	uxth	r5, r0
   13da0:	e2833003 	add	r3, r3, #3
   13da4:	e0851001 	add	r1, r5, r1
   13da8:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   13dac:	e6ff1071 	uxth	r1, r1
   13db0:	e5943024 	ldr	r3, [r4, #36]	; 0x24
   13db4:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   13db8:	e12fff33 	blx	r3
   13dbc:	e1a01000 	mov	r1, r0
   13dc0:	e1a00004 	mov	r0, r4
   13dc4:	ebfffeb3 	bl	13898 <doRR.constprop.29>
	ctx->tstates += 3;
   13dc8:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	write8(ctx, WR.IX + off, BR.E);
   13dcc:	e1d410b8 	ldrh	r1, [r4, #8]
   13dd0:	e2833003 	add	r3, r3, #3
   13dd4:	e0851001 	add	r1, r5, r1
	BR.E = doRR(ctx, 1, read8(ctx, WR.IX + off));
   13dd8:	e5c40004 	strb	r0, [r4, #4]
   13ddc:	e5843040 	str	r3, [r4, #64]	; 0x40
   13de0:	e1a02000 	mov	r2, r0
	ctx->memWrite(ctx->memParam, addr, val);	
   13de4:	e5943028 	ldr	r3, [r4, #40]	; 0x28
   13de8:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   13dec:	e6ff1071 	uxth	r1, r1
}
   13df0:	e8bd4070 	pop	{r4, r5, r6, lr}
   13df4:	e12fff13 	bx	r3

00013df8 <LD_E_RR_off_IY_d>:
	char off = read8(ctx, ctx->PC++);
   13df8:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
   13dfc:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	char off = read8(ctx, ctx->PC++);
   13e00:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
   13e04:	e2833005 	add	r3, r3, #5
{
   13e08:	e92d4070 	push	{r4, r5, r6, lr}
   13e0c:	e1a04000 	mov	r4, r0
	char off = read8(ctx, ctx->PC++);
   13e10:	e1c021bc 	strh	r2, [r0, #28]
   13e14:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   13e18:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   13e1c:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   13e20:	e12fff33 	blx	r3
	ctx->tstates += 3;
   13e24:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	BR.E = doRR(ctx, 1, read8(ctx, WR.IY + off));
   13e28:	e1d410ba 	ldrh	r1, [r4, #10]
   13e2c:	e6ff5070 	uxth	r5, r0
   13e30:	e2833003 	add	r3, r3, #3
   13e34:	e0851001 	add	r1, r5, r1
   13e38:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   13e3c:	e6ff1071 	uxth	r1, r1
   13e40:	e5943024 	ldr	r3, [r4, #36]	; 0x24
   13e44:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   13e48:	e12fff33 	blx	r3
   13e4c:	e1a01000 	mov	r1, r0
   13e50:	e1a00004 	mov	r0, r4
   13e54:	ebfffe8f 	bl	13898 <doRR.constprop.29>
	ctx->tstates += 3;
   13e58:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	write8(ctx, WR.IY + off, BR.E);
   13e5c:	e1d410ba 	ldrh	r1, [r4, #10]
   13e60:	e2833003 	add	r3, r3, #3
   13e64:	e0851001 	add	r1, r5, r1
	BR.E = doRR(ctx, 1, read8(ctx, WR.IY + off));
   13e68:	e5c40004 	strb	r0, [r4, #4]
   13e6c:	e5843040 	str	r3, [r4, #64]	; 0x40
   13e70:	e1a02000 	mov	r2, r0
	ctx->memWrite(ctx->memParam, addr, val);	
   13e74:	e5943028 	ldr	r3, [r4, #40]	; 0x28
   13e78:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   13e7c:	e6ff1071 	uxth	r1, r1
}
   13e80:	e8bd4070 	pop	{r4, r5, r6, lr}
   13e84:	e12fff13 	bx	r3

00013e88 <LD_H_RR_off_IX_d>:
	char off = read8(ctx, ctx->PC++);
   13e88:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
   13e8c:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	char off = read8(ctx, ctx->PC++);
   13e90:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
   13e94:	e2833005 	add	r3, r3, #5
{
   13e98:	e92d4070 	push	{r4, r5, r6, lr}
   13e9c:	e1a04000 	mov	r4, r0
	char off = read8(ctx, ctx->PC++);
   13ea0:	e1c021bc 	strh	r2, [r0, #28]
   13ea4:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   13ea8:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   13eac:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   13eb0:	e12fff33 	blx	r3
	ctx->tstates += 3;
   13eb4:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	BR.H = doRR(ctx, 1, read8(ctx, WR.IX + off));
   13eb8:	e1d410b8 	ldrh	r1, [r4, #8]
   13ebc:	e6ff5070 	uxth	r5, r0
   13ec0:	e2833003 	add	r3, r3, #3
   13ec4:	e0851001 	add	r1, r5, r1
   13ec8:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   13ecc:	e6ff1071 	uxth	r1, r1
   13ed0:	e5943024 	ldr	r3, [r4, #36]	; 0x24
   13ed4:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   13ed8:	e12fff33 	blx	r3
   13edc:	e1a01000 	mov	r1, r0
   13ee0:	e1a00004 	mov	r0, r4
   13ee4:	ebfffe6b 	bl	13898 <doRR.constprop.29>
	ctx->tstates += 3;
   13ee8:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	write8(ctx, WR.IX + off, BR.H);
   13eec:	e1d410b8 	ldrh	r1, [r4, #8]
   13ef0:	e2833003 	add	r3, r3, #3
   13ef4:	e0851001 	add	r1, r5, r1
	BR.H = doRR(ctx, 1, read8(ctx, WR.IX + off));
   13ef8:	e5c40007 	strb	r0, [r4, #7]
   13efc:	e5843040 	str	r3, [r4, #64]	; 0x40
   13f00:	e1a02000 	mov	r2, r0
	ctx->memWrite(ctx->memParam, addr, val);	
   13f04:	e5943028 	ldr	r3, [r4, #40]	; 0x28
   13f08:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   13f0c:	e6ff1071 	uxth	r1, r1
}
   13f10:	e8bd4070 	pop	{r4, r5, r6, lr}
   13f14:	e12fff13 	bx	r3

00013f18 <LD_H_RR_off_IY_d>:
	char off = read8(ctx, ctx->PC++);
   13f18:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
   13f1c:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	char off = read8(ctx, ctx->PC++);
   13f20:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
   13f24:	e2833005 	add	r3, r3, #5
{
   13f28:	e92d4070 	push	{r4, r5, r6, lr}
   13f2c:	e1a04000 	mov	r4, r0
	char off = read8(ctx, ctx->PC++);
   13f30:	e1c021bc 	strh	r2, [r0, #28]
   13f34:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   13f38:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   13f3c:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   13f40:	e12fff33 	blx	r3
	ctx->tstates += 3;
   13f44:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	BR.H = doRR(ctx, 1, read8(ctx, WR.IY + off));
   13f48:	e1d410ba 	ldrh	r1, [r4, #10]
   13f4c:	e6ff5070 	uxth	r5, r0
   13f50:	e2833003 	add	r3, r3, #3
   13f54:	e0851001 	add	r1, r5, r1
   13f58:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   13f5c:	e6ff1071 	uxth	r1, r1
   13f60:	e5943024 	ldr	r3, [r4, #36]	; 0x24
   13f64:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   13f68:	e12fff33 	blx	r3
   13f6c:	e1a01000 	mov	r1, r0
   13f70:	e1a00004 	mov	r0, r4
   13f74:	ebfffe47 	bl	13898 <doRR.constprop.29>
	ctx->tstates += 3;
   13f78:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	write8(ctx, WR.IY + off, BR.H);
   13f7c:	e1d410ba 	ldrh	r1, [r4, #10]
   13f80:	e2833003 	add	r3, r3, #3
   13f84:	e0851001 	add	r1, r5, r1
	BR.H = doRR(ctx, 1, read8(ctx, WR.IY + off));
   13f88:	e5c40007 	strb	r0, [r4, #7]
   13f8c:	e5843040 	str	r3, [r4, #64]	; 0x40
   13f90:	e1a02000 	mov	r2, r0
	ctx->memWrite(ctx->memParam, addr, val);	
   13f94:	e5943028 	ldr	r3, [r4, #40]	; 0x28
   13f98:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   13f9c:	e6ff1071 	uxth	r1, r1
}
   13fa0:	e8bd4070 	pop	{r4, r5, r6, lr}
   13fa4:	e12fff13 	bx	r3

00013fa8 <LD_L_RR_off_IX_d>:
	char off = read8(ctx, ctx->PC++);
   13fa8:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
   13fac:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	char off = read8(ctx, ctx->PC++);
   13fb0:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
   13fb4:	e2833005 	add	r3, r3, #5
{
   13fb8:	e92d4070 	push	{r4, r5, r6, lr}
   13fbc:	e1a04000 	mov	r4, r0
	char off = read8(ctx, ctx->PC++);
   13fc0:	e1c021bc 	strh	r2, [r0, #28]
   13fc4:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   13fc8:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   13fcc:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   13fd0:	e12fff33 	blx	r3
	ctx->tstates += 3;
   13fd4:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	BR.L = doRR(ctx, 1, read8(ctx, WR.IX + off));
   13fd8:	e1d410b8 	ldrh	r1, [r4, #8]
   13fdc:	e6ff5070 	uxth	r5, r0
   13fe0:	e2833003 	add	r3, r3, #3
   13fe4:	e0851001 	add	r1, r5, r1
   13fe8:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   13fec:	e6ff1071 	uxth	r1, r1
   13ff0:	e5943024 	ldr	r3, [r4, #36]	; 0x24
   13ff4:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   13ff8:	e12fff33 	blx	r3
   13ffc:	e1a01000 	mov	r1, r0
   14000:	e1a00004 	mov	r0, r4
   14004:	ebfffe23 	bl	13898 <doRR.constprop.29>
	ctx->tstates += 3;
   14008:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	write8(ctx, WR.IX + off, BR.L);
   1400c:	e1d410b8 	ldrh	r1, [r4, #8]
   14010:	e2833003 	add	r3, r3, #3
   14014:	e0851001 	add	r1, r5, r1
	BR.L = doRR(ctx, 1, read8(ctx, WR.IX + off));
   14018:	e5c40006 	strb	r0, [r4, #6]
   1401c:	e5843040 	str	r3, [r4, #64]	; 0x40
   14020:	e1a02000 	mov	r2, r0
	ctx->memWrite(ctx->memParam, addr, val);	
   14024:	e5943028 	ldr	r3, [r4, #40]	; 0x28
   14028:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   1402c:	e6ff1071 	uxth	r1, r1
}
   14030:	e8bd4070 	pop	{r4, r5, r6, lr}
   14034:	e12fff13 	bx	r3

00014038 <LD_L_RR_off_IY_d>:
	char off = read8(ctx, ctx->PC++);
   14038:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
   1403c:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	char off = read8(ctx, ctx->PC++);
   14040:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
   14044:	e2833005 	add	r3, r3, #5
{
   14048:	e92d4070 	push	{r4, r5, r6, lr}
   1404c:	e1a04000 	mov	r4, r0
	char off = read8(ctx, ctx->PC++);
   14050:	e1c021bc 	strh	r2, [r0, #28]
   14054:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   14058:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   1405c:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   14060:	e12fff33 	blx	r3
	ctx->tstates += 3;
   14064:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	BR.L = doRR(ctx, 1, read8(ctx, WR.IY + off));
   14068:	e1d410ba 	ldrh	r1, [r4, #10]
   1406c:	e6ff5070 	uxth	r5, r0
   14070:	e2833003 	add	r3, r3, #3
   14074:	e0851001 	add	r1, r5, r1
   14078:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   1407c:	e6ff1071 	uxth	r1, r1
   14080:	e5943024 	ldr	r3, [r4, #36]	; 0x24
   14084:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   14088:	e12fff33 	blx	r3
   1408c:	e1a01000 	mov	r1, r0
   14090:	e1a00004 	mov	r0, r4
   14094:	ebfffdff 	bl	13898 <doRR.constprop.29>
	ctx->tstates += 3;
   14098:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	write8(ctx, WR.IY + off, BR.L);
   1409c:	e1d410ba 	ldrh	r1, [r4, #10]
   140a0:	e2833003 	add	r3, r3, #3
   140a4:	e0851001 	add	r1, r5, r1
	BR.L = doRR(ctx, 1, read8(ctx, WR.IY + off));
   140a8:	e5c40006 	strb	r0, [r4, #6]
   140ac:	e5843040 	str	r3, [r4, #64]	; 0x40
   140b0:	e1a02000 	mov	r2, r0
	ctx->memWrite(ctx->memParam, addr, val);	
   140b4:	e5943028 	ldr	r3, [r4, #40]	; 0x28
   140b8:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   140bc:	e6ff1071 	uxth	r1, r1
}
   140c0:	e8bd4070 	pop	{r4, r5, r6, lr}
   140c4:	e12fff13 	bx	r3

000140c8 <RR_off_HL>:
	ctx->tstates += 3;
   140c8:	e5903040 	ldr	r3, [r0, #64]	; 0x40
{
   140cc:	e92d4070 	push	{r4, r5, r6, lr}
	write8(ctx, WR.HL, doRR(ctx, 1, read8(ctx, WR.HL)));
   140d0:	e1d050b6 	ldrh	r5, [r0, #6]
   140d4:	e2833004 	add	r3, r3, #4
{
   140d8:	e1a04000 	mov	r4, r0
   140dc:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   140e0:	e1a01005 	mov	r1, r5
   140e4:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   140e8:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   140ec:	e12fff33 	blx	r3
	write8(ctx, WR.HL, doRR(ctx, 1, read8(ctx, WR.HL)));
   140f0:	e1a01000 	mov	r1, r0
   140f4:	e1a00004 	mov	r0, r4
   140f8:	ebfffde6 	bl	13898 <doRR.constprop.29>
	ctx->tstates += 3;
   140fc:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	ctx->memWrite(ctx->memParam, addr, val);	
   14100:	e1a02000 	mov	r2, r0
	ctx->tstates += 3;
   14104:	e2833003 	add	r3, r3, #3
   14108:	e5843040 	str	r3, [r4, #64]	; 0x40
	ctx->memWrite(ctx->memParam, addr, val);	
   1410c:	e1a01005 	mov	r1, r5
   14110:	e5943028 	ldr	r3, [r4, #40]	; 0x28
   14114:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
}
   14118:	e8bd4070 	pop	{r4, r5, r6, lr}
   1411c:	e12fff13 	bx	r3

00014120 <RR_off_IX_d>:
	char off = read8(ctx, ctx->PC++);
   14120:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
   14124:	e5903040 	ldr	r3, [r0, #64]	; 0x40
{
   14128:	e92d4070 	push	{r4, r5, r6, lr}
	char off = read8(ctx, ctx->PC++);
   1412c:	e2812001 	add	r2, r1, #1
{
   14130:	e1a04000 	mov	r4, r0
	ctx->tstates += 3;
   14134:	e2833005 	add	r3, r3, #5
	char off = read8(ctx, ctx->PC++);
   14138:	e1c021bc 	strh	r2, [r0, #28]
   1413c:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   14140:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   14144:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   14148:	e12fff33 	blx	r3
	write8(ctx, WR.IX + off, doRR(ctx, 1, read8(ctx, WR.IX + off)));
   1414c:	e1d450b8 	ldrh	r5, [r4, #8]
	ctx->tstates += 3;
   14150:	e5943040 	ldr	r3, [r4, #64]	; 0x40
   14154:	e0855000 	add	r5, r5, r0
   14158:	e6ff5075 	uxth	r5, r5
   1415c:	e2833003 	add	r3, r3, #3
   14160:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   14164:	e1a01005 	mov	r1, r5
   14168:	e5943024 	ldr	r3, [r4, #36]	; 0x24
   1416c:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   14170:	e12fff33 	blx	r3
   14174:	e1a01000 	mov	r1, r0
   14178:	e1a00004 	mov	r0, r4
   1417c:	ebfffdc5 	bl	13898 <doRR.constprop.29>
	ctx->tstates += 3;
   14180:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	ctx->memWrite(ctx->memParam, addr, val);	
   14184:	e1a01005 	mov	r1, r5
	ctx->tstates += 3;
   14188:	e2833003 	add	r3, r3, #3
   1418c:	e5843040 	str	r3, [r4, #64]	; 0x40
	ctx->memWrite(ctx->memParam, addr, val);	
   14190:	e1a02000 	mov	r2, r0
   14194:	e5943028 	ldr	r3, [r4, #40]	; 0x28
   14198:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
}
   1419c:	e8bd4070 	pop	{r4, r5, r6, lr}
   141a0:	e12fff13 	bx	r3

000141a4 <RR_off_IY_d>:
	char off = read8(ctx, ctx->PC++);
   141a4:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
   141a8:	e5903040 	ldr	r3, [r0, #64]	; 0x40
{
   141ac:	e92d4070 	push	{r4, r5, r6, lr}
	char off = read8(ctx, ctx->PC++);
   141b0:	e2812001 	add	r2, r1, #1
{
   141b4:	e1a04000 	mov	r4, r0
	ctx->tstates += 3;
   141b8:	e2833005 	add	r3, r3, #5
	char off = read8(ctx, ctx->PC++);
   141bc:	e1c021bc 	strh	r2, [r0, #28]
   141c0:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   141c4:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   141c8:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   141cc:	e12fff33 	blx	r3
	write8(ctx, WR.IY + off, doRR(ctx, 1, read8(ctx, WR.IY + off)));
   141d0:	e1d450ba 	ldrh	r5, [r4, #10]
	ctx->tstates += 3;
   141d4:	e5943040 	ldr	r3, [r4, #64]	; 0x40
   141d8:	e0855000 	add	r5, r5, r0
   141dc:	e6ff5075 	uxth	r5, r5
   141e0:	e2833003 	add	r3, r3, #3
   141e4:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   141e8:	e1a01005 	mov	r1, r5
   141ec:	e5943024 	ldr	r3, [r4, #36]	; 0x24
   141f0:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   141f4:	e12fff33 	blx	r3
   141f8:	e1a01000 	mov	r1, r0
   141fc:	e1a00004 	mov	r0, r4
   14200:	ebfffda4 	bl	13898 <doRR.constprop.29>
	ctx->tstates += 3;
   14204:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	ctx->memWrite(ctx->memParam, addr, val);	
   14208:	e1a01005 	mov	r1, r5
	ctx->tstates += 3;
   1420c:	e2833003 	add	r3, r3, #3
   14210:	e5843040 	str	r3, [r4, #64]	; 0x40
	ctx->memWrite(ctx->memParam, addr, val);	
   14214:	e1a02000 	mov	r2, r0
   14218:	e5943028 	ldr	r3, [r4, #40]	; 0x28
   1421c:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
}
   14220:	e8bd4070 	pop	{r4, r5, r6, lr}
   14224:	e12fff13 	bx	r3

00014228 <doRRC.constprop.30>:
	if (val)
   14228:	e3110001 	tst	r1, #1
static byte doRRC (Z80Context* ctx, int adjFlags, byte val)
   1422c:	e92d4010 	push	{r4, lr}
	BR.F |= flag;
   14230:	13e0407f 	mvnne	r4, #127	; 0x7f
   14234:	03a04000 	moveq	r4, #0
   14238:	e5d03000 	ldrb	r3, [r0]
    val |= ((byte)GETFLAG(F_C) << 7);
   1423c:	e18440a1 	orr	r4, r4, r1, lsr #1
   14240:	e6ef4074 	uxtb	r4, r4
	BR.F |= flag;
   14244:	13833001 	orrne	r3, r3, #1
	BR.F &= ~flag;
   14248:	020330fe 	andeq	r3, r3, #254	; 0xfe
	if (val)
   1424c:	e3140020 	tst	r4, #32
	BR.F |= flag;
   14250:	13833020 	orrne	r3, r3, #32
	BR.F &= ~flag;
   14254:	020330df 	andeq	r3, r3, #223	; 0xdf
	if (val)
   14258:	e3140008 	tst	r4, #8
	BR.F |= flag;
   1425c:	13833008 	orrne	r3, r3, #8
	BR.F &= ~flag;
   14260:	020330f7 	andeq	r3, r3, #247	; 0xf7
   14264:	e3c33012 	bic	r3, r3, #18
   14268:	e5c03000 	strb	r3, [r0]
        adjustFlagSZP(ctx, val);
   1426c:	e1a01004 	mov	r1, r4
   14270:	ebffd022 	bl	8300 <adjustFlagSZP>
}
   14274:	e1a00004 	mov	r0, r4
   14278:	e8bd8010 	pop	{r4, pc}

0001427c <LD_A_RRC_off_IX_d>:
	char off = read8(ctx, ctx->PC++);
   1427c:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
   14280:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	char off = read8(ctx, ctx->PC++);
   14284:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
   14288:	e2833005 	add	r3, r3, #5
{
   1428c:	e92d4070 	push	{r4, r5, r6, lr}
   14290:	e1a04000 	mov	r4, r0
	char off = read8(ctx, ctx->PC++);
   14294:	e1c021bc 	strh	r2, [r0, #28]
   14298:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   1429c:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   142a0:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   142a4:	e12fff33 	blx	r3
	ctx->tstates += 3;
   142a8:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	BR.A = doRRC(ctx, 1, read8(ctx, WR.IX + off));
   142ac:	e1d410b8 	ldrh	r1, [r4, #8]
   142b0:	e6ff5070 	uxth	r5, r0
   142b4:	e2833003 	add	r3, r3, #3
   142b8:	e0851001 	add	r1, r5, r1
   142bc:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   142c0:	e6ff1071 	uxth	r1, r1
   142c4:	e5943024 	ldr	r3, [r4, #36]	; 0x24
   142c8:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   142cc:	e12fff33 	blx	r3
   142d0:	e1a01000 	mov	r1, r0
   142d4:	e1a00004 	mov	r0, r4
   142d8:	ebffffd2 	bl	14228 <doRRC.constprop.30>
	ctx->tstates += 3;
   142dc:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	write8(ctx, WR.IX + off, BR.A);
   142e0:	e1d410b8 	ldrh	r1, [r4, #8]
   142e4:	e2833003 	add	r3, r3, #3
   142e8:	e0851001 	add	r1, r5, r1
	BR.A = doRRC(ctx, 1, read8(ctx, WR.IX + off));
   142ec:	e5c40001 	strb	r0, [r4, #1]
   142f0:	e5843040 	str	r3, [r4, #64]	; 0x40
   142f4:	e1a02000 	mov	r2, r0
	ctx->memWrite(ctx->memParam, addr, val);	
   142f8:	e5943028 	ldr	r3, [r4, #40]	; 0x28
   142fc:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   14300:	e6ff1071 	uxth	r1, r1
}
   14304:	e8bd4070 	pop	{r4, r5, r6, lr}
   14308:	e12fff13 	bx	r3

0001430c <LD_A_RRC_off_IY_d>:
	char off = read8(ctx, ctx->PC++);
   1430c:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
   14310:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	char off = read8(ctx, ctx->PC++);
   14314:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
   14318:	e2833005 	add	r3, r3, #5
{
   1431c:	e92d4070 	push	{r4, r5, r6, lr}
   14320:	e1a04000 	mov	r4, r0
	char off = read8(ctx, ctx->PC++);
   14324:	e1c021bc 	strh	r2, [r0, #28]
   14328:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   1432c:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   14330:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   14334:	e12fff33 	blx	r3
	ctx->tstates += 3;
   14338:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	BR.A = doRRC(ctx, 1, read8(ctx, WR.IY + off));
   1433c:	e1d410ba 	ldrh	r1, [r4, #10]
   14340:	e6ff5070 	uxth	r5, r0
   14344:	e2833003 	add	r3, r3, #3
   14348:	e0851001 	add	r1, r5, r1
   1434c:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   14350:	e6ff1071 	uxth	r1, r1
   14354:	e5943024 	ldr	r3, [r4, #36]	; 0x24
   14358:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   1435c:	e12fff33 	blx	r3
   14360:	e1a01000 	mov	r1, r0
   14364:	e1a00004 	mov	r0, r4
   14368:	ebffffae 	bl	14228 <doRRC.constprop.30>
	ctx->tstates += 3;
   1436c:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	write8(ctx, WR.IY + off, BR.A);
   14370:	e1d410ba 	ldrh	r1, [r4, #10]
   14374:	e2833003 	add	r3, r3, #3
   14378:	e0851001 	add	r1, r5, r1
	BR.A = doRRC(ctx, 1, read8(ctx, WR.IY + off));
   1437c:	e5c40001 	strb	r0, [r4, #1]
   14380:	e5843040 	str	r3, [r4, #64]	; 0x40
   14384:	e1a02000 	mov	r2, r0
	ctx->memWrite(ctx->memParam, addr, val);	
   14388:	e5943028 	ldr	r3, [r4, #40]	; 0x28
   1438c:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   14390:	e6ff1071 	uxth	r1, r1
}
   14394:	e8bd4070 	pop	{r4, r5, r6, lr}
   14398:	e12fff13 	bx	r3

0001439c <LD_B_RRC_off_IX_d>:
	char off = read8(ctx, ctx->PC++);
   1439c:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
   143a0:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	char off = read8(ctx, ctx->PC++);
   143a4:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
   143a8:	e2833005 	add	r3, r3, #5
{
   143ac:	e92d4070 	push	{r4, r5, r6, lr}
   143b0:	e1a04000 	mov	r4, r0
	char off = read8(ctx, ctx->PC++);
   143b4:	e1c021bc 	strh	r2, [r0, #28]
   143b8:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   143bc:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   143c0:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   143c4:	e12fff33 	blx	r3
	ctx->tstates += 3;
   143c8:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	BR.B = doRRC(ctx, 1, read8(ctx, WR.IX + off));
   143cc:	e1d410b8 	ldrh	r1, [r4, #8]
   143d0:	e6ff5070 	uxth	r5, r0
   143d4:	e2833003 	add	r3, r3, #3
   143d8:	e0851001 	add	r1, r5, r1
   143dc:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   143e0:	e6ff1071 	uxth	r1, r1
   143e4:	e5943024 	ldr	r3, [r4, #36]	; 0x24
   143e8:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   143ec:	e12fff33 	blx	r3
   143f0:	e1a01000 	mov	r1, r0
   143f4:	e1a00004 	mov	r0, r4
   143f8:	ebffff8a 	bl	14228 <doRRC.constprop.30>
	ctx->tstates += 3;
   143fc:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	write8(ctx, WR.IX + off, BR.B);
   14400:	e1d410b8 	ldrh	r1, [r4, #8]
   14404:	e2833003 	add	r3, r3, #3
   14408:	e0851001 	add	r1, r5, r1
	BR.B = doRRC(ctx, 1, read8(ctx, WR.IX + off));
   1440c:	e5c40003 	strb	r0, [r4, #3]
   14410:	e5843040 	str	r3, [r4, #64]	; 0x40
   14414:	e1a02000 	mov	r2, r0
	ctx->memWrite(ctx->memParam, addr, val);	
   14418:	e5943028 	ldr	r3, [r4, #40]	; 0x28
   1441c:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   14420:	e6ff1071 	uxth	r1, r1
}
   14424:	e8bd4070 	pop	{r4, r5, r6, lr}
   14428:	e12fff13 	bx	r3

0001442c <LD_B_RRC_off_IY_d>:
	char off = read8(ctx, ctx->PC++);
   1442c:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
   14430:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	char off = read8(ctx, ctx->PC++);
   14434:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
   14438:	e2833005 	add	r3, r3, #5
{
   1443c:	e92d4070 	push	{r4, r5, r6, lr}
   14440:	e1a04000 	mov	r4, r0
	char off = read8(ctx, ctx->PC++);
   14444:	e1c021bc 	strh	r2, [r0, #28]
   14448:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   1444c:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   14450:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   14454:	e12fff33 	blx	r3
	ctx->tstates += 3;
   14458:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	BR.B = doRRC(ctx, 1, read8(ctx, WR.IY + off));
   1445c:	e1d410ba 	ldrh	r1, [r4, #10]
   14460:	e6ff5070 	uxth	r5, r0
   14464:	e2833003 	add	r3, r3, #3
   14468:	e0851001 	add	r1, r5, r1
   1446c:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   14470:	e6ff1071 	uxth	r1, r1
   14474:	e5943024 	ldr	r3, [r4, #36]	; 0x24
   14478:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   1447c:	e12fff33 	blx	r3
   14480:	e1a01000 	mov	r1, r0
   14484:	e1a00004 	mov	r0, r4
   14488:	ebffff66 	bl	14228 <doRRC.constprop.30>
	ctx->tstates += 3;
   1448c:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	write8(ctx, WR.IY + off, BR.B);
   14490:	e1d410ba 	ldrh	r1, [r4, #10]
   14494:	e2833003 	add	r3, r3, #3
   14498:	e0851001 	add	r1, r5, r1
	BR.B = doRRC(ctx, 1, read8(ctx, WR.IY + off));
   1449c:	e5c40003 	strb	r0, [r4, #3]
   144a0:	e5843040 	str	r3, [r4, #64]	; 0x40
   144a4:	e1a02000 	mov	r2, r0
	ctx->memWrite(ctx->memParam, addr, val);	
   144a8:	e5943028 	ldr	r3, [r4, #40]	; 0x28
   144ac:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   144b0:	e6ff1071 	uxth	r1, r1
}
   144b4:	e8bd4070 	pop	{r4, r5, r6, lr}
   144b8:	e12fff13 	bx	r3

000144bc <LD_C_RRC_off_IX_d>:
	char off = read8(ctx, ctx->PC++);
   144bc:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
   144c0:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	char off = read8(ctx, ctx->PC++);
   144c4:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
   144c8:	e2833005 	add	r3, r3, #5
{
   144cc:	e92d4070 	push	{r4, r5, r6, lr}
   144d0:	e1a04000 	mov	r4, r0
	char off = read8(ctx, ctx->PC++);
   144d4:	e1c021bc 	strh	r2, [r0, #28]
   144d8:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   144dc:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   144e0:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   144e4:	e12fff33 	blx	r3
	ctx->tstates += 3;
   144e8:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	BR.C = doRRC(ctx, 1, read8(ctx, WR.IX + off));
   144ec:	e1d410b8 	ldrh	r1, [r4, #8]
   144f0:	e6ff5070 	uxth	r5, r0
   144f4:	e2833003 	add	r3, r3, #3
   144f8:	e0851001 	add	r1, r5, r1
   144fc:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   14500:	e6ff1071 	uxth	r1, r1
   14504:	e5943024 	ldr	r3, [r4, #36]	; 0x24
   14508:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   1450c:	e12fff33 	blx	r3
   14510:	e1a01000 	mov	r1, r0
   14514:	e1a00004 	mov	r0, r4
   14518:	ebffff42 	bl	14228 <doRRC.constprop.30>
	ctx->tstates += 3;
   1451c:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	write8(ctx, WR.IX + off, BR.C);
   14520:	e1d410b8 	ldrh	r1, [r4, #8]
   14524:	e2833003 	add	r3, r3, #3
   14528:	e0851001 	add	r1, r5, r1
	BR.C = doRRC(ctx, 1, read8(ctx, WR.IX + off));
   1452c:	e5c40002 	strb	r0, [r4, #2]
   14530:	e5843040 	str	r3, [r4, #64]	; 0x40
   14534:	e1a02000 	mov	r2, r0
	ctx->memWrite(ctx->memParam, addr, val);	
   14538:	e5943028 	ldr	r3, [r4, #40]	; 0x28
   1453c:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   14540:	e6ff1071 	uxth	r1, r1
}
   14544:	e8bd4070 	pop	{r4, r5, r6, lr}
   14548:	e12fff13 	bx	r3

0001454c <LD_C_RRC_off_IY_d>:
	char off = read8(ctx, ctx->PC++);
   1454c:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
   14550:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	char off = read8(ctx, ctx->PC++);
   14554:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
   14558:	e2833005 	add	r3, r3, #5
{
   1455c:	e92d4070 	push	{r4, r5, r6, lr}
   14560:	e1a04000 	mov	r4, r0
	char off = read8(ctx, ctx->PC++);
   14564:	e1c021bc 	strh	r2, [r0, #28]
   14568:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   1456c:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   14570:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   14574:	e12fff33 	blx	r3
	ctx->tstates += 3;
   14578:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	BR.C = doRRC(ctx, 1, read8(ctx, WR.IY + off));
   1457c:	e1d410ba 	ldrh	r1, [r4, #10]
   14580:	e6ff5070 	uxth	r5, r0
   14584:	e2833003 	add	r3, r3, #3
   14588:	e0851001 	add	r1, r5, r1
   1458c:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   14590:	e6ff1071 	uxth	r1, r1
   14594:	e5943024 	ldr	r3, [r4, #36]	; 0x24
   14598:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   1459c:	e12fff33 	blx	r3
   145a0:	e1a01000 	mov	r1, r0
   145a4:	e1a00004 	mov	r0, r4
   145a8:	ebffff1e 	bl	14228 <doRRC.constprop.30>
	ctx->tstates += 3;
   145ac:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	write8(ctx, WR.IY + off, BR.C);
   145b0:	e1d410ba 	ldrh	r1, [r4, #10]
   145b4:	e2833003 	add	r3, r3, #3
   145b8:	e0851001 	add	r1, r5, r1
	BR.C = doRRC(ctx, 1, read8(ctx, WR.IY + off));
   145bc:	e5c40002 	strb	r0, [r4, #2]
   145c0:	e5843040 	str	r3, [r4, #64]	; 0x40
   145c4:	e1a02000 	mov	r2, r0
	ctx->memWrite(ctx->memParam, addr, val);	
   145c8:	e5943028 	ldr	r3, [r4, #40]	; 0x28
   145cc:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   145d0:	e6ff1071 	uxth	r1, r1
}
   145d4:	e8bd4070 	pop	{r4, r5, r6, lr}
   145d8:	e12fff13 	bx	r3

000145dc <LD_D_RRC_off_IX_d>:
	char off = read8(ctx, ctx->PC++);
   145dc:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
   145e0:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	char off = read8(ctx, ctx->PC++);
   145e4:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
   145e8:	e2833005 	add	r3, r3, #5
{
   145ec:	e92d4070 	push	{r4, r5, r6, lr}
   145f0:	e1a04000 	mov	r4, r0
	char off = read8(ctx, ctx->PC++);
   145f4:	e1c021bc 	strh	r2, [r0, #28]
   145f8:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   145fc:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   14600:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   14604:	e12fff33 	blx	r3
	ctx->tstates += 3;
   14608:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	BR.D = doRRC(ctx, 1, read8(ctx, WR.IX + off));
   1460c:	e1d410b8 	ldrh	r1, [r4, #8]
   14610:	e6ff5070 	uxth	r5, r0
   14614:	e2833003 	add	r3, r3, #3
   14618:	e0851001 	add	r1, r5, r1
   1461c:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   14620:	e6ff1071 	uxth	r1, r1
   14624:	e5943024 	ldr	r3, [r4, #36]	; 0x24
   14628:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   1462c:	e12fff33 	blx	r3
   14630:	e1a01000 	mov	r1, r0
   14634:	e1a00004 	mov	r0, r4
   14638:	ebfffefa 	bl	14228 <doRRC.constprop.30>
	ctx->tstates += 3;
   1463c:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	write8(ctx, WR.IX + off, BR.D);
   14640:	e1d410b8 	ldrh	r1, [r4, #8]
   14644:	e2833003 	add	r3, r3, #3
   14648:	e0851001 	add	r1, r5, r1
	BR.D = doRRC(ctx, 1, read8(ctx, WR.IX + off));
   1464c:	e5c40005 	strb	r0, [r4, #5]
   14650:	e5843040 	str	r3, [r4, #64]	; 0x40
   14654:	e1a02000 	mov	r2, r0
	ctx->memWrite(ctx->memParam, addr, val);	
   14658:	e5943028 	ldr	r3, [r4, #40]	; 0x28
   1465c:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   14660:	e6ff1071 	uxth	r1, r1
}
   14664:	e8bd4070 	pop	{r4, r5, r6, lr}
   14668:	e12fff13 	bx	r3

0001466c <LD_D_RRC_off_IY_d>:
	char off = read8(ctx, ctx->PC++);
   1466c:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
   14670:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	char off = read8(ctx, ctx->PC++);
   14674:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
   14678:	e2833005 	add	r3, r3, #5
{
   1467c:	e92d4070 	push	{r4, r5, r6, lr}
   14680:	e1a04000 	mov	r4, r0
	char off = read8(ctx, ctx->PC++);
   14684:	e1c021bc 	strh	r2, [r0, #28]
   14688:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   1468c:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   14690:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   14694:	e12fff33 	blx	r3
	ctx->tstates += 3;
   14698:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	BR.D = doRRC(ctx, 1, read8(ctx, WR.IY + off));
   1469c:	e1d410ba 	ldrh	r1, [r4, #10]
   146a0:	e6ff5070 	uxth	r5, r0
   146a4:	e2833003 	add	r3, r3, #3
   146a8:	e0851001 	add	r1, r5, r1
   146ac:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   146b0:	e6ff1071 	uxth	r1, r1
   146b4:	e5943024 	ldr	r3, [r4, #36]	; 0x24
   146b8:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   146bc:	e12fff33 	blx	r3
   146c0:	e1a01000 	mov	r1, r0
   146c4:	e1a00004 	mov	r0, r4
   146c8:	ebfffed6 	bl	14228 <doRRC.constprop.30>
	ctx->tstates += 3;
   146cc:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	write8(ctx, WR.IY + off, BR.D);
   146d0:	e1d410ba 	ldrh	r1, [r4, #10]
   146d4:	e2833003 	add	r3, r3, #3
   146d8:	e0851001 	add	r1, r5, r1
	BR.D = doRRC(ctx, 1, read8(ctx, WR.IY + off));
   146dc:	e5c40005 	strb	r0, [r4, #5]
   146e0:	e5843040 	str	r3, [r4, #64]	; 0x40
   146e4:	e1a02000 	mov	r2, r0
	ctx->memWrite(ctx->memParam, addr, val);	
   146e8:	e5943028 	ldr	r3, [r4, #40]	; 0x28
   146ec:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   146f0:	e6ff1071 	uxth	r1, r1
}
   146f4:	e8bd4070 	pop	{r4, r5, r6, lr}
   146f8:	e12fff13 	bx	r3

000146fc <LD_E_RRC_off_IX_d>:
	char off = read8(ctx, ctx->PC++);
   146fc:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
   14700:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	char off = read8(ctx, ctx->PC++);
   14704:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
   14708:	e2833005 	add	r3, r3, #5
{
   1470c:	e92d4070 	push	{r4, r5, r6, lr}
   14710:	e1a04000 	mov	r4, r0
	char off = read8(ctx, ctx->PC++);
   14714:	e1c021bc 	strh	r2, [r0, #28]
   14718:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   1471c:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   14720:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   14724:	e12fff33 	blx	r3
	ctx->tstates += 3;
   14728:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	BR.E = doRRC(ctx, 1, read8(ctx, WR.IX + off));
   1472c:	e1d410b8 	ldrh	r1, [r4, #8]
   14730:	e6ff5070 	uxth	r5, r0
   14734:	e2833003 	add	r3, r3, #3
   14738:	e0851001 	add	r1, r5, r1
   1473c:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   14740:	e6ff1071 	uxth	r1, r1
   14744:	e5943024 	ldr	r3, [r4, #36]	; 0x24
   14748:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   1474c:	e12fff33 	blx	r3
   14750:	e1a01000 	mov	r1, r0
   14754:	e1a00004 	mov	r0, r4
   14758:	ebfffeb2 	bl	14228 <doRRC.constprop.30>
	ctx->tstates += 3;
   1475c:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	write8(ctx, WR.IX + off, BR.E);
   14760:	e1d410b8 	ldrh	r1, [r4, #8]
   14764:	e2833003 	add	r3, r3, #3
   14768:	e0851001 	add	r1, r5, r1
	BR.E = doRRC(ctx, 1, read8(ctx, WR.IX + off));
   1476c:	e5c40004 	strb	r0, [r4, #4]
   14770:	e5843040 	str	r3, [r4, #64]	; 0x40
   14774:	e1a02000 	mov	r2, r0
	ctx->memWrite(ctx->memParam, addr, val);	
   14778:	e5943028 	ldr	r3, [r4, #40]	; 0x28
   1477c:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   14780:	e6ff1071 	uxth	r1, r1
}
   14784:	e8bd4070 	pop	{r4, r5, r6, lr}
   14788:	e12fff13 	bx	r3

0001478c <LD_E_RRC_off_IY_d>:
	char off = read8(ctx, ctx->PC++);
   1478c:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
   14790:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	char off = read8(ctx, ctx->PC++);
   14794:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
   14798:	e2833005 	add	r3, r3, #5
{
   1479c:	e92d4070 	push	{r4, r5, r6, lr}
   147a0:	e1a04000 	mov	r4, r0
	char off = read8(ctx, ctx->PC++);
   147a4:	e1c021bc 	strh	r2, [r0, #28]
   147a8:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   147ac:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   147b0:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   147b4:	e12fff33 	blx	r3
	ctx->tstates += 3;
   147b8:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	BR.E = doRRC(ctx, 1, read8(ctx, WR.IY + off));
   147bc:	e1d410ba 	ldrh	r1, [r4, #10]
   147c0:	e6ff5070 	uxth	r5, r0
   147c4:	e2833003 	add	r3, r3, #3
   147c8:	e0851001 	add	r1, r5, r1
   147cc:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   147d0:	e6ff1071 	uxth	r1, r1
   147d4:	e5943024 	ldr	r3, [r4, #36]	; 0x24
   147d8:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   147dc:	e12fff33 	blx	r3
   147e0:	e1a01000 	mov	r1, r0
   147e4:	e1a00004 	mov	r0, r4
   147e8:	ebfffe8e 	bl	14228 <doRRC.constprop.30>
	ctx->tstates += 3;
   147ec:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	write8(ctx, WR.IY + off, BR.E);
   147f0:	e1d410ba 	ldrh	r1, [r4, #10]
   147f4:	e2833003 	add	r3, r3, #3
   147f8:	e0851001 	add	r1, r5, r1
	BR.E = doRRC(ctx, 1, read8(ctx, WR.IY + off));
   147fc:	e5c40004 	strb	r0, [r4, #4]
   14800:	e5843040 	str	r3, [r4, #64]	; 0x40
   14804:	e1a02000 	mov	r2, r0
	ctx->memWrite(ctx->memParam, addr, val);	
   14808:	e5943028 	ldr	r3, [r4, #40]	; 0x28
   1480c:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   14810:	e6ff1071 	uxth	r1, r1
}
   14814:	e8bd4070 	pop	{r4, r5, r6, lr}
   14818:	e12fff13 	bx	r3

0001481c <LD_H_RRC_off_IX_d>:
	char off = read8(ctx, ctx->PC++);
   1481c:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
   14820:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	char off = read8(ctx, ctx->PC++);
   14824:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
   14828:	e2833005 	add	r3, r3, #5
{
   1482c:	e92d4070 	push	{r4, r5, r6, lr}
   14830:	e1a04000 	mov	r4, r0
	char off = read8(ctx, ctx->PC++);
   14834:	e1c021bc 	strh	r2, [r0, #28]
   14838:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   1483c:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   14840:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   14844:	e12fff33 	blx	r3
	ctx->tstates += 3;
   14848:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	BR.H = doRRC(ctx, 1, read8(ctx, WR.IX + off));
   1484c:	e1d410b8 	ldrh	r1, [r4, #8]
   14850:	e6ff5070 	uxth	r5, r0
   14854:	e2833003 	add	r3, r3, #3
   14858:	e0851001 	add	r1, r5, r1
   1485c:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   14860:	e6ff1071 	uxth	r1, r1
   14864:	e5943024 	ldr	r3, [r4, #36]	; 0x24
   14868:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   1486c:	e12fff33 	blx	r3
   14870:	e1a01000 	mov	r1, r0
   14874:	e1a00004 	mov	r0, r4
   14878:	ebfffe6a 	bl	14228 <doRRC.constprop.30>
	ctx->tstates += 3;
   1487c:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	write8(ctx, WR.IX + off, BR.H);
   14880:	e1d410b8 	ldrh	r1, [r4, #8]
   14884:	e2833003 	add	r3, r3, #3
   14888:	e0851001 	add	r1, r5, r1
	BR.H = doRRC(ctx, 1, read8(ctx, WR.IX + off));
   1488c:	e5c40007 	strb	r0, [r4, #7]
   14890:	e5843040 	str	r3, [r4, #64]	; 0x40
   14894:	e1a02000 	mov	r2, r0
	ctx->memWrite(ctx->memParam, addr, val);	
   14898:	e5943028 	ldr	r3, [r4, #40]	; 0x28
   1489c:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   148a0:	e6ff1071 	uxth	r1, r1
}
   148a4:	e8bd4070 	pop	{r4, r5, r6, lr}
   148a8:	e12fff13 	bx	r3

000148ac <LD_H_RRC_off_IY_d>:
	char off = read8(ctx, ctx->PC++);
   148ac:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
   148b0:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	char off = read8(ctx, ctx->PC++);
   148b4:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
   148b8:	e2833005 	add	r3, r3, #5
{
   148bc:	e92d4070 	push	{r4, r5, r6, lr}
   148c0:	e1a04000 	mov	r4, r0
	char off = read8(ctx, ctx->PC++);
   148c4:	e1c021bc 	strh	r2, [r0, #28]
   148c8:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   148cc:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   148d0:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   148d4:	e12fff33 	blx	r3
	ctx->tstates += 3;
   148d8:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	BR.H = doRRC(ctx, 1, read8(ctx, WR.IY + off));
   148dc:	e1d410ba 	ldrh	r1, [r4, #10]
   148e0:	e6ff5070 	uxth	r5, r0
   148e4:	e2833003 	add	r3, r3, #3
   148e8:	e0851001 	add	r1, r5, r1
   148ec:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   148f0:	e6ff1071 	uxth	r1, r1
   148f4:	e5943024 	ldr	r3, [r4, #36]	; 0x24
   148f8:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   148fc:	e12fff33 	blx	r3
   14900:	e1a01000 	mov	r1, r0
   14904:	e1a00004 	mov	r0, r4
   14908:	ebfffe46 	bl	14228 <doRRC.constprop.30>
	ctx->tstates += 3;
   1490c:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	write8(ctx, WR.IY + off, BR.H);
   14910:	e1d410ba 	ldrh	r1, [r4, #10]
   14914:	e2833003 	add	r3, r3, #3
   14918:	e0851001 	add	r1, r5, r1
	BR.H = doRRC(ctx, 1, read8(ctx, WR.IY + off));
   1491c:	e5c40007 	strb	r0, [r4, #7]
   14920:	e5843040 	str	r3, [r4, #64]	; 0x40
   14924:	e1a02000 	mov	r2, r0
	ctx->memWrite(ctx->memParam, addr, val);	
   14928:	e5943028 	ldr	r3, [r4, #40]	; 0x28
   1492c:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   14930:	e6ff1071 	uxth	r1, r1
}
   14934:	e8bd4070 	pop	{r4, r5, r6, lr}
   14938:	e12fff13 	bx	r3

0001493c <LD_L_RRC_off_IX_d>:
	char off = read8(ctx, ctx->PC++);
   1493c:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
   14940:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	char off = read8(ctx, ctx->PC++);
   14944:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
   14948:	e2833005 	add	r3, r3, #5
{
   1494c:	e92d4070 	push	{r4, r5, r6, lr}
   14950:	e1a04000 	mov	r4, r0
	char off = read8(ctx, ctx->PC++);
   14954:	e1c021bc 	strh	r2, [r0, #28]
   14958:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   1495c:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   14960:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   14964:	e12fff33 	blx	r3
	ctx->tstates += 3;
   14968:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	BR.L = doRRC(ctx, 1, read8(ctx, WR.IX + off));
   1496c:	e1d410b8 	ldrh	r1, [r4, #8]
   14970:	e6ff5070 	uxth	r5, r0
   14974:	e2833003 	add	r3, r3, #3
   14978:	e0851001 	add	r1, r5, r1
   1497c:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   14980:	e6ff1071 	uxth	r1, r1
   14984:	e5943024 	ldr	r3, [r4, #36]	; 0x24
   14988:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   1498c:	e12fff33 	blx	r3
   14990:	e1a01000 	mov	r1, r0
   14994:	e1a00004 	mov	r0, r4
   14998:	ebfffe22 	bl	14228 <doRRC.constprop.30>
	ctx->tstates += 3;
   1499c:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	write8(ctx, WR.IX + off, BR.L);
   149a0:	e1d410b8 	ldrh	r1, [r4, #8]
   149a4:	e2833003 	add	r3, r3, #3
   149a8:	e0851001 	add	r1, r5, r1
	BR.L = doRRC(ctx, 1, read8(ctx, WR.IX + off));
   149ac:	e5c40006 	strb	r0, [r4, #6]
   149b0:	e5843040 	str	r3, [r4, #64]	; 0x40
   149b4:	e1a02000 	mov	r2, r0
	ctx->memWrite(ctx->memParam, addr, val);	
   149b8:	e5943028 	ldr	r3, [r4, #40]	; 0x28
   149bc:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   149c0:	e6ff1071 	uxth	r1, r1
}
   149c4:	e8bd4070 	pop	{r4, r5, r6, lr}
   149c8:	e12fff13 	bx	r3

000149cc <LD_L_RRC_off_IY_d>:
	char off = read8(ctx, ctx->PC++);
   149cc:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
   149d0:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	char off = read8(ctx, ctx->PC++);
   149d4:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
   149d8:	e2833005 	add	r3, r3, #5
{
   149dc:	e92d4070 	push	{r4, r5, r6, lr}
   149e0:	e1a04000 	mov	r4, r0
	char off = read8(ctx, ctx->PC++);
   149e4:	e1c021bc 	strh	r2, [r0, #28]
   149e8:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   149ec:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   149f0:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   149f4:	e12fff33 	blx	r3
	ctx->tstates += 3;
   149f8:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	BR.L = doRRC(ctx, 1, read8(ctx, WR.IY + off));
   149fc:	e1d410ba 	ldrh	r1, [r4, #10]
   14a00:	e6ff5070 	uxth	r5, r0
   14a04:	e2833003 	add	r3, r3, #3
   14a08:	e0851001 	add	r1, r5, r1
   14a0c:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   14a10:	e6ff1071 	uxth	r1, r1
   14a14:	e5943024 	ldr	r3, [r4, #36]	; 0x24
   14a18:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   14a1c:	e12fff33 	blx	r3
   14a20:	e1a01000 	mov	r1, r0
   14a24:	e1a00004 	mov	r0, r4
   14a28:	ebfffdfe 	bl	14228 <doRRC.constprop.30>
	ctx->tstates += 3;
   14a2c:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	write8(ctx, WR.IY + off, BR.L);
   14a30:	e1d410ba 	ldrh	r1, [r4, #10]
   14a34:	e2833003 	add	r3, r3, #3
   14a38:	e0851001 	add	r1, r5, r1
	BR.L = doRRC(ctx, 1, read8(ctx, WR.IY + off));
   14a3c:	e5c40006 	strb	r0, [r4, #6]
   14a40:	e5843040 	str	r3, [r4, #64]	; 0x40
   14a44:	e1a02000 	mov	r2, r0
	ctx->memWrite(ctx->memParam, addr, val);	
   14a48:	e5943028 	ldr	r3, [r4, #40]	; 0x28
   14a4c:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   14a50:	e6ff1071 	uxth	r1, r1
}
   14a54:	e8bd4070 	pop	{r4, r5, r6, lr}
   14a58:	e12fff13 	bx	r3

00014a5c <RRC_off_HL>:
	ctx->tstates += 3;
   14a5c:	e5903040 	ldr	r3, [r0, #64]	; 0x40
{
   14a60:	e92d4070 	push	{r4, r5, r6, lr}
	write8(ctx, WR.HL, doRRC(ctx, 1, read8(ctx, WR.HL)));
   14a64:	e1d050b6 	ldrh	r5, [r0, #6]
   14a68:	e2833004 	add	r3, r3, #4
{
   14a6c:	e1a04000 	mov	r4, r0
   14a70:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   14a74:	e1a01005 	mov	r1, r5
   14a78:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   14a7c:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   14a80:	e12fff33 	blx	r3
	write8(ctx, WR.HL, doRRC(ctx, 1, read8(ctx, WR.HL)));
   14a84:	e1a01000 	mov	r1, r0
   14a88:	e1a00004 	mov	r0, r4
   14a8c:	ebfffde5 	bl	14228 <doRRC.constprop.30>
	ctx->tstates += 3;
   14a90:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	ctx->memWrite(ctx->memParam, addr, val);	
   14a94:	e1a02000 	mov	r2, r0
	ctx->tstates += 3;
   14a98:	e2833003 	add	r3, r3, #3
   14a9c:	e5843040 	str	r3, [r4, #64]	; 0x40
	ctx->memWrite(ctx->memParam, addr, val);	
   14aa0:	e1a01005 	mov	r1, r5
   14aa4:	e5943028 	ldr	r3, [r4, #40]	; 0x28
   14aa8:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
}
   14aac:	e8bd4070 	pop	{r4, r5, r6, lr}
   14ab0:	e12fff13 	bx	r3

00014ab4 <RRC_off_IX_d>:
	char off = read8(ctx, ctx->PC++);
   14ab4:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
   14ab8:	e5903040 	ldr	r3, [r0, #64]	; 0x40
{
   14abc:	e92d4070 	push	{r4, r5, r6, lr}
	char off = read8(ctx, ctx->PC++);
   14ac0:	e2812001 	add	r2, r1, #1
{
   14ac4:	e1a04000 	mov	r4, r0
	ctx->tstates += 3;
   14ac8:	e2833005 	add	r3, r3, #5
	char off = read8(ctx, ctx->PC++);
   14acc:	e1c021bc 	strh	r2, [r0, #28]
   14ad0:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   14ad4:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   14ad8:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   14adc:	e12fff33 	blx	r3
	write8(ctx, WR.IX + off, doRRC(ctx, 1, read8(ctx, WR.IX + off)));
   14ae0:	e1d450b8 	ldrh	r5, [r4, #8]
	ctx->tstates += 3;
   14ae4:	e5943040 	ldr	r3, [r4, #64]	; 0x40
   14ae8:	e0855000 	add	r5, r5, r0
   14aec:	e6ff5075 	uxth	r5, r5
   14af0:	e2833003 	add	r3, r3, #3
   14af4:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   14af8:	e1a01005 	mov	r1, r5
   14afc:	e5943024 	ldr	r3, [r4, #36]	; 0x24
   14b00:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   14b04:	e12fff33 	blx	r3
   14b08:	e1a01000 	mov	r1, r0
   14b0c:	e1a00004 	mov	r0, r4
   14b10:	ebfffdc4 	bl	14228 <doRRC.constprop.30>
	ctx->tstates += 3;
   14b14:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	ctx->memWrite(ctx->memParam, addr, val);	
   14b18:	e1a01005 	mov	r1, r5
	ctx->tstates += 3;
   14b1c:	e2833003 	add	r3, r3, #3
   14b20:	e5843040 	str	r3, [r4, #64]	; 0x40
	ctx->memWrite(ctx->memParam, addr, val);	
   14b24:	e1a02000 	mov	r2, r0
   14b28:	e5943028 	ldr	r3, [r4, #40]	; 0x28
   14b2c:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
}
   14b30:	e8bd4070 	pop	{r4, r5, r6, lr}
   14b34:	e12fff13 	bx	r3

00014b38 <RRC_off_IY_d>:
	char off = read8(ctx, ctx->PC++);
   14b38:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
   14b3c:	e5903040 	ldr	r3, [r0, #64]	; 0x40
{
   14b40:	e92d4070 	push	{r4, r5, r6, lr}
	char off = read8(ctx, ctx->PC++);
   14b44:	e2812001 	add	r2, r1, #1
{
   14b48:	e1a04000 	mov	r4, r0
	ctx->tstates += 3;
   14b4c:	e2833005 	add	r3, r3, #5
	char off = read8(ctx, ctx->PC++);
   14b50:	e1c021bc 	strh	r2, [r0, #28]
   14b54:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   14b58:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   14b5c:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   14b60:	e12fff33 	blx	r3
	write8(ctx, WR.IY + off, doRRC(ctx, 1, read8(ctx, WR.IY + off)));
   14b64:	e1d450ba 	ldrh	r5, [r4, #10]
	ctx->tstates += 3;
   14b68:	e5943040 	ldr	r3, [r4, #64]	; 0x40
   14b6c:	e0855000 	add	r5, r5, r0
   14b70:	e6ff5075 	uxth	r5, r5
   14b74:	e2833003 	add	r3, r3, #3
   14b78:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   14b7c:	e1a01005 	mov	r1, r5
   14b80:	e5943024 	ldr	r3, [r4, #36]	; 0x24
   14b84:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   14b88:	e12fff33 	blx	r3
   14b8c:	e1a01000 	mov	r1, r0
   14b90:	e1a00004 	mov	r0, r4
   14b94:	ebfffda3 	bl	14228 <doRRC.constprop.30>
	ctx->tstates += 3;
   14b98:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	ctx->memWrite(ctx->memParam, addr, val);	
   14b9c:	e1a01005 	mov	r1, r5
	ctx->tstates += 3;
   14ba0:	e2833003 	add	r3, r3, #3
   14ba4:	e5843040 	str	r3, [r4, #64]	; 0x40
	ctx->memWrite(ctx->memParam, addr, val);	
   14ba8:	e1a02000 	mov	r2, r0
   14bac:	e5943028 	ldr	r3, [r4, #40]	; 0x28
   14bb0:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
}
   14bb4:	e8bd4070 	pop	{r4, r5, r6, lr}
   14bb8:	e12fff13 	bx	r3

00014bbc <doRL.constprop.31>:
static byte doRL (Z80Context* ctx, int adjFlags, byte val)
   14bbc:	e5d03000 	ldrb	r3, [r0]
	if (val)
   14bc0:	e3110080 	tst	r1, #128	; 0x80
    val <<= 1;
   14bc4:	e1a01081 	lsl	r1, r1, #1
static byte doRL (Z80Context* ctx, int adjFlags, byte val)
   14bc8:	e92d4010 	push	{r4, lr}
    val <<= 1;
   14bcc:	e6ef1071 	uxtb	r1, r1
	return (BR.F & flag) != 0;
   14bd0:	e2034001 	and	r4, r3, #1
    val |= (byte)CY;
   14bd4:	e1844001 	orr	r4, r4, r1
	BR.F |= flag;
   14bd8:	13833001 	orrne	r3, r3, #1
	BR.F &= ~flag;
   14bdc:	020330fe 	andeq	r3, r3, #254	; 0xfe
	if (val)
   14be0:	e3140020 	tst	r4, #32
	BR.F |= flag;
   14be4:	13833020 	orrne	r3, r3, #32
	BR.F &= ~flag;
   14be8:	020330df 	andeq	r3, r3, #223	; 0xdf
	if (val)
   14bec:	e3140008 	tst	r4, #8
	BR.F |= flag;
   14bf0:	13833008 	orrne	r3, r3, #8
	BR.F &= ~flag;
   14bf4:	020330f7 	andeq	r3, r3, #247	; 0xf7
   14bf8:	e3c33012 	bic	r3, r3, #18
   14bfc:	e5c03000 	strb	r3, [r0]
        adjustFlagSZP(ctx, val);
   14c00:	e1a01004 	mov	r1, r4
   14c04:	ebffcdbd 	bl	8300 <adjustFlagSZP>
}
   14c08:	e1a00004 	mov	r0, r4
   14c0c:	e8bd8010 	pop	{r4, pc}

00014c10 <LD_A_RL_off_IX_d>:
	char off = read8(ctx, ctx->PC++);
   14c10:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
   14c14:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	char off = read8(ctx, ctx->PC++);
   14c18:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
   14c1c:	e2833005 	add	r3, r3, #5
{
   14c20:	e92d4070 	push	{r4, r5, r6, lr}
   14c24:	e1a04000 	mov	r4, r0
	char off = read8(ctx, ctx->PC++);
   14c28:	e1c021bc 	strh	r2, [r0, #28]
   14c2c:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   14c30:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   14c34:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   14c38:	e12fff33 	blx	r3
	ctx->tstates += 3;
   14c3c:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	BR.A = doRL(ctx, 1, read8(ctx, WR.IX + off));
   14c40:	e1d410b8 	ldrh	r1, [r4, #8]
   14c44:	e6ff5070 	uxth	r5, r0
   14c48:	e2833003 	add	r3, r3, #3
   14c4c:	e0851001 	add	r1, r5, r1
   14c50:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   14c54:	e6ff1071 	uxth	r1, r1
   14c58:	e5943024 	ldr	r3, [r4, #36]	; 0x24
   14c5c:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   14c60:	e12fff33 	blx	r3
   14c64:	e1a01000 	mov	r1, r0
   14c68:	e1a00004 	mov	r0, r4
   14c6c:	ebffffd2 	bl	14bbc <doRL.constprop.31>
	ctx->tstates += 3;
   14c70:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	write8(ctx, WR.IX + off, BR.A);
   14c74:	e1d410b8 	ldrh	r1, [r4, #8]
   14c78:	e2833003 	add	r3, r3, #3
   14c7c:	e0851001 	add	r1, r5, r1
	BR.A = doRL(ctx, 1, read8(ctx, WR.IX + off));
   14c80:	e5c40001 	strb	r0, [r4, #1]
   14c84:	e5843040 	str	r3, [r4, #64]	; 0x40
   14c88:	e1a02000 	mov	r2, r0
	ctx->memWrite(ctx->memParam, addr, val);	
   14c8c:	e5943028 	ldr	r3, [r4, #40]	; 0x28
   14c90:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   14c94:	e6ff1071 	uxth	r1, r1
}
   14c98:	e8bd4070 	pop	{r4, r5, r6, lr}
   14c9c:	e12fff13 	bx	r3

00014ca0 <LD_A_RL_off_IY_d>:
	char off = read8(ctx, ctx->PC++);
   14ca0:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
   14ca4:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	char off = read8(ctx, ctx->PC++);
   14ca8:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
   14cac:	e2833005 	add	r3, r3, #5
{
   14cb0:	e92d4070 	push	{r4, r5, r6, lr}
   14cb4:	e1a04000 	mov	r4, r0
	char off = read8(ctx, ctx->PC++);
   14cb8:	e1c021bc 	strh	r2, [r0, #28]
   14cbc:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   14cc0:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   14cc4:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   14cc8:	e12fff33 	blx	r3
	ctx->tstates += 3;
   14ccc:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	BR.A = doRL(ctx, 1, read8(ctx, WR.IY + off));
   14cd0:	e1d410ba 	ldrh	r1, [r4, #10]
   14cd4:	e6ff5070 	uxth	r5, r0
   14cd8:	e2833003 	add	r3, r3, #3
   14cdc:	e0851001 	add	r1, r5, r1
   14ce0:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   14ce4:	e6ff1071 	uxth	r1, r1
   14ce8:	e5943024 	ldr	r3, [r4, #36]	; 0x24
   14cec:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   14cf0:	e12fff33 	blx	r3
   14cf4:	e1a01000 	mov	r1, r0
   14cf8:	e1a00004 	mov	r0, r4
   14cfc:	ebffffae 	bl	14bbc <doRL.constprop.31>
	ctx->tstates += 3;
   14d00:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	write8(ctx, WR.IY + off, BR.A);
   14d04:	e1d410ba 	ldrh	r1, [r4, #10]
   14d08:	e2833003 	add	r3, r3, #3
   14d0c:	e0851001 	add	r1, r5, r1
	BR.A = doRL(ctx, 1, read8(ctx, WR.IY + off));
   14d10:	e5c40001 	strb	r0, [r4, #1]
   14d14:	e5843040 	str	r3, [r4, #64]	; 0x40
   14d18:	e1a02000 	mov	r2, r0
	ctx->memWrite(ctx->memParam, addr, val);	
   14d1c:	e5943028 	ldr	r3, [r4, #40]	; 0x28
   14d20:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   14d24:	e6ff1071 	uxth	r1, r1
}
   14d28:	e8bd4070 	pop	{r4, r5, r6, lr}
   14d2c:	e12fff13 	bx	r3

00014d30 <LD_B_RL_off_IX_d>:
	char off = read8(ctx, ctx->PC++);
   14d30:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
   14d34:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	char off = read8(ctx, ctx->PC++);
   14d38:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
   14d3c:	e2833005 	add	r3, r3, #5
{
   14d40:	e92d4070 	push	{r4, r5, r6, lr}
   14d44:	e1a04000 	mov	r4, r0
	char off = read8(ctx, ctx->PC++);
   14d48:	e1c021bc 	strh	r2, [r0, #28]
   14d4c:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   14d50:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   14d54:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   14d58:	e12fff33 	blx	r3
	ctx->tstates += 3;
   14d5c:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	BR.B = doRL(ctx, 1, read8(ctx, WR.IX + off));
   14d60:	e1d410b8 	ldrh	r1, [r4, #8]
   14d64:	e6ff5070 	uxth	r5, r0
   14d68:	e2833003 	add	r3, r3, #3
   14d6c:	e0851001 	add	r1, r5, r1
   14d70:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   14d74:	e6ff1071 	uxth	r1, r1
   14d78:	e5943024 	ldr	r3, [r4, #36]	; 0x24
   14d7c:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   14d80:	e12fff33 	blx	r3
   14d84:	e1a01000 	mov	r1, r0
   14d88:	e1a00004 	mov	r0, r4
   14d8c:	ebffff8a 	bl	14bbc <doRL.constprop.31>
	ctx->tstates += 3;
   14d90:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	write8(ctx, WR.IX + off, BR.B);
   14d94:	e1d410b8 	ldrh	r1, [r4, #8]
   14d98:	e2833003 	add	r3, r3, #3
   14d9c:	e0851001 	add	r1, r5, r1
	BR.B = doRL(ctx, 1, read8(ctx, WR.IX + off));
   14da0:	e5c40003 	strb	r0, [r4, #3]
   14da4:	e5843040 	str	r3, [r4, #64]	; 0x40
   14da8:	e1a02000 	mov	r2, r0
	ctx->memWrite(ctx->memParam, addr, val);	
   14dac:	e5943028 	ldr	r3, [r4, #40]	; 0x28
   14db0:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   14db4:	e6ff1071 	uxth	r1, r1
}
   14db8:	e8bd4070 	pop	{r4, r5, r6, lr}
   14dbc:	e12fff13 	bx	r3

00014dc0 <LD_B_RL_off_IY_d>:
	char off = read8(ctx, ctx->PC++);
   14dc0:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
   14dc4:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	char off = read8(ctx, ctx->PC++);
   14dc8:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
   14dcc:	e2833005 	add	r3, r3, #5
{
   14dd0:	e92d4070 	push	{r4, r5, r6, lr}
   14dd4:	e1a04000 	mov	r4, r0
	char off = read8(ctx, ctx->PC++);
   14dd8:	e1c021bc 	strh	r2, [r0, #28]
   14ddc:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   14de0:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   14de4:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   14de8:	e12fff33 	blx	r3
	ctx->tstates += 3;
   14dec:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	BR.B = doRL(ctx, 1, read8(ctx, WR.IY + off));
   14df0:	e1d410ba 	ldrh	r1, [r4, #10]
   14df4:	e6ff5070 	uxth	r5, r0
   14df8:	e2833003 	add	r3, r3, #3
   14dfc:	e0851001 	add	r1, r5, r1
   14e00:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   14e04:	e6ff1071 	uxth	r1, r1
   14e08:	e5943024 	ldr	r3, [r4, #36]	; 0x24
   14e0c:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   14e10:	e12fff33 	blx	r3
   14e14:	e1a01000 	mov	r1, r0
   14e18:	e1a00004 	mov	r0, r4
   14e1c:	ebffff66 	bl	14bbc <doRL.constprop.31>
	ctx->tstates += 3;
   14e20:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	write8(ctx, WR.IY + off, BR.B);
   14e24:	e1d410ba 	ldrh	r1, [r4, #10]
   14e28:	e2833003 	add	r3, r3, #3
   14e2c:	e0851001 	add	r1, r5, r1
	BR.B = doRL(ctx, 1, read8(ctx, WR.IY + off));
   14e30:	e5c40003 	strb	r0, [r4, #3]
   14e34:	e5843040 	str	r3, [r4, #64]	; 0x40
   14e38:	e1a02000 	mov	r2, r0
	ctx->memWrite(ctx->memParam, addr, val);	
   14e3c:	e5943028 	ldr	r3, [r4, #40]	; 0x28
   14e40:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   14e44:	e6ff1071 	uxth	r1, r1
}
   14e48:	e8bd4070 	pop	{r4, r5, r6, lr}
   14e4c:	e12fff13 	bx	r3

00014e50 <LD_C_RL_off_IX_d>:
	char off = read8(ctx, ctx->PC++);
   14e50:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
   14e54:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	char off = read8(ctx, ctx->PC++);
   14e58:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
   14e5c:	e2833005 	add	r3, r3, #5
{
   14e60:	e92d4070 	push	{r4, r5, r6, lr}
   14e64:	e1a04000 	mov	r4, r0
	char off = read8(ctx, ctx->PC++);
   14e68:	e1c021bc 	strh	r2, [r0, #28]
   14e6c:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   14e70:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   14e74:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   14e78:	e12fff33 	blx	r3
	ctx->tstates += 3;
   14e7c:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	BR.C = doRL(ctx, 1, read8(ctx, WR.IX + off));
   14e80:	e1d410b8 	ldrh	r1, [r4, #8]
   14e84:	e6ff5070 	uxth	r5, r0
   14e88:	e2833003 	add	r3, r3, #3
   14e8c:	e0851001 	add	r1, r5, r1
   14e90:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   14e94:	e6ff1071 	uxth	r1, r1
   14e98:	e5943024 	ldr	r3, [r4, #36]	; 0x24
   14e9c:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   14ea0:	e12fff33 	blx	r3
   14ea4:	e1a01000 	mov	r1, r0
   14ea8:	e1a00004 	mov	r0, r4
   14eac:	ebffff42 	bl	14bbc <doRL.constprop.31>
	ctx->tstates += 3;
   14eb0:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	write8(ctx, WR.IX + off, BR.C);
   14eb4:	e1d410b8 	ldrh	r1, [r4, #8]
   14eb8:	e2833003 	add	r3, r3, #3
   14ebc:	e0851001 	add	r1, r5, r1
	BR.C = doRL(ctx, 1, read8(ctx, WR.IX + off));
   14ec0:	e5c40002 	strb	r0, [r4, #2]
   14ec4:	e5843040 	str	r3, [r4, #64]	; 0x40
   14ec8:	e1a02000 	mov	r2, r0
	ctx->memWrite(ctx->memParam, addr, val);	
   14ecc:	e5943028 	ldr	r3, [r4, #40]	; 0x28
   14ed0:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   14ed4:	e6ff1071 	uxth	r1, r1
}
   14ed8:	e8bd4070 	pop	{r4, r5, r6, lr}
   14edc:	e12fff13 	bx	r3

00014ee0 <LD_C_RL_off_IY_d>:
	char off = read8(ctx, ctx->PC++);
   14ee0:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
   14ee4:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	char off = read8(ctx, ctx->PC++);
   14ee8:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
   14eec:	e2833005 	add	r3, r3, #5
{
   14ef0:	e92d4070 	push	{r4, r5, r6, lr}
   14ef4:	e1a04000 	mov	r4, r0
	char off = read8(ctx, ctx->PC++);
   14ef8:	e1c021bc 	strh	r2, [r0, #28]
   14efc:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   14f00:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   14f04:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   14f08:	e12fff33 	blx	r3
	ctx->tstates += 3;
   14f0c:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	BR.C = doRL(ctx, 1, read8(ctx, WR.IY + off));
   14f10:	e1d410ba 	ldrh	r1, [r4, #10]
   14f14:	e6ff5070 	uxth	r5, r0
   14f18:	e2833003 	add	r3, r3, #3
   14f1c:	e0851001 	add	r1, r5, r1
   14f20:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   14f24:	e6ff1071 	uxth	r1, r1
   14f28:	e5943024 	ldr	r3, [r4, #36]	; 0x24
   14f2c:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   14f30:	e12fff33 	blx	r3
   14f34:	e1a01000 	mov	r1, r0
   14f38:	e1a00004 	mov	r0, r4
   14f3c:	ebffff1e 	bl	14bbc <doRL.constprop.31>
	ctx->tstates += 3;
   14f40:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	write8(ctx, WR.IY + off, BR.C);
   14f44:	e1d410ba 	ldrh	r1, [r4, #10]
   14f48:	e2833003 	add	r3, r3, #3
   14f4c:	e0851001 	add	r1, r5, r1
	BR.C = doRL(ctx, 1, read8(ctx, WR.IY + off));
   14f50:	e5c40002 	strb	r0, [r4, #2]
   14f54:	e5843040 	str	r3, [r4, #64]	; 0x40
   14f58:	e1a02000 	mov	r2, r0
	ctx->memWrite(ctx->memParam, addr, val);	
   14f5c:	e5943028 	ldr	r3, [r4, #40]	; 0x28
   14f60:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   14f64:	e6ff1071 	uxth	r1, r1
}
   14f68:	e8bd4070 	pop	{r4, r5, r6, lr}
   14f6c:	e12fff13 	bx	r3

00014f70 <LD_D_RL_off_IX_d>:
	char off = read8(ctx, ctx->PC++);
   14f70:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
   14f74:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	char off = read8(ctx, ctx->PC++);
   14f78:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
   14f7c:	e2833005 	add	r3, r3, #5
{
   14f80:	e92d4070 	push	{r4, r5, r6, lr}
   14f84:	e1a04000 	mov	r4, r0
	char off = read8(ctx, ctx->PC++);
   14f88:	e1c021bc 	strh	r2, [r0, #28]
   14f8c:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   14f90:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   14f94:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   14f98:	e12fff33 	blx	r3
	ctx->tstates += 3;
   14f9c:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	BR.D = doRL(ctx, 1, read8(ctx, WR.IX + off));
   14fa0:	e1d410b8 	ldrh	r1, [r4, #8]
   14fa4:	e6ff5070 	uxth	r5, r0
   14fa8:	e2833003 	add	r3, r3, #3
   14fac:	e0851001 	add	r1, r5, r1
   14fb0:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   14fb4:	e6ff1071 	uxth	r1, r1
   14fb8:	e5943024 	ldr	r3, [r4, #36]	; 0x24
   14fbc:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   14fc0:	e12fff33 	blx	r3
   14fc4:	e1a01000 	mov	r1, r0
   14fc8:	e1a00004 	mov	r0, r4
   14fcc:	ebfffefa 	bl	14bbc <doRL.constprop.31>
	ctx->tstates += 3;
   14fd0:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	write8(ctx, WR.IX + off, BR.D);
   14fd4:	e1d410b8 	ldrh	r1, [r4, #8]
   14fd8:	e2833003 	add	r3, r3, #3
   14fdc:	e0851001 	add	r1, r5, r1
	BR.D = doRL(ctx, 1, read8(ctx, WR.IX + off));
   14fe0:	e5c40005 	strb	r0, [r4, #5]
   14fe4:	e5843040 	str	r3, [r4, #64]	; 0x40
   14fe8:	e1a02000 	mov	r2, r0
	ctx->memWrite(ctx->memParam, addr, val);	
   14fec:	e5943028 	ldr	r3, [r4, #40]	; 0x28
   14ff0:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   14ff4:	e6ff1071 	uxth	r1, r1
}
   14ff8:	e8bd4070 	pop	{r4, r5, r6, lr}
   14ffc:	e12fff13 	bx	r3

00015000 <LD_D_RL_off_IY_d>:
	char off = read8(ctx, ctx->PC++);
   15000:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
   15004:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	char off = read8(ctx, ctx->PC++);
   15008:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
   1500c:	e2833005 	add	r3, r3, #5
{
   15010:	e92d4070 	push	{r4, r5, r6, lr}
   15014:	e1a04000 	mov	r4, r0
	char off = read8(ctx, ctx->PC++);
   15018:	e1c021bc 	strh	r2, [r0, #28]
   1501c:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   15020:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   15024:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   15028:	e12fff33 	blx	r3
	ctx->tstates += 3;
   1502c:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	BR.D = doRL(ctx, 1, read8(ctx, WR.IY + off));
   15030:	e1d410ba 	ldrh	r1, [r4, #10]
   15034:	e6ff5070 	uxth	r5, r0
   15038:	e2833003 	add	r3, r3, #3
   1503c:	e0851001 	add	r1, r5, r1
   15040:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   15044:	e6ff1071 	uxth	r1, r1
   15048:	e5943024 	ldr	r3, [r4, #36]	; 0x24
   1504c:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   15050:	e12fff33 	blx	r3
   15054:	e1a01000 	mov	r1, r0
   15058:	e1a00004 	mov	r0, r4
   1505c:	ebfffed6 	bl	14bbc <doRL.constprop.31>
	ctx->tstates += 3;
   15060:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	write8(ctx, WR.IY + off, BR.D);
   15064:	e1d410ba 	ldrh	r1, [r4, #10]
   15068:	e2833003 	add	r3, r3, #3
   1506c:	e0851001 	add	r1, r5, r1
	BR.D = doRL(ctx, 1, read8(ctx, WR.IY + off));
   15070:	e5c40005 	strb	r0, [r4, #5]
   15074:	e5843040 	str	r3, [r4, #64]	; 0x40
   15078:	e1a02000 	mov	r2, r0
	ctx->memWrite(ctx->memParam, addr, val);	
   1507c:	e5943028 	ldr	r3, [r4, #40]	; 0x28
   15080:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   15084:	e6ff1071 	uxth	r1, r1
}
   15088:	e8bd4070 	pop	{r4, r5, r6, lr}
   1508c:	e12fff13 	bx	r3

00015090 <LD_E_RL_off_IX_d>:
	char off = read8(ctx, ctx->PC++);
   15090:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
   15094:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	char off = read8(ctx, ctx->PC++);
   15098:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
   1509c:	e2833005 	add	r3, r3, #5
{
   150a0:	e92d4070 	push	{r4, r5, r6, lr}
   150a4:	e1a04000 	mov	r4, r0
	char off = read8(ctx, ctx->PC++);
   150a8:	e1c021bc 	strh	r2, [r0, #28]
   150ac:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   150b0:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   150b4:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   150b8:	e12fff33 	blx	r3
	ctx->tstates += 3;
   150bc:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	BR.E = doRL(ctx, 1, read8(ctx, WR.IX + off));
   150c0:	e1d410b8 	ldrh	r1, [r4, #8]
   150c4:	e6ff5070 	uxth	r5, r0
   150c8:	e2833003 	add	r3, r3, #3
   150cc:	e0851001 	add	r1, r5, r1
   150d0:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   150d4:	e6ff1071 	uxth	r1, r1
   150d8:	e5943024 	ldr	r3, [r4, #36]	; 0x24
   150dc:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   150e0:	e12fff33 	blx	r3
   150e4:	e1a01000 	mov	r1, r0
   150e8:	e1a00004 	mov	r0, r4
   150ec:	ebfffeb2 	bl	14bbc <doRL.constprop.31>
	ctx->tstates += 3;
   150f0:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	write8(ctx, WR.IX + off, BR.E);
   150f4:	e1d410b8 	ldrh	r1, [r4, #8]
   150f8:	e2833003 	add	r3, r3, #3
   150fc:	e0851001 	add	r1, r5, r1
	BR.E = doRL(ctx, 1, read8(ctx, WR.IX + off));
   15100:	e5c40004 	strb	r0, [r4, #4]
   15104:	e5843040 	str	r3, [r4, #64]	; 0x40
   15108:	e1a02000 	mov	r2, r0
	ctx->memWrite(ctx->memParam, addr, val);	
   1510c:	e5943028 	ldr	r3, [r4, #40]	; 0x28
   15110:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   15114:	e6ff1071 	uxth	r1, r1
}
   15118:	e8bd4070 	pop	{r4, r5, r6, lr}
   1511c:	e12fff13 	bx	r3

00015120 <LD_E_RL_off_IY_d>:
	char off = read8(ctx, ctx->PC++);
   15120:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
   15124:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	char off = read8(ctx, ctx->PC++);
   15128:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
   1512c:	e2833005 	add	r3, r3, #5
{
   15130:	e92d4070 	push	{r4, r5, r6, lr}
   15134:	e1a04000 	mov	r4, r0
	char off = read8(ctx, ctx->PC++);
   15138:	e1c021bc 	strh	r2, [r0, #28]
   1513c:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   15140:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   15144:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   15148:	e12fff33 	blx	r3
	ctx->tstates += 3;
   1514c:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	BR.E = doRL(ctx, 1, read8(ctx, WR.IY + off));
   15150:	e1d410ba 	ldrh	r1, [r4, #10]
   15154:	e6ff5070 	uxth	r5, r0
   15158:	e2833003 	add	r3, r3, #3
   1515c:	e0851001 	add	r1, r5, r1
   15160:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   15164:	e6ff1071 	uxth	r1, r1
   15168:	e5943024 	ldr	r3, [r4, #36]	; 0x24
   1516c:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   15170:	e12fff33 	blx	r3
   15174:	e1a01000 	mov	r1, r0
   15178:	e1a00004 	mov	r0, r4
   1517c:	ebfffe8e 	bl	14bbc <doRL.constprop.31>
	ctx->tstates += 3;
   15180:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	write8(ctx, WR.IY + off, BR.E);
   15184:	e1d410ba 	ldrh	r1, [r4, #10]
   15188:	e2833003 	add	r3, r3, #3
   1518c:	e0851001 	add	r1, r5, r1
	BR.E = doRL(ctx, 1, read8(ctx, WR.IY + off));
   15190:	e5c40004 	strb	r0, [r4, #4]
   15194:	e5843040 	str	r3, [r4, #64]	; 0x40
   15198:	e1a02000 	mov	r2, r0
	ctx->memWrite(ctx->memParam, addr, val);	
   1519c:	e5943028 	ldr	r3, [r4, #40]	; 0x28
   151a0:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   151a4:	e6ff1071 	uxth	r1, r1
}
   151a8:	e8bd4070 	pop	{r4, r5, r6, lr}
   151ac:	e12fff13 	bx	r3

000151b0 <LD_H_RL_off_IX_d>:
	char off = read8(ctx, ctx->PC++);
   151b0:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
   151b4:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	char off = read8(ctx, ctx->PC++);
   151b8:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
   151bc:	e2833005 	add	r3, r3, #5
{
   151c0:	e92d4070 	push	{r4, r5, r6, lr}
   151c4:	e1a04000 	mov	r4, r0
	char off = read8(ctx, ctx->PC++);
   151c8:	e1c021bc 	strh	r2, [r0, #28]
   151cc:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   151d0:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   151d4:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   151d8:	e12fff33 	blx	r3
	ctx->tstates += 3;
   151dc:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	BR.H = doRL(ctx, 1, read8(ctx, WR.IX + off));
   151e0:	e1d410b8 	ldrh	r1, [r4, #8]
   151e4:	e6ff5070 	uxth	r5, r0
   151e8:	e2833003 	add	r3, r3, #3
   151ec:	e0851001 	add	r1, r5, r1
   151f0:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   151f4:	e6ff1071 	uxth	r1, r1
   151f8:	e5943024 	ldr	r3, [r4, #36]	; 0x24
   151fc:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   15200:	e12fff33 	blx	r3
   15204:	e1a01000 	mov	r1, r0
   15208:	e1a00004 	mov	r0, r4
   1520c:	ebfffe6a 	bl	14bbc <doRL.constprop.31>
	ctx->tstates += 3;
   15210:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	write8(ctx, WR.IX + off, BR.H);
   15214:	e1d410b8 	ldrh	r1, [r4, #8]
   15218:	e2833003 	add	r3, r3, #3
   1521c:	e0851001 	add	r1, r5, r1
	BR.H = doRL(ctx, 1, read8(ctx, WR.IX + off));
   15220:	e5c40007 	strb	r0, [r4, #7]
   15224:	e5843040 	str	r3, [r4, #64]	; 0x40
   15228:	e1a02000 	mov	r2, r0
	ctx->memWrite(ctx->memParam, addr, val);	
   1522c:	e5943028 	ldr	r3, [r4, #40]	; 0x28
   15230:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   15234:	e6ff1071 	uxth	r1, r1
}
   15238:	e8bd4070 	pop	{r4, r5, r6, lr}
   1523c:	e12fff13 	bx	r3

00015240 <LD_H_RL_off_IY_d>:
	char off = read8(ctx, ctx->PC++);
   15240:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
   15244:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	char off = read8(ctx, ctx->PC++);
   15248:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
   1524c:	e2833005 	add	r3, r3, #5
{
   15250:	e92d4070 	push	{r4, r5, r6, lr}
   15254:	e1a04000 	mov	r4, r0
	char off = read8(ctx, ctx->PC++);
   15258:	e1c021bc 	strh	r2, [r0, #28]
   1525c:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   15260:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   15264:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   15268:	e12fff33 	blx	r3
	ctx->tstates += 3;
   1526c:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	BR.H = doRL(ctx, 1, read8(ctx, WR.IY + off));
   15270:	e1d410ba 	ldrh	r1, [r4, #10]
   15274:	e6ff5070 	uxth	r5, r0
   15278:	e2833003 	add	r3, r3, #3
   1527c:	e0851001 	add	r1, r5, r1
   15280:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   15284:	e6ff1071 	uxth	r1, r1
   15288:	e5943024 	ldr	r3, [r4, #36]	; 0x24
   1528c:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   15290:	e12fff33 	blx	r3
   15294:	e1a01000 	mov	r1, r0
   15298:	e1a00004 	mov	r0, r4
   1529c:	ebfffe46 	bl	14bbc <doRL.constprop.31>
	ctx->tstates += 3;
   152a0:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	write8(ctx, WR.IY + off, BR.H);
   152a4:	e1d410ba 	ldrh	r1, [r4, #10]
   152a8:	e2833003 	add	r3, r3, #3
   152ac:	e0851001 	add	r1, r5, r1
	BR.H = doRL(ctx, 1, read8(ctx, WR.IY + off));
   152b0:	e5c40007 	strb	r0, [r4, #7]
   152b4:	e5843040 	str	r3, [r4, #64]	; 0x40
   152b8:	e1a02000 	mov	r2, r0
	ctx->memWrite(ctx->memParam, addr, val);	
   152bc:	e5943028 	ldr	r3, [r4, #40]	; 0x28
   152c0:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   152c4:	e6ff1071 	uxth	r1, r1
}
   152c8:	e8bd4070 	pop	{r4, r5, r6, lr}
   152cc:	e12fff13 	bx	r3

000152d0 <LD_L_RL_off_IX_d>:
	char off = read8(ctx, ctx->PC++);
   152d0:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
   152d4:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	char off = read8(ctx, ctx->PC++);
   152d8:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
   152dc:	e2833005 	add	r3, r3, #5
{
   152e0:	e92d4070 	push	{r4, r5, r6, lr}
   152e4:	e1a04000 	mov	r4, r0
	char off = read8(ctx, ctx->PC++);
   152e8:	e1c021bc 	strh	r2, [r0, #28]
   152ec:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   152f0:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   152f4:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   152f8:	e12fff33 	blx	r3
	ctx->tstates += 3;
   152fc:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	BR.L = doRL(ctx, 1, read8(ctx, WR.IX + off));
   15300:	e1d410b8 	ldrh	r1, [r4, #8]
   15304:	e6ff5070 	uxth	r5, r0
   15308:	e2833003 	add	r3, r3, #3
   1530c:	e0851001 	add	r1, r5, r1
   15310:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   15314:	e6ff1071 	uxth	r1, r1
   15318:	e5943024 	ldr	r3, [r4, #36]	; 0x24
   1531c:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   15320:	e12fff33 	blx	r3
   15324:	e1a01000 	mov	r1, r0
   15328:	e1a00004 	mov	r0, r4
   1532c:	ebfffe22 	bl	14bbc <doRL.constprop.31>
	ctx->tstates += 3;
   15330:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	write8(ctx, WR.IX + off, BR.L);
   15334:	e1d410b8 	ldrh	r1, [r4, #8]
   15338:	e2833003 	add	r3, r3, #3
   1533c:	e0851001 	add	r1, r5, r1
	BR.L = doRL(ctx, 1, read8(ctx, WR.IX + off));
   15340:	e5c40006 	strb	r0, [r4, #6]
   15344:	e5843040 	str	r3, [r4, #64]	; 0x40
   15348:	e1a02000 	mov	r2, r0
	ctx->memWrite(ctx->memParam, addr, val);	
   1534c:	e5943028 	ldr	r3, [r4, #40]	; 0x28
   15350:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   15354:	e6ff1071 	uxth	r1, r1
}
   15358:	e8bd4070 	pop	{r4, r5, r6, lr}
   1535c:	e12fff13 	bx	r3

00015360 <LD_L_RL_off_IY_d>:
	char off = read8(ctx, ctx->PC++);
   15360:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
   15364:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	char off = read8(ctx, ctx->PC++);
   15368:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
   1536c:	e2833005 	add	r3, r3, #5
{
   15370:	e92d4070 	push	{r4, r5, r6, lr}
   15374:	e1a04000 	mov	r4, r0
	char off = read8(ctx, ctx->PC++);
   15378:	e1c021bc 	strh	r2, [r0, #28]
   1537c:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   15380:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   15384:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   15388:	e12fff33 	blx	r3
	ctx->tstates += 3;
   1538c:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	BR.L = doRL(ctx, 1, read8(ctx, WR.IY + off));
   15390:	e1d410ba 	ldrh	r1, [r4, #10]
   15394:	e6ff5070 	uxth	r5, r0
   15398:	e2833003 	add	r3, r3, #3
   1539c:	e0851001 	add	r1, r5, r1
   153a0:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   153a4:	e6ff1071 	uxth	r1, r1
   153a8:	e5943024 	ldr	r3, [r4, #36]	; 0x24
   153ac:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   153b0:	e12fff33 	blx	r3
   153b4:	e1a01000 	mov	r1, r0
   153b8:	e1a00004 	mov	r0, r4
   153bc:	ebfffdfe 	bl	14bbc <doRL.constprop.31>
	ctx->tstates += 3;
   153c0:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	write8(ctx, WR.IY + off, BR.L);
   153c4:	e1d410ba 	ldrh	r1, [r4, #10]
   153c8:	e2833003 	add	r3, r3, #3
   153cc:	e0851001 	add	r1, r5, r1
	BR.L = doRL(ctx, 1, read8(ctx, WR.IY + off));
   153d0:	e5c40006 	strb	r0, [r4, #6]
   153d4:	e5843040 	str	r3, [r4, #64]	; 0x40
   153d8:	e1a02000 	mov	r2, r0
	ctx->memWrite(ctx->memParam, addr, val);	
   153dc:	e5943028 	ldr	r3, [r4, #40]	; 0x28
   153e0:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   153e4:	e6ff1071 	uxth	r1, r1
}
   153e8:	e8bd4070 	pop	{r4, r5, r6, lr}
   153ec:	e12fff13 	bx	r3

000153f0 <RL_off_HL>:
	ctx->tstates += 3;
   153f0:	e5903040 	ldr	r3, [r0, #64]	; 0x40
{
   153f4:	e92d4070 	push	{r4, r5, r6, lr}
	write8(ctx, WR.HL, doRL(ctx, 1, read8(ctx, WR.HL)));
   153f8:	e1d050b6 	ldrh	r5, [r0, #6]
   153fc:	e2833004 	add	r3, r3, #4
{
   15400:	e1a04000 	mov	r4, r0
   15404:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   15408:	e1a01005 	mov	r1, r5
   1540c:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   15410:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   15414:	e12fff33 	blx	r3
	write8(ctx, WR.HL, doRL(ctx, 1, read8(ctx, WR.HL)));
   15418:	e1a01000 	mov	r1, r0
   1541c:	e1a00004 	mov	r0, r4
   15420:	ebfffde5 	bl	14bbc <doRL.constprop.31>
	ctx->tstates += 3;
   15424:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	ctx->memWrite(ctx->memParam, addr, val);	
   15428:	e1a02000 	mov	r2, r0
	ctx->tstates += 3;
   1542c:	e2833003 	add	r3, r3, #3
   15430:	e5843040 	str	r3, [r4, #64]	; 0x40
	ctx->memWrite(ctx->memParam, addr, val);	
   15434:	e1a01005 	mov	r1, r5
   15438:	e5943028 	ldr	r3, [r4, #40]	; 0x28
   1543c:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
}
   15440:	e8bd4070 	pop	{r4, r5, r6, lr}
   15444:	e12fff13 	bx	r3

00015448 <RL_off_IX_d>:
	char off = read8(ctx, ctx->PC++);
   15448:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
   1544c:	e5903040 	ldr	r3, [r0, #64]	; 0x40
{
   15450:	e92d4070 	push	{r4, r5, r6, lr}
	char off = read8(ctx, ctx->PC++);
   15454:	e2812001 	add	r2, r1, #1
{
   15458:	e1a04000 	mov	r4, r0
	ctx->tstates += 3;
   1545c:	e2833005 	add	r3, r3, #5
	char off = read8(ctx, ctx->PC++);
   15460:	e1c021bc 	strh	r2, [r0, #28]
   15464:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   15468:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   1546c:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   15470:	e12fff33 	blx	r3
	write8(ctx, WR.IX + off, doRL(ctx, 1, read8(ctx, WR.IX + off)));
   15474:	e1d450b8 	ldrh	r5, [r4, #8]
	ctx->tstates += 3;
   15478:	e5943040 	ldr	r3, [r4, #64]	; 0x40
   1547c:	e0855000 	add	r5, r5, r0
   15480:	e6ff5075 	uxth	r5, r5
   15484:	e2833003 	add	r3, r3, #3
   15488:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   1548c:	e1a01005 	mov	r1, r5
   15490:	e5943024 	ldr	r3, [r4, #36]	; 0x24
   15494:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   15498:	e12fff33 	blx	r3
   1549c:	e1a01000 	mov	r1, r0
   154a0:	e1a00004 	mov	r0, r4
   154a4:	ebfffdc4 	bl	14bbc <doRL.constprop.31>
	ctx->tstates += 3;
   154a8:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	ctx->memWrite(ctx->memParam, addr, val);	
   154ac:	e1a01005 	mov	r1, r5
	ctx->tstates += 3;
   154b0:	e2833003 	add	r3, r3, #3
   154b4:	e5843040 	str	r3, [r4, #64]	; 0x40
	ctx->memWrite(ctx->memParam, addr, val);	
   154b8:	e1a02000 	mov	r2, r0
   154bc:	e5943028 	ldr	r3, [r4, #40]	; 0x28
   154c0:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
}
   154c4:	e8bd4070 	pop	{r4, r5, r6, lr}
   154c8:	e12fff13 	bx	r3

000154cc <RL_off_IY_d>:
	char off = read8(ctx, ctx->PC++);
   154cc:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
   154d0:	e5903040 	ldr	r3, [r0, #64]	; 0x40
{
   154d4:	e92d4070 	push	{r4, r5, r6, lr}
	char off = read8(ctx, ctx->PC++);
   154d8:	e2812001 	add	r2, r1, #1
{
   154dc:	e1a04000 	mov	r4, r0
	ctx->tstates += 3;
   154e0:	e2833005 	add	r3, r3, #5
	char off = read8(ctx, ctx->PC++);
   154e4:	e1c021bc 	strh	r2, [r0, #28]
   154e8:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   154ec:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   154f0:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   154f4:	e12fff33 	blx	r3
	write8(ctx, WR.IY + off, doRL(ctx, 1, read8(ctx, WR.IY + off)));
   154f8:	e1d450ba 	ldrh	r5, [r4, #10]
	ctx->tstates += 3;
   154fc:	e5943040 	ldr	r3, [r4, #64]	; 0x40
   15500:	e0855000 	add	r5, r5, r0
   15504:	e6ff5075 	uxth	r5, r5
   15508:	e2833003 	add	r3, r3, #3
   1550c:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   15510:	e1a01005 	mov	r1, r5
   15514:	e5943024 	ldr	r3, [r4, #36]	; 0x24
   15518:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   1551c:	e12fff33 	blx	r3
   15520:	e1a01000 	mov	r1, r0
   15524:	e1a00004 	mov	r0, r4
   15528:	ebfffda3 	bl	14bbc <doRL.constprop.31>
	ctx->tstates += 3;
   1552c:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	ctx->memWrite(ctx->memParam, addr, val);	
   15530:	e1a01005 	mov	r1, r5
	ctx->tstates += 3;
   15534:	e2833003 	add	r3, r3, #3
   15538:	e5843040 	str	r3, [r4, #64]	; 0x40
	ctx->memWrite(ctx->memParam, addr, val);	
   1553c:	e1a02000 	mov	r2, r0
   15540:	e5943028 	ldr	r3, [r4, #40]	; 0x28
   15544:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
}
   15548:	e8bd4070 	pop	{r4, r5, r6, lr}
   1554c:	e12fff13 	bx	r3

00015550 <doRLC.constprop.32>:
	if (val)
   15550:	e3110080 	tst	r1, #128	; 0x80
	BR.F |= flag;
   15554:	13a02001 	movne	r2, #1
   15558:	03a02000 	moveq	r2, #0
static byte doRLC (Z80Context* ctx, int adjFlags, byte val)
   1555c:	e92d4010 	push	{r4, lr}
    val <<= 1;
   15560:	e1a04081 	lsl	r4, r1, #1
   15564:	e5d03000 	ldrb	r3, [r0]
   15568:	e6ef4074 	uxtb	r4, r4
    val |= (byte)GETFLAG(F_C);
   1556c:	e1844002 	orr	r4, r4, r2
	BR.F |= flag;
   15570:	13833001 	orrne	r3, r3, #1
	BR.F &= ~flag;
   15574:	020330fe 	andeq	r3, r3, #254	; 0xfe
	if (val)
   15578:	e3140020 	tst	r4, #32
	BR.F |= flag;
   1557c:	13833020 	orrne	r3, r3, #32
	BR.F &= ~flag;
   15580:	020330df 	andeq	r3, r3, #223	; 0xdf
	if (val)
   15584:	e3140008 	tst	r4, #8
	BR.F |= flag;
   15588:	13833008 	orrne	r3, r3, #8
	BR.F &= ~flag;
   1558c:	020330f7 	andeq	r3, r3, #247	; 0xf7
   15590:	e3c33012 	bic	r3, r3, #18
   15594:	e5c03000 	strb	r3, [r0]
        adjustFlagSZP(ctx, val);
   15598:	e1a01004 	mov	r1, r4
   1559c:	ebffcb57 	bl	8300 <adjustFlagSZP>
}
   155a0:	e1a00004 	mov	r0, r4
   155a4:	e8bd8010 	pop	{r4, pc}

000155a8 <LD_A_RLC_off_IX_d>:
	char off = read8(ctx, ctx->PC++);
   155a8:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
   155ac:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	char off = read8(ctx, ctx->PC++);
   155b0:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
   155b4:	e2833005 	add	r3, r3, #5
{
   155b8:	e92d4070 	push	{r4, r5, r6, lr}
   155bc:	e1a04000 	mov	r4, r0
	char off = read8(ctx, ctx->PC++);
   155c0:	e1c021bc 	strh	r2, [r0, #28]
   155c4:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   155c8:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   155cc:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   155d0:	e12fff33 	blx	r3
	ctx->tstates += 3;
   155d4:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	BR.A = doRLC(ctx, 1, read8(ctx, WR.IX + off));
   155d8:	e1d410b8 	ldrh	r1, [r4, #8]
   155dc:	e6ff5070 	uxth	r5, r0
   155e0:	e2833003 	add	r3, r3, #3
   155e4:	e0851001 	add	r1, r5, r1
   155e8:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   155ec:	e6ff1071 	uxth	r1, r1
   155f0:	e5943024 	ldr	r3, [r4, #36]	; 0x24
   155f4:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   155f8:	e12fff33 	blx	r3
   155fc:	e1a01000 	mov	r1, r0
   15600:	e1a00004 	mov	r0, r4
   15604:	ebffffd1 	bl	15550 <doRLC.constprop.32>
	ctx->tstates += 3;
   15608:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	write8(ctx, WR.IX + off, BR.A);
   1560c:	e1d410b8 	ldrh	r1, [r4, #8]
   15610:	e2833003 	add	r3, r3, #3
   15614:	e0851001 	add	r1, r5, r1
	BR.A = doRLC(ctx, 1, read8(ctx, WR.IX + off));
   15618:	e5c40001 	strb	r0, [r4, #1]
   1561c:	e5843040 	str	r3, [r4, #64]	; 0x40
   15620:	e1a02000 	mov	r2, r0
	ctx->memWrite(ctx->memParam, addr, val);	
   15624:	e5943028 	ldr	r3, [r4, #40]	; 0x28
   15628:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   1562c:	e6ff1071 	uxth	r1, r1
}
   15630:	e8bd4070 	pop	{r4, r5, r6, lr}
   15634:	e12fff13 	bx	r3

00015638 <LD_A_RLC_off_IY_d>:
	char off = read8(ctx, ctx->PC++);
   15638:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
   1563c:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	char off = read8(ctx, ctx->PC++);
   15640:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
   15644:	e2833005 	add	r3, r3, #5
{
   15648:	e92d4070 	push	{r4, r5, r6, lr}
   1564c:	e1a04000 	mov	r4, r0
	char off = read8(ctx, ctx->PC++);
   15650:	e1c021bc 	strh	r2, [r0, #28]
   15654:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   15658:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   1565c:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   15660:	e12fff33 	blx	r3
	ctx->tstates += 3;
   15664:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	BR.A = doRLC(ctx, 1, read8(ctx, WR.IY + off));
   15668:	e1d410ba 	ldrh	r1, [r4, #10]
   1566c:	e6ff5070 	uxth	r5, r0
   15670:	e2833003 	add	r3, r3, #3
   15674:	e0851001 	add	r1, r5, r1
   15678:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   1567c:	e6ff1071 	uxth	r1, r1
   15680:	e5943024 	ldr	r3, [r4, #36]	; 0x24
   15684:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   15688:	e12fff33 	blx	r3
   1568c:	e1a01000 	mov	r1, r0
   15690:	e1a00004 	mov	r0, r4
   15694:	ebffffad 	bl	15550 <doRLC.constprop.32>
	ctx->tstates += 3;
   15698:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	write8(ctx, WR.IY + off, BR.A);
   1569c:	e1d410ba 	ldrh	r1, [r4, #10]
   156a0:	e2833003 	add	r3, r3, #3
   156a4:	e0851001 	add	r1, r5, r1
	BR.A = doRLC(ctx, 1, read8(ctx, WR.IY + off));
   156a8:	e5c40001 	strb	r0, [r4, #1]
   156ac:	e5843040 	str	r3, [r4, #64]	; 0x40
   156b0:	e1a02000 	mov	r2, r0
	ctx->memWrite(ctx->memParam, addr, val);	
   156b4:	e5943028 	ldr	r3, [r4, #40]	; 0x28
   156b8:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   156bc:	e6ff1071 	uxth	r1, r1
}
   156c0:	e8bd4070 	pop	{r4, r5, r6, lr}
   156c4:	e12fff13 	bx	r3

000156c8 <LD_B_RLC_off_IX_d>:
	char off = read8(ctx, ctx->PC++);
   156c8:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
   156cc:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	char off = read8(ctx, ctx->PC++);
   156d0:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
   156d4:	e2833005 	add	r3, r3, #5
{
   156d8:	e92d4070 	push	{r4, r5, r6, lr}
   156dc:	e1a04000 	mov	r4, r0
	char off = read8(ctx, ctx->PC++);
   156e0:	e1c021bc 	strh	r2, [r0, #28]
   156e4:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   156e8:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   156ec:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   156f0:	e12fff33 	blx	r3
	ctx->tstates += 3;
   156f4:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	BR.B = doRLC(ctx, 1, read8(ctx, WR.IX + off));
   156f8:	e1d410b8 	ldrh	r1, [r4, #8]
   156fc:	e6ff5070 	uxth	r5, r0
   15700:	e2833003 	add	r3, r3, #3
   15704:	e0851001 	add	r1, r5, r1
   15708:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   1570c:	e6ff1071 	uxth	r1, r1
   15710:	e5943024 	ldr	r3, [r4, #36]	; 0x24
   15714:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   15718:	e12fff33 	blx	r3
   1571c:	e1a01000 	mov	r1, r0
   15720:	e1a00004 	mov	r0, r4
   15724:	ebffff89 	bl	15550 <doRLC.constprop.32>
	ctx->tstates += 3;
   15728:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	write8(ctx, WR.IX + off, BR.B);
   1572c:	e1d410b8 	ldrh	r1, [r4, #8]
   15730:	e2833003 	add	r3, r3, #3
   15734:	e0851001 	add	r1, r5, r1
	BR.B = doRLC(ctx, 1, read8(ctx, WR.IX + off));
   15738:	e5c40003 	strb	r0, [r4, #3]
   1573c:	e5843040 	str	r3, [r4, #64]	; 0x40
   15740:	e1a02000 	mov	r2, r0
	ctx->memWrite(ctx->memParam, addr, val);	
   15744:	e5943028 	ldr	r3, [r4, #40]	; 0x28
   15748:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   1574c:	e6ff1071 	uxth	r1, r1
}
   15750:	e8bd4070 	pop	{r4, r5, r6, lr}
   15754:	e12fff13 	bx	r3

00015758 <LD_B_RLC_off_IY_d>:
	char off = read8(ctx, ctx->PC++);
   15758:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
   1575c:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	char off = read8(ctx, ctx->PC++);
   15760:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
   15764:	e2833005 	add	r3, r3, #5
{
   15768:	e92d4070 	push	{r4, r5, r6, lr}
   1576c:	e1a04000 	mov	r4, r0
	char off = read8(ctx, ctx->PC++);
   15770:	e1c021bc 	strh	r2, [r0, #28]
   15774:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   15778:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   1577c:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   15780:	e12fff33 	blx	r3
	ctx->tstates += 3;
   15784:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	BR.B = doRLC(ctx, 1, read8(ctx, WR.IY + off));
   15788:	e1d410ba 	ldrh	r1, [r4, #10]
   1578c:	e6ff5070 	uxth	r5, r0
   15790:	e2833003 	add	r3, r3, #3
   15794:	e0851001 	add	r1, r5, r1
   15798:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   1579c:	e6ff1071 	uxth	r1, r1
   157a0:	e5943024 	ldr	r3, [r4, #36]	; 0x24
   157a4:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   157a8:	e12fff33 	blx	r3
   157ac:	e1a01000 	mov	r1, r0
   157b0:	e1a00004 	mov	r0, r4
   157b4:	ebffff65 	bl	15550 <doRLC.constprop.32>
	ctx->tstates += 3;
   157b8:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	write8(ctx, WR.IY + off, BR.B);
   157bc:	e1d410ba 	ldrh	r1, [r4, #10]
   157c0:	e2833003 	add	r3, r3, #3
   157c4:	e0851001 	add	r1, r5, r1
	BR.B = doRLC(ctx, 1, read8(ctx, WR.IY + off));
   157c8:	e5c40003 	strb	r0, [r4, #3]
   157cc:	e5843040 	str	r3, [r4, #64]	; 0x40
   157d0:	e1a02000 	mov	r2, r0
	ctx->memWrite(ctx->memParam, addr, val);	
   157d4:	e5943028 	ldr	r3, [r4, #40]	; 0x28
   157d8:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   157dc:	e6ff1071 	uxth	r1, r1
}
   157e0:	e8bd4070 	pop	{r4, r5, r6, lr}
   157e4:	e12fff13 	bx	r3

000157e8 <LD_C_RLC_off_IX_d>:
	char off = read8(ctx, ctx->PC++);
   157e8:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
   157ec:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	char off = read8(ctx, ctx->PC++);
   157f0:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
   157f4:	e2833005 	add	r3, r3, #5
{
   157f8:	e92d4070 	push	{r4, r5, r6, lr}
   157fc:	e1a04000 	mov	r4, r0
	char off = read8(ctx, ctx->PC++);
   15800:	e1c021bc 	strh	r2, [r0, #28]
   15804:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   15808:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   1580c:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   15810:	e12fff33 	blx	r3
	ctx->tstates += 3;
   15814:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	BR.C = doRLC(ctx, 1, read8(ctx, WR.IX + off));
   15818:	e1d410b8 	ldrh	r1, [r4, #8]
   1581c:	e6ff5070 	uxth	r5, r0
   15820:	e2833003 	add	r3, r3, #3
   15824:	e0851001 	add	r1, r5, r1
   15828:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   1582c:	e6ff1071 	uxth	r1, r1
   15830:	e5943024 	ldr	r3, [r4, #36]	; 0x24
   15834:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   15838:	e12fff33 	blx	r3
   1583c:	e1a01000 	mov	r1, r0
   15840:	e1a00004 	mov	r0, r4
   15844:	ebffff41 	bl	15550 <doRLC.constprop.32>
	ctx->tstates += 3;
   15848:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	write8(ctx, WR.IX + off, BR.C);
   1584c:	e1d410b8 	ldrh	r1, [r4, #8]
   15850:	e2833003 	add	r3, r3, #3
   15854:	e0851001 	add	r1, r5, r1
	BR.C = doRLC(ctx, 1, read8(ctx, WR.IX + off));
   15858:	e5c40002 	strb	r0, [r4, #2]
   1585c:	e5843040 	str	r3, [r4, #64]	; 0x40
   15860:	e1a02000 	mov	r2, r0
	ctx->memWrite(ctx->memParam, addr, val);	
   15864:	e5943028 	ldr	r3, [r4, #40]	; 0x28
   15868:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   1586c:	e6ff1071 	uxth	r1, r1
}
   15870:	e8bd4070 	pop	{r4, r5, r6, lr}
   15874:	e12fff13 	bx	r3

00015878 <LD_C_RLC_off_IY_d>:
	char off = read8(ctx, ctx->PC++);
   15878:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
   1587c:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	char off = read8(ctx, ctx->PC++);
   15880:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
   15884:	e2833005 	add	r3, r3, #5
{
   15888:	e92d4070 	push	{r4, r5, r6, lr}
   1588c:	e1a04000 	mov	r4, r0
	char off = read8(ctx, ctx->PC++);
   15890:	e1c021bc 	strh	r2, [r0, #28]
   15894:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   15898:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   1589c:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   158a0:	e12fff33 	blx	r3
	ctx->tstates += 3;
   158a4:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	BR.C = doRLC(ctx, 1, read8(ctx, WR.IY + off));
   158a8:	e1d410ba 	ldrh	r1, [r4, #10]
   158ac:	e6ff5070 	uxth	r5, r0
   158b0:	e2833003 	add	r3, r3, #3
   158b4:	e0851001 	add	r1, r5, r1
   158b8:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   158bc:	e6ff1071 	uxth	r1, r1
   158c0:	e5943024 	ldr	r3, [r4, #36]	; 0x24
   158c4:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   158c8:	e12fff33 	blx	r3
   158cc:	e1a01000 	mov	r1, r0
   158d0:	e1a00004 	mov	r0, r4
   158d4:	ebffff1d 	bl	15550 <doRLC.constprop.32>
	ctx->tstates += 3;
   158d8:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	write8(ctx, WR.IY + off, BR.C);
   158dc:	e1d410ba 	ldrh	r1, [r4, #10]
   158e0:	e2833003 	add	r3, r3, #3
   158e4:	e0851001 	add	r1, r5, r1
	BR.C = doRLC(ctx, 1, read8(ctx, WR.IY + off));
   158e8:	e5c40002 	strb	r0, [r4, #2]
   158ec:	e5843040 	str	r3, [r4, #64]	; 0x40
   158f0:	e1a02000 	mov	r2, r0
	ctx->memWrite(ctx->memParam, addr, val);	
   158f4:	e5943028 	ldr	r3, [r4, #40]	; 0x28
   158f8:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   158fc:	e6ff1071 	uxth	r1, r1
}
   15900:	e8bd4070 	pop	{r4, r5, r6, lr}
   15904:	e12fff13 	bx	r3

00015908 <LD_D_RLC_off_IX_d>:
	char off = read8(ctx, ctx->PC++);
   15908:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
   1590c:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	char off = read8(ctx, ctx->PC++);
   15910:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
   15914:	e2833005 	add	r3, r3, #5
{
   15918:	e92d4070 	push	{r4, r5, r6, lr}
   1591c:	e1a04000 	mov	r4, r0
	char off = read8(ctx, ctx->PC++);
   15920:	e1c021bc 	strh	r2, [r0, #28]
   15924:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   15928:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   1592c:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   15930:	e12fff33 	blx	r3
	ctx->tstates += 3;
   15934:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	BR.D = doRLC(ctx, 1, read8(ctx, WR.IX + off));
   15938:	e1d410b8 	ldrh	r1, [r4, #8]
   1593c:	e6ff5070 	uxth	r5, r0
   15940:	e2833003 	add	r3, r3, #3
   15944:	e0851001 	add	r1, r5, r1
   15948:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   1594c:	e6ff1071 	uxth	r1, r1
   15950:	e5943024 	ldr	r3, [r4, #36]	; 0x24
   15954:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   15958:	e12fff33 	blx	r3
   1595c:	e1a01000 	mov	r1, r0
   15960:	e1a00004 	mov	r0, r4
   15964:	ebfffef9 	bl	15550 <doRLC.constprop.32>
	ctx->tstates += 3;
   15968:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	write8(ctx, WR.IX + off, BR.D);
   1596c:	e1d410b8 	ldrh	r1, [r4, #8]
   15970:	e2833003 	add	r3, r3, #3
   15974:	e0851001 	add	r1, r5, r1
	BR.D = doRLC(ctx, 1, read8(ctx, WR.IX + off));
   15978:	e5c40005 	strb	r0, [r4, #5]
   1597c:	e5843040 	str	r3, [r4, #64]	; 0x40
   15980:	e1a02000 	mov	r2, r0
	ctx->memWrite(ctx->memParam, addr, val);	
   15984:	e5943028 	ldr	r3, [r4, #40]	; 0x28
   15988:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   1598c:	e6ff1071 	uxth	r1, r1
}
   15990:	e8bd4070 	pop	{r4, r5, r6, lr}
   15994:	e12fff13 	bx	r3

00015998 <LD_D_RLC_off_IY_d>:
	char off = read8(ctx, ctx->PC++);
   15998:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
   1599c:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	char off = read8(ctx, ctx->PC++);
   159a0:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
   159a4:	e2833005 	add	r3, r3, #5
{
   159a8:	e92d4070 	push	{r4, r5, r6, lr}
   159ac:	e1a04000 	mov	r4, r0
	char off = read8(ctx, ctx->PC++);
   159b0:	e1c021bc 	strh	r2, [r0, #28]
   159b4:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   159b8:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   159bc:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   159c0:	e12fff33 	blx	r3
	ctx->tstates += 3;
   159c4:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	BR.D = doRLC(ctx, 1, read8(ctx, WR.IY + off));
   159c8:	e1d410ba 	ldrh	r1, [r4, #10]
   159cc:	e6ff5070 	uxth	r5, r0
   159d0:	e2833003 	add	r3, r3, #3
   159d4:	e0851001 	add	r1, r5, r1
   159d8:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   159dc:	e6ff1071 	uxth	r1, r1
   159e0:	e5943024 	ldr	r3, [r4, #36]	; 0x24
   159e4:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   159e8:	e12fff33 	blx	r3
   159ec:	e1a01000 	mov	r1, r0
   159f0:	e1a00004 	mov	r0, r4
   159f4:	ebfffed5 	bl	15550 <doRLC.constprop.32>
	ctx->tstates += 3;
   159f8:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	write8(ctx, WR.IY + off, BR.D);
   159fc:	e1d410ba 	ldrh	r1, [r4, #10]
   15a00:	e2833003 	add	r3, r3, #3
   15a04:	e0851001 	add	r1, r5, r1
	BR.D = doRLC(ctx, 1, read8(ctx, WR.IY + off));
   15a08:	e5c40005 	strb	r0, [r4, #5]
   15a0c:	e5843040 	str	r3, [r4, #64]	; 0x40
   15a10:	e1a02000 	mov	r2, r0
	ctx->memWrite(ctx->memParam, addr, val);	
   15a14:	e5943028 	ldr	r3, [r4, #40]	; 0x28
   15a18:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   15a1c:	e6ff1071 	uxth	r1, r1
}
   15a20:	e8bd4070 	pop	{r4, r5, r6, lr}
   15a24:	e12fff13 	bx	r3

00015a28 <LD_E_RLC_off_IX_d>:
	char off = read8(ctx, ctx->PC++);
   15a28:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
   15a2c:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	char off = read8(ctx, ctx->PC++);
   15a30:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
   15a34:	e2833005 	add	r3, r3, #5
{
   15a38:	e92d4070 	push	{r4, r5, r6, lr}
   15a3c:	e1a04000 	mov	r4, r0
	char off = read8(ctx, ctx->PC++);
   15a40:	e1c021bc 	strh	r2, [r0, #28]
   15a44:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   15a48:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   15a4c:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   15a50:	e12fff33 	blx	r3
	ctx->tstates += 3;
   15a54:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	BR.E = doRLC(ctx, 1, read8(ctx, WR.IX + off));
   15a58:	e1d410b8 	ldrh	r1, [r4, #8]
   15a5c:	e6ff5070 	uxth	r5, r0
   15a60:	e2833003 	add	r3, r3, #3
   15a64:	e0851001 	add	r1, r5, r1
   15a68:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   15a6c:	e6ff1071 	uxth	r1, r1
   15a70:	e5943024 	ldr	r3, [r4, #36]	; 0x24
   15a74:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   15a78:	e12fff33 	blx	r3
   15a7c:	e1a01000 	mov	r1, r0
   15a80:	e1a00004 	mov	r0, r4
   15a84:	ebfffeb1 	bl	15550 <doRLC.constprop.32>
	ctx->tstates += 3;
   15a88:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	write8(ctx, WR.IX + off, BR.E);
   15a8c:	e1d410b8 	ldrh	r1, [r4, #8]
   15a90:	e2833003 	add	r3, r3, #3
   15a94:	e0851001 	add	r1, r5, r1
	BR.E = doRLC(ctx, 1, read8(ctx, WR.IX + off));
   15a98:	e5c40004 	strb	r0, [r4, #4]
   15a9c:	e5843040 	str	r3, [r4, #64]	; 0x40
   15aa0:	e1a02000 	mov	r2, r0
	ctx->memWrite(ctx->memParam, addr, val);	
   15aa4:	e5943028 	ldr	r3, [r4, #40]	; 0x28
   15aa8:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   15aac:	e6ff1071 	uxth	r1, r1
}
   15ab0:	e8bd4070 	pop	{r4, r5, r6, lr}
   15ab4:	e12fff13 	bx	r3

00015ab8 <LD_E_RLC_off_IY_d>:
	char off = read8(ctx, ctx->PC++);
   15ab8:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
   15abc:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	char off = read8(ctx, ctx->PC++);
   15ac0:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
   15ac4:	e2833005 	add	r3, r3, #5
{
   15ac8:	e92d4070 	push	{r4, r5, r6, lr}
   15acc:	e1a04000 	mov	r4, r0
	char off = read8(ctx, ctx->PC++);
   15ad0:	e1c021bc 	strh	r2, [r0, #28]
   15ad4:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   15ad8:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   15adc:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   15ae0:	e12fff33 	blx	r3
	ctx->tstates += 3;
   15ae4:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	BR.E = doRLC(ctx, 1, read8(ctx, WR.IY + off));
   15ae8:	e1d410ba 	ldrh	r1, [r4, #10]
   15aec:	e6ff5070 	uxth	r5, r0
   15af0:	e2833003 	add	r3, r3, #3
   15af4:	e0851001 	add	r1, r5, r1
   15af8:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   15afc:	e6ff1071 	uxth	r1, r1
   15b00:	e5943024 	ldr	r3, [r4, #36]	; 0x24
   15b04:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   15b08:	e12fff33 	blx	r3
   15b0c:	e1a01000 	mov	r1, r0
   15b10:	e1a00004 	mov	r0, r4
   15b14:	ebfffe8d 	bl	15550 <doRLC.constprop.32>
	ctx->tstates += 3;
   15b18:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	write8(ctx, WR.IY + off, BR.E);
   15b1c:	e1d410ba 	ldrh	r1, [r4, #10]
   15b20:	e2833003 	add	r3, r3, #3
   15b24:	e0851001 	add	r1, r5, r1
	BR.E = doRLC(ctx, 1, read8(ctx, WR.IY + off));
   15b28:	e5c40004 	strb	r0, [r4, #4]
   15b2c:	e5843040 	str	r3, [r4, #64]	; 0x40
   15b30:	e1a02000 	mov	r2, r0
	ctx->memWrite(ctx->memParam, addr, val);	
   15b34:	e5943028 	ldr	r3, [r4, #40]	; 0x28
   15b38:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   15b3c:	e6ff1071 	uxth	r1, r1
}
   15b40:	e8bd4070 	pop	{r4, r5, r6, lr}
   15b44:	e12fff13 	bx	r3

00015b48 <LD_H_RLC_off_IX_d>:
	char off = read8(ctx, ctx->PC++);
   15b48:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
   15b4c:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	char off = read8(ctx, ctx->PC++);
   15b50:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
   15b54:	e2833005 	add	r3, r3, #5
{
   15b58:	e92d4070 	push	{r4, r5, r6, lr}
   15b5c:	e1a04000 	mov	r4, r0
	char off = read8(ctx, ctx->PC++);
   15b60:	e1c021bc 	strh	r2, [r0, #28]
   15b64:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   15b68:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   15b6c:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   15b70:	e12fff33 	blx	r3
	ctx->tstates += 3;
   15b74:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	BR.H = doRLC(ctx, 1, read8(ctx, WR.IX + off));
   15b78:	e1d410b8 	ldrh	r1, [r4, #8]
   15b7c:	e6ff5070 	uxth	r5, r0
   15b80:	e2833003 	add	r3, r3, #3
   15b84:	e0851001 	add	r1, r5, r1
   15b88:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   15b8c:	e6ff1071 	uxth	r1, r1
   15b90:	e5943024 	ldr	r3, [r4, #36]	; 0x24
   15b94:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   15b98:	e12fff33 	blx	r3
   15b9c:	e1a01000 	mov	r1, r0
   15ba0:	e1a00004 	mov	r0, r4
   15ba4:	ebfffe69 	bl	15550 <doRLC.constprop.32>
	ctx->tstates += 3;
   15ba8:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	write8(ctx, WR.IX + off, BR.H);
   15bac:	e1d410b8 	ldrh	r1, [r4, #8]
   15bb0:	e2833003 	add	r3, r3, #3
   15bb4:	e0851001 	add	r1, r5, r1
	BR.H = doRLC(ctx, 1, read8(ctx, WR.IX + off));
   15bb8:	e5c40007 	strb	r0, [r4, #7]
   15bbc:	e5843040 	str	r3, [r4, #64]	; 0x40
   15bc0:	e1a02000 	mov	r2, r0
	ctx->memWrite(ctx->memParam, addr, val);	
   15bc4:	e5943028 	ldr	r3, [r4, #40]	; 0x28
   15bc8:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   15bcc:	e6ff1071 	uxth	r1, r1
}
   15bd0:	e8bd4070 	pop	{r4, r5, r6, lr}
   15bd4:	e12fff13 	bx	r3

00015bd8 <LD_H_RLC_off_IY_d>:
	char off = read8(ctx, ctx->PC++);
   15bd8:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
   15bdc:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	char off = read8(ctx, ctx->PC++);
   15be0:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
   15be4:	e2833005 	add	r3, r3, #5
{
   15be8:	e92d4070 	push	{r4, r5, r6, lr}
   15bec:	e1a04000 	mov	r4, r0
	char off = read8(ctx, ctx->PC++);
   15bf0:	e1c021bc 	strh	r2, [r0, #28]
   15bf4:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   15bf8:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   15bfc:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   15c00:	e12fff33 	blx	r3
	ctx->tstates += 3;
   15c04:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	BR.H = doRLC(ctx, 1, read8(ctx, WR.IY + off));
   15c08:	e1d410ba 	ldrh	r1, [r4, #10]
   15c0c:	e6ff5070 	uxth	r5, r0
   15c10:	e2833003 	add	r3, r3, #3
   15c14:	e0851001 	add	r1, r5, r1
   15c18:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   15c1c:	e6ff1071 	uxth	r1, r1
   15c20:	e5943024 	ldr	r3, [r4, #36]	; 0x24
   15c24:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   15c28:	e12fff33 	blx	r3
   15c2c:	e1a01000 	mov	r1, r0
   15c30:	e1a00004 	mov	r0, r4
   15c34:	ebfffe45 	bl	15550 <doRLC.constprop.32>
	ctx->tstates += 3;
   15c38:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	write8(ctx, WR.IY + off, BR.H);
   15c3c:	e1d410ba 	ldrh	r1, [r4, #10]
   15c40:	e2833003 	add	r3, r3, #3
   15c44:	e0851001 	add	r1, r5, r1
	BR.H = doRLC(ctx, 1, read8(ctx, WR.IY + off));
   15c48:	e5c40007 	strb	r0, [r4, #7]
   15c4c:	e5843040 	str	r3, [r4, #64]	; 0x40
   15c50:	e1a02000 	mov	r2, r0
	ctx->memWrite(ctx->memParam, addr, val);	
   15c54:	e5943028 	ldr	r3, [r4, #40]	; 0x28
   15c58:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   15c5c:	e6ff1071 	uxth	r1, r1
}
   15c60:	e8bd4070 	pop	{r4, r5, r6, lr}
   15c64:	e12fff13 	bx	r3

00015c68 <LD_L_RLC_off_IX_d>:
	char off = read8(ctx, ctx->PC++);
   15c68:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
   15c6c:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	char off = read8(ctx, ctx->PC++);
   15c70:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
   15c74:	e2833005 	add	r3, r3, #5
{
   15c78:	e92d4070 	push	{r4, r5, r6, lr}
   15c7c:	e1a04000 	mov	r4, r0
	char off = read8(ctx, ctx->PC++);
   15c80:	e1c021bc 	strh	r2, [r0, #28]
   15c84:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   15c88:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   15c8c:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   15c90:	e12fff33 	blx	r3
	ctx->tstates += 3;
   15c94:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	BR.L = doRLC(ctx, 1, read8(ctx, WR.IX + off));
   15c98:	e1d410b8 	ldrh	r1, [r4, #8]
   15c9c:	e6ff5070 	uxth	r5, r0
   15ca0:	e2833003 	add	r3, r3, #3
   15ca4:	e0851001 	add	r1, r5, r1
   15ca8:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   15cac:	e6ff1071 	uxth	r1, r1
   15cb0:	e5943024 	ldr	r3, [r4, #36]	; 0x24
   15cb4:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   15cb8:	e12fff33 	blx	r3
   15cbc:	e1a01000 	mov	r1, r0
   15cc0:	e1a00004 	mov	r0, r4
   15cc4:	ebfffe21 	bl	15550 <doRLC.constprop.32>
	ctx->tstates += 3;
   15cc8:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	write8(ctx, WR.IX + off, BR.L);
   15ccc:	e1d410b8 	ldrh	r1, [r4, #8]
   15cd0:	e2833003 	add	r3, r3, #3
   15cd4:	e0851001 	add	r1, r5, r1
	BR.L = doRLC(ctx, 1, read8(ctx, WR.IX + off));
   15cd8:	e5c40006 	strb	r0, [r4, #6]
   15cdc:	e5843040 	str	r3, [r4, #64]	; 0x40
   15ce0:	e1a02000 	mov	r2, r0
	ctx->memWrite(ctx->memParam, addr, val);	
   15ce4:	e5943028 	ldr	r3, [r4, #40]	; 0x28
   15ce8:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   15cec:	e6ff1071 	uxth	r1, r1
}
   15cf0:	e8bd4070 	pop	{r4, r5, r6, lr}
   15cf4:	e12fff13 	bx	r3

00015cf8 <LD_L_RLC_off_IY_d>:
	char off = read8(ctx, ctx->PC++);
   15cf8:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
   15cfc:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	char off = read8(ctx, ctx->PC++);
   15d00:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
   15d04:	e2833005 	add	r3, r3, #5
{
   15d08:	e92d4070 	push	{r4, r5, r6, lr}
   15d0c:	e1a04000 	mov	r4, r0
	char off = read8(ctx, ctx->PC++);
   15d10:	e1c021bc 	strh	r2, [r0, #28]
   15d14:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   15d18:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   15d1c:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   15d20:	e12fff33 	blx	r3
	ctx->tstates += 3;
   15d24:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	BR.L = doRLC(ctx, 1, read8(ctx, WR.IY + off));
   15d28:	e1d410ba 	ldrh	r1, [r4, #10]
   15d2c:	e6ff5070 	uxth	r5, r0
   15d30:	e2833003 	add	r3, r3, #3
   15d34:	e0851001 	add	r1, r5, r1
   15d38:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   15d3c:	e6ff1071 	uxth	r1, r1
   15d40:	e5943024 	ldr	r3, [r4, #36]	; 0x24
   15d44:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   15d48:	e12fff33 	blx	r3
   15d4c:	e1a01000 	mov	r1, r0
   15d50:	e1a00004 	mov	r0, r4
   15d54:	ebfffdfd 	bl	15550 <doRLC.constprop.32>
	ctx->tstates += 3;
   15d58:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	write8(ctx, WR.IY + off, BR.L);
   15d5c:	e1d410ba 	ldrh	r1, [r4, #10]
   15d60:	e2833003 	add	r3, r3, #3
   15d64:	e0851001 	add	r1, r5, r1
	BR.L = doRLC(ctx, 1, read8(ctx, WR.IY + off));
   15d68:	e5c40006 	strb	r0, [r4, #6]
   15d6c:	e5843040 	str	r3, [r4, #64]	; 0x40
   15d70:	e1a02000 	mov	r2, r0
	ctx->memWrite(ctx->memParam, addr, val);	
   15d74:	e5943028 	ldr	r3, [r4, #40]	; 0x28
   15d78:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   15d7c:	e6ff1071 	uxth	r1, r1
}
   15d80:	e8bd4070 	pop	{r4, r5, r6, lr}
   15d84:	e12fff13 	bx	r3

00015d88 <RLC_off_HL>:
	ctx->tstates += 3;
   15d88:	e5903040 	ldr	r3, [r0, #64]	; 0x40
{
   15d8c:	e92d4070 	push	{r4, r5, r6, lr}
	write8(ctx, WR.HL, doRLC(ctx, 1, read8(ctx, WR.HL)));
   15d90:	e1d050b6 	ldrh	r5, [r0, #6]
   15d94:	e2833004 	add	r3, r3, #4
{
   15d98:	e1a04000 	mov	r4, r0
   15d9c:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   15da0:	e1a01005 	mov	r1, r5
   15da4:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   15da8:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   15dac:	e12fff33 	blx	r3
	write8(ctx, WR.HL, doRLC(ctx, 1, read8(ctx, WR.HL)));
   15db0:	e1a01000 	mov	r1, r0
   15db4:	e1a00004 	mov	r0, r4
   15db8:	ebfffde4 	bl	15550 <doRLC.constprop.32>
	ctx->tstates += 3;
   15dbc:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	ctx->memWrite(ctx->memParam, addr, val);	
   15dc0:	e1a02000 	mov	r2, r0
	ctx->tstates += 3;
   15dc4:	e2833003 	add	r3, r3, #3
   15dc8:	e5843040 	str	r3, [r4, #64]	; 0x40
	ctx->memWrite(ctx->memParam, addr, val);	
   15dcc:	e1a01005 	mov	r1, r5
   15dd0:	e5943028 	ldr	r3, [r4, #40]	; 0x28
   15dd4:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
}
   15dd8:	e8bd4070 	pop	{r4, r5, r6, lr}
   15ddc:	e12fff13 	bx	r3

00015de0 <RLC_off_IX_d>:
	char off = read8(ctx, ctx->PC++);
   15de0:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
   15de4:	e5903040 	ldr	r3, [r0, #64]	; 0x40
{
   15de8:	e92d4070 	push	{r4, r5, r6, lr}
	char off = read8(ctx, ctx->PC++);
   15dec:	e2812001 	add	r2, r1, #1
{
   15df0:	e1a04000 	mov	r4, r0
	ctx->tstates += 3;
   15df4:	e2833005 	add	r3, r3, #5
	char off = read8(ctx, ctx->PC++);
   15df8:	e1c021bc 	strh	r2, [r0, #28]
   15dfc:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   15e00:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   15e04:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   15e08:	e12fff33 	blx	r3
	write8(ctx, WR.IX + off, doRLC(ctx, 1, read8(ctx, WR.IX + off)));
   15e0c:	e1d450b8 	ldrh	r5, [r4, #8]
	ctx->tstates += 3;
   15e10:	e5943040 	ldr	r3, [r4, #64]	; 0x40
   15e14:	e0855000 	add	r5, r5, r0
   15e18:	e6ff5075 	uxth	r5, r5
   15e1c:	e2833003 	add	r3, r3, #3
   15e20:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   15e24:	e1a01005 	mov	r1, r5
   15e28:	e5943024 	ldr	r3, [r4, #36]	; 0x24
   15e2c:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   15e30:	e12fff33 	blx	r3
   15e34:	e1a01000 	mov	r1, r0
   15e38:	e1a00004 	mov	r0, r4
   15e3c:	ebfffdc3 	bl	15550 <doRLC.constprop.32>
	ctx->tstates += 3;
   15e40:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	ctx->memWrite(ctx->memParam, addr, val);	
   15e44:	e1a01005 	mov	r1, r5
	ctx->tstates += 3;
   15e48:	e2833003 	add	r3, r3, #3
   15e4c:	e5843040 	str	r3, [r4, #64]	; 0x40
	ctx->memWrite(ctx->memParam, addr, val);	
   15e50:	e1a02000 	mov	r2, r0
   15e54:	e5943028 	ldr	r3, [r4, #40]	; 0x28
   15e58:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
}
   15e5c:	e8bd4070 	pop	{r4, r5, r6, lr}
   15e60:	e12fff13 	bx	r3

00015e64 <RLC_off_IY_d>:
	char off = read8(ctx, ctx->PC++);
   15e64:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
   15e68:	e5903040 	ldr	r3, [r0, #64]	; 0x40
{
   15e6c:	e92d4070 	push	{r4, r5, r6, lr}
	char off = read8(ctx, ctx->PC++);
   15e70:	e2812001 	add	r2, r1, #1
{
   15e74:	e1a04000 	mov	r4, r0
	ctx->tstates += 3;
   15e78:	e2833005 	add	r3, r3, #5
	char off = read8(ctx, ctx->PC++);
   15e7c:	e1c021bc 	strh	r2, [r0, #28]
   15e80:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   15e84:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   15e88:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   15e8c:	e12fff33 	blx	r3
	write8(ctx, WR.IY + off, doRLC(ctx, 1, read8(ctx, WR.IY + off)));
   15e90:	e1d450ba 	ldrh	r5, [r4, #10]
	ctx->tstates += 3;
   15e94:	e5943040 	ldr	r3, [r4, #64]	; 0x40
   15e98:	e0855000 	add	r5, r5, r0
   15e9c:	e6ff5075 	uxth	r5, r5
   15ea0:	e2833003 	add	r3, r3, #3
   15ea4:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   15ea8:	e1a01005 	mov	r1, r5
   15eac:	e5943024 	ldr	r3, [r4, #36]	; 0x24
   15eb0:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   15eb4:	e12fff33 	blx	r3
   15eb8:	e1a01000 	mov	r1, r0
   15ebc:	e1a00004 	mov	r0, r4
   15ec0:	ebfffda2 	bl	15550 <doRLC.constprop.32>
	ctx->tstates += 3;
   15ec4:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	ctx->memWrite(ctx->memParam, addr, val);	
   15ec8:	e1a01005 	mov	r1, r5
	ctx->tstates += 3;
   15ecc:	e2833003 	add	r3, r3, #3
   15ed0:	e5843040 	str	r3, [r4, #64]	; 0x40
	ctx->memWrite(ctx->memParam, addr, val);	
   15ed4:	e1a02000 	mov	r2, r0
   15ed8:	e5943028 	ldr	r3, [r4, #40]	; 0x28
   15edc:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
}
   15ee0:	e8bd4070 	pop	{r4, r5, r6, lr}
   15ee4:	e12fff13 	bx	r3

00015ee8 <doIncDec.constprop.33>:
        VALFLAG(F_PV, !(val & 0x80) && ((val + 1) & 0x80));
   15ee8:	e3110080 	tst	r1, #128	; 0x80
   15eec:	e5d03000 	ldrb	r3, [r0]
   15ef0:	e2811001 	add	r1, r1, #1
   15ef4:	1a00001f 	bne	15f78 <doIncDec.constprop.33+0x90>
   15ef8:	e3110080 	tst	r1, #128	; 0x80
	BR.F |= flag;
   15efc:	13833004 	orrne	r3, r3, #4
        VALFLAG(F_PV, !(val & 0x80) && ((val + 1) & 0x80));
   15f00:	0a00001c 	beq	15f78 <doIncDec.constprop.33+0x90>
        val++;
   15f04:	e6ef1071 	uxtb	r1, r1
	if (val)
   15f08:	e311000f 	tst	r1, #15
	BR.F &= ~flag;
   15f0c:	120330ef 	andne	r3, r3, #239	; 0xef
	BR.F |= flag;
   15f10:	03833010 	orreq	r3, r3, #16
	if (val)
   15f14:	e3110080 	tst	r1, #128	; 0x80
   15f18:	e5c03000 	strb	r3, [r0]
	BR.F |= flag;
   15f1c:	13833080 	orrne	r3, r3, #128	; 0x80
	if (val)
   15f20:	1a00000c 	bne	15f58 <doIncDec.constprop.33+0x70>
	BR.F &= ~flag;
   15f24:	e203307f 	and	r3, r3, #127	; 0x7f
	if (val)
   15f28:	e3510000 	cmp	r1, #0
	BR.F &= ~flag;
   15f2c:	e5c03000 	strb	r3, [r0]
	if (val)
   15f30:	1a000008 	bne	15f58 <doIncDec.constprop.33+0x70>
	BR.F |= flag;
   15f34:	e3833040 	orr	r3, r3, #64	; 0x40
	BR.F &= ~flag;
   15f38:	e203307d 	and	r3, r3, #125	; 0x7d
   15f3c:	e20330dd 	and	r3, r3, #221	; 0xdd
	if (val)
   15f40:	e3110008 	tst	r1, #8
	BR.F |= flag;
   15f44:	13833008 	orrne	r3, r3, #8
	BR.F &= ~flag;
   15f48:	020330f7 	andeq	r3, r3, #247	; 0xf7
   15f4c:	e5c03000 	strb	r3, [r0]
}
   15f50:	e1a00001 	mov	r0, r1
   15f54:	e12fff1e 	bx	lr
	BR.F &= ~flag;
   15f58:	e3c33042 	bic	r3, r3, #66	; 0x42
   15f5c:	e6af3073 	sxtb	r3, r3
   15f60:	e6ef2073 	uxtb	r2, r3
	if (val)
   15f64:	e3110020 	tst	r1, #32
	BR.F &= ~flag;
   15f68:	e5c02000 	strb	r2, [r0]
	if (val)
   15f6c:	0afffff2 	beq	15f3c <doIncDec.constprop.33+0x54>
	BR.F |= flag;
   15f70:	e3823020 	orr	r3, r2, #32
   15f74:	eafffff1 	b	15f40 <doIncDec.constprop.33+0x58>
	BR.F &= ~flag;
   15f78:	e20330fb 	and	r3, r3, #251	; 0xfb
   15f7c:	eaffffe0 	b	15f04 <doIncDec.constprop.33+0x1c>

00015f80 <INC_off_HL>:
	ctx->tstates += 3;
   15f80:	e5903040 	ldr	r3, [r0, #64]	; 0x40
{
   15f84:	e92d4070 	push	{r4, r5, r6, lr}
   15f88:	e2833004 	add	r3, r3, #4
   15f8c:	e1a04000 	mov	r4, r0
	byte value = read8(ctx, WR.HL);
   15f90:	e1d010b6 	ldrh	r1, [r0, #6]
   15f94:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   15f98:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   15f9c:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   15fa0:	e12fff33 	blx	r3
	write8(ctx, WR.HL, doIncDec(ctx, value, ID_INC));
   15fa4:	e1a01000 	mov	r1, r0
   15fa8:	e1a00004 	mov	r0, r4
   15fac:	e1d450b6 	ldrh	r5, [r4, #6]
   15fb0:	ebffffcc 	bl	15ee8 <doIncDec.constprop.33>
	ctx->tstates += 3;
   15fb4:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	ctx->memWrite(ctx->memParam, addr, val);	
   15fb8:	e1a02000 	mov	r2, r0
	ctx->tstates += 3;
   15fbc:	e2833003 	add	r3, r3, #3
   15fc0:	e5843040 	str	r3, [r4, #64]	; 0x40
	ctx->memWrite(ctx->memParam, addr, val);	
   15fc4:	e1a01005 	mov	r1, r5
   15fc8:	e5943028 	ldr	r3, [r4, #40]	; 0x28
   15fcc:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
}
   15fd0:	e8bd4070 	pop	{r4, r5, r6, lr}
   15fd4:	e12fff13 	bx	r3

00015fd8 <INC_off_IX_d>:
	char off = read8(ctx, ctx->PC++);
   15fd8:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 6;
   15fdc:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	char off = read8(ctx, ctx->PC++);
   15fe0:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
   15fe4:	e2833009 	add	r3, r3, #9
{
   15fe8:	e92d4070 	push	{r4, r5, r6, lr}
   15fec:	e1a04000 	mov	r4, r0
	char off = read8(ctx, ctx->PC++);
   15ff0:	e1c021bc 	strh	r2, [r0, #28]
   15ff4:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   15ff8:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   15ffc:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   16000:	e12fff33 	blx	r3
	ctx->tstates += 3;
   16004:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	byte value = read8(ctx, WR.IX + off);
   16008:	e1d410b8 	ldrh	r1, [r4, #8]
   1600c:	e6ff5070 	uxth	r5, r0
   16010:	e2833003 	add	r3, r3, #3
   16014:	e0851001 	add	r1, r5, r1
   16018:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   1601c:	e6ff1071 	uxth	r1, r1
   16020:	e5943024 	ldr	r3, [r4, #36]	; 0x24
   16024:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   16028:	e12fff33 	blx	r3
	write8(ctx, WR.IX + off, doIncDec(ctx, value, ID_INC));
   1602c:	e1d430b8 	ldrh	r3, [r4, #8]
   16030:	e1a01000 	mov	r1, r0
   16034:	e1a00004 	mov	r0, r4
   16038:	e0855003 	add	r5, r5, r3
   1603c:	ebffffa9 	bl	15ee8 <doIncDec.constprop.33>
	ctx->tstates += 3;
   16040:	e5943040 	ldr	r3, [r4, #64]	; 0x40
   16044:	e6ff5075 	uxth	r5, r5
   16048:	e2833003 	add	r3, r3, #3
   1604c:	e5843040 	str	r3, [r4, #64]	; 0x40
	ctx->memWrite(ctx->memParam, addr, val);	
   16050:	e1a02000 	mov	r2, r0
   16054:	e1a01005 	mov	r1, r5
   16058:	e5943028 	ldr	r3, [r4, #40]	; 0x28
   1605c:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
}
   16060:	e8bd4070 	pop	{r4, r5, r6, lr}
   16064:	e12fff13 	bx	r3

00016068 <INC_off_IY_d>:
	char off = read8(ctx, ctx->PC++);
   16068:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 6;
   1606c:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	char off = read8(ctx, ctx->PC++);
   16070:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
   16074:	e2833009 	add	r3, r3, #9
{
   16078:	e92d4070 	push	{r4, r5, r6, lr}
   1607c:	e1a04000 	mov	r4, r0
	char off = read8(ctx, ctx->PC++);
   16080:	e1c021bc 	strh	r2, [r0, #28]
   16084:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   16088:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   1608c:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   16090:	e12fff33 	blx	r3
	ctx->tstates += 3;
   16094:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	byte value = read8(ctx, WR.IY + off);
   16098:	e1d410ba 	ldrh	r1, [r4, #10]
   1609c:	e6ff5070 	uxth	r5, r0
   160a0:	e2833003 	add	r3, r3, #3
   160a4:	e0851001 	add	r1, r5, r1
   160a8:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   160ac:	e6ff1071 	uxth	r1, r1
   160b0:	e5943024 	ldr	r3, [r4, #36]	; 0x24
   160b4:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   160b8:	e12fff33 	blx	r3
	write8(ctx, WR.IY + off, doIncDec(ctx, value, ID_INC));
   160bc:	e1d430ba 	ldrh	r3, [r4, #10]
   160c0:	e1a01000 	mov	r1, r0
   160c4:	e1a00004 	mov	r0, r4
   160c8:	e0855003 	add	r5, r5, r3
   160cc:	ebffff85 	bl	15ee8 <doIncDec.constprop.33>
	ctx->tstates += 3;
   160d0:	e5943040 	ldr	r3, [r4, #64]	; 0x40
   160d4:	e6ff5075 	uxth	r5, r5
   160d8:	e2833003 	add	r3, r3, #3
   160dc:	e5843040 	str	r3, [r4, #64]	; 0x40
	ctx->memWrite(ctx->memParam, addr, val);	
   160e0:	e1a02000 	mov	r2, r0
   160e4:	e1a01005 	mov	r1, r5
   160e8:	e5943028 	ldr	r3, [r4, #40]	; 0x28
   160ec:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
}
   160f0:	e8bd4070 	pop	{r4, r5, r6, lr}
   160f4:	e12fff13 	bx	r3

000160f8 <INC_A>:
{
   160f8:	e92d4010 	push	{r4, lr}
	BR.A = doIncDec(ctx, BR.A, ID_INC);
   160fc:	e5d01001 	ldrb	r1, [r0, #1]
{
   16100:	e1a04000 	mov	r4, r0
	BR.A = doIncDec(ctx, BR.A, ID_INC);
   16104:	ebffff77 	bl	15ee8 <doIncDec.constprop.33>
   16108:	e5c40001 	strb	r0, [r4, #1]
}
   1610c:	e8bd8010 	pop	{r4, pc}

00016110 <INC_B>:
{
   16110:	e92d4010 	push	{r4, lr}
	BR.B = doIncDec(ctx, BR.B, ID_INC);
   16114:	e5d01003 	ldrb	r1, [r0, #3]
{
   16118:	e1a04000 	mov	r4, r0
	BR.B = doIncDec(ctx, BR.B, ID_INC);
   1611c:	ebffff71 	bl	15ee8 <doIncDec.constprop.33>
   16120:	e5c40003 	strb	r0, [r4, #3]
}
   16124:	e8bd8010 	pop	{r4, pc}

00016128 <INC_C>:
{
   16128:	e92d4010 	push	{r4, lr}
	BR.C = doIncDec(ctx, BR.C, ID_INC);
   1612c:	e5d01002 	ldrb	r1, [r0, #2]
{
   16130:	e1a04000 	mov	r4, r0
	BR.C = doIncDec(ctx, BR.C, ID_INC);
   16134:	ebffff6b 	bl	15ee8 <doIncDec.constprop.33>
   16138:	e5c40002 	strb	r0, [r4, #2]
}
   1613c:	e8bd8010 	pop	{r4, pc}

00016140 <INC_D>:
{
   16140:	e92d4010 	push	{r4, lr}
	BR.D = doIncDec(ctx, BR.D, ID_INC);
   16144:	e5d01005 	ldrb	r1, [r0, #5]
{
   16148:	e1a04000 	mov	r4, r0
	BR.D = doIncDec(ctx, BR.D, ID_INC);
   1614c:	ebffff65 	bl	15ee8 <doIncDec.constprop.33>
   16150:	e5c40005 	strb	r0, [r4, #5]
}
   16154:	e8bd8010 	pop	{r4, pc}

00016158 <INC_E>:
{
   16158:	e92d4010 	push	{r4, lr}
	BR.E = doIncDec(ctx, BR.E, ID_INC);
   1615c:	e5d01004 	ldrb	r1, [r0, #4]
{
   16160:	e1a04000 	mov	r4, r0
	BR.E = doIncDec(ctx, BR.E, ID_INC);
   16164:	ebffff5f 	bl	15ee8 <doIncDec.constprop.33>
   16168:	e5c40004 	strb	r0, [r4, #4]
}
   1616c:	e8bd8010 	pop	{r4, pc}

00016170 <INC_H>:
{
   16170:	e92d4010 	push	{r4, lr}
	BR.H = doIncDec(ctx, BR.H, ID_INC);
   16174:	e5d01007 	ldrb	r1, [r0, #7]
{
   16178:	e1a04000 	mov	r4, r0
	BR.H = doIncDec(ctx, BR.H, ID_INC);
   1617c:	ebffff59 	bl	15ee8 <doIncDec.constprop.33>
   16180:	e5c40007 	strb	r0, [r4, #7]
}
   16184:	e8bd8010 	pop	{r4, pc}

00016188 <INC_IXh>:
{
   16188:	e92d4010 	push	{r4, lr}
	BR.IXh = doIncDec(ctx, BR.IXh, ID_INC);
   1618c:	e5d01009 	ldrb	r1, [r0, #9]
{
   16190:	e1a04000 	mov	r4, r0
	BR.IXh = doIncDec(ctx, BR.IXh, ID_INC);
   16194:	ebffff53 	bl	15ee8 <doIncDec.constprop.33>
   16198:	e5c40009 	strb	r0, [r4, #9]
}
   1619c:	e8bd8010 	pop	{r4, pc}

000161a0 <INC_IXl>:
{
   161a0:	e92d4010 	push	{r4, lr}
	BR.IXl = doIncDec(ctx, BR.IXl, ID_INC);
   161a4:	e5d01008 	ldrb	r1, [r0, #8]
{
   161a8:	e1a04000 	mov	r4, r0
	BR.IXl = doIncDec(ctx, BR.IXl, ID_INC);
   161ac:	ebffff4d 	bl	15ee8 <doIncDec.constprop.33>
   161b0:	e5c40008 	strb	r0, [r4, #8]
}
   161b4:	e8bd8010 	pop	{r4, pc}

000161b8 <INC_IYh>:
{
   161b8:	e92d4010 	push	{r4, lr}
	BR.IYh = doIncDec(ctx, BR.IYh, ID_INC);
   161bc:	e5d0100b 	ldrb	r1, [r0, #11]
{
   161c0:	e1a04000 	mov	r4, r0
	BR.IYh = doIncDec(ctx, BR.IYh, ID_INC);
   161c4:	ebffff47 	bl	15ee8 <doIncDec.constprop.33>
   161c8:	e5c4000b 	strb	r0, [r4, #11]
}
   161cc:	e8bd8010 	pop	{r4, pc}

000161d0 <INC_IYl>:
{
   161d0:	e92d4010 	push	{r4, lr}
	BR.IYl = doIncDec(ctx, BR.IYl, ID_INC);
   161d4:	e5d0100a 	ldrb	r1, [r0, #10]
{
   161d8:	e1a04000 	mov	r4, r0
	BR.IYl = doIncDec(ctx, BR.IYl, ID_INC);
   161dc:	ebffff41 	bl	15ee8 <doIncDec.constprop.33>
   161e0:	e5c4000a 	strb	r0, [r4, #10]
}
   161e4:	e8bd8010 	pop	{r4, pc}

000161e8 <INC_L>:
{
   161e8:	e92d4010 	push	{r4, lr}
	BR.L = doIncDec(ctx, BR.L, ID_INC);
   161ec:	e5d01006 	ldrb	r1, [r0, #6]
{
   161f0:	e1a04000 	mov	r4, r0
	BR.L = doIncDec(ctx, BR.L, ID_INC);
   161f4:	ebffff3b 	bl	15ee8 <doIncDec.constprop.33>
   161f8:	e5c40006 	strb	r0, [r4, #6]
}
   161fc:	e8bd8010 	pop	{r4, pc}

00016200 <doIncDec.constprop.34>:
        VALFLAG(F_PV, (val & 0x80) && !((val - 1) & 0x80));
   16200:	e3110080 	tst	r1, #128	; 0x80
   16204:	e5d03000 	ldrb	r3, [r0]
   16208:	e2411001 	sub	r1, r1, #1
   1620c:	1a00001c 	bne	16284 <doIncDec.constprop.34+0x84>
	BR.F &= ~flag;
   16210:	e20330fb 	and	r3, r3, #251	; 0xfb
        val--;
   16214:	e6ef1071 	uxtb	r1, r1
	if (val)
   16218:	e201200f 	and	r2, r1, #15
   1621c:	e352000f 	cmp	r2, #15
	BR.F |= flag;
   16220:	03833010 	orreq	r3, r3, #16
	BR.F &= ~flag;
   16224:	120330ef 	andne	r3, r3, #239	; 0xef
	if (val)
   16228:	e3110080 	tst	r1, #128	; 0x80
   1622c:	e5c03000 	strb	r3, [r0]
	BR.F |= flag;
   16230:	13833080 	orrne	r3, r3, #128	; 0x80
	if (val)
   16234:	1a00000b 	bne	16268 <doIncDec.constprop.34+0x68>
	BR.F &= ~flag;
   16238:	e203307f 	and	r3, r3, #127	; 0x7f
	if (val)
   1623c:	e3510000 	cmp	r1, #0
	BR.F &= ~flag;
   16240:	e5c03000 	strb	r3, [r0]
	BR.F |= flag;
   16244:	03832042 	orreq	r2, r3, #66	; 0x42
	if (val)
   16248:	1a000006 	bne	16268 <doIncDec.constprop.34+0x68>
	BR.F &= ~flag;
   1624c:	e20230df 	and	r3, r2, #223	; 0xdf
	if (val)
   16250:	e3110008 	tst	r1, #8
	BR.F |= flag;
   16254:	13833008 	orrne	r3, r3, #8
	BR.F &= ~flag;
   16258:	020330f7 	andeq	r3, r3, #247	; 0xf7
   1625c:	e5c03000 	strb	r3, [r0]
}
   16260:	e1a00001 	mov	r0, r1
   16264:	e12fff1e 	bx	lr
	BR.F &= ~flag;
   16268:	e20330bf 	and	r3, r3, #191	; 0xbf
	BR.F |= flag;
   1626c:	e3832002 	orr	r2, r3, #2
	if (val)
   16270:	e3110020 	tst	r1, #32
	BR.F |= flag;
   16274:	e5c02000 	strb	r2, [r0]
	if (val)
   16278:	0afffff3 	beq	1624c <doIncDec.constprop.34+0x4c>
	BR.F |= flag;
   1627c:	e3833022 	orr	r3, r3, #34	; 0x22
   16280:	eafffff2 	b	16250 <doIncDec.constprop.34+0x50>
        VALFLAG(F_PV, (val & 0x80) && !((val - 1) & 0x80));
   16284:	e3110080 	tst	r1, #128	; 0x80
	BR.F |= flag;
   16288:	03833004 	orreq	r3, r3, #4
        VALFLAG(F_PV, (val & 0x80) && !((val - 1) & 0x80));
   1628c:	0affffe0 	beq	16214 <doIncDec.constprop.34+0x14>
   16290:	eaffffde 	b	16210 <doIncDec.constprop.34+0x10>

00016294 <DEC_off_HL>:
	ctx->tstates += 3;
   16294:	e5903040 	ldr	r3, [r0, #64]	; 0x40
{
   16298:	e92d4070 	push	{r4, r5, r6, lr}
   1629c:	e2833004 	add	r3, r3, #4
   162a0:	e1a04000 	mov	r4, r0
	byte value = read8(ctx, WR.HL);
   162a4:	e1d010b6 	ldrh	r1, [r0, #6]
   162a8:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   162ac:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   162b0:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   162b4:	e12fff33 	blx	r3
	write8(ctx, WR.HL, doIncDec(ctx, value, ID_DEC));
   162b8:	e1a01000 	mov	r1, r0
   162bc:	e1a00004 	mov	r0, r4
   162c0:	e1d450b6 	ldrh	r5, [r4, #6]
   162c4:	ebffffcd 	bl	16200 <doIncDec.constprop.34>
	ctx->tstates += 3;
   162c8:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	ctx->memWrite(ctx->memParam, addr, val);	
   162cc:	e1a02000 	mov	r2, r0
	ctx->tstates += 3;
   162d0:	e2833003 	add	r3, r3, #3
   162d4:	e5843040 	str	r3, [r4, #64]	; 0x40
	ctx->memWrite(ctx->memParam, addr, val);	
   162d8:	e1a01005 	mov	r1, r5
   162dc:	e5943028 	ldr	r3, [r4, #40]	; 0x28
   162e0:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
}
   162e4:	e8bd4070 	pop	{r4, r5, r6, lr}
   162e8:	e12fff13 	bx	r3

000162ec <DEC_off_IX_d>:
	char off = read8(ctx, ctx->PC++);
   162ec:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 6;
   162f0:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	char off = read8(ctx, ctx->PC++);
   162f4:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
   162f8:	e2833009 	add	r3, r3, #9
{
   162fc:	e92d4070 	push	{r4, r5, r6, lr}
   16300:	e1a04000 	mov	r4, r0
	char off = read8(ctx, ctx->PC++);
   16304:	e1c021bc 	strh	r2, [r0, #28]
   16308:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   1630c:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   16310:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   16314:	e12fff33 	blx	r3
	ctx->tstates += 3;
   16318:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	byte value = read8(ctx, WR.IX + off);
   1631c:	e1d410b8 	ldrh	r1, [r4, #8]
   16320:	e6ff5070 	uxth	r5, r0
   16324:	e2833003 	add	r3, r3, #3
   16328:	e0851001 	add	r1, r5, r1
   1632c:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   16330:	e6ff1071 	uxth	r1, r1
   16334:	e5943024 	ldr	r3, [r4, #36]	; 0x24
   16338:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   1633c:	e12fff33 	blx	r3
	write8(ctx, WR.IX + off, doIncDec(ctx, value, ID_DEC));
   16340:	e1d430b8 	ldrh	r3, [r4, #8]
   16344:	e1a01000 	mov	r1, r0
   16348:	e1a00004 	mov	r0, r4
   1634c:	e0855003 	add	r5, r5, r3
   16350:	ebffffaa 	bl	16200 <doIncDec.constprop.34>
	ctx->tstates += 3;
   16354:	e5943040 	ldr	r3, [r4, #64]	; 0x40
   16358:	e6ff5075 	uxth	r5, r5
   1635c:	e2833003 	add	r3, r3, #3
   16360:	e5843040 	str	r3, [r4, #64]	; 0x40
	ctx->memWrite(ctx->memParam, addr, val);	
   16364:	e1a02000 	mov	r2, r0
   16368:	e1a01005 	mov	r1, r5
   1636c:	e5943028 	ldr	r3, [r4, #40]	; 0x28
   16370:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
}
   16374:	e8bd4070 	pop	{r4, r5, r6, lr}
   16378:	e12fff13 	bx	r3

0001637c <DEC_off_IY_d>:
	char off = read8(ctx, ctx->PC++);
   1637c:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 6;
   16380:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	char off = read8(ctx, ctx->PC++);
   16384:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
   16388:	e2833009 	add	r3, r3, #9
{
   1638c:	e92d4070 	push	{r4, r5, r6, lr}
   16390:	e1a04000 	mov	r4, r0
	char off = read8(ctx, ctx->PC++);
   16394:	e1c021bc 	strh	r2, [r0, #28]
   16398:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   1639c:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   163a0:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   163a4:	e12fff33 	blx	r3
	ctx->tstates += 3;
   163a8:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	byte value = read8(ctx, WR.IY + off);
   163ac:	e1d410ba 	ldrh	r1, [r4, #10]
   163b0:	e6ff5070 	uxth	r5, r0
   163b4:	e2833003 	add	r3, r3, #3
   163b8:	e0851001 	add	r1, r5, r1
   163bc:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   163c0:	e6ff1071 	uxth	r1, r1
   163c4:	e5943024 	ldr	r3, [r4, #36]	; 0x24
   163c8:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   163cc:	e12fff33 	blx	r3
	write8(ctx, WR.IY + off, doIncDec(ctx, value, ID_DEC));
   163d0:	e1d430ba 	ldrh	r3, [r4, #10]
   163d4:	e1a01000 	mov	r1, r0
   163d8:	e1a00004 	mov	r0, r4
   163dc:	e0855003 	add	r5, r5, r3
   163e0:	ebffff86 	bl	16200 <doIncDec.constprop.34>
	ctx->tstates += 3;
   163e4:	e5943040 	ldr	r3, [r4, #64]	; 0x40
   163e8:	e6ff5075 	uxth	r5, r5
   163ec:	e2833003 	add	r3, r3, #3
   163f0:	e5843040 	str	r3, [r4, #64]	; 0x40
	ctx->memWrite(ctx->memParam, addr, val);	
   163f4:	e1a02000 	mov	r2, r0
   163f8:	e1a01005 	mov	r1, r5
   163fc:	e5943028 	ldr	r3, [r4, #40]	; 0x28
   16400:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
}
   16404:	e8bd4070 	pop	{r4, r5, r6, lr}
   16408:	e12fff13 	bx	r3

0001640c <DEC_A>:
{
   1640c:	e92d4010 	push	{r4, lr}
	BR.A = doIncDec(ctx, BR.A, ID_DEC);
   16410:	e5d01001 	ldrb	r1, [r0, #1]
{
   16414:	e1a04000 	mov	r4, r0
	BR.A = doIncDec(ctx, BR.A, ID_DEC);
   16418:	ebffff78 	bl	16200 <doIncDec.constprop.34>
   1641c:	e5c40001 	strb	r0, [r4, #1]
}
   16420:	e8bd8010 	pop	{r4, pc}

00016424 <DEC_B>:
{
   16424:	e92d4010 	push	{r4, lr}
	BR.B = doIncDec(ctx, BR.B, ID_DEC);
   16428:	e5d01003 	ldrb	r1, [r0, #3]
{
   1642c:	e1a04000 	mov	r4, r0
	BR.B = doIncDec(ctx, BR.B, ID_DEC);
   16430:	ebffff72 	bl	16200 <doIncDec.constprop.34>
   16434:	e5c40003 	strb	r0, [r4, #3]
}
   16438:	e8bd8010 	pop	{r4, pc}

0001643c <DEC_C>:
{
   1643c:	e92d4010 	push	{r4, lr}
	BR.C = doIncDec(ctx, BR.C, ID_DEC);
   16440:	e5d01002 	ldrb	r1, [r0, #2]
{
   16444:	e1a04000 	mov	r4, r0
	BR.C = doIncDec(ctx, BR.C, ID_DEC);
   16448:	ebffff6c 	bl	16200 <doIncDec.constprop.34>
   1644c:	e5c40002 	strb	r0, [r4, #2]
}
   16450:	e8bd8010 	pop	{r4, pc}

00016454 <DEC_D>:
{
   16454:	e92d4010 	push	{r4, lr}
	BR.D = doIncDec(ctx, BR.D, ID_DEC);
   16458:	e5d01005 	ldrb	r1, [r0, #5]
{
   1645c:	e1a04000 	mov	r4, r0
	BR.D = doIncDec(ctx, BR.D, ID_DEC);
   16460:	ebffff66 	bl	16200 <doIncDec.constprop.34>
   16464:	e5c40005 	strb	r0, [r4, #5]
}
   16468:	e8bd8010 	pop	{r4, pc}

0001646c <DEC_E>:
{
   1646c:	e92d4010 	push	{r4, lr}
	BR.E = doIncDec(ctx, BR.E, ID_DEC);
   16470:	e5d01004 	ldrb	r1, [r0, #4]
{
   16474:	e1a04000 	mov	r4, r0
	BR.E = doIncDec(ctx, BR.E, ID_DEC);
   16478:	ebffff60 	bl	16200 <doIncDec.constprop.34>
   1647c:	e5c40004 	strb	r0, [r4, #4]
}
   16480:	e8bd8010 	pop	{r4, pc}

00016484 <DEC_H>:
{
   16484:	e92d4010 	push	{r4, lr}
	BR.H = doIncDec(ctx, BR.H, ID_DEC);
   16488:	e5d01007 	ldrb	r1, [r0, #7]
{
   1648c:	e1a04000 	mov	r4, r0
	BR.H = doIncDec(ctx, BR.H, ID_DEC);
   16490:	ebffff5a 	bl	16200 <doIncDec.constprop.34>
   16494:	e5c40007 	strb	r0, [r4, #7]
}
   16498:	e8bd8010 	pop	{r4, pc}

0001649c <DEC_IXh>:
{
   1649c:	e92d4010 	push	{r4, lr}
	BR.IXh = doIncDec(ctx, BR.IXh, ID_DEC);
   164a0:	e5d01009 	ldrb	r1, [r0, #9]
{
   164a4:	e1a04000 	mov	r4, r0
	BR.IXh = doIncDec(ctx, BR.IXh, ID_DEC);
   164a8:	ebffff54 	bl	16200 <doIncDec.constprop.34>
   164ac:	e5c40009 	strb	r0, [r4, #9]
}
   164b0:	e8bd8010 	pop	{r4, pc}

000164b4 <DEC_IXl>:
{
   164b4:	e92d4010 	push	{r4, lr}
	BR.IXl = doIncDec(ctx, BR.IXl, ID_DEC);
   164b8:	e5d01008 	ldrb	r1, [r0, #8]
{
   164bc:	e1a04000 	mov	r4, r0
	BR.IXl = doIncDec(ctx, BR.IXl, ID_DEC);
   164c0:	ebffff4e 	bl	16200 <doIncDec.constprop.34>
   164c4:	e5c40008 	strb	r0, [r4, #8]
}
   164c8:	e8bd8010 	pop	{r4, pc}

000164cc <DEC_IYh>:
{
   164cc:	e92d4010 	push	{r4, lr}
	BR.IYh = doIncDec(ctx, BR.IYh, ID_DEC);
   164d0:	e5d0100b 	ldrb	r1, [r0, #11]
{
   164d4:	e1a04000 	mov	r4, r0
	BR.IYh = doIncDec(ctx, BR.IYh, ID_DEC);
   164d8:	ebffff48 	bl	16200 <doIncDec.constprop.34>
   164dc:	e5c4000b 	strb	r0, [r4, #11]
}
   164e0:	e8bd8010 	pop	{r4, pc}

000164e4 <DEC_IYl>:
{
   164e4:	e92d4010 	push	{r4, lr}
	BR.IYl = doIncDec(ctx, BR.IYl, ID_DEC);
   164e8:	e5d0100a 	ldrb	r1, [r0, #10]
{
   164ec:	e1a04000 	mov	r4, r0
	BR.IYl = doIncDec(ctx, BR.IYl, ID_DEC);
   164f0:	ebffff42 	bl	16200 <doIncDec.constprop.34>
   164f4:	e5c4000a 	strb	r0, [r4, #10]
}
   164f8:	e8bd8010 	pop	{r4, pc}

000164fc <DEC_L>:
{
   164fc:	e92d4010 	push	{r4, lr}
	BR.L = doIncDec(ctx, BR.L, ID_DEC);
   16500:	e5d01006 	ldrb	r1, [r0, #6]
{
   16504:	e1a04000 	mov	r4, r0
	BR.L = doIncDec(ctx, BR.L, ID_DEC);
   16508:	ebffff3c 	bl	16200 <doIncDec.constprop.34>
   1650c:	e5c40006 	strb	r0, [r4, #6]
}
   16510:	e8bd8010 	pop	{r4, pc}

00016514 <IND>:
	ctx->tstates += 4;
   16514:	e5903040 	ldr	r3, [r0, #64]	; 0x40
{
   16518:	e92d4070 	push	{r4, r5, r6, lr}
   1651c:	e1a04000 	mov	r4, r0
   16520:	e2833005 	add	r3, r3, #5
	byte val = ioRead(ctx, WR.BC);
   16524:	e1d010b2 	ldrh	r1, [r0, #2]
   16528:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->ioRead(ctx->ioParam, addr);
   1652c:	e5903030 	ldr	r3, [r0, #48]	; 0x30
   16530:	e5900038 	ldr	r0, [r0, #56]	; 0x38
   16534:	e12fff33 	blx	r3
	ctx->tstates += 3;
   16538:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	ctx->memWrite(ctx->memParam, addr, val);	
   1653c:	e1a02000 	mov	r2, r0
	ctx->tstates += 3;
   16540:	e2833003 	add	r3, r3, #3
	return ctx->ioRead(ctx->ioParam, addr);
   16544:	e1a05000 	mov	r5, r0
	write8(ctx, WR.HL, val);
   16548:	e1d410b6 	ldrh	r1, [r4, #6]
	ctx->tstates += 3;
   1654c:	e5843040 	str	r3, [r4, #64]	; 0x40
	ctx->memWrite(ctx->memParam, addr, val);	
   16550:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   16554:	e5943028 	ldr	r3, [r4, #40]	; 0x28
   16558:	e12fff33 	blx	r3
	WR.HL--;
   1655c:	e1d430b6 	ldrh	r3, [r4, #6]
	BR.B = doIncDec(ctx, BR.B, ID_DEC);
   16560:	e5d41003 	ldrb	r1, [r4, #3]
	WR.HL--;
   16564:	e2433001 	sub	r3, r3, #1
   16568:	e1c430b6 	strh	r3, [r4, #6]
	BR.B = doIncDec(ctx, BR.B, ID_DEC);
   1656c:	e1a00004 	mov	r0, r4
   16570:	ebffff22 	bl	16200 <doIncDec.constprop.34>
	int flagval = val + ((BR.C - 1) & 0xff);
   16574:	e5d42002 	ldrb	r2, [r4, #2]
	BR.F |= flag;
   16578:	e5d43000 	ldrb	r3, [r4]
   1657c:	e2422001 	sub	r2, r2, #1
	if (val)
   16580:	e3150080 	tst	r5, #128	; 0x80
   16584:	e6e52072 	uxtab	r2, r5, r2
	BR.F |= flag;
   16588:	13833002 	orrne	r3, r3, #2
	BR.F &= ~flag;
   1658c:	020330fd 	andeq	r3, r3, #253	; 0xfd
	VALFLAG(F_PV, parityBit[(flagval & 7) ^ BR.B]);
   16590:	e59f1030 	ldr	r1, [pc, #48]	; 165c8 <IND+0xb4>
	if (val)
   16594:	e35200ff 	cmp	r2, #255	; 0xff
   16598:	e2022007 	and	r2, r2, #7
	BR.B = doIncDec(ctx, BR.B, ID_DEC);
   1659c:	e5c40003 	strb	r0, [r4, #3]
	VALFLAG(F_PV, parityBit[(flagval & 7) ^ BR.B]);
   165a0:	e0200002 	eor	r0, r0, r2
   165a4:	e7912100 	ldr	r2, [r1, r0, lsl #2]
   165a8:	e5c43000 	strb	r3, [r4]
	BR.F |= flag;
   165ac:	c3833011 	orrgt	r3, r3, #17
	BR.F &= ~flag;
   165b0:	d20330ee 	andle	r3, r3, #238	; 0xee
	if (val)
   165b4:	e3520000 	cmp	r2, #0
	BR.F |= flag;
   165b8:	13833004 	orrne	r3, r3, #4
	BR.F &= ~flag;
   165bc:	020330fb 	andeq	r3, r3, #251	; 0xfb
   165c0:	e5c43000 	strb	r3, [r4]
}
   165c4:	e8bd8070 	pop	{r4, r5, r6, pc}
   165c8:	0004f000 	.word	0x0004f000

000165cc <INI>:
	ctx->tstates += 4;
   165cc:	e5903040 	ldr	r3, [r0, #64]	; 0x40
{
   165d0:	e92d4070 	push	{r4, r5, r6, lr}
   165d4:	e1a04000 	mov	r4, r0
   165d8:	e2833005 	add	r3, r3, #5
	byte val = ioRead(ctx, WR.BC);
   165dc:	e1d010b2 	ldrh	r1, [r0, #2]
   165e0:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->ioRead(ctx->ioParam, addr);
   165e4:	e5903030 	ldr	r3, [r0, #48]	; 0x30
   165e8:	e5900038 	ldr	r0, [r0, #56]	; 0x38
   165ec:	e12fff33 	blx	r3
	ctx->tstates += 3;
   165f0:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	ctx->memWrite(ctx->memParam, addr, val);	
   165f4:	e1a02000 	mov	r2, r0
	ctx->tstates += 3;
   165f8:	e2833003 	add	r3, r3, #3
	return ctx->ioRead(ctx->ioParam, addr);
   165fc:	e1a05000 	mov	r5, r0
	write8(ctx, WR.HL, val);
   16600:	e1d410b6 	ldrh	r1, [r4, #6]
	ctx->tstates += 3;
   16604:	e5843040 	str	r3, [r4, #64]	; 0x40
	ctx->memWrite(ctx->memParam, addr, val);	
   16608:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   1660c:	e5943028 	ldr	r3, [r4, #40]	; 0x28
   16610:	e12fff33 	blx	r3
	WR.HL++;
   16614:	e1d430b6 	ldrh	r3, [r4, #6]
	BR.B = doIncDec(ctx, BR.B, ID_DEC);
   16618:	e5d41003 	ldrb	r1, [r4, #3]
	WR.HL++;
   1661c:	e2833001 	add	r3, r3, #1
   16620:	e1c430b6 	strh	r3, [r4, #6]
	BR.B = doIncDec(ctx, BR.B, ID_DEC);
   16624:	e1a00004 	mov	r0, r4
   16628:	ebfffef4 	bl	16200 <doIncDec.constprop.34>
	int flagval = val + ((BR.C + 1) & 0xff);
   1662c:	e5d42002 	ldrb	r2, [r4, #2]
	BR.F |= flag;
   16630:	e5d43000 	ldrb	r3, [r4]
   16634:	e2822001 	add	r2, r2, #1
	if (val)
   16638:	e3150080 	tst	r5, #128	; 0x80
   1663c:	e6e52072 	uxtab	r2, r5, r2
	BR.F |= flag;
   16640:	13833002 	orrne	r3, r3, #2
	BR.F &= ~flag;
   16644:	020330fd 	andeq	r3, r3, #253	; 0xfd
	VALFLAG(F_PV, parityBit[(flagval & 7) ^ BR.B]);
   16648:	e59f1030 	ldr	r1, [pc, #48]	; 16680 <INI+0xb4>
	if (val)
   1664c:	e35200ff 	cmp	r2, #255	; 0xff
   16650:	e2022007 	and	r2, r2, #7
	BR.B = doIncDec(ctx, BR.B, ID_DEC);
   16654:	e5c40003 	strb	r0, [r4, #3]
	VALFLAG(F_PV, parityBit[(flagval & 7) ^ BR.B]);
   16658:	e0200002 	eor	r0, r0, r2
   1665c:	e7912100 	ldr	r2, [r1, r0, lsl #2]
   16660:	e5c43000 	strb	r3, [r4]
	BR.F |= flag;
   16664:	c3833011 	orrgt	r3, r3, #17
	BR.F &= ~flag;
   16668:	d20330ee 	andle	r3, r3, #238	; 0xee
	if (val)
   1666c:	e3520000 	cmp	r2, #0
	BR.F |= flag;
   16670:	13833004 	orrne	r3, r3, #4
	BR.F &= ~flag;
   16674:	020330fb 	andeq	r3, r3, #251	; 0xfb
   16678:	e5c43000 	strb	r3, [r4]
}
   1667c:	e8bd8070 	pop	{r4, r5, r6, pc}
   16680:	0004f000 	.word	0x0004f000

00016684 <OUTD>:
	ctx->tstates += 3;
   16684:	e5903040 	ldr	r3, [r0, #64]	; 0x40
{
   16688:	e92d4070 	push	{r4, r5, r6, lr}
   1668c:	e2833004 	add	r3, r3, #4
   16690:	e1a04000 	mov	r4, r0
	byte value = read8(ctx, WR.HL);
   16694:	e1d010b6 	ldrh	r1, [r0, #6]
   16698:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   1669c:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   166a0:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   166a4:	e12fff33 	blx	r3
	BR.B = doIncDec(ctx, BR.B, 1);
   166a8:	e5d41003 	ldrb	r1, [r4, #3]
   166ac:	e1a05000 	mov	r5, r0
   166b0:	e1a00004 	mov	r0, r4
   166b4:	ebfffed1 	bl	16200 <doIncDec.constprop.34>
	ctx->tstates += 4;
   166b8:	e5943040 	ldr	r3, [r4, #64]	; 0x40
   166bc:	e5c40003 	strb	r0, [r4, #3]
   166c0:	e2833004 	add	r3, r3, #4
	ioWrite(ctx, WR.BC, value);
   166c4:	e1d410b2 	ldrh	r1, [r4, #2]
   166c8:	e5843040 	str	r3, [r4, #64]	; 0x40
	ctx->ioWrite(ctx->ioParam, addr, val);
   166cc:	e1a02005 	mov	r2, r5
   166d0:	e5943034 	ldr	r3, [r4, #52]	; 0x34
   166d4:	e5940038 	ldr	r0, [r4, #56]	; 0x38
   166d8:	e12fff33 	blx	r3
	WR.HL--;
   166dc:	e1d400b6 	ldrh	r0, [r4, #6]
	BR.F |= flag;
   166e0:	e5d43000 	ldrb	r3, [r4]
   166e4:	e2400001 	sub	r0, r0, #1
   166e8:	e6ff0070 	uxth	r0, r0
	if (val)
   166ec:	e3150080 	tst	r5, #128	; 0x80
	VALFLAG(F_PV, parityBit[(flag_value & 7) ^ BR.B]);
   166f0:	e5d42003 	ldrb	r2, [r4, #3]
	WR.HL--;
   166f4:	e1c400b6 	strh	r0, [r4, #6]
	int flag_value = value + BR.L;
   166f8:	e6e50070 	uxtab	r0, r5, r0
	BR.F |= flag;
   166fc:	13833002 	orrne	r3, r3, #2
	BR.F &= ~flag;
   16700:	020330fd 	andeq	r3, r3, #253	; 0xfd
	VALFLAG(F_PV, parityBit[(flag_value & 7) ^ BR.B]);
   16704:	e59f1044 	ldr	r1, [pc, #68]	; 16750 <OUTD+0xcc>
	if (val)
   16708:	e35000ff 	cmp	r0, #255	; 0xff
   1670c:	e2000007 	and	r0, r0, #7
   16710:	e0200002 	eor	r0, r0, r2
   16714:	e7911100 	ldr	r1, [r1, r0, lsl #2]
   16718:	e5c43000 	strb	r3, [r4]
	BR.F |= flag;
   1671c:	c3833011 	orrgt	r3, r3, #17
	BR.F &= ~flag;
   16720:	d20330ee 	andle	r3, r3, #238	; 0xee
	if (val)
   16724:	e3510000 	cmp	r1, #0
	BR.F |= flag;
   16728:	13833004 	orrne	r3, r3, #4
	BR.F &= ~flag;
   1672c:	020330fb 	andeq	r3, r3, #251	; 0xfb
	if (val)
   16730:	e3120020 	tst	r2, #32
	BR.F |= flag;
   16734:	13833020 	orrne	r3, r3, #32
	BR.F &= ~flag;
   16738:	020330df 	andeq	r3, r3, #223	; 0xdf
	if (val)
   1673c:	e3120008 	tst	r2, #8
	BR.F |= flag;
   16740:	13833008 	orrne	r3, r3, #8
	BR.F &= ~flag;
   16744:	020330f7 	andeq	r3, r3, #247	; 0xf7
   16748:	e5c43000 	strb	r3, [r4]
}
   1674c:	e8bd8070 	pop	{r4, r5, r6, pc}
   16750:	0004f000 	.word	0x0004f000

00016754 <OUTI>:
	ctx->tstates += 3;
   16754:	e5903040 	ldr	r3, [r0, #64]	; 0x40
{
   16758:	e92d4070 	push	{r4, r5, r6, lr}
   1675c:	e2833004 	add	r3, r3, #4
   16760:	e1a04000 	mov	r4, r0
	byte value = read8(ctx, WR.HL);
   16764:	e1d010b6 	ldrh	r1, [r0, #6]
   16768:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   1676c:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   16770:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   16774:	e12fff33 	blx	r3
	BR.B = doIncDec(ctx, BR.B, 1);
   16778:	e5d41003 	ldrb	r1, [r4, #3]
   1677c:	e1a05000 	mov	r5, r0
   16780:	e1a00004 	mov	r0, r4
   16784:	ebfffe9d 	bl	16200 <doIncDec.constprop.34>
	ctx->tstates += 4;
   16788:	e5943040 	ldr	r3, [r4, #64]	; 0x40
   1678c:	e5c40003 	strb	r0, [r4, #3]
   16790:	e2833004 	add	r3, r3, #4
	ioWrite(ctx, WR.BC, value);
   16794:	e1d410b2 	ldrh	r1, [r4, #2]
   16798:	e5843040 	str	r3, [r4, #64]	; 0x40
	ctx->ioWrite(ctx->ioParam, addr, val);
   1679c:	e1a02005 	mov	r2, r5
   167a0:	e5943034 	ldr	r3, [r4, #52]	; 0x34
   167a4:	e5940038 	ldr	r0, [r4, #56]	; 0x38
   167a8:	e12fff33 	blx	r3
	WR.HL++;
   167ac:	e1d400b6 	ldrh	r0, [r4, #6]
	BR.F |= flag;
   167b0:	e5d43000 	ldrb	r3, [r4]
   167b4:	e2800001 	add	r0, r0, #1
   167b8:	e6ff0070 	uxth	r0, r0
	if (val)
   167bc:	e3150080 	tst	r5, #128	; 0x80
	VALFLAG(F_PV, parityBit[(flag_value & 7) ^ BR.B]);
   167c0:	e5d42003 	ldrb	r2, [r4, #3]
	WR.HL++;
   167c4:	e1c400b6 	strh	r0, [r4, #6]
	int flag_value = value + BR.L;
   167c8:	e6e50070 	uxtab	r0, r5, r0
	BR.F |= flag;
   167cc:	13833002 	orrne	r3, r3, #2
	BR.F &= ~flag;
   167d0:	020330fd 	andeq	r3, r3, #253	; 0xfd
	VALFLAG(F_PV, parityBit[(flag_value & 7) ^ BR.B]);
   167d4:	e59f1044 	ldr	r1, [pc, #68]	; 16820 <OUTI+0xcc>
	if (val)
   167d8:	e35000ff 	cmp	r0, #255	; 0xff
   167dc:	e2000007 	and	r0, r0, #7
   167e0:	e0200002 	eor	r0, r0, r2
   167e4:	e7911100 	ldr	r1, [r1, r0, lsl #2]
   167e8:	e5c43000 	strb	r3, [r4]
	BR.F |= flag;
   167ec:	c3833011 	orrgt	r3, r3, #17
	BR.F &= ~flag;
   167f0:	d20330ee 	andle	r3, r3, #238	; 0xee
	if (val)
   167f4:	e3510000 	cmp	r1, #0
	BR.F |= flag;
   167f8:	13833004 	orrne	r3, r3, #4
	BR.F &= ~flag;
   167fc:	020330fb 	andeq	r3, r3, #251	; 0xfb
	if (val)
   16800:	e3120020 	tst	r2, #32
	BR.F |= flag;
   16804:	13833020 	orrne	r3, r3, #32
	BR.F &= ~flag;
   16808:	020330df 	andeq	r3, r3, #223	; 0xdf
	if (val)
   1680c:	e3120008 	tst	r2, #8
	BR.F |= flag;
   16810:	13833008 	orrne	r3, r3, #8
	BR.F &= ~flag;
   16814:	020330f7 	andeq	r3, r3, #247	; 0xf7
   16818:	e5c43000 	strb	r3, [r4]
}
   1681c:	e8bd8070 	pop	{r4, r5, r6, pc}
   16820:	0004f000 	.word	0x0004f000

00016824 <doAddWord.constprop.43>:
	if (val)
   16824:	e59f3058 	ldr	r3, [pc, #88]	; 16884 <doAddWord.constprop.43+0x60>
		sum += a2;
   16828:	e082c001 	add	ip, r2, r1
	if (val)
   1682c:	e0022003 	and	r2, r2, r3
   16830:	e0011003 	and	r1, r1, r3
   16834:	e0811002 	add	r1, r1, r2
   16838:	e5d03000 	ldrb	r3, [r0]
   1683c:	e3110a01 	tst	r1, #4096	; 0x1000
	BR.F |= flag;
   16840:	13833010 	orrne	r3, r3, #16
	BR.F &= ~flag;
   16844:	020330ef 	andeq	r3, r3, #239	; 0xef
	if (val)
   16848:	e31c0801 	tst	ip, #65536	; 0x10000
	BR.F |= flag;
   1684c:	13833001 	orrne	r3, r3, #1
	BR.F &= ~flag;
   16850:	020330fe 	andeq	r3, r3, #254	; 0xfe
	adjustFlags(ctx, sum >> 8);
   16854:	e1a0244c 	asr	r2, ip, #8
   16858:	e6ef2072 	uxtb	r2, r2
	BR.F &= ~flag;
   1685c:	e6af3073 	sxtb	r3, r3
	BR.F |= flag;
   16860:	e20330dd 	and	r3, r3, #221	; 0xdd
	if (val)
   16864:	e3120020 	tst	r2, #32
	BR.F |= flag;
   16868:	13833020 	orrne	r3, r3, #32
	if (val)
   1686c:	e3120008 	tst	r2, #8
	BR.F |= flag;
   16870:	13833008 	orrne	r3, r3, #8
	BR.F &= ~flag;
   16874:	020330f5 	andeq	r3, r3, #245	; 0xf5
   16878:	e5c03000 	strb	r3, [r0]
}
   1687c:	e6ff007c 	uxth	r0, ip
   16880:	e12fff1e 	bx	lr
   16884:	00000fff 	.word	0x00000fff

00016888 <ADD_HL_BC>:
	ctx->tstates += 7;
   16888:	e5903040 	ldr	r3, [r0, #64]	; 0x40
{
   1688c:	e92d4010 	push	{r4, lr}
	ctx->tstates += 7;
   16890:	e2833007 	add	r3, r3, #7
	WR.HL = doAddWord(ctx, WR.HL, WR.BC, F1_ADD, F2_ADD);
   16894:	e1d020b2 	ldrh	r2, [r0, #2]
	ctx->tstates += 7;
   16898:	e5803040 	str	r3, [r0, #64]	; 0x40
	WR.HL = doAddWord(ctx, WR.HL, WR.BC, F1_ADD, F2_ADD);
   1689c:	e1d010b6 	ldrh	r1, [r0, #6]
{
   168a0:	e1a04000 	mov	r4, r0
	WR.HL = doAddWord(ctx, WR.HL, WR.BC, F1_ADD, F2_ADD);
   168a4:	ebffffde 	bl	16824 <doAddWord.constprop.43>
   168a8:	e1c400b6 	strh	r0, [r4, #6]
}
   168ac:	e8bd8010 	pop	{r4, pc}

000168b0 <ADD_HL_DE>:
	ctx->tstates += 7;
   168b0:	e5903040 	ldr	r3, [r0, #64]	; 0x40
{
   168b4:	e92d4010 	push	{r4, lr}
	ctx->tstates += 7;
   168b8:	e2833007 	add	r3, r3, #7
	WR.HL = doAddWord(ctx, WR.HL, WR.DE, F1_ADD, F2_ADD);
   168bc:	e1d020b4 	ldrh	r2, [r0, #4]
	ctx->tstates += 7;
   168c0:	e5803040 	str	r3, [r0, #64]	; 0x40
	WR.HL = doAddWord(ctx, WR.HL, WR.DE, F1_ADD, F2_ADD);
   168c4:	e1d010b6 	ldrh	r1, [r0, #6]
{
   168c8:	e1a04000 	mov	r4, r0
	WR.HL = doAddWord(ctx, WR.HL, WR.DE, F1_ADD, F2_ADD);
   168cc:	ebffffd4 	bl	16824 <doAddWord.constprop.43>
   168d0:	e1c400b6 	strh	r0, [r4, #6]
}
   168d4:	e8bd8010 	pop	{r4, pc}

000168d8 <ADD_HL_HL>:
	ctx->tstates += 7;
   168d8:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	WR.HL = doAddWord(ctx, WR.HL, WR.HL, F1_ADD, F2_ADD);
   168dc:	e1d020b6 	ldrh	r2, [r0, #6]
	ctx->tstates += 7;
   168e0:	e2833007 	add	r3, r3, #7
{
   168e4:	e92d4010 	push	{r4, lr}
	WR.HL = doAddWord(ctx, WR.HL, WR.HL, F1_ADD, F2_ADD);
   168e8:	e1a01002 	mov	r1, r2
	ctx->tstates += 7;
   168ec:	e5803040 	str	r3, [r0, #64]	; 0x40
{
   168f0:	e1a04000 	mov	r4, r0
	WR.HL = doAddWord(ctx, WR.HL, WR.HL, F1_ADD, F2_ADD);
   168f4:	ebffffca 	bl	16824 <doAddWord.constprop.43>
   168f8:	e1c400b6 	strh	r0, [r4, #6]
}
   168fc:	e8bd8010 	pop	{r4, pc}

00016900 <ADD_HL_SP>:
	ctx->tstates += 7;
   16900:	e5903040 	ldr	r3, [r0, #64]	; 0x40
{
   16904:	e92d4010 	push	{r4, lr}
	ctx->tstates += 7;
   16908:	e2833007 	add	r3, r3, #7
	WR.HL = doAddWord(ctx, WR.HL, WR.SP, F1_ADD, F2_ADD);
   1690c:	e1d020bc 	ldrh	r2, [r0, #12]
	ctx->tstates += 7;
   16910:	e5803040 	str	r3, [r0, #64]	; 0x40
	WR.HL = doAddWord(ctx, WR.HL, WR.SP, F1_ADD, F2_ADD);
   16914:	e1d010b6 	ldrh	r1, [r0, #6]
{
   16918:	e1a04000 	mov	r4, r0
	WR.HL = doAddWord(ctx, WR.HL, WR.SP, F1_ADD, F2_ADD);
   1691c:	ebffffc0 	bl	16824 <doAddWord.constprop.43>
   16920:	e1c400b6 	strh	r0, [r4, #6]
}
   16924:	e8bd8010 	pop	{r4, pc}

00016928 <ADD_IX_BC>:
	ctx->tstates += 7;
   16928:	e5903040 	ldr	r3, [r0, #64]	; 0x40
{
   1692c:	e92d4010 	push	{r4, lr}
	ctx->tstates += 7;
   16930:	e2833007 	add	r3, r3, #7
	WR.IX = doAddWord(ctx, WR.IX, WR.BC, 0, 0);
   16934:	e1d020b2 	ldrh	r2, [r0, #2]
	ctx->tstates += 7;
   16938:	e5803040 	str	r3, [r0, #64]	; 0x40
	WR.IX = doAddWord(ctx, WR.IX, WR.BC, 0, 0);
   1693c:	e1d010b8 	ldrh	r1, [r0, #8]
{
   16940:	e1a04000 	mov	r4, r0
	WR.IX = doAddWord(ctx, WR.IX, WR.BC, 0, 0);
   16944:	ebffffb6 	bl	16824 <doAddWord.constprop.43>
   16948:	e1c400b8 	strh	r0, [r4, #8]
}
   1694c:	e8bd8010 	pop	{r4, pc}

00016950 <ADD_IX_DE>:
	ctx->tstates += 7;
   16950:	e5903040 	ldr	r3, [r0, #64]	; 0x40
{
   16954:	e92d4010 	push	{r4, lr}
	ctx->tstates += 7;
   16958:	e2833007 	add	r3, r3, #7
	WR.IX = doAddWord(ctx, WR.IX, WR.DE, 0, 0);
   1695c:	e1d020b4 	ldrh	r2, [r0, #4]
	ctx->tstates += 7;
   16960:	e5803040 	str	r3, [r0, #64]	; 0x40
	WR.IX = doAddWord(ctx, WR.IX, WR.DE, 0, 0);
   16964:	e1d010b8 	ldrh	r1, [r0, #8]
{
   16968:	e1a04000 	mov	r4, r0
	WR.IX = doAddWord(ctx, WR.IX, WR.DE, 0, 0);
   1696c:	ebffffac 	bl	16824 <doAddWord.constprop.43>
   16970:	e1c400b8 	strh	r0, [r4, #8]
}
   16974:	e8bd8010 	pop	{r4, pc}

00016978 <ADD_IX_IX>:
	ctx->tstates += 7;
   16978:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	WR.IX = doAddWord(ctx, WR.IX, WR.IX, 0, 0);
   1697c:	e1d020b8 	ldrh	r2, [r0, #8]
	ctx->tstates += 7;
   16980:	e2833007 	add	r3, r3, #7
{
   16984:	e92d4010 	push	{r4, lr}
	WR.IX = doAddWord(ctx, WR.IX, WR.IX, 0, 0);
   16988:	e1a01002 	mov	r1, r2
	ctx->tstates += 7;
   1698c:	e5803040 	str	r3, [r0, #64]	; 0x40
{
   16990:	e1a04000 	mov	r4, r0
	WR.IX = doAddWord(ctx, WR.IX, WR.IX, 0, 0);
   16994:	ebffffa2 	bl	16824 <doAddWord.constprop.43>
   16998:	e1c400b8 	strh	r0, [r4, #8]
}
   1699c:	e8bd8010 	pop	{r4, pc}

000169a0 <ADD_IX_SP>:
	ctx->tstates += 7;
   169a0:	e5903040 	ldr	r3, [r0, #64]	; 0x40
{
   169a4:	e92d4010 	push	{r4, lr}
	ctx->tstates += 7;
   169a8:	e2833007 	add	r3, r3, #7
	WR.IX = doAddWord(ctx, WR.IX, WR.SP, 0, 0);
   169ac:	e1d020bc 	ldrh	r2, [r0, #12]
	ctx->tstates += 7;
   169b0:	e5803040 	str	r3, [r0, #64]	; 0x40
	WR.IX = doAddWord(ctx, WR.IX, WR.SP, 0, 0);
   169b4:	e1d010b8 	ldrh	r1, [r0, #8]
{
   169b8:	e1a04000 	mov	r4, r0
	WR.IX = doAddWord(ctx, WR.IX, WR.SP, 0, 0);
   169bc:	ebffff98 	bl	16824 <doAddWord.constprop.43>
   169c0:	e1c400b8 	strh	r0, [r4, #8]
}
   169c4:	e8bd8010 	pop	{r4, pc}

000169c8 <ADD_IY_BC>:
	ctx->tstates += 7;
   169c8:	e5903040 	ldr	r3, [r0, #64]	; 0x40
{
   169cc:	e92d4010 	push	{r4, lr}
	ctx->tstates += 7;
   169d0:	e2833007 	add	r3, r3, #7
	WR.IY = doAddWord(ctx, WR.IY, WR.BC, 0, 0);
   169d4:	e1d020b2 	ldrh	r2, [r0, #2]
	ctx->tstates += 7;
   169d8:	e5803040 	str	r3, [r0, #64]	; 0x40
	WR.IY = doAddWord(ctx, WR.IY, WR.BC, 0, 0);
   169dc:	e1d010ba 	ldrh	r1, [r0, #10]
{
   169e0:	e1a04000 	mov	r4, r0
	WR.IY = doAddWord(ctx, WR.IY, WR.BC, 0, 0);
   169e4:	ebffff8e 	bl	16824 <doAddWord.constprop.43>
   169e8:	e1c400ba 	strh	r0, [r4, #10]
}
   169ec:	e8bd8010 	pop	{r4, pc}

000169f0 <ADD_IY_DE>:
	ctx->tstates += 7;
   169f0:	e5903040 	ldr	r3, [r0, #64]	; 0x40
{
   169f4:	e92d4010 	push	{r4, lr}
	ctx->tstates += 7;
   169f8:	e2833007 	add	r3, r3, #7
	WR.IY = doAddWord(ctx, WR.IY, WR.DE, 0, 0);
   169fc:	e1d020b4 	ldrh	r2, [r0, #4]
	ctx->tstates += 7;
   16a00:	e5803040 	str	r3, [r0, #64]	; 0x40
	WR.IY = doAddWord(ctx, WR.IY, WR.DE, 0, 0);
   16a04:	e1d010ba 	ldrh	r1, [r0, #10]
{
   16a08:	e1a04000 	mov	r4, r0
	WR.IY = doAddWord(ctx, WR.IY, WR.DE, 0, 0);
   16a0c:	ebffff84 	bl	16824 <doAddWord.constprop.43>
   16a10:	e1c400ba 	strh	r0, [r4, #10]
}
   16a14:	e8bd8010 	pop	{r4, pc}

00016a18 <ADD_IY_IY>:
	ctx->tstates += 7;
   16a18:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	WR.IY = doAddWord(ctx, WR.IY, WR.IY, 0, 0);
   16a1c:	e1d020ba 	ldrh	r2, [r0, #10]
	ctx->tstates += 7;
   16a20:	e2833007 	add	r3, r3, #7
{
   16a24:	e92d4010 	push	{r4, lr}
	WR.IY = doAddWord(ctx, WR.IY, WR.IY, 0, 0);
   16a28:	e1a01002 	mov	r1, r2
	ctx->tstates += 7;
   16a2c:	e5803040 	str	r3, [r0, #64]	; 0x40
{
   16a30:	e1a04000 	mov	r4, r0
	WR.IY = doAddWord(ctx, WR.IY, WR.IY, 0, 0);
   16a34:	ebffff7a 	bl	16824 <doAddWord.constprop.43>
   16a38:	e1c400ba 	strh	r0, [r4, #10]
}
   16a3c:	e8bd8010 	pop	{r4, pc}

00016a40 <ADD_IY_SP>:
	ctx->tstates += 7;
   16a40:	e5903040 	ldr	r3, [r0, #64]	; 0x40
{
   16a44:	e92d4010 	push	{r4, lr}
	ctx->tstates += 7;
   16a48:	e2833007 	add	r3, r3, #7
	WR.IY = doAddWord(ctx, WR.IY, WR.SP, 0, 0);
   16a4c:	e1d020bc 	ldrh	r2, [r0, #12]
	ctx->tstates += 7;
   16a50:	e5803040 	str	r3, [r0, #64]	; 0x40
	WR.IY = doAddWord(ctx, WR.IY, WR.SP, 0, 0);
   16a54:	e1d010ba 	ldrh	r1, [r0, #10]
{
   16a58:	e1a04000 	mov	r4, r0
	WR.IY = doAddWord(ctx, WR.IY, WR.SP, 0, 0);
   16a5c:	ebffff70 	bl	16824 <doAddWord.constprop.43>
   16a60:	e1c400ba 	strh	r0, [r4, #10]
}
   16a64:	e8bd8010 	pop	{r4, pc}

00016a68 <ADC_HL_SP>:
	ctx->tstates += 7;
   16a68:	e5902040 	ldr	r2, [r0, #64]	; 0x40
   16a6c:	e5d03000 	ldrb	r3, [r0]
   16a70:	e2822007 	add	r2, r2, #7
   16a74:	e5802040 	str	r2, [r0, #64]	; 0x40
	WR.HL = doAddWord(ctx, WR.HL, WR.SP, F1_ADC, F2_ADC);
   16a78:	e1d020bc 	ldrh	r2, [r0, #12]
	if(withCarry && GETFLAG(F_C))
   16a7c:	e3130001 	tst	r3, #1
		a2++;
   16a80:	12822001 	addne	r2, r2, #1
   16a84:	e1d0c0b6 	ldrh	ip, [r0, #6]
{
   16a88:	e92d4010 	push	{r4, lr}
	if (val)
   16a8c:	e59fe0a4 	ldr	lr, [pc, #164]	; 16b38 <ADC_HL_SP+0xd0>
		a2++;
   16a90:	16ff2072 	uxthne	r2, r2
	if (val)
   16a94:	e00c400e 	and	r4, ip, lr
   16a98:	e00ee002 	and	lr, lr, r2
   16a9c:	e084e00e 	add	lr, r4, lr
   16aa0:	e31e0a01 	tst	lr, #4096	; 0x1000
		int minuend_sign = a1 & 0x8000;
   16aa4:	e59fe090 	ldr	lr, [pc, #144]	; 16b3c <ADC_HL_SP+0xd4>
		sum += a2;
   16aa8:	e082100c 	add	r1, r2, ip
		int minuend_sign = a1 & 0x8000;
   16aac:	e00cc00e 	and	ip, ip, lr
		int subtrahend_sign = a2 & 0x8000;
   16ab0:	e00ee002 	and	lr, lr, r2
	if (val)
   16ab4:	e04e200c 	sub	r2, lr, ip
   16ab8:	e16f2f12 	clz	r2, r2
	BR.F |= flag;
   16abc:	13833010 	orrne	r3, r3, #16
	BR.F &= ~flag;
   16ac0:	020330ef 	andeq	r3, r3, #239	; 0xef
		int result_sign = sum & 0x8000;
   16ac4:	e2014902 	and	r4, r1, #32768	; 0x8000
	if (val)
   16ac8:	e3110801 	tst	r1, #65536	; 0x10000
	BR.F |= flag;
   16acc:	13833001 	orrne	r3, r3, #1
	BR.F &= ~flag;
   16ad0:	020330fe 	andeq	r3, r3, #254	; 0xfe
	if (val)
   16ad4:	e15c0004 	cmp	ip, r4
   16ad8:	e1a022a2 	lsr	r2, r2, #5
   16adc:	03a02000 	moveq	r2, #0
   16ae0:	e3520000 	cmp	r2, #0
	BR.F |= flag;
   16ae4:	13833004 	orrne	r3, r3, #4
	BR.F &= ~flag;
   16ae8:	020330fb 	andeq	r3, r3, #251	; 0xfb
		VALFLAG(F_Z, (sum & 0xFFFF) == 0);
   16aec:	e6ff2071 	uxth	r2, r1
	if (val)
   16af0:	e3540000 	cmp	r4, #0
	BR.F |= flag;
   16af4:	13833080 	orrne	r3, r3, #128	; 0x80
	BR.F &= ~flag;
   16af8:	0203307f 	andeq	r3, r3, #127	; 0x7f
	if (val)
   16afc:	e3520000 	cmp	r2, #0
	BR.F |= flag;
   16b00:	03833040 	orreq	r3, r3, #64	; 0x40
	BR.F &= ~flag;
   16b04:	120330bf 	andne	r3, r3, #191	; 0xbf
	adjustFlags(ctx, sum >> 8);
   16b08:	e1a02441 	asr	r2, r1, #8
   16b0c:	e6ef2072 	uxtb	r2, r2
	BR.F &= ~flag;
   16b10:	e6af3073 	sxtb	r3, r3
	BR.F |= flag;
   16b14:	e20330dd 	and	r3, r3, #221	; 0xdd
	if (val)
   16b18:	e3120020 	tst	r2, #32
	BR.F |= flag;
   16b1c:	13833020 	orrne	r3, r3, #32
	if (val)
   16b20:	e3120008 	tst	r2, #8
	BR.F |= flag;
   16b24:	13833008 	orrne	r3, r3, #8
	BR.F &= ~flag;
   16b28:	020330f5 	andeq	r3, r3, #245	; 0xf5
   16b2c:	e5c03000 	strb	r3, [r0]
	WR.HL = doAddWord(ctx, WR.HL, WR.SP, F1_ADC, F2_ADC);
   16b30:	e1c010b6 	strh	r1, [r0, #6]
}
   16b34:	e8bd8010 	pop	{r4, pc}
   16b38:	00000fff 	.word	0x00000fff
   16b3c:	ffff8000 	.word	0xffff8000

00016b40 <SBC_HL_BC>:
	ctx->tstates += 7;
   16b40:	e5902040 	ldr	r2, [r0, #64]	; 0x40
   16b44:	e5d03000 	ldrb	r3, [r0]
   16b48:	e2822007 	add	r2, r2, #7
   16b4c:	e5802040 	str	r2, [r0, #64]	; 0x40
	WR.HL = doAddWord(ctx, WR.HL, WR.BC, F1_SBC, F2_SBC);
   16b50:	e1d020b2 	ldrh	r2, [r0, #2]
	if(withCarry && GETFLAG(F_C))
   16b54:	e3130001 	tst	r3, #1
		a2++;
   16b58:	12822001 	addne	r2, r2, #1
   16b5c:	e1d010b6 	ldrh	r1, [r0, #6]
{
   16b60:	e92d4010 	push	{r4, lr}
	if (val)
   16b64:	e59fe094 	ldr	lr, [pc, #148]	; 16c00 <SBC_HL_BC+0xc0>
		a2++;
   16b68:	16ff2072 	uxthne	r2, r2
	if (val)
   16b6c:	e001400e 	and	r4, r1, lr
   16b70:	e00ee002 	and	lr, lr, r2
   16b74:	e044e00e 	sub	lr, r4, lr
   16b78:	e31e0a01 	tst	lr, #4096	; 0x1000
		int minuend_sign = a1 & 0x8000;
   16b7c:	e59fe080 	ldr	lr, [pc, #128]	; 16c04 <SBC_HL_BC+0xc4>
		sum -= a2;
   16b80:	e041c002 	sub	ip, r1, r2
	BR.F &= ~flag;
   16b84:	020330ef 	andeq	r3, r3, #239	; 0xef
	BR.F |= flag;
   16b88:	13833010 	orrne	r3, r3, #16
		int result_sign = sum & 0x8000;
   16b8c:	e20c4902 	and	r4, ip, #32768	; 0x8000
	if (val)
   16b90:	e31c0801 	tst	ip, #65536	; 0x10000
		int subtrahend_sign = a2 & 0x8000;
   16b94:	e002200e 	and	r2, r2, lr
		int minuend_sign = a1 & 0x8000;
   16b98:	e001100e 	and	r1, r1, lr
	BR.F &= ~flag;
   16b9c:	020330fe 	andeq	r3, r3, #254	; 0xfe
	BR.F |= flag;
   16ba0:	13833001 	orrne	r3, r3, #1
	if (val)
   16ba4:	e1520001 	cmp	r2, r1
   16ba8:	11510004 	cmpne	r1, r4
		VALFLAG(F_Z, (sum & 0xFFFF) == 0);
   16bac:	e6ff207c 	uxth	r2, ip
	BR.F |= flag;
   16bb0:	13833004 	orrne	r3, r3, #4
	BR.F &= ~flag;
   16bb4:	020330fb 	andeq	r3, r3, #251	; 0xfb
	if (val)
   16bb8:	e3540000 	cmp	r4, #0
	BR.F |= flag;
   16bbc:	13833080 	orrne	r3, r3, #128	; 0x80
	BR.F &= ~flag;
   16bc0:	0203307f 	andeq	r3, r3, #127	; 0x7f
	if (val)
   16bc4:	e3520000 	cmp	r2, #0
	adjustFlags(ctx, sum >> 8);
   16bc8:	e1a0244c 	asr	r2, ip, #8
   16bcc:	e6ef2072 	uxtb	r2, r2
	BR.F |= flag;
   16bd0:	03833040 	orreq	r3, r3, #64	; 0x40
	BR.F &= ~flag;
   16bd4:	120330bf 	andne	r3, r3, #191	; 0xbf
	if (val)
   16bd8:	e3120020 	tst	r2, #32
	BR.F |= flag;
   16bdc:	03833002 	orreq	r3, r3, #2
   16be0:	13833022 	orrne	r3, r3, #34	; 0x22
	BR.F &= ~flag;
   16be4:	020330df 	andeq	r3, r3, #223	; 0xdf
	if (val)
   16be8:	e3120008 	tst	r2, #8
	BR.F |= flag;
   16bec:	13833008 	orrne	r3, r3, #8
	BR.F &= ~flag;
   16bf0:	020330f7 	andeq	r3, r3, #247	; 0xf7
   16bf4:	e5c03000 	strb	r3, [r0]
	WR.HL = doAddWord(ctx, WR.HL, WR.BC, F1_SBC, F2_SBC);
   16bf8:	e1c0c0b6 	strh	ip, [r0, #6]
}
   16bfc:	e8bd8010 	pop	{r4, pc}
   16c00:	00000fff 	.word	0x00000fff
   16c04:	ffff8000 	.word	0xffff8000

00016c08 <doArithmetic.constprop.46>:
static byte doArithmetic (Z80Context* ctx, byte value, int withCarry, int isSub)
   16c08:	e1a0c000 	mov	ip, r0
   16c0c:	e92d4010 	push	{r4, lr}
   16c10:	e5d0e001 	ldrb	lr, [r0, #1]
	if (isSub)
   16c14:	e3520000 	cmp	r2, #0
   16c18:	e20e000f 	and	r0, lr, #15
   16c1c:	e5dc3000 	ldrb	r3, [ip]
   16c20:	e201400f 	and	r4, r1, #15
   16c24:	0a000026 	beq	16cc4 <doArithmetic.constprop.46+0xbc>
	if (val)
   16c28:	e0400004 	sub	r0, r0, r4
   16c2c:	e3100010 	tst	r0, #16
	BR.F |= flag;
   16c30:	03833002 	orreq	r3, r3, #2
   16c34:	13833012 	orrne	r3, r3, #18
	BR.F &= ~flag;
   16c38:	020330ef 	andeq	r3, r3, #239	; 0xef
		res = BR.A - value;
   16c3c:	e04e0001 	sub	r0, lr, r1
		if (withCarry && GETFLAG(F_C))
   16c40:	e3130001 	tst	r3, #1
		res = BR.A - value;
   16c44:	e6ff0070 	uxth	r0, r0
			res--;
   16c48:	12400001 	subne	r0, r0, #1
   16c4c:	16ff0070 	uxthne	r0, r0
	if (val)
   16c50:	e2104080 	ands	r4, r0, #128	; 0x80
	BR.F |= flag;
   16c54:	13833080 	orrne	r3, r3, #128	; 0x80
	BR.F &= ~flag;
   16c58:	0203307f 	andeq	r3, r3, #127	; 0x7f
	if (val)
   16c5c:	e3100c01 	tst	r0, #256	; 0x100
	BR.F |= flag;
   16c60:	13833001 	orrne	r3, r3, #1
	BR.F &= ~flag;
   16c64:	020330fe 	andeq	r3, r3, #254	; 0xfe
   16c68:	e20ee080 	and	lr, lr, #128	; 0x80
	if (val)
   16c6c:	e21000ff 	ands	r0, r0, #255	; 0xff
	BR.F |= flag;
   16c70:	03833040 	orreq	r3, r3, #64	; 0x40
	BR.F &= ~flag;
   16c74:	120330bf 	andne	r3, r3, #191	; 0xbf
   16c78:	e05e4004 	subs	r4, lr, r4
   16c7c:	13a04001 	movne	r4, #1
	if(isSub)
   16c80:	e3520000 	cmp	r2, #0
	int subtrahend_sign = value & 0x80;
   16c84:	e2011080 	and	r1, r1, #128	; 0x80
	if(isSub)
   16c88:	0a000016 	beq	16ce8 <doArithmetic.constprop.46+0xe0>
		overflow = minuend_sign != subtrahend_sign && result_sign != minuend_sign;
   16c8c:	e15e0001 	cmp	lr, r1
   16c90:	03a0e000 	moveq	lr, #0
   16c94:	1204e001 	andne	lr, r4, #1
	if (val)
   16c98:	e35e0000 	cmp	lr, #0
	BR.F |= flag;
   16c9c:	13833004 	orrne	r3, r3, #4
	BR.F &= ~flag;
   16ca0:	020330fb 	andeq	r3, r3, #251	; 0xfb
	if (val)
   16ca4:	e3100020 	tst	r0, #32
	BR.F |= flag;
   16ca8:	13833020 	orrne	r3, r3, #32
	BR.F &= ~flag;
   16cac:	020330df 	andeq	r3, r3, #223	; 0xdf
	if (val)
   16cb0:	e3100008 	tst	r0, #8
	BR.F |= flag;
   16cb4:	13833008 	orrne	r3, r3, #8
	BR.F &= ~flag;
   16cb8:	020330f7 	andeq	r3, r3, #247	; 0xf7
   16cbc:	e5cc3000 	strb	r3, [ip]
}
   16cc0:	e8bd8010 	pop	{r4, pc}
	if (val)
   16cc4:	e0800004 	add	r0, r0, r4
	BR.F &= ~flag;
   16cc8:	e6af3073 	sxtb	r3, r3
	if (val)
   16ccc:	e3100010 	tst	r0, #16
	BR.F |= flag;
   16cd0:	e20330ed 	and	r3, r3, #237	; 0xed
   16cd4:	13833010 	orrne	r3, r3, #16
		if (withCarry && GETFLAG(F_C))
   16cd8:	e3130001 	tst	r3, #1
		res = BR.A + value;
   16cdc:	e08e0001 	add	r0, lr, r1
			res++;
   16ce0:	12800001 	addne	r0, r0, #1
   16ce4:	eaffffd9 	b	16c50 <doArithmetic.constprop.46+0x48>
		overflow = minuend_sign == subtrahend_sign && result_sign != minuend_sign;
   16ce8:	e15e0001 	cmp	lr, r1
   16cec:	13a0e000 	movne	lr, #0
   16cf0:	0204e001 	andeq	lr, r4, #1
   16cf4:	eaffffe7 	b	16c98 <doArithmetic.constprop.46+0x90>

00016cf8 <ADC_A_off_HL>:
	ctx->tstates += 3;
   16cf8:	e5903040 	ldr	r3, [r0, #64]	; 0x40
{
   16cfc:	e92d4010 	push	{r4, lr}
   16d00:	e2833003 	add	r3, r3, #3
   16d04:	e1a04000 	mov	r4, r0
	BR.A = doArithmetic(ctx, read8(ctx, WR.HL), F1_ADC, F2_ADC);
   16d08:	e1d010b6 	ldrh	r1, [r0, #6]
   16d0c:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   16d10:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   16d14:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   16d18:	e12fff33 	blx	r3
   16d1c:	e3a02000 	mov	r2, #0
   16d20:	e1a01000 	mov	r1, r0
   16d24:	e1a00004 	mov	r0, r4
   16d28:	ebffffb6 	bl	16c08 <doArithmetic.constprop.46>
   16d2c:	e5c40001 	strb	r0, [r4, #1]
}
   16d30:	e8bd8010 	pop	{r4, pc}

00016d34 <ADC_A_off_IX_d>:
	char displacement = read8(ctx, ctx->PC++);
   16d34:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 5;
   16d38:	e5903040 	ldr	r3, [r0, #64]	; 0x40
{
   16d3c:	e92d4010 	push	{r4, lr}
	char displacement = read8(ctx, ctx->PC++);
   16d40:	e2812001 	add	r2, r1, #1
{
   16d44:	e1a04000 	mov	r4, r0
	ctx->tstates += 3;
   16d48:	e2833008 	add	r3, r3, #8
	char displacement = read8(ctx, ctx->PC++);
   16d4c:	e1c021bc 	strh	r2, [r0, #28]
   16d50:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   16d54:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   16d58:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   16d5c:	e12fff33 	blx	r3
	ctx->tstates += 3;
   16d60:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	BR.A = doArithmetic(ctx, read8(ctx, WR.IX + displacement), F1_ADC, F2_ADC);
   16d64:	e1d410b8 	ldrh	r1, [r4, #8]
   16d68:	e2833003 	add	r3, r3, #3
   16d6c:	e0811000 	add	r1, r1, r0
	return ctx->memRead(ctx->memParam, addr);	
   16d70:	e6ff1071 	uxth	r1, r1
	ctx->tstates += 3;
   16d74:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   16d78:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   16d7c:	e5943024 	ldr	r3, [r4, #36]	; 0x24
   16d80:	e12fff33 	blx	r3
   16d84:	e3a02000 	mov	r2, #0
   16d88:	e1a01000 	mov	r1, r0
   16d8c:	e1a00004 	mov	r0, r4
   16d90:	ebffff9c 	bl	16c08 <doArithmetic.constprop.46>
   16d94:	e5c40001 	strb	r0, [r4, #1]
}
   16d98:	e8bd8010 	pop	{r4, pc}

00016d9c <ADC_A_off_IY_d>:
	char displacement = read8(ctx, ctx->PC++);
   16d9c:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 5;
   16da0:	e5903040 	ldr	r3, [r0, #64]	; 0x40
{
   16da4:	e92d4010 	push	{r4, lr}
	char displacement = read8(ctx, ctx->PC++);
   16da8:	e2812001 	add	r2, r1, #1
{
   16dac:	e1a04000 	mov	r4, r0
	ctx->tstates += 3;
   16db0:	e2833008 	add	r3, r3, #8
	char displacement = read8(ctx, ctx->PC++);
   16db4:	e1c021bc 	strh	r2, [r0, #28]
   16db8:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   16dbc:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   16dc0:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   16dc4:	e12fff33 	blx	r3
	ctx->tstates += 3;
   16dc8:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	BR.A = doArithmetic(ctx, read8(ctx, WR.IY + displacement), F1_ADC, F2_ADC);
   16dcc:	e1d410ba 	ldrh	r1, [r4, #10]
   16dd0:	e2833003 	add	r3, r3, #3
   16dd4:	e0811000 	add	r1, r1, r0
	return ctx->memRead(ctx->memParam, addr);	
   16dd8:	e6ff1071 	uxth	r1, r1
	ctx->tstates += 3;
   16ddc:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   16de0:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   16de4:	e5943024 	ldr	r3, [r4, #36]	; 0x24
   16de8:	e12fff33 	blx	r3
   16dec:	e3a02000 	mov	r2, #0
   16df0:	e1a01000 	mov	r1, r0
   16df4:	e1a00004 	mov	r0, r4
   16df8:	ebffff82 	bl	16c08 <doArithmetic.constprop.46>
   16dfc:	e5c40001 	strb	r0, [r4, #1]
}
   16e00:	e8bd8010 	pop	{r4, pc}

00016e04 <ADC_A_A>:
{
   16e04:	e92d4010 	push	{r4, lr}
	BR.A = doArithmetic(ctx, BR.A, F1_ADC, F2_ADC);
   16e08:	e3a02000 	mov	r2, #0
   16e0c:	e5d01001 	ldrb	r1, [r0, #1]
{
   16e10:	e1a04000 	mov	r4, r0
	BR.A = doArithmetic(ctx, BR.A, F1_ADC, F2_ADC);
   16e14:	ebffff7b 	bl	16c08 <doArithmetic.constprop.46>
   16e18:	e5c40001 	strb	r0, [r4, #1]
}
   16e1c:	e8bd8010 	pop	{r4, pc}

00016e20 <ADC_A_B>:
{
   16e20:	e92d4010 	push	{r4, lr}
	BR.A = doArithmetic(ctx, BR.B, F1_ADC, F2_ADC);
   16e24:	e3a02000 	mov	r2, #0
   16e28:	e5d01003 	ldrb	r1, [r0, #3]
{
   16e2c:	e1a04000 	mov	r4, r0
	BR.A = doArithmetic(ctx, BR.B, F1_ADC, F2_ADC);
   16e30:	ebffff74 	bl	16c08 <doArithmetic.constprop.46>
   16e34:	e5c40001 	strb	r0, [r4, #1]
}
   16e38:	e8bd8010 	pop	{r4, pc}

00016e3c <ADC_A_C>:
{
   16e3c:	e92d4010 	push	{r4, lr}
	BR.A = doArithmetic(ctx, BR.C, F1_ADC, F2_ADC);
   16e40:	e3a02000 	mov	r2, #0
   16e44:	e5d01002 	ldrb	r1, [r0, #2]
{
   16e48:	e1a04000 	mov	r4, r0
	BR.A = doArithmetic(ctx, BR.C, F1_ADC, F2_ADC);
   16e4c:	ebffff6d 	bl	16c08 <doArithmetic.constprop.46>
   16e50:	e5c40001 	strb	r0, [r4, #1]
}
   16e54:	e8bd8010 	pop	{r4, pc}

00016e58 <ADC_A_D>:
{
   16e58:	e92d4010 	push	{r4, lr}
	BR.A = doArithmetic(ctx, BR.D, F1_ADC, F2_ADC);
   16e5c:	e3a02000 	mov	r2, #0
   16e60:	e5d01005 	ldrb	r1, [r0, #5]
{
   16e64:	e1a04000 	mov	r4, r0
	BR.A = doArithmetic(ctx, BR.D, F1_ADC, F2_ADC);
   16e68:	ebffff66 	bl	16c08 <doArithmetic.constprop.46>
   16e6c:	e5c40001 	strb	r0, [r4, #1]
}
   16e70:	e8bd8010 	pop	{r4, pc}

00016e74 <ADC_A_E>:
{
   16e74:	e92d4010 	push	{r4, lr}
	BR.A = doArithmetic(ctx, BR.E, F1_ADC, F2_ADC);
   16e78:	e3a02000 	mov	r2, #0
   16e7c:	e5d01004 	ldrb	r1, [r0, #4]
{
   16e80:	e1a04000 	mov	r4, r0
	BR.A = doArithmetic(ctx, BR.E, F1_ADC, F2_ADC);
   16e84:	ebffff5f 	bl	16c08 <doArithmetic.constprop.46>
   16e88:	e5c40001 	strb	r0, [r4, #1]
}
   16e8c:	e8bd8010 	pop	{r4, pc}

00016e90 <ADC_A_H>:
{
   16e90:	e92d4010 	push	{r4, lr}
	BR.A = doArithmetic(ctx, BR.H, F1_ADC, F2_ADC);
   16e94:	e3a02000 	mov	r2, #0
   16e98:	e5d01007 	ldrb	r1, [r0, #7]
{
   16e9c:	e1a04000 	mov	r4, r0
	BR.A = doArithmetic(ctx, BR.H, F1_ADC, F2_ADC);
   16ea0:	ebffff58 	bl	16c08 <doArithmetic.constprop.46>
   16ea4:	e5c40001 	strb	r0, [r4, #1]
}
   16ea8:	e8bd8010 	pop	{r4, pc}

00016eac <ADC_A_IXh>:
{
   16eac:	e92d4010 	push	{r4, lr}
	BR.A = doArithmetic(ctx, BR.IXh, F1_ADC, F2_ADC);
   16eb0:	e3a02000 	mov	r2, #0
   16eb4:	e5d01009 	ldrb	r1, [r0, #9]
{
   16eb8:	e1a04000 	mov	r4, r0
	BR.A = doArithmetic(ctx, BR.IXh, F1_ADC, F2_ADC);
   16ebc:	ebffff51 	bl	16c08 <doArithmetic.constprop.46>
   16ec0:	e5c40001 	strb	r0, [r4, #1]
}
   16ec4:	e8bd8010 	pop	{r4, pc}

00016ec8 <ADC_A_IXl>:
{
   16ec8:	e92d4010 	push	{r4, lr}
	BR.A = doArithmetic(ctx, BR.IXl, F1_ADC, F2_ADC);
   16ecc:	e3a02000 	mov	r2, #0
   16ed0:	e5d01008 	ldrb	r1, [r0, #8]
{
   16ed4:	e1a04000 	mov	r4, r0
	BR.A = doArithmetic(ctx, BR.IXl, F1_ADC, F2_ADC);
   16ed8:	ebffff4a 	bl	16c08 <doArithmetic.constprop.46>
   16edc:	e5c40001 	strb	r0, [r4, #1]
}
   16ee0:	e8bd8010 	pop	{r4, pc}

00016ee4 <ADC_A_IYh>:
{
   16ee4:	e92d4010 	push	{r4, lr}
	BR.A = doArithmetic(ctx, BR.IYh, F1_ADC, F2_ADC);
   16ee8:	e3a02000 	mov	r2, #0
   16eec:	e5d0100b 	ldrb	r1, [r0, #11]
{
   16ef0:	e1a04000 	mov	r4, r0
	BR.A = doArithmetic(ctx, BR.IYh, F1_ADC, F2_ADC);
   16ef4:	ebffff43 	bl	16c08 <doArithmetic.constprop.46>
   16ef8:	e5c40001 	strb	r0, [r4, #1]
}
   16efc:	e8bd8010 	pop	{r4, pc}

00016f00 <ADC_A_IYl>:
{
   16f00:	e92d4010 	push	{r4, lr}
	BR.A = doArithmetic(ctx, BR.IYl, F1_ADC, F2_ADC);
   16f04:	e3a02000 	mov	r2, #0
   16f08:	e5d0100a 	ldrb	r1, [r0, #10]
{
   16f0c:	e1a04000 	mov	r4, r0
	BR.A = doArithmetic(ctx, BR.IYl, F1_ADC, F2_ADC);
   16f10:	ebffff3c 	bl	16c08 <doArithmetic.constprop.46>
   16f14:	e5c40001 	strb	r0, [r4, #1]
}
   16f18:	e8bd8010 	pop	{r4, pc}

00016f1c <ADC_A_L>:
{
   16f1c:	e92d4010 	push	{r4, lr}
	BR.A = doArithmetic(ctx, BR.L, F1_ADC, F2_ADC);
   16f20:	e3a02000 	mov	r2, #0
   16f24:	e5d01006 	ldrb	r1, [r0, #6]
{
   16f28:	e1a04000 	mov	r4, r0
	BR.A = doArithmetic(ctx, BR.L, F1_ADC, F2_ADC);
   16f2c:	ebffff35 	bl	16c08 <doArithmetic.constprop.46>
   16f30:	e5c40001 	strb	r0, [r4, #1]
}
   16f34:	e8bd8010 	pop	{r4, pc}

00016f38 <ADC_A_n>:
	BR.A = doArithmetic(ctx, read8(ctx, ctx->PC++), F1_ADC, F2_ADC);
   16f38:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 3;
   16f3c:	e5903040 	ldr	r3, [r0, #64]	; 0x40
   16f40:	e2812001 	add	r2, r1, #1
   16f44:	e2833003 	add	r3, r3, #3
{
   16f48:	e92d4010 	push	{r4, lr}
   16f4c:	e1a04000 	mov	r4, r0
	BR.A = doArithmetic(ctx, read8(ctx, ctx->PC++), F1_ADC, F2_ADC);
   16f50:	e1c021bc 	strh	r2, [r0, #28]
   16f54:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   16f58:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   16f5c:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   16f60:	e12fff33 	blx	r3
   16f64:	e3a02000 	mov	r2, #0
   16f68:	e1a01000 	mov	r1, r0
   16f6c:	e1a00004 	mov	r0, r4
   16f70:	ebffff24 	bl	16c08 <doArithmetic.constprop.46>
   16f74:	e5c40001 	strb	r0, [r4, #1]
}
   16f78:	e8bd8010 	pop	{r4, pc}

00016f7c <SBC_A_off_HL>:
	ctx->tstates += 3;
   16f7c:	e5903040 	ldr	r3, [r0, #64]	; 0x40
{
   16f80:	e92d4010 	push	{r4, lr}
   16f84:	e2833003 	add	r3, r3, #3
   16f88:	e1a04000 	mov	r4, r0
	BR.A = doArithmetic(ctx, read8(ctx, WR.HL), F1_SBC, F2_SBC);
   16f8c:	e1d010b6 	ldrh	r1, [r0, #6]
   16f90:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   16f94:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   16f98:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   16f9c:	e12fff33 	blx	r3
   16fa0:	e3a02001 	mov	r2, #1
   16fa4:	e1a01000 	mov	r1, r0
   16fa8:	e1a00004 	mov	r0, r4
   16fac:	ebffff15 	bl	16c08 <doArithmetic.constprop.46>
   16fb0:	e5c40001 	strb	r0, [r4, #1]
}
   16fb4:	e8bd8010 	pop	{r4, pc}

00016fb8 <SBC_A_off_IX_d>:
	char displacement = read8(ctx, ctx->PC++);
   16fb8:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 5;
   16fbc:	e5903040 	ldr	r3, [r0, #64]	; 0x40
{
   16fc0:	e92d4010 	push	{r4, lr}
	char displacement = read8(ctx, ctx->PC++);
   16fc4:	e2812001 	add	r2, r1, #1
{
   16fc8:	e1a04000 	mov	r4, r0
	ctx->tstates += 3;
   16fcc:	e2833008 	add	r3, r3, #8
	char displacement = read8(ctx, ctx->PC++);
   16fd0:	e1c021bc 	strh	r2, [r0, #28]
   16fd4:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   16fd8:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   16fdc:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   16fe0:	e12fff33 	blx	r3
	ctx->tstates += 3;
   16fe4:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	BR.A = doArithmetic(ctx, read8(ctx, WR.IX + displacement), F1_SBC, F2_SBC);
   16fe8:	e1d410b8 	ldrh	r1, [r4, #8]
   16fec:	e2833003 	add	r3, r3, #3
   16ff0:	e0811000 	add	r1, r1, r0
	return ctx->memRead(ctx->memParam, addr);	
   16ff4:	e6ff1071 	uxth	r1, r1
	ctx->tstates += 3;
   16ff8:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   16ffc:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   17000:	e5943024 	ldr	r3, [r4, #36]	; 0x24
   17004:	e12fff33 	blx	r3
   17008:	e3a02001 	mov	r2, #1
   1700c:	e1a01000 	mov	r1, r0
   17010:	e1a00004 	mov	r0, r4
   17014:	ebfffefb 	bl	16c08 <doArithmetic.constprop.46>
   17018:	e5c40001 	strb	r0, [r4, #1]
}
   1701c:	e8bd8010 	pop	{r4, pc}

00017020 <SBC_A_off_IY_d>:
	char displacement = read8(ctx, ctx->PC++);
   17020:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 5;
   17024:	e5903040 	ldr	r3, [r0, #64]	; 0x40
{
   17028:	e92d4010 	push	{r4, lr}
	char displacement = read8(ctx, ctx->PC++);
   1702c:	e2812001 	add	r2, r1, #1
{
   17030:	e1a04000 	mov	r4, r0
	ctx->tstates += 3;
   17034:	e2833008 	add	r3, r3, #8
	char displacement = read8(ctx, ctx->PC++);
   17038:	e1c021bc 	strh	r2, [r0, #28]
   1703c:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   17040:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   17044:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   17048:	e12fff33 	blx	r3
	ctx->tstates += 3;
   1704c:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	BR.A = doArithmetic(ctx, read8(ctx, WR.IY + displacement), F1_SBC, F2_SBC);
   17050:	e1d410ba 	ldrh	r1, [r4, #10]
   17054:	e2833003 	add	r3, r3, #3
   17058:	e0811000 	add	r1, r1, r0
	return ctx->memRead(ctx->memParam, addr);	
   1705c:	e6ff1071 	uxth	r1, r1
	ctx->tstates += 3;
   17060:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   17064:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   17068:	e5943024 	ldr	r3, [r4, #36]	; 0x24
   1706c:	e12fff33 	blx	r3
   17070:	e3a02001 	mov	r2, #1
   17074:	e1a01000 	mov	r1, r0
   17078:	e1a00004 	mov	r0, r4
   1707c:	ebfffee1 	bl	16c08 <doArithmetic.constprop.46>
   17080:	e5c40001 	strb	r0, [r4, #1]
}
   17084:	e8bd8010 	pop	{r4, pc}

00017088 <SBC_A_A>:
{
   17088:	e92d4010 	push	{r4, lr}
	BR.A = doArithmetic(ctx, BR.A, F1_SBC, F2_SBC);
   1708c:	e3a02001 	mov	r2, #1
   17090:	e5d01001 	ldrb	r1, [r0, #1]
{
   17094:	e1a04000 	mov	r4, r0
	BR.A = doArithmetic(ctx, BR.A, F1_SBC, F2_SBC);
   17098:	ebfffeda 	bl	16c08 <doArithmetic.constprop.46>
   1709c:	e5c40001 	strb	r0, [r4, #1]
}
   170a0:	e8bd8010 	pop	{r4, pc}

000170a4 <SBC_A_B>:
{
   170a4:	e92d4010 	push	{r4, lr}
	BR.A = doArithmetic(ctx, BR.B, F1_SBC, F2_SBC);
   170a8:	e3a02001 	mov	r2, #1
   170ac:	e5d01003 	ldrb	r1, [r0, #3]
{
   170b0:	e1a04000 	mov	r4, r0
	BR.A = doArithmetic(ctx, BR.B, F1_SBC, F2_SBC);
   170b4:	ebfffed3 	bl	16c08 <doArithmetic.constprop.46>
   170b8:	e5c40001 	strb	r0, [r4, #1]
}
   170bc:	e8bd8010 	pop	{r4, pc}

000170c0 <SBC_A_C>:
{
   170c0:	e92d4010 	push	{r4, lr}
	BR.A = doArithmetic(ctx, BR.C, F1_SBC, F2_SBC);
   170c4:	e3a02001 	mov	r2, #1
   170c8:	e5d01002 	ldrb	r1, [r0, #2]
{
   170cc:	e1a04000 	mov	r4, r0
	BR.A = doArithmetic(ctx, BR.C, F1_SBC, F2_SBC);
   170d0:	ebfffecc 	bl	16c08 <doArithmetic.constprop.46>
   170d4:	e5c40001 	strb	r0, [r4, #1]
}
   170d8:	e8bd8010 	pop	{r4, pc}

000170dc <SBC_A_D>:
{
   170dc:	e92d4010 	push	{r4, lr}
	BR.A = doArithmetic(ctx, BR.D, F1_SBC, F2_SBC);
   170e0:	e3a02001 	mov	r2, #1
   170e4:	e5d01005 	ldrb	r1, [r0, #5]
{
   170e8:	e1a04000 	mov	r4, r0
	BR.A = doArithmetic(ctx, BR.D, F1_SBC, F2_SBC);
   170ec:	ebfffec5 	bl	16c08 <doArithmetic.constprop.46>
   170f0:	e5c40001 	strb	r0, [r4, #1]
}
   170f4:	e8bd8010 	pop	{r4, pc}

000170f8 <SBC_A_E>:
{
   170f8:	e92d4010 	push	{r4, lr}
	BR.A = doArithmetic(ctx, BR.E, F1_SBC, F2_SBC);
   170fc:	e3a02001 	mov	r2, #1
   17100:	e5d01004 	ldrb	r1, [r0, #4]
{
   17104:	e1a04000 	mov	r4, r0
	BR.A = doArithmetic(ctx, BR.E, F1_SBC, F2_SBC);
   17108:	ebfffebe 	bl	16c08 <doArithmetic.constprop.46>
   1710c:	e5c40001 	strb	r0, [r4, #1]
}
   17110:	e8bd8010 	pop	{r4, pc}

00017114 <SBC_A_H>:
{
   17114:	e92d4010 	push	{r4, lr}
	BR.A = doArithmetic(ctx, BR.H, F1_SBC, F2_SBC);
   17118:	e3a02001 	mov	r2, #1
   1711c:	e5d01007 	ldrb	r1, [r0, #7]
{
   17120:	e1a04000 	mov	r4, r0
	BR.A = doArithmetic(ctx, BR.H, F1_SBC, F2_SBC);
   17124:	ebfffeb7 	bl	16c08 <doArithmetic.constprop.46>
   17128:	e5c40001 	strb	r0, [r4, #1]
}
   1712c:	e8bd8010 	pop	{r4, pc}

00017130 <SBC_A_IXh>:
{
   17130:	e92d4010 	push	{r4, lr}
	BR.A = doArithmetic(ctx, BR.IXh, F1_SBC, F2_SBC);
   17134:	e3a02001 	mov	r2, #1
   17138:	e5d01009 	ldrb	r1, [r0, #9]
{
   1713c:	e1a04000 	mov	r4, r0
	BR.A = doArithmetic(ctx, BR.IXh, F1_SBC, F2_SBC);
   17140:	ebfffeb0 	bl	16c08 <doArithmetic.constprop.46>
   17144:	e5c40001 	strb	r0, [r4, #1]
}
   17148:	e8bd8010 	pop	{r4, pc}

0001714c <SBC_A_IXl>:
{
   1714c:	e92d4010 	push	{r4, lr}
	BR.A = doArithmetic(ctx, BR.IXl, F1_SBC, F2_SBC);
   17150:	e3a02001 	mov	r2, #1
   17154:	e5d01008 	ldrb	r1, [r0, #8]
{
   17158:	e1a04000 	mov	r4, r0
	BR.A = doArithmetic(ctx, BR.IXl, F1_SBC, F2_SBC);
   1715c:	ebfffea9 	bl	16c08 <doArithmetic.constprop.46>
   17160:	e5c40001 	strb	r0, [r4, #1]
}
   17164:	e8bd8010 	pop	{r4, pc}

00017168 <SBC_A_IYh>:
{
   17168:	e92d4010 	push	{r4, lr}
	BR.A = doArithmetic(ctx, BR.IYh, F1_SBC, F2_SBC);
   1716c:	e3a02001 	mov	r2, #1
   17170:	e5d0100b 	ldrb	r1, [r0, #11]
{
   17174:	e1a04000 	mov	r4, r0
	BR.A = doArithmetic(ctx, BR.IYh, F1_SBC, F2_SBC);
   17178:	ebfffea2 	bl	16c08 <doArithmetic.constprop.46>
   1717c:	e5c40001 	strb	r0, [r4, #1]
}
   17180:	e8bd8010 	pop	{r4, pc}

00017184 <SBC_A_IYl>:
{
   17184:	e92d4010 	push	{r4, lr}
	BR.A = doArithmetic(ctx, BR.IYl, F1_SBC, F2_SBC);
   17188:	e3a02001 	mov	r2, #1
   1718c:	e5d0100a 	ldrb	r1, [r0, #10]
{
   17190:	e1a04000 	mov	r4, r0
	BR.A = doArithmetic(ctx, BR.IYl, F1_SBC, F2_SBC);
   17194:	ebfffe9b 	bl	16c08 <doArithmetic.constprop.46>
   17198:	e5c40001 	strb	r0, [r4, #1]
}
   1719c:	e8bd8010 	pop	{r4, pc}

000171a0 <SBC_A_L>:
{
   171a0:	e92d4010 	push	{r4, lr}
	BR.A = doArithmetic(ctx, BR.L, F1_SBC, F2_SBC);
   171a4:	e3a02001 	mov	r2, #1
   171a8:	e5d01006 	ldrb	r1, [r0, #6]
{
   171ac:	e1a04000 	mov	r4, r0
	BR.A = doArithmetic(ctx, BR.L, F1_SBC, F2_SBC);
   171b0:	ebfffe94 	bl	16c08 <doArithmetic.constprop.46>
   171b4:	e5c40001 	strb	r0, [r4, #1]
}
   171b8:	e8bd8010 	pop	{r4, pc}

000171bc <SBC_A_n>:
	BR.A = doArithmetic(ctx, read8(ctx, ctx->PC++), F1_SBC, F2_SBC);
   171bc:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 3;
   171c0:	e5903040 	ldr	r3, [r0, #64]	; 0x40
   171c4:	e2812001 	add	r2, r1, #1
   171c8:	e2833003 	add	r3, r3, #3
{
   171cc:	e92d4010 	push	{r4, lr}
   171d0:	e1a04000 	mov	r4, r0
	BR.A = doArithmetic(ctx, read8(ctx, ctx->PC++), F1_SBC, F2_SBC);
   171d4:	e1c021bc 	strh	r2, [r0, #28]
   171d8:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   171dc:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   171e0:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   171e4:	e12fff33 	blx	r3
   171e8:	e3a02001 	mov	r2, #1
   171ec:	e1a01000 	mov	r1, r0
   171f0:	e1a00004 	mov	r0, r4
   171f4:	ebfffe83 	bl	16c08 <doArithmetic.constprop.46>
   171f8:	e5c40001 	strb	r0, [r4, #1]
}
   171fc:	e8bd8010 	pop	{r4, pc}

00017200 <doArithmetic.constprop.47>:
static byte doArithmetic (Z80Context* ctx, byte value, int withCarry, int isSub)
   17200:	e92d4010 	push	{r4, lr}
   17204:	e5d0e001 	ldrb	lr, [r0, #1]
	if (isSub)
   17208:	e3520000 	cmp	r2, #0
static byte doArithmetic (Z80Context* ctx, byte value, int withCarry, int isSub)
   1720c:	e1a0c000 	mov	ip, r0
   17210:	e5d03000 	ldrb	r3, [r0]
   17214:	e20e400f 	and	r4, lr, #15
   17218:	e201000f 	and	r0, r1, #15
	if (isSub)
   1721c:	0a000023 	beq	172b0 <doArithmetic.constprop.47+0xb0>
	if (val)
   17220:	e0440000 	sub	r0, r4, r0
   17224:	e3100010 	tst	r0, #16
	BR.F |= flag;
   17228:	03833002 	orreq	r3, r3, #2
		res = BR.A - value;
   1722c:	e04e0001 	sub	r0, lr, r1
	BR.F |= flag;
   17230:	13833012 	orrne	r3, r3, #18
	BR.F &= ~flag;
   17234:	020330ef 	andeq	r3, r3, #239	; 0xef
		res = BR.A - value;
   17238:	e6ff0070 	uxth	r0, r0
	if (val)
   1723c:	e2104080 	ands	r4, r0, #128	; 0x80
	BR.F |= flag;
   17240:	13833080 	orrne	r3, r3, #128	; 0x80
	BR.F &= ~flag;
   17244:	0203307f 	andeq	r3, r3, #127	; 0x7f
	if (val)
   17248:	e3100c01 	tst	r0, #256	; 0x100
	BR.F |= flag;
   1724c:	13833001 	orrne	r3, r3, #1
	BR.F &= ~flag;
   17250:	020330fe 	andeq	r3, r3, #254	; 0xfe
   17254:	e20ee080 	and	lr, lr, #128	; 0x80
	if (val)
   17258:	e21000ff 	ands	r0, r0, #255	; 0xff
	BR.F |= flag;
   1725c:	03833040 	orreq	r3, r3, #64	; 0x40
	BR.F &= ~flag;
   17260:	120330bf 	andne	r3, r3, #191	; 0xbf
   17264:	e05e4004 	subs	r4, lr, r4
   17268:	13a04001 	movne	r4, #1
	if(isSub)
   1726c:	e3520000 	cmp	r2, #0
	int subtrahend_sign = value & 0x80;
   17270:	e2011080 	and	r1, r1, #128	; 0x80
	if(isSub)
   17274:	0a000014 	beq	172cc <doArithmetic.constprop.47+0xcc>
		overflow = minuend_sign != subtrahend_sign && result_sign != minuend_sign;
   17278:	e15e0001 	cmp	lr, r1
   1727c:	03a0e000 	moveq	lr, #0
   17280:	1204e001 	andne	lr, r4, #1
	if (val)
   17284:	e35e0000 	cmp	lr, #0
	BR.F |= flag;
   17288:	13833004 	orrne	r3, r3, #4
	BR.F &= ~flag;
   1728c:	020330fb 	andeq	r3, r3, #251	; 0xfb
	if (val)
   17290:	e3100020 	tst	r0, #32
	BR.F |= flag;
   17294:	13833020 	orrne	r3, r3, #32
	BR.F &= ~flag;
   17298:	020330df 	andeq	r3, r3, #223	; 0xdf
	if (val)
   1729c:	e3100008 	tst	r0, #8
	BR.F |= flag;
   172a0:	13833008 	orrne	r3, r3, #8
	BR.F &= ~flag;
   172a4:	020330f7 	andeq	r3, r3, #247	; 0xf7
   172a8:	e5cc3000 	strb	r3, [ip]
}
   172ac:	e8bd8010 	pop	{r4, pc}
	if (val)
   172b0:	e0800004 	add	r0, r0, r4
	BR.F &= ~flag;
   172b4:	e6af3073 	sxtb	r3, r3
	if (val)
   172b8:	e3100010 	tst	r0, #16
	BR.F |= flag;
   172bc:	e20330ed 	and	r3, r3, #237	; 0xed
   172c0:	13833010 	orrne	r3, r3, #16
		res = BR.A + value;
   172c4:	e08e0001 	add	r0, lr, r1
   172c8:	eaffffdb 	b	1723c <doArithmetic.constprop.47+0x3c>
		overflow = minuend_sign == subtrahend_sign && result_sign != minuend_sign;
   172cc:	e15e0001 	cmp	lr, r1
   172d0:	13a0e000 	movne	lr, #0
   172d4:	0204e001 	andeq	lr, r4, #1
   172d8:	eaffffe9 	b	17284 <doArithmetic.constprop.47+0x84>

000172dc <CPD>:
	ctx->tstates += 3;
   172dc:	e5903040 	ldr	r3, [r0, #64]	; 0x40
{
   172e0:	e92d4070 	push	{r4, r5, r6, lr}
   172e4:	e2833008 	add	r3, r3, #8
   172e8:	e1a04000 	mov	r4, r0
	byte val = read8(ctx, WR.HL);
   172ec:	e1d010b6 	ldrh	r1, [r0, #6]
	return (BR.F & flag) != 0;
   172f0:	e5d05000 	ldrb	r5, [r0]
	ctx->tstates += 3;
   172f4:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   172f8:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   172fc:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   17300:	e12fff33 	blx	r3
   17304:	e1a06000 	mov	r6, r0
	byte result = doArithmetic(ctx, val, 0, 1);	
   17308:	e1a01000 	mov	r1, r0
   1730c:	e3a02001 	mov	r2, #1
   17310:	e1a00004 	mov	r0, r4
   17314:	ebffffb9 	bl	17200 <doArithmetic.constprop.47>
	BR.F |= flag;
   17318:	e5d43000 	ldrb	r3, [r4]
	if (val)
   1731c:	e3160020 	tst	r6, #32
	BR.F |= flag;
   17320:	13833020 	orrne	r3, r3, #32
	BR.F &= ~flag;
   17324:	020330df 	andeq	r3, r3, #223	; 0xdf
	WR.BC--;
   17328:	e1d420b2 	ldrh	r2, [r4, #2]
	if (val)
   1732c:	e3160008 	tst	r6, #8
	BR.F |= flag;
   17330:	13833008 	orrne	r3, r3, #8
	BR.F &= ~flag;
   17334:	020330f7 	andeq	r3, r3, #247	; 0xf7
	if(GETFLAG(F_H))
   17338:	e3130010 	tst	r3, #16
	WR.BC--;
   1733c:	e2422001 	sub	r2, r2, #1
		value--;
   17340:	12400001 	subne	r0, r0, #1
	WR.BC--;
   17344:	e6ff2072 	uxth	r2, r2
		value--;
   17348:	16ef0070 	uxtbne	r0, r0
	return (BR.F & flag) != 0;
   1734c:	e2055001 	and	r5, r5, #1
	if (val)
   17350:	e3520000 	cmp	r2, #0
	BR.F |= flag;
   17354:	13833004 	orrne	r3, r3, #4
	BR.F &= ~flag;
   17358:	020330fb 	andeq	r3, r3, #251	; 0xfb
	if(carry)
   1735c:	e3550000 	cmp	r5, #0
	BR.F |= flag;
   17360:	13833001 	orrne	r3, r3, #1
	BR.F &= ~flag;
   17364:	020330fe 	andeq	r3, r3, #254	; 0xfe
	WR.HL--;
   17368:	e1d410b6 	ldrh	r1, [r4, #6]
	if (val)
   1736c:	e3100002 	tst	r0, #2
	BR.F |= flag;
   17370:	13833020 	orrne	r3, r3, #32
	BR.F &= ~flag;
   17374:	020330df 	andeq	r3, r3, #223	; 0xdf
	if (val)
   17378:	e3100008 	tst	r0, #8
   1737c:	e2411001 	sub	r1, r1, #1
	BR.F |= flag;
   17380:	13833008 	orrne	r3, r3, #8
	BR.F &= ~flag;
   17384:	020330f7 	andeq	r3, r3, #247	; 0xf7
	WR.BC--;
   17388:	e1c420b2 	strh	r2, [r4, #2]
	WR.HL--;
   1738c:	e1c410b6 	strh	r1, [r4, #6]
   17390:	e5c43000 	strb	r3, [r4]
}
   17394:	e8bd8070 	pop	{r4, r5, r6, pc}

00017398 <ADD_A_off_HL>:
	ctx->tstates += 3;
   17398:	e5903040 	ldr	r3, [r0, #64]	; 0x40
{
   1739c:	e92d4010 	push	{r4, lr}
   173a0:	e2833003 	add	r3, r3, #3
   173a4:	e1a04000 	mov	r4, r0
	BR.A = doArithmetic(ctx, read8(ctx, WR.HL), F1_ADD, F2_ADD);
   173a8:	e1d010b6 	ldrh	r1, [r0, #6]
   173ac:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   173b0:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   173b4:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   173b8:	e12fff33 	blx	r3
   173bc:	e3a02000 	mov	r2, #0
   173c0:	e1a01000 	mov	r1, r0
   173c4:	e1a00004 	mov	r0, r4
   173c8:	ebffff8c 	bl	17200 <doArithmetic.constprop.47>
   173cc:	e5c40001 	strb	r0, [r4, #1]
}
   173d0:	e8bd8010 	pop	{r4, pc}

000173d4 <ADD_A_off_IX_d>:
	char displacement = read8(ctx, ctx->PC++);
   173d4:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 5;
   173d8:	e5903040 	ldr	r3, [r0, #64]	; 0x40
{
   173dc:	e92d4010 	push	{r4, lr}
	char displacement = read8(ctx, ctx->PC++);
   173e0:	e2812001 	add	r2, r1, #1
{
   173e4:	e1a04000 	mov	r4, r0
	ctx->tstates += 3;
   173e8:	e2833008 	add	r3, r3, #8
	char displacement = read8(ctx, ctx->PC++);
   173ec:	e1c021bc 	strh	r2, [r0, #28]
   173f0:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   173f4:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   173f8:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   173fc:	e12fff33 	blx	r3
	ctx->tstates += 3;
   17400:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	BR.A = doArithmetic(ctx, read8(ctx, WR.IX + displacement), F1_ADD, F2_ADD);
   17404:	e1d410b8 	ldrh	r1, [r4, #8]
   17408:	e2833003 	add	r3, r3, #3
   1740c:	e0811000 	add	r1, r1, r0
	return ctx->memRead(ctx->memParam, addr);	
   17410:	e6ff1071 	uxth	r1, r1
	ctx->tstates += 3;
   17414:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   17418:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   1741c:	e5943024 	ldr	r3, [r4, #36]	; 0x24
   17420:	e12fff33 	blx	r3
   17424:	e3a02000 	mov	r2, #0
   17428:	e1a01000 	mov	r1, r0
   1742c:	e1a00004 	mov	r0, r4
   17430:	ebffff72 	bl	17200 <doArithmetic.constprop.47>
   17434:	e5c40001 	strb	r0, [r4, #1]
}
   17438:	e8bd8010 	pop	{r4, pc}

0001743c <ADD_A_off_IY_d>:
	char displacement = read8(ctx, ctx->PC++);
   1743c:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 5;
   17440:	e5903040 	ldr	r3, [r0, #64]	; 0x40
{
   17444:	e92d4010 	push	{r4, lr}
	char displacement = read8(ctx, ctx->PC++);
   17448:	e2812001 	add	r2, r1, #1
{
   1744c:	e1a04000 	mov	r4, r0
	ctx->tstates += 3;
   17450:	e2833008 	add	r3, r3, #8
	char displacement = read8(ctx, ctx->PC++);
   17454:	e1c021bc 	strh	r2, [r0, #28]
   17458:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   1745c:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   17460:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   17464:	e12fff33 	blx	r3
	ctx->tstates += 3;
   17468:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	BR.A = doArithmetic(ctx, read8(ctx, WR.IY + displacement), F1_ADD, F2_ADD);
   1746c:	e1d410ba 	ldrh	r1, [r4, #10]
   17470:	e2833003 	add	r3, r3, #3
   17474:	e0811000 	add	r1, r1, r0
	return ctx->memRead(ctx->memParam, addr);	
   17478:	e6ff1071 	uxth	r1, r1
	ctx->tstates += 3;
   1747c:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   17480:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   17484:	e5943024 	ldr	r3, [r4, #36]	; 0x24
   17488:	e12fff33 	blx	r3
   1748c:	e3a02000 	mov	r2, #0
   17490:	e1a01000 	mov	r1, r0
   17494:	e1a00004 	mov	r0, r4
   17498:	ebffff58 	bl	17200 <doArithmetic.constprop.47>
   1749c:	e5c40001 	strb	r0, [r4, #1]
}
   174a0:	e8bd8010 	pop	{r4, pc}

000174a4 <ADD_A_A>:
{
   174a4:	e92d4010 	push	{r4, lr}
	BR.A = doArithmetic(ctx, BR.A, F1_ADD, F2_ADD);
   174a8:	e3a02000 	mov	r2, #0
   174ac:	e5d01001 	ldrb	r1, [r0, #1]
{
   174b0:	e1a04000 	mov	r4, r0
	BR.A = doArithmetic(ctx, BR.A, F1_ADD, F2_ADD);
   174b4:	ebffff51 	bl	17200 <doArithmetic.constprop.47>
   174b8:	e5c40001 	strb	r0, [r4, #1]
}
   174bc:	e8bd8010 	pop	{r4, pc}

000174c0 <ADD_A_B>:
{
   174c0:	e92d4010 	push	{r4, lr}
	BR.A = doArithmetic(ctx, BR.B, F1_ADD, F2_ADD);
   174c4:	e3a02000 	mov	r2, #0
   174c8:	e5d01003 	ldrb	r1, [r0, #3]
{
   174cc:	e1a04000 	mov	r4, r0
	BR.A = doArithmetic(ctx, BR.B, F1_ADD, F2_ADD);
   174d0:	ebffff4a 	bl	17200 <doArithmetic.constprop.47>
   174d4:	e5c40001 	strb	r0, [r4, #1]
}
   174d8:	e8bd8010 	pop	{r4, pc}

000174dc <ADD_A_C>:
{
   174dc:	e92d4010 	push	{r4, lr}
	BR.A = doArithmetic(ctx, BR.C, F1_ADD, F2_ADD);
   174e0:	e3a02000 	mov	r2, #0
   174e4:	e5d01002 	ldrb	r1, [r0, #2]
{
   174e8:	e1a04000 	mov	r4, r0
	BR.A = doArithmetic(ctx, BR.C, F1_ADD, F2_ADD);
   174ec:	ebffff43 	bl	17200 <doArithmetic.constprop.47>
   174f0:	e5c40001 	strb	r0, [r4, #1]
}
   174f4:	e8bd8010 	pop	{r4, pc}

000174f8 <ADD_A_D>:
{
   174f8:	e92d4010 	push	{r4, lr}
	BR.A = doArithmetic(ctx, BR.D, F1_ADD, F2_ADD);
   174fc:	e3a02000 	mov	r2, #0
   17500:	e5d01005 	ldrb	r1, [r0, #5]
{
   17504:	e1a04000 	mov	r4, r0
	BR.A = doArithmetic(ctx, BR.D, F1_ADD, F2_ADD);
   17508:	ebffff3c 	bl	17200 <doArithmetic.constprop.47>
   1750c:	e5c40001 	strb	r0, [r4, #1]
}
   17510:	e8bd8010 	pop	{r4, pc}

00017514 <ADD_A_E>:
{
   17514:	e92d4010 	push	{r4, lr}
	BR.A = doArithmetic(ctx, BR.E, F1_ADD, F2_ADD);
   17518:	e3a02000 	mov	r2, #0
   1751c:	e5d01004 	ldrb	r1, [r0, #4]
{
   17520:	e1a04000 	mov	r4, r0
	BR.A = doArithmetic(ctx, BR.E, F1_ADD, F2_ADD);
   17524:	ebffff35 	bl	17200 <doArithmetic.constprop.47>
   17528:	e5c40001 	strb	r0, [r4, #1]
}
   1752c:	e8bd8010 	pop	{r4, pc}

00017530 <ADD_A_H>:
{
   17530:	e92d4010 	push	{r4, lr}
	BR.A = doArithmetic(ctx, BR.H, F1_ADD, F2_ADD);
   17534:	e3a02000 	mov	r2, #0
   17538:	e5d01007 	ldrb	r1, [r0, #7]
{
   1753c:	e1a04000 	mov	r4, r0
	BR.A = doArithmetic(ctx, BR.H, F1_ADD, F2_ADD);
   17540:	ebffff2e 	bl	17200 <doArithmetic.constprop.47>
   17544:	e5c40001 	strb	r0, [r4, #1]
}
   17548:	e8bd8010 	pop	{r4, pc}

0001754c <ADD_A_IXh>:
{
   1754c:	e92d4010 	push	{r4, lr}
	BR.A = doArithmetic(ctx, BR.IXh, F1_ADD, F2_ADD);
   17550:	e3a02000 	mov	r2, #0
   17554:	e5d01009 	ldrb	r1, [r0, #9]
{
   17558:	e1a04000 	mov	r4, r0
	BR.A = doArithmetic(ctx, BR.IXh, F1_ADD, F2_ADD);
   1755c:	ebffff27 	bl	17200 <doArithmetic.constprop.47>
   17560:	e5c40001 	strb	r0, [r4, #1]
}
   17564:	e8bd8010 	pop	{r4, pc}

00017568 <ADD_A_IXl>:
{
   17568:	e92d4010 	push	{r4, lr}
	BR.A = doArithmetic(ctx, BR.IXl, F1_ADD, F2_ADD);
   1756c:	e3a02000 	mov	r2, #0
   17570:	e5d01008 	ldrb	r1, [r0, #8]
{
   17574:	e1a04000 	mov	r4, r0
	BR.A = doArithmetic(ctx, BR.IXl, F1_ADD, F2_ADD);
   17578:	ebffff20 	bl	17200 <doArithmetic.constprop.47>
   1757c:	e5c40001 	strb	r0, [r4, #1]
}
   17580:	e8bd8010 	pop	{r4, pc}

00017584 <ADD_A_IYh>:
{
   17584:	e92d4010 	push	{r4, lr}
	BR.A = doArithmetic(ctx, BR.IYh, F1_ADD, F2_ADD);
   17588:	e3a02000 	mov	r2, #0
   1758c:	e5d0100b 	ldrb	r1, [r0, #11]
{
   17590:	e1a04000 	mov	r4, r0
	BR.A = doArithmetic(ctx, BR.IYh, F1_ADD, F2_ADD);
   17594:	ebffff19 	bl	17200 <doArithmetic.constprop.47>
   17598:	e5c40001 	strb	r0, [r4, #1]
}
   1759c:	e8bd8010 	pop	{r4, pc}

000175a0 <ADD_A_IYl>:
{
   175a0:	e92d4010 	push	{r4, lr}
	BR.A = doArithmetic(ctx, BR.IYl, F1_ADD, F2_ADD);
   175a4:	e3a02000 	mov	r2, #0
   175a8:	e5d0100a 	ldrb	r1, [r0, #10]
{
   175ac:	e1a04000 	mov	r4, r0
	BR.A = doArithmetic(ctx, BR.IYl, F1_ADD, F2_ADD);
   175b0:	ebffff12 	bl	17200 <doArithmetic.constprop.47>
   175b4:	e5c40001 	strb	r0, [r4, #1]
}
   175b8:	e8bd8010 	pop	{r4, pc}

000175bc <ADD_A_L>:
{
   175bc:	e92d4010 	push	{r4, lr}
	BR.A = doArithmetic(ctx, BR.L, F1_ADD, F2_ADD);
   175c0:	e3a02000 	mov	r2, #0
   175c4:	e5d01006 	ldrb	r1, [r0, #6]
{
   175c8:	e1a04000 	mov	r4, r0
	BR.A = doArithmetic(ctx, BR.L, F1_ADD, F2_ADD);
   175cc:	ebffff0b 	bl	17200 <doArithmetic.constprop.47>
   175d0:	e5c40001 	strb	r0, [r4, #1]
}
   175d4:	e8bd8010 	pop	{r4, pc}

000175d8 <ADD_A_n>:
	BR.A = doArithmetic(ctx, read8(ctx, ctx->PC++), F1_ADD, F2_ADD);
   175d8:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 3;
   175dc:	e5903040 	ldr	r3, [r0, #64]	; 0x40
   175e0:	e2812001 	add	r2, r1, #1
   175e4:	e2833003 	add	r3, r3, #3
{
   175e8:	e92d4010 	push	{r4, lr}
   175ec:	e1a04000 	mov	r4, r0
	BR.A = doArithmetic(ctx, read8(ctx, ctx->PC++), F1_ADD, F2_ADD);
   175f0:	e1c021bc 	strh	r2, [r0, #28]
   175f4:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   175f8:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   175fc:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   17600:	e12fff33 	blx	r3
   17604:	e3a02000 	mov	r2, #0
   17608:	e1a01000 	mov	r1, r0
   1760c:	e1a00004 	mov	r0, r4
   17610:	ebfffefa 	bl	17200 <doArithmetic.constprop.47>
   17614:	e5c40001 	strb	r0, [r4, #1]
}
   17618:	e8bd8010 	pop	{r4, pc}

0001761c <CP_off_IX_d>:
	char displacement = read8(ctx, ctx->PC++);
   1761c:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 5;
   17620:	e5903040 	ldr	r3, [r0, #64]	; 0x40
{
   17624:	e92d4070 	push	{r4, r5, r6, lr}
	char displacement = read8(ctx, ctx->PC++);
   17628:	e2812001 	add	r2, r1, #1
{
   1762c:	e1a04000 	mov	r4, r0
	ctx->tstates += 3;
   17630:	e2833008 	add	r3, r3, #8
	char displacement = read8(ctx, ctx->PC++);
   17634:	e1c021bc 	strh	r2, [r0, #28]
   17638:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   1763c:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   17640:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   17644:	e12fff33 	blx	r3
	ctx->tstates += 3;
   17648:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	byte val = read8(ctx, WR.IX + displacement);
   1764c:	e1d410b8 	ldrh	r1, [r4, #8]
   17650:	e2833003 	add	r3, r3, #3
   17654:	e0811000 	add	r1, r1, r0
	return ctx->memRead(ctx->memParam, addr);	
   17658:	e6ff1071 	uxth	r1, r1
	ctx->tstates += 3;
   1765c:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   17660:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   17664:	e5943024 	ldr	r3, [r4, #36]	; 0x24
   17668:	e12fff33 	blx	r3
   1766c:	e1a05000 	mov	r5, r0
	doArithmetic(ctx, val, 0, 1);	
   17670:	e1a01000 	mov	r1, r0
   17674:	e3a02001 	mov	r2, #1
   17678:	e1a00004 	mov	r0, r4
   1767c:	ebfffedf 	bl	17200 <doArithmetic.constprop.47>
	BR.F |= flag;
   17680:	e5d43000 	ldrb	r3, [r4]
	if (val)
   17684:	e3150020 	tst	r5, #32
	BR.F |= flag;
   17688:	13833020 	orrne	r3, r3, #32
	BR.F &= ~flag;
   1768c:	020330df 	andeq	r3, r3, #223	; 0xdf
	if (val)
   17690:	e3150008 	tst	r5, #8
	BR.F |= flag;
   17694:	13833008 	orrne	r3, r3, #8
	BR.F &= ~flag;
   17698:	020330f7 	andeq	r3, r3, #247	; 0xf7
   1769c:	e5c43000 	strb	r3, [r4]
}
   176a0:	e8bd8070 	pop	{r4, r5, r6, pc}

000176a4 <CP_off_IY_d>:
	char displacement = read8(ctx, ctx->PC++);
   176a4:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 5;
   176a8:	e5903040 	ldr	r3, [r0, #64]	; 0x40
{
   176ac:	e92d4070 	push	{r4, r5, r6, lr}
	char displacement = read8(ctx, ctx->PC++);
   176b0:	e2812001 	add	r2, r1, #1
{
   176b4:	e1a04000 	mov	r4, r0
	ctx->tstates += 3;
   176b8:	e2833008 	add	r3, r3, #8
	char displacement = read8(ctx, ctx->PC++);
   176bc:	e1c021bc 	strh	r2, [r0, #28]
   176c0:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   176c4:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   176c8:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   176cc:	e12fff33 	blx	r3
	ctx->tstates += 3;
   176d0:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	byte val = read8(ctx, WR.IY + displacement);
   176d4:	e1d410ba 	ldrh	r1, [r4, #10]
   176d8:	e2833003 	add	r3, r3, #3
   176dc:	e0811000 	add	r1, r1, r0
	return ctx->memRead(ctx->memParam, addr);	
   176e0:	e6ff1071 	uxth	r1, r1
	ctx->tstates += 3;
   176e4:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   176e8:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   176ec:	e5943024 	ldr	r3, [r4, #36]	; 0x24
   176f0:	e12fff33 	blx	r3
   176f4:	e1a05000 	mov	r5, r0
	doArithmetic(ctx, val, 0, 1);	
   176f8:	e1a01000 	mov	r1, r0
   176fc:	e3a02001 	mov	r2, #1
   17700:	e1a00004 	mov	r0, r4
   17704:	ebfffebd 	bl	17200 <doArithmetic.constprop.47>
	BR.F |= flag;
   17708:	e5d43000 	ldrb	r3, [r4]
	if (val)
   1770c:	e3150020 	tst	r5, #32
	BR.F |= flag;
   17710:	13833020 	orrne	r3, r3, #32
	BR.F &= ~flag;
   17714:	020330df 	andeq	r3, r3, #223	; 0xdf
	if (val)
   17718:	e3150008 	tst	r5, #8
	BR.F |= flag;
   1771c:	13833008 	orrne	r3, r3, #8
	BR.F &= ~flag;
   17720:	020330f7 	andeq	r3, r3, #247	; 0xf7
   17724:	e5c43000 	strb	r3, [r4]
}
   17728:	e8bd8070 	pop	{r4, r5, r6, pc}

0001772c <CP_A>:
{
   1772c:	e92d4010 	push	{r4, lr}
   17730:	e1a04000 	mov	r4, r0
	doArithmetic(ctx, BR.A, 0, 1);	
   17734:	e3a02001 	mov	r2, #1
   17738:	e5d01001 	ldrb	r1, [r0, #1]
   1773c:	ebfffeaf 	bl	17200 <doArithmetic.constprop.47>
	adjustFlags(ctx, BR.A);
   17740:	e5d42001 	ldrb	r2, [r4, #1]
	BR.F |= flag;
   17744:	e5d43000 	ldrb	r3, [r4]
	if (val)
   17748:	e3120020 	tst	r2, #32
	BR.F |= flag;
   1774c:	13833020 	orrne	r3, r3, #32
	BR.F &= ~flag;
   17750:	020330df 	andeq	r3, r3, #223	; 0xdf
	if (val)
   17754:	e3120008 	tst	r2, #8
	BR.F |= flag;
   17758:	13833008 	orrne	r3, r3, #8
	BR.F &= ~flag;
   1775c:	020330f7 	andeq	r3, r3, #247	; 0xf7
   17760:	e5c43000 	strb	r3, [r4]
}
   17764:	e8bd8010 	pop	{r4, pc}

00017768 <CP_B>:
{
   17768:	e92d4010 	push	{r4, lr}
   1776c:	e1a04000 	mov	r4, r0
	doArithmetic(ctx, BR.B, 0, 1);	
   17770:	e3a02001 	mov	r2, #1
   17774:	e5d01003 	ldrb	r1, [r0, #3]
   17778:	ebfffea0 	bl	17200 <doArithmetic.constprop.47>
	adjustFlags(ctx, BR.B);
   1777c:	e5d42003 	ldrb	r2, [r4, #3]
	BR.F |= flag;
   17780:	e5d43000 	ldrb	r3, [r4]
	if (val)
   17784:	e3120020 	tst	r2, #32
	BR.F |= flag;
   17788:	13833020 	orrne	r3, r3, #32
	BR.F &= ~flag;
   1778c:	020330df 	andeq	r3, r3, #223	; 0xdf
	if (val)
   17790:	e3120008 	tst	r2, #8
	BR.F |= flag;
   17794:	13833008 	orrne	r3, r3, #8
	BR.F &= ~flag;
   17798:	020330f7 	andeq	r3, r3, #247	; 0xf7
   1779c:	e5c43000 	strb	r3, [r4]
}
   177a0:	e8bd8010 	pop	{r4, pc}

000177a4 <CP_C>:
{
   177a4:	e92d4010 	push	{r4, lr}
   177a8:	e1a04000 	mov	r4, r0
	doArithmetic(ctx, BR.C, 0, 1);	
   177ac:	e3a02001 	mov	r2, #1
   177b0:	e5d01002 	ldrb	r1, [r0, #2]
   177b4:	ebfffe91 	bl	17200 <doArithmetic.constprop.47>
	adjustFlags(ctx, BR.C);
   177b8:	e5d42002 	ldrb	r2, [r4, #2]
	BR.F |= flag;
   177bc:	e5d43000 	ldrb	r3, [r4]
	if (val)
   177c0:	e3120020 	tst	r2, #32
	BR.F |= flag;
   177c4:	13833020 	orrne	r3, r3, #32
	BR.F &= ~flag;
   177c8:	020330df 	andeq	r3, r3, #223	; 0xdf
	if (val)
   177cc:	e3120008 	tst	r2, #8
	BR.F |= flag;
   177d0:	13833008 	orrne	r3, r3, #8
	BR.F &= ~flag;
   177d4:	020330f7 	andeq	r3, r3, #247	; 0xf7
   177d8:	e5c43000 	strb	r3, [r4]
}
   177dc:	e8bd8010 	pop	{r4, pc}

000177e0 <CP_D>:
{
   177e0:	e92d4010 	push	{r4, lr}
   177e4:	e1a04000 	mov	r4, r0
	doArithmetic(ctx, BR.D, 0, 1);	
   177e8:	e3a02001 	mov	r2, #1
   177ec:	e5d01005 	ldrb	r1, [r0, #5]
   177f0:	ebfffe82 	bl	17200 <doArithmetic.constprop.47>
	adjustFlags(ctx, BR.D);
   177f4:	e5d42005 	ldrb	r2, [r4, #5]
	BR.F |= flag;
   177f8:	e5d43000 	ldrb	r3, [r4]
	if (val)
   177fc:	e3120020 	tst	r2, #32
	BR.F |= flag;
   17800:	13833020 	orrne	r3, r3, #32
	BR.F &= ~flag;
   17804:	020330df 	andeq	r3, r3, #223	; 0xdf
	if (val)
   17808:	e3120008 	tst	r2, #8
	BR.F |= flag;
   1780c:	13833008 	orrne	r3, r3, #8
	BR.F &= ~flag;
   17810:	020330f7 	andeq	r3, r3, #247	; 0xf7
   17814:	e5c43000 	strb	r3, [r4]
}
   17818:	e8bd8010 	pop	{r4, pc}

0001781c <CP_E>:
{
   1781c:	e92d4010 	push	{r4, lr}
   17820:	e1a04000 	mov	r4, r0
	doArithmetic(ctx, BR.E, 0, 1);	
   17824:	e3a02001 	mov	r2, #1
   17828:	e5d01004 	ldrb	r1, [r0, #4]
   1782c:	ebfffe73 	bl	17200 <doArithmetic.constprop.47>
	adjustFlags(ctx, BR.E);
   17830:	e5d42004 	ldrb	r2, [r4, #4]
	BR.F |= flag;
   17834:	e5d43000 	ldrb	r3, [r4]
	if (val)
   17838:	e3120020 	tst	r2, #32
	BR.F |= flag;
   1783c:	13833020 	orrne	r3, r3, #32
	BR.F &= ~flag;
   17840:	020330df 	andeq	r3, r3, #223	; 0xdf
	if (val)
   17844:	e3120008 	tst	r2, #8
	BR.F |= flag;
   17848:	13833008 	orrne	r3, r3, #8
	BR.F &= ~flag;
   1784c:	020330f7 	andeq	r3, r3, #247	; 0xf7
   17850:	e5c43000 	strb	r3, [r4]
}
   17854:	e8bd8010 	pop	{r4, pc}

00017858 <CP_H>:
{
   17858:	e92d4010 	push	{r4, lr}
   1785c:	e1a04000 	mov	r4, r0
	doArithmetic(ctx, BR.H, 0, 1);	
   17860:	e3a02001 	mov	r2, #1
   17864:	e5d01007 	ldrb	r1, [r0, #7]
   17868:	ebfffe64 	bl	17200 <doArithmetic.constprop.47>
	adjustFlags(ctx, BR.H);
   1786c:	e5d42007 	ldrb	r2, [r4, #7]
	BR.F |= flag;
   17870:	e5d43000 	ldrb	r3, [r4]
	if (val)
   17874:	e3120020 	tst	r2, #32
	BR.F |= flag;
   17878:	13833020 	orrne	r3, r3, #32
	BR.F &= ~flag;
   1787c:	020330df 	andeq	r3, r3, #223	; 0xdf
	if (val)
   17880:	e3120008 	tst	r2, #8
	BR.F |= flag;
   17884:	13833008 	orrne	r3, r3, #8
	BR.F &= ~flag;
   17888:	020330f7 	andeq	r3, r3, #247	; 0xf7
   1788c:	e5c43000 	strb	r3, [r4]
}
   17890:	e8bd8010 	pop	{r4, pc}

00017894 <CP_IXh>:
{
   17894:	e92d4010 	push	{r4, lr}
   17898:	e1a04000 	mov	r4, r0
	doArithmetic(ctx, BR.IXh, 0, 1);	
   1789c:	e3a02001 	mov	r2, #1
   178a0:	e5d01009 	ldrb	r1, [r0, #9]
   178a4:	ebfffe55 	bl	17200 <doArithmetic.constprop.47>
	adjustFlags(ctx, BR.IXh);
   178a8:	e5d42009 	ldrb	r2, [r4, #9]
	BR.F |= flag;
   178ac:	e5d43000 	ldrb	r3, [r4]
	if (val)
   178b0:	e3120020 	tst	r2, #32
	BR.F |= flag;
   178b4:	13833020 	orrne	r3, r3, #32
	BR.F &= ~flag;
   178b8:	020330df 	andeq	r3, r3, #223	; 0xdf
	if (val)
   178bc:	e3120008 	tst	r2, #8
	BR.F |= flag;
   178c0:	13833008 	orrne	r3, r3, #8
	BR.F &= ~flag;
   178c4:	020330f7 	andeq	r3, r3, #247	; 0xf7
   178c8:	e5c43000 	strb	r3, [r4]
}
   178cc:	e8bd8010 	pop	{r4, pc}

000178d0 <CP_IXl>:
{
   178d0:	e92d4010 	push	{r4, lr}
   178d4:	e1a04000 	mov	r4, r0
	doArithmetic(ctx, BR.IXl, 0, 1);	
   178d8:	e3a02001 	mov	r2, #1
   178dc:	e5d01008 	ldrb	r1, [r0, #8]
   178e0:	ebfffe46 	bl	17200 <doArithmetic.constprop.47>
	adjustFlags(ctx, BR.IXl);
   178e4:	e5d42008 	ldrb	r2, [r4, #8]
	BR.F |= flag;
   178e8:	e5d43000 	ldrb	r3, [r4]
	if (val)
   178ec:	e3120020 	tst	r2, #32
	BR.F |= flag;
   178f0:	13833020 	orrne	r3, r3, #32
	BR.F &= ~flag;
   178f4:	020330df 	andeq	r3, r3, #223	; 0xdf
	if (val)
   178f8:	e3120008 	tst	r2, #8
	BR.F |= flag;
   178fc:	13833008 	orrne	r3, r3, #8
	BR.F &= ~flag;
   17900:	020330f7 	andeq	r3, r3, #247	; 0xf7
   17904:	e5c43000 	strb	r3, [r4]
}
   17908:	e8bd8010 	pop	{r4, pc}

0001790c <CP_IYh>:
{
   1790c:	e92d4010 	push	{r4, lr}
   17910:	e1a04000 	mov	r4, r0
	doArithmetic(ctx, BR.IYh, 0, 1);	
   17914:	e3a02001 	mov	r2, #1
   17918:	e5d0100b 	ldrb	r1, [r0, #11]
   1791c:	ebfffe37 	bl	17200 <doArithmetic.constprop.47>
	adjustFlags(ctx, BR.IYh);
   17920:	e5d4200b 	ldrb	r2, [r4, #11]
	BR.F |= flag;
   17924:	e5d43000 	ldrb	r3, [r4]
	if (val)
   17928:	e3120020 	tst	r2, #32
	BR.F |= flag;
   1792c:	13833020 	orrne	r3, r3, #32
	BR.F &= ~flag;
   17930:	020330df 	andeq	r3, r3, #223	; 0xdf
	if (val)
   17934:	e3120008 	tst	r2, #8
	BR.F |= flag;
   17938:	13833008 	orrne	r3, r3, #8
	BR.F &= ~flag;
   1793c:	020330f7 	andeq	r3, r3, #247	; 0xf7
   17940:	e5c43000 	strb	r3, [r4]
}
   17944:	e8bd8010 	pop	{r4, pc}

00017948 <CP_IYl>:
{
   17948:	e92d4010 	push	{r4, lr}
   1794c:	e1a04000 	mov	r4, r0
	doArithmetic(ctx, BR.IYl, 0, 1);	
   17950:	e3a02001 	mov	r2, #1
   17954:	e5d0100a 	ldrb	r1, [r0, #10]
   17958:	ebfffe28 	bl	17200 <doArithmetic.constprop.47>
	adjustFlags(ctx, BR.IYl);
   1795c:	e5d4200a 	ldrb	r2, [r4, #10]
	BR.F |= flag;
   17960:	e5d43000 	ldrb	r3, [r4]
	if (val)
   17964:	e3120020 	tst	r2, #32
	BR.F |= flag;
   17968:	13833020 	orrne	r3, r3, #32
	BR.F &= ~flag;
   1796c:	020330df 	andeq	r3, r3, #223	; 0xdf
	if (val)
   17970:	e3120008 	tst	r2, #8
	BR.F |= flag;
   17974:	13833008 	orrne	r3, r3, #8
	BR.F &= ~flag;
   17978:	020330f7 	andeq	r3, r3, #247	; 0xf7
   1797c:	e5c43000 	strb	r3, [r4]
}
   17980:	e8bd8010 	pop	{r4, pc}

00017984 <CP_L>:
{
   17984:	e92d4010 	push	{r4, lr}
   17988:	e1a04000 	mov	r4, r0
	doArithmetic(ctx, BR.L, 0, 1);	
   1798c:	e3a02001 	mov	r2, #1
   17990:	e5d01006 	ldrb	r1, [r0, #6]
   17994:	ebfffe19 	bl	17200 <doArithmetic.constprop.47>
	adjustFlags(ctx, BR.L);
   17998:	e5d42006 	ldrb	r2, [r4, #6]
	BR.F |= flag;
   1799c:	e5d43000 	ldrb	r3, [r4]
	if (val)
   179a0:	e3120020 	tst	r2, #32
	BR.F |= flag;
   179a4:	13833020 	orrne	r3, r3, #32
	BR.F &= ~flag;
   179a8:	020330df 	andeq	r3, r3, #223	; 0xdf
	if (val)
   179ac:	e3120008 	tst	r2, #8
	BR.F |= flag;
   179b0:	13833008 	orrne	r3, r3, #8
	BR.F &= ~flag;
   179b4:	020330f7 	andeq	r3, r3, #247	; 0xf7
   179b8:	e5c43000 	strb	r3, [r4]
}
   179bc:	e8bd8010 	pop	{r4, pc}

000179c0 <CP_n>:
	byte val = read8(ctx, ctx->PC++);
   179c0:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 3;
   179c4:	e5903040 	ldr	r3, [r0, #64]	; 0x40
   179c8:	e2812001 	add	r2, r1, #1
   179cc:	e2833003 	add	r3, r3, #3
{
   179d0:	e92d4070 	push	{r4, r5, r6, lr}
   179d4:	e1a04000 	mov	r4, r0
	byte val = read8(ctx, ctx->PC++);
   179d8:	e1c021bc 	strh	r2, [r0, #28]
   179dc:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   179e0:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   179e4:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   179e8:	e12fff33 	blx	r3
   179ec:	e1a05000 	mov	r5, r0
	doArithmetic(ctx, val, 0, 1);	
   179f0:	e1a01000 	mov	r1, r0
   179f4:	e3a02001 	mov	r2, #1
   179f8:	e1a00004 	mov	r0, r4
   179fc:	ebfffdff 	bl	17200 <doArithmetic.constprop.47>
	BR.F |= flag;
   17a00:	e5d43000 	ldrb	r3, [r4]
	if (val)
   17a04:	e3150020 	tst	r5, #32
	BR.F |= flag;
   17a08:	13833020 	orrne	r3, r3, #32
	BR.F &= ~flag;
   17a0c:	020330df 	andeq	r3, r3, #223	; 0xdf
	if (val)
   17a10:	e3150008 	tst	r5, #8
	BR.F |= flag;
   17a14:	13833008 	orrne	r3, r3, #8
	BR.F &= ~flag;
   17a18:	020330f7 	andeq	r3, r3, #247	; 0xf7
   17a1c:	e5c43000 	strb	r3, [r4]
}
   17a20:	e8bd8070 	pop	{r4, r5, r6, pc}

00017a24 <NEG>:
	BR.A = 0;
   17a24:	e3a03000 	mov	r3, #0
{
   17a28:	e92d4010 	push	{r4, lr}
   17a2c:	e1a04000 	mov	r4, r0
	int temp = BR.A;
   17a30:	e5d01001 	ldrb	r1, [r0, #1]
	BR.A = doArithmetic(ctx, temp, 0, 1);
   17a34:	e3a02001 	mov	r2, #1
	BR.A = 0;
   17a38:	e5c03001 	strb	r3, [r0, #1]
	BR.A = doArithmetic(ctx, temp, 0, 1);
   17a3c:	ebfffdef 	bl	17200 <doArithmetic.constprop.47>
	BR.F |= flag;
   17a40:	e5d43000 	ldrb	r3, [r4]
   17a44:	e5c40001 	strb	r0, [r4, #1]
   17a48:	e3833002 	orr	r3, r3, #2
   17a4c:	e5c43000 	strb	r3, [r4]
}
   17a50:	e8bd8010 	pop	{r4, pc}

00017a54 <SUB_A_off_HL>:
	ctx->tstates += 3;
   17a54:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	
}


static void SUB_A_off_HL (Z80Context* ctx)
{
   17a58:	e92d4010 	push	{r4, lr}
   17a5c:	e2833003 	add	r3, r3, #3
   17a60:	e1a04000 	mov	r4, r0
	BR.A = doArithmetic(ctx, read8(ctx, WR.HL), F1_SUB, F2_SUB);
   17a64:	e1d010b6 	ldrh	r1, [r0, #6]
   17a68:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   17a6c:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   17a70:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   17a74:	e12fff33 	blx	r3
   17a78:	e3a02001 	mov	r2, #1
   17a7c:	e1a01000 	mov	r1, r0
   17a80:	e1a00004 	mov	r0, r4
   17a84:	ebfffddd 	bl	17200 <doArithmetic.constprop.47>
   17a88:	e5c40001 	strb	r0, [r4, #1]
}
   17a8c:	e8bd8010 	pop	{r4, pc}

00017a90 <SUB_A_off_IX_d>:


static void SUB_A_off_IX_d (Z80Context* ctx)
{
	ctx->tstates += 5;
	char displacement = read8(ctx, ctx->PC++);
   17a90:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 5;
   17a94:	e5903040 	ldr	r3, [r0, #64]	; 0x40
{
   17a98:	e92d4010 	push	{r4, lr}
	char displacement = read8(ctx, ctx->PC++);
   17a9c:	e2812001 	add	r2, r1, #1
{
   17aa0:	e1a04000 	mov	r4, r0
	ctx->tstates += 3;
   17aa4:	e2833008 	add	r3, r3, #8
	char displacement = read8(ctx, ctx->PC++);
   17aa8:	e1c021bc 	strh	r2, [r0, #28]
   17aac:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   17ab0:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   17ab4:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   17ab8:	e12fff33 	blx	r3
	ctx->tstates += 3;
   17abc:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	BR.A = doArithmetic(ctx, read8(ctx, WR.IX + displacement), F1_SUB, F2_SUB);
   17ac0:	e1d410b8 	ldrh	r1, [r4, #8]
   17ac4:	e2833003 	add	r3, r3, #3
   17ac8:	e0811000 	add	r1, r1, r0
	return ctx->memRead(ctx->memParam, addr);	
   17acc:	e6ff1071 	uxth	r1, r1
	ctx->tstates += 3;
   17ad0:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   17ad4:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   17ad8:	e5943024 	ldr	r3, [r4, #36]	; 0x24
   17adc:	e12fff33 	blx	r3
   17ae0:	e3a02001 	mov	r2, #1
   17ae4:	e1a01000 	mov	r1, r0
   17ae8:	e1a00004 	mov	r0, r4
   17aec:	ebfffdc3 	bl	17200 <doArithmetic.constprop.47>
   17af0:	e5c40001 	strb	r0, [r4, #1]
	
}
   17af4:	e8bd8010 	pop	{r4, pc}

00017af8 <SUB_A_off_IY_d>:


static void SUB_A_off_IY_d (Z80Context* ctx)
{
	ctx->tstates += 5;
	char displacement = read8(ctx, ctx->PC++);
   17af8:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 5;
   17afc:	e5903040 	ldr	r3, [r0, #64]	; 0x40
{
   17b00:	e92d4010 	push	{r4, lr}
	char displacement = read8(ctx, ctx->PC++);
   17b04:	e2812001 	add	r2, r1, #1
{
   17b08:	e1a04000 	mov	r4, r0
	ctx->tstates += 3;
   17b0c:	e2833008 	add	r3, r3, #8
	char displacement = read8(ctx, ctx->PC++);
   17b10:	e1c021bc 	strh	r2, [r0, #28]
   17b14:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   17b18:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   17b1c:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   17b20:	e12fff33 	blx	r3
	ctx->tstates += 3;
   17b24:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	BR.A = doArithmetic(ctx, read8(ctx, WR.IY + displacement), F1_SUB, F2_SUB);
   17b28:	e1d410ba 	ldrh	r1, [r4, #10]
   17b2c:	e2833003 	add	r3, r3, #3
   17b30:	e0811000 	add	r1, r1, r0
	return ctx->memRead(ctx->memParam, addr);	
   17b34:	e6ff1071 	uxth	r1, r1
	ctx->tstates += 3;
   17b38:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   17b3c:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   17b40:	e5943024 	ldr	r3, [r4, #36]	; 0x24
   17b44:	e12fff33 	blx	r3
   17b48:	e3a02001 	mov	r2, #1
   17b4c:	e1a01000 	mov	r1, r0
   17b50:	e1a00004 	mov	r0, r4
   17b54:	ebfffda9 	bl	17200 <doArithmetic.constprop.47>
   17b58:	e5c40001 	strb	r0, [r4, #1]
	
}
   17b5c:	e8bd8010 	pop	{r4, pc}

00017b60 <SUB_A_A>:


static void SUB_A_A (Z80Context* ctx)
{
   17b60:	e92d4010 	push	{r4, lr}
	BR.A = doArithmetic(ctx, BR.A, F1_SUB, F2_SUB);
   17b64:	e3a02001 	mov	r2, #1
   17b68:	e5d01001 	ldrb	r1, [r0, #1]
{
   17b6c:	e1a04000 	mov	r4, r0
	BR.A = doArithmetic(ctx, BR.A, F1_SUB, F2_SUB);
   17b70:	ebfffda2 	bl	17200 <doArithmetic.constprop.47>
   17b74:	e5c40001 	strb	r0, [r4, #1]
}
   17b78:	e8bd8010 	pop	{r4, pc}

00017b7c <SUB_A_B>:


static void SUB_A_B (Z80Context* ctx)
{
   17b7c:	e92d4010 	push	{r4, lr}
	BR.A = doArithmetic(ctx, BR.B, F1_SUB, F2_SUB);
   17b80:	e3a02001 	mov	r2, #1
   17b84:	e5d01003 	ldrb	r1, [r0, #3]
{
   17b88:	e1a04000 	mov	r4, r0
	BR.A = doArithmetic(ctx, BR.B, F1_SUB, F2_SUB);
   17b8c:	ebfffd9b 	bl	17200 <doArithmetic.constprop.47>
   17b90:	e5c40001 	strb	r0, [r4, #1]
}
   17b94:	e8bd8010 	pop	{r4, pc}

00017b98 <SUB_A_C>:


static void SUB_A_C (Z80Context* ctx)
{
   17b98:	e92d4010 	push	{r4, lr}
	BR.A = doArithmetic(ctx, BR.C, F1_SUB, F2_SUB);
   17b9c:	e3a02001 	mov	r2, #1
   17ba0:	e5d01002 	ldrb	r1, [r0, #2]
{
   17ba4:	e1a04000 	mov	r4, r0
	BR.A = doArithmetic(ctx, BR.C, F1_SUB, F2_SUB);
   17ba8:	ebfffd94 	bl	17200 <doArithmetic.constprop.47>
   17bac:	e5c40001 	strb	r0, [r4, #1]
}
   17bb0:	e8bd8010 	pop	{r4, pc}

00017bb4 <SUB_A_D>:


static void SUB_A_D (Z80Context* ctx)
{
   17bb4:	e92d4010 	push	{r4, lr}
	BR.A = doArithmetic(ctx, BR.D, F1_SUB, F2_SUB);
   17bb8:	e3a02001 	mov	r2, #1
   17bbc:	e5d01005 	ldrb	r1, [r0, #5]
{
   17bc0:	e1a04000 	mov	r4, r0
	BR.A = doArithmetic(ctx, BR.D, F1_SUB, F2_SUB);
   17bc4:	ebfffd8d 	bl	17200 <doArithmetic.constprop.47>
   17bc8:	e5c40001 	strb	r0, [r4, #1]
}
   17bcc:	e8bd8010 	pop	{r4, pc}

00017bd0 <SUB_A_E>:


static void SUB_A_E (Z80Context* ctx)
{
   17bd0:	e92d4010 	push	{r4, lr}
	BR.A = doArithmetic(ctx, BR.E, F1_SUB, F2_SUB);
   17bd4:	e3a02001 	mov	r2, #1
   17bd8:	e5d01004 	ldrb	r1, [r0, #4]
{
   17bdc:	e1a04000 	mov	r4, r0
	BR.A = doArithmetic(ctx, BR.E, F1_SUB, F2_SUB);
   17be0:	ebfffd86 	bl	17200 <doArithmetic.constprop.47>
   17be4:	e5c40001 	strb	r0, [r4, #1]
}
   17be8:	e8bd8010 	pop	{r4, pc}

00017bec <SUB_A_H>:


static void SUB_A_H (Z80Context* ctx)
{
   17bec:	e92d4010 	push	{r4, lr}
	BR.A = doArithmetic(ctx, BR.H, F1_SUB, F2_SUB);
   17bf0:	e3a02001 	mov	r2, #1
   17bf4:	e5d01007 	ldrb	r1, [r0, #7]
{
   17bf8:	e1a04000 	mov	r4, r0
	BR.A = doArithmetic(ctx, BR.H, F1_SUB, F2_SUB);
   17bfc:	ebfffd7f 	bl	17200 <doArithmetic.constprop.47>
   17c00:	e5c40001 	strb	r0, [r4, #1]
}
   17c04:	e8bd8010 	pop	{r4, pc}

00017c08 <SUB_A_IXh>:


static void SUB_A_IXh (Z80Context* ctx)
{
   17c08:	e92d4010 	push	{r4, lr}
	BR.A = doArithmetic(ctx, BR.IXh, F1_SUB, F2_SUB);
   17c0c:	e3a02001 	mov	r2, #1
   17c10:	e5d01009 	ldrb	r1, [r0, #9]
{
   17c14:	e1a04000 	mov	r4, r0
	BR.A = doArithmetic(ctx, BR.IXh, F1_SUB, F2_SUB);
   17c18:	ebfffd78 	bl	17200 <doArithmetic.constprop.47>
   17c1c:	e5c40001 	strb	r0, [r4, #1]
}
   17c20:	e8bd8010 	pop	{r4, pc}

00017c24 <SUB_A_IXl>:


static void SUB_A_IXl (Z80Context* ctx)
{
   17c24:	e92d4010 	push	{r4, lr}
	BR.A = doArithmetic(ctx, BR.IXl, F1_SUB, F2_SUB);
   17c28:	e3a02001 	mov	r2, #1
   17c2c:	e5d01008 	ldrb	r1, [r0, #8]
{
   17c30:	e1a04000 	mov	r4, r0
	BR.A = doArithmetic(ctx, BR.IXl, F1_SUB, F2_SUB);
   17c34:	ebfffd71 	bl	17200 <doArithmetic.constprop.47>
   17c38:	e5c40001 	strb	r0, [r4, #1]
}
   17c3c:	e8bd8010 	pop	{r4, pc}

00017c40 <SUB_A_IYh>:


static void SUB_A_IYh (Z80Context* ctx)
{
   17c40:	e92d4010 	push	{r4, lr}
	BR.A = doArithmetic(ctx, BR.IYh, F1_SUB, F2_SUB);
   17c44:	e3a02001 	mov	r2, #1
   17c48:	e5d0100b 	ldrb	r1, [r0, #11]
{
   17c4c:	e1a04000 	mov	r4, r0
	BR.A = doArithmetic(ctx, BR.IYh, F1_SUB, F2_SUB);
   17c50:	ebfffd6a 	bl	17200 <doArithmetic.constprop.47>
   17c54:	e5c40001 	strb	r0, [r4, #1]
}
   17c58:	e8bd8010 	pop	{r4, pc}

00017c5c <SUB_A_IYl>:


static void SUB_A_IYl (Z80Context* ctx)
{
   17c5c:	e92d4010 	push	{r4, lr}
	BR.A = doArithmetic(ctx, BR.IYl, F1_SUB, F2_SUB);
   17c60:	e3a02001 	mov	r2, #1
   17c64:	e5d0100a 	ldrb	r1, [r0, #10]
{
   17c68:	e1a04000 	mov	r4, r0
	BR.A = doArithmetic(ctx, BR.IYl, F1_SUB, F2_SUB);
   17c6c:	ebfffd63 	bl	17200 <doArithmetic.constprop.47>
   17c70:	e5c40001 	strb	r0, [r4, #1]
}
   17c74:	e8bd8010 	pop	{r4, pc}

00017c78 <SUB_A_L>:


static void SUB_A_L (Z80Context* ctx)
{
   17c78:	e92d4010 	push	{r4, lr}
	BR.A = doArithmetic(ctx, BR.L, F1_SUB, F2_SUB);
   17c7c:	e3a02001 	mov	r2, #1
   17c80:	e5d01006 	ldrb	r1, [r0, #6]
{
   17c84:	e1a04000 	mov	r4, r0
	BR.A = doArithmetic(ctx, BR.L, F1_SUB, F2_SUB);
   17c88:	ebfffd5c 	bl	17200 <doArithmetic.constprop.47>
   17c8c:	e5c40001 	strb	r0, [r4, #1]
}
   17c90:	e8bd8010 	pop	{r4, pc}

00017c94 <SUB_A_n>:


static void SUB_A_n (Z80Context* ctx)
{
	BR.A = doArithmetic(ctx, read8(ctx, ctx->PC++), F1_SUB, F2_SUB);
   17c94:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 3;
   17c98:	e5903040 	ldr	r3, [r0, #64]	; 0x40
   17c9c:	e2812001 	add	r2, r1, #1
   17ca0:	e2833003 	add	r3, r3, #3
{
   17ca4:	e92d4010 	push	{r4, lr}
   17ca8:	e1a04000 	mov	r4, r0
	BR.A = doArithmetic(ctx, read8(ctx, ctx->PC++), F1_SUB, F2_SUB);
   17cac:	e1c021bc 	strh	r2, [r0, #28]
   17cb0:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   17cb4:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   17cb8:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   17cbc:	e12fff33 	blx	r3
   17cc0:	e3a02001 	mov	r2, #1
   17cc4:	e1a01000 	mov	r1, r0
   17cc8:	e1a00004 	mov	r0, r4
   17ccc:	ebfffd4b 	bl	17200 <doArithmetic.constprop.47>
   17cd0:	e5c40001 	strb	r0, [r4, #1]
}
   17cd4:	e8bd8010 	pop	{r4, pc}

00017cd8 <adjustLogicFlag.constprop.48>:
    VALFLAG(F_S, (BR.A & 0x80) != 0);
   17cd8:	e5d02001 	ldrb	r2, [r0, #1]
   17cdc:	e5d03000 	ldrb	r3, [r0]
	if (val)
   17ce0:	e3120080 	tst	r2, #128	; 0x80
	BR.F |= flag;
   17ce4:	13833080 	orrne	r3, r3, #128	; 0x80
	if (val)
   17ce8:	1a00000e 	bne	17d28 <adjustLogicFlag.constprop.48+0x50>
	BR.F &= ~flag;
   17cec:	e203307f 	and	r3, r3, #127	; 0x7f
	if (val)
   17cf0:	e3520000 	cmp	r2, #0
	BR.F &= ~flag;
   17cf4:	e5c03000 	strb	r3, [r0]
	if (val)
   17cf8:	1a00000a 	bne	17d28 <adjustLogicFlag.constprop.48+0x50>
	BR.F |= flag;
   17cfc:	e3833050 	orr	r3, r3, #80	; 0x50
	BR.F &= ~flag;
   17d00:	e203107c 	and	r1, r3, #124	; 0x7c
	BR.F |= flag;
   17d04:	e3813004 	orr	r3, r1, #4
	if (val)
   17d08:	e3120020 	tst	r2, #32
	BR.F |= flag;
   17d0c:	13833020 	orrne	r3, r3, #32
	BR.F &= ~flag;
   17d10:	020330df 	andeq	r3, r3, #223	; 0xdf
	if (val)
   17d14:	e3120008 	tst	r2, #8
	BR.F |= flag;
   17d18:	13833008 	orrne	r3, r3, #8
	BR.F &= ~flag;
   17d1c:	020330f7 	andeq	r3, r3, #247	; 0xf7
   17d20:	e5c03000 	strb	r3, [r0]
}
   17d24:	e12fff1e 	bx	lr
    VALFLAG(F_PV, parityBit[BR.A]);
   17d28:	e59f1024 	ldr	r1, [pc, #36]	; 17d54 <adjustLogicFlag.constprop.48+0x7c>
	BR.F &= ~flag;
   17d2c:	e3c33040 	bic	r3, r3, #64	; 0x40
	if (val)
   17d30:	e791c102 	ldr	ip, [r1, r2, lsl #2]
	BR.F |= flag;
   17d34:	e3833010 	orr	r3, r3, #16
	BR.F &= ~flag;
   17d38:	e6af3073 	sxtb	r3, r3
   17d3c:	e20310bc 	and	r1, r3, #188	; 0xbc
	if (val)
   17d40:	e35c0000 	cmp	ip, #0
	BR.F &= ~flag;
   17d44:	e5c01000 	strb	r1, [r0]
   17d48:	020330b8 	andeq	r3, r3, #184	; 0xb8
	if (val)
   17d4c:	0affffed 	beq	17d08 <adjustLogicFlag.constprop.48+0x30>
   17d50:	eaffffeb 	b	17d04 <adjustLogicFlag.constprop.48+0x2c>
   17d54:	0004f000 	.word	0x0004f000

00017d58 <AND_off_HL>:
	ctx->tstates += 3;
   17d58:	e5903040 	ldr	r3, [r0, #64]	; 0x40
{
   17d5c:	e92d4010 	push	{r4, lr}
   17d60:	e2833003 	add	r3, r3, #3
   17d64:	e1a04000 	mov	r4, r0
   17d68:	e5803040 	str	r3, [r0, #64]	; 0x40
	doAND(ctx, read8(ctx, WR.HL));
   17d6c:	e1d010b6 	ldrh	r1, [r0, #6]
	return ctx->memRead(ctx->memParam, addr);	
   17d70:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   17d74:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   17d78:	e12fff33 	blx	r3
	BR.A &= value;
   17d7c:	e5d43001 	ldrb	r3, [r4, #1]
   17d80:	e0000003 	and	r0, r0, r3
   17d84:	e5c40001 	strb	r0, [r4, #1]
	adjustLogicFlag(ctx, 1);
   17d88:	e1a00004 	mov	r0, r4
}
   17d8c:	e8bd4010 	pop	{r4, lr}
   17d90:	eaffffd0 	b	17cd8 <adjustLogicFlag.constprop.48>

00017d94 <AND_off_IX_d>:
{
   17d94:	e92d4070 	push	{r4, r5, r6, lr}
   17d98:	e1a04000 	mov	r4, r0
	doAND(ctx, read8(ctx, WR.IX + (char) read8(ctx, ctx->PC++)));
   17d9c:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 5;
   17da0:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	doAND(ctx, read8(ctx, WR.IX + (char) read8(ctx, ctx->PC++)));
   17da4:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
   17da8:	e2833008 	add	r3, r3, #8
   17dac:	e1c021bc 	strh	r2, [r0, #28]
   17db0:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   17db4:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   17db8:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   17dbc:	e1d450b8 	ldrh	r5, [r4, #8]
   17dc0:	e12fff33 	blx	r3
	ctx->tstates += 3;
   17dc4:	e5943040 	ldr	r3, [r4, #64]	; 0x40
   17dc8:	e0851000 	add	r1, r5, r0
   17dcc:	e2833003 	add	r3, r3, #3
   17dd0:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   17dd4:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   17dd8:	e5943024 	ldr	r3, [r4, #36]	; 0x24
   17ddc:	e6ff1071 	uxth	r1, r1
   17de0:	e12fff33 	blx	r3
	BR.A &= value;
   17de4:	e5d43001 	ldrb	r3, [r4, #1]
   17de8:	e0000003 	and	r0, r0, r3
   17dec:	e5c40001 	strb	r0, [r4, #1]
	adjustLogicFlag(ctx, 1);
   17df0:	e1a00004 	mov	r0, r4
}
   17df4:	e8bd4070 	pop	{r4, r5, r6, lr}
   17df8:	eaffffb6 	b	17cd8 <adjustLogicFlag.constprop.48>

00017dfc <AND_off_IY_d>:
{
   17dfc:	e92d4070 	push	{r4, r5, r6, lr}
   17e00:	e1a04000 	mov	r4, r0
	doAND(ctx, read8(ctx, WR.IY + (char) read8(ctx, ctx->PC++)));
   17e04:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 5;
   17e08:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	doAND(ctx, read8(ctx, WR.IY + (char) read8(ctx, ctx->PC++)));
   17e0c:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
   17e10:	e2833008 	add	r3, r3, #8
   17e14:	e1c021bc 	strh	r2, [r0, #28]
   17e18:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   17e1c:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   17e20:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   17e24:	e1d450ba 	ldrh	r5, [r4, #10]
   17e28:	e12fff33 	blx	r3
	ctx->tstates += 3;
   17e2c:	e5943040 	ldr	r3, [r4, #64]	; 0x40
   17e30:	e0851000 	add	r1, r5, r0
   17e34:	e2833003 	add	r3, r3, #3
   17e38:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   17e3c:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   17e40:	e5943024 	ldr	r3, [r4, #36]	; 0x24
   17e44:	e6ff1071 	uxth	r1, r1
   17e48:	e12fff33 	blx	r3
	BR.A &= value;
   17e4c:	e5d43001 	ldrb	r3, [r4, #1]
   17e50:	e0000003 	and	r0, r0, r3
   17e54:	e5c40001 	strb	r0, [r4, #1]
	adjustLogicFlag(ctx, 1);
   17e58:	e1a00004 	mov	r0, r4
}
   17e5c:	e8bd4070 	pop	{r4, r5, r6, lr}
   17e60:	eaffff9c 	b	17cd8 <adjustLogicFlag.constprop.48>

00017e64 <AND_A>:
   17e64:	eaffff9b 	b	17cd8 <adjustLogicFlag.constprop.48>

00017e68 <AND_B>:
	BR.A &= value;
   17e68:	e5d01001 	ldrb	r1, [r0, #1]
   17e6c:	e5d02003 	ldrb	r2, [r0, #3]
   17e70:	e0022001 	and	r2, r2, r1
   17e74:	e5c02001 	strb	r2, [r0, #1]
	adjustLogicFlag(ctx, 1);
   17e78:	eaffff96 	b	17cd8 <adjustLogicFlag.constprop.48>

00017e7c <AND_C>:
	BR.A &= value;
   17e7c:	e5d01001 	ldrb	r1, [r0, #1]
   17e80:	e5d02002 	ldrb	r2, [r0, #2]
   17e84:	e0022001 	and	r2, r2, r1
   17e88:	e5c02001 	strb	r2, [r0, #1]
	adjustLogicFlag(ctx, 1);
   17e8c:	eaffff91 	b	17cd8 <adjustLogicFlag.constprop.48>

00017e90 <AND_D>:
	BR.A &= value;
   17e90:	e5d01001 	ldrb	r1, [r0, #1]
   17e94:	e5d02005 	ldrb	r2, [r0, #5]
   17e98:	e0022001 	and	r2, r2, r1
   17e9c:	e5c02001 	strb	r2, [r0, #1]
	adjustLogicFlag(ctx, 1);
   17ea0:	eaffff8c 	b	17cd8 <adjustLogicFlag.constprop.48>

00017ea4 <AND_E>:
	BR.A &= value;
   17ea4:	e5d01001 	ldrb	r1, [r0, #1]
   17ea8:	e5d02004 	ldrb	r2, [r0, #4]
   17eac:	e0022001 	and	r2, r2, r1
   17eb0:	e5c02001 	strb	r2, [r0, #1]
	adjustLogicFlag(ctx, 1);
   17eb4:	eaffff87 	b	17cd8 <adjustLogicFlag.constprop.48>

00017eb8 <AND_H>:
	BR.A &= value;
   17eb8:	e5d01001 	ldrb	r1, [r0, #1]
   17ebc:	e5d02007 	ldrb	r2, [r0, #7]
   17ec0:	e0022001 	and	r2, r2, r1
   17ec4:	e5c02001 	strb	r2, [r0, #1]
	adjustLogicFlag(ctx, 1);
   17ec8:	eaffff82 	b	17cd8 <adjustLogicFlag.constprop.48>

00017ecc <AND_IXh>:
	BR.A &= value;
   17ecc:	e5d01001 	ldrb	r1, [r0, #1]
   17ed0:	e5d02009 	ldrb	r2, [r0, #9]
   17ed4:	e0022001 	and	r2, r2, r1
   17ed8:	e5c02001 	strb	r2, [r0, #1]
	adjustLogicFlag(ctx, 1);
   17edc:	eaffff7d 	b	17cd8 <adjustLogicFlag.constprop.48>

00017ee0 <AND_IXl>:
	BR.A &= value;
   17ee0:	e5d01001 	ldrb	r1, [r0, #1]
   17ee4:	e5d02008 	ldrb	r2, [r0, #8]
   17ee8:	e0022001 	and	r2, r2, r1
   17eec:	e5c02001 	strb	r2, [r0, #1]
	adjustLogicFlag(ctx, 1);
   17ef0:	eaffff78 	b	17cd8 <adjustLogicFlag.constprop.48>

00017ef4 <AND_IYh>:
	BR.A &= value;
   17ef4:	e5d01001 	ldrb	r1, [r0, #1]
   17ef8:	e5d0200b 	ldrb	r2, [r0, #11]
   17efc:	e0022001 	and	r2, r2, r1
   17f00:	e5c02001 	strb	r2, [r0, #1]
	adjustLogicFlag(ctx, 1);
   17f04:	eaffff73 	b	17cd8 <adjustLogicFlag.constprop.48>

00017f08 <AND_IYl>:
	BR.A &= value;
   17f08:	e5d01001 	ldrb	r1, [r0, #1]
   17f0c:	e5d0200a 	ldrb	r2, [r0, #10]
   17f10:	e0022001 	and	r2, r2, r1
   17f14:	e5c02001 	strb	r2, [r0, #1]
	adjustLogicFlag(ctx, 1);
   17f18:	eaffff6e 	b	17cd8 <adjustLogicFlag.constprop.48>

00017f1c <AND_L>:
	BR.A &= value;
   17f1c:	e5d01001 	ldrb	r1, [r0, #1]
   17f20:	e5d02006 	ldrb	r2, [r0, #6]
   17f24:	e0022001 	and	r2, r2, r1
   17f28:	e5c02001 	strb	r2, [r0, #1]
	adjustLogicFlag(ctx, 1);
   17f2c:	eaffff69 	b	17cd8 <adjustLogicFlag.constprop.48>

00017f30 <AND_n>:
	doAND(ctx, read8(ctx, ctx->PC++));
   17f30:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 3;
   17f34:	e5903040 	ldr	r3, [r0, #64]	; 0x40
{
   17f38:	e92d4010 	push	{r4, lr}
	doAND(ctx, read8(ctx, ctx->PC++));
   17f3c:	e2812001 	add	r2, r1, #1
{
   17f40:	e1a04000 	mov	r4, r0
   17f44:	e2833003 	add	r3, r3, #3
   17f48:	e5803040 	str	r3, [r0, #64]	; 0x40
	doAND(ctx, read8(ctx, ctx->PC++));
   17f4c:	e1c021bc 	strh	r2, [r0, #28]
	return ctx->memRead(ctx->memParam, addr);	
   17f50:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   17f54:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   17f58:	e12fff33 	blx	r3
	BR.A &= value;
   17f5c:	e5d43001 	ldrb	r3, [r4, #1]
   17f60:	e0000003 	and	r0, r0, r3
   17f64:	e5c40001 	strb	r0, [r4, #1]
	adjustLogicFlag(ctx, 1);
   17f68:	e1a00004 	mov	r0, r4
}
   17f6c:	e8bd4010 	pop	{r4, lr}
   17f70:	eaffff58 	b	17cd8 <adjustLogicFlag.constprop.48>

00017f74 <adjustLogicFlag.constprop.49>:
    VALFLAG(F_S, (BR.A & 0x80) != 0);
   17f74:	e5d02001 	ldrb	r2, [r0, #1]
   17f78:	e5d03000 	ldrb	r3, [r0]
	if (val)
   17f7c:	e3120080 	tst	r2, #128	; 0x80
	BR.F |= flag;
   17f80:	13833080 	orrne	r3, r3, #128	; 0x80
	if (val)
   17f84:	1a00000e 	bne	17fc4 <adjustLogicFlag.constprop.49+0x50>
	BR.F &= ~flag;
   17f88:	e203307f 	and	r3, r3, #127	; 0x7f
	if (val)
   17f8c:	e3520000 	cmp	r2, #0
	BR.F &= ~flag;
   17f90:	e5c03000 	strb	r3, [r0]
	if (val)
   17f94:	1a00000a 	bne	17fc4 <adjustLogicFlag.constprop.49+0x50>
	BR.F |= flag;
   17f98:	e3833040 	orr	r3, r3, #64	; 0x40
	BR.F &= ~flag;
   17f9c:	e203106c 	and	r1, r3, #108	; 0x6c
	BR.F |= flag;
   17fa0:	e3813004 	orr	r3, r1, #4
	if (val)
   17fa4:	e3120020 	tst	r2, #32
	BR.F |= flag;
   17fa8:	13833020 	orrne	r3, r3, #32
	BR.F &= ~flag;
   17fac:	020330df 	andeq	r3, r3, #223	; 0xdf
	if (val)
   17fb0:	e3120008 	tst	r2, #8
	BR.F |= flag;
   17fb4:	13833008 	orrne	r3, r3, #8
	BR.F &= ~flag;
   17fb8:	020330f7 	andeq	r3, r3, #247	; 0xf7
   17fbc:	e5c03000 	strb	r3, [r0]
}
   17fc0:	e12fff1e 	bx	lr
    VALFLAG(F_PV, parityBit[BR.A]);
   17fc4:	e59f101c 	ldr	r1, [pc, #28]	; 17fe8 <adjustLogicFlag.constprop.49+0x74>
	BR.F &= ~flag;
   17fc8:	e6af3073 	sxtb	r3, r3
	if (val)
   17fcc:	e791c102 	ldr	ip, [r1, r2, lsl #2]
	BR.F &= ~flag;
   17fd0:	e20310ac 	and	r1, r3, #172	; 0xac
	if (val)
   17fd4:	e35c0000 	cmp	ip, #0
	BR.F &= ~flag;
   17fd8:	e5c01000 	strb	r1, [r0]
   17fdc:	020330a8 	andeq	r3, r3, #168	; 0xa8
	if (val)
   17fe0:	0affffef 	beq	17fa4 <adjustLogicFlag.constprop.49+0x30>
   17fe4:	eaffffed 	b	17fa0 <adjustLogicFlag.constprop.49+0x2c>
   17fe8:	0004f000 	.word	0x0004f000

00017fec <OR_off_HL>:
	ctx->tstates += 3;
   17fec:	e5903040 	ldr	r3, [r0, #64]	; 0x40
{
   17ff0:	e92d4010 	push	{r4, lr}
   17ff4:	e2833003 	add	r3, r3, #3
   17ff8:	e1a04000 	mov	r4, r0
   17ffc:	e5803040 	str	r3, [r0, #64]	; 0x40
	doOR(ctx, read8(ctx, WR.HL));
   18000:	e1d010b6 	ldrh	r1, [r0, #6]
	return ctx->memRead(ctx->memParam, addr);	
   18004:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   18008:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   1800c:	e12fff33 	blx	r3
	BR.A |= value;
   18010:	e5d43001 	ldrb	r3, [r4, #1]
   18014:	e1800003 	orr	r0, r0, r3
   18018:	e5c40001 	strb	r0, [r4, #1]
	adjustLogicFlag(ctx, 0);
   1801c:	e1a00004 	mov	r0, r4
}
   18020:	e8bd4010 	pop	{r4, lr}
   18024:	eaffffd2 	b	17f74 <adjustLogicFlag.constprop.49>

00018028 <OR_off_IX_d>:
{
   18028:	e92d4070 	push	{r4, r5, r6, lr}
   1802c:	e1a04000 	mov	r4, r0
	doOR(ctx, read8(ctx, WR.IX + (char) read8(ctx, ctx->PC++)));
   18030:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 5;
   18034:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	doOR(ctx, read8(ctx, WR.IX + (char) read8(ctx, ctx->PC++)));
   18038:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
   1803c:	e2833008 	add	r3, r3, #8
   18040:	e1c021bc 	strh	r2, [r0, #28]
   18044:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   18048:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   1804c:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   18050:	e1d450b8 	ldrh	r5, [r4, #8]
   18054:	e12fff33 	blx	r3
	ctx->tstates += 3;
   18058:	e5943040 	ldr	r3, [r4, #64]	; 0x40
   1805c:	e0851000 	add	r1, r5, r0
   18060:	e2833003 	add	r3, r3, #3
   18064:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   18068:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   1806c:	e5943024 	ldr	r3, [r4, #36]	; 0x24
   18070:	e6ff1071 	uxth	r1, r1
   18074:	e12fff33 	blx	r3
	BR.A |= value;
   18078:	e5d43001 	ldrb	r3, [r4, #1]
   1807c:	e1800003 	orr	r0, r0, r3
   18080:	e5c40001 	strb	r0, [r4, #1]
	adjustLogicFlag(ctx, 0);
   18084:	e1a00004 	mov	r0, r4
}
   18088:	e8bd4070 	pop	{r4, r5, r6, lr}
   1808c:	eaffffb8 	b	17f74 <adjustLogicFlag.constprop.49>

00018090 <OR_off_IY_d>:
{
   18090:	e92d4070 	push	{r4, r5, r6, lr}
   18094:	e1a04000 	mov	r4, r0
	doOR(ctx, read8(ctx, WR.IY + (char) read8(ctx, ctx->PC++)));
   18098:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 5;
   1809c:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	doOR(ctx, read8(ctx, WR.IY + (char) read8(ctx, ctx->PC++)));
   180a0:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
   180a4:	e2833008 	add	r3, r3, #8
   180a8:	e1c021bc 	strh	r2, [r0, #28]
   180ac:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   180b0:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   180b4:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   180b8:	e1d450ba 	ldrh	r5, [r4, #10]
   180bc:	e12fff33 	blx	r3
	ctx->tstates += 3;
   180c0:	e5943040 	ldr	r3, [r4, #64]	; 0x40
   180c4:	e0851000 	add	r1, r5, r0
   180c8:	e2833003 	add	r3, r3, #3
   180cc:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   180d0:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   180d4:	e5943024 	ldr	r3, [r4, #36]	; 0x24
   180d8:	e6ff1071 	uxth	r1, r1
   180dc:	e12fff33 	blx	r3
	BR.A |= value;
   180e0:	e5d43001 	ldrb	r3, [r4, #1]
   180e4:	e1800003 	orr	r0, r0, r3
   180e8:	e5c40001 	strb	r0, [r4, #1]
	adjustLogicFlag(ctx, 0);
   180ec:	e1a00004 	mov	r0, r4
}
   180f0:	e8bd4070 	pop	{r4, r5, r6, lr}
   180f4:	eaffff9e 	b	17f74 <adjustLogicFlag.constprop.49>

000180f8 <OR_A>:
   180f8:	eaffff9d 	b	17f74 <adjustLogicFlag.constprop.49>

000180fc <OR_B>:
	BR.A |= value;
   180fc:	e5d01001 	ldrb	r1, [r0, #1]
   18100:	e5d02003 	ldrb	r2, [r0, #3]
   18104:	e1822001 	orr	r2, r2, r1
   18108:	e5c02001 	strb	r2, [r0, #1]
	adjustLogicFlag(ctx, 0);
   1810c:	eaffff98 	b	17f74 <adjustLogicFlag.constprop.49>

00018110 <OR_C>:
	BR.A |= value;
   18110:	e5d01001 	ldrb	r1, [r0, #1]
   18114:	e5d02002 	ldrb	r2, [r0, #2]
   18118:	e1822001 	orr	r2, r2, r1
   1811c:	e5c02001 	strb	r2, [r0, #1]
	adjustLogicFlag(ctx, 0);
   18120:	eaffff93 	b	17f74 <adjustLogicFlag.constprop.49>

00018124 <OR_D>:
	BR.A |= value;
   18124:	e5d01001 	ldrb	r1, [r0, #1]
   18128:	e5d02005 	ldrb	r2, [r0, #5]
   1812c:	e1822001 	orr	r2, r2, r1
   18130:	e5c02001 	strb	r2, [r0, #1]
	adjustLogicFlag(ctx, 0);
   18134:	eaffff8e 	b	17f74 <adjustLogicFlag.constprop.49>

00018138 <OR_E>:
	BR.A |= value;
   18138:	e5d01001 	ldrb	r1, [r0, #1]
   1813c:	e5d02004 	ldrb	r2, [r0, #4]
   18140:	e1822001 	orr	r2, r2, r1
   18144:	e5c02001 	strb	r2, [r0, #1]
	adjustLogicFlag(ctx, 0);
   18148:	eaffff89 	b	17f74 <adjustLogicFlag.constprop.49>

0001814c <OR_H>:
	BR.A |= value;
   1814c:	e5d01001 	ldrb	r1, [r0, #1]
   18150:	e5d02007 	ldrb	r2, [r0, #7]
   18154:	e1822001 	orr	r2, r2, r1
   18158:	e5c02001 	strb	r2, [r0, #1]
	adjustLogicFlag(ctx, 0);
   1815c:	eaffff84 	b	17f74 <adjustLogicFlag.constprop.49>

00018160 <OR_IXh>:
	BR.A |= value;
   18160:	e5d01001 	ldrb	r1, [r0, #1]
   18164:	e5d02009 	ldrb	r2, [r0, #9]
   18168:	e1822001 	orr	r2, r2, r1
   1816c:	e5c02001 	strb	r2, [r0, #1]
	adjustLogicFlag(ctx, 0);
   18170:	eaffff7f 	b	17f74 <adjustLogicFlag.constprop.49>

00018174 <OR_IXl>:
	BR.A |= value;
   18174:	e5d01001 	ldrb	r1, [r0, #1]
   18178:	e5d02008 	ldrb	r2, [r0, #8]
   1817c:	e1822001 	orr	r2, r2, r1
   18180:	e5c02001 	strb	r2, [r0, #1]
	adjustLogicFlag(ctx, 0);
   18184:	eaffff7a 	b	17f74 <adjustLogicFlag.constprop.49>

00018188 <OR_IYh>:
	BR.A |= value;
   18188:	e5d01001 	ldrb	r1, [r0, #1]
   1818c:	e5d0200b 	ldrb	r2, [r0, #11]
   18190:	e1822001 	orr	r2, r2, r1
   18194:	e5c02001 	strb	r2, [r0, #1]
	adjustLogicFlag(ctx, 0);
   18198:	eaffff75 	b	17f74 <adjustLogicFlag.constprop.49>

0001819c <OR_IYl>:
	BR.A |= value;
   1819c:	e5d01001 	ldrb	r1, [r0, #1]
   181a0:	e5d0200a 	ldrb	r2, [r0, #10]
   181a4:	e1822001 	orr	r2, r2, r1
   181a8:	e5c02001 	strb	r2, [r0, #1]
	adjustLogicFlag(ctx, 0);
   181ac:	eaffff70 	b	17f74 <adjustLogicFlag.constprop.49>

000181b0 <OR_L>:
	BR.A |= value;
   181b0:	e5d01001 	ldrb	r1, [r0, #1]
   181b4:	e5d02006 	ldrb	r2, [r0, #6]
   181b8:	e1822001 	orr	r2, r2, r1
   181bc:	e5c02001 	strb	r2, [r0, #1]
	adjustLogicFlag(ctx, 0);
   181c0:	eaffff6b 	b	17f74 <adjustLogicFlag.constprop.49>

000181c4 <OR_n>:
	doOR(ctx, read8(ctx, ctx->PC++));
   181c4:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 3;
   181c8:	e5903040 	ldr	r3, [r0, #64]	; 0x40
{
   181cc:	e92d4010 	push	{r4, lr}
	doOR(ctx, read8(ctx, ctx->PC++));
   181d0:	e2812001 	add	r2, r1, #1
{
   181d4:	e1a04000 	mov	r4, r0
   181d8:	e2833003 	add	r3, r3, #3
   181dc:	e5803040 	str	r3, [r0, #64]	; 0x40
	doOR(ctx, read8(ctx, ctx->PC++));
   181e0:	e1c021bc 	strh	r2, [r0, #28]
	return ctx->memRead(ctx->memParam, addr);	
   181e4:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   181e8:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   181ec:	e12fff33 	blx	r3
	BR.A |= value;
   181f0:	e5d43001 	ldrb	r3, [r4, #1]
   181f4:	e1800003 	orr	r0, r0, r3
   181f8:	e5c40001 	strb	r0, [r4, #1]
	adjustLogicFlag(ctx, 0);
   181fc:	e1a00004 	mov	r0, r4
}
   18200:	e8bd4010 	pop	{r4, lr}
   18204:	eaffff5a 	b	17f74 <adjustLogicFlag.constprop.49>

00018208 <XOR_off_HL>:
	ctx->tstates += 3;
   18208:	e5903040 	ldr	r3, [r0, #64]	; 0x40


static void XOR_off_HL (Z80Context* ctx)
{
   1820c:	e92d4010 	push	{r4, lr}
   18210:	e2833003 	add	r3, r3, #3
   18214:	e1a04000 	mov	r4, r0
   18218:	e5803040 	str	r3, [r0, #64]	; 0x40
	doXOR(ctx, read8(ctx, WR.HL));
   1821c:	e1d010b6 	ldrh	r1, [r0, #6]
	return ctx->memRead(ctx->memParam, addr);	
   18220:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   18224:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   18228:	e12fff33 	blx	r3
	BR.A ^= value;
   1822c:	e5d43001 	ldrb	r3, [r4, #1]
   18230:	e0200003 	eor	r0, r0, r3
   18234:	e5c40001 	strb	r0, [r4, #1]
	adjustLogicFlag(ctx, 0);
   18238:	e1a00004 	mov	r0, r4
}
   1823c:	e8bd4010 	pop	{r4, lr}
   18240:	eaffff4b 	b	17f74 <adjustLogicFlag.constprop.49>

00018244 <XOR_off_IX_d>:


static void XOR_off_IX_d (Z80Context* ctx)
{
   18244:	e92d4070 	push	{r4, r5, r6, lr}
   18248:	e1a04000 	mov	r4, r0
	ctx->tstates += 5;
	doXOR(ctx, read8(ctx, WR.IX + (char) read8(ctx, ctx->PC++)));
   1824c:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 5;
   18250:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	doXOR(ctx, read8(ctx, WR.IX + (char) read8(ctx, ctx->PC++)));
   18254:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
   18258:	e2833008 	add	r3, r3, #8
   1825c:	e1c021bc 	strh	r2, [r0, #28]
   18260:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   18264:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   18268:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   1826c:	e1d450b8 	ldrh	r5, [r4, #8]
   18270:	e12fff33 	blx	r3
	ctx->tstates += 3;
   18274:	e5943040 	ldr	r3, [r4, #64]	; 0x40
   18278:	e0851000 	add	r1, r5, r0
   1827c:	e2833003 	add	r3, r3, #3
   18280:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   18284:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   18288:	e5943024 	ldr	r3, [r4, #36]	; 0x24
   1828c:	e6ff1071 	uxth	r1, r1
   18290:	e12fff33 	blx	r3
	BR.A ^= value;
   18294:	e5d43001 	ldrb	r3, [r4, #1]
   18298:	e0200003 	eor	r0, r0, r3
   1829c:	e5c40001 	strb	r0, [r4, #1]
	adjustLogicFlag(ctx, 0);
   182a0:	e1a00004 	mov	r0, r4
}
   182a4:	e8bd4070 	pop	{r4, r5, r6, lr}
   182a8:	eaffff31 	b	17f74 <adjustLogicFlag.constprop.49>

000182ac <XOR_off_IY_d>:


static void XOR_off_IY_d (Z80Context* ctx)
{
   182ac:	e92d4070 	push	{r4, r5, r6, lr}
   182b0:	e1a04000 	mov	r4, r0
	ctx->tstates += 5;
	doXOR(ctx, read8(ctx, WR.IY + (char) read8(ctx, ctx->PC++)));
   182b4:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 5;
   182b8:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	doXOR(ctx, read8(ctx, WR.IY + (char) read8(ctx, ctx->PC++)));
   182bc:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
   182c0:	e2833008 	add	r3, r3, #8
   182c4:	e1c021bc 	strh	r2, [r0, #28]
   182c8:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   182cc:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   182d0:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   182d4:	e1d450ba 	ldrh	r5, [r4, #10]
   182d8:	e12fff33 	blx	r3
	ctx->tstates += 3;
   182dc:	e5943040 	ldr	r3, [r4, #64]	; 0x40
   182e0:	e0851000 	add	r1, r5, r0
   182e4:	e2833003 	add	r3, r3, #3
   182e8:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   182ec:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   182f0:	e5943024 	ldr	r3, [r4, #36]	; 0x24
   182f4:	e6ff1071 	uxth	r1, r1
   182f8:	e12fff33 	blx	r3
	BR.A ^= value;
   182fc:	e5d43001 	ldrb	r3, [r4, #1]
   18300:	e0200003 	eor	r0, r0, r3
   18304:	e5c40001 	strb	r0, [r4, #1]
	adjustLogicFlag(ctx, 0);
   18308:	e1a00004 	mov	r0, r4
}
   1830c:	e8bd4070 	pop	{r4, r5, r6, lr}
   18310:	eaffff17 	b	17f74 <adjustLogicFlag.constprop.49>

00018314 <XOR_B>:
	BR.A ^= value;
   18314:	e5d01001 	ldrb	r1, [r0, #1]
   18318:	e5d02003 	ldrb	r2, [r0, #3]
   1831c:	e0222001 	eor	r2, r2, r1
   18320:	e5c02001 	strb	r2, [r0, #1]
	adjustLogicFlag(ctx, 0);
   18324:	eaffff12 	b	17f74 <adjustLogicFlag.constprop.49>

00018328 <XOR_C>:
	BR.A ^= value;
   18328:	e5d01001 	ldrb	r1, [r0, #1]
   1832c:	e5d02002 	ldrb	r2, [r0, #2]
   18330:	e0222001 	eor	r2, r2, r1
   18334:	e5c02001 	strb	r2, [r0, #1]
	adjustLogicFlag(ctx, 0);
   18338:	eaffff0d 	b	17f74 <adjustLogicFlag.constprop.49>

0001833c <XOR_D>:
	BR.A ^= value;
   1833c:	e5d01001 	ldrb	r1, [r0, #1]
   18340:	e5d02005 	ldrb	r2, [r0, #5]
   18344:	e0222001 	eor	r2, r2, r1
   18348:	e5c02001 	strb	r2, [r0, #1]
	adjustLogicFlag(ctx, 0);
   1834c:	eaffff08 	b	17f74 <adjustLogicFlag.constprop.49>

00018350 <XOR_E>:
	BR.A ^= value;
   18350:	e5d01001 	ldrb	r1, [r0, #1]
   18354:	e5d02004 	ldrb	r2, [r0, #4]
   18358:	e0222001 	eor	r2, r2, r1
   1835c:	e5c02001 	strb	r2, [r0, #1]
	adjustLogicFlag(ctx, 0);
   18360:	eaffff03 	b	17f74 <adjustLogicFlag.constprop.49>

00018364 <XOR_H>:
	BR.A ^= value;
   18364:	e5d01001 	ldrb	r1, [r0, #1]
   18368:	e5d02007 	ldrb	r2, [r0, #7]
   1836c:	e0222001 	eor	r2, r2, r1
   18370:	e5c02001 	strb	r2, [r0, #1]
	adjustLogicFlag(ctx, 0);
   18374:	eafffefe 	b	17f74 <adjustLogicFlag.constprop.49>

00018378 <XOR_IXh>:
	BR.A ^= value;
   18378:	e5d01001 	ldrb	r1, [r0, #1]
   1837c:	e5d02009 	ldrb	r2, [r0, #9]
   18380:	e0222001 	eor	r2, r2, r1
   18384:	e5c02001 	strb	r2, [r0, #1]
	adjustLogicFlag(ctx, 0);
   18388:	eafffef9 	b	17f74 <adjustLogicFlag.constprop.49>

0001838c <XOR_IXl>:
	BR.A ^= value;
   1838c:	e5d01001 	ldrb	r1, [r0, #1]
   18390:	e5d02008 	ldrb	r2, [r0, #8]
   18394:	e0222001 	eor	r2, r2, r1
   18398:	e5c02001 	strb	r2, [r0, #1]
	adjustLogicFlag(ctx, 0);
   1839c:	eafffef4 	b	17f74 <adjustLogicFlag.constprop.49>

000183a0 <XOR_IYh>:
	BR.A ^= value;
   183a0:	e5d01001 	ldrb	r1, [r0, #1]
   183a4:	e5d0200b 	ldrb	r2, [r0, #11]
   183a8:	e0222001 	eor	r2, r2, r1
   183ac:	e5c02001 	strb	r2, [r0, #1]
	adjustLogicFlag(ctx, 0);
   183b0:	eafffeef 	b	17f74 <adjustLogicFlag.constprop.49>

000183b4 <XOR_IYl>:
	BR.A ^= value;
   183b4:	e5d01001 	ldrb	r1, [r0, #1]
   183b8:	e5d0200a 	ldrb	r2, [r0, #10]
   183bc:	e0222001 	eor	r2, r2, r1
   183c0:	e5c02001 	strb	r2, [r0, #1]
	adjustLogicFlag(ctx, 0);
   183c4:	eafffeea 	b	17f74 <adjustLogicFlag.constprop.49>

000183c8 <XOR_L>:
	BR.A ^= value;
   183c8:	e5d01001 	ldrb	r1, [r0, #1]
   183cc:	e5d02006 	ldrb	r2, [r0, #6]
   183d0:	e0222001 	eor	r2, r2, r1
   183d4:	e5c02001 	strb	r2, [r0, #1]
	adjustLogicFlag(ctx, 0);
   183d8:	eafffee5 	b	17f74 <adjustLogicFlag.constprop.49>

000183dc <XOR_n>:
}


static void XOR_n (Z80Context* ctx)
{
	doXOR(ctx, read8(ctx, ctx->PC++));
   183dc:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 3;
   183e0:	e5903040 	ldr	r3, [r0, #64]	; 0x40
{
   183e4:	e92d4010 	push	{r4, lr}
	doXOR(ctx, read8(ctx, ctx->PC++));
   183e8:	e2812001 	add	r2, r1, #1
{
   183ec:	e1a04000 	mov	r4, r0
   183f0:	e2833003 	add	r3, r3, #3
   183f4:	e5803040 	str	r3, [r0, #64]	; 0x40
	doXOR(ctx, read8(ctx, ctx->PC++));
   183f8:	e1c021bc 	strh	r2, [r0, #28]
	return ctx->memRead(ctx->memParam, addr);	
   183fc:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   18400:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   18404:	e12fff33 	blx	r3
	BR.A ^= value;
   18408:	e5d43001 	ldrb	r3, [r4, #1]
   1840c:	e0200003 	eor	r0, r0, r3
   18410:	e5c40001 	strb	r0, [r4, #1]
	adjustLogicFlag(ctx, 0);
   18414:	e1a00004 	mov	r0, r4
}
   18418:	e8bd4010 	pop	{r4, lr}
   1841c:	eafffed4 	b	17f74 <adjustLogicFlag.constprop.49>

00018420 <NOP>:
   18420:	e12fff1e 	bx	lr

00018424 <LD_B_B>:
   18424:	e12fff1e 	bx	lr

00018428 <LD_C_C>:
   18428:	e12fff1e 	bx	lr

0001842c <LD_D_D>:
   1842c:	e12fff1e 	bx	lr

00018430 <LD_E_E>:
   18430:	e12fff1e 	bx	lr

00018434 <LD_H_H>:
   18434:	e12fff1e 	bx	lr

00018438 <LD_IXh_IXh>:
   18438:	e12fff1e 	bx	lr

0001843c <LD_IXl_IXl>:
   1843c:	e12fff1e 	bx	lr

00018440 <LD_IYh_IYh>:
   18440:	e12fff1e 	bx	lr

00018444 <LD_IYl_IYl>:
   18444:	e12fff1e 	bx	lr

00018448 <JR_off_PC_e>:
	int off = doComplement(read8(ctx, ctx->PC++));
   18448:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 3;
   1844c:	e5903040 	ldr	r3, [r0, #64]	; 0x40
   18450:	e2812001 	add	r2, r1, #1
   18454:	e2833003 	add	r3, r3, #3
{
   18458:	e92d4010 	push	{r4, lr}
   1845c:	e1a04000 	mov	r4, r0
	int off = doComplement(read8(ctx, ctx->PC++));
   18460:	e1c021bc 	strh	r2, [r0, #28]
   18464:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   18468:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   1846c:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   18470:	e12fff33 	blx	r3
	if ((v & 0x80) == 0)
   18474:	e3100080 	tst	r0, #128	; 0x80
	v++;
   18478:	12600000 	rsbne	r0, r0, #0
	return -v;
   1847c:	16ef0070 	uxtbne	r0, r0
		ctx->tstates += 5;
   18480:	e5942040 	ldr	r2, [r4, #64]	; 0x40
		ctx->PC += off;
   18484:	e1d431bc 	ldrh	r3, [r4, #28]
   18488:	12600000 	rsbne	r0, r0, #0
		ctx->tstates += 5;
   1848c:	e2822005 	add	r2, r2, #5
		ctx->PC += off;
   18490:	e0830000 	add	r0, r3, r0
		ctx->tstates += 5;
   18494:	e5842040 	str	r2, [r4, #64]	; 0x40
		ctx->PC += off;
   18498:	e1c401bc 	strh	r0, [r4, #28]
}
   1849c:	e8bd8010 	pop	{r4, pc}

000184a0 <JR_C_off_PC_e>:
	int off = doComplement(read8(ctx, ctx->PC++));
   184a0:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 3;
   184a4:	e5903040 	ldr	r3, [r0, #64]	; 0x40
   184a8:	e2812001 	add	r2, r1, #1
   184ac:	e2833003 	add	r3, r3, #3
{
   184b0:	e92d4010 	push	{r4, lr}
   184b4:	e5803040 	str	r3, [r0, #64]	; 0x40
   184b8:	e1a04000 	mov	r4, r0
	return ctx->memRead(ctx->memParam, addr);	
   184bc:	e5903024 	ldr	r3, [r0, #36]	; 0x24
	int off = doComplement(read8(ctx, ctx->PC++));
   184c0:	e1c021bc 	strh	r2, [r0, #28]
   184c4:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   184c8:	e12fff33 	blx	r3
	if ((v & 0x80) == 0)
   184cc:	e3100080 	tst	r0, #128	; 0x80
	v++;
   184d0:	12600000 	rsbne	r0, r0, #0
	return (BR.F & flag) != 0;
   184d4:	e5d43000 	ldrb	r3, [r4]
	return -v;
   184d8:	16ef0070 	uxtbne	r0, r0
   184dc:	12600000 	rsbne	r0, r0, #0
	if (condition(ctx, C_C))
   184e0:	e3130001 	tst	r3, #1
   184e4:	08bd8010 	popeq	{r4, pc}
		ctx->tstates += 5;
   184e8:	e5942040 	ldr	r2, [r4, #64]	; 0x40
		ctx->PC += off;
   184ec:	e1d431bc 	ldrh	r3, [r4, #28]
		ctx->tstates += 5;
   184f0:	e2822005 	add	r2, r2, #5
		ctx->PC += off;
   184f4:	e0830000 	add	r0, r3, r0
		ctx->tstates += 5;
   184f8:	e5842040 	str	r2, [r4, #64]	; 0x40
		ctx->PC += off;
   184fc:	e1c401bc 	strh	r0, [r4, #28]
}
   18500:	e8bd8010 	pop	{r4, pc}

00018504 <JR_NC_off_PC_e>:
	int off = doComplement(read8(ctx, ctx->PC++));
   18504:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 3;
   18508:	e5903040 	ldr	r3, [r0, #64]	; 0x40
   1850c:	e2812001 	add	r2, r1, #1
   18510:	e2833003 	add	r3, r3, #3
{
   18514:	e92d4010 	push	{r4, lr}
   18518:	e5803040 	str	r3, [r0, #64]	; 0x40
   1851c:	e1a04000 	mov	r4, r0
	return ctx->memRead(ctx->memParam, addr);	
   18520:	e5903024 	ldr	r3, [r0, #36]	; 0x24
	int off = doComplement(read8(ctx, ctx->PC++));
   18524:	e1c021bc 	strh	r2, [r0, #28]
   18528:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   1852c:	e12fff33 	blx	r3
	if ((v & 0x80) == 0)
   18530:	e3100080 	tst	r0, #128	; 0x80
	v++;
   18534:	12600000 	rsbne	r0, r0, #0
	return (BR.F & flag) != 0;
   18538:	e5d43000 	ldrb	r3, [r4]
	return -v;
   1853c:	16ef0070 	uxtbne	r0, r0
   18540:	12600000 	rsbne	r0, r0, #0
	if (condition(ctx, C_NC))
   18544:	e3130001 	tst	r3, #1
   18548:	18bd8010 	popne	{r4, pc}
		ctx->tstates += 5;
   1854c:	e5942040 	ldr	r2, [r4, #64]	; 0x40
		ctx->PC += off;
   18550:	e1d431bc 	ldrh	r3, [r4, #28]
		ctx->tstates += 5;
   18554:	e2822005 	add	r2, r2, #5
		ctx->PC += off;
   18558:	e0830000 	add	r0, r3, r0
		ctx->tstates += 5;
   1855c:	e5842040 	str	r2, [r4, #64]	; 0x40
		ctx->PC += off;
   18560:	e1c401bc 	strh	r0, [r4, #28]
}
   18564:	e8bd8010 	pop	{r4, pc}

00018568 <JR_NZ_off_PC_e>:
	int off = doComplement(read8(ctx, ctx->PC++));
   18568:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 3;
   1856c:	e5903040 	ldr	r3, [r0, #64]	; 0x40
   18570:	e2812001 	add	r2, r1, #1
   18574:	e2833003 	add	r3, r3, #3
{
   18578:	e92d4010 	push	{r4, lr}
   1857c:	e5803040 	str	r3, [r0, #64]	; 0x40
   18580:	e1a04000 	mov	r4, r0
	return ctx->memRead(ctx->memParam, addr);	
   18584:	e5903024 	ldr	r3, [r0, #36]	; 0x24
	int off = doComplement(read8(ctx, ctx->PC++));
   18588:	e1c021bc 	strh	r2, [r0, #28]
   1858c:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   18590:	e12fff33 	blx	r3
	if ((v & 0x80) == 0)
   18594:	e3100080 	tst	r0, #128	; 0x80
	v++;
   18598:	12600000 	rsbne	r0, r0, #0
	return (BR.F & flag) != 0;
   1859c:	e5d43000 	ldrb	r3, [r4]
	return -v;
   185a0:	16ef0070 	uxtbne	r0, r0
   185a4:	12600000 	rsbne	r0, r0, #0
	if (condition(ctx, C_NZ))
   185a8:	e3130040 	tst	r3, #64	; 0x40
   185ac:	18bd8010 	popne	{r4, pc}
		ctx->tstates += 5;
   185b0:	e5942040 	ldr	r2, [r4, #64]	; 0x40
		ctx->PC += off;
   185b4:	e1d431bc 	ldrh	r3, [r4, #28]
		ctx->tstates += 5;
   185b8:	e2822005 	add	r2, r2, #5
		ctx->PC += off;
   185bc:	e0830000 	add	r0, r3, r0
		ctx->tstates += 5;
   185c0:	e5842040 	str	r2, [r4, #64]	; 0x40
		ctx->PC += off;
   185c4:	e1c401bc 	strh	r0, [r4, #28]
}
   185c8:	e8bd8010 	pop	{r4, pc}

000185cc <RLA>:
	BR.A = doRL(ctx, 0, BR.A);
   185cc:	e5d02001 	ldrb	r2, [r0, #1]
   185d0:	e5d03000 	ldrb	r3, [r0]
	if (val)
   185d4:	e3120080 	tst	r2, #128	; 0x80
    val <<= 1;
   185d8:	e1a02082 	lsl	r2, r2, #1
	return (BR.F & flag) != 0;
   185dc:	e2031001 	and	r1, r3, #1
    val <<= 1;
   185e0:	e6ef2072 	uxtb	r2, r2
    val |= (byte)CY;
   185e4:	e1812002 	orr	r2, r1, r2
	BR.F |= flag;
   185e8:	13833001 	orrne	r3, r3, #1
	BR.F &= ~flag;
   185ec:	020330fe 	andeq	r3, r3, #254	; 0xfe
	if (val)
   185f0:	e3120020 	tst	r2, #32
	BR.F |= flag;
   185f4:	13833020 	orrne	r3, r3, #32
	BR.F &= ~flag;
   185f8:	020330df 	andeq	r3, r3, #223	; 0xdf
	if (val)
   185fc:	e3120008 	tst	r2, #8
	BR.F |= flag;
   18600:	13833008 	orrne	r3, r3, #8
	BR.F &= ~flag;
   18604:	020330f7 	andeq	r3, r3, #247	; 0xf7
   18608:	e3c33012 	bic	r3, r3, #18
   1860c:	e5c03000 	strb	r3, [r0]
   18610:	e5c02001 	strb	r2, [r0, #1]
}
   18614:	e12fff1e 	bx	lr

00018618 <RLCA>:
	BR.A = doRLC(ctx, 0, BR.A);
   18618:	e5d02001 	ldrb	r2, [r0, #1]
   1861c:	e5d01000 	ldrb	r1, [r0]
	if (val)
   18620:	e3120080 	tst	r2, #128	; 0x80
	BR.F |= flag;
   18624:	13a0c001 	movne	ip, #1
   18628:	03a0c000 	moveq	ip, #0
    val <<= 1;
   1862c:	e1a03082 	lsl	r3, r2, #1
   18630:	e6ef3073 	uxtb	r3, r3
    val |= (byte)GETFLAG(F_C);
   18634:	e183300c 	orr	r3, r3, ip
	BR.F |= flag;
   18638:	13811001 	orrne	r1, r1, #1
	BR.F &= ~flag;
   1863c:	020110fe 	andeq	r1, r1, #254	; 0xfe
	if (val)
   18640:	e3130020 	tst	r3, #32
	BR.F |= flag;
   18644:	13812020 	orrne	r2, r1, #32
	BR.F &= ~flag;
   18648:	020120df 	andeq	r2, r1, #223	; 0xdf
	if (val)
   1864c:	e3130008 	tst	r3, #8
	BR.F |= flag;
   18650:	13822008 	orrne	r2, r2, #8
	BR.F &= ~flag;
   18654:	020220f7 	andeq	r2, r2, #247	; 0xf7
   18658:	e3c22012 	bic	r2, r2, #18
   1865c:	e5c02000 	strb	r2, [r0]
   18660:	e5c03001 	strb	r3, [r0, #1]
}
   18664:	e12fff1e 	bx	lr

00018668 <RRA>:
{
   18668:	e5d03000 	ldrb	r3, [r0]
	BR.A = doRR(ctx, 0, BR.A);
   1866c:	e5d02001 	ldrb	r2, [r0, #1]
	return (BR.F & flag) != 0;
   18670:	e2031001 	and	r1, r3, #1
	if (val)
   18674:	e3120001 	tst	r2, #1
    val >>= 1;
   18678:	e1a020a2 	lsr	r2, r2, #1
    val |= (CY << 7);
   1867c:	e1822381 	orr	r2, r2, r1, lsl #7
	BR.F |= flag;
   18680:	13833001 	orrne	r3, r3, #1
	BR.F &= ~flag;
   18684:	020330fe 	andeq	r3, r3, #254	; 0xfe
	if (val)
   18688:	e3120020 	tst	r2, #32
	BR.F |= flag;
   1868c:	13833020 	orrne	r3, r3, #32
	BR.F &= ~flag;
   18690:	020330df 	andeq	r3, r3, #223	; 0xdf
	if (val)
   18694:	e3120008 	tst	r2, #8
	BR.F |= flag;
   18698:	13833008 	orrne	r3, r3, #8
	BR.F &= ~flag;
   1869c:	020330f7 	andeq	r3, r3, #247	; 0xf7
   186a0:	e3c33012 	bic	r3, r3, #18
   186a4:	e5c03000 	strb	r3, [r0]
   186a8:	e5c02001 	strb	r2, [r0, #1]
}
   186ac:	e12fff1e 	bx	lr

000186b0 <RRCA>:
	BR.A = doRRC(ctx, 0, BR.A);
   186b0:	e5d01001 	ldrb	r1, [r0, #1]
   186b4:	e5d03000 	ldrb	r3, [r0]
	if (val)
   186b8:	e3110001 	tst	r1, #1
	BR.F |= flag;
   186bc:	13e0207f 	mvnne	r2, #127	; 0x7f
   186c0:	03a02000 	moveq	r2, #0
    val |= ((byte)GETFLAG(F_C) << 7);
   186c4:	e18220a1 	orr	r2, r2, r1, lsr #1
   186c8:	e6ef2072 	uxtb	r2, r2
	BR.F |= flag;
   186cc:	13833001 	orrne	r3, r3, #1
	BR.F &= ~flag;
   186d0:	020330fe 	andeq	r3, r3, #254	; 0xfe
	if (val)
   186d4:	e3120020 	tst	r2, #32
	BR.F |= flag;
   186d8:	13833020 	orrne	r3, r3, #32
	BR.F &= ~flag;
   186dc:	020330df 	andeq	r3, r3, #223	; 0xdf
	if (val)
   186e0:	e3120008 	tst	r2, #8
	BR.F |= flag;
   186e4:	13833008 	orrne	r3, r3, #8
	BR.F &= ~flag;
   186e8:	020330f7 	andeq	r3, r3, #247	; 0xf7
   186ec:	e3c33012 	bic	r3, r3, #18
   186f0:	e5c03000 	strb	r3, [r0]
   186f4:	e5c02001 	strb	r2, [r0, #1]
}
   186f8:	e12fff1e 	bx	lr

000186fc <BIT_0_off_HL>:
	ctx->tstates += 3;
   186fc:	e5903040 	ldr	r3, [r0, #64]	; 0x40
{
   18700:	e92d4010 	push	{r4, lr}
   18704:	e2833004 	add	r3, r3, #4
   18708:	e1a04000 	mov	r4, r0
   1870c:	e5803040 	str	r3, [r0, #64]	; 0x40
	doBIT_r(ctx, 0, read8(ctx, WR.HL));
   18710:	e1d010b6 	ldrh	r1, [r0, #6]
	return ctx->memRead(ctx->memParam, addr);	
   18714:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   18718:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   1871c:	e12fff33 	blx	r3
	BR.F &= ~flag;
   18720:	e5d43000 	ldrb	r3, [r4]
	if (val & (1 << b))
   18724:	e3100001 	tst	r0, #1
	BR.F &= ~flag;
   18728:	120330bb 	andne	r3, r3, #187	; 0xbb
	BR.F |= flag;
   1872c:	03833044 	orreq	r3, r3, #68	; 0x44
   18730:	e3833010 	orr	r3, r3, #16
	BR.F &= ~flag;
   18734:	e6af3073 	sxtb	r3, r3
	if (val)
   18738:	e3100020 	tst	r0, #32
	BR.F &= ~flag;
   1873c:	1203307d 	andne	r3, r3, #125	; 0x7d
	BR.F |= flag;
   18740:	13833020 	orrne	r3, r3, #32
	BR.F &= ~flag;
   18744:	0203305d 	andeq	r3, r3, #93	; 0x5d
	if (val)
   18748:	e3100008 	tst	r0, #8
	BR.F |= flag;
   1874c:	13833008 	orrne	r3, r3, #8
	BR.F &= ~flag;
   18750:	02033075 	andeq	r3, r3, #117	; 0x75
   18754:	e5c43000 	strb	r3, [r4]
}
   18758:	e8bd8010 	pop	{r4, pc}

0001875c <BIT_1_off_HL>:
	ctx->tstates += 3;
   1875c:	e5903040 	ldr	r3, [r0, #64]	; 0x40
{
   18760:	e92d4010 	push	{r4, lr}
   18764:	e2833004 	add	r3, r3, #4
   18768:	e1a04000 	mov	r4, r0
   1876c:	e5803040 	str	r3, [r0, #64]	; 0x40
	doBIT_r(ctx, 1, read8(ctx, WR.HL));
   18770:	e1d010b6 	ldrh	r1, [r0, #6]
	return ctx->memRead(ctx->memParam, addr);	
   18774:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   18778:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   1877c:	e12fff33 	blx	r3
	BR.F &= ~flag;
   18780:	e5d43000 	ldrb	r3, [r4]
	if (val & (1 << b))
   18784:	e3100002 	tst	r0, #2
	BR.F &= ~flag;
   18788:	120330bb 	andne	r3, r3, #187	; 0xbb
	BR.F |= flag;
   1878c:	03833044 	orreq	r3, r3, #68	; 0x44
   18790:	e3833010 	orr	r3, r3, #16
	BR.F &= ~flag;
   18794:	e6af3073 	sxtb	r3, r3
	if (val)
   18798:	e3100020 	tst	r0, #32
	BR.F &= ~flag;
   1879c:	1203307d 	andne	r3, r3, #125	; 0x7d
	BR.F |= flag;
   187a0:	13833020 	orrne	r3, r3, #32
	BR.F &= ~flag;
   187a4:	0203305d 	andeq	r3, r3, #93	; 0x5d
	if (val)
   187a8:	e3100008 	tst	r0, #8
	BR.F |= flag;
   187ac:	13833008 	orrne	r3, r3, #8
	BR.F &= ~flag;
   187b0:	02033075 	andeq	r3, r3, #117	; 0x75
   187b4:	e5c43000 	strb	r3, [r4]
}
   187b8:	e8bd8010 	pop	{r4, pc}

000187bc <BIT_2_off_HL>:
	ctx->tstates += 3;
   187bc:	e5903040 	ldr	r3, [r0, #64]	; 0x40
{
   187c0:	e92d4010 	push	{r4, lr}
   187c4:	e2833004 	add	r3, r3, #4
   187c8:	e1a04000 	mov	r4, r0
   187cc:	e5803040 	str	r3, [r0, #64]	; 0x40
	doBIT_r(ctx, 2, read8(ctx, WR.HL));
   187d0:	e1d010b6 	ldrh	r1, [r0, #6]
	return ctx->memRead(ctx->memParam, addr);	
   187d4:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   187d8:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   187dc:	e12fff33 	blx	r3
	BR.F &= ~flag;
   187e0:	e5d43000 	ldrb	r3, [r4]
	if (val & (1 << b))
   187e4:	e3100004 	tst	r0, #4
	BR.F &= ~flag;
   187e8:	120330bb 	andne	r3, r3, #187	; 0xbb
	BR.F |= flag;
   187ec:	03833044 	orreq	r3, r3, #68	; 0x44
   187f0:	e3833010 	orr	r3, r3, #16
	BR.F &= ~flag;
   187f4:	e6af3073 	sxtb	r3, r3
	if (val)
   187f8:	e3100020 	tst	r0, #32
	BR.F &= ~flag;
   187fc:	1203307d 	andne	r3, r3, #125	; 0x7d
	BR.F |= flag;
   18800:	13833020 	orrne	r3, r3, #32
	BR.F &= ~flag;
   18804:	0203305d 	andeq	r3, r3, #93	; 0x5d
	if (val)
   18808:	e3100008 	tst	r0, #8
	BR.F |= flag;
   1880c:	13833008 	orrne	r3, r3, #8
	BR.F &= ~flag;
   18810:	02033075 	andeq	r3, r3, #117	; 0x75
   18814:	e5c43000 	strb	r3, [r4]
}
   18818:	e8bd8010 	pop	{r4, pc}

0001881c <BIT_3_off_HL>:
	ctx->tstates += 3;
   1881c:	e5903040 	ldr	r3, [r0, #64]	; 0x40
{
   18820:	e92d4010 	push	{r4, lr}
   18824:	e2833004 	add	r3, r3, #4
   18828:	e1a04000 	mov	r4, r0
   1882c:	e5803040 	str	r3, [r0, #64]	; 0x40
	doBIT_r(ctx, 3, read8(ctx, WR.HL));
   18830:	e1d010b6 	ldrh	r1, [r0, #6]
	return ctx->memRead(ctx->memParam, addr);	
   18834:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   18838:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   1883c:	e12fff33 	blx	r3
	BR.F &= ~flag;
   18840:	e5d43000 	ldrb	r3, [r4]
	if (val & (1 << b))
   18844:	e3100008 	tst	r0, #8
	BR.F &= ~flag;
   18848:	120330bb 	andne	r3, r3, #187	; 0xbb
	BR.F |= flag;
   1884c:	03833044 	orreq	r3, r3, #68	; 0x44
   18850:	e3833010 	orr	r3, r3, #16
	BR.F &= ~flag;
   18854:	e6af3073 	sxtb	r3, r3
	if (val)
   18858:	e3100020 	tst	r0, #32
	BR.F &= ~flag;
   1885c:	1203307d 	andne	r3, r3, #125	; 0x7d
	BR.F |= flag;
   18860:	13833020 	orrne	r3, r3, #32
	BR.F &= ~flag;
   18864:	0203305d 	andeq	r3, r3, #93	; 0x5d
	if (val)
   18868:	e3100008 	tst	r0, #8
	BR.F |= flag;
   1886c:	13833008 	orrne	r3, r3, #8
	BR.F &= ~flag;
   18870:	02033075 	andeq	r3, r3, #117	; 0x75
   18874:	e5c43000 	strb	r3, [r4]
}
   18878:	e8bd8010 	pop	{r4, pc}

0001887c <BIT_4_off_HL>:
	ctx->tstates += 3;
   1887c:	e5903040 	ldr	r3, [r0, #64]	; 0x40
{
   18880:	e92d4010 	push	{r4, lr}
   18884:	e2833004 	add	r3, r3, #4
   18888:	e1a04000 	mov	r4, r0
   1888c:	e5803040 	str	r3, [r0, #64]	; 0x40
	doBIT_r(ctx, 4, read8(ctx, WR.HL));
   18890:	e1d010b6 	ldrh	r1, [r0, #6]
	return ctx->memRead(ctx->memParam, addr);	
   18894:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   18898:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   1889c:	e12fff33 	blx	r3
	BR.F &= ~flag;
   188a0:	e5d43000 	ldrb	r3, [r4]
	if (val & (1 << b))
   188a4:	e3100010 	tst	r0, #16
	BR.F &= ~flag;
   188a8:	120330bb 	andne	r3, r3, #187	; 0xbb
	BR.F |= flag;
   188ac:	03833044 	orreq	r3, r3, #68	; 0x44
   188b0:	e3833010 	orr	r3, r3, #16
	BR.F &= ~flag;
   188b4:	e6af3073 	sxtb	r3, r3
	if (val)
   188b8:	e3100020 	tst	r0, #32
	BR.F &= ~flag;
   188bc:	1203307d 	andne	r3, r3, #125	; 0x7d
	BR.F |= flag;
   188c0:	13833020 	orrne	r3, r3, #32
	BR.F &= ~flag;
   188c4:	0203305d 	andeq	r3, r3, #93	; 0x5d
	if (val)
   188c8:	e3100008 	tst	r0, #8
	BR.F |= flag;
   188cc:	13833008 	orrne	r3, r3, #8
	BR.F &= ~flag;
   188d0:	02033075 	andeq	r3, r3, #117	; 0x75
   188d4:	e5c43000 	strb	r3, [r4]
}
   188d8:	e8bd8010 	pop	{r4, pc}

000188dc <BIT_5_off_HL>:
	ctx->tstates += 3;
   188dc:	e5903040 	ldr	r3, [r0, #64]	; 0x40
{
   188e0:	e92d4010 	push	{r4, lr}
   188e4:	e2833004 	add	r3, r3, #4
   188e8:	e1a04000 	mov	r4, r0
   188ec:	e5803040 	str	r3, [r0, #64]	; 0x40
	doBIT_r(ctx, 5, read8(ctx, WR.HL));
   188f0:	e1d010b6 	ldrh	r1, [r0, #6]
	return ctx->memRead(ctx->memParam, addr);	
   188f4:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   188f8:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   188fc:	e12fff33 	blx	r3
	BR.F &= ~flag;
   18900:	e5d43000 	ldrb	r3, [r4]
	if (val & (1 << b))
   18904:	e3100020 	tst	r0, #32
	BR.F &= ~flag;
   18908:	120330bb 	andne	r3, r3, #187	; 0xbb
	BR.F |= flag;
   1890c:	03833044 	orreq	r3, r3, #68	; 0x44
   18910:	e3833010 	orr	r3, r3, #16
	BR.F &= ~flag;
   18914:	e6af3073 	sxtb	r3, r3
	if (val)
   18918:	e3100020 	tst	r0, #32
	BR.F &= ~flag;
   1891c:	1203307d 	andne	r3, r3, #125	; 0x7d
	BR.F |= flag;
   18920:	13833020 	orrne	r3, r3, #32
	BR.F &= ~flag;
   18924:	0203305d 	andeq	r3, r3, #93	; 0x5d
	if (val)
   18928:	e3100008 	tst	r0, #8
	BR.F |= flag;
   1892c:	13833008 	orrne	r3, r3, #8
	BR.F &= ~flag;
   18930:	02033075 	andeq	r3, r3, #117	; 0x75
   18934:	e5c43000 	strb	r3, [r4]
}
   18938:	e8bd8010 	pop	{r4, pc}

0001893c <BIT_6_off_HL>:
	ctx->tstates += 3;
   1893c:	e5903040 	ldr	r3, [r0, #64]	; 0x40
{
   18940:	e92d4010 	push	{r4, lr}
   18944:	e2833004 	add	r3, r3, #4
   18948:	e1a04000 	mov	r4, r0
   1894c:	e5803040 	str	r3, [r0, #64]	; 0x40
	doBIT_r(ctx, 6, read8(ctx, WR.HL));
   18950:	e1d010b6 	ldrh	r1, [r0, #6]
	return ctx->memRead(ctx->memParam, addr);	
   18954:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   18958:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   1895c:	e12fff33 	blx	r3
	BR.F &= ~flag;
   18960:	e5d43000 	ldrb	r3, [r4]
	if (val & (1 << b))
   18964:	e3100040 	tst	r0, #64	; 0x40
	BR.F &= ~flag;
   18968:	120330bb 	andne	r3, r3, #187	; 0xbb
	BR.F |= flag;
   1896c:	03833044 	orreq	r3, r3, #68	; 0x44
   18970:	e3833010 	orr	r3, r3, #16
	BR.F &= ~flag;
   18974:	e6af3073 	sxtb	r3, r3
	if (val)
   18978:	e3100020 	tst	r0, #32
	BR.F &= ~flag;
   1897c:	1203307d 	andne	r3, r3, #125	; 0x7d
	BR.F |= flag;
   18980:	13833020 	orrne	r3, r3, #32
	BR.F &= ~flag;
   18984:	0203305d 	andeq	r3, r3, #93	; 0x5d
	if (val)
   18988:	e3100008 	tst	r0, #8
	BR.F |= flag;
   1898c:	13833008 	orrne	r3, r3, #8
	BR.F &= ~flag;
   18990:	02033075 	andeq	r3, r3, #117	; 0x75
   18994:	e5c43000 	strb	r3, [r4]
}
   18998:	e8bd8010 	pop	{r4, pc}

0001899c <BIT_7_off_HL>:
	ctx->tstates += 3;
   1899c:	e5903040 	ldr	r3, [r0, #64]	; 0x40
{
   189a0:	e92d4010 	push	{r4, lr}
   189a4:	e2833004 	add	r3, r3, #4
   189a8:	e1a04000 	mov	r4, r0
   189ac:	e5803040 	str	r3, [r0, #64]	; 0x40
	doBIT_r(ctx, 7, read8(ctx, WR.HL));
   189b0:	e1d010b6 	ldrh	r1, [r0, #6]
	return ctx->memRead(ctx->memParam, addr);	
   189b4:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   189b8:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   189bc:	e12fff33 	blx	r3
	if (val & (1 << b))
   189c0:	e1b033a0 	lsrs	r3, r0, #7
	BR.F &= ~flag;
   189c4:	e5d43000 	ldrb	r3, [r4]
   189c8:	120330bb 	andne	r3, r3, #187	; 0xbb
	BR.F |= flag;
   189cc:	03833044 	orreq	r3, r3, #68	; 0x44
   189d0:	e3833010 	orr	r3, r3, #16
	BR.F &= ~flag;
   189d4:	e203307d 	and	r3, r3, #125	; 0x7d
    if ((b == 7) && !GETFLAG(F_Z))
   189d8:	e3130040 	tst	r3, #64	; 0x40
	BR.F |= flag;
   189dc:	03833080 	orreq	r3, r3, #128	; 0x80
	if (val)
   189e0:	e3100020 	tst	r0, #32
	BR.F |= flag;
   189e4:	13833020 	orrne	r3, r3, #32
	BR.F &= ~flag;
   189e8:	020330dd 	andeq	r3, r3, #221	; 0xdd
	if (val)
   189ec:	e3100008 	tst	r0, #8
	BR.F |= flag;
   189f0:	13833008 	orrne	r3, r3, #8
	BR.F &= ~flag;
   189f4:	020330f7 	andeq	r3, r3, #247	; 0xf7
   189f8:	e5c43000 	strb	r3, [r4]
}
   189fc:	e8bd8010 	pop	{r4, pc}

00018a00 <CP_off_HL>:
	ctx->tstates += 3;
   18a00:	e5903040 	ldr	r3, [r0, #64]	; 0x40
{
   18a04:	e92d4070 	push	{r4, r5, r6, lr}
   18a08:	e2833003 	add	r3, r3, #3
   18a0c:	e1a04000 	mov	r4, r0
	byte val = read8(ctx, WR.HL);
   18a10:	e1d010b6 	ldrh	r1, [r0, #6]
	ctx->tstates += 3;
   18a14:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   18a18:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   18a1c:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   18a20:	e12fff33 	blx	r3
   18a24:	e1a05000 	mov	r5, r0
	byte result = doArithmetic(ctx, val, 0, 1);	
   18a28:	e1a01000 	mov	r1, r0
   18a2c:	e3a02001 	mov	r2, #1
   18a30:	e1a00004 	mov	r0, r4
   18a34:	ebfff9f1 	bl	17200 <doArithmetic.constprop.47>
	BR.F |= flag;
   18a38:	e5d43000 	ldrb	r3, [r4]
	if (val)
   18a3c:	e3150020 	tst	r5, #32
	BR.F |= flag;
   18a40:	13833020 	orrne	r3, r3, #32
	BR.F &= ~flag;
   18a44:	020330df 	andeq	r3, r3, #223	; 0xdf
	if (val)
   18a48:	e3150008 	tst	r5, #8
	BR.F |= flag;
   18a4c:	13833008 	orrne	r3, r3, #8
	BR.F &= ~flag;
   18a50:	020330f7 	andeq	r3, r3, #247	; 0xf7
   18a54:	e5c43000 	strb	r3, [r4]
}
   18a58:	e8bd8070 	pop	{r4, r5, r6, pc}

00018a5c <CPDR>:
	ctx->tstates += 3;
   18a5c:	e5903040 	ldr	r3, [r0, #64]	; 0x40
{
   18a60:	e92d4070 	push	{r4, r5, r6, lr}
   18a64:	e2833008 	add	r3, r3, #8
   18a68:	e1a04000 	mov	r4, r0
	byte val = read8(ctx, WR.HL);
   18a6c:	e1d010b6 	ldrh	r1, [r0, #6]
	return (BR.F & flag) != 0;
   18a70:	e5d05000 	ldrb	r5, [r0]
	ctx->tstates += 3;
   18a74:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   18a78:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   18a7c:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   18a80:	e12fff33 	blx	r3
   18a84:	e1a06000 	mov	r6, r0
	byte result = doArithmetic(ctx, val, 0, 1);	
   18a88:	e1a01000 	mov	r1, r0
   18a8c:	e3a02001 	mov	r2, #1
   18a90:	e1a00004 	mov	r0, r4
   18a94:	ebfff9d9 	bl	17200 <doArithmetic.constprop.47>
	BR.F |= flag;
   18a98:	e5d43000 	ldrb	r3, [r4]
	if (val)
   18a9c:	e3160020 	tst	r6, #32
	BR.F |= flag;
   18aa0:	13833020 	orrne	r3, r3, #32
	BR.F &= ~flag;
   18aa4:	020330df 	andeq	r3, r3, #223	; 0xdf
	WR.BC--;
   18aa8:	e1d420b2 	ldrh	r2, [r4, #2]
	if (val)
   18aac:	e3160008 	tst	r6, #8
	BR.F |= flag;
   18ab0:	13833008 	orrne	r3, r3, #8
	BR.F &= ~flag;
   18ab4:	020330f7 	andeq	r3, r3, #247	; 0xf7
	if(GETFLAG(F_H))
   18ab8:	e3130010 	tst	r3, #16
	WR.BC--;
   18abc:	e2422001 	sub	r2, r2, #1
		value--;
   18ac0:	12400001 	subne	r0, r0, #1
	WR.BC--;
   18ac4:	e6ff2072 	uxth	r2, r2
		value--;
   18ac8:	16ef0070 	uxtbne	r0, r0
	return (BR.F & flag) != 0;
   18acc:	e2055001 	and	r5, r5, #1
	if (val)
   18ad0:	e3520000 	cmp	r2, #0
	BR.F |= flag;
   18ad4:	13833004 	orrne	r3, r3, #4
	BR.F &= ~flag;
   18ad8:	020330fb 	andeq	r3, r3, #251	; 0xfb
	if(carry)
   18adc:	e3550000 	cmp	r5, #0
	BR.F |= flag;
   18ae0:	13833001 	orrne	r3, r3, #1
	BR.F &= ~flag;
   18ae4:	020330fe 	andeq	r3, r3, #254	; 0xfe
	WR.HL--;
   18ae8:	e1d410b6 	ldrh	r1, [r4, #6]
	if (val)
   18aec:	e3100002 	tst	r0, #2
	BR.F |= flag;
   18af0:	13833020 	orrne	r3, r3, #32
	BR.F &= ~flag;
   18af4:	020330df 	andeq	r3, r3, #223	; 0xdf
	if (val)
   18af8:	e3100008 	tst	r0, #8
	BR.F |= flag;
   18afc:	13833008 	orrne	r3, r3, #8
	BR.F &= ~flag;
   18b00:	020330f7 	andeq	r3, r3, #247	; 0xf7
   18b04:	e2411001 	sub	r1, r1, #1
	if (WR.BC != 0 && !GETFLAG(F_Z))
   18b08:	e3520000 	cmp	r2, #0
	WR.BC--;
   18b0c:	e1c420b2 	strh	r2, [r4, #2]
	WR.HL--;
   18b10:	e1c410b6 	strh	r1, [r4, #6]
   18b14:	e5c43000 	strb	r3, [r4]
	if (WR.BC != 0 && !GETFLAG(F_Z))
   18b18:	08bd8070 	popeq	{r4, r5, r6, pc}
   18b1c:	e3130040 	tst	r3, #64	; 0x40
   18b20:	18bd8070 	popne	{r4, r5, r6, pc}
		ctx->tstates += 5;
   18b24:	e5942040 	ldr	r2, [r4, #64]	; 0x40
		ctx->PC -= 2;
   18b28:	e1d431bc 	ldrh	r3, [r4, #28]
		ctx->tstates += 5;
   18b2c:	e2822005 	add	r2, r2, #5
		ctx->PC -= 2;
   18b30:	e2433002 	sub	r3, r3, #2
		ctx->tstates += 5;
   18b34:	e5842040 	str	r2, [r4, #64]	; 0x40
		ctx->PC -= 2;
   18b38:	e1c431bc 	strh	r3, [r4, #28]
}
   18b3c:	e8bd8070 	pop	{r4, r5, r6, pc}

00018b40 <CPIR>:
	ctx->tstates += 3;
   18b40:	e5903040 	ldr	r3, [r0, #64]	; 0x40
{
   18b44:	e92d4070 	push	{r4, r5, r6, lr}
   18b48:	e2833008 	add	r3, r3, #8
   18b4c:	e1a04000 	mov	r4, r0
	byte val = read8(ctx, WR.HL);
   18b50:	e1d010b6 	ldrh	r1, [r0, #6]
	return (BR.F & flag) != 0;
   18b54:	e5d05000 	ldrb	r5, [r0]
	ctx->tstates += 3;
   18b58:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   18b5c:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   18b60:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   18b64:	e12fff33 	blx	r3
   18b68:	e1a06000 	mov	r6, r0
	byte result = doArithmetic(ctx, val, 0, 1);	
   18b6c:	e1a01000 	mov	r1, r0
   18b70:	e3a02001 	mov	r2, #1
   18b74:	e1a00004 	mov	r0, r4
   18b78:	ebfff9a0 	bl	17200 <doArithmetic.constprop.47>
	BR.F |= flag;
   18b7c:	e5d43000 	ldrb	r3, [r4]
	if (val)
   18b80:	e3160020 	tst	r6, #32
	BR.F |= flag;
   18b84:	13833020 	orrne	r3, r3, #32
	BR.F &= ~flag;
   18b88:	020330df 	andeq	r3, r3, #223	; 0xdf
	WR.BC--;
   18b8c:	e1d420b2 	ldrh	r2, [r4, #2]
	if (val)
   18b90:	e3160008 	tst	r6, #8
	BR.F |= flag;
   18b94:	13833008 	orrne	r3, r3, #8
	BR.F &= ~flag;
   18b98:	020330f7 	andeq	r3, r3, #247	; 0xf7
	if(GETFLAG(F_H))
   18b9c:	e3130010 	tst	r3, #16
	WR.BC--;
   18ba0:	e2422001 	sub	r2, r2, #1
		value--;
   18ba4:	12400001 	subne	r0, r0, #1
	WR.BC--;
   18ba8:	e6ff2072 	uxth	r2, r2
		value--;
   18bac:	16ef0070 	uxtbne	r0, r0
	return (BR.F & flag) != 0;
   18bb0:	e2055001 	and	r5, r5, #1
	if (val)
   18bb4:	e3520000 	cmp	r2, #0
	BR.F |= flag;
   18bb8:	13833004 	orrne	r3, r3, #4
	BR.F &= ~flag;
   18bbc:	020330fb 	andeq	r3, r3, #251	; 0xfb
	if (val)
   18bc0:	e3550000 	cmp	r5, #0
	BR.F |= flag;
   18bc4:	13833001 	orrne	r3, r3, #1
	BR.F &= ~flag;
   18bc8:	020330fe 	andeq	r3, r3, #254	; 0xfe
	WR.HL++;
   18bcc:	e1d410b6 	ldrh	r1, [r4, #6]
	if (val)
   18bd0:	e3100004 	tst	r0, #4
	BR.F |= flag;
   18bd4:	13833020 	orrne	r3, r3, #32
	BR.F &= ~flag;
   18bd8:	020330df 	andeq	r3, r3, #223	; 0xdf
	if (val)
   18bdc:	e3100008 	tst	r0, #8
	BR.F |= flag;
   18be0:	13833008 	orrne	r3, r3, #8
	BR.F &= ~flag;
   18be4:	020330f7 	andeq	r3, r3, #247	; 0xf7
   18be8:	e2811001 	add	r1, r1, #1
	if (WR.BC != 0 && !GETFLAG(F_Z))
   18bec:	e3520000 	cmp	r2, #0
	WR.BC--;
   18bf0:	e1c420b2 	strh	r2, [r4, #2]
	WR.HL++;
   18bf4:	e1c410b6 	strh	r1, [r4, #6]
   18bf8:	e5c43000 	strb	r3, [r4]
	if (WR.BC != 0 && !GETFLAG(F_Z))
   18bfc:	08bd8070 	popeq	{r4, r5, r6, pc}
   18c00:	e3130040 	tst	r3, #64	; 0x40
   18c04:	18bd8070 	popne	{r4, r5, r6, pc}
		ctx->tstates += 5;
   18c08:	e5942040 	ldr	r2, [r4, #64]	; 0x40
		ctx->PC -= 2;
   18c0c:	e1d431bc 	ldrh	r3, [r4, #28]
		ctx->tstates += 5;
   18c10:	e2822005 	add	r2, r2, #5
		ctx->PC -= 2;
   18c14:	e2433002 	sub	r3, r3, #2
		ctx->tstates += 5;
   18c18:	e5842040 	str	r2, [r4, #64]	; 0x40
		ctx->PC -= 2;
   18c1c:	e1c431bc 	strh	r3, [r4, #28]
}
   18c20:	e8bd8070 	pop	{r4, r5, r6, pc}

00018c24 <CPI>:
	ctx->tstates += 3;
   18c24:	e5903040 	ldr	r3, [r0, #64]	; 0x40
{
   18c28:	e92d4070 	push	{r4, r5, r6, lr}
   18c2c:	e2833008 	add	r3, r3, #8
   18c30:	e1a04000 	mov	r4, r0
	byte val = read8(ctx, WR.HL);
   18c34:	e1d010b6 	ldrh	r1, [r0, #6]
	return (BR.F & flag) != 0;
   18c38:	e5d05000 	ldrb	r5, [r0]
	ctx->tstates += 3;
   18c3c:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   18c40:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   18c44:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   18c48:	e12fff33 	blx	r3
   18c4c:	e1a06000 	mov	r6, r0
	byte result = doArithmetic(ctx, val, 0, 1);	
   18c50:	e1a01000 	mov	r1, r0
   18c54:	e3a02001 	mov	r2, #1
   18c58:	e1a00004 	mov	r0, r4
   18c5c:	ebfff967 	bl	17200 <doArithmetic.constprop.47>
	BR.F |= flag;
   18c60:	e5d43000 	ldrb	r3, [r4]
	if (val)
   18c64:	e3160020 	tst	r6, #32
	BR.F |= flag;
   18c68:	13833020 	orrne	r3, r3, #32
	BR.F &= ~flag;
   18c6c:	020330df 	andeq	r3, r3, #223	; 0xdf
	WR.BC--;
   18c70:	e1d420b2 	ldrh	r2, [r4, #2]
	if (val)
   18c74:	e3160008 	tst	r6, #8
	BR.F |= flag;
   18c78:	13833008 	orrne	r3, r3, #8
	BR.F &= ~flag;
   18c7c:	020330f7 	andeq	r3, r3, #247	; 0xf7
	if(GETFLAG(F_H))
   18c80:	e3130010 	tst	r3, #16
	WR.BC--;
   18c84:	e2422001 	sub	r2, r2, #1
		value--;
   18c88:	12400001 	subne	r0, r0, #1
	WR.BC--;
   18c8c:	e6ff2072 	uxth	r2, r2
		value--;
   18c90:	16ef0070 	uxtbne	r0, r0
	return (BR.F & flag) != 0;
   18c94:	e2055001 	and	r5, r5, #1
	if (val)
   18c98:	e3520000 	cmp	r2, #0
	BR.F |= flag;
   18c9c:	13833004 	orrne	r3, r3, #4
	BR.F &= ~flag;
   18ca0:	020330fb 	andeq	r3, r3, #251	; 0xfb
	if (val)
   18ca4:	e3550000 	cmp	r5, #0
	BR.F |= flag;
   18ca8:	13833001 	orrne	r3, r3, #1
	BR.F &= ~flag;
   18cac:	020330fe 	andeq	r3, r3, #254	; 0xfe
	WR.HL++;
   18cb0:	e1d410b6 	ldrh	r1, [r4, #6]
	if (val)
   18cb4:	e3100004 	tst	r0, #4
	BR.F |= flag;
   18cb8:	13833020 	orrne	r3, r3, #32
	BR.F &= ~flag;
   18cbc:	020330df 	andeq	r3, r3, #223	; 0xdf
	if (val)
   18cc0:	e3100008 	tst	r0, #8
   18cc4:	e2811001 	add	r1, r1, #1
	BR.F |= flag;
   18cc8:	13833008 	orrne	r3, r3, #8
	BR.F &= ~flag;
   18ccc:	020330f7 	andeq	r3, r3, #247	; 0xf7
	WR.BC--;
   18cd0:	e1c420b2 	strh	r2, [r4, #2]
	WR.HL++;
   18cd4:	e1c410b6 	strh	r1, [r4, #6]
   18cd8:	e5c43000 	strb	r3, [r4]
}
   18cdc:	e8bd8070 	pop	{r4, r5, r6, pc}

00018ce0 <LDIR>:
	ctx->tstates += 3;
   18ce0:	e5903040 	ldr	r3, [r0, #64]	; 0x40
{
   18ce4:	e92d4070 	push	{r4, r5, r6, lr}
   18ce8:	e2833005 	add	r3, r3, #5
   18cec:	e1a04000 	mov	r4, r0
	byte val = read8(ctx, WR.HL);
   18cf0:	e1d010b6 	ldrh	r1, [r0, #6]
   18cf4:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   18cf8:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   18cfc:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   18d00:	e12fff33 	blx	r3
   18d04:	e1a05000 	mov	r5, r0
	ctx->tstates += 3;
   18d08:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	ctx->memWrite(ctx->memParam, addr, val);	
   18d0c:	e1a02000 	mov	r2, r0
	ctx->tstates += 3;
   18d10:	e2833003 	add	r3, r3, #3
	ctx->memWrite(ctx->memParam, addr, val);	
   18d14:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
	write8(ctx, WR.DE, val);
   18d18:	e1d410b4 	ldrh	r1, [r4, #4]
	ctx->tstates += 3;
   18d1c:	e5843040 	str	r3, [r4, #64]	; 0x40
	ctx->memWrite(ctx->memParam, addr, val);	
   18d20:	e5943028 	ldr	r3, [r4, #40]	; 0x28
   18d24:	e12fff33 	blx	r3
	VALFLAG(F_5, (BR.A + val) & 0x02);
   18d28:	e5d43001 	ldrb	r3, [r4, #1]
	WR.BC--;
   18d2c:	e1d420b2 	ldrh	r2, [r4, #2]
	VALFLAG(F_5, (BR.A + val) & 0x02);
   18d30:	e0855003 	add	r5, r5, r3
	WR.HL++;
   18d34:	e1d430b6 	ldrh	r3, [r4, #6]
	VALFLAG(F_5, (BR.A + val) & 0x02);
   18d38:	e6ef5075 	uxtb	r5, r5
	WR.HL++;
   18d3c:	e2833001 	add	r3, r3, #1
   18d40:	e1c430b6 	strh	r3, [r4, #6]
	BR.F |= flag;
   18d44:	e5d43000 	ldrb	r3, [r4]
	if (val)
   18d48:	e3150002 	tst	r5, #2
	WR.DE++;
   18d4c:	e1d410b4 	ldrh	r1, [r4, #4]
	WR.BC--;
   18d50:	e2422001 	sub	r2, r2, #1
   18d54:	e6ff2072 	uxth	r2, r2
	BR.F |= flag;
   18d58:	13833020 	orrne	r3, r3, #32
	BR.F &= ~flag;
   18d5c:	020330df 	andeq	r3, r3, #223	; 0xdf
	if (val)
   18d60:	e3150008 	tst	r5, #8
	WR.DE++;
   18d64:	e2811001 	add	r1, r1, #1
	BR.F |= flag;
   18d68:	13833008 	orrne	r3, r3, #8
	BR.F &= ~flag;
   18d6c:	020330f7 	andeq	r3, r3, #247	; 0xf7
	if (val)
   18d70:	e3520000 	cmp	r2, #0
	BR.F &= ~flag;
   18d74:	e6af3073 	sxtb	r3, r3
   18d78:	e1c410b4 	strh	r1, [r4, #4]
		ctx->tstates += 5;
   18d7c:	15940040 	ldrne	r0, [r4, #64]	; 0x40
		ctx->PC -= 2;
   18d80:	11d411bc 	ldrhne	r1, [r4, #28]
	WR.BC--;
   18d84:	e1c420b2 	strh	r2, [r4, #2]
   18d88:	e20320ed 	and	r2, r3, #237	; 0xed
		ctx->tstates += 5;
   18d8c:	12800005 	addne	r0, r0, #5
		ctx->PC -= 2;
   18d90:	12411002 	subne	r1, r1, #2
	BR.F |= flag;
   18d94:	13823004 	orrne	r3, r2, #4
	BR.F &= ~flag;
   18d98:	020330e9 	andeq	r3, r3, #233	; 0xe9
   18d9c:	e5c42000 	strb	r2, [r4]
		ctx->tstates += 5;
   18da0:	15840040 	strne	r0, [r4, #64]	; 0x40
		ctx->PC -= 2;
   18da4:	11c411bc 	strhne	r1, [r4, #28]
   18da8:	e5c43000 	strb	r3, [r4]
}
   18dac:	e8bd8070 	pop	{r4, r5, r6, pc}

00018db0 <LDDR>:
	ctx->tstates += 3;
   18db0:	e5903040 	ldr	r3, [r0, #64]	; 0x40
{
   18db4:	e92d4070 	push	{r4, r5, r6, lr}
   18db8:	e2833005 	add	r3, r3, #5
   18dbc:	e1a04000 	mov	r4, r0
	byte val = read8(ctx, WR.HL);
   18dc0:	e1d010b6 	ldrh	r1, [r0, #6]
   18dc4:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   18dc8:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   18dcc:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   18dd0:	e12fff33 	blx	r3
   18dd4:	e1a05000 	mov	r5, r0
	ctx->tstates += 3;
   18dd8:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	ctx->memWrite(ctx->memParam, addr, val);	
   18ddc:	e1a02000 	mov	r2, r0
	ctx->tstates += 3;
   18de0:	e2833003 	add	r3, r3, #3
	ctx->memWrite(ctx->memParam, addr, val);	
   18de4:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
	write8(ctx, WR.DE, val);
   18de8:	e1d410b4 	ldrh	r1, [r4, #4]
	ctx->tstates += 3;
   18dec:	e5843040 	str	r3, [r4, #64]	; 0x40
	ctx->memWrite(ctx->memParam, addr, val);	
   18df0:	e5943028 	ldr	r3, [r4, #40]	; 0x28
   18df4:	e12fff33 	blx	r3
	VALFLAG(F_5, ((BR.A + val) & 0x02) != 0);
   18df8:	e5d43001 	ldrb	r3, [r4, #1]
	WR.BC--;
   18dfc:	e1d420b2 	ldrh	r2, [r4, #2]
	VALFLAG(F_5, ((BR.A + val) & 0x02) != 0);
   18e00:	e0855003 	add	r5, r5, r3
	WR.HL--;
   18e04:	e1d430b6 	ldrh	r3, [r4, #6]
	VALFLAG(F_5, ((BR.A + val) & 0x02) != 0);
   18e08:	e6ef5075 	uxtb	r5, r5
	WR.HL--;
   18e0c:	e2433001 	sub	r3, r3, #1
   18e10:	e1c430b6 	strh	r3, [r4, #6]
	BR.F |= flag;
   18e14:	e5d43000 	ldrb	r3, [r4]
	if (val)
   18e18:	e3150002 	tst	r5, #2
	WR.DE--;
   18e1c:	e1d410b4 	ldrh	r1, [r4, #4]
	WR.BC--;
   18e20:	e2422001 	sub	r2, r2, #1
   18e24:	e6ff2072 	uxth	r2, r2
	BR.F |= flag;
   18e28:	13833020 	orrne	r3, r3, #32
	BR.F &= ~flag;
   18e2c:	020330df 	andeq	r3, r3, #223	; 0xdf
	if (val)
   18e30:	e3150008 	tst	r5, #8
	WR.DE--;
   18e34:	e2411001 	sub	r1, r1, #1
	BR.F |= flag;
   18e38:	13833008 	orrne	r3, r3, #8
	BR.F &= ~flag;
   18e3c:	020330f7 	andeq	r3, r3, #247	; 0xf7
	if (val)
   18e40:	e3520000 	cmp	r2, #0
	BR.F &= ~flag;
   18e44:	e6af3073 	sxtb	r3, r3
   18e48:	e1c410b4 	strh	r1, [r4, #4]
		ctx->tstates += 5;
   18e4c:	15940040 	ldrne	r0, [r4, #64]	; 0x40
		ctx->PC -= 2;
   18e50:	11d411bc 	ldrhne	r1, [r4, #28]
	WR.BC--;
   18e54:	e1c420b2 	strh	r2, [r4, #2]
   18e58:	e20320ed 	and	r2, r3, #237	; 0xed
		ctx->tstates += 5;
   18e5c:	12800005 	addne	r0, r0, #5
		ctx->PC -= 2;
   18e60:	12411002 	subne	r1, r1, #2
	BR.F |= flag;
   18e64:	13823004 	orrne	r3, r2, #4
	BR.F &= ~flag;
   18e68:	020330e9 	andeq	r3, r3, #233	; 0xe9
   18e6c:	e5c42000 	strb	r2, [r4]
		ctx->tstates += 5;
   18e70:	15840040 	strne	r0, [r4, #64]	; 0x40
		ctx->PC -= 2;
   18e74:	11c411bc 	strhne	r1, [r4, #28]
   18e78:	e5c43000 	strb	r3, [r4]
}
   18e7c:	e8bd8070 	pop	{r4, r5, r6, pc}

00018e80 <BIT_3_D>:
	doBIT_r(ctx, 3, BR.D);
   18e80:	e5d02005 	ldrb	r2, [r0, #5]
   18e84:	e5d03000 	ldrb	r3, [r0]
	if (val & (1 << b))
   18e88:	e3120008 	tst	r2, #8
	BR.F &= ~flag;
   18e8c:	120330bb 	andne	r3, r3, #187	; 0xbb
	BR.F |= flag;
   18e90:	03833044 	orreq	r3, r3, #68	; 0x44
   18e94:	e3833010 	orr	r3, r3, #16
	BR.F &= ~flag;
   18e98:	e6af3073 	sxtb	r3, r3
	if (val)
   18e9c:	e3120020 	tst	r2, #32
	BR.F &= ~flag;
   18ea0:	1203307d 	andne	r3, r3, #125	; 0x7d
	BR.F |= flag;
   18ea4:	13833020 	orrne	r3, r3, #32
	BR.F &= ~flag;
   18ea8:	0203305d 	andeq	r3, r3, #93	; 0x5d
	if (val)
   18eac:	e3120008 	tst	r2, #8
	BR.F |= flag;
   18eb0:	13833008 	orrne	r3, r3, #8
	BR.F &= ~flag;
   18eb4:	02033075 	andeq	r3, r3, #117	; 0x75
   18eb8:	e5c03000 	strb	r3, [r0]
}
   18ebc:	e12fff1e 	bx	lr

00018ec0 <BIT_5_E>:
	doBIT_r(ctx, 5, BR.E);
   18ec0:	e5d02004 	ldrb	r2, [r0, #4]
   18ec4:	e5d03000 	ldrb	r3, [r0]
	if (val & (1 << b))
   18ec8:	e3120020 	tst	r2, #32
	BR.F &= ~flag;
   18ecc:	120330bb 	andne	r3, r3, #187	; 0xbb
	BR.F |= flag;
   18ed0:	03833044 	orreq	r3, r3, #68	; 0x44
   18ed4:	e3833010 	orr	r3, r3, #16
	BR.F &= ~flag;
   18ed8:	e6af3073 	sxtb	r3, r3
	if (val)
   18edc:	e3120020 	tst	r2, #32
	BR.F &= ~flag;
   18ee0:	1203307d 	andne	r3, r3, #125	; 0x7d
	BR.F |= flag;
   18ee4:	13833020 	orrne	r3, r3, #32
	BR.F &= ~flag;
   18ee8:	0203305d 	andeq	r3, r3, #93	; 0x5d
	if (val)
   18eec:	e3120008 	tst	r2, #8
	BR.F |= flag;
   18ef0:	13833008 	orrne	r3, r3, #8
	BR.F &= ~flag;
   18ef4:	02033075 	andeq	r3, r3, #117	; 0x75
   18ef8:	e5c03000 	strb	r3, [r0]
}
   18efc:	e12fff1e 	bx	lr

00018f00 <BIT_6_C>:
	doBIT_r(ctx, 6, BR.C);
   18f00:	e5d02002 	ldrb	r2, [r0, #2]
   18f04:	e5d03000 	ldrb	r3, [r0]
	if (val & (1 << b))
   18f08:	e3120040 	tst	r2, #64	; 0x40
	BR.F &= ~flag;
   18f0c:	120330bb 	andne	r3, r3, #187	; 0xbb
	BR.F |= flag;
   18f10:	03833044 	orreq	r3, r3, #68	; 0x44
   18f14:	e3833010 	orr	r3, r3, #16
	BR.F &= ~flag;
   18f18:	e6af3073 	sxtb	r3, r3
	if (val)
   18f1c:	e3120020 	tst	r2, #32
	BR.F &= ~flag;
   18f20:	1203307d 	andne	r3, r3, #125	; 0x7d
	BR.F |= flag;
   18f24:	13833020 	orrne	r3, r3, #32
	BR.F &= ~flag;
   18f28:	0203305d 	andeq	r3, r3, #93	; 0x5d
	if (val)
   18f2c:	e3120008 	tst	r2, #8
	BR.F |= flag;
   18f30:	13833008 	orrne	r3, r3, #8
	BR.F &= ~flag;
   18f34:	02033075 	andeq	r3, r3, #117	; 0x75
   18f38:	e5c03000 	strb	r3, [r0]
}
   18f3c:	e12fff1e 	bx	lr

00018f40 <BIT_6_A>:
	doBIT_r(ctx, 6, BR.A);
   18f40:	e5d02001 	ldrb	r2, [r0, #1]
   18f44:	e5d03000 	ldrb	r3, [r0]
	if (val & (1 << b))
   18f48:	e3120040 	tst	r2, #64	; 0x40
	BR.F &= ~flag;
   18f4c:	120330bb 	andne	r3, r3, #187	; 0xbb
	BR.F |= flag;
   18f50:	03833044 	orreq	r3, r3, #68	; 0x44
   18f54:	e3833010 	orr	r3, r3, #16
	BR.F &= ~flag;
   18f58:	e6af3073 	sxtb	r3, r3
	if (val)
   18f5c:	e3120020 	tst	r2, #32
	BR.F &= ~flag;
   18f60:	1203307d 	andne	r3, r3, #125	; 0x7d
	BR.F |= flag;
   18f64:	13833020 	orrne	r3, r3, #32
	BR.F &= ~flag;
   18f68:	0203305d 	andeq	r3, r3, #93	; 0x5d
	if (val)
   18f6c:	e3120008 	tst	r2, #8
	BR.F |= flag;
   18f70:	13833008 	orrne	r3, r3, #8
	BR.F &= ~flag;
   18f74:	02033075 	andeq	r3, r3, #117	; 0x75
   18f78:	e5c03000 	strb	r3, [r0]
}
   18f7c:	e12fff1e 	bx	lr

00018f80 <BIT_3_A>:
	doBIT_r(ctx, 3, BR.A);
   18f80:	e5d02001 	ldrb	r2, [r0, #1]
   18f84:	e5d03000 	ldrb	r3, [r0]
	if (val & (1 << b))
   18f88:	e3120008 	tst	r2, #8
	BR.F &= ~flag;
   18f8c:	120330bb 	andne	r3, r3, #187	; 0xbb
	BR.F |= flag;
   18f90:	03833044 	orreq	r3, r3, #68	; 0x44
   18f94:	e3833010 	orr	r3, r3, #16
	BR.F &= ~flag;
   18f98:	e6af3073 	sxtb	r3, r3
	if (val)
   18f9c:	e3120020 	tst	r2, #32
	BR.F &= ~flag;
   18fa0:	1203307d 	andne	r3, r3, #125	; 0x7d
	BR.F |= flag;
   18fa4:	13833020 	orrne	r3, r3, #32
	BR.F &= ~flag;
   18fa8:	0203305d 	andeq	r3, r3, #93	; 0x5d
	if (val)
   18fac:	e3120008 	tst	r2, #8
	BR.F |= flag;
   18fb0:	13833008 	orrne	r3, r3, #8
	BR.F &= ~flag;
   18fb4:	02033075 	andeq	r3, r3, #117	; 0x75
   18fb8:	e5c03000 	strb	r3, [r0]
}
   18fbc:	e12fff1e 	bx	lr

00018fc0 <BIT_2_L>:
	doBIT_r(ctx, 2, BR.L);
   18fc0:	e5d02006 	ldrb	r2, [r0, #6]
   18fc4:	e5d03000 	ldrb	r3, [r0]
	if (val & (1 << b))
   18fc8:	e3120004 	tst	r2, #4
	BR.F &= ~flag;
   18fcc:	120330bb 	andne	r3, r3, #187	; 0xbb
	BR.F |= flag;
   18fd0:	03833044 	orreq	r3, r3, #68	; 0x44
   18fd4:	e3833010 	orr	r3, r3, #16
	BR.F &= ~flag;
   18fd8:	e6af3073 	sxtb	r3, r3
	if (val)
   18fdc:	e3120020 	tst	r2, #32
	BR.F &= ~flag;
   18fe0:	1203307d 	andne	r3, r3, #125	; 0x7d
	BR.F |= flag;
   18fe4:	13833020 	orrne	r3, r3, #32
	BR.F &= ~flag;
   18fe8:	0203305d 	andeq	r3, r3, #93	; 0x5d
	if (val)
   18fec:	e3120008 	tst	r2, #8
	BR.F |= flag;
   18ff0:	13833008 	orrne	r3, r3, #8
	BR.F &= ~flag;
   18ff4:	02033075 	andeq	r3, r3, #117	; 0x75
   18ff8:	e5c03000 	strb	r3, [r0]
}
   18ffc:	e12fff1e 	bx	lr

00019000 <BIT_6_L>:
	doBIT_r(ctx, 6, BR.L);
   19000:	e5d02006 	ldrb	r2, [r0, #6]
   19004:	e5d03000 	ldrb	r3, [r0]
	if (val & (1 << b))
   19008:	e3120040 	tst	r2, #64	; 0x40
	BR.F &= ~flag;
   1900c:	120330bb 	andne	r3, r3, #187	; 0xbb
	BR.F |= flag;
   19010:	03833044 	orreq	r3, r3, #68	; 0x44
   19014:	e3833010 	orr	r3, r3, #16
	BR.F &= ~flag;
   19018:	e6af3073 	sxtb	r3, r3
	if (val)
   1901c:	e3120020 	tst	r2, #32
	BR.F &= ~flag;
   19020:	1203307d 	andne	r3, r3, #125	; 0x7d
	BR.F |= flag;
   19024:	13833020 	orrne	r3, r3, #32
	BR.F &= ~flag;
   19028:	0203305d 	andeq	r3, r3, #93	; 0x5d
	if (val)
   1902c:	e3120008 	tst	r2, #8
	BR.F |= flag;
   19030:	13833008 	orrne	r3, r3, #8
	BR.F &= ~flag;
   19034:	02033075 	andeq	r3, r3, #117	; 0x75
   19038:	e5c03000 	strb	r3, [r0]
}
   1903c:	e12fff1e 	bx	lr

00019040 <BIT_2_C>:
	doBIT_r(ctx, 2, BR.C);
   19040:	e5d02002 	ldrb	r2, [r0, #2]
   19044:	e5d03000 	ldrb	r3, [r0]
	if (val & (1 << b))
   19048:	e3120004 	tst	r2, #4
	BR.F &= ~flag;
   1904c:	120330bb 	andne	r3, r3, #187	; 0xbb
	BR.F |= flag;
   19050:	03833044 	orreq	r3, r3, #68	; 0x44
   19054:	e3833010 	orr	r3, r3, #16
	BR.F &= ~flag;
   19058:	e6af3073 	sxtb	r3, r3
	if (val)
   1905c:	e3120020 	tst	r2, #32
	BR.F &= ~flag;
   19060:	1203307d 	andne	r3, r3, #125	; 0x7d
	BR.F |= flag;
   19064:	13833020 	orrne	r3, r3, #32
	BR.F &= ~flag;
   19068:	0203305d 	andeq	r3, r3, #93	; 0x5d
	if (val)
   1906c:	e3120008 	tst	r2, #8
	BR.F |= flag;
   19070:	13833008 	orrne	r3, r3, #8
	BR.F &= ~flag;
   19074:	02033075 	andeq	r3, r3, #117	; 0x75
   19078:	e5c03000 	strb	r3, [r0]
}
   1907c:	e12fff1e 	bx	lr

00019080 <BIT_4_L>:
	doBIT_r(ctx, 4, BR.L);
   19080:	e5d02006 	ldrb	r2, [r0, #6]
   19084:	e5d03000 	ldrb	r3, [r0]
	if (val & (1 << b))
   19088:	e3120010 	tst	r2, #16
	BR.F &= ~flag;
   1908c:	120330bb 	andne	r3, r3, #187	; 0xbb
	BR.F |= flag;
   19090:	03833044 	orreq	r3, r3, #68	; 0x44
   19094:	e3833010 	orr	r3, r3, #16
	BR.F &= ~flag;
   19098:	e6af3073 	sxtb	r3, r3
	if (val)
   1909c:	e3120020 	tst	r2, #32
	BR.F &= ~flag;
   190a0:	1203307d 	andne	r3, r3, #125	; 0x7d
	BR.F |= flag;
   190a4:	13833020 	orrne	r3, r3, #32
	BR.F &= ~flag;
   190a8:	0203305d 	andeq	r3, r3, #93	; 0x5d
	if (val)
   190ac:	e3120008 	tst	r2, #8
	BR.F |= flag;
   190b0:	13833008 	orrne	r3, r3, #8
	BR.F &= ~flag;
   190b4:	02033075 	andeq	r3, r3, #117	; 0x75
   190b8:	e5c03000 	strb	r3, [r0]
}
   190bc:	e12fff1e 	bx	lr

000190c0 <BIT_3_E>:
	doBIT_r(ctx, 3, BR.E);
   190c0:	e5d02004 	ldrb	r2, [r0, #4]
   190c4:	e5d03000 	ldrb	r3, [r0]
	if (val & (1 << b))
   190c8:	e3120008 	tst	r2, #8
	BR.F &= ~flag;
   190cc:	120330bb 	andne	r3, r3, #187	; 0xbb
	BR.F |= flag;
   190d0:	03833044 	orreq	r3, r3, #68	; 0x44
   190d4:	e3833010 	orr	r3, r3, #16
	BR.F &= ~flag;
   190d8:	e6af3073 	sxtb	r3, r3
	if (val)
   190dc:	e3120020 	tst	r2, #32
	BR.F &= ~flag;
   190e0:	1203307d 	andne	r3, r3, #125	; 0x7d
	BR.F |= flag;
   190e4:	13833020 	orrne	r3, r3, #32
	BR.F &= ~flag;
   190e8:	0203305d 	andeq	r3, r3, #93	; 0x5d
	if (val)
   190ec:	e3120008 	tst	r2, #8
	BR.F |= flag;
   190f0:	13833008 	orrne	r3, r3, #8
	BR.F &= ~flag;
   190f4:	02033075 	andeq	r3, r3, #117	; 0x75
   190f8:	e5c03000 	strb	r3, [r0]
}
   190fc:	e12fff1e 	bx	lr

00019100 <BIT_4_A>:
	doBIT_r(ctx, 4, BR.A);
   19100:	e5d02001 	ldrb	r2, [r0, #1]
   19104:	e5d03000 	ldrb	r3, [r0]
	if (val & (1 << b))
   19108:	e3120010 	tst	r2, #16
	BR.F &= ~flag;
   1910c:	120330bb 	andne	r3, r3, #187	; 0xbb
	BR.F |= flag;
   19110:	03833044 	orreq	r3, r3, #68	; 0x44
   19114:	e3833010 	orr	r3, r3, #16
	BR.F &= ~flag;
   19118:	e6af3073 	sxtb	r3, r3
	if (val)
   1911c:	e3120020 	tst	r2, #32
	BR.F &= ~flag;
   19120:	1203307d 	andne	r3, r3, #125	; 0x7d
	BR.F |= flag;
   19124:	13833020 	orrne	r3, r3, #32
	BR.F &= ~flag;
   19128:	0203305d 	andeq	r3, r3, #93	; 0x5d
	if (val)
   1912c:	e3120008 	tst	r2, #8
	BR.F |= flag;
   19130:	13833008 	orrne	r3, r3, #8
	BR.F &= ~flag;
   19134:	02033075 	andeq	r3, r3, #117	; 0x75
   19138:	e5c03000 	strb	r3, [r0]
}
   1913c:	e12fff1e 	bx	lr

00019140 <BIT_5_A>:
	doBIT_r(ctx, 5, BR.A);
   19140:	e5d02001 	ldrb	r2, [r0, #1]
   19144:	e5d03000 	ldrb	r3, [r0]
	if (val & (1 << b))
   19148:	e3120020 	tst	r2, #32
	BR.F &= ~flag;
   1914c:	120330bb 	andne	r3, r3, #187	; 0xbb
	BR.F |= flag;
   19150:	03833044 	orreq	r3, r3, #68	; 0x44
   19154:	e3833010 	orr	r3, r3, #16
	BR.F &= ~flag;
   19158:	e6af3073 	sxtb	r3, r3
	if (val)
   1915c:	e3120020 	tst	r2, #32
	BR.F &= ~flag;
   19160:	1203307d 	andne	r3, r3, #125	; 0x7d
	BR.F |= flag;
   19164:	13833020 	orrne	r3, r3, #32
	BR.F &= ~flag;
   19168:	0203305d 	andeq	r3, r3, #93	; 0x5d
	if (val)
   1916c:	e3120008 	tst	r2, #8
	BR.F |= flag;
   19170:	13833008 	orrne	r3, r3, #8
	BR.F &= ~flag;
   19174:	02033075 	andeq	r3, r3, #117	; 0x75
   19178:	e5c03000 	strb	r3, [r0]
}
   1917c:	e12fff1e 	bx	lr

00019180 <BIT_4_C>:
	doBIT_r(ctx, 4, BR.C);
   19180:	e5d02002 	ldrb	r2, [r0, #2]
   19184:	e5d03000 	ldrb	r3, [r0]
	if (val & (1 << b))
   19188:	e3120010 	tst	r2, #16
	BR.F &= ~flag;
   1918c:	120330bb 	andne	r3, r3, #187	; 0xbb
	BR.F |= flag;
   19190:	03833044 	orreq	r3, r3, #68	; 0x44
   19194:	e3833010 	orr	r3, r3, #16
	BR.F &= ~flag;
   19198:	e6af3073 	sxtb	r3, r3
	if (val)
   1919c:	e3120020 	tst	r2, #32
	BR.F &= ~flag;
   191a0:	1203307d 	andne	r3, r3, #125	; 0x7d
	BR.F |= flag;
   191a4:	13833020 	orrne	r3, r3, #32
	BR.F &= ~flag;
   191a8:	0203305d 	andeq	r3, r3, #93	; 0x5d
	if (val)
   191ac:	e3120008 	tst	r2, #8
	BR.F |= flag;
   191b0:	13833008 	orrne	r3, r3, #8
	BR.F &= ~flag;
   191b4:	02033075 	andeq	r3, r3, #117	; 0x75
   191b8:	e5c03000 	strb	r3, [r0]
}
   191bc:	e12fff1e 	bx	lr

000191c0 <BIT_1_H>:
	doBIT_r(ctx, 1, BR.H);
   191c0:	e5d02007 	ldrb	r2, [r0, #7]
   191c4:	e5d03000 	ldrb	r3, [r0]
	if (val & (1 << b))
   191c8:	e3120002 	tst	r2, #2
	BR.F &= ~flag;
   191cc:	120330bb 	andne	r3, r3, #187	; 0xbb
	BR.F |= flag;
   191d0:	03833044 	orreq	r3, r3, #68	; 0x44
   191d4:	e3833010 	orr	r3, r3, #16
	BR.F &= ~flag;
   191d8:	e6af3073 	sxtb	r3, r3
	if (val)
   191dc:	e3120020 	tst	r2, #32
	BR.F &= ~flag;
   191e0:	1203307d 	andne	r3, r3, #125	; 0x7d
	BR.F |= flag;
   191e4:	13833020 	orrne	r3, r3, #32
	BR.F &= ~flag;
   191e8:	0203305d 	andeq	r3, r3, #93	; 0x5d
	if (val)
   191ec:	e3120008 	tst	r2, #8
	BR.F |= flag;
   191f0:	13833008 	orrne	r3, r3, #8
	BR.F &= ~flag;
   191f4:	02033075 	andeq	r3, r3, #117	; 0x75
   191f8:	e5c03000 	strb	r3, [r0]
}
   191fc:	e12fff1e 	bx	lr

00019200 <BIT_2_A>:
	doBIT_r(ctx, 2, BR.A);
   19200:	e5d02001 	ldrb	r2, [r0, #1]
   19204:	e5d03000 	ldrb	r3, [r0]
	if (val & (1 << b))
   19208:	e3120004 	tst	r2, #4
	BR.F &= ~flag;
   1920c:	120330bb 	andne	r3, r3, #187	; 0xbb
	BR.F |= flag;
   19210:	03833044 	orreq	r3, r3, #68	; 0x44
   19214:	e3833010 	orr	r3, r3, #16
	BR.F &= ~flag;
   19218:	e6af3073 	sxtb	r3, r3
	if (val)
   1921c:	e3120020 	tst	r2, #32
	BR.F &= ~flag;
   19220:	1203307d 	andne	r3, r3, #125	; 0x7d
	BR.F |= flag;
   19224:	13833020 	orrne	r3, r3, #32
	BR.F &= ~flag;
   19228:	0203305d 	andeq	r3, r3, #93	; 0x5d
	if (val)
   1922c:	e3120008 	tst	r2, #8
	BR.F |= flag;
   19230:	13833008 	orrne	r3, r3, #8
	BR.F &= ~flag;
   19234:	02033075 	andeq	r3, r3, #117	; 0x75
   19238:	e5c03000 	strb	r3, [r0]
}
   1923c:	e12fff1e 	bx	lr

00019240 <BIT_5_C>:
	doBIT_r(ctx, 5, BR.C);
   19240:	e5d02002 	ldrb	r2, [r0, #2]
   19244:	e5d03000 	ldrb	r3, [r0]
	if (val & (1 << b))
   19248:	e3120020 	tst	r2, #32
	BR.F &= ~flag;
   1924c:	120330bb 	andne	r3, r3, #187	; 0xbb
	BR.F |= flag;
   19250:	03833044 	orreq	r3, r3, #68	; 0x44
   19254:	e3833010 	orr	r3, r3, #16
	BR.F &= ~flag;
   19258:	e6af3073 	sxtb	r3, r3
	if (val)
   1925c:	e3120020 	tst	r2, #32
	BR.F &= ~flag;
   19260:	1203307d 	andne	r3, r3, #125	; 0x7d
	BR.F |= flag;
   19264:	13833020 	orrne	r3, r3, #32
	BR.F &= ~flag;
   19268:	0203305d 	andeq	r3, r3, #93	; 0x5d
	if (val)
   1926c:	e3120008 	tst	r2, #8
	BR.F |= flag;
   19270:	13833008 	orrne	r3, r3, #8
	BR.F &= ~flag;
   19274:	02033075 	andeq	r3, r3, #117	; 0x75
   19278:	e5c03000 	strb	r3, [r0]
}
   1927c:	e12fff1e 	bx	lr

00019280 <BIT_1_E>:
	doBIT_r(ctx, 1, BR.E);
   19280:	e5d02004 	ldrb	r2, [r0, #4]
   19284:	e5d03000 	ldrb	r3, [r0]
	if (val & (1 << b))
   19288:	e3120002 	tst	r2, #2
	BR.F &= ~flag;
   1928c:	120330bb 	andne	r3, r3, #187	; 0xbb
	BR.F |= flag;
   19290:	03833044 	orreq	r3, r3, #68	; 0x44
   19294:	e3833010 	orr	r3, r3, #16
	BR.F &= ~flag;
   19298:	e6af3073 	sxtb	r3, r3
	if (val)
   1929c:	e3120020 	tst	r2, #32
	BR.F &= ~flag;
   192a0:	1203307d 	andne	r3, r3, #125	; 0x7d
	BR.F |= flag;
   192a4:	13833020 	orrne	r3, r3, #32
	BR.F &= ~flag;
   192a8:	0203305d 	andeq	r3, r3, #93	; 0x5d
	if (val)
   192ac:	e3120008 	tst	r2, #8
	BR.F |= flag;
   192b0:	13833008 	orrne	r3, r3, #8
	BR.F &= ~flag;
   192b4:	02033075 	andeq	r3, r3, #117	; 0x75
   192b8:	e5c03000 	strb	r3, [r0]
}
   192bc:	e12fff1e 	bx	lr

000192c0 <BIT_4_B>:
	doBIT_r(ctx, 4, BR.B);
   192c0:	e5d02003 	ldrb	r2, [r0, #3]
   192c4:	e5d03000 	ldrb	r3, [r0]
	if (val & (1 << b))
   192c8:	e3120010 	tst	r2, #16
	BR.F &= ~flag;
   192cc:	120330bb 	andne	r3, r3, #187	; 0xbb
	BR.F |= flag;
   192d0:	03833044 	orreq	r3, r3, #68	; 0x44
   192d4:	e3833010 	orr	r3, r3, #16
	BR.F &= ~flag;
   192d8:	e6af3073 	sxtb	r3, r3
	if (val)
   192dc:	e3120020 	tst	r2, #32
	BR.F &= ~flag;
   192e0:	1203307d 	andne	r3, r3, #125	; 0x7d
	BR.F |= flag;
   192e4:	13833020 	orrne	r3, r3, #32
	BR.F &= ~flag;
   192e8:	0203305d 	andeq	r3, r3, #93	; 0x5d
	if (val)
   192ec:	e3120008 	tst	r2, #8
	BR.F |= flag;
   192f0:	13833008 	orrne	r3, r3, #8
	BR.F &= ~flag;
   192f4:	02033075 	andeq	r3, r3, #117	; 0x75
   192f8:	e5c03000 	strb	r3, [r0]
}
   192fc:	e12fff1e 	bx	lr

00019300 <BIT_1_L>:
	doBIT_r(ctx, 1, BR.L);
   19300:	e5d02006 	ldrb	r2, [r0, #6]
   19304:	e5d03000 	ldrb	r3, [r0]
	if (val & (1 << b))
   19308:	e3120002 	tst	r2, #2
	BR.F &= ~flag;
   1930c:	120330bb 	andne	r3, r3, #187	; 0xbb
	BR.F |= flag;
   19310:	03833044 	orreq	r3, r3, #68	; 0x44
   19314:	e3833010 	orr	r3, r3, #16
	BR.F &= ~flag;
   19318:	e6af3073 	sxtb	r3, r3
	if (val)
   1931c:	e3120020 	tst	r2, #32
	BR.F &= ~flag;
   19320:	1203307d 	andne	r3, r3, #125	; 0x7d
	BR.F |= flag;
   19324:	13833020 	orrne	r3, r3, #32
	BR.F &= ~flag;
   19328:	0203305d 	andeq	r3, r3, #93	; 0x5d
	if (val)
   1932c:	e3120008 	tst	r2, #8
	BR.F |= flag;
   19330:	13833008 	orrne	r3, r3, #8
	BR.F &= ~flag;
   19334:	02033075 	andeq	r3, r3, #117	; 0x75
   19338:	e5c03000 	strb	r3, [r0]
}
   1933c:	e12fff1e 	bx	lr

00019340 <BIT_4_E>:
	doBIT_r(ctx, 4, BR.E);
   19340:	e5d02004 	ldrb	r2, [r0, #4]
   19344:	e5d03000 	ldrb	r3, [r0]
	if (val & (1 << b))
   19348:	e3120010 	tst	r2, #16
	BR.F &= ~flag;
   1934c:	120330bb 	andne	r3, r3, #187	; 0xbb
	BR.F |= flag;
   19350:	03833044 	orreq	r3, r3, #68	; 0x44
   19354:	e3833010 	orr	r3, r3, #16
	BR.F &= ~flag;
   19358:	e6af3073 	sxtb	r3, r3
	if (val)
   1935c:	e3120020 	tst	r2, #32
	BR.F &= ~flag;
   19360:	1203307d 	andne	r3, r3, #125	; 0x7d
	BR.F |= flag;
   19364:	13833020 	orrne	r3, r3, #32
	BR.F &= ~flag;
   19368:	0203305d 	andeq	r3, r3, #93	; 0x5d
	if (val)
   1936c:	e3120008 	tst	r2, #8
	BR.F |= flag;
   19370:	13833008 	orrne	r3, r3, #8
	BR.F &= ~flag;
   19374:	02033075 	andeq	r3, r3, #117	; 0x75
   19378:	e5c03000 	strb	r3, [r0]
}
   1937c:	e12fff1e 	bx	lr

00019380 <BIT_1_C>:
	doBIT_r(ctx, 1, BR.C);
   19380:	e5d02002 	ldrb	r2, [r0, #2]
   19384:	e5d03000 	ldrb	r3, [r0]
	if (val & (1 << b))
   19388:	e3120002 	tst	r2, #2
	BR.F &= ~flag;
   1938c:	120330bb 	andne	r3, r3, #187	; 0xbb
	BR.F |= flag;
   19390:	03833044 	orreq	r3, r3, #68	; 0x44
   19394:	e3833010 	orr	r3, r3, #16
	BR.F &= ~flag;
   19398:	e6af3073 	sxtb	r3, r3
	if (val)
   1939c:	e3120020 	tst	r2, #32
	BR.F &= ~flag;
   193a0:	1203307d 	andne	r3, r3, #125	; 0x7d
	BR.F |= flag;
   193a4:	13833020 	orrne	r3, r3, #32
	BR.F &= ~flag;
   193a8:	0203305d 	andeq	r3, r3, #93	; 0x5d
	if (val)
   193ac:	e3120008 	tst	r2, #8
	BR.F |= flag;
   193b0:	13833008 	orrne	r3, r3, #8
	BR.F &= ~flag;
   193b4:	02033075 	andeq	r3, r3, #117	; 0x75
   193b8:	e5c03000 	strb	r3, [r0]
}
   193bc:	e12fff1e 	bx	lr

000193c0 <BIT_2_D>:
	doBIT_r(ctx, 2, BR.D);
   193c0:	e5d02005 	ldrb	r2, [r0, #5]
   193c4:	e5d03000 	ldrb	r3, [r0]
	if (val & (1 << b))
   193c8:	e3120004 	tst	r2, #4
	BR.F &= ~flag;
   193cc:	120330bb 	andne	r3, r3, #187	; 0xbb
	BR.F |= flag;
   193d0:	03833044 	orreq	r3, r3, #68	; 0x44
   193d4:	e3833010 	orr	r3, r3, #16
	BR.F &= ~flag;
   193d8:	e6af3073 	sxtb	r3, r3
	if (val)
   193dc:	e3120020 	tst	r2, #32
	BR.F &= ~flag;
   193e0:	1203307d 	andne	r3, r3, #125	; 0x7d
	BR.F |= flag;
   193e4:	13833020 	orrne	r3, r3, #32
	BR.F &= ~flag;
   193e8:	0203305d 	andeq	r3, r3, #93	; 0x5d
	if (val)
   193ec:	e3120008 	tst	r2, #8
	BR.F |= flag;
   193f0:	13833008 	orrne	r3, r3, #8
	BR.F &= ~flag;
   193f4:	02033075 	andeq	r3, r3, #117	; 0x75
   193f8:	e5c03000 	strb	r3, [r0]
}
   193fc:	e12fff1e 	bx	lr

00019400 <BIT_0_L>:
	doBIT_r(ctx, 0, BR.L);
   19400:	e5d02006 	ldrb	r2, [r0, #6]
   19404:	e5d03000 	ldrb	r3, [r0]
	if (val & (1 << b))
   19408:	e3120001 	tst	r2, #1
	BR.F &= ~flag;
   1940c:	120330bb 	andne	r3, r3, #187	; 0xbb
	BR.F |= flag;
   19410:	03833044 	orreq	r3, r3, #68	; 0x44
   19414:	e3833010 	orr	r3, r3, #16
	BR.F &= ~flag;
   19418:	e6af3073 	sxtb	r3, r3
	if (val)
   1941c:	e3120020 	tst	r2, #32
	BR.F &= ~flag;
   19420:	1203307d 	andne	r3, r3, #125	; 0x7d
	BR.F |= flag;
   19424:	13833020 	orrne	r3, r3, #32
	BR.F &= ~flag;
   19428:	0203305d 	andeq	r3, r3, #93	; 0x5d
	if (val)
   1942c:	e3120008 	tst	r2, #8
	BR.F |= flag;
   19430:	13833008 	orrne	r3, r3, #8
	BR.F &= ~flag;
   19434:	02033075 	andeq	r3, r3, #117	; 0x75
   19438:	e5c03000 	strb	r3, [r0]
}
   1943c:	e12fff1e 	bx	lr

00019440 <BIT_5_B>:
	doBIT_r(ctx, 5, BR.B);
   19440:	e5d02003 	ldrb	r2, [r0, #3]
   19444:	e5d03000 	ldrb	r3, [r0]
	if (val & (1 << b))
   19448:	e3120020 	tst	r2, #32
	BR.F &= ~flag;
   1944c:	120330bb 	andne	r3, r3, #187	; 0xbb
	BR.F |= flag;
   19450:	03833044 	orreq	r3, r3, #68	; 0x44
   19454:	e3833010 	orr	r3, r3, #16
	BR.F &= ~flag;
   19458:	e6af3073 	sxtb	r3, r3
	if (val)
   1945c:	e3120020 	tst	r2, #32
	BR.F &= ~flag;
   19460:	1203307d 	andne	r3, r3, #125	; 0x7d
	BR.F |= flag;
   19464:	13833020 	orrne	r3, r3, #32
	BR.F &= ~flag;
   19468:	0203305d 	andeq	r3, r3, #93	; 0x5d
	if (val)
   1946c:	e3120008 	tst	r2, #8
	BR.F |= flag;
   19470:	13833008 	orrne	r3, r3, #8
	BR.F &= ~flag;
   19474:	02033075 	andeq	r3, r3, #117	; 0x75
   19478:	e5c03000 	strb	r3, [r0]
}
   1947c:	e12fff1e 	bx	lr

00019480 <BIT_2_E>:
	doBIT_r(ctx, 2, BR.E);
   19480:	e5d02004 	ldrb	r2, [r0, #4]
   19484:	e5d03000 	ldrb	r3, [r0]
	if (val & (1 << b))
   19488:	e3120004 	tst	r2, #4
	BR.F &= ~flag;
   1948c:	120330bb 	andne	r3, r3, #187	; 0xbb
	BR.F |= flag;
   19490:	03833044 	orreq	r3, r3, #68	; 0x44
   19494:	e3833010 	orr	r3, r3, #16
	BR.F &= ~flag;
   19498:	e6af3073 	sxtb	r3, r3
	if (val)
   1949c:	e3120020 	tst	r2, #32
	BR.F &= ~flag;
   194a0:	1203307d 	andne	r3, r3, #125	; 0x7d
	BR.F |= flag;
   194a4:	13833020 	orrne	r3, r3, #32
	BR.F &= ~flag;
   194a8:	0203305d 	andeq	r3, r3, #93	; 0x5d
	if (val)
   194ac:	e3120008 	tst	r2, #8
	BR.F |= flag;
   194b0:	13833008 	orrne	r3, r3, #8
	BR.F &= ~flag;
   194b4:	02033075 	andeq	r3, r3, #117	; 0x75
   194b8:	e5c03000 	strb	r3, [r0]
}
   194bc:	e12fff1e 	bx	lr

000194c0 <BIT_1_A>:
	doBIT_r(ctx, 1, BR.A);
   194c0:	e5d02001 	ldrb	r2, [r0, #1]
   194c4:	e5d03000 	ldrb	r3, [r0]
	if (val & (1 << b))
   194c8:	e3120002 	tst	r2, #2
	BR.F &= ~flag;
   194cc:	120330bb 	andne	r3, r3, #187	; 0xbb
	BR.F |= flag;
   194d0:	03833044 	orreq	r3, r3, #68	; 0x44
   194d4:	e3833010 	orr	r3, r3, #16
	BR.F &= ~flag;
   194d8:	e6af3073 	sxtb	r3, r3
	if (val)
   194dc:	e3120020 	tst	r2, #32
	BR.F &= ~flag;
   194e0:	1203307d 	andne	r3, r3, #125	; 0x7d
	BR.F |= flag;
   194e4:	13833020 	orrne	r3, r3, #32
	BR.F &= ~flag;
   194e8:	0203305d 	andeq	r3, r3, #93	; 0x5d
	if (val)
   194ec:	e3120008 	tst	r2, #8
	BR.F |= flag;
   194f0:	13833008 	orrne	r3, r3, #8
	BR.F &= ~flag;
   194f4:	02033075 	andeq	r3, r3, #117	; 0x75
   194f8:	e5c03000 	strb	r3, [r0]
}
   194fc:	e12fff1e 	bx	lr

00019500 <BIT_3_L>:
	doBIT_r(ctx, 3, BR.L);
   19500:	e5d02006 	ldrb	r2, [r0, #6]
   19504:	e5d03000 	ldrb	r3, [r0]
	if (val & (1 << b))
   19508:	e3120008 	tst	r2, #8
	BR.F &= ~flag;
   1950c:	120330bb 	andne	r3, r3, #187	; 0xbb
	BR.F |= flag;
   19510:	03833044 	orreq	r3, r3, #68	; 0x44
   19514:	e3833010 	orr	r3, r3, #16
	BR.F &= ~flag;
   19518:	e6af3073 	sxtb	r3, r3
	if (val)
   1951c:	e3120020 	tst	r2, #32
	BR.F &= ~flag;
   19520:	1203307d 	andne	r3, r3, #125	; 0x7d
	BR.F |= flag;
   19524:	13833020 	orrne	r3, r3, #32
	BR.F &= ~flag;
   19528:	0203305d 	andeq	r3, r3, #93	; 0x5d
	if (val)
   1952c:	e3120008 	tst	r2, #8
	BR.F |= flag;
   19530:	13833008 	orrne	r3, r3, #8
	BR.F &= ~flag;
   19534:	02033075 	andeq	r3, r3, #117	; 0x75
   19538:	e5c03000 	strb	r3, [r0]
}
   1953c:	e12fff1e 	bx	lr

00019540 <BIT_3_C>:
	doBIT_r(ctx, 3, BR.C);
   19540:	e5d02002 	ldrb	r2, [r0, #2]
   19544:	e5d03000 	ldrb	r3, [r0]
	if (val & (1 << b))
   19548:	e3120008 	tst	r2, #8
	BR.F &= ~flag;
   1954c:	120330bb 	andne	r3, r3, #187	; 0xbb
	BR.F |= flag;
   19550:	03833044 	orreq	r3, r3, #68	; 0x44
   19554:	e3833010 	orr	r3, r3, #16
	BR.F &= ~flag;
   19558:	e6af3073 	sxtb	r3, r3
	if (val)
   1955c:	e3120020 	tst	r2, #32
	BR.F &= ~flag;
   19560:	1203307d 	andne	r3, r3, #125	; 0x7d
	BR.F |= flag;
   19564:	13833020 	orrne	r3, r3, #32
	BR.F &= ~flag;
   19568:	0203305d 	andeq	r3, r3, #93	; 0x5d
	if (val)
   1956c:	e3120008 	tst	r2, #8
	BR.F |= flag;
   19570:	13833008 	orrne	r3, r3, #8
	BR.F &= ~flag;
   19574:	02033075 	andeq	r3, r3, #117	; 0x75
   19578:	e5c03000 	strb	r3, [r0]
}
   1957c:	e12fff1e 	bx	lr

00019580 <BIT_2_H>:
	doBIT_r(ctx, 2, BR.H);
   19580:	e5d02007 	ldrb	r2, [r0, #7]
   19584:	e5d03000 	ldrb	r3, [r0]
	if (val & (1 << b))
   19588:	e3120004 	tst	r2, #4
	BR.F &= ~flag;
   1958c:	120330bb 	andne	r3, r3, #187	; 0xbb
	BR.F |= flag;
   19590:	03833044 	orreq	r3, r3, #68	; 0x44
   19594:	e3833010 	orr	r3, r3, #16
	BR.F &= ~flag;
   19598:	e6af3073 	sxtb	r3, r3
	if (val)
   1959c:	e3120020 	tst	r2, #32
	BR.F &= ~flag;
   195a0:	1203307d 	andne	r3, r3, #125	; 0x7d
	BR.F |= flag;
   195a4:	13833020 	orrne	r3, r3, #32
	BR.F &= ~flag;
   195a8:	0203305d 	andeq	r3, r3, #93	; 0x5d
	if (val)
   195ac:	e3120008 	tst	r2, #8
	BR.F |= flag;
   195b0:	13833008 	orrne	r3, r3, #8
	BR.F &= ~flag;
   195b4:	02033075 	andeq	r3, r3, #117	; 0x75
   195b8:	e5c03000 	strb	r3, [r0]
}
   195bc:	e12fff1e 	bx	lr

000195c0 <BIT_2_B>:
	doBIT_r(ctx, 2, BR.B);
   195c0:	e5d02003 	ldrb	r2, [r0, #3]
   195c4:	e5d03000 	ldrb	r3, [r0]
	if (val & (1 << b))
   195c8:	e3120004 	tst	r2, #4
	BR.F &= ~flag;
   195cc:	120330bb 	andne	r3, r3, #187	; 0xbb
	BR.F |= flag;
   195d0:	03833044 	orreq	r3, r3, #68	; 0x44
   195d4:	e3833010 	orr	r3, r3, #16
	BR.F &= ~flag;
   195d8:	e6af3073 	sxtb	r3, r3
	if (val)
   195dc:	e3120020 	tst	r2, #32
	BR.F &= ~flag;
   195e0:	1203307d 	andne	r3, r3, #125	; 0x7d
	BR.F |= flag;
   195e4:	13833020 	orrne	r3, r3, #32
	BR.F &= ~flag;
   195e8:	0203305d 	andeq	r3, r3, #93	; 0x5d
	if (val)
   195ec:	e3120008 	tst	r2, #8
	BR.F |= flag;
   195f0:	13833008 	orrne	r3, r3, #8
	BR.F &= ~flag;
   195f4:	02033075 	andeq	r3, r3, #117	; 0x75
   195f8:	e5c03000 	strb	r3, [r0]
}
   195fc:	e12fff1e 	bx	lr

00019600 <BIT_0_C>:
	doBIT_r(ctx, 0, BR.C);
   19600:	e5d02002 	ldrb	r2, [r0, #2]
   19604:	e5d03000 	ldrb	r3, [r0]
	if (val & (1 << b))
   19608:	e3120001 	tst	r2, #1
	BR.F &= ~flag;
   1960c:	120330bb 	andne	r3, r3, #187	; 0xbb
	BR.F |= flag;
   19610:	03833044 	orreq	r3, r3, #68	; 0x44
   19614:	e3833010 	orr	r3, r3, #16
	BR.F &= ~flag;
   19618:	e6af3073 	sxtb	r3, r3
	if (val)
   1961c:	e3120020 	tst	r2, #32
	BR.F &= ~flag;
   19620:	1203307d 	andne	r3, r3, #125	; 0x7d
	BR.F |= flag;
   19624:	13833020 	orrne	r3, r3, #32
	BR.F &= ~flag;
   19628:	0203305d 	andeq	r3, r3, #93	; 0x5d
	if (val)
   1962c:	e3120008 	tst	r2, #8
	BR.F |= flag;
   19630:	13833008 	orrne	r3, r3, #8
	BR.F &= ~flag;
   19634:	02033075 	andeq	r3, r3, #117	; 0x75
   19638:	e5c03000 	strb	r3, [r0]
}
   1963c:	e12fff1e 	bx	lr

00019640 <BIT_5_L>:
	doBIT_r(ctx, 5, BR.L);
   19640:	e5d02006 	ldrb	r2, [r0, #6]
   19644:	e5d03000 	ldrb	r3, [r0]
	if (val & (1 << b))
   19648:	e3120020 	tst	r2, #32
	BR.F &= ~flag;
   1964c:	120330bb 	andne	r3, r3, #187	; 0xbb
	BR.F |= flag;
   19650:	03833044 	orreq	r3, r3, #68	; 0x44
   19654:	e3833010 	orr	r3, r3, #16
	BR.F &= ~flag;
   19658:	e6af3073 	sxtb	r3, r3
	if (val)
   1965c:	e3120020 	tst	r2, #32
	BR.F &= ~flag;
   19660:	1203307d 	andne	r3, r3, #125	; 0x7d
	BR.F |= flag;
   19664:	13833020 	orrne	r3, r3, #32
	BR.F &= ~flag;
   19668:	0203305d 	andeq	r3, r3, #93	; 0x5d
	if (val)
   1966c:	e3120008 	tst	r2, #8
	BR.F |= flag;
   19670:	13833008 	orrne	r3, r3, #8
	BR.F &= ~flag;
   19674:	02033075 	andeq	r3, r3, #117	; 0x75
   19678:	e5c03000 	strb	r3, [r0]
}
   1967c:	e12fff1e 	bx	lr

00019680 <BIT_0_H>:
	doBIT_r(ctx, 0, BR.H);
   19680:	e5d02007 	ldrb	r2, [r0, #7]
   19684:	e5d03000 	ldrb	r3, [r0]
	if (val & (1 << b))
   19688:	e3120001 	tst	r2, #1
	BR.F &= ~flag;
   1968c:	120330bb 	andne	r3, r3, #187	; 0xbb
	BR.F |= flag;
   19690:	03833044 	orreq	r3, r3, #68	; 0x44
   19694:	e3833010 	orr	r3, r3, #16
	BR.F &= ~flag;
   19698:	e6af3073 	sxtb	r3, r3
	if (val)
   1969c:	e3120020 	tst	r2, #32
	BR.F &= ~flag;
   196a0:	1203307d 	andne	r3, r3, #125	; 0x7d
	BR.F |= flag;
   196a4:	13833020 	orrne	r3, r3, #32
	BR.F &= ~flag;
   196a8:	0203305d 	andeq	r3, r3, #93	; 0x5d
	if (val)
   196ac:	e3120008 	tst	r2, #8
	BR.F |= flag;
   196b0:	13833008 	orrne	r3, r3, #8
	BR.F &= ~flag;
   196b4:	02033075 	andeq	r3, r3, #117	; 0x75
   196b8:	e5c03000 	strb	r3, [r0]
}
   196bc:	e12fff1e 	bx	lr

000196c0 <BIT_6_H>:
	doBIT_r(ctx, 6, BR.H);
   196c0:	e5d02007 	ldrb	r2, [r0, #7]
   196c4:	e5d03000 	ldrb	r3, [r0]
	if (val & (1 << b))
   196c8:	e3120040 	tst	r2, #64	; 0x40
	BR.F &= ~flag;
   196cc:	120330bb 	andne	r3, r3, #187	; 0xbb
	BR.F |= flag;
   196d0:	03833044 	orreq	r3, r3, #68	; 0x44
   196d4:	e3833010 	orr	r3, r3, #16
	BR.F &= ~flag;
   196d8:	e6af3073 	sxtb	r3, r3
	if (val)
   196dc:	e3120020 	tst	r2, #32
	BR.F &= ~flag;
   196e0:	1203307d 	andne	r3, r3, #125	; 0x7d
	BR.F |= flag;
   196e4:	13833020 	orrne	r3, r3, #32
	BR.F &= ~flag;
   196e8:	0203305d 	andeq	r3, r3, #93	; 0x5d
	if (val)
   196ec:	e3120008 	tst	r2, #8
	BR.F |= flag;
   196f0:	13833008 	orrne	r3, r3, #8
	BR.F &= ~flag;
   196f4:	02033075 	andeq	r3, r3, #117	; 0x75
   196f8:	e5c03000 	strb	r3, [r0]
}
   196fc:	e12fff1e 	bx	lr

00019700 <BIT_6_B>:
	doBIT_r(ctx, 6, BR.B);
   19700:	e5d02003 	ldrb	r2, [r0, #3]
   19704:	e5d03000 	ldrb	r3, [r0]
	if (val & (1 << b))
   19708:	e3120040 	tst	r2, #64	; 0x40
	BR.F &= ~flag;
   1970c:	120330bb 	andne	r3, r3, #187	; 0xbb
	BR.F |= flag;
   19710:	03833044 	orreq	r3, r3, #68	; 0x44
   19714:	e3833010 	orr	r3, r3, #16
	BR.F &= ~flag;
   19718:	e6af3073 	sxtb	r3, r3
	if (val)
   1971c:	e3120020 	tst	r2, #32
	BR.F &= ~flag;
   19720:	1203307d 	andne	r3, r3, #125	; 0x7d
	BR.F |= flag;
   19724:	13833020 	orrne	r3, r3, #32
	BR.F &= ~flag;
   19728:	0203305d 	andeq	r3, r3, #93	; 0x5d
	if (val)
   1972c:	e3120008 	tst	r2, #8
	BR.F |= flag;
   19730:	13833008 	orrne	r3, r3, #8
	BR.F &= ~flag;
   19734:	02033075 	andeq	r3, r3, #117	; 0x75
   19738:	e5c03000 	strb	r3, [r0]
}
   1973c:	e12fff1e 	bx	lr

00019740 <BIT_3_H>:
	doBIT_r(ctx, 3, BR.H);
   19740:	e5d02007 	ldrb	r2, [r0, #7]
   19744:	e5d03000 	ldrb	r3, [r0]
	if (val & (1 << b))
   19748:	e3120008 	tst	r2, #8
	BR.F &= ~flag;
   1974c:	120330bb 	andne	r3, r3, #187	; 0xbb
	BR.F |= flag;
   19750:	03833044 	orreq	r3, r3, #68	; 0x44
   19754:	e3833010 	orr	r3, r3, #16
	BR.F &= ~flag;
   19758:	e6af3073 	sxtb	r3, r3
	if (val)
   1975c:	e3120020 	tst	r2, #32
	BR.F &= ~flag;
   19760:	1203307d 	andne	r3, r3, #125	; 0x7d
	BR.F |= flag;
   19764:	13833020 	orrne	r3, r3, #32
	BR.F &= ~flag;
   19768:	0203305d 	andeq	r3, r3, #93	; 0x5d
	if (val)
   1976c:	e3120008 	tst	r2, #8
	BR.F |= flag;
   19770:	13833008 	orrne	r3, r3, #8
	BR.F &= ~flag;
   19774:	02033075 	andeq	r3, r3, #117	; 0x75
   19778:	e5c03000 	strb	r3, [r0]
}
   1977c:	e12fff1e 	bx	lr

00019780 <BIT_1_D>:
	doBIT_r(ctx, 1, BR.D);
   19780:	e5d02005 	ldrb	r2, [r0, #5]
   19784:	e5d03000 	ldrb	r3, [r0]
	if (val & (1 << b))
   19788:	e3120002 	tst	r2, #2
	BR.F &= ~flag;
   1978c:	120330bb 	andne	r3, r3, #187	; 0xbb
	BR.F |= flag;
   19790:	03833044 	orreq	r3, r3, #68	; 0x44
   19794:	e3833010 	orr	r3, r3, #16
	BR.F &= ~flag;
   19798:	e6af3073 	sxtb	r3, r3
	if (val)
   1979c:	e3120020 	tst	r2, #32
	BR.F &= ~flag;
   197a0:	1203307d 	andne	r3, r3, #125	; 0x7d
	BR.F |= flag;
   197a4:	13833020 	orrne	r3, r3, #32
	BR.F &= ~flag;
   197a8:	0203305d 	andeq	r3, r3, #93	; 0x5d
	if (val)
   197ac:	e3120008 	tst	r2, #8
	BR.F |= flag;
   197b0:	13833008 	orrne	r3, r3, #8
	BR.F &= ~flag;
   197b4:	02033075 	andeq	r3, r3, #117	; 0x75
   197b8:	e5c03000 	strb	r3, [r0]
}
   197bc:	e12fff1e 	bx	lr

000197c0 <BIT_6_D>:
	doBIT_r(ctx, 6, BR.D);
   197c0:	e5d02005 	ldrb	r2, [r0, #5]
   197c4:	e5d03000 	ldrb	r3, [r0]
	if (val & (1 << b))
   197c8:	e3120040 	tst	r2, #64	; 0x40
	BR.F &= ~flag;
   197cc:	120330bb 	andne	r3, r3, #187	; 0xbb
	BR.F |= flag;
   197d0:	03833044 	orreq	r3, r3, #68	; 0x44
   197d4:	e3833010 	orr	r3, r3, #16
	BR.F &= ~flag;
   197d8:	e6af3073 	sxtb	r3, r3
	if (val)
   197dc:	e3120020 	tst	r2, #32
	BR.F &= ~flag;
   197e0:	1203307d 	andne	r3, r3, #125	; 0x7d
	BR.F |= flag;
   197e4:	13833020 	orrne	r3, r3, #32
	BR.F &= ~flag;
   197e8:	0203305d 	andeq	r3, r3, #93	; 0x5d
	if (val)
   197ec:	e3120008 	tst	r2, #8
	BR.F |= flag;
   197f0:	13833008 	orrne	r3, r3, #8
	BR.F &= ~flag;
   197f4:	02033075 	andeq	r3, r3, #117	; 0x75
   197f8:	e5c03000 	strb	r3, [r0]
}
   197fc:	e12fff1e 	bx	lr

00019800 <BIT_6_E>:
	doBIT_r(ctx, 6, BR.E);
   19800:	e5d02004 	ldrb	r2, [r0, #4]
   19804:	e5d03000 	ldrb	r3, [r0]
	if (val & (1 << b))
   19808:	e3120040 	tst	r2, #64	; 0x40
	BR.F &= ~flag;
   1980c:	120330bb 	andne	r3, r3, #187	; 0xbb
	BR.F |= flag;
   19810:	03833044 	orreq	r3, r3, #68	; 0x44
   19814:	e3833010 	orr	r3, r3, #16
	BR.F &= ~flag;
   19818:	e6af3073 	sxtb	r3, r3
	if (val)
   1981c:	e3120020 	tst	r2, #32
	BR.F &= ~flag;
   19820:	1203307d 	andne	r3, r3, #125	; 0x7d
	BR.F |= flag;
   19824:	13833020 	orrne	r3, r3, #32
	BR.F &= ~flag;
   19828:	0203305d 	andeq	r3, r3, #93	; 0x5d
	if (val)
   1982c:	e3120008 	tst	r2, #8
	BR.F |= flag;
   19830:	13833008 	orrne	r3, r3, #8
	BR.F &= ~flag;
   19834:	02033075 	andeq	r3, r3, #117	; 0x75
   19838:	e5c03000 	strb	r3, [r0]
}
   1983c:	e12fff1e 	bx	lr

00019840 <BIT_3_B>:
	doBIT_r(ctx, 3, BR.B);
   19840:	e5d02003 	ldrb	r2, [r0, #3]
   19844:	e5d03000 	ldrb	r3, [r0]
	if (val & (1 << b))
   19848:	e3120008 	tst	r2, #8
	BR.F &= ~flag;
   1984c:	120330bb 	andne	r3, r3, #187	; 0xbb
	BR.F |= flag;
   19850:	03833044 	orreq	r3, r3, #68	; 0x44
   19854:	e3833010 	orr	r3, r3, #16
	BR.F &= ~flag;
   19858:	e6af3073 	sxtb	r3, r3
	if (val)
   1985c:	e3120020 	tst	r2, #32
	BR.F &= ~flag;
   19860:	1203307d 	andne	r3, r3, #125	; 0x7d
	BR.F |= flag;
   19864:	13833020 	orrne	r3, r3, #32
	BR.F &= ~flag;
   19868:	0203305d 	andeq	r3, r3, #93	; 0x5d
	if (val)
   1986c:	e3120008 	tst	r2, #8
	BR.F |= flag;
   19870:	13833008 	orrne	r3, r3, #8
	BR.F &= ~flag;
   19874:	02033075 	andeq	r3, r3, #117	; 0x75
   19878:	e5c03000 	strb	r3, [r0]
}
   1987c:	e12fff1e 	bx	lr

00019880 <BIT_0_E>:
	doBIT_r(ctx, 0, BR.E);
   19880:	e5d02004 	ldrb	r2, [r0, #4]
   19884:	e5d03000 	ldrb	r3, [r0]
	if (val & (1 << b))
   19888:	e3120001 	tst	r2, #1
	BR.F &= ~flag;
   1988c:	120330bb 	andne	r3, r3, #187	; 0xbb
	BR.F |= flag;
   19890:	03833044 	orreq	r3, r3, #68	; 0x44
   19894:	e3833010 	orr	r3, r3, #16
	BR.F &= ~flag;
   19898:	e6af3073 	sxtb	r3, r3
	if (val)
   1989c:	e3120020 	tst	r2, #32
	BR.F &= ~flag;
   198a0:	1203307d 	andne	r3, r3, #125	; 0x7d
	BR.F |= flag;
   198a4:	13833020 	orrne	r3, r3, #32
	BR.F &= ~flag;
   198a8:	0203305d 	andeq	r3, r3, #93	; 0x5d
	if (val)
   198ac:	e3120008 	tst	r2, #8
	BR.F |= flag;
   198b0:	13833008 	orrne	r3, r3, #8
	BR.F &= ~flag;
   198b4:	02033075 	andeq	r3, r3, #117	; 0x75
   198b8:	e5c03000 	strb	r3, [r0]
}
   198bc:	e12fff1e 	bx	lr

000198c0 <BIT_0_A>:
	doBIT_r(ctx, 0, BR.A);
   198c0:	e5d02001 	ldrb	r2, [r0, #1]
   198c4:	e5d03000 	ldrb	r3, [r0]
	if (val & (1 << b))
   198c8:	e3120001 	tst	r2, #1
	BR.F &= ~flag;
   198cc:	120330bb 	andne	r3, r3, #187	; 0xbb
	BR.F |= flag;
   198d0:	03833044 	orreq	r3, r3, #68	; 0x44
   198d4:	e3833010 	orr	r3, r3, #16
	BR.F &= ~flag;
   198d8:	e6af3073 	sxtb	r3, r3
	if (val)
   198dc:	e3120020 	tst	r2, #32
	BR.F &= ~flag;
   198e0:	1203307d 	andne	r3, r3, #125	; 0x7d
	BR.F |= flag;
   198e4:	13833020 	orrne	r3, r3, #32
	BR.F &= ~flag;
   198e8:	0203305d 	andeq	r3, r3, #93	; 0x5d
	if (val)
   198ec:	e3120008 	tst	r2, #8
	BR.F |= flag;
   198f0:	13833008 	orrne	r3, r3, #8
	BR.F &= ~flag;
   198f4:	02033075 	andeq	r3, r3, #117	; 0x75
   198f8:	e5c03000 	strb	r3, [r0]
}
   198fc:	e12fff1e 	bx	lr

00019900 <BIT_5_H>:
	doBIT_r(ctx, 5, BR.H);
   19900:	e5d02007 	ldrb	r2, [r0, #7]
   19904:	e5d03000 	ldrb	r3, [r0]
	if (val & (1 << b))
   19908:	e3120020 	tst	r2, #32
	BR.F &= ~flag;
   1990c:	120330bb 	andne	r3, r3, #187	; 0xbb
	BR.F |= flag;
   19910:	03833044 	orreq	r3, r3, #68	; 0x44
   19914:	e3833010 	orr	r3, r3, #16
	BR.F &= ~flag;
   19918:	e6af3073 	sxtb	r3, r3
	if (val)
   1991c:	e3120020 	tst	r2, #32
	BR.F &= ~flag;
   19920:	1203307d 	andne	r3, r3, #125	; 0x7d
	BR.F |= flag;
   19924:	13833020 	orrne	r3, r3, #32
	BR.F &= ~flag;
   19928:	0203305d 	andeq	r3, r3, #93	; 0x5d
	if (val)
   1992c:	e3120008 	tst	r2, #8
	BR.F |= flag;
   19930:	13833008 	orrne	r3, r3, #8
	BR.F &= ~flag;
   19934:	02033075 	andeq	r3, r3, #117	; 0x75
   19938:	e5c03000 	strb	r3, [r0]
}
   1993c:	e12fff1e 	bx	lr

00019940 <BIT_0_D>:
	doBIT_r(ctx, 0, BR.D);
   19940:	e5d02005 	ldrb	r2, [r0, #5]
   19944:	e5d03000 	ldrb	r3, [r0]
	if (val & (1 << b))
   19948:	e3120001 	tst	r2, #1
	BR.F &= ~flag;
   1994c:	120330bb 	andne	r3, r3, #187	; 0xbb
	BR.F |= flag;
   19950:	03833044 	orreq	r3, r3, #68	; 0x44
   19954:	e3833010 	orr	r3, r3, #16
	BR.F &= ~flag;
   19958:	e6af3073 	sxtb	r3, r3
	if (val)
   1995c:	e3120020 	tst	r2, #32
	BR.F &= ~flag;
   19960:	1203307d 	andne	r3, r3, #125	; 0x7d
	BR.F |= flag;
   19964:	13833020 	orrne	r3, r3, #32
	BR.F &= ~flag;
   19968:	0203305d 	andeq	r3, r3, #93	; 0x5d
	if (val)
   1996c:	e3120008 	tst	r2, #8
	BR.F |= flag;
   19970:	13833008 	orrne	r3, r3, #8
	BR.F &= ~flag;
   19974:	02033075 	andeq	r3, r3, #117	; 0x75
   19978:	e5c03000 	strb	r3, [r0]
}
   1997c:	e12fff1e 	bx	lr

00019980 <BIT_0_B>:
	doBIT_r(ctx, 0, BR.B);
   19980:	e5d02003 	ldrb	r2, [r0, #3]
   19984:	e5d03000 	ldrb	r3, [r0]
	if (val & (1 << b))
   19988:	e3120001 	tst	r2, #1
	BR.F &= ~flag;
   1998c:	120330bb 	andne	r3, r3, #187	; 0xbb
	BR.F |= flag;
   19990:	03833044 	orreq	r3, r3, #68	; 0x44
   19994:	e3833010 	orr	r3, r3, #16
	BR.F &= ~flag;
   19998:	e6af3073 	sxtb	r3, r3
	if (val)
   1999c:	e3120020 	tst	r2, #32
	BR.F &= ~flag;
   199a0:	1203307d 	andne	r3, r3, #125	; 0x7d
	BR.F |= flag;
   199a4:	13833020 	orrne	r3, r3, #32
	BR.F &= ~flag;
   199a8:	0203305d 	andeq	r3, r3, #93	; 0x5d
	if (val)
   199ac:	e3120008 	tst	r2, #8
	BR.F |= flag;
   199b0:	13833008 	orrne	r3, r3, #8
	BR.F &= ~flag;
   199b4:	02033075 	andeq	r3, r3, #117	; 0x75
   199b8:	e5c03000 	strb	r3, [r0]
}
   199bc:	e12fff1e 	bx	lr

000199c0 <BIT_4_D>:
	doBIT_r(ctx, 4, BR.D);
   199c0:	e5d02005 	ldrb	r2, [r0, #5]
   199c4:	e5d03000 	ldrb	r3, [r0]
	if (val & (1 << b))
   199c8:	e3120010 	tst	r2, #16
	BR.F &= ~flag;
   199cc:	120330bb 	andne	r3, r3, #187	; 0xbb
	BR.F |= flag;
   199d0:	03833044 	orreq	r3, r3, #68	; 0x44
   199d4:	e3833010 	orr	r3, r3, #16
	BR.F &= ~flag;
   199d8:	e6af3073 	sxtb	r3, r3
	if (val)
   199dc:	e3120020 	tst	r2, #32
	BR.F &= ~flag;
   199e0:	1203307d 	andne	r3, r3, #125	; 0x7d
	BR.F |= flag;
   199e4:	13833020 	orrne	r3, r3, #32
	BR.F &= ~flag;
   199e8:	0203305d 	andeq	r3, r3, #93	; 0x5d
	if (val)
   199ec:	e3120008 	tst	r2, #8
	BR.F |= flag;
   199f0:	13833008 	orrne	r3, r3, #8
	BR.F &= ~flag;
   199f4:	02033075 	andeq	r3, r3, #117	; 0x75
   199f8:	e5c03000 	strb	r3, [r0]
}
   199fc:	e12fff1e 	bx	lr

00019a00 <BIT_4_H>:
	doBIT_r(ctx, 4, BR.H);
   19a00:	e5d02007 	ldrb	r2, [r0, #7]
   19a04:	e5d03000 	ldrb	r3, [r0]
	if (val & (1 << b))
   19a08:	e3120010 	tst	r2, #16
	BR.F &= ~flag;
   19a0c:	120330bb 	andne	r3, r3, #187	; 0xbb
	BR.F |= flag;
   19a10:	03833044 	orreq	r3, r3, #68	; 0x44
   19a14:	e3833010 	orr	r3, r3, #16
	BR.F &= ~flag;
   19a18:	e6af3073 	sxtb	r3, r3
	if (val)
   19a1c:	e3120020 	tst	r2, #32
	BR.F &= ~flag;
   19a20:	1203307d 	andne	r3, r3, #125	; 0x7d
	BR.F |= flag;
   19a24:	13833020 	orrne	r3, r3, #32
	BR.F &= ~flag;
   19a28:	0203305d 	andeq	r3, r3, #93	; 0x5d
	if (val)
   19a2c:	e3120008 	tst	r2, #8
	BR.F |= flag;
   19a30:	13833008 	orrne	r3, r3, #8
	BR.F &= ~flag;
   19a34:	02033075 	andeq	r3, r3, #117	; 0x75
   19a38:	e5c03000 	strb	r3, [r0]
}
   19a3c:	e12fff1e 	bx	lr

00019a40 <BIT_1_B>:
	doBIT_r(ctx, 1, BR.B);
   19a40:	e5d02003 	ldrb	r2, [r0, #3]
   19a44:	e5d03000 	ldrb	r3, [r0]
	if (val & (1 << b))
   19a48:	e3120002 	tst	r2, #2
	BR.F &= ~flag;
   19a4c:	120330bb 	andne	r3, r3, #187	; 0xbb
	BR.F |= flag;
   19a50:	03833044 	orreq	r3, r3, #68	; 0x44
   19a54:	e3833010 	orr	r3, r3, #16
	BR.F &= ~flag;
   19a58:	e6af3073 	sxtb	r3, r3
	if (val)
   19a5c:	e3120020 	tst	r2, #32
	BR.F &= ~flag;
   19a60:	1203307d 	andne	r3, r3, #125	; 0x7d
	BR.F |= flag;
   19a64:	13833020 	orrne	r3, r3, #32
	BR.F &= ~flag;
   19a68:	0203305d 	andeq	r3, r3, #93	; 0x5d
	if (val)
   19a6c:	e3120008 	tst	r2, #8
	BR.F |= flag;
   19a70:	13833008 	orrne	r3, r3, #8
	BR.F &= ~flag;
   19a74:	02033075 	andeq	r3, r3, #117	; 0x75
   19a78:	e5c03000 	strb	r3, [r0]
}
   19a7c:	e12fff1e 	bx	lr

00019a80 <BIT_5_D>:
	doBIT_r(ctx, 5, BR.D);
   19a80:	e5d02005 	ldrb	r2, [r0, #5]
   19a84:	e5d03000 	ldrb	r3, [r0]
	if (val & (1 << b))
   19a88:	e3120020 	tst	r2, #32
	BR.F &= ~flag;
   19a8c:	120330bb 	andne	r3, r3, #187	; 0xbb
	BR.F |= flag;
   19a90:	03833044 	orreq	r3, r3, #68	; 0x44
   19a94:	e3833010 	orr	r3, r3, #16
	BR.F &= ~flag;
   19a98:	e6af3073 	sxtb	r3, r3
	if (val)
   19a9c:	e3120020 	tst	r2, #32
	BR.F &= ~flag;
   19aa0:	1203307d 	andne	r3, r3, #125	; 0x7d
	BR.F |= flag;
   19aa4:	13833020 	orrne	r3, r3, #32
	BR.F &= ~flag;
   19aa8:	0203305d 	andeq	r3, r3, #93	; 0x5d
	if (val)
   19aac:	e3120008 	tst	r2, #8
	BR.F |= flag;
   19ab0:	13833008 	orrne	r3, r3, #8
	BR.F &= ~flag;
   19ab4:	02033075 	andeq	r3, r3, #117	; 0x75
   19ab8:	e5c03000 	strb	r3, [r0]
}
   19abc:	e12fff1e 	bx	lr

00019ac0 <XOR_A>:
	BR.A ^= value;
   19ac0:	e3a02000 	mov	r2, #0
	BR.F &= ~flag;
   19ac4:	e3a03044 	mov	r3, #68	; 0x44
	BR.A ^= value;
   19ac8:	e5c02001 	strb	r2, [r0, #1]
	BR.F &= ~flag;
   19acc:	e5c03000 	strb	r3, [r0]
}
   19ad0:	e12fff1e 	bx	lr

00019ad4 <BIT_7_C>:
	doBIT_r(ctx, 7, BR.C);
   19ad4:	e5d02002 	ldrb	r2, [r0, #2]
   19ad8:	e5d03000 	ldrb	r3, [r0]
	if (val & (1 << b))
   19adc:	e1b013a2 	lsrs	r1, r2, #7
	BR.F &= ~flag;
   19ae0:	120330bb 	andne	r3, r3, #187	; 0xbb
	BR.F |= flag;
   19ae4:	03833044 	orreq	r3, r3, #68	; 0x44
   19ae8:	e3833010 	orr	r3, r3, #16
	BR.F &= ~flag;
   19aec:	e203307d 	and	r3, r3, #125	; 0x7d
    if ((b == 7) && !GETFLAG(F_Z))
   19af0:	e3130040 	tst	r3, #64	; 0x40
	BR.F |= flag;
   19af4:	03833080 	orreq	r3, r3, #128	; 0x80
	if (val)
   19af8:	e3120020 	tst	r2, #32
	BR.F |= flag;
   19afc:	13833020 	orrne	r3, r3, #32
	BR.F &= ~flag;
   19b00:	020330dd 	andeq	r3, r3, #221	; 0xdd
	if (val)
   19b04:	e3120008 	tst	r2, #8
	BR.F |= flag;
   19b08:	13833008 	orrne	r3, r3, #8
	BR.F &= ~flag;
   19b0c:	020330f7 	andeq	r3, r3, #247	; 0xf7
   19b10:	e5c03000 	strb	r3, [r0]
}
   19b14:	e12fff1e 	bx	lr

00019b18 <BIT_7_E>:
	doBIT_r(ctx, 7, BR.E);
   19b18:	e5d02004 	ldrb	r2, [r0, #4]
   19b1c:	e5d03000 	ldrb	r3, [r0]
	if (val & (1 << b))
   19b20:	e1b013a2 	lsrs	r1, r2, #7
	BR.F &= ~flag;
   19b24:	120330bb 	andne	r3, r3, #187	; 0xbb
	BR.F |= flag;
   19b28:	03833044 	orreq	r3, r3, #68	; 0x44
   19b2c:	e3833010 	orr	r3, r3, #16
	BR.F &= ~flag;
   19b30:	e203307d 	and	r3, r3, #125	; 0x7d
    if ((b == 7) && !GETFLAG(F_Z))
   19b34:	e3130040 	tst	r3, #64	; 0x40
	BR.F |= flag;
   19b38:	03833080 	orreq	r3, r3, #128	; 0x80
	if (val)
   19b3c:	e3120020 	tst	r2, #32
	BR.F |= flag;
   19b40:	13833020 	orrne	r3, r3, #32
	BR.F &= ~flag;
   19b44:	020330dd 	andeq	r3, r3, #221	; 0xdd
	if (val)
   19b48:	e3120008 	tst	r2, #8
	BR.F |= flag;
   19b4c:	13833008 	orrne	r3, r3, #8
	BR.F &= ~flag;
   19b50:	020330f7 	andeq	r3, r3, #247	; 0xf7
   19b54:	e5c03000 	strb	r3, [r0]
}
   19b58:	e12fff1e 	bx	lr

00019b5c <BIT_7_A>:
	doBIT_r(ctx, 7, BR.A);
   19b5c:	e5d02001 	ldrb	r2, [r0, #1]
   19b60:	e5d03000 	ldrb	r3, [r0]
	if (val & (1 << b))
   19b64:	e1b013a2 	lsrs	r1, r2, #7
	BR.F &= ~flag;
   19b68:	120330bb 	andne	r3, r3, #187	; 0xbb
	BR.F |= flag;
   19b6c:	03833044 	orreq	r3, r3, #68	; 0x44
   19b70:	e3833010 	orr	r3, r3, #16
	BR.F &= ~flag;
   19b74:	e203307d 	and	r3, r3, #125	; 0x7d
    if ((b == 7) && !GETFLAG(F_Z))
   19b78:	e3130040 	tst	r3, #64	; 0x40
	BR.F |= flag;
   19b7c:	03833080 	orreq	r3, r3, #128	; 0x80
	if (val)
   19b80:	e3120020 	tst	r2, #32
	BR.F |= flag;
   19b84:	13833020 	orrne	r3, r3, #32
	BR.F &= ~flag;
   19b88:	020330dd 	andeq	r3, r3, #221	; 0xdd
	if (val)
   19b8c:	e3120008 	tst	r2, #8
	BR.F |= flag;
   19b90:	13833008 	orrne	r3, r3, #8
	BR.F &= ~flag;
   19b94:	020330f7 	andeq	r3, r3, #247	; 0xf7
   19b98:	e5c03000 	strb	r3, [r0]
}
   19b9c:	e12fff1e 	bx	lr

00019ba0 <BIT_7_H>:
	doBIT_r(ctx, 7, BR.H);
   19ba0:	e5d02007 	ldrb	r2, [r0, #7]
   19ba4:	e5d03000 	ldrb	r3, [r0]
	if (val & (1 << b))
   19ba8:	e1b013a2 	lsrs	r1, r2, #7
	BR.F &= ~flag;
   19bac:	120330bb 	andne	r3, r3, #187	; 0xbb
	BR.F |= flag;
   19bb0:	03833044 	orreq	r3, r3, #68	; 0x44
   19bb4:	e3833010 	orr	r3, r3, #16
	BR.F &= ~flag;
   19bb8:	e203307d 	and	r3, r3, #125	; 0x7d
    if ((b == 7) && !GETFLAG(F_Z))
   19bbc:	e3130040 	tst	r3, #64	; 0x40
	BR.F |= flag;
   19bc0:	03833080 	orreq	r3, r3, #128	; 0x80
	if (val)
   19bc4:	e3120020 	tst	r2, #32
	BR.F |= flag;
   19bc8:	13833020 	orrne	r3, r3, #32
	BR.F &= ~flag;
   19bcc:	020330dd 	andeq	r3, r3, #221	; 0xdd
	if (val)
   19bd0:	e3120008 	tst	r2, #8
	BR.F |= flag;
   19bd4:	13833008 	orrne	r3, r3, #8
	BR.F &= ~flag;
   19bd8:	020330f7 	andeq	r3, r3, #247	; 0xf7
   19bdc:	e5c03000 	strb	r3, [r0]
}
   19be0:	e12fff1e 	bx	lr

00019be4 <BIT_7_D>:
	doBIT_r(ctx, 7, BR.D);
   19be4:	e5d02005 	ldrb	r2, [r0, #5]
   19be8:	e5d03000 	ldrb	r3, [r0]
	if (val & (1 << b))
   19bec:	e1b013a2 	lsrs	r1, r2, #7
	BR.F &= ~flag;
   19bf0:	120330bb 	andne	r3, r3, #187	; 0xbb
	BR.F |= flag;
   19bf4:	03833044 	orreq	r3, r3, #68	; 0x44
   19bf8:	e3833010 	orr	r3, r3, #16
	BR.F &= ~flag;
   19bfc:	e203307d 	and	r3, r3, #125	; 0x7d
    if ((b == 7) && !GETFLAG(F_Z))
   19c00:	e3130040 	tst	r3, #64	; 0x40
	BR.F |= flag;
   19c04:	03833080 	orreq	r3, r3, #128	; 0x80
	if (val)
   19c08:	e3120020 	tst	r2, #32
	BR.F |= flag;
   19c0c:	13833020 	orrne	r3, r3, #32
	BR.F &= ~flag;
   19c10:	020330dd 	andeq	r3, r3, #221	; 0xdd
	if (val)
   19c14:	e3120008 	tst	r2, #8
	BR.F |= flag;
   19c18:	13833008 	orrne	r3, r3, #8
	BR.F &= ~flag;
   19c1c:	020330f7 	andeq	r3, r3, #247	; 0xf7
   19c20:	e5c03000 	strb	r3, [r0]
}
   19c24:	e12fff1e 	bx	lr

00019c28 <BIT_7_L>:
	doBIT_r(ctx, 7, BR.L);
   19c28:	e5d02006 	ldrb	r2, [r0, #6]
   19c2c:	e5d03000 	ldrb	r3, [r0]
	if (val & (1 << b))
   19c30:	e1b013a2 	lsrs	r1, r2, #7
	BR.F &= ~flag;
   19c34:	120330bb 	andne	r3, r3, #187	; 0xbb
	BR.F |= flag;
   19c38:	03833044 	orreq	r3, r3, #68	; 0x44
   19c3c:	e3833010 	orr	r3, r3, #16
	BR.F &= ~flag;
   19c40:	e203307d 	and	r3, r3, #125	; 0x7d
    if ((b == 7) && !GETFLAG(F_Z))
   19c44:	e3130040 	tst	r3, #64	; 0x40
	BR.F |= flag;
   19c48:	03833080 	orreq	r3, r3, #128	; 0x80
	if (val)
   19c4c:	e3120020 	tst	r2, #32
	BR.F |= flag;
   19c50:	13833020 	orrne	r3, r3, #32
	BR.F &= ~flag;
   19c54:	020330dd 	andeq	r3, r3, #221	; 0xdd
	if (val)
   19c58:	e3120008 	tst	r2, #8
	BR.F |= flag;
   19c5c:	13833008 	orrne	r3, r3, #8
	BR.F &= ~flag;
   19c60:	020330f7 	andeq	r3, r3, #247	; 0xf7
   19c64:	e5c03000 	strb	r3, [r0]
}
   19c68:	e12fff1e 	bx	lr

00019c6c <BIT_7_B>:
	doBIT_r(ctx, 7, BR.B);
   19c6c:	e5d02003 	ldrb	r2, [r0, #3]
   19c70:	e5d03000 	ldrb	r3, [r0]
	if (val & (1 << b))
   19c74:	e1b013a2 	lsrs	r1, r2, #7
	BR.F &= ~flag;
   19c78:	120330bb 	andne	r3, r3, #187	; 0xbb
	BR.F |= flag;
   19c7c:	03833044 	orreq	r3, r3, #68	; 0x44
   19c80:	e3833010 	orr	r3, r3, #16
	BR.F &= ~flag;
   19c84:	e203307d 	and	r3, r3, #125	; 0x7d
    if ((b == 7) && !GETFLAG(F_Z))
   19c88:	e3130040 	tst	r3, #64	; 0x40
	BR.F |= flag;
   19c8c:	03833080 	orreq	r3, r3, #128	; 0x80
	if (val)
   19c90:	e3120020 	tst	r2, #32
	BR.F |= flag;
   19c94:	13833020 	orrne	r3, r3, #32
	BR.F &= ~flag;
   19c98:	020330dd 	andeq	r3, r3, #221	; 0xdd
	if (val)
   19c9c:	e3120008 	tst	r2, #8
	BR.F |= flag;
   19ca0:	13833008 	orrne	r3, r3, #8
	BR.F &= ~flag;
   19ca4:	020330f7 	andeq	r3, r3, #247	; 0xf7
   19ca8:	e5c03000 	strb	r3, [r0]
}
   19cac:	e12fff1e 	bx	lr

00019cb0 <INDR>:
	ctx->tstates += 4;
   19cb0:	e5903040 	ldr	r3, [r0, #64]	; 0x40
{
   19cb4:	e92d4070 	push	{r4, r5, r6, lr}
   19cb8:	e1a04000 	mov	r4, r0
   19cbc:	e2833005 	add	r3, r3, #5
	byte val = ioRead(ctx, WR.BC);
   19cc0:	e1d010b2 	ldrh	r1, [r0, #2]
   19cc4:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->ioRead(ctx->ioParam, addr);
   19cc8:	e5903030 	ldr	r3, [r0, #48]	; 0x30
   19ccc:	e5900038 	ldr	r0, [r0, #56]	; 0x38
   19cd0:	e12fff33 	blx	r3
	ctx->tstates += 3;
   19cd4:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	ctx->memWrite(ctx->memParam, addr, val);	
   19cd8:	e1a02000 	mov	r2, r0
	ctx->tstates += 3;
   19cdc:	e2833003 	add	r3, r3, #3
	return ctx->ioRead(ctx->ioParam, addr);
   19ce0:	e1a05000 	mov	r5, r0
	write8(ctx, WR.HL, val);
   19ce4:	e1d410b6 	ldrh	r1, [r4, #6]
	ctx->tstates += 3;
   19ce8:	e5843040 	str	r3, [r4, #64]	; 0x40
	ctx->memWrite(ctx->memParam, addr, val);	
   19cec:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   19cf0:	e5943028 	ldr	r3, [r4, #40]	; 0x28
   19cf4:	e12fff33 	blx	r3
	WR.HL--;
   19cf8:	e1d430b6 	ldrh	r3, [r4, #6]
	BR.B = doIncDec(ctx, BR.B, ID_DEC);
   19cfc:	e5d41003 	ldrb	r1, [r4, #3]
	WR.HL--;
   19d00:	e2433001 	sub	r3, r3, #1
   19d04:	e1c430b6 	strh	r3, [r4, #6]
	BR.B = doIncDec(ctx, BR.B, ID_DEC);
   19d08:	e1a00004 	mov	r0, r4
   19d0c:	ebfff13b 	bl	16200 <doIncDec.constprop.34>
	int flagval = val + ((BR.C - 1) & 0xff);
   19d10:	e5d42002 	ldrb	r2, [r4, #2]
	BR.F |= flag;
   19d14:	e5d43000 	ldrb	r3, [r4]
   19d18:	e2422001 	sub	r2, r2, #1
	if (val)
   19d1c:	e3150080 	tst	r5, #128	; 0x80
   19d20:	e6e52072 	uxtab	r2, r5, r2
	BR.F |= flag;
   19d24:	13833002 	orrne	r3, r3, #2
	BR.F &= ~flag;
   19d28:	020330fd 	andeq	r3, r3, #253	; 0xfd
	VALFLAG(F_PV, parityBit[(flagval & 7) ^ BR.B]);
   19d2c:	e59f1050 	ldr	r1, [pc, #80]	; 19d84 <INDR+0xd4>
	if (val)
   19d30:	e35200ff 	cmp	r2, #255	; 0xff
   19d34:	e2022007 	and	r2, r2, #7
   19d38:	e0222000 	eor	r2, r2, r0
   19d3c:	e7912102 	ldr	r2, [r1, r2, lsl #2]
   19d40:	e5c43000 	strb	r3, [r4]
	BR.F |= flag;
   19d44:	c3833011 	orrgt	r3, r3, #17
	BR.F &= ~flag;
   19d48:	d20330ee 	andle	r3, r3, #238	; 0xee
	if (val)
   19d4c:	e3520000 	cmp	r2, #0
	BR.F |= flag;
   19d50:	13833004 	orrne	r3, r3, #4
	BR.F &= ~flag;
   19d54:	020330fb 	andeq	r3, r3, #251	; 0xfb
	if (BR.B != 0)
   19d58:	e3500000 	cmp	r0, #0
	BR.B = doIncDec(ctx, BR.B, ID_DEC);
   19d5c:	e5c40003 	strb	r0, [r4, #3]
   19d60:	e5c43000 	strb	r3, [r4]
	if (BR.B != 0)
   19d64:	08bd8070 	popeq	{r4, r5, r6, pc}
		ctx->tstates += 5;
   19d68:	e5942040 	ldr	r2, [r4, #64]	; 0x40
		ctx->PC -= 2;
   19d6c:	e1d431bc 	ldrh	r3, [r4, #28]
		ctx->tstates += 5;
   19d70:	e2822005 	add	r2, r2, #5
		ctx->PC -= 2;
   19d74:	e2433002 	sub	r3, r3, #2
		ctx->tstates += 5;
   19d78:	e5842040 	str	r2, [r4, #64]	; 0x40
		ctx->PC -= 2;
   19d7c:	e1c431bc 	strh	r3, [r4, #28]
}
   19d80:	e8bd8070 	pop	{r4, r5, r6, pc}
   19d84:	0004f000 	.word	0x0004f000

00019d88 <INIR>:
	ctx->tstates += 4;
   19d88:	e5903040 	ldr	r3, [r0, #64]	; 0x40
{
   19d8c:	e92d4070 	push	{r4, r5, r6, lr}
   19d90:	e1a04000 	mov	r4, r0
   19d94:	e2833005 	add	r3, r3, #5
	byte val = ioRead(ctx, WR.BC);
   19d98:	e1d010b2 	ldrh	r1, [r0, #2]
   19d9c:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->ioRead(ctx->ioParam, addr);
   19da0:	e5903030 	ldr	r3, [r0, #48]	; 0x30
   19da4:	e5900038 	ldr	r0, [r0, #56]	; 0x38
   19da8:	e12fff33 	blx	r3
	ctx->tstates += 3;
   19dac:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	ctx->memWrite(ctx->memParam, addr, val);	
   19db0:	e1a02000 	mov	r2, r0
	ctx->tstates += 3;
   19db4:	e2833003 	add	r3, r3, #3
	return ctx->ioRead(ctx->ioParam, addr);
   19db8:	e1a05000 	mov	r5, r0
	write8(ctx, WR.HL, val);
   19dbc:	e1d410b6 	ldrh	r1, [r4, #6]
	ctx->tstates += 3;
   19dc0:	e5843040 	str	r3, [r4, #64]	; 0x40
	ctx->memWrite(ctx->memParam, addr, val);	
   19dc4:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   19dc8:	e5943028 	ldr	r3, [r4, #40]	; 0x28
   19dcc:	e12fff33 	blx	r3
	WR.HL++;
   19dd0:	e1d430b6 	ldrh	r3, [r4, #6]
	BR.B = doIncDec(ctx, BR.B, ID_DEC);
   19dd4:	e5d41003 	ldrb	r1, [r4, #3]
	WR.HL++;
   19dd8:	e2833001 	add	r3, r3, #1
   19ddc:	e1c430b6 	strh	r3, [r4, #6]
	BR.B = doIncDec(ctx, BR.B, ID_DEC);
   19de0:	e1a00004 	mov	r0, r4
   19de4:	ebfff105 	bl	16200 <doIncDec.constprop.34>
	int flagval = val + ((BR.C + 1) & 0xff);
   19de8:	e5d42002 	ldrb	r2, [r4, #2]
	BR.F |= flag;
   19dec:	e5d43000 	ldrb	r3, [r4]
   19df0:	e2822001 	add	r2, r2, #1
	if (val)
   19df4:	e3150080 	tst	r5, #128	; 0x80
   19df8:	e6e52072 	uxtab	r2, r5, r2
	BR.F |= flag;
   19dfc:	13833002 	orrne	r3, r3, #2
	BR.F &= ~flag;
   19e00:	020330fd 	andeq	r3, r3, #253	; 0xfd
	VALFLAG(F_PV, parityBit[(flagval & 7) ^ BR.B]);
   19e04:	e59f1050 	ldr	r1, [pc, #80]	; 19e5c <INIR+0xd4>
	if (val)
   19e08:	e35200ff 	cmp	r2, #255	; 0xff
   19e0c:	e2022007 	and	r2, r2, #7
   19e10:	e0222000 	eor	r2, r2, r0
   19e14:	e7912102 	ldr	r2, [r1, r2, lsl #2]
   19e18:	e5c43000 	strb	r3, [r4]
	BR.F |= flag;
   19e1c:	c3833011 	orrgt	r3, r3, #17
	BR.F &= ~flag;
   19e20:	d20330ee 	andle	r3, r3, #238	; 0xee
	if (val)
   19e24:	e3520000 	cmp	r2, #0
	BR.F |= flag;
   19e28:	13833004 	orrne	r3, r3, #4
	BR.F &= ~flag;
   19e2c:	020330fb 	andeq	r3, r3, #251	; 0xfb
	if (BR.B != 0)
   19e30:	e3500000 	cmp	r0, #0
	BR.B = doIncDec(ctx, BR.B, ID_DEC);
   19e34:	e5c40003 	strb	r0, [r4, #3]
   19e38:	e5c43000 	strb	r3, [r4]
	if (BR.B != 0)
   19e3c:	08bd8070 	popeq	{r4, r5, r6, pc}
		ctx->tstates += 5;
   19e40:	e5942040 	ldr	r2, [r4, #64]	; 0x40
		ctx->PC -= 2;
   19e44:	e1d431bc 	ldrh	r3, [r4, #28]
		ctx->tstates += 5;
   19e48:	e2822005 	add	r2, r2, #5
		ctx->PC -= 2;
   19e4c:	e2433002 	sub	r3, r3, #2
		ctx->tstates += 5;
   19e50:	e5842040 	str	r2, [r4, #64]	; 0x40
		ctx->PC -= 2;
   19e54:	e1c431bc 	strh	r3, [r4, #28]
}
   19e58:	e8bd8070 	pop	{r4, r5, r6, pc}
   19e5c:	0004f000 	.word	0x0004f000

00019e60 <RETN>:
   19e60:	e92d4070 	push	{r4, r5, r6, lr}
   19e64:	e5903040 	ldr	r3, [r0, #64]	; 0x40
   19e68:	e1a04000 	mov	r4, r0
   19e6c:	e5d02021 	ldrb	r2, [r0, #33]	; 0x21
   19e70:	e2833003 	add	r3, r3, #3
   19e74:	e1d010bc 	ldrh	r1, [r0, #12]
   19e78:	e5c02020 	strb	r2, [r0, #32]
   19e7c:	e5803040 	str	r3, [r0, #64]	; 0x40
   19e80:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   19e84:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   19e88:	e12fff33 	blx	r3
   19e8c:	e1d410bc 	ldrh	r1, [r4, #12]
   19e90:	e5943040 	ldr	r3, [r4, #64]	; 0x40
   19e94:	e2811001 	add	r1, r1, #1
   19e98:	e2833003 	add	r3, r3, #3
   19e9c:	e6ff1071 	uxth	r1, r1
   19ea0:	e1a05000 	mov	r5, r0
   19ea4:	e5843040 	str	r3, [r4, #64]	; 0x40
   19ea8:	e1c410bc 	strh	r1, [r4, #12]
   19eac:	e5943024 	ldr	r3, [r4, #36]	; 0x24
   19eb0:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   19eb4:	e12fff33 	blx	r3
   19eb8:	e1d430bc 	ldrh	r3, [r4, #12]
   19ebc:	e1850400 	orr	r0, r5, r0, lsl #8
   19ec0:	e2833001 	add	r3, r3, #1
   19ec4:	e1c401bc 	strh	r0, [r4, #28]
   19ec8:	e1c430bc 	strh	r3, [r4, #12]
   19ecc:	e8bd8070 	pop	{r4, r5, r6, pc}

00019ed0 <POP_AF>:
{
   19ed0:	e92d4070 	push	{r4, r5, r6, lr}
	ctx->tstates += 3;
   19ed4:	e5903040 	ldr	r3, [r0, #64]	; 0x40
   19ed8:	e1a04000 	mov	r4, r0
   19edc:	e2833003 	add	r3, r3, #3
	val = read8(ctx, WR.SP);
   19ee0:	e1d010bc 	ldrh	r1, [r0, #12]
	ctx->tstates += 3;
   19ee4:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   19ee8:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   19eec:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   19ef0:	e12fff33 	blx	r3
	WR.SP++;
   19ef4:	e1d410bc 	ldrh	r1, [r4, #12]
	ctx->tstates += 3;
   19ef8:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	WR.SP++;
   19efc:	e2811001 	add	r1, r1, #1
	ctx->tstates += 3;
   19f00:	e2833003 	add	r3, r3, #3
	WR.SP++;
   19f04:	e6ff1071 	uxth	r1, r1
	return ctx->memRead(ctx->memParam, addr);	
   19f08:	e1a05000 	mov	r5, r0
	ctx->tstates += 3;
   19f0c:	e5843040 	str	r3, [r4, #64]	; 0x40
	WR.SP++;
   19f10:	e1c410bc 	strh	r1, [r4, #12]
	return ctx->memRead(ctx->memParam, addr);	
   19f14:	e5943024 	ldr	r3, [r4, #36]	; 0x24
   19f18:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   19f1c:	e12fff33 	blx	r3
	WR.SP++;
   19f20:	e1d430bc 	ldrh	r3, [r4, #12]
	val = val | (read8(ctx, WR.SP) << 8);
   19f24:	e1850400 	orr	r0, r5, r0, lsl #8
	WR.SP++;
   19f28:	e2833001 	add	r3, r3, #1
	WR.AF = doPop(ctx);
   19f2c:	e1c400b0 	strh	r0, [r4]
   19f30:	e1c430bc 	strh	r3, [r4, #12]
}
   19f34:	e8bd8070 	pop	{r4, r5, r6, pc}

00019f38 <RET>:
{
   19f38:	e92d4070 	push	{r4, r5, r6, lr}
	ctx->tstates += 3;
   19f3c:	e5903040 	ldr	r3, [r0, #64]	; 0x40
   19f40:	e1a04000 	mov	r4, r0
   19f44:	e2833003 	add	r3, r3, #3
	val = read8(ctx, WR.SP);
   19f48:	e1d010bc 	ldrh	r1, [r0, #12]
	ctx->tstates += 3;
   19f4c:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   19f50:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   19f54:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   19f58:	e12fff33 	blx	r3
	WR.SP++;
   19f5c:	e1d410bc 	ldrh	r1, [r4, #12]
	ctx->tstates += 3;
   19f60:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	WR.SP++;
   19f64:	e2811001 	add	r1, r1, #1
	ctx->tstates += 3;
   19f68:	e2833003 	add	r3, r3, #3
	WR.SP++;
   19f6c:	e6ff1071 	uxth	r1, r1
	return ctx->memRead(ctx->memParam, addr);	
   19f70:	e1a05000 	mov	r5, r0
	ctx->tstates += 3;
   19f74:	e5843040 	str	r3, [r4, #64]	; 0x40
	WR.SP++;
   19f78:	e1c410bc 	strh	r1, [r4, #12]
	return ctx->memRead(ctx->memParam, addr);	
   19f7c:	e5943024 	ldr	r3, [r4, #36]	; 0x24
   19f80:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   19f84:	e12fff33 	blx	r3
	WR.SP++;
   19f88:	e1d430bc 	ldrh	r3, [r4, #12]
	val = val | (read8(ctx, WR.SP) << 8);
   19f8c:	e1850400 	orr	r0, r5, r0, lsl #8
	WR.SP++;
   19f90:	e2833001 	add	r3, r3, #1
	ctx->PC = doPop(ctx);
   19f94:	e1c401bc 	strh	r0, [r4, #28]
   19f98:	e1c430bc 	strh	r3, [r4, #12]
}
   19f9c:	e8bd8070 	pop	{r4, r5, r6, pc}

00019fa0 <POP_HL>:
{
   19fa0:	e92d4070 	push	{r4, r5, r6, lr}
	ctx->tstates += 3;
   19fa4:	e5903040 	ldr	r3, [r0, #64]	; 0x40
   19fa8:	e1a04000 	mov	r4, r0
   19fac:	e2833003 	add	r3, r3, #3
	val = read8(ctx, WR.SP);
   19fb0:	e1d010bc 	ldrh	r1, [r0, #12]
	ctx->tstates += 3;
   19fb4:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   19fb8:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   19fbc:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   19fc0:	e12fff33 	blx	r3
	WR.SP++;
   19fc4:	e1d410bc 	ldrh	r1, [r4, #12]
	ctx->tstates += 3;
   19fc8:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	WR.SP++;
   19fcc:	e2811001 	add	r1, r1, #1
	ctx->tstates += 3;
   19fd0:	e2833003 	add	r3, r3, #3
	WR.SP++;
   19fd4:	e6ff1071 	uxth	r1, r1
	return ctx->memRead(ctx->memParam, addr);	
   19fd8:	e1a05000 	mov	r5, r0
	ctx->tstates += 3;
   19fdc:	e5843040 	str	r3, [r4, #64]	; 0x40
	WR.SP++;
   19fe0:	e1c410bc 	strh	r1, [r4, #12]
	return ctx->memRead(ctx->memParam, addr);	
   19fe4:	e5943024 	ldr	r3, [r4, #36]	; 0x24
   19fe8:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   19fec:	e12fff33 	blx	r3
	WR.SP++;
   19ff0:	e1d430bc 	ldrh	r3, [r4, #12]
	val = val | (read8(ctx, WR.SP) << 8);
   19ff4:	e1850400 	orr	r0, r5, r0, lsl #8
	WR.SP++;
   19ff8:	e2833001 	add	r3, r3, #1
	WR.HL = doPop(ctx);
   19ffc:	e1c400b6 	strh	r0, [r4, #6]
   1a000:	e1c430bc 	strh	r3, [r4, #12]
}
   1a004:	e8bd8070 	pop	{r4, r5, r6, pc}

0001a008 <POP_IX>:
{
   1a008:	e92d4070 	push	{r4, r5, r6, lr}
	ctx->tstates += 3;
   1a00c:	e5903040 	ldr	r3, [r0, #64]	; 0x40
   1a010:	e1a04000 	mov	r4, r0
   1a014:	e2833003 	add	r3, r3, #3
	val = read8(ctx, WR.SP);
   1a018:	e1d010bc 	ldrh	r1, [r0, #12]
	ctx->tstates += 3;
   1a01c:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   1a020:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   1a024:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   1a028:	e12fff33 	blx	r3
	WR.SP++;
   1a02c:	e1d410bc 	ldrh	r1, [r4, #12]
	ctx->tstates += 3;
   1a030:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	WR.SP++;
   1a034:	e2811001 	add	r1, r1, #1
	ctx->tstates += 3;
   1a038:	e2833003 	add	r3, r3, #3
	WR.SP++;
   1a03c:	e6ff1071 	uxth	r1, r1
	return ctx->memRead(ctx->memParam, addr);	
   1a040:	e1a05000 	mov	r5, r0
	ctx->tstates += 3;
   1a044:	e5843040 	str	r3, [r4, #64]	; 0x40
	WR.SP++;
   1a048:	e1c410bc 	strh	r1, [r4, #12]
	return ctx->memRead(ctx->memParam, addr);	
   1a04c:	e5943024 	ldr	r3, [r4, #36]	; 0x24
   1a050:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   1a054:	e12fff33 	blx	r3
	WR.SP++;
   1a058:	e1d430bc 	ldrh	r3, [r4, #12]
	val = val | (read8(ctx, WR.SP) << 8);
   1a05c:	e1850400 	orr	r0, r5, r0, lsl #8
	WR.SP++;
   1a060:	e2833001 	add	r3, r3, #1
	WR.IX = doPop(ctx);
   1a064:	e1c400b8 	strh	r0, [r4, #8]
   1a068:	e1c430bc 	strh	r3, [r4, #12]
}
   1a06c:	e8bd8070 	pop	{r4, r5, r6, pc}

0001a070 <POP_IY>:
{
   1a070:	e92d4070 	push	{r4, r5, r6, lr}
	ctx->tstates += 3;
   1a074:	e5903040 	ldr	r3, [r0, #64]	; 0x40
   1a078:	e1a04000 	mov	r4, r0
   1a07c:	e2833003 	add	r3, r3, #3
	val = read8(ctx, WR.SP);
   1a080:	e1d010bc 	ldrh	r1, [r0, #12]
	ctx->tstates += 3;
   1a084:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   1a088:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   1a08c:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   1a090:	e12fff33 	blx	r3
	WR.SP++;
   1a094:	e1d410bc 	ldrh	r1, [r4, #12]
	ctx->tstates += 3;
   1a098:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	WR.SP++;
   1a09c:	e2811001 	add	r1, r1, #1
	ctx->tstates += 3;
   1a0a0:	e2833003 	add	r3, r3, #3
	WR.SP++;
   1a0a4:	e6ff1071 	uxth	r1, r1
	return ctx->memRead(ctx->memParam, addr);	
   1a0a8:	e1a05000 	mov	r5, r0
	ctx->tstates += 3;
   1a0ac:	e5843040 	str	r3, [r4, #64]	; 0x40
	WR.SP++;
   1a0b0:	e1c410bc 	strh	r1, [r4, #12]
	return ctx->memRead(ctx->memParam, addr);	
   1a0b4:	e5943024 	ldr	r3, [r4, #36]	; 0x24
   1a0b8:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   1a0bc:	e12fff33 	blx	r3
	WR.SP++;
   1a0c0:	e1d430bc 	ldrh	r3, [r4, #12]
	val = val | (read8(ctx, WR.SP) << 8);
   1a0c4:	e1850400 	orr	r0, r5, r0, lsl #8
	WR.SP++;
   1a0c8:	e2833001 	add	r3, r3, #1
	WR.IY = doPop(ctx);
   1a0cc:	e1c400ba 	strh	r0, [r4, #10]
   1a0d0:	e1c430bc 	strh	r3, [r4, #12]
}
   1a0d4:	e8bd8070 	pop	{r4, r5, r6, pc}

0001a0d8 <POP_BC>:
{
   1a0d8:	e92d4070 	push	{r4, r5, r6, lr}
	ctx->tstates += 3;
   1a0dc:	e5903040 	ldr	r3, [r0, #64]	; 0x40
   1a0e0:	e1a04000 	mov	r4, r0
   1a0e4:	e2833003 	add	r3, r3, #3
	val = read8(ctx, WR.SP);
   1a0e8:	e1d010bc 	ldrh	r1, [r0, #12]
	ctx->tstates += 3;
   1a0ec:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   1a0f0:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   1a0f4:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   1a0f8:	e12fff33 	blx	r3
	WR.SP++;
   1a0fc:	e1d410bc 	ldrh	r1, [r4, #12]
	ctx->tstates += 3;
   1a100:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	WR.SP++;
   1a104:	e2811001 	add	r1, r1, #1
	ctx->tstates += 3;
   1a108:	e2833003 	add	r3, r3, #3
	WR.SP++;
   1a10c:	e6ff1071 	uxth	r1, r1
	return ctx->memRead(ctx->memParam, addr);	
   1a110:	e1a05000 	mov	r5, r0
	ctx->tstates += 3;
   1a114:	e5843040 	str	r3, [r4, #64]	; 0x40
	WR.SP++;
   1a118:	e1c410bc 	strh	r1, [r4, #12]
	return ctx->memRead(ctx->memParam, addr);	
   1a11c:	e5943024 	ldr	r3, [r4, #36]	; 0x24
   1a120:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   1a124:	e12fff33 	blx	r3
	WR.SP++;
   1a128:	e1d430bc 	ldrh	r3, [r4, #12]
	val = val | (read8(ctx, WR.SP) << 8);
   1a12c:	e1850400 	orr	r0, r5, r0, lsl #8
	WR.SP++;
   1a130:	e2833001 	add	r3, r3, #1
	WR.BC = doPop(ctx);
   1a134:	e1c400b2 	strh	r0, [r4, #2]
   1a138:	e1c430bc 	strh	r3, [r4, #12]
}
   1a13c:	e8bd8070 	pop	{r4, r5, r6, pc}

0001a140 <POP_DE>:
{
   1a140:	e92d4070 	push	{r4, r5, r6, lr}
	ctx->tstates += 3;
   1a144:	e5903040 	ldr	r3, [r0, #64]	; 0x40
   1a148:	e1a04000 	mov	r4, r0
   1a14c:	e2833003 	add	r3, r3, #3
	val = read8(ctx, WR.SP);
   1a150:	e1d010bc 	ldrh	r1, [r0, #12]
	ctx->tstates += 3;
   1a154:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   1a158:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   1a15c:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   1a160:	e12fff33 	blx	r3
	WR.SP++;
   1a164:	e1d410bc 	ldrh	r1, [r4, #12]
	ctx->tstates += 3;
   1a168:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	WR.SP++;
   1a16c:	e2811001 	add	r1, r1, #1
	ctx->tstates += 3;
   1a170:	e2833003 	add	r3, r3, #3
	WR.SP++;
   1a174:	e6ff1071 	uxth	r1, r1
	return ctx->memRead(ctx->memParam, addr);	
   1a178:	e1a05000 	mov	r5, r0
	ctx->tstates += 3;
   1a17c:	e5843040 	str	r3, [r4, #64]	; 0x40
	WR.SP++;
   1a180:	e1c410bc 	strh	r1, [r4, #12]
	return ctx->memRead(ctx->memParam, addr);	
   1a184:	e5943024 	ldr	r3, [r4, #36]	; 0x24
   1a188:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   1a18c:	e12fff33 	blx	r3
	WR.SP++;
   1a190:	e1d430bc 	ldrh	r3, [r4, #12]
	val = val | (read8(ctx, WR.SP) << 8);
   1a194:	e1850400 	orr	r0, r5, r0, lsl #8
	WR.SP++;
   1a198:	e2833001 	add	r3, r3, #1
	WR.DE = doPop(ctx);
   1a19c:	e1c400b4 	strh	r0, [r4, #4]
   1a1a0:	e1c430bc 	strh	r3, [r4, #12]
}
   1a1a4:	e8bd8070 	pop	{r4, r5, r6, pc}

0001a1a8 <RETI>:
{
   1a1a8:	e92d4070 	push	{r4, r5, r6, lr}
	ctx->tstates += 3;
   1a1ac:	e5903040 	ldr	r3, [r0, #64]	; 0x40
   1a1b0:	e1a04000 	mov	r4, r0
	ctx->IFF1 = ctx->IFF2;
   1a1b4:	e5d02021 	ldrb	r2, [r0, #33]	; 0x21
   1a1b8:	e2833003 	add	r3, r3, #3
	val = read8(ctx, WR.SP);
   1a1bc:	e1d010bc 	ldrh	r1, [r0, #12]
   1a1c0:	e5c02020 	strb	r2, [r0, #32]
	ctx->tstates += 3;
   1a1c4:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   1a1c8:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   1a1cc:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   1a1d0:	e12fff33 	blx	r3
	WR.SP++;
   1a1d4:	e1d410bc 	ldrh	r1, [r4, #12]
	ctx->tstates += 3;
   1a1d8:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	WR.SP++;
   1a1dc:	e2811001 	add	r1, r1, #1
	ctx->tstates += 3;
   1a1e0:	e2833003 	add	r3, r3, #3
	WR.SP++;
   1a1e4:	e6ff1071 	uxth	r1, r1
	return ctx->memRead(ctx->memParam, addr);	
   1a1e8:	e1a05000 	mov	r5, r0
	ctx->tstates += 3;
   1a1ec:	e5843040 	str	r3, [r4, #64]	; 0x40
	WR.SP++;
   1a1f0:	e1c410bc 	strh	r1, [r4, #12]
	return ctx->memRead(ctx->memParam, addr);	
   1a1f4:	e5943024 	ldr	r3, [r4, #36]	; 0x24
   1a1f8:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   1a1fc:	e12fff33 	blx	r3
	WR.SP++;
   1a200:	e1d430bc 	ldrh	r3, [r4, #12]
	val = val | (read8(ctx, WR.SP) << 8);
   1a204:	e1850400 	orr	r0, r5, r0, lsl #8
	WR.SP++;
   1a208:	e2833001 	add	r3, r3, #1
	ctx->PC = doPop(ctx);
   1a20c:	e1c401bc 	strh	r0, [r4, #28]
   1a210:	e1c430bc 	strh	r3, [r4, #12]
}
   1a214:	e8bd8070 	pop	{r4, r5, r6, pc}

0001a218 <OTIR>:
	ctx->tstates += 3;
   1a218:	e5903040 	ldr	r3, [r0, #64]	; 0x40
{
   1a21c:	e92d4070 	push	{r4, r5, r6, lr}
   1a220:	e2833004 	add	r3, r3, #4
   1a224:	e1a04000 	mov	r4, r0
	byte value = read8(ctx, WR.HL);
   1a228:	e1d010b6 	ldrh	r1, [r0, #6]
   1a22c:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   1a230:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   1a234:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   1a238:	e12fff33 	blx	r3
	BR.B = doIncDec(ctx, BR.B, 1);
   1a23c:	e5d41003 	ldrb	r1, [r4, #3]
   1a240:	e1a05000 	mov	r5, r0
   1a244:	e1a00004 	mov	r0, r4
   1a248:	ebffefec 	bl	16200 <doIncDec.constprop.34>
	ctx->tstates += 4;
   1a24c:	e5943040 	ldr	r3, [r4, #64]	; 0x40
   1a250:	e5c40003 	strb	r0, [r4, #3]
   1a254:	e2833004 	add	r3, r3, #4
	ioWrite(ctx, WR.BC, value);
   1a258:	e1d410b2 	ldrh	r1, [r4, #2]
   1a25c:	e5843040 	str	r3, [r4, #64]	; 0x40
	ctx->ioWrite(ctx->ioParam, addr, val);
   1a260:	e1a02005 	mov	r2, r5
   1a264:	e5943034 	ldr	r3, [r4, #52]	; 0x34
   1a268:	e5940038 	ldr	r0, [r4, #56]	; 0x38
   1a26c:	e12fff33 	blx	r3
	WR.HL++;
   1a270:	e1d400b6 	ldrh	r0, [r4, #6]
	BR.F |= flag;
   1a274:	e5d43000 	ldrb	r3, [r4]
   1a278:	e2800001 	add	r0, r0, #1
   1a27c:	e6ff0070 	uxth	r0, r0
	if (val)
   1a280:	e3150080 	tst	r5, #128	; 0x80
	VALFLAG(F_PV, parityBit[(flag_value & 7) ^ BR.B]);
   1a284:	e5d42003 	ldrb	r2, [r4, #3]
	WR.HL++;
   1a288:	e1c400b6 	strh	r0, [r4, #6]
	int flag_value = value + BR.L;
   1a28c:	e6e50070 	uxtab	r0, r5, r0
	BR.F |= flag;
   1a290:	13833002 	orrne	r3, r3, #2
	BR.F &= ~flag;
   1a294:	020330fd 	andeq	r3, r3, #253	; 0xfd
	VALFLAG(F_PV, parityBit[(flag_value & 7) ^ BR.B]);
   1a298:	e59f1070 	ldr	r1, [pc, #112]	; 1a310 <OTIR+0xf8>
	if (val)
   1a29c:	e35000ff 	cmp	r0, #255	; 0xff
   1a2a0:	e2000007 	and	r0, r0, #7
   1a2a4:	e0200002 	eor	r0, r0, r2
   1a2a8:	e7911100 	ldr	r1, [r1, r0, lsl #2]
   1a2ac:	e5c43000 	strb	r3, [r4]
	BR.F |= flag;
   1a2b0:	c3833011 	orrgt	r3, r3, #17
	BR.F &= ~flag;
   1a2b4:	d20330ee 	andle	r3, r3, #238	; 0xee
	if (val)
   1a2b8:	e3510000 	cmp	r1, #0
	BR.F |= flag;
   1a2bc:	13833004 	orrne	r3, r3, #4
	BR.F &= ~flag;
   1a2c0:	020330fb 	andeq	r3, r3, #251	; 0xfb
	if (val)
   1a2c4:	e3120020 	tst	r2, #32
	BR.F |= flag;
   1a2c8:	13833020 	orrne	r3, r3, #32
	BR.F &= ~flag;
   1a2cc:	020330df 	andeq	r3, r3, #223	; 0xdf
	if (val)
   1a2d0:	e3120008 	tst	r2, #8
   1a2d4:	e5c43000 	strb	r3, [r4]
	BR.F |= flag;
   1a2d8:	13833008 	orrne	r3, r3, #8
   1a2dc:	15c43000 	strbne	r3, [r4]
	if (val)
   1a2e0:	1a000003 	bne	1a2f4 <OTIR+0xdc>
	BR.F &= ~flag;
   1a2e4:	e3c33008 	bic	r3, r3, #8
	if (BR.B != 0)
   1a2e8:	e3520000 	cmp	r2, #0
   1a2ec:	e5c43000 	strb	r3, [r4]
   1a2f0:	08bd8070 	popeq	{r4, r5, r6, pc}
		ctx->tstates += 5;
   1a2f4:	e5942040 	ldr	r2, [r4, #64]	; 0x40
		ctx->PC -= 2;
   1a2f8:	e1d431bc 	ldrh	r3, [r4, #28]
		ctx->tstates += 5;
   1a2fc:	e2822005 	add	r2, r2, #5
		ctx->PC -= 2;
   1a300:	e2433002 	sub	r3, r3, #2
		ctx->tstates += 5;
   1a304:	e5842040 	str	r2, [r4, #64]	; 0x40
		ctx->PC -= 2;
   1a308:	e1c431bc 	strh	r3, [r4, #28]
}
   1a30c:	e8bd8070 	pop	{r4, r5, r6, pc}
   1a310:	0004f000 	.word	0x0004f000

0001a314 <OTDR>:
	ctx->tstates += 3;
   1a314:	e5903040 	ldr	r3, [r0, #64]	; 0x40
{
   1a318:	e92d4070 	push	{r4, r5, r6, lr}
   1a31c:	e2833004 	add	r3, r3, #4
   1a320:	e1a04000 	mov	r4, r0
	byte value = read8(ctx, WR.HL);
   1a324:	e1d010b6 	ldrh	r1, [r0, #6]
   1a328:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   1a32c:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   1a330:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   1a334:	e12fff33 	blx	r3
	BR.B = doIncDec(ctx, BR.B, 1);
   1a338:	e5d41003 	ldrb	r1, [r4, #3]
   1a33c:	e1a05000 	mov	r5, r0
   1a340:	e1a00004 	mov	r0, r4
   1a344:	ebffefad 	bl	16200 <doIncDec.constprop.34>
	ctx->tstates += 4;
   1a348:	e5943040 	ldr	r3, [r4, #64]	; 0x40
   1a34c:	e5c40003 	strb	r0, [r4, #3]
   1a350:	e2833004 	add	r3, r3, #4
	ioWrite(ctx, WR.BC, value);
   1a354:	e1d410b2 	ldrh	r1, [r4, #2]
   1a358:	e5843040 	str	r3, [r4, #64]	; 0x40
	ctx->ioWrite(ctx->ioParam, addr, val);
   1a35c:	e1a02005 	mov	r2, r5
   1a360:	e5943034 	ldr	r3, [r4, #52]	; 0x34
   1a364:	e5940038 	ldr	r0, [r4, #56]	; 0x38
   1a368:	e12fff33 	blx	r3
	WR.HL--;
   1a36c:	e1d400b6 	ldrh	r0, [r4, #6]
	BR.F |= flag;
   1a370:	e5d43000 	ldrb	r3, [r4]
   1a374:	e2400001 	sub	r0, r0, #1
   1a378:	e6ff0070 	uxth	r0, r0
	if (val)
   1a37c:	e3150080 	tst	r5, #128	; 0x80
	VALFLAG(F_PV, parityBit[(flag_value & 7) ^ BR.B]);
   1a380:	e5d42003 	ldrb	r2, [r4, #3]
	WR.HL--;
   1a384:	e1c400b6 	strh	r0, [r4, #6]
	int flag_value = value + BR.L;
   1a388:	e6e50070 	uxtab	r0, r5, r0
	BR.F |= flag;
   1a38c:	13833002 	orrne	r3, r3, #2
	BR.F &= ~flag;
   1a390:	020330fd 	andeq	r3, r3, #253	; 0xfd
	VALFLAG(F_PV, parityBit[(flag_value & 7) ^ BR.B]);
   1a394:	e59f1070 	ldr	r1, [pc, #112]	; 1a40c <OTDR+0xf8>
	if (val)
   1a398:	e35000ff 	cmp	r0, #255	; 0xff
   1a39c:	e2000007 	and	r0, r0, #7
   1a3a0:	e0200002 	eor	r0, r0, r2
   1a3a4:	e7911100 	ldr	r1, [r1, r0, lsl #2]
   1a3a8:	e5c43000 	strb	r3, [r4]
	BR.F |= flag;
   1a3ac:	c3833011 	orrgt	r3, r3, #17
	BR.F &= ~flag;
   1a3b0:	d20330ee 	andle	r3, r3, #238	; 0xee
	if (val)
   1a3b4:	e3510000 	cmp	r1, #0
	BR.F |= flag;
   1a3b8:	13833004 	orrne	r3, r3, #4
	BR.F &= ~flag;
   1a3bc:	020330fb 	andeq	r3, r3, #251	; 0xfb
	if (val)
   1a3c0:	e3120020 	tst	r2, #32
	BR.F |= flag;
   1a3c4:	13833020 	orrne	r3, r3, #32
	BR.F &= ~flag;
   1a3c8:	020330df 	andeq	r3, r3, #223	; 0xdf
	if (val)
   1a3cc:	e3120008 	tst	r2, #8
   1a3d0:	e5c43000 	strb	r3, [r4]
	BR.F |= flag;
   1a3d4:	13833008 	orrne	r3, r3, #8
   1a3d8:	15c43000 	strbne	r3, [r4]
	if (val)
   1a3dc:	1a000003 	bne	1a3f0 <OTDR+0xdc>
	BR.F &= ~flag;
   1a3e0:	e3c33008 	bic	r3, r3, #8
	if (BR.B != 0)
   1a3e4:	e3520000 	cmp	r2, #0
   1a3e8:	e5c43000 	strb	r3, [r4]
   1a3ec:	08bd8070 	popeq	{r4, r5, r6, pc}
		ctx->tstates += 5;
   1a3f0:	e5942040 	ldr	r2, [r4, #64]	; 0x40
		ctx->PC -= 2;
   1a3f4:	e1d431bc 	ldrh	r3, [r4, #28]
		ctx->tstates += 5;
   1a3f8:	e2822005 	add	r2, r2, #5
		ctx->PC -= 2;
   1a3fc:	e2433002 	sub	r3, r3, #2
		ctx->tstates += 5;
   1a400:	e5842040 	str	r2, [r4, #64]	; 0x40
		ctx->PC -= 2;
   1a404:	e1c431bc 	strh	r3, [r4, #28]
}
   1a408:	e8bd8070 	pop	{r4, r5, r6, pc}
   1a40c:	0004f000 	.word	0x0004f000

0001a410 <JP_off_nn>:
	ctx->tstates += 3;
   1a410:	e5903040 	ldr	r3, [r0, #64]	; 0x40
{
   1a414:	e92d4070 	push	{r4, r5, r6, lr}
   1a418:	e1a04000 	mov	r4, r0
	ushort addr = read16(ctx, ctx->PC);
   1a41c:	e1d051bc 	ldrh	r5, [r0, #28]
   1a420:	e2833003 	add	r3, r3, #3
   1a424:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   1a428:	e1a01005 	mov	r1, r5
   1a42c:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   1a430:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   1a434:	e12fff33 	blx	r3
	ctx->tstates += 3;
   1a438:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	byte msb = read8(ctx, addr + 1);
   1a43c:	e2851001 	add	r1, r5, #1
	ctx->tstates += 3;
   1a440:	e2833003 	add	r3, r3, #3
	return ctx->memRead(ctx->memParam, addr);	
   1a444:	e1a06000 	mov	r6, r0
	ctx->tstates += 3;
   1a448:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   1a44c:	e6ff1071 	uxth	r1, r1
   1a450:	e5943024 	ldr	r3, [r4, #36]	; 0x24
   1a454:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   1a458:	e12fff33 	blx	r3
	return msb << 8 | lsb;
   1a45c:	e1860400 	orr	r0, r6, r0, lsl #8
		ctx->PC = addr;
   1a460:	e1c401bc 	strh	r0, [r4, #28]
}
   1a464:	e8bd8070 	pop	{r4, r5, r6, pc}

0001a468 <LD_DE_nn>:
	ctx->tstates += 3;
   1a468:	e5903040 	ldr	r3, [r0, #64]	; 0x40
{
   1a46c:	e92d4070 	push	{r4, r5, r6, lr}
   1a470:	e1a04000 	mov	r4, r0
	WR.DE = read16(ctx, ctx->PC);
   1a474:	e1d051bc 	ldrh	r5, [r0, #28]
   1a478:	e2833003 	add	r3, r3, #3
   1a47c:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   1a480:	e1a01005 	mov	r1, r5
   1a484:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   1a488:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   1a48c:	e12fff33 	blx	r3
	ctx->tstates += 3;
   1a490:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	byte msb = read8(ctx, addr + 1);
   1a494:	e2851001 	add	r1, r5, #1
	ctx->tstates += 3;
   1a498:	e2833003 	add	r3, r3, #3
	return ctx->memRead(ctx->memParam, addr);	
   1a49c:	e1a06000 	mov	r6, r0
	ctx->tstates += 3;
   1a4a0:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   1a4a4:	e6ff1071 	uxth	r1, r1
   1a4a8:	e5943024 	ldr	r3, [r4, #36]	; 0x24
   1a4ac:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   1a4b0:	e12fff33 	blx	r3
	ctx->PC += 2;
   1a4b4:	e1d431bc 	ldrh	r3, [r4, #28]
	return msb << 8 | lsb;
   1a4b8:	e1860400 	orr	r0, r6, r0, lsl #8
   1a4bc:	e2833002 	add	r3, r3, #2
	WR.DE = read16(ctx, ctx->PC);
   1a4c0:	e1c400b4 	strh	r0, [r4, #4]
	ctx->PC += 2;
   1a4c4:	e1c431bc 	strh	r3, [r4, #28]
}
   1a4c8:	e8bd8070 	pop	{r4, r5, r6, pc}

0001a4cc <LD_BC_nn>:
	ctx->tstates += 3;
   1a4cc:	e5903040 	ldr	r3, [r0, #64]	; 0x40
{
   1a4d0:	e92d4070 	push	{r4, r5, r6, lr}
   1a4d4:	e1a04000 	mov	r4, r0
	WR.BC = read16(ctx, ctx->PC);
   1a4d8:	e1d051bc 	ldrh	r5, [r0, #28]
   1a4dc:	e2833003 	add	r3, r3, #3
   1a4e0:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   1a4e4:	e1a01005 	mov	r1, r5
   1a4e8:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   1a4ec:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   1a4f0:	e12fff33 	blx	r3
	ctx->tstates += 3;
   1a4f4:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	byte msb = read8(ctx, addr + 1);
   1a4f8:	e2851001 	add	r1, r5, #1
	ctx->tstates += 3;
   1a4fc:	e2833003 	add	r3, r3, #3
	return ctx->memRead(ctx->memParam, addr);	
   1a500:	e1a06000 	mov	r6, r0
	ctx->tstates += 3;
   1a504:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   1a508:	e6ff1071 	uxth	r1, r1
   1a50c:	e5943024 	ldr	r3, [r4, #36]	; 0x24
   1a510:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   1a514:	e12fff33 	blx	r3
	ctx->PC += 2;
   1a518:	e1d431bc 	ldrh	r3, [r4, #28]
	return msb << 8 | lsb;
   1a51c:	e1860400 	orr	r0, r6, r0, lsl #8
   1a520:	e2833002 	add	r3, r3, #2
	WR.BC = read16(ctx, ctx->PC);
   1a524:	e1c400b2 	strh	r0, [r4, #2]
	ctx->PC += 2;
   1a528:	e1c431bc 	strh	r3, [r4, #28]
}
   1a52c:	e8bd8070 	pop	{r4, r5, r6, pc}

0001a530 <LD_SP_nn>:
	ctx->tstates += 3;
   1a530:	e5903040 	ldr	r3, [r0, #64]	; 0x40
{
   1a534:	e92d4070 	push	{r4, r5, r6, lr}
   1a538:	e1a04000 	mov	r4, r0
	WR.SP = read16(ctx, ctx->PC);
   1a53c:	e1d051bc 	ldrh	r5, [r0, #28]
   1a540:	e2833003 	add	r3, r3, #3
   1a544:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   1a548:	e1a01005 	mov	r1, r5
   1a54c:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   1a550:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   1a554:	e12fff33 	blx	r3
	ctx->tstates += 3;
   1a558:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	byte msb = read8(ctx, addr + 1);
   1a55c:	e2851001 	add	r1, r5, #1
	ctx->tstates += 3;
   1a560:	e2833003 	add	r3, r3, #3
	return ctx->memRead(ctx->memParam, addr);	
   1a564:	e1a06000 	mov	r6, r0
	ctx->tstates += 3;
   1a568:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   1a56c:	e6ff1071 	uxth	r1, r1
   1a570:	e5943024 	ldr	r3, [r4, #36]	; 0x24
   1a574:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   1a578:	e12fff33 	blx	r3
	ctx->PC += 2;
   1a57c:	e1d431bc 	ldrh	r3, [r4, #28]
	return msb << 8 | lsb;
   1a580:	e1860400 	orr	r0, r6, r0, lsl #8
   1a584:	e2833002 	add	r3, r3, #2
	WR.SP = read16(ctx, ctx->PC);
   1a588:	e1c400bc 	strh	r0, [r4, #12]
	ctx->PC += 2;
   1a58c:	e1c431bc 	strh	r3, [r4, #28]
}
   1a590:	e8bd8070 	pop	{r4, r5, r6, pc}

0001a594 <LD_HL_nn>:
	ctx->tstates += 3;
   1a594:	e5903040 	ldr	r3, [r0, #64]	; 0x40
{
   1a598:	e92d4070 	push	{r4, r5, r6, lr}
   1a59c:	e1a04000 	mov	r4, r0
	WR.HL = read16(ctx, ctx->PC);
   1a5a0:	e1d051bc 	ldrh	r5, [r0, #28]
   1a5a4:	e2833003 	add	r3, r3, #3
   1a5a8:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   1a5ac:	e1a01005 	mov	r1, r5
   1a5b0:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   1a5b4:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   1a5b8:	e12fff33 	blx	r3
	ctx->tstates += 3;
   1a5bc:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	byte msb = read8(ctx, addr + 1);
   1a5c0:	e2851001 	add	r1, r5, #1
	ctx->tstates += 3;
   1a5c4:	e2833003 	add	r3, r3, #3
	return ctx->memRead(ctx->memParam, addr);	
   1a5c8:	e1a06000 	mov	r6, r0
	ctx->tstates += 3;
   1a5cc:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   1a5d0:	e6ff1071 	uxth	r1, r1
   1a5d4:	e5943024 	ldr	r3, [r4, #36]	; 0x24
   1a5d8:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   1a5dc:	e12fff33 	blx	r3
	ctx->PC += 2;
   1a5e0:	e1d431bc 	ldrh	r3, [r4, #28]
	return msb << 8 | lsb;
   1a5e4:	e1860400 	orr	r0, r6, r0, lsl #8
   1a5e8:	e2833002 	add	r3, r3, #2
	WR.HL = read16(ctx, ctx->PC);
   1a5ec:	e1c400b6 	strh	r0, [r4, #6]
	ctx->PC += 2;
   1a5f0:	e1c431bc 	strh	r3, [r4, #28]
}
   1a5f4:	e8bd8070 	pop	{r4, r5, r6, pc}

0001a5f8 <LD_IX_nn>:
	ctx->tstates += 3;
   1a5f8:	e5903040 	ldr	r3, [r0, #64]	; 0x40
{
   1a5fc:	e92d4070 	push	{r4, r5, r6, lr}
   1a600:	e1a04000 	mov	r4, r0
	WR.IX = read16(ctx, ctx->PC);
   1a604:	e1d051bc 	ldrh	r5, [r0, #28]
   1a608:	e2833003 	add	r3, r3, #3
   1a60c:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   1a610:	e1a01005 	mov	r1, r5
   1a614:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   1a618:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   1a61c:	e12fff33 	blx	r3
	ctx->tstates += 3;
   1a620:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	byte msb = read8(ctx, addr + 1);
   1a624:	e2851001 	add	r1, r5, #1
	ctx->tstates += 3;
   1a628:	e2833003 	add	r3, r3, #3
	return ctx->memRead(ctx->memParam, addr);	
   1a62c:	e1a06000 	mov	r6, r0
	ctx->tstates += 3;
   1a630:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   1a634:	e6ff1071 	uxth	r1, r1
   1a638:	e5943024 	ldr	r3, [r4, #36]	; 0x24
   1a63c:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   1a640:	e12fff33 	blx	r3
	ctx->PC += 2;
   1a644:	e1d431bc 	ldrh	r3, [r4, #28]
	return msb << 8 | lsb;
   1a648:	e1860400 	orr	r0, r6, r0, lsl #8
   1a64c:	e2833002 	add	r3, r3, #2
	WR.IX = read16(ctx, ctx->PC);
   1a650:	e1c400b8 	strh	r0, [r4, #8]
	ctx->PC += 2;
   1a654:	e1c431bc 	strh	r3, [r4, #28]
}
   1a658:	e8bd8070 	pop	{r4, r5, r6, pc}

0001a65c <LD_IY_nn>:
	ctx->tstates += 3;
   1a65c:	e5903040 	ldr	r3, [r0, #64]	; 0x40
{
   1a660:	e92d4070 	push	{r4, r5, r6, lr}
   1a664:	e1a04000 	mov	r4, r0
	WR.IY = read16(ctx, ctx->PC);
   1a668:	e1d051bc 	ldrh	r5, [r0, #28]
   1a66c:	e2833003 	add	r3, r3, #3
   1a670:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   1a674:	e1a01005 	mov	r1, r5
   1a678:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   1a67c:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   1a680:	e12fff33 	blx	r3
	ctx->tstates += 3;
   1a684:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	byte msb = read8(ctx, addr + 1);
   1a688:	e2851001 	add	r1, r5, #1
	ctx->tstates += 3;
   1a68c:	e2833003 	add	r3, r3, #3
	return ctx->memRead(ctx->memParam, addr);	
   1a690:	e1a06000 	mov	r6, r0
	ctx->tstates += 3;
   1a694:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   1a698:	e6ff1071 	uxth	r1, r1
   1a69c:	e5943024 	ldr	r3, [r4, #36]	; 0x24
   1a6a0:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   1a6a4:	e12fff33 	blx	r3
	ctx->PC += 2;
   1a6a8:	e1d431bc 	ldrh	r3, [r4, #28]
	return msb << 8 | lsb;
   1a6ac:	e1860400 	orr	r0, r6, r0, lsl #8
   1a6b0:	e2833002 	add	r3, r3, #2
	WR.IY = read16(ctx, ctx->PC);
   1a6b4:	e1c400ba 	strh	r0, [r4, #10]
	ctx->PC += 2;
   1a6b8:	e1c431bc 	strh	r3, [r4, #28]
}
   1a6bc:	e8bd8070 	pop	{r4, r5, r6, pc}

0001a6c0 <JP_P_off_nn>:
	ctx->tstates += 3;
   1a6c0:	e5903040 	ldr	r3, [r0, #64]	; 0x40
{
   1a6c4:	e92d4070 	push	{r4, r5, r6, lr}
   1a6c8:	e1a04000 	mov	r4, r0
	ushort addr = read16(ctx, ctx->PC);
   1a6cc:	e1d051bc 	ldrh	r5, [r0, #28]
   1a6d0:	e2833003 	add	r3, r3, #3
   1a6d4:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   1a6d8:	e1a01005 	mov	r1, r5
   1a6dc:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   1a6e0:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   1a6e4:	e12fff33 	blx	r3
	ctx->tstates += 3;
   1a6e8:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	byte msb = read8(ctx, addr + 1);
   1a6ec:	e2851001 	add	r1, r5, #1
	ctx->tstates += 3;
   1a6f0:	e2833003 	add	r3, r3, #3
	return ctx->memRead(ctx->memParam, addr);	
   1a6f4:	e1a06000 	mov	r6, r0
	ctx->tstates += 3;
   1a6f8:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   1a6fc:	e6ff1071 	uxth	r1, r1
   1a700:	e5943024 	ldr	r3, [r4, #36]	; 0x24
   1a704:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   1a708:	e12fff33 	blx	r3
	if (condition(ctx, C_P))
   1a70c:	e1d420d0 	ldrsb	r2, [r4]
	ctx->PC += 2;
   1a710:	e1d431bc 	ldrh	r3, [r4, #28]
	if (condition(ctx, C_P))
   1a714:	e3520000 	cmp	r2, #0
	ctx->PC += 2;
   1a718:	e2833002 	add	r3, r3, #2
	return msb << 8 | lsb;
   1a71c:	a1866400 	orrge	r6, r6, r0, lsl #8
   1a720:	e1c431bc 	strh	r3, [r4, #28]
		ctx->PC = addr;
   1a724:	a1c461bc 	strhge	r6, [r4, #28]
}
   1a728:	e8bd8070 	pop	{r4, r5, r6, pc}

0001a72c <JP_M_off_nn>:
	ctx->tstates += 3;
   1a72c:	e5903040 	ldr	r3, [r0, #64]	; 0x40
{
   1a730:	e92d4070 	push	{r4, r5, r6, lr}
   1a734:	e1a04000 	mov	r4, r0
	ushort addr = read16(ctx, ctx->PC);
   1a738:	e1d051bc 	ldrh	r5, [r0, #28]
   1a73c:	e2833003 	add	r3, r3, #3
   1a740:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   1a744:	e1a01005 	mov	r1, r5
   1a748:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   1a74c:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   1a750:	e12fff33 	blx	r3
	ctx->tstates += 3;
   1a754:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	byte msb = read8(ctx, addr + 1);
   1a758:	e2851001 	add	r1, r5, #1
	ctx->tstates += 3;
   1a75c:	e2833003 	add	r3, r3, #3
	return ctx->memRead(ctx->memParam, addr);	
   1a760:	e1a06000 	mov	r6, r0
	ctx->tstates += 3;
   1a764:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   1a768:	e6ff1071 	uxth	r1, r1
   1a76c:	e5943024 	ldr	r3, [r4, #36]	; 0x24
   1a770:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   1a774:	e12fff33 	blx	r3
	if (condition(ctx, C_M))
   1a778:	e1d420d0 	ldrsb	r2, [r4]
	ctx->PC += 2;
   1a77c:	e1d431bc 	ldrh	r3, [r4, #28]
	if (condition(ctx, C_M))
   1a780:	e3520000 	cmp	r2, #0
	ctx->PC += 2;
   1a784:	e2833002 	add	r3, r3, #2
	return msb << 8 | lsb;
   1a788:	b1866400 	orrlt	r6, r6, r0, lsl #8
   1a78c:	e1c431bc 	strh	r3, [r4, #28]
		ctx->PC = addr;
   1a790:	b1c461bc 	strhlt	r6, [r4, #28]
}
   1a794:	e8bd8070 	pop	{r4, r5, r6, pc}

0001a798 <RET_P>:
	ctx->tstates += 1;
   1a798:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	if (condition(ctx, C_P))
   1a79c:	e1d010d0 	ldrsb	r1, [r0]
	ctx->tstates += 1;
   1a7a0:	e2832001 	add	r2, r3, #1
	if (condition(ctx, C_P))
   1a7a4:	e3510000 	cmp	r1, #0
	ctx->tstates += 1;
   1a7a8:	e5802040 	str	r2, [r0, #64]	; 0x40
	if (condition(ctx, C_P))
   1a7ac:	b12fff1e 	bxlt	lr
{
   1a7b0:	e92d4070 	push	{r4, r5, r6, lr}
   1a7b4:	e1a04000 	mov	r4, r0
	ctx->tstates += 3;
   1a7b8:	e2833004 	add	r3, r3, #4
	val = read8(ctx, WR.SP);
   1a7bc:	e1d010bc 	ldrh	r1, [r0, #12]
	ctx->tstates += 3;
   1a7c0:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   1a7c4:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   1a7c8:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   1a7cc:	e12fff33 	blx	r3
	WR.SP++;
   1a7d0:	e1d410bc 	ldrh	r1, [r4, #12]
	ctx->tstates += 3;
   1a7d4:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	WR.SP++;
   1a7d8:	e2811001 	add	r1, r1, #1
   1a7dc:	e6ff1071 	uxth	r1, r1
	ctx->tstates += 3;
   1a7e0:	e2833003 	add	r3, r3, #3
	return ctx->memRead(ctx->memParam, addr);	
   1a7e4:	e1a05000 	mov	r5, r0
	ctx->tstates += 3;
   1a7e8:	e5843040 	str	r3, [r4, #64]	; 0x40
	WR.SP++;
   1a7ec:	e1c410bc 	strh	r1, [r4, #12]
	return ctx->memRead(ctx->memParam, addr);	
   1a7f0:	e5943024 	ldr	r3, [r4, #36]	; 0x24
   1a7f4:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   1a7f8:	e12fff33 	blx	r3
	WR.SP++;
   1a7fc:	e1d430bc 	ldrh	r3, [r4, #12]
	val = val | (read8(ctx, WR.SP) << 8);
   1a800:	e1850400 	orr	r0, r5, r0, lsl #8
	WR.SP++;
   1a804:	e2833001 	add	r3, r3, #1
		ctx->PC = doPop(ctx);
   1a808:	e1c401bc 	strh	r0, [r4, #28]
   1a80c:	e1c430bc 	strh	r3, [r4, #12]
}
   1a810:	e8bd8070 	pop	{r4, r5, r6, pc}

0001a814 <JP_NC_off_nn>:
	ctx->tstates += 3;
   1a814:	e5903040 	ldr	r3, [r0, #64]	; 0x40
{
   1a818:	e92d4070 	push	{r4, r5, r6, lr}
   1a81c:	e1a04000 	mov	r4, r0
	ushort addr = read16(ctx, ctx->PC);
   1a820:	e1d051bc 	ldrh	r5, [r0, #28]
   1a824:	e2833003 	add	r3, r3, #3
   1a828:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   1a82c:	e1a01005 	mov	r1, r5
   1a830:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   1a834:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   1a838:	e12fff33 	blx	r3
	ctx->tstates += 3;
   1a83c:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	byte msb = read8(ctx, addr + 1);
   1a840:	e2851001 	add	r1, r5, #1
	ctx->tstates += 3;
   1a844:	e2833003 	add	r3, r3, #3
	return ctx->memRead(ctx->memParam, addr);	
   1a848:	e1a06000 	mov	r6, r0
	ctx->tstates += 3;
   1a84c:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   1a850:	e6ff1071 	uxth	r1, r1
   1a854:	e5943024 	ldr	r3, [r4, #36]	; 0x24
   1a858:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   1a85c:	e12fff33 	blx	r3
	return (BR.F & flag) != 0;
   1a860:	e5d42000 	ldrb	r2, [r4]
	ctx->PC += 2;
   1a864:	e1d431bc 	ldrh	r3, [r4, #28]
	if (condition(ctx, C_NC))
   1a868:	e3120001 	tst	r2, #1
	ctx->PC += 2;
   1a86c:	e2833002 	add	r3, r3, #2
	return msb << 8 | lsb;
   1a870:	01866400 	orreq	r6, r6, r0, lsl #8
   1a874:	e1c431bc 	strh	r3, [r4, #28]
		ctx->PC = addr;
   1a878:	01c461bc 	strheq	r6, [r4, #28]
}
   1a87c:	e8bd8070 	pop	{r4, r5, r6, pc}

0001a880 <JP_NZ_off_nn>:
	ctx->tstates += 3;
   1a880:	e5903040 	ldr	r3, [r0, #64]	; 0x40
{
   1a884:	e92d4070 	push	{r4, r5, r6, lr}
   1a888:	e1a04000 	mov	r4, r0
	ushort addr = read16(ctx, ctx->PC);
   1a88c:	e1d051bc 	ldrh	r5, [r0, #28]
   1a890:	e2833003 	add	r3, r3, #3
   1a894:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   1a898:	e1a01005 	mov	r1, r5
   1a89c:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   1a8a0:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   1a8a4:	e12fff33 	blx	r3
	ctx->tstates += 3;
   1a8a8:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	byte msb = read8(ctx, addr + 1);
   1a8ac:	e2851001 	add	r1, r5, #1
	ctx->tstates += 3;
   1a8b0:	e2833003 	add	r3, r3, #3
	return ctx->memRead(ctx->memParam, addr);	
   1a8b4:	e1a06000 	mov	r6, r0
	ctx->tstates += 3;
   1a8b8:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   1a8bc:	e6ff1071 	uxth	r1, r1
   1a8c0:	e5943024 	ldr	r3, [r4, #36]	; 0x24
   1a8c4:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   1a8c8:	e12fff33 	blx	r3
	return (BR.F & flag) != 0;
   1a8cc:	e5d42000 	ldrb	r2, [r4]
	ctx->PC += 2;
   1a8d0:	e1d431bc 	ldrh	r3, [r4, #28]
	if (condition(ctx, C_NZ))
   1a8d4:	e3120040 	tst	r2, #64	; 0x40
	ctx->PC += 2;
   1a8d8:	e2833002 	add	r3, r3, #2
	return msb << 8 | lsb;
   1a8dc:	01866400 	orreq	r6, r6, r0, lsl #8
   1a8e0:	e1c431bc 	strh	r3, [r4, #28]
		ctx->PC = addr;
   1a8e4:	01c461bc 	strheq	r6, [r4, #28]
}
   1a8e8:	e8bd8070 	pop	{r4, r5, r6, pc}

0001a8ec <LD_off_nn_DE>:
	ctx->tstates += 3;
   1a8ec:	e5903040 	ldr	r3, [r0, #64]	; 0x40
{
   1a8f0:	e92d4070 	push	{r4, r5, r6, lr}
   1a8f4:	e1a04000 	mov	r4, r0
	write16(ctx, read16(ctx, ctx->PC), WR.DE);
   1a8f8:	e1d061bc 	ldrh	r6, [r0, #28]
   1a8fc:	e2833003 	add	r3, r3, #3
   1a900:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   1a904:	e1a01006 	mov	r1, r6
   1a908:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   1a90c:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   1a910:	e12fff33 	blx	r3
	ctx->tstates += 3;
   1a914:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	byte msb = read8(ctx, addr + 1);
   1a918:	e2861001 	add	r1, r6, #1
	ctx->tstates += 3;
   1a91c:	e2833003 	add	r3, r3, #3
	return ctx->memRead(ctx->memParam, addr);	
   1a920:	e1a05000 	mov	r5, r0
   1a924:	e6ff1071 	uxth	r1, r1
	ctx->tstates += 3;
   1a928:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   1a92c:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   1a930:	e5943024 	ldr	r3, [r4, #36]	; 0x24
   1a934:	e12fff33 	blx	r3
	ctx->tstates += 3;
   1a938:	e5943040 	ldr	r3, [r4, #64]	; 0x40
   1a93c:	e1d460b4 	ldrh	r6, [r4, #4]
	return msb << 8 | lsb;
   1a940:	e1855400 	orr	r5, r5, r0, lsl #8
   1a944:	e6ff5075 	uxth	r5, r5
	ctx->tstates += 3;
   1a948:	e2833003 	add	r3, r3, #3
   1a94c:	e5843040 	str	r3, [r4, #64]	; 0x40
	ctx->memWrite(ctx->memParam, addr, val);	
   1a950:	e1a01005 	mov	r1, r5
   1a954:	e6ef2076 	uxtb	r2, r6
   1a958:	e5943028 	ldr	r3, [r4, #40]	; 0x28
   1a95c:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   1a960:	e12fff33 	blx	r3
	ctx->tstates += 3;
   1a964:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	write8(ctx, addr + 1, val >> 8);
   1a968:	e2851001 	add	r1, r5, #1
	ctx->tstates += 3;
   1a96c:	e2833003 	add	r3, r3, #3
   1a970:	e5843040 	str	r3, [r4, #64]	; 0x40
	ctx->memWrite(ctx->memParam, addr, val);	
   1a974:	e6ff1071 	uxth	r1, r1
   1a978:	e5943028 	ldr	r3, [r4, #40]	; 0x28
   1a97c:	e1a02426 	lsr	r2, r6, #8
   1a980:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   1a984:	e12fff33 	blx	r3
	ctx->PC += 2;
   1a988:	e1d431bc 	ldrh	r3, [r4, #28]
   1a98c:	e2833002 	add	r3, r3, #2
   1a990:	e1c431bc 	strh	r3, [r4, #28]
}
   1a994:	e8bd8070 	pop	{r4, r5, r6, pc}

0001a998 <LD_off_nn_HL>:
	ctx->tstates += 3;
   1a998:	e5903040 	ldr	r3, [r0, #64]	; 0x40
{
   1a99c:	e92d4070 	push	{r4, r5, r6, lr}
   1a9a0:	e1a04000 	mov	r4, r0
	write16(ctx, read16(ctx, ctx->PC), WR.HL);
   1a9a4:	e1d061bc 	ldrh	r6, [r0, #28]
   1a9a8:	e2833003 	add	r3, r3, #3
   1a9ac:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   1a9b0:	e1a01006 	mov	r1, r6
   1a9b4:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   1a9b8:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   1a9bc:	e12fff33 	blx	r3
	ctx->tstates += 3;
   1a9c0:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	byte msb = read8(ctx, addr + 1);
   1a9c4:	e2861001 	add	r1, r6, #1
	ctx->tstates += 3;
   1a9c8:	e2833003 	add	r3, r3, #3
	return ctx->memRead(ctx->memParam, addr);	
   1a9cc:	e1a05000 	mov	r5, r0
   1a9d0:	e6ff1071 	uxth	r1, r1
	ctx->tstates += 3;
   1a9d4:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   1a9d8:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   1a9dc:	e5943024 	ldr	r3, [r4, #36]	; 0x24
   1a9e0:	e12fff33 	blx	r3
	ctx->tstates += 3;
   1a9e4:	e5943040 	ldr	r3, [r4, #64]	; 0x40
   1a9e8:	e1d460b6 	ldrh	r6, [r4, #6]
	return msb << 8 | lsb;
   1a9ec:	e1855400 	orr	r5, r5, r0, lsl #8
   1a9f0:	e6ff5075 	uxth	r5, r5
	ctx->tstates += 3;
   1a9f4:	e2833003 	add	r3, r3, #3
   1a9f8:	e5843040 	str	r3, [r4, #64]	; 0x40
	ctx->memWrite(ctx->memParam, addr, val);	
   1a9fc:	e1a01005 	mov	r1, r5
   1aa00:	e6ef2076 	uxtb	r2, r6
   1aa04:	e5943028 	ldr	r3, [r4, #40]	; 0x28
   1aa08:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   1aa0c:	e12fff33 	blx	r3
	ctx->tstates += 3;
   1aa10:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	write8(ctx, addr + 1, val >> 8);
   1aa14:	e2851001 	add	r1, r5, #1
	ctx->tstates += 3;
   1aa18:	e2833003 	add	r3, r3, #3
   1aa1c:	e5843040 	str	r3, [r4, #64]	; 0x40
	ctx->memWrite(ctx->memParam, addr, val);	
   1aa20:	e6ff1071 	uxth	r1, r1
   1aa24:	e5943028 	ldr	r3, [r4, #40]	; 0x28
   1aa28:	e1a02426 	lsr	r2, r6, #8
   1aa2c:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   1aa30:	e12fff33 	blx	r3
	ctx->PC += 2;
   1aa34:	e1d431bc 	ldrh	r3, [r4, #28]
   1aa38:	e2833002 	add	r3, r3, #2
   1aa3c:	e1c431bc 	strh	r3, [r4, #28]
}
   1aa40:	e8bd8070 	pop	{r4, r5, r6, pc}

0001aa44 <JP_C_off_nn>:
	ctx->tstates += 3;
   1aa44:	e5903040 	ldr	r3, [r0, #64]	; 0x40
{
   1aa48:	e92d4070 	push	{r4, r5, r6, lr}
   1aa4c:	e1a04000 	mov	r4, r0
	ushort addr = read16(ctx, ctx->PC);
   1aa50:	e1d051bc 	ldrh	r5, [r0, #28]
   1aa54:	e2833003 	add	r3, r3, #3
   1aa58:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   1aa5c:	e1a01005 	mov	r1, r5
   1aa60:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   1aa64:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   1aa68:	e12fff33 	blx	r3
	ctx->tstates += 3;
   1aa6c:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	byte msb = read8(ctx, addr + 1);
   1aa70:	e2851001 	add	r1, r5, #1
	ctx->tstates += 3;
   1aa74:	e2833003 	add	r3, r3, #3
	return ctx->memRead(ctx->memParam, addr);	
   1aa78:	e1a06000 	mov	r6, r0
	ctx->tstates += 3;
   1aa7c:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   1aa80:	e6ff1071 	uxth	r1, r1
   1aa84:	e5943024 	ldr	r3, [r4, #36]	; 0x24
   1aa88:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   1aa8c:	e12fff33 	blx	r3
	return (BR.F & flag) != 0;
   1aa90:	e5d42000 	ldrb	r2, [r4]
	ctx->PC += 2;
   1aa94:	e1d431bc 	ldrh	r3, [r4, #28]
	if (condition(ctx, C_C))
   1aa98:	e3120001 	tst	r2, #1
	ctx->PC += 2;
   1aa9c:	e2833002 	add	r3, r3, #2
	return msb << 8 | lsb;
   1aaa0:	11866400 	orrne	r6, r6, r0, lsl #8
   1aaa4:	e1c431bc 	strh	r3, [r4, #28]
		ctx->PC = addr;
   1aaa8:	11c461bc 	strhne	r6, [r4, #28]
}
   1aaac:	e8bd8070 	pop	{r4, r5, r6, pc}

0001aab0 <LD_BC_off_nn>:
	ctx->tstates += 3;
   1aab0:	e5903040 	ldr	r3, [r0, #64]	; 0x40
{
   1aab4:	e92d4070 	push	{r4, r5, r6, lr}
   1aab8:	e1a04000 	mov	r4, r0
	ushort addr = read16(ctx, ctx->PC);
   1aabc:	e1d061bc 	ldrh	r6, [r0, #28]
   1aac0:	e2833003 	add	r3, r3, #3
   1aac4:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   1aac8:	e1a01006 	mov	r1, r6
   1aacc:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   1aad0:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   1aad4:	e12fff33 	blx	r3
	ctx->tstates += 3;
   1aad8:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	byte msb = read8(ctx, addr + 1);
   1aadc:	e2861001 	add	r1, r6, #1
	ctx->tstates += 3;
   1aae0:	e2833003 	add	r3, r3, #3
	return ctx->memRead(ctx->memParam, addr);	
   1aae4:	e1a05000 	mov	r5, r0
   1aae8:	e6ff1071 	uxth	r1, r1
	ctx->tstates += 3;
   1aaec:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   1aaf0:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   1aaf4:	e5943024 	ldr	r3, [r4, #36]	; 0x24
   1aaf8:	e12fff33 	blx	r3
	ctx->PC += 2;
   1aafc:	e1d421bc 	ldrh	r2, [r4, #28]
	ctx->tstates += 3;
   1ab00:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	return msb << 8 | lsb;
   1ab04:	e1855400 	orr	r5, r5, r0, lsl #8
   1ab08:	e2822002 	add	r2, r2, #2
   1ab0c:	e6ff5075 	uxth	r5, r5
	ctx->tstates += 3;
   1ab10:	e2833003 	add	r3, r3, #3
   1ab14:	e1c421bc 	strh	r2, [r4, #28]
   1ab18:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   1ab1c:	e1a01005 	mov	r1, r5
   1ab20:	e5943024 	ldr	r3, [r4, #36]	; 0x24
   1ab24:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   1ab28:	e12fff33 	blx	r3
	ctx->tstates += 3;
   1ab2c:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	byte msb = read8(ctx, addr + 1);
   1ab30:	e2851001 	add	r1, r5, #1
	ctx->tstates += 3;
   1ab34:	e2833003 	add	r3, r3, #3
	return ctx->memRead(ctx->memParam, addr);	
   1ab38:	e1a06000 	mov	r6, r0
	ctx->tstates += 3;
   1ab3c:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   1ab40:	e6ff1071 	uxth	r1, r1
   1ab44:	e5943024 	ldr	r3, [r4, #36]	; 0x24
   1ab48:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   1ab4c:	e12fff33 	blx	r3
	return msb << 8 | lsb;
   1ab50:	e1860400 	orr	r0, r6, r0, lsl #8
	WR.BC = read16(ctx, addr);	
   1ab54:	e1c400b2 	strh	r0, [r4, #2]
}
   1ab58:	e8bd8070 	pop	{r4, r5, r6, pc}

0001ab5c <LD_DE_off_nn>:
	ctx->tstates += 3;
   1ab5c:	e5903040 	ldr	r3, [r0, #64]	; 0x40
{
   1ab60:	e92d4070 	push	{r4, r5, r6, lr}
   1ab64:	e1a04000 	mov	r4, r0
	ushort addr = read16(ctx, ctx->PC);
   1ab68:	e1d061bc 	ldrh	r6, [r0, #28]
   1ab6c:	e2833003 	add	r3, r3, #3
   1ab70:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   1ab74:	e1a01006 	mov	r1, r6
   1ab78:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   1ab7c:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   1ab80:	e12fff33 	blx	r3
	ctx->tstates += 3;
   1ab84:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	byte msb = read8(ctx, addr + 1);
   1ab88:	e2861001 	add	r1, r6, #1
	ctx->tstates += 3;
   1ab8c:	e2833003 	add	r3, r3, #3
	return ctx->memRead(ctx->memParam, addr);	
   1ab90:	e1a05000 	mov	r5, r0
   1ab94:	e6ff1071 	uxth	r1, r1
	ctx->tstates += 3;
   1ab98:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   1ab9c:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   1aba0:	e5943024 	ldr	r3, [r4, #36]	; 0x24
   1aba4:	e12fff33 	blx	r3
	ctx->PC += 2;
   1aba8:	e1d421bc 	ldrh	r2, [r4, #28]
	ctx->tstates += 3;
   1abac:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	return msb << 8 | lsb;
   1abb0:	e1855400 	orr	r5, r5, r0, lsl #8
   1abb4:	e2822002 	add	r2, r2, #2
   1abb8:	e6ff5075 	uxth	r5, r5
	ctx->tstates += 3;
   1abbc:	e2833003 	add	r3, r3, #3
   1abc0:	e1c421bc 	strh	r2, [r4, #28]
   1abc4:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   1abc8:	e1a01005 	mov	r1, r5
   1abcc:	e5943024 	ldr	r3, [r4, #36]	; 0x24
   1abd0:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   1abd4:	e12fff33 	blx	r3
	ctx->tstates += 3;
   1abd8:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	byte msb = read8(ctx, addr + 1);
   1abdc:	e2851001 	add	r1, r5, #1
	ctx->tstates += 3;
   1abe0:	e2833003 	add	r3, r3, #3
	return ctx->memRead(ctx->memParam, addr);	
   1abe4:	e1a06000 	mov	r6, r0
	ctx->tstates += 3;
   1abe8:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   1abec:	e6ff1071 	uxth	r1, r1
   1abf0:	e5943024 	ldr	r3, [r4, #36]	; 0x24
   1abf4:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   1abf8:	e12fff33 	blx	r3
	return msb << 8 | lsb;
   1abfc:	e1860400 	orr	r0, r6, r0, lsl #8
	WR.DE = read16(ctx, addr);	
   1ac00:	e1c400b4 	strh	r0, [r4, #4]
}
   1ac04:	e8bd8070 	pop	{r4, r5, r6, pc}

0001ac08 <LD_HL_off_nn>:
	ctx->tstates += 3;
   1ac08:	e5903040 	ldr	r3, [r0, #64]	; 0x40
{
   1ac0c:	e92d4070 	push	{r4, r5, r6, lr}
   1ac10:	e1a04000 	mov	r4, r0
	ushort addr = read16(ctx, ctx->PC);
   1ac14:	e1d061bc 	ldrh	r6, [r0, #28]
   1ac18:	e2833003 	add	r3, r3, #3
   1ac1c:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   1ac20:	e1a01006 	mov	r1, r6
   1ac24:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   1ac28:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   1ac2c:	e12fff33 	blx	r3
	ctx->tstates += 3;
   1ac30:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	byte msb = read8(ctx, addr + 1);
   1ac34:	e2861001 	add	r1, r6, #1
	ctx->tstates += 3;
   1ac38:	e2833003 	add	r3, r3, #3
	return ctx->memRead(ctx->memParam, addr);	
   1ac3c:	e1a05000 	mov	r5, r0
   1ac40:	e6ff1071 	uxth	r1, r1
	ctx->tstates += 3;
   1ac44:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   1ac48:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   1ac4c:	e5943024 	ldr	r3, [r4, #36]	; 0x24
   1ac50:	e12fff33 	blx	r3
	ctx->PC += 2;
   1ac54:	e1d421bc 	ldrh	r2, [r4, #28]
	ctx->tstates += 3;
   1ac58:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	return msb << 8 | lsb;
   1ac5c:	e1855400 	orr	r5, r5, r0, lsl #8
   1ac60:	e2822002 	add	r2, r2, #2
   1ac64:	e6ff5075 	uxth	r5, r5
	ctx->tstates += 3;
   1ac68:	e2833003 	add	r3, r3, #3
   1ac6c:	e1c421bc 	strh	r2, [r4, #28]
   1ac70:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   1ac74:	e1a01005 	mov	r1, r5
   1ac78:	e5943024 	ldr	r3, [r4, #36]	; 0x24
   1ac7c:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   1ac80:	e12fff33 	blx	r3
	ctx->tstates += 3;
   1ac84:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	byte msb = read8(ctx, addr + 1);
   1ac88:	e2851001 	add	r1, r5, #1
	ctx->tstates += 3;
   1ac8c:	e2833003 	add	r3, r3, #3
	return ctx->memRead(ctx->memParam, addr);	
   1ac90:	e1a06000 	mov	r6, r0
	ctx->tstates += 3;
   1ac94:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   1ac98:	e6ff1071 	uxth	r1, r1
   1ac9c:	e5943024 	ldr	r3, [r4, #36]	; 0x24
   1aca0:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   1aca4:	e12fff33 	blx	r3
	return msb << 8 | lsb;
   1aca8:	e1860400 	orr	r0, r6, r0, lsl #8
	WR.HL = read16(ctx, addr);	
   1acac:	e1c400b6 	strh	r0, [r4, #6]
}
   1acb0:	e8bd8070 	pop	{r4, r5, r6, pc}

0001acb4 <LD_SP_off_nn>:
	ctx->tstates += 3;
   1acb4:	e5903040 	ldr	r3, [r0, #64]	; 0x40
{
   1acb8:	e92d4070 	push	{r4, r5, r6, lr}
   1acbc:	e1a04000 	mov	r4, r0
	ushort addr = read16(ctx, ctx->PC);
   1acc0:	e1d061bc 	ldrh	r6, [r0, #28]
   1acc4:	e2833003 	add	r3, r3, #3
   1acc8:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   1accc:	e1a01006 	mov	r1, r6
   1acd0:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   1acd4:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   1acd8:	e12fff33 	blx	r3
	ctx->tstates += 3;
   1acdc:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	byte msb = read8(ctx, addr + 1);
   1ace0:	e2861001 	add	r1, r6, #1
	ctx->tstates += 3;
   1ace4:	e2833003 	add	r3, r3, #3
	return ctx->memRead(ctx->memParam, addr);	
   1ace8:	e1a05000 	mov	r5, r0
   1acec:	e6ff1071 	uxth	r1, r1
	ctx->tstates += 3;
   1acf0:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   1acf4:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   1acf8:	e5943024 	ldr	r3, [r4, #36]	; 0x24
   1acfc:	e12fff33 	blx	r3
	ctx->PC += 2;
   1ad00:	e1d421bc 	ldrh	r2, [r4, #28]
	ctx->tstates += 3;
   1ad04:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	return msb << 8 | lsb;
   1ad08:	e1855400 	orr	r5, r5, r0, lsl #8
   1ad0c:	e2822002 	add	r2, r2, #2
   1ad10:	e6ff5075 	uxth	r5, r5
	ctx->tstates += 3;
   1ad14:	e2833003 	add	r3, r3, #3
   1ad18:	e1c421bc 	strh	r2, [r4, #28]
   1ad1c:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   1ad20:	e1a01005 	mov	r1, r5
   1ad24:	e5943024 	ldr	r3, [r4, #36]	; 0x24
   1ad28:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   1ad2c:	e12fff33 	blx	r3
	ctx->tstates += 3;
   1ad30:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	byte msb = read8(ctx, addr + 1);
   1ad34:	e2851001 	add	r1, r5, #1
	ctx->tstates += 3;
   1ad38:	e2833003 	add	r3, r3, #3
	return ctx->memRead(ctx->memParam, addr);	
   1ad3c:	e1a06000 	mov	r6, r0
	ctx->tstates += 3;
   1ad40:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   1ad44:	e6ff1071 	uxth	r1, r1
   1ad48:	e5943024 	ldr	r3, [r4, #36]	; 0x24
   1ad4c:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   1ad50:	e12fff33 	blx	r3
	return msb << 8 | lsb;
   1ad54:	e1860400 	orr	r0, r6, r0, lsl #8
	WR.SP = read16(ctx, addr);	
   1ad58:	e1c400bc 	strh	r0, [r4, #12]
}
   1ad5c:	e8bd8070 	pop	{r4, r5, r6, pc}

0001ad60 <LD_IY_off_nn>:
	ctx->tstates += 3;
   1ad60:	e5903040 	ldr	r3, [r0, #64]	; 0x40
{
   1ad64:	e92d4070 	push	{r4, r5, r6, lr}
   1ad68:	e1a04000 	mov	r4, r0
	ushort addr = read16(ctx, ctx->PC);
   1ad6c:	e1d061bc 	ldrh	r6, [r0, #28]
   1ad70:	e2833003 	add	r3, r3, #3
   1ad74:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   1ad78:	e1a01006 	mov	r1, r6
   1ad7c:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   1ad80:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   1ad84:	e12fff33 	blx	r3
	ctx->tstates += 3;
   1ad88:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	byte msb = read8(ctx, addr + 1);
   1ad8c:	e2861001 	add	r1, r6, #1
	ctx->tstates += 3;
   1ad90:	e2833003 	add	r3, r3, #3
	return ctx->memRead(ctx->memParam, addr);	
   1ad94:	e1a05000 	mov	r5, r0
   1ad98:	e6ff1071 	uxth	r1, r1
	ctx->tstates += 3;
   1ad9c:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   1ada0:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   1ada4:	e5943024 	ldr	r3, [r4, #36]	; 0x24
   1ada8:	e12fff33 	blx	r3
	ctx->PC += 2;
   1adac:	e1d421bc 	ldrh	r2, [r4, #28]
	ctx->tstates += 3;
   1adb0:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	return msb << 8 | lsb;
   1adb4:	e1855400 	orr	r5, r5, r0, lsl #8
   1adb8:	e2822002 	add	r2, r2, #2
   1adbc:	e6ff5075 	uxth	r5, r5
	ctx->tstates += 3;
   1adc0:	e2833003 	add	r3, r3, #3
   1adc4:	e1c421bc 	strh	r2, [r4, #28]
   1adc8:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   1adcc:	e1a01005 	mov	r1, r5
   1add0:	e5943024 	ldr	r3, [r4, #36]	; 0x24
   1add4:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   1add8:	e12fff33 	blx	r3
	ctx->tstates += 3;
   1addc:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	byte msb = read8(ctx, addr + 1);
   1ade0:	e2851001 	add	r1, r5, #1
	ctx->tstates += 3;
   1ade4:	e2833003 	add	r3, r3, #3
	return ctx->memRead(ctx->memParam, addr);	
   1ade8:	e1a06000 	mov	r6, r0
	ctx->tstates += 3;
   1adec:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   1adf0:	e6ff1071 	uxth	r1, r1
   1adf4:	e5943024 	ldr	r3, [r4, #36]	; 0x24
   1adf8:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   1adfc:	e12fff33 	blx	r3
	return msb << 8 | lsb;
   1ae00:	e1860400 	orr	r0, r6, r0, lsl #8
	WR.IY = read16(ctx, addr);	
   1ae04:	e1c400ba 	strh	r0, [r4, #10]
}
   1ae08:	e8bd8070 	pop	{r4, r5, r6, pc}

0001ae0c <LD_off_nn_IY>:
	ctx->tstates += 3;
   1ae0c:	e5903040 	ldr	r3, [r0, #64]	; 0x40
{
   1ae10:	e92d4070 	push	{r4, r5, r6, lr}
   1ae14:	e1a04000 	mov	r4, r0
	write16(ctx, read16(ctx, ctx->PC), WR.IY);
   1ae18:	e1d061bc 	ldrh	r6, [r0, #28]
   1ae1c:	e2833003 	add	r3, r3, #3
   1ae20:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   1ae24:	e1a01006 	mov	r1, r6
   1ae28:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   1ae2c:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   1ae30:	e12fff33 	blx	r3
	ctx->tstates += 3;
   1ae34:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	byte msb = read8(ctx, addr + 1);
   1ae38:	e2861001 	add	r1, r6, #1
	ctx->tstates += 3;
   1ae3c:	e2833003 	add	r3, r3, #3
	return ctx->memRead(ctx->memParam, addr);	
   1ae40:	e1a05000 	mov	r5, r0
   1ae44:	e6ff1071 	uxth	r1, r1
	ctx->tstates += 3;
   1ae48:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   1ae4c:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   1ae50:	e5943024 	ldr	r3, [r4, #36]	; 0x24
   1ae54:	e12fff33 	blx	r3
	ctx->tstates += 3;
   1ae58:	e5943040 	ldr	r3, [r4, #64]	; 0x40
   1ae5c:	e1d460ba 	ldrh	r6, [r4, #10]
	return msb << 8 | lsb;
   1ae60:	e1855400 	orr	r5, r5, r0, lsl #8
   1ae64:	e6ff5075 	uxth	r5, r5
	ctx->tstates += 3;
   1ae68:	e2833003 	add	r3, r3, #3
   1ae6c:	e5843040 	str	r3, [r4, #64]	; 0x40
	ctx->memWrite(ctx->memParam, addr, val);	
   1ae70:	e1a01005 	mov	r1, r5
   1ae74:	e6ef2076 	uxtb	r2, r6
   1ae78:	e5943028 	ldr	r3, [r4, #40]	; 0x28
   1ae7c:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   1ae80:	e12fff33 	blx	r3
	ctx->tstates += 3;
   1ae84:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	write8(ctx, addr + 1, val >> 8);
   1ae88:	e2851001 	add	r1, r5, #1
	ctx->tstates += 3;
   1ae8c:	e2833003 	add	r3, r3, #3
   1ae90:	e5843040 	str	r3, [r4, #64]	; 0x40
	ctx->memWrite(ctx->memParam, addr, val);	
   1ae94:	e6ff1071 	uxth	r1, r1
   1ae98:	e5943028 	ldr	r3, [r4, #40]	; 0x28
   1ae9c:	e1a02426 	lsr	r2, r6, #8
   1aea0:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   1aea4:	e12fff33 	blx	r3
	ctx->PC += 2;
   1aea8:	e1d431bc 	ldrh	r3, [r4, #28]
   1aeac:	e2833002 	add	r3, r3, #2
   1aeb0:	e1c431bc 	strh	r3, [r4, #28]
}
   1aeb4:	e8bd8070 	pop	{r4, r5, r6, pc}

0001aeb8 <LD_off_nn_SP>:
	ctx->tstates += 3;
   1aeb8:	e5903040 	ldr	r3, [r0, #64]	; 0x40
{
   1aebc:	e92d4070 	push	{r4, r5, r6, lr}
   1aec0:	e1a04000 	mov	r4, r0
	write16(ctx, read16(ctx, ctx->PC), WR.SP);
   1aec4:	e1d061bc 	ldrh	r6, [r0, #28]
   1aec8:	e2833003 	add	r3, r3, #3
   1aecc:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   1aed0:	e1a01006 	mov	r1, r6
   1aed4:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   1aed8:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   1aedc:	e12fff33 	blx	r3
	ctx->tstates += 3;
   1aee0:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	byte msb = read8(ctx, addr + 1);
   1aee4:	e2861001 	add	r1, r6, #1
	ctx->tstates += 3;
   1aee8:	e2833003 	add	r3, r3, #3
	return ctx->memRead(ctx->memParam, addr);	
   1aeec:	e1a05000 	mov	r5, r0
   1aef0:	e6ff1071 	uxth	r1, r1
	ctx->tstates += 3;
   1aef4:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   1aef8:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   1aefc:	e5943024 	ldr	r3, [r4, #36]	; 0x24
   1af00:	e12fff33 	blx	r3
	ctx->tstates += 3;
   1af04:	e5943040 	ldr	r3, [r4, #64]	; 0x40
   1af08:	e1d460bc 	ldrh	r6, [r4, #12]
	return msb << 8 | lsb;
   1af0c:	e1855400 	orr	r5, r5, r0, lsl #8
   1af10:	e6ff5075 	uxth	r5, r5
	ctx->tstates += 3;
   1af14:	e2833003 	add	r3, r3, #3
   1af18:	e5843040 	str	r3, [r4, #64]	; 0x40
	ctx->memWrite(ctx->memParam, addr, val);	
   1af1c:	e1a01005 	mov	r1, r5
   1af20:	e6ef2076 	uxtb	r2, r6
   1af24:	e5943028 	ldr	r3, [r4, #40]	; 0x28
   1af28:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   1af2c:	e12fff33 	blx	r3
	ctx->tstates += 3;
   1af30:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	write8(ctx, addr + 1, val >> 8);
   1af34:	e2851001 	add	r1, r5, #1
	ctx->tstates += 3;
   1af38:	e2833003 	add	r3, r3, #3
   1af3c:	e5843040 	str	r3, [r4, #64]	; 0x40
	ctx->memWrite(ctx->memParam, addr, val);	
   1af40:	e6ff1071 	uxth	r1, r1
   1af44:	e5943028 	ldr	r3, [r4, #40]	; 0x28
   1af48:	e1a02426 	lsr	r2, r6, #8
   1af4c:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   1af50:	e12fff33 	blx	r3
	ctx->PC += 2;
   1af54:	e1d431bc 	ldrh	r3, [r4, #28]
   1af58:	e2833002 	add	r3, r3, #2
   1af5c:	e1c431bc 	strh	r3, [r4, #28]
}
   1af60:	e8bd8070 	pop	{r4, r5, r6, pc}

0001af64 <LD_off_nn_BC>:
	ctx->tstates += 3;
   1af64:	e5903040 	ldr	r3, [r0, #64]	; 0x40
{
   1af68:	e92d4070 	push	{r4, r5, r6, lr}
   1af6c:	e1a04000 	mov	r4, r0
	write16(ctx, read16(ctx, ctx->PC), WR.BC);
   1af70:	e1d061bc 	ldrh	r6, [r0, #28]
   1af74:	e2833003 	add	r3, r3, #3
   1af78:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   1af7c:	e1a01006 	mov	r1, r6
   1af80:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   1af84:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   1af88:	e12fff33 	blx	r3
	ctx->tstates += 3;
   1af8c:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	byte msb = read8(ctx, addr + 1);
   1af90:	e2861001 	add	r1, r6, #1
	ctx->tstates += 3;
   1af94:	e2833003 	add	r3, r3, #3
	return ctx->memRead(ctx->memParam, addr);	
   1af98:	e1a05000 	mov	r5, r0
   1af9c:	e6ff1071 	uxth	r1, r1
	ctx->tstates += 3;
   1afa0:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   1afa4:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   1afa8:	e5943024 	ldr	r3, [r4, #36]	; 0x24
   1afac:	e12fff33 	blx	r3
	ctx->tstates += 3;
   1afb0:	e5943040 	ldr	r3, [r4, #64]	; 0x40
   1afb4:	e1d460b2 	ldrh	r6, [r4, #2]
	return msb << 8 | lsb;
   1afb8:	e1855400 	orr	r5, r5, r0, lsl #8
   1afbc:	e6ff5075 	uxth	r5, r5
	ctx->tstates += 3;
   1afc0:	e2833003 	add	r3, r3, #3
   1afc4:	e5843040 	str	r3, [r4, #64]	; 0x40
	ctx->memWrite(ctx->memParam, addr, val);	
   1afc8:	e1a01005 	mov	r1, r5
   1afcc:	e6ef2076 	uxtb	r2, r6
   1afd0:	e5943028 	ldr	r3, [r4, #40]	; 0x28
   1afd4:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   1afd8:	e12fff33 	blx	r3
	ctx->tstates += 3;
   1afdc:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	write8(ctx, addr + 1, val >> 8);
   1afe0:	e2851001 	add	r1, r5, #1
	ctx->tstates += 3;
   1afe4:	e2833003 	add	r3, r3, #3
   1afe8:	e5843040 	str	r3, [r4, #64]	; 0x40
	ctx->memWrite(ctx->memParam, addr, val);	
   1afec:	e6ff1071 	uxth	r1, r1
   1aff0:	e5943028 	ldr	r3, [r4, #40]	; 0x28
   1aff4:	e1a02426 	lsr	r2, r6, #8
   1aff8:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   1affc:	e12fff33 	blx	r3
	ctx->PC += 2;
   1b000:	e1d431bc 	ldrh	r3, [r4, #28]
   1b004:	e2833002 	add	r3, r3, #2
   1b008:	e1c431bc 	strh	r3, [r4, #28]
}
   1b00c:	e8bd8070 	pop	{r4, r5, r6, pc}

0001b010 <LD_off_nn_IX>:
	ctx->tstates += 3;
   1b010:	e5903040 	ldr	r3, [r0, #64]	; 0x40
{
   1b014:	e92d4070 	push	{r4, r5, r6, lr}
   1b018:	e1a04000 	mov	r4, r0
	write16(ctx, read16(ctx, ctx->PC), WR.IX);
   1b01c:	e1d061bc 	ldrh	r6, [r0, #28]
   1b020:	e2833003 	add	r3, r3, #3
   1b024:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   1b028:	e1a01006 	mov	r1, r6
   1b02c:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   1b030:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   1b034:	e12fff33 	blx	r3
	ctx->tstates += 3;
   1b038:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	byte msb = read8(ctx, addr + 1);
   1b03c:	e2861001 	add	r1, r6, #1
	ctx->tstates += 3;
   1b040:	e2833003 	add	r3, r3, #3
	return ctx->memRead(ctx->memParam, addr);	
   1b044:	e1a05000 	mov	r5, r0
   1b048:	e6ff1071 	uxth	r1, r1
	ctx->tstates += 3;
   1b04c:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   1b050:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   1b054:	e5943024 	ldr	r3, [r4, #36]	; 0x24
   1b058:	e12fff33 	blx	r3
	ctx->tstates += 3;
   1b05c:	e5943040 	ldr	r3, [r4, #64]	; 0x40
   1b060:	e1d460b8 	ldrh	r6, [r4, #8]
	return msb << 8 | lsb;
   1b064:	e1855400 	orr	r5, r5, r0, lsl #8
   1b068:	e6ff5075 	uxth	r5, r5
	ctx->tstates += 3;
   1b06c:	e2833003 	add	r3, r3, #3
   1b070:	e5843040 	str	r3, [r4, #64]	; 0x40
	ctx->memWrite(ctx->memParam, addr, val);	
   1b074:	e1a01005 	mov	r1, r5
   1b078:	e6ef2076 	uxtb	r2, r6
   1b07c:	e5943028 	ldr	r3, [r4, #40]	; 0x28
   1b080:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   1b084:	e12fff33 	blx	r3
	ctx->tstates += 3;
   1b088:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	write8(ctx, addr + 1, val >> 8);
   1b08c:	e2851001 	add	r1, r5, #1
	ctx->tstates += 3;
   1b090:	e2833003 	add	r3, r3, #3
   1b094:	e5843040 	str	r3, [r4, #64]	; 0x40
	ctx->memWrite(ctx->memParam, addr, val);	
   1b098:	e6ff1071 	uxth	r1, r1
   1b09c:	e5943028 	ldr	r3, [r4, #40]	; 0x28
   1b0a0:	e1a02426 	lsr	r2, r6, #8
   1b0a4:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   1b0a8:	e12fff33 	blx	r3
	ctx->PC += 2;
   1b0ac:	e1d431bc 	ldrh	r3, [r4, #28]
   1b0b0:	e2833002 	add	r3, r3, #2
   1b0b4:	e1c431bc 	strh	r3, [r4, #28]
}
   1b0b8:	e8bd8070 	pop	{r4, r5, r6, pc}

0001b0bc <LD_IX_off_nn>:
	ctx->tstates += 3;
   1b0bc:	e5903040 	ldr	r3, [r0, #64]	; 0x40
{
   1b0c0:	e92d4070 	push	{r4, r5, r6, lr}
   1b0c4:	e1a04000 	mov	r4, r0
	ushort addr = read16(ctx, ctx->PC);
   1b0c8:	e1d061bc 	ldrh	r6, [r0, #28]
   1b0cc:	e2833003 	add	r3, r3, #3
   1b0d0:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   1b0d4:	e1a01006 	mov	r1, r6
   1b0d8:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   1b0dc:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   1b0e0:	e12fff33 	blx	r3
	ctx->tstates += 3;
   1b0e4:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	byte msb = read8(ctx, addr + 1);
   1b0e8:	e2861001 	add	r1, r6, #1
	ctx->tstates += 3;
   1b0ec:	e2833003 	add	r3, r3, #3
	return ctx->memRead(ctx->memParam, addr);	
   1b0f0:	e1a05000 	mov	r5, r0
   1b0f4:	e6ff1071 	uxth	r1, r1
	ctx->tstates += 3;
   1b0f8:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   1b0fc:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   1b100:	e5943024 	ldr	r3, [r4, #36]	; 0x24
   1b104:	e12fff33 	blx	r3
	ctx->PC += 2;
   1b108:	e1d421bc 	ldrh	r2, [r4, #28]
	ctx->tstates += 3;
   1b10c:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	return msb << 8 | lsb;
   1b110:	e1855400 	orr	r5, r5, r0, lsl #8
   1b114:	e2822002 	add	r2, r2, #2
   1b118:	e6ff5075 	uxth	r5, r5
	ctx->tstates += 3;
   1b11c:	e2833003 	add	r3, r3, #3
   1b120:	e1c421bc 	strh	r2, [r4, #28]
   1b124:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   1b128:	e1a01005 	mov	r1, r5
   1b12c:	e5943024 	ldr	r3, [r4, #36]	; 0x24
   1b130:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   1b134:	e12fff33 	blx	r3
	ctx->tstates += 3;
   1b138:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	byte msb = read8(ctx, addr + 1);
   1b13c:	e2851001 	add	r1, r5, #1
	ctx->tstates += 3;
   1b140:	e2833003 	add	r3, r3, #3
	return ctx->memRead(ctx->memParam, addr);	
   1b144:	e1a06000 	mov	r6, r0
	ctx->tstates += 3;
   1b148:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   1b14c:	e6ff1071 	uxth	r1, r1
   1b150:	e5943024 	ldr	r3, [r4, #36]	; 0x24
   1b154:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   1b158:	e12fff33 	blx	r3
	return msb << 8 | lsb;
   1b15c:	e1860400 	orr	r0, r6, r0, lsl #8
	WR.IX = read16(ctx, addr);	
   1b160:	e1c400b8 	strh	r0, [r4, #8]
}
   1b164:	e8bd8070 	pop	{r4, r5, r6, pc}

0001b168 <JP_Z_off_nn>:
	ctx->tstates += 3;
   1b168:	e5903040 	ldr	r3, [r0, #64]	; 0x40
{
   1b16c:	e92d4070 	push	{r4, r5, r6, lr}
   1b170:	e1a04000 	mov	r4, r0
	ushort addr = read16(ctx, ctx->PC);
   1b174:	e1d051bc 	ldrh	r5, [r0, #28]
   1b178:	e2833003 	add	r3, r3, #3
   1b17c:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   1b180:	e1a01005 	mov	r1, r5
   1b184:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   1b188:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   1b18c:	e12fff33 	blx	r3
	ctx->tstates += 3;
   1b190:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	byte msb = read8(ctx, addr + 1);
   1b194:	e2851001 	add	r1, r5, #1
	ctx->tstates += 3;
   1b198:	e2833003 	add	r3, r3, #3
	return ctx->memRead(ctx->memParam, addr);	
   1b19c:	e1a06000 	mov	r6, r0
	ctx->tstates += 3;
   1b1a0:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   1b1a4:	e6ff1071 	uxth	r1, r1
   1b1a8:	e5943024 	ldr	r3, [r4, #36]	; 0x24
   1b1ac:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   1b1b0:	e12fff33 	blx	r3
	return (BR.F & flag) != 0;
   1b1b4:	e5d42000 	ldrb	r2, [r4]
	ctx->PC += 2;
   1b1b8:	e1d431bc 	ldrh	r3, [r4, #28]
	if (condition(ctx, C_Z))
   1b1bc:	e3120040 	tst	r2, #64	; 0x40
	ctx->PC += 2;
   1b1c0:	e2833002 	add	r3, r3, #2
	return msb << 8 | lsb;
   1b1c4:	11866400 	orrne	r6, r6, r0, lsl #8
   1b1c8:	e1c431bc 	strh	r3, [r4, #28]
		ctx->PC = addr;
   1b1cc:	11c461bc 	strhne	r6, [r4, #28]
}
   1b1d0:	e8bd8070 	pop	{r4, r5, r6, pc}

0001b1d4 <PUSH_BC>:
{
   1b1d4:	e92d4070 	push	{r4, r5, r6, lr}
   1b1d8:	e1a04000 	mov	r4, r0
	WR.SP--;
   1b1dc:	e1d010bc 	ldrh	r1, [r0, #12]
	ctx->tstates += 1;
   1b1e0:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	doPush(ctx, WR.BC);
   1b1e4:	e1d050b2 	ldrh	r5, [r0, #2]
   1b1e8:	e2411001 	sub	r1, r1, #1
   1b1ec:	e6ff1071 	uxth	r1, r1
	ctx->tstates += 3;
   1b1f0:	e2833004 	add	r3, r3, #4
   1b1f4:	e5803040 	str	r3, [r0, #64]	; 0x40
	WR.SP--;
   1b1f8:	e1c010bc 	strh	r1, [r0, #12]
	ctx->memWrite(ctx->memParam, addr, val);	
   1b1fc:	e1a02425 	lsr	r2, r5, #8
   1b200:	e5903028 	ldr	r3, [r0, #40]	; 0x28
   1b204:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   1b208:	e12fff33 	blx	r3
	WR.SP--;
   1b20c:	e1d410bc 	ldrh	r1, [r4, #12]
	ctx->tstates += 3;
   1b210:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	WR.SP--;
   1b214:	e2411001 	sub	r1, r1, #1
	ctx->tstates += 3;
   1b218:	e2833003 	add	r3, r3, #3
	WR.SP--;
   1b21c:	e6ff1071 	uxth	r1, r1
	ctx->tstates += 3;
   1b220:	e5843040 	str	r3, [r4, #64]	; 0x40
	ctx->memWrite(ctx->memParam, addr, val);	
   1b224:	e6ef2075 	uxtb	r2, r5
	WR.SP--;
   1b228:	e1c410bc 	strh	r1, [r4, #12]
	ctx->memWrite(ctx->memParam, addr, val);	
   1b22c:	e5943028 	ldr	r3, [r4, #40]	; 0x28
   1b230:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
}
   1b234:	e8bd4070 	pop	{r4, r5, r6, lr}
   1b238:	e12fff13 	bx	r3

0001b23c <PUSH_DE>:
{
   1b23c:	e92d4070 	push	{r4, r5, r6, lr}
   1b240:	e1a04000 	mov	r4, r0
	WR.SP--;
   1b244:	e1d010bc 	ldrh	r1, [r0, #12]
	ctx->tstates += 1;
   1b248:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	doPush(ctx, WR.DE);
   1b24c:	e1d050b4 	ldrh	r5, [r0, #4]
   1b250:	e2411001 	sub	r1, r1, #1
   1b254:	e6ff1071 	uxth	r1, r1
	ctx->tstates += 3;
   1b258:	e2833004 	add	r3, r3, #4
   1b25c:	e5803040 	str	r3, [r0, #64]	; 0x40
	WR.SP--;
   1b260:	e1c010bc 	strh	r1, [r0, #12]
	ctx->memWrite(ctx->memParam, addr, val);	
   1b264:	e1a02425 	lsr	r2, r5, #8
   1b268:	e5903028 	ldr	r3, [r0, #40]	; 0x28
   1b26c:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   1b270:	e12fff33 	blx	r3
	WR.SP--;
   1b274:	e1d410bc 	ldrh	r1, [r4, #12]
	ctx->tstates += 3;
   1b278:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	WR.SP--;
   1b27c:	e2411001 	sub	r1, r1, #1
	ctx->tstates += 3;
   1b280:	e2833003 	add	r3, r3, #3
	WR.SP--;
   1b284:	e6ff1071 	uxth	r1, r1
	ctx->tstates += 3;
   1b288:	e5843040 	str	r3, [r4, #64]	; 0x40
	ctx->memWrite(ctx->memParam, addr, val);	
   1b28c:	e6ef2075 	uxtb	r2, r5
	WR.SP--;
   1b290:	e1c410bc 	strh	r1, [r4, #12]
	ctx->memWrite(ctx->memParam, addr, val);	
   1b294:	e5943028 	ldr	r3, [r4, #40]	; 0x28
   1b298:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
}
   1b29c:	e8bd4070 	pop	{r4, r5, r6, lr}
   1b2a0:	e12fff13 	bx	r3

0001b2a4 <PUSH_HL>:
{
   1b2a4:	e92d4070 	push	{r4, r5, r6, lr}
   1b2a8:	e1a04000 	mov	r4, r0
	WR.SP--;
   1b2ac:	e1d010bc 	ldrh	r1, [r0, #12]
	ctx->tstates += 1;
   1b2b0:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	doPush(ctx, WR.HL);
   1b2b4:	e1d050b6 	ldrh	r5, [r0, #6]
   1b2b8:	e2411001 	sub	r1, r1, #1
   1b2bc:	e6ff1071 	uxth	r1, r1
	ctx->tstates += 3;
   1b2c0:	e2833004 	add	r3, r3, #4
   1b2c4:	e5803040 	str	r3, [r0, #64]	; 0x40
	WR.SP--;
   1b2c8:	e1c010bc 	strh	r1, [r0, #12]
	ctx->memWrite(ctx->memParam, addr, val);	
   1b2cc:	e1a02425 	lsr	r2, r5, #8
   1b2d0:	e5903028 	ldr	r3, [r0, #40]	; 0x28
   1b2d4:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   1b2d8:	e12fff33 	blx	r3
	WR.SP--;
   1b2dc:	e1d410bc 	ldrh	r1, [r4, #12]
	ctx->tstates += 3;
   1b2e0:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	WR.SP--;
   1b2e4:	e2411001 	sub	r1, r1, #1
	ctx->tstates += 3;
   1b2e8:	e2833003 	add	r3, r3, #3
	WR.SP--;
   1b2ec:	e6ff1071 	uxth	r1, r1
	ctx->tstates += 3;
   1b2f0:	e5843040 	str	r3, [r4, #64]	; 0x40
	ctx->memWrite(ctx->memParam, addr, val);	
   1b2f4:	e6ef2075 	uxtb	r2, r5
	WR.SP--;
   1b2f8:	e1c410bc 	strh	r1, [r4, #12]
	ctx->memWrite(ctx->memParam, addr, val);	
   1b2fc:	e5943028 	ldr	r3, [r4, #40]	; 0x28
   1b300:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
}
   1b304:	e8bd4070 	pop	{r4, r5, r6, lr}
   1b308:	e12fff13 	bx	r3

0001b30c <PUSH_IX>:
{
   1b30c:	e92d4070 	push	{r4, r5, r6, lr}
   1b310:	e1a04000 	mov	r4, r0
	WR.SP--;
   1b314:	e1d010bc 	ldrh	r1, [r0, #12]
	ctx->tstates += 1;
   1b318:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	doPush(ctx, WR.IX);
   1b31c:	e1d050b8 	ldrh	r5, [r0, #8]
   1b320:	e2411001 	sub	r1, r1, #1
   1b324:	e6ff1071 	uxth	r1, r1
	ctx->tstates += 3;
   1b328:	e2833004 	add	r3, r3, #4
   1b32c:	e5803040 	str	r3, [r0, #64]	; 0x40
	WR.SP--;
   1b330:	e1c010bc 	strh	r1, [r0, #12]
	ctx->memWrite(ctx->memParam, addr, val);	
   1b334:	e1a02425 	lsr	r2, r5, #8
   1b338:	e5903028 	ldr	r3, [r0, #40]	; 0x28
   1b33c:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   1b340:	e12fff33 	blx	r3
	WR.SP--;
   1b344:	e1d410bc 	ldrh	r1, [r4, #12]
	ctx->tstates += 3;
   1b348:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	WR.SP--;
   1b34c:	e2411001 	sub	r1, r1, #1
	ctx->tstates += 3;
   1b350:	e2833003 	add	r3, r3, #3
	WR.SP--;
   1b354:	e6ff1071 	uxth	r1, r1
	ctx->tstates += 3;
   1b358:	e5843040 	str	r3, [r4, #64]	; 0x40
	ctx->memWrite(ctx->memParam, addr, val);	
   1b35c:	e6ef2075 	uxtb	r2, r5
	WR.SP--;
   1b360:	e1c410bc 	strh	r1, [r4, #12]
	ctx->memWrite(ctx->memParam, addr, val);	
   1b364:	e5943028 	ldr	r3, [r4, #40]	; 0x28
   1b368:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
}
   1b36c:	e8bd4070 	pop	{r4, r5, r6, lr}
   1b370:	e12fff13 	bx	r3

0001b374 <PUSH_IY>:
{
   1b374:	e92d4070 	push	{r4, r5, r6, lr}
   1b378:	e1a04000 	mov	r4, r0
	WR.SP--;
   1b37c:	e1d010bc 	ldrh	r1, [r0, #12]
	ctx->tstates += 1;
   1b380:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	doPush(ctx, WR.IY);
   1b384:	e1d050ba 	ldrh	r5, [r0, #10]
   1b388:	e2411001 	sub	r1, r1, #1
   1b38c:	e6ff1071 	uxth	r1, r1
	ctx->tstates += 3;
   1b390:	e2833004 	add	r3, r3, #4
   1b394:	e5803040 	str	r3, [r0, #64]	; 0x40
	WR.SP--;
   1b398:	e1c010bc 	strh	r1, [r0, #12]
	ctx->memWrite(ctx->memParam, addr, val);	
   1b39c:	e1a02425 	lsr	r2, r5, #8
   1b3a0:	e5903028 	ldr	r3, [r0, #40]	; 0x28
   1b3a4:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   1b3a8:	e12fff33 	blx	r3
	WR.SP--;
   1b3ac:	e1d410bc 	ldrh	r1, [r4, #12]
	ctx->tstates += 3;
   1b3b0:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	WR.SP--;
   1b3b4:	e2411001 	sub	r1, r1, #1
	ctx->tstates += 3;
   1b3b8:	e2833003 	add	r3, r3, #3
	WR.SP--;
   1b3bc:	e6ff1071 	uxth	r1, r1
	ctx->tstates += 3;
   1b3c0:	e5843040 	str	r3, [r4, #64]	; 0x40
	ctx->memWrite(ctx->memParam, addr, val);	
   1b3c4:	e6ef2075 	uxtb	r2, r5
	WR.SP--;
   1b3c8:	e1c410bc 	strh	r1, [r4, #12]
	ctx->memWrite(ctx->memParam, addr, val);	
   1b3cc:	e5943028 	ldr	r3, [r4, #40]	; 0x28
   1b3d0:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
}
   1b3d4:	e8bd4070 	pop	{r4, r5, r6, lr}
   1b3d8:	e12fff13 	bx	r3

0001b3dc <PUSH_AF>:
{
   1b3dc:	e92d4070 	push	{r4, r5, r6, lr}
   1b3e0:	e1a04000 	mov	r4, r0
	WR.SP--;
   1b3e4:	e1d010bc 	ldrh	r1, [r0, #12]
	ctx->tstates += 1;
   1b3e8:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	doPush(ctx, WR.AF);
   1b3ec:	e1d050b0 	ldrh	r5, [r0]
   1b3f0:	e2411001 	sub	r1, r1, #1
   1b3f4:	e6ff1071 	uxth	r1, r1
	ctx->tstates += 3;
   1b3f8:	e2833004 	add	r3, r3, #4
   1b3fc:	e5803040 	str	r3, [r0, #64]	; 0x40
	WR.SP--;
   1b400:	e1c010bc 	strh	r1, [r0, #12]
	ctx->memWrite(ctx->memParam, addr, val);	
   1b404:	e1a02425 	lsr	r2, r5, #8
   1b408:	e5903028 	ldr	r3, [r0, #40]	; 0x28
   1b40c:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   1b410:	e12fff33 	blx	r3
	WR.SP--;
   1b414:	e1d410bc 	ldrh	r1, [r4, #12]
	ctx->tstates += 3;
   1b418:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	WR.SP--;
   1b41c:	e2411001 	sub	r1, r1, #1
	ctx->tstates += 3;
   1b420:	e2833003 	add	r3, r3, #3
	WR.SP--;
   1b424:	e6ff1071 	uxth	r1, r1
	ctx->tstates += 3;
   1b428:	e5843040 	str	r3, [r4, #64]	; 0x40
	ctx->memWrite(ctx->memParam, addr, val);	
   1b42c:	e6ef2075 	uxtb	r2, r5
	WR.SP--;
   1b430:	e1c410bc 	strh	r1, [r4, #12]
	ctx->memWrite(ctx->memParam, addr, val);	
   1b434:	e5943028 	ldr	r3, [r4, #40]	; 0x28
   1b438:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
}
   1b43c:	e8bd4070 	pop	{r4, r5, r6, lr}
   1b440:	e12fff13 	bx	r3

0001b444 <RST_0H>:
{
   1b444:	e92d4070 	push	{r4, r5, r6, lr}
   1b448:	e1a04000 	mov	r4, r0
	WR.SP--;
   1b44c:	e1d010bc 	ldrh	r1, [r0, #12]
	ctx->tstates += 1;
   1b450:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	doPush(ctx, ctx->PC);
   1b454:	e1d051bc 	ldrh	r5, [r0, #28]
   1b458:	e2411001 	sub	r1, r1, #1
   1b45c:	e6ff1071 	uxth	r1, r1
	ctx->tstates += 3;
   1b460:	e2833004 	add	r3, r3, #4
   1b464:	e5803040 	str	r3, [r0, #64]	; 0x40
	WR.SP--;
   1b468:	e1c010bc 	strh	r1, [r0, #12]
	ctx->memWrite(ctx->memParam, addr, val);	
   1b46c:	e5903028 	ldr	r3, [r0, #40]	; 0x28
   1b470:	e1a02425 	lsr	r2, r5, #8
   1b474:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   1b478:	e12fff33 	blx	r3
	WR.SP--;
   1b47c:	e1d410bc 	ldrh	r1, [r4, #12]
	ctx->tstates += 3;
   1b480:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	WR.SP--;
   1b484:	e2411001 	sub	r1, r1, #1
	ctx->tstates += 3;
   1b488:	e2833003 	add	r3, r3, #3
	WR.SP--;
   1b48c:	e6ff1071 	uxth	r1, r1
	ctx->tstates += 3;
   1b490:	e5843040 	str	r3, [r4, #64]	; 0x40
	ctx->memWrite(ctx->memParam, addr, val);	
   1b494:	e6ef2075 	uxtb	r2, r5
   1b498:	e5943028 	ldr	r3, [r4, #40]	; 0x28
	WR.SP--;
   1b49c:	e1c410bc 	strh	r1, [r4, #12]
	ctx->memWrite(ctx->memParam, addr, val);	
   1b4a0:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   1b4a4:	e12fff33 	blx	r3
	ctx->PC = 0x00;
   1b4a8:	e3a03000 	mov	r3, #0
   1b4ac:	e1c431bc 	strh	r3, [r4, #28]
}
   1b4b0:	e8bd8070 	pop	{r4, r5, r6, pc}

0001b4b4 <RST_10H>:
{
   1b4b4:	e92d4070 	push	{r4, r5, r6, lr}
   1b4b8:	e1a04000 	mov	r4, r0
	WR.SP--;
   1b4bc:	e1d010bc 	ldrh	r1, [r0, #12]
	ctx->tstates += 1;
   1b4c0:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	doPush(ctx, ctx->PC);
   1b4c4:	e1d051bc 	ldrh	r5, [r0, #28]
   1b4c8:	e2411001 	sub	r1, r1, #1
   1b4cc:	e6ff1071 	uxth	r1, r1
	ctx->tstates += 3;
   1b4d0:	e2833004 	add	r3, r3, #4
   1b4d4:	e5803040 	str	r3, [r0, #64]	; 0x40
	WR.SP--;
   1b4d8:	e1c010bc 	strh	r1, [r0, #12]
	ctx->memWrite(ctx->memParam, addr, val);	
   1b4dc:	e5903028 	ldr	r3, [r0, #40]	; 0x28
   1b4e0:	e1a02425 	lsr	r2, r5, #8
   1b4e4:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   1b4e8:	e12fff33 	blx	r3
	WR.SP--;
   1b4ec:	e1d410bc 	ldrh	r1, [r4, #12]
	ctx->tstates += 3;
   1b4f0:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	WR.SP--;
   1b4f4:	e2411001 	sub	r1, r1, #1
	ctx->tstates += 3;
   1b4f8:	e2833003 	add	r3, r3, #3
	WR.SP--;
   1b4fc:	e6ff1071 	uxth	r1, r1
	ctx->tstates += 3;
   1b500:	e5843040 	str	r3, [r4, #64]	; 0x40
	ctx->memWrite(ctx->memParam, addr, val);	
   1b504:	e6ef2075 	uxtb	r2, r5
   1b508:	e5943028 	ldr	r3, [r4, #40]	; 0x28
	WR.SP--;
   1b50c:	e1c410bc 	strh	r1, [r4, #12]
	ctx->memWrite(ctx->memParam, addr, val);	
   1b510:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   1b514:	e12fff33 	blx	r3
	ctx->PC = 0x010;
   1b518:	e3a03010 	mov	r3, #16
   1b51c:	e1c431bc 	strh	r3, [r4, #28]
}
   1b520:	e8bd8070 	pop	{r4, r5, r6, pc}

0001b524 <RST_18H>:
{
   1b524:	e92d4070 	push	{r4, r5, r6, lr}
   1b528:	e1a04000 	mov	r4, r0
	WR.SP--;
   1b52c:	e1d010bc 	ldrh	r1, [r0, #12]
	ctx->tstates += 1;
   1b530:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	doPush(ctx, ctx->PC);
   1b534:	e1d051bc 	ldrh	r5, [r0, #28]
   1b538:	e2411001 	sub	r1, r1, #1
   1b53c:	e6ff1071 	uxth	r1, r1
	ctx->tstates += 3;
   1b540:	e2833004 	add	r3, r3, #4
   1b544:	e5803040 	str	r3, [r0, #64]	; 0x40
	WR.SP--;
   1b548:	e1c010bc 	strh	r1, [r0, #12]
	ctx->memWrite(ctx->memParam, addr, val);	
   1b54c:	e5903028 	ldr	r3, [r0, #40]	; 0x28
   1b550:	e1a02425 	lsr	r2, r5, #8
   1b554:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   1b558:	e12fff33 	blx	r3
	WR.SP--;
   1b55c:	e1d410bc 	ldrh	r1, [r4, #12]
	ctx->tstates += 3;
   1b560:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	WR.SP--;
   1b564:	e2411001 	sub	r1, r1, #1
	ctx->tstates += 3;
   1b568:	e2833003 	add	r3, r3, #3
	WR.SP--;
   1b56c:	e6ff1071 	uxth	r1, r1
	ctx->tstates += 3;
   1b570:	e5843040 	str	r3, [r4, #64]	; 0x40
	ctx->memWrite(ctx->memParam, addr, val);	
   1b574:	e6ef2075 	uxtb	r2, r5
   1b578:	e5943028 	ldr	r3, [r4, #40]	; 0x28
	WR.SP--;
   1b57c:	e1c410bc 	strh	r1, [r4, #12]
	ctx->memWrite(ctx->memParam, addr, val);	
   1b580:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   1b584:	e12fff33 	blx	r3
	ctx->PC = 0x018;
   1b588:	e3a03018 	mov	r3, #24
   1b58c:	e1c431bc 	strh	r3, [r4, #28]
}
   1b590:	e8bd8070 	pop	{r4, r5, r6, pc}

0001b594 <RST_20H>:
{
   1b594:	e92d4070 	push	{r4, r5, r6, lr}
   1b598:	e1a04000 	mov	r4, r0
	WR.SP--;
   1b59c:	e1d010bc 	ldrh	r1, [r0, #12]
	ctx->tstates += 1;
   1b5a0:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	doPush(ctx, ctx->PC);
   1b5a4:	e1d051bc 	ldrh	r5, [r0, #28]
   1b5a8:	e2411001 	sub	r1, r1, #1
   1b5ac:	e6ff1071 	uxth	r1, r1
	ctx->tstates += 3;
   1b5b0:	e2833004 	add	r3, r3, #4
   1b5b4:	e5803040 	str	r3, [r0, #64]	; 0x40
	WR.SP--;
   1b5b8:	e1c010bc 	strh	r1, [r0, #12]
	ctx->memWrite(ctx->memParam, addr, val);	
   1b5bc:	e5903028 	ldr	r3, [r0, #40]	; 0x28
   1b5c0:	e1a02425 	lsr	r2, r5, #8
   1b5c4:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   1b5c8:	e12fff33 	blx	r3
	WR.SP--;
   1b5cc:	e1d410bc 	ldrh	r1, [r4, #12]
	ctx->tstates += 3;
   1b5d0:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	WR.SP--;
   1b5d4:	e2411001 	sub	r1, r1, #1
	ctx->tstates += 3;
   1b5d8:	e2833003 	add	r3, r3, #3
	WR.SP--;
   1b5dc:	e6ff1071 	uxth	r1, r1
	ctx->tstates += 3;
   1b5e0:	e5843040 	str	r3, [r4, #64]	; 0x40
	ctx->memWrite(ctx->memParam, addr, val);	
   1b5e4:	e6ef2075 	uxtb	r2, r5
   1b5e8:	e5943028 	ldr	r3, [r4, #40]	; 0x28
	WR.SP--;
   1b5ec:	e1c410bc 	strh	r1, [r4, #12]
	ctx->memWrite(ctx->memParam, addr, val);	
   1b5f0:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   1b5f4:	e12fff33 	blx	r3
	ctx->PC = 0x020;
   1b5f8:	e3a03020 	mov	r3, #32
   1b5fc:	e1c431bc 	strh	r3, [r4, #28]
}
   1b600:	e8bd8070 	pop	{r4, r5, r6, pc}

0001b604 <RST_28H>:
{
   1b604:	e92d4070 	push	{r4, r5, r6, lr}
   1b608:	e1a04000 	mov	r4, r0
	WR.SP--;
   1b60c:	e1d010bc 	ldrh	r1, [r0, #12]
	ctx->tstates += 1;
   1b610:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	doPush(ctx, ctx->PC);
   1b614:	e1d051bc 	ldrh	r5, [r0, #28]
   1b618:	e2411001 	sub	r1, r1, #1
   1b61c:	e6ff1071 	uxth	r1, r1
	ctx->tstates += 3;
   1b620:	e2833004 	add	r3, r3, #4
   1b624:	e5803040 	str	r3, [r0, #64]	; 0x40
	WR.SP--;
   1b628:	e1c010bc 	strh	r1, [r0, #12]
	ctx->memWrite(ctx->memParam, addr, val);	
   1b62c:	e5903028 	ldr	r3, [r0, #40]	; 0x28
   1b630:	e1a02425 	lsr	r2, r5, #8
   1b634:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   1b638:	e12fff33 	blx	r3
	WR.SP--;
   1b63c:	e1d410bc 	ldrh	r1, [r4, #12]
	ctx->tstates += 3;
   1b640:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	WR.SP--;
   1b644:	e2411001 	sub	r1, r1, #1
	ctx->tstates += 3;
   1b648:	e2833003 	add	r3, r3, #3
	WR.SP--;
   1b64c:	e6ff1071 	uxth	r1, r1
	ctx->tstates += 3;
   1b650:	e5843040 	str	r3, [r4, #64]	; 0x40
	ctx->memWrite(ctx->memParam, addr, val);	
   1b654:	e6ef2075 	uxtb	r2, r5
   1b658:	e5943028 	ldr	r3, [r4, #40]	; 0x28
	WR.SP--;
   1b65c:	e1c410bc 	strh	r1, [r4, #12]
	ctx->memWrite(ctx->memParam, addr, val);	
   1b660:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   1b664:	e12fff33 	blx	r3
	ctx->PC = 0x028;
   1b668:	e3a03028 	mov	r3, #40	; 0x28
   1b66c:	e1c431bc 	strh	r3, [r4, #28]
}
   1b670:	e8bd8070 	pop	{r4, r5, r6, pc}

0001b674 <RST_30H>:
{
   1b674:	e92d4070 	push	{r4, r5, r6, lr}
   1b678:	e1a04000 	mov	r4, r0
	WR.SP--;
   1b67c:	e1d010bc 	ldrh	r1, [r0, #12]
	ctx->tstates += 1;
   1b680:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	doPush(ctx, ctx->PC);
   1b684:	e1d051bc 	ldrh	r5, [r0, #28]
   1b688:	e2411001 	sub	r1, r1, #1
   1b68c:	e6ff1071 	uxth	r1, r1
	ctx->tstates += 3;
   1b690:	e2833004 	add	r3, r3, #4
   1b694:	e5803040 	str	r3, [r0, #64]	; 0x40
	WR.SP--;
   1b698:	e1c010bc 	strh	r1, [r0, #12]
	ctx->memWrite(ctx->memParam, addr, val);	
   1b69c:	e5903028 	ldr	r3, [r0, #40]	; 0x28
   1b6a0:	e1a02425 	lsr	r2, r5, #8
   1b6a4:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   1b6a8:	e12fff33 	blx	r3
	WR.SP--;
   1b6ac:	e1d410bc 	ldrh	r1, [r4, #12]
	ctx->tstates += 3;
   1b6b0:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	WR.SP--;
   1b6b4:	e2411001 	sub	r1, r1, #1
	ctx->tstates += 3;
   1b6b8:	e2833003 	add	r3, r3, #3
	WR.SP--;
   1b6bc:	e6ff1071 	uxth	r1, r1
	ctx->tstates += 3;
   1b6c0:	e5843040 	str	r3, [r4, #64]	; 0x40
	ctx->memWrite(ctx->memParam, addr, val);	
   1b6c4:	e6ef2075 	uxtb	r2, r5
   1b6c8:	e5943028 	ldr	r3, [r4, #40]	; 0x28
	WR.SP--;
   1b6cc:	e1c410bc 	strh	r1, [r4, #12]
	ctx->memWrite(ctx->memParam, addr, val);	
   1b6d0:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   1b6d4:	e12fff33 	blx	r3
	ctx->PC = 0x030;
   1b6d8:	e3a03030 	mov	r3, #48	; 0x30
   1b6dc:	e1c431bc 	strh	r3, [r4, #28]
}
   1b6e0:	e8bd8070 	pop	{r4, r5, r6, pc}

0001b6e4 <RST_38H>:
{
   1b6e4:	e92d4070 	push	{r4, r5, r6, lr}
   1b6e8:	e1a04000 	mov	r4, r0
	WR.SP--;
   1b6ec:	e1d010bc 	ldrh	r1, [r0, #12]
	ctx->tstates += 1;
   1b6f0:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	doPush(ctx, ctx->PC);
   1b6f4:	e1d051bc 	ldrh	r5, [r0, #28]
   1b6f8:	e2411001 	sub	r1, r1, #1
   1b6fc:	e6ff1071 	uxth	r1, r1
	ctx->tstates += 3;
   1b700:	e2833004 	add	r3, r3, #4
   1b704:	e5803040 	str	r3, [r0, #64]	; 0x40
	WR.SP--;
   1b708:	e1c010bc 	strh	r1, [r0, #12]
	ctx->memWrite(ctx->memParam, addr, val);	
   1b70c:	e5903028 	ldr	r3, [r0, #40]	; 0x28
   1b710:	e1a02425 	lsr	r2, r5, #8
   1b714:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   1b718:	e12fff33 	blx	r3
	WR.SP--;
   1b71c:	e1d410bc 	ldrh	r1, [r4, #12]
	ctx->tstates += 3;
   1b720:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	WR.SP--;
   1b724:	e2411001 	sub	r1, r1, #1
	ctx->tstates += 3;
   1b728:	e2833003 	add	r3, r3, #3
	WR.SP--;
   1b72c:	e6ff1071 	uxth	r1, r1
	ctx->tstates += 3;
   1b730:	e5843040 	str	r3, [r4, #64]	; 0x40
	ctx->memWrite(ctx->memParam, addr, val);	
   1b734:	e6ef2075 	uxtb	r2, r5
   1b738:	e5943028 	ldr	r3, [r4, #40]	; 0x28
	WR.SP--;
   1b73c:	e1c410bc 	strh	r1, [r4, #12]
	ctx->memWrite(ctx->memParam, addr, val);	
   1b740:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   1b744:	e12fff33 	blx	r3
	ctx->PC = 0x038;
   1b748:	e3a03038 	mov	r3, #56	; 0x38
   1b74c:	e1c431bc 	strh	r3, [r4, #28]
}
   1b750:	e8bd8070 	pop	{r4, r5, r6, pc}

0001b754 <RST_8H>:
{
   1b754:	e92d4070 	push	{r4, r5, r6, lr}
   1b758:	e1a04000 	mov	r4, r0
	WR.SP--;
   1b75c:	e1d010bc 	ldrh	r1, [r0, #12]
	ctx->tstates += 1;
   1b760:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	doPush(ctx, ctx->PC);
   1b764:	e1d051bc 	ldrh	r5, [r0, #28]
   1b768:	e2411001 	sub	r1, r1, #1
   1b76c:	e6ff1071 	uxth	r1, r1
	ctx->tstates += 3;
   1b770:	e2833004 	add	r3, r3, #4
   1b774:	e5803040 	str	r3, [r0, #64]	; 0x40
	WR.SP--;
   1b778:	e1c010bc 	strh	r1, [r0, #12]
	ctx->memWrite(ctx->memParam, addr, val);	
   1b77c:	e5903028 	ldr	r3, [r0, #40]	; 0x28
   1b780:	e1a02425 	lsr	r2, r5, #8
   1b784:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   1b788:	e12fff33 	blx	r3
	WR.SP--;
   1b78c:	e1d410bc 	ldrh	r1, [r4, #12]
	ctx->tstates += 3;
   1b790:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	WR.SP--;
   1b794:	e2411001 	sub	r1, r1, #1
	ctx->tstates += 3;
   1b798:	e2833003 	add	r3, r3, #3
	WR.SP--;
   1b79c:	e6ff1071 	uxth	r1, r1
	ctx->tstates += 3;
   1b7a0:	e5843040 	str	r3, [r4, #64]	; 0x40
	ctx->memWrite(ctx->memParam, addr, val);	
   1b7a4:	e6ef2075 	uxtb	r2, r5
   1b7a8:	e5943028 	ldr	r3, [r4, #40]	; 0x28
	WR.SP--;
   1b7ac:	e1c410bc 	strh	r1, [r4, #12]
	ctx->memWrite(ctx->memParam, addr, val);	
   1b7b0:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   1b7b4:	e12fff33 	blx	r3
	ctx->PC = 0x08;
   1b7b8:	e3a03008 	mov	r3, #8
   1b7bc:	e1c431bc 	strh	r3, [r4, #28]
}
   1b7c0:	e8bd8070 	pop	{r4, r5, r6, pc}

0001b7c4 <JP_PE_off_nn>:
	ctx->tstates += 3;
   1b7c4:	e5903040 	ldr	r3, [r0, #64]	; 0x40
{
   1b7c8:	e92d4070 	push	{r4, r5, r6, lr}
   1b7cc:	e1a04000 	mov	r4, r0
	ushort addr = read16(ctx, ctx->PC);
   1b7d0:	e1d051bc 	ldrh	r5, [r0, #28]
   1b7d4:	e2833003 	add	r3, r3, #3
   1b7d8:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   1b7dc:	e1a01005 	mov	r1, r5
   1b7e0:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   1b7e4:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   1b7e8:	e12fff33 	blx	r3
	ctx->tstates += 3;
   1b7ec:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	byte msb = read8(ctx, addr + 1);
   1b7f0:	e2851001 	add	r1, r5, #1
	ctx->tstates += 3;
   1b7f4:	e2833003 	add	r3, r3, #3
	return ctx->memRead(ctx->memParam, addr);	
   1b7f8:	e1a06000 	mov	r6, r0
	ctx->tstates += 3;
   1b7fc:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   1b800:	e6ff1071 	uxth	r1, r1
   1b804:	e5943024 	ldr	r3, [r4, #36]	; 0x24
   1b808:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   1b80c:	e12fff33 	blx	r3
	return (BR.F & flag) != 0;
   1b810:	e5d42000 	ldrb	r2, [r4]
	ctx->PC += 2;
   1b814:	e1d431bc 	ldrh	r3, [r4, #28]
	if (condition(ctx, C_PE))
   1b818:	e3120004 	tst	r2, #4
	ctx->PC += 2;
   1b81c:	e2833002 	add	r3, r3, #2
	return msb << 8 | lsb;
   1b820:	11866400 	orrne	r6, r6, r0, lsl #8
   1b824:	e1c431bc 	strh	r3, [r4, #28]
		ctx->PC = addr;
   1b828:	11c461bc 	strhne	r6, [r4, #28]
}
   1b82c:	e8bd8070 	pop	{r4, r5, r6, pc}

0001b830 <JP_PO_off_nn>:
	ctx->tstates += 3;
   1b830:	e5903040 	ldr	r3, [r0, #64]	; 0x40
{
   1b834:	e92d4070 	push	{r4, r5, r6, lr}
   1b838:	e1a04000 	mov	r4, r0
	ushort addr = read16(ctx, ctx->PC);
   1b83c:	e1d051bc 	ldrh	r5, [r0, #28]
   1b840:	e2833003 	add	r3, r3, #3
   1b844:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   1b848:	e1a01005 	mov	r1, r5
   1b84c:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   1b850:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   1b854:	e12fff33 	blx	r3
	ctx->tstates += 3;
   1b858:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	byte msb = read8(ctx, addr + 1);
   1b85c:	e2851001 	add	r1, r5, #1
	ctx->tstates += 3;
   1b860:	e2833003 	add	r3, r3, #3
	return ctx->memRead(ctx->memParam, addr);	
   1b864:	e1a06000 	mov	r6, r0
	ctx->tstates += 3;
   1b868:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   1b86c:	e6ff1071 	uxth	r1, r1
   1b870:	e5943024 	ldr	r3, [r4, #36]	; 0x24
   1b874:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   1b878:	e12fff33 	blx	r3
	return (BR.F & flag) != 0;
   1b87c:	e5d42000 	ldrb	r2, [r4]
	ctx->PC += 2;
   1b880:	e1d431bc 	ldrh	r3, [r4, #28]
	if (condition(ctx, C_PO))
   1b884:	e3120004 	tst	r2, #4
	ctx->PC += 2;
   1b888:	e2833002 	add	r3, r3, #2
	return msb << 8 | lsb;
   1b88c:	01866400 	orreq	r6, r6, r0, lsl #8
   1b890:	e1c431bc 	strh	r3, [r4, #28]
		ctx->PC = addr;
   1b894:	01c461bc 	strheq	r6, [r4, #28]
}
   1b898:	e8bd8070 	pop	{r4, r5, r6, pc}

0001b89c <EX_off_SP_IX>:
	ctx->tstates += 3;
   1b89c:	e5903040 	ldr	r3, [r0, #64]	; 0x40
{
   1b8a0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   1b8a4:	e1a04000 	mov	r4, r0
	ushort tmp = read16(ctx, WR.SP);
   1b8a8:	e1d050bc 	ldrh	r5, [r0, #12]
   1b8ac:	e2833006 	add	r3, r3, #6
   1b8b0:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   1b8b4:	e1a01005 	mov	r1, r5
   1b8b8:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   1b8bc:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   1b8c0:	e12fff33 	blx	r3
	ctx->tstates += 3;
   1b8c4:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	byte msb = read8(ctx, addr + 1);
   1b8c8:	e2851001 	add	r1, r5, #1
	ctx->tstates += 3;
   1b8cc:	e2833003 	add	r3, r3, #3
	return ctx->memRead(ctx->memParam, addr);	
   1b8d0:	e1a06000 	mov	r6, r0
   1b8d4:	e6ff1071 	uxth	r1, r1
	ctx->tstates += 3;
   1b8d8:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   1b8dc:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   1b8e0:	e5943024 	ldr	r3, [r4, #36]	; 0x24
   1b8e4:	e12fff33 	blx	r3
   1b8e8:	e1a08000 	mov	r8, r0
	ctx->tstates += 3;
   1b8ec:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	write16(ctx, WR.SP, WR.IX);
   1b8f0:	e1d450bc 	ldrh	r5, [r4, #12]
   1b8f4:	e1d470b8 	ldrh	r7, [r4, #8]
   1b8f8:	e2833003 	add	r3, r3, #3
   1b8fc:	e5843040 	str	r3, [r4, #64]	; 0x40
	ctx->memWrite(ctx->memParam, addr, val);	
   1b900:	e1a01005 	mov	r1, r5
   1b904:	e6ef2077 	uxtb	r2, r7
   1b908:	e5943028 	ldr	r3, [r4, #40]	; 0x28
   1b90c:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   1b910:	e12fff33 	blx	r3
	ctx->tstates += 3;
   1b914:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	write8(ctx, addr + 1, val >> 8);
   1b918:	e2851001 	add	r1, r5, #1
	ctx->tstates += 3;
   1b91c:	e2833003 	add	r3, r3, #3
   1b920:	e5843040 	str	r3, [r4, #64]	; 0x40
	ctx->memWrite(ctx->memParam, addr, val);	
   1b924:	e6ff1071 	uxth	r1, r1
   1b928:	e1a02427 	lsr	r2, r7, #8
   1b92c:	e5943028 	ldr	r3, [r4, #40]	; 0x28
   1b930:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
	return msb << 8 | lsb;
   1b934:	e1866408 	orr	r6, r6, r8, lsl #8
	ctx->memWrite(ctx->memParam, addr, val);	
   1b938:	e12fff33 	blx	r3
	WR.IX = tmp;
   1b93c:	e1c460b8 	strh	r6, [r4, #8]
}
   1b940:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

0001b944 <EX_off_SP_IY>:
	ctx->tstates += 3;
   1b944:	e5903040 	ldr	r3, [r0, #64]	; 0x40
{
   1b948:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   1b94c:	e1a04000 	mov	r4, r0
	ushort tmp = read16(ctx, WR.SP);
   1b950:	e1d050bc 	ldrh	r5, [r0, #12]
   1b954:	e2833006 	add	r3, r3, #6
   1b958:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   1b95c:	e1a01005 	mov	r1, r5
   1b960:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   1b964:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   1b968:	e12fff33 	blx	r3
	ctx->tstates += 3;
   1b96c:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	byte msb = read8(ctx, addr + 1);
   1b970:	e2851001 	add	r1, r5, #1
	ctx->tstates += 3;
   1b974:	e2833003 	add	r3, r3, #3
	return ctx->memRead(ctx->memParam, addr);	
   1b978:	e1a06000 	mov	r6, r0
   1b97c:	e6ff1071 	uxth	r1, r1
	ctx->tstates += 3;
   1b980:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   1b984:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   1b988:	e5943024 	ldr	r3, [r4, #36]	; 0x24
   1b98c:	e12fff33 	blx	r3
   1b990:	e1a08000 	mov	r8, r0
	ctx->tstates += 3;
   1b994:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	write16(ctx, WR.SP, WR.IY);
   1b998:	e1d450bc 	ldrh	r5, [r4, #12]
   1b99c:	e1d470ba 	ldrh	r7, [r4, #10]
   1b9a0:	e2833003 	add	r3, r3, #3
   1b9a4:	e5843040 	str	r3, [r4, #64]	; 0x40
	ctx->memWrite(ctx->memParam, addr, val);	
   1b9a8:	e1a01005 	mov	r1, r5
   1b9ac:	e6ef2077 	uxtb	r2, r7
   1b9b0:	e5943028 	ldr	r3, [r4, #40]	; 0x28
   1b9b4:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   1b9b8:	e12fff33 	blx	r3
	ctx->tstates += 3;
   1b9bc:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	write8(ctx, addr + 1, val >> 8);
   1b9c0:	e2851001 	add	r1, r5, #1
	ctx->tstates += 3;
   1b9c4:	e2833003 	add	r3, r3, #3
   1b9c8:	e5843040 	str	r3, [r4, #64]	; 0x40
	ctx->memWrite(ctx->memParam, addr, val);	
   1b9cc:	e6ff1071 	uxth	r1, r1
   1b9d0:	e1a02427 	lsr	r2, r7, #8
   1b9d4:	e5943028 	ldr	r3, [r4, #40]	; 0x28
   1b9d8:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
	return msb << 8 | lsb;
   1b9dc:	e1866408 	orr	r6, r6, r8, lsl #8
	ctx->memWrite(ctx->memParam, addr, val);	
   1b9e0:	e12fff33 	blx	r3
	WR.IY = tmp;
   1b9e4:	e1c460ba 	strh	r6, [r4, #10]
}
   1b9e8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

0001b9ec <EX_off_SP_HL>:
	ctx->tstates += 3;
   1b9ec:	e5903040 	ldr	r3, [r0, #64]	; 0x40
{
   1b9f0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   1b9f4:	e1a04000 	mov	r4, r0
	ushort tmp = read16(ctx, WR.SP);
   1b9f8:	e1d050bc 	ldrh	r5, [r0, #12]
   1b9fc:	e2833006 	add	r3, r3, #6
   1ba00:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   1ba04:	e1a01005 	mov	r1, r5
   1ba08:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   1ba0c:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   1ba10:	e12fff33 	blx	r3
	ctx->tstates += 3;
   1ba14:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	byte msb = read8(ctx, addr + 1);
   1ba18:	e2851001 	add	r1, r5, #1
	ctx->tstates += 3;
   1ba1c:	e2833003 	add	r3, r3, #3
	return ctx->memRead(ctx->memParam, addr);	
   1ba20:	e1a06000 	mov	r6, r0
   1ba24:	e6ff1071 	uxth	r1, r1
	ctx->tstates += 3;
   1ba28:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   1ba2c:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   1ba30:	e5943024 	ldr	r3, [r4, #36]	; 0x24
   1ba34:	e12fff33 	blx	r3
   1ba38:	e1a08000 	mov	r8, r0
	ctx->tstates += 3;
   1ba3c:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	write16(ctx, WR.SP, WR.HL);
   1ba40:	e1d450bc 	ldrh	r5, [r4, #12]
   1ba44:	e1d470b6 	ldrh	r7, [r4, #6]
   1ba48:	e2833003 	add	r3, r3, #3
   1ba4c:	e5843040 	str	r3, [r4, #64]	; 0x40
	ctx->memWrite(ctx->memParam, addr, val);	
   1ba50:	e1a01005 	mov	r1, r5
   1ba54:	e6ef2077 	uxtb	r2, r7
   1ba58:	e5943028 	ldr	r3, [r4, #40]	; 0x28
   1ba5c:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   1ba60:	e12fff33 	blx	r3
	ctx->tstates += 3;
   1ba64:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	write8(ctx, addr + 1, val >> 8);
   1ba68:	e2851001 	add	r1, r5, #1
	ctx->tstates += 3;
   1ba6c:	e2833003 	add	r3, r3, #3
   1ba70:	e5843040 	str	r3, [r4, #64]	; 0x40
	ctx->memWrite(ctx->memParam, addr, val);	
   1ba74:	e6ff1071 	uxth	r1, r1
   1ba78:	e1a02427 	lsr	r2, r7, #8
   1ba7c:	e5943028 	ldr	r3, [r4, #40]	; 0x28
   1ba80:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
	return msb << 8 | lsb;
   1ba84:	e1866408 	orr	r6, r6, r8, lsl #8
	ctx->memWrite(ctx->memParam, addr, val);	
   1ba88:	e12fff33 	blx	r3
	WR.HL = tmp;
   1ba8c:	e1c460b6 	strh	r6, [r4, #6]
}
   1ba90:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

0001ba94 <SLA_A>:
	BR.A = doSL(ctx, BR.A, IA_A);
   1ba94:	e5d02001 	ldrb	r2, [r0, #1]
   1ba98:	e5d03000 	ldrb	r3, [r0]
	if (val)
   1ba9c:	e3120080 	tst	r2, #128	; 0x80
    val <<= 1;
   1baa0:	e1a02082 	lsl	r2, r2, #1
   1baa4:	e6ef2072 	uxtb	r2, r2
	BR.F |= flag;
   1baa8:	13833001 	orrne	r3, r3, #1
	BR.F &= ~flag;
   1baac:	020330fe 	andeq	r3, r3, #254	; 0xfe
	if (val)
   1bab0:	e3120020 	tst	r2, #32
	BR.F |= flag;
   1bab4:	13833020 	orrne	r3, r3, #32
	BR.F &= ~flag;
   1bab8:	020330df 	andeq	r3, r3, #223	; 0xdf
	if (val)
   1babc:	e3120008 	tst	r2, #8
	BR.F |= flag;
   1bac0:	13833008 	orrne	r3, r3, #8
	BR.F &= ~flag;
   1bac4:	020330f7 	andeq	r3, r3, #247	; 0xf7
   1bac8:	e6af3073 	sxtb	r3, r3
   1bacc:	e20310ed 	and	r1, r3, #237	; 0xed
	if (val)
   1bad0:	e3120080 	tst	r2, #128	; 0x80
	BR.F &= ~flag;
   1bad4:	e5c01000 	strb	r1, [r0]
	BR.F |= flag;
   1bad8:	13813080 	orrne	r3, r1, #128	; 0x80
	if (val)
   1badc:	1a000008 	bne	1bb04 <SLA_A+0x70>
	BR.F &= ~flag;
   1bae0:	e203306d 	and	r3, r3, #109	; 0x6d
	if (val)
   1bae4:	e3520000 	cmp	r2, #0
	BR.F &= ~flag;
   1bae8:	e5c03000 	strb	r3, [r0]
	BR.F |= flag;
   1baec:	03831040 	orreq	r1, r3, #64	; 0x40
	if (val)
   1baf0:	1a000003 	bne	1bb04 <SLA_A+0x70>
	BR.F |= flag;
   1baf4:	e3813004 	orr	r3, r1, #4
   1baf8:	e5c03000 	strb	r3, [r0]
   1bafc:	e5c02001 	strb	r2, [r0, #1]
}
   1bb00:	e12fff1e 	bx	lr
	VALFLAG(F_PV, parityBit[val]);
   1bb04:	e59f101c 	ldr	r1, [pc, #28]	; 1bb28 <SLA_A+0x94>
	BR.F &= ~flag;
   1bb08:	e6af3073 	sxtb	r3, r3
	if (val)
   1bb0c:	e791c102 	ldr	ip, [r1, r2, lsl #2]
	BR.F &= ~flag;
   1bb10:	e20310ad 	and	r1, r3, #173	; 0xad
	if (val)
   1bb14:	e35c0000 	cmp	ip, #0
   1bb18:	e5c01000 	strb	r1, [r0]
	BR.F &= ~flag;
   1bb1c:	020330a9 	andeq	r3, r3, #169	; 0xa9
	if (val)
   1bb20:	0afffff4 	beq	1baf8 <SLA_A+0x64>
   1bb24:	eafffff2 	b	1baf4 <SLA_A+0x60>
   1bb28:	0004f000 	.word	0x0004f000

0001bb2c <SLA_B>:
	BR.B = doSL(ctx, BR.B, IA_A);
   1bb2c:	e5d02003 	ldrb	r2, [r0, #3]
   1bb30:	e5d03000 	ldrb	r3, [r0]
   1bb34:	e3120080 	tst	r2, #128	; 0x80
    val <<= 1;
   1bb38:	e1a02082 	lsl	r2, r2, #1
   1bb3c:	e6ef2072 	uxtb	r2, r2
	BR.F |= flag;
   1bb40:	13833001 	orrne	r3, r3, #1
	BR.F &= ~flag;
   1bb44:	020330fe 	andeq	r3, r3, #254	; 0xfe
	if (val)
   1bb48:	e3120020 	tst	r2, #32
	BR.F |= flag;
   1bb4c:	13833020 	orrne	r3, r3, #32
	BR.F &= ~flag;
   1bb50:	020330df 	andeq	r3, r3, #223	; 0xdf
	if (val)
   1bb54:	e3120008 	tst	r2, #8
	BR.F |= flag;
   1bb58:	13833008 	orrne	r3, r3, #8
	BR.F &= ~flag;
   1bb5c:	020330f7 	andeq	r3, r3, #247	; 0xf7
   1bb60:	e6af3073 	sxtb	r3, r3
   1bb64:	e20310ed 	and	r1, r3, #237	; 0xed
	if (val)
   1bb68:	e3120080 	tst	r2, #128	; 0x80
	BR.F &= ~flag;
   1bb6c:	e5c01000 	strb	r1, [r0]
	BR.F |= flag;
   1bb70:	13813080 	orrne	r3, r1, #128	; 0x80
	if (val)
   1bb74:	1a000008 	bne	1bb9c <SLA_B+0x70>
	BR.F &= ~flag;
   1bb78:	e203306d 	and	r3, r3, #109	; 0x6d
	if (val)
   1bb7c:	e3520000 	cmp	r2, #0
	BR.F &= ~flag;
   1bb80:	e5c03000 	strb	r3, [r0]
	BR.F |= flag;
   1bb84:	03831040 	orreq	r1, r3, #64	; 0x40
	if (val)
   1bb88:	1a000003 	bne	1bb9c <SLA_B+0x70>
	BR.F |= flag;
   1bb8c:	e3813004 	orr	r3, r1, #4
   1bb90:	e5c03000 	strb	r3, [r0]
   1bb94:	e5c02003 	strb	r2, [r0, #3]
}
   1bb98:	e12fff1e 	bx	lr
	VALFLAG(F_PV, parityBit[val]);
   1bb9c:	e59f101c 	ldr	r1, [pc, #28]	; 1bbc0 <SLA_B+0x94>
	BR.F &= ~flag;
   1bba0:	e6af3073 	sxtb	r3, r3
	if (val)
   1bba4:	e791c102 	ldr	ip, [r1, r2, lsl #2]
	BR.F &= ~flag;
   1bba8:	e20310ad 	and	r1, r3, #173	; 0xad
	if (val)
   1bbac:	e35c0000 	cmp	ip, #0
   1bbb0:	e5c01000 	strb	r1, [r0]
	BR.F &= ~flag;
   1bbb4:	020330a9 	andeq	r3, r3, #169	; 0xa9
	if (val)
   1bbb8:	0afffff4 	beq	1bb90 <SLA_B+0x64>
   1bbbc:	eafffff2 	b	1bb8c <SLA_B+0x60>
   1bbc0:	0004f000 	.word	0x0004f000

0001bbc4 <SLA_C>:
	BR.C = doSL(ctx, BR.C, IA_A);
   1bbc4:	e5d02002 	ldrb	r2, [r0, #2]
   1bbc8:	e5d03000 	ldrb	r3, [r0]
   1bbcc:	e3120080 	tst	r2, #128	; 0x80
    val <<= 1;
   1bbd0:	e1a02082 	lsl	r2, r2, #1
   1bbd4:	e6ef2072 	uxtb	r2, r2
	BR.F |= flag;
   1bbd8:	13833001 	orrne	r3, r3, #1
	BR.F &= ~flag;
   1bbdc:	020330fe 	andeq	r3, r3, #254	; 0xfe
	if (val)
   1bbe0:	e3120020 	tst	r2, #32
	BR.F |= flag;
   1bbe4:	13833020 	orrne	r3, r3, #32
	BR.F &= ~flag;
   1bbe8:	020330df 	andeq	r3, r3, #223	; 0xdf
	if (val)
   1bbec:	e3120008 	tst	r2, #8
	BR.F |= flag;
   1bbf0:	13833008 	orrne	r3, r3, #8
	BR.F &= ~flag;
   1bbf4:	020330f7 	andeq	r3, r3, #247	; 0xf7
   1bbf8:	e6af3073 	sxtb	r3, r3
   1bbfc:	e20310ed 	and	r1, r3, #237	; 0xed
	if (val)
   1bc00:	e3120080 	tst	r2, #128	; 0x80
	BR.F &= ~flag;
   1bc04:	e5c01000 	strb	r1, [r0]
	BR.F |= flag;
   1bc08:	13813080 	orrne	r3, r1, #128	; 0x80
	if (val)
   1bc0c:	1a000008 	bne	1bc34 <SLA_C+0x70>
	BR.F &= ~flag;
   1bc10:	e203306d 	and	r3, r3, #109	; 0x6d
	if (val)
   1bc14:	e3520000 	cmp	r2, #0
	BR.F &= ~flag;
   1bc18:	e5c03000 	strb	r3, [r0]
	BR.F |= flag;
   1bc1c:	03831040 	orreq	r1, r3, #64	; 0x40
	if (val)
   1bc20:	1a000003 	bne	1bc34 <SLA_C+0x70>
	BR.F |= flag;
   1bc24:	e3813004 	orr	r3, r1, #4
   1bc28:	e5c03000 	strb	r3, [r0]
   1bc2c:	e5c02002 	strb	r2, [r0, #2]
}
   1bc30:	e12fff1e 	bx	lr
	VALFLAG(F_PV, parityBit[val]);
   1bc34:	e59f101c 	ldr	r1, [pc, #28]	; 1bc58 <SLA_C+0x94>
	BR.F &= ~flag;
   1bc38:	e6af3073 	sxtb	r3, r3
	if (val)
   1bc3c:	e791c102 	ldr	ip, [r1, r2, lsl #2]
	BR.F &= ~flag;
   1bc40:	e20310ad 	and	r1, r3, #173	; 0xad
	if (val)
   1bc44:	e35c0000 	cmp	ip, #0
   1bc48:	e5c01000 	strb	r1, [r0]
	BR.F &= ~flag;
   1bc4c:	020330a9 	andeq	r3, r3, #169	; 0xa9
	if (val)
   1bc50:	0afffff4 	beq	1bc28 <SLA_C+0x64>
   1bc54:	eafffff2 	b	1bc24 <SLA_C+0x60>
   1bc58:	0004f000 	.word	0x0004f000

0001bc5c <SLA_D>:
	BR.D = doSL(ctx, BR.D, IA_A);
   1bc5c:	e5d02005 	ldrb	r2, [r0, #5]
   1bc60:	e5d03000 	ldrb	r3, [r0]
   1bc64:	e3120080 	tst	r2, #128	; 0x80
    val <<= 1;
   1bc68:	e1a02082 	lsl	r2, r2, #1
   1bc6c:	e6ef2072 	uxtb	r2, r2
	BR.F |= flag;
   1bc70:	13833001 	orrne	r3, r3, #1
	BR.F &= ~flag;
   1bc74:	020330fe 	andeq	r3, r3, #254	; 0xfe
	if (val)
   1bc78:	e3120020 	tst	r2, #32
	BR.F |= flag;
   1bc7c:	13833020 	orrne	r3, r3, #32
	BR.F &= ~flag;
   1bc80:	020330df 	andeq	r3, r3, #223	; 0xdf
	if (val)
   1bc84:	e3120008 	tst	r2, #8
	BR.F |= flag;
   1bc88:	13833008 	orrne	r3, r3, #8
	BR.F &= ~flag;
   1bc8c:	020330f7 	andeq	r3, r3, #247	; 0xf7
   1bc90:	e6af3073 	sxtb	r3, r3
   1bc94:	e20310ed 	and	r1, r3, #237	; 0xed
	if (val)
   1bc98:	e3120080 	tst	r2, #128	; 0x80
	BR.F &= ~flag;
   1bc9c:	e5c01000 	strb	r1, [r0]
	BR.F |= flag;
   1bca0:	13813080 	orrne	r3, r1, #128	; 0x80
	if (val)
   1bca4:	1a000008 	bne	1bccc <SLA_D+0x70>
	BR.F &= ~flag;
   1bca8:	e203306d 	and	r3, r3, #109	; 0x6d
	if (val)
   1bcac:	e3520000 	cmp	r2, #0
	BR.F &= ~flag;
   1bcb0:	e5c03000 	strb	r3, [r0]
	BR.F |= flag;
   1bcb4:	03831040 	orreq	r1, r3, #64	; 0x40
	if (val)
   1bcb8:	1a000003 	bne	1bccc <SLA_D+0x70>
	BR.F |= flag;
   1bcbc:	e3813004 	orr	r3, r1, #4
   1bcc0:	e5c03000 	strb	r3, [r0]
   1bcc4:	e5c02005 	strb	r2, [r0, #5]
}
   1bcc8:	e12fff1e 	bx	lr
	VALFLAG(F_PV, parityBit[val]);
   1bccc:	e59f101c 	ldr	r1, [pc, #28]	; 1bcf0 <SLA_D+0x94>
	BR.F &= ~flag;
   1bcd0:	e6af3073 	sxtb	r3, r3
	if (val)
   1bcd4:	e791c102 	ldr	ip, [r1, r2, lsl #2]
	BR.F &= ~flag;
   1bcd8:	e20310ad 	and	r1, r3, #173	; 0xad
	if (val)
   1bcdc:	e35c0000 	cmp	ip, #0
   1bce0:	e5c01000 	strb	r1, [r0]
	BR.F &= ~flag;
   1bce4:	020330a9 	andeq	r3, r3, #169	; 0xa9
	if (val)
   1bce8:	0afffff4 	beq	1bcc0 <SLA_D+0x64>
   1bcec:	eafffff2 	b	1bcbc <SLA_D+0x60>
   1bcf0:	0004f000 	.word	0x0004f000

0001bcf4 <SLA_E>:
	BR.E = doSL(ctx, BR.E, IA_A);
   1bcf4:	e5d02004 	ldrb	r2, [r0, #4]
   1bcf8:	e5d03000 	ldrb	r3, [r0]
   1bcfc:	e3120080 	tst	r2, #128	; 0x80
    val <<= 1;
   1bd00:	e1a02082 	lsl	r2, r2, #1
   1bd04:	e6ef2072 	uxtb	r2, r2
	BR.F |= flag;
   1bd08:	13833001 	orrne	r3, r3, #1
	BR.F &= ~flag;
   1bd0c:	020330fe 	andeq	r3, r3, #254	; 0xfe
	if (val)
   1bd10:	e3120020 	tst	r2, #32
	BR.F |= flag;
   1bd14:	13833020 	orrne	r3, r3, #32
	BR.F &= ~flag;
   1bd18:	020330df 	andeq	r3, r3, #223	; 0xdf
	if (val)
   1bd1c:	e3120008 	tst	r2, #8
	BR.F |= flag;
   1bd20:	13833008 	orrne	r3, r3, #8
	BR.F &= ~flag;
   1bd24:	020330f7 	andeq	r3, r3, #247	; 0xf7
   1bd28:	e6af3073 	sxtb	r3, r3
   1bd2c:	e20310ed 	and	r1, r3, #237	; 0xed
	if (val)
   1bd30:	e3120080 	tst	r2, #128	; 0x80
	BR.F &= ~flag;
   1bd34:	e5c01000 	strb	r1, [r0]
	BR.F |= flag;
   1bd38:	13813080 	orrne	r3, r1, #128	; 0x80
	if (val)
   1bd3c:	1a000008 	bne	1bd64 <SLA_E+0x70>
	BR.F &= ~flag;
   1bd40:	e203306d 	and	r3, r3, #109	; 0x6d
	if (val)
   1bd44:	e3520000 	cmp	r2, #0
	BR.F &= ~flag;
   1bd48:	e5c03000 	strb	r3, [r0]
	BR.F |= flag;
   1bd4c:	03831040 	orreq	r1, r3, #64	; 0x40
	if (val)
   1bd50:	1a000003 	bne	1bd64 <SLA_E+0x70>
	BR.F |= flag;
   1bd54:	e3813004 	orr	r3, r1, #4
   1bd58:	e5c03000 	strb	r3, [r0]
   1bd5c:	e5c02004 	strb	r2, [r0, #4]
}
   1bd60:	e12fff1e 	bx	lr
	VALFLAG(F_PV, parityBit[val]);
   1bd64:	e59f101c 	ldr	r1, [pc, #28]	; 1bd88 <SLA_E+0x94>
	BR.F &= ~flag;
   1bd68:	e6af3073 	sxtb	r3, r3
	if (val)
   1bd6c:	e791c102 	ldr	ip, [r1, r2, lsl #2]
	BR.F &= ~flag;
   1bd70:	e20310ad 	and	r1, r3, #173	; 0xad
	if (val)
   1bd74:	e35c0000 	cmp	ip, #0
   1bd78:	e5c01000 	strb	r1, [r0]
	BR.F &= ~flag;
   1bd7c:	020330a9 	andeq	r3, r3, #169	; 0xa9
	if (val)
   1bd80:	0afffff4 	beq	1bd58 <SLA_E+0x64>
   1bd84:	eafffff2 	b	1bd54 <SLA_E+0x60>
   1bd88:	0004f000 	.word	0x0004f000

0001bd8c <SLA_H>:
	BR.H = doSL(ctx, BR.H, IA_A);
   1bd8c:	e5d02007 	ldrb	r2, [r0, #7]
   1bd90:	e5d03000 	ldrb	r3, [r0]
   1bd94:	e3120080 	tst	r2, #128	; 0x80
    val <<= 1;
   1bd98:	e1a02082 	lsl	r2, r2, #1
   1bd9c:	e6ef2072 	uxtb	r2, r2
	BR.F |= flag;
   1bda0:	13833001 	orrne	r3, r3, #1
	BR.F &= ~flag;
   1bda4:	020330fe 	andeq	r3, r3, #254	; 0xfe
	if (val)
   1bda8:	e3120020 	tst	r2, #32
	BR.F |= flag;
   1bdac:	13833020 	orrne	r3, r3, #32
	BR.F &= ~flag;
   1bdb0:	020330df 	andeq	r3, r3, #223	; 0xdf
	if (val)
   1bdb4:	e3120008 	tst	r2, #8
	BR.F |= flag;
   1bdb8:	13833008 	orrne	r3, r3, #8
	BR.F &= ~flag;
   1bdbc:	020330f7 	andeq	r3, r3, #247	; 0xf7
   1bdc0:	e6af3073 	sxtb	r3, r3
   1bdc4:	e20310ed 	and	r1, r3, #237	; 0xed
	if (val)
   1bdc8:	e3120080 	tst	r2, #128	; 0x80
	BR.F &= ~flag;
   1bdcc:	e5c01000 	strb	r1, [r0]
	BR.F |= flag;
   1bdd0:	13813080 	orrne	r3, r1, #128	; 0x80
	if (val)
   1bdd4:	1a000008 	bne	1bdfc <SLA_H+0x70>
	BR.F &= ~flag;
   1bdd8:	e203306d 	and	r3, r3, #109	; 0x6d
	if (val)
   1bddc:	e3520000 	cmp	r2, #0
	BR.F &= ~flag;
   1bde0:	e5c03000 	strb	r3, [r0]
	BR.F |= flag;
   1bde4:	03831040 	orreq	r1, r3, #64	; 0x40
	if (val)
   1bde8:	1a000003 	bne	1bdfc <SLA_H+0x70>
	BR.F |= flag;
   1bdec:	e3813004 	orr	r3, r1, #4
   1bdf0:	e5c03000 	strb	r3, [r0]
   1bdf4:	e5c02007 	strb	r2, [r0, #7]
}
   1bdf8:	e12fff1e 	bx	lr
	VALFLAG(F_PV, parityBit[val]);
   1bdfc:	e59f101c 	ldr	r1, [pc, #28]	; 1be20 <SLA_H+0x94>
	BR.F &= ~flag;
   1be00:	e6af3073 	sxtb	r3, r3
	if (val)
   1be04:	e791c102 	ldr	ip, [r1, r2, lsl #2]
	BR.F &= ~flag;
   1be08:	e20310ad 	and	r1, r3, #173	; 0xad
	if (val)
   1be0c:	e35c0000 	cmp	ip, #0
   1be10:	e5c01000 	strb	r1, [r0]
	BR.F &= ~flag;
   1be14:	020330a9 	andeq	r3, r3, #169	; 0xa9
	if (val)
   1be18:	0afffff4 	beq	1bdf0 <SLA_H+0x64>
   1be1c:	eafffff2 	b	1bdec <SLA_H+0x60>
   1be20:	0004f000 	.word	0x0004f000

0001be24 <SLA_L>:
	BR.L = doSL(ctx, BR.L, IA_A);
   1be24:	e5d02006 	ldrb	r2, [r0, #6]
   1be28:	e5d03000 	ldrb	r3, [r0]
   1be2c:	e3120080 	tst	r2, #128	; 0x80
    val <<= 1;
   1be30:	e1a02082 	lsl	r2, r2, #1
   1be34:	e6ef2072 	uxtb	r2, r2
	BR.F |= flag;
   1be38:	13833001 	orrne	r3, r3, #1
	BR.F &= ~flag;
   1be3c:	020330fe 	andeq	r3, r3, #254	; 0xfe
	if (val)
   1be40:	e3120020 	tst	r2, #32
	BR.F |= flag;
   1be44:	13833020 	orrne	r3, r3, #32
	BR.F &= ~flag;
   1be48:	020330df 	andeq	r3, r3, #223	; 0xdf
	if (val)
   1be4c:	e3120008 	tst	r2, #8
	BR.F |= flag;
   1be50:	13833008 	orrne	r3, r3, #8
	BR.F &= ~flag;
   1be54:	020330f7 	andeq	r3, r3, #247	; 0xf7
   1be58:	e6af3073 	sxtb	r3, r3
   1be5c:	e20310ed 	and	r1, r3, #237	; 0xed
	if (val)
   1be60:	e3120080 	tst	r2, #128	; 0x80
	BR.F &= ~flag;
   1be64:	e5c01000 	strb	r1, [r0]
	BR.F |= flag;
   1be68:	13813080 	orrne	r3, r1, #128	; 0x80
	if (val)
   1be6c:	1a000008 	bne	1be94 <SLA_L+0x70>
	BR.F &= ~flag;
   1be70:	e203306d 	and	r3, r3, #109	; 0x6d
	if (val)
   1be74:	e3520000 	cmp	r2, #0
	BR.F &= ~flag;
   1be78:	e5c03000 	strb	r3, [r0]
	BR.F |= flag;
   1be7c:	03831040 	orreq	r1, r3, #64	; 0x40
	if (val)
   1be80:	1a000003 	bne	1be94 <SLA_L+0x70>
	BR.F |= flag;
   1be84:	e3813004 	orr	r3, r1, #4
   1be88:	e5c03000 	strb	r3, [r0]
   1be8c:	e5c02006 	strb	r2, [r0, #6]
}
   1be90:	e12fff1e 	bx	lr
	VALFLAG(F_PV, parityBit[val]);
   1be94:	e59f101c 	ldr	r1, [pc, #28]	; 1beb8 <SLA_L+0x94>
	BR.F &= ~flag;
   1be98:	e6af3073 	sxtb	r3, r3
	if (val)
   1be9c:	e791c102 	ldr	ip, [r1, r2, lsl #2]
	BR.F &= ~flag;
   1bea0:	e20310ad 	and	r1, r3, #173	; 0xad
	if (val)
   1bea4:	e35c0000 	cmp	ip, #0
   1bea8:	e5c01000 	strb	r1, [r0]
	BR.F &= ~flag;
   1beac:	020330a9 	andeq	r3, r3, #169	; 0xa9
	if (val)
   1beb0:	0afffff4 	beq	1be88 <SLA_L+0x64>
   1beb4:	eafffff2 	b	1be84 <SLA_L+0x60>
   1beb8:	0004f000 	.word	0x0004f000

0001bebc <CALL_M_off_nn>:
	ctx->tstates += 3;
   1bebc:	e5903040 	ldr	r3, [r0, #64]	; 0x40
{
   1bec0:	e92d4070 	push	{r4, r5, r6, lr}
   1bec4:	e1a04000 	mov	r4, r0
	ushort addr = read16(ctx, ctx->PC);
   1bec8:	e1d051bc 	ldrh	r5, [r0, #28]
   1becc:	e2833003 	add	r3, r3, #3
   1bed0:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   1bed4:	e1a01005 	mov	r1, r5
   1bed8:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   1bedc:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   1bee0:	e12fff33 	blx	r3
	ctx->tstates += 3;
   1bee4:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	byte msb = read8(ctx, addr + 1);
   1bee8:	e2851001 	add	r1, r5, #1
	ctx->tstates += 3;
   1beec:	e2833003 	add	r3, r3, #3
	return ctx->memRead(ctx->memParam, addr);	
   1bef0:	e6ff1071 	uxth	r1, r1
	ctx->tstates += 3;
   1bef4:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   1bef8:	e1a06000 	mov	r6, r0
   1befc:	e5943024 	ldr	r3, [r4, #36]	; 0x24
   1bf00:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   1bf04:	e12fff33 	blx	r3
	ctx->PC += 2;
   1bf08:	e1d411bc 	ldrh	r1, [r4, #28]
	if (condition(ctx, C_M))
   1bf0c:	e1d430d0 	ldrsb	r3, [r4]
	ctx->PC += 2;
   1bf10:	e2811002 	add	r1, r1, #2
   1bf14:	e6ff1071 	uxth	r1, r1
	if (condition(ctx, C_M))
   1bf18:	e3530000 	cmp	r3, #0
	ctx->PC += 2;
   1bf1c:	e1c411bc 	strh	r1, [r4, #28]
	if (condition(ctx, C_M))
   1bf20:	a8bd8070 	popge	{r4, r5, r6, pc}
   1bf24:	e1a05000 	mov	r5, r0
		ctx->tstates += 1;
   1bf28:	e5943040 	ldr	r3, [r4, #64]	; 0x40
		doPush(ctx, ctx->PC);
   1bf2c:	e1a00004 	mov	r0, r4
		ctx->tstates += 1;
   1bf30:	e2833001 	add	r3, r3, #1
   1bf34:	e5843040 	str	r3, [r4, #64]	; 0x40
	return msb << 8 | lsb;
   1bf38:	e1866405 	orr	r6, r6, r5, lsl #8
		doPush(ctx, ctx->PC);
   1bf3c:	ebffb126 	bl	83dc <doPush>
		ctx->PC = addr;
   1bf40:	e1c461bc 	strh	r6, [r4, #28]
}
   1bf44:	e8bd8070 	pop	{r4, r5, r6, pc}

0001bf48 <CALL_P_off_nn>:
	ctx->tstates += 3;
   1bf48:	e5903040 	ldr	r3, [r0, #64]	; 0x40
{
   1bf4c:	e92d4070 	push	{r4, r5, r6, lr}
   1bf50:	e1a04000 	mov	r4, r0
	ushort addr = read16(ctx, ctx->PC);
   1bf54:	e1d051bc 	ldrh	r5, [r0, #28]
   1bf58:	e2833003 	add	r3, r3, #3
   1bf5c:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   1bf60:	e1a01005 	mov	r1, r5
   1bf64:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   1bf68:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   1bf6c:	e12fff33 	blx	r3
	ctx->tstates += 3;
   1bf70:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	byte msb = read8(ctx, addr + 1);
   1bf74:	e2851001 	add	r1, r5, #1
	ctx->tstates += 3;
   1bf78:	e2833003 	add	r3, r3, #3
	return ctx->memRead(ctx->memParam, addr);	
   1bf7c:	e6ff1071 	uxth	r1, r1
	ctx->tstates += 3;
   1bf80:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   1bf84:	e1a06000 	mov	r6, r0
   1bf88:	e5943024 	ldr	r3, [r4, #36]	; 0x24
   1bf8c:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   1bf90:	e12fff33 	blx	r3
	ctx->PC += 2;
   1bf94:	e1d411bc 	ldrh	r1, [r4, #28]
	if (condition(ctx, C_P))
   1bf98:	e1d430d0 	ldrsb	r3, [r4]
	ctx->PC += 2;
   1bf9c:	e2811002 	add	r1, r1, #2
   1bfa0:	e6ff1071 	uxth	r1, r1
	if (condition(ctx, C_P))
   1bfa4:	e3530000 	cmp	r3, #0
	ctx->PC += 2;
   1bfa8:	e1c411bc 	strh	r1, [r4, #28]
	if (condition(ctx, C_P))
   1bfac:	b8bd8070 	poplt	{r4, r5, r6, pc}
   1bfb0:	e1a05000 	mov	r5, r0
		ctx->tstates += 1;
   1bfb4:	e5943040 	ldr	r3, [r4, #64]	; 0x40
		doPush(ctx, ctx->PC);
   1bfb8:	e1a00004 	mov	r0, r4
		ctx->tstates += 1;
   1bfbc:	e2833001 	add	r3, r3, #1
   1bfc0:	e5843040 	str	r3, [r4, #64]	; 0x40
	return msb << 8 | lsb;
   1bfc4:	e1866405 	orr	r6, r6, r5, lsl #8
		doPush(ctx, ctx->PC);
   1bfc8:	ebffb103 	bl	83dc <doPush>
		ctx->PC = addr;
   1bfcc:	e1c461bc 	strh	r6, [r4, #28]
}
   1bfd0:	e8bd8070 	pop	{r4, r5, r6, pc}

0001bfd4 <CALL_C_off_nn>:
	ctx->tstates += 3;
   1bfd4:	e5903040 	ldr	r3, [r0, #64]	; 0x40
{
   1bfd8:	e92d4070 	push	{r4, r5, r6, lr}
   1bfdc:	e1a04000 	mov	r4, r0
	ushort addr = read16(ctx, ctx->PC);
   1bfe0:	e1d051bc 	ldrh	r5, [r0, #28]
   1bfe4:	e2833003 	add	r3, r3, #3
   1bfe8:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   1bfec:	e1a01005 	mov	r1, r5
   1bff0:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   1bff4:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   1bff8:	e12fff33 	blx	r3
	ctx->tstates += 3;
   1bffc:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	byte msb = read8(ctx, addr + 1);
   1c000:	e2851001 	add	r1, r5, #1
	ctx->tstates += 3;
   1c004:	e2833003 	add	r3, r3, #3
	return ctx->memRead(ctx->memParam, addr);	
   1c008:	e6ff1071 	uxth	r1, r1
	ctx->tstates += 3;
   1c00c:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   1c010:	e1a06000 	mov	r6, r0
   1c014:	e5943024 	ldr	r3, [r4, #36]	; 0x24
   1c018:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   1c01c:	e12fff33 	blx	r3
	ctx->PC += 2;
   1c020:	e1d411bc 	ldrh	r1, [r4, #28]
	return (BR.F & flag) != 0;
   1c024:	e5d43000 	ldrb	r3, [r4]
   1c028:	e2811002 	add	r1, r1, #2
   1c02c:	e6ff1071 	uxth	r1, r1
	if (condition(ctx, C_C))
   1c030:	e3130001 	tst	r3, #1
	ctx->PC += 2;
   1c034:	e1c411bc 	strh	r1, [r4, #28]
	if (condition(ctx, C_C))
   1c038:	08bd8070 	popeq	{r4, r5, r6, pc}
   1c03c:	e1a05000 	mov	r5, r0
		ctx->tstates += 1;
   1c040:	e5943040 	ldr	r3, [r4, #64]	; 0x40
		doPush(ctx, ctx->PC);
   1c044:	e1a00004 	mov	r0, r4
		ctx->tstates += 1;
   1c048:	e2833001 	add	r3, r3, #1
   1c04c:	e5843040 	str	r3, [r4, #64]	; 0x40
	return msb << 8 | lsb;
   1c050:	e1866405 	orr	r6, r6, r5, lsl #8
		doPush(ctx, ctx->PC);
   1c054:	ebffb0e0 	bl	83dc <doPush>
		ctx->PC = addr;
   1c058:	e1c461bc 	strh	r6, [r4, #28]
}
   1c05c:	e8bd8070 	pop	{r4, r5, r6, pc}

0001c060 <CALL_NC_off_nn>:
	ctx->tstates += 3;
   1c060:	e5903040 	ldr	r3, [r0, #64]	; 0x40
{
   1c064:	e92d4070 	push	{r4, r5, r6, lr}
   1c068:	e1a04000 	mov	r4, r0
	ushort addr = read16(ctx, ctx->PC);
   1c06c:	e1d051bc 	ldrh	r5, [r0, #28]
   1c070:	e2833003 	add	r3, r3, #3
   1c074:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   1c078:	e1a01005 	mov	r1, r5
   1c07c:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   1c080:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   1c084:	e12fff33 	blx	r3
	ctx->tstates += 3;
   1c088:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	byte msb = read8(ctx, addr + 1);
   1c08c:	e2851001 	add	r1, r5, #1
	ctx->tstates += 3;
   1c090:	e2833003 	add	r3, r3, #3
	return ctx->memRead(ctx->memParam, addr);	
   1c094:	e6ff1071 	uxth	r1, r1
	ctx->tstates += 3;
   1c098:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   1c09c:	e1a06000 	mov	r6, r0
   1c0a0:	e5943024 	ldr	r3, [r4, #36]	; 0x24
   1c0a4:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   1c0a8:	e12fff33 	blx	r3
	ctx->PC += 2;
   1c0ac:	e1d411bc 	ldrh	r1, [r4, #28]
	return (BR.F & flag) != 0;
   1c0b0:	e5d43000 	ldrb	r3, [r4]
   1c0b4:	e2811002 	add	r1, r1, #2
   1c0b8:	e6ff1071 	uxth	r1, r1
	if (condition(ctx, C_NC))
   1c0bc:	e3130001 	tst	r3, #1
	ctx->PC += 2;
   1c0c0:	e1c411bc 	strh	r1, [r4, #28]
	if (condition(ctx, C_NC))
   1c0c4:	18bd8070 	popne	{r4, r5, r6, pc}
   1c0c8:	e1a05000 	mov	r5, r0
		ctx->tstates += 1;
   1c0cc:	e5943040 	ldr	r3, [r4, #64]	; 0x40
		doPush(ctx, ctx->PC);
   1c0d0:	e1a00004 	mov	r0, r4
		ctx->tstates += 1;
   1c0d4:	e2833001 	add	r3, r3, #1
   1c0d8:	e5843040 	str	r3, [r4, #64]	; 0x40
	return msb << 8 | lsb;
   1c0dc:	e1866405 	orr	r6, r6, r5, lsl #8
		doPush(ctx, ctx->PC);
   1c0e0:	ebffb0bd 	bl	83dc <doPush>
		ctx->PC = addr;
   1c0e4:	e1c461bc 	strh	r6, [r4, #28]
}
   1c0e8:	e8bd8070 	pop	{r4, r5, r6, pc}

0001c0ec <CALL_NZ_off_nn>:
	ctx->tstates += 3;
   1c0ec:	e5903040 	ldr	r3, [r0, #64]	; 0x40
{
   1c0f0:	e92d4070 	push	{r4, r5, r6, lr}
   1c0f4:	e1a04000 	mov	r4, r0
	ushort addr = read16(ctx, ctx->PC);
   1c0f8:	e1d051bc 	ldrh	r5, [r0, #28]
   1c0fc:	e2833003 	add	r3, r3, #3
   1c100:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   1c104:	e1a01005 	mov	r1, r5
   1c108:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   1c10c:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   1c110:	e12fff33 	blx	r3
	ctx->tstates += 3;
   1c114:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	byte msb = read8(ctx, addr + 1);
   1c118:	e2851001 	add	r1, r5, #1
	ctx->tstates += 3;
   1c11c:	e2833003 	add	r3, r3, #3
	return ctx->memRead(ctx->memParam, addr);	
   1c120:	e6ff1071 	uxth	r1, r1
	ctx->tstates += 3;
   1c124:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   1c128:	e1a06000 	mov	r6, r0
   1c12c:	e5943024 	ldr	r3, [r4, #36]	; 0x24
   1c130:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   1c134:	e12fff33 	blx	r3
	ctx->PC += 2;
   1c138:	e1d411bc 	ldrh	r1, [r4, #28]
	return (BR.F & flag) != 0;
   1c13c:	e5d43000 	ldrb	r3, [r4]
   1c140:	e2811002 	add	r1, r1, #2
   1c144:	e6ff1071 	uxth	r1, r1
	if (condition(ctx, C_NZ))
   1c148:	e3130040 	tst	r3, #64	; 0x40
	ctx->PC += 2;
   1c14c:	e1c411bc 	strh	r1, [r4, #28]
	if (condition(ctx, C_NZ))
   1c150:	18bd8070 	popne	{r4, r5, r6, pc}
   1c154:	e1a05000 	mov	r5, r0
		ctx->tstates += 1;
   1c158:	e5943040 	ldr	r3, [r4, #64]	; 0x40
		doPush(ctx, ctx->PC);
   1c15c:	e1a00004 	mov	r0, r4
		ctx->tstates += 1;
   1c160:	e2833001 	add	r3, r3, #1
   1c164:	e5843040 	str	r3, [r4, #64]	; 0x40
	return msb << 8 | lsb;
   1c168:	e1866405 	orr	r6, r6, r5, lsl #8
		doPush(ctx, ctx->PC);
   1c16c:	ebffb09a 	bl	83dc <doPush>
		ctx->PC = addr;
   1c170:	e1c461bc 	strh	r6, [r4, #28]
}
   1c174:	e8bd8070 	pop	{r4, r5, r6, pc}

0001c178 <CALL_Z_off_nn>:
	ctx->tstates += 3;
   1c178:	e5903040 	ldr	r3, [r0, #64]	; 0x40
{
   1c17c:	e92d4070 	push	{r4, r5, r6, lr}
   1c180:	e1a04000 	mov	r4, r0
	ushort addr = read16(ctx, ctx->PC);
   1c184:	e1d051bc 	ldrh	r5, [r0, #28]
   1c188:	e2833003 	add	r3, r3, #3
   1c18c:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   1c190:	e1a01005 	mov	r1, r5
   1c194:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   1c198:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   1c19c:	e12fff33 	blx	r3
	ctx->tstates += 3;
   1c1a0:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	byte msb = read8(ctx, addr + 1);
   1c1a4:	e2851001 	add	r1, r5, #1
	ctx->tstates += 3;
   1c1a8:	e2833003 	add	r3, r3, #3
	return ctx->memRead(ctx->memParam, addr);	
   1c1ac:	e6ff1071 	uxth	r1, r1
	ctx->tstates += 3;
   1c1b0:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   1c1b4:	e1a06000 	mov	r6, r0
   1c1b8:	e5943024 	ldr	r3, [r4, #36]	; 0x24
   1c1bc:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   1c1c0:	e12fff33 	blx	r3
	ctx->PC += 2;
   1c1c4:	e1d411bc 	ldrh	r1, [r4, #28]
	return (BR.F & flag) != 0;
   1c1c8:	e5d43000 	ldrb	r3, [r4]
   1c1cc:	e2811002 	add	r1, r1, #2
   1c1d0:	e6ff1071 	uxth	r1, r1
	if (condition(ctx, C_Z))
   1c1d4:	e3130040 	tst	r3, #64	; 0x40
	ctx->PC += 2;
   1c1d8:	e1c411bc 	strh	r1, [r4, #28]
	if (condition(ctx, C_Z))
   1c1dc:	08bd8070 	popeq	{r4, r5, r6, pc}
   1c1e0:	e1a05000 	mov	r5, r0
		ctx->tstates += 1;
   1c1e4:	e5943040 	ldr	r3, [r4, #64]	; 0x40
		doPush(ctx, ctx->PC);
   1c1e8:	e1a00004 	mov	r0, r4
		ctx->tstates += 1;
   1c1ec:	e2833001 	add	r3, r3, #1
   1c1f0:	e5843040 	str	r3, [r4, #64]	; 0x40
	return msb << 8 | lsb;
   1c1f4:	e1866405 	orr	r6, r6, r5, lsl #8
		doPush(ctx, ctx->PC);
   1c1f8:	ebffb077 	bl	83dc <doPush>
		ctx->PC = addr;
   1c1fc:	e1c461bc 	strh	r6, [r4, #28]
}
   1c200:	e8bd8070 	pop	{r4, r5, r6, pc}

0001c204 <SLL_A>:
	BR.A = doSL(ctx, BR.A, IA_L);
   1c204:	e5d02001 	ldrb	r2, [r0, #1]
   1c208:	e5d03000 	ldrb	r3, [r0]
	if (val)
   1c20c:	e3120080 	tst	r2, #128	; 0x80
    val <<= 1;
   1c210:	e1a02082 	lsl	r2, r2, #1
   1c214:	e6ef2072 	uxtb	r2, r2
	BR.F |= flag;
   1c218:	13833001 	orrne	r3, r3, #1
	BR.F &= ~flag;
   1c21c:	020330fe 	andeq	r3, r3, #254	; 0xfe
	if (val)
   1c220:	e3120020 	tst	r2, #32
	BR.F |= flag;
   1c224:	13833020 	orrne	r3, r3, #32
	BR.F &= ~flag;
   1c228:	020330df 	andeq	r3, r3, #223	; 0xdf
	if (val)
   1c22c:	e3120008 	tst	r2, #8
	BR.F |= flag;
   1c230:	13833008 	orrne	r3, r3, #8
	BR.F &= ~flag;
   1c234:	020330f7 	andeq	r3, r3, #247	; 0xf7
        val |= 1;
   1c238:	e3821001 	orr	r1, r2, #1
	BR.F &= ~flag;
   1c23c:	e6af3073 	sxtb	r3, r3
	VALFLAG(F_PV, parityBit[val]);
   1c240:	e59f2028 	ldr	r2, [pc, #40]	; 1c270 <SLL_A+0x6c>
	if (val)
   1c244:	e3110080 	tst	r1, #128	; 0x80
	BR.F |= flag;
   1c248:	e203306d 	and	r3, r3, #109	; 0x6d
   1c24c:	13833080 	orrne	r3, r3, #128	; 0x80
	if (val)
   1c250:	e7922101 	ldr	r2, [r2, r1, lsl #2]
	BR.F &= ~flag;
   1c254:	e6af3073 	sxtb	r3, r3
	BR.F |= flag;
   1c258:	e20330a9 	and	r3, r3, #169	; 0xa9
	if (val)
   1c25c:	e3520000 	cmp	r2, #0
	BR.F |= flag;
   1c260:	13833004 	orrne	r3, r3, #4
   1c264:	e5c03000 	strb	r3, [r0]
   1c268:	e5c01001 	strb	r1, [r0, #1]
}
   1c26c:	e12fff1e 	bx	lr
   1c270:	0004f000 	.word	0x0004f000

0001c274 <SLL_B>:
	BR.B = doSL(ctx, BR.B, IA_L);
   1c274:	e5d02003 	ldrb	r2, [r0, #3]
   1c278:	e5d03000 	ldrb	r3, [r0]
	if (val)
   1c27c:	e3120080 	tst	r2, #128	; 0x80
    val <<= 1;
   1c280:	e1a02082 	lsl	r2, r2, #1
   1c284:	e6ef2072 	uxtb	r2, r2
	BR.F |= flag;
   1c288:	13833001 	orrne	r3, r3, #1
	BR.F &= ~flag;
   1c28c:	020330fe 	andeq	r3, r3, #254	; 0xfe
	if (val)
   1c290:	e3120020 	tst	r2, #32
	BR.F |= flag;
   1c294:	13833020 	orrne	r3, r3, #32
	BR.F &= ~flag;
   1c298:	020330df 	andeq	r3, r3, #223	; 0xdf
	if (val)
   1c29c:	e3120008 	tst	r2, #8
	BR.F |= flag;
   1c2a0:	13833008 	orrne	r3, r3, #8
	BR.F &= ~flag;
   1c2a4:	020330f7 	andeq	r3, r3, #247	; 0xf7
        val |= 1;
   1c2a8:	e3821001 	orr	r1, r2, #1
	BR.F &= ~flag;
   1c2ac:	e6af3073 	sxtb	r3, r3
	VALFLAG(F_PV, parityBit[val]);
   1c2b0:	e59f2028 	ldr	r2, [pc, #40]	; 1c2e0 <SLL_B+0x6c>
	if (val)
   1c2b4:	e3110080 	tst	r1, #128	; 0x80
	BR.F |= flag;
   1c2b8:	e203306d 	and	r3, r3, #109	; 0x6d
   1c2bc:	13833080 	orrne	r3, r3, #128	; 0x80
	if (val)
   1c2c0:	e7922101 	ldr	r2, [r2, r1, lsl #2]
	BR.F &= ~flag;
   1c2c4:	e6af3073 	sxtb	r3, r3
	BR.F |= flag;
   1c2c8:	e20330a9 	and	r3, r3, #169	; 0xa9
	if (val)
   1c2cc:	e3520000 	cmp	r2, #0
	BR.F |= flag;
   1c2d0:	13833004 	orrne	r3, r3, #4
   1c2d4:	e5c03000 	strb	r3, [r0]
   1c2d8:	e5c01003 	strb	r1, [r0, #3]
}
   1c2dc:	e12fff1e 	bx	lr
   1c2e0:	0004f000 	.word	0x0004f000

0001c2e4 <SLL_C>:
	BR.C = doSL(ctx, BR.C, IA_L);
   1c2e4:	e5d02002 	ldrb	r2, [r0, #2]
   1c2e8:	e5d03000 	ldrb	r3, [r0]
	if (val)
   1c2ec:	e3120080 	tst	r2, #128	; 0x80
    val <<= 1;
   1c2f0:	e1a02082 	lsl	r2, r2, #1
   1c2f4:	e6ef2072 	uxtb	r2, r2
	BR.F |= flag;
   1c2f8:	13833001 	orrne	r3, r3, #1
	BR.F &= ~flag;
   1c2fc:	020330fe 	andeq	r3, r3, #254	; 0xfe
	if (val)
   1c300:	e3120020 	tst	r2, #32
	BR.F |= flag;
   1c304:	13833020 	orrne	r3, r3, #32
	BR.F &= ~flag;
   1c308:	020330df 	andeq	r3, r3, #223	; 0xdf
	if (val)
   1c30c:	e3120008 	tst	r2, #8
	BR.F |= flag;
   1c310:	13833008 	orrne	r3, r3, #8
	BR.F &= ~flag;
   1c314:	020330f7 	andeq	r3, r3, #247	; 0xf7
        val |= 1;
   1c318:	e3821001 	orr	r1, r2, #1
	BR.F &= ~flag;
   1c31c:	e6af3073 	sxtb	r3, r3
	VALFLAG(F_PV, parityBit[val]);
   1c320:	e59f2028 	ldr	r2, [pc, #40]	; 1c350 <SLL_C+0x6c>
	if (val)
   1c324:	e3110080 	tst	r1, #128	; 0x80
	BR.F |= flag;
   1c328:	e203306d 	and	r3, r3, #109	; 0x6d
   1c32c:	13833080 	orrne	r3, r3, #128	; 0x80
	if (val)
   1c330:	e7922101 	ldr	r2, [r2, r1, lsl #2]
	BR.F &= ~flag;
   1c334:	e6af3073 	sxtb	r3, r3
	BR.F |= flag;
   1c338:	e20330a9 	and	r3, r3, #169	; 0xa9
	if (val)
   1c33c:	e3520000 	cmp	r2, #0
	BR.F |= flag;
   1c340:	13833004 	orrne	r3, r3, #4
   1c344:	e5c03000 	strb	r3, [r0]
   1c348:	e5c01002 	strb	r1, [r0, #2]
}
   1c34c:	e12fff1e 	bx	lr
   1c350:	0004f000 	.word	0x0004f000

0001c354 <SLL_D>:
	BR.D = doSL(ctx, BR.D, IA_L);
   1c354:	e5d02005 	ldrb	r2, [r0, #5]
   1c358:	e5d03000 	ldrb	r3, [r0]
	if (val)
   1c35c:	e3120080 	tst	r2, #128	; 0x80
    val <<= 1;
   1c360:	e1a02082 	lsl	r2, r2, #1
   1c364:	e6ef2072 	uxtb	r2, r2
	BR.F |= flag;
   1c368:	13833001 	orrne	r3, r3, #1
	BR.F &= ~flag;
   1c36c:	020330fe 	andeq	r3, r3, #254	; 0xfe
	if (val)
   1c370:	e3120020 	tst	r2, #32
	BR.F |= flag;
   1c374:	13833020 	orrne	r3, r3, #32
	BR.F &= ~flag;
   1c378:	020330df 	andeq	r3, r3, #223	; 0xdf
	if (val)
   1c37c:	e3120008 	tst	r2, #8
	BR.F |= flag;
   1c380:	13833008 	orrne	r3, r3, #8
	BR.F &= ~flag;
   1c384:	020330f7 	andeq	r3, r3, #247	; 0xf7
        val |= 1;
   1c388:	e3821001 	orr	r1, r2, #1
	BR.F &= ~flag;
   1c38c:	e6af3073 	sxtb	r3, r3
	VALFLAG(F_PV, parityBit[val]);
   1c390:	e59f2028 	ldr	r2, [pc, #40]	; 1c3c0 <SLL_D+0x6c>
	if (val)
   1c394:	e3110080 	tst	r1, #128	; 0x80
	BR.F |= flag;
   1c398:	e203306d 	and	r3, r3, #109	; 0x6d
   1c39c:	13833080 	orrne	r3, r3, #128	; 0x80
	if (val)
   1c3a0:	e7922101 	ldr	r2, [r2, r1, lsl #2]
	BR.F &= ~flag;
   1c3a4:	e6af3073 	sxtb	r3, r3
	BR.F |= flag;
   1c3a8:	e20330a9 	and	r3, r3, #169	; 0xa9
	if (val)
   1c3ac:	e3520000 	cmp	r2, #0
	BR.F |= flag;
   1c3b0:	13833004 	orrne	r3, r3, #4
   1c3b4:	e5c03000 	strb	r3, [r0]
   1c3b8:	e5c01005 	strb	r1, [r0, #5]
}
   1c3bc:	e12fff1e 	bx	lr
   1c3c0:	0004f000 	.word	0x0004f000

0001c3c4 <SLL_E>:
	BR.E = doSL(ctx, BR.E, IA_L);
   1c3c4:	e5d02004 	ldrb	r2, [r0, #4]
   1c3c8:	e5d03000 	ldrb	r3, [r0]
	if (val)
   1c3cc:	e3120080 	tst	r2, #128	; 0x80
    val <<= 1;
   1c3d0:	e1a02082 	lsl	r2, r2, #1
   1c3d4:	e6ef2072 	uxtb	r2, r2
	BR.F |= flag;
   1c3d8:	13833001 	orrne	r3, r3, #1
	BR.F &= ~flag;
   1c3dc:	020330fe 	andeq	r3, r3, #254	; 0xfe
	if (val)
   1c3e0:	e3120020 	tst	r2, #32
	BR.F |= flag;
   1c3e4:	13833020 	orrne	r3, r3, #32
	BR.F &= ~flag;
   1c3e8:	020330df 	andeq	r3, r3, #223	; 0xdf
	if (val)
   1c3ec:	e3120008 	tst	r2, #8
	BR.F |= flag;
   1c3f0:	13833008 	orrne	r3, r3, #8
	BR.F &= ~flag;
   1c3f4:	020330f7 	andeq	r3, r3, #247	; 0xf7
        val |= 1;
   1c3f8:	e3821001 	orr	r1, r2, #1
	BR.F &= ~flag;
   1c3fc:	e6af3073 	sxtb	r3, r3
	VALFLAG(F_PV, parityBit[val]);
   1c400:	e59f2028 	ldr	r2, [pc, #40]	; 1c430 <SLL_E+0x6c>
	if (val)
   1c404:	e3110080 	tst	r1, #128	; 0x80
	BR.F |= flag;
   1c408:	e203306d 	and	r3, r3, #109	; 0x6d
   1c40c:	13833080 	orrne	r3, r3, #128	; 0x80
	if (val)
   1c410:	e7922101 	ldr	r2, [r2, r1, lsl #2]
	BR.F &= ~flag;
   1c414:	e6af3073 	sxtb	r3, r3
	BR.F |= flag;
   1c418:	e20330a9 	and	r3, r3, #169	; 0xa9
	if (val)
   1c41c:	e3520000 	cmp	r2, #0
	BR.F |= flag;
   1c420:	13833004 	orrne	r3, r3, #4
   1c424:	e5c03000 	strb	r3, [r0]
   1c428:	e5c01004 	strb	r1, [r0, #4]
}
   1c42c:	e12fff1e 	bx	lr
   1c430:	0004f000 	.word	0x0004f000

0001c434 <SLL_H>:
	BR.H = doSL(ctx, BR.H, IA_L);
   1c434:	e5d02007 	ldrb	r2, [r0, #7]
   1c438:	e5d03000 	ldrb	r3, [r0]
	if (val)
   1c43c:	e3120080 	tst	r2, #128	; 0x80
    val <<= 1;
   1c440:	e1a02082 	lsl	r2, r2, #1
   1c444:	e6ef2072 	uxtb	r2, r2
	BR.F |= flag;
   1c448:	13833001 	orrne	r3, r3, #1
	BR.F &= ~flag;
   1c44c:	020330fe 	andeq	r3, r3, #254	; 0xfe
	if (val)
   1c450:	e3120020 	tst	r2, #32
	BR.F |= flag;
   1c454:	13833020 	orrne	r3, r3, #32
	BR.F &= ~flag;
   1c458:	020330df 	andeq	r3, r3, #223	; 0xdf
	if (val)
   1c45c:	e3120008 	tst	r2, #8
	BR.F |= flag;
   1c460:	13833008 	orrne	r3, r3, #8
	BR.F &= ~flag;
   1c464:	020330f7 	andeq	r3, r3, #247	; 0xf7
        val |= 1;
   1c468:	e3821001 	orr	r1, r2, #1
	BR.F &= ~flag;
   1c46c:	e6af3073 	sxtb	r3, r3
	VALFLAG(F_PV, parityBit[val]);
   1c470:	e59f2028 	ldr	r2, [pc, #40]	; 1c4a0 <SLL_H+0x6c>
	if (val)
   1c474:	e3110080 	tst	r1, #128	; 0x80
	BR.F |= flag;
   1c478:	e203306d 	and	r3, r3, #109	; 0x6d
   1c47c:	13833080 	orrne	r3, r3, #128	; 0x80
	if (val)
   1c480:	e7922101 	ldr	r2, [r2, r1, lsl #2]
	BR.F &= ~flag;
   1c484:	e6af3073 	sxtb	r3, r3
	BR.F |= flag;
   1c488:	e20330a9 	and	r3, r3, #169	; 0xa9
	if (val)
   1c48c:	e3520000 	cmp	r2, #0
	BR.F |= flag;
   1c490:	13833004 	orrne	r3, r3, #4
   1c494:	e5c03000 	strb	r3, [r0]
   1c498:	e5c01007 	strb	r1, [r0, #7]
}
   1c49c:	e12fff1e 	bx	lr
   1c4a0:	0004f000 	.word	0x0004f000

0001c4a4 <SLL_L>:
	BR.L = doSL(ctx, BR.L, IA_L);
   1c4a4:	e5d02006 	ldrb	r2, [r0, #6]
   1c4a8:	e5d03000 	ldrb	r3, [r0]
	if (val)
   1c4ac:	e3120080 	tst	r2, #128	; 0x80
    val <<= 1;
   1c4b0:	e1a02082 	lsl	r2, r2, #1
   1c4b4:	e6ef2072 	uxtb	r2, r2
	BR.F |= flag;
   1c4b8:	13833001 	orrne	r3, r3, #1
	BR.F &= ~flag;
   1c4bc:	020330fe 	andeq	r3, r3, #254	; 0xfe
	if (val)
   1c4c0:	e3120020 	tst	r2, #32
	BR.F |= flag;
   1c4c4:	13833020 	orrne	r3, r3, #32
	BR.F &= ~flag;
   1c4c8:	020330df 	andeq	r3, r3, #223	; 0xdf
	if (val)
   1c4cc:	e3120008 	tst	r2, #8
	BR.F |= flag;
   1c4d0:	13833008 	orrne	r3, r3, #8
	BR.F &= ~flag;
   1c4d4:	020330f7 	andeq	r3, r3, #247	; 0xf7
        val |= 1;
   1c4d8:	e3821001 	orr	r1, r2, #1
	BR.F &= ~flag;
   1c4dc:	e6af3073 	sxtb	r3, r3
	VALFLAG(F_PV, parityBit[val]);
   1c4e0:	e59f2028 	ldr	r2, [pc, #40]	; 1c510 <SLL_L+0x6c>
	if (val)
   1c4e4:	e3110080 	tst	r1, #128	; 0x80
	BR.F |= flag;
   1c4e8:	e203306d 	and	r3, r3, #109	; 0x6d
   1c4ec:	13833080 	orrne	r3, r3, #128	; 0x80
	if (val)
   1c4f0:	e7922101 	ldr	r2, [r2, r1, lsl #2]
	BR.F &= ~flag;
   1c4f4:	e6af3073 	sxtb	r3, r3
	BR.F |= flag;
   1c4f8:	e20330a9 	and	r3, r3, #169	; 0xa9
	if (val)
   1c4fc:	e3520000 	cmp	r2, #0
	BR.F |= flag;
   1c500:	13833004 	orrne	r3, r3, #4
   1c504:	e5c03000 	strb	r3, [r0]
   1c508:	e5c01006 	strb	r1, [r0, #6]
}
   1c50c:	e12fff1e 	bx	lr
   1c510:	0004f000 	.word	0x0004f000

0001c514 <LD_off_nn_A>:
	ctx->tstates += 3;
   1c514:	e5903040 	ldr	r3, [r0, #64]	; 0x40
{
   1c518:	e92d4070 	push	{r4, r5, r6, lr}
   1c51c:	e1a04000 	mov	r4, r0
	write8(ctx, read16(ctx, ctx->PC), BR.A);
   1c520:	e1d051bc 	ldrh	r5, [r0, #28]
   1c524:	e2833003 	add	r3, r3, #3
   1c528:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   1c52c:	e1a01005 	mov	r1, r5
   1c530:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   1c534:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   1c538:	e12fff33 	blx	r3
	ctx->tstates += 3;
   1c53c:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	byte msb = read8(ctx, addr + 1);
   1c540:	e2851001 	add	r1, r5, #1
	ctx->tstates += 3;
   1c544:	e2833003 	add	r3, r3, #3
	return ctx->memRead(ctx->memParam, addr);	
   1c548:	e1a06000 	mov	r6, r0
   1c54c:	e6ff1071 	uxth	r1, r1
	ctx->tstates += 3;
   1c550:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   1c554:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   1c558:	e5943024 	ldr	r3, [r4, #36]	; 0x24
   1c55c:	e12fff33 	blx	r3
	ctx->tstates += 3;
   1c560:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	return msb << 8 | lsb;
   1c564:	e1861400 	orr	r1, r6, r0, lsl #8
	ctx->tstates += 3;
   1c568:	e2833003 	add	r3, r3, #3
   1c56c:	e5843040 	str	r3, [r4, #64]	; 0x40
   1c570:	e5d42001 	ldrb	r2, [r4, #1]
	ctx->memWrite(ctx->memParam, addr, val);	
   1c574:	e5943028 	ldr	r3, [r4, #40]	; 0x28
   1c578:	e6ff1071 	uxth	r1, r1
   1c57c:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   1c580:	e12fff33 	blx	r3
	ctx->PC += 2;
   1c584:	e1d431bc 	ldrh	r3, [r4, #28]
   1c588:	e2833002 	add	r3, r3, #2
   1c58c:	e1c431bc 	strh	r3, [r4, #28]
}
   1c590:	e8bd8070 	pop	{r4, r5, r6, pc}

0001c594 <LD_A_off_nn>:
	ctx->tstates += 3;
   1c594:	e5903040 	ldr	r3, [r0, #64]	; 0x40
{
   1c598:	e92d4070 	push	{r4, r5, r6, lr}
   1c59c:	e1a04000 	mov	r4, r0
	BR.A = read8(ctx, read16(ctx, ctx->PC));
   1c5a0:	e1d051bc 	ldrh	r5, [r0, #28]
   1c5a4:	e2833003 	add	r3, r3, #3
   1c5a8:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   1c5ac:	e1a01005 	mov	r1, r5
   1c5b0:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   1c5b4:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   1c5b8:	e12fff33 	blx	r3
	ctx->tstates += 3;
   1c5bc:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	byte msb = read8(ctx, addr + 1);
   1c5c0:	e2851001 	add	r1, r5, #1
	ctx->tstates += 3;
   1c5c4:	e2833003 	add	r3, r3, #3
	return ctx->memRead(ctx->memParam, addr);	
   1c5c8:	e1a06000 	mov	r6, r0
   1c5cc:	e6ff1071 	uxth	r1, r1
	ctx->tstates += 3;
   1c5d0:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   1c5d4:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   1c5d8:	e5943024 	ldr	r3, [r4, #36]	; 0x24
   1c5dc:	e12fff33 	blx	r3
	ctx->tstates += 3;
   1c5e0:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	return msb << 8 | lsb;
   1c5e4:	e1861400 	orr	r1, r6, r0, lsl #8
	ctx->tstates += 3;
   1c5e8:	e2833003 	add	r3, r3, #3
   1c5ec:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   1c5f0:	e6ff1071 	uxth	r1, r1
   1c5f4:	e5943024 	ldr	r3, [r4, #36]	; 0x24
   1c5f8:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   1c5fc:	e12fff33 	blx	r3
	ctx->PC += 2;
   1c600:	e1d431bc 	ldrh	r3, [r4, #28]
	BR.A = read8(ctx, read16(ctx, ctx->PC));
   1c604:	e5c40001 	strb	r0, [r4, #1]
	ctx->PC += 2;
   1c608:	e2833002 	add	r3, r3, #2
   1c60c:	e1c431bc 	strh	r3, [r4, #28]
}
   1c610:	e8bd8070 	pop	{r4, r5, r6, pc}

0001c614 <CALL_PO_off_nn>:
	ctx->tstates += 3;
   1c614:	e5903040 	ldr	r3, [r0, #64]	; 0x40
{
   1c618:	e92d4070 	push	{r4, r5, r6, lr}
   1c61c:	e1a04000 	mov	r4, r0
	ushort addr = read16(ctx, ctx->PC);
   1c620:	e1d051bc 	ldrh	r5, [r0, #28]
   1c624:	e2833003 	add	r3, r3, #3
   1c628:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   1c62c:	e1a01005 	mov	r1, r5
   1c630:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   1c634:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   1c638:	e12fff33 	blx	r3
	ctx->tstates += 3;
   1c63c:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	byte msb = read8(ctx, addr + 1);
   1c640:	e2851001 	add	r1, r5, #1
	ctx->tstates += 3;
   1c644:	e2833003 	add	r3, r3, #3
	return ctx->memRead(ctx->memParam, addr);	
   1c648:	e6ff1071 	uxth	r1, r1
	ctx->tstates += 3;
   1c64c:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   1c650:	e1a06000 	mov	r6, r0
   1c654:	e5943024 	ldr	r3, [r4, #36]	; 0x24
   1c658:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   1c65c:	e12fff33 	blx	r3
	ctx->PC += 2;
   1c660:	e1d411bc 	ldrh	r1, [r4, #28]
	return (BR.F & flag) != 0;
   1c664:	e5d43000 	ldrb	r3, [r4]
   1c668:	e2811002 	add	r1, r1, #2
   1c66c:	e6ff1071 	uxth	r1, r1
	if (condition(ctx, C_PO))
   1c670:	e3130004 	tst	r3, #4
	ctx->PC += 2;
   1c674:	e1c411bc 	strh	r1, [r4, #28]
	if (condition(ctx, C_PO))
   1c678:	18bd8070 	popne	{r4, r5, r6, pc}
   1c67c:	e1a05000 	mov	r5, r0
		ctx->tstates += 1;
   1c680:	e5943040 	ldr	r3, [r4, #64]	; 0x40
		doPush(ctx, ctx->PC);
   1c684:	e1a00004 	mov	r0, r4
		ctx->tstates += 1;
   1c688:	e2833001 	add	r3, r3, #1
   1c68c:	e5843040 	str	r3, [r4, #64]	; 0x40
	return msb << 8 | lsb;
   1c690:	e1866405 	orr	r6, r6, r5, lsl #8
		doPush(ctx, ctx->PC);
   1c694:	ebffaf50 	bl	83dc <doPush>
		ctx->PC = addr;
   1c698:	e1c461bc 	strh	r6, [r4, #28]
}
   1c69c:	e8bd8070 	pop	{r4, r5, r6, pc}

0001c6a0 <CALL_PE_off_nn>:
	ctx->tstates += 3;
   1c6a0:	e5903040 	ldr	r3, [r0, #64]	; 0x40
{
   1c6a4:	e92d4070 	push	{r4, r5, r6, lr}
   1c6a8:	e1a04000 	mov	r4, r0
	ushort addr = read16(ctx, ctx->PC);
   1c6ac:	e1d051bc 	ldrh	r5, [r0, #28]
   1c6b0:	e2833003 	add	r3, r3, #3
   1c6b4:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   1c6b8:	e1a01005 	mov	r1, r5
   1c6bc:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   1c6c0:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   1c6c4:	e12fff33 	blx	r3
	ctx->tstates += 3;
   1c6c8:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	byte msb = read8(ctx, addr + 1);
   1c6cc:	e2851001 	add	r1, r5, #1
	ctx->tstates += 3;
   1c6d0:	e2833003 	add	r3, r3, #3
	return ctx->memRead(ctx->memParam, addr);	
   1c6d4:	e6ff1071 	uxth	r1, r1
	ctx->tstates += 3;
   1c6d8:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   1c6dc:	e1a06000 	mov	r6, r0
   1c6e0:	e5943024 	ldr	r3, [r4, #36]	; 0x24
   1c6e4:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   1c6e8:	e12fff33 	blx	r3
	ctx->PC += 2;
   1c6ec:	e1d411bc 	ldrh	r1, [r4, #28]
	return (BR.F & flag) != 0;
   1c6f0:	e5d43000 	ldrb	r3, [r4]
   1c6f4:	e2811002 	add	r1, r1, #2
   1c6f8:	e6ff1071 	uxth	r1, r1
	if (condition(ctx, C_PE))
   1c6fc:	e3130004 	tst	r3, #4
	ctx->PC += 2;
   1c700:	e1c411bc 	strh	r1, [r4, #28]
	if (condition(ctx, C_PE))
   1c704:	08bd8070 	popeq	{r4, r5, r6, pc}
   1c708:	e1a05000 	mov	r5, r0
		ctx->tstates += 1;
   1c70c:	e5943040 	ldr	r3, [r4, #64]	; 0x40
		doPush(ctx, ctx->PC);
   1c710:	e1a00004 	mov	r0, r4
		ctx->tstates += 1;
   1c714:	e2833001 	add	r3, r3, #1
   1c718:	e5843040 	str	r3, [r4, #64]	; 0x40
	return msb << 8 | lsb;
   1c71c:	e1866405 	orr	r6, r6, r5, lsl #8
		doPush(ctx, ctx->PC);
   1c720:	ebffaf2d 	bl	83dc <doPush>
		ctx->PC = addr;
   1c724:	e1c461bc 	strh	r6, [r4, #28]
}
   1c728:	e8bd8070 	pop	{r4, r5, r6, pc}

0001c72c <SRL_A>:
	BR.A = doSR(ctx, BR.A, IA_L);
   1c72c:	e5d02001 	ldrb	r2, [r0, #1]
   1c730:	e5d03000 	ldrb	r3, [r0]
	if (val)
   1c734:	e3120001 	tst	r2, #1
    val >>= 1;
   1c738:	e1a020a2 	lsr	r2, r2, #1
	BR.F |= flag;
   1c73c:	13833001 	orrne	r3, r3, #1
	BR.F &= ~flag;
   1c740:	020330fe 	andeq	r3, r3, #254	; 0xfe
	if (val)
   1c744:	e3120020 	tst	r2, #32
	BR.F |= flag;
   1c748:	13833020 	orrne	r3, r3, #32
	BR.F &= ~flag;
   1c74c:	020330df 	andeq	r3, r3, #223	; 0xdf
	if (val)
   1c750:	e3120008 	tst	r2, #8
	BR.F |= flag;
   1c754:	13833008 	orrne	r3, r3, #8
	BR.F &= ~flag;
   1c758:	16af1073 	sxtbne	r1, r3
	if (val)
   1c75c:	1a000009 	bne	1c788 <SRL_A+0x5c>
	BR.F &= ~flag;
   1c760:	e6af3073 	sxtb	r3, r3
	if (val)
   1c764:	e3520000 	cmp	r2, #0
	BR.F &= ~flag;
   1c768:	e3c31008 	bic	r1, r3, #8
	if (val)
   1c76c:	1a000005 	bne	1c788 <SRL_A+0x5c>
	BR.F &= ~flag;
   1c770:	e2033065 	and	r3, r3, #101	; 0x65
	BR.F |= flag;
   1c774:	e3833040 	orr	r3, r3, #64	; 0x40
   1c778:	e3833004 	orr	r3, r3, #4
   1c77c:	e5c03000 	strb	r3, [r0]
   1c780:	e5c02001 	strb	r2, [r0, #1]
}
   1c784:	e12fff1e 	bx	lr
	VALFLAG(F_PV, parityBit[val]);
   1c788:	e59fc018 	ldr	ip, [pc, #24]	; 1c7a8 <SRL_A+0x7c>
	BR.F &= ~flag;
   1c78c:	e201302d 	and	r3, r1, #45	; 0x2d
	if (val)
   1c790:	e79cc102 	ldr	ip, [ip, r2, lsl #2]
   1c794:	e5c03000 	strb	r3, [r0]
   1c798:	e35c0000 	cmp	ip, #0
	BR.F &= ~flag;
   1c79c:	02013029 	andeq	r3, r1, #41	; 0x29
	if (val)
   1c7a0:	0afffff5 	beq	1c77c <SRL_A+0x50>
   1c7a4:	eafffff3 	b	1c778 <SRL_A+0x4c>
   1c7a8:	0004f000 	.word	0x0004f000

0001c7ac <SRL_B>:
	BR.B = doSR(ctx, BR.B, IA_L);
   1c7ac:	e5d02003 	ldrb	r2, [r0, #3]
   1c7b0:	e5d03000 	ldrb	r3, [r0]
   1c7b4:	e3120001 	tst	r2, #1
    val >>= 1;
   1c7b8:	e1a020a2 	lsr	r2, r2, #1
	BR.F |= flag;
   1c7bc:	13833001 	orrne	r3, r3, #1
	BR.F &= ~flag;
   1c7c0:	020330fe 	andeq	r3, r3, #254	; 0xfe
	if (val)
   1c7c4:	e3120020 	tst	r2, #32
	BR.F |= flag;
   1c7c8:	13833020 	orrne	r3, r3, #32
	BR.F &= ~flag;
   1c7cc:	020330df 	andeq	r3, r3, #223	; 0xdf
	if (val)
   1c7d0:	e3120008 	tst	r2, #8
	BR.F |= flag;
   1c7d4:	13833008 	orrne	r3, r3, #8
	BR.F &= ~flag;
   1c7d8:	16af1073 	sxtbne	r1, r3
	if (val)
   1c7dc:	1a000009 	bne	1c808 <SRL_B+0x5c>
	BR.F &= ~flag;
   1c7e0:	e6af3073 	sxtb	r3, r3
	if (val)
   1c7e4:	e3520000 	cmp	r2, #0
	BR.F &= ~flag;
   1c7e8:	e3c31008 	bic	r1, r3, #8
	if (val)
   1c7ec:	1a000005 	bne	1c808 <SRL_B+0x5c>
	BR.F &= ~flag;
   1c7f0:	e2033065 	and	r3, r3, #101	; 0x65
	BR.F |= flag;
   1c7f4:	e3833040 	orr	r3, r3, #64	; 0x40
   1c7f8:	e3833004 	orr	r3, r3, #4
   1c7fc:	e5c03000 	strb	r3, [r0]
   1c800:	e5c02003 	strb	r2, [r0, #3]
}
   1c804:	e12fff1e 	bx	lr
	VALFLAG(F_PV, parityBit[val]);
   1c808:	e59fc018 	ldr	ip, [pc, #24]	; 1c828 <SRL_B+0x7c>
	BR.F &= ~flag;
   1c80c:	e201302d 	and	r3, r1, #45	; 0x2d
	if (val)
   1c810:	e79cc102 	ldr	ip, [ip, r2, lsl #2]
   1c814:	e5c03000 	strb	r3, [r0]
   1c818:	e35c0000 	cmp	ip, #0
	BR.F &= ~flag;
   1c81c:	02013029 	andeq	r3, r1, #41	; 0x29
	if (val)
   1c820:	0afffff5 	beq	1c7fc <SRL_B+0x50>
   1c824:	eafffff3 	b	1c7f8 <SRL_B+0x4c>
   1c828:	0004f000 	.word	0x0004f000

0001c82c <SRL_C>:
	BR.C = doSR(ctx, BR.C, IA_L);
   1c82c:	e5d02002 	ldrb	r2, [r0, #2]
   1c830:	e5d03000 	ldrb	r3, [r0]
   1c834:	e3120001 	tst	r2, #1
    val >>= 1;
   1c838:	e1a020a2 	lsr	r2, r2, #1
	BR.F |= flag;
   1c83c:	13833001 	orrne	r3, r3, #1
	BR.F &= ~flag;
   1c840:	020330fe 	andeq	r3, r3, #254	; 0xfe
	if (val)
   1c844:	e3120020 	tst	r2, #32
	BR.F |= flag;
   1c848:	13833020 	orrne	r3, r3, #32
	BR.F &= ~flag;
   1c84c:	020330df 	andeq	r3, r3, #223	; 0xdf
	if (val)
   1c850:	e3120008 	tst	r2, #8
	BR.F |= flag;
   1c854:	13833008 	orrne	r3, r3, #8
	BR.F &= ~flag;
   1c858:	16af1073 	sxtbne	r1, r3
	if (val)
   1c85c:	1a000009 	bne	1c888 <SRL_C+0x5c>
	BR.F &= ~flag;
   1c860:	e6af3073 	sxtb	r3, r3
	if (val)
   1c864:	e3520000 	cmp	r2, #0
	BR.F &= ~flag;
   1c868:	e3c31008 	bic	r1, r3, #8
	if (val)
   1c86c:	1a000005 	bne	1c888 <SRL_C+0x5c>
	BR.F &= ~flag;
   1c870:	e2033065 	and	r3, r3, #101	; 0x65
	BR.F |= flag;
   1c874:	e3833040 	orr	r3, r3, #64	; 0x40
   1c878:	e3833004 	orr	r3, r3, #4
   1c87c:	e5c03000 	strb	r3, [r0]
   1c880:	e5c02002 	strb	r2, [r0, #2]
}
   1c884:	e12fff1e 	bx	lr
	VALFLAG(F_PV, parityBit[val]);
   1c888:	e59fc018 	ldr	ip, [pc, #24]	; 1c8a8 <SRL_C+0x7c>
	BR.F &= ~flag;
   1c88c:	e201302d 	and	r3, r1, #45	; 0x2d
	if (val)
   1c890:	e79cc102 	ldr	ip, [ip, r2, lsl #2]
   1c894:	e5c03000 	strb	r3, [r0]
   1c898:	e35c0000 	cmp	ip, #0
	BR.F &= ~flag;
   1c89c:	02013029 	andeq	r3, r1, #41	; 0x29
	if (val)
   1c8a0:	0afffff5 	beq	1c87c <SRL_C+0x50>
   1c8a4:	eafffff3 	b	1c878 <SRL_C+0x4c>
   1c8a8:	0004f000 	.word	0x0004f000

0001c8ac <SRL_D>:
	BR.D = doSR(ctx, BR.D, IA_L);
   1c8ac:	e5d02005 	ldrb	r2, [r0, #5]
   1c8b0:	e5d03000 	ldrb	r3, [r0]
   1c8b4:	e3120001 	tst	r2, #1
    val >>= 1;
   1c8b8:	e1a020a2 	lsr	r2, r2, #1
	BR.F |= flag;
   1c8bc:	13833001 	orrne	r3, r3, #1
	BR.F &= ~flag;
   1c8c0:	020330fe 	andeq	r3, r3, #254	; 0xfe
	if (val)
   1c8c4:	e3120020 	tst	r2, #32
	BR.F |= flag;
   1c8c8:	13833020 	orrne	r3, r3, #32
	BR.F &= ~flag;
   1c8cc:	020330df 	andeq	r3, r3, #223	; 0xdf
	if (val)
   1c8d0:	e3120008 	tst	r2, #8
	BR.F |= flag;
   1c8d4:	13833008 	orrne	r3, r3, #8
	BR.F &= ~flag;
   1c8d8:	16af1073 	sxtbne	r1, r3
	if (val)
   1c8dc:	1a000009 	bne	1c908 <SRL_D+0x5c>
	BR.F &= ~flag;
   1c8e0:	e6af3073 	sxtb	r3, r3
	if (val)
   1c8e4:	e3520000 	cmp	r2, #0
	BR.F &= ~flag;
   1c8e8:	e3c31008 	bic	r1, r3, #8
	if (val)
   1c8ec:	1a000005 	bne	1c908 <SRL_D+0x5c>
	BR.F &= ~flag;
   1c8f0:	e2033065 	and	r3, r3, #101	; 0x65
	BR.F |= flag;
   1c8f4:	e3833040 	orr	r3, r3, #64	; 0x40
   1c8f8:	e3833004 	orr	r3, r3, #4
   1c8fc:	e5c03000 	strb	r3, [r0]
   1c900:	e5c02005 	strb	r2, [r0, #5]
}
   1c904:	e12fff1e 	bx	lr
	VALFLAG(F_PV, parityBit[val]);
   1c908:	e59fc018 	ldr	ip, [pc, #24]	; 1c928 <SRL_D+0x7c>
	BR.F &= ~flag;
   1c90c:	e201302d 	and	r3, r1, #45	; 0x2d
	if (val)
   1c910:	e79cc102 	ldr	ip, [ip, r2, lsl #2]
   1c914:	e5c03000 	strb	r3, [r0]
   1c918:	e35c0000 	cmp	ip, #0
	BR.F &= ~flag;
   1c91c:	02013029 	andeq	r3, r1, #41	; 0x29
	if (val)
   1c920:	0afffff5 	beq	1c8fc <SRL_D+0x50>
   1c924:	eafffff3 	b	1c8f8 <SRL_D+0x4c>
   1c928:	0004f000 	.word	0x0004f000

0001c92c <SRL_E>:
	BR.E = doSR(ctx, BR.E, IA_L);
   1c92c:	e5d02004 	ldrb	r2, [r0, #4]
   1c930:	e5d03000 	ldrb	r3, [r0]
   1c934:	e3120001 	tst	r2, #1
    val >>= 1;
   1c938:	e1a020a2 	lsr	r2, r2, #1
	BR.F |= flag;
   1c93c:	13833001 	orrne	r3, r3, #1
	BR.F &= ~flag;
   1c940:	020330fe 	andeq	r3, r3, #254	; 0xfe
	if (val)
   1c944:	e3120020 	tst	r2, #32
	BR.F |= flag;
   1c948:	13833020 	orrne	r3, r3, #32
	BR.F &= ~flag;
   1c94c:	020330df 	andeq	r3, r3, #223	; 0xdf
	if (val)
   1c950:	e3120008 	tst	r2, #8
	BR.F |= flag;
   1c954:	13833008 	orrne	r3, r3, #8
	BR.F &= ~flag;
   1c958:	16af1073 	sxtbne	r1, r3
	if (val)
   1c95c:	1a000009 	bne	1c988 <SRL_E+0x5c>
	BR.F &= ~flag;
   1c960:	e6af3073 	sxtb	r3, r3
	if (val)
   1c964:	e3520000 	cmp	r2, #0
	BR.F &= ~flag;
   1c968:	e3c31008 	bic	r1, r3, #8
	if (val)
   1c96c:	1a000005 	bne	1c988 <SRL_E+0x5c>
	BR.F &= ~flag;
   1c970:	e2033065 	and	r3, r3, #101	; 0x65
	BR.F |= flag;
   1c974:	e3833040 	orr	r3, r3, #64	; 0x40
   1c978:	e3833004 	orr	r3, r3, #4
   1c97c:	e5c03000 	strb	r3, [r0]
   1c980:	e5c02004 	strb	r2, [r0, #4]
}
   1c984:	e12fff1e 	bx	lr
	VALFLAG(F_PV, parityBit[val]);
   1c988:	e59fc018 	ldr	ip, [pc, #24]	; 1c9a8 <SRL_E+0x7c>
	BR.F &= ~flag;
   1c98c:	e201302d 	and	r3, r1, #45	; 0x2d
	if (val)
   1c990:	e79cc102 	ldr	ip, [ip, r2, lsl #2]
   1c994:	e5c03000 	strb	r3, [r0]
   1c998:	e35c0000 	cmp	ip, #0
	BR.F &= ~flag;
   1c99c:	02013029 	andeq	r3, r1, #41	; 0x29
	if (val)
   1c9a0:	0afffff5 	beq	1c97c <SRL_E+0x50>
   1c9a4:	eafffff3 	b	1c978 <SRL_E+0x4c>
   1c9a8:	0004f000 	.word	0x0004f000

0001c9ac <SRL_H>:
	BR.H = doSR(ctx, BR.H, IA_L);
   1c9ac:	e5d02007 	ldrb	r2, [r0, #7]
   1c9b0:	e5d03000 	ldrb	r3, [r0]
   1c9b4:	e3120001 	tst	r2, #1
    val >>= 1;
   1c9b8:	e1a020a2 	lsr	r2, r2, #1
	BR.F |= flag;
   1c9bc:	13833001 	orrne	r3, r3, #1
	BR.F &= ~flag;
   1c9c0:	020330fe 	andeq	r3, r3, #254	; 0xfe
	if (val)
   1c9c4:	e3120020 	tst	r2, #32
	BR.F |= flag;
   1c9c8:	13833020 	orrne	r3, r3, #32
	BR.F &= ~flag;
   1c9cc:	020330df 	andeq	r3, r3, #223	; 0xdf
	if (val)
   1c9d0:	e3120008 	tst	r2, #8
	BR.F |= flag;
   1c9d4:	13833008 	orrne	r3, r3, #8
	BR.F &= ~flag;
   1c9d8:	16af1073 	sxtbne	r1, r3
	if (val)
   1c9dc:	1a000009 	bne	1ca08 <SRL_H+0x5c>
	BR.F &= ~flag;
   1c9e0:	e6af3073 	sxtb	r3, r3
	if (val)
   1c9e4:	e3520000 	cmp	r2, #0
	BR.F &= ~flag;
   1c9e8:	e3c31008 	bic	r1, r3, #8
	if (val)
   1c9ec:	1a000005 	bne	1ca08 <SRL_H+0x5c>
	BR.F &= ~flag;
   1c9f0:	e2033065 	and	r3, r3, #101	; 0x65
	BR.F |= flag;
   1c9f4:	e3833040 	orr	r3, r3, #64	; 0x40
   1c9f8:	e3833004 	orr	r3, r3, #4
   1c9fc:	e5c03000 	strb	r3, [r0]
   1ca00:	e5c02007 	strb	r2, [r0, #7]
}
   1ca04:	e12fff1e 	bx	lr
	VALFLAG(F_PV, parityBit[val]);
   1ca08:	e59fc018 	ldr	ip, [pc, #24]	; 1ca28 <SRL_H+0x7c>
	BR.F &= ~flag;
   1ca0c:	e201302d 	and	r3, r1, #45	; 0x2d
	if (val)
   1ca10:	e79cc102 	ldr	ip, [ip, r2, lsl #2]
   1ca14:	e5c03000 	strb	r3, [r0]
   1ca18:	e35c0000 	cmp	ip, #0
	BR.F &= ~flag;
   1ca1c:	02013029 	andeq	r3, r1, #41	; 0x29
	if (val)
   1ca20:	0afffff5 	beq	1c9fc <SRL_H+0x50>
   1ca24:	eafffff3 	b	1c9f8 <SRL_H+0x4c>
   1ca28:	0004f000 	.word	0x0004f000

0001ca2c <SRL_L>:
	BR.L = doSR(ctx, BR.L, IA_L);
   1ca2c:	e5d02006 	ldrb	r2, [r0, #6]
   1ca30:	e5d03000 	ldrb	r3, [r0]
   1ca34:	e3120001 	tst	r2, #1
    val >>= 1;
   1ca38:	e1a020a2 	lsr	r2, r2, #1
	BR.F |= flag;
   1ca3c:	13833001 	orrne	r3, r3, #1
	BR.F &= ~flag;
   1ca40:	020330fe 	andeq	r3, r3, #254	; 0xfe
	if (val)
   1ca44:	e3120020 	tst	r2, #32
	BR.F |= flag;
   1ca48:	13833020 	orrne	r3, r3, #32
	BR.F &= ~flag;
   1ca4c:	020330df 	andeq	r3, r3, #223	; 0xdf
	if (val)
   1ca50:	e3120008 	tst	r2, #8
	BR.F |= flag;
   1ca54:	13833008 	orrne	r3, r3, #8
	BR.F &= ~flag;
   1ca58:	16af1073 	sxtbne	r1, r3
	if (val)
   1ca5c:	1a000009 	bne	1ca88 <SRL_L+0x5c>
	BR.F &= ~flag;
   1ca60:	e6af3073 	sxtb	r3, r3
	if (val)
   1ca64:	e3520000 	cmp	r2, #0
	BR.F &= ~flag;
   1ca68:	e3c31008 	bic	r1, r3, #8
	if (val)
   1ca6c:	1a000005 	bne	1ca88 <SRL_L+0x5c>
	BR.F &= ~flag;
   1ca70:	e2033065 	and	r3, r3, #101	; 0x65
	BR.F |= flag;
   1ca74:	e3833040 	orr	r3, r3, #64	; 0x40
   1ca78:	e3833004 	orr	r3, r3, #4
   1ca7c:	e5c03000 	strb	r3, [r0]
   1ca80:	e5c02006 	strb	r2, [r0, #6]
}
   1ca84:	e12fff1e 	bx	lr
	VALFLAG(F_PV, parityBit[val]);
   1ca88:	e59fc018 	ldr	ip, [pc, #24]	; 1caa8 <SRL_L+0x7c>
	BR.F &= ~flag;
   1ca8c:	e201302d 	and	r3, r1, #45	; 0x2d
	if (val)
   1ca90:	e79cc102 	ldr	ip, [ip, r2, lsl #2]
   1ca94:	e5c03000 	strb	r3, [r0]
   1ca98:	e35c0000 	cmp	ip, #0
	BR.F &= ~flag;
   1ca9c:	02013029 	andeq	r3, r1, #41	; 0x29
	if (val)
   1caa0:	0afffff5 	beq	1ca7c <SRL_L+0x50>
   1caa4:	eafffff3 	b	1ca78 <SRL_L+0x4c>
   1caa8:	0004f000 	.word	0x0004f000

0001caac <CALL_off_nn>:
	ctx->tstates += 3;
   1caac:	e5903040 	ldr	r3, [r0, #64]	; 0x40
{
   1cab0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   1cab4:	e1a04000 	mov	r4, r0
	ushort addr = read16(ctx, ctx->PC);
   1cab8:	e1d051bc 	ldrh	r5, [r0, #28]
   1cabc:	e2833003 	add	r3, r3, #3
   1cac0:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   1cac4:	e1a01005 	mov	r1, r5
   1cac8:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   1cacc:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   1cad0:	e12fff33 	blx	r3
	ctx->tstates += 3;
   1cad4:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	byte msb = read8(ctx, addr + 1);
   1cad8:	e2851001 	add	r1, r5, #1
	ctx->tstates += 3;
   1cadc:	e2833003 	add	r3, r3, #3
	return ctx->memRead(ctx->memParam, addr);	
   1cae0:	e1a06000 	mov	r6, r0
   1cae4:	e6ff1071 	uxth	r1, r1
	ctx->tstates += 3;
   1cae8:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   1caec:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   1caf0:	e5943024 	ldr	r3, [r4, #36]	; 0x24
   1caf4:	e12fff33 	blx	r3
   1caf8:	e1a07000 	mov	r7, r0
	ctx->PC += 2;
   1cafc:	e1d451bc 	ldrh	r5, [r4, #28]
	WR.SP--;
   1cb00:	e1d410bc 	ldrh	r1, [r4, #12]
		ctx->tstates += 1;
   1cb04:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	ctx->PC += 2;
   1cb08:	e2855002 	add	r5, r5, #2
   1cb0c:	e2411001 	sub	r1, r1, #1
   1cb10:	e6ff5075 	uxth	r5, r5
   1cb14:	e6ff1071 	uxth	r1, r1
	ctx->tstates += 3;
   1cb18:	e2833004 	add	r3, r3, #4
   1cb1c:	e5843040 	str	r3, [r4, #64]	; 0x40
	ctx->memWrite(ctx->memParam, addr, val);	
   1cb20:	e1a02425 	lsr	r2, r5, #8
	WR.SP--;
   1cb24:	e1c410bc 	strh	r1, [r4, #12]
	ctx->memWrite(ctx->memParam, addr, val);	
   1cb28:	e5943028 	ldr	r3, [r4, #40]	; 0x28
   1cb2c:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   1cb30:	e1c451bc 	strh	r5, [r4, #28]
   1cb34:	e12fff33 	blx	r3
	WR.SP--;
   1cb38:	e1d410bc 	ldrh	r1, [r4, #12]
	ctx->tstates += 3;
   1cb3c:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	WR.SP--;
   1cb40:	e2411001 	sub	r1, r1, #1
	ctx->tstates += 3;
   1cb44:	e2833003 	add	r3, r3, #3
	WR.SP--;
   1cb48:	e6ff1071 	uxth	r1, r1
	ctx->tstates += 3;
   1cb4c:	e5843040 	str	r3, [r4, #64]	; 0x40
	ctx->memWrite(ctx->memParam, addr, val);	
   1cb50:	e6ef2075 	uxtb	r2, r5
	WR.SP--;
   1cb54:	e1c410bc 	strh	r1, [r4, #12]
	ctx->memWrite(ctx->memParam, addr, val);	
   1cb58:	e5943028 	ldr	r3, [r4, #40]	; 0x28
   1cb5c:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
	return msb << 8 | lsb;
   1cb60:	e1866407 	orr	r6, r6, r7, lsl #8
	ctx->memWrite(ctx->memParam, addr, val);	
   1cb64:	e12fff33 	blx	r3
		ctx->PC = addr;
   1cb68:	e1c461bc 	strh	r6, [r4, #28]
}
   1cb6c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

0001cb70 <SRA_L>:
	BR.L = doSR(ctx, BR.L, IA_A);
   1cb70:	e5d01006 	ldrb	r1, [r0, #6]
   1cb74:	e5d03000 	ldrb	r3, [r0]
   1cb78:	e2012080 	and	r2, r1, #128	; 0x80
        val |= b;
   1cb7c:	e18220a1 	orr	r2, r2, r1, lsr #1
   1cb80:	e6af2072 	sxtb	r2, r2
	if (val)
   1cb84:	e3110001 	tst	r1, #1
        val |= b;
   1cb88:	e6ef1072 	uxtb	r1, r2
	BR.F |= flag;
   1cb8c:	13833001 	orrne	r3, r3, #1
	BR.F &= ~flag;
   1cb90:	020330fe 	andeq	r3, r3, #254	; 0xfe
	if (val)
   1cb94:	e3110020 	tst	r1, #32
	BR.F |= flag;
   1cb98:	13833020 	orrne	r3, r3, #32
	BR.F &= ~flag;
   1cb9c:	020330df 	andeq	r3, r3, #223	; 0xdf
	if (val)
   1cba0:	e3110008 	tst	r1, #8
	BR.F |= flag;
   1cba4:	13833008 	orrne	r3, r3, #8
	BR.F &= ~flag;
   1cba8:	020330f7 	andeq	r3, r3, #247	; 0xf7
   1cbac:	e6af3073 	sxtb	r3, r3
	if (val)
   1cbb0:	e3520000 	cmp	r2, #0
	BR.F |= flag;
   1cbb4:	e203306d 	and	r3, r3, #109	; 0x6d
   1cbb8:	b3833080 	orrlt	r3, r3, #128	; 0x80
	if (val)
   1cbbc:	e3510000 	cmp	r1, #0
	BR.F |= flag;
   1cbc0:	03832040 	orreq	r2, r3, #64	; 0x40
	if (val)
   1cbc4:	0a00000a 	beq	1cbf4 <SRA_L+0x84>
	VALFLAG(F_PV, parityBit[val]);
   1cbc8:	e59f202c 	ldr	r2, [pc, #44]	; 1cbfc <SRA_L+0x8c>
	BR.F &= ~flag;
   1cbcc:	e6af3073 	sxtb	r3, r3
	if (val)
   1cbd0:	e792c101 	ldr	ip, [r2, r1, lsl #2]
	BR.F &= ~flag;
   1cbd4:	e20320ad 	and	r2, r3, #173	; 0xad
	if (val)
   1cbd8:	e35c0000 	cmp	ip, #0
   1cbdc:	e5c02000 	strb	r2, [r0]
	BR.F &= ~flag;
   1cbe0:	020330a9 	andeq	r3, r3, #169	; 0xa9
	if (val)
   1cbe4:	1a000002 	bne	1cbf4 <SRA_L+0x84>
   1cbe8:	e5c03000 	strb	r3, [r0]
   1cbec:	e5c01006 	strb	r1, [r0, #6]
}
   1cbf0:	e12fff1e 	bx	lr
	BR.F |= flag;
   1cbf4:	e3823004 	orr	r3, r2, #4
   1cbf8:	eafffffa 	b	1cbe8 <SRA_L+0x78>
   1cbfc:	0004f000 	.word	0x0004f000

0001cc00 <SRA_A>:
	BR.A = doSR(ctx, BR.A, IA_A);
   1cc00:	e5d01001 	ldrb	r1, [r0, #1]
   1cc04:	e5d03000 	ldrb	r3, [r0]
   1cc08:	e2012080 	and	r2, r1, #128	; 0x80
        val |= b;
   1cc0c:	e18220a1 	orr	r2, r2, r1, lsr #1
   1cc10:	e6af2072 	sxtb	r2, r2
	if (val)
   1cc14:	e3110001 	tst	r1, #1
        val |= b;
   1cc18:	e6ef1072 	uxtb	r1, r2
	BR.F |= flag;
   1cc1c:	13833001 	orrne	r3, r3, #1
	BR.F &= ~flag;
   1cc20:	020330fe 	andeq	r3, r3, #254	; 0xfe
	if (val)
   1cc24:	e3110020 	tst	r1, #32
	BR.F |= flag;
   1cc28:	13833020 	orrne	r3, r3, #32
	BR.F &= ~flag;
   1cc2c:	020330df 	andeq	r3, r3, #223	; 0xdf
	if (val)
   1cc30:	e3110008 	tst	r1, #8
	BR.F |= flag;
   1cc34:	13833008 	orrne	r3, r3, #8
	BR.F &= ~flag;
   1cc38:	020330f7 	andeq	r3, r3, #247	; 0xf7
   1cc3c:	e6af3073 	sxtb	r3, r3
	if (val)
   1cc40:	e3520000 	cmp	r2, #0
	BR.F |= flag;
   1cc44:	e203306d 	and	r3, r3, #109	; 0x6d
   1cc48:	b3833080 	orrlt	r3, r3, #128	; 0x80
	if (val)
   1cc4c:	e3510000 	cmp	r1, #0
	BR.F |= flag;
   1cc50:	03832040 	orreq	r2, r3, #64	; 0x40
	if (val)
   1cc54:	0a00000a 	beq	1cc84 <SRA_A+0x84>
	VALFLAG(F_PV, parityBit[val]);
   1cc58:	e59f202c 	ldr	r2, [pc, #44]	; 1cc8c <SRA_A+0x8c>
	BR.F &= ~flag;
   1cc5c:	e6af3073 	sxtb	r3, r3
	if (val)
   1cc60:	e792c101 	ldr	ip, [r2, r1, lsl #2]
	BR.F &= ~flag;
   1cc64:	e20320ad 	and	r2, r3, #173	; 0xad
	if (val)
   1cc68:	e35c0000 	cmp	ip, #0
   1cc6c:	e5c02000 	strb	r2, [r0]
	BR.F &= ~flag;
   1cc70:	020330a9 	andeq	r3, r3, #169	; 0xa9
	if (val)
   1cc74:	1a000002 	bne	1cc84 <SRA_A+0x84>
   1cc78:	e5c03000 	strb	r3, [r0]
   1cc7c:	e5c01001 	strb	r1, [r0, #1]
}
   1cc80:	e12fff1e 	bx	lr
	BR.F |= flag;
   1cc84:	e3823004 	orr	r3, r2, #4
   1cc88:	eafffffa 	b	1cc78 <SRA_A+0x78>
   1cc8c:	0004f000 	.word	0x0004f000

0001cc90 <SRA_B>:
	BR.B = doSR(ctx, BR.B, IA_A);
   1cc90:	e5d01003 	ldrb	r1, [r0, #3]
   1cc94:	e5d03000 	ldrb	r3, [r0]
   1cc98:	e2012080 	and	r2, r1, #128	; 0x80
        val |= b;
   1cc9c:	e18220a1 	orr	r2, r2, r1, lsr #1
   1cca0:	e6af2072 	sxtb	r2, r2
	if (val)
   1cca4:	e3110001 	tst	r1, #1
        val |= b;
   1cca8:	e6ef1072 	uxtb	r1, r2
	BR.F |= flag;
   1ccac:	13833001 	orrne	r3, r3, #1
	BR.F &= ~flag;
   1ccb0:	020330fe 	andeq	r3, r3, #254	; 0xfe
	if (val)
   1ccb4:	e3110020 	tst	r1, #32
	BR.F |= flag;
   1ccb8:	13833020 	orrne	r3, r3, #32
	BR.F &= ~flag;
   1ccbc:	020330df 	andeq	r3, r3, #223	; 0xdf
	if (val)
   1ccc0:	e3110008 	tst	r1, #8
	BR.F |= flag;
   1ccc4:	13833008 	orrne	r3, r3, #8
	BR.F &= ~flag;
   1ccc8:	020330f7 	andeq	r3, r3, #247	; 0xf7
   1cccc:	e6af3073 	sxtb	r3, r3
	if (val)
   1ccd0:	e3520000 	cmp	r2, #0
	BR.F |= flag;
   1ccd4:	e203306d 	and	r3, r3, #109	; 0x6d
   1ccd8:	b3833080 	orrlt	r3, r3, #128	; 0x80
	if (val)
   1ccdc:	e3510000 	cmp	r1, #0
	BR.F |= flag;
   1cce0:	03832040 	orreq	r2, r3, #64	; 0x40
	if (val)
   1cce4:	0a00000a 	beq	1cd14 <SRA_B+0x84>
	VALFLAG(F_PV, parityBit[val]);
   1cce8:	e59f202c 	ldr	r2, [pc, #44]	; 1cd1c <SRA_B+0x8c>
	BR.F &= ~flag;
   1ccec:	e6af3073 	sxtb	r3, r3
	if (val)
   1ccf0:	e792c101 	ldr	ip, [r2, r1, lsl #2]
	BR.F &= ~flag;
   1ccf4:	e20320ad 	and	r2, r3, #173	; 0xad
	if (val)
   1ccf8:	e35c0000 	cmp	ip, #0
   1ccfc:	e5c02000 	strb	r2, [r0]
	BR.F &= ~flag;
   1cd00:	020330a9 	andeq	r3, r3, #169	; 0xa9
	if (val)
   1cd04:	1a000002 	bne	1cd14 <SRA_B+0x84>
   1cd08:	e5c03000 	strb	r3, [r0]
   1cd0c:	e5c01003 	strb	r1, [r0, #3]
}
   1cd10:	e12fff1e 	bx	lr
	BR.F |= flag;
   1cd14:	e3823004 	orr	r3, r2, #4
   1cd18:	eafffffa 	b	1cd08 <SRA_B+0x78>
   1cd1c:	0004f000 	.word	0x0004f000

0001cd20 <SRA_C>:
	BR.C = doSR(ctx, BR.C, IA_A);
   1cd20:	e5d01002 	ldrb	r1, [r0, #2]
   1cd24:	e5d03000 	ldrb	r3, [r0]
   1cd28:	e2012080 	and	r2, r1, #128	; 0x80
        val |= b;
   1cd2c:	e18220a1 	orr	r2, r2, r1, lsr #1
   1cd30:	e6af2072 	sxtb	r2, r2
	if (val)
   1cd34:	e3110001 	tst	r1, #1
        val |= b;
   1cd38:	e6ef1072 	uxtb	r1, r2
	BR.F |= flag;
   1cd3c:	13833001 	orrne	r3, r3, #1
	BR.F &= ~flag;
   1cd40:	020330fe 	andeq	r3, r3, #254	; 0xfe
	if (val)
   1cd44:	e3110020 	tst	r1, #32
	BR.F |= flag;
   1cd48:	13833020 	orrne	r3, r3, #32
	BR.F &= ~flag;
   1cd4c:	020330df 	andeq	r3, r3, #223	; 0xdf
	if (val)
   1cd50:	e3110008 	tst	r1, #8
	BR.F |= flag;
   1cd54:	13833008 	orrne	r3, r3, #8
	BR.F &= ~flag;
   1cd58:	020330f7 	andeq	r3, r3, #247	; 0xf7
   1cd5c:	e6af3073 	sxtb	r3, r3
	if (val)
   1cd60:	e3520000 	cmp	r2, #0
	BR.F |= flag;
   1cd64:	e203306d 	and	r3, r3, #109	; 0x6d
   1cd68:	b3833080 	orrlt	r3, r3, #128	; 0x80
	if (val)
   1cd6c:	e3510000 	cmp	r1, #0
	BR.F |= flag;
   1cd70:	03832040 	orreq	r2, r3, #64	; 0x40
	if (val)
   1cd74:	0a00000a 	beq	1cda4 <SRA_C+0x84>
	VALFLAG(F_PV, parityBit[val]);
   1cd78:	e59f202c 	ldr	r2, [pc, #44]	; 1cdac <SRA_C+0x8c>
	BR.F &= ~flag;
   1cd7c:	e6af3073 	sxtb	r3, r3
	if (val)
   1cd80:	e792c101 	ldr	ip, [r2, r1, lsl #2]
	BR.F &= ~flag;
   1cd84:	e20320ad 	and	r2, r3, #173	; 0xad
	if (val)
   1cd88:	e35c0000 	cmp	ip, #0
   1cd8c:	e5c02000 	strb	r2, [r0]
	BR.F &= ~flag;
   1cd90:	020330a9 	andeq	r3, r3, #169	; 0xa9
	if (val)
   1cd94:	1a000002 	bne	1cda4 <SRA_C+0x84>
   1cd98:	e5c03000 	strb	r3, [r0]
   1cd9c:	e5c01002 	strb	r1, [r0, #2]
}
   1cda0:	e12fff1e 	bx	lr
	BR.F |= flag;
   1cda4:	e3823004 	orr	r3, r2, #4
   1cda8:	eafffffa 	b	1cd98 <SRA_C+0x78>
   1cdac:	0004f000 	.word	0x0004f000

0001cdb0 <SRA_D>:
	BR.D = doSR(ctx, BR.D, IA_A);
   1cdb0:	e5d01005 	ldrb	r1, [r0, #5]
   1cdb4:	e5d03000 	ldrb	r3, [r0]
   1cdb8:	e2012080 	and	r2, r1, #128	; 0x80
        val |= b;
   1cdbc:	e18220a1 	orr	r2, r2, r1, lsr #1
   1cdc0:	e6af2072 	sxtb	r2, r2
	if (val)
   1cdc4:	e3110001 	tst	r1, #1
        val |= b;
   1cdc8:	e6ef1072 	uxtb	r1, r2
	BR.F |= flag;
   1cdcc:	13833001 	orrne	r3, r3, #1
	BR.F &= ~flag;
   1cdd0:	020330fe 	andeq	r3, r3, #254	; 0xfe
	if (val)
   1cdd4:	e3110020 	tst	r1, #32
	BR.F |= flag;
   1cdd8:	13833020 	orrne	r3, r3, #32
	BR.F &= ~flag;
   1cddc:	020330df 	andeq	r3, r3, #223	; 0xdf
	if (val)
   1cde0:	e3110008 	tst	r1, #8
	BR.F |= flag;
   1cde4:	13833008 	orrne	r3, r3, #8
	BR.F &= ~flag;
   1cde8:	020330f7 	andeq	r3, r3, #247	; 0xf7
   1cdec:	e6af3073 	sxtb	r3, r3
	if (val)
   1cdf0:	e3520000 	cmp	r2, #0
	BR.F |= flag;
   1cdf4:	e203306d 	and	r3, r3, #109	; 0x6d
   1cdf8:	b3833080 	orrlt	r3, r3, #128	; 0x80
	if (val)
   1cdfc:	e3510000 	cmp	r1, #0
	BR.F |= flag;
   1ce00:	03832040 	orreq	r2, r3, #64	; 0x40
	if (val)
   1ce04:	0a00000a 	beq	1ce34 <SRA_D+0x84>
	VALFLAG(F_PV, parityBit[val]);
   1ce08:	e59f202c 	ldr	r2, [pc, #44]	; 1ce3c <SRA_D+0x8c>
	BR.F &= ~flag;
   1ce0c:	e6af3073 	sxtb	r3, r3
	if (val)
   1ce10:	e792c101 	ldr	ip, [r2, r1, lsl #2]
	BR.F &= ~flag;
   1ce14:	e20320ad 	and	r2, r3, #173	; 0xad
	if (val)
   1ce18:	e35c0000 	cmp	ip, #0
   1ce1c:	e5c02000 	strb	r2, [r0]
	BR.F &= ~flag;
   1ce20:	020330a9 	andeq	r3, r3, #169	; 0xa9
	if (val)
   1ce24:	1a000002 	bne	1ce34 <SRA_D+0x84>
   1ce28:	e5c03000 	strb	r3, [r0]
   1ce2c:	e5c01005 	strb	r1, [r0, #5]
}
   1ce30:	e12fff1e 	bx	lr
	BR.F |= flag;
   1ce34:	e3823004 	orr	r3, r2, #4
   1ce38:	eafffffa 	b	1ce28 <SRA_D+0x78>
   1ce3c:	0004f000 	.word	0x0004f000

0001ce40 <SRA_E>:
	BR.E = doSR(ctx, BR.E, IA_A);
   1ce40:	e5d01004 	ldrb	r1, [r0, #4]
   1ce44:	e5d03000 	ldrb	r3, [r0]
   1ce48:	e2012080 	and	r2, r1, #128	; 0x80
        val |= b;
   1ce4c:	e18220a1 	orr	r2, r2, r1, lsr #1
   1ce50:	e6af2072 	sxtb	r2, r2
	if (val)
   1ce54:	e3110001 	tst	r1, #1
        val |= b;
   1ce58:	e6ef1072 	uxtb	r1, r2
	BR.F |= flag;
   1ce5c:	13833001 	orrne	r3, r3, #1
	BR.F &= ~flag;
   1ce60:	020330fe 	andeq	r3, r3, #254	; 0xfe
	if (val)
   1ce64:	e3110020 	tst	r1, #32
	BR.F |= flag;
   1ce68:	13833020 	orrne	r3, r3, #32
	BR.F &= ~flag;
   1ce6c:	020330df 	andeq	r3, r3, #223	; 0xdf
	if (val)
   1ce70:	e3110008 	tst	r1, #8
	BR.F |= flag;
   1ce74:	13833008 	orrne	r3, r3, #8
	BR.F &= ~flag;
   1ce78:	020330f7 	andeq	r3, r3, #247	; 0xf7
   1ce7c:	e6af3073 	sxtb	r3, r3
	if (val)
   1ce80:	e3520000 	cmp	r2, #0
	BR.F |= flag;
   1ce84:	e203306d 	and	r3, r3, #109	; 0x6d
   1ce88:	b3833080 	orrlt	r3, r3, #128	; 0x80
	if (val)
   1ce8c:	e3510000 	cmp	r1, #0
	BR.F |= flag;
   1ce90:	03832040 	orreq	r2, r3, #64	; 0x40
	if (val)
   1ce94:	0a00000a 	beq	1cec4 <SRA_E+0x84>
	VALFLAG(F_PV, parityBit[val]);
   1ce98:	e59f202c 	ldr	r2, [pc, #44]	; 1cecc <SRA_E+0x8c>
	BR.F &= ~flag;
   1ce9c:	e6af3073 	sxtb	r3, r3
	if (val)
   1cea0:	e792c101 	ldr	ip, [r2, r1, lsl #2]
	BR.F &= ~flag;
   1cea4:	e20320ad 	and	r2, r3, #173	; 0xad
	if (val)
   1cea8:	e35c0000 	cmp	ip, #0
   1ceac:	e5c02000 	strb	r2, [r0]
	BR.F &= ~flag;
   1ceb0:	020330a9 	andeq	r3, r3, #169	; 0xa9
	if (val)
   1ceb4:	1a000002 	bne	1cec4 <SRA_E+0x84>
   1ceb8:	e5c03000 	strb	r3, [r0]
   1cebc:	e5c01004 	strb	r1, [r0, #4]
}
   1cec0:	e12fff1e 	bx	lr
	BR.F |= flag;
   1cec4:	e3823004 	orr	r3, r2, #4
   1cec8:	eafffffa 	b	1ceb8 <SRA_E+0x78>
   1cecc:	0004f000 	.word	0x0004f000

0001ced0 <SRA_H>:
	BR.H = doSR(ctx, BR.H, IA_A);
   1ced0:	e5d01007 	ldrb	r1, [r0, #7]
   1ced4:	e5d03000 	ldrb	r3, [r0]
   1ced8:	e2012080 	and	r2, r1, #128	; 0x80
        val |= b;
   1cedc:	e18220a1 	orr	r2, r2, r1, lsr #1
   1cee0:	e6af2072 	sxtb	r2, r2
	if (val)
   1cee4:	e3110001 	tst	r1, #1
        val |= b;
   1cee8:	e6ef1072 	uxtb	r1, r2
	BR.F |= flag;
   1ceec:	13833001 	orrne	r3, r3, #1
	BR.F &= ~flag;
   1cef0:	020330fe 	andeq	r3, r3, #254	; 0xfe
	if (val)
   1cef4:	e3110020 	tst	r1, #32
	BR.F |= flag;
   1cef8:	13833020 	orrne	r3, r3, #32
	BR.F &= ~flag;
   1cefc:	020330df 	andeq	r3, r3, #223	; 0xdf
	if (val)
   1cf00:	e3110008 	tst	r1, #8
	BR.F |= flag;
   1cf04:	13833008 	orrne	r3, r3, #8
	BR.F &= ~flag;
   1cf08:	020330f7 	andeq	r3, r3, #247	; 0xf7
   1cf0c:	e6af3073 	sxtb	r3, r3
	if (val)
   1cf10:	e3520000 	cmp	r2, #0
	BR.F |= flag;
   1cf14:	e203306d 	and	r3, r3, #109	; 0x6d
   1cf18:	b3833080 	orrlt	r3, r3, #128	; 0x80
	if (val)
   1cf1c:	e3510000 	cmp	r1, #0
	BR.F |= flag;
   1cf20:	03832040 	orreq	r2, r3, #64	; 0x40
	if (val)
   1cf24:	0a00000a 	beq	1cf54 <SRA_H+0x84>
	VALFLAG(F_PV, parityBit[val]);
   1cf28:	e59f202c 	ldr	r2, [pc, #44]	; 1cf5c <SRA_H+0x8c>
	BR.F &= ~flag;
   1cf2c:	e6af3073 	sxtb	r3, r3
	if (val)
   1cf30:	e792c101 	ldr	ip, [r2, r1, lsl #2]
	BR.F &= ~flag;
   1cf34:	e20320ad 	and	r2, r3, #173	; 0xad
	if (val)
   1cf38:	e35c0000 	cmp	ip, #0
   1cf3c:	e5c02000 	strb	r2, [r0]
	BR.F &= ~flag;
   1cf40:	020330a9 	andeq	r3, r3, #169	; 0xa9
	if (val)
   1cf44:	1a000002 	bne	1cf54 <SRA_H+0x84>
   1cf48:	e5c03000 	strb	r3, [r0]
   1cf4c:	e5c01007 	strb	r1, [r0, #7]
}
   1cf50:	e12fff1e 	bx	lr
	BR.F |= flag;
   1cf54:	e3823004 	orr	r3, r2, #4
   1cf58:	eafffffa 	b	1cf48 <SRA_H+0x78>
   1cf5c:	0004f000 	.word	0x0004f000

0001cf60 <RLC_D>:
	BR.D = doRLC(ctx, 1, BR.D);
   1cf60:	e5d03005 	ldrb	r3, [r0, #5]
{
   1cf64:	e92d4070 	push	{r4, r5, r6, lr}
	if (val)
   1cf68:	e3130080 	tst	r3, #128	; 0x80
	BR.F |= flag;
   1cf6c:	13a01001 	movne	r1, #1
   1cf70:	03a01000 	moveq	r1, #0
    val <<= 1;
   1cf74:	e1a04083 	lsl	r4, r3, #1
   1cf78:	e5d02000 	ldrb	r2, [r0]
   1cf7c:	e6ef4074 	uxtb	r4, r4
    val |= (byte)GETFLAG(F_C);
   1cf80:	e1844001 	orr	r4, r4, r1
	BR.F |= flag;
   1cf84:	13822001 	orrne	r2, r2, #1
	BR.F &= ~flag;
   1cf88:	020220fe 	andeq	r2, r2, #254	; 0xfe
	if (val)
   1cf8c:	e3140020 	tst	r4, #32
	BR.F |= flag;
   1cf90:	13823020 	orrne	r3, r2, #32
	BR.F &= ~flag;
   1cf94:	020230df 	andeq	r3, r2, #223	; 0xdf
	if (val)
   1cf98:	e3140008 	tst	r4, #8
	BR.F |= flag;
   1cf9c:	13833008 	orrne	r3, r3, #8
	BR.F &= ~flag;
   1cfa0:	020330f7 	andeq	r3, r3, #247	; 0xf7
   1cfa4:	e3c33012 	bic	r3, r3, #18
   1cfa8:	e5c03000 	strb	r3, [r0]
        adjustFlagSZP(ctx, val);
   1cfac:	e1a01004 	mov	r1, r4
   1cfb0:	e1a05000 	mov	r5, r0
   1cfb4:	ebffacd1 	bl	8300 <adjustFlagSZP>
	BR.D = doRLC(ctx, 1, BR.D);
   1cfb8:	e5c04005 	strb	r4, [r0, #5]
}
   1cfbc:	e8bd8070 	pop	{r4, r5, r6, pc}

0001cfc0 <RLC_E>:
	BR.E = doRLC(ctx, 1, BR.E);
   1cfc0:	e5d03004 	ldrb	r3, [r0, #4]
{
   1cfc4:	e92d4070 	push	{r4, r5, r6, lr}
	if (val)
   1cfc8:	e3130080 	tst	r3, #128	; 0x80
	BR.F |= flag;
   1cfcc:	13a01001 	movne	r1, #1
   1cfd0:	03a01000 	moveq	r1, #0
    val <<= 1;
   1cfd4:	e1a04083 	lsl	r4, r3, #1
   1cfd8:	e5d02000 	ldrb	r2, [r0]
   1cfdc:	e6ef4074 	uxtb	r4, r4
    val |= (byte)GETFLAG(F_C);
   1cfe0:	e1844001 	orr	r4, r4, r1
	BR.F |= flag;
   1cfe4:	13822001 	orrne	r2, r2, #1
	BR.F &= ~flag;
   1cfe8:	020220fe 	andeq	r2, r2, #254	; 0xfe
	if (val)
   1cfec:	e3140020 	tst	r4, #32
	BR.F |= flag;
   1cff0:	13823020 	orrne	r3, r2, #32
	BR.F &= ~flag;
   1cff4:	020230df 	andeq	r3, r2, #223	; 0xdf
	if (val)
   1cff8:	e3140008 	tst	r4, #8
	BR.F |= flag;
   1cffc:	13833008 	orrne	r3, r3, #8
	BR.F &= ~flag;
   1d000:	020330f7 	andeq	r3, r3, #247	; 0xf7
   1d004:	e3c33012 	bic	r3, r3, #18
   1d008:	e5c03000 	strb	r3, [r0]
        adjustFlagSZP(ctx, val);
   1d00c:	e1a01004 	mov	r1, r4
   1d010:	e1a05000 	mov	r5, r0
   1d014:	ebffacb9 	bl	8300 <adjustFlagSZP>
	BR.E = doRLC(ctx, 1, BR.E);
   1d018:	e5c04004 	strb	r4, [r0, #4]
}
   1d01c:	e8bd8070 	pop	{r4, r5, r6, pc}

0001d020 <RLC_L>:
	BR.L = doRLC(ctx, 1, BR.L);
   1d020:	e5d03006 	ldrb	r3, [r0, #6]
{
   1d024:	e92d4070 	push	{r4, r5, r6, lr}
	if (val)
   1d028:	e3130080 	tst	r3, #128	; 0x80
	BR.F |= flag;
   1d02c:	13a01001 	movne	r1, #1
   1d030:	03a01000 	moveq	r1, #0
    val <<= 1;
   1d034:	e1a04083 	lsl	r4, r3, #1
   1d038:	e5d02000 	ldrb	r2, [r0]
   1d03c:	e6ef4074 	uxtb	r4, r4
    val |= (byte)GETFLAG(F_C);
   1d040:	e1844001 	orr	r4, r4, r1
	BR.F |= flag;
   1d044:	13822001 	orrne	r2, r2, #1
	BR.F &= ~flag;
   1d048:	020220fe 	andeq	r2, r2, #254	; 0xfe
	if (val)
   1d04c:	e3140020 	tst	r4, #32
	BR.F |= flag;
   1d050:	13823020 	orrne	r3, r2, #32
	BR.F &= ~flag;
   1d054:	020230df 	andeq	r3, r2, #223	; 0xdf
	if (val)
   1d058:	e3140008 	tst	r4, #8
	BR.F |= flag;
   1d05c:	13833008 	orrne	r3, r3, #8
	BR.F &= ~flag;
   1d060:	020330f7 	andeq	r3, r3, #247	; 0xf7
   1d064:	e3c33012 	bic	r3, r3, #18
   1d068:	e5c03000 	strb	r3, [r0]
        adjustFlagSZP(ctx, val);
   1d06c:	e1a01004 	mov	r1, r4
   1d070:	e1a05000 	mov	r5, r0
   1d074:	ebffaca1 	bl	8300 <adjustFlagSZP>
	BR.L = doRLC(ctx, 1, BR.L);
   1d078:	e5c04006 	strb	r4, [r0, #6]
}
   1d07c:	e8bd8070 	pop	{r4, r5, r6, pc}

0001d080 <RL_A>:
	BR.A = doRL(ctx, 1, BR.A);
   1d080:	e5d02001 	ldrb	r2, [r0, #1]
   1d084:	e5d03000 	ldrb	r3, [r0]
	if (val)
   1d088:	e3120080 	tst	r2, #128	; 0x80
    val <<= 1;
   1d08c:	e1a02082 	lsl	r2, r2, #1
{
   1d090:	e92d4070 	push	{r4, r5, r6, lr}
   1d094:	e6ef2072 	uxtb	r2, r2
	return (BR.F & flag) != 0;
   1d098:	e2034001 	and	r4, r3, #1
    val |= (byte)CY;
   1d09c:	e1844002 	orr	r4, r4, r2
	BR.F |= flag;
   1d0a0:	13833001 	orrne	r3, r3, #1
	BR.F &= ~flag;
   1d0a4:	020330fe 	andeq	r3, r3, #254	; 0xfe
	if (val)
   1d0a8:	e3140020 	tst	r4, #32
	BR.F |= flag;
   1d0ac:	13833020 	orrne	r3, r3, #32
	BR.F &= ~flag;
   1d0b0:	020330df 	andeq	r3, r3, #223	; 0xdf
	if (val)
   1d0b4:	e3140008 	tst	r4, #8
	BR.F |= flag;
   1d0b8:	13833008 	orrne	r3, r3, #8
	BR.F &= ~flag;
   1d0bc:	020330f7 	andeq	r3, r3, #247	; 0xf7
   1d0c0:	e3c33012 	bic	r3, r3, #18
   1d0c4:	e5c03000 	strb	r3, [r0]
        adjustFlagSZP(ctx, val);
   1d0c8:	e1a01004 	mov	r1, r4
   1d0cc:	e1a05000 	mov	r5, r0
   1d0d0:	ebffac8a 	bl	8300 <adjustFlagSZP>
	BR.A = doRL(ctx, 1, BR.A);
   1d0d4:	e5c04001 	strb	r4, [r0, #1]
}
   1d0d8:	e8bd8070 	pop	{r4, r5, r6, pc}

0001d0dc <RLC_H>:
	BR.H = doRLC(ctx, 1, BR.H);
   1d0dc:	e5d03007 	ldrb	r3, [r0, #7]
{
   1d0e0:	e92d4070 	push	{r4, r5, r6, lr}
	if (val)
   1d0e4:	e3130080 	tst	r3, #128	; 0x80
	BR.F |= flag;
   1d0e8:	13a01001 	movne	r1, #1
   1d0ec:	03a01000 	moveq	r1, #0
    val <<= 1;
   1d0f0:	e1a04083 	lsl	r4, r3, #1
   1d0f4:	e5d02000 	ldrb	r2, [r0]
   1d0f8:	e6ef4074 	uxtb	r4, r4
    val |= (byte)GETFLAG(F_C);
   1d0fc:	e1844001 	orr	r4, r4, r1
	BR.F |= flag;
   1d100:	13822001 	orrne	r2, r2, #1
	BR.F &= ~flag;
   1d104:	020220fe 	andeq	r2, r2, #254	; 0xfe
	if (val)
   1d108:	e3140020 	tst	r4, #32
	BR.F |= flag;
   1d10c:	13823020 	orrne	r3, r2, #32
	BR.F &= ~flag;
   1d110:	020230df 	andeq	r3, r2, #223	; 0xdf
	if (val)
   1d114:	e3140008 	tst	r4, #8
	BR.F |= flag;
   1d118:	13833008 	orrne	r3, r3, #8
	BR.F &= ~flag;
   1d11c:	020330f7 	andeq	r3, r3, #247	; 0xf7
   1d120:	e3c33012 	bic	r3, r3, #18
   1d124:	e5c03000 	strb	r3, [r0]
        adjustFlagSZP(ctx, val);
   1d128:	e1a01004 	mov	r1, r4
   1d12c:	e1a05000 	mov	r5, r0
   1d130:	ebffac72 	bl	8300 <adjustFlagSZP>
	BR.H = doRLC(ctx, 1, BR.H);
   1d134:	e5c04007 	strb	r4, [r0, #7]
}
   1d138:	e8bd8070 	pop	{r4, r5, r6, pc}

0001d13c <RL_B>:
	BR.B = doRL(ctx, 1, BR.B);
   1d13c:	e5d02003 	ldrb	r2, [r0, #3]
   1d140:	e5d03000 	ldrb	r3, [r0]
	if (val)
   1d144:	e3120080 	tst	r2, #128	; 0x80
    val <<= 1;
   1d148:	e1a02082 	lsl	r2, r2, #1
{
   1d14c:	e92d4070 	push	{r4, r5, r6, lr}
   1d150:	e6ef2072 	uxtb	r2, r2
	return (BR.F & flag) != 0;
   1d154:	e2034001 	and	r4, r3, #1
    val |= (byte)CY;
   1d158:	e1844002 	orr	r4, r4, r2
	BR.F |= flag;
   1d15c:	13833001 	orrne	r3, r3, #1
	BR.F &= ~flag;
   1d160:	020330fe 	andeq	r3, r3, #254	; 0xfe
	if (val)
   1d164:	e3140020 	tst	r4, #32
	BR.F |= flag;
   1d168:	13833020 	orrne	r3, r3, #32
	BR.F &= ~flag;
   1d16c:	020330df 	andeq	r3, r3, #223	; 0xdf
	if (val)
   1d170:	e3140008 	tst	r4, #8
	BR.F |= flag;
   1d174:	13833008 	orrne	r3, r3, #8
	BR.F &= ~flag;
   1d178:	020330f7 	andeq	r3, r3, #247	; 0xf7
   1d17c:	e3c33012 	bic	r3, r3, #18
   1d180:	e5c03000 	strb	r3, [r0]
        adjustFlagSZP(ctx, val);
   1d184:	e1a01004 	mov	r1, r4
   1d188:	e1a05000 	mov	r5, r0
   1d18c:	ebffac5b 	bl	8300 <adjustFlagSZP>
	BR.B = doRL(ctx, 1, BR.B);
   1d190:	e5c04003 	strb	r4, [r0, #3]
}
   1d194:	e8bd8070 	pop	{r4, r5, r6, pc}

0001d198 <RET_NC>:
	ctx->tstates += 1;
   1d198:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	return (BR.F & flag) != 0;
   1d19c:	e5d01000 	ldrb	r1, [r0]
   1d1a0:	e2832001 	add	r2, r3, #1
	if (condition(ctx, C_NC))
   1d1a4:	e3110001 	tst	r1, #1
	ctx->tstates += 1;
   1d1a8:	e5802040 	str	r2, [r0, #64]	; 0x40
	if (condition(ctx, C_NC))
   1d1ac:	112fff1e 	bxne	lr
{
   1d1b0:	e92d4070 	push	{r4, r5, r6, lr}
   1d1b4:	e1a04000 	mov	r4, r0
	ctx->tstates += 3;
   1d1b8:	e2833004 	add	r3, r3, #4
	val = read8(ctx, WR.SP);
   1d1bc:	e1d010bc 	ldrh	r1, [r0, #12]
	ctx->tstates += 3;
   1d1c0:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   1d1c4:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   1d1c8:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   1d1cc:	e12fff33 	blx	r3
	WR.SP++;
   1d1d0:	e1d410bc 	ldrh	r1, [r4, #12]
	ctx->tstates += 3;
   1d1d4:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	WR.SP++;
   1d1d8:	e2811001 	add	r1, r1, #1
   1d1dc:	e6ff1071 	uxth	r1, r1
	ctx->tstates += 3;
   1d1e0:	e2833003 	add	r3, r3, #3
	return ctx->memRead(ctx->memParam, addr);	
   1d1e4:	e1a05000 	mov	r5, r0
	ctx->tstates += 3;
   1d1e8:	e5843040 	str	r3, [r4, #64]	; 0x40
	WR.SP++;
   1d1ec:	e1c410bc 	strh	r1, [r4, #12]
	return ctx->memRead(ctx->memParam, addr);	
   1d1f0:	e5943024 	ldr	r3, [r4, #36]	; 0x24
   1d1f4:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   1d1f8:	e12fff33 	blx	r3
	WR.SP++;
   1d1fc:	e1d430bc 	ldrh	r3, [r4, #12]
	val = val | (read8(ctx, WR.SP) << 8);
   1d200:	e1850400 	orr	r0, r5, r0, lsl #8
	WR.SP++;
   1d204:	e2833001 	add	r3, r3, #1
		ctx->PC = doPop(ctx);
   1d208:	e1c401bc 	strh	r0, [r4, #28]
   1d20c:	e1c430bc 	strh	r3, [r4, #12]
}
   1d210:	e8bd8070 	pop	{r4, r5, r6, pc}

0001d214 <RET_NZ>:
	ctx->tstates += 1;
   1d214:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	return (BR.F & flag) != 0;
   1d218:	e5d01000 	ldrb	r1, [r0]
   1d21c:	e2832001 	add	r2, r3, #1
	if (condition(ctx, C_NZ))
   1d220:	e3110040 	tst	r1, #64	; 0x40
	ctx->tstates += 1;
   1d224:	e5802040 	str	r2, [r0, #64]	; 0x40
	if (condition(ctx, C_NZ))
   1d228:	112fff1e 	bxne	lr
{
   1d22c:	e92d4070 	push	{r4, r5, r6, lr}
   1d230:	e1a04000 	mov	r4, r0
	ctx->tstates += 3;
   1d234:	e2833004 	add	r3, r3, #4
	val = read8(ctx, WR.SP);
   1d238:	e1d010bc 	ldrh	r1, [r0, #12]
	ctx->tstates += 3;
   1d23c:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   1d240:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   1d244:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   1d248:	e12fff33 	blx	r3
	WR.SP++;
   1d24c:	e1d410bc 	ldrh	r1, [r4, #12]
	ctx->tstates += 3;
   1d250:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	WR.SP++;
   1d254:	e2811001 	add	r1, r1, #1
   1d258:	e6ff1071 	uxth	r1, r1
	ctx->tstates += 3;
   1d25c:	e2833003 	add	r3, r3, #3
	return ctx->memRead(ctx->memParam, addr);	
   1d260:	e1a05000 	mov	r5, r0
	ctx->tstates += 3;
   1d264:	e5843040 	str	r3, [r4, #64]	; 0x40
	WR.SP++;
   1d268:	e1c410bc 	strh	r1, [r4, #12]
	return ctx->memRead(ctx->memParam, addr);	
   1d26c:	e5943024 	ldr	r3, [r4, #36]	; 0x24
   1d270:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   1d274:	e12fff33 	blx	r3
	WR.SP++;
   1d278:	e1d430bc 	ldrh	r3, [r4, #12]
	val = val | (read8(ctx, WR.SP) << 8);
   1d27c:	e1850400 	orr	r0, r5, r0, lsl #8
	WR.SP++;
   1d280:	e2833001 	add	r3, r3, #1
		ctx->PC = doPop(ctx);
   1d284:	e1c401bc 	strh	r0, [r4, #28]
   1d288:	e1c430bc 	strh	r3, [r4, #12]
}
   1d28c:	e8bd8070 	pop	{r4, r5, r6, pc}

0001d290 <RET_Z>:
	ctx->tstates += 1;
   1d290:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	return (BR.F & flag) != 0;
   1d294:	e5d01000 	ldrb	r1, [r0]
   1d298:	e2832001 	add	r2, r3, #1
	if (condition(ctx, C_Z))
   1d29c:	e3110040 	tst	r1, #64	; 0x40
	ctx->tstates += 1;
   1d2a0:	e5802040 	str	r2, [r0, #64]	; 0x40
	if (condition(ctx, C_Z))
   1d2a4:	012fff1e 	bxeq	lr
{
   1d2a8:	e92d4070 	push	{r4, r5, r6, lr}
   1d2ac:	e1a04000 	mov	r4, r0
	ctx->tstates += 3;
   1d2b0:	e2833004 	add	r3, r3, #4
	val = read8(ctx, WR.SP);
   1d2b4:	e1d010bc 	ldrh	r1, [r0, #12]
	ctx->tstates += 3;
   1d2b8:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   1d2bc:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   1d2c0:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   1d2c4:	e12fff33 	blx	r3
	WR.SP++;
   1d2c8:	e1d410bc 	ldrh	r1, [r4, #12]
	ctx->tstates += 3;
   1d2cc:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	WR.SP++;
   1d2d0:	e2811001 	add	r1, r1, #1
   1d2d4:	e6ff1071 	uxth	r1, r1
	ctx->tstates += 3;
   1d2d8:	e2833003 	add	r3, r3, #3
	return ctx->memRead(ctx->memParam, addr);	
   1d2dc:	e1a05000 	mov	r5, r0
	ctx->tstates += 3;
   1d2e0:	e5843040 	str	r3, [r4, #64]	; 0x40
	WR.SP++;
   1d2e4:	e1c410bc 	strh	r1, [r4, #12]
	return ctx->memRead(ctx->memParam, addr);	
   1d2e8:	e5943024 	ldr	r3, [r4, #36]	; 0x24
   1d2ec:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   1d2f0:	e12fff33 	blx	r3
	WR.SP++;
   1d2f4:	e1d430bc 	ldrh	r3, [r4, #12]
	val = val | (read8(ctx, WR.SP) << 8);
   1d2f8:	e1850400 	orr	r0, r5, r0, lsl #8
	WR.SP++;
   1d2fc:	e2833001 	add	r3, r3, #1
		ctx->PC = doPop(ctx);
   1d300:	e1c401bc 	strh	r0, [r4, #28]
   1d304:	e1c430bc 	strh	r3, [r4, #12]
}
   1d308:	e8bd8070 	pop	{r4, r5, r6, pc}

0001d30c <RET_C>:
	ctx->tstates += 1;
   1d30c:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	return (BR.F & flag) != 0;
   1d310:	e5d01000 	ldrb	r1, [r0]
   1d314:	e2832001 	add	r2, r3, #1
	if (condition(ctx, C_C))
   1d318:	e3110001 	tst	r1, #1
	ctx->tstates += 1;
   1d31c:	e5802040 	str	r2, [r0, #64]	; 0x40
	if (condition(ctx, C_C))
   1d320:	012fff1e 	bxeq	lr
{
   1d324:	e92d4070 	push	{r4, r5, r6, lr}
   1d328:	e1a04000 	mov	r4, r0
	ctx->tstates += 3;
   1d32c:	e2833004 	add	r3, r3, #4
	val = read8(ctx, WR.SP);
   1d330:	e1d010bc 	ldrh	r1, [r0, #12]
	ctx->tstates += 3;
   1d334:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   1d338:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   1d33c:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   1d340:	e12fff33 	blx	r3
	WR.SP++;
   1d344:	e1d410bc 	ldrh	r1, [r4, #12]
	ctx->tstates += 3;
   1d348:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	WR.SP++;
   1d34c:	e2811001 	add	r1, r1, #1
   1d350:	e6ff1071 	uxth	r1, r1
	ctx->tstates += 3;
   1d354:	e2833003 	add	r3, r3, #3
	return ctx->memRead(ctx->memParam, addr);	
   1d358:	e1a05000 	mov	r5, r0
	ctx->tstates += 3;
   1d35c:	e5843040 	str	r3, [r4, #64]	; 0x40
	WR.SP++;
   1d360:	e1c410bc 	strh	r1, [r4, #12]
	return ctx->memRead(ctx->memParam, addr);	
   1d364:	e5943024 	ldr	r3, [r4, #36]	; 0x24
   1d368:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   1d36c:	e12fff33 	blx	r3
	WR.SP++;
   1d370:	e1d430bc 	ldrh	r3, [r4, #12]
	val = val | (read8(ctx, WR.SP) << 8);
   1d374:	e1850400 	orr	r0, r5, r0, lsl #8
	WR.SP++;
   1d378:	e2833001 	add	r3, r3, #1
		ctx->PC = doPop(ctx);
   1d37c:	e1c401bc 	strh	r0, [r4, #28]
   1d380:	e1c430bc 	strh	r3, [r4, #12]
}
   1d384:	e8bd8070 	pop	{r4, r5, r6, pc}

0001d388 <RET_PO>:
	ctx->tstates += 1;
   1d388:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	return (BR.F & flag) != 0;
   1d38c:	e5d01000 	ldrb	r1, [r0]
   1d390:	e2832001 	add	r2, r3, #1
	if (condition(ctx, C_PO))
   1d394:	e3110004 	tst	r1, #4
	ctx->tstates += 1;
   1d398:	e5802040 	str	r2, [r0, #64]	; 0x40
	if (condition(ctx, C_PO))
   1d39c:	112fff1e 	bxne	lr
{
   1d3a0:	e92d4070 	push	{r4, r5, r6, lr}
   1d3a4:	e1a04000 	mov	r4, r0
	ctx->tstates += 3;
   1d3a8:	e2833004 	add	r3, r3, #4
	val = read8(ctx, WR.SP);
   1d3ac:	e1d010bc 	ldrh	r1, [r0, #12]
	ctx->tstates += 3;
   1d3b0:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   1d3b4:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   1d3b8:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   1d3bc:	e12fff33 	blx	r3
	WR.SP++;
   1d3c0:	e1d410bc 	ldrh	r1, [r4, #12]
	ctx->tstates += 3;
   1d3c4:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	WR.SP++;
   1d3c8:	e2811001 	add	r1, r1, #1
   1d3cc:	e6ff1071 	uxth	r1, r1
	ctx->tstates += 3;
   1d3d0:	e2833003 	add	r3, r3, #3
	return ctx->memRead(ctx->memParam, addr);	
   1d3d4:	e1a05000 	mov	r5, r0
	ctx->tstates += 3;
   1d3d8:	e5843040 	str	r3, [r4, #64]	; 0x40
	WR.SP++;
   1d3dc:	e1c410bc 	strh	r1, [r4, #12]
	return ctx->memRead(ctx->memParam, addr);	
   1d3e0:	e5943024 	ldr	r3, [r4, #36]	; 0x24
   1d3e4:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   1d3e8:	e12fff33 	blx	r3
	WR.SP++;
   1d3ec:	e1d430bc 	ldrh	r3, [r4, #12]
	val = val | (read8(ctx, WR.SP) << 8);
   1d3f0:	e1850400 	orr	r0, r5, r0, lsl #8
	WR.SP++;
   1d3f4:	e2833001 	add	r3, r3, #1
		ctx->PC = doPop(ctx);
   1d3f8:	e1c401bc 	strh	r0, [r4, #28]
   1d3fc:	e1c430bc 	strh	r3, [r4, #12]
}
   1d400:	e8bd8070 	pop	{r4, r5, r6, pc}

0001d404 <RET_PE>:
	ctx->tstates += 1;
   1d404:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	return (BR.F & flag) != 0;
   1d408:	e5d01000 	ldrb	r1, [r0]
   1d40c:	e2832001 	add	r2, r3, #1
	if (condition(ctx, C_PE))
   1d410:	e3110004 	tst	r1, #4
	ctx->tstates += 1;
   1d414:	e5802040 	str	r2, [r0, #64]	; 0x40
	if (condition(ctx, C_PE))
   1d418:	012fff1e 	bxeq	lr
{
   1d41c:	e92d4070 	push	{r4, r5, r6, lr}
   1d420:	e1a04000 	mov	r4, r0
	ctx->tstates += 3;
   1d424:	e2833004 	add	r3, r3, #4
	val = read8(ctx, WR.SP);
   1d428:	e1d010bc 	ldrh	r1, [r0, #12]
	ctx->tstates += 3;
   1d42c:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   1d430:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   1d434:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   1d438:	e12fff33 	blx	r3
	WR.SP++;
   1d43c:	e1d410bc 	ldrh	r1, [r4, #12]
	ctx->tstates += 3;
   1d440:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	WR.SP++;
   1d444:	e2811001 	add	r1, r1, #1
   1d448:	e6ff1071 	uxth	r1, r1
	ctx->tstates += 3;
   1d44c:	e2833003 	add	r3, r3, #3
	return ctx->memRead(ctx->memParam, addr);	
   1d450:	e1a05000 	mov	r5, r0
	ctx->tstates += 3;
   1d454:	e5843040 	str	r3, [r4, #64]	; 0x40
	WR.SP++;
   1d458:	e1c410bc 	strh	r1, [r4, #12]
	return ctx->memRead(ctx->memParam, addr);	
   1d45c:	e5943024 	ldr	r3, [r4, #36]	; 0x24
   1d460:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   1d464:	e12fff33 	blx	r3
	WR.SP++;
   1d468:	e1d430bc 	ldrh	r3, [r4, #12]
	val = val | (read8(ctx, WR.SP) << 8);
   1d46c:	e1850400 	orr	r0, r5, r0, lsl #8
	WR.SP++;
   1d470:	e2833001 	add	r3, r3, #1
		ctx->PC = doPop(ctx);
   1d474:	e1c401bc 	strh	r0, [r4, #28]
   1d478:	e1c430bc 	strh	r3, [r4, #12]
}
   1d47c:	e8bd8070 	pop	{r4, r5, r6, pc}

0001d480 <RR_C>:
{
   1d480:	e5d03000 	ldrb	r3, [r0]
   1d484:	e92d4070 	push	{r4, r5, r6, lr}
	BR.C = doRR(ctx, 1, BR.C);
   1d488:	e5d04002 	ldrb	r4, [r0, #2]
	return (BR.F & flag) != 0;
   1d48c:	e2032001 	and	r2, r3, #1
	if (val)
   1d490:	e3140001 	tst	r4, #1
    val >>= 1;
   1d494:	e1a040a4 	lsr	r4, r4, #1
    val |= (CY << 7);
   1d498:	e1844382 	orr	r4, r4, r2, lsl #7
	BR.F |= flag;
   1d49c:	13833001 	orrne	r3, r3, #1
	BR.F &= ~flag;
   1d4a0:	020330fe 	andeq	r3, r3, #254	; 0xfe
	if (val)
   1d4a4:	e3140020 	tst	r4, #32
	BR.F |= flag;
   1d4a8:	13833020 	orrne	r3, r3, #32
	BR.F &= ~flag;
   1d4ac:	020330df 	andeq	r3, r3, #223	; 0xdf
	if (val)
   1d4b0:	e3140008 	tst	r4, #8
	BR.F |= flag;
   1d4b4:	13833008 	orrne	r3, r3, #8
	BR.F &= ~flag;
   1d4b8:	020330f7 	andeq	r3, r3, #247	; 0xf7
   1d4bc:	e3c33012 	bic	r3, r3, #18
   1d4c0:	e5c03000 	strb	r3, [r0]
        adjustFlagSZP(ctx, val);
   1d4c4:	e1a01004 	mov	r1, r4
{
   1d4c8:	e1a05000 	mov	r5, r0
   1d4cc:	ebffab8b 	bl	8300 <adjustFlagSZP>
	BR.C = doRR(ctx, 1, BR.C);
   1d4d0:	e5c04002 	strb	r4, [r0, #2]
}
   1d4d4:	e8bd8070 	pop	{r4, r5, r6, pc}

0001d4d8 <RR_B>:
{
   1d4d8:	e5d03000 	ldrb	r3, [r0]
   1d4dc:	e92d4070 	push	{r4, r5, r6, lr}
	BR.B = doRR(ctx, 1, BR.B);
   1d4e0:	e5d04003 	ldrb	r4, [r0, #3]
	return (BR.F & flag) != 0;
   1d4e4:	e2032001 	and	r2, r3, #1
	if (val)
   1d4e8:	e3140001 	tst	r4, #1
    val >>= 1;
   1d4ec:	e1a040a4 	lsr	r4, r4, #1
    val |= (CY << 7);
   1d4f0:	e1844382 	orr	r4, r4, r2, lsl #7
	BR.F |= flag;
   1d4f4:	13833001 	orrne	r3, r3, #1
	BR.F &= ~flag;
   1d4f8:	020330fe 	andeq	r3, r3, #254	; 0xfe
	if (val)
   1d4fc:	e3140020 	tst	r4, #32
	BR.F |= flag;
   1d500:	13833020 	orrne	r3, r3, #32
	BR.F &= ~flag;
   1d504:	020330df 	andeq	r3, r3, #223	; 0xdf
	if (val)
   1d508:	e3140008 	tst	r4, #8
	BR.F |= flag;
   1d50c:	13833008 	orrne	r3, r3, #8
	BR.F &= ~flag;
   1d510:	020330f7 	andeq	r3, r3, #247	; 0xf7
   1d514:	e3c33012 	bic	r3, r3, #18
   1d518:	e5c03000 	strb	r3, [r0]
        adjustFlagSZP(ctx, val);
   1d51c:	e1a01004 	mov	r1, r4
{
   1d520:	e1a05000 	mov	r5, r0
   1d524:	ebffab75 	bl	8300 <adjustFlagSZP>
	BR.B = doRR(ctx, 1, BR.B);
   1d528:	e5c04003 	strb	r4, [r0, #3]
}
   1d52c:	e8bd8070 	pop	{r4, r5, r6, pc}

0001d530 <RR_D>:
{
   1d530:	e5d03000 	ldrb	r3, [r0]
   1d534:	e92d4070 	push	{r4, r5, r6, lr}
	BR.D = doRR(ctx, 1, BR.D);
   1d538:	e5d04005 	ldrb	r4, [r0, #5]
	return (BR.F & flag) != 0;
   1d53c:	e2032001 	and	r2, r3, #1
	if (val)
   1d540:	e3140001 	tst	r4, #1
    val >>= 1;
   1d544:	e1a040a4 	lsr	r4, r4, #1
    val |= (CY << 7);
   1d548:	e1844382 	orr	r4, r4, r2, lsl #7
	BR.F |= flag;
   1d54c:	13833001 	orrne	r3, r3, #1
	BR.F &= ~flag;
   1d550:	020330fe 	andeq	r3, r3, #254	; 0xfe
	if (val)
   1d554:	e3140020 	tst	r4, #32
	BR.F |= flag;
   1d558:	13833020 	orrne	r3, r3, #32
	BR.F &= ~flag;
   1d55c:	020330df 	andeq	r3, r3, #223	; 0xdf
	if (val)
   1d560:	e3140008 	tst	r4, #8
	BR.F |= flag;
   1d564:	13833008 	orrne	r3, r3, #8
	BR.F &= ~flag;
   1d568:	020330f7 	andeq	r3, r3, #247	; 0xf7
   1d56c:	e3c33012 	bic	r3, r3, #18
   1d570:	e5c03000 	strb	r3, [r0]
        adjustFlagSZP(ctx, val);
   1d574:	e1a01004 	mov	r1, r4
{
   1d578:	e1a05000 	mov	r5, r0
   1d57c:	ebffab5f 	bl	8300 <adjustFlagSZP>
	BR.D = doRR(ctx, 1, BR.D);
   1d580:	e5c04005 	strb	r4, [r0, #5]
}
   1d584:	e8bd8070 	pop	{r4, r5, r6, pc}

0001d588 <IN_F_off_C>:
	ctx->tstates += 4;
   1d588:	e5903040 	ldr	r3, [r0, #64]	; 0x40
{
   1d58c:	e92d4010 	push	{r4, lr}
   1d590:	e2833004 	add	r3, r3, #4
   1d594:	e5803040 	str	r3, [r0, #64]	; 0x40
	BR.F = ioRead(ctx, WR.BC);
   1d598:	e1d010b2 	ldrh	r1, [r0, #2]
	return ctx->ioRead(ctx->ioParam, addr);
   1d59c:	e5903030 	ldr	r3, [r0, #48]	; 0x30
{
   1d5a0:	e1a04000 	mov	r4, r0
   1d5a4:	e5900038 	ldr	r0, [r0, #56]	; 0x38
   1d5a8:	e12fff33 	blx	r3
	BR.F &= ~flag;
   1d5ac:	e3c00012 	bic	r0, r0, #18
   1d5b0:	e6af0070 	sxtb	r0, r0
	if (val)
   1d5b4:	e3500000 	cmp	r0, #0
	BR.F &= ~flag;
   1d5b8:	e6ef0070 	uxtb	r0, r0
   1d5bc:	a1a03000 	movge	r3, r0
	BR.F |= flag;
   1d5c0:	b3803080 	orrlt	r3, r0, #128	; 0x80
	if (val)
   1d5c4:	e3500000 	cmp	r0, #0
	BR.F |= flag;
   1d5c8:	03832040 	orreq	r2, r3, #64	; 0x40
	if (val)
   1d5cc:	0a00000f 	beq	1d610 <IN_F_off_C+0x88>
	VALFLAG(F_PV, parityBit[val]);
   1d5d0:	e59f2040 	ldr	r2, [pc, #64]	; 1d618 <IN_F_off_C+0x90>
	BR.F &= ~flag;
   1d5d4:	e6af3073 	sxtb	r3, r3
	if (val)
   1d5d8:	e7921100 	ldr	r1, [r2, r0, lsl #2]
	BR.F &= ~flag;
   1d5dc:	e20320ad 	and	r2, r3, #173	; 0xad
	if (val)
   1d5e0:	e3510000 	cmp	r1, #0
   1d5e4:	e5c42000 	strb	r2, [r4]
	BR.F &= ~flag;
   1d5e8:	020330a9 	andeq	r3, r3, #169	; 0xa9
	if (val)
   1d5ec:	1a000007 	bne	1d610 <IN_F_off_C+0x88>
   1d5f0:	e3130020 	tst	r3, #32
	BR.F |= flag;
   1d5f4:	13832020 	orrne	r2, r3, #32
	BR.F &= ~flag;
   1d5f8:	020320df 	andeq	r2, r3, #223	; 0xdf
	if (val)
   1d5fc:	e3130008 	tst	r3, #8
	BR.F |= flag;
   1d600:	13823008 	orrne	r3, r2, #8
	BR.F &= ~flag;
   1d604:	020230f7 	andeq	r3, r2, #247	; 0xf7
   1d608:	e5c43000 	strb	r3, [r4]
}
   1d60c:	e8bd8010 	pop	{r4, pc}
	BR.F |= flag;
   1d610:	e3823004 	orr	r3, r2, #4
   1d614:	eafffff5 	b	1d5f0 <IN_F_off_C+0x68>
   1d618:	0004f000 	.word	0x0004f000

0001d61c <doSL.constprop.27>:
static byte doSL (Z80Context* ctx, byte val, int isArith)
   1d61c:	e5d03000 	ldrb	r3, [r0]
	if (val)
   1d620:	e3110080 	tst	r1, #128	; 0x80
    val <<= 1;
   1d624:	e1a01081 	lsl	r1, r1, #1
   1d628:	e6ef1071 	uxtb	r1, r1
	BR.F |= flag;
   1d62c:	13833001 	orrne	r3, r3, #1
	BR.F &= ~flag;
   1d630:	020330fe 	andeq	r3, r3, #254	; 0xfe
	if (val)
   1d634:	e3110020 	tst	r1, #32
	BR.F |= flag;
   1d638:	13833020 	orrne	r3, r3, #32
	BR.F &= ~flag;
   1d63c:	020330df 	andeq	r3, r3, #223	; 0xdf
	if (val)
   1d640:	e3110008 	tst	r1, #8
	BR.F |= flag;
   1d644:	13833008 	orrne	r3, r3, #8
	BR.F &= ~flag;
   1d648:	020330f7 	andeq	r3, r3, #247	; 0xf7
   1d64c:	e6af3073 	sxtb	r3, r3
   1d650:	e20320ed 	and	r2, r3, #237	; 0xed
	if (val)
   1d654:	e3110080 	tst	r1, #128	; 0x80
	BR.F &= ~flag;
   1d658:	e5c02000 	strb	r2, [r0]
	BR.F |= flag;
   1d65c:	13823080 	orrne	r3, r2, #128	; 0x80
	if (val)
   1d660:	1a000008 	bne	1d688 <doSL.constprop.27+0x6c>
	BR.F &= ~flag;
   1d664:	e203306d 	and	r3, r3, #109	; 0x6d
	if (val)
   1d668:	e3510000 	cmp	r1, #0
	BR.F &= ~flag;
   1d66c:	e5c03000 	strb	r3, [r0]
	BR.F |= flag;
   1d670:	03832040 	orreq	r2, r3, #64	; 0x40
	if (val)
   1d674:	1a000003 	bne	1d688 <doSL.constprop.27+0x6c>
	BR.F |= flag;
   1d678:	e3823004 	orr	r3, r2, #4
   1d67c:	e5c03000 	strb	r3, [r0]
}
   1d680:	e1a00001 	mov	r0, r1
   1d684:	e12fff1e 	bx	lr
	VALFLAG(F_PV, parityBit[val]);
   1d688:	e59f201c 	ldr	r2, [pc, #28]	; 1d6ac <doSL.constprop.27+0x90>
	BR.F &= ~flag;
   1d68c:	e6af3073 	sxtb	r3, r3
	if (val)
   1d690:	e792c101 	ldr	ip, [r2, r1, lsl #2]
	BR.F &= ~flag;
   1d694:	e20320ad 	and	r2, r3, #173	; 0xad
	if (val)
   1d698:	e35c0000 	cmp	ip, #0
   1d69c:	e5c02000 	strb	r2, [r0]
	BR.F &= ~flag;
   1d6a0:	020330a9 	andeq	r3, r3, #169	; 0xa9
	if (val)
   1d6a4:	0afffff4 	beq	1d67c <doSL.constprop.27+0x60>
   1d6a8:	eafffff2 	b	1d678 <doSL.constprop.27+0x5c>
   1d6ac:	0004f000 	.word	0x0004f000

0001d6b0 <LD_A_SLA_off_IX_d>:
	char off = read8(ctx, ctx->PC++);
   1d6b0:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
   1d6b4:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	char off = read8(ctx, ctx->PC++);
   1d6b8:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
   1d6bc:	e2833005 	add	r3, r3, #5
{
   1d6c0:	e92d4070 	push	{r4, r5, r6, lr}
   1d6c4:	e1a04000 	mov	r4, r0
	char off = read8(ctx, ctx->PC++);
   1d6c8:	e1c021bc 	strh	r2, [r0, #28]
   1d6cc:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   1d6d0:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   1d6d4:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   1d6d8:	e12fff33 	blx	r3
	ctx->tstates += 3;
   1d6dc:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	BR.A = doSL(ctx, read8(ctx, WR.IX + off), 1);
   1d6e0:	e1d410b8 	ldrh	r1, [r4, #8]
   1d6e4:	e6ff5070 	uxth	r5, r0
   1d6e8:	e2833003 	add	r3, r3, #3
   1d6ec:	e0851001 	add	r1, r5, r1
   1d6f0:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   1d6f4:	e6ff1071 	uxth	r1, r1
   1d6f8:	e5943024 	ldr	r3, [r4, #36]	; 0x24
   1d6fc:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   1d700:	e12fff33 	blx	r3
   1d704:	e1a01000 	mov	r1, r0
   1d708:	e1a00004 	mov	r0, r4
   1d70c:	ebffffc2 	bl	1d61c <doSL.constprop.27>
	ctx->tstates += 3;
   1d710:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	write8(ctx, WR.IX + off, BR.A);	
   1d714:	e1d410b8 	ldrh	r1, [r4, #8]
   1d718:	e2833003 	add	r3, r3, #3
   1d71c:	e0851001 	add	r1, r5, r1
	BR.A = doSL(ctx, read8(ctx, WR.IX + off), 1);
   1d720:	e5c40001 	strb	r0, [r4, #1]
   1d724:	e5843040 	str	r3, [r4, #64]	; 0x40
   1d728:	e1a02000 	mov	r2, r0
	ctx->memWrite(ctx->memParam, addr, val);	
   1d72c:	e5943028 	ldr	r3, [r4, #40]	; 0x28
   1d730:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   1d734:	e6ff1071 	uxth	r1, r1
}
   1d738:	e8bd4070 	pop	{r4, r5, r6, lr}
   1d73c:	e12fff13 	bx	r3

0001d740 <LD_A_SLA_off_IY_d>:
	char off = read8(ctx, ctx->PC++);
   1d740:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
   1d744:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	char off = read8(ctx, ctx->PC++);
   1d748:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
   1d74c:	e2833005 	add	r3, r3, #5
{
   1d750:	e92d4070 	push	{r4, r5, r6, lr}
   1d754:	e1a04000 	mov	r4, r0
	char off = read8(ctx, ctx->PC++);
   1d758:	e1c021bc 	strh	r2, [r0, #28]
   1d75c:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   1d760:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   1d764:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   1d768:	e12fff33 	blx	r3
	ctx->tstates += 3;
   1d76c:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	BR.A = doSL(ctx, read8(ctx, WR.IY + off), 1);
   1d770:	e1d410ba 	ldrh	r1, [r4, #10]
   1d774:	e6ff5070 	uxth	r5, r0
   1d778:	e2833003 	add	r3, r3, #3
   1d77c:	e0851001 	add	r1, r5, r1
   1d780:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   1d784:	e6ff1071 	uxth	r1, r1
   1d788:	e5943024 	ldr	r3, [r4, #36]	; 0x24
   1d78c:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   1d790:	e12fff33 	blx	r3
   1d794:	e1a01000 	mov	r1, r0
   1d798:	e1a00004 	mov	r0, r4
   1d79c:	ebffff9e 	bl	1d61c <doSL.constprop.27>
	ctx->tstates += 3;
   1d7a0:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	write8(ctx, WR.IY + off, BR.A);	
   1d7a4:	e1d410ba 	ldrh	r1, [r4, #10]
   1d7a8:	e2833003 	add	r3, r3, #3
   1d7ac:	e0851001 	add	r1, r5, r1
	BR.A = doSL(ctx, read8(ctx, WR.IY + off), 1);
   1d7b0:	e5c40001 	strb	r0, [r4, #1]
   1d7b4:	e5843040 	str	r3, [r4, #64]	; 0x40
   1d7b8:	e1a02000 	mov	r2, r0
	ctx->memWrite(ctx->memParam, addr, val);	
   1d7bc:	e5943028 	ldr	r3, [r4, #40]	; 0x28
   1d7c0:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   1d7c4:	e6ff1071 	uxth	r1, r1
}
   1d7c8:	e8bd4070 	pop	{r4, r5, r6, lr}
   1d7cc:	e12fff13 	bx	r3

0001d7d0 <LD_B_SLA_off_IX_d>:
	char off = read8(ctx, ctx->PC++);
   1d7d0:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
   1d7d4:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	char off = read8(ctx, ctx->PC++);
   1d7d8:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
   1d7dc:	e2833005 	add	r3, r3, #5
{
   1d7e0:	e92d4070 	push	{r4, r5, r6, lr}
   1d7e4:	e1a04000 	mov	r4, r0
	char off = read8(ctx, ctx->PC++);
   1d7e8:	e1c021bc 	strh	r2, [r0, #28]
   1d7ec:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   1d7f0:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   1d7f4:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   1d7f8:	e12fff33 	blx	r3
	ctx->tstates += 3;
   1d7fc:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	BR.B = doSL(ctx, read8(ctx, WR.IX + off), 1);
   1d800:	e1d410b8 	ldrh	r1, [r4, #8]
   1d804:	e6ff5070 	uxth	r5, r0
   1d808:	e2833003 	add	r3, r3, #3
   1d80c:	e0851001 	add	r1, r5, r1
   1d810:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   1d814:	e6ff1071 	uxth	r1, r1
   1d818:	e5943024 	ldr	r3, [r4, #36]	; 0x24
   1d81c:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   1d820:	e12fff33 	blx	r3
   1d824:	e1a01000 	mov	r1, r0
   1d828:	e1a00004 	mov	r0, r4
   1d82c:	ebffff7a 	bl	1d61c <doSL.constprop.27>
	ctx->tstates += 3;
   1d830:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	write8(ctx, WR.IX + off, BR.B);	
   1d834:	e1d410b8 	ldrh	r1, [r4, #8]
   1d838:	e2833003 	add	r3, r3, #3
   1d83c:	e0851001 	add	r1, r5, r1
	BR.B = doSL(ctx, read8(ctx, WR.IX + off), 1);
   1d840:	e5c40003 	strb	r0, [r4, #3]
   1d844:	e5843040 	str	r3, [r4, #64]	; 0x40
   1d848:	e1a02000 	mov	r2, r0
	ctx->memWrite(ctx->memParam, addr, val);	
   1d84c:	e5943028 	ldr	r3, [r4, #40]	; 0x28
   1d850:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   1d854:	e6ff1071 	uxth	r1, r1
}
   1d858:	e8bd4070 	pop	{r4, r5, r6, lr}
   1d85c:	e12fff13 	bx	r3

0001d860 <LD_B_SLA_off_IY_d>:
	char off = read8(ctx, ctx->PC++);
   1d860:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
   1d864:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	char off = read8(ctx, ctx->PC++);
   1d868:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
   1d86c:	e2833005 	add	r3, r3, #5
{
   1d870:	e92d4070 	push	{r4, r5, r6, lr}
   1d874:	e1a04000 	mov	r4, r0
	char off = read8(ctx, ctx->PC++);
   1d878:	e1c021bc 	strh	r2, [r0, #28]
   1d87c:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   1d880:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   1d884:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   1d888:	e12fff33 	blx	r3
	ctx->tstates += 3;
   1d88c:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	BR.B = doSL(ctx, read8(ctx, WR.IY + off), 1);
   1d890:	e1d410ba 	ldrh	r1, [r4, #10]
   1d894:	e6ff5070 	uxth	r5, r0
   1d898:	e2833003 	add	r3, r3, #3
   1d89c:	e0851001 	add	r1, r5, r1
   1d8a0:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   1d8a4:	e6ff1071 	uxth	r1, r1
   1d8a8:	e5943024 	ldr	r3, [r4, #36]	; 0x24
   1d8ac:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   1d8b0:	e12fff33 	blx	r3
   1d8b4:	e1a01000 	mov	r1, r0
   1d8b8:	e1a00004 	mov	r0, r4
   1d8bc:	ebffff56 	bl	1d61c <doSL.constprop.27>
	ctx->tstates += 3;
   1d8c0:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	write8(ctx, WR.IY + off, BR.B);	
   1d8c4:	e1d410ba 	ldrh	r1, [r4, #10]
   1d8c8:	e2833003 	add	r3, r3, #3
   1d8cc:	e0851001 	add	r1, r5, r1
	BR.B = doSL(ctx, read8(ctx, WR.IY + off), 1);
   1d8d0:	e5c40003 	strb	r0, [r4, #3]
   1d8d4:	e5843040 	str	r3, [r4, #64]	; 0x40
   1d8d8:	e1a02000 	mov	r2, r0
	ctx->memWrite(ctx->memParam, addr, val);	
   1d8dc:	e5943028 	ldr	r3, [r4, #40]	; 0x28
   1d8e0:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   1d8e4:	e6ff1071 	uxth	r1, r1
}
   1d8e8:	e8bd4070 	pop	{r4, r5, r6, lr}
   1d8ec:	e12fff13 	bx	r3

0001d8f0 <LD_C_SLA_off_IX_d>:
	char off = read8(ctx, ctx->PC++);
   1d8f0:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
   1d8f4:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	char off = read8(ctx, ctx->PC++);
   1d8f8:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
   1d8fc:	e2833005 	add	r3, r3, #5
{
   1d900:	e92d4070 	push	{r4, r5, r6, lr}
   1d904:	e1a04000 	mov	r4, r0
	char off = read8(ctx, ctx->PC++);
   1d908:	e1c021bc 	strh	r2, [r0, #28]
   1d90c:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   1d910:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   1d914:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   1d918:	e12fff33 	blx	r3
	ctx->tstates += 3;
   1d91c:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	BR.C = doSL(ctx, read8(ctx, WR.IX + off), 1);
   1d920:	e1d410b8 	ldrh	r1, [r4, #8]
   1d924:	e6ff5070 	uxth	r5, r0
   1d928:	e2833003 	add	r3, r3, #3
   1d92c:	e0851001 	add	r1, r5, r1
   1d930:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   1d934:	e6ff1071 	uxth	r1, r1
   1d938:	e5943024 	ldr	r3, [r4, #36]	; 0x24
   1d93c:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   1d940:	e12fff33 	blx	r3
   1d944:	e1a01000 	mov	r1, r0
   1d948:	e1a00004 	mov	r0, r4
   1d94c:	ebffff32 	bl	1d61c <doSL.constprop.27>
	ctx->tstates += 3;
   1d950:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	write8(ctx, WR.IX + off, BR.C);	
   1d954:	e1d410b8 	ldrh	r1, [r4, #8]
   1d958:	e2833003 	add	r3, r3, #3
   1d95c:	e0851001 	add	r1, r5, r1
	BR.C = doSL(ctx, read8(ctx, WR.IX + off), 1);
   1d960:	e5c40002 	strb	r0, [r4, #2]
   1d964:	e5843040 	str	r3, [r4, #64]	; 0x40
   1d968:	e1a02000 	mov	r2, r0
	ctx->memWrite(ctx->memParam, addr, val);	
   1d96c:	e5943028 	ldr	r3, [r4, #40]	; 0x28
   1d970:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   1d974:	e6ff1071 	uxth	r1, r1
}
   1d978:	e8bd4070 	pop	{r4, r5, r6, lr}
   1d97c:	e12fff13 	bx	r3

0001d980 <LD_C_SLA_off_IY_d>:
	char off = read8(ctx, ctx->PC++);
   1d980:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
   1d984:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	char off = read8(ctx, ctx->PC++);
   1d988:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
   1d98c:	e2833005 	add	r3, r3, #5
{
   1d990:	e92d4070 	push	{r4, r5, r6, lr}
   1d994:	e1a04000 	mov	r4, r0
	char off = read8(ctx, ctx->PC++);
   1d998:	e1c021bc 	strh	r2, [r0, #28]
   1d99c:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   1d9a0:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   1d9a4:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   1d9a8:	e12fff33 	blx	r3
	ctx->tstates += 3;
   1d9ac:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	BR.C = doSL(ctx, read8(ctx, WR.IY + off), 1);
   1d9b0:	e1d410ba 	ldrh	r1, [r4, #10]
   1d9b4:	e6ff5070 	uxth	r5, r0
   1d9b8:	e2833003 	add	r3, r3, #3
   1d9bc:	e0851001 	add	r1, r5, r1
   1d9c0:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   1d9c4:	e6ff1071 	uxth	r1, r1
   1d9c8:	e5943024 	ldr	r3, [r4, #36]	; 0x24
   1d9cc:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   1d9d0:	e12fff33 	blx	r3
   1d9d4:	e1a01000 	mov	r1, r0
   1d9d8:	e1a00004 	mov	r0, r4
   1d9dc:	ebffff0e 	bl	1d61c <doSL.constprop.27>
	ctx->tstates += 3;
   1d9e0:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	write8(ctx, WR.IY + off, BR.C);	
   1d9e4:	e1d410ba 	ldrh	r1, [r4, #10]
   1d9e8:	e2833003 	add	r3, r3, #3
   1d9ec:	e0851001 	add	r1, r5, r1
	BR.C = doSL(ctx, read8(ctx, WR.IY + off), 1);
   1d9f0:	e5c40002 	strb	r0, [r4, #2]
   1d9f4:	e5843040 	str	r3, [r4, #64]	; 0x40
   1d9f8:	e1a02000 	mov	r2, r0
	ctx->memWrite(ctx->memParam, addr, val);	
   1d9fc:	e5943028 	ldr	r3, [r4, #40]	; 0x28
   1da00:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   1da04:	e6ff1071 	uxth	r1, r1
}
   1da08:	e8bd4070 	pop	{r4, r5, r6, lr}
   1da0c:	e12fff13 	bx	r3

0001da10 <LD_D_SLA_off_IX_d>:
	char off = read8(ctx, ctx->PC++);
   1da10:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
   1da14:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	char off = read8(ctx, ctx->PC++);
   1da18:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
   1da1c:	e2833005 	add	r3, r3, #5
{
   1da20:	e92d4070 	push	{r4, r5, r6, lr}
   1da24:	e1a04000 	mov	r4, r0
	char off = read8(ctx, ctx->PC++);
   1da28:	e1c021bc 	strh	r2, [r0, #28]
   1da2c:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   1da30:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   1da34:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   1da38:	e12fff33 	blx	r3
	ctx->tstates += 3;
   1da3c:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	BR.D = doSL(ctx, read8(ctx, WR.IX + off), 1);
   1da40:	e1d410b8 	ldrh	r1, [r4, #8]
   1da44:	e6ff5070 	uxth	r5, r0
   1da48:	e2833003 	add	r3, r3, #3
   1da4c:	e0851001 	add	r1, r5, r1
   1da50:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   1da54:	e6ff1071 	uxth	r1, r1
   1da58:	e5943024 	ldr	r3, [r4, #36]	; 0x24
   1da5c:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   1da60:	e12fff33 	blx	r3
   1da64:	e1a01000 	mov	r1, r0
   1da68:	e1a00004 	mov	r0, r4
   1da6c:	ebfffeea 	bl	1d61c <doSL.constprop.27>
	ctx->tstates += 3;
   1da70:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	write8(ctx, WR.IX + off, BR.D);	
   1da74:	e1d410b8 	ldrh	r1, [r4, #8]
   1da78:	e2833003 	add	r3, r3, #3
   1da7c:	e0851001 	add	r1, r5, r1
	BR.D = doSL(ctx, read8(ctx, WR.IX + off), 1);
   1da80:	e5c40005 	strb	r0, [r4, #5]
   1da84:	e5843040 	str	r3, [r4, #64]	; 0x40
   1da88:	e1a02000 	mov	r2, r0
	ctx->memWrite(ctx->memParam, addr, val);	
   1da8c:	e5943028 	ldr	r3, [r4, #40]	; 0x28
   1da90:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   1da94:	e6ff1071 	uxth	r1, r1
}
   1da98:	e8bd4070 	pop	{r4, r5, r6, lr}
   1da9c:	e12fff13 	bx	r3

0001daa0 <LD_D_SLA_off_IY_d>:
	char off = read8(ctx, ctx->PC++);
   1daa0:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
   1daa4:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	char off = read8(ctx, ctx->PC++);
   1daa8:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
   1daac:	e2833005 	add	r3, r3, #5
{
   1dab0:	e92d4070 	push	{r4, r5, r6, lr}
   1dab4:	e1a04000 	mov	r4, r0
	char off = read8(ctx, ctx->PC++);
   1dab8:	e1c021bc 	strh	r2, [r0, #28]
   1dabc:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   1dac0:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   1dac4:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   1dac8:	e12fff33 	blx	r3
	ctx->tstates += 3;
   1dacc:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	BR.D = doSL(ctx, read8(ctx, WR.IY + off), 1);
   1dad0:	e1d410ba 	ldrh	r1, [r4, #10]
   1dad4:	e6ff5070 	uxth	r5, r0
   1dad8:	e2833003 	add	r3, r3, #3
   1dadc:	e0851001 	add	r1, r5, r1
   1dae0:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   1dae4:	e6ff1071 	uxth	r1, r1
   1dae8:	e5943024 	ldr	r3, [r4, #36]	; 0x24
   1daec:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   1daf0:	e12fff33 	blx	r3
   1daf4:	e1a01000 	mov	r1, r0
   1daf8:	e1a00004 	mov	r0, r4
   1dafc:	ebfffec6 	bl	1d61c <doSL.constprop.27>
	ctx->tstates += 3;
   1db00:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	write8(ctx, WR.IY + off, BR.D);	
   1db04:	e1d410ba 	ldrh	r1, [r4, #10]
   1db08:	e2833003 	add	r3, r3, #3
   1db0c:	e0851001 	add	r1, r5, r1
	BR.D = doSL(ctx, read8(ctx, WR.IY + off), 1);
   1db10:	e5c40005 	strb	r0, [r4, #5]
   1db14:	e5843040 	str	r3, [r4, #64]	; 0x40
   1db18:	e1a02000 	mov	r2, r0
	ctx->memWrite(ctx->memParam, addr, val);	
   1db1c:	e5943028 	ldr	r3, [r4, #40]	; 0x28
   1db20:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   1db24:	e6ff1071 	uxth	r1, r1
}
   1db28:	e8bd4070 	pop	{r4, r5, r6, lr}
   1db2c:	e12fff13 	bx	r3

0001db30 <LD_E_SLA_off_IX_d>:
	char off = read8(ctx, ctx->PC++);
   1db30:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
   1db34:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	char off = read8(ctx, ctx->PC++);
   1db38:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
   1db3c:	e2833005 	add	r3, r3, #5
{
   1db40:	e92d4070 	push	{r4, r5, r6, lr}
   1db44:	e1a04000 	mov	r4, r0
	char off = read8(ctx, ctx->PC++);
   1db48:	e1c021bc 	strh	r2, [r0, #28]
   1db4c:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   1db50:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   1db54:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   1db58:	e12fff33 	blx	r3
	ctx->tstates += 3;
   1db5c:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	BR.E = doSL(ctx, read8(ctx, WR.IX + off), 1);
   1db60:	e1d410b8 	ldrh	r1, [r4, #8]
   1db64:	e6ff5070 	uxth	r5, r0
   1db68:	e2833003 	add	r3, r3, #3
   1db6c:	e0851001 	add	r1, r5, r1
   1db70:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   1db74:	e6ff1071 	uxth	r1, r1
   1db78:	e5943024 	ldr	r3, [r4, #36]	; 0x24
   1db7c:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   1db80:	e12fff33 	blx	r3
   1db84:	e1a01000 	mov	r1, r0
   1db88:	e1a00004 	mov	r0, r4
   1db8c:	ebfffea2 	bl	1d61c <doSL.constprop.27>
	ctx->tstates += 3;
   1db90:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	write8(ctx, WR.IX + off, BR.E);	
   1db94:	e1d410b8 	ldrh	r1, [r4, #8]
   1db98:	e2833003 	add	r3, r3, #3
   1db9c:	e0851001 	add	r1, r5, r1
	BR.E = doSL(ctx, read8(ctx, WR.IX + off), 1);
   1dba0:	e5c40004 	strb	r0, [r4, #4]
   1dba4:	e5843040 	str	r3, [r4, #64]	; 0x40
   1dba8:	e1a02000 	mov	r2, r0
	ctx->memWrite(ctx->memParam, addr, val);	
   1dbac:	e5943028 	ldr	r3, [r4, #40]	; 0x28
   1dbb0:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   1dbb4:	e6ff1071 	uxth	r1, r1
}
   1dbb8:	e8bd4070 	pop	{r4, r5, r6, lr}
   1dbbc:	e12fff13 	bx	r3

0001dbc0 <LD_E_SLA_off_IY_d>:
	char off = read8(ctx, ctx->PC++);
   1dbc0:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
   1dbc4:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	char off = read8(ctx, ctx->PC++);
   1dbc8:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
   1dbcc:	e2833005 	add	r3, r3, #5
{
   1dbd0:	e92d4070 	push	{r4, r5, r6, lr}
   1dbd4:	e1a04000 	mov	r4, r0
	char off = read8(ctx, ctx->PC++);
   1dbd8:	e1c021bc 	strh	r2, [r0, #28]
   1dbdc:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   1dbe0:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   1dbe4:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   1dbe8:	e12fff33 	blx	r3
	ctx->tstates += 3;
   1dbec:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	BR.E = doSL(ctx, read8(ctx, WR.IY + off), 1);
   1dbf0:	e1d410ba 	ldrh	r1, [r4, #10]
   1dbf4:	e6ff5070 	uxth	r5, r0
   1dbf8:	e2833003 	add	r3, r3, #3
   1dbfc:	e0851001 	add	r1, r5, r1
   1dc00:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   1dc04:	e6ff1071 	uxth	r1, r1
   1dc08:	e5943024 	ldr	r3, [r4, #36]	; 0x24
   1dc0c:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   1dc10:	e12fff33 	blx	r3
   1dc14:	e1a01000 	mov	r1, r0
   1dc18:	e1a00004 	mov	r0, r4
   1dc1c:	ebfffe7e 	bl	1d61c <doSL.constprop.27>
	ctx->tstates += 3;
   1dc20:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	write8(ctx, WR.IY + off, BR.E);	
   1dc24:	e1d410ba 	ldrh	r1, [r4, #10]
   1dc28:	e2833003 	add	r3, r3, #3
   1dc2c:	e0851001 	add	r1, r5, r1
	BR.E = doSL(ctx, read8(ctx, WR.IY + off), 1);
   1dc30:	e5c40004 	strb	r0, [r4, #4]
   1dc34:	e5843040 	str	r3, [r4, #64]	; 0x40
   1dc38:	e1a02000 	mov	r2, r0
	ctx->memWrite(ctx->memParam, addr, val);	
   1dc3c:	e5943028 	ldr	r3, [r4, #40]	; 0x28
   1dc40:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   1dc44:	e6ff1071 	uxth	r1, r1
}
   1dc48:	e8bd4070 	pop	{r4, r5, r6, lr}
   1dc4c:	e12fff13 	bx	r3

0001dc50 <LD_H_SLA_off_IX_d>:
	char off = read8(ctx, ctx->PC++);
   1dc50:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
   1dc54:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	char off = read8(ctx, ctx->PC++);
   1dc58:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
   1dc5c:	e2833005 	add	r3, r3, #5
{
   1dc60:	e92d4070 	push	{r4, r5, r6, lr}
   1dc64:	e1a04000 	mov	r4, r0
	char off = read8(ctx, ctx->PC++);
   1dc68:	e1c021bc 	strh	r2, [r0, #28]
   1dc6c:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   1dc70:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   1dc74:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   1dc78:	e12fff33 	blx	r3
	ctx->tstates += 3;
   1dc7c:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	BR.H = doSL(ctx, read8(ctx, WR.IX + off), 1);
   1dc80:	e1d410b8 	ldrh	r1, [r4, #8]
   1dc84:	e6ff5070 	uxth	r5, r0
   1dc88:	e2833003 	add	r3, r3, #3
   1dc8c:	e0851001 	add	r1, r5, r1
   1dc90:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   1dc94:	e6ff1071 	uxth	r1, r1
   1dc98:	e5943024 	ldr	r3, [r4, #36]	; 0x24
   1dc9c:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   1dca0:	e12fff33 	blx	r3
   1dca4:	e1a01000 	mov	r1, r0
   1dca8:	e1a00004 	mov	r0, r4
   1dcac:	ebfffe5a 	bl	1d61c <doSL.constprop.27>
	ctx->tstates += 3;
   1dcb0:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	write8(ctx, WR.IX + off, BR.H);	
   1dcb4:	e1d410b8 	ldrh	r1, [r4, #8]
   1dcb8:	e2833003 	add	r3, r3, #3
   1dcbc:	e0851001 	add	r1, r5, r1
	BR.H = doSL(ctx, read8(ctx, WR.IX + off), 1);
   1dcc0:	e5c40007 	strb	r0, [r4, #7]
   1dcc4:	e5843040 	str	r3, [r4, #64]	; 0x40
   1dcc8:	e1a02000 	mov	r2, r0
	ctx->memWrite(ctx->memParam, addr, val);	
   1dccc:	e5943028 	ldr	r3, [r4, #40]	; 0x28
   1dcd0:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   1dcd4:	e6ff1071 	uxth	r1, r1
}
   1dcd8:	e8bd4070 	pop	{r4, r5, r6, lr}
   1dcdc:	e12fff13 	bx	r3

0001dce0 <LD_H_SLA_off_IY_d>:
	char off = read8(ctx, ctx->PC++);
   1dce0:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
   1dce4:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	char off = read8(ctx, ctx->PC++);
   1dce8:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
   1dcec:	e2833005 	add	r3, r3, #5
{
   1dcf0:	e92d4070 	push	{r4, r5, r6, lr}
   1dcf4:	e1a04000 	mov	r4, r0
	char off = read8(ctx, ctx->PC++);
   1dcf8:	e1c021bc 	strh	r2, [r0, #28]
   1dcfc:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   1dd00:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   1dd04:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   1dd08:	e12fff33 	blx	r3
	ctx->tstates += 3;
   1dd0c:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	BR.H = doSL(ctx, read8(ctx, WR.IY + off), 1);
   1dd10:	e1d410ba 	ldrh	r1, [r4, #10]
   1dd14:	e6ff5070 	uxth	r5, r0
   1dd18:	e2833003 	add	r3, r3, #3
   1dd1c:	e0851001 	add	r1, r5, r1
   1dd20:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   1dd24:	e6ff1071 	uxth	r1, r1
   1dd28:	e5943024 	ldr	r3, [r4, #36]	; 0x24
   1dd2c:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   1dd30:	e12fff33 	blx	r3
   1dd34:	e1a01000 	mov	r1, r0
   1dd38:	e1a00004 	mov	r0, r4
   1dd3c:	ebfffe36 	bl	1d61c <doSL.constprop.27>
	ctx->tstates += 3;
   1dd40:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	write8(ctx, WR.IY + off, BR.H);	
   1dd44:	e1d410ba 	ldrh	r1, [r4, #10]
   1dd48:	e2833003 	add	r3, r3, #3
   1dd4c:	e0851001 	add	r1, r5, r1
	BR.H = doSL(ctx, read8(ctx, WR.IY + off), 1);
   1dd50:	e5c40007 	strb	r0, [r4, #7]
   1dd54:	e5843040 	str	r3, [r4, #64]	; 0x40
   1dd58:	e1a02000 	mov	r2, r0
	ctx->memWrite(ctx->memParam, addr, val);	
   1dd5c:	e5943028 	ldr	r3, [r4, #40]	; 0x28
   1dd60:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   1dd64:	e6ff1071 	uxth	r1, r1
}
   1dd68:	e8bd4070 	pop	{r4, r5, r6, lr}
   1dd6c:	e12fff13 	bx	r3

0001dd70 <LD_L_SLA_off_IX_d>:
	char off = read8(ctx, ctx->PC++);
   1dd70:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
   1dd74:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	char off = read8(ctx, ctx->PC++);
   1dd78:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
   1dd7c:	e2833005 	add	r3, r3, #5
{
   1dd80:	e92d4070 	push	{r4, r5, r6, lr}
   1dd84:	e1a04000 	mov	r4, r0
	char off = read8(ctx, ctx->PC++);
   1dd88:	e1c021bc 	strh	r2, [r0, #28]
   1dd8c:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   1dd90:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   1dd94:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   1dd98:	e12fff33 	blx	r3
	ctx->tstates += 3;
   1dd9c:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	BR.L = doSL(ctx, read8(ctx, WR.IX + off), 1);
   1dda0:	e1d410b8 	ldrh	r1, [r4, #8]
   1dda4:	e6ff5070 	uxth	r5, r0
   1dda8:	e2833003 	add	r3, r3, #3
   1ddac:	e0851001 	add	r1, r5, r1
   1ddb0:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   1ddb4:	e6ff1071 	uxth	r1, r1
   1ddb8:	e5943024 	ldr	r3, [r4, #36]	; 0x24
   1ddbc:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   1ddc0:	e12fff33 	blx	r3
   1ddc4:	e1a01000 	mov	r1, r0
   1ddc8:	e1a00004 	mov	r0, r4
   1ddcc:	ebfffe12 	bl	1d61c <doSL.constprop.27>
	ctx->tstates += 3;
   1ddd0:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	write8(ctx, WR.IX + off, BR.L);	
   1ddd4:	e1d410b8 	ldrh	r1, [r4, #8]
   1ddd8:	e2833003 	add	r3, r3, #3
   1dddc:	e0851001 	add	r1, r5, r1
	BR.L = doSL(ctx, read8(ctx, WR.IX + off), 1);
   1dde0:	e5c40006 	strb	r0, [r4, #6]
   1dde4:	e5843040 	str	r3, [r4, #64]	; 0x40
   1dde8:	e1a02000 	mov	r2, r0
	ctx->memWrite(ctx->memParam, addr, val);	
   1ddec:	e5943028 	ldr	r3, [r4, #40]	; 0x28
   1ddf0:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   1ddf4:	e6ff1071 	uxth	r1, r1
}
   1ddf8:	e8bd4070 	pop	{r4, r5, r6, lr}
   1ddfc:	e12fff13 	bx	r3

0001de00 <LD_L_SLA_off_IY_d>:
	char off = read8(ctx, ctx->PC++);
   1de00:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
   1de04:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	char off = read8(ctx, ctx->PC++);
   1de08:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
   1de0c:	e2833005 	add	r3, r3, #5
{
   1de10:	e92d4070 	push	{r4, r5, r6, lr}
   1de14:	e1a04000 	mov	r4, r0
	char off = read8(ctx, ctx->PC++);
   1de18:	e1c021bc 	strh	r2, [r0, #28]
   1de1c:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   1de20:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   1de24:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   1de28:	e12fff33 	blx	r3
	ctx->tstates += 3;
   1de2c:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	BR.L = doSL(ctx, read8(ctx, WR.IY + off), 1);
   1de30:	e1d410ba 	ldrh	r1, [r4, #10]
   1de34:	e6ff5070 	uxth	r5, r0
   1de38:	e2833003 	add	r3, r3, #3
   1de3c:	e0851001 	add	r1, r5, r1
   1de40:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   1de44:	e6ff1071 	uxth	r1, r1
   1de48:	e5943024 	ldr	r3, [r4, #36]	; 0x24
   1de4c:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   1de50:	e12fff33 	blx	r3
   1de54:	e1a01000 	mov	r1, r0
   1de58:	e1a00004 	mov	r0, r4
   1de5c:	ebfffdee 	bl	1d61c <doSL.constprop.27>
	ctx->tstates += 3;
   1de60:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	write8(ctx, WR.IY + off, BR.L);	
   1de64:	e1d410ba 	ldrh	r1, [r4, #10]
   1de68:	e2833003 	add	r3, r3, #3
   1de6c:	e0851001 	add	r1, r5, r1
	BR.L = doSL(ctx, read8(ctx, WR.IY + off), 1);
   1de70:	e5c40006 	strb	r0, [r4, #6]
   1de74:	e5843040 	str	r3, [r4, #64]	; 0x40
   1de78:	e1a02000 	mov	r2, r0
	ctx->memWrite(ctx->memParam, addr, val);	
   1de7c:	e5943028 	ldr	r3, [r4, #40]	; 0x28
   1de80:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   1de84:	e6ff1071 	uxth	r1, r1
}
   1de88:	e8bd4070 	pop	{r4, r5, r6, lr}
   1de8c:	e12fff13 	bx	r3

0001de90 <SLA_off_HL>:
	ctx->tstates += 3;
   1de90:	e5903040 	ldr	r3, [r0, #64]	; 0x40
{
   1de94:	e92d4070 	push	{r4, r5, r6, lr}
	write8(ctx, WR.HL, doSL(ctx, read8(ctx, WR.HL), IA_A));
   1de98:	e1d050b6 	ldrh	r5, [r0, #6]
   1de9c:	e2833004 	add	r3, r3, #4
{
   1dea0:	e1a04000 	mov	r4, r0
   1dea4:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   1dea8:	e1a01005 	mov	r1, r5
   1deac:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   1deb0:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   1deb4:	e12fff33 	blx	r3
	write8(ctx, WR.HL, doSL(ctx, read8(ctx, WR.HL), IA_A));
   1deb8:	e1a01000 	mov	r1, r0
   1debc:	e1a00004 	mov	r0, r4
   1dec0:	ebfffdd5 	bl	1d61c <doSL.constprop.27>
	ctx->tstates += 3;
   1dec4:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	ctx->memWrite(ctx->memParam, addr, val);	
   1dec8:	e1a02000 	mov	r2, r0
	ctx->tstates += 3;
   1decc:	e2833003 	add	r3, r3, #3
   1ded0:	e5843040 	str	r3, [r4, #64]	; 0x40
	ctx->memWrite(ctx->memParam, addr, val);	
   1ded4:	e1a01005 	mov	r1, r5
   1ded8:	e5943028 	ldr	r3, [r4, #40]	; 0x28
   1dedc:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
}
   1dee0:	e8bd4070 	pop	{r4, r5, r6, lr}
   1dee4:	e12fff13 	bx	r3

0001dee8 <SLA_off_IX_d>:
	char off = read8(ctx, ctx->PC++);	
   1dee8:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
   1deec:	e5903040 	ldr	r3, [r0, #64]	; 0x40
{
   1def0:	e92d4070 	push	{r4, r5, r6, lr}
	char off = read8(ctx, ctx->PC++);	
   1def4:	e2812001 	add	r2, r1, #1
{
   1def8:	e1a04000 	mov	r4, r0
	ctx->tstates += 3;
   1defc:	e2833005 	add	r3, r3, #5
	char off = read8(ctx, ctx->PC++);	
   1df00:	e1c021bc 	strh	r2, [r0, #28]
   1df04:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   1df08:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   1df0c:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   1df10:	e12fff33 	blx	r3
	write8(ctx, WR.IX + off, doSL(ctx, read8(ctx, WR.IX + off), IA_A));
   1df14:	e1d450b8 	ldrh	r5, [r4, #8]
	ctx->tstates += 3;
   1df18:	e5943040 	ldr	r3, [r4, #64]	; 0x40
   1df1c:	e0855000 	add	r5, r5, r0
   1df20:	e6ff5075 	uxth	r5, r5
   1df24:	e2833003 	add	r3, r3, #3
   1df28:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   1df2c:	e1a01005 	mov	r1, r5
   1df30:	e5943024 	ldr	r3, [r4, #36]	; 0x24
   1df34:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   1df38:	e12fff33 	blx	r3
   1df3c:	e1a01000 	mov	r1, r0
   1df40:	e1a00004 	mov	r0, r4
   1df44:	ebfffdb4 	bl	1d61c <doSL.constprop.27>
	ctx->tstates += 3;
   1df48:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	ctx->memWrite(ctx->memParam, addr, val);	
   1df4c:	e1a01005 	mov	r1, r5
	ctx->tstates += 3;
   1df50:	e2833003 	add	r3, r3, #3
   1df54:	e5843040 	str	r3, [r4, #64]	; 0x40
	ctx->memWrite(ctx->memParam, addr, val);	
   1df58:	e1a02000 	mov	r2, r0
   1df5c:	e5943028 	ldr	r3, [r4, #40]	; 0x28
   1df60:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
}
   1df64:	e8bd4070 	pop	{r4, r5, r6, lr}
   1df68:	e12fff13 	bx	r3

0001df6c <SLA_off_IY_d>:
	char off = read8(ctx, ctx->PC++);	
   1df6c:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
   1df70:	e5903040 	ldr	r3, [r0, #64]	; 0x40
{
   1df74:	e92d4070 	push	{r4, r5, r6, lr}
	char off = read8(ctx, ctx->PC++);	
   1df78:	e2812001 	add	r2, r1, #1
{
   1df7c:	e1a04000 	mov	r4, r0
	ctx->tstates += 3;
   1df80:	e2833005 	add	r3, r3, #5
	char off = read8(ctx, ctx->PC++);	
   1df84:	e1c021bc 	strh	r2, [r0, #28]
   1df88:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   1df8c:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   1df90:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   1df94:	e12fff33 	blx	r3
	write8(ctx, WR.IY + off, doSL(ctx, read8(ctx, WR.IY + off), IA_A));
   1df98:	e1d450ba 	ldrh	r5, [r4, #10]
	ctx->tstates += 3;
   1df9c:	e5943040 	ldr	r3, [r4, #64]	; 0x40
   1dfa0:	e0855000 	add	r5, r5, r0
   1dfa4:	e6ff5075 	uxth	r5, r5
   1dfa8:	e2833003 	add	r3, r3, #3
   1dfac:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   1dfb0:	e1a01005 	mov	r1, r5
   1dfb4:	e5943024 	ldr	r3, [r4, #36]	; 0x24
   1dfb8:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   1dfbc:	e12fff33 	blx	r3
   1dfc0:	e1a01000 	mov	r1, r0
   1dfc4:	e1a00004 	mov	r0, r4
   1dfc8:	ebfffd93 	bl	1d61c <doSL.constprop.27>
	ctx->tstates += 3;
   1dfcc:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	ctx->memWrite(ctx->memParam, addr, val);	
   1dfd0:	e1a01005 	mov	r1, r5
	ctx->tstates += 3;
   1dfd4:	e2833003 	add	r3, r3, #3
   1dfd8:	e5843040 	str	r3, [r4, #64]	; 0x40
	ctx->memWrite(ctx->memParam, addr, val);	
   1dfdc:	e1a02000 	mov	r2, r0
   1dfe0:	e5943028 	ldr	r3, [r4, #40]	; 0x28
   1dfe4:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
}
   1dfe8:	e8bd4070 	pop	{r4, r5, r6, lr}
   1dfec:	e12fff13 	bx	r3

0001dff0 <doSL.constprop.28>:
static byte doSL (Z80Context* ctx, byte val, int isArith)
   1dff0:	e1a02000 	mov	r2, r0
   1dff4:	e5d03000 	ldrb	r3, [r0]
	if (val)
   1dff8:	e3110080 	tst	r1, #128	; 0x80
    val <<= 1;
   1dffc:	e1a01081 	lsl	r1, r1, #1
   1e000:	e6ef1071 	uxtb	r1, r1
	BR.F |= flag;
   1e004:	13833001 	orrne	r3, r3, #1
	BR.F &= ~flag;
   1e008:	020330fe 	andeq	r3, r3, #254	; 0xfe
	if (val)
   1e00c:	e3110020 	tst	r1, #32
	BR.F |= flag;
   1e010:	13833020 	orrne	r3, r3, #32
	BR.F &= ~flag;
   1e014:	020330df 	andeq	r3, r3, #223	; 0xdf
	if (val)
   1e018:	e3110008 	tst	r1, #8
	BR.F |= flag;
   1e01c:	13833008 	orrne	r3, r3, #8
	BR.F &= ~flag;
   1e020:	020330f7 	andeq	r3, r3, #247	; 0xf7
        val |= 1;
   1e024:	e3810001 	orr	r0, r1, #1
	BR.F &= ~flag;
   1e028:	e6af3073 	sxtb	r3, r3
	VALFLAG(F_PV, parityBit[val]);
   1e02c:	e59f1024 	ldr	r1, [pc, #36]	; 1e058 <doSL.constprop.28+0x68>
	if (val)
   1e030:	e3100080 	tst	r0, #128	; 0x80
	BR.F |= flag;
   1e034:	e203306d 	and	r3, r3, #109	; 0x6d
   1e038:	13833080 	orrne	r3, r3, #128	; 0x80
	if (val)
   1e03c:	e7911100 	ldr	r1, [r1, r0, lsl #2]
	BR.F &= ~flag;
   1e040:	e6af3073 	sxtb	r3, r3
	BR.F |= flag;
   1e044:	e20330a9 	and	r3, r3, #169	; 0xa9
	if (val)
   1e048:	e3510000 	cmp	r1, #0
	BR.F |= flag;
   1e04c:	13833004 	orrne	r3, r3, #4
   1e050:	e5c23000 	strb	r3, [r2]
}
   1e054:	e12fff1e 	bx	lr
   1e058:	0004f000 	.word	0x0004f000

0001e05c <LD_A_SLL_off_IX_d>:
	char off = read8(ctx, ctx->PC++);
   1e05c:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
   1e060:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	char off = read8(ctx, ctx->PC++);
   1e064:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
   1e068:	e2833005 	add	r3, r3, #5
{
   1e06c:	e92d4070 	push	{r4, r5, r6, lr}
   1e070:	e1a04000 	mov	r4, r0
	char off = read8(ctx, ctx->PC++);
   1e074:	e1c021bc 	strh	r2, [r0, #28]
   1e078:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   1e07c:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   1e080:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   1e084:	e12fff33 	blx	r3
	ctx->tstates += 3;
   1e088:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	BR.A = doSL(ctx, read8(ctx, WR.IX + off), 0);
   1e08c:	e1d410b8 	ldrh	r1, [r4, #8]
   1e090:	e6ff5070 	uxth	r5, r0
   1e094:	e2833003 	add	r3, r3, #3
   1e098:	e0851001 	add	r1, r5, r1
   1e09c:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   1e0a0:	e6ff1071 	uxth	r1, r1
   1e0a4:	e5943024 	ldr	r3, [r4, #36]	; 0x24
   1e0a8:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   1e0ac:	e12fff33 	blx	r3
   1e0b0:	e1a01000 	mov	r1, r0
   1e0b4:	e1a00004 	mov	r0, r4
   1e0b8:	ebffffcc 	bl	1dff0 <doSL.constprop.28>
	ctx->tstates += 3;
   1e0bc:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	write8(ctx, WR.IX + off, BR.A);	
   1e0c0:	e1d410b8 	ldrh	r1, [r4, #8]
   1e0c4:	e2833003 	add	r3, r3, #3
   1e0c8:	e0851001 	add	r1, r5, r1
	BR.A = doSL(ctx, read8(ctx, WR.IX + off), 0);
   1e0cc:	e5c40001 	strb	r0, [r4, #1]
   1e0d0:	e5843040 	str	r3, [r4, #64]	; 0x40
   1e0d4:	e1a02000 	mov	r2, r0
	ctx->memWrite(ctx->memParam, addr, val);	
   1e0d8:	e5943028 	ldr	r3, [r4, #40]	; 0x28
   1e0dc:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   1e0e0:	e6ff1071 	uxth	r1, r1
}
   1e0e4:	e8bd4070 	pop	{r4, r5, r6, lr}
   1e0e8:	e12fff13 	bx	r3

0001e0ec <LD_A_SLL_off_IY_d>:
	char off = read8(ctx, ctx->PC++);
   1e0ec:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
   1e0f0:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	char off = read8(ctx, ctx->PC++);
   1e0f4:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
   1e0f8:	e2833005 	add	r3, r3, #5
{
   1e0fc:	e92d4070 	push	{r4, r5, r6, lr}
   1e100:	e1a04000 	mov	r4, r0
	char off = read8(ctx, ctx->PC++);
   1e104:	e1c021bc 	strh	r2, [r0, #28]
   1e108:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   1e10c:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   1e110:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   1e114:	e12fff33 	blx	r3
	ctx->tstates += 3;
   1e118:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	BR.A = doSL(ctx, read8(ctx, WR.IY + off), 0);
   1e11c:	e1d410ba 	ldrh	r1, [r4, #10]
   1e120:	e6ff5070 	uxth	r5, r0
   1e124:	e2833003 	add	r3, r3, #3
   1e128:	e0851001 	add	r1, r5, r1
   1e12c:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   1e130:	e6ff1071 	uxth	r1, r1
   1e134:	e5943024 	ldr	r3, [r4, #36]	; 0x24
   1e138:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   1e13c:	e12fff33 	blx	r3
   1e140:	e1a01000 	mov	r1, r0
   1e144:	e1a00004 	mov	r0, r4
   1e148:	ebffffa8 	bl	1dff0 <doSL.constprop.28>
	ctx->tstates += 3;
   1e14c:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	write8(ctx, WR.IY + off, BR.A);	
   1e150:	e1d410ba 	ldrh	r1, [r4, #10]
   1e154:	e2833003 	add	r3, r3, #3
   1e158:	e0851001 	add	r1, r5, r1
	BR.A = doSL(ctx, read8(ctx, WR.IY + off), 0);
   1e15c:	e5c40001 	strb	r0, [r4, #1]
   1e160:	e5843040 	str	r3, [r4, #64]	; 0x40
   1e164:	e1a02000 	mov	r2, r0
	ctx->memWrite(ctx->memParam, addr, val);	
   1e168:	e5943028 	ldr	r3, [r4, #40]	; 0x28
   1e16c:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   1e170:	e6ff1071 	uxth	r1, r1
}
   1e174:	e8bd4070 	pop	{r4, r5, r6, lr}
   1e178:	e12fff13 	bx	r3

0001e17c <LD_B_SLL_off_IX_d>:
	char off = read8(ctx, ctx->PC++);
   1e17c:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
   1e180:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	char off = read8(ctx, ctx->PC++);
   1e184:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
   1e188:	e2833005 	add	r3, r3, #5
{
   1e18c:	e92d4070 	push	{r4, r5, r6, lr}
   1e190:	e1a04000 	mov	r4, r0
	char off = read8(ctx, ctx->PC++);
   1e194:	e1c021bc 	strh	r2, [r0, #28]
   1e198:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   1e19c:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   1e1a0:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   1e1a4:	e12fff33 	blx	r3
	ctx->tstates += 3;
   1e1a8:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	BR.B = doSL(ctx, read8(ctx, WR.IX + off), 0);
   1e1ac:	e1d410b8 	ldrh	r1, [r4, #8]
   1e1b0:	e6ff5070 	uxth	r5, r0
   1e1b4:	e2833003 	add	r3, r3, #3
   1e1b8:	e0851001 	add	r1, r5, r1
   1e1bc:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   1e1c0:	e6ff1071 	uxth	r1, r1
   1e1c4:	e5943024 	ldr	r3, [r4, #36]	; 0x24
   1e1c8:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   1e1cc:	e12fff33 	blx	r3
   1e1d0:	e1a01000 	mov	r1, r0
   1e1d4:	e1a00004 	mov	r0, r4
   1e1d8:	ebffff84 	bl	1dff0 <doSL.constprop.28>
	ctx->tstates += 3;
   1e1dc:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	write8(ctx, WR.IX + off, BR.B);	
   1e1e0:	e1d410b8 	ldrh	r1, [r4, #8]
   1e1e4:	e2833003 	add	r3, r3, #3
   1e1e8:	e0851001 	add	r1, r5, r1
	BR.B = doSL(ctx, read8(ctx, WR.IX + off), 0);
   1e1ec:	e5c40003 	strb	r0, [r4, #3]
   1e1f0:	e5843040 	str	r3, [r4, #64]	; 0x40
   1e1f4:	e1a02000 	mov	r2, r0
	ctx->memWrite(ctx->memParam, addr, val);	
   1e1f8:	e5943028 	ldr	r3, [r4, #40]	; 0x28
   1e1fc:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   1e200:	e6ff1071 	uxth	r1, r1
}
   1e204:	e8bd4070 	pop	{r4, r5, r6, lr}
   1e208:	e12fff13 	bx	r3

0001e20c <LD_B_SLL_off_IY_d>:
	char off = read8(ctx, ctx->PC++);
   1e20c:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
   1e210:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	char off = read8(ctx, ctx->PC++);
   1e214:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
   1e218:	e2833005 	add	r3, r3, #5
{
   1e21c:	e92d4070 	push	{r4, r5, r6, lr}
   1e220:	e1a04000 	mov	r4, r0
	char off = read8(ctx, ctx->PC++);
   1e224:	e1c021bc 	strh	r2, [r0, #28]
   1e228:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   1e22c:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   1e230:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   1e234:	e12fff33 	blx	r3
	ctx->tstates += 3;
   1e238:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	BR.B = doSL(ctx, read8(ctx, WR.IY + off), 0);
   1e23c:	e1d410ba 	ldrh	r1, [r4, #10]
   1e240:	e6ff5070 	uxth	r5, r0
   1e244:	e2833003 	add	r3, r3, #3
   1e248:	e0851001 	add	r1, r5, r1
   1e24c:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   1e250:	e6ff1071 	uxth	r1, r1
   1e254:	e5943024 	ldr	r3, [r4, #36]	; 0x24
   1e258:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   1e25c:	e12fff33 	blx	r3
   1e260:	e1a01000 	mov	r1, r0
   1e264:	e1a00004 	mov	r0, r4
   1e268:	ebffff60 	bl	1dff0 <doSL.constprop.28>
	ctx->tstates += 3;
   1e26c:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	write8(ctx, WR.IY + off, BR.B);	
   1e270:	e1d410ba 	ldrh	r1, [r4, #10]
   1e274:	e2833003 	add	r3, r3, #3
   1e278:	e0851001 	add	r1, r5, r1
	BR.B = doSL(ctx, read8(ctx, WR.IY + off), 0);
   1e27c:	e5c40003 	strb	r0, [r4, #3]
   1e280:	e5843040 	str	r3, [r4, #64]	; 0x40
   1e284:	e1a02000 	mov	r2, r0
	ctx->memWrite(ctx->memParam, addr, val);	
   1e288:	e5943028 	ldr	r3, [r4, #40]	; 0x28
   1e28c:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   1e290:	e6ff1071 	uxth	r1, r1
}
   1e294:	e8bd4070 	pop	{r4, r5, r6, lr}
   1e298:	e12fff13 	bx	r3

0001e29c <LD_C_SLL_off_IX_d>:
	char off = read8(ctx, ctx->PC++);
   1e29c:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
   1e2a0:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	char off = read8(ctx, ctx->PC++);
   1e2a4:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
   1e2a8:	e2833005 	add	r3, r3, #5
{
   1e2ac:	e92d4070 	push	{r4, r5, r6, lr}
   1e2b0:	e1a04000 	mov	r4, r0
	char off = read8(ctx, ctx->PC++);
   1e2b4:	e1c021bc 	strh	r2, [r0, #28]
   1e2b8:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   1e2bc:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   1e2c0:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   1e2c4:	e12fff33 	blx	r3
	ctx->tstates += 3;
   1e2c8:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	BR.C = doSL(ctx, read8(ctx, WR.IX + off), 0);
   1e2cc:	e1d410b8 	ldrh	r1, [r4, #8]
   1e2d0:	e6ff5070 	uxth	r5, r0
   1e2d4:	e2833003 	add	r3, r3, #3
   1e2d8:	e0851001 	add	r1, r5, r1
   1e2dc:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   1e2e0:	e6ff1071 	uxth	r1, r1
   1e2e4:	e5943024 	ldr	r3, [r4, #36]	; 0x24
   1e2e8:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   1e2ec:	e12fff33 	blx	r3
   1e2f0:	e1a01000 	mov	r1, r0
   1e2f4:	e1a00004 	mov	r0, r4
   1e2f8:	ebffff3c 	bl	1dff0 <doSL.constprop.28>
	ctx->tstates += 3;
   1e2fc:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	write8(ctx, WR.IX + off, BR.C);	
   1e300:	e1d410b8 	ldrh	r1, [r4, #8]
   1e304:	e2833003 	add	r3, r3, #3
   1e308:	e0851001 	add	r1, r5, r1
	BR.C = doSL(ctx, read8(ctx, WR.IX + off), 0);
   1e30c:	e5c40002 	strb	r0, [r4, #2]
   1e310:	e5843040 	str	r3, [r4, #64]	; 0x40
   1e314:	e1a02000 	mov	r2, r0
	ctx->memWrite(ctx->memParam, addr, val);	
   1e318:	e5943028 	ldr	r3, [r4, #40]	; 0x28
   1e31c:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   1e320:	e6ff1071 	uxth	r1, r1
}
   1e324:	e8bd4070 	pop	{r4, r5, r6, lr}
   1e328:	e12fff13 	bx	r3

0001e32c <LD_C_SLL_off_IY_d>:
	char off = read8(ctx, ctx->PC++);
   1e32c:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
   1e330:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	char off = read8(ctx, ctx->PC++);
   1e334:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
   1e338:	e2833005 	add	r3, r3, #5
{
   1e33c:	e92d4070 	push	{r4, r5, r6, lr}
   1e340:	e1a04000 	mov	r4, r0
	char off = read8(ctx, ctx->PC++);
   1e344:	e1c021bc 	strh	r2, [r0, #28]
   1e348:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   1e34c:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   1e350:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   1e354:	e12fff33 	blx	r3
	ctx->tstates += 3;
   1e358:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	BR.C = doSL(ctx, read8(ctx, WR.IY + off), 0);
   1e35c:	e1d410ba 	ldrh	r1, [r4, #10]
   1e360:	e6ff5070 	uxth	r5, r0
   1e364:	e2833003 	add	r3, r3, #3
   1e368:	e0851001 	add	r1, r5, r1
   1e36c:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   1e370:	e6ff1071 	uxth	r1, r1
   1e374:	e5943024 	ldr	r3, [r4, #36]	; 0x24
   1e378:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   1e37c:	e12fff33 	blx	r3
   1e380:	e1a01000 	mov	r1, r0
   1e384:	e1a00004 	mov	r0, r4
   1e388:	ebffff18 	bl	1dff0 <doSL.constprop.28>
	ctx->tstates += 3;
   1e38c:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	write8(ctx, WR.IY + off, BR.C);	
   1e390:	e1d410ba 	ldrh	r1, [r4, #10]
   1e394:	e2833003 	add	r3, r3, #3
   1e398:	e0851001 	add	r1, r5, r1
	BR.C = doSL(ctx, read8(ctx, WR.IY + off), 0);
   1e39c:	e5c40002 	strb	r0, [r4, #2]
   1e3a0:	e5843040 	str	r3, [r4, #64]	; 0x40
   1e3a4:	e1a02000 	mov	r2, r0
	ctx->memWrite(ctx->memParam, addr, val);	
   1e3a8:	e5943028 	ldr	r3, [r4, #40]	; 0x28
   1e3ac:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   1e3b0:	e6ff1071 	uxth	r1, r1
}
   1e3b4:	e8bd4070 	pop	{r4, r5, r6, lr}
   1e3b8:	e12fff13 	bx	r3

0001e3bc <LD_D_SLL_off_IX_d>:
	char off = read8(ctx, ctx->PC++);
   1e3bc:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
   1e3c0:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	char off = read8(ctx, ctx->PC++);
   1e3c4:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
   1e3c8:	e2833005 	add	r3, r3, #5
{
   1e3cc:	e92d4070 	push	{r4, r5, r6, lr}
   1e3d0:	e1a04000 	mov	r4, r0
	char off = read8(ctx, ctx->PC++);
   1e3d4:	e1c021bc 	strh	r2, [r0, #28]
   1e3d8:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   1e3dc:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   1e3e0:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   1e3e4:	e12fff33 	blx	r3
	ctx->tstates += 3;
   1e3e8:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	BR.D = doSL(ctx, read8(ctx, WR.IX + off), 0);
   1e3ec:	e1d410b8 	ldrh	r1, [r4, #8]
   1e3f0:	e6ff5070 	uxth	r5, r0
   1e3f4:	e2833003 	add	r3, r3, #3
   1e3f8:	e0851001 	add	r1, r5, r1
   1e3fc:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   1e400:	e6ff1071 	uxth	r1, r1
   1e404:	e5943024 	ldr	r3, [r4, #36]	; 0x24
   1e408:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   1e40c:	e12fff33 	blx	r3
   1e410:	e1a01000 	mov	r1, r0
   1e414:	e1a00004 	mov	r0, r4
   1e418:	ebfffef4 	bl	1dff0 <doSL.constprop.28>
	ctx->tstates += 3;
   1e41c:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	write8(ctx, WR.IX + off, BR.D);	
   1e420:	e1d410b8 	ldrh	r1, [r4, #8]
   1e424:	e2833003 	add	r3, r3, #3
   1e428:	e0851001 	add	r1, r5, r1
	BR.D = doSL(ctx, read8(ctx, WR.IX + off), 0);
   1e42c:	e5c40005 	strb	r0, [r4, #5]
   1e430:	e5843040 	str	r3, [r4, #64]	; 0x40
   1e434:	e1a02000 	mov	r2, r0
	ctx->memWrite(ctx->memParam, addr, val);	
   1e438:	e5943028 	ldr	r3, [r4, #40]	; 0x28
   1e43c:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   1e440:	e6ff1071 	uxth	r1, r1
}
   1e444:	e8bd4070 	pop	{r4, r5, r6, lr}
   1e448:	e12fff13 	bx	r3

0001e44c <LD_D_SLL_off_IY_d>:
	char off = read8(ctx, ctx->PC++);
   1e44c:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
   1e450:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	char off = read8(ctx, ctx->PC++);
   1e454:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
   1e458:	e2833005 	add	r3, r3, #5
{
   1e45c:	e92d4070 	push	{r4, r5, r6, lr}
   1e460:	e1a04000 	mov	r4, r0
	char off = read8(ctx, ctx->PC++);
   1e464:	e1c021bc 	strh	r2, [r0, #28]
   1e468:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   1e46c:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   1e470:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   1e474:	e12fff33 	blx	r3
	ctx->tstates += 3;
   1e478:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	BR.D = doSL(ctx, read8(ctx, WR.IY + off), 0);
   1e47c:	e1d410ba 	ldrh	r1, [r4, #10]
   1e480:	e6ff5070 	uxth	r5, r0
   1e484:	e2833003 	add	r3, r3, #3
   1e488:	e0851001 	add	r1, r5, r1
   1e48c:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   1e490:	e6ff1071 	uxth	r1, r1
   1e494:	e5943024 	ldr	r3, [r4, #36]	; 0x24
   1e498:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   1e49c:	e12fff33 	blx	r3
   1e4a0:	e1a01000 	mov	r1, r0
   1e4a4:	e1a00004 	mov	r0, r4
   1e4a8:	ebfffed0 	bl	1dff0 <doSL.constprop.28>
	ctx->tstates += 3;
   1e4ac:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	write8(ctx, WR.IY + off, BR.D);	
   1e4b0:	e1d410ba 	ldrh	r1, [r4, #10]
   1e4b4:	e2833003 	add	r3, r3, #3
   1e4b8:	e0851001 	add	r1, r5, r1
	BR.D = doSL(ctx, read8(ctx, WR.IY + off), 0);
   1e4bc:	e5c40005 	strb	r0, [r4, #5]
   1e4c0:	e5843040 	str	r3, [r4, #64]	; 0x40
   1e4c4:	e1a02000 	mov	r2, r0
	ctx->memWrite(ctx->memParam, addr, val);	
   1e4c8:	e5943028 	ldr	r3, [r4, #40]	; 0x28
   1e4cc:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   1e4d0:	e6ff1071 	uxth	r1, r1
}
   1e4d4:	e8bd4070 	pop	{r4, r5, r6, lr}
   1e4d8:	e12fff13 	bx	r3

0001e4dc <LD_E_SLL_off_IX_d>:
	char off = read8(ctx, ctx->PC++);
   1e4dc:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
   1e4e0:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	char off = read8(ctx, ctx->PC++);
   1e4e4:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
   1e4e8:	e2833005 	add	r3, r3, #5
{
   1e4ec:	e92d4070 	push	{r4, r5, r6, lr}
   1e4f0:	e1a04000 	mov	r4, r0
	char off = read8(ctx, ctx->PC++);
   1e4f4:	e1c021bc 	strh	r2, [r0, #28]
   1e4f8:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   1e4fc:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   1e500:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   1e504:	e12fff33 	blx	r3
	ctx->tstates += 3;
   1e508:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	BR.E = doSL(ctx, read8(ctx, WR.IX + off), 0);
   1e50c:	e1d410b8 	ldrh	r1, [r4, #8]
   1e510:	e6ff5070 	uxth	r5, r0
   1e514:	e2833003 	add	r3, r3, #3
   1e518:	e0851001 	add	r1, r5, r1
   1e51c:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   1e520:	e6ff1071 	uxth	r1, r1
   1e524:	e5943024 	ldr	r3, [r4, #36]	; 0x24
   1e528:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   1e52c:	e12fff33 	blx	r3
   1e530:	e1a01000 	mov	r1, r0
   1e534:	e1a00004 	mov	r0, r4
   1e538:	ebfffeac 	bl	1dff0 <doSL.constprop.28>
	ctx->tstates += 3;
   1e53c:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	write8(ctx, WR.IX + off, BR.E);	
   1e540:	e1d410b8 	ldrh	r1, [r4, #8]
   1e544:	e2833003 	add	r3, r3, #3
   1e548:	e0851001 	add	r1, r5, r1
	BR.E = doSL(ctx, read8(ctx, WR.IX + off), 0);
   1e54c:	e5c40004 	strb	r0, [r4, #4]
   1e550:	e5843040 	str	r3, [r4, #64]	; 0x40
   1e554:	e1a02000 	mov	r2, r0
	ctx->memWrite(ctx->memParam, addr, val);	
   1e558:	e5943028 	ldr	r3, [r4, #40]	; 0x28
   1e55c:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   1e560:	e6ff1071 	uxth	r1, r1
}
   1e564:	e8bd4070 	pop	{r4, r5, r6, lr}
   1e568:	e12fff13 	bx	r3

0001e56c <LD_E_SLL_off_IY_d>:
	char off = read8(ctx, ctx->PC++);
   1e56c:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
   1e570:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	char off = read8(ctx, ctx->PC++);
   1e574:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
   1e578:	e2833005 	add	r3, r3, #5
{
   1e57c:	e92d4070 	push	{r4, r5, r6, lr}
   1e580:	e1a04000 	mov	r4, r0
	char off = read8(ctx, ctx->PC++);
   1e584:	e1c021bc 	strh	r2, [r0, #28]
   1e588:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   1e58c:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   1e590:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   1e594:	e12fff33 	blx	r3
	ctx->tstates += 3;
   1e598:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	BR.E = doSL(ctx, read8(ctx, WR.IY + off), 0);
   1e59c:	e1d410ba 	ldrh	r1, [r4, #10]
   1e5a0:	e6ff5070 	uxth	r5, r0
   1e5a4:	e2833003 	add	r3, r3, #3
   1e5a8:	e0851001 	add	r1, r5, r1
   1e5ac:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   1e5b0:	e6ff1071 	uxth	r1, r1
   1e5b4:	e5943024 	ldr	r3, [r4, #36]	; 0x24
   1e5b8:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   1e5bc:	e12fff33 	blx	r3
   1e5c0:	e1a01000 	mov	r1, r0
   1e5c4:	e1a00004 	mov	r0, r4
   1e5c8:	ebfffe88 	bl	1dff0 <doSL.constprop.28>
	ctx->tstates += 3;
   1e5cc:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	write8(ctx, WR.IY + off, BR.E);	
   1e5d0:	e1d410ba 	ldrh	r1, [r4, #10]
   1e5d4:	e2833003 	add	r3, r3, #3
   1e5d8:	e0851001 	add	r1, r5, r1
	BR.E = doSL(ctx, read8(ctx, WR.IY + off), 0);
   1e5dc:	e5c40004 	strb	r0, [r4, #4]
   1e5e0:	e5843040 	str	r3, [r4, #64]	; 0x40
   1e5e4:	e1a02000 	mov	r2, r0
	ctx->memWrite(ctx->memParam, addr, val);	
   1e5e8:	e5943028 	ldr	r3, [r4, #40]	; 0x28
   1e5ec:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   1e5f0:	e6ff1071 	uxth	r1, r1
}
   1e5f4:	e8bd4070 	pop	{r4, r5, r6, lr}
   1e5f8:	e12fff13 	bx	r3

0001e5fc <LD_H_SLL_off_IX_d>:
	char off = read8(ctx, ctx->PC++);
   1e5fc:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
   1e600:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	char off = read8(ctx, ctx->PC++);
   1e604:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
   1e608:	e2833005 	add	r3, r3, #5
{
   1e60c:	e92d4070 	push	{r4, r5, r6, lr}
   1e610:	e1a04000 	mov	r4, r0
	char off = read8(ctx, ctx->PC++);
   1e614:	e1c021bc 	strh	r2, [r0, #28]
   1e618:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   1e61c:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   1e620:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   1e624:	e12fff33 	blx	r3
	ctx->tstates += 3;
   1e628:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	BR.H = doSL(ctx, read8(ctx, WR.IX + off), 0);
   1e62c:	e1d410b8 	ldrh	r1, [r4, #8]
   1e630:	e6ff5070 	uxth	r5, r0
   1e634:	e2833003 	add	r3, r3, #3
   1e638:	e0851001 	add	r1, r5, r1
   1e63c:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   1e640:	e6ff1071 	uxth	r1, r1
   1e644:	e5943024 	ldr	r3, [r4, #36]	; 0x24
   1e648:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   1e64c:	e12fff33 	blx	r3
   1e650:	e1a01000 	mov	r1, r0
   1e654:	e1a00004 	mov	r0, r4
   1e658:	ebfffe64 	bl	1dff0 <doSL.constprop.28>
	ctx->tstates += 3;
   1e65c:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	write8(ctx, WR.IX + off, BR.H);	
   1e660:	e1d410b8 	ldrh	r1, [r4, #8]
   1e664:	e2833003 	add	r3, r3, #3
   1e668:	e0851001 	add	r1, r5, r1
	BR.H = doSL(ctx, read8(ctx, WR.IX + off), 0);
   1e66c:	e5c40007 	strb	r0, [r4, #7]
   1e670:	e5843040 	str	r3, [r4, #64]	; 0x40
   1e674:	e1a02000 	mov	r2, r0
	ctx->memWrite(ctx->memParam, addr, val);	
   1e678:	e5943028 	ldr	r3, [r4, #40]	; 0x28
   1e67c:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   1e680:	e6ff1071 	uxth	r1, r1
}
   1e684:	e8bd4070 	pop	{r4, r5, r6, lr}
   1e688:	e12fff13 	bx	r3

0001e68c <LD_H_SLL_off_IY_d>:
	char off = read8(ctx, ctx->PC++);
   1e68c:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
   1e690:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	char off = read8(ctx, ctx->PC++);
   1e694:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
   1e698:	e2833005 	add	r3, r3, #5
{
   1e69c:	e92d4070 	push	{r4, r5, r6, lr}
   1e6a0:	e1a04000 	mov	r4, r0
	char off = read8(ctx, ctx->PC++);
   1e6a4:	e1c021bc 	strh	r2, [r0, #28]
   1e6a8:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   1e6ac:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   1e6b0:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   1e6b4:	e12fff33 	blx	r3
	ctx->tstates += 3;
   1e6b8:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	BR.H = doSL(ctx, read8(ctx, WR.IY + off), 0);
   1e6bc:	e1d410ba 	ldrh	r1, [r4, #10]
   1e6c0:	e6ff5070 	uxth	r5, r0
   1e6c4:	e2833003 	add	r3, r3, #3
   1e6c8:	e0851001 	add	r1, r5, r1
   1e6cc:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   1e6d0:	e6ff1071 	uxth	r1, r1
   1e6d4:	e5943024 	ldr	r3, [r4, #36]	; 0x24
   1e6d8:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   1e6dc:	e12fff33 	blx	r3
   1e6e0:	e1a01000 	mov	r1, r0
   1e6e4:	e1a00004 	mov	r0, r4
   1e6e8:	ebfffe40 	bl	1dff0 <doSL.constprop.28>
	ctx->tstates += 3;
   1e6ec:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	write8(ctx, WR.IY + off, BR.H);	
   1e6f0:	e1d410ba 	ldrh	r1, [r4, #10]
   1e6f4:	e2833003 	add	r3, r3, #3
   1e6f8:	e0851001 	add	r1, r5, r1
	BR.H = doSL(ctx, read8(ctx, WR.IY + off), 0);
   1e6fc:	e5c40007 	strb	r0, [r4, #7]
   1e700:	e5843040 	str	r3, [r4, #64]	; 0x40
   1e704:	e1a02000 	mov	r2, r0
	ctx->memWrite(ctx->memParam, addr, val);	
   1e708:	e5943028 	ldr	r3, [r4, #40]	; 0x28
   1e70c:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   1e710:	e6ff1071 	uxth	r1, r1
}
   1e714:	e8bd4070 	pop	{r4, r5, r6, lr}
   1e718:	e12fff13 	bx	r3

0001e71c <LD_L_SLL_off_IX_d>:
	char off = read8(ctx, ctx->PC++);
   1e71c:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
   1e720:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	char off = read8(ctx, ctx->PC++);
   1e724:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
   1e728:	e2833005 	add	r3, r3, #5
{
   1e72c:	e92d4070 	push	{r4, r5, r6, lr}
   1e730:	e1a04000 	mov	r4, r0
	char off = read8(ctx, ctx->PC++);
   1e734:	e1c021bc 	strh	r2, [r0, #28]
   1e738:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   1e73c:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   1e740:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   1e744:	e12fff33 	blx	r3
	ctx->tstates += 3;
   1e748:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	BR.L = doSL(ctx, read8(ctx, WR.IX + off), 0);
   1e74c:	e1d410b8 	ldrh	r1, [r4, #8]
   1e750:	e6ff5070 	uxth	r5, r0
   1e754:	e2833003 	add	r3, r3, #3
   1e758:	e0851001 	add	r1, r5, r1
   1e75c:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   1e760:	e6ff1071 	uxth	r1, r1
   1e764:	e5943024 	ldr	r3, [r4, #36]	; 0x24
   1e768:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   1e76c:	e12fff33 	blx	r3
   1e770:	e1a01000 	mov	r1, r0
   1e774:	e1a00004 	mov	r0, r4
   1e778:	ebfffe1c 	bl	1dff0 <doSL.constprop.28>
	ctx->tstates += 3;
   1e77c:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	write8(ctx, WR.IX + off, BR.L);	
   1e780:	e1d410b8 	ldrh	r1, [r4, #8]
   1e784:	e2833003 	add	r3, r3, #3
   1e788:	e0851001 	add	r1, r5, r1
	BR.L = doSL(ctx, read8(ctx, WR.IX + off), 0);
   1e78c:	e5c40006 	strb	r0, [r4, #6]
   1e790:	e5843040 	str	r3, [r4, #64]	; 0x40
   1e794:	e1a02000 	mov	r2, r0
	ctx->memWrite(ctx->memParam, addr, val);	
   1e798:	e5943028 	ldr	r3, [r4, #40]	; 0x28
   1e79c:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   1e7a0:	e6ff1071 	uxth	r1, r1
}
   1e7a4:	e8bd4070 	pop	{r4, r5, r6, lr}
   1e7a8:	e12fff13 	bx	r3

0001e7ac <LD_L_SLL_off_IY_d>:
	char off = read8(ctx, ctx->PC++);
   1e7ac:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
   1e7b0:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	char off = read8(ctx, ctx->PC++);
   1e7b4:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
   1e7b8:	e2833005 	add	r3, r3, #5
{
   1e7bc:	e92d4070 	push	{r4, r5, r6, lr}
   1e7c0:	e1a04000 	mov	r4, r0
	char off = read8(ctx, ctx->PC++);
   1e7c4:	e1c021bc 	strh	r2, [r0, #28]
   1e7c8:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   1e7cc:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   1e7d0:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   1e7d4:	e12fff33 	blx	r3
	ctx->tstates += 3;
   1e7d8:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	BR.L = doSL(ctx, read8(ctx, WR.IY + off), 0);
   1e7dc:	e1d410ba 	ldrh	r1, [r4, #10]
   1e7e0:	e6ff5070 	uxth	r5, r0
   1e7e4:	e2833003 	add	r3, r3, #3
   1e7e8:	e0851001 	add	r1, r5, r1
   1e7ec:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   1e7f0:	e6ff1071 	uxth	r1, r1
   1e7f4:	e5943024 	ldr	r3, [r4, #36]	; 0x24
   1e7f8:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   1e7fc:	e12fff33 	blx	r3
   1e800:	e1a01000 	mov	r1, r0
   1e804:	e1a00004 	mov	r0, r4
   1e808:	ebfffdf8 	bl	1dff0 <doSL.constprop.28>
	ctx->tstates += 3;
   1e80c:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	write8(ctx, WR.IY + off, BR.L);	
   1e810:	e1d410ba 	ldrh	r1, [r4, #10]
   1e814:	e2833003 	add	r3, r3, #3
   1e818:	e0851001 	add	r1, r5, r1
	BR.L = doSL(ctx, read8(ctx, WR.IY + off), 0);
   1e81c:	e5c40006 	strb	r0, [r4, #6]
   1e820:	e5843040 	str	r3, [r4, #64]	; 0x40
   1e824:	e1a02000 	mov	r2, r0
	ctx->memWrite(ctx->memParam, addr, val);	
   1e828:	e5943028 	ldr	r3, [r4, #40]	; 0x28
   1e82c:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   1e830:	e6ff1071 	uxth	r1, r1
}
   1e834:	e8bd4070 	pop	{r4, r5, r6, lr}
   1e838:	e12fff13 	bx	r3

0001e83c <SLL_off_HL>:
	ctx->tstates += 3;
   1e83c:	e5903040 	ldr	r3, [r0, #64]	; 0x40
{
   1e840:	e92d4070 	push	{r4, r5, r6, lr}
	write8(ctx, WR.HL, doSL(ctx, read8(ctx, WR.HL), IA_L));
   1e844:	e1d050b6 	ldrh	r5, [r0, #6]
   1e848:	e2833004 	add	r3, r3, #4
{
   1e84c:	e1a04000 	mov	r4, r0
   1e850:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   1e854:	e1a01005 	mov	r1, r5
   1e858:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   1e85c:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   1e860:	e12fff33 	blx	r3
	write8(ctx, WR.HL, doSL(ctx, read8(ctx, WR.HL), IA_L));
   1e864:	e1a01000 	mov	r1, r0
   1e868:	e1a00004 	mov	r0, r4
   1e86c:	ebfffddf 	bl	1dff0 <doSL.constprop.28>
	ctx->tstates += 3;
   1e870:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	ctx->memWrite(ctx->memParam, addr, val);	
   1e874:	e1a02000 	mov	r2, r0
	ctx->tstates += 3;
   1e878:	e2833003 	add	r3, r3, #3
   1e87c:	e5843040 	str	r3, [r4, #64]	; 0x40
	ctx->memWrite(ctx->memParam, addr, val);	
   1e880:	e1a01005 	mov	r1, r5
   1e884:	e5943028 	ldr	r3, [r4, #40]	; 0x28
   1e888:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
}
   1e88c:	e8bd4070 	pop	{r4, r5, r6, lr}
   1e890:	e12fff13 	bx	r3

0001e894 <SLL_off_IX_d>:
	char off = read8(ctx, ctx->PC++);	
   1e894:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
   1e898:	e5903040 	ldr	r3, [r0, #64]	; 0x40
{
   1e89c:	e92d4070 	push	{r4, r5, r6, lr}
	char off = read8(ctx, ctx->PC++);	
   1e8a0:	e2812001 	add	r2, r1, #1
{
   1e8a4:	e1a04000 	mov	r4, r0
	ctx->tstates += 3;
   1e8a8:	e2833005 	add	r3, r3, #5
	char off = read8(ctx, ctx->PC++);	
   1e8ac:	e1c021bc 	strh	r2, [r0, #28]
   1e8b0:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   1e8b4:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   1e8b8:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   1e8bc:	e12fff33 	blx	r3
	write8(ctx, WR.IX + off, doSL(ctx, read8(ctx, WR.IX + off), IA_L));
   1e8c0:	e1d450b8 	ldrh	r5, [r4, #8]
	ctx->tstates += 3;
   1e8c4:	e5943040 	ldr	r3, [r4, #64]	; 0x40
   1e8c8:	e0855000 	add	r5, r5, r0
   1e8cc:	e6ff5075 	uxth	r5, r5
   1e8d0:	e2833003 	add	r3, r3, #3
   1e8d4:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   1e8d8:	e1a01005 	mov	r1, r5
   1e8dc:	e5943024 	ldr	r3, [r4, #36]	; 0x24
   1e8e0:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   1e8e4:	e12fff33 	blx	r3
   1e8e8:	e1a01000 	mov	r1, r0
   1e8ec:	e1a00004 	mov	r0, r4
   1e8f0:	ebfffdbe 	bl	1dff0 <doSL.constprop.28>
	ctx->tstates += 3;
   1e8f4:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	ctx->memWrite(ctx->memParam, addr, val);	
   1e8f8:	e1a01005 	mov	r1, r5
	ctx->tstates += 3;
   1e8fc:	e2833003 	add	r3, r3, #3
   1e900:	e5843040 	str	r3, [r4, #64]	; 0x40
	ctx->memWrite(ctx->memParam, addr, val);	
   1e904:	e1a02000 	mov	r2, r0
   1e908:	e5943028 	ldr	r3, [r4, #40]	; 0x28
   1e90c:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
}
   1e910:	e8bd4070 	pop	{r4, r5, r6, lr}
   1e914:	e12fff13 	bx	r3

0001e918 <SLL_off_IY_d>:
	char off = read8(ctx, ctx->PC++);	
   1e918:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
   1e91c:	e5903040 	ldr	r3, [r0, #64]	; 0x40
{
   1e920:	e92d4070 	push	{r4, r5, r6, lr}
	char off = read8(ctx, ctx->PC++);	
   1e924:	e2812001 	add	r2, r1, #1
{
   1e928:	e1a04000 	mov	r4, r0
	ctx->tstates += 3;
   1e92c:	e2833005 	add	r3, r3, #5
	char off = read8(ctx, ctx->PC++);	
   1e930:	e1c021bc 	strh	r2, [r0, #28]
   1e934:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   1e938:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   1e93c:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   1e940:	e12fff33 	blx	r3
	write8(ctx, WR.IY + off, doSL(ctx, read8(ctx, WR.IY + off), IA_L));
   1e944:	e1d450ba 	ldrh	r5, [r4, #10]
	ctx->tstates += 3;
   1e948:	e5943040 	ldr	r3, [r4, #64]	; 0x40
   1e94c:	e0855000 	add	r5, r5, r0
   1e950:	e6ff5075 	uxth	r5, r5
   1e954:	e2833003 	add	r3, r3, #3
   1e958:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   1e95c:	e1a01005 	mov	r1, r5
   1e960:	e5943024 	ldr	r3, [r4, #36]	; 0x24
   1e964:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   1e968:	e12fff33 	blx	r3
   1e96c:	e1a01000 	mov	r1, r0
   1e970:	e1a00004 	mov	r0, r4
   1e974:	ebfffd9d 	bl	1dff0 <doSL.constprop.28>
	ctx->tstates += 3;
   1e978:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	ctx->memWrite(ctx->memParam, addr, val);	
   1e97c:	e1a01005 	mov	r1, r5
	ctx->tstates += 3;
   1e980:	e2833003 	add	r3, r3, #3
   1e984:	e5843040 	str	r3, [r4, #64]	; 0x40
	ctx->memWrite(ctx->memParam, addr, val);	
   1e988:	e1a02000 	mov	r2, r0
   1e98c:	e5943028 	ldr	r3, [r4, #40]	; 0x28
   1e990:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
}
   1e994:	e8bd4070 	pop	{r4, r5, r6, lr}
   1e998:	e12fff13 	bx	r3

0001e99c <doSR.constprop.25>:
static byte doSR (Z80Context* ctx, byte val, int isArith)
   1e99c:	e2012080 	and	r2, r1, #128	; 0x80
	if (val)
   1e9a0:	e3110001 	tst	r1, #1
        val |= b;
   1e9a4:	e18210a1 	orr	r1, r2, r1, lsr #1
   1e9a8:	e5d03000 	ldrb	r3, [r0]
   1e9ac:	e6af1071 	sxtb	r1, r1
   1e9b0:	e6ef2071 	uxtb	r2, r1
	BR.F |= flag;
   1e9b4:	13833001 	orrne	r3, r3, #1
	BR.F &= ~flag;
   1e9b8:	020330fe 	andeq	r3, r3, #254	; 0xfe
	if (val)
   1e9bc:	e3120020 	tst	r2, #32
	BR.F |= flag;
   1e9c0:	13833020 	orrne	r3, r3, #32
	BR.F &= ~flag;
   1e9c4:	020330df 	andeq	r3, r3, #223	; 0xdf
	if (val)
   1e9c8:	e3120008 	tst	r2, #8
	BR.F |= flag;
   1e9cc:	13833008 	orrne	r3, r3, #8
	BR.F &= ~flag;
   1e9d0:	020330f7 	andeq	r3, r3, #247	; 0xf7
   1e9d4:	e6af3073 	sxtb	r3, r3
	if (val)
   1e9d8:	e3510000 	cmp	r1, #0
	BR.F |= flag;
   1e9dc:	e203306d 	and	r3, r3, #109	; 0x6d
   1e9e0:	b3833080 	orrlt	r3, r3, #128	; 0x80
	if (val)
   1e9e4:	e3520000 	cmp	r2, #0
	BR.F |= flag;
   1e9e8:	03831040 	orreq	r1, r3, #64	; 0x40
	if (val)
   1e9ec:	0a00000a 	beq	1ea1c <doSR.constprop.25+0x80>
	VALFLAG(F_PV, parityBit[val]);
   1e9f0:	e59f102c 	ldr	r1, [pc, #44]	; 1ea24 <doSR.constprop.25+0x88>
	BR.F &= ~flag;
   1e9f4:	e6af3073 	sxtb	r3, r3
	if (val)
   1e9f8:	e791c102 	ldr	ip, [r1, r2, lsl #2]
	BR.F &= ~flag;
   1e9fc:	e20310ad 	and	r1, r3, #173	; 0xad
	if (val)
   1ea00:	e35c0000 	cmp	ip, #0
   1ea04:	e5c01000 	strb	r1, [r0]
	BR.F &= ~flag;
   1ea08:	020330a9 	andeq	r3, r3, #169	; 0xa9
	if (val)
   1ea0c:	1a000002 	bne	1ea1c <doSR.constprop.25+0x80>
   1ea10:	e5c03000 	strb	r3, [r0]
}
   1ea14:	e1a00002 	mov	r0, r2
   1ea18:	e12fff1e 	bx	lr
	BR.F |= flag;
   1ea1c:	e3813004 	orr	r3, r1, #4
   1ea20:	eafffffa 	b	1ea10 <doSR.constprop.25+0x74>
   1ea24:	0004f000 	.word	0x0004f000

0001ea28 <LD_A_SRA_off_IX_d>:
	char off = read8(ctx, ctx->PC++);
   1ea28:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
   1ea2c:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	char off = read8(ctx, ctx->PC++);
   1ea30:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
   1ea34:	e2833005 	add	r3, r3, #5
{
   1ea38:	e92d4070 	push	{r4, r5, r6, lr}
   1ea3c:	e1a04000 	mov	r4, r0
	char off = read8(ctx, ctx->PC++);
   1ea40:	e1c021bc 	strh	r2, [r0, #28]
   1ea44:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   1ea48:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   1ea4c:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   1ea50:	e12fff33 	blx	r3
	ctx->tstates += 3;
   1ea54:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	BR.A = doSR(ctx, read8(ctx, WR.IX + off), 1);
   1ea58:	e1d410b8 	ldrh	r1, [r4, #8]
   1ea5c:	e6ff5070 	uxth	r5, r0
   1ea60:	e2833003 	add	r3, r3, #3
   1ea64:	e0851001 	add	r1, r5, r1
   1ea68:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   1ea6c:	e6ff1071 	uxth	r1, r1
   1ea70:	e5943024 	ldr	r3, [r4, #36]	; 0x24
   1ea74:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   1ea78:	e12fff33 	blx	r3
   1ea7c:	e1a01000 	mov	r1, r0
   1ea80:	e1a00004 	mov	r0, r4
   1ea84:	ebffffc4 	bl	1e99c <doSR.constprop.25>
	ctx->tstates += 3;
   1ea88:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	write8(ctx, WR.IX + off, BR.A);	
   1ea8c:	e1d410b8 	ldrh	r1, [r4, #8]
   1ea90:	e2833003 	add	r3, r3, #3
   1ea94:	e0851001 	add	r1, r5, r1
	BR.A = doSR(ctx, read8(ctx, WR.IX + off), 1);
   1ea98:	e5c40001 	strb	r0, [r4, #1]
   1ea9c:	e5843040 	str	r3, [r4, #64]	; 0x40
   1eaa0:	e1a02000 	mov	r2, r0
	ctx->memWrite(ctx->memParam, addr, val);	
   1eaa4:	e5943028 	ldr	r3, [r4, #40]	; 0x28
   1eaa8:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   1eaac:	e6ff1071 	uxth	r1, r1
}
   1eab0:	e8bd4070 	pop	{r4, r5, r6, lr}
   1eab4:	e12fff13 	bx	r3

0001eab8 <LD_A_SRA_off_IY_d>:
	char off = read8(ctx, ctx->PC++);
   1eab8:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
   1eabc:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	char off = read8(ctx, ctx->PC++);
   1eac0:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
   1eac4:	e2833005 	add	r3, r3, #5
{
   1eac8:	e92d4070 	push	{r4, r5, r6, lr}
   1eacc:	e1a04000 	mov	r4, r0
	char off = read8(ctx, ctx->PC++);
   1ead0:	e1c021bc 	strh	r2, [r0, #28]
   1ead4:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   1ead8:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   1eadc:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   1eae0:	e12fff33 	blx	r3
	ctx->tstates += 3;
   1eae4:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	BR.A = doSR(ctx, read8(ctx, WR.IY + off), 1);
   1eae8:	e1d410ba 	ldrh	r1, [r4, #10]
   1eaec:	e6ff5070 	uxth	r5, r0
   1eaf0:	e2833003 	add	r3, r3, #3
   1eaf4:	e0851001 	add	r1, r5, r1
   1eaf8:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   1eafc:	e6ff1071 	uxth	r1, r1
   1eb00:	e5943024 	ldr	r3, [r4, #36]	; 0x24
   1eb04:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   1eb08:	e12fff33 	blx	r3
   1eb0c:	e1a01000 	mov	r1, r0
   1eb10:	e1a00004 	mov	r0, r4
   1eb14:	ebffffa0 	bl	1e99c <doSR.constprop.25>
	ctx->tstates += 3;
   1eb18:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	write8(ctx, WR.IY + off, BR.A);	
   1eb1c:	e1d410ba 	ldrh	r1, [r4, #10]
   1eb20:	e2833003 	add	r3, r3, #3
   1eb24:	e0851001 	add	r1, r5, r1
	BR.A = doSR(ctx, read8(ctx, WR.IY + off), 1);
   1eb28:	e5c40001 	strb	r0, [r4, #1]
   1eb2c:	e5843040 	str	r3, [r4, #64]	; 0x40
   1eb30:	e1a02000 	mov	r2, r0
	ctx->memWrite(ctx->memParam, addr, val);	
   1eb34:	e5943028 	ldr	r3, [r4, #40]	; 0x28
   1eb38:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   1eb3c:	e6ff1071 	uxth	r1, r1
}
   1eb40:	e8bd4070 	pop	{r4, r5, r6, lr}
   1eb44:	e12fff13 	bx	r3

0001eb48 <LD_B_SRA_off_IX_d>:
	char off = read8(ctx, ctx->PC++);
   1eb48:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
   1eb4c:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	char off = read8(ctx, ctx->PC++);
   1eb50:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
   1eb54:	e2833005 	add	r3, r3, #5
{
   1eb58:	e92d4070 	push	{r4, r5, r6, lr}
   1eb5c:	e1a04000 	mov	r4, r0
	char off = read8(ctx, ctx->PC++);
   1eb60:	e1c021bc 	strh	r2, [r0, #28]
   1eb64:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   1eb68:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   1eb6c:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   1eb70:	e12fff33 	blx	r3
	ctx->tstates += 3;
   1eb74:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	BR.B = doSR(ctx, read8(ctx, WR.IX + off), 1);
   1eb78:	e1d410b8 	ldrh	r1, [r4, #8]
   1eb7c:	e6ff5070 	uxth	r5, r0
   1eb80:	e2833003 	add	r3, r3, #3
   1eb84:	e0851001 	add	r1, r5, r1
   1eb88:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   1eb8c:	e6ff1071 	uxth	r1, r1
   1eb90:	e5943024 	ldr	r3, [r4, #36]	; 0x24
   1eb94:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   1eb98:	e12fff33 	blx	r3
   1eb9c:	e1a01000 	mov	r1, r0
   1eba0:	e1a00004 	mov	r0, r4
   1eba4:	ebffff7c 	bl	1e99c <doSR.constprop.25>
	ctx->tstates += 3;
   1eba8:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	write8(ctx, WR.IX + off, BR.B);	
   1ebac:	e1d410b8 	ldrh	r1, [r4, #8]
   1ebb0:	e2833003 	add	r3, r3, #3
   1ebb4:	e0851001 	add	r1, r5, r1
	BR.B = doSR(ctx, read8(ctx, WR.IX + off), 1);
   1ebb8:	e5c40003 	strb	r0, [r4, #3]
   1ebbc:	e5843040 	str	r3, [r4, #64]	; 0x40
   1ebc0:	e1a02000 	mov	r2, r0
	ctx->memWrite(ctx->memParam, addr, val);	
   1ebc4:	e5943028 	ldr	r3, [r4, #40]	; 0x28
   1ebc8:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   1ebcc:	e6ff1071 	uxth	r1, r1
}
   1ebd0:	e8bd4070 	pop	{r4, r5, r6, lr}
   1ebd4:	e12fff13 	bx	r3

0001ebd8 <LD_B_SRA_off_IY_d>:
	char off = read8(ctx, ctx->PC++);
   1ebd8:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
   1ebdc:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	char off = read8(ctx, ctx->PC++);
   1ebe0:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
   1ebe4:	e2833005 	add	r3, r3, #5
{
   1ebe8:	e92d4070 	push	{r4, r5, r6, lr}
   1ebec:	e1a04000 	mov	r4, r0
	char off = read8(ctx, ctx->PC++);
   1ebf0:	e1c021bc 	strh	r2, [r0, #28]
   1ebf4:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   1ebf8:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   1ebfc:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   1ec00:	e12fff33 	blx	r3
	ctx->tstates += 3;
   1ec04:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	BR.B = doSR(ctx, read8(ctx, WR.IY + off), 1);
   1ec08:	e1d410ba 	ldrh	r1, [r4, #10]
   1ec0c:	e6ff5070 	uxth	r5, r0
   1ec10:	e2833003 	add	r3, r3, #3
   1ec14:	e0851001 	add	r1, r5, r1
   1ec18:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   1ec1c:	e6ff1071 	uxth	r1, r1
   1ec20:	e5943024 	ldr	r3, [r4, #36]	; 0x24
   1ec24:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   1ec28:	e12fff33 	blx	r3
   1ec2c:	e1a01000 	mov	r1, r0
   1ec30:	e1a00004 	mov	r0, r4
   1ec34:	ebffff58 	bl	1e99c <doSR.constprop.25>
	ctx->tstates += 3;
   1ec38:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	write8(ctx, WR.IY + off, BR.B);	
   1ec3c:	e1d410ba 	ldrh	r1, [r4, #10]
   1ec40:	e2833003 	add	r3, r3, #3
   1ec44:	e0851001 	add	r1, r5, r1
	BR.B = doSR(ctx, read8(ctx, WR.IY + off), 1);
   1ec48:	e5c40003 	strb	r0, [r4, #3]
   1ec4c:	e5843040 	str	r3, [r4, #64]	; 0x40
   1ec50:	e1a02000 	mov	r2, r0
	ctx->memWrite(ctx->memParam, addr, val);	
   1ec54:	e5943028 	ldr	r3, [r4, #40]	; 0x28
   1ec58:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   1ec5c:	e6ff1071 	uxth	r1, r1
}
   1ec60:	e8bd4070 	pop	{r4, r5, r6, lr}
   1ec64:	e12fff13 	bx	r3

0001ec68 <LD_C_SRA_off_IX_d>:
	char off = read8(ctx, ctx->PC++);
   1ec68:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
   1ec6c:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	char off = read8(ctx, ctx->PC++);
   1ec70:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
   1ec74:	e2833005 	add	r3, r3, #5
{
   1ec78:	e92d4070 	push	{r4, r5, r6, lr}
   1ec7c:	e1a04000 	mov	r4, r0
	char off = read8(ctx, ctx->PC++);
   1ec80:	e1c021bc 	strh	r2, [r0, #28]
   1ec84:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   1ec88:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   1ec8c:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   1ec90:	e12fff33 	blx	r3
	ctx->tstates += 3;
   1ec94:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	BR.C = doSR(ctx, read8(ctx, WR.IX + off), 1);
   1ec98:	e1d410b8 	ldrh	r1, [r4, #8]
   1ec9c:	e6ff5070 	uxth	r5, r0
   1eca0:	e2833003 	add	r3, r3, #3
   1eca4:	e0851001 	add	r1, r5, r1
   1eca8:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   1ecac:	e6ff1071 	uxth	r1, r1
   1ecb0:	e5943024 	ldr	r3, [r4, #36]	; 0x24
   1ecb4:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   1ecb8:	e12fff33 	blx	r3
   1ecbc:	e1a01000 	mov	r1, r0
   1ecc0:	e1a00004 	mov	r0, r4
   1ecc4:	ebffff34 	bl	1e99c <doSR.constprop.25>
	ctx->tstates += 3;
   1ecc8:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	write8(ctx, WR.IX + off, BR.C);	
   1eccc:	e1d410b8 	ldrh	r1, [r4, #8]
   1ecd0:	e2833003 	add	r3, r3, #3
   1ecd4:	e0851001 	add	r1, r5, r1
	BR.C = doSR(ctx, read8(ctx, WR.IX + off), 1);
   1ecd8:	e5c40002 	strb	r0, [r4, #2]
   1ecdc:	e5843040 	str	r3, [r4, #64]	; 0x40
   1ece0:	e1a02000 	mov	r2, r0
	ctx->memWrite(ctx->memParam, addr, val);	
   1ece4:	e5943028 	ldr	r3, [r4, #40]	; 0x28
   1ece8:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   1ecec:	e6ff1071 	uxth	r1, r1
}
   1ecf0:	e8bd4070 	pop	{r4, r5, r6, lr}
   1ecf4:	e12fff13 	bx	r3

0001ecf8 <LD_C_SRA_off_IY_d>:
	char off = read8(ctx, ctx->PC++);
   1ecf8:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
   1ecfc:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	char off = read8(ctx, ctx->PC++);
   1ed00:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
   1ed04:	e2833005 	add	r3, r3, #5
{
   1ed08:	e92d4070 	push	{r4, r5, r6, lr}
   1ed0c:	e1a04000 	mov	r4, r0
	char off = read8(ctx, ctx->PC++);
   1ed10:	e1c021bc 	strh	r2, [r0, #28]
   1ed14:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   1ed18:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   1ed1c:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   1ed20:	e12fff33 	blx	r3
	ctx->tstates += 3;
   1ed24:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	BR.C = doSR(ctx, read8(ctx, WR.IY + off), 1);
   1ed28:	e1d410ba 	ldrh	r1, [r4, #10]
   1ed2c:	e6ff5070 	uxth	r5, r0
   1ed30:	e2833003 	add	r3, r3, #3
   1ed34:	e0851001 	add	r1, r5, r1
   1ed38:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   1ed3c:	e6ff1071 	uxth	r1, r1
   1ed40:	e5943024 	ldr	r3, [r4, #36]	; 0x24
   1ed44:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   1ed48:	e12fff33 	blx	r3
   1ed4c:	e1a01000 	mov	r1, r0
   1ed50:	e1a00004 	mov	r0, r4
   1ed54:	ebffff10 	bl	1e99c <doSR.constprop.25>
	ctx->tstates += 3;
   1ed58:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	write8(ctx, WR.IY + off, BR.C);	
   1ed5c:	e1d410ba 	ldrh	r1, [r4, #10]
   1ed60:	e2833003 	add	r3, r3, #3
   1ed64:	e0851001 	add	r1, r5, r1
	BR.C = doSR(ctx, read8(ctx, WR.IY + off), 1);
   1ed68:	e5c40002 	strb	r0, [r4, #2]
   1ed6c:	e5843040 	str	r3, [r4, #64]	; 0x40
   1ed70:	e1a02000 	mov	r2, r0
	ctx->memWrite(ctx->memParam, addr, val);	
   1ed74:	e5943028 	ldr	r3, [r4, #40]	; 0x28
   1ed78:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   1ed7c:	e6ff1071 	uxth	r1, r1
}
   1ed80:	e8bd4070 	pop	{r4, r5, r6, lr}
   1ed84:	e12fff13 	bx	r3

0001ed88 <LD_D_SRA_off_IX_d>:
	char off = read8(ctx, ctx->PC++);
   1ed88:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
   1ed8c:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	char off = read8(ctx, ctx->PC++);
   1ed90:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
   1ed94:	e2833005 	add	r3, r3, #5
{
   1ed98:	e92d4070 	push	{r4, r5, r6, lr}
   1ed9c:	e1a04000 	mov	r4, r0
	char off = read8(ctx, ctx->PC++);
   1eda0:	e1c021bc 	strh	r2, [r0, #28]
   1eda4:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   1eda8:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   1edac:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   1edb0:	e12fff33 	blx	r3
	ctx->tstates += 3;
   1edb4:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	BR.D = doSR(ctx, read8(ctx, WR.IX + off), 1);
   1edb8:	e1d410b8 	ldrh	r1, [r4, #8]
   1edbc:	e6ff5070 	uxth	r5, r0
   1edc0:	e2833003 	add	r3, r3, #3
   1edc4:	e0851001 	add	r1, r5, r1
   1edc8:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   1edcc:	e6ff1071 	uxth	r1, r1
   1edd0:	e5943024 	ldr	r3, [r4, #36]	; 0x24
   1edd4:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   1edd8:	e12fff33 	blx	r3
   1eddc:	e1a01000 	mov	r1, r0
   1ede0:	e1a00004 	mov	r0, r4
   1ede4:	ebfffeec 	bl	1e99c <doSR.constprop.25>
	ctx->tstates += 3;
   1ede8:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	write8(ctx, WR.IX + off, BR.D);	
   1edec:	e1d410b8 	ldrh	r1, [r4, #8]
   1edf0:	e2833003 	add	r3, r3, #3
   1edf4:	e0851001 	add	r1, r5, r1
	BR.D = doSR(ctx, read8(ctx, WR.IX + off), 1);
   1edf8:	e5c40005 	strb	r0, [r4, #5]
   1edfc:	e5843040 	str	r3, [r4, #64]	; 0x40
   1ee00:	e1a02000 	mov	r2, r0
	ctx->memWrite(ctx->memParam, addr, val);	
   1ee04:	e5943028 	ldr	r3, [r4, #40]	; 0x28
   1ee08:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   1ee0c:	e6ff1071 	uxth	r1, r1
}
   1ee10:	e8bd4070 	pop	{r4, r5, r6, lr}
   1ee14:	e12fff13 	bx	r3

0001ee18 <LD_D_SRA_off_IY_d>:
	char off = read8(ctx, ctx->PC++);
   1ee18:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
   1ee1c:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	char off = read8(ctx, ctx->PC++);
   1ee20:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
   1ee24:	e2833005 	add	r3, r3, #5
{
   1ee28:	e92d4070 	push	{r4, r5, r6, lr}
   1ee2c:	e1a04000 	mov	r4, r0
	char off = read8(ctx, ctx->PC++);
   1ee30:	e1c021bc 	strh	r2, [r0, #28]
   1ee34:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   1ee38:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   1ee3c:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   1ee40:	e12fff33 	blx	r3
	ctx->tstates += 3;
   1ee44:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	BR.D = doSR(ctx, read8(ctx, WR.IY + off), 1);
   1ee48:	e1d410ba 	ldrh	r1, [r4, #10]
   1ee4c:	e6ff5070 	uxth	r5, r0
   1ee50:	e2833003 	add	r3, r3, #3
   1ee54:	e0851001 	add	r1, r5, r1
   1ee58:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   1ee5c:	e6ff1071 	uxth	r1, r1
   1ee60:	e5943024 	ldr	r3, [r4, #36]	; 0x24
   1ee64:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   1ee68:	e12fff33 	blx	r3
   1ee6c:	e1a01000 	mov	r1, r0
   1ee70:	e1a00004 	mov	r0, r4
   1ee74:	ebfffec8 	bl	1e99c <doSR.constprop.25>
	ctx->tstates += 3;
   1ee78:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	write8(ctx, WR.IY + off, BR.D);	
   1ee7c:	e1d410ba 	ldrh	r1, [r4, #10]
   1ee80:	e2833003 	add	r3, r3, #3
   1ee84:	e0851001 	add	r1, r5, r1
	BR.D = doSR(ctx, read8(ctx, WR.IY + off), 1);
   1ee88:	e5c40005 	strb	r0, [r4, #5]
   1ee8c:	e5843040 	str	r3, [r4, #64]	; 0x40
   1ee90:	e1a02000 	mov	r2, r0
	ctx->memWrite(ctx->memParam, addr, val);	
   1ee94:	e5943028 	ldr	r3, [r4, #40]	; 0x28
   1ee98:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   1ee9c:	e6ff1071 	uxth	r1, r1
}
   1eea0:	e8bd4070 	pop	{r4, r5, r6, lr}
   1eea4:	e12fff13 	bx	r3

0001eea8 <LD_E_SRA_off_IX_d>:
	char off = read8(ctx, ctx->PC++);
   1eea8:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
   1eeac:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	char off = read8(ctx, ctx->PC++);
   1eeb0:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
   1eeb4:	e2833005 	add	r3, r3, #5
{
   1eeb8:	e92d4070 	push	{r4, r5, r6, lr}
   1eebc:	e1a04000 	mov	r4, r0
	char off = read8(ctx, ctx->PC++);
   1eec0:	e1c021bc 	strh	r2, [r0, #28]
   1eec4:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   1eec8:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   1eecc:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   1eed0:	e12fff33 	blx	r3
	ctx->tstates += 3;
   1eed4:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	BR.E = doSR(ctx, read8(ctx, WR.IX + off), 1);
   1eed8:	e1d410b8 	ldrh	r1, [r4, #8]
   1eedc:	e6ff5070 	uxth	r5, r0
   1eee0:	e2833003 	add	r3, r3, #3
   1eee4:	e0851001 	add	r1, r5, r1
   1eee8:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   1eeec:	e6ff1071 	uxth	r1, r1
   1eef0:	e5943024 	ldr	r3, [r4, #36]	; 0x24
   1eef4:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   1eef8:	e12fff33 	blx	r3
   1eefc:	e1a01000 	mov	r1, r0
   1ef00:	e1a00004 	mov	r0, r4
   1ef04:	ebfffea4 	bl	1e99c <doSR.constprop.25>
	ctx->tstates += 3;
   1ef08:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	write8(ctx, WR.IX + off, BR.E);	
   1ef0c:	e1d410b8 	ldrh	r1, [r4, #8]
   1ef10:	e2833003 	add	r3, r3, #3
   1ef14:	e0851001 	add	r1, r5, r1
	BR.E = doSR(ctx, read8(ctx, WR.IX + off), 1);
   1ef18:	e5c40004 	strb	r0, [r4, #4]
   1ef1c:	e5843040 	str	r3, [r4, #64]	; 0x40
   1ef20:	e1a02000 	mov	r2, r0
	ctx->memWrite(ctx->memParam, addr, val);	
   1ef24:	e5943028 	ldr	r3, [r4, #40]	; 0x28
   1ef28:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   1ef2c:	e6ff1071 	uxth	r1, r1
}
   1ef30:	e8bd4070 	pop	{r4, r5, r6, lr}
   1ef34:	e12fff13 	bx	r3

0001ef38 <LD_E_SRA_off_IY_d>:
	char off = read8(ctx, ctx->PC++);
   1ef38:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
   1ef3c:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	char off = read8(ctx, ctx->PC++);
   1ef40:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
   1ef44:	e2833005 	add	r3, r3, #5
{
   1ef48:	e92d4070 	push	{r4, r5, r6, lr}
   1ef4c:	e1a04000 	mov	r4, r0
	char off = read8(ctx, ctx->PC++);
   1ef50:	e1c021bc 	strh	r2, [r0, #28]
   1ef54:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   1ef58:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   1ef5c:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   1ef60:	e12fff33 	blx	r3
	ctx->tstates += 3;
   1ef64:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	BR.E = doSR(ctx, read8(ctx, WR.IY + off), 1);
   1ef68:	e1d410ba 	ldrh	r1, [r4, #10]
   1ef6c:	e6ff5070 	uxth	r5, r0
   1ef70:	e2833003 	add	r3, r3, #3
   1ef74:	e0851001 	add	r1, r5, r1
   1ef78:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   1ef7c:	e6ff1071 	uxth	r1, r1
   1ef80:	e5943024 	ldr	r3, [r4, #36]	; 0x24
   1ef84:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   1ef88:	e12fff33 	blx	r3
   1ef8c:	e1a01000 	mov	r1, r0
   1ef90:	e1a00004 	mov	r0, r4
   1ef94:	ebfffe80 	bl	1e99c <doSR.constprop.25>
	ctx->tstates += 3;
   1ef98:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	write8(ctx, WR.IY + off, BR.E);	
   1ef9c:	e1d410ba 	ldrh	r1, [r4, #10]
   1efa0:	e2833003 	add	r3, r3, #3
   1efa4:	e0851001 	add	r1, r5, r1
	BR.E = doSR(ctx, read8(ctx, WR.IY + off), 1);
   1efa8:	e5c40004 	strb	r0, [r4, #4]
   1efac:	e5843040 	str	r3, [r4, #64]	; 0x40
   1efb0:	e1a02000 	mov	r2, r0
	ctx->memWrite(ctx->memParam, addr, val);	
   1efb4:	e5943028 	ldr	r3, [r4, #40]	; 0x28
   1efb8:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   1efbc:	e6ff1071 	uxth	r1, r1
}
   1efc0:	e8bd4070 	pop	{r4, r5, r6, lr}
   1efc4:	e12fff13 	bx	r3

0001efc8 <LD_H_SRA_off_IX_d>:
	char off = read8(ctx, ctx->PC++);
   1efc8:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
   1efcc:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	char off = read8(ctx, ctx->PC++);
   1efd0:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
   1efd4:	e2833005 	add	r3, r3, #5
{
   1efd8:	e92d4070 	push	{r4, r5, r6, lr}
   1efdc:	e1a04000 	mov	r4, r0
	char off = read8(ctx, ctx->PC++);
   1efe0:	e1c021bc 	strh	r2, [r0, #28]
   1efe4:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   1efe8:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   1efec:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   1eff0:	e12fff33 	blx	r3
	ctx->tstates += 3;
   1eff4:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	BR.H = doSR(ctx, read8(ctx, WR.IX + off), 1);
   1eff8:	e1d410b8 	ldrh	r1, [r4, #8]
   1effc:	e6ff5070 	uxth	r5, r0
   1f000:	e2833003 	add	r3, r3, #3
   1f004:	e0851001 	add	r1, r5, r1
   1f008:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   1f00c:	e6ff1071 	uxth	r1, r1
   1f010:	e5943024 	ldr	r3, [r4, #36]	; 0x24
   1f014:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   1f018:	e12fff33 	blx	r3
   1f01c:	e1a01000 	mov	r1, r0
   1f020:	e1a00004 	mov	r0, r4
   1f024:	ebfffe5c 	bl	1e99c <doSR.constprop.25>
	ctx->tstates += 3;
   1f028:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	write8(ctx, WR.IX + off, BR.H);	
   1f02c:	e1d410b8 	ldrh	r1, [r4, #8]
   1f030:	e2833003 	add	r3, r3, #3
   1f034:	e0851001 	add	r1, r5, r1
	BR.H = doSR(ctx, read8(ctx, WR.IX + off), 1);
   1f038:	e5c40007 	strb	r0, [r4, #7]
   1f03c:	e5843040 	str	r3, [r4, #64]	; 0x40
   1f040:	e1a02000 	mov	r2, r0
	ctx->memWrite(ctx->memParam, addr, val);	
   1f044:	e5943028 	ldr	r3, [r4, #40]	; 0x28
   1f048:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   1f04c:	e6ff1071 	uxth	r1, r1
}
   1f050:	e8bd4070 	pop	{r4, r5, r6, lr}
   1f054:	e12fff13 	bx	r3

0001f058 <LD_H_SRA_off_IY_d>:
	char off = read8(ctx, ctx->PC++);
   1f058:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
   1f05c:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	char off = read8(ctx, ctx->PC++);
   1f060:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
   1f064:	e2833005 	add	r3, r3, #5
{
   1f068:	e92d4070 	push	{r4, r5, r6, lr}
   1f06c:	e1a04000 	mov	r4, r0
	char off = read8(ctx, ctx->PC++);
   1f070:	e1c021bc 	strh	r2, [r0, #28]
   1f074:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   1f078:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   1f07c:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   1f080:	e12fff33 	blx	r3
	ctx->tstates += 3;
   1f084:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	BR.H = doSR(ctx, read8(ctx, WR.IY + off), 1);
   1f088:	e1d410ba 	ldrh	r1, [r4, #10]
   1f08c:	e6ff5070 	uxth	r5, r0
   1f090:	e2833003 	add	r3, r3, #3
   1f094:	e0851001 	add	r1, r5, r1
   1f098:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   1f09c:	e6ff1071 	uxth	r1, r1
   1f0a0:	e5943024 	ldr	r3, [r4, #36]	; 0x24
   1f0a4:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   1f0a8:	e12fff33 	blx	r3
   1f0ac:	e1a01000 	mov	r1, r0
   1f0b0:	e1a00004 	mov	r0, r4
   1f0b4:	ebfffe38 	bl	1e99c <doSR.constprop.25>
	ctx->tstates += 3;
   1f0b8:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	write8(ctx, WR.IY + off, BR.H);	
   1f0bc:	e1d410ba 	ldrh	r1, [r4, #10]
   1f0c0:	e2833003 	add	r3, r3, #3
   1f0c4:	e0851001 	add	r1, r5, r1
	BR.H = doSR(ctx, read8(ctx, WR.IY + off), 1);
   1f0c8:	e5c40007 	strb	r0, [r4, #7]
   1f0cc:	e5843040 	str	r3, [r4, #64]	; 0x40
   1f0d0:	e1a02000 	mov	r2, r0
	ctx->memWrite(ctx->memParam, addr, val);	
   1f0d4:	e5943028 	ldr	r3, [r4, #40]	; 0x28
   1f0d8:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   1f0dc:	e6ff1071 	uxth	r1, r1
}
   1f0e0:	e8bd4070 	pop	{r4, r5, r6, lr}
   1f0e4:	e12fff13 	bx	r3

0001f0e8 <LD_L_SRA_off_IX_d>:
	char off = read8(ctx, ctx->PC++);
   1f0e8:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
   1f0ec:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	char off = read8(ctx, ctx->PC++);
   1f0f0:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
   1f0f4:	e2833005 	add	r3, r3, #5
{
   1f0f8:	e92d4070 	push	{r4, r5, r6, lr}
   1f0fc:	e1a04000 	mov	r4, r0
	char off = read8(ctx, ctx->PC++);
   1f100:	e1c021bc 	strh	r2, [r0, #28]
   1f104:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   1f108:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   1f10c:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   1f110:	e12fff33 	blx	r3
	ctx->tstates += 3;
   1f114:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	BR.L = doSR(ctx, read8(ctx, WR.IX + off), 1);
   1f118:	e1d410b8 	ldrh	r1, [r4, #8]
   1f11c:	e6ff5070 	uxth	r5, r0
   1f120:	e2833003 	add	r3, r3, #3
   1f124:	e0851001 	add	r1, r5, r1
   1f128:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   1f12c:	e6ff1071 	uxth	r1, r1
   1f130:	e5943024 	ldr	r3, [r4, #36]	; 0x24
   1f134:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   1f138:	e12fff33 	blx	r3
   1f13c:	e1a01000 	mov	r1, r0
   1f140:	e1a00004 	mov	r0, r4
   1f144:	ebfffe14 	bl	1e99c <doSR.constprop.25>
	ctx->tstates += 3;
   1f148:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	write8(ctx, WR.IX + off, BR.L);	
   1f14c:	e1d410b8 	ldrh	r1, [r4, #8]
   1f150:	e2833003 	add	r3, r3, #3
   1f154:	e0851001 	add	r1, r5, r1
	BR.L = doSR(ctx, read8(ctx, WR.IX + off), 1);
   1f158:	e5c40006 	strb	r0, [r4, #6]
   1f15c:	e5843040 	str	r3, [r4, #64]	; 0x40
   1f160:	e1a02000 	mov	r2, r0
	ctx->memWrite(ctx->memParam, addr, val);	
   1f164:	e5943028 	ldr	r3, [r4, #40]	; 0x28
   1f168:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   1f16c:	e6ff1071 	uxth	r1, r1
}
   1f170:	e8bd4070 	pop	{r4, r5, r6, lr}
   1f174:	e12fff13 	bx	r3

0001f178 <LD_L_SRA_off_IY_d>:
	char off = read8(ctx, ctx->PC++);
   1f178:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
   1f17c:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	char off = read8(ctx, ctx->PC++);
   1f180:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
   1f184:	e2833005 	add	r3, r3, #5
{
   1f188:	e92d4070 	push	{r4, r5, r6, lr}
   1f18c:	e1a04000 	mov	r4, r0
	char off = read8(ctx, ctx->PC++);
   1f190:	e1c021bc 	strh	r2, [r0, #28]
   1f194:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   1f198:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   1f19c:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   1f1a0:	e12fff33 	blx	r3
	ctx->tstates += 3;
   1f1a4:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	BR.L = doSR(ctx, read8(ctx, WR.IY + off), 1);
   1f1a8:	e1d410ba 	ldrh	r1, [r4, #10]
   1f1ac:	e6ff5070 	uxth	r5, r0
   1f1b0:	e2833003 	add	r3, r3, #3
   1f1b4:	e0851001 	add	r1, r5, r1
   1f1b8:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   1f1bc:	e6ff1071 	uxth	r1, r1
   1f1c0:	e5943024 	ldr	r3, [r4, #36]	; 0x24
   1f1c4:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   1f1c8:	e12fff33 	blx	r3
   1f1cc:	e1a01000 	mov	r1, r0
   1f1d0:	e1a00004 	mov	r0, r4
   1f1d4:	ebfffdf0 	bl	1e99c <doSR.constprop.25>
	ctx->tstates += 3;
   1f1d8:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	write8(ctx, WR.IY + off, BR.L);	
   1f1dc:	e1d410ba 	ldrh	r1, [r4, #10]
   1f1e0:	e2833003 	add	r3, r3, #3
   1f1e4:	e0851001 	add	r1, r5, r1
	BR.L = doSR(ctx, read8(ctx, WR.IY + off), 1);
   1f1e8:	e5c40006 	strb	r0, [r4, #6]
   1f1ec:	e5843040 	str	r3, [r4, #64]	; 0x40
   1f1f0:	e1a02000 	mov	r2, r0
	ctx->memWrite(ctx->memParam, addr, val);	
   1f1f4:	e5943028 	ldr	r3, [r4, #40]	; 0x28
   1f1f8:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   1f1fc:	e6ff1071 	uxth	r1, r1
}
   1f200:	e8bd4070 	pop	{r4, r5, r6, lr}
   1f204:	e12fff13 	bx	r3

0001f208 <SRA_off_HL>:
	ctx->tstates += 3;
   1f208:	e5903040 	ldr	r3, [r0, #64]	; 0x40
{
   1f20c:	e92d4070 	push	{r4, r5, r6, lr}
	write8(ctx, WR.HL, doSR(ctx, read8(ctx, WR.HL), IA_A));
   1f210:	e1d050b6 	ldrh	r5, [r0, #6]
   1f214:	e2833004 	add	r3, r3, #4
{
   1f218:	e1a04000 	mov	r4, r0
   1f21c:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   1f220:	e1a01005 	mov	r1, r5
   1f224:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   1f228:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   1f22c:	e12fff33 	blx	r3
	write8(ctx, WR.HL, doSR(ctx, read8(ctx, WR.HL), IA_A));
   1f230:	e1a01000 	mov	r1, r0
   1f234:	e1a00004 	mov	r0, r4
   1f238:	ebfffdd7 	bl	1e99c <doSR.constprop.25>
	ctx->tstates += 3;
   1f23c:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	ctx->memWrite(ctx->memParam, addr, val);	
   1f240:	e1a02000 	mov	r2, r0
	ctx->tstates += 3;
   1f244:	e2833003 	add	r3, r3, #3
   1f248:	e5843040 	str	r3, [r4, #64]	; 0x40
	ctx->memWrite(ctx->memParam, addr, val);	
   1f24c:	e1a01005 	mov	r1, r5
   1f250:	e5943028 	ldr	r3, [r4, #40]	; 0x28
   1f254:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
}
   1f258:	e8bd4070 	pop	{r4, r5, r6, lr}
   1f25c:	e12fff13 	bx	r3

0001f260 <SRA_off_IX_d>:
	char off = read8(ctx, ctx->PC++);	
   1f260:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
   1f264:	e5903040 	ldr	r3, [r0, #64]	; 0x40
{
   1f268:	e92d4070 	push	{r4, r5, r6, lr}
	char off = read8(ctx, ctx->PC++);	
   1f26c:	e2812001 	add	r2, r1, #1
{
   1f270:	e1a04000 	mov	r4, r0
	ctx->tstates += 3;
   1f274:	e2833005 	add	r3, r3, #5
	char off = read8(ctx, ctx->PC++);	
   1f278:	e1c021bc 	strh	r2, [r0, #28]
   1f27c:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   1f280:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   1f284:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   1f288:	e12fff33 	blx	r3
	write8(ctx, WR.IX + off, doSR(ctx, read8(ctx, WR.IX + off), IA_A));
   1f28c:	e1d450b8 	ldrh	r5, [r4, #8]
	ctx->tstates += 3;
   1f290:	e5943040 	ldr	r3, [r4, #64]	; 0x40
   1f294:	e0855000 	add	r5, r5, r0
   1f298:	e6ff5075 	uxth	r5, r5
   1f29c:	e2833003 	add	r3, r3, #3
   1f2a0:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   1f2a4:	e1a01005 	mov	r1, r5
   1f2a8:	e5943024 	ldr	r3, [r4, #36]	; 0x24
   1f2ac:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   1f2b0:	e12fff33 	blx	r3
   1f2b4:	e1a01000 	mov	r1, r0
   1f2b8:	e1a00004 	mov	r0, r4
   1f2bc:	ebfffdb6 	bl	1e99c <doSR.constprop.25>
	ctx->tstates += 3;
   1f2c0:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	ctx->memWrite(ctx->memParam, addr, val);	
   1f2c4:	e1a01005 	mov	r1, r5
	ctx->tstates += 3;
   1f2c8:	e2833003 	add	r3, r3, #3
   1f2cc:	e5843040 	str	r3, [r4, #64]	; 0x40
	ctx->memWrite(ctx->memParam, addr, val);	
   1f2d0:	e1a02000 	mov	r2, r0
   1f2d4:	e5943028 	ldr	r3, [r4, #40]	; 0x28
   1f2d8:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
}
   1f2dc:	e8bd4070 	pop	{r4, r5, r6, lr}
   1f2e0:	e12fff13 	bx	r3

0001f2e4 <SRA_off_IY_d>:
	char off = read8(ctx, ctx->PC++);	
   1f2e4:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
   1f2e8:	e5903040 	ldr	r3, [r0, #64]	; 0x40
{
   1f2ec:	e92d4070 	push	{r4, r5, r6, lr}
	char off = read8(ctx, ctx->PC++);	
   1f2f0:	e2812001 	add	r2, r1, #1
{
   1f2f4:	e1a04000 	mov	r4, r0
	ctx->tstates += 3;
   1f2f8:	e2833005 	add	r3, r3, #5
	char off = read8(ctx, ctx->PC++);	
   1f2fc:	e1c021bc 	strh	r2, [r0, #28]
   1f300:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   1f304:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   1f308:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   1f30c:	e12fff33 	blx	r3
	write8(ctx, WR.IY + off, doSR(ctx, read8(ctx, WR.IY + off), IA_A));
   1f310:	e1d450ba 	ldrh	r5, [r4, #10]
	ctx->tstates += 3;
   1f314:	e5943040 	ldr	r3, [r4, #64]	; 0x40
   1f318:	e0855000 	add	r5, r5, r0
   1f31c:	e6ff5075 	uxth	r5, r5
   1f320:	e2833003 	add	r3, r3, #3
   1f324:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   1f328:	e1a01005 	mov	r1, r5
   1f32c:	e5943024 	ldr	r3, [r4, #36]	; 0x24
   1f330:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   1f334:	e12fff33 	blx	r3
   1f338:	e1a01000 	mov	r1, r0
   1f33c:	e1a00004 	mov	r0, r4
   1f340:	ebfffd95 	bl	1e99c <doSR.constprop.25>
	ctx->tstates += 3;
   1f344:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	ctx->memWrite(ctx->memParam, addr, val);	
   1f348:	e1a01005 	mov	r1, r5
	ctx->tstates += 3;
   1f34c:	e2833003 	add	r3, r3, #3
   1f350:	e5843040 	str	r3, [r4, #64]	; 0x40
	ctx->memWrite(ctx->memParam, addr, val);	
   1f354:	e1a02000 	mov	r2, r0
   1f358:	e5943028 	ldr	r3, [r4, #40]	; 0x28
   1f35c:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
}
   1f360:	e8bd4070 	pop	{r4, r5, r6, lr}
   1f364:	e12fff13 	bx	r3

0001f368 <doSR.constprop.26>:
static byte doSR (Z80Context* ctx, byte val, int isArith)
   1f368:	e5d03000 	ldrb	r3, [r0]
	if (val)
   1f36c:	e3110001 	tst	r1, #1
    val >>= 1;
   1f370:	e1a010a1 	lsr	r1, r1, #1
	BR.F |= flag;
   1f374:	13833001 	orrne	r3, r3, #1
	BR.F &= ~flag;
   1f378:	020330fe 	andeq	r3, r3, #254	; 0xfe
	if (val)
   1f37c:	e3110020 	tst	r1, #32
	BR.F |= flag;
   1f380:	13833020 	orrne	r3, r3, #32
	BR.F &= ~flag;
   1f384:	020330df 	andeq	r3, r3, #223	; 0xdf
	if (val)
   1f388:	e3110008 	tst	r1, #8
	BR.F |= flag;
   1f38c:	13833008 	orrne	r3, r3, #8
	BR.F &= ~flag;
   1f390:	16af2073 	sxtbne	r2, r3
	if (val)
   1f394:	1a000009 	bne	1f3c0 <doSR.constprop.26+0x58>
	BR.F &= ~flag;
   1f398:	e6af3073 	sxtb	r3, r3
	if (val)
   1f39c:	e3510000 	cmp	r1, #0
	BR.F &= ~flag;
   1f3a0:	e3c32008 	bic	r2, r3, #8
	if (val)
   1f3a4:	1a000005 	bne	1f3c0 <doSR.constprop.26+0x58>
	BR.F &= ~flag;
   1f3a8:	e2033065 	and	r3, r3, #101	; 0x65
	BR.F |= flag;
   1f3ac:	e3833040 	orr	r3, r3, #64	; 0x40
   1f3b0:	e3833004 	orr	r3, r3, #4
   1f3b4:	e5c03000 	strb	r3, [r0]
}
   1f3b8:	e1a00001 	mov	r0, r1
   1f3bc:	e12fff1e 	bx	lr
	VALFLAG(F_PV, parityBit[val]);
   1f3c0:	e59fc018 	ldr	ip, [pc, #24]	; 1f3e0 <doSR.constprop.26+0x78>
	BR.F &= ~flag;
   1f3c4:	e202302d 	and	r3, r2, #45	; 0x2d
	if (val)
   1f3c8:	e79cc101 	ldr	ip, [ip, r1, lsl #2]
   1f3cc:	e5c03000 	strb	r3, [r0]
   1f3d0:	e35c0000 	cmp	ip, #0
	BR.F &= ~flag;
   1f3d4:	02023029 	andeq	r3, r2, #41	; 0x29
	if (val)
   1f3d8:	0afffff5 	beq	1f3b4 <doSR.constprop.26+0x4c>
   1f3dc:	eafffff3 	b	1f3b0 <doSR.constprop.26+0x48>
   1f3e0:	0004f000 	.word	0x0004f000

0001f3e4 <LD_A_SRL_off_IX_d>:
	char off = read8(ctx, ctx->PC++);
   1f3e4:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
   1f3e8:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	char off = read8(ctx, ctx->PC++);
   1f3ec:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
   1f3f0:	e2833005 	add	r3, r3, #5
{
   1f3f4:	e92d4070 	push	{r4, r5, r6, lr}
   1f3f8:	e1a04000 	mov	r4, r0
	char off = read8(ctx, ctx->PC++);
   1f3fc:	e1c021bc 	strh	r2, [r0, #28]
   1f400:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   1f404:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   1f408:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   1f40c:	e12fff33 	blx	r3
	ctx->tstates += 3;
   1f410:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	BR.A = doSR(ctx, read8(ctx, WR.IX + off), 0);
   1f414:	e1d410b8 	ldrh	r1, [r4, #8]
   1f418:	e6ff5070 	uxth	r5, r0
   1f41c:	e2833003 	add	r3, r3, #3
   1f420:	e0851001 	add	r1, r5, r1
   1f424:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   1f428:	e6ff1071 	uxth	r1, r1
   1f42c:	e5943024 	ldr	r3, [r4, #36]	; 0x24
   1f430:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   1f434:	e12fff33 	blx	r3
   1f438:	e1a01000 	mov	r1, r0
   1f43c:	e1a00004 	mov	r0, r4
   1f440:	ebffffc8 	bl	1f368 <doSR.constprop.26>
	ctx->tstates += 3;
   1f444:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	write8(ctx, WR.IX + off, BR.A);	
   1f448:	e1d410b8 	ldrh	r1, [r4, #8]
   1f44c:	e2833003 	add	r3, r3, #3
   1f450:	e0851001 	add	r1, r5, r1
	BR.A = doSR(ctx, read8(ctx, WR.IX + off), 0);
   1f454:	e5c40001 	strb	r0, [r4, #1]
   1f458:	e5843040 	str	r3, [r4, #64]	; 0x40
   1f45c:	e1a02000 	mov	r2, r0
	ctx->memWrite(ctx->memParam, addr, val);	
   1f460:	e5943028 	ldr	r3, [r4, #40]	; 0x28
   1f464:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   1f468:	e6ff1071 	uxth	r1, r1
}
   1f46c:	e8bd4070 	pop	{r4, r5, r6, lr}
   1f470:	e12fff13 	bx	r3

0001f474 <LD_A_SRL_off_IY_d>:
	char off = read8(ctx, ctx->PC++);
   1f474:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
   1f478:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	char off = read8(ctx, ctx->PC++);
   1f47c:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
   1f480:	e2833005 	add	r3, r3, #5
{
   1f484:	e92d4070 	push	{r4, r5, r6, lr}
   1f488:	e1a04000 	mov	r4, r0
	char off = read8(ctx, ctx->PC++);
   1f48c:	e1c021bc 	strh	r2, [r0, #28]
   1f490:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   1f494:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   1f498:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   1f49c:	e12fff33 	blx	r3
	ctx->tstates += 3;
   1f4a0:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	BR.A = doSR(ctx, read8(ctx, WR.IY + off), 0);
   1f4a4:	e1d410ba 	ldrh	r1, [r4, #10]
   1f4a8:	e6ff5070 	uxth	r5, r0
   1f4ac:	e2833003 	add	r3, r3, #3
   1f4b0:	e0851001 	add	r1, r5, r1
   1f4b4:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   1f4b8:	e6ff1071 	uxth	r1, r1
   1f4bc:	e5943024 	ldr	r3, [r4, #36]	; 0x24
   1f4c0:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   1f4c4:	e12fff33 	blx	r3
   1f4c8:	e1a01000 	mov	r1, r0
   1f4cc:	e1a00004 	mov	r0, r4
   1f4d0:	ebffffa4 	bl	1f368 <doSR.constprop.26>
	ctx->tstates += 3;
   1f4d4:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	write8(ctx, WR.IY + off, BR.A);	
   1f4d8:	e1d410ba 	ldrh	r1, [r4, #10]
   1f4dc:	e2833003 	add	r3, r3, #3
   1f4e0:	e0851001 	add	r1, r5, r1
	BR.A = doSR(ctx, read8(ctx, WR.IY + off), 0);
   1f4e4:	e5c40001 	strb	r0, [r4, #1]
   1f4e8:	e5843040 	str	r3, [r4, #64]	; 0x40
   1f4ec:	e1a02000 	mov	r2, r0
	ctx->memWrite(ctx->memParam, addr, val);	
   1f4f0:	e5943028 	ldr	r3, [r4, #40]	; 0x28
   1f4f4:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   1f4f8:	e6ff1071 	uxth	r1, r1
}
   1f4fc:	e8bd4070 	pop	{r4, r5, r6, lr}
   1f500:	e12fff13 	bx	r3

0001f504 <LD_B_SRL_off_IX_d>:
	char off = read8(ctx, ctx->PC++);
   1f504:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
   1f508:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	char off = read8(ctx, ctx->PC++);
   1f50c:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
   1f510:	e2833005 	add	r3, r3, #5
{
   1f514:	e92d4070 	push	{r4, r5, r6, lr}
   1f518:	e1a04000 	mov	r4, r0
	char off = read8(ctx, ctx->PC++);
   1f51c:	e1c021bc 	strh	r2, [r0, #28]
   1f520:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   1f524:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   1f528:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   1f52c:	e12fff33 	blx	r3
	ctx->tstates += 3;
   1f530:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	BR.B = doSR(ctx, read8(ctx, WR.IX + off), 0);
   1f534:	e1d410b8 	ldrh	r1, [r4, #8]
   1f538:	e6ff5070 	uxth	r5, r0
   1f53c:	e2833003 	add	r3, r3, #3
   1f540:	e0851001 	add	r1, r5, r1
   1f544:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   1f548:	e6ff1071 	uxth	r1, r1
   1f54c:	e5943024 	ldr	r3, [r4, #36]	; 0x24
   1f550:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   1f554:	e12fff33 	blx	r3
   1f558:	e1a01000 	mov	r1, r0
   1f55c:	e1a00004 	mov	r0, r4
   1f560:	ebffff80 	bl	1f368 <doSR.constprop.26>
	ctx->tstates += 3;
   1f564:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	write8(ctx, WR.IX + off, BR.B);	
   1f568:	e1d410b8 	ldrh	r1, [r4, #8]
   1f56c:	e2833003 	add	r3, r3, #3
   1f570:	e0851001 	add	r1, r5, r1
	BR.B = doSR(ctx, read8(ctx, WR.IX + off), 0);
   1f574:	e5c40003 	strb	r0, [r4, #3]
   1f578:	e5843040 	str	r3, [r4, #64]	; 0x40
   1f57c:	e1a02000 	mov	r2, r0
	ctx->memWrite(ctx->memParam, addr, val);	
   1f580:	e5943028 	ldr	r3, [r4, #40]	; 0x28
   1f584:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   1f588:	e6ff1071 	uxth	r1, r1
}
   1f58c:	e8bd4070 	pop	{r4, r5, r6, lr}
   1f590:	e12fff13 	bx	r3

0001f594 <LD_B_SRL_off_IY_d>:
	char off = read8(ctx, ctx->PC++);
   1f594:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
   1f598:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	char off = read8(ctx, ctx->PC++);
   1f59c:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
   1f5a0:	e2833005 	add	r3, r3, #5
{
   1f5a4:	e92d4070 	push	{r4, r5, r6, lr}
   1f5a8:	e1a04000 	mov	r4, r0
	char off = read8(ctx, ctx->PC++);
   1f5ac:	e1c021bc 	strh	r2, [r0, #28]
   1f5b0:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   1f5b4:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   1f5b8:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   1f5bc:	e12fff33 	blx	r3
	ctx->tstates += 3;
   1f5c0:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	BR.B = doSR(ctx, read8(ctx, WR.IY + off), 0);
   1f5c4:	e1d410ba 	ldrh	r1, [r4, #10]
   1f5c8:	e6ff5070 	uxth	r5, r0
   1f5cc:	e2833003 	add	r3, r3, #3
   1f5d0:	e0851001 	add	r1, r5, r1
   1f5d4:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   1f5d8:	e6ff1071 	uxth	r1, r1
   1f5dc:	e5943024 	ldr	r3, [r4, #36]	; 0x24
   1f5e0:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   1f5e4:	e12fff33 	blx	r3
   1f5e8:	e1a01000 	mov	r1, r0
   1f5ec:	e1a00004 	mov	r0, r4
   1f5f0:	ebffff5c 	bl	1f368 <doSR.constprop.26>
	ctx->tstates += 3;
   1f5f4:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	write8(ctx, WR.IY + off, BR.B);	
   1f5f8:	e1d410ba 	ldrh	r1, [r4, #10]
   1f5fc:	e2833003 	add	r3, r3, #3
   1f600:	e0851001 	add	r1, r5, r1
	BR.B = doSR(ctx, read8(ctx, WR.IY + off), 0);
   1f604:	e5c40003 	strb	r0, [r4, #3]
   1f608:	e5843040 	str	r3, [r4, #64]	; 0x40
   1f60c:	e1a02000 	mov	r2, r0
	ctx->memWrite(ctx->memParam, addr, val);	
   1f610:	e5943028 	ldr	r3, [r4, #40]	; 0x28
   1f614:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   1f618:	e6ff1071 	uxth	r1, r1
}
   1f61c:	e8bd4070 	pop	{r4, r5, r6, lr}
   1f620:	e12fff13 	bx	r3

0001f624 <LD_C_SRL_off_IX_d>:
	char off = read8(ctx, ctx->PC++);
   1f624:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
   1f628:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	char off = read8(ctx, ctx->PC++);
   1f62c:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
   1f630:	e2833005 	add	r3, r3, #5
{
   1f634:	e92d4070 	push	{r4, r5, r6, lr}
   1f638:	e1a04000 	mov	r4, r0
	char off = read8(ctx, ctx->PC++);
   1f63c:	e1c021bc 	strh	r2, [r0, #28]
   1f640:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   1f644:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   1f648:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   1f64c:	e12fff33 	blx	r3
	ctx->tstates += 3;
   1f650:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	BR.C = doSR(ctx, read8(ctx, WR.IX + off), 0);
   1f654:	e1d410b8 	ldrh	r1, [r4, #8]
   1f658:	e6ff5070 	uxth	r5, r0
   1f65c:	e2833003 	add	r3, r3, #3
   1f660:	e0851001 	add	r1, r5, r1
   1f664:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   1f668:	e6ff1071 	uxth	r1, r1
   1f66c:	e5943024 	ldr	r3, [r4, #36]	; 0x24
   1f670:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   1f674:	e12fff33 	blx	r3
   1f678:	e1a01000 	mov	r1, r0
   1f67c:	e1a00004 	mov	r0, r4
   1f680:	ebffff38 	bl	1f368 <doSR.constprop.26>
	ctx->tstates += 3;
   1f684:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	write8(ctx, WR.IX + off, BR.C);	
   1f688:	e1d410b8 	ldrh	r1, [r4, #8]
   1f68c:	e2833003 	add	r3, r3, #3
   1f690:	e0851001 	add	r1, r5, r1
	BR.C = doSR(ctx, read8(ctx, WR.IX + off), 0);
   1f694:	e5c40002 	strb	r0, [r4, #2]
   1f698:	e5843040 	str	r3, [r4, #64]	; 0x40
   1f69c:	e1a02000 	mov	r2, r0
	ctx->memWrite(ctx->memParam, addr, val);	
   1f6a0:	e5943028 	ldr	r3, [r4, #40]	; 0x28
   1f6a4:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   1f6a8:	e6ff1071 	uxth	r1, r1
}
   1f6ac:	e8bd4070 	pop	{r4, r5, r6, lr}
   1f6b0:	e12fff13 	bx	r3

0001f6b4 <LD_C_SRL_off_IY_d>:
	char off = read8(ctx, ctx->PC++);
   1f6b4:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
   1f6b8:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	char off = read8(ctx, ctx->PC++);
   1f6bc:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
   1f6c0:	e2833005 	add	r3, r3, #5
{
   1f6c4:	e92d4070 	push	{r4, r5, r6, lr}
   1f6c8:	e1a04000 	mov	r4, r0
	char off = read8(ctx, ctx->PC++);
   1f6cc:	e1c021bc 	strh	r2, [r0, #28]
   1f6d0:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   1f6d4:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   1f6d8:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   1f6dc:	e12fff33 	blx	r3
	ctx->tstates += 3;
   1f6e0:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	BR.C = doSR(ctx, read8(ctx, WR.IY + off), 0);
   1f6e4:	e1d410ba 	ldrh	r1, [r4, #10]
   1f6e8:	e6ff5070 	uxth	r5, r0
   1f6ec:	e2833003 	add	r3, r3, #3
   1f6f0:	e0851001 	add	r1, r5, r1
   1f6f4:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   1f6f8:	e6ff1071 	uxth	r1, r1
   1f6fc:	e5943024 	ldr	r3, [r4, #36]	; 0x24
   1f700:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   1f704:	e12fff33 	blx	r3
   1f708:	e1a01000 	mov	r1, r0
   1f70c:	e1a00004 	mov	r0, r4
   1f710:	ebffff14 	bl	1f368 <doSR.constprop.26>
	ctx->tstates += 3;
   1f714:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	write8(ctx, WR.IY + off, BR.C);	
   1f718:	e1d410ba 	ldrh	r1, [r4, #10]
   1f71c:	e2833003 	add	r3, r3, #3
   1f720:	e0851001 	add	r1, r5, r1
	BR.C = doSR(ctx, read8(ctx, WR.IY + off), 0);
   1f724:	e5c40002 	strb	r0, [r4, #2]
   1f728:	e5843040 	str	r3, [r4, #64]	; 0x40
   1f72c:	e1a02000 	mov	r2, r0
	ctx->memWrite(ctx->memParam, addr, val);	
   1f730:	e5943028 	ldr	r3, [r4, #40]	; 0x28
   1f734:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   1f738:	e6ff1071 	uxth	r1, r1
}
   1f73c:	e8bd4070 	pop	{r4, r5, r6, lr}
   1f740:	e12fff13 	bx	r3

0001f744 <LD_D_SRL_off_IX_d>:
	char off = read8(ctx, ctx->PC++);
   1f744:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
   1f748:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	char off = read8(ctx, ctx->PC++);
   1f74c:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
   1f750:	e2833005 	add	r3, r3, #5
{
   1f754:	e92d4070 	push	{r4, r5, r6, lr}
   1f758:	e1a04000 	mov	r4, r0
	char off = read8(ctx, ctx->PC++);
   1f75c:	e1c021bc 	strh	r2, [r0, #28]
   1f760:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   1f764:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   1f768:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   1f76c:	e12fff33 	blx	r3
	ctx->tstates += 3;
   1f770:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	BR.D = doSR(ctx, read8(ctx, WR.IX + off), 0);
   1f774:	e1d410b8 	ldrh	r1, [r4, #8]
   1f778:	e6ff5070 	uxth	r5, r0
   1f77c:	e2833003 	add	r3, r3, #3
   1f780:	e0851001 	add	r1, r5, r1
   1f784:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   1f788:	e6ff1071 	uxth	r1, r1
   1f78c:	e5943024 	ldr	r3, [r4, #36]	; 0x24
   1f790:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   1f794:	e12fff33 	blx	r3
   1f798:	e1a01000 	mov	r1, r0
   1f79c:	e1a00004 	mov	r0, r4
   1f7a0:	ebfffef0 	bl	1f368 <doSR.constprop.26>
	ctx->tstates += 3;
   1f7a4:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	write8(ctx, WR.IX + off, BR.D);	
   1f7a8:	e1d410b8 	ldrh	r1, [r4, #8]
   1f7ac:	e2833003 	add	r3, r3, #3
   1f7b0:	e0851001 	add	r1, r5, r1
	BR.D = doSR(ctx, read8(ctx, WR.IX + off), 0);
   1f7b4:	e5c40005 	strb	r0, [r4, #5]
   1f7b8:	e5843040 	str	r3, [r4, #64]	; 0x40
   1f7bc:	e1a02000 	mov	r2, r0
	ctx->memWrite(ctx->memParam, addr, val);	
   1f7c0:	e5943028 	ldr	r3, [r4, #40]	; 0x28
   1f7c4:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   1f7c8:	e6ff1071 	uxth	r1, r1
}
   1f7cc:	e8bd4070 	pop	{r4, r5, r6, lr}
   1f7d0:	e12fff13 	bx	r3

0001f7d4 <LD_D_SRL_off_IY_d>:
	char off = read8(ctx, ctx->PC++);
   1f7d4:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
   1f7d8:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	char off = read8(ctx, ctx->PC++);
   1f7dc:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
   1f7e0:	e2833005 	add	r3, r3, #5
{
   1f7e4:	e92d4070 	push	{r4, r5, r6, lr}
   1f7e8:	e1a04000 	mov	r4, r0
	char off = read8(ctx, ctx->PC++);
   1f7ec:	e1c021bc 	strh	r2, [r0, #28]
   1f7f0:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   1f7f4:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   1f7f8:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   1f7fc:	e12fff33 	blx	r3
	ctx->tstates += 3;
   1f800:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	BR.D = doSR(ctx, read8(ctx, WR.IY + off), 0);
   1f804:	e1d410ba 	ldrh	r1, [r4, #10]
   1f808:	e6ff5070 	uxth	r5, r0
   1f80c:	e2833003 	add	r3, r3, #3
   1f810:	e0851001 	add	r1, r5, r1
   1f814:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   1f818:	e6ff1071 	uxth	r1, r1
   1f81c:	e5943024 	ldr	r3, [r4, #36]	; 0x24
   1f820:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   1f824:	e12fff33 	blx	r3
   1f828:	e1a01000 	mov	r1, r0
   1f82c:	e1a00004 	mov	r0, r4
   1f830:	ebfffecc 	bl	1f368 <doSR.constprop.26>
	ctx->tstates += 3;
   1f834:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	write8(ctx, WR.IY + off, BR.D);	
   1f838:	e1d410ba 	ldrh	r1, [r4, #10]
   1f83c:	e2833003 	add	r3, r3, #3
   1f840:	e0851001 	add	r1, r5, r1
	BR.D = doSR(ctx, read8(ctx, WR.IY + off), 0);
   1f844:	e5c40005 	strb	r0, [r4, #5]
   1f848:	e5843040 	str	r3, [r4, #64]	; 0x40
   1f84c:	e1a02000 	mov	r2, r0
	ctx->memWrite(ctx->memParam, addr, val);	
   1f850:	e5943028 	ldr	r3, [r4, #40]	; 0x28
   1f854:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   1f858:	e6ff1071 	uxth	r1, r1
}
   1f85c:	e8bd4070 	pop	{r4, r5, r6, lr}
   1f860:	e12fff13 	bx	r3

0001f864 <LD_E_SRL_off_IX_d>:
	char off = read8(ctx, ctx->PC++);
   1f864:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
   1f868:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	char off = read8(ctx, ctx->PC++);
   1f86c:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
   1f870:	e2833005 	add	r3, r3, #5
{
   1f874:	e92d4070 	push	{r4, r5, r6, lr}
   1f878:	e1a04000 	mov	r4, r0
	char off = read8(ctx, ctx->PC++);
   1f87c:	e1c021bc 	strh	r2, [r0, #28]
   1f880:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   1f884:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   1f888:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   1f88c:	e12fff33 	blx	r3
	ctx->tstates += 3;
   1f890:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	BR.E = doSR(ctx, read8(ctx, WR.IX + off), 0);
   1f894:	e1d410b8 	ldrh	r1, [r4, #8]
   1f898:	e6ff5070 	uxth	r5, r0
   1f89c:	e2833003 	add	r3, r3, #3
   1f8a0:	e0851001 	add	r1, r5, r1
   1f8a4:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   1f8a8:	e6ff1071 	uxth	r1, r1
   1f8ac:	e5943024 	ldr	r3, [r4, #36]	; 0x24
   1f8b0:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   1f8b4:	e12fff33 	blx	r3
   1f8b8:	e1a01000 	mov	r1, r0
   1f8bc:	e1a00004 	mov	r0, r4
   1f8c0:	ebfffea8 	bl	1f368 <doSR.constprop.26>
	ctx->tstates += 3;
   1f8c4:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	write8(ctx, WR.IX + off, BR.E);	
   1f8c8:	e1d410b8 	ldrh	r1, [r4, #8]
   1f8cc:	e2833003 	add	r3, r3, #3
   1f8d0:	e0851001 	add	r1, r5, r1
	BR.E = doSR(ctx, read8(ctx, WR.IX + off), 0);
   1f8d4:	e5c40004 	strb	r0, [r4, #4]
   1f8d8:	e5843040 	str	r3, [r4, #64]	; 0x40
   1f8dc:	e1a02000 	mov	r2, r0
	ctx->memWrite(ctx->memParam, addr, val);	
   1f8e0:	e5943028 	ldr	r3, [r4, #40]	; 0x28
   1f8e4:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   1f8e8:	e6ff1071 	uxth	r1, r1
}
   1f8ec:	e8bd4070 	pop	{r4, r5, r6, lr}
   1f8f0:	e12fff13 	bx	r3

0001f8f4 <LD_E_SRL_off_IY_d>:
	char off = read8(ctx, ctx->PC++);
   1f8f4:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
   1f8f8:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	char off = read8(ctx, ctx->PC++);
   1f8fc:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
   1f900:	e2833005 	add	r3, r3, #5
{
   1f904:	e92d4070 	push	{r4, r5, r6, lr}
   1f908:	e1a04000 	mov	r4, r0
	char off = read8(ctx, ctx->PC++);
   1f90c:	e1c021bc 	strh	r2, [r0, #28]
   1f910:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   1f914:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   1f918:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   1f91c:	e12fff33 	blx	r3
	ctx->tstates += 3;
   1f920:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	BR.E = doSR(ctx, read8(ctx, WR.IY + off), 0);
   1f924:	e1d410ba 	ldrh	r1, [r4, #10]
   1f928:	e6ff5070 	uxth	r5, r0
   1f92c:	e2833003 	add	r3, r3, #3
   1f930:	e0851001 	add	r1, r5, r1
   1f934:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   1f938:	e6ff1071 	uxth	r1, r1
   1f93c:	e5943024 	ldr	r3, [r4, #36]	; 0x24
   1f940:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   1f944:	e12fff33 	blx	r3
   1f948:	e1a01000 	mov	r1, r0
   1f94c:	e1a00004 	mov	r0, r4
   1f950:	ebfffe84 	bl	1f368 <doSR.constprop.26>
	ctx->tstates += 3;
   1f954:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	write8(ctx, WR.IY + off, BR.E);	
   1f958:	e1d410ba 	ldrh	r1, [r4, #10]
   1f95c:	e2833003 	add	r3, r3, #3
   1f960:	e0851001 	add	r1, r5, r1
	BR.E = doSR(ctx, read8(ctx, WR.IY + off), 0);
   1f964:	e5c40004 	strb	r0, [r4, #4]
   1f968:	e5843040 	str	r3, [r4, #64]	; 0x40
   1f96c:	e1a02000 	mov	r2, r0
	ctx->memWrite(ctx->memParam, addr, val);	
   1f970:	e5943028 	ldr	r3, [r4, #40]	; 0x28
   1f974:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   1f978:	e6ff1071 	uxth	r1, r1
}
   1f97c:	e8bd4070 	pop	{r4, r5, r6, lr}
   1f980:	e12fff13 	bx	r3

0001f984 <LD_H_SRL_off_IX_d>:
	char off = read8(ctx, ctx->PC++);
   1f984:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
   1f988:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	char off = read8(ctx, ctx->PC++);
   1f98c:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
   1f990:	e2833005 	add	r3, r3, #5
{
   1f994:	e92d4070 	push	{r4, r5, r6, lr}
   1f998:	e1a04000 	mov	r4, r0
	char off = read8(ctx, ctx->PC++);
   1f99c:	e1c021bc 	strh	r2, [r0, #28]
   1f9a0:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   1f9a4:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   1f9a8:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   1f9ac:	e12fff33 	blx	r3
	ctx->tstates += 3;
   1f9b0:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	BR.H = doSR(ctx, read8(ctx, WR.IX + off), 0);
   1f9b4:	e1d410b8 	ldrh	r1, [r4, #8]
   1f9b8:	e6ff5070 	uxth	r5, r0
   1f9bc:	e2833003 	add	r3, r3, #3
   1f9c0:	e0851001 	add	r1, r5, r1
   1f9c4:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   1f9c8:	e6ff1071 	uxth	r1, r1
   1f9cc:	e5943024 	ldr	r3, [r4, #36]	; 0x24
   1f9d0:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   1f9d4:	e12fff33 	blx	r3
   1f9d8:	e1a01000 	mov	r1, r0
   1f9dc:	e1a00004 	mov	r0, r4
   1f9e0:	ebfffe60 	bl	1f368 <doSR.constprop.26>
	ctx->tstates += 3;
   1f9e4:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	write8(ctx, WR.IX + off, BR.H);	
   1f9e8:	e1d410b8 	ldrh	r1, [r4, #8]
   1f9ec:	e2833003 	add	r3, r3, #3
   1f9f0:	e0851001 	add	r1, r5, r1
	BR.H = doSR(ctx, read8(ctx, WR.IX + off), 0);
   1f9f4:	e5c40007 	strb	r0, [r4, #7]
   1f9f8:	e5843040 	str	r3, [r4, #64]	; 0x40
   1f9fc:	e1a02000 	mov	r2, r0
	ctx->memWrite(ctx->memParam, addr, val);	
   1fa00:	e5943028 	ldr	r3, [r4, #40]	; 0x28
   1fa04:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   1fa08:	e6ff1071 	uxth	r1, r1
}
   1fa0c:	e8bd4070 	pop	{r4, r5, r6, lr}
   1fa10:	e12fff13 	bx	r3

0001fa14 <LD_H_SRL_off_IY_d>:
	char off = read8(ctx, ctx->PC++);
   1fa14:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
   1fa18:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	char off = read8(ctx, ctx->PC++);
   1fa1c:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
   1fa20:	e2833005 	add	r3, r3, #5
{
   1fa24:	e92d4070 	push	{r4, r5, r6, lr}
   1fa28:	e1a04000 	mov	r4, r0
	char off = read8(ctx, ctx->PC++);
   1fa2c:	e1c021bc 	strh	r2, [r0, #28]
   1fa30:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   1fa34:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   1fa38:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   1fa3c:	e12fff33 	blx	r3
	ctx->tstates += 3;
   1fa40:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	BR.H = doSR(ctx, read8(ctx, WR.IY + off), 0);
   1fa44:	e1d410ba 	ldrh	r1, [r4, #10]
   1fa48:	e6ff5070 	uxth	r5, r0
   1fa4c:	e2833003 	add	r3, r3, #3
   1fa50:	e0851001 	add	r1, r5, r1
   1fa54:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   1fa58:	e6ff1071 	uxth	r1, r1
   1fa5c:	e5943024 	ldr	r3, [r4, #36]	; 0x24
   1fa60:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   1fa64:	e12fff33 	blx	r3
   1fa68:	e1a01000 	mov	r1, r0
   1fa6c:	e1a00004 	mov	r0, r4
   1fa70:	ebfffe3c 	bl	1f368 <doSR.constprop.26>
	ctx->tstates += 3;
   1fa74:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	write8(ctx, WR.IY + off, BR.H);	
   1fa78:	e1d410ba 	ldrh	r1, [r4, #10]
   1fa7c:	e2833003 	add	r3, r3, #3
   1fa80:	e0851001 	add	r1, r5, r1
	BR.H = doSR(ctx, read8(ctx, WR.IY + off), 0);
   1fa84:	e5c40007 	strb	r0, [r4, #7]
   1fa88:	e5843040 	str	r3, [r4, #64]	; 0x40
   1fa8c:	e1a02000 	mov	r2, r0
	ctx->memWrite(ctx->memParam, addr, val);	
   1fa90:	e5943028 	ldr	r3, [r4, #40]	; 0x28
   1fa94:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   1fa98:	e6ff1071 	uxth	r1, r1
}
   1fa9c:	e8bd4070 	pop	{r4, r5, r6, lr}
   1faa0:	e12fff13 	bx	r3

0001faa4 <LD_L_SRL_off_IX_d>:
	char off = read8(ctx, ctx->PC++);
   1faa4:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
   1faa8:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	char off = read8(ctx, ctx->PC++);
   1faac:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
   1fab0:	e2833005 	add	r3, r3, #5
{
   1fab4:	e92d4070 	push	{r4, r5, r6, lr}
   1fab8:	e1a04000 	mov	r4, r0
	char off = read8(ctx, ctx->PC++);
   1fabc:	e1c021bc 	strh	r2, [r0, #28]
   1fac0:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   1fac4:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   1fac8:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   1facc:	e12fff33 	blx	r3
	ctx->tstates += 3;
   1fad0:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	BR.L = doSR(ctx, read8(ctx, WR.IX + off), 0);
   1fad4:	e1d410b8 	ldrh	r1, [r4, #8]
   1fad8:	e6ff5070 	uxth	r5, r0
   1fadc:	e2833003 	add	r3, r3, #3
   1fae0:	e0851001 	add	r1, r5, r1
   1fae4:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   1fae8:	e6ff1071 	uxth	r1, r1
   1faec:	e5943024 	ldr	r3, [r4, #36]	; 0x24
   1faf0:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   1faf4:	e12fff33 	blx	r3
   1faf8:	e1a01000 	mov	r1, r0
   1fafc:	e1a00004 	mov	r0, r4
   1fb00:	ebfffe18 	bl	1f368 <doSR.constprop.26>
	ctx->tstates += 3;
   1fb04:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	write8(ctx, WR.IX + off, BR.L);	
   1fb08:	e1d410b8 	ldrh	r1, [r4, #8]
   1fb0c:	e2833003 	add	r3, r3, #3
   1fb10:	e0851001 	add	r1, r5, r1
	BR.L = doSR(ctx, read8(ctx, WR.IX + off), 0);
   1fb14:	e5c40006 	strb	r0, [r4, #6]
   1fb18:	e5843040 	str	r3, [r4, #64]	; 0x40
   1fb1c:	e1a02000 	mov	r2, r0
	ctx->memWrite(ctx->memParam, addr, val);	
   1fb20:	e5943028 	ldr	r3, [r4, #40]	; 0x28
   1fb24:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   1fb28:	e6ff1071 	uxth	r1, r1
}
   1fb2c:	e8bd4070 	pop	{r4, r5, r6, lr}
   1fb30:	e12fff13 	bx	r3

0001fb34 <LD_L_SRL_off_IY_d>:
	char off = read8(ctx, ctx->PC++);
   1fb34:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
   1fb38:	e5903040 	ldr	r3, [r0, #64]	; 0x40
	char off = read8(ctx, ctx->PC++);
   1fb3c:	e2812001 	add	r2, r1, #1
	ctx->tstates += 3;
   1fb40:	e2833005 	add	r3, r3, #5
{
   1fb44:	e92d4070 	push	{r4, r5, r6, lr}
   1fb48:	e1a04000 	mov	r4, r0
	char off = read8(ctx, ctx->PC++);
   1fb4c:	e1c021bc 	strh	r2, [r0, #28]
   1fb50:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   1fb54:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   1fb58:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   1fb5c:	e12fff33 	blx	r3
	ctx->tstates += 3;
   1fb60:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	BR.L = doSR(ctx, read8(ctx, WR.IY + off), 0);
   1fb64:	e1d410ba 	ldrh	r1, [r4, #10]
   1fb68:	e6ff5070 	uxth	r5, r0
   1fb6c:	e2833003 	add	r3, r3, #3
   1fb70:	e0851001 	add	r1, r5, r1
   1fb74:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   1fb78:	e6ff1071 	uxth	r1, r1
   1fb7c:	e5943024 	ldr	r3, [r4, #36]	; 0x24
   1fb80:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   1fb84:	e12fff33 	blx	r3
   1fb88:	e1a01000 	mov	r1, r0
   1fb8c:	e1a00004 	mov	r0, r4
   1fb90:	ebfffdf4 	bl	1f368 <doSR.constprop.26>
	ctx->tstates += 3;
   1fb94:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	write8(ctx, WR.IY + off, BR.L);	
   1fb98:	e1d410ba 	ldrh	r1, [r4, #10]
   1fb9c:	e2833003 	add	r3, r3, #3
   1fba0:	e0851001 	add	r1, r5, r1
	BR.L = doSR(ctx, read8(ctx, WR.IY + off), 0);
   1fba4:	e5c40006 	strb	r0, [r4, #6]
   1fba8:	e5843040 	str	r3, [r4, #64]	; 0x40
   1fbac:	e1a02000 	mov	r2, r0
	ctx->memWrite(ctx->memParam, addr, val);	
   1fbb0:	e5943028 	ldr	r3, [r4, #40]	; 0x28
   1fbb4:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   1fbb8:	e6ff1071 	uxth	r1, r1
}
   1fbbc:	e8bd4070 	pop	{r4, r5, r6, lr}
   1fbc0:	e12fff13 	bx	r3

0001fbc4 <SRL_off_HL>:
	ctx->tstates += 3;
   1fbc4:	e5903040 	ldr	r3, [r0, #64]	; 0x40
{
   1fbc8:	e92d4070 	push	{r4, r5, r6, lr}
	write8(ctx, WR.HL, doSR(ctx, read8(ctx, WR.HL), IA_L));
   1fbcc:	e1d050b6 	ldrh	r5, [r0, #6]
   1fbd0:	e2833004 	add	r3, r3, #4
{
   1fbd4:	e1a04000 	mov	r4, r0
   1fbd8:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   1fbdc:	e1a01005 	mov	r1, r5
   1fbe0:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   1fbe4:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   1fbe8:	e12fff33 	blx	r3
	write8(ctx, WR.HL, doSR(ctx, read8(ctx, WR.HL), IA_L));
   1fbec:	e1a01000 	mov	r1, r0
   1fbf0:	e1a00004 	mov	r0, r4
   1fbf4:	ebfffddb 	bl	1f368 <doSR.constprop.26>
	ctx->tstates += 3;
   1fbf8:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	ctx->memWrite(ctx->memParam, addr, val);	
   1fbfc:	e1a02000 	mov	r2, r0
	ctx->tstates += 3;
   1fc00:	e2833003 	add	r3, r3, #3
   1fc04:	e5843040 	str	r3, [r4, #64]	; 0x40
	ctx->memWrite(ctx->memParam, addr, val);	
   1fc08:	e1a01005 	mov	r1, r5
   1fc0c:	e5943028 	ldr	r3, [r4, #40]	; 0x28
   1fc10:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
}
   1fc14:	e8bd4070 	pop	{r4, r5, r6, lr}
   1fc18:	e12fff13 	bx	r3

0001fc1c <SRL_off_IX_d>:
	char off = read8(ctx, ctx->PC++);	
   1fc1c:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
   1fc20:	e5903040 	ldr	r3, [r0, #64]	; 0x40
{
   1fc24:	e92d4070 	push	{r4, r5, r6, lr}
	char off = read8(ctx, ctx->PC++);	
   1fc28:	e2812001 	add	r2, r1, #1
{
   1fc2c:	e1a04000 	mov	r4, r0
	ctx->tstates += 3;
   1fc30:	e2833005 	add	r3, r3, #5
	char off = read8(ctx, ctx->PC++);	
   1fc34:	e1c021bc 	strh	r2, [r0, #28]
   1fc38:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   1fc3c:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   1fc40:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   1fc44:	e12fff33 	blx	r3
	write8(ctx, WR.IX + off, doSR(ctx, read8(ctx, WR.IX + off), IA_L));
   1fc48:	e1d450b8 	ldrh	r5, [r4, #8]
	ctx->tstates += 3;
   1fc4c:	e5943040 	ldr	r3, [r4, #64]	; 0x40
   1fc50:	e0855000 	add	r5, r5, r0
   1fc54:	e6ff5075 	uxth	r5, r5
   1fc58:	e2833003 	add	r3, r3, #3
   1fc5c:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   1fc60:	e1a01005 	mov	r1, r5
   1fc64:	e5943024 	ldr	r3, [r4, #36]	; 0x24
   1fc68:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   1fc6c:	e12fff33 	blx	r3
   1fc70:	e1a01000 	mov	r1, r0
   1fc74:	e1a00004 	mov	r0, r4
   1fc78:	ebfffdba 	bl	1f368 <doSR.constprop.26>
	ctx->tstates += 3;
   1fc7c:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	ctx->memWrite(ctx->memParam, addr, val);	
   1fc80:	e1a01005 	mov	r1, r5
	ctx->tstates += 3;
   1fc84:	e2833003 	add	r3, r3, #3
   1fc88:	e5843040 	str	r3, [r4, #64]	; 0x40
	ctx->memWrite(ctx->memParam, addr, val);	
   1fc8c:	e1a02000 	mov	r2, r0
   1fc90:	e5943028 	ldr	r3, [r4, #40]	; 0x28
   1fc94:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
}
   1fc98:	e8bd4070 	pop	{r4, r5, r6, lr}
   1fc9c:	e12fff13 	bx	r3

0001fca0 <SRL_off_IY_d>:
	char off = read8(ctx, ctx->PC++);	
   1fca0:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->tstates += 2;
   1fca4:	e5903040 	ldr	r3, [r0, #64]	; 0x40
{
   1fca8:	e92d4070 	push	{r4, r5, r6, lr}
	char off = read8(ctx, ctx->PC++);	
   1fcac:	e2812001 	add	r2, r1, #1
{
   1fcb0:	e1a04000 	mov	r4, r0
	ctx->tstates += 3;
   1fcb4:	e2833005 	add	r3, r3, #5
	char off = read8(ctx, ctx->PC++);	
   1fcb8:	e1c021bc 	strh	r2, [r0, #28]
   1fcbc:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   1fcc0:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   1fcc4:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   1fcc8:	e12fff33 	blx	r3
	write8(ctx, WR.IY + off, doSR(ctx, read8(ctx, WR.IY + off), IA_L));
   1fccc:	e1d450ba 	ldrh	r5, [r4, #10]
	ctx->tstates += 3;
   1fcd0:	e5943040 	ldr	r3, [r4, #64]	; 0x40
   1fcd4:	e0855000 	add	r5, r5, r0
   1fcd8:	e6ff5075 	uxth	r5, r5
   1fcdc:	e2833003 	add	r3, r3, #3
   1fce0:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   1fce4:	e1a01005 	mov	r1, r5
   1fce8:	e5943024 	ldr	r3, [r4, #36]	; 0x24
   1fcec:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   1fcf0:	e12fff33 	blx	r3
   1fcf4:	e1a01000 	mov	r1, r0
   1fcf8:	e1a00004 	mov	r0, r4
   1fcfc:	ebfffd99 	bl	1f368 <doSR.constprop.26>
	ctx->tstates += 3;
   1fd00:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	ctx->memWrite(ctx->memParam, addr, val);	
   1fd04:	e1a01005 	mov	r1, r5
	ctx->tstates += 3;
   1fd08:	e2833003 	add	r3, r3, #3
   1fd0c:	e5843040 	str	r3, [r4, #64]	; 0x40
	ctx->memWrite(ctx->memParam, addr, val);	
   1fd10:	e1a02000 	mov	r2, r0
   1fd14:	e5943028 	ldr	r3, [r4, #40]	; 0x28
   1fd18:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
}
   1fd1c:	e8bd4070 	pop	{r4, r5, r6, lr}
   1fd20:	e12fff13 	bx	r3

0001fd24 <IN_B_off_C>:
	ctx->tstates += 4;
   1fd24:	e5903040 	ldr	r3, [r0, #64]	; 0x40
{
   1fd28:	e92d4010 	push	{r4, lr}
   1fd2c:	e2833004 	add	r3, r3, #4
   1fd30:	e1a04000 	mov	r4, r0
   1fd34:	e5803040 	str	r3, [r0, #64]	; 0x40
	BR.B = ioRead(ctx, WR.BC);
   1fd38:	e1d010b2 	ldrh	r1, [r0, #2]
	return ctx->ioRead(ctx->ioParam, addr);
   1fd3c:	e5903030 	ldr	r3, [r0, #48]	; 0x30
   1fd40:	e5900038 	ldr	r0, [r0, #56]	; 0x38
   1fd44:	e12fff33 	blx	r3
	BR.F &= ~flag;
   1fd48:	e1d430d0 	ldrsb	r3, [r4]
	if (val)
   1fd4c:	e3100080 	tst	r0, #128	; 0x80
	BR.F &= ~flag;
   1fd50:	e20320ed 	and	r2, r3, #237	; 0xed
   1fd54:	e5c40003 	strb	r0, [r4, #3]
   1fd58:	e5c42000 	strb	r2, [r4]
	BR.F |= flag;
   1fd5c:	13823080 	orrne	r3, r2, #128	; 0x80
	if (val)
   1fd60:	1a00000d 	bne	1fd9c <IN_B_off_C+0x78>
	BR.F &= ~flag;
   1fd64:	e203306d 	and	r3, r3, #109	; 0x6d
	if (val)
   1fd68:	e3500000 	cmp	r0, #0
	BR.F &= ~flag;
   1fd6c:	e5c43000 	strb	r3, [r4]
	BR.F |= flag;
   1fd70:	03832040 	orreq	r2, r3, #64	; 0x40
	if (val)
   1fd74:	1a000008 	bne	1fd9c <IN_B_off_C+0x78>
	BR.F |= flag;
   1fd78:	e3823004 	orr	r3, r2, #4
	if (val)
   1fd7c:	e3100020 	tst	r0, #32
	BR.F |= flag;
   1fd80:	13833020 	orrne	r3, r3, #32
	BR.F &= ~flag;
   1fd84:	020330df 	andeq	r3, r3, #223	; 0xdf
	if (val)
   1fd88:	e3100008 	tst	r0, #8
	BR.F |= flag;
   1fd8c:	13833008 	orrne	r3, r3, #8
	BR.F &= ~flag;
   1fd90:	020330f7 	andeq	r3, r3, #247	; 0xf7
   1fd94:	e5c43000 	strb	r3, [r4]
}
   1fd98:	e8bd8010 	pop	{r4, pc}
	VALFLAG(F_PV, parityBit[val]);
   1fd9c:	e59f201c 	ldr	r2, [pc, #28]	; 1fdc0 <IN_B_off_C+0x9c>
	BR.F &= ~flag;
   1fda0:	e6af3073 	sxtb	r3, r3
	if (val)
   1fda4:	e7921100 	ldr	r1, [r2, r0, lsl #2]
	BR.F &= ~flag;
   1fda8:	e20320ad 	and	r2, r3, #173	; 0xad
	if (val)
   1fdac:	e3510000 	cmp	r1, #0
   1fdb0:	e5c42000 	strb	r2, [r4]
	BR.F &= ~flag;
   1fdb4:	020330a9 	andeq	r3, r3, #169	; 0xa9
	if (val)
   1fdb8:	0affffef 	beq	1fd7c <IN_B_off_C+0x58>
   1fdbc:	eaffffed 	b	1fd78 <IN_B_off_C+0x54>
   1fdc0:	0004f000 	.word	0x0004f000

0001fdc4 <IN_C_off_C>:
	ctx->tstates += 4;
   1fdc4:	e5903040 	ldr	r3, [r0, #64]	; 0x40
{
   1fdc8:	e92d4010 	push	{r4, lr}
   1fdcc:	e2833004 	add	r3, r3, #4
   1fdd0:	e1a04000 	mov	r4, r0
   1fdd4:	e5803040 	str	r3, [r0, #64]	; 0x40
	BR.C = ioRead(ctx, WR.BC);
   1fdd8:	e1d010b2 	ldrh	r1, [r0, #2]
	return ctx->ioRead(ctx->ioParam, addr);
   1fddc:	e5903030 	ldr	r3, [r0, #48]	; 0x30
   1fde0:	e5900038 	ldr	r0, [r0, #56]	; 0x38
   1fde4:	e12fff33 	blx	r3
	BR.F &= ~flag;
   1fde8:	e1d430d0 	ldrsb	r3, [r4]
	if (val)
   1fdec:	e3100080 	tst	r0, #128	; 0x80
	BR.F &= ~flag;
   1fdf0:	e20320ed 	and	r2, r3, #237	; 0xed
   1fdf4:	e5c40002 	strb	r0, [r4, #2]
   1fdf8:	e5c42000 	strb	r2, [r4]
	BR.F |= flag;
   1fdfc:	13823080 	orrne	r3, r2, #128	; 0x80
	if (val)
   1fe00:	1a00000d 	bne	1fe3c <IN_C_off_C+0x78>
	BR.F &= ~flag;
   1fe04:	e203306d 	and	r3, r3, #109	; 0x6d
	if (val)
   1fe08:	e3500000 	cmp	r0, #0
	BR.F &= ~flag;
   1fe0c:	e5c43000 	strb	r3, [r4]
	BR.F |= flag;
   1fe10:	03832040 	orreq	r2, r3, #64	; 0x40
	if (val)
   1fe14:	1a000008 	bne	1fe3c <IN_C_off_C+0x78>
	BR.F |= flag;
   1fe18:	e3823004 	orr	r3, r2, #4
	if (val)
   1fe1c:	e3100020 	tst	r0, #32
	BR.F |= flag;
   1fe20:	13833020 	orrne	r3, r3, #32
	BR.F &= ~flag;
   1fe24:	020330df 	andeq	r3, r3, #223	; 0xdf
	if (val)
   1fe28:	e3100008 	tst	r0, #8
	BR.F |= flag;
   1fe2c:	13833008 	orrne	r3, r3, #8
	BR.F &= ~flag;
   1fe30:	020330f7 	andeq	r3, r3, #247	; 0xf7
   1fe34:	e5c43000 	strb	r3, [r4]
}
   1fe38:	e8bd8010 	pop	{r4, pc}
	VALFLAG(F_PV, parityBit[val]);
   1fe3c:	e59f201c 	ldr	r2, [pc, #28]	; 1fe60 <IN_C_off_C+0x9c>
	BR.F &= ~flag;
   1fe40:	e6af3073 	sxtb	r3, r3
	if (val)
   1fe44:	e7921100 	ldr	r1, [r2, r0, lsl #2]
	BR.F &= ~flag;
   1fe48:	e20320ad 	and	r2, r3, #173	; 0xad
	if (val)
   1fe4c:	e3510000 	cmp	r1, #0
   1fe50:	e5c42000 	strb	r2, [r4]
	BR.F &= ~flag;
   1fe54:	020330a9 	andeq	r3, r3, #169	; 0xa9
	if (val)
   1fe58:	0affffef 	beq	1fe1c <IN_C_off_C+0x58>
   1fe5c:	eaffffed 	b	1fe18 <IN_C_off_C+0x54>
   1fe60:	0004f000 	.word	0x0004f000

0001fe64 <IN_L_off_C>:
	ctx->tstates += 4;
   1fe64:	e5903040 	ldr	r3, [r0, #64]	; 0x40
{
   1fe68:	e92d4010 	push	{r4, lr}
   1fe6c:	e2833004 	add	r3, r3, #4
   1fe70:	e1a04000 	mov	r4, r0
   1fe74:	e5803040 	str	r3, [r0, #64]	; 0x40
	BR.L = ioRead(ctx, WR.BC);
   1fe78:	e1d010b2 	ldrh	r1, [r0, #2]
	return ctx->ioRead(ctx->ioParam, addr);
   1fe7c:	e5903030 	ldr	r3, [r0, #48]	; 0x30
   1fe80:	e5900038 	ldr	r0, [r0, #56]	; 0x38
   1fe84:	e12fff33 	blx	r3
	BR.F &= ~flag;
   1fe88:	e1d430d0 	ldrsb	r3, [r4]
	if (val)
   1fe8c:	e3100080 	tst	r0, #128	; 0x80
	BR.F &= ~flag;
   1fe90:	e20320ed 	and	r2, r3, #237	; 0xed
   1fe94:	e5c40006 	strb	r0, [r4, #6]
   1fe98:	e5c42000 	strb	r2, [r4]
	BR.F |= flag;
   1fe9c:	13823080 	orrne	r3, r2, #128	; 0x80
	if (val)
   1fea0:	1a00000d 	bne	1fedc <IN_L_off_C+0x78>
	BR.F &= ~flag;
   1fea4:	e203306d 	and	r3, r3, #109	; 0x6d
	if (val)
   1fea8:	e3500000 	cmp	r0, #0
	BR.F &= ~flag;
   1feac:	e5c43000 	strb	r3, [r4]
	BR.F |= flag;
   1feb0:	03832040 	orreq	r2, r3, #64	; 0x40
	if (val)
   1feb4:	1a000008 	bne	1fedc <IN_L_off_C+0x78>
	BR.F |= flag;
   1feb8:	e3823004 	orr	r3, r2, #4
	if (val)
   1febc:	e3100020 	tst	r0, #32
	BR.F |= flag;
   1fec0:	13833020 	orrne	r3, r3, #32
	BR.F &= ~flag;
   1fec4:	020330df 	andeq	r3, r3, #223	; 0xdf
	if (val)
   1fec8:	e3100008 	tst	r0, #8
	BR.F |= flag;
   1fecc:	13833008 	orrne	r3, r3, #8
	BR.F &= ~flag;
   1fed0:	020330f7 	andeq	r3, r3, #247	; 0xf7
   1fed4:	e5c43000 	strb	r3, [r4]
}
   1fed8:	e8bd8010 	pop	{r4, pc}
	VALFLAG(F_PV, parityBit[val]);
   1fedc:	e59f201c 	ldr	r2, [pc, #28]	; 1ff00 <IN_L_off_C+0x9c>
	BR.F &= ~flag;
   1fee0:	e6af3073 	sxtb	r3, r3
	if (val)
   1fee4:	e7921100 	ldr	r1, [r2, r0, lsl #2]
	BR.F &= ~flag;
   1fee8:	e20320ad 	and	r2, r3, #173	; 0xad
	if (val)
   1feec:	e3510000 	cmp	r1, #0
   1fef0:	e5c42000 	strb	r2, [r4]
	BR.F &= ~flag;
   1fef4:	020330a9 	andeq	r3, r3, #169	; 0xa9
	if (val)
   1fef8:	0affffef 	beq	1febc <IN_L_off_C+0x58>
   1fefc:	eaffffed 	b	1feb8 <IN_L_off_C+0x54>
   1ff00:	0004f000 	.word	0x0004f000

0001ff04 <IN_D_off_C>:
	ctx->tstates += 4;
   1ff04:	e5903040 	ldr	r3, [r0, #64]	; 0x40
{
   1ff08:	e92d4010 	push	{r4, lr}
   1ff0c:	e2833004 	add	r3, r3, #4
   1ff10:	e1a04000 	mov	r4, r0
   1ff14:	e5803040 	str	r3, [r0, #64]	; 0x40
	BR.D = ioRead(ctx, WR.BC);
   1ff18:	e1d010b2 	ldrh	r1, [r0, #2]
	return ctx->ioRead(ctx->ioParam, addr);
   1ff1c:	e5903030 	ldr	r3, [r0, #48]	; 0x30
   1ff20:	e5900038 	ldr	r0, [r0, #56]	; 0x38
   1ff24:	e12fff33 	blx	r3
	BR.F &= ~flag;
   1ff28:	e1d430d0 	ldrsb	r3, [r4]
	if (val)
   1ff2c:	e3100080 	tst	r0, #128	; 0x80
	BR.F &= ~flag;
   1ff30:	e20320ed 	and	r2, r3, #237	; 0xed
   1ff34:	e5c40005 	strb	r0, [r4, #5]
   1ff38:	e5c42000 	strb	r2, [r4]
	BR.F |= flag;
   1ff3c:	13823080 	orrne	r3, r2, #128	; 0x80
	if (val)
   1ff40:	1a00000d 	bne	1ff7c <IN_D_off_C+0x78>
	BR.F &= ~flag;
   1ff44:	e203306d 	and	r3, r3, #109	; 0x6d
	if (val)
   1ff48:	e3500000 	cmp	r0, #0
	BR.F &= ~flag;
   1ff4c:	e5c43000 	strb	r3, [r4]
	BR.F |= flag;
   1ff50:	03832040 	orreq	r2, r3, #64	; 0x40
	if (val)
   1ff54:	1a000008 	bne	1ff7c <IN_D_off_C+0x78>
	BR.F |= flag;
   1ff58:	e3823004 	orr	r3, r2, #4
	if (val)
   1ff5c:	e3100020 	tst	r0, #32
	BR.F |= flag;
   1ff60:	13833020 	orrne	r3, r3, #32
	BR.F &= ~flag;
   1ff64:	020330df 	andeq	r3, r3, #223	; 0xdf
	if (val)
   1ff68:	e3100008 	tst	r0, #8
	BR.F |= flag;
   1ff6c:	13833008 	orrne	r3, r3, #8
	BR.F &= ~flag;
   1ff70:	020330f7 	andeq	r3, r3, #247	; 0xf7
   1ff74:	e5c43000 	strb	r3, [r4]
}
   1ff78:	e8bd8010 	pop	{r4, pc}
	VALFLAG(F_PV, parityBit[val]);
   1ff7c:	e59f201c 	ldr	r2, [pc, #28]	; 1ffa0 <IN_D_off_C+0x9c>
	BR.F &= ~flag;
   1ff80:	e6af3073 	sxtb	r3, r3
	if (val)
   1ff84:	e7921100 	ldr	r1, [r2, r0, lsl #2]
	BR.F &= ~flag;
   1ff88:	e20320ad 	and	r2, r3, #173	; 0xad
	if (val)
   1ff8c:	e3510000 	cmp	r1, #0
   1ff90:	e5c42000 	strb	r2, [r4]
	BR.F &= ~flag;
   1ff94:	020330a9 	andeq	r3, r3, #169	; 0xa9
	if (val)
   1ff98:	0affffef 	beq	1ff5c <IN_D_off_C+0x58>
   1ff9c:	eaffffed 	b	1ff58 <IN_D_off_C+0x54>
   1ffa0:	0004f000 	.word	0x0004f000

0001ffa4 <IN_E_off_C>:
	ctx->tstates += 4;
   1ffa4:	e5903040 	ldr	r3, [r0, #64]	; 0x40
{
   1ffa8:	e92d4010 	push	{r4, lr}
   1ffac:	e2833004 	add	r3, r3, #4
   1ffb0:	e1a04000 	mov	r4, r0
   1ffb4:	e5803040 	str	r3, [r0, #64]	; 0x40
	BR.E = ioRead(ctx, WR.BC);
   1ffb8:	e1d010b2 	ldrh	r1, [r0, #2]
	return ctx->ioRead(ctx->ioParam, addr);
   1ffbc:	e5903030 	ldr	r3, [r0, #48]	; 0x30
   1ffc0:	e5900038 	ldr	r0, [r0, #56]	; 0x38
   1ffc4:	e12fff33 	blx	r3
	BR.F &= ~flag;
   1ffc8:	e1d430d0 	ldrsb	r3, [r4]
	if (val)
   1ffcc:	e3100080 	tst	r0, #128	; 0x80
	BR.F &= ~flag;
   1ffd0:	e20320ed 	and	r2, r3, #237	; 0xed
   1ffd4:	e5c40004 	strb	r0, [r4, #4]
   1ffd8:	e5c42000 	strb	r2, [r4]
	BR.F |= flag;
   1ffdc:	13823080 	orrne	r3, r2, #128	; 0x80
	if (val)
   1ffe0:	1a00000d 	bne	2001c <IN_E_off_C+0x78>
	BR.F &= ~flag;
   1ffe4:	e203306d 	and	r3, r3, #109	; 0x6d
	if (val)
   1ffe8:	e3500000 	cmp	r0, #0
	BR.F &= ~flag;
   1ffec:	e5c43000 	strb	r3, [r4]
	BR.F |= flag;
   1fff0:	03832040 	orreq	r2, r3, #64	; 0x40
	if (val)
   1fff4:	1a000008 	bne	2001c <IN_E_off_C+0x78>
	BR.F |= flag;
   1fff8:	e3823004 	orr	r3, r2, #4
	if (val)
   1fffc:	e3100020 	tst	r0, #32
	BR.F |= flag;
   20000:	13833020 	orrne	r3, r3, #32
	BR.F &= ~flag;
   20004:	020330df 	andeq	r3, r3, #223	; 0xdf
	if (val)
   20008:	e3100008 	tst	r0, #8
	BR.F |= flag;
   2000c:	13833008 	orrne	r3, r3, #8
	BR.F &= ~flag;
   20010:	020330f7 	andeq	r3, r3, #247	; 0xf7
   20014:	e5c43000 	strb	r3, [r4]
}
   20018:	e8bd8010 	pop	{r4, pc}
	VALFLAG(F_PV, parityBit[val]);
   2001c:	e59f201c 	ldr	r2, [pc, #28]	; 20040 <IN_E_off_C+0x9c>
	BR.F &= ~flag;
   20020:	e6af3073 	sxtb	r3, r3
	if (val)
   20024:	e7921100 	ldr	r1, [r2, r0, lsl #2]
	BR.F &= ~flag;
   20028:	e20320ad 	and	r2, r3, #173	; 0xad
	if (val)
   2002c:	e3510000 	cmp	r1, #0
   20030:	e5c42000 	strb	r2, [r4]
	BR.F &= ~flag;
   20034:	020330a9 	andeq	r3, r3, #169	; 0xa9
	if (val)
   20038:	0affffef 	beq	1fffc <IN_E_off_C+0x58>
   2003c:	eaffffed 	b	1fff8 <IN_E_off_C+0x54>
   20040:	0004f000 	.word	0x0004f000

00020044 <IN_H_off_C>:
	ctx->tstates += 4;
   20044:	e5903040 	ldr	r3, [r0, #64]	; 0x40
{
   20048:	e92d4010 	push	{r4, lr}
   2004c:	e2833004 	add	r3, r3, #4
   20050:	e1a04000 	mov	r4, r0
   20054:	e5803040 	str	r3, [r0, #64]	; 0x40
	BR.H = ioRead(ctx, WR.BC);
   20058:	e1d010b2 	ldrh	r1, [r0, #2]
	return ctx->ioRead(ctx->ioParam, addr);
   2005c:	e5903030 	ldr	r3, [r0, #48]	; 0x30
   20060:	e5900038 	ldr	r0, [r0, #56]	; 0x38
   20064:	e12fff33 	blx	r3
	BR.F &= ~flag;
   20068:	e1d430d0 	ldrsb	r3, [r4]
	if (val)
   2006c:	e3100080 	tst	r0, #128	; 0x80
	BR.F &= ~flag;
   20070:	e20320ed 	and	r2, r3, #237	; 0xed
   20074:	e5c40007 	strb	r0, [r4, #7]
   20078:	e5c42000 	strb	r2, [r4]
	BR.F |= flag;
   2007c:	13823080 	orrne	r3, r2, #128	; 0x80
	if (val)
   20080:	1a00000d 	bne	200bc <IN_H_off_C+0x78>
	BR.F &= ~flag;
   20084:	e203306d 	and	r3, r3, #109	; 0x6d
	if (val)
   20088:	e3500000 	cmp	r0, #0
	BR.F &= ~flag;
   2008c:	e5c43000 	strb	r3, [r4]
	BR.F |= flag;
   20090:	03832040 	orreq	r2, r3, #64	; 0x40
	if (val)
   20094:	1a000008 	bne	200bc <IN_H_off_C+0x78>
	BR.F |= flag;
   20098:	e3823004 	orr	r3, r2, #4
	if (val)
   2009c:	e3100020 	tst	r0, #32
	BR.F |= flag;
   200a0:	13833020 	orrne	r3, r3, #32
	BR.F &= ~flag;
   200a4:	020330df 	andeq	r3, r3, #223	; 0xdf
	if (val)
   200a8:	e3100008 	tst	r0, #8
	BR.F |= flag;
   200ac:	13833008 	orrne	r3, r3, #8
	BR.F &= ~flag;
   200b0:	020330f7 	andeq	r3, r3, #247	; 0xf7
   200b4:	e5c43000 	strb	r3, [r4]
}
   200b8:	e8bd8010 	pop	{r4, pc}
	VALFLAG(F_PV, parityBit[val]);
   200bc:	e59f201c 	ldr	r2, [pc, #28]	; 200e0 <IN_H_off_C+0x9c>
	BR.F &= ~flag;
   200c0:	e6af3073 	sxtb	r3, r3
	if (val)
   200c4:	e7921100 	ldr	r1, [r2, r0, lsl #2]
	BR.F &= ~flag;
   200c8:	e20320ad 	and	r2, r3, #173	; 0xad
	if (val)
   200cc:	e3510000 	cmp	r1, #0
   200d0:	e5c42000 	strb	r2, [r4]
	BR.F &= ~flag;
   200d4:	020330a9 	andeq	r3, r3, #169	; 0xa9
	if (val)
   200d8:	0affffef 	beq	2009c <IN_H_off_C+0x58>
   200dc:	eaffffed 	b	20098 <IN_H_off_C+0x54>
   200e0:	0004f000 	.word	0x0004f000

000200e4 <IN_A_off_C>:
	ctx->tstates += 4;
   200e4:	e5903040 	ldr	r3, [r0, #64]	; 0x40
{
   200e8:	e92d4010 	push	{r4, lr}
   200ec:	e2833004 	add	r3, r3, #4
   200f0:	e1a04000 	mov	r4, r0
   200f4:	e5803040 	str	r3, [r0, #64]	; 0x40
	BR.A = ioRead(ctx, WR.BC);
   200f8:	e1d010b2 	ldrh	r1, [r0, #2]
	return ctx->ioRead(ctx->ioParam, addr);
   200fc:	e5903030 	ldr	r3, [r0, #48]	; 0x30
   20100:	e5900038 	ldr	r0, [r0, #56]	; 0x38
   20104:	e12fff33 	blx	r3
	BR.F &= ~flag;
   20108:	e1d430d0 	ldrsb	r3, [r4]
	if (val)
   2010c:	e3100080 	tst	r0, #128	; 0x80
	BR.F &= ~flag;
   20110:	e20320ed 	and	r2, r3, #237	; 0xed
   20114:	e5c40001 	strb	r0, [r4, #1]
   20118:	e5c42000 	strb	r2, [r4]
	BR.F |= flag;
   2011c:	13823080 	orrne	r3, r2, #128	; 0x80
	if (val)
   20120:	1a00000d 	bne	2015c <IN_A_off_C+0x78>
	BR.F &= ~flag;
   20124:	e203306d 	and	r3, r3, #109	; 0x6d
	if (val)
   20128:	e3500000 	cmp	r0, #0
	BR.F &= ~flag;
   2012c:	e5c43000 	strb	r3, [r4]
	BR.F |= flag;
   20130:	03832040 	orreq	r2, r3, #64	; 0x40
	if (val)
   20134:	1a000008 	bne	2015c <IN_A_off_C+0x78>
	BR.F |= flag;
   20138:	e3823004 	orr	r3, r2, #4
	if (val)
   2013c:	e3100020 	tst	r0, #32
	BR.F |= flag;
   20140:	13833020 	orrne	r3, r3, #32
	BR.F &= ~flag;
   20144:	020330df 	andeq	r3, r3, #223	; 0xdf
	if (val)
   20148:	e3100008 	tst	r0, #8
	BR.F |= flag;
   2014c:	13833008 	orrne	r3, r3, #8
	BR.F &= ~flag;
   20150:	020330f7 	andeq	r3, r3, #247	; 0xf7
   20154:	e5c43000 	strb	r3, [r4]
}
   20158:	e8bd8010 	pop	{r4, pc}
	VALFLAG(F_PV, parityBit[val]);
   2015c:	e59f201c 	ldr	r2, [pc, #28]	; 20180 <IN_A_off_C+0x9c>
	BR.F &= ~flag;
   20160:	e6af3073 	sxtb	r3, r3
	if (val)
   20164:	e7921100 	ldr	r1, [r2, r0, lsl #2]
	BR.F &= ~flag;
   20168:	e20320ad 	and	r2, r3, #173	; 0xad
	if (val)
   2016c:	e3510000 	cmp	r1, #0
   20170:	e5c42000 	strb	r2, [r4]
	BR.F &= ~flag;
   20174:	020330a9 	andeq	r3, r3, #169	; 0xa9
	if (val)
   20178:	0affffef 	beq	2013c <IN_A_off_C+0x58>
   2017c:	eaffffed 	b	20138 <IN_A_off_C+0x54>
   20180:	0004f000 	.word	0x0004f000

00020184 <RRD>:
	ctx->tstates += 3;
   20184:	e5903040 	ldr	r3, [r0, #64]	; 0x40
{
   20188:	e92d4070 	push	{r4, r5, r6, lr}
   2018c:	e2833007 	add	r3, r3, #7
   20190:	e1a04000 	mov	r4, r0
	byte hl = read8(ctx, WR.HL);
   20194:	e1d010b6 	ldrh	r1, [r0, #6]
	byte Ah = BR.A & 0x0f;
   20198:	e5d05001 	ldrb	r5, [r0, #1]
   2019c:	e5803040 	str	r3, [r0, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   201a0:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   201a4:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   201a8:	e12fff33 	blx	r3
	BR.A = (BR.A & 0xf0) | (hl & 0x0f);
   201ac:	e5d43001 	ldrb	r3, [r4, #1]
	ctx->tstates += 3;
   201b0:	e594c040 	ldr	ip, [r4, #64]	; 0x40
	byte Ah = BR.A & 0x0f;
   201b4:	e205500f 	and	r5, r5, #15
	BR.A = (BR.A & 0xf0) | (hl & 0x0f);
   201b8:	e200e00f 	and	lr, r0, #15
	hl = (hl >> 4) | (Ah << 4);
   201bc:	e1a05205 	lsl	r5, r5, #4
	BR.A = (BR.A & 0xf0) | (hl & 0x0f);
   201c0:	e3c3300f 	bic	r3, r3, #15
   201c4:	e183300e 	orr	r3, r3, lr
	hl = (hl >> 4) | (Ah << 4);
   201c8:	e1852220 	orr	r2, r5, r0, lsr #4
   201cc:	e28c0003 	add	r0, ip, #3
	write8(ctx, WR.HL, hl);
   201d0:	e1d410b6 	ldrh	r1, [r4, #6]
	ctx->memWrite(ctx->memParam, addr, val);	
   201d4:	e6ef2072 	uxtb	r2, r2
	BR.A = (BR.A & 0xf0) | (hl & 0x0f);
   201d8:	e5c43001 	strb	r3, [r4, #1]
	ctx->tstates += 3;
   201dc:	e5840040 	str	r0, [r4, #64]	; 0x40
	ctx->memWrite(ctx->memParam, addr, val);	
   201e0:	e5943028 	ldr	r3, [r4, #40]	; 0x28
   201e4:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   201e8:	e12fff33 	blx	r3
	BR.F &= ~flag;
   201ec:	e1d430d0 	ldrsb	r3, [r4]
	adjustFlagSZP(ctx, BR.A);
   201f0:	e5d42001 	ldrb	r2, [r4, #1]
   201f4:	e20310ed 	and	r1, r3, #237	; 0xed
	if (val)
   201f8:	e3120080 	tst	r2, #128	; 0x80
	BR.F &= ~flag;
   201fc:	e5c41000 	strb	r1, [r4]
	BR.F |= flag;
   20200:	13813080 	orrne	r3, r1, #128	; 0x80
	if (val)
   20204:	1a000007 	bne	20228 <RRD+0xa4>
	BR.F &= ~flag;
   20208:	e203306d 	and	r3, r3, #109	; 0x6d
	if (val)
   2020c:	e3520000 	cmp	r2, #0
	BR.F &= ~flag;
   20210:	e5c43000 	strb	r3, [r4]
	BR.F |= flag;
   20214:	03832040 	orreq	r2, r3, #64	; 0x40
	if (val)
   20218:	1a000002 	bne	20228 <RRD+0xa4>
	BR.F |= flag;
   2021c:	e3823004 	orr	r3, r2, #4
   20220:	e5c43000 	strb	r3, [r4]
}
   20224:	e8bd8070 	pop	{r4, r5, r6, pc}
	VALFLAG(F_PV, parityBit[val]);
   20228:	e59f1020 	ldr	r1, [pc, #32]	; 20250 <RRD+0xcc>
	BR.F &= ~flag;
   2022c:	e6af3073 	sxtb	r3, r3
	if (val)
   20230:	e7911102 	ldr	r1, [r1, r2, lsl #2]
	BR.F &= ~flag;
   20234:	e20320ad 	and	r2, r3, #173	; 0xad
	if (val)
   20238:	e3510000 	cmp	r1, #0
   2023c:	e5c42000 	strb	r2, [r4]
	BR.F &= ~flag;
   20240:	020330a9 	andeq	r3, r3, #169	; 0xa9
	if (val)
   20244:	1afffff4 	bne	2021c <RRD+0x98>
   20248:	e5c43000 	strb	r3, [r4]
   2024c:	e8bd8070 	pop	{r4, r5, r6, pc}
   20250:	0004f000 	.word	0x0004f000

00020254 <SBC_HL_HL>:
{
   20254:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   20258:	e5d03000 	ldrb	r3, [r0]
	ctx->tstates += 7;
   2025c:	e590e040 	ldr	lr, [r0, #64]	; 0x40
	WR.HL = doAddWord(ctx, WR.HL, WR.HL, F1_SBC, F2_SBC);
   20260:	e1d010b6 	ldrh	r1, [r0, #6]
   20264:	e59f70f4 	ldr	r7, [pc, #244]	; 20360 <SBC_HL_HL+0x10c>
	ctx->tstates += 7;
   20268:	e28ee007 	add	lr, lr, #7
	if(withCarry && GETFLAG(F_C))
   2026c:	e2132001 	ands	r2, r3, #1
   20270:	e580e040 	str	lr, [r0, #64]	; 0x40
   20274:	e0016007 	and	r6, r1, r7
   20278:	0a00002d 	beq	20334 <SBC_HL_HL+0xe0>
	if (val)
   2027c:	e59f40e0 	ldr	r4, [pc, #224]	; 20364 <SBC_HL_HL+0x110>
		a2++;
   20280:	e2812001 	add	r2, r1, #1
   20284:	e6ff2072 	uxth	r2, r2
   20288:	e041e002 	sub	lr, r1, r2
	if (val)
   2028c:	e0025004 	and	r5, r2, r4
   20290:	e221c902 	eor	ip, r1, #32768	; 0x8000
   20294:	e0011004 	and	r1, r1, r4
   20298:	e0411005 	sub	r1, r1, r5
   2029c:	e0022007 	and	r2, r2, r7
   202a0:	e1a0444e 	asr	r4, lr, #8
   202a4:	e1a0c7ac 	lsr	ip, ip, #15
   202a8:	e1520006 	cmp	r2, r6
   202ac:	03a0c000 	moveq	ip, #0
   202b0:	120cc001 	andne	ip, ip, #1
   202b4:	e6ef2074 	uxtb	r2, r4
   202b8:	e3110a01 	tst	r1, #4096	; 0x1000
   202bc:	e2025020 	and	r5, r2, #32
	BR.F |= flag;
   202c0:	e59f40a0 	ldr	r4, [pc, #160]	; 20368 <SBC_HL_HL+0x114>
   202c4:	e20e1801 	and	r1, lr, #65536	; 0x10000
   202c8:	e2022008 	and	r2, r2, #8
	if (val)
   202cc:	0a000020 	beq	20354 <SBC_HL_HL+0x100>
	BR.F |= flag;
   202d0:	e1a0e004 	mov	lr, r4
   202d4:	e3a06902 	mov	r6, #32768	; 0x8000
   202d8:	e3833010 	orr	r3, r3, #16
	if (val)
   202dc:	e3510000 	cmp	r1, #0
	BR.F &= ~flag;
   202e0:	020330fe 	andeq	r3, r3, #254	; 0xfe
	BR.F |= flag;
   202e4:	13833001 	orrne	r3, r3, #1
	if (val)
   202e8:	e35c0000 	cmp	ip, #0
	BR.F &= ~flag;
   202ec:	020330fb 	andeq	r3, r3, #251	; 0xfb
	BR.F |= flag;
   202f0:	13833004 	orrne	r3, r3, #4
	if (val)
   202f4:	e3560000 	cmp	r6, #0
	BR.F &= ~flag;
   202f8:	0203307f 	andeq	r3, r3, #127	; 0x7f
	BR.F |= flag;
   202fc:	13833080 	orrne	r3, r3, #128	; 0x80
	if (val)
   20300:	e3540000 	cmp	r4, #0
	BR.F |= flag;
   20304:	03833040 	orreq	r3, r3, #64	; 0x40
	BR.F &= ~flag;
   20308:	120330bf 	andne	r3, r3, #191	; 0xbf
	if (val)
   2030c:	e3550000 	cmp	r5, #0
	BR.F |= flag;
   20310:	03833002 	orreq	r3, r3, #2
   20314:	13833022 	orrne	r3, r3, #34	; 0x22
	BR.F &= ~flag;
   20318:	020330df 	andeq	r3, r3, #223	; 0xdf
	if (val)
   2031c:	e3520000 	cmp	r2, #0
	BR.F |= flag;
   20320:	13833008 	orrne	r3, r3, #8
	BR.F &= ~flag;
   20324:	020330f7 	andeq	r3, r3, #247	; 0xf7
   20328:	e5c03000 	strb	r3, [r0]
	WR.HL = doAddWord(ctx, WR.HL, WR.HL, F1_SBC, F2_SBC);
   2032c:	e1c0e0b6 	strh	lr, [r0, #6]
}
   20330:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
	if(withCarry && GETFLAG(F_C))
   20334:	e1a05002 	mov	r5, r2
   20338:	e1a04002 	mov	r4, r2
   2033c:	e1a0c002 	mov	ip, r2
   20340:	e1a06002 	mov	r6, r2
   20344:	e1a01002 	mov	r1, r2
   20348:	e1a0e002 	mov	lr, r2
	BR.F &= ~flag;
   2034c:	e20330ef 	and	r3, r3, #239	; 0xef
   20350:	eaffffe1 	b	202dc <SBC_HL_HL+0x88>
	if (val)
   20354:	e3a06902 	mov	r6, #32768	; 0x8000
   20358:	e1a0e004 	mov	lr, r4
   2035c:	eafffffa 	b	2034c <SBC_HL_HL+0xf8>
   20360:	ffff8000 	.word	0xffff8000
   20364:	00000fff 	.word	0x00000fff
   20368:	0000ffff 	.word	0x0000ffff

0002036c <ADC_HL_HL>:
{
   2036c:	e5d03000 	ldrb	r3, [r0]
	WR.HL = doAddWord(ctx, WR.HL, WR.HL, F1_ADC, F2_ADC);
   20370:	e1d020b6 	ldrh	r2, [r0, #6]
	if(withCarry && GETFLAG(F_C))
   20374:	e3130001 	tst	r3, #1
{
   20378:	e92d4030 	push	{r4, r5, lr}
   2037c:	e59f10c0 	ldr	r1, [pc, #192]	; 20444 <ADC_HL_HL+0xd8>
		a2++;
   20380:	1282e001 	addne	lr, r2, #1
	ctx->tstates += 7;
   20384:	e590c040 	ldr	ip, [r0, #64]	; 0x40
   20388:	16ffe07e 	uxthne	lr, lr
   2038c:	e28cc007 	add	ip, ip, #7
   20390:	e0024001 	and	r4, r2, r1
	if(withCarry && GETFLAG(F_C))
   20394:	01a0e002 	moveq	lr, r2
   20398:	1001100e 	andne	r1, r1, lr
   2039c:	e580c040 	str	ip, [r0, #64]	; 0x40
   203a0:	1041c004 	subne	ip, r1, r4
   203a4:	116fcf1c 	clzne	ip, ip
   203a8:	03a0c001 	moveq	ip, #1
	if (val)
   203ac:	e59f5094 	ldr	r5, [pc, #148]	; 20448 <ADC_HL_HL+0xdc>
		sum += a2;
   203b0:	e08e1002 	add	r1, lr, r2
	if (val)
   203b4:	e00ee005 	and	lr, lr, r5
   203b8:	e0022005 	and	r2, r2, r5
   203bc:	e082200e 	add	r2, r2, lr
   203c0:	11a0c2ac 	lsrne	ip, ip, #5
   203c4:	e3120a01 	tst	r2, #4096	; 0x1000
	BR.F |= flag;
   203c8:	13833010 	orrne	r3, r3, #16
	BR.F &= ~flag;
   203cc:	020330ef 	andeq	r3, r3, #239	; 0xef
		int result_sign = sum & 0x8000;
   203d0:	e201e902 	and	lr, r1, #32768	; 0x8000
	if (val)
   203d4:	e3110801 	tst	r1, #65536	; 0x10000
	BR.F |= flag;
   203d8:	13833001 	orrne	r3, r3, #1
	BR.F &= ~flag;
   203dc:	020330fe 	andeq	r3, r3, #254	; 0xfe
	if (val)
   203e0:	e154000e 	cmp	r4, lr
   203e4:	03a02000 	moveq	r2, #0
   203e8:	120c2001 	andne	r2, ip, #1
   203ec:	e3520000 	cmp	r2, #0
	BR.F |= flag;
   203f0:	13833004 	orrne	r3, r3, #4
	BR.F &= ~flag;
   203f4:	020330fb 	andeq	r3, r3, #251	; 0xfb
		VALFLAG(F_Z, (sum & 0xFFFF) == 0);
   203f8:	e6ff2071 	uxth	r2, r1
	if (val)
   203fc:	e35e0000 	cmp	lr, #0
	BR.F |= flag;
   20400:	13833080 	orrne	r3, r3, #128	; 0x80
	BR.F &= ~flag;
   20404:	0203307f 	andeq	r3, r3, #127	; 0x7f
	if (val)
   20408:	e3520000 	cmp	r2, #0
	BR.F |= flag;
   2040c:	03833040 	orreq	r3, r3, #64	; 0x40
	BR.F &= ~flag;
   20410:	120330bf 	andne	r3, r3, #191	; 0xbf
	adjustFlags(ctx, sum >> 8);
   20414:	e1a02441 	asr	r2, r1, #8
   20418:	e6ef2072 	uxtb	r2, r2
	BR.F &= ~flag;
   2041c:	e6af3073 	sxtb	r3, r3
	BR.F |= flag;
   20420:	e20330dd 	and	r3, r3, #221	; 0xdd
	if (val)
   20424:	e3120020 	tst	r2, #32
	BR.F |= flag;
   20428:	13833020 	orrne	r3, r3, #32
	if (val)
   2042c:	e3120008 	tst	r2, #8
	BR.F |= flag;
   20430:	13833008 	orrne	r3, r3, #8
	BR.F &= ~flag;
   20434:	020330f5 	andeq	r3, r3, #245	; 0xf5
   20438:	e5c03000 	strb	r3, [r0]
	WR.HL = doAddWord(ctx, WR.HL, WR.HL, F1_ADC, F2_ADC);
   2043c:	e1c010b6 	strh	r1, [r0, #6]
}
   20440:	e8bd8030 	pop	{r4, r5, pc}
   20444:	ffff8000 	.word	0xffff8000
   20448:	00000fff 	.word	0x00000fff

0002044c <ADC_HL_DE>:
	ctx->tstates += 7;
   2044c:	e5902040 	ldr	r2, [r0, #64]	; 0x40
   20450:	e5d03000 	ldrb	r3, [r0]
   20454:	e2822007 	add	r2, r2, #7
   20458:	e5802040 	str	r2, [r0, #64]	; 0x40
	WR.HL = doAddWord(ctx, WR.HL, WR.DE, F1_ADC, F2_ADC);
   2045c:	e1d020b4 	ldrh	r2, [r0, #4]
	if(withCarry && GETFLAG(F_C))
   20460:	e3130001 	tst	r3, #1
		a2++;
   20464:	12822001 	addne	r2, r2, #1
   20468:	e1d0c0b6 	ldrh	ip, [r0, #6]
{
   2046c:	e92d4010 	push	{r4, lr}
	if (val)
   20470:	e59fe0a4 	ldr	lr, [pc, #164]	; 2051c <ADC_HL_DE+0xd0>
		a2++;
   20474:	16ff2072 	uxthne	r2, r2
	if (val)
   20478:	e00c400e 	and	r4, ip, lr
   2047c:	e00ee002 	and	lr, lr, r2
   20480:	e084e00e 	add	lr, r4, lr
   20484:	e31e0a01 	tst	lr, #4096	; 0x1000
		int minuend_sign = a1 & 0x8000;
   20488:	e59fe090 	ldr	lr, [pc, #144]	; 20520 <ADC_HL_DE+0xd4>
		sum += a2;
   2048c:	e082100c 	add	r1, r2, ip
		int minuend_sign = a1 & 0x8000;
   20490:	e00cc00e 	and	ip, ip, lr
		int subtrahend_sign = a2 & 0x8000;
   20494:	e00ee002 	and	lr, lr, r2
	if (val)
   20498:	e04e200c 	sub	r2, lr, ip
   2049c:	e16f2f12 	clz	r2, r2
	BR.F |= flag;
   204a0:	13833010 	orrne	r3, r3, #16
	BR.F &= ~flag;
   204a4:	020330ef 	andeq	r3, r3, #239	; 0xef
		int result_sign = sum & 0x8000;
   204a8:	e2014902 	and	r4, r1, #32768	; 0x8000
	if (val)
   204ac:	e3110801 	tst	r1, #65536	; 0x10000
	BR.F |= flag;
   204b0:	13833001 	orrne	r3, r3, #1
	BR.F &= ~flag;
   204b4:	020330fe 	andeq	r3, r3, #254	; 0xfe
	if (val)
   204b8:	e15c0004 	cmp	ip, r4
   204bc:	e1a022a2 	lsr	r2, r2, #5
   204c0:	03a02000 	moveq	r2, #0
   204c4:	e3520000 	cmp	r2, #0
	BR.F |= flag;
   204c8:	13833004 	orrne	r3, r3, #4
	BR.F &= ~flag;
   204cc:	020330fb 	andeq	r3, r3, #251	; 0xfb
		VALFLAG(F_Z, (sum & 0xFFFF) == 0);
   204d0:	e6ff2071 	uxth	r2, r1
	if (val)
   204d4:	e3540000 	cmp	r4, #0
	BR.F |= flag;
   204d8:	13833080 	orrne	r3, r3, #128	; 0x80
	BR.F &= ~flag;
   204dc:	0203307f 	andeq	r3, r3, #127	; 0x7f
	if (val)
   204e0:	e3520000 	cmp	r2, #0
	BR.F |= flag;
   204e4:	03833040 	orreq	r3, r3, #64	; 0x40
	BR.F &= ~flag;
   204e8:	120330bf 	andne	r3, r3, #191	; 0xbf
	adjustFlags(ctx, sum >> 8);
   204ec:	e1a02441 	asr	r2, r1, #8
   204f0:	e6ef2072 	uxtb	r2, r2
	BR.F &= ~flag;
   204f4:	e6af3073 	sxtb	r3, r3
	BR.F |= flag;
   204f8:	e20330dd 	and	r3, r3, #221	; 0xdd
	if (val)
   204fc:	e3120020 	tst	r2, #32
	BR.F |= flag;
   20500:	13833020 	orrne	r3, r3, #32
	if (val)
   20504:	e3120008 	tst	r2, #8
	BR.F |= flag;
   20508:	13833008 	orrne	r3, r3, #8
	BR.F &= ~flag;
   2050c:	020330f5 	andeq	r3, r3, #245	; 0xf5
   20510:	e5c03000 	strb	r3, [r0]
	WR.HL = doAddWord(ctx, WR.HL, WR.DE, F1_ADC, F2_ADC);
   20514:	e1c010b6 	strh	r1, [r0, #6]
}
   20518:	e8bd8010 	pop	{r4, pc}
   2051c:	00000fff 	.word	0x00000fff
   20520:	ffff8000 	.word	0xffff8000

00020524 <ADC_HL_BC>:
	ctx->tstates += 7;
   20524:	e5902040 	ldr	r2, [r0, #64]	; 0x40
   20528:	e5d03000 	ldrb	r3, [r0]
   2052c:	e2822007 	add	r2, r2, #7
   20530:	e5802040 	str	r2, [r0, #64]	; 0x40
	WR.HL = doAddWord(ctx, WR.HL, WR.BC, F1_ADC, F2_ADC);
   20534:	e1d020b2 	ldrh	r2, [r0, #2]
	if(withCarry && GETFLAG(F_C))
   20538:	e3130001 	tst	r3, #1
		a2++;
   2053c:	12822001 	addne	r2, r2, #1
   20540:	e1d0c0b6 	ldrh	ip, [r0, #6]
{
   20544:	e92d4010 	push	{r4, lr}
	if (val)
   20548:	e59fe0a4 	ldr	lr, [pc, #164]	; 205f4 <ADC_HL_BC+0xd0>
		a2++;
   2054c:	16ff2072 	uxthne	r2, r2
	if (val)
   20550:	e00c400e 	and	r4, ip, lr
   20554:	e00ee002 	and	lr, lr, r2
   20558:	e084e00e 	add	lr, r4, lr
   2055c:	e31e0a01 	tst	lr, #4096	; 0x1000
		int minuend_sign = a1 & 0x8000;
   20560:	e59fe090 	ldr	lr, [pc, #144]	; 205f8 <ADC_HL_BC+0xd4>
		sum += a2;
   20564:	e082100c 	add	r1, r2, ip
		int minuend_sign = a1 & 0x8000;
   20568:	e00cc00e 	and	ip, ip, lr
		int subtrahend_sign = a2 & 0x8000;
   2056c:	e00ee002 	and	lr, lr, r2
	if (val)
   20570:	e04e200c 	sub	r2, lr, ip
   20574:	e16f2f12 	clz	r2, r2
	BR.F |= flag;
   20578:	13833010 	orrne	r3, r3, #16
	BR.F &= ~flag;
   2057c:	020330ef 	andeq	r3, r3, #239	; 0xef
		int result_sign = sum & 0x8000;
   20580:	e2014902 	and	r4, r1, #32768	; 0x8000
	if (val)
   20584:	e3110801 	tst	r1, #65536	; 0x10000
	BR.F |= flag;
   20588:	13833001 	orrne	r3, r3, #1
	BR.F &= ~flag;
   2058c:	020330fe 	andeq	r3, r3, #254	; 0xfe
	if (val)
   20590:	e15c0004 	cmp	ip, r4
   20594:	e1a022a2 	lsr	r2, r2, #5
   20598:	03a02000 	moveq	r2, #0
   2059c:	e3520000 	cmp	r2, #0
	BR.F |= flag;
   205a0:	13833004 	orrne	r3, r3, #4
	BR.F &= ~flag;
   205a4:	020330fb 	andeq	r3, r3, #251	; 0xfb
		VALFLAG(F_Z, (sum & 0xFFFF) == 0);
   205a8:	e6ff2071 	uxth	r2, r1
	if (val)
   205ac:	e3540000 	cmp	r4, #0
	BR.F |= flag;
   205b0:	13833080 	orrne	r3, r3, #128	; 0x80
	BR.F &= ~flag;
   205b4:	0203307f 	andeq	r3, r3, #127	; 0x7f
	if (val)
   205b8:	e3520000 	cmp	r2, #0
	BR.F |= flag;
   205bc:	03833040 	orreq	r3, r3, #64	; 0x40
	BR.F &= ~flag;
   205c0:	120330bf 	andne	r3, r3, #191	; 0xbf
	adjustFlags(ctx, sum >> 8);
   205c4:	e1a02441 	asr	r2, r1, #8
   205c8:	e6ef2072 	uxtb	r2, r2
	BR.F &= ~flag;
   205cc:	e6af3073 	sxtb	r3, r3
	BR.F |= flag;
   205d0:	e20330dd 	and	r3, r3, #221	; 0xdd
	if (val)
   205d4:	e3120020 	tst	r2, #32
	BR.F |= flag;
   205d8:	13833020 	orrne	r3, r3, #32
	if (val)
   205dc:	e3120008 	tst	r2, #8
	BR.F |= flag;
   205e0:	13833008 	orrne	r3, r3, #8
	BR.F &= ~flag;
   205e4:	020330f5 	andeq	r3, r3, #245	; 0xf5
   205e8:	e5c03000 	strb	r3, [r0]
	WR.HL = doAddWord(ctx, WR.HL, WR.BC, F1_ADC, F2_ADC);
   205ec:	e1c010b6 	strh	r1, [r0, #6]
}
   205f0:	e8bd8010 	pop	{r4, pc}
   205f4:	00000fff 	.word	0x00000fff
   205f8:	ffff8000 	.word	0xffff8000

000205fc <SBC_HL_SP>:
	ctx->tstates += 7;
   205fc:	e5902040 	ldr	r2, [r0, #64]	; 0x40
   20600:	e5d03000 	ldrb	r3, [r0]
   20604:	e2822007 	add	r2, r2, #7
   20608:	e5802040 	str	r2, [r0, #64]	; 0x40
	WR.HL = doAddWord(ctx, WR.HL, WR.SP, F1_SBC, F2_SBC);
   2060c:	e1d020bc 	ldrh	r2, [r0, #12]
	if(withCarry && GETFLAG(F_C))
   20610:	e3130001 	tst	r3, #1
		a2++;
   20614:	12822001 	addne	r2, r2, #1
   20618:	e1d010b6 	ldrh	r1, [r0, #6]
{
   2061c:	e92d4010 	push	{r4, lr}
	if (val)
   20620:	e59fe094 	ldr	lr, [pc, #148]	; 206bc <SBC_HL_SP+0xc0>
		a2++;
   20624:	16ff2072 	uxthne	r2, r2
	if (val)
   20628:	e001400e 	and	r4, r1, lr
   2062c:	e00ee002 	and	lr, lr, r2
   20630:	e044e00e 	sub	lr, r4, lr
   20634:	e31e0a01 	tst	lr, #4096	; 0x1000
		int minuend_sign = a1 & 0x8000;
   20638:	e59fe080 	ldr	lr, [pc, #128]	; 206c0 <SBC_HL_SP+0xc4>
		sum -= a2;
   2063c:	e041c002 	sub	ip, r1, r2
	BR.F &= ~flag;
   20640:	020330ef 	andeq	r3, r3, #239	; 0xef
	BR.F |= flag;
   20644:	13833010 	orrne	r3, r3, #16
		int result_sign = sum & 0x8000;
   20648:	e20c4902 	and	r4, ip, #32768	; 0x8000
	if (val)
   2064c:	e31c0801 	tst	ip, #65536	; 0x10000
		int subtrahend_sign = a2 & 0x8000;
   20650:	e002200e 	and	r2, r2, lr
		int minuend_sign = a1 & 0x8000;
   20654:	e001100e 	and	r1, r1, lr
	BR.F &= ~flag;
   20658:	020330fe 	andeq	r3, r3, #254	; 0xfe
	BR.F |= flag;
   2065c:	13833001 	orrne	r3, r3, #1
	if (val)
   20660:	e1520001 	cmp	r2, r1
   20664:	11510004 	cmpne	r1, r4
		VALFLAG(F_Z, (sum & 0xFFFF) == 0);
   20668:	e6ff207c 	uxth	r2, ip
	BR.F |= flag;
   2066c:	13833004 	orrne	r3, r3, #4
	BR.F &= ~flag;
   20670:	020330fb 	andeq	r3, r3, #251	; 0xfb
	if (val)
   20674:	e3540000 	cmp	r4, #0
	BR.F |= flag;
   20678:	13833080 	orrne	r3, r3, #128	; 0x80
	BR.F &= ~flag;
   2067c:	0203307f 	andeq	r3, r3, #127	; 0x7f
	if (val)
   20680:	e3520000 	cmp	r2, #0
	adjustFlags(ctx, sum >> 8);
   20684:	e1a0244c 	asr	r2, ip, #8
   20688:	e6ef2072 	uxtb	r2, r2
	BR.F |= flag;
   2068c:	03833040 	orreq	r3, r3, #64	; 0x40
	BR.F &= ~flag;
   20690:	120330bf 	andne	r3, r3, #191	; 0xbf
	if (val)
   20694:	e3120020 	tst	r2, #32
	BR.F |= flag;
   20698:	03833002 	orreq	r3, r3, #2
   2069c:	13833022 	orrne	r3, r3, #34	; 0x22
	BR.F &= ~flag;
   206a0:	020330df 	andeq	r3, r3, #223	; 0xdf
	if (val)
   206a4:	e3120008 	tst	r2, #8
	BR.F |= flag;
   206a8:	13833008 	orrne	r3, r3, #8
	BR.F &= ~flag;
   206ac:	020330f7 	andeq	r3, r3, #247	; 0xf7
   206b0:	e5c03000 	strb	r3, [r0]
	WR.HL = doAddWord(ctx, WR.HL, WR.SP, F1_SBC, F2_SBC);
   206b4:	e1c0c0b6 	strh	ip, [r0, #6]
}
   206b8:	e8bd8010 	pop	{r4, pc}
   206bc:	00000fff 	.word	0x00000fff
   206c0:	ffff8000 	.word	0xffff8000

000206c4 <SBC_HL_DE>:
	ctx->tstates += 7;
   206c4:	e5902040 	ldr	r2, [r0, #64]	; 0x40
   206c8:	e5d03000 	ldrb	r3, [r0]
   206cc:	e2822007 	add	r2, r2, #7
   206d0:	e5802040 	str	r2, [r0, #64]	; 0x40
	WR.HL = doAddWord(ctx, WR.HL, WR.DE, F1_SBC, F2_SBC);
   206d4:	e1d020b4 	ldrh	r2, [r0, #4]
	if(withCarry && GETFLAG(F_C))
   206d8:	e3130001 	tst	r3, #1
		a2++;
   206dc:	12822001 	addne	r2, r2, #1
   206e0:	e1d010b6 	ldrh	r1, [r0, #6]
{
   206e4:	e92d4010 	push	{r4, lr}
	if (val)
   206e8:	e59fe094 	ldr	lr, [pc, #148]	; 20784 <SBC_HL_DE+0xc0>
		a2++;
   206ec:	16ff2072 	uxthne	r2, r2
	if (val)
   206f0:	e001400e 	and	r4, r1, lr
   206f4:	e00ee002 	and	lr, lr, r2
   206f8:	e044e00e 	sub	lr, r4, lr
   206fc:	e31e0a01 	tst	lr, #4096	; 0x1000
		int minuend_sign = a1 & 0x8000;
   20700:	e59fe080 	ldr	lr, [pc, #128]	; 20788 <SBC_HL_DE+0xc4>
		sum -= a2;
   20704:	e041c002 	sub	ip, r1, r2
	BR.F &= ~flag;
   20708:	020330ef 	andeq	r3, r3, #239	; 0xef
	BR.F |= flag;
   2070c:	13833010 	orrne	r3, r3, #16
		int result_sign = sum & 0x8000;
   20710:	e20c4902 	and	r4, ip, #32768	; 0x8000
	if (val)
   20714:	e31c0801 	tst	ip, #65536	; 0x10000
		int subtrahend_sign = a2 & 0x8000;
   20718:	e002200e 	and	r2, r2, lr
		int minuend_sign = a1 & 0x8000;
   2071c:	e001100e 	and	r1, r1, lr
	BR.F &= ~flag;
   20720:	020330fe 	andeq	r3, r3, #254	; 0xfe
	BR.F |= flag;
   20724:	13833001 	orrne	r3, r3, #1
	if (val)
   20728:	e1520001 	cmp	r2, r1
   2072c:	11510004 	cmpne	r1, r4
		VALFLAG(F_Z, (sum & 0xFFFF) == 0);
   20730:	e6ff207c 	uxth	r2, ip
	BR.F |= flag;
   20734:	13833004 	orrne	r3, r3, #4
	BR.F &= ~flag;
   20738:	020330fb 	andeq	r3, r3, #251	; 0xfb
	if (val)
   2073c:	e3540000 	cmp	r4, #0
	BR.F |= flag;
   20740:	13833080 	orrne	r3, r3, #128	; 0x80
	BR.F &= ~flag;
   20744:	0203307f 	andeq	r3, r3, #127	; 0x7f
	if (val)
   20748:	e3520000 	cmp	r2, #0
	adjustFlags(ctx, sum >> 8);
   2074c:	e1a0244c 	asr	r2, ip, #8
   20750:	e6ef2072 	uxtb	r2, r2
	BR.F |= flag;
   20754:	03833040 	orreq	r3, r3, #64	; 0x40
	BR.F &= ~flag;
   20758:	120330bf 	andne	r3, r3, #191	; 0xbf
	if (val)
   2075c:	e3120020 	tst	r2, #32
	BR.F |= flag;
   20760:	03833002 	orreq	r3, r3, #2
   20764:	13833022 	orrne	r3, r3, #34	; 0x22
	BR.F &= ~flag;
   20768:	020330df 	andeq	r3, r3, #223	; 0xdf
	if (val)
   2076c:	e3120008 	tst	r2, #8
	BR.F |= flag;
   20770:	13833008 	orrne	r3, r3, #8
	BR.F &= ~flag;
   20774:	020330f7 	andeq	r3, r3, #247	; 0xf7
   20778:	e5c03000 	strb	r3, [r0]
	WR.HL = doAddWord(ctx, WR.HL, WR.DE, F1_SBC, F2_SBC);
   2077c:	e1c0c0b6 	strh	ip, [r0, #6]
}
   20780:	e8bd8010 	pop	{r4, pc}
   20784:	00000fff 	.word	0x00000fff
   20788:	ffff8000 	.word	0xffff8000

0002078c <RL_C>:
	BR.C = doRL(ctx, 1, BR.C);
   2078c:	e5d01002 	ldrb	r1, [r0, #2]
   20790:	e5d03000 	ldrb	r3, [r0]
	if (val)
   20794:	e3110080 	tst	r1, #128	; 0x80
    val <<= 1;
   20798:	e1a01081 	lsl	r1, r1, #1
	return (BR.F & flag) != 0;
   2079c:	e2032001 	and	r2, r3, #1
    val <<= 1;
   207a0:	e6ef1071 	uxtb	r1, r1
    val |= (byte)CY;
   207a4:	e1822001 	orr	r2, r2, r1
	BR.F |= flag;
   207a8:	13833001 	orrne	r3, r3, #1
	BR.F &= ~flag;
   207ac:	020330fe 	andeq	r3, r3, #254	; 0xfe
	if (val)
   207b0:	e3120020 	tst	r2, #32
	BR.F |= flag;
   207b4:	13833020 	orrne	r3, r3, #32
	BR.F &= ~flag;
   207b8:	020330df 	andeq	r3, r3, #223	; 0xdf
	if (val)
   207bc:	e3120008 	tst	r2, #8
	BR.F |= flag;
   207c0:	13833008 	orrne	r3, r3, #8
	BR.F &= ~flag;
   207c4:	020330f7 	andeq	r3, r3, #247	; 0xf7
   207c8:	e6af3073 	sxtb	r3, r3
   207cc:	e20310ed 	and	r1, r3, #237	; 0xed
	if (val)
   207d0:	e3120080 	tst	r2, #128	; 0x80
	BR.F &= ~flag;
   207d4:	e5c01000 	strb	r1, [r0]
	BR.F |= flag;
   207d8:	13813080 	orrne	r3, r1, #128	; 0x80
	if (val)
   207dc:	1a000008 	bne	20804 <RL_C+0x78>
	BR.F &= ~flag;
   207e0:	e203306d 	and	r3, r3, #109	; 0x6d
	if (val)
   207e4:	e3520000 	cmp	r2, #0
	BR.F &= ~flag;
   207e8:	e5c03000 	strb	r3, [r0]
	BR.F |= flag;
   207ec:	03831040 	orreq	r1, r3, #64	; 0x40
	if (val)
   207f0:	1a000003 	bne	20804 <RL_C+0x78>
	BR.F |= flag;
   207f4:	e3813004 	orr	r3, r1, #4
   207f8:	e5c03000 	strb	r3, [r0]
   207fc:	e5c02002 	strb	r2, [r0, #2]
}
   20800:	e12fff1e 	bx	lr
	VALFLAG(F_PV, parityBit[val]);
   20804:	e59f101c 	ldr	r1, [pc, #28]	; 20828 <RL_C+0x9c>
	BR.F &= ~flag;
   20808:	e6af3073 	sxtb	r3, r3
	if (val)
   2080c:	e791c102 	ldr	ip, [r1, r2, lsl #2]
	BR.F &= ~flag;
   20810:	e20310ad 	and	r1, r3, #173	; 0xad
	if (val)
   20814:	e35c0000 	cmp	ip, #0
   20818:	e5c01000 	strb	r1, [r0]
	BR.F &= ~flag;
   2081c:	020330a9 	andeq	r3, r3, #169	; 0xa9
	if (val)
   20820:	0afffff4 	beq	207f8 <RL_C+0x6c>
   20824:	eafffff2 	b	207f4 <RL_C+0x68>
   20828:	0004f000 	.word	0x0004f000

0002082c <RRC_C>:
	BR.C = doRRC(ctx, 1, BR.C);
   2082c:	e5d02002 	ldrb	r2, [r0, #2]
   20830:	e5d03000 	ldrb	r3, [r0]
   20834:	e3120001 	tst	r2, #1
	BR.F |= flag;
   20838:	13e0107f 	mvnne	r1, #127	; 0x7f
   2083c:	03a01000 	moveq	r1, #0
    val |= ((byte)GETFLAG(F_C) << 7);
   20840:	e18110a2 	orr	r1, r1, r2, lsr #1
   20844:	e6ef2071 	uxtb	r2, r1
	BR.F |= flag;
   20848:	13833001 	orrne	r3, r3, #1
	BR.F &= ~flag;
   2084c:	020330fe 	andeq	r3, r3, #254	; 0xfe
	if (val)
   20850:	e3120020 	tst	r2, #32
   20854:	e5c03000 	strb	r3, [r0]
	BR.F |= flag;
   20858:	13833020 	orrne	r3, r3, #32
	BR.F &= ~flag;
   2085c:	020330df 	andeq	r3, r3, #223	; 0xdf
	if (val)
   20860:	e3120008 	tst	r2, #8
	BR.F |= flag;
   20864:	13833008 	orrne	r3, r3, #8
	BR.F &= ~flag;
   20868:	020330f7 	andeq	r3, r3, #247	; 0xf7
   2086c:	e6af3073 	sxtb	r3, r3
	if (val)
   20870:	e3510000 	cmp	r1, #0
	BR.F |= flag;
   20874:	e203306d 	and	r3, r3, #109	; 0x6d
   20878:	b3833080 	orrlt	r3, r3, #128	; 0x80
	if (val)
   2087c:	e3520000 	cmp	r2, #0
	BR.F |= flag;
   20880:	03831040 	orreq	r1, r3, #64	; 0x40
	if (val)
   20884:	0a00000a 	beq	208b4 <RRC_C+0x88>
	VALFLAG(F_PV, parityBit[val]);
   20888:	e59f102c 	ldr	r1, [pc, #44]	; 208bc <RRC_C+0x90>
	BR.F &= ~flag;
   2088c:	e6af3073 	sxtb	r3, r3
	if (val)
   20890:	e791c102 	ldr	ip, [r1, r2, lsl #2]
	BR.F &= ~flag;
   20894:	e20310ad 	and	r1, r3, #173	; 0xad
	if (val)
   20898:	e35c0000 	cmp	ip, #0
   2089c:	e5c01000 	strb	r1, [r0]
	BR.F &= ~flag;
   208a0:	020330a9 	andeq	r3, r3, #169	; 0xa9
	if (val)
   208a4:	1a000002 	bne	208b4 <RRC_C+0x88>
   208a8:	e5c03000 	strb	r3, [r0]
   208ac:	e5c02002 	strb	r2, [r0, #2]
}
   208b0:	e12fff1e 	bx	lr
	BR.F |= flag;
   208b4:	e3813004 	orr	r3, r1, #4
   208b8:	eafffffa 	b	208a8 <RRC_C+0x7c>
   208bc:	0004f000 	.word	0x0004f000

000208c0 <RRC_D>:
	BR.D = doRRC(ctx, 1, BR.D);
   208c0:	e5d02005 	ldrb	r2, [r0, #5]
   208c4:	e5d03000 	ldrb	r3, [r0]
	if (val)
   208c8:	e3120001 	tst	r2, #1
	BR.F |= flag;
   208cc:	13e0107f 	mvnne	r1, #127	; 0x7f
   208d0:	03a01000 	moveq	r1, #0
    val |= ((byte)GETFLAG(F_C) << 7);
   208d4:	e18110a2 	orr	r1, r1, r2, lsr #1
   208d8:	e6ef2071 	uxtb	r2, r1
	BR.F |= flag;
   208dc:	13833001 	orrne	r3, r3, #1
	BR.F &= ~flag;
   208e0:	020330fe 	andeq	r3, r3, #254	; 0xfe
	if (val)
   208e4:	e3120020 	tst	r2, #32
   208e8:	e5c03000 	strb	r3, [r0]
	BR.F |= flag;
   208ec:	13833020 	orrne	r3, r3, #32
	BR.F &= ~flag;
   208f0:	020330df 	andeq	r3, r3, #223	; 0xdf
	if (val)
   208f4:	e3120008 	tst	r2, #8
	BR.F |= flag;
   208f8:	13833008 	orrne	r3, r3, #8
	BR.F &= ~flag;
   208fc:	020330f7 	andeq	r3, r3, #247	; 0xf7
   20900:	e6af3073 	sxtb	r3, r3
	if (val)
   20904:	e3510000 	cmp	r1, #0
	BR.F |= flag;
   20908:	e203306d 	and	r3, r3, #109	; 0x6d
   2090c:	b3833080 	orrlt	r3, r3, #128	; 0x80
	if (val)
   20910:	e3520000 	cmp	r2, #0
	BR.F |= flag;
   20914:	03831040 	orreq	r1, r3, #64	; 0x40
	if (val)
   20918:	0a00000a 	beq	20948 <RRC_D+0x88>
	VALFLAG(F_PV, parityBit[val]);
   2091c:	e59f102c 	ldr	r1, [pc, #44]	; 20950 <RRC_D+0x90>
	BR.F &= ~flag;
   20920:	e6af3073 	sxtb	r3, r3
	if (val)
   20924:	e791c102 	ldr	ip, [r1, r2, lsl #2]
	BR.F &= ~flag;
   20928:	e20310ad 	and	r1, r3, #173	; 0xad
	if (val)
   2092c:	e35c0000 	cmp	ip, #0
   20930:	e5c01000 	strb	r1, [r0]
	BR.F &= ~flag;
   20934:	020330a9 	andeq	r3, r3, #169	; 0xa9
	if (val)
   20938:	1a000002 	bne	20948 <RRC_D+0x88>
   2093c:	e5c03000 	strb	r3, [r0]
   20940:	e5c02005 	strb	r2, [r0, #5]
}
   20944:	e12fff1e 	bx	lr
	BR.F |= flag;
   20948:	e3813004 	orr	r3, r1, #4
   2094c:	eafffffa 	b	2093c <RRC_D+0x7c>
   20950:	0004f000 	.word	0x0004f000

00020954 <RRC_B>:
	BR.B = doRRC(ctx, 1, BR.B);
   20954:	e5d02003 	ldrb	r2, [r0, #3]
   20958:	e5d03000 	ldrb	r3, [r0]
	if (val)
   2095c:	e3120001 	tst	r2, #1
	BR.F |= flag;
   20960:	13e0107f 	mvnne	r1, #127	; 0x7f
   20964:	03a01000 	moveq	r1, #0
    val |= ((byte)GETFLAG(F_C) << 7);
   20968:	e18110a2 	orr	r1, r1, r2, lsr #1
   2096c:	e6ef2071 	uxtb	r2, r1
	BR.F |= flag;
   20970:	13833001 	orrne	r3, r3, #1
	BR.F &= ~flag;
   20974:	020330fe 	andeq	r3, r3, #254	; 0xfe
	if (val)
   20978:	e3120020 	tst	r2, #32
   2097c:	e5c03000 	strb	r3, [r0]
	BR.F |= flag;
   20980:	13833020 	orrne	r3, r3, #32
	BR.F &= ~flag;
   20984:	020330df 	andeq	r3, r3, #223	; 0xdf
	if (val)
   20988:	e3120008 	tst	r2, #8
	BR.F |= flag;
   2098c:	13833008 	orrne	r3, r3, #8
	BR.F &= ~flag;
   20990:	020330f7 	andeq	r3, r3, #247	; 0xf7
   20994:	e6af3073 	sxtb	r3, r3
	if (val)
   20998:	e3510000 	cmp	r1, #0
	BR.F |= flag;
   2099c:	e203306d 	and	r3, r3, #109	; 0x6d
   209a0:	b3833080 	orrlt	r3, r3, #128	; 0x80
	if (val)
   209a4:	e3520000 	cmp	r2, #0
	BR.F |= flag;
   209a8:	03831040 	orreq	r1, r3, #64	; 0x40
	if (val)
   209ac:	0a00000a 	beq	209dc <RRC_B+0x88>
	VALFLAG(F_PV, parityBit[val]);
   209b0:	e59f102c 	ldr	r1, [pc, #44]	; 209e4 <RRC_B+0x90>
	BR.F &= ~flag;
   209b4:	e6af3073 	sxtb	r3, r3
	if (val)
   209b8:	e791c102 	ldr	ip, [r1, r2, lsl #2]
	BR.F &= ~flag;
   209bc:	e20310ad 	and	r1, r3, #173	; 0xad
	if (val)
   209c0:	e35c0000 	cmp	ip, #0
   209c4:	e5c01000 	strb	r1, [r0]
	BR.F &= ~flag;
   209c8:	020330a9 	andeq	r3, r3, #169	; 0xa9
	if (val)
   209cc:	1a000002 	bne	209dc <RRC_B+0x88>
   209d0:	e5c03000 	strb	r3, [r0]
   209d4:	e5c02003 	strb	r2, [r0, #3]
}
   209d8:	e12fff1e 	bx	lr
	BR.F |= flag;
   209dc:	e3813004 	orr	r3, r1, #4
   209e0:	eafffffa 	b	209d0 <RRC_B+0x7c>
   209e4:	0004f000 	.word	0x0004f000

000209e8 <RL_D>:
	BR.D = doRL(ctx, 1, BR.D);
   209e8:	e5d01005 	ldrb	r1, [r0, #5]
   209ec:	e5d03000 	ldrb	r3, [r0]
	if (val)
   209f0:	e3110080 	tst	r1, #128	; 0x80
    val <<= 1;
   209f4:	e1a01081 	lsl	r1, r1, #1
	return (BR.F & flag) != 0;
   209f8:	e2032001 	and	r2, r3, #1
    val <<= 1;
   209fc:	e6ef1071 	uxtb	r1, r1
    val |= (byte)CY;
   20a00:	e1822001 	orr	r2, r2, r1
	BR.F |= flag;
   20a04:	13833001 	orrne	r3, r3, #1
	BR.F &= ~flag;
   20a08:	020330fe 	andeq	r3, r3, #254	; 0xfe
	if (val)
   20a0c:	e3120020 	tst	r2, #32
	BR.F |= flag;
   20a10:	13833020 	orrne	r3, r3, #32
	BR.F &= ~flag;
   20a14:	020330df 	andeq	r3, r3, #223	; 0xdf
	if (val)
   20a18:	e3120008 	tst	r2, #8
	BR.F |= flag;
   20a1c:	13833008 	orrne	r3, r3, #8
	BR.F &= ~flag;
   20a20:	020330f7 	andeq	r3, r3, #247	; 0xf7
   20a24:	e6af3073 	sxtb	r3, r3
   20a28:	e20310ed 	and	r1, r3, #237	; 0xed
	if (val)
   20a2c:	e3120080 	tst	r2, #128	; 0x80
	BR.F &= ~flag;
   20a30:	e5c01000 	strb	r1, [r0]
	BR.F |= flag;
   20a34:	13813080 	orrne	r3, r1, #128	; 0x80
	if (val)
   20a38:	1a000008 	bne	20a60 <RL_D+0x78>
	BR.F &= ~flag;
   20a3c:	e203306d 	and	r3, r3, #109	; 0x6d
	if (val)
   20a40:	e3520000 	cmp	r2, #0
	BR.F &= ~flag;
   20a44:	e5c03000 	strb	r3, [r0]
	BR.F |= flag;
   20a48:	03831040 	orreq	r1, r3, #64	; 0x40
	if (val)
   20a4c:	1a000003 	bne	20a60 <RL_D+0x78>
	BR.F |= flag;
   20a50:	e3813004 	orr	r3, r1, #4
   20a54:	e5c03000 	strb	r3, [r0]
   20a58:	e5c02005 	strb	r2, [r0, #5]
}
   20a5c:	e12fff1e 	bx	lr
	VALFLAG(F_PV, parityBit[val]);
   20a60:	e59f101c 	ldr	r1, [pc, #28]	; 20a84 <RL_D+0x9c>
	BR.F &= ~flag;
   20a64:	e6af3073 	sxtb	r3, r3
	if (val)
   20a68:	e791c102 	ldr	ip, [r1, r2, lsl #2]
	BR.F &= ~flag;
   20a6c:	e20310ad 	and	r1, r3, #173	; 0xad
	if (val)
   20a70:	e35c0000 	cmp	ip, #0
   20a74:	e5c01000 	strb	r1, [r0]
	BR.F &= ~flag;
   20a78:	020330a9 	andeq	r3, r3, #169	; 0xa9
	if (val)
   20a7c:	0afffff4 	beq	20a54 <RL_D+0x6c>
   20a80:	eafffff2 	b	20a50 <RL_D+0x68>
   20a84:	0004f000 	.word	0x0004f000

00020a88 <RLC_A>:
	BR.A = doRLC(ctx, 1, BR.A);
   20a88:	e5d01001 	ldrb	r1, [r0, #1]
   20a8c:	e5d03000 	ldrb	r3, [r0]
   20a90:	e3110080 	tst	r1, #128	; 0x80
	BR.F |= flag;
   20a94:	13a0c001 	movne	ip, #1
   20a98:	03a0c000 	moveq	ip, #0
    val <<= 1;
   20a9c:	e1a02081 	lsl	r2, r1, #1
   20aa0:	e6ef2072 	uxtb	r2, r2
    val |= (byte)GETFLAG(F_C);
   20aa4:	e182200c 	orr	r2, r2, ip
	BR.F |= flag;
   20aa8:	13833001 	orrne	r3, r3, #1
	BR.F &= ~flag;
   20aac:	020330fe 	andeq	r3, r3, #254	; 0xfe
	if (val)
   20ab0:	e3120020 	tst	r2, #32
	BR.F |= flag;
   20ab4:	13833020 	orrne	r3, r3, #32
	BR.F &= ~flag;
   20ab8:	020330df 	andeq	r3, r3, #223	; 0xdf
	if (val)
   20abc:	e3120008 	tst	r2, #8
	BR.F |= flag;
   20ac0:	13833008 	orrne	r3, r3, #8
	BR.F &= ~flag;
   20ac4:	020330f7 	andeq	r3, r3, #247	; 0xf7
   20ac8:	e6af3073 	sxtb	r3, r3
   20acc:	e20310ed 	and	r1, r3, #237	; 0xed
	if (val)
   20ad0:	e3120080 	tst	r2, #128	; 0x80
	BR.F &= ~flag;
   20ad4:	e5c01000 	strb	r1, [r0]
	BR.F |= flag;
   20ad8:	13813080 	orrne	r3, r1, #128	; 0x80
	if (val)
   20adc:	1a000008 	bne	20b04 <RLC_A+0x7c>
	BR.F &= ~flag;
   20ae0:	e203306d 	and	r3, r3, #109	; 0x6d
	if (val)
   20ae4:	e3520000 	cmp	r2, #0
	BR.F &= ~flag;
   20ae8:	e5c03000 	strb	r3, [r0]
	BR.F |= flag;
   20aec:	03831040 	orreq	r1, r3, #64	; 0x40
	if (val)
   20af0:	1a000003 	bne	20b04 <RLC_A+0x7c>
	BR.F |= flag;
   20af4:	e3813004 	orr	r3, r1, #4
   20af8:	e5c03000 	strb	r3, [r0]
   20afc:	e5c02001 	strb	r2, [r0, #1]
}
   20b00:	e12fff1e 	bx	lr
	VALFLAG(F_PV, parityBit[val]);
   20b04:	e59f101c 	ldr	r1, [pc, #28]	; 20b28 <RLC_A+0xa0>
	BR.F &= ~flag;
   20b08:	e6af3073 	sxtb	r3, r3
	if (val)
   20b0c:	e791c102 	ldr	ip, [r1, r2, lsl #2]
	BR.F &= ~flag;
   20b10:	e20310ad 	and	r1, r3, #173	; 0xad
	if (val)
   20b14:	e35c0000 	cmp	ip, #0
   20b18:	e5c01000 	strb	r1, [r0]
	BR.F &= ~flag;
   20b1c:	020330a9 	andeq	r3, r3, #169	; 0xa9
	if (val)
   20b20:	0afffff4 	beq	20af8 <RLC_A+0x70>
   20b24:	eafffff2 	b	20af4 <RLC_A+0x6c>
   20b28:	0004f000 	.word	0x0004f000

00020b2c <RLC_C>:
	BR.C = doRLC(ctx, 1, BR.C);
   20b2c:	e5d01002 	ldrb	r1, [r0, #2]
   20b30:	e5d03000 	ldrb	r3, [r0]
   20b34:	e3110080 	tst	r1, #128	; 0x80
	BR.F |= flag;
   20b38:	13a0c001 	movne	ip, #1
   20b3c:	03a0c000 	moveq	ip, #0
    val <<= 1;
   20b40:	e1a02081 	lsl	r2, r1, #1
   20b44:	e6ef2072 	uxtb	r2, r2
    val |= (byte)GETFLAG(F_C);
   20b48:	e182200c 	orr	r2, r2, ip
	BR.F |= flag;
   20b4c:	13833001 	orrne	r3, r3, #1
	BR.F &= ~flag;
   20b50:	020330fe 	andeq	r3, r3, #254	; 0xfe
	if (val)
   20b54:	e3120020 	tst	r2, #32
	BR.F |= flag;
   20b58:	13833020 	orrne	r3, r3, #32
	BR.F &= ~flag;
   20b5c:	020330df 	andeq	r3, r3, #223	; 0xdf
	if (val)
   20b60:	e3120008 	tst	r2, #8
	BR.F |= flag;
   20b64:	13833008 	orrne	r3, r3, #8
	BR.F &= ~flag;
   20b68:	020330f7 	andeq	r3, r3, #247	; 0xf7
   20b6c:	e6af3073 	sxtb	r3, r3
   20b70:	e20310ed 	and	r1, r3, #237	; 0xed
	if (val)
   20b74:	e3120080 	tst	r2, #128	; 0x80
	BR.F &= ~flag;
   20b78:	e5c01000 	strb	r1, [r0]
	BR.F |= flag;
   20b7c:	13813080 	orrne	r3, r1, #128	; 0x80
	if (val)
   20b80:	1a000008 	bne	20ba8 <RLC_C+0x7c>
	BR.F &= ~flag;
   20b84:	e203306d 	and	r3, r3, #109	; 0x6d
	if (val)
   20b88:	e3520000 	cmp	r2, #0
	BR.F &= ~flag;
   20b8c:	e5c03000 	strb	r3, [r0]
	BR.F |= flag;
   20b90:	03831040 	orreq	r1, r3, #64	; 0x40
	if (val)
   20b94:	1a000003 	bne	20ba8 <RLC_C+0x7c>
	BR.F |= flag;
   20b98:	e3813004 	orr	r3, r1, #4
   20b9c:	e5c03000 	strb	r3, [r0]
   20ba0:	e5c02002 	strb	r2, [r0, #2]
}
   20ba4:	e12fff1e 	bx	lr
	VALFLAG(F_PV, parityBit[val]);
   20ba8:	e59f101c 	ldr	r1, [pc, #28]	; 20bcc <RLC_C+0xa0>
	BR.F &= ~flag;
   20bac:	e6af3073 	sxtb	r3, r3
	if (val)
   20bb0:	e791c102 	ldr	ip, [r1, r2, lsl #2]
	BR.F &= ~flag;
   20bb4:	e20310ad 	and	r1, r3, #173	; 0xad
	if (val)
   20bb8:	e35c0000 	cmp	ip, #0
   20bbc:	e5c01000 	strb	r1, [r0]
	BR.F &= ~flag;
   20bc0:	020330a9 	andeq	r3, r3, #169	; 0xa9
	if (val)
   20bc4:	0afffff4 	beq	20b9c <RLC_C+0x70>
   20bc8:	eafffff2 	b	20b98 <RLC_C+0x6c>
   20bcc:	0004f000 	.word	0x0004f000

00020bd0 <RL_E>:
	BR.E = doRL(ctx, 1, BR.E);
   20bd0:	e5d01004 	ldrb	r1, [r0, #4]
   20bd4:	e5d03000 	ldrb	r3, [r0]
   20bd8:	e3110080 	tst	r1, #128	; 0x80
    val <<= 1;
   20bdc:	e1a01081 	lsl	r1, r1, #1
	return (BR.F & flag) != 0;
   20be0:	e2032001 	and	r2, r3, #1
    val <<= 1;
   20be4:	e6ef1071 	uxtb	r1, r1
    val |= (byte)CY;
   20be8:	e1822001 	orr	r2, r2, r1
	BR.F |= flag;
   20bec:	13833001 	orrne	r3, r3, #1
	BR.F &= ~flag;
   20bf0:	020330fe 	andeq	r3, r3, #254	; 0xfe
	if (val)
   20bf4:	e3120020 	tst	r2, #32
	BR.F |= flag;
   20bf8:	13833020 	orrne	r3, r3, #32
	BR.F &= ~flag;
   20bfc:	020330df 	andeq	r3, r3, #223	; 0xdf
	if (val)
   20c00:	e3120008 	tst	r2, #8
	BR.F |= flag;
   20c04:	13833008 	orrne	r3, r3, #8
	BR.F &= ~flag;
   20c08:	020330f7 	andeq	r3, r3, #247	; 0xf7
   20c0c:	e6af3073 	sxtb	r3, r3
   20c10:	e20310ed 	and	r1, r3, #237	; 0xed
	if (val)
   20c14:	e3120080 	tst	r2, #128	; 0x80
	BR.F &= ~flag;
   20c18:	e5c01000 	strb	r1, [r0]
	BR.F |= flag;
   20c1c:	13813080 	orrne	r3, r1, #128	; 0x80
	if (val)
   20c20:	1a000008 	bne	20c48 <RL_E+0x78>
	BR.F &= ~flag;
   20c24:	e203306d 	and	r3, r3, #109	; 0x6d
	if (val)
   20c28:	e3520000 	cmp	r2, #0
	BR.F &= ~flag;
   20c2c:	e5c03000 	strb	r3, [r0]
	BR.F |= flag;
   20c30:	03831040 	orreq	r1, r3, #64	; 0x40
	if (val)
   20c34:	1a000003 	bne	20c48 <RL_E+0x78>
	BR.F |= flag;
   20c38:	e3813004 	orr	r3, r1, #4
   20c3c:	e5c03000 	strb	r3, [r0]
   20c40:	e5c02004 	strb	r2, [r0, #4]
}
   20c44:	e12fff1e 	bx	lr
	VALFLAG(F_PV, parityBit[val]);
   20c48:	e59f101c 	ldr	r1, [pc, #28]	; 20c6c <RL_E+0x9c>
	BR.F &= ~flag;
   20c4c:	e6af3073 	sxtb	r3, r3
	if (val)
   20c50:	e791c102 	ldr	ip, [r1, r2, lsl #2]
	BR.F &= ~flag;
   20c54:	e20310ad 	and	r1, r3, #173	; 0xad
	if (val)
   20c58:	e35c0000 	cmp	ip, #0
   20c5c:	e5c01000 	strb	r1, [r0]
	BR.F &= ~flag;
   20c60:	020330a9 	andeq	r3, r3, #169	; 0xa9
	if (val)
   20c64:	0afffff4 	beq	20c3c <RL_E+0x6c>
   20c68:	eafffff2 	b	20c38 <RL_E+0x68>
   20c6c:	0004f000 	.word	0x0004f000

00020c70 <RL_L>:
	BR.L = doRL(ctx, 1, BR.L);
   20c70:	e5d01006 	ldrb	r1, [r0, #6]
   20c74:	e5d03000 	ldrb	r3, [r0]
   20c78:	e3110080 	tst	r1, #128	; 0x80
    val <<= 1;
   20c7c:	e1a01081 	lsl	r1, r1, #1
	return (BR.F & flag) != 0;
   20c80:	e2032001 	and	r2, r3, #1
    val <<= 1;
   20c84:	e6ef1071 	uxtb	r1, r1
    val |= (byte)CY;
   20c88:	e1822001 	orr	r2, r2, r1
	BR.F |= flag;
   20c8c:	13833001 	orrne	r3, r3, #1
	BR.F &= ~flag;
   20c90:	020330fe 	andeq	r3, r3, #254	; 0xfe
	if (val)
   20c94:	e3120020 	tst	r2, #32
	BR.F |= flag;
   20c98:	13833020 	orrne	r3, r3, #32
	BR.F &= ~flag;
   20c9c:	020330df 	andeq	r3, r3, #223	; 0xdf
	if (val)
   20ca0:	e3120008 	tst	r2, #8
	BR.F |= flag;
   20ca4:	13833008 	orrne	r3, r3, #8
	BR.F &= ~flag;
   20ca8:	020330f7 	andeq	r3, r3, #247	; 0xf7
   20cac:	e6af3073 	sxtb	r3, r3
   20cb0:	e20310ed 	and	r1, r3, #237	; 0xed
	if (val)
   20cb4:	e3120080 	tst	r2, #128	; 0x80
	BR.F &= ~flag;
   20cb8:	e5c01000 	strb	r1, [r0]
	BR.F |= flag;
   20cbc:	13813080 	orrne	r3, r1, #128	; 0x80
	if (val)
   20cc0:	1a000008 	bne	20ce8 <RL_L+0x78>
	BR.F &= ~flag;
   20cc4:	e203306d 	and	r3, r3, #109	; 0x6d
	if (val)
   20cc8:	e3520000 	cmp	r2, #0
	BR.F &= ~flag;
   20ccc:	e5c03000 	strb	r3, [r0]
	BR.F |= flag;
   20cd0:	03831040 	orreq	r1, r3, #64	; 0x40
	if (val)
   20cd4:	1a000003 	bne	20ce8 <RL_L+0x78>
	BR.F |= flag;
   20cd8:	e3813004 	orr	r3, r1, #4
   20cdc:	e5c03000 	strb	r3, [r0]
   20ce0:	e5c02006 	strb	r2, [r0, #6]
}
   20ce4:	e12fff1e 	bx	lr
	VALFLAG(F_PV, parityBit[val]);
   20ce8:	e59f101c 	ldr	r1, [pc, #28]	; 20d0c <RL_L+0x9c>
	BR.F &= ~flag;
   20cec:	e6af3073 	sxtb	r3, r3
	if (val)
   20cf0:	e791c102 	ldr	ip, [r1, r2, lsl #2]
	BR.F &= ~flag;
   20cf4:	e20310ad 	and	r1, r3, #173	; 0xad
	if (val)
   20cf8:	e35c0000 	cmp	ip, #0
   20cfc:	e5c01000 	strb	r1, [r0]
	BR.F &= ~flag;
   20d00:	020330a9 	andeq	r3, r3, #169	; 0xa9
	if (val)
   20d04:	0afffff4 	beq	20cdc <RL_L+0x6c>
   20d08:	eafffff2 	b	20cd8 <RL_L+0x68>
   20d0c:	0004f000 	.word	0x0004f000

00020d10 <RL_H>:
	BR.H = doRL(ctx, 1, BR.H);
   20d10:	e5d01007 	ldrb	r1, [r0, #7]
   20d14:	e5d03000 	ldrb	r3, [r0]
   20d18:	e3110080 	tst	r1, #128	; 0x80
    val <<= 1;
   20d1c:	e1a01081 	lsl	r1, r1, #1
	return (BR.F & flag) != 0;
   20d20:	e2032001 	and	r2, r3, #1
    val <<= 1;
   20d24:	e6ef1071 	uxtb	r1, r1
    val |= (byte)CY;
   20d28:	e1822001 	orr	r2, r2, r1
	BR.F |= flag;
   20d2c:	13833001 	orrne	r3, r3, #1
	BR.F &= ~flag;
   20d30:	020330fe 	andeq	r3, r3, #254	; 0xfe
	if (val)
   20d34:	e3120020 	tst	r2, #32
	BR.F |= flag;
   20d38:	13833020 	orrne	r3, r3, #32
	BR.F &= ~flag;
   20d3c:	020330df 	andeq	r3, r3, #223	; 0xdf
	if (val)
   20d40:	e3120008 	tst	r2, #8
	BR.F |= flag;
   20d44:	13833008 	orrne	r3, r3, #8
	BR.F &= ~flag;
   20d48:	020330f7 	andeq	r3, r3, #247	; 0xf7
   20d4c:	e6af3073 	sxtb	r3, r3
   20d50:	e20310ed 	and	r1, r3, #237	; 0xed
	if (val)
   20d54:	e3120080 	tst	r2, #128	; 0x80
	BR.F &= ~flag;
   20d58:	e5c01000 	strb	r1, [r0]
	BR.F |= flag;
   20d5c:	13813080 	orrne	r3, r1, #128	; 0x80
	if (val)
   20d60:	1a000008 	bne	20d88 <RL_H+0x78>
	BR.F &= ~flag;
   20d64:	e203306d 	and	r3, r3, #109	; 0x6d
	if (val)
   20d68:	e3520000 	cmp	r2, #0
	BR.F &= ~flag;
   20d6c:	e5c03000 	strb	r3, [r0]
	BR.F |= flag;
   20d70:	03831040 	orreq	r1, r3, #64	; 0x40
	if (val)
   20d74:	1a000003 	bne	20d88 <RL_H+0x78>
	BR.F |= flag;
   20d78:	e3813004 	orr	r3, r1, #4
   20d7c:	e5c03000 	strb	r3, [r0]
   20d80:	e5c02007 	strb	r2, [r0, #7]
}
   20d84:	e12fff1e 	bx	lr
	VALFLAG(F_PV, parityBit[val]);
   20d88:	e59f101c 	ldr	r1, [pc, #28]	; 20dac <RL_H+0x9c>
	BR.F &= ~flag;
   20d8c:	e6af3073 	sxtb	r3, r3
	if (val)
   20d90:	e791c102 	ldr	ip, [r1, r2, lsl #2]
	BR.F &= ~flag;
   20d94:	e20310ad 	and	r1, r3, #173	; 0xad
	if (val)
   20d98:	e35c0000 	cmp	ip, #0
   20d9c:	e5c01000 	strb	r1, [r0]
	BR.F &= ~flag;
   20da0:	020330a9 	andeq	r3, r3, #169	; 0xa9
	if (val)
   20da4:	0afffff4 	beq	20d7c <RL_H+0x6c>
   20da8:	eafffff2 	b	20d78 <RL_H+0x68>
   20dac:	0004f000 	.word	0x0004f000

00020db0 <RLC_B>:
	BR.B = doRLC(ctx, 1, BR.B);
   20db0:	e5d01003 	ldrb	r1, [r0, #3]
   20db4:	e5d03000 	ldrb	r3, [r0]
   20db8:	e3110080 	tst	r1, #128	; 0x80
	BR.F |= flag;
   20dbc:	13a0c001 	movne	ip, #1
   20dc0:	03a0c000 	moveq	ip, #0
    val <<= 1;
   20dc4:	e1a02081 	lsl	r2, r1, #1
   20dc8:	e6ef2072 	uxtb	r2, r2
    val |= (byte)GETFLAG(F_C);
   20dcc:	e182200c 	orr	r2, r2, ip
	BR.F |= flag;
   20dd0:	13833001 	orrne	r3, r3, #1
	BR.F &= ~flag;
   20dd4:	020330fe 	andeq	r3, r3, #254	; 0xfe
	if (val)
   20dd8:	e3120020 	tst	r2, #32
	BR.F |= flag;
   20ddc:	13833020 	orrne	r3, r3, #32
	BR.F &= ~flag;
   20de0:	020330df 	andeq	r3, r3, #223	; 0xdf
	if (val)
   20de4:	e3120008 	tst	r2, #8
	BR.F |= flag;
   20de8:	13833008 	orrne	r3, r3, #8
	BR.F &= ~flag;
   20dec:	020330f7 	andeq	r3, r3, #247	; 0xf7
   20df0:	e6af3073 	sxtb	r3, r3
   20df4:	e20310ed 	and	r1, r3, #237	; 0xed
	if (val)
   20df8:	e3120080 	tst	r2, #128	; 0x80
	BR.F &= ~flag;
   20dfc:	e5c01000 	strb	r1, [r0]
	BR.F |= flag;
   20e00:	13813080 	orrne	r3, r1, #128	; 0x80
	if (val)
   20e04:	1a000008 	bne	20e2c <RLC_B+0x7c>
	BR.F &= ~flag;
   20e08:	e203306d 	and	r3, r3, #109	; 0x6d
	if (val)
   20e0c:	e3520000 	cmp	r2, #0
	BR.F &= ~flag;
   20e10:	e5c03000 	strb	r3, [r0]
	BR.F |= flag;
   20e14:	03831040 	orreq	r1, r3, #64	; 0x40
	if (val)
   20e18:	1a000003 	bne	20e2c <RLC_B+0x7c>
	BR.F |= flag;
   20e1c:	e3813004 	orr	r3, r1, #4
   20e20:	e5c03000 	strb	r3, [r0]
   20e24:	e5c02003 	strb	r2, [r0, #3]
}
   20e28:	e12fff1e 	bx	lr
	VALFLAG(F_PV, parityBit[val]);
   20e2c:	e59f101c 	ldr	r1, [pc, #28]	; 20e50 <RLC_B+0xa0>
	BR.F &= ~flag;
   20e30:	e6af3073 	sxtb	r3, r3
	if (val)
   20e34:	e791c102 	ldr	ip, [r1, r2, lsl #2]
	BR.F &= ~flag;
   20e38:	e20310ad 	and	r1, r3, #173	; 0xad
	if (val)
   20e3c:	e35c0000 	cmp	ip, #0
   20e40:	e5c01000 	strb	r1, [r0]
	BR.F &= ~flag;
   20e44:	020330a9 	andeq	r3, r3, #169	; 0xa9
	if (val)
   20e48:	0afffff4 	beq	20e20 <RLC_B+0x70>
   20e4c:	eafffff2 	b	20e1c <RLC_B+0x6c>
   20e50:	0004f000 	.word	0x0004f000

00020e54 <RRC_E>:
	BR.E = doRRC(ctx, 1, BR.E);
   20e54:	e5d02004 	ldrb	r2, [r0, #4]
   20e58:	e5d03000 	ldrb	r3, [r0]
   20e5c:	e3120001 	tst	r2, #1
	BR.F |= flag;
   20e60:	13e0107f 	mvnne	r1, #127	; 0x7f
   20e64:	03a01000 	moveq	r1, #0
    val |= ((byte)GETFLAG(F_C) << 7);
   20e68:	e18110a2 	orr	r1, r1, r2, lsr #1
   20e6c:	e6ef2071 	uxtb	r2, r1
	BR.F |= flag;
   20e70:	13833001 	orrne	r3, r3, #1
	BR.F &= ~flag;
   20e74:	020330fe 	andeq	r3, r3, #254	; 0xfe
	if (val)
   20e78:	e3120020 	tst	r2, #32
   20e7c:	e5c03000 	strb	r3, [r0]
	BR.F |= flag;
   20e80:	13833020 	orrne	r3, r3, #32
	BR.F &= ~flag;
   20e84:	020330df 	andeq	r3, r3, #223	; 0xdf
	if (val)
   20e88:	e3120008 	tst	r2, #8
	BR.F |= flag;
   20e8c:	13833008 	orrne	r3, r3, #8
	BR.F &= ~flag;
   20e90:	020330f7 	andeq	r3, r3, #247	; 0xf7
   20e94:	e6af3073 	sxtb	r3, r3
	if (val)
   20e98:	e3510000 	cmp	r1, #0
	BR.F |= flag;
   20e9c:	e203306d 	and	r3, r3, #109	; 0x6d
   20ea0:	b3833080 	orrlt	r3, r3, #128	; 0x80
	if (val)
   20ea4:	e3520000 	cmp	r2, #0
	BR.F |= flag;
   20ea8:	03831040 	orreq	r1, r3, #64	; 0x40
	if (val)
   20eac:	0a00000a 	beq	20edc <RRC_E+0x88>
	VALFLAG(F_PV, parityBit[val]);
   20eb0:	e59f102c 	ldr	r1, [pc, #44]	; 20ee4 <RRC_E+0x90>
	BR.F &= ~flag;
   20eb4:	e6af3073 	sxtb	r3, r3
	if (val)
   20eb8:	e791c102 	ldr	ip, [r1, r2, lsl #2]
	BR.F &= ~flag;
   20ebc:	e20310ad 	and	r1, r3, #173	; 0xad
	if (val)
   20ec0:	e35c0000 	cmp	ip, #0
   20ec4:	e5c01000 	strb	r1, [r0]
	BR.F &= ~flag;
   20ec8:	020330a9 	andeq	r3, r3, #169	; 0xa9
	if (val)
   20ecc:	1a000002 	bne	20edc <RRC_E+0x88>
   20ed0:	e5c03000 	strb	r3, [r0]
   20ed4:	e5c02004 	strb	r2, [r0, #4]
}
   20ed8:	e12fff1e 	bx	lr
	BR.F |= flag;
   20edc:	e3813004 	orr	r3, r1, #4
   20ee0:	eafffffa 	b	20ed0 <RRC_E+0x7c>
   20ee4:	0004f000 	.word	0x0004f000

00020ee8 <RRC_H>:
	BR.H = doRRC(ctx, 1, BR.H);
   20ee8:	e5d02007 	ldrb	r2, [r0, #7]
   20eec:	e5d03000 	ldrb	r3, [r0]
	if (val)
   20ef0:	e3120001 	tst	r2, #1
	BR.F |= flag;
   20ef4:	13e0107f 	mvnne	r1, #127	; 0x7f
   20ef8:	03a01000 	moveq	r1, #0
    val |= ((byte)GETFLAG(F_C) << 7);
   20efc:	e18110a2 	orr	r1, r1, r2, lsr #1
   20f00:	e6ef2071 	uxtb	r2, r1
	BR.F |= flag;
   20f04:	13833001 	orrne	r3, r3, #1
	BR.F &= ~flag;
   20f08:	020330fe 	andeq	r3, r3, #254	; 0xfe
	if (val)
   20f0c:	e3120020 	tst	r2, #32
   20f10:	e5c03000 	strb	r3, [r0]
	BR.F |= flag;
   20f14:	13833020 	orrne	r3, r3, #32
	BR.F &= ~flag;
   20f18:	020330df 	andeq	r3, r3, #223	; 0xdf
	if (val)
   20f1c:	e3120008 	tst	r2, #8
	BR.F |= flag;
   20f20:	13833008 	orrne	r3, r3, #8
	BR.F &= ~flag;
   20f24:	020330f7 	andeq	r3, r3, #247	; 0xf7
   20f28:	e6af3073 	sxtb	r3, r3
	if (val)
   20f2c:	e3510000 	cmp	r1, #0
	BR.F |= flag;
   20f30:	e203306d 	and	r3, r3, #109	; 0x6d
   20f34:	b3833080 	orrlt	r3, r3, #128	; 0x80
	if (val)
   20f38:	e3520000 	cmp	r2, #0
	BR.F |= flag;
   20f3c:	03831040 	orreq	r1, r3, #64	; 0x40
	if (val)
   20f40:	0a00000a 	beq	20f70 <RRC_H+0x88>
	VALFLAG(F_PV, parityBit[val]);
   20f44:	e59f102c 	ldr	r1, [pc, #44]	; 20f78 <RRC_H+0x90>
	BR.F &= ~flag;
   20f48:	e6af3073 	sxtb	r3, r3
	if (val)
   20f4c:	e791c102 	ldr	ip, [r1, r2, lsl #2]
	BR.F &= ~flag;
   20f50:	e20310ad 	and	r1, r3, #173	; 0xad
	if (val)
   20f54:	e35c0000 	cmp	ip, #0
   20f58:	e5c01000 	strb	r1, [r0]
	BR.F &= ~flag;
   20f5c:	020330a9 	andeq	r3, r3, #169	; 0xa9
	if (val)
   20f60:	1a000002 	bne	20f70 <RRC_H+0x88>
   20f64:	e5c03000 	strb	r3, [r0]
   20f68:	e5c02007 	strb	r2, [r0, #7]
}
   20f6c:	e12fff1e 	bx	lr
	BR.F |= flag;
   20f70:	e3813004 	orr	r3, r1, #4
   20f74:	eafffffa 	b	20f64 <RRC_H+0x7c>
   20f78:	0004f000 	.word	0x0004f000

00020f7c <RR_H>:
{
   20f7c:	e5d03000 	ldrb	r3, [r0]
	BR.H = doRR(ctx, 1, BR.H);
   20f80:	e5d01007 	ldrb	r1, [r0, #7]
	return (BR.F & flag) != 0;
   20f84:	e203c001 	and	ip, r3, #1
    val >>= 1;
   20f88:	e1a020a1 	lsr	r2, r1, #1
    val |= (CY << 7);
   20f8c:	e182238c 	orr	r2, r2, ip, lsl #7
   20f90:	e6af2072 	sxtb	r2, r2
	if (val)
   20f94:	e3110001 	tst	r1, #1
    val |= (CY << 7);
   20f98:	e6ef1072 	uxtb	r1, r2
	BR.F |= flag;
   20f9c:	13833001 	orrne	r3, r3, #1
	BR.F &= ~flag;
   20fa0:	020330fe 	andeq	r3, r3, #254	; 0xfe
	if (val)
   20fa4:	e3110020 	tst	r1, #32
	BR.F |= flag;
   20fa8:	13833020 	orrne	r3, r3, #32
	BR.F &= ~flag;
   20fac:	020330df 	andeq	r3, r3, #223	; 0xdf
	if (val)
   20fb0:	e3110008 	tst	r1, #8
	BR.F |= flag;
   20fb4:	13833008 	orrne	r3, r3, #8
	BR.F &= ~flag;
   20fb8:	020330f7 	andeq	r3, r3, #247	; 0xf7
   20fbc:	e6af3073 	sxtb	r3, r3
	if (val)
   20fc0:	e3520000 	cmp	r2, #0
	BR.F |= flag;
   20fc4:	e203306d 	and	r3, r3, #109	; 0x6d
   20fc8:	b3833080 	orrlt	r3, r3, #128	; 0x80
	if (val)
   20fcc:	e3510000 	cmp	r1, #0
	BR.F |= flag;
   20fd0:	03832040 	orreq	r2, r3, #64	; 0x40
	if (val)
   20fd4:	0a00000a 	beq	21004 <RR_H+0x88>
	VALFLAG(F_PV, parityBit[val]);
   20fd8:	e59f202c 	ldr	r2, [pc, #44]	; 2100c <RR_H+0x90>
	BR.F &= ~flag;
   20fdc:	e6af3073 	sxtb	r3, r3
	if (val)
   20fe0:	e792c101 	ldr	ip, [r2, r1, lsl #2]
	BR.F &= ~flag;
   20fe4:	e20320ad 	and	r2, r3, #173	; 0xad
	if (val)
   20fe8:	e35c0000 	cmp	ip, #0
   20fec:	e5c02000 	strb	r2, [r0]
	BR.F &= ~flag;
   20ff0:	020330a9 	andeq	r3, r3, #169	; 0xa9
	if (val)
   20ff4:	1a000002 	bne	21004 <RR_H+0x88>
   20ff8:	e5c03000 	strb	r3, [r0]
   20ffc:	e5c01007 	strb	r1, [r0, #7]
}
   21000:	e12fff1e 	bx	lr
	BR.F |= flag;
   21004:	e3823004 	orr	r3, r2, #4
   21008:	eafffffa 	b	20ff8 <RR_H+0x7c>
   2100c:	0004f000 	.word	0x0004f000

00021010 <RRC_L>:
	BR.L = doRRC(ctx, 1, BR.L);
   21010:	e5d02006 	ldrb	r2, [r0, #6]
   21014:	e5d03000 	ldrb	r3, [r0]
	if (val)
   21018:	e3120001 	tst	r2, #1
	BR.F |= flag;
   2101c:	13e0107f 	mvnne	r1, #127	; 0x7f
   21020:	03a01000 	moveq	r1, #0
    val |= ((byte)GETFLAG(F_C) << 7);
   21024:	e18110a2 	orr	r1, r1, r2, lsr #1
   21028:	e6ef2071 	uxtb	r2, r1
	BR.F |= flag;
   2102c:	13833001 	orrne	r3, r3, #1
	BR.F &= ~flag;
   21030:	020330fe 	andeq	r3, r3, #254	; 0xfe
	if (val)
   21034:	e3120020 	tst	r2, #32
   21038:	e5c03000 	strb	r3, [r0]
	BR.F |= flag;
   2103c:	13833020 	orrne	r3, r3, #32
	BR.F &= ~flag;
   21040:	020330df 	andeq	r3, r3, #223	; 0xdf
	if (val)
   21044:	e3120008 	tst	r2, #8
	BR.F |= flag;
   21048:	13833008 	orrne	r3, r3, #8
	BR.F &= ~flag;
   2104c:	020330f7 	andeq	r3, r3, #247	; 0xf7
   21050:	e6af3073 	sxtb	r3, r3
	if (val)
   21054:	e3510000 	cmp	r1, #0
	BR.F |= flag;
   21058:	e203306d 	and	r3, r3, #109	; 0x6d
   2105c:	b3833080 	orrlt	r3, r3, #128	; 0x80
	if (val)
   21060:	e3520000 	cmp	r2, #0
	BR.F |= flag;
   21064:	03831040 	orreq	r1, r3, #64	; 0x40
	if (val)
   21068:	0a00000a 	beq	21098 <RRC_L+0x88>
	VALFLAG(F_PV, parityBit[val]);
   2106c:	e59f102c 	ldr	r1, [pc, #44]	; 210a0 <RRC_L+0x90>
	BR.F &= ~flag;
   21070:	e6af3073 	sxtb	r3, r3
	if (val)
   21074:	e791c102 	ldr	ip, [r1, r2, lsl #2]
	BR.F &= ~flag;
   21078:	e20310ad 	and	r1, r3, #173	; 0xad
	if (val)
   2107c:	e35c0000 	cmp	ip, #0
   21080:	e5c01000 	strb	r1, [r0]
	BR.F &= ~flag;
   21084:	020330a9 	andeq	r3, r3, #169	; 0xa9
	if (val)
   21088:	1a000002 	bne	21098 <RRC_L+0x88>
   2108c:	e5c03000 	strb	r3, [r0]
   21090:	e5c02006 	strb	r2, [r0, #6]
}
   21094:	e12fff1e 	bx	lr
	BR.F |= flag;
   21098:	e3813004 	orr	r3, r1, #4
   2109c:	eafffffa 	b	2108c <RRC_L+0x7c>
   210a0:	0004f000 	.word	0x0004f000

000210a4 <RR_E>:
{
   210a4:	e5d03000 	ldrb	r3, [r0]
	BR.E = doRR(ctx, 1, BR.E);
   210a8:	e5d01004 	ldrb	r1, [r0, #4]
	return (BR.F & flag) != 0;
   210ac:	e203c001 	and	ip, r3, #1
    val >>= 1;
   210b0:	e1a020a1 	lsr	r2, r1, #1
    val |= (CY << 7);
   210b4:	e182238c 	orr	r2, r2, ip, lsl #7
   210b8:	e6af2072 	sxtb	r2, r2
	if (val)
   210bc:	e3110001 	tst	r1, #1
    val |= (CY << 7);
   210c0:	e6ef1072 	uxtb	r1, r2
	BR.F |= flag;
   210c4:	13833001 	orrne	r3, r3, #1
	BR.F &= ~flag;
   210c8:	020330fe 	andeq	r3, r3, #254	; 0xfe
	if (val)
   210cc:	e3110020 	tst	r1, #32
	BR.F |= flag;
   210d0:	13833020 	orrne	r3, r3, #32
	BR.F &= ~flag;
   210d4:	020330df 	andeq	r3, r3, #223	; 0xdf
	if (val)
   210d8:	e3110008 	tst	r1, #8
	BR.F |= flag;
   210dc:	13833008 	orrne	r3, r3, #8
	BR.F &= ~flag;
   210e0:	020330f7 	andeq	r3, r3, #247	; 0xf7
   210e4:	e6af3073 	sxtb	r3, r3
	if (val)
   210e8:	e3520000 	cmp	r2, #0
	BR.F |= flag;
   210ec:	e203306d 	and	r3, r3, #109	; 0x6d
   210f0:	b3833080 	orrlt	r3, r3, #128	; 0x80
	if (val)
   210f4:	e3510000 	cmp	r1, #0
	BR.F |= flag;
   210f8:	03832040 	orreq	r2, r3, #64	; 0x40
	if (val)
   210fc:	0a00000a 	beq	2112c <RR_E+0x88>
	VALFLAG(F_PV, parityBit[val]);
   21100:	e59f202c 	ldr	r2, [pc, #44]	; 21134 <RR_E+0x90>
	BR.F &= ~flag;
   21104:	e6af3073 	sxtb	r3, r3
	if (val)
   21108:	e792c101 	ldr	ip, [r2, r1, lsl #2]
	BR.F &= ~flag;
   2110c:	e20320ad 	and	r2, r3, #173	; 0xad
	if (val)
   21110:	e35c0000 	cmp	ip, #0
   21114:	e5c02000 	strb	r2, [r0]
	BR.F &= ~flag;
   21118:	020330a9 	andeq	r3, r3, #169	; 0xa9
	if (val)
   2111c:	1a000002 	bne	2112c <RR_E+0x88>
   21120:	e5c03000 	strb	r3, [r0]
   21124:	e5c01004 	strb	r1, [r0, #4]
}
   21128:	e12fff1e 	bx	lr
	BR.F |= flag;
   2112c:	e3823004 	orr	r3, r2, #4
   21130:	eafffffa 	b	21120 <RR_E+0x7c>
   21134:	0004f000 	.word	0x0004f000

00021138 <RRC_A>:
	BR.A = doRRC(ctx, 1, BR.A);
   21138:	e5d02001 	ldrb	r2, [r0, #1]
   2113c:	e5d03000 	ldrb	r3, [r0]
	if (val)
   21140:	e3120001 	tst	r2, #1
	BR.F |= flag;
   21144:	13e0107f 	mvnne	r1, #127	; 0x7f
   21148:	03a01000 	moveq	r1, #0
    val |= ((byte)GETFLAG(F_C) << 7);
   2114c:	e18110a2 	orr	r1, r1, r2, lsr #1
   21150:	e6ef2071 	uxtb	r2, r1
	BR.F |= flag;
   21154:	13833001 	orrne	r3, r3, #1
	BR.F &= ~flag;
   21158:	020330fe 	andeq	r3, r3, #254	; 0xfe
	if (val)
   2115c:	e3120020 	tst	r2, #32
   21160:	e5c03000 	strb	r3, [r0]
	BR.F |= flag;
   21164:	13833020 	orrne	r3, r3, #32
	BR.F &= ~flag;
   21168:	020330df 	andeq	r3, r3, #223	; 0xdf
	if (val)
   2116c:	e3120008 	tst	r2, #8
	BR.F |= flag;
   21170:	13833008 	orrne	r3, r3, #8
	BR.F &= ~flag;
   21174:	020330f7 	andeq	r3, r3, #247	; 0xf7
   21178:	e6af3073 	sxtb	r3, r3
	if (val)
   2117c:	e3510000 	cmp	r1, #0
	BR.F |= flag;
   21180:	e203306d 	and	r3, r3, #109	; 0x6d
   21184:	b3833080 	orrlt	r3, r3, #128	; 0x80
	if (val)
   21188:	e3520000 	cmp	r2, #0
	BR.F |= flag;
   2118c:	03831040 	orreq	r1, r3, #64	; 0x40
	if (val)
   21190:	0a00000a 	beq	211c0 <RRC_A+0x88>
	VALFLAG(F_PV, parityBit[val]);
   21194:	e59f102c 	ldr	r1, [pc, #44]	; 211c8 <RRC_A+0x90>
	BR.F &= ~flag;
   21198:	e6af3073 	sxtb	r3, r3
	if (val)
   2119c:	e791c102 	ldr	ip, [r1, r2, lsl #2]
	BR.F &= ~flag;
   211a0:	e20310ad 	and	r1, r3, #173	; 0xad
	if (val)
   211a4:	e35c0000 	cmp	ip, #0
   211a8:	e5c01000 	strb	r1, [r0]
	BR.F &= ~flag;
   211ac:	020330a9 	andeq	r3, r3, #169	; 0xa9
	if (val)
   211b0:	1a000002 	bne	211c0 <RRC_A+0x88>
   211b4:	e5c03000 	strb	r3, [r0]
   211b8:	e5c02001 	strb	r2, [r0, #1]
}
   211bc:	e12fff1e 	bx	lr
	BR.F |= flag;
   211c0:	e3813004 	orr	r3, r1, #4
   211c4:	eafffffa 	b	211b4 <RRC_A+0x7c>
   211c8:	0004f000 	.word	0x0004f000

000211cc <RR_L>:
{
   211cc:	e5d03000 	ldrb	r3, [r0]
	BR.L = doRR(ctx, 1, BR.L);
   211d0:	e5d01006 	ldrb	r1, [r0, #6]
	return (BR.F & flag) != 0;
   211d4:	e203c001 	and	ip, r3, #1
    val >>= 1;
   211d8:	e1a020a1 	lsr	r2, r1, #1
    val |= (CY << 7);
   211dc:	e182238c 	orr	r2, r2, ip, lsl #7
   211e0:	e6af2072 	sxtb	r2, r2
	if (val)
   211e4:	e3110001 	tst	r1, #1
    val |= (CY << 7);
   211e8:	e6ef1072 	uxtb	r1, r2
	BR.F |= flag;
   211ec:	13833001 	orrne	r3, r3, #1
	BR.F &= ~flag;
   211f0:	020330fe 	andeq	r3, r3, #254	; 0xfe
	if (val)
   211f4:	e3110020 	tst	r1, #32
	BR.F |= flag;
   211f8:	13833020 	orrne	r3, r3, #32
	BR.F &= ~flag;
   211fc:	020330df 	andeq	r3, r3, #223	; 0xdf
	if (val)
   21200:	e3110008 	tst	r1, #8
	BR.F |= flag;
   21204:	13833008 	orrne	r3, r3, #8
	BR.F &= ~flag;
   21208:	020330f7 	andeq	r3, r3, #247	; 0xf7
   2120c:	e6af3073 	sxtb	r3, r3
	if (val)
   21210:	e3520000 	cmp	r2, #0
	BR.F |= flag;
   21214:	e203306d 	and	r3, r3, #109	; 0x6d
   21218:	b3833080 	orrlt	r3, r3, #128	; 0x80
	if (val)
   2121c:	e3510000 	cmp	r1, #0
	BR.F |= flag;
   21220:	03832040 	orreq	r2, r3, #64	; 0x40
	if (val)
   21224:	0a00000a 	beq	21254 <RR_L+0x88>
	VALFLAG(F_PV, parityBit[val]);
   21228:	e59f202c 	ldr	r2, [pc, #44]	; 2125c <RR_L+0x90>
	BR.F &= ~flag;
   2122c:	e6af3073 	sxtb	r3, r3
	if (val)
   21230:	e792c101 	ldr	ip, [r2, r1, lsl #2]
	BR.F &= ~flag;
   21234:	e20320ad 	and	r2, r3, #173	; 0xad
	if (val)
   21238:	e35c0000 	cmp	ip, #0
   2123c:	e5c02000 	strb	r2, [r0]
	BR.F &= ~flag;
   21240:	020330a9 	andeq	r3, r3, #169	; 0xa9
	if (val)
   21244:	1a000002 	bne	21254 <RR_L+0x88>
   21248:	e5c03000 	strb	r3, [r0]
   2124c:	e5c01006 	strb	r1, [r0, #6]
}
   21250:	e12fff1e 	bx	lr
	BR.F |= flag;
   21254:	e3823004 	orr	r3, r2, #4
   21258:	eafffffa 	b	21248 <RR_L+0x7c>
   2125c:	0004f000 	.word	0x0004f000

00021260 <RR_A>:
{
   21260:	e5d03000 	ldrb	r3, [r0]
	BR.A = doRR(ctx, 1, BR.A);
   21264:	e5d01001 	ldrb	r1, [r0, #1]
	return (BR.F & flag) != 0;
   21268:	e203c001 	and	ip, r3, #1
    val >>= 1;
   2126c:	e1a020a1 	lsr	r2, r1, #1
    val |= (CY << 7);
   21270:	e182238c 	orr	r2, r2, ip, lsl #7
   21274:	e6af2072 	sxtb	r2, r2
	if (val)
   21278:	e3110001 	tst	r1, #1
    val |= (CY << 7);
   2127c:	e6ef1072 	uxtb	r1, r2
	BR.F |= flag;
   21280:	13833001 	orrne	r3, r3, #1
	BR.F &= ~flag;
   21284:	020330fe 	andeq	r3, r3, #254	; 0xfe
	if (val)
   21288:	e3110020 	tst	r1, #32
	BR.F |= flag;
   2128c:	13833020 	orrne	r3, r3, #32
	BR.F &= ~flag;
   21290:	020330df 	andeq	r3, r3, #223	; 0xdf
	if (val)
   21294:	e3110008 	tst	r1, #8
	BR.F |= flag;
   21298:	13833008 	orrne	r3, r3, #8
	BR.F &= ~flag;
   2129c:	020330f7 	andeq	r3, r3, #247	; 0xf7
   212a0:	e6af3073 	sxtb	r3, r3
	if (val)
   212a4:	e3520000 	cmp	r2, #0
	BR.F |= flag;
   212a8:	e203306d 	and	r3, r3, #109	; 0x6d
   212ac:	b3833080 	orrlt	r3, r3, #128	; 0x80
	if (val)
   212b0:	e3510000 	cmp	r1, #0
	BR.F |= flag;
   212b4:	03832040 	orreq	r2, r3, #64	; 0x40
	if (val)
   212b8:	0a00000a 	beq	212e8 <RR_A+0x88>
	VALFLAG(F_PV, parityBit[val]);
   212bc:	e59f202c 	ldr	r2, [pc, #44]	; 212f0 <RR_A+0x90>
	BR.F &= ~flag;
   212c0:	e6af3073 	sxtb	r3, r3
	if (val)
   212c4:	e792c101 	ldr	ip, [r2, r1, lsl #2]
	BR.F &= ~flag;
   212c8:	e20320ad 	and	r2, r3, #173	; 0xad
	if (val)
   212cc:	e35c0000 	cmp	ip, #0
   212d0:	e5c02000 	strb	r2, [r0]
	BR.F &= ~flag;
   212d4:	020330a9 	andeq	r3, r3, #169	; 0xa9
	if (val)
   212d8:	1a000002 	bne	212e8 <RR_A+0x88>
   212dc:	e5c03000 	strb	r3, [r0]
   212e0:	e5c01001 	strb	r1, [r0, #1]
}
   212e4:	e12fff1e 	bx	lr
	BR.F |= flag;
   212e8:	e3823004 	orr	r3, r2, #4
   212ec:	eafffffa 	b	212dc <RR_A+0x7c>
   212f0:	0004f000 	.word	0x0004f000

000212f4 <doSetRes>:
{
   212f4:	e3a00001 	mov	r0, #1
   212f8:	e1a02210 	lsl	r2, r0, r2
   212fc:	e6af2072 	sxtb	r2, r2
    if (bit)
   21300:	e3510000 	cmp	r1, #0
   21304:	e6af3073 	sxtb	r3, r3
		val |= (1 << pos);
   21308:	11822003 	orrne	r2, r2, r3
		val &= ~(1 << pos);
   2130c:	01c32002 	biceq	r2, r3, r2
   21310:	e6ef0072 	uxtb	r0, r2
}
   21314:	e12fff1e 	bx	lr

00021318 <Z80Execute>:
    }
}


void Z80Execute (Z80Context* ctx)
{
   21318:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
	if (ctx->nmi_req)
   2131c:	e5d03044 	ldrb	r3, [r0, #68]	; 0x44
{
   21320:	e1a04000 	mov	r4, r0
	if (ctx->nmi_req)
   21324:	e3530000 	cmp	r3, #0
   21328:	1a000048 	bne	21450 <Z80Execute+0x138>
		do_nmi(ctx);
	else if (ctx->int_req && !ctx->defer_int && ctx->IFF1)
   2132c:	e5d03045 	ldrb	r3, [r0, #69]	; 0x45
   21330:	e3530000 	cmp	r3, #0
   21334:	0a000005 	beq	21350 <Z80Execute+0x38>
   21338:	e5d03046 	ldrb	r3, [r0, #70]	; 0x46
   2133c:	e3530000 	cmp	r3, #0
   21340:	1a000002 	bne	21350 <Z80Execute+0x38>
   21344:	e5d02020 	ldrb	r2, [r0, #32]
   21348:	e3520000 	cmp	r2, #0
   2134c:	1a000053 	bne	214a0 <Z80Execute+0x188>
		do_int(ctx);
	else
	{
		ctx->defer_int = 0;
   21350:	e3a03000 	mov	r3, #0
			ctx->M1 = 1;
   21354:	e3a05001 	mov	r5, #1
	int offset = 0;
   21358:	e1a07003 	mov	r7, r3
   2135c:	e5941040 	ldr	r1, [r4, #64]	; 0x40
	struct Z80OpcodeEntry* entries = current->entries;
   21360:	e59f61dc 	ldr	r6, [pc, #476]	; 21544 <Z80Execute+0x22c>
		ctx->defer_int = 0;
   21364:	e5c43046 	strb	r3, [r4, #70]	; 0x46
   21368:	ea000026 	b	21408 <Z80Execute+0xf0>
			opcode = read8(ctx, ctx->PC + offset);
   2136c:	e1d411bc 	ldrh	r1, [r4, #28]
	ctx->tstates += 3;
   21370:	e5843040 	str	r3, [r4, #64]	; 0x40
			opcode = read8(ctx, ctx->PC + offset);
   21374:	e0811007 	add	r1, r1, r7
	return ctx->memRead(ctx->memParam, addr);	
   21378:	e6ff1071 	uxth	r1, r1
   2137c:	e5943024 	ldr	r3, [r4, #36]	; 0x24
			ctx->M1 = 1;
   21380:	e5c45023 	strb	r5, [r4, #35]	; 0x23
	return ctx->memRead(ctx->memParam, addr);	
   21384:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   21388:	e12fff33 	blx	r3
			ctx->PC++;
   2138c:	e1d431bc 	ldrh	r3, [r4, #28]
			ctx->tstates += 1;
   21390:	e5941040 	ldr	r1, [r4, #64]	; 0x40
			ctx->PC++;
   21394:	e2833001 	add	r3, r3, #1
			ctx->tstates += 1;
   21398:	e2811001 	add	r1, r1, #1
			ctx->M1 = 0;
   2139c:	e5c48023 	strb	r8, [r4, #35]	; 0x23
			ctx->PC++;
   213a0:	e1c431bc 	strh	r3, [r4, #28]
			ctx->tstates += 1;
   213a4:	e5841040 	str	r1, [r4, #64]	; 0x40
		INCR;
   213a8:	e5d4201e 	ldrb	r2, [r4, #30]
		func = entries[opcode].func;
   213ac:	e6bf0070 	sxth	r0, r0
		INCR;
   213b0:	e2823001 	add	r3, r2, #1
   213b4:	e203307f 	and	r3, r3, #127	; 0x7f
   213b8:	e3c2207f 	bic	r2, r2, #127	; 0x7f
   213bc:	e1833002 	orr	r3, r3, r2
   213c0:	e6af3073 	sxtb	r3, r3
   213c4:	e6ef2073 	uxtb	r2, r3
   213c8:	e5c4201e 	strb	r2, [r4, #30]
		func = entries[opcode].func;
   213cc:	e7968200 	ldr	r8, [r6, r0, lsl #4]
				DECR;
   213d0:	e2422001 	sub	r2, r2, #1
   213d4:	e202207f 	and	r2, r2, #127	; 0x7f
   213d8:	e3c3307f 	bic	r3, r3, #127	; 0x7f
		if (func != NULL)
   213dc:	e3580000 	cmp	r8, #0
				DECR;
   213e0:	e1823003 	orr	r3, r2, r3
		func = entries[opcode].func;
   213e4:	e0860200 	add	r0, r6, r0, lsl #4
		if (func != NULL)
   213e8:	1a00000e 	bne	21428 <Z80Execute+0x110>
		else if (entries[opcode].table != NULL)
   213ec:	e590600c 	ldr	r6, [r0, #12]
   213f0:	e3560000 	cmp	r6, #0
   213f4:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
			offset = current->opcode_offset;
   213f8:	e5967000 	ldr	r7, [r6]
			entries = current->entries;
   213fc:	e2866004 	add	r6, r6, #4
			if (offset > 0)
   21400:	e3570000 	cmp	r7, #0
				DECR;
   21404:	c5c4301e 	strbgt	r3, [r4, #30]
		if (ctx->exec_int_vector)
   21408:	e5d48048 	ldrb	r8, [r4, #72]	; 0x48
	ctx->tstates += 3;
   2140c:	e2813003 	add	r3, r1, #3
		if (ctx->exec_int_vector)
   21410:	e3580000 	cmp	r8, #0
   21414:	0affffd4 	beq	2136c <Z80Execute+0x54>
			ctx->tstates += 6;
   21418:	e2811006 	add	r1, r1, #6
   2141c:	e5841040 	str	r1, [r4, #64]	; 0x40
			opcode = ctx->int_vector;
   21420:	e5d40047 	ldrb	r0, [r4, #71]	; 0x47
   21424:	eaffffdf 	b	213a8 <Z80Execute+0x90>
			ctx->PC -= offset;
   21428:	e1d431bc 	ldrh	r3, [r4, #28]
   2142c:	e6ff7077 	uxth	r7, r7
   21430:	e0433007 	sub	r3, r3, r7
   21434:	e1c431bc 	strh	r3, [r4, #28]
			func(ctx);
   21438:	e1a00004 	mov	r0, r4
   2143c:	e12fff38 	blx	r8
			ctx->PC += offset;
   21440:	e1d431bc 	ldrh	r3, [r4, #28]
   21444:	e0877003 	add	r7, r7, r3
   21448:	e1c471bc 	strh	r7, [r4, #28]
   2144c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    if (ctx->halted)
   21450:	e5d0303c 	ldrb	r3, [r0, #60]	; 0x3c
	ctx->IFF1 = 0;
   21454:	e3a05000 	mov	r5, #0
    if (ctx->halted)
   21458:	e3530000 	cmp	r3, #0
        ctx->halted = 0;
   2145c:	13a02000 	movne	r2, #0
        ctx->PC++;
   21460:	11d031bc 	ldrhne	r3, [r0, #28]
        ctx->halted = 0;
   21464:	15c0203c 	strbne	r2, [r0, #60]	; 0x3c
        ctx->PC++;
   21468:	12833001 	addne	r3, r3, #1
   2146c:	11c031bc 	strhne	r3, [r0, #28]
	ctx->IFF2 = ctx->IFF1;
   21470:	e5d03020 	ldrb	r3, [r0, #32]
    doPush(ctx, ctx->PC);
   21474:	e1d011bc 	ldrh	r1, [r0, #28]
	ctx->IFF2 = ctx->IFF1;
   21478:	e5c03021 	strb	r3, [r0, #33]	; 0x21
	ctx->IFF1 = 0;
   2147c:	e5c05020 	strb	r5, [r0, #32]
    doPush(ctx, ctx->PC);
   21480:	ebff9bd5 	bl	83dc <doPush>
	ctx->PC = 0x0066;	
   21484:	e3a02066 	mov	r2, #102	; 0x66
	ctx->tstates += 5;
   21488:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	ctx->nmi_req = 0;
   2148c:	e5c45044 	strb	r5, [r4, #68]	; 0x44
	ctx->tstates += 5;
   21490:	e2833005 	add	r3, r3, #5
   21494:	e5843040 	str	r3, [r4, #64]	; 0x40
	ctx->PC = 0x0066;	
   21498:	e1c421bc 	strh	r2, [r4, #28]
   2149c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    if (ctx->halted)
   214a0:	e5d0203c 	ldrb	r2, [r0, #60]	; 0x3c
    if (ctx->IM == 0)
   214a4:	e5d05022 	ldrb	r5, [r0, #34]	; 0x22
    if (ctx->halted)
   214a8:	e3520000 	cmp	r2, #0
        ctx->PC++;
   214ac:	11d021bc 	ldrhne	r2, [r0, #28]
        ctx->halted = 0;
   214b0:	15c0303c 	strbne	r3, [r0, #60]	; 0x3c
        ctx->PC++;
   214b4:	12823001 	addne	r3, r2, #1
   214b8:	11c031bc 	strhne	r3, [r0, #28]
	ctx->IFF1 = 0;
   214bc:	e3a03000 	mov	r3, #0
    if (ctx->IM == 0)
   214c0:	e1550003 	cmp	r5, r3
	ctx->IFF1 = 0;
   214c4:	e1c032b0 	strh	r3, [r0, #32]
	ctx->int_req = 0;
   214c8:	e5c03045 	strb	r3, [r0, #69]	; 0x45
    if (ctx->IM == 0)
   214cc:	0a00000f 	beq	21510 <Z80Execute+0x1f8>
    else if (ctx->IM == 1)
   214d0:	e3550001 	cmp	r5, #1
   214d4:	0a000012 	beq	21524 <Z80Execute+0x20c>
    else if (ctx->IM == 2)
   214d8:	e3550002 	cmp	r5, #2
   214dc:	18bd81f0 	popne	{r4, r5, r6, r7, r8, pc}
        doPush(ctx, ctx->PC);
   214e0:	e1d011bc 	ldrh	r1, [r0, #28]
   214e4:	ebff9bbc 	bl	83dc <doPush>
		ushort vector_address = (ctx->I << 8) | ctx->int_vector;
   214e8:	e5d43047 	ldrb	r3, [r4, #71]	; 0x47
   214ec:	e5d4101f 	ldrb	r1, [r4, #31]
		ctx->PC = read16(ctx, vector_address);
   214f0:	e1a00004 	mov	r0, r4
   214f4:	e1831401 	orr	r1, r3, r1, lsl #8
   214f8:	ebff9b6b 	bl	82ac <read16>
		ctx->tstates += 7;
   214fc:	e5943040 	ldr	r3, [r4, #64]	; 0x40
		ctx->PC = read16(ctx, vector_address);
   21500:	e1c401bc 	strh	r0, [r4, #28]
		ctx->tstates += 7;
   21504:	e2833007 	add	r3, r3, #7
   21508:	e5843040 	str	r3, [r4, #64]	; 0x40
   2150c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
		ctx->exec_int_vector = 1;
   21510:	e3a03001 	mov	r3, #1
   21514:	e5c03048 	strb	r3, [r0, #72]	; 0x48
		do_execute(ctx);
   21518:	ebffc864 	bl	136b0 <do_execute>
		ctx->exec_int_vector = 0;
   2151c:	e5c45048 	strb	r5, [r4, #72]	; 0x48
   21520:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
        doPush(ctx, ctx->PC);
   21524:	e1d011bc 	ldrh	r1, [r0, #28]
   21528:	ebff9bab 	bl	83dc <doPush>
        ctx->PC = 0x0038;
   2152c:	e3a02038 	mov	r2, #56	; 0x38
		ctx->tstates += 7;
   21530:	e5943040 	ldr	r3, [r4, #64]	; 0x40
        ctx->PC = 0x0038;
   21534:	e1c421bc 	strh	r2, [r4, #28]
		ctx->tstates += 7;
   21538:	e2833007 	add	r3, r3, #7
   2153c:	e5843040 	str	r3, [r4, #64]	; 0x40
   21540:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   21544:	00061a58 	.word	0x00061a58

00021548 <Z80ExecuteTStates>:
	}
}


unsigned Z80ExecuteTStates(Z80Context* ctx, unsigned tstates)
{
   21548:	e92d4ff8 	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	ctx->tstates = 0;
   2154c:	e3a03000 	mov	r3, #0
{
   21550:	e1a04000 	mov	r4, r0
	while (ctx->tstates < tstates)
   21554:	e1a02003 	mov	r2, r3
{
   21558:	e1a07001 	mov	r7, r1
		ctx->defer_int = 0;
   2155c:	e1a06003 	mov	r6, r3
	struct Z80OpcodeEntry* entries = current->entries;
   21560:	e59f8288 	ldr	r8, [pc, #648]	; 217f0 <Z80ExecuteTStates+0x2a8>
	ctx->tstates = 0;
   21564:	e5803040 	str	r3, [r0, #64]	; 0x40
	while (ctx->tstates < tstates)
   21568:	e1570002 	cmp	r7, r2
   2156c:	9a00004b 	bls	216a0 <Z80ExecuteTStates+0x158>
	if (ctx->nmi_req)
   21570:	e5d43044 	ldrb	r3, [r4, #68]	; 0x44
   21574:	e3530000 	cmp	r3, #0
   21578:	1a00004a 	bne	216a8 <Z80ExecuteTStates+0x160>
	else if (ctx->int_req && !ctx->defer_int && ctx->IFF1)
   2157c:	e5d43045 	ldrb	r3, [r4, #69]	; 0x45
   21580:	e3530000 	cmp	r3, #0
   21584:	0a000005 	beq	215a0 <Z80ExecuteTStates+0x58>
   21588:	e5d43046 	ldrb	r3, [r4, #70]	; 0x46
   2158c:	e3530000 	cmp	r3, #0
   21590:	1a000002 	bne	215a0 <Z80ExecuteTStates+0x58>
   21594:	e5d41020 	ldrb	r1, [r4, #32]
   21598:	e3510000 	cmp	r1, #0
   2159c:	1a000067 	bne	21740 <Z80ExecuteTStates+0x1f8>
	int offset = 0;
   215a0:	e3a0a000 	mov	sl, #0
	struct Z80OpcodeEntry* entries = current->entries;
   215a4:	e1a09008 	mov	r9, r8
			ctx->M1 = 1;
   215a8:	e3a05001 	mov	r5, #1
		ctx->defer_int = 0;
   215ac:	e5c46046 	strb	r6, [r4, #70]	; 0x46
   215b0:	ea000026 	b	21650 <Z80ExecuteTStates+0x108>
			opcode = read8(ctx, ctx->PC + offset);
   215b4:	e1d411bc 	ldrh	r1, [r4, #28]
	ctx->tstates += 3;
   215b8:	e5843040 	str	r3, [r4, #64]	; 0x40
			opcode = read8(ctx, ctx->PC + offset);
   215bc:	e081100a 	add	r1, r1, sl
	return ctx->memRead(ctx->memParam, addr);	
   215c0:	e5943024 	ldr	r3, [r4, #36]	; 0x24
			ctx->M1 = 1;
   215c4:	e5c45023 	strb	r5, [r4, #35]	; 0x23
	return ctx->memRead(ctx->memParam, addr);	
   215c8:	e6ff1071 	uxth	r1, r1
   215cc:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   215d0:	e12fff33 	blx	r3
			ctx->PC++;
   215d4:	e1d431bc 	ldrh	r3, [r4, #28]
			ctx->tstates += 1;
   215d8:	e5942040 	ldr	r2, [r4, #64]	; 0x40
			ctx->PC++;
   215dc:	e2833001 	add	r3, r3, #1
			ctx->tstates += 1;
   215e0:	e2822001 	add	r2, r2, #1
			ctx->M1 = 0;
   215e4:	e5c4b023 	strb	fp, [r4, #35]	; 0x23
			ctx->PC++;
   215e8:	e1c431bc 	strh	r3, [r4, #28]
			ctx->tstates += 1;
   215ec:	e5842040 	str	r2, [r4, #64]	; 0x40
		INCR;
   215f0:	e5d4101e 	ldrb	r1, [r4, #30]
		func = entries[opcode].func;
   215f4:	e6bf0070 	sxth	r0, r0
		INCR;
   215f8:	e2813001 	add	r3, r1, #1
   215fc:	e203307f 	and	r3, r3, #127	; 0x7f
   21600:	e3c1107f 	bic	r1, r1, #127	; 0x7f
   21604:	e1833001 	orr	r3, r3, r1
   21608:	e6af3073 	sxtb	r3, r3
   2160c:	e6efc073 	uxtb	ip, r3
   21610:	e5c4c01e 	strb	ip, [r4, #30]
		func = entries[opcode].func;
   21614:	e7991200 	ldr	r1, [r9, r0, lsl #4]
				DECR;
   21618:	e24cc001 	sub	ip, ip, #1
   2161c:	e20cc07f 	and	ip, ip, #127	; 0x7f
   21620:	e3c3307f 	bic	r3, r3, #127	; 0x7f
		if (func != NULL)
   21624:	e3510000 	cmp	r1, #0
				DECR;
   21628:	e18c3003 	orr	r3, ip, r3
		func = entries[opcode].func;
   2162c:	e0890200 	add	r0, r9, r0, lsl #4
		if (func != NULL)
   21630:	1a00000e 	bne	21670 <Z80ExecuteTStates+0x128>
		else if (entries[opcode].table != NULL)
   21634:	e590900c 	ldr	r9, [r0, #12]
   21638:	e3590000 	cmp	r9, #0
   2163c:	0affffc9 	beq	21568 <Z80ExecuteTStates+0x20>
			offset = current->opcode_offset;
   21640:	e599a000 	ldr	sl, [r9]
			entries = current->entries;
   21644:	e2899004 	add	r9, r9, #4
			if (offset > 0)
   21648:	e35a0000 	cmp	sl, #0
				DECR;
   2164c:	c5c4301e 	strbgt	r3, [r4, #30]
		if (ctx->exec_int_vector)
   21650:	e5d4b048 	ldrb	fp, [r4, #72]	; 0x48
	ctx->tstates += 3;
   21654:	e2823003 	add	r3, r2, #3
		if (ctx->exec_int_vector)
   21658:	e35b0000 	cmp	fp, #0
   2165c:	0affffd4 	beq	215b4 <Z80ExecuteTStates+0x6c>
			ctx->tstates += 6;
   21660:	e2822006 	add	r2, r2, #6
   21664:	e5842040 	str	r2, [r4, #64]	; 0x40
			opcode = ctx->int_vector;
   21668:	e5d40047 	ldrb	r0, [r4, #71]	; 0x47
   2166c:	eaffffdf 	b	215f0 <Z80ExecuteTStates+0xa8>
			ctx->PC -= offset;
   21670:	e1d431bc 	ldrh	r3, [r4, #28]
   21674:	e6ffa07a 	uxth	sl, sl
   21678:	e043300a 	sub	r3, r3, sl
   2167c:	e1c431bc 	strh	r3, [r4, #28]
			func(ctx);
   21680:	e1a00004 	mov	r0, r4
   21684:	e12fff31 	blx	r1
			ctx->PC += offset;
   21688:	e1d431bc 	ldrh	r3, [r4, #28]
   2168c:	e5942040 	ldr	r2, [r4, #64]	; 0x40
   21690:	e08aa003 	add	sl, sl, r3
	while (ctx->tstates < tstates)
   21694:	e1570002 	cmp	r7, r2
			ctx->PC += offset;
   21698:	e1c4a1bc 	strh	sl, [r4, #28]
	while (ctx->tstates < tstates)
   2169c:	8affffb3 	bhi	21570 <Z80ExecuteTStates+0x28>
		Z80Execute(ctx);
	return ctx->tstates;
}
   216a0:	e1a00002 	mov	r0, r2
   216a4:	e8bd8ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (ctx->halted)
   216a8:	e5d4303c 	ldrb	r3, [r4, #60]	; 0x3c
   216ac:	e1d451bc 	ldrh	r5, [r4, #28]
	WR.SP--;
   216b0:	e1d410bc 	ldrh	r1, [r4, #12]
    if (ctx->halted)
   216b4:	e3530000 	cmp	r3, #0
        ctx->PC++;
   216b8:	12855001 	addne	r5, r5, #1
	ctx->IFF2 = ctx->IFF1;
   216bc:	e5d43020 	ldrb	r3, [r4, #32]
	WR.SP--;
   216c0:	e2411001 	sub	r1, r1, #1
        ctx->PC++;
   216c4:	16ff5075 	uxthne	r5, r5
	WR.SP--;
   216c8:	e6ff1071 	uxth	r1, r1
	ctx->tstates += 3;
   216cc:	e2822003 	add	r2, r2, #3
        ctx->PC++;
   216d0:	11c451bc 	strhne	r5, [r4, #28]
        ctx->halted = 0;
   216d4:	15c4603c 	strbne	r6, [r4, #60]	; 0x3c
	ctx->tstates += 3;
   216d8:	e5842040 	str	r2, [r4, #64]	; 0x40
	WR.SP--;
   216dc:	e1c410bc 	strh	r1, [r4, #12]
	ctx->IFF2 = ctx->IFF1;
   216e0:	e5c43021 	strb	r3, [r4, #33]	; 0x21
	ctx->memWrite(ctx->memParam, addr, val);	
   216e4:	e1a02425 	lsr	r2, r5, #8
   216e8:	e5943028 	ldr	r3, [r4, #40]	; 0x28
   216ec:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
	ctx->IFF1 = 0;
   216f0:	e5c46020 	strb	r6, [r4, #32]
	ctx->memWrite(ctx->memParam, addr, val);	
   216f4:	e12fff33 	blx	r3
	WR.SP--;
   216f8:	e1d410bc 	ldrh	r1, [r4, #12]
	ctx->tstates += 3;
   216fc:	e5943040 	ldr	r3, [r4, #64]	; 0x40
	WR.SP--;
   21700:	e2411001 	sub	r1, r1, #1
   21704:	e6ff1071 	uxth	r1, r1
	ctx->tstates += 3;
   21708:	e2833003 	add	r3, r3, #3
	ctx->memWrite(ctx->memParam, addr, val);	
   2170c:	e6ef2075 	uxtb	r2, r5
	ctx->tstates += 3;
   21710:	e5843040 	str	r3, [r4, #64]	; 0x40
	WR.SP--;
   21714:	e1c410bc 	strh	r1, [r4, #12]
	ctx->memWrite(ctx->memParam, addr, val);	
   21718:	e5943028 	ldr	r3, [r4, #40]	; 0x28
   2171c:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   21720:	e12fff33 	blx	r3
	ctx->PC = 0x0066;	
   21724:	e3a03066 	mov	r3, #102	; 0x66
	ctx->tstates += 5;
   21728:	e5942040 	ldr	r2, [r4, #64]	; 0x40
	ctx->nmi_req = 0;
   2172c:	e5c46044 	strb	r6, [r4, #68]	; 0x44
	ctx->tstates += 5;
   21730:	e2822005 	add	r2, r2, #5
   21734:	e5842040 	str	r2, [r4, #64]	; 0x40
	ctx->PC = 0x0066;	
   21738:	e1c431bc 	strh	r3, [r4, #28]
   2173c:	eaffff89 	b	21568 <Z80ExecuteTStates+0x20>
    if (ctx->halted)
   21740:	e5d4103c 	ldrb	r1, [r4, #60]	; 0x3c
    if (ctx->IM == 0)
   21744:	e5d45022 	ldrb	r5, [r4, #34]	; 0x22
    if (ctx->halted)
   21748:	e3510000 	cmp	r1, #0
        ctx->PC++;
   2174c:	11d411bc 	ldrhne	r1, [r4, #28]
        ctx->halted = 0;
   21750:	15c4303c 	strbne	r3, [r4, #60]	; 0x3c
        ctx->PC++;
   21754:	12813001 	addne	r3, r1, #1
   21758:	11c431bc 	strhne	r3, [r4, #28]
    if (ctx->IM == 0)
   2175c:	e3550000 	cmp	r5, #0
	ctx->IFF1 = 0;
   21760:	e1c462b0 	strh	r6, [r4, #32]
	ctx->int_req = 0;
   21764:	e5c46045 	strb	r6, [r4, #69]	; 0x45
    if (ctx->IM == 0)
   21768:	0a000010 	beq	217b0 <Z80ExecuteTStates+0x268>
    else if (ctx->IM == 1)
   2176c:	e3550001 	cmp	r5, #1
   21770:	0a000015 	beq	217cc <Z80ExecuteTStates+0x284>
    else if (ctx->IM == 2)
   21774:	e3550002 	cmp	r5, #2
   21778:	1affff7a 	bne	21568 <Z80ExecuteTStates+0x20>
        doPush(ctx, ctx->PC);
   2177c:	e1d411bc 	ldrh	r1, [r4, #28]
   21780:	e1a00004 	mov	r0, r4
   21784:	ebff9b14 	bl	83dc <doPush>
		ushort vector_address = (ctx->I << 8) | ctx->int_vector;
   21788:	e5d4101f 	ldrb	r1, [r4, #31]
   2178c:	e5d43047 	ldrb	r3, [r4, #71]	; 0x47
		ctx->PC = read16(ctx, vector_address);
   21790:	e1a00004 	mov	r0, r4
   21794:	e1831401 	orr	r1, r3, r1, lsl #8
   21798:	ebff9ac3 	bl	82ac <read16>
		ctx->tstates += 7;
   2179c:	e5942040 	ldr	r2, [r4, #64]	; 0x40
		ctx->PC = read16(ctx, vector_address);
   217a0:	e1c401bc 	strh	r0, [r4, #28]
		ctx->tstates += 7;
   217a4:	e2822007 	add	r2, r2, #7
   217a8:	e5842040 	str	r2, [r4, #64]	; 0x40
   217ac:	eaffff6d 	b	21568 <Z80ExecuteTStates+0x20>
		ctx->exec_int_vector = 1;
   217b0:	e3a03001 	mov	r3, #1
		do_execute(ctx);
   217b4:	e1a00004 	mov	r0, r4
		ctx->exec_int_vector = 1;
   217b8:	e5c43048 	strb	r3, [r4, #72]	; 0x48
		do_execute(ctx);
   217bc:	ebffc7bb 	bl	136b0 <do_execute>
		ctx->exec_int_vector = 0;
   217c0:	e5c45048 	strb	r5, [r4, #72]	; 0x48
   217c4:	e5942040 	ldr	r2, [r4, #64]	; 0x40
   217c8:	eaffff66 	b	21568 <Z80ExecuteTStates+0x20>
        doPush(ctx, ctx->PC);
   217cc:	e1d411bc 	ldrh	r1, [r4, #28]
   217d0:	e1a00004 	mov	r0, r4
   217d4:	ebff9b00 	bl	83dc <doPush>
        ctx->PC = 0x0038;
   217d8:	e3a03038 	mov	r3, #56	; 0x38
		ctx->tstates += 7;
   217dc:	e5942040 	ldr	r2, [r4, #64]	; 0x40
        ctx->PC = 0x0038;
   217e0:	e1c431bc 	strh	r3, [r4, #28]
		ctx->tstates += 7;
   217e4:	e2822007 	add	r2, r2, #7
   217e8:	e5842040 	str	r2, [r4, #64]	; 0x40
   217ec:	eaffff5d 	b	21568 <Z80ExecuteTStates+0x20>
   217f0:	00061a58 	.word	0x00061a58

000217f4 <Z80Debug>:


void Z80Debug (Z80Context* ctx, char* dump, char* decode)
{
   217f4:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
	ushort parm;
	int offset = 0;
	int PC = ctx->PC;
	int size = 0;
	
	if (dump)
   217f8:	e2517000 	subs	r7, r1, #0
		dump[0] = 0;
   217fc:	13a03000 	movne	r3, #0
	int PC = ctx->PC;
   21800:	e1d061bc 	ldrh	r6, [r0, #28]
		dump[0] = 0;
   21804:	15c73000 	strbne	r3, [r7]
		
	if (decode)
   21808:	e3520000 	cmp	r2, #0
		decode[0] = 0;
   2180c:	13a03000 	movne	r3, #0
{
   21810:	e3a09000 	mov	r9, #0
   21814:	e24dd024 	sub	sp, sp, #36	; 0x24
   21818:	e1a04000 	mov	r4, r0
   2181c:	e1a08002 	mov	r8, r2
		decode[0] = 0;
   21820:	15c23000 	strbne	r3, [r2]
{
   21824:	e1a0a009 	mov	sl, r9
   21828:	e59f5138 	ldr	r5, [pc, #312]	; 21968 <Z80Debug+0x174>
   2182c:	ea000005 	b	21848 <Z80Debug+0x54>
				ee_sprintf(decode, fmt, parm);
			
			PC += offset;
			break;
		}
		else if (entries[opcode].table != NULL)
   21830:	e595300c 	ldr	r3, [r5, #12]
   21834:	e3530000 	cmp	r3, #0
   21838:	0a000040 	beq	21940 <Z80Debug+0x14c>
		size++;
   2183c:	e1a0900b 	mov	r9, fp
		{
			current = entries[opcode].table;
			entries = current->entries;
			offset = current->opcode_offset;
   21840:	e593a000 	ldr	sl, [r3]
			entries = current->entries;
   21844:	e2835004 	add	r5, r3, #4
	ctx->tstates += 3;
   21848:	e5943040 	ldr	r3, [r4, #64]	; 0x40
		opcode = read8(ctx, PC + offset);
   2184c:	e086100a 	add	r1, r6, sl
	ctx->tstates += 3;
   21850:	e2833003 	add	r3, r3, #3
   21854:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   21858:	e6ff1071 	uxth	r1, r1
   2185c:	e5943024 	ldr	r3, [r4, #36]	; 0x24
   21860:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   21864:	e12fff33 	blx	r3
		fmt = entries[opcode].format;
   21868:	e6bf0070 	sxth	r0, r0
   2186c:	e0855200 	add	r5, r5, r0, lsl #4
   21870:	e5953008 	ldr	r3, [r5, #8]
		PC++;
   21874:	e2866001 	add	r6, r6, #1
		if (fmt != NULL)
   21878:	e3530000 	cmp	r3, #0
		size++;
   2187c:	e289b001 	add	fp, r9, #1
		if (fmt != NULL)
   21880:	0affffea 	beq	21830 <Z80Debug+0x3c>
			PC -= offset;
   21884:	e046100a 	sub	r1, r6, sl
			parm = read16(ctx, PC);
   21888:	e6ff1071 	uxth	r1, r1
   2188c:	e1a00004 	mov	r0, r4
   21890:	e58d3004 	str	r3, [sp, #4]
   21894:	ebff9a84 	bl	82ac <read16>
			if (entries[opcode].operand_type == OP_NONE)
   21898:	e5952004 	ldr	r2, [r5, #4]
   2189c:	e59d3004 	ldr	r3, [sp, #4]
   218a0:	e3520000 	cmp	r2, #0
				size++;
   218a4:	0289b002 	addeq	fp, r9, #2
			if (entries[opcode].operand_type == OP_NONE)
   218a8:	1a000020 	bne	21930 <Z80Debug+0x13c>
				parm &= 0xFF;
   218ac:	e6ef0070 	uxtb	r0, r0
				size--;
   218b0:	e24bb001 	sub	fp, fp, #1
			if (decode)
   218b4:	e3580000 	cmp	r8, #0
   218b8:	0a000003 	beq	218cc <Z80Debug+0xd8>
				ee_sprintf(decode, fmt, parm);
   218bc:	e1a02000 	mov	r2, r0
   218c0:	e1a01003 	mov	r1, r3
   218c4:	e1a00008 	mov	r0, r8
   218c8:	eb000537 	bl	22dac <ee_sprintf>
				strcpy(decode, "NOP (ignored)");
			break;	
		}
	} while(1);	
	
	if (dump)
   218cc:	e3570000 	cmp	r7, #0
   218d0:	0a000014 	beq	21928 <Z80Debug+0x134>
	{
		for (offset = 0; offset < size; offset++)
   218d4:	e3a06000 	mov	r6, #0
		{
			ee_sprintf(tmp, "%02X", read8(ctx, ctx->PC + offset));
   218d8:	e59f508c 	ldr	r5, [pc, #140]	; 2196c <Z80Debug+0x178>
	ctx->tstates += 3;
   218dc:	e5943040 	ldr	r3, [r4, #64]	; 0x40
			ee_sprintf(tmp, "%02X", read8(ctx, ctx->PC + offset));
   218e0:	e1d411bc 	ldrh	r1, [r4, #28]
	ctx->tstates += 3;
   218e4:	e2833003 	add	r3, r3, #3
			ee_sprintf(tmp, "%02X", read8(ctx, ctx->PC + offset));
   218e8:	e0811006 	add	r1, r1, r6
	return ctx->memRead(ctx->memParam, addr);	
   218ec:	e6ff1071 	uxth	r1, r1
	ctx->tstates += 3;
   218f0:	e5843040 	str	r3, [r4, #64]	; 0x40
	return ctx->memRead(ctx->memParam, addr);	
   218f4:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   218f8:	e5943024 	ldr	r3, [r4, #36]	; 0x24
   218fc:	e12fff33 	blx	r3
			ee_sprintf(tmp, "%02X", read8(ctx, ctx->PC + offset));
   21900:	e1a01005 	mov	r1, r5
   21904:	e1a02000 	mov	r2, r0
   21908:	e28d000c 	add	r0, sp, #12
   2190c:	eb000526 	bl	22dac <ee_sprintf>
		for (offset = 0; offset < size; offset++)
   21910:	e2866001 	add	r6, r6, #1
			strcat(dump, tmp);
   21914:	e28d100c 	add	r1, sp, #12
   21918:	e1a00007 	mov	r0, r7
   2191c:	eb00adb6 	bl	4cffc <strcat>
		for (offset = 0; offset < size; offset++)
   21920:	e15b0006 	cmp	fp, r6
   21924:	1affffec 	bne	218dc <Z80Debug+0xe8>
		}		
	}
}
   21928:	e28dd024 	add	sp, sp, #36	; 0x24
   2192c:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (entries[opcode].operand_type != OP_WORD)
   21930:	e3520003 	cmp	r2, #3
				size += 2;
   21934:	e289b003 	add	fp, r9, #3
			if (entries[opcode].operand_type != OP_WORD)
   21938:	0affffdd 	beq	218b4 <Z80Debug+0xc0>
   2193c:	eaffffda 	b	218ac <Z80Debug+0xb8>
			if (decode != NULL)
   21940:	e3580000 	cmp	r8, #0
   21944:	0affffe0 	beq	218cc <Z80Debug+0xd8>
				strcpy(decode, "NOP (ignored)");
   21948:	e59f3020 	ldr	r3, [pc, #32]	; 21970 <Z80Debug+0x17c>
   2194c:	e8b30007 	ldm	r3!, {r0, r1, r2}
   21950:	e1d330b0 	ldrh	r3, [r3]
   21954:	e5880000 	str	r0, [r8]
   21958:	e1c830bc 	strh	r3, [r8, #12]
   2195c:	e5881004 	str	r1, [r8, #4]
   21960:	e5882008 	str	r2, [r8, #8]
   21964:	eaffffd8 	b	218cc <Z80Debug+0xd8>
   21968:	00061a58 	.word	0x00061a58
   2196c:	0004f410 	.word	0x0004f410
   21970:	0004f400 	.word	0x0004f400

00021974 <Z80RESET>:


void Z80RESET (Z80Context* ctx)
{
	ctx->PC = 0x0000;
	BR.F = 0;
   21974:	e3a03000 	mov	r3, #0
   21978:	e5c03000 	strb	r3, [r0]
	ctx->IM = 0;
	ctx->IFF1 = ctx->IFF2 = 0;
	ctx->R = 0;
	ctx->I = 0;
	ctx->halted = 0;
   2197c:	e5c0303c 	strb	r3, [r0, #60]	; 0x3c
	ctx->tstates = 0;
   21980:	e5803040 	str	r3, [r0, #64]	; 0x40
   21984:	e1c034b4 	strh	r3, [r0, #68]	; 0x44
	ctx->nmi_req = 0;
	ctx->int_req = 0;
   21988:	e5c03046 	strb	r3, [r0, #70]	; 0x46
	ctx->defer_int = 0;
	ctx->exec_int_vector = 0;
   2198c:	e5c03048 	strb	r3, [r0, #72]	; 0x48
	ctx->PC = 0x0000;
   21990:	e580301c 	str	r3, [r0, #28]
	ctx->R = 0;
   21994:	e5803020 	str	r3, [r0, #32]
	ctx->M1 = 0;
}
   21998:	e12fff1e 	bx	lr

0002199c <Z80INT>:


void Z80INT (Z80Context* ctx, byte value)
{
	ctx->int_req = 1;
   2199c:	e3a03001 	mov	r3, #1
	ctx->int_vector = value;
   219a0:	e5c01047 	strb	r1, [r0, #71]	; 0x47
	ctx->int_req = 1;
   219a4:	e5c03045 	strb	r3, [r0, #69]	; 0x45
}
   219a8:	e12fff1e 	bx	lr

000219ac <Z80NMI>:


void Z80NMI (Z80Context* ctx)
{
	ctx->nmi_req = 1;
   219ac:	e3a03001 	mov	r3, #1
   219b0:	e5c03044 	strb	r3, [r0, #68]	; 0x44
}
   219b4:	e12fff1e 	bx	lr

000219b8 <ee_strnlen>:
static size_t ee_strnlen(const char* s, size_t count);

static size_t ee_strnlen(const char* s, size_t count)
{
    const char* sc;
    for (sc = s; *sc != '\0' && count--; ++sc)
   219b8:	e5d03000 	ldrb	r3, [r0]
   219bc:	e1a02000 	mov	r2, r0
   219c0:	e3530000 	cmp	r3, #0
   219c4:	0a00000a 	beq	219f4 <ee_strnlen+0x3c>
   219c8:	e3510000 	cmp	r1, #0
   219cc:	0a00000a 	beq	219fc <ee_strnlen+0x44>
   219d0:	e0801001 	add	r1, r0, r1
   219d4:	ea000001 	b	219e0 <ee_strnlen+0x28>
   219d8:	e1500001 	cmp	r0, r1
   219dc:	0a000002 	beq	219ec <ee_strnlen+0x34>
   219e0:	e5f03001 	ldrb	r3, [r0, #1]!
   219e4:	e3530000 	cmp	r3, #0
   219e8:	1afffffa 	bne	219d8 <ee_strnlen+0x20>
   219ec:	e0400002 	sub	r0, r0, r2
   219f0:	e12fff1e 	bx	lr
   219f4:	e1a00003 	mov	r0, r3
   219f8:	e12fff1e 	bx	lr
   219fc:	e1a00001 	mov	r0, r1
        ;
    return sc - s;
}
   21a00:	e12fff1e 	bx	lr

00021a04 <ee_skip_atoi>:

static int ee_skip_atoi(const char** s)
{
    int i = 0;
    while (is_digit(**s))
   21a04:	e5903000 	ldr	r3, [r0]
   21a08:	e5d32000 	ldrb	r2, [r3]
   21a0c:	e2422030 	sub	r2, r2, #48	; 0x30
   21a10:	e3520009 	cmp	r2, #9
    int i = 0;
   21a14:	e3a02000 	mov	r2, #0
    while (is_digit(**s))
   21a18:	8a000009 	bhi	21a44 <ee_skip_atoi+0x40>
        i = i * 10 + *((*s)++) - '0';
   21a1c:	e2833001 	add	r3, r3, #1
   21a20:	e5803000 	str	r3, [r0]
    while (is_digit(**s))
   21a24:	e5d3c000 	ldrb	ip, [r3]
        i = i * 10 + *((*s)++) - '0';
   21a28:	e5531001 	ldrb	r1, [r3, #-1]
   21a2c:	e0822102 	add	r2, r2, r2, lsl #2
    while (is_digit(**s))
   21a30:	e24cc030 	sub	ip, ip, #48	; 0x30
        i = i * 10 + *((*s)++) - '0';
   21a34:	e0812082 	add	r2, r1, r2, lsl #1
    while (is_digit(**s))
   21a38:	e35c0009 	cmp	ip, #9
        i = i * 10 + *((*s)++) - '0';
   21a3c:	e2422030 	sub	r2, r2, #48	; 0x30
    while (is_digit(**s))
   21a40:	9afffff5 	bls	21a1c <ee_skip_atoi+0x18>
    return i;
}
   21a44:	e1a00002 	mov	r0, r2
   21a48:	e12fff1e 	bx	lr

00021a4c <ee_number>:

static char* ee_number(char* str, long num, int base, int size, int precision, int type)
{
   21a4c:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21a50:	e24dd05c 	sub	sp, sp, #92	; 0x5c
   21a54:	e59d6084 	ldr	r6, [sp, #132]	; 0x84
    char c, sign, tmp[66];
    char* dig = lower_digits;
   21a58:	e59fb2b0 	ldr	fp, [pc, #688]	; 21d10 <ee_number+0x2c4>
   21a5c:	e3160040 	tst	r6, #64	; 0x40
   21a60:	e24bc02c 	sub	ip, fp, #44	; 0x2c
   21a64:	01a0b00c 	moveq	fp, ip
{
   21a68:	e58d3000 	str	r3, [sp]
    int i;

    if (type & UPPERCASE)
        dig = upper_digits;
    if (type & LEFT)
   21a6c:	e3160010 	tst	r6, #16
        type &= ~ZEROPAD;
    if (base < 2 || base > 36)
   21a70:	e2423002 	sub	r3, r2, #2
        type &= ~ZEROPAD;
   21a74:	13c66001 	bicne	r6, r6, #1
    if (base < 2 || base > 36)
   21a78:	e3530022 	cmp	r3, #34	; 0x22
{
   21a7c:	e1a05000 	mov	r5, r0
   21a80:	e1a0a002 	mov	sl, r2
   21a84:	e1a00001 	mov	r0, r1
    if (base < 2 || base > 36)
   21a88:	8a00009e 	bhi	21d08 <ee_number+0x2bc>
        return 0;

    c = (type & ZEROPAD) ? '0' : ' ';
   21a8c:	e3160001 	tst	r6, #1
   21a90:	03a03020 	moveq	r3, #32
   21a94:	13a03030 	movne	r3, #48	; 0x30
   21a98:	e58d300c 	str	r3, [sp, #12]
    sign = 0;
    if (type & SIGN) {
   21a9c:	e2163002 	ands	r3, r6, #2
   21aa0:	0a00000b 	beq	21ad4 <ee_number+0x88>
        if (num < 0) {
   21aa4:	e3510000 	cmp	r1, #0
   21aa8:	ba000089 	blt	21cd4 <ee_number+0x288>
            sign = '-';
            num = -num;
            size--;
        } else if (type & PLUS) {
   21aac:	e3160004 	tst	r6, #4
   21ab0:	1a00007a 	bne	21ca0 <ee_number+0x254>
            sign = '+';
            size--;
        } else if (type & SPACE) {
   21ab4:	e2163008 	ands	r3, r6, #8
   21ab8:	0a000005 	beq	21ad4 <ee_number+0x88>
            sign = ' ';
            size--;
   21abc:	e59d3000 	ldr	r3, [sp]
   21ac0:	e2433001 	sub	r3, r3, #1
   21ac4:	e58d3000 	str	r3, [sp]
            sign = ' ';
   21ac8:	e3a03020 	mov	r3, #32
   21acc:	e58d3008 	str	r3, [sp, #8]
   21ad0:	ea000000 	b	21ad8 <ee_number+0x8c>
    sign = 0;
   21ad4:	e58d3008 	str	r3, [sp, #8]
        }
    }

    if (type & HEX_PREP) {
   21ad8:	e2163020 	ands	r3, r6, #32
   21adc:	e58d3004 	str	r3, [sp, #4]
   21ae0:	0a000005 	beq	21afc <ee_number+0xb0>
        if (base == 16)
   21ae4:	e35a0010 	cmp	sl, #16
   21ae8:	0a000080 	beq	21cf0 <ee_number+0x2a4>
            size -= 2;
        else if (base == 8)
   21aec:	e35a0008 	cmp	sl, #8
            size--;
   21af0:	059d3000 	ldreq	r3, [sp]
   21af4:	02433001 	subeq	r3, r3, #1
   21af8:	058d3000 	streq	r3, [sp]
    }

    i = 0;

    if (num == 0)
   21afc:	e3500000 	cmp	r0, #0
   21b00:	0a000060 	beq	21c88 <ee_number+0x23c>
   21b04:	e28d7013 	add	r7, sp, #19
    i = 0;
   21b08:	e3a04000 	mov	r4, #0
   21b0c:	ea000000 	b	21b14 <ee_number+0xc8>
        tmp[i++] = '0';
    else {
        while (num != 0) {
            tmp[i++] = dig[((unsigned long)num) % (unsigned)base];
   21b10:	e1a04008 	mov	r4, r8
   21b14:	e1a0100a 	mov	r1, sl
   21b18:	eb00b3e2 	bl	4eaa8 <__aeabi_uidivmod>
   21b1c:	e7db3001 	ldrb	r3, [fp, r1]
   21b20:	e2848001 	add	r8, r4, #1
        while (num != 0) {
   21b24:	e3500000 	cmp	r0, #0
            tmp[i++] = dig[((unsigned long)num) % (unsigned)base];
   21b28:	e5e73001 	strb	r3, [r7, #1]!
   21b2c:	e1a09008 	mov	r9, r8
        while (num != 0) {
   21b30:	1afffff6 	bne	21b10 <ee_number+0xc4>
   21b34:	e59d3080 	ldr	r3, [sp, #128]	; 0x80
   21b38:	e1590003 	cmp	r9, r3
   21b3c:	b1a0b003 	movlt	fp, r3
   21b40:	a1a0b009 	movge	fp, r9
        }
    }

    if (i > precision)
        precision = i;
    size -= precision;
   21b44:	e59d3000 	ldr	r3, [sp]
    if (!(type & (ZEROPAD | LEFT)))
   21b48:	e3160011 	tst	r6, #17
    size -= precision;
   21b4c:	e043700b 	sub	r7, r3, fp
   21b50:	e2473001 	sub	r3, r7, #1
    if (!(type & (ZEROPAD | LEFT)))
   21b54:	1a00000b 	bne	21b88 <ee_number+0x13c>
        while (size-- > 0)
   21b58:	e3570000 	cmp	r7, #0
   21b5c:	d2472002 	suble	r2, r7, #2
   21b60:	d1a07003 	movle	r7, r3
   21b64:	d1a03002 	movle	r3, r2
   21b68:	da000006 	ble	21b88 <ee_number+0x13c>
   21b6c:	e1a00005 	mov	r0, r5
   21b70:	e1a02007 	mov	r2, r7
   21b74:	e3a01020 	mov	r1, #32
   21b78:	e0855007 	add	r5, r5, r7
   21b7c:	eb00acbd 	bl	4ce78 <memset>
   21b80:	e3e07000 	mvn	r7, #0
            *str++ = ' ';
   21b84:	e3e03001 	mvn	r3, #1
    if (sign)
   21b88:	e59d2008 	ldr	r2, [sp, #8]
   21b8c:	e3520000 	cmp	r2, #0
        *str++ = sign;
   21b90:	15c52000 	strbne	r2, [r5]

    if (type & HEX_PREP) {
   21b94:	e59d2004 	ldr	r2, [sp, #4]
        *str++ = sign;
   21b98:	12855001 	addne	r5, r5, #1
    if (type & HEX_PREP) {
   21b9c:	e3520000 	cmp	r2, #0
   21ba0:	0a000006 	beq	21bc0 <ee_number+0x174>
        if (base == 8)
   21ba4:	e35a0008 	cmp	sl, #8
            *str++ = '0';
   21ba8:	03a02030 	moveq	r2, #48	; 0x30
   21bac:	05c52000 	strbeq	r2, [r5]
   21bb0:	02855001 	addeq	r5, r5, #1
        if (base == 8)
   21bb4:	0a000001 	beq	21bc0 <ee_number+0x174>
        else if (base == 16) {
   21bb8:	e35a0010 	cmp	sl, #16
   21bbc:	0a00003d 	beq	21cb8 <ee_number+0x26c>
            *str++ = '0';
            *str++ = lower_digits[33];
        }
    }

    if (!(type & LEFT))
   21bc0:	e3160010 	tst	r6, #16
   21bc4:	1a00000f 	bne	21c08 <ee_number+0x1bc>
        while (size-- > 0)
   21bc8:	e3570000 	cmp	r7, #0
   21bcc:	d1a07003 	movle	r7, r3
   21bd0:	d2433001 	suble	r3, r3, #1
   21bd4:	da00000b 	ble	21c08 <ee_number+0x1bc>
            *str++ = c;
   21bd8:	e1c37fc3 	bic	r7, r3, r3, asr #31
   21bdc:	e2876001 	add	r6, r7, #1
   21be0:	e1a00005 	mov	r0, r5
   21be4:	e59d100c 	ldr	r1, [sp, #12]
   21be8:	e1a02006 	mov	r2, r6
   21bec:	e58d3000 	str	r3, [sp]
   21bf0:	eb00aca0 	bl	4ce78 <memset>
   21bf4:	e59d3000 	ldr	r3, [sp]
   21bf8:	e0855006 	add	r5, r5, r6
   21bfc:	e2433001 	sub	r3, r3, #1
   21c00:	e0437007 	sub	r7, r3, r7
   21c04:	e2473001 	sub	r3, r7, #1
    while (i < precision--)
   21c08:	e159000b 	cmp	r9, fp
   21c0c:	aa000007 	bge	21c30 <ee_number+0x1e4>
        *str++ = '0';
   21c10:	e04b9009 	sub	r9, fp, r9
   21c14:	e1a00005 	mov	r0, r5
   21c18:	e1a02009 	mov	r2, r9
   21c1c:	e3a01030 	mov	r1, #48	; 0x30
   21c20:	e58d3000 	str	r3, [sp]
   21c24:	eb00ac93 	bl	4ce78 <memset>
   21c28:	e59d3000 	ldr	r3, [sp]
   21c2c:	e0855009 	add	r5, r5, r9
   21c30:	e28dc014 	add	ip, sp, #20
   21c34:	e08c4004 	add	r4, ip, r4
   21c38:	e2452001 	sub	r2, r5, #1
    while (i-- > 0)
   21c3c:	e26cc001 	rsb	ip, ip, #1
        *str++ = tmp[i];
   21c40:	e4541001 	ldrb	r1, [r4], #-1
    while (i-- > 0)
   21c44:	e08c0004 	add	r0, ip, r4
   21c48:	e3500000 	cmp	r0, #0
        *str++ = tmp[i];
   21c4c:	e5e21001 	strb	r1, [r2, #1]!
    while (i-- > 0)
   21c50:	cafffffa 	bgt	21c40 <ee_number+0x1f4>
    while (size-- > 0)
   21c54:	e3570000 	cmp	r7, #0
   21c58:	e0855008 	add	r5, r5, r8
   21c5c:	da000006 	ble	21c7c <ee_number+0x230>
        *str++ = ' ';
   21c60:	e1c37fc3 	bic	r7, r3, r3, asr #31
   21c64:	e2877001 	add	r7, r7, #1
   21c68:	e1a00005 	mov	r0, r5
   21c6c:	e1a02007 	mov	r2, r7
   21c70:	e3a01020 	mov	r1, #32
   21c74:	eb00ac7f 	bl	4ce78 <memset>
   21c78:	e0855007 	add	r5, r5, r7

    return str;
}
   21c7c:	e1a00005 	mov	r0, r5
   21c80:	e28dd05c 	add	sp, sp, #92	; 0x5c
   21c84:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
        tmp[i++] = '0';
   21c88:	e3a03030 	mov	r3, #48	; 0x30
   21c8c:	e3a09001 	mov	r9, #1
   21c90:	e1a04000 	mov	r4, r0
   21c94:	e5cd3014 	strb	r3, [sp, #20]
   21c98:	e1a08009 	mov	r8, r9
   21c9c:	eaffffa4 	b	21b34 <ee_number+0xe8>
            size--;
   21ca0:	e59d3000 	ldr	r3, [sp]
   21ca4:	e2433001 	sub	r3, r3, #1
   21ca8:	e58d3000 	str	r3, [sp]
            sign = '+';
   21cac:	e3a0302b 	mov	r3, #43	; 0x2b
   21cb0:	e58d3008 	str	r3, [sp, #8]
   21cb4:	eaffff87 	b	21ad8 <ee_number+0x8c>
            *str++ = '0';
   21cb8:	e1a02005 	mov	r2, r5
   21cbc:	e3a00030 	mov	r0, #48	; 0x30
            *str++ = lower_digits[33];
   21cc0:	e3a01078 	mov	r1, #120	; 0x78
            *str++ = '0';
   21cc4:	e4c20002 	strb	r0, [r2], #2
            *str++ = lower_digits[33];
   21cc8:	e5c51001 	strb	r1, [r5, #1]
   21ccc:	e1a05002 	mov	r5, r2
   21cd0:	eaffffba 	b	21bc0 <ee_number+0x174>
            size--;
   21cd4:	e59d3000 	ldr	r3, [sp]
            num = -num;
   21cd8:	e2610000 	rsb	r0, r1, #0
            size--;
   21cdc:	e2433001 	sub	r3, r3, #1
   21ce0:	e58d3000 	str	r3, [sp]
            sign = '-';
   21ce4:	e3a0302d 	mov	r3, #45	; 0x2d
   21ce8:	e58d3008 	str	r3, [sp, #8]
   21cec:	eaffff79 	b	21ad8 <ee_number+0x8c>
            size -= 2;
   21cf0:	e59d3000 	ldr	r3, [sp]
    if (num == 0)
   21cf4:	e3500000 	cmp	r0, #0
            size -= 2;
   21cf8:	e2433002 	sub	r3, r3, #2
   21cfc:	e58d3000 	str	r3, [sp]
    if (num == 0)
   21d00:	1affff7f 	bne	21b04 <ee_number+0xb8>
   21d04:	eaffffdf 	b	21c88 <ee_number+0x23c>
        return 0;
   21d08:	e3a05000 	mov	r5, #0
   21d0c:	eaffffda 	b	21c7c <ee_number+0x230>
   21d10:	00053578 	.word	0x00053578

00021d14 <eaddr>:

static char* eaddr(char* str, unsigned char* addr, int size, int type)
{
    char tmp[24];
    char* dig = lower_digits;
   21d14:	e59fc32c 	ldr	ip, [pc, #812]	; 22048 <eaddr+0x334>
{
   21d18:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
    char* dig = lower_digits;
   21d1c:	e3130040 	tst	r3, #64	; 0x40
   21d20:	e24ce02c 	sub	lr, ip, #44	; 0x2c
   21d24:	01a0c00e 	moveq	ip, lr
    if (type & UPPERCASE)
        dig = upper_digits;
    len = 0;
    for (i = 0; i < 6; i++) {
        if (i != 0)
            tmp[len++] = ':';
   21d28:	e3a0e03a 	mov	lr, #58	; 0x3a
{
   21d2c:	e1a05002 	mov	r5, r2
        tmp[len++] = dig[addr[i] >> 4];
   21d30:	e5d17000 	ldrb	r7, [r1]
   21d34:	e5d16001 	ldrb	r6, [r1, #1]
   21d38:	e5d14002 	ldrb	r4, [r1, #2]
   21d3c:	e5d19003 	ldrb	r9, [r1, #3]
   21d40:	e5d18004 	ldrb	r8, [r1, #4]
   21d44:	e5d12005 	ldrb	r2, [r1, #5]
   21d48:	e7dc1227 	ldrb	r1, [ip, r7, lsr #4]
        tmp[len++] = dig[addr[i] & 0x0F];
   21d4c:	e207700f 	and	r7, r7, #15
{
   21d50:	e24dd01c 	sub	sp, sp, #28
    }

    if (!(type & LEFT))
   21d54:	e3130010 	tst	r3, #16
        tmp[len++] = dig[addr[i] & 0x0F];
   21d58:	e7dc3007 	ldrb	r3, [ip, r7]
        tmp[len++] = dig[addr[i] >> 4];
   21d5c:	e5cd1000 	strb	r1, [sp]
   21d60:	e7dc1226 	ldrb	r1, [ip, r6, lsr #4]
        tmp[len++] = dig[addr[i] & 0x0F];
   21d64:	e206600f 	and	r6, r6, #15
   21d68:	e5cd3001 	strb	r3, [sp, #1]
   21d6c:	e7dc3006 	ldrb	r3, [ip, r6]
        tmp[len++] = dig[addr[i] >> 4];
   21d70:	e5cd1003 	strb	r1, [sp, #3]
        tmp[len++] = dig[addr[i] & 0x0F];
   21d74:	e5cd3004 	strb	r3, [sp, #4]
        tmp[len++] = dig[addr[i] >> 4];
   21d78:	e7dc3224 	ldrb	r3, [ip, r4, lsr #4]
        tmp[len++] = dig[addr[i] & 0x0F];
   21d7c:	e204400f 	and	r4, r4, #15
   21d80:	e7dc1004 	ldrb	r1, [ip, r4]
        tmp[len++] = dig[addr[i] >> 4];
   21d84:	e5cd3006 	strb	r3, [sp, #6]
        tmp[len++] = dig[addr[i] & 0x0F];
   21d88:	e209300f 	and	r3, r9, #15
   21d8c:	e7dc3003 	ldrb	r3, [ip, r3]
   21d90:	e5cd1007 	strb	r1, [sp, #7]
   21d94:	e208100f 	and	r1, r8, #15
        tmp[len++] = dig[addr[i] >> 4];
   21d98:	e7dc4229 	ldrb	r4, [ip, r9, lsr #4]
            tmp[len++] = ':';
   21d9c:	e5cde002 	strb	lr, [sp, #2]
   21da0:	e5cde005 	strb	lr, [sp, #5]
   21da4:	e5cde008 	strb	lr, [sp, #8]
   21da8:	e5cde00b 	strb	lr, [sp, #11]
   21dac:	e5cde00e 	strb	lr, [sp, #14]
        tmp[len++] = dig[addr[i] & 0x0F];
   21db0:	e7dc1001 	ldrb	r1, [ip, r1]
        tmp[len++] = dig[addr[i] >> 4];
   21db4:	e7dce228 	ldrb	lr, [ip, r8, lsr #4]
        tmp[len++] = dig[addr[i] & 0x0F];
   21db8:	e5cd300a 	strb	r3, [sp, #10]
        tmp[len++] = dig[addr[i] >> 4];
   21dbc:	e7dc3222 	ldrb	r3, [ip, r2, lsr #4]
        tmp[len++] = dig[addr[i] & 0x0F];
   21dc0:	e202200f 	and	r2, r2, #15
        tmp[len++] = dig[addr[i] >> 4];
   21dc4:	e5cd4009 	strb	r4, [sp, #9]
   21dc8:	e5cde00c 	strb	lr, [sp, #12]
        tmp[len++] = dig[addr[i] & 0x0F];
   21dcc:	e5cd100d 	strb	r1, [sp, #13]
        tmp[len++] = dig[addr[i] >> 4];
   21dd0:	e5cd300f 	strb	r3, [sp, #15]
        tmp[len++] = dig[addr[i] & 0x0F];
   21dd4:	e7dc3002 	ldrb	r3, [ip, r2]
{
   21dd8:	e1a04000 	mov	r4, r0
   21ddc:	e245c001 	sub	ip, r5, #1
        tmp[len++] = dig[addr[i] & 0x0F];
   21de0:	e5cd3010 	strb	r3, [sp, #16]
    if (!(type & LEFT))
   21de4:	1a00000b 	bne	21e18 <eaddr+0x104>
        while (len < size--)
   21de8:	e3550011 	cmp	r5, #17
   21dec:	d2453002 	suble	r3, r5, #2
   21df0:	d1a0500c 	movle	r5, ip
   21df4:	d1a0c003 	movle	ip, r3
   21df8:	da000006 	ble	21e18 <eaddr+0x104>
            *str++ = ' ';
   21dfc:	e2456011 	sub	r6, r5, #17
   21e00:	e1a02006 	mov	r2, r6
   21e04:	e3a01020 	mov	r1, #32
   21e08:	eb00ac1a 	bl	4ce78 <memset>
        while (len < size--)
   21e0c:	e3a05010 	mov	r5, #16
            *str++ = ' ';
   21e10:	e3a0c00f 	mov	ip, #15
   21e14:	e0844006 	add	r4, r4, r6
   21e18:	e1a0e00d 	mov	lr, sp
   21e1c:	e8be000f 	ldm	lr!, {r0, r1, r2, r3}
   21e20:	e5dee000 	ldrb	lr, [lr]
    for (i = 0; i < len; ++i)
        *str++ = tmp[i];
    while (len < size--)
   21e24:	e3550011 	cmp	r5, #17
   21e28:	e5840000 	str	r0, [r4]
   21e2c:	e5c4e010 	strb	lr, [r4, #16]
   21e30:	e5841004 	str	r1, [r4, #4]
   21e34:	e5842008 	str	r2, [r4, #8]
   21e38:	e584300c 	str	r3, [r4, #12]
   21e3c:	e2840011 	add	r0, r4, #17
   21e40:	da000076 	ble	22020 <eaddr+0x30c>
   21e44:	e2603000 	rsb	r3, r0, #0
   21e48:	e2033007 	and	r3, r3, #7
   21e4c:	e35c0010 	cmp	ip, #16
   21e50:	e2832007 	add	r2, r3, #7
   21e54:	c24c1011 	subgt	r1, ip, #17
   21e58:	d3a01000 	movle	r1, #0
   21e5c:	c24c7010 	subgt	r7, ip, #16
   21e60:	d3a07001 	movle	r7, #1
   21e64:	e352000c 	cmp	r2, #12
   21e68:	33a0200c 	movcc	r2, #12
   21e6c:	e1510002 	cmp	r1, r2
   21e70:	3a00006f 	bcc	22034 <eaddr+0x320>
   21e74:	e3530000 	cmp	r3, #0
   21e78:	0a00006a 	beq	22028 <eaddr+0x314>
        *str++ = ' ';
   21e7c:	e3a02020 	mov	r2, #32
   21e80:	e3530001 	cmp	r3, #1
   21e84:	e5c42011 	strb	r2, [r4, #17]
   21e88:	e284e012 	add	lr, r4, #18
    while (len < size--)
   21e8c:	e24c6001 	sub	r6, ip, #1
   21e90:	0a00001a 	beq	21f00 <eaddr+0x1ec>
   21e94:	e3530002 	cmp	r3, #2
        *str++ = ' ';
   21e98:	e5c42012 	strb	r2, [r4, #18]
   21e9c:	e284e013 	add	lr, r4, #19
    while (len < size--)
   21ea0:	e24c6002 	sub	r6, ip, #2
   21ea4:	0a000015 	beq	21f00 <eaddr+0x1ec>
   21ea8:	e3530003 	cmp	r3, #3
        *str++ = ' ';
   21eac:	e5c42013 	strb	r2, [r4, #19]
   21eb0:	e284e014 	add	lr, r4, #20
    while (len < size--)
   21eb4:	e24c6003 	sub	r6, ip, #3
   21eb8:	0a000010 	beq	21f00 <eaddr+0x1ec>
   21ebc:	e3530004 	cmp	r3, #4
        *str++ = ' ';
   21ec0:	e5c42014 	strb	r2, [r4, #20]
   21ec4:	e284e015 	add	lr, r4, #21
    while (len < size--)
   21ec8:	e24c6004 	sub	r6, ip, #4
   21ecc:	0a00000b 	beq	21f00 <eaddr+0x1ec>
   21ed0:	e3530005 	cmp	r3, #5
        *str++ = ' ';
   21ed4:	e5c42015 	strb	r2, [r4, #21]
   21ed8:	e284e016 	add	lr, r4, #22
    while (len < size--)
   21edc:	e24c6005 	sub	r6, ip, #5
   21ee0:	0a000006 	beq	21f00 <eaddr+0x1ec>
   21ee4:	e3530007 	cmp	r3, #7
        *str++ = ' ';
   21ee8:	e5c42016 	strb	r2, [r4, #22]
   21eec:	e284e017 	add	lr, r4, #23
    while (len < size--)
   21ef0:	e24c6006 	sub	r6, ip, #6
        *str++ = ' ';
   21ef4:	05c42017 	strbeq	r2, [r4, #23]
   21ef8:	0284e018 	addeq	lr, r4, #24
    while (len < size--)
   21efc:	024c6007 	subeq	r6, ip, #7
   21f00:	e3a01000 	mov	r1, #0
        *str++ = ' ';
   21f04:	e28f5f4d 	add	r5, pc, #308	; 0x134
   21f08:	e1c540d0 	ldrd	r4, [r5]
   21f0c:	e0477003 	sub	r7, r7, r3
   21f10:	e1a0c1a7 	lsr	ip, r7, #3
   21f14:	e0803003 	add	r3, r0, r3
   21f18:	e28e2001 	add	r2, lr, #1
   21f1c:	e2811001 	add	r1, r1, #1
   21f20:	e151000c 	cmp	r1, ip
   21f24:	e2820007 	add	r0, r2, #7
   21f28:	e0c340f8 	strd	r4, [r3], #8
   21f2c:	e2822008 	add	r2, r2, #8
   21f30:	3afffff9 	bcc	21f1c <eaddr+0x208>
   21f34:	e3c7c007 	bic	ip, r7, #7
   21f38:	e157000c 	cmp	r7, ip
   21f3c:	e08e300c 	add	r3, lr, ip
   21f40:	e046c00c 	sub	ip, r6, ip
   21f44:	0a000035 	beq	22020 <eaddr+0x30c>
   21f48:	e3a02020 	mov	r2, #32
    while (len < size--)
   21f4c:	e35c0011 	cmp	ip, #17
        *str++ = ' ';
   21f50:	e5c32000 	strb	r2, [r3]
   21f54:	e2830001 	add	r0, r3, #1
    while (len < size--)
   21f58:	da000030 	ble	22020 <eaddr+0x30c>
   21f5c:	e35c0012 	cmp	ip, #18
        *str++ = ' ';
   21f60:	e5c32001 	strb	r2, [r3, #1]
   21f64:	e2830002 	add	r0, r3, #2
    while (len < size--)
   21f68:	da00002c 	ble	22020 <eaddr+0x30c>
   21f6c:	e35c0013 	cmp	ip, #19
        *str++ = ' ';
   21f70:	e5c32002 	strb	r2, [r3, #2]
   21f74:	e2830003 	add	r0, r3, #3
    while (len < size--)
   21f78:	da000028 	ble	22020 <eaddr+0x30c>
   21f7c:	e35c0014 	cmp	ip, #20
        *str++ = ' ';
   21f80:	e5c32003 	strb	r2, [r3, #3]
   21f84:	e2830004 	add	r0, r3, #4
    while (len < size--)
   21f88:	da000024 	ble	22020 <eaddr+0x30c>
   21f8c:	e35c0015 	cmp	ip, #21
        *str++ = ' ';
   21f90:	e5c32004 	strb	r2, [r3, #4]
   21f94:	e2830005 	add	r0, r3, #5
    while (len < size--)
   21f98:	da000020 	ble	22020 <eaddr+0x30c>
   21f9c:	e35c0016 	cmp	ip, #22
        *str++ = ' ';
   21fa0:	e5c32005 	strb	r2, [r3, #5]
   21fa4:	e2830006 	add	r0, r3, #6
    while (len < size--)
   21fa8:	da00001c 	ble	22020 <eaddr+0x30c>
   21fac:	e35c0017 	cmp	ip, #23
        *str++ = ' ';
   21fb0:	e5c32006 	strb	r2, [r3, #6]
   21fb4:	e2830007 	add	r0, r3, #7
    while (len < size--)
   21fb8:	da000018 	ble	22020 <eaddr+0x30c>
   21fbc:	e35c0018 	cmp	ip, #24
        *str++ = ' ';
   21fc0:	e5c32007 	strb	r2, [r3, #7]
   21fc4:	e2830008 	add	r0, r3, #8
    while (len < size--)
   21fc8:	da000014 	ble	22020 <eaddr+0x30c>
   21fcc:	e35c0019 	cmp	ip, #25
        *str++ = ' ';
   21fd0:	e5c32008 	strb	r2, [r3, #8]
   21fd4:	e2830009 	add	r0, r3, #9
    while (len < size--)
   21fd8:	da000010 	ble	22020 <eaddr+0x30c>
   21fdc:	e35c001a 	cmp	ip, #26
        *str++ = ' ';
   21fe0:	e5c32009 	strb	r2, [r3, #9]
   21fe4:	e283000a 	add	r0, r3, #10
    while (len < size--)
   21fe8:	da00000c 	ble	22020 <eaddr+0x30c>
   21fec:	e35c001b 	cmp	ip, #27
        *str++ = ' ';
   21ff0:	e5c3200a 	strb	r2, [r3, #10]
   21ff4:	e283000b 	add	r0, r3, #11
    while (len < size--)
   21ff8:	da000008 	ble	22020 <eaddr+0x30c>
   21ffc:	e35c001c 	cmp	ip, #28
        *str++ = ' ';
   22000:	e5c3200b 	strb	r2, [r3, #11]
   22004:	e283000c 	add	r0, r3, #12
    while (len < size--)
   22008:	da000004 	ble	22020 <eaddr+0x30c>
   2200c:	e35c001d 	cmp	ip, #29
        *str++ = ' ';
   22010:	e283000d 	add	r0, r3, #13
   22014:	e5c3200c 	strb	r2, [r3, #12]
   22018:	c5c3200d 	strbgt	r2, [r3, #13]
   2201c:	c283000e 	addgt	r0, r3, #14

    return str;
}
   22020:	e28dd01c 	add	sp, sp, #28
   22024:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
    while (len < size--)
   22028:	e1a0600c 	mov	r6, ip
   2202c:	e1a0e000 	mov	lr, r0
   22030:	eaffffb2 	b	21f00 <eaddr+0x1ec>
   22034:	e1a03000 	mov	r3, r0
   22038:	eaffffc2 	b	21f48 <eaddr+0x234>
   2203c:	e320f000 	nop	{0}
   22040:	20202020 	.word	0x20202020
   22044:	20202020 	.word	0x20202020
   22048:	00053578 	.word	0x00053578

0002204c <iaddr>:

static char* iaddr(char* str, unsigned char* addr, int size, int type)
{
   2204c:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}

    len = 0;
    for (i = 0; i < 4; i++) {
        if (i != 0)
            tmp[len++] = '.';
        n = addr[i];
   22050:	e5d15000 	ldrb	r5, [r1]
{
   22054:	e24dd018 	sub	sp, sp, #24

        if (n == 0)
   22058:	e3550000 	cmp	r5, #0
{
   2205c:	e1a04000 	mov	r4, r0
   22060:	e1a06002 	mov	r6, r2
   22064:	e1a0c003 	mov	ip, r3
        if (n == 0)
   22068:	0a000018 	beq	220d0 <iaddr+0x84>
            tmp[len++] = lower_digits[0];
        else {
            if (n >= 100) {
   2206c:	e3550063 	cmp	r5, #99	; 0x63
   22070:	da00015e 	ble	225f0 <iaddr+0x5a4>
                tmp[len++] = lower_digits[n / 100];
   22074:	e59f85ec 	ldr	r8, [pc, #1516]	; 22668 <iaddr+0x61c>
                n = n % 100;
                tmp[len++] = lower_digits[n / 10];
   22078:	e59f25ec 	ldr	r2, [pc, #1516]	; 2266c <iaddr+0x620>
                tmp[len++] = lower_digits[n / 100];
   2207c:	e0898895 	umull	r8, r9, r5, r8
   22080:	e1a0e2a9 	lsr	lr, r9, #5
                n = n % 100;
   22084:	e08e310e 	add	r3, lr, lr, lsl #2
   22088:	e0833103 	add	r3, r3, r3, lsl #2
   2208c:	e0455103 	sub	r5, r5, r3, lsl #2
                tmp[len++] = lower_digits[n / 10];
   22090:	e0832295 	umull	r2, r3, r5, r2
                tmp[len++] = lower_digits[n / 100];
   22094:	e59f05d4 	ldr	r0, [pc, #1492]	; 22670 <iaddr+0x624>
                tmp[len++] = lower_digits[n / 10];
   22098:	e1a031a3 	lsr	r3, r3, #3
                tmp[len++] = lower_digits[n / 100];
   2209c:	e7d0200e 	ldrb	r2, [r0, lr]
                n = n % 10;
   220a0:	e083e103 	add	lr, r3, r3, lsl #2
                tmp[len++] = lower_digits[n / 10];
   220a4:	e7d03003 	ldrb	r3, [r0, r3]
                n = n % 10;
   220a8:	e045508e 	sub	r5, r5, lr, lsl #1
                tmp[len++] = lower_digits[n / 10];
   220ac:	e5cd3001 	strb	r3, [sp, #1]
                n = n % 10;
   220b0:	e3a0e003 	mov	lr, #3
                tmp[len++] = lower_digits[n / 10];
   220b4:	e3a03002 	mov	r3, #2
                tmp[len++] = lower_digits[n / 100];
   220b8:	e5cd2000 	strb	r2, [sp]
            } else if (n >= 10) {
                tmp[len++] = lower_digits[n / 10];
                n = n % 10;
            }

            tmp[len++] = lower_digits[n];
   220bc:	e7d02005 	ldrb	r2, [r0, r5]
   220c0:	e28d0018 	add	r0, sp, #24
   220c4:	e0803003 	add	r3, r0, r3
   220c8:	e5432018 	strb	r2, [r3, #-24]	; 0xffffffe8
   220cc:	ea000002 	b	220dc <iaddr+0x90>
            tmp[len++] = lower_digits[0];
   220d0:	e3a03030 	mov	r3, #48	; 0x30
   220d4:	e3a0e001 	mov	lr, #1
   220d8:	e5cd3000 	strb	r3, [sp]
            tmp[len++] = '.';
   220dc:	e3a0202e 	mov	r2, #46	; 0x2e
        n = addr[i];
   220e0:	e5d15001 	ldrb	r5, [r1, #1]
            tmp[len++] = '.';
   220e4:	e28d3018 	add	r3, sp, #24
   220e8:	e083300e 	add	r3, r3, lr
        if (n == 0)
   220ec:	e3550000 	cmp	r5, #0
            tmp[len++] = '.';
   220f0:	e5432018 	strb	r2, [r3, #-24]	; 0xffffffe8
   220f4:	e28e3001 	add	r3, lr, #1
   220f8:	e28e2002 	add	r2, lr, #2
        if (n == 0)
   220fc:	0a00001b 	beq	22170 <iaddr+0x124>
            if (n >= 100) {
   22100:	e3550063 	cmp	r5, #99	; 0x63
   22104:	da00012a 	ble	225b4 <iaddr+0x568>
                tmp[len++] = lower_digits[n / 100];
   22108:	e59f8558 	ldr	r8, [pc, #1368]	; 22668 <iaddr+0x61c>
   2210c:	e59f055c 	ldr	r0, [pc, #1372]	; 22670 <iaddr+0x624>
   22110:	e0898895 	umull	r8, r9, r5, r8
   22114:	e1a0a2a9 	lsr	sl, r9, #5
                n = n % 100;
   22118:	e08a710a 	add	r7, sl, sl, lsl #2
   2211c:	e0877107 	add	r7, r7, r7, lsl #2
                tmp[len++] = lower_digits[n / 10];
   22120:	e59f8544 	ldr	r8, [pc, #1348]	; 2266c <iaddr+0x620>
                n = n % 100;
   22124:	e0455107 	sub	r5, r5, r7, lsl #2
                tmp[len++] = lower_digits[n / 10];
   22128:	e0898895 	umull	r8, r9, r5, r8
   2212c:	e1a071a9 	lsr	r7, r9, #3
   22130:	e7d08007 	ldrb	r8, [r0, r7]
                tmp[len++] = lower_digits[n / 100];
   22134:	e7d0900a 	ldrb	r9, [r0, sl]
   22138:	e28da018 	add	sl, sp, #24
   2213c:	e08a3003 	add	r3, sl, r3
                tmp[len++] = lower_digits[n / 10];
   22140:	e08a2002 	add	r2, sl, r2
                n = n % 10;
   22144:	e0877107 	add	r7, r7, r7, lsl #2
                tmp[len++] = lower_digits[n / 100];
   22148:	e5439018 	strb	r9, [r3, #-24]	; 0xffffffe8
                n = n % 10;
   2214c:	e0455087 	sub	r5, r5, r7, lsl #1
                tmp[len++] = lower_digits[n / 10];
   22150:	e5428018 	strb	r8, [r2, #-24]	; 0xffffffe8
   22154:	e28e3003 	add	r3, lr, #3
   22158:	e28e2004 	add	r2, lr, #4
            tmp[len++] = lower_digits[n];
   2215c:	e7d00005 	ldrb	r0, [r0, r5]
   22160:	e28de018 	add	lr, sp, #24
   22164:	e08e3003 	add	r3, lr, r3
   22168:	e5430018 	strb	r0, [r3, #-24]	; 0xffffffe8
   2216c:	ea000003 	b	22180 <iaddr+0x134>
            tmp[len++] = lower_digits[0];
   22170:	e3a00030 	mov	r0, #48	; 0x30
   22174:	e28de018 	add	lr, sp, #24
   22178:	e08e3003 	add	r3, lr, r3
   2217c:	e5430018 	strb	r0, [r3, #-24]	; 0xffffffe8
            tmp[len++] = '.';
   22180:	e3a0002e 	mov	r0, #46	; 0x2e
        n = addr[i];
   22184:	e5d15002 	ldrb	r5, [r1, #2]
            tmp[len++] = '.';
   22188:	e28d3018 	add	r3, sp, #24
   2218c:	e0833002 	add	r3, r3, r2
        if (n == 0)
   22190:	e3550000 	cmp	r5, #0
            tmp[len++] = '.';
   22194:	e5430018 	strb	r0, [r3, #-24]	; 0xffffffe8
   22198:	e282e001 	add	lr, r2, #1
   2219c:	e2823002 	add	r3, r2, #2
        if (n == 0)
   221a0:	0a00001b 	beq	22214 <iaddr+0x1c8>
            if (n >= 100) {
   221a4:	e3550063 	cmp	r5, #99	; 0x63
   221a8:	da0000f2 	ble	22578 <iaddr+0x52c>
                tmp[len++] = lower_digits[n / 100];
   221ac:	e59f84b4 	ldr	r8, [pc, #1204]	; 22668 <iaddr+0x61c>
   221b0:	e59f04b8 	ldr	r0, [pc, #1208]	; 22670 <iaddr+0x624>
   221b4:	e0898895 	umull	r8, r9, r5, r8
   221b8:	e1a0a2a9 	lsr	sl, r9, #5
                n = n % 100;
   221bc:	e08a710a 	add	r7, sl, sl, lsl #2
   221c0:	e0877107 	add	r7, r7, r7, lsl #2
                tmp[len++] = lower_digits[n / 10];
   221c4:	e59f84a0 	ldr	r8, [pc, #1184]	; 2266c <iaddr+0x620>
                n = n % 100;
   221c8:	e0455107 	sub	r5, r5, r7, lsl #2
                tmp[len++] = lower_digits[n / 10];
   221cc:	e0898895 	umull	r8, r9, r5, r8
   221d0:	e1a071a9 	lsr	r7, r9, #3
   221d4:	e7d08007 	ldrb	r8, [r0, r7]
                tmp[len++] = lower_digits[n / 100];
   221d8:	e7d0900a 	ldrb	r9, [r0, sl]
   221dc:	e28da018 	add	sl, sp, #24
   221e0:	e08ae00e 	add	lr, sl, lr
                tmp[len++] = lower_digits[n / 10];
   221e4:	e08a3003 	add	r3, sl, r3
                n = n % 10;
   221e8:	e0877107 	add	r7, r7, r7, lsl #2
                tmp[len++] = lower_digits[n / 100];
   221ec:	e54e9018 	strb	r9, [lr, #-24]	; 0xffffffe8
                n = n % 10;
   221f0:	e0455087 	sub	r5, r5, r7, lsl #1
                tmp[len++] = lower_digits[n / 10];
   221f4:	e5438018 	strb	r8, [r3, #-24]	; 0xffffffe8
   221f8:	e282e003 	add	lr, r2, #3
   221fc:	e2823004 	add	r3, r2, #4
            tmp[len++] = lower_digits[n];
   22200:	e7d02005 	ldrb	r2, [r0, r5]
   22204:	e28d0018 	add	r0, sp, #24
   22208:	e080e00e 	add	lr, r0, lr
   2220c:	e54e2018 	strb	r2, [lr, #-24]	; 0xffffffe8
   22210:	ea000003 	b	22224 <iaddr+0x1d8>
            tmp[len++] = lower_digits[0];
   22214:	e3a02030 	mov	r2, #48	; 0x30
   22218:	e28d0018 	add	r0, sp, #24
   2221c:	e080e00e 	add	lr, r0, lr
   22220:	e54e2018 	strb	r2, [lr, #-24]	; 0xffffffe8
            tmp[len++] = '.';
   22224:	e3a0002e 	mov	r0, #46	; 0x2e
        n = addr[i];
   22228:	e5d12003 	ldrb	r2, [r1, #3]
            tmp[len++] = '.';
   2222c:	e28d1018 	add	r1, sp, #24
   22230:	e0811003 	add	r1, r1, r3
        if (n == 0)
   22234:	e3520000 	cmp	r2, #0
            tmp[len++] = '.';
   22238:	e5410018 	strb	r0, [r1, #-24]	; 0xffffffe8
   2223c:	e2835002 	add	r5, r3, #2
   22240:	e2831001 	add	r1, r3, #1
        if (n == 0)
   22244:	1a0000a0 	bne	224cc <iaddr+0x480>
            tmp[len++] = lower_digits[0];
   22248:	e3a03030 	mov	r3, #48	; 0x30
   2224c:	e28d2018 	add	r2, sp, #24
   22250:	e0821001 	add	r1, r2, r1
   22254:	e5413018 	strb	r3, [r1, #-24]	; 0xffffffe8
        }
    }

    if (!(type & LEFT))
   22258:	e31c0010 	tst	ip, #16
   2225c:	e2467001 	sub	r7, r6, #1
   22260:	1a00000c 	bne	22298 <iaddr+0x24c>
        while (len < size--)
   22264:	e1550006 	cmp	r5, r6
   22268:	a2463002 	subge	r3, r6, #2
   2226c:	a1a06007 	movge	r6, r7
   22270:	a1a07003 	movge	r7, r3
   22274:	aa000007 	bge	22298 <iaddr+0x24c>
            *str++ = ' ';
   22278:	e0467005 	sub	r7, r6, r5
   2227c:	e1a02007 	mov	r2, r7
   22280:	e1a00004 	mov	r0, r4
   22284:	e3a01020 	mov	r1, #32
   22288:	eb00aafa 	bl	4ce78 <memset>
   2228c:	e2456001 	sub	r6, r5, #1
   22290:	e0844007 	add	r4, r4, r7
   22294:	e2467001 	sub	r7, r6, #1
   22298:	e1a02005 	mov	r2, r5
   2229c:	e1a0100d 	mov	r1, sp
   222a0:	e1a00004 	mov	r0, r4
   222a4:	eb00aaaf 	bl	4cd68 <memcpy>
    for (i = 0; i < len; ++i)
        *str++ = tmp[i];
    while (len < size--)
   222a8:	e1550006 	cmp	r5, r6
   222ac:	e0840005 	add	r0, r4, r5
   222b0:	aa000083 	bge	224c4 <iaddr+0x478>
   222b4:	e2603000 	rsb	r3, r0, #0
   222b8:	e2033007 	and	r3, r3, #7
   222bc:	e1550007 	cmp	r5, r7
   222c0:	e2832007 	add	r2, r3, #7
   222c4:	e2654001 	rsb	r4, r5, #1
   222c8:	d0471005 	suble	r1, r7, r5
   222cc:	c3a01000 	movgt	r1, #0
   222d0:	d0844007 	addle	r4, r4, r7
   222d4:	c3a04001 	movgt	r4, #1
   222d8:	e352000c 	cmp	r2, #12
   222dc:	33a0200c 	movcc	r2, #12
   222e0:	e1510002 	cmp	r1, r2
   222e4:	3a0000db 	bcc	22658 <iaddr+0x60c>
   222e8:	e3530000 	cmp	r3, #0
   222ec:	0a0000d6 	beq	2264c <iaddr+0x600>
        *str++ = ' ';
   222f0:	e3a02020 	mov	r2, #32
   222f4:	e3530001 	cmp	r3, #1
   222f8:	e5c02000 	strb	r2, [r0]
   222fc:	e280c001 	add	ip, r0, #1
    while (len < size--)
   22300:	e247e001 	sub	lr, r7, #1
   22304:	0a00001a 	beq	22374 <iaddr+0x328>
   22308:	e3530002 	cmp	r3, #2
        *str++ = ' ';
   2230c:	e5c02001 	strb	r2, [r0, #1]
   22310:	e280c002 	add	ip, r0, #2
    while (len < size--)
   22314:	e247e002 	sub	lr, r7, #2
   22318:	0a000015 	beq	22374 <iaddr+0x328>
   2231c:	e3530003 	cmp	r3, #3
        *str++ = ' ';
   22320:	e5c02002 	strb	r2, [r0, #2]
   22324:	e280c003 	add	ip, r0, #3
    while (len < size--)
   22328:	e247e003 	sub	lr, r7, #3
   2232c:	0a000010 	beq	22374 <iaddr+0x328>
   22330:	e3530004 	cmp	r3, #4
        *str++ = ' ';
   22334:	e5c02003 	strb	r2, [r0, #3]
   22338:	e280c004 	add	ip, r0, #4
    while (len < size--)
   2233c:	e247e004 	sub	lr, r7, #4
   22340:	0a00000b 	beq	22374 <iaddr+0x328>
   22344:	e3530005 	cmp	r3, #5
        *str++ = ' ';
   22348:	e5c02004 	strb	r2, [r0, #4]
   2234c:	e280c005 	add	ip, r0, #5
    while (len < size--)
   22350:	e247e005 	sub	lr, r7, #5
   22354:	0a000006 	beq	22374 <iaddr+0x328>
   22358:	e3530007 	cmp	r3, #7
        *str++ = ' ';
   2235c:	e5c02005 	strb	r2, [r0, #5]
   22360:	e280c006 	add	ip, r0, #6
    while (len < size--)
   22364:	e247e006 	sub	lr, r7, #6
        *str++ = ' ';
   22368:	05c02006 	strbeq	r2, [r0, #6]
    while (len < size--)
   2236c:	0247e007 	subeq	lr, r7, #7
        *str++ = ' ';
   22370:	0280c007 	addeq	ip, r0, #7
    while (len < size--)
   22374:	e3a01000 	mov	r1, #0
        *str++ = ' ';
   22378:	e28f7e2e 	add	r7, pc, #736	; 0x2e0
   2237c:	e1c760d0 	ldrd	r6, [r7]
   22380:	e0444003 	sub	r4, r4, r3
   22384:	e1a081a4 	lsr	r8, r4, #3
   22388:	e0803003 	add	r3, r0, r3
   2238c:	e28c2001 	add	r2, ip, #1
   22390:	e2811001 	add	r1, r1, #1
   22394:	e1510008 	cmp	r1, r8
   22398:	e2820007 	add	r0, r2, #7
   2239c:	e0c360f8 	strd	r6, [r3], #8
   223a0:	e2822008 	add	r2, r2, #8
   223a4:	3afffff9 	bcc	22390 <iaddr+0x344>
   223a8:	e3c47007 	bic	r7, r4, #7
   223ac:	e1540007 	cmp	r4, r7
   223b0:	e08c3007 	add	r3, ip, r7
   223b4:	e04e7007 	sub	r7, lr, r7
   223b8:	0a000041 	beq	224c4 <iaddr+0x478>
   223bc:	e3a02020 	mov	r2, #32
    while (len < size--)
   223c0:	e1550007 	cmp	r5, r7
        *str++ = ' ';
   223c4:	e5c32000 	strb	r2, [r3]
   223c8:	e2830001 	add	r0, r3, #1
    while (len < size--)
   223cc:	e2471001 	sub	r1, r7, #1
   223d0:	aa00003b 	bge	224c4 <iaddr+0x478>
   223d4:	e1550001 	cmp	r5, r1
        *str++ = ' ';
   223d8:	e5c32001 	strb	r2, [r3, #1]
   223dc:	e2830002 	add	r0, r3, #2
    while (len < size--)
   223e0:	e2471002 	sub	r1, r7, #2
   223e4:	aa000036 	bge	224c4 <iaddr+0x478>
   223e8:	e1550001 	cmp	r5, r1
        *str++ = ' ';
   223ec:	e5c32002 	strb	r2, [r3, #2]
   223f0:	e2830003 	add	r0, r3, #3
    while (len < size--)
   223f4:	e2471003 	sub	r1, r7, #3
   223f8:	aa000031 	bge	224c4 <iaddr+0x478>
   223fc:	e1550001 	cmp	r5, r1
        *str++ = ' ';
   22400:	e5c32003 	strb	r2, [r3, #3]
   22404:	e2830004 	add	r0, r3, #4
    while (len < size--)
   22408:	e2471004 	sub	r1, r7, #4
   2240c:	aa00002c 	bge	224c4 <iaddr+0x478>
   22410:	e1550001 	cmp	r5, r1
        *str++ = ' ';
   22414:	e5c32004 	strb	r2, [r3, #4]
   22418:	e2830005 	add	r0, r3, #5
    while (len < size--)
   2241c:	e2471005 	sub	r1, r7, #5
   22420:	aa000027 	bge	224c4 <iaddr+0x478>
   22424:	e1550001 	cmp	r5, r1
        *str++ = ' ';
   22428:	e5c32005 	strb	r2, [r3, #5]
   2242c:	e2830006 	add	r0, r3, #6
    while (len < size--)
   22430:	e2471006 	sub	r1, r7, #6
   22434:	aa000022 	bge	224c4 <iaddr+0x478>
   22438:	e1550001 	cmp	r5, r1
        *str++ = ' ';
   2243c:	e5c32006 	strb	r2, [r3, #6]
   22440:	e2830007 	add	r0, r3, #7
    while (len < size--)
   22444:	e2471007 	sub	r1, r7, #7
   22448:	aa00001d 	bge	224c4 <iaddr+0x478>
   2244c:	e1550001 	cmp	r5, r1
        *str++ = ' ';
   22450:	e5c32007 	strb	r2, [r3, #7]
   22454:	e2830008 	add	r0, r3, #8
    while (len < size--)
   22458:	e2471008 	sub	r1, r7, #8
   2245c:	aa000018 	bge	224c4 <iaddr+0x478>
   22460:	e1550001 	cmp	r5, r1
        *str++ = ' ';
   22464:	e5c32008 	strb	r2, [r3, #8]
   22468:	e2830009 	add	r0, r3, #9
    while (len < size--)
   2246c:	e2471009 	sub	r1, r7, #9
   22470:	aa000013 	bge	224c4 <iaddr+0x478>
   22474:	e1550001 	cmp	r5, r1
        *str++ = ' ';
   22478:	e5c32009 	strb	r2, [r3, #9]
   2247c:	e283000a 	add	r0, r3, #10
    while (len < size--)
   22480:	e247100a 	sub	r1, r7, #10
   22484:	aa00000e 	bge	224c4 <iaddr+0x478>
   22488:	e1550001 	cmp	r5, r1
        *str++ = ' ';
   2248c:	e5c3200a 	strb	r2, [r3, #10]
   22490:	e283000b 	add	r0, r3, #11
    while (len < size--)
   22494:	e247100b 	sub	r1, r7, #11
   22498:	aa000009 	bge	224c4 <iaddr+0x478>
   2249c:	e1550001 	cmp	r5, r1
        *str++ = ' ';
   224a0:	e5c3200b 	strb	r2, [r3, #11]
    while (len < size--)
   224a4:	e247700c 	sub	r7, r7, #12
        *str++ = ' ';
   224a8:	e283000c 	add	r0, r3, #12
    while (len < size--)
   224ac:	aa000004 	bge	224c4 <iaddr+0x478>
   224b0:	e1550007 	cmp	r5, r7
        *str++ = ' ';
   224b4:	e5c3200c 	strb	r2, [r3, #12]
   224b8:	e283000d 	add	r0, r3, #13
   224bc:	b5c3200d 	strblt	r2, [r3, #13]
   224c0:	b283000e 	addlt	r0, r3, #14

    return str;
}
   224c4:	e28dd018 	add	sp, sp, #24
   224c8:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
            if (n >= 100) {
   224cc:	e3520063 	cmp	r2, #99	; 0x63
   224d0:	da000019 	ble	2253c <iaddr+0x4f0>
                tmp[len++] = lower_digits[n / 100];
   224d4:	e59f818c 	ldr	r8, [pc, #396]	; 22668 <iaddr+0x61c>
   224d8:	e59f0190 	ldr	r0, [pc, #400]	; 22670 <iaddr+0x624>
   224dc:	e0898892 	umull	r8, r9, r2, r8
   224e0:	e1a072a9 	lsr	r7, r9, #5
                n = n % 100;
   224e4:	e087e107 	add	lr, r7, r7, lsl #2
   224e8:	e08ee10e 	add	lr, lr, lr, lsl #2
                tmp[len++] = lower_digits[n / 10];
   224ec:	e59f8178 	ldr	r8, [pc, #376]	; 2266c <iaddr+0x620>
                n = n % 100;
   224f0:	e042210e 	sub	r2, r2, lr, lsl #2
                tmp[len++] = lower_digits[n / 10];
   224f4:	e0898892 	umull	r8, r9, r2, r8
   224f8:	e1a0e1a9 	lsr	lr, r9, #3
                tmp[len++] = lower_digits[n / 100];
   224fc:	e7d08007 	ldrb	r8, [r0, r7]
   22500:	e28d9018 	add	r9, sp, #24
                tmp[len++] = lower_digits[n / 10];
   22504:	e7d0700e 	ldrb	r7, [r0, lr]
                tmp[len++] = lower_digits[n / 100];
   22508:	e0891001 	add	r1, r9, r1
                tmp[len++] = lower_digits[n / 10];
   2250c:	e0895005 	add	r5, r9, r5
                n = n % 10;
   22510:	e08ee10e 	add	lr, lr, lr, lsl #2
                tmp[len++] = lower_digits[n / 100];
   22514:	e5418018 	strb	r8, [r1, #-24]	; 0xffffffe8
                n = n % 10;
   22518:	e042208e 	sub	r2, r2, lr, lsl #1
                tmp[len++] = lower_digits[n / 10];
   2251c:	e5457018 	strb	r7, [r5, #-24]	; 0xffffffe8
   22520:	e2831003 	add	r1, r3, #3
   22524:	e2835004 	add	r5, r3, #4
            tmp[len++] = lower_digits[n];
   22528:	e7d03002 	ldrb	r3, [r0, r2]
   2252c:	e28d2018 	add	r2, sp, #24
   22530:	e0821001 	add	r1, r2, r1
   22534:	e5413018 	strb	r3, [r1, #-24]	; 0xffffffe8
   22538:	eaffff46 	b	22258 <iaddr+0x20c>
            } else if (n >= 10) {
   2253c:	e3520009 	cmp	r2, #9
   22540:	da00003f 	ble	22644 <iaddr+0x5f8>
                tmp[len++] = lower_digits[n / 10];
   22544:	e59f8120 	ldr	r8, [pc, #288]	; 2266c <iaddr+0x620>
   22548:	e59f0120 	ldr	r0, [pc, #288]	; 22670 <iaddr+0x624>
   2254c:	e0898892 	umull	r8, r9, r2, r8
   22550:	e1a0e1a9 	lsr	lr, r9, #3
   22554:	e7d0800e 	ldrb	r8, [r0, lr]
   22558:	e28d7018 	add	r7, sp, #24
   2255c:	e0877001 	add	r7, r7, r1
                n = n % 10;
   22560:	e08ee10e 	add	lr, lr, lr, lsl #2
   22564:	e1a01005 	mov	r1, r5
                tmp[len++] = lower_digits[n / 10];
   22568:	e5478018 	strb	r8, [r7, #-24]	; 0xffffffe8
                n = n % 10;
   2256c:	e2835003 	add	r5, r3, #3
   22570:	e042208e 	sub	r2, r2, lr, lsl #1
   22574:	eaffffeb 	b	22528 <iaddr+0x4dc>
            } else if (n >= 10) {
   22578:	e3550009 	cmp	r5, #9
   2257c:	da00002e 	ble	2263c <iaddr+0x5f0>
                tmp[len++] = lower_digits[n / 10];
   22580:	e59f80e4 	ldr	r8, [pc, #228]	; 2266c <iaddr+0x620>
   22584:	e59f00e4 	ldr	r0, [pc, #228]	; 22670 <iaddr+0x624>
   22588:	e0898895 	umull	r8, r9, r5, r8
   2258c:	e1a071a9 	lsr	r7, r9, #3
   22590:	e7d09007 	ldrb	r9, [r0, r7]
   22594:	e28d8018 	add	r8, sp, #24
   22598:	e088800e 	add	r8, r8, lr
                n = n % 10;
   2259c:	e0877107 	add	r7, r7, r7, lsl #2
   225a0:	e1a0e003 	mov	lr, r3
                tmp[len++] = lower_digits[n / 10];
   225a4:	e5489018 	strb	r9, [r8, #-24]	; 0xffffffe8
                n = n % 10;
   225a8:	e2823003 	add	r3, r2, #3
   225ac:	e0455087 	sub	r5, r5, r7, lsl #1
   225b0:	eaffff12 	b	22200 <iaddr+0x1b4>
            } else if (n >= 10) {
   225b4:	e3550009 	cmp	r5, #9
   225b8:	da00001d 	ble	22634 <iaddr+0x5e8>
                tmp[len++] = lower_digits[n / 10];
   225bc:	e59f80a8 	ldr	r8, [pc, #168]	; 2266c <iaddr+0x620>
   225c0:	e59f00a8 	ldr	r0, [pc, #168]	; 22670 <iaddr+0x624>
   225c4:	e0898895 	umull	r8, r9, r5, r8
   225c8:	e1a071a9 	lsr	r7, r9, #3
   225cc:	e7d09007 	ldrb	r9, [r0, r7]
   225d0:	e28d8018 	add	r8, sp, #24
   225d4:	e0888003 	add	r8, r8, r3
                n = n % 10;
   225d8:	e0877107 	add	r7, r7, r7, lsl #2
   225dc:	e1a03002 	mov	r3, r2
                tmp[len++] = lower_digits[n / 10];
   225e0:	e5489018 	strb	r9, [r8, #-24]	; 0xffffffe8
                n = n % 10;
   225e4:	e28e2003 	add	r2, lr, #3
   225e8:	e0455087 	sub	r5, r5, r7, lsl #1
   225ec:	eafffeda 	b	2215c <iaddr+0x110>
            } else if (n >= 10) {
   225f0:	e3550009 	cmp	r5, #9
   225f4:	da00000a 	ble	22624 <iaddr+0x5d8>
                tmp[len++] = lower_digits[n / 10];
   225f8:	e59f206c 	ldr	r2, [pc, #108]	; 2266c <iaddr+0x620>
   225fc:	e59f006c 	ldr	r0, [pc, #108]	; 22670 <iaddr+0x624>
   22600:	e0832295 	umull	r2, r3, r5, r2
   22604:	e1a031a3 	lsr	r3, r3, #3
   22608:	e7d02003 	ldrb	r2, [r0, r3]
                n = n % 10;
   2260c:	e0833103 	add	r3, r3, r3, lsl #2
   22610:	e0455083 	sub	r5, r5, r3, lsl #1
                tmp[len++] = lower_digits[n / 10];
   22614:	e5cd2000 	strb	r2, [sp]
                n = n % 10;
   22618:	e3a0e002 	mov	lr, #2
   2261c:	e3a03001 	mov	r3, #1
   22620:	eafffea5 	b	220bc <iaddr+0x70>
            } else if (n >= 10) {
   22624:	e3a0e001 	mov	lr, #1
    len = 0;
   22628:	e3a03000 	mov	r3, #0
   2262c:	e59f003c 	ldr	r0, [pc, #60]	; 22670 <iaddr+0x624>
   22630:	eafffea1 	b	220bc <iaddr+0x70>
   22634:	e59f0034 	ldr	r0, [pc, #52]	; 22670 <iaddr+0x624>
   22638:	eafffec7 	b	2215c <iaddr+0x110>
   2263c:	e59f002c 	ldr	r0, [pc, #44]	; 22670 <iaddr+0x624>
   22640:	eafffeee 	b	22200 <iaddr+0x1b4>
   22644:	e59f0024 	ldr	r0, [pc, #36]	; 22670 <iaddr+0x624>
   22648:	eaffffb6 	b	22528 <iaddr+0x4dc>
    while (len < size--)
   2264c:	e1a0e007 	mov	lr, r7
   22650:	e1a0c000 	mov	ip, r0
   22654:	eaffff46 	b	22374 <iaddr+0x328>
   22658:	e1a03000 	mov	r3, r0
   2265c:	eaffff56 	b	223bc <iaddr+0x370>
   22660:	20202020 	.word	0x20202020
   22664:	20202020 	.word	0x20202020
   22668:	51eb851f 	.word	0x51eb851f
   2266c:	cccccccd 	.word	0xcccccccd
   22670:	0005354c 	.word	0x0005354c

00022674 <ee_vsprintf>:

#pragma GCC push_options
#pragma GCC optimize ("O0")

int ee_vsprintf(char* buf, const char* fmt, va_list args)
{
   22674:	e92d4800 	push	{fp, lr}
   22678:	e28db004 	add	fp, sp, #4
   2267c:	e24dd040 	sub	sp, sp, #64	; 0x40
   22680:	e50b0030 	str	r0, [fp, #-48]	; 0xffffffd0
   22684:	e50b1034 	str	r1, [fp, #-52]	; 0xffffffcc
   22688:	e50b2038 	str	r2, [fp, #-56]	; 0xffffffc8

    int field_width; // Width of output field
    int precision; // Min. # of digits for integers; max number of chars for from string
    int qualifier; // 'h', 'l', or 'L' for integer fields

    for (str = buf; *fmt; fmt++) {
   2268c:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
   22690:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
   22694:	ea0001b6 	b	22d74 <ee_vsprintf+0x700>
        if (*fmt != '%') {
   22698:	e51b3034 	ldr	r3, [fp, #-52]	; 0xffffffcc
   2269c:	e5d33000 	ldrb	r3, [r3]
   226a0:	e3530025 	cmp	r3, #37	; 0x25
   226a4:	0a000006 	beq	226c4 <ee_vsprintf+0x50>
            *str++ = *fmt;
   226a8:	e51b2034 	ldr	r2, [fp, #-52]	; 0xffffffcc
   226ac:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   226b0:	e2831001 	add	r1, r3, #1
   226b4:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
   226b8:	e5d22000 	ldrb	r2, [r2]
   226bc:	e5c32000 	strb	r2, [r3]
            continue;
   226c0:	ea0001a8 	b	22d68 <ee_vsprintf+0x6f4>
        }

        // Process flags
        flags = 0;
   226c4:	e3a03000 	mov	r3, #0
   226c8:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
    repeat:
        fmt++; // This also skips first '%'
   226cc:	e51b3034 	ldr	r3, [fp, #-52]	; 0xffffffcc
   226d0:	e2833001 	add	r3, r3, #1
   226d4:	e50b3034 	str	r3, [fp, #-52]	; 0xffffffcc
        switch (*fmt) {
   226d8:	e51b3034 	ldr	r3, [fp, #-52]	; 0xffffffcc
   226dc:	e5d33000 	ldrb	r3, [r3]
   226e0:	e2433020 	sub	r3, r3, #32
   226e4:	e3530010 	cmp	r3, #16
   226e8:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
   226ec:	ea000024 	b	22784 <ee_vsprintf+0x110>
   226f0:	00022754 	.word	0x00022754
   226f4:	00022784 	.word	0x00022784
   226f8:	00022784 	.word	0x00022784
   226fc:	00022764 	.word	0x00022764
   22700:	00022784 	.word	0x00022784
   22704:	00022784 	.word	0x00022784
   22708:	00022784 	.word	0x00022784
   2270c:	00022784 	.word	0x00022784
   22710:	00022784 	.word	0x00022784
   22714:	00022784 	.word	0x00022784
   22718:	00022784 	.word	0x00022784
   2271c:	00022744 	.word	0x00022744
   22720:	00022784 	.word	0x00022784
   22724:	00022734 	.word	0x00022734
   22728:	00022784 	.word	0x00022784
   2272c:	00022784 	.word	0x00022784
   22730:	00022774 	.word	0x00022774
        case '-':
            flags |= LEFT;
   22734:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   22738:	e3833010 	orr	r3, r3, #16
   2273c:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
            goto repeat;
   22740:	eaffffe1 	b	226cc <ee_vsprintf+0x58>
        case '+':
            flags |= PLUS;
   22744:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   22748:	e3833004 	orr	r3, r3, #4
   2274c:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
            goto repeat;
   22750:	eaffffdd 	b	226cc <ee_vsprintf+0x58>
        case ' ':
            flags |= SPACE;
   22754:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   22758:	e3833008 	orr	r3, r3, #8
   2275c:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
            goto repeat;
   22760:	eaffffd9 	b	226cc <ee_vsprintf+0x58>
        case '#':
            flags |= HEX_PREP;
   22764:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   22768:	e3833020 	orr	r3, r3, #32
   2276c:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
            goto repeat;
   22770:	eaffffd5 	b	226cc <ee_vsprintf+0x58>
        case '0':
            flags |= ZEROPAD;
   22774:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   22778:	e3833001 	orr	r3, r3, #1
   2277c:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
            goto repeat;
   22780:	eaffffd1 	b	226cc <ee_vsprintf+0x58>
        }

        // Get field width
        field_width = -1;
   22784:	e3e03000 	mvn	r3, #0
   22788:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
        if (is_digit(*fmt))
   2278c:	e51b3034 	ldr	r3, [fp, #-52]	; 0xffffffcc
   22790:	e5d33000 	ldrb	r3, [r3]
   22794:	e353002f 	cmp	r3, #47	; 0x2f
   22798:	9a000008 	bls	227c0 <ee_vsprintf+0x14c>
   2279c:	e51b3034 	ldr	r3, [fp, #-52]	; 0xffffffcc
   227a0:	e5d33000 	ldrb	r3, [r3]
   227a4:	e3530039 	cmp	r3, #57	; 0x39
   227a8:	8a000004 	bhi	227c0 <ee_vsprintf+0x14c>
            field_width = ee_skip_atoi(&fmt);
   227ac:	e24b3034 	sub	r3, fp, #52	; 0x34
   227b0:	e1a00003 	mov	r0, r3
   227b4:	ebfffc92 	bl	21a04 <ee_skip_atoi>
   227b8:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
   227bc:	ea000014 	b	22814 <ee_vsprintf+0x1a0>
        else if (*fmt == '*') {
   227c0:	e51b3034 	ldr	r3, [fp, #-52]	; 0xffffffcc
   227c4:	e5d33000 	ldrb	r3, [r3]
   227c8:	e353002a 	cmp	r3, #42	; 0x2a
   227cc:	1a000010 	bne	22814 <ee_vsprintf+0x1a0>
            fmt++;
   227d0:	e51b3034 	ldr	r3, [fp, #-52]	; 0xffffffcc
   227d4:	e2833001 	add	r3, r3, #1
   227d8:	e50b3034 	str	r3, [fp, #-52]	; 0xffffffcc
            field_width = va_arg(args, int);
   227dc:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
   227e0:	e2832004 	add	r2, r3, #4
   227e4:	e50b2038 	str	r2, [fp, #-56]	; 0xffffffc8
   227e8:	e5933000 	ldr	r3, [r3]
   227ec:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
            if (field_width < 0) {
   227f0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   227f4:	e3530000 	cmp	r3, #0
   227f8:	aa000005 	bge	22814 <ee_vsprintf+0x1a0>
                field_width = -field_width;
   227fc:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   22800:	e2633000 	rsb	r3, r3, #0
   22804:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
                flags |= LEFT;
   22808:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   2280c:	e3833010 	orr	r3, r3, #16
   22810:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
            }
        }

        // Get the precision
        precision = -1;
   22814:	e3e03000 	mvn	r3, #0
   22818:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
        if (*fmt == '.') {
   2281c:	e51b3034 	ldr	r3, [fp, #-52]	; 0xffffffcc
   22820:	e5d33000 	ldrb	r3, [r3]
   22824:	e353002e 	cmp	r3, #46	; 0x2e
   22828:	1a000020 	bne	228b0 <ee_vsprintf+0x23c>
            ++fmt;
   2282c:	e51b3034 	ldr	r3, [fp, #-52]	; 0xffffffcc
   22830:	e2833001 	add	r3, r3, #1
   22834:	e50b3034 	str	r3, [fp, #-52]	; 0xffffffcc
            if (is_digit(*fmt))
   22838:	e51b3034 	ldr	r3, [fp, #-52]	; 0xffffffcc
   2283c:	e5d33000 	ldrb	r3, [r3]
   22840:	e353002f 	cmp	r3, #47	; 0x2f
   22844:	9a000008 	bls	2286c <ee_vsprintf+0x1f8>
   22848:	e51b3034 	ldr	r3, [fp, #-52]	; 0xffffffcc
   2284c:	e5d33000 	ldrb	r3, [r3]
   22850:	e3530039 	cmp	r3, #57	; 0x39
   22854:	8a000004 	bhi	2286c <ee_vsprintf+0x1f8>
                precision = ee_skip_atoi(&fmt);
   22858:	e24b3034 	sub	r3, fp, #52	; 0x34
   2285c:	e1a00003 	mov	r0, r3
   22860:	ebfffc67 	bl	21a04 <ee_skip_atoi>
   22864:	e50b0024 	str	r0, [fp, #-36]	; 0xffffffdc
   22868:	ea00000b 	b	2289c <ee_vsprintf+0x228>
            else if (*fmt == '*') {
   2286c:	e51b3034 	ldr	r3, [fp, #-52]	; 0xffffffcc
   22870:	e5d33000 	ldrb	r3, [r3]
   22874:	e353002a 	cmp	r3, #42	; 0x2a
   22878:	1a000007 	bne	2289c <ee_vsprintf+0x228>
                ++fmt;
   2287c:	e51b3034 	ldr	r3, [fp, #-52]	; 0xffffffcc
   22880:	e2833001 	add	r3, r3, #1
   22884:	e50b3034 	str	r3, [fp, #-52]	; 0xffffffcc
                precision = va_arg(args, int);
   22888:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
   2288c:	e2832004 	add	r2, r3, #4
   22890:	e50b2038 	str	r2, [fp, #-56]	; 0xffffffc8
   22894:	e5933000 	ldr	r3, [r3]
   22898:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
            }
            if (precision < 0)
   2289c:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
   228a0:	e3530000 	cmp	r3, #0
   228a4:	aa000001 	bge	228b0 <ee_vsprintf+0x23c>
                precision = 0;
   228a8:	e3a03000 	mov	r3, #0
   228ac:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
        }

        // Get the conversion qualifier
        qualifier = -1;
   228b0:	e3e03000 	mvn	r3, #0
   228b4:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8
        if (*fmt == 'l' || *fmt == 'L') {
   228b8:	e51b3034 	ldr	r3, [fp, #-52]	; 0xffffffcc
   228bc:	e5d33000 	ldrb	r3, [r3]
   228c0:	e353006c 	cmp	r3, #108	; 0x6c
   228c4:	0a000003 	beq	228d8 <ee_vsprintf+0x264>
   228c8:	e51b3034 	ldr	r3, [fp, #-52]	; 0xffffffcc
   228cc:	e5d33000 	ldrb	r3, [r3]
   228d0:	e353004c 	cmp	r3, #76	; 0x4c
   228d4:	1a000005 	bne	228f0 <ee_vsprintf+0x27c>
            qualifier = *fmt;
   228d8:	e51b3034 	ldr	r3, [fp, #-52]	; 0xffffffcc
   228dc:	e5d33000 	ldrb	r3, [r3]
   228e0:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8
            fmt++;
   228e4:	e51b3034 	ldr	r3, [fp, #-52]	; 0xffffffcc
   228e8:	e2833001 	add	r3, r3, #1
   228ec:	e50b3034 	str	r3, [fp, #-52]	; 0xffffffcc
        }

        // Default base
        base = 10;
   228f0:	e3a0300a 	mov	r3, #10
   228f4:	e50b3010 	str	r3, [fp, #-16]

        switch (*fmt) {
   228f8:	e51b3034 	ldr	r3, [fp, #-52]	; 0xffffffcc
   228fc:	e5d33000 	ldrb	r3, [r3]
   22900:	e2433041 	sub	r3, r3, #65	; 0x41
   22904:	e3530037 	cmp	r3, #55	; 0x37
   22908:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
   2290c:	ea0000da 	b	22c7c <ee_vsprintf+0x608>
   22910:	00022be0 	.word	0x00022be0
   22914:	00022c7c 	.word	0x00022c7c
   22918:	00022c7c 	.word	0x00022c7c
   2291c:	00022c7c 	.word	0x00022c7c
   22920:	00022c7c 	.word	0x00022c7c
   22924:	00022c7c 	.word	0x00022c7c
   22928:	00022c7c 	.word	0x00022c7c
   2292c:	00022c7c 	.word	0x00022c7c
   22930:	00022c7c 	.word	0x00022c7c
   22934:	00022c7c 	.word	0x00022c7c
   22938:	00022c7c 	.word	0x00022c7c
   2293c:	00022c7c 	.word	0x00022c7c
   22940:	00022c7c 	.word	0x00022c7c
   22944:	00022c7c 	.word	0x00022c7c
   22948:	00022c7c 	.word	0x00022c7c
   2294c:	00022c7c 	.word	0x00022c7c
   22950:	00022c7c 	.word	0x00022c7c
   22954:	00022c7c 	.word	0x00022c7c
   22958:	00022c7c 	.word	0x00022c7c
   2295c:	00022c7c 	.word	0x00022c7c
   22960:	00022c7c 	.word	0x00022c7c
   22964:	00022c7c 	.word	0x00022c7c
   22968:	00022c7c 	.word	0x00022c7c
   2296c:	00022c54 	.word	0x00022c54
   22970:	00022c7c 	.word	0x00022c7c
   22974:	00022c7c 	.word	0x00022c7c
   22978:	00022c7c 	.word	0x00022c7c
   2297c:	00022c7c 	.word	0x00022c7c
   22980:	00022c7c 	.word	0x00022c7c
   22984:	00022c7c 	.word	0x00022c7c
   22988:	00022c7c 	.word	0x00022c7c
   2298c:	00022c7c 	.word	0x00022c7c
   22990:	00022bec 	.word	0x00022bec
   22994:	00022c7c 	.word	0x00022c7c
   22998:	000229f0 	.word	0x000229f0
   2299c:	00022c6c 	.word	0x00022c6c
   229a0:	00022c7c 	.word	0x00022c7c
   229a4:	00022c7c 	.word	0x00022c7c
   229a8:	00022c7c 	.word	0x00022c7c
   229ac:	00022c7c 	.word	0x00022c7c
   229b0:	00022c6c 	.word	0x00022c6c
   229b4:	00022c7c 	.word	0x00022c7c
   229b8:	00022c7c 	.word	0x00022c7c
   229bc:	00022c7c 	.word	0x00022c7c
   229c0:	00022c7c 	.word	0x00022c7c
   229c4:	00022c7c 	.word	0x00022c7c
   229c8:	00022c48 	.word	0x00022c48
   229cc:	00022b84 	.word	0x00022b84
   229d0:	00022c7c 	.word	0x00022c7c
   229d4:	00022c7c 	.word	0x00022c7c
   229d8:	00022a88 	.word	0x00022a88
   229dc:	00022c7c 	.word	0x00022c7c
   229e0:	00022cdc 	.word	0x00022cdc
   229e4:	00022c7c 	.word	0x00022c7c
   229e8:	00022c7c 	.word	0x00022c7c
   229ec:	00022c60 	.word	0x00022c60
        case 'c':
            if (!(flags & LEFT))
   229f0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   229f4:	e2033010 	and	r3, r3, #16
   229f8:	e3530000 	cmp	r3, #0
   229fc:	1a00000b 	bne	22a30 <ee_vsprintf+0x3bc>
                while (--field_width > 0)
   22a00:	ea000004 	b	22a18 <ee_vsprintf+0x3a4>
                    *str++ = ' ';
   22a04:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   22a08:	e2832001 	add	r2, r3, #1
   22a0c:	e50b2014 	str	r2, [fp, #-20]	; 0xffffffec
   22a10:	e3a02020 	mov	r2, #32
   22a14:	e5c32000 	strb	r2, [r3]
                while (--field_width > 0)
   22a18:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   22a1c:	e2433001 	sub	r3, r3, #1
   22a20:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
   22a24:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   22a28:	e3530000 	cmp	r3, #0
   22a2c:	cafffff4 	bgt	22a04 <ee_vsprintf+0x390>
            *str++ = (unsigned char)va_arg(args, int);
   22a30:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
   22a34:	e2832004 	add	r2, r3, #4
   22a38:	e50b2038 	str	r2, [fp, #-56]	; 0xffffffc8
   22a3c:	e5931000 	ldr	r1, [r3]
   22a40:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   22a44:	e2832001 	add	r2, r3, #1
   22a48:	e50b2014 	str	r2, [fp, #-20]	; 0xffffffec
   22a4c:	e6ef2071 	uxtb	r2, r1
   22a50:	e5c32000 	strb	r2, [r3]
            while (--field_width > 0)
   22a54:	ea000004 	b	22a6c <ee_vsprintf+0x3f8>
                *str++ = ' ';
   22a58:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   22a5c:	e2832001 	add	r2, r3, #1
   22a60:	e50b2014 	str	r2, [fp, #-20]	; 0xffffffec
   22a64:	e3a02020 	mov	r2, #32
   22a68:	e5c32000 	strb	r2, [r3]
            while (--field_width > 0)
   22a6c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   22a70:	e2433001 	sub	r3, r3, #1
   22a74:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
   22a78:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   22a7c:	e3530000 	cmp	r3, #0
   22a80:	cafffff4 	bgt	22a58 <ee_vsprintf+0x3e4>
            continue;
   22a84:	ea0000b7 	b	22d68 <ee_vsprintf+0x6f4>

        case 's':
            s = va_arg(args, char*);
   22a88:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
   22a8c:	e2832004 	add	r2, r3, #4
   22a90:	e50b2038 	str	r2, [fp, #-56]	; 0xffffffc8
   22a94:	e5933000 	ldr	r3, [r3]
   22a98:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
            if (!s)
   22a9c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   22aa0:	e3530000 	cmp	r3, #0
   22aa4:	1a000001 	bne	22ab0 <ee_vsprintf+0x43c>
                s = "<NULL>";
   22aa8:	e59f32f8 	ldr	r3, [pc, #760]	; 22da8 <ee_vsprintf+0x734>
   22aac:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
            len = ee_strnlen(s, precision);
   22ab0:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
   22ab4:	e1a01003 	mov	r1, r3
   22ab8:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
   22abc:	ebfffbbd 	bl	219b8 <ee_strnlen>
   22ac0:	e1a03000 	mov	r3, r0
   22ac4:	e50b302c 	str	r3, [fp, #-44]	; 0xffffffd4
            if (!(flags & LEFT))
   22ac8:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   22acc:	e2033010 	and	r3, r3, #16
   22ad0:	e3530000 	cmp	r3, #0
   22ad4:	1a00000b 	bne	22b08 <ee_vsprintf+0x494>
                while (len < field_width--)
   22ad8:	ea000004 	b	22af0 <ee_vsprintf+0x47c>
                    *str++ = ' ';
   22adc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   22ae0:	e2832001 	add	r2, r3, #1
   22ae4:	e50b2014 	str	r2, [fp, #-20]	; 0xffffffec
   22ae8:	e3a02020 	mov	r2, #32
   22aec:	e5c32000 	strb	r2, [r3]
                while (len < field_width--)
   22af0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   22af4:	e2432001 	sub	r2, r3, #1
   22af8:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
   22afc:	e51b202c 	ldr	r2, [fp, #-44]	; 0xffffffd4
   22b00:	e1520003 	cmp	r2, r3
   22b04:	bafffff4 	blt	22adc <ee_vsprintf+0x468>
            for (i = 0; i < len; ++i)
   22b08:	e3a03000 	mov	r3, #0
   22b0c:	e50b300c 	str	r3, [fp, #-12]
   22b10:	ea00000a 	b	22b40 <ee_vsprintf+0x4cc>
                *str++ = *s++;
   22b14:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
   22b18:	e2823001 	add	r3, r2, #1
   22b1c:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
   22b20:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   22b24:	e2831001 	add	r1, r3, #1
   22b28:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
   22b2c:	e5d22000 	ldrb	r2, [r2]
   22b30:	e5c32000 	strb	r2, [r3]
            for (i = 0; i < len; ++i)
   22b34:	e51b300c 	ldr	r3, [fp, #-12]
   22b38:	e2833001 	add	r3, r3, #1
   22b3c:	e50b300c 	str	r3, [fp, #-12]
   22b40:	e51b200c 	ldr	r2, [fp, #-12]
   22b44:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
   22b48:	e1520003 	cmp	r2, r3
   22b4c:	bafffff0 	blt	22b14 <ee_vsprintf+0x4a0>
            while (len < field_width--)
   22b50:	ea000004 	b	22b68 <ee_vsprintf+0x4f4>
                *str++ = ' ';
   22b54:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   22b58:	e2832001 	add	r2, r3, #1
   22b5c:	e50b2014 	str	r2, [fp, #-20]	; 0xffffffec
   22b60:	e3a02020 	mov	r2, #32
   22b64:	e5c32000 	strb	r2, [r3]
            while (len < field_width--)
   22b68:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   22b6c:	e2432001 	sub	r2, r3, #1
   22b70:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
   22b74:	e51b202c 	ldr	r2, [fp, #-44]	; 0xffffffd4
   22b78:	e1520003 	cmp	r2, r3
   22b7c:	bafffff4 	blt	22b54 <ee_vsprintf+0x4e0>
            continue;
   22b80:	ea000078 	b	22d68 <ee_vsprintf+0x6f4>

        case 'p':
            if (field_width == -1) {
   22b84:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   22b88:	e3730001 	cmn	r3, #1
   22b8c:	1a000004 	bne	22ba4 <ee_vsprintf+0x530>
                field_width = 2 * sizeof(void*);
   22b90:	e3a03008 	mov	r3, #8
   22b94:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
                flags |= ZEROPAD;
   22b98:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   22b9c:	e3833001 	orr	r3, r3, #1
   22ba0:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
            }
            str = ee_number(str, (unsigned long)va_arg(args, void*), 16, field_width, precision, flags);
   22ba4:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
   22ba8:	e2832004 	add	r2, r3, #4
   22bac:	e50b2038 	str	r2, [fp, #-56]	; 0xffffffc8
   22bb0:	e5933000 	ldr	r3, [r3]
   22bb4:	e1a01003 	mov	r1, r3
   22bb8:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   22bbc:	e58d3004 	str	r3, [sp, #4]
   22bc0:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
   22bc4:	e58d3000 	str	r3, [sp]
   22bc8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   22bcc:	e3a02010 	mov	r2, #16
   22bd0:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
   22bd4:	ebfffb9c 	bl	21a4c <ee_number>
   22bd8:	e50b0014 	str	r0, [fp, #-20]	; 0xffffffec
            continue;
   22bdc:	ea000061 	b	22d68 <ee_vsprintf+0x6f4>

        case 'A':
            flags |= UPPERCASE;
   22be0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   22be4:	e3833040 	orr	r3, r3, #64	; 0x40
   22be8:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
            /* fall through */
        case 'a':
            if (qualifier == 'l')
   22bec:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
   22bf0:	e353006c 	cmp	r3, #108	; 0x6c
   22bf4:	1a000009 	bne	22c20 <ee_vsprintf+0x5ac>
                str = eaddr(str, va_arg(args, unsigned char*), field_width, flags);
   22bf8:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
   22bfc:	e2832004 	add	r2, r3, #4
   22c00:	e50b2038 	str	r2, [fp, #-56]	; 0xffffffc8
   22c04:	e5931000 	ldr	r1, [r3]
   22c08:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   22c0c:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
   22c10:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
   22c14:	ebfffc3e 	bl	21d14 <eaddr>
   22c18:	e50b0014 	str	r0, [fp, #-20]	; 0xffffffec
            else
                str = iaddr(str, va_arg(args, unsigned char*), field_width, flags);
            continue;
   22c1c:	ea000051 	b	22d68 <ee_vsprintf+0x6f4>
                str = iaddr(str, va_arg(args, unsigned char*), field_width, flags);
   22c20:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
   22c24:	e2832004 	add	r2, r3, #4
   22c28:	e50b2038 	str	r2, [fp, #-56]	; 0xffffffc8
   22c2c:	e5931000 	ldr	r1, [r3]
   22c30:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   22c34:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
   22c38:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
   22c3c:	ebfffd02 	bl	2204c <iaddr>
   22c40:	e50b0014 	str	r0, [fp, #-20]	; 0xffffffec
            continue;
   22c44:	ea000047 	b	22d68 <ee_vsprintf+0x6f4>

        // Integer number formats - set up the flags and "break"
        case 'o':
            base = 8;
   22c48:	e3a03008 	mov	r3, #8
   22c4c:	e50b3010 	str	r3, [fp, #-16]
            break;
   22c50:	ea000022 	b	22ce0 <ee_vsprintf+0x66c>

        case 'X':
            flags |= UPPERCASE;
   22c54:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   22c58:	e3833040 	orr	r3, r3, #64	; 0x40
   22c5c:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
            /* fall through */
        case 'x':
            base = 16;
   22c60:	e3a03010 	mov	r3, #16
   22c64:	e50b3010 	str	r3, [fp, #-16]
            break;
   22c68:	ea00001c 	b	22ce0 <ee_vsprintf+0x66c>

        case 'd':
        case 'i':
            flags |= SIGN;
   22c6c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   22c70:	e3833002 	orr	r3, r3, #2
   22c74:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4

        case 'u':
            break;
   22c78:	ea000017 	b	22cdc <ee_vsprintf+0x668>
            continue;

#endif

        default:
            if (*fmt != '%')
   22c7c:	e51b3034 	ldr	r3, [fp, #-52]	; 0xffffffcc
   22c80:	e5d33000 	ldrb	r3, [r3]
   22c84:	e3530025 	cmp	r3, #37	; 0x25
   22c88:	0a000004 	beq	22ca0 <ee_vsprintf+0x62c>
                *str++ = '%';
   22c8c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   22c90:	e2832001 	add	r2, r3, #1
   22c94:	e50b2014 	str	r2, [fp, #-20]	; 0xffffffec
   22c98:	e3a02025 	mov	r2, #37	; 0x25
   22c9c:	e5c32000 	strb	r2, [r3]
            if (*fmt)
   22ca0:	e51b3034 	ldr	r3, [fp, #-52]	; 0xffffffcc
   22ca4:	e5d33000 	ldrb	r3, [r3]
   22ca8:	e3530000 	cmp	r3, #0
   22cac:	0a000006 	beq	22ccc <ee_vsprintf+0x658>
                *str++ = *fmt;
   22cb0:	e51b2034 	ldr	r2, [fp, #-52]	; 0xffffffcc
   22cb4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   22cb8:	e2831001 	add	r1, r3, #1
   22cbc:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
   22cc0:	e5d22000 	ldrb	r2, [r2]
   22cc4:	e5c32000 	strb	r2, [r3]
            else
                --fmt;
            continue;
   22cc8:	ea000026 	b	22d68 <ee_vsprintf+0x6f4>
                --fmt;
   22ccc:	e51b3034 	ldr	r3, [fp, #-52]	; 0xffffffcc
   22cd0:	e2433001 	sub	r3, r3, #1
   22cd4:	e50b3034 	str	r3, [fp, #-52]	; 0xffffffcc
            continue;
   22cd8:	ea000022 	b	22d68 <ee_vsprintf+0x6f4>
            break;
   22cdc:	e320f000 	nop	{0}
        }

        if (qualifier == 'l')
   22ce0:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
   22ce4:	e353006c 	cmp	r3, #108	; 0x6c
   22ce8:	1a000005 	bne	22d04 <ee_vsprintf+0x690>
            num = va_arg(args, unsigned long);
   22cec:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
   22cf0:	e2832004 	add	r2, r3, #4
   22cf4:	e50b2038 	str	r2, [fp, #-56]	; 0xffffffc8
   22cf8:	e5933000 	ldr	r3, [r3]
   22cfc:	e50b3008 	str	r3, [fp, #-8]
   22d00:	ea00000e 	b	22d40 <ee_vsprintf+0x6cc>
        else if (flags & SIGN)
   22d04:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   22d08:	e2033002 	and	r3, r3, #2
   22d0c:	e3530000 	cmp	r3, #0
   22d10:	0a000005 	beq	22d2c <ee_vsprintf+0x6b8>
            num = va_arg(args, int);
   22d14:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
   22d18:	e2832004 	add	r2, r3, #4
   22d1c:	e50b2038 	str	r2, [fp, #-56]	; 0xffffffc8
   22d20:	e5933000 	ldr	r3, [r3]
   22d24:	e50b3008 	str	r3, [fp, #-8]
   22d28:	ea000004 	b	22d40 <ee_vsprintf+0x6cc>
        else
            num = va_arg(args, unsigned int);
   22d2c:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
   22d30:	e2832004 	add	r2, r3, #4
   22d34:	e50b2038 	str	r2, [fp, #-56]	; 0xffffffc8
   22d38:	e5933000 	ldr	r3, [r3]
   22d3c:	e50b3008 	str	r3, [fp, #-8]

        str = ee_number(str, num, base, field_width, precision, flags);
   22d40:	e51b1008 	ldr	r1, [fp, #-8]
   22d44:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   22d48:	e58d3004 	str	r3, [sp, #4]
   22d4c:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
   22d50:	e58d3000 	str	r3, [sp]
   22d54:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   22d58:	e51b2010 	ldr	r2, [fp, #-16]
   22d5c:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
   22d60:	ebfffb39 	bl	21a4c <ee_number>
   22d64:	e50b0014 	str	r0, [fp, #-20]	; 0xffffffec
    for (str = buf; *fmt; fmt++) {
   22d68:	e51b3034 	ldr	r3, [fp, #-52]	; 0xffffffcc
   22d6c:	e2833001 	add	r3, r3, #1
   22d70:	e50b3034 	str	r3, [fp, #-52]	; 0xffffffcc
   22d74:	e51b3034 	ldr	r3, [fp, #-52]	; 0xffffffcc
   22d78:	e5d33000 	ldrb	r3, [r3]
   22d7c:	e3530000 	cmp	r3, #0
   22d80:	1afffe44 	bne	22698 <ee_vsprintf+0x24>
    }

    *str = '\0';
   22d84:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   22d88:	e3a02000 	mov	r2, #0
   22d8c:	e5c32000 	strb	r2, [r3]
    return str - buf;
   22d90:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
   22d94:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
   22d98:	e0423003 	sub	r3, r2, r3
}
   22d9c:	e1a00003 	mov	r0, r3
   22da0:	e24bd004 	sub	sp, fp, #4
   22da4:	e8bd8800 	pop	{fp, pc}
   22da8:	00053544 	.word	0x00053544

00022dac <ee_sprintf>:
#pragma GCC pop_options

int ee_sprintf(char* outBuf, const char* fmt, ...)
{
   22dac:	e92d000e 	push	{r1, r2, r3}
   22db0:	e92d4010 	push	{r4, lr}
   22db4:	e1a04000 	mov	r4, r0
   22db8:	e24dd00c 	sub	sp, sp, #12
    va_list args;

    va_start(args, fmt);
   22dbc:	e28d3018 	add	r3, sp, #24
    ee_vsprintf(outBuf, fmt, args);
   22dc0:	e1a02003 	mov	r2, r3
   22dc4:	e59d1014 	ldr	r1, [sp, #20]
    va_start(args, fmt);
   22dc8:	e58d3004 	str	r3, [sp, #4]
    ee_vsprintf(outBuf, fmt, args);
   22dcc:	ebfffe28 	bl	22674 <ee_vsprintf>
    va_end(args);
    return (strlen(outBuf));
   22dd0:	e1a00004 	mov	r0, r4
   22dd4:	eb00aa10 	bl	4d61c <strlen>
}
   22dd8:	e28dd00c 	add	sp, sp, #12
   22ddc:	e8bd4010 	pop	{r4, lr}
   22de0:	e28dd00c 	add	sp, sp, #12
   22de4:	e12fff1e 	bx	lr

00022de8 <fb_init>:
 * https://github.com/brianwiddas/pi-baremetal.git
 *
 */
FB_RETURN_TYPE fb_init(unsigned int ph_w, unsigned int ph_h, unsigned int vrt_w, unsigned int vrt_h,
    unsigned int bpp, void** pp_fb, unsigned int* pfbsize, unsigned int* pPitch)
{
   22de8:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}

    /* Get the display size */
    mailbuffer[0] = 8 * 4; // Total size
    mailbuffer[1] = 0; // Request
    mailbuffer[2] = 0x40003; // Display size
    mailbuffer[3] = 8; // Buffer size
   22dec:	e3a06008 	mov	r6, #8
    mailbuffer[1] = 0; // Request
   22df0:	e3a05000 	mov	r5, #0
    mailbuffer[0] = 8 * 4; // Total size
   22df4:	e3a0e020 	mov	lr, #32
{
   22df8:	e24dde42 	sub	sp, sp, #1056	; 0x420
   22dfc:	e28d401f 	add	r4, sp, #31
   22e00:	e3c4400f 	bic	r4, r4, #15
    mailbuffer[2] = 0x40003; // Display size
   22e04:	e59fc22c 	ldr	ip, [pc, #556]	; 23038 <fb_init+0x250>
{
   22e08:	e1a0a000 	mov	sl, r0
   22e0c:	e1a09001 	mov	r9, r1
    mailbuffer[4] = 0; // Request size
    mailbuffer[5] = 0; // Space for horizontal resolution
    mailbuffer[6] = 0; // Space for vertical resolution
    mailbuffer[7] = 0; // End tag

    if (POSTMAN_SUCCESS != postman_send(8, physical_mb))
   22e10:	e1a00006 	mov	r0, r6
   22e14:	e1a01004 	mov	r1, r4
    mailbuffer[0] = 8 * 4; // Total size
   22e18:	e584e000 	str	lr, [r4]
{
   22e1c:	e1a08002 	mov	r8, r2
    mailbuffer[1] = 0; // Request
   22e20:	e5845004 	str	r5, [r4, #4]
{
   22e24:	e1a07003 	mov	r7, r3
    mailbuffer[2] = 0x40003; // Display size
   22e28:	e584c008 	str	ip, [r4, #8]
    mailbuffer[3] = 8; // Buffer size
   22e2c:	e584600c 	str	r6, [r4, #12]
    mailbuffer[4] = 0; // Request size
   22e30:	e5845010 	str	r5, [r4, #16]
    mailbuffer[5] = 0; // Space for horizontal resolution
   22e34:	e5845014 	str	r5, [r4, #20]
    mailbuffer[6] = 0; // Space for vertical resolution
   22e38:	e5845018 	str	r5, [r4, #24]
    mailbuffer[7] = 0; // End tag
   22e3c:	e584501c 	str	r5, [r4, #28]
    if (POSTMAN_SUCCESS != postman_send(8, physical_mb))
   22e40:	eb00066f 	bl	24804 <postman_send>
   22e44:	e35000c0 	cmp	r0, #192	; 0xc0
   22e48:	0a000002 	beq	22e58 <fb_init+0x70>
        return FB_POSTMAN_FAIL;
   22e4c:	e3a00002 	mov	r0, #2
#ifdef FRAMEBUFFER_DEBUG
    uart_printf("Pitch: %d\r\n", *pPitch);
#endif

    return FB_SUCCESS;
}
   22e50:	e28dde42 	add	sp, sp, #1056	; 0x420
   22e54:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    if (POSTMAN_SUCCESS != postman_recv(8, &var))
   22e58:	e28d300c 	add	r3, sp, #12
   22e5c:	e1a01003 	mov	r1, r3
   22e60:	e1a00006 	mov	r0, r6
   22e64:	e58d3004 	str	r3, [sp, #4]
   22e68:	eb000630 	bl	24730 <postman_recv>
   22e6c:	e35000c0 	cmp	r0, #192	; 0xc0
   22e70:	1afffff5 	bne	22e4c <fb_init+0x64>
    if (mailbuffer[1] != 0x80000000)
   22e74:	e5943004 	ldr	r3, [r4, #4]
   22e78:	e3530102 	cmp	r3, #-2147483648	; 0x80000000
        return FB_GET_DISPLAY_SIZE_FAIL;
   22e7c:	13a00003 	movne	r0, #3
    if (mailbuffer[1] != 0x80000000)
   22e80:	1afffff2 	bne	22e50 <fb_init+0x68>
    mailbuffer[c++] = 4; // Value buffer size (bytes)
   22e84:	e3a03004 	mov	r3, #4
    mailbuffer[c++] = 16; // Alignment = 16
   22e88:	e3a0c010 	mov	ip, #16
    mailbuffer[0] = c * 4; // Buffer size
   22e8c:	e3a02058 	mov	r2, #88	; 0x58
    mailbuffer[c++] = 0x00048003; // Tag id (set physical size)
   22e90:	e59f11a4 	ldr	r1, [pc, #420]	; 2303c <fb_init+0x254>
    mailbuffer[c++] = 0x00048005; // Tag id (set depth)
   22e94:	e59f01a4 	ldr	r0, [pc, #420]	; 23040 <fb_init+0x258>
    mailbuffer[c++] = 0; // Request
   22e98:	e5845004 	str	r5, [r4, #4]
    mailbuffer[c++] = bpp; //  bpp
   22e9c:	e59de440 	ldr	lr, [sp, #1088]	; 0x440
    mailbuffer[c++] = 0x00048003; // Tag id (set physical size)
   22ea0:	e5841008 	str	r1, [r4, #8]
    mailbuffer[c++] = 8; // Value buffer size (bytes)
   22ea4:	e584600c 	str	r6, [r4, #12]
    mailbuffer[c++] = 0x00048004; // Tag id (set virtual size)
   22ea8:	e2811001 	add	r1, r1, #1
    mailbuffer[c++] = 8; // Req. + value length (bytes)
   22eac:	e5846010 	str	r6, [r4, #16]
    mailbuffer[c++] = ph_w; // Horizontal resolution
   22eb0:	e584a014 	str	sl, [r4, #20]
    mailbuffer[c++] = ph_h; // Vertical resolution
   22eb4:	e5849018 	str	r9, [r4, #24]
    mailbuffer[c++] = 0x00040001; // Tag id (allocate framebuffer)
   22eb8:	e59f9184 	ldr	r9, [pc, #388]	; 23044 <fb_init+0x25c>
    mailbuffer[c++] = 0x00048004; // Tag id (set virtual size)
   22ebc:	e584101c 	str	r1, [r4, #28]
    mailbuffer[c++] = 8; // Value buffer size (bytes)
   22ec0:	e5846020 	str	r6, [r4, #32]
    if (POSTMAN_SUCCESS != postman_send(8, physical_mb))
   22ec4:	e1a01004 	mov	r1, r4
    mailbuffer[c++] = 8; // Req. + value length (bytes)
   22ec8:	e5846024 	str	r6, [r4, #36]	; 0x24
    mailbuffer[c++] = vrt_w; // Horizontal resolution
   22ecc:	e5848028 	str	r8, [r4, #40]	; 0x28
    mailbuffer[c++] = vrt_h; // Vertical resolution
   22ed0:	e584702c 	str	r7, [r4, #44]	; 0x2c
    mailbuffer[c++] = 0x00048005; // Tag id (set depth)
   22ed4:	e5840030 	str	r0, [r4, #48]	; 0x30
    if (POSTMAN_SUCCESS != postman_send(8, physical_mb))
   22ed8:	e1a00006 	mov	r0, r6
    mailbuffer[c++] = 4; // Value buffer size (bytes)
   22edc:	e5843034 	str	r3, [r4, #52]	; 0x34
    mailbuffer[c++] = 4; // Req. + value length (bytes)
   22ee0:	e5843038 	str	r3, [r4, #56]	; 0x38
    mailbuffer[c++] = bpp; //  bpp
   22ee4:	e584e03c 	str	lr, [r4, #60]	; 0x3c
    mailbuffer[c++] = 0x00040001; // Tag id (allocate framebuffer)
   22ee8:	e5849040 	str	r9, [r4, #64]	; 0x40
    mailbuffer[c++] = 8; // Value buffer size (bytes)
   22eec:	e5846044 	str	r6, [r4, #68]	; 0x44
    mailbuffer[c++] = 4; // Req. + value length (bytes)
   22ef0:	e5843048 	str	r3, [r4, #72]	; 0x48
    mailbuffer[c++] = 16; // Alignment = 16
   22ef4:	e584c04c 	str	ip, [r4, #76]	; 0x4c
    mailbuffer[c++] = 0; // Space for response
   22ef8:	e5845050 	str	r5, [r4, #80]	; 0x50
    mailbuffer[c++] = 0; // Terminating tag
   22efc:	e5845054 	str	r5, [r4, #84]	; 0x54
    mailbuffer[0] = c * 4; // Buffer size
   22f00:	e5842000 	str	r2, [r4]
    if (POSTMAN_SUCCESS != postman_send(8, physical_mb))
   22f04:	eb00063e 	bl	24804 <postman_send>
   22f08:	e35000c0 	cmp	r0, #192	; 0xc0
   22f0c:	1affffce 	bne	22e4c <fb_init+0x64>
    if (POSTMAN_SUCCESS != postman_recv(8, &var))
   22f10:	e1a00006 	mov	r0, r6
   22f14:	e59d1004 	ldr	r1, [sp, #4]
   22f18:	eb000604 	bl	24730 <postman_recv>
   22f1c:	e35000c0 	cmp	r0, #192	; 0xc0
   22f20:	1affffc9 	bne	22e4c <fb_init+0x64>
    if (mailbuffer[1] != 0x80000000)
   22f24:	e5943004 	ldr	r3, [r4, #4]
   22f28:	e3530102 	cmp	r3, #-2147483648	; 0x80000000
    count = 2; /* First tag */
   22f2c:	03a03002 	moveq	r3, #2
    if (mailbuffer[1] != 0x80000000)
   22f30:	0a000005 	beq	22f4c <fb_init+0x164>
   22f34:	ea00003d 	b	23030 <fb_init+0x248>
        count += 3 + (mailbuffer[count + 1] >> 2);
   22f38:	e7942101 	ldr	r2, [r4, r1, lsl #2]
   22f3c:	e0833122 	add	r3, r3, r2, lsr #2
   22f40:	e2833003 	add	r3, r3, #3
        if (count > c)
   22f44:	e3530016 	cmp	r3, #22
   22f48:	8a000038 	bhi	23030 <fb_init+0x248>
    while ((var = mailbuffer[count])) {
   22f4c:	e7942103 	ldr	r2, [r4, r3, lsl #2]
        count += 3 + (mailbuffer[count + 1] >> 2);
   22f50:	e2831001 	add	r1, r3, #1
        if (var == 0x40001)
   22f54:	e3520000 	cmp	r2, #0
   22f58:	11520009 	cmpne	r2, r9
   22f5c:	1afffff5 	bne	22f38 <fb_init+0x150>
    if (mailbuffer[count + 2] != 0x80000008)
   22f60:	e2831002 	add	r1, r3, #2
   22f64:	e7941101 	ldr	r1, [r4, r1, lsl #2]
   22f68:	e58d200c 	str	r2, [sp, #12]
   22f6c:	e3510122 	cmp	r1, #-2147483640	; 0x80000008
   22f70:	1a00002e 	bne	23030 <fb_init+0x248>
    physical_screenbase = mailbuffer[count + 3];
   22f74:	e2832003 	add	r2, r3, #3
   22f78:	e7942102 	ldr	r2, [r4, r2, lsl #2]
    *pfbsize = mailbuffer[count + 4];
   22f7c:	e2833004 	add	r3, r3, #4
    if (physical_screenbase == 0 || *pfbsize == 0)
   22f80:	e16f0f12 	clz	r0, r2
    *pfbsize = mailbuffer[count + 4];
   22f84:	e7943103 	ldr	r3, [r4, r3, lsl #2]
    if (physical_screenbase == 0 || *pfbsize == 0)
   22f88:	e1a002a0 	lsr	r0, r0, #5
   22f8c:	e3530000 	cmp	r3, #0
   22f90:	11a05000 	movne	r5, r0
   22f94:	03a05001 	moveq	r5, #1
    *pfbsize = mailbuffer[count + 4];
   22f98:	e59d1448 	ldr	r1, [sp, #1096]	; 0x448
    if (physical_screenbase == 0 || *pfbsize == 0)
   22f9c:	e3550000 	cmp	r5, #0
    *pfbsize = mailbuffer[count + 4];
   22fa0:	e5813000 	str	r3, [r1]
        return FB_INVALID_TAG_DATA;
   22fa4:	13a00005 	movne	r0, #5
    if (physical_screenbase == 0 || *pfbsize == 0)
   22fa8:	1affffa8 	bne	22e50 <fb_init+0x68>
    mailbuffer[0] = 7 * 4; // Total size
   22fac:	e3a0101c 	mov	r1, #28
    mailbuffer[3] = 4; // Buffer size
   22fb0:	e3a03004 	mov	r3, #4
    *pp_fb = (void*)lowlev_mem_p2v(physical_screenbase);
   22fb4:	e59d0444 	ldr	r0, [sp, #1092]	; 0x444
    mailbuffer[0] = 7 * 4; // Total size
   22fb8:	e5841000 	str	r1, [r4]
    *pp_fb = (void*)lowlev_mem_p2v(physical_screenbase);
   22fbc:	e5802000 	str	r2, [r0]
    mailbuffer[2] = 0x40008; // Display size
   22fc0:	e59f2080 	ldr	r2, [pc, #128]	; 23048 <fb_init+0x260>
    if (POSTMAN_SUCCESS != postman_send(8, physical_mb))
   22fc4:	e1a01004 	mov	r1, r4
   22fc8:	e3a00008 	mov	r0, #8
    mailbuffer[1] = 0; // Request
   22fcc:	e5845004 	str	r5, [r4, #4]
    mailbuffer[2] = 0x40008; // Display size
   22fd0:	e5842008 	str	r2, [r4, #8]
    mailbuffer[3] = 4; // Buffer size
   22fd4:	e584300c 	str	r3, [r4, #12]
    mailbuffer[4] = 0; // Request size
   22fd8:	e5845010 	str	r5, [r4, #16]
    mailbuffer[5] = 0; // Space for pitch
   22fdc:	e5845014 	str	r5, [r4, #20]
    mailbuffer[6] = 0; // End tag
   22fe0:	e5845018 	str	r5, [r4, #24]
    if (POSTMAN_SUCCESS != postman_send(8, physical_mb))
   22fe4:	eb000606 	bl	24804 <postman_send>
   22fe8:	e35000c0 	cmp	r0, #192	; 0xc0
   22fec:	1affff96 	bne	22e4c <fb_init+0x64>
    if (POSTMAN_SUCCESS != postman_recv(8, &var))
   22ff0:	e59d1004 	ldr	r1, [sp, #4]
   22ff4:	e3a00008 	mov	r0, #8
   22ff8:	eb0005cc 	bl	24730 <postman_recv>
   22ffc:	e35000c0 	cmp	r0, #192	; 0xc0
   23000:	1affff91 	bne	22e4c <fb_init+0x64>
    if (mailbuffer[4] != 0x80000004)
   23004:	e5943010 	ldr	r3, [r4, #16]
   23008:	e3530112 	cmp	r3, #-2147483644	; 0x80000004
   2300c:	1a000005 	bne	23028 <fb_init+0x240>
    *pPitch = mailbuffer[5];
   23010:	e5943014 	ldr	r3, [r4, #20]
   23014:	e59d244c 	ldr	r2, [sp, #1100]	; 0x44c
    if (*pPitch == 0)
   23018:	e3530000 	cmp	r3, #0
    *pPitch = mailbuffer[5];
   2301c:	e5823000 	str	r3, [r2]
    return FB_SUCCESS;
   23020:	11a00005 	movne	r0, r5
    if (*pPitch == 0)
   23024:	1affff89 	bne	22e50 <fb_init+0x68>
        return FB_INVALID_PITCH;
   23028:	e3a00006 	mov	r0, #6
   2302c:	eaffff87 	b	22e50 <fb_init+0x68>
            return FB_FRAMEBUFFER_SETUP_FAIL;
   23030:	e3a00004 	mov	r0, #4
   23034:	eaffff85 	b	22e50 <fb_init+0x68>
   23038:	00040003 	.word	0x00040003
   2303c:	00048003 	.word	0x00048003
   23040:	00048005 	.word	0x00048005
   23044:	00040001 	.word	0x00040001
   23048:	00040008 	.word	0x00040008

0002304c <fb_release>:
    volatile unsigned int pBuffData[256] __attribute__((aligned(16)));
    unsigned int off;
    unsigned int respmsg;

    off = 1;
    pBuffData[off++] = 0; // Request
   2304c:	e3a03000 	mov	r3, #0
    pBuffData[off++] = 0x00048001; // Tag: blank
    pBuffData[off++] = 0; // response buffer size in bytes
    pBuffData[off++] = 0; // request size
    pBuffData[off++] = 0; // end tag

    pBuffData[0] = off * 4; // Total message size
   23050:	e3a02018 	mov	r2, #24
{
   23054:	e92d4010 	push	{r4, lr}
   23058:	e24dde41 	sub	sp, sp, #1040	; 0x410
   2305c:	e24dd008 	sub	sp, sp, #8
    pBuffData[off++] = 0x00048001; // Tag: blank
   23060:	e59f006c 	ldr	r0, [pc, #108]	; 230d4 <fb_release+0x88>
{
   23064:	e28d4017 	add	r4, sp, #23
   23068:	e3c4400f 	bic	r4, r4, #15
    pBuffData[off++] = 0; // Request
   2306c:	e5843004 	str	r3, [r4, #4]

    unsigned int physical_mb = lowlev_mem_v2p((unsigned int)pBuffData);
    if (POSTMAN_SUCCESS != postman_send(8, physical_mb))
   23070:	e1a01004 	mov	r1, r4
    pBuffData[off++] = 0x00048001; // Tag: blank
   23074:	e5840008 	str	r0, [r4, #8]
    if (POSTMAN_SUCCESS != postman_send(8, physical_mb))
   23078:	e3a00008 	mov	r0, #8
    pBuffData[off++] = 0; // response buffer size in bytes
   2307c:	e584300c 	str	r3, [r4, #12]
    pBuffData[off++] = 0; // request size
   23080:	e5843010 	str	r3, [r4, #16]
    pBuffData[off++] = 0; // end tag
   23084:	e5843014 	str	r3, [r4, #20]
    pBuffData[0] = off * 4; // Total message size
   23088:	e5842000 	str	r2, [r4]
    if (POSTMAN_SUCCESS != postman_send(8, physical_mb))
   2308c:	eb0005dc 	bl	24804 <postman_send>
   23090:	e35000c0 	cmp	r0, #192	; 0xc0
   23094:	0a000003 	beq	230a8 <fb_release+0x5c>
        return FB_POSTMAN_FAIL;
   23098:	e3a00002 	mov	r0, #2
    if (pBuffData[1] != 0x80000000) {
        return FB_ERROR;
    }

    return FB_SUCCESS;
}
   2309c:	e28dde41 	add	sp, sp, #1040	; 0x410
   230a0:	e28dd008 	add	sp, sp, #8
   230a4:	e8bd8010 	pop	{r4, pc}
    if (POSTMAN_SUCCESS != postman_recv(8, &respmsg))
   230a8:	e28d1004 	add	r1, sp, #4
   230ac:	e3a00008 	mov	r0, #8
   230b0:	eb00059e 	bl	24730 <postman_recv>
   230b4:	e35000c0 	cmp	r0, #192	; 0xc0
   230b8:	1afffff6 	bne	23098 <fb_release+0x4c>
    if (pBuffData[1] != 0x80000000) {
   230bc:	e5940004 	ldr	r0, [r4, #4]
        return FB_POSTMAN_FAIL;
   230c0:	e2900102 	adds	r0, r0, #-2147483648	; 0x80000000
   230c4:	13a00001 	movne	r0, #1
}
   230c8:	e28dde41 	add	sp, sp, #1040	; 0x410
   230cc:	e28dd008 	add	sp, sp, #8
   230d0:	e8bd8010 	pop	{r4, pc}
   230d4:	00048001 	.word	0x00048001

000230d8 <fb_set_grayscale_palette>:
    volatile unsigned int pBuffData[4096] __attribute__((aligned(16)));
    unsigned int off;
    unsigned int respmsg;

    off = 1;
    pBuffData[off++] = 0; // Request
   230d8:	e3a02000 	mov	r2, #0
    pBuffData[off++] = 0x0004800B; // Tag: blank
    pBuffData[off++] = 4; // response buffer size in bytes
   230dc:	e3a00004 	mov	r0, #4
    pBuffData[off++] = 1032; // request size
    pBuffData[off++] = 0; // first palette index
    pBuffData[off++] = 256; // num entries
   230e0:	e3a01c01 	mov	r1, #256	; 0x100

    unsigned int pi;
    for (pi = 0; pi < 256; ++pi) {
   230e4:	e1a03002 	mov	r3, r2
{
   230e8:	e92d4010 	push	{r4, lr}
   230ec:	e24dd901 	sub	sp, sp, #16384	; 0x4000
   230f0:	e24dd018 	sub	sp, sp, #24
   230f4:	e28d4017 	add	r4, sp, #23
    pBuffData[off++] = 0x0004800B; // Tag: blank
   230f8:	e59fc09c 	ldr	ip, [pc, #156]	; 2319c <fb_set_grayscale_palette+0xc4>
{
   230fc:	e3c4400f 	bic	r4, r4, #15
    pBuffData[off++] = 0; // Request
   23100:	e5842004 	str	r2, [r4, #4]
    pBuffData[off++] = 0x0004800B; // Tag: blank
   23104:	e584c008 	str	ip, [r4, #8]
    pBuffData[off++] = 4; // response buffer size in bytes
   23108:	e584000c 	str	r0, [r4, #12]
    pBuffData[off++] = 1032; // request size
   2310c:	e59f008c 	ldr	r0, [pc, #140]	; 231a0 <fb_set_grayscale_palette+0xc8>
   23110:	e5840010 	str	r0, [r4, #16]
    pBuffData[off++] = 0; // first palette index
   23114:	e5842014 	str	r2, [r4, #20]
    pBuffData[off++] = 256; // num entries
   23118:	e5841018 	str	r1, [r4, #24]
        unsigned int entry = 0;

        entry = (pi & 0xFF) << 16 | (pi & 0xFF) << 8 | (pi & 0xFF);
        entry = entry | 0xFF000000; //alpha
   2311c:	e38324ff 	orr	r2, r3, #-16777216	; 0xff000000
   23120:	e1822803 	orr	r2, r2, r3, lsl #16
   23124:	e1822403 	orr	r2, r2, r3, lsl #8
   23128:	e2831007 	add	r1, r3, #7
    for (pi = 0; pi < 256; ++pi) {
   2312c:	e2833001 	add	r3, r3, #1
   23130:	e3530c01 	cmp	r3, #256	; 0x100

        pBuffData[off++] = entry;
   23134:	e7842101 	str	r2, [r4, r1, lsl #2]
    for (pi = 0; pi < 256; ++pi) {
   23138:	1afffff7 	bne	2311c <fb_set_grayscale_palette+0x44>
    }
    pBuffData[off++] = 0; // end tag
   2313c:	e3a02000 	mov	r2, #0

    pBuffData[0] = off * 4; // Total message size
   23140:	e3a03e42 	mov	r3, #1056	; 0x420

    unsigned int physical_mb = lowlev_mem_v2p((unsigned int)pBuffData);
    if (POSTMAN_SUCCESS != postman_send(8, physical_mb))
   23144:	e1a01004 	mov	r1, r4
   23148:	e3a00008 	mov	r0, #8
    pBuffData[off++] = 0; // end tag
   2314c:	e584241c 	str	r2, [r4, #1052]	; 0x41c
    pBuffData[0] = off * 4; // Total message size
   23150:	e5843000 	str	r3, [r4]
    if (POSTMAN_SUCCESS != postman_send(8, physical_mb))
   23154:	eb0005aa 	bl	24804 <postman_send>
   23158:	e35000c0 	cmp	r0, #192	; 0xc0
   2315c:	0a000003 	beq	23170 <fb_set_grayscale_palette+0x98>
        return FB_POSTMAN_FAIL;
   23160:	e3a00002 	mov	r0, #2
    if (pBuffData[1] != 0x80000000) {
        return FB_ERROR;
    }

    return FB_SUCCESS;
}
   23164:	e28dd901 	add	sp, sp, #16384	; 0x4000
   23168:	e28dd018 	add	sp, sp, #24
   2316c:	e8bd8010 	pop	{r4, pc}
    if (POSTMAN_SUCCESS != postman_recv(8, &respmsg))
   23170:	e28d1004 	add	r1, sp, #4
   23174:	e3a00008 	mov	r0, #8
   23178:	eb00056c 	bl	24730 <postman_recv>
   2317c:	e35000c0 	cmp	r0, #192	; 0xc0
   23180:	1afffff6 	bne	23160 <fb_set_grayscale_palette+0x88>
    if (pBuffData[1] != 0x80000000) {
   23184:	e5940004 	ldr	r0, [r4, #4]
        return FB_POSTMAN_FAIL;
   23188:	e2900102 	adds	r0, r0, #-2147483648	; 0x80000000
   2318c:	13a00001 	movne	r0, #1
}
   23190:	e28dd901 	add	sp, sp, #16384	; 0x4000
   23194:	e28dd018 	add	sp, sp, #24
   23198:	e8bd8010 	pop	{r4, pc}
   2319c:	0004800b 	.word	0x0004800b
   231a0:	00000408 	.word	0x00000408

000231a4 <fb_set_xterm_palette>:
    volatile unsigned int pBuffData[4096] __attribute__((aligned(16)));
    unsigned int off;
    unsigned int respmsg;

    off = 1;
    pBuffData[off++] = 0; // Request
   231a4:	e3a03000 	mov	r3, #0
    pBuffData[off++] = 0x0004800B; // Tag: blank
    pBuffData[off++] = 4; // response buffer size in bytes
   231a8:	e3a00004 	mov	r0, #4
    pBuffData[off++] = 1032; // request size
    pBuffData[off++] = 0; // first palette index
    pBuffData[off++] = 256; // num entries
   231ac:	e3a02c01 	mov	r2, #256	; 0x100
   231b0:	e3a01007 	mov	r1, #7
{
   231b4:	e92d4010 	push	{r4, lr}
   231b8:	e24dd901 	sub	sp, sp, #16384	; 0x4000
   231bc:	e24dd018 	sub	sp, sp, #24
    pBuffData[off++] = 0x0004800B; // Tag: blank
   231c0:	e59fc0b8 	ldr	ip, [pc, #184]	; 23280 <fb_set_xterm_palette+0xdc>
{
   231c4:	e28d4017 	add	r4, sp, #23
   231c8:	e3c4400f 	bic	r4, r4, #15
    pBuffData[off++] = 0; // Request
   231cc:	e5843004 	str	r3, [r4, #4]
    pBuffData[off++] = 0x0004800B; // Tag: blank
   231d0:	e584c008 	str	ip, [r4, #8]
    pBuffData[off++] = 4; // response buffer size in bytes
   231d4:	e584000c 	str	r0, [r4, #12]
    pBuffData[off++] = 1032; // request size
   231d8:	e59f00a4 	ldr	r0, [pc, #164]	; 23284 <fb_set_xterm_palette+0xe0>
   231dc:	e59fc0a4 	ldr	ip, [pc, #164]	; 23288 <fb_set_xterm_palette+0xe4>

    unsigned int pi;
    for (pi = 0; pi < 256; ++pi) {
   231e0:	e59fe0a4 	ldr	lr, [pc, #164]	; 2328c <fb_set_xterm_palette+0xe8>
    pBuffData[off++] = 1032; // request size
   231e4:	e5840010 	str	r0, [r4, #16]
    pBuffData[off++] = 0; // first palette index
   231e8:	e5843014 	str	r3, [r4, #20]
    pBuffData[off++] = 256; // num entries
   231ec:	e5842018 	str	r2, [r4, #24]
        const unsigned int vc = xterm_colors[pi];
   231f0:	e5bc2004 	ldr	r2, [ip, #4]!
        // RGB -> BGR
        pBuffData[off++] = (vc << 16 & 0xFF0000) | (vc & 0x00FF00) | (vc >> 16 & 0x0000FF) | 0xFF000000;
   231f4:	e1a03802 	lsl	r3, r2, #16
   231f8:	e2020cff 	and	r0, r2, #65280	; 0xff00
   231fc:	e20338ff 	and	r3, r3, #16711680	; 0xff0000
   23200:	e38004ff 	orr	r0, r0, #-16777216	; 0xff000000
   23204:	e1833000 	orr	r3, r3, r0
   23208:	e1a02402 	lsl	r2, r2, #8
   2320c:	e1833c22 	orr	r3, r3, r2, lsr #24
   23210:	e7843101 	str	r3, [r4, r1, lsl #2]
   23214:	e2811001 	add	r1, r1, #1
    for (pi = 0; pi < 256; ++pi) {
   23218:	e151000e 	cmp	r1, lr
   2321c:	1afffff3 	bne	231f0 <fb_set_xterm_palette+0x4c>
    }
    pBuffData[off++] = 0; // end tag
   23220:	e3a02000 	mov	r2, #0

    pBuffData[0] = off * 4; // Total message size
   23224:	e3a03e42 	mov	r3, #1056	; 0x420

    unsigned int physical_mb = lowlev_mem_v2p((unsigned int)pBuffData);
    if (POSTMAN_SUCCESS != postman_send(8, physical_mb))
   23228:	e1a01004 	mov	r1, r4
   2322c:	e3a00008 	mov	r0, #8
    pBuffData[off++] = 0; // end tag
   23230:	e584241c 	str	r2, [r4, #1052]	; 0x41c
    pBuffData[0] = off * 4; // Total message size
   23234:	e5843000 	str	r3, [r4]
    if (POSTMAN_SUCCESS != postman_send(8, physical_mb))
   23238:	eb000571 	bl	24804 <postman_send>
   2323c:	e35000c0 	cmp	r0, #192	; 0xc0
   23240:	0a000003 	beq	23254 <fb_set_xterm_palette+0xb0>
        return FB_POSTMAN_FAIL;
   23244:	e3a00002 	mov	r0, #2
    if (pBuffData[1] != 0x80000000) {
        return FB_ERROR;
    }

    return FB_SUCCESS;
}
   23248:	e28dd901 	add	sp, sp, #16384	; 0x4000
   2324c:	e28dd018 	add	sp, sp, #24
   23250:	e8bd8010 	pop	{r4, pc}
    if (POSTMAN_SUCCESS != postman_recv(8, &respmsg))
   23254:	e28d1004 	add	r1, sp, #4
   23258:	e3a00008 	mov	r0, #8
   2325c:	eb000533 	bl	24730 <postman_recv>
   23260:	e35000c0 	cmp	r0, #192	; 0xc0
   23264:	1afffff6 	bne	23244 <fb_set_xterm_palette+0xa0>
    if (pBuffData[1] != 0x80000000) {
   23268:	e5940004 	ldr	r0, [r4, #4]
        return FB_POSTMAN_FAIL;
   2326c:	e2900102 	adds	r0, r0, #-2147483648	; 0x80000000
   23270:	13a00001 	movne	r0, #1
}
   23274:	e28dd901 	add	sp, sp, #16384	; 0x4000
   23278:	e28dd018 	add	sp, sp, #24
   2327c:	e8bd8010 	pop	{r4, pc}
   23280:	0004800b 	.word	0x0004800b
   23284:	00000408 	.word	0x00000408
   23288:	000535a0 	.word	0x000535a0
   2328c:	00000107 	.word	0x00000107

00023290 <fb_blank_screen>:
    volatile unsigned int pBuffData[256] __attribute__((aligned(16)));
    unsigned int off;
    unsigned int respmsg;

    off = 1;
    pBuffData[off++] = 0; // Request
   23290:	e3a03000 	mov	r3, #0
    pBuffData[off++] = 0x00040002; // Tag: blank
    pBuffData[off++] = 4; // response buffer size in bytes
   23294:	e3a02004 	mov	r2, #4
    pBuffData[off++] = 4; // request size
    pBuffData[off++] = blank; // state
    pBuffData[off++] = 0; // end tag

    pBuffData[0] = off * 4; // Total message size
   23298:	e3a0c01c 	mov	ip, #28
{
   2329c:	e92d4010 	push	{r4, lr}
   232a0:	e24dde41 	sub	sp, sp, #1040	; 0x410
   232a4:	e24dd008 	sub	sp, sp, #8
    pBuffData[off++] = 0x00040002; // Tag: blank
   232a8:	e59f1070 	ldr	r1, [pc, #112]	; 23320 <fb_blank_screen+0x90>
{
   232ac:	e28d4017 	add	r4, sp, #23
   232b0:	e3c4400f 	bic	r4, r4, #15
    pBuffData[off++] = 0; // Request
   232b4:	e5843004 	str	r3, [r4, #4]
    pBuffData[off++] = 0x00040002; // Tag: blank
   232b8:	e5841008 	str	r1, [r4, #8]
    pBuffData[off++] = 4; // response buffer size in bytes
   232bc:	e584200c 	str	r2, [r4, #12]

    unsigned int physical_mb = lowlev_mem_v2p((unsigned int)pBuffData);
    if (POSTMAN_SUCCESS != postman_send(8, physical_mb))
   232c0:	e1a01004 	mov	r1, r4
    pBuffData[off++] = 4; // request size
   232c4:	e5842010 	str	r2, [r4, #16]
    pBuffData[off++] = blank; // state
   232c8:	e5840014 	str	r0, [r4, #20]
    if (POSTMAN_SUCCESS != postman_send(8, physical_mb))
   232cc:	e3a00008 	mov	r0, #8
    pBuffData[off++] = 0; // end tag
   232d0:	e5843018 	str	r3, [r4, #24]
    pBuffData[0] = off * 4; // Total message size
   232d4:	e584c000 	str	ip, [r4]
    if (POSTMAN_SUCCESS != postman_send(8, physical_mb))
   232d8:	eb000549 	bl	24804 <postman_send>
   232dc:	e35000c0 	cmp	r0, #192	; 0xc0
   232e0:	0a000003 	beq	232f4 <fb_blank_screen+0x64>
        return FB_POSTMAN_FAIL;
   232e4:	e3a00002 	mov	r0, #2
    if (pBuffData[1] != 0x80000000) {
        return FB_ERROR;
    }

    return FB_SUCCESS;
}
   232e8:	e28dde41 	add	sp, sp, #1040	; 0x410
   232ec:	e28dd008 	add	sp, sp, #8
   232f0:	e8bd8010 	pop	{r4, pc}
    if (POSTMAN_SUCCESS != postman_recv(8, &respmsg))
   232f4:	e28d1004 	add	r1, sp, #4
   232f8:	e3a00008 	mov	r0, #8
   232fc:	eb00050b 	bl	24730 <postman_recv>
   23300:	e35000c0 	cmp	r0, #192	; 0xc0
   23304:	1afffff6 	bne	232e4 <fb_blank_screen+0x54>
    if (pBuffData[1] != 0x80000000) {
   23308:	e5940004 	ldr	r0, [r4, #4]
        return FB_POSTMAN_FAIL;
   2330c:	e2900102 	adds	r0, r0, #-2147483648	; 0x80000000
   23310:	13a00001 	movne	r0, #1
}
   23314:	e28dde41 	add	sp, sp, #1040	; 0x410
   23318:	e28dd008 	add	sp, sp, #8
   2331c:	e8bd8010 	pop	{r4, pc}
   23320:	00040002 	.word	0x00040002

00023324 <fb_set_depth>:

FB_RETURN_TYPE fb_set_depth(unsigned int* pDepth)
{
   23324:	e92d4070 	push	{r4, r5, r6, lr}
    unsigned int respmsg;

    off = 1;
    pBuffData[off++] = 0; // Request
    pBuffData[off++] = 0x00048005; // Tag: get pitch
    pBuffData[off++] = 4; // response buffer size in bytes
   23328:	e3a03004 	mov	r3, #4
    pBuffData[off++] = 0; // Request
   2332c:	e3a05000 	mov	r5, #0
    pBuffData[off++] = 4; // request size
    pBuffData[off++] = *pDepth; // response buffer
    pBuffData[off++] = 0; // end tag

    pBuffData[0] = off * 4; // Total message size
   23330:	e3a0201c 	mov	r2, #28
{
   23334:	e24dde41 	sub	sp, sp, #1040	; 0x410
   23338:	e24dd008 	sub	sp, sp, #8
   2333c:	e1a06000 	mov	r6, r0
   23340:	e28d4017 	add	r4, sp, #23
    pBuffData[off++] = *pDepth; // response buffer
   23344:	e5900000 	ldr	r0, [r0]
    pBuffData[off++] = 0x00048005; // Tag: get pitch
   23348:	e59f1058 	ldr	r1, [pc, #88]	; 233a8 <fb_set_depth+0x84>
{
   2334c:	e3c4400f 	bic	r4, r4, #15
    pBuffData[off++] = 0; // Request
   23350:	e5845004 	str	r5, [r4, #4]
    pBuffData[off++] = 0x00048005; // Tag: get pitch
   23354:	e5841008 	str	r1, [r4, #8]
    pBuffData[off++] = 4; // response buffer size in bytes
   23358:	e584300c 	str	r3, [r4, #12]

    postman_send(8, lowlev_mem_v2p((unsigned int)pBuffData));
   2335c:	e1a01004 	mov	r1, r4
    pBuffData[off++] = 4; // request size
   23360:	e5843010 	str	r3, [r4, #16]
    pBuffData[off++] = *pDepth; // response buffer
   23364:	e5840014 	str	r0, [r4, #20]
    postman_send(8, lowlev_mem_v2p((unsigned int)pBuffData));
   23368:	e3a00008 	mov	r0, #8
    pBuffData[off++] = 0; // end tag
   2336c:	e5845018 	str	r5, [r4, #24]
    pBuffData[0] = off * 4; // Total message size
   23370:	e5842000 	str	r2, [r4]
    postman_send(8, lowlev_mem_v2p((unsigned int)pBuffData));
   23374:	eb000522 	bl	24804 <postman_send>
    postman_recv(8, &respmsg);
   23378:	e28d1004 	add	r1, sp, #4
   2337c:	e3a00008 	mov	r0, #8
   23380:	eb0004ea 	bl	24730 <postman_recv>

    if (pBuffData[1] != 0x80000000) {
   23384:	e5943004 	ldr	r3, [r4, #4]
   23388:	e3530102 	cmp	r3, #-2147483648	; 0x80000000
        return FB_ERROR;
    }

    *pDepth = pBuffData[5];

    return FB_SUCCESS;
   2338c:	01a00005 	moveq	r0, r5
        return FB_ERROR;
   23390:	13a00001 	movne	r0, #1
    *pDepth = pBuffData[5];
   23394:	05943014 	ldreq	r3, [r4, #20]
   23398:	05863000 	streq	r3, [r6]
}
   2339c:	e28dde41 	add	sp, sp, #1040	; 0x410
   233a0:	e28dd008 	add	sp, sp, #8
   233a4:	e8bd8070 	pop	{r4, r5, r6, pc}
   233a8:	00048005 	.word	0x00048005

000233ac <fb_get_pitch>:

FB_RETURN_TYPE fb_get_pitch(unsigned int* pPitch)
{
   233ac:	e92d4070 	push	{r4, r5, r6, lr}
    volatile unsigned int pBuffData[256] __attribute__((aligned(16)));
    unsigned int off;
    unsigned int respmsg;

    off = 1;
    pBuffData[off++] = 0; // Request
   233b0:	e3a05000 	mov	r5, #0
    pBuffData[off++] = 4; // response buffer size in bytes
    pBuffData[off++] = 0; // request size
    pBuffData[off++] = 0; // response buffer
    pBuffData[off++] = 0; // end tag

    pBuffData[0] = off * 4; // Total message size
   233b4:	e3a0301c 	mov	r3, #28
    pBuffData[off++] = 4; // response buffer size in bytes
   233b8:	e3a02004 	mov	r2, #4
{
   233bc:	e24dde41 	sub	sp, sp, #1040	; 0x410
   233c0:	e24dd008 	sub	sp, sp, #8
    pBuffData[off++] = 0x00040008; // Tag: get pitch
   233c4:	e59f106c 	ldr	r1, [pc, #108]	; 23438 <fb_get_pitch+0x8c>
{
   233c8:	e28d4017 	add	r4, sp, #23
   233cc:	e3c4400f 	bic	r4, r4, #15
    pBuffData[off++] = 0; // Request
   233d0:	e5845004 	str	r5, [r4, #4]
{
   233d4:	e1a06000 	mov	r6, r0
    pBuffData[off++] = 0x00040008; // Tag: get pitch
   233d8:	e5841008 	str	r1, [r4, #8]

    postman_send(8, lowlev_mem_v2p((unsigned int)pBuffData));
   233dc:	e3a00008 	mov	r0, #8
   233e0:	e1a01004 	mov	r1, r4
    pBuffData[off++] = 4; // response buffer size in bytes
   233e4:	e584200c 	str	r2, [r4, #12]
    pBuffData[off++] = 0; // request size
   233e8:	e5845010 	str	r5, [r4, #16]
    pBuffData[off++] = 0; // response buffer
   233ec:	e5845014 	str	r5, [r4, #20]
    pBuffData[off++] = 0; // end tag
   233f0:	e5845018 	str	r5, [r4, #24]
    pBuffData[0] = off * 4; // Total message size
   233f4:	e5843000 	str	r3, [r4]
    postman_send(8, lowlev_mem_v2p((unsigned int)pBuffData));
   233f8:	eb000501 	bl	24804 <postman_send>
    postman_recv(8, &respmsg);
   233fc:	e28d1004 	add	r1, sp, #4
   23400:	e3a00008 	mov	r0, #8
   23404:	eb0004c9 	bl	24730 <postman_recv>

    if (pBuffData[1] != 0x80000000) {
   23408:	e5943004 	ldr	r3, [r4, #4]
   2340c:	e3530102 	cmp	r3, #-2147483648	; 0x80000000
        return FB_ERROR;
   23410:	13a00001 	movne	r0, #1
    if (pBuffData[1] != 0x80000000) {
   23414:	1a000004 	bne	2342c <fb_get_pitch+0x80>
    }

    if (pPitch)
   23418:	e1560005 	cmp	r6, r5
        *pPitch = pBuffData[5];

    return FB_SUCCESS;
   2341c:	11a00005 	movne	r0, r5
   23420:	01a00006 	moveq	r0, r6
        *pPitch = pBuffData[5];
   23424:	15943014 	ldrne	r3, [r4, #20]
   23428:	15863000 	strne	r3, [r6]
}
   2342c:	e28dde41 	add	sp, sp, #1040	; 0x410
   23430:	e28dd008 	add	sp, sp, #8
   23434:	e8bd8070 	pop	{r4, r5, r6, pc}
   23438:	00040008 	.word	0x00040008

0002343c <fb_get_physical_buffer_size>:

FB_RETURN_TYPE fb_get_physical_buffer_size(unsigned int* pWidth, unsigned int* pHeight)
{
   2343c:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    unsigned int respmsg;

    off = 1;
    pBuffData[off++] = 0; // Request
    pBuffData[off++] = 0x00040003; // Tag: get physical buffer size
    pBuffData[off++] = 8; // response buffer size in bytes
   23440:	e3a05008 	mov	r5, #8
    pBuffData[off++] = 0; // Request
   23444:	e3a03000 	mov	r3, #0
    pBuffData[off++] = 0; // request size
    pBuffData[off++] = 0; // response buffer
    pBuffData[off++] = 0; // response buffer
    pBuffData[off++] = 0; // end tag

    pBuffData[0] = off * 4; // Total message size
   23448:	e3a02020 	mov	r2, #32
{
   2344c:	e24dde41 	sub	sp, sp, #1040	; 0x410
   23450:	e24dd00c 	sub	sp, sp, #12
   23454:	e08dc005 	add	ip, sp, r5
   23458:	e28c400f 	add	r4, ip, #15
   2345c:	e3c4400f 	bic	r4, r4, #15
    pBuffData[off++] = 0x00040003; // Tag: get physical buffer size
   23460:	e59fc07c 	ldr	ip, [pc, #124]	; 234e4 <fb_get_physical_buffer_size+0xa8>
{
   23464:	e1a07000 	mov	r7, r0
   23468:	e1a06001 	mov	r6, r1

    postman_send(8, lowlev_mem_v2p((unsigned int)pBuffData));
   2346c:	e1a00005 	mov	r0, r5
   23470:	e1a01004 	mov	r1, r4
    pBuffData[off++] = 0; // Request
   23474:	e5843004 	str	r3, [r4, #4]
    pBuffData[off++] = 0x00040003; // Tag: get physical buffer size
   23478:	e584c008 	str	ip, [r4, #8]
    pBuffData[off++] = 8; // response buffer size in bytes
   2347c:	e584500c 	str	r5, [r4, #12]
    pBuffData[off++] = 0; // request size
   23480:	e5843010 	str	r3, [r4, #16]
    pBuffData[off++] = 0; // response buffer
   23484:	e5843014 	str	r3, [r4, #20]
    pBuffData[off++] = 0; // response buffer
   23488:	e5843018 	str	r3, [r4, #24]
    pBuffData[off++] = 0; // end tag
   2348c:	e584301c 	str	r3, [r4, #28]
    pBuffData[0] = off * 4; // Total message size
   23490:	e5842000 	str	r2, [r4]
    postman_send(8, lowlev_mem_v2p((unsigned int)pBuffData));
   23494:	eb0004da 	bl	24804 <postman_send>
    postman_recv(8, &respmsg);
   23498:	e08d3005 	add	r3, sp, r5
   2349c:	e2431004 	sub	r1, r3, #4
   234a0:	e1a00005 	mov	r0, r5
   234a4:	eb0004a1 	bl	24730 <postman_recv>

    if (pBuffData[1] != 0x80000000) {
   234a8:	e5943004 	ldr	r3, [r4, #4]
   234ac:	e3530102 	cmp	r3, #-2147483648	; 0x80000000
        return FB_ERROR;
   234b0:	13a00001 	movne	r0, #1
    if (pBuffData[1] != 0x80000000) {
   234b4:	1a000007 	bne	234d8 <fb_get_physical_buffer_size+0x9c>
    }

    if (pWidth)
   234b8:	e3570000 	cmp	r7, #0
        *pWidth = pBuffData[5];
   234bc:	15943014 	ldrne	r3, [r4, #20]
   234c0:	15873000 	strne	r3, [r7]
    if (pHeight)
   234c4:	e3560000 	cmp	r6, #0
        *pHeight = pBuffData[6];

    return FB_SUCCESS;
   234c8:	13a00000 	movne	r0, #0
   234cc:	01a00006 	moveq	r0, r6
        *pHeight = pBuffData[6];
   234d0:	15943018 	ldrne	r3, [r4, #24]
   234d4:	15863000 	strne	r3, [r6]
}
   234d8:	e28dde41 	add	sp, sp, #1040	; 0x410
   234dc:	e28dd00c 	add	sp, sp, #12
   234e0:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   234e4:	00040003 	.word	0x00040003

000234e8 <fb_set_physical_buffer_size>:

FB_RETURN_TYPE fb_set_physical_buffer_size(unsigned int* pWidth, unsigned int* pHeight)
{
   234e8:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    unsigned int respmsg;

    off = 1;
    pBuffData[off++] = 0; // Request
    pBuffData[off++] = 0x00048003; // Tag: set physical buffer size
    pBuffData[off++] = 8; // response buffer size in bytes
   234ec:	e3a06008 	mov	r6, #8
{
   234f0:	e1a08000 	mov	r8, r0
   234f4:	e1a07001 	mov	r7, r1
    pBuffData[off++] = 0; // Request
   234f8:	e3a05000 	mov	r5, #0
    pBuffData[off++] = 8; // request size
    pBuffData[off++] = *pWidth; // response buffer
    pBuffData[off++] = *pHeight; // response buffer
    pBuffData[off++] = 0; // end tag

    pBuffData[0] = off * 4; // Total message size
   234fc:	e3a03020 	mov	r3, #32
{
   23500:	e24dde41 	sub	sp, sp, #1040	; 0x410
   23504:	e24dd008 	sub	sp, sp, #8
   23508:	e08d2006 	add	r2, sp, r6
    pBuffData[off++] = *pWidth; // response buffer
   2350c:	e5981000 	ldr	r1, [r8]
{
   23510:	e282400f 	add	r4, r2, #15
    pBuffData[off++] = 0x00048003; // Tag: set physical buffer size
   23514:	e59f006c 	ldr	r0, [pc, #108]	; 23588 <fb_set_physical_buffer_size+0xa0>
{
   23518:	e3c4400f 	bic	r4, r4, #15
    pBuffData[off++] = *pHeight; // response buffer
   2351c:	e5972000 	ldr	r2, [r7]
    pBuffData[off++] = 0; // Request
   23520:	e5845004 	str	r5, [r4, #4]
    pBuffData[off++] = 0x00048003; // Tag: set physical buffer size
   23524:	e5840008 	str	r0, [r4, #8]
    pBuffData[off++] = 8; // response buffer size in bytes
   23528:	e584600c 	str	r6, [r4, #12]

    postman_send(8, lowlev_mem_v2p((unsigned int)pBuffData));
   2352c:	e1a00006 	mov	r0, r6
    pBuffData[off++] = 8; // request size
   23530:	e5846010 	str	r6, [r4, #16]
    pBuffData[off++] = *pWidth; // response buffer
   23534:	e5841014 	str	r1, [r4, #20]
    postman_send(8, lowlev_mem_v2p((unsigned int)pBuffData));
   23538:	e1a01004 	mov	r1, r4
    pBuffData[off++] = *pHeight; // response buffer
   2353c:	e5842018 	str	r2, [r4, #24]
    pBuffData[off++] = 0; // end tag
   23540:	e584501c 	str	r5, [r4, #28]
    pBuffData[0] = off * 4; // Total message size
   23544:	e5843000 	str	r3, [r4]
    postman_send(8, lowlev_mem_v2p((unsigned int)pBuffData));
   23548:	eb0004ad 	bl	24804 <postman_send>
    postman_recv(8, &respmsg);
   2354c:	e08d3006 	add	r3, sp, r6
   23550:	e2431004 	sub	r1, r3, #4
   23554:	e1a00006 	mov	r0, r6
   23558:	eb000474 	bl	24730 <postman_recv>

    if (pBuffData[1] != 0x80000000) {
   2355c:	e5943004 	ldr	r3, [r4, #4]
   23560:	e3530102 	cmp	r3, #-2147483648	; 0x80000000
    if (pWidth)
        *pWidth = pBuffData[5];
    if (pHeight)
        *pHeight = pBuffData[6];

    return FB_SUCCESS;
   23564:	01a00005 	moveq	r0, r5
        return FB_ERROR;
   23568:	13a00001 	movne	r0, #1
        *pWidth = pBuffData[5];
   2356c:	05942014 	ldreq	r2, [r4, #20]
        *pHeight = pBuffData[6];
   23570:	05943018 	ldreq	r3, [r4, #24]
        *pWidth = pBuffData[5];
   23574:	05882000 	streq	r2, [r8]
        *pHeight = pBuffData[6];
   23578:	05873000 	streq	r3, [r7]
}
   2357c:	e28dde41 	add	sp, sp, #1040	; 0x410
   23580:	e28dd008 	add	sp, sp, #8
   23584:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   23588:	00048003 	.word	0x00048003

0002358c <fb_allocate_buffer>:

FB_RETURN_TYPE fb_allocate_buffer(void** ppBuffer, unsigned int* pBufferSize)
{
   2358c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    unsigned int respmsg;

    off = 1;
    pBuffData[off++] = 0; // Request
    pBuffData[off++] = 0x00040004; // Tag: allocate buffer
    pBuffData[off++] = 8; // response buffer size in bytes
   23590:	e3a06008 	mov	r6, #8
    pBuffData[off++] = 4; // request size
    pBuffData[off++] = 16; // response buffer
   23594:	e3a02010 	mov	r2, #16
    pBuffData[off++] = 0; // Request
   23598:	e3a05000 	mov	r5, #0
    pBuffData[off++] = 4; // request size
   2359c:	e3a0c004 	mov	ip, #4
    pBuffData[off++] = 0; // response buffer
    pBuffData[off++] = 0; // end tag

    pBuffData[0] = off * 4; // Total message size
   235a0:	e3a03020 	mov	r3, #32
{
   235a4:	e24dde41 	sub	sp, sp, #1040	; 0x410
   235a8:	e24dd008 	sub	sp, sp, #8
   235ac:	e08de006 	add	lr, sp, r6
   235b0:	e28e400f 	add	r4, lr, #15
   235b4:	e3c4400f 	bic	r4, r4, #15
    pBuffData[off++] = 0x00040004; // Tag: allocate buffer
   235b8:	e59fe06c 	ldr	lr, [pc, #108]	; 2362c <fb_allocate_buffer+0xa0>
{
   235bc:	e1a08000 	mov	r8, r0
   235c0:	e1a07001 	mov	r7, r1

    postman_send(8, lowlev_mem_v2p((unsigned int)pBuffData));
   235c4:	e1a00006 	mov	r0, r6
   235c8:	e1a01004 	mov	r1, r4
    pBuffData[off++] = 0; // Request
   235cc:	e5845004 	str	r5, [r4, #4]
    pBuffData[off++] = 0x00040004; // Tag: allocate buffer
   235d0:	e584e008 	str	lr, [r4, #8]
    pBuffData[off++] = 8; // response buffer size in bytes
   235d4:	e584600c 	str	r6, [r4, #12]
    pBuffData[off++] = 4; // request size
   235d8:	e584c010 	str	ip, [r4, #16]
    pBuffData[off++] = 16; // response buffer
   235dc:	e5842014 	str	r2, [r4, #20]
    pBuffData[off++] = 0; // response buffer
   235e0:	e5845018 	str	r5, [r4, #24]
    pBuffData[off++] = 0; // end tag
   235e4:	e584501c 	str	r5, [r4, #28]
    pBuffData[0] = off * 4; // Total message size
   235e8:	e5843000 	str	r3, [r4]
    postman_send(8, lowlev_mem_v2p((unsigned int)pBuffData));
   235ec:	eb000484 	bl	24804 <postman_send>
    postman_recv(8, &respmsg);
   235f0:	e08d3006 	add	r3, sp, r6
   235f4:	e2431004 	sub	r1, r3, #4
   235f8:	e1a00006 	mov	r0, r6
   235fc:	eb00044b 	bl	24730 <postman_recv>

    if (pBuffData[1] != 0x80000000) {
   23600:	e5943004 	ldr	r3, [r4, #4]
   23604:	e3530102 	cmp	r3, #-2147483648	; 0x80000000
    }

    *ppBuffer = (void*)pBuffData[5];
    *pBufferSize = pBuffData[6];

    return FB_SUCCESS;
   23608:	01a00005 	moveq	r0, r5
        return FB_ERROR;
   2360c:	13a00001 	movne	r0, #1
    *ppBuffer = (void*)pBuffData[5];
   23610:	05942014 	ldreq	r2, [r4, #20]
    *pBufferSize = pBuffData[6];
   23614:	05943018 	ldreq	r3, [r4, #24]
    *ppBuffer = (void*)pBuffData[5];
   23618:	05882000 	streq	r2, [r8]
    *pBufferSize = pBuffData[6];
   2361c:	05873000 	streq	r3, [r7]
}
   23620:	e28dde41 	add	sp, sp, #1040	; 0x410
   23624:	e28dd008 	add	sp, sp, #8
   23628:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   2362c:	00040004 	.word	0x00040004

00023630 <fb_get_virtual_buffer_size>:

FB_RETURN_TYPE fb_get_virtual_buffer_size(unsigned int* pVWidth, unsigned int* pVHeight)
{
   23630:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    unsigned int respmsg;

    off = 1;
    pBuffData[off++] = 0; // Request
    pBuffData[off++] = 0x00040004; // Tag: get virtual buffer size
    pBuffData[off++] = 8; // response buffer size in bytes
   23634:	e3a05008 	mov	r5, #8
    pBuffData[off++] = 0; // Request
   23638:	e3a03000 	mov	r3, #0
    pBuffData[off++] = 0; // request size
    pBuffData[off++] = 0; // response buffer
    pBuffData[off++] = 0; // response buffer
    pBuffData[off++] = 0; // end tag

    pBuffData[0] = off * 4; // Total message size
   2363c:	e3a02020 	mov	r2, #32
{
   23640:	e24dde41 	sub	sp, sp, #1040	; 0x410
   23644:	e24dd00c 	sub	sp, sp, #12
   23648:	e08dc005 	add	ip, sp, r5
   2364c:	e28c400f 	add	r4, ip, #15
   23650:	e3c4400f 	bic	r4, r4, #15
    pBuffData[off++] = 0x00040004; // Tag: get virtual buffer size
   23654:	e59fc07c 	ldr	ip, [pc, #124]	; 236d8 <fb_get_virtual_buffer_size+0xa8>
{
   23658:	e1a07000 	mov	r7, r0
   2365c:	e1a06001 	mov	r6, r1

    postman_send(8, lowlev_mem_v2p((unsigned int)pBuffData));
   23660:	e1a00005 	mov	r0, r5
   23664:	e1a01004 	mov	r1, r4
    pBuffData[off++] = 0; // Request
   23668:	e5843004 	str	r3, [r4, #4]
    pBuffData[off++] = 0x00040004; // Tag: get virtual buffer size
   2366c:	e584c008 	str	ip, [r4, #8]
    pBuffData[off++] = 8; // response buffer size in bytes
   23670:	e584500c 	str	r5, [r4, #12]
    pBuffData[off++] = 0; // request size
   23674:	e5843010 	str	r3, [r4, #16]
    pBuffData[off++] = 0; // response buffer
   23678:	e5843014 	str	r3, [r4, #20]
    pBuffData[off++] = 0; // response buffer
   2367c:	e5843018 	str	r3, [r4, #24]
    pBuffData[off++] = 0; // end tag
   23680:	e584301c 	str	r3, [r4, #28]
    pBuffData[0] = off * 4; // Total message size
   23684:	e5842000 	str	r2, [r4]
    postman_send(8, lowlev_mem_v2p((unsigned int)pBuffData));
   23688:	eb00045d 	bl	24804 <postman_send>
    postman_recv(8, &respmsg);
   2368c:	e08d3005 	add	r3, sp, r5
   23690:	e2431004 	sub	r1, r3, #4
   23694:	e1a00005 	mov	r0, r5
   23698:	eb000424 	bl	24730 <postman_recv>

    if (pBuffData[1] != 0x80000000) {
   2369c:	e5943004 	ldr	r3, [r4, #4]
   236a0:	e3530102 	cmp	r3, #-2147483648	; 0x80000000
        return FB_ERROR;
   236a4:	13a00001 	movne	r0, #1
    if (pBuffData[1] != 0x80000000) {
   236a8:	1a000007 	bne	236cc <fb_get_virtual_buffer_size+0x9c>
    }

    if (pVWidth)
   236ac:	e3570000 	cmp	r7, #0
        *pVWidth = pBuffData[5];
   236b0:	15943014 	ldrne	r3, [r4, #20]
   236b4:	15873000 	strne	r3, [r7]
    if (pVHeight)
   236b8:	e3560000 	cmp	r6, #0
        *pVHeight = pBuffData[6];

    return FB_SUCCESS;
   236bc:	13a00000 	movne	r0, #0
   236c0:	01a00006 	moveq	r0, r6
        *pVHeight = pBuffData[6];
   236c4:	15943018 	ldrne	r3, [r4, #24]
   236c8:	15863000 	strne	r3, [r6]
}
   236cc:	e28dde41 	add	sp, sp, #1040	; 0x410
   236d0:	e28dd00c 	add	sp, sp, #12
   236d4:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   236d8:	00040004 	.word	0x00040004

000236dc <fb_set_virtual_buffer_size>:

FB_RETURN_TYPE fb_set_virtual_buffer_size(unsigned int* pWidth, unsigned int* pHeight)
{
   236dc:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    unsigned int respmsg;

    off = 1;
    pBuffData[off++] = 0; // Request
    pBuffData[off++] = 0x00048004; // Tag: set virtual buffer size
    pBuffData[off++] = 8; // response buffer size in bytes
   236e0:	e3a06008 	mov	r6, #8
{
   236e4:	e1a08000 	mov	r8, r0
   236e8:	e1a07001 	mov	r7, r1
    pBuffData[off++] = 0; // Request
   236ec:	e3a05000 	mov	r5, #0
    pBuffData[off++] = 8; // request size
    pBuffData[off++] = *pWidth; // response buffer
    pBuffData[off++] = *pHeight; // response buffer
    pBuffData[off++] = 0; // end tag

    pBuffData[0] = off * 4; // Total message size
   236f0:	e3a03020 	mov	r3, #32
{
   236f4:	e24dde41 	sub	sp, sp, #1040	; 0x410
   236f8:	e24dd008 	sub	sp, sp, #8
   236fc:	e08d2006 	add	r2, sp, r6
    pBuffData[off++] = *pWidth; // response buffer
   23700:	e5981000 	ldr	r1, [r8]
{
   23704:	e282400f 	add	r4, r2, #15
    pBuffData[off++] = 0x00048004; // Tag: set virtual buffer size
   23708:	e59f006c 	ldr	r0, [pc, #108]	; 2377c <fb_set_virtual_buffer_size+0xa0>
{
   2370c:	e3c4400f 	bic	r4, r4, #15
    pBuffData[off++] = *pHeight; // response buffer
   23710:	e5972000 	ldr	r2, [r7]
    pBuffData[off++] = 0; // Request
   23714:	e5845004 	str	r5, [r4, #4]
    pBuffData[off++] = 0x00048004; // Tag: set virtual buffer size
   23718:	e5840008 	str	r0, [r4, #8]
    pBuffData[off++] = 8; // response buffer size in bytes
   2371c:	e584600c 	str	r6, [r4, #12]

    postman_send(8, lowlev_mem_v2p((unsigned int)pBuffData));
   23720:	e1a00006 	mov	r0, r6
    pBuffData[off++] = 8; // request size
   23724:	e5846010 	str	r6, [r4, #16]
    pBuffData[off++] = *pWidth; // response buffer
   23728:	e5841014 	str	r1, [r4, #20]
    postman_send(8, lowlev_mem_v2p((unsigned int)pBuffData));
   2372c:	e1a01004 	mov	r1, r4
    pBuffData[off++] = *pHeight; // response buffer
   23730:	e5842018 	str	r2, [r4, #24]
    pBuffData[off++] = 0; // end tag
   23734:	e584501c 	str	r5, [r4, #28]
    pBuffData[0] = off * 4; // Total message size
   23738:	e5843000 	str	r3, [r4]
    postman_send(8, lowlev_mem_v2p((unsigned int)pBuffData));
   2373c:	eb000430 	bl	24804 <postman_send>
    postman_recv(8, &respmsg);
   23740:	e08d3006 	add	r3, sp, r6
   23744:	e2431004 	sub	r1, r3, #4
   23748:	e1a00006 	mov	r0, r6
   2374c:	eb0003f7 	bl	24730 <postman_recv>

    if (pBuffData[1] != 0x80000000) {
   23750:	e5943004 	ldr	r3, [r4, #4]
   23754:	e3530102 	cmp	r3, #-2147483648	; 0x80000000
    if (pWidth)
        *pWidth = pBuffData[5];
    if (pHeight)
        *pHeight = pBuffData[6];

    return FB_SUCCESS;
   23758:	01a00005 	moveq	r0, r5
        return FB_ERROR;
   2375c:	13a00001 	movne	r0, #1
        *pWidth = pBuffData[5];
   23760:	05942014 	ldreq	r2, [r4, #20]
        *pHeight = pBuffData[6];
   23764:	05943018 	ldreq	r3, [r4, #24]
        *pWidth = pBuffData[5];
   23768:	05882000 	streq	r2, [r8]
        *pHeight = pBuffData[6];
   2376c:	05873000 	streq	r3, [r7]
}
   23770:	e28dde41 	add	sp, sp, #1040	; 0x410
   23774:	e28dd008 	add	sp, sp, #8
   23778:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   2377c:	00048004 	.word	0x00048004

00023780 <fb_set_virtual_offset>:

FB_RETURN_TYPE fb_set_virtual_offset(unsigned int pX, unsigned int pY)
{
   23780:	e92d4030 	push	{r4, r5, lr}
    unsigned int respmsg;

    off = 1;
    pBuffData[off++] = 0; // Request
    pBuffData[off++] = 0x00048009; // Tag: set virtual offset
    pBuffData[off++] = 8; // response buffer size in bytes
   23784:	e3a05008 	mov	r5, #8
    pBuffData[off++] = 0; // Request
   23788:	e3a03000 	mov	r3, #0
{
   2378c:	e1a0c001 	mov	ip, r1
    pBuffData[off++] = 8; // request size
    pBuffData[off++] = pX; // response buffer
    pBuffData[off++] = pY; // response buffer
    pBuffData[off++] = 0; // end tag

    pBuffData[0] = off * 4; // Total message size
   23790:	e3a02020 	mov	r2, #32
{
   23794:	e24dde41 	sub	sp, sp, #1040	; 0x410
   23798:	e24dd00c 	sub	sp, sp, #12
   2379c:	e08d1005 	add	r1, sp, r5
   237a0:	e281400f 	add	r4, r1, #15
    pBuffData[off++] = 0x00048009; // Tag: set virtual offset
   237a4:	e59f1054 	ldr	r1, [pc, #84]	; 23800 <fb_set_virtual_offset+0x80>
{
   237a8:	e3c4400f 	bic	r4, r4, #15
    pBuffData[off++] = 0; // Request
   237ac:	e5843004 	str	r3, [r4, #4]
    pBuffData[off++] = 0x00048009; // Tag: set virtual offset
   237b0:	e5841008 	str	r1, [r4, #8]
    pBuffData[off++] = 8; // response buffer size in bytes
   237b4:	e584500c 	str	r5, [r4, #12]

    postman_send(8, lowlev_mem_v2p((unsigned int)pBuffData));
   237b8:	e1a01004 	mov	r1, r4
    pBuffData[off++] = 8; // request size
   237bc:	e5845010 	str	r5, [r4, #16]
    pBuffData[off++] = pX; // response buffer
   237c0:	e5840014 	str	r0, [r4, #20]
    postman_send(8, lowlev_mem_v2p((unsigned int)pBuffData));
   237c4:	e1a00005 	mov	r0, r5
    pBuffData[off++] = pY; // response buffer
   237c8:	e584c018 	str	ip, [r4, #24]
    pBuffData[off++] = 0; // end tag
   237cc:	e584301c 	str	r3, [r4, #28]
    pBuffData[0] = off * 4; // Total message size
   237d0:	e5842000 	str	r2, [r4]
    postman_send(8, lowlev_mem_v2p((unsigned int)pBuffData));
   237d4:	eb00040a 	bl	24804 <postman_send>
    postman_recv(8, &respmsg);
   237d8:	e08d3005 	add	r3, sp, r5
   237dc:	e2431004 	sub	r1, r3, #4
   237e0:	e1a00005 	mov	r0, r5
   237e4:	eb0003d1 	bl	24730 <postman_recv>

    if (pBuffData[1] != 0x80000000) {
   237e8:	e5940004 	ldr	r0, [r4, #4]
        return FB_ERROR;
    }

    return FB_SUCCESS;
}
   237ec:	e2900102 	adds	r0, r0, #-2147483648	; 0x80000000
   237f0:	13a00001 	movne	r0, #1
   237f4:	e28dde41 	add	sp, sp, #1040	; 0x410
   237f8:	e28dd00c 	add	sp, sp, #12
   237fc:	e8bd8030 	pop	{r4, r5, pc}
   23800:	00048009 	.word	0x00048009

00023804 <JSMNR_parse>:

/**
 * Parse JSON string and fill tokens.
 */
int JSMNR_parse(JSMNR_parser *parser, const char *js, size_t len,
		jsmnrtok_t *tokens, unsigned int num_tokens) {
   23804:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   23808:	e28db020 	add	fp, sp, #32
   2380c:	e24dd024 	sub	sp, sp, #36	; 0x24
	int r;
	int i;
	jsmnrtok_t *token;
	int count = parser->toknext;

	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
   23810:	e5905000 	ldr	r5, [r0]
		jsmnrtok_t *tokens, unsigned int num_tokens) {
   23814:	e1a06000 	mov	r6, r0
	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
   23818:	e1550002 	cmp	r5, r2
	int count = parser->toknext;
   2381c:	e590a004 	ldr	sl, [r0, #4]
	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
   23820:	2a000159 	bcs	23d8c <JSMNR_parse+0x588>
   23824:	e7d14005 	ldrb	r4, [r1, r5]
   23828:	e1a07001 	mov	r7, r1
   2382c:	e3540000 	cmp	r4, #0
   23830:	0a000155 	beq	23d8c <JSMNR_parse+0x588>
   23834:	e1a01005 	mov	r1, r5
	tok->size = 0;
   23838:	e3a09000 	mov	r9, #0
   2383c:	ea00000f 	b	23880 <JSMNR_parse+0x7c>
		char c;
		jsmnrtype_t type;

		c = js[parser->pos];
		switch (c) {
   23840:	e354005d 	cmp	r4, #93	; 0x5d
   23844:	0a000037 	beq	23928 <JSMNR_parse+0x124>
   23848:	8a000032 	bhi	23918 <JSMNR_parse+0x114>
   2384c:	e354003a 	cmp	r4, #58	; 0x3a
   23850:	1a000176 	bne	23e30 <JSMNR_parse+0x62c>
					tokens[parser->toksuper].size++;
				break;
			case '\t' : case '\r' : case '\n' : case ' ':
				break;
			case ':':
				parser->toksuper = parser->toknext - 1;
   23854:	e5960004 	ldr	r0, [r6, #4]
   23858:	e2400001 	sub	r0, r0, #1
   2385c:	e5860008 	str	r0, [r6, #8]
	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
   23860:	e2815001 	add	r5, r1, #1
   23864:	e1550002 	cmp	r5, r2
   23868:	e5865000 	str	r5, [r6]
   2386c:	2a000146 	bcs	23d8c <JSMNR_parse+0x588>
   23870:	e7d74005 	ldrb	r4, [r7, r5]
   23874:	e3540000 	cmp	r4, #0
   23878:	0a000143 	beq	23d8c <JSMNR_parse+0x588>
   2387c:	e1a01005 	mov	r1, r5
		switch (c) {
   23880:	e354002c 	cmp	r4, #44	; 0x2c
   23884:	0a000186 	beq	23ea4 <JSMNR_parse+0x6a0>
   23888:	8affffec 	bhi	23840 <JSMNR_parse+0x3c>
   2388c:	e354000d 	cmp	r4, #13
   23890:	0afffff2 	beq	23860 <JSMNR_parse+0x5c>
   23894:	9a000100 	bls	23c9c <JSMNR_parse+0x498>
   23898:	e3540020 	cmp	r4, #32
   2389c:	0affffef 	beq	23860 <JSMNR_parse+0x5c>
   238a0:	e3540022 	cmp	r4, #34	; 0x22
   238a4:	1a0000ff 	bne	23ca8 <JSMNR_parse+0x4a4>
	parser->pos++;
   238a8:	e285c001 	add	ip, r5, #1
	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
   238ac:	e152000c 	cmp	r2, ip
	parser->pos++;
   238b0:	e586c000 	str	ip, [r6]
   238b4:	e1a0100c 	mov	r1, ip
	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
   238b8:	9a000011 	bls	23904 <JSMNR_parse+0x100>
   238bc:	e7d7000c 	ldrb	r0, [r7, ip]
   238c0:	e3500000 	cmp	r0, #0
   238c4:	1a000007 	bne	238e8 <JSMNR_parse+0xe4>
   238c8:	ea00000d 	b	23904 <JSMNR_parse+0x100>
   238cc:	e2811001 	add	r1, r1, #1
   238d0:	e1520001 	cmp	r2, r1
   238d4:	e5861000 	str	r1, [r6]
   238d8:	9a000009 	bls	23904 <JSMNR_parse+0x100>
   238dc:	e7d70001 	ldrb	r0, [r7, r1]
   238e0:	e3500000 	cmp	r0, #0
   238e4:	0a000006 	beq	23904 <JSMNR_parse+0x100>
		if (c == '\"') {
   238e8:	e3500022 	cmp	r0, #34	; 0x22
   238ec:	0a0001a0 	beq	23f74 <JSMNR_parse+0x770>
		if (c == '\\' && parser->pos + 1 < len) {
   238f0:	e350005c 	cmp	r0, #92	; 0x5c
   238f4:	1afffff4 	bne	238cc <JSMNR_parse+0xc8>
   238f8:	e2810001 	add	r0, r1, #1
   238fc:	e1520000 	cmp	r2, r0
   23900:	8a000044 	bhi	23a18 <JSMNR_parse+0x214>
	return JSMNR_ERROR_PART;
   23904:	e3e0a002 	mvn	sl, #2
	parser->pos = start;
   23908:	e5865000 	str	r5, [r6]
			}
		}
	}

	return count;
}
   2390c:	e1a0000a 	mov	r0, sl
   23910:	e24bd020 	sub	sp, fp, #32
   23914:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
		switch (c) {
   23918:	e354007b 	cmp	r4, #123	; 0x7b
   2391c:	0a000145 	beq	23e38 <JSMNR_parse+0x634>
   23920:	e354007d 	cmp	r4, #125	; 0x7d
   23924:	1a0000df 	bne	23ca8 <JSMNR_parse+0x4a4>
				if (tokens == NULL)
   23928:	e3530000 	cmp	r3, #0
   2392c:	0affffcb 	beq	23860 <JSMNR_parse+0x5c>
				type = (c == '}' ? JSMNR_OBJECT : JSMNR_ARRAY);
   23930:	e354007d 	cmp	r4, #125	; 0x7d
   23934:	13a00002 	movne	r0, #2
   23938:	03a00001 	moveq	r0, #1
				for (i = parser->toknext - 1; i >= 0; i--) {
   2393c:	e596c004 	ldr	ip, [r6, #4]
   23940:	e50b002c 	str	r0, [fp, #-44]	; 0xffffffd4
				type = (c == '}' ? JSMNR_OBJECT : JSMNR_ARRAY);
   23944:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
				for (i = parser->toknext - 1; i >= 0; i--) {
   23948:	e25c0001 	subs	r0, ip, #1
   2394c:	e50bc030 	str	ip, [fp, #-48]	; 0xffffffd0
   23950:	4a0001a1 	bmi	23fdc <JSMNR_parse+0x7d8>
   23954:	e24cc21f 	sub	ip, ip, #-268435455	; 0xf0000001
   23958:	e083c20c 	add	ip, r3, ip, lsl #4
					if (token->start != -1 && token->end == -1) {
   2395c:	e59ce004 	ldr	lr, [ip, #4]
   23960:	e37e0001 	cmn	lr, #1
   23964:	0a000002 	beq	23974 <JSMNR_parse+0x170>
   23968:	e59c8008 	ldr	r8, [ip, #8]
   2396c:	e3780001 	cmn	r8, #1
   23970:	0a00016b 	beq	23f24 <JSMNR_parse+0x720>
				for (i = parser->toknext - 1; i >= 0; i--) {
   23974:	e2400001 	sub	r0, r0, #1
   23978:	e3700001 	cmn	r0, #1
   2397c:	e24cc010 	sub	ip, ip, #16
   23980:	1afffff5 	bne	2395c <JSMNR_parse+0x158>

// Helper function to log long strings
void JSMNR_logLongStr(const char* headerMsg, const char* toLog, bool infoLevel)
{
    if (infoLevel)
        LogWrite(FromJSMNR, LOG_NOTICE, headerMsg);
   23984:	e3a06000 	mov	r6, #0
                    LogWrite(FromJSMNR, LOG_NOTICE, "JSMNR_ERROR_INVAL unmatchedbrace pos %d ch %d toknext %d type %d", parser->pos, js[parser->pos], parser->toknext, type);
   23988:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
   2398c:	e59f26a4 	ldr	r2, [pc, #1700]	; 24038 <JSMNR_parse+0x834>
   23990:	e58d3008 	str	r3, [sp, #8]
   23994:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
   23998:	e3a01003 	mov	r1, #3
   2399c:	e58d3004 	str	r3, [sp, #4]
   239a0:	e59f0694 	ldr	r0, [pc, #1684]	; 2403c <JSMNR_parse+0x838>
   239a4:	e1a03005 	mov	r3, r5
   239a8:	e58d4000 	str	r4, [sp]
   239ac:	eb0001f1 	bl	24178 <LogWrite>
        LogWrite(FromJSMNR, LOG_NOTICE, headerMsg);
   239b0:	e59f2688 	ldr	r2, [pc, #1672]	; 24040 <JSMNR_parse+0x83c>
   239b4:	e3a01003 	mov	r1, #3
   239b8:	e59f067c 	ldr	r0, [pc, #1660]	; 2403c <JSMNR_parse+0x838>
    const int linLen = 80;
    for (unsigned int i = 0; i < strlen(toLog); i+=linLen)
    {
        char pBuf[linLen+1];
        strlcpy(pBuf, toLog+i, linLen+1);
        pBuf[linLen] = 0;
   239bc:	e1a09006 	mov	r9, r6
        LogWrite(FromJSMNR, LOG_NOTICE, headerMsg);
   239c0:	eb0001ec 	bl	24178 <LogWrite>
        if (infoLevel)
            LogWrite(FromJSMNR, LOG_NOTICE, pBuf);
   239c4:	e59f8670 	ldr	r8, [pc, #1648]	; 2403c <JSMNR_parse+0x838>
   239c8:	ea00000c 	b	23a00 <JSMNR_parse+0x1fc>
    {
   239cc:	e1a0500d 	mov	r5, sp
        char pBuf[linLen+1];
   239d0:	e24dd058 	sub	sp, sp, #88	; 0x58
   239d4:	e28d4010 	add	r4, sp, #16
        strlcpy(pBuf, toLog+i, linLen+1);
   239d8:	e3a02051 	mov	r2, #81	; 0x51
   239dc:	e1a00004 	mov	r0, r4
   239e0:	eb00a6f8 	bl	4d5c8 <strlcpy>
        pBuf[linLen] = 0;
   239e4:	e5c49050 	strb	r9, [r4, #80]	; 0x50
            LogWrite(FromJSMNR, LOG_NOTICE, pBuf);
   239e8:	e1a02004 	mov	r2, r4
   239ec:	e3a01003 	mov	r1, #3
   239f0:	e1a00008 	mov	r0, r8
   239f4:	eb0001df 	bl	24178 <LogWrite>
   239f8:	e1a0d005 	mov	sp, r5
    for (unsigned int i = 0; i < strlen(toLog); i+=linLen)
   239fc:	e2866050 	add	r6, r6, #80	; 0x50
   23a00:	e1a00007 	mov	r0, r7
   23a04:	eb00a704 	bl	4d61c <strlen>
   23a08:	e1560000 	cmp	r6, r0
        strlcpy(pBuf, toLog+i, linLen+1);
   23a0c:	e0871006 	add	r1, r7, r6
    for (unsigned int i = 0; i < strlen(toLog); i+=linLen)
   23a10:	3affffed 	bcc	239cc <JSMNR_parse+0x1c8>
   23a14:	ea00009c 	b	23c8c <JSMNR_parse+0x488>
			parser->pos++;
   23a18:	e5860000 	str	r0, [r6]
			switch (js[parser->pos]) {
   23a1c:	e7d74000 	ldrb	r4, [r7, r0]
   23a20:	e244e022 	sub	lr, r4, #34	; 0x22
   23a24:	e35e0053 	cmp	lr, #83	; 0x53
   23a28:	979ff10e 	ldrls	pc, [pc, lr, lsl #2]
   23a2c:	ea00008f 	b	23c70 <JSMNR_parse+0x46c>
   23a30:	00023b80 	.word	0x00023b80
   23a34:	00023c70 	.word	0x00023c70
   23a38:	00023c70 	.word	0x00023c70
   23a3c:	00023c70 	.word	0x00023c70
   23a40:	00023c70 	.word	0x00023c70
   23a44:	00023c70 	.word	0x00023c70
   23a48:	00023c70 	.word	0x00023c70
   23a4c:	00023c70 	.word	0x00023c70
   23a50:	00023c70 	.word	0x00023c70
   23a54:	00023c70 	.word	0x00023c70
   23a58:	00023c70 	.word	0x00023c70
   23a5c:	00023c70 	.word	0x00023c70
   23a60:	00023c70 	.word	0x00023c70
   23a64:	00023b80 	.word	0x00023b80
   23a68:	00023c70 	.word	0x00023c70
   23a6c:	00023c70 	.word	0x00023c70
   23a70:	00023c70 	.word	0x00023c70
   23a74:	00023c70 	.word	0x00023c70
   23a78:	00023c70 	.word	0x00023c70
   23a7c:	00023c70 	.word	0x00023c70
   23a80:	00023c70 	.word	0x00023c70
   23a84:	00023c70 	.word	0x00023c70
   23a88:	00023c70 	.word	0x00023c70
   23a8c:	00023c70 	.word	0x00023c70
   23a90:	00023c70 	.word	0x00023c70
   23a94:	00023c70 	.word	0x00023c70
   23a98:	00023c70 	.word	0x00023c70
   23a9c:	00023c70 	.word	0x00023c70
   23aa0:	00023c70 	.word	0x00023c70
   23aa4:	00023c70 	.word	0x00023c70
   23aa8:	00023c70 	.word	0x00023c70
   23aac:	00023c70 	.word	0x00023c70
   23ab0:	00023c70 	.word	0x00023c70
   23ab4:	00023c70 	.word	0x00023c70
   23ab8:	00023c70 	.word	0x00023c70
   23abc:	00023c70 	.word	0x00023c70
   23ac0:	00023c70 	.word	0x00023c70
   23ac4:	00023c70 	.word	0x00023c70
   23ac8:	00023c70 	.word	0x00023c70
   23acc:	00023c70 	.word	0x00023c70
   23ad0:	00023c70 	.word	0x00023c70
   23ad4:	00023c70 	.word	0x00023c70
   23ad8:	00023c70 	.word	0x00023c70
   23adc:	00023c70 	.word	0x00023c70
   23ae0:	00023c70 	.word	0x00023c70
   23ae4:	00023c70 	.word	0x00023c70
   23ae8:	00023c70 	.word	0x00023c70
   23aec:	00023c70 	.word	0x00023c70
   23af0:	00023c70 	.word	0x00023c70
   23af4:	00023c70 	.word	0x00023c70
   23af8:	00023c70 	.word	0x00023c70
   23afc:	00023c70 	.word	0x00023c70
   23b00:	00023c70 	.word	0x00023c70
   23b04:	00023c70 	.word	0x00023c70
   23b08:	00023c70 	.word	0x00023c70
   23b0c:	00023c70 	.word	0x00023c70
   23b10:	00023c70 	.word	0x00023c70
   23b14:	00023c70 	.word	0x00023c70
   23b18:	00023b80 	.word	0x00023b80
   23b1c:	00023c70 	.word	0x00023c70
   23b20:	00023c70 	.word	0x00023c70
   23b24:	00023c70 	.word	0x00023c70
   23b28:	00023c70 	.word	0x00023c70
   23b2c:	00023c70 	.word	0x00023c70
   23b30:	00023b80 	.word	0x00023b80
   23b34:	00023c70 	.word	0x00023c70
   23b38:	00023c70 	.word	0x00023c70
   23b3c:	00023c70 	.word	0x00023c70
   23b40:	00023b80 	.word	0x00023b80
   23b44:	00023c70 	.word	0x00023c70
   23b48:	00023c70 	.word	0x00023c70
   23b4c:	00023c70 	.word	0x00023c70
   23b50:	00023c70 	.word	0x00023c70
   23b54:	00023c70 	.word	0x00023c70
   23b58:	00023c70 	.word	0x00023c70
   23b5c:	00023c70 	.word	0x00023c70
   23b60:	00023b80 	.word	0x00023b80
   23b64:	00023c70 	.word	0x00023c70
   23b68:	00023c70 	.word	0x00023c70
   23b6c:	00023c70 	.word	0x00023c70
   23b70:	00023b80 	.word	0x00023b80
   23b74:	00023c70 	.word	0x00023c70
   23b78:	00023b80 	.word	0x00023b80
   23b7c:	00023b88 	.word	0x00023b88
   23b80:	e1a01000 	mov	r1, r0
   23b84:	eaffff50 	b	238cc <JSMNR_parse+0xc8>
					parser->pos++;
   23b88:	e2810002 	add	r0, r1, #2
					for(int i = 0; i < 4 && parser->pos < len && js[parser->pos] != '\0'; i++) {
   23b8c:	e1520000 	cmp	r2, r0
					parser->pos++;
   23b90:	e5860000 	str	r0, [r6]
					for(int i = 0; i < 4 && parser->pos < len && js[parser->pos] != '\0'; i++) {
   23b94:	9a000033 	bls	23c68 <JSMNR_parse+0x464>
   23b98:	e7d7e000 	ldrb	lr, [r7, r0]
   23b9c:	e35e0000 	cmp	lr, #0
   23ba0:	0a000030 	beq	23c68 <JSMNR_parse+0x464>
						if(!((js[parser->pos] >= 48 && js[parser->pos] <= 57) || // 0-9
   23ba4:	e3ce4020 	bic	r4, lr, #32
   23ba8:	e2444041 	sub	r4, r4, #65	; 0x41
   23bac:	e24e8030 	sub	r8, lr, #48	; 0x30
   23bb0:	e3540005 	cmp	r4, #5
   23bb4:	83580009 	cmphi	r8, #9
   23bb8:	8a00010a 	bhi	23fe8 <JSMNR_parse+0x7e4>
						parser->pos++;
   23bbc:	e2810003 	add	r0, r1, #3
					for(int i = 0; i < 4 && parser->pos < len && js[parser->pos] != '\0'; i++) {
   23bc0:	e1500002 	cmp	r0, r2
						parser->pos++;
   23bc4:	e5860000 	str	r0, [r6]
					for(int i = 0; i < 4 && parser->pos < len && js[parser->pos] != '\0'; i++) {
   23bc8:	2a000026 	bcs	23c68 <JSMNR_parse+0x464>
   23bcc:	e7d7e000 	ldrb	lr, [r7, r0]
   23bd0:	e35e0000 	cmp	lr, #0
   23bd4:	0a000023 	beq	23c68 <JSMNR_parse+0x464>
						if(!((js[parser->pos] >= 48 && js[parser->pos] <= 57) || // 0-9
   23bd8:	e3ce4020 	bic	r4, lr, #32
   23bdc:	e2444041 	sub	r4, r4, #65	; 0x41
   23be0:	e6ef4074 	uxtb	r4, r4
   23be4:	e24e8030 	sub	r8, lr, #48	; 0x30
   23be8:	e3540005 	cmp	r4, #5
   23bec:	83580009 	cmphi	r8, #9
   23bf0:	8a0000fc 	bhi	23fe8 <JSMNR_parse+0x7e4>
						parser->pos++;
   23bf4:	e2810004 	add	r0, r1, #4
					for(int i = 0; i < 4 && parser->pos < len && js[parser->pos] != '\0'; i++) {
   23bf8:	e1520000 	cmp	r2, r0
						parser->pos++;
   23bfc:	e5860000 	str	r0, [r6]
					for(int i = 0; i < 4 && parser->pos < len && js[parser->pos] != '\0'; i++) {
   23c00:	9a000018 	bls	23c68 <JSMNR_parse+0x464>
   23c04:	e7d7e000 	ldrb	lr, [r7, r0]
   23c08:	e35e0000 	cmp	lr, #0
   23c0c:	0a000015 	beq	23c68 <JSMNR_parse+0x464>
						if(!((js[parser->pos] >= 48 && js[parser->pos] <= 57) || // 0-9
   23c10:	e3ce4020 	bic	r4, lr, #32
   23c14:	e2444041 	sub	r4, r4, #65	; 0x41
   23c18:	e6ef4074 	uxtb	r4, r4
   23c1c:	e24e8030 	sub	r8, lr, #48	; 0x30
   23c20:	e3540005 	cmp	r4, #5
   23c24:	83580009 	cmphi	r8, #9
   23c28:	8a0000ee 	bhi	23fe8 <JSMNR_parse+0x7e4>
						parser->pos++;
   23c2c:	e2810005 	add	r0, r1, #5
					for(int i = 0; i < 4 && parser->pos < len && js[parser->pos] != '\0'; i++) {
   23c30:	e1520000 	cmp	r2, r0
						parser->pos++;
   23c34:	e5860000 	str	r0, [r6]
					for(int i = 0; i < 4 && parser->pos < len && js[parser->pos] != '\0'; i++) {
   23c38:	9a00000a 	bls	23c68 <JSMNR_parse+0x464>
   23c3c:	e7d7e000 	ldrb	lr, [r7, r0]
   23c40:	e35e0000 	cmp	lr, #0
   23c44:	0a000007 	beq	23c68 <JSMNR_parse+0x464>
						if(!((js[parser->pos] >= 48 && js[parser->pos] <= 57) || // 0-9
   23c48:	e3ce4020 	bic	r4, lr, #32
   23c4c:	e2444041 	sub	r4, r4, #65	; 0x41
   23c50:	e6ef4074 	uxtb	r4, r4
   23c54:	e24e8030 	sub	r8, lr, #48	; 0x30
   23c58:	e3540005 	cmp	r4, #5
   23c5c:	83580009 	cmphi	r8, #9
   23c60:	8a0000e0 	bhi	23fe8 <JSMNR_parse+0x7e4>
						parser->pos++;
   23c64:	e2810006 	add	r0, r1, #6
					parser->pos--;
   23c68:	e2401001 	sub	r1, r0, #1
   23c6c:	eaffff16 	b	238cc <JSMNR_parse+0xc8>
                    LogWrite(FromJSMNR, LOG_DEBUG, "JSMNR_ERROR_INVAL Unexpected %d pos %d", js[parser->pos], parser->pos);
   23c70:	e1a03004 	mov	r3, r4
   23c74:	e59f23c8 	ldr	r2, [pc, #968]	; 24044 <JSMNR_parse+0x840>
   23c78:	e58d0000 	str	r0, [sp]
                            LogWrite(FromJSMNR, LOG_DEBUG, "JSMNR_ERROR_INVAL hex bounds %d pos %d", js[parser->pos], parser->pos);
   23c7c:	e3a01004 	mov	r1, #4
   23c80:	e59f03b4 	ldr	r0, [pc, #948]	; 2403c <JSMNR_parse+0x838>
   23c84:	eb00013b 	bl	24178 <LogWrite>
							parser->pos = start;
   23c88:	e5865000 	str	r5, [r6]
							return JSMNR_ERROR_INVAL;
   23c8c:	e3e0a001 	mvn	sl, #1
}
   23c90:	e1a0000a 	mov	r0, sl
   23c94:	e24bd020 	sub	sp, fp, #32
   23c98:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
		switch (c) {
   23c9c:	e2440009 	sub	r0, r4, #9
   23ca0:	e3500001 	cmp	r0, #1
   23ca4:	9afffeed 	bls	23860 <JSMNR_parse+0x5c>
	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
   23ca8:	e1520005 	cmp	r2, r5
   23cac:	e1a08005 	mov	r8, r5
   23cb0:	9a000019 	bls	23d1c <JSMNR_parse+0x518>
   23cb4:	e0871005 	add	r1, r7, r5
   23cb8:	ea00000f 	b	23cfc <JSMNR_parse+0x4f8>
		switch (js[parser->pos]) {
   23cbc:	e3540009 	cmp	r4, #9
   23cc0:	3a000003 	bcc	23cd4 <JSMNR_parse+0x4d0>
   23cc4:	e354000a 	cmp	r4, #10
   23cc8:	9a000013 	bls	23d1c <JSMNR_parse+0x518>
   23ccc:	e354000d 	cmp	r4, #13
   23cd0:	0a000011 	beq	23d1c <JSMNR_parse+0x518>
		if (js[parser->pos] < 32 || js[parser->pos] >= 127) {
   23cd4:	e2440020 	sub	r0, r4, #32
   23cd8:	e350005e 	cmp	r0, #94	; 0x5e
   23cdc:	8a000044 	bhi	23df4 <JSMNR_parse+0x5f0>
	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
   23ce0:	e2888001 	add	r8, r8, #1
   23ce4:	e1520008 	cmp	r2, r8
   23ce8:	e5868000 	str	r8, [r6]
   23cec:	0a00008a 	beq	23f1c <JSMNR_parse+0x718>
   23cf0:	e5f14001 	ldrb	r4, [r1, #1]!
   23cf4:	e3540000 	cmp	r4, #0
   23cf8:	0a000007 	beq	23d1c <JSMNR_parse+0x518>
		switch (js[parser->pos]) {
   23cfc:	e3540020 	cmp	r4, #32
   23d00:	0a000005 	beq	23d1c <JSMNR_parse+0x518>
   23d04:	9affffec 	bls	23cbc <JSMNR_parse+0x4b8>
   23d08:	e354003a 	cmp	r4, #58	; 0x3a
   23d0c:	0a000002 	beq	23d1c <JSMNR_parse+0x518>
   23d10:	8a000030 	bhi	23dd8 <JSMNR_parse+0x5d4>
   23d14:	e354002c 	cmp	r4, #44	; 0x2c
   23d18:	1affffed 	bne	23cd4 <JSMNR_parse+0x4d0>
	if (tokens == NULL) {
   23d1c:	e3530000 	cmp	r3, #0
		parser->pos--;
   23d20:	02481001 	subeq	r1, r8, #1
				count++;
   23d24:	028aa001 	addeq	sl, sl, #1
	if (tokens == NULL) {
   23d28:	0afffecc 	beq	23860 <JSMNR_parse+0x5c>
	if (parser->toknext >= num_tokens) {
   23d2c:	e5961004 	ldr	r1, [r6, #4]
   23d30:	e59b0004 	ldr	r0, [fp, #4]
   23d34:	e1500001 	cmp	r0, r1
   23d38:	9a0000b0 	bls	24000 <JSMNR_parse+0x7fc>
	token->type = type;
   23d3c:	e3a0e004 	mov	lr, #4
				if (parser->toksuper != -1 && tokens != NULL)
   23d40:	e5960008 	ldr	r0, [r6, #8]
	tok = &tokens[parser->toknext++];
   23d44:	e281c001 	add	ip, r1, #1
   23d48:	e586c004 	str	ip, [r6, #4]
				if (parser->toksuper != -1 && tokens != NULL)
   23d4c:	e3700001 	cmn	r0, #1
	tok = &tokens[parser->toknext++];
   23d50:	e083c201 	add	ip, r3, r1, lsl #4
	tok->size = 0;
   23d54:	e58c900c 	str	r9, [ip, #12]
					tokens[parser->toksuper].size++;
   23d58:	10830200 	addne	r0, r3, r0, lsl #4
	token->type = type;
   23d5c:	e7c3e201 	strb	lr, [r3, r1, lsl #4]
	token->end = end;
   23d60:	e98c0120 	stmib	ip, {r5, r8}
					tokens[parser->toksuper].size++;
   23d64:	1590c00c 	ldrne	ip, [r0, #12]
	parser->pos--;
   23d68:	e2481001 	sub	r1, r8, #1
					tokens[parser->toksuper].size++;
   23d6c:	128cc001 	addne	ip, ip, #1
	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
   23d70:	e2815001 	add	r5, r1, #1
	parser->pos--;
   23d74:	e5861000 	str	r1, [r6]
					tokens[parser->toksuper].size++;
   23d78:	1580c00c 	strne	ip, [r0, #12]
	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
   23d7c:	e1550002 	cmp	r5, r2
				count++;
   23d80:	e28aa001 	add	sl, sl, #1
	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
   23d84:	e5865000 	str	r5, [r6]
   23d88:	3afffeb8 	bcc	23870 <JSMNR_parse+0x6c>
	if (tokens != NULL) {
   23d8c:	e3530000 	cmp	r3, #0
   23d90:	0afffedd 	beq	2390c <JSMNR_parse+0x108>
		for (i = parser->toknext - 1; i >= 0; i--) {
   23d94:	e5961004 	ldr	r1, [r6, #4]
   23d98:	e2512001 	subs	r2, r1, #1
   23d9c:	4afffeda 	bmi	2390c <JSMNR_parse+0x108>
   23da0:	e0833201 	add	r3, r3, r1, lsl #4
   23da4:	ea000002 	b	23db4 <JSMNR_parse+0x5b0>
   23da8:	e3720001 	cmn	r2, #1
   23dac:	e2433010 	sub	r3, r3, #16
   23db0:	0afffed5 	beq	2390c <JSMNR_parse+0x108>
			if (tokens[i].start != -1 && tokens[i].end == -1) {
   23db4:	e513100c 	ldr	r1, [r3, #-12]
		for (i = parser->toknext - 1; i >= 0; i--) {
   23db8:	e2422001 	sub	r2, r2, #1
			if (tokens[i].start != -1 && tokens[i].end == -1) {
   23dbc:	e3710001 	cmn	r1, #1
   23dc0:	0afffff8 	beq	23da8 <JSMNR_parse+0x5a4>
   23dc4:	e5131008 	ldr	r1, [r3, #-8]
   23dc8:	e3710001 	cmn	r1, #1
   23dcc:	1afffff5 	bne	23da8 <JSMNR_parse+0x5a4>
				return JSMNR_ERROR_PART;
   23dd0:	e3e0a002 	mvn	sl, #2
   23dd4:	eafffecc 	b	2390c <JSMNR_parse+0x108>
		switch (js[parser->pos]) {
   23dd8:	e354005d 	cmp	r4, #93	; 0x5d
   23ddc:	0affffce 	beq	23d1c <JSMNR_parse+0x518>
   23de0:	e354007d 	cmp	r4, #125	; 0x7d
   23de4:	0affffcc 	beq	23d1c <JSMNR_parse+0x518>
		if (js[parser->pos] < 32 || js[parser->pos] >= 127) {
   23de8:	e2440020 	sub	r0, r4, #32
   23dec:	e350005e 	cmp	r0, #94	; 0x5e
   23df0:	9affffba 	bls	23ce0 <JSMNR_parse+0x4dc>
					js[parser->pos], parser->pos, ((strlen(js) < 200) ? js : "TOO LONG TO SHOW"));
   23df4:	e1a00007 	mov	r0, r7
   23df8:	eb00a607 	bl	4d61c <strlen>
            LogWrite(FromJSMNR, LOG_DEBUG, "JSMNR_ERROR_INVAL chVal %d chPos %d json %s", 
   23dfc:	e59f3244 	ldr	r3, [pc, #580]	; 24048 <JSMNR_parse+0x844>
   23e00:	e35000c7 	cmp	r0, #199	; 0xc7
   23e04:	81a07003 	movhi	r7, r3
   23e08:	e58d8000 	str	r8, [sp]
   23e0c:	e1a03004 	mov	r3, r4
   23e10:	e58d7004 	str	r7, [sp, #4]
   23e14:	e59f2230 	ldr	r2, [pc, #560]	; 2404c <JSMNR_parse+0x848>
   23e18:	e3a01004 	mov	r1, #4
   23e1c:	e59f0218 	ldr	r0, [pc, #536]	; 2403c <JSMNR_parse+0x838>
   23e20:	eb0000d4 	bl	24178 <LogWrite>
			return JSMNR_ERROR_INVAL;
   23e24:	e3e0a001 	mvn	sl, #1
            parser->pos = start;
   23e28:	e5865000 	str	r5, [r6]
   23e2c:	eafffeb6 	b	2390c <JSMNR_parse+0x108>
		switch (c) {
   23e30:	e354005b 	cmp	r4, #91	; 0x5b
   23e34:	1affff9b 	bne	23ca8 <JSMNR_parse+0x4a4>
				if (tokens == NULL) {
   23e38:	e3530000 	cmp	r3, #0
				count++;
   23e3c:	e28aa001 	add	sl, sl, #1
				if (tokens == NULL) {
   23e40:	0afffe86 	beq	23860 <JSMNR_parse+0x5c>
	if (parser->toknext >= num_tokens) {
   23e44:	e5960004 	ldr	r0, [r6, #4]
   23e48:	e59bc004 	ldr	ip, [fp, #4]
   23e4c:	e15c0000 	cmp	ip, r0
   23e50:	9a000068 	bls	23ff8 <JSMNR_parse+0x7f4>
	tok = &tokens[parser->toknext++];
   23e54:	e2808001 	add	r8, r0, #1
   23e58:	e5868004 	str	r8, [r6, #4]
	tok->start = tok->end = -1;
   23e5c:	e3e08000 	mvn	r8, #0
				if (parser->toksuper != -1) {
   23e60:	e596e008 	ldr	lr, [r6, #8]
	tok = &tokens[parser->toknext++];
   23e64:	e083c200 	add	ip, r3, r0, lsl #4
				if (parser->toksuper != -1) {
   23e68:	e37e0001 	cmn	lr, #1
					tokens[parser->toksuper].size++;
   23e6c:	1083e20e 	addne	lr, r3, lr, lsl #4
	tok->size = 0;
   23e70:	e58c900c 	str	r9, [ip, #12]
	tok->start = tok->end = -1;
   23e74:	e58c8004 	str	r8, [ip, #4]
   23e78:	e58c8008 	str	r8, [ip, #8]
					tokens[parser->toksuper].size++;
   23e7c:	159e800c 	ldrne	r8, [lr, #12]
   23e80:	12888001 	addne	r8, r8, #1
   23e84:	158e800c 	strne	r8, [lr, #12]
				token->type = (c == '{' ? JSMNR_OBJECT : JSMNR_ARRAY);
   23e88:	e354007b 	cmp	r4, #123	; 0x7b
   23e8c:	13a0e002 	movne	lr, #2
   23e90:	03a0e001 	moveq	lr, #1
   23e94:	e7c3e200 	strb	lr, [r3, r0, lsl #4]
				token->start = parser->pos;
   23e98:	e58c5004 	str	r5, [ip, #4]
				parser->toksuper = parser->toknext - 1;
   23e9c:	e5860008 	str	r0, [r6, #8]
				break;
   23ea0:	eafffe6e 	b	23860 <JSMNR_parse+0x5c>
				if (tokens != NULL && parser->toksuper != -1 &&
   23ea4:	e3530000 	cmp	r3, #0
   23ea8:	0afffe6c 	beq	23860 <JSMNR_parse+0x5c>
   23eac:	e5960008 	ldr	r0, [r6, #8]
   23eb0:	e3700001 	cmn	r0, #1
   23eb4:	0afffe69 	beq	23860 <JSMNR_parse+0x5c>
						tokens[parser->toksuper].type != JSMNR_ARRAY &&
   23eb8:	e7d30200 	ldrb	r0, [r3, r0, lsl #4]
   23ebc:	e2400001 	sub	r0, r0, #1
   23ec0:	e3500001 	cmp	r0, #1
   23ec4:	9afffe65 	bls	23860 <JSMNR_parse+0x5c>
					for (i = parser->toknext - 1; i >= 0; i--) {
   23ec8:	e5960004 	ldr	r0, [r6, #4]
   23ecc:	e250e001 	subs	lr, r0, #1
   23ed0:	4afffe62 	bmi	23860 <JSMNR_parse+0x5c>
   23ed4:	e0830200 	add	r0, r3, r0, lsl #4
   23ed8:	ea000003 	b	23eec <JSMNR_parse+0x6e8>
   23edc:	e24ee001 	sub	lr, lr, #1
   23ee0:	e37e0001 	cmn	lr, #1
   23ee4:	e2400010 	sub	r0, r0, #16
   23ee8:	0afffe5c 	beq	23860 <JSMNR_parse+0x5c>
						if (tokens[i].type == JSMNR_ARRAY || tokens[i].type == JSMNR_OBJECT) {
   23eec:	e550c010 	ldrb	ip, [r0, #-16]
   23ef0:	e24cc001 	sub	ip, ip, #1
   23ef4:	e35c0001 	cmp	ip, #1
   23ef8:	8afffff7 	bhi	23edc <JSMNR_parse+0x6d8>
							if (tokens[i].start != -1 && tokens[i].end == -1) {
   23efc:	e510c00c 	ldr	ip, [r0, #-12]
   23f00:	e37c0001 	cmn	ip, #1
   23f04:	0afffff4 	beq	23edc <JSMNR_parse+0x6d8>
   23f08:	e510c008 	ldr	ip, [r0, #-8]
   23f0c:	e37c0001 	cmn	ip, #1
   23f10:	1afffff1 	bne	23edc <JSMNR_parse+0x6d8>
								parser->toksuper = i;
   23f14:	e586e008 	str	lr, [r6, #8]
								break;
   23f18:	eafffe50 	b	23860 <JSMNR_parse+0x5c>
	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
   23f1c:	e1a08002 	mov	r8, r2
   23f20:	eaffff7d 	b	23d1c <JSMNR_parse+0x518>
   23f24:	e50be030 	str	lr, [fp, #-48]	; 0xffffffd0
						if (token->type != type) {
   23f28:	e5dc4000 	ldrb	r4, [ip]
   23f2c:	e51be028 	ldr	lr, [fp, #-40]	; 0xffffffd8
   23f30:	e154000e 	cmp	r4, lr
   23f34:	1a000034 	bne	2400c <JSMNR_parse+0x808>
						token->end = parser->pos + 1;
   23f38:	e2855001 	add	r5, r5, #1
						parser->toksuper = -1;
   23f3c:	e5868008 	str	r8, [r6, #8]
   23f40:	e083e200 	add	lr, r3, r0, lsl #4
						token->end = parser->pos + 1;
   23f44:	e58c5008 	str	r5, [ip, #8]
					if (token->start != -1 && token->end == -1) {
   23f48:	e59ec004 	ldr	ip, [lr, #4]
   23f4c:	e37c0001 	cmn	ip, #1
   23f50:	0a000002 	beq	23f60 <JSMNR_parse+0x75c>
   23f54:	e59ec008 	ldr	ip, [lr, #8]
   23f58:	e37c0001 	cmn	ip, #1
   23f5c:	0afffe3e 	beq	2385c <JSMNR_parse+0x58>
				for (; i >= 0; i--) {
   23f60:	e2400001 	sub	r0, r0, #1
   23f64:	e3700001 	cmn	r0, #1
   23f68:	e24ee010 	sub	lr, lr, #16
   23f6c:	1afffff5 	bne	23f48 <JSMNR_parse+0x744>
   23f70:	eafffe3a 	b	23860 <JSMNR_parse+0x5c>
			if (tokens == NULL) {
   23f74:	e3530000 	cmp	r3, #0
   23f78:	0a000015 	beq	23fd4 <JSMNR_parse+0x7d0>
	if (parser->toknext >= num_tokens) {
   23f7c:	e596e004 	ldr	lr, [r6, #4]
   23f80:	e59b0004 	ldr	r0, [fp, #4]
   23f84:	e150000e 	cmp	r0, lr
   23f88:	9a00001c 	bls	24000 <JSMNR_parse+0x7fc>
	token->type = type;
   23f8c:	e3a05003 	mov	r5, #3
				if (parser->toksuper != -1 && tokens != NULL)
   23f90:	e5960008 	ldr	r0, [r6, #8]
	tok = &tokens[parser->toknext++];
   23f94:	e28e4001 	add	r4, lr, #1
   23f98:	e5864004 	str	r4, [r6, #4]
				if (parser->toksuper != -1 && tokens != NULL)
   23f9c:	e3700001 	cmn	r0, #1
	tok = &tokens[parser->toknext++];
   23fa0:	e083420e 	add	r4, r3, lr, lsl #4
	tok->size = 0;
   23fa4:	e584900c 	str	r9, [r4, #12]
				count++;
   23fa8:	e28aa001 	add	sl, sl, #1
	token->type = type;
   23fac:	e7c3520e 	strb	r5, [r3, lr, lsl #4]
	token->start = start;
   23fb0:	e584c004 	str	ip, [r4, #4]
	token->end = end;
   23fb4:	e5841008 	str	r1, [r4, #8]
				if (parser->toksuper != -1 && tokens != NULL)
   23fb8:	0afffe28 	beq	23860 <JSMNR_parse+0x5c>
					tokens[parser->toksuper].size++;
   23fbc:	e0830200 	add	r0, r3, r0, lsl #4
   23fc0:	e590c00c 	ldr	ip, [r0, #12]
   23fc4:	e5961000 	ldr	r1, [r6]
   23fc8:	e28cc001 	add	ip, ip, #1
   23fcc:	e580c00c 	str	ip, [r0, #12]
   23fd0:	eafffe22 	b	23860 <JSMNR_parse+0x5c>
				count++;
   23fd4:	e28aa001 	add	sl, sl, #1
   23fd8:	eafffe20 	b	23860 <JSMNR_parse+0x5c>
				if (i == -1)
   23fdc:	e3700001 	cmn	r0, #1
   23fe0:	1afffe1e 	bne	23860 <JSMNR_parse+0x5c>
   23fe4:	eafffe66 	b	23984 <JSMNR_parse+0x180>
                            LogWrite(FromJSMNR, LOG_DEBUG, "JSMNR_ERROR_INVAL hex bounds %d pos %d", js[parser->pos], parser->pos);
   23fe8:	e58d0000 	str	r0, [sp]
   23fec:	e1a0300e 	mov	r3, lr
   23ff0:	e59f2058 	ldr	r2, [pc, #88]	; 24050 <JSMNR_parse+0x84c>
   23ff4:	eaffff20 	b	23c7c <JSMNR_parse+0x478>
					return JSMNR_ERROR_NOMEM;
   23ff8:	e3e0a000 	mvn	sl, #0
   23ffc:	eafffe42 	b	2390c <JSMNR_parse+0x108>
		parser->pos = start;
   24000:	e5865000 	str	r5, [r6]
		return JSMNR_ERROR_NOMEM;
   24004:	e3e0a000 	mvn	sl, #0
   24008:	eafffe3f 	b	2390c <JSMNR_parse+0x108>
   2400c:	e51be030 	ldr	lr, [fp, #-48]	; 0xffffffd0
                            LogWrite(FromJSMNR, LOG_NOTICE, "JSMNR_ERROR_INVAL %d type %d %d", token->start, token->type, type);
   24010:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
   24014:	e59f2038 	ldr	r2, [pc, #56]	; 24054 <JSMNR_parse+0x850>
   24018:	e58d3004 	str	r3, [sp, #4]
   2401c:	e58d4000 	str	r4, [sp]
   24020:	e1a0300e 	mov	r3, lr
   24024:	e3a01003 	mov	r1, #3
   24028:	e59f000c 	ldr	r0, [pc, #12]	; 2403c <JSMNR_parse+0x838>
   2402c:	eb000051 	bl	24178 <LogWrite>
							return JSMNR_ERROR_INVAL;
   24030:	e3e0a001 	mvn	sl, #1
   24034:	eafffe34 	b	2390c <JSMNR_parse+0x108>
   24038:	000539e0 	.word	0x000539e0
   2403c:	000539d8 	.word	0x000539d8
   24040:	00053a24 	.word	0x00053a24
   24044:	00053a60 	.word	0x00053a60
   24048:	000539a4 	.word	0x000539a4
   2404c:	00053a88 	.word	0x00053a88
   24050:	00053a38 	.word	0x00053a38
   24054:	000539b8 	.word	0x000539b8

00024058 <JSMNR_init>:
	parser->pos = 0;
   24058:	e3a03000 	mov	r3, #0
	parser->toksuper = -1;
   2405c:	e3e02000 	mvn	r2, #0
	parser->pos = 0;
   24060:	e5803000 	str	r3, [r0]
	parser->toksuper = -1;
   24064:	e5802008 	str	r2, [r0, #8]
	parser->toknext = 0;
   24068:	e5803004 	str	r3, [r0, #4]
}
   2406c:	e12fff1e 	bx	lr

00024070 <JSMNR_logLongStr>:
{
   24070:	e92d4bf0 	push	{r4, r5, r6, r7, r8, r9, fp, lr}
    if (infoLevel)
   24074:	e2524000 	subs	r4, r2, #0
{
   24078:	e28db01c 	add	fp, sp, #28
   2407c:	e1a02000 	mov	r2, r0
   24080:	e1a05001 	mov	r5, r1
    if (infoLevel)
   24084:	0a000019 	beq	240f0 <JSMNR_logLongStr+0x80>
        LogWrite(FromJSMNR, LOG_NOTICE, headerMsg);
   24088:	e3a04000 	mov	r4, #0
   2408c:	e3a01003 	mov	r1, #3
   24090:	e59f00bc 	ldr	r0, [pc, #188]	; 24154 <JSMNR_logLongStr+0xe4>
   24094:	eb000037 	bl	24178 <LogWrite>
        pBuf[linLen] = 0;
   24098:	e1a08004 	mov	r8, r4
            LogWrite(FromJSMNR, LOG_NOTICE, pBuf);
   2409c:	e59f70b0 	ldr	r7, [pc, #176]	; 24154 <JSMNR_logLongStr+0xe4>
   240a0:	ea00000b 	b	240d4 <JSMNR_logLongStr+0x64>
    {
   240a4:	e1a0600d 	mov	r6, sp
        char pBuf[linLen+1];
   240a8:	e24dd058 	sub	sp, sp, #88	; 0x58
        strlcpy(pBuf, toLog+i, linLen+1);
   240ac:	e1a0000d 	mov	r0, sp
   240b0:	e3a02051 	mov	r2, #81	; 0x51
   240b4:	eb00a543 	bl	4d5c8 <strlcpy>
        pBuf[linLen] = 0;
   240b8:	e5cd8050 	strb	r8, [sp, #80]	; 0x50
            LogWrite(FromJSMNR, LOG_NOTICE, pBuf);
   240bc:	e1a0200d 	mov	r2, sp
   240c0:	e3a01003 	mov	r1, #3
   240c4:	e1a00007 	mov	r0, r7
   240c8:	eb00002a 	bl	24178 <LogWrite>
   240cc:	e1a0d006 	mov	sp, r6
    for (unsigned int i = 0; i < strlen(toLog); i+=linLen)
   240d0:	e2844050 	add	r4, r4, #80	; 0x50
   240d4:	e1a00005 	mov	r0, r5
   240d8:	eb00a54f 	bl	4d61c <strlen>
   240dc:	e1500004 	cmp	r0, r4
        strlcpy(pBuf, toLog+i, linLen+1);
   240e0:	e0851004 	add	r1, r5, r4
    for (unsigned int i = 0; i < strlen(toLog); i+=linLen)
   240e4:	8affffee 	bhi	240a4 <JSMNR_logLongStr+0x34>
        else
            LogWrite(FromJSMNR, LOG_DEBUG, pBuf);
    }
}
   240e8:	e24bd01c 	sub	sp, fp, #28
   240ec:	e8bd8bf0 	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
        LogWrite(FromJSMNR, LOG_DEBUG, headerMsg);
   240f0:	e3a01004 	mov	r1, #4
   240f4:	e59f0058 	ldr	r0, [pc, #88]	; 24154 <JSMNR_logLongStr+0xe4>
   240f8:	eb00001e 	bl	24178 <LogWrite>
        pBuf[linLen] = 0;
   240fc:	e1a08004 	mov	r8, r4
            LogWrite(FromJSMNR, LOG_DEBUG, pBuf);
   24100:	e59f704c 	ldr	r7, [pc, #76]	; 24154 <JSMNR_logLongStr+0xe4>
   24104:	ea00000b 	b	24138 <JSMNR_logLongStr+0xc8>
    {
   24108:	e1a0600d 	mov	r6, sp
        char pBuf[linLen+1];
   2410c:	e24dd058 	sub	sp, sp, #88	; 0x58
        strlcpy(pBuf, toLog+i, linLen+1);
   24110:	e1a0000d 	mov	r0, sp
   24114:	e3a02051 	mov	r2, #81	; 0x51
   24118:	eb00a52a 	bl	4d5c8 <strlcpy>
        pBuf[linLen] = 0;
   2411c:	e5cd8050 	strb	r8, [sp, #80]	; 0x50
            LogWrite(FromJSMNR, LOG_DEBUG, pBuf);
   24120:	e1a0200d 	mov	r2, sp
   24124:	e3a01004 	mov	r1, #4
   24128:	e1a00007 	mov	r0, r7
   2412c:	eb000011 	bl	24178 <LogWrite>
   24130:	e1a0d006 	mov	sp, r6
    for (unsigned int i = 0; i < strlen(toLog); i+=linLen)
   24134:	e2844050 	add	r4, r4, #80	; 0x50
   24138:	e1a00005 	mov	r0, r5
   2413c:	eb00a536 	bl	4d61c <strlen>
   24140:	e1500004 	cmp	r0, r4
        strlcpy(pBuf, toLog+i, linLen+1);
   24144:	e0851004 	add	r1, r5, r4
    for (unsigned int i = 0; i < strlen(toLog); i+=linLen)
   24148:	8affffee 	bhi	24108 <JSMNR_logLongStr+0x98>
}
   2414c:	e24bd01c 	sub	sp, fp, #28
   24150:	e8bd8bf0 	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   24154:	000539d8 	.word	0x000539d8

00024158 <LogSetOutFn>:

// Set output to be character based
LogOutChFnType* __log_pOutChFunction = NULL;
void LogSetOutFn(LogOutChFnType* pOutFn)
{
    __log_pOutChFunction = pOutFn;
   24158:	e59f3004 	ldr	r3, [pc, #4]	; 24164 <LogSetOutFn+0xc>
   2415c:	e5830000 	str	r0, [r3]
}
   24160:	e12fff1e 	bx	lr
   24164:	0006fafc 	.word	0x0006fafc

00024168 <LogSetOutMsgFn>:

// Set output to be message based
LogOutMsgFnType* __log_pOutMsgFunction = NULL;
void LogSetOutMsgFn(LogOutMsgFnType* pOutFn)
{
    __log_pOutMsgFunction = pOutFn;
   24168:	e59f3004 	ldr	r3, [pc, #4]	; 24174 <LogSetOutMsgFn+0xc>
   2416c:	e5830004 	str	r0, [r3, #4]
}
   24170:	e12fff1e 	bx	lr
   24174:	0006fafc 	.word	0x0006fafc

00024178 <LogWrite>:

// Main logging function
void LogWrite(const char* pSource,
    unsigned severity,
    const char* fmt, ...)
{
   24178:	e92d000c 	push	{r2, r3}
   2417c:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   24180:	e24ddd32 	sub	sp, sp, #3200	; 0xc80
   24184:	e24dd00c 	sub	sp, sp, #12
   24188:	e1a04001 	mov	r4, r1
    // Check for USPI log messages
    if (strstr(pSource, "uspi") || strstr(pSource, "usbdev") || strstr(pSource, "dwroot"))
   2418c:	e59f122c 	ldr	r1, [pc, #556]	; 243c0 <LogWrite+0x248>
{
   24190:	e1a06000 	mov	r6, r0
    if (strstr(pSource, "uspi") || strstr(pSource, "usbdev") || strstr(pSource, "dwroot"))
   24194:	eb00a6c4 	bl	4dcac <strstr>
   24198:	e3500000 	cmp	r0, #0
   2419c:	0a000033 	beq	24270 <LogWrite+0xf8>
        severity = USPI_LOG_SEVERITY;
   241a0:	e3a04005 	mov	r4, #5

    if (severity > __logSeverity)
   241a4:	e59f3218 	ldr	r3, [pc, #536]	; 243c4 <LogWrite+0x24c>
   241a8:	e5933000 	ldr	r3, [r3]
   241ac:	e1530004 	cmp	r3, r4
   241b0:	2a000004 	bcs	241c8 <LogWrite+0x50>
        LOG_WRITE_STRING(pSource);
        LOG_WRITE_STRING(": ");
        LOG_WRITE_STRING(buf);
        LOG_WRITE_STRING("\n");
    }
}
   241b4:	e28ddd32 	add	sp, sp, #3200	; 0xc80
   241b8:	e28dd00c 	add	sp, sp, #12
   241bc:	e8bd40f0 	pop	{r4, r5, r6, r7, lr}
   241c0:	e28dd008 	add	sp, sp, #8
   241c4:	e12fff1e 	bx	lr
    va_start(args, fmt);
   241c8:	e28d3eca 	add	r3, sp, #3232	; 0xca0
   241cc:	e2833004 	add	r3, r3, #4
    if (__log_pOutMsgFunction)
   241d0:	e59f51f0 	ldr	r5, [pc, #496]	; 243c8 <LogWrite+0x250>
    ee_vsprintf(buf, fmt, args);
   241d4:	e1a02003 	mov	r2, r3
   241d8:	e28d0008 	add	r0, sp, #8
   241dc:	e59d1ca0 	ldr	r1, [sp, #3232]	; 0xca0
    va_start(args, fmt);
   241e0:	e58d3004 	str	r3, [sp, #4]
    ee_vsprintf(buf, fmt, args);
   241e4:	ebfff922 	bl	22674 <ee_vsprintf>
    if (__log_pOutMsgFunction)
   241e8:	e5957004 	ldr	r7, [r5, #4]
   241ec:	e3570000 	cmp	r7, #0
   241f0:	0a000010 	beq	24238 <LogWrite+0xc0>
        char severityStr[2] = "?";
   241f4:	e3a0203f 	mov	r2, #63	; 0x3f
        switch (severity) 
   241f8:	e2443001 	sub	r3, r4, #1
        char severityStr[2] = "?";
   241fc:	e1cd20b0 	strh	r2, [sp]
        switch (severity) 
   24200:	e3530004 	cmp	r3, #4
   24204:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
   24208:	ea000006 	b	24228 <LogWrite+0xb0>
   2420c:	00024390 	.word	0x00024390
   24210:	0002439c 	.word	0x0002439c
   24214:	000243a8 	.word	0x000243a8
   24218:	000243b4 	.word	0x000243b4
   2421c:	00024220 	.word	0x00024220
            case LOG_VERBOSE: severityStr[0] = 'V'; break;
   24220:	e3a03056 	mov	r3, #86	; 0x56
   24224:	e5cd3000 	strb	r3, [sp]
        __log_pOutMsgFunction(severityStr, pSource, buf);
   24228:	e28d2008 	add	r2, sp, #8
   2422c:	e1a01006 	mov	r1, r6
   24230:	e2420008 	sub	r0, r2, #8
   24234:	e12fff37 	blx	r7
    if (__log_pOutChFunction)
   24238:	e5953000 	ldr	r3, [r5]
   2423c:	e3530000 	cmp	r3, #0
   24240:	0affffdb 	beq	241b4 <LogWrite+0x3c>
        LOG_WRITE_STRING("[");
   24244:	e59f0180 	ldr	r0, [pc, #384]	; 243cc <LogWrite+0x254>
        switch (severity) {
   24248:	e2444001 	sub	r4, r4, #1
        LOG_WRITE_STRING("[");
   2424c:	e12fff33 	blx	r3
        switch (severity) {
   24250:	e3540004 	cmp	r4, #4
   24254:	979ff104 	ldrls	pc, [pc, r4, lsl #2]
   24258:	ea00002d 	b	24314 <LogWrite+0x19c>
   2425c:	000242fc 	.word	0x000242fc
   24260:	000242e4 	.word	0x000242e4
   24264:	000242cc 	.word	0x000242cc
   24268:	000242b4 	.word	0x000242b4
   2426c:	0002429c 	.word	0x0002429c
    if (strstr(pSource, "uspi") || strstr(pSource, "usbdev") || strstr(pSource, "dwroot"))
   24270:	e59f1158 	ldr	r1, [pc, #344]	; 243d0 <LogWrite+0x258>
   24274:	e1a00006 	mov	r0, r6
   24278:	eb00a68b 	bl	4dcac <strstr>
   2427c:	e3500000 	cmp	r0, #0
   24280:	1affffc6 	bne	241a0 <LogWrite+0x28>
   24284:	e59f1148 	ldr	r1, [pc, #328]	; 243d4 <LogWrite+0x25c>
   24288:	e1a00006 	mov	r0, r6
   2428c:	eb00a686 	bl	4dcac <strstr>
        severity = USPI_LOG_SEVERITY;
   24290:	e3500000 	cmp	r0, #0
   24294:	13a04005 	movne	r4, #5
   24298:	eaffffc1 	b	241a4 <LogWrite+0x2c>
            LOG_WRITE_STRING("VERBOSE");
   2429c:	e5953000 	ldr	r3, [r5]
   242a0:	e3530000 	cmp	r3, #0
   242a4:	0affffc2 	beq	241b4 <LogWrite+0x3c>
   242a8:	e59f0128 	ldr	r0, [pc, #296]	; 243d8 <LogWrite+0x260>
   242ac:	e12fff33 	blx	r3
   242b0:	ea00001c 	b	24328 <LogWrite+0x1b0>
            LOG_WRITE_STRING("DEBUG  ");
   242b4:	e5953000 	ldr	r3, [r5]
   242b8:	e3530000 	cmp	r3, #0
   242bc:	0affffbc 	beq	241b4 <LogWrite+0x3c>
   242c0:	e59f0114 	ldr	r0, [pc, #276]	; 243dc <LogWrite+0x264>
   242c4:	e12fff33 	blx	r3
   242c8:	ea000016 	b	24328 <LogWrite+0x1b0>
            LOG_WRITE_STRING("NOTICE ");
   242cc:	e5953000 	ldr	r3, [r5]
   242d0:	e3530000 	cmp	r3, #0
   242d4:	0affffb6 	beq	241b4 <LogWrite+0x3c>
   242d8:	e59f0100 	ldr	r0, [pc, #256]	; 243e0 <LogWrite+0x268>
   242dc:	e12fff33 	blx	r3
   242e0:	ea000010 	b	24328 <LogWrite+0x1b0>
            LOG_WRITE_STRING("WARNING");
   242e4:	e5953000 	ldr	r3, [r5]
   242e8:	e3530000 	cmp	r3, #0
   242ec:	0affffb0 	beq	241b4 <LogWrite+0x3c>
   242f0:	e59f00ec 	ldr	r0, [pc, #236]	; 243e4 <LogWrite+0x26c>
   242f4:	e12fff33 	blx	r3
   242f8:	ea00000a 	b	24328 <LogWrite+0x1b0>
            LOG_WRITE_STRING("ERROR  ");
   242fc:	e5953000 	ldr	r3, [r5]
   24300:	e3530000 	cmp	r3, #0
   24304:	0affffaa 	beq	241b4 <LogWrite+0x3c>
   24308:	e59f00d8 	ldr	r0, [pc, #216]	; 243e8 <LogWrite+0x270>
   2430c:	e12fff33 	blx	r3
   24310:	ea000004 	b	24328 <LogWrite+0x1b0>
            LOG_WRITE_STRING("??     ");
   24314:	e5953000 	ldr	r3, [r5]
   24318:	e3530000 	cmp	r3, #0
   2431c:	0affffa4 	beq	241b4 <LogWrite+0x3c>
   24320:	e59f00c4 	ldr	r0, [pc, #196]	; 243ec <LogWrite+0x274>
   24324:	e12fff33 	blx	r3
        LOG_WRITE_STRING("] ");
   24328:	e5953000 	ldr	r3, [r5]
   2432c:	e3530000 	cmp	r3, #0
   24330:	0a000011 	beq	2437c <LogWrite+0x204>
   24334:	e59f00b4 	ldr	r0, [pc, #180]	; 243f0 <LogWrite+0x278>
   24338:	e12fff33 	blx	r3
   2433c:	e5953000 	ldr	r3, [r5]
        LOG_WRITE_STRING(pSource);
   24340:	e3530000 	cmp	r3, #0
   24344:	0affff9a 	beq	241b4 <LogWrite+0x3c>
   24348:	e1a00006 	mov	r0, r6
   2434c:	e12fff33 	blx	r3
        LOG_WRITE_STRING(": ");
   24350:	e5953000 	ldr	r3, [r5]
   24354:	e3530000 	cmp	r3, #0
   24358:	0affff95 	beq	241b4 <LogWrite+0x3c>
   2435c:	e59f0090 	ldr	r0, [pc, #144]	; 243f4 <LogWrite+0x27c>
   24360:	e12fff33 	blx	r3
   24364:	e5953000 	ldr	r3, [r5]
        LOG_WRITE_STRING(buf);
   24368:	e3530000 	cmp	r3, #0
   2436c:	0affff90 	beq	241b4 <LogWrite+0x3c>
   24370:	e28d0008 	add	r0, sp, #8
   24374:	e12fff33 	blx	r3
   24378:	e5953000 	ldr	r3, [r5]
        LOG_WRITE_STRING("\n");
   2437c:	e3530000 	cmp	r3, #0
   24380:	0affff8b 	beq	241b4 <LogWrite+0x3c>
   24384:	e59f006c 	ldr	r0, [pc, #108]	; 243f8 <LogWrite+0x280>
   24388:	e12fff33 	blx	r3
   2438c:	eaffff88 	b	241b4 <LogWrite+0x3c>
            case LOG_ERROR: severityStr[0] = 'E'; break;
   24390:	e3a03045 	mov	r3, #69	; 0x45
   24394:	e5cd3000 	strb	r3, [sp]
   24398:	eaffffa2 	b	24228 <LogWrite+0xb0>
            case LOG_WARNING: severityStr[0] = 'W'; break;
   2439c:	e3a03057 	mov	r3, #87	; 0x57
   243a0:	e5cd3000 	strb	r3, [sp]
   243a4:	eaffff9f 	b	24228 <LogWrite+0xb0>
            case LOG_NOTICE: severityStr[0] = 'N'; break;
   243a8:	e3a0304e 	mov	r3, #78	; 0x4e
   243ac:	e5cd3000 	strb	r3, [sp]
   243b0:	eaffff9c 	b	24228 <LogWrite+0xb0>
            case LOG_DEBUG: severityStr[0] = 'D'; break;
   243b4:	e3a03044 	mov	r3, #68	; 0x44
   243b8:	e5cd3000 	strb	r3, [sp]
   243bc:	eaffff99 	b	24228 <LogWrite+0xb0>
   243c0:	00053ab4 	.word	0x00053ab4
   243c4:	00062a58 	.word	0x00062a58
   243c8:	0006fafc 	.word	0x0006fafc
   243cc:	00054a88 	.word	0x00054a88
   243d0:	00053abc 	.word	0x00053abc
   243d4:	00053ac4 	.word	0x00053ac4
   243d8:	00053aec 	.word	0x00053aec
   243dc:	00053ae4 	.word	0x00053ae4
   243e0:	00053adc 	.word	0x00053adc
   243e4:	00053ad4 	.word	0x00053ad4
   243e8:	00053acc 	.word	0x00053acc
   243ec:	00053af4 	.word	0x00053af4
   243f0:	00053afc 	.word	0x00053afc
   243f4:	00053b00 	.word	0x00053b00
   243f8:	0005567c 	.word	0x0005567c

000243fc <LogSetLevel>:

void LogSetLevel(int severity)
{
    __logSeverity = severity;
   243fc:	e59f3004 	ldr	r3, [pc, #4]	; 24408 <LogSetLevel+0xc>
   24400:	e5830000 	str	r0, [r3]
}
   24404:	e12fff1e 	bx	lr
   24408:	00062a58 	.word	0x00062a58

0002440c <LogPrintf>:

void LogPrintf(const char* fmt, ...)
{
   2440c:	e92d000f 	push	{r0, r1, r2, r3}
   24410:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   24414:	e24dde4b 	sub	sp, sp, #1200	; 0x4b0
   24418:	e24dd00c 	sub	sp, sp, #12
    char buf[15 * 80];
    va_list args;

    va_start(args, fmt);
   2441c:	e28d3d13 	add	r3, sp, #1216	; 0x4c0
   24420:	e2833004 	add	r3, r3, #4
    ee_vsprintf(buf, fmt, args);
   24424:	e1a02003 	mov	r2, r3
   24428:	e28d0008 	add	r0, sp, #8
   2442c:	e59d14c0 	ldr	r1, [sp, #1216]	; 0x4c0
    va_start(args, fmt);
   24430:	e58d3004 	str	r3, [sp, #4]
    ee_vsprintf(buf, fmt, args);
   24434:	ebfff88e 	bl	22674 <ee_vsprintf>
    va_end(args);

    DISP_WRITE_STRING(buf);
   24438:	e59f3024 	ldr	r3, [pc, #36]	; 24464 <LogPrintf+0x58>
   2443c:	e5933000 	ldr	r3, [r3]
   24440:	e3530000 	cmp	r3, #0
   24444:	0a000001 	beq	24450 <LogPrintf+0x44>
   24448:	e28d0008 	add	r0, sp, #8
   2444c:	e12fff33 	blx	r3
}
   24450:	e28dde4b 	add	sp, sp, #1200	; 0x4b0
   24454:	e28dd00c 	add	sp, sp, #12
   24458:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
   2445c:	e28dd010 	add	sp, sp, #16
   24460:	e12fff1e 	bx	lr
   24464:	0006fafc 	.word	0x0006fafc

00024468 <LogDumpMemory>:

void LogDumpMemory(unsigned char* start_addr, unsigned char* end_addr)
{
    unsigned char* pAddr = start_addr;
    int linPos = 0;
    for (long i = 0; i < end_addr - start_addr; i++) {
   24468:	e0413000 	sub	r3, r1, r0
   2446c:	e3530000 	cmp	r3, #0
   24470:	da000019 	ble	244dc <LogDumpMemory+0x74>
{
   24474:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   24478:	e1a05000 	mov	r5, r0
   2447c:	e1a06001 	mov	r6, r1
    int linPos = 0;
   24480:	e3a04000 	mov	r4, #0
        LogPrintf("%02x", *pAddr++);
   24484:	e59f7058 	ldr	r7, [pc, #88]	; 244e4 <LogDumpMemory+0x7c>
            LogPrintf("\r\n");
            linPos = 0;
        }
        else
        {
            LogPrintf(" ");
   24488:	e59f8058 	ldr	r8, [pc, #88]	; 244e8 <LogDumpMemory+0x80>
            LogPrintf("\r\n");
   2448c:	e59f9058 	ldr	r9, [pc, #88]	; 244ec <LogDumpMemory+0x84>
        linPos++;
   24490:	e2844001 	add	r4, r4, #1
        LogPrintf("%02x", *pAddr++);
   24494:	e4d51001 	ldrb	r1, [r5], #1
   24498:	e1a00007 	mov	r0, r7
   2449c:	ebffffda 	bl	2440c <LogPrintf>
        if (linPos == 16)
   244a0:	e3540010 	cmp	r4, #16
   244a4:	0a000006 	beq	244c4 <LogDumpMemory+0x5c>
            LogPrintf(" ");
   244a8:	e1a00008 	mov	r0, r8
   244ac:	ebffffd6 	bl	2440c <LogPrintf>
    for (long i = 0; i < end_addr - start_addr; i++) {
   244b0:	e1560005 	cmp	r6, r5
   244b4:	1afffff5 	bne	24490 <LogDumpMemory+0x28>
        }
    }
    LogPrintf("\r\n");
}
   244b8:	e8bd47f0 	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
    LogPrintf("\r\n");
   244bc:	e59f0028 	ldr	r0, [pc, #40]	; 244ec <LogDumpMemory+0x84>
   244c0:	eaffffd1 	b	2440c <LogPrintf>
            LogPrintf("\r\n");
   244c4:	e1a00009 	mov	r0, r9
   244c8:	ebffffcf 	bl	2440c <LogPrintf>
    for (long i = 0; i < end_addr - start_addr; i++) {
   244cc:	e1560005 	cmp	r6, r5
   244d0:	0afffff8 	beq	244b8 <LogDumpMemory+0x50>
            linPos = 0;
   244d4:	e3a04000 	mov	r4, #0
   244d8:	eaffffec 	b	24490 <LogDumpMemory+0x28>
    LogPrintf("\r\n");
   244dc:	e59f0008 	ldr	r0, [pc, #8]	; 244ec <LogDumpMemory+0x84>
   244e0:	eaffffc9 	b	2440c <LogPrintf>
   244e4:	00055348 	.word	0x00055348
   244e8:	00053ed8 	.word	0x00053ed8
   244ec:	00053b04 	.word	0x00053b04

000244f0 <nmalloc_set_memory_area>:
{
    _nmalloc_data.data = pBuff;

    _nmalloc_data.first_free = (block*)pBuff;
    _nmalloc_data.first_free->size = max_size;
    _nmalloc_data.first_free->prev = 0;
   244f0:	e3a03000 	mov	r3, #0
    _nmalloc_data.data = pBuff;
   244f4:	e59f2014 	ldr	r2, [pc, #20]	; 24510 <nmalloc_set_memory_area+0x20>
    _nmalloc_data.first_free->size = max_size;
   244f8:	e5801008 	str	r1, [r0, #8]
    _nmalloc_data.data = pBuff;
   244fc:	e5820000 	str	r0, [r2]
    _nmalloc_data.first_free = (block*)pBuff;
   24500:	e5820004 	str	r0, [r2, #4]
    _nmalloc_data.first_free->prev = 0;
   24504:	e5803000 	str	r3, [r0]
    _nmalloc_data.first_free->next = 0;
   24508:	e5803004 	str	r3, [r0, #4]
}
   2450c:	e12fff1e 	bx	lr
   24510:	0006fb04 	.word	0x0006fb04

00024514 <nmalloc_malloc>:
    block newfblock;
    block* pnewfblock;
    size_T data_size;
    size_T size_needed;

    if (size == 0)
   24514:	e3500000 	cmp	r0, #0
   24518:	012fff1e 	bxeq	lr
        return 0;

    data_size = sizeof(size_T) + size;
   2451c:	e2800004 	add	r0, r0, #4
   24520:	e350000c 	cmp	r0, #12
   24524:	33a0000c 	movcc	r0, #12

    if (data_size < BLOCK_HEADER_SIZE)
        data_size = BLOCK_HEADER_SIZE;

    /* Let data_size be a multiple of BLOCK_HEADER_SIZE to respect struct alignment */
    data_size += BLOCK_HEADER_SIZE - (data_size % (BLOCK_HEADER_SIZE));
   24528:	e59f20d0 	ldr	r2, [pc, #208]	; 24600 <nmalloc_malloc+0xec>

    size_needed = data_size + BLOCK_HEADER_SIZE;

    /* Follow the free blocks list to find a good one */
    cfree = _nmalloc_data.first_free;
   2452c:	e59fc0d0 	ldr	ip, [pc, #208]	; 24604 <nmalloc_malloc+0xf0>
    data_size += BLOCK_HEADER_SIZE - (data_size % (BLOCK_HEADER_SIZE));
   24530:	e0832290 	umull	r2, r3, r0, r2
{
   24534:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    data_size += BLOCK_HEADER_SIZE - (data_size % (BLOCK_HEADER_SIZE));
   24538:	e1a011a3 	lsr	r1, r3, #3
    cfree = _nmalloc_data.first_free;
   2453c:	e59ce004 	ldr	lr, [ip, #4]
    data_size += BLOCK_HEADER_SIZE - (data_size % (BLOCK_HEADER_SIZE));
   24540:	e0811081 	add	r1, r1, r1, lsl #1
   24544:	e1a01101 	lsl	r1, r1, #2

    while (cfree && cfree->next && cfree->size < size_needed)
   24548:	e35e0000 	cmp	lr, #0
    data_size += BLOCK_HEADER_SIZE - (data_size % (BLOCK_HEADER_SIZE));
   2454c:	e281400c 	add	r4, r1, #12
    size_needed = data_size + BLOCK_HEADER_SIZE;
   24550:	e2811018 	add	r1, r1, #24
    while (cfree && cfree->next && cfree->size < size_needed)
   24554:	0a000022 	beq	245e4 <nmalloc_malloc+0xd0>
   24558:	e99e0005 	ldmib	lr, {r0, r2}
   2455c:	e3500000 	cmp	r0, #0
   24560:	0a000021 	beq	245ec <nmalloc_malloc+0xd8>
   24564:	e1520001 	cmp	r2, r1
   24568:	3a000003 	bcc	2457c <nmalloc_malloc+0x68>
   2456c:	ea000020 	b	245f4 <nmalloc_malloc+0xe0>
   24570:	e1510002 	cmp	r1, r2
   24574:	9a000007 	bls	24598 <nmalloc_malloc+0x84>
   24578:	e1a00003 	mov	r0, r3
   2457c:	e5903004 	ldr	r3, [r0, #4]
   24580:	e5902008 	ldr	r2, [r0, #8]
   24584:	e3530000 	cmp	r3, #0
   24588:	1afffff8 	bne	24570 <nmalloc_malloc+0x5c>
        cfree = cfree->next;

    if (cfree == 0 || cfree->size < size_needed) {
   2458c:	e1510002 	cmp	r1, r2
   24590:	93a03000 	movls	r3, #0
   24594:	8a000012 	bhi	245e4 <nmalloc_malloc+0xd0>
    newfblock.next = cfree->next;
    newfblock.prev = cfree->prev;
    newfblock.size = cfree->size - data_size;
    ;

    pnewfblock = (block*)(cfree + (data_size / BLOCK_HEADER_SIZE));
   24598:	e59f6060 	ldr	r6, [pc, #96]	; 24600 <nmalloc_malloc+0xec>
    newfblock.prev = cfree->prev;
   2459c:	e5905000 	ldr	r5, [r0]
    pnewfblock = (block*)(cfree + (data_size / BLOCK_HEADER_SIZE));
   245a0:	e0876694 	umull	r6, r7, r4, r6
   245a4:	e1a011a7 	lsr	r1, r7, #3
   245a8:	e0811081 	add	r1, r1, r1, lsl #1
   245ac:	e1a01101 	lsl	r1, r1, #2
   245b0:	e080e001 	add	lr, r0, r1
    *pnewfblock = newfblock;

    if (pnewfblock->prev == 0)
   245b4:	e3550000 	cmp	r5, #0
    newfblock.size = cfree->size - data_size;
   245b8:	e0422004 	sub	r2, r2, r4
    *pnewfblock = newfblock;
   245bc:	e7805001 	str	r5, [r0, r1]
   245c0:	e58e3004 	str	r3, [lr, #4]
   245c4:	e58e2008 	str	r2, [lr, #8]
        _nmalloc_data.first_free = pnewfblock;
    else
        pnewfblock->prev->next = pnewfblock;
   245c8:	1585e004 	strne	lr, [r5, #4]
   245cc:	159e3004 	ldrne	r3, [lr, #4]
        _nmalloc_data.first_free = pnewfblock;
   245d0:	058ce004 	streq	lr, [ip, #4]

    if (pnewfblock->next)
   245d4:	e3530000 	cmp	r3, #0
        pnewfblock->next->prev = pnewfblock;
   245d8:	1583e000 	strne	lr, [r3]

    *(size_T*)cfree = data_size;
   245dc:	e4804004 	str	r4, [r0], #4
    return ((unsigned char*)cfree) + sizeof(size_T);
   245e0:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
        return 0;
   245e4:	e3a00000 	mov	r0, #0
}
   245e8:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
    while (cfree && cfree->next && cfree->size < size_needed)
   245ec:	e1a0000e 	mov	r0, lr
   245f0:	eaffffe5 	b	2458c <nmalloc_malloc+0x78>
   245f4:	e1a03000 	mov	r3, r0
    cfree = _nmalloc_data.first_free;
   245f8:	e1a0000e 	mov	r0, lr
   245fc:	eaffffe5 	b	24598 <nmalloc_malloc+0x84>
   24600:	aaaaaaab 	.word	0xaaaaaaab
   24604:	0006fb04 	.word	0x0006fb04

00024608 <nmalloc_free>:
    newfblock->size = block_size;

    /* Find the correct place into the free blocks list
     * to insert the new free block */

    if (newfblock < _nmalloc_data.first_free) {
   24608:	e59f111c 	ldr	r1, [pc, #284]	; 2472c <nmalloc_free+0x124>
{
   2460c:	e92d4010 	push	{r4, lr}
    void* ptr = *pptr;
   24610:	e590e000 	ldr	lr, [r0]
    if (newfblock < _nmalloc_data.first_free) {
   24614:	e5912004 	ldr	r2, [r1, #4]
    newfblock->size = block_size;
   24618:	e51e3004 	ldr	r3, [lr, #-4]
    ptr = (unsigned char*)ptr - sizeof(size_T);
   2461c:	e24ec004 	sub	ip, lr, #4
    if (newfblock < _nmalloc_data.first_free) {
   24620:	e152000c 	cmp	r2, ip
    newfblock->size = block_size;
   24624:	e58e3004 	str	r3, [lr, #4]
    if (newfblock < _nmalloc_data.first_free) {
   24628:	9a00001f 	bls	246ac <nmalloc_free+0xa4>
        /* this will be the new first block */
        newfblock->prev = 0;
   2462c:	e3a04000 	mov	r4, #0
        newfblock->next = _nmalloc_data.first_free;
   24630:	e58e2000 	str	r2, [lr]
        _nmalloc_data.first_free = newfblock;
   24634:	e1a03002 	mov	r3, r2
   24638:	e1a0200c 	mov	r2, ip
   2463c:	e581c004 	str	ip, [r1, #4]
        newfblock->prev = 0;
   24640:	e50e4004 	str	r4, [lr, #-4]

    /* Update neighbours */
    if (newfblock->prev)
        newfblock->prev->next = newfblock;

    if (newfblock->next)
   24644:	e3530000 	cmp	r3, #0
   24648:	0a000000 	beq	24650 <nmalloc_free+0x48>
        newfblock->next->prev = newfblock;
   2464c:	e583c000 	str	ip, [r3]

    *pptr = 0;
   24650:	e3a03000 	mov	r3, #0
   24654:	e5803000 	str	r3, [r0]
   24658:	e5923004 	ldr	r3, [r2, #4]
   2465c:	ea000001 	b	24668 <nmalloc_free+0x60>
        if ((((unsigned char*)cb) + cb->size) == ((unsigned char*)(cb->next))) {
   24660:	e1a02003 	mov	r2, r3
   24664:	e5933004 	ldr	r3, [r3, #4]
    while (cb->next) {
   24668:	e3530000 	cmp	r3, #0
   2466c:	08bd8010 	popeq	{r4, pc}
        if ((((unsigned char*)cb) + cb->size) == ((unsigned char*)(cb->next))) {
   24670:	e5921008 	ldr	r1, [r2, #8]
   24674:	e0820001 	add	r0, r2, r1
   24678:	e1500003 	cmp	r0, r3
   2467c:	1afffff7 	bne	24660 <nmalloc_free+0x58>
            cb->size = cb->size + cb->next->size;
   24680:	e5930008 	ldr	r0, [r3, #8]
            cb->next = cb->next->next;
   24684:	e5933004 	ldr	r3, [r3, #4]
            cb->size = cb->size + cb->next->size;
   24688:	e0801001 	add	r1, r0, r1
            if (cb->next)
   2468c:	e3530000 	cmp	r3, #0
            cb->size = cb->size + cb->next->size;
   24690:	e5821008 	str	r1, [r2, #8]
            cb->next = cb->next->next;
   24694:	e5823004 	str	r3, [r2, #4]
            if (cb->next)
   24698:	08bd8010 	popeq	{r4, pc}
    while (cb->next) {
   2469c:	e3530000 	cmp	r3, #0
                cb->next->prev = cb;
   246a0:	e5832000 	str	r2, [r3]
    while (cb->next) {
   246a4:	1afffff1 	bne	24670 <nmalloc_free+0x68>
   246a8:	e8bd8010 	pop	{r4, pc}
        nextB = prevB->next;
   246ac:	e5921004 	ldr	r1, [r2, #4]
        while (nextB) {
   246b0:	e3510000 	cmp	r1, #0
   246b4:	0a000018 	beq	2471c <nmalloc_free+0x114>
            if (prevB < newfblock && newfblock < nextB) {
   246b8:	e152000c 	cmp	r2, ip
   246bc:	315c0001 	cmpcc	ip, r1
   246c0:	2a000008 	bcs	246e8 <nmalloc_free+0xe0>
   246c4:	ea00000e 	b	24704 <nmalloc_free+0xfc>
   246c8:	e15c0001 	cmp	ip, r1
   246cc:	93a04000 	movls	r4, #0
   246d0:	83a04001 	movhi	r4, #1
   246d4:	e15c0003 	cmp	ip, r3
   246d8:	23a04000 	movcs	r4, #0
   246dc:	e3540000 	cmp	r4, #0
   246e0:	1a000009 	bne	2470c <nmalloc_free+0x104>
   246e4:	e1a01003 	mov	r1, r3
            nextB = nextB->next;
   246e8:	e5913004 	ldr	r3, [r1, #4]
        while (nextB) {
   246ec:	e3530000 	cmp	r3, #0
   246f0:	1afffff4 	bne	246c8 <nmalloc_free+0xc0>
        newfblock->next = nextB;
   246f4:	e80e000a 	stmda	lr, {r1, r3}
        newfblock->prev->next = newfblock;
   246f8:	e581c004 	str	ip, [r1, #4]
   246fc:	e59e3000 	ldr	r3, [lr]
   24700:	eaffffcf 	b	24644 <nmalloc_free+0x3c>
            if (prevB < newfblock && newfblock < nextB) {
   24704:	e1a03001 	mov	r3, r1
   24708:	e1a01002 	mov	r1, r2
    if (newfblock->prev)
   2470c:	e3510000 	cmp	r1, #0
        newfblock->next = nextB;
   24710:	e80e000a 	stmda	lr, {r1, r3}
    if (newfblock->prev)
   24714:	1afffff7 	bne	246f8 <nmalloc_free+0xf0>
   24718:	eaffffcb 	b	2464c <nmalloc_free+0x44>
        newfblock->next = nextB;
   2471c:	e58e1000 	str	r1, [lr]
        newfblock->prev = prevB;
   24720:	e50e2004 	str	r2, [lr, #-4]
        newfblock->next = nextB;
   24724:	e1a01002 	mov	r1, r2
   24728:	eafffff2 	b	246f8 <nmalloc_free+0xf0>
   2472c:	0006fb04 	.word	0x0006fb04

00024730 <postman_recv>:
{
#ifdef POSTMAN_DEBUG
    uart_printf("Postman recv from channel 0x%x\n", channel);
#endif

    if (channel > 0xF) {
   24730:	e350000f 	cmp	r0, #15
   24734:	9a000001 	bls	24740 <postman_recv+0x10>
        return POSTMAN_BAD_DATA;
   24738:	e3a000c3 	mov	r0, #195	; 0xc3

        ++n_skipped;
    }

    return POSTMAN_TOO_MANY_MSG;
}
   2473c:	e12fff1e 	bx	lr
{
   24740:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   24744:	e1a08001 	mov	r8, r1
   24748:	e1a07000 	mov	r7, r0
    unsigned int start_time = micros();
   2474c:	eb004811 	bl	36798 <micros>
   24750:	e3a09014 	mov	r9, #20
   24754:	e1a06000 	mov	r6, r0
        while (*MAILBOX0STATUS & 0x40000000) //30th bit is zero when ready
   24758:	e59f409c 	ldr	r4, [pc, #156]	; 247fc <postman_recv+0xcc>
            if (isTimeout(micros(), start_time, MAILBOX_WAIT_TIMEOUT)) {
   2475c:	e59f509c 	ldr	r5, [pc, #156]	; 24800 <postman_recv+0xd0>
        lowlev_flushcache();
   24760:	e3a03000 	mov	r3, #0
   24764:	ee073f1e 	mcr	15, 0, r3, cr7, cr14, {0}
        while (*MAILBOX0STATUS & 0x40000000) //30th bit is zero when ready
   24768:	e5943898 	ldr	r3, [r4, #2200]	; 0x898
   2476c:	e3130101 	tst	r3, #1073741824	; 0x40000000
   24770:	1a000004 	bne	24788 <postman_recv+0x58>
   24774:	ea00000b 	b	247a8 <postman_recv+0x78>
            lowlev_flushcache();
   24778:	ee070f1e 	mcr	15, 0, r0, cr7, cr14, {0}
        while (*MAILBOX0STATUS & 0x40000000) //30th bit is zero when ready
   2477c:	e5943898 	ldr	r3, [r4, #2200]	; 0x898
   24780:	e3130101 	tst	r3, #1073741824	; 0x40000000
   24784:	0a000007 	beq	247a8 <postman_recv+0x78>
            if (isTimeout(micros(), start_time, MAILBOX_WAIT_TIMEOUT)) {
   24788:	eb004802 	bl	36798 <micros>
   2478c:	e1a02005 	mov	r2, r5
   24790:	e1a01006 	mov	r1, r6
   24794:	eb004814 	bl	367ec <isTimeout>
   24798:	e3500000 	cmp	r0, #0
   2479c:	0afffff5 	beq	24778 <postman_recv+0x48>
                return POSTMAN_RECV_TIMEOUT;
   247a0:	e3a000c2 	mov	r0, #194	; 0xc2
   247a4:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
        lowlev_dmb();
   247a8:	e3a03000 	mov	r3, #0
   247ac:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
        unsigned int msg = *MAILBOX0READ;
   247b0:	e5942880 	ldr	r2, [r4, #2176]	; 0x880
        lowlev_dmb();
   247b4:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
        if ((msg & 0xF) == (channel & 0xF)) {
   247b8:	e0273002 	eor	r3, r7, r2
   247bc:	e313000f 	tst	r3, #15
   247c0:	0a000009 	beq	247ec <postman_recv+0xbc>
        if (isTimeout(micros(), start_time, MAILBOX_WAIT_TIMEOUT)) {
   247c4:	eb0047f3 	bl	36798 <micros>
   247c8:	e1a02005 	mov	r2, r5
   247cc:	e1a01006 	mov	r1, r6
   247d0:	eb004805 	bl	367ec <isTimeout>
   247d4:	e3500000 	cmp	r0, #0
   247d8:	1afffff0 	bne	247a0 <postman_recv+0x70>
    while (n_skipped < MAILBOX_MAX_MSG_TO_SKIP) {
   247dc:	e2599001 	subs	r9, r9, #1
   247e0:	1affffde 	bne	24760 <postman_recv+0x30>
    return POSTMAN_TOO_MANY_MSG;
   247e4:	e3a000c4 	mov	r0, #196	; 0xc4
}
   247e8:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
            *out_data = msg >> 4;
   247ec:	e1a02222 	lsr	r2, r2, #4
   247f0:	e5882000 	str	r2, [r8]
            return POSTMAN_SUCCESS;
   247f4:	e3a000c0 	mov	r0, #192	; 0xc0
   247f8:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   247fc:	2000b000 	.word	0x2000b000
   24800:	0007a120 	.word	0x0007a120

00024804 <postman_send>:
#ifdef POSTMAN_DEBUG
    char debug_buff[20] = { 0 };
    uart_printf("Postman send to channel 0x%s\n", channel);
#endif

    if (data & 0xF) {
   24804:	e311000f 	tst	r1, #15
   24808:	0a000001 	beq	24814 <postman_send+0x10>
        // lowest 4-bits of data should be zero, aborting
        return POSTMAN_BAD_DATA;
   2480c:	e3a000c3 	mov	r0, #195	; 0xc3
#ifdef POSTMAN_DEBUG
    uart_printf("Message sent.\n");
#endif

    return POSTMAN_SUCCESS;
}
   24810:	e12fff1e 	bx	lr
{
   24814:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   24818:	e1a08000 	mov	r8, r0
   2481c:	e1a04001 	mov	r4, r1
    unsigned int start_time = micros();
   24820:	eb0047dc 	bl	36798 <micros>
    while (*MAILBOX0STATUS & 0x80000000) //top bit is zero when ready
   24824:	e59f504c 	ldr	r5, [pc, #76]	; 24878 <postman_send+0x74>
    unsigned int start_time = micros();
   24828:	e1a07000 	mov	r7, r0
        if (isTimeout(micros(), start_time, MAILBOX_WAIT_TIMEOUT)) {
   2482c:	e59f6048 	ldr	r6, [pc, #72]	; 2487c <postman_send+0x78>
    while (*MAILBOX0STATUS & 0x80000000) //top bit is zero when ready
   24830:	ea000005 	b	2484c <postman_send+0x48>
        if (isTimeout(micros(), start_time, MAILBOX_WAIT_TIMEOUT)) {
   24834:	eb0047d7 	bl	36798 <micros>
   24838:	e1a02006 	mov	r2, r6
   2483c:	e1a01007 	mov	r1, r7
   24840:	eb0047e9 	bl	367ec <isTimeout>
   24844:	e3500000 	cmp	r0, #0
   24848:	1a000008 	bne	24870 <postman_send+0x6c>
    while (*MAILBOX0STATUS & 0x80000000) //top bit is zero when ready
   2484c:	e5953898 	ldr	r3, [r5, #2200]	; 0x898
   24850:	e3530000 	cmp	r3, #0
   24854:	bafffff6 	blt	24834 <postman_send+0x30>
    lowlev_dmb();
   24858:	e3a03000 	mov	r3, #0
   2485c:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
    *MAILBOX0WRITE = data | channel; //lowest 4 bits for the mailbox, top 28 bits for the data
   24860:	e1841008 	orr	r1, r4, r8
   24864:	e58518a0 	str	r1, [r5, #2208]	; 0x8a0
    return POSTMAN_SUCCESS;
   24868:	e3a000c0 	mov	r0, #192	; 0xc0
   2486c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
            return POSTMAN_SEND_TIMEOUT;
   24870:	e3a000c1 	mov	r0, #193	; 0xc1
}
   24874:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   24878:	2000b000 	.word	0x2000b000
   2487c:	0007a120 	.word	0x0007a120

00024880 <rhw_get_mac_address>:
#include "postman.h"
#include "lowlev.h"
#include "lowlib.h"

RHW_RETURN_TYPE rhw_get_mac_address(unsigned char* pOutAddr)
{
   24880:	e92d4070 	push	{r4, r5, r6, lr}
    unsigned int off;
    unsigned int respmsg;
    unsigned char* aux;

    off = 1;
    pBuffData[off++] = 0; // Request
   24884:	e3a05000 	mov	r5, #0
    pBuffData[off++] = 0x00010003; // Tag: get board mac address
    pBuffData[off++] = 6; // response buffer size in bytes
   24888:	e3a02006 	mov	r2, #6
    pBuffData[off++] = 0; // request size
    pBuffData[off++] = 0; // response buffer
    pBuffData[off++] = 0; // response buffer
    pBuffData[off++] = 0; // end tag

    pBuffData[0] = off * 4; // Total message size
   2488c:	e3a03020 	mov	r3, #32
{
   24890:	e24dde41 	sub	sp, sp, #1040	; 0x410
   24894:	e24dd008 	sub	sp, sp, #8
    pBuffData[off++] = 0x00010003; // Tag: get board mac address
   24898:	e59f1084 	ldr	r1, [pc, #132]	; 24924 <rhw_get_mac_address+0xa4>
{
   2489c:	e28d4017 	add	r4, sp, #23
   248a0:	e3c4400f 	bic	r4, r4, #15
    pBuffData[off++] = 0; // Request
   248a4:	e5845004 	str	r5, [r4, #4]
{
   248a8:	e1a06000 	mov	r6, r0
    pBuffData[off++] = 0x00010003; // Tag: get board mac address
   248ac:	e5841008 	str	r1, [r4, #8]

    if (POSTMAN_SUCCESS != postman_send(8, lowlev_mem_v2p((unsigned int)pBuffData)))
   248b0:	e3a00008 	mov	r0, #8
   248b4:	e1a01004 	mov	r1, r4
    pBuffData[off++] = 6; // response buffer size in bytes
   248b8:	e584200c 	str	r2, [r4, #12]
    pBuffData[off++] = 0; // request size
   248bc:	e5845010 	str	r5, [r4, #16]
    pBuffData[off++] = 0; // response buffer
   248c0:	e5845014 	str	r5, [r4, #20]
    pBuffData[off++] = 0; // response buffer
   248c4:	e5845018 	str	r5, [r4, #24]
    pBuffData[off++] = 0; // end tag
   248c8:	e584501c 	str	r5, [r4, #28]
    pBuffData[0] = off * 4; // Total message size
   248cc:	e5843000 	str	r3, [r4]
    if (POSTMAN_SUCCESS != postman_send(8, lowlev_mem_v2p((unsigned int)pBuffData)))
   248d0:	ebffffcb 	bl	24804 <postman_send>
   248d4:	e35000c0 	cmp	r0, #192	; 0xc0
   248d8:	0a000004 	beq	248f0 <rhw_get_mac_address+0x70>
        return RHW_POSTMAN_FAIL;
   248dc:	e3a05002 	mov	r5, #2
    for (off = 0; off < 6; ++off) {
        *pOutAddr++ = *aux++;
    }

    return RHW_SUCCESS;
}
   248e0:	e1a00005 	mov	r0, r5
   248e4:	e28dde41 	add	sp, sp, #1040	; 0x410
   248e8:	e28dd008 	add	sp, sp, #8
   248ec:	e8bd8070 	pop	{r4, r5, r6, pc}
    if (POSTMAN_SUCCESS != postman_recv(8, &respmsg))
   248f0:	e28d1004 	add	r1, sp, #4
   248f4:	e3a00008 	mov	r0, #8
   248f8:	ebffff8c 	bl	24730 <postman_recv>
   248fc:	e35000c0 	cmp	r0, #192	; 0xc0
   24900:	1afffff5 	bne	248dc <rhw_get_mac_address+0x5c>
    if (pBuffData[1] != 0x80000000) {
   24904:	e5943004 	ldr	r3, [r4, #4]
   24908:	e3530102 	cmp	r3, #-2147483648	; 0x80000000
        return RHW_ERROR;
   2490c:	13a05001 	movne	r5, #1
    if (pBuffData[1] != 0x80000000) {
   24910:	05940014 	ldreq	r0, [r4, #20]
   24914:	01d431b8 	ldrheq	r3, [r4, #24]
   24918:	05860000 	streq	r0, [r6]
   2491c:	01c630b4 	strheq	r3, [r6, #4]
   24920:	eaffffee 	b	248e0 <rhw_get_mac_address+0x60>
   24924:	00010003 	.word	0x00010003

00024928 <rhw_set_device_power>:
RHW_RETURN_TYPE rhw_set_device_power(RHW_DEVICE dev, RHW_POWER_STATE state)
{
    volatile unsigned int pBuffData[256] __attribute__((aligned(16)));
    unsigned int off;
    unsigned int respmsg;
    unsigned int statebit = (state == RHW_POWER_ON ? (1 << 0) : (0 << 0)) | (1 << 1);
   24928:	e3510000 	cmp	r1, #0

    off = 1;
    pBuffData[off++] = 0; // Request
    pBuffData[off++] = 0x00028001; // Tag: set power state
    pBuffData[off++] = 8; // response buffer size in bytes
   2492c:	e3a03008 	mov	r3, #8
{
   24930:	e1a01000 	mov	r1, r0
    pBuffData[off++] = 0; // Request
   24934:	e3a02000 	mov	r2, #0
{
   24938:	e92d4070 	push	{r4, r5, r6, lr}
    pBuffData[off++] = 8; // request size
    pBuffData[off++] = dev; // request/response buffer
    pBuffData[off++] = statebit; // request/response buffer
    pBuffData[off++] = 0; // end tag

    pBuffData[0] = off * 4; // Total message size
   2493c:	e3a0c020 	mov	ip, #32
    unsigned int statebit = (state == RHW_POWER_ON ? (1 << 0) : (0 << 0)) | (1 << 1);
   24940:	03a0e003 	moveq	lr, #3
   24944:	13a0e002 	movne	lr, #2
{
   24948:	e24dde41 	sub	sp, sp, #1040	; 0x410
   2494c:	e24dd008 	sub	sp, sp, #8
    pBuffData[off++] = 0x00028001; // Tag: set power state
   24950:	e59f008c 	ldr	r0, [pc, #140]	; 249e4 <rhw_set_device_power+0xbc>
{
   24954:	e28d4017 	add	r4, sp, #23
   24958:	e3c4400f 	bic	r4, r4, #15
    pBuffData[off++] = 0; // Request
   2495c:	e5842004 	str	r2, [r4, #4]
    pBuffData[off++] = 0x00028001; // Tag: set power state
   24960:	e5840008 	str	r0, [r4, #8]
    pBuffData[off++] = 8; // response buffer size in bytes
   24964:	e584300c 	str	r3, [r4, #12]

    if (POSTMAN_SUCCESS != postman_send(8, lowlev_mem_v2p((unsigned int)pBuffData)))
   24968:	e1a00003 	mov	r0, r3
    pBuffData[off++] = 8; // request size
   2496c:	e5843010 	str	r3, [r4, #16]
    pBuffData[off++] = dev; // request/response buffer
   24970:	e5841014 	str	r1, [r4, #20]
    if (POSTMAN_SUCCESS != postman_send(8, lowlev_mem_v2p((unsigned int)pBuffData)))
   24974:	e1a01004 	mov	r1, r4
    pBuffData[off++] = statebit; // request/response buffer
   24978:	e584e018 	str	lr, [r4, #24]
    pBuffData[off++] = 0; // end tag
   2497c:	e584201c 	str	r2, [r4, #28]
    pBuffData[0] = off * 4; // Total message size
   24980:	e584c000 	str	ip, [r4]
    if (POSTMAN_SUCCESS != postman_send(8, lowlev_mem_v2p((unsigned int)pBuffData)))
   24984:	ebffff9e 	bl	24804 <postman_send>
   24988:	e35000c0 	cmp	r0, #192	; 0xc0
   2498c:	1a00000a 	bne	249bc <rhw_set_device_power+0x94>
   24990:	e3a0500a 	mov	r5, #10
    while (n_retries--) {
        if (POSTMAN_SUCCESS == postman_recv(8, &respmsg)) {
            success = 1;
            break;
        }
        microsDelay(500000);
   24994:	e59f604c 	ldr	r6, [pc, #76]	; 249e8 <rhw_set_device_power+0xc0>
        if (POSTMAN_SUCCESS == postman_recv(8, &respmsg)) {
   24998:	e28d1004 	add	r1, sp, #4
   2499c:	e3a00008 	mov	r0, #8
   249a0:	ebffff62 	bl	24730 <postman_recv>
   249a4:	e35000c0 	cmp	r0, #192	; 0xc0
   249a8:	0a000007 	beq	249cc <rhw_set_device_power+0xa4>
        microsDelay(500000);
   249ac:	e1a00006 	mov	r0, r6
   249b0:	eb00477c 	bl	367a8 <microsDelay>
    while (n_retries--) {
   249b4:	e2555001 	subs	r5, r5, #1
   249b8:	1afffff6 	bne	24998 <rhw_set_device_power+0x70>
        return RHW_POSTMAN_FAIL;
   249bc:	e3a00002 	mov	r0, #2
    {
        *pOutAddr++ = *aux++;
    }*/

    return RHW_SUCCESS;
}
   249c0:	e28dde41 	add	sp, sp, #1040	; 0x410
   249c4:	e28dd008 	add	sp, sp, #8
   249c8:	e8bd8070 	pop	{r4, r5, r6, pc}
    if (pBuffData[1] != 0x80000000) {
   249cc:	e5940004 	ldr	r0, [r4, #4]
        return RHW_POSTMAN_FAIL;
   249d0:	e2900102 	adds	r0, r0, #-2147483648	; 0x80000000
   249d4:	13a00001 	movne	r0, #1
}
   249d8:	e28dde41 	add	sp, sp, #1040	; 0x410
   249dc:	e28dd008 	add	sp, sp, #8
   249e0:	e8bd8070 	pop	{r4, r5, r6, pc}
   249e4:	00028001 	.word	0x00028001
   249e8:	0007a120 	.word	0x0007a120

000249ec <jsonGetValueForKey>:
#include "jsmnR.h"
#include "../System/logging.h"
#include <string.h>

bool jsonGetValueForKey(const char* srchKey, const char* jsonStr, char* pOutStr, int outStrMaxLen)
{
   249ec:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   249f0:	e1a07001 	mov	r7, r1
   249f4:	e24ddd7d 	sub	sp, sp, #8000	; 0x1f40
   249f8:	e24dd018 	sub	sp, sp, #24
   249fc:	e1a06000 	mov	r6, r0
    #define MAX_TOKENS 500
    JSMNR_parser parser;
    jsmnrtok_t tokens[MAX_TOKENS];
    JSMNR_init(&parser);
   24a00:	e28d000c 	add	r0, sp, #12
{
   24a04:	e1a09002 	mov	r9, r2
   24a08:	e1a08003 	mov	r8, r3
    JSMNR_init(&parser);
   24a0c:	ebfffd91 	bl	24058 <JSMNR_init>
    int tokenCountRslt = JSMNR_parse(&parser, jsonStr, strlen(jsonStr), tokens, MAX_TOKENS);
   24a10:	e1a00007 	mov	r0, r7
   24a14:	eb00a300 	bl	4d61c <strlen>
   24a18:	e3a04f7d 	mov	r4, #500	; 0x1f4
   24a1c:	e1a02000 	mov	r2, r0
   24a20:	e28d3018 	add	r3, sp, #24
   24a24:	e28d000c 	add	r0, sp, #12
   24a28:	e1a01007 	mov	r1, r7
   24a2c:	e58d4000 	str	r4, [sp]
   24a30:	ebfffb73 	bl	23804 <JSMNR_parse>
    if (tokenCountRslt < 0) {
   24a34:	e250a000 	subs	sl, r0, #0
   24a38:	ba000026 	blt	24ad8 <jsonGetValueForKey+0xec>
   24a3c:	128d4018 	addne	r4, sp, #24
    // for (int j = 0; j < tokenCountRslt; j++)
    // {
    //     ee_printf("tok %d %d %d %d\n", tokens[j].type, tokens[j].start, tokens[j].end, tokens[j].size);
    // }

    for (int tokIdx = 0; tokIdx < tokenCountRslt; tokIdx++)
   24a40:	13a05000 	movne	r5, #0
   24a44:	1a000003 	bne	24a58 <jsonGetValueForKey+0x6c>
   24a48:	ea00001e 	b	24ac8 <jsonGetValueForKey+0xdc>
   24a4c:	e15a0005 	cmp	sl, r5
   24a50:	e2844010 	add	r4, r4, #16
   24a54:	0a00001b 	beq	24ac8 <jsonGetValueForKey+0xdc>
    {
        jsmnrtok_t* pTok = tokens + tokIdx;
        if ((pTok->type == JSMNR_STRING) && ((int)strlen(srchKey) == pTok->end - pTok->start) &&
   24a58:	e5d42000 	ldrb	r2, [r4]
    for (int tokIdx = 0; tokIdx < tokenCountRslt; tokIdx++)
   24a5c:	e2855001 	add	r5, r5, #1
        if ((pTok->type == JSMNR_STRING) && ((int)strlen(srchKey) == pTok->end - pTok->start) &&
   24a60:	e3520003 	cmp	r2, #3
   24a64:	1afffff8 	bne	24a4c <jsonGetValueForKey+0x60>
   24a68:	e1a00006 	mov	r0, r6
   24a6c:	eb00a2ea 	bl	4d61c <strlen>
   24a70:	e5943004 	ldr	r3, [r4, #4]
   24a74:	e5941008 	ldr	r1, [r4, #8]
   24a78:	e0411003 	sub	r1, r1, r3
   24a7c:	e1500001 	cmp	r0, r1
   24a80:	1afffff1 	bne	24a4c <jsonGetValueForKey+0x60>
                 (strncmp(jsonStr + pTok->start, srchKey, pTok->end - pTok->start) == 0))
   24a84:	e1a02000 	mov	r2, r0
   24a88:	e1a01006 	mov	r1, r6
   24a8c:	e0870003 	add	r0, r7, r3
   24a90:	eb00a31e 	bl	4d710 <strncmp>
        if ((pTok->type == JSMNR_STRING) && ((int)strlen(srchKey) == pTok->end - pTok->start) &&
   24a94:	e3500000 	cmp	r0, #0
   24a98:	1affffeb 	bne	24a4c <jsonGetValueForKey+0x60>
        {
            int stringLen = (pTok+1)->end - (pTok+1)->start;
   24a9c:	e5941014 	ldr	r1, [r4, #20]
   24aa0:	e5942018 	ldr	r2, [r4, #24]
   24aa4:	e0422001 	sub	r2, r2, r1
            if (stringLen >= outStrMaxLen)
   24aa8:	e1520008 	cmp	r2, r8
   24aac:	aa000006 	bge	24acc <jsonGetValueForKey+0xe0>
                return false;
            strlcpy(pOutStr, jsonStr + (pTok+1)->start, stringLen+1);
   24ab0:	e2822001 	add	r2, r2, #1
   24ab4:	e0871001 	add	r1, r7, r1
   24ab8:	e1a00009 	mov	r0, r9
   24abc:	eb00a2c1 	bl	4d5c8 <strlcpy>
            // ee_printf("rdutils_json: srchkey %s value len %d val %s ll %d\n", srchKey, stringLen, pOutStr, strlen(pOutStr));
            return true;
   24ac0:	e3a00001 	mov	r0, #1
   24ac4:	ea000000 	b	24acc <jsonGetValueForKey+0xe0>
        }
    }
    return false;
   24ac8:	e3a00000 	mov	r0, #0
}
   24acc:	e28ddd7d 	add	sp, sp, #8000	; 0x1f40
   24ad0:	e28dd018 	add	sp, sp, #24
   24ad4:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
        LogWrite("rdutils", LOG_DEBUG, "parseJson result %d maxTokens %d jsonLen %d", 
   24ad8:	e1a00007 	mov	r0, r7
   24adc:	eb00a2ce 	bl	4d61c <strlen>
   24ae0:	e58d4000 	str	r4, [sp]
   24ae4:	e58d0004 	str	r0, [sp, #4]
   24ae8:	e1a0300a 	mov	r3, sl
   24aec:	e59f2018 	ldr	r2, [pc, #24]	; 24b0c <jsonGetValueForKey+0x120>
   24af0:	e3a01004 	mov	r1, #4
   24af4:	e59f0014 	ldr	r0, [pc, #20]	; 24b10 <jsonGetValueForKey+0x124>
   24af8:	ebfffd9e 	bl	24178 <LogWrite>
        return false;
   24afc:	e3a00000 	mov	r0, #0
}
   24b00:	e28ddd7d 	add	sp, sp, #8000	; 0x1f40
   24b04:	e28dd018 	add	sp, sp, #24
   24b08:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   24b0c:	00053b08 	.word	0x00053b08
   24b10:	00053b34 	.word	0x00053b34

00024b14 <jsonGetArrayLen>:

int jsonGetArrayLen(const char* jsonStr)
{
   24b14:	e92d4070 	push	{r4, r5, r6, lr}
   24b18:	e1a04000 	mov	r4, r0
   24b1c:	e24ddd7d 	sub	sp, sp, #8000	; 0x1f40
   24b20:	e24dd018 	sub	sp, sp, #24
    // Parse
    #define MAX_TOKENS 500
    JSMNR_parser parser;
    jsmnrtok_t tokens[MAX_TOKENS];
    JSMNR_init(&parser);
   24b24:	e28d000c 	add	r0, sp, #12
   24b28:	ebfffd4a 	bl	24058 <JSMNR_init>
    int tokenCountRslt = JSMNR_parse(&parser, jsonStr, strlen(jsonStr), tokens, MAX_TOKENS);
   24b2c:	e1a00004 	mov	r0, r4
   24b30:	eb00a2b9 	bl	4d61c <strlen>
   24b34:	e3a05f7d 	mov	r5, #500	; 0x1f4
   24b38:	e1a02000 	mov	r2, r0
   24b3c:	e28d3018 	add	r3, sp, #24
   24b40:	e28d000c 	add	r0, sp, #12
   24b44:	e1a01004 	mov	r1, r4
   24b48:	e58d5000 	str	r5, [sp]
   24b4c:	ebfffb2c 	bl	23804 <JSMNR_parse>
    if (tokenCountRslt < 0) {
   24b50:	e2506000 	subs	r6, r0, #0
   24b54:	ba000007 	blt	24b78 <jsonGetArrayLen+0x64>
                        tokenCountRslt, MAX_TOKENS, strlen(jsonStr));
        return false;
    }

    // Check if array
    if ((tokenCountRslt > 0) && (tokens[0].type == JSMNR_ARRAY))
   24b58:	0a000013 	beq	24bac <jsonGetArrayLen+0x98>
   24b5c:	e5dd3018 	ldrb	r3, [sp, #24]
   24b60:	e3530002 	cmp	r3, #2
   24b64:	1a000010 	bne	24bac <jsonGetArrayLen+0x98>
    {
        // Return size (which is array length)
        return tokens[0].size;
   24b68:	e59d0024 	ldr	r0, [sp, #36]	; 0x24
    }

    // Not an array
    return -1;
}
   24b6c:	e28ddd7d 	add	sp, sp, #8000	; 0x1f40
   24b70:	e28dd018 	add	sp, sp, #24
   24b74:	e8bd8070 	pop	{r4, r5, r6, pc}
        LogWrite("rdutils", LOG_DEBUG, "parseJson result %d maxTokens %d jsonLen %d", 
   24b78:	e1a00004 	mov	r0, r4
   24b7c:	eb00a2a6 	bl	4d61c <strlen>
   24b80:	e58d5000 	str	r5, [sp]
   24b84:	e58d0004 	str	r0, [sp, #4]
   24b88:	e1a03006 	mov	r3, r6
   24b8c:	e59f2020 	ldr	r2, [pc, #32]	; 24bb4 <jsonGetArrayLen+0xa0>
   24b90:	e3a01004 	mov	r1, #4
   24b94:	e59f001c 	ldr	r0, [pc, #28]	; 24bb8 <jsonGetArrayLen+0xa4>
   24b98:	ebfffd76 	bl	24178 <LogWrite>
        return false;
   24b9c:	e3a00000 	mov	r0, #0
}
   24ba0:	e28ddd7d 	add	sp, sp, #8000	; 0x1f40
   24ba4:	e28dd018 	add	sp, sp, #24
   24ba8:	e8bd8070 	pop	{r4, r5, r6, pc}
    return -1;
   24bac:	e3e00000 	mvn	r0, #0
   24bb0:	eaffffed 	b	24b6c <jsonGetArrayLen+0x58>
   24bb4:	00053b08 	.word	0x00053b08
   24bb8:	00053b34 	.word	0x00053b34

00024bbc <jsonGetArrayElem>:

bool jsonGetArrayElem(uint32_t arrayIdx, const char* jsonStr, char* pOutStr, int outStrMaxLen)
{
   24bbc:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
   24bc0:	e1a07002 	mov	r7, r2
   24bc4:	e1a05001 	mov	r5, r1
   24bc8:	e24ddd7d 	sub	sp, sp, #8000	; 0x1f40
   24bcc:	e24dd01c 	sub	sp, sp, #28
    strlcpy(pOutStr, "", outStrMaxLen);
   24bd0:	e1a02003 	mov	r2, r3
   24bd4:	e59f1158 	ldr	r1, [pc, #344]	; 24d34 <jsonGetArrayElem+0x178>
{
   24bd8:	e1a08000 	mov	r8, r0
    strlcpy(pOutStr, "", outStrMaxLen);
   24bdc:	e1a00007 	mov	r0, r7
{
   24be0:	e1a06003 	mov	r6, r3
    strlcpy(pOutStr, "", outStrMaxLen);
   24be4:	eb00a277 	bl	4d5c8 <strlcpy>

    // Parse
    #define MAX_TOKENS 500
    JSMNR_parser parser;
    jsmnrtok_t tokens[MAX_TOKENS];
    JSMNR_init(&parser);
   24be8:	e28d000c 	add	r0, sp, #12
   24bec:	ebfffd19 	bl	24058 <JSMNR_init>
    int tokenCountRslt = JSMNR_parse(&parser, jsonStr, strlen(jsonStr), tokens, MAX_TOKENS);
   24bf0:	e1a00005 	mov	r0, r5
   24bf4:	eb00a288 	bl	4d61c <strlen>
   24bf8:	e3a09f7d 	mov	r9, #500	; 0x1f4
   24bfc:	e1a02000 	mov	r2, r0
   24c00:	e28d3018 	add	r3, sp, #24
   24c04:	e28d000c 	add	r0, sp, #12
   24c08:	e1a01005 	mov	r1, r5
   24c0c:	e58d9000 	str	r9, [sp]
   24c10:	ebfffafb 	bl	23804 <JSMNR_parse>
    if (tokenCountRslt < 0) {
   24c14:	e2504000 	subs	r4, r0, #0
   24c18:	ba000036 	blt	24cf8 <jsonGetArrayElem+0x13c>
                        tokenCountRslt, MAX_TOKENS, strlen(jsonStr));
        return false;
    }

    // Check if array and size big enough
    if ((tokenCountRslt > 0) && (tokens[0].type == JSMNR_ARRAY) && (tokens[0].size > (int)arrayIdx))
   24c1c:	0a000002 	beq	24c2c <jsonGetArrayElem+0x70>
   24c20:	e5dd3018 	ldrb	r3, [sp, #24]
   24c24:	e3530002 	cmp	r3, #2
   24c28:	0a000003 	beq	24c3c <jsonGetArrayElem+0x80>
        strlcpy(pOutStr, jsonStr+tokens[tokenIdx].start, maxLen);
        return true;
    }

    // Not an array
    return false;
   24c2c:	e3a00000 	mov	r0, #0
}
   24c30:	e28ddd7d 	add	sp, sp, #8000	; 0x1f40
   24c34:	e28dd01c 	add	sp, sp, #28
   24c38:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
    if ((tokenCountRslt > 0) && (tokens[0].type == JSMNR_ARRAY) && (tokens[0].size > (int)arrayIdx))
   24c3c:	e59d3024 	ldr	r3, [sp, #36]	; 0x24
   24c40:	e1530008 	cmp	r3, r8
   24c44:	dafffff8 	ble	24c2c <jsonGetArrayElem+0x70>
        for (uint32_t i = 0; i < arrayIdx; i++)
   24c48:	e3580000 	cmp	r8, #0
   24c4c:	0a000036 	beq	24d2c <jsonGetArrayElem+0x170>
   24c50:	e3a0c000 	mov	ip, #0
        int tokenIdx = 1;
   24c54:	e3a01001 	mov	r1, #1
            int nextPos = tokens[tokenIdx].end;
   24c58:	e28d3ef5 	add	r3, sp, #3920	; 0xf50
   24c5c:	e1a02201 	lsl	r2, r1, #4
   24c60:	e2833008 	add	r3, r3, #8
   24c64:	e0833002 	add	r3, r3, r2
            while (tokenIdx < tokenCountRslt)
   24c68:	e1540001 	cmp	r4, r1
            int nextPos = tokens[tokenIdx].end;
   24c6c:	e5130f38 	ldr	r0, [r3, #-3896]	; 0xfffff0c8
            while (tokenIdx < tokenCountRslt)
   24c70:	daffffed 	ble	24c2c <jsonGetArrayElem+0x70>
                if (tokens[tokenIdx].start > nextPos)
   24c74:	e5133f3c 	ldr	r3, [r3, #-3900]	; 0xfffff0c4
   24c78:	e1500003 	cmp	r0, r3
   24c7c:	ba00000a 	blt	24cac <jsonGetArrayElem+0xf0>
   24c80:	e28d3018 	add	r3, sp, #24
   24c84:	e0832002 	add	r2, r3, r2
   24c88:	ea000002 	b	24c98 <jsonGetArrayElem+0xdc>
   24c8c:	e5923004 	ldr	r3, [r2, #4]
   24c90:	e1530000 	cmp	r3, r0
   24c94:	ca000004 	bgt	24cac <jsonGetArrayElem+0xf0>
                tokenIdx++;
   24c98:	e2811001 	add	r1, r1, #1
            while (tokenIdx < tokenCountRslt)
   24c9c:	e1540001 	cmp	r4, r1
   24ca0:	e2822010 	add	r2, r2, #16
   24ca4:	1afffff8 	bne	24c8c <jsonGetArrayElem+0xd0>
   24ca8:	eaffffdf 	b	24c2c <jsonGetArrayElem+0x70>
        for (uint32_t i = 0; i < arrayIdx; i++)
   24cac:	e28cc001 	add	ip, ip, #1
   24cb0:	e158000c 	cmp	r8, ip
   24cb4:	1affffe7 	bne	24c58 <jsonGetArrayElem+0x9c>
        if (tokenIdx >= tokenCountRslt)
   24cb8:	e1540001 	cmp	r4, r1
   24cbc:	daffffda 	ble	24c2c <jsonGetArrayElem+0x70>
        if (maxLen > tokens[tokenIdx].end-tokens[tokenIdx].start+1)
   24cc0:	e28d3ef5 	add	r3, sp, #3920	; 0xf50
   24cc4:	e2833008 	add	r3, r3, #8
   24cc8:	e0833201 	add	r3, r3, r1, lsl #4
   24ccc:	e5131f3c 	ldr	r1, [r3, #-3900]	; 0xfffff0c4
   24cd0:	e5132f38 	ldr	r2, [r3, #-3896]	; 0xfffff0c8
        strlcpy(pOutStr, jsonStr+tokens[tokenIdx].start, maxLen);
   24cd4:	e1a00007 	mov	r0, r7
        if (maxLen > tokens[tokenIdx].end-tokens[tokenIdx].start+1)
   24cd8:	e0422001 	sub	r2, r2, r1
   24cdc:	e2822001 	add	r2, r2, #1
        strlcpy(pOutStr, jsonStr+tokens[tokenIdx].start, maxLen);
   24ce0:	e1520006 	cmp	r2, r6
   24ce4:	a1a02006 	movge	r2, r6
   24ce8:	e0851001 	add	r1, r5, r1
   24cec:	eb00a235 	bl	4d5c8 <strlcpy>
        return true;
   24cf0:	e3a00001 	mov	r0, #1
   24cf4:	eaffffcd 	b	24c30 <jsonGetArrayElem+0x74>
        LogWrite("rdutils", LOG_DEBUG, "parseJson result %d maxTokens %d jsonLen %d", 
   24cf8:	e1a00005 	mov	r0, r5
   24cfc:	eb00a246 	bl	4d61c <strlen>
   24d00:	e58d9000 	str	r9, [sp]
   24d04:	e58d0004 	str	r0, [sp, #4]
   24d08:	e1a03004 	mov	r3, r4
   24d0c:	e59f2024 	ldr	r2, [pc, #36]	; 24d38 <jsonGetArrayElem+0x17c>
   24d10:	e3a01004 	mov	r1, #4
   24d14:	e59f0020 	ldr	r0, [pc, #32]	; 24d3c <jsonGetArrayElem+0x180>
   24d18:	ebfffd16 	bl	24178 <LogWrite>
        return false;
   24d1c:	e3a00000 	mov	r0, #0
}
   24d20:	e28ddd7d 	add	sp, sp, #8000	; 0x1f40
   24d24:	e28dd01c 	add	sp, sp, #28
   24d28:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
        int tokenIdx = 1;
   24d2c:	e3a01001 	mov	r1, #1
   24d30:	eaffffe0 	b	24cb8 <jsonGetArrayElem+0xfc>
   24d34:	00053e00 	.word	0x00053e00
   24d38:	00053b08 	.word	0x00053b08
   24d3c:	00053b34 	.word	0x00053b34

00024d40 <jsonEscape>:
void jsonEscape(const char* inStr, char* outStr, int maxLen)
{
    const char* pIn = inStr;
    char* pOut = outStr;
    int curLen = 0;
    while (*pIn && (curLen + 2 < maxLen))
   24d40:	e5d03000 	ldrb	r3, [r0]
{
   24d44:	e92d4070 	push	{r4, r5, r6, lr}
    while (*pIn && (curLen + 2 < maxLen))
   24d48:	e3530000 	cmp	r3, #0
   24d4c:	0a00002d 	beq	24e08 <jsonEscape+0xc8>
   24d50:	e3520002 	cmp	r2, #2
    int curLen = 0;
   24d54:	e3a0e000 	mov	lr, #0
    while (*pIn && (curLen + 2 < maxLen))
   24d58:	da000020 	ble	24de0 <jsonEscape+0xa0>
   24d5c:	e3a0c002 	mov	ip, #2
    {
        switch (*pIn) 
        {
            case '\x0a': *pOut++ = '\\'; *pOut++ = 'n'; curLen+=2; break;
            case '\x22': *pOut++ = '\\'; *pOut++ = '\"'; curLen+=2; break;
   24d60:	e3a0505c 	mov	r5, #92	; 0x5c
            case '\x0a': *pOut++ = '\\'; *pOut++ = 'n'; curLen+=2; break;
   24d64:	e3a0606e 	mov	r6, #110	; 0x6e
   24d68:	ea000011 	b	24db4 <jsonEscape+0x74>
        switch (*pIn) 
   24d6c:	e353005c 	cmp	r3, #92	; 0x5c
   24d70:	0a00001e 	beq	24df0 <jsonEscape+0xb0>
   24d74:	e353000a 	cmp	r3, #10
            case '\x5c': *pOut++ = '\\'; *pOut++ = '\\'; curLen+=2; break;
            default: *pOut++ = *pIn; curLen+=1; break;
   24d78:	15c13000 	strbne	r3, [r1]
   24d7c:	128ee001 	addne	lr, lr, #1
   24d80:	12811001 	addne	r1, r1, #1
        switch (*pIn) 
   24d84:	1a000004 	bne	24d9c <jsonEscape+0x5c>
            case '\x0a': *pOut++ = '\\'; *pOut++ = 'n'; curLen+=2; break;
   24d88:	e1a03001 	mov	r3, r1
   24d8c:	e4c35002 	strb	r5, [r3], #2
   24d90:	e1a0e00c 	mov	lr, ip
   24d94:	e5c16001 	strb	r6, [r1, #1]
   24d98:	e1a01003 	mov	r1, r3
    while (*pIn && (curLen + 2 < maxLen))
   24d9c:	e5f03001 	ldrb	r3, [r0, #1]!
   24da0:	e28ec002 	add	ip, lr, #2
   24da4:	e3530000 	cmp	r3, #0
   24da8:	0a00000c 	beq	24de0 <jsonEscape+0xa0>
   24dac:	e15c0002 	cmp	ip, r2
   24db0:	aa00000a 	bge	24de0 <jsonEscape+0xa0>
        switch (*pIn) 
   24db4:	e3530022 	cmp	r3, #34	; 0x22
   24db8:	1affffeb 	bne	24d6c <jsonEscape+0x2c>
            case '\x22': *pOut++ = '\\'; *pOut++ = '\"'; curLen+=2; break;
   24dbc:	e1a04001 	mov	r4, r1
   24dc0:	e1a0e00c 	mov	lr, ip
   24dc4:	e4c45002 	strb	r5, [r4], #2
   24dc8:	e5c13001 	strb	r3, [r1, #1]
    while (*pIn && (curLen + 2 < maxLen))
   24dcc:	e5f03001 	ldrb	r3, [r0, #1]!
            case '\x22': *pOut++ = '\\'; *pOut++ = '\"'; curLen+=2; break;
   24dd0:	e1a01004 	mov	r1, r4
    while (*pIn && (curLen + 2 < maxLen))
   24dd4:	e3530000 	cmp	r3, #0
   24dd8:	e28ec002 	add	ip, lr, #2
   24ddc:	1afffff2 	bne	24dac <jsonEscape+0x6c>
        }
        pIn++;
    }
    if (curLen < maxLen)
   24de0:	e152000e 	cmp	r2, lr
        *pOut = 0;
   24de4:	c3a03000 	movgt	r3, #0
   24de8:	c5c13000 	strbgt	r3, [r1]
}
   24dec:	e8bd8070 	pop	{r4, r5, r6, pc}
            case '\x5c': *pOut++ = '\\'; *pOut++ = '\\'; curLen+=2; break;
   24df0:	e1a04001 	mov	r4, r1
   24df4:	e4c43002 	strb	r3, [r4], #2
   24df8:	e1a0e00c 	mov	lr, ip
   24dfc:	e5c13001 	strb	r3, [r1, #1]
   24e00:	e1a01004 	mov	r1, r4
   24e04:	eaffffe4 	b	24d9c <jsonEscape+0x5c>
    int curLen = 0;
   24e08:	e1a0e003 	mov	lr, r3
   24e0c:	eafffff3 	b	24de0 <jsonEscape+0xa0>

00024e10 <rdisspace>:

char rdisspace (unsigned char c) 
{
  if ( c == ' '
   24e10:	e3500020 	cmp	r0, #32
   24e14:	0a000004 	beq	24e2c <rdisspace+0x1c>
    || c == '\f'
    || c == '\n'
    || c == '\r'
    || c == '\t'
   24e18:	e2400009 	sub	r0, r0, #9
   24e1c:	e3500004 	cmp	r0, #4
   24e20:	83a00000 	movhi	r0, #0
   24e24:	93a00001 	movls	r0, #1
   24e28:	e12fff1e 	bx	lr
    || c == '\v' ) 
      return 1;
   24e2c:	e3a00001 	mov	r0, #1

  return 0;
}
   24e30:	e12fff1e 	bx	lr

00024e34 <rdisdigit>:

int rdisdigit(int c)
{
    return (c >= '0' && c <= '9' ? 1 : 0);
   24e34:	e2400030 	sub	r0, r0, #48	; 0x30
}
   24e38:	e3500009 	cmp	r0, #9
   24e3c:	83a00000 	movhi	r0, #0
   24e40:	93a00001 	movls	r0, #1
   24e44:	e12fff1e 	bx	lr

00024e48 <rdisupper>:

#define UC(c)   ((unsigned char)c)

char rdisupper (unsigned char c)
{
    if ( c >= UC('A') && c <= UC('Z') )
   24e48:	e2400041 	sub	r0, r0, #65	; 0x41
        return 1;
    return 0;
}
   24e4c:	e3500019 	cmp	r0, #25
   24e50:	83a00000 	movhi	r0, #0
   24e54:	93a00001 	movls	r0, #1
   24e58:	e12fff1e 	bx	lr

00024e5c <rdislower>:

char rdislower (unsigned char c)
{
    if ( c >= UC('a') && c <= UC('z') )
   24e5c:	e2400061 	sub	r0, r0, #97	; 0x61
        return 1;
    return 0;
}
   24e60:	e3500019 	cmp	r0, #25
   24e64:	83a00000 	movhi	r0, #0
   24e68:	93a00001 	movls	r0, #1
   24e6c:	e12fff1e 	bx	lr

00024e70 <rdtolower>:
    if ( c >= UC('A') && c <= UC('Z') )
   24e70:	e2403041 	sub	r3, r0, #65	; 0x41
   24e74:	e3530019 	cmp	r3, #25

char rdtolower(char c)
{
    if (rdisupper(c))
    {
        return c + ('a' - 'A');
   24e78:	92800020 	addls	r0, r0, #32
   24e7c:	96ef0070 	uxtbls	r0, r0
    }
    return c;
}
   24e80:	e12fff1e 	bx	lr

00024e84 <rdtoupper>:
    if ( c >= UC('a') && c <= UC('z') )
   24e84:	e2403061 	sub	r3, r0, #97	; 0x61
   24e88:	e3530019 	cmp	r3, #25

char rdtoupper(char c)
{
    if (rdislower(c))
    {
        return c - ('a' - 'A');
   24e8c:	92400020 	subls	r0, r0, #32
   24e90:	96ef0070 	uxtbls	r0, r0
    }
    return c;
}
   24e94:	e12fff1e 	bx	lr

00024e98 <rdisalpha>:

int rdisalpha(int c)
{
    return ((c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z') ? 1 : 0);
   24e98:	e3c00020 	bic	r0, r0, #32
   24e9c:	e2400041 	sub	r0, r0, #65	; 0x41
}
   24ea0:	e3500019 	cmp	r0, #25
   24ea4:	83a00000 	movhi	r0, #0
   24ea8:	93a00001 	movls	r0, #1
   24eac:	e12fff1e 	bx	lr

00024eb0 <rdstrrev>:

void rdstrrev(unsigned char *str)
{
   24eb0:	e92d4010 	push	{r4, lr}
   24eb4:	e1a04000 	mov	r4, r0
    int i;
    int j;
    unsigned char a;
    unsigned len = strlen((const char *)str);
   24eb8:	eb00a1d7 	bl	4d61c <strlen>
    for (i = 0, j = len - 1; i < j; i++, j--)
   24ebc:	e2403001 	sub	r3, r0, #1
   24ec0:	e3530000 	cmp	r3, #0
   24ec4:	d8bd8010 	pople	{r4, pc}
   24ec8:	e3a03000 	mov	r3, #0
   24ecc:	e244c001 	sub	ip, r4, #1
   24ed0:	e0841000 	add	r1, r4, r0
   24ed4:	e2833001 	add	r3, r3, #1
   24ed8:	e1e02003 	mvn	r2, r3
    {
        a = str[i];
   24edc:	e5fce001 	ldrb	lr, [ip, #1]!
        str[i] = str[j];
   24ee0:	e5714001 	ldrb	r4, [r1, #-1]!
    for (i = 0, j = len - 1; i < j; i++, j--)
   24ee4:	e0822000 	add	r2, r2, r0
   24ee8:	e1530002 	cmp	r3, r2
        str[i] = str[j];
   24eec:	e5cc4000 	strb	r4, [ip]
        str[j] = a;
   24ef0:	e5c1e000 	strb	lr, [r1]
    for (i = 0, j = len - 1; i < j; i++, j--)
   24ef4:	bafffff6 	blt	24ed4 <rdstrrev+0x24>
   24ef8:	e8bd8010 	pop	{r4, pc}

00024efc <rditoa>:
int rditoa(int num, unsigned char* str, int len, int base)
{
    int sum = num;
    int i = 0;
    int digit;
    if (len == 0)
   24efc:	e3520000 	cmp	r2, #0
   24f00:	0a00002c 	beq	24fb8 <rditoa+0xbc>
{
   24f04:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   24f08:	e1a05001 	mov	r5, r1
   24f0c:	e1a06003 	mov	r6, r3
   24f10:	e1a08001 	mov	r8, r1
    int i = 0;
   24f14:	e3a07000 	mov	r7, #0
        if (digit < 0xA)
            str[i++] = '0' + digit;
        else
            str[i++] = 'A' + digit - 0xA;
        sum /= base;
    }while (sum && (i < (len - 1)));
   24f18:	e2424001 	sub	r4, r2, #1
   24f1c:	ea000002 	b	24f2c <rditoa+0x30>
   24f20:	e1540007 	cmp	r4, r7
   24f24:	e2888001 	add	r8, r8, #1
   24f28:	da00001f 	ble	24fac <rditoa+0xb0>
   24f2c:	e1a01006 	mov	r1, r6
   24f30:	eb00a72e 	bl	4ebf0 <__aeabi_idivmod>
        if (digit < 0xA)
   24f34:	e3510009 	cmp	r1, #9
   24f38:	e6ef1071 	uxtb	r1, r1
            str[i++] = '0' + digit;
   24f3c:	e2813030 	add	r3, r1, #48	; 0x30
            str[i++] = 'A' + digit - 0xA;
   24f40:	c2811037 	addgt	r1, r1, #55	; 0x37
            str[i++] = '0' + digit;
   24f44:	d5c83000 	strble	r3, [r8]
            str[i++] = 'A' + digit - 0xA;
   24f48:	c5c81000 	strbgt	r1, [r8]
    }while (sum && (i < (len - 1)));
   24f4c:	e3500000 	cmp	r0, #0
   24f50:	e2877001 	add	r7, r7, #1
   24f54:	1afffff1 	bne	24f20 <rditoa+0x24>
    if (i == (len - 1) && sum)
        return -1;
    str[i] = '\0';
   24f58:	e3a04000 	mov	r4, #0
    unsigned len = strlen((const char *)str);
   24f5c:	e1a00005 	mov	r0, r5
    str[i] = '\0';
   24f60:	e7c54007 	strb	r4, [r5, r7]
    unsigned len = strlen((const char *)str);
   24f64:	eb00a1ac 	bl	4d61c <strlen>
    for (i = 0, j = len - 1; i < j; i++, j--)
   24f68:	e2403001 	sub	r3, r0, #1
   24f6c:	e1530004 	cmp	r3, r4
   24f70:	c2451001 	subgt	r1, r5, #1
   24f74:	c1a03004 	movgt	r3, r4
   24f78:	c0855000 	addgt	r5, r5, r0
   24f7c:	da000008 	ble	24fa4 <rditoa+0xa8>
   24f80:	e2833001 	add	r3, r3, #1
   24f84:	e1e02003 	mvn	r2, r3
        a = str[i];
   24f88:	e5f1c001 	ldrb	ip, [r1, #1]!
        str[i] = str[j];
   24f8c:	e575e001 	ldrb	lr, [r5, #-1]!
    for (i = 0, j = len - 1; i < j; i++, j--)
   24f90:	e0822000 	add	r2, r2, r0
   24f94:	e1520003 	cmp	r2, r3
        str[i] = str[j];
   24f98:	e5c1e000 	strb	lr, [r1]
        str[j] = a;
   24f9c:	e5c5c000 	strb	ip, [r5]
    for (i = 0, j = len - 1; i < j; i++, j--)
   24fa0:	cafffff6 	bgt	24f80 <rditoa+0x84>
    rdstrrev(str);
    return 0;
   24fa4:	e3a00000 	mov	r0, #0
   24fa8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    if (i == (len - 1) && sum)
   24fac:	1affffe9 	bne	24f58 <rditoa+0x5c>
        return -1;
   24fb0:	e3e00000 	mvn	r0, #0
}
   24fb4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
        return -1;
   24fb8:	e3e00000 	mvn	r0, #0
}
   24fbc:	e12fff1e 	bx	lr

00024fc0 <timers_init>:

void timers_init()
{
    int i;
    for (i = 0; i < N_TIMERS; ++i) {
        timers[i].handler = 0;
   24fc0:	e3a01000 	mov	r1, #0
   24fc4:	e59f3010 	ldr	r3, [pc, #16]	; 24fdc <timers_init+0x1c>
   24fc8:	e2832e19 	add	r2, r3, #400	; 0x190
   24fcc:	e4831014 	str	r1, [r3], #20
    for (i = 0; i < N_TIMERS; ++i) {
   24fd0:	e1530002 	cmp	r3, r2
   24fd4:	1afffffc 	bne	24fcc <timers_init+0xc>
   24fd8:	e12fff1e 	bx	lr
   24fdc:	0006fb0c 	.word	0x0006fb0c

00024fe0 <timer_attach_handler>:

unsigned timer_attach_handler(unsigned hz,
    _TimerHandler* handler,
    void* pParam,
    void* pContext)
{
   24fe0:	e92d4070 	push	{r4, r5, r6, lr}
   24fe4:	e59f5068 	ldr	r5, [pc, #104]	; 25054 <timer_attach_handler+0x74>
    unsigned hnd;
    for (hnd = 0; hnd < N_TIMERS; ++hnd) {
   24fe8:	e3a04000 	mov	r4, #0
   24fec:	e1a0c005 	mov	ip, r5
   24ff0:	ea000002 	b	25000 <timer_attach_handler+0x20>
   24ff4:	e2844001 	add	r4, r4, #1
   24ff8:	e3540014 	cmp	r4, #20
   24ffc:	0a000011 	beq	25048 <timer_attach_handler+0x68>
        if (timers[hnd].handler == 0) {
   25000:	e59ce000 	ldr	lr, [ip]
   25004:	e28cc014 	add	ip, ip, #20
   25008:	e35e0000 	cmp	lr, #0
   2500c:	1afffff8 	bne	24ff4 <timer_attach_handler+0x14>
   25010:	e1a0e001 	mov	lr, r1
            timers[hnd].handler = handler;
   25014:	e084c104 	add	ip, r4, r4, lsl #2
   25018:	e1a0c10c 	lsl	ip, ip, #2
   2501c:	e085600c 	add	r6, r5, ip
   25020:	e1a01000 	mov	r1, r0
   25024:	e785e00c 	str	lr, [r5, ip]
            timers[hnd].pParam = pParam;
            timers[hnd].pContext = pContext;
   25028:	e1c620f4 	strd	r2, [r6, #4]
            timers[hnd].microsec_interval = 1000000 / hz;
   2502c:	e59f0024 	ldr	r0, [pc, #36]	; 25058 <timer_attach_handler+0x78>
   25030:	eb00a65f 	bl	4e9b4 <__udivsi3>
   25034:	e586000c 	str	r0, [r6, #12]
            timers[hnd].last_tick = micros();
   25038:	eb0045d6 	bl	36798 <micros>
   2503c:	e5860010 	str	r0, [r6, #16]
            return hnd;
        }
    }

    return N_TIMERS + 1;
}
   25040:	e1a00004 	mov	r0, r4
   25044:	e8bd8070 	pop	{r4, r5, r6, pc}
    return N_TIMERS + 1;
   25048:	e3a04015 	mov	r4, #21
}
   2504c:	e1a00004 	mov	r0, r4
   25050:	e8bd8070 	pop	{r4, r5, r6, pc}
   25054:	0006fb0c 	.word	0x0006fb0c
   25058:	000f4240 	.word	0x000f4240

0002505c <timer_poll>:

void timer_poll()
{
   2505c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    unsigned hnd;
    unsigned int tnow = micros();
   25060:	eb0045cc 	bl	36798 <micros>

    for (hnd = 0; hnd < N_TIMERS; ++hnd) {
   25064:	e3a05000 	mov	r5, #0
    unsigned int tnow = micros();
   25068:	e1a07000 	mov	r7, r0
        if (timers[hnd].handler != 0 && (tnow - timers[hnd].last_tick) > timers[hnd].microsec_interval) {
            _TimerHandler* handler = timers[hnd].handler;
            timers[hnd].handler = 0;
   2506c:	e1a08005 	mov	r8, r5
   25070:	e59f403c 	ldr	r4, [pc, #60]	; 250b4 <timer_poll+0x58>
        if (timers[hnd].handler != 0 && (tnow - timers[hnd].last_tick) > timers[hnd].microsec_interval) {
   25074:	e5946000 	ldr	r6, [r4]
   25078:	e3560000 	cmp	r6, #0
   2507c:	0a000007 	beq	250a0 <timer_poll+0x44>
   25080:	e1c420dc 	ldrd	r2, [r4, #12]
   25084:	e0473003 	sub	r3, r7, r3
   25088:	e1530002 	cmp	r3, r2
   2508c:	9a000003 	bls	250a0 <timer_poll+0x44>
            handler(hnd, timers[hnd].pParam, timers[hnd].pContext);
   25090:	e9940006 	ldmib	r4, {r1, r2}
            timers[hnd].handler = 0;
   25094:	e5848000 	str	r8, [r4]
            handler(hnd, timers[hnd].pParam, timers[hnd].pContext);
   25098:	e1a00005 	mov	r0, r5
   2509c:	e12fff36 	blx	r6
    for (hnd = 0; hnd < N_TIMERS; ++hnd) {
   250a0:	e2855001 	add	r5, r5, #1
   250a4:	e3550014 	cmp	r5, #20
   250a8:	e2844014 	add	r4, r4, #20
   250ac:	1afffff0 	bne	25074 <timer_poll+0x18>
   250b0:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   250b4:	0006fb0c 	.word	0x0006fb0c

000250b8 <BusController::busActionCompleteStatic(BR_BUS_ACTION, BR_BUS_ACTION_REASON)>:
// Callbacks/Hooks
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void BusController::busActionCompleteStatic([[maybe_unused]]BR_BUS_ACTION actionType, [[maybe_unused]] BR_BUS_ACTION_REASON reason)
{
}
   250b8:	e12fff1e 	bx	lr

000250bc <BusController::handleWaitInterruptStatic(unsigned long, unsigned long, unsigned long, unsigned long&)>:
void BusController::handleWaitInterruptStatic(uint32_t addr, uint32_t data, 
        uint32_t flags, uint32_t& retVal)
{
    if (_pThisInstance)
        _pThisInstance->handleWaitInterrupt(addr, data, flags, retVal);
}
   250bc:	e12fff1e 	bx	lr

000250c0 <BusController::handleRxMsg(char const*, unsigned char const*, int, char*, int)>:
{
   250c0:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   250c4:	e24ddd36 	sub	sp, sp, #3456	; 0xd80
   250c8:	e24dd004 	sub	sp, sp, #4
   250cc:	e1a04000 	mov	r4, r0
   250d0:	e1a07001 	mov	r7, r1
   250d4:	e1a06002 	mov	r6, r2
    if (!jsonGetValueForKey("cmdName", pCmdJson, cmdName, MAX_CMD_NAME_STR))
   250d8:	e1a01000 	mov	r1, r0
{
   250dc:	e1a05003 	mov	r5, r3
    if (!jsonGetValueForKey("cmdName", pCmdJson, cmdName, MAX_CMD_NAME_STR))
   250e0:	e28d2020 	add	r2, sp, #32
   250e4:	e3a03032 	mov	r3, #50	; 0x32
   250e8:	e59f08d8 	ldr	r0, [pc, #2264]	; 259c8 <BusController::handleRxMsg(char const*, unsigned char const*, int, char*, int)+0x908>
   250ec:	ebfffe3e 	bl	249ec <jsonGetValueForKey>
   250f0:	e2509000 	subs	r9, r0, #0
   250f4:	0a0000bc 	beq	253ec <BusController::handleRxMsg(char const*, unsigned char const*, int, char*, int)+0x32c>
    if (strcasecmp(cmdName, "Rd") == 0)
   250f8:	e59f18cc 	ldr	r1, [pc, #2252]	; 259cc <BusController::handleRxMsg(char const*, unsigned char const*, int, char*, int)+0x90c>
   250fc:	e28d0020 	add	r0, sp, #32
   25100:	eb009fa1 	bl	4cf8c <strcasecmp>
   25104:	e2508000 	subs	r8, r0, #0
   25108:	0a0000bb 	beq	253fc <BusController::handleRxMsg(char const*, unsigned char const*, int, char*, int)+0x33c>
    else if (strcasecmp(cmdName, "Wr") == 0)
   2510c:	e59f18bc 	ldr	r1, [pc, #2236]	; 259d0 <BusController::handleRxMsg(char const*, unsigned char const*, int, char*, int)+0x910>
   25110:	e28d0020 	add	r0, sp, #32
   25114:	eb009f9c 	bl	4cf8c <strcasecmp>
   25118:	e2508000 	subs	r8, r0, #0
   2511c:	0a0000d8 	beq	25484 <BusController::handleRxMsg(char const*, unsigned char const*, int, char*, int)+0x3c4>
    else if (strcasecmp(cmdName, "testRdWr") == 0)
   25120:	e59f18ac 	ldr	r1, [pc, #2220]	; 259d4 <BusController::handleRxMsg(char const*, unsigned char const*, int, char*, int)+0x914>
   25124:	e28d0020 	add	r0, sp, #32
   25128:	eb009f97 	bl	4cf8c <strcasecmp>
   2512c:	e2508000 	subs	r8, r0, #0
   25130:	1a00004b 	bne	25264 <BusController::handleRxMsg(char const*, unsigned char const*, int, char*, int)+0x1a4>
   25134:	e28d6e51 	add	r6, sp, #1296	; 0x510
        errStr[0] = 0;
   25138:	e3a05ffa 	mov	r5, #1000	; 0x3e8
            memset(writeBuf, 0, MAX_MEM_BLOCK_READ_WRITE);
   2513c:	e1a07008 	mov	r7, r8
   25140:	e59f4890 	ldr	r4, [pc, #2192]	; 259d8 <BusController::handleRxMsg(char const*, unsigned char const*, int, char*, int)+0x918>
        errStr[0] = 0;
   25144:	e5cd8054 	strb	r8, [sp, #84]	; 0x54
   25148:	e286600c 	add	r6, r6, #12
   2514c:	e28da054 	add	sl, sp, #84	; 0x54
   25150:	ea000002 	b	25160 <BusController::handleRxMsg(char const*, unsigned char const*, int, char*, int)+0xa0>
                errs++;
   25154:	e2888001 	add	r8, r8, #1
        for (int i = 0; i < 1000; i++)
   25158:	e2555001 	subs	r5, r5, #1
   2515c:	0a0000be 	beq	2545c <BusController::handleRxMsg(char const*, unsigned char const*, int, char*, int)+0x39c>
            memset(writeBuf, 0, MAX_MEM_BLOCK_READ_WRITE);
   25160:	e3a02b01 	mov	r2, #1024	; 0x400
   25164:	e3a01000 	mov	r1, #0
   25168:	e28d0f47 	add	r0, sp, #284	; 0x11c
   2516c:	eb009f41 	bl	4ce78 <memset>
            memcpy(writeBuf, testData, sizeof(testData));
   25170:	e894000f 	ldm	r4, {r0, r1, r2, r3}
   25174:	e28dcf47 	add	ip, sp, #284	; 0x11c
   25178:	e8ac0007 	stmia	ip!, {r0, r1, r2}
            BusAccess::blockWrite(0x3c00, writeBuf, MAX_MEM_BLOCK_READ_WRITE, true, false);
   2517c:	e58d7000 	str	r7, [sp]
   25180:	e3a02b01 	mov	r2, #1024	; 0x400
            memcpy(writeBuf, testData, sizeof(testData));
   25184:	e5cc3000 	strb	r3, [ip]
            BusAccess::blockWrite(0x3c00, writeBuf, MAX_MEM_BLOCK_READ_WRITE, true, false);
   25188:	e28d1f47 	add	r1, sp, #284	; 0x11c
   2518c:	e3a03001 	mov	r3, #1
   25190:	e3a00b0f 	mov	r0, #15360	; 0x3c00
   25194:	eb00500c 	bl	391cc <BusAccess::blockWrite(unsigned long, unsigned char const*, unsigned long, bool, bool)>
            BusAccess::blockRead(0x3c00, readBuf, MAX_MEM_BLOCK_READ_WRITE, true, false);
   25198:	e3a03001 	mov	r3, #1
   2519c:	e3a02b01 	mov	r2, #1024	; 0x400
   251a0:	e1a01006 	mov	r1, r6
   251a4:	e58d7000 	str	r7, [sp]
   251a8:	e3a00b0f 	mov	r0, #15360	; 0x3c00
   251ac:	eb0050ca 	bl	394dc <BusAccess::blockRead(unsigned long, unsigned char*, unsigned long, bool, bool)>
            if (memcmp(writeBuf, readBuf, MAX_MEM_BLOCK_READ_WRITE) != 0)
   251b0:	e3a02b01 	mov	r2, #1024	; 0x400
   251b4:	e1a01006 	mov	r1, r6
   251b8:	e28d0f47 	add	r0, sp, #284	; 0x11c
   251bc:	eb009ea8 	bl	4cc64 <memcmp>
   251c0:	e3500000 	cmp	r0, #0
   251c4:	0affffe3 	beq	25158 <BusController::handleRxMsg(char const*, unsigned char const*, int, char*, int)+0x98>
                if (errs == 0)
   251c8:	e3580000 	cmp	r8, #0
   251cc:	1affffe0 	bne	25154 <BusController::handleRxMsg(char const*, unsigned char const*, int, char*, int)+0x94>
   251d0:	e28d3e12 	add	r3, sp, #288	; 0x120
   251d4:	e243e005 	sub	lr, r3, #5
   251d8:	e28d3e52 	add	r3, sp, #1312	; 0x520
                    for (int k = 0; k < MAX_MEM_BLOCK_READ_WRITE; k++)
   251dc:	e1a02008 	mov	r2, r8
   251e0:	e2430005 	sub	r0, r3, #5
   251e4:	ea000002 	b	251f4 <BusController::handleRxMsg(char const*, unsigned char const*, int, char*, int)+0x134>
   251e8:	e3510b01 	cmp	r1, #1024	; 0x400
   251ec:	e1a02001 	mov	r2, r1
   251f0:	0a000092 	beq	25440 <BusController::handleRxMsg(char const*, unsigned char const*, int, char*, int)+0x380>
                        if (writeBuf[k] != readBuf[k])
   251f4:	e5fe3001 	ldrb	r3, [lr, #1]!
   251f8:	e5f0c001 	ldrb	ip, [r0, #1]!
   251fc:	e2821001 	add	r1, r2, #1
   25200:	e153000c 	cmp	r3, ip
   25204:	0afffff7 	beq	251e8 <BusController::handleRxMsg(char const*, unsigned char const*, int, char*, int)+0x128>
   25208:	e2820002 	add	r0, r2, #2
   2520c:	e282e003 	add	lr, r2, #3
                                readBuf[errPos+0], readBuf[errPos+1], readBuf[errPos+2], readBuf[errPos+3]);
   25210:	e28dbd36 	add	fp, sp, #3456	; 0xd80
   25214:	e08be00e 	add	lr, fp, lr
   25218:	e08b0000 	add	r0, fp, r0
   2521c:	e08b1001 	add	r1, fp, r1
                    ee_sprintf(errStr, "POS %d WR %02x %02x %02x %02x RD %02x %02x %02x %02x", 
   25220:	e55eb864 	ldrb	fp, [lr, #-2148]	; 0xfffff79c
   25224:	e55eec64 	ldrb	lr, [lr, #-3172]	; 0xfffff39c
   25228:	e58dc00c 	str	ip, [sp, #12]
   2522c:	e550c864 	ldrb	ip, [r0, #-2148]	; 0xfffff79c
   25230:	e5500c64 	ldrb	r0, [r0, #-3172]	; 0xfffff39c
   25234:	e58db018 	str	fp, [sp, #24]
   25238:	e551b864 	ldrb	fp, [r1, #-2148]	; 0xfffff79c
   2523c:	e5511c64 	ldrb	r1, [r1, #-3172]	; 0xfffff39c
   25240:	e58d0004 	str	r0, [sp, #4]
   25244:	e58d1000 	str	r1, [sp]
   25248:	e58de008 	str	lr, [sp, #8]
   2524c:	e58dc014 	str	ip, [sp, #20]
   25250:	e58db010 	str	fp, [sp, #16]
   25254:	e59f1780 	ldr	r1, [pc, #1920]	; 259dc <BusController::handleRxMsg(char const*, unsigned char const*, int, char*, int)+0x91c>
   25258:	e1a0000a 	mov	r0, sl
   2525c:	ebfff6d2 	bl	22dac <ee_sprintf>
   25260:	eaffffbb 	b	25154 <BusController::handleRxMsg(char const*, unsigned char const*, int, char*, int)+0x94>
    else if (strcasecmp(cmdName, "busStatus") == 0)
   25264:	e59f1774 	ldr	r1, [pc, #1908]	; 259e0 <BusController::handleRxMsg(char const*, unsigned char const*, int, char*, int)+0x920>
   25268:	e28d0020 	add	r0, sp, #32
   2526c:	eb009f46 	bl	4cf8c <strcasecmp>
   25270:	e2503000 	subs	r3, r0, #0
   25274:	0a000105 	beq	25690 <BusController::handleRxMsg(char const*, unsigned char const*, int, char*, int)+0x5d0>
    else if (strcasecmp(cmdName, "busStatusClear") == 0)
   25278:	e59f1764 	ldr	r1, [pc, #1892]	; 259e4 <BusController::handleRxMsg(char const*, unsigned char const*, int, char*, int)+0x924>
   2527c:	e28d0020 	add	r0, sp, #32
   25280:	eb009f41 	bl	4cf8c <strcasecmp>
   25284:	e3500000 	cmp	r0, #0
   25288:	0a00011e 	beq	25708 <BusController::handleRxMsg(char const*, unsigned char const*, int, char*, int)+0x648>
    else if (strcasecmp(cmdName, "busReset") == 0)
   2528c:	e59f1754 	ldr	r1, [pc, #1876]	; 259e8 <BusController::handleRxMsg(char const*, unsigned char const*, int, char*, int)+0x928>
   25290:	e28d0020 	add	r0, sp, #32
   25294:	eb009f3c 	bl	4cf8c <strcasecmp>
   25298:	e3500000 	cmp	r0, #0
   2529c:	0a0000f5 	beq	25678 <BusController::handleRxMsg(char const*, unsigned char const*, int, char*, int)+0x5b8>
    else if (strcasecmp(cmdName, "targetReset") == 0)
   252a0:	e59f1744 	ldr	r1, [pc, #1860]	; 259ec <BusController::handleRxMsg(char const*, unsigned char const*, int, char*, int)+0x92c>
   252a4:	e28d0020 	add	r0, sp, #32
   252a8:	eb009f37 	bl	4cf8c <strcasecmp>
   252ac:	e3500000 	cmp	r0, #0
   252b0:	0a000143 	beq	257c4 <BusController::handleRxMsg(char const*, unsigned char const*, int, char*, int)+0x704>
    else if (strcasecmp(cmdName, "clockHzGet") == 0)
   252b4:	e59f1734 	ldr	r1, [pc, #1844]	; 259f0 <BusController::handleRxMsg(char const*, unsigned char const*, int, char*, int)+0x930>
   252b8:	e28d0020 	add	r0, sp, #32
   252bc:	eb009f32 	bl	4cf8c <strcasecmp>
   252c0:	e3500000 	cmp	r0, #0
   252c4:	0a000138 	beq	257ac <BusController::handleRxMsg(char const*, unsigned char const*, int, char*, int)+0x6ec>
    else if (strcasecmp(cmdName, "clockHzSet") == 0)
   252c8:	e59f1724 	ldr	r1, [pc, #1828]	; 259f4 <BusController::handleRxMsg(char const*, unsigned char const*, int, char*, int)+0x934>
   252cc:	e28d0020 	add	r0, sp, #32
   252d0:	eb009f2d 	bl	4cf8c <strcasecmp>
   252d4:	e3500000 	cmp	r0, #0
   252d8:	0a00011e 	beq	25758 <BusController::handleRxMsg(char const*, unsigned char const*, int, char*, int)+0x698>
    else if (strcasecmp(cmdName, "waitHoldOn") == 0)
   252dc:	e59f1714 	ldr	r1, [pc, #1812]	; 259f8 <BusController::handleRxMsg(char const*, unsigned char const*, int, char*, int)+0x938>
   252e0:	e28d0020 	add	r0, sp, #32
   252e4:	eb009f28 	bl	4cf8c <strcasecmp>
   252e8:	e3500000 	cmp	r0, #0
   252ec:	0a000141 	beq	257f8 <BusController::handleRxMsg(char const*, unsigned char const*, int, char*, int)+0x738>
    else if (strcasecmp(cmdName, "waitHoldOff") == 0)
   252f0:	e59f1704 	ldr	r1, [pc, #1796]	; 259fc <BusController::handleRxMsg(char const*, unsigned char const*, int, char*, int)+0x93c>
   252f4:	e28d0020 	add	r0, sp, #32
   252f8:	eb009f23 	bl	4cf8c <strcasecmp>
   252fc:	e2501000 	subs	r1, r0, #0
   25300:	0a000154 	beq	25858 <BusController::handleRxMsg(char const*, unsigned char const*, int, char*, int)+0x798>
    else if (strcasecmp(cmdName, "waitRelease") == 0)
   25304:	e59f16f4 	ldr	r1, [pc, #1780]	; 25a00 <BusController::handleRxMsg(char const*, unsigned char const*, int, char*, int)+0x940>
   25308:	e28d0020 	add	r0, sp, #32
   2530c:	eb009f1e 	bl	4cf8c <strcasecmp>
   25310:	e3500000 	cmp	r0, #0
   25314:	0a000149 	beq	25840 <BusController::handleRxMsg(char const*, unsigned char const*, int, char*, int)+0x780>
    else if (strcasecmp(cmdName, "waitMemoryOn") == 0)
   25318:	e59f16e4 	ldr	r1, [pc, #1764]	; 25a04 <BusController::handleRxMsg(char const*, unsigned char const*, int, char*, int)+0x944>
   2531c:	e28d0020 	add	r0, sp, #32
   25320:	eb009f19 	bl	4cf8c <strcasecmp>
   25324:	e3500000 	cmp	r0, #0
   25328:	0a00013b 	beq	2581c <BusController::handleRxMsg(char const*, unsigned char const*, int, char*, int)+0x75c>
    else if (strcasecmp(cmdName, "waitMemoryOff") == 0)
   2532c:	e59f16d4 	ldr	r1, [pc, #1748]	; 25a08 <BusController::handleRxMsg(char const*, unsigned char const*, int, char*, int)+0x948>
   25330:	e28d0020 	add	r0, sp, #32
   25334:	eb009f14 	bl	4cf8c <strcasecmp>
   25338:	e2501000 	subs	r1, r0, #0
   2533c:	0a000147 	beq	25860 <BusController::handleRxMsg(char const*, unsigned char const*, int, char*, int)+0x7a0>
    else if (strcasecmp(cmdName, "waitIOOn") == 0)
   25340:	e59f16c4 	ldr	r1, [pc, #1732]	; 25a0c <BusController::handleRxMsg(char const*, unsigned char const*, int, char*, int)+0x94c>
   25344:	e28d0020 	add	r0, sp, #32
   25348:	eb009f0f 	bl	4cf8c <strcasecmp>
   2534c:	e3500000 	cmp	r0, #0
        BusAccess::waitOnIO(_busSocketId, true);
   25350:	059f36b8 	ldreq	r3, [pc, #1720]	; 25a10 <BusController::handleRxMsg(char const*, unsigned char const*, int, char*, int)+0x950>
   25354:	03a01001 	moveq	r1, #1
    else if (strcasecmp(cmdName, "waitIOOn") == 0)
   25358:	0a000193 	beq	259ac <BusController::handleRxMsg(char const*, unsigned char const*, int, char*, int)+0x8ec>
    else if (strcasecmp(cmdName, "waitIOOff") == 0)
   2535c:	e59f16b0 	ldr	r1, [pc, #1712]	; 25a14 <BusController::handleRxMsg(char const*, unsigned char const*, int, char*, int)+0x954>
   25360:	e28d0020 	add	r0, sp, #32
   25364:	eb009f08 	bl	4cf8c <strcasecmp>
   25368:	e2501000 	subs	r1, r0, #0
   2536c:	0a00018d 	beq	259a8 <BusController::handleRxMsg(char const*, unsigned char const*, int, char*, int)+0x8e8>
    else if (strcasecmp(cmdName, "targetTrackerOn") == 0)
   25370:	e59f16a0 	ldr	r1, [pc, #1696]	; 25a18 <BusController::handleRxMsg(char const*, unsigned char const*, int, char*, int)+0x958>
   25374:	e28d0020 	add	r0, sp, #32
   25378:	eb009f03 	bl	4cf8c <strcasecmp>
   2537c:	e2506000 	subs	r6, r0, #0
   25380:	0a000170 	beq	25948 <BusController::handleRxMsg(char const*, unsigned char const*, int, char*, int)+0x888>
    else if (strcasecmp(cmdName, "targetTrackerOff") == 0)
   25384:	e59f1690 	ldr	r1, [pc, #1680]	; 25a1c <BusController::handleRxMsg(char const*, unsigned char const*, int, char*, int)+0x95c>
   25388:	e28d0020 	add	r0, sp, #32
   2538c:	eb009efe 	bl	4cf8c <strcasecmp>
   25390:	e3500000 	cmp	r0, #0
   25394:	0a000168 	beq	2593c <BusController::handleRxMsg(char const*, unsigned char const*, int, char*, int)+0x87c>
    else if (strcasecmp(cmdName, "stepInto") == 0)
   25398:	e59f1680 	ldr	r1, [pc, #1664]	; 25a20 <BusController::handleRxMsg(char const*, unsigned char const*, int, char*, int)+0x960>
   2539c:	e28d0020 	add	r0, sp, #32
   253a0:	eb009ef9 	bl	4cf8c <strcasecmp>
   253a4:	e3500000 	cmp	r0, #0
   253a8:	0a00015d 	beq	25924 <BusController::handleRxMsg(char const*, unsigned char const*, int, char*, int)+0x864>
    else if (strcasecmp(cmdName, "stepRun") == 0)
   253ac:	e59f1670 	ldr	r1, [pc, #1648]	; 25a24 <BusController::handleRxMsg(char const*, unsigned char const*, int, char*, int)+0x964>
   253b0:	e28d0020 	add	r0, sp, #32
   253b4:	eb009ef4 	bl	4cf8c <strcasecmp>
   253b8:	e3500000 	cmp	r0, #0
   253bc:	0a00014e 	beq	258fc <BusController::handleRxMsg(char const*, unsigned char const*, int, char*, int)+0x83c>
    else if (strcasecmp(cmdName, "getRegs") == 0)
   253c0:	e59f1660 	ldr	r1, [pc, #1632]	; 25a28 <BusController::handleRxMsg(char const*, unsigned char const*, int, char*, int)+0x968>
   253c4:	e28d0020 	add	r0, sp, #32
   253c8:	eb009eef 	bl	4cf8c <strcasecmp>
   253cc:	e3500000 	cmp	r0, #0
   253d0:	0a000137 	beq	258b4 <BusController::handleRxMsg(char const*, unsigned char const*, int, char*, int)+0x7f4>
    else if (strcasecmp(cmdName, "waitCycleUs") == 0)
   253d4:	e28d0020 	add	r0, sp, #32
   253d8:	e59f164c 	ldr	r1, [pc, #1612]	; 25a2c <BusController::handleRxMsg(char const*, unsigned char const*, int, char*, int)+0x96c>
   253dc:	eb009eea 	bl	4cf8c <strcasecmp>
   253e0:	e2506000 	subs	r6, r0, #0
   253e4:	0a00011f 	beq	25868 <BusController::handleRxMsg(char const*, unsigned char const*, int, char*, int)+0x7a8>
        return false;
   253e8:	e3a09000 	mov	r9, #0
}
   253ec:	e1a00009 	mov	r0, r9
   253f0:	e28ddd36 	add	sp, sp, #3456	; 0xd80
   253f4:	e28dd004 	add	sp, sp, #4
   253f8:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (!jsonGetValueForKey("addr", pCmdJson, paramVal, MAX_CMD_PARAM_STR))
   253fc:	e28d6e51 	add	r6, sp, #1296	; 0x510
   25400:	e286600c 	add	r6, r6, #12
   25404:	e1a02006 	mov	r2, r6
   25408:	e3a03032 	mov	r3, #50	; 0x32
   2540c:	e1a01004 	mov	r1, r4
   25410:	e59f0618 	ldr	r0, [pc, #1560]	; 25a30 <BusController::handleRxMsg(char const*, unsigned char const*, int, char*, int)+0x970>
   25414:	ebfffd74 	bl	249ec <jsonGetValueForKey>
   25418:	e3500000 	cmp	r0, #0
   2541c:	1a000053 	bne	25570 <BusController::handleRxMsg(char const*, unsigned char const*, int, char*, int)+0x4b0>
            strlcpy(pRespJson, "\"err\":\"InvArgs\"", maxRespLen);
   25420:	e1a00005 	mov	r0, r5
   25424:	e59d2da8 	ldr	r2, [sp, #3496]	; 0xda8
   25428:	e59f1604 	ldr	r1, [pc, #1540]	; 25a34 <BusController::handleRxMsg(char const*, unsigned char const*, int, char*, int)+0x974>
   2542c:	eb00a065 	bl	4d5c8 <strlcpy>
}
   25430:	e1a00009 	mov	r0, r9
   25434:	e28ddd36 	add	sp, sp, #3456	; 0xd80
   25438:	e28dd004 	add	sp, sp, #4
   2543c:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   25440:	e5dd311c 	ldrb	r3, [sp, #284]	; 0x11c
   25444:	e5ddc51c 	ldrb	ip, [sp, #1308]	; 0x51c
                    int errPos = 0;
   25448:	e3a02000 	mov	r2, #0
                    for (int k = 0; k < MAX_MEM_BLOCK_READ_WRITE; k++)
   2544c:	e3a0e003 	mov	lr, #3
   25450:	e3a00002 	mov	r0, #2
   25454:	e3a01001 	mov	r1, #1
   25458:	eaffff6c 	b	25210 <BusController::handleRxMsg(char const*, unsigned char const*, int, char*, int)+0x150>
        LogWrite(FromBusController, LOG_DEBUG, "{\"err\":\"ok\",\"errs\":%d,\"errStr\":\"%s\"}", errs, errStr);
   2545c:	e58da000 	str	sl, [sp]
   25460:	e1a03008 	mov	r3, r8
   25464:	e59f25cc 	ldr	r2, [pc, #1484]	; 25a38 <BusController::handleRxMsg(char const*, unsigned char const*, int, char*, int)+0x978>
   25468:	e3a01004 	mov	r1, #4
   2546c:	e59f05c8 	ldr	r0, [pc, #1480]	; 25a3c <BusController::handleRxMsg(char const*, unsigned char const*, int, char*, int)+0x97c>
   25470:	ebfffb40 	bl	24178 <LogWrite>
}
   25474:	e1a00009 	mov	r0, r9
   25478:	e28ddd36 	add	sp, sp, #3456	; 0xd80
   2547c:	e28dd004 	add	sp, sp, #4
   25480:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (!jsonGetValueForKey("addr", pCmdJson, paramVal, MAX_CMD_PARAM_STR))
   25484:	e28d2e51 	add	r2, sp, #1296	; 0x510
   25488:	e282200c 	add	r2, r2, #12
   2548c:	e3a03032 	mov	r3, #50	; 0x32
   25490:	e1a01004 	mov	r1, r4
   25494:	e59f0594 	ldr	r0, [pc, #1428]	; 25a30 <BusController::handleRxMsg(char const*, unsigned char const*, int, char*, int)+0x970>
   25498:	ebfffd53 	bl	249ec <jsonGetValueForKey>
   2549c:	e3500000 	cmp	r0, #0
   254a0:	0affffde 	beq	25420 <BusController::handleRxMsg(char const*, unsigned char const*, int, char*, int)+0x360>
    addr = strtoul(paramVal, NULL, 10);
   254a4:	e28d0e51 	add	r0, sp, #1296	; 0x510
   254a8:	e3a0200a 	mov	r2, #10
   254ac:	e1a01008 	mov	r1, r8
   254b0:	e280000c 	add	r0, r0, #12
   254b4:	eb00a43c 	bl	4e5ac <strtoul>
    if (!jsonGetValueForKey("len", pCmdJson, paramVal, MAX_CMD_PARAM_STR))
   254b8:	e28d2e51 	add	r2, sp, #1296	; 0x510
    addr = strtoul(paramVal, NULL, 10);
   254bc:	e1a0b000 	mov	fp, r0
    if (!jsonGetValueForKey("len", pCmdJson, paramVal, MAX_CMD_PARAM_STR))
   254c0:	e3a03032 	mov	r3, #50	; 0x32
   254c4:	e282200c 	add	r2, r2, #12
   254c8:	e1a01004 	mov	r1, r4
   254cc:	e59f056c 	ldr	r0, [pc, #1388]	; 25a40 <BusController::handleRxMsg(char const*, unsigned char const*, int, char*, int)+0x980>
   254d0:	ebfffd45 	bl	249ec <jsonGetValueForKey>
   254d4:	e3500000 	cmp	r0, #0
   254d8:	0affffd0 	beq	25420 <BusController::handleRxMsg(char const*, unsigned char const*, int, char*, int)+0x360>
    dataLen = strtoul(paramVal, NULL, 10);
   254dc:	e28d0e51 	add	r0, sp, #1296	; 0x510
   254e0:	e3a0200a 	mov	r2, #10
   254e4:	e1a01008 	mov	r1, r8
   254e8:	e280000c 	add	r0, r0, #12
   254ec:	eb00a42e 	bl	4e5ac <strtoul>
    if (!jsonGetValueForKey("isIo", pCmdJson, paramVal, MAX_CMD_PARAM_STR))
   254f0:	e28d2e51 	add	r2, sp, #1296	; 0x510
   254f4:	e1a01004 	mov	r1, r4
    dataLen = strtoul(paramVal, NULL, 10);
   254f8:	e1a0a000 	mov	sl, r0
    if (!jsonGetValueForKey("isIo", pCmdJson, paramVal, MAX_CMD_PARAM_STR))
   254fc:	e3a03032 	mov	r3, #50	; 0x32
   25500:	e282200c 	add	r2, r2, #12
   25504:	e59f0538 	ldr	r0, [pc, #1336]	; 25a44 <BusController::handleRxMsg(char const*, unsigned char const*, int, char*, int)+0x984>
   25508:	ebfffd37 	bl	249ec <jsonGetValueForKey>
   2550c:	e2504000 	subs	r4, r0, #0
   25510:	0affffc2 	beq	25420 <BusController::handleRxMsg(char const*, unsigned char const*, int, char*, int)+0x360>
    isIo = strtoul(paramVal, NULL, 10) != 0;
   25514:	e28d0e51 	add	r0, sp, #1296	; 0x510
   25518:	e1a01008 	mov	r1, r8
   2551c:	e280000c 	add	r0, r0, #12
   25520:	e3a0200a 	mov	r2, #10
   25524:	eb00a420 	bl	4e5ac <strtoul>
        if ((dataLen <= 0) || (dataLen >= MAX_MEM_BLOCK_READ_WRITE) || (dataLen > paramsLen))
   25528:	e156000a 	cmp	r6, sl
   2552c:	a3a06000 	movge	r6, #0
   25530:	b3a06001 	movlt	r6, #1
   25534:	e59f350c 	ldr	r3, [pc, #1292]	; 25a48 <BusController::handleRxMsg(char const*, unsigned char const*, int, char*, int)+0x988>
   25538:	e24a9001 	sub	r9, sl, #1
   2553c:	e1590003 	cmp	r9, r3
   25540:	91a09006 	movls	r9, r6
   25544:	83869001 	orrhi	r9, r6, #1
   25548:	e3590000 	cmp	r9, #0
   2554c:	0a000073 	beq	25720 <BusController::handleRxMsg(char const*, unsigned char const*, int, char*, int)+0x660>
            strlcpy(pRespJson, "\"err\":\"LenTooLong\"", maxRespLen);
   25550:	e1a00005 	mov	r0, r5
   25554:	e59d2da8 	ldr	r2, [sp, #3496]	; 0xda8
   25558:	e59f14ec 	ldr	r1, [pc, #1260]	; 25a4c <BusController::handleRxMsg(char const*, unsigned char const*, int, char*, int)+0x98c>
   2555c:	eb00a019 	bl	4d5c8 <strlcpy>
}
   25560:	e1a00009 	mov	r0, r9
   25564:	e28ddd36 	add	sp, sp, #3456	; 0xd80
   25568:	e28dd004 	add	sp, sp, #4
   2556c:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    addr = strtoul(paramVal, NULL, 10);
   25570:	e3a0200a 	mov	r2, #10
   25574:	e1a01008 	mov	r1, r8
   25578:	e1a00006 	mov	r0, r6
   2557c:	eb00a40a 	bl	4e5ac <strtoul>
    if (!jsonGetValueForKey("len", pCmdJson, paramVal, MAX_CMD_PARAM_STR))
   25580:	e3a03032 	mov	r3, #50	; 0x32
    addr = strtoul(paramVal, NULL, 10);
   25584:	e1a0a000 	mov	sl, r0
    if (!jsonGetValueForKey("len", pCmdJson, paramVal, MAX_CMD_PARAM_STR))
   25588:	e1a02006 	mov	r2, r6
   2558c:	e1a01004 	mov	r1, r4
   25590:	e59f04a8 	ldr	r0, [pc, #1192]	; 25a40 <BusController::handleRxMsg(char const*, unsigned char const*, int, char*, int)+0x980>
   25594:	ebfffd14 	bl	249ec <jsonGetValueForKey>
   25598:	e3500000 	cmp	r0, #0
   2559c:	0affff9f 	beq	25420 <BusController::handleRxMsg(char const*, unsigned char const*, int, char*, int)+0x360>
    dataLen = strtoul(paramVal, NULL, 10);
   255a0:	e3a0200a 	mov	r2, #10
   255a4:	e1a01008 	mov	r1, r8
   255a8:	e1a00006 	mov	r0, r6
   255ac:	eb00a3fe 	bl	4e5ac <strtoul>
    if (!jsonGetValueForKey("isIo", pCmdJson, paramVal, MAX_CMD_PARAM_STR))
   255b0:	e1a01004 	mov	r1, r4
    dataLen = strtoul(paramVal, NULL, 10);
   255b4:	e1a07000 	mov	r7, r0
    if (!jsonGetValueForKey("isIo", pCmdJson, paramVal, MAX_CMD_PARAM_STR))
   255b8:	e3a03032 	mov	r3, #50	; 0x32
   255bc:	e1a02006 	mov	r2, r6
   255c0:	e59f047c 	ldr	r0, [pc, #1148]	; 25a44 <BusController::handleRxMsg(char const*, unsigned char const*, int, char*, int)+0x984>
   255c4:	ebfffd08 	bl	249ec <jsonGetValueForKey>
   255c8:	e3500000 	cmp	r0, #0
   255cc:	0affff93 	beq	25420 <BusController::handleRxMsg(char const*, unsigned char const*, int, char*, int)+0x360>
    isIo = strtoul(paramVal, NULL, 10) != 0;
   255d0:	e3a0200a 	mov	r2, #10
   255d4:	e1a01008 	mov	r1, r8
   255d8:	e1a00006 	mov	r0, r6
   255dc:	eb00a3f2 	bl	4e5ac <strtoul>
        if ((dataLen <= 0) || (dataLen >= MAX_MEM_BLOCK_READ_WRITE))
   255e0:	e59f3460 	ldr	r3, [pc, #1120]	; 25a48 <BusController::handleRxMsg(char const*, unsigned char const*, int, char*, int)+0x988>
   255e4:	e2472001 	sub	r2, r7, #1
   255e8:	e1520003 	cmp	r2, r3
   255ec:	8affffd7 	bhi	25550 <BusController::handleRxMsg(char const*, unsigned char const*, int, char*, int)+0x490>
        BusAccess::blockRead(addr, dataBuf, dataLen, true, isIo);
   255f0:	e2900000 	adds	r0, r0, #0
   255f4:	13a00001 	movne	r0, #1
   255f8:	e3a03001 	mov	r3, #1
   255fc:	e1a02007 	mov	r2, r7
   25600:	e58d0000 	str	r0, [sp]
   25604:	e28d1f47 	add	r1, sp, #284	; 0x11c
   25608:	e1a0000a 	mov	r0, sl
   2560c:	eb004fb2 	bl	394dc <BusAccess::blockRead(unsigned long, unsigned char*, unsigned long, bool, bool)>
        ee_sprintf(jsonResp, "\"err\":\"ok\",\"len\":%d,\"data\":\"", dataLen);
   25610:	e1a02007 	mov	r2, r7
   25614:	e59f1434 	ldr	r1, [pc, #1076]	; 25a50 <BusController::handleRxMsg(char const*, unsigned char const*, int, char*, int)+0x990>
   25618:	e1a00006 	mov	r0, r6
   2561c:	ebfff5e2 	bl	22dac <ee_sprintf>
        int pos = strlen(jsonResp);
   25620:	e1a00006 	mov	r0, r6
   25624:	eb009ffc 	bl	4d61c <strlen>
   25628:	e28d4f47 	add	r4, sp, #284	; 0x11c
            ee_sprintf(jsonResp+pos, "%02x", dataBuf[i]);
   2562c:	e59fa420 	ldr	sl, [pc, #1056]	; 25a54 <BusController::handleRxMsg(char const*, unsigned char const*, int, char*, int)+0x994>
   25630:	e0848007 	add	r8, r4, r7
   25634:	e0867000 	add	r7, r6, r0
   25638:	e4d42001 	ldrb	r2, [r4], #1
   2563c:	e1a00007 	mov	r0, r7
   25640:	e1a0100a 	mov	r1, sl
   25644:	ebfff5d8 	bl	22dac <ee_sprintf>
        for (int i = 0; i < dataLen; i++)
   25648:	e1540008 	cmp	r4, r8
   2564c:	e2877002 	add	r7, r7, #2
   25650:	1afffff8 	bne	25638 <BusController::handleRxMsg(char const*, unsigned char const*, int, char*, int)+0x578>
        strlcat(jsonResp, "\"", MAX_MEM_READ_RESP);
   25654:	e59f23fc 	ldr	r2, [pc, #1020]	; 25a58 <BusController::handleRxMsg(char const*, unsigned char const*, int, char*, int)+0x998>
   25658:	e59f13fc 	ldr	r1, [pc, #1020]	; 25a5c <BusController::handleRxMsg(char const*, unsigned char const*, int, char*, int)+0x99c>
   2565c:	e1a00006 	mov	r0, r6
   25660:	eb009fa8 	bl	4d508 <strlcat>
        strlcpy(pRespJson, jsonResp, maxRespLen);
   25664:	e59d2da8 	ldr	r2, [sp, #3496]	; 0xda8
   25668:	e1a01006 	mov	r1, r6
   2566c:	e1a00005 	mov	r0, r5
   25670:	eb009fd4 	bl	4d5c8 <strlcpy>
        return true;
   25674:	eaffff5c 	b	253ec <BusController::handleRxMsg(char const*, unsigned char const*, int, char*, int)+0x32c>
        BusAccess::busAccessReset();
   25678:	eb004634 	bl	36f50 <BusAccess::busAccessReset()>
        strlcpy(pRespJson, "\"err\":\"ok\"", maxRespLen);
   2567c:	e59d2da8 	ldr	r2, [sp, #3496]	; 0xda8
   25680:	e1a00005 	mov	r0, r5
   25684:	e59f13d4 	ldr	r1, [pc, #980]	; 25a60 <BusController::handleRxMsg(char const*, unsigned char const*, int, char*, int)+0x9a0>
   25688:	eb009fce 	bl	4d5c8 <strlcpy>
        return true;
   2568c:	eaffff56 	b	253ec <BusController::handleRxMsg(char const*, unsigned char const*, int, char*, int)+0x32c>
        BusAccess::getStatus(statusInfo);
   25690:	e28d0e51 	add	r0, sp, #1296	; 0x510
   25694:	e280000c 	add	r0, r0, #12
        clear();
    }
    
    void clear()
    {
        isrCount = 0;
   25698:	e58d351c 	str	r3, [sp, #1308]	; 0x51c
        isrAccumUs = 0;
   2569c:	e58d3520 	str	r3, [sp, #1312]	; 0x520
        isrAvgingCount = 0;
   256a0:	e58d3524 	str	r3, [sp, #1316]	; 0x524
        isrAvgNs = 0;
   256a4:	e58d3528 	str	r3, [sp, #1320]	; 0x528
        isrMaxUs = 0;
   256a8:	e58d352c 	str	r3, [sp, #1324]	; 0x52c
        isrSpuriousBUSRQ = 0;
   256ac:	e58d3530 	str	r3, [sp, #1328]	; 0x530
        isrDuringBUSACK = 0;
   256b0:	e58d3534 	str	r3, [sp, #1332]	; 0x534
        isrWithoutWAIT = 0;
   256b4:	e58d3538 	str	r3, [sp, #1336]	; 0x538
        clrAccumUs = 0;
   256b8:	e58d3550 	str	r3, [sp, #1360]	; 0x550
        clrAvgingCount = 0;
   256bc:	e58d3554 	str	r3, [sp, #1364]	; 0x554
        clrAvgNs = 0;
   256c0:	e58d3558 	str	r3, [sp, #1368]	; 0x558
        clrMaxUs = 0;
   256c4:	e58d355c 	str	r3, [sp, #1372]	; 0x55c
        busrqFailCount = 0;
   256c8:	e58d3560 	str	r3, [sp, #1376]	; 0x560
        busActionFailedDueToWait = 0;
   256cc:	e58d3564 	str	r3, [sp, #1380]	; 0x564
        isrMREQRD = 0;
   256d0:	e58d353c 	str	r3, [sp, #1340]	; 0x53c
        isrMREQWR = 0;
   256d4:	e58d3540 	str	r3, [sp, #1344]	; 0x540
        isrIORQRD = 0;
   256d8:	e58d3544 	str	r3, [sp, #1348]	; 0x544
        isrIORQWR = 0;
   256dc:	e58d3548 	str	r3, [sp, #1352]	; 0x548
        isrIRQACK = 0;
   256e0:	e58d354c 	str	r3, [sp, #1356]	; 0x54c
   256e4:	eb004c66 	bl	38884 <BusAccess::getStatus(BusAccessStatusInfo&)>
        strlcpy(pRespJson, statusInfo.getJson(), maxRespLen);
   256e8:	e28d0e51 	add	r0, sp, #1296	; 0x510
   256ec:	e280000c 	add	r0, r0, #12
   256f0:	eb004ba3 	bl	38584 <BusAccessStatusInfo::getJson()>
   256f4:	e59d2da8 	ldr	r2, [sp, #3496]	; 0xda8
   256f8:	e1a01000 	mov	r1, r0
   256fc:	e1a00005 	mov	r0, r5
   25700:	eb009fb0 	bl	4d5c8 <strlcpy>
   25704:	eaffff38 	b	253ec <BusController::handleRxMsg(char const*, unsigned char const*, int, char*, int)+0x32c>
        BusAccess::clearStatus();
   25708:	eb004c63 	bl	3889c <BusAccess::clearStatus()>
        strlcpy(pRespJson, "\"err\":\"ok\"", maxRespLen);
   2570c:	e59d2da8 	ldr	r2, [sp, #3496]	; 0xda8
   25710:	e1a00005 	mov	r0, r5
   25714:	e59f1344 	ldr	r1, [pc, #836]	; 25a60 <BusController::handleRxMsg(char const*, unsigned char const*, int, char*, int)+0x9a0>
   25718:	eb009faa 	bl	4d5c8 <strlcpy>
        return true;
   2571c:	eaffff32 	b	253ec <BusController::handleRxMsg(char const*, unsigned char const*, int, char*, int)+0x32c>
        BusAccess::blockWrite(addr, pParams, dataLen, true, isIo);
   25720:	e2900000 	adds	r0, r0, #0
   25724:	13a00001 	movne	r0, #1
   25728:	e1a0200a 	mov	r2, sl
   2572c:	e58d0000 	str	r0, [sp]
   25730:	e1a01007 	mov	r1, r7
   25734:	e1a0000b 	mov	r0, fp
   25738:	e3a03001 	mov	r3, #1
   2573c:	eb004ea2 	bl	391cc <BusAccess::blockWrite(unsigned long, unsigned char const*, unsigned long, bool, bool)>
        strlcpy(pRespJson, "\"err\":\"ok\"", maxRespLen);
   25740:	e59d2da8 	ldr	r2, [sp, #3496]	; 0xda8
   25744:	e1a00005 	mov	r0, r5
   25748:	e59f1310 	ldr	r1, [pc, #784]	; 25a60 <BusController::handleRxMsg(char const*, unsigned char const*, int, char*, int)+0x9a0>
        return true;
   2574c:	e1a09004 	mov	r9, r4
        strlcpy(pRespJson, "\"err\":\"ok\"", maxRespLen);
   25750:	eb009f9c 	bl	4d5c8 <strlcpy>
        return true;
   25754:	eaffff24 	b	253ec <BusController::handleRxMsg(char const*, unsigned char const*, int, char*, int)+0x32c>
        if (!jsonGetValueForKey("clockHz", pCmdJson, paramVal, MAX_CMD_PARAM_STR))
   25758:	e28d6e51 	add	r6, sp, #1296	; 0x510
   2575c:	e286600c 	add	r6, r6, #12
   25760:	e1a01004 	mov	r1, r4
   25764:	e1a02006 	mov	r2, r6
   25768:	e3a03032 	mov	r3, #50	; 0x32
   2576c:	e59f02f0 	ldr	r0, [pc, #752]	; 25a64 <BusController::handleRxMsg(char const*, unsigned char const*, int, char*, int)+0x9a4>
   25770:	ebfffc9d 	bl	249ec <jsonGetValueForKey>
   25774:	e3500000 	cmp	r0, #0
   25778:	1a000006 	bne	25798 <BusController::handleRxMsg(char const*, unsigned char const*, int, char*, int)+0x6d8>
            if (!jsonGetValueForKey("clockHz", (const char*)pParams, paramVal, MAX_CMD_PARAM_STR))
   2577c:	e1a01007 	mov	r1, r7
   25780:	e3a03032 	mov	r3, #50	; 0x32
   25784:	e1a02006 	mov	r2, r6
   25788:	e59f02d4 	ldr	r0, [pc, #724]	; 25a64 <BusController::handleRxMsg(char const*, unsigned char const*, int, char*, int)+0x9a4>
   2578c:	ebfffc96 	bl	249ec <jsonGetValueForKey>
   25790:	e3500000 	cmp	r0, #0
   25794:	0affff13 	beq	253e8 <BusController::handleRxMsg(char const*, unsigned char const*, int, char*, int)+0x328>
        uint32_t clockRateHz = strtoul(paramVal, NULL, 10);
   25798:	e3a0200a 	mov	r2, #10
   2579c:	e3a01000 	mov	r1, #0
   257a0:	e1a00006 	mov	r0, r6
   257a4:	eb00a380 	bl	4e5ac <strtoul>
        BusAccess::clockSetFreqHz(clockRateHz);
   257a8:	eb00503a 	bl	39898 <BusAccess::clockSetFreqHz(unsigned long)>
        uint32_t actualHz = BusAccess::clockCurFreqHz();
   257ac:	eb0050c8 	bl	39ad4 <BusAccess::clockCurFreqHz()>
        ee_sprintf(pRespJson, "\"err\":\"ok\",\"clockHz\":\"%d\"", actualHz);
   257b0:	e59f12b0 	ldr	r1, [pc, #688]	; 25a68 <BusController::handleRxMsg(char const*, unsigned char const*, int, char*, int)+0x9a8>
   257b4:	e1a02000 	mov	r2, r0
   257b8:	e1a00005 	mov	r0, r5
   257bc:	ebfff57a 	bl	22dac <ee_sprintf>
        return true;
   257c0:	eaffff09 	b	253ec <BusController::handleRxMsg(char const*, unsigned char const*, int, char*, int)+0x32c>
        LogWrite(FromBusController, LOG_DEBUG, "Target Reset");
   257c4:	e59f22a0 	ldr	r2, [pc, #672]	; 25a6c <BusController::handleRxMsg(char const*, unsigned char const*, int, char*, int)+0x9ac>
   257c8:	e3a01004 	mov	r1, #4
   257cc:	e59f0268 	ldr	r0, [pc, #616]	; 25a3c <BusController::handleRxMsg(char const*, unsigned char const*, int, char*, int)+0x97c>
   257d0:	ebfffa68 	bl	24178 <LogWrite>
        BusAccess::targetReqReset(_busSocketId);
   257d4:	e59f3234 	ldr	r3, [pc, #564]	; 25a10 <BusController::handleRxMsg(char const*, unsigned char const*, int, char*, int)+0x950>
   257d8:	e3e01000 	mvn	r1, #0
   257dc:	e5930000 	ldr	r0, [r3]
   257e0:	eb004675 	bl	371bc <BusAccess::targetReqReset(int, int)>
        strlcpy(pRespJson, "\"err\":\"ok\"", maxRespLen);
   257e4:	e59d2da8 	ldr	r2, [sp, #3496]	; 0xda8
   257e8:	e1a00005 	mov	r0, r5
   257ec:	e59f126c 	ldr	r1, [pc, #620]	; 25a60 <BusController::handleRxMsg(char const*, unsigned char const*, int, char*, int)+0x9a0>
   257f0:	eb009f74 	bl	4d5c8 <strlcpy>
        return true;
   257f4:	eafffefc 	b	253ec <BusController::handleRxMsg(char const*, unsigned char const*, int, char*, int)+0x32c>
        BusAccess::waitHold(_busSocketId, true);
   257f8:	e3a01001 	mov	r1, #1
   257fc:	e59f320c 	ldr	r3, [pc, #524]	; 25a10 <BusController::handleRxMsg(char const*, unsigned char const*, int, char*, int)+0x950>
        BusAccess::waitHold(_busSocketId, false);
   25800:	e5930000 	ldr	r0, [r3]
   25804:	eb00460e 	bl	37044 <BusAccess::waitHold(int, bool)>
        strlcpy(pRespJson, "\"err\":\"ok\"", maxRespLen);
   25808:	e59d2da8 	ldr	r2, [sp, #3496]	; 0xda8
   2580c:	e1a00005 	mov	r0, r5
   25810:	e59f1248 	ldr	r1, [pc, #584]	; 25a60 <BusController::handleRxMsg(char const*, unsigned char const*, int, char*, int)+0x9a0>
   25814:	eb009f6b 	bl	4d5c8 <strlcpy>
        return true;
   25818:	eafffef3 	b	253ec <BusController::handleRxMsg(char const*, unsigned char const*, int, char*, int)+0x32c>
        BusAccess::waitOnMemory(_busSocketId, true);
   2581c:	e3a01001 	mov	r1, #1
   25820:	e59f31e8 	ldr	r3, [pc, #488]	; 25a10 <BusController::handleRxMsg(char const*, unsigned char const*, int, char*, int)+0x950>
        BusAccess::waitOnMemory(_busSocketId, false);
   25824:	e5930000 	ldr	r0, [r3]
   25828:	eb0045e2 	bl	36fb8 <BusAccess::waitOnMemory(int, bool)>
        strlcpy(pRespJson, "\"err\":\"ok\"", maxRespLen);
   2582c:	e59d2da8 	ldr	r2, [sp, #3496]	; 0xda8
   25830:	e1a00005 	mov	r0, r5
   25834:	e59f1224 	ldr	r1, [pc, #548]	; 25a60 <BusController::handleRxMsg(char const*, unsigned char const*, int, char*, int)+0x9a0>
   25838:	eb009f62 	bl	4d5c8 <strlcpy>
        return true;
   2583c:	eafffeea 	b	253ec <BusController::handleRxMsg(char const*, unsigned char const*, int, char*, int)+0x32c>
        BusAccess::waitRelease();
   25840:	eb0045fa 	bl	37030 <BusAccess::waitRelease()>
        strlcpy(pRespJson, "\"err\":\"ok\"", maxRespLen);
   25844:	e59d2da8 	ldr	r2, [sp, #3496]	; 0xda8
   25848:	e1a00005 	mov	r0, r5
   2584c:	e59f120c 	ldr	r1, [pc, #524]	; 25a60 <BusController::handleRxMsg(char const*, unsigned char const*, int, char*, int)+0x9a0>
   25850:	eb009f5c 	bl	4d5c8 <strlcpy>
        return true;
   25854:	eafffee4 	b	253ec <BusController::handleRxMsg(char const*, unsigned char const*, int, char*, int)+0x32c>
        BusAccess::waitHold(_busSocketId, false);
   25858:	e59f31b0 	ldr	r3, [pc, #432]	; 25a10 <BusController::handleRxMsg(char const*, unsigned char const*, int, char*, int)+0x950>
   2585c:	eaffffe7 	b	25800 <BusController::handleRxMsg(char const*, unsigned char const*, int, char*, int)+0x740>
        BusAccess::waitOnMemory(_busSocketId, false);
   25860:	e59f31a8 	ldr	r3, [pc, #424]	; 25a10 <BusController::handleRxMsg(char const*, unsigned char const*, int, char*, int)+0x950>
   25864:	eaffffee 	b	25824 <BusController::handleRxMsg(char const*, unsigned char const*, int, char*, int)+0x764>
        if (!jsonGetValueForKey("cycleUs", pCmdJson, paramVal, MAX_CMD_PARAM_STR))
   25868:	e28d2e51 	add	r2, sp, #1296	; 0x510
   2586c:	e1a01004 	mov	r1, r4
   25870:	e282200c 	add	r2, r2, #12
   25874:	e3a03032 	mov	r3, #50	; 0x32
   25878:	e59f01f0 	ldr	r0, [pc, #496]	; 25a70 <BusController::handleRxMsg(char const*, unsigned char const*, int, char*, int)+0x9b0>
   2587c:	ebfffc5a 	bl	249ec <jsonGetValueForKey>
   25880:	e2509000 	subs	r9, r0, #0
   25884:	0afffed8 	beq	253ec <BusController::handleRxMsg(char const*, unsigned char const*, int, char*, int)+0x32c>
        BusAccess::waitSetCycleUs(strtoul(paramVal, NULL, 10));
   25888:	e28d0e51 	add	r0, sp, #1296	; 0x510
   2588c:	e1a01006 	mov	r1, r6
   25890:	e3a0200a 	mov	r2, #10
   25894:	e280000c 	add	r0, r0, #12
   25898:	eb00a343 	bl	4e5ac <strtoul>
   2589c:	eb0045df 	bl	37020 <BusAccess::waitSetCycleUs(unsigned long)>
        strlcpy(pRespJson, "\"err\":\"ok\"", maxRespLen);
   258a0:	e59d2da8 	ldr	r2, [sp, #3496]	; 0xda8
   258a4:	e1a00005 	mov	r0, r5
   258a8:	e59f11b0 	ldr	r1, [pc, #432]	; 25a60 <BusController::handleRxMsg(char const*, unsigned char const*, int, char*, int)+0x9a0>
   258ac:	eb009f45 	bl	4d5c8 <strlcpy>
        return true;
   258b0:	eafffecd 	b	253ec <BusController::handleRxMsg(char const*, unsigned char const*, int, char*, int)+0x32c>
        TargetTracker::getRegsFormatted(regsStr, sizeof(regsStr));
   258b4:	e28d0e51 	add	r0, sp, #1296	; 0x510
   258b8:	e280000c 	add	r0, r0, #12
   258bc:	e3a010c8 	mov	r1, #200	; 0xc8
   258c0:	eb0056b1 	bl	3b38c <TargetTracker::getRegsFormatted(char*, int)>
        strlcpy(pRespJson, "\"err\":\"ok\",\"regs\":\"", maxRespLen);
   258c4:	e59d2da8 	ldr	r2, [sp, #3496]	; 0xda8
   258c8:	e59f11a4 	ldr	r1, [pc, #420]	; 25a74 <BusController::handleRxMsg(char const*, unsigned char const*, int, char*, int)+0x9b4>
   258cc:	e1a00005 	mov	r0, r5
   258d0:	eb009f3c 	bl	4d5c8 <strlcpy>
        strlcat(pRespJson, regsStr, maxRespLen);
   258d4:	e28d1e51 	add	r1, sp, #1296	; 0x510
   258d8:	e59d2da8 	ldr	r2, [sp, #3496]	; 0xda8
   258dc:	e281100c 	add	r1, r1, #12
   258e0:	e1a00005 	mov	r0, r5
   258e4:	eb009f07 	bl	4d508 <strlcat>
        strlcat(pRespJson, "\"", maxRespLen);
   258e8:	e59d2da8 	ldr	r2, [sp, #3496]	; 0xda8
   258ec:	e1a00005 	mov	r0, r5
   258f0:	e59f1164 	ldr	r1, [pc, #356]	; 25a5c <BusController::handleRxMsg(char const*, unsigned char const*, int, char*, int)+0x99c>
   258f4:	eb009f03 	bl	4d508 <strlcat>
   258f8:	eafffebb 	b	253ec <BusController::handleRxMsg(char const*, unsigned char const*, int, char*, int)+0x32c>
        TargetTracker::stepRun();
   258fc:	eb005683 	bl	3b310 <TargetTracker::stepRun()>
        LogWrite(FromBusController, LOG_DEBUG, "TargettrackerRun");
   25900:	e59f2170 	ldr	r2, [pc, #368]	; 25a78 <BusController::handleRxMsg(char const*, unsigned char const*, int, char*, int)+0x9b8>
   25904:	e3a01004 	mov	r1, #4
   25908:	e59f012c 	ldr	r0, [pc, #300]	; 25a3c <BusController::handleRxMsg(char const*, unsigned char const*, int, char*, int)+0x97c>
   2590c:	ebfffa19 	bl	24178 <LogWrite>
        strlcpy(pRespJson, "\"err\":\"ok\"", maxRespLen);
   25910:	e59d2da8 	ldr	r2, [sp, #3496]	; 0xda8
   25914:	e1a00005 	mov	r0, r5
   25918:	e59f1140 	ldr	r1, [pc, #320]	; 25a60 <BusController::handleRxMsg(char const*, unsigned char const*, int, char*, int)+0x9a0>
   2591c:	eb009f29 	bl	4d5c8 <strlcpy>
        return true;
   25920:	eafffeb1 	b	253ec <BusController::handleRxMsg(char const*, unsigned char const*, int, char*, int)+0x32c>
        TargetTracker::stepInto();
   25924:	eb00563f 	bl	3b228 <TargetTracker::stepInto()>
        strlcpy(pRespJson, "\"err\":\"ok\"", maxRespLen);
   25928:	e59d2da8 	ldr	r2, [sp, #3496]	; 0xda8
   2592c:	e1a00005 	mov	r0, r5
   25930:	e59f1128 	ldr	r1, [pc, #296]	; 25a60 <BusController::handleRxMsg(char const*, unsigned char const*, int, char*, int)+0x9a0>
   25934:	eb009f23 	bl	4d5c8 <strlcpy>
        return true;
   25938:	eafffeab 	b	253ec <BusController::handleRxMsg(char const*, unsigned char const*, int, char*, int)+0x32c>
        TargetTracker::enable(false);
   2593c:	eb00546f 	bl	3ab00 <TargetTracker::enable(bool)>
        LogWrite(FromBusController, LOG_DEBUG, "TargettrackerOff");
   25940:	e59f2134 	ldr	r2, [pc, #308]	; 25a7c <BusController::handleRxMsg(char const*, unsigned char const*, int, char*, int)+0x9bc>
   25944:	eaffffee 	b	25904 <BusController::handleRxMsg(char const*, unsigned char const*, int, char*, int)+0x844>
        if (!jsonGetValueForKey("reset", pCmdJson, paramVal, MAX_CMD_PARAM_STR))
   25948:	e28d2e51 	add	r2, sp, #1296	; 0x510
   2594c:	e1a01004 	mov	r1, r4
   25950:	e282200c 	add	r2, r2, #12
   25954:	e3a03032 	mov	r3, #50	; 0x32
   25958:	e59f0120 	ldr	r0, [pc, #288]	; 25a80 <BusController::handleRxMsg(char const*, unsigned char const*, int, char*, int)+0x9c0>
   2595c:	ebfffc22 	bl	249ec <jsonGetValueForKey>
   25960:	e2509000 	subs	r9, r0, #0
   25964:	0afffea0 	beq	253ec <BusController::handleRxMsg(char const*, unsigned char const*, int, char*, int)+0x32c>
        bool reset = strtol(paramVal, NULL, 10) != 0;
   25968:	e28d0e51 	add	r0, sp, #1296	; 0x510
   2596c:	e1a01006 	mov	r1, r6
   25970:	e3a0200a 	mov	r2, #10
   25974:	e280000c 	add	r0, r0, #12
   25978:	eb00a268 	bl	4e320 <strtol>
   2597c:	e1a04000 	mov	r4, r0
        TargetTracker::enable(true);
   25980:	e3a00001 	mov	r0, #1
   25984:	eb00545d 	bl	3ab00 <TargetTracker::enable(bool)>
        if (reset)
   25988:	e3540000 	cmp	r4, #0
   2598c:	0a000000 	beq	25994 <BusController::handleRxMsg(char const*, unsigned char const*, int, char*, int)+0x8d4>
            TargetTracker::targetReset();
   25990:	eb005499 	bl	3abfc <TargetTracker::targetReset()>
        strlcpy(pRespJson, "\"err\":\"ok\"", maxRespLen);
   25994:	e1a00005 	mov	r0, r5
   25998:	e59d2da8 	ldr	r2, [sp, #3496]	; 0xda8
   2599c:	e59f10bc 	ldr	r1, [pc, #188]	; 25a60 <BusController::handleRxMsg(char const*, unsigned char const*, int, char*, int)+0x9a0>
   259a0:	eb009f08 	bl	4d5c8 <strlcpy>
        return true;
   259a4:	eafffe90 	b	253ec <BusController::handleRxMsg(char const*, unsigned char const*, int, char*, int)+0x32c>
        BusAccess::waitOnIO(_busSocketId, false);
   259a8:	e59f3060 	ldr	r3, [pc, #96]	; 25a10 <BusController::handleRxMsg(char const*, unsigned char const*, int, char*, int)+0x950>
   259ac:	e5930000 	ldr	r0, [r3]
   259b0:	eb00458b 	bl	36fe4 <BusAccess::waitOnIO(int, bool)>
        strlcpy(pRespJson, "\"err\":\"ok\"", maxRespLen);
   259b4:	e59d2da8 	ldr	r2, [sp, #3496]	; 0xda8
   259b8:	e1a00005 	mov	r0, r5
   259bc:	e59f109c 	ldr	r1, [pc, #156]	; 25a60 <BusController::handleRxMsg(char const*, unsigned char const*, int, char*, int)+0x9a0>
   259c0:	eb009f00 	bl	4d5c8 <strlcpy>
        return true;
   259c4:	eafffe88 	b	253ec <BusController::handleRxMsg(char const*, unsigned char const*, int, char*, int)+0x32c>
   259c8:	00053b5c 	.word	0x00053b5c
   259cc:	00053b64 	.word	0x00053b64
   259d0:	00053bc0 	.word	0x00053bc0
   259d4:	00053bd0 	.word	0x00053bd0
   259d8:	00053b3c 	.word	0x00053b3c
   259dc:	00053bdc 	.word	0x00053bdc
   259e0:	00053c3c 	.word	0x00053c3c
   259e4:	00053c48 	.word	0x00053c48
   259e8:	00053c58 	.word	0x00053c58
   259ec:	00053c64 	.word	0x00053c64
   259f0:	00053c80 	.word	0x00053c80
   259f4:	00053ca8 	.word	0x00053ca8
   259f8:	00053cbc 	.word	0x00053cbc
   259fc:	00053cc8 	.word	0x00053cc8
   25a00:	00053cd4 	.word	0x00053cd4
   25a04:	00053ce0 	.word	0x00053ce0
   25a08:	00053cf0 	.word	0x00053cf0
   25a0c:	00053d00 	.word	0x00053d00
   25a10:	00062a5c 	.word	0x00062a5c
   25a14:	00053d0c 	.word	0x00053d0c
   25a18:	00053d18 	.word	0x00053d18
   25a1c:	00053d30 	.word	0x00053d30
   25a20:	00053d58 	.word	0x00053d58
   25a24:	00053d64 	.word	0x00053d64
   25a28:	00053d80 	.word	0x00053d80
   25a2c:	00053d9c 	.word	0x00053d9c
   25a30:	00053b68 	.word	0x00053b68
   25a34:	00053b70 	.word	0x00053b70
   25a38:	00053c14 	.word	0x00053c14
   25a3c:	00053b4c 	.word	0x00053b4c
   25a40:	00053b80 	.word	0x00053b80
   25a44:	00053b84 	.word	0x00053b84
   25a48:	000003fe 	.word	0x000003fe
   25a4c:	00053b8c 	.word	0x00053b8c
   25a50:	00053ba0 	.word	0x00053ba0
   25a54:	00055348 	.word	0x00055348
   25a58:	00000864 	.word	0x00000864
   25a5c:	00053ca4 	.word	0x00053ca4
   25a60:	00053bc4 	.word	0x00053bc4
   25a64:	00053cb4 	.word	0x00053cb4
   25a68:	00053c8c 	.word	0x00053c8c
   25a6c:	00053c70 	.word	0x00053c70
   25a70:	00053da8 	.word	0x00053da8
   25a74:	00053d88 	.word	0x00053d88
   25a78:	00053d6c 	.word	0x00053d6c
   25a7c:	00053d44 	.word	0x00053d44
   25a80:	00053d28 	.word	0x00053d28

00025a84 <BusController::BusController()>:
    _pThisInstance = this;
   25a84:	e59f3004 	ldr	r3, [pc, #4]	; 25a90 <BusController::BusController()+0xc>
   25a88:	e5830000 	str	r0, [r3]
}
   25a8c:	e12fff1e 	bx	lr
   25a90:	0006fc9c 	.word	0x0006fc9c

00025a94 <BusController::init()>:
{
   25a94:	e92d4010 	push	{r4, lr}
    if (_busSocketId < 0)
   25a98:	e59f4034 	ldr	r4, [pc, #52]	; 25ad4 <BusController::init()+0x40>
   25a9c:	e5943000 	ldr	r3, [r4]
   25aa0:	e3530000 	cmp	r3, #0
   25aa4:	ba000006 	blt	25ac4 <BusController::init()+0x30>
    if (_commsSocketId < 0)
   25aa8:	e594302c 	ldr	r3, [r4, #44]	; 0x2c
   25aac:	e3530000 	cmp	r3, #0
   25ab0:	a8bd8010 	popge	{r4, pc}
        _commsSocketId = CommandHandler::commsSocketAdd(_commsSocketInfo);
   25ab4:	e59f001c 	ldr	r0, [pc, #28]	; 25ad8 <BusController::init()+0x44>
   25ab8:	eb0003ad 	bl	26974 <CommandHandler::commsSocketAdd(CommsSocketInfo&)>
   25abc:	e584002c 	str	r0, [r4, #44]	; 0x2c
}
   25ac0:	e8bd8010 	pop	{r4, pc}
        _busSocketId = BusAccess::busSocketAdd(_busSocketInfo);
   25ac4:	e2840004 	add	r0, r4, #4
   25ac8:	eb004aee 	bl	38688 <BusAccess::busSocketAdd(BusSocketInfo&)>
   25acc:	e5840000 	str	r0, [r4]
   25ad0:	eafffff4 	b	25aa8 <BusController::init()+0x14>
   25ad4:	00062a5c 	.word	0x00062a5c
   25ad8:	00062a8c 	.word	0x00062a8c

00025adc <BusController::getArgsRdAndWr(char const*, unsigned long&, int&, bool&)>:
{
   25adc:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   25ae0:	e24dd03c 	sub	sp, sp, #60	; 0x3c
   25ae4:	e1a04000 	mov	r4, r0
   25ae8:	e1a05001 	mov	r5, r1
   25aec:	e1a06002 	mov	r6, r2
    if (!jsonGetValueForKey("addr", pCmdJson, paramVal, MAX_CMD_PARAM_STR))
   25af0:	e1a01000 	mov	r1, r0
{
   25af4:	e1a07003 	mov	r7, r3
    if (!jsonGetValueForKey("addr", pCmdJson, paramVal, MAX_CMD_PARAM_STR))
   25af8:	e28d2004 	add	r2, sp, #4
   25afc:	e3a03032 	mov	r3, #50	; 0x32
   25b00:	e59f0098 	ldr	r0, [pc, #152]	; 25ba0 <BusController::getArgsRdAndWr(char const*, unsigned long&, int&, bool&)+0xc4>
   25b04:	ebfffbb8 	bl	249ec <jsonGetValueForKey>
   25b08:	e3500000 	cmp	r0, #0
   25b0c:	1a000003 	bne	25b20 <BusController::getArgsRdAndWr(char const*, unsigned long&, int&, bool&)+0x44>
        return false;
   25b10:	e3a04000 	mov	r4, #0
}
   25b14:	e1a00004 	mov	r0, r4
   25b18:	e28dd03c 	add	sp, sp, #60	; 0x3c
   25b1c:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
    addr = strtoul(paramVal, NULL, 10);
   25b20:	e3a0200a 	mov	r2, #10
   25b24:	e3a01000 	mov	r1, #0
   25b28:	e28d0004 	add	r0, sp, #4
   25b2c:	eb00a29e 	bl	4e5ac <strtoul>
    if (!jsonGetValueForKey("len", pCmdJson, paramVal, MAX_CMD_PARAM_STR))
   25b30:	e3a03032 	mov	r3, #50	; 0x32
    addr = strtoul(paramVal, NULL, 10);
   25b34:	e5850000 	str	r0, [r5]
    if (!jsonGetValueForKey("len", pCmdJson, paramVal, MAX_CMD_PARAM_STR))
   25b38:	e28d2004 	add	r2, sp, #4
   25b3c:	e1a01004 	mov	r1, r4
   25b40:	e59f005c 	ldr	r0, [pc, #92]	; 25ba4 <BusController::getArgsRdAndWr(char const*, unsigned long&, int&, bool&)+0xc8>
   25b44:	ebfffba8 	bl	249ec <jsonGetValueForKey>
   25b48:	e3500000 	cmp	r0, #0
   25b4c:	0affffef 	beq	25b10 <BusController::getArgsRdAndWr(char const*, unsigned long&, int&, bool&)+0x34>
    dataLen = strtoul(paramVal, NULL, 10);
   25b50:	e3a0200a 	mov	r2, #10
   25b54:	e3a01000 	mov	r1, #0
   25b58:	e28d0004 	add	r0, sp, #4
   25b5c:	eb00a292 	bl	4e5ac <strtoul>
    if (!jsonGetValueForKey("isIo", pCmdJson, paramVal, MAX_CMD_PARAM_STR))
   25b60:	e1a01004 	mov	r1, r4
    dataLen = strtoul(paramVal, NULL, 10);
   25b64:	e5860000 	str	r0, [r6]
    if (!jsonGetValueForKey("isIo", pCmdJson, paramVal, MAX_CMD_PARAM_STR))
   25b68:	e3a03032 	mov	r3, #50	; 0x32
   25b6c:	e28d2004 	add	r2, sp, #4
   25b70:	e59f0030 	ldr	r0, [pc, #48]	; 25ba8 <BusController::getArgsRdAndWr(char const*, unsigned long&, int&, bool&)+0xcc>
   25b74:	ebfffb9c 	bl	249ec <jsonGetValueForKey>
   25b78:	e2504000 	subs	r4, r0, #0
   25b7c:	0affffe3 	beq	25b10 <BusController::getArgsRdAndWr(char const*, unsigned long&, int&, bool&)+0x34>
    isIo = strtoul(paramVal, NULL, 10) != 0;
   25b80:	e28d0004 	add	r0, sp, #4
   25b84:	e3a0200a 	mov	r2, #10
   25b88:	e3a01000 	mov	r1, #0
   25b8c:	eb00a286 	bl	4e5ac <strtoul>
   25b90:	e2900000 	adds	r0, r0, #0
   25b94:	13a00001 	movne	r0, #1
   25b98:	e5c70000 	strb	r0, [r7]
    return true;
   25b9c:	eaffffdc 	b	25b14 <BusController::getArgsRdAndWr(char const*, unsigned long&, int&, bool&)+0x38>
   25ba0:	00053b68 	.word	0x00053b68
   25ba4:	00053b80 	.word	0x00053b80
   25ba8:	00053b84 	.word	0x00053b84

00025bac <BusController::handleWaitInterrupt(unsigned long, unsigned long, unsigned long, unsigned long&)>:

void BusController::handleWaitInterrupt([[maybe_unused]] uint32_t addr, [[maybe_unused]] uint32_t data, 
        [[maybe_unused]] uint32_t flags, [[maybe_unused]] uint32_t& retVal)
{
}
   25bac:	e12fff1e 	bx	lr

00025bb0 <BusController::service()>:

void BusController::service()
{
}
   25bb0:	e12fff1e 	bx	lr

00025bb4 <BusRaiderApp::putToSerial(unsigned char const*, int)>:
// Callbacks
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// Function to send to uart from command handler
void BusRaiderApp::putToSerial(const uint8_t* pBuf, int len)
{
   25bb4:	e92d4070 	push	{r4, r5, r6, lr}
    for (int i = 0; i < len; i++)
   25bb8:	e2515000 	subs	r5, r1, #0
   25bbc:	d8bd8070 	pople	{r4, r5, r6, pc}
   25bc0:	e2404001 	sub	r4, r0, #1
   25bc4:	e59f6020 	ldr	r6, [pc, #32]	; 25bec <BusRaiderApp::putToSerial(unsigned char const*, int)+0x38>
   25bc8:	e0845005 	add	r5, r4, r5
        _pApp->_uart.write(pBuf[i]);
   25bcc:	e5963000 	ldr	r3, [r6]
   25bd0:	e5f41001 	ldrb	r1, [r4, #1]!
   25bd4:	e2833906 	add	r3, r3, #98304	; 0x18000
   25bd8:	e59308ac 	ldr	r0, [r3, #2220]	; 0x8ac
   25bdc:	eb003f9b 	bl	35a50 <UartMaxi::write(unsigned int)>
    for (int i = 0; i < len; i++)
   25be0:	e1550004 	cmp	r5, r4
   25be4:	1afffff8 	bne	25bcc <BusRaiderApp::putToSerial(unsigned char const*, int)+0x18>
   25be8:	e8bd8070 	pop	{r4, r5, r6, pc}
   25bec:	0006fca0 	.word	0x0006fca0

00025bf0 <BusRaiderApp::usbKeypressHandlerStatic(unsigned char, unsigned char const*)>:
        CommandHandler::handleHDLCReceivedChars(buf, 1);
    }    
}

void BusRaiderApp::usbKeypressHandlerStatic(unsigned char ucModifiers, const unsigned char rawKeys[6])
{
   25bf0:	e92d4070 	push	{r4, r5, r6, lr}
    _pApp->usbKeypressHandler(ucModifiers, rawKeys);
   25bf4:	e59f2130 	ldr	r2, [pc, #304]	; 25d2c <BusRaiderApp::usbKeypressHandlerStatic(unsigned char, unsigned char const*)+0x13c>
}

void BusRaiderApp::usbKeypressHandler(unsigned char ucModifiers, const unsigned char rawKeys[6])
{
    // Check for immediate mode
    if (rawKeys[0] == KEY_F2)
   25bf8:	e5d13000 	ldrb	r3, [r1]
    _pApp->usbKeypressHandler(ucModifiers, rawKeys);
   25bfc:	e5924000 	ldr	r4, [r2]
    if (rawKeys[0] == KEY_F2)
   25c00:	e353003b 	cmp	r3, #59	; 0x3b
   25c04:	e5d43008 	ldrb	r3, [r4, #8]
   25c08:	0a000023 	beq	25c9c <BusRaiderApp::usbKeypressHandlerStatic(unsigned char, unsigned char const*)+0xac>
            LogPrintf("Entering immediate mode, e.g. w/ssid/password/hostname<enter> to setup WiFi ...\n");
        }
        _immediateMode = true;
        return;
    }
    if (_immediateMode)
   25c0c:	e3530000 	cmp	r3, #0
   25c10:	0a000016 	beq	25c70 <BusRaiderApp::usbKeypressHandlerStatic(unsigned char, unsigned char const*)+0x80>
    {
        if (_immediateModeLineLen < IMM_MODE_LINE_MAXLEN)
   25c14:	e5943070 	ldr	r3, [r4, #112]	; 0x70
   25c18:	e3530063 	cmp	r3, #99	; 0x63
   25c1c:	c8bd8070 	popgt	{r4, r5, r6, pc}
        {
            int asciiCode = McTerminal::convertRawToAscii(ucModifiers, rawKeys);
   25c20:	eb002876 	bl	2fe00 <McTerminal::convertRawToAscii(unsigned char, unsigned char const*)>
            if (asciiCode == 0)
   25c24:	e2505000 	subs	r5, r0, #0
   25c28:	08bd8070 	popeq	{r4, r5, r6, pc}
                return;
            if (asciiCode == 0x08)
   25c2c:	e3550008 	cmp	r5, #8
   25c30:	0a000031 	beq	25cfc <BusRaiderApp::usbKeypressHandlerStatic(unsigned char, unsigned char const*)+0x10c>
                if (_immediateModeLineLen > 0)
                    _immediateModeLineLen--;
                _display.consolePut(asciiCode);
                _display.consolePut(' ');
            }
            else if (asciiCode == 0x0d)
   25c34:	e355000d 	cmp	r5, #13
   25c38:	0a00001e 	beq	25cb8 <BusRaiderApp::usbKeypressHandlerStatic(unsigned char, unsigned char const*)+0xc8>
                    CommandHandler::sendAPIReq(_immediateModeLine);
                    LogPrintf("Sent request to ESP32: %s\n", _immediateModeLine);
                }
                _immediateModeLineLen = 0;
            }
            else if ((asciiCode >= 32) && (asciiCode < 127))
   25c3c:	e2453020 	sub	r3, r5, #32
   25c40:	e353005e 	cmp	r3, #94	; 0x5e
            {
                _immediateModeLine[_immediateModeLineLen++] = asciiCode;
   25c44:	95943070 	ldrls	r3, [r4, #112]	; 0x70
   25c48:	82846906 	addhi	r6, r4, #98304	; 0x18000
   25c4c:	92832001 	addls	r2, r3, #1
   25c50:	90843003 	addls	r3, r4, r3
   25c54:	95842070 	strls	r2, [r4, #112]	; 0x70
   25c58:	92846906 	addls	r6, r4, #98304	; 0x18000
   25c5c:	95c35009 	strbls	r5, [r3, #9]
            }
            _display.consolePut(asciiCode);
   25c60:	e1a01005 	mov	r1, r5
   25c64:	e59608a8 	ldr	r0, [r6, #2216]	; 0x8a8
}
   25c68:	e8bd4070 	pop	{r4, r5, r6, lr}
            _display.consolePut(asciiCode);
   25c6c:	ea003545 	b	33188 <Display::consolePut(int)>
   25c70:	e1a05001 	mov	r5, r1
   25c74:	e1a06000 	mov	r6, r0
        return;
    }

    // Send to the target machine to process
    // ee_printf("KEY mod %02x raw %02x %02x %02x\n", ucModifiers, rawKeys[0], rawKeys[1], rawKeys[2]);
    McBase* pMc = McManager::getMachine();
   25c78:	eb00200d 	bl	2dcb4 <McManager::getMachine()>
    if (pMc)
   25c7c:	e2503000 	subs	r3, r0, #0
   25c80:	08bd8070 	popeq	{r4, r5, r6, pc}
        pMc->keyHandler(ucModifiers, rawKeys);
   25c84:	e5933000 	ldr	r3, [r3]
   25c88:	e1a02005 	mov	r2, r5
   25c8c:	e1a01006 	mov	r1, r6
}
   25c90:	e8bd4070 	pop	{r4, r5, r6, lr}
        pMc->keyHandler(ucModifiers, rawKeys);
   25c94:	e5933034 	ldr	r3, [r3, #52]	; 0x34
   25c98:	e12fff13 	bx	r3
        if (!_immediateMode)
   25c9c:	e3530000 	cmp	r3, #0
   25ca0:	1a000001 	bne	25cac <BusRaiderApp::usbKeypressHandlerStatic(unsigned char, unsigned char const*)+0xbc>
            LogPrintf("Entering immediate mode, e.g. w/ssid/password/hostname<enter> to setup WiFi ...\n");
   25ca4:	e59f0084 	ldr	r0, [pc, #132]	; 25d30 <BusRaiderApp::usbKeypressHandlerStatic(unsigned char, unsigned char const*)+0x140>
   25ca8:	ebfff9d7 	bl	2440c <LogPrintf>
        _immediateMode = true;
   25cac:	e3a03001 	mov	r3, #1
   25cb0:	e5c43008 	strb	r3, [r4, #8]
   25cb4:	e8bd8070 	pop	{r4, r5, r6, pc}
                _immediateMode = false;
   25cb8:	e3a02000 	mov	r2, #0
                _immediateModeLine[_immediateModeLineLen] = 0;
   25cbc:	e5943070 	ldr	r3, [r4, #112]	; 0x70
                _immediateMode = false;
   25cc0:	e5c42008 	strb	r2, [r4, #8]
                if (_immediateModeLineLen > 0)
   25cc4:	e1530002 	cmp	r3, r2
                _immediateModeLine[_immediateModeLineLen] = 0;
   25cc8:	e0843003 	add	r3, r4, r3
   25ccc:	e5c32009 	strb	r2, [r3, #9]
                if (_immediateModeLineLen > 0)
   25cd0:	da000005 	ble	25cec <BusRaiderApp::usbKeypressHandlerStatic(unsigned char, unsigned char const*)+0xfc>
                    CommandHandler::sendAPIReq(_immediateModeLine);
   25cd4:	e2846009 	add	r6, r4, #9
   25cd8:	e1a00006 	mov	r0, r6
   25cdc:	eb00068e 	bl	2771c <CommandHandler::sendAPIReq(char const*)>
                    LogPrintf("Sent request to ESP32: %s\n", _immediateModeLine);
   25ce0:	e1a01006 	mov	r1, r6
   25ce4:	e59f0048 	ldr	r0, [pc, #72]	; 25d34 <BusRaiderApp::usbKeypressHandlerStatic(unsigned char, unsigned char const*)+0x144>
   25ce8:	ebfff9c7 	bl	2440c <LogPrintf>
                _immediateModeLineLen = 0;
   25cec:	e3a03000 	mov	r3, #0
   25cf0:	e2846906 	add	r6, r4, #98304	; 0x18000
   25cf4:	e5843070 	str	r3, [r4, #112]	; 0x70
   25cf8:	eaffffd8 	b	25c60 <BusRaiderApp::usbKeypressHandlerStatic(unsigned char, unsigned char const*)+0x70>
                if (_immediateModeLineLen > 0)
   25cfc:	e5943070 	ldr	r3, [r4, #112]	; 0x70
                _display.consolePut(asciiCode);
   25d00:	e2846906 	add	r6, r4, #98304	; 0x18000
                if (_immediateModeLineLen > 0)
   25d04:	e3530000 	cmp	r3, #0
                    _immediateModeLineLen--;
   25d08:	c2433001 	subgt	r3, r3, #1
   25d0c:	c5843070 	strgt	r3, [r4, #112]	; 0x70
                _display.consolePut(asciiCode);
   25d10:	e59608a8 	ldr	r0, [r6, #2216]	; 0x8a8
   25d14:	e3a01008 	mov	r1, #8
   25d18:	eb00351a 	bl	33188 <Display::consolePut(int)>
                _display.consolePut(' ');
   25d1c:	e59608a8 	ldr	r0, [r6, #2216]	; 0x8a8
   25d20:	e3a01020 	mov	r1, #32
   25d24:	eb003517 	bl	33188 <Display::consolePut(int)>
   25d28:	eaffffcc 	b	25c60 <BusRaiderApp::usbKeypressHandlerStatic(unsigned char, unsigned char const*)+0x70>
   25d2c:	0006fca0 	.word	0x0006fca0
   25d30:	00053db0 	.word	0x00053db0
   25d34:	00053e04 	.word	0x00053e04

00025d38 <BusRaiderApp::BusRaiderApp(Display&, UartMaxi&)>:
BusRaiderApp::BusRaiderApp(Display& display, UartMaxi& uart) :
   25d38:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    _display(display), _uart(uart)
   25d3c:	e3a04000 	mov	r4, #0
BusRaiderApp::BusRaiderApp(Display& display, UartMaxi& uart) :
   25d40:	e1a05000 	mov	r5, r0
   25d44:	e1a06002 	mov	r6, r2
   25d48:	e1a07001 	mov	r7, r1
    _display(display), _uart(uart)
   25d4c:	e5c04008 	strb	r4, [r0, #8]
   25d50:	e5804070 	str	r4, [r0, #112]	; 0x70
   25d54:	e2800078 	add	r0, r0, #120	; 0x78
   25d58:	eb0002eb 	bl	2690c <CommandHandler::CommandHandler()>
    _pApp = this;
   25d5c:	e59fc058 	ldr	ip, [pc, #88]	; 25dbc <BusRaiderApp::BusRaiderApp(Display&, UartMaxi&)+0x84>
    _esp32IPAddress[0] = 0;
   25d60:	e2853a19 	add	r3, r5, #102400	; 0x19000
    _display(display), _uart(uart)
   25d64:	e2850906 	add	r0, r5, #98304	; 0x18000
    _esp32LastMachineValid = false;
   25d68:	e2852a1b 	add	r2, r5, #110592	; 0x1b000
    _display(display), _uart(uart)
   25d6c:	e58078a8 	str	r7, [r0, #2216]	; 0x8a8
   25d70:	e58068ac 	str	r6, [r0, #2220]	; 0x8ac
    _pApp = this;
   25d74:	e58c5000 	str	r5, [ip]
    _statusUpdateStartUs = 0;
   25d78:	e5854004 	str	r4, [r5, #4]
    _immediateMode = false;
   25d7c:	e5c54008 	strb	r4, [r5, #8]
    _immediateModeLineLen = 0;
   25d80:	e5854070 	str	r4, [r5, #112]	; 0x70
    _esp32StatusUpdateStartUs = 0;
   25d84:	e5854074 	str	r4, [r5, #116]	; 0x74
    _piStatusCached[0] = 0;
   25d88:	e5c048b0 	strb	r4, [r0, #2224]	; 0x8b0
    _lastActivityTickerState = false;
   25d8c:	e5c54000 	strb	r4, [r5]
}
   25d90:	e1a00005 	mov	r0, r5
    _esp32IPAddress[0] = 0;
   25d94:	e5c34080 	strb	r4, [r3, #128]	; 0x80
    _esp32WifiConnStr[0] = 0;
   25d98:	e5c3409e 	strb	r4, [r3, #158]	; 0x9e
    _esp32WifiSSID[0] = 0;
   25d9c:	e5c340bc 	strb	r4, [r3, #188]	; 0xbc
    _esp32ESP32Version[0] = 0;
   25da0:	e5c34120 	strb	r4, [r3, #288]	; 0x120
    _esp32IPAddressValid = false;
   25da4:	e5c34184 	strb	r4, [r3, #388]	; 0x184
    _esp32StatusLastRxUs = 0;
   25da8:	e5834188 	str	r4, [r3, #392]	; 0x188
    _esp32LastMachineCmd[0] = 0;
   25dac:	e5c3418c 	strb	r4, [r3, #396]	; 0x18c
    _esp32LastMachineValid = false;
   25db0:	e582489c 	str	r4, [r2, #2204]	; 0x89c
    _esp32LastMachineReqUs = 0;
   25db4:	e58248a0 	str	r4, [r2, #2208]	; 0x8a0
}
   25db8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   25dbc:	0006fca0 	.word	0x0006fca0

00025dc0 <BusRaiderApp::init()>:
    _statusUpdateStartUs = 0;
   25dc0:	e3a03000 	mov	r3, #0
{
   25dc4:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    _piStatusCached[0] = 0;
   25dc8:	e280e906 	add	lr, r0, #98304	; 0x18000
    _statusUpdateStartUs = 0;
   25dcc:	e5803004 	str	r3, [r0, #4]
    _immediateMode = false;
   25dd0:	e5c03008 	strb	r3, [r0, #8]
    _immediateModeLineLen = 0;
   25dd4:	e5803070 	str	r3, [r0, #112]	; 0x70
    _esp32StatusUpdateStartUs = 0;
   25dd8:	e5803074 	str	r3, [r0, #116]	; 0x74
    _esp32IPAddress[0] = 0;
   25ddc:	e2802a19 	add	r2, r0, #102400	; 0x19000
    _piStatusCached[0] = 0;
   25de0:	e5ce38b0 	strb	r3, [lr, #2224]	; 0x8b0
    _esp32LastMachineValid = false;
   25de4:	e2801a1b 	add	r1, r0, #110592	; 0x1b000
    static void commsSocketEnable(int commsSocket, bool enable);

    // Callback when command handler wants to send on serial channel to ESP32
    void setPutToSerialCallback(CmdHandlerPutToSerialFnType* pPutToSerialFunction)
    {
        _pPutToHDLCSerialFunction = pPutToSerialFunction;
   25de8:	e59fe038 	ldr	lr, [pc, #56]	; 25e28 <BusRaiderApp::init()+0x68>
   25dec:	e59fc038 	ldr	ip, [pc, #56]	; 25e2c <BusRaiderApp::init()+0x6c>
    _lastActivityTickerState = false;
   25df0:	e5c03000 	strb	r3, [r0]
    _esp32IPAddress[0] = 0;
   25df4:	e5c23080 	strb	r3, [r2, #128]	; 0x80
    _esp32WifiConnStr[0] = 0;
   25df8:	e5c2309e 	strb	r3, [r2, #158]	; 0x9e
    _esp32WifiSSID[0] = 0;
   25dfc:	e5c230bc 	strb	r3, [r2, #188]	; 0xbc
    _esp32ESP32Version[0] = 0;
   25e00:	e5c23120 	strb	r3, [r2, #288]	; 0x120
    _esp32IPAddressValid = false;
   25e04:	e5c23184 	strb	r3, [r2, #388]	; 0x184
    _esp32StatusLastRxUs = 0;
   25e08:	e5823188 	str	r3, [r2, #392]	; 0x188
    _esp32LastMachineCmd[0] = 0;
   25e0c:	e5c2318c 	strb	r3, [r2, #396]	; 0x18c
    _esp32LastMachineValid = false;
   25e10:	e581389c 	str	r3, [r1, #2204]	; 0x89c
    _esp32LastMachineReqUs = 0;
   25e14:	e58138a0 	str	r3, [r1, #2208]	; 0x8a0
   25e18:	e58ce000 	str	lr, [ip]
    _commandHandler.commsSocketAdd(_commsSocket);
   25e1c:	e59f000c 	ldr	r0, [pc, #12]	; 25e30 <BusRaiderApp::init()+0x70>
}
   25e20:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
    _commandHandler.commsSocketAdd(_commsSocket);
   25e24:	ea0002d2 	b	26974 <CommandHandler::commsSocketAdd(CommsSocketInfo&)>
   25e28:	00025bb4 	.word	0x00025bb4
   25e2c:	0006fca8 	.word	0x0006fca8
   25e30:	00062a9c 	.word	0x00062a9c

00025e34 <BusRaiderApp::clear()>:
    _statusUpdateStartUs = 0;
   25e34:	e3a03000 	mov	r3, #0
    _esp32IPAddress[0] = 0;
   25e38:	e2802a19 	add	r2, r0, #102400	; 0x19000
    _esp32LastMachineValid = false;
   25e3c:	e2801a1b 	add	r1, r0, #110592	; 0x1b000
    _piStatusCached[0] = 0;
   25e40:	e280c906 	add	ip, r0, #98304	; 0x18000
    _statusUpdateStartUs = 0;
   25e44:	e5803004 	str	r3, [r0, #4]
    _immediateMode = false;
   25e48:	e5c03008 	strb	r3, [r0, #8]
    _immediateModeLineLen = 0;
   25e4c:	e5803070 	str	r3, [r0, #112]	; 0x70
    _esp32StatusUpdateStartUs = 0;
   25e50:	e5803074 	str	r3, [r0, #116]	; 0x74
    _piStatusCached[0] = 0;
   25e54:	e5cc38b0 	strb	r3, [ip, #2224]	; 0x8b0
    _lastActivityTickerState = false;
   25e58:	e5c03000 	strb	r3, [r0]
    _esp32IPAddress[0] = 0;
   25e5c:	e5c23080 	strb	r3, [r2, #128]	; 0x80
    _esp32WifiConnStr[0] = 0;
   25e60:	e5c2309e 	strb	r3, [r2, #158]	; 0x9e
    _esp32WifiSSID[0] = 0;
   25e64:	e5c230bc 	strb	r3, [r2, #188]	; 0xbc
    _esp32ESP32Version[0] = 0;
   25e68:	e5c23120 	strb	r3, [r2, #288]	; 0x120
    _esp32IPAddressValid = false;
   25e6c:	e5c23184 	strb	r3, [r2, #388]	; 0x184
    _esp32StatusLastRxUs = 0;
   25e70:	e5823188 	str	r3, [r2, #392]	; 0x188
    _esp32LastMachineCmd[0] = 0;
   25e74:	e5c2318c 	strb	r3, [r2, #396]	; 0x18c
    _esp32LastMachineValid = false;
   25e78:	e581389c 	str	r3, [r1, #2204]	; 0x89c
    _esp32LastMachineReqUs = 0;
   25e7c:	e58138a0 	str	r3, [r1, #2208]	; 0x8a0
}
   25e80:	e12fff1e 	bx	lr

00025e84 <BusRaiderApp::initUSB()>:
{
   25e84:	e92d4010 	push	{r4, lr}
   25e88:	e1a04000 	mov	r4, r0
    if (USPiInitialize()) 
   25e8c:	eb005ea9 	bl	3d938 <USPiInitialize>
   25e90:	e2502000 	subs	r2, r0, #0
   25e94:	0a00000b 	beq	25ec8 <BusRaiderApp::initUSB()+0x44>
        if (USPiKeyboardAvailable()) 
   25e98:	eb005f42 	bl	3dba8 <USPiKeyboardAvailable>
   25e9c:	e3500000 	cmp	r0, #0
   25ea0:	0a00000e 	beq	25ee0 <BusRaiderApp::initUSB()+0x5c>
            USPiKeyboardRegisterKeyStatusHandlerRaw(usbKeypressHandlerStatic);
   25ea4:	e59f0050 	ldr	r0, [pc, #80]	; 25efc <BusRaiderApp::initUSB()+0x78>
            _display.statusPut(Display::STATUS_FIELD_KEYBOARD, Display::STATUS_HILITE, "Keyboard OK, F2 for Settings");
   25ea8:	e2844906 	add	r4, r4, #98304	; 0x18000
            USPiKeyboardRegisterKeyStatusHandlerRaw(usbKeypressHandlerStatic);
   25eac:	eb005fa9 	bl	3dd58 <USPiKeyboardRegisterKeyStatusHandlerRaw>
            _display.statusPut(Display::STATUS_FIELD_KEYBOARD, Display::STATUS_HILITE, "Keyboard OK, F2 for Settings");
   25eb0:	e59408a8 	ldr	r0, [r4, #2216]	; 0x8a8
   25eb4:	e59f3044 	ldr	r3, [pc, #68]	; 25f00 <BusRaiderApp::initUSB()+0x7c>
   25eb8:	e3a02002 	mov	r2, #2
}
   25ebc:	e8bd4010 	pop	{r4, lr}
            _display.statusPut(Display::STATUS_FIELD_KEYBOARD, Display::STATUS_HILITE, "Keyboard OK, F2 for Settings");
   25ec0:	e3a01008 	mov	r1, #8
   25ec4:	ea003468 	b	3306c <Display::statusPut(int, int, char const*)>
        _display.statusPut(Display::STATUS_FIELD_KEYBOARD, Display::STATUS_NORMAL, "USB Init Fail - No Keyboard");
   25ec8:	e2844906 	add	r4, r4, #98304	; 0x18000
   25ecc:	e59408a8 	ldr	r0, [r4, #2216]	; 0x8a8
   25ed0:	e59f302c 	ldr	r3, [pc, #44]	; 25f04 <BusRaiderApp::initUSB()+0x80>
   25ed4:	e3a01008 	mov	r1, #8
}
   25ed8:	e8bd4010 	pop	{r4, lr}
        _display.statusPut(Display::STATUS_FIELD_KEYBOARD, Display::STATUS_NORMAL, "USB Init Fail - No Keyboard");
   25edc:	ea003462 	b	3306c <Display::statusPut(int, int, char const*)>
            _display.statusPut(Display::STATUS_FIELD_KEYBOARD, Display::STATUS_FAIL, "Keyboard Not Found");
   25ee0:	e2844906 	add	r4, r4, #98304	; 0x18000
   25ee4:	e59408a8 	ldr	r0, [r4, #2216]	; 0x8a8
   25ee8:	e59f3018 	ldr	r3, [pc, #24]	; 25f08 <BusRaiderApp::initUSB()+0x84>
   25eec:	e3a02001 	mov	r2, #1
}
   25ef0:	e8bd4010 	pop	{r4, lr}
            _display.statusPut(Display::STATUS_FIELD_KEYBOARD, Display::STATUS_FAIL, "Keyboard Not Found");
   25ef4:	e3a01008 	mov	r1, #8
   25ef8:	ea00345b 	b	3306c <Display::statusPut(int, int, char const*)>
   25efc:	00025bf0 	.word	0x00025bf0
   25f00:	00053e20 	.word	0x00053e20
   25f04:	00053e54 	.word	0x00053e54
   25f08:	00053e40 	.word	0x00053e40

00025f0c <BusRaiderApp::statusDisplayUpdate()>:
{
   25f0c:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
   25f10:	e1a05000 	mov	r5, r0
   25f14:	e24dd084 	sub	sp, sp, #132	; 0x84
    if (isTimeout(micros(), _statusUpdateStartUs, STATUS_UPDATE_TIME_MS * 1000)) 
   25f18:	eb00421e 	bl	36798 <micros>
   25f1c:	e5951004 	ldr	r1, [r5, #4]
   25f20:	e59f239c 	ldr	r2, [pc, #924]	; 262c4 <BusRaiderApp::statusDisplayUpdate()+0x3b8>
   25f24:	eb004230 	bl	367ec <isTimeout>
   25f28:	e3500000 	cmp	r0, #0
   25f2c:	1a000001 	bne	25f38 <BusRaiderApp::statusDisplayUpdate()+0x2c>
}
   25f30:	e28dd084 	add	sp, sp, #132	; 0x84
   25f34:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
        _statusUpdateStartUs = micros();
   25f38:	eb004216 	bl	36798 <micros>
        if (strlen(_esp32ESP32Version) == 0)
   25f3c:	e2854a19 	add	r4, r5, #102400	; 0x19000
        _statusUpdateStartUs = micros();
   25f40:	e5850004 	str	r0, [r5, #4]
        strlcpy(statusStr, "ESP32 Version: ", MAX_STATUS_STR_LEN);
   25f44:	e3a02032 	mov	r2, #50	; 0x32
   25f48:	e28d004c 	add	r0, sp, #76	; 0x4c
   25f4c:	e59f1374 	ldr	r1, [pc, #884]	; 262c8 <BusRaiderApp::statusDisplayUpdate()+0x3bc>
   25f50:	eb009d9c 	bl	4d5c8 <strlcpy>
        if (strlen(_esp32ESP32Version) == 0)
   25f54:	e5d43120 	ldrb	r3, [r4, #288]	; 0x120
            strlcat(statusStr, "Not Connected!        ", MAX_STATUS_STR_LEN);
   25f58:	e3a02032 	mov	r2, #50	; 0x32
        if (strlen(_esp32ESP32Version) == 0)
   25f5c:	e3530000 	cmp	r3, #0
   25f60:	0a0000ad 	beq	2621c <BusRaiderApp::statusDisplayUpdate()+0x310>
            strlcat(statusStr, _esp32ESP32Version, MAX_STATUS_STR_LEN);
   25f64:	e2841e12 	add	r1, r4, #288	; 0x120
   25f68:	e28d004c 	add	r0, sp, #76	; 0x4c
   25f6c:	eb009d65 	bl	4d508 <strlcat>
            _display.statusPut(Display::STATUS_FIELD_ESP_VERSION, Display::STATUS_NORMAL, statusStr);
   25f70:	e2856906 	add	r6, r5, #98304	; 0x18000
            strlcat(statusStr, "              ", MAX_STATUS_STR_LEN);
   25f74:	e3a02032 	mov	r2, #50	; 0x32
   25f78:	e59f134c 	ldr	r1, [pc, #844]	; 262cc <BusRaiderApp::statusDisplayUpdate()+0x3c0>
   25f7c:	e28d004c 	add	r0, sp, #76	; 0x4c
   25f80:	eb009d60 	bl	4d508 <strlcat>
            _display.statusPut(Display::STATUS_FIELD_ESP_VERSION, Display::STATUS_NORMAL, statusStr);
   25f84:	e59608a8 	ldr	r0, [r6, #2216]	; 0x8a8
   25f88:	e28d304c 	add	r3, sp, #76	; 0x4c
   25f8c:	e3a02000 	mov	r2, #0
   25f90:	e3a01002 	mov	r1, #2
   25f94:	eb003434 	bl	3306c <Display::statusPut(int, int, char const*)>
        statusStr[0] = 0;
   25f98:	e3a02000 	mov	r2, #0
        switch(*_esp32WifiConnStr)
   25f9c:	e5d4309e 	ldrb	r3, [r4, #158]	; 0x9e
        statusStr[0] = 0;
   25fa0:	e5cd204c 	strb	r2, [sp, #76]	; 0x4c
        switch(*_esp32WifiConnStr)
   25fa4:	e3530043 	cmp	r3, #67	; 0x43
                strlcpy(statusStr, "WiFi IP: ", MAX_STATUS_STR_LEN); 
   25fa8:	e3a02032 	mov	r2, #50	; 0x32
        switch(*_esp32WifiConnStr)
   25fac:	1a0000a7 	bne	26250 <BusRaiderApp::statusDisplayUpdate()+0x344>
                strlcpy(statusStr, "WiFi IP: ", MAX_STATUS_STR_LEN); 
   25fb0:	e59f1318 	ldr	r1, [pc, #792]	; 262d0 <BusRaiderApp::statusDisplayUpdate()+0x3c4>
   25fb4:	e28d004c 	add	r0, sp, #76	; 0x4c
   25fb8:	eb009d82 	bl	4d5c8 <strlcpy>
                if (_esp32IPAddressValid)
   25fbc:	e5d43184 	ldrb	r3, [r4, #388]	; 0x184
   25fc0:	e3530000 	cmp	r3, #0
   25fc4:	1a0000b9 	bne	262b0 <BusRaiderApp::statusDisplayUpdate()+0x3a4>
                strlcat(statusStr, "        ", MAX_STATUS_STR_LEN);
   25fc8:	e3a02032 	mov	r2, #50	; 0x32
   25fcc:	e59f1300 	ldr	r1, [pc, #768]	; 262d4 <BusRaiderApp::statusDisplayUpdate()+0x3c8>
   25fd0:	e28d004c 	add	r0, sp, #76	; 0x4c
   25fd4:	eb009d4b 	bl	4d508 <strlcat>
                _display.statusPut(Display::STATUS_FIELD_IP_ADDR, Display::STATUS_NORMAL, statusStr);
   25fd8:	e28d304c 	add	r3, sp, #76	; 0x4c
   25fdc:	e3a02000 	mov	r2, #0
   25fe0:	e3a01003 	mov	r1, #3
   25fe4:	e59608a8 	ldr	r0, [r6, #2216]	; 0x8a8
   25fe8:	eb00341f 	bl	3306c <Display::statusPut(int, int, char const*)>
        strlcpy(statusStr, "M/C: ", MAX_STATUS_STR_LEN);
   25fec:	e3a02032 	mov	r2, #50	; 0x32
   25ff0:	e59f12e0 	ldr	r1, [pc, #736]	; 262d8 <BusRaiderApp::statusDisplayUpdate()+0x3cc>
   25ff4:	e28d004c 	add	r0, sp, #76	; 0x4c
   25ff8:	eb009d72 	bl	4d5c8 <strlcpy>
        strlcat(statusStr, McManager::getMachineName(), MAX_STATUS_STR_LEN);
   25ffc:	eb001f30 	bl	2dcc4 <McManager::getMachineName()>
   26000:	e3a02032 	mov	r2, #50	; 0x32
   26004:	e1a01000 	mov	r1, r0
   26008:	e28d004c 	add	r0, sp, #76	; 0x4c
   2600c:	eb009d3d 	bl	4d508 <strlcat>
        strlcat(statusStr, "                       ", MAX_STATUS_STR_LEN);
   26010:	e3a02032 	mov	r2, #50	; 0x32
   26014:	e59f12c0 	ldr	r1, [pc, #704]	; 262dc <BusRaiderApp::statusDisplayUpdate()+0x3d0>
   26018:	e28d004c 	add	r0, sp, #76	; 0x4c
   2601c:	eb009d39 	bl	4d508 <strlcat>
        _display.statusPut(Display::STATUS_FIELD_CUR_MACHINE, Display::STATUS_NORMAL, statusStr);
   26020:	e28d304c 	add	r3, sp, #76	; 0x4c
   26024:	e3a02000 	mov	r2, #0
   26028:	e3a01004 	mov	r1, #4
   2602c:	e59608a8 	ldr	r0, [r6, #2216]	; 0x8a8
   26030:	eb00340d 	bl	3306c <Display::statusPut(int, int, char const*)>
        int clockSpeed = McManager::getMachineClock();
   26034:	eb001f9f 	bl	2deb8 <McManager::getMachineClock()>
        int mhz = clockSpeed/1000000;
   26038:	e59f82a0 	ldr	r8, [pc, #672]	; 262e0 <BusRaiderApp::statusDisplayUpdate()+0x3d4>
   2603c:	e1a02fc0 	asr	r2, r0, #31
   26040:	e0c98890 	smull	r8, r9, r0, r8
   26044:	e0622949 	rsb	r2, r2, r9, asr #18
        int khz = (clockSpeed - mhz*1000000)/1000;
   26048:	e0623282 	rsb	r3, r2, r2, lsl #5
   2604c:	e0633303 	rsb	r3, r3, r3, lsl #6
   26050:	e0823183 	add	r3, r2, r3, lsl #3
   26054:	e59f8288 	ldr	r8, [pc, #648]	; 262e4 <BusRaiderApp::statusDisplayUpdate()+0x3d8>
   26058:	e0400303 	sub	r0, r0, r3, lsl #6
   2605c:	e0c98890 	smull	r8, r9, r0, r8
   26060:	e1a00fc0 	asr	r0, r0, #31
   26064:	e0600349 	rsb	r0, r0, r9, asr #6
        ee_sprintf(statusStr, "Clock: %d.%s%s%dMHz",
   26068:	e3500063 	cmp	r0, #99	; 0x63
   2606c:	ca000074 	bgt	26244 <BusRaiderApp::statusDisplayUpdate()+0x338>
   26070:	e3500009 	cmp	r0, #9
   26074:	e59f326c 	ldr	r3, [pc, #620]	; 262e8 <BusRaiderApp::statusDisplayUpdate()+0x3dc>
   26078:	c59f126c 	ldrgt	r1, [pc, #620]	; 262ec <BusRaiderApp::statusDisplayUpdate()+0x3e0>
   2607c:	d1a01003 	movle	r1, r3
   26080:	e58d0004 	str	r0, [sp, #4]
   26084:	e58d1000 	str	r1, [sp]
   26088:	e28d004c 	add	r0, sp, #76	; 0x4c
   2608c:	e59f125c 	ldr	r1, [pc, #604]	; 262f0 <BusRaiderApp::statusDisplayUpdate()+0x3e4>
   26090:	ebfff345 	bl	22dac <ee_sprintf>
        strlcat(statusStr, "    ", MAX_STATUS_STR_LEN);
   26094:	e3a02032 	mov	r2, #50	; 0x32
   26098:	e59f1254 	ldr	r1, [pc, #596]	; 262f4 <BusRaiderApp::statusDisplayUpdate()+0x3e8>
   2609c:	e28d004c 	add	r0, sp, #76	; 0x4c
   260a0:	eb009d18 	bl	4d508 <strlcat>
        _display.statusPut(Display::STATUS_FIELD_MACHINES, Display::STATUS_NORMAL, statusStr);
   260a4:	e28d304c 	add	r3, sp, #76	; 0x4c
   260a8:	e3a02000 	mov	r2, #0
   260ac:	e3a01005 	mov	r1, #5
   260b0:	e59608a8 	ldr	r0, [r6, #2216]	; 0x8a8
   260b4:	eb0033ec 	bl	3306c <Display::statusPut(int, int, char const*)>
        statusStr[0] = 0;
   260b8:	e3a03000 	mov	r3, #0
        strlcpy(statusStr, "Bus: ", MAX_STATUS_STR_LEN);
   260bc:	e3a02032 	mov	r2, #50	; 0x32
   260c0:	e59f1230 	ldr	r1, [pc, #560]	; 262f8 <BusRaiderApp::statusDisplayUpdate()+0x3ec>
   260c4:	e28d004c 	add	r0, sp, #76	; 0x4c
        statusStr[0] = 0;
   260c8:	e5cd304c 	strb	r3, [sp, #76]	; 0x4c
        strlcpy(statusStr, "Bus: ", MAX_STATUS_STR_LEN);
   260cc:	eb009d3d 	bl	4d5c8 <strlcpy>
        if (TargetTracker::isTrackingActive())
   260d0:	eb0052c5 	bl	3abec <TargetTracker::isTrackingActive()>
   260d4:	e3500000 	cmp	r0, #0
   260d8:	0a000065 	beq	26274 <BusRaiderApp::statusDisplayUpdate()+0x368>
            strlcat(statusStr, "Debug       ", MAX_STATUS_STR_LEN);
   260dc:	e3a02032 	mov	r2, #50	; 0x32
   260e0:	e59f1214 	ldr	r1, [pc, #532]	; 262fc <BusRaiderApp::statusDisplayUpdate()+0x3f0>
   260e4:	e28d004c 	add	r0, sp, #76	; 0x4c
   260e8:	eb009d06 	bl	4d508 <strlcat>
        if (BusAccess::isUnderControl())
   260ec:	eb004a01 	bl	388f8 <BusAccess::isUnderControl()>
   260f0:	e3500000 	cmp	r0, #0
   260f4:	1a000068 	bne	2629c <BusRaiderApp::statusDisplayUpdate()+0x390>
        _display.statusPut(Display::STATUS_FIELD_BUS_ACCESS, Display::STATUS_NORMAL, statusStr);
   260f8:	e28d304c 	add	r3, sp, #76	; 0x4c
   260fc:	e3a02000 	mov	r2, #0
   26100:	e3a01006 	mov	r1, #6
   26104:	e59608a8 	ldr	r0, [r6, #2216]	; 0x8a8
   26108:	eb0033d7 	bl	3306c <Display::statusPut(int, int, char const*)>
        int refreshRate = McManager::getDisplayRefreshRate();
   2610c:	eb002122 	bl	2e59c <McManager::getDisplayRefreshRate()>
   26110:	e1a04000 	mov	r4, r0
        strlcpy(refreshStr, _lastActivityTickerState ? "| " : "- ", MAX_REFRESH_STR_LEN);
   26114:	e5d51000 	ldrb	r1, [r5]
   26118:	e59f31e0 	ldr	r3, [pc, #480]	; 26300 <BusRaiderApp::statusDisplayUpdate()+0x3f4>
   2611c:	e59f21e0 	ldr	r2, [pc, #480]	; 26304 <BusRaiderApp::statusDisplayUpdate()+0x3f8>
   26120:	e3510000 	cmp	r1, #0
   26124:	11a01002 	movne	r1, r2
   26128:	01a01003 	moveq	r1, r3
   2612c:	e3a02028 	mov	r2, #40	; 0x28
   26130:	e28d0020 	add	r0, sp, #32
   26134:	eb009d23 	bl	4d5c8 <strlcpy>
        _lastActivityTickerState = !_lastActivityTickerState;
   26138:	e5d53000 	ldrb	r3, [r5]
        strlcat(refreshStr, refreshText, MAX_REFRESH_STR_LEN);
   2613c:	e3a02028 	mov	r2, #40	; 0x28
        _lastActivityTickerState = !_lastActivityTickerState;
   26140:	e2233001 	eor	r3, r3, #1
   26144:	e5c53000 	strb	r3, [r5]
        strlcat(refreshStr, refreshText, MAX_REFRESH_STR_LEN);
   26148:	e59f11b8 	ldr	r1, [pc, #440]	; 26308 <BusRaiderApp::statusDisplayUpdate()+0x3fc>
   2614c:	e28d0020 	add	r0, sp, #32
   26150:	eb009cec 	bl	4d508 <strlcat>
        rditoa(refreshRate, rateStr, MAX_REFRESH_STR_LEN, 10);
   26154:	e3a0300a 	mov	r3, #10
   26158:	e1a00004 	mov	r0, r4
   2615c:	e28d100c 	add	r1, sp, #12
   26160:	e3a02028 	mov	r2, #40	; 0x28
   26164:	ebfffb64 	bl	24efc <rditoa>
        strlcat(refreshStr, (char*)rateStr, MAX_REFRESH_STR_LEN);
   26168:	e28d100c 	add	r1, sp, #12
   2616c:	e3a02028 	mov	r2, #40	; 0x28
   26170:	e28d0020 	add	r0, sp, #32
   26174:	eb009ce3 	bl	4d508 <strlcat>
        strlcat(refreshStr, "fps     ", MAX_REFRESH_STR_LEN);
   26178:	e3a02028 	mov	r2, #40	; 0x28
   2617c:	e59f1188 	ldr	r1, [pc, #392]	; 2630c <BusRaiderApp::statusDisplayUpdate()+0x400>
   26180:	e28d0020 	add	r0, sp, #32
   26184:	eb009cdf 	bl	4d508 <strlcat>
        _display.statusPut(Display::STATUS_FIELD_REFRESH_RATE, Display::STATUS_NORMAL, refreshStr);
   26188:	e28d3020 	add	r3, sp, #32
   2618c:	e3a02000 	mov	r2, #0
   26190:	e3a01007 	mov	r1, #7
   26194:	e59608a8 	ldr	r0, [r6, #2216]	; 0x8a8
   26198:	eb0033b3 	bl	3306c <Display::statusPut(int, int, char const*)>
        strcpy(statusStr, "");
   2619c:	e3a03000 	mov	r3, #0
        for (int i = 0; i < ISR_ASSERT_NUM_CODES; i++)
   261a0:	e1a04003 	mov	r4, r3
                ee_sprintf(refreshStr, "[%c]=%d,", i+'A'-1, cnt);
   261a4:	e59f7164 	ldr	r7, [pc, #356]	; 26310 <BusRaiderApp::statusDisplayUpdate()+0x404>
        strcpy(statusStr, "");
   261a8:	e5cd304c 	strb	r3, [sp, #76]	; 0x4c
            int cnt = BusAccess::isrAssertGetCount(i);
   261ac:	e1a00004 	mov	r0, r4
   261b0:	eb004f85 	bl	39fcc <BusAccess::isrAssertGetCount(int)>
            if (cnt > 0)
   261b4:	e2503000 	subs	r3, r0, #0
                ee_sprintf(refreshStr, "[%c]=%d,", i+'A'-1, cnt);
   261b8:	e2842040 	add	r2, r4, #64	; 0x40
        for (int i = 0; i < ISR_ASSERT_NUM_CODES; i++)
   261bc:	e2844001 	add	r4, r4, #1
            if (cnt > 0)
   261c0:	da000006 	ble	261e0 <BusRaiderApp::statusDisplayUpdate()+0x2d4>
                ee_sprintf(refreshStr, "[%c]=%d,", i+'A'-1, cnt);
   261c4:	e1a01007 	mov	r1, r7
   261c8:	e28d0020 	add	r0, sp, #32
   261cc:	ebfff2f6 	bl	22dac <ee_sprintf>
                strlcat(statusStr, refreshStr, MAX_STATUS_STR_LEN);
   261d0:	e3a02032 	mov	r2, #50	; 0x32
   261d4:	e28d1020 	add	r1, sp, #32
   261d8:	e28d004c 	add	r0, sp, #76	; 0x4c
   261dc:	eb009cc9 	bl	4d508 <strlcat>
        for (int i = 0; i < ISR_ASSERT_NUM_CODES; i++)
   261e0:	e354000c 	cmp	r4, #12
   261e4:	1afffff0 	bne	261ac <BusRaiderApp::statusDisplayUpdate()+0x2a0>
        strlcat(statusStr, "                                    ", MAX_STATUS_STR_LEN);
   261e8:	e3a02032 	mov	r2, #50	; 0x32
   261ec:	e59f1120 	ldr	r1, [pc, #288]	; 26314 <BusRaiderApp::statusDisplayUpdate()+0x408>
   261f0:	e28d004c 	add	r0, sp, #76	; 0x4c
   261f4:	eb009cc3 	bl	4d508 <strlcat>
        _display.statusPut(Display::STATUS_FIELD_ASSERTS, Display::STATUS_FAIL, statusStr);
   261f8:	e28d304c 	add	r3, sp, #76	; 0x4c
   261fc:	e59608a8 	ldr	r0, [r6, #2216]	; 0x8a8
   26200:	e3a02001 	mov	r2, #1
   26204:	e3a01009 	mov	r1, #9
   26208:	eb003397 	bl	3306c <Display::statusPut(int, int, char const*)>
        _statusUpdateStartUs = micros();
   2620c:	eb004161 	bl	36798 <micros>
   26210:	e5850004 	str	r0, [r5, #4]
}
   26214:	e28dd084 	add	sp, sp, #132	; 0x84
   26218:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
            strlcat(statusStr, "Not Connected!        ", MAX_STATUS_STR_LEN);
   2621c:	e59f10f4 	ldr	r1, [pc, #244]	; 26318 <BusRaiderApp::statusDisplayUpdate()+0x40c>
   26220:	e28d004c 	add	r0, sp, #76	; 0x4c
            _display.statusPut(Display::STATUS_FIELD_ESP_VERSION, Display::STATUS_FAIL, statusStr);
   26224:	e2856906 	add	r6, r5, #98304	; 0x18000
            strlcat(statusStr, "Not Connected!        ", MAX_STATUS_STR_LEN);
   26228:	eb009cb6 	bl	4d508 <strlcat>
            _display.statusPut(Display::STATUS_FIELD_ESP_VERSION, Display::STATUS_FAIL, statusStr);
   2622c:	e59608a8 	ldr	r0, [r6, #2216]	; 0x8a8
   26230:	e28d304c 	add	r3, sp, #76	; 0x4c
   26234:	e3a02001 	mov	r2, #1
   26238:	e3a01002 	mov	r1, #2
   2623c:	eb00338a 	bl	3306c <Display::statusPut(int, int, char const*)>
   26240:	eaffff54 	b	25f98 <BusRaiderApp::statusDisplayUpdate()+0x8c>
        ee_sprintf(statusStr, "Clock: %d.%s%s%dMHz",
   26244:	e59f30a0 	ldr	r3, [pc, #160]	; 262ec <BusRaiderApp::statusDisplayUpdate()+0x3e0>
   26248:	e1a01003 	mov	r1, r3
   2624c:	eaffff8b 	b	26080 <BusRaiderApp::statusDisplayUpdate()+0x174>
                strlcpy(statusStr, "WiFi not connected     ", MAX_STATUS_STR_LEN);
   26250:	e59f10c4 	ldr	r1, [pc, #196]	; 2631c <BusRaiderApp::statusDisplayUpdate()+0x410>
   26254:	e28d004c 	add	r0, sp, #76	; 0x4c
   26258:	eb009cda 	bl	4d5c8 <strlcpy>
                _display.statusPut(Display::STATUS_FIELD_IP_ADDR, Display::STATUS_FAIL, statusStr);
   2625c:	e28d304c 	add	r3, sp, #76	; 0x4c
   26260:	e3a02001 	mov	r2, #1
   26264:	e3a01003 	mov	r1, #3
   26268:	e59608a8 	ldr	r0, [r6, #2216]	; 0x8a8
   2626c:	eb00337e 	bl	3306c <Display::statusPut(int, int, char const*)>
   26270:	eaffff5d 	b	25fec <BusRaiderApp::statusDisplayUpdate()+0xe0>
        else if (BusAccess::waitIsHeld())
   26274:	eb00436e 	bl	37034 <BusAccess::waitIsHeld()>
   26278:	e3500000 	cmp	r0, #0
            strlcat(statusStr, "Paused      ", MAX_STATUS_STR_LEN);
   2627c:	159f109c 	ldrne	r1, [pc, #156]	; 26320 <BusRaiderApp::statusDisplayUpdate()+0x414>
            strlcat(statusStr, "Free Running", MAX_STATUS_STR_LEN);
   26280:	059f109c 	ldreq	r1, [pc, #156]	; 26324 <BusRaiderApp::statusDisplayUpdate()+0x418>
            strlcat(statusStr, "Paused      ", MAX_STATUS_STR_LEN);
   26284:	e3a02032 	mov	r2, #50	; 0x32
            strlcat(statusStr, "Free Running", MAX_STATUS_STR_LEN);
   26288:	e28d004c 	add	r0, sp, #76	; 0x4c
   2628c:	eb009c9d 	bl	4d508 <strlcat>
        if (BusAccess::isUnderControl())
   26290:	eb004998 	bl	388f8 <BusAccess::isUnderControl()>
   26294:	e3500000 	cmp	r0, #0
   26298:	0affff96 	beq	260f8 <BusRaiderApp::statusDisplayUpdate()+0x1ec>
            strlcat(statusStr, "PiControl   ", MAX_STATUS_STR_LEN);
   2629c:	e3a02032 	mov	r2, #50	; 0x32
   262a0:	e59f1080 	ldr	r1, [pc, #128]	; 26328 <BusRaiderApp::statusDisplayUpdate()+0x41c>
   262a4:	e28d004c 	add	r0, sp, #76	; 0x4c
   262a8:	eb009c96 	bl	4d508 <strlcat>
   262ac:	eaffff91 	b	260f8 <BusRaiderApp::statusDisplayUpdate()+0x1ec>
                    strlcat(statusStr, _esp32IPAddress, MAX_STATUS_STR_LEN);
   262b0:	e2841080 	add	r1, r4, #128	; 0x80
   262b4:	e3a02032 	mov	r2, #50	; 0x32
   262b8:	e28d004c 	add	r0, sp, #76	; 0x4c
   262bc:	eb009c91 	bl	4d508 <strlcat>
   262c0:	eaffff40 	b	25fc8 <BusRaiderApp::statusDisplayUpdate()+0xbc>
   262c4:	000f4240 	.word	0x000f4240
   262c8:	00053e78 	.word	0x00053e78
   262cc:	00053ea0 	.word	0x00053ea0
   262d0:	00053eb0 	.word	0x00053eb0
   262d4:	00053f90 	.word	0x00053f90
   262d8:	00053ed4 	.word	0x00053ed4
   262dc:	00053edc 	.word	0x00053edc
   262e0:	431bde83 	.word	0x431bde83
   262e4:	10624dd3 	.word	0x10624dd3
   262e8:	000563cc 	.word	0x000563cc
   262ec:	00053e00 	.word	0x00053e00
   262f0:	00053ef4 	.word	0x00053ef4
   262f4:	00053f94 	.word	0x00053f94
   262f8:	00053f08 	.word	0x00053f08
   262fc:	00053f10 	.word	0x00053f10
   26300:	00053e74 	.word	0x00053e74
   26304:	00053e70 	.word	0x00053e70
   26308:	00053f50 	.word	0x00053f50
   2630c:	00053f5c 	.word	0x00053f5c
   26310:	00053f68 	.word	0x00053f68
   26314:	00053f74 	.word	0x00053f74
   26318:	00053e88 	.word	0x00053e88
   2631c:	00053ebc 	.word	0x00053ebc
   26320:	00053f20 	.word	0x00053f20
   26324:	00053f30 	.word	0x00053f30
   26328:	00053f40 	.word	0x00053f40

0002632c <BusRaiderApp::service()>:
{
   2632c:	e92d4070 	push	{r4, r5, r6, lr}
   26330:	e1a06000 	mov	r6, r0
   26334:	e24dde7d 	sub	sp, sp, #2000	; 0x7d0
   26338:	e24dd008 	sub	sp, sp, #8
    if (isTimeout(micros(), _esp32StatusUpdateStartUs, PI_TO_ESP32_STATUS_UPDATE_RATE_MS * 1000)) 
   2633c:	eb004115 	bl	36798 <micros>
   26340:	e5961074 	ldr	r1, [r6, #116]	; 0x74
   26344:	e59f2174 	ldr	r2, [pc, #372]	; 264c0 <BusRaiderApp::service()+0x194>
   26348:	eb004127 	bl	367ec <isTimeout>
   2634c:	e3500000 	cmp	r0, #0
   26350:	0a000005 	beq	2636c <BusRaiderApp::service()+0x40>
    }

    // File transfer
    static bool isFileTransferInProgress()
    {
        return _pSingletonCommandHandler->_pReceivedFileDataPtr != NULL;
   26354:	e59f3168 	ldr	r3, [pc, #360]	; 264c4 <BusRaiderApp::service()+0x198>
   26358:	e5933000 	ldr	r3, [r3]
   2635c:	e2833906 	add	r3, r3, #98304	; 0x18000
        if (!_commandHandler.isFileTransferInProgress())
   26360:	e5934820 	ldr	r4, [r3, #2080]	; 0x820
   26364:	e3540000 	cmp	r4, #0
   26368:	0a000037 	beq	2644c <BusRaiderApp::service()+0x120>
    if (isTimeout(micros(), _esp32StatusLastRxUs, ESP32_TO_PI_STATUS_UPDATE_MAX_MS * 1000))
   2636c:	e2864a19 	add	r4, r6, #102400	; 0x19000
   26370:	eb004108 	bl	36798 <micros>
   26374:	e5941188 	ldr	r1, [r4, #392]	; 0x188
   26378:	e59f2148 	ldr	r2, [pc, #328]	; 264c8 <BusRaiderApp::service()+0x19c>
   2637c:	eb00411a 	bl	367ec <isTimeout>
   26380:	e3500000 	cmp	r0, #0
   26384:	0a000007 	beq	263a8 <BusRaiderApp::service()+0x7c>
   26388:	e59f3134 	ldr	r3, [pc, #308]	; 264c4 <BusRaiderApp::service()+0x198>
   2638c:	e5933000 	ldr	r3, [r3]
   26390:	e2833906 	add	r3, r3, #98304	; 0x18000
        if (!_commandHandler.isFileTransferInProgress())
   26394:	e5933820 	ldr	r3, [r3, #2080]	; 0x820
   26398:	e3530000 	cmp	r3, #0
   2639c:	0a000039 	beq	26488 <BusRaiderApp::service()+0x15c>
        _esp32StatusLastRxUs = micros();
   263a0:	eb0040fc 	bl	36798 <micros>
   263a4:	e5840188 	str	r0, [r4, #392]	; 0x188
    if (!_esp32LastMachineValid)
   263a8:	e2864a1b 	add	r4, r6, #110592	; 0x1b000
   263ac:	e594389c 	ldr	r3, [r4, #2204]	; 0x89c
   263b0:	e3530000 	cmp	r3, #0
   263b4:	0a000019 	beq	26420 <BusRaiderApp::service()+0xf4>
{
   263b8:	e59f410c 	ldr	r4, [pc, #268]	; 264cc <BusRaiderApp::service()+0x1a0>
   263bc:	e59f510c 	ldr	r5, [pc, #268]	; 264d0 <BusRaiderApp::service()+0x1a4>
   263c0:	ea000009 	b	263ec <BusRaiderApp::service()+0xc0>
        int ch = _pApp->_uart.read();
   263c4:	e5953000 	ldr	r3, [r5]
   263c8:	e2833906 	add	r3, r3, #98304	; 0x18000
   263cc:	e59308ac 	ldr	r0, [r3, #2220]	; 0x8ac
   263d0:	eb003eef 	bl	35f94 <UartMaxi::read()>
        CommandHandler::handleHDLCReceivedChars(buf, 1);
   263d4:	e3a01001 	mov	r1, #1
        buf[0] = ch;
   263d8:	e5cd0008 	strb	r0, [sp, #8]
        CommandHandler::handleHDLCReceivedChars(buf, 1);
   263dc:	e28d0008 	add	r0, sp, #8
   263e0:	eb00017a 	bl	269d0 <CommandHandler::handleHDLCReceivedChars(unsigned char const*, int)>
    for (int rxCtr = 0; rxCtr < 10000; rxCtr++) {
   263e4:	e2544001 	subs	r4, r4, #1
   263e8:	0a000005 	beq	26404 <BusRaiderApp::service()+0xd8>
        if (!_pApp->_uart.poll())
   263ec:	e5953000 	ldr	r3, [r5]
   263f0:	e2833906 	add	r3, r3, #98304	; 0x18000
   263f4:	e59308ac 	ldr	r0, [r3, #2220]	; 0x8ac
   263f8:	eb003efa 	bl	35fe8 <UartMaxi::poll()>
   263fc:	e3500000 	cmp	r0, #0
   26400:	1affffef 	bne	263c4 <BusRaiderApp::service()+0x98>
    statusDisplayUpdate();
   26404:	e1a00006 	mov	r0, r6
   26408:	ebfffebf 	bl	25f0c <BusRaiderApp::statusDisplayUpdate()>
    _commandHandler.service();
   2640c:	e2860078 	add	r0, r6, #120	; 0x78
   26410:	eb0005ec 	bl	27bc8 <CommandHandler::service()>
}
   26414:	e28dde7d 	add	sp, sp, #2000	; 0x7d0
   26418:	e28dd008 	add	sp, sp, #8
   2641c:	e8bd8070 	pop	{r4, r5, r6, pc}
        if (isTimeout(micros(), _esp32LastMachineReqUs, ESP32_LAST_MC_REQ_MS * 1000))
   26420:	eb0040dc 	bl	36798 <micros>
   26424:	e59f209c 	ldr	r2, [pc, #156]	; 264c8 <BusRaiderApp::service()+0x19c>
   26428:	e59418a0 	ldr	r1, [r4, #2208]	; 0x8a0
   2642c:	eb0040ee 	bl	367ec <isTimeout>
   26430:	e3500000 	cmp	r0, #0
   26434:	0affffdf 	beq	263b8 <BusRaiderApp::service()+0x8c>
            _commandHandler.sendAPIReq("querycurmc");
   26438:	e59f0094 	ldr	r0, [pc, #148]	; 264d4 <BusRaiderApp::service()+0x1a8>
   2643c:	eb0004b6 	bl	2771c <CommandHandler::sendAPIReq(char const*)>
            _esp32LastMachineReqUs = micros();
   26440:	eb0040d4 	bl	36798 <micros>
   26444:	e58408a0 	str	r0, [r4, #2208]	; 0x8a0
   26448:	eaffffda 	b	263b8 <BusRaiderApp::service()+0x8c>
// Get Pi status
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void BusRaiderApp::getPiStatus(char* pRespJson, int maxRespLen)
{
    const char* mcJSON = McManager::getMachineJSON();
   2644c:	eb001e48 	bl	2dd74 <McManager::getMachineJSON()>
            if (strcmp(respBuffer, _piStatusCached) != 0)
   26450:	e2865b62 	add	r5, r6, #100352	; 0x18800
    if (pRespJson)
        strlcpy(pRespJson, mcJSON, maxRespLen);
   26454:	e1a01000 	mov	r1, r0
   26458:	e3a02e7d 	mov	r2, #2000	; 0x7d0
   2645c:	e28d0008 	add	r0, sp, #8
            if (strcmp(respBuffer, _piStatusCached) != 0)
   26460:	e28550b0 	add	r5, r5, #176	; 0xb0
        strlcpy(pRespJson, mcJSON, maxRespLen);
   26464:	eb009c57 	bl	4d5c8 <strlcpy>
            if (strcmp(respBuffer, _piStatusCached) != 0)
   26468:	e1a01005 	mov	r1, r5
   2646c:	e28d0008 	add	r0, sp, #8
   26470:	eb009b5f 	bl	4d1f4 <strcmp>
   26474:	e3500000 	cmp	r0, #0
   26478:	1a000005 	bne	26494 <BusRaiderApp::service()+0x168>
            _esp32StatusUpdateStartUs = micros();
   2647c:	eb0040c5 	bl	36798 <micros>
   26480:	e5860074 	str	r0, [r6, #116]	; 0x74
   26484:	eaffffb8 	b	2636c <BusRaiderApp::service()+0x40>
            _commandHandler.sendAPIReq("queryESPHealth");
   26488:	e59f0048 	ldr	r0, [pc, #72]	; 264d8 <BusRaiderApp::service()+0x1ac>
   2648c:	eb0004a2 	bl	2771c <CommandHandler::sendAPIReq(char const*)>
   26490:	eaffffc2 	b	263a0 <BusRaiderApp::service()+0x74>
                strlcpy(_piStatusCached, respBuffer, MAX_PI_STATUS_MSG_LEN);
   26494:	e28d1008 	add	r1, sp, #8
   26498:	e1a00005 	mov	r0, r5
   2649c:	e3a02e7d 	mov	r2, #2000	; 0x7d0
   264a0:	eb009c48 	bl	4d5c8 <strlcpy>
                _commandHandler.sendWithJSON("getStatusResp", respBuffer);
   264a4:	e58d4000 	str	r4, [sp]
   264a8:	e28d1008 	add	r1, sp, #8
   264ac:	e1a03004 	mov	r3, r4
   264b0:	e1a02004 	mov	r2, r4
   264b4:	e59f0020 	ldr	r0, [pc, #32]	; 264dc <BusRaiderApp::service()+0x1b0>
   264b8:	eb000277 	bl	26e9c <CommandHandler::sendWithJSON(char const*, char const*, unsigned long, unsigned char const*, unsigned long)>
   264bc:	eaffffee 	b	2647c <BusRaiderApp::service()+0x150>
   264c0:	000f4240 	.word	0x000f4240
   264c4:	0006fca4 	.word	0x0006fca4
   264c8:	004c4b40 	.word	0x004c4b40
   264cc:	00002710 	.word	0x00002710
   264d0:	0006fca0 	.word	0x0006fca0
   264d4:	00053fbc 	.word	0x00053fbc
   264d8:	00053fac 	.word	0x00053fac
   264dc:	00053f9c 	.word	0x00053f9c

000264e0 <BusRaiderApp::serviceGetFromSerial()>:
{
   264e0:	e92d4030 	push	{r4, r5, lr}
   264e4:	e59f4050 	ldr	r4, [pc, #80]	; 2653c <BusRaiderApp::serviceGetFromSerial()+0x5c>
   264e8:	e24dd00c 	sub	sp, sp, #12
   264ec:	e59f504c 	ldr	r5, [pc, #76]	; 26540 <BusRaiderApp::serviceGetFromSerial()+0x60>
   264f0:	ea000009 	b	2651c <BusRaiderApp::serviceGetFromSerial()+0x3c>
        int ch = _pApp->_uart.read();
   264f4:	e5953000 	ldr	r3, [r5]
   264f8:	e2833906 	add	r3, r3, #98304	; 0x18000
   264fc:	e59308ac 	ldr	r0, [r3, #2220]	; 0x8ac
   26500:	eb003ea3 	bl	35f94 <UartMaxi::read()>
        CommandHandler::handleHDLCReceivedChars(buf, 1);
   26504:	e3a01001 	mov	r1, #1
        buf[0] = ch;
   26508:	e5cd0004 	strb	r0, [sp, #4]
        CommandHandler::handleHDLCReceivedChars(buf, 1);
   2650c:	e28d0004 	add	r0, sp, #4
   26510:	eb00012e 	bl	269d0 <CommandHandler::handleHDLCReceivedChars(unsigned char const*, int)>
    for (int rxCtr = 0; rxCtr < 10000; rxCtr++) {
   26514:	e2544001 	subs	r4, r4, #1
   26518:	0a000005 	beq	26534 <BusRaiderApp::serviceGetFromSerial()+0x54>
        if (!_pApp->_uart.poll())
   2651c:	e5953000 	ldr	r3, [r5]
   26520:	e2833906 	add	r3, r3, #98304	; 0x18000
   26524:	e59308ac 	ldr	r0, [r3, #2220]	; 0x8ac
   26528:	eb003eae 	bl	35fe8 <UartMaxi::poll()>
   2652c:	e3500000 	cmp	r0, #0
   26530:	1affffef 	bne	264f4 <BusRaiderApp::serviceGetFromSerial()+0x14>
}
   26534:	e28dd00c 	add	sp, sp, #12
   26538:	e8bd8030 	pop	{r4, r5, pc}
   2653c:	00002710 	.word	0x00002710
   26540:	0006fca0 	.word	0x0006fca0

00026544 <BusRaiderApp::usbKeypressHandler(unsigned char, unsigned char const*)>:
{
   26544:	e92d4070 	push	{r4, r5, r6, lr}
    if (rawKeys[0] == KEY_F2)
   26548:	e5d23000 	ldrb	r3, [r2]
{
   2654c:	e24dd008 	sub	sp, sp, #8
    if (rawKeys[0] == KEY_F2)
   26550:	e353003b 	cmp	r3, #59	; 0x3b
{
   26554:	e1a04000 	mov	r4, r0
   26558:	e5d03008 	ldrb	r3, [r0, #8]
    if (rawKeys[0] == KEY_F2)
   2655c:	0a000012 	beq	265ac <BusRaiderApp::usbKeypressHandler(unsigned char, unsigned char const*)+0x68>
    if (_immediateMode)
   26560:	e3530000 	cmp	r3, #0
   26564:	e1a05001 	mov	r5, r1
   26568:	0a000004 	beq	26580 <BusRaiderApp::usbKeypressHandler(unsigned char, unsigned char const*)+0x3c>
        if (_immediateModeLineLen < IMM_MODE_LINE_MAXLEN)
   2656c:	e5903070 	ldr	r3, [r0, #112]	; 0x70
   26570:	e3530063 	cmp	r3, #99	; 0x63
   26574:	da000014 	ble	265cc <BusRaiderApp::usbKeypressHandler(unsigned char, unsigned char const*)+0x88>
}
   26578:	e28dd008 	add	sp, sp, #8
   2657c:	e8bd8070 	pop	{r4, r5, r6, pc}
   26580:	e58d2004 	str	r2, [sp, #4]
    McBase* pMc = McManager::getMachine();
   26584:	eb001dca 	bl	2dcb4 <McManager::getMachine()>
    if (pMc)
   26588:	e2503000 	subs	r3, r0, #0
   2658c:	0afffff9 	beq	26578 <BusRaiderApp::usbKeypressHandler(unsigned char, unsigned char const*)+0x34>
        pMc->keyHandler(ucModifiers, rawKeys);
   26590:	e1a01005 	mov	r1, r5
   26594:	e5933000 	ldr	r3, [r3]
   26598:	e59d2004 	ldr	r2, [sp, #4]
   2659c:	e5933034 	ldr	r3, [r3, #52]	; 0x34
}
   265a0:	e28dd008 	add	sp, sp, #8
   265a4:	e8bd4070 	pop	{r4, r5, r6, lr}
        pMc->keyHandler(ucModifiers, rawKeys);
   265a8:	e12fff13 	bx	r3
        if (!_immediateMode)
   265ac:	e3530000 	cmp	r3, #0
   265b0:	1a000001 	bne	265bc <BusRaiderApp::usbKeypressHandler(unsigned char, unsigned char const*)+0x78>
            LogPrintf("Entering immediate mode, e.g. w/ssid/password/hostname<enter> to setup WiFi ...\n");
   265b4:	e59f00e0 	ldr	r0, [pc, #224]	; 2669c <BusRaiderApp::usbKeypressHandler(unsigned char, unsigned char const*)+0x158>
   265b8:	ebfff793 	bl	2440c <LogPrintf>
        _immediateMode = true;
   265bc:	e3a03001 	mov	r3, #1
   265c0:	e5c43008 	strb	r3, [r4, #8]
}
   265c4:	e28dd008 	add	sp, sp, #8
   265c8:	e8bd8070 	pop	{r4, r5, r6, pc}
            int asciiCode = McTerminal::convertRawToAscii(ucModifiers, rawKeys);
   265cc:	e1a00005 	mov	r0, r5
   265d0:	e1a01002 	mov	r1, r2
   265d4:	eb002609 	bl	2fe00 <McTerminal::convertRawToAscii(unsigned char, unsigned char const*)>
            if (asciiCode == 0)
   265d8:	e2505000 	subs	r5, r0, #0
   265dc:	0affffe5 	beq	26578 <BusRaiderApp::usbKeypressHandler(unsigned char, unsigned char const*)+0x34>
            if (asciiCode == 0x08)
   265e0:	e3550008 	cmp	r5, #8
   265e4:	0a000020 	beq	2666c <BusRaiderApp::usbKeypressHandler(unsigned char, unsigned char const*)+0x128>
            else if (asciiCode == 0x0d)
   265e8:	e355000d 	cmp	r5, #13
   265ec:	0a00000d 	beq	26628 <BusRaiderApp::usbKeypressHandler(unsigned char, unsigned char const*)+0xe4>
            else if ((asciiCode >= 32) && (asciiCode < 127))
   265f0:	e2453020 	sub	r3, r5, #32
   265f4:	e353005e 	cmp	r3, #94	; 0x5e
                _immediateModeLine[_immediateModeLineLen++] = asciiCode;
   265f8:	95943070 	ldrls	r3, [r4, #112]	; 0x70
   265fc:	82846906 	addhi	r6, r4, #98304	; 0x18000
   26600:	92832001 	addls	r2, r3, #1
   26604:	90843003 	addls	r3, r4, r3
   26608:	95842070 	strls	r2, [r4, #112]	; 0x70
   2660c:	92846906 	addls	r6, r4, #98304	; 0x18000
   26610:	95c35009 	strbls	r5, [r3, #9]
            _display.consolePut(asciiCode);
   26614:	e1a01005 	mov	r1, r5
   26618:	e59608a8 	ldr	r0, [r6, #2216]	; 0x8a8
}
   2661c:	e28dd008 	add	sp, sp, #8
   26620:	e8bd4070 	pop	{r4, r5, r6, lr}
            _display.consolePut(asciiCode);
   26624:	ea0032d7 	b	33188 <Display::consolePut(int)>
                _immediateMode = false;
   26628:	e3a02000 	mov	r2, #0
                _immediateModeLine[_immediateModeLineLen] = 0;
   2662c:	e5943070 	ldr	r3, [r4, #112]	; 0x70
                _immediateMode = false;
   26630:	e5c42008 	strb	r2, [r4, #8]
                if (_immediateModeLineLen > 0)
   26634:	e1530002 	cmp	r3, r2
                _immediateModeLine[_immediateModeLineLen] = 0;
   26638:	e0843003 	add	r3, r4, r3
   2663c:	e5c32009 	strb	r2, [r3, #9]
                if (_immediateModeLineLen > 0)
   26640:	da000005 	ble	2665c <BusRaiderApp::usbKeypressHandler(unsigned char, unsigned char const*)+0x118>
                    CommandHandler::sendAPIReq(_immediateModeLine);
   26644:	e2846009 	add	r6, r4, #9
   26648:	e1a00006 	mov	r0, r6
   2664c:	eb000432 	bl	2771c <CommandHandler::sendAPIReq(char const*)>
                    LogPrintf("Sent request to ESP32: %s\n", _immediateModeLine);
   26650:	e1a01006 	mov	r1, r6
   26654:	e59f0044 	ldr	r0, [pc, #68]	; 266a0 <BusRaiderApp::usbKeypressHandler(unsigned char, unsigned char const*)+0x15c>
   26658:	ebfff76b 	bl	2440c <LogPrintf>
                _immediateModeLineLen = 0;
   2665c:	e3a03000 	mov	r3, #0
   26660:	e2846906 	add	r6, r4, #98304	; 0x18000
   26664:	e5843070 	str	r3, [r4, #112]	; 0x70
   26668:	eaffffe9 	b	26614 <BusRaiderApp::usbKeypressHandler(unsigned char, unsigned char const*)+0xd0>
                if (_immediateModeLineLen > 0)
   2666c:	e5943070 	ldr	r3, [r4, #112]	; 0x70
                _display.consolePut(asciiCode);
   26670:	e2846906 	add	r6, r4, #98304	; 0x18000
                if (_immediateModeLineLen > 0)
   26674:	e3530000 	cmp	r3, #0
                    _immediateModeLineLen--;
   26678:	c2433001 	subgt	r3, r3, #1
   2667c:	c5843070 	strgt	r3, [r4, #112]	; 0x70
                _display.consolePut(asciiCode);
   26680:	e59608a8 	ldr	r0, [r6, #2216]	; 0x8a8
   26684:	e3a01008 	mov	r1, #8
   26688:	eb0032be 	bl	33188 <Display::consolePut(int)>
                _display.consolePut(' ');
   2668c:	e59608a8 	ldr	r0, [r6, #2216]	; 0x8a8
   26690:	e3a01020 	mov	r1, #32
   26694:	eb0032bb 	bl	33188 <Display::consolePut(int)>
   26698:	eaffffdd 	b	26614 <BusRaiderApp::usbKeypressHandler(unsigned char, unsigned char const*)+0xd0>
   2669c:	00053db0 	.word	0x00053db0
   266a0:	00053e04 	.word	0x00053e04

000266a4 <BusRaiderApp::getPiStatus(char*, int)>:
{
   266a4:	e92d4070 	push	{r4, r5, r6, lr}
   266a8:	e1a04001 	mov	r4, r1
   266ac:	e1a05002 	mov	r5, r2
    const char* mcJSON = McManager::getMachineJSON();
   266b0:	eb001daf 	bl	2dd74 <McManager::getMachineJSON()>
    if (pRespJson)
   266b4:	e3540000 	cmp	r4, #0
   266b8:	08bd8070 	popeq	{r4, r5, r6, pc}
        strlcpy(pRespJson, mcJSON, maxRespLen);
   266bc:	e1a02005 	mov	r2, r5
   266c0:	e1a01000 	mov	r1, r0
   266c4:	e1a00004 	mov	r0, r4
}
   266c8:	e8bd4070 	pop	{r4, r5, r6, lr}
        strlcpy(pRespJson, mcJSON, maxRespLen);
   266cc:	ea009bbd 	b	4d5c8 <strlcpy>

000266d0 <BusRaiderApp::storeESP32StatusInfo(char const*)>:
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Address callback
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void BusRaiderApp::storeESP32StatusInfo(const char* pCmdJson)
{
   266d0:	e92d4030 	push	{r4, r5, lr}
   266d4:	e1a04000 	mov	r4, r0
   266d8:	e24ddffb 	sub	sp, sp, #1004	; 0x3ec
   266dc:	e1a05001 	mov	r5, r1
    _esp32StatusLastRxUs = micros();
   266e0:	eb00402c 	bl	36798 <micros>
   266e4:	e2844a19 	add	r4, r4, #102400	; 0x19000
   266e8:	e5840188 	str	r0, [r4, #392]	; 0x188
    microsDelay(1000);
   266ec:	e3a00ffa 	mov	r0, #1000	; 0x3e8
   266f0:	eb00402c 	bl	367a8 <microsDelay>
    // Get espHealth field
    char espHealthJson[MAX_ESP_HEALTH_STR];
    if (!jsonGetValueForKey("espHealth", pCmdJson, espHealthJson, MAX_ESP_HEALTH_STR))
   266f4:	e1a01005 	mov	r1, r5
   266f8:	e1a0200d 	mov	r2, sp
   266fc:	e3a03ffa 	mov	r3, #1000	; 0x3e8
   26700:	e59f0098 	ldr	r0, [pc, #152]	; 267a0 <BusRaiderApp::storeESP32StatusInfo(char const*)+0xd0>
   26704:	ebfff8b8 	bl	249ec <jsonGetValueForKey>
   26708:	e3500000 	cmp	r0, #0
   2670c:	1a000001 	bne	26718 <BusRaiderApp::storeESP32StatusInfo(char const*)+0x48>
    if (!jsonGetValueForKey("ssid", espHealthJson, _esp32WifiSSID, MAX_WIFI_SSID_STR))
        return;
    if (!jsonGetValueForKey("espV", espHealthJson, _esp32ESP32Version, MAX_ESP_VERSION_STR))
        return;
    // LogWrite(FromBusRaiderApp, LOG_DEBUG, "Ip Address %s", _esp32IPAddress);
}
   26710:	e28ddffb 	add	sp, sp, #1004	; 0x3ec
   26714:	e8bd8030 	pop	{r4, r5, pc}
    if (!jsonGetValueForKey("wifiIP", espHealthJson, _esp32IPAddress, MAX_IP_ADDR_STR))
   26718:	e2845080 	add	r5, r4, #128	; 0x80
   2671c:	e1a02005 	mov	r2, r5
   26720:	e3a0301e 	mov	r3, #30
   26724:	e1a0100d 	mov	r1, sp
   26728:	e59f0074 	ldr	r0, [pc, #116]	; 267a4 <BusRaiderApp::storeESP32StatusInfo(char const*)+0xd4>
   2672c:	ebfff8ae 	bl	249ec <jsonGetValueForKey>
   26730:	e3500000 	cmp	r0, #0
   26734:	0afffff5 	beq	26710 <BusRaiderApp::storeESP32StatusInfo(char const*)+0x40>
    _esp32IPAddressValid = (strcmp(_esp32IPAddress, "0.0.0.0") != 0);
   26738:	e59f1068 	ldr	r1, [pc, #104]	; 267a8 <BusRaiderApp::storeESP32StatusInfo(char const*)+0xd8>
   2673c:	e1a00005 	mov	r0, r5
   26740:	eb009aab 	bl	4d1f4 <strcmp>
   26744:	e2900000 	adds	r0, r0, #0
   26748:	13a00001 	movne	r0, #1
    if (!jsonGetValueForKey("wifiConn", espHealthJson, _esp32WifiConnStr, MAX_WIFI_CONN_STR))
   2674c:	e3a0301e 	mov	r3, #30
    _esp32IPAddressValid = (strcmp(_esp32IPAddress, "0.0.0.0") != 0);
   26750:	e5c40184 	strb	r0, [r4, #388]	; 0x184
    if (!jsonGetValueForKey("wifiConn", espHealthJson, _esp32WifiConnStr, MAX_WIFI_CONN_STR))
   26754:	e284209e 	add	r2, r4, #158	; 0x9e
   26758:	e1a0100d 	mov	r1, sp
   2675c:	e59f0048 	ldr	r0, [pc, #72]	; 267ac <BusRaiderApp::storeESP32StatusInfo(char const*)+0xdc>
   26760:	ebfff8a1 	bl	249ec <jsonGetValueForKey>
   26764:	e3500000 	cmp	r0, #0
   26768:	0affffe8 	beq	26710 <BusRaiderApp::storeESP32StatusInfo(char const*)+0x40>
    if (!jsonGetValueForKey("ssid", espHealthJson, _esp32WifiSSID, MAX_WIFI_SSID_STR))
   2676c:	e3a03064 	mov	r3, #100	; 0x64
   26770:	e28420bc 	add	r2, r4, #188	; 0xbc
   26774:	e1a0100d 	mov	r1, sp
   26778:	e59f0030 	ldr	r0, [pc, #48]	; 267b0 <BusRaiderApp::storeESP32StatusInfo(char const*)+0xe0>
   2677c:	ebfff89a 	bl	249ec <jsonGetValueForKey>
   26780:	e3500000 	cmp	r0, #0
   26784:	0affffe1 	beq	26710 <BusRaiderApp::storeESP32StatusInfo(char const*)+0x40>
    if (!jsonGetValueForKey("espV", espHealthJson, _esp32ESP32Version, MAX_ESP_VERSION_STR))
   26788:	e2842e12 	add	r2, r4, #288	; 0x120
   2678c:	e1a0100d 	mov	r1, sp
   26790:	e3a03064 	mov	r3, #100	; 0x64
   26794:	e59f0018 	ldr	r0, [pc, #24]	; 267b4 <BusRaiderApp::storeESP32StatusInfo(char const*)+0xe4>
   26798:	ebfff893 	bl	249ec <jsonGetValueForKey>
   2679c:	eaffffdb 	b	26710 <BusRaiderApp::storeESP32StatusInfo(char const*)+0x40>
   267a0:	00053fc8 	.word	0x00053fc8
   267a4:	00053fd4 	.word	0x00053fd4
   267a8:	00053fdc 	.word	0x00053fdc
   267ac:	00053fe4 	.word	0x00053fe4
   267b0:	00053ff0 	.word	0x00053ff0
   267b4:	00053ff8 	.word	0x00053ff8

000267b8 <BusRaiderApp::handleRxMsg(char const*, unsigned char const*, int, char*, int)>:
{
   267b8:	e92d4070 	push	{r4, r5, r6, lr}
   267bc:	e24dd0d0 	sub	sp, sp, #208	; 0xd0
    if (!jsonGetValueForKey("cmdName", pCmdJson, cmdName, MAX_CMD_NAME_STR))
   267c0:	e1a01000 	mov	r1, r0
{
   267c4:	e1a05000 	mov	r5, r0
   267c8:	e1a06003 	mov	r6, r3
    if (!jsonGetValueForKey("cmdName", pCmdJson, cmdName, MAX_CMD_NAME_STR))
   267cc:	e28d2004 	add	r2, sp, #4
   267d0:	e3a030c8 	mov	r3, #200	; 0xc8
   267d4:	e59f00d0 	ldr	r0, [pc, #208]	; 268ac <BusRaiderApp::handleRxMsg(char const*, unsigned char const*, int, char*, int)+0xf4>
   267d8:	ebfff883 	bl	249ec <jsonGetValueForKey>
   267dc:	e2504000 	subs	r4, r0, #0
   267e0:	0a000010 	beq	26828 <BusRaiderApp::handleRxMsg(char const*, unsigned char const*, int, char*, int)+0x70>
    pRespJson[0] = 0;
   267e4:	e3a03000 	mov	r3, #0
    if (strcasecmp(cmdName, "getStatus") == 0)
   267e8:	e59f10c0 	ldr	r1, [pc, #192]	; 268b0 <BusRaiderApp::handleRxMsg(char const*, unsigned char const*, int, char*, int)+0xf8>
    pRespJson[0] = 0;
   267ec:	e5c63000 	strb	r3, [r6]
    if (strcasecmp(cmdName, "getStatus") == 0)
   267f0:	e28d0004 	add	r0, sp, #4
   267f4:	eb0099e4 	bl	4cf8c <strcasecmp>
   267f8:	e3500000 	cmp	r0, #0
   267fc:	0a00000d 	beq	26838 <BusRaiderApp::handleRxMsg(char const*, unsigned char const*, int, char*, int)+0x80>
    else if (strcasecmp(cmdName, "queryESPHealthResp") == 0)
   26800:	e59f10ac 	ldr	r1, [pc, #172]	; 268b4 <BusRaiderApp::handleRxMsg(char const*, unsigned char const*, int, char*, int)+0xfc>
   26804:	e28d0004 	add	r0, sp, #4
   26808:	eb0099df 	bl	4cf8c <strcasecmp>
   2680c:	e3500000 	cmp	r0, #0
   26810:	0a00001e 	beq	26890 <BusRaiderApp::handleRxMsg(char const*, unsigned char const*, int, char*, int)+0xd8>
    else if (strcasecmp(cmdName, "queryCurMcResp") == 0)
   26814:	e28d0004 	add	r0, sp, #4
   26818:	e59f1098 	ldr	r1, [pc, #152]	; 268b8 <BusRaiderApp::handleRxMsg(char const*, unsigned char const*, int, char*, int)+0x100>
   2681c:	eb0099da 	bl	4cf8c <strcasecmp>
   26820:	e3500000 	cmp	r0, #0
   26824:	0a00000b 	beq	26858 <BusRaiderApp::handleRxMsg(char const*, unsigned char const*, int, char*, int)+0xa0>
        return false;
   26828:	e3a04000 	mov	r4, #0
}
   2682c:	e1a00004 	mov	r0, r4
   26830:	e28dd0d0 	add	sp, sp, #208	; 0xd0
   26834:	e8bd8070 	pop	{r4, r5, r6, pc}
    const char* mcJSON = McManager::getMachineJSON();
   26838:	eb001d4d 	bl	2dd74 <McManager::getMachineJSON()>
        strlcpy(pRespJson, mcJSON, maxRespLen);
   2683c:	e59d20e0 	ldr	r2, [sp, #224]	; 0xe0
   26840:	e1a01000 	mov	r1, r0
   26844:	e1a00006 	mov	r0, r6
   26848:	eb009b5e 	bl	4d5c8 <strlcpy>
}
   2684c:	e1a00004 	mov	r0, r4
   26850:	e28dd0d0 	add	sp, sp, #208	; 0xd0
   26854:	e8bd8070 	pop	{r4, r5, r6, pc}
        LogWrite(FromBusRaiderApp, LOG_DEBUG, "queryCurMcResp %s", pCmdJson);
   26858:	e59f205c 	ldr	r2, [pc, #92]	; 268bc <BusRaiderApp::handleRxMsg(char const*, unsigned char const*, int, char*, int)+0x104>
   2685c:	e1a03005 	mov	r3, r5
   26860:	e5920010 	ldr	r0, [r2, #16]
   26864:	e3a01004 	mov	r1, #4
   26868:	e59f2050 	ldr	r2, [pc, #80]	; 268c0 <BusRaiderApp::handleRxMsg(char const*, unsigned char const*, int, char*, int)+0x108>
   2686c:	ebfff641 	bl	24178 <LogWrite>
        McManager::setupMachine(pCmdJson);
   26870:	e1a00005 	mov	r0, r5
   26874:	eb001d9e 	bl	2def4 <McManager::setupMachine(char const*)>
        _pApp->_esp32LastMachineValid = true;
   26878:	e3a02001 	mov	r2, #1
   2687c:	e59f3040 	ldr	r3, [pc, #64]	; 268c4 <BusRaiderApp::handleRxMsg(char const*, unsigned char const*, int, char*, int)+0x10c>
   26880:	e5933000 	ldr	r3, [r3]
   26884:	e2833a1b 	add	r3, r3, #110592	; 0x1b000
   26888:	e583289c 	str	r2, [r3, #2204]	; 0x89c
        return true;
   2688c:	eaffffe6 	b	2682c <BusRaiderApp::handleRxMsg(char const*, unsigned char const*, int, char*, int)+0x74>
        _pApp->storeESP32StatusInfo(pCmdJson);
   26890:	e59f302c 	ldr	r3, [pc, #44]	; 268c4 <BusRaiderApp::handleRxMsg(char const*, unsigned char const*, int, char*, int)+0x10c>
   26894:	e1a01005 	mov	r1, r5
   26898:	e5930000 	ldr	r0, [r3]
   2689c:	ebffff8b 	bl	266d0 <BusRaiderApp::storeESP32StatusInfo(char const*)>
}
   268a0:	e1a00004 	mov	r0, r4
   268a4:	e28dd0d0 	add	sp, sp, #208	; 0xd0
   268a8:	e8bd8070 	pop	{r4, r5, r6, pc}
   268ac:	00053b5c 	.word	0x00053b5c
   268b0:	00054000 	.word	0x00054000
   268b4:	0005400c 	.word	0x0005400c
   268b8:	00054020 	.word	0x00054020
   268bc:	00062a9c 	.word	0x00062a9c
   268c0:	00054030 	.word	0x00054030
   268c4:	0006fca0 	.word	0x0006fca0

000268c8 <CommandHandler::hdlcPutChStatic(unsigned char)>:

void CommandHandler::hdlcPutChStatic(uint8_t ch)
{
    // LogWrite(FromCmdHandler, LOG_VERBOSE, "hdlcPutChStatic");

    if (_pSingletonCommandHandler)
   268c8:	e59f3038 	ldr	r3, [pc, #56]	; 26908 <CommandHandler::hdlcPutChStatic(unsigned char)+0x40>
   268cc:	e5932000 	ldr	r2, [r3]
   268d0:	e3520000 	cmp	r2, #0
   268d4:	012fff1e 	bxeq	lr
    if (_pPutToHDLCSerialFunction)
   268d8:	e5932004 	ldr	r2, [r3, #4]
   268dc:	e3520000 	cmp	r2, #0
   268e0:	012fff1e 	bxeq	lr
   268e4:	e1a03000 	mov	r3, r0
{
   268e8:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   268ec:	e24dd00c 	sub	sp, sp, #12
        buf[0] = ch;
   268f0:	e28d0008 	add	r0, sp, #8
   268f4:	e5603004 	strb	r3, [r0, #-4]!
        _pPutToHDLCSerialFunction(buf, 1);
   268f8:	e3a01001 	mov	r1, #1
   268fc:	e12fff32 	blx	r2
        _pSingletonCommandHandler->hdlcPutCh(ch);
}
   26900:	e28dd00c 	add	sp, sp, #12
   26904:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
   26908:	0006fca4 	.word	0x0006fca4

0002690c <CommandHandler::CommandHandler()>:
CommandHandler::CommandHandler() :
   2690c:	e92d4030 	push	{r4, r5, lr}
    _miniHDLC(hdlcPutChStatic, hdlcFrameRxStatic)
   26910:	e3a04000 	mov	r4, #0
CommandHandler::CommandHandler() :
   26914:	e1a05000 	mov	r5, r0
   26918:	e24dd00c 	sub	sp, sp, #12
    _miniHDLC(hdlcPutChStatic, hdlcFrameRxStatic)
   2691c:	e58d4000 	str	r4, [sp]
   26920:	e3a03001 	mov	r3, #1
   26924:	e59f2038 	ldr	r2, [pc, #56]	; 26964 <CommandHandler::CommandHandler()+0x58>
   26928:	e59f1038 	ldr	r1, [pc, #56]	; 26968 <CommandHandler::CommandHandler()+0x5c>
   2692c:	eb0004a6 	bl	27bcc <MiniHDLC::MiniHDLC(void (*)(unsigned char), void (*)(unsigned char const*, int), bool, bool)>
}
   26930:	e1a00005 	mov	r0, r5
    _pSingletonCommandHandler = this;
   26934:	e59f2030 	ldr	r2, [pc, #48]	; 2696c <CommandHandler::CommandHandler()+0x60>
    _receivedFileName[0] = 0;
   26938:	e2853906 	add	r3, r5, #98304	; 0x18000
    _pSingletonCommandHandler = this;
   2693c:	e5825000 	str	r5, [r2]
    _receivedFileName[0] = 0;
   26940:	e5c346c8 	strb	r4, [r3, #1736]	; 0x6c8
    _pReceivedFileType[0] = 0;
   26944:	e5c3472d 	strb	r4, [r3, #1837]	; 0x72d
    _receivedFileStartInfo[0] = 0;
   26948:	e5c34756 	strb	r4, [r3, #1878]	; 0x756
    _pReceivedFileDataPtr = 0;
   2694c:	e5834820 	str	r4, [r3, #2080]	; 0x820
    _receivedFileBufSize = 0;
   26950:	e5834824 	str	r4, [r3, #2084]	; 0x824
    _receivedFileBytesRx = 0;
   26954:	e5834828 	str	r4, [r3, #2088]	; 0x828
    _receivedBlockCount = 0;
   26958:	e583482c 	str	r4, [r3, #2092]	; 0x82c
}
   2695c:	e28dd00c 	add	sp, sp, #12
   26960:	e8bd8030 	pop	{r4, r5, pc}
   26964:	000276b8 	.word	0x000276b8
   26968:	000268c8 	.word	0x000268c8
   2696c:	0006fca4 	.word	0x0006fca4

00026970 <CommandHandler::~CommandHandler()>:
}
   26970:	e12fff1e 	bx	lr

00026974 <CommandHandler::commsSocketAdd(CommsSocketInfo&)>:
{
   26974:	e92d4030 	push	{r4, r5, lr}
    if (_commsSocketCount >= MAX_COMMS_SOCKETS)
   26978:	e59f4028 	ldr	r4, [pc, #40]	; 269a8 <CommandHandler::commsSocketAdd(CommsSocketInfo&)+0x34>
   2697c:	e594e008 	ldr	lr, [r4, #8]
   26980:	e35e0009 	cmp	lr, #9
        return -1;
   26984:	c3e0e000 	mvngt	lr, #0
    _commsSockets[_commsSocketCount] = commsSocketInfo;
   26988:	d890000f 	ldmle	r0, {r0, r1, r2, r3}
   2698c:	d084c20e 	addle	ip, r4, lr, lsl #4
   26990:	d28cc00c 	addle	ip, ip, #12
    int tmpCount = _commsSocketCount++;
   26994:	d28e5001 	addle	r5, lr, #1
    _commsSockets[_commsSocketCount] = commsSocketInfo;
   26998:	d88c000f 	stmle	ip, {r0, r1, r2, r3}
    int tmpCount = _commsSocketCount++;
   2699c:	d5845008 	strle	r5, [r4, #8]
}
   269a0:	e1a0000e 	mov	r0, lr
   269a4:	e8bd8030 	pop	{r4, r5, pc}
   269a8:	0006fca4 	.word	0x0006fca4

000269ac <CommandHandler::commsSocketEnable(int, bool)>:
    if ((busSocket < 0) || (busSocket >= _commsSocketCount))
   269ac:	e3500000 	cmp	r0, #0
   269b0:	b12fff1e 	bxlt	lr
   269b4:	e59f3010 	ldr	r3, [pc, #16]	; 269cc <CommandHandler::commsSocketEnable(int, bool)+0x20>
   269b8:	e5932008 	ldr	r2, [r3, #8]
   269bc:	e1520000 	cmp	r2, r0
    _commsSockets[busSocket].enabled = enable;
   269c0:	c0833200 	addgt	r3, r3, r0, lsl #4
   269c4:	c5c3100c 	strbgt	r1, [r3, #12]
}
   269c8:	e12fff1e 	bx	lr
   269cc:	0006fca4 	.word	0x0006fca4

000269d0 <CommandHandler::handleHDLCReceivedChars(unsigned char const*, int)>:
    if (_pSingletonCommandHandler)
   269d0:	e59f3018 	ldr	r3, [pc, #24]	; 269f0 <CommandHandler::handleHDLCReceivedChars(unsigned char const*, int)+0x20>
   269d4:	e5933000 	ldr	r3, [r3]
   269d8:	e3530000 	cmp	r3, #0
   269dc:	012fff1e 	bxeq	lr
        _pSingletonCommandHandler->_miniHDLC.handleBuffer(pBytes, numBytes);
   269e0:	e1a02001 	mov	r2, r1
   269e4:	e1a01000 	mov	r1, r0
   269e8:	e1a00003 	mov	r0, r3
   269ec:	ea000577 	b	27fd0 <MiniHDLC::handleBuffer(unsigned char const*, int)>
   269f0:	0006fca4 	.word	0x0006fca4

000269f4 <CommandHandler::hdlcPutCh(unsigned char)>:
    if (_pPutToHDLCSerialFunction)
   269f4:	e59f3028 	ldr	r3, [pc, #40]	; 26a24 <CommandHandler::hdlcPutCh(unsigned char)+0x30>
   269f8:	e5933004 	ldr	r3, [r3, #4]
   269fc:	e3530000 	cmp	r3, #0
   26a00:	012fff1e 	bxeq	lr
{
   26a04:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   26a08:	e24dd00c 	sub	sp, sp, #12
        buf[0] = ch;
   26a0c:	e28d0008 	add	r0, sp, #8
   26a10:	e5601004 	strb	r1, [r0, #-4]!
        _pPutToHDLCSerialFunction(buf, 1);
   26a14:	e3a01001 	mov	r1, #1
   26a18:	e12fff33 	blx	r3
}
   26a1c:	e28dd00c 	add	sp, sp, #12
   26a20:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
   26a24:	0006fca4 	.word	0x0006fca4

00026a28 <CommandHandler::commsSocketHandleRxMsg(char const*, unsigned char const*, int, char*, int)>:
// Comms socket handlers
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void CommandHandler::commsSocketHandleRxMsg(const char* pCmdJson, const uint8_t* pParams, int paramsLen,
                    char* pRespJson, int maxRespLen)
{
   26a28:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if (_commsSocketCount < 3)
   26a2c:	e59f70e8 	ldr	r7, [pc, #232]	; 26b1c <CommandHandler::commsSocketHandleRxMsg(char const*, unsigned char const*, int, char*, int)+0xf4>
{
   26a30:	e1a08001 	mov	r8, r1
    if (_commsSocketCount < 3)
   26a34:	e5971008 	ldr	r1, [r7, #8]
{
   26a38:	e24dd00c 	sub	sp, sp, #12
    if (_commsSocketCount < 3)
   26a3c:	e3510002 	cmp	r1, #2
{
   26a40:	e1a09002 	mov	r9, r2
   26a44:	e1a0a003 	mov	sl, r3
   26a48:	e59db034 	ldr	fp, [sp, #52]	; 0x34
    if (_commsSocketCount < 3)
   26a4c:	da000029 	ble	26af8 <CommandHandler::commsSocketHandleRxMsg(char const*, unsigned char const*, int, char*, int)+0xd0>
{
   26a50:	e3a04000 	mov	r4, #0
   26a54:	e59f60c4 	ldr	r6, [pc, #196]	; 26b20 <CommandHandler::commsSocketHandleRxMsg(char const*, unsigned char const*, int, char*, int)+0xf8>
   26a58:	ea00000e 	b	26a98 <CommandHandler::commsSocketHandleRxMsg(char const*, unsigned char const*, int, char*, int)+0x70>
        if (!_commsSockets[i].enabled)
        {
            LogWrite(FromCmdHandler, LOG_DEBUG, "RxMsg sock disabled %d", i);
            continue;
        }
        if (_commsSockets[i].handleRxMsg)
   26a5c:	e5935004 	ldr	r5, [r3, #4]
   26a60:	e3550000 	cmp	r5, #0
   26a64:	0a00001b 	beq	26ad8 <CommandHandler::commsSocketHandleRxMsg(char const*, unsigned char const*, int, char*, int)+0xb0>
        {
            messageHandled = _commsSockets[i].handleRxMsg(pCmdJson, pParams, paramsLen, pRespJson, maxRespLen);
   26a68:	e58db000 	str	fp, [sp]
   26a6c:	e59d3030 	ldr	r3, [sp, #48]	; 0x30
   26a70:	e1a0200a 	mov	r2, sl
   26a74:	e1a01009 	mov	r1, r9
   26a78:	e1a00008 	mov	r0, r8
   26a7c:	e12fff35 	blx	r5
        {
            if (i != 0)
               LogWrite(FromCmdHandler, LOG_DEBUG, "RxMsg sock null %d", i);
        }
        
        if (messageHandled)
   26a80:	e3500000 	cmp	r0, #0
   26a84:	1a000011 	bne	26ad0 <CommandHandler::commsSocketHandleRxMsg(char const*, unsigned char const*, int, char*, int)+0xa8>
   26a88:	e5971008 	ldr	r1, [r7, #8]
    for (int i = 0; i < _commsSocketCount; i++)
   26a8c:	e2844001 	add	r4, r4, #1
   26a90:	e1540001 	cmp	r4, r1
   26a94:	aa00000d 	bge	26ad0 <CommandHandler::commsSocketHandleRxMsg(char const*, unsigned char const*, int, char*, int)+0xa8>
        if (!_commsSockets[i].enabled)
   26a98:	e7d62204 	ldrb	r2, [r6, r4, lsl #4]
   26a9c:	e1a03204 	lsl	r3, r4, #4
   26aa0:	e3520000 	cmp	r2, #0
        if (_commsSockets[i].handleRxMsg)
   26aa4:	e0863003 	add	r3, r6, r3
        if (!_commsSockets[i].enabled)
   26aa8:	1affffeb 	bne	26a5c <CommandHandler::commsSocketHandleRxMsg(char const*, unsigned char const*, int, char*, int)+0x34>
            LogWrite(FromCmdHandler, LOG_DEBUG, "RxMsg sock disabled %d", i);
   26aac:	e1a03004 	mov	r3, r4
   26ab0:	e3a01004 	mov	r1, #4
   26ab4:	e59f2068 	ldr	r2, [pc, #104]	; 26b24 <CommandHandler::commsSocketHandleRxMsg(char const*, unsigned char const*, int, char*, int)+0xfc>
   26ab8:	e59f0068 	ldr	r0, [pc, #104]	; 26b28 <CommandHandler::commsSocketHandleRxMsg(char const*, unsigned char const*, int, char*, int)+0x100>
   26abc:	ebfff5ad 	bl	24178 <LogWrite>
   26ac0:	e5971008 	ldr	r1, [r7, #8]
    for (int i = 0; i < _commsSocketCount; i++)
   26ac4:	e2844001 	add	r4, r4, #1
   26ac8:	e1540001 	cmp	r4, r1
   26acc:	bafffff1 	blt	26a98 <CommandHandler::commsSocketHandleRxMsg(char const*, unsigned char const*, int, char*, int)+0x70>
            break;
    }
}
   26ad0:	e28dd00c 	add	sp, sp, #12
   26ad4:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
            if (i != 0)
   26ad8:	e3540000 	cmp	r4, #0
   26adc:	0affffea 	beq	26a8c <CommandHandler::commsSocketHandleRxMsg(char const*, unsigned char const*, int, char*, int)+0x64>
               LogWrite(FromCmdHandler, LOG_DEBUG, "RxMsg sock null %d", i);
   26ae0:	e1a03004 	mov	r3, r4
   26ae4:	e59f2040 	ldr	r2, [pc, #64]	; 26b2c <CommandHandler::commsSocketHandleRxMsg(char const*, unsigned char const*, int, char*, int)+0x104>
   26ae8:	e3a01004 	mov	r1, #4
   26aec:	e59f0034 	ldr	r0, [pc, #52]	; 26b28 <CommandHandler::commsSocketHandleRxMsg(char const*, unsigned char const*, int, char*, int)+0x100>
   26af0:	ebfff5a0 	bl	24178 <LogWrite>
   26af4:	eaffffe3 	b	26a88 <CommandHandler::commsSocketHandleRxMsg(char const*, unsigned char const*, int, char*, int)+0x60>
        LogWrite(FromCmdHandler, LOG_DEBUG, "RxMsg fewer sockets than expected %d", _commsSocketCount);
   26af8:	e1a03001 	mov	r3, r1
   26afc:	e59f202c 	ldr	r2, [pc, #44]	; 26b30 <CommandHandler::commsSocketHandleRxMsg(char const*, unsigned char const*, int, char*, int)+0x108>
   26b00:	e3a01004 	mov	r1, #4
   26b04:	e59f001c 	ldr	r0, [pc, #28]	; 26b28 <CommandHandler::commsSocketHandleRxMsg(char const*, unsigned char const*, int, char*, int)+0x100>
   26b08:	ebfff59a 	bl	24178 <LogWrite>
   26b0c:	e5971008 	ldr	r1, [r7, #8]
    for (int i = 0; i < _commsSocketCount; i++)
   26b10:	e3510000 	cmp	r1, #0
   26b14:	caffffcd 	bgt	26a50 <CommandHandler::commsSocketHandleRxMsg(char const*, unsigned char const*, int, char*, int)+0x28>
   26b18:	eaffffec 	b	26ad0 <CommandHandler::commsSocketHandleRxMsg(char const*, unsigned char const*, int, char*, int)+0xa8>
   26b1c:	0006fca4 	.word	0x0006fca4
   26b20:	0006fcb0 	.word	0x0006fcb0
   26b24:	0005408c 	.word	0x0005408c
   26b28:	00054054 	.word	0x00054054
   26b2c:	000540a4 	.word	0x000540a4
   26b30:	00054064 	.word	0x00054064

00026b34 <CommandHandler::commsSocketHandleReceivedFile(char const*, unsigned char*, int, bool)>:

void CommandHandler::commsSocketHandleReceivedFile(const char* fileStartInfo, uint8_t* rxData, int rxBytes, bool isFirmware)
{
   26b34:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    bool messageHandled = false;
    // Iterate the comms sockets
    for (int i = 0; i < _commsSocketCount; i++)
   26b38:	e59f80c0 	ldr	r8, [pc, #192]	; 26c00 <CommandHandler::commsSocketHandleReceivedFile(char const*, unsigned char*, int, bool)+0xcc>
{
   26b3c:	e5dd4020 	ldrb	r4, [sp, #32]
    for (int i = 0; i < _commsSocketCount; i++)
   26b40:	e598c008 	ldr	ip, [r8, #8]
   26b44:	e35c0000 	cmp	ip, #0
   26b48:	d8bd87f0 	pople	{r4, r5, r6, r7, r8, r9, sl, pc}
   26b4c:	e3540000 	cmp	r4, #0
   26b50:	e1a07003 	mov	r7, r3
   26b54:	e1a06002 	mov	r6, r2
   26b58:	e1a09001 	mov	r9, r1
   26b5c:	1a000013 	bne	26bb0 <CommandHandler::commsSocketHandleReceivedFile(char const*, unsigned char*, int, bool)+0x7c>
   26b60:	e288500c 	add	r5, r8, #12
    {
        if (!_commsSockets[i].enabled)
   26b64:	e7d52204 	ldrb	r2, [r5, r4, lsl #4]
   26b68:	e1a03204 	lsl	r3, r4, #4
   26b6c:	e3520000 	cmp	r2, #0
                messageHandled = _commsSockets[i].otaUpdateFn(rxData, rxBytes);                
        }
        else
        {
            // LogWrite(FromCmdHandler, LOG_DEBUG, "CommsSocket %d rxFile %d", i, _commsSockets[i].receivedFileFn);
            if (_commsSockets[i].receivedFileFn)
   26b70:	e0853003 	add	r3, r5, r3
        if (!_commsSockets[i].enabled)
   26b74:	0a000009 	beq	26ba0 <CommandHandler::commsSocketHandleReceivedFile(char const*, unsigned char*, int, bool)+0x6c>
            if (_commsSockets[i].receivedFileFn)
   26b78:	e593300c 	ldr	r3, [r3, #12]
   26b7c:	e3530000 	cmp	r3, #0
   26b80:	0a000006 	beq	26ba0 <CommandHandler::commsSocketHandleReceivedFile(char const*, unsigned char*, int, bool)+0x6c>
                messageHandled = _commsSockets[i].receivedFileFn(fileStartInfo, rxData, rxBytes);
   26b84:	e1a02007 	mov	r2, r7
   26b88:	e1a01006 	mov	r1, r6
   26b8c:	e1a00009 	mov	r0, r9
   26b90:	e12fff33 	blx	r3
        }
        if (messageHandled)
   26b94:	e3500000 	cmp	r0, #0
   26b98:	18bd87f0 	popne	{r4, r5, r6, r7, r8, r9, sl, pc}
   26b9c:	e598c008 	ldr	ip, [r8, #8]
    for (int i = 0; i < _commsSocketCount; i++)
   26ba0:	e2844001 	add	r4, r4, #1
   26ba4:	e15c0004 	cmp	ip, r4
   26ba8:	caffffed 	bgt	26b64 <CommandHandler::commsSocketHandleReceivedFile(char const*, unsigned char*, int, bool)+0x30>
   26bac:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   26bb0:	e3a04000 	mov	r4, #0
   26bb4:	e288500c 	add	r5, r8, #12
        if (!_commsSockets[i].enabled)
   26bb8:	e7d53204 	ldrb	r3, [r5, r4, lsl #4]
   26bbc:	e1a01204 	lsl	r1, r4, #4
   26bc0:	e3530000 	cmp	r3, #0
            if(_commsSockets[i].otaUpdateFn)
   26bc4:	e0851001 	add	r1, r5, r1
    for (int i = 0; i < _commsSocketCount; i++)
   26bc8:	e2844001 	add	r4, r4, #1
        if (!_commsSockets[i].enabled)
   26bcc:	0a000008 	beq	26bf4 <CommandHandler::commsSocketHandleReceivedFile(char const*, unsigned char*, int, bool)+0xc0>
            if(_commsSockets[i].otaUpdateFn)
   26bd0:	e5913008 	ldr	r3, [r1, #8]
   26bd4:	e3530000 	cmp	r3, #0
   26bd8:	0a000005 	beq	26bf4 <CommandHandler::commsSocketHandleReceivedFile(char const*, unsigned char*, int, bool)+0xc0>
                messageHandled = _commsSockets[i].otaUpdateFn(rxData, rxBytes);                
   26bdc:	e1a01007 	mov	r1, r7
   26be0:	e1a00006 	mov	r0, r6
   26be4:	e12fff33 	blx	r3
        if (messageHandled)
   26be8:	e3500000 	cmp	r0, #0
   26bec:	18bd87f0 	popne	{r4, r5, r6, r7, r8, r9, sl, pc}
   26bf0:	e598c008 	ldr	ip, [r8, #8]
    for (int i = 0; i < _commsSocketCount; i++)
   26bf4:	e154000c 	cmp	r4, ip
   26bf8:	baffffee 	blt	26bb8 <CommandHandler::commsSocketHandleReceivedFile(char const*, unsigned char*, int, bool)+0x84>
   26bfc:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   26c00:	0006fca4 	.word	0x0006fca4

00026c04 <CommandHandler::handleFileStart(char const*)>:
// File Reception - start
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// Handle reception of file start block
void CommandHandler::handleFileStart(const char* pCmdJson)
{
   26c04:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    // Start a file upload - get file name
    if (!jsonGetValueForKey("fileName", pCmdJson, _receivedFileName, MAX_FILE_NAME_STR))
   26c08:	e2804b61 	add	r4, r0, #99328	; 0x18400
   26c0c:	e2844fb2 	add	r4, r4, #712	; 0x2c8
{
   26c10:	e24dd018 	sub	sp, sp, #24
   26c14:	e1a05000 	mov	r5, r0
    if (!jsonGetValueForKey("fileName", pCmdJson, _receivedFileName, MAX_FILE_NAME_STR))
   26c18:	e1a02004 	mov	r2, r4
   26c1c:	e3a03064 	mov	r3, #100	; 0x64
   26c20:	e59f0128 	ldr	r0, [pc, #296]	; 26d50 <CommandHandler::handleFileStart(char const*)+0x14c>
{
   26c24:	e1a06001 	mov	r6, r1
    if (!jsonGetValueForKey("fileName", pCmdJson, _receivedFileName, MAX_FILE_NAME_STR))
   26c28:	ebfff76f 	bl	249ec <jsonGetValueForKey>
   26c2c:	e3500000 	cmp	r0, #0
   26c30:	1a000001 	bne	26c3c <CommandHandler::handleFileStart(char const*)+0x38>
        _receivedFileBufSize = 0;
        LogWrite(FromCmdHandler, LOG_WARNING, "efStart unable to allocate memory for file %s, bufSize %d", 
                    _receivedFileName, _receivedFileBufSize);

    }
}
   26c34:	e28dd018 	add	sp, sp, #24
   26c38:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    LogWrite(FromCmdHandler, LOG_VERBOSE, "ufStart File %s, toPtr %08x", 
   26c3c:	e2857906 	add	r7, r5, #98304	; 0x18000
   26c40:	e5972820 	ldr	r2, [r7, #2080]	; 0x820
   26c44:	e1a03004 	mov	r3, r4
   26c48:	e58d2000 	str	r2, [sp]
   26c4c:	e3a01005 	mov	r1, #5
   26c50:	e59f20fc 	ldr	r2, [pc, #252]	; 26d54 <CommandHandler::handleFileStart(char const*)+0x150>
   26c54:	e59f00fc 	ldr	r0, [pc, #252]	; 26d58 <CommandHandler::handleFileStart(char const*)+0x154>
   26c58:	ebfff546 	bl	24178 <LogWrite>
    if (!jsonGetValueForKey("fileType", pCmdJson, _pReceivedFileType, MAX_FILE_TYPE_STR))
   26c5c:	e59f20f8 	ldr	r2, [pc, #248]	; 26d5c <CommandHandler::handleFileStart(char const*)+0x158>
   26c60:	e3a03028 	mov	r3, #40	; 0x28
   26c64:	e0852002 	add	r2, r5, r2
   26c68:	e1a01006 	mov	r1, r6
   26c6c:	e59f00ec 	ldr	r0, [pc, #236]	; 26d60 <CommandHandler::handleFileStart(char const*)+0x15c>
   26c70:	ebfff75d 	bl	249ec <jsonGetValueForKey>
   26c74:	e3500000 	cmp	r0, #0
   26c78:	0affffed 	beq	26c34 <CommandHandler::handleFileStart(char const*)+0x30>
    LogWrite(FromCmdHandler, LOG_VERBOSE, "ufStart FileType %s", 
   26c7c:	e1a03004 	mov	r3, r4
   26c80:	e59f20dc 	ldr	r2, [pc, #220]	; 26d64 <CommandHandler::handleFileStart(char const*)+0x160>
   26c84:	e3a01005 	mov	r1, #5
   26c88:	e59f00c8 	ldr	r0, [pc, #200]	; 26d58 <CommandHandler::handleFileStart(char const*)+0x154>
   26c8c:	ebfff539 	bl	24178 <LogWrite>
    if (!jsonGetValueForKey("fileLen", pCmdJson, fileLenStr, MAX_INT_ARG_STR_LEN))
   26c90:	e28d200c 	add	r2, sp, #12
   26c94:	e3a0300a 	mov	r3, #10
   26c98:	e1a01006 	mov	r1, r6
   26c9c:	e59f00c4 	ldr	r0, [pc, #196]	; 26d68 <CommandHandler::handleFileStart(char const*)+0x164>
   26ca0:	ebfff751 	bl	249ec <jsonGetValueForKey>
   26ca4:	e3500000 	cmp	r0, #0
   26ca8:	0affffe1 	beq	26c34 <CommandHandler::handleFileStart(char const*)+0x30>
    int fileLen = strtol(fileLenStr, NULL, 10);
   26cac:	e28d000c 	add	r0, sp, #12
   26cb0:	e3a0200a 	mov	r2, #10
   26cb4:	e3a01000 	mov	r1, #0
   26cb8:	eb009d98 	bl	4e320 <strtol>
    if (fileLen <= 0)
   26cbc:	e2508000 	subs	r8, r0, #0
   26cc0:	daffffdb 	ble	26c34 <CommandHandler::handleFileStart(char const*)+0x30>
    strlcpy(_receivedFileStartInfo, pCmdJson, CMD_HANDLER_MAX_CMD_STR_LEN);
   26cc4:	e59f00a0 	ldr	r0, [pc, #160]	; 26d6c <CommandHandler::handleFileStart(char const*)+0x168>
   26cc8:	e1a01006 	mov	r1, r6
   26ccc:	e0850000 	add	r0, r5, r0
   26cd0:	e3a020c8 	mov	r2, #200	; 0xc8
   26cd4:	eb009a3b 	bl	4d5c8 <strlcpy>
    if (_pReceivedFileDataPtr != NULL)
   26cd8:	e5973820 	ldr	r3, [r7, #2080]	; 0x820
   26cdc:	e3530000 	cmp	r3, #0
   26ce0:	0a000002 	beq	26cf0 <CommandHandler::handleFileStart(char const*)+0xec>
        nmalloc_free((void**)(&_pReceivedFileDataPtr));
   26ce4:	e2850b62 	add	r0, r5, #100352	; 0x18800
   26ce8:	e2800020 	add	r0, r0, #32
   26cec:	ebfff645 	bl	24608 <nmalloc_free>
    _pReceivedFileDataPtr = (uint8_t*)nmalloc_malloc(fileLen);
   26cf0:	e1a00008 	mov	r0, r8
   26cf4:	ebfff606 	bl	24514 <nmalloc_malloc>
    _receivedFileBytesRx = 0;
   26cf8:	e3a03000 	mov	r3, #0
    if (_pReceivedFileDataPtr)
   26cfc:	e1500003 	cmp	r0, r3
    _pReceivedFileDataPtr = (uint8_t*)nmalloc_malloc(fileLen);
   26d00:	e5870820 	str	r0, [r7, #2080]	; 0x820
    _receivedFileBytesRx = 0;
   26d04:	e5873828 	str	r3, [r7, #2088]	; 0x828
    _receivedBlockCount = 0;
   26d08:	e587382c 	str	r3, [r7, #2092]	; 0x82c
    if (_pReceivedFileDataPtr)
   26d0c:	0a000007 	beq	26d30 <CommandHandler::handleFileStart(char const*)+0x12c>
        _receivedFileBufSize = fileLen;
   26d10:	e5878824 	str	r8, [r7, #2084]	; 0x824
        LogWrite(FromCmdHandler, LOG_VERBOSE, "efStart File %s, toPtr %08x, bufSize %d", 
   26d14:	e1a03004 	mov	r3, r4
   26d18:	e88d0101 	stm	sp, {r0, r8}
   26d1c:	e59f204c 	ldr	r2, [pc, #76]	; 26d70 <CommandHandler::handleFileStart(char const*)+0x16c>
   26d20:	e3a01005 	mov	r1, #5
   26d24:	e59f002c 	ldr	r0, [pc, #44]	; 26d58 <CommandHandler::handleFileStart(char const*)+0x154>
   26d28:	ebfff512 	bl	24178 <LogWrite>
   26d2c:	eaffffc0 	b	26c34 <CommandHandler::handleFileStart(char const*)+0x30>
        _receivedFileBufSize = 0;
   26d30:	e5870824 	str	r0, [r7, #2084]	; 0x824
        LogWrite(FromCmdHandler, LOG_WARNING, "efStart unable to allocate memory for file %s, bufSize %d", 
   26d34:	e1a03004 	mov	r3, r4
   26d38:	e58d0000 	str	r0, [sp]
   26d3c:	e59f2030 	ldr	r2, [pc, #48]	; 26d74 <CommandHandler::handleFileStart(char const*)+0x170>
   26d40:	e3a01002 	mov	r1, #2
   26d44:	e59f000c 	ldr	r0, [pc, #12]	; 26d58 <CommandHandler::handleFileStart(char const*)+0x154>
   26d48:	ebfff50a 	bl	24178 <LogWrite>
   26d4c:	eaffffb8 	b	26c34 <CommandHandler::handleFileStart(char const*)+0x30>
   26d50:	000540b8 	.word	0x000540b8
   26d54:	000540c4 	.word	0x000540c4
   26d58:	00054054 	.word	0x00054054
   26d5c:	0001872d 	.word	0x0001872d
   26d60:	000540e0 	.word	0x000540e0
   26d64:	000540ec 	.word	0x000540ec
   26d68:	00054100 	.word	0x00054100
   26d6c:	00018756 	.word	0x00018756
   26d70:	00054108 	.word	0x00054108
   26d74:	00054130 	.word	0x00054130

00026d78 <CommandHandler::handleFileBlock(char const*, unsigned char const*, int)>:
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// File Reception - chunk
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void CommandHandler::handleFileBlock(const char* pCmdJson, const uint8_t* pData, int dataLen)
{
   26d78:	e92d4070 	push	{r4, r5, r6, lr}
    // Check file reception in progress
    if (!_pReceivedFileDataPtr)
   26d7c:	e2804906 	add	r4, r0, #98304	; 0x18000
   26d80:	e5940820 	ldr	r0, [r4, #2080]	; 0x820
{
   26d84:	e24dd010 	sub	sp, sp, #16
    if (!_pReceivedFileDataPtr)
   26d88:	e3500000 	cmp	r0, #0
   26d8c:	0a000007 	beq	26db0 <CommandHandler::handleFileBlock(char const*, unsigned char const*, int)+0x38>
   26d90:	e1a06003 	mov	r6, r3
   26d94:	e1a05002 	mov	r5, r2
        return;

    // Get block location
    char blockStartStr[MAX_INT_ARG_STR_LEN+1];
    if (!jsonGetValueForKey("index", pCmdJson, blockStartStr, MAX_INT_ARG_STR_LEN))
   26d98:	e3a0300a 	mov	r3, #10
   26d9c:	e28d2004 	add	r2, sp, #4
   26da0:	e59f0068 	ldr	r0, [pc, #104]	; 26e10 <CommandHandler::handleFileBlock(char const*, unsigned char const*, int)+0x98>
   26da4:	ebfff710 	bl	249ec <jsonGetValueForKey>
   26da8:	e3500000 	cmp	r0, #0
   26dac:	1a000001 	bne	26db8 <CommandHandler::handleFileBlock(char const*, unsigned char const*, int)+0x40>
    memcpy(_pReceivedFileDataPtr+blockStart, pData, dataLen);
    _receivedFileBytesRx += dataLen;

    // Add to count of blocks
    _receivedBlockCount++;
}
   26db0:	e28dd010 	add	sp, sp, #16
   26db4:	e8bd8070 	pop	{r4, r5, r6, pc}
    int blockStart = strtol(blockStartStr, NULL, 10);
   26db8:	e28d0004 	add	r0, sp, #4
   26dbc:	e3a0200a 	mov	r2, #10
   26dc0:	e3a01000 	mov	r1, #0
   26dc4:	eb009d55 	bl	4e320 <strtol>
    if (blockStart < 0)
   26dc8:	e3500000 	cmp	r0, #0
   26dcc:	bafffff7 	blt	26db0 <CommandHandler::handleFileBlock(char const*, unsigned char const*, int)+0x38>
    if (blockStart + dataLen > _receivedFileBufSize)
   26dd0:	e5943824 	ldr	r3, [r4, #2084]	; 0x824
   26dd4:	e0802006 	add	r2, r0, r6
   26dd8:	e1520003 	cmp	r2, r3
   26ddc:	cafffff3 	bgt	26db0 <CommandHandler::handleFileBlock(char const*, unsigned char const*, int)+0x38>
    memcpy(_pReceivedFileDataPtr+blockStart, pData, dataLen);
   26de0:	e5943820 	ldr	r3, [r4, #2080]	; 0x820
   26de4:	e1a02006 	mov	r2, r6
   26de8:	e0830000 	add	r0, r3, r0
   26dec:	e1a01005 	mov	r1, r5
   26df0:	eb0097dc 	bl	4cd68 <memcpy>
    _receivedFileBytesRx += dataLen;
   26df4:	e5943828 	ldr	r3, [r4, #2088]	; 0x828
    _receivedBlockCount++;
   26df8:	e594282c 	ldr	r2, [r4, #2092]	; 0x82c
    _receivedFileBytesRx += dataLen;
   26dfc:	e0833006 	add	r3, r3, r6
    _receivedBlockCount++;
   26e00:	e2822001 	add	r2, r2, #1
    _receivedFileBytesRx += dataLen;
   26e04:	e5843828 	str	r3, [r4, #2088]	; 0x828
    _receivedBlockCount++;
   26e08:	e584282c 	str	r2, [r4, #2092]	; 0x82c
   26e0c:	eaffffe7 	b	26db0 <CommandHandler::handleFileBlock(char const*, unsigned char const*, int)+0x38>
   26e10:	0005416c 	.word	0x0005416c

00026e14 <CommandHandler::sendKeyCodeToTarget(int)>:
// Send key code to target
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// Send key code to target
void CommandHandler::sendKeyCodeToTarget(int keyCode)
{
   26e14:	e92d4070 	push	{r4, r5, r6, lr}
    static const int MAX_KEY_CMD_STR_LEN = 100;
    static char keyStr[MAX_KEY_CMD_STR_LEN+1];
    strlcpy(keyStr, "{\"cmdName\":\"keyCode\",\"key\":", MAX_KEY_CMD_STR_LEN);
   26e18:	e59f5070 	ldr	r5, [pc, #112]	; 26e90 <CommandHandler::sendKeyCodeToTarget(int)+0x7c>
   26e1c:	e3a02064 	mov	r2, #100	; 0x64
   26e20:	e28540ac 	add	r4, r5, #172	; 0xac
   26e24:	e59f1068 	ldr	r1, [pc, #104]	; 26e94 <CommandHandler::sendKeyCodeToTarget(int)+0x80>
{
   26e28:	e1a06000 	mov	r6, r0
    strlcpy(keyStr, "{\"cmdName\":\"keyCode\",\"key\":", MAX_KEY_CMD_STR_LEN);
   26e2c:	e1a00004 	mov	r0, r4
   26e30:	eb0099e4 	bl	4d5c8 <strlcpy>
    rditoa(keyCode, (uint8_t*)(keyStr+strlen(keyStr)), 10, 10);
   26e34:	e1a00004 	mov	r0, r4
   26e38:	eb0099f7 	bl	4d61c <strlen>
   26e3c:	e3a0300a 	mov	r3, #10
   26e40:	e0841000 	add	r1, r4, r0
   26e44:	e1a02003 	mov	r2, r3
   26e48:	e1a00006 	mov	r0, r6
   26e4c:	ebfff82a 	bl	24efc <rditoa>
    strlcpy(keyStr+strlen(keyStr), "}", MAX_KEY_CMD_STR_LEN);
   26e50:	e1a00004 	mov	r0, r4
   26e54:	eb0099f0 	bl	4d61c <strlen>
   26e58:	e3a02064 	mov	r2, #100	; 0x64
   26e5c:	e0840000 	add	r0, r4, r0
   26e60:	e59f1030 	ldr	r1, [pc, #48]	; 26e98 <CommandHandler::sendKeyCodeToTarget(int)+0x84>
   26e64:	eb0099d7 	bl	4d5c8 <strlcpy>
    if (_pSingletonCommandHandler)
   26e68:	e5955000 	ldr	r5, [r5]
   26e6c:	e3550000 	cmp	r5, #0
   26e70:	08bd8070 	popeq	{r4, r5, r6, pc}
        _pSingletonCommandHandler->_miniHDLC.sendFrame((const uint8_t*)keyStr, strlen(keyStr)+1);
   26e74:	e1a00004 	mov	r0, r4
   26e78:	eb0099e7 	bl	4d61c <strlen>
   26e7c:	e1a01004 	mov	r1, r4
   26e80:	e2802001 	add	r2, r0, #1
   26e84:	e1a00005 	mov	r0, r5
}
   26e88:	e8bd4070 	pop	{r4, r5, r6, lr}
        _pSingletonCommandHandler->_miniHDLC.sendFrame((const uint8_t*)keyStr, strlen(keyStr)+1);
   26e8c:	ea000558 	b	283f4 <MiniHDLC::sendFrame(unsigned char const*, int)>
   26e90:	0006fca4 	.word	0x0006fca4
   26e94:	00054174 	.word	0x00054174
   26e98:	000542b4 	.word	0x000542b4

00026e9c <CommandHandler::sendWithJSON(char const*, char const*, unsigned long, unsigned char const*, unsigned long)>:
// Send with JSON payload
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void CommandHandler::sendWithJSON(const char* cmdName, const char* cmdJson, uint32_t msgIdx, 
            const uint8_t* pData, uint32_t dataLen)
{
   26e9c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   26ea0:	e1a07000 	mov	r7, r0
   26ea4:	e1a06001 	mov	r6, r1
   26ea8:	e59d5018 	ldr	r5, [sp, #24]
    static char dataFrame[MAX_DATAFRAME_LEN];
    static char indexStr[10];
    itoa(msgIdx, indexStr, 10);
    static char lenStr[10];
    itoa(dataLen, lenStr, 10);
    strlcpy(dataFrame, "{\"cmdName\":\"", MAX_DATAFRAME_LEN);
   26eac:	e59f413c 	ldr	r4, [pc, #316]	; 26ff0 <CommandHandler::sendWithJSON(char const*, char const*, unsigned long, unsigned char const*, unsigned long)+0x154>
    itoa(msgIdx, indexStr, 10);
   26eb0:	e1a00002 	mov	r0, r2
   26eb4:	e59f1138 	ldr	r1, [pc, #312]	; 26ff4 <CommandHandler::sendWithJSON(char const*, char const*, unsigned long, unsigned char const*, unsigned long)+0x158>
   26eb8:	e3a0200a 	mov	r2, #10
{
   26ebc:	e1a08003 	mov	r8, r3
    itoa(msgIdx, indexStr, 10);
   26ec0:	eb009766 	bl	4cc60 <itoa>
    itoa(dataLen, lenStr, 10);
   26ec4:	e3a0200a 	mov	r2, #10
   26ec8:	e59f1128 	ldr	r1, [pc, #296]	; 26ff8 <CommandHandler::sendWithJSON(char const*, char const*, unsigned long, unsigned char const*, unsigned long)+0x15c>
   26ecc:	e1a00005 	mov	r0, r5
   26ed0:	eb009762 	bl	4cc60 <itoa>
    strlcpy(dataFrame, "{\"cmdName\":\"", MAX_DATAFRAME_LEN);
   26ed4:	e59f2120 	ldr	r2, [pc, #288]	; 26ffc <CommandHandler::sendWithJSON(char const*, char const*, unsigned long, unsigned char const*, unsigned long)+0x160>
   26ed8:	e59f1120 	ldr	r1, [pc, #288]	; 27000 <CommandHandler::sendWithJSON(char const*, char const*, unsigned long, unsigned char const*, unsigned long)+0x164>
   26edc:	e1a00004 	mov	r0, r4
   26ee0:	eb0099b8 	bl	4d5c8 <strlcpy>
    strlcat(dataFrame, cmdName, MAX_DATAFRAME_LEN);
   26ee4:	e1a01007 	mov	r1, r7
   26ee8:	e59f210c 	ldr	r2, [pc, #268]	; 26ffc <CommandHandler::sendWithJSON(char const*, char const*, unsigned long, unsigned char const*, unsigned long)+0x160>
   26eec:	e1a00004 	mov	r0, r4
   26ef0:	eb009984 	bl	4d508 <strlcat>
    strlcat(dataFrame, "\"", MAX_DATAFRAME_LEN);
   26ef4:	e1a00004 	mov	r0, r4
   26ef8:	e59f20fc 	ldr	r2, [pc, #252]	; 26ffc <CommandHandler::sendWithJSON(char const*, char const*, unsigned long, unsigned char const*, unsigned long)+0x160>
   26efc:	e59f1100 	ldr	r1, [pc, #256]	; 27004 <CommandHandler::sendWithJSON(char const*, char const*, unsigned long, unsigned char const*, unsigned long)+0x168>
   26f00:	eb009980 	bl	4d508 <strlcat>
    if (strlen(cmdJson) > 0)
   26f04:	e5d63000 	ldrb	r3, [r6]
   26f08:	e3530000 	cmp	r3, #0
   26f0c:	1a00002e 	bne	26fcc <CommandHandler::sendWithJSON(char const*, char const*, unsigned long, unsigned char const*, unsigned long)+0x130>
    {
        strlcat(dataFrame, ",", MAX_DATAFRAME_LEN);
        strlcat(dataFrame, cmdJson, MAX_DATAFRAME_LEN);
    }
    strlcat(dataFrame, ",\"msgIdx\":", MAX_DATAFRAME_LEN);
   26f10:	e59f20e4 	ldr	r2, [pc, #228]	; 26ffc <CommandHandler::sendWithJSON(char const*, char const*, unsigned long, unsigned char const*, unsigned long)+0x160>
   26f14:	e59f10ec 	ldr	r1, [pc, #236]	; 27008 <CommandHandler::sendWithJSON(char const*, char const*, unsigned long, unsigned char const*, unsigned long)+0x16c>
   26f18:	e59f00d0 	ldr	r0, [pc, #208]	; 26ff0 <CommandHandler::sendWithJSON(char const*, char const*, unsigned long, unsigned char const*, unsigned long)+0x154>
   26f1c:	eb009979 	bl	4d508 <strlcat>
    strlcat(dataFrame, indexStr, MAX_DATAFRAME_LEN);
   26f20:	e59f20d4 	ldr	r2, [pc, #212]	; 26ffc <CommandHandler::sendWithJSON(char const*, char const*, unsigned long, unsigned char const*, unsigned long)+0x160>
   26f24:	e59f10c8 	ldr	r1, [pc, #200]	; 26ff4 <CommandHandler::sendWithJSON(char const*, char const*, unsigned long, unsigned char const*, unsigned long)+0x158>
   26f28:	e59f00c0 	ldr	r0, [pc, #192]	; 26ff0 <CommandHandler::sendWithJSON(char const*, char const*, unsigned long, unsigned char const*, unsigned long)+0x154>
   26f2c:	eb009975 	bl	4d508 <strlcat>
    strlcat(dataFrame, ",\"dataLen\":", MAX_DATAFRAME_LEN);
   26f30:	e59f20c4 	ldr	r2, [pc, #196]	; 26ffc <CommandHandler::sendWithJSON(char const*, char const*, unsigned long, unsigned char const*, unsigned long)+0x160>
   26f34:	e59f10d0 	ldr	r1, [pc, #208]	; 2700c <CommandHandler::sendWithJSON(char const*, char const*, unsigned long, unsigned char const*, unsigned long)+0x170>
   26f38:	e59f00b0 	ldr	r0, [pc, #176]	; 26ff0 <CommandHandler::sendWithJSON(char const*, char const*, unsigned long, unsigned char const*, unsigned long)+0x154>
   26f3c:	eb009971 	bl	4d508 <strlcat>
    strlcat(dataFrame, lenStr, MAX_DATAFRAME_LEN);
   26f40:	e59f20b4 	ldr	r2, [pc, #180]	; 26ffc <CommandHandler::sendWithJSON(char const*, char const*, unsigned long, unsigned char const*, unsigned long)+0x160>
   26f44:	e59f10ac 	ldr	r1, [pc, #172]	; 26ff8 <CommandHandler::sendWithJSON(char const*, char const*, unsigned long, unsigned char const*, unsigned long)+0x15c>
   26f48:	e59f00a0 	ldr	r0, [pc, #160]	; 26ff0 <CommandHandler::sendWithJSON(char const*, char const*, unsigned long, unsigned char const*, unsigned long)+0x154>
   26f4c:	eb00996d 	bl	4d508 <strlcat>
    strlcat(dataFrame, "}", MAX_DATAFRAME_LEN);
   26f50:	e59f20a4 	ldr	r2, [pc, #164]	; 26ffc <CommandHandler::sendWithJSON(char const*, char const*, unsigned long, unsigned char const*, unsigned long)+0x160>
   26f54:	e59f10b4 	ldr	r1, [pc, #180]	; 27010 <CommandHandler::sendWithJSON(char const*, char const*, unsigned long, unsigned char const*, unsigned long)+0x174>
   26f58:	e59f0090 	ldr	r0, [pc, #144]	; 26ff0 <CommandHandler::sendWithJSON(char const*, char const*, unsigned long, unsigned char const*, unsigned long)+0x154>
   26f5c:	eb009969 	bl	4d508 <strlcat>
    // Allow for two terminators (one after JSON and one at end of binary section)
    uint32_t dataFrameBinaryPos = strlen(dataFrame)+1;
   26f60:	e59f0088 	ldr	r0, [pc, #136]	; 26ff0 <CommandHandler::sendWithJSON(char const*, char const*, unsigned long, unsigned char const*, unsigned long)+0x154>
   26f64:	eb0099ac 	bl	4d61c <strlen>
   26f68:	e2800001 	add	r0, r0, #1
    uint32_t dataFrameTotalLen = dataFrameBinaryPos+dataLen+1; 
   26f6c:	e0856000 	add	r6, r5, r0
    // LogWrite(FromCmdHandler, LOG_DEBUG, "SEND DATA cmd %s dataFr %s dataFrameLen %d tooLong %d msg %s",
    //             cmdName, dataFrame, dataFrameLen, dataFrameLen >= MAX_DATAFRAME_LEN, (pData ? pData : ""));
    if (dataFrameTotalLen >= MAX_DATAFRAME_LEN)
   26f70:	e59f309c 	ldr	r3, [pc, #156]	; 27014 <CommandHandler::sendWithJSON(char const*, char const*, unsigned long, unsigned char const*, unsigned long)+0x178>
    uint32_t dataFrameTotalLen = dataFrameBinaryPos+dataLen+1; 
   26f74:	e2867001 	add	r7, r6, #1
    if (dataFrameTotalLen >= MAX_DATAFRAME_LEN)
   26f78:	e1570003 	cmp	r7, r3
   26f7c:	88bd81f0 	pophi	{r4, r5, r6, r7, r8, pc}
        return;
    if (dataLen > 0)
   26f80:	e3550000 	cmp	r5, #0
   26f84:	1a000009 	bne	26fb0 <CommandHandler::sendWithJSON(char const*, char const*, unsigned long, unsigned char const*, unsigned long)+0x114>
            memcpy(dataFrame+dataFrameBinaryPos, pData, dataLen);
        else
            return;
    }
    // Terminate the binary portion two (belt-and-braces!)
    dataFrame[dataFrameTotalLen-1] = 0;
   26f88:	e3a02000 	mov	r2, #0
    if (_pSingletonCommandHandler)
   26f8c:	e59f3084 	ldr	r3, [pc, #132]	; 27018 <CommandHandler::sendWithJSON(char const*, char const*, unsigned long, unsigned char const*, unsigned long)+0x17c>
    dataFrame[dataFrameTotalLen-1] = 0;
   26f90:	e7c42006 	strb	r2, [r4, r6]
    if (_pSingletonCommandHandler)
   26f94:	e5930000 	ldr	r0, [r3]
   26f98:	e1500002 	cmp	r0, r2
   26f9c:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
        _pSingletonCommandHandler->_miniHDLC.sendFrame((const uint8_t*)dataFrame, dataFrameTotalLen);
   26fa0:	e1a02007 	mov	r2, r7
}
   26fa4:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
        _pSingletonCommandHandler->_miniHDLC.sendFrame((const uint8_t*)dataFrame, dataFrameTotalLen);
   26fa8:	e59f1040 	ldr	r1, [pc, #64]	; 26ff0 <CommandHandler::sendWithJSON(char const*, char const*, unsigned long, unsigned char const*, unsigned long)+0x154>
   26fac:	ea000510 	b	283f4 <MiniHDLC::sendFrame(unsigned char const*, int)>
        if (pData)
   26fb0:	e3580000 	cmp	r8, #0
   26fb4:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
            memcpy(dataFrame+dataFrameBinaryPos, pData, dataLen);
   26fb8:	e1a02005 	mov	r2, r5
   26fbc:	e1a01008 	mov	r1, r8
   26fc0:	e0840000 	add	r0, r4, r0
   26fc4:	eb009767 	bl	4cd68 <memcpy>
   26fc8:	eaffffee 	b	26f88 <CommandHandler::sendWithJSON(char const*, char const*, unsigned long, unsigned char const*, unsigned long)+0xec>
        strlcat(dataFrame, ",", MAX_DATAFRAME_LEN);
   26fcc:	e59f2028 	ldr	r2, [pc, #40]	; 26ffc <CommandHandler::sendWithJSON(char const*, char const*, unsigned long, unsigned char const*, unsigned long)+0x160>
   26fd0:	e59f1044 	ldr	r1, [pc, #68]	; 2701c <CommandHandler::sendWithJSON(char const*, char const*, unsigned long, unsigned char const*, unsigned long)+0x180>
   26fd4:	e1a00004 	mov	r0, r4
   26fd8:	eb00994a 	bl	4d508 <strlcat>
        strlcat(dataFrame, cmdJson, MAX_DATAFRAME_LEN);
   26fdc:	e1a01006 	mov	r1, r6
   26fe0:	e59f2014 	ldr	r2, [pc, #20]	; 26ffc <CommandHandler::sendWithJSON(char const*, char const*, unsigned long, unsigned char const*, unsigned long)+0x160>
   26fe4:	e1a00004 	mov	r0, r4
   26fe8:	eb009946 	bl	4d508 <strlcat>
   26fec:	eaffffc7 	b	26f10 <CommandHandler::sendWithJSON(char const*, char const*, unsigned long, unsigned char const*, unsigned long)+0x74>
   26ff0:	0006fe38 	.word	0x0006fe38
   26ff4:	0006fdb8 	.word	0x0006fdb8
   26ff8:	0006fdc4 	.word	0x0006fdc4
   26ffc:	00002710 	.word	0x00002710
   27000:	00054190 	.word	0x00054190
   27004:	00053ca4 	.word	0x00053ca4
   27008:	000541a4 	.word	0x000541a4
   2700c:	000541b0 	.word	0x000541b0
   27010:	000542b4 	.word	0x000542b4
   27014:	0000270f 	.word	0x0000270f
   27018:	0006fca4 	.word	0x0006fca4
   2701c:	000541a0 	.word	0x000541a0

00027020 <CommandHandler::handleFileEnd(char const*)>:
{
   27020:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    if (!_pReceivedFileDataPtr)
   27024:	e2805906 	add	r5, r0, #98304	; 0x18000
   27028:	e5953820 	ldr	r3, [r5, #2080]	; 0x820
{
   2702c:	e24dd078 	sub	sp, sp, #120	; 0x78
    if (!_pReceivedFileDataPtr)
   27030:	e3530000 	cmp	r3, #0
   27034:	0a000006 	beq	27054 <CommandHandler::handleFileEnd(char const*)+0x34>
   27038:	e1a04000 	mov	r4, r0
    if (!jsonGetValueForKey("blockCount", pCmdJson, blockCountStr, MAX_INT_ARG_STR_LEN))
   2703c:	e28d2008 	add	r2, sp, #8
   27040:	e3a0300a 	mov	r3, #10
   27044:	e59f01bc 	ldr	r0, [pc, #444]	; 27208 <CommandHandler::handleFileEnd(char const*)+0x1e8>
   27048:	ebfff667 	bl	249ec <jsonGetValueForKey>
   2704c:	e3500000 	cmp	r0, #0
   27050:	1a000001 	bne	2705c <CommandHandler::handleFileEnd(char const*)+0x3c>
}
   27054:	e28dd078 	add	sp, sp, #120	; 0x78
   27058:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    int blockCount = strtoul(blockCountStr, NULL, 10);
   2705c:	e3a0200a 	mov	r2, #10
   27060:	e3a01000 	mov	r1, #0
   27064:	e28d0008 	add	r0, sp, #8
   27068:	eb009d4f 	bl	4e5ac <strtoul>
   2706c:	e1a06000 	mov	r6, r0
    ee_sprintf(ackMsgJson, "\"rxCount\":%d, \"expCount\":%d", _receivedBlockCount, blockCount);
   27070:	e1a03000 	mov	r3, r0
   27074:	e595282c 	ldr	r2, [r5, #2092]	; 0x82c
   27078:	e28d0014 	add	r0, sp, #20
   2707c:	e59f1188 	ldr	r1, [pc, #392]	; 2720c <CommandHandler::handleFileEnd(char const*)+0x1ec>
   27080:	ebffef49 	bl	22dac <ee_sprintf>
    if (blockCount != _receivedBlockCount)
   27084:	e595282c 	ldr	r2, [r5, #2092]	; 0x82c
   27088:	e1520006 	cmp	r2, r6
   2708c:	0a00000e 	beq	270cc <CommandHandler::handleFileEnd(char const*)+0xac>
        LogWrite(FromCmdHandler, LOG_WARNING, "efEnd File %s, blockCount rx %d != sent %d", 
   27090:	e2843b61 	add	r3, r4, #99328	; 0x18400
   27094:	e88d0044 	stm	sp, {r2, r6}
   27098:	e2833fb2 	add	r3, r3, #712	; 0x2c8
   2709c:	e59f216c 	ldr	r2, [pc, #364]	; 27210 <CommandHandler::handleFileEnd(char const*)+0x1f0>
   270a0:	e3a01002 	mov	r1, #2
   270a4:	e59f0168 	ldr	r0, [pc, #360]	; 27214 <CommandHandler::handleFileEnd(char const*)+0x1f4>
   270a8:	ebfff432 	bl	24178 <LogWrite>
        sendWithJSON("ufEndNotAck", ackMsgJson);
   270ac:	e3a03000 	mov	r3, #0
   270b0:	e28d1014 	add	r1, sp, #20
   270b4:	e58d3000 	str	r3, [sp]
   270b8:	e1a02003 	mov	r2, r3
   270bc:	e59f0154 	ldr	r0, [pc, #340]	; 27218 <CommandHandler::handleFileEnd(char const*)+0x1f8>
   270c0:	ebffff75 	bl	26e9c <CommandHandler::sendWithJSON(char const*, char const*, unsigned long, unsigned char const*, unsigned long)>
}
   270c4:	e28dd078 	add	sp, sp, #120	; 0x78
   270c8:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
        sendWithJSON("ufEndAck", ackMsgJson);
   270cc:	e3a07000 	mov	r7, #0
   270d0:	e28d1014 	add	r1, sp, #20
   270d4:	e1a03007 	mov	r3, r7
   270d8:	e1a02007 	mov	r2, r7
   270dc:	e59f0138 	ldr	r0, [pc, #312]	; 2721c <CommandHandler::handleFileEnd(char const*)+0x1fc>
   270e0:	e58d7000 	str	r7, [sp]
   270e4:	ebffff6c 	bl	26e9c <CommandHandler::sendWithJSON(char const*, char const*, unsigned long, unsigned char const*, unsigned long)>
    bool isFirmware = strcasecmp(_pReceivedFileType, "firmware") == 0;
   270e8:	e59f0130 	ldr	r0, [pc, #304]	; 27220 <CommandHandler::handleFileEnd(char const*)+0x200>
   270ec:	e59f1130 	ldr	r1, [pc, #304]	; 27224 <CommandHandler::handleFileEnd(char const*)+0x204>
   270f0:	e0840000 	add	r0, r4, r0
   270f4:	eb0097a4 	bl	4cf8c <strcasecmp>
    if (isFirmware)
   270f8:	e2506000 	subs	r6, r0, #0
   270fc:	0a00001e 	beq	2717c <CommandHandler::handleFileEnd(char const*)+0x15c>
    for (int i = 0; i < _commsSocketCount; i++)
   27100:	e59f8120 	ldr	r8, [pc, #288]	; 27228 <CommandHandler::handleFileEnd(char const*)+0x208>
    commsSocketHandleReceivedFile(_receivedFileStartInfo, _pReceivedFileDataPtr, _receivedFileBytesRx, isFirmware);
   27104:	e59f6120 	ldr	r6, [pc, #288]	; 2722c <CommandHandler::handleFileEnd(char const*)+0x20c>
    for (int i = 0; i < _commsSocketCount; i++)
   27108:	e5981008 	ldr	r1, [r8, #8]
    commsSocketHandleReceivedFile(_receivedFileStartInfo, _pReceivedFileDataPtr, _receivedFileBytesRx, isFirmware);
   2710c:	e0846006 	add	r6, r4, r6
    for (int i = 0; i < _commsSocketCount; i++)
   27110:	e3510000 	cmp	r1, #0
    commsSocketHandleReceivedFile(_receivedFileStartInfo, _pReceivedFileDataPtr, _receivedFileBytesRx, isFirmware);
   27114:	e5959820 	ldr	r9, [r5, #2080]	; 0x820
   27118:	e595a828 	ldr	sl, [r5, #2088]	; 0x828
    for (int i = 0; i < _commsSocketCount; i++)
   2711c:	da000013 	ble	27170 <CommandHandler::handleFileEnd(char const*)+0x150>
   27120:	e1a04007 	mov	r4, r7
   27124:	e288700c 	add	r7, r8, #12
        if (!_commsSockets[i].enabled)
   27128:	e7d72204 	ldrb	r2, [r7, r4, lsl #4]
   2712c:	e1a03204 	lsl	r3, r4, #4
   27130:	e3520000 	cmp	r2, #0
            if (_commsSockets[i].receivedFileFn)
   27134:	e0873003 	add	r3, r7, r3
        if (!_commsSockets[i].enabled)
   27138:	0a000009 	beq	27164 <CommandHandler::handleFileEnd(char const*)+0x144>
            if (_commsSockets[i].receivedFileFn)
   2713c:	e593300c 	ldr	r3, [r3, #12]
   27140:	e3530000 	cmp	r3, #0
   27144:	0a000006 	beq	27164 <CommandHandler::handleFileEnd(char const*)+0x144>
                messageHandled = _commsSockets[i].receivedFileFn(fileStartInfo, rxData, rxBytes);
   27148:	e1a0200a 	mov	r2, sl
   2714c:	e1a01009 	mov	r1, r9
   27150:	e1a00006 	mov	r0, r6
   27154:	e12fff33 	blx	r3
        if (messageHandled)
   27158:	e3500000 	cmp	r0, #0
   2715c:	1a000003 	bne	27170 <CommandHandler::handleFileEnd(char const*)+0x150>
   27160:	e5981008 	ldr	r1, [r8, #8]
    for (int i = 0; i < _commsSocketCount; i++)
   27164:	e2844001 	add	r4, r4, #1
   27168:	e1510004 	cmp	r1, r4
   2716c:	caffffed 	bgt	27128 <CommandHandler::handleFileEnd(char const*)+0x108>
    _pReceivedFileDataPtr = NULL;
   27170:	e3a03000 	mov	r3, #0
   27174:	e5853820 	str	r3, [r5, #2080]	; 0x820
   27178:	eaffffb5 	b	27054 <CommandHandler::handleFileEnd(char const*)+0x34>
        microsDelay(100000);
   2717c:	e59f00ac 	ldr	r0, [pc, #172]	; 27230 <CommandHandler::handleFileEnd(char const*)+0x210>
   27180:	eb003d88 	bl	367a8 <microsDelay>
        LogWrite(FromCmdHandler, LOG_DEBUG, "efEnd IMG firmware update File %s, len %d", _receivedFileName, _receivedFileBytesRx);
   27184:	e5952828 	ldr	r2, [r5, #2088]	; 0x828
   27188:	e2843b61 	add	r3, r4, #99328	; 0x18400
    for (int i = 0; i < _commsSocketCount; i++)
   2718c:	e59f8094 	ldr	r8, [pc, #148]	; 27228 <CommandHandler::handleFileEnd(char const*)+0x208>
        LogWrite(FromCmdHandler, LOG_DEBUG, "efEnd IMG firmware update File %s, len %d", _receivedFileName, _receivedFileBytesRx);
   27190:	e58d2000 	str	r2, [sp]
   27194:	e3a01004 	mov	r1, #4
   27198:	e2833fb2 	add	r3, r3, #712	; 0x2c8
   2719c:	e59f2090 	ldr	r2, [pc, #144]	; 27234 <CommandHandler::handleFileEnd(char const*)+0x214>
   271a0:	e59f006c 	ldr	r0, [pc, #108]	; 27214 <CommandHandler::handleFileEnd(char const*)+0x1f4>
   271a4:	ebfff3f3 	bl	24178 <LogWrite>
    for (int i = 0; i < _commsSocketCount; i++)
   271a8:	e5981008 	ldr	r1, [r8, #8]
    commsSocketHandleReceivedFile(_receivedFileStartInfo, _pReceivedFileDataPtr, _receivedFileBytesRx, isFirmware);
   271ac:	e5954820 	ldr	r4, [r5, #2080]	; 0x820
    for (int i = 0; i < _commsSocketCount; i++)
   271b0:	e1510007 	cmp	r1, r7
    commsSocketHandleReceivedFile(_receivedFileStartInfo, _pReceivedFileDataPtr, _receivedFileBytesRx, isFirmware);
   271b4:	e5959828 	ldr	r9, [r5, #2088]	; 0x828
    for (int i = 0; i < _commsSocketCount; i++)
   271b8:	daffffec 	ble	27170 <CommandHandler::handleFileEnd(char const*)+0x150>
   271bc:	e288700c 	add	r7, r8, #12
        if (!_commsSockets[i].enabled)
   271c0:	e7d72206 	ldrb	r2, [r7, r6, lsl #4]
   271c4:	e1a03206 	lsl	r3, r6, #4
   271c8:	e3520000 	cmp	r2, #0
            if(_commsSockets[i].otaUpdateFn)
   271cc:	e0873003 	add	r3, r7, r3
    for (int i = 0; i < _commsSocketCount; i++)
   271d0:	e2866001 	add	r6, r6, #1
        if (!_commsSockets[i].enabled)
   271d4:	0a000008 	beq	271fc <CommandHandler::handleFileEnd(char const*)+0x1dc>
            if(_commsSockets[i].otaUpdateFn)
   271d8:	e5933008 	ldr	r3, [r3, #8]
   271dc:	e3530000 	cmp	r3, #0
   271e0:	0a000005 	beq	271fc <CommandHandler::handleFileEnd(char const*)+0x1dc>
                messageHandled = _commsSockets[i].otaUpdateFn(rxData, rxBytes);                
   271e4:	e1a01009 	mov	r1, r9
   271e8:	e1a00004 	mov	r0, r4
   271ec:	e12fff33 	blx	r3
        if (messageHandled)
   271f0:	e3500000 	cmp	r0, #0
   271f4:	1affffdd 	bne	27170 <CommandHandler::handleFileEnd(char const*)+0x150>
   271f8:	e5981008 	ldr	r1, [r8, #8]
    for (int i = 0; i < _commsSocketCount; i++)
   271fc:	e1560001 	cmp	r6, r1
   27200:	baffffee 	blt	271c0 <CommandHandler::handleFileEnd(char const*)+0x1a0>
   27204:	eaffffd9 	b	27170 <CommandHandler::handleFileEnd(char const*)+0x150>
   27208:	000541bc 	.word	0x000541bc
   2720c:	000541c8 	.word	0x000541c8
   27210:	000541e4 	.word	0x000541e4
   27214:	00054054 	.word	0x00054054
   27218:	00054210 	.word	0x00054210
   2721c:	0005421c 	.word	0x0005421c
   27220:	0001872d 	.word	0x0001872d
   27224:	00054228 	.word	0x00054228
   27228:	0006fca4 	.word	0x0006fca4
   2722c:	00018756 	.word	0x00018756
   27230:	000186a0 	.word	0x000186a0
   27234:	00054234 	.word	0x00054234

00027238 <CommandHandler::processCommand(char const*, unsigned char const*, int)>:
{
   27238:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2723c:	e24ddea5 	sub	sp, sp, #2640	; 0xa50
   27240:	e24dd00c 	sub	sp, sp, #12
   27244:	e1a04000 	mov	r4, r0
   27248:	e1a08002 	mov	r8, r2
   2724c:	e1a06003 	mov	r6, r3
    if (!jsonGetValueForKey("cmdName", pCmdJson, cmdName, MAX_CMD_NAME_STR))
   27250:	e28d20f0 	add	r2, sp, #240	; 0xf0
   27254:	e3a030c8 	mov	r3, #200	; 0xc8
   27258:	e59f03ac 	ldr	r0, [pc, #940]	; 2760c <CommandHandler::processCommand(char const*, unsigned char const*, int)+0x3d4>
{
   2725c:	e1a05001 	mov	r5, r1
    if (!jsonGetValueForKey("cmdName", pCmdJson, cmdName, MAX_CMD_NAME_STR))
   27260:	ebfff5e1 	bl	249ec <jsonGetValueForKey>
   27264:	e250a000 	subs	sl, r0, #0
   27268:	1a000002 	bne	27278 <CommandHandler::processCommand(char const*, unsigned char const*, int)+0x40>
}
   2726c:	e28ddea5 	add	sp, sp, #2640	; 0xa50
   27270:	e28dd00c 	add	sp, sp, #12
   27274:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    msgIdxStr[0] = 0;
   27278:	e3a07000 	mov	r7, #0
    jsonGetValueForKey("msgIdx", pCmdJson, msgIdxStr, MAX_MSGIDX_STR_LEN);
   2727c:	e28d2014 	add	r2, sp, #20
   27280:	e3a03014 	mov	r3, #20
   27284:	e1a01005 	mov	r1, r5
   27288:	e59f0380 	ldr	r0, [pc, #896]	; 27610 <CommandHandler::processCommand(char const*, unsigned char const*, int)+0x3d8>
    msgIdxStr[0] = 0;
   2728c:	e5cd7014 	strb	r7, [sp, #20]
    jsonGetValueForKey("msgIdx", pCmdJson, msgIdxStr, MAX_MSGIDX_STR_LEN);
   27290:	ebfff5d5 	bl	249ec <jsonGetValueForKey>
    if (strcasecmp(cmdName, "ufStart") == 0)
   27294:	e59f1378 	ldr	r1, [pc, #888]	; 27614 <CommandHandler::processCommand(char const*, unsigned char const*, int)+0x3dc>
   27298:	e28d00f0 	add	r0, sp, #240	; 0xf0
   2729c:	eb00973a 	bl	4cf8c <strcasecmp>
   272a0:	e1500007 	cmp	r0, r7
   272a4:	0a000057 	beq	27408 <CommandHandler::processCommand(char const*, unsigned char const*, int)+0x1d0>
    else if (strcasecmp(cmdName, "ufBlock") == 0)
   272a8:	e59f1368 	ldr	r1, [pc, #872]	; 27618 <CommandHandler::processCommand(char const*, unsigned char const*, int)+0x3e0>
   272ac:	e28d00f0 	add	r0, sp, #240	; 0xf0
   272b0:	eb009735 	bl	4cf8c <strcasecmp>
   272b4:	e2509000 	subs	r9, r0, #0
   272b8:	0a000031 	beq	27384 <CommandHandler::processCommand(char const*, unsigned char const*, int)+0x14c>
    else if (strcasecmp(cmdName, "ufEnd") == 0)
   272bc:	e59f1358 	ldr	r1, [pc, #856]	; 2761c <CommandHandler::processCommand(char const*, unsigned char const*, int)+0x3e4>
   272c0:	e28d00f0 	add	r0, sp, #240	; 0xf0
   272c4:	eb009730 	bl	4cf8c <strcasecmp>
   272c8:	e3500000 	cmp	r0, #0
   272cc:	0a000073 	beq	274a0 <CommandHandler::processCommand(char const*, unsigned char const*, int)+0x268>
    if (strcasecmp(cmdName, "rdp") == 0)
   272d0:	e59f1348 	ldr	r1, [pc, #840]	; 27620 <CommandHandler::processCommand(char const*, unsigned char const*, int)+0x3e8>
   272d4:	e28d00f0 	add	r0, sp, #240	; 0xf0
    pCommandString[0] = 0;
   272d8:	e5cd71bc 	strb	r7, [sp, #444]	; 0x1bc
    if (strcasecmp(cmdName, "rdp") == 0)
   272dc:	eb00972a 	bl	4cf8c <strcasecmp>
   272e0:	e2504000 	subs	r4, r0, #0
    uint32_t rdpIndex = 0;
   272e4:	158d700c 	strne	r7, [sp, #12]
    bool rdpMessage = false;
   272e8:	11a0a007 	movne	sl, r7
    if (strcasecmp(cmdName, "rdp") == 0)
   272ec:	0a000096 	beq	2754c <CommandHandler::processCommand(char const*, unsigned char const*, int)+0x314>
    respJson[0] = 0;
   272f0:	e3a03000 	mov	r3, #0
    if (_commsSocketCount < 3)
   272f4:	e59fb328 	ldr	fp, [pc, #808]	; 27624 <CommandHandler::processCommand(char const*, unsigned char const*, int)+0x3ec>
    respJson[0] = 0;
   272f8:	e5cd3288 	strb	r3, [sp, #648]	; 0x288
    if (_commsSocketCount < 3)
   272fc:	e59b1008 	ldr	r1, [fp, #8]
   27300:	e3510002 	cmp	r1, #2
   27304:	da000049 	ble	27430 <CommandHandler::processCommand(char const*, unsigned char const*, int)+0x1f8>
        pCmdJson = pCommandString;
   27308:	e3a04000 	mov	r4, #0
   2730c:	e59f9314 	ldr	r9, [pc, #788]	; 27628 <CommandHandler::processCommand(char const*, unsigned char const*, int)+0x3f0>
   27310:	ea00000e 	b	27350 <CommandHandler::processCommand(char const*, unsigned char const*, int)+0x118>
        if (_commsSockets[i].handleRxMsg)
   27314:	e5927004 	ldr	r7, [r2, #4]
   27318:	e3570000 	cmp	r7, #0
   2731c:	0a000063 	beq	274b0 <CommandHandler::processCommand(char const*, unsigned char const*, int)+0x278>
            messageHandled = _commsSockets[i].handleRxMsg(pCmdJson, pParams, paramsLen, pRespJson, maxRespLen);
   27320:	e3a01e7d 	mov	r1, #2000	; 0x7d0
   27324:	e1a02006 	mov	r2, r6
   27328:	e58d1000 	str	r1, [sp]
   2732c:	e1a00005 	mov	r0, r5
   27330:	e1a01008 	mov	r1, r8
   27334:	e12fff37 	blx	r7
        if (messageHandled)
   27338:	e3500000 	cmp	r0, #0
   2733c:	1a000043 	bne	27450 <CommandHandler::processCommand(char const*, unsigned char const*, int)+0x218>
   27340:	e59b1008 	ldr	r1, [fp, #8]
    for (int i = 0; i < _commsSocketCount; i++)
   27344:	e2844001 	add	r4, r4, #1
   27348:	e1540001 	cmp	r4, r1
   2734c:	aa00003f 	bge	27450 <CommandHandler::processCommand(char const*, unsigned char const*, int)+0x218>
        if (!_commsSockets[i].enabled)
   27350:	e7d92204 	ldrb	r2, [r9, r4, lsl #4]
            messageHandled = _commsSockets[i].handleRxMsg(pCmdJson, pParams, paramsLen, pRespJson, maxRespLen);
   27354:	e28d3fa2 	add	r3, sp, #648	; 0x288
        if (!_commsSockets[i].enabled)
   27358:	e3520000 	cmp	r2, #0
   2735c:	e1a02204 	lsl	r2, r4, #4
        if (_commsSockets[i].handleRxMsg)
   27360:	e0892002 	add	r2, r9, r2
        if (!_commsSockets[i].enabled)
   27364:	1affffea 	bne	27314 <CommandHandler::processCommand(char const*, unsigned char const*, int)+0xdc>
            LogWrite(FromCmdHandler, LOG_DEBUG, "RxMsg sock disabled %d", i);
   27368:	e3a01004 	mov	r1, #4
   2736c:	e1a03004 	mov	r3, r4
   27370:	e59f22b4 	ldr	r2, [pc, #692]	; 2762c <CommandHandler::processCommand(char const*, unsigned char const*, int)+0x3f4>
   27374:	e59f02b4 	ldr	r0, [pc, #692]	; 27630 <CommandHandler::processCommand(char const*, unsigned char const*, int)+0x3f8>
   27378:	ebfff37e 	bl	24178 <LogWrite>
   2737c:	e59b1008 	ldr	r1, [fp, #8]
   27380:	eaffffef 	b	27344 <CommandHandler::processCommand(char const*, unsigned char const*, int)+0x10c>
    if (!_pReceivedFileDataPtr)
   27384:	e2844906 	add	r4, r4, #98304	; 0x18000
   27388:	e5943820 	ldr	r3, [r4, #2080]	; 0x820
   2738c:	e3530000 	cmp	r3, #0
   27390:	0affffb5 	beq	2726c <CommandHandler::processCommand(char const*, unsigned char const*, int)+0x34>
    if (!jsonGetValueForKey("index", pCmdJson, blockStartStr, MAX_INT_ARG_STR_LEN))
   27394:	e1a01005 	mov	r1, r5
   27398:	e28d2fa2 	add	r2, sp, #648	; 0x288
   2739c:	e3a0300a 	mov	r3, #10
   273a0:	e59f028c 	ldr	r0, [pc, #652]	; 27634 <CommandHandler::processCommand(char const*, unsigned char const*, int)+0x3fc>
   273a4:	ebfff590 	bl	249ec <jsonGetValueForKey>
   273a8:	e3500000 	cmp	r0, #0
   273ac:	0affffae 	beq	2726c <CommandHandler::processCommand(char const*, unsigned char const*, int)+0x34>
    int blockStart = strtol(blockStartStr, NULL, 10);
   273b0:	e1a01009 	mov	r1, r9
   273b4:	e28d0fa2 	add	r0, sp, #648	; 0x288
   273b8:	e3a0200a 	mov	r2, #10
   273bc:	eb009bd7 	bl	4e320 <strtol>
    if (blockStart < 0)
   273c0:	e3500000 	cmp	r0, #0
   273c4:	baffffa8 	blt	2726c <CommandHandler::processCommand(char const*, unsigned char const*, int)+0x34>
    if (blockStart + dataLen > _receivedFileBufSize)
   273c8:	e5943824 	ldr	r3, [r4, #2084]	; 0x824
   273cc:	e0862000 	add	r2, r6, r0
   273d0:	e1520003 	cmp	r2, r3
   273d4:	caffffa4 	bgt	2726c <CommandHandler::processCommand(char const*, unsigned char const*, int)+0x34>
    memcpy(_pReceivedFileDataPtr+blockStart, pData, dataLen);
   273d8:	e5943820 	ldr	r3, [r4, #2080]	; 0x820
   273dc:	e1a02006 	mov	r2, r6
   273e0:	e0830000 	add	r0, r3, r0
   273e4:	e1a01008 	mov	r1, r8
   273e8:	eb00965e 	bl	4cd68 <memcpy>
    _receivedFileBytesRx += dataLen;
   273ec:	e5942828 	ldr	r2, [r4, #2088]	; 0x828
    _receivedBlockCount++;
   273f0:	e594382c 	ldr	r3, [r4, #2092]	; 0x82c
    _receivedFileBytesRx += dataLen;
   273f4:	e0826006 	add	r6, r2, r6
    _receivedBlockCount++;
   273f8:	e2833001 	add	r3, r3, #1
    _receivedFileBytesRx += dataLen;
   273fc:	e5846828 	str	r6, [r4, #2088]	; 0x828
    _receivedBlockCount++;
   27400:	e584382c 	str	r3, [r4, #2092]	; 0x82c
   27404:	eaffff98 	b	2726c <CommandHandler::processCommand(char const*, unsigned char const*, int)+0x34>
        LogWrite(FromCmdHandler, LOG_VERBOSE, "processCommand fileStart"); 
   27408:	e59f2228 	ldr	r2, [pc, #552]	; 27638 <CommandHandler::processCommand(char const*, unsigned char const*, int)+0x400>
   2740c:	e3a01005 	mov	r1, #5
   27410:	e59f0218 	ldr	r0, [pc, #536]	; 27630 <CommandHandler::processCommand(char const*, unsigned char const*, int)+0x3f8>
   27414:	ebfff357 	bl	24178 <LogWrite>
        handleFileStart(pCmdJson);
   27418:	e1a01005 	mov	r1, r5
   2741c:	e1a00004 	mov	r0, r4
   27420:	ebfffdf7 	bl	26c04 <CommandHandler::handleFileStart(char const*)>
}
   27424:	e28ddea5 	add	sp, sp, #2640	; 0xa50
   27428:	e28dd00c 	add	sp, sp, #12
   2742c:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
        LogWrite(FromCmdHandler, LOG_DEBUG, "RxMsg fewer sockets than expected %d", _commsSocketCount);
   27430:	e1a03001 	mov	r3, r1
   27434:	e59f2200 	ldr	r2, [pc, #512]	; 2763c <CommandHandler::processCommand(char const*, unsigned char const*, int)+0x404>
   27438:	e3a01004 	mov	r1, #4
   2743c:	e59f01ec 	ldr	r0, [pc, #492]	; 27630 <CommandHandler::processCommand(char const*, unsigned char const*, int)+0x3f8>
   27440:	ebfff34c 	bl	24178 <LogWrite>
   27444:	e59b1008 	ldr	r1, [fp, #8]
    for (int i = 0; i < _commsSocketCount; i++)
   27448:	e3510000 	cmp	r1, #0
   2744c:	caffffad 	bgt	27308 <CommandHandler::processCommand(char const*, unsigned char const*, int)+0xd0>
    strlcpy(cmdNameResp, cmdName, MAX_CMD_NAME_STR);
   27450:	e28d10f0 	add	r1, sp, #240	; 0xf0
   27454:	e3a020c8 	mov	r2, #200	; 0xc8
   27458:	e28d0028 	add	r0, sp, #40	; 0x28
   2745c:	eb009859 	bl	4d5c8 <strlcpy>
    strlcat(cmdNameResp, "Resp", MAX_CMD_NAME_STR);
   27460:	e28d0028 	add	r0, sp, #40	; 0x28
   27464:	e3a020c8 	mov	r2, #200	; 0xc8
   27468:	e59f11d0 	ldr	r1, [pc, #464]	; 27640 <CommandHandler::processCommand(char const*, unsigned char const*, int)+0x408>
   2746c:	eb009825 	bl	4d508 <strlcat>
    if (rdpMessage)
   27470:	e35a0000 	cmp	sl, #0
   27474:	1a000015 	bne	274d0 <CommandHandler::processCommand(char const*, unsigned char const*, int)+0x298>
        if (strlen(respJson) > 0)
   27478:	e5dd3288 	ldrb	r3, [sp, #648]	; 0x288
   2747c:	e3530000 	cmp	r3, #0
   27480:	0affff79 	beq	2726c <CommandHandler::processCommand(char const*, unsigned char const*, int)+0x34>
            sendWithJSON(cmdNameResp, respJson);
   27484:	e58da000 	str	sl, [sp]
   27488:	e28d0028 	add	r0, sp, #40	; 0x28
   2748c:	e1a0300a 	mov	r3, sl
   27490:	e1a0200a 	mov	r2, sl
   27494:	e28d1fa2 	add	r1, sp, #648	; 0x288
   27498:	ebfffe7f 	bl	26e9c <CommandHandler::sendWithJSON(char const*, char const*, unsigned long, unsigned char const*, unsigned long)>
   2749c:	eaffff72 	b	2726c <CommandHandler::processCommand(char const*, unsigned char const*, int)+0x34>
        handleFileEnd(pCmdJson);
   274a0:	e1a01005 	mov	r1, r5
   274a4:	e1a00004 	mov	r0, r4
   274a8:	ebfffedc 	bl	27020 <CommandHandler::handleFileEnd(char const*)>
        return;
   274ac:	eaffff6e 	b	2726c <CommandHandler::processCommand(char const*, unsigned char const*, int)+0x34>
            if (i != 0)
   274b0:	e3540000 	cmp	r4, #0
   274b4:	0affffa2 	beq	27344 <CommandHandler::processCommand(char const*, unsigned char const*, int)+0x10c>
               LogWrite(FromCmdHandler, LOG_DEBUG, "RxMsg sock null %d", i);
   274b8:	e1a03004 	mov	r3, r4
   274bc:	e59f2180 	ldr	r2, [pc, #384]	; 27644 <CommandHandler::processCommand(char const*, unsigned char const*, int)+0x40c>
   274c0:	e3a01004 	mov	r1, #4
   274c4:	e59f0164 	ldr	r0, [pc, #356]	; 27630 <CommandHandler::processCommand(char const*, unsigned char const*, int)+0x3f8>
   274c8:	ebfff32a 	bl	24178 <LogWrite>
   274cc:	eaffff9b 	b	27340 <CommandHandler::processCommand(char const*, unsigned char const*, int)+0x108>
        strlcpy(jsonFrame, "{\"cmdName\":\"", JSON_RESP_MAX_LEN);
   274d0:	e59f2170 	ldr	r2, [pc, #368]	; 27648 <CommandHandler::processCommand(char const*, unsigned char const*, int)+0x410>
   274d4:	e59f1170 	ldr	r1, [pc, #368]	; 2764c <CommandHandler::processCommand(char const*, unsigned char const*, int)+0x414>
   274d8:	e59f0170 	ldr	r0, [pc, #368]	; 27650 <CommandHandler::processCommand(char const*, unsigned char const*, int)+0x418>
   274dc:	eb009839 	bl	4d5c8 <strlcpy>
        strlcat(jsonFrame, cmdNameResp, JSON_RESP_MAX_LEN);
   274e0:	e28d1028 	add	r1, sp, #40	; 0x28
   274e4:	e59f215c 	ldr	r2, [pc, #348]	; 27648 <CommandHandler::processCommand(char const*, unsigned char const*, int)+0x410>
   274e8:	e59f0160 	ldr	r0, [pc, #352]	; 27650 <CommandHandler::processCommand(char const*, unsigned char const*, int)+0x418>
   274ec:	eb009805 	bl	4d508 <strlcat>
        strlcat(jsonFrame, "\"", JSON_RESP_MAX_LEN);
   274f0:	e59f2150 	ldr	r2, [pc, #336]	; 27648 <CommandHandler::processCommand(char const*, unsigned char const*, int)+0x410>
   274f4:	e59f1158 	ldr	r1, [pc, #344]	; 27654 <CommandHandler::processCommand(char const*, unsigned char const*, int)+0x41c>
   274f8:	e59f0150 	ldr	r0, [pc, #336]	; 27650 <CommandHandler::processCommand(char const*, unsigned char const*, int)+0x418>
   274fc:	eb009801 	bl	4d508 <strlcat>
        if (strlen(respJson) > 0)
   27500:	e5dd3288 	ldrb	r3, [sp, #648]	; 0x288
   27504:	e3530000 	cmp	r3, #0
   27508:	1a000036 	bne	275e8 <CommandHandler::processCommand(char const*, unsigned char const*, int)+0x3b0>
        if (strlen(msgIdxStr) > 0)
   2750c:	e5dd3014 	ldrb	r3, [sp, #20]
   27510:	e3530000 	cmp	r3, #0
   27514:	1a00002a 	bne	275c4 <CommandHandler::processCommand(char const*, unsigned char const*, int)+0x38c>
        strlcat(jsonFrame, ",\"dataLen\":0}", JSON_RESP_MAX_LEN);
   27518:	e59f2128 	ldr	r2, [pc, #296]	; 27648 <CommandHandler::processCommand(char const*, unsigned char const*, int)+0x410>
   2751c:	e59f1134 	ldr	r1, [pc, #308]	; 27658 <CommandHandler::processCommand(char const*, unsigned char const*, int)+0x420>
   27520:	e59f0128 	ldr	r0, [pc, #296]	; 27650 <CommandHandler::processCommand(char const*, unsigned char const*, int)+0x418>
   27524:	eb0097f7 	bl	4d508 <strlcat>
        sendWithJSON("rdp", "", rdpIndex, (const uint8_t*)jsonFrame, strlen(jsonFrame));
   27528:	e59f0120 	ldr	r0, [pc, #288]	; 27650 <CommandHandler::processCommand(char const*, unsigned char const*, int)+0x418>
   2752c:	eb00983a 	bl	4d61c <strlen>
   27530:	e59d200c 	ldr	r2, [sp, #12]
   27534:	e58d0000 	str	r0, [sp]
   27538:	e59f3110 	ldr	r3, [pc, #272]	; 27650 <CommandHandler::processCommand(char const*, unsigned char const*, int)+0x418>
   2753c:	e59f1118 	ldr	r1, [pc, #280]	; 2765c <CommandHandler::processCommand(char const*, unsigned char const*, int)+0x424>
   27540:	e59f00d8 	ldr	r0, [pc, #216]	; 27620 <CommandHandler::processCommand(char const*, unsigned char const*, int)+0x3e8>
   27544:	ebfffe54 	bl	26e9c <CommandHandler::sendWithJSON(char const*, char const*, unsigned long, unsigned char const*, unsigned long)>
   27548:	eaffff47 	b	2726c <CommandHandler::processCommand(char const*, unsigned char const*, int)+0x34>
        rdpIndex = strtol(msgIdxStr, NULL, 10);
   2754c:	e1a01004 	mov	r1, r4
   27550:	e3a0200a 	mov	r2, #10
   27554:	e28d0014 	add	r0, sp, #20
   27558:	eb009b70 	bl	4e320 <strtol>
        strlcpy(pCommandString, (const char*)pParams, CMD_HANDLER_MAX_CMD_STR_LEN);
   2755c:	e1a01008 	mov	r1, r8
        rdpIndex = strtol(msgIdxStr, NULL, 10);
   27560:	e58d000c 	str	r0, [sp, #12]
        strlcpy(pCommandString, (const char*)pParams, CMD_HANDLER_MAX_CMD_STR_LEN);
   27564:	e3a020c8 	mov	r2, #200	; 0xc8
   27568:	e28d0f6f 	add	r0, sp, #444	; 0x1bc
   2756c:	eb009815 	bl	4d5c8 <strlcpy>
        int commandStringLen = strlen(pCommandString);
   27570:	e28d0f6f 	add	r0, sp, #444	; 0x1bc
   27574:	eb009828 	bl	4d61c <strlen>
        paramsLen = paramsLen - commandStringLen - 1;
   27578:	e0466000 	sub	r6, r6, r0
   2757c:	e2466001 	sub	r6, r6, #1
        if (paramsLen > 0)
   27580:	e3560000 	cmp	r6, #0
        pParams = pParams + commandStringLen;
   27584:	e0888000 	add	r8, r8, r0
        jsonGetValueForKey("cmdName", pCmdJson, cmdName, MAX_CMD_NAME_STR);
   27588:	e28d20f0 	add	r2, sp, #240	; 0xf0
   2758c:	e28d1f6f 	add	r1, sp, #444	; 0x1bc
   27590:	e3a030c8 	mov	r3, #200	; 0xc8
   27594:	e59f0070 	ldr	r0, [pc, #112]	; 2760c <CommandHandler::processCommand(char const*, unsigned char const*, int)+0x3d4>
   27598:	c1a04006 	movgt	r4, r6
            pParams++;
   2759c:	c2888001 	addgt	r8, r8, #1
        jsonGetValueForKey("cmdName", pCmdJson, cmdName, MAX_CMD_NAME_STR);
   275a0:	ebfff511 	bl	249ec <jsonGetValueForKey>
        jsonGetValueForKey("msgIdx", pCmdJson, msgIdxStr, MAX_MSGIDX_STR_LEN);
   275a4:	e3a03014 	mov	r3, #20
   275a8:	e28d1f6f 	add	r1, sp, #444	; 0x1bc
   275ac:	e08d2003 	add	r2, sp, r3
   275b0:	e59f0058 	ldr	r0, [pc, #88]	; 27610 <CommandHandler::processCommand(char const*, unsigned char const*, int)+0x3d8>
   275b4:	e1a06004 	mov	r6, r4
        pCmdJson = pCommandString;
   275b8:	e1a05001 	mov	r5, r1
        jsonGetValueForKey("msgIdx", pCmdJson, msgIdxStr, MAX_MSGIDX_STR_LEN);
   275bc:	ebfff50a 	bl	249ec <jsonGetValueForKey>
   275c0:	eaffff4a 	b	272f0 <CommandHandler::processCommand(char const*, unsigned char const*, int)+0xb8>
            strlcat(jsonFrame, ",\"msgIdx\":", JSON_RESP_MAX_LEN);
   275c4:	e59f207c 	ldr	r2, [pc, #124]	; 27648 <CommandHandler::processCommand(char const*, unsigned char const*, int)+0x410>
   275c8:	e59f1090 	ldr	r1, [pc, #144]	; 27660 <CommandHandler::processCommand(char const*, unsigned char const*, int)+0x428>
   275cc:	e59f007c 	ldr	r0, [pc, #124]	; 27650 <CommandHandler::processCommand(char const*, unsigned char const*, int)+0x418>
   275d0:	eb0097cc 	bl	4d508 <strlcat>
            strlcat(jsonFrame, msgIdxStr, JSON_RESP_MAX_LEN);
   275d4:	e28d1014 	add	r1, sp, #20
   275d8:	e59f2068 	ldr	r2, [pc, #104]	; 27648 <CommandHandler::processCommand(char const*, unsigned char const*, int)+0x410>
   275dc:	e59f006c 	ldr	r0, [pc, #108]	; 27650 <CommandHandler::processCommand(char const*, unsigned char const*, int)+0x418>
   275e0:	eb0097c8 	bl	4d508 <strlcat>
   275e4:	eaffffcb 	b	27518 <CommandHandler::processCommand(char const*, unsigned char const*, int)+0x2e0>
            strlcat(jsonFrame, ",", JSON_RESP_MAX_LEN);
   275e8:	e59f2058 	ldr	r2, [pc, #88]	; 27648 <CommandHandler::processCommand(char const*, unsigned char const*, int)+0x410>
   275ec:	e59f1070 	ldr	r1, [pc, #112]	; 27664 <CommandHandler::processCommand(char const*, unsigned char const*, int)+0x42c>
   275f0:	e59f0058 	ldr	r0, [pc, #88]	; 27650 <CommandHandler::processCommand(char const*, unsigned char const*, int)+0x418>
   275f4:	eb0097c3 	bl	4d508 <strlcat>
            strlcat(jsonFrame, respJson, JSON_RESP_MAX_LEN);
   275f8:	e59f2048 	ldr	r2, [pc, #72]	; 27648 <CommandHandler::processCommand(char const*, unsigned char const*, int)+0x410>
   275fc:	e28d1fa2 	add	r1, sp, #648	; 0x288
   27600:	e59f0048 	ldr	r0, [pc, #72]	; 27650 <CommandHandler::processCommand(char const*, unsigned char const*, int)+0x418>
   27604:	eb0097bf 	bl	4d508 <strlcat>
   27608:	eaffffbf 	b	2750c <CommandHandler::processCommand(char const*, unsigned char const*, int)+0x2d4>
   2760c:	00053b5c 	.word	0x00053b5c
   27610:	00054260 	.word	0x00054260
   27614:	00054268 	.word	0x00054268
   27618:	0005428c 	.word	0x0005428c
   2761c:	00054294 	.word	0x00054294
   27620:	0005429c 	.word	0x0005429c
   27624:	0006fca4 	.word	0x0006fca4
   27628:	0006fcb0 	.word	0x0006fcb0
   2762c:	0005408c 	.word	0x0005408c
   27630:	00054054 	.word	0x00054054
   27634:	0005416c 	.word	0x0005416c
   27638:	00054270 	.word	0x00054270
   2763c:	00054064 	.word	0x00054064
   27640:	000542a0 	.word	0x000542a0
   27644:	000540a4 	.word	0x000540a4
   27648:	00002710 	.word	0x00002710
   2764c:	00054190 	.word	0x00054190
   27650:	00072548 	.word	0x00072548
   27654:	00053ca4 	.word	0x00053ca4
   27658:	000542a8 	.word	0x000542a8
   2765c:	00053e00 	.word	0x00053e00
   27660:	000541a4 	.word	0x000541a4
   27664:	000541a0 	.word	0x000541a0

00027668 <CommandHandler::hdlcFrameRx(unsigned char const*, int)>:
{
   27668:	e92d4070 	push	{r4, r5, r6, lr}
   2766c:	e24dd0d0 	sub	sp, sp, #208	; 0xd0
   27670:	e1a05000 	mov	r5, r0
   27674:	e1a04002 	mov	r4, r2
    strlcpy(commandString, (const char*)pFrame, CMD_HANDLER_MAX_CMD_STR_LEN);
   27678:	e28d0004 	add	r0, sp, #4
   2767c:	e3a020c8 	mov	r2, #200	; 0xc8
{
   27680:	e1a06001 	mov	r6, r1
    strlcpy(commandString, (const char*)pFrame, CMD_HANDLER_MAX_CMD_STR_LEN);
   27684:	eb0097cf 	bl	4d5c8 <strlcpy>
    int commandStringLen = strlen(commandString);
   27688:	e28d0004 	add	r0, sp, #4
   2768c:	eb0097e2 	bl	4d61c <strlen>
    int paramsLen = frameLength - commandStringLen - 1;
   27690:	e0443000 	sub	r3, r4, r0
    const uint8_t* pParams = pFrame + commandStringLen + 1;
   27694:	e2802001 	add	r2, r0, #1
    int paramsLen = frameLength - commandStringLen - 1;
   27698:	e2433001 	sub	r3, r3, #1
    processCommand(commandString, pParams, paramsLen);
   2769c:	e0862002 	add	r2, r6, r2
   276a0:	e1c33fc3 	bic	r3, r3, r3, asr #31
   276a4:	e28d1004 	add	r1, sp, #4
   276a8:	e1a00005 	mov	r0, r5
   276ac:	ebfffee1 	bl	27238 <CommandHandler::processCommand(char const*, unsigned char const*, int)>
}
   276b0:	e28dd0d0 	add	sp, sp, #208	; 0xd0
   276b4:	e8bd8070 	pop	{r4, r5, r6, pc}

000276b8 <CommandHandler::hdlcFrameRxStatic(unsigned char const*, int)>:
{
   276b8:	e92d4070 	push	{r4, r5, r6, lr}
    if (_pSingletonCommandHandler)
   276bc:	e59f3054 	ldr	r3, [pc, #84]	; 27718 <CommandHandler::hdlcFrameRxStatic(unsigned char const*, int)+0x60>
{
   276c0:	e24dd0d0 	sub	sp, sp, #208	; 0xd0
    if (_pSingletonCommandHandler)
   276c4:	e5936000 	ldr	r6, [r3]
   276c8:	e3560000 	cmp	r6, #0
   276cc:	0a00000f 	beq	27710 <CommandHandler::hdlcFrameRxStatic(unsigned char const*, int)+0x58>
   276d0:	e1a05000 	mov	r5, r0
    strlcpy(commandString, (const char*)pFrame, CMD_HANDLER_MAX_CMD_STR_LEN);
   276d4:	e3a020c8 	mov	r2, #200	; 0xc8
   276d8:	e1a04001 	mov	r4, r1
   276dc:	e28d0004 	add	r0, sp, #4
   276e0:	e1a01005 	mov	r1, r5
   276e4:	eb0097b7 	bl	4d5c8 <strlcpy>
    int commandStringLen = strlen(commandString);
   276e8:	e28d0004 	add	r0, sp, #4
   276ec:	eb0097ca 	bl	4d61c <strlen>
    int paramsLen = frameLength - commandStringLen - 1;
   276f0:	e0441000 	sub	r1, r4, r0
   276f4:	e2413001 	sub	r3, r1, #1
    const uint8_t* pParams = pFrame + commandStringLen + 1;
   276f8:	e2802001 	add	r2, r0, #1
    processCommand(commandString, pParams, paramsLen);
   276fc:	e1c33fc3 	bic	r3, r3, r3, asr #31
   27700:	e0852002 	add	r2, r5, r2
   27704:	e28d1004 	add	r1, sp, #4
   27708:	e1a00006 	mov	r0, r6
   2770c:	ebfffec9 	bl	27238 <CommandHandler::processCommand(char const*, unsigned char const*, int)>
}
   27710:	e28dd0d0 	add	sp, sp, #208	; 0xd0
   27714:	e8bd8070 	pop	{r4, r5, r6, pc}
   27718:	0006fca4 	.word	0x0006fca4

0002771c <CommandHandler::sendAPIReq(char const*)>:
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Send an API request
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void CommandHandler::sendAPIReq(const char* reqLine)
{
   2771c:	e92d4070 	push	{r4, r5, r6, lr}
    // Form and send
    static const int MAX_REQ_STR_LEN = 100;
    static char reqStr[MAX_REQ_STR_LEN+1];
    strlcpy(reqStr, "\"req\":\"", MAX_REQ_STR_LEN);
   27720:	e59f5074 	ldr	r5, [pc, #116]	; 2779c <CommandHandler::sendAPIReq(char const*)+0x80>
{
   27724:	e24dd008 	sub	sp, sp, #8
    strlcpy(reqStr, "\"req\":\"", MAX_REQ_STR_LEN);
   27728:	e2854f4b 	add	r4, r5, #300	; 0x12c
   2772c:	e3a02064 	mov	r2, #100	; 0x64
   27730:	e59f1068 	ldr	r1, [pc, #104]	; 277a0 <CommandHandler::sendAPIReq(char const*)+0x84>
{
   27734:	e1a06000 	mov	r6, r0
    strlcpy(reqStr, "\"req\":\"", MAX_REQ_STR_LEN);
   27738:	e1a00004 	mov	r0, r4
   2773c:	eb0097a1 	bl	4d5c8 <strlcpy>
    strlcpy(reqStr+strlen(reqStr), reqLine, MAX_REQ_STR_LEN);
   27740:	e1a00004 	mov	r0, r4
   27744:	eb0097b4 	bl	4d61c <strlen>
   27748:	e1a01006 	mov	r1, r6
   2774c:	e3a02064 	mov	r2, #100	; 0x64
   27750:	e0840000 	add	r0, r4, r0
   27754:	eb00979b 	bl	4d5c8 <strlcpy>
    strlcpy(reqStr+strlen(reqStr), "\"", MAX_REQ_STR_LEN);
   27758:	e1a00004 	mov	r0, r4
   2775c:	eb0097ae 	bl	4d61c <strlen>
   27760:	e3a02064 	mov	r2, #100	; 0x64
   27764:	e0840000 	add	r0, r4, r0
   27768:	e59f1034 	ldr	r1, [pc, #52]	; 277a4 <CommandHandler::sendAPIReq(char const*)+0x88>
   2776c:	eb009795 	bl	4d5c8 <strlcpy>
    if (_pSingletonCommandHandler)
   27770:	e5953000 	ldr	r3, [r5]
   27774:	e3530000 	cmp	r3, #0
   27778:	0a000005 	beq	27794 <CommandHandler::sendAPIReq(char const*)+0x78>
        _pSingletonCommandHandler->sendWithJSON("apiReq", reqStr);
   2777c:	e3a03000 	mov	r3, #0
   27780:	e1a01004 	mov	r1, r4
   27784:	e58d3000 	str	r3, [sp]
   27788:	e1a02003 	mov	r2, r3
   2778c:	e59f0014 	ldr	r0, [pc, #20]	; 277a8 <CommandHandler::sendAPIReq(char const*)+0x8c>
   27790:	ebfffdc1 	bl	26e9c <CommandHandler::sendWithJSON(char const*, char const*, unsigned long, unsigned char const*, unsigned long)>
}
   27794:	e28dd008 	add	sp, sp, #8
   27798:	e8bd8070 	pop	{r4, r5, r6, pc}
   2779c:	0006fca4 	.word	0x0006fca4
   277a0:	000542b8 	.word	0x000542b8
   277a4:	00053ca4 	.word	0x00053ca4
   277a8:	000542c0 	.word	0x000542c0

000277ac <CommandHandler::logDebugMessage(char const*)>:
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Log debug message
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void CommandHandler::logDebugMessage(const char* pStr)
{
   277ac:	e92d4030 	push	{r4, r5, lr}
   277b0:	e1a04001 	mov	r4, r1
   277b4:	e24dde7d 	sub	sp, sp, #2000	; 0x7d0
   277b8:	e24dd00c 	sub	sp, sp, #12
    static const int MAX_DATAFRAME_LEN = 2000;
    char responseJson[MAX_DATAFRAME_LEN+1];
    strlcpy(responseJson, "\"msg\":\"", MAX_DATAFRAME_LEN);
   277bc:	e3a02e7d 	mov	r2, #2000	; 0x7d0
   277c0:	e59f1144 	ldr	r1, [pc, #324]	; 2790c <CommandHandler::logDebugMessage(char const*)+0x160>
   277c4:	e28d0004 	add	r0, sp, #4
   277c8:	eb00977e 	bl	4d5c8 <strlcpy>
    strlcat(responseJson, pStr, MAX_DATAFRAME_LEN);
   277cc:	e1a01004 	mov	r1, r4
   277d0:	e3a02e7d 	mov	r2, #2000	; 0x7d0
   277d4:	e28d0004 	add	r0, sp, #4
   277d8:	eb00974a 	bl	4d508 <strlcat>
    strlcat(responseJson, "\"", MAX_DATAFRAME_LEN);
   277dc:	e3a02e7d 	mov	r2, #2000	; 0x7d0
   277e0:	e59f1128 	ldr	r1, [pc, #296]	; 27910 <CommandHandler::logDebugMessage(char const*)+0x164>
   277e4:	e28d0004 	add	r0, sp, #4
   277e8:	eb009746 	bl	4d508 <strlcat>
    strlcpy(dataFrame, "{\"cmdName\":\"", MAX_DATAFRAME_LEN);
   277ec:	e59f4120 	ldr	r4, [pc, #288]	; 27914 <CommandHandler::logDebugMessage(char const*)+0x168>
    itoa(msgIdx, indexStr, 10);
   277f0:	e3a0200a 	mov	r2, #10
   277f4:	e59f111c 	ldr	r1, [pc, #284]	; 27918 <CommandHandler::logDebugMessage(char const*)+0x16c>
   277f8:	e3a00000 	mov	r0, #0
   277fc:	eb009517 	bl	4cc60 <itoa>
    itoa(dataLen, lenStr, 10);
   27800:	e3a0200a 	mov	r2, #10
   27804:	e59f1110 	ldr	r1, [pc, #272]	; 2791c <CommandHandler::logDebugMessage(char const*)+0x170>
   27808:	e3a00000 	mov	r0, #0
   2780c:	eb009513 	bl	4cc60 <itoa>
    strlcpy(dataFrame, "{\"cmdName\":\"", MAX_DATAFRAME_LEN);
   27810:	e59f2108 	ldr	r2, [pc, #264]	; 27920 <CommandHandler::logDebugMessage(char const*)+0x174>
   27814:	e59f1108 	ldr	r1, [pc, #264]	; 27924 <CommandHandler::logDebugMessage(char const*)+0x178>
   27818:	e1a00004 	mov	r0, r4
   2781c:	eb009769 	bl	4d5c8 <strlcpy>
    strlcat(dataFrame, cmdName, MAX_DATAFRAME_LEN);
   27820:	e59f20f8 	ldr	r2, [pc, #248]	; 27920 <CommandHandler::logDebugMessage(char const*)+0x174>
   27824:	e59f10fc 	ldr	r1, [pc, #252]	; 27928 <CommandHandler::logDebugMessage(char const*)+0x17c>
   27828:	e1a00004 	mov	r0, r4
   2782c:	eb009735 	bl	4d508 <strlcat>
    strlcat(dataFrame, "\"", MAX_DATAFRAME_LEN);
   27830:	e1a00004 	mov	r0, r4
   27834:	e59f20e4 	ldr	r2, [pc, #228]	; 27920 <CommandHandler::logDebugMessage(char const*)+0x174>
   27838:	e59f10d0 	ldr	r1, [pc, #208]	; 27910 <CommandHandler::logDebugMessage(char const*)+0x164>
   2783c:	eb009731 	bl	4d508 <strlcat>
    if (strlen(cmdJson) > 0)
   27840:	e5dd3004 	ldrb	r3, [sp, #4]
   27844:	e3530000 	cmp	r3, #0
   27848:	1a000026 	bne	278e8 <CommandHandler::logDebugMessage(char const*)+0x13c>
    strlcat(dataFrame, indexStr, MAX_DATAFRAME_LEN);
   2784c:	e59f50d8 	ldr	r5, [pc, #216]	; 2792c <CommandHandler::logDebugMessage(char const*)+0x180>
    strlcat(dataFrame, ",\"msgIdx\":", MAX_DATAFRAME_LEN);
   27850:	e59f20c8 	ldr	r2, [pc, #200]	; 27920 <CommandHandler::logDebugMessage(char const*)+0x174>
   27854:	e59f10d4 	ldr	r1, [pc, #212]	; 27930 <CommandHandler::logDebugMessage(char const*)+0x184>
   27858:	e59f00b4 	ldr	r0, [pc, #180]	; 27914 <CommandHandler::logDebugMessage(char const*)+0x168>
   2785c:	eb009729 	bl	4d508 <strlcat>
    strlcat(dataFrame, indexStr, MAX_DATAFRAME_LEN);
   27860:	e2851f45 	add	r1, r5, #276	; 0x114
   27864:	e59f20b4 	ldr	r2, [pc, #180]	; 27920 <CommandHandler::logDebugMessage(char const*)+0x174>
   27868:	e59f00a4 	ldr	r0, [pc, #164]	; 27914 <CommandHandler::logDebugMessage(char const*)+0x168>
   2786c:	eb009725 	bl	4d508 <strlcat>
    strlcat(dataFrame, ",\"dataLen\":", MAX_DATAFRAME_LEN);
   27870:	e59f20a8 	ldr	r2, [pc, #168]	; 27920 <CommandHandler::logDebugMessage(char const*)+0x174>
   27874:	e59f10b8 	ldr	r1, [pc, #184]	; 27934 <CommandHandler::logDebugMessage(char const*)+0x188>
   27878:	e59f0094 	ldr	r0, [pc, #148]	; 27914 <CommandHandler::logDebugMessage(char const*)+0x168>
   2787c:	eb009721 	bl	4d508 <strlcat>
    strlcat(dataFrame, lenStr, MAX_DATAFRAME_LEN);
   27880:	e2851e12 	add	r1, r5, #288	; 0x120
   27884:	e59f2094 	ldr	r2, [pc, #148]	; 27920 <CommandHandler::logDebugMessage(char const*)+0x174>
   27888:	e59f0084 	ldr	r0, [pc, #132]	; 27914 <CommandHandler::logDebugMessage(char const*)+0x168>
   2788c:	eb00971d 	bl	4d508 <strlcat>
    strlcat(dataFrame, "}", MAX_DATAFRAME_LEN);
   27890:	e59f2088 	ldr	r2, [pc, #136]	; 27920 <CommandHandler::logDebugMessage(char const*)+0x174>
   27894:	e59f109c 	ldr	r1, [pc, #156]	; 27938 <CommandHandler::logDebugMessage(char const*)+0x18c>
   27898:	e59f0074 	ldr	r0, [pc, #116]	; 27914 <CommandHandler::logDebugMessage(char const*)+0x168>
   2789c:	eb009719 	bl	4d508 <strlcat>
    uint32_t dataFrameBinaryPos = strlen(dataFrame)+1;
   278a0:	e59f006c 	ldr	r0, [pc, #108]	; 27914 <CommandHandler::logDebugMessage(char const*)+0x168>
   278a4:	eb00975c 	bl	4d61c <strlen>
    if (dataFrameTotalLen >= MAX_DATAFRAME_LEN)
   278a8:	e59f308c 	ldr	r3, [pc, #140]	; 2793c <CommandHandler::logDebugMessage(char const*)+0x190>
    uint32_t dataFrameTotalLen = dataFrameBinaryPos+dataLen+1; 
   278ac:	e2802002 	add	r2, r0, #2
    if (dataFrameTotalLen >= MAX_DATAFRAME_LEN)
   278b0:	e1520003 	cmp	r2, r3
   278b4:	8a000008 	bhi	278dc <CommandHandler::logDebugMessage(char const*)+0x130>
    dataFrame[dataFrameTotalLen-1] = 0;
   278b8:	e3a01000 	mov	r1, #0
    if (_pSingletonCommandHandler)
   278bc:	e5953000 	ldr	r3, [r5]
    dataFrame[dataFrameTotalLen-1] = 0;
   278c0:	e0844000 	add	r4, r4, r0
    if (_pSingletonCommandHandler)
   278c4:	e1530001 	cmp	r3, r1
    dataFrame[dataFrameTotalLen-1] = 0;
   278c8:	e5c41001 	strb	r1, [r4, #1]
    if (_pSingletonCommandHandler)
   278cc:	0a000002 	beq	278dc <CommandHandler::logDebugMessage(char const*)+0x130>
        _pSingletonCommandHandler->_miniHDLC.sendFrame((const uint8_t*)dataFrame, dataFrameTotalLen);
   278d0:	e1a00003 	mov	r0, r3
   278d4:	e59f1038 	ldr	r1, [pc, #56]	; 27914 <CommandHandler::logDebugMessage(char const*)+0x168>
   278d8:	eb0002c5 	bl	283f4 <MiniHDLC::sendFrame(unsigned char const*, int)>
    sendWithJSON("log", responseJson);
}
   278dc:	e28dde7d 	add	sp, sp, #2000	; 0x7d0
   278e0:	e28dd00c 	add	sp, sp, #12
   278e4:	e8bd8030 	pop	{r4, r5, pc}
        strlcat(dataFrame, ",", MAX_DATAFRAME_LEN);
   278e8:	e59f2030 	ldr	r2, [pc, #48]	; 27920 <CommandHandler::logDebugMessage(char const*)+0x174>
   278ec:	e59f104c 	ldr	r1, [pc, #76]	; 27940 <CommandHandler::logDebugMessage(char const*)+0x194>
   278f0:	e1a00004 	mov	r0, r4
   278f4:	eb009703 	bl	4d508 <strlcat>
        strlcat(dataFrame, cmdJson, MAX_DATAFRAME_LEN);
   278f8:	e28d1004 	add	r1, sp, #4
   278fc:	e59f201c 	ldr	r2, [pc, #28]	; 27920 <CommandHandler::logDebugMessage(char const*)+0x174>
   27900:	e1a00004 	mov	r0, r4
   27904:	eb0096ff 	bl	4d508 <strlcat>
   27908:	eaffffcf 	b	2784c <CommandHandler::logDebugMessage(char const*)+0xa0>
   2790c:	000542c8 	.word	0x000542c8
   27910:	00053ca4 	.word	0x00053ca4
   27914:	0006fe38 	.word	0x0006fe38
   27918:	0006fdb8 	.word	0x0006fdb8
   2791c:	0006fdc4 	.word	0x0006fdc4
   27920:	00002710 	.word	0x00002710
   27924:	00054190 	.word	0x00054190
   27928:	000542d0 	.word	0x000542d0
   2792c:	0006fca4 	.word	0x0006fca4
   27930:	000541a4 	.word	0x000541a4
   27934:	000541b0 	.word	0x000541b0
   27938:	000542b4 	.word	0x000542b4
   2793c:	0000270f 	.word	0x0000270f
   27940:	000541a0 	.word	0x000541a0

00027944 <CommandHandler::logDebugJson(char const*)>:

void CommandHandler::logDebugJson(const char* pStr)
{
   27944:	e92d4070 	push	{r4, r5, r6, lr}
   27948:	e1a05001 	mov	r5, r1
    strlcpy(dataFrame, "{\"cmdName\":\"", MAX_DATAFRAME_LEN);
   2794c:	e59f4110 	ldr	r4, [pc, #272]	; 27a64 <CommandHandler::logDebugJson(char const*)+0x120>
    itoa(msgIdx, indexStr, 10);
   27950:	e3a0200a 	mov	r2, #10
   27954:	e59f110c 	ldr	r1, [pc, #268]	; 27a68 <CommandHandler::logDebugJson(char const*)+0x124>
   27958:	e3a00000 	mov	r0, #0
   2795c:	eb0094bf 	bl	4cc60 <itoa>
    itoa(dataLen, lenStr, 10);
   27960:	e3a0200a 	mov	r2, #10
   27964:	e59f1100 	ldr	r1, [pc, #256]	; 27a6c <CommandHandler::logDebugJson(char const*)+0x128>
   27968:	e3a00000 	mov	r0, #0
   2796c:	eb0094bb 	bl	4cc60 <itoa>
    strlcpy(dataFrame, "{\"cmdName\":\"", MAX_DATAFRAME_LEN);
   27970:	e59f20f8 	ldr	r2, [pc, #248]	; 27a70 <CommandHandler::logDebugJson(char const*)+0x12c>
   27974:	e59f10f8 	ldr	r1, [pc, #248]	; 27a74 <CommandHandler::logDebugJson(char const*)+0x130>
   27978:	e1a00004 	mov	r0, r4
   2797c:	eb009711 	bl	4d5c8 <strlcpy>
    strlcat(dataFrame, cmdName, MAX_DATAFRAME_LEN);
   27980:	e59f20e8 	ldr	r2, [pc, #232]	; 27a70 <CommandHandler::logDebugJson(char const*)+0x12c>
   27984:	e59f10ec 	ldr	r1, [pc, #236]	; 27a78 <CommandHandler::logDebugJson(char const*)+0x134>
   27988:	e1a00004 	mov	r0, r4
   2798c:	eb0096dd 	bl	4d508 <strlcat>
    strlcat(dataFrame, "\"", MAX_DATAFRAME_LEN);
   27990:	e1a00004 	mov	r0, r4
   27994:	e59f20d4 	ldr	r2, [pc, #212]	; 27a70 <CommandHandler::logDebugJson(char const*)+0x12c>
   27998:	e59f10dc 	ldr	r1, [pc, #220]	; 27a7c <CommandHandler::logDebugJson(char const*)+0x138>
   2799c:	eb0096d9 	bl	4d508 <strlcat>
    if (strlen(cmdJson) > 0)
   279a0:	e5d53000 	ldrb	r3, [r5]
   279a4:	e3530000 	cmp	r3, #0
   279a8:	1a000024 	bne	27a40 <CommandHandler::logDebugJson(char const*)+0xfc>
    strlcat(dataFrame, indexStr, MAX_DATAFRAME_LEN);
   279ac:	e59f50cc 	ldr	r5, [pc, #204]	; 27a80 <CommandHandler::logDebugJson(char const*)+0x13c>
    strlcat(dataFrame, ",\"msgIdx\":", MAX_DATAFRAME_LEN);
   279b0:	e59f20b8 	ldr	r2, [pc, #184]	; 27a70 <CommandHandler::logDebugJson(char const*)+0x12c>
   279b4:	e59f10c8 	ldr	r1, [pc, #200]	; 27a84 <CommandHandler::logDebugJson(char const*)+0x140>
   279b8:	e59f00a4 	ldr	r0, [pc, #164]	; 27a64 <CommandHandler::logDebugJson(char const*)+0x120>
   279bc:	eb0096d1 	bl	4d508 <strlcat>
    strlcat(dataFrame, indexStr, MAX_DATAFRAME_LEN);
   279c0:	e2851f45 	add	r1, r5, #276	; 0x114
   279c4:	e59f20a4 	ldr	r2, [pc, #164]	; 27a70 <CommandHandler::logDebugJson(char const*)+0x12c>
   279c8:	e59f0094 	ldr	r0, [pc, #148]	; 27a64 <CommandHandler::logDebugJson(char const*)+0x120>
   279cc:	eb0096cd 	bl	4d508 <strlcat>
    strlcat(dataFrame, ",\"dataLen\":", MAX_DATAFRAME_LEN);
   279d0:	e59f2098 	ldr	r2, [pc, #152]	; 27a70 <CommandHandler::logDebugJson(char const*)+0x12c>
   279d4:	e59f10ac 	ldr	r1, [pc, #172]	; 27a88 <CommandHandler::logDebugJson(char const*)+0x144>
   279d8:	e59f0084 	ldr	r0, [pc, #132]	; 27a64 <CommandHandler::logDebugJson(char const*)+0x120>
   279dc:	eb0096c9 	bl	4d508 <strlcat>
    strlcat(dataFrame, lenStr, MAX_DATAFRAME_LEN);
   279e0:	e2851e12 	add	r1, r5, #288	; 0x120
   279e4:	e59f2084 	ldr	r2, [pc, #132]	; 27a70 <CommandHandler::logDebugJson(char const*)+0x12c>
   279e8:	e59f0074 	ldr	r0, [pc, #116]	; 27a64 <CommandHandler::logDebugJson(char const*)+0x120>
   279ec:	eb0096c5 	bl	4d508 <strlcat>
    strlcat(dataFrame, "}", MAX_DATAFRAME_LEN);
   279f0:	e59f2078 	ldr	r2, [pc, #120]	; 27a70 <CommandHandler::logDebugJson(char const*)+0x12c>
   279f4:	e59f1090 	ldr	r1, [pc, #144]	; 27a8c <CommandHandler::logDebugJson(char const*)+0x148>
   279f8:	e59f0064 	ldr	r0, [pc, #100]	; 27a64 <CommandHandler::logDebugJson(char const*)+0x120>
   279fc:	eb0096c1 	bl	4d508 <strlcat>
    uint32_t dataFrameBinaryPos = strlen(dataFrame)+1;
   27a00:	e59f005c 	ldr	r0, [pc, #92]	; 27a64 <CommandHandler::logDebugJson(char const*)+0x120>
   27a04:	eb009704 	bl	4d61c <strlen>
    if (dataFrameTotalLen >= MAX_DATAFRAME_LEN)
   27a08:	e59f3080 	ldr	r3, [pc, #128]	; 27a90 <CommandHandler::logDebugJson(char const*)+0x14c>
    uint32_t dataFrameTotalLen = dataFrameBinaryPos+dataLen+1; 
   27a0c:	e2802002 	add	r2, r0, #2
    if (dataFrameTotalLen >= MAX_DATAFRAME_LEN)
   27a10:	e1520003 	cmp	r2, r3
   27a14:	88bd8070 	pophi	{r4, r5, r6, pc}
    dataFrame[dataFrameTotalLen-1] = 0;
   27a18:	e3a01000 	mov	r1, #0
    if (_pSingletonCommandHandler)
   27a1c:	e5953000 	ldr	r3, [r5]
    dataFrame[dataFrameTotalLen-1] = 0;
   27a20:	e0844000 	add	r4, r4, r0
    if (_pSingletonCommandHandler)
   27a24:	e1530001 	cmp	r3, r1
    dataFrame[dataFrameTotalLen-1] = 0;
   27a28:	e5c41001 	strb	r1, [r4, #1]
    if (_pSingletonCommandHandler)
   27a2c:	08bd8070 	popeq	{r4, r5, r6, pc}
        _pSingletonCommandHandler->_miniHDLC.sendFrame((const uint8_t*)dataFrame, dataFrameTotalLen);
   27a30:	e1a00003 	mov	r0, r3
    sendWithJSON("log", pStr);
}
   27a34:	e8bd4070 	pop	{r4, r5, r6, lr}
        _pSingletonCommandHandler->_miniHDLC.sendFrame((const uint8_t*)dataFrame, dataFrameTotalLen);
   27a38:	e59f1024 	ldr	r1, [pc, #36]	; 27a64 <CommandHandler::logDebugJson(char const*)+0x120>
   27a3c:	ea00026c 	b	283f4 <MiniHDLC::sendFrame(unsigned char const*, int)>
        strlcat(dataFrame, ",", MAX_DATAFRAME_LEN);
   27a40:	e59f2028 	ldr	r2, [pc, #40]	; 27a70 <CommandHandler::logDebugJson(char const*)+0x12c>
   27a44:	e59f1048 	ldr	r1, [pc, #72]	; 27a94 <CommandHandler::logDebugJson(char const*)+0x150>
   27a48:	e1a00004 	mov	r0, r4
   27a4c:	eb0096ad 	bl	4d508 <strlcat>
        strlcat(dataFrame, cmdJson, MAX_DATAFRAME_LEN);
   27a50:	e1a01005 	mov	r1, r5
   27a54:	e59f2014 	ldr	r2, [pc, #20]	; 27a70 <CommandHandler::logDebugJson(char const*)+0x12c>
   27a58:	e1a00004 	mov	r0, r4
   27a5c:	eb0096a9 	bl	4d508 <strlcat>
   27a60:	eaffffd1 	b	279ac <CommandHandler::logDebugJson(char const*)+0x68>
   27a64:	0006fe38 	.word	0x0006fe38
   27a68:	0006fdb8 	.word	0x0006fdb8
   27a6c:	0006fdc4 	.word	0x0006fdc4
   27a70:	00002710 	.word	0x00002710
   27a74:	00054190 	.word	0x00054190
   27a78:	000542d0 	.word	0x000542d0
   27a7c:	00053ca4 	.word	0x00053ca4
   27a80:	0006fca4 	.word	0x0006fca4
   27a84:	000541a4 	.word	0x000541a4
   27a88:	000541b0 	.word	0x000541b0
   27a8c:	000542b4 	.word	0x000542b4
   27a90:	0000270f 	.word	0x0000270f
   27a94:	000541a0 	.word	0x000541a0

00027a98 <CommandHandler::logDebug(char const*, char const*, char const*)>:

void CommandHandler::logDebug(const char* pSeverity, const char* pSource, const char* pMsg)
{
   27a98:	e92d4030 	push	{r4, r5, lr}
   27a9c:	e1a05000 	mov	r5, r0
   27aa0:	e1a04001 	mov	r4, r1
   27aa4:	e24ddc27 	sub	sp, sp, #9984	; 0x2700
   27aa8:	e24dd024 	sub	sp, sp, #36	; 0x24
    // Escape the message since it will be sent inside JSON
    static const int MAX_LOG_MSG_LEN = 5000;
    char escapedMsg[MAX_LOG_MSG_LEN];
    jsonEscape(pMsg, escapedMsg, MAX_LOG_MSG_LEN);
   27aac:	e1a00002 	mov	r0, r2
   27ab0:	e28d100c 	add	r1, sp, #12
   27ab4:	e59f20ec 	ldr	r2, [pc, #236]	; 27ba8 <CommandHandler::logDebug(char const*, char const*, char const*)+0x110>
   27ab8:	ebfff4a0 	bl	24d40 <jsonEscape>

    // Form the message
    char logJson[MAX_LOG_MSG_LEN+1];
    strlcpy(logJson, "\"msg\":\"", MAX_LOG_MSG_LEN);
   27abc:	e28d0d4e 	add	r0, sp, #4992	; 0x1380
   27ac0:	e59f20e0 	ldr	r2, [pc, #224]	; 27ba8 <CommandHandler::logDebug(char const*, char const*, char const*)+0x110>
   27ac4:	e59f10e0 	ldr	r1, [pc, #224]	; 27bac <CommandHandler::logDebug(char const*, char const*, char const*)+0x114>
   27ac8:	e2800014 	add	r0, r0, #20
   27acc:	eb0096bd 	bl	4d5c8 <strlcpy>
    strlcat(logJson, escapedMsg, MAX_LOG_MSG_LEN);
   27ad0:	e28d0d4e 	add	r0, sp, #4992	; 0x1380
   27ad4:	e28d100c 	add	r1, sp, #12
   27ad8:	e59f20c8 	ldr	r2, [pc, #200]	; 27ba8 <CommandHandler::logDebug(char const*, char const*, char const*)+0x110>
   27adc:	e2800014 	add	r0, r0, #20
   27ae0:	eb009688 	bl	4d508 <strlcat>
    strlcat(logJson, "\",", MAX_LOG_MSG_LEN);
   27ae4:	e28d0d4e 	add	r0, sp, #4992	; 0x1380
   27ae8:	e59f20b8 	ldr	r2, [pc, #184]	; 27ba8 <CommandHandler::logDebug(char const*, char const*, char const*)+0x110>
   27aec:	e59f10bc 	ldr	r1, [pc, #188]	; 27bb0 <CommandHandler::logDebug(char const*, char const*, char const*)+0x118>
   27af0:	e2800014 	add	r0, r0, #20
   27af4:	eb009683 	bl	4d508 <strlcat>
    strlcat(logJson, "\"lev\":\"", MAX_LOG_MSG_LEN);
   27af8:	e28d0d4e 	add	r0, sp, #4992	; 0x1380
   27afc:	e59f20a4 	ldr	r2, [pc, #164]	; 27ba8 <CommandHandler::logDebug(char const*, char const*, char const*)+0x110>
   27b00:	e59f10ac 	ldr	r1, [pc, #172]	; 27bb4 <CommandHandler::logDebug(char const*, char const*, char const*)+0x11c>
   27b04:	e2800014 	add	r0, r0, #20
   27b08:	eb00967e 	bl	4d508 <strlcat>
    strlcat(logJson, pSeverity, MAX_LOG_MSG_LEN);
   27b0c:	e28d0d4e 	add	r0, sp, #4992	; 0x1380
   27b10:	e1a01005 	mov	r1, r5
   27b14:	e59f208c 	ldr	r2, [pc, #140]	; 27ba8 <CommandHandler::logDebug(char const*, char const*, char const*)+0x110>
   27b18:	e2800014 	add	r0, r0, #20
   27b1c:	eb009679 	bl	4d508 <strlcat>
    strlcat(logJson, "\",", MAX_LOG_MSG_LEN);
   27b20:	e28d0d4e 	add	r0, sp, #4992	; 0x1380
   27b24:	e59f207c 	ldr	r2, [pc, #124]	; 27ba8 <CommandHandler::logDebug(char const*, char const*, char const*)+0x110>
   27b28:	e59f1080 	ldr	r1, [pc, #128]	; 27bb0 <CommandHandler::logDebug(char const*, char const*, char const*)+0x118>
   27b2c:	e2800014 	add	r0, r0, #20
   27b30:	eb009674 	bl	4d508 <strlcat>
    strlcat(logJson, "\"src\":\"", MAX_LOG_MSG_LEN);
   27b34:	e28d0d4e 	add	r0, sp, #4992	; 0x1380
   27b38:	e59f2068 	ldr	r2, [pc, #104]	; 27ba8 <CommandHandler::logDebug(char const*, char const*, char const*)+0x110>
   27b3c:	e59f1074 	ldr	r1, [pc, #116]	; 27bb8 <CommandHandler::logDebug(char const*, char const*, char const*)+0x120>
   27b40:	e2800014 	add	r0, r0, #20
   27b44:	eb00966f 	bl	4d508 <strlcat>
    strlcat(logJson, pSource, MAX_LOG_MSG_LEN);
   27b48:	e28d0d4e 	add	r0, sp, #4992	; 0x1380
   27b4c:	e1a01004 	mov	r1, r4
   27b50:	e59f2050 	ldr	r2, [pc, #80]	; 27ba8 <CommandHandler::logDebug(char const*, char const*, char const*)+0x110>
   27b54:	e2800014 	add	r0, r0, #20
   27b58:	eb00966a 	bl	4d508 <strlcat>
    strlcat(logJson, "\"", MAX_LOG_MSG_LEN);
   27b5c:	e28d0d4e 	add	r0, sp, #4992	; 0x1380
   27b60:	e2800014 	add	r0, r0, #20
   27b64:	e59f203c 	ldr	r2, [pc, #60]	; 27ba8 <CommandHandler::logDebug(char const*, char const*, char const*)+0x110>
   27b68:	e59f104c 	ldr	r1, [pc, #76]	; 27bbc <CommandHandler::logDebug(char const*, char const*, char const*)+0x124>
   27b6c:	eb009665 	bl	4d508 <strlcat>
    if (_pSingletonCommandHandler)
   27b70:	e59f3048 	ldr	r3, [pc, #72]	; 27bc0 <CommandHandler::logDebug(char const*, char const*, char const*)+0x128>
   27b74:	e5933000 	ldr	r3, [r3]
   27b78:	e3530000 	cmp	r3, #0
   27b7c:	0a000006 	beq	27b9c <CommandHandler::logDebug(char const*, char const*, char const*)+0x104>
    sendWithJSON("log", pStr);
   27b80:	e3a03000 	mov	r3, #0
   27b84:	e28d1d4e 	add	r1, sp, #4992	; 0x1380
   27b88:	e2811014 	add	r1, r1, #20
   27b8c:	e58d3000 	str	r3, [sp]
   27b90:	e1a02003 	mov	r2, r3
   27b94:	e59f0028 	ldr	r0, [pc, #40]	; 27bc4 <CommandHandler::logDebug(char const*, char const*, char const*)+0x12c>
   27b98:	ebfffcbf 	bl	26e9c <CommandHandler::sendWithJSON(char const*, char const*, unsigned long, unsigned char const*, unsigned long)>
        _pSingletonCommandHandler->logDebugJson(logJson);
}
   27b9c:	e28ddc27 	add	sp, sp, #9984	; 0x2700
   27ba0:	e28dd024 	add	sp, sp, #36	; 0x24
   27ba4:	e8bd8030 	pop	{r4, r5, pc}
   27ba8:	00001388 	.word	0x00001388
   27bac:	000542c8 	.word	0x000542c8
   27bb0:	000542d4 	.word	0x000542d4
   27bb4:	000542d8 	.word	0x000542d8
   27bb8:	000542e0 	.word	0x000542e0
   27bbc:	00053ca4 	.word	0x00053ca4
   27bc0:	0006fca4 	.word	0x0006fca4
   27bc4:	000542d0 	.word	0x000542d0

00027bc8 <CommandHandler::service()>:
    // if (isTimeout(micros(), _rdpTimeUs, 5000000))
    // {
    //     LogWrite("pingo", LOG_DEBUG, "rdpmsgstevalcount %d", _rdpMsgCountIn);
    //     _rdpTimeUs = micros();
    // }
}
   27bc8:	e12fff1e 	bx	lr

00027bcc <MiniHDLC::MiniHDLC(void (*)(unsigned char), void (*)(unsigned char const*, int), bool, bool)>:
#ifndef USE_STD_FUNCTION_AND_BIND
    MiniHDLCPutChFnType MiniHDLC::_putChFn = NULL;
    MiniHDLCFrameRxFnType MiniHDLC::_frameRxFn = NULL;
#endif

MiniHDLC::MiniHDLC(MiniHDLCPutChFnType putChFn, MiniHDLCFrameRxFnType frameRxFn,
   27bcc:	e92d4070 	push	{r4, r5, r6, lr}
    {
        clear();
    }
    void clear()
    {
        _rxFrameCount = 0;
   27bd0:	e3a0e000 	mov	lr, #0
				bool bigEndianCRC, bool bitwiseHDLC)
{
    _putChFn = putChFn;
    _frameRxFn = frameRxFn;
    _framePos = 0;
    _frameCRC = CRC16_CCITT_INIT_VAL;
   27bd4:	e3e06000 	mvn	r6, #0
    _putChFn = putChFn;
   27bd8:	e59f5040 	ldr	r5, [pc, #64]	; 27c20 <MiniHDLC::MiniHDLC(void (*)(unsigned char), void (*)(unsigned char const*, int), bool, bool)+0x54>
   27bdc:	e2804906 	add	r4, r0, #98304	; 0x18000
   27be0:	e5851000 	str	r1, [r5]
MiniHDLC::MiniHDLC(MiniHDLCPutChFnType putChFn, MiniHDLCFrameRxFnType frameRxFn,
   27be4:	e5dd1010 	ldrb	r1, [sp, #16]
   27be8:	e584e6bc 	str	lr, [r4, #1724]	; 0x6bc
        _frameCRCErrCount = 0;
   27bec:	e584e6c0 	str	lr, [r4, #1728]	; 0x6c0
        _frameTooLongCount = 0;
   27bf0:	e584e6c4 	str	lr, [r4, #1732]	; 0x6c4
    _frameRxFn = frameRxFn;
   27bf4:	e5852004 	str	r2, [r5, #4]
    _framePos = 0;
   27bf8:	e580e004 	str	lr, [r0, #4]
    _inEscapeSeq = false;
   27bfc:	e5c0e00a 	strb	lr, [r0, #10]
    _bigEndianCRC = bigEndianCRC;
    _bitwiseHDLC = bitwiseHDLC;
    _bitwiseLast8Bits = 0;
   27c00:	e5c0e00b 	strb	lr, [r0, #11]
    _bitwiseByte = 0;
   27c04:	e5c0e00c 	strb	lr, [r0, #12]
    _bitwiseBitCount = 0;
   27c08:	e580e010 	str	lr, [r0, #16]
    _bitwiseSendOnesCount = 0;
   27c0c:	e580e014 	str	lr, [r0, #20]
    _frameCRC = CRC16_CCITT_INIT_VAL;
   27c10:	e1c060b8 	strh	r6, [r0, #8]
    _bigEndianCRC = bigEndianCRC;
   27c14:	e5c03001 	strb	r3, [r0, #1]
    _bitwiseHDLC = bitwiseHDLC;
   27c18:	e5c01000 	strb	r1, [r0]
}
   27c1c:	e8bd8070 	pop	{r4, r5, r6, pc}
   27c20:	00074c58 	.word	0x00074c58

00027c24 <MiniHDLC::handleBit(unsigned char)>:
// Function to handle a single bit received
void MiniHDLC::handleBit(uint8_t bit)
{
	// Shift previous bits up to make space and add new
	_bitwiseLast8Bits = _bitwiseLast8Bits >> 1;
	_bitwiseLast8Bits |= (bit ? 0x80 : 0);
   27c24:	e3510000 	cmp	r1, #0
   27c28:	13e0107f 	mvnne	r1, #127	; 0x7f
{
   27c2c:	e92d4010 	push	{r4, lr}
	_bitwiseLast8Bits = _bitwiseLast8Bits >> 1;
   27c30:	e5d0300b 	ldrb	r3, [r0, #11]
{
   27c34:	e1a04000 	mov	r4, r0
	_bitwiseLast8Bits |= (bit ? 0x80 : 0);
   27c38:	e1a030a3 	lsr	r3, r3, #1
   27c3c:	11833001 	orrne	r3, r3, r1
   27c40:	e6ef3073 	uxtb	r3, r3

	// Check for frame start flag
	if (_bitwiseLast8Bits == FRAME_BOUNDARY_OCTET)
   27c44:	e353007e 	cmp	r3, #126	; 0x7e
	_bitwiseLast8Bits |= (bit ? 0x80 : 0);
   27c48:	e5c0300b 	strb	r3, [r0, #11]
	if (_bitwiseLast8Bits == FRAME_BOUNDARY_OCTET)
   27c4c:	0a000031 	beq	27d18 <MiniHDLC::handleBit(unsigned char)+0xf4>
	}

	// Check for bit stuffing - HDLC abhors a sequence of more
	// than 5 ones in regular data and stuffs a 0 in this case
	// So here we detect that situation and ignore that 0
	if ((_bitwiseLast8Bits & 0xfc) == 0x7c)
   27c50:	e20330fc 	and	r3, r3, #252	; 0xfc
   27c54:	e353007c 	cmp	r3, #124	; 0x7c
   27c58:	08bd8010 	popeq	{r4, pc}
		return;

	// Add the received bit into the byte
	_bitwiseByte = _bitwiseByte >> 1;
   27c5c:	e5d0200c 	ldrb	r2, [r0, #12]
	_bitwiseByte |= (bit ? 0x80 : 0);

	// Count the bits received and handle each byte-full
	_bitwiseBitCount++;
   27c60:	e5903010 	ldr	r3, [r0, #16]
	_bitwiseByte |= (bit ? 0x80 : 0);
   27c64:	e18110a2 	orr	r1, r1, r2, lsr #1
	_bitwiseBitCount++;
   27c68:	e2833001 	add	r3, r3, #1
	_bitwiseByte |= (bit ? 0x80 : 0);
   27c6c:	e6ef1071 	uxtb	r1, r1
	if (_bitwiseBitCount == 8)
   27c70:	e3530008 	cmp	r3, #8
	_bitwiseByte |= (bit ? 0x80 : 0);
   27c74:	e5c0100c 	strb	r1, [r0, #12]
	_bitwiseBitCount++;
   27c78:	e5803010 	str	r3, [r0, #16]
	if (_bitwiseBitCount == 8)
   27c7c:	18bd8010 	popne	{r4, pc}

// Function to find valid HDLC frame from incoming data
void MiniHDLC::handleChar(uint8_t ch)
{
    // Check boundary
    if (ch == FRAME_BOUNDARY_OCTET) 
   27c80:	e351007e 	cmp	r1, #126	; 0x7e
   27c84:	0a000051 	beq	27dd0 <MiniHDLC::handleBit(unsigned char)+0x1ac>
        _stats._rxFrameCount++;
        return;
    }

    // Check escape
    if (_inEscapeSeq)
   27c88:	e5d0300a 	ldrb	r3, [r0, #10]
   27c8c:	e3530000 	cmp	r3, #0
   27c90:	1a00004a 	bne	27dc0 <MiniHDLC::handleBit(unsigned char)+0x19c>
    {
        _inEscapeSeq = false;
        ch ^= INVERT_OCTET;
    }
    else if (ch == CONTROL_ESCAPE_OCTET)
   27c94:	e351007d 	cmp	r1, #125	; 0x7d
    {
        _inEscapeSeq = true;
   27c98:	03a03001 	moveq	r3, #1
   27c9c:	05c0300a 	strbeq	r3, [r0, #10]
    else if (ch == CONTROL_ESCAPE_OCTET)
   27ca0:	0a000018 	beq	27d08 <MiniHDLC::handleBit(unsigned char)+0xe4>
        return;
    }

    // Store in buffer
    _rxBuffer[_framePos] = ch;
   27ca4:	e5943004 	ldr	r3, [r4, #4]
   27ca8:	e0842003 	add	r2, r4, r3

    // Update checksum if needed
    if (_framePos >= 2) 
   27cac:	e3530001 	cmp	r3, #1
    _rxBuffer[_framePos] = ch;
   27cb0:	e5c21018 	strb	r1, [r2, #24]
    if (_framePos >= 2) 
   27cb4:	da000007 	ble	27cd8 <MiniHDLC::handleBit(unsigned char)+0xb4>
    sendChar(FRAME_BOUNDARY_OCTET);
}

uint16_t MiniHDLC::crcUpdateCCITT(unsigned short fcs, unsigned char value)
{
	return (fcs << 8) ^ _CRCTable[((fcs >> 8) ^ value) & 0xff];
   27cb8:	e1d410b8 	ldrh	r1, [r4, #8]
   27cbc:	e5d22016 	ldrb	r2, [r2, #22]
   27cc0:	e59f01a8 	ldr	r0, [pc, #424]	; 27e70 <MiniHDLC::handleBit(unsigned char)+0x24c>
   27cc4:	e0222421 	eor	r2, r2, r1, lsr #8
   27cc8:	e1a02082 	lsl	r2, r2, #1
   27ccc:	e19020b2 	ldrh	r2, [r0, r2]
   27cd0:	e0222401 	eor	r2, r2, r1, lsl #8
        _frameCRC = crcUpdateCCITT(_frameCRC, _rxBuffer[_framePos - 2]);
   27cd4:	e1c420b8 	strh	r2, [r4, #8]
    if (_framePos == MINIHDLC_MAX_FRAME_LENGTH)
   27cd8:	e59f2194 	ldr	r2, [pc, #404]	; 27e74 <MiniHDLC::handleBit(unsigned char)+0x250>
    _framePos++;
   27cdc:	e2833001 	add	r3, r3, #1
    if (_framePos == MINIHDLC_MAX_FRAME_LENGTH)
   27ce0:	e1530002 	cmp	r3, r2
        _framePos = 0;
   27ce4:	03a02000 	moveq	r2, #0
        _frameCRC = CRC16_CCITT_INIT_VAL;
   27ce8:	03e03000 	mvneq	r3, #0
        _framePos = 0;
   27cec:	05842004 	streq	r2, [r4, #4]
        _frameCRC = CRC16_CCITT_INIT_VAL;
   27cf0:	01c430b8 	strheq	r3, [r4, #8]
        _stats._frameTooLongCount++;
   27cf4:	02842906 	addeq	r2, r4, #98304	; 0x18000
   27cf8:	059236c4 	ldreq	r3, [r2, #1732]	; 0x6c4
    _framePos++;
   27cfc:	15843004 	strne	r3, [r4, #4]
        _stats._frameTooLongCount++;
   27d00:	02833001 	addeq	r3, r3, #1
   27d04:	058236c4 	streq	r3, [r2, #1732]	; 0x6c4
		_bitwiseByte = 0;
   27d08:	e3a03000 	mov	r3, #0
   27d0c:	e5c4300c 	strb	r3, [r4, #12]
		_bitwiseBitCount = 0;
   27d10:	e5843010 	str	r3, [r4, #16]
}
   27d14:	e8bd8010 	pop	{r4, pc}
        if (_framePos >= 2) 
   27d18:	e5903004 	ldr	r3, [r0, #4]
   27d1c:	e3530001 	cmp	r3, #1
   27d20:	da000024 	ble	27db8 <MiniHDLC::handleBit(unsigned char)+0x194>
            if (_bigEndianCRC)
   27d24:	e5d02001 	ldrb	r2, [r0, #1]
            uint16_t rxcrc = _rxBuffer[_framePos - 2] | (((uint16_t)_rxBuffer[_framePos-1]) << 8);
   27d28:	e2431002 	sub	r1, r3, #2
   27d2c:	e0803003 	add	r3, r0, r3
   27d30:	e0800001 	add	r0, r0, r1
            if (_bigEndianCRC)
   27d34:	e3520000 	cmp	r2, #0
            uint16_t rxcrc = _rxBuffer[_framePos - 2] | (((uint16_t)_rxBuffer[_framePos-1]) << 8);
   27d38:	e5d33017 	ldrb	r3, [r3, #23]
   27d3c:	e5d02018 	ldrb	r2, [r0, #24]
   27d40:	01823403 	orreq	r3, r2, r3, lsl #8
                rxcrc = _rxBuffer[_framePos - 1] | (((uint16_t)_rxBuffer[_framePos - 2]) << 8);
   27d44:	11833402 	orrne	r3, r3, r2, lsl #8
   27d48:	e6bf3073 	sxth	r3, r3
            if (rxcrc == _frameCRC)
   27d4c:	e1d420b8 	ldrh	r2, [r4, #8]
   27d50:	e6ff3073 	uxth	r3, r3
   27d54:	e1520003 	cmp	r2, r3
   27d58:	0a00000e 	beq	27d98 <MiniHDLC::handleBit(unsigned char)+0x174>
                _stats._frameCRCErrCount++;
   27d5c:	e2842906 	add	r2, r4, #98304	; 0x18000
   27d60:	e59236c0 	ldr	r3, [r2, #1728]	; 0x6c0
   27d64:	e2833001 	add	r3, r3, #1
   27d68:	e58236c0 	str	r3, [r2, #1728]	; 0x6c0
        _inEscapeSeq = false;
   27d6c:	e3a03000 	mov	r3, #0
        _frameCRC = CRC16_CCITT_INIT_VAL;
   27d70:	e3e01000 	mvn	r1, #0
        _inEscapeSeq = false;
   27d74:	e5c4300a 	strb	r3, [r4, #10]
        _framePos = 0;
   27d78:	e5843004 	str	r3, [r4, #4]
        _frameCRC = CRC16_CCITT_INIT_VAL;
   27d7c:	e1c410b8 	strh	r1, [r4, #8]
        _stats._rxFrameCount++;
   27d80:	e59216bc 	ldr	r1, [r2, #1724]	; 0x6bc
   27d84:	e2811001 	add	r1, r1, #1
   27d88:	e58216bc 	str	r1, [r2, #1724]	; 0x6bc
		_bitwiseByte = 0;
   27d8c:	e5c4300c 	strb	r3, [r4, #12]
		_bitwiseBitCount = 0;
   27d90:	e5843010 	str	r3, [r4, #16]
		return;
   27d94:	e8bd8010 	pop	{r4, pc}
                _rxBuffer[_framePos-2] = 0;
   27d98:	e3a02000 	mov	r2, #0
                if(_frameRxFn)
   27d9c:	e59f30d4 	ldr	r3, [pc, #212]	; 27e78 <MiniHDLC::handleBit(unsigned char)+0x254>
                _rxBuffer[_framePos-2] = 0;
   27da0:	e5c02018 	strb	r2, [r0, #24]
                if(_frameRxFn)
   27da4:	e5933004 	ldr	r3, [r3, #4]
   27da8:	e1530002 	cmp	r3, r2
   27dac:	0a000001 	beq	27db8 <MiniHDLC::handleBit(unsigned char)+0x194>
                    _frameRxFn(_rxBuffer, _framePos - 2);
   27db0:	e2840018 	add	r0, r4, #24
   27db4:	e12fff33 	blx	r3
   27db8:	e2842906 	add	r2, r4, #98304	; 0x18000
   27dbc:	eaffffea 	b	27d6c <MiniHDLC::handleBit(unsigned char)+0x148>
        _inEscapeSeq = false;
   27dc0:	e3a03000 	mov	r3, #0
        ch ^= INVERT_OCTET;
   27dc4:	e2211020 	eor	r1, r1, #32
        _inEscapeSeq = false;
   27dc8:	e5c0300a 	strb	r3, [r0, #10]
   27dcc:	eaffffb4 	b	27ca4 <MiniHDLC::handleBit(unsigned char)+0x80>
        if (_framePos >= 2) 
   27dd0:	e5903004 	ldr	r3, [r0, #4]
   27dd4:	e3530001 	cmp	r3, #1
   27dd8:	da000022 	ble	27e68 <MiniHDLC::handleBit(unsigned char)+0x244>
            if (_bigEndianCRC)
   27ddc:	e5d02001 	ldrb	r2, [r0, #1]
            uint16_t rxcrc = _rxBuffer[_framePos - 2] | (((uint16_t)_rxBuffer[_framePos-1]) << 8);
   27de0:	e2431002 	sub	r1, r3, #2
   27de4:	e0803003 	add	r3, r0, r3
   27de8:	e0800001 	add	r0, r0, r1
            if (_bigEndianCRC)
   27dec:	e3520000 	cmp	r2, #0
            uint16_t rxcrc = _rxBuffer[_framePos - 2] | (((uint16_t)_rxBuffer[_framePos-1]) << 8);
   27df0:	e5d33017 	ldrb	r3, [r3, #23]
   27df4:	e5d02018 	ldrb	r2, [r0, #24]
   27df8:	01823403 	orreq	r3, r2, r3, lsl #8
                rxcrc = _rxBuffer[_framePos - 1] | (((uint16_t)_rxBuffer[_framePos - 2]) << 8);
   27dfc:	11833402 	orrne	r3, r3, r2, lsl #8
   27e00:	e6bf3073 	sxth	r3, r3
            if (rxcrc == _frameCRC)
   27e04:	e1d420b8 	ldrh	r2, [r4, #8]
   27e08:	e6ff3073 	uxth	r3, r3
   27e0c:	e1520003 	cmp	r2, r3
   27e10:	0a00000c 	beq	27e48 <MiniHDLC::handleBit(unsigned char)+0x224>
                _stats._frameCRCErrCount++;
   27e14:	e2842906 	add	r2, r4, #98304	; 0x18000
   27e18:	e59236c0 	ldr	r3, [r2, #1728]	; 0x6c0
   27e1c:	e2833001 	add	r3, r3, #1
   27e20:	e58236c0 	str	r3, [r2, #1728]	; 0x6c0
        _inEscapeSeq = false;
   27e24:	e3a03000 	mov	r3, #0
        _frameCRC = CRC16_CCITT_INIT_VAL;
   27e28:	e3e01000 	mvn	r1, #0
        _inEscapeSeq = false;
   27e2c:	e5c4300a 	strb	r3, [r4, #10]
        _framePos = 0;
   27e30:	e5843004 	str	r3, [r4, #4]
        _frameCRC = CRC16_CCITT_INIT_VAL;
   27e34:	e1c410b8 	strh	r1, [r4, #8]
        _stats._rxFrameCount++;
   27e38:	e59236bc 	ldr	r3, [r2, #1724]	; 0x6bc
   27e3c:	e2833001 	add	r3, r3, #1
   27e40:	e58236bc 	str	r3, [r2, #1724]	; 0x6bc
   27e44:	eaffffaf 	b	27d08 <MiniHDLC::handleBit(unsigned char)+0xe4>
                _rxBuffer[_framePos-2] = 0;
   27e48:	e3a02000 	mov	r2, #0
                if(_frameRxFn)
   27e4c:	e59f3024 	ldr	r3, [pc, #36]	; 27e78 <MiniHDLC::handleBit(unsigned char)+0x254>
                _rxBuffer[_framePos-2] = 0;
   27e50:	e5c02018 	strb	r2, [r0, #24]
                if(_frameRxFn)
   27e54:	e5933004 	ldr	r3, [r3, #4]
   27e58:	e1530002 	cmp	r3, r2
   27e5c:	0a000001 	beq	27e68 <MiniHDLC::handleBit(unsigned char)+0x244>
                    _frameRxFn(_rxBuffer, _framePos - 2);
   27e60:	e2840018 	add	r0, r4, #24
   27e64:	e12fff33 	blx	r3
   27e68:	e2842906 	add	r2, r4, #98304	; 0x18000
   27e6c:	eaffffec 	b	27e24 <MiniHDLC::handleBit(unsigned char)+0x200>
   27e70:	000542e8 	.word	0x000542e8
   27e74:	000186a0 	.word	0x000186a0
   27e78:	00074c58 	.word	0x00074c58

00027e7c <MiniHDLC::handleChar(unsigned char)>:
    if (ch == FRAME_BOUNDARY_OCTET) 
   27e7c:	e351007e 	cmp	r1, #126	; 0x7e
{
   27e80:	e92d4010 	push	{r4, lr}
   27e84:	e1a04000 	mov	r4, r0
    if (ch == FRAME_BOUNDARY_OCTET) 
   27e88:	0a000022 	beq	27f18 <MiniHDLC::handleChar(unsigned char)+0x9c>
    if (_inEscapeSeq)
   27e8c:	e5d0300a 	ldrb	r3, [r0, #10]
   27e90:	e3530000 	cmp	r3, #0
   27e94:	1a00001b 	bne	27f08 <MiniHDLC::handleChar(unsigned char)+0x8c>
    else if (ch == CONTROL_ESCAPE_OCTET)
   27e98:	e351007d 	cmp	r1, #125	; 0x7d
   27e9c:	0a000045 	beq	27fb8 <MiniHDLC::handleChar(unsigned char)+0x13c>
    _rxBuffer[_framePos] = ch;
   27ea0:	e5943004 	ldr	r3, [r4, #4]
   27ea4:	e0842003 	add	r2, r4, r3
    if (_framePos >= 2) 
   27ea8:	e3530001 	cmp	r3, #1
    _rxBuffer[_framePos] = ch;
   27eac:	e5c21018 	strb	r1, [r2, #24]
    if (_framePos >= 2) 
   27eb0:	da000007 	ble	27ed4 <MiniHDLC::handleChar(unsigned char)+0x58>
	return (fcs << 8) ^ _CRCTable[((fcs >> 8) ^ value) & 0xff];
   27eb4:	e1d410b8 	ldrh	r1, [r4, #8]
   27eb8:	e5d22016 	ldrb	r2, [r2, #22]
   27ebc:	e59f0100 	ldr	r0, [pc, #256]	; 27fc4 <MiniHDLC::handleChar(unsigned char)+0x148>
   27ec0:	e0222421 	eor	r2, r2, r1, lsr #8
   27ec4:	e1a02082 	lsl	r2, r2, #1
   27ec8:	e19020b2 	ldrh	r2, [r0, r2]
   27ecc:	e0222401 	eor	r2, r2, r1, lsl #8
        _frameCRC = crcUpdateCCITT(_frameCRC, _rxBuffer[_framePos - 2]);
   27ed0:	e1c420b8 	strh	r2, [r4, #8]
    if (_framePos == MINIHDLC_MAX_FRAME_LENGTH)
   27ed4:	e59f20ec 	ldr	r2, [pc, #236]	; 27fc8 <MiniHDLC::handleChar(unsigned char)+0x14c>
    _framePos++;
   27ed8:	e2833001 	add	r3, r3, #1
    if (_framePos == MINIHDLC_MAX_FRAME_LENGTH)
   27edc:	e1530002 	cmp	r3, r2
        _frameCRC = CRC16_CCITT_INIT_VAL;
   27ee0:	03e03000 	mvneq	r3, #0
        _framePos = 0;
   27ee4:	03a02000 	moveq	r2, #0
        _frameCRC = CRC16_CCITT_INIT_VAL;
   27ee8:	01c430b8 	strheq	r3, [r4, #8]
        _framePos = 0;
   27eec:	05842004 	streq	r2, [r4, #4]
        _stats._frameTooLongCount++;
   27ef0:	02844906 	addeq	r4, r4, #98304	; 0x18000
   27ef4:	059436c4 	ldreq	r3, [r4, #1732]	; 0x6c4
    _framePos++;
   27ef8:	15843004 	strne	r3, [r4, #4]
        _stats._frameTooLongCount++;
   27efc:	02833001 	addeq	r3, r3, #1
   27f00:	058436c4 	streq	r3, [r4, #1732]	; 0x6c4
}
   27f04:	e8bd8010 	pop	{r4, pc}
        _inEscapeSeq = false;
   27f08:	e3a03000 	mov	r3, #0
        ch ^= INVERT_OCTET;
   27f0c:	e2211020 	eor	r1, r1, #32
        _inEscapeSeq = false;
   27f10:	e5c0300a 	strb	r3, [r0, #10]
   27f14:	eaffffe1 	b	27ea0 <MiniHDLC::handleChar(unsigned char)+0x24>
        if (_framePos >= 2) 
   27f18:	e5903004 	ldr	r3, [r0, #4]
   27f1c:	e3530001 	cmp	r3, #1
   27f20:	da000022 	ble	27fb0 <MiniHDLC::handleChar(unsigned char)+0x134>
            if (_bigEndianCRC)
   27f24:	e5d02001 	ldrb	r2, [r0, #1]
            uint16_t rxcrc = _rxBuffer[_framePos - 2] | (((uint16_t)_rxBuffer[_framePos-1]) << 8);
   27f28:	e2431002 	sub	r1, r3, #2
   27f2c:	e0803003 	add	r3, r0, r3
   27f30:	e0800001 	add	r0, r0, r1
            if (_bigEndianCRC)
   27f34:	e3520000 	cmp	r2, #0
            uint16_t rxcrc = _rxBuffer[_framePos - 2] | (((uint16_t)_rxBuffer[_framePos-1]) << 8);
   27f38:	e5d33017 	ldrb	r3, [r3, #23]
   27f3c:	e5d02018 	ldrb	r2, [r0, #24]
   27f40:	01823403 	orreq	r3, r2, r3, lsl #8
                rxcrc = _rxBuffer[_framePos - 1] | (((uint16_t)_rxBuffer[_framePos - 2]) << 8);
   27f44:	11833402 	orrne	r3, r3, r2, lsl #8
   27f48:	e6bf3073 	sxth	r3, r3
            if (rxcrc == _frameCRC)
   27f4c:	e1d420b8 	ldrh	r2, [r4, #8]
   27f50:	e6ff3073 	uxth	r3, r3
   27f54:	e1520003 	cmp	r2, r3
   27f58:	0a00000c 	beq	27f90 <MiniHDLC::handleChar(unsigned char)+0x114>
                _stats._frameCRCErrCount++;
   27f5c:	e2842906 	add	r2, r4, #98304	; 0x18000
   27f60:	e59236c0 	ldr	r3, [r2, #1728]	; 0x6c0
   27f64:	e2833001 	add	r3, r3, #1
   27f68:	e58236c0 	str	r3, [r2, #1728]	; 0x6c0
        _inEscapeSeq = false;
   27f6c:	e3a03000 	mov	r3, #0
        _frameCRC = CRC16_CCITT_INIT_VAL;
   27f70:	e3e01000 	mvn	r1, #0
        _inEscapeSeq = false;
   27f74:	e5c4300a 	strb	r3, [r4, #10]
        _framePos = 0;
   27f78:	e5843004 	str	r3, [r4, #4]
        _frameCRC = CRC16_CCITT_INIT_VAL;
   27f7c:	e1c410b8 	strh	r1, [r4, #8]
        _stats._rxFrameCount++;
   27f80:	e59236bc 	ldr	r3, [r2, #1724]	; 0x6bc
   27f84:	e2833001 	add	r3, r3, #1
   27f88:	e58236bc 	str	r3, [r2, #1724]	; 0x6bc
   27f8c:	e8bd8010 	pop	{r4, pc}
                _rxBuffer[_framePos-2] = 0;
   27f90:	e3a02000 	mov	r2, #0
                if(_frameRxFn)
   27f94:	e59f3030 	ldr	r3, [pc, #48]	; 27fcc <MiniHDLC::handleChar(unsigned char)+0x150>
                _rxBuffer[_framePos-2] = 0;
   27f98:	e5c02018 	strb	r2, [r0, #24]
                if(_frameRxFn)
   27f9c:	e5933004 	ldr	r3, [r3, #4]
   27fa0:	e1530002 	cmp	r3, r2
   27fa4:	0a000001 	beq	27fb0 <MiniHDLC::handleChar(unsigned char)+0x134>
                    _frameRxFn(_rxBuffer, _framePos - 2);
   27fa8:	e2840018 	add	r0, r4, #24
   27fac:	e12fff33 	blx	r3
   27fb0:	e2842906 	add	r2, r4, #98304	; 0x18000
   27fb4:	eaffffec 	b	27f6c <MiniHDLC::handleChar(unsigned char)+0xf0>
        _inEscapeSeq = true;
   27fb8:	e3a03001 	mov	r3, #1
   27fbc:	e5c0300a 	strb	r3, [r0, #10]
        return;
   27fc0:	e8bd8010 	pop	{r4, pc}
   27fc4:	000542e8 	.word	0x000542e8
   27fc8:	000186a0 	.word	0x000186a0
   27fcc:	00074c58 	.word	0x00074c58

00027fd0 <MiniHDLC::handleBuffer(unsigned char const*, int)>:
{
   27fd0:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    for (int i = 0; i < numBytes; i++)
   27fd4:	e2526000 	subs	r6, r2, #0
   27fd8:	d8bd87f0 	pople	{r4, r5, r6, r7, r8, r9, sl, pc}
   27fdc:	e2415001 	sub	r5, r1, #1
   27fe0:	e1a04000 	mov	r4, r0
    if (_framePos == MINIHDLC_MAX_FRAME_LENGTH)
   27fe4:	e59f7154 	ldr	r7, [pc, #340]	; 28140 <MiniHDLC::handleBuffer(unsigned char const*, int)+0x170>
	return (fcs << 8) ^ _CRCTable[((fcs >> 8) ^ value) & 0xff];
   27fe8:	e59f8154 	ldr	r8, [pc, #340]	; 28144 <MiniHDLC::handleBuffer(unsigned char const*, int)+0x174>
                if(_frameRxFn)
   27fec:	e59f9154 	ldr	r9, [pc, #340]	; 28148 <MiniHDLC::handleBuffer(unsigned char const*, int)+0x178>
   27ff0:	e0856006 	add	r6, r5, r6
   27ff4:	ea00001e 	b	28074 <MiniHDLC::handleBuffer(unsigned char const*, int)+0xa4>
    if (_inEscapeSeq)
   27ff8:	e5d4300a 	ldrb	r3, [r4, #10]
   27ffc:	e3530000 	cmp	r3, #0
   28000:	0a00003e 	beq	28100 <MiniHDLC::handleBuffer(unsigned char const*, int)+0x130>
        _inEscapeSeq = false;
   28004:	e3a03000 	mov	r3, #0
        ch ^= INVERT_OCTET;
   28008:	e2222020 	eor	r2, r2, #32
        _inEscapeSeq = false;
   2800c:	e5c4300a 	strb	r3, [r4, #10]
    _rxBuffer[_framePos] = ch;
   28010:	e5943004 	ldr	r3, [r4, #4]
   28014:	e0841003 	add	r1, r4, r3
    if (_framePos >= 2) 
   28018:	e3530001 	cmp	r3, #1
    _rxBuffer[_framePos] = ch;
   2801c:	e5c12018 	strb	r2, [r1, #24]
    if (_framePos >= 2) 
   28020:	da000006 	ble	28040 <MiniHDLC::handleBuffer(unsigned char const*, int)+0x70>
	return (fcs << 8) ^ _CRCTable[((fcs >> 8) ^ value) & 0xff];
   28024:	e5d12016 	ldrb	r2, [r1, #22]
   28028:	e1d410b8 	ldrh	r1, [r4, #8]
   2802c:	e0222421 	eor	r2, r2, r1, lsr #8
   28030:	e1a02082 	lsl	r2, r2, #1
   28034:	e19820b2 	ldrh	r2, [r8, r2]
   28038:	e0222401 	eor	r2, r2, r1, lsl #8
        _frameCRC = crcUpdateCCITT(_frameCRC, _rxBuffer[_framePos - 2]);
   2803c:	e1c420b8 	strh	r2, [r4, #8]
    _framePos++;
   28040:	e2833001 	add	r3, r3, #1
    if (_framePos == MINIHDLC_MAX_FRAME_LENGTH)
   28044:	e1530007 	cmp	r3, r7
        _framePos = 0;
   28048:	03a02000 	moveq	r2, #0
        _frameCRC = CRC16_CCITT_INIT_VAL;
   2804c:	03e03000 	mvneq	r3, #0
        _framePos = 0;
   28050:	05842004 	streq	r2, [r4, #4]
        _frameCRC = CRC16_CCITT_INIT_VAL;
   28054:	01c430b8 	strheq	r3, [r4, #8]
        _stats._frameTooLongCount++;
   28058:	02843906 	addeq	r3, r4, #98304	; 0x18000
   2805c:	059326c4 	ldreq	r2, [r3, #1732]	; 0x6c4
    _framePos++;
   28060:	15843004 	strne	r3, [r4, #4]
        _stats._frameTooLongCount++;
   28064:	02822001 	addeq	r2, r2, #1
   28068:	058326c4 	streq	r2, [r3, #1732]	; 0x6c4
    for (int i = 0; i < numBytes; i++)
   2806c:	e1560005 	cmp	r6, r5
   28070:	08bd87f0 	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
        handleChar(pBuf[i]);
   28074:	e5f52001 	ldrb	r2, [r5, #1]!
    if (ch == FRAME_BOUNDARY_OCTET) 
   28078:	e352007e 	cmp	r2, #126	; 0x7e
   2807c:	1affffdd 	bne	27ff8 <MiniHDLC::handleBuffer(unsigned char const*, int)+0x28>
        if (_framePos >= 2) 
   28080:	e5943004 	ldr	r3, [r4, #4]
   28084:	e3530001 	cmp	r3, #1
   28088:	da00002a 	ble	28138 <MiniHDLC::handleBuffer(unsigned char const*, int)+0x168>
            if (_bigEndianCRC)
   2808c:	e5d42001 	ldrb	r2, [r4, #1]
            uint16_t rxcrc = _rxBuffer[_framePos - 2] | (((uint16_t)_rxBuffer[_framePos-1]) << 8);
   28090:	e2431002 	sub	r1, r3, #2
   28094:	e0840001 	add	r0, r4, r1
   28098:	e0843003 	add	r3, r4, r3
            if (_bigEndianCRC)
   2809c:	e3520000 	cmp	r2, #0
            uint16_t rxcrc = _rxBuffer[_framePos - 2] | (((uint16_t)_rxBuffer[_framePos-1]) << 8);
   280a0:	e5d33017 	ldrb	r3, [r3, #23]
   280a4:	e5d02018 	ldrb	r2, [r0, #24]
   280a8:	01823403 	orreq	r3, r2, r3, lsl #8
                rxcrc = _rxBuffer[_framePos - 1] | (((uint16_t)_rxBuffer[_framePos - 2]) << 8);
   280ac:	11833402 	orrne	r3, r3, r2, lsl #8
   280b0:	e6bf3073 	sxth	r3, r3
            if (rxcrc == _frameCRC)
   280b4:	e1d420b8 	ldrh	r2, [r4, #8]
   280b8:	e6ff3073 	uxth	r3, r3
   280bc:	e1520003 	cmp	r2, r3
   280c0:	0a000015 	beq	2811c <MiniHDLC::handleBuffer(unsigned char const*, int)+0x14c>
                _stats._frameCRCErrCount++;
   280c4:	e2843906 	add	r3, r4, #98304	; 0x18000
   280c8:	e59326c0 	ldr	r2, [r3, #1728]	; 0x6c0
   280cc:	e2822001 	add	r2, r2, #1
   280d0:	e58326c0 	str	r2, [r3, #1728]	; 0x6c0
        _inEscapeSeq = false;
   280d4:	e3a02000 	mov	r2, #0
        _frameCRC = CRC16_CCITT_INIT_VAL;
   280d8:	e3e01000 	mvn	r1, #0
        _inEscapeSeq = false;
   280dc:	e5c4200a 	strb	r2, [r4, #10]
        _framePos = 0;
   280e0:	e5842004 	str	r2, [r4, #4]
        _frameCRC = CRC16_CCITT_INIT_VAL;
   280e4:	e1c410b8 	strh	r1, [r4, #8]
        _stats._rxFrameCount++;
   280e8:	e59326bc 	ldr	r2, [r3, #1724]	; 0x6bc
    for (int i = 0; i < numBytes; i++)
   280ec:	e1560005 	cmp	r6, r5
        _stats._rxFrameCount++;
   280f0:	e2822001 	add	r2, r2, #1
   280f4:	e58326bc 	str	r2, [r3, #1724]	; 0x6bc
    for (int i = 0; i < numBytes; i++)
   280f8:	1affffdd 	bne	28074 <MiniHDLC::handleBuffer(unsigned char const*, int)+0xa4>
   280fc:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    else if (ch == CONTROL_ESCAPE_OCTET)
   28100:	e352007d 	cmp	r2, #125	; 0x7d
        _inEscapeSeq = true;
   28104:	03a03001 	moveq	r3, #1
   28108:	05c4300a 	strbeq	r3, [r4, #10]
    else if (ch == CONTROL_ESCAPE_OCTET)
   2810c:	1affffbf 	bne	28010 <MiniHDLC::handleBuffer(unsigned char const*, int)+0x40>
    for (int i = 0; i < numBytes; i++)
   28110:	e1560005 	cmp	r6, r5
   28114:	1affffd6 	bne	28074 <MiniHDLC::handleBuffer(unsigned char const*, int)+0xa4>
   28118:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
                _rxBuffer[_framePos-2] = 0;
   2811c:	e3a02000 	mov	r2, #0
                if(_frameRxFn)
   28120:	e5993004 	ldr	r3, [r9, #4]
                _rxBuffer[_framePos-2] = 0;
   28124:	e5c02018 	strb	r2, [r0, #24]
                if(_frameRxFn)
   28128:	e1530002 	cmp	r3, r2
   2812c:	0a000001 	beq	28138 <MiniHDLC::handleBuffer(unsigned char const*, int)+0x168>
                    _frameRxFn(_rxBuffer, _framePos - 2);
   28130:	e2840018 	add	r0, r4, #24
   28134:	e12fff33 	blx	r3
   28138:	e2843906 	add	r3, r4, #98304	; 0x18000
   2813c:	eaffffe4 	b	280d4 <MiniHDLC::handleBuffer(unsigned char const*, int)+0x104>
   28140:	000186a0 	.word	0x000186a0
   28144:	000542e8 	.word	0x000542e8
   28148:	00074c58 	.word	0x00074c58

0002814c <MiniHDLC::crcUpdateCCITT(unsigned short, unsigned char)>:
	return (fcs << 8) ^ _CRCTable[((fcs >> 8) ^ value) & 0xff];
   2814c:	e59f3014 	ldr	r3, [pc, #20]	; 28168 <MiniHDLC::crcUpdateCCITT(unsigned short, unsigned char)+0x1c>
   28150:	e0222421 	eor	r2, r2, r1, lsr #8
   28154:	e1a02082 	lsl	r2, r2, #1
   28158:	e19300b2 	ldrh	r0, [r3, r2]
   2815c:	e0200401 	eor	r0, r0, r1, lsl #8
}
   28160:	e6ff0070 	uxth	r0, r0
   28164:	e12fff1e 	bx	lr
   28168:	000542e8 	.word	0x000542e8

0002816c <MiniHDLC::sendChar(unsigned char)>:

void MiniHDLC::sendChar(uint8_t ch)
{
   2816c:	e92d4070 	push	{r4, r5, r6, lr}
	if (_bitwiseHDLC)
   28170:	e5d03000 	ldrb	r3, [r0]
   28174:	e59f6048 	ldr	r6, [pc, #72]	; 281c4 <MiniHDLC::sendChar(unsigned char)+0x58>
   28178:	e3530000 	cmp	r3, #0
{
   2817c:	e1a04001 	mov	r4, r1
   28180:	e5963000 	ldr	r3, [r6]
	if (_bitwiseHDLC)
   28184:	0a000009 	beq	281b0 <MiniHDLC::sendChar(unsigned char)+0x44>
   28188:	e3a05008 	mov	r5, #8
	{
		// Send each bit
		uint8_t bitData = ch;
		for (int i = 0; i < 8; i++)
		{
			if (_putChFn)
   2818c:	e3530000 	cmp	r3, #0
				_putChFn(bitData & 0x01);
   28190:	e2040001 	and	r0, r4, #1
			if (_putChFn)
   28194:	0a000000 	beq	2819c <MiniHDLC::sendChar(unsigned char)+0x30>
				_putChFn(bitData & 0x01);
   28198:	e12fff33 	blx	r3
		for (int i = 0; i < 8; i++)
   2819c:	e2555001 	subs	r5, r5, #1
			bitData = bitData >> 1;
   281a0:	e1a040a4 	lsr	r4, r4, #1
		for (int i = 0; i < 8; i++)
   281a4:	08bd8070 	popeq	{r4, r5, r6, pc}
   281a8:	e5963000 	ldr	r3, [r6]
   281ac:	eafffff6 	b	2818c <MiniHDLC::sendChar(unsigned char)+0x20>
		}
	}
	else
	{
		// Send byte-wise
		if (_putChFn)
   281b0:	e3530000 	cmp	r3, #0
   281b4:	08bd8070 	popeq	{r4, r5, r6, pc}
			_putChFn(ch);
   281b8:	e1a00001 	mov	r0, r1
	}
}
   281bc:	e8bd4070 	pop	{r4, r5, r6, lr}
			_putChFn(ch);
   281c0:	e12fff13 	bx	r3
   281c4:	00074c58 	.word	0x00074c58

000281c8 <MiniHDLC::sendCharWithStuffing(unsigned char)>:

void MiniHDLC::sendCharWithStuffing(uint8_t ch)
{
   281c8:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
	if (_bitwiseHDLC)
   281cc:	e5d03000 	ldrb	r3, [r0]
   281d0:	e59f7094 	ldr	r7, [pc, #148]	; 2826c <MiniHDLC::sendCharWithStuffing(unsigned char)+0xa4>
   281d4:	e3530000 	cmp	r3, #0
{
   281d8:	e1a04001 	mov	r4, r1
   281dc:	e5973000 	ldr	r3, [r7]
	if (_bitwiseHDLC)
   281e0:	0a00001c 	beq	28258 <MiniHDLC::sendCharWithStuffing(unsigned char)+0x90>
   281e4:	e1a09000 	mov	r9, r0
   281e8:	e3a05008 	mov	r5, #8
				if (_bitwiseSendOnesCount == 5)
				{
					// Stuff a 0 to avoid 6 consecutive 1s
					if (_putChFn)
						_putChFn(0);
					_bitwiseSendOnesCount = 0;
   281ec:	e3a08000 	mov	r8, #0
   281f0:	ea000008 	b	28218 <MiniHDLC::sendCharWithStuffing(unsigned char)+0x50>
				_bitwiseSendOnesCount++;
   281f4:	e5993014 	ldr	r3, [r9, #20]
   281f8:	e2833001 	add	r3, r3, #1
				if (_bitwiseSendOnesCount == 5)
   281fc:	e3530005 	cmp	r3, #5
				_bitwiseSendOnesCount++;
   28200:	e5893014 	str	r3, [r9, #20]
				if (_bitwiseSendOnesCount == 5)
   28204:	0a00000c 	beq	2823c <MiniHDLC::sendCharWithStuffing(unsigned char)+0x74>
		for (int i = 0; i < 8; i++)
   28208:	e2555001 	subs	r5, r5, #1
			{
				// Reset count of consecutive 1s
				_bitwiseSendOnesCount = 0;
			}
			// Shift to next bit
			bitData = bitData >> 1;
   2820c:	e1a040a4 	lsr	r4, r4, #1
		for (int i = 0; i < 8; i++)
   28210:	08bd87f0 	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   28214:	e5973000 	ldr	r3, [r7]
			if (_putChFn)
   28218:	e3530000 	cmp	r3, #0
   2821c:	e2046001 	and	r6, r4, #1
   28220:	0a000001 	beq	2822c <MiniHDLC::sendCharWithStuffing(unsigned char)+0x64>
				_putChFn(bitData & 0x01);
   28224:	e1a00006 	mov	r0, r6
   28228:	e12fff33 	blx	r3
			if (bitData & 0x01)
   2822c:	e3560000 	cmp	r6, #0
   28230:	1affffef 	bne	281f4 <MiniHDLC::sendCharWithStuffing(unsigned char)+0x2c>
					_bitwiseSendOnesCount = 0;
   28234:	e5898014 	str	r8, [r9, #20]
   28238:	eafffff2 	b	28208 <MiniHDLC::sendCharWithStuffing(unsigned char)+0x40>
					if (_putChFn)
   2823c:	e5973000 	ldr	r3, [r7]
   28240:	e3530000 	cmp	r3, #0
   28244:	0afffffa 	beq	28234 <MiniHDLC::sendCharWithStuffing(unsigned char)+0x6c>
						_putChFn(0);
   28248:	e3a00000 	mov	r0, #0
   2824c:	e12fff33 	blx	r3
					_bitwiseSendOnesCount = 0;
   28250:	e5898014 	str	r8, [r9, #20]
   28254:	eaffffeb 	b	28208 <MiniHDLC::sendCharWithStuffing(unsigned char)+0x40>
		if (_putChFn)
   28258:	e3530000 	cmp	r3, #0
   2825c:	08bd87f0 	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
			_putChFn(ch);
   28260:	e1a00001 	mov	r0, r1
	else
	{
		// Just send it
		sendChar(ch);
	}
}
   28264:	e8bd47f0 	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
			_putChFn(ch);
   28268:	e12fff13 	bx	r3
   2826c:	00074c58 	.word	0x00074c58

00028270 <MiniHDLC::sendEscaped(unsigned char)>:

void MiniHDLC::sendEscaped(uint8_t ch)
{
   28270:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
	if ((ch == CONTROL_ESCAPE_OCTET) || (ch == FRAME_BOUNDARY_OCTET))
   28274:	e241307d 	sub	r3, r1, #125	; 0x7d
   28278:	e59f7170 	ldr	r7, [pc, #368]	; 283f0 <MiniHDLC::sendEscaped(unsigned char)+0x180>
   2827c:	e3530001 	cmp	r3, #1
{
   28280:	e1a04001 	mov	r4, r1
   28284:	e1a09000 	mov	r9, r0
   28288:	e5d02000 	ldrb	r2, [r0]
   2828c:	e5973000 	ldr	r3, [r7]
	if ((ch == CONTROL_ESCAPE_OCTET) || (ch == FRAME_BOUNDARY_OCTET))
   28290:	9a00001d 	bls	2830c <MiniHDLC::sendEscaped(unsigned char)+0x9c>
	if (_bitwiseHDLC)
   28294:	e3520000 	cmp	r2, #0
   28298:	0a000039 	beq	28384 <MiniHDLC::sendEscaped(unsigned char)+0x114>
   2829c:	e3a05008 	mov	r5, #8
					_bitwiseSendOnesCount = 0;
   282a0:	e3a08000 	mov	r8, #0
   282a4:	ea000008 	b	282cc <MiniHDLC::sendEscaped(unsigned char)+0x5c>
				_bitwiseSendOnesCount++;
   282a8:	e5993014 	ldr	r3, [r9, #20]
   282ac:	e2833001 	add	r3, r3, #1
				if (_bitwiseSendOnesCount == 5)
   282b0:	e3530005 	cmp	r3, #5
				_bitwiseSendOnesCount++;
   282b4:	e5893014 	str	r3, [r9, #20]
				if (_bitwiseSendOnesCount == 5)
   282b8:	0a00000c 	beq	282f0 <MiniHDLC::sendEscaped(unsigned char)+0x80>
		for (int i = 0; i < 8; i++)
   282bc:	e2555001 	subs	r5, r5, #1
			bitData = bitData >> 1;
   282c0:	e1a040a4 	lsr	r4, r4, #1
		for (int i = 0; i < 8; i++)
   282c4:	08bd87f0 	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   282c8:	e5973000 	ldr	r3, [r7]
			if (_putChFn)
   282cc:	e3530000 	cmp	r3, #0
   282d0:	e2046001 	and	r6, r4, #1
   282d4:	0a000001 	beq	282e0 <MiniHDLC::sendEscaped(unsigned char)+0x70>
				_putChFn(bitData & 0x01);
   282d8:	e1a00006 	mov	r0, r6
   282dc:	e12fff33 	blx	r3
			if (bitData & 0x01)
   282e0:	e3560000 	cmp	r6, #0
   282e4:	1affffef 	bne	282a8 <MiniHDLC::sendEscaped(unsigned char)+0x38>
					_bitwiseSendOnesCount = 0;
   282e8:	e5898014 	str	r8, [r9, #20]
   282ec:	eafffff2 	b	282bc <MiniHDLC::sendEscaped(unsigned char)+0x4c>
					if (_putChFn)
   282f0:	e5973000 	ldr	r3, [r7]
   282f4:	e3530000 	cmp	r3, #0
   282f8:	0afffffa 	beq	282e8 <MiniHDLC::sendEscaped(unsigned char)+0x78>
						_putChFn(0);
   282fc:	e3a00000 	mov	r0, #0
   28300:	e12fff33 	blx	r3
					_bitwiseSendOnesCount = 0;
   28304:	e5898014 	str	r8, [r9, #20]
   28308:	eaffffeb 	b	282bc <MiniHDLC::sendEscaped(unsigned char)+0x4c>
	if (_bitwiseHDLC)
   2830c:	e3520000 	cmp	r2, #0
   28310:	0a00002f 	beq	283d4 <MiniHDLC::sendEscaped(unsigned char)+0x164>
   28314:	e3a06008 	mov	r6, #8
		uint8_t bitData = ch;
   28318:	e3a0507d 	mov	r5, #125	; 0x7d
				_bitwiseSendOnesCount = 0;
   2831c:	e3a0a000 	mov	sl, #0
   28320:	ea000007 	b	28344 <MiniHDLC::sendEscaped(unsigned char)+0xd4>
				_bitwiseSendOnesCount++;
   28324:	e5992014 	ldr	r2, [r9, #20]
   28328:	e2822001 	add	r2, r2, #1
				if (_bitwiseSendOnesCount == 5)
   2832c:	e3520005 	cmp	r2, #5
				_bitwiseSendOnesCount++;
   28330:	e5892014 	str	r2, [r9, #20]
				if (_bitwiseSendOnesCount == 5)
   28334:	0a000017 	beq	28398 <MiniHDLC::sendEscaped(unsigned char)+0x128>
		for (int i = 0; i < 8; i++)
   28338:	e2566001 	subs	r6, r6, #1
			bitData = bitData >> 1;
   2833c:	e1a050a5 	lsr	r5, r5, #1
		for (int i = 0; i < 8; i++)
   28340:	0a00000b 	beq	28374 <MiniHDLC::sendEscaped(unsigned char)+0x104>
			if (_putChFn)
   28344:	e3530000 	cmp	r3, #0
   28348:	e2058001 	and	r8, r5, #1
   2834c:	0a000018 	beq	283b4 <MiniHDLC::sendEscaped(unsigned char)+0x144>
				_putChFn(bitData & 0x01);
   28350:	e1a00008 	mov	r0, r8
   28354:	e12fff33 	blx	r3
			if (bitData & 0x01)
   28358:	e3580000 	cmp	r8, #0
   2835c:	e5973000 	ldr	r3, [r7]
   28360:	1affffef 	bne	28324 <MiniHDLC::sendEscaped(unsigned char)+0xb4>
				_bitwiseSendOnesCount = 0;
   28364:	e589a014 	str	sl, [r9, #20]
		for (int i = 0; i < 8; i++)
   28368:	e2566001 	subs	r6, r6, #1
			bitData = bitData >> 1;
   2836c:	e1a050a5 	lsr	r5, r5, #1
		for (int i = 0; i < 8; i++)
   28370:	1afffff3 	bne	28344 <MiniHDLC::sendEscaped(unsigned char)+0xd4>
   28374:	e5d92000 	ldrb	r2, [r9]
	if (_bitwiseHDLC)
   28378:	e3520000 	cmp	r2, #0
	{
		sendCharWithStuffing(CONTROL_ESCAPE_OCTET);
		ch ^= INVERT_OCTET;
   2837c:	e2244020 	eor	r4, r4, #32
	if (_bitwiseHDLC)
   28380:	1affffc5 	bne	2829c <MiniHDLC::sendEscaped(unsigned char)+0x2c>
		if (_putChFn)
   28384:	e3530000 	cmp	r3, #0
   28388:	08bd87f0 	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
			_putChFn(ch);
   2838c:	e1a00004 	mov	r0, r4
	}
	sendCharWithStuffing(ch);
}
   28390:	e8bd47f0 	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
			_putChFn(ch);
   28394:	e12fff13 	bx	r3
					if (_putChFn)
   28398:	e3530000 	cmp	r3, #0
   2839c:	0afffff0 	beq	28364 <MiniHDLC::sendEscaped(unsigned char)+0xf4>
						_putChFn(0);
   283a0:	e3a00000 	mov	r0, #0
   283a4:	e12fff33 	blx	r3
   283a8:	e5973000 	ldr	r3, [r7]
				_bitwiseSendOnesCount = 0;
   283ac:	e589a014 	str	sl, [r9, #20]
   283b0:	eaffffec 	b	28368 <MiniHDLC::sendEscaped(unsigned char)+0xf8>
			if (bitData & 0x01)
   283b4:	e3580000 	cmp	r8, #0
   283b8:	0affffe9 	beq	28364 <MiniHDLC::sendEscaped(unsigned char)+0xf4>
				_bitwiseSendOnesCount++;
   283bc:	e5992014 	ldr	r2, [r9, #20]
   283c0:	e2822001 	add	r2, r2, #1
				if (_bitwiseSendOnesCount == 5)
   283c4:	e3520005 	cmp	r2, #5
				_bitwiseSendOnesCount++;
   283c8:	e5892014 	str	r2, [r9, #20]
				if (_bitwiseSendOnesCount == 5)
   283cc:	1affffd9 	bne	28338 <MiniHDLC::sendEscaped(unsigned char)+0xc8>
   283d0:	eaffffe3 	b	28364 <MiniHDLC::sendEscaped(unsigned char)+0xf4>
		if (_putChFn)
   283d4:	e3530000 	cmp	r3, #0
   283d8:	08bd87f0 	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
			_putChFn(ch);
   283dc:	e3a0007d 	mov	r0, #125	; 0x7d
   283e0:	e12fff33 	blx	r3
   283e4:	e5d92000 	ldrb	r2, [r9]
   283e8:	e5973000 	ldr	r3, [r7]
   283ec:	eaffffe1 	b	28378 <MiniHDLC::sendEscaped(unsigned char)+0x108>
   283f0:	00074c58 	.word	0x00074c58

000283f4 <MiniHDLC::sendFrame(unsigned char const*, int)>:
{
   283f4:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (_bitwiseHDLC)
   283f8:	e5d03000 	ldrb	r3, [r0]
   283fc:	e59f62c4 	ldr	r6, [pc, #708]	; 286c8 <MiniHDLC::sendFrame(unsigned char const*, int)+0x2d4>
   28400:	e3530000 	cmp	r3, #0
{
   28404:	e24dd014 	sub	sp, sp, #20
   28408:	e1a05000 	mov	r5, r0
   2840c:	e1a09001 	mov	r9, r1
   28410:	e1a04002 	mov	r4, r2
   28414:	e5963000 	ldr	r3, [r6]
	if (_bitwiseHDLC)
   28418:	0a00008b 	beq	2864c <MiniHDLC::sendFrame(unsigned char const*, int)+0x258>
   2841c:	e3a08008 	mov	r8, #8
		uint8_t bitData = ch;
   28420:	e3a0707e 	mov	r7, #126	; 0x7e
   28424:	ea000000 	b	2842c <MiniHDLC::sendFrame(unsigned char const*, int)+0x38>
   28428:	e5963000 	ldr	r3, [r6]
			if (_putChFn)
   2842c:	e3530000 	cmp	r3, #0
				_putChFn(bitData & 0x01);
   28430:	e2070001 	and	r0, r7, #1
			if (_putChFn)
   28434:	0a000000 	beq	2843c <MiniHDLC::sendFrame(unsigned char const*, int)+0x48>
				_putChFn(bitData & 0x01);
   28438:	e12fff33 	blx	r3
		for (int i = 0; i < 8; i++)
   2843c:	e2588001 	subs	r8, r8, #1
			bitData = bitData >> 1;
   28440:	e1a070a7 	lsr	r7, r7, #1
		for (int i = 0; i < 8; i++)
   28444:	1afffff7 	bne	28428 <MiniHDLC::sendFrame(unsigned char const*, int)+0x34>
    while (bytesLeft)
   28448:	e3540000 	cmp	r4, #0
   2844c:	0a000084 	beq	28664 <MiniHDLC::sendFrame(unsigned char const*, int)+0x270>
					_bitwiseSendOnesCount = 0;
   28450:	e3a08000 	mov	r8, #0
   28454:	e0893004 	add	r3, r9, r4
    while (bytesLeft)
   28458:	e59f726c 	ldr	r7, [pc, #620]	; 286cc <MiniHDLC::sendFrame(unsigned char const*, int)+0x2d8>
   2845c:	e58d3008 	str	r3, [sp, #8]
        uint8_t data = *pFrame++;
   28460:	e4d94001 	ldrb	r4, [r9], #1
	return (fcs << 8) ^ _CRCTable[((fcs >> 8) ^ value) & 0xff];
   28464:	e59f1264 	ldr	r1, [pc, #612]	; 286d0 <MiniHDLC::sendFrame(unsigned char const*, int)+0x2dc>
   28468:	e0243427 	eor	r3, r4, r7, lsr #8
   2846c:	e1a03083 	lsl	r3, r3, #1
   28470:	e191b0b3 	ldrh	fp, [r1, r3]
	if ((ch == CONTROL_ESCAPE_OCTET) || (ch == FRAME_BOUNDARY_OCTET))
   28474:	e244307d 	sub	r3, r4, #125	; 0x7d
	return (fcs << 8) ^ _CRCTable[((fcs >> 8) ^ value) & 0xff];
   28478:	e02bb407 	eor	fp, fp, r7, lsl #8
   2847c:	e6bf107b 	sxth	r1, fp
	if ((ch == CONTROL_ESCAPE_OCTET) || (ch == FRAME_BOUNDARY_OCTET))
   28480:	e3530001 	cmp	r3, #1
   28484:	e5d52000 	ldrb	r2, [r5]
	return (fcs << 8) ^ _CRCTable[((fcs >> 8) ^ value) & 0xff];
   28488:	e58d1004 	str	r1, [sp, #4]
   2848c:	e6ff7071 	uxth	r7, r1
   28490:	e5963000 	ldr	r3, [r6]
	if ((ch == CONTROL_ESCAPE_OCTET) || (ch == FRAME_BOUNDARY_OCTET))
   28494:	9a00003c 	bls	2858c <MiniHDLC::sendFrame(unsigned char const*, int)+0x198>
	if (_bitwiseHDLC)
   28498:	e3520000 	cmp	r2, #0
   2849c:	0a00005b 	beq	28610 <MiniHDLC::sendFrame(unsigned char const*, int)+0x21c>
   284a0:	e3a0a008 	mov	sl, #8
   284a4:	ea000008 	b	284cc <MiniHDLC::sendFrame(unsigned char const*, int)+0xd8>
				_bitwiseSendOnesCount++;
   284a8:	e5953014 	ldr	r3, [r5, #20]
   284ac:	e2833001 	add	r3, r3, #1
				if (_bitwiseSendOnesCount == 5)
   284b0:	e3530005 	cmp	r3, #5
				_bitwiseSendOnesCount++;
   284b4:	e5853014 	str	r3, [r5, #20]
				if (_bitwiseSendOnesCount == 5)
   284b8:	0a00002c 	beq	28570 <MiniHDLC::sendFrame(unsigned char const*, int)+0x17c>
		for (int i = 0; i < 8; i++)
   284bc:	e25aa001 	subs	sl, sl, #1
			bitData = bitData >> 1;
   284c0:	e1a040a4 	lsr	r4, r4, #1
		for (int i = 0; i < 8; i++)
   284c4:	0a00000b 	beq	284f8 <MiniHDLC::sendFrame(unsigned char const*, int)+0x104>
   284c8:	e5963000 	ldr	r3, [r6]
			if (_putChFn)
   284cc:	e3530000 	cmp	r3, #0
   284d0:	e204b001 	and	fp, r4, #1
   284d4:	0a000001 	beq	284e0 <MiniHDLC::sendFrame(unsigned char const*, int)+0xec>
				_putChFn(bitData & 0x01);
   284d8:	e1a0000b 	mov	r0, fp
   284dc:	e12fff33 	blx	r3
			if (bitData & 0x01)
   284e0:	e35b0000 	cmp	fp, #0
   284e4:	1affffef 	bne	284a8 <MiniHDLC::sendFrame(unsigned char const*, int)+0xb4>
					_bitwiseSendOnesCount = 0;
   284e8:	e5858014 	str	r8, [r5, #20]
		for (int i = 0; i < 8; i++)
   284ec:	e25aa001 	subs	sl, sl, #1
			bitData = bitData >> 1;
   284f0:	e1a040a4 	lsr	r4, r4, #1
		for (int i = 0; i < 8; i++)
   284f4:	1afffff3 	bne	284c8 <MiniHDLC::sendFrame(unsigned char const*, int)+0xd4>
    while (bytesLeft)
   284f8:	e59d3008 	ldr	r3, [sp, #8]
   284fc:	e1590003 	cmp	r9, r3
   28500:	1affffd6 	bne	28460 <MiniHDLC::sendFrame(unsigned char const*, int)+0x6c>
   28504:	e5dd1004 	ldrb	r1, [sp, #4]
   28508:	e1a07427 	lsr	r7, r7, #8
    if (_bigEndianCRC)
   2850c:	e5d53001 	ldrb	r3, [r5, #1]
    sendEscaped(fcs1);
   28510:	e1a00005 	mov	r0, r5
    uint8_t fcs2 = (fcs >> 8) & 0xff;
   28514:	e3530000 	cmp	r3, #0
   28518:	11a04001 	movne	r4, r1
   2851c:	01a04007 	moveq	r4, r7
    sendEscaped(fcs1);
   28520:	11a01007 	movne	r1, r7
   28524:	ebffff51 	bl	28270 <MiniHDLC::sendEscaped(unsigned char)>
    sendEscaped(fcs2);
   28528:	e1a01004 	mov	r1, r4
   2852c:	e1a00005 	mov	r0, r5
   28530:	ebffff4e 	bl	28270 <MiniHDLC::sendEscaped(unsigned char)>
	if (_bitwiseHDLC)
   28534:	e5d53000 	ldrb	r3, [r5]
   28538:	e3530000 	cmp	r3, #0
   2853c:	0a00004b 	beq	28670 <MiniHDLC::sendFrame(unsigned char const*, int)+0x27c>
   28540:	e3a05008 	mov	r5, #8
		uint8_t bitData = ch;
   28544:	e3a0407e 	mov	r4, #126	; 0x7e
			if (_putChFn)
   28548:	e5963000 	ldr	r3, [r6]
				_putChFn(bitData & 0x01);
   2854c:	e2040001 	and	r0, r4, #1
			if (_putChFn)
   28550:	e3530000 	cmp	r3, #0
   28554:	0a000000 	beq	2855c <MiniHDLC::sendFrame(unsigned char const*, int)+0x168>
				_putChFn(bitData & 0x01);
   28558:	e12fff33 	blx	r3
		for (int i = 0; i < 8; i++)
   2855c:	e2555001 	subs	r5, r5, #1
			bitData = bitData >> 1;
   28560:	e1a040a4 	lsr	r4, r4, #1
		for (int i = 0; i < 8; i++)
   28564:	1afffff7 	bne	28548 <MiniHDLC::sendFrame(unsigned char const*, int)+0x154>
}
   28568:	e28dd014 	add	sp, sp, #20
   2856c:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
					if (_putChFn)
   28570:	e5963000 	ldr	r3, [r6]
   28574:	e3530000 	cmp	r3, #0
   28578:	0affffda 	beq	284e8 <MiniHDLC::sendFrame(unsigned char const*, int)+0xf4>
						_putChFn(0);
   2857c:	e3a00000 	mov	r0, #0
   28580:	e12fff33 	blx	r3
					_bitwiseSendOnesCount = 0;
   28584:	e5858014 	str	r8, [r5, #20]
   28588:	eaffffd7 	b	284ec <MiniHDLC::sendFrame(unsigned char const*, int)+0xf8>
	if (_bitwiseHDLC)
   2858c:	e3520000 	cmp	r2, #0
   28590:	0a000045 	beq	286ac <MiniHDLC::sendFrame(unsigned char const*, int)+0x2b8>
		uint8_t bitData = ch;
   28594:	e58d400c 	str	r4, [sp, #12]
	if (_bitwiseHDLC)
   28598:	e3a0a008 	mov	sl, #8
		uint8_t bitData = ch;
   2859c:	e3a0b07d 	mov	fp, #125	; 0x7d
   285a0:	e1a04005 	mov	r4, r5
   285a4:	ea000007 	b	285c8 <MiniHDLC::sendFrame(unsigned char const*, int)+0x1d4>
				_bitwiseSendOnesCount++;
   285a8:	e5942014 	ldr	r2, [r4, #20]
   285ac:	e2822001 	add	r2, r2, #1
				if (_bitwiseSendOnesCount == 5)
   285b0:	e3520005 	cmp	r2, #5
				_bitwiseSendOnesCount++;
   285b4:	e5842014 	str	r2, [r4, #20]
				if (_bitwiseSendOnesCount == 5)
   285b8:	0a00001c 	beq	28630 <MiniHDLC::sendFrame(unsigned char const*, int)+0x23c>
		for (int i = 0; i < 8; i++)
   285bc:	e25aa001 	subs	sl, sl, #1
			bitData = bitData >> 1;
   285c0:	e1a0b0ab 	lsr	fp, fp, #1
		for (int i = 0; i < 8; i++)
   285c4:	0a00000b 	beq	285f8 <MiniHDLC::sendFrame(unsigned char const*, int)+0x204>
			if (_putChFn)
   285c8:	e3530000 	cmp	r3, #0
   285cc:	e20b5001 	and	r5, fp, #1
   285d0:	0a00002d 	beq	2868c <MiniHDLC::sendFrame(unsigned char const*, int)+0x298>
				_putChFn(bitData & 0x01);
   285d4:	e1a00005 	mov	r0, r5
   285d8:	e12fff33 	blx	r3
			if (bitData & 0x01)
   285dc:	e3550000 	cmp	r5, #0
   285e0:	e5963000 	ldr	r3, [r6]
   285e4:	1affffef 	bne	285a8 <MiniHDLC::sendFrame(unsigned char const*, int)+0x1b4>
				_bitwiseSendOnesCount = 0;
   285e8:	e5848014 	str	r8, [r4, #20]
		for (int i = 0; i < 8; i++)
   285ec:	e25aa001 	subs	sl, sl, #1
			bitData = bitData >> 1;
   285f0:	e1a0b0ab 	lsr	fp, fp, #1
		for (int i = 0; i < 8; i++)
   285f4:	1afffff3 	bne	285c8 <MiniHDLC::sendFrame(unsigned char const*, int)+0x1d4>
   285f8:	e1a05004 	mov	r5, r4
   285fc:	e59d400c 	ldr	r4, [sp, #12]
   28600:	e5d52000 	ldrb	r2, [r5]
	if (_bitwiseHDLC)
   28604:	e3520000 	cmp	r2, #0
		ch ^= INVERT_OCTET;
   28608:	e2244020 	eor	r4, r4, #32
	if (_bitwiseHDLC)
   2860c:	1affffa3 	bne	284a0 <MiniHDLC::sendFrame(unsigned char const*, int)+0xac>
		if (_putChFn)
   28610:	e3530000 	cmp	r3, #0
   28614:	0affffb7 	beq	284f8 <MiniHDLC::sendFrame(unsigned char const*, int)+0x104>
			_putChFn(ch);
   28618:	e1a00004 	mov	r0, r4
   2861c:	e12fff33 	blx	r3
    while (bytesLeft)
   28620:	e59d3008 	ldr	r3, [sp, #8]
   28624:	e1590003 	cmp	r9, r3
   28628:	1affff8c 	bne	28460 <MiniHDLC::sendFrame(unsigned char const*, int)+0x6c>
   2862c:	eaffffb4 	b	28504 <MiniHDLC::sendFrame(unsigned char const*, int)+0x110>
					if (_putChFn)
   28630:	e3530000 	cmp	r3, #0
   28634:	0affffeb 	beq	285e8 <MiniHDLC::sendFrame(unsigned char const*, int)+0x1f4>
						_putChFn(0);
   28638:	e3a00000 	mov	r0, #0
   2863c:	e12fff33 	blx	r3
   28640:	e5963000 	ldr	r3, [r6]
				_bitwiseSendOnesCount = 0;
   28644:	e5848014 	str	r8, [r4, #20]
   28648:	eaffffe7 	b	285ec <MiniHDLC::sendFrame(unsigned char const*, int)+0x1f8>
		if (_putChFn)
   2864c:	e3530000 	cmp	r3, #0
   28650:	0affff7c 	beq	28448 <MiniHDLC::sendFrame(unsigned char const*, int)+0x54>
			_putChFn(ch);
   28654:	e3a0007e 	mov	r0, #126	; 0x7e
   28658:	e12fff33 	blx	r3
    while (bytesLeft)
   2865c:	e3540000 	cmp	r4, #0
   28660:	1affff7a 	bne	28450 <MiniHDLC::sendFrame(unsigned char const*, int)+0x5c>
   28664:	e3a070ff 	mov	r7, #255	; 0xff
   28668:	e1a01007 	mov	r1, r7
   2866c:	eaffffa6 	b	2850c <MiniHDLC::sendFrame(unsigned char const*, int)+0x118>
		if (_putChFn)
   28670:	e5963000 	ldr	r3, [r6]
   28674:	e3530000 	cmp	r3, #0
   28678:	0affffba 	beq	28568 <MiniHDLC::sendFrame(unsigned char const*, int)+0x174>
			_putChFn(ch);
   2867c:	e3a0007e 	mov	r0, #126	; 0x7e
}
   28680:	e28dd014 	add	sp, sp, #20
   28684:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
			_putChFn(ch);
   28688:	e12fff13 	bx	r3
			if (bitData & 0x01)
   2868c:	e3550000 	cmp	r5, #0
   28690:	0affffd4 	beq	285e8 <MiniHDLC::sendFrame(unsigned char const*, int)+0x1f4>
				_bitwiseSendOnesCount++;
   28694:	e5942014 	ldr	r2, [r4, #20]
   28698:	e2822001 	add	r2, r2, #1
				if (_bitwiseSendOnesCount == 5)
   2869c:	e3520005 	cmp	r2, #5
				_bitwiseSendOnesCount++;
   286a0:	e5842014 	str	r2, [r4, #20]
				if (_bitwiseSendOnesCount == 5)
   286a4:	1affffc4 	bne	285bc <MiniHDLC::sendFrame(unsigned char const*, int)+0x1c8>
   286a8:	eaffffce 	b	285e8 <MiniHDLC::sendFrame(unsigned char const*, int)+0x1f4>
		if (_putChFn)
   286ac:	e3530000 	cmp	r3, #0
   286b0:	0affff90 	beq	284f8 <MiniHDLC::sendFrame(unsigned char const*, int)+0x104>
			_putChFn(ch);
   286b4:	e3a0007d 	mov	r0, #125	; 0x7d
   286b8:	e12fff33 	blx	r3
   286bc:	e5d52000 	ldrb	r2, [r5]
   286c0:	e5963000 	ldr	r3, [r6]
   286c4:	eaffffce 	b	28604 <MiniHDLC::sendFrame(unsigned char const*, int)+0x210>
   286c8:	00074c58 	.word	0x00074c58
   286cc:	0000ffff 	.word	0x0000ffff
   286d0:	000542e8 	.word	0x000542e8

000286d4 <make_byte(int, char*, int)>:
/*------------------------------------------------------------------------------

------------------------------------------------------------------------------*/
void make_byte( int sw, char *buf, int num )
{
	switch( sw ) {
   286d4:	e3500001 	cmp	r0, #1
   286d8:	0a00000b 	beq	2870c <make_byte(int, char*, int)+0x38>
   286dc:	e3500002 	cmp	r0, #2
   286e0:	0a000005 	beq	286fc <make_byte(int, char*, int)+0x28>
   286e4:	e3500000 	cmp	r0, #0
   286e8:	112fff1e 	bxne	lr
	case INTEL:
		ee_sprintf( buf, "0%02XH", num&0xff );
   286ec:	e1a00001 	mov	r0, r1
   286f0:	e6ef2072 	uxtb	r2, r2
   286f4:	e59f1020 	ldr	r1, [pc, #32]	; 2871c <make_byte(int, char*, int)+0x48>
   286f8:	eaffe9ab 	b	22dac <ee_sprintf>
		break;
	case MOTOROLA:
		ee_sprintf( buf, "$%02X", num&0xff );
		break;
	case C_LANG:
		ee_sprintf( buf, "0x%02X", num&0xff );
   286fc:	e1a00001 	mov	r0, r1
   28700:	e6ef2072 	uxtb	r2, r2
   28704:	e59f1014 	ldr	r1, [pc, #20]	; 28720 <make_byte(int, char*, int)+0x4c>
   28708:	eaffe9a7 	b	22dac <ee_sprintf>
		ee_sprintf( buf, "$%02X", num&0xff );
   2870c:	e1a00001 	mov	r0, r1
   28710:	e6ef2072 	uxtb	r2, r2
   28714:	e59f1008 	ldr	r1, [pc, #8]	; 28724 <make_byte(int, char*, int)+0x50>
   28718:	eaffe9a3 	b	22dac <ee_sprintf>
   2871c:	00054510 	.word	0x00054510
   28720:	00054520 	.word	0x00054520
   28724:	00054518 	.word	0x00054518

00028728 <make_ofs_byte(int, char*, int)>:
/*------------------------------------------------------------------------------

------------------------------------------------------------------------------*/
void make_ofs_byte( int sw, char *buf, int num )
{
	if( num >= 0x80 ) {
   28728:	e352007f 	cmp	r2, #127	; 0x7f
		*buf = '-';
   2872c:	c3a0302d 	movgt	r3, #45	; 0x2d
		num = (num^0xff)+1;
	} else {
		*buf = '+';
   28730:	d3a0302b 	movle	r3, #43	; 0x2b
		num = (num^0xff)+1;
   28734:	c22220ff 	eorgt	r2, r2, #255	; 0xff
   28738:	c2822001 	addgt	r2, r2, #1
	}
	buf++;
	switch( sw ) {
   2873c:	e3500001 	cmp	r0, #1
   28740:	e4c13001 	strb	r3, [r1], #1
   28744:	0a00000b 	beq	28778 <make_ofs_byte(int, char*, int)+0x50>
   28748:	e3500002 	cmp	r0, #2
   2874c:	0a000005 	beq	28768 <make_ofs_byte(int, char*, int)+0x40>
   28750:	e3500000 	cmp	r0, #0
   28754:	112fff1e 	bxne	lr
	case INTEL:
		ee_sprintf( buf, "0%02XH", num&0xff );
   28758:	e1a00001 	mov	r0, r1
   2875c:	e6ef2072 	uxtb	r2, r2
   28760:	e59f1020 	ldr	r1, [pc, #32]	; 28788 <make_ofs_byte(int, char*, int)+0x60>
   28764:	eaffe990 	b	22dac <ee_sprintf>
		break;
	case MOTOROLA:
		ee_sprintf( buf, "$%02X", num&0xff );
		break;
	case C_LANG:
		ee_sprintf( buf, "0x%02X", num&0xff );
   28768:	e1a00001 	mov	r0, r1
   2876c:	e6ef2072 	uxtb	r2, r2
   28770:	e59f1014 	ldr	r1, [pc, #20]	; 2878c <make_ofs_byte(int, char*, int)+0x64>
   28774:	eaffe98c 	b	22dac <ee_sprintf>
		ee_sprintf( buf, "$%02X", num&0xff );
   28778:	e1a00001 	mov	r0, r1
   2877c:	e6ef2072 	uxtb	r2, r2
   28780:	e59f1008 	ldr	r1, [pc, #8]	; 28790 <make_ofs_byte(int, char*, int)+0x68>
   28784:	eaffe988 	b	22dac <ee_sprintf>
   28788:	00054510 	.word	0x00054510
   2878c:	00054520 	.word	0x00054520
   28790:	00054518 	.word	0x00054518

00028794 <make_word(int, char*, int)>:
/*------------------------------------------------------------------------------

------------------------------------------------------------------------------*/
void make_word( int sw, char *buf, int num )
{
	switch( sw ) {
   28794:	e3500001 	cmp	r0, #1
   28798:	0a00000b 	beq	287cc <make_word(int, char*, int)+0x38>
   2879c:	e3500002 	cmp	r0, #2
   287a0:	0a000005 	beq	287bc <make_word(int, char*, int)+0x28>
   287a4:	e3500000 	cmp	r0, #0
   287a8:	112fff1e 	bxne	lr
	case INTEL:
		ee_sprintf( buf, "0%04XH", num&0xffff );
   287ac:	e1a00001 	mov	r0, r1
   287b0:	e6ff2072 	uxth	r2, r2
   287b4:	e59f1020 	ldr	r1, [pc, #32]	; 287dc <make_word(int, char*, int)+0x48>
   287b8:	eaffe97b 	b	22dac <ee_sprintf>
		break;
	case MOTOROLA:
	ee_sprintf( buf, "$%04X", num&0xffff );
		break;
	case C_LANG:
		ee_sprintf( buf, "0x%04X", num&0xffff );
   287bc:	e1a00001 	mov	r0, r1
   287c0:	e6ff2072 	uxth	r2, r2
   287c4:	e59f1014 	ldr	r1, [pc, #20]	; 287e0 <make_word(int, char*, int)+0x4c>
   287c8:	eaffe977 	b	22dac <ee_sprintf>
	ee_sprintf( buf, "$%04X", num&0xffff );
   287cc:	e1a00001 	mov	r0, r1
   287d0:	e6ff2072 	uxth	r2, r2
   287d4:	e59f1008 	ldr	r1, [pc, #8]	; 287e4 <make_word(int, char*, int)+0x50>
   287d8:	eaffe973 	b	22dac <ee_sprintf>
   287dc:	00054528 	.word	0x00054528
   287e0:	00054538 	.word	0x00054538
   287e4:	00054530 	.word	0x00054530

000287e8 <getOPdata(unsigned char*, unsigned long)>:

/*------------------------------------------------------------------------------

------------------------------------------------------------------------------*/
disZ80data *getOPdata( uchar *buf, ulong addr )
{
   287e8:	e92d4030 	push	{r4, r5, lr}
	int	ofstbl[] = { 0, 1, 3 };
   287ec:	e59f3090 	ldr	r3, [pc, #144]	; 28884 <getOPdata(unsigned char*, unsigned long)+0x9c>
{
   287f0:	e24dd014 	sub	sp, sp, #20
	int	n = 0, ofs = 0;

	while( disz80[n][buf[addr+ofstbl[ofs]]].len < 0 ) {
   287f4:	e0804001 	add	r4, r0, r1
	int	ofstbl[] = { 0, 1, 3 };
   287f8:	e8930007 	ldm	r3, {r0, r1, r2}
   287fc:	e28d3010 	add	r3, sp, #16
   28800:	e9030007 	stmdb	r3, {r0, r1, r2}
	while( disz80[n][buf[addr+ofstbl[ofs]]].len < 0 ) {
   28804:	e59d3004 	ldr	r3, [sp, #4]
   28808:	e59f0078 	ldr	r0, [pc, #120]	; 28888 <getOPdata(unsigned char*, unsigned long)+0xa0>
   2880c:	e7d42003 	ldrb	r2, [r4, r3]
   28810:	e1a0c182 	lsl	ip, r2, #3
   28814:	e04c3002 	sub	r3, ip, r2
   28818:	e7903103 	ldr	r3, [r0, r3, lsl #2]
   2881c:	e3530000 	cmp	r3, #0
   28820:	a3a03000 	movge	r3, #0
   28824:	aa000011 	bge	28870 <getOPdata(unsigned char*, unsigned long)+0x88>
   28828:	e59d2008 	ldr	r2, [sp, #8]
		n = -disz80[n][buf[addr+ofstbl[ofs]]].len;
   2882c:	e263e000 	rsb	lr, r3, #0
	while( disz80[n][buf[addr+ofstbl[ofs]]].len < 0 ) {
   28830:	e7d42002 	ldrb	r2, [r4, r2]
   28834:	e1a0318e 	lsl	r3, lr, #3
   28838:	e043100e 	sub	r1, r3, lr
   2883c:	e1a0c182 	lsl	ip, r2, #3
   28840:	e04c5002 	sub	r5, ip, r2
   28844:	e1a01501 	lsl	r1, r1, #10
   28848:	e0811105 	add	r1, r1, r5, lsl #2
   2884c:	e7901001 	ldr	r1, [r0, r1]
   28850:	e3510000 	cmp	r1, #0
   28854:	b59d300c 	ldrlt	r3, [sp, #12]
		n = -disz80[n][buf[addr+ofstbl[ofs]]].len;
   28858:	b261e000 	rsblt	lr, r1, #0
	while( disz80[n][buf[addr+ofstbl[ofs]]].len < 0 ) {
   2885c:	b7d42003 	ldrblt	r2, [r4, r3]
   28860:	b1a0318e 	lsllt	r3, lr, #3
   28864:	e043300e 	sub	r3, r3, lr
   28868:	b1a0c182 	lsllt	ip, r2, #3
   2886c:	e1a03503 	lsl	r3, r3, #10
		ofs++;
	}

	return &(disz80[n][buf[addr+ofstbl[ofs]]]);
   28870:	e04c2002 	sub	r2, ip, r2
   28874:	e0833102 	add	r3, r3, r2, lsl #2
}
   28878:	e0800003 	add	r0, r0, r3
   2887c:	e28dd014 	add	sp, sp, #20
   28880:	e8bd8030 	pop	{r4, r5, pc}
   28884:	000544e8 	.word	0x000544e8
   28888:	00062cdc 	.word	0x00062cdc

0002888c <disasmZ80(unsigned char*, unsigned long, unsigned long, char*, int, int, int)>:

/*------------------------------------------------------------------------------

------------------------------------------------------------------------------*/
int disasmZ80( uchar *buf, ulong base, ulong addr, char *stream, int sw, int nullcheck, int zesaurxFormat )
{
   2888c:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   28890:	e1a04001 	mov	r4, r1
   28894:	e1a0b002 	mov	fp, r2
   28898:	e1a06003 	mov	r6, r3
   2889c:	e24ddf4f 	sub	sp, sp, #316	; 0x13c
	int		*op_type;
	char	temp[256];
	int		ofs;
	int		line;
	int		rel;
	disZ80data NullData = { 0, 0, NMT_NUL, 0, OT_NUL, OT_NONE, ACT_NL };
   288a0:	e59fe9b8 	ldr	lr, [pc, #2488]	; 29260 <disasmZ80(unsigned char*, unsigned long, unsigned long, char*, int, int, int)+0x9d4>
   288a4:	e28dc01c 	add	ip, sp, #28
{
   288a8:	e58d1010 	str	r1, [sp, #16]
   288ac:	e58d0004 	str	r0, [sp, #4]
	disZ80data NullData = { 0, 0, NMT_NUL, 0, OT_NUL, OT_NONE, ACT_NL };
   288b0:	e8be000f 	ldm	lr!, {r0, r1, r2, r3}
   288b4:	e8ac000f 	stmia	ip!, {r0, r1, r2, r3}
   288b8:	e89e0007 	ldm	lr, {r0, r1, r2}
{
   288bc:	e59d5168 	ldr	r5, [sp, #360]	; 0x168
	disZ80data NullData = { 0, 0, NMT_NUL, 0, OT_NUL, OT_NONE, ACT_NL };
   288c0:	e88c0007 	stm	ip, {r0, r1, r2}

	// output for address
	if (zesaurxFormat)
   288c4:	e3550000 	cmp	r5, #0
   288c8:	e084200b 	add	r2, r4, fp
		st = ee_sprintf( stream, "  %4X ", base+addr );
   288cc:	159f1990 	ldrne	r1, [pc, #2448]	; 29264 <disasmZ80(unsigned char*, unsigned long, unsigned long, char*, int, int, int)+0x9d8>
	else
		st = ee_sprintf( stream, "%04X :", base+addr );
   288d0:	059f1990 	ldreq	r1, [pc, #2448]	; 29268 <disasmZ80(unsigned char*, unsigned long, unsigned long, char*, int, int, int)+0x9dc>
   288d4:	e1a00006 	mov	r0, r6
{
   288d8:	e59da164 	ldr	sl, [sp, #356]	; 0x164
		st = ee_sprintf( stream, "%04X :", base+addr );
   288dc:	ebffe932 	bl	22dac <ee_sprintf>
	int	ofstbl[] = { 0, 1, 3 };
   288e0:	e59f3984 	ldr	r3, [pc, #2436]	; 2926c <disasmZ80(unsigned char*, unsigned long, unsigned long, char*, int, int, int)+0x9e0>
   288e4:	e28d9038 	add	r9, sp, #56	; 0x38
		st = ee_sprintf( stream, "%04X :", base+addr );
   288e8:	e1a04000 	mov	r4, r0
	int	ofstbl[] = { 0, 1, 3 };
   288ec:	e8930007 	ldm	r3, {r0, r1, r2}
   288f0:	e8890007 	stm	r9, {r0, r1, r2}
	while( disz80[n][buf[addr+ofstbl[ofs]]].len < 0 ) {
   288f4:	e59d2004 	ldr	r2, [sp, #4]
   288f8:	e59f7970 	ldr	r7, [pc, #2416]	; 29270 <disasmZ80(unsigned char*, unsigned long, unsigned long, char*, int, int, int)+0x9e4>
   288fc:	e082e00b 	add	lr, r2, fp
   28900:	e7de2000 	ldrb	r2, [lr, r0]
   28904:	e1a01182 	lsl	r1, r2, #3
   28908:	e0413002 	sub	r3, r1, r2
   2890c:	e7970103 	ldr	r0, [r7, r3, lsl #2]
   28910:	e3500000 	cmp	r0, #0
   28914:	aa00010e 	bge	28d54 <disasmZ80(unsigned char*, unsigned long, unsigned long, char*, int, int, int)+0x4c8>
   28918:	e59d303c 	ldr	r3, [sp, #60]	; 0x3c
		n = -disz80[n][buf[addr+ofstbl[ofs]]].len;
   2891c:	e2600000 	rsb	r0, r0, #0
	while( disz80[n][buf[addr+ofstbl[ofs]]].len < 0 ) {
   28920:	e7de2003 	ldrb	r2, [lr, r3]
   28924:	e1a03180 	lsl	r3, r0, #3
   28928:	e043c000 	sub	ip, r3, r0
   2892c:	e1a01182 	lsl	r1, r2, #3
   28930:	e0418002 	sub	r8, r1, r2
   28934:	e1a0c50c 	lsl	ip, ip, #10
   28938:	e08cc108 	add	ip, ip, r8, lsl #2
   2893c:	e797c00c 	ldr	ip, [r7, ip]
   28940:	e35c0000 	cmp	ip, #0
   28944:	b59d3040 	ldrlt	r3, [sp, #64]	; 0x40
		n = -disz80[n][buf[addr+ofstbl[ofs]]].len;
   28948:	b26c0000 	rsblt	r0, ip, #0
	while( disz80[n][buf[addr+ofstbl[ofs]]].len < 0 ) {
   2894c:	b7de2003 	ldrblt	r2, [lr, r3]
   28950:	b1a03180 	lsllt	r3, r0, #3
   28954:	e0433000 	sub	r3, r3, r0
   28958:	b1a01182 	lsllt	r1, r2, #3
   2895c:	e1a03503 	lsl	r3, r3, #10
	return &(disz80[n][buf[addr+ofstbl[ofs]]]);
   28960:	e0412002 	sub	r2, r1, r2
   28964:	e0832102 	add	r2, r3, r2, lsl #2

	// get opdata structur
	data = getOPdata( buf, addr );
	// exeption by nullcheck and 0xff,0xff data
	if( nullcheck && (buf[addr] == 0xff) && (buf[addr+1] == 0xff) ) {
   28968:	e35a0000 	cmp	sl, #0
	return &(disz80[n][buf[addr+ofstbl[ofs]]]);
   2896c:	e0877002 	add	r7, r7, r2
	if( nullcheck && (buf[addr] == 0xff) && (buf[addr+1] == 0xff) ) {
   28970:	0a000003 	beq	28984 <disasmZ80(unsigned char*, unsigned long, unsigned long, char*, int, int, int)+0xf8>
   28974:	e59d3004 	ldr	r3, [sp, #4]
   28978:	e7d3300b 	ldrb	r3, [r3, fp]
   2897c:	e35300ff 	cmp	r3, #255	; 0xff
   28980:	0a0000fa 	beq	28d70 <disasmZ80(unsigned char*, unsigned long, unsigned long, char*, int, int, int)+0x4e4>
			ofs++;
			if( ofs == 4 ) break;
		}
	}
	// write instruction binary data
	if (zesaurxFormat)
   28984:	e3550000 	cmp	r5, #0
   28988:	0a00006e 	beq	28b48 <disasmZ80(unsigned char*, unsigned long, unsigned long, char*, int, int, int)+0x2bc>
	{
		// write nimonic
		const char* nimonicStr = nimonic[data->nimonic];
   2898c:	e59f38e0 	ldr	r3, [pc, #2272]	; 29274 <disasmZ80(unsigned char*, unsigned long, unsigned long, char*, int, int, int)+0x9e8>
   28990:	e086a004 	add	sl, r6, r4
   28994:	e1a02003 	mov	r2, r3
   28998:	e58d3008 	str	r3, [sp, #8]
   2899c:	e5973008 	ldr	r3, [r7, #8]
   289a0:	e7928103 	ldr	r8, [r2, r3, lsl #2]
   289a4:	e1a05008 	mov	r5, r8
   289a8:	ea000002 	b	289b8 <disasmZ80(unsigned char*, unsigned long, unsigned long, char*, int, int, int)+0x12c>
		for (unsigned int i = 0; i < strlen(nimonicStr); i++)
			stream[st++] = toupper(nimonicStr[i]);
   289ac:	e4d50001 	ldrb	r0, [r5], #1
   289b0:	eb009710 	bl	4e5f8 <toupper>
   289b4:	e4ca0001 	strb	r0, [sl], #1
		for (unsigned int i = 0; i < strlen(nimonicStr); i++)
   289b8:	e1a00008 	mov	r0, r8
   289bc:	eb009316 	bl	4d61c <strlen>
   289c0:	e0453008 	sub	r3, r5, r8
   289c4:	e1530000 	cmp	r3, r0
   289c8:	e2844001 	add	r4, r4, #1
   289cc:	3afffff6 	bcc	289ac <disasmZ80(unsigned char*, unsigned long, unsigned long, char*, int, int, int)+0x120>
		stream[st++] = ' ';
   289d0:	e3a03020 	mov	r3, #32
   289d4:	e5ca3000 	strb	r3, [sl]
			break;
		}
		st += ee_sprintf( &stream[st], "%s\t", nimonic[data->nimonic]);
	}
	line = 32;					// �����܂ł�tab8��32���ɂȂ��Ă���͂�
	if( data->op_num != 0 ) {
   289d8:	e597300c 	ldr	r3, [r7, #12]
   289dc:	e3530000 	cmp	r3, #0
   289e0:	0a000045 	beq	28afc <disasmZ80(unsigned char*, unsigned long, unsigned long, char*, int, int, int)+0x270>
		op_type = &(data->op0_type);
   289e4:	e287a010 	add	sl, r7, #16
		ofs = data->index;
   289e8:	e5973004 	ldr	r3, [r7, #4]
		for( i = 0; i < data->op_num; i++ ) {
   289ec:	da000042 	ble	28afc <disasmZ80(unsigned char*, unsigned long, unsigned long, char*, int, int, int)+0x270>
   289f0:	e58db00c 	str	fp, [sp, #12]
   289f4:	e3a08000 	mov	r8, #0
	line = 32;					// �����܂ł�tab8��32���ɂȂ��Ă���͂�
   289f8:	e3a05020 	mov	r5, #32
   289fc:	e1a0b003 	mov	fp, r3
			if( i != 0 ) {
				st += ee_sprintf( &stream[st], "," );
				line++;
			}
			if( *op_type < OT_IMM_BYTE ) {
   28a00:	e59a2000 	ldr	r2, [sl]
   28a04:	e0863004 	add	r3, r6, r4
   28a08:	e35200ff 	cmp	r2, #255	; 0xff
   28a0c:	e1a01003 	mov	r1, r3
   28a10:	da00006c 	ble	28bc8 <disasmZ80(unsigned char*, unsigned long, unsigned long, char*, int, int, int)+0x33c>
				st += ee_sprintf( &stream[st], optype0[*op_type] );
				line += strlen( optype0[*op_type] );
				op_type++;
			} else {
				switch( *op_type ) {
   28a14:	e3520f41 	cmp	r2, #260	; 0x104
   28a18:	0a000123 	beq	28eac <disasmZ80(unsigned char*, unsigned long, unsigned long, char*, int, int, int)+0x620>
   28a1c:	da00007e 	ble	28c1c <disasmZ80(unsigned char*, unsigned long, unsigned long, char*, int, int, int)+0x390>
   28a20:	e3520b01 	cmp	r2, #1024	; 0x400
   28a24:	0a000106 	beq	28e44 <disasmZ80(unsigned char*, unsigned long, unsigned long, char*, int, int, int)+0x5b8>
   28a28:	ca0000a1 	bgt	28cb4 <disasmZ80(unsigned char*, unsigned long, unsigned long, char*, int, int, int)+0x428>
   28a2c:	e3520c02 	cmp	r2, #512	; 0x200
   28a30:	0a000139 	beq	28f1c <disasmZ80(unsigned char*, unsigned long, unsigned long, char*, int, int, int)+0x690>
   28a34:	e59f083c 	ldr	r0, [pc, #2108]	; 29278 <disasmZ80(unsigned char*, unsigned long, unsigned long, char*, int, int, int)+0x9ec>
   28a38:	e1520000 	cmp	r2, r0
   28a3c:	1a000024 	bne	28ad4 <disasmZ80(unsigned char*, unsigned long, unsigned long, char*, int, int, int)+0x248>
					line += strlen( temp )+4;
					ofs++;
					op_type++;
					break;
				case OT_IDX_IY:
					make_ofs_byte( sw, temp, buf[addr+ofs] );
   28a40:	e59d2004 	ldr	r2, [sp, #4]
   28a44:	e59d100c 	ldr	r1, [sp, #12]
   28a48:	e082200b 	add	r2, r2, fp
   28a4c:	e7d22001 	ldrb	r2, [r2, r1]
	switch( sw ) {
   28a50:	e59d0160 	ldr	r0, [sp, #352]	; 0x160
	if( num >= 0x80 ) {
   28a54:	e352007f 	cmp	r2, #127	; 0x7f
		num = (num^0xff)+1;
   28a58:	c1e02002 	mvngt	r2, r2
		*buf = '-';
   28a5c:	c3a0102d 	movgt	r1, #45	; 0x2d
		*buf = '+';
   28a60:	d3a0102b 	movle	r1, #43	; 0x2b
		num = (num^0xff)+1;
   28a64:	c6ef2072 	uxtbgt	r2, r2
   28a68:	c2822001 	addgt	r2, r2, #1
	switch( sw ) {
   28a6c:	e3500001 	cmp	r0, #1
   28a70:	e5cd1038 	strb	r1, [sp, #56]	; 0x38
   28a74:	0a0001a6 	beq	29114 <disasmZ80(unsigned char*, unsigned long, unsigned long, char*, int, int, int)+0x888>
   28a78:	e3500002 	cmp	r0, #2
   28a7c:	0a00019d 	beq	290f8 <disasmZ80(unsigned char*, unsigned long, unsigned long, char*, int, int, int)+0x86c>
   28a80:	e3500000 	cmp	r0, #0
   28a84:	1a000005 	bne	28aa0 <disasmZ80(unsigned char*, unsigned long, unsigned long, char*, int, int, int)+0x214>
		ee_sprintf( buf, "0%02XH", num&0xff );
   28a88:	e6ef2072 	uxtb	r2, r2
   28a8c:	e59f17e8 	ldr	r1, [pc, #2024]	; 2927c <disasmZ80(unsigned char*, unsigned long, unsigned long, char*, int, int, int)+0x9f0>
   28a90:	e28d0039 	add	r0, sp, #57	; 0x39
   28a94:	e58d3014 	str	r3, [sp, #20]
   28a98:	ebffe8c3 	bl	22dac <ee_sprintf>
   28a9c:	e59d3014 	ldr	r3, [sp, #20]
					st += ee_sprintf( &stream[st], "(iy%s)", temp );
   28aa0:	e1a00003 	mov	r0, r3
   28aa4:	e1a02009 	mov	r2, r9
   28aa8:	e59f17d0 	ldr	r1, [pc, #2000]	; 29280 <disasmZ80(unsigned char*, unsigned long, unsigned long, char*, int, int, int)+0x9f4>
   28aac:	ebffe8be 	bl	22dac <ee_sprintf>
   28ab0:	e0844000 	add	r4, r4, r0
					line += strlen( temp )+4;
   28ab4:	e1a00009 	mov	r0, r9
   28ab8:	eb0092d7 	bl	4d61c <strlen>
   28abc:	e0863004 	add	r3, r6, r4
   28ac0:	e1a01003 	mov	r1, r3
   28ac4:	e2855004 	add	r5, r5, #4
					ofs++;
   28ac8:	e28bb001 	add	fp, fp, #1
					op_type++;
   28acc:	e28aa004 	add	sl, sl, #4
					line += strlen( temp )+4;
   28ad0:	e0855000 	add	r5, r5, r0
		for( i = 0; i < data->op_num; i++ ) {
   28ad4:	e597200c 	ldr	r2, [r7, #12]
   28ad8:	e2888001 	add	r8, r8, #1
   28adc:	e1520008 	cmp	r2, r8
   28ae0:	da00004a 	ble	28c10 <disasmZ80(unsigned char*, unsigned long, unsigned long, char*, int, int, int)+0x384>
				st += ee_sprintf( &stream[st], "," );
   28ae4:	e1a00003 	mov	r0, r3
   28ae8:	e59f1794 	ldr	r1, [pc, #1940]	; 29284 <disasmZ80(unsigned char*, unsigned long, unsigned long, char*, int, int, int)+0x9f8>
   28aec:	ebffe8ae 	bl	22dac <ee_sprintf>
				line++;
   28af0:	e2855001 	add	r5, r5, #1
				st += ee_sprintf( &stream[st], "," );
   28af4:	e0844000 	add	r4, r4, r0
   28af8:	eaffffc0 	b	28a00 <disasmZ80(unsigned char*, unsigned long, unsigned long, char*, int, int, int)+0x174>
	line = 32;					// �����܂ł�tab8��32���ɂȂ��Ă���͂�
   28afc:	e3a05020 	mov	r5, #32
   28b00:	e0863004 	add	r3, r6, r4
				}
			}
		}
	}
	while( line < 48 ) {
		st += ee_sprintf( &stream[st],"\t" );
   28b04:	e59f877c 	ldr	r8, [pc, #1916]	; 29288 <disasmZ80(unsigned char*, unsigned long, unsigned long, char*, int, int, int)+0x9fc>
   28b08:	e1a00003 	mov	r0, r3
   28b0c:	ea000000 	b	28b14 <disasmZ80(unsigned char*, unsigned long, unsigned long, char*, int, int, int)+0x288>
   28b10:	e0860004 	add	r0, r6, r4
   28b14:	e1a01008 	mov	r1, r8
   28b18:	ebffe8a3 	bl	22dac <ee_sprintf>
		line += 8;
   28b1c:	e2855008 	add	r5, r5, #8
	while( line < 48 ) {
   28b20:	e355002f 	cmp	r5, #47	; 0x2f
		st += ee_sprintf( &stream[st],"\t" );
   28b24:	e0844000 	add	r4, r4, r0
	while( line < 48 ) {
   28b28:	dafffff8 	ble	28b10 <disasmZ80(unsigned char*, unsigned long, unsigned long, char*, int, int, int)+0x284>
   28b2c:	e0861004 	add	r1, r6, r4
	}
	// �R�����g����
	// ���̊֐��Ɉڂ���
	st += ee_sprintf( &stream[st],";\n" );
   28b30:	e1a00001 	mov	r0, r1
   28b34:	e59f1750 	ldr	r1, [pc, #1872]	; 2928c <disasmZ80(unsigned char*, unsigned long, unsigned long, char*, int, int, int)+0xa00>
   28b38:	ebffe89b 	bl	22dac <ee_sprintf>
	return data->len;
   28b3c:	e5970000 	ldr	r0, [r7]
}
   28b40:	e28ddf4f 	add	sp, sp, #316	; 0x13c
   28b44:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
		for ( i = 0; i < data->len; i++ ) {
   28b48:	e5973000 	ldr	r3, [r7]
   28b4c:	e3530000 	cmp	r3, #0
   28b50:	da000081 	ble	28d5c <disasmZ80(unsigned char*, unsigned long, unsigned long, char*, int, int, int)+0x4d0>
   28b54:	e59d3004 	ldr	r3, [sp, #4]
   28b58:	e24ba001 	sub	sl, fp, #1
			st += ee_sprintf( &stream[st], " %02X", buf[addr+i] );
   28b5c:	e59f872c 	ldr	r8, [pc, #1836]	; 29290 <disasmZ80(unsigned char*, unsigned long, unsigned long, char*, int, int, int)+0xa04>
   28b60:	e083a00a 	add	sl, r3, sl
   28b64:	e0860004 	add	r0, r6, r4
   28b68:	e5fa2001 	ldrb	r2, [sl, #1]!
   28b6c:	e1a01008 	mov	r1, r8
   28b70:	ebffe88d 	bl	22dac <ee_sprintf>
		for ( i = 0; i < data->len; i++ ) {
   28b74:	e5973000 	ldr	r3, [r7]
   28b78:	e2855001 	add	r5, r5, #1
   28b7c:	e1530005 	cmp	r3, r5
			st += ee_sprintf( &stream[st], " %02X", buf[addr+i] );
   28b80:	e0844000 	add	r4, r4, r0
		for ( i = 0; i < data->len; i++ ) {
   28b84:	cafffff6 	bgt	28b64 <disasmZ80(unsigned char*, unsigned long, unsigned long, char*, int, int, int)+0x2d8>
		switch( data->len ) {
   28b88:	e3530004 	cmp	r3, #4
   28b8c:	e0860004 	add	r0, r6, r4
   28b90:	1a000072 	bne	28d60 <disasmZ80(unsigned char*, unsigned long, unsigned long, char*, int, int, int)+0x4d4>
			st += ee_sprintf( &stream[st], "\t" );
   28b94:	e59f16ec 	ldr	r1, [pc, #1772]	; 29288 <disasmZ80(unsigned char*, unsigned long, unsigned long, char*, int, int, int)+0x9fc>
   28b98:	ebffe883 	bl	22dac <ee_sprintf>
   28b9c:	e0844000 	add	r4, r4, r0
		st += ee_sprintf( &stream[st], "%s\t", nimonic[data->nimonic]);
   28ba0:	e59f36cc 	ldr	r3, [pc, #1740]	; 29274 <disasmZ80(unsigned char*, unsigned long, unsigned long, char*, int, int, int)+0x9e8>
   28ba4:	e0860004 	add	r0, r6, r4
   28ba8:	e1a02003 	mov	r2, r3
   28bac:	e58d3008 	str	r3, [sp, #8]
   28bb0:	e5973008 	ldr	r3, [r7, #8]
   28bb4:	e59f16d8 	ldr	r1, [pc, #1752]	; 29294 <disasmZ80(unsigned char*, unsigned long, unsigned long, char*, int, int, int)+0xa08>
   28bb8:	e7922103 	ldr	r2, [r2, r3, lsl #2]
   28bbc:	ebffe87a 	bl	22dac <ee_sprintf>
   28bc0:	e0844000 	add	r4, r4, r0
   28bc4:	eaffff83 	b	289d8 <disasmZ80(unsigned char*, unsigned long, unsigned long, char*, int, int, int)+0x14c>
				st += ee_sprintf( &stream[st], optype0[*op_type] );
   28bc8:	e59d1008 	ldr	r1, [sp, #8]
   28bcc:	e1a00003 	mov	r0, r3
   28bd0:	e0812102 	add	r2, r1, r2, lsl #2
   28bd4:	e5921118 	ldr	r1, [r2, #280]	; 0x118
   28bd8:	ebffe873 	bl	22dac <ee_sprintf>
				line += strlen( optype0[*op_type] );
   28bdc:	e59d1008 	ldr	r1, [sp, #8]
   28be0:	e49a3004 	ldr	r3, [sl], #4
				st += ee_sprintf( &stream[st], optype0[*op_type] );
   28be4:	e0844000 	add	r4, r4, r0
				line += strlen( optype0[*op_type] );
   28be8:	e0813103 	add	r3, r1, r3, lsl #2
   28bec:	e5930118 	ldr	r0, [r3, #280]	; 0x118
   28bf0:	eb009289 	bl	4d61c <strlen>
		for( i = 0; i < data->op_num; i++ ) {
   28bf4:	e597200c 	ldr	r2, [r7, #12]
   28bf8:	e2888001 	add	r8, r8, #1
   28bfc:	e0863004 	add	r3, r6, r4
   28c00:	e1520008 	cmp	r2, r8
				line += strlen( optype0[*op_type] );
   28c04:	e0855000 	add	r5, r5, r0
   28c08:	e1a01003 	mov	r1, r3
		for( i = 0; i < data->op_num; i++ ) {
   28c0c:	caffffb4 	bgt	28ae4 <disasmZ80(unsigned char*, unsigned long, unsigned long, char*, int, int, int)+0x258>
	while( line < 48 ) {
   28c10:	e355002f 	cmp	r5, #47	; 0x2f
   28c14:	caffffc5 	bgt	28b30 <disasmZ80(unsigned char*, unsigned long, unsigned long, char*, int, int, int)+0x2a4>
   28c18:	eaffffb9 	b	28b04 <disasmZ80(unsigned char*, unsigned long, unsigned long, char*, int, int, int)+0x278>
				switch( *op_type ) {
   28c1c:	e59f0674 	ldr	r0, [pc, #1652]	; 29298 <disasmZ80(unsigned char*, unsigned long, unsigned long, char*, int, int, int)+0xa0c>
   28c20:	e1520000 	cmp	r2, r0
   28c24:	0a0000f7 	beq	29008 <disasmZ80(unsigned char*, unsigned long, unsigned long, char*, int, int, int)+0x77c>
   28c28:	da000112 	ble	29078 <disasmZ80(unsigned char*, unsigned long, unsigned long, char*, int, int, int)+0x7ec>
   28c2c:	e59f0668 	ldr	r0, [pc, #1640]	; 2929c <disasmZ80(unsigned char*, unsigned long, unsigned long, char*, int, int, int)+0xa10>
   28c30:	e1520000 	cmp	r2, r0
   28c34:	1a000062 	bne	28dc4 <disasmZ80(unsigned char*, unsigned long, unsigned long, char*, int, int, int)+0x538>
	switch( sw ) {
   28c38:	e59d2160 	ldr	r2, [sp, #352]	; 0x160
					make_byte( sw, temp, buf[addr+ofs] );
   28c3c:	e59d100c 	ldr	r1, [sp, #12]
	switch( sw ) {
   28c40:	e3520001 	cmp	r2, #1
					make_byte( sw, temp, buf[addr+ofs] );
   28c44:	e59d2004 	ldr	r2, [sp, #4]
   28c48:	e082200b 	add	r2, r2, fp
   28c4c:	e7d22001 	ldrb	r2, [r2, r1]
	switch( sw ) {
   28c50:	0a00013c 	beq	29148 <disasmZ80(unsigned char*, unsigned long, unsigned long, char*, int, int, int)+0x8bc>
   28c54:	e59d1160 	ldr	r1, [sp, #352]	; 0x160
   28c58:	e3510002 	cmp	r1, #2
   28c5c:	0a000133 	beq	29130 <disasmZ80(unsigned char*, unsigned long, unsigned long, char*, int, int, int)+0x8a4>
   28c60:	e3510000 	cmp	r1, #0
   28c64:	1a000004 	bne	28c7c <disasmZ80(unsigned char*, unsigned long, unsigned long, char*, int, int, int)+0x3f0>
		ee_sprintf( buf, "0%02XH", num&0xff );
   28c68:	e59f160c 	ldr	r1, [pc, #1548]	; 2927c <disasmZ80(unsigned char*, unsigned long, unsigned long, char*, int, int, int)+0x9f0>
   28c6c:	e1a00009 	mov	r0, r9
   28c70:	e58d3014 	str	r3, [sp, #20]
   28c74:	ebffe84c 	bl	22dac <ee_sprintf>
   28c78:	e59d3014 	ldr	r3, [sp, #20]
					st += ee_sprintf( &stream[st], "(%s)", temp );
   28c7c:	e1a00003 	mov	r0, r3
   28c80:	e59f1618 	ldr	r1, [pc, #1560]	; 292a0 <disasmZ80(unsigned char*, unsigned long, unsigned long, char*, int, int, int)+0xa14>
   28c84:	e1a02009 	mov	r2, r9
   28c88:	ebffe847 	bl	22dac <ee_sprintf>
   28c8c:	e0844000 	add	r4, r4, r0
					line += strlen( temp )+2;
   28c90:	e1a00009 	mov	r0, r9
   28c94:	eb009260 	bl	4d61c <strlen>
   28c98:	e2855002 	add	r5, r5, #2
   28c9c:	e0863004 	add	r3, r6, r4
					ofs++;
   28ca0:	e28bb001 	add	fp, fp, #1
					op_type++;
   28ca4:	e28aa004 	add	sl, sl, #4
					line += strlen( temp )+2;
   28ca8:	e0855000 	add	r5, r5, r0
   28cac:	e1a01003 	mov	r1, r3
					break;
   28cb0:	eaffff87 	b	28ad4 <disasmZ80(unsigned char*, unsigned long, unsigned long, char*, int, int, int)+0x248>
				switch( *op_type ) {
   28cb4:	e3520b02 	cmp	r2, #2048	; 0x800
   28cb8:	0a0000b3 	beq	28f8c <disasmZ80(unsigned char*, unsigned long, unsigned long, char*, int, int, int)+0x700>
   28cbc:	e59f05e0 	ldr	r0, [pc, #1504]	; 292a4 <disasmZ80(unsigned char*, unsigned long, unsigned long, char*, int, int, int)+0xa18>
   28cc0:	e1520000 	cmp	r2, r0
   28cc4:	1affff82 	bne	28ad4 <disasmZ80(unsigned char*, unsigned long, unsigned long, char*, int, int, int)+0x248>
					make_word( sw, temp, (buf[addr+ofs+1]<<8)+buf[addr+ofs] );
   28cc8:	e59d200c 	ldr	r2, [sp, #12]
   28ccc:	e59dc004 	ldr	ip, [sp, #4]
   28cd0:	e08b1002 	add	r1, fp, r2
   28cd4:	e08c2001 	add	r2, ip, r1
   28cd8:	e5d20001 	ldrb	r0, [r2, #1]
   28cdc:	e7dc2001 	ldrb	r2, [ip, r1]
	switch( sw ) {
   28ce0:	e59d1160 	ldr	r1, [sp, #352]	; 0x160
					make_word( sw, temp, (buf[addr+ofs+1]<<8)+buf[addr+ofs] );
   28ce4:	e0822400 	add	r2, r2, r0, lsl #8
	switch( sw ) {
   28ce8:	e3510001 	cmp	r1, #1
   28cec:	0a000121 	beq	29178 <disasmZ80(unsigned char*, unsigned long, unsigned long, char*, int, int, int)+0x8ec>
   28cf0:	e3510002 	cmp	r1, #2
   28cf4:	0a000119 	beq	29160 <disasmZ80(unsigned char*, unsigned long, unsigned long, char*, int, int, int)+0x8d4>
   28cf8:	e3510000 	cmp	r1, #0
   28cfc:	1a000004 	bne	28d14 <disasmZ80(unsigned char*, unsigned long, unsigned long, char*, int, int, int)+0x488>
		ee_sprintf( buf, "0%04XH", num&0xffff );
   28d00:	e59f15a0 	ldr	r1, [pc, #1440]	; 292a8 <disasmZ80(unsigned char*, unsigned long, unsigned long, char*, int, int, int)+0xa1c>
   28d04:	e1a00009 	mov	r0, r9
   28d08:	e58d3014 	str	r3, [sp, #20]
   28d0c:	ebffe826 	bl	22dac <ee_sprintf>
   28d10:	e59d3014 	ldr	r3, [sp, #20]
					st += ee_sprintf( &stream[st], "(%s)", temp );
   28d14:	e59f1584 	ldr	r1, [pc, #1412]	; 292a0 <disasmZ80(unsigned char*, unsigned long, unsigned long, char*, int, int, int)+0xa14>
   28d18:	e1a00003 	mov	r0, r3
   28d1c:	e1a02009 	mov	r2, r9
   28d20:	ebffe821 	bl	22dac <ee_sprintf>
   28d24:	e0844000 	add	r4, r4, r0
   28d28:	e0863004 	add	r3, r6, r4
					line += strlen( temp )+2;
   28d2c:	e1a00009 	mov	r0, r9
   28d30:	e58d3014 	str	r3, [sp, #20]
   28d34:	eb009238 	bl	4d61c <strlen>
   28d38:	e59d3014 	ldr	r3, [sp, #20]
   28d3c:	e2855002 	add	r5, r5, #2
   28d40:	e1a01003 	mov	r1, r3
					ofs += 2;
   28d44:	e28bb002 	add	fp, fp, #2
					op_type++;
   28d48:	e28aa004 	add	sl, sl, #4
					line += strlen( temp )+2;
   28d4c:	e0855000 	add	r5, r5, r0
					break;
   28d50:	eaffff5f 	b	28ad4 <disasmZ80(unsigned char*, unsigned long, unsigned long, char*, int, int, int)+0x248>
	while( disz80[n][buf[addr+ofstbl[ofs]]].len < 0 ) {
   28d54:	e3a03000 	mov	r3, #0
   28d58:	eaffff00 	b	28960 <disasmZ80(unsigned char*, unsigned long, unsigned long, char*, int, int, int)+0xd4>
   28d5c:	e0860004 	add	r0, r6, r4
			st += ee_sprintf( &stream[st], "\t\t" );
   28d60:	e59f1544 	ldr	r1, [pc, #1348]	; 292ac <disasmZ80(unsigned char*, unsigned long, unsigned long, char*, int, int, int)+0xa20>
   28d64:	ebffe810 	bl	22dac <ee_sprintf>
   28d68:	e0804004 	add	r4, r0, r4
			break;
   28d6c:	eaffff8b 	b	28ba0 <disasmZ80(unsigned char*, unsigned long, unsigned long, char*, int, int, int)+0x314>
	if( nullcheck && (buf[addr] == 0xff) && (buf[addr+1] == 0xff) ) {
   28d70:	e5de3001 	ldrb	r3, [lr, #1]
   28d74:	e35300ff 	cmp	r3, #255	; 0xff
   28d78:	1affff01 	bne	28984 <disasmZ80(unsigned char*, unsigned long, unsigned long, char*, int, int, int)+0xf8>
		while( buf[addr+ofs] == 0xff ) {
   28d7c:	e5de1002 	ldrb	r1, [lr, #2]
   28d80:	e59d201c 	ldr	r2, [sp, #28]
   28d84:	e59d3028 	ldr	r3, [sp, #40]	; 0x28
   28d88:	e35100ff 	cmp	r1, #255	; 0xff
			data->len++;
   28d8c:	e2820002 	add	r0, r2, #2
			data->op_num++;
   28d90:	e2831002 	add	r1, r3, #2
		while( buf[addr+ofs] == 0xff ) {
   28d94:	1a0000ba 	bne	29084 <disasmZ80(unsigned char*, unsigned long, unsigned long, char*, int, int, int)+0x7f8>
   28d98:	e5de1003 	ldrb	r1, [lr, #3]
			data->len++;
   28d9c:	e2820003 	add	r0, r2, #3
		while( buf[addr+ofs] == 0xff ) {
   28da0:	e35100ff 	cmp	r1, #255	; 0xff
			data->len++;
   28da4:	02822004 	addeq	r2, r2, #4
			data->op_num++;
   28da8:	e2831003 	add	r1, r3, #3
   28dac:	02833004 	addeq	r3, r3, #4
   28db0:	058d201c 	streq	r2, [sp, #28]
   28db4:	058d3028 	streq	r3, [sp, #40]	; 0x28
		while( buf[addr+ofs] == 0xff ) {
   28db8:	1a0000b1 	bne	29084 <disasmZ80(unsigned char*, unsigned long, unsigned long, char*, int, int, int)+0x7f8>
		data = &NullData;
   28dbc:	e28d701c 	add	r7, sp, #28
   28dc0:	eafffeef 	b	28984 <disasmZ80(unsigned char*, unsigned long, unsigned long, char*, int, int, int)+0xf8>
				switch( *op_type ) {
   28dc4:	e2800001 	add	r0, r0, #1
   28dc8:	e1520000 	cmp	r2, r0
   28dcc:	1affff40 	bne	28ad4 <disasmZ80(unsigned char*, unsigned long, unsigned long, char*, int, int, int)+0x248>
	switch( sw ) {
   28dd0:	e59d2160 	ldr	r2, [sp, #352]	; 0x160
					make_byte( sw, temp, buf[addr+ofs] );
   28dd4:	e59d100c 	ldr	r1, [sp, #12]
	switch( sw ) {
   28dd8:	e3520001 	cmp	r2, #1
					make_byte( sw, temp, buf[addr+ofs] );
   28ddc:	e59d2004 	ldr	r2, [sp, #4]
   28de0:	e082200b 	add	r2, r2, fp
   28de4:	e7d22001 	ldrb	r2, [r2, r1]
	switch( sw ) {
   28de8:	0a0000bc 	beq	290e0 <disasmZ80(unsigned char*, unsigned long, unsigned long, char*, int, int, int)+0x854>
   28dec:	e59d1160 	ldr	r1, [sp, #352]	; 0x160
   28df0:	e3510002 	cmp	r1, #2
   28df4:	0a0000ac 	beq	290ac <disasmZ80(unsigned char*, unsigned long, unsigned long, char*, int, int, int)+0x820>
   28df8:	e3510000 	cmp	r1, #0
   28dfc:	1a000004 	bne	28e14 <disasmZ80(unsigned char*, unsigned long, unsigned long, char*, int, int, int)+0x588>
		ee_sprintf( buf, "0%02XH", num&0xff );
   28e00:	e59f1474 	ldr	r1, [pc, #1140]	; 2927c <disasmZ80(unsigned char*, unsigned long, unsigned long, char*, int, int, int)+0x9f0>
   28e04:	e1a00009 	mov	r0, r9
   28e08:	e58d3014 	str	r3, [sp, #20]
   28e0c:	ebffe7e6 	bl	22dac <ee_sprintf>
   28e10:	e59d3014 	ldr	r3, [sp, #20]
					st += ee_sprintf( &stream[st], temp );
   28e14:	e1a00003 	mov	r0, r3
   28e18:	e1a01009 	mov	r1, r9
   28e1c:	ebffe7e2 	bl	22dac <ee_sprintf>
   28e20:	e0844000 	add	r4, r4, r0
					line += strlen( temp );
   28e24:	e1a00009 	mov	r0, r9
   28e28:	eb0091fb 	bl	4d61c <strlen>
   28e2c:	e0863004 	add	r3, r6, r4
					ofs++;
   28e30:	e28bb001 	add	fp, fp, #1
					op_type++;
   28e34:	e28aa004 	add	sl, sl, #4
					line += strlen( temp );
   28e38:	e0855000 	add	r5, r5, r0
   28e3c:	e1a01003 	mov	r1, r3
					break;
   28e40:	eaffff23 	b	28ad4 <disasmZ80(unsigned char*, unsigned long, unsigned long, char*, int, int, int)+0x248>
					rel = buf[addr+ofs];
   28e44:	e59d2004 	ldr	r2, [sp, #4]
   28e48:	e59d100c 	ldr	r1, [sp, #12]
   28e4c:	e082200b 	add	r2, r2, fp
   28e50:	e7d21001 	ldrb	r1, [r2, r1]
	switch( sw ) {
   28e54:	e59d0160 	ldr	r0, [sp, #352]	; 0x160
					if( rel >= 0x80 ) rel -= 0x100;
   28e58:	e351007f 	cmp	r1, #127	; 0x7f
					make_word( sw, temp, base+addr+rel+2 );
   28e5c:	e59d200c 	ldr	r2, [sp, #12]
					if( rel >= 0x80 ) rel -= 0x100;
   28e60:	c2411c01 	subgt	r1, r1, #256	; 0x100
	switch( sw ) {
   28e64:	e3500001 	cmp	r0, #1
					make_word( sw, temp, base+addr+rel+2 );
   28e68:	e59d0010 	ldr	r0, [sp, #16]
   28e6c:	e2822002 	add	r2, r2, #2
   28e70:	e0822000 	add	r2, r2, r0
   28e74:	e0822001 	add	r2, r2, r1
	switch( sw ) {
   28e78:	0a000084 	beq	29090 <disasmZ80(unsigned char*, unsigned long, unsigned long, char*, int, int, int)+0x804>
   28e7c:	e59d1160 	ldr	r1, [sp, #352]	; 0x160
   28e80:	e3510002 	cmp	r1, #2
   28e84:	0a00008e 	beq	290c4 <disasmZ80(unsigned char*, unsigned long, unsigned long, char*, int, int, int)+0x838>
   28e88:	e3510000 	cmp	r1, #0
   28e8c:	1affffe0 	bne	28e14 <disasmZ80(unsigned char*, unsigned long, unsigned long, char*, int, int, int)+0x588>
		ee_sprintf( buf, "0%04XH", num&0xffff );
   28e90:	e6ff2072 	uxth	r2, r2
   28e94:	e59f140c 	ldr	r1, [pc, #1036]	; 292a8 <disasmZ80(unsigned char*, unsigned long, unsigned long, char*, int, int, int)+0xa1c>
   28e98:	e1a00009 	mov	r0, r9
   28e9c:	e58d3014 	str	r3, [sp, #20]
   28ea0:	ebffe7c1 	bl	22dac <ee_sprintf>
   28ea4:	e59d3014 	ldr	r3, [sp, #20]
   28ea8:	eaffffd9 	b	28e14 <disasmZ80(unsigned char*, unsigned long, unsigned long, char*, int, int, int)+0x588>
	switch( sw ) {
   28eac:	e59d2160 	ldr	r2, [sp, #352]	; 0x160
					make_byte( sw, temp, buf[addr+ofs] );
   28eb0:	e59d100c 	ldr	r1, [sp, #12]
	switch( sw ) {
   28eb4:	e3520001 	cmp	r2, #1
					make_byte( sw, temp, buf[addr+ofs] );
   28eb8:	e59d2004 	ldr	r2, [sp, #4]
   28ebc:	e082200b 	add	r2, r2, fp
   28ec0:	e7d22001 	ldrb	r2, [r2, r1]
	switch( sw ) {
   28ec4:	0a0000df 	beq	29248 <disasmZ80(unsigned char*, unsigned long, unsigned long, char*, int, int, int)+0x9bc>
   28ec8:	e59d1160 	ldr	r1, [sp, #352]	; 0x160
   28ecc:	e3510002 	cmp	r1, #2
   28ed0:	0a0000d6 	beq	29230 <disasmZ80(unsigned char*, unsigned long, unsigned long, char*, int, int, int)+0x9a4>
   28ed4:	e3510000 	cmp	r1, #0
   28ed8:	1a000004 	bne	28ef0 <disasmZ80(unsigned char*, unsigned long, unsigned long, char*, int, int, int)+0x664>
		ee_sprintf( buf, "0%02XH", num&0xff );
   28edc:	e59f1398 	ldr	r1, [pc, #920]	; 2927c <disasmZ80(unsigned char*, unsigned long, unsigned long, char*, int, int, int)+0x9f0>
   28ee0:	e1a00009 	mov	r0, r9
   28ee4:	e58d3014 	str	r3, [sp, #20]
   28ee8:	ebffe7af 	bl	22dac <ee_sprintf>
   28eec:	e59d3014 	ldr	r3, [sp, #20]
					st += ee_sprintf( &stream[st], temp );
   28ef0:	e1a00003 	mov	r0, r3
   28ef4:	e1a01009 	mov	r1, r9
   28ef8:	ebffe7ab 	bl	22dac <ee_sprintf>
   28efc:	e0844000 	add	r4, r4, r0
					line += strlen( temp );
   28f00:	e1a00009 	mov	r0, r9
   28f04:	eb0091c4 	bl	4d61c <strlen>
   28f08:	e0863004 	add	r3, r6, r4
					ofs++;
   28f0c:	e28bb001 	add	fp, fp, #1
					line += strlen( temp );
   28f10:	e0855000 	add	r5, r5, r0
   28f14:	e1a01003 	mov	r1, r3
					break;
   28f18:	eafffeed 	b	28ad4 <disasmZ80(unsigned char*, unsigned long, unsigned long, char*, int, int, int)+0x248>
					make_ofs_byte( sw, temp, buf[addr+ofs] );
   28f1c:	e59d2004 	ldr	r2, [sp, #4]
   28f20:	e59d100c 	ldr	r1, [sp, #12]
   28f24:	e082200b 	add	r2, r2, fp
   28f28:	e7d22001 	ldrb	r2, [r2, r1]
	switch( sw ) {
   28f2c:	e59d0160 	ldr	r0, [sp, #352]	; 0x160
	if( num >= 0x80 ) {
   28f30:	e352007f 	cmp	r2, #127	; 0x7f
		num = (num^0xff)+1;
   28f34:	c1e02002 	mvngt	r2, r2
		*buf = '-';
   28f38:	c3a0102d 	movgt	r1, #45	; 0x2d
		*buf = '+';
   28f3c:	d3a0102b 	movle	r1, #43	; 0x2b
		num = (num^0xff)+1;
   28f40:	c6ef2072 	uxtbgt	r2, r2
   28f44:	c2822001 	addgt	r2, r2, #1
	switch( sw ) {
   28f48:	e3500001 	cmp	r0, #1
   28f4c:	e5cd1038 	strb	r1, [sp, #56]	; 0x38
   28f50:	0a0000af 	beq	29214 <disasmZ80(unsigned char*, unsigned long, unsigned long, char*, int, int, int)+0x988>
   28f54:	e3500002 	cmp	r0, #2
   28f58:	0a0000a6 	beq	291f8 <disasmZ80(unsigned char*, unsigned long, unsigned long, char*, int, int, int)+0x96c>
   28f5c:	e3500000 	cmp	r0, #0
   28f60:	1a000005 	bne	28f7c <disasmZ80(unsigned char*, unsigned long, unsigned long, char*, int, int, int)+0x6f0>
		ee_sprintf( buf, "0%02XH", num&0xff );
   28f64:	e6ef2072 	uxtb	r2, r2
   28f68:	e59f130c 	ldr	r1, [pc, #780]	; 2927c <disasmZ80(unsigned char*, unsigned long, unsigned long, char*, int, int, int)+0x9f0>
   28f6c:	e28d0039 	add	r0, sp, #57	; 0x39
   28f70:	e58d3014 	str	r3, [sp, #20]
   28f74:	ebffe78c 	bl	22dac <ee_sprintf>
   28f78:	e59d3014 	ldr	r3, [sp, #20]
					st += ee_sprintf( &stream[st], "(ix%s)", temp );
   28f7c:	e1a00003 	mov	r0, r3
   28f80:	e1a02009 	mov	r2, r9
   28f84:	e59f1324 	ldr	r1, [pc, #804]	; 292b0 <disasmZ80(unsigned char*, unsigned long, unsigned long, char*, int, int, int)+0xa24>
   28f88:	eafffec7 	b	28aac <disasmZ80(unsigned char*, unsigned long, unsigned long, char*, int, int, int)+0x220>
					make_word( sw, temp, (buf[addr+ofs+1]<<8)+buf[addr+ofs] );
   28f8c:	e59d200c 	ldr	r2, [sp, #12]
   28f90:	e59dc004 	ldr	ip, [sp, #4]
   28f94:	e08b1002 	add	r1, fp, r2
   28f98:	e08c2001 	add	r2, ip, r1
   28f9c:	e5d20001 	ldrb	r0, [r2, #1]
   28fa0:	e7dc2001 	ldrb	r2, [ip, r1]
	switch( sw ) {
   28fa4:	e59d1160 	ldr	r1, [sp, #352]	; 0x160
					make_word( sw, temp, (buf[addr+ofs+1]<<8)+buf[addr+ofs] );
   28fa8:	e0822400 	add	r2, r2, r0, lsl #8
	switch( sw ) {
   28fac:	e3510001 	cmp	r1, #1
   28fb0:	0a00008a 	beq	291e0 <disasmZ80(unsigned char*, unsigned long, unsigned long, char*, int, int, int)+0x954>
   28fb4:	e3510002 	cmp	r1, #2
   28fb8:	0a000082 	beq	291c8 <disasmZ80(unsigned char*, unsigned long, unsigned long, char*, int, int, int)+0x93c>
   28fbc:	e3510000 	cmp	r1, #0
   28fc0:	1a000004 	bne	28fd8 <disasmZ80(unsigned char*, unsigned long, unsigned long, char*, int, int, int)+0x74c>
		ee_sprintf( buf, "0%04XH", num&0xffff );
   28fc4:	e59f12dc 	ldr	r1, [pc, #732]	; 292a8 <disasmZ80(unsigned char*, unsigned long, unsigned long, char*, int, int, int)+0xa1c>
   28fc8:	e1a00009 	mov	r0, r9
   28fcc:	e58d3014 	str	r3, [sp, #20]
   28fd0:	ebffe775 	bl	22dac <ee_sprintf>
   28fd4:	e59d3014 	ldr	r3, [sp, #20]
					st += ee_sprintf( &stream[st], temp );
   28fd8:	e1a00003 	mov	r0, r3
   28fdc:	e1a01009 	mov	r1, r9
   28fe0:	ebffe771 	bl	22dac <ee_sprintf>
   28fe4:	e0844000 	add	r4, r4, r0
					line += strlen( temp );
   28fe8:	e1a00009 	mov	r0, r9
   28fec:	eb00918a 	bl	4d61c <strlen>
   28ff0:	e0863004 	add	r3, r6, r4
					ofs += 2;
   28ff4:	e28bb002 	add	fp, fp, #2
					op_type++;
   28ff8:	e28aa004 	add	sl, sl, #4
					line += strlen( temp );
   28ffc:	e0855000 	add	r5, r5, r0
   29000:	e1a01003 	mov	r1, r3
					break;
   29004:	eafffeb2 	b	28ad4 <disasmZ80(unsigned char*, unsigned long, unsigned long, char*, int, int, int)+0x248>
					make_byte( sw, temp, buf[addr]-0xc7 );
   29008:	e59d100c 	ldr	r1, [sp, #12]
   2900c:	e59d2004 	ldr	r2, [sp, #4]
   29010:	e7d22001 	ldrb	r2, [r2, r1]
	switch( sw ) {
   29014:	e59d1160 	ldr	r1, [sp, #352]	; 0x160
					make_byte( sw, temp, buf[addr]-0xc7 );
   29018:	e24220c7 	sub	r2, r2, #199	; 0xc7
	switch( sw ) {
   2901c:	e3510001 	cmp	r1, #1
   29020:	0a000061 	beq	291ac <disasmZ80(unsigned char*, unsigned long, unsigned long, char*, int, int, int)+0x920>
   29024:	e3510002 	cmp	r1, #2
   29028:	0a000058 	beq	29190 <disasmZ80(unsigned char*, unsigned long, unsigned long, char*, int, int, int)+0x904>
   2902c:	e3510000 	cmp	r1, #0
   29030:	1a000005 	bne	2904c <disasmZ80(unsigned char*, unsigned long, unsigned long, char*, int, int, int)+0x7c0>
		ee_sprintf( buf, "0%02XH", num&0xff );
   29034:	e6ef2072 	uxtb	r2, r2
   29038:	e59f123c 	ldr	r1, [pc, #572]	; 2927c <disasmZ80(unsigned char*, unsigned long, unsigned long, char*, int, int, int)+0x9f0>
   2903c:	e1a00009 	mov	r0, r9
   29040:	e58d3014 	str	r3, [sp, #20]
   29044:	ebffe758 	bl	22dac <ee_sprintf>
   29048:	e59d3014 	ldr	r3, [sp, #20]
					st += ee_sprintf( &stream[st], temp );
   2904c:	e1a00003 	mov	r0, r3
   29050:	e1a01009 	mov	r1, r9
   29054:	ebffe754 	bl	22dac <ee_sprintf>
   29058:	e0844000 	add	r4, r4, r0
					line += strlen( temp );
   2905c:	e1a00009 	mov	r0, r9
   29060:	eb00916d 	bl	4d61c <strlen>
   29064:	e0863004 	add	r3, r6, r4
					op_type++;
   29068:	e28aa004 	add	sl, sl, #4
					line += strlen( temp );
   2906c:	e0855000 	add	r5, r5, r0
   29070:	e1a01003 	mov	r1, r3
					break;
   29074:	eafffe96 	b	28ad4 <disasmZ80(unsigned char*, unsigned long, unsigned long, char*, int, int, int)+0x248>
				switch( *op_type ) {
   29078:	e3520c01 	cmp	r2, #256	; 0x100
   2907c:	0affff53 	beq	28dd0 <disasmZ80(unsigned char*, unsigned long, unsigned long, char*, int, int, int)+0x544>
   29080:	eafffe93 	b	28ad4 <disasmZ80(unsigned char*, unsigned long, unsigned long, char*, int, int, int)+0x248>
   29084:	e58d001c 	str	r0, [sp, #28]
   29088:	e58d1028 	str	r1, [sp, #40]	; 0x28
   2908c:	eaffff4a 	b	28dbc <disasmZ80(unsigned char*, unsigned long, unsigned long, char*, int, int, int)+0x530>
	ee_sprintf( buf, "$%04X", num&0xffff );
   29090:	e6ff2072 	uxth	r2, r2
   29094:	e59f1218 	ldr	r1, [pc, #536]	; 292b4 <disasmZ80(unsigned char*, unsigned long, unsigned long, char*, int, int, int)+0xa28>
   29098:	e1a00009 	mov	r0, r9
   2909c:	e58d3014 	str	r3, [sp, #20]
   290a0:	ebffe741 	bl	22dac <ee_sprintf>
   290a4:	e59d3014 	ldr	r3, [sp, #20]
   290a8:	eaffff59 	b	28e14 <disasmZ80(unsigned char*, unsigned long, unsigned long, char*, int, int, int)+0x588>
		ee_sprintf( buf, "0x%02X", num&0xff );
   290ac:	e59f1204 	ldr	r1, [pc, #516]	; 292b8 <disasmZ80(unsigned char*, unsigned long, unsigned long, char*, int, int, int)+0xa2c>
   290b0:	e1a00009 	mov	r0, r9
   290b4:	e58d3014 	str	r3, [sp, #20]
   290b8:	ebffe73b 	bl	22dac <ee_sprintf>
   290bc:	e59d3014 	ldr	r3, [sp, #20]
   290c0:	eaffff53 	b	28e14 <disasmZ80(unsigned char*, unsigned long, unsigned long, char*, int, int, int)+0x588>
		ee_sprintf( buf, "0x%04X", num&0xffff );
   290c4:	e6ff2072 	uxth	r2, r2
   290c8:	e59f11ec 	ldr	r1, [pc, #492]	; 292bc <disasmZ80(unsigned char*, unsigned long, unsigned long, char*, int, int, int)+0xa30>
   290cc:	e1a00009 	mov	r0, r9
   290d0:	e58d3014 	str	r3, [sp, #20]
   290d4:	ebffe734 	bl	22dac <ee_sprintf>
   290d8:	e59d3014 	ldr	r3, [sp, #20]
   290dc:	eaffff4c 	b	28e14 <disasmZ80(unsigned char*, unsigned long, unsigned long, char*, int, int, int)+0x588>
		ee_sprintf( buf, "$%02X", num&0xff );
   290e0:	e59f11d8 	ldr	r1, [pc, #472]	; 292c0 <disasmZ80(unsigned char*, unsigned long, unsigned long, char*, int, int, int)+0xa34>
   290e4:	e1a00009 	mov	r0, r9
   290e8:	e58d3014 	str	r3, [sp, #20]
   290ec:	ebffe72e 	bl	22dac <ee_sprintf>
   290f0:	e59d3014 	ldr	r3, [sp, #20]
   290f4:	eaffff46 	b	28e14 <disasmZ80(unsigned char*, unsigned long, unsigned long, char*, int, int, int)+0x588>
		ee_sprintf( buf, "0x%02X", num&0xff );
   290f8:	e6ef2072 	uxtb	r2, r2
   290fc:	e59f11b4 	ldr	r1, [pc, #436]	; 292b8 <disasmZ80(unsigned char*, unsigned long, unsigned long, char*, int, int, int)+0xa2c>
   29100:	e28d0039 	add	r0, sp, #57	; 0x39
   29104:	e58d3014 	str	r3, [sp, #20]
   29108:	ebffe727 	bl	22dac <ee_sprintf>
   2910c:	e59d3014 	ldr	r3, [sp, #20]
   29110:	eafffe62 	b	28aa0 <disasmZ80(unsigned char*, unsigned long, unsigned long, char*, int, int, int)+0x214>
		ee_sprintf( buf, "$%02X", num&0xff );
   29114:	e6ef2072 	uxtb	r2, r2
   29118:	e59f11a0 	ldr	r1, [pc, #416]	; 292c0 <disasmZ80(unsigned char*, unsigned long, unsigned long, char*, int, int, int)+0xa34>
   2911c:	e28d0039 	add	r0, sp, #57	; 0x39
   29120:	e58d3014 	str	r3, [sp, #20]
   29124:	ebffe720 	bl	22dac <ee_sprintf>
   29128:	e59d3014 	ldr	r3, [sp, #20]
   2912c:	eafffe5b 	b	28aa0 <disasmZ80(unsigned char*, unsigned long, unsigned long, char*, int, int, int)+0x214>
		ee_sprintf( buf, "0x%02X", num&0xff );
   29130:	e59f1180 	ldr	r1, [pc, #384]	; 292b8 <disasmZ80(unsigned char*, unsigned long, unsigned long, char*, int, int, int)+0xa2c>
   29134:	e1a00009 	mov	r0, r9
   29138:	e58d3014 	str	r3, [sp, #20]
   2913c:	ebffe71a 	bl	22dac <ee_sprintf>
   29140:	e59d3014 	ldr	r3, [sp, #20]
   29144:	eafffecc 	b	28c7c <disasmZ80(unsigned char*, unsigned long, unsigned long, char*, int, int, int)+0x3f0>
		ee_sprintf( buf, "$%02X", num&0xff );
   29148:	e59f1170 	ldr	r1, [pc, #368]	; 292c0 <disasmZ80(unsigned char*, unsigned long, unsigned long, char*, int, int, int)+0xa34>
   2914c:	e1a00009 	mov	r0, r9
   29150:	e58d3014 	str	r3, [sp, #20]
   29154:	ebffe714 	bl	22dac <ee_sprintf>
   29158:	e59d3014 	ldr	r3, [sp, #20]
   2915c:	eafffec6 	b	28c7c <disasmZ80(unsigned char*, unsigned long, unsigned long, char*, int, int, int)+0x3f0>
		ee_sprintf( buf, "0x%04X", num&0xffff );
   29160:	e59f1154 	ldr	r1, [pc, #340]	; 292bc <disasmZ80(unsigned char*, unsigned long, unsigned long, char*, int, int, int)+0xa30>
   29164:	e1a00009 	mov	r0, r9
   29168:	e58d3014 	str	r3, [sp, #20]
   2916c:	ebffe70e 	bl	22dac <ee_sprintf>
   29170:	e59d3014 	ldr	r3, [sp, #20]
   29174:	eafffee6 	b	28d14 <disasmZ80(unsigned char*, unsigned long, unsigned long, char*, int, int, int)+0x488>
	ee_sprintf( buf, "$%04X", num&0xffff );
   29178:	e59f1134 	ldr	r1, [pc, #308]	; 292b4 <disasmZ80(unsigned char*, unsigned long, unsigned long, char*, int, int, int)+0xa28>
   2917c:	e1a00009 	mov	r0, r9
   29180:	e58d3014 	str	r3, [sp, #20]
   29184:	ebffe708 	bl	22dac <ee_sprintf>
   29188:	e59d3014 	ldr	r3, [sp, #20]
   2918c:	eafffee0 	b	28d14 <disasmZ80(unsigned char*, unsigned long, unsigned long, char*, int, int, int)+0x488>
		ee_sprintf( buf, "0x%02X", num&0xff );
   29190:	e6ef2072 	uxtb	r2, r2
   29194:	e59f111c 	ldr	r1, [pc, #284]	; 292b8 <disasmZ80(unsigned char*, unsigned long, unsigned long, char*, int, int, int)+0xa2c>
   29198:	e1a00009 	mov	r0, r9
   2919c:	e58d3014 	str	r3, [sp, #20]
   291a0:	ebffe701 	bl	22dac <ee_sprintf>
   291a4:	e59d3014 	ldr	r3, [sp, #20]
   291a8:	eaffffa7 	b	2904c <disasmZ80(unsigned char*, unsigned long, unsigned long, char*, int, int, int)+0x7c0>
		ee_sprintf( buf, "$%02X", num&0xff );
   291ac:	e6ef2072 	uxtb	r2, r2
   291b0:	e59f1108 	ldr	r1, [pc, #264]	; 292c0 <disasmZ80(unsigned char*, unsigned long, unsigned long, char*, int, int, int)+0xa34>
   291b4:	e1a00009 	mov	r0, r9
   291b8:	e58d3014 	str	r3, [sp, #20]
   291bc:	ebffe6fa 	bl	22dac <ee_sprintf>
   291c0:	e59d3014 	ldr	r3, [sp, #20]
   291c4:	eaffffa0 	b	2904c <disasmZ80(unsigned char*, unsigned long, unsigned long, char*, int, int, int)+0x7c0>
		ee_sprintf( buf, "0x%04X", num&0xffff );
   291c8:	e59f10ec 	ldr	r1, [pc, #236]	; 292bc <disasmZ80(unsigned char*, unsigned long, unsigned long, char*, int, int, int)+0xa30>
   291cc:	e1a00009 	mov	r0, r9
   291d0:	e58d3014 	str	r3, [sp, #20]
   291d4:	ebffe6f4 	bl	22dac <ee_sprintf>
   291d8:	e59d3014 	ldr	r3, [sp, #20]
   291dc:	eaffff7d 	b	28fd8 <disasmZ80(unsigned char*, unsigned long, unsigned long, char*, int, int, int)+0x74c>
	ee_sprintf( buf, "$%04X", num&0xffff );
   291e0:	e59f10cc 	ldr	r1, [pc, #204]	; 292b4 <disasmZ80(unsigned char*, unsigned long, unsigned long, char*, int, int, int)+0xa28>
   291e4:	e1a00009 	mov	r0, r9
   291e8:	e58d3014 	str	r3, [sp, #20]
   291ec:	ebffe6ee 	bl	22dac <ee_sprintf>
   291f0:	e59d3014 	ldr	r3, [sp, #20]
   291f4:	eaffff77 	b	28fd8 <disasmZ80(unsigned char*, unsigned long, unsigned long, char*, int, int, int)+0x74c>
		ee_sprintf( buf, "0x%02X", num&0xff );
   291f8:	e6ef2072 	uxtb	r2, r2
   291fc:	e59f10b4 	ldr	r1, [pc, #180]	; 292b8 <disasmZ80(unsigned char*, unsigned long, unsigned long, char*, int, int, int)+0xa2c>
   29200:	e28d0039 	add	r0, sp, #57	; 0x39
   29204:	e58d3014 	str	r3, [sp, #20]
   29208:	ebffe6e7 	bl	22dac <ee_sprintf>
   2920c:	e59d3014 	ldr	r3, [sp, #20]
   29210:	eaffff59 	b	28f7c <disasmZ80(unsigned char*, unsigned long, unsigned long, char*, int, int, int)+0x6f0>
		ee_sprintf( buf, "$%02X", num&0xff );
   29214:	e6ef2072 	uxtb	r2, r2
   29218:	e59f10a0 	ldr	r1, [pc, #160]	; 292c0 <disasmZ80(unsigned char*, unsigned long, unsigned long, char*, int, int, int)+0xa34>
   2921c:	e28d0039 	add	r0, sp, #57	; 0x39
   29220:	e58d3014 	str	r3, [sp, #20]
   29224:	ebffe6e0 	bl	22dac <ee_sprintf>
   29228:	e59d3014 	ldr	r3, [sp, #20]
   2922c:	eaffff52 	b	28f7c <disasmZ80(unsigned char*, unsigned long, unsigned long, char*, int, int, int)+0x6f0>
		ee_sprintf( buf, "0x%02X", num&0xff );
   29230:	e59f1080 	ldr	r1, [pc, #128]	; 292b8 <disasmZ80(unsigned char*, unsigned long, unsigned long, char*, int, int, int)+0xa2c>
   29234:	e1a00009 	mov	r0, r9
   29238:	e58d3014 	str	r3, [sp, #20]
   2923c:	ebffe6da 	bl	22dac <ee_sprintf>
   29240:	e59d3014 	ldr	r3, [sp, #20]
   29244:	eaffff29 	b	28ef0 <disasmZ80(unsigned char*, unsigned long, unsigned long, char*, int, int, int)+0x664>
		ee_sprintf( buf, "$%02X", num&0xff );
   29248:	e59f1070 	ldr	r1, [pc, #112]	; 292c0 <disasmZ80(unsigned char*, unsigned long, unsigned long, char*, int, int, int)+0xa34>
   2924c:	e1a00009 	mov	r0, r9
   29250:	e58d3014 	str	r3, [sp, #20]
   29254:	ebffe6d4 	bl	22dac <ee_sprintf>
   29258:	e59d3014 	ldr	r3, [sp, #20]
   2925c:	eaffff23 	b	28ef0 <disasmZ80(unsigned char*, unsigned long, unsigned long, char*, int, int, int)+0x664>
   29260:	000544f4 	.word	0x000544f4
   29264:	00054540 	.word	0x00054540
   29268:	00054548 	.word	0x00054548
   2926c:	000544e8 	.word	0x000544e8
   29270:	00062cdc 	.word	0x00062cdc
   29274:	00062ab0 	.word	0x00062ab0
   29278:	00000201 	.word	0x00000201
   2927c:	00054510 	.word	0x00054510
   29280:	00054574 	.word	0x00054574
   29284:	000541a0 	.word	0x000541a0
   29288:	00054558 	.word	0x00054558
   2928c:	0005457c 	.word	0x0005457c
   29290:	00054550 	.word	0x00054550
   29294:	00054560 	.word	0x00054560
   29298:	00000101 	.word	0x00000101
   2929c:	00000102 	.word	0x00000102
   292a0:	00054564 	.word	0x00054564
   292a4:	00000801 	.word	0x00000801
   292a8:	00054528 	.word	0x00054528
   292ac:	0005455c 	.word	0x0005455c
   292b0:	0005456c 	.word	0x0005456c
   292b4:	00054530 	.word	0x00054530
   292b8:	00054520 	.word	0x00054520
   292bc:	00054538 	.word	0x00054538
   292c0:	00054518 	.word	0x00054518

000292c4 <McTRS80CmdFormat::McTRS80CmdFormat()>:

const char *McTRS80CmdFormat::_logPrefix = "McTRS80Cmd";

McTRS80CmdFormat::McTRS80CmdFormat()
{
}
   292c4:	e12fff1e 	bx	lr

000292c8 <McTRS80CmdFormat::proc(void (*)(unsigned long, unsigned char const*, unsigned long), void (*)(Z80Registers const&), unsigned char const*, int)>:

void McTRS80CmdFormat::proc(FileParserDataCallback* pDataCallback, 
            FileParserRegsCallback* pRegsCallback, 
            const uint8_t* pData, int dataLen)
{
   292c8:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   292cc:	e24dd054 	sub	sp, sp, #84	; 0x54
   292d0:	e59d5078 	ldr	r5, [sp, #120]	; 0x78
    int pos = 0;
    while (pos < dataLen - 2)
   292d4:	e2458002 	sub	r8, r5, #2
   292d8:	e3580000 	cmp	r8, #0
   292dc:	da00002a 	ble	2938c <McTRS80CmdFormat::proc(void (*)(unsigned long, unsigned char const*, unsigned long), void (*)(Z80Registers const&), unsigned char const*, int)+0xc4>
   292e0:	e1a0a001 	mov	sl, r1
   292e4:	e1a07003 	mov	r7, r3
    int pos = 0;
   292e8:	e3a01000 	mov	r1, #0
                LogWrite(_logPrefix, LOG_DEBUG, "Title");
                break;
            }
            default:
            {
                LogWrite(_logPrefix, LOG_DEBUG, "Undecoded block %02x", code);
   292ec:	e59f9200 	ldr	r9, [pc, #512]	; 294f4 <McTRS80CmdFormat::proc(void (*)(unsigned long, unsigned char const*, unsigned long), void (*)(Z80Registers const&), unsigned char const*, int)+0x22c>
   292f0:	e59fb200 	ldr	fp, [pc, #512]	; 294f8 <McTRS80CmdFormat::proc(void (*)(unsigned long, unsigned char const*, unsigned long), void (*)(Z80Registers const&), unsigned char const*, int)+0x230>
   292f4:	e58d2004 	str	r2, [sp, #4]
   292f8:	e2455001 	sub	r5, r5, #1
        int code = pData[pos++];
   292fc:	e1a02007 	mov	r2, r7
   29300:	e7f23001 	ldrb	r3, [r2, r1]!
        int length = pData[pos++];
   29304:	e2816002 	add	r6, r1, #2
   29308:	e5d24001 	ldrb	r4, [r2, #1]
        switch(code)
   2930c:	e2432001 	sub	r2, r3, #1
        length = (length < dataLen-1) ? length : (dataLen-1);
   29310:	e1540005 	cmp	r4, r5
   29314:	a1a04005 	movge	r4, r5
            length = 0x100;
   29318:	e3540000 	cmp	r4, #0
   2931c:	03a04c01 	moveq	r4, #256	; 0x100
        switch(code)
   29320:	e3520004 	cmp	r2, #4
   29324:	979ff102 	ldrls	pc, [pc, r2, lsl #2]
   29328:	ea000044 	b	29440 <McTRS80CmdFormat::proc(void (*)(unsigned long, unsigned char const*, unsigned long), void (*)(Z80Registers const&), unsigned char const*, int)+0x178>
   2932c:	00029410 	.word	0x00029410
   29330:	00029394 	.word	0x00029394
   29334:	00029378 	.word	0x00029378
   29338:	00029364 	.word	0x00029364
   2933c:	00029340 	.word	0x00029340
                LogWrite(_logPrefix, LOG_DEBUG, "Title");
   29340:	e59f21b4 	ldr	r2, [pc, #436]	; 294fc <McTRS80CmdFormat::proc(void (*)(unsigned long, unsigned char const*, unsigned long), void (*)(Z80Registers const&), unsigned char const*, int)+0x234>
   29344:	e3a01004 	mov	r1, #4
   29348:	e5990000 	ldr	r0, [r9]
   2934c:	ebffeb89 	bl	24178 <LogWrite>
                break;
            }
        }

        // Bump pos
        pos += length;
   29350:	e0861004 	add	r1, r6, r4
    while (pos < dataLen - 2)
   29354:	e1510008 	cmp	r1, r8
   29358:	baffffe7 	blt	292fc <McTRS80CmdFormat::proc(void (*)(unsigned long, unsigned char const*, unsigned long), void (*)(Z80Registers const&), unsigned char const*, int)+0x34>
    }
}
   2935c:	e28dd054 	add	sp, sp, #84	; 0x54
   29360:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
                LogWrite(_logPrefix, LOG_DEBUG, "End of partitioned data");
   29364:	e59f2194 	ldr	r2, [pc, #404]	; 29500 <McTRS80CmdFormat::proc(void (*)(unsigned long, unsigned char const*, unsigned long), void (*)(Z80Registers const&), unsigned char const*, int)+0x238>
   29368:	e3a01004 	mov	r1, #4
   2936c:	e5990000 	ldr	r0, [r9]
   29370:	ebffeb80 	bl	24178 <LogWrite>
                break;
   29374:	eafffff5 	b	29350 <McTRS80CmdFormat::proc(void (*)(unsigned long, unsigned char const*, unsigned long), void (*)(Z80Registers const&), unsigned char const*, int)+0x88>
                LogWrite(_logPrefix, LOG_DEBUG, "Non exec marker");
   29378:	e59f3174 	ldr	r3, [pc, #372]	; 294f4 <McTRS80CmdFormat::proc(void (*)(unsigned long, unsigned char const*, unsigned long), void (*)(Z80Registers const&), unsigned char const*, int)+0x22c>
   2937c:	e59f2180 	ldr	r2, [pc, #384]	; 29504 <McTRS80CmdFormat::proc(void (*)(unsigned long, unsigned char const*, unsigned long), void (*)(Z80Registers const&), unsigned char const*, int)+0x23c>
   29380:	e5930000 	ldr	r0, [r3]
   29384:	e3a01004 	mov	r1, #4
   29388:	ebffeb7a 	bl	24178 <LogWrite>
}
   2938c:	e28dd054 	add	sp, sp, #84	; 0x54
   29390:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
                if (length == 1)
   29394:	e3540001 	cmp	r4, #1
   29398:	1a00002d 	bne	29454 <McTRS80CmdFormat::proc(void (*)(unsigned long, unsigned char const*, unsigned long), void (*)(Z80Registers const&), unsigned char const*, int)+0x18c>
    {
        clear();
    }
    void clear()
    {
        PC = SP = HL = DE = BC = AF = IX = IY = 0;
   2939c:	e3a03000 	mov	r3, #0
                    regs.PC = pData[pos];
   293a0:	e7d72006 	ldrb	r2, [r7, r6]
   293a4:	e28d0050 	add	r0, sp, #80	; 0x50
   293a8:	e58d3024 	str	r3, [sp, #36]	; 0x24
   293ac:	e5202048 	str	r2, [r0, #-72]!	; 0xffffffb8
   293b0:	e58d3020 	str	r3, [sp, #32]
   293b4:	e58d301c 	str	r3, [sp, #28]
   293b8:	e58d3018 	str	r3, [sp, #24]
   293bc:	e58d3014 	str	r3, [sp, #20]
   293c0:	e58d3010 	str	r3, [sp, #16]
   293c4:	e58d300c 	str	r3, [sp, #12]
        HLDASH = DEDASH = BCDASH = AFDASH = MEMPTR = 0;
   293c8:	e58d3038 	str	r3, [sp, #56]	; 0x38
   293cc:	e58d3034 	str	r3, [sp, #52]	; 0x34
   293d0:	e58d3030 	str	r3, [sp, #48]	; 0x30
   293d4:	e58d302c 	str	r3, [sp, #44]	; 0x2c
   293d8:	e58d3028 	str	r3, [sp, #40]	; 0x28
        I = R = INTMODE = INTENABLED = VPS = 0;
   293dc:	e58d304c 	str	r3, [sp, #76]	; 0x4c
   293e0:	e58d3048 	str	r3, [sp, #72]	; 0x48
   293e4:	e58d3044 	str	r3, [sp, #68]	; 0x44
   293e8:	e58d3040 	str	r3, [sp, #64]	; 0x40
   293ec:	e58d303c 	str	r3, [sp, #60]	; 0x3c
                    pRegsCallback(regs);
   293f0:	e59d3004 	ldr	r3, [sp, #4]
   293f4:	e12fff33 	blx	r3
                    LogWrite(_logPrefix, LOG_DEBUG, "ExecAddr8 %04x", regs.PC);
   293f8:	e59d3008 	ldr	r3, [sp, #8]
   293fc:	e59f2104 	ldr	r2, [pc, #260]	; 29508 <McTRS80CmdFormat::proc(void (*)(unsigned long, unsigned char const*, unsigned long), void (*)(Z80Registers const&), unsigned char const*, int)+0x240>
   29400:	e3a01004 	mov	r1, #4
   29404:	e5990000 	ldr	r0, [r9]
   29408:	ebffeb5a 	bl	24178 <LogWrite>
   2940c:	eaffffcf 	b	29350 <McTRS80CmdFormat::proc(void (*)(unsigned long, unsigned char const*, unsigned long), void (*)(Z80Registers const&), unsigned char const*, int)+0x88>
                uint32_t addr = pData[pos] + (((uint32_t)pData[pos+1]) << 8);
   29410:	e0873006 	add	r3, r7, r6
   29414:	e7d70006 	ldrb	r0, [r7, r6]
                if (length < 3)
   29418:	e3540002 	cmp	r4, #2
                uint32_t addr = pData[pos] + (((uint32_t)pData[pos+1]) << 8);
   2941c:	e5d33001 	ldrb	r3, [r3, #1]
                pos+=2;
   29420:	e2816004 	add	r6, r1, #4
                    length += 0xfe;
   29424:	d28440fe 	addle	r4, r4, #254	; 0xfe
                    length -= 2;
   29428:	c2444002 	subgt	r4, r4, #2
                uint32_t addr = pData[pos] + (((uint32_t)pData[pos+1]) << 8);
   2942c:	e0800403 	add	r0, r0, r3, lsl #8
                pDataCallback(addr, pData+pos, length);
   29430:	e1a02004 	mov	r2, r4
   29434:	e0871006 	add	r1, r7, r6
   29438:	e12fff3a 	blx	sl
                break;
   2943c:	eaffffc3 	b	29350 <McTRS80CmdFormat::proc(void (*)(unsigned long, unsigned char const*, unsigned long), void (*)(Z80Registers const&), unsigned char const*, int)+0x88>
                LogWrite(_logPrefix, LOG_DEBUG, "Undecoded block %02x", code);
   29440:	e1a0200b 	mov	r2, fp
   29444:	e3a01004 	mov	r1, #4
   29448:	e5990000 	ldr	r0, [r9]
   2944c:	ebffeb49 	bl	24178 <LogWrite>
                break;
   29450:	eaffffbe 	b	29350 <McTRS80CmdFormat::proc(void (*)(unsigned long, unsigned char const*, unsigned long), void (*)(Z80Registers const&), unsigned char const*, int)+0x88>
                else if (length == 2)
   29454:	e3540002 	cmp	r4, #2
   29458:	1a000020 	bne	294e0 <McTRS80CmdFormat::proc(void (*)(unsigned long, unsigned char const*, unsigned long), void (*)(Z80Registers const&), unsigned char const*, int)+0x218>
        PC = SP = HL = DE = BC = AF = IX = IY = 0;
   2945c:	e3a03000 	mov	r3, #0
                    regs.PC = pData[pos] + (((uint32_t)pData[pos+1]) << 8);
   29460:	e0872006 	add	r2, r7, r6
   29464:	e5d2c001 	ldrb	ip, [r2, #1]
   29468:	e7d72006 	ldrb	r2, [r7, r6]
   2946c:	e28d0050 	add	r0, sp, #80	; 0x50
   29470:	e082240c 	add	r2, r2, ip, lsl #8
   29474:	e58d3024 	str	r3, [sp, #36]	; 0x24
   29478:	e5202048 	str	r2, [r0, #-72]!	; 0xffffffb8
   2947c:	e58d3020 	str	r3, [sp, #32]
   29480:	e58d301c 	str	r3, [sp, #28]
   29484:	e58d3018 	str	r3, [sp, #24]
   29488:	e58d3014 	str	r3, [sp, #20]
   2948c:	e58d3010 	str	r3, [sp, #16]
   29490:	e58d300c 	str	r3, [sp, #12]
        HLDASH = DEDASH = BCDASH = AFDASH = MEMPTR = 0;
   29494:	e58d3038 	str	r3, [sp, #56]	; 0x38
   29498:	e58d3034 	str	r3, [sp, #52]	; 0x34
   2949c:	e58d3030 	str	r3, [sp, #48]	; 0x30
   294a0:	e58d302c 	str	r3, [sp, #44]	; 0x2c
   294a4:	e58d3028 	str	r3, [sp, #40]	; 0x28
        I = R = INTMODE = INTENABLED = VPS = 0;
   294a8:	e58d304c 	str	r3, [sp, #76]	; 0x4c
   294ac:	e58d3048 	str	r3, [sp, #72]	; 0x48
   294b0:	e58d3044 	str	r3, [sp, #68]	; 0x44
   294b4:	e58d3040 	str	r3, [sp, #64]	; 0x40
   294b8:	e58d303c 	str	r3, [sp, #60]	; 0x3c
                    pRegsCallback(regs);
   294bc:	e59d3004 	ldr	r3, [sp, #4]
                    pos+=2;
   294c0:	e2816004 	add	r6, r1, #4
                    pRegsCallback(regs);
   294c4:	e12fff33 	blx	r3
                    LogWrite(_logPrefix, LOG_DEBUG, "ExecAddr16 %04x", regs.PC);
   294c8:	e59d3008 	ldr	r3, [sp, #8]
   294cc:	e59f2038 	ldr	r2, [pc, #56]	; 2950c <McTRS80CmdFormat::proc(void (*)(unsigned long, unsigned char const*, unsigned long), void (*)(Z80Registers const&), unsigned char const*, int)+0x244>
   294d0:	e3a01004 	mov	r1, #4
   294d4:	e5990000 	ldr	r0, [r9]
   294d8:	ebffeb26 	bl	24178 <LogWrite>
   294dc:	eaffff9b 	b	29350 <McTRS80CmdFormat::proc(void (*)(unsigned long, unsigned char const*, unsigned long), void (*)(Z80Registers const&), unsigned char const*, int)+0x88>
                    LogWrite(_logPrefix, LOG_DEBUG, "Error in exec addr");
   294e0:	e59f2028 	ldr	r2, [pc, #40]	; 29510 <McTRS80CmdFormat::proc(void (*)(unsigned long, unsigned char const*, unsigned long), void (*)(Z80Registers const&), unsigned char const*, int)+0x248>
   294e4:	e3a01004 	mov	r1, #4
   294e8:	e5990000 	ldr	r0, [r9]
   294ec:	ebffeb21 	bl	24178 <LogWrite>
   294f0:	eaffff96 	b	29350 <McTRS80CmdFormat::proc(void (*)(unsigned long, unsigned char const*, unsigned long), void (*)(Z80Registers const&), unsigned char const*, int)+0x88>
   294f4:	0006f0dc 	.word	0x0006f0dc
   294f8:	000547cc 	.word	0x000547cc
   294fc:	000547c4 	.word	0x000547c4
   29500:	000547ac 	.word	0x000547ac
   29504:	0005479c 	.word	0x0005479c
   29508:	00054768 	.word	0x00054768
   2950c:	00054778 	.word	0x00054778
   29510:	00054788 	.word	0x00054788

00029514 <srec_init>:
static SrecHandlerDataCallback* __pSrecDataCallback = NULL;
static SrecHandlerAddrCallback* __pSrecAddrCallback = NULL;

void srec_init()
{
    _srec.lineState = SREC_LINE_STATE_INIT;
   29514:	e3a02000 	mov	r2, #0
   29518:	e59f300c 	ldr	r3, [pc, #12]	; 2952c <srec_init+0x18>
   2951c:	e5c32000 	strb	r2, [r3]
    _srec.debugChCount = 0;
   29520:	e58320f8 	str	r2, [r3, #248]	; 0xf8
    _srec.errCode = Srec_Ret_OK;
   29524:	e5c320fc 	strb	r2, [r3, #252]	; 0xfc
}
   29528:	e12fff1e 	bx	lr
   2952c:	00074c60 	.word	0x00074c60

00029530 <chToNybble(int)>:

// Convert char to nybble
uint8_t chToNybble(int ch)
{
    if ((ch < '0') || ((ch > '9') && (ch < 'A')) || ((ch > 'F') && (ch < 'a')) || (ch > 'f')) {
   29530:	e2403030 	sub	r3, r0, #48	; 0x30
   29534:	e3530036 	cmp	r3, #54	; 0x36
   29538:	93a03000 	movls	r3, #0
   2953c:	83a03001 	movhi	r3, #1
   29540:	e240203a 	sub	r2, r0, #58	; 0x3a
   29544:	e3520006 	cmp	r2, #6
   29548:	93833001 	orrls	r3, r3, #1
   2954c:	e3530000 	cmp	r3, #0
   29550:	1a000002 	bne	29560 <chToNybble(int)+0x30>
   29554:	e2403047 	sub	r3, r0, #71	; 0x47
   29558:	e3530019 	cmp	r3, #25
   2955c:	8a000002 	bhi	2956c <chToNybble(int)+0x3c>
        _srec.errCode = Srec_Ret_INVALID_NYBBLE;
   29560:	e3a02005 	mov	r2, #5
   29564:	e59f3010 	ldr	r3, [pc, #16]	; 2957c <chToNybble(int)+0x4c>
   29568:	e5c320fc 	strb	r2, [r3, #252]	; 0xfc
#ifdef DEBUG_SREC_RX
        ee_printf("Nybble invalid %02x count %d\n", ch, _srec.debugChCount);
#endif
    }
    if (ch > '9')
   2956c:	e3500039 	cmp	r0, #57	; 0x39
        ch -= 7;
   29570:	c2400007 	subgt	r0, r0, #7
    return ch & 0xF;
}
   29574:	e200000f 	and	r0, r0, #15
   29578:	e12fff1e 	bx	lr
   2957c:	00074c60 	.word	0x00074c60

00029580 <srec_handle_char(int)>:

// Handle a single char
Srec_Ret srec_handle_char(int ch)
{
   29580:	e92d4010 	push	{r4, lr}
    _srec.debugChCount++;
   29584:	e59f4454 	ldr	r4, [pc, #1108]	; 299e0 <srec_handle_char(int)+0x460>
{
   29588:	e1a03000 	mov	r3, r0
    _srec.debugChCount++;
   2958c:	e59420f8 	ldr	r2, [r4, #248]	; 0xf8
    // Handle based on state
    switch (_srec.lineState) {
   29590:	e5d41000 	ldrb	r1, [r4]
    _srec.debugChCount++;
   29594:	e2822001 	add	r2, r2, #1
   29598:	e58420f8 	str	r2, [r4, #248]	; 0xf8
    switch (_srec.lineState) {
   2959c:	e3510005 	cmp	r1, #5
   295a0:	979ff101 	ldrls	pc, [pc, r1, lsl #2]
   295a4:	ea000045 	b	296c0 <srec_handle_char(int)+0x140>
   295a8:	00029784 	.word	0x00029784
   295ac:	000297a8 	.word	0x000297a8
   295b0:	00029814 	.word	0x00029814
   295b4:	000295c0 	.word	0x000295c0
   295b8:	000298ac 	.word	0x000298ac
   295bc:	000296c8 	.word	0x000296c8
    if ((ch < '0') || ((ch > '9') && (ch < 'A')) || ((ch > 'F') && (ch < 'a')) || (ch > 'f')) {
   295c0:	e2401030 	sub	r1, r0, #48	; 0x30
   295c4:	e3510036 	cmp	r1, #54	; 0x36
   295c8:	93a01000 	movls	r1, #0
   295cc:	83a01001 	movhi	r1, #1
   295d0:	e240203a 	sub	r2, r0, #58	; 0x3a
   295d4:	e3520006 	cmp	r2, #6
   295d8:	93811001 	orrls	r1, r1, #1
        }
        break;
    }
    case SREC_LINE_STATE_ADDR: {
        // Build address from bytes
        _srec.byte = (_srec.byte << 4) + chToNybble(ch);
   295dc:	e5d42028 	ldrb	r2, [r4, #40]	; 0x28
    if ((ch < '0') || ((ch > '9') && (ch < 'A')) || ((ch > 'F') && (ch < 'a')) || (ch > 'f')) {
   295e0:	e3510000 	cmp	r1, #0
        _srec.byte = (_srec.byte << 4) + chToNybble(ch);
   295e4:	e1a02202 	lsl	r2, r2, #4
   295e8:	e6ef2072 	uxtb	r2, r2
    if ((ch < '0') || ((ch > '9') && (ch < 'A')) || ((ch > 'F') && (ch < 'a')) || (ch > 'f')) {
   295ec:	1a000002 	bne	295fc <srec_handle_char(int)+0x7c>
   295f0:	e2401047 	sub	r1, r0, #71	; 0x47
   295f4:	e3510019 	cmp	r1, #25
   295f8:	8a000001 	bhi	29604 <srec_handle_char(int)+0x84>
        _srec.errCode = Srec_Ret_INVALID_NYBBLE;
   295fc:	e3a01005 	mov	r1, #5
   29600:	e5c410fc 	strb	r1, [r4, #252]	; 0xfc
    if (ch > '9')
   29604:	e3530039 	cmp	r3, #57	; 0x39
        ch -= 7;
   29608:	c2433007 	subgt	r3, r3, #7
        _srec.fieldCtr++;
   2960c:	e5941010 	ldr	r1, [r4, #16]
    return ch & 0xF;
   29610:	e203300f 	and	r3, r3, #15
        _srec.byte = (_srec.byte << 4) + chToNybble(ch);
   29614:	e0823003 	add	r3, r2, r3
        _srec.fieldCtr++;
   29618:	e2812001 	add	r2, r1, #1
        _srec.byte = (_srec.byte << 4) + chToNybble(ch);
   2961c:	e6ef3073 	uxtb	r3, r3
        // Address and Checksum
        if (_srec.fieldCtr % 2 == 0) {
   29620:	e212c001 	ands	ip, r2, #1
        _srec.byte = (_srec.byte << 4) + chToNybble(ch);
   29624:	e5c43028 	strb	r3, [r4, #40]	; 0x28
        _srec.fieldCtr++;
   29628:	e5842010 	str	r2, [r4, #16]
        if (_srec.fieldCtr % 2 == 0) {
   2962c:	1a000006 	bne	2964c <srec_handle_char(int)+0xcc>
            _srec.addr = (_srec.addr << 8) + _srec.byte;
   29630:	e5940024 	ldr	r0, [r4, #36]	; 0x24
            _srec.checksum += _srec.byte & 0xff;
   29634:	e5941004 	ldr	r1, [r4, #4]
            _srec.addr = (_srec.addr << 8) + _srec.byte;
   29638:	e0830400 	add	r0, r3, r0, lsl #8
            _srec.checksum += _srec.byte & 0xff;
   2963c:	e0813003 	add	r3, r1, r3
            _srec.byte = 0;
   29640:	e5c4c028 	strb	ip, [r4, #40]	; 0x28
            _srec.addr = (_srec.addr << 8) + _srec.byte;
   29644:	e5840024 	str	r0, [r4, #36]	; 0x24
            _srec.checksum += _srec.byte & 0xff;
   29648:	e5843004 	str	r3, [r4, #4]
        }
        // Done?
        if (_srec.fieldCtr == _srec.addrBytes * 2) {
   2964c:	e594300c 	ldr	r3, [r4, #12]
   29650:	e1520083 	cmp	r2, r3, lsl #1
   29654:	1a000019 	bne	296c0 <srec_handle_char(int)+0x140>
            // Check if entry point record
            if (_srec.recType == SREC_RECTYPE_START) {
   29658:	e5d43001 	ldrb	r3, [r4, #1]
   2965c:	e3530001 	cmp	r3, #1
   29660:	1a000004 	bne	29678 <srec_handle_char(int)+0xf8>
                // Set entry point
                _srec.entryAddr = _srec.addr;
   29664:	e5940024 	ldr	r0, [r4, #36]	; 0x24
                __pSrecAddrCallback(_srec.addr);
   29668:	e5943100 	ldr	r3, [r4, #256]	; 0x100
                _srec.entryAddr = _srec.addr;
   2966c:	e5840008 	str	r0, [r4, #8]
                __pSrecAddrCallback(_srec.addr);
   29670:	e12fff33 	blx	r3
   29674:	e5d43001 	ldrb	r3, [r4, #1]
            }
            // Check if data record
            _srec.dataLen = 0;
   29678:	e3a02000 	mov	r2, #0
            if (_srec.recType == SREC_RECTYPE_DATA)
   2967c:	e1530002 	cmp	r3, r2
            _srec.dataLen = 0;
   29680:	e584201c 	str	r2, [r4, #28]
            if (_srec.recType == SREC_RECTYPE_DATA)
   29684:	1a0000cf 	bne	299c8 <srec_handle_char(int)+0x448>
                _srec.dataLen = _srec.lineLen - (_srec.fieldCtr / 2) - 1;
   29688:	e5942010 	ldr	r2, [r4, #16]
   2968c:	e5943018 	ldr	r3, [r4, #24]
   29690:	e0822fa2 	add	r2, r2, r2, lsr #31
   29694:	e04330c2 	sub	r3, r3, r2, asr #1
   29698:	e2433001 	sub	r3, r3, #1
            // Check for data following
            if (_srec.dataLen > 0) {
   2969c:	e3530000 	cmp	r3, #0
                _srec.dataLen = _srec.lineLen - (_srec.fieldCtr / 2) - 1;
   296a0:	e584301c 	str	r3, [r4, #28]
                _srec.lineState = SREC_LINE_STATE_DATA;
   296a4:	c3a02004 	movgt	r2, #4
            if (_srec.dataLen > 0) {
   296a8:	da0000c6 	ble	299c8 <srec_handle_char(int)+0x448>
            } else {
                // Ready for checksum
                _srec.lineState = SREC_LINE_STATE_CHECKSUM;
            }
            // New field starting
            _srec.byte = 0;
   296ac:	e3a03000 	mov	r3, #0
   296b0:	e5c42000 	strb	r2, [r4]
   296b4:	e5c43028 	strb	r3, [r4, #40]	; 0x28
            _srec.byteIdx = 0;
   296b8:	e5843020 	str	r3, [r4, #32]
            _srec.fieldCtr = 0;
   296bc:	e5843010 	str	r3, [r4, #16]
   296c0:	e5d400fc 	ldrb	r0, [r4, #252]	; 0xfc
   296c4:	e8bd8010 	pop	{r4, pc}
    if ((ch < '0') || ((ch > '9') && (ch < 'A')) || ((ch > 'F') && (ch < 'a')) || (ch > 'f')) {
   296c8:	e2402030 	sub	r2, r0, #48	; 0x30
   296cc:	e3520036 	cmp	r2, #54	; 0x36
   296d0:	93a02000 	movls	r2, #0
   296d4:	83a02001 	movhi	r2, #1
   296d8:	e240103a 	sub	r1, r0, #58	; 0x3a
   296dc:	e3510006 	cmp	r1, #6
   296e0:	93822001 	orrls	r2, r2, #1
        }
        break;
    }
    case SREC_LINE_STATE_CHECKSUM: {
        // Build checksum from nybbles
        _srec.byte = (_srec.byte << 4) + chToNybble(ch);
   296e4:	e5d40028 	ldrb	r0, [r4, #40]	; 0x28
    if ((ch < '0') || ((ch > '9') && (ch < 'A')) || ((ch > 'F') && (ch < 'a')) || (ch > 'f')) {
   296e8:	e3520000 	cmp	r2, #0
        _srec.byte = (_srec.byte << 4) + chToNybble(ch);
   296ec:	e1a00200 	lsl	r0, r0, #4
   296f0:	e6ef0070 	uxtb	r0, r0
    if ((ch < '0') || ((ch > '9') && (ch < 'A')) || ((ch > 'F') && (ch < 'a')) || (ch > 'f')) {
   296f4:	1a000002 	bne	29704 <srec_handle_char(int)+0x184>
   296f8:	e2432047 	sub	r2, r3, #71	; 0x47
   296fc:	e3520019 	cmp	r2, #25
   29700:	8a000001 	bhi	2970c <srec_handle_char(int)+0x18c>
        _srec.errCode = Srec_Ret_INVALID_NYBBLE;
   29704:	e3a02005 	mov	r2, #5
   29708:	e5c420fc 	strb	r2, [r4, #252]	; 0xfc
    if (ch > '9')
   2970c:	e3530039 	cmp	r3, #57	; 0x39
        ch -= 7;
   29710:	c2433007 	subgt	r3, r3, #7
        _srec.fieldCtr++;
   29714:	e5942010 	ldr	r2, [r4, #16]
    return ch & 0xF;
   29718:	e203300f 	and	r3, r3, #15
        _srec.fieldCtr++;
   2971c:	e2822001 	add	r2, r2, #1
        _srec.byte = (_srec.byte << 4) + chToNybble(ch);
   29720:	e0803003 	add	r3, r0, r3
   29724:	e6ef3073 	uxtb	r3, r3
        // Check if done
        if (_srec.fieldCtr == 2) {
   29728:	e3520002 	cmp	r2, #2
        _srec.byte = (_srec.byte << 4) + chToNybble(ch);
   2972c:	e5c43028 	strb	r3, [r4, #40]	; 0x28
        _srec.fieldCtr++;
   29730:	e5842010 	str	r2, [r4, #16]
        if (_srec.fieldCtr == 2) {
   29734:	1affffe1 	bne	296c0 <srec_handle_char(int)+0x140>
            // Go back to initial state
            _srec.lineState = SREC_LINE_STATE_INIT;
            // Check if checksum correct
            if (_srec.byte != ((~_srec.checksum) & 0xff)) {
   29738:	e5942004 	ldr	r2, [r4, #4]
            _srec.lineState = SREC_LINE_STATE_INIT;
   2973c:	e3a01000 	mov	r1, #0
            if (_srec.byte != ((~_srec.checksum) & 0xff)) {
   29740:	e1e02002 	mvn	r2, r2
   29744:	e6ef2072 	uxtb	r2, r2
   29748:	e1530002 	cmp	r3, r2
            _srec.lineState = SREC_LINE_STATE_INIT;
   2974c:	e5c41000 	strb	r1, [r4]
            if (_srec.byte != ((~_srec.checksum) & 0xff)) {
   29750:	1a00009e 	bne	299d0 <srec_handle_char(int)+0x450>
                return Srec_Ret_CHECKSUM_ERROR;
            } else {
                // Callback on new data
                if (_srec.recType == SREC_RECTYPE_DATA)
   29754:	e5d43001 	ldrb	r3, [r4, #1]
   29758:	e1530001 	cmp	r3, r1
   2975c:	1a00009d 	bne	299d8 <srec_handle_char(int)+0x458>
                    if (__pSrecDataCallback)
   29760:	e5943104 	ldr	r3, [r4, #260]	; 0x104
   29764:	e1530001 	cmp	r3, r1
   29768:	0a00009a 	beq	299d8 <srec_handle_char(int)+0x458>
                        __pSrecDataCallback(_srec.addr, _srec.data, _srec.dataLen);
   2976c:	e5940024 	ldr	r0, [r4, #36]	; 0x24
   29770:	e594201c 	ldr	r2, [r4, #28]
   29774:	e59f1268 	ldr	r1, [pc, #616]	; 299e4 <srec_handle_char(int)+0x464>
   29778:	e12fff33 	blx	r3
                return Srec_Ret_LINE_COMPLETE;
   2977c:	e3a00001 	mov	r0, #1
   29780:	e8bd8010 	pop	{r4, pc}
        if (ch == 'S') {
   29784:	e3500053 	cmp	r0, #83	; 0x53
   29788:	1a000076 	bne	29968 <srec_handle_char(int)+0x3e8>
            _srec.checksum = 0;
   2978c:	e3a03000 	mov	r3, #0
            _srec.lineState = SREC_LINE_STATE_RECTYPE;
   29790:	e3a02001 	mov	r2, #1
            _srec.checksum = 0;
   29794:	e5843004 	str	r3, [r4, #4]
            _srec.lastCharInvalid = 0;
   29798:	e58430f4 	str	r3, [r4, #244]	; 0xf4
            _srec.lineState = SREC_LINE_STATE_RECTYPE;
   2979c:	e5c42000 	strb	r2, [r4]
   297a0:	e5d400fc 	ldrb	r0, [r4, #252]	; 0xfc
        break;
   297a4:	e8bd8010 	pop	{r4, pc}
        _srec.fieldCtr = 0;
   297a8:	e3a02000 	mov	r2, #0
        if ((ch & 0x0f) == 8)
   297ac:	e200100f 	and	r1, r0, #15
   297b0:	e3510008 	cmp	r1, #8
        _srec.fieldCtr = 0;
   297b4:	e5842010 	str	r2, [r4, #16]
        _srec.lineLen = 0;
   297b8:	e5842018 	str	r2, [r4, #24]
        _srec.byteCtr = 0;
   297bc:	e5842014 	str	r2, [r4, #20]
            _srec.addrBytes = 3;
   297c0:	03a02003 	moveq	r2, #3
   297c4:	0584200c 	streq	r2, [r4, #12]
        if ((ch & 0x0f) == 8)
   297c8:	0a000004 	beq	297e0 <srec_handle_char(int)+0x260>
        else if ((ch & 0x0f) == 9)
   297cc:	e3510009 	cmp	r1, #9
            _srec.addrBytes = 2;
   297d0:	03a02002 	moveq	r2, #2
        _srec.addrBytes = (ch & 0x03) + 1;
   297d4:	12002003 	andne	r2, r0, #3
   297d8:	12822001 	addne	r2, r2, #1
            _srec.addrBytes = 2;
   297dc:	e584200c 	str	r2, [r4, #12]
        switch (ch) {
   297e0:	e2433031 	sub	r3, r3, #49	; 0x31
   297e4:	e3530008 	cmp	r3, #8
   297e8:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
   297ec:	ea000070 	b	299b4 <srec_handle_char(int)+0x434>
   297f0:	0002999c 	.word	0x0002999c
   297f4:	0002999c 	.word	0x0002999c
   297f8:	0002999c 	.word	0x0002999c
   297fc:	000299b4 	.word	0x000299b4
   29800:	00029988 	.word	0x00029988
   29804:	00029988 	.word	0x00029988
   29808:	00029970 	.word	0x00029970
   2980c:	00029970 	.word	0x00029970
   29810:	00029970 	.word	0x00029970
    if ((ch < '0') || ((ch > '9') && (ch < 'A')) || ((ch > 'F') && (ch < 'a')) || (ch > 'f')) {
   29814:	e2402030 	sub	r2, r0, #48	; 0x30
   29818:	e3520036 	cmp	r2, #54	; 0x36
   2981c:	93a02000 	movls	r2, #0
   29820:	83a02001 	movhi	r2, #1
   29824:	e240103a 	sub	r1, r0, #58	; 0x3a
   29828:	e3510006 	cmp	r1, #6
   2982c:	93822001 	orrls	r2, r2, #1
        _srec.lineLen = (_srec.lineLen << 4) + chToNybble(ch);
   29830:	e5941018 	ldr	r1, [r4, #24]
    if ((ch < '0') || ((ch > '9') && (ch < 'A')) || ((ch > 'F') && (ch < 'a')) || (ch > 'f')) {
   29834:	e3520000 	cmp	r2, #0
        _srec.lineLen = (_srec.lineLen << 4) + chToNybble(ch);
   29838:	e1a01201 	lsl	r1, r1, #4
    if ((ch < '0') || ((ch > '9') && (ch < 'A')) || ((ch > 'F') && (ch < 'a')) || (ch > 'f')) {
   2983c:	1a000003 	bne	29850 <srec_handle_char(int)+0x2d0>
   29840:	e2402047 	sub	r2, r0, #71	; 0x47
   29844:	e3520019 	cmp	r2, #25
   29848:	85d400fc 	ldrbhi	r0, [r4, #252]	; 0xfc
   2984c:	8a000002 	bhi	2985c <srec_handle_char(int)+0x2dc>
        _srec.errCode = Srec_Ret_INVALID_NYBBLE;
   29850:	e3a02005 	mov	r2, #5
   29854:	e1a00002 	mov	r0, r2
   29858:	e5c420fc 	strb	r2, [r4, #252]	; 0xfc
    if (ch > '9')
   2985c:	e3530039 	cmp	r3, #57	; 0x39
        _srec.fieldCtr++;
   29860:	e5942010 	ldr	r2, [r4, #16]
        ch -= 7;
   29864:	c2433007 	subgt	r3, r3, #7
        _srec.fieldCtr++;
   29868:	e2822001 	add	r2, r2, #1
        _srec.lineLen = (_srec.lineLen << 4) + chToNybble(ch);
   2986c:	e203300f 	and	r3, r3, #15
   29870:	e0833001 	add	r3, r3, r1
        if (_srec.fieldCtr == 2) {
   29874:	e3520002 	cmp	r2, #2
        _srec.lineLen = (_srec.lineLen << 4) + chToNybble(ch);
   29878:	e5843018 	str	r3, [r4, #24]
        _srec.fieldCtr++;
   2987c:	e5842010 	str	r2, [r4, #16]
        if (_srec.fieldCtr == 2) {
   29880:	18bd8010 	popne	{r4, pc}
            _srec.fieldCtr = 0;
   29884:	e3a02000 	mov	r2, #0
            _srec.lineState = SREC_LINE_STATE_ADDR;
   29888:	e3a0c003 	mov	ip, #3
            _srec.checksum += _srec.lineLen;
   2988c:	e5941004 	ldr	r1, [r4, #4]
            _srec.fieldCtr = 0;
   29890:	e5842010 	str	r2, [r4, #16]
            _srec.checksum += _srec.lineLen;
   29894:	e0813003 	add	r3, r1, r3
   29898:	e5843004 	str	r3, [r4, #4]
            _srec.addr = 0;
   2989c:	e5842024 	str	r2, [r4, #36]	; 0x24
            _srec.byte = 0;
   298a0:	e5c42028 	strb	r2, [r4, #40]	; 0x28
            _srec.lineState = SREC_LINE_STATE_ADDR;
   298a4:	e5c4c000 	strb	ip, [r4]
   298a8:	e8bd8010 	pop	{r4, pc}
    if ((ch < '0') || ((ch > '9') && (ch < 'A')) || ((ch > 'F') && (ch < 'a')) || (ch > 'f')) {
   298ac:	e2401030 	sub	r1, r0, #48	; 0x30
   298b0:	e3510036 	cmp	r1, #54	; 0x36
   298b4:	93a01000 	movls	r1, #0
   298b8:	83a01001 	movhi	r1, #1
   298bc:	e240203a 	sub	r2, r0, #58	; 0x3a
   298c0:	e3520006 	cmp	r2, #6
   298c4:	93811001 	orrls	r1, r1, #1
        _srec.byte = (_srec.byte << 4) + chToNybble(ch);
   298c8:	e5d42028 	ldrb	r2, [r4, #40]	; 0x28
    if ((ch < '0') || ((ch > '9') && (ch < 'A')) || ((ch > 'F') && (ch < 'a')) || (ch > 'f')) {
   298cc:	e3510000 	cmp	r1, #0
        _srec.byte = (_srec.byte << 4) + chToNybble(ch);
   298d0:	e1a02202 	lsl	r2, r2, #4
   298d4:	e6ef2072 	uxtb	r2, r2
    if ((ch < '0') || ((ch > '9') && (ch < 'A')) || ((ch > 'F') && (ch < 'a')) || (ch > 'f')) {
   298d8:	1a000003 	bne	298ec <srec_handle_char(int)+0x36c>
   298dc:	e2401047 	sub	r1, r0, #71	; 0x47
   298e0:	e3510019 	cmp	r1, #25
   298e4:	85d400fc 	ldrbhi	r0, [r4, #252]	; 0xfc
   298e8:	8a000002 	bhi	298f8 <srec_handle_char(int)+0x378>
        _srec.errCode = Srec_Ret_INVALID_NYBBLE;
   298ec:	e3a01005 	mov	r1, #5
   298f0:	e1a00001 	mov	r0, r1
   298f4:	e5c410fc 	strb	r1, [r4, #252]	; 0xfc
    if (ch > '9')
   298f8:	e3530039 	cmp	r3, #57	; 0x39
        ch -= 7;
   298fc:	c2433007 	subgt	r3, r3, #7
        _srec.fieldCtr++;
   29900:	e5941010 	ldr	r1, [r4, #16]
    return ch & 0xF;
   29904:	e203300f 	and	r3, r3, #15
        _srec.byte = (_srec.byte << 4) + chToNybble(ch);
   29908:	e0823003 	add	r3, r2, r3
        _srec.fieldCtr++;
   2990c:	e2812001 	add	r2, r1, #1
        _srec.byte = (_srec.byte << 4) + chToNybble(ch);
   29910:	e6ef3073 	uxtb	r3, r3
        if (_srec.fieldCtr % 2 == 0) {
   29914:	e3120001 	tst	r2, #1
        _srec.byte = (_srec.byte << 4) + chToNybble(ch);
   29918:	e5c43028 	strb	r3, [r4, #40]	; 0x28
        _srec.fieldCtr++;
   2991c:	e5842010 	str	r2, [r4, #16]
        if (_srec.fieldCtr % 2 == 0) {
   29920:	18bd8010 	popne	{r4, pc}
            if (_srec.byteIdx < MAX_SREC_DATA_LEN) {
   29924:	e5942020 	ldr	r2, [r4, #32]
            _srec.checksum += _srec.byte & 0xff;
   29928:	e5941004 	ldr	r1, [r4, #4]
            if (_srec.byteIdx < MAX_SREC_DATA_LEN) {
   2992c:	e35200c7 	cmp	r2, #199	; 0xc7
            _srec.checksum += _srec.byte & 0xff;
   29930:	e0811003 	add	r1, r1, r3
   29934:	e5841004 	str	r1, [r4, #4]
                _srec.data[_srec.byteIdx] = _srec.byte;
   29938:	d0841002 	addle	r1, r4, r2
   2993c:	d5c13029 	strble	r3, [r1, #41]	; 0x29
            if (_srec.byteIdx >= _srec.dataLen) {
   29940:	e594101c 	ldr	r1, [r4, #28]
            _srec.byteIdx++;
   29944:	e2822001 	add	r2, r2, #1
            if (_srec.byteIdx >= _srec.dataLen) {
   29948:	e1520001 	cmp	r2, r1
            _srec.byte = 0;
   2994c:	e3a03000 	mov	r3, #0
            _srec.byteIdx++;
   29950:	e5842020 	str	r2, [r4, #32]
                _srec.lineState = SREC_LINE_STATE_CHECKSUM;
   29954:	a3a02005 	movge	r2, #5
            _srec.byte = 0;
   29958:	e5c43028 	strb	r3, [r4, #40]	; 0x28
                _srec.fieldCtr = 0;
   2995c:	a5843010 	strge	r3, [r4, #16]
                _srec.lineState = SREC_LINE_STATE_CHECKSUM;
   29960:	a5c42000 	strbge	r2, [r4]
   29964:	e8bd8010 	pop	{r4, pc}
            return Srec_Ret_IGNORED;
   29968:	e3a00002 	mov	r0, #2
   2996c:	e8bd8010 	pop	{r4, pc}
            _srec.recType = SREC_RECTYPE_START;
   29970:	e3a02001 	mov	r2, #1
            _srec.lineState = SREC_LINE_STATE_LEN;
   29974:	e3a03002 	mov	r3, #2
            _srec.recType = SREC_RECTYPE_START;
   29978:	e5c42001 	strb	r2, [r4, #1]
            _srec.lineState = SREC_LINE_STATE_LEN;
   2997c:	e5c43000 	strb	r3, [r4]
   29980:	e5d400fc 	ldrb	r0, [r4, #252]	; 0xfc
            break;
   29984:	e8bd8010 	pop	{r4, pc}
            _srec.recType = SREC_RECTYPE_COUNT;
   29988:	e3a03002 	mov	r3, #2
   2998c:	e5d400fc 	ldrb	r0, [r4, #252]	; 0xfc
   29990:	e5c43001 	strb	r3, [r4, #1]
            _srec.lineState = SREC_LINE_STATE_LEN;
   29994:	e5c43000 	strb	r3, [r4]
            break;
   29998:	e8bd8010 	pop	{r4, pc}
            _srec.recType = SREC_RECTYPE_DATA;
   2999c:	e3a02000 	mov	r2, #0
            _srec.lineState = SREC_LINE_STATE_LEN;
   299a0:	e3a03002 	mov	r3, #2
            _srec.recType = SREC_RECTYPE_DATA;
   299a4:	e5c42001 	strb	r2, [r4, #1]
            _srec.lineState = SREC_LINE_STATE_LEN;
   299a8:	e5c43000 	strb	r3, [r4]
   299ac:	e5d400fc 	ldrb	r0, [r4, #252]	; 0xfc
            break;
   299b0:	e8bd8010 	pop	{r4, pc}
            _srec.lineState = SREC_LINE_STATE_INIT;
   299b4:	e3a03000 	mov	r3, #0
            _srec.errCode = Srec_Ret_INVALID_RECTYPE;
   299b8:	e3a00004 	mov	r0, #4
            _srec.lineState = SREC_LINE_STATE_INIT;
   299bc:	e5c43000 	strb	r3, [r4]
            _srec.errCode = Srec_Ret_INVALID_RECTYPE;
   299c0:	e5c400fc 	strb	r0, [r4, #252]	; 0xfc
            return Srec_Ret_INVALID_RECTYPE;
   299c4:	e8bd8010 	pop	{r4, pc}
                _srec.lineState = SREC_LINE_STATE_CHECKSUM;
   299c8:	e3a02005 	mov	r2, #5
   299cc:	eaffff36 	b	296ac <srec_handle_char(int)+0x12c>
                return Srec_Ret_CHECKSUM_ERROR;
   299d0:	e3a00003 	mov	r0, #3
   299d4:	e8bd8010 	pop	{r4, pc}
                return Srec_Ret_LINE_COMPLETE;
   299d8:	e3a00001 	mov	r0, #1
        }
        break;
    }
    }
    return _srec.errCode;
}
   299dc:	e8bd8010 	pop	{r4, pc}
   299e0:	00074c60 	.word	0x00074c60
   299e4:	00074c89 	.word	0x00074c89

000299e8 <srec_decode>:
    _srec.lineState = SREC_LINE_STATE_INIT;
   299e8:	e3a0c000 	mov	ip, #0


void srec_decode(SrecHandlerDataCallback* pSrecDataCallback, SrecHandlerAddrCallback* pSrecAddrCallback,
			const uint8_t* pData, uint32_t len)
{
   299ec:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
	__pSrecDataCallback = pSrecDataCallback;
   299f0:	e59f44bc 	ldr	r4, [pc, #1212]	; 29eb4 <srec_decode+0x4cc>

	// Init
	srec_init();

	// Send characters to parser
	for (uint32_t i = 0; i < len; i++)
   299f4:	e3530000 	cmp	r3, #0
    _srec.lineState = SREC_LINE_STATE_INIT;
   299f8:	e5c4c000 	strb	ip, [r4]
	__pSrecDataCallback = pSrecDataCallback;
   299fc:	e5840104 	str	r0, [r4, #260]	; 0x104
	__pSrecAddrCallback = pSrecAddrCallback;
   29a00:	e5841100 	str	r1, [r4, #256]	; 0x100
    _srec.debugChCount = 0;
   29a04:	e584c0f8 	str	ip, [r4, #248]	; 0xf8
    _srec.errCode = Srec_Ret_OK;
   29a08:	e5c4c0fc 	strb	ip, [r4, #252]	; 0xfc
	for (uint32_t i = 0; i < len; i++)
   29a0c:	08bd87f0 	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   29a10:	e1a05002 	mov	r5, r2
   29a14:	e1a0100c 	mov	r1, ip
        _srec.errCode = Srec_Ret_INVALID_NYBBLE;
   29a18:	e3a08005 	mov	r8, #5
	for (uint32_t i = 0; i < len; i++)
   29a1c:	e1a0200c 	mov	r2, ip
            _srec.lineState = SREC_LINE_STATE_INIT;
   29a20:	e1a0700c 	mov	r7, ip
   29a24:	e0856003 	add	r6, r5, r3
   29a28:	e2466001 	sub	r6, r6, #1
   29a2c:	e2455001 	sub	r5, r5, #1
                        __pSrecDataCallback(_srec.addr, _srec.data, _srec.dataLen);
   29a30:	e2849029 	add	r9, r4, #41	; 0x29
	{
		srec_handle_char(pData[i]);
   29a34:	e5f53001 	ldrb	r3, [r5, #1]!
    _srec.debugChCount++;
   29a38:	e2822001 	add	r2, r2, #1
   29a3c:	e58420f8 	str	r2, [r4, #248]	; 0xf8
		srec_handle_char(pData[i]);
   29a40:	e1a02003 	mov	r2, r3
    switch (_srec.lineState) {
   29a44:	e3510005 	cmp	r1, #5
   29a48:	979ff101 	ldrls	pc, [pc, r1, lsl #2]
   29a4c:	ea00001c 	b	29ac4 <srec_decode+0xdc>
   29a50:	00029cc8 	.word	0x00029cc8
   29a54:	00029cec 	.word	0x00029cec
   29a58:	00029c48 	.word	0x00029c48
   29a5c:	00029b78 	.word	0x00029b78
   29a60:	00029ad8 	.word	0x00029ad8
   29a64:	00029a68 	.word	0x00029a68
    if ((ch < '0') || ((ch > '9') && (ch < 'A')) || ((ch > 'F') && (ch < 'a')) || (ch > 'f')) {
   29a68:	e353002f 	cmp	r3, #47	; 0x2f
   29a6c:	c3a00000 	movgt	r0, #0
   29a70:	d3a00001 	movle	r0, #1
   29a74:	e243103a 	sub	r1, r3, #58	; 0x3a
   29a78:	e3510006 	cmp	r1, #6
   29a7c:	93800001 	orrls	r0, r0, #1
        _srec.byte = (_srec.byte << 4) + chToNybble(ch);
   29a80:	e5d41028 	ldrb	r1, [r4, #40]	; 0x28
    if ((ch < '0') || ((ch > '9') && (ch < 'A')) || ((ch > 'F') && (ch < 'a')) || (ch > 'f')) {
   29a84:	e3500000 	cmp	r0, #0
        _srec.byte = (_srec.byte << 4) + chToNybble(ch);
   29a88:	e1a01201 	lsl	r1, r1, #4
   29a8c:	e6ef1071 	uxtb	r1, r1
    if ((ch < '0') || ((ch > '9') && (ch < 'A')) || ((ch > 'F') && (ch < 'a')) || (ch > 'f')) {
   29a90:	0a0000ca 	beq	29dc0 <srec_decode+0x3d8>
        _srec.errCode = Srec_Ret_INVALID_NYBBLE;
   29a94:	e5c480fc 	strb	r8, [r4, #252]	; 0xfc
    if (ch > '9')
   29a98:	e3530039 	cmp	r3, #57	; 0x39
        ch -= 7;
   29a9c:	c2432007 	subgt	r2, r3, #7
        _srec.fieldCtr++;
   29aa0:	e5943010 	ldr	r3, [r4, #16]
    return ch & 0xF;
   29aa4:	e202200f 	and	r2, r2, #15
        _srec.fieldCtr++;
   29aa8:	e2833001 	add	r3, r3, #1
        _srec.byte = (_srec.byte << 4) + chToNybble(ch);
   29aac:	e0812002 	add	r2, r1, r2
   29ab0:	e6ef2072 	uxtb	r2, r2
        if (_srec.fieldCtr == 2) {
   29ab4:	e3530002 	cmp	r3, #2
        _srec.byte = (_srec.byte << 4) + chToNybble(ch);
   29ab8:	e5c42028 	strb	r2, [r4, #40]	; 0x28
        _srec.fieldCtr++;
   29abc:	e5843010 	str	r3, [r4, #16]
        if (_srec.fieldCtr == 2) {
   29ac0:	0a0000c7 	beq	29de4 <srec_decode+0x3fc>
	for (uint32_t i = 0; i < len; i++)
   29ac4:	e1550006 	cmp	r5, r6
   29ac8:	08bd87f0 	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   29acc:	e59420f8 	ldr	r2, [r4, #248]	; 0xf8
   29ad0:	e5d41000 	ldrb	r1, [r4]
   29ad4:	eaffffd6 	b	29a34 <srec_decode+0x4c>
    if ((ch < '0') || ((ch > '9') && (ch < 'A')) || ((ch > 'F') && (ch < 'a')) || (ch > 'f')) {
   29ad8:	e353002f 	cmp	r3, #47	; 0x2f
   29adc:	c3a00000 	movgt	r0, #0
   29ae0:	d3a00001 	movle	r0, #1
   29ae4:	e243103a 	sub	r1, r3, #58	; 0x3a
   29ae8:	e3510006 	cmp	r1, #6
   29aec:	93800001 	orrls	r0, r0, #1
        _srec.byte = (_srec.byte << 4) + chToNybble(ch);
   29af0:	e5d41028 	ldrb	r1, [r4, #40]	; 0x28
    if ((ch < '0') || ((ch > '9') && (ch < 'A')) || ((ch > 'F') && (ch < 'a')) || (ch > 'f')) {
   29af4:	e3500000 	cmp	r0, #0
        _srec.byte = (_srec.byte << 4) + chToNybble(ch);
   29af8:	e1a01201 	lsl	r1, r1, #4
   29afc:	e6ef1071 	uxtb	r1, r1
    if ((ch < '0') || ((ch > '9') && (ch < 'A')) || ((ch > 'F') && (ch < 'a')) || (ch > 'f')) {
   29b00:	0a0000a5 	beq	29d9c <srec_decode+0x3b4>
        _srec.errCode = Srec_Ret_INVALID_NYBBLE;
   29b04:	e5c480fc 	strb	r8, [r4, #252]	; 0xfc
    if (ch > '9')
   29b08:	e3530039 	cmp	r3, #57	; 0x39
        ch -= 7;
   29b0c:	c2432007 	subgt	r2, r3, #7
        _srec.fieldCtr++;
   29b10:	e5943010 	ldr	r3, [r4, #16]
    return ch & 0xF;
   29b14:	e202200f 	and	r2, r2, #15
        _srec.fieldCtr++;
   29b18:	e2833001 	add	r3, r3, #1
        _srec.byte = (_srec.byte << 4) + chToNybble(ch);
   29b1c:	e0812002 	add	r2, r1, r2
   29b20:	e6ef2072 	uxtb	r2, r2
        if (_srec.fieldCtr % 2 == 0) {
   29b24:	e3130001 	tst	r3, #1
        _srec.byte = (_srec.byte << 4) + chToNybble(ch);
   29b28:	e5c42028 	strb	r2, [r4, #40]	; 0x28
        _srec.fieldCtr++;
   29b2c:	e5843010 	str	r3, [r4, #16]
        if (_srec.fieldCtr % 2 == 0) {
   29b30:	1affffe3 	bne	29ac4 <srec_decode+0xdc>
            if (_srec.byteIdx < MAX_SREC_DATA_LEN) {
   29b34:	e5943020 	ldr	r3, [r4, #32]
            _srec.checksum += _srec.byte & 0xff;
   29b38:	e5941004 	ldr	r1, [r4, #4]
            if (_srec.byteIdx < MAX_SREC_DATA_LEN) {
   29b3c:	e35300c7 	cmp	r3, #199	; 0xc7
            _srec.checksum += _srec.byte & 0xff;
   29b40:	e0811002 	add	r1, r1, r2
   29b44:	e5841004 	str	r1, [r4, #4]
                _srec.data[_srec.byteIdx] = _srec.byte;
   29b48:	d0841003 	addle	r1, r4, r3
   29b4c:	d5c12029 	strble	r2, [r1, #41]	; 0x29
            if (_srec.byteIdx >= _srec.dataLen) {
   29b50:	e594201c 	ldr	r2, [r4, #28]
            _srec.byteIdx++;
   29b54:	e2833001 	add	r3, r3, #1
            if (_srec.byteIdx >= _srec.dataLen) {
   29b58:	e1530002 	cmp	r3, r2
                _srec.lineState = SREC_LINE_STATE_CHECKSUM;
   29b5c:	a5c48000 	strbge	r8, [r4]
                _srec.fieldCtr = 0;
   29b60:	a5847010 	strge	r7, [r4, #16]
	for (uint32_t i = 0; i < len; i++)
   29b64:	e1550006 	cmp	r5, r6
            _srec.byteIdx++;
   29b68:	e5843020 	str	r3, [r4, #32]
            _srec.byte = 0;
   29b6c:	e5c47028 	strb	r7, [r4, #40]	; 0x28
	for (uint32_t i = 0; i < len; i++)
   29b70:	1affffd5 	bne	29acc <srec_decode+0xe4>
   29b74:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    if ((ch < '0') || ((ch > '9') && (ch < 'A')) || ((ch > 'F') && (ch < 'a')) || (ch > 'f')) {
   29b78:	e353002f 	cmp	r3, #47	; 0x2f
   29b7c:	c3a00000 	movgt	r0, #0
   29b80:	d3a00001 	movle	r0, #1
   29b84:	e243103a 	sub	r1, r3, #58	; 0x3a
   29b88:	e3510006 	cmp	r1, #6
   29b8c:	93800001 	orrls	r0, r0, #1
        _srec.byte = (_srec.byte << 4) + chToNybble(ch);
   29b90:	e5d41028 	ldrb	r1, [r4, #40]	; 0x28
    if ((ch < '0') || ((ch > '9') && (ch < 'A')) || ((ch > 'F') && (ch < 'a')) || (ch > 'f')) {
   29b94:	e3500000 	cmp	r0, #0
        _srec.byte = (_srec.byte << 4) + chToNybble(ch);
   29b98:	e1a01201 	lsl	r1, r1, #4
   29b9c:	e6ef1071 	uxtb	r1, r1
    if ((ch < '0') || ((ch > '9') && (ch < 'A')) || ((ch > 'F') && (ch < 'a')) || (ch > 'f')) {
   29ba0:	0a000074 	beq	29d78 <srec_decode+0x390>
        _srec.errCode = Srec_Ret_INVALID_NYBBLE;
   29ba4:	e5c480fc 	strb	r8, [r4, #252]	; 0xfc
    if (ch > '9')
   29ba8:	e3530039 	cmp	r3, #57	; 0x39
        ch -= 7;
   29bac:	c2432007 	subgt	r2, r3, #7
        _srec.fieldCtr++;
   29bb0:	e5943010 	ldr	r3, [r4, #16]
    return ch & 0xF;
   29bb4:	e202200f 	and	r2, r2, #15
        _srec.fieldCtr++;
   29bb8:	e2833001 	add	r3, r3, #1
        _srec.byte = (_srec.byte << 4) + chToNybble(ch);
   29bbc:	e0812002 	add	r2, r1, r2
   29bc0:	e6ef2072 	uxtb	r2, r2
        if (_srec.fieldCtr % 2 == 0) {
   29bc4:	e213c001 	ands	ip, r3, #1
        _srec.byte = (_srec.byte << 4) + chToNybble(ch);
   29bc8:	e5c42028 	strb	r2, [r4, #40]	; 0x28
        _srec.fieldCtr++;
   29bcc:	e5843010 	str	r3, [r4, #16]
        if (_srec.fieldCtr % 2 == 0) {
   29bd0:	1a000006 	bne	29bf0 <srec_decode+0x208>
            _srec.addr = (_srec.addr << 8) + _srec.byte;
   29bd4:	e5940024 	ldr	r0, [r4, #36]	; 0x24
            _srec.checksum += _srec.byte & 0xff;
   29bd8:	e5941004 	ldr	r1, [r4, #4]
            _srec.addr = (_srec.addr << 8) + _srec.byte;
   29bdc:	e0820400 	add	r0, r2, r0, lsl #8
            _srec.checksum += _srec.byte & 0xff;
   29be0:	e0812002 	add	r2, r1, r2
            _srec.byte = 0;
   29be4:	e5c4c028 	strb	ip, [r4, #40]	; 0x28
            _srec.addr = (_srec.addr << 8) + _srec.byte;
   29be8:	e5840024 	str	r0, [r4, #36]	; 0x24
            _srec.checksum += _srec.byte & 0xff;
   29bec:	e5842004 	str	r2, [r4, #4]
        if (_srec.fieldCtr == _srec.addrBytes * 2) {
   29bf0:	e594200c 	ldr	r2, [r4, #12]
   29bf4:	e1530082 	cmp	r3, r2, lsl #1
   29bf8:	1affffb1 	bne	29ac4 <srec_decode+0xdc>
            if (_srec.recType == SREC_RECTYPE_START) {
   29bfc:	e5d43001 	ldrb	r3, [r4, #1]
   29c00:	e3530001 	cmp	r3, #1
   29c04:	1a000004 	bne	29c1c <srec_decode+0x234>
                _srec.entryAddr = _srec.addr;
   29c08:	e5940024 	ldr	r0, [r4, #36]	; 0x24
                __pSrecAddrCallback(_srec.addr);
   29c0c:	e5943100 	ldr	r3, [r4, #256]	; 0x100
                _srec.entryAddr = _srec.addr;
   29c10:	e5840008 	str	r0, [r4, #8]
                __pSrecAddrCallback(_srec.addr);
   29c14:	e12fff33 	blx	r3
   29c18:	e5d43001 	ldrb	r3, [r4, #1]
            if (_srec.recType == SREC_RECTYPE_DATA)
   29c1c:	e3530000 	cmp	r3, #0
            _srec.dataLen = 0;
   29c20:	e584701c 	str	r7, [r4, #28]
            if (_srec.recType == SREC_RECTYPE_DATA)
   29c24:	0a000098 	beq	29e8c <srec_decode+0x4a4>
                _srec.lineState = SREC_LINE_STATE_CHECKSUM;
   29c28:	e3a03005 	mov	r3, #5
	for (uint32_t i = 0; i < len; i++)
   29c2c:	e1550006 	cmp	r5, r6
   29c30:	e5c43000 	strb	r3, [r4]
            _srec.byte = 0;
   29c34:	e5c47028 	strb	r7, [r4, #40]	; 0x28
            _srec.byteIdx = 0;
   29c38:	e5847020 	str	r7, [r4, #32]
            _srec.fieldCtr = 0;
   29c3c:	e5847010 	str	r7, [r4, #16]
	for (uint32_t i = 0; i < len; i++)
   29c40:	1affffa1 	bne	29acc <srec_decode+0xe4>
   29c44:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    if ((ch < '0') || ((ch > '9') && (ch < 'A')) || ((ch > 'F') && (ch < 'a')) || (ch > 'f')) {
   29c48:	e353002f 	cmp	r3, #47	; 0x2f
   29c4c:	c3a00000 	movgt	r0, #0
   29c50:	d3a00001 	movle	r0, #1
   29c54:	e243103a 	sub	r1, r3, #58	; 0x3a
   29c58:	e3510006 	cmp	r1, #6
   29c5c:	93800001 	orrls	r0, r0, #1
        _srec.lineLen = (_srec.lineLen << 4) + chToNybble(ch);
   29c60:	e5941018 	ldr	r1, [r4, #24]
    if ((ch < '0') || ((ch > '9') && (ch < 'A')) || ((ch > 'F') && (ch < 'a')) || (ch > 'f')) {
   29c64:	e3500000 	cmp	r0, #0
        _srec.lineLen = (_srec.lineLen << 4) + chToNybble(ch);
   29c68:	e1a01201 	lsl	r1, r1, #4
    if ((ch < '0') || ((ch > '9') && (ch < 'A')) || ((ch > 'F') && (ch < 'a')) || (ch > 'f')) {
   29c6c:	0a000038 	beq	29d54 <srec_decode+0x36c>
        _srec.errCode = Srec_Ret_INVALID_NYBBLE;
   29c70:	e5c480fc 	strb	r8, [r4, #252]	; 0xfc
    if (ch > '9')
   29c74:	e3530039 	cmp	r3, #57	; 0x39
        ch -= 7;
   29c78:	c2432007 	subgt	r2, r3, #7
        _srec.fieldCtr++;
   29c7c:	e5943010 	ldr	r3, [r4, #16]
        _srec.lineLen = (_srec.lineLen << 4) + chToNybble(ch);
   29c80:	e202200f 	and	r2, r2, #15
        _srec.fieldCtr++;
   29c84:	e2833001 	add	r3, r3, #1
        _srec.lineLen = (_srec.lineLen << 4) + chToNybble(ch);
   29c88:	e0822001 	add	r2, r2, r1
        if (_srec.fieldCtr == 2) {
   29c8c:	e3530002 	cmp	r3, #2
        _srec.lineLen = (_srec.lineLen << 4) + chToNybble(ch);
   29c90:	e5842018 	str	r2, [r4, #24]
        _srec.fieldCtr++;
   29c94:	e5843010 	str	r3, [r4, #16]
        if (_srec.fieldCtr == 2) {
   29c98:	1affff89 	bne	29ac4 <srec_decode+0xdc>
            _srec.lineState = SREC_LINE_STATE_ADDR;
   29c9c:	e3a01003 	mov	r1, #3
            _srec.checksum += _srec.lineLen;
   29ca0:	e5943004 	ldr	r3, [r4, #4]
	for (uint32_t i = 0; i < len; i++)
   29ca4:	e1550006 	cmp	r5, r6
            _srec.checksum += _srec.lineLen;
   29ca8:	e0832002 	add	r2, r3, r2
            _srec.fieldCtr = 0;
   29cac:	e5847010 	str	r7, [r4, #16]
            _srec.addr = 0;
   29cb0:	e5847024 	str	r7, [r4, #36]	; 0x24
            _srec.byte = 0;
   29cb4:	e5c47028 	strb	r7, [r4, #40]	; 0x28
            _srec.checksum += _srec.lineLen;
   29cb8:	e5842004 	str	r2, [r4, #4]
            _srec.lineState = SREC_LINE_STATE_ADDR;
   29cbc:	e5c41000 	strb	r1, [r4]
	for (uint32_t i = 0; i < len; i++)
   29cc0:	1affff81 	bne	29acc <srec_decode+0xe4>
   29cc4:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
        if (ch == 'S') {
   29cc8:	e3530053 	cmp	r3, #83	; 0x53
   29ccc:	1affff7c 	bne	29ac4 <srec_decode+0xdc>
            _srec.lineState = SREC_LINE_STATE_RECTYPE;
   29cd0:	e3a03001 	mov	r3, #1
	for (uint32_t i = 0; i < len; i++)
   29cd4:	e1550006 	cmp	r5, r6
            _srec.checksum = 0;
   29cd8:	e5847004 	str	r7, [r4, #4]
            _srec.lastCharInvalid = 0;
   29cdc:	e58470f4 	str	r7, [r4, #244]	; 0xf4
            _srec.lineState = SREC_LINE_STATE_RECTYPE;
   29ce0:	e5c43000 	strb	r3, [r4]
	for (uint32_t i = 0; i < len; i++)
   29ce4:	1affff78 	bne	29acc <srec_decode+0xe4>
   29ce8:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   29cec:	e203200f 	and	r2, r3, #15
        if ((ch & 0x0f) == 8)
   29cf0:	e3520008 	cmp	r2, #8
            _srec.addrBytes = 3;
   29cf4:	03a02003 	moveq	r2, #3
        _srec.fieldCtr = 0;
   29cf8:	e5847010 	str	r7, [r4, #16]
        _srec.lineLen = 0;
   29cfc:	e5847018 	str	r7, [r4, #24]
        _srec.byteCtr = 0;
   29d00:	e5847014 	str	r7, [r4, #20]
            _srec.addrBytes = 3;
   29d04:	0584200c 	streq	r2, [r4, #12]
        if ((ch & 0x0f) == 8)
   29d08:	0a000004 	beq	29d20 <srec_decode+0x338>
        else if ((ch & 0x0f) == 9)
   29d0c:	e3520009 	cmp	r2, #9
            _srec.addrBytes = 2;
   29d10:	03a02002 	moveq	r2, #2
        _srec.addrBytes = (ch & 0x03) + 1;
   29d14:	12032003 	andne	r2, r3, #3
   29d18:	12822001 	addne	r2, r2, #1
            _srec.addrBytes = 2;
   29d1c:	e584200c 	str	r2, [r4, #12]
        switch (ch) {
   29d20:	e2433031 	sub	r3, r3, #49	; 0x31
   29d24:	e3530008 	cmp	r3, #8
   29d28:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
   29d2c:	ea000050 	b	29e74 <srec_decode+0x48c>
   29d30:	00029e5c 	.word	0x00029e5c
   29d34:	00029e5c 	.word	0x00029e5c
   29d38:	00029e5c 	.word	0x00029e5c
   29d3c:	00029e74 	.word	0x00029e74
   29d40:	00029e44 	.word	0x00029e44
   29d44:	00029e44 	.word	0x00029e44
   29d48:	00029e28 	.word	0x00029e28
   29d4c:	00029e28 	.word	0x00029e28
   29d50:	00029e28 	.word	0x00029e28
    if ((ch < '0') || ((ch > '9') && (ch < 'A')) || ((ch > 'F') && (ch < 'a')) || (ch > 'f')) {
   29d54:	e3530066 	cmp	r3, #102	; 0x66
   29d58:	d3a00000 	movle	r0, #0
   29d5c:	c3a00001 	movgt	r0, #1
   29d60:	e243c047 	sub	ip, r3, #71	; 0x47
   29d64:	e35c0019 	cmp	ip, #25
   29d68:	93800001 	orrls	r0, r0, #1
   29d6c:	e3500000 	cmp	r0, #0
   29d70:	1affffbe 	bne	29c70 <srec_decode+0x288>
   29d74:	eaffffbe 	b	29c74 <srec_decode+0x28c>
   29d78:	e3530066 	cmp	r3, #102	; 0x66
   29d7c:	d3a00000 	movle	r0, #0
   29d80:	c3a00001 	movgt	r0, #1
   29d84:	e243c047 	sub	ip, r3, #71	; 0x47
   29d88:	e35c0019 	cmp	ip, #25
   29d8c:	93800001 	orrls	r0, r0, #1
   29d90:	e3500000 	cmp	r0, #0
   29d94:	1affff82 	bne	29ba4 <srec_decode+0x1bc>
   29d98:	eaffff82 	b	29ba8 <srec_decode+0x1c0>
   29d9c:	e3530066 	cmp	r3, #102	; 0x66
   29da0:	d3a00000 	movle	r0, #0
   29da4:	c3a00001 	movgt	r0, #1
   29da8:	e243c047 	sub	ip, r3, #71	; 0x47
   29dac:	e35c0019 	cmp	ip, #25
   29db0:	93800001 	orrls	r0, r0, #1
   29db4:	e3500000 	cmp	r0, #0
   29db8:	1affff51 	bne	29b04 <srec_decode+0x11c>
   29dbc:	eaffff51 	b	29b08 <srec_decode+0x120>
   29dc0:	e3530066 	cmp	r3, #102	; 0x66
   29dc4:	d3a00000 	movle	r0, #0
   29dc8:	c3a00001 	movgt	r0, #1
   29dcc:	e243c047 	sub	ip, r3, #71	; 0x47
   29dd0:	e35c0019 	cmp	ip, #25
   29dd4:	93800001 	orrls	r0, r0, #1
   29dd8:	e3500000 	cmp	r0, #0
   29ddc:	1affff2c 	bne	29a94 <srec_decode+0xac>
   29de0:	eaffff2c 	b	29a98 <srec_decode+0xb0>
            if (_srec.byte != ((~_srec.checksum) & 0xff)) {
   29de4:	e5943004 	ldr	r3, [r4, #4]
            _srec.lineState = SREC_LINE_STATE_INIT;
   29de8:	e5c47000 	strb	r7, [r4]
            if (_srec.byte != ((~_srec.checksum) & 0xff)) {
   29dec:	e1e03003 	mvn	r3, r3
   29df0:	e6ef3073 	uxtb	r3, r3
   29df4:	e1520003 	cmp	r2, r3
   29df8:	1affff31 	bne	29ac4 <srec_decode+0xdc>
                if (_srec.recType == SREC_RECTYPE_DATA)
   29dfc:	e5d43001 	ldrb	r3, [r4, #1]
   29e00:	e3530000 	cmp	r3, #0
   29e04:	1affff2e 	bne	29ac4 <srec_decode+0xdc>
                    if (__pSrecDataCallback)
   29e08:	e5943104 	ldr	r3, [r4, #260]	; 0x104
   29e0c:	e3530000 	cmp	r3, #0
   29e10:	0affff2b 	beq	29ac4 <srec_decode+0xdc>
                        __pSrecDataCallback(_srec.addr, _srec.data, _srec.dataLen);
   29e14:	e594201c 	ldr	r2, [r4, #28]
   29e18:	e1a01009 	mov	r1, r9
   29e1c:	e5940024 	ldr	r0, [r4, #36]	; 0x24
   29e20:	e12fff33 	blx	r3
   29e24:	eaffff26 	b	29ac4 <srec_decode+0xdc>
            _srec.recType = SREC_RECTYPE_START;
   29e28:	e3a02001 	mov	r2, #1
            _srec.lineState = SREC_LINE_STATE_LEN;
   29e2c:	e3a03002 	mov	r3, #2
	for (uint32_t i = 0; i < len; i++)
   29e30:	e1550006 	cmp	r5, r6
            _srec.recType = SREC_RECTYPE_START;
   29e34:	e5c42001 	strb	r2, [r4, #1]
            _srec.lineState = SREC_LINE_STATE_LEN;
   29e38:	e5c43000 	strb	r3, [r4]
	for (uint32_t i = 0; i < len; i++)
   29e3c:	1affff22 	bne	29acc <srec_decode+0xe4>
   29e40:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
            _srec.recType = SREC_RECTYPE_COUNT;
   29e44:	e3a03002 	mov	r3, #2
	for (uint32_t i = 0; i < len; i++)
   29e48:	e1550006 	cmp	r5, r6
            _srec.recType = SREC_RECTYPE_COUNT;
   29e4c:	e5c43001 	strb	r3, [r4, #1]
            _srec.lineState = SREC_LINE_STATE_LEN;
   29e50:	e5c43000 	strb	r3, [r4]
	for (uint32_t i = 0; i < len; i++)
   29e54:	1affff1c 	bne	29acc <srec_decode+0xe4>
   29e58:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
            _srec.lineState = SREC_LINE_STATE_LEN;
   29e5c:	e3a03002 	mov	r3, #2
	for (uint32_t i = 0; i < len; i++)
   29e60:	e1550006 	cmp	r5, r6
            _srec.recType = SREC_RECTYPE_DATA;
   29e64:	e5c47001 	strb	r7, [r4, #1]
            _srec.lineState = SREC_LINE_STATE_LEN;
   29e68:	e5c43000 	strb	r3, [r4]
	for (uint32_t i = 0; i < len; i++)
   29e6c:	1affff16 	bne	29acc <srec_decode+0xe4>
   29e70:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
            _srec.errCode = Srec_Ret_INVALID_RECTYPE;
   29e74:	e3a03004 	mov	r3, #4
	for (uint32_t i = 0; i < len; i++)
   29e78:	e1550006 	cmp	r5, r6
            _srec.lineState = SREC_LINE_STATE_INIT;
   29e7c:	e5c47000 	strb	r7, [r4]
            _srec.errCode = Srec_Ret_INVALID_RECTYPE;
   29e80:	e5c430fc 	strb	r3, [r4, #252]	; 0xfc
	for (uint32_t i = 0; i < len; i++)
   29e84:	1affff10 	bne	29acc <srec_decode+0xe4>
   29e88:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
                _srec.dataLen = _srec.lineLen - (_srec.fieldCtr / 2) - 1;
   29e8c:	e5942010 	ldr	r2, [r4, #16]
   29e90:	e5943018 	ldr	r3, [r4, #24]
   29e94:	e0822fa2 	add	r2, r2, r2, lsr #31
   29e98:	e04330c2 	sub	r3, r3, r2, asr #1
   29e9c:	e2433001 	sub	r3, r3, #1
            if (_srec.dataLen > 0) {
   29ea0:	e3530000 	cmp	r3, #0
                _srec.dataLen = _srec.lineLen - (_srec.fieldCtr / 2) - 1;
   29ea4:	e584301c 	str	r3, [r4, #28]
                _srec.lineState = SREC_LINE_STATE_DATA;
   29ea8:	c3a03004 	movgt	r3, #4
            if (_srec.dataLen > 0) {
   29eac:	caffff5e 	bgt	29c2c <srec_decode+0x244>
   29eb0:	eaffff5c 	b	29c28 <srec_decode+0x240>
   29eb4:	00074c60 	.word	0x00074c60

00029eb8 <Hw512KRamRom::setMemoryEmulationMode(bool)>:
}

// Page out RAM/ROM due to emulation
void Hw512KRamRom::setMemoryEmulationMode(bool pageOut)
{
    _memoryEmulationMode = pageOut;
   29eb8:	e5c0100c 	strb	r1, [r0, #12]
}
   29ebc:	e12fff1e 	bx	lr

00029ec0 <Hw512KRamRom::handleMemOrIOReq(unsigned long, unsigned long, unsigned long, unsigned long&)>:
// Handle a request for memory or IO - or possibly something like in interrupt vector in Z80
void Hw512KRamRom::handleMemOrIOReq([[maybe_unused]] uint32_t addr, [[maybe_unused]] uint32_t data, 
            [[maybe_unused]] uint32_t flags, [[maybe_unused]] uint32_t& retVal)
{
    // Check for address range used by this card
    if (_pagingEnabled && ((addr & 0xff) >= Hw512KRamRom_BASE_ADDR) && ((addr & 0xff) < Hw512KRamRom_BASE_ADDR + NUM_BANKS))
   29ec0:	e5d0c00d 	ldrb	ip, [r0, #13]
   29ec4:	e6ef1071 	uxtb	r1, r1
   29ec8:	e35c0000 	cmp	ip, #0
   29ecc:	0a000002 	beq	29edc <Hw512KRamRom::handleMemOrIOReq(unsigned long, unsigned long, unsigned long, unsigned long&)+0x1c>
   29ed0:	e241c078 	sub	ip, r1, #120	; 0x78
   29ed4:	e35c0003 	cmp	ip, #3
   29ed8:	9a000005 	bls	29ef4 <Hw512KRamRom::handleMemOrIOReq(unsigned long, unsigned long, unsigned long, unsigned long&)+0x34>
            _bankRegisters[(addr & 0xff) - Hw512KRamRom_BASE_ADDR] = data;
            //TODO
            // ISR_VALUE(ISR_ASSERT_CODE_DEBUG_B + (addr & 0xff) - Hw512KRamRom_BASE_ADDR, data);
        }
    }
    else if ((addr & 0xff) == Hw512KRamRom_PAGE_ENABLE)
   29edc:	e351007c 	cmp	r1, #124	; 0x7c
   29ee0:	112fff1e 	bxne	lr
    {
        if (flags & BR_CTRL_BUS_WR_MASK)
   29ee4:	e3130002 	tst	r3, #2
        {
            _pagingEnabled = ((data & 0x01) != 0);
   29ee8:	12022001 	andne	r2, r2, #1
   29eec:	15c0200d 	strbne	r2, [r0, #13]
        }
    }
   29ef0:	e12fff1e 	bx	lr
        if(flags & BR_CTRL_BUS_WR_MASK)
   29ef4:	e3130002 	tst	r3, #2
            _bankRegisters[(addr & 0xff) - Hw512KRamRom_BASE_ADDR] = data;
   29ef8:	1080000c 	addne	r0, r0, ip
   29efc:	15c0200e 	strbne	r2, [r0, #14]
   29f00:	e12fff1e 	bx	lr

00029f04 <Hw512KRamRom::pageOutForInjection(bool)>:
    if (!_pagingEnabled)
   29f04:	e5d0300d 	ldrb	r3, [r0, #13]
   29f08:	e3530000 	cmp	r3, #0
   29f0c:	012fff1e 	bxeq	lr
        BusAccess::blockWrite(Hw512KRamRom_BASE_ADDR, _pageOutAllBanks,
   29f10:	e3a02001 	mov	r2, #1
{
   29f14:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    if (pageOut)
   29f18:	e3510000 	cmp	r1, #0
{
   29f1c:	e24dd00c 	sub	sp, sp, #12
   29f20:	e1a03001 	mov	r3, r1
        BusAccess::blockWrite(Hw512KRamRom_BASE_ADDR, _pageOutAllBanks,
   29f24:	158d2000 	strne	r2, [sp]
        BusAccess::blockWrite(Hw512KRamRom_BASE_ADDR, _bankRegisters,
   29f28:	0280100e 	addeq	r1, r0, #14
   29f2c:	058d2000 	streq	r2, [sp]
        BusAccess::blockWrite(Hw512KRamRom_BASE_ADDR, _pageOutAllBanks,
   29f30:	13a03000 	movne	r3, #0
   29f34:	13a02004 	movne	r2, #4
   29f38:	159f1010 	ldrne	r1, [pc, #16]	; 29f50 <Hw512KRamRom::pageOutForInjection(bool)+0x4c>
        BusAccess::blockWrite(Hw512KRamRom_BASE_ADDR, _bankRegisters,
   29f3c:	03a02004 	moveq	r2, #4
   29f40:	e3a00078 	mov	r0, #120	; 0x78
   29f44:	eb003ca0 	bl	391cc <BusAccess::blockWrite(unsigned long, unsigned char const*, unsigned long, bool, bool)>
}
   29f48:	e28dd00c 	add	sp, sp, #12
   29f4c:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
   29f50:	0006f0ec 	.word	0x0006f0ec

00029f54 <Hw512KRamRom::handleBusActionComplete(BR_BUS_ACTION, BR_BUS_ACTION_REASON)>:
{
   29f54:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    switch(actionType)
   29f58:	e3510007 	cmp	r1, #7
{
   29f5c:	e24dd00c 	sub	sp, sp, #12
    switch(actionType)
   29f60:	0a00001c 	beq	29fd8 <Hw512KRamRom::handleBusActionComplete(BR_BUS_ACTION, BR_BUS_ACTION_REASON)+0x84>
   29f64:	e3510008 	cmp	r1, #8
   29f68:	0a000009 	beq	29f94 <Hw512KRamRom::handleBusActionComplete(BR_BUS_ACTION, BR_BUS_ACTION_REASON)+0x40>
   29f6c:	e3510001 	cmp	r1, #1
   29f70:	0a000001 	beq	29f7c <Hw512KRamRom::handleBusActionComplete(BR_BUS_ACTION, BR_BUS_ACTION_REASON)+0x28>
}
   29f74:	e28dd00c 	add	sp, sp, #12
   29f78:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
    _memoryEmulationMode = false;
   29f7c:	e3a02000 	mov	r2, #0
    _pagingEnabled = true;
   29f80:	e5c0100d 	strb	r1, [r0, #13]
    _memoryEmulationMode = false;
   29f84:	e5c0200c 	strb	r2, [r0, #12]
        _bankRegisters[i] = 0;
   29f88:	e580200e 	str	r2, [r0, #14]
}
   29f8c:	e28dd00c 	add	sp, sp, #12
   29f90:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
            pageOutForInjection(false);
   29f94:	e5902000 	ldr	r2, [r0]
   29f98:	e59f1094 	ldr	r1, [pc, #148]	; 2a034 <Hw512KRamRom::handleBusActionComplete(BR_BUS_ACTION, BR_BUS_ACTION_REASON)+0xe0>
   29f9c:	e5922010 	ldr	r2, [r2, #16]
   29fa0:	e1520001 	cmp	r2, r1
   29fa4:	1a000020 	bne	2a02c <Hw512KRamRom::handleBusActionComplete(BR_BUS_ACTION, BR_BUS_ACTION_REASON)+0xd8>
    if (!_pagingEnabled)
   29fa8:	e5d0200d 	ldrb	r2, [r0, #13]
   29fac:	e3520000 	cmp	r2, #0
   29fb0:	0affffef 	beq	29f74 <Hw512KRamRom::handleBusActionComplete(BR_BUS_ACTION, BR_BUS_ACTION_REASON)+0x20>
        BusAccess::blockWrite(Hw512KRamRom_BASE_ADDR, _bankRegisters,
   29fb4:	e3a02001 	mov	r2, #1
   29fb8:	e280100e 	add	r1, r0, #14
   29fbc:	e58d2000 	str	r2, [sp]
   29fc0:	e3a03000 	mov	r3, #0
   29fc4:	e3a02004 	mov	r2, #4
   29fc8:	e3a00078 	mov	r0, #120	; 0x78
   29fcc:	eb003c7e 	bl	391cc <BusAccess::blockWrite(unsigned long, unsigned char const*, unsigned long, bool, bool)>
}
   29fd0:	e28dd00c 	add	sp, sp, #12
   29fd4:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
            pageOutForInjection(true);
   29fd8:	e5902000 	ldr	r2, [r0]
   29fdc:	e59f1050 	ldr	r1, [pc, #80]	; 2a034 <Hw512KRamRom::handleBusActionComplete(BR_BUS_ACTION, BR_BUS_ACTION_REASON)+0xe0>
   29fe0:	e5922010 	ldr	r2, [r2, #16]
   29fe4:	e1520001 	cmp	r2, r1
   29fe8:	1a00000b 	bne	2a01c <Hw512KRamRom::handleBusActionComplete(BR_BUS_ACTION, BR_BUS_ACTION_REASON)+0xc8>
    if (!_pagingEnabled)
   29fec:	e5d0300d 	ldrb	r3, [r0, #13]
   29ff0:	e3530000 	cmp	r3, #0
   29ff4:	0affffde 	beq	29f74 <Hw512KRamRom::handleBusActionComplete(BR_BUS_ACTION, BR_BUS_ACTION_REASON)+0x20>
        BusAccess::blockWrite(Hw512KRamRom_BASE_ADDR, _pageOutAllBanks,
   29ff8:	e3a02001 	mov	r2, #1
   29ffc:	e3a03000 	mov	r3, #0
   2a000:	e58d2000 	str	r2, [sp]
   2a004:	e59f102c 	ldr	r1, [pc, #44]	; 2a038 <Hw512KRamRom::handleBusActionComplete(BR_BUS_ACTION, BR_BUS_ACTION_REASON)+0xe4>
   2a008:	e3a02004 	mov	r2, #4
   2a00c:	e3a00078 	mov	r0, #120	; 0x78
   2a010:	eb003c6d 	bl	391cc <BusAccess::blockWrite(unsigned long, unsigned char const*, unsigned long, bool, bool)>
}
   2a014:	e28dd00c 	add	sp, sp, #12
   2a018:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
            pageOutForInjection(true);
   2a01c:	e3a01001 	mov	r1, #1
}
   2a020:	e28dd00c 	add	sp, sp, #12
   2a024:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
            pageOutForInjection(false);
   2a028:	e12fff12 	bx	r2
   2a02c:	e3a01000 	mov	r1, #0
   2a030:	eafffffa 	b	2a020 <Hw512KRamRom::handleBusActionComplete(BR_BUS_ACTION, BR_BUS_ACTION_REASON)+0xcc>
   2a034:	00029f04 	.word	0x00029f04
   2a038:	0006f0ec 	.word	0x0006f0ec

0002a03c <Hw512KRamRom::Hw512KRamRom()>:
Hw512KRamRom::Hw512KRamRom() : HwBase()
   2a03c:	e92d4010 	push	{r4, lr}
   2a040:	e1a04000 	mov	r4, r0
   2a044:	eb0001ec 	bl	2a7fc <HwBase::HwBase()>
    _memoryEmulationMode = false;
   2a048:	e3a03000 	mov	r3, #0
    _pagingEnabled = true;
   2a04c:	e3a01001 	mov	r1, #1
Hw512KRamRom::Hw512KRamRom() : HwBase()
   2a050:	e59f0020 	ldr	r0, [pc, #32]	; 2a078 <Hw512KRamRom::Hw512KRamRom()+0x3c>
    _pName = _baseName;
   2a054:	e59f2020 	ldr	r2, [pc, #32]	; 2a07c <Hw512KRamRom::Hw512KRamRom()+0x40>
Hw512KRamRom::Hw512KRamRom() : HwBase()
   2a058:	e5840000 	str	r0, [r4]
    _pName = _baseName;
   2a05c:	e5922004 	ldr	r2, [r2, #4]
    _pagingEnabled = true;
   2a060:	e5c4100d 	strb	r1, [r4, #13]
    _pName = _baseName;
   2a064:	e5842008 	str	r2, [r4, #8]
    _memoryEmulationMode = false;
   2a068:	e5c4300c 	strb	r3, [r4, #12]
        _bankRegisters[i] = 0;
   2a06c:	e584300e 	str	r3, [r4, #14]
}
   2a070:	e1a00004 	mov	r0, r4
   2a074:	e8bd8010 	pop	{r4, pc}
   2a078:	00054824 	.word	0x00054824
   2a07c:	0006f0ec 	.word	0x0006f0ec

0002a080 <Hw512KRamRom::hwReset()>:
    _memoryEmulationMode = false;
   2a080:	e3a03000 	mov	r3, #0
    _pagingEnabled = true;
   2a084:	e3a02001 	mov	r2, #1
    _memoryEmulationMode = false;
   2a088:	e5c0300c 	strb	r3, [r0, #12]
    _pagingEnabled = true;
   2a08c:	e5c0200d 	strb	r2, [r0, #13]
        _bankRegisters[i] = 0;
   2a090:	e580300e 	str	r3, [r0, #14]
}
   2a094:	e12fff1e 	bx	lr

0002a098 <HwBase::isEnabled()>:

    // Is enabled
    virtual bool isEnabled()
    {
        return _enabled;
    }
   2a098:	e5d00004 	ldrb	r0, [r0, #4]
   2a09c:	e12fff1e 	bx	lr

0002a0a0 <HwBase::enable(bool)>:

    // Enable
    virtual void enable(bool en)
    {
        _enabled = en;
   2a0a0:	e5c01004 	strb	r1, [r0, #4]
    }
   2a0a4:	e12fff1e 	bx	lr

0002a0a8 <HwBase::name()>:

    // Name
    virtual const char* name()
    {
        return _pName;
    }
   2a0a8:	e5900008 	ldr	r0, [r0, #8]
   2a0ac:	e12fff1e 	bx	lr

0002a0b0 <Hw512KRamRom::setMemoryPagingEnable(bool)>:
    virtual void setMemoryEmulationMode(bool pageOut);

    // Set paging enable
    virtual void setMemoryPagingEnable(bool val)
    {
        _pagingEnabled = val;
   2a0b0:	e5c0100d 	strb	r1, [r0, #13]
    }
   2a0b4:	e12fff1e 	bx	lr

0002a0b8 <Hw64KRam::setMirrorMode(bool)>:
}

// Mirror mode
void Hw64KRam::setMirrorMode(bool val)
{
    _mirrorMode = val;
   2a0b8:	e5c0100f 	strb	r1, [r0, #15]
}
   2a0bc:	e12fff1e 	bx	lr

0002a0c0 <Hw64KRam::getMirrorMemForAddr(unsigned long)>:
// Mirror memory
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// Get mirror memory for address
uint8_t* Hw64KRam::getMirrorMemForAddr(uint32_t addr)
{
   2a0c0:	e92d4010 	push	{r4, lr}
   2a0c4:	e1a04000 	mov	r4, r0
    if (!_pMirrorMemory)
   2a0c8:	e5900010 	ldr	r0, [r0, #16]
{
   2a0cc:	e24dd008 	sub	sp, sp, #8
    if (!_pMirrorMemory)
   2a0d0:	e3500000 	cmp	r0, #0
   2a0d4:	0a000002 	beq	2a0e4 <Hw64KRam::getMirrorMemForAddr(unsigned long)+0x24>
    uint8_t* pMirrorMemory = getMirrorMemory();
    if (!pMirrorMemory)
        return pMirrorMemory;
    return pMirrorMemory + addr;
}
   2a0d8:	e0800001 	add	r0, r0, r1
   2a0dc:	e28dd008 	add	sp, sp, #8
   2a0e0:	e8bd8010 	pop	{r4, pc}
        _pMirrorMemory = new uint8_t[_mirrorMemoryLen];
   2a0e4:	e5940014 	ldr	r0, [r4, #20]
   2a0e8:	e58d1004 	str	r1, [sp, #4]
   2a0ec:	eb002ce0 	bl	35474 <operator new[](unsigned int)>
   2a0f0:	e59d1004 	ldr	r1, [sp, #4]
   2a0f4:	e5840010 	str	r0, [r4, #16]
}
   2a0f8:	e0800001 	add	r0, r0, r1
   2a0fc:	e28dd008 	add	sp, sp, #8
   2a100:	e8bd8010 	pop	{r4, pc}

0002a104 <Hw64KRam::handleMemOrIOReq(unsigned long, unsigned long, unsigned long, unsigned long&)>:
// Handle a request for memory or IO - or possibly something like in interrupt vector in Z80
void Hw64KRam::handleMemOrIOReq([[maybe_unused]] uint32_t addr, [[maybe_unused]] uint32_t data, 
        [[maybe_unused]] uint32_t flags, [[maybe_unused]] uint32_t& retVal)
{
    // Check emulation mode
    if (_memoryEmulationMode || _mirrorMode)
   2a104:	e5d0c00c 	ldrb	ip, [r0, #12]
   2a108:	e35c0000 	cmp	ip, #0
   2a10c:	1a000002 	bne	2a11c <Hw64KRam::handleMemOrIOReq(unsigned long, unsigned long, unsigned long, unsigned long&)+0x18>
   2a110:	e5d0c00f 	ldrb	ip, [r0, #15]
   2a114:	e35c0000 	cmp	ip, #0
   2a118:	012fff1e 	bxeq	lr
{
   2a11c:	e92d4010 	push	{r4, lr}
   2a120:	e1a04000 	mov	r4, r0
    if (!_pMirrorMemory)
   2a124:	e5900010 	ldr	r0, [r0, #16]
{
   2a128:	e24dd010 	sub	sp, sp, #16
    if (!_pMirrorMemory)
   2a12c:	e3500000 	cmp	r0, #0
   2a130:	0a00000a 	beq	2a160 <Hw64KRam::handleMemOrIOReq(unsigned long, unsigned long, unsigned long, unsigned long&)+0x5c>
        uint8_t* pMemory = getMirrorMemory();
        if (!pMemory)
            return;

        // Memory requests use mirror memory
        if (flags & BR_CTRL_BUS_MREQ_MASK)
   2a134:	e3130004 	tst	r3, #4
   2a138:	0a000006 	beq	2a158 <Hw64KRam::handleMemOrIOReq(unsigned long, unsigned long, unsigned long, unsigned long&)+0x54>
        {
            if (flags & BR_CTRL_BUS_WR_MASK)
   2a13c:	e3130002 	tst	r3, #2
                pMemory[addr] = data;
   2a140:	17c02001 	strbne	r2, [r0, r1]
            if (flags & BR_CTRL_BUS_WR_MASK)
   2a144:	1a000003 	bne	2a158 <Hw64KRam::handleMemOrIOReq(unsigned long, unsigned long, unsigned long, unsigned long&)+0x54>
            else if (flags & BR_CTRL_BUS_RD_MASK)
   2a148:	e3130001 	tst	r3, #1
                retVal = (retVal & 0xffff0000) | pMemory[addr];
   2a14c:	17d03001 	ldrbne	r3, [r0, r1]
   2a150:	159d2018 	ldrne	r2, [sp, #24]
   2a154:	11c230b0 	strhne	r3, [r2]
        }
    }
}
   2a158:	e28dd010 	add	sp, sp, #16
   2a15c:	e8bd8010 	pop	{r4, pc}
        _pMirrorMemory = new uint8_t[_mirrorMemoryLen];
   2a160:	e5940014 	ldr	r0, [r4, #20]
   2a164:	e1cd20f8 	strd	r2, [sp, #8]
   2a168:	e58d1004 	str	r1, [sp, #4]
   2a16c:	eb002cc0 	bl	35474 <operator new[](unsigned int)>
   2a170:	e99d000e 	ldmib	sp, {r1, r2, r3}
   2a174:	e5840010 	str	r0, [r4, #16]
   2a178:	eaffffed 	b	2a134 <Hw64KRam::handleMemOrIOReq(unsigned long, unsigned long, unsigned long, unsigned long&)+0x30>

0002a17c <Hw64KRam::validatorHandleAccess(unsigned long, unsigned long, unsigned long, unsigned long&)>:
{
   2a17c:	e92d4010 	push	{r4, lr}
   2a180:	e1a04000 	mov	r4, r0
    if (!_pValidatorMemory)
   2a184:	e5900018 	ldr	r0, [r0, #24]
{
   2a188:	e24dd010 	sub	sp, sp, #16
    if (!_pValidatorMemory)
   2a18c:	e3500000 	cmp	r0, #0
   2a190:	0a00000a 	beq	2a1c0 <Hw64KRam::validatorHandleAccess(unsigned long, unsigned long, unsigned long, unsigned long&)+0x44>
    if (flags & BR_CTRL_BUS_MREQ_MASK)
   2a194:	e3130004 	tst	r3, #4
   2a198:	0a000006 	beq	2a1b8 <Hw64KRam::validatorHandleAccess(unsigned long, unsigned long, unsigned long, unsigned long&)+0x3c>
        if (flags & BR_CTRL_BUS_WR_MASK)
   2a19c:	e3130002 	tst	r3, #2
            pMemory[addr] = data;
   2a1a0:	17c02001 	strbne	r2, [r0, r1]
        if (flags & BR_CTRL_BUS_WR_MASK)
   2a1a4:	1a000003 	bne	2a1b8 <Hw64KRam::validatorHandleAccess(unsigned long, unsigned long, unsigned long, unsigned long&)+0x3c>
        else if (flags & BR_CTRL_BUS_RD_MASK)
   2a1a8:	e3130001 	tst	r3, #1
            retVal = pMemory[addr];
   2a1ac:	17d03001 	ldrbne	r3, [r0, r1]
   2a1b0:	159d2018 	ldrne	r2, [sp, #24]
   2a1b4:	15823000 	strne	r3, [r2]
}
   2a1b8:	e28dd010 	add	sp, sp, #16
   2a1bc:	e8bd8010 	pop	{r4, pc}
        _pValidatorMemory = new uint8_t[_validatorMemoryLen];
   2a1c0:	e594001c 	ldr	r0, [r4, #28]
   2a1c4:	e1cd20f8 	strd	r2, [sp, #8]
   2a1c8:	e58d1004 	str	r1, [sp, #4]
   2a1cc:	eb002ca8 	bl	35474 <operator new[](unsigned int)>
   2a1d0:	e1cd20d8 	ldrd	r2, [sp, #8]
   2a1d4:	e5840018 	str	r0, [r4, #24]
   2a1d8:	e59d1004 	ldr	r1, [sp, #4]
   2a1dc:	eaffffec 	b	2a194 <Hw64KRam::validatorHandleAccess(unsigned long, unsigned long, unsigned long, unsigned long&)+0x18>

0002a1e0 <Hw64KRam::validatorClone()>:
{
   2a1e0:	e92d4070 	push	{r4, r5, r6, lr}
   2a1e4:	e1a04000 	mov	r4, r0
    if (!_pValidatorMemory)
   2a1e8:	e5900018 	ldr	r0, [r0, #24]
    LogWrite(_logPrefix, LOG_DEBUG, "validatorClone emulated %d mem %d", 
   2a1ec:	e59f6108 	ldr	r6, [pc, #264]	; 2a2fc <Hw64KRam::validatorClone()+0x11c>
    if (!_pValidatorMemory)
   2a1f0:	e3500000 	cmp	r0, #0
{
   2a1f4:	e24dd010 	sub	sp, sp, #16
    LogWrite(_logPrefix, LOG_DEBUG, "validatorClone emulated %d mem %d", 
   2a1f8:	e5d4300c 	ldrb	r3, [r4, #12]
   2a1fc:	e5965000 	ldr	r5, [r6]
    if (!_pValidatorMemory)
   2a200:	0a00002d 	beq	2a2bc <Hw64KRam::validatorClone()+0xdc>
    LogWrite(_logPrefix, LOG_DEBUG, "validatorClone emulated %d mem %d", 
   2a204:	e58d0000 	str	r0, [sp]
   2a208:	e59f20f0 	ldr	r2, [pc, #240]	; 2a300 <Hw64KRam::validatorClone()+0x120>
   2a20c:	e1a00005 	mov	r0, r5
   2a210:	e3a01004 	mov	r1, #4
   2a214:	ebffe7d7 	bl	24178 <LogWrite>
    if (!_pValidatorMemory)
   2a218:	e5945018 	ldr	r5, [r4, #24]
   2a21c:	e3550000 	cmp	r5, #0
   2a220:	0a000030 	beq	2a2e8 <Hw64KRam::validatorClone()+0x108>
    if (_memoryEmulationMode)
   2a224:	e5d4000c 	ldrb	r0, [r4, #12]
   2a228:	e3500000 	cmp	r0, #0
   2a22c:	0a00000a 	beq	2a25c <Hw64KRam::validatorClone()+0x7c>
    if (!_pMirrorMemory)
   2a230:	e5941010 	ldr	r1, [r4, #16]
   2a234:	e5940014 	ldr	r0, [r4, #20]
   2a238:	e3510000 	cmp	r1, #0
   2a23c:	0a000024 	beq	2a2d4 <Hw64KRam::validatorClone()+0xf4>
        memcpy(pValMemory, pSrcMemory, maxLen);
   2a240:	e594201c 	ldr	r2, [r4, #28]
   2a244:	e1500002 	cmp	r0, r2
   2a248:	31a02000 	movcc	r2, r0
   2a24c:	e1a00005 	mov	r0, r5
}
   2a250:	e28dd010 	add	sp, sp, #16
   2a254:	e8bd4070 	pop	{r4, r5, r6, lr}
        memcpy(pValMemory, pSrcMemory, maxLen);
   2a258:	ea008ac2 	b	4cd68 <memcpy>
        BusAccess::blockRead(0, pValMemory, _validatorMemoryLen, true, false);
   2a25c:	e594201c 	ldr	r2, [r4, #28]
   2a260:	e1a01005 	mov	r1, r5
   2a264:	e58d0000 	str	r0, [sp]
   2a268:	e3a03001 	mov	r3, #1
   2a26c:	eb003c9a 	bl	394dc <BusAccess::blockRead(unsigned long, unsigned char*, unsigned long, bool, bool)>
        LogWrite(_logPrefix, LOG_DEBUG, "validatorClone blockRead %s", (blockReadResult == BR_OK) ? "OK" : "FAIL");
   2a270:	e59f108c 	ldr	r1, [pc, #140]	; 2a304 <Hw64KRam::validatorClone()+0x124>
   2a274:	e3500000 	cmp	r0, #0
   2a278:	e59f3088 	ldr	r3, [pc, #136]	; 2a308 <Hw64KRam::validatorClone()+0x128>
   2a27c:	e5960000 	ldr	r0, [r6]
   2a280:	11a03001 	movne	r3, r1
   2a284:	e59f2080 	ldr	r2, [pc, #128]	; 2a30c <Hw64KRam::validatorClone()+0x12c>
   2a288:	e3a01004 	mov	r1, #4
   2a28c:	ebffe7b9 	bl	24178 <LogWrite>
        LogWrite(_logPrefix, LOG_DEBUG, "validatorClone blockRead %02x %02x %02x", pValMemory[0], pValMemory[1], pValMemory[2]);
   2a290:	e5d52002 	ldrb	r2, [r5, #2]
   2a294:	e5d53000 	ldrb	r3, [r5]
   2a298:	e58d2004 	str	r2, [sp, #4]
   2a29c:	e5d52001 	ldrb	r2, [r5, #1]
   2a2a0:	e5960000 	ldr	r0, [r6]
   2a2a4:	e58d2000 	str	r2, [sp]
   2a2a8:	e3a01004 	mov	r1, #4
   2a2ac:	e59f205c 	ldr	r2, [pc, #92]	; 2a310 <Hw64KRam::validatorClone()+0x130>
   2a2b0:	ebffe7b0 	bl	24178 <LogWrite>
}
   2a2b4:	e28dd010 	add	sp, sp, #16
   2a2b8:	e8bd8070 	pop	{r4, r5, r6, pc}
        _pValidatorMemory = new uint8_t[_validatorMemoryLen];
   2a2bc:	e594001c 	ldr	r0, [r4, #28]
   2a2c0:	e58d300c 	str	r3, [sp, #12]
   2a2c4:	eb002c6a 	bl	35474 <operator new[](unsigned int)>
   2a2c8:	e59d300c 	ldr	r3, [sp, #12]
   2a2cc:	e5840018 	str	r0, [r4, #24]
   2a2d0:	eaffffcb 	b	2a204 <Hw64KRam::validatorClone()+0x24>
        _pMirrorMemory = new uint8_t[_mirrorMemoryLen];
   2a2d4:	eb002c66 	bl	35474 <operator new[](unsigned int)>
   2a2d8:	e1a01000 	mov	r1, r0
   2a2dc:	e5940014 	ldr	r0, [r4, #20]
   2a2e0:	e5841010 	str	r1, [r4, #16]
   2a2e4:	eaffffd5 	b	2a240 <Hw64KRam::validatorClone()+0x60>
        _pValidatorMemory = new uint8_t[_validatorMemoryLen];
   2a2e8:	e594001c 	ldr	r0, [r4, #28]
   2a2ec:	eb002c60 	bl	35474 <operator new[](unsigned int)>
   2a2f0:	e1a05000 	mov	r5, r0
   2a2f4:	e5840018 	str	r0, [r4, #24]
   2a2f8:	eaffffc9 	b	2a224 <Hw64KRam::validatorClone()+0x44>
   2a2fc:	0006f0f8 	.word	0x0006f0f8
   2a300:	0005491c 	.word	0x0005491c
   2a304:	000548d0 	.word	0x000548d0
   2a308:	000548cc 	.word	0x000548cc
   2a30c:	000548d8 	.word	0x000548d8
   2a310:	000548f4 	.word	0x000548f4

0002a314 <Hw64KRam::setMemoryEmulationMode(bool)>:
    if (!_pagingEnabled)
   2a314:	e5d0300d 	ldrb	r3, [r0, #13]
    _memoryEmulationMode = pageOut;
   2a318:	e5c0100c 	strb	r1, [r0, #12]
    if (!_pagingEnabled)
   2a31c:	e3530000 	cmp	r3, #0
   2a320:	012fff1e 	bxeq	lr
    LogWrite(_logPrefix, LOG_DEBUG, "setMemoryEmulationMode %s", pageOut ? "Y" : "N");
   2a324:	e59f3058 	ldr	r3, [pc, #88]	; 2a384 <Hw64KRam::setMemoryEmulationMode(bool)+0x70>
   2a328:	e3510000 	cmp	r1, #0
{
   2a32c:	e92d4010 	push	{r4, lr}
   2a330:	e1a04000 	mov	r4, r0
    LogWrite(_logPrefix, LOG_DEBUG, "setMemoryEmulationMode %s", pageOut ? "Y" : "N");
   2a334:	e5930000 	ldr	r0, [r3]
   2a338:	0a000007 	beq	2a35c <Hw64KRam::setMemoryEmulationMode(bool)+0x48>
   2a33c:	e3a01004 	mov	r1, #4
   2a340:	e59f3040 	ldr	r3, [pc, #64]	; 2a388 <Hw64KRam::setMemoryEmulationMode(bool)+0x74>
   2a344:	e59f2040 	ldr	r2, [pc, #64]	; 2a38c <Hw64KRam::setMemoryEmulationMode(bool)+0x78>
   2a348:	ebffe78a 	bl	24178 <LogWrite>
}
   2a34c:	e8bd4010 	pop	{r4, lr}
        digitalWrite(BR_PAGING_RAM_PIN, 1);
   2a350:	e3a01001 	mov	r1, #1
   2a354:	e3a00008 	mov	r0, #8
   2a358:	ea002c23 	b	353ec <digitalWrite>
    LogWrite(_logPrefix, LOG_DEBUG, "setMemoryEmulationMode %s", pageOut ? "Y" : "N");
   2a35c:	e3a01004 	mov	r1, #4
   2a360:	e59f3028 	ldr	r3, [pc, #40]	; 2a390 <Hw64KRam::setMemoryEmulationMode(bool)+0x7c>
   2a364:	e59f2020 	ldr	r2, [pc, #32]	; 2a38c <Hw64KRam::setMemoryEmulationMode(bool)+0x78>
   2a368:	ebffe782 	bl	24178 <LogWrite>
        if (!_currentlyPagedOut)
   2a36c:	e5d4100e 	ldrb	r1, [r4, #14]
   2a370:	e3510000 	cmp	r1, #0
   2a374:	18bd8010 	popne	{r4, pc}
        digitalWrite(BR_PAGING_RAM_PIN, 1);
   2a378:	e3a00008 	mov	r0, #8
}
   2a37c:	e8bd4010 	pop	{r4, lr}
        digitalWrite(BR_PAGING_RAM_PIN, 1);
   2a380:	ea002c19 	b	353ec <digitalWrite>
   2a384:	0006f0f8 	.word	0x0006f0f8
   2a388:	00052324 	.word	0x00052324
   2a38c:	00054944 	.word	0x00054944
   2a390:	00054940 	.word	0x00054940

0002a394 <Hw64KRam::mirrorClone()>:
    if (_memoryEmulationMode)
   2a394:	e5d0300c 	ldrb	r3, [r0, #12]
   2a398:	e3530000 	cmp	r3, #0
   2a39c:	112fff1e 	bxne	lr
{
   2a3a0:	e92d4010 	push	{r4, lr}
    if (!_pMirrorMemory)
   2a3a4:	e5901010 	ldr	r1, [r0, #16]
{
   2a3a8:	e24dd008 	sub	sp, sp, #8
    if (!_pMirrorMemory)
   2a3ac:	e3510000 	cmp	r1, #0
   2a3b0:	e1a04000 	mov	r4, r0
   2a3b4:	e5902014 	ldr	r2, [r0, #20]
   2a3b8:	0a000005 	beq	2a3d4 <Hw64KRam::mirrorClone()+0x40>
    BusAccess::blockRead(0, pDestMemory, _mirrorMemoryLen, false, false);
   2a3bc:	e3a03000 	mov	r3, #0
   2a3c0:	e58d3000 	str	r3, [sp]
   2a3c4:	e1a00003 	mov	r0, r3
   2a3c8:	eb003c43 	bl	394dc <BusAccess::blockRead(unsigned long, unsigned char*, unsigned long, bool, bool)>
}
   2a3cc:	e28dd008 	add	sp, sp, #8
   2a3d0:	e8bd8010 	pop	{r4, pc}
        _pMirrorMemory = new uint8_t[_mirrorMemoryLen];
   2a3d4:	e1a00002 	mov	r0, r2
   2a3d8:	eb002c25 	bl	35474 <operator new[](unsigned int)>
   2a3dc:	e5942014 	ldr	r2, [r4, #20]
   2a3e0:	e1a01000 	mov	r1, r0
   2a3e4:	e5840010 	str	r0, [r4, #16]
   2a3e8:	eafffff3 	b	2a3bc <Hw64KRam::mirrorClone()+0x28>

0002a3ec <Hw64KRam::blockWrite(unsigned long, unsigned char const*, unsigned long, bool, bool)>:
{
   2a3ec:	e92d4070 	push	{r4, r5, r6, lr}
   2a3f0:	e24dd008 	sub	sp, sp, #8
   2a3f4:	e5ddc01c 	ldrb	ip, [sp, #28]
    if (iorq)
   2a3f8:	e35c0000 	cmp	ip, #0
        return BR_NOT_HANDLED;
   2a3fc:	13a00004 	movne	r0, #4
    if (iorq)
   2a400:	1a00000c 	bne	2a438 <Hw64KRam::blockWrite(unsigned long, unsigned char const*, unsigned long, bool, bool)+0x4c>
   2a404:	e1a04000 	mov	r4, r0
    if (!_pMirrorMemory)
   2a408:	e5900010 	ldr	r0, [r0, #16]
   2a40c:	e1a06002 	mov	r6, r2
   2a410:	e3500000 	cmp	r0, #0
   2a414:	e1a05001 	mov	r5, r1
   2a418:	e5942014 	ldr	r2, [r4, #20]
   2a41c:	0a00000e 	beq	2a45c <Hw64KRam::blockWrite(unsigned long, unsigned char const*, unsigned long, bool, bool)+0x70>
    if (addr + len > _mirrorMemoryLen)
   2a420:	e0851003 	add	r1, r5, r3
   2a424:	e1510002 	cmp	r1, r2
        len = _mirrorMemoryLen-addr;
   2a428:	80423005 	subhi	r3, r2, r5
    if (len > 0)
   2a42c:	e3530000 	cmp	r3, #0
    return BR_OK;
   2a430:	01a00003 	moveq	r0, r3
    if (len > 0)
   2a434:	1a000001 	bne	2a440 <Hw64KRam::blockWrite(unsigned long, unsigned char const*, unsigned long, bool, bool)+0x54>
}
   2a438:	e28dd008 	add	sp, sp, #8
   2a43c:	e8bd8070 	pop	{r4, r5, r6, pc}
        memcpy(pMirrorMemory+addr, pBuf, len);
   2a440:	e1a02003 	mov	r2, r3
   2a444:	e1a01006 	mov	r1, r6
   2a448:	e0800005 	add	r0, r0, r5
   2a44c:	eb008a45 	bl	4cd68 <memcpy>
    return BR_OK;
   2a450:	e3a00000 	mov	r0, #0
}
   2a454:	e28dd008 	add	sp, sp, #8
   2a458:	e8bd8070 	pop	{r4, r5, r6, pc}
        _pMirrorMemory = new uint8_t[_mirrorMemoryLen];
   2a45c:	e1a00002 	mov	r0, r2
   2a460:	e58d3004 	str	r3, [sp, #4]
   2a464:	eb002c02 	bl	35474 <operator new[](unsigned int)>
   2a468:	e5942014 	ldr	r2, [r4, #20]
   2a46c:	e5840010 	str	r0, [r4, #16]
   2a470:	e59d3004 	ldr	r3, [sp, #4]
   2a474:	eaffffe9 	b	2a420 <Hw64KRam::blockWrite(unsigned long, unsigned char const*, unsigned long, bool, bool)+0x34>

0002a478 <Hw64KRam::blockRead(unsigned long, unsigned char*, unsigned long, bool, bool)>:
{
   2a478:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   2a47c:	e5ddc01c 	ldrb	ip, [sp, #28]
    if (iorq)
   2a480:	e35c0000 	cmp	ip, #0
   2a484:	1a000013 	bne	2a4d8 <Hw64KRam::blockRead(unsigned long, unsigned char*, unsigned long, bool, bool)+0x60>
    if (!_pMirrorMemory)
   2a488:	e5908010 	ldr	r8, [r0, #16]
   2a48c:	e1a05000 	mov	r5, r0
   2a490:	e3580000 	cmp	r8, #0
   2a494:	e1a04003 	mov	r4, r3
   2a498:	e1a07002 	mov	r7, r2
   2a49c:	e1a06001 	mov	r6, r1
   2a4a0:	e5900014 	ldr	r0, [r0, #20]
   2a4a4:	0a00001a 	beq	2a514 <Hw64KRam::blockRead(unsigned long, unsigned char*, unsigned long, bool, bool)+0x9c>
   2a4a8:	e1540000 	cmp	r4, r0
   2a4ac:	21a04000 	movcs	r4, r0
    if (addr + len > _mirrorMemoryLen)
   2a4b0:	e0863004 	add	r3, r6, r4
   2a4b4:	e1530000 	cmp	r3, r0
   2a4b8:	91a05004 	movls	r5, r4
        firstPartLen = _mirrorMemoryLen-addr;
   2a4bc:	80405006 	subhi	r5, r0, r6
    if (firstPartLen > 0)
   2a4c0:	e3550000 	cmp	r5, #0
   2a4c4:	1a00000b 	bne	2a4f8 <Hw64KRam::blockRead(unsigned long, unsigned char*, unsigned long, bool, bool)+0x80>
    if (len > firstPartLen)
   2a4c8:	e1550004 	cmp	r5, r4
   2a4cc:	3a000003 	bcc	2a4e0 <Hw64KRam::blockRead(unsigned long, unsigned char*, unsigned long, bool, bool)+0x68>
    return BR_OK;
   2a4d0:	e3a00000 	mov	r0, #0
}
   2a4d4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
        return BR_NOT_HANDLED;
   2a4d8:	e3a00004 	mov	r0, #4
   2a4dc:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
        memcpy(pBuf+firstPartLen, pMirrorMemory, len-firstPartLen);
   2a4e0:	e0442005 	sub	r2, r4, r5
   2a4e4:	e1a01008 	mov	r1, r8
   2a4e8:	e0870005 	add	r0, r7, r5
   2a4ec:	eb008a1d 	bl	4cd68 <memcpy>
    return BR_OK;
   2a4f0:	e3a00000 	mov	r0, #0
   2a4f4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
        memcpy(pBuf, pMirrorMemory+addr, firstPartLen);
   2a4f8:	e0881006 	add	r1, r8, r6
   2a4fc:	e1a02005 	mov	r2, r5
   2a500:	e1a00007 	mov	r0, r7
   2a504:	eb008a17 	bl	4cd68 <memcpy>
    if (len > firstPartLen)
   2a508:	e1550004 	cmp	r5, r4
   2a50c:	2affffef 	bcs	2a4d0 <Hw64KRam::blockRead(unsigned long, unsigned char*, unsigned long, bool, bool)+0x58>
   2a510:	eafffff2 	b	2a4e0 <Hw64KRam::blockRead(unsigned long, unsigned char*, unsigned long, bool, bool)+0x68>
        _pMirrorMemory = new uint8_t[_mirrorMemoryLen];
   2a514:	eb002bd6 	bl	35474 <operator new[](unsigned int)>
   2a518:	e1a08000 	mov	r8, r0
   2a51c:	e5950014 	ldr	r0, [r5, #20]
   2a520:	e5858010 	str	r8, [r5, #16]
   2a524:	eaffffdf 	b	2a4a8 <Hw64KRam::blockRead(unsigned long, unsigned char*, unsigned long, bool, bool)+0x30>

0002a528 <Hw64KRam::pageOutForInjection(bool)>:
    if (!_pagingEnabled)
   2a528:	e5d0200d 	ldrb	r2, [r0, #13]
    _currentlyPagedOut = pageOut;
   2a52c:	e5c0100e 	strb	r1, [r0, #14]
    if (!_pagingEnabled)
   2a530:	e3520000 	cmp	r2, #0
   2a534:	012fff1e 	bxeq	lr
    if (pageOut)
   2a538:	e3510000 	cmp	r1, #0
   2a53c:	1a000004 	bne	2a554 <Hw64KRam::pageOutForInjection(bool)+0x2c>
        if (!_memoryEmulationMode)
   2a540:	e5d0300c 	ldrb	r3, [r0, #12]
   2a544:	e3530000 	cmp	r3, #0
   2a548:	112fff1e 	bxne	lr
            digitalWrite(BR_PAGING_RAM_PIN, 0);
   2a54c:	e3a00008 	mov	r0, #8
   2a550:	ea002ba5 	b	353ec <digitalWrite>
        digitalWrite(BR_PAGING_RAM_PIN, 1);
   2a554:	e3a01001 	mov	r1, #1
   2a558:	e3a00008 	mov	r0, #8
   2a55c:	ea002ba2 	b	353ec <digitalWrite>

0002a560 <Hw64KRam::handleBusActionComplete(BR_BUS_ACTION, BR_BUS_ACTION_REASON)>:
    switch(actionType)
   2a560:	e2411001 	sub	r1, r1, #1
   2a564:	e3510007 	cmp	r1, #7
   2a568:	979ff101 	ldrls	pc, [pc, r1, lsl #2]
   2a56c:	ea000055 	b	2a6c8 <Hw64KRam::handleBusActionComplete(BR_BUS_ACTION, BR_BUS_ACTION_REASON)+0x168>
   2a570:	0002a6b4 	.word	0x0002a6b4
   2a574:	0002a6c8 	.word	0x0002a6c8
   2a578:	0002a6c8 	.word	0x0002a6c8
   2a57c:	0002a5f8 	.word	0x0002a5f8
   2a580:	0002a6c8 	.word	0x0002a6c8
   2a584:	0002a6c8 	.word	0x0002a6c8
   2a588:	0002a5c8 	.word	0x0002a5c8
   2a58c:	0002a590 	.word	0x0002a590
            pageOutForInjection(false);
   2a590:	e5903000 	ldr	r3, [r0]
   2a594:	e59f216c 	ldr	r2, [pc, #364]	; 2a708 <Hw64KRam::handleBusActionComplete(BR_BUS_ACTION, BR_BUS_ACTION_REASON)+0x1a8>
   2a598:	e5933010 	ldr	r3, [r3, #16]
   2a59c:	e1530002 	cmp	r3, r2
   2a5a0:	1a000049 	bne	2a6cc <Hw64KRam::handleBusActionComplete(BR_BUS_ACTION, BR_BUS_ACTION_REASON)+0x16c>
    _currentlyPagedOut = pageOut;
   2a5a4:	e3a02000 	mov	r2, #0
    if (!_pagingEnabled)
   2a5a8:	e5d0300d 	ldrb	r3, [r0, #13]
    _currentlyPagedOut = pageOut;
   2a5ac:	e5c0200e 	strb	r2, [r0, #14]
    if (!_pagingEnabled)
   2a5b0:	e1530002 	cmp	r3, r2
   2a5b4:	012fff1e 	bxeq	lr
        if (!_memoryEmulationMode)
   2a5b8:	e5d0100c 	ldrb	r1, [r0, #12]
   2a5bc:	e1510002 	cmp	r1, r2
   2a5c0:	112fff1e 	bxne	lr
   2a5c4:	ea000009 	b	2a5f0 <Hw64KRam::handleBusActionComplete(BR_BUS_ACTION, BR_BUS_ACTION_REASON)+0x90>
            pageOutForInjection(true);
   2a5c8:	e5903000 	ldr	r3, [r0]
   2a5cc:	e59f2134 	ldr	r2, [pc, #308]	; 2a708 <Hw64KRam::handleBusActionComplete(BR_BUS_ACTION, BR_BUS_ACTION_REASON)+0x1a8>
   2a5d0:	e5933010 	ldr	r3, [r3, #16]
    _currentlyPagedOut = pageOut;
   2a5d4:	e3a01001 	mov	r1, #1
   2a5d8:	e1530002 	cmp	r3, r2
   2a5dc:	1a00003b 	bne	2a6d0 <Hw64KRam::handleBusActionComplete(BR_BUS_ACTION, BR_BUS_ACTION_REASON)+0x170>
    if (!_pagingEnabled)
   2a5e0:	e5d0300d 	ldrb	r3, [r0, #13]
    _currentlyPagedOut = pageOut;
   2a5e4:	e5c0100e 	strb	r1, [r0, #14]
    if (!_pagingEnabled)
   2a5e8:	e3530000 	cmp	r3, #0
   2a5ec:	012fff1e 	bxeq	lr
            digitalWrite(BR_PAGING_RAM_PIN, 0);
   2a5f0:	e3a00008 	mov	r0, #8
   2a5f4:	ea002b7c 	b	353ec <digitalWrite>
            if (reason == BR_BUS_ACTION_MIRROR)
   2a5f8:	e3520001 	cmp	r2, #1
   2a5fc:	112fff1e 	bxne	lr
                if (!_mirrorMode)
   2a600:	e5d0300f 	ldrb	r3, [r0, #15]
   2a604:	e3530000 	cmp	r3, #0
   2a608:	012fff1e 	bxeq	lr
{
   2a60c:	e92d4070 	push	{r4, r5, r6, lr}
    if (!_pMirrorMemory)
   2a610:	e5901010 	ldr	r1, [r0, #16]
{
   2a614:	e24dd028 	sub	sp, sp, #40	; 0x28
    if (!_pMirrorMemory)
   2a618:	e3510000 	cmp	r1, #0
   2a61c:	e1a04000 	mov	r4, r0
   2a620:	e5902014 	ldr	r2, [r0, #20]
   2a624:	0a000031 	beq	2a6f0 <Hw64KRam::handleBusActionComplete(BR_BUS_ACTION, BR_BUS_ACTION_REASON)+0x190>
                BusAccess::blockRead(0, getMirrorMemory(), _mirrorMemoryLen, false, false);
   2a628:	e3a03000 	mov	r3, #0
   2a62c:	e58d3000 	str	r3, [sp]
   2a630:	e1a00003 	mov	r0, r3
   2a634:	eb003ba8 	bl	394dc <BusAccess::blockRead(unsigned long, unsigned char*, unsigned long, bool, bool)>
                LogWrite(_logPrefix, LOG_DEBUG, "mirror memory blockRead %s addr %04x %d [0] %02x [1] %02x [2] %02x [3] %02x mirror %d %s",
   2a638:	e59fc0cc 	ldr	ip, [pc, #204]	; 2a70c <Hw64KRam::handleBusActionComplete(BR_BUS_ACTION, BR_BUS_ACTION_REASON)+0x1ac>
    if (!_pMirrorMemory)
   2a63c:	e5941010 	ldr	r1, [r4, #16]
                LogWrite(_logPrefix, LOG_DEBUG, "mirror memory blockRead %s addr %04x %d [0] %02x [1] %02x [2] %02x [3] %02x mirror %d %s",
   2a640:	e3500000 	cmp	r0, #0
   2a644:	e59f20c4 	ldr	r2, [pc, #196]	; 2a710 <Hw64KRam::handleBusActionComplete(BR_BUS_ACTION, BR_BUS_ACTION_REASON)+0x1b0>
   2a648:	e59f30c4 	ldr	r3, [pc, #196]	; 2a714 <Hw64KRam::handleBusActionComplete(BR_BUS_ACTION, BR_BUS_ACTION_REASON)+0x1b4>
   2a64c:	01a0300c 	moveq	r3, ip
    if (!_pMirrorMemory)
   2a650:	e3510000 	cmp	r1, #0
                LogWrite(_logPrefix, LOG_DEBUG, "mirror memory blockRead %s addr %04x %d [0] %02x [1] %02x [2] %02x [3] %02x mirror %d %s",
   2a654:	e5926000 	ldr	r6, [r2]
   2a658:	e5945014 	ldr	r5, [r4, #20]
    if (!_pMirrorMemory)
   2a65c:	0a00001c 	beq	2a6d4 <Hw64KRam::handleBusActionComplete(BR_BUS_ACTION, BR_BUS_ACTION_REASON)+0x174>
                LogWrite(_logPrefix, LOG_DEBUG, "mirror memory blockRead %s addr %04x %d [0] %02x [1] %02x [2] %02x [3] %02x mirror %d %s",
   2a660:	e3a0c000 	mov	ip, #0
   2a664:	e5940008 	ldr	r0, [r4, #8]
   2a668:	e5d4200f 	ldrb	r2, [r4, #15]
   2a66c:	e58d001c 	str	r0, [sp, #28]
   2a670:	e58d2018 	str	r2, [sp, #24]
   2a674:	e5d12003 	ldrb	r2, [r1, #3]
   2a678:	e1a00006 	mov	r0, r6
   2a67c:	e58d2014 	str	r2, [sp, #20]
   2a680:	e5d12002 	ldrb	r2, [r1, #2]
   2a684:	e58d2010 	str	r2, [sp, #16]
   2a688:	e5d1e001 	ldrb	lr, [r1, #1]
   2a68c:	e59f2084 	ldr	r2, [pc, #132]	; 2a718 <Hw64KRam::handleBusActionComplete(BR_BUS_ACTION, BR_BUS_ACTION_REASON)+0x1b8>
   2a690:	e58de00c 	str	lr, [sp, #12]
   2a694:	e5d11000 	ldrb	r1, [r1]
   2a698:	e58d5004 	str	r5, [sp, #4]
   2a69c:	e58d1008 	str	r1, [sp, #8]
   2a6a0:	e58dc000 	str	ip, [sp]
   2a6a4:	e3a01004 	mov	r1, #4
   2a6a8:	ebffe6b2 	bl	24178 <LogWrite>
}
   2a6ac:	e28dd028 	add	sp, sp, #40	; 0x28
   2a6b0:	e8bd8070 	pop	{r4, r5, r6, pc}
    _memoryEmulationMode = false;
   2a6b4:	e3a03c01 	mov	r3, #256	; 0x100
    digitalWrite(BR_PAGING_RAM_PIN, 0);
   2a6b8:	e3a01000 	mov	r1, #0
    _memoryEmulationMode = false;
   2a6bc:	e580300c 	str	r3, [r0, #12]
    digitalWrite(BR_PAGING_RAM_PIN, 0);
   2a6c0:	e3a00008 	mov	r0, #8
   2a6c4:	ea002b48 	b	353ec <digitalWrite>
   2a6c8:	e12fff1e 	bx	lr
            pageOutForInjection(false);
   2a6cc:	e3a01000 	mov	r1, #0
   2a6d0:	e12fff13 	bx	r3
        _pMirrorMemory = new uint8_t[_mirrorMemoryLen];
   2a6d4:	e1a00005 	mov	r0, r5
   2a6d8:	e58d3024 	str	r3, [sp, #36]	; 0x24
   2a6dc:	eb002b64 	bl	35474 <operator new[](unsigned int)>
   2a6e0:	e59d3024 	ldr	r3, [sp, #36]	; 0x24
   2a6e4:	e1a01000 	mov	r1, r0
   2a6e8:	e5840010 	str	r0, [r4, #16]
   2a6ec:	eaffffdb 	b	2a660 <Hw64KRam::handleBusActionComplete(BR_BUS_ACTION, BR_BUS_ACTION_REASON)+0x100>
   2a6f0:	e1a00002 	mov	r0, r2
   2a6f4:	eb002b5e 	bl	35474 <operator new[](unsigned int)>
   2a6f8:	e5942014 	ldr	r2, [r4, #20]
   2a6fc:	e1a01000 	mov	r1, r0
   2a700:	e5840010 	str	r0, [r4, #16]
   2a704:	eaffffc7 	b	2a628 <Hw64KRam::handleBusActionComplete(BR_BUS_ACTION, BR_BUS_ACTION_REASON)+0xc8>
   2a708:	0002a528 	.word	0x0002a528
   2a70c:	000548cc 	.word	0x000548cc
   2a710:	0006f0f8 	.word	0x0006f0f8
   2a714:	000548d0 	.word	0x000548d0
   2a718:	00054960 	.word	0x00054960

0002a71c <Hw64KRam::Hw64KRam()>:
Hw64KRam::Hw64KRam() : HwBase()
   2a71c:	e92d4010 	push	{r4, lr}
   2a720:	e1a04000 	mov	r4, r0
   2a724:	eb000034 	bl	2a7fc <HwBase::HwBase()>
    _mirrorMemoryLen = 64*1024;
   2a728:	e3a03801 	mov	r3, #65536	; 0x10000
    _pMirrorMemory = NULL;
   2a72c:	e3a01000 	mov	r1, #0
    _memoryEmulationMode = false;
   2a730:	e3a02c01 	mov	r2, #256	; 0x100
    _pName = _baseName;
   2a734:	e59f0030 	ldr	r0, [pc, #48]	; 2a76c <Hw64KRam::Hw64KRam()+0x50>
Hw64KRam::Hw64KRam() : HwBase()
   2a738:	e59fc030 	ldr	ip, [pc, #48]	; 2a770 <Hw64KRam::Hw64KRam()+0x54>
    _pName = _baseName;
   2a73c:	e5900004 	ldr	r0, [r0, #4]
    _memoryEmulationMode = false;
   2a740:	e584200c 	str	r2, [r4, #12]
    _pName = _baseName;
   2a744:	e5840008 	str	r0, [r4, #8]
Hw64KRam::Hw64KRam() : HwBase()
   2a748:	e584c000 	str	ip, [r4]
    _mirrorMemoryLen = 64*1024;
   2a74c:	e5843014 	str	r3, [r4, #20]
    _validatorMemoryLen = _mirrorMemoryLen;
   2a750:	e584301c 	str	r3, [r4, #28]
    _pMirrorMemory = NULL;
   2a754:	e5841010 	str	r1, [r4, #16]
    _pValidatorMemory = NULL;
   2a758:	e5841018 	str	r1, [r4, #24]
    digitalWrite(BR_PAGING_RAM_PIN, 0);
   2a75c:	e3a00008 	mov	r0, #8
   2a760:	eb002b21 	bl	353ec <digitalWrite>
}
   2a764:	e1a00004 	mov	r0, r4
   2a768:	e8bd8010 	pop	{r4, pc}
   2a76c:	0006f0f8 	.word	0x0006f0f8
   2a770:	0005488c 	.word	0x0005488c

0002a774 <Hw64KRam::hwReset()>:
    _memoryEmulationMode = false;
   2a774:	e3a03c01 	mov	r3, #256	; 0x100
    digitalWrite(BR_PAGING_RAM_PIN, 0);
   2a778:	e3a01000 	mov	r1, #0
    _memoryEmulationMode = false;
   2a77c:	e580300c 	str	r3, [r0, #12]
    digitalWrite(BR_PAGING_RAM_PIN, 0);
   2a780:	e3a00008 	mov	r0, #8
   2a784:	ea002b18 	b	353ec <digitalWrite>

0002a788 <Hw64KRam::getMirrorMemory()>:
{
   2a788:	e92d4010 	push	{r4, lr}
   2a78c:	e1a04000 	mov	r4, r0
    if (!_pMirrorMemory)
   2a790:	e5900010 	ldr	r0, [r0, #16]
   2a794:	e3500000 	cmp	r0, #0
   2a798:	18bd8010 	popne	{r4, pc}
        _pMirrorMemory = new uint8_t[_mirrorMemoryLen];
   2a79c:	e5940014 	ldr	r0, [r4, #20]
   2a7a0:	eb002b33 	bl	35474 <operator new[](unsigned int)>
   2a7a4:	e5840010 	str	r0, [r4, #16]
}
   2a7a8:	e8bd8010 	pop	{r4, pc}

0002a7ac <Hw64KRam::getValidatorMemory()>:
{
   2a7ac:	e92d4010 	push	{r4, lr}
   2a7b0:	e1a04000 	mov	r4, r0
    if (!_pValidatorMemory)
   2a7b4:	e5900018 	ldr	r0, [r0, #24]
   2a7b8:	e3500000 	cmp	r0, #0
   2a7bc:	18bd8010 	popne	{r4, pc}
        _pValidatorMemory = new uint8_t[_validatorMemoryLen];
   2a7c0:	e594001c 	ldr	r0, [r4, #28]
   2a7c4:	eb002b2a 	bl	35474 <operator new[](unsigned int)>
   2a7c8:	e5840018 	str	r0, [r4, #24]
}
   2a7cc:	e8bd8010 	pop	{r4, pc}

0002a7d0 <Hw64KRam::setMemoryPagingEnable(bool)>:
    virtual void setMemoryEmulationMode(bool pageOut);

    // Set paging enable
    virtual void setMemoryPagingEnable(bool val)
    {
        _pagingEnabled = val;
   2a7d0:	e5c0100d 	strb	r1, [r0, #13]
    }
   2a7d4:	e12fff1e 	bx	lr

0002a7d8 <HwBase::setMirrorMode(bool)>:
}

// Page out RAM/ROM due to emulation
void HwBase::setMemoryEmulationMode([[maybe_unused]] bool val)
{
}
   2a7d8:	e12fff1e 	bx	lr

0002a7dc <HwBase::mirrorClone()>:

// Mirror clone
void HwBase::mirrorClone()
{

}
   2a7dc:	e12fff1e 	bx	lr

0002a7e0 <HwBase::handleBusActionComplete(BR_BUS_ACTION, BR_BUS_ACTION_REASON)>:

// Handle a completed bus action
void HwBase::handleBusActionComplete([[maybe_unused]]BR_BUS_ACTION actionType, [[maybe_unused]] BR_BUS_ACTION_REASON reason)
{
}
   2a7e0:	e12fff1e 	bx	lr

0002a7e4 <HwBase::handleMemOrIOReq(unsigned long, unsigned long, unsigned long, unsigned long&)>:

// Handle a request for memory or IO - or possibly something like in interrupt vector in Z80
void HwBase::handleMemOrIOReq([[maybe_unused]] uint32_t addr, [[maybe_unused]] uint32_t data, 
            [[maybe_unused]] uint32_t flags, [[maybe_unused]] uint32_t& retVal)
{
}
   2a7e4:	e12fff1e 	bx	lr

0002a7e8 <HwBase::blockWrite(unsigned long, unsigned char const*, unsigned long, bool, bool)>:
// Block access to hardware
BR_RETURN_TYPE HwBase::blockWrite([[maybe_unused]] uint32_t addr, [[maybe_unused]] const uint8_t* pBuf, 
            [[maybe_unused]] uint32_t len, [[maybe_unused]] bool busRqAndRelease, [[maybe_unused]] bool iorq)
{
    return BR_NOT_HANDLED;
}
   2a7e8:	e3a00004 	mov	r0, #4
   2a7ec:	e12fff1e 	bx	lr

0002a7f0 <HwBase::getMirrorMemForAddr(unsigned long)>:

// Get mirror memory for address
uint8_t* HwBase::getMirrorMemForAddr([[maybe_unused]]uint32_t addr)
{
    return NULL;
}
   2a7f0:	e3a00000 	mov	r0, #0
   2a7f4:	e12fff1e 	bx	lr

0002a7f8 <HwBase::configure(char const*, char const*)>:

// Configure
void HwBase::configure([[maybe_unused]] const char* name, [[maybe_unused]] const char* jsonConfig)
{

   2a7f8:	e12fff1e 	bx	lr

0002a7fc <HwBase::HwBase()>:
HwBase::HwBase()
   2a7fc:	e59f3024 	ldr	r3, [pc, #36]	; 2a828 <HwBase::HwBase()+0x2c>
   2a800:	e92d4010 	push	{r4, lr}
   2a804:	e5803000 	str	r3, [r0]
   2a808:	e1a04000 	mov	r4, r0
    HwManager::add(this);
   2a80c:	eb0002d8 	bl	2b374 <HwManager::add(HwBase*)>
    _enabled = false;
   2a810:	e3a02000 	mov	r2, #0
    _pName = _baseName;
   2a814:	e59f3010 	ldr	r3, [pc, #16]	; 2a82c <HwBase::HwBase()+0x30>
    _enabled = false;
   2a818:	e5c42004 	strb	r2, [r4, #4]
    _pName = _baseName;
   2a81c:	e5843008 	str	r3, [r4, #8]
}
   2a820:	e1a00004 	mov	r0, r4
   2a824:	e8bd8010 	pop	{r4, pc}
   2a828:	000549dc 	.word	0x000549dc
   2a82c:	00054a1c 	.word	0x00054a1c

0002a830 <HwManager::busActionCompleteStatic(BR_BUS_ACTION, BR_BUS_ACTION_REASON)>:
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Callbacks/Hooks
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void HwManager::busActionCompleteStatic(BR_BUS_ACTION actionType, BR_BUS_ACTION_REASON reason)
{
   2a830:	e92d4070 	push	{r4, r5, r6, lr}
    // LogWrite(FromHwManager, LOG_DEBUG, "busActionComplete %d numHw %d en %s reason %d", actionType, _numHardware,
    //         (_numHardware > 0) ? (_pHw[0]->isEnabled() ? "Y" : "N") : "X", reason);
 
    // Iterate hardware
    for (int i = 0; i < _numHardware; i++)
   2a834:	e59f43f0 	ldr	r4, [pc, #1008]	; 2ac2c <HwManager::busActionCompleteStatic(BR_BUS_ACTION, BR_BUS_ACTION_REASON)+0x3fc>
   2a838:	e5943000 	ldr	r3, [r4]
   2a83c:	e3530000 	cmp	r3, #0
   2a840:	d8bd8070 	pople	{r4, r5, r6, pc}
   2a844:	e1a05000 	mov	r5, r0
        if (_pHw[i] && _pHw[i]->isEnabled())
   2a848:	e5940004 	ldr	r0, [r4, #4]
   2a84c:	e1a06001 	mov	r6, r1
   2a850:	e3500000 	cmp	r0, #0
   2a854:	0a000008 	beq	2a87c <HwManager::busActionCompleteStatic(BR_BUS_ACTION, BR_BUS_ACTION_REASON)+0x4c>
   2a858:	e5903000 	ldr	r3, [r0]
   2a85c:	e59f23cc 	ldr	r2, [pc, #972]	; 2ac30 <HwManager::busActionCompleteStatic(BR_BUS_ACTION, BR_BUS_ACTION_REASON)+0x400>
   2a860:	e5933030 	ldr	r3, [r3, #48]	; 0x30
   2a864:	e1530002 	cmp	r3, r2
        return _enabled;
   2a868:	05d00004 	ldrbeq	r0, [r0, #4]
   2a86c:	1a0000a4 	bne	2ab04 <HwManager::busActionCompleteStatic(BR_BUS_ACTION, BR_BUS_ACTION_REASON)+0x2d4>
   2a870:	e3500000 	cmp	r0, #0
   2a874:	1a000084 	bne	2aa8c <HwManager::busActionCompleteStatic(BR_BUS_ACTION, BR_BUS_ACTION_REASON)+0x25c>
   2a878:	e5943000 	ldr	r3, [r4]
    for (int i = 0; i < _numHardware; i++)
   2a87c:	e3530001 	cmp	r3, #1
   2a880:	d8bd8070 	pople	{r4, r5, r6, pc}
        if (_pHw[i] && _pHw[i]->isEnabled())
   2a884:	e5940008 	ldr	r0, [r4, #8]
   2a888:	e3500000 	cmp	r0, #0
   2a88c:	0a000008 	beq	2a8b4 <HwManager::busActionCompleteStatic(BR_BUS_ACTION, BR_BUS_ACTION_REASON)+0x84>
   2a890:	e5903000 	ldr	r3, [r0]
   2a894:	e59f2394 	ldr	r2, [pc, #916]	; 2ac30 <HwManager::busActionCompleteStatic(BR_BUS_ACTION, BR_BUS_ACTION_REASON)+0x400>
   2a898:	e5933030 	ldr	r3, [r3, #48]	; 0x30
   2a89c:	e1530002 	cmp	r3, r2
   2a8a0:	05d00004 	ldrbeq	r0, [r0, #4]
   2a8a4:	1a0000be 	bne	2aba4 <HwManager::busActionCompleteStatic(BR_BUS_ACTION, BR_BUS_ACTION_REASON)+0x374>
   2a8a8:	e3500000 	cmp	r0, #0
   2a8ac:	1a0000a8 	bne	2ab54 <HwManager::busActionCompleteStatic(BR_BUS_ACTION, BR_BUS_ACTION_REASON)+0x324>
   2a8b0:	e5943000 	ldr	r3, [r4]
    for (int i = 0; i < _numHardware; i++)
   2a8b4:	e3530002 	cmp	r3, #2
   2a8b8:	d8bd8070 	pople	{r4, r5, r6, pc}
        if (_pHw[i] && _pHw[i]->isEnabled())
   2a8bc:	e594000c 	ldr	r0, [r4, #12]
   2a8c0:	e3500000 	cmp	r0, #0
   2a8c4:	0a000008 	beq	2a8ec <HwManager::busActionCompleteStatic(BR_BUS_ACTION, BR_BUS_ACTION_REASON)+0xbc>
   2a8c8:	e5903000 	ldr	r3, [r0]
   2a8cc:	e59f235c 	ldr	r2, [pc, #860]	; 2ac30 <HwManager::busActionCompleteStatic(BR_BUS_ACTION, BR_BUS_ACTION_REASON)+0x400>
   2a8d0:	e5933030 	ldr	r3, [r3, #48]	; 0x30
   2a8d4:	e1530002 	cmp	r3, r2
   2a8d8:	05d00004 	ldrbeq	r0, [r0, #4]
   2a8dc:	1a0000b2 	bne	2abac <HwManager::busActionCompleteStatic(BR_BUS_ACTION, BR_BUS_ACTION_REASON)+0x37c>
   2a8e0:	e3500000 	cmp	r0, #0
   2a8e4:	1a0000a4 	bne	2ab7c <HwManager::busActionCompleteStatic(BR_BUS_ACTION, BR_BUS_ACTION_REASON)+0x34c>
   2a8e8:	e5943000 	ldr	r3, [r4]
    for (int i = 0; i < _numHardware; i++)
   2a8ec:	e3530003 	cmp	r3, #3
   2a8f0:	d8bd8070 	pople	{r4, r5, r6, pc}
        if (_pHw[i] && _pHw[i]->isEnabled())
   2a8f4:	e5940010 	ldr	r0, [r4, #16]
   2a8f8:	e3500000 	cmp	r0, #0
   2a8fc:	0a000008 	beq	2a924 <HwManager::busActionCompleteStatic(BR_BUS_ACTION, BR_BUS_ACTION_REASON)+0xf4>
   2a900:	e5903000 	ldr	r3, [r0]
   2a904:	e59f2324 	ldr	r2, [pc, #804]	; 2ac30 <HwManager::busActionCompleteStatic(BR_BUS_ACTION, BR_BUS_ACTION_REASON)+0x400>
   2a908:	e5933030 	ldr	r3, [r3, #48]	; 0x30
   2a90c:	e1530002 	cmp	r3, r2
   2a910:	05d00004 	ldrbeq	r0, [r0, #4]
   2a914:	1a0000ae 	bne	2abd4 <HwManager::busActionCompleteStatic(BR_BUS_ACTION, BR_BUS_ACTION_REASON)+0x3a4>
   2a918:	e3500000 	cmp	r0, #0
   2a91c:	1a000064 	bne	2aab4 <HwManager::busActionCompleteStatic(BR_BUS_ACTION, BR_BUS_ACTION_REASON)+0x284>
   2a920:	e5943000 	ldr	r3, [r4]
    for (int i = 0; i < _numHardware; i++)
   2a924:	e3530004 	cmp	r3, #4
   2a928:	d8bd8070 	pople	{r4, r5, r6, pc}
        if (_pHw[i] && _pHw[i]->isEnabled())
   2a92c:	e5940014 	ldr	r0, [r4, #20]
   2a930:	e3500000 	cmp	r0, #0
   2a934:	0a000008 	beq	2a95c <HwManager::busActionCompleteStatic(BR_BUS_ACTION, BR_BUS_ACTION_REASON)+0x12c>
   2a938:	e5903000 	ldr	r3, [r0]
   2a93c:	e59f22ec 	ldr	r2, [pc, #748]	; 2ac30 <HwManager::busActionCompleteStatic(BR_BUS_ACTION, BR_BUS_ACTION_REASON)+0x400>
   2a940:	e5933030 	ldr	r3, [r3, #48]	; 0x30
   2a944:	e1530002 	cmp	r3, r2
   2a948:	05d00004 	ldrbeq	r0, [r0, #4]
   2a94c:	1a0000aa 	bne	2abfc <HwManager::busActionCompleteStatic(BR_BUS_ACTION, BR_BUS_ACTION_REASON)+0x3cc>
   2a950:	e3500000 	cmp	r0, #0
   2a954:	1a000060 	bne	2aadc <HwManager::busActionCompleteStatic(BR_BUS_ACTION, BR_BUS_ACTION_REASON)+0x2ac>
   2a958:	e5943000 	ldr	r3, [r4]
    for (int i = 0; i < _numHardware; i++)
   2a95c:	e3530005 	cmp	r3, #5
   2a960:	d8bd8070 	pople	{r4, r5, r6, pc}
        if (_pHw[i] && _pHw[i]->isEnabled())
   2a964:	e5940018 	ldr	r0, [r4, #24]
   2a968:	e3500000 	cmp	r0, #0
   2a96c:	0a000008 	beq	2a994 <HwManager::busActionCompleteStatic(BR_BUS_ACTION, BR_BUS_ACTION_REASON)+0x164>
   2a970:	e5903000 	ldr	r3, [r0]
   2a974:	e59f22b4 	ldr	r2, [pc, #692]	; 2ac30 <HwManager::busActionCompleteStatic(BR_BUS_ACTION, BR_BUS_ACTION_REASON)+0x400>
   2a978:	e5933030 	ldr	r3, [r3, #48]	; 0x30
   2a97c:	e1530002 	cmp	r3, r2
   2a980:	05d00004 	ldrbeq	r0, [r0, #4]
   2a984:	1a00009e 	bne	2ac04 <HwManager::busActionCompleteStatic(BR_BUS_ACTION, BR_BUS_ACTION_REASON)+0x3d4>
   2a988:	e3500000 	cmp	r0, #0
   2a98c:	1a000060 	bne	2ab14 <HwManager::busActionCompleteStatic(BR_BUS_ACTION, BR_BUS_ACTION_REASON)+0x2e4>
   2a990:	e5943000 	ldr	r3, [r4]
    for (int i = 0; i < _numHardware; i++)
   2a994:	e3530006 	cmp	r3, #6
   2a998:	d8bd8070 	pople	{r4, r5, r6, pc}
        if (_pHw[i] && _pHw[i]->isEnabled())
   2a99c:	e594001c 	ldr	r0, [r4, #28]
   2a9a0:	e3500000 	cmp	r0, #0
   2a9a4:	0a000008 	beq	2a9cc <HwManager::busActionCompleteStatic(BR_BUS_ACTION, BR_BUS_ACTION_REASON)+0x19c>
   2a9a8:	e5903000 	ldr	r3, [r0]
   2a9ac:	e59f227c 	ldr	r2, [pc, #636]	; 2ac30 <HwManager::busActionCompleteStatic(BR_BUS_ACTION, BR_BUS_ACTION_REASON)+0x400>
   2a9b0:	e5933030 	ldr	r3, [r3, #48]	; 0x30
   2a9b4:	e1530002 	cmp	r3, r2
   2a9b8:	05d00004 	ldrbeq	r0, [r0, #4]
   2a9bc:	1a000092 	bne	2ac0c <HwManager::busActionCompleteStatic(BR_BUS_ACTION, BR_BUS_ACTION_REASON)+0x3dc>
   2a9c0:	e3500000 	cmp	r0, #0
   2a9c4:	1a00005a 	bne	2ab34 <HwManager::busActionCompleteStatic(BR_BUS_ACTION, BR_BUS_ACTION_REASON)+0x304>
   2a9c8:	e5943000 	ldr	r3, [r4]
    for (int i = 0; i < _numHardware; i++)
   2a9cc:	e3530007 	cmp	r3, #7
   2a9d0:	d8bd8070 	pople	{r4, r5, r6, pc}
        if (_pHw[i] && _pHw[i]->isEnabled())
   2a9d4:	e5940020 	ldr	r0, [r4, #32]
   2a9d8:	e3500000 	cmp	r0, #0
   2a9dc:	0a000008 	beq	2aa04 <HwManager::busActionCompleteStatic(BR_BUS_ACTION, BR_BUS_ACTION_REASON)+0x1d4>
   2a9e0:	e5903000 	ldr	r3, [r0]
   2a9e4:	e59f2244 	ldr	r2, [pc, #580]	; 2ac30 <HwManager::busActionCompleteStatic(BR_BUS_ACTION, BR_BUS_ACTION_REASON)+0x400>
   2a9e8:	e5933030 	ldr	r3, [r3, #48]	; 0x30
   2a9ec:	e1530002 	cmp	r3, r2
   2a9f0:	05d00004 	ldrbeq	r0, [r0, #4]
   2a9f4:	1a000086 	bne	2ac14 <HwManager::busActionCompleteStatic(BR_BUS_ACTION, BR_BUS_ACTION_REASON)+0x3e4>
   2a9f8:	e3500000 	cmp	r0, #0
   2a9fc:	1a00006c 	bne	2abb4 <HwManager::busActionCompleteStatic(BR_BUS_ACTION, BR_BUS_ACTION_REASON)+0x384>
   2aa00:	e5943000 	ldr	r3, [r4]
    for (int i = 0; i < _numHardware; i++)
   2aa04:	e3530008 	cmp	r3, #8
   2aa08:	d8bd8070 	pople	{r4, r5, r6, pc}
        if (_pHw[i] && _pHw[i]->isEnabled())
   2aa0c:	e5940024 	ldr	r0, [r4, #36]	; 0x24
   2aa10:	e3500000 	cmp	r0, #0
   2aa14:	0a000008 	beq	2aa3c <HwManager::busActionCompleteStatic(BR_BUS_ACTION, BR_BUS_ACTION_REASON)+0x20c>
   2aa18:	e5903000 	ldr	r3, [r0]
   2aa1c:	e59f220c 	ldr	r2, [pc, #524]	; 2ac30 <HwManager::busActionCompleteStatic(BR_BUS_ACTION, BR_BUS_ACTION_REASON)+0x400>
   2aa20:	e5933030 	ldr	r3, [r3, #48]	; 0x30
   2aa24:	e1530002 	cmp	r3, r2
   2aa28:	05d00004 	ldrbeq	r0, [r0, #4]
   2aa2c:	1a00007a 	bne	2ac1c <HwManager::busActionCompleteStatic(BR_BUS_ACTION, BR_BUS_ACTION_REASON)+0x3ec>
   2aa30:	e3500000 	cmp	r0, #0
   2aa34:	1a000068 	bne	2abdc <HwManager::busActionCompleteStatic(BR_BUS_ACTION, BR_BUS_ACTION_REASON)+0x3ac>
   2aa38:	e5943000 	ldr	r3, [r4]
    for (int i = 0; i < _numHardware; i++)
   2aa3c:	e3530009 	cmp	r3, #9
   2aa40:	d8bd8070 	pople	{r4, r5, r6, pc}
        if (_pHw[i] && _pHw[i]->isEnabled())
   2aa44:	e5940028 	ldr	r0, [r4, #40]	; 0x28
   2aa48:	e3500000 	cmp	r0, #0
   2aa4c:	08bd8070 	popeq	{r4, r5, r6, pc}
   2aa50:	e5903000 	ldr	r3, [r0]
   2aa54:	e59f21d4 	ldr	r2, [pc, #468]	; 2ac30 <HwManager::busActionCompleteStatic(BR_BUS_ACTION, BR_BUS_ACTION_REASON)+0x400>
   2aa58:	e5933030 	ldr	r3, [r3, #48]	; 0x30
   2aa5c:	e1530002 	cmp	r3, r2
   2aa60:	1a00006f 	bne	2ac24 <HwManager::busActionCompleteStatic(BR_BUS_ACTION, BR_BUS_ACTION_REASON)+0x3f4>
   2aa64:	e5d00004 	ldrb	r0, [r0, #4]
   2aa68:	e3500000 	cmp	r0, #0
   2aa6c:	08bd8070 	popeq	{r4, r5, r6, pc}
            _pHw[i]->handleBusActionComplete(actionType, reason);
   2aa70:	e5940028 	ldr	r0, [r4, #40]	; 0x28
   2aa74:	e1a02006 	mov	r2, r6
   2aa78:	e5903000 	ldr	r3, [r0]
   2aa7c:	e1a01005 	mov	r1, r5
}
   2aa80:	e8bd4070 	pop	{r4, r5, r6, lr}
            _pHw[i]->handleBusActionComplete(actionType, reason);
   2aa84:	e5933000 	ldr	r3, [r3]
   2aa88:	e12fff13 	bx	r3
   2aa8c:	e5940004 	ldr	r0, [r4, #4]
   2aa90:	e1a02006 	mov	r2, r6
   2aa94:	e5903000 	ldr	r3, [r0]
   2aa98:	e1a01005 	mov	r1, r5
   2aa9c:	e5933000 	ldr	r3, [r3]
   2aaa0:	e12fff33 	blx	r3
   2aaa4:	e5943000 	ldr	r3, [r4]
    for (int i = 0; i < _numHardware; i++)
   2aaa8:	e3530001 	cmp	r3, #1
   2aaac:	caffff74 	bgt	2a884 <HwManager::busActionCompleteStatic(BR_BUS_ACTION, BR_BUS_ACTION_REASON)+0x54>
   2aab0:	e8bd8070 	pop	{r4, r5, r6, pc}
            _pHw[i]->handleBusActionComplete(actionType, reason);
   2aab4:	e5940010 	ldr	r0, [r4, #16]
   2aab8:	e1a02006 	mov	r2, r6
   2aabc:	e5903000 	ldr	r3, [r0]
   2aac0:	e1a01005 	mov	r1, r5
   2aac4:	e5933000 	ldr	r3, [r3]
   2aac8:	e12fff33 	blx	r3
   2aacc:	e5943000 	ldr	r3, [r4]
    for (int i = 0; i < _numHardware; i++)
   2aad0:	e3530004 	cmp	r3, #4
   2aad4:	caffff94 	bgt	2a92c <HwManager::busActionCompleteStatic(BR_BUS_ACTION, BR_BUS_ACTION_REASON)+0xfc>
   2aad8:	e8bd8070 	pop	{r4, r5, r6, pc}
            _pHw[i]->handleBusActionComplete(actionType, reason);
   2aadc:	e5940014 	ldr	r0, [r4, #20]
   2aae0:	e1a02006 	mov	r2, r6
   2aae4:	e5903000 	ldr	r3, [r0]
   2aae8:	e1a01005 	mov	r1, r5
   2aaec:	e5933000 	ldr	r3, [r3]
   2aaf0:	e12fff33 	blx	r3
   2aaf4:	e5943000 	ldr	r3, [r4]
    for (int i = 0; i < _numHardware; i++)
   2aaf8:	e3530005 	cmp	r3, #5
   2aafc:	caffff98 	bgt	2a964 <HwManager::busActionCompleteStatic(BR_BUS_ACTION, BR_BUS_ACTION_REASON)+0x134>
   2ab00:	e8bd8070 	pop	{r4, r5, r6, pc}
        if (_pHw[i] && _pHw[i]->isEnabled())
   2ab04:	e12fff33 	blx	r3
   2ab08:	e3500000 	cmp	r0, #0
   2ab0c:	0affff59 	beq	2a878 <HwManager::busActionCompleteStatic(BR_BUS_ACTION, BR_BUS_ACTION_REASON)+0x48>
   2ab10:	eaffffdd 	b	2aa8c <HwManager::busActionCompleteStatic(BR_BUS_ACTION, BR_BUS_ACTION_REASON)+0x25c>
            _pHw[i]->handleBusActionComplete(actionType, reason);
   2ab14:	e5940018 	ldr	r0, [r4, #24]
   2ab18:	e1a02006 	mov	r2, r6
   2ab1c:	e5903000 	ldr	r3, [r0]
   2ab20:	e1a01005 	mov	r1, r5
   2ab24:	e5933000 	ldr	r3, [r3]
   2ab28:	e12fff33 	blx	r3
   2ab2c:	e5943000 	ldr	r3, [r4]
   2ab30:	eaffff97 	b	2a994 <HwManager::busActionCompleteStatic(BR_BUS_ACTION, BR_BUS_ACTION_REASON)+0x164>
   2ab34:	e594001c 	ldr	r0, [r4, #28]
   2ab38:	e1a02006 	mov	r2, r6
   2ab3c:	e5903000 	ldr	r3, [r0]
   2ab40:	e1a01005 	mov	r1, r5
   2ab44:	e5933000 	ldr	r3, [r3]
   2ab48:	e12fff33 	blx	r3
   2ab4c:	e5943000 	ldr	r3, [r4]
   2ab50:	eaffff9d 	b	2a9cc <HwManager::busActionCompleteStatic(BR_BUS_ACTION, BR_BUS_ACTION_REASON)+0x19c>
   2ab54:	e5940008 	ldr	r0, [r4, #8]
   2ab58:	e1a02006 	mov	r2, r6
   2ab5c:	e5903000 	ldr	r3, [r0]
   2ab60:	e1a01005 	mov	r1, r5
   2ab64:	e5933000 	ldr	r3, [r3]
   2ab68:	e12fff33 	blx	r3
   2ab6c:	e5943000 	ldr	r3, [r4]
    for (int i = 0; i < _numHardware; i++)
   2ab70:	e3530002 	cmp	r3, #2
   2ab74:	caffff50 	bgt	2a8bc <HwManager::busActionCompleteStatic(BR_BUS_ACTION, BR_BUS_ACTION_REASON)+0x8c>
   2ab78:	e8bd8070 	pop	{r4, r5, r6, pc}
            _pHw[i]->handleBusActionComplete(actionType, reason);
   2ab7c:	e594000c 	ldr	r0, [r4, #12]
   2ab80:	e1a02006 	mov	r2, r6
   2ab84:	e5903000 	ldr	r3, [r0]
   2ab88:	e1a01005 	mov	r1, r5
   2ab8c:	e5933000 	ldr	r3, [r3]
   2ab90:	e12fff33 	blx	r3
   2ab94:	e5943000 	ldr	r3, [r4]
    for (int i = 0; i < _numHardware; i++)
   2ab98:	e3530003 	cmp	r3, #3
   2ab9c:	caffff54 	bgt	2a8f4 <HwManager::busActionCompleteStatic(BR_BUS_ACTION, BR_BUS_ACTION_REASON)+0xc4>
   2aba0:	e8bd8070 	pop	{r4, r5, r6, pc}
        if (_pHw[i] && _pHw[i]->isEnabled())
   2aba4:	e12fff33 	blx	r3
   2aba8:	eaffff3e 	b	2a8a8 <HwManager::busActionCompleteStatic(BR_BUS_ACTION, BR_BUS_ACTION_REASON)+0x78>
   2abac:	e12fff33 	blx	r3
   2abb0:	eaffff4a 	b	2a8e0 <HwManager::busActionCompleteStatic(BR_BUS_ACTION, BR_BUS_ACTION_REASON)+0xb0>
            _pHw[i]->handleBusActionComplete(actionType, reason);
   2abb4:	e5940020 	ldr	r0, [r4, #32]
   2abb8:	e1a02006 	mov	r2, r6
   2abbc:	e5903000 	ldr	r3, [r0]
   2abc0:	e1a01005 	mov	r1, r5
   2abc4:	e5933000 	ldr	r3, [r3]
   2abc8:	e12fff33 	blx	r3
   2abcc:	e5943000 	ldr	r3, [r4]
   2abd0:	eaffff8b 	b	2aa04 <HwManager::busActionCompleteStatic(BR_BUS_ACTION, BR_BUS_ACTION_REASON)+0x1d4>
        if (_pHw[i] && _pHw[i]->isEnabled())
   2abd4:	e12fff33 	blx	r3
   2abd8:	eaffff4e 	b	2a918 <HwManager::busActionCompleteStatic(BR_BUS_ACTION, BR_BUS_ACTION_REASON)+0xe8>
            _pHw[i]->handleBusActionComplete(actionType, reason);
   2abdc:	e5940024 	ldr	r0, [r4, #36]	; 0x24
   2abe0:	e1a02006 	mov	r2, r6
   2abe4:	e5903000 	ldr	r3, [r0]
   2abe8:	e1a01005 	mov	r1, r5
   2abec:	e5933000 	ldr	r3, [r3]
   2abf0:	e12fff33 	blx	r3
   2abf4:	e5943000 	ldr	r3, [r4]
   2abf8:	eaffff8f 	b	2aa3c <HwManager::busActionCompleteStatic(BR_BUS_ACTION, BR_BUS_ACTION_REASON)+0x20c>
        if (_pHw[i] && _pHw[i]->isEnabled())
   2abfc:	e12fff33 	blx	r3
   2ac00:	eaffff52 	b	2a950 <HwManager::busActionCompleteStatic(BR_BUS_ACTION, BR_BUS_ACTION_REASON)+0x120>
   2ac04:	e12fff33 	blx	r3
   2ac08:	eaffff5e 	b	2a988 <HwManager::busActionCompleteStatic(BR_BUS_ACTION, BR_BUS_ACTION_REASON)+0x158>
   2ac0c:	e12fff33 	blx	r3
   2ac10:	eaffff6a 	b	2a9c0 <HwManager::busActionCompleteStatic(BR_BUS_ACTION, BR_BUS_ACTION_REASON)+0x190>
   2ac14:	e12fff33 	blx	r3
   2ac18:	eaffff76 	b	2a9f8 <HwManager::busActionCompleteStatic(BR_BUS_ACTION, BR_BUS_ACTION_REASON)+0x1c8>
   2ac1c:	e12fff33 	blx	r3
   2ac20:	eaffff82 	b	2aa30 <HwManager::busActionCompleteStatic(BR_BUS_ACTION, BR_BUS_ACTION_REASON)+0x200>
   2ac24:	e12fff33 	blx	r3
   2ac28:	eaffff8e 	b	2aa68 <HwManager::busActionCompleteStatic(BR_BUS_ACTION, BR_BUS_ACTION_REASON)+0x238>
   2ac2c:	00074d68 	.word	0x00074d68
   2ac30:	0002a098 	.word	0x0002a098

0002ac34 <HwManager::handleWaitInterruptStatic(unsigned long, unsigned long, unsigned long, unsigned long&)>:

void HwManager::handleWaitInterruptStatic(uint32_t addr, uint32_t data, 
        uint32_t flags, uint32_t& retVal)
{
   2ac34:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
    // Iterate hardware
    for (int i = 0; i < _numHardware; i++)
   2ac38:	e59f4430 	ldr	r4, [pc, #1072]	; 2b070 <HwManager::handleWaitInterruptStatic(unsigned long, unsigned long, unsigned long, unsigned long&)+0x43c>
{
   2ac3c:	e24dd00c 	sub	sp, sp, #12
    for (int i = 0; i < _numHardware; i++)
   2ac40:	e594c000 	ldr	ip, [r4]
   2ac44:	e35c0000 	cmp	ip, #0
   2ac48:	da000094 	ble	2aea0 <HwManager::handleWaitInterruptStatic(unsigned long, unsigned long, unsigned long, unsigned long&)+0x26c>
   2ac4c:	e1a05000 	mov	r5, r0
        if (_pHw[i] && _pHw[i]->isEnabled())
   2ac50:	e5940004 	ldr	r0, [r4, #4]
   2ac54:	e1a07003 	mov	r7, r3
   2ac58:	e3500000 	cmp	r0, #0
   2ac5c:	e1a08002 	mov	r8, r2
   2ac60:	e1a06001 	mov	r6, r1
   2ac64:	0a000008 	beq	2ac8c <HwManager::handleWaitInterruptStatic(unsigned long, unsigned long, unsigned long, unsigned long&)+0x58>
   2ac68:	e5903000 	ldr	r3, [r0]
   2ac6c:	e59f2400 	ldr	r2, [pc, #1024]	; 2b074 <HwManager::handleWaitInterruptStatic(unsigned long, unsigned long, unsigned long, unsigned long&)+0x440>
   2ac70:	e5933030 	ldr	r3, [r3, #48]	; 0x30
   2ac74:	e1530002 	cmp	r3, r2
   2ac78:	05d00004 	ldrbeq	r0, [r0, #4]
   2ac7c:	1a0000a9 	bne	2af28 <HwManager::handleWaitInterruptStatic(unsigned long, unsigned long, unsigned long, unsigned long&)+0x2f4>
   2ac80:	e3500000 	cmp	r0, #0
   2ac84:	1a000087 	bne	2aea8 <HwManager::handleWaitInterruptStatic(unsigned long, unsigned long, unsigned long, unsigned long&)+0x274>
   2ac88:	e594c000 	ldr	ip, [r4]
    for (int i = 0; i < _numHardware; i++)
   2ac8c:	e35c0001 	cmp	ip, #1
   2ac90:	da000082 	ble	2aea0 <HwManager::handleWaitInterruptStatic(unsigned long, unsigned long, unsigned long, unsigned long&)+0x26c>
        if (_pHw[i] && _pHw[i]->isEnabled())
   2ac94:	e5940008 	ldr	r0, [r4, #8]
   2ac98:	e3500000 	cmp	r0, #0
   2ac9c:	0a000008 	beq	2acc4 <HwManager::handleWaitInterruptStatic(unsigned long, unsigned long, unsigned long, unsigned long&)+0x90>
   2aca0:	e5903000 	ldr	r3, [r0]
   2aca4:	e59f23c8 	ldr	r2, [pc, #968]	; 2b074 <HwManager::handleWaitInterruptStatic(unsigned long, unsigned long, unsigned long, unsigned long&)+0x440>
   2aca8:	e5933030 	ldr	r3, [r3, #48]	; 0x30
   2acac:	e1530002 	cmp	r3, r2
   2acb0:	05d00004 	ldrbeq	r0, [r0, #4]
   2acb4:	1a0000c7 	bne	2afd8 <HwManager::handleWaitInterruptStatic(unsigned long, unsigned long, unsigned long, unsigned long&)+0x3a4>
   2acb8:	e3500000 	cmp	r0, #0
   2acbc:	1a0000b1 	bne	2af88 <HwManager::handleWaitInterruptStatic(unsigned long, unsigned long, unsigned long, unsigned long&)+0x354>
   2acc0:	e594c000 	ldr	ip, [r4]
    for (int i = 0; i < _numHardware; i++)
   2acc4:	e35c0002 	cmp	ip, #2
   2acc8:	da000074 	ble	2aea0 <HwManager::handleWaitInterruptStatic(unsigned long, unsigned long, unsigned long, unsigned long&)+0x26c>
        if (_pHw[i] && _pHw[i]->isEnabled())
   2accc:	e594000c 	ldr	r0, [r4, #12]
   2acd0:	e3500000 	cmp	r0, #0
   2acd4:	0a000008 	beq	2acfc <HwManager::handleWaitInterruptStatic(unsigned long, unsigned long, unsigned long, unsigned long&)+0xc8>
   2acd8:	e5903000 	ldr	r3, [r0]
   2acdc:	e59f2390 	ldr	r2, [pc, #912]	; 2b074 <HwManager::handleWaitInterruptStatic(unsigned long, unsigned long, unsigned long, unsigned long&)+0x440>
   2ace0:	e5933030 	ldr	r3, [r3, #48]	; 0x30
   2ace4:	e1530002 	cmp	r3, r2
   2ace8:	05d00004 	ldrbeq	r0, [r0, #4]
   2acec:	1a0000bb 	bne	2afe0 <HwManager::handleWaitInterruptStatic(unsigned long, unsigned long, unsigned long, unsigned long&)+0x3ac>
   2acf0:	e3500000 	cmp	r0, #0
   2acf4:	1a0000ad 	bne	2afb0 <HwManager::handleWaitInterruptStatic(unsigned long, unsigned long, unsigned long, unsigned long&)+0x37c>
   2acf8:	e594c000 	ldr	ip, [r4]
    for (int i = 0; i < _numHardware; i++)
   2acfc:	e35c0003 	cmp	ip, #3
   2ad00:	da000066 	ble	2aea0 <HwManager::handleWaitInterruptStatic(unsigned long, unsigned long, unsigned long, unsigned long&)+0x26c>
        if (_pHw[i] && _pHw[i]->isEnabled())
   2ad04:	e5940010 	ldr	r0, [r4, #16]
   2ad08:	e3500000 	cmp	r0, #0
   2ad0c:	0a000008 	beq	2ad34 <HwManager::handleWaitInterruptStatic(unsigned long, unsigned long, unsigned long, unsigned long&)+0x100>
   2ad10:	e5903000 	ldr	r3, [r0]
   2ad14:	e59f2358 	ldr	r2, [pc, #856]	; 2b074 <HwManager::handleWaitInterruptStatic(unsigned long, unsigned long, unsigned long, unsigned long&)+0x440>
   2ad18:	e5933030 	ldr	r3, [r3, #48]	; 0x30
   2ad1c:	e1530002 	cmp	r3, r2
   2ad20:	05d00004 	ldrbeq	r0, [r0, #4]
   2ad24:	1a0000b9 	bne	2b010 <HwManager::handleWaitInterruptStatic(unsigned long, unsigned long, unsigned long, unsigned long&)+0x3dc>
   2ad28:	e3500000 	cmp	r0, #0
   2ad2c:	1a000067 	bne	2aed0 <HwManager::handleWaitInterruptStatic(unsigned long, unsigned long, unsigned long, unsigned long&)+0x29c>
   2ad30:	e594c000 	ldr	ip, [r4]
    for (int i = 0; i < _numHardware; i++)
   2ad34:	e35c0004 	cmp	ip, #4
   2ad38:	da000058 	ble	2aea0 <HwManager::handleWaitInterruptStatic(unsigned long, unsigned long, unsigned long, unsigned long&)+0x26c>
        if (_pHw[i] && _pHw[i]->isEnabled())
   2ad3c:	e5940014 	ldr	r0, [r4, #20]
   2ad40:	e3500000 	cmp	r0, #0
   2ad44:	0a000008 	beq	2ad6c <HwManager::handleWaitInterruptStatic(unsigned long, unsigned long, unsigned long, unsigned long&)+0x138>
   2ad48:	e5903000 	ldr	r3, [r0]
   2ad4c:	e59f2320 	ldr	r2, [pc, #800]	; 2b074 <HwManager::handleWaitInterruptStatic(unsigned long, unsigned long, unsigned long, unsigned long&)+0x440>
   2ad50:	e5933030 	ldr	r3, [r3, #48]	; 0x30
   2ad54:	e1530002 	cmp	r3, r2
   2ad58:	05d00004 	ldrbeq	r0, [r0, #4]
   2ad5c:	1a0000b7 	bne	2b040 <HwManager::handleWaitInterruptStatic(unsigned long, unsigned long, unsigned long, unsigned long&)+0x40c>
   2ad60:	e3500000 	cmp	r0, #0
   2ad64:	1a000065 	bne	2af00 <HwManager::handleWaitInterruptStatic(unsigned long, unsigned long, unsigned long, unsigned long&)+0x2cc>
   2ad68:	e594c000 	ldr	ip, [r4]
    for (int i = 0; i < _numHardware; i++)
   2ad6c:	e35c0005 	cmp	ip, #5
   2ad70:	da00004a 	ble	2aea0 <HwManager::handleWaitInterruptStatic(unsigned long, unsigned long, unsigned long, unsigned long&)+0x26c>
        if (_pHw[i] && _pHw[i]->isEnabled())
   2ad74:	e5940018 	ldr	r0, [r4, #24]
   2ad78:	e3500000 	cmp	r0, #0
   2ad7c:	0a000008 	beq	2ada4 <HwManager::handleWaitInterruptStatic(unsigned long, unsigned long, unsigned long, unsigned long&)+0x170>
   2ad80:	e5903000 	ldr	r3, [r0]
   2ad84:	e59f22e8 	ldr	r2, [pc, #744]	; 2b074 <HwManager::handleWaitInterruptStatic(unsigned long, unsigned long, unsigned long, unsigned long&)+0x440>
   2ad88:	e5933030 	ldr	r3, [r3, #48]	; 0x30
   2ad8c:	e1530002 	cmp	r3, r2
   2ad90:	05d00004 	ldrbeq	r0, [r0, #4]
   2ad94:	1a0000ab 	bne	2b048 <HwManager::handleWaitInterruptStatic(unsigned long, unsigned long, unsigned long, unsigned long&)+0x414>
   2ad98:	e3500000 	cmp	r0, #0
   2ad9c:	1a000065 	bne	2af38 <HwManager::handleWaitInterruptStatic(unsigned long, unsigned long, unsigned long, unsigned long&)+0x304>
   2ada0:	e594c000 	ldr	ip, [r4]
    for (int i = 0; i < _numHardware; i++)
   2ada4:	e35c0006 	cmp	ip, #6
   2ada8:	da00003c 	ble	2aea0 <HwManager::handleWaitInterruptStatic(unsigned long, unsigned long, unsigned long, unsigned long&)+0x26c>
        if (_pHw[i] && _pHw[i]->isEnabled())
   2adac:	e594001c 	ldr	r0, [r4, #28]
   2adb0:	e3500000 	cmp	r0, #0
   2adb4:	0a000008 	beq	2addc <HwManager::handleWaitInterruptStatic(unsigned long, unsigned long, unsigned long, unsigned long&)+0x1a8>
   2adb8:	e5903000 	ldr	r3, [r0]
   2adbc:	e59f22b0 	ldr	r2, [pc, #688]	; 2b074 <HwManager::handleWaitInterruptStatic(unsigned long, unsigned long, unsigned long, unsigned long&)+0x440>
   2adc0:	e5933030 	ldr	r3, [r3, #48]	; 0x30
   2adc4:	e1530002 	cmp	r3, r2
   2adc8:	05d00004 	ldrbeq	r0, [r0, #4]
   2adcc:	1a00009f 	bne	2b050 <HwManager::handleWaitInterruptStatic(unsigned long, unsigned long, unsigned long, unsigned long&)+0x41c>
   2add0:	e3500000 	cmp	r0, #0
   2add4:	1a000061 	bne	2af60 <HwManager::handleWaitInterruptStatic(unsigned long, unsigned long, unsigned long, unsigned long&)+0x32c>
   2add8:	e594c000 	ldr	ip, [r4]
    for (int i = 0; i < _numHardware; i++)
   2addc:	e35c0007 	cmp	ip, #7
   2ade0:	da00002e 	ble	2aea0 <HwManager::handleWaitInterruptStatic(unsigned long, unsigned long, unsigned long, unsigned long&)+0x26c>
        if (_pHw[i] && _pHw[i]->isEnabled())
   2ade4:	e5940020 	ldr	r0, [r4, #32]
   2ade8:	e3500000 	cmp	r0, #0
   2adec:	0a000008 	beq	2ae14 <HwManager::handleWaitInterruptStatic(unsigned long, unsigned long, unsigned long, unsigned long&)+0x1e0>
   2adf0:	e5903000 	ldr	r3, [r0]
   2adf4:	e59f2278 	ldr	r2, [pc, #632]	; 2b074 <HwManager::handleWaitInterruptStatic(unsigned long, unsigned long, unsigned long, unsigned long&)+0x440>
   2adf8:	e5933030 	ldr	r3, [r3, #48]	; 0x30
   2adfc:	e1530002 	cmp	r3, r2
   2ae00:	05d00004 	ldrbeq	r0, [r0, #4]
   2ae04:	1a000093 	bne	2b058 <HwManager::handleWaitInterruptStatic(unsigned long, unsigned long, unsigned long, unsigned long&)+0x424>
   2ae08:	e3500000 	cmp	r0, #0
   2ae0c:	1a000075 	bne	2afe8 <HwManager::handleWaitInterruptStatic(unsigned long, unsigned long, unsigned long, unsigned long&)+0x3b4>
   2ae10:	e594c000 	ldr	ip, [r4]
    for (int i = 0; i < _numHardware; i++)
   2ae14:	e35c0008 	cmp	ip, #8
   2ae18:	da000020 	ble	2aea0 <HwManager::handleWaitInterruptStatic(unsigned long, unsigned long, unsigned long, unsigned long&)+0x26c>
        if (_pHw[i] && _pHw[i]->isEnabled())
   2ae1c:	e5940024 	ldr	r0, [r4, #36]	; 0x24
   2ae20:	e3500000 	cmp	r0, #0
   2ae24:	0a000008 	beq	2ae4c <HwManager::handleWaitInterruptStatic(unsigned long, unsigned long, unsigned long, unsigned long&)+0x218>
   2ae28:	e5903000 	ldr	r3, [r0]
   2ae2c:	e59f2240 	ldr	r2, [pc, #576]	; 2b074 <HwManager::handleWaitInterruptStatic(unsigned long, unsigned long, unsigned long, unsigned long&)+0x440>
   2ae30:	e5933030 	ldr	r3, [r3, #48]	; 0x30
   2ae34:	e1530002 	cmp	r3, r2
   2ae38:	05d00004 	ldrbeq	r0, [r0, #4]
   2ae3c:	1a000087 	bne	2b060 <HwManager::handleWaitInterruptStatic(unsigned long, unsigned long, unsigned long, unsigned long&)+0x42c>
   2ae40:	e3500000 	cmp	r0, #0
   2ae44:	1a000073 	bne	2b018 <HwManager::handleWaitInterruptStatic(unsigned long, unsigned long, unsigned long, unsigned long&)+0x3e4>
   2ae48:	e594c000 	ldr	ip, [r4]
    for (int i = 0; i < _numHardware; i++)
   2ae4c:	e35c0009 	cmp	ip, #9
   2ae50:	da000012 	ble	2aea0 <HwManager::handleWaitInterruptStatic(unsigned long, unsigned long, unsigned long, unsigned long&)+0x26c>
        if (_pHw[i] && _pHw[i]->isEnabled())
   2ae54:	e5940028 	ldr	r0, [r4, #40]	; 0x28
   2ae58:	e3500000 	cmp	r0, #0
   2ae5c:	0a00000f 	beq	2aea0 <HwManager::handleWaitInterruptStatic(unsigned long, unsigned long, unsigned long, unsigned long&)+0x26c>
   2ae60:	e5903000 	ldr	r3, [r0]
   2ae64:	e59f2208 	ldr	r2, [pc, #520]	; 2b074 <HwManager::handleWaitInterruptStatic(unsigned long, unsigned long, unsigned long, unsigned long&)+0x440>
   2ae68:	e5933030 	ldr	r3, [r3, #48]	; 0x30
   2ae6c:	e1530002 	cmp	r3, r2
   2ae70:	1a00007c 	bne	2b068 <HwManager::handleWaitInterruptStatic(unsigned long, unsigned long, unsigned long, unsigned long&)+0x434>
   2ae74:	e5d00004 	ldrb	r0, [r0, #4]
   2ae78:	e3500000 	cmp	r0, #0
   2ae7c:	0a000007 	beq	2aea0 <HwManager::handleWaitInterruptStatic(unsigned long, unsigned long, unsigned long, unsigned long&)+0x26c>
            _pHw[i]->handleMemOrIOReq(addr, data, flags, retVal);
   2ae80:	e5940028 	ldr	r0, [r4, #40]	; 0x28
   2ae84:	e1a03008 	mov	r3, r8
   2ae88:	e590c000 	ldr	ip, [r0]
   2ae8c:	e58d7000 	str	r7, [sp]
   2ae90:	e1a02006 	mov	r2, r6
   2ae94:	e1a01005 	mov	r1, r5
   2ae98:	e59c4004 	ldr	r4, [ip, #4]
   2ae9c:	e12fff34 	blx	r4
            _debugIOPortBuf[pos].val = data;
            _debugIOPortPosn.hasPut();
        }
#endif
    }
}
   2aea0:	e28dd00c 	add	sp, sp, #12
   2aea4:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
            _pHw[i]->handleMemOrIOReq(addr, data, flags, retVal);
   2aea8:	e5940004 	ldr	r0, [r4, #4]
   2aeac:	e1a03008 	mov	r3, r8
   2aeb0:	e5902000 	ldr	r2, [r0]
   2aeb4:	e58d7000 	str	r7, [sp]
   2aeb8:	e5929004 	ldr	r9, [r2, #4]
   2aebc:	e1a01005 	mov	r1, r5
   2aec0:	e1a02006 	mov	r2, r6
   2aec4:	e12fff39 	blx	r9
   2aec8:	e594c000 	ldr	ip, [r4]
   2aecc:	eaffff6e 	b	2ac8c <HwManager::handleWaitInterruptStatic(unsigned long, unsigned long, unsigned long, unsigned long&)+0x58>
   2aed0:	e5940010 	ldr	r0, [r4, #16]
   2aed4:	e1a03008 	mov	r3, r8
   2aed8:	e5902000 	ldr	r2, [r0]
   2aedc:	e58d7000 	str	r7, [sp]
   2aee0:	e5929004 	ldr	r9, [r2, #4]
   2aee4:	e1a01005 	mov	r1, r5
   2aee8:	e1a02006 	mov	r2, r6
   2aeec:	e12fff39 	blx	r9
   2aef0:	e594c000 	ldr	ip, [r4]
    for (int i = 0; i < _numHardware; i++)
   2aef4:	e35c0004 	cmp	ip, #4
   2aef8:	caffff8f 	bgt	2ad3c <HwManager::handleWaitInterruptStatic(unsigned long, unsigned long, unsigned long, unsigned long&)+0x108>
   2aefc:	eaffffe7 	b	2aea0 <HwManager::handleWaitInterruptStatic(unsigned long, unsigned long, unsigned long, unsigned long&)+0x26c>
            _pHw[i]->handleMemOrIOReq(addr, data, flags, retVal);
   2af00:	e5940014 	ldr	r0, [r4, #20]
   2af04:	e1a03008 	mov	r3, r8
   2af08:	e5902000 	ldr	r2, [r0]
   2af0c:	e58d7000 	str	r7, [sp]
   2af10:	e5929004 	ldr	r9, [r2, #4]
   2af14:	e1a01005 	mov	r1, r5
   2af18:	e1a02006 	mov	r2, r6
   2af1c:	e12fff39 	blx	r9
   2af20:	e594c000 	ldr	ip, [r4]
   2af24:	eaffff90 	b	2ad6c <HwManager::handleWaitInterruptStatic(unsigned long, unsigned long, unsigned long, unsigned long&)+0x138>
        if (_pHw[i] && _pHw[i]->isEnabled())
   2af28:	e12fff33 	blx	r3
   2af2c:	e3500000 	cmp	r0, #0
   2af30:	0affff54 	beq	2ac88 <HwManager::handleWaitInterruptStatic(unsigned long, unsigned long, unsigned long, unsigned long&)+0x54>
   2af34:	eaffffdb 	b	2aea8 <HwManager::handleWaitInterruptStatic(unsigned long, unsigned long, unsigned long, unsigned long&)+0x274>
            _pHw[i]->handleMemOrIOReq(addr, data, flags, retVal);
   2af38:	e5940018 	ldr	r0, [r4, #24]
   2af3c:	e1a03008 	mov	r3, r8
   2af40:	e5902000 	ldr	r2, [r0]
   2af44:	e58d7000 	str	r7, [sp]
   2af48:	e5929004 	ldr	r9, [r2, #4]
   2af4c:	e1a01005 	mov	r1, r5
   2af50:	e1a02006 	mov	r2, r6
   2af54:	e12fff39 	blx	r9
   2af58:	e594c000 	ldr	ip, [r4]
   2af5c:	eaffff90 	b	2ada4 <HwManager::handleWaitInterruptStatic(unsigned long, unsigned long, unsigned long, unsigned long&)+0x170>
   2af60:	e594001c 	ldr	r0, [r4, #28]
   2af64:	e1a03008 	mov	r3, r8
   2af68:	e5902000 	ldr	r2, [r0]
   2af6c:	e58d7000 	str	r7, [sp]
   2af70:	e5929004 	ldr	r9, [r2, #4]
   2af74:	e1a01005 	mov	r1, r5
   2af78:	e1a02006 	mov	r2, r6
   2af7c:	e12fff39 	blx	r9
   2af80:	e594c000 	ldr	ip, [r4]
   2af84:	eaffff94 	b	2addc <HwManager::handleWaitInterruptStatic(unsigned long, unsigned long, unsigned long, unsigned long&)+0x1a8>
   2af88:	e5940008 	ldr	r0, [r4, #8]
   2af8c:	e1a03008 	mov	r3, r8
   2af90:	e5902000 	ldr	r2, [r0]
   2af94:	e58d7000 	str	r7, [sp]
   2af98:	e5929004 	ldr	r9, [r2, #4]
   2af9c:	e1a01005 	mov	r1, r5
   2afa0:	e1a02006 	mov	r2, r6
   2afa4:	e12fff39 	blx	r9
   2afa8:	e594c000 	ldr	ip, [r4]
   2afac:	eaffff44 	b	2acc4 <HwManager::handleWaitInterruptStatic(unsigned long, unsigned long, unsigned long, unsigned long&)+0x90>
   2afb0:	e594000c 	ldr	r0, [r4, #12]
   2afb4:	e1a03008 	mov	r3, r8
   2afb8:	e5902000 	ldr	r2, [r0]
   2afbc:	e58d7000 	str	r7, [sp]
   2afc0:	e5929004 	ldr	r9, [r2, #4]
   2afc4:	e1a01005 	mov	r1, r5
   2afc8:	e1a02006 	mov	r2, r6
   2afcc:	e12fff39 	blx	r9
   2afd0:	e594c000 	ldr	ip, [r4]
   2afd4:	eaffff48 	b	2acfc <HwManager::handleWaitInterruptStatic(unsigned long, unsigned long, unsigned long, unsigned long&)+0xc8>
        if (_pHw[i] && _pHw[i]->isEnabled())
   2afd8:	e12fff33 	blx	r3
   2afdc:	eaffff35 	b	2acb8 <HwManager::handleWaitInterruptStatic(unsigned long, unsigned long, unsigned long, unsigned long&)+0x84>
   2afe0:	e12fff33 	blx	r3
   2afe4:	eaffff41 	b	2acf0 <HwManager::handleWaitInterruptStatic(unsigned long, unsigned long, unsigned long, unsigned long&)+0xbc>
            _pHw[i]->handleMemOrIOReq(addr, data, flags, retVal);
   2afe8:	e5940020 	ldr	r0, [r4, #32]
   2afec:	e1a03008 	mov	r3, r8
   2aff0:	e5902000 	ldr	r2, [r0]
   2aff4:	e58d7000 	str	r7, [sp]
   2aff8:	e5929004 	ldr	r9, [r2, #4]
   2affc:	e1a01005 	mov	r1, r5
   2b000:	e1a02006 	mov	r2, r6
   2b004:	e12fff39 	blx	r9
   2b008:	e594c000 	ldr	ip, [r4]
   2b00c:	eaffff80 	b	2ae14 <HwManager::handleWaitInterruptStatic(unsigned long, unsigned long, unsigned long, unsigned long&)+0x1e0>
        if (_pHw[i] && _pHw[i]->isEnabled())
   2b010:	e12fff33 	blx	r3
   2b014:	eaffff43 	b	2ad28 <HwManager::handleWaitInterruptStatic(unsigned long, unsigned long, unsigned long, unsigned long&)+0xf4>
            _pHw[i]->handleMemOrIOReq(addr, data, flags, retVal);
   2b018:	e5940024 	ldr	r0, [r4, #36]	; 0x24
   2b01c:	e1a03008 	mov	r3, r8
   2b020:	e5902000 	ldr	r2, [r0]
   2b024:	e58d7000 	str	r7, [sp]
   2b028:	e5929004 	ldr	r9, [r2, #4]
   2b02c:	e1a01005 	mov	r1, r5
   2b030:	e1a02006 	mov	r2, r6
   2b034:	e12fff39 	blx	r9
   2b038:	e594c000 	ldr	ip, [r4]
   2b03c:	eaffff82 	b	2ae4c <HwManager::handleWaitInterruptStatic(unsigned long, unsigned long, unsigned long, unsigned long&)+0x218>
        if (_pHw[i] && _pHw[i]->isEnabled())
   2b040:	e12fff33 	blx	r3
   2b044:	eaffff45 	b	2ad60 <HwManager::handleWaitInterruptStatic(unsigned long, unsigned long, unsigned long, unsigned long&)+0x12c>
   2b048:	e12fff33 	blx	r3
   2b04c:	eaffff51 	b	2ad98 <HwManager::handleWaitInterruptStatic(unsigned long, unsigned long, unsigned long, unsigned long&)+0x164>
   2b050:	e12fff33 	blx	r3
   2b054:	eaffff5d 	b	2add0 <HwManager::handleWaitInterruptStatic(unsigned long, unsigned long, unsigned long, unsigned long&)+0x19c>
   2b058:	e12fff33 	blx	r3
   2b05c:	eaffff69 	b	2ae08 <HwManager::handleWaitInterruptStatic(unsigned long, unsigned long, unsigned long, unsigned long&)+0x1d4>
   2b060:	e12fff33 	blx	r3
   2b064:	eaffff75 	b	2ae40 <HwManager::handleWaitInterruptStatic(unsigned long, unsigned long, unsigned long, unsigned long&)+0x20c>
   2b068:	e12fff33 	blx	r3
   2b06c:	eaffff81 	b	2ae78 <HwManager::handleWaitInterruptStatic(unsigned long, unsigned long, unsigned long, unsigned long&)+0x244>
   2b070:	00074d68 	.word	0x00074d68
   2b074:	0002a098 	.word	0x0002a098

0002b078 <HwManager::handleRxMsg(char const*, unsigned char const*, int, char*, int)>:
{
   2b078:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2b07c:	e24ddf5d 	sub	sp, sp, #372	; 0x174
    if (!jsonGetValueForKey("cmdName", pCmdJson, cmdName, MAX_CMD_NAME_STR))
   2b080:	e1a01000 	mov	r1, r0
{
   2b084:	e1a05000 	mov	r5, r0
   2b088:	e1a06003 	mov	r6, r3
    if (!jsonGetValueForKey("cmdName", pCmdJson, cmdName, MAX_CMD_NAME_STR))
   2b08c:	e28d200c 	add	r2, sp, #12
   2b090:	e3a03032 	mov	r3, #50	; 0x32
   2b094:	e59f0230 	ldr	r0, [pc, #560]	; 2b2cc <HwManager::handleRxMsg(char const*, unsigned char const*, int, char*, int)+0x254>
   2b098:	ebffe653 	bl	249ec <jsonGetValueForKey>
   2b09c:	e2504000 	subs	r4, r0, #0
   2b0a0:	0a00000a 	beq	2b0d0 <HwManager::handleRxMsg(char const*, unsigned char const*, int, char*, int)+0x58>
    if (strcasecmp(cmdName, "hwEnable") == 0)
   2b0a4:	e59f1224 	ldr	r1, [pc, #548]	; 2b2d0 <HwManager::handleRxMsg(char const*, unsigned char const*, int, char*, int)+0x258>
   2b0a8:	e28d000c 	add	r0, sp, #12
   2b0ac:	eb0087b6 	bl	4cf8c <strcasecmp>
   2b0b0:	e2507000 	subs	r7, r0, #0
   2b0b4:	0a000008 	beq	2b0dc <HwManager::handleRxMsg(char const*, unsigned char const*, int, char*, int)+0x64>
    else if (strcasecmp(cmdName, "hwList") == 0)
   2b0b8:	e28d000c 	add	r0, sp, #12
   2b0bc:	e59f1210 	ldr	r1, [pc, #528]	; 2b2d4 <HwManager::handleRxMsg(char const*, unsigned char const*, int, char*, int)+0x25c>
   2b0c0:	eb0087b1 	bl	4cf8c <strcasecmp>
   2b0c4:	e2505000 	subs	r5, r0, #0
   2b0c8:	0a00002f 	beq	2b18c <HwManager::handleRxMsg(char const*, unsigned char const*, int, char*, int)+0x114>
        return false;
   2b0cc:	e3a04000 	mov	r4, #0
}
   2b0d0:	e1a00004 	mov	r0, r4
   2b0d4:	e28ddf5d 	add	sp, sp, #372	; 0x174
   2b0d8:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (!jsonGetValueForKey("hwName", pCmdJson, hwName, MAX_CMD_PARAM_STR))
   2b0dc:	e28d2040 	add	r2, sp, #64	; 0x40
   2b0e0:	e3a03064 	mov	r3, #100	; 0x64
   2b0e4:	e1a01005 	mov	r1, r5
   2b0e8:	e59f01e8 	ldr	r0, [pc, #488]	; 2b2d8 <HwManager::handleRxMsg(char const*, unsigned char const*, int, char*, int)+0x260>
   2b0ec:	ebffe63e 	bl	249ec <jsonGetValueForKey>
   2b0f0:	e3500000 	cmp	r0, #0
   2b0f4:	0afffff4 	beq	2b0cc <HwManager::handleRxMsg(char const*, unsigned char const*, int, char*, int)+0x54>
        if (!jsonGetValueForKey("enable", pCmdJson, enableVal, MAX_CMD_PARAM_STR))
   2b0f8:	e1a01005 	mov	r1, r5
   2b0fc:	e28d20a8 	add	r2, sp, #168	; 0xa8
   2b100:	e3a03064 	mov	r3, #100	; 0x64
   2b104:	e59f01d0 	ldr	r0, [pc, #464]	; 2b2dc <HwManager::handleRxMsg(char const*, unsigned char const*, int, char*, int)+0x264>
   2b108:	ebffe637 	bl	249ec <jsonGetValueForKey>
   2b10c:	e2504000 	subs	r4, r0, #0
   2b110:	0affffed 	beq	2b0cc <HwManager::handleRxMsg(char const*, unsigned char const*, int, char*, int)+0x54>
        bool enable = strtoul(enableVal, NULL, 10) != 0;
   2b114:	e28d00a8 	add	r0, sp, #168	; 0xa8
   2b118:	e3a0200a 	mov	r2, #10
   2b11c:	e1a01007 	mov	r1, r7
   2b120:	eb008d21 	bl	4e5ac <strtoul>

// Enable
bool HwManager::enableHw(const char* hwName, bool enable)
{
    // Find hardware and enable
    for (int i = 0; i < _numHardware; i++)
   2b124:	e59f81b4 	ldr	r8, [pc, #436]	; 2b2e0 <HwManager::handleRxMsg(char const*, unsigned char const*, int, char*, int)+0x268>
        bool enable = strtoul(enableVal, NULL, 10) != 0;
   2b128:	e1a09000 	mov	r9, r0
    for (int i = 0; i < _numHardware; i++)
   2b12c:	e5983000 	ldr	r3, [r8]
   2b130:	e3530000 	cmp	r3, #0
   2b134:	da000051 	ble	2b280 <HwManager::handleRxMsg(char const*, unsigned char const*, int, char*, int)+0x208>
   2b138:	e1a05008 	mov	r5, r8
   2b13c:	e59fa1a0 	ldr	sl, [pc, #416]	; 2b2e4 <HwManager::handleRxMsg(char const*, unsigned char const*, int, char*, int)+0x26c>
   2b140:	ea000008 	b	2b168 <HwManager::handleRxMsg(char const*, unsigned char const*, int, char*, int)+0xf0>
        return _pName;
   2b144:	e5900008 	ldr	r0, [r0, #8]
    {
        if (!_pHw[i])
            continue;
        if (strcasecmp(_pHw[i]->name(), hwName) == 0)
   2b148:	e28d1040 	add	r1, sp, #64	; 0x40
   2b14c:	eb00878e 	bl	4cf8c <strcasecmp>
   2b150:	e3500000 	cmp	r0, #0
   2b154:	0a00004e 	beq	2b294 <HwManager::handleRxMsg(char const*, unsigned char const*, int, char*, int)+0x21c>
   2b158:	e5983000 	ldr	r3, [r8]
    for (int i = 0; i < _numHardware; i++)
   2b15c:	e2877001 	add	r7, r7, #1
   2b160:	e1570003 	cmp	r7, r3
   2b164:	aa000045 	bge	2b280 <HwManager::handleRxMsg(char const*, unsigned char const*, int, char*, int)+0x208>
        if (!_pHw[i])
   2b168:	e5b50004 	ldr	r0, [r5, #4]!
   2b16c:	e3500000 	cmp	r0, #0
   2b170:	0afffff9 	beq	2b15c <HwManager::handleRxMsg(char const*, unsigned char const*, int, char*, int)+0xe4>
        if (strcasecmp(_pHw[i]->name(), hwName) == 0)
   2b174:	e5903000 	ldr	r3, [r0]
   2b178:	e5933038 	ldr	r3, [r3, #56]	; 0x38
   2b17c:	e153000a 	cmp	r3, sl
   2b180:	0affffef 	beq	2b144 <HwManager::handleRxMsg(char const*, unsigned char const*, int, char*, int)+0xcc>
   2b184:	e12fff33 	blx	r3
   2b188:	eaffffee 	b	2b148 <HwManager::handleRxMsg(char const*, unsigned char const*, int, char*, int)+0xd0>
        for (int i = 0; i < _numHardware; i++)
   2b18c:	e59f814c 	ldr	r8, [pc, #332]	; 2b2e0 <HwManager::handleRxMsg(char const*, unsigned char const*, int, char*, int)+0x268>
        strlcpy(pRespJson, "\"err\":\"ok\",\"hwList\":[", maxRespLen);
   2b190:	e59d2198 	ldr	r2, [sp, #408]	; 0x198
   2b194:	e59f114c 	ldr	r1, [pc, #332]	; 2b2e8 <HwManager::handleRxMsg(char const*, unsigned char const*, int, char*, int)+0x270>
   2b198:	e1a00006 	mov	r0, r6
   2b19c:	eb008909 	bl	4d5c8 <strlcpy>
        for (int i = 0; i < _numHardware; i++)
   2b1a0:	e5983000 	ldr	r3, [r8]
   2b1a4:	e3530000 	cmp	r3, #0
   2b1a8:	da000023 	ble	2b23c <HwManager::handleRxMsg(char const*, unsigned char const*, int, char*, int)+0x1c4>
   2b1ac:	e1a07008 	mov	r7, r8
        bool commaNeeded = false;
   2b1b0:	e1a09005 	mov	r9, r5
   2b1b4:	e59fb128 	ldr	fp, [pc, #296]	; 2b2e4 <HwManager::handleRxMsg(char const*, unsigned char const*, int, char*, int)+0x26c>
   2b1b8:	e59fa12c 	ldr	sl, [pc, #300]	; 2b2ec <HwManager::handleRxMsg(char const*, unsigned char const*, int, char*, int)+0x274>
   2b1bc:	ea000008 	b	2b1e4 <HwManager::handleRxMsg(char const*, unsigned char const*, int, char*, int)+0x16c>
            strlcat(pRespJson, hwInfoStr, maxRespLen);
   2b1c0:	e59d2198 	ldr	r2, [sp, #408]	; 0x198
   2b1c4:	e28d10a8 	add	r1, sp, #168	; 0xa8
   2b1c8:	e1a00006 	mov	r0, r6
   2b1cc:	eb0088cd 	bl	4d508 <strlcat>
            commaNeeded = true;
   2b1d0:	e1a09004 	mov	r9, r4
        for (int i = 0; i < _numHardware; i++)
   2b1d4:	e5983000 	ldr	r3, [r8]
   2b1d8:	e2855001 	add	r5, r5, #1
   2b1dc:	e1530005 	cmp	r3, r5
   2b1e0:	da000015 	ble	2b23c <HwManager::handleRxMsg(char const*, unsigned char const*, int, char*, int)+0x1c4>
            if (!_pHw[i])
   2b1e4:	e5b70004 	ldr	r0, [r7, #4]!
   2b1e8:	e3500000 	cmp	r0, #0
   2b1ec:	0afffff8 	beq	2b1d4 <HwManager::handleRxMsg(char const*, unsigned char const*, int, char*, int)+0x15c>
            ee_sprintf(hwInfoStr, "{\"name\":\"%s\",\"enabled\":%d}", _pHw[i]->name(), _pHw[i]->isEnabled());
   2b1f0:	e5903000 	ldr	r3, [r0]
   2b1f4:	e5932038 	ldr	r2, [r3, #56]	; 0x38
   2b1f8:	e152000b 	cmp	r2, fp
   2b1fc:	1a00001a 	bne	2b26c <HwManager::handleRxMsg(char const*, unsigned char const*, int, char*, int)+0x1f4>
   2b200:	e5902008 	ldr	r2, [r0, #8]
   2b204:	e5933030 	ldr	r3, [r3, #48]	; 0x30
   2b208:	e153000a 	cmp	r3, sl
   2b20c:	1a000011 	bne	2b258 <HwManager::handleRxMsg(char const*, unsigned char const*, int, char*, int)+0x1e0>
        return _enabled;
   2b210:	e5d03004 	ldrb	r3, [r0, #4]
   2b214:	e59f10d4 	ldr	r1, [pc, #212]	; 2b2f0 <HwManager::handleRxMsg(char const*, unsigned char const*, int, char*, int)+0x278>
   2b218:	e28d00a8 	add	r0, sp, #168	; 0xa8
   2b21c:	ebffdee2 	bl	22dac <ee_sprintf>
            if (commaNeeded)
   2b220:	e3590000 	cmp	r9, #0
   2b224:	0affffe5 	beq	2b1c0 <HwManager::handleRxMsg(char const*, unsigned char const*, int, char*, int)+0x148>
                strlcat(pRespJson, ",", maxRespLen);
   2b228:	e59d2198 	ldr	r2, [sp, #408]	; 0x198
   2b22c:	e59f10c0 	ldr	r1, [pc, #192]	; 2b2f4 <HwManager::handleRxMsg(char const*, unsigned char const*, int, char*, int)+0x27c>
   2b230:	e1a00006 	mov	r0, r6
   2b234:	eb0088b3 	bl	4d508 <strlcat>
   2b238:	eaffffe0 	b	2b1c0 <HwManager::handleRxMsg(char const*, unsigned char const*, int, char*, int)+0x148>
        strlcat(pRespJson, "]", maxRespLen);
   2b23c:	e1a00006 	mov	r0, r6
   2b240:	e59d2198 	ldr	r2, [sp, #408]	; 0x198
   2b244:	e59f10ac 	ldr	r1, [pc, #172]	; 2b2f8 <HwManager::handleRxMsg(char const*, unsigned char const*, int, char*, int)+0x280>
   2b248:	eb0088ae 	bl	4d508 <strlcat>
}
   2b24c:	e1a00004 	mov	r0, r4
   2b250:	e28ddf5d 	add	sp, sp, #372	; 0x174
   2b254:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2b258:	e58d2004 	str	r2, [sp, #4]
            ee_sprintf(hwInfoStr, "{\"name\":\"%s\",\"enabled\":%d}", _pHw[i]->name(), _pHw[i]->isEnabled());
   2b25c:	e12fff33 	blx	r3
   2b260:	e59d2004 	ldr	r2, [sp, #4]
   2b264:	e1a03000 	mov	r3, r0
   2b268:	eaffffe9 	b	2b214 <HwManager::handleRxMsg(char const*, unsigned char const*, int, char*, int)+0x19c>
   2b26c:	e12fff32 	blx	r2
   2b270:	e1a02000 	mov	r2, r0
   2b274:	e5970000 	ldr	r0, [r7]
   2b278:	e5903000 	ldr	r3, [r0]
   2b27c:	eaffffe0 	b	2b204 <HwManager::handleRxMsg(char const*, unsigned char const*, int, char*, int)+0x18c>
        ee_sprintf(pRespJson, "\"err\":\"%s\"", foundOk ? "ok" : "notFound");
   2b280:	e59f2074 	ldr	r2, [pc, #116]	; 2b2fc <HwManager::handleRxMsg(char const*, unsigned char const*, int, char*, int)+0x284>
   2b284:	e1a00006 	mov	r0, r6
   2b288:	e59f1070 	ldr	r1, [pc, #112]	; 2b300 <HwManager::handleRxMsg(char const*, unsigned char const*, int, char*, int)+0x288>
   2b28c:	ebffdec6 	bl	22dac <ee_sprintf>
        return true;
   2b290:	eaffff8e 	b	2b0d0 <HwManager::handleRxMsg(char const*, unsigned char const*, int, char*, int)+0x58>
        {
            _pHw[i]->enable(enable);
   2b294:	e0887107 	add	r7, r8, r7, lsl #2
   2b298:	e5970004 	ldr	r0, [r7, #4]
   2b29c:	e59f2060 	ldr	r2, [pc, #96]	; 2b304 <HwManager::handleRxMsg(char const*, unsigned char const*, int, char*, int)+0x28c>
   2b2a0:	e5903000 	ldr	r3, [r0]
        bool enable = strtoul(enableVal, NULL, 10) != 0;
   2b2a4:	e2991000 	adds	r1, r9, #0
            _pHw[i]->enable(enable);
   2b2a8:	e5933034 	ldr	r3, [r3, #52]	; 0x34
        bool enable = strtoul(enableVal, NULL, 10) != 0;
   2b2ac:	13a01001 	movne	r1, #1
   2b2b0:	e1530002 	cmp	r3, r2
        _enabled = en;
   2b2b4:	05c01004 	strbeq	r1, [r0, #4]
        ee_sprintf(pRespJson, "\"err\":\"%s\"", foundOk ? "ok" : "notFound");
   2b2b8:	059f2048 	ldreq	r2, [pc, #72]	; 2b308 <HwManager::handleRxMsg(char const*, unsigned char const*, int, char*, int)+0x290>
   2b2bc:	0afffff0 	beq	2b284 <HwManager::handleRxMsg(char const*, unsigned char const*, int, char*, int)+0x20c>
            _pHw[i]->enable(enable);
   2b2c0:	e12fff33 	blx	r3
        ee_sprintf(pRespJson, "\"err\":\"%s\"", foundOk ? "ok" : "notFound");
   2b2c4:	e59f203c 	ldr	r2, [pc, #60]	; 2b308 <HwManager::handleRxMsg(char const*, unsigned char const*, int, char*, int)+0x290>
   2b2c8:	eaffffed 	b	2b284 <HwManager::handleRxMsg(char const*, unsigned char const*, int, char*, int)+0x20c>
   2b2cc:	00053b5c 	.word	0x00053b5c
   2b2d0:	00054a44 	.word	0x00054a44
   2b2d4:	00054a6c 	.word	0x00054a6c
   2b2d8:	00054a50 	.word	0x00054a50
   2b2dc:	00054a58 	.word	0x00054a58
   2b2e0:	00074d68 	.word	0x00074d68
   2b2e4:	0002a0a8 	.word	0x0002a0a8
   2b2e8:	00054a74 	.word	0x00054a74
   2b2ec:	0002a098 	.word	0x0002a098
   2b2f0:	00054a8c 	.word	0x00054a8c
   2b2f4:	000541a0 	.word	0x000541a0
   2b2f8:	00054aa8 	.word	0x00054aa8
   2b2fc:	00054a38 	.word	0x00054a38
   2b300:	00054a60 	.word	0x00054a60
   2b304:	0002a0a0 	.word	0x0002a0a0
   2b308:	00054a34 	.word	0x00054a34

0002b30c <HwManager::init()>:
{
   2b30c:	e92d4010 	push	{r4, lr}
    if (_busSocketId < 0)
   2b310:	e59f4050 	ldr	r4, [pc, #80]	; 2b368 <HwManager::init()+0x5c>
   2b314:	e5943000 	ldr	r3, [r4]
   2b318:	e3530000 	cmp	r3, #0
   2b31c:	ba00000d 	blt	2b358 <HwManager::init()+0x4c>
    if (_commsSocketId < 0)
   2b320:	e594302c 	ldr	r3, [r4, #44]	; 0x2c
   2b324:	e3530000 	cmp	r3, #0
   2b328:	ba000006 	blt	2b348 <HwManager::init()+0x3c>
    new Hw64KRam();
   2b32c:	e3a00020 	mov	r0, #32
   2b330:	eb00284e 	bl	35470 <operator new(unsigned int)>
   2b334:	ebfffcf8 	bl	2a71c <Hw64KRam::Hw64KRam()>
    new Hw512KRamRom();
   2b338:	e3a00014 	mov	r0, #20
   2b33c:	eb00284b 	bl	35470 <operator new(unsigned int)>
}
   2b340:	e8bd4010 	pop	{r4, lr}
    new Hw512KRamRom();
   2b344:	eafffb3c 	b	2a03c <Hw512KRamRom::Hw512KRamRom()>
        _commsSocketId = CommandHandler::commsSocketAdd(_commsSocketInfo);
   2b348:	e59f001c 	ldr	r0, [pc, #28]	; 2b36c <HwManager::init()+0x60>
   2b34c:	ebffed88 	bl	26974 <CommandHandler::commsSocketAdd(CommsSocketInfo&)>
   2b350:	e584002c 	str	r0, [r4, #44]	; 0x2c
   2b354:	eafffff4 	b	2b32c <HwManager::init()+0x20>
        _busSocketId = BusAccess::busSocketAdd(_busSocketInfo);
   2b358:	e2840004 	add	r0, r4, #4
   2b35c:	eb0034c9 	bl	38688 <BusAccess::busSocketAdd(BusSocketInfo&)>
   2b360:	e5840000 	str	r0, [r4]
   2b364:	eaffffed 	b	2b320 <HwManager::init()+0x14>
   2b368:	0006f100 	.word	0x0006f100
   2b36c:	0006f130 	.word	0x0006f130

0002b370 <HwManager::service()>:
}
   2b370:	e12fff1e 	bx	lr

0002b374 <HwManager::add(HwBase*)>:
    if (_numHardware >= MAX_HARDWARE)
   2b374:	e59f2018 	ldr	r2, [pc, #24]	; 2b394 <HwManager::add(HwBase*)+0x20>
   2b378:	e5923000 	ldr	r3, [r2]
   2b37c:	e3530009 	cmp	r3, #9
    _pHw[_numHardware++] = pHw;
   2b380:	d2831001 	addle	r1, r3, #1
   2b384:	d0823103 	addle	r3, r2, r3, lsl #2
   2b388:	d5821000 	strle	r1, [r2]
   2b38c:	d5830004 	strle	r0, [r3, #4]
}
   2b390:	e12fff1e 	bx	lr
   2b394:	00074d68 	.word	0x00074d68

0002b398 <HwManager::setMemoryEmulationMode(bool)>:
    LogWrite(FromHwManager, LOG_DEBUG, "setMemoryEmulationMode %s", val ? "Y" : "N");
   2b398:	e59f23cc 	ldr	r2, [pc, #972]	; 2b76c <HwManager::setMemoryEmulationMode(bool)+0x3d4>
   2b39c:	e3500000 	cmp	r0, #0
{
   2b3a0:	e92d4070 	push	{r4, r5, r6, lr}
    for (int i = 0; i < _numHardware; i++)
   2b3a4:	e59f43c4 	ldr	r4, [pc, #964]	; 2b770 <HwManager::setMemoryEmulationMode(bool)+0x3d8>
    LogWrite(FromHwManager, LOG_DEBUG, "setMemoryEmulationMode %s", val ? "Y" : "N");
   2b3a8:	e59f33c4 	ldr	r3, [pc, #964]	; 2b774 <HwManager::setMemoryEmulationMode(bool)+0x3dc>
   2b3ac:	e1a05000 	mov	r5, r0
   2b3b0:	01a03002 	moveq	r3, r2
   2b3b4:	e3a01004 	mov	r1, #4
   2b3b8:	e59f23b8 	ldr	r2, [pc, #952]	; 2b778 <HwManager::setMemoryEmulationMode(bool)+0x3e0>
   2b3bc:	e59f03b8 	ldr	r0, [pc, #952]	; 2b77c <HwManager::setMemoryEmulationMode(bool)+0x3e4>
   2b3c0:	ebffe36c 	bl	24178 <LogWrite>
    for (int i = 0; i < _numHardware; i++)
   2b3c4:	e5943000 	ldr	r3, [r4]
   2b3c8:	e3530000 	cmp	r3, #0
   2b3cc:	da00008d 	ble	2b608 <HwManager::setMemoryEmulationMode(bool)+0x270>
        if (_pHw[i] && _pHw[i]->isEnabled())
   2b3d0:	e5940004 	ldr	r0, [r4, #4]
   2b3d4:	e3500000 	cmp	r0, #0
   2b3d8:	0a000008 	beq	2b400 <HwManager::setMemoryEmulationMode(bool)+0x68>
   2b3dc:	e5903000 	ldr	r3, [r0]
   2b3e0:	e59f2398 	ldr	r2, [pc, #920]	; 2b780 <HwManager::setMemoryEmulationMode(bool)+0x3e8>
   2b3e4:	e5933030 	ldr	r3, [r3, #48]	; 0x30
   2b3e8:	e1530002 	cmp	r3, r2
        return _enabled;
   2b3ec:	05d00004 	ldrbeq	r0, [r0, #4]
   2b3f0:	1a00009d 	bne	2b66c <HwManager::setMemoryEmulationMode(bool)+0x2d4>
   2b3f4:	e3500000 	cmp	r0, #0
   2b3f8:	1a000084 	bne	2b610 <HwManager::setMemoryEmulationMode(bool)+0x278>
   2b3fc:	e5943000 	ldr	r3, [r4]
    for (int i = 0; i < _numHardware; i++)
   2b400:	e3530001 	cmp	r3, #1
   2b404:	da00007f 	ble	2b608 <HwManager::setMemoryEmulationMode(bool)+0x270>
        if (_pHw[i] && _pHw[i]->isEnabled())
   2b408:	e5940008 	ldr	r0, [r4, #8]
   2b40c:	e3500000 	cmp	r0, #0
   2b410:	0a000008 	beq	2b438 <HwManager::setMemoryEmulationMode(bool)+0xa0>
   2b414:	e5903000 	ldr	r3, [r0]
   2b418:	e59f2360 	ldr	r2, [pc, #864]	; 2b780 <HwManager::setMemoryEmulationMode(bool)+0x3e8>
   2b41c:	e5933030 	ldr	r3, [r3, #48]	; 0x30
   2b420:	e1530002 	cmp	r3, r2
   2b424:	05d00004 	ldrbeq	r0, [r0, #4]
   2b428:	1a0000af 	bne	2b6ec <HwManager::setMemoryEmulationMode(bool)+0x354>
   2b42c:	e3500000 	cmp	r0, #0
   2b430:	1a00009f 	bne	2b6b4 <HwManager::setMemoryEmulationMode(bool)+0x31c>
   2b434:	e5943000 	ldr	r3, [r4]
    for (int i = 0; i < _numHardware; i++)
   2b438:	e3530002 	cmp	r3, #2
   2b43c:	da000071 	ble	2b608 <HwManager::setMemoryEmulationMode(bool)+0x270>
        if (_pHw[i] && _pHw[i]->isEnabled())
   2b440:	e594000c 	ldr	r0, [r4, #12]
   2b444:	e3500000 	cmp	r0, #0
   2b448:	0a000008 	beq	2b470 <HwManager::setMemoryEmulationMode(bool)+0xd8>
   2b44c:	e5903000 	ldr	r3, [r0]
   2b450:	e59f2328 	ldr	r2, [pc, #808]	; 2b780 <HwManager::setMemoryEmulationMode(bool)+0x3e8>
   2b454:	e5933030 	ldr	r3, [r3, #48]	; 0x30
   2b458:	e1530002 	cmp	r3, r2
   2b45c:	05d00004 	ldrbeq	r0, [r0, #4]
   2b460:	1a0000a3 	bne	2b6f4 <HwManager::setMemoryEmulationMode(bool)+0x35c>
   2b464:	e3500000 	cmp	r0, #0
   2b468:	1a000098 	bne	2b6d0 <HwManager::setMemoryEmulationMode(bool)+0x338>
   2b46c:	e5943000 	ldr	r3, [r4]
    for (int i = 0; i < _numHardware; i++)
   2b470:	e3530003 	cmp	r3, #3
   2b474:	da000063 	ble	2b608 <HwManager::setMemoryEmulationMode(bool)+0x270>
        if (_pHw[i] && _pHw[i]->isEnabled())
   2b478:	e5940010 	ldr	r0, [r4, #16]
   2b47c:	e3500000 	cmp	r0, #0
   2b480:	0a000008 	beq	2b4a8 <HwManager::setMemoryEmulationMode(bool)+0x110>
   2b484:	e5903000 	ldr	r3, [r0]
   2b488:	e59f22f0 	ldr	r2, [pc, #752]	; 2b780 <HwManager::setMemoryEmulationMode(bool)+0x3e8>
   2b48c:	e5933030 	ldr	r3, [r3, #48]	; 0x30
   2b490:	e1530002 	cmp	r3, r2
   2b494:	05d00004 	ldrbeq	r0, [r0, #4]
   2b498:	1a00009e 	bne	2b718 <HwManager::setMemoryEmulationMode(bool)+0x380>
   2b49c:	e3500000 	cmp	r0, #0
   2b4a0:	1a000061 	bne	2b62c <HwManager::setMemoryEmulationMode(bool)+0x294>
   2b4a4:	e5943000 	ldr	r3, [r4]
    for (int i = 0; i < _numHardware; i++)
   2b4a8:	e3530004 	cmp	r3, #4
   2b4ac:	da000055 	ble	2b608 <HwManager::setMemoryEmulationMode(bool)+0x270>
        if (_pHw[i] && _pHw[i]->isEnabled())
   2b4b0:	e5940014 	ldr	r0, [r4, #20]
   2b4b4:	e3500000 	cmp	r0, #0
   2b4b8:	0a000008 	beq	2b4e0 <HwManager::setMemoryEmulationMode(bool)+0x148>
   2b4bc:	e5903000 	ldr	r3, [r0]
   2b4c0:	e59f22b8 	ldr	r2, [pc, #696]	; 2b780 <HwManager::setMemoryEmulationMode(bool)+0x3e8>
   2b4c4:	e5933030 	ldr	r3, [r3, #48]	; 0x30
   2b4c8:	e1530002 	cmp	r3, r2
   2b4cc:	05d00004 	ldrbeq	r0, [r0, #4]
   2b4d0:	1a000099 	bne	2b73c <HwManager::setMemoryEmulationMode(bool)+0x3a4>
   2b4d4:	e3500000 	cmp	r0, #0
   2b4d8:	1a00005c 	bne	2b650 <HwManager::setMemoryEmulationMode(bool)+0x2b8>
   2b4dc:	e5943000 	ldr	r3, [r4]
    for (int i = 0; i < _numHardware; i++)
   2b4e0:	e3530005 	cmp	r3, #5
   2b4e4:	da000047 	ble	2b608 <HwManager::setMemoryEmulationMode(bool)+0x270>
        if (_pHw[i] && _pHw[i]->isEnabled())
   2b4e8:	e5940018 	ldr	r0, [r4, #24]
   2b4ec:	e3500000 	cmp	r0, #0
   2b4f0:	0a000008 	beq	2b518 <HwManager::setMemoryEmulationMode(bool)+0x180>
   2b4f4:	e5903000 	ldr	r3, [r0]
   2b4f8:	e59f2280 	ldr	r2, [pc, #640]	; 2b780 <HwManager::setMemoryEmulationMode(bool)+0x3e8>
   2b4fc:	e5933030 	ldr	r3, [r3, #48]	; 0x30
   2b500:	e1530002 	cmp	r3, r2
   2b504:	05d00004 	ldrbeq	r0, [r0, #4]
   2b508:	1a00008d 	bne	2b744 <HwManager::setMemoryEmulationMode(bool)+0x3ac>
   2b50c:	e3500000 	cmp	r0, #0
   2b510:	1a000059 	bne	2b67c <HwManager::setMemoryEmulationMode(bool)+0x2e4>
   2b514:	e5943000 	ldr	r3, [r4]
    for (int i = 0; i < _numHardware; i++)
   2b518:	e3530006 	cmp	r3, #6
   2b51c:	da000039 	ble	2b608 <HwManager::setMemoryEmulationMode(bool)+0x270>
        if (_pHw[i] && _pHw[i]->isEnabled())
   2b520:	e594001c 	ldr	r0, [r4, #28]
   2b524:	e3500000 	cmp	r0, #0
   2b528:	0a000008 	beq	2b550 <HwManager::setMemoryEmulationMode(bool)+0x1b8>
   2b52c:	e5903000 	ldr	r3, [r0]
   2b530:	e59f2248 	ldr	r2, [pc, #584]	; 2b780 <HwManager::setMemoryEmulationMode(bool)+0x3e8>
   2b534:	e5933030 	ldr	r3, [r3, #48]	; 0x30
   2b538:	e1530002 	cmp	r3, r2
   2b53c:	05d00004 	ldrbeq	r0, [r0, #4]
   2b540:	1a000081 	bne	2b74c <HwManager::setMemoryEmulationMode(bool)+0x3b4>
   2b544:	e3500000 	cmp	r0, #0
   2b548:	1a000052 	bne	2b698 <HwManager::setMemoryEmulationMode(bool)+0x300>
   2b54c:	e5943000 	ldr	r3, [r4]
    for (int i = 0; i < _numHardware; i++)
   2b550:	e3530007 	cmp	r3, #7
   2b554:	da00002b 	ble	2b608 <HwManager::setMemoryEmulationMode(bool)+0x270>
        if (_pHw[i] && _pHw[i]->isEnabled())
   2b558:	e5940020 	ldr	r0, [r4, #32]
   2b55c:	e3500000 	cmp	r0, #0
   2b560:	0a000008 	beq	2b588 <HwManager::setMemoryEmulationMode(bool)+0x1f0>
   2b564:	e5903000 	ldr	r3, [r0]
   2b568:	e59f2210 	ldr	r2, [pc, #528]	; 2b780 <HwManager::setMemoryEmulationMode(bool)+0x3e8>
   2b56c:	e5933030 	ldr	r3, [r3, #48]	; 0x30
   2b570:	e1530002 	cmp	r3, r2
   2b574:	05d00004 	ldrbeq	r0, [r0, #4]
   2b578:	1a000075 	bne	2b754 <HwManager::setMemoryEmulationMode(bool)+0x3bc>
   2b57c:	e3500000 	cmp	r0, #0
   2b580:	1a00005d 	bne	2b6fc <HwManager::setMemoryEmulationMode(bool)+0x364>
   2b584:	e5943000 	ldr	r3, [r4]
    for (int i = 0; i < _numHardware; i++)
   2b588:	e3530008 	cmp	r3, #8
   2b58c:	da00001d 	ble	2b608 <HwManager::setMemoryEmulationMode(bool)+0x270>
        if (_pHw[i] && _pHw[i]->isEnabled())
   2b590:	e5940024 	ldr	r0, [r4, #36]	; 0x24
   2b594:	e3500000 	cmp	r0, #0
   2b598:	0a000008 	beq	2b5c0 <HwManager::setMemoryEmulationMode(bool)+0x228>
   2b59c:	e5903000 	ldr	r3, [r0]
   2b5a0:	e59f21d8 	ldr	r2, [pc, #472]	; 2b780 <HwManager::setMemoryEmulationMode(bool)+0x3e8>
   2b5a4:	e5933030 	ldr	r3, [r3, #48]	; 0x30
   2b5a8:	e1530002 	cmp	r3, r2
   2b5ac:	05d00004 	ldrbeq	r0, [r0, #4]
   2b5b0:	1a000069 	bne	2b75c <HwManager::setMemoryEmulationMode(bool)+0x3c4>
   2b5b4:	e3500000 	cmp	r0, #0
   2b5b8:	1a000058 	bne	2b720 <HwManager::setMemoryEmulationMode(bool)+0x388>
   2b5bc:	e5943000 	ldr	r3, [r4]
    for (int i = 0; i < _numHardware; i++)
   2b5c0:	e3530009 	cmp	r3, #9
   2b5c4:	da00000f 	ble	2b608 <HwManager::setMemoryEmulationMode(bool)+0x270>
        if (_pHw[i] && _pHw[i]->isEnabled())
   2b5c8:	e5940028 	ldr	r0, [r4, #40]	; 0x28
   2b5cc:	e3500000 	cmp	r0, #0
   2b5d0:	0a00000c 	beq	2b608 <HwManager::setMemoryEmulationMode(bool)+0x270>
   2b5d4:	e5903000 	ldr	r3, [r0]
   2b5d8:	e59f21a0 	ldr	r2, [pc, #416]	; 2b780 <HwManager::setMemoryEmulationMode(bool)+0x3e8>
   2b5dc:	e5933030 	ldr	r3, [r3, #48]	; 0x30
   2b5e0:	e1530002 	cmp	r3, r2
   2b5e4:	1a00005e 	bne	2b764 <HwManager::setMemoryEmulationMode(bool)+0x3cc>
   2b5e8:	e5d00004 	ldrb	r0, [r0, #4]
   2b5ec:	e3500000 	cmp	r0, #0
   2b5f0:	0a000004 	beq	2b608 <HwManager::setMemoryEmulationMode(bool)+0x270>
            _pHw[i]->setMemoryEmulationMode(val);
   2b5f4:	e5940028 	ldr	r0, [r4, #40]	; 0x28
   2b5f8:	e1a01005 	mov	r1, r5
   2b5fc:	e5903000 	ldr	r3, [r0]
   2b600:	e5933008 	ldr	r3, [r3, #8]
   2b604:	e12fff33 	blx	r3
    _memoryEmulationMode = val;
   2b608:	e5c4502c 	strb	r5, [r4, #44]	; 0x2c
}
   2b60c:	e8bd8070 	pop	{r4, r5, r6, pc}
            _pHw[i]->setMemoryEmulationMode(val);
   2b610:	e5940004 	ldr	r0, [r4, #4]
   2b614:	e1a01005 	mov	r1, r5
   2b618:	e5903000 	ldr	r3, [r0]
   2b61c:	e5933008 	ldr	r3, [r3, #8]
   2b620:	e12fff33 	blx	r3
   2b624:	e5943000 	ldr	r3, [r4]
   2b628:	eaffff74 	b	2b400 <HwManager::setMemoryEmulationMode(bool)+0x68>
   2b62c:	e5940010 	ldr	r0, [r4, #16]
   2b630:	e1a01005 	mov	r1, r5
   2b634:	e5903000 	ldr	r3, [r0]
   2b638:	e5933008 	ldr	r3, [r3, #8]
   2b63c:	e12fff33 	blx	r3
   2b640:	e5943000 	ldr	r3, [r4]
    for (int i = 0; i < _numHardware; i++)
   2b644:	e3530004 	cmp	r3, #4
   2b648:	caffff98 	bgt	2b4b0 <HwManager::setMemoryEmulationMode(bool)+0x118>
   2b64c:	eaffffed 	b	2b608 <HwManager::setMemoryEmulationMode(bool)+0x270>
            _pHw[i]->setMemoryEmulationMode(val);
   2b650:	e5940014 	ldr	r0, [r4, #20]
   2b654:	e1a01005 	mov	r1, r5
   2b658:	e5903000 	ldr	r3, [r0]
   2b65c:	e5933008 	ldr	r3, [r3, #8]
   2b660:	e12fff33 	blx	r3
   2b664:	e5943000 	ldr	r3, [r4]
   2b668:	eaffff9c 	b	2b4e0 <HwManager::setMemoryEmulationMode(bool)+0x148>
        if (_pHw[i] && _pHw[i]->isEnabled())
   2b66c:	e12fff33 	blx	r3
   2b670:	e3500000 	cmp	r0, #0
   2b674:	0affff60 	beq	2b3fc <HwManager::setMemoryEmulationMode(bool)+0x64>
   2b678:	eaffffe4 	b	2b610 <HwManager::setMemoryEmulationMode(bool)+0x278>
            _pHw[i]->setMemoryEmulationMode(val);
   2b67c:	e5940018 	ldr	r0, [r4, #24]
   2b680:	e1a01005 	mov	r1, r5
   2b684:	e5903000 	ldr	r3, [r0]
   2b688:	e5933008 	ldr	r3, [r3, #8]
   2b68c:	e12fff33 	blx	r3
   2b690:	e5943000 	ldr	r3, [r4]
   2b694:	eaffff9f 	b	2b518 <HwManager::setMemoryEmulationMode(bool)+0x180>
   2b698:	e594001c 	ldr	r0, [r4, #28]
   2b69c:	e1a01005 	mov	r1, r5
   2b6a0:	e5903000 	ldr	r3, [r0]
   2b6a4:	e5933008 	ldr	r3, [r3, #8]
   2b6a8:	e12fff33 	blx	r3
   2b6ac:	e5943000 	ldr	r3, [r4]
   2b6b0:	eaffffa6 	b	2b550 <HwManager::setMemoryEmulationMode(bool)+0x1b8>
   2b6b4:	e5940008 	ldr	r0, [r4, #8]
   2b6b8:	e1a01005 	mov	r1, r5
   2b6bc:	e5903000 	ldr	r3, [r0]
   2b6c0:	e5933008 	ldr	r3, [r3, #8]
   2b6c4:	e12fff33 	blx	r3
   2b6c8:	e5943000 	ldr	r3, [r4]
   2b6cc:	eaffff59 	b	2b438 <HwManager::setMemoryEmulationMode(bool)+0xa0>
   2b6d0:	e594000c 	ldr	r0, [r4, #12]
   2b6d4:	e1a01005 	mov	r1, r5
   2b6d8:	e5903000 	ldr	r3, [r0]
   2b6dc:	e5933008 	ldr	r3, [r3, #8]
   2b6e0:	e12fff33 	blx	r3
   2b6e4:	e5943000 	ldr	r3, [r4]
   2b6e8:	eaffff60 	b	2b470 <HwManager::setMemoryEmulationMode(bool)+0xd8>
        if (_pHw[i] && _pHw[i]->isEnabled())
   2b6ec:	e12fff33 	blx	r3
   2b6f0:	eaffff4d 	b	2b42c <HwManager::setMemoryEmulationMode(bool)+0x94>
   2b6f4:	e12fff33 	blx	r3
   2b6f8:	eaffff59 	b	2b464 <HwManager::setMemoryEmulationMode(bool)+0xcc>
            _pHw[i]->setMemoryEmulationMode(val);
   2b6fc:	e5940020 	ldr	r0, [r4, #32]
   2b700:	e1a01005 	mov	r1, r5
   2b704:	e5903000 	ldr	r3, [r0]
   2b708:	e5933008 	ldr	r3, [r3, #8]
   2b70c:	e12fff33 	blx	r3
   2b710:	e5943000 	ldr	r3, [r4]
   2b714:	eaffff9b 	b	2b588 <HwManager::setMemoryEmulationMode(bool)+0x1f0>
        if (_pHw[i] && _pHw[i]->isEnabled())
   2b718:	e12fff33 	blx	r3
   2b71c:	eaffff5e 	b	2b49c <HwManager::setMemoryEmulationMode(bool)+0x104>
            _pHw[i]->setMemoryEmulationMode(val);
   2b720:	e5940024 	ldr	r0, [r4, #36]	; 0x24
   2b724:	e1a01005 	mov	r1, r5
   2b728:	e5903000 	ldr	r3, [r0]
   2b72c:	e5933008 	ldr	r3, [r3, #8]
   2b730:	e12fff33 	blx	r3
   2b734:	e5943000 	ldr	r3, [r4]
   2b738:	eaffffa0 	b	2b5c0 <HwManager::setMemoryEmulationMode(bool)+0x228>
        if (_pHw[i] && _pHw[i]->isEnabled())
   2b73c:	e12fff33 	blx	r3
   2b740:	eaffff63 	b	2b4d4 <HwManager::setMemoryEmulationMode(bool)+0x13c>
   2b744:	e12fff33 	blx	r3
   2b748:	eaffff6f 	b	2b50c <HwManager::setMemoryEmulationMode(bool)+0x174>
   2b74c:	e12fff33 	blx	r3
   2b750:	eaffff7b 	b	2b544 <HwManager::setMemoryEmulationMode(bool)+0x1ac>
   2b754:	e12fff33 	blx	r3
   2b758:	eaffff87 	b	2b57c <HwManager::setMemoryEmulationMode(bool)+0x1e4>
   2b75c:	e12fff33 	blx	r3
   2b760:	eaffff93 	b	2b5b4 <HwManager::setMemoryEmulationMode(bool)+0x21c>
   2b764:	e12fff33 	blx	r3
   2b768:	eaffff9f 	b	2b5ec <HwManager::setMemoryEmulationMode(bool)+0x254>
   2b76c:	00054940 	.word	0x00054940
   2b770:	00074d68 	.word	0x00074d68
   2b774:	00052324 	.word	0x00052324
   2b778:	00054944 	.word	0x00054944
   2b77c:	00054a28 	.word	0x00054a28
   2b780:	0002a098 	.word	0x0002a098

0002b784 <HwManager::pageOutForInjection(bool)>:
{
   2b784:	e92d4070 	push	{r4, r5, r6, lr}
    for (int i = 0; i < _numHardware; i++)
   2b788:	e59f43c4 	ldr	r4, [pc, #964]	; 2bb54 <HwManager::pageOutForInjection(bool)+0x3d0>
   2b78c:	e5943000 	ldr	r3, [r4]
   2b790:	e3530000 	cmp	r3, #0
   2b794:	d8bd8070 	pople	{r4, r5, r6, pc}
   2b798:	e1a05000 	mov	r5, r0
        if (_pHw[i] && _pHw[i]->isEnabled())
   2b79c:	e5940004 	ldr	r0, [r4, #4]
   2b7a0:	e3500000 	cmp	r0, #0
   2b7a4:	0a000008 	beq	2b7cc <HwManager::pageOutForInjection(bool)+0x48>
   2b7a8:	e5903000 	ldr	r3, [r0]
   2b7ac:	e59f23a4 	ldr	r2, [pc, #932]	; 2bb58 <HwManager::pageOutForInjection(bool)+0x3d4>
   2b7b0:	e5933030 	ldr	r3, [r3, #48]	; 0x30
   2b7b4:	e1530002 	cmp	r3, r2
   2b7b8:	05d00004 	ldrbeq	r0, [r0, #4]
   2b7bc:	1a0000a0 	bne	2ba44 <HwManager::pageOutForInjection(bool)+0x2c0>
   2b7c0:	e3500000 	cmp	r0, #0
   2b7c4:	1a000083 	bne	2b9d8 <HwManager::pageOutForInjection(bool)+0x254>
   2b7c8:	e5943000 	ldr	r3, [r4]
    for (int i = 0; i < _numHardware; i++)
   2b7cc:	e3530001 	cmp	r3, #1
   2b7d0:	d8bd8070 	pople	{r4, r5, r6, pc}
        if (_pHw[i] && _pHw[i]->isEnabled())
   2b7d4:	e5940008 	ldr	r0, [r4, #8]
   2b7d8:	e3500000 	cmp	r0, #0
   2b7dc:	0a000008 	beq	2b804 <HwManager::pageOutForInjection(bool)+0x80>
   2b7e0:	e5903000 	ldr	r3, [r0]
   2b7e4:	e59f236c 	ldr	r2, [pc, #876]	; 2bb58 <HwManager::pageOutForInjection(bool)+0x3d4>
   2b7e8:	e5933030 	ldr	r3, [r3, #48]	; 0x30
   2b7ec:	e1530002 	cmp	r3, r2
   2b7f0:	05d00004 	ldrbeq	r0, [r0, #4]
   2b7f4:	1a0000b6 	bne	2bad4 <HwManager::pageOutForInjection(bool)+0x350>
   2b7f8:	e3500000 	cmp	r0, #0
   2b7fc:	1a0000a2 	bne	2ba8c <HwManager::pageOutForInjection(bool)+0x308>
   2b800:	e5943000 	ldr	r3, [r4]
    for (int i = 0; i < _numHardware; i++)
   2b804:	e3530002 	cmp	r3, #2
   2b808:	d8bd8070 	pople	{r4, r5, r6, pc}
        if (_pHw[i] && _pHw[i]->isEnabled())
   2b80c:	e594000c 	ldr	r0, [r4, #12]
   2b810:	e3500000 	cmp	r0, #0
   2b814:	0a000008 	beq	2b83c <HwManager::pageOutForInjection(bool)+0xb8>
   2b818:	e5903000 	ldr	r3, [r0]
   2b81c:	e59f2334 	ldr	r2, [pc, #820]	; 2bb58 <HwManager::pageOutForInjection(bool)+0x3d4>
   2b820:	e5933030 	ldr	r3, [r3, #48]	; 0x30
   2b824:	e1530002 	cmp	r3, r2
   2b828:	05d00004 	ldrbeq	r0, [r0, #4]
   2b82c:	1a0000aa 	bne	2badc <HwManager::pageOutForInjection(bool)+0x358>
   2b830:	e3500000 	cmp	r0, #0
   2b834:	1a00009d 	bne	2bab0 <HwManager::pageOutForInjection(bool)+0x32c>
   2b838:	e5943000 	ldr	r3, [r4]
    for (int i = 0; i < _numHardware; i++)
   2b83c:	e3530003 	cmp	r3, #3
   2b840:	d8bd8070 	pople	{r4, r5, r6, pc}
        if (_pHw[i] && _pHw[i]->isEnabled())
   2b844:	e5940010 	ldr	r0, [r4, #16]
   2b848:	e3500000 	cmp	r0, #0
   2b84c:	0a000008 	beq	2b874 <HwManager::pageOutForInjection(bool)+0xf0>
   2b850:	e5903000 	ldr	r3, [r0]
   2b854:	e59f22fc 	ldr	r2, [pc, #764]	; 2bb58 <HwManager::pageOutForInjection(bool)+0x3d4>
   2b858:	e5933030 	ldr	r3, [r3, #48]	; 0x30
   2b85c:	e1530002 	cmp	r3, r2
   2b860:	05d00004 	ldrbeq	r0, [r0, #4]
   2b864:	1a0000a5 	bne	2bb00 <HwManager::pageOutForInjection(bool)+0x37c>
   2b868:	e3500000 	cmp	r0, #0
   2b86c:	1a000062 	bne	2b9fc <HwManager::pageOutForInjection(bool)+0x278>
   2b870:	e5943000 	ldr	r3, [r4]
    for (int i = 0; i < _numHardware; i++)
   2b874:	e3530004 	cmp	r3, #4
   2b878:	d8bd8070 	pople	{r4, r5, r6, pc}
        if (_pHw[i] && _pHw[i]->isEnabled())
   2b87c:	e5940014 	ldr	r0, [r4, #20]
   2b880:	e3500000 	cmp	r0, #0
   2b884:	0a000008 	beq	2b8ac <HwManager::pageOutForInjection(bool)+0x128>
   2b888:	e5903000 	ldr	r3, [r0]
   2b88c:	e59f22c4 	ldr	r2, [pc, #708]	; 2bb58 <HwManager::pageOutForInjection(bool)+0x3d4>
   2b890:	e5933030 	ldr	r3, [r3, #48]	; 0x30
   2b894:	e1530002 	cmp	r3, r2
   2b898:	05d00004 	ldrbeq	r0, [r0, #4]
   2b89c:	1a0000a0 	bne	2bb24 <HwManager::pageOutForInjection(bool)+0x3a0>
   2b8a0:	e3500000 	cmp	r0, #0
   2b8a4:	1a00005d 	bne	2ba20 <HwManager::pageOutForInjection(bool)+0x29c>
   2b8a8:	e5943000 	ldr	r3, [r4]
    for (int i = 0; i < _numHardware; i++)
   2b8ac:	e3530005 	cmp	r3, #5
   2b8b0:	d8bd8070 	pople	{r4, r5, r6, pc}
        if (_pHw[i] && _pHw[i]->isEnabled())
   2b8b4:	e5940018 	ldr	r0, [r4, #24]
   2b8b8:	e3500000 	cmp	r0, #0
   2b8bc:	0a000008 	beq	2b8e4 <HwManager::pageOutForInjection(bool)+0x160>
   2b8c0:	e5903000 	ldr	r3, [r0]
   2b8c4:	e59f228c 	ldr	r2, [pc, #652]	; 2bb58 <HwManager::pageOutForInjection(bool)+0x3d4>
   2b8c8:	e5933030 	ldr	r3, [r3, #48]	; 0x30
   2b8cc:	e1530002 	cmp	r3, r2
   2b8d0:	05d00004 	ldrbeq	r0, [r0, #4]
   2b8d4:	1a000094 	bne	2bb2c <HwManager::pageOutForInjection(bool)+0x3a8>
   2b8d8:	e3500000 	cmp	r0, #0
   2b8dc:	1a00005c 	bne	2ba54 <HwManager::pageOutForInjection(bool)+0x2d0>
   2b8e0:	e5943000 	ldr	r3, [r4]
    for (int i = 0; i < _numHardware; i++)
   2b8e4:	e3530006 	cmp	r3, #6
   2b8e8:	d8bd8070 	pople	{r4, r5, r6, pc}
        if (_pHw[i] && _pHw[i]->isEnabled())
   2b8ec:	e594001c 	ldr	r0, [r4, #28]
   2b8f0:	e3500000 	cmp	r0, #0
   2b8f4:	0a000008 	beq	2b91c <HwManager::pageOutForInjection(bool)+0x198>
   2b8f8:	e5903000 	ldr	r3, [r0]
   2b8fc:	e59f2254 	ldr	r2, [pc, #596]	; 2bb58 <HwManager::pageOutForInjection(bool)+0x3d4>
   2b900:	e5933030 	ldr	r3, [r3, #48]	; 0x30
   2b904:	e1530002 	cmp	r3, r2
   2b908:	05d00004 	ldrbeq	r0, [r0, #4]
   2b90c:	1a000088 	bne	2bb34 <HwManager::pageOutForInjection(bool)+0x3b0>
   2b910:	e3500000 	cmp	r0, #0
   2b914:	1a000055 	bne	2ba70 <HwManager::pageOutForInjection(bool)+0x2ec>
   2b918:	e5943000 	ldr	r3, [r4]
    for (int i = 0; i < _numHardware; i++)
   2b91c:	e3530007 	cmp	r3, #7
   2b920:	d8bd8070 	pople	{r4, r5, r6, pc}
        if (_pHw[i] && _pHw[i]->isEnabled())
   2b924:	e5940020 	ldr	r0, [r4, #32]
   2b928:	e3500000 	cmp	r0, #0
   2b92c:	0a000008 	beq	2b954 <HwManager::pageOutForInjection(bool)+0x1d0>
   2b930:	e5903000 	ldr	r3, [r0]
   2b934:	e59f221c 	ldr	r2, [pc, #540]	; 2bb58 <HwManager::pageOutForInjection(bool)+0x3d4>
   2b938:	e5933030 	ldr	r3, [r3, #48]	; 0x30
   2b93c:	e1530002 	cmp	r3, r2
   2b940:	05d00004 	ldrbeq	r0, [r0, #4]
   2b944:	1a00007c 	bne	2bb3c <HwManager::pageOutForInjection(bool)+0x3b8>
   2b948:	e3500000 	cmp	r0, #0
   2b94c:	1a000064 	bne	2bae4 <HwManager::pageOutForInjection(bool)+0x360>
   2b950:	e5943000 	ldr	r3, [r4]
    for (int i = 0; i < _numHardware; i++)
   2b954:	e3530008 	cmp	r3, #8
   2b958:	d8bd8070 	pople	{r4, r5, r6, pc}
        if (_pHw[i] && _pHw[i]->isEnabled())
   2b95c:	e5940024 	ldr	r0, [r4, #36]	; 0x24
   2b960:	e3500000 	cmp	r0, #0
   2b964:	0a000008 	beq	2b98c <HwManager::pageOutForInjection(bool)+0x208>
   2b968:	e5903000 	ldr	r3, [r0]
   2b96c:	e59f21e4 	ldr	r2, [pc, #484]	; 2bb58 <HwManager::pageOutForInjection(bool)+0x3d4>
   2b970:	e5933030 	ldr	r3, [r3, #48]	; 0x30
   2b974:	e1530002 	cmp	r3, r2
   2b978:	05d00004 	ldrbeq	r0, [r0, #4]
   2b97c:	1a000070 	bne	2bb44 <HwManager::pageOutForInjection(bool)+0x3c0>
   2b980:	e3500000 	cmp	r0, #0
   2b984:	1a00005f 	bne	2bb08 <HwManager::pageOutForInjection(bool)+0x384>
   2b988:	e5943000 	ldr	r3, [r4]
    for (int i = 0; i < _numHardware; i++)
   2b98c:	e3530009 	cmp	r3, #9
   2b990:	d8bd8070 	pople	{r4, r5, r6, pc}
        if (_pHw[i] && _pHw[i]->isEnabled())
   2b994:	e5940028 	ldr	r0, [r4, #40]	; 0x28
   2b998:	e3500000 	cmp	r0, #0
   2b99c:	08bd8070 	popeq	{r4, r5, r6, pc}
   2b9a0:	e5903000 	ldr	r3, [r0]
   2b9a4:	e59f21ac 	ldr	r2, [pc, #428]	; 2bb58 <HwManager::pageOutForInjection(bool)+0x3d4>
   2b9a8:	e5933030 	ldr	r3, [r3, #48]	; 0x30
   2b9ac:	e1530002 	cmp	r3, r2
   2b9b0:	1a000065 	bne	2bb4c <HwManager::pageOutForInjection(bool)+0x3c8>
   2b9b4:	e5d00004 	ldrb	r0, [r0, #4]
   2b9b8:	e3500000 	cmp	r0, #0
   2b9bc:	08bd8070 	popeq	{r4, r5, r6, pc}
            _pHw[i]->pageOutForInjection(pageOut);
   2b9c0:	e5940028 	ldr	r0, [r4, #40]	; 0x28
   2b9c4:	e1a01005 	mov	r1, r5
}
   2b9c8:	e8bd4070 	pop	{r4, r5, r6, lr}
            _pHw[i]->pageOutForInjection(pageOut);
   2b9cc:	e5903000 	ldr	r3, [r0]
   2b9d0:	e5933010 	ldr	r3, [r3, #16]
   2b9d4:	e12fff13 	bx	r3
   2b9d8:	e5940004 	ldr	r0, [r4, #4]
   2b9dc:	e1a01005 	mov	r1, r5
   2b9e0:	e5903000 	ldr	r3, [r0]
   2b9e4:	e5933010 	ldr	r3, [r3, #16]
   2b9e8:	e12fff33 	blx	r3
   2b9ec:	e5943000 	ldr	r3, [r4]
    for (int i = 0; i < _numHardware; i++)
   2b9f0:	e3530001 	cmp	r3, #1
   2b9f4:	caffff76 	bgt	2b7d4 <HwManager::pageOutForInjection(bool)+0x50>
   2b9f8:	e8bd8070 	pop	{r4, r5, r6, pc}
            _pHw[i]->pageOutForInjection(pageOut);
   2b9fc:	e5940010 	ldr	r0, [r4, #16]
   2ba00:	e1a01005 	mov	r1, r5
   2ba04:	e5903000 	ldr	r3, [r0]
   2ba08:	e5933010 	ldr	r3, [r3, #16]
   2ba0c:	e12fff33 	blx	r3
   2ba10:	e5943000 	ldr	r3, [r4]
    for (int i = 0; i < _numHardware; i++)
   2ba14:	e3530004 	cmp	r3, #4
   2ba18:	caffff97 	bgt	2b87c <HwManager::pageOutForInjection(bool)+0xf8>
   2ba1c:	e8bd8070 	pop	{r4, r5, r6, pc}
            _pHw[i]->pageOutForInjection(pageOut);
   2ba20:	e5940014 	ldr	r0, [r4, #20]
   2ba24:	e1a01005 	mov	r1, r5
   2ba28:	e5903000 	ldr	r3, [r0]
   2ba2c:	e5933010 	ldr	r3, [r3, #16]
   2ba30:	e12fff33 	blx	r3
   2ba34:	e5943000 	ldr	r3, [r4]
    for (int i = 0; i < _numHardware; i++)
   2ba38:	e3530005 	cmp	r3, #5
   2ba3c:	caffff9c 	bgt	2b8b4 <HwManager::pageOutForInjection(bool)+0x130>
   2ba40:	e8bd8070 	pop	{r4, r5, r6, pc}
        if (_pHw[i] && _pHw[i]->isEnabled())
   2ba44:	e12fff33 	blx	r3
   2ba48:	e3500000 	cmp	r0, #0
   2ba4c:	0affff5d 	beq	2b7c8 <HwManager::pageOutForInjection(bool)+0x44>
   2ba50:	eaffffe0 	b	2b9d8 <HwManager::pageOutForInjection(bool)+0x254>
            _pHw[i]->pageOutForInjection(pageOut);
   2ba54:	e5940018 	ldr	r0, [r4, #24]
   2ba58:	e1a01005 	mov	r1, r5
   2ba5c:	e5903000 	ldr	r3, [r0]
   2ba60:	e5933010 	ldr	r3, [r3, #16]
   2ba64:	e12fff33 	blx	r3
   2ba68:	e5943000 	ldr	r3, [r4]
   2ba6c:	eaffff9c 	b	2b8e4 <HwManager::pageOutForInjection(bool)+0x160>
   2ba70:	e594001c 	ldr	r0, [r4, #28]
   2ba74:	e1a01005 	mov	r1, r5
   2ba78:	e5903000 	ldr	r3, [r0]
   2ba7c:	e5933010 	ldr	r3, [r3, #16]
   2ba80:	e12fff33 	blx	r3
   2ba84:	e5943000 	ldr	r3, [r4]
   2ba88:	eaffffa3 	b	2b91c <HwManager::pageOutForInjection(bool)+0x198>
   2ba8c:	e5940008 	ldr	r0, [r4, #8]
   2ba90:	e1a01005 	mov	r1, r5
   2ba94:	e5903000 	ldr	r3, [r0]
   2ba98:	e5933010 	ldr	r3, [r3, #16]
   2ba9c:	e12fff33 	blx	r3
   2baa0:	e5943000 	ldr	r3, [r4]
    for (int i = 0; i < _numHardware; i++)
   2baa4:	e3530002 	cmp	r3, #2
   2baa8:	caffff57 	bgt	2b80c <HwManager::pageOutForInjection(bool)+0x88>
   2baac:	e8bd8070 	pop	{r4, r5, r6, pc}
            _pHw[i]->pageOutForInjection(pageOut);
   2bab0:	e594000c 	ldr	r0, [r4, #12]
   2bab4:	e1a01005 	mov	r1, r5
   2bab8:	e5903000 	ldr	r3, [r0]
   2babc:	e5933010 	ldr	r3, [r3, #16]
   2bac0:	e12fff33 	blx	r3
   2bac4:	e5943000 	ldr	r3, [r4]
    for (int i = 0; i < _numHardware; i++)
   2bac8:	e3530003 	cmp	r3, #3
   2bacc:	caffff5c 	bgt	2b844 <HwManager::pageOutForInjection(bool)+0xc0>
   2bad0:	e8bd8070 	pop	{r4, r5, r6, pc}
        if (_pHw[i] && _pHw[i]->isEnabled())
   2bad4:	e12fff33 	blx	r3
   2bad8:	eaffff46 	b	2b7f8 <HwManager::pageOutForInjection(bool)+0x74>
   2badc:	e12fff33 	blx	r3
   2bae0:	eaffff52 	b	2b830 <HwManager::pageOutForInjection(bool)+0xac>
            _pHw[i]->pageOutForInjection(pageOut);
   2bae4:	e5940020 	ldr	r0, [r4, #32]
   2bae8:	e1a01005 	mov	r1, r5
   2baec:	e5903000 	ldr	r3, [r0]
   2baf0:	e5933010 	ldr	r3, [r3, #16]
   2baf4:	e12fff33 	blx	r3
   2baf8:	e5943000 	ldr	r3, [r4]
   2bafc:	eaffff94 	b	2b954 <HwManager::pageOutForInjection(bool)+0x1d0>
        if (_pHw[i] && _pHw[i]->isEnabled())
   2bb00:	e12fff33 	blx	r3
   2bb04:	eaffff57 	b	2b868 <HwManager::pageOutForInjection(bool)+0xe4>
            _pHw[i]->pageOutForInjection(pageOut);
   2bb08:	e5940024 	ldr	r0, [r4, #36]	; 0x24
   2bb0c:	e1a01005 	mov	r1, r5
   2bb10:	e5903000 	ldr	r3, [r0]
   2bb14:	e5933010 	ldr	r3, [r3, #16]
   2bb18:	e12fff33 	blx	r3
   2bb1c:	e5943000 	ldr	r3, [r4]
   2bb20:	eaffff99 	b	2b98c <HwManager::pageOutForInjection(bool)+0x208>
        if (_pHw[i] && _pHw[i]->isEnabled())
   2bb24:	e12fff33 	blx	r3
   2bb28:	eaffff5c 	b	2b8a0 <HwManager::pageOutForInjection(bool)+0x11c>
   2bb2c:	e12fff33 	blx	r3
   2bb30:	eaffff68 	b	2b8d8 <HwManager::pageOutForInjection(bool)+0x154>
   2bb34:	e12fff33 	blx	r3
   2bb38:	eaffff74 	b	2b910 <HwManager::pageOutForInjection(bool)+0x18c>
   2bb3c:	e12fff33 	blx	r3
   2bb40:	eaffff80 	b	2b948 <HwManager::pageOutForInjection(bool)+0x1c4>
   2bb44:	e12fff33 	blx	r3
   2bb48:	eaffff8c 	b	2b980 <HwManager::pageOutForInjection(bool)+0x1fc>
   2bb4c:	e12fff33 	blx	r3
   2bb50:	eaffff98 	b	2b9b8 <HwManager::pageOutForInjection(bool)+0x234>
   2bb54:	00074d68 	.word	0x00074d68
   2bb58:	0002a098 	.word	0x0002a098

0002bb5c <HwManager::setMemoryPagingEnable(bool)>:
{
   2bb5c:	e92d4070 	push	{r4, r5, r6, lr}
    for (int i = 0; i < _numHardware; i++)
   2bb60:	e59f43a8 	ldr	r4, [pc, #936]	; 2bf10 <HwManager::setMemoryPagingEnable(bool)+0x3b4>
{
   2bb64:	e1a05000 	mov	r5, r0
    for (int i = 0; i < _numHardware; i++)
   2bb68:	e5943000 	ldr	r3, [r4]
   2bb6c:	e3530000 	cmp	r3, #0
   2bb70:	da00008d 	ble	2bdac <HwManager::setMemoryPagingEnable(bool)+0x250>
        if (_pHw[i] && _pHw[i]->isEnabled())
   2bb74:	e5940004 	ldr	r0, [r4, #4]
   2bb78:	e3500000 	cmp	r0, #0
   2bb7c:	0a000008 	beq	2bba4 <HwManager::setMemoryPagingEnable(bool)+0x48>
   2bb80:	e5903000 	ldr	r3, [r0]
   2bb84:	e59f2388 	ldr	r2, [pc, #904]	; 2bf14 <HwManager::setMemoryPagingEnable(bool)+0x3b8>
   2bb88:	e5933030 	ldr	r3, [r3, #48]	; 0x30
   2bb8c:	e1530002 	cmp	r3, r2
   2bb90:	05d00004 	ldrbeq	r0, [r0, #4]
   2bb94:	1a00009d 	bne	2be10 <HwManager::setMemoryPagingEnable(bool)+0x2b4>
   2bb98:	e3500000 	cmp	r0, #0
   2bb9c:	1a000084 	bne	2bdb4 <HwManager::setMemoryPagingEnable(bool)+0x258>
   2bba0:	e5943000 	ldr	r3, [r4]
    for (int i = 0; i < _numHardware; i++)
   2bba4:	e3530001 	cmp	r3, #1
   2bba8:	da00007f 	ble	2bdac <HwManager::setMemoryPagingEnable(bool)+0x250>
        if (_pHw[i] && _pHw[i]->isEnabled())
   2bbac:	e5940008 	ldr	r0, [r4, #8]
   2bbb0:	e3500000 	cmp	r0, #0
   2bbb4:	0a000008 	beq	2bbdc <HwManager::setMemoryPagingEnable(bool)+0x80>
   2bbb8:	e5903000 	ldr	r3, [r0]
   2bbbc:	e59f2350 	ldr	r2, [pc, #848]	; 2bf14 <HwManager::setMemoryPagingEnable(bool)+0x3b8>
   2bbc0:	e5933030 	ldr	r3, [r3, #48]	; 0x30
   2bbc4:	e1530002 	cmp	r3, r2
   2bbc8:	05d00004 	ldrbeq	r0, [r0, #4]
   2bbcc:	1a0000af 	bne	2be90 <HwManager::setMemoryPagingEnable(bool)+0x334>
   2bbd0:	e3500000 	cmp	r0, #0
   2bbd4:	1a00009f 	bne	2be58 <HwManager::setMemoryPagingEnable(bool)+0x2fc>
   2bbd8:	e5943000 	ldr	r3, [r4]
    for (int i = 0; i < _numHardware; i++)
   2bbdc:	e3530002 	cmp	r3, #2
   2bbe0:	da000071 	ble	2bdac <HwManager::setMemoryPagingEnable(bool)+0x250>
        if (_pHw[i] && _pHw[i]->isEnabled())
   2bbe4:	e594000c 	ldr	r0, [r4, #12]
   2bbe8:	e3500000 	cmp	r0, #0
   2bbec:	0a000008 	beq	2bc14 <HwManager::setMemoryPagingEnable(bool)+0xb8>
   2bbf0:	e5903000 	ldr	r3, [r0]
   2bbf4:	e59f2318 	ldr	r2, [pc, #792]	; 2bf14 <HwManager::setMemoryPagingEnable(bool)+0x3b8>
   2bbf8:	e5933030 	ldr	r3, [r3, #48]	; 0x30
   2bbfc:	e1530002 	cmp	r3, r2
   2bc00:	05d00004 	ldrbeq	r0, [r0, #4]
   2bc04:	1a0000a3 	bne	2be98 <HwManager::setMemoryPagingEnable(bool)+0x33c>
   2bc08:	e3500000 	cmp	r0, #0
   2bc0c:	1a000098 	bne	2be74 <HwManager::setMemoryPagingEnable(bool)+0x318>
   2bc10:	e5943000 	ldr	r3, [r4]
    for (int i = 0; i < _numHardware; i++)
   2bc14:	e3530003 	cmp	r3, #3
   2bc18:	da000063 	ble	2bdac <HwManager::setMemoryPagingEnable(bool)+0x250>
        if (_pHw[i] && _pHw[i]->isEnabled())
   2bc1c:	e5940010 	ldr	r0, [r4, #16]
   2bc20:	e3500000 	cmp	r0, #0
   2bc24:	0a000008 	beq	2bc4c <HwManager::setMemoryPagingEnable(bool)+0xf0>
   2bc28:	e5903000 	ldr	r3, [r0]
   2bc2c:	e59f22e0 	ldr	r2, [pc, #736]	; 2bf14 <HwManager::setMemoryPagingEnable(bool)+0x3b8>
   2bc30:	e5933030 	ldr	r3, [r3, #48]	; 0x30
   2bc34:	e1530002 	cmp	r3, r2
   2bc38:	05d00004 	ldrbeq	r0, [r0, #4]
   2bc3c:	1a00009e 	bne	2bebc <HwManager::setMemoryPagingEnable(bool)+0x360>
   2bc40:	e3500000 	cmp	r0, #0
   2bc44:	1a000061 	bne	2bdd0 <HwManager::setMemoryPagingEnable(bool)+0x274>
   2bc48:	e5943000 	ldr	r3, [r4]
    for (int i = 0; i < _numHardware; i++)
   2bc4c:	e3530004 	cmp	r3, #4
   2bc50:	da000055 	ble	2bdac <HwManager::setMemoryPagingEnable(bool)+0x250>
        if (_pHw[i] && _pHw[i]->isEnabled())
   2bc54:	e5940014 	ldr	r0, [r4, #20]
   2bc58:	e3500000 	cmp	r0, #0
   2bc5c:	0a000008 	beq	2bc84 <HwManager::setMemoryPagingEnable(bool)+0x128>
   2bc60:	e5903000 	ldr	r3, [r0]
   2bc64:	e59f22a8 	ldr	r2, [pc, #680]	; 2bf14 <HwManager::setMemoryPagingEnable(bool)+0x3b8>
   2bc68:	e5933030 	ldr	r3, [r3, #48]	; 0x30
   2bc6c:	e1530002 	cmp	r3, r2
   2bc70:	05d00004 	ldrbeq	r0, [r0, #4]
   2bc74:	1a000099 	bne	2bee0 <HwManager::setMemoryPagingEnable(bool)+0x384>
   2bc78:	e3500000 	cmp	r0, #0
   2bc7c:	1a00005c 	bne	2bdf4 <HwManager::setMemoryPagingEnable(bool)+0x298>
   2bc80:	e5943000 	ldr	r3, [r4]
    for (int i = 0; i < _numHardware; i++)
   2bc84:	e3530005 	cmp	r3, #5
   2bc88:	da000047 	ble	2bdac <HwManager::setMemoryPagingEnable(bool)+0x250>
        if (_pHw[i] && _pHw[i]->isEnabled())
   2bc8c:	e5940018 	ldr	r0, [r4, #24]
   2bc90:	e3500000 	cmp	r0, #0
   2bc94:	0a000008 	beq	2bcbc <HwManager::setMemoryPagingEnable(bool)+0x160>
   2bc98:	e5903000 	ldr	r3, [r0]
   2bc9c:	e59f2270 	ldr	r2, [pc, #624]	; 2bf14 <HwManager::setMemoryPagingEnable(bool)+0x3b8>
   2bca0:	e5933030 	ldr	r3, [r3, #48]	; 0x30
   2bca4:	e1530002 	cmp	r3, r2
   2bca8:	05d00004 	ldrbeq	r0, [r0, #4]
   2bcac:	1a00008d 	bne	2bee8 <HwManager::setMemoryPagingEnable(bool)+0x38c>
   2bcb0:	e3500000 	cmp	r0, #0
   2bcb4:	1a000059 	bne	2be20 <HwManager::setMemoryPagingEnable(bool)+0x2c4>
   2bcb8:	e5943000 	ldr	r3, [r4]
    for (int i = 0; i < _numHardware; i++)
   2bcbc:	e3530006 	cmp	r3, #6
   2bcc0:	da000039 	ble	2bdac <HwManager::setMemoryPagingEnable(bool)+0x250>
        if (_pHw[i] && _pHw[i]->isEnabled())
   2bcc4:	e594001c 	ldr	r0, [r4, #28]
   2bcc8:	e3500000 	cmp	r0, #0
   2bccc:	0a000008 	beq	2bcf4 <HwManager::setMemoryPagingEnable(bool)+0x198>
   2bcd0:	e5903000 	ldr	r3, [r0]
   2bcd4:	e59f2238 	ldr	r2, [pc, #568]	; 2bf14 <HwManager::setMemoryPagingEnable(bool)+0x3b8>
   2bcd8:	e5933030 	ldr	r3, [r3, #48]	; 0x30
   2bcdc:	e1530002 	cmp	r3, r2
   2bce0:	05d00004 	ldrbeq	r0, [r0, #4]
   2bce4:	1a000081 	bne	2bef0 <HwManager::setMemoryPagingEnable(bool)+0x394>
   2bce8:	e3500000 	cmp	r0, #0
   2bcec:	1a000052 	bne	2be3c <HwManager::setMemoryPagingEnable(bool)+0x2e0>
   2bcf0:	e5943000 	ldr	r3, [r4]
    for (int i = 0; i < _numHardware; i++)
   2bcf4:	e3530007 	cmp	r3, #7
   2bcf8:	da00002b 	ble	2bdac <HwManager::setMemoryPagingEnable(bool)+0x250>
        if (_pHw[i] && _pHw[i]->isEnabled())
   2bcfc:	e5940020 	ldr	r0, [r4, #32]
   2bd00:	e3500000 	cmp	r0, #0
   2bd04:	0a000008 	beq	2bd2c <HwManager::setMemoryPagingEnable(bool)+0x1d0>
   2bd08:	e5903000 	ldr	r3, [r0]
   2bd0c:	e59f2200 	ldr	r2, [pc, #512]	; 2bf14 <HwManager::setMemoryPagingEnable(bool)+0x3b8>
   2bd10:	e5933030 	ldr	r3, [r3, #48]	; 0x30
   2bd14:	e1530002 	cmp	r3, r2
   2bd18:	05d00004 	ldrbeq	r0, [r0, #4]
   2bd1c:	1a000075 	bne	2bef8 <HwManager::setMemoryPagingEnable(bool)+0x39c>
   2bd20:	e3500000 	cmp	r0, #0
   2bd24:	1a00005d 	bne	2bea0 <HwManager::setMemoryPagingEnable(bool)+0x344>
   2bd28:	e5943000 	ldr	r3, [r4]
    for (int i = 0; i < _numHardware; i++)
   2bd2c:	e3530008 	cmp	r3, #8
   2bd30:	da00001d 	ble	2bdac <HwManager::setMemoryPagingEnable(bool)+0x250>
        if (_pHw[i] && _pHw[i]->isEnabled())
   2bd34:	e5940024 	ldr	r0, [r4, #36]	; 0x24
   2bd38:	e3500000 	cmp	r0, #0
   2bd3c:	0a000008 	beq	2bd64 <HwManager::setMemoryPagingEnable(bool)+0x208>
   2bd40:	e5903000 	ldr	r3, [r0]
   2bd44:	e59f21c8 	ldr	r2, [pc, #456]	; 2bf14 <HwManager::setMemoryPagingEnable(bool)+0x3b8>
   2bd48:	e5933030 	ldr	r3, [r3, #48]	; 0x30
   2bd4c:	e1530002 	cmp	r3, r2
   2bd50:	05d00004 	ldrbeq	r0, [r0, #4]
   2bd54:	1a000069 	bne	2bf00 <HwManager::setMemoryPagingEnable(bool)+0x3a4>
   2bd58:	e3500000 	cmp	r0, #0
   2bd5c:	1a000058 	bne	2bec4 <HwManager::setMemoryPagingEnable(bool)+0x368>
   2bd60:	e5943000 	ldr	r3, [r4]
    for (int i = 0; i < _numHardware; i++)
   2bd64:	e3530009 	cmp	r3, #9
   2bd68:	da00000f 	ble	2bdac <HwManager::setMemoryPagingEnable(bool)+0x250>
        if (_pHw[i] && _pHw[i]->isEnabled())
   2bd6c:	e5940028 	ldr	r0, [r4, #40]	; 0x28
   2bd70:	e3500000 	cmp	r0, #0
   2bd74:	0a00000c 	beq	2bdac <HwManager::setMemoryPagingEnable(bool)+0x250>
   2bd78:	e5903000 	ldr	r3, [r0]
   2bd7c:	e59f2190 	ldr	r2, [pc, #400]	; 2bf14 <HwManager::setMemoryPagingEnable(bool)+0x3b8>
   2bd80:	e5933030 	ldr	r3, [r3, #48]	; 0x30
   2bd84:	e1530002 	cmp	r3, r2
   2bd88:	1a00005e 	bne	2bf08 <HwManager::setMemoryPagingEnable(bool)+0x3ac>
   2bd8c:	e5d00004 	ldrb	r0, [r0, #4]
   2bd90:	e3500000 	cmp	r0, #0
   2bd94:	0a000004 	beq	2bdac <HwManager::setMemoryPagingEnable(bool)+0x250>
            _pHw[i]->setMemoryPagingEnable(val);
   2bd98:	e5940028 	ldr	r0, [r4, #40]	; 0x28
   2bd9c:	e1a01005 	mov	r1, r5
   2bda0:	e5903000 	ldr	r3, [r0]
   2bda4:	e593300c 	ldr	r3, [r3, #12]
   2bda8:	e12fff33 	blx	r3
    _memoryPagingEnable = val;
   2bdac:	e5c4502d 	strb	r5, [r4, #45]	; 0x2d
}
   2bdb0:	e8bd8070 	pop	{r4, r5, r6, pc}
            _pHw[i]->setMemoryPagingEnable(val);
   2bdb4:	e5940004 	ldr	r0, [r4, #4]
   2bdb8:	e1a01005 	mov	r1, r5
   2bdbc:	e5903000 	ldr	r3, [r0]
   2bdc0:	e593300c 	ldr	r3, [r3, #12]
   2bdc4:	e12fff33 	blx	r3
   2bdc8:	e5943000 	ldr	r3, [r4]
   2bdcc:	eaffff74 	b	2bba4 <HwManager::setMemoryPagingEnable(bool)+0x48>
   2bdd0:	e5940010 	ldr	r0, [r4, #16]
   2bdd4:	e1a01005 	mov	r1, r5
   2bdd8:	e5903000 	ldr	r3, [r0]
   2bddc:	e593300c 	ldr	r3, [r3, #12]
   2bde0:	e12fff33 	blx	r3
   2bde4:	e5943000 	ldr	r3, [r4]
    for (int i = 0; i < _numHardware; i++)
   2bde8:	e3530004 	cmp	r3, #4
   2bdec:	caffff98 	bgt	2bc54 <HwManager::setMemoryPagingEnable(bool)+0xf8>
   2bdf0:	eaffffed 	b	2bdac <HwManager::setMemoryPagingEnable(bool)+0x250>
            _pHw[i]->setMemoryPagingEnable(val);
   2bdf4:	e5940014 	ldr	r0, [r4, #20]
   2bdf8:	e1a01005 	mov	r1, r5
   2bdfc:	e5903000 	ldr	r3, [r0]
   2be00:	e593300c 	ldr	r3, [r3, #12]
   2be04:	e12fff33 	blx	r3
   2be08:	e5943000 	ldr	r3, [r4]
   2be0c:	eaffff9c 	b	2bc84 <HwManager::setMemoryPagingEnable(bool)+0x128>
        if (_pHw[i] && _pHw[i]->isEnabled())
   2be10:	e12fff33 	blx	r3
   2be14:	e3500000 	cmp	r0, #0
   2be18:	0affff60 	beq	2bba0 <HwManager::setMemoryPagingEnable(bool)+0x44>
   2be1c:	eaffffe4 	b	2bdb4 <HwManager::setMemoryPagingEnable(bool)+0x258>
            _pHw[i]->setMemoryPagingEnable(val);
   2be20:	e5940018 	ldr	r0, [r4, #24]
   2be24:	e1a01005 	mov	r1, r5
   2be28:	e5903000 	ldr	r3, [r0]
   2be2c:	e593300c 	ldr	r3, [r3, #12]
   2be30:	e12fff33 	blx	r3
   2be34:	e5943000 	ldr	r3, [r4]
   2be38:	eaffff9f 	b	2bcbc <HwManager::setMemoryPagingEnable(bool)+0x160>
   2be3c:	e594001c 	ldr	r0, [r4, #28]
   2be40:	e1a01005 	mov	r1, r5
   2be44:	e5903000 	ldr	r3, [r0]
   2be48:	e593300c 	ldr	r3, [r3, #12]
   2be4c:	e12fff33 	blx	r3
   2be50:	e5943000 	ldr	r3, [r4]
   2be54:	eaffffa6 	b	2bcf4 <HwManager::setMemoryPagingEnable(bool)+0x198>
   2be58:	e5940008 	ldr	r0, [r4, #8]
   2be5c:	e1a01005 	mov	r1, r5
   2be60:	e5903000 	ldr	r3, [r0]
   2be64:	e593300c 	ldr	r3, [r3, #12]
   2be68:	e12fff33 	blx	r3
   2be6c:	e5943000 	ldr	r3, [r4]
   2be70:	eaffff59 	b	2bbdc <HwManager::setMemoryPagingEnable(bool)+0x80>
   2be74:	e594000c 	ldr	r0, [r4, #12]
   2be78:	e1a01005 	mov	r1, r5
   2be7c:	e5903000 	ldr	r3, [r0]
   2be80:	e593300c 	ldr	r3, [r3, #12]
   2be84:	e12fff33 	blx	r3
   2be88:	e5943000 	ldr	r3, [r4]
   2be8c:	eaffff60 	b	2bc14 <HwManager::setMemoryPagingEnable(bool)+0xb8>
        if (_pHw[i] && _pHw[i]->isEnabled())
   2be90:	e12fff33 	blx	r3
   2be94:	eaffff4d 	b	2bbd0 <HwManager::setMemoryPagingEnable(bool)+0x74>
   2be98:	e12fff33 	blx	r3
   2be9c:	eaffff59 	b	2bc08 <HwManager::setMemoryPagingEnable(bool)+0xac>
            _pHw[i]->setMemoryPagingEnable(val);
   2bea0:	e5940020 	ldr	r0, [r4, #32]
   2bea4:	e1a01005 	mov	r1, r5
   2bea8:	e5903000 	ldr	r3, [r0]
   2beac:	e593300c 	ldr	r3, [r3, #12]
   2beb0:	e12fff33 	blx	r3
   2beb4:	e5943000 	ldr	r3, [r4]
   2beb8:	eaffff9b 	b	2bd2c <HwManager::setMemoryPagingEnable(bool)+0x1d0>
        if (_pHw[i] && _pHw[i]->isEnabled())
   2bebc:	e12fff33 	blx	r3
   2bec0:	eaffff5e 	b	2bc40 <HwManager::setMemoryPagingEnable(bool)+0xe4>
            _pHw[i]->setMemoryPagingEnable(val);
   2bec4:	e5940024 	ldr	r0, [r4, #36]	; 0x24
   2bec8:	e1a01005 	mov	r1, r5
   2becc:	e5903000 	ldr	r3, [r0]
   2bed0:	e593300c 	ldr	r3, [r3, #12]
   2bed4:	e12fff33 	blx	r3
   2bed8:	e5943000 	ldr	r3, [r4]
   2bedc:	eaffffa0 	b	2bd64 <HwManager::setMemoryPagingEnable(bool)+0x208>
        if (_pHw[i] && _pHw[i]->isEnabled())
   2bee0:	e12fff33 	blx	r3
   2bee4:	eaffff63 	b	2bc78 <HwManager::setMemoryPagingEnable(bool)+0x11c>
   2bee8:	e12fff33 	blx	r3
   2beec:	eaffff6f 	b	2bcb0 <HwManager::setMemoryPagingEnable(bool)+0x154>
   2bef0:	e12fff33 	blx	r3
   2bef4:	eaffff7b 	b	2bce8 <HwManager::setMemoryPagingEnable(bool)+0x18c>
   2bef8:	e12fff33 	blx	r3
   2befc:	eaffff87 	b	2bd20 <HwManager::setMemoryPagingEnable(bool)+0x1c4>
   2bf00:	e12fff33 	blx	r3
   2bf04:	eaffff93 	b	2bd58 <HwManager::setMemoryPagingEnable(bool)+0x1fc>
   2bf08:	e12fff33 	blx	r3
   2bf0c:	eaffff9f 	b	2bd90 <HwManager::setMemoryPagingEnable(bool)+0x234>
   2bf10:	00074d68 	.word	0x00074d68
   2bf14:	0002a098 	.word	0x0002a098

0002bf18 <HwManager::setOpcodeInjectEnable(bool)>:
{
   2bf18:	e92d4010 	push	{r4, lr}
    LogWrite(FromHwManager, LOG_DEBUG, "setOpcodeInjectEnable %s", val ? "Y" : "N");
   2bf1c:	e1a04000 	mov	r4, r0
   2bf20:	e59f1024 	ldr	r1, [pc, #36]	; 2bf4c <HwManager::setOpcodeInjectEnable(bool)+0x34>
   2bf24:	e3500000 	cmp	r0, #0
   2bf28:	e59f3020 	ldr	r3, [pc, #32]	; 2bf50 <HwManager::setOpcodeInjectEnable(bool)+0x38>
   2bf2c:	e59f2020 	ldr	r2, [pc, #32]	; 2bf54 <HwManager::setOpcodeInjectEnable(bool)+0x3c>
   2bf30:	11a03001 	movne	r3, r1
   2bf34:	e59f001c 	ldr	r0, [pc, #28]	; 2bf58 <HwManager::setOpcodeInjectEnable(bool)+0x40>
   2bf38:	e3a01004 	mov	r1, #4
   2bf3c:	ebffe08d 	bl	24178 <LogWrite>
    _opcodeInjectEnable = val;
   2bf40:	e59f3014 	ldr	r3, [pc, #20]	; 2bf5c <HwManager::setOpcodeInjectEnable(bool)+0x44>
   2bf44:	e5c3402e 	strb	r4, [r3, #46]	; 0x2e
}
   2bf48:	e8bd8010 	pop	{r4, pc}
   2bf4c:	00052324 	.word	0x00052324
   2bf50:	00054940 	.word	0x00054940
   2bf54:	00054aac 	.word	0x00054aac
   2bf58:	00054a28 	.word	0x00054a28
   2bf5c:	00074d68 	.word	0x00074d68

0002bf60 <HwManager::setMirrorMode(bool)>:
{
   2bf60:	e92d4070 	push	{r4, r5, r6, lr}
    for (int i = 0; i < _numHardware; i++)
   2bf64:	e59f43a8 	ldr	r4, [pc, #936]	; 2c314 <HwManager::setMirrorMode(bool)+0x3b4>
{
   2bf68:	e1a05000 	mov	r5, r0
    for (int i = 0; i < _numHardware; i++)
   2bf6c:	e5943000 	ldr	r3, [r4]
   2bf70:	e3530000 	cmp	r3, #0
   2bf74:	da00008d 	ble	2c1b0 <HwManager::setMirrorMode(bool)+0x250>
        if (_pHw[i] && _pHw[i]->isEnabled())
   2bf78:	e5940004 	ldr	r0, [r4, #4]
   2bf7c:	e3500000 	cmp	r0, #0
   2bf80:	0a000008 	beq	2bfa8 <HwManager::setMirrorMode(bool)+0x48>
   2bf84:	e5903000 	ldr	r3, [r0]
   2bf88:	e59f2388 	ldr	r2, [pc, #904]	; 2c318 <HwManager::setMirrorMode(bool)+0x3b8>
   2bf8c:	e5933030 	ldr	r3, [r3, #48]	; 0x30
   2bf90:	e1530002 	cmp	r3, r2
   2bf94:	05d00004 	ldrbeq	r0, [r0, #4]
   2bf98:	1a00009d 	bne	2c214 <HwManager::setMirrorMode(bool)+0x2b4>
   2bf9c:	e3500000 	cmp	r0, #0
   2bfa0:	1a000084 	bne	2c1b8 <HwManager::setMirrorMode(bool)+0x258>
   2bfa4:	e5943000 	ldr	r3, [r4]
    for (int i = 0; i < _numHardware; i++)
   2bfa8:	e3530001 	cmp	r3, #1
   2bfac:	da00007f 	ble	2c1b0 <HwManager::setMirrorMode(bool)+0x250>
        if (_pHw[i] && _pHw[i]->isEnabled())
   2bfb0:	e5940008 	ldr	r0, [r4, #8]
   2bfb4:	e3500000 	cmp	r0, #0
   2bfb8:	0a000008 	beq	2bfe0 <HwManager::setMirrorMode(bool)+0x80>
   2bfbc:	e5903000 	ldr	r3, [r0]
   2bfc0:	e59f2350 	ldr	r2, [pc, #848]	; 2c318 <HwManager::setMirrorMode(bool)+0x3b8>
   2bfc4:	e5933030 	ldr	r3, [r3, #48]	; 0x30
   2bfc8:	e1530002 	cmp	r3, r2
   2bfcc:	05d00004 	ldrbeq	r0, [r0, #4]
   2bfd0:	1a0000af 	bne	2c294 <HwManager::setMirrorMode(bool)+0x334>
   2bfd4:	e3500000 	cmp	r0, #0
   2bfd8:	1a00009f 	bne	2c25c <HwManager::setMirrorMode(bool)+0x2fc>
   2bfdc:	e5943000 	ldr	r3, [r4]
    for (int i = 0; i < _numHardware; i++)
   2bfe0:	e3530002 	cmp	r3, #2
   2bfe4:	da000071 	ble	2c1b0 <HwManager::setMirrorMode(bool)+0x250>
        if (_pHw[i] && _pHw[i]->isEnabled())
   2bfe8:	e594000c 	ldr	r0, [r4, #12]
   2bfec:	e3500000 	cmp	r0, #0
   2bff0:	0a000008 	beq	2c018 <HwManager::setMirrorMode(bool)+0xb8>
   2bff4:	e5903000 	ldr	r3, [r0]
   2bff8:	e59f2318 	ldr	r2, [pc, #792]	; 2c318 <HwManager::setMirrorMode(bool)+0x3b8>
   2bffc:	e5933030 	ldr	r3, [r3, #48]	; 0x30
   2c000:	e1530002 	cmp	r3, r2
   2c004:	05d00004 	ldrbeq	r0, [r0, #4]
   2c008:	1a0000a3 	bne	2c29c <HwManager::setMirrorMode(bool)+0x33c>
   2c00c:	e3500000 	cmp	r0, #0
   2c010:	1a000098 	bne	2c278 <HwManager::setMirrorMode(bool)+0x318>
   2c014:	e5943000 	ldr	r3, [r4]
    for (int i = 0; i < _numHardware; i++)
   2c018:	e3530003 	cmp	r3, #3
   2c01c:	da000063 	ble	2c1b0 <HwManager::setMirrorMode(bool)+0x250>
        if (_pHw[i] && _pHw[i]->isEnabled())
   2c020:	e5940010 	ldr	r0, [r4, #16]
   2c024:	e3500000 	cmp	r0, #0
   2c028:	0a000008 	beq	2c050 <HwManager::setMirrorMode(bool)+0xf0>
   2c02c:	e5903000 	ldr	r3, [r0]
   2c030:	e59f22e0 	ldr	r2, [pc, #736]	; 2c318 <HwManager::setMirrorMode(bool)+0x3b8>
   2c034:	e5933030 	ldr	r3, [r3, #48]	; 0x30
   2c038:	e1530002 	cmp	r3, r2
   2c03c:	05d00004 	ldrbeq	r0, [r0, #4]
   2c040:	1a00009e 	bne	2c2c0 <HwManager::setMirrorMode(bool)+0x360>
   2c044:	e3500000 	cmp	r0, #0
   2c048:	1a000061 	bne	2c1d4 <HwManager::setMirrorMode(bool)+0x274>
   2c04c:	e5943000 	ldr	r3, [r4]
    for (int i = 0; i < _numHardware; i++)
   2c050:	e3530004 	cmp	r3, #4
   2c054:	da000055 	ble	2c1b0 <HwManager::setMirrorMode(bool)+0x250>
        if (_pHw[i] && _pHw[i]->isEnabled())
   2c058:	e5940014 	ldr	r0, [r4, #20]
   2c05c:	e3500000 	cmp	r0, #0
   2c060:	0a000008 	beq	2c088 <HwManager::setMirrorMode(bool)+0x128>
   2c064:	e5903000 	ldr	r3, [r0]
   2c068:	e59f22a8 	ldr	r2, [pc, #680]	; 2c318 <HwManager::setMirrorMode(bool)+0x3b8>
   2c06c:	e5933030 	ldr	r3, [r3, #48]	; 0x30
   2c070:	e1530002 	cmp	r3, r2
   2c074:	05d00004 	ldrbeq	r0, [r0, #4]
   2c078:	1a000099 	bne	2c2e4 <HwManager::setMirrorMode(bool)+0x384>
   2c07c:	e3500000 	cmp	r0, #0
   2c080:	1a00005c 	bne	2c1f8 <HwManager::setMirrorMode(bool)+0x298>
   2c084:	e5943000 	ldr	r3, [r4]
    for (int i = 0; i < _numHardware; i++)
   2c088:	e3530005 	cmp	r3, #5
   2c08c:	da000047 	ble	2c1b0 <HwManager::setMirrorMode(bool)+0x250>
        if (_pHw[i] && _pHw[i]->isEnabled())
   2c090:	e5940018 	ldr	r0, [r4, #24]
   2c094:	e3500000 	cmp	r0, #0
   2c098:	0a000008 	beq	2c0c0 <HwManager::setMirrorMode(bool)+0x160>
   2c09c:	e5903000 	ldr	r3, [r0]
   2c0a0:	e59f2270 	ldr	r2, [pc, #624]	; 2c318 <HwManager::setMirrorMode(bool)+0x3b8>
   2c0a4:	e5933030 	ldr	r3, [r3, #48]	; 0x30
   2c0a8:	e1530002 	cmp	r3, r2
   2c0ac:	05d00004 	ldrbeq	r0, [r0, #4]
   2c0b0:	1a00008d 	bne	2c2ec <HwManager::setMirrorMode(bool)+0x38c>
   2c0b4:	e3500000 	cmp	r0, #0
   2c0b8:	1a000059 	bne	2c224 <HwManager::setMirrorMode(bool)+0x2c4>
   2c0bc:	e5943000 	ldr	r3, [r4]
    for (int i = 0; i < _numHardware; i++)
   2c0c0:	e3530006 	cmp	r3, #6
   2c0c4:	da000039 	ble	2c1b0 <HwManager::setMirrorMode(bool)+0x250>
        if (_pHw[i] && _pHw[i]->isEnabled())
   2c0c8:	e594001c 	ldr	r0, [r4, #28]
   2c0cc:	e3500000 	cmp	r0, #0
   2c0d0:	0a000008 	beq	2c0f8 <HwManager::setMirrorMode(bool)+0x198>
   2c0d4:	e5903000 	ldr	r3, [r0]
   2c0d8:	e59f2238 	ldr	r2, [pc, #568]	; 2c318 <HwManager::setMirrorMode(bool)+0x3b8>
   2c0dc:	e5933030 	ldr	r3, [r3, #48]	; 0x30
   2c0e0:	e1530002 	cmp	r3, r2
   2c0e4:	05d00004 	ldrbeq	r0, [r0, #4]
   2c0e8:	1a000081 	bne	2c2f4 <HwManager::setMirrorMode(bool)+0x394>
   2c0ec:	e3500000 	cmp	r0, #0
   2c0f0:	1a000052 	bne	2c240 <HwManager::setMirrorMode(bool)+0x2e0>
   2c0f4:	e5943000 	ldr	r3, [r4]
    for (int i = 0; i < _numHardware; i++)
   2c0f8:	e3530007 	cmp	r3, #7
   2c0fc:	da00002b 	ble	2c1b0 <HwManager::setMirrorMode(bool)+0x250>
        if (_pHw[i] && _pHw[i]->isEnabled())
   2c100:	e5940020 	ldr	r0, [r4, #32]
   2c104:	e3500000 	cmp	r0, #0
   2c108:	0a000008 	beq	2c130 <HwManager::setMirrorMode(bool)+0x1d0>
   2c10c:	e5903000 	ldr	r3, [r0]
   2c110:	e59f2200 	ldr	r2, [pc, #512]	; 2c318 <HwManager::setMirrorMode(bool)+0x3b8>
   2c114:	e5933030 	ldr	r3, [r3, #48]	; 0x30
   2c118:	e1530002 	cmp	r3, r2
   2c11c:	05d00004 	ldrbeq	r0, [r0, #4]
   2c120:	1a000075 	bne	2c2fc <HwManager::setMirrorMode(bool)+0x39c>
   2c124:	e3500000 	cmp	r0, #0
   2c128:	1a00005d 	bne	2c2a4 <HwManager::setMirrorMode(bool)+0x344>
   2c12c:	e5943000 	ldr	r3, [r4]
    for (int i = 0; i < _numHardware; i++)
   2c130:	e3530008 	cmp	r3, #8
   2c134:	da00001d 	ble	2c1b0 <HwManager::setMirrorMode(bool)+0x250>
        if (_pHw[i] && _pHw[i]->isEnabled())
   2c138:	e5940024 	ldr	r0, [r4, #36]	; 0x24
   2c13c:	e3500000 	cmp	r0, #0
   2c140:	0a000008 	beq	2c168 <HwManager::setMirrorMode(bool)+0x208>
   2c144:	e5903000 	ldr	r3, [r0]
   2c148:	e59f21c8 	ldr	r2, [pc, #456]	; 2c318 <HwManager::setMirrorMode(bool)+0x3b8>
   2c14c:	e5933030 	ldr	r3, [r3, #48]	; 0x30
   2c150:	e1530002 	cmp	r3, r2
   2c154:	05d00004 	ldrbeq	r0, [r0, #4]
   2c158:	1a000069 	bne	2c304 <HwManager::setMirrorMode(bool)+0x3a4>
   2c15c:	e3500000 	cmp	r0, #0
   2c160:	1a000058 	bne	2c2c8 <HwManager::setMirrorMode(bool)+0x368>
   2c164:	e5943000 	ldr	r3, [r4]
    for (int i = 0; i < _numHardware; i++)
   2c168:	e3530009 	cmp	r3, #9
   2c16c:	da00000f 	ble	2c1b0 <HwManager::setMirrorMode(bool)+0x250>
        if (_pHw[i] && _pHw[i]->isEnabled())
   2c170:	e5940028 	ldr	r0, [r4, #40]	; 0x28
   2c174:	e3500000 	cmp	r0, #0
   2c178:	0a00000c 	beq	2c1b0 <HwManager::setMirrorMode(bool)+0x250>
   2c17c:	e5903000 	ldr	r3, [r0]
   2c180:	e59f2190 	ldr	r2, [pc, #400]	; 2c318 <HwManager::setMirrorMode(bool)+0x3b8>
   2c184:	e5933030 	ldr	r3, [r3, #48]	; 0x30
   2c188:	e1530002 	cmp	r3, r2
   2c18c:	1a00005e 	bne	2c30c <HwManager::setMirrorMode(bool)+0x3ac>
   2c190:	e5d00004 	ldrb	r0, [r0, #4]
   2c194:	e3500000 	cmp	r0, #0
   2c198:	0a000004 	beq	2c1b0 <HwManager::setMirrorMode(bool)+0x250>
            _pHw[i]->setMirrorMode(val);
   2c19c:	e5940028 	ldr	r0, [r4, #40]	; 0x28
   2c1a0:	e1a01005 	mov	r1, r5
   2c1a4:	e5903000 	ldr	r3, [r0]
   2c1a8:	e5933014 	ldr	r3, [r3, #20]
   2c1ac:	e12fff33 	blx	r3
    _mirrorMode = val;
   2c1b0:	e5c4502f 	strb	r5, [r4, #47]	; 0x2f
}
   2c1b4:	e8bd8070 	pop	{r4, r5, r6, pc}
            _pHw[i]->setMirrorMode(val);
   2c1b8:	e5940004 	ldr	r0, [r4, #4]
   2c1bc:	e1a01005 	mov	r1, r5
   2c1c0:	e5903000 	ldr	r3, [r0]
   2c1c4:	e5933014 	ldr	r3, [r3, #20]
   2c1c8:	e12fff33 	blx	r3
   2c1cc:	e5943000 	ldr	r3, [r4]
   2c1d0:	eaffff74 	b	2bfa8 <HwManager::setMirrorMode(bool)+0x48>
   2c1d4:	e5940010 	ldr	r0, [r4, #16]
   2c1d8:	e1a01005 	mov	r1, r5
   2c1dc:	e5903000 	ldr	r3, [r0]
   2c1e0:	e5933014 	ldr	r3, [r3, #20]
   2c1e4:	e12fff33 	blx	r3
   2c1e8:	e5943000 	ldr	r3, [r4]
    for (int i = 0; i < _numHardware; i++)
   2c1ec:	e3530004 	cmp	r3, #4
   2c1f0:	caffff98 	bgt	2c058 <HwManager::setMirrorMode(bool)+0xf8>
   2c1f4:	eaffffed 	b	2c1b0 <HwManager::setMirrorMode(bool)+0x250>
            _pHw[i]->setMirrorMode(val);
   2c1f8:	e5940014 	ldr	r0, [r4, #20]
   2c1fc:	e1a01005 	mov	r1, r5
   2c200:	e5903000 	ldr	r3, [r0]
   2c204:	e5933014 	ldr	r3, [r3, #20]
   2c208:	e12fff33 	blx	r3
   2c20c:	e5943000 	ldr	r3, [r4]
   2c210:	eaffff9c 	b	2c088 <HwManager::setMirrorMode(bool)+0x128>
        if (_pHw[i] && _pHw[i]->isEnabled())
   2c214:	e12fff33 	blx	r3
   2c218:	e3500000 	cmp	r0, #0
   2c21c:	0affff60 	beq	2bfa4 <HwManager::setMirrorMode(bool)+0x44>
   2c220:	eaffffe4 	b	2c1b8 <HwManager::setMirrorMode(bool)+0x258>
            _pHw[i]->setMirrorMode(val);
   2c224:	e5940018 	ldr	r0, [r4, #24]
   2c228:	e1a01005 	mov	r1, r5
   2c22c:	e5903000 	ldr	r3, [r0]
   2c230:	e5933014 	ldr	r3, [r3, #20]
   2c234:	e12fff33 	blx	r3
   2c238:	e5943000 	ldr	r3, [r4]
   2c23c:	eaffff9f 	b	2c0c0 <HwManager::setMirrorMode(bool)+0x160>
   2c240:	e594001c 	ldr	r0, [r4, #28]
   2c244:	e1a01005 	mov	r1, r5
   2c248:	e5903000 	ldr	r3, [r0]
   2c24c:	e5933014 	ldr	r3, [r3, #20]
   2c250:	e12fff33 	blx	r3
   2c254:	e5943000 	ldr	r3, [r4]
   2c258:	eaffffa6 	b	2c0f8 <HwManager::setMirrorMode(bool)+0x198>
   2c25c:	e5940008 	ldr	r0, [r4, #8]
   2c260:	e1a01005 	mov	r1, r5
   2c264:	e5903000 	ldr	r3, [r0]
   2c268:	e5933014 	ldr	r3, [r3, #20]
   2c26c:	e12fff33 	blx	r3
   2c270:	e5943000 	ldr	r3, [r4]
   2c274:	eaffff59 	b	2bfe0 <HwManager::setMirrorMode(bool)+0x80>
   2c278:	e594000c 	ldr	r0, [r4, #12]
   2c27c:	e1a01005 	mov	r1, r5
   2c280:	e5903000 	ldr	r3, [r0]
   2c284:	e5933014 	ldr	r3, [r3, #20]
   2c288:	e12fff33 	blx	r3
   2c28c:	e5943000 	ldr	r3, [r4]
   2c290:	eaffff60 	b	2c018 <HwManager::setMirrorMode(bool)+0xb8>
        if (_pHw[i] && _pHw[i]->isEnabled())
   2c294:	e12fff33 	blx	r3
   2c298:	eaffff4d 	b	2bfd4 <HwManager::setMirrorMode(bool)+0x74>
   2c29c:	e12fff33 	blx	r3
   2c2a0:	eaffff59 	b	2c00c <HwManager::setMirrorMode(bool)+0xac>
            _pHw[i]->setMirrorMode(val);
   2c2a4:	e5940020 	ldr	r0, [r4, #32]
   2c2a8:	e1a01005 	mov	r1, r5
   2c2ac:	e5903000 	ldr	r3, [r0]
   2c2b0:	e5933014 	ldr	r3, [r3, #20]
   2c2b4:	e12fff33 	blx	r3
   2c2b8:	e5943000 	ldr	r3, [r4]
   2c2bc:	eaffff9b 	b	2c130 <HwManager::setMirrorMode(bool)+0x1d0>
        if (_pHw[i] && _pHw[i]->isEnabled())
   2c2c0:	e12fff33 	blx	r3
   2c2c4:	eaffff5e 	b	2c044 <HwManager::setMirrorMode(bool)+0xe4>
            _pHw[i]->setMirrorMode(val);
   2c2c8:	e5940024 	ldr	r0, [r4, #36]	; 0x24
   2c2cc:	e1a01005 	mov	r1, r5
   2c2d0:	e5903000 	ldr	r3, [r0]
   2c2d4:	e5933014 	ldr	r3, [r3, #20]
   2c2d8:	e12fff33 	blx	r3
   2c2dc:	e5943000 	ldr	r3, [r4]
   2c2e0:	eaffffa0 	b	2c168 <HwManager::setMirrorMode(bool)+0x208>
        if (_pHw[i] && _pHw[i]->isEnabled())
   2c2e4:	e12fff33 	blx	r3
   2c2e8:	eaffff63 	b	2c07c <HwManager::setMirrorMode(bool)+0x11c>
   2c2ec:	e12fff33 	blx	r3
   2c2f0:	eaffff6f 	b	2c0b4 <HwManager::setMirrorMode(bool)+0x154>
   2c2f4:	e12fff33 	blx	r3
   2c2f8:	eaffff7b 	b	2c0ec <HwManager::setMirrorMode(bool)+0x18c>
   2c2fc:	e12fff33 	blx	r3
   2c300:	eaffff87 	b	2c124 <HwManager::setMirrorMode(bool)+0x1c4>
   2c304:	e12fff33 	blx	r3
   2c308:	eaffff93 	b	2c15c <HwManager::setMirrorMode(bool)+0x1fc>
   2c30c:	e12fff33 	blx	r3
   2c310:	eaffff9f 	b	2c194 <HwManager::setMirrorMode(bool)+0x234>
   2c314:	00074d68 	.word	0x00074d68
   2c318:	0002a098 	.word	0x0002a098

0002c31c <HwManager::getMaxAddress()>:
}
   2c31c:	e59f0000 	ldr	r0, [pc]	; 2c324 <HwManager::getMaxAddress()+0x8>
   2c320:	e12fff1e 	bx	lr
   2c324:	0000ffff 	.word	0x0000ffff

0002c328 <HwManager::blockWrite(unsigned long, unsigned char const*, unsigned long, bool, bool, bool)>:
{
   2c328:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2c32c:	e24dd01c 	sub	sp, sp, #28
   2c330:	e5dd4044 	ldrb	r4, [sp, #68]	; 0x44
   2c334:	e1a09000 	mov	r9, r0
   2c338:	e58d100c 	str	r1, [sp, #12]
   2c33c:	e58d2010 	str	r2, [sp, #16]
   2c340:	e1a0a003 	mov	sl, r3
   2c344:	e5ddb040 	ldrb	fp, [sp, #64]	; 0x40
    if (TargetTracker::busAccessAvailable() && !forceMirrorAccess)
   2c348:	eb003a09 	bl	3ab74 <TargetTracker::busAccessAvailable()>
   2c34c:	e2200001 	eor	r0, r0, #1
   2c350:	e1844000 	orr	r4, r4, r0
   2c354:	e31400ff 	tst	r4, #255	; 0xff
   2c358:	0a000025 	beq	2c3f4 <HwManager::blockWrite(unsigned long, unsigned char const*, unsigned long, bool, bool, bool)+0xcc>
    for (int i = 0; i < _numHardware; i++)
   2c35c:	e59f60c4 	ldr	r6, [pc, #196]	; 2c428 <HwManager::blockWrite(unsigned long, unsigned char const*, unsigned long, bool, bool, bool)+0x100>
   2c360:	e5963000 	ldr	r3, [r6]
   2c364:	e3530000 	cmp	r3, #0
   2c368:	da000029 	ble	2c414 <HwManager::blockWrite(unsigned long, unsigned char const*, unsigned long, bool, bool, bool)+0xec>
   2c36c:	e3a04000 	mov	r4, #0
   2c370:	e59f70b4 	ldr	r7, [pc, #180]	; 2c42c <HwManager::blockWrite(unsigned long, unsigned char const*, unsigned long, bool, bool, bool)+0x104>
   2c374:	e58d4014 	str	r4, [sp, #20]
   2c378:	e2865004 	add	r5, r6, #4
        if (_pHw[i] && _pHw[i]->isEnabled())
   2c37c:	e7950104 	ldr	r0, [r5, r4, lsl #2]
   2c380:	e1a08104 	lsl	r8, r4, #2
   2c384:	e3500000 	cmp	r0, #0
   2c388:	0a000011 	beq	2c3d4 <HwManager::blockWrite(unsigned long, unsigned char const*, unsigned long, bool, bool, bool)+0xac>
   2c38c:	e5903000 	ldr	r3, [r0]
   2c390:	e5933030 	ldr	r3, [r3, #48]	; 0x30
   2c394:	e1530007 	cmp	r3, r7
   2c398:	1a000013 	bne	2c3ec <HwManager::blockWrite(unsigned long, unsigned char const*, unsigned long, bool, bool, bool)+0xc4>
   2c39c:	e5d00004 	ldrb	r0, [r0, #4]
   2c3a0:	e3500000 	cmp	r0, #0
   2c3a4:	0a000009 	beq	2c3d0 <HwManager::blockWrite(unsigned long, unsigned char const*, unsigned long, bool, bool, bool)+0xa8>
            BR_RETURN_TYPE newRet = _pHw[i]->blockWrite(addr, pBuf, len, busRqAndRelease, iorq);
   2c3a8:	e7950008 	ldr	r0, [r5, r8]
   2c3ac:	e59d3010 	ldr	r3, [sp, #16]
   2c3b0:	e5902000 	ldr	r2, [r0]
   2c3b4:	e1cda0f0 	strd	sl, [sp]
   2c3b8:	e1a01009 	mov	r1, r9
   2c3bc:	e592801c 	ldr	r8, [r2, #28]
   2c3c0:	e59d200c 	ldr	r2, [sp, #12]
   2c3c4:	e12fff38 	blx	r8
            retVal = (newRet == BR_OK || newRet == BR_NOT_HANDLED) ? retVal : newRet;
   2c3c8:	e31000fb 	tst	r0, #251	; 0xfb
   2c3cc:	158d0014 	strne	r0, [sp, #20]
   2c3d0:	e5963000 	ldr	r3, [r6]
    for (int i = 0; i < _numHardware; i++)
   2c3d4:	e2844001 	add	r4, r4, #1
   2c3d8:	e1540003 	cmp	r4, r3
   2c3dc:	baffffe6 	blt	2c37c <HwManager::blockWrite(unsigned long, unsigned char const*, unsigned long, bool, bool, bool)+0x54>
   2c3e0:	e59d0014 	ldr	r0, [sp, #20]
}
   2c3e4:	e28dd01c 	add	sp, sp, #28
   2c3e8:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (_pHw[i] && _pHw[i]->isEnabled())
   2c3ec:	e12fff33 	blx	r3
   2c3f0:	eaffffea 	b	2c3a0 <HwManager::blockWrite(unsigned long, unsigned char const*, unsigned long, bool, bool, bool)+0x78>
        return BusAccess::blockWrite(addr, pBuf, len, busRqAndRelease, iorq);
   2c3f4:	e1a0300a 	mov	r3, sl
   2c3f8:	e1a00009 	mov	r0, r9
   2c3fc:	e59d2010 	ldr	r2, [sp, #16]
   2c400:	e59d100c 	ldr	r1, [sp, #12]
   2c404:	e58db040 	str	fp, [sp, #64]	; 0x40
}
   2c408:	e28dd01c 	add	sp, sp, #28
   2c40c:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
        return BusAccess::blockWrite(addr, pBuf, len, busRqAndRelease, iorq);
   2c410:	ea00336d 	b	391cc <BusAccess::blockWrite(unsigned long, unsigned char const*, unsigned long, bool, bool)>
    for (int i = 0; i < _numHardware; i++)
   2c414:	e3a03000 	mov	r3, #0
   2c418:	e1a00003 	mov	r0, r3
   2c41c:	e58d3014 	str	r3, [sp, #20]
}
   2c420:	e28dd01c 	add	sp, sp, #28
   2c424:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2c428:	00074d68 	.word	0x00074d68
   2c42c:	0002a098 	.word	0x0002a098

0002c430 <HwManager::blockRead(unsigned long, unsigned char*, unsigned long, bool, bool, bool)>:
{
   2c430:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2c434:	e24dd01c 	sub	sp, sp, #28
   2c438:	e5dd4044 	ldrb	r4, [sp, #68]	; 0x44
   2c43c:	e1a09000 	mov	r9, r0
   2c440:	e58d100c 	str	r1, [sp, #12]
   2c444:	e58d2010 	str	r2, [sp, #16]
   2c448:	e1a0a003 	mov	sl, r3
   2c44c:	e5ddb040 	ldrb	fp, [sp, #64]	; 0x40
    if (TargetTracker::busAccessAvailable() && !forceMirrorAccess)
   2c450:	eb0039c7 	bl	3ab74 <TargetTracker::busAccessAvailable()>
   2c454:	e2200001 	eor	r0, r0, #1
   2c458:	e1844000 	orr	r4, r4, r0
   2c45c:	e31400ff 	tst	r4, #255	; 0xff
   2c460:	0a000025 	beq	2c4fc <HwManager::blockRead(unsigned long, unsigned char*, unsigned long, bool, bool, bool)+0xcc>
    for (int i = 0; i < _numHardware; i++)
   2c464:	e59f60c4 	ldr	r6, [pc, #196]	; 2c530 <HwManager::blockRead(unsigned long, unsigned char*, unsigned long, bool, bool, bool)+0x100>
   2c468:	e5963000 	ldr	r3, [r6]
   2c46c:	e3530000 	cmp	r3, #0
   2c470:	da000029 	ble	2c51c <HwManager::blockRead(unsigned long, unsigned char*, unsigned long, bool, bool, bool)+0xec>
   2c474:	e3a04000 	mov	r4, #0
   2c478:	e59f70b4 	ldr	r7, [pc, #180]	; 2c534 <HwManager::blockRead(unsigned long, unsigned char*, unsigned long, bool, bool, bool)+0x104>
   2c47c:	e58d4014 	str	r4, [sp, #20]
   2c480:	e2865004 	add	r5, r6, #4
        if (_pHw[i] && _pHw[i]->isEnabled())
   2c484:	e7950104 	ldr	r0, [r5, r4, lsl #2]
   2c488:	e1a08104 	lsl	r8, r4, #2
   2c48c:	e3500000 	cmp	r0, #0
   2c490:	0a000011 	beq	2c4dc <HwManager::blockRead(unsigned long, unsigned char*, unsigned long, bool, bool, bool)+0xac>
   2c494:	e5903000 	ldr	r3, [r0]
   2c498:	e5933030 	ldr	r3, [r3, #48]	; 0x30
   2c49c:	e1530007 	cmp	r3, r7
   2c4a0:	1a000013 	bne	2c4f4 <HwManager::blockRead(unsigned long, unsigned char*, unsigned long, bool, bool, bool)+0xc4>
   2c4a4:	e5d00004 	ldrb	r0, [r0, #4]
   2c4a8:	e3500000 	cmp	r0, #0
   2c4ac:	0a000009 	beq	2c4d8 <HwManager::blockRead(unsigned long, unsigned char*, unsigned long, bool, bool, bool)+0xa8>
            BR_RETURN_TYPE newRet = _pHw[i]->blockRead(addr, pBuf, len, busRqAndRelease, iorq);
   2c4b0:	e7950008 	ldr	r0, [r5, r8]
   2c4b4:	e59d3010 	ldr	r3, [sp, #16]
   2c4b8:	e5902000 	ldr	r2, [r0]
   2c4bc:	e1cda0f0 	strd	sl, [sp]
   2c4c0:	e1a01009 	mov	r1, r9
   2c4c4:	e5928020 	ldr	r8, [r2, #32]
   2c4c8:	e59d200c 	ldr	r2, [sp, #12]
   2c4cc:	e12fff38 	blx	r8
            retVal = (newRet == BR_OK || newRet == BR_NOT_HANDLED) ? retVal : newRet;
   2c4d0:	e31000fb 	tst	r0, #251	; 0xfb
   2c4d4:	158d0014 	strne	r0, [sp, #20]
   2c4d8:	e5963000 	ldr	r3, [r6]
    for (int i = 0; i < _numHardware; i++)
   2c4dc:	e2844001 	add	r4, r4, #1
   2c4e0:	e1540003 	cmp	r4, r3
   2c4e4:	baffffe6 	blt	2c484 <HwManager::blockRead(unsigned long, unsigned char*, unsigned long, bool, bool, bool)+0x54>
   2c4e8:	e59d0014 	ldr	r0, [sp, #20]
}
   2c4ec:	e28dd01c 	add	sp, sp, #28
   2c4f0:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (_pHw[i] && _pHw[i]->isEnabled())
   2c4f4:	e12fff33 	blx	r3
   2c4f8:	eaffffea 	b	2c4a8 <HwManager::blockRead(unsigned long, unsigned char*, unsigned long, bool, bool, bool)+0x78>
        return BusAccess::blockRead(addr, pBuf, len, busRqAndRelease, iorq);
   2c4fc:	e1a0300a 	mov	r3, sl
   2c500:	e1a00009 	mov	r0, r9
   2c504:	e59d2010 	ldr	r2, [sp, #16]
   2c508:	e59d100c 	ldr	r1, [sp, #12]
   2c50c:	e58db040 	str	fp, [sp, #64]	; 0x40
}
   2c510:	e28dd01c 	add	sp, sp, #28
   2c514:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
        return BusAccess::blockRead(addr, pBuf, len, busRqAndRelease, iorq);
   2c518:	ea0033ef 	b	394dc <BusAccess::blockRead(unsigned long, unsigned char*, unsigned long, bool, bool)>
    for (int i = 0; i < _numHardware; i++)
   2c51c:	e3a03000 	mov	r3, #0
   2c520:	e1a00003 	mov	r0, r3
   2c524:	e58d3014 	str	r3, [sp, #20]
}
   2c528:	e28dd01c 	add	sp, sp, #28
   2c52c:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2c530:	00074d68 	.word	0x00074d68
   2c534:	0002a098 	.word	0x0002a098

0002c538 <HwManager::getMirrorMemForAddr(unsigned long)>:
{
   2c538:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    for (int i = 0; i < _numHardware; i++)
   2c53c:	e59f8084 	ldr	r8, [pc, #132]	; 2c5c8 <HwManager::getMirrorMemForAddr(unsigned long)+0x90>
   2c540:	e5983000 	ldr	r3, [r8]
   2c544:	e3530000 	cmp	r3, #0
   2c548:	da00001c 	ble	2c5c0 <HwManager::getMirrorMemForAddr(unsigned long)+0x88>
   2c54c:	e1a07000 	mov	r7, r0
   2c550:	e1a05008 	mov	r5, r8
   2c554:	e3a04000 	mov	r4, #0
   2c558:	e59f606c 	ldr	r6, [pc, #108]	; 2c5cc <HwManager::getMirrorMemForAddr(unsigned long)+0x94>
   2c55c:	ea000003 	b	2c570 <HwManager::getMirrorMemForAddr(unsigned long)+0x38>
   2c560:	e5983000 	ldr	r3, [r8]
   2c564:	e2844001 	add	r4, r4, #1
   2c568:	e1530004 	cmp	r3, r4
   2c56c:	da000013 	ble	2c5c0 <HwManager::getMirrorMemForAddr(unsigned long)+0x88>
        if (_pHw[i] && _pHw[i]->isEnabled())
   2c570:	e5b50004 	ldr	r0, [r5, #4]!
   2c574:	e3500000 	cmp	r0, #0
   2c578:	0afffff9 	beq	2c564 <HwManager::getMirrorMemForAddr(unsigned long)+0x2c>
   2c57c:	e5903000 	ldr	r3, [r0]
   2c580:	e5933030 	ldr	r3, [r3, #48]	; 0x30
   2c584:	e1530006 	cmp	r3, r6
   2c588:	1a00000a 	bne	2c5b8 <HwManager::getMirrorMemForAddr(unsigned long)+0x80>
   2c58c:	e5d00004 	ldrb	r0, [r0, #4]
   2c590:	e3500000 	cmp	r0, #0
   2c594:	0afffff1 	beq	2c560 <HwManager::getMirrorMemForAddr(unsigned long)+0x28>
            pMirrorMemPtr = _pHw[i]->getMirrorMemForAddr(addr);
   2c598:	e5950000 	ldr	r0, [r5]
   2c59c:	e1a01007 	mov	r1, r7
   2c5a0:	e5903000 	ldr	r3, [r0]
   2c5a4:	e5933024 	ldr	r3, [r3, #36]	; 0x24
   2c5a8:	e12fff33 	blx	r3
            if (pMirrorMemPtr != NULL)
   2c5ac:	e3500000 	cmp	r0, #0
   2c5b0:	0affffea 	beq	2c560 <HwManager::getMirrorMemForAddr(unsigned long)+0x28>
   2c5b4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
        if (_pHw[i] && _pHw[i]->isEnabled())
   2c5b8:	e12fff33 	blx	r3
   2c5bc:	eafffff3 	b	2c590 <HwManager::getMirrorMemForAddr(unsigned long)+0x58>
    for (int i = 0; i < _numHardware; i++)
   2c5c0:	e3a00000 	mov	r0, #0
}
   2c5c4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   2c5c8:	00074d68 	.word	0x00074d68
   2c5cc:	0002a098 	.word	0x0002a098

0002c5d0 <HwManager::mirrorClone()>:
{
   2c5d0:	e92d4010 	push	{r4, lr}
    for (int i = 0; i < _numHardware; i++)
   2c5d4:	e59f4398 	ldr	r4, [pc, #920]	; 2c974 <HwManager::mirrorClone()+0x3a4>
   2c5d8:	e5943000 	ldr	r3, [r4]
   2c5dc:	e3530000 	cmp	r3, #0
   2c5e0:	d8bd8010 	pople	{r4, pc}
        if (_pHw[i] && _pHw[i]->isEnabled())
   2c5e4:	e5940004 	ldr	r0, [r4, #4]
   2c5e8:	e3500000 	cmp	r0, #0
   2c5ec:	0a000008 	beq	2c614 <HwManager::mirrorClone()+0x44>
   2c5f0:	e5903000 	ldr	r3, [r0]
   2c5f4:	e59f237c 	ldr	r2, [pc, #892]	; 2c978 <HwManager::mirrorClone()+0x3a8>
   2c5f8:	e5933030 	ldr	r3, [r3, #48]	; 0x30
   2c5fc:	e1530002 	cmp	r3, r2
   2c600:	05d00004 	ldrbeq	r0, [r0, #4]
   2c604:	1a00009c 	bne	2c87c <HwManager::mirrorClone()+0x2ac>
   2c608:	e3500000 	cmp	r0, #0
   2c60c:	1a000082 	bne	2c81c <HwManager::mirrorClone()+0x24c>
   2c610:	e5943000 	ldr	r3, [r4]
    for (int i = 0; i < _numHardware; i++)
   2c614:	e3530001 	cmp	r3, #1
   2c618:	d8bd8010 	pople	{r4, pc}
        if (_pHw[i] && _pHw[i]->isEnabled())
   2c61c:	e5940008 	ldr	r0, [r4, #8]
   2c620:	e3500000 	cmp	r0, #0
   2c624:	0a000008 	beq	2c64c <HwManager::mirrorClone()+0x7c>
   2c628:	e5903000 	ldr	r3, [r0]
   2c62c:	e59f2344 	ldr	r2, [pc, #836]	; 2c978 <HwManager::mirrorClone()+0x3a8>
   2c630:	e5933030 	ldr	r3, [r3, #48]	; 0x30
   2c634:	e1530002 	cmp	r3, r2
   2c638:	05d00004 	ldrbeq	r0, [r0, #4]
   2c63c:	1a0000ae 	bne	2c8fc <HwManager::mirrorClone()+0x32c>
   2c640:	e3500000 	cmp	r0, #0
   2c644:	1a00009c 	bne	2c8bc <HwManager::mirrorClone()+0x2ec>
   2c648:	e5943000 	ldr	r3, [r4]
    for (int i = 0; i < _numHardware; i++)
   2c64c:	e3530002 	cmp	r3, #2
   2c650:	d8bd8010 	pople	{r4, pc}
        if (_pHw[i] && _pHw[i]->isEnabled())
   2c654:	e594000c 	ldr	r0, [r4, #12]
   2c658:	e3500000 	cmp	r0, #0
   2c65c:	0a000008 	beq	2c684 <HwManager::mirrorClone()+0xb4>
   2c660:	e5903000 	ldr	r3, [r0]
   2c664:	e59f230c 	ldr	r2, [pc, #780]	; 2c978 <HwManager::mirrorClone()+0x3a8>
   2c668:	e5933030 	ldr	r3, [r3, #48]	; 0x30
   2c66c:	e1530002 	cmp	r3, r2
   2c670:	05d00004 	ldrbeq	r0, [r0, #4]
   2c674:	1a0000a2 	bne	2c904 <HwManager::mirrorClone()+0x334>
   2c678:	e3500000 	cmp	r0, #0
   2c67c:	1a000096 	bne	2c8dc <HwManager::mirrorClone()+0x30c>
   2c680:	e5943000 	ldr	r3, [r4]
    for (int i = 0; i < _numHardware; i++)
   2c684:	e3530003 	cmp	r3, #3
   2c688:	d8bd8010 	pople	{r4, pc}
        if (_pHw[i] && _pHw[i]->isEnabled())
   2c68c:	e5940010 	ldr	r0, [r4, #16]
   2c690:	e3500000 	cmp	r0, #0
   2c694:	0a000008 	beq	2c6bc <HwManager::mirrorClone()+0xec>
   2c698:	e5903000 	ldr	r3, [r0]
   2c69c:	e59f22d4 	ldr	r2, [pc, #724]	; 2c978 <HwManager::mirrorClone()+0x3a8>
   2c6a0:	e5933030 	ldr	r3, [r3, #48]	; 0x30
   2c6a4:	e1530002 	cmp	r3, r2
   2c6a8:	05d00004 	ldrbeq	r0, [r0, #4]
   2c6ac:	1a00009c 	bne	2c924 <HwManager::mirrorClone()+0x354>
   2c6b0:	e3500000 	cmp	r0, #0
   2c6b4:	1a000060 	bne	2c83c <HwManager::mirrorClone()+0x26c>
   2c6b8:	e5943000 	ldr	r3, [r4]
    for (int i = 0; i < _numHardware; i++)
   2c6bc:	e3530004 	cmp	r3, #4
   2c6c0:	d8bd8010 	pople	{r4, pc}
        if (_pHw[i] && _pHw[i]->isEnabled())
   2c6c4:	e5940014 	ldr	r0, [r4, #20]
   2c6c8:	e3500000 	cmp	r0, #0
   2c6cc:	0a000008 	beq	2c6f4 <HwManager::mirrorClone()+0x124>
   2c6d0:	e5903000 	ldr	r3, [r0]
   2c6d4:	e59f229c 	ldr	r2, [pc, #668]	; 2c978 <HwManager::mirrorClone()+0x3a8>
   2c6d8:	e5933030 	ldr	r3, [r3, #48]	; 0x30
   2c6dc:	e1530002 	cmp	r3, r2
   2c6e0:	05d00004 	ldrbeq	r0, [r0, #4]
   2c6e4:	1a000096 	bne	2c944 <HwManager::mirrorClone()+0x374>
   2c6e8:	e3500000 	cmp	r0, #0
   2c6ec:	1a00005a 	bne	2c85c <HwManager::mirrorClone()+0x28c>
   2c6f0:	e5943000 	ldr	r3, [r4]
    for (int i = 0; i < _numHardware; i++)
   2c6f4:	e3530005 	cmp	r3, #5
   2c6f8:	d8bd8010 	pople	{r4, pc}
        if (_pHw[i] && _pHw[i]->isEnabled())
   2c6fc:	e5940018 	ldr	r0, [r4, #24]
   2c700:	e3500000 	cmp	r0, #0
   2c704:	0a000008 	beq	2c72c <HwManager::mirrorClone()+0x15c>
   2c708:	e5903000 	ldr	r3, [r0]
   2c70c:	e59f2264 	ldr	r2, [pc, #612]	; 2c978 <HwManager::mirrorClone()+0x3a8>
   2c710:	e5933030 	ldr	r3, [r3, #48]	; 0x30
   2c714:	e1530002 	cmp	r3, r2
   2c718:	05d00004 	ldrbeq	r0, [r0, #4]
   2c71c:	1a00008a 	bne	2c94c <HwManager::mirrorClone()+0x37c>
   2c720:	e3500000 	cmp	r0, #0
   2c724:	1a000058 	bne	2c88c <HwManager::mirrorClone()+0x2bc>
   2c728:	e5943000 	ldr	r3, [r4]
    for (int i = 0; i < _numHardware; i++)
   2c72c:	e3530006 	cmp	r3, #6
   2c730:	d8bd8010 	pople	{r4, pc}
        if (_pHw[i] && _pHw[i]->isEnabled())
   2c734:	e594001c 	ldr	r0, [r4, #28]
   2c738:	e3500000 	cmp	r0, #0
   2c73c:	0a000008 	beq	2c764 <HwManager::mirrorClone()+0x194>
   2c740:	e5903000 	ldr	r3, [r0]
   2c744:	e59f222c 	ldr	r2, [pc, #556]	; 2c978 <HwManager::mirrorClone()+0x3a8>
   2c748:	e5933030 	ldr	r3, [r3, #48]	; 0x30
   2c74c:	e1530002 	cmp	r3, r2
   2c750:	05d00004 	ldrbeq	r0, [r0, #4]
   2c754:	1a00007e 	bne	2c954 <HwManager::mirrorClone()+0x384>
   2c758:	e3500000 	cmp	r0, #0
   2c75c:	1a000050 	bne	2c8a4 <HwManager::mirrorClone()+0x2d4>
   2c760:	e5943000 	ldr	r3, [r4]
    for (int i = 0; i < _numHardware; i++)
   2c764:	e3530007 	cmp	r3, #7
   2c768:	d8bd8010 	pople	{r4, pc}
        if (_pHw[i] && _pHw[i]->isEnabled())
   2c76c:	e5940020 	ldr	r0, [r4, #32]
   2c770:	e3500000 	cmp	r0, #0
   2c774:	0a000008 	beq	2c79c <HwManager::mirrorClone()+0x1cc>
   2c778:	e5903000 	ldr	r3, [r0]
   2c77c:	e59f21f4 	ldr	r2, [pc, #500]	; 2c978 <HwManager::mirrorClone()+0x3a8>
   2c780:	e5933030 	ldr	r3, [r3, #48]	; 0x30
   2c784:	e1530002 	cmp	r3, r2
   2c788:	05d00004 	ldrbeq	r0, [r0, #4]
   2c78c:	1a000072 	bne	2c95c <HwManager::mirrorClone()+0x38c>
   2c790:	e3500000 	cmp	r0, #0
   2c794:	1a00005c 	bne	2c90c <HwManager::mirrorClone()+0x33c>
   2c798:	e5943000 	ldr	r3, [r4]
    for (int i = 0; i < _numHardware; i++)
   2c79c:	e3530008 	cmp	r3, #8
   2c7a0:	d8bd8010 	pople	{r4, pc}
        if (_pHw[i] && _pHw[i]->isEnabled())
   2c7a4:	e5940024 	ldr	r0, [r4, #36]	; 0x24
   2c7a8:	e3500000 	cmp	r0, #0
   2c7ac:	0a000008 	beq	2c7d4 <HwManager::mirrorClone()+0x204>
   2c7b0:	e5903000 	ldr	r3, [r0]
   2c7b4:	e59f21bc 	ldr	r2, [pc, #444]	; 2c978 <HwManager::mirrorClone()+0x3a8>
   2c7b8:	e5933030 	ldr	r3, [r3, #48]	; 0x30
   2c7bc:	e1530002 	cmp	r3, r2
   2c7c0:	05d00004 	ldrbeq	r0, [r0, #4]
   2c7c4:	1a000066 	bne	2c964 <HwManager::mirrorClone()+0x394>
   2c7c8:	e3500000 	cmp	r0, #0
   2c7cc:	1a000056 	bne	2c92c <HwManager::mirrorClone()+0x35c>
   2c7d0:	e5943000 	ldr	r3, [r4]
    for (int i = 0; i < _numHardware; i++)
   2c7d4:	e3530009 	cmp	r3, #9
   2c7d8:	d8bd8010 	pople	{r4, pc}
        if (_pHw[i] && _pHw[i]->isEnabled())
   2c7dc:	e5940028 	ldr	r0, [r4, #40]	; 0x28
   2c7e0:	e3500000 	cmp	r0, #0
   2c7e4:	08bd8010 	popeq	{r4, pc}
   2c7e8:	e5903000 	ldr	r3, [r0]
   2c7ec:	e59f2184 	ldr	r2, [pc, #388]	; 2c978 <HwManager::mirrorClone()+0x3a8>
   2c7f0:	e5933030 	ldr	r3, [r3, #48]	; 0x30
   2c7f4:	e1530002 	cmp	r3, r2
   2c7f8:	1a00005b 	bne	2c96c <HwManager::mirrorClone()+0x39c>
   2c7fc:	e5d00004 	ldrb	r0, [r0, #4]
   2c800:	e3500000 	cmp	r0, #0
   2c804:	08bd8010 	popeq	{r4, pc}
            _pHw[i]->mirrorClone();
   2c808:	e5940028 	ldr	r0, [r4, #40]	; 0x28
}
   2c80c:	e8bd4010 	pop	{r4, lr}
            _pHw[i]->mirrorClone();
   2c810:	e5903000 	ldr	r3, [r0]
   2c814:	e5933018 	ldr	r3, [r3, #24]
   2c818:	e12fff13 	bx	r3
   2c81c:	e5940004 	ldr	r0, [r4, #4]
   2c820:	e5903000 	ldr	r3, [r0]
   2c824:	e5933018 	ldr	r3, [r3, #24]
   2c828:	e12fff33 	blx	r3
   2c82c:	e5943000 	ldr	r3, [r4]
    for (int i = 0; i < _numHardware; i++)
   2c830:	e3530001 	cmp	r3, #1
   2c834:	caffff78 	bgt	2c61c <HwManager::mirrorClone()+0x4c>
   2c838:	e8bd8010 	pop	{r4, pc}
            _pHw[i]->mirrorClone();
   2c83c:	e5940010 	ldr	r0, [r4, #16]
   2c840:	e5903000 	ldr	r3, [r0]
   2c844:	e5933018 	ldr	r3, [r3, #24]
   2c848:	e12fff33 	blx	r3
   2c84c:	e5943000 	ldr	r3, [r4]
    for (int i = 0; i < _numHardware; i++)
   2c850:	e3530004 	cmp	r3, #4
   2c854:	caffff9a 	bgt	2c6c4 <HwManager::mirrorClone()+0xf4>
   2c858:	e8bd8010 	pop	{r4, pc}
            _pHw[i]->mirrorClone();
   2c85c:	e5940014 	ldr	r0, [r4, #20]
   2c860:	e5903000 	ldr	r3, [r0]
   2c864:	e5933018 	ldr	r3, [r3, #24]
   2c868:	e12fff33 	blx	r3
   2c86c:	e5943000 	ldr	r3, [r4]
    for (int i = 0; i < _numHardware; i++)
   2c870:	e3530005 	cmp	r3, #5
   2c874:	caffffa0 	bgt	2c6fc <HwManager::mirrorClone()+0x12c>
   2c878:	e8bd8010 	pop	{r4, pc}
        if (_pHw[i] && _pHw[i]->isEnabled())
   2c87c:	e12fff33 	blx	r3
   2c880:	e3500000 	cmp	r0, #0
   2c884:	0affff61 	beq	2c610 <HwManager::mirrorClone()+0x40>
   2c888:	eaffffe3 	b	2c81c <HwManager::mirrorClone()+0x24c>
            _pHw[i]->mirrorClone();
   2c88c:	e5940018 	ldr	r0, [r4, #24]
   2c890:	e5903000 	ldr	r3, [r0]
   2c894:	e5933018 	ldr	r3, [r3, #24]
   2c898:	e12fff33 	blx	r3
   2c89c:	e5943000 	ldr	r3, [r4]
   2c8a0:	eaffffa1 	b	2c72c <HwManager::mirrorClone()+0x15c>
   2c8a4:	e594001c 	ldr	r0, [r4, #28]
   2c8a8:	e5903000 	ldr	r3, [r0]
   2c8ac:	e5933018 	ldr	r3, [r3, #24]
   2c8b0:	e12fff33 	blx	r3
   2c8b4:	e5943000 	ldr	r3, [r4]
   2c8b8:	eaffffa9 	b	2c764 <HwManager::mirrorClone()+0x194>
   2c8bc:	e5940008 	ldr	r0, [r4, #8]
   2c8c0:	e5903000 	ldr	r3, [r0]
   2c8c4:	e5933018 	ldr	r3, [r3, #24]
   2c8c8:	e12fff33 	blx	r3
   2c8cc:	e5943000 	ldr	r3, [r4]
    for (int i = 0; i < _numHardware; i++)
   2c8d0:	e3530002 	cmp	r3, #2
   2c8d4:	caffff5e 	bgt	2c654 <HwManager::mirrorClone()+0x84>
   2c8d8:	e8bd8010 	pop	{r4, pc}
            _pHw[i]->mirrorClone();
   2c8dc:	e594000c 	ldr	r0, [r4, #12]
   2c8e0:	e5903000 	ldr	r3, [r0]
   2c8e4:	e5933018 	ldr	r3, [r3, #24]
   2c8e8:	e12fff33 	blx	r3
   2c8ec:	e5943000 	ldr	r3, [r4]
    for (int i = 0; i < _numHardware; i++)
   2c8f0:	e3530003 	cmp	r3, #3
   2c8f4:	caffff64 	bgt	2c68c <HwManager::mirrorClone()+0xbc>
   2c8f8:	e8bd8010 	pop	{r4, pc}
        if (_pHw[i] && _pHw[i]->isEnabled())
   2c8fc:	e12fff33 	blx	r3
   2c900:	eaffff4e 	b	2c640 <HwManager::mirrorClone()+0x70>
   2c904:	e12fff33 	blx	r3
   2c908:	eaffff5a 	b	2c678 <HwManager::mirrorClone()+0xa8>
            _pHw[i]->mirrorClone();
   2c90c:	e5940020 	ldr	r0, [r4, #32]
   2c910:	e5903000 	ldr	r3, [r0]
   2c914:	e5933018 	ldr	r3, [r3, #24]
   2c918:	e12fff33 	blx	r3
   2c91c:	e5943000 	ldr	r3, [r4]
   2c920:	eaffff9d 	b	2c79c <HwManager::mirrorClone()+0x1cc>
        if (_pHw[i] && _pHw[i]->isEnabled())
   2c924:	e12fff33 	blx	r3
   2c928:	eaffff60 	b	2c6b0 <HwManager::mirrorClone()+0xe0>
            _pHw[i]->mirrorClone();
   2c92c:	e5940024 	ldr	r0, [r4, #36]	; 0x24
   2c930:	e5903000 	ldr	r3, [r0]
   2c934:	e5933018 	ldr	r3, [r3, #24]
   2c938:	e12fff33 	blx	r3
   2c93c:	e5943000 	ldr	r3, [r4]
   2c940:	eaffffa3 	b	2c7d4 <HwManager::mirrorClone()+0x204>
        if (_pHw[i] && _pHw[i]->isEnabled())
   2c944:	e12fff33 	blx	r3
   2c948:	eaffff66 	b	2c6e8 <HwManager::mirrorClone()+0x118>
   2c94c:	e12fff33 	blx	r3
   2c950:	eaffff72 	b	2c720 <HwManager::mirrorClone()+0x150>
   2c954:	e12fff33 	blx	r3
   2c958:	eaffff7e 	b	2c758 <HwManager::mirrorClone()+0x188>
   2c95c:	e12fff33 	blx	r3
   2c960:	eaffff8a 	b	2c790 <HwManager::mirrorClone()+0x1c0>
   2c964:	e12fff33 	blx	r3
   2c968:	eaffff96 	b	2c7c8 <HwManager::mirrorClone()+0x1f8>
   2c96c:	e12fff33 	blx	r3
   2c970:	eaffffa2 	b	2c800 <HwManager::mirrorClone()+0x230>
   2c974:	00074d68 	.word	0x00074d68
   2c978:	0002a098 	.word	0x0002a098

0002c97c <HwManager::validatorClone()>:
{
   2c97c:	e92d4010 	push	{r4, lr}
    for (int i = 0; i < _numHardware; i++)
   2c980:	e59f4398 	ldr	r4, [pc, #920]	; 2cd20 <HwManager::validatorClone()+0x3a4>
   2c984:	e5943000 	ldr	r3, [r4]
   2c988:	e3530000 	cmp	r3, #0
   2c98c:	d8bd8010 	pople	{r4, pc}
        if (_pHw[i] && _pHw[i]->isEnabled())
   2c990:	e5940004 	ldr	r0, [r4, #4]
   2c994:	e3500000 	cmp	r0, #0
   2c998:	0a000008 	beq	2c9c0 <HwManager::validatorClone()+0x44>
   2c99c:	e5903000 	ldr	r3, [r0]
   2c9a0:	e59f237c 	ldr	r2, [pc, #892]	; 2cd24 <HwManager::validatorClone()+0x3a8>
   2c9a4:	e5933030 	ldr	r3, [r3, #48]	; 0x30
   2c9a8:	e1530002 	cmp	r3, r2
   2c9ac:	05d00004 	ldrbeq	r0, [r0, #4]
   2c9b0:	1a00009c 	bne	2cc28 <HwManager::validatorClone()+0x2ac>
   2c9b4:	e3500000 	cmp	r0, #0
   2c9b8:	1a000082 	bne	2cbc8 <HwManager::validatorClone()+0x24c>
   2c9bc:	e5943000 	ldr	r3, [r4]
    for (int i = 0; i < _numHardware; i++)
   2c9c0:	e3530001 	cmp	r3, #1
   2c9c4:	d8bd8010 	pople	{r4, pc}
        if (_pHw[i] && _pHw[i]->isEnabled())
   2c9c8:	e5940008 	ldr	r0, [r4, #8]
   2c9cc:	e3500000 	cmp	r0, #0
   2c9d0:	0a000008 	beq	2c9f8 <HwManager::validatorClone()+0x7c>
   2c9d4:	e5903000 	ldr	r3, [r0]
   2c9d8:	e59f2344 	ldr	r2, [pc, #836]	; 2cd24 <HwManager::validatorClone()+0x3a8>
   2c9dc:	e5933030 	ldr	r3, [r3, #48]	; 0x30
   2c9e0:	e1530002 	cmp	r3, r2
   2c9e4:	05d00004 	ldrbeq	r0, [r0, #4]
   2c9e8:	1a0000ae 	bne	2cca8 <HwManager::validatorClone()+0x32c>
   2c9ec:	e3500000 	cmp	r0, #0
   2c9f0:	1a00009c 	bne	2cc68 <HwManager::validatorClone()+0x2ec>
   2c9f4:	e5943000 	ldr	r3, [r4]
    for (int i = 0; i < _numHardware; i++)
   2c9f8:	e3530002 	cmp	r3, #2
   2c9fc:	d8bd8010 	pople	{r4, pc}
        if (_pHw[i] && _pHw[i]->isEnabled())
   2ca00:	e594000c 	ldr	r0, [r4, #12]
   2ca04:	e3500000 	cmp	r0, #0
   2ca08:	0a000008 	beq	2ca30 <HwManager::validatorClone()+0xb4>
   2ca0c:	e5903000 	ldr	r3, [r0]
   2ca10:	e59f230c 	ldr	r2, [pc, #780]	; 2cd24 <HwManager::validatorClone()+0x3a8>
   2ca14:	e5933030 	ldr	r3, [r3, #48]	; 0x30
   2ca18:	e1530002 	cmp	r3, r2
   2ca1c:	05d00004 	ldrbeq	r0, [r0, #4]
   2ca20:	1a0000a2 	bne	2ccb0 <HwManager::validatorClone()+0x334>
   2ca24:	e3500000 	cmp	r0, #0
   2ca28:	1a000096 	bne	2cc88 <HwManager::validatorClone()+0x30c>
   2ca2c:	e5943000 	ldr	r3, [r4]
    for (int i = 0; i < _numHardware; i++)
   2ca30:	e3530003 	cmp	r3, #3
   2ca34:	d8bd8010 	pople	{r4, pc}
        if (_pHw[i] && _pHw[i]->isEnabled())
   2ca38:	e5940010 	ldr	r0, [r4, #16]
   2ca3c:	e3500000 	cmp	r0, #0
   2ca40:	0a000008 	beq	2ca68 <HwManager::validatorClone()+0xec>
   2ca44:	e5903000 	ldr	r3, [r0]
   2ca48:	e59f22d4 	ldr	r2, [pc, #724]	; 2cd24 <HwManager::validatorClone()+0x3a8>
   2ca4c:	e5933030 	ldr	r3, [r3, #48]	; 0x30
   2ca50:	e1530002 	cmp	r3, r2
   2ca54:	05d00004 	ldrbeq	r0, [r0, #4]
   2ca58:	1a00009c 	bne	2ccd0 <HwManager::validatorClone()+0x354>
   2ca5c:	e3500000 	cmp	r0, #0
   2ca60:	1a000060 	bne	2cbe8 <HwManager::validatorClone()+0x26c>
   2ca64:	e5943000 	ldr	r3, [r4]
    for (int i = 0; i < _numHardware; i++)
   2ca68:	e3530004 	cmp	r3, #4
   2ca6c:	d8bd8010 	pople	{r4, pc}
        if (_pHw[i] && _pHw[i]->isEnabled())
   2ca70:	e5940014 	ldr	r0, [r4, #20]
   2ca74:	e3500000 	cmp	r0, #0
   2ca78:	0a000008 	beq	2caa0 <HwManager::validatorClone()+0x124>
   2ca7c:	e5903000 	ldr	r3, [r0]
   2ca80:	e59f229c 	ldr	r2, [pc, #668]	; 2cd24 <HwManager::validatorClone()+0x3a8>
   2ca84:	e5933030 	ldr	r3, [r3, #48]	; 0x30
   2ca88:	e1530002 	cmp	r3, r2
   2ca8c:	05d00004 	ldrbeq	r0, [r0, #4]
   2ca90:	1a000096 	bne	2ccf0 <HwManager::validatorClone()+0x374>
   2ca94:	e3500000 	cmp	r0, #0
   2ca98:	1a00005a 	bne	2cc08 <HwManager::validatorClone()+0x28c>
   2ca9c:	e5943000 	ldr	r3, [r4]
    for (int i = 0; i < _numHardware; i++)
   2caa0:	e3530005 	cmp	r3, #5
   2caa4:	d8bd8010 	pople	{r4, pc}
        if (_pHw[i] && _pHw[i]->isEnabled())
   2caa8:	e5940018 	ldr	r0, [r4, #24]
   2caac:	e3500000 	cmp	r0, #0
   2cab0:	0a000008 	beq	2cad8 <HwManager::validatorClone()+0x15c>
   2cab4:	e5903000 	ldr	r3, [r0]
   2cab8:	e59f2264 	ldr	r2, [pc, #612]	; 2cd24 <HwManager::validatorClone()+0x3a8>
   2cabc:	e5933030 	ldr	r3, [r3, #48]	; 0x30
   2cac0:	e1530002 	cmp	r3, r2
   2cac4:	05d00004 	ldrbeq	r0, [r0, #4]
   2cac8:	1a00008a 	bne	2ccf8 <HwManager::validatorClone()+0x37c>
   2cacc:	e3500000 	cmp	r0, #0
   2cad0:	1a000058 	bne	2cc38 <HwManager::validatorClone()+0x2bc>
   2cad4:	e5943000 	ldr	r3, [r4]
    for (int i = 0; i < _numHardware; i++)
   2cad8:	e3530006 	cmp	r3, #6
   2cadc:	d8bd8010 	pople	{r4, pc}
        if (_pHw[i] && _pHw[i]->isEnabled())
   2cae0:	e594001c 	ldr	r0, [r4, #28]
   2cae4:	e3500000 	cmp	r0, #0
   2cae8:	0a000008 	beq	2cb10 <HwManager::validatorClone()+0x194>
   2caec:	e5903000 	ldr	r3, [r0]
   2caf0:	e59f222c 	ldr	r2, [pc, #556]	; 2cd24 <HwManager::validatorClone()+0x3a8>
   2caf4:	e5933030 	ldr	r3, [r3, #48]	; 0x30
   2caf8:	e1530002 	cmp	r3, r2
   2cafc:	05d00004 	ldrbeq	r0, [r0, #4]
   2cb00:	1a00007e 	bne	2cd00 <HwManager::validatorClone()+0x384>
   2cb04:	e3500000 	cmp	r0, #0
   2cb08:	1a000050 	bne	2cc50 <HwManager::validatorClone()+0x2d4>
   2cb0c:	e5943000 	ldr	r3, [r4]
    for (int i = 0; i < _numHardware; i++)
   2cb10:	e3530007 	cmp	r3, #7
   2cb14:	d8bd8010 	pople	{r4, pc}
        if (_pHw[i] && _pHw[i]->isEnabled())
   2cb18:	e5940020 	ldr	r0, [r4, #32]
   2cb1c:	e3500000 	cmp	r0, #0
   2cb20:	0a000008 	beq	2cb48 <HwManager::validatorClone()+0x1cc>
   2cb24:	e5903000 	ldr	r3, [r0]
   2cb28:	e59f21f4 	ldr	r2, [pc, #500]	; 2cd24 <HwManager::validatorClone()+0x3a8>
   2cb2c:	e5933030 	ldr	r3, [r3, #48]	; 0x30
   2cb30:	e1530002 	cmp	r3, r2
   2cb34:	05d00004 	ldrbeq	r0, [r0, #4]
   2cb38:	1a000072 	bne	2cd08 <HwManager::validatorClone()+0x38c>
   2cb3c:	e3500000 	cmp	r0, #0
   2cb40:	1a00005c 	bne	2ccb8 <HwManager::validatorClone()+0x33c>
   2cb44:	e5943000 	ldr	r3, [r4]
    for (int i = 0; i < _numHardware; i++)
   2cb48:	e3530008 	cmp	r3, #8
   2cb4c:	d8bd8010 	pople	{r4, pc}
        if (_pHw[i] && _pHw[i]->isEnabled())
   2cb50:	e5940024 	ldr	r0, [r4, #36]	; 0x24
   2cb54:	e3500000 	cmp	r0, #0
   2cb58:	0a000008 	beq	2cb80 <HwManager::validatorClone()+0x204>
   2cb5c:	e5903000 	ldr	r3, [r0]
   2cb60:	e59f21bc 	ldr	r2, [pc, #444]	; 2cd24 <HwManager::validatorClone()+0x3a8>
   2cb64:	e5933030 	ldr	r3, [r3, #48]	; 0x30
   2cb68:	e1530002 	cmp	r3, r2
   2cb6c:	05d00004 	ldrbeq	r0, [r0, #4]
   2cb70:	1a000066 	bne	2cd10 <HwManager::validatorClone()+0x394>
   2cb74:	e3500000 	cmp	r0, #0
   2cb78:	1a000056 	bne	2ccd8 <HwManager::validatorClone()+0x35c>
   2cb7c:	e5943000 	ldr	r3, [r4]
    for (int i = 0; i < _numHardware; i++)
   2cb80:	e3530009 	cmp	r3, #9
   2cb84:	d8bd8010 	pople	{r4, pc}
        if (_pHw[i] && _pHw[i]->isEnabled())
   2cb88:	e5940028 	ldr	r0, [r4, #40]	; 0x28
   2cb8c:	e3500000 	cmp	r0, #0
   2cb90:	08bd8010 	popeq	{r4, pc}
   2cb94:	e5903000 	ldr	r3, [r0]
   2cb98:	e59f2184 	ldr	r2, [pc, #388]	; 2cd24 <HwManager::validatorClone()+0x3a8>
   2cb9c:	e5933030 	ldr	r3, [r3, #48]	; 0x30
   2cba0:	e1530002 	cmp	r3, r2
   2cba4:	1a00005b 	bne	2cd18 <HwManager::validatorClone()+0x39c>
   2cba8:	e5d00004 	ldrb	r0, [r0, #4]
   2cbac:	e3500000 	cmp	r0, #0
   2cbb0:	08bd8010 	popeq	{r4, pc}
            _pHw[i]->validatorClone();
   2cbb4:	e5940028 	ldr	r0, [r4, #40]	; 0x28
}
   2cbb8:	e8bd4010 	pop	{r4, lr}
            _pHw[i]->validatorClone();
   2cbbc:	e5903000 	ldr	r3, [r0]
   2cbc0:	e5933028 	ldr	r3, [r3, #40]	; 0x28
   2cbc4:	e12fff13 	bx	r3
   2cbc8:	e5940004 	ldr	r0, [r4, #4]
   2cbcc:	e5903000 	ldr	r3, [r0]
   2cbd0:	e5933028 	ldr	r3, [r3, #40]	; 0x28
   2cbd4:	e12fff33 	blx	r3
   2cbd8:	e5943000 	ldr	r3, [r4]
    for (int i = 0; i < _numHardware; i++)
   2cbdc:	e3530001 	cmp	r3, #1
   2cbe0:	caffff78 	bgt	2c9c8 <HwManager::validatorClone()+0x4c>
   2cbe4:	e8bd8010 	pop	{r4, pc}
            _pHw[i]->validatorClone();
   2cbe8:	e5940010 	ldr	r0, [r4, #16]
   2cbec:	e5903000 	ldr	r3, [r0]
   2cbf0:	e5933028 	ldr	r3, [r3, #40]	; 0x28
   2cbf4:	e12fff33 	blx	r3
   2cbf8:	e5943000 	ldr	r3, [r4]
    for (int i = 0; i < _numHardware; i++)
   2cbfc:	e3530004 	cmp	r3, #4
   2cc00:	caffff9a 	bgt	2ca70 <HwManager::validatorClone()+0xf4>
   2cc04:	e8bd8010 	pop	{r4, pc}
            _pHw[i]->validatorClone();
   2cc08:	e5940014 	ldr	r0, [r4, #20]
   2cc0c:	e5903000 	ldr	r3, [r0]
   2cc10:	e5933028 	ldr	r3, [r3, #40]	; 0x28
   2cc14:	e12fff33 	blx	r3
   2cc18:	e5943000 	ldr	r3, [r4]
    for (int i = 0; i < _numHardware; i++)
   2cc1c:	e3530005 	cmp	r3, #5
   2cc20:	caffffa0 	bgt	2caa8 <HwManager::validatorClone()+0x12c>
   2cc24:	e8bd8010 	pop	{r4, pc}
        if (_pHw[i] && _pHw[i]->isEnabled())
   2cc28:	e12fff33 	blx	r3
   2cc2c:	e3500000 	cmp	r0, #0
   2cc30:	0affff61 	beq	2c9bc <HwManager::validatorClone()+0x40>
   2cc34:	eaffffe3 	b	2cbc8 <HwManager::validatorClone()+0x24c>
            _pHw[i]->validatorClone();
   2cc38:	e5940018 	ldr	r0, [r4, #24]
   2cc3c:	e5903000 	ldr	r3, [r0]
   2cc40:	e5933028 	ldr	r3, [r3, #40]	; 0x28
   2cc44:	e12fff33 	blx	r3
   2cc48:	e5943000 	ldr	r3, [r4]
   2cc4c:	eaffffa1 	b	2cad8 <HwManager::validatorClone()+0x15c>
   2cc50:	e594001c 	ldr	r0, [r4, #28]
   2cc54:	e5903000 	ldr	r3, [r0]
   2cc58:	e5933028 	ldr	r3, [r3, #40]	; 0x28
   2cc5c:	e12fff33 	blx	r3
   2cc60:	e5943000 	ldr	r3, [r4]
   2cc64:	eaffffa9 	b	2cb10 <HwManager::validatorClone()+0x194>
   2cc68:	e5940008 	ldr	r0, [r4, #8]
   2cc6c:	e5903000 	ldr	r3, [r0]
   2cc70:	e5933028 	ldr	r3, [r3, #40]	; 0x28
   2cc74:	e12fff33 	blx	r3
   2cc78:	e5943000 	ldr	r3, [r4]
    for (int i = 0; i < _numHardware; i++)
   2cc7c:	e3530002 	cmp	r3, #2
   2cc80:	caffff5e 	bgt	2ca00 <HwManager::validatorClone()+0x84>
   2cc84:	e8bd8010 	pop	{r4, pc}
            _pHw[i]->validatorClone();
   2cc88:	e594000c 	ldr	r0, [r4, #12]
   2cc8c:	e5903000 	ldr	r3, [r0]
   2cc90:	e5933028 	ldr	r3, [r3, #40]	; 0x28
   2cc94:	e12fff33 	blx	r3
   2cc98:	e5943000 	ldr	r3, [r4]
    for (int i = 0; i < _numHardware; i++)
   2cc9c:	e3530003 	cmp	r3, #3
   2cca0:	caffff64 	bgt	2ca38 <HwManager::validatorClone()+0xbc>
   2cca4:	e8bd8010 	pop	{r4, pc}
        if (_pHw[i] && _pHw[i]->isEnabled())
   2cca8:	e12fff33 	blx	r3
   2ccac:	eaffff4e 	b	2c9ec <HwManager::validatorClone()+0x70>
   2ccb0:	e12fff33 	blx	r3
   2ccb4:	eaffff5a 	b	2ca24 <HwManager::validatorClone()+0xa8>
            _pHw[i]->validatorClone();
   2ccb8:	e5940020 	ldr	r0, [r4, #32]
   2ccbc:	e5903000 	ldr	r3, [r0]
   2ccc0:	e5933028 	ldr	r3, [r3, #40]	; 0x28
   2ccc4:	e12fff33 	blx	r3
   2ccc8:	e5943000 	ldr	r3, [r4]
   2cccc:	eaffff9d 	b	2cb48 <HwManager::validatorClone()+0x1cc>
        if (_pHw[i] && _pHw[i]->isEnabled())
   2ccd0:	e12fff33 	blx	r3
   2ccd4:	eaffff60 	b	2ca5c <HwManager::validatorClone()+0xe0>
            _pHw[i]->validatorClone();
   2ccd8:	e5940024 	ldr	r0, [r4, #36]	; 0x24
   2ccdc:	e5903000 	ldr	r3, [r0]
   2cce0:	e5933028 	ldr	r3, [r3, #40]	; 0x28
   2cce4:	e12fff33 	blx	r3
   2cce8:	e5943000 	ldr	r3, [r4]
   2ccec:	eaffffa3 	b	2cb80 <HwManager::validatorClone()+0x204>
        if (_pHw[i] && _pHw[i]->isEnabled())
   2ccf0:	e12fff33 	blx	r3
   2ccf4:	eaffff66 	b	2ca94 <HwManager::validatorClone()+0x118>
   2ccf8:	e12fff33 	blx	r3
   2ccfc:	eaffff72 	b	2cacc <HwManager::validatorClone()+0x150>
   2cd00:	e12fff33 	blx	r3
   2cd04:	eaffff7e 	b	2cb04 <HwManager::validatorClone()+0x188>
   2cd08:	e12fff33 	blx	r3
   2cd0c:	eaffff8a 	b	2cb3c <HwManager::validatorClone()+0x1c0>
   2cd10:	e12fff33 	blx	r3
   2cd14:	eaffff96 	b	2cb74 <HwManager::validatorClone()+0x1f8>
   2cd18:	e12fff33 	blx	r3
   2cd1c:	eaffffa2 	b	2cbac <HwManager::validatorClone()+0x230>
   2cd20:	00074d68 	.word	0x00074d68
   2cd24:	0002a098 	.word	0x0002a098

0002cd28 <HwManager::validatorHandleAccess(unsigned long, unsigned long, unsigned long, unsigned long&)>:
{
   2cd28:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
    for (int i = 0; i < _numHardware; i++)
   2cd2c:	e59f4430 	ldr	r4, [pc, #1072]	; 2d164 <HwManager::validatorHandleAccess(unsigned long, unsigned long, unsigned long, unsigned long&)+0x43c>
{
   2cd30:	e24dd00c 	sub	sp, sp, #12
    for (int i = 0; i < _numHardware; i++)
   2cd34:	e594c000 	ldr	ip, [r4]
   2cd38:	e35c0000 	cmp	ip, #0
   2cd3c:	da000094 	ble	2cf94 <HwManager::validatorHandleAccess(unsigned long, unsigned long, unsigned long, unsigned long&)+0x26c>
   2cd40:	e1a05000 	mov	r5, r0
        if (_pHw[i] && _pHw[i]->isEnabled())
   2cd44:	e5940004 	ldr	r0, [r4, #4]
   2cd48:	e1a07003 	mov	r7, r3
   2cd4c:	e3500000 	cmp	r0, #0
   2cd50:	e1a08002 	mov	r8, r2
   2cd54:	e1a06001 	mov	r6, r1
   2cd58:	0a000008 	beq	2cd80 <HwManager::validatorHandleAccess(unsigned long, unsigned long, unsigned long, unsigned long&)+0x58>
   2cd5c:	e5903000 	ldr	r3, [r0]
   2cd60:	e59f2400 	ldr	r2, [pc, #1024]	; 2d168 <HwManager::validatorHandleAccess(unsigned long, unsigned long, unsigned long, unsigned long&)+0x440>
   2cd64:	e5933030 	ldr	r3, [r3, #48]	; 0x30
   2cd68:	e1530002 	cmp	r3, r2
   2cd6c:	05d00004 	ldrbeq	r0, [r0, #4]
   2cd70:	1a0000a9 	bne	2d01c <HwManager::validatorHandleAccess(unsigned long, unsigned long, unsigned long, unsigned long&)+0x2f4>
   2cd74:	e3500000 	cmp	r0, #0
   2cd78:	1a000087 	bne	2cf9c <HwManager::validatorHandleAccess(unsigned long, unsigned long, unsigned long, unsigned long&)+0x274>
   2cd7c:	e594c000 	ldr	ip, [r4]
    for (int i = 0; i < _numHardware; i++)
   2cd80:	e35c0001 	cmp	ip, #1
   2cd84:	da000082 	ble	2cf94 <HwManager::validatorHandleAccess(unsigned long, unsigned long, unsigned long, unsigned long&)+0x26c>
        if (_pHw[i] && _pHw[i]->isEnabled())
   2cd88:	e5940008 	ldr	r0, [r4, #8]
   2cd8c:	e3500000 	cmp	r0, #0
   2cd90:	0a000008 	beq	2cdb8 <HwManager::validatorHandleAccess(unsigned long, unsigned long, unsigned long, unsigned long&)+0x90>
   2cd94:	e5903000 	ldr	r3, [r0]
   2cd98:	e59f23c8 	ldr	r2, [pc, #968]	; 2d168 <HwManager::validatorHandleAccess(unsigned long, unsigned long, unsigned long, unsigned long&)+0x440>
   2cd9c:	e5933030 	ldr	r3, [r3, #48]	; 0x30
   2cda0:	e1530002 	cmp	r3, r2
   2cda4:	05d00004 	ldrbeq	r0, [r0, #4]
   2cda8:	1a0000c7 	bne	2d0cc <HwManager::validatorHandleAccess(unsigned long, unsigned long, unsigned long, unsigned long&)+0x3a4>
   2cdac:	e3500000 	cmp	r0, #0
   2cdb0:	1a0000b1 	bne	2d07c <HwManager::validatorHandleAccess(unsigned long, unsigned long, unsigned long, unsigned long&)+0x354>
   2cdb4:	e594c000 	ldr	ip, [r4]
    for (int i = 0; i < _numHardware; i++)
   2cdb8:	e35c0002 	cmp	ip, #2
   2cdbc:	da000074 	ble	2cf94 <HwManager::validatorHandleAccess(unsigned long, unsigned long, unsigned long, unsigned long&)+0x26c>
        if (_pHw[i] && _pHw[i]->isEnabled())
   2cdc0:	e594000c 	ldr	r0, [r4, #12]
   2cdc4:	e3500000 	cmp	r0, #0
   2cdc8:	0a000008 	beq	2cdf0 <HwManager::validatorHandleAccess(unsigned long, unsigned long, unsigned long, unsigned long&)+0xc8>
   2cdcc:	e5903000 	ldr	r3, [r0]
   2cdd0:	e59f2390 	ldr	r2, [pc, #912]	; 2d168 <HwManager::validatorHandleAccess(unsigned long, unsigned long, unsigned long, unsigned long&)+0x440>
   2cdd4:	e5933030 	ldr	r3, [r3, #48]	; 0x30
   2cdd8:	e1530002 	cmp	r3, r2
   2cddc:	05d00004 	ldrbeq	r0, [r0, #4]
   2cde0:	1a0000bb 	bne	2d0d4 <HwManager::validatorHandleAccess(unsigned long, unsigned long, unsigned long, unsigned long&)+0x3ac>
   2cde4:	e3500000 	cmp	r0, #0
   2cde8:	1a0000ad 	bne	2d0a4 <HwManager::validatorHandleAccess(unsigned long, unsigned long, unsigned long, unsigned long&)+0x37c>
   2cdec:	e594c000 	ldr	ip, [r4]
    for (int i = 0; i < _numHardware; i++)
   2cdf0:	e35c0003 	cmp	ip, #3
   2cdf4:	da000066 	ble	2cf94 <HwManager::validatorHandleAccess(unsigned long, unsigned long, unsigned long, unsigned long&)+0x26c>
        if (_pHw[i] && _pHw[i]->isEnabled())
   2cdf8:	e5940010 	ldr	r0, [r4, #16]
   2cdfc:	e3500000 	cmp	r0, #0
   2ce00:	0a000008 	beq	2ce28 <HwManager::validatorHandleAccess(unsigned long, unsigned long, unsigned long, unsigned long&)+0x100>
   2ce04:	e5903000 	ldr	r3, [r0]
   2ce08:	e59f2358 	ldr	r2, [pc, #856]	; 2d168 <HwManager::validatorHandleAccess(unsigned long, unsigned long, unsigned long, unsigned long&)+0x440>
   2ce0c:	e5933030 	ldr	r3, [r3, #48]	; 0x30
   2ce10:	e1530002 	cmp	r3, r2
   2ce14:	05d00004 	ldrbeq	r0, [r0, #4]
   2ce18:	1a0000b9 	bne	2d104 <HwManager::validatorHandleAccess(unsigned long, unsigned long, unsigned long, unsigned long&)+0x3dc>
   2ce1c:	e3500000 	cmp	r0, #0
   2ce20:	1a000067 	bne	2cfc4 <HwManager::validatorHandleAccess(unsigned long, unsigned long, unsigned long, unsigned long&)+0x29c>
   2ce24:	e594c000 	ldr	ip, [r4]
    for (int i = 0; i < _numHardware; i++)
   2ce28:	e35c0004 	cmp	ip, #4
   2ce2c:	da000058 	ble	2cf94 <HwManager::validatorHandleAccess(unsigned long, unsigned long, unsigned long, unsigned long&)+0x26c>
        if (_pHw[i] && _pHw[i]->isEnabled())
   2ce30:	e5940014 	ldr	r0, [r4, #20]
   2ce34:	e3500000 	cmp	r0, #0
   2ce38:	0a000008 	beq	2ce60 <HwManager::validatorHandleAccess(unsigned long, unsigned long, unsigned long, unsigned long&)+0x138>
   2ce3c:	e5903000 	ldr	r3, [r0]
   2ce40:	e59f2320 	ldr	r2, [pc, #800]	; 2d168 <HwManager::validatorHandleAccess(unsigned long, unsigned long, unsigned long, unsigned long&)+0x440>
   2ce44:	e5933030 	ldr	r3, [r3, #48]	; 0x30
   2ce48:	e1530002 	cmp	r3, r2
   2ce4c:	05d00004 	ldrbeq	r0, [r0, #4]
   2ce50:	1a0000b7 	bne	2d134 <HwManager::validatorHandleAccess(unsigned long, unsigned long, unsigned long, unsigned long&)+0x40c>
   2ce54:	e3500000 	cmp	r0, #0
   2ce58:	1a000065 	bne	2cff4 <HwManager::validatorHandleAccess(unsigned long, unsigned long, unsigned long, unsigned long&)+0x2cc>
   2ce5c:	e594c000 	ldr	ip, [r4]
    for (int i = 0; i < _numHardware; i++)
   2ce60:	e35c0005 	cmp	ip, #5
   2ce64:	da00004a 	ble	2cf94 <HwManager::validatorHandleAccess(unsigned long, unsigned long, unsigned long, unsigned long&)+0x26c>
        if (_pHw[i] && _pHw[i]->isEnabled())
   2ce68:	e5940018 	ldr	r0, [r4, #24]
   2ce6c:	e3500000 	cmp	r0, #0
   2ce70:	0a000008 	beq	2ce98 <HwManager::validatorHandleAccess(unsigned long, unsigned long, unsigned long, unsigned long&)+0x170>
   2ce74:	e5903000 	ldr	r3, [r0]
   2ce78:	e59f22e8 	ldr	r2, [pc, #744]	; 2d168 <HwManager::validatorHandleAccess(unsigned long, unsigned long, unsigned long, unsigned long&)+0x440>
   2ce7c:	e5933030 	ldr	r3, [r3, #48]	; 0x30
   2ce80:	e1530002 	cmp	r3, r2
   2ce84:	05d00004 	ldrbeq	r0, [r0, #4]
   2ce88:	1a0000ab 	bne	2d13c <HwManager::validatorHandleAccess(unsigned long, unsigned long, unsigned long, unsigned long&)+0x414>
   2ce8c:	e3500000 	cmp	r0, #0
   2ce90:	1a000065 	bne	2d02c <HwManager::validatorHandleAccess(unsigned long, unsigned long, unsigned long, unsigned long&)+0x304>
   2ce94:	e594c000 	ldr	ip, [r4]
    for (int i = 0; i < _numHardware; i++)
   2ce98:	e35c0006 	cmp	ip, #6
   2ce9c:	da00003c 	ble	2cf94 <HwManager::validatorHandleAccess(unsigned long, unsigned long, unsigned long, unsigned long&)+0x26c>
        if (_pHw[i] && _pHw[i]->isEnabled())
   2cea0:	e594001c 	ldr	r0, [r4, #28]
   2cea4:	e3500000 	cmp	r0, #0
   2cea8:	0a000008 	beq	2ced0 <HwManager::validatorHandleAccess(unsigned long, unsigned long, unsigned long, unsigned long&)+0x1a8>
   2ceac:	e5903000 	ldr	r3, [r0]
   2ceb0:	e59f22b0 	ldr	r2, [pc, #688]	; 2d168 <HwManager::validatorHandleAccess(unsigned long, unsigned long, unsigned long, unsigned long&)+0x440>
   2ceb4:	e5933030 	ldr	r3, [r3, #48]	; 0x30
   2ceb8:	e1530002 	cmp	r3, r2
   2cebc:	05d00004 	ldrbeq	r0, [r0, #4]
   2cec0:	1a00009f 	bne	2d144 <HwManager::validatorHandleAccess(unsigned long, unsigned long, unsigned long, unsigned long&)+0x41c>
   2cec4:	e3500000 	cmp	r0, #0
   2cec8:	1a000061 	bne	2d054 <HwManager::validatorHandleAccess(unsigned long, unsigned long, unsigned long, unsigned long&)+0x32c>
   2cecc:	e594c000 	ldr	ip, [r4]
    for (int i = 0; i < _numHardware; i++)
   2ced0:	e35c0007 	cmp	ip, #7
   2ced4:	da00002e 	ble	2cf94 <HwManager::validatorHandleAccess(unsigned long, unsigned long, unsigned long, unsigned long&)+0x26c>
        if (_pHw[i] && _pHw[i]->isEnabled())
   2ced8:	e5940020 	ldr	r0, [r4, #32]
   2cedc:	e3500000 	cmp	r0, #0
   2cee0:	0a000008 	beq	2cf08 <HwManager::validatorHandleAccess(unsigned long, unsigned long, unsigned long, unsigned long&)+0x1e0>
   2cee4:	e5903000 	ldr	r3, [r0]
   2cee8:	e59f2278 	ldr	r2, [pc, #632]	; 2d168 <HwManager::validatorHandleAccess(unsigned long, unsigned long, unsigned long, unsigned long&)+0x440>
   2ceec:	e5933030 	ldr	r3, [r3, #48]	; 0x30
   2cef0:	e1530002 	cmp	r3, r2
   2cef4:	05d00004 	ldrbeq	r0, [r0, #4]
   2cef8:	1a000093 	bne	2d14c <HwManager::validatorHandleAccess(unsigned long, unsigned long, unsigned long, unsigned long&)+0x424>
   2cefc:	e3500000 	cmp	r0, #0
   2cf00:	1a000075 	bne	2d0dc <HwManager::validatorHandleAccess(unsigned long, unsigned long, unsigned long, unsigned long&)+0x3b4>
   2cf04:	e594c000 	ldr	ip, [r4]
    for (int i = 0; i < _numHardware; i++)
   2cf08:	e35c0008 	cmp	ip, #8
   2cf0c:	da000020 	ble	2cf94 <HwManager::validatorHandleAccess(unsigned long, unsigned long, unsigned long, unsigned long&)+0x26c>
        if (_pHw[i] && _pHw[i]->isEnabled())
   2cf10:	e5940024 	ldr	r0, [r4, #36]	; 0x24
   2cf14:	e3500000 	cmp	r0, #0
   2cf18:	0a000008 	beq	2cf40 <HwManager::validatorHandleAccess(unsigned long, unsigned long, unsigned long, unsigned long&)+0x218>
   2cf1c:	e5903000 	ldr	r3, [r0]
   2cf20:	e59f2240 	ldr	r2, [pc, #576]	; 2d168 <HwManager::validatorHandleAccess(unsigned long, unsigned long, unsigned long, unsigned long&)+0x440>
   2cf24:	e5933030 	ldr	r3, [r3, #48]	; 0x30
   2cf28:	e1530002 	cmp	r3, r2
   2cf2c:	05d00004 	ldrbeq	r0, [r0, #4]
   2cf30:	1a000087 	bne	2d154 <HwManager::validatorHandleAccess(unsigned long, unsigned long, unsigned long, unsigned long&)+0x42c>
   2cf34:	e3500000 	cmp	r0, #0
   2cf38:	1a000073 	bne	2d10c <HwManager::validatorHandleAccess(unsigned long, unsigned long, unsigned long, unsigned long&)+0x3e4>
   2cf3c:	e594c000 	ldr	ip, [r4]
    for (int i = 0; i < _numHardware; i++)
   2cf40:	e35c0009 	cmp	ip, #9
   2cf44:	da000012 	ble	2cf94 <HwManager::validatorHandleAccess(unsigned long, unsigned long, unsigned long, unsigned long&)+0x26c>
        if (_pHw[i] && _pHw[i]->isEnabled())
   2cf48:	e5940028 	ldr	r0, [r4, #40]	; 0x28
   2cf4c:	e3500000 	cmp	r0, #0
   2cf50:	0a00000f 	beq	2cf94 <HwManager::validatorHandleAccess(unsigned long, unsigned long, unsigned long, unsigned long&)+0x26c>
   2cf54:	e5903000 	ldr	r3, [r0]
   2cf58:	e59f2208 	ldr	r2, [pc, #520]	; 2d168 <HwManager::validatorHandleAccess(unsigned long, unsigned long, unsigned long, unsigned long&)+0x440>
   2cf5c:	e5933030 	ldr	r3, [r3, #48]	; 0x30
   2cf60:	e1530002 	cmp	r3, r2
   2cf64:	1a00007c 	bne	2d15c <HwManager::validatorHandleAccess(unsigned long, unsigned long, unsigned long, unsigned long&)+0x434>
   2cf68:	e5d00004 	ldrb	r0, [r0, #4]
   2cf6c:	e3500000 	cmp	r0, #0
   2cf70:	0a000007 	beq	2cf94 <HwManager::validatorHandleAccess(unsigned long, unsigned long, unsigned long, unsigned long&)+0x26c>
            _pHw[i]->validatorHandleAccess(addr, data, flags, retVal);
   2cf74:	e5940028 	ldr	r0, [r4, #40]	; 0x28
   2cf78:	e1a03008 	mov	r3, r8
   2cf7c:	e590c000 	ldr	ip, [r0]
   2cf80:	e58d7000 	str	r7, [sp]
   2cf84:	e1a02006 	mov	r2, r6
   2cf88:	e1a01005 	mov	r1, r5
   2cf8c:	e59c402c 	ldr	r4, [ip, #44]	; 0x2c
   2cf90:	e12fff34 	blx	r4
}
   2cf94:	e28dd00c 	add	sp, sp, #12
   2cf98:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
            _pHw[i]->validatorHandleAccess(addr, data, flags, retVal);
   2cf9c:	e5940004 	ldr	r0, [r4, #4]
   2cfa0:	e1a03008 	mov	r3, r8
   2cfa4:	e5902000 	ldr	r2, [r0]
   2cfa8:	e58d7000 	str	r7, [sp]
   2cfac:	e592902c 	ldr	r9, [r2, #44]	; 0x2c
   2cfb0:	e1a01005 	mov	r1, r5
   2cfb4:	e1a02006 	mov	r2, r6
   2cfb8:	e12fff39 	blx	r9
   2cfbc:	e594c000 	ldr	ip, [r4]
   2cfc0:	eaffff6e 	b	2cd80 <HwManager::validatorHandleAccess(unsigned long, unsigned long, unsigned long, unsigned long&)+0x58>
   2cfc4:	e5940010 	ldr	r0, [r4, #16]
   2cfc8:	e1a03008 	mov	r3, r8
   2cfcc:	e5902000 	ldr	r2, [r0]
   2cfd0:	e58d7000 	str	r7, [sp]
   2cfd4:	e592902c 	ldr	r9, [r2, #44]	; 0x2c
   2cfd8:	e1a01005 	mov	r1, r5
   2cfdc:	e1a02006 	mov	r2, r6
   2cfe0:	e12fff39 	blx	r9
   2cfe4:	e594c000 	ldr	ip, [r4]
    for (int i = 0; i < _numHardware; i++)
   2cfe8:	e35c0004 	cmp	ip, #4
   2cfec:	caffff8f 	bgt	2ce30 <HwManager::validatorHandleAccess(unsigned long, unsigned long, unsigned long, unsigned long&)+0x108>
   2cff0:	eaffffe7 	b	2cf94 <HwManager::validatorHandleAccess(unsigned long, unsigned long, unsigned long, unsigned long&)+0x26c>
            _pHw[i]->validatorHandleAccess(addr, data, flags, retVal);
   2cff4:	e5940014 	ldr	r0, [r4, #20]
   2cff8:	e1a03008 	mov	r3, r8
   2cffc:	e5902000 	ldr	r2, [r0]
   2d000:	e58d7000 	str	r7, [sp]
   2d004:	e592902c 	ldr	r9, [r2, #44]	; 0x2c
   2d008:	e1a01005 	mov	r1, r5
   2d00c:	e1a02006 	mov	r2, r6
   2d010:	e12fff39 	blx	r9
   2d014:	e594c000 	ldr	ip, [r4]
   2d018:	eaffff90 	b	2ce60 <HwManager::validatorHandleAccess(unsigned long, unsigned long, unsigned long, unsigned long&)+0x138>
        if (_pHw[i] && _pHw[i]->isEnabled())
   2d01c:	e12fff33 	blx	r3
   2d020:	e3500000 	cmp	r0, #0
   2d024:	0affff54 	beq	2cd7c <HwManager::validatorHandleAccess(unsigned long, unsigned long, unsigned long, unsigned long&)+0x54>
   2d028:	eaffffdb 	b	2cf9c <HwManager::validatorHandleAccess(unsigned long, unsigned long, unsigned long, unsigned long&)+0x274>
            _pHw[i]->validatorHandleAccess(addr, data, flags, retVal);
   2d02c:	e5940018 	ldr	r0, [r4, #24]
   2d030:	e1a03008 	mov	r3, r8
   2d034:	e5902000 	ldr	r2, [r0]
   2d038:	e58d7000 	str	r7, [sp]
   2d03c:	e592902c 	ldr	r9, [r2, #44]	; 0x2c
   2d040:	e1a01005 	mov	r1, r5
   2d044:	e1a02006 	mov	r2, r6
   2d048:	e12fff39 	blx	r9
   2d04c:	e594c000 	ldr	ip, [r4]
   2d050:	eaffff90 	b	2ce98 <HwManager::validatorHandleAccess(unsigned long, unsigned long, unsigned long, unsigned long&)+0x170>
   2d054:	e594001c 	ldr	r0, [r4, #28]
   2d058:	e1a03008 	mov	r3, r8
   2d05c:	e5902000 	ldr	r2, [r0]
   2d060:	e58d7000 	str	r7, [sp]
   2d064:	e592902c 	ldr	r9, [r2, #44]	; 0x2c
   2d068:	e1a01005 	mov	r1, r5
   2d06c:	e1a02006 	mov	r2, r6
   2d070:	e12fff39 	blx	r9
   2d074:	e594c000 	ldr	ip, [r4]
   2d078:	eaffff94 	b	2ced0 <HwManager::validatorHandleAccess(unsigned long, unsigned long, unsigned long, unsigned long&)+0x1a8>
   2d07c:	e5940008 	ldr	r0, [r4, #8]
   2d080:	e1a03008 	mov	r3, r8
   2d084:	e5902000 	ldr	r2, [r0]
   2d088:	e58d7000 	str	r7, [sp]
   2d08c:	e592902c 	ldr	r9, [r2, #44]	; 0x2c
   2d090:	e1a01005 	mov	r1, r5
   2d094:	e1a02006 	mov	r2, r6
   2d098:	e12fff39 	blx	r9
   2d09c:	e594c000 	ldr	ip, [r4]
   2d0a0:	eaffff44 	b	2cdb8 <HwManager::validatorHandleAccess(unsigned long, unsigned long, unsigned long, unsigned long&)+0x90>
   2d0a4:	e594000c 	ldr	r0, [r4, #12]
   2d0a8:	e1a03008 	mov	r3, r8
   2d0ac:	e5902000 	ldr	r2, [r0]
   2d0b0:	e58d7000 	str	r7, [sp]
   2d0b4:	e592902c 	ldr	r9, [r2, #44]	; 0x2c
   2d0b8:	e1a01005 	mov	r1, r5
   2d0bc:	e1a02006 	mov	r2, r6
   2d0c0:	e12fff39 	blx	r9
   2d0c4:	e594c000 	ldr	ip, [r4]
   2d0c8:	eaffff48 	b	2cdf0 <HwManager::validatorHandleAccess(unsigned long, unsigned long, unsigned long, unsigned long&)+0xc8>
        if (_pHw[i] && _pHw[i]->isEnabled())
   2d0cc:	e12fff33 	blx	r3
   2d0d0:	eaffff35 	b	2cdac <HwManager::validatorHandleAccess(unsigned long, unsigned long, unsigned long, unsigned long&)+0x84>
   2d0d4:	e12fff33 	blx	r3
   2d0d8:	eaffff41 	b	2cde4 <HwManager::validatorHandleAccess(unsigned long, unsigned long, unsigned long, unsigned long&)+0xbc>
            _pHw[i]->validatorHandleAccess(addr, data, flags, retVal);
   2d0dc:	e5940020 	ldr	r0, [r4, #32]
   2d0e0:	e1a03008 	mov	r3, r8
   2d0e4:	e5902000 	ldr	r2, [r0]
   2d0e8:	e58d7000 	str	r7, [sp]
   2d0ec:	e592902c 	ldr	r9, [r2, #44]	; 0x2c
   2d0f0:	e1a01005 	mov	r1, r5
   2d0f4:	e1a02006 	mov	r2, r6
   2d0f8:	e12fff39 	blx	r9
   2d0fc:	e594c000 	ldr	ip, [r4]
   2d100:	eaffff80 	b	2cf08 <HwManager::validatorHandleAccess(unsigned long, unsigned long, unsigned long, unsigned long&)+0x1e0>
        if (_pHw[i] && _pHw[i]->isEnabled())
   2d104:	e12fff33 	blx	r3
   2d108:	eaffff43 	b	2ce1c <HwManager::validatorHandleAccess(unsigned long, unsigned long, unsigned long, unsigned long&)+0xf4>
            _pHw[i]->validatorHandleAccess(addr, data, flags, retVal);
   2d10c:	e5940024 	ldr	r0, [r4, #36]	; 0x24
   2d110:	e1a03008 	mov	r3, r8
   2d114:	e5902000 	ldr	r2, [r0]
   2d118:	e58d7000 	str	r7, [sp]
   2d11c:	e592902c 	ldr	r9, [r2, #44]	; 0x2c
   2d120:	e1a01005 	mov	r1, r5
   2d124:	e1a02006 	mov	r2, r6
   2d128:	e12fff39 	blx	r9
   2d12c:	e594c000 	ldr	ip, [r4]
   2d130:	eaffff82 	b	2cf40 <HwManager::validatorHandleAccess(unsigned long, unsigned long, unsigned long, unsigned long&)+0x218>
        if (_pHw[i] && _pHw[i]->isEnabled())
   2d134:	e12fff33 	blx	r3
   2d138:	eaffff45 	b	2ce54 <HwManager::validatorHandleAccess(unsigned long, unsigned long, unsigned long, unsigned long&)+0x12c>
   2d13c:	e12fff33 	blx	r3
   2d140:	eaffff51 	b	2ce8c <HwManager::validatorHandleAccess(unsigned long, unsigned long, unsigned long, unsigned long&)+0x164>
   2d144:	e12fff33 	blx	r3
   2d148:	eaffff5d 	b	2cec4 <HwManager::validatorHandleAccess(unsigned long, unsigned long, unsigned long, unsigned long&)+0x19c>
   2d14c:	e12fff33 	blx	r3
   2d150:	eaffff69 	b	2cefc <HwManager::validatorHandleAccess(unsigned long, unsigned long, unsigned long, unsigned long&)+0x1d4>
   2d154:	e12fff33 	blx	r3
   2d158:	eaffff75 	b	2cf34 <HwManager::validatorHandleAccess(unsigned long, unsigned long, unsigned long, unsigned long&)+0x20c>
   2d15c:	e12fff33 	blx	r3
   2d160:	eaffff81 	b	2cf6c <HwManager::validatorHandleAccess(unsigned long, unsigned long, unsigned long, unsigned long&)+0x244>
   2d164:	00074d68 	.word	0x00074d68
   2d168:	0002a098 	.word	0x0002a098

0002d16c <HwManager::enableHw(char const*, bool)>:
{
   2d16c:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    for (int i = 0; i < _numHardware; i++)
   2d170:	e59f60b4 	ldr	r6, [pc, #180]	; 2d22c <HwManager::enableHw(char const*, bool)+0xc0>
   2d174:	e5963000 	ldr	r3, [r6]
   2d178:	e3530000 	cmp	r3, #0
   2d17c:	da000024 	ble	2d214 <HwManager::enableHw(char const*, bool)+0xa8>
   2d180:	e1a09001 	mov	r9, r1
   2d184:	e1a07000 	mov	r7, r0
   2d188:	e1a05006 	mov	r5, r6
   2d18c:	e3a04000 	mov	r4, #0
   2d190:	e59f8098 	ldr	r8, [pc, #152]	; 2d230 <HwManager::enableHw(char const*, bool)+0xc4>
   2d194:	ea000008 	b	2d1bc <HwManager::enableHw(char const*, bool)+0x50>
        return _pName;
   2d198:	e5900008 	ldr	r0, [r0, #8]
        if (strcasecmp(_pHw[i]->name(), hwName) == 0)
   2d19c:	e1a01007 	mov	r1, r7
   2d1a0:	eb007f79 	bl	4cf8c <strcasecmp>
   2d1a4:	e3500000 	cmp	r0, #0
   2d1a8:	0a00000f 	beq	2d1ec <HwManager::enableHw(char const*, bool)+0x80>
   2d1ac:	e5963000 	ldr	r3, [r6]
    for (int i = 0; i < _numHardware; i++)
   2d1b0:	e2844001 	add	r4, r4, #1
   2d1b4:	e1540003 	cmp	r4, r3
   2d1b8:	aa000015 	bge	2d214 <HwManager::enableHw(char const*, bool)+0xa8>
        if (!_pHw[i])
   2d1bc:	e5b50004 	ldr	r0, [r5, #4]!
   2d1c0:	e3500000 	cmp	r0, #0
   2d1c4:	0afffff9 	beq	2d1b0 <HwManager::enableHw(char const*, bool)+0x44>
        if (strcasecmp(_pHw[i]->name(), hwName) == 0)
   2d1c8:	e5903000 	ldr	r3, [r0]
   2d1cc:	e5933038 	ldr	r3, [r3, #56]	; 0x38
   2d1d0:	e1530008 	cmp	r3, r8
   2d1d4:	0affffef 	beq	2d198 <HwManager::enableHw(char const*, bool)+0x2c>
   2d1d8:	e12fff33 	blx	r3
   2d1dc:	e1a01007 	mov	r1, r7
   2d1e0:	eb007f69 	bl	4cf8c <strcasecmp>
   2d1e4:	e3500000 	cmp	r0, #0
   2d1e8:	1affffef 	bne	2d1ac <HwManager::enableHw(char const*, bool)+0x40>
            _pHw[i]->enable(enable);
   2d1ec:	e0864104 	add	r4, r6, r4, lsl #2
   2d1f0:	e5940004 	ldr	r0, [r4, #4]
   2d1f4:	e59f2038 	ldr	r2, [pc, #56]	; 2d234 <HwManager::enableHw(char const*, bool)+0xc8>
   2d1f8:	e5903000 	ldr	r3, [r0]
   2d1fc:	e5933034 	ldr	r3, [r3, #52]	; 0x34
   2d200:	e1530002 	cmp	r3, r2
   2d204:	1a000004 	bne	2d21c <HwManager::enableHw(char const*, bool)+0xb0>
        _enabled = en;
   2d208:	e5c09004 	strb	r9, [r0, #4]
            return true;
   2d20c:	e3a00001 	mov	r0, #1
   2d210:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
        }
    }
    return false;
   2d214:	e3a00000 	mov	r0, #0
}
   2d218:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
            _pHw[i]->enable(enable);
   2d21c:	e1a01009 	mov	r1, r9
   2d220:	e12fff33 	blx	r3
            return true;
   2d224:	e3a00001 	mov	r0, #1
   2d228:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   2d22c:	00074d68 	.word	0x00074d68
   2d230:	0002a0a8 	.word	0x0002a0a8
   2d234:	0002a0a0 	.word	0x0002a0a0

0002d238 <HwManager::disableAll()>:

// Disable
void HwManager::disableAll()
{
   2d238:	e92d4010 	push	{r4, lr}
    for (int i = 0; i < _numHardware; i++)
   2d23c:	e59f42b0 	ldr	r4, [pc, #688]	; 2d4f4 <HwManager::disableAll()+0x2bc>
   2d240:	e5943000 	ldr	r3, [r4]
   2d244:	e3530000 	cmp	r3, #0
   2d248:	d8bd8010 	pople	{r4, pc}
    {
        if (!_pHw[i])
   2d24c:	e5940004 	ldr	r0, [r4, #4]
   2d250:	e3500000 	cmp	r0, #0
   2d254:	0a000006 	beq	2d274 <HwManager::disableAll()+0x3c>
            continue;
        _pHw[i]->enable(false);
   2d258:	e5902000 	ldr	r2, [r0]
   2d25c:	e59f1294 	ldr	r1, [pc, #660]	; 2d4f8 <HwManager::disableAll()+0x2c0>
   2d260:	e5922034 	ldr	r2, [r2, #52]	; 0x34
   2d264:	e1520001 	cmp	r2, r1
   2d268:	03a02000 	moveq	r2, #0
   2d26c:	05c02004 	strbeq	r2, [r0, #4]
   2d270:	1a00007a 	bne	2d460 <HwManager::disableAll()+0x228>
    for (int i = 0; i < _numHardware; i++)
   2d274:	e3530001 	cmp	r3, #1
   2d278:	d8bd8010 	pople	{r4, pc}
        if (!_pHw[i])
   2d27c:	e5940008 	ldr	r0, [r4, #8]
   2d280:	e3500000 	cmp	r0, #0
   2d284:	0a000007 	beq	2d2a8 <HwManager::disableAll()+0x70>
        _pHw[i]->enable(false);
   2d288:	e5903000 	ldr	r3, [r0]
   2d28c:	e59f2264 	ldr	r2, [pc, #612]	; 2d4f8 <HwManager::disableAll()+0x2c0>
   2d290:	e5933034 	ldr	r3, [r3, #52]	; 0x34
   2d294:	e1530002 	cmp	r3, r2
   2d298:	1a00006a 	bne	2d448 <HwManager::disableAll()+0x210>
   2d29c:	e3a02000 	mov	r2, #0
   2d2a0:	e5943000 	ldr	r3, [r4]
   2d2a4:	e5c02004 	strb	r2, [r0, #4]
    for (int i = 0; i < _numHardware; i++)
   2d2a8:	e3530002 	cmp	r3, #2
   2d2ac:	d8bd8010 	pople	{r4, pc}
        if (!_pHw[i])
   2d2b0:	e594000c 	ldr	r0, [r4, #12]
   2d2b4:	e3500000 	cmp	r0, #0
   2d2b8:	0a000007 	beq	2d2dc <HwManager::disableAll()+0xa4>
        _pHw[i]->enable(false);
   2d2bc:	e5903000 	ldr	r3, [r0]
   2d2c0:	e59f2230 	ldr	r2, [pc, #560]	; 2d4f8 <HwManager::disableAll()+0x2c0>
   2d2c4:	e5933034 	ldr	r3, [r3, #52]	; 0x34
   2d2c8:	e1530002 	cmp	r3, r2
   2d2cc:	1a000069 	bne	2d478 <HwManager::disableAll()+0x240>
   2d2d0:	e3a02000 	mov	r2, #0
   2d2d4:	e5943000 	ldr	r3, [r4]
   2d2d8:	e5c02004 	strb	r2, [r0, #4]
    for (int i = 0; i < _numHardware; i++)
   2d2dc:	e3530003 	cmp	r3, #3
   2d2e0:	d8bd8010 	pople	{r4, pc}
        if (!_pHw[i])
   2d2e4:	e5940010 	ldr	r0, [r4, #16]
   2d2e8:	e3500000 	cmp	r0, #0
   2d2ec:	0a000007 	beq	2d310 <HwManager::disableAll()+0xd8>
        _pHw[i]->enable(false);
   2d2f0:	e5903000 	ldr	r3, [r0]
   2d2f4:	e59f21fc 	ldr	r2, [pc, #508]	; 2d4f8 <HwManager::disableAll()+0x2c0>
   2d2f8:	e5933034 	ldr	r3, [r3, #52]	; 0x34
   2d2fc:	e1530002 	cmp	r3, r2
   2d300:	1a000060 	bne	2d488 <HwManager::disableAll()+0x250>
   2d304:	e3a02000 	mov	r2, #0
   2d308:	e5943000 	ldr	r3, [r4]
   2d30c:	e5c02004 	strb	r2, [r0, #4]
    for (int i = 0; i < _numHardware; i++)
   2d310:	e3530004 	cmp	r3, #4
   2d314:	d8bd8010 	pople	{r4, pc}
        if (!_pHw[i])
   2d318:	e5940014 	ldr	r0, [r4, #20]
   2d31c:	e3500000 	cmp	r0, #0
   2d320:	0a000007 	beq	2d344 <HwManager::disableAll()+0x10c>
        _pHw[i]->enable(false);
   2d324:	e5903000 	ldr	r3, [r0]
   2d328:	e59f21c8 	ldr	r2, [pc, #456]	; 2d4f8 <HwManager::disableAll()+0x2c0>
   2d32c:	e5933034 	ldr	r3, [r3, #52]	; 0x34
   2d330:	e1530002 	cmp	r3, r2
   2d334:	1a000057 	bne	2d498 <HwManager::disableAll()+0x260>
   2d338:	e3a02000 	mov	r2, #0
   2d33c:	e5943000 	ldr	r3, [r4]
   2d340:	e5c02004 	strb	r2, [r0, #4]
    for (int i = 0; i < _numHardware; i++)
   2d344:	e3530005 	cmp	r3, #5
   2d348:	d8bd8010 	pople	{r4, pc}
        if (!_pHw[i])
   2d34c:	e5940018 	ldr	r0, [r4, #24]
   2d350:	e3500000 	cmp	r0, #0
   2d354:	0a000007 	beq	2d378 <HwManager::disableAll()+0x140>
        _pHw[i]->enable(false);
   2d358:	e5903000 	ldr	r3, [r0]
   2d35c:	e59f2194 	ldr	r2, [pc, #404]	; 2d4f8 <HwManager::disableAll()+0x2c0>
   2d360:	e5933034 	ldr	r3, [r3, #52]	; 0x34
   2d364:	e1530002 	cmp	r3, r2
   2d368:	1a00004e 	bne	2d4a8 <HwManager::disableAll()+0x270>
   2d36c:	e3a02000 	mov	r2, #0
   2d370:	e5943000 	ldr	r3, [r4]
   2d374:	e5c02004 	strb	r2, [r0, #4]
    for (int i = 0; i < _numHardware; i++)
   2d378:	e3530006 	cmp	r3, #6
   2d37c:	d8bd8010 	pople	{r4, pc}
        if (!_pHw[i])
   2d380:	e594001c 	ldr	r0, [r4, #28]
   2d384:	e3500000 	cmp	r0, #0
   2d388:	0a000007 	beq	2d3ac <HwManager::disableAll()+0x174>
        _pHw[i]->enable(false);
   2d38c:	e5903000 	ldr	r3, [r0]
   2d390:	e59f2160 	ldr	r2, [pc, #352]	; 2d4f8 <HwManager::disableAll()+0x2c0>
   2d394:	e5933034 	ldr	r3, [r3, #52]	; 0x34
   2d398:	e1530002 	cmp	r3, r2
   2d39c:	1a000045 	bne	2d4b8 <HwManager::disableAll()+0x280>
   2d3a0:	e3a02000 	mov	r2, #0
   2d3a4:	e5943000 	ldr	r3, [r4]
   2d3a8:	e5c02004 	strb	r2, [r0, #4]
    for (int i = 0; i < _numHardware; i++)
   2d3ac:	e3530007 	cmp	r3, #7
   2d3b0:	d8bd8010 	pople	{r4, pc}
        if (!_pHw[i])
   2d3b4:	e5940020 	ldr	r0, [r4, #32]
   2d3b8:	e3500000 	cmp	r0, #0
   2d3bc:	0a000007 	beq	2d3e0 <HwManager::disableAll()+0x1a8>
        _pHw[i]->enable(false);
   2d3c0:	e5903000 	ldr	r3, [r0]
   2d3c4:	e59f212c 	ldr	r2, [pc, #300]	; 2d4f8 <HwManager::disableAll()+0x2c0>
   2d3c8:	e5933034 	ldr	r3, [r3, #52]	; 0x34
   2d3cc:	e1530002 	cmp	r3, r2
   2d3d0:	1a00003c 	bne	2d4c8 <HwManager::disableAll()+0x290>
   2d3d4:	e3a02000 	mov	r2, #0
   2d3d8:	e5943000 	ldr	r3, [r4]
   2d3dc:	e5c02004 	strb	r2, [r0, #4]
    for (int i = 0; i < _numHardware; i++)
   2d3e0:	e3530008 	cmp	r3, #8
   2d3e4:	d8bd8010 	pople	{r4, pc}
        if (!_pHw[i])
   2d3e8:	e5940024 	ldr	r0, [r4, #36]	; 0x24
   2d3ec:	e3500000 	cmp	r0, #0
   2d3f0:	0a000007 	beq	2d414 <HwManager::disableAll()+0x1dc>
        _pHw[i]->enable(false);
   2d3f4:	e5903000 	ldr	r3, [r0]
   2d3f8:	e59f20f8 	ldr	r2, [pc, #248]	; 2d4f8 <HwManager::disableAll()+0x2c0>
   2d3fc:	e5933034 	ldr	r3, [r3, #52]	; 0x34
   2d400:	e1530002 	cmp	r3, r2
   2d404:	1a000033 	bne	2d4d8 <HwManager::disableAll()+0x2a0>
   2d408:	e3a02000 	mov	r2, #0
   2d40c:	e5943000 	ldr	r3, [r4]
   2d410:	e5c02004 	strb	r2, [r0, #4]
    for (int i = 0; i < _numHardware; i++)
   2d414:	e3530009 	cmp	r3, #9
   2d418:	d8bd8010 	pople	{r4, pc}
        if (!_pHw[i])
   2d41c:	e5940028 	ldr	r0, [r4, #40]	; 0x28
   2d420:	e3500000 	cmp	r0, #0
   2d424:	08bd8010 	popeq	{r4, pc}
        _pHw[i]->enable(false);
   2d428:	e5903000 	ldr	r3, [r0]
   2d42c:	e59f20c4 	ldr	r2, [pc, #196]	; 2d4f8 <HwManager::disableAll()+0x2c0>
   2d430:	e5933034 	ldr	r3, [r3, #52]	; 0x34
   2d434:	e1530002 	cmp	r3, r2
   2d438:	1a00002a 	bne	2d4e8 <HwManager::disableAll()+0x2b0>
   2d43c:	e3a03000 	mov	r3, #0
   2d440:	e5c03004 	strb	r3, [r0, #4]
    }
}
   2d444:	e8bd8010 	pop	{r4, pc}
        _pHw[i]->enable(false);
   2d448:	e3a01000 	mov	r1, #0
   2d44c:	e12fff33 	blx	r3
   2d450:	e5943000 	ldr	r3, [r4]
    for (int i = 0; i < _numHardware; i++)
   2d454:	e3530002 	cmp	r3, #2
   2d458:	caffff94 	bgt	2d2b0 <HwManager::disableAll()+0x78>
   2d45c:	e8bd8010 	pop	{r4, pc}
        _pHw[i]->enable(false);
   2d460:	e3a01000 	mov	r1, #0
   2d464:	e12fff32 	blx	r2
   2d468:	e5943000 	ldr	r3, [r4]
    for (int i = 0; i < _numHardware; i++)
   2d46c:	e3530001 	cmp	r3, #1
   2d470:	caffff81 	bgt	2d27c <HwManager::disableAll()+0x44>
   2d474:	e8bd8010 	pop	{r4, pc}
        _pHw[i]->enable(false);
   2d478:	e3a01000 	mov	r1, #0
   2d47c:	e12fff33 	blx	r3
   2d480:	e5943000 	ldr	r3, [r4]
   2d484:	eaffff94 	b	2d2dc <HwManager::disableAll()+0xa4>
   2d488:	e3a01000 	mov	r1, #0
   2d48c:	e12fff33 	blx	r3
   2d490:	e5943000 	ldr	r3, [r4]
   2d494:	eaffff9d 	b	2d310 <HwManager::disableAll()+0xd8>
   2d498:	e3a01000 	mov	r1, #0
   2d49c:	e12fff33 	blx	r3
   2d4a0:	e5943000 	ldr	r3, [r4]
   2d4a4:	eaffffa6 	b	2d344 <HwManager::disableAll()+0x10c>
   2d4a8:	e3a01000 	mov	r1, #0
   2d4ac:	e12fff33 	blx	r3
   2d4b0:	e5943000 	ldr	r3, [r4]
   2d4b4:	eaffffaf 	b	2d378 <HwManager::disableAll()+0x140>
   2d4b8:	e3a01000 	mov	r1, #0
   2d4bc:	e12fff33 	blx	r3
   2d4c0:	e5943000 	ldr	r3, [r4]
   2d4c4:	eaffffb8 	b	2d3ac <HwManager::disableAll()+0x174>
   2d4c8:	e3a01000 	mov	r1, #0
   2d4cc:	e12fff33 	blx	r3
   2d4d0:	e5943000 	ldr	r3, [r4]
   2d4d4:	eaffffc1 	b	2d3e0 <HwManager::disableAll()+0x1a8>
   2d4d8:	e3a01000 	mov	r1, #0
   2d4dc:	e12fff33 	blx	r3
   2d4e0:	e5943000 	ldr	r3, [r4]
   2d4e4:	eaffffca 	b	2d414 <HwManager::disableAll()+0x1dc>
   2d4e8:	e3a01000 	mov	r1, #0
}
   2d4ec:	e8bd4010 	pop	{r4, lr}
        _pHw[i]->enable(false);
   2d4f0:	e12fff13 	bx	r3
   2d4f4:	00074d68 	.word	0x00074d68
   2d4f8:	0002a0a0 	.word	0x0002a0a0

0002d4fc <HwManager::setupFromJson(char const*, char const*)>:
// Setup from JSON
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// Setup from Json
void HwManager::setupFromJson(const char* jsonKey, const char* hwJson)
{
   2d4fc:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2d500:	e24ddd61 	sub	sp, sp, #6208	; 0x1840
   2d504:	e24dd00c 	sub	sp, sp, #12
    // Get hardware content list if present
    static const int MAX_JSON_LIST_STR = 5000;
    char hwList[MAX_JSON_LIST_STR];
    bool hwListValid = jsonGetValueForKey(jsonKey, hwJson, hwList, MAX_JSON_LIST_STR);
   2d508:	e28d2d13 	add	r2, sp, #1216	; 0x4c0
   2d50c:	e59f3290 	ldr	r3, [pc, #656]	; 2d7a4 <HwManager::setupFromJson(char const*, char const*)+0x2a8>
   2d510:	ebffdd35 	bl	249ec <jsonGetValueForKey>

    // Check if hardware list is present, if not set default
    const char* pJsonHwListToUse = hwList;
    if ((!hwListValid) || (strlen(hwList) == 0) || (strcasecmp(hwList, "[]") == 0))
   2d514:	e3500000 	cmp	r0, #0
   2d518:	0a000002 	beq	2d528 <HwManager::setupFromJson(char const*, char const*)+0x2c>
   2d51c:	e5dd34c0 	ldrb	r3, [sp, #1216]	; 0x4c0
   2d520:	e3530000 	cmp	r3, #0
   2d524:	1a00008b 	bne	2d758 <HwManager::setupFromJson(char const*, char const*)+0x25c>
        pJsonHwListToUse = _pDefaultHardwareList;
   2d528:	e59f3278 	ldr	r3, [pc, #632]	; 2d7a8 <HwManager::setupFromJson(char const*, char const*)+0x2ac>
   2d52c:	e5939040 	ldr	r9, [r3, #64]	; 0x40

    int hwListLen = jsonGetArrayLen(pJsonHwListToUse);
   2d530:	e1a00009 	mov	r0, r9
   2d534:	ebffdd76 	bl	24b14 <jsonGetArrayLen>
   2d538:	e1a0a000 	mov	sl, r0
    LogWrite(FromHwManager, LOG_DEBUG, "Hardware list len %d", hwListLen);
   2d53c:	e1a03000 	mov	r3, r0
   2d540:	e59f2264 	ldr	r2, [pc, #612]	; 2d7ac <HwManager::setupFromJson(char const*, char const*)+0x2b0>
   2d544:	e3a01004 	mov	r1, #4
   2d548:	e59f0260 	ldr	r0, [pc, #608]	; 2d7b0 <HwManager::setupFromJson(char const*, char const*)+0x2b4>
   2d54c:	ebffdb09 	bl	24178 <LogWrite>

    // Iterate through hardware
    for (int hwIdx = 0; hwIdx < hwListLen; hwIdx++)
   2d550:	e35a0000 	cmp	sl, #0
   2d554:	da00007c 	ble	2d74c <HwManager::setupFromJson(char const*, char const*)+0x250>
   2d558:	e3a04000 	mov	r4, #0
    {
        // Get hardware def
        static const int HW_DEF_MAXLEN = 1000;
        char hwDefJson[HW_DEF_MAXLEN];
        bool valid = jsonGetArrayElem(hwIdx, pJsonHwListToUse, hwDefJson, HW_DEF_MAXLEN);
        LogWrite(FromHwManager, LOG_DEBUG, "Hardware item valid %d elem %s", valid, hwDefJson);
   2d55c:	e59fb24c 	ldr	fp, [pc, #588]	; 2d7b0 <HwManager::setupFromJson(char const*, char const*)+0x2b4>
   2d560:	e28d50d8 	add	r5, sp, #216	; 0xd8
   2d564:	ea000002 	b	2d574 <HwManager::setupFromJson(char const*, char const*)+0x78>
    for (int hwIdx = 0; hwIdx < hwListLen; hwIdx++)
   2d568:	e2844001 	add	r4, r4, #1
   2d56c:	e15a0004 	cmp	sl, r4
   2d570:	0a000075 	beq	2d74c <HwManager::setupFromJson(char const*, char const*)+0x250>
        bool valid = jsonGetArrayElem(hwIdx, pJsonHwListToUse, hwDefJson, HW_DEF_MAXLEN);
   2d574:	e3a03ffa 	mov	r3, #1000	; 0x3e8
   2d578:	e1a02005 	mov	r2, r5
   2d57c:	e1a01009 	mov	r1, r9
   2d580:	e1a00004 	mov	r0, r4
   2d584:	ebffdd8c 	bl	24bbc <jsonGetArrayElem>
   2d588:	e1a06000 	mov	r6, r0
        LogWrite(FromHwManager, LOG_DEBUG, "Hardware item valid %d elem %s", valid, hwDefJson);
   2d58c:	e1a03000 	mov	r3, r0
   2d590:	e58d5000 	str	r5, [sp]
   2d594:	e59f2218 	ldr	r2, [pc, #536]	; 2d7b4 <HwManager::setupFromJson(char const*, char const*)+0x2b8>
   2d598:	e3a01004 	mov	r1, #4
   2d59c:	e1a0000b 	mov	r0, fp
   2d5a0:	ebffdaf4 	bl	24178 <LogWrite>
        if (!valid)
   2d5a4:	e3560000 	cmp	r6, #0
   2d5a8:	0affffee 	beq	2d568 <HwManager::setupFromJson(char const*, char const*)+0x6c>
            continue;

        // Get name
        static const int HW_NAME_MAXLEN = 100;
        char hwName[HW_NAME_MAXLEN];
        if (!jsonGetValueForKey("name", hwDefJson, hwName, HW_NAME_MAXLEN))
   2d5ac:	e3a03064 	mov	r3, #100	; 0x64
   2d5b0:	e28d2010 	add	r2, sp, #16
   2d5b4:	e1a01005 	mov	r1, r5
   2d5b8:	e59f01f8 	ldr	r0, [pc, #504]	; 2d7b8 <HwManager::setupFromJson(char const*, char const*)+0x2bc>
   2d5bc:	ebffdd0a 	bl	249ec <jsonGetValueForKey>
   2d5c0:	e2503000 	subs	r3, r0, #0
   2d5c4:	e58d3008 	str	r3, [sp, #8]
   2d5c8:	0affffe6 	beq	2d568 <HwManager::setupFromJson(char const*, char const*)+0x6c>
        LogWrite(FromHwManager, LOG_DEBUG, "Hardware %d Name %s", hwIdx, hwName);

        // Get enable
        static const int HW_ENABLE_MAXLEN = 100;
        char hwEnable[HW_ENABLE_MAXLEN];
        strcpy(hwEnable, "1");
   2d5cc:	e3a06031 	mov	r6, #49	; 0x31
        LogWrite(FromHwManager, LOG_DEBUG, "Hardware %d Name %s", hwIdx, hwName);
   2d5d0:	e28d3010 	add	r3, sp, #16
   2d5d4:	e58d3000 	str	r3, [sp]
   2d5d8:	e59f21dc 	ldr	r2, [pc, #476]	; 2d7bc <HwManager::setupFromJson(char const*, char const*)+0x2c0>
   2d5dc:	e1a03004 	mov	r3, r4
   2d5e0:	e3a01004 	mov	r1, #4
   2d5e4:	e1a0000b 	mov	r0, fp
   2d5e8:	ebffdae2 	bl	24178 <LogWrite>
        if (!jsonGetValueForKey("enable", hwDefJson, hwEnable, HW_ENABLE_MAXLEN))
   2d5ec:	e3a03064 	mov	r3, #100	; 0x64
   2d5f0:	e28d2074 	add	r2, sp, #116	; 0x74
   2d5f4:	e1a01005 	mov	r1, r5
   2d5f8:	e59f01c0 	ldr	r0, [pc, #448]	; 2d7c0 <HwManager::setupFromJson(char const*, char const*)+0x2c4>
        strcpy(hwEnable, "1");
   2d5fc:	e1cd67b4 	strh	r6, [sp, #116]	; 0x74
        if (!jsonGetValueForKey("enable", hwDefJson, hwEnable, HW_ENABLE_MAXLEN))
   2d600:	ebffdcf9 	bl	249ec <jsonGetValueForKey>
            strcpy(hwEnable, "1");
        bool en = false;
        if (strcasecmp(hwEnable, "y") == 0)
   2d604:	e59f11b8 	ldr	r1, [pc, #440]	; 2d7c4 <HwManager::setupFromJson(char const*, char const*)+0x2c8>
        if (!jsonGetValueForKey("enable", hwDefJson, hwEnable, HW_ENABLE_MAXLEN))
   2d608:	e3500000 	cmp	r0, #0
        if (strcasecmp(hwEnable, "y") == 0)
   2d60c:	e28d0074 	add	r0, sp, #116	; 0x74
            strcpy(hwEnable, "1");
   2d610:	01cd67b4 	strheq	r6, [sp, #116]	; 0x74
        if (strcasecmp(hwEnable, "y") == 0)
   2d614:	eb007e5c 	bl	4cf8c <strcasecmp>
   2d618:	e3500000 	cmp	r0, #0
   2d61c:	03a03001 	moveq	r3, #1
   2d620:	058d300c 	streq	r3, [sp, #12]
   2d624:	1a000052 	bne	2d774 <HwManager::setupFromJson(char const*, char const*)+0x278>
    for (int i = 0; i < _numHardware; i++)
   2d628:	e59f6198 	ldr	r6, [pc, #408]	; 2d7c8 <HwManager::setupFromJson(char const*, char const*)+0x2cc>
   2d62c:	e5961000 	ldr	r1, [r6]
   2d630:	e3510000 	cmp	r1, #0
   2d634:	da000021 	ble	2d6c0 <HwManager::setupFromJson(char const*, char const*)+0x1c4>
   2d638:	e1a07006 	mov	r7, r6
   2d63c:	e3a08000 	mov	r8, #0
   2d640:	ea000008 	b	2d668 <HwManager::setupFromJson(char const*, char const*)+0x16c>
        return _pName;
   2d644:	e5900008 	ldr	r0, [r0, #8]
        if (strcasecmp(_pHw[i]->name(), hwName) == 0)
   2d648:	e28d1010 	add	r1, sp, #16
   2d64c:	eb007e4e 	bl	4cf8c <strcasecmp>
   2d650:	e3500000 	cmp	r0, #0
   2d654:	0a000010 	beq	2d69c <HwManager::setupFromJson(char const*, char const*)+0x1a0>
   2d658:	e5961000 	ldr	r1, [r6]
    for (int i = 0; i < _numHardware; i++)
   2d65c:	e2888001 	add	r8, r8, #1
   2d660:	e1580001 	cmp	r8, r1
   2d664:	aa000015 	bge	2d6c0 <HwManager::setupFromJson(char const*, char const*)+0x1c4>
        if (!_pHw[i])
   2d668:	e5b70004 	ldr	r0, [r7, #4]!
   2d66c:	e3500000 	cmp	r0, #0
   2d670:	0afffff9 	beq	2d65c <HwManager::setupFromJson(char const*, char const*)+0x160>
        if (strcasecmp(_pHw[i]->name(), hwName) == 0)
   2d674:	e5903000 	ldr	r3, [r0]
   2d678:	e59f214c 	ldr	r2, [pc, #332]	; 2d7cc <HwManager::setupFromJson(char const*, char const*)+0x2d0>
   2d67c:	e5933038 	ldr	r3, [r3, #56]	; 0x38
   2d680:	e1530002 	cmp	r3, r2
   2d684:	0affffee 	beq	2d644 <HwManager::setupFromJson(char const*, char const*)+0x148>
   2d688:	e12fff33 	blx	r3
   2d68c:	e28d1010 	add	r1, sp, #16
   2d690:	eb007e3d 	bl	4cf8c <strcasecmp>
   2d694:	e3500000 	cmp	r0, #0
   2d698:	1affffee 	bne	2d658 <HwManager::setupFromJson(char const*, char const*)+0x15c>
            _pHw[i]->enable(enable);
   2d69c:	e0863108 	add	r3, r6, r8, lsl #2
   2d6a0:	e5930004 	ldr	r0, [r3, #4]
   2d6a4:	e59f2124 	ldr	r2, [pc, #292]	; 2d7d0 <HwManager::setupFromJson(char const*, char const*)+0x2d4>
   2d6a8:	e5903000 	ldr	r3, [r0]
   2d6ac:	e5933034 	ldr	r3, [r3, #52]	; 0x34
   2d6b0:	e1530002 	cmp	r3, r2
   2d6b4:	1a000037 	bne	2d798 <HwManager::setupFromJson(char const*, char const*)+0x29c>
        _enabled = en;
   2d6b8:	e5dd3008 	ldrb	r3, [sp, #8]
   2d6bc:	e5c03004 	strb	r3, [r0, #4]
            en = strtol(hwEnable, NULL, 10) != 0;
        
        // Enable/Disable
        enableHw(hwName, en);

        LogWrite(FromHwManager, LOG_DEBUG, "Hardware %d Name %s Enable %d", hwIdx, hwName, en);
   2d6c0:	e59d300c 	ldr	r3, [sp, #12]
   2d6c4:	e59f2108 	ldr	r2, [pc, #264]	; 2d7d4 <HwManager::setupFromJson(char const*, char const*)+0x2d8>
   2d6c8:	e58d3004 	str	r3, [sp, #4]
   2d6cc:	e28d3010 	add	r3, sp, #16
   2d6d0:	e58d3000 	str	r3, [sp]
   2d6d4:	e3a01004 	mov	r1, #4
   2d6d8:	e1a03004 	mov	r3, r4
   2d6dc:	e1a0000b 	mov	r0, fp
   2d6e0:	ebffdaa4 	bl	24178 <LogWrite>

        // Configure each piece of hardware with this information
        // only the named one will actually use the configuration
        for (int i = 0; i < _numHardware; i++)
   2d6e4:	e5963000 	ldr	r3, [r6]
   2d6e8:	e3530000 	cmp	r3, #0
   2d6ec:	daffff9d 	ble	2d568 <HwManager::setupFromJson(char const*, char const*)+0x6c>
   2d6f0:	e3a07000 	mov	r7, #0
   2d6f4:	e59f80cc 	ldr	r8, [pc, #204]	; 2d7c8 <HwManager::setupFromJson(char const*, char const*)+0x2cc>
        {
            if (!_pHw[i])
   2d6f8:	e5b80004 	ldr	r0, [r8, #4]!
   2d6fc:	e3500000 	cmp	r0, #0
   2d700:	0a00000b 	beq	2d734 <HwManager::setupFromJson(char const*, char const*)+0x238>
                continue;
            _pHw[i]->configure(hwName, hwDefJson);
   2d704:	e5903000 	ldr	r3, [r0]
   2d708:	e1a02005 	mov	r2, r5
   2d70c:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
   2d710:	e28d1010 	add	r1, sp, #16
   2d714:	e12fff33 	blx	r3
   2d718:	e5963000 	ldr	r3, [r6]
        for (int i = 0; i < _numHardware; i++)
   2d71c:	e2877001 	add	r7, r7, #1
   2d720:	e1570003 	cmp	r7, r3
   2d724:	aaffff8f 	bge	2d568 <HwManager::setupFromJson(char const*, char const*)+0x6c>
            if (!_pHw[i])
   2d728:	e5b80004 	ldr	r0, [r8, #4]!
   2d72c:	e3500000 	cmp	r0, #0
   2d730:	1afffff3 	bne	2d704 <HwManager::setupFromJson(char const*, char const*)+0x208>
        for (int i = 0; i < _numHardware; i++)
   2d734:	e2877001 	add	r7, r7, #1
   2d738:	e1570003 	cmp	r7, r3
   2d73c:	baffffed 	blt	2d6f8 <HwManager::setupFromJson(char const*, char const*)+0x1fc>
    for (int hwIdx = 0; hwIdx < hwListLen; hwIdx++)
   2d740:	e2844001 	add	r4, r4, #1
   2d744:	e15a0004 	cmp	sl, r4
   2d748:	1affff89 	bne	2d574 <HwManager::setupFromJson(char const*, char const*)+0x78>
        }
    }    

}
   2d74c:	e28ddd61 	add	sp, sp, #6208	; 0x1840
   2d750:	e28dd00c 	add	sp, sp, #12
   2d754:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if ((!hwListValid) || (strlen(hwList) == 0) || (strcasecmp(hwList, "[]") == 0))
   2d758:	e59f1078 	ldr	r1, [pc, #120]	; 2d7d8 <HwManager::setupFromJson(char const*, char const*)+0x2dc>
   2d75c:	e28d0d13 	add	r0, sp, #1216	; 0x4c0
   2d760:	eb007e09 	bl	4cf8c <strcasecmp>
   2d764:	e3500000 	cmp	r0, #0
    const char* pJsonHwListToUse = hwList;
   2d768:	128d9d13 	addne	r9, sp, #1216	; 0x4c0
    if ((!hwListValid) || (strlen(hwList) == 0) || (strcasecmp(hwList, "[]") == 0))
   2d76c:	1affff6f 	bne	2d530 <HwManager::setupFromJson(char const*, char const*)+0x34>
   2d770:	eaffff6c 	b	2d528 <HwManager::setupFromJson(char const*, char const*)+0x2c>
            en = strtol(hwEnable, NULL, 10) != 0;
   2d774:	e28d0074 	add	r0, sp, #116	; 0x74
   2d778:	e3a0200a 	mov	r2, #10
   2d77c:	e3a01000 	mov	r1, #0
   2d780:	eb0082e6 	bl	4e320 <strtol>
   2d784:	e2903000 	adds	r3, r0, #0
   2d788:	13a03001 	movne	r3, #1
   2d78c:	e58d3008 	str	r3, [sp, #8]
   2d790:	e58d300c 	str	r3, [sp, #12]
   2d794:	eaffffa3 	b	2d628 <HwManager::setupFromJson(char const*, char const*)+0x12c>
            _pHw[i]->enable(enable);
   2d798:	e59d1008 	ldr	r1, [sp, #8]
   2d79c:	e12fff33 	blx	r3
   2d7a0:	eaffffc6 	b	2d6c0 <HwManager::setupFromJson(char const*, char const*)+0x1c4>
   2d7a4:	00001388 	.word	0x00001388
   2d7a8:	0006f100 	.word	0x0006f100
   2d7ac:	00054acc 	.word	0x00054acc
   2d7b0:	00054a28 	.word	0x00054a28
   2d7b4:	00054ae4 	.word	0x00054ae4
   2d7b8:	00054b04 	.word	0x00054b04
   2d7bc:	00054b0c 	.word	0x00054b0c
   2d7c0:	00054a58 	.word	0x00054a58
   2d7c4:	00056154 	.word	0x00056154
   2d7c8:	00074d68 	.word	0x00074d68
   2d7cc:	0002a0a8 	.word	0x0002a0a8
   2d7d0:	0002a0a0 	.word	0x0002a0a0
   2d7d4:	00054b20 	.word	0x00054b20
   2d7d8:	00054ac8 	.word	0x00054ac8

0002d7dc <McBase::getDescriptorTable()>:

// Get descriptor table for the machine (-1 for current subType)
McDescriptorTable* McBase::getDescriptorTable()
{
    return &_activeDescriptorTable;
}
   2d7dc:	e2800004 	add	r0, r0, #4
   2d7e0:	e12fff1e 	bx	lr

0002d7e4 <McBase::reset(bool, bool)>:

// Handle reset for the machine - if false returned then the bus raider will issue a hardware reset
bool McBase::reset([[maybe_unused]] bool restoreWaitDefaults, [[maybe_unused]] bool holdInReset)
{
    return false;
}
   2d7e4:	e3a00000 	mov	r0, #0
   2d7e8:	e12fff1e 	bx	lr

0002d7ec <McBase::canProcFileType(char const*)>:

// Check if machine can process a file type
bool McBase::canProcFileType([[maybe_unused]] const char* fileType)
{
    return false;
}
   2d7ec:	e3a00000 	mov	r0, #0
   2d7f0:	e12fff1e 	bx	lr

0002d7f4 <McBase::getMachineName()>:

// Get current machine name
const char* McBase::getMachineName()
{
    return _activeDescriptorTable.machineName;
}
   2d7f4:	e5900004 	ldr	r0, [r0, #4]
   2d7f8:	e12fff1e 	bx	lr

0002d7fc <McBase::machineHeartbeat()>:
}

// Machine heartbeat
void McBase::machineHeartbeat()
{
}
   2d7fc:	e12fff1e 	bx	lr

0002d800 <McBase::isCalled(char const*)>:
{
   2d800:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    for (int i = 0; i < _defaultDescriptorTablesLen; i++)
   2d804:	e590704c 	ldr	r7, [r0, #76]	; 0x4c
   2d808:	e3570000 	cmp	r7, #0
   2d80c:	da00000e 	ble	2d84c <McBase::isCalled(char const*)+0x4c>
   2d810:	e1a06001 	mov	r6, r1
   2d814:	e3a04000 	mov	r4, #0
   2d818:	e5905048 	ldr	r5, [r0, #72]	; 0x48
   2d81c:	ea000002 	b	2d82c <McBase::isCalled(char const*)+0x2c>
   2d820:	e1540007 	cmp	r4, r7
   2d824:	e2855044 	add	r5, r5, #68	; 0x44
   2d828:	0a000007 	beq	2d84c <McBase::isCalled(char const*)+0x4c>
        if (strcasecmp(_pDefaultDescriptorTables[i].machineName, mcName) == 0)
   2d82c:	e1a01006 	mov	r1, r6
   2d830:	e5950000 	ldr	r0, [r5]
   2d834:	eb007dd4 	bl	4cf8c <strcasecmp>
   2d838:	e3500000 	cmp	r0, #0
    for (int i = 0; i < _defaultDescriptorTablesLen; i++)
   2d83c:	e2844001 	add	r4, r4, #1
        if (strcasecmp(_pDefaultDescriptorTables[i].machineName, mcName) == 0)
   2d840:	1afffff6 	bne	2d820 <McBase::isCalled(char const*)+0x20>
            return true;
   2d844:	e3a00001 	mov	r0, #1
}
   2d848:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    return false;
   2d84c:	e3a00000 	mov	r0, #0
   2d850:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

0002d854 <McBase::getMachineNames(char*, int)>:
{
   2d854:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    mcNameStr[0] = 0;
   2d858:	e3a06000 	mov	r6, #0
   2d85c:	e5c16000 	strb	r6, [r1]
    for (int j = 0; j < _defaultDescriptorTablesLen; j++)
   2d860:	e590304c 	ldr	r3, [r0, #76]	; 0x4c
   2d864:	e1530006 	cmp	r3, r6
   2d868:	d8bd87f0 	pople	{r4, r5, r6, r7, r8, r9, sl, pc}
   2d86c:	e1a05002 	mov	r5, r2
   2d870:	e1a08000 	mov	r8, r0
   2d874:	e1a04001 	mov	r4, r1
   2d878:	e1a07006 	mov	r7, r6
        strlcat(mcNameStr,"\"", maxLen);
   2d87c:	e59f905c 	ldr	r9, [pc, #92]	; 2d8e0 <McBase::getMachineNames(char*, int)+0x8c>
            strlcat(mcNameStr,",", maxLen);
   2d880:	e59fa05c 	ldr	sl, [pc, #92]	; 2d8e4 <McBase::getMachineNames(char*, int)+0x90>
        strlcat(mcNameStr,"\"", maxLen);
   2d884:	e1a02005 	mov	r2, r5
   2d888:	e1a01009 	mov	r1, r9
   2d88c:	e1a00004 	mov	r0, r4
   2d890:	eb007f1c 	bl	4d508 <strlcat>
        strlcat(mcNameStr, _pDefaultDescriptorTables[j].machineName, maxLen);
   2d894:	e5983048 	ldr	r3, [r8, #72]	; 0x48
   2d898:	e1a02005 	mov	r2, r5
   2d89c:	e7931006 	ldr	r1, [r3, r6]
   2d8a0:	e1a00004 	mov	r0, r4
   2d8a4:	eb007f17 	bl	4d508 <strlcat>
        strlcat(mcNameStr,"\"", maxLen);
   2d8a8:	e1a02005 	mov	r2, r5
   2d8ac:	e1a01009 	mov	r1, r9
   2d8b0:	e1a00004 	mov	r0, r4
   2d8b4:	eb007f13 	bl	4d508 <strlcat>
    for (int j = 0; j < _defaultDescriptorTablesLen; j++)
   2d8b8:	e598304c 	ldr	r3, [r8, #76]	; 0x4c
   2d8bc:	e2877001 	add	r7, r7, #1
   2d8c0:	e1570003 	cmp	r7, r3
   2d8c4:	e2866044 	add	r6, r6, #68	; 0x44
   2d8c8:	a8bd87f0 	popge	{r4, r5, r6, r7, r8, r9, sl, pc}
            strlcat(mcNameStr,",", maxLen);
   2d8cc:	e1a02005 	mov	r2, r5
   2d8d0:	e1a0100a 	mov	r1, sl
   2d8d4:	e1a00004 	mov	r0, r4
   2d8d8:	eb007f0a 	bl	4d508 <strlcat>
   2d8dc:	eaffffe8 	b	2d884 <McBase::getMachineNames(char*, int)+0x30>
   2d8e0:	00053ca4 	.word	0x00053ca4
   2d8e4:	000541a0 	.word	0x000541a0

0002d8e8 <McBase::setupMachine(char const*, char const*)>:
{
   2d8e8:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   2d8ec:	e1a08000 	mov	r8, r0
    LogWrite("McBase", LOG_DEBUG, "Disabling %s", mcName);
   2d8f0:	e1a03001 	mov	r3, r1
{
   2d8f4:	e24dd068 	sub	sp, sp, #104	; 0x68
    LogWrite("McBase", LOG_DEBUG, "Disabling %s", mcName);
   2d8f8:	e59f0168 	ldr	r0, [pc, #360]	; 2da68 <McBase::setupMachine(char const*, char const*)+0x180>
{
   2d8fc:	e1a06001 	mov	r6, r1
   2d900:	e1a0a002 	mov	sl, r2
    LogWrite("McBase", LOG_DEBUG, "Disabling %s", mcName);
   2d904:	e3a01004 	mov	r1, #4
   2d908:	e59f215c 	ldr	r2, [pc, #348]	; 2da6c <McBase::setupMachine(char const*, char const*)+0x184>
   2d90c:	ebffda19 	bl	24178 <LogWrite>
    disable();
   2d910:	e5983000 	ldr	r3, [r8]
   2d914:	e1a00008 	mov	r0, r8
   2d918:	e593301c 	ldr	r3, [r3, #28]
   2d91c:	e12fff33 	blx	r3
    for (int i = 0; i < _defaultDescriptorTablesLen; i++)
   2d920:	e598704c 	ldr	r7, [r8, #76]	; 0x4c
   2d924:	e3570000 	cmp	r7, #0
   2d928:	da000031 	ble	2d9f4 <McBase::setupMachine(char const*, char const*)+0x10c>
   2d92c:	e3a05000 	mov	r5, #0
   2d930:	e5984048 	ldr	r4, [r8, #72]	; 0x48
   2d934:	ea000003 	b	2d948 <McBase::setupMachine(char const*, char const*)+0x60>
   2d938:	e2855001 	add	r5, r5, #1
   2d93c:	e1550007 	cmp	r5, r7
   2d940:	e2844044 	add	r4, r4, #68	; 0x44
   2d944:	0a00002a 	beq	2d9f4 <McBase::setupMachine(char const*, char const*)+0x10c>
        if (strcasecmp(_pDefaultDescriptorTables[i].machineName, mcName) == 0)
   2d948:	e1a01006 	mov	r1, r6
   2d94c:	e5940000 	ldr	r0, [r4]
   2d950:	eb007d8d 	bl	4cf8c <strcasecmp>
   2d954:	e2509000 	subs	r9, r0, #0
   2d958:	1afffff6 	bne	2d938 <McBase::setupMachine(char const*, char const*)+0x50>
    _activeDescriptorTable = _pDefaultDescriptorTables[mcSubType];
   2d95c:	e1a01004 	mov	r1, r4
   2d960:	e3a02044 	mov	r2, #68	; 0x44
   2d964:	e2880004 	add	r0, r8, #4
   2d968:	eb007cfe 	bl	4cd68 <memcpy>
    HwManager::disableAll();
   2d96c:	ebfffe31 	bl	2d238 <HwManager::disableAll()>
    LogWrite("McBase", LOG_DEBUG, "Subtype invalid %d", mcSubType);
   2d970:	e1a03005 	mov	r3, r5
   2d974:	e59f20f4 	ldr	r2, [pc, #244]	; 2da70 <McBase::setupMachine(char const*, char const*)+0x188>
   2d978:	e3a01004 	mov	r1, #4
   2d97c:	e59f00e4 	ldr	r0, [pc, #228]	; 2da68 <McBase::setupMachine(char const*, char const*)+0x180>
   2d980:	ebffd9fc 	bl	24178 <LogWrite>
    HwManager::setupFromJson("hw", mcJson);
   2d984:	e1a0100a 	mov	r1, sl
   2d988:	e59f00e4 	ldr	r0, [pc, #228]	; 2da74 <McBase::setupMachine(char const*, char const*)+0x18c>
   2d98c:	ebfffeda 	bl	2d4fc <HwManager::setupFromJson(char const*, char const*)>
    bool clockValid = jsonGetValueForKey("clockHz", mcJson, clockSpeedStr, MAX_CLOCK_SET_STR);
   2d990:	e1a0100a 	mov	r1, sl
   2d994:	e28d2004 	add	r2, sp, #4
   2d998:	e3a03064 	mov	r3, #100	; 0x64
   2d99c:	e59f00d4 	ldr	r0, [pc, #212]	; 2da78 <McBase::setupMachine(char const*, char const*)+0x190>
    uint32_t clockFreqHz = _activeDescriptorTable.clockFrequencyHz;
   2d9a0:	e5984038 	ldr	r4, [r8, #56]	; 0x38
    bool clockValid = jsonGetValueForKey("clockHz", mcJson, clockSpeedStr, MAX_CLOCK_SET_STR);
   2d9a4:	ebffdc10 	bl	249ec <jsonGetValueForKey>
    if (clockValid)
   2d9a8:	e3500000 	cmp	r0, #0
   2d9ac:	1a000021 	bne	2da38 <McBase::setupMachine(char const*, char const*)+0x150>
    if ((clockFreqHz >= BusAccess::clockGetMinFreqHz()) && (clockFreqHz <= BusAccess::clockGetMaxFreqHz()))
   2d9b0:	eb00304b 	bl	39ae4 <BusAccess::clockGetMinFreqHz()>
   2d9b4:	e1500004 	cmp	r0, r4
   2d9b8:	9a000015 	bls	2da14 <McBase::setupMachine(char const*, char const*)+0x12c>
        BusAccess::clockEnable(false);
   2d9bc:	e3a00000 	mov	r0, #0
   2d9c0:	eb003005 	bl	399dc <BusAccess::clockEnable(bool)>
    enable();
   2d9c4:	e5983000 	ldr	r3, [r8]
   2d9c8:	e1a00008 	mov	r0, r8
   2d9cc:	e5933018 	ldr	r3, [r3, #24]
   2d9d0:	e12fff33 	blx	r3
    LogWrite("McBase", LOG_DEBUG, "Enabling %s", mcName);
   2d9d4:	e1a03006 	mov	r3, r6
   2d9d8:	e59f209c 	ldr	r2, [pc, #156]	; 2da7c <McBase::setupMachine(char const*, char const*)+0x194>
   2d9dc:	e3a01004 	mov	r1, #4
   2d9e0:	e59f0080 	ldr	r0, [pc, #128]	; 2da68 <McBase::setupMachine(char const*, char const*)+0x180>
   2d9e4:	ebffd9e3 	bl	24178 <LogWrite>
    return true;
   2d9e8:	e3a00001 	mov	r0, #1
}
   2d9ec:	e28dd068 	add	sp, sp, #104	; 0x68
   2d9f0:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
        LogWrite("McBase", LOG_DEBUG, "Subtype invalid %d", mcSubType);
   2d9f4:	e3e03000 	mvn	r3, #0
   2d9f8:	e59f2070 	ldr	r2, [pc, #112]	; 2da70 <McBase::setupMachine(char const*, char const*)+0x188>
   2d9fc:	e3a01004 	mov	r1, #4
   2da00:	e59f0060 	ldr	r0, [pc, #96]	; 2da68 <McBase::setupMachine(char const*, char const*)+0x180>
   2da04:	ebffd9db 	bl	24178 <LogWrite>
        return false;
   2da08:	e3a00000 	mov	r0, #0
}
   2da0c:	e28dd068 	add	sp, sp, #104	; 0x68
   2da10:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    if ((clockFreqHz >= BusAccess::clockGetMinFreqHz()) && (clockFreqHz <= BusAccess::clockGetMaxFreqHz()))
   2da14:	eb003035 	bl	39af0 <BusAccess::clockGetMaxFreqHz()>
   2da18:	e1500004 	cmp	r0, r4
   2da1c:	3affffe6 	bcc	2d9bc <McBase::setupMachine(char const*, char const*)+0xd4>
        BusAccess::clockSetup();
   2da20:	eb002f69 	bl	397cc <BusAccess::clockSetup()>
        BusAccess::clockSetFreqHz(clockFreqHz);
   2da24:	e1a00004 	mov	r0, r4
   2da28:	eb002f9a 	bl	39898 <BusAccess::clockSetFreqHz(unsigned long)>
        BusAccess::clockEnable(true);
   2da2c:	e3a00001 	mov	r0, #1
   2da30:	eb002fe9 	bl	399dc <BusAccess::clockEnable(bool)>
   2da34:	eaffffe2 	b	2d9c4 <McBase::setupMachine(char const*, char const*)+0xdc>
        uint32_t clockHz = strtol(clockSpeedStr, NULL, 10);
   2da38:	e1a01009 	mov	r1, r9
   2da3c:	e3a0200a 	mov	r2, #10
   2da40:	e28d0004 	add	r0, sp, #4
   2da44:	eb008235 	bl	4e320 <strtol>
   2da48:	e1a05000 	mov	r5, r0
        if ((clockHz >= BusAccess::clockGetMinFreqHz()) && (clockHz <= BusAccess::clockGetMaxFreqHz()))
   2da4c:	eb003024 	bl	39ae4 <BusAccess::clockGetMinFreqHz()>
   2da50:	e1500005 	cmp	r0, r5
   2da54:	8affffd5 	bhi	2d9b0 <McBase::setupMachine(char const*, char const*)+0xc8>
   2da58:	eb003024 	bl	39af0 <BusAccess::clockGetMaxFreqHz()>
   2da5c:	e1500005 	cmp	r0, r5
   2da60:	21a04005 	movcs	r4, r5
   2da64:	eaffffd1 	b	2d9b0 <McBase::setupMachine(char const*, char const*)+0xc8>
   2da68:	00054bbc 	.word	0x00054bbc
   2da6c:	00054bac 	.word	0x00054bac
   2da70:	00054bd0 	.word	0x00054bd0
   2da74:	00054be4 	.word	0x00054be4
   2da78:	00053cb4 	.word	0x00053cb4
   2da7c:	00054bc4 	.word	0x00054bc4

0002da80 <McBase::setupDisplay(DisplayBase*)>:
{
   2da80:	e92d4030 	push	{r4, r5, lr}
   2da84:	e1a05001 	mov	r5, r1
    LogWrite("McBase", LOG_DEBUG, "setupDisplay ResX %d ResY %d",
   2da88:	e5902014 	ldr	r2, [r0, #20]
{
   2da8c:	e24dd01c 	sub	sp, sp, #28
    _pDisplay = pDisplay;
   2da90:	e5801050 	str	r1, [r0, #80]	; 0x50
    LogWrite("McBase", LOG_DEBUG, "setupDisplay ResX %d ResY %d",
   2da94:	e5903010 	ldr	r3, [r0, #16]
{
   2da98:	e1a04000 	mov	r4, r0
    LogWrite("McBase", LOG_DEBUG, "setupDisplay ResX %d ResY %d",
   2da9c:	e58d2000 	str	r2, [sp]
   2daa0:	e3a01004 	mov	r1, #4
   2daa4:	e59f2060 	ldr	r2, [pc, #96]	; 2db0c <McBase::setupDisplay(DisplayBase*)+0x8c>
   2daa8:	e59f0060 	ldr	r0, [pc, #96]	; 2db10 <McBase::setupDisplay(DisplayBase*)+0x90>
   2daac:	ebffd9b1 	bl	24178 <LogWrite>
    if (!pDisplay)
   2dab0:	e3550000 	cmp	r5, #0
   2dab4:	0a000012 	beq	2db04 <McBase::setupDisplay(DisplayBase*)+0x84>
    pDisplay->targetLayout(
   2dab8:	e5942030 	ldr	r2, [r4, #48]	; 0x30
   2dabc:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   2dac0:	e5941028 	ldr	r1, [r4, #40]	; 0x28
   2dac4:	e5943024 	ldr	r3, [r4, #36]	; 0x24
   2dac8:	e58d2014 	str	r2, [sp, #20]
   2dacc:	e5942020 	ldr	r2, [r4, #32]
   2dad0:	e58d0010 	str	r0, [sp, #16]
   2dad4:	e594c01c 	ldr	ip, [r4, #28]
   2dad8:	e58d100c 	str	r1, [sp, #12]
        _activeDescriptorTable.displayForeground, _activeDescriptorTable.displayBackground);
   2dadc:	e5950000 	ldr	r0, [r5]
    pDisplay->targetLayout(
   2dae0:	e58d3008 	str	r3, [sp, #8]
   2dae4:	e5943018 	ldr	r3, [r4, #24]
   2dae8:	e58d2004 	str	r2, [sp, #4]
   2daec:	e5942014 	ldr	r2, [r4, #20]
   2daf0:	e5941010 	ldr	r1, [r4, #16]
   2daf4:	e58dc000 	str	ip, [sp]
   2daf8:	e5904014 	ldr	r4, [r0, #20]
   2dafc:	e1a00005 	mov	r0, r5
   2db00:	e12fff34 	blx	r4
}
   2db04:	e28dd01c 	add	sp, sp, #28
   2db08:	e8bd8030 	pop	{r4, r5, pc}
   2db0c:	00054be8 	.word	0x00054be8
   2db10:	00054bbc 	.word	0x00054bbc

0002db14 <McBase::McBase(McDescriptorTable*, int)>:
McBase::McBase(McDescriptorTable* pDefaultTables, int numTables)
   2db14:	e59f3034 	ldr	r3, [pc, #52]	; 2db50 <McBase::McBase(McDescriptorTable*, int)+0x3c>
   2db18:	e92d4010 	push	{r4, lr}
   2db1c:	e1a04000 	mov	r4, r0
    _pDefaultDescriptorTables = pDefaultTables;
   2db20:	e5801048 	str	r1, [r0, #72]	; 0x48
    _defaultDescriptorTablesLen = numTables;
   2db24:	e580204c 	str	r2, [r0, #76]	; 0x4c
McBase::McBase(McDescriptorTable* pDefaultTables, int numTables)
   2db28:	e5803000 	str	r3, [r0]
    _activeDescriptorTable = pDefaultTables[0];
   2db2c:	e3a02044 	mov	r2, #68	; 0x44
   2db30:	e2800004 	add	r0, r0, #4
   2db34:	eb007c8b 	bl	4cd68 <memcpy>
    _pDisplay = NULL;
   2db38:	e3a03000 	mov	r3, #0
    McManager::add(this);
   2db3c:	e1a00004 	mov	r0, r4
    _pDisplay = NULL;
   2db40:	e5843050 	str	r3, [r4, #80]	; 0x50
    McManager::add(this);
   2db44:	eb0000e1 	bl	2ded0 <McManager::add(McBase*)>
}
   2db48:	e1a00004 	mov	r0, r4
   2db4c:	e8bd8010 	pop	{r4, pc}
   2db50:	00054b68 	.word	0x00054b68

0002db54 <McBase::service()>:
    virtual void disable() = 0;

    // Service
    virtual void service()
    {
    }
   2db54:	e12fff1e 	bx	lr

0002db58 <McManager::handleWaitInterruptStatic(unsigned long, unsigned long, unsigned long, unsigned long&)>:
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void McManager::handleWaitInterruptStatic(uint32_t addr, uint32_t data, 
        uint32_t flags, uint32_t& retVal)
{
    if (_pCurMachine)
   2db58:	e59fc03c 	ldr	ip, [pc, #60]	; 2db9c <McManager::handleWaitInterruptStatic(unsigned long, unsigned long, unsigned long, unsigned long&)+0x44>
   2db5c:	e59cc000 	ldr	ip, [ip]
   2db60:	e35c0000 	cmp	ip, #0
   2db64:	012fff1e 	bxeq	lr
{
   2db68:	e92d4010 	push	{r4, lr}
   2db6c:	e1a0e003 	mov	lr, r3
   2db70:	e24dd008 	sub	sp, sp, #8
   2db74:	e1a03002 	mov	r3, r2
   2db78:	e1a02001 	mov	r2, r1
   2db7c:	e1a01000 	mov	r1, r0
        _pCurMachine->busAccessCallback(addr, data, flags, retVal);
   2db80:	e59c0000 	ldr	r0, [ip]
   2db84:	e58de000 	str	lr, [sp]
   2db88:	e590403c 	ldr	r4, [r0, #60]	; 0x3c
   2db8c:	e1a0000c 	mov	r0, ip
   2db90:	e12fff34 	blx	r4
   2db94:	e28dd008 	add	sp, sp, #8
   2db98:	e8bd8010 	pop	{r4, pc}
   2db9c:	00074d98 	.word	0x00074d98

0002dba0 <McManager::handleTargetFile(char const*, unsigned char const*, int)>:
{
   2dba0:	e92d4070 	push	{r4, r5, r6, lr}
   2dba4:	e1a04000 	mov	r4, r0
   2dba8:	e1a05001 	mov	r5, r1
    LogWrite(FromMcManager, LOG_DEBUG, "handleTargetFile");
   2dbac:	e59f003c 	ldr	r0, [pc, #60]	; 2dbf0 <McManager::handleTargetFile(char const*, unsigned char const*, int)+0x50>
{
   2dbb0:	e1a06002 	mov	r6, r2
    LogWrite(FromMcManager, LOG_DEBUG, "handleTargetFile");
   2dbb4:	e3a01004 	mov	r1, #4
   2dbb8:	e59f2034 	ldr	r2, [pc, #52]	; 2dbf4 <McManager::handleTargetFile(char const*, unsigned char const*, int)+0x54>
   2dbbc:	ebffd96d 	bl	24178 <LogWrite>
    return _pCurMachine;
   2dbc0:	e59f3030 	ldr	r3, [pc, #48]	; 2dbf8 <McManager::handleTargetFile(char const*, unsigned char const*, int)+0x58>
   2dbc4:	e5930000 	ldr	r0, [r3]
    if (pMc)
   2dbc8:	e3500000 	cmp	r0, #0
   2dbcc:	08bd8070 	popeq	{r4, r5, r6, pc}
        return pMc->fileHandler(rxFileInfo, pData, dataLen);
   2dbd0:	e590c000 	ldr	ip, [r0]
   2dbd4:	e1a03006 	mov	r3, r6
   2dbd8:	e59ce038 	ldr	lr, [ip, #56]	; 0x38
   2dbdc:	e1a02005 	mov	r2, r5
   2dbe0:	e1a01004 	mov	r1, r4
   2dbe4:	e1a0c00e 	mov	ip, lr
}
   2dbe8:	e8bd4070 	pop	{r4, r5, r6, lr}
        return pMc->fileHandler(rxFileInfo, pData, dataLen);
   2dbec:	e12fff1c 	bx	ip
   2dbf0:	00054c08 	.word	0x00054c08
   2dbf4:	00054c14 	.word	0x00054c14
   2dbf8:	00074d98 	.word	0x00074d98

0002dbfc <McManager::init(DisplayBase*)>:
{
   2dbfc:	e92d4070 	push	{r4, r5, r6, lr}
    if (_busSocketId < 0)
   2dc00:	e59f507c 	ldr	r5, [pc, #124]	; 2dc84 <McManager::init(DisplayBase*)+0x88>
    _pDisplay = pDisplay;
   2dc04:	e59f407c 	ldr	r4, [pc, #124]	; 2dc88 <McManager::init(DisplayBase*)+0x8c>
    if (_busSocketId < 0)
   2dc08:	e5953000 	ldr	r3, [r5]
    _pDisplay = pDisplay;
   2dc0c:	e5840004 	str	r0, [r4, #4]
    if (_busSocketId < 0)
   2dc10:	e3530000 	cmp	r3, #0
   2dc14:	ba000016 	blt	2dc74 <McManager::init(DisplayBase*)+0x78>
    if (_commsSocketId < 0)
   2dc18:	e595302c 	ldr	r3, [r5, #44]	; 0x2c
   2dc1c:	e3530000 	cmp	r3, #0
   2dc20:	ba00000f 	blt	2dc64 <McManager::init(DisplayBase*)+0x68>
    new McTerminal();
   2dc24:	e59f0060 	ldr	r0, [pc, #96]	; 2dc8c <McManager::init(DisplayBase*)+0x90>
   2dc28:	eb001e10 	bl	35470 <operator new(unsigned int)>
   2dc2c:	eb000853 	bl	2fd80 <McTerminal::McTerminal()>
    new McTRS80();
   2dc30:	e59f0058 	ldr	r0, [pc, #88]	; 2dc90 <McManager::init(DisplayBase*)+0x94>
   2dc34:	eb001e0d 	bl	35470 <operator new(unsigned int)>
   2dc38:	eb00075b 	bl	2f9ac <McTRS80::McTRS80()>
    new McRobsZ80();
   2dc3c:	e59f0050 	ldr	r0, [pc, #80]	; 2dc94 <McManager::init(DisplayBase*)+0x98>
   2dc40:	eb001e0a 	bl	35470 <operator new(unsigned int)>
   2dc44:	eb000516 	bl	2f0a4 <McRobsZ80::McRobsZ80()>
    new McZXSpectrum();
   2dc48:	e59f0048 	ldr	r0, [pc, #72]	; 2dc98 <McManager::init(DisplayBase*)+0x9c>
   2dc4c:	eb001e07 	bl	35470 <operator new(unsigned int)>
   2dc50:	eb000e73 	bl	31624 <McZXSpectrum::McZXSpectrum()>
    _refreshCount = 0;
   2dc54:	e3a03000 	mov	r3, #0
   2dc58:	e5843008 	str	r3, [r4, #8]
    _refreshLastUpdateUs = 0;
   2dc5c:	e584300c 	str	r3, [r4, #12]
}
   2dc60:	e8bd8070 	pop	{r4, r5, r6, pc}
        _commsSocketId = CommandHandler::commsSocketAdd(_commsSocketInfo);
   2dc64:	e59f0030 	ldr	r0, [pc, #48]	; 2dc9c <McManager::init(DisplayBase*)+0xa0>
   2dc68:	ebffe341 	bl	26974 <CommandHandler::commsSocketAdd(CommsSocketInfo&)>
   2dc6c:	e585002c 	str	r0, [r5, #44]	; 0x2c
   2dc70:	eaffffeb 	b	2dc24 <McManager::init(DisplayBase*)+0x28>
        _busSocketId = BusAccess::busSocketAdd(_busSocketInfo);
   2dc74:	e2850004 	add	r0, r5, #4
   2dc78:	eb002a82 	bl	38688 <BusAccess::busSocketAdd(BusSocketInfo&)>
   2dc7c:	e5850000 	str	r0, [r5]
   2dc80:	eaffffe4 	b	2dc18 <McManager::init(DisplayBase*)+0x1c>
   2dc84:	0006f144 	.word	0x0006f144
   2dc88:	00074d98 	.word	0x00074d98
   2dc8c:	00002f58 	.word	0x00002f58
   2dc90:	00000558 	.word	0x00000558
   2dc94:	00004058 	.word	0x00004058
   2dc98:	00003658 	.word	0x00003658
   2dc9c:	0006f174 	.word	0x0006f174

0002dca0 <McManager::service()>:
}
   2dca0:	e12fff1e 	bx	lr

0002dca4 <McManager::getNumMachines()>:
    return _numMachines;
   2dca4:	e59f3004 	ldr	r3, [pc, #4]	; 2dcb0 <McManager::getNumMachines()+0xc>
}
   2dca8:	e5930010 	ldr	r0, [r3, #16]
   2dcac:	e12fff1e 	bx	lr
   2dcb0:	00074d98 	.word	0x00074d98

0002dcb4 <McManager::getMachine()>:
    return _pCurMachine;
   2dcb4:	e59f3004 	ldr	r3, [pc, #4]	; 2dcc0 <McManager::getMachine()+0xc>
}
   2dcb8:	e5930000 	ldr	r0, [r3]
   2dcbc:	e12fff1e 	bx	lr
   2dcc0:	00074d98 	.word	0x00074d98

0002dcc4 <McManager::getMachineName()>:
}
   2dcc4:	e59f0000 	ldr	r0, [pc]	; 2dccc <McManager::getMachineName()+0x8>
   2dcc8:	e12fff1e 	bx	lr
   2dccc:	0006f184 	.word	0x0006f184

0002dcd0 <McManager::getMachineForFileType(char const*)>:
{
   2dcd0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    for (int i = 0; i < _numMachines; i++)
   2dcd4:	e59f6068 	ldr	r6, [pc, #104]	; 2dd44 <McManager::getMachineForFileType(char const*)+0x74>
   2dcd8:	e5963010 	ldr	r3, [r6, #16]
   2dcdc:	e3530000 	cmp	r3, #0
   2dce0:	da00000f 	ble	2dd24 <McManager::getMachineForFileType(char const*)+0x54>
   2dce4:	e1a07000 	mov	r7, r0
   2dce8:	e3a04000 	mov	r4, #0
   2dcec:	e2865010 	add	r5, r6, #16
        if (_pMachines[i])
   2dcf0:	e5b50004 	ldr	r0, [r5, #4]!
   2dcf4:	e3500000 	cmp	r0, #0
   2dcf8:	0a000006 	beq	2dd18 <McManager::getMachineForFileType(char const*)+0x48>
            if (_pMachines[i]->canProcFileType(fileType))
   2dcfc:	e5903000 	ldr	r3, [r0]
   2dd00:	e1a01007 	mov	r1, r7
   2dd04:	e5933004 	ldr	r3, [r3, #4]
   2dd08:	e12fff33 	blx	r3
   2dd0c:	e3500000 	cmp	r0, #0
   2dd10:	1a000005 	bne	2dd2c <McManager::getMachineForFileType(char const*)+0x5c>
   2dd14:	e5963010 	ldr	r3, [r6, #16]
    for (int i = 0; i < _numMachines; i++)
   2dd18:	e2844001 	add	r4, r4, #1
   2dd1c:	e1540003 	cmp	r4, r3
   2dd20:	bafffff2 	blt	2dcf0 <McManager::getMachineForFileType(char const*)+0x20>
}
   2dd24:	e3a00000 	mov	r0, #0
   2dd28:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
                return _pMachines[i]->getMachineName();
   2dd2c:	e0864104 	add	r4, r6, r4, lsl #2
   2dd30:	e5940014 	ldr	r0, [r4, #20]
}
   2dd34:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
                return _pMachines[i]->getMachineName();
   2dd38:	e5903000 	ldr	r3, [r0]
   2dd3c:	e5933008 	ldr	r3, [r3, #8]
   2dd40:	e12fff13 	bx	r3
   2dd44:	00074d98 	.word	0x00074d98

0002dd48 <McManager::getDescriptorTable()>:
    if (_pCurMachine)
   2dd48:	e59f301c 	ldr	r3, [pc, #28]	; 2dd6c <McManager::getDescriptorTable()+0x24>
   2dd4c:	e5930000 	ldr	r0, [r3]
   2dd50:	e3500000 	cmp	r0, #0
   2dd54:	0a000002 	beq	2dd64 <McManager::getDescriptorTable()+0x1c>
        return _pCurMachine->getDescriptorTable();
   2dd58:	e5903000 	ldr	r3, [r0]
   2dd5c:	e5933014 	ldr	r3, [r3, #20]
   2dd60:	e12fff13 	bx	r3
}
   2dd64:	e59f0004 	ldr	r0, [pc, #4]	; 2dd70 <McManager::getDescriptorTable()+0x28>
   2dd68:	e12fff1e 	bx	lr
   2dd6c:	00074d98 	.word	0x00074d98
   2dd70:	0006f1e8 	.word	0x0006f1e8

0002dd74 <McManager::getMachineJSON()>:
{
   2dd74:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
    strlcpy(mcString, "\"machineList\":[", MAX_MC_JSON_LEN);
   2dd78:	e59f7114 	ldr	r7, [pc, #276]	; 2de94 <McManager::getMachineJSON()+0x120>
{
   2dd7c:	e24ddf4d 	sub	sp, sp, #308	; 0x134
    strlcpy(mcString, "\"machineList\":[", MAX_MC_JSON_LEN);
   2dd80:	e3a02e46 	mov	r2, #1120	; 0x460
   2dd84:	e287003c 	add	r0, r7, #60	; 0x3c
   2dd88:	e59f1108 	ldr	r1, [pc, #264]	; 2de98 <McManager::getMachineJSON()+0x124>
   2dd8c:	eb007e0d 	bl	4d5c8 <strlcpy>
    for (int i = 0; i < getNumMachines(); i++)
   2dd90:	e5973010 	ldr	r3, [r7, #16]
   2dd94:	e3530000 	cmp	r3, #0
   2dd98:	d287903c 	addle	r9, r7, #60	; 0x3c
   2dd9c:	da00001d 	ble	2de18 <McManager::getMachineJSON()+0xa4>
        _pMachines[i]->getMachineNames(mcNamesCommaSep, MAX_MC_NAMES_LEN);
   2dda0:	e5970014 	ldr	r0, [r7, #20]
   2dda4:	e2876018 	add	r6, r7, #24
   2dda8:	e5903000 	ldr	r3, [r0]
   2ddac:	e28d1004 	add	r1, sp, #4
   2ddb0:	e593300c 	ldr	r3, [r3, #12]
   2ddb4:	e3a02f4b 	mov	r2, #300	; 0x12c
   2ddb8:	e2869024 	add	r9, r6, #36	; 0x24
   2ddbc:	e12fff33 	blx	r3
        strlcat(mcString, mcNamesCommaSep, MAX_MC_JSON_LEN);
   2ddc0:	e1a05009 	mov	r5, r9
    for (int i = 0; i < getNumMachines(); i++)
   2ddc4:	e3a04000 	mov	r4, #0
            strlcat(mcString,",", MAX_MC_JSON_LEN);
   2ddc8:	e59f80cc 	ldr	r8, [pc, #204]	; 2de9c <McManager::getMachineJSON()+0x128>
   2ddcc:	ea000009 	b	2ddf8 <McManager::getMachineJSON()+0x84>
        _pMachines[i]->getMachineNames(mcNamesCommaSep, MAX_MC_NAMES_LEN);
   2ddd0:	e4960004 	ldr	r0, [r6], #4
   2ddd4:	e3a02f4b 	mov	r2, #300	; 0x12c
   2ddd8:	e5903000 	ldr	r3, [r0]
   2dddc:	e28d1004 	add	r1, sp, #4
   2dde0:	e593300c 	ldr	r3, [r3, #12]
   2dde4:	e12fff33 	blx	r3
            strlcat(mcString,",", MAX_MC_JSON_LEN);
   2dde8:	e3a02e46 	mov	r2, #1120	; 0x460
   2ddec:	e1a01008 	mov	r1, r8
   2ddf0:	e1a00005 	mov	r0, r5
   2ddf4:	eb007dc3 	bl	4d508 <strlcat>
        strlcat(mcString, mcNamesCommaSep, MAX_MC_JSON_LEN);
   2ddf8:	e3a02e46 	mov	r2, #1120	; 0x460
   2ddfc:	e28d1004 	add	r1, sp, #4
   2de00:	e1a00005 	mov	r0, r5
   2de04:	eb007dbf 	bl	4d508 <strlcat>
    for (int i = 0; i < getNumMachines(); i++)
   2de08:	e5973010 	ldr	r3, [r7, #16]
   2de0c:	e2844001 	add	r4, r4, #1
   2de10:	e1530004 	cmp	r3, r4
   2de14:	caffffed 	bgt	2ddd0 <McManager::getMachineJSON()+0x5c>
    strlcat(mcString,"]", MAX_MC_JSON_LEN);
   2de18:	e3a02e46 	mov	r2, #1120	; 0x460
   2de1c:	e59f107c 	ldr	r1, [pc, #124]	; 2dea0 <McManager::getMachineJSON()+0x12c>
   2de20:	e59f007c 	ldr	r0, [pc, #124]	; 2dea4 <McManager::getMachineJSON()+0x130>
   2de24:	eb007db7 	bl	4d508 <strlcat>
    strlcat(mcString,",\"machineCur\":", MAX_MC_JSON_LEN);
   2de28:	e3a02e46 	mov	r2, #1120	; 0x460
   2de2c:	e59f1074 	ldr	r1, [pc, #116]	; 2dea8 <McManager::getMachineJSON()+0x134>
   2de30:	e59f006c 	ldr	r0, [pc, #108]	; 2dea4 <McManager::getMachineJSON()+0x130>
   2de34:	eb007db3 	bl	4d508 <strlcat>
    strlcat(mcString, "\"", MAX_MC_JSON_LEN);
   2de38:	e3a02e46 	mov	r2, #1120	; 0x460
   2de3c:	e59f1068 	ldr	r1, [pc, #104]	; 2deac <McManager::getMachineJSON()+0x138>
   2de40:	e59f005c 	ldr	r0, [pc, #92]	; 2dea4 <McManager::getMachineJSON()+0x130>
   2de44:	eb007daf 	bl	4d508 <strlcat>
    strlcat(mcString, _currentMachineName, MAX_MC_JSON_LEN);
   2de48:	e3a02e46 	mov	r2, #1120	; 0x460
   2de4c:	e59f105c 	ldr	r1, [pc, #92]	; 2deb0 <McManager::getMachineJSON()+0x13c>
   2de50:	e59f004c 	ldr	r0, [pc, #76]	; 2dea4 <McManager::getMachineJSON()+0x130>
   2de54:	eb007dab 	bl	4d508 <strlcat>
    strlcat(mcString, "\"", MAX_MC_JSON_LEN);
   2de58:	e3a02e46 	mov	r2, #1120	; 0x460
   2de5c:	e59f1048 	ldr	r1, [pc, #72]	; 2deac <McManager::getMachineJSON()+0x138>
   2de60:	e59f003c 	ldr	r0, [pc, #60]	; 2dea4 <McManager::getMachineJSON()+0x130>
   2de64:	eb007da7 	bl	4d508 <strlcat>
    uint32_t actualHz = BusAccess::clockCurFreqHz();
   2de68:	eb002f19 	bl	39ad4 <BusAccess::clockCurFreqHz()>
   2de6c:	e1a04000 	mov	r4, r0
    ee_sprintf(mcString+strlen(mcString), ",\"clockHz\":\"%d\"", actualHz);
   2de70:	e59f002c 	ldr	r0, [pc, #44]	; 2dea4 <McManager::getMachineJSON()+0x130>
   2de74:	eb007de8 	bl	4d61c <strlen>
   2de78:	e1a02004 	mov	r2, r4
   2de7c:	e0890000 	add	r0, r9, r0
   2de80:	e59f102c 	ldr	r1, [pc, #44]	; 2deb4 <McManager::getMachineJSON()+0x140>
   2de84:	ebffd3c8 	bl	22dac <ee_sprintf>
}
   2de88:	e59f0014 	ldr	r0, [pc, #20]	; 2dea4 <McManager::getMachineJSON()+0x130>
   2de8c:	e28ddf4d 	add	sp, sp, #308	; 0x134
   2de90:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   2de94:	00074d98 	.word	0x00074d98
   2de98:	00054c28 	.word	0x00054c28
   2de9c:	000541a0 	.word	0x000541a0
   2dea0:	00054aa8 	.word	0x00054aa8
   2dea4:	00074dd4 	.word	0x00074dd4
   2dea8:	00054c38 	.word	0x00054c38
   2deac:	00053ca4 	.word	0x00053ca4
   2deb0:	0006f184 	.word	0x0006f184
   2deb4:	00054c48 	.word	0x00054c48

0002deb8 <McManager::getMachineClock()>:
    return BusAccess::clockCurFreqHz();
   2deb8:	ea002f05 	b	39ad4 <BusAccess::clockCurFreqHz()>

0002debc <McManager::targetIrq(int)>:
    BusAccess::targetReqIRQ(_busSocketId, durationUs);
   2debc:	e59f3008 	ldr	r3, [pc, #8]	; 2decc <McManager::targetIrq(int)+0x10>
   2dec0:	e1a01000 	mov	r1, r0
   2dec4:	e5930000 	ldr	r0, [r3]
   2dec8:	ea0024e2 	b	37258 <BusAccess::targetReqIRQ(int, int)>
   2decc:	0006f144 	.word	0x0006f144

0002ded0 <McManager::add(McBase*)>:
    if (_numMachines >= MAX_MACHINES)
   2ded0:	e59f2018 	ldr	r2, [pc, #24]	; 2def0 <McManager::add(McBase*)+0x20>
   2ded4:	e5923010 	ldr	r3, [r2, #16]
   2ded8:	e3530009 	cmp	r3, #9
    _pMachines[_numMachines++] = pMachine;
   2dedc:	d2831001 	addle	r1, r3, #1
   2dee0:	d0823103 	addle	r3, r2, r3, lsl #2
   2dee4:	d5821010 	strle	r1, [r2, #16]
   2dee8:	d5830014 	strle	r0, [r3, #20]
}
   2deec:	e12fff1e 	bx	lr
   2def0:	00074d98 	.word	0x00074d98

0002def4 <McManager::setupMachine(char const*)>:
{
   2def4:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   2def8:	e24dd0c8 	sub	sp, sp, #200	; 0xc8
    if (!jsonGetValueForKey("name", mcJson, mcName, MAX_MC_NAME_LEN))
   2defc:	e1a01000 	mov	r1, r0
{
   2df00:	e1a07000 	mov	r7, r0
    if (!jsonGetValueForKey("name", mcJson, mcName, MAX_MC_NAME_LEN))
   2df04:	e1a0200d 	mov	r2, sp
   2df08:	e3a030c8 	mov	r3, #200	; 0xc8
   2df0c:	e59f011c 	ldr	r0, [pc, #284]	; 2e030 <McManager::setupMachine(char const*)+0x13c>
   2df10:	ebffdab5 	bl	249ec <jsonGetValueForKey>
   2df14:	e3500000 	cmp	r0, #0
   2df18:	0a000012 	beq	2df68 <McManager::setupMachine(char const*)+0x74>
    for (int i = 0; i < _numMachines; i++)
   2df1c:	e59f6110 	ldr	r6, [pc, #272]	; 2e034 <McManager::setupMachine(char const*)+0x140>
   2df20:	e5963010 	ldr	r3, [r6, #16]
   2df24:	e3530000 	cmp	r3, #0
   2df28:	da00000e 	ble	2df68 <McManager::setupMachine(char const*)+0x74>
   2df2c:	e3a04000 	mov	r4, #0
   2df30:	e2865010 	add	r5, r6, #16
        if (_pMachines[i])
   2df34:	e5b50004 	ldr	r0, [r5, #4]!
   2df38:	e3500000 	cmp	r0, #0
   2df3c:	0a000006 	beq	2df5c <McManager::setupMachine(char const*)+0x68>
            if (_pMachines[i]->isCalled(mcName))
   2df40:	e5903000 	ldr	r3, [r0]
   2df44:	e1a0100d 	mov	r1, sp
   2df48:	e5933000 	ldr	r3, [r3]
   2df4c:	e12fff33 	blx	r3
   2df50:	e2508000 	subs	r8, r0, #0
   2df54:	1a000007 	bne	2df78 <McManager::setupMachine(char const*)+0x84>
   2df58:	e5963010 	ldr	r3, [r6, #16]
    for (int i = 0; i < _numMachines; i++)
   2df5c:	e2844001 	add	r4, r4, #1
   2df60:	e1540003 	cmp	r4, r3
   2df64:	bafffff2 	blt	2df34 <McManager::setupMachine(char const*)+0x40>
        return false;
   2df68:	e3a08000 	mov	r8, #0
}
   2df6c:	e1a00008 	mov	r0, r8
   2df70:	e28dd0c8 	add	sp, sp, #200	; 0xc8
   2df74:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
                pMc = _pMachines[i];
   2df78:	e0864104 	add	r4, r6, r4, lsl #2
   2df7c:	e5944014 	ldr	r4, [r4, #20]
    if (!pMc)
   2df80:	e3540000 	cmp	r4, #0
   2df84:	0afffff7 	beq	2df68 <McManager::setupMachine(char const*)+0x74>
    BusAccess::waitOnIO(_busSocketId, false);
   2df88:	e59f50a8 	ldr	r5, [pc, #168]	; 2e038 <McManager::setupMachine(char const*)+0x144>
   2df8c:	e3a01000 	mov	r1, #0
   2df90:	e5950000 	ldr	r0, [r5]
    _pCurMachine = pMc;
   2df94:	e5864000 	str	r4, [r6]
    BusAccess::waitOnIO(_busSocketId, false);
   2df98:	eb002411 	bl	36fe4 <BusAccess::waitOnIO(int, bool)>
    BusAccess::waitOnMemory(_busSocketId, false);
   2df9c:	e5950000 	ldr	r0, [r5]
   2dfa0:	e3a01000 	mov	r1, #0
   2dfa4:	eb002403 	bl	36fb8 <BusAccess::waitOnMemory(int, bool)>
    strlcpy(_currentMachineName, mcName, MAX_MACHINE_NAME_LEN);
   2dfa8:	e3a02064 	mov	r2, #100	; 0x64
   2dfac:	e1a0100d 	mov	r1, sp
   2dfb0:	e2850040 	add	r0, r5, #64	; 0x40
   2dfb4:	eb007d83 	bl	4d5c8 <strlcpy>
    pMc->setupDisplay(_pDisplay);
   2dfb8:	e5943000 	ldr	r3, [r4]
   2dfbc:	e5961004 	ldr	r1, [r6, #4]
   2dfc0:	e1a00004 	mov	r0, r4
   2dfc4:	e5933024 	ldr	r3, [r3, #36]	; 0x24
   2dfc8:	e12fff33 	blx	r3
    pMc->setupMachine(mcName, mcJson);
   2dfcc:	e5943000 	ldr	r3, [r4]
   2dfd0:	e1a02007 	mov	r2, r7
   2dfd4:	e1a0100d 	mov	r1, sp
   2dfd8:	e5933010 	ldr	r3, [r3, #16]
   2dfdc:	e1a00004 	mov	r0, r4
   2dfe0:	e12fff33 	blx	r3
    BusAccess::waitOnIO(_busSocketId, _pCurMachine->getDescriptorTable()->monitorIORQ);
   2dfe4:	e5960000 	ldr	r0, [r6]
   2dfe8:	e5954000 	ldr	r4, [r5]
   2dfec:	e5903000 	ldr	r3, [r0]
   2dff0:	e5933014 	ldr	r3, [r3, #20]
   2dff4:	e12fff33 	blx	r3
   2dff8:	e5d0103c 	ldrb	r1, [r0, #60]	; 0x3c
   2dffc:	e1a00004 	mov	r0, r4
   2e000:	eb0023f7 	bl	36fe4 <BusAccess::waitOnIO(int, bool)>
    BusAccess::waitOnMemory(_busSocketId, _pCurMachine->getDescriptorTable()->monitorMREQ);
   2e004:	e5960000 	ldr	r0, [r6]
   2e008:	e5954000 	ldr	r4, [r5]
   2e00c:	e5903000 	ldr	r3, [r0]
   2e010:	e5933014 	ldr	r3, [r3, #20]
   2e014:	e12fff33 	blx	r3
   2e018:	e5d0103d 	ldrb	r1, [r0, #61]	; 0x3d
   2e01c:	e1a00004 	mov	r0, r4
   2e020:	eb0023e4 	bl	36fb8 <BusAccess::waitOnMemory(int, bool)>
}
   2e024:	e1a00008 	mov	r0, r8
   2e028:	e28dd0c8 	add	sp, sp, #200	; 0xc8
   2e02c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   2e030:	00054b04 	.word	0x00054b04
   2e034:	00074d98 	.word	0x00074d98
   2e038:	0006f144 	.word	0x0006f144

0002e03c <McManager::setMachineByName(char const*)>:
{
   2e03c:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   2e040:	e24dd0cc 	sub	sp, sp, #204	; 0xcc
    ee_sprintf(mcJson, "\"name\":\"%s\"", mcName);
   2e044:	e1a02000 	mov	r2, r0
   2e048:	e59f1014 	ldr	r1, [pc, #20]	; 2e064 <McManager::setMachineByName(char const*)+0x28>
   2e04c:	e1a0000d 	mov	r0, sp
   2e050:	ebffd355 	bl	22dac <ee_sprintf>
    return McManager::setupMachine(mcJson);
   2e054:	e1a0000d 	mov	r0, sp
   2e058:	ebffffa5 	bl	2def4 <McManager::setupMachine(char const*)>
}
   2e05c:	e28dd0cc 	add	sp, sp, #204	; 0xcc
   2e060:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
   2e064:	00054c58 	.word	0x00054c58

0002e068 <McManager::handleRxMsg(char const*, unsigned char const*, int, char*, int)>:
{
   2e068:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
   2e06c:	e24ddf69 	sub	sp, sp, #420	; 0x1a4
   2e070:	e1a05000 	mov	r5, r0
   2e074:	e1a08001 	mov	r8, r1
   2e078:	e1a07002 	mov	r7, r2
    if (!jsonGetValueForKey("cmdName", pCmdJson, cmdName, MAX_CMD_NAME_STR))
   2e07c:	e1a01000 	mov	r1, r0
{
   2e080:	e1a06003 	mov	r6, r3
    if (!jsonGetValueForKey("cmdName", pCmdJson, cmdName, MAX_CMD_NAME_STR))
   2e084:	e28d20d4 	add	r2, sp, #212	; 0xd4
   2e088:	e3a030c8 	mov	r3, #200	; 0xc8
   2e08c:	e59f02f8 	ldr	r0, [pc, #760]	; 2e38c <McManager::handleRxMsg(char const*, unsigned char const*, int, char*, int)+0x324>
   2e090:	ebffda55 	bl	249ec <jsonGetValueForKey>
   2e094:	e2504000 	subs	r4, r0, #0
   2e098:	0a00003c 	beq	2e190 <McManager::handleRxMsg(char const*, unsigned char const*, int, char*, int)+0x128>
    pRespJson[0] = 0;
   2e09c:	e3a03000 	mov	r3, #0
    if (strcasecmp(cmdName, "ClearTarget") == 0)
   2e0a0:	e59f12e8 	ldr	r1, [pc, #744]	; 2e390 <McManager::handleRxMsg(char const*, unsigned char const*, int, char*, int)+0x328>
    pRespJson[0] = 0;
   2e0a4:	e5c63000 	strb	r3, [r6]
    if (strcasecmp(cmdName, "ClearTarget") == 0)
   2e0a8:	e28d00d4 	add	r0, sp, #212	; 0xd4
   2e0ac:	eb007bb6 	bl	4cf8c <strcasecmp>
   2e0b0:	e3500000 	cmp	r0, #0
   2e0b4:	0a000039 	beq	2e1a0 <McManager::handleRxMsg(char const*, unsigned char const*, int, char*, int)+0x138>
    else if (strcasecmp(cmdName, "ProgramTarget") == 0)
   2e0b8:	e59f12d4 	ldr	r1, [pc, #724]	; 2e394 <McManager::handleRxMsg(char const*, unsigned char const*, int, char*, int)+0x32c>
   2e0bc:	e28d00d4 	add	r0, sp, #212	; 0xd4
   2e0c0:	eb007bb1 	bl	4cf8c <strcasecmp>
   2e0c4:	e2509000 	subs	r9, r0, #0
   2e0c8:	0a000053 	beq	2e21c <McManager::handleRxMsg(char const*, unsigned char const*, int, char*, int)+0x1b4>
    else if ((strcasecmp(cmdName, "ProgramAndReset") == 0) ||
   2e0cc:	e59f12c4 	ldr	r1, [pc, #708]	; 2e398 <McManager::handleRxMsg(char const*, unsigned char const*, int, char*, int)+0x330>
   2e0d0:	e28d00d4 	add	r0, sp, #212	; 0xd4
   2e0d4:	eb007bac 	bl	4cf8c <strcasecmp>
   2e0d8:	e3500000 	cmp	r0, #0
   2e0dc:	0a000037 	beq	2e1c0 <McManager::handleRxMsg(char const*, unsigned char const*, int, char*, int)+0x158>
            (strcasecmp(cmdName, "ProgramAndExec") == 0))
   2e0e0:	e59f12b4 	ldr	r1, [pc, #692]	; 2e39c <McManager::handleRxMsg(char const*, unsigned char const*, int, char*, int)+0x334>
   2e0e4:	e28d00d4 	add	r0, sp, #212	; 0xd4
   2e0e8:	eb007ba7 	bl	4cf8c <strcasecmp>
    else if ((strcasecmp(cmdName, "ProgramAndReset") == 0) ||
   2e0ec:	e3500000 	cmp	r0, #0
   2e0f0:	0a000032 	beq	2e1c0 <McManager::handleRxMsg(char const*, unsigned char const*, int, char*, int)+0x158>
    else if (strcasecmp(cmdName, "ResetTarget") == 0)
   2e0f4:	e59f12a4 	ldr	r1, [pc, #676]	; 2e3a0 <McManager::handleRxMsg(char const*, unsigned char const*, int, char*, int)+0x338>
   2e0f8:	e28d00d4 	add	r0, sp, #212	; 0xd4
   2e0fc:	eb007ba2 	bl	4cf8c <strcasecmp>
   2e100:	e3500000 	cmp	r0, #0
   2e104:	0a000061 	beq	2e290 <McManager::handleRxMsg(char const*, unsigned char const*, int, char*, int)+0x228>
    else if ((strcasecmp(cmdName, "FileTarget") == 0) || ((strcasecmp(cmdName, "SRECTarget") == 0)))
   2e108:	e59f1294 	ldr	r1, [pc, #660]	; 2e3a4 <McManager::handleRxMsg(char const*, unsigned char const*, int, char*, int)+0x33c>
   2e10c:	e28d00d4 	add	r0, sp, #212	; 0xd4
   2e110:	eb007b9d 	bl	4cf8c <strcasecmp>
   2e114:	e3500000 	cmp	r0, #0
   2e118:	0a00004b 	beq	2e24c <McManager::handleRxMsg(char const*, unsigned char const*, int, char*, int)+0x1e4>
   2e11c:	e59f1284 	ldr	r1, [pc, #644]	; 2e3a8 <McManager::handleRxMsg(char const*, unsigned char const*, int, char*, int)+0x340>
   2e120:	e28d00d4 	add	r0, sp, #212	; 0xd4
   2e124:	eb007b98 	bl	4cf8c <strcasecmp>
   2e128:	e3500000 	cmp	r0, #0
   2e12c:	0a000046 	beq	2e24c <McManager::handleRxMsg(char const*, unsigned char const*, int, char*, int)+0x1e4>
    else if (strncasecmp(cmdName, "SetMachine", strlen("SetMachine")) == 0)
   2e130:	e3a0200a 	mov	r2, #10
   2e134:	e59f1270 	ldr	r1, [pc, #624]	; 2e3ac <McManager::handleRxMsg(char const*, unsigned char const*, int, char*, int)+0x344>
   2e138:	e28d00d4 	add	r0, sp, #212	; 0xd4
   2e13c:	eb007d4e 	bl	4d67c <strncasecmp>
   2e140:	e3500000 	cmp	r0, #0
   2e144:	1a00005a 	bne	2e2b4 <McManager::handleRxMsg(char const*, unsigned char const*, int, char*, int)+0x24c>
        const char* pMcName = strstr(cmdName,"=");
   2e148:	e28d00d4 	add	r0, sp, #212	; 0xd4
   2e14c:	e3a0103d 	mov	r1, #61	; 0x3d
   2e150:	eb007bc6 	bl	4d070 <strchr>
        if (pMcName)
   2e154:	e3500000 	cmp	r0, #0
   2e158:	0a000023 	beq	2e1ec <McManager::handleRxMsg(char const*, unsigned char const*, int, char*, int)+0x184>
            pMcName++;
   2e15c:	e2805001 	add	r5, r0, #1
    ee_sprintf(mcJson, "\"name\":\"%s\"", mcName);
   2e160:	e1a02005 	mov	r2, r5
   2e164:	e59f1244 	ldr	r1, [pc, #580]	; 2e3b0 <McManager::handleRxMsg(char const*, unsigned char const*, int, char*, int)+0x348>
   2e168:	e28d000c 	add	r0, sp, #12
   2e16c:	ebffd30e 	bl	22dac <ee_sprintf>
    return McManager::setupMachine(mcJson);
   2e170:	e28d000c 	add	r0, sp, #12
   2e174:	ebffff5e 	bl	2def4 <McManager::setupMachine(char const*)>
            LogWrite(FromMcManager, LOG_VERBOSE, "Set Machine to %s", pMcName);
   2e178:	e1a03005 	mov	r3, r5
   2e17c:	e59f2230 	ldr	r2, [pc, #560]	; 2e3b4 <McManager::handleRxMsg(char const*, unsigned char const*, int, char*, int)+0x34c>
   2e180:	e3a01005 	mov	r1, #5
   2e184:	e59f022c 	ldr	r0, [pc, #556]	; 2e3b8 <McManager::handleRxMsg(char const*, unsigned char const*, int, char*, int)+0x350>
   2e188:	ebffd7fa 	bl	24178 <LogWrite>
   2e18c:	ea000016 	b	2e1ec <McManager::handleRxMsg(char const*, unsigned char const*, int, char*, int)+0x184>
        return false;
   2e190:	e3a04000 	mov	r4, #0
}
   2e194:	e1a00004 	mov	r0, r4
   2e198:	e28ddf69 	add	sp, sp, #420	; 0x1a4
   2e19c:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
        TargetState::clear();
   2e1a0:	eb003198 	bl	3a808 <TargetState::clear()>
        strlcpy(pRespJson, "\"err\":\"ok\"", maxRespLen);
   2e1a4:	e59d21c0 	ldr	r2, [sp, #448]	; 0x1c0
   2e1a8:	e1a00006 	mov	r0, r6
   2e1ac:	e59f1208 	ldr	r1, [pc, #520]	; 2e3bc <McManager::handleRxMsg(char const*, unsigned char const*, int, char*, int)+0x354>
   2e1b0:	eb007d04 	bl	4d5c8 <strlcpy>
}
   2e1b4:	e1a00004 	mov	r0, r4
   2e1b8:	e28ddf69 	add	sp, sp, #420	; 0x1a4
   2e1bc:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
    if (TargetState::numMemoryBlocks() == 0) 
   2e1c0:	eb0031dd 	bl	3a93c <TargetState::numMemoryBlocks()>
   2e1c4:	e3500000 	cmp	r0, #0
   2e1c8:	0a00000e 	beq	2e208 <McManager::handleRxMsg(char const*, unsigned char const*, int, char*, int)+0x1a0>
        BusAccess::targetReqBus(_busSocketId, BR_BUS_ACTION_PROGRAMMING);
   2e1cc:	e59f31ec 	ldr	r3, [pc, #492]	; 2e3c0 <McManager::handleRxMsg(char const*, unsigned char const*, int, char*, int)+0x358>
   2e1d0:	e3a01002 	mov	r1, #2
   2e1d4:	e5930000 	ldr	r0, [r3]
   2e1d8:	eb00242d 	bl	37294 <BusAccess::targetReqBus(int, BR_BUS_ACTION_REASON)>
        _busActionPendingProgramTarget = true;
   2e1dc:	e3a02001 	mov	r2, #1
   2e1e0:	e59f31dc 	ldr	r3, [pc, #476]	; 2e3c4 <McManager::handleRxMsg(char const*, unsigned char const*, int, char*, int)+0x35c>
   2e1e4:	e5c3249d 	strb	r2, [r3, #1181]	; 0x49d
        _busActionPendingExecAfterProgram = execAfterProgramming;
   2e1e8:	e5c3249e 	strb	r2, [r3, #1182]	; 0x49e
        strlcpy(pRespJson, "\"err\":\"ok\"", maxRespLen);
   2e1ec:	e1a00006 	mov	r0, r6
   2e1f0:	e59d21c0 	ldr	r2, [sp, #448]	; 0x1c0
   2e1f4:	e59f11c0 	ldr	r1, [pc, #448]	; 2e3bc <McManager::handleRxMsg(char const*, unsigned char const*, int, char*, int)+0x354>
   2e1f8:	eb007cf2 	bl	4d5c8 <strlcpy>
}
   2e1fc:	e1a00004 	mov	r0, r4
   2e200:	e28ddf69 	add	sp, sp, #420	; 0x1a4
   2e204:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
        LogWrite(FromMcManager, LOG_DEBUG, "ProgramTarget - nothing to write");
   2e208:	e59f21b8 	ldr	r2, [pc, #440]	; 2e3c8 <McManager::handleRxMsg(char const*, unsigned char const*, int, char*, int)+0x360>
   2e20c:	e3a01004 	mov	r1, #4
   2e210:	e59f01a0 	ldr	r0, [pc, #416]	; 2e3b8 <McManager::handleRxMsg(char const*, unsigned char const*, int, char*, int)+0x350>
   2e214:	ebffd7d7 	bl	24178 <LogWrite>
   2e218:	eafffff3 	b	2e1ec <McManager::handleRxMsg(char const*, unsigned char const*, int, char*, int)+0x184>
    if (TargetState::numMemoryBlocks() == 0) 
   2e21c:	eb0031c6 	bl	3a93c <TargetState::numMemoryBlocks()>
   2e220:	e3500000 	cmp	r0, #0
   2e224:	0afffff7 	beq	2e208 <McManager::handleRxMsg(char const*, unsigned char const*, int, char*, int)+0x1a0>
        BusAccess::targetReqBus(_busSocketId, BR_BUS_ACTION_PROGRAMMING);
   2e228:	e59f3190 	ldr	r3, [pc, #400]	; 2e3c0 <McManager::handleRxMsg(char const*, unsigned char const*, int, char*, int)+0x358>
   2e22c:	e3a01002 	mov	r1, #2
   2e230:	e5930000 	ldr	r0, [r3]
   2e234:	eb002416 	bl	37294 <BusAccess::targetReqBus(int, BR_BUS_ACTION_REASON)>
        _busActionPendingProgramTarget = true;
   2e238:	e3a02001 	mov	r2, #1
   2e23c:	e59f3180 	ldr	r3, [pc, #384]	; 2e3c4 <McManager::handleRxMsg(char const*, unsigned char const*, int, char*, int)+0x35c>
   2e240:	e5c3249d 	strb	r2, [r3, #1181]	; 0x49d
        _busActionPendingExecAfterProgram = execAfterProgramming;
   2e244:	e5c3949e 	strb	r9, [r3, #1182]	; 0x49e
   2e248:	eaffffe7 	b	2e1ec <McManager::handleRxMsg(char const*, unsigned char const*, int, char*, int)+0x184>
        LogWrite(FromMcManager, LOG_DEBUG, "File to Target, len %d, json %s", paramsLen, pCmdJson);
   2e24c:	e1a03007 	mov	r3, r7
   2e250:	e59f0160 	ldr	r0, [pc, #352]	; 2e3b8 <McManager::handleRxMsg(char const*, unsigned char const*, int, char*, int)+0x350>
   2e254:	e58d5000 	str	r5, [sp]
   2e258:	e59f216c 	ldr	r2, [pc, #364]	; 2e3cc <McManager::handleRxMsg(char const*, unsigned char const*, int, char*, int)+0x364>
   2e25c:	e3a01004 	mov	r1, #4
   2e260:	ebffd7c4 	bl	24178 <LogWrite>
    return _pCurMachine;
   2e264:	e59f3158 	ldr	r3, [pc, #344]	; 2e3c4 <McManager::handleRxMsg(char const*, unsigned char const*, int, char*, int)+0x35c>
   2e268:	e5930000 	ldr	r0, [r3]
        if (pMc)
   2e26c:	e3500000 	cmp	r0, #0
   2e270:	0affffdd 	beq	2e1ec <McManager::handleRxMsg(char const*, unsigned char const*, int, char*, int)+0x184>
            pMc->fileHandler(pCmdJson, pParams, paramsLen);
   2e274:	e590c000 	ldr	ip, [r0]
   2e278:	e1a01005 	mov	r1, r5
   2e27c:	e1a03007 	mov	r3, r7
   2e280:	e1a02008 	mov	r2, r8
   2e284:	e59c5038 	ldr	r5, [ip, #56]	; 0x38
   2e288:	e12fff35 	blx	r5
   2e28c:	eaffffd6 	b	2e1ec <McManager::handleRxMsg(char const*, unsigned char const*, int, char*, int)+0x184>
    BusAccess::targetReqReset(_busSocketId);
   2e290:	e59f3128 	ldr	r3, [pc, #296]	; 2e3c0 <McManager::handleRxMsg(char const*, unsigned char const*, int, char*, int)+0x358>
   2e294:	e3e01000 	mvn	r1, #0
   2e298:	e5930000 	ldr	r0, [r3]
   2e29c:	eb0023c6 	bl	371bc <BusAccess::targetReqReset(int, int)>
        strlcpy(pRespJson, "\"err\":\"ok\"", maxRespLen);
   2e2a0:	e59d21c0 	ldr	r2, [sp, #448]	; 0x1c0
   2e2a4:	e1a00006 	mov	r0, r6
   2e2a8:	e59f110c 	ldr	r1, [pc, #268]	; 2e3bc <McManager::handleRxMsg(char const*, unsigned char const*, int, char*, int)+0x354>
   2e2ac:	eb007cc5 	bl	4d5c8 <strlcpy>
        return true;
   2e2b0:	eaffffb7 	b	2e194 <McManager::handleRxMsg(char const*, unsigned char const*, int, char*, int)+0x12c>
    else if (strcasecmp(cmdName, "SetMcJson") == 0)
   2e2b4:	e59f1114 	ldr	r1, [pc, #276]	; 2e3d0 <McManager::handleRxMsg(char const*, unsigned char const*, int, char*, int)+0x368>
   2e2b8:	e28d00d4 	add	r0, sp, #212	; 0xd4
   2e2bc:	eb007b32 	bl	4cf8c <strcasecmp>
   2e2c0:	e3500000 	cmp	r0, #0
   2e2c4:	1a000015 	bne	2e320 <McManager::handleRxMsg(char const*, unsigned char const*, int, char*, int)+0x2b8>
        strlcpy(mcJson, (const char*)pParams, toCopy);
   2e2c8:	e59f3104 	ldr	r3, [pc, #260]	; 2e3d4 <McManager::handleRxMsg(char const*, unsigned char const*, int, char*, int)+0x36c>
        size_t toCopy = paramsLen+1;
   2e2cc:	e2872001 	add	r2, r7, #1
        strlcpy(mcJson, (const char*)pParams, toCopy);
   2e2d0:	e1520003 	cmp	r2, r3
   2e2d4:	21a02003 	movcs	r2, r3
   2e2d8:	e1a01008 	mov	r1, r8
   2e2dc:	e59f00f4 	ldr	r0, [pc, #244]	; 2e3d8 <McManager::handleRxMsg(char const*, unsigned char const*, int, char*, int)+0x370>
   2e2e0:	eb007cb8 	bl	4d5c8 <strlcpy>
        LogWrite(FromMcManager, LOG_DEBUG, "Set Machine json to %s", mcJson);
   2e2e4:	e3a01004 	mov	r1, #4
   2e2e8:	e59f30e8 	ldr	r3, [pc, #232]	; 2e3d8 <McManager::handleRxMsg(char const*, unsigned char const*, int, char*, int)+0x370>
   2e2ec:	e59f20e8 	ldr	r2, [pc, #232]	; 2e3dc <McManager::handleRxMsg(char const*, unsigned char const*, int, char*, int)+0x374>
   2e2f0:	e59f00c0 	ldr	r0, [pc, #192]	; 2e3b8 <McManager::handleRxMsg(char const*, unsigned char const*, int, char*, int)+0x350>
   2e2f4:	ebffd79f 	bl	24178 <LogWrite>
        bool setupOk = setupMachine(mcJson);
   2e2f8:	e59f00d8 	ldr	r0, [pc, #216]	; 2e3d8 <McManager::handleRxMsg(char const*, unsigned char const*, int, char*, int)+0x370>
   2e2fc:	ebfffefc 	bl	2def4 <McManager::setupMachine(char const*)>
        if (setupOk)
   2e300:	e2503000 	subs	r3, r0, #0
            strlcpy(pRespJson, "\"err\":\"ok\"", maxRespLen);
   2e304:	e59d21c0 	ldr	r2, [sp, #448]	; 0x1c0
   2e308:	e1a00006 	mov	r0, r6
   2e30c:	159f10a8 	ldrne	r1, [pc, #168]	; 2e3bc <McManager::handleRxMsg(char const*, unsigned char const*, int, char*, int)+0x354>
            strlcpy(pRespJson, "\"err\":\"fail\"", maxRespLen);
   2e310:	059f10c8 	ldreq	r1, [pc, #200]	; 2e3e0 <McManager::handleRxMsg(char const*, unsigned char const*, int, char*, int)+0x378>
        return true;
   2e314:	11a04003 	movne	r4, r3
            strlcpy(pRespJson, "\"err\":\"fail\"", maxRespLen);
   2e318:	eb007caa 	bl	4d5c8 <strlcpy>
   2e31c:	eaffff9c 	b	2e194 <McManager::handleRxMsg(char const*, unsigned char const*, int, char*, int)+0x12c>
    else if (strcasecmp(cmdName, "RxHost") == 0)
   2e320:	e28d00d4 	add	r0, sp, #212	; 0xd4
   2e324:	e59f10b8 	ldr	r1, [pc, #184]	; 2e3e4 <McManager::handleRxMsg(char const*, unsigned char const*, int, char*, int)+0x37c>
   2e328:	eb007b17 	bl	4cf8c <strcasecmp>
   2e32c:	e2503000 	subs	r3, r0, #0
   2e330:	1affff96 	bne	2e190 <McManager::handleRxMsg(char const*, unsigned char const*, int, char*, int)+0x128>
    if (rxLen + _rxHostCharsBufferLen >= MAX_RX_HOST_CHARS)
   2e334:	e59f5088 	ldr	r5, [pc, #136]	; 2e3c4 <McManager::handleRxMsg(char const*, unsigned char const*, int, char*, int)+0x35c>
   2e338:	e59f20a8 	ldr	r2, [pc, #168]	; 2e3e8 <McManager::handleRxMsg(char const*, unsigned char const*, int, char*, int)+0x380>
   2e33c:	e59504a0 	ldr	r0, [r5, #1184]	; 0x4a0
   2e340:	e0876000 	add	r6, r7, r0
   2e344:	e1560002 	cmp	r6, r2
   2e348:	ca000009 	bgt	2e374 <McManager::handleRxMsg(char const*, unsigned char const*, int, char*, int)+0x30c>
    memcpy(_rxHostCharsBuffer+_rxHostCharsBufferLen, pRxChars, rxLen);
   2e34c:	e59f3098 	ldr	r3, [pc, #152]	; 2e3ec <McManager::handleRxMsg(char const*, unsigned char const*, int, char*, int)+0x384>
   2e350:	e1a02007 	mov	r2, r7
   2e354:	e0830000 	add	r0, r3, r0
   2e358:	e1a01008 	mov	r1, r8
   2e35c:	eb007a81 	bl	4cd68 <memcpy>
    *(_rxHostCharsBuffer+_rxHostCharsBufferLen) = 0;
   2e360:	e3a02000 	mov	r2, #0
   2e364:	e0853006 	add	r3, r5, r6
    _rxHostCharsBufferLen += rxLen;
   2e368:	e58564a0 	str	r6, [r5, #1184]	; 0x4a0
    *(_rxHostCharsBuffer+_rxHostCharsBufferLen) = 0;
   2e36c:	e5c324a4 	strb	r2, [r3, #1188]	; 0x4a4
   2e370:	eaffff87 	b	2e194 <McManager::handleRxMsg(char const*, unsigned char const*, int, char*, int)+0x12c>
    if (rxLen + _rxHostCharsBufferLen >= MAX_RX_HOST_CHARS)
   2e374:	e1570002 	cmp	r7, r2
        _rxHostCharsBufferLen = 0;
   2e378:	e58534a0 	str	r3, [r5, #1184]	; 0x4a0
    if (rxLen + _rxHostCharsBufferLen >= MAX_RX_HOST_CHARS)
   2e37c:	caffff84 	bgt	2e194 <McManager::handleRxMsg(char const*, unsigned char const*, int, char*, int)+0x12c>
   2e380:	e1a00003 	mov	r0, r3
   2e384:	e1a06007 	mov	r6, r7
   2e388:	eaffffef 	b	2e34c <McManager::handleRxMsg(char const*, unsigned char const*, int, char*, int)+0x2e4>
   2e38c:	00053b5c 	.word	0x00053b5c
   2e390:	00054c64 	.word	0x00054c64
   2e394:	00054c70 	.word	0x00054c70
   2e398:	00054ca4 	.word	0x00054ca4
   2e39c:	00054cb4 	.word	0x00054cb4
   2e3a0:	00054cc4 	.word	0x00054cc4
   2e3a4:	00054cd0 	.word	0x00054cd0
   2e3a8:	00054cdc 	.word	0x00054cdc
   2e3ac:	00054d08 	.word	0x00054d08
   2e3b0:	00054c58 	.word	0x00054c58
   2e3b4:	00054d14 	.word	0x00054d14
   2e3b8:	00054c08 	.word	0x00054c08
   2e3bc:	00053bc4 	.word	0x00053bc4
   2e3c0:	0006f144 	.word	0x0006f144
   2e3c4:	00074d98 	.word	0x00074d98
   2e3c8:	00054c80 	.word	0x00054c80
   2e3cc:	00054ce8 	.word	0x00054ce8
   2e3d0:	00054d28 	.word	0x00054d28
   2e3d4:	00002710 	.word	0x00002710
   2e3d8:	00075a1c 	.word	0x00075a1c
   2e3dc:	00054d34 	.word	0x00054d34
   2e3e0:	00054d4c 	.word	0x00054d4c
   2e3e4:	00054d5c 	.word	0x00054d5c
   2e3e8:	000007cf 	.word	0x000007cf
   2e3ec:	0007523c 	.word	0x0007523c

0002e3f0 <McManager::displayRefresh()>:
{
   2e3f0:	e92d4070 	push	{r4, r5, r6, lr}
    if (!_pCurMachine)
   2e3f4:	e59f416c 	ldr	r4, [pc, #364]	; 2e568 <McManager::displayRefresh()+0x178>
   2e3f8:	e5940000 	ldr	r0, [r4]
   2e3fc:	e3500000 	cmp	r0, #0
   2e400:	08bd8070 	popeq	{r4, r5, r6, pc}
        return _pCurMachine->getDescriptorTable();
   2e404:	e5903000 	ldr	r3, [r0]
   2e408:	e5933014 	ldr	r3, [r3, #20]
   2e40c:	e12fff33 	blx	r3
    unsigned long reqUpdateUs = 1000000 / getDescriptorTable()->displayRefreshRatePerSec;
   2e410:	e5901008 	ldr	r1, [r0, #8]
   2e414:	e59f0150 	ldr	r0, [pc, #336]	; 2e56c <McManager::displayRefresh()+0x17c>
   2e418:	eb0081aa 	bl	4eac8 <__divsi3>
   2e41c:	e1a05000 	mov	r5, r0
    if (TargetTracker::isTrackingActive())
   2e420:	eb0031f1 	bl	3abec <TargetTracker::isTrackingActive()>
   2e424:	e3500000 	cmp	r0, #0
        reqUpdateUs = 10 * reqUpdateUs;
   2e428:	10855105 	addne	r5, r5, r5, lsl #2
   2e42c:	11a05085 	lslne	r5, r5, #1
    if (isTimeout(micros(), _refreshLastUpdateUs, reqUpdateUs)) 
   2e430:	eb0020d8 	bl	36798 <micros>
   2e434:	e1a02005 	mov	r2, r5
   2e438:	e594100c 	ldr	r1, [r4, #12]
   2e43c:	eb0020ea 	bl	367ec <isTimeout>
   2e440:	e3500000 	cmp	r0, #0
   2e444:	1a000016 	bne	2e4a4 <McManager::displayRefresh()+0xb4>
   2e448:	e5940000 	ldr	r0, [r4]
   2e44c:	e5903000 	ldr	r3, [r0]
    _pCurMachine->service();
   2e450:	e5933020 	ldr	r3, [r3, #32]
   2e454:	e12fff33 	blx	r3
    if (isTimeout(micros(), _refreshLastCountResetUs, REFRESH_RATE_WINDOW_SIZE_MS * 1000))
   2e458:	eb0020ce 	bl	36798 <micros>
   2e45c:	e59f2108 	ldr	r2, [pc, #264]	; 2e56c <McManager::displayRefresh()+0x17c>
   2e460:	e5941c78 	ldr	r1, [r4, #3192]	; 0xc78
   2e464:	eb0020e0 	bl	367ec <isTimeout>
   2e468:	e3500000 	cmp	r0, #0
   2e46c:	08bd8070 	popeq	{r4, r5, r6, pc}
        _refreshCount = 0;
   2e470:	e3a01000 	mov	r1, #0
        _refreshRate = _refreshCount * 1000 / REFRESH_RATE_WINDOW_SIZE_MS;
   2e474:	e5943008 	ldr	r3, [r4, #8]
   2e478:	e59f00f0 	ldr	r0, [pc, #240]	; 2e570 <McManager::displayRefresh()+0x180>
   2e47c:	e0632283 	rsb	r2, r3, r3, lsl #5
   2e480:	e0832102 	add	r2, r3, r2, lsl #2
   2e484:	e1a02182 	lsl	r2, r2, #3
   2e488:	e0832092 	umull	r2, r3, r2, r0
   2e48c:	e1a03323 	lsr	r3, r3, #6
   2e490:	e5843c7c 	str	r3, [r4, #3196]	; 0xc7c
        _refreshCount = 0;
   2e494:	e5841008 	str	r1, [r4, #8]
        _refreshLastCountResetUs = micros();
   2e498:	eb0020be 	bl	36798 <micros>
   2e49c:	e5840c78 	str	r0, [r4, #3192]	; 0xc78
}
   2e4a0:	e8bd8070 	pop	{r4, r5, r6, pc}
        _refreshLastUpdateUs = micros();
   2e4a4:	eb0020bb 	bl	36798 <micros>
        _refreshCount++;
   2e4a8:	e5943008 	ldr	r3, [r4, #8]
    if (_pCurMachine)
   2e4ac:	e5942000 	ldr	r2, [r4]
        _refreshCount++;
   2e4b0:	e2833001 	add	r3, r3, #1
    if (_pCurMachine)
   2e4b4:	e3520000 	cmp	r2, #0
        _refreshLastUpdateUs = micros();
   2e4b8:	e584000c 	str	r0, [r4, #12]
        _refreshCount++;
   2e4bc:	e5843008 	str	r3, [r4, #8]
    if (_pCurMachine)
   2e4c0:	0a000010 	beq	2e508 <McManager::displayRefresh()+0x118>
        return _pCurMachine->getDescriptorTable();
   2e4c4:	e5923000 	ldr	r3, [r2]
   2e4c8:	e1a00002 	mov	r0, r2
   2e4cc:	e5933014 	ldr	r3, [r3, #20]
   2e4d0:	e12fff33 	blx	r3
        if (getDescriptorTable()->displayMemoryMapped)
   2e4d4:	e5d03030 	ldrb	r3, [r0, #48]	; 0x30
   2e4d8:	e3530000 	cmp	r3, #0
   2e4dc:	1a00000b 	bne	2e510 <McManager::displayRefresh()+0x120>
        if (!TargetTracker::isTrackingActive())
   2e4e0:	eb0031c1 	bl	3abec <TargetTracker::isTrackingActive()>
   2e4e4:	e3500000 	cmp	r0, #0
   2e4e8:	1affffd6 	bne	2e448 <McManager::displayRefresh()+0x58>
    if (_pCurMachine)
   2e4ec:	e5940000 	ldr	r0, [r4]
        _pCurMachine->machineHeartbeat();
   2e4f0:	e5903000 	ldr	r3, [r0]
   2e4f4:	e5933028 	ldr	r3, [r3, #40]	; 0x28
   2e4f8:	e12fff33 	blx	r3
   2e4fc:	e5940000 	ldr	r0, [r4]
   2e500:	e5903000 	ldr	r3, [r0]
   2e504:	eaffffd1 	b	2e450 <McManager::displayRefresh()+0x60>
    return &defaultDescriptorTable;
   2e508:	e59f0064 	ldr	r0, [pc, #100]	; 2e574 <McManager::displayRefresh()+0x184>
   2e50c:	eafffff0 	b	2e4d4 <McManager::displayRefresh()+0xe4>
            if (TargetTracker::busAccessAvailable())
   2e510:	eb003197 	bl	3ab74 <TargetTracker::busAccessAvailable()>
   2e514:	e3500000 	cmp	r0, #0
   2e518:	1a000007 	bne	2e53c <McManager::displayRefresh()+0x14c>
            else if (TargetTracker::isTrackingActive())
   2e51c:	eb0031b2 	bl	3abec <TargetTracker::isTrackingActive()>
   2e520:	e3500000 	cmp	r0, #0
   2e524:	1a00000b 	bne	2e558 <McManager::displayRefresh()+0x168>
                _pCurMachine->displayRefreshFromMirrorHw();
   2e528:	e5940000 	ldr	r0, [r4]
   2e52c:	e5903000 	ldr	r3, [r0]
   2e530:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
   2e534:	e12fff33 	blx	r3
   2e538:	eaffffe8 	b	2e4e0 <McManager::displayRefresh()+0xf0>
                BusAccess::targetReqBus(_busSocketId, BR_BUS_ACTION_DISPLAY);
   2e53c:	e59f3034 	ldr	r3, [pc, #52]	; 2e578 <McManager::displayRefresh()+0x188>
   2e540:	e3a01000 	mov	r1, #0
   2e544:	e5930000 	ldr	r0, [r3]
   2e548:	eb002351 	bl	37294 <BusAccess::targetReqBus(int, BR_BUS_ACTION_REASON)>
                _busActionPendingDisplayRefresh = true;
   2e54c:	e3a03001 	mov	r3, #1
   2e550:	e5c43c75 	strb	r3, [r4, #3189]	; 0xc75
   2e554:	eaffffe1 	b	2e4e0 <McManager::displayRefresh()+0xf0>
                TargetTracker::requestDisplayGrab();
   2e558:	eb00338a 	bl	3b388 <TargetTracker::requestDisplayGrab()>
                _busActionPendingDisplayRefresh = true;
   2e55c:	e3a03001 	mov	r3, #1
   2e560:	e5c43c75 	strb	r3, [r4, #3189]	; 0xc75
   2e564:	eaffffdd 	b	2e4e0 <McManager::displayRefresh()+0xf0>
   2e568:	00074d98 	.word	0x00074d98
   2e56c:	000f4240 	.word	0x000f4240
   2e570:	10624dd3 	.word	0x10624dd3
   2e574:	0006f1e8 	.word	0x0006f1e8
   2e578:	0006f144 	.word	0x0006f144

0002e57c <McManager::machineHeartbeat()>:
    if (_pCurMachine)
   2e57c:	e59f3014 	ldr	r3, [pc, #20]	; 2e598 <McManager::machineHeartbeat()+0x1c>
   2e580:	e5930000 	ldr	r0, [r3]
   2e584:	e3500000 	cmp	r0, #0
   2e588:	012fff1e 	bxeq	lr
        _pCurMachine->machineHeartbeat();
   2e58c:	e5903000 	ldr	r3, [r0]
   2e590:	e5933028 	ldr	r3, [r3, #40]	; 0x28
   2e594:	e12fff13 	bx	r3
   2e598:	00074d98 	.word	0x00074d98

0002e59c <McManager::getDisplayRefreshRate()>:
    return _refreshRate;
   2e59c:	e59f3004 	ldr	r3, [pc, #4]	; 2e5a8 <McManager::getDisplayRefreshRate()+0xc>
}
   2e5a0:	e5930c7c 	ldr	r0, [r3, #3196]	; 0xc7c
   2e5a4:	e12fff1e 	bx	lr
   2e5a8:	00074d98 	.word	0x00074d98

0002e5ac <McManager::handleRxCharFromTarget(unsigned char const*, int)>:
{
   2e5ac:	e92d4070 	push	{r4, r5, r6, lr}
    if (rxLen + _rxHostCharsBufferLen >= MAX_RX_HOST_CHARS)
   2e5b0:	e59f4050 	ldr	r4, [pc, #80]	; 2e608 <McManager::handleRxCharFromTarget(unsigned char const*, int)+0x5c>
   2e5b4:	e59f2050 	ldr	r2, [pc, #80]	; 2e60c <McManager::handleRxCharFromTarget(unsigned char const*, int)+0x60>
   2e5b8:	e59434a0 	ldr	r3, [r4, #1184]	; 0x4a0
   2e5bc:	e0835001 	add	r5, r3, r1
   2e5c0:	e1550002 	cmp	r5, r2
   2e5c4:	ca000009 	bgt	2e5f0 <McManager::handleRxCharFromTarget(unsigned char const*, int)+0x44>
    memcpy(_rxHostCharsBuffer+_rxHostCharsBufferLen, pRxChars, rxLen);
   2e5c8:	e59fc040 	ldr	ip, [pc, #64]	; 2e610 <McManager::handleRxCharFromTarget(unsigned char const*, int)+0x64>
   2e5cc:	e1a02001 	mov	r2, r1
   2e5d0:	e1a01000 	mov	r1, r0
   2e5d4:	e08c0003 	add	r0, ip, r3
   2e5d8:	eb0079e2 	bl	4cd68 <memcpy>
    *(_rxHostCharsBuffer+_rxHostCharsBufferLen) = 0;
   2e5dc:	e3a02000 	mov	r2, #0
   2e5e0:	e0843005 	add	r3, r4, r5
    _rxHostCharsBufferLen += rxLen;
   2e5e4:	e58454a0 	str	r5, [r4, #1184]	; 0x4a0
    *(_rxHostCharsBuffer+_rxHostCharsBufferLen) = 0;
   2e5e8:	e5c324a4 	strb	r2, [r3, #1188]	; 0x4a4
}
   2e5ec:	e8bd8070 	pop	{r4, r5, r6, pc}
        _rxHostCharsBufferLen = 0;
   2e5f0:	e3a03000 	mov	r3, #0
    if (rxLen + _rxHostCharsBufferLen >= MAX_RX_HOST_CHARS)
   2e5f4:	e1510002 	cmp	r1, r2
        _rxHostCharsBufferLen = 0;
   2e5f8:	e58434a0 	str	r3, [r4, #1184]	; 0x4a0
    if (rxLen + _rxHostCharsBufferLen >= MAX_RX_HOST_CHARS)
   2e5fc:	c8bd8070 	popgt	{r4, r5, r6, pc}
   2e600:	e1a05001 	mov	r5, r1
   2e604:	eaffffef 	b	2e5c8 <McManager::handleRxCharFromTarget(unsigned char const*, int)+0x1c>
   2e608:	00074d98 	.word	0x00074d98
   2e60c:	000007cf 	.word	0x000007cf
   2e610:	0007523c 	.word	0x0007523c

0002e614 <McManager::getNumCharsReceivedFromHost()>:
    return _rxHostCharsBufferLen;
   2e614:	e59f3004 	ldr	r3, [pc, #4]	; 2e620 <McManager::getNumCharsReceivedFromHost()+0xc>
}
   2e618:	e59304a0 	ldr	r0, [r3, #1184]	; 0x4a0
   2e61c:	e12fff1e 	bx	lr
   2e620:	00074d98 	.word	0x00074d98

0002e624 <McManager::getCharsReceivedFromHost(unsigned char*, int)>:
    if ((!pBuf) || (bufMaxLen < _rxHostCharsBufferLen))
   2e624:	e2503000 	subs	r3, r0, #0
   2e628:	0a00000d 	beq	2e664 <McManager::getCharsReceivedFromHost(unsigned char*, int)+0x40>
{
   2e62c:	e92d4010 	push	{r4, lr}
    if ((!pBuf) || (bufMaxLen < _rxHostCharsBufferLen))
   2e630:	e59f4034 	ldr	r4, [pc, #52]	; 2e66c <McManager::getCharsReceivedFromHost(unsigned char*, int)+0x48>
   2e634:	e59424a0 	ldr	r2, [r4, #1184]	; 0x4a0
   2e638:	e1520001 	cmp	r2, r1
   2e63c:	da000001 	ble	2e648 <McManager::getCharsReceivedFromHost(unsigned char*, int)+0x24>
        return 0;
   2e640:	e3a00000 	mov	r0, #0
}
   2e644:	e8bd8010 	pop	{r4, pc}
    memcpy(pBuf, _rxHostCharsBuffer, _rxHostCharsBufferLen);
   2e648:	e2841e4a 	add	r1, r4, #1184	; 0x4a0
   2e64c:	e2811004 	add	r1, r1, #4
   2e650:	eb0079c4 	bl	4cd68 <memcpy>
    _rxHostCharsBufferLen = 0;
   2e654:	e3a03000 	mov	r3, #0
    int retVal = _rxHostCharsBufferLen;
   2e658:	e59404a0 	ldr	r0, [r4, #1184]	; 0x4a0
    _rxHostCharsBufferLen = 0;
   2e65c:	e58434a0 	str	r3, [r4, #1184]	; 0x4a0
    return retVal;
   2e660:	e8bd8010 	pop	{r4, pc}
        return 0;
   2e664:	e1a00003 	mov	r0, r3
}
   2e668:	e12fff1e 	bx	lr
   2e66c:	00074d98 	.word	0x00074d98

0002e670 <McManager::sendKeyCodeToTarget(int)>:
    CommandHandler::sendKeyCodeToTarget(asciiCode);
   2e670:	eaffe1e7 	b	26e14 <CommandHandler::sendKeyCodeToTarget(int)>

0002e674 <McManager::targetReset()>:
    BusAccess::targetReqReset(_busSocketId);
   2e674:	e59f3008 	ldr	r3, [pc, #8]	; 2e684 <McManager::targetReset()+0x10>
   2e678:	e3e01000 	mvn	r1, #0
   2e67c:	e5930000 	ldr	r0, [r3]
   2e680:	ea0022cd 	b	371bc <BusAccess::targetReqReset(int, int)>
   2e684:	0006f144 	.word	0x0006f144

0002e688 <McManager::handleTargetProgram(bool)>:
{
   2e688:	e92d4010 	push	{r4, lr}
   2e68c:	e1a04000 	mov	r4, r0
    if (TargetState::numMemoryBlocks() == 0) 
   2e690:	eb0030a9 	bl	3a93c <TargetState::numMemoryBlocks()>
   2e694:	e3500000 	cmp	r0, #0
   2e698:	0a000008 	beq	2e6c0 <McManager::handleTargetProgram(bool)+0x38>
        BusAccess::targetReqBus(_busSocketId, BR_BUS_ACTION_PROGRAMMING);
   2e69c:	e59f3030 	ldr	r3, [pc, #48]	; 2e6d4 <McManager::handleTargetProgram(bool)+0x4c>
   2e6a0:	e3a01002 	mov	r1, #2
   2e6a4:	e5930000 	ldr	r0, [r3]
   2e6a8:	eb0022f9 	bl	37294 <BusAccess::targetReqBus(int, BR_BUS_ACTION_REASON)>
        _busActionPendingProgramTarget = true;
   2e6ac:	e3a02001 	mov	r2, #1
   2e6b0:	e59f3020 	ldr	r3, [pc, #32]	; 2e6d8 <McManager::handleTargetProgram(bool)+0x50>
   2e6b4:	e5c3249d 	strb	r2, [r3, #1181]	; 0x49d
        _busActionPendingExecAfterProgram = execAfterProgramming;
   2e6b8:	e5c3449e 	strb	r4, [r3, #1182]	; 0x49e
}
   2e6bc:	e8bd8010 	pop	{r4, pc}
        LogWrite(FromMcManager, LOG_DEBUG, "ProgramTarget - nothing to write");
   2e6c0:	e59f2014 	ldr	r2, [pc, #20]	; 2e6dc <McManager::handleTargetProgram(bool)+0x54>
   2e6c4:	e3a01004 	mov	r1, #4
}
   2e6c8:	e8bd4010 	pop	{r4, lr}
        LogWrite(FromMcManager, LOG_DEBUG, "ProgramTarget - nothing to write");
   2e6cc:	e59f000c 	ldr	r0, [pc, #12]	; 2e6e0 <McManager::handleTargetProgram(bool)+0x58>
   2e6d0:	eaffd6a8 	b	24178 <LogWrite>
   2e6d4:	0006f144 	.word	0x0006f144
   2e6d8:	00074d98 	.word	0x00074d98
   2e6dc:	00054c80 	.word	0x00054c80
   2e6e0:	00054c08 	.word	0x00054c08

0002e6e4 <McManager::targetExec()>:
{
   2e6e4:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2e6e8:	e24ddfbf 	sub	sp, sp, #764	; 0x2fc
    LogWrite(FromMcManager, LOG_DEBUG, "Starting target code, debugActive %c", TargetTracker::isTrackingActive() ? 'Y' : 'N');
   2e6ec:	eb00313e 	bl	3abec <TargetTracker::isTrackingActive()>
   2e6f0:	e3500000 	cmp	r0, #0
   2e6f4:	13a03059 	movne	r3, #89	; 0x59
   2e6f8:	03a0304e 	moveq	r3, #78	; 0x4e
   2e6fc:	e59f2380 	ldr	r2, [pc, #896]	; 2ea84 <McManager::targetExec()+0x3a0>
   2e700:	e3a01004 	mov	r1, #4
   2e704:	e59f037c 	ldr	r0, [pc, #892]	; 2ea88 <McManager::targetExec()+0x3a4>
   2e708:	ebffd69a 	bl	24178 <LogWrite>
    if (TargetState::areRegistersValid())
   2e70c:	eb0030ad 	bl	3a9c8 <TargetState::areRegistersValid()>
   2e710:	e3500000 	cmp	r0, #0
   2e714:	0a0000b9 	beq	2ea00 <McManager::targetExec()+0x31c>

    // Opcode inject enable 
    static void setOpcodeInjectEnable(bool val);
    static bool getOpcodeInjectEnable()
    {
        return _opcodeInjectEnable;
   2e718:	e59f336c 	ldr	r3, [pc, #876]	; 2ea8c <McManager::targetExec()+0x3a8>
        if (HwManager::getOpcodeInjectEnable() || TargetTracker::isTrackingActive())
   2e71c:	e5d33000 	ldrb	r3, [r3]
   2e720:	e3530000 	cmp	r3, #0
   2e724:	1a0000bb 	bne	2ea18 <McManager::targetExec()+0x334>
   2e728:	eb00312f 	bl	3abec <TargetTracker::isTrackingActive()>
   2e72c:	e3500000 	cmp	r0, #0
   2e730:	1a0000b8 	bne	2ea18 <McManager::targetExec()+0x334>
            if (!_busActionCodeWrittenAtResetVector)
   2e734:	e59f4354 	ldr	r4, [pc, #852]	; 2ea90 <McManager::targetExec()+0x3ac>
   2e738:	e5d43c80 	ldrb	r3, [r4, #3200]	; 0xc80
   2e73c:	e3530000 	cmp	r3, #0
   2e740:	1a0000ae 	bne	2ea00 <McManager::targetExec()+0x31c>
                TargetState::getTargetRegs(regs);
   2e744:	e28d0058 	add	r0, sp, #88	; 0x58
        PC = SP = HL = DE = BC = AF = IX = IY = 0;
   2e748:	e58d3074 	str	r3, [sp, #116]	; 0x74
   2e74c:	e58d3070 	str	r3, [sp, #112]	; 0x70
   2e750:	e58d306c 	str	r3, [sp, #108]	; 0x6c
   2e754:	e58d3068 	str	r3, [sp, #104]	; 0x68
   2e758:	e58d3064 	str	r3, [sp, #100]	; 0x64
   2e75c:	e58d3060 	str	r3, [sp, #96]	; 0x60
   2e760:	e58d305c 	str	r3, [sp, #92]	; 0x5c
   2e764:	e58d3058 	str	r3, [sp, #88]	; 0x58
        HLDASH = DEDASH = BCDASH = AFDASH = MEMPTR = 0;
   2e768:	e58d3088 	str	r3, [sp, #136]	; 0x88
   2e76c:	e58d3084 	str	r3, [sp, #132]	; 0x84
   2e770:	e58d3080 	str	r3, [sp, #128]	; 0x80
   2e774:	e58d307c 	str	r3, [sp, #124]	; 0x7c
   2e778:	e58d3078 	str	r3, [sp, #120]	; 0x78
        I = R = INTMODE = INTENABLED = VPS = 0;
   2e77c:	e58d309c 	str	r3, [sp, #156]	; 0x9c
   2e780:	e58d3098 	str	r3, [sp, #152]	; 0x98
   2e784:	e58d3094 	str	r3, [sp, #148]	; 0x94
   2e788:	e58d3090 	str	r3, [sp, #144]	; 0x90
   2e78c:	e58d308c 	str	r3, [sp, #140]	; 0x8c
   2e790:	eb003090 	bl	3a9d8 <TargetState::getTargetRegs(Z80Registers&)>
    }
    void format(char* pResponse, int maxLen)
    {
        char tmpStr[100];
        ee_sprintf(tmpStr, "PC=%04x SP=%04x BC=%04x AF=%04x HL=%04x DE=%04x IX=%04x IY=%04x",
   2e794:	e1cd25d8 	ldrd	r2, [sp, #88]	; 0x58
   2e798:	e59d6074 	ldr	r6, [sp, #116]	; 0x74
   2e79c:	e59de064 	ldr	lr, [sp, #100]	; 0x64
   2e7a0:	e59dc060 	ldr	ip, [sp, #96]	; 0x60
   2e7a4:	e59d5070 	ldr	r5, [sp, #112]	; 0x70
   2e7a8:	e59d006c 	ldr	r0, [sp, #108]	; 0x6c
   2e7ac:	e59d1068 	ldr	r1, [sp, #104]	; 0x68
   2e7b0:	e98d5001 	stmib	sp, {r0, ip, lr}
   2e7b4:	e58d6014 	str	r6, [sp, #20]
   2e7b8:	e58d5010 	str	r5, [sp, #16]
   2e7bc:	e58d1000 	str	r1, [sp]
   2e7c0:	e28d00a0 	add	r0, sp, #160	; 0xa0
   2e7c4:	e59f12c8 	ldr	r1, [pc, #712]	; 2ea94 <McManager::targetExec()+0x3b0>
   2e7c8:	ebffd177 	bl	22dac <ee_sprintf>
                PC, SP, BC, AF, HL, DE, IX, IY);
        strlcpy(pResponse, tmpStr, maxLen);
   2e7cc:	e28d10a0 	add	r1, sp, #160	; 0xa0
   2e7d0:	e3a02f7d 	mov	r2, #500	; 0x1f4
   2e7d4:	e28d0f41 	add	r0, sp, #260	; 0x104
   2e7d8:	eb007b7a 	bl	4d5c8 <strlcpy>
        ee_sprintf(tmpStr, " AF'=%04x BC'=%04x HL'=%04x DE'=%04x I=%02x R=%02x",
   2e7dc:	e59de08c 	ldr	lr, [sp, #140]	; 0x8c
   2e7e0:	e59dc07c 	ldr	ip, [sp, #124]	; 0x7c
   2e7e4:	e59d5090 	ldr	r5, [sp, #144]	; 0x90
   2e7e8:	e59d1078 	ldr	r1, [sp, #120]	; 0x78
   2e7ec:	e59d3080 	ldr	r3, [sp, #128]	; 0x80
   2e7f0:	e88d5002 	stm	sp, {r1, ip, lr}
   2e7f4:	e58d500c 	str	r5, [sp, #12]
   2e7f8:	e59d2084 	ldr	r2, [sp, #132]	; 0x84
   2e7fc:	e59f1294 	ldr	r1, [pc, #660]	; 2ea98 <McManager::targetExec()+0x3b4>
   2e800:	e28d00a0 	add	r0, sp, #160	; 0xa0
   2e804:	ebffd168 	bl	22dac <ee_sprintf>
                AFDASH, BCDASH, HLDASH, DEDASH, I, R);
        strlcat(pResponse, tmpStr, maxLen);
   2e808:	e3a02f7d 	mov	r2, #500	; 0x1f4
   2e80c:	e28d10a0 	add	r1, sp, #160	; 0xa0
   2e810:	e28d0f41 	add	r0, sp, #260	; 0x104
   2e814:	eb007b3b 	bl	4d508 <strlcat>
        ee_sprintf(tmpStr, "  F=%c%c-%c-%c%c%c F'=%c%c--%c-%c%c%c MEMPTR=%04x IM%d IFF%c%c VPS: %d",
                (AF & 0x80) ? 'S' : '-',
   2e818:	e59d106c 	ldr	r1, [sp, #108]	; 0x6c
                (AF & 0x40) ? 'Z' : '-',
                (AF & 0x10) ? 'H' : '-',
                (AF & 0x04) ? 'P' : '-',
                (AF & 0x02) ? 'N' : '-',
                (AF & 0x01) ? 'C' : '-',
                (AFDASH & 0x80) ? 'S' : '-',
   2e81c:	e59d8084 	ldr	r8, [sp, #132]	; 0x84
        ee_sprintf(tmpStr, "  F=%c%c-%c-%c%c%c F'=%c%c--%c-%c%c%c MEMPTR=%04x IM%d IFF%c%c VPS: %d",
   2e820:	e3110080 	tst	r1, #128	; 0x80
   2e824:	13a02053 	movne	r2, #83	; 0x53
   2e828:	03a0202d 	moveq	r2, #45	; 0x2d
   2e82c:	e3110040 	tst	r1, #64	; 0x40
   2e830:	13a0305a 	movne	r3, #90	; 0x5a
   2e834:	03a0302d 	moveq	r3, #45	; 0x2d
   2e838:	e3110010 	tst	r1, #16
   2e83c:	13a00048 	movne	r0, #72	; 0x48
   2e840:	03a0002d 	moveq	r0, #45	; 0x2d
   2e844:	e3110004 	tst	r1, #4
   2e848:	e58d0044 	str	r0, [sp, #68]	; 0x44
   2e84c:	13a00050 	movne	r0, #80	; 0x50
   2e850:	03a0002d 	moveq	r0, #45	; 0x2d
   2e854:	e3110002 	tst	r1, #2
   2e858:	e58d0048 	str	r0, [sp, #72]	; 0x48
   2e85c:	13a0004e 	movne	r0, #78	; 0x4e
   2e860:	03a0002d 	moveq	r0, #45	; 0x2d
   2e864:	e3110001 	tst	r1, #1
   2e868:	e58d004c 	str	r0, [sp, #76]	; 0x4c
   2e86c:	13a00043 	movne	r0, #67	; 0x43
   2e870:	03a0002d 	moveq	r0, #45	; 0x2d
   2e874:	e3180080 	tst	r8, #128	; 0x80
   2e878:	13a0c053 	movne	ip, #83	; 0x53
   2e87c:	03a0c02d 	moveq	ip, #45	; 0x2d
   2e880:	e3180040 	tst	r8, #64	; 0x40
   2e884:	13a0e05a 	movne	lr, #90	; 0x5a
   2e888:	03a0e02d 	moveq	lr, #45	; 0x2d
   2e88c:	e3180010 	tst	r8, #16
   2e890:	13a05048 	movne	r5, #72	; 0x48
   2e894:	03a0502d 	moveq	r5, #45	; 0x2d
   2e898:	e3180004 	tst	r8, #4
   2e89c:	e59d1098 	ldr	r1, [sp, #152]	; 0x98
   2e8a0:	13a06050 	movne	r6, #80	; 0x50
   2e8a4:	03a0602d 	moveq	r6, #45	; 0x2d
   2e8a8:	e3180002 	tst	r8, #2
   2e8ac:	13a0704e 	movne	r7, #78	; 0x4e
   2e8b0:	03a0702d 	moveq	r7, #45	; 0x2d
   2e8b4:	e3180001 	tst	r8, #1
   2e8b8:	13a08043 	movne	r8, #67	; 0x43
   2e8bc:	03a0802d 	moveq	r8, #45	; 0x2d
   2e8c0:	e3510000 	cmp	r1, #0
   2e8c4:	03a01020 	moveq	r1, #32
   2e8c8:	13a01031 	movne	r1, #49	; 0x31
   2e8cc:	01a0b001 	moveq	fp, r1
   2e8d0:	13a0b032 	movne	fp, #50	; 0x32
   2e8d4:	e58d1030 	str	r1, [sp, #48]	; 0x30
   2e8d8:	e59d104c 	ldr	r1, [sp, #76]	; 0x4c
   2e8dc:	e59d9088 	ldr	r9, [sp, #136]	; 0x88
   2e8e0:	e58d1008 	str	r1, [sp, #8]
   2e8e4:	e59d1048 	ldr	r1, [sp, #72]	; 0x48
   2e8e8:	e59da094 	ldr	sl, [sp, #148]	; 0x94
   2e8ec:	e58d1004 	str	r1, [sp, #4]
   2e8f0:	e59d1044 	ldr	r1, [sp, #68]	; 0x44
   2e8f4:	e58de014 	str	lr, [sp, #20]
   2e8f8:	e58d1000 	str	r1, [sp]
   2e8fc:	e59d109c 	ldr	r1, [sp, #156]	; 0x9c
   2e900:	e58dc010 	str	ip, [sp, #16]
   2e904:	e58d000c 	str	r0, [sp, #12]
   2e908:	e58d1038 	str	r1, [sp, #56]	; 0x38
   2e90c:	e58d5018 	str	r5, [sp, #24]
   2e910:	e59f1184 	ldr	r1, [pc, #388]	; 2ea9c <McManager::targetExec()+0x3b8>
   2e914:	e28d00a0 	add	r0, sp, #160	; 0xa0
   2e918:	e58db034 	str	fp, [sp, #52]	; 0x34
   2e91c:	e58da02c 	str	sl, [sp, #44]	; 0x2c
   2e920:	e1cd82f4 	strd	r8, [sp, #36]	; 0x24
   2e924:	e1cd61fc 	strd	r6, [sp, #28]
   2e928:	ebffd11f 	bl	22dac <ee_sprintf>
                (AFDASH & 0x01) ? 'C' : '-',
                MEMPTR, INTMODE, 
                INTENABLED ? '1' : ' ', 
                INTENABLED ? '2' : ' ', 
                VPS );
        strlcat(pResponse, tmpStr, maxLen);
   2e92c:	e3a02f7d 	mov	r2, #500	; 0x1f4
   2e930:	e28d10a0 	add	r1, sp, #160	; 0xa0
   2e934:	e28d0f41 	add	r0, sp, #260	; 0x104
   2e938:	eb007af2 	bl	4d508 <strlcat>
                LogWrite(FromMcManager, LOG_DEBUG, "Regs: %s", regsStr);
   2e93c:	e59f0144 	ldr	r0, [pc, #324]	; 2ea88 <McManager::targetExec()+0x3a4>
   2e940:	e28d3f41 	add	r3, sp, #260	; 0x104
   2e944:	e59f2154 	ldr	r2, [pc, #340]	; 2eaa0 <McManager::targetExec()+0x3bc>
   2e948:	e3a01004 	mov	r1, #4
   2e94c:	ebffd609 	bl	24178 <LogWrite>
    if (_pCurMachine)
   2e950:	e5940000 	ldr	r0, [r4]
   2e954:	e3500000 	cmp	r0, #0
   2e958:	0a000047 	beq	2ea7c <McManager::targetExec()+0x398>
        return _pCurMachine->getDescriptorTable();
   2e95c:	e5903000 	ldr	r3, [r0]
   2e960:	e5933014 	ldr	r3, [r3, #20]
   2e964:	e12fff33 	blx	r3
                uint32_t codeDestAddr = getDescriptorTable()->setRegistersCodeAddr;
   2e968:	e5904040 	ldr	r4, [r0, #64]	; 0x40
                int codeLen = TargetCPUZ80::getSnippetToSetRegs(codeDestAddr, regs, regSetCode, MAX_REGISTER_SET_CODE_LEN);
   2e96c:	e28d1058 	add	r1, sp, #88	; 0x58
   2e970:	e1a00004 	mov	r0, r4
   2e974:	e3a03064 	mov	r3, #100	; 0x64
   2e978:	e28d20a0 	add	r2, sp, #160	; 0xa0
   2e97c:	eb002f3a 	bl	3a66c <TargetCPUZ80::getSnippetToSetRegs(unsigned long, Z80Registers&, unsigned char*, unsigned long)>
                if (codeLen != 0)
   2e980:	e2506000 	subs	r6, r0, #0
   2e984:	0a00001d 	beq	2ea00 <McManager::targetExec()+0x31c>
                    HwManager::blockWrite(codeDestAddr, regSetCode, codeLen, false, false, false);
   2e988:	e3a05000 	mov	r5, #0
                    LogWrite(FromMcManager, LOG_DEBUG,"Set regs snippet at %04x len %d", codeDestAddr, codeLen);
   2e98c:	e1a03004 	mov	r3, r4
   2e990:	e59f210c 	ldr	r2, [pc, #268]	; 2eaa4 <McManager::targetExec()+0x3c0>
   2e994:	e3a01004 	mov	r1, #4
   2e998:	e59f00e8 	ldr	r0, [pc, #232]	; 2ea88 <McManager::targetExec()+0x3a4>
   2e99c:	e58d6000 	str	r6, [sp]
   2e9a0:	ebffd5f4 	bl	24178 <LogWrite>
                    HwManager::blockWrite(codeDestAddr, regSetCode, codeLen, false, false, false);
   2e9a4:	e1a03005 	mov	r3, r5
   2e9a8:	e1a02006 	mov	r2, r6
   2e9ac:	e28d10a0 	add	r1, sp, #160	; 0xa0
   2e9b0:	e58d5004 	str	r5, [sp, #4]
   2e9b4:	e58d5000 	str	r5, [sp]
   2e9b8:	e1a00004 	mov	r0, r4
   2e9bc:	ebfff659 	bl	2c328 <HwManager::blockWrite(unsigned long, unsigned char const*, unsigned long, bool, bool, bool)>
                    uint8_t jumpCmd[3] = { 0xc3, uint8_t(codeDestAddr & 0xff), uint8_t((codeDestAddr >> 8) & 0xff) };
   2e9c0:	e3e0c03c 	mvn	ip, #60	; 0x3c
   2e9c4:	e1a0e424 	lsr	lr, r4, #8
                    HwManager::blockWrite(Z80_PROGRAM_RESET_VECTOR, jumpCmd, 3, false, false, false);
   2e9c8:	e1a03005 	mov	r3, r5
   2e9cc:	e28d1054 	add	r1, sp, #84	; 0x54
   2e9d0:	e58d5004 	str	r5, [sp, #4]
   2e9d4:	e58d5000 	str	r5, [sp]
   2e9d8:	e1a00005 	mov	r0, r5
   2e9dc:	e3a02003 	mov	r2, #3
                    uint8_t jumpCmd[3] = { 0xc3, uint8_t(codeDestAddr & 0xff), uint8_t((codeDestAddr >> 8) & 0xff) };
   2e9e0:	e5cd4055 	strb	r4, [sp, #85]	; 0x55
   2e9e4:	e5cde056 	strb	lr, [sp, #86]	; 0x56
   2e9e8:	e5cdc054 	strb	ip, [sp, #84]	; 0x54
                    HwManager::blockWrite(Z80_PROGRAM_RESET_VECTOR, jumpCmd, 3, false, false, false);
   2e9ec:	ebfff64d 	bl	2c328 <HwManager::blockWrite(unsigned long, unsigned char const*, unsigned long, bool, bool, bool)>
                    LogDumpMemory(regSetCode, regSetCode + codeLen);
   2e9f0:	e28d30a0 	add	r3, sp, #160	; 0xa0
   2e9f4:	e0831006 	add	r1, r3, r6
   2e9f8:	e1a00003 	mov	r0, r3
   2e9fc:	ebffd699 	bl	24468 <LogDumpMemory>
        BusAccess::targetReqReset(_busSocketId);
   2ea00:	e59f30a0 	ldr	r3, [pc, #160]	; 2eaa8 <McManager::targetExec()+0x3c4>
   2ea04:	e3e01000 	mvn	r1, #0
   2ea08:	e5930000 	ldr	r0, [r3]
   2ea0c:	eb0021ea 	bl	371bc <BusAccess::targetReqReset(int, int)>
}
   2ea10:	e28ddfbf 	add	sp, sp, #764	; 0x2fc
   2ea14:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
        PC = SP = HL = DE = BC = AF = IX = IY = 0;
   2ea18:	e3a03000 	mov	r3, #0
            TargetState::getTargetRegs(regs);
   2ea1c:	e28d0f41 	add	r0, sp, #260	; 0x104
   2ea20:	e58d3120 	str	r3, [sp, #288]	; 0x120
   2ea24:	e58d311c 	str	r3, [sp, #284]	; 0x11c
   2ea28:	e58d3118 	str	r3, [sp, #280]	; 0x118
   2ea2c:	e58d3114 	str	r3, [sp, #276]	; 0x114
   2ea30:	e58d3110 	str	r3, [sp, #272]	; 0x110
   2ea34:	e58d310c 	str	r3, [sp, #268]	; 0x10c
   2ea38:	e58d3108 	str	r3, [sp, #264]	; 0x108
   2ea3c:	e58d3104 	str	r3, [sp, #260]	; 0x104
        HLDASH = DEDASH = BCDASH = AFDASH = MEMPTR = 0;
   2ea40:	e58d3134 	str	r3, [sp, #308]	; 0x134
   2ea44:	e58d3130 	str	r3, [sp, #304]	; 0x130
   2ea48:	e58d312c 	str	r3, [sp, #300]	; 0x12c
   2ea4c:	e58d3128 	str	r3, [sp, #296]	; 0x128
   2ea50:	e58d3124 	str	r3, [sp, #292]	; 0x124
        I = R = INTMODE = INTENABLED = VPS = 0;
   2ea54:	e58d3148 	str	r3, [sp, #328]	; 0x148
   2ea58:	e58d3144 	str	r3, [sp, #324]	; 0x144
   2ea5c:	e58d3140 	str	r3, [sp, #320]	; 0x140
   2ea60:	e58d313c 	str	r3, [sp, #316]	; 0x13c
   2ea64:	e58d3138 	str	r3, [sp, #312]	; 0x138
   2ea68:	eb002fda 	bl	3a9d8 <TargetState::getTargetRegs(Z80Registers&)>
            TargetTracker::startSetRegisterSequence(&regs);
   2ea6c:	e28d0f41 	add	r0, sp, #260	; 0x104
   2ea70:	eb003066 	bl	3ac10 <TargetTracker::startSetRegisterSequence(Z80Registers*)>
}
   2ea74:	e28ddfbf 	add	sp, sp, #764	; 0x2fc
   2ea78:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return &defaultDescriptorTable;
   2ea7c:	e59f0028 	ldr	r0, [pc, #40]	; 2eaac <McManager::targetExec()+0x3c8>
   2ea80:	eaffffb8 	b	2e968 <McManager::targetExec()+0x284>
   2ea84:	00054d64 	.word	0x00054d64
   2ea88:	00054c08 	.word	0x00054c08
   2ea8c:	00074d96 	.word	0x00074d96
   2ea90:	00074d98 	.word	0x00074d98
   2ea94:	00054d8c 	.word	0x00054d8c
   2ea98:	00054dcc 	.word	0x00054dcc
   2ea9c:	00054e00 	.word	0x00054e00
   2eaa0:	00054e48 	.word	0x00054e48
   2eaa4:	00054e54 	.word	0x00054e54
   2eaa8:	0006f144 	.word	0x0006f144
   2eaac:	0006f1e8 	.word	0x0006f1e8

0002eab0 <McManager::busActionCompleteStatic(BR_BUS_ACTION, BR_BUS_ACTION_REASON)>:
    if (actionType == BR_BUS_ACTION_BUSRQ)
   2eab0:	e3500004 	cmp	r0, #4
   2eab4:	112fff1e 	bxne	lr
{
   2eab8:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
        if (_busActionPendingProgramTarget)
   2eabc:	e59f60f0 	ldr	r6, [pc, #240]	; 2ebb4 <McManager::busActionCompleteStatic(BR_BUS_ACTION, BR_BUS_ACTION_REASON)+0x104>
{
   2eac0:	e24dd014 	sub	sp, sp, #20
        if (_busActionPendingProgramTarget)
   2eac4:	e5d6349d 	ldrb	r3, [r6, #1181]	; 0x49d
   2eac8:	e3530000 	cmp	r3, #0
   2eacc:	0a000028 	beq	2eb74 <McManager::busActionCompleteStatic(BR_BUS_ACTION, BR_BUS_ACTION_REASON)+0xc4>
            _busActionCodeWrittenAtResetVector = false;
   2ead0:	e3a03000 	mov	r3, #0
                LogWrite(FromMcManager, LOG_DEBUG,"ProgramTarget done %08x len %d result %d micros %u", pBlock->start, pBlock->len, brResult, micros());
   2ead4:	e59f90dc 	ldr	r9, [pc, #220]	; 2ebb8 <McManager::busActionCompleteStatic(BR_BUS_ACTION, BR_BUS_ACTION_REASON)+0x108>
            for (int i = 0; i < TargetState::numMemoryBlocks(); i++) {
   2ead8:	e1a05003 	mov	r5, r3
                            TargetState::getMemoryImagePtr() + pBlock->start, pBlock->len, false, false);
   2eadc:	e1a0a003 	mov	sl, r3
            _busActionCodeWrittenAtResetVector = false;
   2eae0:	e5c63c80 	strb	r3, [r6, #3200]	; 0xc80
   2eae4:	ea00001a 	b	2eb54 <McManager::busActionCompleteStatic(BR_BUS_ACTION, BR_BUS_ACTION_REASON)+0xa4>
                TargetState::TargetMemoryBlock* pBlock = TargetState::getMemoryBlock(i);
   2eae8:	e1a00005 	mov	r0, r5
   2eaec:	eb002f96 	bl	3a94c <TargetState::getMemoryBlock(int)>
   2eaf0:	e1a04000 	mov	r4, r0
                BR_RETURN_TYPE brResult = BusAccess::blockWrite(pBlock->start, 
   2eaf4:	e5907000 	ldr	r7, [r0]
                            TargetState::getMemoryImagePtr() + pBlock->start, pBlock->len, false, false);
   2eaf8:	eb002f97 	bl	3a95c <TargetState::getMemoryImagePtr()>
   2eafc:	e8940006 	ldm	r4, {r1, r2}
   2eb00:	e3a03000 	mov	r3, #0
   2eb04:	e0801001 	add	r1, r0, r1
   2eb08:	e58da000 	str	sl, [sp]
   2eb0c:	e1a00007 	mov	r0, r7
   2eb10:	eb0029ad 	bl	391cc <BusAccess::blockWrite(unsigned long, unsigned char const*, unsigned long, bool, bool)>
                LogWrite(FromMcManager, LOG_DEBUG,"ProgramTarget done %08x len %d result %d micros %u", pBlock->start, pBlock->len, brResult, micros());
   2eb14:	e8940880 	ldm	r4, {r7, fp}
                            TargetState::getMemoryImagePtr() + pBlock->start, pBlock->len, false, false);
   2eb18:	e1a08000 	mov	r8, r0
                LogWrite(FromMcManager, LOG_DEBUG,"ProgramTarget done %08x len %d result %d micros %u", pBlock->start, pBlock->len, brResult, micros());
   2eb1c:	eb001f1d 	bl	36798 <micros>
   2eb20:	e1a03007 	mov	r3, r7
   2eb24:	e58d0008 	str	r0, [sp, #8]
   2eb28:	e58d8004 	str	r8, [sp, #4]
   2eb2c:	e58db000 	str	fp, [sp]
   2eb30:	e1a02009 	mov	r2, r9
   2eb34:	e3a01004 	mov	r1, #4
   2eb38:	e59f007c 	ldr	r0, [pc, #124]	; 2ebbc <McManager::busActionCompleteStatic(BR_BUS_ACTION, BR_BUS_ACTION_REASON)+0x10c>
   2eb3c:	ebffd58d 	bl	24178 <LogWrite>
                if (pBlock->start == Z80_PROGRAM_RESET_VECTOR)
   2eb40:	e5943000 	ldr	r3, [r4]
            for (int i = 0; i < TargetState::numMemoryBlocks(); i++) {
   2eb44:	e2855001 	add	r5, r5, #1
                if (pBlock->start == Z80_PROGRAM_RESET_VECTOR)
   2eb48:	e3530000 	cmp	r3, #0
                    _busActionCodeWrittenAtResetVector = true;
   2eb4c:	03a03001 	moveq	r3, #1
   2eb50:	05c63c80 	strbeq	r3, [r6, #3200]	; 0xc80
            for (int i = 0; i < TargetState::numMemoryBlocks(); i++) {
   2eb54:	eb002f78 	bl	3a93c <TargetState::numMemoryBlocks()>
   2eb58:	e1500005 	cmp	r0, r5
   2eb5c:	caffffe1 	bgt	2eae8 <McManager::busActionCompleteStatic(BR_BUS_ACTION, BR_BUS_ACTION_REASON)+0x38>
            if (_busActionPendingExecAfterProgram)
   2eb60:	e5d6349e 	ldrb	r3, [r6, #1182]	; 0x49e
   2eb64:	e3530000 	cmp	r3, #0
   2eb68:	1a00000f 	bne	2ebac <McManager::busActionCompleteStatic(BR_BUS_ACTION, BR_BUS_ACTION_REASON)+0xfc>
            _busActionPendingProgramTarget = false;
   2eb6c:	e3a03000 	mov	r3, #0
   2eb70:	e5c6349d 	strb	r3, [r6, #1181]	; 0x49d
        if (_busActionPendingDisplayRefresh)
   2eb74:	e5d63c75 	ldrb	r3, [r6, #3189]	; 0xc75
   2eb78:	e3530000 	cmp	r3, #0
   2eb7c:	0a000008 	beq	2eba4 <McManager::busActionCompleteStatic(BR_BUS_ACTION, BR_BUS_ACTION_REASON)+0xf4>
            if (_pCurMachine)
   2eb80:	e5960000 	ldr	r0, [r6]
   2eb84:	e3500000 	cmp	r0, #0
   2eb88:	0a000003 	beq	2eb9c <McManager::busActionCompleteStatic(BR_BUS_ACTION, BR_BUS_ACTION_REASON)+0xec>
                _pCurMachine->busActionCompleteCallback(actionType);
   2eb8c:	e5903000 	ldr	r3, [r0]
   2eb90:	e3a01004 	mov	r1, #4
   2eb94:	e5933040 	ldr	r3, [r3, #64]	; 0x40
   2eb98:	e12fff33 	blx	r3
            _busActionPendingDisplayRefresh = false;    
   2eb9c:	e3a03000 	mov	r3, #0
   2eba0:	e5c63c75 	strb	r3, [r6, #3189]	; 0xc75
}
   2eba4:	e28dd014 	add	sp, sp, #20
   2eba8:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
                targetExec();
   2ebac:	ebfffecc 	bl	2e6e4 <McManager::targetExec()>
   2ebb0:	eaffffed 	b	2eb6c <McManager::busActionCompleteStatic(BR_BUS_ACTION, BR_BUS_ACTION_REASON)+0xbc>
   2ebb4:	00074d98 	.word	0x00074d98
   2ebb8:	00054e74 	.word	0x00054e74
   2ebbc:	00054c08 	.word	0x00054c08

0002ebc0 <McRobsZ80::enable()>:
}

// Enable machine
void McRobsZ80::enable()
{
    _screenBufferValid = false;
   2ebc0:	e3a03000 	mov	r3, #0
   2ebc4:	e2800901 	add	r0, r0, #16384	; 0x4000
   2ebc8:	e5c03054 	strb	r3, [r0, #84]	; 0x54
}
   2ebcc:	e12fff1e 	bx	lr

0002ebd0 <McRobsZ80::disable()>:

// Disable machine
void McRobsZ80::disable()
{
}
   2ebd0:	e12fff1e 	bx	lr

0002ebd4 <McRobsZ80::keyHandler(unsigned char, unsigned char const*)>:
}

// Handle a key press
void McRobsZ80::keyHandler([[maybe_unused]] unsigned char ucModifiers, [[maybe_unused]] const unsigned char rawKeys[6])
{
}
   2ebd4:	e12fff1e 	bx	lr

0002ebd8 <McRobsZ80::busAccessCallback(unsigned long, unsigned long, unsigned long, unsigned long&)>:

// Handle a request for memory or IO - or possibly something like in interrupt vector in Z80
void McRobsZ80::busAccessCallback([[maybe_unused]] uint32_t addr, [[maybe_unused]] uint32_t data, 
        [[maybe_unused]] uint32_t flags, [[maybe_unused]] uint32_t& retVal)
{
}
   2ebd8:	e12fff1e 	bx	lr

0002ebdc <McRobsZ80::updateDisplayFromBuffer(unsigned char*, unsigned long)>:
    if (!_pDisplay || (bufLen < ROBSZ80_DISP_RAM_SIZE))
   2ebdc:	e3520901 	cmp	r2, #16384	; 0x4000
   2ebe0:	e5902050 	ldr	r2, [r0, #80]	; 0x50
   2ebe4:	23a03000 	movcs	r3, #0
   2ebe8:	33a03001 	movcc	r3, #1
   2ebec:	e3520000 	cmp	r2, #0
   2ebf0:	03a03001 	moveq	r3, #1
   2ebf4:	e3530000 	cmp	r3, #0
   2ebf8:	112fff1e 	bxne	lr
{
   2ebfc:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    int bytesPerRow = _activeDescriptorTable.displayPixelsX/8;
   2ec00:	e5902010 	ldr	r2, [r0, #16]
{
   2ec04:	e24dd01c 	sub	sp, sp, #28
    for (uint32_t bufIdx = 0; bufIdx < ROBSZ80_DISP_RAM_SIZE; bufIdx++)
   2ec08:	e58d300c 	str	r3, [sp, #12]
    int bytesPerRow = _activeDescriptorTable.displayPixelsX/8;
   2ec0c:	e3520000 	cmp	r2, #0
   2ec10:	e2823007 	add	r3, r2, #7
   2ec14:	b1a02003 	movlt	r2, r3
                _pDisplay->setPixel(x, y, (pScrnBuffer[bufIdx] & pixMask) ? 1 : 0, DISPLAY_FX_DEFAULT);
   2ec18:	e3e0b000 	mvn	fp, #0
   2ec1c:	e1a0a000 	mov	sl, r0
    int bytesPerRow = _activeDescriptorTable.displayPixelsX/8;
   2ec20:	e1a031c2 	asr	r3, r2, #3
   2ec24:	e58d3014 	str	r3, [sp, #20]
   2ec28:	e2803054 	add	r3, r0, #84	; 0x54
   2ec2c:	e58d3008 	str	r3, [sp, #8]
   2ec30:	e2803901 	add	r3, r0, #16384	; 0x4000
   2ec34:	e081700b 	add	r7, r1, fp
   2ec38:	e58d3010 	str	r3, [sp, #16]
        if (!_screenBufferValid || (_screenBuffer[bufIdx] != pScrnBuffer[bufIdx]))
   2ec3c:	e59d3010 	ldr	r3, [sp, #16]
   2ec40:	e5d32054 	ldrb	r2, [r3, #84]	; 0x54
   2ec44:	e5f73001 	ldrb	r3, [r7, #1]!
   2ec48:	e3520000 	cmp	r2, #0
   2ec4c:	0a000003 	beq	2ec60 <McRobsZ80::updateDisplayFromBuffer(unsigned char*, unsigned long)+0x84>
   2ec50:	e59d2008 	ldr	r2, [sp, #8]
   2ec54:	e5d22000 	ldrb	r2, [r2]
   2ec58:	e1520003 	cmp	r2, r3
   2ec5c:	0a000017 	beq	2ecc0 <McRobsZ80::updateDisplayFromBuffer(unsigned char*, unsigned long)+0xe4>
            _screenBuffer[bufIdx] = pScrnBuffer[bufIdx];
   2ec60:	e59d2008 	ldr	r2, [sp, #8]
   2ec64:	e59d1014 	ldr	r1, [sp, #20]
   2ec68:	e5c23000 	strb	r3, [r2]
   2ec6c:	e59d000c 	ldr	r0, [sp, #12]
   2ec70:	eb007f8c 	bl	4eaa8 <__aeabi_uidivmod>
            int pixMask = 0x80;
   2ec74:	e3a05080 	mov	r5, #128	; 0x80
   2ec78:	e1a09000 	mov	r9, r0
                int x = ((bufIdx % bytesPerRow) * 8) + i;
   2ec7c:	e1a04181 	lsl	r4, r1, #3
   2ec80:	e2848008 	add	r8, r4, #8
                _pDisplay->setPixel(x, y, (pScrnBuffer[bufIdx] & pixMask) ? 1 : 0, DISPLAY_FX_DEFAULT);
   2ec84:	e59a0050 	ldr	r0, [sl, #80]	; 0x50
   2ec88:	e5d72000 	ldrb	r2, [r7]
   2ec8c:	e5903000 	ldr	r3, [r0]
   2ec90:	e1120005 	tst	r2, r5
   2ec94:	e58db000 	str	fp, [sp]
   2ec98:	e593600c 	ldr	r6, [r3, #12]
   2ec9c:	e1a01004 	mov	r1, r4
   2eca0:	13a03001 	movne	r3, #1
   2eca4:	03a03000 	moveq	r3, #0
   2eca8:	e1a02009 	mov	r2, r9
   2ecac:	e2844001 	add	r4, r4, #1
   2ecb0:	e12fff36 	blx	r6
            for (int i = 0; i < 8; i++)
   2ecb4:	e1580004 	cmp	r8, r4
                pixMask = pixMask >> 1;
   2ecb8:	e1a050c5 	asr	r5, r5, #1
            for (int i = 0; i < 8; i++)
   2ecbc:	1afffff0 	bne	2ec84 <McRobsZ80::updateDisplayFromBuffer(unsigned char*, unsigned long)+0xa8>
    for (uint32_t bufIdx = 0; bufIdx < ROBSZ80_DISP_RAM_SIZE; bufIdx++)
   2ecc0:	e59d300c 	ldr	r3, [sp, #12]
   2ecc4:	e2833001 	add	r3, r3, #1
   2ecc8:	e58d300c 	str	r3, [sp, #12]
   2eccc:	e3530901 	cmp	r3, #16384	; 0x4000
   2ecd0:	e59d3008 	ldr	r3, [sp, #8]
   2ecd4:	e2833001 	add	r3, r3, #1
   2ecd8:	e58d3008 	str	r3, [sp, #8]
   2ecdc:	1affffd6 	bne	2ec3c <McRobsZ80::updateDisplayFromBuffer(unsigned char*, unsigned long)+0x60>
    _screenBufferValid = true;
   2ece0:	e3a03001 	mov	r3, #1
   2ece4:	e59d2010 	ldr	r2, [sp, #16]
   2ece8:	e5c23054 	strb	r3, [r2, #84]	; 0x54
}
   2ecec:	e28dd01c 	add	sp, sp, #28
   2ecf0:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

0002ecf4 <McRobsZ80::fileHandler(char const*, unsigned char const*, int)>:
{
   2ecf4:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   2ecf8:	e24dd094 	sub	sp, sp, #148	; 0x94
   2ecfc:	e1a07002 	mov	r7, r2
   2ed00:	e1a05003 	mov	r5, r3
    if (!jsonGetValueForKey("fileName", pFileInfo, fileName, MAX_FILE_NAME_STR))
   2ed04:	e28d2028 	add	r2, sp, #40	; 0x28
   2ed08:	e3a03064 	mov	r3, #100	; 0x64
   2ed0c:	e59f0088 	ldr	r0, [pc, #136]	; 2ed9c <McRobsZ80::fileHandler(char const*, unsigned char const*, int)+0xa8>
{
   2ed10:	e1a06001 	mov	r6, r1
    if (!jsonGetValueForKey("fileName", pFileInfo, fileName, MAX_FILE_NAME_STR))
   2ed14:	ebffd734 	bl	249ec <jsonGetValueForKey>
   2ed18:	e2504000 	subs	r4, r0, #0
   2ed1c:	1a000002 	bne	2ed2c <McRobsZ80::fileHandler(char const*, unsigned char const*, int)+0x38>
}
   2ed20:	e1a00004 	mov	r0, r4
   2ed24:	e28dd094 	add	sp, sp, #148	; 0x94
   2ed28:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
    if (jsonGetValueForKey("baseAddr", pFileInfo, baseAddrStr, MAX_VALUE_STR))
   2ed2c:	e1a01006 	mov	r1, r6
   2ed30:	e3a0301e 	mov	r3, #30
   2ed34:	e28d2008 	add	r2, sp, #8
   2ed38:	e59f0060 	ldr	r0, [pc, #96]	; 2eda0 <McRobsZ80::fileHandler(char const*, unsigned char const*, int)+0xac>
   2ed3c:	ebffd72a 	bl	249ec <jsonGetValueForKey>
   2ed40:	e2506000 	subs	r6, r0, #0
   2ed44:	01a03006 	moveq	r3, r6
   2ed48:	1a00000c 	bne	2ed80 <McRobsZ80::fileHandler(char const*, unsigned char const*, int)+0x8c>
    LogWrite(_logPrefix, LOG_DEBUG, "Processing binary file, baseAddr %04x len %d", baseAddr, fileLen);
   2ed4c:	e59f2050 	ldr	r2, [pc, #80]	; 2eda4 <McRobsZ80::fileHandler(char const*, unsigned char const*, int)+0xb0>
   2ed50:	e58d5000 	str	r5, [sp]
   2ed54:	e5920000 	ldr	r0, [r2]
   2ed58:	e3a01004 	mov	r1, #4
   2ed5c:	e59f2044 	ldr	r2, [pc, #68]	; 2eda8 <McRobsZ80::fileHandler(char const*, unsigned char const*, int)+0xb4>
   2ed60:	ebffd504 	bl	24178 <LogWrite>
    TargetState::addMemoryBlock(baseAddr, pFileData, fileLen);
   2ed64:	e1a00006 	mov	r0, r6
   2ed68:	e1a02005 	mov	r2, r5
   2ed6c:	e1a01007 	mov	r1, r7
   2ed70:	eb002eb5 	bl	3a84c <TargetState::addMemoryBlock(unsigned long, unsigned char const*, unsigned long)>
}
   2ed74:	e1a00004 	mov	r0, r4
   2ed78:	e28dd094 	add	sp, sp, #148	; 0x94
   2ed7c:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
        baseAddr = strtol(baseAddrStr, NULL, 16);
   2ed80:	e28d0008 	add	r0, sp, #8
   2ed84:	e3a02010 	mov	r2, #16
   2ed88:	e3a01000 	mov	r1, #0
   2ed8c:	eb007d63 	bl	4e320 <strtol>
   2ed90:	e6ff3070 	uxth	r3, r0
   2ed94:	e1a06003 	mov	r6, r3
   2ed98:	eaffffeb 	b	2ed4c <McRobsZ80::fileHandler(char const*, unsigned char const*, int)+0x58>
   2ed9c:	000540b8 	.word	0x000540b8
   2eda0:	00054f00 	.word	0x00054f00
   2eda4:	0006f22c 	.word	0x0006f22c
   2eda8:	00054f0c 	.word	0x00054f0c

0002edac <McRobsZ80::displayRefreshFromMirrorHw()>:
    if (HwManager::blockRead(ROBSZ80_DISP_RAM_ADDR, pScrnBuffer, ROBSZ80_DISP_RAM_SIZE, 1, 0, true) == BR_OK)
   2edac:	e3a03001 	mov	r3, #1
   2edb0:	e3a01000 	mov	r1, #0
   2edb4:	e3a02901 	mov	r2, #16384	; 0x4000
{
   2edb8:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2edbc:	e24dd901 	sub	sp, sp, #16384	; 0x4000
   2edc0:	e24dd01c 	sub	sp, sp, #28
    if (HwManager::blockRead(ROBSZ80_DISP_RAM_ADDR, pScrnBuffer, ROBSZ80_DISP_RAM_SIZE, 1, 0, true) == BR_OK)
   2edc4:	e28d4018 	add	r4, sp, #24
   2edc8:	e88d000a 	stm	sp, {r1, r3}
{
   2edcc:	e1a0a000 	mov	sl, r0
    if (HwManager::blockRead(ROBSZ80_DISP_RAM_ADDR, pScrnBuffer, ROBSZ80_DISP_RAM_SIZE, 1, 0, true) == BR_OK)
   2edd0:	e1a01004 	mov	r1, r4
   2edd4:	e1a00002 	mov	r0, r2
   2edd8:	ebfff594 	bl	2c430 <HwManager::blockRead(unsigned long, unsigned char*, unsigned long, bool, bool, bool)>
   2eddc:	e3500000 	cmp	r0, #0
   2ede0:	0a000002 	beq	2edf0 <McRobsZ80::displayRefreshFromMirrorHw()+0x44>
}
   2ede4:	e28dd901 	add	sp, sp, #16384	; 0x4000
   2ede8:	e28dd01c 	add	sp, sp, #28
   2edec:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
        updateDisplayFromBuffer(pScrnBuffer, ROBSZ80_DISP_RAM_SIZE);
   2edf0:	e59a3000 	ldr	r3, [sl]
   2edf4:	e59f2128 	ldr	r2, [pc, #296]	; 2ef24 <McRobsZ80::displayRefreshFromMirrorHw()+0x178>
   2edf8:	e5933044 	ldr	r3, [r3, #68]	; 0x44
   2edfc:	e1530002 	cmp	r3, r2
   2ee00:	1a000040 	bne	2ef08 <McRobsZ80::displayRefreshFromMirrorHw()+0x15c>
    if (!_pDisplay || (bufLen < ROBSZ80_DISP_RAM_SIZE))
   2ee04:	e59a3050 	ldr	r3, [sl, #80]	; 0x50
   2ee08:	e3530000 	cmp	r3, #0
   2ee0c:	0afffff4 	beq	2ede4 <McRobsZ80::displayRefreshFromMirrorHw()+0x38>
    int bytesPerRow = _activeDescriptorTable.displayPixelsX/8;
   2ee10:	e59a3010 	ldr	r3, [sl, #16]
                _pDisplay->setPixel(x, y, (pScrnBuffer[bufIdx] & pixMask) ? 1 : 0, DISPLAY_FX_DEFAULT);
   2ee14:	e3e0b000 	mvn	fp, #0
    int bytesPerRow = _activeDescriptorTable.displayPixelsX/8;
   2ee18:	e2832007 	add	r2, r3, #7
   2ee1c:	e3530000 	cmp	r3, #0
   2ee20:	b1a03002 	movlt	r3, r2
   2ee24:	e1a031c3 	asr	r3, r3, #3
   2ee28:	e58d3014 	str	r3, [sp, #20]
   2ee2c:	e2643001 	rsb	r3, r4, #1
   2ee30:	e58d3010 	str	r3, [sp, #16]
   2ee34:	e28a3054 	add	r3, sl, #84	; 0x54
   2ee38:	e58d3008 	str	r3, [sp, #8]
   2ee3c:	e28a3901 	add	r3, sl, #16384	; 0x4000
   2ee40:	e084700b 	add	r7, r4, fp
   2ee44:	e58d300c 	str	r3, [sp, #12]
        if (!_screenBufferValid || (_screenBuffer[bufIdx] != pScrnBuffer[bufIdx]))
   2ee48:	e59d300c 	ldr	r3, [sp, #12]
   2ee4c:	e59d2010 	ldr	r2, [sp, #16]
   2ee50:	e5d33054 	ldrb	r3, [r3, #84]	; 0x54
   2ee54:	e0820007 	add	r0, r2, r7
   2ee58:	e3530000 	cmp	r3, #0
   2ee5c:	e5f76001 	ldrb	r6, [r7, #1]!
   2ee60:	0a000003 	beq	2ee74 <McRobsZ80::displayRefreshFromMirrorHw()+0xc8>
   2ee64:	e59d3008 	ldr	r3, [sp, #8]
   2ee68:	e5d33000 	ldrb	r3, [r3]
   2ee6c:	e1530006 	cmp	r3, r6
   2ee70:	0a000017 	beq	2eed4 <McRobsZ80::displayRefreshFromMirrorHw()+0x128>
            _screenBuffer[bufIdx] = pScrnBuffer[bufIdx];
   2ee74:	e59d3008 	ldr	r3, [sp, #8]
   2ee78:	e59d1014 	ldr	r1, [sp, #20]
   2ee7c:	e5c36000 	strb	r6, [r3]
   2ee80:	eb007f08 	bl	4eaa8 <__aeabi_uidivmod>
                int x = ((bufIdx % bytesPerRow) * 8) + i;
   2ee84:	e1a04181 	lsl	r4, r1, #3
   2ee88:	e1a09000 	mov	r9, r0
            int pixMask = 0x80;
   2ee8c:	e3a05080 	mov	r5, #128	; 0x80
   2ee90:	e2848008 	add	r8, r4, #8
   2ee94:	ea000000 	b	2ee9c <McRobsZ80::displayRefreshFromMirrorHw()+0xf0>
   2ee98:	e5d76000 	ldrb	r6, [r7]
                _pDisplay->setPixel(x, y, (pScrnBuffer[bufIdx] & pixMask) ? 1 : 0, DISPLAY_FX_DEFAULT);
   2ee9c:	e59a0050 	ldr	r0, [sl, #80]	; 0x50
   2eea0:	e1160005 	tst	r6, r5
   2eea4:	e5903000 	ldr	r3, [r0]
   2eea8:	e58db000 	str	fp, [sp]
   2eeac:	e593600c 	ldr	r6, [r3, #12]
   2eeb0:	e1a01004 	mov	r1, r4
   2eeb4:	13a03001 	movne	r3, #1
   2eeb8:	03a03000 	moveq	r3, #0
   2eebc:	e1a02009 	mov	r2, r9
   2eec0:	e2844001 	add	r4, r4, #1
   2eec4:	e12fff36 	blx	r6
            for (int i = 0; i < 8; i++)
   2eec8:	e1580004 	cmp	r8, r4
                pixMask = pixMask >> 1;
   2eecc:	e1a050c5 	asr	r5, r5, #1
            for (int i = 0; i < 8; i++)
   2eed0:	1afffff0 	bne	2ee98 <McRobsZ80::displayRefreshFromMirrorHw()+0xec>
    for (uint32_t bufIdx = 0; bufIdx < ROBSZ80_DISP_RAM_SIZE; bufIdx++)
   2eed4:	e28d3901 	add	r3, sp, #16384	; 0x4000
   2eed8:	e2833017 	add	r3, r3, #23
   2eedc:	e1530007 	cmp	r3, r7
   2eee0:	e59d3008 	ldr	r3, [sp, #8]
   2eee4:	e2833001 	add	r3, r3, #1
   2eee8:	e58d3008 	str	r3, [sp, #8]
   2eeec:	1affffd5 	bne	2ee48 <McRobsZ80::displayRefreshFromMirrorHw()+0x9c>
    _screenBufferValid = true;
   2eef0:	e3a03001 	mov	r3, #1
   2eef4:	e59d200c 	ldr	r2, [sp, #12]
   2eef8:	e5c23054 	strb	r3, [r2, #84]	; 0x54
}
   2eefc:	e28dd901 	add	sp, sp, #16384	; 0x4000
   2ef00:	e28dd01c 	add	sp, sp, #28
   2ef04:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
        updateDisplayFromBuffer(pScrnBuffer, ROBSZ80_DISP_RAM_SIZE);
   2ef08:	e1a01004 	mov	r1, r4
   2ef0c:	e1a0000a 	mov	r0, sl
   2ef10:	e3a02901 	mov	r2, #16384	; 0x4000
   2ef14:	e12fff33 	blx	r3
}
   2ef18:	e28dd901 	add	sp, sp, #16384	; 0x4000
   2ef1c:	e28dd01c 	add	sp, sp, #28
   2ef20:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2ef24:	0002ebdc 	.word	0x0002ebdc

0002ef28 <McRobsZ80::busActionCompleteCallback(BR_BUS_ACTION) [clone .part.2]>:
    // Check for BUSRQ
    if (actionType == BR_BUS_ACTION_BUSRQ)
    {
        // Read memory at the location of the memory mapped screen
        uint8_t pScrnBuffer[ROBSZ80_DISP_RAM_SIZE];
        if (BusAccess::blockRead(ROBSZ80_DISP_RAM_ADDR, pScrnBuffer, ROBSZ80_DISP_RAM_SIZE, false, false) == BR_OK)
   2ef28:	e3a03000 	mov	r3, #0
   2ef2c:	e3a02901 	mov	r2, #16384	; 0x4000
void McRobsZ80::busActionCompleteCallback(BR_BUS_ACTION actionType)
   2ef30:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2ef34:	e24dd901 	sub	sp, sp, #16384	; 0x4000
   2ef38:	e24dd01c 	sub	sp, sp, #28
        if (BusAccess::blockRead(ROBSZ80_DISP_RAM_ADDR, pScrnBuffer, ROBSZ80_DISP_RAM_SIZE, false, false) == BR_OK)
   2ef3c:	e28d4018 	add	r4, sp, #24
void McRobsZ80::busActionCompleteCallback(BR_BUS_ACTION actionType)
   2ef40:	e1a0a000 	mov	sl, r0
        if (BusAccess::blockRead(ROBSZ80_DISP_RAM_ADDR, pScrnBuffer, ROBSZ80_DISP_RAM_SIZE, false, false) == BR_OK)
   2ef44:	e58d3000 	str	r3, [sp]
   2ef48:	e1a00002 	mov	r0, r2
   2ef4c:	e1a01004 	mov	r1, r4
   2ef50:	eb002961 	bl	394dc <BusAccess::blockRead(unsigned long, unsigned char*, unsigned long, bool, bool)>
   2ef54:	e3500000 	cmp	r0, #0
   2ef58:	0a000002 	beq	2ef68 <McRobsZ80::busActionCompleteCallback(BR_BUS_ACTION) [clone .part.2]+0x40>
            updateDisplayFromBuffer(pScrnBuffer, ROBSZ80_DISP_RAM_SIZE);
    }
   2ef5c:	e28dd901 	add	sp, sp, #16384	; 0x4000
   2ef60:	e28dd01c 	add	sp, sp, #28
   2ef64:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
            updateDisplayFromBuffer(pScrnBuffer, ROBSZ80_DISP_RAM_SIZE);
   2ef68:	e59a3000 	ldr	r3, [sl]
   2ef6c:	e59f2120 	ldr	r2, [pc, #288]	; 2f094 <McRobsZ80::busActionCompleteCallback(BR_BUS_ACTION) [clone .part.2]+0x16c>
   2ef70:	e5933044 	ldr	r3, [r3, #68]	; 0x44
   2ef74:	e1530002 	cmp	r3, r2
   2ef78:	1a000040 	bne	2f080 <McRobsZ80::busActionCompleteCallback(BR_BUS_ACTION) [clone .part.2]+0x158>
    if (!_pDisplay || (bufLen < ROBSZ80_DISP_RAM_SIZE))
   2ef7c:	e59a3050 	ldr	r3, [sl, #80]	; 0x50
   2ef80:	e3530000 	cmp	r3, #0
   2ef84:	0afffff4 	beq	2ef5c <McRobsZ80::busActionCompleteCallback(BR_BUS_ACTION) [clone .part.2]+0x34>
    int bytesPerRow = _activeDescriptorTable.displayPixelsX/8;
   2ef88:	e59a3010 	ldr	r3, [sl, #16]
                _pDisplay->setPixel(x, y, (pScrnBuffer[bufIdx] & pixMask) ? 1 : 0, DISPLAY_FX_DEFAULT);
   2ef8c:	e3e0b000 	mvn	fp, #0
    int bytesPerRow = _activeDescriptorTable.displayPixelsX/8;
   2ef90:	e2832007 	add	r2, r3, #7
   2ef94:	e3530000 	cmp	r3, #0
   2ef98:	b1a03002 	movlt	r3, r2
   2ef9c:	e1a031c3 	asr	r3, r3, #3
   2efa0:	e58d3014 	str	r3, [sp, #20]
   2efa4:	e2643001 	rsb	r3, r4, #1
   2efa8:	e58d3010 	str	r3, [sp, #16]
   2efac:	e28a3054 	add	r3, sl, #84	; 0x54
   2efb0:	e58d3008 	str	r3, [sp, #8]
   2efb4:	e28a3901 	add	r3, sl, #16384	; 0x4000
   2efb8:	e084700b 	add	r7, r4, fp
   2efbc:	e58d300c 	str	r3, [sp, #12]
        if (!_screenBufferValid || (_screenBuffer[bufIdx] != pScrnBuffer[bufIdx]))
   2efc0:	e59d300c 	ldr	r3, [sp, #12]
   2efc4:	e59d2010 	ldr	r2, [sp, #16]
   2efc8:	e5d33054 	ldrb	r3, [r3, #84]	; 0x54
   2efcc:	e0820007 	add	r0, r2, r7
   2efd0:	e3530000 	cmp	r3, #0
   2efd4:	e5f76001 	ldrb	r6, [r7, #1]!
   2efd8:	0a000003 	beq	2efec <McRobsZ80::busActionCompleteCallback(BR_BUS_ACTION) [clone .part.2]+0xc4>
   2efdc:	e59d3008 	ldr	r3, [sp, #8]
   2efe0:	e5d33000 	ldrb	r3, [r3]
   2efe4:	e1530006 	cmp	r3, r6
   2efe8:	0a000017 	beq	2f04c <McRobsZ80::busActionCompleteCallback(BR_BUS_ACTION) [clone .part.2]+0x124>
            _screenBuffer[bufIdx] = pScrnBuffer[bufIdx];
   2efec:	e59d3008 	ldr	r3, [sp, #8]
   2eff0:	e59d1014 	ldr	r1, [sp, #20]
   2eff4:	e5c36000 	strb	r6, [r3]
   2eff8:	eb007eaa 	bl	4eaa8 <__aeabi_uidivmod>
                int x = ((bufIdx % bytesPerRow) * 8) + i;
   2effc:	e1a04181 	lsl	r4, r1, #3
   2f000:	e1a09000 	mov	r9, r0
            int pixMask = 0x80;
   2f004:	e3a05080 	mov	r5, #128	; 0x80
   2f008:	e2848008 	add	r8, r4, #8
   2f00c:	ea000000 	b	2f014 <McRobsZ80::busActionCompleteCallback(BR_BUS_ACTION) [clone .part.2]+0xec>
   2f010:	e5d76000 	ldrb	r6, [r7]
                _pDisplay->setPixel(x, y, (pScrnBuffer[bufIdx] & pixMask) ? 1 : 0, DISPLAY_FX_DEFAULT);
   2f014:	e59a0050 	ldr	r0, [sl, #80]	; 0x50
   2f018:	e1160005 	tst	r6, r5
   2f01c:	e5903000 	ldr	r3, [r0]
   2f020:	e58db000 	str	fp, [sp]
   2f024:	e593600c 	ldr	r6, [r3, #12]
   2f028:	e1a01004 	mov	r1, r4
   2f02c:	13a03001 	movne	r3, #1
   2f030:	03a03000 	moveq	r3, #0
   2f034:	e1a02009 	mov	r2, r9
   2f038:	e2844001 	add	r4, r4, #1
   2f03c:	e12fff36 	blx	r6
            for (int i = 0; i < 8; i++)
   2f040:	e1580004 	cmp	r8, r4
                pixMask = pixMask >> 1;
   2f044:	e1a050c5 	asr	r5, r5, #1
            for (int i = 0; i < 8; i++)
   2f048:	1afffff0 	bne	2f010 <McRobsZ80::busActionCompleteCallback(BR_BUS_ACTION) [clone .part.2]+0xe8>
    for (uint32_t bufIdx = 0; bufIdx < ROBSZ80_DISP_RAM_SIZE; bufIdx++)
   2f04c:	e28d3901 	add	r3, sp, #16384	; 0x4000
   2f050:	e2833017 	add	r3, r3, #23
   2f054:	e1530007 	cmp	r3, r7
   2f058:	e59d3008 	ldr	r3, [sp, #8]
   2f05c:	e2833001 	add	r3, r3, #1
   2f060:	e58d3008 	str	r3, [sp, #8]
   2f064:	1affffd5 	bne	2efc0 <McRobsZ80::busActionCompleteCallback(BR_BUS_ACTION) [clone .part.2]+0x98>
    _screenBufferValid = true;
   2f068:	e3a03001 	mov	r3, #1
   2f06c:	e59d200c 	ldr	r2, [sp, #12]
   2f070:	e5c23054 	strb	r3, [r2, #84]	; 0x54
   2f074:	e28dd901 	add	sp, sp, #16384	; 0x4000
   2f078:	e28dd01c 	add	sp, sp, #28
   2f07c:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
            updateDisplayFromBuffer(pScrnBuffer, ROBSZ80_DISP_RAM_SIZE);
   2f080:	e1a01004 	mov	r1, r4
   2f084:	e1a0000a 	mov	r0, sl
   2f088:	e3a02901 	mov	r2, #16384	; 0x4000
   2f08c:	e12fff33 	blx	r3
   2f090:	eaffffb1 	b	2ef5c <McRobsZ80::busActionCompleteCallback(BR_BUS_ACTION) [clone .part.2]+0x34>
   2f094:	0002ebdc 	.word	0x0002ebdc

0002f098 <McRobsZ80::busActionCompleteCallback(BR_BUS_ACTION)>:
    if (actionType == BR_BUS_ACTION_BUSRQ)
   2f098:	e3510004 	cmp	r1, #4
   2f09c:	112fff1e 	bxne	lr
   2f0a0:	eaffffa0 	b	2ef28 <McRobsZ80::busActionCompleteCallback(BR_BUS_ACTION) [clone .part.2]>

0002f0a4 <McRobsZ80::McRobsZ80()>:
McRobsZ80::McRobsZ80() : McBase(_defaultDescriptorTables, sizeof(_defaultDescriptorTables)/sizeof(_defaultDescriptorTables[0]))
   2f0a4:	e92d4010 	push	{r4, lr}
   2f0a8:	e3a02001 	mov	r2, #1
   2f0ac:	e1a04000 	mov	r4, r0
   2f0b0:	e59f101c 	ldr	r1, [pc, #28]	; 2f0d4 <McRobsZ80::McRobsZ80()+0x30>
   2f0b4:	ebfffa96 	bl	2db14 <McBase::McBase(McDescriptorTable*, int)>
    _screenBufferValid = false;
   2f0b8:	e3a02000 	mov	r2, #0
McRobsZ80::McRobsZ80() : McBase(_defaultDescriptorTables, sizeof(_defaultDescriptorTables)/sizeof(_defaultDescriptorTables[0]))
   2f0bc:	e59f1014 	ldr	r1, [pc, #20]	; 2f0d8 <McRobsZ80::McRobsZ80()+0x34>
    _screenBufferValid = false;
   2f0c0:	e2843901 	add	r3, r4, #16384	; 0x4000
McRobsZ80::McRobsZ80() : McBase(_defaultDescriptorTables, sizeof(_defaultDescriptorTables)/sizeof(_defaultDescriptorTables[0]))
   2f0c4:	e5841000 	str	r1, [r4]
}
   2f0c8:	e1a00004 	mov	r0, r4
    _screenBufferValid = false;
   2f0cc:	e5c32054 	strb	r2, [r3, #84]	; 0x54
}
   2f0d0:	e8bd8010 	pop	{r4, pc}
   2f0d4:	0006f230 	.word	0x0006f230
   2f0d8:	00054eb8 	.word	0x00054eb8

0002f0dc <McTRS80::enable()>:

// Enable machine
void McTRS80::enable()
{
    // Invalidate screen buffer
    _screenBufferValid = false;
   2f0dc:	e3a03000 	mov	r3, #0
   2f0e0:	e5c03454 	strb	r3, [r0, #1108]	; 0x454
    _keyBufferDirty = false;
   2f0e4:	e5c03555 	strb	r3, [r0, #1365]	; 0x555
}
   2f0e8:	e12fff1e 	bx	lr

0002f0ec <McTRS80::disable()>:

// Disable machine
void McTRS80::disable()
{
}
   2f0ec:	e12fff1e 	bx	lr

0002f0f0 <McTRS80::keyHandler(unsigned char, unsigned char const*)>:
    _screenBufferValid = true;
}

// Handle a key press
void McTRS80::keyHandler(unsigned char ucModifiers, const unsigned char rawKeys[6])
{
   2f0f0:	e3a03000 	mov	r3, #0
   2f0f4:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2f0f8:	e24dd014 	sub	sp, sp, #20
    uint8_t keybdBytes[TRS80_KEY_BYTES];
    for (int i = 0; i < TRS80_KEY_BYTES; i++)
        keybdBytes[i] = 0;

    // Go through key codes
    int suppressShift = 0;
   2f0fc:	e1a0e003 	mov	lr, r3
            keybdBytes[5] |= 2;
            keybdBytes[7] |= 0x01;
        } else if ((rawKey >= KEY_1) && (rawKey <= KEY_9)) {
            // Handle 1..9
            int bitIdx = ((rawKey - KEY_1) + 1) % 8;
            keybdBytes[(((rawKey - KEY_1) + 1) / 8) + 4] |= (1 << bitIdx);
   2f100:	e3a04001 	mov	r4, #1
        } else if (rawKey == KEY_RIGHT) {
            // Handle Right
            keybdBytes[6] |= 0x40;
        } else if (rawKey == KEY_SPACE) {
            // Handle Space
            keybdBytes[6] |= 0x80;
   2f104:	e3e0507f 	mvn	r5, #127	; 0x7f
   2f108:	e2011002 	and	r1, r1, #2
   2f10c:	e242c001 	sub	ip, r2, #1
   2f110:	e2826005 	add	r6, r2, #5
   2f114:	e58d3008 	str	r3, [sp, #8]
   2f118:	e58d300c 	str	r3, [sp, #12]
   2f11c:	ea000008 	b	2f144 <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x54>
            int bitIdx = ((rawKey - KEY_A) + 1) % 8;
   2f120:	e2433003 	sub	r3, r3, #3
            keybdBytes[(((rawKey - KEY_A) + 1) / 8)] |= (1 << bitIdx);
   2f124:	e28d2010 	add	r2, sp, #16
   2f128:	e08271c3 	add	r7, r2, r3, asr #3
   2f12c:	e5572008 	ldrb	r2, [r7, #-8]
            int bitIdx = ((rawKey - KEY_A) + 1) % 8;
   2f130:	e2033007 	and	r3, r3, #7
            keybdBytes[(((rawKey - KEY_A) + 1) / 8)] |= (1 << bitIdx);
   2f134:	e1823314 	orr	r3, r2, r4, lsl r3
   2f138:	e5473008 	strb	r3, [r7, #-8]
    for (int keyIdx = 0; keyIdx < 6; keyIdx++) {
   2f13c:	e15c0006 	cmp	ip, r6
   2f140:	0a000010 	beq	2f188 <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x98>
        unsigned char rawKey = rawKeys[keyIdx];
   2f144:	e5fc3001 	ldrb	r3, [ip, #1]!
        if ((rawKey >= KEY_A) && (rawKey <= KEY_Z)) {
   2f148:	e2432004 	sub	r2, r3, #4
   2f14c:	e3520019 	cmp	r2, #25
   2f150:	9afffff2 	bls	2f120 <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x30>
        } else if ((rawKey == KEY_2) && ((ucModifiers & KEY_MOD_LSHIFT) != 0)) {
   2f154:	e353001f 	cmp	r3, #31
   2f158:	0a000047 	beq	2f27c <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x18c>
        } else if ((rawKey == KEY_6) && ((ucModifiers & KEY_MOD_LSHIFT) != 0)) {
   2f15c:	e3530023 	cmp	r3, #35	; 0x23
   2f160:	0a00003a 	beq	2f250 <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x160>
        } else if ((rawKey == KEY_7) && ((ucModifiers & KEY_MOD_LSHIFT) != 0)) {
   2f164:	e3530024 	cmp	r3, #36	; 0x24
   2f168:	1a00004a 	bne	2f298 <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x1a8>
   2f16c:	e3510000 	cmp	r1, #0
   2f170:	0a000039 	beq	2f25c <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x16c>
            keybdBytes[4] |= 0x40;
   2f174:	e5dd300c 	ldrb	r3, [sp, #12]
    for (int keyIdx = 0; keyIdx < 6; keyIdx++) {
   2f178:	e15c0006 	cmp	ip, r6
            keybdBytes[4] |= 0x40;
   2f17c:	e3833040 	orr	r3, r3, #64	; 0x40
   2f180:	e5cd300c 	strb	r3, [sp, #12]
    for (int keyIdx = 0; keyIdx < 6; keyIdx++) {
   2f184:	1affffee 	bne	2f144 <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x54>
   2f188:	e5dd600f 	ldrb	r6, [sp, #15]
            keybdBytes[7] |= 0x10;
        }
    }

    // Suppress shift keys if needed
    if (suppressShift) {
   2f18c:	e35e0000 	cmp	lr, #0
        kbdMap[i] = 0;
        // Set all locations that would be set in real TRS80 due to
        // matrix operation of keyboard on address lines
        for (int j = 0; j < TRS80_KEY_BYTES; j++) {
            if (i & (1 << j))
                kbdMap[i] |= keybdBytes[j];
   2f190:	e5dd300e 	ldrb	r3, [sp, #14]
   2f194:	e59fc378 	ldr	ip, [pc, #888]	; 2f514 <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x424>
        keybdBytes[7] &= 0xfc;
   2f198:	120660fc 	andne	r6, r6, #252	; 0xfc
   2f19c:	e2801e45 	add	r1, r0, #1104	; 0x450
   2f1a0:	e280ee55 	add	lr, r0, #1360	; 0x550
                kbdMap[i] |= keybdBytes[j];
   2f1a4:	e58d3000 	str	r3, [sp]
   2f1a8:	e04cc000 	sub	ip, ip, r0
   2f1ac:	e2811004 	add	r1, r1, #4
   2f1b0:	e28ee004 	add	lr, lr, #4
   2f1b4:	e5ddb009 	ldrb	fp, [sp, #9]
   2f1b8:	e5dda00a 	ldrb	sl, [sp, #10]
   2f1bc:	e5dd900b 	ldrb	r9, [sp, #11]
   2f1c0:	e5dd800c 	ldrb	r8, [sp, #12]
   2f1c4:	e5dd700d 	ldrb	r7, [sp, #13]
   2f1c8:	e5dd4008 	ldrb	r4, [sp, #8]
   2f1cc:	e3a03000 	mov	r3, #0
        }
        // Check for changes
        if (kbdMap[i] != _keyBuffer[i])
        {
            _keyBuffer[i] = kbdMap[i];
            _keyBufferDirty = true;
   2f1d0:	e3a05001 	mov	r5, #1
   2f1d4:	e58d6004 	str	r6, [sp, #4]
   2f1d8:	ea000002 	b	2f1e8 <McTRS80::keyHandler(unsigned char, unsigned char const*)+0xf8>
            if (i & (1 << j))
   2f1dc:	e3130001 	tst	r3, #1
   2f1e0:	11a03004 	movne	r3, r4
   2f1e4:	03a03000 	moveq	r3, #0
   2f1e8:	e08c2001 	add	r2, ip, r1
   2f1ec:	e3120002 	tst	r2, #2
                kbdMap[i] |= keybdBytes[j];
   2f1f0:	118b3003 	orrne	r3, fp, r3
            if (i & (1 << j))
   2f1f4:	e3120004 	tst	r2, #4
                kbdMap[i] |= keybdBytes[j];
   2f1f8:	118a3003 	orrne	r3, sl, r3
            if (i & (1 << j))
   2f1fc:	e3120008 	tst	r2, #8
                kbdMap[i] |= keybdBytes[j];
   2f200:	11893003 	orrne	r3, r9, r3
            if (i & (1 << j))
   2f204:	e3120010 	tst	r2, #16
                kbdMap[i] |= keybdBytes[j];
   2f208:	11883003 	orrne	r3, r8, r3
            if (i & (1 << j))
   2f20c:	e3120020 	tst	r2, #32
                kbdMap[i] |= keybdBytes[j];
   2f210:	11873003 	orrne	r3, r7, r3
            if (i & (1 << j))
   2f214:	e3120040 	tst	r2, #64	; 0x40
                kbdMap[i] |= keybdBytes[j];
   2f218:	159d6000 	ldrne	r6, [sp]
   2f21c:	11863003 	orrne	r3, r6, r3
            if (i & (1 << j))
   2f220:	e3120080 	tst	r2, #128	; 0x80
                kbdMap[i] |= keybdBytes[j];
   2f224:	159d2004 	ldrne	r2, [sp, #4]
   2f228:	11823003 	orrne	r3, r2, r3
        if (kbdMap[i] != _keyBuffer[i])
   2f22c:	e5f12001 	ldrb	r2, [r1, #1]!
   2f230:	e1520003 	cmp	r2, r3
            _keyBuffer[i] = kbdMap[i];
   2f234:	15c13000 	strbne	r3, [r1]
            _keyBufferDirty = true;
   2f238:	15c05555 	strbne	r5, [r0, #1365]	; 0x555
    for (uint32_t i = 0; i < TRS80_KEYBOARD_RAM_SIZE; i++) {
   2f23c:	e151000e 	cmp	r1, lr
   2f240:	e08c3001 	add	r3, ip, r1
   2f244:	1affffe4 	bne	2f1dc <McTRS80::keyHandler(unsigned char, unsigned char const*)+0xec>
    //     {
    //         uart_printf("%02x ", kbdMap[i*16+j]);
    //     }
    //     uart_printf("\n");
    // }
}
   2f248:	e28dd014 	add	sp, sp, #20
   2f24c:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
        } else if ((rawKey == KEY_6) && ((ucModifiers & KEY_MOD_LSHIFT) != 0)) {
   2f250:	e3510000 	cmp	r1, #0
            suppressShift = 1;
   2f254:	13a0e001 	movne	lr, #1
        } else if ((rawKey == KEY_6) && ((ucModifiers & KEY_MOD_LSHIFT) != 0)) {
   2f258:	1affffb7 	bne	2f13c <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x4c>
            int bitIdx = ((rawKey - KEY_1) + 1) % 8;
   2f25c:	e243301d 	sub	r3, r3, #29
            keybdBytes[(((rawKey - KEY_1) + 1) / 8) + 4] |= (1 << bitIdx);
   2f260:	e28d2010 	add	r2, sp, #16
   2f264:	e08221c3 	add	r2, r2, r3, asr #3
   2f268:	e5527004 	ldrb	r7, [r2, #-4]
            int bitIdx = ((rawKey - KEY_1) + 1) % 8;
   2f26c:	e2033007 	and	r3, r3, #7
            keybdBytes[(((rawKey - KEY_1) + 1) / 8) + 4] |= (1 << bitIdx);
   2f270:	e1873314 	orr	r3, r7, r4, lsl r3
   2f274:	e5423004 	strb	r3, [r2, #-4]
   2f278:	eaffffaf 	b	2f13c <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x4c>
        } else if ((rawKey == KEY_2) && ((ucModifiers & KEY_MOD_LSHIFT) != 0)) {
   2f27c:	e3510000 	cmp	r1, #0
   2f280:	0afffff5 	beq	2f25c <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x16c>
            suppressShift = 1;
   2f284:	e3a0e001 	mov	lr, #1
            keybdBytes[0] |= 1;
   2f288:	e5dd3008 	ldrb	r3, [sp, #8]
   2f28c:	e183300e 	orr	r3, r3, lr
   2f290:	e5cd3008 	strb	r3, [sp, #8]
            suppressShift = 1;
   2f294:	eaffffa8 	b	2f13c <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x4c>
        } else if ((rawKey == KEY_8) && (ucModifiers & KEY_MOD_LSHIFT)) {
   2f298:	e3530025 	cmp	r3, #37	; 0x25
   2f29c:	1a000005 	bne	2f2b8 <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x1c8>
   2f2a0:	e3510000 	cmp	r1, #0
   2f2a4:	0affffec 	beq	2f25c <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x16c>
            keybdBytes[5] |= 4;
   2f2a8:	e5dd300d 	ldrb	r3, [sp, #13]
   2f2ac:	e3833004 	orr	r3, r3, #4
   2f2b0:	e5cd300d 	strb	r3, [sp, #13]
   2f2b4:	eaffffa0 	b	2f13c <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x4c>
        } else if ((rawKey == KEY_9) && (ucModifiers & KEY_MOD_LSHIFT)) {
   2f2b8:	e3530026 	cmp	r3, #38	; 0x26
   2f2bc:	1a000008 	bne	2f2e4 <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x1f4>
   2f2c0:	e3510000 	cmp	r1, #0
   2f2c4:	0affffe4 	beq	2f25c <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x16c>
            keybdBytes[5] |= 1;
   2f2c8:	e5dd200d 	ldrb	r2, [sp, #13]
            keybdBytes[7] |= 0x01;
   2f2cc:	e5dd300f 	ldrb	r3, [sp, #15]
            keybdBytes[5] |= 1;
   2f2d0:	e3822001 	orr	r2, r2, #1
            keybdBytes[7] |= 0x01;
   2f2d4:	e3833001 	orr	r3, r3, #1
            keybdBytes[5] |= 1;
   2f2d8:	e5cd200d 	strb	r2, [sp, #13]
            keybdBytes[7] |= 0x01;
   2f2dc:	e5cd300f 	strb	r3, [sp, #15]
   2f2e0:	eaffff95 	b	2f13c <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x4c>
        } else if ((rawKey == KEY_0) && (ucModifiers & KEY_MOD_LSHIFT)) {
   2f2e4:	e3530027 	cmp	r3, #39	; 0x27
   2f2e8:	1a00000c 	bne	2f320 <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x230>
   2f2ec:	e3510000 	cmp	r1, #0
   2f2f0:	0a000006 	beq	2f310 <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x220>
            keybdBytes[5] |= 2;
   2f2f4:	e5dd200d 	ldrb	r2, [sp, #13]
            keybdBytes[7] |= 0x01;
   2f2f8:	e5dd300f 	ldrb	r3, [sp, #15]
            keybdBytes[5] |= 2;
   2f2fc:	e3822002 	orr	r2, r2, #2
            keybdBytes[7] |= 0x01;
   2f300:	e3833001 	orr	r3, r3, #1
            keybdBytes[5] |= 2;
   2f304:	e5cd200d 	strb	r2, [sp, #13]
            keybdBytes[7] |= 0x01;
   2f308:	e5cd300f 	strb	r3, [sp, #15]
   2f30c:	eaffff8a 	b	2f13c <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x4c>
            keybdBytes[4] |= 1;
   2f310:	e5dd300c 	ldrb	r3, [sp, #12]
   2f314:	e3833001 	orr	r3, r3, #1
   2f318:	e5cd300c 	strb	r3, [sp, #12]
   2f31c:	eaffff86 	b	2f13c <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x4c>
        } else if ((rawKey >= KEY_1) && (rawKey <= KEY_9)) {
   2f320:	e243201e 	sub	r2, r3, #30
   2f324:	e3520008 	cmp	r2, #8
   2f328:	9affffcb 	bls	2f25c <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x16c>
        } else if ((rawKey == KEY_SEMICOLON) && ((ucModifiers & KEY_MOD_LSHIFT) == 0)) {
   2f32c:	e3530033 	cmp	r3, #51	; 0x33
   2f330:	0a00000a 	beq	2f360 <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x270>
        } else if ((rawKey == KEY_APOSTROPHE) && (ucModifiers & KEY_MOD_LSHIFT)) {
   2f334:	e3530034 	cmp	r3, #52	; 0x34
   2f338:	1a00000f 	bne	2f37c <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x28c>
   2f33c:	e3510000 	cmp	r1, #0
   2f340:	0a000056 	beq	2f4a0 <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x3b0>
            keybdBytes[4] |= 4;
   2f344:	e5dd200c 	ldrb	r2, [sp, #12]
            keybdBytes[7] |= 0x01;
   2f348:	e5dd300f 	ldrb	r3, [sp, #15]
            keybdBytes[4] |= 4;
   2f34c:	e3822004 	orr	r2, r2, #4
            keybdBytes[7] |= 0x01;
   2f350:	e3833001 	orr	r3, r3, #1
            keybdBytes[4] |= 4;
   2f354:	e5cd200c 	strb	r2, [sp, #12]
            keybdBytes[7] |= 0x01;
   2f358:	e5cd300f 	strb	r3, [sp, #15]
   2f35c:	eaffff76 	b	2f13c <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x4c>
        } else if ((rawKey == KEY_SEMICOLON) && ((ucModifiers & KEY_MOD_LSHIFT) == 0)) {
   2f360:	e3510000 	cmp	r1, #0
   2f364:	e5dd300d 	ldrb	r3, [sp, #13]
   2f368:	1a000009 	bne	2f394 <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x2a4>
            keybdBytes[5] |= 8;
   2f36c:	e3833008 	orr	r3, r3, #8
   2f370:	e5cd300d 	strb	r3, [sp, #13]
            suppressShift = 1;
   2f374:	e3a0e001 	mov	lr, #1
   2f378:	eaffff6f 	b	2f13c <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x4c>
        } else if (rawKey == KEY_COMMA) {
   2f37c:	e3530036 	cmp	r3, #54	; 0x36
   2f380:	1a000007 	bne	2f3a4 <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x2b4>
            keybdBytes[5] |= 0x10;
   2f384:	e5dd300d 	ldrb	r3, [sp, #13]
   2f388:	e3833010 	orr	r3, r3, #16
   2f38c:	e5cd300d 	strb	r3, [sp, #13]
   2f390:	eaffff69 	b	2f13c <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x4c>
            keybdBytes[5] |= 4;
   2f394:	e3833004 	orr	r3, r3, #4
   2f398:	e5cd300d 	strb	r3, [sp, #13]
            suppressShift = 1;
   2f39c:	e3a0e001 	mov	lr, #1
   2f3a0:	eaffff65 	b	2f13c <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x4c>
        } else if (rawKey == KEY_DOT) {
   2f3a4:	e3530037 	cmp	r3, #55	; 0x37
            keybdBytes[5] |= 0x40;
   2f3a8:	05dd300d 	ldrbeq	r3, [sp, #13]
   2f3ac:	03833040 	orreq	r3, r3, #64	; 0x40
   2f3b0:	05cd300d 	strbeq	r3, [sp, #13]
        } else if (rawKey == KEY_DOT) {
   2f3b4:	0affff60 	beq	2f13c <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x4c>
        } else if ((rawKey == KEY_EQUAL) && ((ucModifiers & KEY_MOD_LSHIFT) == 0)) {
   2f3b8:	e353002e 	cmp	r3, #46	; 0x2e
   2f3bc:	0a00003d 	beq	2f4b8 <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x3c8>
        } else if ((rawKey == KEY_MINUS) && ((ucModifiers & KEY_MOD_LSHIFT) == 0)) {
   2f3c0:	e353002d 	cmp	r3, #45	; 0x2d
   2f3c4:	0a000048 	beq	2f4ec <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x3fc>
        } else if (rawKey == KEY_SLASH) {
   2f3c8:	e3530038 	cmp	r3, #56	; 0x38
            keybdBytes[5] |= 0x80;
   2f3cc:	05dd300d 	ldrbeq	r3, [sp, #13]
   2f3d0:	01853003 	orreq	r3, r5, r3
   2f3d4:	05cd300d 	strbeq	r3, [sp, #13]
        } else if (rawKey == KEY_SLASH) {
   2f3d8:	0affff57 	beq	2f13c <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x4c>
        } else if (rawKey == KEY_ENTER) {
   2f3dc:	e3530028 	cmp	r3, #40	; 0x28
            keybdBytes[6] |= 0x01;
   2f3e0:	05dd300e 	ldrbeq	r3, [sp, #14]
   2f3e4:	03833001 	orreq	r3, r3, #1
   2f3e8:	05cd300e 	strbeq	r3, [sp, #14]
        } else if (rawKey == KEY_ENTER) {
   2f3ec:	0affff52 	beq	2f13c <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x4c>
        } else if (rawKey == KEY_BACKSPACE) {
   2f3f0:	e353002a 	cmp	r3, #42	; 0x2a
   2f3f4:	0a000038 	beq	2f4dc <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x3ec>
        } else if (rawKey == KEY_ESC) {
   2f3f8:	e3530029 	cmp	r3, #41	; 0x29
            keybdBytes[6] |= 0x04;
   2f3fc:	05dd300e 	ldrbeq	r3, [sp, #14]
   2f400:	03833004 	orreq	r3, r3, #4
   2f404:	05cd300e 	strbeq	r3, [sp, #14]
        } else if (rawKey == KEY_ESC) {
   2f408:	0affff4b 	beq	2f13c <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x4c>
        } else if (rawKey == KEY_UP) {
   2f40c:	e3530052 	cmp	r3, #82	; 0x52
            keybdBytes[6] |= 0x08;
   2f410:	05dd300e 	ldrbeq	r3, [sp, #14]
   2f414:	03833008 	orreq	r3, r3, #8
   2f418:	05cd300e 	strbeq	r3, [sp, #14]
        } else if (rawKey == KEY_UP) {
   2f41c:	0affff46 	beq	2f13c <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x4c>
        } else if (rawKey == KEY_DOWN) {
   2f420:	e3530051 	cmp	r3, #81	; 0x51
            keybdBytes[6] |= 0x10;
   2f424:	05dd300e 	ldrbeq	r3, [sp, #14]
   2f428:	03833010 	orreq	r3, r3, #16
   2f42c:	05cd300e 	strbeq	r3, [sp, #14]
        } else if (rawKey == KEY_DOWN) {
   2f430:	0affff41 	beq	2f13c <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x4c>
        } else if (rawKey == KEY_LEFT) {
   2f434:	e3530050 	cmp	r3, #80	; 0x50
   2f438:	0a000027 	beq	2f4dc <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x3ec>
        } else if (rawKey == KEY_RIGHT) {
   2f43c:	e353004f 	cmp	r3, #79	; 0x4f
            keybdBytes[6] |= 0x40;
   2f440:	05dd300e 	ldrbeq	r3, [sp, #14]
   2f444:	03833040 	orreq	r3, r3, #64	; 0x40
   2f448:	05cd300e 	strbeq	r3, [sp, #14]
        } else if (rawKey == KEY_RIGHT) {
   2f44c:	0affff3a 	beq	2f13c <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x4c>
        } else if (rawKey == KEY_SPACE) {
   2f450:	e353002c 	cmp	r3, #44	; 0x2c
            keybdBytes[6] |= 0x80;
   2f454:	05dd300e 	ldrbeq	r3, [sp, #14]
   2f458:	01853003 	orreq	r3, r5, r3
   2f45c:	05cd300e 	strbeq	r3, [sp, #14]
        } else if (rawKey == KEY_SPACE) {
   2f460:	0affff35 	beq	2f13c <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x4c>
        } else if (rawKey == KEY_F1) {
   2f464:	e353003a 	cmp	r3, #58	; 0x3a
            keybdBytes[6] |= 0x02;
   2f468:	05dd300e 	ldrbeq	r3, [sp, #14]
   2f46c:	03833002 	orreq	r3, r3, #2
   2f470:	05cd300e 	strbeq	r3, [sp, #14]
        } else if (rawKey == KEY_F1) {
   2f474:	0affff30 	beq	2f13c <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x4c>
        } else if (rawKey == KEY_LEFTSHIFT) {
   2f478:	e35300e1 	cmp	r3, #225	; 0xe1
            keybdBytes[7] |= 0x01;
   2f47c:	05dd300f 	ldrbeq	r3, [sp, #15]
   2f480:	03833001 	orreq	r3, r3, #1
   2f484:	05cd300f 	strbeq	r3, [sp, #15]
        } else if (rawKey == KEY_LEFTSHIFT) {
   2f488:	0affff2b 	beq	2f13c <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x4c>
        } else if (rawKey == KEY_RIGHTSHIFT) {
   2f48c:	e35300e5 	cmp	r3, #229	; 0xe5
            keybdBytes[7] |= 0x02;
   2f490:	05dd300f 	ldrbeq	r3, [sp, #15]
   2f494:	03833002 	orreq	r3, r3, #2
   2f498:	05cd300f 	strbeq	r3, [sp, #15]
        } else if (rawKey == KEY_RIGHTSHIFT) {
   2f49c:	0affff26 	beq	2f13c <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x4c>
        } else if ((rawKey == KEY_LEFTCTRL) || (rawKey == KEY_RIGHTCTRL)) {
   2f4a0:	e20330fb 	and	r3, r3, #251	; 0xfb
   2f4a4:	e35300e0 	cmp	r3, #224	; 0xe0
            keybdBytes[7] |= 0x10;
   2f4a8:	05dd300f 	ldrbeq	r3, [sp, #15]
   2f4ac:	03833010 	orreq	r3, r3, #16
   2f4b0:	05cd300f 	strbeq	r3, [sp, #15]
   2f4b4:	eaffff20 	b	2f13c <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x4c>
   2f4b8:	e5dd200f 	ldrb	r2, [sp, #15]
        } else if ((rawKey == KEY_EQUAL) && ((ucModifiers & KEY_MOD_LSHIFT) == 0)) {
   2f4bc:	e3510000 	cmp	r1, #0
   2f4c0:	e3822001 	orr	r2, r2, #1
   2f4c4:	e5dd300d 	ldrb	r3, [sp, #13]
   2f4c8:	1a00000d 	bne	2f504 <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x414>
            keybdBytes[5] |= 0x20;
   2f4cc:	e3833020 	orr	r3, r3, #32
   2f4d0:	e5cd300d 	strb	r3, [sp, #13]
            keybdBytes[7] |= 0x01;
   2f4d4:	e5cd200f 	strb	r2, [sp, #15]
   2f4d8:	eaffff17 	b	2f13c <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x4c>
            keybdBytes[6] |= 0x20;
   2f4dc:	e5dd300e 	ldrb	r3, [sp, #14]
   2f4e0:	e3833020 	orr	r3, r3, #32
   2f4e4:	e5cd300e 	strb	r3, [sp, #14]
   2f4e8:	eaffff13 	b	2f13c <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x4c>
        } else if ((rawKey == KEY_MINUS) && ((ucModifiers & KEY_MOD_LSHIFT) == 0)) {
   2f4ec:	e3510000 	cmp	r1, #0
            keybdBytes[5] |= 0x20;
   2f4f0:	05dd300d 	ldrbeq	r3, [sp, #13]
            suppressShift = 1;
   2f4f4:	03a0e001 	moveq	lr, #1
            keybdBytes[5] |= 0x20;
   2f4f8:	03833020 	orreq	r3, r3, #32
   2f4fc:	05cd300d 	strbeq	r3, [sp, #13]
            suppressShift = 1;
   2f500:	eaffff0d 	b	2f13c <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x4c>
            keybdBytes[5] |= 0x8;
   2f504:	e3833008 	orr	r3, r3, #8
   2f508:	e5cd300d 	strb	r3, [sp, #13]
            keybdBytes[7] |= 0x01;
   2f50c:	e5cd200f 	strb	r2, [sp, #15]
   2f510:	eaffff09 	b	2f13c <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x4c>
   2f514:	fffffbac 	.word	0xfffffbac

0002f518 <McTRS80::busAccessCallback(unsigned long, unsigned long, unsigned long, unsigned long&)>:
    //     LogWrite(_logPrefix, LOG_DEBUG, "IORQ %s from %04x %02x", 
    //             (flags & BR_CTRL_BUS_RD_MASK) ? "RD" : ((flags & BR_CTRL_BUS_WR_MASK) ? "WR" : "??"),
    //             addr, 
    //             (flags & BR_CTRL_BUS_WR_MASK) ? data : retVal);
    // Check for read from IO
    if ((flags & BR_CTRL_BUS_RD_MASK) && (flags & BR_CTRL_BUS_IORQ_MASK))
   2f518:	e2033009 	and	r3, r3, #9
    {
        // Decode port
        if (addr == 0x13)  // Joystick
   2f51c:	e3530009 	cmp	r3, #9
   2f520:	03510013 	cmpeq	r1, #19
        {
            // Indicate no buttons are pressed
            retVal = 0xff;
   2f524:	03a030ff 	moveq	r3, #255	; 0xff
   2f528:	059d2000 	ldreq	r2, [sp]
   2f52c:	05823000 	streq	r3, [r2]
        if ((addr >= 0x37ec) && (addr < 0x37ef))
        {
            handleWD1771DiskController(addr-0x37ec, data, flags, retVal);
        }
    }
}
   2f530:	e12fff1e 	bx	lr

0002f534 <McTRS80::fileHandler(char const*, unsigned char const*, int)>:
{
   2f534:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   2f538:	e1a04001 	mov	r4, r1
    LogWrite(_logPrefix, LOG_DEBUG, "fileHandler %s", pFileInfo);
   2f53c:	e59f5128 	ldr	r5, [pc, #296]	; 2f66c <McTRS80::fileHandler(char const*, unsigned char const*, int)+0x138>
{
   2f540:	e24dd090 	sub	sp, sp, #144	; 0x90
    LogWrite(_logPrefix, LOG_DEBUG, "fileHandler %s", pFileInfo);
   2f544:	e5950000 	ldr	r0, [r5]
{
   2f548:	e1a08002 	mov	r8, r2
   2f54c:	e1a06003 	mov	r6, r3
    LogWrite(_logPrefix, LOG_DEBUG, "fileHandler %s", pFileInfo);
   2f550:	e59f2118 	ldr	r2, [pc, #280]	; 2f670 <McTRS80::fileHandler(char const*, unsigned char const*, int)+0x13c>
   2f554:	e1a03001 	mov	r3, r1
   2f558:	e3a01004 	mov	r1, #4
   2f55c:	ebffd305 	bl	24178 <LogWrite>
    if (!jsonGetValueForKey("fileName", pFileInfo, fileName, MAX_FILE_NAME_STR))
   2f560:	e1a01004 	mov	r1, r4
   2f564:	e28d2028 	add	r2, sp, #40	; 0x28
   2f568:	e3a03064 	mov	r3, #100	; 0x64
   2f56c:	e59f0100 	ldr	r0, [pc, #256]	; 2f674 <McTRS80::fileHandler(char const*, unsigned char const*, int)+0x140>
   2f570:	ebffd51d 	bl	249ec <jsonGetValueForKey>
   2f574:	e2507000 	subs	r7, r0, #0
   2f578:	0a00002d 	beq	2f634 <McTRS80::fileHandler(char const*, unsigned char const*, int)+0x100>
    const char* pFileType = strstr(fileName, ".");
   2f57c:	e3a0102e 	mov	r1, #46	; 0x2e
   2f580:	e28d0028 	add	r0, sp, #40	; 0x28
   2f584:	eb0076b9 	bl	4d070 <strchr>
        pFileType = pEmpty;
   2f588:	e59f30e8 	ldr	r3, [pc, #232]	; 2f678 <McTRS80::fileHandler(char const*, unsigned char const*, int)+0x144>
    if (strcasecmp(pFileType, ".cmd") == 0)
   2f58c:	e3500000 	cmp	r0, #0
   2f590:	01a00003 	moveq	r0, r3
   2f594:	e59f10e0 	ldr	r1, [pc, #224]	; 2f67c <McTRS80::fileHandler(char const*, unsigned char const*, int)+0x148>
   2f598:	eb00767b 	bl	4cf8c <strcasecmp>
   2f59c:	e3500000 	cmp	r0, #0
   2f5a0:	0a000013 	beq	2f5f4 <McTRS80::fileHandler(char const*, unsigned char const*, int)+0xc0>
        if (jsonGetValueForKey("baseAddr", pFileInfo, baseAddrStr, MAX_VALUE_STR))
   2f5a4:	e1a01004 	mov	r1, r4
   2f5a8:	e3a0301e 	mov	r3, #30
   2f5ac:	e28d2008 	add	r2, sp, #8
   2f5b0:	e59f00c8 	ldr	r0, [pc, #200]	; 2f680 <McTRS80::fileHandler(char const*, unsigned char const*, int)+0x14c>
   2f5b4:	ebffd50c 	bl	249ec <jsonGetValueForKey>
   2f5b8:	e2504000 	subs	r4, r0, #0
   2f5bc:	01a03004 	moveq	r3, r4
   2f5c0:	1a000022 	bne	2f650 <McTRS80::fileHandler(char const*, unsigned char const*, int)+0x11c>
        LogWrite(_logPrefix, LOG_DEBUG, "Processing binary file, baseAddr %04x len %d", baseAddr, fileLen);
   2f5c4:	e5950000 	ldr	r0, [r5]
   2f5c8:	e58d6000 	str	r6, [sp]
   2f5cc:	e59f20b0 	ldr	r2, [pc, #176]	; 2f684 <McTRS80::fileHandler(char const*, unsigned char const*, int)+0x150>
   2f5d0:	e3a01004 	mov	r1, #4
   2f5d4:	ebffd2e7 	bl	24178 <LogWrite>
        TargetState::addMemoryBlock(baseAddr, pFileData, fileLen);
   2f5d8:	e1a00004 	mov	r0, r4
   2f5dc:	e1a02006 	mov	r2, r6
   2f5e0:	e1a01008 	mov	r1, r8
   2f5e4:	eb002c98 	bl	3a84c <TargetState::addMemoryBlock(unsigned long, unsigned char const*, unsigned long)>
}
   2f5e8:	e1a00007 	mov	r0, r7
   2f5ec:	e28dd090 	add	sp, sp, #144	; 0x90
   2f5f0:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
        McTRS80CmdFormat cmdFormat;
   2f5f4:	e28d0008 	add	r0, sp, #8
   2f5f8:	ebffe731 	bl	292c4 <McTRS80CmdFormat::McTRS80CmdFormat()>
        LogWrite(_logPrefix, LOG_DEBUG, "Processing TRS80 CMD file len %d", fileLen);
   2f5fc:	e1a03006 	mov	r3, r6
   2f600:	e5950000 	ldr	r0, [r5]
   2f604:	e59f207c 	ldr	r2, [pc, #124]	; 2f688 <McTRS80::fileHandler(char const*, unsigned char const*, int)+0x154>
   2f608:	e3a01004 	mov	r1, #4
   2f60c:	ebffd2d9 	bl	24178 <LogWrite>
        cmdFormat.proc(TargetState::addMemoryBlock, TargetState::setTargetRegisters, pFileData, fileLen);
   2f610:	e28d0008 	add	r0, sp, #8
   2f614:	e58d6000 	str	r6, [sp]
   2f618:	e1a03008 	mov	r3, r8
   2f61c:	e59f2068 	ldr	r2, [pc, #104]	; 2f68c <McTRS80::fileHandler(char const*, unsigned char const*, int)+0x158>
   2f620:	e59f1068 	ldr	r1, [pc, #104]	; 2f690 <McTRS80::fileHandler(char const*, unsigned char const*, int)+0x15c>
   2f624:	ebffe727 	bl	292c8 <McTRS80CmdFormat::proc(void (*)(unsigned long, unsigned char const*, unsigned long), void (*)(Z80Registers const&), unsigned char const*, int)>
}
   2f628:	e1a00007 	mov	r0, r7
   2f62c:	e28dd090 	add	sp, sp, #144	; 0x90
   2f630:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
        LogWrite(_logPrefix, LOG_DEBUG, "failed to get key fileName");
   2f634:	e5950000 	ldr	r0, [r5]
   2f638:	e59f2054 	ldr	r2, [pc, #84]	; 2f694 <McTRS80::fileHandler(char const*, unsigned char const*, int)+0x160>
   2f63c:	e3a01004 	mov	r1, #4
   2f640:	ebffd2cc 	bl	24178 <LogWrite>
}
   2f644:	e1a00007 	mov	r0, r7
   2f648:	e28dd090 	add	sp, sp, #144	; 0x90
   2f64c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
            baseAddr = strtol(baseAddrStr, NULL, 16);
   2f650:	e28d0008 	add	r0, sp, #8
   2f654:	e3a02010 	mov	r2, #16
   2f658:	e3a01000 	mov	r1, #0
   2f65c:	eb007b2f 	bl	4e320 <strtol>
   2f660:	e6ff3070 	uxth	r3, r0
   2f664:	e1a04003 	mov	r4, r3
   2f668:	eaffffd5 	b	2f5c4 <McTRS80::fileHandler(char const*, unsigned char const*, int)+0x90>
   2f66c:	0006f274 	.word	0x0006f274
   2f670:	00054f9c 	.word	0x00054f9c
   2f674:	000540b8 	.word	0x000540b8
   2f678:	00053e00 	.word	0x00053e00
   2f67c:	00054fc8 	.word	0x00054fc8
   2f680:	00054f00 	.word	0x00054f00
   2f684:	00054f0c 	.word	0x00054f0c
   2f688:	00054fd0 	.word	0x00054fd0
   2f68c:	0003a970 	.word	0x0003a970
   2f690:	0003a84c 	.word	0x0003a84c
   2f694:	00054fac 	.word	0x00054fac

0002f698 <McTRS80::busActionCompleteCallback(BR_BUS_ACTION) [clone .part.2]>:
    // Check for BUSRQ
    if (actionType == BR_BUS_ACTION_BUSRQ)
    {
        // Read memory of RC2014 at the location of the TRS80 memory mapped screen
        unsigned char pScrnBuffer[TRS80_DISP_RAM_SIZE];
        if (BusAccess::blockRead(TRS80_DISP_RAM_ADDR, pScrnBuffer, TRS80_DISP_RAM_SIZE, false, false) == BR_OK)
   2f698:	e3a03000 	mov	r3, #0
void McTRS80::busActionCompleteCallback(BR_BUS_ACTION actionType)
   2f69c:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2f6a0:	e24dde43 	sub	sp, sp, #1072	; 0x430
   2f6a4:	e24dd004 	sub	sp, sp, #4
   2f6a8:	e1a07000 	mov	r7, r0
        if (BusAccess::blockRead(TRS80_DISP_RAM_ADDR, pScrnBuffer, TRS80_DISP_RAM_SIZE, false, false) == BR_OK)
   2f6ac:	e58d3000 	str	r3, [sp]
   2f6b0:	e28d1030 	add	r1, sp, #48	; 0x30
   2f6b4:	e3a02b01 	mov	r2, #1024	; 0x400
   2f6b8:	e3a00b0f 	mov	r0, #15360	; 0x3c00
   2f6bc:	eb002786 	bl	394dc <BusAccess::blockRead(unsigned long, unsigned char*, unsigned long, bool, bool)>
   2f6c0:	e250b000 	subs	fp, r0, #0
   2f6c4:	1a000032 	bne	2f794 <McTRS80::busActionCompleteCallback(BR_BUS_ACTION) [clone .part.2]+0xfc>
    if (!_pDisplay || (bufLen < TRS80_DISP_RAM_SIZE))
   2f6c8:	e5973050 	ldr	r3, [r7, #80]	; 0x50
   2f6cc:	e3530000 	cmp	r3, #0
   2f6d0:	0a00002f 	beq	2f794 <McTRS80::busActionCompleteCallback(BR_BUS_ACTION) [clone .part.2]+0xfc>
    int cols = _activeDescriptorTable.displayPixelsX / _activeDescriptorTable.displayCellX; 
   2f6d4:	e5971018 	ldr	r1, [r7, #24]
   2f6d8:	e5970010 	ldr	r0, [r7, #16]
   2f6dc:	eb007cf9 	bl	4eac8 <__divsi3>
    int rows = _activeDescriptorTable.displayPixelsY / _activeDescriptorTable.displayCellY;
   2f6e0:	e597101c 	ldr	r1, [r7, #28]
    int cols = _activeDescriptorTable.displayPixelsX / _activeDescriptorTable.displayCellX; 
   2f6e4:	e1a0a000 	mov	sl, r0
    int rows = _activeDescriptorTable.displayPixelsY / _activeDescriptorTable.displayCellY;
   2f6e8:	e5970014 	ldr	r0, [r7, #20]
   2f6ec:	eb007cf5 	bl	4eac8 <__divsi3>
    for (int k = 0; k < rows; k++) 
   2f6f0:	e2503000 	subs	r3, r0, #0
   2f6f4:	e58d3024 	str	r3, [sp, #36]	; 0x24
   2f6f8:	da000023 	ble	2f78c <McTRS80::busActionCompleteCallback(BR_BUS_ACTION) [clone .part.2]+0xf4>
   2f6fc:	e35a0000 	cmp	sl, #0
   2f700:	da000021 	ble	2f78c <McTRS80::busActionCompleteCallback(BR_BUS_ACTION) [clone .part.2]+0xf4>
   2f704:	e1a0900b 	mov	r9, fp
   2f708:	e28d302f 	add	r3, sp, #47	; 0x2f
   2f70c:	e58d3028 	str	r3, [sp, #40]	; 0x28
   2f710:	e2873054 	add	r3, r7, #84	; 0x54
   2f714:	e58d302c 	str	r3, [sp, #44]	; 0x2c
        for (int i = 0; i < cols; i++)
   2f718:	e3a04000 	mov	r4, #0
   2f71c:	e59d3028 	ldr	r3, [sp, #40]	; 0x28
   2f720:	e083600b 	add	r6, r3, fp
   2f724:	e59d302c 	ldr	r3, [sp, #44]	; 0x2c
   2f728:	e083500b 	add	r5, r3, fp
            if (!_screenBufferValid || (_screenBuffer[cellIdx] != pScrnBuffer[cellIdx]))
   2f72c:	e5d72454 	ldrb	r2, [r7, #1108]	; 0x454
   2f730:	e5f63001 	ldrb	r3, [r6, #1]!
   2f734:	e3520000 	cmp	r2, #0
   2f738:	0a000002 	beq	2f748 <McTRS80::busActionCompleteCallback(BR_BUS_ACTION) [clone .part.2]+0xb0>
   2f73c:	e5d52000 	ldrb	r2, [r5]
   2f740:	e1520003 	cmp	r2, r3
   2f744:	0a000007 	beq	2f768 <McTRS80::busActionCompleteCallback(BR_BUS_ACTION) [clone .part.2]+0xd0>
                _pDisplay->write(i, k, (char)pScrnBuffer[cellIdx]);
   2f748:	e5970050 	ldr	r0, [r7, #80]	; 0x50
   2f74c:	e1a01004 	mov	r1, r4
   2f750:	e5902000 	ldr	r2, [r0]
   2f754:	e5928008 	ldr	r8, [r2, #8]
   2f758:	e1a02009 	mov	r2, r9
   2f75c:	e12fff38 	blx	r8
                _screenBuffer[cellIdx] = pScrnBuffer[cellIdx];
   2f760:	e5d63000 	ldrb	r3, [r6]
   2f764:	e5c53000 	strb	r3, [r5]
        for (int i = 0; i < cols; i++)
   2f768:	e2844001 	add	r4, r4, #1
   2f76c:	e15a0004 	cmp	sl, r4
   2f770:	e2855001 	add	r5, r5, #1
   2f774:	1affffec 	bne	2f72c <McTRS80::busActionCompleteCallback(BR_BUS_ACTION) [clone .part.2]+0x94>
    for (int k = 0; k < rows; k++) 
   2f778:	e59d3024 	ldr	r3, [sp, #36]	; 0x24
   2f77c:	e2899001 	add	r9, r9, #1
   2f780:	e1530009 	cmp	r3, r9
   2f784:	e08bb00a 	add	fp, fp, sl
   2f788:	1affffe2 	bne	2f718 <McTRS80::busActionCompleteCallback(BR_BUS_ACTION) [clone .part.2]+0x80>
    _screenBufferValid = true;
   2f78c:	e3a03001 	mov	r3, #1
   2f790:	e5c73454 	strb	r3, [r7, #1108]	; 0x454
            updateDisplayFromBuffer(pScrnBuffer, TRS80_DISP_RAM_SIZE);

        // Check for key presses and send to the TRS80 if necessary
        if (_keyBufferDirty)
   2f794:	e5d73555 	ldrb	r3, [r7, #1365]	; 0x555
   2f798:	e3530000 	cmp	r3, #0
   2f79c:	1a000002 	bne	2f7ac <McTRS80::busActionCompleteCallback(BR_BUS_ACTION) [clone .part.2]+0x114>
                    _keyBuffer[8], _keyBuffer[16], _keyBuffer[32], _keyBuffer[64], _keyBuffer[128]);
            BusAccess::blockWrite(TRS80_KEYBOARD_ADDR, _keyBuffer, TRS80_KEYBOARD_RAM_SIZE, false, false);
            _keyBufferDirty = false;
        }
    }
}
   2f7a0:	e28dde43 	add	sp, sp, #1072	; 0x430
   2f7a4:	e28dd004 	add	sp, sp, #4
   2f7a8:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
            BusAccess::blockWrite(TRS80_KEYBOARD_ADDR, _keyBuffer, TRS80_KEYBOARD_RAM_SIZE, false, false);
   2f7ac:	e3a04000 	mov	r4, #0
                LogWrite(_logPrefix, LOG_DEBUG, "KB Dirty %02x %02x %02x %02x %02x %02x %02x %02x",
   2f7b0:	e59f2078 	ldr	r2, [pc, #120]	; 2f830 <McTRS80::busActionCompleteCallback(BR_BUS_ACTION) [clone .part.2]+0x198>
   2f7b4:	e5d714d5 	ldrb	r1, [r7, #1237]	; 0x4d5
   2f7b8:	e5920000 	ldr	r0, [r2]
   2f7bc:	e5d72495 	ldrb	r2, [r7, #1173]	; 0x495
   2f7c0:	e5d73455 	ldrb	r3, [r7, #1109]	; 0x455
   2f7c4:	e5d7c475 	ldrb	ip, [r7, #1141]	; 0x475
   2f7c8:	e58d101c 	str	r1, [sp, #28]
   2f7cc:	e5d71465 	ldrb	r1, [r7, #1125]	; 0x465
   2f7d0:	e58d2018 	str	r2, [sp, #24]
   2f7d4:	e5d7245d 	ldrb	r2, [r7, #1117]	; 0x45d
   2f7d8:	e58dc014 	str	ip, [sp, #20]
   2f7dc:	e5d7c459 	ldrb	ip, [r7, #1113]	; 0x459
   2f7e0:	e58d1010 	str	r1, [sp, #16]
   2f7e4:	e5d71457 	ldrb	r1, [r7, #1111]	; 0x457
   2f7e8:	e58d200c 	str	r2, [sp, #12]
   2f7ec:	e5d72456 	ldrb	r2, [r7, #1110]	; 0x456
   2f7f0:	e98d1002 	stmib	sp, {r1, ip}
   2f7f4:	e58d2000 	str	r2, [sp]
   2f7f8:	e3a01004 	mov	r1, #4
   2f7fc:	e59f2030 	ldr	r2, [pc, #48]	; 2f834 <McTRS80::busActionCompleteCallback(BR_BUS_ACTION) [clone .part.2]+0x19c>
   2f800:	ebffd25c 	bl	24178 <LogWrite>
            BusAccess::blockWrite(TRS80_KEYBOARD_ADDR, _keyBuffer, TRS80_KEYBOARD_RAM_SIZE, false, false);
   2f804:	e2871e45 	add	r1, r7, #1104	; 0x450
   2f808:	e58d4000 	str	r4, [sp]
   2f80c:	e1a03004 	mov	r3, r4
   2f810:	e2811005 	add	r1, r1, #5
   2f814:	e3a02c01 	mov	r2, #256	; 0x100
   2f818:	e3a00b0e 	mov	r0, #14336	; 0x3800
   2f81c:	eb00266a 	bl	391cc <BusAccess::blockWrite(unsigned long, unsigned char const*, unsigned long, bool, bool)>
            _keyBufferDirty = false;
   2f820:	e5c74555 	strb	r4, [r7, #1365]	; 0x555
}
   2f824:	e28dde43 	add	sp, sp, #1072	; 0x430
   2f828:	e28dd004 	add	sp, sp, #4
   2f82c:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2f830:	0006f274 	.word	0x0006f274
   2f834:	00054ff4 	.word	0x00054ff4

0002f838 <McTRS80::busActionCompleteCallback(BR_BUS_ACTION)>:
    if (actionType == BR_BUS_ACTION_BUSRQ)
   2f838:	e3510004 	cmp	r1, #4
   2f83c:	112fff1e 	bxne	lr
   2f840:	eaffff94 	b	2f698 <McTRS80::busActionCompleteCallback(BR_BUS_ACTION) [clone .part.2]>

0002f844 <McTRS80::displayRefreshFromMirrorHw()>:
    if (HwManager::blockRead(TRS80_DISP_RAM_ADDR, pScrnBuffer, TRS80_DISP_RAM_SIZE, false, 0, true) == BR_OK)
   2f844:	e3a02001 	mov	r2, #1
   2f848:	e3a03000 	mov	r3, #0
{
   2f84c:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2f850:	e24dde41 	sub	sp, sp, #1040	; 0x410
   2f854:	e24dd00c 	sub	sp, sp, #12
    if (HwManager::blockRead(TRS80_DISP_RAM_ADDR, pScrnBuffer, TRS80_DISP_RAM_SIZE, false, 0, true) == BR_OK)
   2f858:	e58d2004 	str	r2, [sp, #4]
{
   2f85c:	e1a07000 	mov	r7, r0
    if (HwManager::blockRead(TRS80_DISP_RAM_ADDR, pScrnBuffer, TRS80_DISP_RAM_SIZE, false, 0, true) == BR_OK)
   2f860:	e58d3000 	str	r3, [sp]
   2f864:	e28d1018 	add	r1, sp, #24
   2f868:	e3a02b01 	mov	r2, #1024	; 0x400
   2f86c:	e3a00b0f 	mov	r0, #15360	; 0x3c00
   2f870:	ebfff2ee 	bl	2c430 <HwManager::blockRead(unsigned long, unsigned char*, unsigned long, bool, bool, bool)>
   2f874:	e250b000 	subs	fp, r0, #0
   2f878:	1a000032 	bne	2f948 <McTRS80::displayRefreshFromMirrorHw()+0x104>
    if (!_pDisplay || (bufLen < TRS80_DISP_RAM_SIZE))
   2f87c:	e5973050 	ldr	r3, [r7, #80]	; 0x50
   2f880:	e3530000 	cmp	r3, #0
   2f884:	0a00002f 	beq	2f948 <McTRS80::displayRefreshFromMirrorHw()+0x104>
    int cols = _activeDescriptorTable.displayPixelsX / _activeDescriptorTable.displayCellX; 
   2f888:	e5971018 	ldr	r1, [r7, #24]
   2f88c:	e5970010 	ldr	r0, [r7, #16]
   2f890:	eb007c8c 	bl	4eac8 <__divsi3>
    int rows = _activeDescriptorTable.displayPixelsY / _activeDescriptorTable.displayCellY;
   2f894:	e597101c 	ldr	r1, [r7, #28]
    int cols = _activeDescriptorTable.displayPixelsX / _activeDescriptorTable.displayCellX; 
   2f898:	e1a0a000 	mov	sl, r0
    int rows = _activeDescriptorTable.displayPixelsY / _activeDescriptorTable.displayCellY;
   2f89c:	e5970014 	ldr	r0, [r7, #20]
   2f8a0:	eb007c88 	bl	4eac8 <__divsi3>
    for (int k = 0; k < rows; k++) 
   2f8a4:	e2503000 	subs	r3, r0, #0
   2f8a8:	e58d300c 	str	r3, [sp, #12]
   2f8ac:	da000023 	ble	2f940 <McTRS80::displayRefreshFromMirrorHw()+0xfc>
   2f8b0:	e35a0000 	cmp	sl, #0
   2f8b4:	da000021 	ble	2f940 <McTRS80::displayRefreshFromMirrorHw()+0xfc>
   2f8b8:	e1a0900b 	mov	r9, fp
   2f8bc:	e28d3017 	add	r3, sp, #23
   2f8c0:	e58d3010 	str	r3, [sp, #16]
   2f8c4:	e2873054 	add	r3, r7, #84	; 0x54
   2f8c8:	e58d3014 	str	r3, [sp, #20]
        for (int i = 0; i < cols; i++)
   2f8cc:	e3a04000 	mov	r4, #0
   2f8d0:	e59d3010 	ldr	r3, [sp, #16]
   2f8d4:	e083600b 	add	r6, r3, fp
   2f8d8:	e59d3014 	ldr	r3, [sp, #20]
   2f8dc:	e083500b 	add	r5, r3, fp
            if (!_screenBufferValid || (_screenBuffer[cellIdx] != pScrnBuffer[cellIdx]))
   2f8e0:	e5d72454 	ldrb	r2, [r7, #1108]	; 0x454
   2f8e4:	e5f63001 	ldrb	r3, [r6, #1]!
   2f8e8:	e3520000 	cmp	r2, #0
   2f8ec:	0a000002 	beq	2f8fc <McTRS80::displayRefreshFromMirrorHw()+0xb8>
   2f8f0:	e5d52000 	ldrb	r2, [r5]
   2f8f4:	e1520003 	cmp	r2, r3
   2f8f8:	0a000007 	beq	2f91c <McTRS80::displayRefreshFromMirrorHw()+0xd8>
                _pDisplay->write(i, k, (char)pScrnBuffer[cellIdx]);
   2f8fc:	e5970050 	ldr	r0, [r7, #80]	; 0x50
   2f900:	e1a01004 	mov	r1, r4
   2f904:	e5902000 	ldr	r2, [r0]
   2f908:	e5928008 	ldr	r8, [r2, #8]
   2f90c:	e1a02009 	mov	r2, r9
   2f910:	e12fff38 	blx	r8
                _screenBuffer[cellIdx] = pScrnBuffer[cellIdx];
   2f914:	e5d63000 	ldrb	r3, [r6]
   2f918:	e5c53000 	strb	r3, [r5]
        for (int i = 0; i < cols; i++)
   2f91c:	e2844001 	add	r4, r4, #1
   2f920:	e15a0004 	cmp	sl, r4
   2f924:	e2855001 	add	r5, r5, #1
   2f928:	1affffec 	bne	2f8e0 <McTRS80::displayRefreshFromMirrorHw()+0x9c>
    for (int k = 0; k < rows; k++) 
   2f92c:	e59d300c 	ldr	r3, [sp, #12]
   2f930:	e2899001 	add	r9, r9, #1
   2f934:	e1530009 	cmp	r3, r9
   2f938:	e08bb00a 	add	fp, fp, sl
   2f93c:	1affffe2 	bne	2f8cc <McTRS80::displayRefreshFromMirrorHw()+0x88>
    _screenBufferValid = true;
   2f940:	e3a03001 	mov	r3, #1
   2f944:	e5c73454 	strb	r3, [r7, #1108]	; 0x454
    if (_keyBufferDirty && HwManager::getMemoryEmulationMode())
   2f948:	e5d73555 	ldrb	r3, [r7, #1365]	; 0x555
   2f94c:	e3530000 	cmp	r3, #0
   2f950:	0a000003 	beq	2f964 <McTRS80::displayRefreshFromMirrorHw()+0x120>
        return _memoryEmulationMode;
   2f954:	e59f304c 	ldr	r3, [pc, #76]	; 2f9a8 <McTRS80::displayRefreshFromMirrorHw()+0x164>
   2f958:	e5d33000 	ldrb	r3, [r3]
   2f95c:	e3530000 	cmp	r3, #0
   2f960:	1a000002 	bne	2f970 <McTRS80::displayRefreshFromMirrorHw()+0x12c>
}
   2f964:	e28dde41 	add	sp, sp, #1040	; 0x410
   2f968:	e28dd00c 	add	sp, sp, #12
   2f96c:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
        HwManager::blockWrite(TRS80_KEYBOARD_ADDR, _keyBuffer, TRS80_KEYBOARD_RAM_SIZE, false, 0, true);
   2f970:	e3a04000 	mov	r4, #0
   2f974:	e3a03001 	mov	r3, #1
   2f978:	e2871e45 	add	r1, r7, #1104	; 0x450
   2f97c:	e58d3004 	str	r3, [sp, #4]
   2f980:	e58d4000 	str	r4, [sp]
   2f984:	e1a03004 	mov	r3, r4
   2f988:	e2811005 	add	r1, r1, #5
   2f98c:	e3a02c01 	mov	r2, #256	; 0x100
   2f990:	e3a00b0e 	mov	r0, #14336	; 0x3800
   2f994:	ebfff263 	bl	2c328 <HwManager::blockWrite(unsigned long, unsigned char const*, unsigned long, bool, bool, bool)>
        _keyBufferDirty = false;
   2f998:	e5c74555 	strb	r4, [r7, #1365]	; 0x555
}
   2f99c:	e28dde41 	add	sp, sp, #1040	; 0x410
   2f9a0:	e28dd00c 	add	sp, sp, #12
   2f9a4:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2f9a8:	00074d94 	.word	0x00074d94

0002f9ac <McTRS80::McTRS80()>:
McTRS80::McTRS80() : McBase(_defaultDescriptorTables, sizeof(_defaultDescriptorTables)/sizeof(_defaultDescriptorTables[0]))
   2f9ac:	e92d4010 	push	{r4, lr}
   2f9b0:	e1a04000 	mov	r4, r0
   2f9b4:	e3a02001 	mov	r2, #1
   2f9b8:	e59f1034 	ldr	r1, [pc, #52]	; 2f9f4 <McTRS80::McTRS80()+0x48>
   2f9bc:	ebfff854 	bl	2db14 <McBase::McBase(McDescriptorTable*, int)>
   2f9c0:	e1a00004 	mov	r0, r4
   2f9c4:	e59f302c 	ldr	r3, [pc, #44]	; 2f9f8 <McTRS80::McTRS80()+0x4c>
   2f9c8:	e3a02c01 	mov	r2, #256	; 0x100
   2f9cc:	e4803450 	str	r3, [r0], #1104	; 0x450
   2f9d0:	e3a01000 	mov	r1, #0
   2f9d4:	e2800005 	add	r0, r0, #5
   2f9d8:	eb007526 	bl	4ce78 <memset>
    _keyBufferDirty = true;
   2f9dc:	e3a02001 	mov	r2, #1
    _screenBufferValid = false;
   2f9e0:	e3a03000 	mov	r3, #0
    _keyBufferDirty = true;
   2f9e4:	e5c42555 	strb	r2, [r4, #1365]	; 0x555
    _screenBufferValid = false;
   2f9e8:	e5c43454 	strb	r3, [r4, #1108]	; 0x454
}
   2f9ec:	e1a00004 	mov	r0, r4
   2f9f0:	e8bd8010 	pop	{r4, pc}
   2f9f4:	0006f278 	.word	0x0006f278
   2f9f8:	00054f58 	.word	0x00054f58

0002f9fc <McTRS80::updateDisplayFromBuffer(unsigned char*, unsigned long)>:
{
   2f9fc:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if (!_pDisplay || (bufLen < TRS80_DISP_RAM_SIZE))
   2fa00:	e3520b01 	cmp	r2, #1024	; 0x400
   2fa04:	e5902050 	ldr	r2, [r0, #80]	; 0x50
   2fa08:	23a08000 	movcs	r8, #0
   2fa0c:	33a08001 	movcc	r8, #1
   2fa10:	e3520000 	cmp	r2, #0
   2fa14:	03a08001 	moveq	r8, #1
   2fa18:	e3580000 	cmp	r8, #0
{
   2fa1c:	e24dd00c 	sub	sp, sp, #12
    if (!_pDisplay || (bufLen < TRS80_DISP_RAM_SIZE))
   2fa20:	0a000001 	beq	2fa2c <McTRS80::updateDisplayFromBuffer(unsigned char*, unsigned long)+0x30>
}
   2fa24:	e28dd00c 	add	sp, sp, #12
   2fa28:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2fa2c:	e1a07000 	mov	r7, r0
   2fa30:	e1a0b001 	mov	fp, r1
    int cols = _activeDescriptorTable.displayPixelsX / _activeDescriptorTable.displayCellX; 
   2fa34:	e5901018 	ldr	r1, [r0, #24]
   2fa38:	e5900010 	ldr	r0, [r0, #16]
   2fa3c:	eb007c21 	bl	4eac8 <__divsi3>
    int rows = _activeDescriptorTable.displayPixelsY / _activeDescriptorTable.displayCellY;
   2fa40:	e597101c 	ldr	r1, [r7, #28]
    int cols = _activeDescriptorTable.displayPixelsX / _activeDescriptorTable.displayCellX; 
   2fa44:	e1a0a000 	mov	sl, r0
    int rows = _activeDescriptorTable.displayPixelsY / _activeDescriptorTable.displayCellY;
   2fa48:	e5970014 	ldr	r0, [r7, #20]
   2fa4c:	eb007c1d 	bl	4eac8 <__divsi3>
    for (int k = 0; k < rows; k++) 
   2fa50:	e2503000 	subs	r3, r0, #0
   2fa54:	e58d3004 	str	r3, [sp, #4]
   2fa58:	da000022 	ble	2fae8 <McTRS80::updateDisplayFromBuffer(unsigned char*, unsigned long)+0xec>
   2fa5c:	e35a0000 	cmp	sl, #0
   2fa60:	da000020 	ble	2fae8 <McTRS80::updateDisplayFromBuffer(unsigned char*, unsigned long)+0xec>
   2fa64:	e2873054 	add	r3, r7, #84	; 0x54
   2fa68:	e24bb001 	sub	fp, fp, #1
   2fa6c:	e58d3000 	str	r3, [sp]
   2fa70:	e1a0600b 	mov	r6, fp
        for (int i = 0; i < cols; i++)
   2fa74:	e3a04000 	mov	r4, #0
    for (int k = 0; k < rows; k++) 
   2fa78:	e59d5000 	ldr	r5, [sp]
            if (!_screenBufferValid || (_screenBuffer[cellIdx] != pScrnBuffer[cellIdx]))
   2fa7c:	e5d72454 	ldrb	r2, [r7, #1108]	; 0x454
   2fa80:	e5f63001 	ldrb	r3, [r6, #1]!
   2fa84:	e3520000 	cmp	r2, #0
   2fa88:	0a000002 	beq	2fa98 <McTRS80::updateDisplayFromBuffer(unsigned char*, unsigned long)+0x9c>
   2fa8c:	e5d52000 	ldrb	r2, [r5]
   2fa90:	e1520003 	cmp	r2, r3
   2fa94:	0a000007 	beq	2fab8 <McTRS80::updateDisplayFromBuffer(unsigned char*, unsigned long)+0xbc>
                _pDisplay->write(i, k, (char)pScrnBuffer[cellIdx]);
   2fa98:	e5970050 	ldr	r0, [r7, #80]	; 0x50
   2fa9c:	e1a01004 	mov	r1, r4
   2faa0:	e5902000 	ldr	r2, [r0]
   2faa4:	e5929008 	ldr	r9, [r2, #8]
   2faa8:	e1a02008 	mov	r2, r8
   2faac:	e12fff39 	blx	r9
                _screenBuffer[cellIdx] = pScrnBuffer[cellIdx];
   2fab0:	e5d63000 	ldrb	r3, [r6]
   2fab4:	e5c53000 	strb	r3, [r5]
        for (int i = 0; i < cols; i++)
   2fab8:	e2844001 	add	r4, r4, #1
   2fabc:	e15a0004 	cmp	sl, r4
   2fac0:	e2855001 	add	r5, r5, #1
   2fac4:	1affffec 	bne	2fa7c <McTRS80::updateDisplayFromBuffer(unsigned char*, unsigned long)+0x80>
    for (int k = 0; k < rows; k++) 
   2fac8:	e59d3004 	ldr	r3, [sp, #4]
   2facc:	e2888001 	add	r8, r8, #1
   2fad0:	e1530008 	cmp	r3, r8
   2fad4:	e59d3000 	ldr	r3, [sp]
   2fad8:	e08bb00a 	add	fp, fp, sl
   2fadc:	e083300a 	add	r3, r3, sl
   2fae0:	e58d3000 	str	r3, [sp]
   2fae4:	1affffe1 	bne	2fa70 <McTRS80::updateDisplayFromBuffer(unsigned char*, unsigned long)+0x74>
    _screenBufferValid = true;
   2fae8:	e3a03001 	mov	r3, #1
   2faec:	e5c73454 	strb	r3, [r7, #1108]	; 0x454
}
   2faf0:	e28dd00c 	add	sp, sp, #12
   2faf4:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

0002faf8 <McTRS80::handleWD1771DiskController(unsigned long, unsigned long, unsigned long, unsigned long&)>:

// Handle WD1771 access
void McTRS80::handleWD1771DiskController([[maybe_unused]] uint32_t addr, [[maybe_unused]] uint32_t data, 
            [[maybe_unused]] uint32_t flags, [[maybe_unused]] uint32_t& retVal)
{
}
   2faf8:	e12fff1e 	bx	lr

0002fafc <McTerminal::enable()>:

// Enable machine
void McTerminal::enable()
{
    // Invalidate screen buffer
    _screenBufferValid = false;
   2fafc:	e3a03000 	mov	r3, #0
   2fb00:	e2800a02 	add	r0, r0, #8192	; 0x2000
   2fb04:	e5c03f3c 	strb	r3, [r0, #3900]	; 0xf3c
}
   2fb08:	e12fff1e 	bx	lr

0002fb0c <McTerminal::disable()>:

// Disable machine
void McTerminal::disable()
{
}
   2fb0c:	e12fff1e 	bx	lr

0002fb10 <McTerminal::busAccessCallback(unsigned long, unsigned long, unsigned long, unsigned long&)>:

// Handle a request for memory or IO - or possibly something like in interrupt vector in Z80
void McTerminal::busAccessCallback([[maybe_unused]] uint32_t addr, [[maybe_unused]] uint32_t data, 
            [[maybe_unused]] uint32_t flags, [[maybe_unused]] uint32_t& retVal)
{
}
   2fb10:	e12fff1e 	bx	lr

0002fb14 <McTerminal::busActionCompleteCallback(BR_BUS_ACTION)>:

// Bus action complete callback
void McTerminal::busActionCompleteCallback([[maybe_unused]] BR_BUS_ACTION actionType)
{
   2fb14:	e12fff1e 	bx	lr

0002fb18 <McTerminal::fileHandler(char const*, unsigned char const*, int)>:
{
   2fb18:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   2fb1c:	e24dd094 	sub	sp, sp, #148	; 0x94
   2fb20:	e1a07002 	mov	r7, r2
   2fb24:	e1a05003 	mov	r5, r3
    if (!jsonGetValueForKey("fileName", pFileInfo, fileName, MAX_FILE_NAME_STR))
   2fb28:	e28d2028 	add	r2, sp, #40	; 0x28
   2fb2c:	e3a03064 	mov	r3, #100	; 0x64
   2fb30:	e59f0088 	ldr	r0, [pc, #136]	; 2fbc0 <McTerminal::fileHandler(char const*, unsigned char const*, int)+0xa8>
{
   2fb34:	e1a06001 	mov	r6, r1
    if (!jsonGetValueForKey("fileName", pFileInfo, fileName, MAX_FILE_NAME_STR))
   2fb38:	ebffd3ab 	bl	249ec <jsonGetValueForKey>
   2fb3c:	e2504000 	subs	r4, r0, #0
   2fb40:	1a000002 	bne	2fb50 <McTerminal::fileHandler(char const*, unsigned char const*, int)+0x38>
}
   2fb44:	e1a00004 	mov	r0, r4
   2fb48:	e28dd094 	add	sp, sp, #148	; 0x94
   2fb4c:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
    if (jsonGetValueForKey("baseAddr", pFileInfo, baseAddrStr, MAX_VALUE_STR))
   2fb50:	e1a01006 	mov	r1, r6
   2fb54:	e3a0301e 	mov	r3, #30
   2fb58:	e28d2008 	add	r2, sp, #8
   2fb5c:	e59f0060 	ldr	r0, [pc, #96]	; 2fbc4 <McTerminal::fileHandler(char const*, unsigned char const*, int)+0xac>
   2fb60:	ebffd3a1 	bl	249ec <jsonGetValueForKey>
   2fb64:	e2506000 	subs	r6, r0, #0
   2fb68:	01a03006 	moveq	r3, r6
   2fb6c:	1a00000c 	bne	2fba4 <McTerminal::fileHandler(char const*, unsigned char const*, int)+0x8c>
    LogWrite(_logPrefix, LOG_DEBUG, "Processing binary file, baseAddr %04x len %d", baseAddr, fileLen);
   2fb70:	e59f2050 	ldr	r2, [pc, #80]	; 2fbc8 <McTerminal::fileHandler(char const*, unsigned char const*, int)+0xb0>
   2fb74:	e58d5000 	str	r5, [sp]
   2fb78:	e5920000 	ldr	r0, [r2]
   2fb7c:	e3a01004 	mov	r1, #4
   2fb80:	e59f2044 	ldr	r2, [pc, #68]	; 2fbcc <McTerminal::fileHandler(char const*, unsigned char const*, int)+0xb4>
   2fb84:	ebffd17b 	bl	24178 <LogWrite>
    TargetState::addMemoryBlock(baseAddr, pFileData, fileLen);
   2fb88:	e1a00006 	mov	r0, r6
   2fb8c:	e1a02005 	mov	r2, r5
   2fb90:	e1a01007 	mov	r1, r7
   2fb94:	eb002b2c 	bl	3a84c <TargetState::addMemoryBlock(unsigned long, unsigned char const*, unsigned long)>
}
   2fb98:	e1a00004 	mov	r0, r4
   2fb9c:	e28dd094 	add	sp, sp, #148	; 0x94
   2fba0:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
        baseAddr = strtol(baseAddrStr, NULL, 16);
   2fba4:	e28d0008 	add	r0, sp, #8
   2fba8:	e3a02010 	mov	r2, #16
   2fbac:	e3a01000 	mov	r1, #0
   2fbb0:	eb0079da 	bl	4e320 <strtol>
   2fbb4:	e6ff3070 	uxth	r3, r0
   2fbb8:	e1a06003 	mov	r6, r3
   2fbbc:	eaffffeb 	b	2fb70 <McTerminal::fileHandler(char const*, unsigned char const*, int)+0x58>
   2fbc0:	000540b8 	.word	0x000540b8
   2fbc4:	00054f00 	.word	0x00054f00
   2fbc8:	0006f2bc 	.word	0x0006f2bc
   2fbcc:	00054f0c 	.word	0x00054f0c

0002fbd0 <McTerminal::keyHandler(unsigned char, unsigned char const*)>:
    int rawKey = rawKeys[0];
   2fbd0:	e5d23000 	ldrb	r3, [r2]
    if ((rawKey == KEY_NONE) || (rawKey == KEY_ERR_OVF))
   2fbd4:	e3530001 	cmp	r3, #1
   2fbd8:	912fff1e 	bxls	lr
    if ((rawKey >= KEY_A) && (rawKey <= KEY_Z)) {
   2fbdc:	e2430004 	sub	r0, r3, #4
   2fbe0:	e3500019 	cmp	r0, #25
   2fbe4:	e2011022 	and	r1, r1, #34	; 0x22
   2fbe8:	8a000004 	bhi	2fc00 <McTerminal::keyHandler(unsigned char, unsigned char const*)+0x30>
        asciiCode = (rawKey-KEY_A) + (shiftPressed ? 'A' : 'a');
   2fbec:	e3510000 	cmp	r1, #0
   2fbf0:	13a03041 	movne	r3, #65	; 0x41
   2fbf4:	03a03061 	moveq	r3, #97	; 0x61
   2fbf8:	e0800003 	add	r0, r0, r3
    McManager::sendKeyCodeToTarget(asciiCode);
   2fbfc:	eafffa9b 	b	2e670 <McManager::sendKeyCodeToTarget(int)>
    } else if ((rawKey >= KEY_1) && (rawKey <= KEY_9)) {
   2fc00:	e243201e 	sub	r2, r3, #30
   2fc04:	e3520008 	cmp	r2, #8
   2fc08:	8a000008 	bhi	2fc30 <McTerminal::keyHandler(unsigned char, unsigned char const*)+0x60>
        if (!shiftPressed)
   2fc0c:	e3510000 	cmp	r1, #0
            asciiCode = (rawKey-KEY_1) + '1';
   2fc10:	02830013 	addeq	r0, r3, #19
        if (!shiftPressed)
   2fc14:	0afffff8 	beq	2fbfc <McTerminal::keyHandler(unsigned char, unsigned char const*)+0x2c>
            asciiCode = _shiftDigitKeyMap[rawKey-KEY_1];
   2fc18:	e59f315c 	ldr	r3, [pc, #348]	; 2fd7c <McTerminal::keyHandler(unsigned char, unsigned char const*)+0x1ac>
   2fc1c:	e0832102 	add	r2, r3, r2, lsl #2
   2fc20:	e5920004 	ldr	r0, [r2, #4]
    if (asciiCode == 0)
   2fc24:	e3500000 	cmp	r0, #0
   2fc28:	012fff1e 	bxeq	lr
   2fc2c:	eafffff2 	b	2fbfc <McTerminal::keyHandler(unsigned char, unsigned char const*)+0x2c>
    } else if (rawKey == KEY_0) {
   2fc30:	e3530027 	cmp	r3, #39	; 0x27
   2fc34:	0a00001f 	beq	2fcb8 <McTerminal::keyHandler(unsigned char, unsigned char const*)+0xe8>
    } else if (rawKey == KEY_SEMICOLON) {
   2fc38:	e3530033 	cmp	r3, #51	; 0x33
   2fc3c:	0a000028 	beq	2fce4 <McTerminal::keyHandler(unsigned char, unsigned char const*)+0x114>
    } else if (rawKey == KEY_APOSTROPHE) {
   2fc40:	e3530034 	cmp	r3, #52	; 0x34
   2fc44:	0a000020 	beq	2fccc <McTerminal::keyHandler(unsigned char, unsigned char const*)+0xfc>
    } else if (rawKey == KEY_COMMA) {
   2fc48:	e3530036 	cmp	r3, #54	; 0x36
   2fc4c:	0a000028 	beq	2fcf4 <McTerminal::keyHandler(unsigned char, unsigned char const*)+0x124>
    } else if (rawKey == KEY_DOT) {
   2fc50:	e3530037 	cmp	r3, #55	; 0x37
   2fc54:	0a00002a 	beq	2fd04 <McTerminal::keyHandler(unsigned char, unsigned char const*)+0x134>
    } else if (rawKey == KEY_EQUAL) {
   2fc58:	e353002e 	cmp	r3, #46	; 0x2e
   2fc5c:	0a00002c 	beq	2fd14 <McTerminal::keyHandler(unsigned char, unsigned char const*)+0x144>
    } else if (rawKey == KEY_MINUS) {
   2fc60:	e353002d 	cmp	r3, #45	; 0x2d
   2fc64:	0a00002e 	beq	2fd24 <McTerminal::keyHandler(unsigned char, unsigned char const*)+0x154>
    } else if (rawKey == KEY_SLASH) {
   2fc68:	e3530038 	cmp	r3, #56	; 0x38
   2fc6c:	0a000030 	beq	2fd34 <McTerminal::keyHandler(unsigned char, unsigned char const*)+0x164>
    } else if (rawKey == KEY_ENTER) {
   2fc70:	e3530028 	cmp	r3, #40	; 0x28
   2fc74:	0a000032 	beq	2fd44 <McTerminal::keyHandler(unsigned char, unsigned char const*)+0x174>
    } else if (rawKey == KEY_BACKSPACE) {
   2fc78:	e353002a 	cmp	r3, #42	; 0x2a
   2fc7c:	0a000032 	beq	2fd4c <McTerminal::keyHandler(unsigned char, unsigned char const*)+0x17c>
    } else if (rawKey == KEY_ESC) {
   2fc80:	e3530029 	cmp	r3, #41	; 0x29
   2fc84:	0a000032 	beq	2fd54 <McTerminal::keyHandler(unsigned char, unsigned char const*)+0x184>
    } else if (rawKey == KEY_UP) {
   2fc88:	e3530052 	cmp	r3, #82	; 0x52
   2fc8c:	0a000032 	beq	2fd5c <McTerminal::keyHandler(unsigned char, unsigned char const*)+0x18c>
    } else if (rawKey == KEY_DOWN) {
   2fc90:	e3530051 	cmp	r3, #81	; 0x51
   2fc94:	0a000032 	beq	2fd64 <McTerminal::keyHandler(unsigned char, unsigned char const*)+0x194>
    } else if (rawKey == KEY_LEFT) {
   2fc98:	e3530050 	cmp	r3, #80	; 0x50
   2fc9c:	0a000032 	beq	2fd6c <McTerminal::keyHandler(unsigned char, unsigned char const*)+0x19c>
    } else if (rawKey == KEY_RIGHT) {
   2fca0:	e353004f 	cmp	r3, #79	; 0x4f
   2fca4:	0a000032 	beq	2fd74 <McTerminal::keyHandler(unsigned char, unsigned char const*)+0x1a4>
    } else if (rawKey == KEY_SPACE) {
   2fca8:	e353002c 	cmp	r3, #44	; 0x2c
   2fcac:	112fff1e 	bxne	lr
        asciiCode = 0x20;
   2fcb0:	e3a00020 	mov	r0, #32
   2fcb4:	eaffffd0 	b	2fbfc <McTerminal::keyHandler(unsigned char, unsigned char const*)+0x2c>
        asciiCode = shiftPressed ? _shiftDigitKeyMap[9] : '0';
   2fcb8:	e3510000 	cmp	r1, #0
   2fcbc:	0a000006 	beq	2fcdc <McTerminal::keyHandler(unsigned char, unsigned char const*)+0x10c>
   2fcc0:	e59f30b4 	ldr	r3, [pc, #180]	; 2fd7c <McTerminal::keyHandler(unsigned char, unsigned char const*)+0x1ac>
   2fcc4:	e5930028 	ldr	r0, [r3, #40]	; 0x28
   2fcc8:	eaffffd5 	b	2fc24 <McTerminal::keyHandler(unsigned char, unsigned char const*)+0x54>
        asciiCode = shiftPressed ? '@' : '\'';
   2fccc:	e3510000 	cmp	r1, #0
   2fcd0:	03a00027 	moveq	r0, #39	; 0x27
   2fcd4:	13a00040 	movne	r0, #64	; 0x40
   2fcd8:	eaffffc7 	b	2fbfc <McTerminal::keyHandler(unsigned char, unsigned char const*)+0x2c>
        asciiCode = shiftPressed ? _shiftDigitKeyMap[9] : '0';
   2fcdc:	e3a00030 	mov	r0, #48	; 0x30
   2fce0:	eaffffc5 	b	2fbfc <McTerminal::keyHandler(unsigned char, unsigned char const*)+0x2c>
        asciiCode = shiftPressed ? ':' : ';';
   2fce4:	e3510000 	cmp	r1, #0
   2fce8:	03a0003b 	moveq	r0, #59	; 0x3b
   2fcec:	13a0003a 	movne	r0, #58	; 0x3a
   2fcf0:	eaffffc1 	b	2fbfc <McTerminal::keyHandler(unsigned char, unsigned char const*)+0x2c>
        asciiCode = shiftPressed ? '<' : ',';
   2fcf4:	e3510000 	cmp	r1, #0
   2fcf8:	03a0002c 	moveq	r0, #44	; 0x2c
   2fcfc:	13a0003c 	movne	r0, #60	; 0x3c
   2fd00:	eaffffbd 	b	2fbfc <McTerminal::keyHandler(unsigned char, unsigned char const*)+0x2c>
        asciiCode = shiftPressed ? '>' : '.';
   2fd04:	e3510000 	cmp	r1, #0
   2fd08:	03a0002e 	moveq	r0, #46	; 0x2e
   2fd0c:	13a0003e 	movne	r0, #62	; 0x3e
   2fd10:	eaffffb9 	b	2fbfc <McTerminal::keyHandler(unsigned char, unsigned char const*)+0x2c>
        asciiCode = shiftPressed ? '+' : '=';        
   2fd14:	e3510000 	cmp	r1, #0
   2fd18:	03a0003d 	moveq	r0, #61	; 0x3d
   2fd1c:	13a0002b 	movne	r0, #43	; 0x2b
   2fd20:	eaffffb5 	b	2fbfc <McTerminal::keyHandler(unsigned char, unsigned char const*)+0x2c>
        asciiCode = shiftPressed ? '_' : '-';        
   2fd24:	e3510000 	cmp	r1, #0
   2fd28:	01a00003 	moveq	r0, r3
   2fd2c:	13a0005f 	movne	r0, #95	; 0x5f
   2fd30:	eaffffb1 	b	2fbfc <McTerminal::keyHandler(unsigned char, unsigned char const*)+0x2c>
        asciiCode = shiftPressed ? '?' : '/';        
   2fd34:	e3510000 	cmp	r1, #0
   2fd38:	03a0002f 	moveq	r0, #47	; 0x2f
   2fd3c:	13a0003f 	movne	r0, #63	; 0x3f
   2fd40:	eaffffad 	b	2fbfc <McTerminal::keyHandler(unsigned char, unsigned char const*)+0x2c>
        asciiCode = 0x0d;
   2fd44:	e3a0000d 	mov	r0, #13
   2fd48:	eaffffab 	b	2fbfc <McTerminal::keyHandler(unsigned char, unsigned char const*)+0x2c>
        asciiCode = 0x08;
   2fd4c:	e3a00008 	mov	r0, #8
   2fd50:	eaffffa9 	b	2fbfc <McTerminal::keyHandler(unsigned char, unsigned char const*)+0x2c>
        asciiCode = 0x1d;        
   2fd54:	e3a0001d 	mov	r0, #29
   2fd58:	eaffffa7 	b	2fbfc <McTerminal::keyHandler(unsigned char, unsigned char const*)+0x2c>
        asciiCode = 0x11;
   2fd5c:	e3a00011 	mov	r0, #17
   2fd60:	eaffffa5 	b	2fbfc <McTerminal::keyHandler(unsigned char, unsigned char const*)+0x2c>
        asciiCode = 0x12;
   2fd64:	e3a00012 	mov	r0, #18
   2fd68:	eaffffa3 	b	2fbfc <McTerminal::keyHandler(unsigned char, unsigned char const*)+0x2c>
        asciiCode = 0x13;
   2fd6c:	e3a00013 	mov	r0, #19
   2fd70:	eaffffa1 	b	2fbfc <McTerminal::keyHandler(unsigned char, unsigned char const*)+0x2c>
        asciiCode = 0x14;
   2fd74:	e3a00014 	mov	r0, #20
   2fd78:	eaffff9f 	b	2fbfc <McTerminal::keyHandler(unsigned char, unsigned char const*)+0x2c>
   2fd7c:	0006f2bc 	.word	0x0006f2bc

0002fd80 <McTerminal::McTerminal()>:
McTerminal::McTerminal() : McBase(_defaultDescriptorTables, sizeof(_defaultDescriptorTables)/sizeof(_defaultDescriptorTables[0]))
   2fd80:	e92d4070 	push	{r4, r5, r6, lr}
   2fd84:	e3a02002 	mov	r2, #2
   2fd88:	e59f1068 	ldr	r1, [pc, #104]	; 2fdf8 <McTerminal::McTerminal()+0x78>
   2fd8c:	e1a04000 	mov	r4, r0
   2fd90:	ebfff75f 	bl	2db14 <McBase::McBase(McDescriptorTable*, int)>
    _termRows = DEFAULT_TERM_ROWS;
   2fd94:	e3a0301e 	mov	r3, #30
    _screenBufferValid = false;
   2fd98:	e3a02000 	mov	r2, #0
    _cursorShow = true;
   2fd9c:	e3a0c001 	mov	ip, #1
    _termCols = DEFAULT_TERM_COLS;
   2fda0:	e3a05050 	mov	r5, #80	; 0x50
    _cursorBlinkRateMs = 500;
   2fda4:	e3a00f7d 	mov	r0, #500	; 0x1f4
    _cursorChar = '_';
   2fda8:	e3a0105f 	mov	r1, #95	; 0x5f
McTerminal::McTerminal() : McBase(_defaultDescriptorTables, sizeof(_defaultDescriptorTables)/sizeof(_defaultDescriptorTables[0]))
   2fdac:	e59fe048 	ldr	lr, [pc, #72]	; 2fdfc <McTerminal::McTerminal()+0x7c>
    _termRows = DEFAULT_TERM_ROWS;
   2fdb0:	e5843058 	str	r3, [r4, #88]	; 0x58
    _screenBufferValid = false;
   2fdb4:	e2843a02 	add	r3, r4, #8192	; 0x2000
    _termCols = DEFAULT_TERM_COLS;
   2fdb8:	e5845054 	str	r5, [r4, #84]	; 0x54
McTerminal::McTerminal() : McBase(_defaultDescriptorTables, sizeof(_defaultDescriptorTables)/sizeof(_defaultDescriptorTables[0]))
   2fdbc:	e584e000 	str	lr, [r4]
    _cursorBlinkRateMs = 500;
   2fdc0:	e5830f50 	str	r0, [r3, #3920]	; 0xf50
    _cursorChar = '_';
   2fdc4:	e5c31f55 	strb	r1, [r3, #3925]	; 0xf55
    _screenBufferValid = false;
   2fdc8:	e5c32f3c 	strb	r2, [r3, #3900]	; 0xf3c
    _curPosX = _curPosY = 0;
   2fdcc:	e5832f44 	str	r2, [r3, #3908]	; 0xf44
   2fdd0:	e5832f40 	str	r2, [r3, #3904]	; 0xf40
    _cursorBlinkLastUs = 0;
   2fdd4:	e5832f4c 	str	r2, [r3, #3916]	; 0xf4c
    _cursorIsOn = false;
   2fdd8:	e5c32f54 	strb	r2, [r3, #3924]	; 0xf54
    _cursorShow = true;
   2fddc:	e5c3cf48 	strb	ip, [r3, #3912]	; 0xf48
   2fde0:	e284005c 	add	r0, r4, #92	; 0x5c
   2fde4:	e3a02e96 	mov	r2, #2400	; 0x960
   2fde8:	e3a01020 	mov	r1, #32
   2fdec:	eb007421 	bl	4ce78 <memset>
}
   2fdf0:	e1a00004 	mov	r0, r4
   2fdf4:	e8bd8070 	pop	{r4, r5, r6, pc}
   2fdf8:	0006f2e8 	.word	0x0006f2e8
   2fdfc:	00055038 	.word	0x00055038

0002fe00 <McTerminal::convertRawToAscii(unsigned char, unsigned char const*)>:
    int rawKey = rawKeys[0];
   2fe00:	e5d12000 	ldrb	r2, [r1]
    if ((rawKey == KEY_NONE) || (rawKey == KEY_ERR_OVF))
   2fe04:	e3520001 	cmp	r2, #1
   2fe08:	9a00002d 	bls	2fec4 <McTerminal::convertRawToAscii(unsigned char, unsigned char const*)+0xc4>
    if ((rawKey >= KEY_A) && (rawKey <= KEY_Z)) {
   2fe0c:	e2423004 	sub	r3, r2, #4
   2fe10:	e3530019 	cmp	r3, #25
   2fe14:	e2000022 	and	r0, r0, #34	; 0x22
   2fe18:	8a000004 	bhi	2fe30 <McTerminal::convertRawToAscii(unsigned char, unsigned char const*)+0x30>
        asciiCode = (rawKey-KEY_A) + (shiftPressed ? 'A' : 'a');
   2fe1c:	e3500000 	cmp	r0, #0
   2fe20:	13a00041 	movne	r0, #65	; 0x41
   2fe24:	03a00061 	moveq	r0, #97	; 0x61
   2fe28:	e0830000 	add	r0, r3, r0
   2fe2c:	e12fff1e 	bx	lr
    } else if ((rawKey >= KEY_1) && (rawKey <= KEY_9)) {
   2fe30:	e242301e 	sub	r3, r2, #30
   2fe34:	e3530008 	cmp	r3, #8
   2fe38:	9a000023 	bls	2fecc <McTerminal::convertRawToAscii(unsigned char, unsigned char const*)+0xcc>
    } else if (rawKey == KEY_0) {
   2fe3c:	e3520027 	cmp	r2, #39	; 0x27
   2fe40:	0a000027 	beq	2fee4 <McTerminal::convertRawToAscii(unsigned char, unsigned char const*)+0xe4>
    } else if (rawKey == KEY_SEMICOLON) {
   2fe44:	e3520033 	cmp	r2, #51	; 0x33
   2fe48:	0a000030 	beq	2ff10 <McTerminal::convertRawToAscii(unsigned char, unsigned char const*)+0x110>
    } else if (rawKey == KEY_APOSTROPHE) {
   2fe4c:	e3520034 	cmp	r2, #52	; 0x34
   2fe50:	0a000028 	beq	2fef8 <McTerminal::convertRawToAscii(unsigned char, unsigned char const*)+0xf8>
    } else if (rawKey == KEY_COMMA) {
   2fe54:	e3520036 	cmp	r2, #54	; 0x36
   2fe58:	0a000030 	beq	2ff20 <McTerminal::convertRawToAscii(unsigned char, unsigned char const*)+0x120>
    } else if (rawKey == KEY_DOT) {
   2fe5c:	e3520037 	cmp	r2, #55	; 0x37
   2fe60:	0a000032 	beq	2ff30 <McTerminal::convertRawToAscii(unsigned char, unsigned char const*)+0x130>
    } else if (rawKey == KEY_EQUAL) {
   2fe64:	e352002e 	cmp	r2, #46	; 0x2e
   2fe68:	0a000034 	beq	2ff40 <McTerminal::convertRawToAscii(unsigned char, unsigned char const*)+0x140>
    } else if (rawKey == KEY_MINUS) {
   2fe6c:	e352002d 	cmp	r2, #45	; 0x2d
   2fe70:	0a000036 	beq	2ff50 <McTerminal::convertRawToAscii(unsigned char, unsigned char const*)+0x150>
    } else if (rawKey == KEY_SLASH) {
   2fe74:	e3520038 	cmp	r2, #56	; 0x38
   2fe78:	0a000038 	beq	2ff60 <McTerminal::convertRawToAscii(unsigned char, unsigned char const*)+0x160>
    } else if (rawKey == KEY_ENTER) {
   2fe7c:	e3520028 	cmp	r2, #40	; 0x28
   2fe80:	0a00003a 	beq	2ff70 <McTerminal::convertRawToAscii(unsigned char, unsigned char const*)+0x170>
    } else if (rawKey == KEY_BACKSPACE) {
   2fe84:	e352002a 	cmp	r2, #42	; 0x2a
   2fe88:	0a00003a 	beq	2ff78 <McTerminal::convertRawToAscii(unsigned char, unsigned char const*)+0x178>
    } else if (rawKey == KEY_ESC) {
   2fe8c:	e3520029 	cmp	r2, #41	; 0x29
   2fe90:	0a00003a 	beq	2ff80 <McTerminal::convertRawToAscii(unsigned char, unsigned char const*)+0x180>
    } else if (rawKey == KEY_UP) {
   2fe94:	e3520052 	cmp	r2, #82	; 0x52
   2fe98:	0a00003a 	beq	2ff88 <McTerminal::convertRawToAscii(unsigned char, unsigned char const*)+0x188>
    } else if (rawKey == KEY_DOWN) {
   2fe9c:	e3520051 	cmp	r2, #81	; 0x51
   2fea0:	0a00003a 	beq	2ff90 <McTerminal::convertRawToAscii(unsigned char, unsigned char const*)+0x190>
    } else if (rawKey == KEY_LEFT) {
   2fea4:	e3520050 	cmp	r2, #80	; 0x50
   2fea8:	0a00003a 	beq	2ff98 <McTerminal::convertRawToAscii(unsigned char, unsigned char const*)+0x198>
    } else if (rawKey == KEY_RIGHT) {
   2feac:	e352004f 	cmp	r2, #79	; 0x4f
   2feb0:	0a00003a 	beq	2ffa0 <McTerminal::convertRawToAscii(unsigned char, unsigned char const*)+0x1a0>
        asciiCode = 0x20;
   2feb4:	e352002c 	cmp	r2, #44	; 0x2c
   2feb8:	13a00000 	movne	r0, #0
   2febc:	03a00020 	moveq	r0, #32
   2fec0:	e12fff1e 	bx	lr
        return 0;
   2fec4:	e3a00000 	mov	r0, #0
   2fec8:	e12fff1e 	bx	lr
        if (!shiftPressed)
   2fecc:	e3500000 	cmp	r0, #0
            asciiCode = _shiftDigitKeyMap[rawKey-KEY_1];
   2fed0:	159f20d0 	ldrne	r2, [pc, #208]	; 2ffa8 <McTerminal::convertRawToAscii(unsigned char, unsigned char const*)+0x1a8>
            asciiCode = (rawKey-KEY_1) + '1';
   2fed4:	02820013 	addeq	r0, r2, #19
            asciiCode = _shiftDigitKeyMap[rawKey-KEY_1];
   2fed8:	10823103 	addne	r3, r2, r3, lsl #2
   2fedc:	15930004 	ldrne	r0, [r3, #4]
   2fee0:	e12fff1e 	bx	lr
        asciiCode = shiftPressed ? _shiftDigitKeyMap[9] : '0';
   2fee4:	e3500000 	cmp	r0, #0
   2fee8:	0a000006 	beq	2ff08 <McTerminal::convertRawToAscii(unsigned char, unsigned char const*)+0x108>
   2feec:	e59f30b4 	ldr	r3, [pc, #180]	; 2ffa8 <McTerminal::convertRawToAscii(unsigned char, unsigned char const*)+0x1a8>
   2fef0:	e5930028 	ldr	r0, [r3, #40]	; 0x28
   2fef4:	e12fff1e 	bx	lr
        asciiCode = shiftPressed ? '@' : '\'';
   2fef8:	e3500000 	cmp	r0, #0
   2fefc:	13a00040 	movne	r0, #64	; 0x40
   2ff00:	03a00027 	moveq	r0, #39	; 0x27
   2ff04:	e12fff1e 	bx	lr
        asciiCode = shiftPressed ? _shiftDigitKeyMap[9] : '0';
   2ff08:	e3a00030 	mov	r0, #48	; 0x30
   2ff0c:	e12fff1e 	bx	lr
        asciiCode = shiftPressed ? ':' : ';';
   2ff10:	e3500000 	cmp	r0, #0
   2ff14:	13a0003a 	movne	r0, #58	; 0x3a
   2ff18:	03a0003b 	moveq	r0, #59	; 0x3b
   2ff1c:	e12fff1e 	bx	lr
        asciiCode = shiftPressed ? '<' : ',';
   2ff20:	e3500000 	cmp	r0, #0
   2ff24:	13a0003c 	movne	r0, #60	; 0x3c
   2ff28:	03a0002c 	moveq	r0, #44	; 0x2c
   2ff2c:	e12fff1e 	bx	lr
        asciiCode = shiftPressed ? '>' : '.';
   2ff30:	e3500000 	cmp	r0, #0
   2ff34:	13a0003e 	movne	r0, #62	; 0x3e
   2ff38:	03a0002e 	moveq	r0, #46	; 0x2e
   2ff3c:	e12fff1e 	bx	lr
        asciiCode = shiftPressed ? '+' : '=';        
   2ff40:	e3500000 	cmp	r0, #0
   2ff44:	13a0002b 	movne	r0, #43	; 0x2b
   2ff48:	03a0003d 	moveq	r0, #61	; 0x3d
   2ff4c:	e12fff1e 	bx	lr
        asciiCode = shiftPressed ? '_' : '-';        
   2ff50:	e3500000 	cmp	r0, #0
   2ff54:	01a00002 	moveq	r0, r2
   2ff58:	13a0005f 	movne	r0, #95	; 0x5f
   2ff5c:	e12fff1e 	bx	lr
        asciiCode = shiftPressed ? '?' : '/';        
   2ff60:	e3500000 	cmp	r0, #0
   2ff64:	13a0003f 	movne	r0, #63	; 0x3f
   2ff68:	03a0002f 	moveq	r0, #47	; 0x2f
   2ff6c:	e12fff1e 	bx	lr
        asciiCode = 0x0d;
   2ff70:	e3a0000d 	mov	r0, #13
   2ff74:	e12fff1e 	bx	lr
        asciiCode = 0x08;
   2ff78:	e3a00008 	mov	r0, #8
   2ff7c:	e12fff1e 	bx	lr
        asciiCode = 0x1d;        
   2ff80:	e3a0001d 	mov	r0, #29
   2ff84:	e12fff1e 	bx	lr
        asciiCode = 0x11;
   2ff88:	e3a00011 	mov	r0, #17
   2ff8c:	e12fff1e 	bx	lr
        asciiCode = 0x12;
   2ff90:	e3a00012 	mov	r0, #18
   2ff94:	e12fff1e 	bx	lr
        asciiCode = 0x13;
   2ff98:	e3a00013 	mov	r0, #19
   2ff9c:	e12fff1e 	bx	lr
        asciiCode = 0x14;
   2ffa0:	e3a00014 	mov	r0, #20
}
   2ffa4:	e12fff1e 	bx	lr
   2ffa8:	0006f2bc 	.word	0x0006f2bc

0002ffac <McTerminal::clearScreen()>:
{
   2ffac:	e92d4010 	push	{r4, lr}
    for (int i = 0; i < _termRows * _termCols; i++)
   2ffb0:	e1c025d4 	ldrd	r2, [r0, #84]	; 0x54
   2ffb4:	e0020392 	mul	r2, r2, r3
   2ffb8:	e3520000 	cmp	r2, #0
{
   2ffbc:	e1a04000 	mov	r4, r0
    for (int i = 0; i < _termRows * _termCols; i++)
   2ffc0:	da000002 	ble	2ffd0 <McTerminal::clearScreen()+0x24>
   2ffc4:	e3a01020 	mov	r1, #32
   2ffc8:	e280005c 	add	r0, r0, #92	; 0x5c
   2ffcc:	eb0073a9 	bl	4ce78 <memset>
    _curPosX = 0;
   2ffd0:	e3a03000 	mov	r3, #0
   2ffd4:	e2844a02 	add	r4, r4, #8192	; 0x2000
   2ffd8:	e5843f40 	str	r3, [r4, #3904]	; 0xf40
    _curPosY = 0;
   2ffdc:	e5843f44 	str	r3, [r4, #3908]	; 0xf44
}
   2ffe0:	e8bd8010 	pop	{r4, pc}

0002ffe4 <McTerminal::dispChar(unsigned char, DisplayBase*)>:
    switch(ch)
   2ffe4:	e241c008 	sub	ip, r1, #8
{
   2ffe8:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   2ffec:	e1a04000 	mov	r4, r0
   2fff0:	e1a00002 	mov	r0, r2
    switch(ch)
   2fff4:	e35c0005 	cmp	ip, #5
   2fff8:	979ff10c 	ldrls	pc, [pc, ip, lsl #2]
   2fffc:	ea00005f 	b	30180 <McTerminal::dispChar(unsigned char, DisplayBase*)+0x19c>
   30000:	000300ac 	.word	0x000300ac
   30004:	00030018 	.word	0x00030018
   30008:	0003013c 	.word	0x0003013c
   3000c:	00030180 	.word	0x00030180
   30010:	0003014c 	.word	0x0003014c
   30014:	0003001c 	.word	0x0003001c
}
   30018:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   3001c:	e2845a02 	add	r5, r4, #8192	; 0x2000
    if (_cursorIsOn)
   30020:	e5d53f54 	ldrb	r3, [r5, #3924]	; 0xf54
   30024:	e5952f44 	ldr	r2, [r5, #3908]	; 0xf44
   30028:	e3530000 	cmp	r3, #0
   3002c:	e5951f40 	ldr	r1, [r5, #3904]	; 0xf40
   30030:	e594c054 	ldr	ip, [r4, #84]	; 0x54
   30034:	0a00000a 	beq	30064 <McTerminal::dispChar(unsigned char, DisplayBase*)+0x80>
        if (pDisplay)
   30038:	e3500000 	cmp	r0, #0
   3003c:	0a000008 	beq	30064 <McTerminal::dispChar(unsigned char, DisplayBase*)+0x80>
            pDisplay->write(_curPosX, _curPosY, _screenChars[cellIdx]);
   30040:	e0843001 	add	r3, r4, r1
   30044:	e02c329c 	mla	ip, ip, r2, r3
   30048:	e590e000 	ldr	lr, [r0]
   3004c:	e5dc305c 	ldrb	r3, [ip, #92]	; 0x5c
   30050:	e59e6008 	ldr	r6, [lr, #8]
   30054:	e12fff36 	blx	r6
   30058:	e5951f40 	ldr	r1, [r5, #3904]	; 0xf40
   3005c:	e5952f44 	ldr	r2, [r5, #3908]	; 0xf44
   30060:	e594c054 	ldr	ip, [r4, #84]	; 0x54
    if (_curPosX+relX >= 0)
   30064:	e3510000 	cmp	r1, #0
        _curPosX = 0;
   30068:	b3a03000 	movlt	r3, #0
   3006c:	b1a01003 	movlt	r1, r3
   30070:	b5853f40 	strlt	r3, [r5, #3904]	; 0xf40
    _curPosY += relY;
   30074:	e2823001 	add	r3, r2, #1
   30078:	e5853f44 	str	r3, [r5, #3908]	; 0xf44
    if (_curPosX >= _termCols)
   3007c:	e15c0001 	cmp	ip, r1
   30080:	e5940058 	ldr	r0, [r4, #88]	; 0x58
   30084:	ca00005a 	bgt	301f4 <McTerminal::dispChar(unsigned char, DisplayBase*)+0x210>
        _curPosX = 0;
   30088:	e3a01000 	mov	r1, #0
        _curPosY++;
   3008c:	e2823002 	add	r3, r2, #2
    if (_curPosY >= _termRows)
   30090:	e1530000 	cmp	r3, r0
        _curPosY++;
   30094:	e5853f44 	str	r3, [r5, #3908]	; 0xf44
        _curPosX = 0;
   30098:	e5851f40 	str	r1, [r5, #3904]	; 0xf40
    if (_curPosY >= _termRows)
   3009c:	aa000056 	bge	301fc <McTerminal::dispChar(unsigned char, DisplayBase*)+0x218>
    if (_curPosY < 0)
   300a0:	e3530000 	cmp	r3, #0
   300a4:	a8bd81f0 	popge	{r4, r5, r6, r7, r8, pc}
   300a8:	ea00004e 	b	301e8 <McTerminal::dispChar(unsigned char, DisplayBase*)+0x204>
   300ac:	e2845a02 	add	r5, r4, #8192	; 0x2000
    if (_cursorIsOn)
   300b0:	e5d53f54 	ldrb	r3, [r5, #3924]	; 0xf54
   300b4:	e5952f44 	ldr	r2, [r5, #3908]	; 0xf44
   300b8:	e3530000 	cmp	r3, #0
   300bc:	e5951f40 	ldr	r1, [r5, #3904]	; 0xf40
   300c0:	e5943054 	ldr	r3, [r4, #84]	; 0x54
   300c4:	0a00000a 	beq	300f4 <McTerminal::dispChar(unsigned char, DisplayBase*)+0x110>
        if (pDisplay)
   300c8:	e3500000 	cmp	r0, #0
   300cc:	0a000008 	beq	300f4 <McTerminal::dispChar(unsigned char, DisplayBase*)+0x110>
            pDisplay->write(_curPosX, _curPosY, _screenChars[cellIdx]);
   300d0:	e084c001 	add	ip, r4, r1
   300d4:	e023c392 	mla	r3, r2, r3, ip
   300d8:	e590c000 	ldr	ip, [r0]
   300dc:	e5d3305c 	ldrb	r3, [r3, #92]	; 0x5c
   300e0:	e59c6008 	ldr	r6, [ip, #8]
   300e4:	e12fff36 	blx	r6
   300e8:	e5951f40 	ldr	r1, [r5, #3904]	; 0xf40
   300ec:	e5952f44 	ldr	r2, [r5, #3908]	; 0xf44
   300f0:	e5943054 	ldr	r3, [r4, #84]	; 0x54
    if (_curPosX+relX >= 0)
   300f4:	e2411001 	sub	r1, r1, #1
   300f8:	e1c11fc1 	bic	r1, r1, r1, asr #31
    if (_curPosX >= _termCols)
   300fc:	e1530001 	cmp	r3, r1
   30100:	c5851f40 	strgt	r1, [r5, #3904]	; 0xf40
        _curPosX = 0;
   30104:	d3a01000 	movle	r1, #0
        _curPosY++;
   30108:	d2822001 	addle	r2, r2, #1
   3010c:	d5852f44 	strle	r2, [r5, #3908]	; 0xf44
        _curPosX = 0;
   30110:	d5851f40 	strle	r1, [r5, #3904]	; 0xf40
    if (_curPosY >= _termRows)
   30114:	e5940058 	ldr	r0, [r4, #88]	; 0x58
   30118:	e1500002 	cmp	r0, r2
   3011c:	da000042 	ble	3022c <McTerminal::dispChar(unsigned char, DisplayBase*)+0x248>
    if (_curPosY < 0)
   30120:	e3520000 	cmp	r2, #0
   30124:	ba00004b 	blt	30258 <McTerminal::dispChar(unsigned char, DisplayBase*)+0x274>
   30128:	e0211293 	mla	r1, r3, r2, r1
            _screenChars[_curPosY * _termCols + _curPosX] = ' ';
   3012c:	e3a03020 	mov	r3, #32
   30130:	e0841001 	add	r1, r4, r1
   30134:	e5c1305c 	strb	r3, [r1, #92]	; 0x5c
            break;
   30138:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
            _curPosX = 0;
   3013c:	e3a03000 	mov	r3, #0
   30140:	e2844a02 	add	r4, r4, #8192	; 0x2000
   30144:	e5843f40 	str	r3, [r4, #3904]	; 0xf40
            break;
   30148:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    for (int i = 0; i < _termRows * _termCols; i++)
   3014c:	e5943054 	ldr	r3, [r4, #84]	; 0x54
   30150:	e5942058 	ldr	r2, [r4, #88]	; 0x58
   30154:	e0020392 	mul	r2, r2, r3
   30158:	e3520000 	cmp	r2, #0
   3015c:	da000002 	ble	3016c <McTerminal::dispChar(unsigned char, DisplayBase*)+0x188>
   30160:	e3a01020 	mov	r1, #32
   30164:	e284005c 	add	r0, r4, #92	; 0x5c
   30168:	eb007342 	bl	4ce78 <memset>
    _curPosX = 0;
   3016c:	e3a03000 	mov	r3, #0
   30170:	e2844a02 	add	r4, r4, #8192	; 0x2000
   30174:	e5843f40 	str	r3, [r4, #3904]	; 0xf40
    _curPosY = 0;
   30178:	e5843f44 	str	r3, [r4, #3908]	; 0xf44
   3017c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
            _screenChars[_curPosY * _termCols + _curPosX] = ch;
   30180:	e2845a02 	add	r5, r4, #8192	; 0x2000
   30184:	e595cf40 	ldr	ip, [r5, #3904]	; 0xf40
   30188:	e5952f44 	ldr	r2, [r5, #3908]	; 0xf44
   3018c:	e594e054 	ldr	lr, [r4, #84]	; 0x54
   30190:	e084300c 	add	r3, r4, ip
   30194:	e023329e 	mla	r3, lr, r2, r3
   30198:	e5c3105c 	strb	r1, [r3, #92]	; 0x5c
        if (pDisplay)
   3019c:	e5d53f54 	ldrb	r3, [r5, #3924]	; 0xf54
   301a0:	e3500000 	cmp	r0, #0
   301a4:	03a03000 	moveq	r3, #0
   301a8:	12033001 	andne	r3, r3, #1
   301ac:	e3530000 	cmp	r3, #0
   301b0:	1a000043 	bne	302c4 <McTerminal::dispChar(unsigned char, DisplayBase*)+0x2e0>
    if (_curPosX+relX >= 0)
   301b4:	e28c1001 	add	r1, ip, #1
   301b8:	e1c11fc1 	bic	r1, r1, r1, asr #31
    if (_curPosX >= _termCols)
   301bc:	e15e0001 	cmp	lr, r1
   301c0:	c5851f40 	strgt	r1, [r5, #3904]	; 0xf40
        _curPosX = 0;
   301c4:	d3a03000 	movle	r3, #0
        _curPosY++;
   301c8:	d2822001 	addle	r2, r2, #1
   301cc:	d5852f44 	strle	r2, [r5, #3908]	; 0xf44
        _curPosX = 0;
   301d0:	d5853f40 	strle	r3, [r5, #3904]	; 0xf40
    if (_curPosY >= _termRows)
   301d4:	e5943058 	ldr	r3, [r4, #88]	; 0x58
   301d8:	e1530002 	cmp	r3, r2
   301dc:	da000020 	ble	30264 <McTerminal::dispChar(unsigned char, DisplayBase*)+0x280>
    if (_curPosY < 0)
   301e0:	e3520000 	cmp	r2, #0
   301e4:	a8bd81f0 	popge	{r4, r5, r6, r7, r8, pc}
        _curPosY = 0;
   301e8:	e3a03000 	mov	r3, #0
   301ec:	e5853f44 	str	r3, [r5, #3908]	; 0xf44
   301f0:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    if (_curPosY >= _termRows)
   301f4:	e1530000 	cmp	r3, r0
   301f8:	baffffa8 	blt	300a0 <McTerminal::dispChar(unsigned char, DisplayBase*)+0xbc>
    if (rows >= _termRows)
   301fc:	e3500001 	cmp	r0, #1
   30200:	e0060c90 	mul	r6, r0, ip
   30204:	ca000037 	bgt	302e8 <McTerminal::dispChar(unsigned char, DisplayBase*)+0x304>
    for (int i = 0; i < _termRows * _termCols; i++)
   30208:	e3560000 	cmp	r6, #0
   3020c:	da000003 	ble	30220 <McTerminal::dispChar(unsigned char, DisplayBase*)+0x23c>
   30210:	e1a02006 	mov	r2, r6
   30214:	e284005c 	add	r0, r4, #92	; 0x5c
   30218:	e3a01020 	mov	r1, #32
   3021c:	eb007315 	bl	4ce78 <memset>
    _curPosX = 0;
   30220:	e3a03000 	mov	r3, #0
   30224:	e5853f40 	str	r3, [r5, #3904]	; 0xf40
   30228:	eaffffee 	b	301e8 <McTerminal::dispChar(unsigned char, DisplayBase*)+0x204>
    if (rows >= _termRows)
   3022c:	e3500001 	cmp	r0, #1
   30230:	e0060390 	mul	r6, r0, r3
   30234:	ca000040 	bgt	3033c <McTerminal::dispChar(unsigned char, DisplayBase*)+0x358>
    for (int i = 0; i < _termRows * _termCols; i++)
   30238:	e3560000 	cmp	r6, #0
   3023c:	da000003 	ble	30250 <McTerminal::dispChar(unsigned char, DisplayBase*)+0x26c>
   30240:	e1a02006 	mov	r2, r6
   30244:	e3a01020 	mov	r1, #32
   30248:	e284005c 	add	r0, r4, #92	; 0x5c
   3024c:	eb007309 	bl	4ce78 <memset>
    _curPosX = 0;
   30250:	e3a01000 	mov	r1, #0
   30254:	e5851f40 	str	r1, [r5, #3904]	; 0xf40
        _curPosY = 0;
   30258:	e3a03000 	mov	r3, #0
   3025c:	e5853f44 	str	r3, [r5, #3908]	; 0xf44
   30260:	eaffffb1 	b	3012c <McTerminal::dispChar(unsigned char, DisplayBase*)+0x148>
    if (rows >= _termRows)
   30264:	e3530001 	cmp	r3, #1
   30268:	e0060e93 	mul	r6, r3, lr
   3026c:	daffffe5 	ble	30208 <McTerminal::dispChar(unsigned char, DisplayBase*)+0x224>
    int charsToMove = (_termRows - rows) * _termCols;
   30270:	e046700e 	sub	r7, r6, lr
    memcpy(_screenChars, _screenChars+charsToWipe, charsToMove);
   30274:	e284005c 	add	r0, r4, #92	; 0x5c
   30278:	e1a02007 	mov	r2, r7
   3027c:	e080100e 	add	r1, r0, lr
   30280:	eb0072b8 	bl	4cd68 <memcpy>
    for (int i = charsToMove; i < _termRows * _termCols; i++)
   30284:	e1570006 	cmp	r7, r6
   30288:	aa000004 	bge	302a0 <McTerminal::dispChar(unsigned char, DisplayBase*)+0x2bc>
        _screenChars[i] = ' ';
   3028c:	e287005c 	add	r0, r7, #92	; 0x5c
   30290:	e0462007 	sub	r2, r6, r7
   30294:	e0840000 	add	r0, r4, r0
   30298:	e3a01020 	mov	r1, #32
   3029c:	eb0072f5 	bl	4ce78 <memset>
    _screenBufferValid = false;
   302a0:	e3a03000 	mov	r3, #0
   302a4:	e5952f44 	ldr	r2, [r5, #3908]	; 0xf44
   302a8:	e5951f40 	ldr	r1, [r5, #3904]	; 0xf40
   302ac:	e2422001 	sub	r2, r2, #1
    if (_curPosX < 0)
   302b0:	e1510003 	cmp	r1, r3
        _curPosY -= 1;
   302b4:	e5852f44 	str	r2, [r5, #3908]	; 0xf44
    _screenBufferValid = false;
   302b8:	e5c53f3c 	strb	r3, [r5, #3900]	; 0xf3c
        _curPosX = 0;
   302bc:	b5853f40 	strlt	r3, [r5, #3904]	; 0xf40
   302c0:	eaffffc6 	b	301e0 <McTerminal::dispChar(unsigned char, DisplayBase*)+0x1fc>
            pDisplay->write(_curPosX, _curPosY, _screenChars[cellIdx]);
   302c4:	e590e000 	ldr	lr, [r0]
   302c8:	e1a03001 	mov	r3, r1
   302cc:	e59e6008 	ldr	r6, [lr, #8]
   302d0:	e1a0100c 	mov	r1, ip
   302d4:	e12fff36 	blx	r6
   302d8:	e595cf40 	ldr	ip, [r5, #3904]	; 0xf40
   302dc:	e5952f44 	ldr	r2, [r5, #3908]	; 0xf44
   302e0:	e594e054 	ldr	lr, [r4, #84]	; 0x54
   302e4:	eaffffb2 	b	301b4 <McTerminal::dispChar(unsigned char, DisplayBase*)+0x1d0>
    int charsToMove = (_termRows - rows) * _termCols;
   302e8:	e046700c 	sub	r7, r6, ip
    memcpy(_screenChars, _screenChars+charsToWipe, charsToMove);
   302ec:	e284005c 	add	r0, r4, #92	; 0x5c
   302f0:	e1a02007 	mov	r2, r7
   302f4:	e080100c 	add	r1, r0, ip
   302f8:	eb00729a 	bl	4cd68 <memcpy>
    for (int i = charsToMove; i < _termRows * _termCols; i++)
   302fc:	e1570006 	cmp	r7, r6
   30300:	aa000004 	bge	30318 <McTerminal::dispChar(unsigned char, DisplayBase*)+0x334>
        _screenChars[i] = ' ';
   30304:	e287005c 	add	r0, r7, #92	; 0x5c
   30308:	e0462007 	sub	r2, r6, r7
   3030c:	e0840000 	add	r0, r4, r0
   30310:	e3a01020 	mov	r1, #32
   30314:	eb0072d7 	bl	4ce78 <memset>
    _screenBufferValid = false;
   30318:	e3a02000 	mov	r2, #0
   3031c:	e5953f44 	ldr	r3, [r5, #3908]	; 0xf44
   30320:	e5951f40 	ldr	r1, [r5, #3904]	; 0xf40
   30324:	e2433001 	sub	r3, r3, #1
    if (_curPosX < 0)
   30328:	e1510002 	cmp	r1, r2
        _curPosY -= 1;
   3032c:	e5853f44 	str	r3, [r5, #3908]	; 0xf44
    _screenBufferValid = false;
   30330:	e5c52f3c 	strb	r2, [r5, #3900]	; 0xf3c
        _curPosX = 0;
   30334:	b5852f40 	strlt	r2, [r5, #3904]	; 0xf40
   30338:	eaffff58 	b	300a0 <McTerminal::dispChar(unsigned char, DisplayBase*)+0xbc>
    int charsToMove = (_termRows - rows) * _termCols;
   3033c:	e0467003 	sub	r7, r6, r3
    memcpy(_screenChars, _screenChars+charsToWipe, charsToMove);
   30340:	e284005c 	add	r0, r4, #92	; 0x5c
   30344:	e1a02007 	mov	r2, r7
   30348:	e0801003 	add	r1, r0, r3
   3034c:	eb007285 	bl	4cd68 <memcpy>
    for (int i = charsToMove; i < _termRows * _termCols; i++)
   30350:	e1560007 	cmp	r6, r7
   30354:	da000004 	ble	3036c <McTerminal::dispChar(unsigned char, DisplayBase*)+0x388>
        _screenChars[i] = ' ';
   30358:	e287005c 	add	r0, r7, #92	; 0x5c
   3035c:	e0462007 	sub	r2, r6, r7
   30360:	e0840000 	add	r0, r4, r0
   30364:	e3a01020 	mov	r1, #32
   30368:	eb0072c2 	bl	4ce78 <memset>
    _screenBufferValid = false;
   3036c:	e3a03000 	mov	r3, #0
   30370:	e5951f40 	ldr	r1, [r5, #3904]	; 0xf40
   30374:	e5952f44 	ldr	r2, [r5, #3908]	; 0xf44
    if (_curPosX < 0)
   30378:	e1510003 	cmp	r1, r3
   3037c:	e2422001 	sub	r2, r2, #1
        _curPosY -= 1;
   30380:	e5852f44 	str	r2, [r5, #3908]	; 0xf44
    _screenBufferValid = false;
   30384:	e5c53f3c 	strb	r3, [r5, #3900]	; 0xf3c
        _curPosX = 0;
   30388:	b5853f40 	strlt	r3, [r5, #3904]	; 0xf40
   3038c:	b1a01003 	movlt	r1, r3
   30390:	e5943054 	ldr	r3, [r4, #84]	; 0x54
   30394:	eaffff61 	b	30120 <McTerminal::dispChar(unsigned char, DisplayBase*)+0x13c>

00030398 <McTerminal::displayRefreshFromMirrorHw()>:
    if (!_pDisplay)
   30398:	e5903050 	ldr	r3, [r0, #80]	; 0x50
   3039c:	e3530000 	cmp	r3, #0
   303a0:	012fff1e 	bxeq	lr
{
   303a4:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
   303a8:	e24dd00c 	sub	sp, sp, #12
   303ac:	e1a06000 	mov	r6, r0
    int numCharsAvailable = McManager::getNumCharsReceivedFromHost();
   303b0:	ebfff897 	bl	2e614 <McManager::getNumCharsReceivedFromHost()>
    if (numCharsAvailable != 0)
   303b4:	e2504000 	subs	r4, r0, #0
   303b8:	1a000024 	bne	30450 <McTerminal::displayRefreshFromMirrorHw()+0xb8>
   303bc:	e2867a02 	add	r7, r6, #8192	; 0x2000
    _screenBufferValid = true;
   303c0:	e3a02001 	mov	r2, #1
    if (_cursorShow)
   303c4:	e5d73f48 	ldrb	r3, [r7, #3912]	; 0xf48
    _screenBufferValid = true;
   303c8:	e5c72f3c 	strb	r2, [r7, #3900]	; 0xf3c
    if (_cursorShow)
   303cc:	e3530000 	cmp	r3, #0
   303d0:	1a000001 	bne	303dc <McTerminal::displayRefreshFromMirrorHw()+0x44>
}
   303d4:	e28dd00c 	add	sp, sp, #12
   303d8:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
        if (isTimeout(micros(), _cursorBlinkLastUs, _cursorBlinkRateMs*1000))
   303dc:	eb0018ed 	bl	36798 <micros>
   303e0:	e5972f50 	ldr	r2, [r7, #3920]	; 0xf50
   303e4:	e5971f4c 	ldr	r1, [r7, #3916]	; 0xf4c
   303e8:	e0623282 	rsb	r3, r2, r2, lsl #5
   303ec:	e0822103 	add	r2, r2, r3, lsl #2
   303f0:	e1a02182 	lsl	r2, r2, #3
   303f4:	eb0018fc 	bl	367ec <isTimeout>
   303f8:	e3500000 	cmp	r0, #0
   303fc:	0afffff4 	beq	303d4 <McTerminal::displayRefreshFromMirrorHw()+0x3c>
   30400:	e5960050 	ldr	r0, [r6, #80]	; 0x50
            if (_cursorIsOn)
   30404:	e5d72f54 	ldrb	r2, [r7, #3924]	; 0xf54
   30408:	e5903000 	ldr	r3, [r0]
   3040c:	e3520000 	cmp	r2, #0
   30410:	e5971f40 	ldr	r1, [r7, #3904]	; 0xf40
   30414:	e5934008 	ldr	r4, [r3, #8]
   30418:	e5972f44 	ldr	r2, [r7, #3908]	; 0xf44
                int cellIdx = _curPosY * _termCols + _curPosX;
   3041c:	15963054 	ldrne	r3, [r6, #84]	; 0x54
                _pDisplay->write(_curPosX, _curPosY, _screenChars[cellIdx]);
   30420:	10866001 	addne	r6, r6, r1
   30424:	10266293 	mlane	r6, r3, r2, r6
                _pDisplay->write(_curPosX, _curPosY, _cursorChar);
   30428:	05d73f55 	ldrbeq	r3, [r7, #3925]	; 0xf55
                _pDisplay->write(_curPosX, _curPosY, _screenChars[cellIdx]);
   3042c:	15d6305c 	ldrbne	r3, [r6, #92]	; 0x5c
                _pDisplay->write(_curPosX, _curPosY, _cursorChar);
   30430:	e12fff34 	blx	r4
            _cursorIsOn = !_cursorIsOn;
   30434:	e5d73f54 	ldrb	r3, [r7, #3924]	; 0xf54
   30438:	e2233001 	eor	r3, r3, #1
   3043c:	e5c73f54 	strb	r3, [r7, #3924]	; 0xf54
            _cursorBlinkLastUs = micros();
   30440:	eb0018d4 	bl	36798 <micros>
   30444:	e5870f4c 	str	r0, [r7, #3916]	; 0xf4c
}
   30448:	e28dd00c 	add	sp, sp, #12
   3044c:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
        uint8_t* pCharBuf = (uint8_t*)nmalloc_malloc(numCharsAvailable+1);
   30450:	e2840001 	add	r0, r4, #1
   30454:	ebffd02e 	bl	24514 <nmalloc_malloc>
        if (pCharBuf)
   30458:	e3500000 	cmp	r0, #0
        uint8_t* pCharBuf = (uint8_t*)nmalloc_malloc(numCharsAvailable+1);
   3045c:	e58d0004 	str	r0, [sp, #4]
        if (pCharBuf)
   30460:	0affffd5 	beq	303bc <McTerminal::displayRefreshFromMirrorHw()+0x24>
            int gotChars = McManager::getCharsReceivedFromHost(pCharBuf, numCharsAvailable);
   30464:	e1a01004 	mov	r1, r4
   30468:	ebfff86d 	bl	2e624 <McManager::getCharsReceivedFromHost(unsigned char*, int)>
            for (int i = 0; i < gotChars; i++)
   3046c:	e2505000 	subs	r5, r0, #0
   30470:	da000008 	ble	30498 <McTerminal::displayRefreshFromMirrorHw()+0x100>
   30474:	e3a04000 	mov	r4, #0
                dispChar(pCharBuf[i], _pDisplay);
   30478:	e59d3004 	ldr	r3, [sp, #4]
   3047c:	e5962050 	ldr	r2, [r6, #80]	; 0x50
   30480:	e7d31004 	ldrb	r1, [r3, r4]
   30484:	e1a00006 	mov	r0, r6
            for (int i = 0; i < gotChars; i++)
   30488:	e2844001 	add	r4, r4, #1
                dispChar(pCharBuf[i], _pDisplay);
   3048c:	ebfffed4 	bl	2ffe4 <McTerminal::dispChar(unsigned char, DisplayBase*)>
            for (int i = 0; i < gotChars; i++)
   30490:	e1550004 	cmp	r5, r4
   30494:	1afffff7 	bne	30478 <McTerminal::displayRefreshFromMirrorHw()+0xe0>
            nmalloc_free((void**)(&pCharBuf));
   30498:	e28d0004 	add	r0, sp, #4
   3049c:	ebffd059 	bl	24608 <nmalloc_free>
        for (int k = 0; k < _termRows; k++) 
   304a0:	e5963058 	ldr	r3, [r6, #88]	; 0x58
   304a4:	e3530000 	cmp	r3, #0
   304a8:	daffffc3 	ble	303bc <McTerminal::displayRefreshFromMirrorHw()+0x24>
   304ac:	e3a08000 	mov	r8, #0
   304b0:	e5962054 	ldr	r2, [r6, #84]	; 0x54
   304b4:	e2867a02 	add	r7, r6, #8192	; 0x2000
            for (int i = 0; i < _termCols; i++)
   304b8:	e3520000 	cmp	r2, #0
   304bc:	da000018 	ble	30524 <McTerminal::displayRefreshFromMirrorHw()+0x18c>
   304c0:	e3a05000 	mov	r5, #0
                int cellIdx = k * _termCols + i;
   304c4:	e0245298 	mla	r4, r8, r2, r5
                if (!_screenBufferValid || (_screenBuffer[cellIdx] != _screenChars[cellIdx]))
   304c8:	e5d73f3c 	ldrb	r3, [r7, #3900]	; 0xf3c
   304cc:	e0864004 	add	r4, r6, r4
   304d0:	e3530000 	cmp	r3, #0
   304d4:	e2841d5f 	add	r1, r4, #6080	; 0x17c0
   304d8:	e5d4305c 	ldrb	r3, [r4, #92]	; 0x5c
   304dc:	0a000002 	beq	304ec <McTerminal::displayRefreshFromMirrorHw()+0x154>
   304e0:	e5d1100c 	ldrb	r1, [r1, #12]
   304e4:	e1510003 	cmp	r1, r3
   304e8:	0a000009 	beq	30514 <McTerminal::displayRefreshFromMirrorHw()+0x17c>
                    _pDisplay->write(i, k, _screenChars[cellIdx]);
   304ec:	e5960050 	ldr	r0, [r6, #80]	; 0x50
   304f0:	e1a01005 	mov	r1, r5
   304f4:	e5902000 	ldr	r2, [r0]
   304f8:	e5929008 	ldr	r9, [r2, #8]
   304fc:	e1a02008 	mov	r2, r8
   30500:	e12fff39 	blx	r9
                    _screenBuffer[cellIdx] = _screenChars[cellIdx];
   30504:	e5d4305c 	ldrb	r3, [r4, #92]	; 0x5c
   30508:	e2844d5f 	add	r4, r4, #6080	; 0x17c0
   3050c:	e5c4300c 	strb	r3, [r4, #12]
   30510:	e5962054 	ldr	r2, [r6, #84]	; 0x54
            for (int i = 0; i < _termCols; i++)
   30514:	e2855001 	add	r5, r5, #1
   30518:	e1550002 	cmp	r5, r2
   3051c:	baffffe8 	blt	304c4 <McTerminal::displayRefreshFromMirrorHw()+0x12c>
   30520:	e5963058 	ldr	r3, [r6, #88]	; 0x58
        for (int k = 0; k < _termRows; k++) 
   30524:	e2888001 	add	r8, r8, #1
   30528:	e1580003 	cmp	r8, r3
   3052c:	baffffe1 	blt	304b8 <McTerminal::displayRefreshFromMirrorHw()+0x120>
   30530:	eaffffa2 	b	303c0 <McTerminal::displayRefreshFromMirrorHw()+0x28>

00030534 <McTerminal::vscrollBuffer(int)>:
{
   30534:	e92d4070 	push	{r4, r5, r6, lr}
    if (rows >= _termRows)
   30538:	e5903058 	ldr	r3, [r0, #88]	; 0x58
   3053c:	e590c054 	ldr	ip, [r0, #84]	; 0x54
   30540:	e1530001 	cmp	r3, r1
{
   30544:	e1a04000 	mov	r4, r0
   30548:	e006039c 	mul	r6, ip, r3
    if (rows >= _termRows)
   3054c:	ca00000a 	bgt	3057c <McTerminal::vscrollBuffer(int)+0x48>
    for (int i = 0; i < _termRows * _termCols; i++)
   30550:	e3560000 	cmp	r6, #0
   30554:	da000003 	ble	30568 <McTerminal::vscrollBuffer(int)+0x34>
   30558:	e1a02006 	mov	r2, r6
   3055c:	e3a01020 	mov	r1, #32
   30560:	e280005c 	add	r0, r0, #92	; 0x5c
   30564:	eb007243 	bl	4ce78 <memset>
    _curPosX = 0;
   30568:	e3a03000 	mov	r3, #0
   3056c:	e2844a02 	add	r4, r4, #8192	; 0x2000
   30570:	e5843f40 	str	r3, [r4, #3904]	; 0xf40
    _curPosY = 0;
   30574:	e5843f44 	str	r3, [r4, #3908]	; 0xf44
   30578:	e8bd8070 	pop	{r4, r5, r6, pc}
    int charsToMove = (_termRows - rows) * _termCols;
   3057c:	e0433001 	sub	r3, r3, r1
   30580:	e005039c 	mul	r5, ip, r3
    memcpy(_screenChars, _screenChars+charsToWipe, charsToMove);
   30584:	e280005c 	add	r0, r0, #92	; 0x5c
   30588:	e1a02005 	mov	r2, r5
   3058c:	e021019c 	mla	r1, ip, r1, r0
   30590:	eb0071f4 	bl	4cd68 <memcpy>
    for (int i = charsToMove; i < _termRows * _termCols; i++)
   30594:	e1550006 	cmp	r5, r6
   30598:	aa000004 	bge	305b0 <McTerminal::vscrollBuffer(int)+0x7c>
        _screenChars[i] = ' ';
   3059c:	e285005c 	add	r0, r5, #92	; 0x5c
   305a0:	e0462005 	sub	r2, r6, r5
   305a4:	e0840000 	add	r0, r4, r0
   305a8:	e3a01020 	mov	r1, #32
   305ac:	eb007231 	bl	4ce78 <memset>
    _screenBufferValid = false;
   305b0:	e3a03000 	mov	r3, #0
   305b4:	e2844a02 	add	r4, r4, #8192	; 0x2000
   305b8:	e5c43f3c 	strb	r3, [r4, #3900]	; 0xf3c
}
   305bc:	e8bd8070 	pop	{r4, r5, r6, pc}

000305c0 <McTerminal::moveAndCheckCurPos(int, int, int, int, DisplayBase*)>:
{
   305c0:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   305c4:	e1a07000 	mov	r7, r0
    if (_cursorIsOn)
   305c8:	e2805a02 	add	r5, r0, #8192	; 0x2000
   305cc:	e5d50f54 	ldrb	r0, [r5, #3924]	; 0xf54
{
   305d0:	e1a04001 	mov	r4, r1
    if (_cursorIsOn)
   305d4:	e3500000 	cmp	r0, #0
{
   305d8:	e1a08002 	mov	r8, r2
   305dc:	e1a09003 	mov	r9, r3
   305e0:	e597c054 	ldr	ip, [r7, #84]	; 0x54
   305e4:	e59d6020 	ldr	r6, [sp, #32]
    if (_cursorIsOn)
   305e8:	0a00000d 	beq	30624 <McTerminal::moveAndCheckCurPos(int, int, int, int, DisplayBase*)+0x64>
        if (pDisplay)
   305ec:	e59d3024 	ldr	r3, [sp, #36]	; 0x24
   305f0:	e3530000 	cmp	r3, #0
   305f4:	0a00000a 	beq	30624 <McTerminal::moveAndCheckCurPos(int, int, int, int, DisplayBase*)+0x64>
        int cellIdx = _curPosY * _termCols + _curPosX;
   305f8:	e5951f40 	ldr	r1, [r5, #3904]	; 0xf40
   305fc:	e5952f44 	ldr	r2, [r5, #3908]	; 0xf44
            pDisplay->write(_curPosX, _curPosY, _screenChars[cellIdx]);
   30600:	e0873001 	add	r3, r7, r1
   30604:	e02c329c 	mla	ip, ip, r2, r3
   30608:	e59d3024 	ldr	r3, [sp, #36]	; 0x24
   3060c:	e5930000 	ldr	r0, [r3]
   30610:	e5dc305c 	ldrb	r3, [ip, #92]	; 0x5c
   30614:	e590a008 	ldr	sl, [r0, #8]
   30618:	e59d0024 	ldr	r0, [sp, #36]	; 0x24
   3061c:	e12fff3a 	blx	sl
   30620:	e597c054 	ldr	ip, [r7, #84]	; 0x54
    if (absX >= 0)
   30624:	e3540000 	cmp	r4, #0
   30628:	b5954f40 	ldrlt	r4, [r5, #3904]	; 0xf40
        _curPosX = absX;
   3062c:	a5854f40 	strge	r4, [r5, #3904]	; 0xf40
    if (absY >= 0)
   30630:	e3580000 	cmp	r8, #0
   30634:	b5958f44 	ldrlt	r8, [r5, #3908]	; 0xf44
    if (_curPosX+relX >= 0)
   30638:	e0843009 	add	r3, r4, r9
   3063c:	e1c33fc3 	bic	r3, r3, r3, asr #31
    _curPosY += relY;
   30640:	e0862008 	add	r2, r6, r8
    if (_curPosX >= _termCols)
   30644:	e153000c 	cmp	r3, ip
   30648:	e5853f40 	str	r3, [r5, #3904]	; 0xf40
    _curPosY += relY;
   3064c:	e5852f44 	str	r2, [r5, #3908]	; 0xf44
        _curPosX = 0;
   30650:	a3a03000 	movge	r3, #0
        _curPosY++;
   30654:	a2822001 	addge	r2, r2, #1
   30658:	a5852f44 	strge	r2, [r5, #3908]	; 0xf44
        _curPosX = 0;
   3065c:	a5853f40 	strge	r3, [r5, #3904]	; 0xf40
    if (_curPosY >= _termRows)
   30660:	e5973058 	ldr	r3, [r7, #88]	; 0x58
   30664:	e1530002 	cmp	r3, r2
   30668:	da000004 	ble	30680 <McTerminal::moveAndCheckCurPos(int, int, int, int, DisplayBase*)+0xc0>
    if (_curPosY < 0)
   3066c:	e3520000 	cmp	r2, #0
   30670:	a8bd87f0 	popge	{r4, r5, r6, r7, r8, r9, sl, pc}
        _curPosY = 0;
   30674:	e3a03000 	mov	r3, #0
   30678:	e5853f44 	str	r3, [r5, #3908]	; 0xf44
}
   3067c:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    if (rows >= _termRows)
   30680:	e3530001 	cmp	r3, #1
   30684:	e004039c 	mul	r4, ip, r3
   30688:	ca000008 	bgt	306b0 <McTerminal::moveAndCheckCurPos(int, int, int, int, DisplayBase*)+0xf0>
    for (int i = 0; i < _termRows * _termCols; i++)
   3068c:	e3540000 	cmp	r4, #0
   30690:	da000003 	ble	306a4 <McTerminal::moveAndCheckCurPos(int, int, int, int, DisplayBase*)+0xe4>
   30694:	e1a02004 	mov	r2, r4
   30698:	e287005c 	add	r0, r7, #92	; 0x5c
   3069c:	e3a01020 	mov	r1, #32
   306a0:	eb0071f4 	bl	4ce78 <memset>
    _curPosX = 0;
   306a4:	e3a03000 	mov	r3, #0
   306a8:	e5853f40 	str	r3, [r5, #3904]	; 0xf40
   306ac:	eafffff0 	b	30674 <McTerminal::moveAndCheckCurPos(int, int, int, int, DisplayBase*)+0xb4>
    int charsToMove = (_termRows - rows) * _termCols;
   306b0:	e044600c 	sub	r6, r4, ip
    memcpy(_screenChars, _screenChars+charsToWipe, charsToMove);
   306b4:	e287005c 	add	r0, r7, #92	; 0x5c
   306b8:	e1a02006 	mov	r2, r6
   306bc:	e080100c 	add	r1, r0, ip
   306c0:	eb0071a8 	bl	4cd68 <memcpy>
    for (int i = charsToMove; i < _termRows * _termCols; i++)
   306c4:	e1560004 	cmp	r6, r4
   306c8:	aa000004 	bge	306e0 <McTerminal::moveAndCheckCurPos(int, int, int, int, DisplayBase*)+0x120>
        _screenChars[i] = ' ';
   306cc:	e286005c 	add	r0, r6, #92	; 0x5c
   306d0:	e0442006 	sub	r2, r4, r6
   306d4:	e0870000 	add	r0, r7, r0
   306d8:	e3a01020 	mov	r1, #32
   306dc:	eb0071e5 	bl	4ce78 <memset>
    _screenBufferValid = false;
   306e0:	e3a03000 	mov	r3, #0
   306e4:	e5952f44 	ldr	r2, [r5, #3908]	; 0xf44
   306e8:	e5951f40 	ldr	r1, [r5, #3904]	; 0xf40
   306ec:	e2422001 	sub	r2, r2, #1
    if (_curPosX < 0)
   306f0:	e1510003 	cmp	r1, r3
        _curPosX = 0;
   306f4:	b5853f40 	strlt	r3, [r5, #3904]	; 0xf40
    if (_curPosY < 0)
   306f8:	e3520000 	cmp	r2, #0
        _curPosY -= 1;
   306fc:	e5852f44 	str	r2, [r5, #3908]	; 0xf44
    _screenBufferValid = false;
   30700:	e5c53f3c 	strb	r3, [r5, #3900]	; 0xf3c
    if (_curPosY < 0)
   30704:	a8bd87f0 	popge	{r4, r5, r6, r7, r8, r9, sl, pc}
   30708:	eaffffd9 	b	30674 <McTerminal::moveAndCheckCurPos(int, int, int, int, DisplayBase*)+0xb4>

0003070c <McZXSpectrum::enable()>:
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// Enable machine
void McZXSpectrum::enable()
{
    _screenBufferValid = false;
   3070c:	e3a03000 	mov	r3, #0
   30710:	e2802a01 	add	r2, r0, #4096	; 0x1000
    _screenCacheValid = false;
   30714:	e2800a03 	add	r0, r0, #12288	; 0x3000
    _screenBufferValid = false;
   30718:	e5c23b54 	strb	r3, [r2, #2900]	; 0xb54
    _screenCacheValid = false;
   3071c:	e5c03655 	strb	r3, [r0, #1621]	; 0x655
}
   30720:	e12fff1e 	bx	lr

00030724 <McZXSpectrum::disable()>:

// Disable machine
void McZXSpectrum::disable()
{
}
   30724:	e12fff1e 	bx	lr

00030728 <McZXSpectrum::keyHandler(unsigned char, unsigned char const*)>:
    return retVal;
}

// Handle a key press
void McZXSpectrum::keyHandler([[maybe_unused]] unsigned char ucModifiers, [[maybe_unused]] const unsigned char rawKeys[MAX_KEYS])
{
   30728:	e3e03000 	mvn	r3, #0
   3072c:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   30730:	e59fc238 	ldr	ip, [pc, #568]	; 30970 <McZXSpectrum::keyHandler(unsigned char, unsigned char const*)+0x248>
   30734:	e24dd014 	sub	sp, sp, #20
   30738:	e58c3000 	str	r3, [ip]
   3073c:	e58c3004 	str	r3, [ip, #4]

    // Check for special codes in the key buffer
    bool specialKeyBackspace = false;
    for (int i = 0; i < MAX_KEYS; i++)
    {
        if (rawKeys[i] == KEY_BACKSPACE)
   30740:	e5d2a000 	ldrb	sl, [r2]
   30744:	e5d29001 	ldrb	r9, [r2, #1]
   30748:	e24a302a 	sub	r3, sl, #42	; 0x2a
   3074c:	e16f3f13 	clz	r3, r3
   30750:	e5d28002 	ldrb	r8, [r2, #2]
            specialKeyBackspace = true;
   30754:	e359002a 	cmp	r9, #42	; 0x2a
        if (rawKeys[i] == KEY_BACKSPACE)
   30758:	e5d27003 	ldrb	r7, [r2, #3]
   3075c:	e1a032a3 	lsr	r3, r3, #5
   30760:	e5d26004 	ldrb	r6, [r2, #4]
            specialKeyBackspace = true;
   30764:	03a03001 	moveq	r3, #1
   30768:	e358002a 	cmp	r8, #42	; 0x2a
   3076c:	03a03001 	moveq	r3, #1
        if (rawKeys[i] == KEY_BACKSPACE)
   30770:	e5d25005 	ldrb	r5, [r2, #5]
            specialKeyBackspace = true;
   30774:	e357002a 	cmp	r7, #42	; 0x2a
   30778:	03a03001 	moveq	r3, #1
   3077c:	e356002a 	cmp	r6, #42	; 0x2a
   30780:	03a03001 	moveq	r3, #1
   30784:	e355002a 	cmp	r5, #42	; 0x2a
   30788:	03a03001 	moveq	r3, #1
   3078c:	e59f01e0 	ldr	r0, [pc, #480]	; 30974 <McZXSpectrum::keyHandler(unsigned char, unsigned char const*)+0x24c>
   30790:	e58d300c 	str	r3, [sp, #12]
{
   30794:	e58d1008 	str	r1, [sp, #8]
   30798:	e1a0300c 	mov	r3, ip
   3079c:	e58dc004 	str	ip, [sp, #4]
   307a0:	ea00000a 	b	307d0 <McZXSpectrum::keyHandler(unsigned char, unsigned char const*)+0xa8>
            {KEY_ENTER, KEY_L, KEY_K, KEY_J, KEY_H},
            {KEY_SPACE, KEY_HANJA, KEY_M, KEY_N, KEY_B}
        };

    // Handle encoding of keys
    for (int keyRow = 0; keyRow < ZXSPECTRUM_KEYBOARD_NUM_ROWS; keyRow++)
   307a4:	e1510000 	cmp	r1, r0
    {
        uint32_t keyBits = getKeyBitmap(keyTable[keyRow], ZXSPECTRUM_KEYS_IN_ROW, rawKeys);
        _spectrumKeyboardIOBitMap[keyRow] = keyBits;
   307a8:	e59d1004 	ldr	r1, [sp, #4]
   307ac:	e4c13001 	strb	r3, [r1], #1
   307b0:	e58d1004 	str	r1, [sp, #4]
    for (int keyRow = 0; keyRow < ZXSPECTRUM_KEYBOARD_NUM_ROWS; keyRow++)
   307b4:	0a000051 	beq	30900 <McZXSpectrum::keyHandler(unsigned char, unsigned char const*)+0x1d8>
   307b8:	e5d2a000 	ldrb	sl, [r2]
   307bc:	e5d29001 	ldrb	r9, [r2, #1]
   307c0:	e5d28002 	ldrb	r8, [r2, #2]
   307c4:	e5d27003 	ldrb	r7, [r2, #3]
   307c8:	e5d26004 	ldrb	r6, [r2, #4]
   307cc:	e5d25005 	ldrb	r5, [r2, #5]
            if (currentKeyPresses[i] == keyCodes[j])
   307d0:	e590b000 	ldr	fp, [r0]
   307d4:	e5904004 	ldr	r4, [r0, #4]
   307d8:	e15b000a 	cmp	fp, sl
   307dc:	03a010fc 	moveq	r1, #252	; 0xfc
   307e0:	03a030fe 	moveq	r3, #254	; 0xfe
   307e4:	13a010fd 	movne	r1, #253	; 0xfd
   307e8:	13a030ff 	movne	r3, #255	; 0xff
   307ec:	e154000a 	cmp	r4, sl
   307f0:	01a03001 	moveq	r3, r1
   307f4:	e590e008 	ldr	lr, [r0, #8]
   307f8:	e590c00c 	ldr	ip, [r0, #12]
   307fc:	e5901010 	ldr	r1, [r0, #16]
   30800:	e15e000a 	cmp	lr, sl
                retVal &= ~bitMask;
   30804:	03c33004 	biceq	r3, r3, #4
            if (currentKeyPresses[i] == keyCodes[j])
   30808:	e15c000a 	cmp	ip, sl
                retVal &= ~bitMask;
   3080c:	03c33008 	biceq	r3, r3, #8
            if (currentKeyPresses[i] == keyCodes[j])
   30810:	e151000a 	cmp	r1, sl
                retVal &= ~bitMask;
   30814:	03c33010 	biceq	r3, r3, #16
            if (currentKeyPresses[i] == keyCodes[j])
   30818:	e15b0009 	cmp	fp, r9
                retVal &= ~bitMask;
   3081c:	03c33001 	biceq	r3, r3, #1
            if (currentKeyPresses[i] == keyCodes[j])
   30820:	e1540009 	cmp	r4, r9
                retVal &= ~bitMask;
   30824:	03c33002 	biceq	r3, r3, #2
            if (currentKeyPresses[i] == keyCodes[j])
   30828:	e15e0009 	cmp	lr, r9
                retVal &= ~bitMask;
   3082c:	03c33004 	biceq	r3, r3, #4
            if (currentKeyPresses[i] == keyCodes[j])
   30830:	e15c0009 	cmp	ip, r9
                retVal &= ~bitMask;
   30834:	03c33008 	biceq	r3, r3, #8
            if (currentKeyPresses[i] == keyCodes[j])
   30838:	e1510009 	cmp	r1, r9
                retVal &= ~bitMask;
   3083c:	03c33010 	biceq	r3, r3, #16
            if (currentKeyPresses[i] == keyCodes[j])
   30840:	e158000b 	cmp	r8, fp
                retVal &= ~bitMask;
   30844:	03c33001 	biceq	r3, r3, #1
            if (currentKeyPresses[i] == keyCodes[j])
   30848:	e1580004 	cmp	r8, r4
                retVal &= ~bitMask;
   3084c:	03c33002 	biceq	r3, r3, #2
            if (currentKeyPresses[i] == keyCodes[j])
   30850:	e15e0008 	cmp	lr, r8
                retVal &= ~bitMask;
   30854:	03c33004 	biceq	r3, r3, #4
            if (currentKeyPresses[i] == keyCodes[j])
   30858:	e15c0008 	cmp	ip, r8
                retVal &= ~bitMask;
   3085c:	03c33008 	biceq	r3, r3, #8
            if (currentKeyPresses[i] == keyCodes[j])
   30860:	e1510008 	cmp	r1, r8
                retVal &= ~bitMask;
   30864:	03c33010 	biceq	r3, r3, #16
            if (currentKeyPresses[i] == keyCodes[j])
   30868:	e15b0007 	cmp	fp, r7
                retVal &= ~bitMask;
   3086c:	03c33001 	biceq	r3, r3, #1
            if (currentKeyPresses[i] == keyCodes[j])
   30870:	e1540007 	cmp	r4, r7
                retVal &= ~bitMask;
   30874:	03c33002 	biceq	r3, r3, #2
            if (currentKeyPresses[i] == keyCodes[j])
   30878:	e15e0007 	cmp	lr, r7
                retVal &= ~bitMask;
   3087c:	03c33004 	biceq	r3, r3, #4
            if (currentKeyPresses[i] == keyCodes[j])
   30880:	e15c0007 	cmp	ip, r7
                retVal &= ~bitMask;
   30884:	03c33008 	biceq	r3, r3, #8
            if (currentKeyPresses[i] == keyCodes[j])
   30888:	e1510007 	cmp	r1, r7
                retVal &= ~bitMask;
   3088c:	03c33010 	biceq	r3, r3, #16
            if (currentKeyPresses[i] == keyCodes[j])
   30890:	e15b0006 	cmp	fp, r6
                retVal &= ~bitMask;
   30894:	03c33001 	biceq	r3, r3, #1
            if (currentKeyPresses[i] == keyCodes[j])
   30898:	e1540006 	cmp	r4, r6
                retVal &= ~bitMask;
   3089c:	03c33002 	biceq	r3, r3, #2
            if (currentKeyPresses[i] == keyCodes[j])
   308a0:	e15e0006 	cmp	lr, r6
                retVal &= ~bitMask;
   308a4:	03c33004 	biceq	r3, r3, #4
            if (currentKeyPresses[i] == keyCodes[j])
   308a8:	e15c0006 	cmp	ip, r6
                retVal &= ~bitMask;
   308ac:	03c33008 	biceq	r3, r3, #8
            if (currentKeyPresses[i] == keyCodes[j])
   308b0:	e1510006 	cmp	r1, r6
                retVal &= ~bitMask;
   308b4:	03c33010 	biceq	r3, r3, #16
            if (currentKeyPresses[i] == keyCodes[j])
   308b8:	e155000b 	cmp	r5, fp
                retVal &= ~bitMask;
   308bc:	03c33001 	biceq	r3, r3, #1
            if (currentKeyPresses[i] == keyCodes[j])
   308c0:	e1550004 	cmp	r5, r4
                retVal &= ~bitMask;
   308c4:	03c33002 	biceq	r3, r3, #2
            if (currentKeyPresses[i] == keyCodes[j])
   308c8:	e15e0005 	cmp	lr, r5
                retVal &= ~bitMask;
   308cc:	03c33004 	biceq	r3, r3, #4
            if (currentKeyPresses[i] == keyCodes[j])
   308d0:	e15c0005 	cmp	ip, r5
                retVal &= ~bitMask;
   308d4:	03c33008 	biceq	r3, r3, #8
            if (currentKeyPresses[i] == keyCodes[j])
   308d8:	e1510005 	cmp	r1, r5
   308dc:	e2800014 	add	r0, r0, #20
    for (int keyRow = 0; keyRow < ZXSPECTRUM_KEYBOARD_NUM_ROWS; keyRow++)
   308e0:	e59f1090 	ldr	r1, [pc, #144]	; 30978 <McZXSpectrum::keyHandler(unsigned char, unsigned char const*)+0x250>
            if (currentKeyPresses[i] == keyCodes[j])
   308e4:	1affffae 	bne	307a4 <McZXSpectrum::keyHandler(unsigned char, unsigned char const*)+0x7c>
    for (int keyRow = 0; keyRow < ZXSPECTRUM_KEYBOARD_NUM_ROWS; keyRow++)
   308e8:	e1510000 	cmp	r1, r0
        _spectrumKeyboardIOBitMap[keyRow] = keyBits;
   308ec:	e59d1004 	ldr	r1, [sp, #4]
                retVal &= ~bitMask;
   308f0:	e3c33010 	bic	r3, r3, #16
        _spectrumKeyboardIOBitMap[keyRow] = keyBits;
   308f4:	e4c13001 	strb	r3, [r1], #1
   308f8:	e58d1004 	str	r1, [sp, #4]
    for (int keyRow = 0; keyRow < ZXSPECTRUM_KEYBOARD_NUM_ROWS; keyRow++)
   308fc:	1affffad 	bne	307b8 <McZXSpectrum::keyHandler(unsigned char, unsigned char const*)+0x90>
    }

    // Handle shift key modifier (inject a shift for backspace)
    if (specialKeyBackspace || ((ucModifiers & KEY_MOD_LSHIFT) != 0) || ((ucModifiers & KEY_MOD_RSHIFT) != 0))
   30900:	e59d300c 	ldr	r3, [sp, #12]
   30904:	e3530000 	cmp	r3, #0
   30908:	1a000009 	bne	30934 <McZXSpectrum::keyHandler(unsigned char, unsigned char const*)+0x20c>
   3090c:	e59d3008 	ldr	r3, [sp, #8]
   30910:	e3130022 	tst	r3, #34	; 0x22
   30914:	1a00000f 	bne	30958 <McZXSpectrum::keyHandler(unsigned char, unsigned char const*)+0x230>
    // Handle modifier for delete (on the zero key)
    if (specialKeyBackspace)
        _spectrumKeyboardIOBitMap[4] &= 0xfe;

    // Handle Sym key (CTRL)
    if (((ucModifiers & KEY_MOD_LCTRL) != 0) || ((ucModifiers & KEY_MOD_RCTRL) != 0))
   30918:	e3130011 	tst	r3, #17
        _spectrumKeyboardIOBitMap[7] &= 0xfd;
   3091c:	159f204c 	ldrne	r2, [pc, #76]	; 30970 <McZXSpectrum::keyHandler(unsigned char, unsigned char const*)+0x248>
   30920:	15d23007 	ldrbne	r3, [r2, #7]
   30924:	13c33002 	bicne	r3, r3, #2
   30928:	15c23007 	strbne	r3, [r2, #7]
    //                 _spectrumKeyboardIOBitMap[5],
    //                 _spectrumKeyboardIOBitMap[6],
    //                 _spectrumKeyboardIOBitMap[7]
    //                 );

}
   3092c:	e28dd014 	add	sp, sp, #20
   30930:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
        _spectrumKeyboardIOBitMap[0] &= 0xfe;
   30934:	e59f1034 	ldr	r1, [pc, #52]	; 30970 <McZXSpectrum::keyHandler(unsigned char, unsigned char const*)+0x248>
   30938:	e5d12000 	ldrb	r2, [r1]
        _spectrumKeyboardIOBitMap[4] &= 0xfe;
   3093c:	e5d13004 	ldrb	r3, [r1, #4]
        _spectrumKeyboardIOBitMap[0] &= 0xfe;
   30940:	e3c22001 	bic	r2, r2, #1
        _spectrumKeyboardIOBitMap[4] &= 0xfe;
   30944:	e3c33001 	bic	r3, r3, #1
   30948:	e5c13004 	strb	r3, [r1, #4]
        _spectrumKeyboardIOBitMap[0] &= 0xfe;
   3094c:	e5c12000 	strb	r2, [r1]
   30950:	e59d3008 	ldr	r3, [sp, #8]
   30954:	eaffffef 	b	30918 <McZXSpectrum::keyHandler(unsigned char, unsigned char const*)+0x1f0>
   30958:	e59f2010 	ldr	r2, [pc, #16]	; 30970 <McZXSpectrum::keyHandler(unsigned char, unsigned char const*)+0x248>
   3095c:	e5d23000 	ldrb	r3, [r2]
   30960:	e3c33001 	bic	r3, r3, #1
   30964:	e5c23000 	strb	r3, [r2]
   30968:	e59d3008 	ldr	r3, [sp, #8]
   3096c:	eaffffe9 	b	30918 <McZXSpectrum::keyHandler(unsigned char, unsigned char const*)+0x1f0>
   30970:	0007812c 	.word	0x0007812c
   30974:	000550ac 	.word	0x000550ac
   30978:	0005514c 	.word	0x0005514c

0003097c <McZXSpectrum::machineHeartbeat()>:
    McManager::targetIrq();
   3097c:	e3e00000 	mvn	r0, #0
   30980:	eafff54d 	b	2debc <McManager::targetIrq(int)>

00030984 <McZXSpectrum::busAccessCallback(unsigned long, unsigned long, unsigned long, unsigned long&)>:
    
    #ifdef USE_PI_SPI0_CE0_AS_DEBUG_PIN
        digitalWrite(BR_DEBUG_PI_SPI0_CE0, 1);
    #endif

    if ((flags & BR_CTRL_BUS_RD_MASK) && (flags & BR_CTRL_BUS_IORQ_MASK))
   30984:	e2033009 	and	r3, r3, #9
   30988:	e3530009 	cmp	r3, #9
{
   3098c:	e59d3000 	ldr	r3, [sp]
    if ((flags & BR_CTRL_BUS_RD_MASK) && (flags & BR_CTRL_BUS_IORQ_MASK))
   30990:	112fff1e 	bxne	lr
    {
        // Check for a keyboard address range - any even port number
        if ((addr & 0x01) == 0)
   30994:	e3110001 	tst	r1, #1
   30998:	1a000030 	bne	30a60 <McZXSpectrum::busAccessCallback(unsigned long, unsigned long, unsigned long, unsigned long&)+0xdc>
        {
            // Iterate bits in upper address to get the code by and-ing the key bits
            // this emulates the operation of a bitmapped keyboard matrix
            retVal = 0xff;
   3099c:	e3a020ff 	mov	r2, #255	; 0xff
            uint32_t addrBitMask = 0x0100;
            for (int keyRow = 0; keyRow < ZXSPECTRUM_KEYBOARD_NUM_ROWS; keyRow++)
            {
                if ((addr & addrBitMask) == 0)
   309a0:	e3110c01 	tst	r1, #256	; 0x100
            retVal = 0xff;
   309a4:	e5832000 	str	r2, [r3]
                    retVal &= _spectrumKeyboardIOBitMap[keyRow];
   309a8:	059f20c4 	ldreq	r2, [pc, #196]	; 30a74 <McZXSpectrum::busAccessCallback(unsigned long, unsigned long, unsigned long, unsigned long&)+0xf0>
   309ac:	05d22000 	ldrbeq	r2, [r2]
   309b0:	05832000 	streq	r2, [r3]
                if ((addr & addrBitMask) == 0)
   309b4:	e3110c02 	tst	r1, #512	; 0x200
                    retVal &= _spectrumKeyboardIOBitMap[keyRow];
   309b8:	059f00b4 	ldreq	r0, [pc, #180]	; 30a74 <McZXSpectrum::busAccessCallback(unsigned long, unsigned long, unsigned long, unsigned long&)+0xf0>
   309bc:	05932000 	ldreq	r2, [r3]
   309c0:	05d00001 	ldrbeq	r0, [r0, #1]
   309c4:	00022000 	andeq	r2, r2, r0
   309c8:	05832000 	streq	r2, [r3]
                if ((addr & addrBitMask) == 0)
   309cc:	e3110b01 	tst	r1, #1024	; 0x400
                    retVal &= _spectrumKeyboardIOBitMap[keyRow];
   309d0:	059f009c 	ldreq	r0, [pc, #156]	; 30a74 <McZXSpectrum::busAccessCallback(unsigned long, unsigned long, unsigned long, unsigned long&)+0xf0>
   309d4:	05932000 	ldreq	r2, [r3]
   309d8:	05d00002 	ldrbeq	r0, [r0, #2]
   309dc:	00022000 	andeq	r2, r2, r0
   309e0:	05832000 	streq	r2, [r3]
                if ((addr & addrBitMask) == 0)
   309e4:	e3110b02 	tst	r1, #2048	; 0x800
                    retVal &= _spectrumKeyboardIOBitMap[keyRow];
   309e8:	059f0084 	ldreq	r0, [pc, #132]	; 30a74 <McZXSpectrum::busAccessCallback(unsigned long, unsigned long, unsigned long, unsigned long&)+0xf0>
   309ec:	05932000 	ldreq	r2, [r3]
   309f0:	05d00003 	ldrbeq	r0, [r0, #3]
   309f4:	00022000 	andeq	r2, r2, r0
   309f8:	05832000 	streq	r2, [r3]
                if ((addr & addrBitMask) == 0)
   309fc:	e3110a01 	tst	r1, #4096	; 0x1000
                    retVal &= _spectrumKeyboardIOBitMap[keyRow];
   30a00:	059f006c 	ldreq	r0, [pc, #108]	; 30a74 <McZXSpectrum::busAccessCallback(unsigned long, unsigned long, unsigned long, unsigned long&)+0xf0>
   30a04:	05932000 	ldreq	r2, [r3]
   30a08:	05d00004 	ldrbeq	r0, [r0, #4]
   30a0c:	00022000 	andeq	r2, r2, r0
   30a10:	05832000 	streq	r2, [r3]
                if ((addr & addrBitMask) == 0)
   30a14:	e3110a02 	tst	r1, #8192	; 0x2000
                    retVal &= _spectrumKeyboardIOBitMap[keyRow];
   30a18:	059f0054 	ldreq	r0, [pc, #84]	; 30a74 <McZXSpectrum::busAccessCallback(unsigned long, unsigned long, unsigned long, unsigned long&)+0xf0>
   30a1c:	05932000 	ldreq	r2, [r3]
   30a20:	05d00005 	ldrbeq	r0, [r0, #5]
   30a24:	00022000 	andeq	r2, r2, r0
   30a28:	05832000 	streq	r2, [r3]
                if ((addr & addrBitMask) == 0)
   30a2c:	e3110901 	tst	r1, #16384	; 0x4000
                    retVal &= _spectrumKeyboardIOBitMap[keyRow];
   30a30:	059f003c 	ldreq	r0, [pc, #60]	; 30a74 <McZXSpectrum::busAccessCallback(unsigned long, unsigned long, unsigned long, unsigned long&)+0xf0>
   30a34:	05932000 	ldreq	r2, [r3]
   30a38:	05d00006 	ldrbeq	r0, [r0, #6]
   30a3c:	00022000 	andeq	r2, r2, r0
   30a40:	05832000 	streq	r2, [r3]
                if ((addr & addrBitMask) == 0)
   30a44:	e3110902 	tst	r1, #32768	; 0x8000
                    retVal &= _spectrumKeyboardIOBitMap[keyRow];
   30a48:	059f1024 	ldreq	r1, [pc, #36]	; 30a74 <McZXSpectrum::busAccessCallback(unsigned long, unsigned long, unsigned long, unsigned long&)+0xf0>
   30a4c:	05932000 	ldreq	r2, [r3]
   30a50:	05d11007 	ldrbeq	r1, [r1, #7]
   30a54:	00022001 	andeq	r2, r2, r1
   30a58:	05832000 	streq	r2, [r3]
   30a5c:	e12fff1e 	bx	lr
                addrBitMask = addrBitMask << 1;
            }
        }
        else if ((addr & 0xff) == 0x1f)
   30a60:	e6ef1071 	uxtb	r1, r1
   30a64:	e351001f 	cmp	r1, #31
        {
            // Kempston joystick - just say nothing pressed
            retVal = 0;
   30a68:	03a02000 	moveq	r2, #0
   30a6c:	05832000 	streq	r2, [r3]
    }

    #ifdef USE_PI_SPI0_CE0_AS_DEBUG_PIN
        digitalWrite(BR_DEBUG_PI_SPI0_CE0, 0);
    #endif
}
   30a70:	e12fff1e 	bx	lr
   30a74:	0007812c 	.word	0x0007812c

00030a78 <McZXSpectrum::canProcFileType(char const*)>:
{
   30a78:	e92d4010 	push	{r4, lr}
   30a7c:	e1a04001 	mov	r4, r1
    if (strcasecmp(pFileType, "tzx") == 0)
   30a80:	e59f1040 	ldr	r1, [pc, #64]	; 30ac8 <McZXSpectrum::canProcFileType(char const*)+0x50>
   30a84:	e1a00004 	mov	r0, r4
   30a88:	eb00713f 	bl	4cf8c <strcasecmp>
   30a8c:	e3500000 	cmp	r0, #0
   30a90:	0a00000a 	beq	30ac0 <McZXSpectrum::canProcFileType(char const*)+0x48>
    if (strcasecmp(pFileType, "z80") == 0)
   30a94:	e59f1030 	ldr	r1, [pc, #48]	; 30acc <McZXSpectrum::canProcFileType(char const*)+0x54>
   30a98:	e1a00004 	mov	r0, r4
   30a9c:	eb00713a 	bl	4cf8c <strcasecmp>
   30aa0:	e3500000 	cmp	r0, #0
   30aa4:	0a000005 	beq	30ac0 <McZXSpectrum::canProcFileType(char const*)+0x48>
    if (strcasecmp(pFileType, "sna") == 0)
   30aa8:	e1a00004 	mov	r0, r4
   30aac:	e59f101c 	ldr	r1, [pc, #28]	; 30ad0 <McZXSpectrum::canProcFileType(char const*)+0x58>
   30ab0:	eb007135 	bl	4cf8c <strcasecmp>
   30ab4:	e16f0f10 	clz	r0, r0
   30ab8:	e1a002a0 	lsr	r0, r0, #5
   30abc:	e8bd8010 	pop	{r4, pc}
        return true;
   30ac0:	e3a00001 	mov	r0, #1
}
   30ac4:	e8bd8010 	pop	{r4, pc}
   30ac8:	000551a8 	.word	0x000551a8
   30acc:	000551ac 	.word	0x000551ac
   30ad0:	000551b0 	.word	0x000551b0

00030ad4 <McZXSpectrum::busActionCompleteCallback(BR_BUS_ACTION)>:

// Bus action complete callback
void McZXSpectrum::busActionCompleteCallback(BR_BUS_ACTION actionType)
{
    // Check for BUSRQ
    if (actionType == BR_BUS_ACTION_BUSRQ)
   30ad4:	e3510004 	cmp	r1, #4
   30ad8:	112fff1e 	bxne	lr
    {
        // Read memory at the location of the memory mapped screen
        if (BusAccess::blockRead(ZXSPECTRUM_DISP_RAM_ADDR, _screenBuffer, ZXSPECTRUM_DISP_RAM_SIZE, false, false) == BR_OK)
   30adc:	e3a03000 	mov	r3, #0
{
   30ae0:	e92d4010 	push	{r4, lr}
   30ae4:	e24dd008 	sub	sp, sp, #8
   30ae8:	e1a04000 	mov	r4, r0
        if (BusAccess::blockRead(ZXSPECTRUM_DISP_RAM_ADDR, _screenBuffer, ZXSPECTRUM_DISP_RAM_SIZE, false, false) == BR_OK)
   30aec:	e58d3000 	str	r3, [sp]
   30af0:	e2801054 	add	r1, r0, #84	; 0x54
   30af4:	e3a02c1b 	mov	r2, #6912	; 0x1b00
   30af8:	e3a00901 	mov	r0, #16384	; 0x4000
   30afc:	eb002276 	bl	394dc <BusAccess::blockRead(unsigned long, unsigned char*, unsigned long, bool, bool)>
   30b00:	e3500000 	cmp	r0, #0
            _screenBufferValid = true;
   30b04:	03a03001 	moveq	r3, #1
   30b08:	02840a01 	addeq	r0, r4, #4096	; 0x1000
   30b0c:	05c03b54 	strbeq	r3, [r0, #2900]	; 0xb54
    }
}
   30b10:	e28dd008 	add	sp, sp, #8
   30b14:	e8bd8010 	pop	{r4, pc}

00030b18 <McZXSpectrum::fileHandler(char const*, unsigned char const*, int)>:
{
   30b18:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   30b1c:	e24ddf67 	sub	sp, sp, #412	; 0x19c
   30b20:	e1a05002 	mov	r5, r2
   30b24:	e1a0b003 	mov	fp, r3
    if (!jsonGetValueForKey("fileName", pFileInfo, fileName, MAX_FILE_NAME_STR))
   30b28:	e28d202c 	add	r2, sp, #44	; 0x2c
   30b2c:	e3a03064 	mov	r3, #100	; 0x64
   30b30:	e59f0a64 	ldr	r0, [pc, #2660]	; 3159c <McZXSpectrum::fileHandler(char const*, unsigned char const*, int)+0xa84>
{
   30b34:	e1a06001 	mov	r6, r1
    if (!jsonGetValueForKey("fileName", pFileInfo, fileName, MAX_FILE_NAME_STR))
   30b38:	ebffcfab 	bl	249ec <jsonGetValueForKey>
   30b3c:	e2503000 	subs	r3, r0, #0
   30b40:	e58d3018 	str	r3, [sp, #24]
   30b44:	0a000026 	beq	30be4 <McZXSpectrum::fileHandler(char const*, unsigned char const*, int)+0xcc>
    const char* pFileType = strstr(fileName, ".");
   30b48:	e3a0102e 	mov	r1, #46	; 0x2e
   30b4c:	e28d002c 	add	r0, sp, #44	; 0x2c
   30b50:	eb007146 	bl	4d070 <strchr>
        pFileType = pEmpty;
   30b54:	e3500000 	cmp	r0, #0
   30b58:	e59f4a40 	ldr	r4, [pc, #2624]	; 315a0 <McZXSpectrum::fileHandler(char const*, unsigned char const*, int)+0xa88>
   30b5c:	11a04000 	movne	r4, r0
    if (strcasecmp(pFileType, ".tzx") == 0)
   30b60:	e59f1a3c 	ldr	r1, [pc, #2620]	; 315a4 <McZXSpectrum::fileHandler(char const*, unsigned char const*, int)+0xa8c>
   30b64:	e1a00004 	mov	r0, r4
   30b68:	eb007107 	bl	4cf8c <strcasecmp>
   30b6c:	e3500000 	cmp	r0, #0
   30b70:	0a00001e 	beq	30bf0 <McZXSpectrum::fileHandler(char const*, unsigned char const*, int)+0xd8>
    else if (strcasecmp(pFileType, ".z80") == 0)
   30b74:	e59f1a2c 	ldr	r1, [pc, #2604]	; 315a8 <McZXSpectrum::fileHandler(char const*, unsigned char const*, int)+0xa90>
   30b78:	e1a00004 	mov	r0, r4
   30b7c:	eb007102 	bl	4cf8c <strcasecmp>
   30b80:	e3500000 	cmp	r0, #0
   30b84:	0a000124 	beq	3101c <McZXSpectrum::fileHandler(char const*, unsigned char const*, int)+0x504>
    else if (strcasecmp(pFileType, ".sna") == 0)
   30b88:	e1a00004 	mov	r0, r4
   30b8c:	e59f1a18 	ldr	r1, [pc, #2584]	; 315ac <McZXSpectrum::fileHandler(char const*, unsigned char const*, int)+0xa94>
   30b90:	eb0070fd 	bl	4cf8c <strcasecmp>
   30b94:	e2504000 	subs	r4, r0, #0
   30b98:	0a00004a 	beq	30cc8 <McZXSpectrum::fileHandler(char const*, unsigned char const*, int)+0x1b0>
        if (jsonGetValueForKey("baseAddr", pFileInfo, baseAddrStr, MAX_VALUE_STR))
   30b9c:	e3a0301e 	mov	r3, #30
   30ba0:	e1a01006 	mov	r1, r6
   30ba4:	e28d2094 	add	r2, sp, #148	; 0x94
   30ba8:	e59f0a00 	ldr	r0, [pc, #2560]	; 315b0 <McZXSpectrum::fileHandler(char const*, unsigned char const*, int)+0xa98>
   30bac:	ebffcf8e 	bl	249ec <jsonGetValueForKey>
   30bb0:	e2504000 	subs	r4, r0, #0
   30bb4:	01a03004 	moveq	r3, r4
   30bb8:	1a000239 	bne	314a4 <McZXSpectrum::fileHandler(char const*, unsigned char const*, int)+0x98c>
        LogWrite(_logPrefix, LOG_DEBUG, "Processing binary file, baseAddr %04x len %d", baseAddr, fileLen);
   30bbc:	e59f29f0 	ldr	r2, [pc, #2544]	; 315b4 <McZXSpectrum::fileHandler(char const*, unsigned char const*, int)+0xa9c>
   30bc0:	e58db000 	str	fp, [sp]
   30bc4:	e5920000 	ldr	r0, [r2]
   30bc8:	e3a01004 	mov	r1, #4
   30bcc:	e59f29e4 	ldr	r2, [pc, #2532]	; 315b8 <McZXSpectrum::fileHandler(char const*, unsigned char const*, int)+0xaa0>
   30bd0:	ebffcd68 	bl	24178 <LogWrite>
        TargetState::addMemoryBlock(baseAddr, pFileData, fileLen);
   30bd4:	e1a0200b 	mov	r2, fp
   30bd8:	e1a01005 	mov	r1, r5
   30bdc:	e1a00004 	mov	r0, r4
   30be0:	eb002719 	bl	3a84c <TargetState::addMemoryBlock(unsigned long, unsigned char const*, unsigned long)>
}
   30be4:	e59d0018 	ldr	r0, [sp, #24]
   30be8:	e28ddf67 	add	sp, sp, #412	; 0x19c
   30bec:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
        LogWrite(_logPrefix, LOG_DEBUG, "Processing TZX file len %d", fileLen);
   30bf0:	e59f29bc 	ldr	r2, [pc, #2492]	; 315b4 <McZXSpectrum::fileHandler(char const*, unsigned char const*, int)+0xa9c>
   30bf4:	e1a0300b 	mov	r3, fp
   30bf8:	e5920000 	ldr	r0, [r2]
   30bfc:	e3a01004 	mov	r1, #4
   30c00:	e59f29b4 	ldr	r2, [pc, #2484]	; 315bc <McZXSpectrum::fileHandler(char const*, unsigned char const*, int)+0xaa4>
   30c04:	ebffcd5b 	bl	24178 <LogWrite>
  	bool proc(FileParserDataCallback* pDataCallback, 
  				[[maybe_unused]] FileParserRegsCallback* pRegsCallback, 
  				const uint8_t* pData, int dataLen)
	{
		// Check format is valid
		if (strncmp((const char*)pData, "ZXTape!", 7) != 0)
   30c08:	e3a02007 	mov	r2, #7
   30c0c:	e59f19ac 	ldr	r1, [pc, #2476]	; 315c0 <McZXSpectrum::fileHandler(char const*, unsigned char const*, int)+0xaa8>
   30c10:	e1a00005 	mov	r0, r5
   30c14:	eb0072bd 	bl	4d710 <strncmp>
   30c18:	e3500000 	cmp	r0, #0
   30c1c:	1a000227 	bne	314c0 <McZXSpectrum::fileHandler(char const*, unsigned char const*, int)+0x9a8>
			LogWrite(_logPrefix, LOG_DEBUG, "Invalid format\n");
			return false;
		}

		// Handle the file record by record
		int recPos = 0x0a;
   30c20:	e3a0400a 	mov	r4, #10
		_curStartAddr = 0x5ccb;
   30c24:	e59f3998 	ldr	r3, [pc, #2456]	; 315c4 <McZXSpectrum::fileHandler(char const*, unsigned char const*, int)+0xaac>
				case 0x10:
				{
					int nDelay = getWord16(pData, dataLen, recPos);
					recLen = getWord16(pData, dataLen, recPos+2);
					//LogWrite(_logPrefix, LOG_DEBUG, "Std speed data, delay %dms len %d\n", nDelay, recLen);
					LogWrite(_logPrefix, LOG_DEBUG, "Std speed data, delay %dms len %d => ", nDelay, recLen);
   30c28:	e59f7998 	ldr	r7, [pc, #2456]	; 315c8 <McZXSpectrum::fileHandler(char const*, unsigned char const*, int)+0xab0>
		_curStartAddr = 0x5ccb;
   30c2c:	e58d301c 	str	r3, [sp, #28]
		while(recPos < dataLen)
   30c30:	e15b0004 	cmp	fp, r4
   30c34:	daffffea 	ble	30be4 <McZXSpectrum::fileHandler(char const*, unsigned char const*, int)+0xcc>
   30c38:	e2443001 	sub	r3, r4, #1
   30c3c:	e0853003 	add	r3, r5, r3
			switch(recType)
   30c40:	e5f32001 	ldrb	r2, [r3, #1]!
			int recType = pData[recPos++];
   30c44:	e2846001 	add	r6, r4, #1
			switch(recType)
   30c48:	e3520010 	cmp	r2, #16
   30c4c:	0a000087 	beq	30e70 <McZXSpectrum::fileHandler(char const*, unsigned char const*, int)+0x358>
   30c50:	e3520030 	cmp	r2, #48	; 0x30
   30c54:	1a00007e 	bne	30e54 <McZXSpectrum::fileHandler(char const*, unsigned char const*, int)+0x33c>
  		if (dataLen < recPos + 1)
   30c58:	e15b0006 	cmp	fp, r6
   30c5c:	d3a09000 	movle	r9, #0
   30c60:	c7d59006 	ldrbgt	r9, [r5, r6]
				}
				case 0x30:
				{
					recLen = getByte(pData, dataLen, recPos);
					char descrString[MAX_DESCR_LEN+1];
					getString(pData, dataLen, recPos+1, recLen, descrString);
   30c64:	e2841002 	add	r1, r4, #2
		int maxLen = strLen < (dataLen - recPos) ? strLen : (dataLen - recPos);
   30c68:	e04b8001 	sub	r8, fp, r1
   30c6c:	c289a001 	addgt	sl, r9, #1
  		if (dataLen < recPos + 1)
   30c70:	d3a0a001 	movle	sl, #1
		int maxLen = strLen < (dataLen - recPos) ? strLen : (dataLen - recPos);
   30c74:	e1580009 	cmp	r8, r9
   30c78:	a1a08009 	movge	r8, r9
  		strlcpy(pDest, (const char*) (pData+recPos), maxLen+1);
   30c7c:	e28d4094 	add	r4, sp, #148	; 0x94
   30c80:	e2882001 	add	r2, r8, #1
   30c84:	e0851001 	add	r1, r5, r1
   30c88:	e1a00004 	mov	r0, r4
   30c8c:	eb00724d 	bl	4d5c8 <strlcpy>
		pDest[maxLen] = 0;
   30c90:	e3a0c000 	mov	ip, #0
   30c94:	e28d3f66 	add	r3, sp, #408	; 0x198
   30c98:	e0838008 	add	r8, r3, r8
					LogWrite(_logPrefix, LOG_DEBUG, "Text description, len %d = %s\n", recLen, descrString);
   30c9c:	e5970000 	ldr	r0, [r7]
   30ca0:	e1a03009 	mov	r3, r9
   30ca4:	e58d4000 	str	r4, [sp]
   30ca8:	e59f291c 	ldr	r2, [pc, #2332]	; 315cc <McZXSpectrum::fileHandler(char const*, unsigned char const*, int)+0xab4>
   30cac:	e3a01004 	mov	r1, #4
					recPos += recLen + 1;
   30cb0:	e086400a 	add	r4, r6, sl
		pDest[maxLen] = 0;
   30cb4:	e548c104 	strb	ip, [r8, #-260]	; 0xfffffefc
					LogWrite(_logPrefix, LOG_DEBUG, "Text description, len %d = %s\n", recLen, descrString);
   30cb8:	ebffcd2e 	bl	24178 <LogWrite>
		while(recPos < dataLen)
   30cbc:	e15b0004 	cmp	fp, r4
   30cc0:	caffffdc 	bgt	30c38 <McZXSpectrum::fileHandler(char const*, unsigned char const*, int)+0x120>
   30cc4:	eaffffc6 	b	30be4 <McZXSpectrum::fileHandler(char const*, unsigned char const*, int)+0xcc>
        LogWrite(_logPrefix, LOG_DEBUG, "Processing SNA file len %d", fileLen);
   30cc8:	e59f28e4 	ldr	r2, [pc, #2276]	; 315b4 <McZXSpectrum::fileHandler(char const*, unsigned char const*, int)+0xa9c>
   30ccc:	e1a0300b 	mov	r3, fp
   30cd0:	e5920000 	ldr	r0, [r2]
   30cd4:	e3a01004 	mov	r1, #4
   30cd8:	e59f28f0 	ldr	r2, [pc, #2288]	; 315d0 <McZXSpectrum::fileHandler(char const*, unsigned char const*, int)+0xab8>
   30cdc:	ebffcd25 	bl	24178 <LogWrite>
  				[[maybe_unused]] FileParserRegsCallback* pRegsCallback, 
  				[[maybe_unused]] const uint8_t* pData, [[maybe_unused]] int dataLen)
	{
		static const int SPECTRUM_SNA_FORMAT_BASE = 0x4000;

		if (dataLen < (int) sizeof(sna_t))
   30ce0:	e59f38ec 	ldr	r3, [pc, #2284]	; 315d4 <McZXSpectrum::fileHandler(char const*, unsigned char const*, int)+0xabc>
   30ce4:	e15b0003 	cmp	fp, r3
   30ce8:	da000225 	ble	31584 <McZXSpectrum::fileHandler(char const*, unsigned char const*, int)+0xa6c>
		}
		sna_t *sna = (sna_t *) pData;
		// Registers
		Z80Registers regs;
		regs.AF = sna->af;
		regs.AFDASH = sna->af2;
   30cec:	e5d52008 	ldrb	r2, [r5, #8]
   30cf0:	e5d53007 	ldrb	r3, [r5, #7]
		regs.AF = sna->af;
   30cf4:	e5d51016 	ldrb	r1, [r5, #22]
   30cf8:	e5d5e015 	ldrb	lr, [r5, #21]
		regs.BC = sna->bc;
   30cfc:	e5d5c00d 	ldrb	ip, [r5, #13]
		regs.AFDASH = sna->af2;
   30d00:	e1833402 	orr	r3, r3, r2, lsl #8
		regs.BC = sna->bc;
   30d04:	e5d5200e 	ldrb	r2, [r5, #14]
		regs.AF = sna->af;
   30d08:	e18ee401 	orr	lr, lr, r1, lsl #8
		regs.BC = sna->bc;
   30d0c:	e18cc402 	orr	ip, ip, r2, lsl #8
		regs.BCDASH = sna->bc2;
   30d10:	e5d51005 	ldrb	r1, [r5, #5]
   30d14:	e5d52006 	ldrb	r2, [r5, #6]
        HLDASH = DEDASH = BCDASH = AFDASH = MEMPTR = 0;
   30d18:	e58d40c4 	str	r4, [sp, #196]	; 0xc4
   30d1c:	e1811402 	orr	r1, r1, r2, lsl #8
		regs.DE = sna->de;
   30d20:	e5d5200b 	ldrb	r2, [r5, #11]
        I = R = INTMODE = INTENABLED = VPS = 0;
   30d24:	e58d40d8 	str	r4, [sp, #216]	; 0xd8
		regs.AF = sna->af;
   30d28:	e58de0a8 	str	lr, [sp, #168]	; 0xa8
		regs.DE = sna->de;
   30d2c:	e5d5e00c 	ldrb	lr, [r5, #12]
		regs.AFDASH = sna->af2;
   30d30:	e58d30c0 	str	r3, [sp, #192]	; 0xc0
		regs.DEDASH = sna->de2;
   30d34:	e5d53003 	ldrb	r3, [r5, #3]
		regs.DE = sna->de;
   30d38:	e182240e 	orr	r2, r2, lr, lsl #8
		regs.DEDASH = sna->de2;
   30d3c:	e5d5e004 	ldrb	lr, [r5, #4]
		regs.BC = sna->bc;
   30d40:	e58dc0a4 	str	ip, [sp, #164]	; 0xa4
		regs.HL = sna->hl;
   30d44:	e5d5c009 	ldrb	ip, [r5, #9]
		regs.DEDASH = sna->de2;
   30d48:	e183340e 	orr	r3, r3, lr, lsl #8
		regs.HL = sna->hl;
   30d4c:	e5d5e00a 	ldrb	lr, [r5, #10]
		regs.BCDASH = sna->bc2;
   30d50:	e58d10bc 	str	r1, [sp, #188]	; 0xbc
		regs.HL = sna->hl;
   30d54:	e18cc40e 	orr	ip, ip, lr, lsl #8
		regs.HLDASH = sna->hl2;
   30d58:	e5d51001 	ldrb	r1, [r5, #1]
   30d5c:	e5d5e002 	ldrb	lr, [r5, #2]
		regs.DE = sna->de;
   30d60:	e58d20a0 	str	r2, [sp, #160]	; 0xa0
		regs.IX = sna->ix;
   30d64:	e5d52011 	ldrb	r2, [r5, #17]
		regs.HLDASH = sna->hl2;
   30d68:	e181140e 	orr	r1, r1, lr, lsl #8
		regs.IX = sna->ix;
   30d6c:	e5d5e012 	ldrb	lr, [r5, #18]
		regs.DEDASH = sna->de2;
   30d70:	e58d30b8 	str	r3, [sp, #184]	; 0xb8
		regs.IY = sna->iy;
   30d74:	e5d5300f 	ldrb	r3, [r5, #15]
		regs.IX = sna->ix;
   30d78:	e182240e 	orr	r2, r2, lr, lsl #8
		regs.IY = sna->iy;
   30d7c:	e5d5e010 	ldrb	lr, [r5, #16]
		regs.HL = sna->hl;
   30d80:	e58dc09c 	str	ip, [sp, #156]	; 0x9c
		regs.IY = sna->iy;
   30d84:	e183340e 	orr	r3, r3, lr, lsl #8
   30d88:	e1cd2afc 	strd	r2, [sp, #172]	; 0xac
		regs.HLDASH = sna->hl2;
   30d8c:	e58d10b4 	str	r1, [sp, #180]	; 0xb4
		regs.SP = sna->sp;
   30d90:	e5d52017 	ldrb	r2, [r5, #23]
   30d94:	e5d53018 	ldrb	r3, [r5, #24]
		uint16_t pcVal = sna->ramDump[stackOffset] + sna->ramDump[stackOffset+1]*256;
		sna->ramDump[stackOffset] = 0;
		sna->ramDump[stackOffset+1] = 0;
		regs.SP++;
		regs.SP++;
		regs.PC = pcVal;
   30d98:	e28d0f66 	add	r0, sp, #408	; 0x198
		regs.SP = sna->sp;
   30d9c:	e1822403 	orr	r2, r2, r3, lsl #8
		uint32_t stackOffset = sna->sp - SPECTRUM_SNA_FORMAT_BASE;
   30da0:	e2421901 	sub	r1, r2, #16384	; 0x4000
		uint16_t pcVal = sna->ramDump[stackOffset] + sna->ramDump[stackOffset+1]*256;
   30da4:	e281c001 	add	ip, r1, #1
   30da8:	e085c00c 	add	ip, r5, ip
   30dac:	e0851001 	add	r1, r5, r1
   30db0:	e5dce01b 	ldrb	lr, [ip, #27]
   30db4:	e5d1301b 	ldrb	r3, [r1, #27]
		regs.SP++;
   30db8:	e2822002 	add	r2, r2, #2
		uint16_t pcVal = sna->ramDump[stackOffset] + sna->ramDump[stackOffset+1]*256;
   30dbc:	e083340e 	add	r3, r3, lr, lsl #8
   30dc0:	e6ff3073 	uxth	r3, r3
		regs.PC = pcVal;
   30dc4:	e5203104 	str	r3, [r0, #-260]!	; 0xfffffefc
		regs.INTENABLED = (sna->iff2 & 0x04) != 0;
   30dc8:	e5d53013 	ldrb	r3, [r5, #19]
		regs.INTMODE = sna->intMode & 0x03;
   30dcc:	e5d5e019 	ldrb	lr, [r5, #25]
		regs.INTENABLED = (sna->iff2 & 0x04) != 0;
   30dd0:	e1a03123 	lsr	r3, r3, #2
   30dd4:	e2033001 	and	r3, r3, #1
		regs.SP++;
   30dd8:	e58d2098 	str	r2, [sp, #152]	; 0x98
		regs.INTENABLED = (sna->iff2 & 0x04) != 0;
   30ddc:	e58d30d4 	str	r3, [sp, #212]	; 0xd4
		regs.I = sna->i;
   30de0:	e5d52000 	ldrb	r2, [r5]
		regs.R = sna->r;
   30de4:	e5d53014 	ldrb	r3, [r5, #20]
		regs.INTMODE = sna->intMode & 0x03;
   30de8:	e20ee003 	and	lr, lr, #3
		sna->ramDump[stackOffset] = 0;
   30dec:	e5c1401b 	strb	r4, [r1, #27]
		sna->ramDump[stackOffset+1] = 0;
   30df0:	e5cc401b 	strb	r4, [ip, #27]
		regs.R = sna->r;
   30df4:	e1cd2cf8 	strd	r2, [sp, #200]	; 0xc8
		regs.INTMODE = sna->intMode & 0x03;
   30df8:	e58de0d0 	str	lr, [sp, #208]	; 0xd0
		pRegsCallback(regs);
   30dfc:	eb0026db 	bl	3a970 <TargetState::setTargetRegisters(Z80Registers const&)>

		pDataCallback(SPECTRUM_SNA_FORMAT_BASE, sna->ramDump, 49152); 
   30e00:	e285101b 	add	r1, r5, #27
   30e04:	e3a02903 	mov	r2, #49152	; 0xc000
   30e08:	e3a00901 	mov	r0, #16384	; 0x4000
   30e0c:	eb00268e 	bl	3a84c <TargetState::addMemoryBlock(unsigned long, unsigned char const*, unsigned long)>
		LogWrite(_logPrefix, LOG_DEBUG, "format ok, PC %04x SP (after retn) %04x AF %04x HL %04x DE %04x BC %04x\n", 
   30e10:	e59f27c0 	ldr	r2, [pc, #1984]	; 315d8 <McZXSpectrum::fileHandler(char const*, unsigned char const*, int)+0xac0>
   30e14:	e59d10a8 	ldr	r1, [sp, #168]	; 0xa8
   30e18:	e5920000 	ldr	r0, [r2]
   30e1c:	e59d40a4 	ldr	r4, [sp, #164]	; 0xa4
   30e20:	e59d2098 	ldr	r2, [sp, #152]	; 0x98
   30e24:	e59de0a0 	ldr	lr, [sp, #160]	; 0xa0
   30e28:	e59dc09c 	ldr	ip, [sp, #156]	; 0x9c
   30e2c:	e58d2000 	str	r2, [sp]
   30e30:	e98d5002 	stmib	sp, {r1, ip, lr}
   30e34:	e59d3094 	ldr	r3, [sp, #148]	; 0x94
   30e38:	e58d4010 	str	r4, [sp, #16]
   30e3c:	e59f2798 	ldr	r2, [pc, #1944]	; 315dc <McZXSpectrum::fileHandler(char const*, unsigned char const*, int)+0xac4>
   30e40:	e3a01004 	mov	r1, #4
   30e44:	ebffcccb 	bl	24178 <LogWrite>
}
   30e48:	e59d0018 	ldr	r0, [sp, #24]
   30e4c:	e28ddf67 	add	sp, sp, #412	; 0x19c
   30e50:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   30e54:	e15b0006 	cmp	fp, r6
   30e58:	e1a04006 	mov	r4, r6
   30e5c:	0affff60 	beq	30be4 <McZXSpectrum::fileHandler(char const*, unsigned char const*, int)+0xcc>
			switch(recType)
   30e60:	e5f32001 	ldrb	r2, [r3, #1]!
			int recType = pData[recPos++];
   30e64:	e2846001 	add	r6, r4, #1
			switch(recType)
   30e68:	e3520010 	cmp	r2, #16
   30e6c:	1affff77 	bne	30c50 <McZXSpectrum::fileHandler(char const*, unsigned char const*, int)+0x138>
  		if (dataLen < recPos + 2)
   30e70:	e2843002 	add	r3, r4, #2
   30e74:	e15b0003 	cmp	fp, r3
  		return ((uint32_t)(pData[recPos])) + ((uint32_t)(pData[recPos+1]) << 8);
   30e78:	c0853006 	addgt	r3, r5, r6
   30e7c:	c5d32001 	ldrbgt	r2, [r3, #1]
   30e80:	c7d53006 	ldrbgt	r3, [r5, r6]
  		if (dataLen < recPos + 2)
   30e84:	d3a03000 	movle	r3, #0
  		return ((uint32_t)(pData[recPos])) + ((uint32_t)(pData[recPos+1]) << 8);
   30e88:	c0833402 	addgt	r3, r3, r2, lsl #8
  		if (dataLen < recPos + 2)
   30e8c:	e2842004 	add	r2, r4, #4
   30e90:	e15b0002 	cmp	fp, r2
					recLen = getWord16(pData, dataLen, recPos+2);
   30e94:	c2842003 	addgt	r2, r4, #3
  		return ((uint32_t)(pData[recPos])) + ((uint32_t)(pData[recPos+1]) << 8);
   30e98:	c0851002 	addgt	r1, r5, r2
   30e9c:	c7d58002 	ldrbgt	r8, [r5, r2]
   30ea0:	c5d11001 	ldrbgt	r1, [r1, #1]
  		if (dataLen < recPos + 2)
   30ea4:	d3a09000 	movle	r9, #0
  		return ((uint32_t)(pData[recPos])) + ((uint32_t)(pData[recPos+1]) << 8);
   30ea8:	c0888401 	addgt	r8, r8, r1, lsl #8
   30eac:	c1a09008 	movgt	r9, r8
					LogWrite(_logPrefix, LOG_DEBUG, "Std speed data, delay %dms len %d => ", nDelay, recLen);
   30eb0:	e5970000 	ldr	r0, [r7]
   30eb4:	e59f2724 	ldr	r2, [pc, #1828]	; 315e0 <McZXSpectrum::fileHandler(char const*, unsigned char const*, int)+0xac8>
   30eb8:	e58d9000 	str	r9, [sp]
   30ebc:	e3a01004 	mov	r1, #4
   30ec0:	c288a004 	addgt	sl, r8, #4
  		if (dataLen < recPos + 2)
   30ec4:	d3a0a004 	movle	sl, #4
  			return 0;
   30ec8:	d1a08009 	movle	r8, r9
					LogWrite(_logPrefix, LOG_DEBUG, "Std speed data, delay %dms len %d => ", nDelay, recLen);
   30ecc:	ebffcca9 	bl	24178 <LogWrite>
					decodeTapBlock(pDataCallback, pRegsCallback, pData, recPos + 4, dataLen, recLen);
   30ed0:	e2843005 	add	r3, r4, #5
		int flagByte = pData[curOffset];
   30ed4:	e7d53003 	ldrb	r3, [r5, r3]
		if (flagByte == 0x00)
   30ed8:	e3530000 	cmp	r3, #0
   30edc:	1a000038 	bne	30fc4 <McZXSpectrum::fileHandler(char const*, unsigned char const*, int)+0x4ac>
			_curHeaderType = getByte(pData, totalLen, curOffset+1);
   30ee0:	e2842006 	add	r2, r4, #6
  		if (dataLen < recPos + 1)
   30ee4:	e15b0002 	cmp	fp, r2
   30ee8:	ca00003c 	bgt	30fe0 <McZXSpectrum::fileHandler(char const*, unsigned char const*, int)+0x4c8>
				getString(pData, totalLen, curOffset + 2, 10, fileName);
   30eec:	e2841007 	add	r1, r4, #7
		int maxLen = strLen < (dataLen - recPos) ? strLen : (dataLen - recPos);
   30ef0:	e04b8001 	sub	r8, fp, r1
   30ef4:	e358000a 	cmp	r8, #10
   30ef8:	a3a0800a 	movge	r8, #10
  		strlcpy(pDest, (const char*) (pData+recPos), maxLen+1);
   30efc:	e28d9094 	add	r9, sp, #148	; 0x94
   30f00:	e2882001 	add	r2, r8, #1
   30f04:	e0851001 	add	r1, r5, r1
   30f08:	e1a00009 	mov	r0, r9
   30f0c:	e58d3020 	str	r3, [sp, #32]
   30f10:	eb0071ac 	bl	4d5c8 <strlcpy>
		pDest[maxLen] = 0;
   30f14:	e3a01000 	mov	r1, #0
  		if (dataLen < recPos + 2)
   30f18:	e2842012 	add	r2, r4, #18
   30f1c:	e15b0002 	cmp	fp, r2
		pDest[maxLen] = 0;
   30f20:	e28d3f66 	add	r3, sp, #408	; 0x198
				_curDataLen = getWord16(pData, totalLen, curOffset + 12);
   30f24:	c2842011 	addgt	r2, r4, #17
		pDest[maxLen] = 0;
   30f28:	e0838008 	add	r8, r3, r8
   30f2c:	e5481104 	strb	r1, [r8, #-260]	; 0xfffffefc
  		return ((uint32_t)(pData[recPos])) + ((uint32_t)(pData[recPos+1]) << 8);
   30f30:	c0851002 	addgt	r1, r5, r2
   30f34:	c5d10001 	ldrbgt	r0, [r1, #1]
   30f38:	c7d51002 	ldrbgt	r1, [r5, r2]
  		if (dataLen < recPos + 2)
   30f3c:	e2842014 	add	r2, r4, #20
  		return ((uint32_t)(pData[recPos])) + ((uint32_t)(pData[recPos+1]) << 8);
   30f40:	c0811400 	addgt	r1, r1, r0, lsl #8
  		if (dataLen < recPos + 2)
   30f44:	e15b0002 	cmp	fp, r2
				_curAutostartLine = getWord16(pData, totalLen, curOffset + 14);
   30f48:	c2842013 	addgt	r2, r4, #19
  		return ((uint32_t)(pData[recPos])) + ((uint32_t)(pData[recPos+1]) << 8);
   30f4c:	c0850002 	addgt	r0, r5, r2
   30f50:	c5d00001 	ldrbgt	r0, [r0, #1]
   30f54:	c7d5c002 	ldrbgt	ip, [r5, r2]
  		if (dataLen < recPos + 2)
   30f58:	e2842016 	add	r2, r4, #22
  		return ((uint32_t)(pData[recPos])) + ((uint32_t)(pData[recPos+1]) << 8);
   30f5c:	c08cc400 	addgt	ip, ip, r0, lsl #8
  		if (dataLen < recPos + 2)
   30f60:	d3a0c000 	movle	ip, #0
   30f64:	e15b0002 	cmp	fp, r2
   30f68:	d3a02000 	movle	r2, #0
				_curProgramLen = getWord16(pData, totalLen, curOffset + 16);
   30f6c:	c2842015 	addgt	r2, r4, #21
  		return ((uint32_t)(pData[recPos])) + ((uint32_t)(pData[recPos+1]) << 8);
   30f70:	c0850002 	addgt	r0, r5, r2
   30f74:	c5d00001 	ldrbgt	r0, [r0, #1]
   30f78:	c7d52002 	ldrbgt	r2, [r5, r2]
				int checksum = getByte(pData, totalLen, curOffset + 18);
   30f7c:	e2844017 	add	r4, r4, #23
  		return ((uint32_t)(pData[recPos])) + ((uint32_t)(pData[recPos+1]) << 8);
   30f80:	c0822400 	addgt	r2, r2, r0, lsl #8
  		if (dataLen < recPos + 1)
   30f84:	e15b0004 	cmp	fp, r4
  		if (dataLen < recPos + 2)
   30f88:	e59d3020 	ldr	r3, [sp, #32]
   30f8c:	c7d53004 	ldrbgt	r3, [r5, r4]
				LogWrite(_logPrefix, LOG_DEBUG, "ProgramHeader %s dataLen %d autostartLine %d programLen %d checksum %02x",
   30f90:	e5970000 	ldr	r0, [r7]
   30f94:	e1cd20f8 	strd	r2, [sp, #8]
   30f98:	e88d1002 	stm	sp, {r1, ip}
   30f9c:	e1a03009 	mov	r3, r9
   30fa0:	e59f263c 	ldr	r2, [pc, #1596]	; 315e4 <McZXSpectrum::fileHandler(char const*, unsigned char const*, int)+0xacc>
   30fa4:	e3a01004 	mov	r1, #4
   30fa8:	ebffcc72 	bl	24178 <LogWrite>
		LogWrite(_logPrefix, LOG_DEBUG, "\n");
   30fac:	e59f2634 	ldr	r2, [pc, #1588]	; 315e8 <McZXSpectrum::fileHandler(char const*, unsigned char const*, int)+0xad0>
   30fb0:	e3a01004 	mov	r1, #4
   30fb4:	e5970000 	ldr	r0, [r7]
					recPos += recLen + 4;
   30fb8:	e086400a 	add	r4, r6, sl
		LogWrite(_logPrefix, LOG_DEBUG, "\n");
   30fbc:	ebffcc6d 	bl	24178 <LogWrite>
   30fc0:	eaffff1a 	b	30c30 <McZXSpectrum::fileHandler(char const*, unsigned char const*, int)+0x118>
		else if (flagByte == 0xff)
   30fc4:	e35300ff 	cmp	r3, #255	; 0xff
   30fc8:	e5970000 	ldr	r0, [r7]
   30fcc:	0a00006c 	beq	31184 <McZXSpectrum::fileHandler(char const*, unsigned char const*, int)+0x66c>
			LogWrite(_logPrefix, LOG_DEBUG, "UnknownFlagType %02x", flagByte);
   30fd0:	e59f2614 	ldr	r2, [pc, #1556]	; 315ec <McZXSpectrum::fileHandler(char const*, unsigned char const*, int)+0xad4>
   30fd4:	e3a01004 	mov	r1, #4
   30fd8:	ebffcc66 	bl	24178 <LogWrite>
   30fdc:	eafffff2 	b	30fac <McZXSpectrum::fileHandler(char const*, unsigned char const*, int)+0x494>
  		return pData[recPos];
   30fe0:	e7d52002 	ldrb	r2, [r5, r2]
			if (_curHeaderType == 0x00)
   30fe4:	e3520000 	cmp	r2, #0
   30fe8:	0affffbf 	beq	30eec <McZXSpectrum::fileHandler(char const*, unsigned char const*, int)+0x3d4>
			else if (_curHeaderType == 0x01)
   30fec:	e3520001 	cmp	r2, #1
   30ff0:	0a000106 	beq	31410 <McZXSpectrum::fileHandler(char const*, unsigned char const*, int)+0x8f8>
			else if (_curHeaderType == 0x02)
   30ff4:	e3520002 	cmp	r2, #2
   30ff8:	0a000136 	beq	314d8 <McZXSpectrum::fileHandler(char const*, unsigned char const*, int)+0x9c0>
			else if (_curHeaderType == 0x03)
   30ffc:	e3520003 	cmp	r2, #3
   31000:	0a0000b8 	beq	312e8 <McZXSpectrum::fileHandler(char const*, unsigned char const*, int)+0x7d0>
				LogWrite(_logPrefix, LOG_DEBUG, "UnknownHeader %02x", _curHeaderType);
   31004:	e1a03002 	mov	r3, r2
   31008:	e3a01004 	mov	r1, #4
   3100c:	e59f25dc 	ldr	r2, [pc, #1500]	; 315f0 <McZXSpectrum::fileHandler(char const*, unsigned char const*, int)+0xad8>
   31010:	e5970000 	ldr	r0, [r7]
   31014:	ebffcc57 	bl	24178 <LogWrite>
   31018:	eaffffe3 	b	30fac <McZXSpectrum::fileHandler(char const*, unsigned char const*, int)+0x494>
        LogWrite(_logPrefix, LOG_DEBUG, "Processing Z80 file len %d", fileLen);
   3101c:	e59f2590 	ldr	r2, [pc, #1424]	; 315b4 <McZXSpectrum::fileHandler(char const*, unsigned char const*, int)+0xa9c>
   31020:	e1a0300b 	mov	r3, fp
   31024:	e5920000 	ldr	r0, [r2]
   31028:	e3a01004 	mov	r1, #4
   3102c:	e59f25c0 	ldr	r2, [pc, #1472]	; 315f4 <McZXSpectrum::fileHandler(char const*, unsigned char const*, int)+0xadc>
   31030:	ebffcc50 	bl	24178 <LogWrite>
  	bool proc([[maybe_unused]] FileParserDataCallback* pDataCallback, 
  				[[maybe_unused]] FileParserRegsCallback* pRegsCallback, 
  				[[maybe_unused]] const uint8_t* pData, [[maybe_unused]] int dataLen)
	{
		// Has to be at least as long as the header plus some
		if (dataLen < 50)
   31034:	e35b0031 	cmp	fp, #49	; 0x31
   31038:	da00014b 	ble	3156c <McZXSpectrum::fileHandler(char const*, unsigned char const*, int)+0xa54>
			return false;
		}

		// Cast data for format template
		version1Header_t *sna = (version1Header_t *) pData;
		if (sna->borderEtc == 0xff)
   3103c:	e5d5400c 	ldrb	r4, [r5, #12]
			sna->borderEtc = 1;
		
		// Detect version
		int versionNum = 1;
		if (sna->pc == 0)
   31040:	e5d52007 	ldrb	r2, [r5, #7]
		if (sna->borderEtc == 0xff)
   31044:	e35400ff 	cmp	r4, #255	; 0xff
			sna->borderEtc = 1;
   31048:	03a03001 	moveq	r3, #1
   3104c:	01a04003 	moveq	r4, r3
   31050:	05c5300c 	strbeq	r3, [r5, #12]
		if (sna->pc == 0)
   31054:	e5d53006 	ldrb	r3, [r5, #6]
   31058:	e1933402 	orrs	r3, r3, r2, lsl #8
   3105c:	1a0000cc 	bne	31394 <McZXSpectrum::fileHandler(char const*, unsigned char const*, int)+0x87c>
		// Calculate start of ram dump in extraData field
		int ramDumpOffset = 0;
		int extraHeaderLen = 0;
		if (versionNum > 1)
		{
			extraHeaderLen = (sna->extraData[0] + ((int)sna->extraData[1]) * 256);
   31060:	e5d5301f 	ldrb	r3, [r5, #31]
   31064:	e5d5901e 	ldrb	r9, [r5, #30]
   31068:	e59f6588 	ldr	r6, [pc, #1416]	; 315f8 <McZXSpectrum::fileHandler(char const*, unsigned char const*, int)+0xae0>
   3106c:	e0899403 	add	r9, r9, r3, lsl #8
			if (extraHeaderLen > 23)
   31070:	e3590017 	cmp	r9, #23
   31074:	c3a03003 	movgt	r3, #3
   31078:	d3a03002 	movle	r3, #2
			totalLenDecoded = decompress(sna->extraData + ramDumpOffset, ram, 49152, isCompressed); 
			pDataCallback(16384, ram, 49152);
		}
		else
		{
			int curPos = extraHeaderLen + 2;
   3107c:	e2899002 	add	r9, r9, #2
			if (extraHeaderLen > 23)
   31080:	e58d3024 	str	r3, [sp, #36]	; 0x24
   31084:	e58db020 	str	fp, [sp, #32]
   31088:	ea000009 	b	310b4 <McZXSpectrum::fileHandler(char const*, unsigned char const*, int)+0x59c>
			{
				int compressedBlockLen = (sna->extraData[curPos]) + sna->extraData[curPos+1] * 256;
				int blockBase = -1;
				int blockPage = sna->extraData[curPos+2];
				// LogWrite(_logPrefix, LOG_DEBUG, "Decoding block curPos %d blockLen %d page %d", curPos, compressedBlockLen, blockPage);
				switch(blockPage)
   3108c:	e3520008 	cmp	r2, #8
   31090:	0a000045 	beq	311ac <McZXSpectrum::fileHandler(char const*, unsigned char const*, int)+0x694>
   31094:	e3520004 	cmp	r2, #4
   31098:	0a000045 	beq	311b4 <McZXSpectrum::fileHandler(char const*, unsigned char const*, int)+0x69c>
					if (lenDecoded != 16384)
						LogWrite(_logPrefix, LOG_DEBUG, "Decode block len %d != 16384", lenDecoded);
					totalLenDecoded += lenDecoded;
					pDataCallback(blockBase, ram, 16384);
				}
				curPos += 3 + compressedBlockLen;
   3109c:	e2888003 	add	r8, r8, #3
   310a0:	e0899008 	add	r9, r9, r8
				if (30 + curPos >= dataLen)
   310a4:	e59d2020 	ldr	r2, [sp, #32]
   310a8:	e289301e 	add	r3, r9, #30
   310ac:	e1520003 	cmp	r2, r3
   310b0:	da000047 	ble	311d4 <McZXSpectrum::fileHandler(char const*, unsigned char const*, int)+0x6bc>
				int compressedBlockLen = (sna->extraData[curPos]) + sna->extraData[curPos+1] * 256;
   310b4:	e0853009 	add	r3, r5, r9
				switch(blockPage)
   310b8:	e5d32020 	ldrb	r2, [r3, #32]
				int compressedBlockLen = (sna->extraData[curPos]) + sna->extraData[curPos+1] * 256;
   310bc:	e5d3101f 	ldrb	r1, [r3, #31]
   310c0:	e5d3801e 	ldrb	r8, [r3, #30]
				switch(blockPage)
   310c4:	e3520005 	cmp	r2, #5
				int compressedBlockLen = (sna->extraData[curPos]) + sna->extraData[curPos+1] * 256;
   310c8:	e0888401 	add	r8, r8, r1, lsl #8
				switch(blockPage)
   310cc:	1affffee 	bne	3108c <McZXSpectrum::fileHandler(char const*, unsigned char const*, int)+0x574>
   310d0:	e3a0b903 	mov	fp, #49152	; 0xc000
					int lenDecoded = decompress(sna->extraData + curPos + 3, ram, 16384, true); 
   310d4:	e0852009 	add	r2, r5, r9
		uint8_t* pOut = pDest;
   310d8:	e59f4518 	ldr	r4, [pc, #1304]	; 315f8 <McZXSpectrum::fileHandler(char const*, unsigned char const*, int)+0xae0>
		while (pOut - pDest < maxLen)
   310dc:	e59f7518 	ldr	r7, [pc, #1304]	; 315fc <McZXSpectrum::fileHandler(char const*, unsigned char const*, int)+0xae4>
					int lenDecoded = decompress(sna->extraData + curPos + 3, ram, 16384, true); 
   310e0:	e2822021 	add	r2, r2, #33	; 0x21
   310e4:	ea000002 	b	310f4 <McZXSpectrum::fileHandler(char const*, unsigned char const*, int)+0x5dc>
				*pOut++ = *pIn++;
   310e8:	e5c41000 	strb	r1, [r4]
   310ec:	e2822001 	add	r2, r2, #1
   310f0:	e2844001 	add	r4, r4, #1
		while (pOut - pDest < maxLen)
   310f4:	e0443006 	sub	r3, r4, r6
   310f8:	e1530007 	cmp	r3, r7
   310fc:	ca000013 	bgt	31150 <McZXSpectrum::fileHandler(char const*, unsigned char const*, int)+0x638>
			if ((!isCompressed) || (*pIn != 0xED) || (*(pIn + 1) != 0xED))
   31100:	e5d21000 	ldrb	r1, [r2]
   31104:	e35100ed 	cmp	r1, #237	; 0xed
   31108:	1afffff6 	bne	310e8 <McZXSpectrum::fileHandler(char const*, unsigned char const*, int)+0x5d0>
   3110c:	e5d20001 	ldrb	r0, [r2, #1]
   31110:	e35000ed 	cmp	r0, #237	; 0xed
   31114:	1afffff3 	bne	310e8 <McZXSpectrum::fileHandler(char const*, unsigned char const*, int)+0x5d0>
				int length = *pIn++;
   31118:	e5d2a002 	ldrb	sl, [r2, #2]
				int b = *pIn++;
   3111c:	e2821004 	add	r1, r2, #4
				if (length == 0)
   31120:	e35a0000 	cmp	sl, #0
				int b = *pIn++;
   31124:	e58d101c 	str	r1, [sp, #28]
				if (length == 0)
   31128:	0a00000f 	beq	3116c <McZXSpectrum::fileHandler(char const*, unsigned char const*, int)+0x654>
   3112c:	e5d21003 	ldrb	r1, [r2, #3]
   31130:	e1a00004 	mov	r0, r4
   31134:	e1a0200a 	mov	r2, sl
   31138:	e084400a 	add	r4, r4, sl
   3113c:	eb006f4d 	bl	4ce78 <memset>
		while (pOut - pDest < maxLen)
   31140:	e0443006 	sub	r3, r4, r6
   31144:	e1530007 	cmp	r3, r7
				int b = *pIn++;
   31148:	e59d201c 	ldr	r2, [sp, #28]
		while (pOut - pDest < maxLen)
   3114c:	daffffeb 	ble	31100 <McZXSpectrum::fileHandler(char const*, unsigned char const*, int)+0x5e8>
					if (lenDecoded != 16384)
   31150:	e3530901 	cmp	r3, #16384	; 0x4000
   31154:	1a000004 	bne	3116c <McZXSpectrum::fileHandler(char const*, unsigned char const*, int)+0x654>
					pDataCallback(blockBase, ram, 16384);
   31158:	e1a0000b 	mov	r0, fp
   3115c:	e3a02901 	mov	r2, #16384	; 0x4000
   31160:	e1a01006 	mov	r1, r6
   31164:	eb0025b8 	bl	3a84c <TargetState::addMemoryBlock(unsigned long, unsigned char const*, unsigned long)>
   31168:	eaffffcb 	b	3109c <McZXSpectrum::fileHandler(char const*, unsigned char const*, int)+0x584>
						LogWrite(_logPrefix, LOG_DEBUG, "Decode block len %d != 16384", lenDecoded);
   3116c:	e59f048c 	ldr	r0, [pc, #1164]	; 31600 <McZXSpectrum::fileHandler(char const*, unsigned char const*, int)+0xae8>
   31170:	e59f248c 	ldr	r2, [pc, #1164]	; 31604 <McZXSpectrum::fileHandler(char const*, unsigned char const*, int)+0xaec>
   31174:	e3a01004 	mov	r1, #4
   31178:	e5900000 	ldr	r0, [r0]
   3117c:	ebffcbfd 	bl	24178 <LogWrite>
   31180:	eafffff4 	b	31158 <McZXSpectrum::fileHandler(char const*, unsigned char const*, int)+0x640>
			LogWrite(_logPrefix, LOG_DEBUG, "DataBlock len %d", dataLen);
   31184:	e1a03009 	mov	r3, r9
   31188:	e59f2478 	ldr	r2, [pc, #1144]	; 31608 <McZXSpectrum::fileHandler(char const*, unsigned char const*, int)+0xaf0>
   3118c:	e3a01004 	mov	r1, #4
   31190:	ebffcbf8 	bl	24178 <LogWrite>
			pDataCallback(_curStartAddr, pData + curOffset + 1, dataLen);
   31194:	e2841006 	add	r1, r4, #6
   31198:	e0851001 	add	r1, r5, r1
   3119c:	e1a02008 	mov	r2, r8
   311a0:	e59d001c 	ldr	r0, [sp, #28]
   311a4:	eb0025a8 	bl	3a84c <TargetState::addMemoryBlock(unsigned long, unsigned char const*, unsigned long)>
   311a8:	eaffff7f 	b	30fac <McZXSpectrum::fileHandler(char const*, unsigned char const*, int)+0x494>
				switch(blockPage)
   311ac:	e3a0b901 	mov	fp, #16384	; 0x4000
   311b0:	eaffffc7 	b	310d4 <McZXSpectrum::fileHandler(char const*, unsigned char const*, int)+0x5bc>
   311b4:	e3a0b902 	mov	fp, #32768	; 0x8000
   311b8:	eaffffc5 	b	310d4 <McZXSpectrum::fileHandler(char const*, unsigned char const*, int)+0x5bc>
			pDataCallback(16384, ram, 49152);
   311bc:	e3a02903 	mov	r2, #49152	; 0xc000
   311c0:	e59f1430 	ldr	r1, [pc, #1072]	; 315f8 <McZXSpectrum::fileHandler(char const*, unsigned char const*, int)+0xae0>
   311c4:	e3a00901 	mov	r0, #16384	; 0x4000
   311c8:	eb00259f 	bl	3a84c <TargetState::addMemoryBlock(unsigned long, unsigned char const*, unsigned long)>
   311cc:	e3a03001 	mov	r3, #1
   311d0:	e58d3024 	str	r3, [sp, #36]	; 0x24
        HLDASH = DEDASH = BCDASH = AFDASH = MEMPTR = 0;
   311d4:	e3a01000 	mov	r1, #0
			}
		}

		// Registers
		Z80Registers regs;
		regs.AF = (sna->a << 8) + (sna->f & 0xff);
   311d8:	e5d53000 	ldrb	r3, [r5]
   311dc:	e5d52001 	ldrb	r2, [r5, #1]
		regs.AFDASH = (sna->a2 << 8) + (sna->f2 & 0xff);
   311e0:	e5d50015 	ldrb	r0, [r5, #21]
		regs.AF = (sna->a << 8) + (sna->f & 0xff);
   311e4:	e0822403 	add	r2, r2, r3, lsl #8
		regs.AFDASH = (sna->a2 << 8) + (sna->f2 & 0xff);
   311e8:	e5d53016 	ldrb	r3, [r5, #22]
		regs.AF = (sna->a << 8) + (sna->f & 0xff);
   311ec:	e58d20a8 	str	r2, [sp, #168]	; 0xa8
		regs.BC = sna->bc;
   311f0:	e5d52002 	ldrb	r2, [r5, #2]
		regs.AFDASH = (sna->a2 << 8) + (sna->f2 & 0xff);
   311f4:	e0833400 	add	r3, r3, r0, lsl #8
		regs.BC = sna->bc;
   311f8:	e5d50003 	ldrb	r0, [r5, #3]
		regs.AFDASH = (sna->a2 << 8) + (sna->f2 & 0xff);
   311fc:	e58d30c0 	str	r3, [sp, #192]	; 0xc0
		regs.BCDASH = sna->bc2;
   31200:	e5d5300f 	ldrb	r3, [r5, #15]
		regs.BC = sna->bc;
   31204:	e1822400 	orr	r2, r2, r0, lsl #8
		regs.BCDASH = sna->bc2;
   31208:	e5d50010 	ldrb	r0, [r5, #16]
		regs.BC = sna->bc;
   3120c:	e58d20a4 	str	r2, [sp, #164]	; 0xa4
		regs.DE = sna->de;
   31210:	e5d5200d 	ldrb	r2, [r5, #13]
		regs.BCDASH = sna->bc2;
   31214:	e1833400 	orr	r3, r3, r0, lsl #8
		regs.DE = sna->de;
   31218:	e5d5000e 	ldrb	r0, [r5, #14]
		regs.BCDASH = sna->bc2;
   3121c:	e58d30bc 	str	r3, [sp, #188]	; 0xbc
		regs.DEDASH = sna->de2;
   31220:	e5d53011 	ldrb	r3, [r5, #17]
		regs.DE = sna->de;
   31224:	e1822400 	orr	r2, r2, r0, lsl #8
		regs.DEDASH = sna->de2;
   31228:	e5d50012 	ldrb	r0, [r5, #18]
		regs.DE = sna->de;
   3122c:	e58d20a0 	str	r2, [sp, #160]	; 0xa0
		regs.HL = sna->hl;
   31230:	e5d52004 	ldrb	r2, [r5, #4]
		regs.DEDASH = sna->de2;
   31234:	e1833400 	orr	r3, r3, r0, lsl #8
		regs.HL = sna->hl;
   31238:	e5d50005 	ldrb	r0, [r5, #5]
		regs.DEDASH = sna->de2;
   3123c:	e58d30b8 	str	r3, [sp, #184]	; 0xb8
		regs.HLDASH = sna->hl2;
   31240:	e5d53013 	ldrb	r3, [r5, #19]
		regs.HL = sna->hl;
   31244:	e1822400 	orr	r2, r2, r0, lsl #8
		regs.HLDASH = sna->hl2;
   31248:	e5d50014 	ldrb	r0, [r5, #20]
		regs.HL = sna->hl;
   3124c:	e58d209c 	str	r2, [sp, #156]	; 0x9c
		regs.IX = sna->ix;
   31250:	e5d52019 	ldrb	r2, [r5, #25]
		regs.HLDASH = sna->hl2;
   31254:	e1833400 	orr	r3, r3, r0, lsl #8
		regs.IX = sna->ix;
   31258:	e5d5001a 	ldrb	r0, [r5, #26]
		regs.HLDASH = sna->hl2;
   3125c:	e58d30b4 	str	r3, [sp, #180]	; 0xb4
		regs.IY = sna->iy;
   31260:	e5d53017 	ldrb	r3, [r5, #23]
		regs.IX = sna->ix;
   31264:	e1822400 	orr	r2, r2, r0, lsl #8
		regs.IY = sna->iy;
   31268:	e5d50018 	ldrb	r0, [r5, #24]
		regs.IX = sna->ix;
   3126c:	e58d20ac 	str	r2, [sp, #172]	; 0xac
		regs.IY = sna->iy;
   31270:	e1833400 	orr	r3, r3, r0, lsl #8
   31274:	e58d30b0 	str	r3, [sp, #176]	; 0xb0
   31278:	e58d10c4 	str	r1, [sp, #196]	; 0xc4
        I = R = INTMODE = INTENABLED = VPS = 0;
   3127c:	e58d10d8 	str	r1, [sp, #216]	; 0xd8
		regs.SP = sna->sp;
   31280:	e5d50008 	ldrb	r0, [r5, #8]
		regs.R = (sna->r & 0x7f) + ((sna->borderEtc & 0x01) >> 7);
		regs.INTMODE = sna->interruptMode & 0x03;
		regs.INTENABLED = sna->interruptFlipFlop;

		// Check for V2/3 PC
		if (versionNum > 1)
   31284:	e59d3024 	ldr	r3, [sp, #36]	; 0x24
		regs.SP = sna->sp;
   31288:	e5d52009 	ldrb	r2, [r5, #9]
		regs.PC = sna->pc;
   3128c:	e5d51006 	ldrb	r1, [r5, #6]
		if (versionNum > 1)
   31290:	e3530001 	cmp	r3, #1
		regs.PC = sna->pc;
   31294:	e5d53007 	ldrb	r3, [r5, #7]
		regs.SP = sna->sp;
   31298:	e1800402 	orr	r0, r0, r2, lsl #8
		regs.PC = sna->pc;
   3129c:	e1811403 	orr	r1, r1, r3, lsl #8
		regs.R = (sna->r & 0x7f) + ((sna->borderEtc & 0x01) >> 7);
   312a0:	e5d5200b 	ldrb	r2, [r5, #11]
		regs.INTMODE = sna->interruptMode & 0x03;
   312a4:	e5d5301d 	ldrb	r3, [r5, #29]
		regs.R = (sna->r & 0x7f) + ((sna->borderEtc & 0x01) >> 7);
   312a8:	e202207f 	and	r2, r2, #127	; 0x7f
		regs.INTMODE = sna->interruptMode & 0x03;
   312ac:	e2033003 	and	r3, r3, #3
   312b0:	e1cd2cfc 	strd	r2, [sp, #204]	; 0xcc
		regs.SP = sna->sp;
   312b4:	e58d0098 	str	r0, [sp, #152]	; 0x98
			regs.PC = (sna->extraData[2] + ((int)sna->extraData[3]) * 256);
   312b8:	15d53020 	ldrbne	r3, [r5, #32]
		regs.I = sna->interrupt;
   312bc:	e5d5000a 	ldrb	r0, [r5, #10]
			regs.PC = (sna->extraData[2] + ((int)sna->extraData[3]) * 256);
   312c0:	15d52021 	ldrbne	r2, [r5, #33]	; 0x21
		regs.PC = sna->pc;
   312c4:	e58d1094 	str	r1, [sp, #148]	; 0x94
		regs.INTENABLED = sna->interruptFlipFlop;
   312c8:	e5d5101b 	ldrb	r1, [r5, #27]
		regs.I = sna->interrupt;
   312cc:	e58d00c8 	str	r0, [sp, #200]	; 0xc8
			regs.PC = (sna->extraData[2] + ((int)sna->extraData[3]) * 256);
   312d0:	10833402 	addne	r3, r3, r2, lsl #8

		pRegsCallback(regs);
   312d4:	e28d0094 	add	r0, sp, #148	; 0x94
		regs.INTENABLED = sna->interruptFlipFlop;
   312d8:	e58d10d4 	str	r1, [sp, #212]	; 0xd4
			regs.PC = (sna->extraData[2] + ((int)sna->extraData[3]) * 256);
   312dc:	158d3094 	strne	r3, [sp, #148]	; 0x94
		pRegsCallback(regs);
   312e0:	eb0025a2 	bl	3a970 <TargetState::setTargetRegisters(Z80Registers const&)>
   312e4:	eafffe3e 	b	30be4 <McZXSpectrum::fileHandler(char const*, unsigned char const*, int)+0xcc>
				getString(pData, totalLen, curOffset + 2, 10, fileName);
   312e8:	e2841007 	add	r1, r4, #7
		int maxLen = strLen < (dataLen - recPos) ? strLen : (dataLen - recPos);
   312ec:	e04b8001 	sub	r8, fp, r1
   312f0:	e358000a 	cmp	r8, #10
   312f4:	a3a0800a 	movge	r8, #10
  		strlcpy(pDest, (const char*) (pData+recPos), maxLen+1);
   312f8:	e28d9094 	add	r9, sp, #148	; 0x94
   312fc:	e0851001 	add	r1, r5, r1
   31300:	e2882001 	add	r2, r8, #1
   31304:	e1a00009 	mov	r0, r9
   31308:	e58d301c 	str	r3, [sp, #28]
   3130c:	eb0070ad 	bl	4d5c8 <strlcpy>
  		if (dataLen < recPos + 2)
   31310:	e2842012 	add	r2, r4, #18
   31314:	e15b0002 	cmp	fp, r2
				_curDataLen = getWord16(pData, totalLen, curOffset + 12);
   31318:	c2842011 	addgt	r2, r4, #17
  		return ((uint32_t)(pData[recPos])) + ((uint32_t)(pData[recPos+1]) << 8);
   3131c:	c0851002 	addgt	r1, r5, r2
   31320:	c5d11001 	ldrbgt	r1, [r1, #1]
   31324:	c7d52002 	ldrbgt	r2, [r5, r2]
		pDest[maxLen] = 0;
   31328:	e28d3f66 	add	r3, sp, #408	; 0x198
   3132c:	e0838008 	add	r8, r3, r8
   31330:	e59d301c 	ldr	r3, [sp, #28]
  		return ((uint32_t)(pData[recPos])) + ((uint32_t)(pData[recPos+1]) << 8);
   31334:	c0822401 	addgt	r2, r2, r1, lsl #8
  		if (dataLen < recPos + 2)
   31338:	e2841014 	add	r1, r4, #20
   3133c:	d1a02003 	movle	r2, r3
   31340:	e15b0001 	cmp	fp, r1
   31344:	d3a01000 	movle	r1, #0
				_curStartAddr = getWord16(pData, totalLen, curOffset + 14);
   31348:	c2841013 	addgt	r1, r4, #19
  		return ((uint32_t)(pData[recPos])) + ((uint32_t)(pData[recPos+1]) << 8);
   3134c:	c0850001 	addgt	r0, r5, r1
   31350:	c5d00001 	ldrbgt	r0, [r0, #1]
   31354:	c7d51001 	ldrbgt	r1, [r5, r1]
				int checksum = getByte(pData, totalLen, curOffset + 17);
   31358:	e2844016 	add	r4, r4, #22
  		return ((uint32_t)(pData[recPos])) + ((uint32_t)(pData[recPos+1]) << 8);
   3135c:	c0811400 	addgt	r1, r1, r0, lsl #8
  		if (dataLen < recPos + 1)
   31360:	e15b0004 	cmp	fp, r4
		pDest[maxLen] = 0;
   31364:	e5483104 	strb	r3, [r8, #-260]	; 0xfffffefc
   31368:	c7d53004 	ldrbgt	r3, [r5, r4]
  		if (dataLen < recPos + 2)
   3136c:	e58d101c 	str	r1, [sp, #28]
				LogWrite(_logPrefix, LOG_DEBUG, "ByteHeader %s dataLen %d startAddr %04x checksum %02x",
   31370:	e5970000 	ldr	r0, [r7]
   31374:	e58d3008 	str	r3, [sp, #8]
   31378:	e59d301c 	ldr	r3, [sp, #28]
   3137c:	e3a01004 	mov	r1, #4
   31380:	e1cd20f0 	strd	r2, [sp]
   31384:	e1a03009 	mov	r3, r9
   31388:	e59f227c 	ldr	r2, [pc, #636]	; 3160c <McZXSpectrum::fileHandler(char const*, unsigned char const*, int)+0xaf4>
   3138c:	ebffcb79 	bl	24178 <LogWrite>
   31390:	eaffff05 	b	30fac <McZXSpectrum::fileHandler(char const*, unsigned char const*, int)+0x494>
   31394:	e59f625c 	ldr	r6, [pc, #604]	; 315f8 <McZXSpectrum::fileHandler(char const*, unsigned char const*, int)+0xae0>
   31398:	e2044020 	and	r4, r4, #32
		uint8_t* pOut = pDest;
   3139c:	e1a03006 	mov	r3, r6
			totalLenDecoded = decompress(sna->extraData + ramDumpOffset, ram, 49152, isCompressed); 
   313a0:	e285201e 	add	r2, r5, #30
		while (pOut - pDest < maxLen)
   313a4:	e59f7264 	ldr	r7, [pc, #612]	; 31610 <McZXSpectrum::fileHandler(char const*, unsigned char const*, int)+0xaf8>
   313a8:	ea000002 	b	313b8 <McZXSpectrum::fileHandler(char const*, unsigned char const*, int)+0x8a0>
				*pOut++ = *pIn++;
   313ac:	e5c31000 	strb	r1, [r3]
   313b0:	e2822001 	add	r2, r2, #1
   313b4:	e2833001 	add	r3, r3, #1
		while (pOut - pDest < maxLen)
   313b8:	e0431006 	sub	r1, r3, r6
   313bc:	e1510007 	cmp	r1, r7
   313c0:	caffff7d 	bgt	311bc <McZXSpectrum::fileHandler(char const*, unsigned char const*, int)+0x6a4>
			if ((!isCompressed) || (*pIn != 0xED) || (*(pIn + 1) != 0xED))
   313c4:	e3540000 	cmp	r4, #0
   313c8:	e5d21000 	ldrb	r1, [r2]
   313cc:	0afffff6 	beq	313ac <McZXSpectrum::fileHandler(char const*, unsigned char const*, int)+0x894>
   313d0:	e35100ed 	cmp	r1, #237	; 0xed
   313d4:	1afffff4 	bne	313ac <McZXSpectrum::fileHandler(char const*, unsigned char const*, int)+0x894>
   313d8:	e5d20001 	ldrb	r0, [r2, #1]
   313dc:	e35000ed 	cmp	r0, #237	; 0xed
   313e0:	1afffff1 	bne	313ac <McZXSpectrum::fileHandler(char const*, unsigned char const*, int)+0x894>
				int length = *pIn++;
   313e4:	e5d28002 	ldrb	r8, [r2, #2]
				int b = *pIn++;
   313e8:	e2829004 	add	r9, r2, #4
				if (length == 0)
   313ec:	e3580000 	cmp	r8, #0
   313f0:	0affff71 	beq	311bc <McZXSpectrum::fileHandler(char const*, unsigned char const*, int)+0x6a4>
   313f4:	e5d21003 	ldrb	r1, [r2, #3]
   313f8:	e1a00003 	mov	r0, r3
   313fc:	e1a02008 	mov	r2, r8
   31400:	eb006e9c 	bl	4ce78 <memset>
				int b = *pIn++;
   31404:	e1a02009 	mov	r2, r9
   31408:	e0803008 	add	r3, r0, r8
   3140c:	eaffffe9 	b	313b8 <McZXSpectrum::fileHandler(char const*, unsigned char const*, int)+0x8a0>
				getString(pData, totalLen, curOffset + 2, 10, fileName);
   31410:	e2841007 	add	r1, r4, #7
		int maxLen = strLen < (dataLen - recPos) ? strLen : (dataLen - recPos);
   31414:	e04b8001 	sub	r8, fp, r1
   31418:	e358000a 	cmp	r8, #10
   3141c:	a3a0800a 	movge	r8, #10
  		strlcpy(pDest, (const char*) (pData+recPos), maxLen+1);
   31420:	e28d9094 	add	r9, sp, #148	; 0x94
   31424:	e0851001 	add	r1, r5, r1
   31428:	e2882001 	add	r2, r8, #1
   3142c:	e1a00009 	mov	r0, r9
   31430:	e58d3020 	str	r3, [sp, #32]
   31434:	eb007063 	bl	4d5c8 <strlcpy>
  		if (dataLen < recPos + 2)
   31438:	e2842012 	add	r2, r4, #18
   3143c:	e15b0002 	cmp	fp, r2
				_curDataLen = getWord16(pData, totalLen, curOffset + 12);
   31440:	c2842011 	addgt	r2, r4, #17
  		return ((uint32_t)(pData[recPos])) + ((uint32_t)(pData[recPos+1]) << 8);
   31444:	c0851002 	addgt	r1, r5, r2
   31448:	c5d11001 	ldrbgt	r1, [r1, #1]
   3144c:	c7d52002 	ldrbgt	r2, [r5, r2]
		pDest[maxLen] = 0;
   31450:	e28d3f66 	add	r3, sp, #408	; 0x198
   31454:	e0838008 	add	r8, r3, r8
   31458:	e59d3020 	ldr	r3, [sp, #32]
  		return ((uint32_t)(pData[recPos])) + ((uint32_t)(pData[recPos+1]) << 8);
   3145c:	c0822401 	addgt	r2, r2, r1, lsl #8
				_curVarName = getByte(pData, totalLen, curOffset + 15);
   31460:	e2841014 	add	r1, r4, #20
  		if (dataLen < recPos + 2)
   31464:	d1a02003 	movle	r2, r3
  		if (dataLen < recPos + 1)
   31468:	e15b0001 	cmp	fp, r1
   3146c:	d3a01000 	movle	r1, #0
				int checksum = getByte(pData, totalLen, curOffset + 17);
   31470:	e2844016 	add	r4, r4, #22
   31474:	c7d51001 	ldrbgt	r1, [r5, r1]
  		if (dataLen < recPos + 1)
   31478:	e15b0004 	cmp	fp, r4
		pDest[maxLen] = 0;
   3147c:	e5483104 	strb	r3, [r8, #-260]	; 0xfffffefc
   31480:	c7d53004 	ldrbgt	r3, [r5, r4]
				LogWrite(_logPrefix, LOG_DEBUG, "NumArrayHeader %s dataLen %d varName %d checksum %02x",
   31484:	e5970000 	ldr	r0, [r7]
   31488:	e98d000a 	stmib	sp, {r1, r3}
   3148c:	e58d2000 	str	r2, [sp]
   31490:	e1a03009 	mov	r3, r9
   31494:	e59f2178 	ldr	r2, [pc, #376]	; 31614 <McZXSpectrum::fileHandler(char const*, unsigned char const*, int)+0xafc>
   31498:	e3a01004 	mov	r1, #4
   3149c:	ebffcb35 	bl	24178 <LogWrite>
   314a0:	eafffec1 	b	30fac <McZXSpectrum::fileHandler(char const*, unsigned char const*, int)+0x494>
            baseAddr = strtol(baseAddrStr, NULL, 16);
   314a4:	e28d0094 	add	r0, sp, #148	; 0x94
   314a8:	e3a02010 	mov	r2, #16
   314ac:	e3a01000 	mov	r1, #0
   314b0:	eb00739a 	bl	4e320 <strtol>
   314b4:	e6ff3070 	uxth	r3, r0
   314b8:	e1a04003 	mov	r4, r3
   314bc:	eafffdbe 	b	30bbc <McZXSpectrum::fileHandler(char const*, unsigned char const*, int)+0xa4>
			LogWrite(_logPrefix, LOG_DEBUG, "Invalid format\n");
   314c0:	e59f3100 	ldr	r3, [pc, #256]	; 315c8 <McZXSpectrum::fileHandler(char const*, unsigned char const*, int)+0xab0>
   314c4:	e59f214c 	ldr	r2, [pc, #332]	; 31618 <McZXSpectrum::fileHandler(char const*, unsigned char const*, int)+0xb00>
   314c8:	e5930000 	ldr	r0, [r3]
   314cc:	e3a01004 	mov	r1, #4
   314d0:	ebffcb28 	bl	24178 <LogWrite>
   314d4:	eafffdc2 	b	30be4 <McZXSpectrum::fileHandler(char const*, unsigned char const*, int)+0xcc>
				getString(pData, totalLen, curOffset + 2, 10, fileName);
   314d8:	e2841007 	add	r1, r4, #7
		int maxLen = strLen < (dataLen - recPos) ? strLen : (dataLen - recPos);
   314dc:	e04b8001 	sub	r8, fp, r1
   314e0:	e358000a 	cmp	r8, #10
   314e4:	a3a0800a 	movge	r8, #10
  		strlcpy(pDest, (const char*) (pData+recPos), maxLen+1);
   314e8:	e28d9094 	add	r9, sp, #148	; 0x94
   314ec:	e0851001 	add	r1, r5, r1
   314f0:	e2882001 	add	r2, r8, #1
   314f4:	e1a00009 	mov	r0, r9
   314f8:	e58d3020 	str	r3, [sp, #32]
   314fc:	eb007031 	bl	4d5c8 <strlcpy>
  		if (dataLen < recPos + 2)
   31500:	e2842012 	add	r2, r4, #18
   31504:	e15b0002 	cmp	fp, r2
				_curDataLen = getWord16(pData, totalLen, curOffset + 12);
   31508:	c2842011 	addgt	r2, r4, #17
  		return ((uint32_t)(pData[recPos])) + ((uint32_t)(pData[recPos+1]) << 8);
   3150c:	c0851002 	addgt	r1, r5, r2
   31510:	c5d11001 	ldrbgt	r1, [r1, #1]
   31514:	c7d52002 	ldrbgt	r2, [r5, r2]
		pDest[maxLen] = 0;
   31518:	e28d3f66 	add	r3, sp, #408	; 0x198
   3151c:	e0838008 	add	r8, r3, r8
   31520:	e59d3020 	ldr	r3, [sp, #32]
  		return ((uint32_t)(pData[recPos])) + ((uint32_t)(pData[recPos+1]) << 8);
   31524:	c0822401 	addgt	r2, r2, r1, lsl #8
				_curVarName = getByte(pData, totalLen, curOffset + 15);
   31528:	e2841014 	add	r1, r4, #20
  		if (dataLen < recPos + 2)
   3152c:	d1a02003 	movle	r2, r3
  		if (dataLen < recPos + 1)
   31530:	e15b0001 	cmp	fp, r1
   31534:	d3a01000 	movle	r1, #0
				int checksum = getByte(pData, totalLen, curOffset + 17);
   31538:	e2844016 	add	r4, r4, #22
   3153c:	c7d51001 	ldrbgt	r1, [r5, r1]
  		if (dataLen < recPos + 1)
   31540:	e15b0004 	cmp	fp, r4
		pDest[maxLen] = 0;
   31544:	e5483104 	strb	r3, [r8, #-260]	; 0xfffffefc
   31548:	c7d53004 	ldrbgt	r3, [r5, r4]
				LogWrite(_logPrefix, LOG_DEBUG, "StringArrayHeader %s dataLen %d varName %d checksum %02x",
   3154c:	e5970000 	ldr	r0, [r7]
   31550:	e98d000a 	stmib	sp, {r1, r3}
   31554:	e58d2000 	str	r2, [sp]
   31558:	e1a03009 	mov	r3, r9
   3155c:	e59f20b8 	ldr	r2, [pc, #184]	; 3161c <McZXSpectrum::fileHandler(char const*, unsigned char const*, int)+0xb04>
   31560:	e3a01004 	mov	r1, #4
   31564:	ebffcb03 	bl	24178 <LogWrite>
   31568:	eafffe8f 	b	30fac <McZXSpectrum::fileHandler(char const*, unsigned char const*, int)+0x494>
			LogWrite(_logPrefix, LOG_DEBUG, "Invalid format - not enough data\n");
   3156c:	e59f308c 	ldr	r3, [pc, #140]	; 31600 <McZXSpectrum::fileHandler(char const*, unsigned char const*, int)+0xae8>
   31570:	e59f20a8 	ldr	r2, [pc, #168]	; 31620 <McZXSpectrum::fileHandler(char const*, unsigned char const*, int)+0xb08>
   31574:	e5930000 	ldr	r0, [r3]
   31578:	e3a01004 	mov	r1, #4
   3157c:	ebffcafd 	bl	24178 <LogWrite>
   31580:	eafffd97 	b	30be4 <McZXSpectrum::fileHandler(char const*, unsigned char const*, int)+0xcc>
			LogWrite(_logPrefix, LOG_DEBUG, "Invalid format - not enough data\n");
   31584:	e59f304c 	ldr	r3, [pc, #76]	; 315d8 <McZXSpectrum::fileHandler(char const*, unsigned char const*, int)+0xac0>
   31588:	e59f2090 	ldr	r2, [pc, #144]	; 31620 <McZXSpectrum::fileHandler(char const*, unsigned char const*, int)+0xb08>
   3158c:	e5930000 	ldr	r0, [r3]
   31590:	e3a01004 	mov	r1, #4
   31594:	ebffcaf7 	bl	24178 <LogWrite>
   31598:	eafffd91 	b	30be4 <McZXSpectrum::fileHandler(char const*, unsigned char const*, int)+0xcc>
   3159c:	000540b8 	.word	0x000540b8
   315a0:	00053e00 	.word	0x00053e00
   315a4:	000551b4 	.word	0x000551b4
   315a8:	00055370 	.word	0x00055370
   315ac:	000553d8 	.word	0x000553d8
   315b0:	00054f00 	.word	0x00054f00
   315b4:	0006f370 	.word	0x0006f370
   315b8:	00054f0c 	.word	0x00054f0c
   315bc:	000551bc 	.word	0x000551bc
   315c0:	000551d8 	.word	0x000551d8
   315c4:	00005ccb 	.word	0x00005ccb
   315c8:	0006f0e4 	.word	0x0006f0e4
   315cc:	00055350 	.word	0x00055350
   315d0:	000553e0 	.word	0x000553e0
   315d4:	0000c01a 	.word	0x0000c01a
   315d8:	0006f0e0 	.word	0x0006f0e0
   315dc:	000553fc 	.word	0x000553fc
   315e0:	000551f0 	.word	0x000551f0
   315e4:	00055218 	.word	0x00055218
   315e8:	0005567c 	.word	0x0005567c
   315ec:	00055338 	.word	0x00055338
   315f0:	00055310 	.word	0x00055310
   315f4:	00055378 	.word	0x00055378
   315f8:	00078134 	.word	0x00078134
   315fc:	00003fff 	.word	0x00003fff
   31600:	0006f0e8 	.word	0x0006f0e8
   31604:	000553b8 	.word	0x000553b8
   31608:	00055324 	.word	0x00055324
   3160c:	000552d8 	.word	0x000552d8
   31610:	0000bfff 	.word	0x0000bfff
   31614:	00055264 	.word	0x00055264
   31618:	000551e0 	.word	0x000551e0
   3161c:	0005529c 	.word	0x0005529c
   31620:	00055394 	.word	0x00055394

00031624 <McZXSpectrum::McZXSpectrum()>:
McZXSpectrum::McZXSpectrum() : McBase(_defaultDescriptorTables, sizeof(_defaultDescriptorTables)/sizeof(_defaultDescriptorTables[0]))
   31624:	e92d4010 	push	{r4, lr}
   31628:	e3a02001 	mov	r2, #1
   3162c:	e1a04000 	mov	r4, r0
   31630:	e59f1034 	ldr	r1, [pc, #52]	; 3166c <McZXSpectrum::McZXSpectrum()+0x48>
   31634:	ebfff136 	bl	2db14 <McBase::McBase(McDescriptorTable*, int)>
    _screenBufferValid = false;
   31638:	e3a01000 	mov	r1, #0
   3163c:	e3e02000 	mvn	r2, #0
McZXSpectrum::McZXSpectrum() : McBase(_defaultDescriptorTables, sizeof(_defaultDescriptorTables)/sizeof(_defaultDescriptorTables[0]))
   31640:	e59fc028 	ldr	ip, [pc, #40]	; 31670 <McZXSpectrum::McZXSpectrum()+0x4c>
   31644:	e59f3028 	ldr	r3, [pc, #40]	; 31674 <McZXSpectrum::McZXSpectrum()+0x50>
   31648:	e584c000 	str	ip, [r4]
    _screenBufferValid = false;
   3164c:	e2840a01 	add	r0, r4, #4096	; 0x1000
    _screenCacheValid = false;
   31650:	e284ca03 	add	ip, r4, #12288	; 0x3000
    _screenBufferValid = false;
   31654:	e5c01b54 	strb	r1, [r0, #2900]	; 0xb54
   31658:	e5832000 	str	r2, [r3]
}
   3165c:	e1a00004 	mov	r0, r4
    _screenCacheValid = false;
   31660:	e5cc1655 	strb	r1, [ip, #1621]	; 0x655
   31664:	e5832004 	str	r2, [r3, #4]
}
   31668:	e8bd8010 	pop	{r4, pc}
   3166c:	0006f374 	.word	0x0006f374
   31670:	00055154 	.word	0x00055154
   31674:	0007812c 	.word	0x0007812c

00031678 <McZXSpectrum::updateDisplayFromBuffer(unsigned char*, unsigned long)>:
    if (!_pDisplay || (bufLen < ZXSPECTRUM_DISP_RAM_SIZE))
   31678:	e3520c1b 	cmp	r2, #6912	; 0x1b00
   3167c:	23a02000 	movcs	r2, #0
   31680:	33a02001 	movcc	r2, #1
{    
   31684:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if (!_pDisplay || (bufLen < ZXSPECTRUM_DISP_RAM_SIZE))
   31688:	e5903050 	ldr	r3, [r0, #80]	; 0x50
{    
   3168c:	e24dd06c 	sub	sp, sp, #108	; 0x6c
   31690:	e3530000 	cmp	r3, #0
   31694:	11a04002 	movne	r4, r2
   31698:	03a04001 	moveq	r4, #1
    if (!_pDisplay || (bufLen < ZXSPECTRUM_DISP_RAM_SIZE))
   3169c:	e3540000 	cmp	r4, #0
   316a0:	0a000001 	beq	316ac <McZXSpectrum::updateDisplayFromBuffer(unsigned char*, unsigned long)+0x34>
}
   316a4:	e28dd06c 	add	sp, sp, #108	; 0x6c
   316a8:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (_activeDescriptorTable.pixelScaleX == 4)
   316ac:	e5902020 	ldr	r2, [r0, #32]
   316b0:	e58d1020 	str	r1, [sp, #32]
   316b4:	e3520004 	cmp	r2, #4
   316b8:	e1a07000 	mov	r7, r0
   316bc:	0a000096 	beq	3191c <McZXSpectrum::updateDisplayFromBuffer(unsigned char*, unsigned long)+0x2a4>
   316c0:	e1a00001 	mov	r0, r1
   316c4:	e2813d5f 	add	r3, r1, #6080	; 0x17c0
   316c8:	e2871dcd 	add	r1, r7, #13120	; 0x3340
   316cc:	e2812014 	add	r2, r1, #20
   316d0:	e58d103c 	str	r1, [sp, #60]	; 0x3c
   316d4:	e2800d6b 	add	r0, r0, #6848	; 0x1ac0
   316d8:	e2811015 	add	r1, r1, #21
   316dc:	e283303f 	add	r3, r3, #63	; 0x3f
   316e0:	e58d1030 	str	r1, [sp, #48]	; 0x30
   316e4:	e280103f 	add	r1, r0, #63	; 0x3f
   316e8:	e58d3018 	str	r3, [sp, #24]
   316ec:	e1cd23f4 	strd	r2, [sp, #52]	; 0x34
   316f0:	e58d102c 	str	r1, [sp, #44]	; 0x2c
   316f4:	e1a0c001 	mov	ip, r1
   316f8:	ea000001 	b	31704 <McZXSpectrum::updateDisplayFromBuffer(unsigned char*, unsigned long)+0x8c>
        for (uint32_t colrIdx = ZXSPECTRUM_PIXEL_RAM_SIZE; colrIdx < ZXSPECTRUM_DISP_RAM_SIZE; colrIdx++)
   316fc:	e15c0003 	cmp	ip, r3
   31700:	0a000148 	beq	31c28 <McZXSpectrum::updateDisplayFromBuffer(unsigned char*, unsigned long)+0x5b0>
            if (pScrnBuffer[colrIdx] != _screenCache[colrIdx])
   31704:	e5f30001 	ldrb	r0, [r3, #1]!
   31708:	e5f21001 	ldrb	r1, [r2, #1]!
   3170c:	e1500001 	cmp	r0, r1
   31710:	0afffff9 	beq	316fc <McZXSpectrum::updateDisplayFromBuffer(unsigned char*, unsigned long)+0x84>
                _screenCacheValid = false;
   31714:	e3a03000 	mov	r3, #0
   31718:	e2872a03 	add	r2, r7, #12288	; 0x3000
   3171c:	e58d2014 	str	r2, [sp, #20]
   31720:	e5c23655 	strb	r3, [r2, #1621]	; 0x655
        int bytesPerRow = _activeDescriptorTable.displayPixelsX/8;
   31724:	e5970010 	ldr	r0, [r7, #16]
        int colrCellsPerRow = _activeDescriptorTable.displayPixelsX/_activeDescriptorTable.displayCellX;
   31728:	e5971018 	ldr	r1, [r7, #24]
        int bytesPerRow = _activeDescriptorTable.displayPixelsX/8;
   3172c:	e3500000 	cmp	r0, #0
   31730:	e2803007 	add	r3, r0, #7
   31734:	a1a03000 	movge	r3, r0
   31738:	e1a031c3 	asr	r3, r3, #3
   3173c:	e58d3024 	str	r3, [sp, #36]	; 0x24
        int colrCellsPerRow = _activeDescriptorTable.displayPixelsX/_activeDescriptorTable.displayCellX;
   31740:	eb0074e0 	bl	4eac8 <__divsi3>
   31744:	e59d3020 	ldr	r3, [sp, #32]
   31748:	e287bd6d 	add	fp, r7, #6976	; 0x1b40
   3174c:	e2438001 	sub	r8, r3, #1
   31750:	e2633001 	rsb	r3, r3, #1
   31754:	e58d301c 	str	r3, [sp, #28]
   31758:	e1a03007 	mov	r3, r7
   3175c:	e28bb015 	add	fp, fp, #21
   31760:	e1a0700b 	mov	r7, fp
   31764:	e1a0b003 	mov	fp, r3
   31768:	e58d0028 	str	r0, [sp, #40]	; 0x28
   3176c:	e59d301c 	ldr	r3, [sp, #28]
            if (!_screenCacheValid || (_screenCache[bufIdx] != pScrnBuffer[bufIdx]))
   31770:	e3540000 	cmp	r4, #0
   31774:	e0834008 	add	r4, r3, r8
   31778:	e5f83001 	ldrb	r3, [r8, #1]!
   3177c:	0a000002 	beq	3178c <McZXSpectrum::updateDisplayFromBuffer(unsigned char*, unsigned long)+0x114>
   31780:	e5d72000 	ldrb	r2, [r7]
   31784:	e1520003 	cmp	r2, r3
   31788:	0a00003c 	beq	31880 <McZXSpectrum::updateDisplayFromBuffer(unsigned char*, unsigned long)+0x208>
   3178c:	e59d5028 	ldr	r5, [sp, #40]	; 0x28
                _screenCache[bufIdx] = pScrnBuffer[bufIdx];
   31790:	e5c73000 	strb	r3, [r7]
   31794:	e1a01005 	mov	r1, r5
   31798:	e1a00004 	mov	r0, r4
   3179c:	eb0074c1 	bl	4eaa8 <__aeabi_uidivmod>
                int cellColourData = pScrnBuffer[colrAddr];
   317a0:	e59d2020 	ldr	r2, [sp, #32]
                row = (row & 0x07) | ((row & 0xc0) >> 3);
   317a4:	e1a031c0 	asr	r3, r0, #3
   317a8:	e2033018 	and	r3, r3, #24
   317ac:	e2000007 	and	r0, r0, #7
                int cellColourData = pScrnBuffer[colrAddr];
   317b0:	e0821001 	add	r1, r2, r1
                row = (row & 0x07) | ((row & 0xc0) >> 3);
   317b4:	e1800003 	orr	r0, r0, r3
                int cellColourData = pScrnBuffer[colrAddr];
   317b8:	e0231095 	mla	r3, r5, r0, r1
   317bc:	e1a00004 	mov	r0, r4
   317c0:	e2833b06 	add	r3, r3, #6144	; 0x1800
   317c4:	e59d1024 	ldr	r1, [sp, #36]	; 0x24
   317c8:	e5d34000 	ldrb	r4, [r3]
   317cc:	eb0074b5 	bl	4eaa8 <__aeabi_uidivmod>
   317d0:	e59f9460 	ldr	r9, [pc, #1120]	; 31c38 <McZXSpectrum::updateDisplayFromBuffer(unsigned char*, unsigned long)+0x5c0>
                    DISPLAY_FX_COLOUR pixColour = colourLUT[((cellColourData & 0x38) >> 3) | ((cellColourData & 0x40) >> 3)];
   317d4:	e1a031c4 	asr	r3, r4, #3
   317d8:	e203c00f 	and	ip, r3, #15
                    y = ((y & 0x38) >> 3) | ((y & 0x07) << 3) | (y & 0xc0);
   317dc:	e1a02180 	lsl	r2, r0, #3
                        pixColour = colourLUT[(cellColourData & 0x07) | ((cellColourData & 0x40) >> 3)]; 
   317e0:	e204e007 	and	lr, r4, #7
   317e4:	e089c00c 	add	ip, r9, ip
   317e8:	e2033008 	and	r3, r3, #8
                    y = ((y & 0x38) >> 3) | ((y & 0x07) << 3) | (y & 0xc0);
   317ec:	e1a06d00 	lsl	r6, r0, #26
                    int x = ((bufIdx % bytesPerRow) * 8) + i;
   317f0:	e1a04181 	lsl	r4, r1, #3
                    y = ((y & 0x38) >> 3) | ((y & 0x07) << 3) | (y & 0xc0);
   317f4:	e2022038 	and	r2, r2, #56	; 0x38
                        pixColour = colourLUT[(cellColourData & 0x07) | ((cellColourData & 0x40) >> 3)]; 
   317f8:	e18e3003 	orr	r3, lr, r3
   317fc:	e1dc1edc 	ldrsb	r1, [ip, #236]	; 0xec
   31800:	e0893003 	add	r3, r9, r3
                    y = ((y & 0x38) >> 3) | ((y & 0x07) << 3) | (y & 0xc0);
   31804:	e1822ea6 	orr	r2, r2, r6, lsr #29
   31808:	e20000c0 	and	r0, r0, #192	; 0xc0
                int pixMask = 0x80;
   3180c:	e3a05080 	mov	r5, #128	; 0x80
   31810:	e58d100c 	str	r1, [sp, #12]
                        pixColour = colourLUT[(cellColourData & 0x07) | ((cellColourData & 0x40) >> 3)]; 
   31814:	e58d3010 	str	r3, [sp, #16]
                    y = ((y & 0x38) >> 3) | ((y & 0x07) << 3) | (y & 0xc0);
   31818:	e1826000 	orr	r6, r2, r0
   3181c:	e2849008 	add	r9, r4, #8
   31820:	ea00000c 	b	31858 <McZXSpectrum::updateDisplayFromBuffer(unsigned char*, unsigned long)+0x1e0>
                    _pDisplay->setPixel(x, y, 1, pixColour);
   31824:	e59d3010 	ldr	r3, [sp, #16]
   31828:	e5902000 	ldr	r2, [r0]
   3182c:	e1d33edc 	ldrsb	r3, [r3, #236]	; 0xec
   31830:	e58d3000 	str	r3, [sp]
   31834:	e3a03001 	mov	r3, #1
   31838:	e592a00c 	ldr	sl, [r2, #12]
   3183c:	e1a01004 	mov	r1, r4
   31840:	e1a02006 	mov	r2, r6
   31844:	e0844003 	add	r4, r4, r3
   31848:	e12fff3a 	blx	sl
                for (int i = 0; i < 8; i++)
   3184c:	e1590004 	cmp	r9, r4
                    pixMask = pixMask >> 1;
   31850:	e1a050c5 	asr	r5, r5, #1
                for (int i = 0; i < 8; i++)
   31854:	0a000009 	beq	31880 <McZXSpectrum::updateDisplayFromBuffer(unsigned char*, unsigned long)+0x208>
                    bool pixVal = pScrnBuffer[bufIdx] & pixMask;
   31858:	e5d83000 	ldrb	r3, [r8]
                    _pDisplay->setPixel(x, y, 1, pixColour);
   3185c:	e59b0050 	ldr	r0, [fp, #80]	; 0x50
                    if (pixVal)
   31860:	e1130005 	tst	r3, r5
   31864:	1affffee 	bne	31824 <McZXSpectrum::updateDisplayFromBuffer(unsigned char*, unsigned long)+0x1ac>
                    _pDisplay->setPixel(x, y, 1, pixColour);
   31868:	e59d100c 	ldr	r1, [sp, #12]
   3186c:	e5902000 	ldr	r2, [r0]
   31870:	e58d1000 	str	r1, [sp]
   31874:	e3a03001 	mov	r3, #1
   31878:	e592a00c 	ldr	sl, [r2, #12]
   3187c:	eaffffee 	b	3183c <McZXSpectrum::updateDisplayFromBuffer(unsigned char*, unsigned long)+0x1c4>
        for (uint32_t bufIdx = 0; bufIdx < ZXSPECTRUM_PIXEL_RAM_SIZE; bufIdx++)
   31880:	e59d3018 	ldr	r3, [sp, #24]
   31884:	e2877001 	add	r7, r7, #1
   31888:	e1530008 	cmp	r3, r8
   3188c:	159d3014 	ldrne	r3, [sp, #20]
   31890:	15d34655 	ldrbne	r4, [r3, #1621]	; 0x655
   31894:	1affffb4 	bne	3176c <McZXSpectrum::updateDisplayFromBuffer(unsigned char*, unsigned long)+0xf4>
   31898:	e59d1020 	ldr	r1, [sp, #32]
   3189c:	e59d403c 	ldr	r4, [sp, #60]	; 0x3c
   318a0:	e2810b06 	add	r0, r1, #6144	; 0x1800
   318a4:	e59dc030 	ldr	ip, [sp, #48]	; 0x30
   318a8:	e2803004 	add	r3, r0, #4
   318ac:	e2842019 	add	r2, r4, #25
   318b0:	e15c0003 	cmp	ip, r3
   318b4:	31500002 	cmpcc	r0, r2
   318b8:	3a0000d3 	bcc	31c0c <McZXSpectrum::updateDisplayFromBuffer(unsigned char*, unsigned long)+0x594>
            _screenCache[colrIdx] = pScrnBuffer[colrIdx];
   318bc:	e2812a01 	add	r2, r1, #4096	; 0x1000
   318c0:	e5d21800 	ldrb	r1, [r2, #2048]	; 0x800
   318c4:	e59de014 	ldr	lr, [sp, #20]
   318c8:	e28b3dd9 	add	r3, fp, #13888	; 0x3640
   318cc:	e5ce1355 	strb	r1, [lr, #853]	; 0x355
   318d0:	e5d21801 	ldrb	r1, [r2, #2049]	; 0x801
   318d4:	e2833014 	add	r3, r3, #20
   318d8:	e5ce1356 	strb	r1, [lr, #854]	; 0x356
   318dc:	e5d2c802 	ldrb	ip, [r2, #2050]	; 0x802
   318e0:	e2841018 	add	r1, r4, #24
   318e4:	e2800003 	add	r0, r0, #3
   318e8:	e5cec357 	strb	ip, [lr, #855]	; 0x357
   318ec:	e490c004 	ldr	ip, [r0], #4
   318f0:	e481c004 	str	ip, [r1], #4
   318f4:	e1530001 	cmp	r3, r1
   318f8:	1afffffb 	bne	318ec <McZXSpectrum::updateDisplayFromBuffer(unsigned char*, unsigned long)+0x274>
   318fc:	e5d23aff 	ldrb	r3, [r2, #2815]	; 0xaff
   31900:	e59d2014 	ldr	r2, [sp, #20]
   31904:	e5c23654 	strb	r3, [r2, #1620]	; 0x654
        _screenCacheValid = true;
   31908:	e3a03001 	mov	r3, #1
   3190c:	e59d2014 	ldr	r2, [sp, #20]
   31910:	e5c23655 	strb	r3, [r2, #1621]	; 0x655
}
   31914:	e28dd06c 	add	sp, sp, #108	; 0x6c
   31918:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
        _pDisplay->getFramebuffer(fbi);
   3191c:	e5932000 	ldr	r2, [r3]
   31920:	e1a00003 	mov	r0, r3
   31924:	e28d1048 	add	r1, sp, #72	; 0x48
   31928:	e5923010 	ldr	r3, [r2, #16]
   3192c:	e12fff33 	blx	r3
        int pitch = fbi.pitch;
   31930:	e59d9054 	ldr	r9, [sp, #84]	; 0x54
        int SPECTRUM_CELL_STRIDE = _activeDescriptorTable.displayPixelsX / _activeDescriptorTable.displayCellX;
   31934:	e5973010 	ldr	r3, [r7, #16]
        int pitchDiv4 = fbi.pitch / 4;
   31938:	e3590000 	cmp	r9, #0
        int SPECTRUM_CELL_STRIDE = _activeDescriptorTable.displayPixelsX / _activeDescriptorTable.displayCellX;
   3193c:	e597b018 	ldr	fp, [r7, #24]
        int pitchDiv4 = fbi.pitch / 4;
   31940:	e2895003 	add	r5, r9, #3
   31944:	a1a05009 	movge	r5, r9
        int SPECTRUM_CELL_STRIDE = _activeDescriptorTable.displayPixelsX / _activeDescriptorTable.displayCellX;
   31948:	e1a00003 	mov	r0, r3
   3194c:	e1a0100b 	mov	r1, fp
   31950:	e1a08003 	mov	r8, r3
   31954:	e58d3028 	str	r3, [sp, #40]	; 0x28
        int pitch = fbi.pitch;
   31958:	e58d9040 	str	r9, [sp, #64]	; 0x40
        int SPECTRUM_CELL_STRIDE = _activeDescriptorTable.displayPixelsX / _activeDescriptorTable.displayCellX;
   3195c:	eb007459 	bl	4eac8 <__divsi3>
        int pitchDiv4 = fbi.pitch / 4;
   31960:	e1a06145 	asr	r6, r5, #2
        int SPECTRUM_LINE_STRIDE = _activeDescriptorTable.displayCellY * _activeDescriptorTable.displayPixelsX / _activeDescriptorTable.displayCellX;
   31964:	e597501c 	ldr	r5, [r7, #28]
        int SPECTRUM_CELL_STRIDE = _activeDescriptorTable.displayPixelsX / _activeDescriptorTable.displayCellX;
   31968:	e58d0044 	str	r0, [sp, #68]	; 0x44
        int SPECTRUM_LINE_STRIDE = _activeDescriptorTable.displayCellY * _activeDescriptorTable.displayPixelsX / _activeDescriptorTable.displayCellX;
   3196c:	e1a0100b 	mov	r1, fp
   31970:	e0000895 	mul	r0, r5, r8
   31974:	eb007453 	bl	4eac8 <__divsi3>
        for (int cellY = 0; cellY < _activeDescriptorTable.displayPixelsY/_activeDescriptorTable.displayCellY; cellY++)
   31978:	e5978014 	ldr	r8, [r7, #20]
        int SPECTRUM_LINE_STRIDE = _activeDescriptorTable.displayCellY * _activeDescriptorTable.displayPixelsX / _activeDescriptorTable.displayCellX;
   3197c:	e58d001c 	str	r0, [sp, #28]
        for (int cellY = 0; cellY < _activeDescriptorTable.displayPixelsY/_activeDescriptorTable.displayCellY; cellY++)
   31980:	e1a01005 	mov	r1, r5
   31984:	e1a00008 	mov	r0, r8
   31988:	eb00744e 	bl	4eac8 <__divsi3>
        int scaleX = _activeDescriptorTable.pixelScaleX;
   3198c:	e5972020 	ldr	r2, [r7, #32]
        for (int cellY = 0; cellY < _activeDescriptorTable.displayPixelsY/_activeDescriptorTable.displayCellY; cellY++)
   31990:	e3500000 	cmp	r0, #0
        int SPECTRUM_LINE_STRIDE = _activeDescriptorTable.displayCellY * _activeDescriptorTable.displayPixelsX / _activeDescriptorTable.displayCellX;
   31994:	e1a0a005 	mov	sl, r5
        uint8_t* pFB = fbi.pFBWindow;
   31998:	e59d3058 	ldr	r3, [sp, #88]	; 0x58
        int scaleX = _activeDescriptorTable.pixelScaleX;
   3199c:	e58d202c 	str	r2, [sp, #44]	; 0x2c
        int scaleY = _activeDescriptorTable.pixelScaleY;
   319a0:	e5975024 	ldr	r5, [r7, #36]	; 0x24
        for (int cellY = 0; cellY < _activeDescriptorTable.displayPixelsY/_activeDescriptorTable.displayCellY; cellY++)
   319a4:	daffff3e 	ble	316a4 <McZXSpectrum::updateDisplayFromBuffer(unsigned char*, unsigned long)+0x2c>
   319a8:	e2833020 	add	r3, r3, #32
   319ac:	e58d303c 	str	r3, [sp, #60]	; 0x3c
   319b0:	e59d3020 	ldr	r3, [sp, #32]
   319b4:	e58d4038 	str	r4, [sp, #56]	; 0x38
   319b8:	e58d700c 	str	r7, [sp, #12]
        int colrIdx = ZXSPECTRUM_PIXEL_RAM_SIZE;
   319bc:	e3a04b06 	mov	r4, #6144	; 0x1800
   319c0:	e1a07003 	mov	r7, r3
   319c4:	e0020599 	mul	r2, r9, r5
   319c8:	e58d2018 	str	r2, [sp, #24]
   319cc:	e2632001 	rsb	r2, r3, #1
                                pBufL += pitchDiv4;
   319d0:	e1a06106 	lsl	r6, r6, #2
   319d4:	e58d2034 	str	r2, [sp, #52]	; 0x34
            int pfbIdx = cellY * _activeDescriptorTable.displayCellY * scaleY * pitch;
   319d8:	e59d9038 	ldr	r9, [sp, #56]	; 0x38
   319dc:	e59d3040 	ldr	r3, [sp, #64]	; 0x40
   319e0:	e002099a 	mul	r2, sl, r9
   319e4:	e0020295 	mul	r2, r5, r2
   319e8:	e0030293 	mul	r3, r3, r2
            for (int cellX = 0; cellX < _activeDescriptorTable.displayPixelsX/_activeDescriptorTable.displayCellX; cellX++)
   319ec:	e1a0100b 	mov	r1, fp
   319f0:	e59d0028 	ldr	r0, [sp, #40]	; 0x28
            int pfbIdx = cellY * _activeDescriptorTable.displayCellY * scaleY * pitch;
   319f4:	e58d3024 	str	r3, [sp, #36]	; 0x24
            for (int cellX = 0; cellX < _activeDescriptorTable.displayPixelsX/_activeDescriptorTable.displayCellX; cellX++)
   319f8:	eb007432 	bl	4eac8 <__divsi3>
   319fc:	e3500000 	cmp	r0, #0
   31a00:	da00006f 	ble	31bc4 <McZXSpectrum::updateDisplayFromBuffer(unsigned char*, unsigned long)+0x54c>
   31a04:	e3a03000 	mov	r3, #0
   31a08:	e58d3020 	str	r3, [sp, #32]
                int pixByteIdx = cellX + (cellY & 0x07) * SPECTRUM_CELL_STRIDE + (cellY & 0x18) * SPECTRUM_LINE_STRIDE;
   31a0c:	e59d301c 	ldr	r3, [sp, #28]
   31a10:	e2092018 	and	r2, r9, #24
   31a14:	e0020293 	mul	r2, r3, r2
   31a18:	e59d3044 	ldr	r3, [sp, #68]	; 0x44
   31a1c:	e2091007 	and	r1, r9, #7
   31a20:	e0232193 	mla	r3, r3, r1, r2
   31a24:	e2842d6d 	add	r2, r4, #6976	; 0x1b40
   31a28:	e58d3030 	str	r3, [sp, #48]	; 0x30
   31a2c:	e59d300c 	ldr	r3, [sp, #12]
   31a30:	e2822015 	add	r2, r2, #21
   31a34:	e2444001 	sub	r4, r4, #1
   31a38:	e0833002 	add	r3, r3, r2
   31a3c:	e58d3010 	str	r3, [sp, #16]
   31a40:	e0873004 	add	r3, r7, r4
   31a44:	e58d3014 	str	r3, [sp, #20]
   31a48:	e1a0300a 	mov	r3, sl
   31a4c:	e59d4028 	ldr	r4, [sp, #40]	; 0x28
                int cellColourData = pScrnBuffer[colrIdx];
   31a50:	e59d2014 	ldr	r2, [sp, #20]
                for (int cellPixY = 0; cellPixY < _activeDescriptorTable.displayCellY; cellPixY++)
   31a54:	e3530000 	cmp	r3, #0
                int cellColourData = pScrnBuffer[colrIdx];
   31a58:	e5f21001 	ldrb	r1, [r2, #1]!
                DISPLAY_FX_COLOUR paperColour = colourLUT[((cellColourData & 0x38) >> 3) | ((cellColourData & 0x40) >> 3)];
   31a5c:	e1a001c1 	asr	r0, r1, #3
                DISPLAY_FX_COLOUR inkColour = colourLUT[(cellColourData & 0x07) | ((cellColourData & 0x40) >> 3)];
   31a60:	e200c008 	and	ip, r0, #8
                int cellColourData = pScrnBuffer[colrIdx];
   31a64:	e58d2014 	str	r2, [sp, #20]
                DISPLAY_FX_COLOUR inkColour = colourLUT[(cellColourData & 0x07) | ((cellColourData & 0x40) >> 3)];
   31a68:	e2012007 	and	r2, r1, #7
   31a6c:	e182200c 	orr	r2, r2, ip
                DISPLAY_FX_COLOUR paperColour = colourLUT[((cellColourData & 0x38) >> 3) | ((cellColourData & 0x40) >> 3)];
   31a70:	e59fc1c0 	ldr	ip, [pc, #448]	; 31c38 <McZXSpectrum::updateDisplayFromBuffer(unsigned char*, unsigned long)+0x5c0>
   31a74:	e200000f 	and	r0, r0, #15
   31a78:	e08c0000 	add	r0, ip, r0
                DISPLAY_FX_COLOUR inkColour = colourLUT[(cellColourData & 0x07) | ((cellColourData & 0x40) >> 3)];
   31a7c:	e08c2002 	add	r2, ip, r2
                DISPLAY_FX_COLOUR paperColour = colourLUT[((cellColourData & 0x38) >> 3) | ((cellColourData & 0x40) >> 3)];
   31a80:	e1d08edc 	ldrsb	r8, [r0, #236]	; 0xec
                DISPLAY_FX_COLOUR inkColour = colourLUT[(cellColourData & 0x07) | ((cellColourData & 0x40) >> 3)];
   31a84:	e1d29edc 	ldrsb	r9, [r2, #236]	; 0xec
   31a88:	e59d0020 	ldr	r0, [sp, #32]
   31a8c:	e59d2030 	ldr	r2, [sp, #48]	; 0x30
   31a90:	e082a000 	add	sl, r2, r0
                for (int cellPixY = 0; cellPixY < _activeDescriptorTable.displayCellY; cellPixY++)
   31a94:	da000031 	ble	31b60 <McZXSpectrum::updateDisplayFromBuffer(unsigned char*, unsigned long)+0x4e8>
   31a98:	e3a0b000 	mov	fp, #0
   31a9c:	e59d203c 	ldr	r2, [sp, #60]	; 0x3c
   31aa0:	e59d0024 	ldr	r0, [sp, #36]	; 0x24
   31aa4:	e082e000 	add	lr, r2, r0
                    if ((_screenCache[colrIdx] != pScrnBuffer[colrIdx]) || (_screenCache[pixByteIdx] != pScrnBuffer[pixByteIdx]))
   31aa8:	e59d2010 	ldr	r2, [sp, #16]
   31aac:	e087400a 	add	r4, r7, sl
   31ab0:	e5d22000 	ldrb	r2, [r2]
   31ab4:	e1520001 	cmp	r2, r1
   31ab8:	0a00004b 	beq	31bec <McZXSpectrum::updateDisplayFromBuffer(unsigned char*, unsigned long)+0x574>
   31abc:	e7d7200a 	ldrb	r2, [r7, sl]
                        int pixMask = 0x80;
   31ac0:	e3a0c080 	mov	ip, #128	; 0x80
   31ac4:	e24e0020 	sub	r0, lr, #32
                            int pixColour = pixVal ? inkColour : paperColour;
   31ac8:	e112000c 	tst	r2, ip
   31acc:	01a03008 	moveq	r3, r8
   31ad0:	11a03009 	movne	r3, r9
                            uint32_t pixColourL = (pixColour << 24) + (pixColour << 16) + (pixColour << 8) + pixColour;
   31ad4:	e1a02803 	lsl	r2, r3, #16
   31ad8:	e0822c03 	add	r2, r2, r3, lsl #24
   31adc:	e0822403 	add	r2, r2, r3, lsl #8
                            for (int iy = 0; iy < scaleY; iy++)
   31ae0:	e3550000 	cmp	r5, #0
                            uint32_t pixColourL = (pixColour << 24) + (pixColour << 16) + (pixColour << 8) + pixColour;
   31ae4:	e0822003 	add	r2, r2, r3
                            uint32_t* pBufL = pBufCell + pixIdx;
   31ae8:	e1a01000 	mov	r1, r0
                            for (int iy = 0; iy < scaleY; iy++)
   31aec:	da000004 	ble	31b04 <McZXSpectrum::updateDisplayFromBuffer(unsigned char*, unsigned long)+0x48c>
   31af0:	e3a03000 	mov	r3, #0
   31af4:	e2833001 	add	r3, r3, #1
   31af8:	e1550003 	cmp	r5, r3
                                *pBufL = pixColourL;
   31afc:	e6812006 	str	r2, [r1], r6
                            for (int iy = 0; iy < scaleY; iy++)
   31b00:	1afffffb 	bne	31af4 <McZXSpectrum::updateDisplayFromBuffer(unsigned char*, unsigned long)+0x47c>
   31b04:	e2800004 	add	r0, r0, #4
                        for (int pixIdx = 0; pixIdx < 8; pixIdx++)
   31b08:	e15e0000 	cmp	lr, r0
                            pixMask = pixMask >> 1;
   31b0c:	e1a0c0cc 	asr	ip, ip, #1
                        for (int pixIdx = 0; pixIdx < 8; pixIdx++)
   31b10:	15d42000 	ldrbne	r2, [r4]
   31b14:	1affffeb 	bne	31ac8 <McZXSpectrum::updateDisplayFromBuffer(unsigned char*, unsigned long)+0x450>
                        pixByteIdx += SPECTRUM_LINE_STRIDE;
   31b18:	e59d301c 	ldr	r3, [sp, #28]
                        _screenCache[pixByteIdx] = pScrnBuffer[pixByteIdx];
   31b1c:	e59d000c 	ldr	r0, [sp, #12]
                        pixByteIdx += SPECTRUM_LINE_STRIDE;
   31b20:	e08aa003 	add	sl, sl, r3
                        _screenCache[pixByteIdx] = pScrnBuffer[pixByteIdx];
   31b24:	e080300a 	add	r3, r0, sl
   31b28:	e7d7200a 	ldrb	r2, [r7, sl]
   31b2c:	e2833d6d 	add	r3, r3, #6976	; 0x1b40
   31b30:	e5c32015 	strb	r2, [r3, #21]
   31b34:	e59d3014 	ldr	r3, [sp, #20]
   31b38:	e5d31000 	ldrb	r1, [r3]
   31b3c:	e590301c 	ldr	r3, [r0, #28]
                for (int cellPixY = 0; cellPixY < _activeDescriptorTable.displayCellY; cellPixY++)
   31b40:	e28bb001 	add	fp, fp, #1
   31b44:	e59d2018 	ldr	r2, [sp, #24]
   31b48:	e15b0003 	cmp	fp, r3
   31b4c:	e08ee002 	add	lr, lr, r2
   31b50:	baffffd4 	blt	31aa8 <McZXSpectrum::updateDisplayFromBuffer(unsigned char*, unsigned long)+0x430>
   31b54:	e59d200c 	ldr	r2, [sp, #12]
   31b58:	e5924010 	ldr	r4, [r2, #16]
   31b5c:	e592b018 	ldr	fp, [r2, #24]
   31b60:	e58d3028 	str	r3, [sp, #40]	; 0x28
                _screenCache[colrIdx] = pScrnBuffer[colrIdx];
   31b64:	e59d3010 	ldr	r3, [sp, #16]
            for (int cellX = 0; cellX < _activeDescriptorTable.displayPixelsX/_activeDescriptorTable.displayCellX; cellX++)
   31b68:	e1a00004 	mov	r0, r4
                _screenCache[colrIdx] = pScrnBuffer[colrIdx];
   31b6c:	e4c31001 	strb	r1, [r3], #1
            for (int cellX = 0; cellX < _activeDescriptorTable.displayPixelsX/_activeDescriptorTable.displayCellX; cellX++)
   31b70:	e1a0100b 	mov	r1, fp
                _screenCache[colrIdx] = pScrnBuffer[colrIdx];
   31b74:	e58d3010 	str	r3, [sp, #16]
            for (int cellX = 0; cellX < _activeDescriptorTable.displayPixelsX/_activeDescriptorTable.displayCellX; cellX++)
   31b78:	eb0073d2 	bl	4eac8 <__divsi3>
   31b7c:	e59d3020 	ldr	r3, [sp, #32]
                pfbIdx += _activeDescriptorTable.displayCellX * scaleX;
   31b80:	e59d2024 	ldr	r2, [sp, #36]	; 0x24
            for (int cellX = 0; cellX < _activeDescriptorTable.displayPixelsX/_activeDescriptorTable.displayCellX; cellX++)
   31b84:	e2833001 	add	r3, r3, #1
   31b88:	e58d3020 	str	r3, [sp, #32]
   31b8c:	e1500003 	cmp	r0, r3
                pfbIdx += _activeDescriptorTable.displayCellX * scaleX;
   31b90:	e59d302c 	ldr	r3, [sp, #44]	; 0x2c
   31b94:	e023239b 	mla	r3, fp, r3, r2
   31b98:	e59d2014 	ldr	r2, [sp, #20]
   31b9c:	e58d3024 	str	r3, [sp, #36]	; 0x24
   31ba0:	e59d3034 	ldr	r3, [sp, #52]	; 0x34
   31ba4:	e0832002 	add	r2, r3, r2
            for (int cellX = 0; cellX < _activeDescriptorTable.displayPixelsX/_activeDescriptorTable.displayCellX; cellX++)
   31ba8:	e59d3028 	ldr	r3, [sp, #40]	; 0x28
   31bac:	caffffa7 	bgt	31a50 <McZXSpectrum::updateDisplayFromBuffer(unsigned char*, unsigned long)+0x3d8>
   31bb0:	e58d4028 	str	r4, [sp, #40]	; 0x28
   31bb4:	e1a04002 	mov	r4, r2
   31bb8:	e1a0a003 	mov	sl, r3
   31bbc:	e59d300c 	ldr	r3, [sp, #12]
   31bc0:	e5938014 	ldr	r8, [r3, #20]
        for (int cellY = 0; cellY < _activeDescriptorTable.displayPixelsY/_activeDescriptorTable.displayCellY; cellY++)
   31bc4:	e1a0100a 	mov	r1, sl
   31bc8:	e1a00008 	mov	r0, r8
   31bcc:	eb0073bd 	bl	4eac8 <__divsi3>
   31bd0:	e59d3038 	ldr	r3, [sp, #56]	; 0x38
   31bd4:	e2833001 	add	r3, r3, #1
   31bd8:	e1500003 	cmp	r0, r3
   31bdc:	e58d3038 	str	r3, [sp, #56]	; 0x38
   31be0:	caffff7c 	bgt	319d8 <McZXSpectrum::updateDisplayFromBuffer(unsigned char*, unsigned long)+0x360>
}
   31be4:	e28dd06c 	add	sp, sp, #108	; 0x6c
   31be8:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
                    if ((_screenCache[colrIdx] != pScrnBuffer[colrIdx]) || (_screenCache[pixByteIdx] != pScrnBuffer[pixByteIdx]))
   31bec:	e59d200c 	ldr	r2, [sp, #12]
   31bf0:	e082200a 	add	r2, r2, sl
   31bf4:	e2822d6d 	add	r2, r2, #6976	; 0x1b40
   31bf8:	e5d20015 	ldrb	r0, [r2, #21]
   31bfc:	e7d7200a 	ldrb	r2, [r7, sl]
   31c00:	e1500002 	cmp	r0, r2
   31c04:	0affffcd 	beq	31b40 <McZXSpectrum::updateDisplayFromBuffer(unsigned char*, unsigned long)+0x4c8>
   31c08:	eaffffac 	b	31ac0 <McZXSpectrum::updateDisplayFromBuffer(unsigned char*, unsigned long)+0x448>
   31c0c:	e59d002c 	ldr	r0, [sp, #44]	; 0x2c
   31c10:	e1cd23d4 	ldrd	r2, [sp, #52]	; 0x34
            _screenCache[colrIdx] = pScrnBuffer[colrIdx];
   31c14:	e5f31001 	ldrb	r1, [r3, #1]!
        for (uint32_t colrIdx = ZXSPECTRUM_PIXEL_RAM_SIZE; colrIdx < ZXSPECTRUM_DISP_RAM_SIZE; colrIdx++)
   31c18:	e1500003 	cmp	r0, r3
            _screenCache[colrIdx] = pScrnBuffer[colrIdx];
   31c1c:	e5e21001 	strb	r1, [r2, #1]!
        for (uint32_t colrIdx = ZXSPECTRUM_PIXEL_RAM_SIZE; colrIdx < ZXSPECTRUM_DISP_RAM_SIZE; colrIdx++)
   31c20:	1afffffb 	bne	31c14 <McZXSpectrum::updateDisplayFromBuffer(unsigned char*, unsigned long)+0x59c>
   31c24:	eaffff37 	b	31908 <McZXSpectrum::updateDisplayFromBuffer(unsigned char*, unsigned long)+0x290>
   31c28:	e2873a03 	add	r3, r7, #12288	; 0x3000
   31c2c:	e58d3014 	str	r3, [sp, #20]
   31c30:	e5d34655 	ldrb	r4, [r3, #1621]	; 0x655
   31c34:	eafffeba 	b	31724 <McZXSpectrum::updateDisplayFromBuffer(unsigned char*, unsigned long)+0xac>
   31c38:	000550ac 	.word	0x000550ac

00031c3c <McZXSpectrum::service()>:
{
   31c3c:	e92d4010 	push	{r4, lr}
    if (_screenBufferValid)
   31c40:	e2804a01 	add	r4, r0, #4096	; 0x1000
   31c44:	e5d43b54 	ldrb	r3, [r4, #2900]	; 0xb54
   31c48:	e3530000 	cmp	r3, #0
   31c4c:	08bd8010 	popeq	{r4, pc}
        updateDisplayFromBuffer(_screenBuffer, ZXSPECTRUM_DISP_RAM_SIZE);
   31c50:	e2801054 	add	r1, r0, #84	; 0x54
   31c54:	e3a02c1b 	mov	r2, #6912	; 0x1b00
   31c58:	ebfffe86 	bl	31678 <McZXSpectrum::updateDisplayFromBuffer(unsigned char*, unsigned long)>
        _screenBufferValid = false;
   31c5c:	e3a03000 	mov	r3, #0
   31c60:	e5c43b54 	strb	r3, [r4, #2900]	; 0xb54
}
   31c64:	e8bd8010 	pop	{r4, pc}

00031c68 <McZXSpectrum::displayRefreshFromMirrorHw()>:
{
   31c68:	e92d4070 	push	{r4, r5, r6, lr}
    if (HwManager::blockRead(ZXSPECTRUM_DISP_RAM_ADDR, _screenBuffer, ZXSPECTRUM_DISP_RAM_SIZE, 1, 0, true) == BR_OK)
   31c6c:	e3a02000 	mov	r2, #0
   31c70:	e3a04001 	mov	r4, #1
{
   31c74:	e24dd008 	sub	sp, sp, #8
    if (HwManager::blockRead(ZXSPECTRUM_DISP_RAM_ADDR, _screenBuffer, ZXSPECTRUM_DISP_RAM_SIZE, 1, 0, true) == BR_OK)
   31c78:	e2806054 	add	r6, r0, #84	; 0x54
   31c7c:	e58d2000 	str	r2, [sp]
{
   31c80:	e1a05000 	mov	r5, r0
    if (HwManager::blockRead(ZXSPECTRUM_DISP_RAM_ADDR, _screenBuffer, ZXSPECTRUM_DISP_RAM_SIZE, 1, 0, true) == BR_OK)
   31c84:	e1a01006 	mov	r1, r6
   31c88:	e58d4004 	str	r4, [sp, #4]
   31c8c:	e1a03004 	mov	r3, r4
   31c90:	e3a02c1b 	mov	r2, #6912	; 0x1b00
   31c94:	e3a00901 	mov	r0, #16384	; 0x4000
   31c98:	ebffe9e4 	bl	2c430 <HwManager::blockRead(unsigned long, unsigned char*, unsigned long, bool, bool, bool)>
   31c9c:	e3500000 	cmp	r0, #0
   31ca0:	0a000001 	beq	31cac <McZXSpectrum::displayRefreshFromMirrorHw()+0x44>
}
   31ca4:	e28dd008 	add	sp, sp, #8
   31ca8:	e8bd8070 	pop	{r4, r5, r6, pc}
        updateDisplayFromBuffer(_screenBuffer, ZXSPECTRUM_DISP_RAM_SIZE);
   31cac:	e1a01006 	mov	r1, r6
   31cb0:	e1a00005 	mov	r0, r5
   31cb4:	e3a02c1b 	mov	r2, #6912	; 0x1b00
        _screenBufferValid = true;
   31cb8:	e2853a01 	add	r3, r5, #4096	; 0x1000
   31cbc:	e5c34b54 	strb	r4, [r3, #2900]	; 0xb54
}
   31cc0:	e28dd008 	add	sp, sp, #8
   31cc4:	e8bd4070 	pop	{r4, r5, r6, lr}
        updateDisplayFromBuffer(_screenBuffer, ZXSPECTRUM_DISP_RAM_SIZE);
   31cc8:	eafffe6a 	b	31678 <McZXSpectrum::updateDisplayFromBuffer(unsigned char*, unsigned long)>

00031ccc <McZXSpectrum::getKeyBitmap(int const*, int, unsigned char const*)>:
{
   31ccc:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    uint32_t retVal = 0xff;
   31cd0:	e3a060ff 	mov	r6, #255	; 0xff
   31cd4:	e2400004 	sub	r0, r0, #4
   31cd8:	e2827006 	add	r7, r2, #6
   31cdc:	e0805101 	add	r5, r0, r1, lsl #2
        for (int j = 0; j < keyCodesLen; j++)
   31ce0:	e3510000 	cmp	r1, #0
   31ce4:	da000008 	ble	31d0c <McZXSpectrum::getKeyBitmap(int const*, int, unsigned char const*)+0x40>
   31ce8:	e1a03000 	mov	r3, r0
        int bitMask = 0x01;
   31cec:	e3a0c001 	mov	ip, #1
            if (currentKeyPresses[i] == keyCodes[j])
   31cf0:	e5d24000 	ldrb	r4, [r2]
   31cf4:	e5b3e004 	ldr	lr, [r3, #4]!
   31cf8:	e154000e 	cmp	r4, lr
                retVal &= ~bitMask;
   31cfc:	01c6600c 	biceq	r6, r6, ip
        for (int j = 0; j < keyCodesLen; j++)
   31d00:	e1550003 	cmp	r5, r3
            bitMask = bitMask << 1;
   31d04:	e1a0c08c 	lsl	ip, ip, #1
        for (int j = 0; j < keyCodesLen; j++)
   31d08:	1afffff9 	bne	31cf4 <McZXSpectrum::getKeyBitmap(int const*, int, unsigned char const*)+0x28>
   31d0c:	e2822001 	add	r2, r2, #1
    for (int i = 0; i < MAX_KEYS; i++)
   31d10:	e1520007 	cmp	r2, r7
   31d14:	1afffff1 	bne	31ce0 <McZXSpectrum::getKeyBitmap(int const*, int, unsigned char const*)+0x14>
}
   31d18:	e1a00006 	mov	r0, r6
   31d1c:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}

00031d20 <StepValidator::mem_write(int, unsigned short, unsigned char)>:
    return dataVal;
}

void StepValidator::mem_write([[maybe_unused]] int param, [[maybe_unused]] ushort address, [[maybe_unused]] byte data)
{
    if (!_pThisInstance)
   31d20:	e59f3060 	ldr	r3, [pc, #96]	; 31d88 <StepValidator::mem_write(int, unsigned short, unsigned char)+0x68>
   31d24:	e5930000 	ldr	r0, [r3]
   31d28:	e3500000 	cmp	r0, #0
   31d2c:	012fff1e 	bxeq	lr
{
   31d30:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
        return;
    if (_stepCycleCount < MAX_STEP_CYCLES_FOR_INSTR)
   31d34:	e5930004 	ldr	r0, [r3, #4]
{
   31d38:	e24dd00c 	sub	sp, sp, #12
    if (_stepCycleCount < MAX_STEP_CYCLES_FOR_INSTR)
   31d3c:	e3500009 	cmp	r0, #9
   31d40:	ca000007 	bgt	31d64 <StepValidator::mem_write(int, unsigned short, unsigned char)+0x44>
    {
        _stepCycles[_stepCycleCount].addr = address;
        _stepCycles[_stepCycleCount].data = data;
        _stepCycles[_stepCycleCount].flags = BR_CTRL_BUS_WR_MASK | BR_CTRL_BUS_MREQ_MASK;
   31d44:	e3a0e006 	mov	lr, #6
        _stepCycles[_stepCycleCount].addr = address;
   31d48:	e080c080 	add	ip, r0, r0, lsl #1
   31d4c:	e083c10c 	add	ip, r3, ip, lsl #2
        _stepCycleCount++;
   31d50:	e2800001 	add	r0, r0, #1
        _stepCycles[_stepCycleCount].addr = address;
   31d54:	e58c1008 	str	r1, [ip, #8]
        _stepCycles[_stepCycleCount].data = data;
   31d58:	e58c200c 	str	r2, [ip, #12]
        _stepCycleCount++;
   31d5c:	e5830004 	str	r0, [r3, #4]
        _stepCycles[_stepCycleCount].flags = BR_CTRL_BUS_WR_MASK | BR_CTRL_BUS_MREQ_MASK;
   31d60:	e58ce010 	str	lr, [ip, #16]
   31d64:	e1a00001 	mov	r0, r1
    }
#ifdef STEP_VAL_WITHOUT_HW_MANAGER
    if (_pThisInstance->_pValidatorMemory && (address < _pThisInstance->_validatorMemoryLen))
        _pThisInstance->_pValidatorMemory[address] = data;
#else
    uint32_t retVal = 0;
   31d68:	e3a01000 	mov	r1, #0
   31d6c:	e28d3008 	add	r3, sp, #8
   31d70:	e5231004 	str	r1, [r3, #-4]!
    HwManager::validatorHandleAccess(address, data, BR_CTRL_BUS_MREQ_MASK | BR_CTRL_BUS_WR_MASK, retVal);
   31d74:	e1a01002 	mov	r1, r2
   31d78:	e3a02006 	mov	r2, #6
   31d7c:	ebffebe9 	bl	2cd28 <HwManager::validatorHandleAccess(unsigned long, unsigned long, unsigned long, unsigned long&)>
#endif
}
   31d80:	e28dd00c 	add	sp, sp, #12
   31d84:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
   31d88:	00084134 	.word	0x00084134

00031d8c <StepValidator::io_write(int, unsigned short, unsigned char)>:
    return dataVal;
}

void StepValidator::io_write([[maybe_unused]] int param, [[maybe_unused]] ushort address, [[maybe_unused]] byte data)
{
    if (!_pThisInstance)
   31d8c:	e59f3060 	ldr	r3, [pc, #96]	; 31df4 <StepValidator::io_write(int, unsigned short, unsigned char)+0x68>
   31d90:	e5930000 	ldr	r0, [r3]
   31d94:	e3500000 	cmp	r0, #0
   31d98:	012fff1e 	bxeq	lr
{
   31d9c:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
        return;
    if (_stepCycleCount < MAX_STEP_CYCLES_FOR_INSTR)
   31da0:	e5930004 	ldr	r0, [r3, #4]
{
   31da4:	e24dd00c 	sub	sp, sp, #12
    if (_stepCycleCount < MAX_STEP_CYCLES_FOR_INSTR)
   31da8:	e3500009 	cmp	r0, #9
   31dac:	ca000007 	bgt	31dd0 <StepValidator::io_write(int, unsigned short, unsigned char)+0x44>
    {
        _stepCycles[_stepCycleCount].addr = address;
        _stepCycles[_stepCycleCount].data = data;
        _stepCycles[_stepCycleCount].flags = BR_CTRL_BUS_WR_MASK | BR_CTRL_BUS_IORQ_MASK;
   31db0:	e3a0e00a 	mov	lr, #10
        _stepCycles[_stepCycleCount].addr = address;
   31db4:	e080c080 	add	ip, r0, r0, lsl #1
   31db8:	e083c10c 	add	ip, r3, ip, lsl #2
        _stepCycleCount++;
   31dbc:	e2800001 	add	r0, r0, #1
        _stepCycles[_stepCycleCount].addr = address;
   31dc0:	e58c1008 	str	r1, [ip, #8]
        _stepCycles[_stepCycleCount].data = data;
   31dc4:	e58c200c 	str	r2, [ip, #12]
        _stepCycleCount++;
   31dc8:	e5830004 	str	r0, [r3, #4]
        _stepCycles[_stepCycleCount].flags = BR_CTRL_BUS_WR_MASK | BR_CTRL_BUS_IORQ_MASK;
   31dcc:	e58ce010 	str	lr, [ip, #16]
   31dd0:	e1a00001 	mov	r0, r1
    }
#ifndef STEP_VAL_WITHOUT_HW_MANAGER
    uint32_t retVal = 0;
   31dd4:	e3a01000 	mov	r1, #0
   31dd8:	e28d3008 	add	r3, sp, #8
   31ddc:	e5231004 	str	r1, [r3, #-4]!
    HwManager::validatorHandleAccess(address, data, BR_CTRL_BUS_IORQ_MASK | BR_CTRL_BUS_WR_MASK, retVal);
   31de0:	e1a01002 	mov	r1, r2
   31de4:	e3a0200a 	mov	r2, #10
   31de8:	ebffebce 	bl	2cd28 <HwManager::validatorHandleAccess(unsigned long, unsigned long, unsigned long, unsigned long&)>
#endif
}
   31dec:	e28dd00c 	add	sp, sp, #12
   31df0:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
   31df4:	00084134 	.word	0x00084134

00031df8 <StepValidator::mem_read(int, unsigned short)>:
{
   31df8:	e92d4030 	push	{r4, r5, lr}
    if (!_pThisInstance)
   31dfc:	e59f407c 	ldr	r4, [pc, #124]	; 31e80 <StepValidator::mem_read(int, unsigned short)+0x88>
{
   31e00:	e24dd00c 	sub	sp, sp, #12
    if (!_pThisInstance)
   31e04:	e5940000 	ldr	r0, [r4]
   31e08:	e3500000 	cmp	r0, #0
   31e0c:	0a00000b 	beq	31e40 <StepValidator::mem_read(int, unsigned short)+0x48>
   31e10:	e1a05001 	mov	r5, r1
    uint32_t dataVal = 0; 
   31e14:	e3a01000 	mov	r1, #0
   31e18:	e28d3008 	add	r3, sp, #8
   31e1c:	e5231004 	str	r1, [r3, #-4]!
    HwManager::validatorHandleAccess(address, 0, BR_CTRL_BUS_MREQ_MASK | BR_CTRL_BUS_RD_MASK, dataVal);
   31e20:	e3a02005 	mov	r2, #5
   31e24:	e1a00005 	mov	r0, r5
   31e28:	ebffebbe 	bl	2cd28 <HwManager::validatorHandleAccess(unsigned long, unsigned long, unsigned long, unsigned long&)>
    if (_stepCycleCount < MAX_STEP_CYCLES_FOR_INSTR)
   31e2c:	e5943004 	ldr	r3, [r4, #4]
   31e30:	e3530009 	cmp	r3, #9
   31e34:	da000003 	ble	31e48 <StepValidator::mem_read(int, unsigned short)+0x50>
   31e38:	e59d0004 	ldr	r0, [sp, #4]
    return dataVal;
   31e3c:	e6ef0070 	uxtb	r0, r0
}
   31e40:	e28dd00c 	add	sp, sp, #12
   31e44:	e8bd8030 	pop	{r4, r5, pc}
        _stepCycles[_stepCycleCount].addr = address;
   31e48:	e0832083 	add	r2, r3, r3, lsl #1
        _stepCycles[_stepCycleCount].data = dataVal;
   31e4c:	e59d0004 	ldr	r0, [sp, #4]
        _stepCycles[_stepCycleCount].addr = address;
   31e50:	e0842102 	add	r2, r4, r2, lsl #2
        _stepCycles[_stepCycleCount].flags = (_pThisInstance->_cpu_z80.M1 ? BR_CTRL_BUS_M1_MASK : 0) |
   31e54:	e5941000 	ldr	r1, [r4]
        _stepCycles[_stepCycleCount].addr = address;
   31e58:	e5825008 	str	r5, [r2, #8]
        _stepCycles[_stepCycleCount].data = dataVal;
   31e5c:	e582000c 	str	r0, [r2, #12]
                        BR_CTRL_BUS_RD_MASK | BR_CTRL_BUS_MREQ_MASK;
   31e60:	e5d11023 	ldrb	r1, [r1, #35]	; 0x23
        _stepCycleCount++;
   31e64:	e2833001 	add	r3, r3, #1
                        BR_CTRL_BUS_RD_MASK | BR_CTRL_BUS_MREQ_MASK;
   31e68:	e3510000 	cmp	r1, #0
   31e6c:	03a01005 	moveq	r1, #5
   31e70:	13a01015 	movne	r1, #21
        _stepCycleCount++;
   31e74:	e5843004 	str	r3, [r4, #4]
        _stepCycles[_stepCycleCount].flags = (_pThisInstance->_cpu_z80.M1 ? BR_CTRL_BUS_M1_MASK : 0) |
   31e78:	e5821010 	str	r1, [r2, #16]
   31e7c:	eaffffee 	b	31e3c <StepValidator::mem_read(int, unsigned short)+0x44>
   31e80:	00084134 	.word	0x00084134

00031e84 <StepValidator::io_read(int, unsigned short)>:
{
   31e84:	e92d4030 	push	{r4, r5, lr}
    if (!_pThisInstance)
   31e88:	e59f406c 	ldr	r4, [pc, #108]	; 31efc <StepValidator::io_read(int, unsigned short)+0x78>
{
   31e8c:	e24dd00c 	sub	sp, sp, #12
    if (!_pThisInstance)
   31e90:	e5940000 	ldr	r0, [r4]
   31e94:	e3500000 	cmp	r0, #0
   31e98:	0a00000c 	beq	31ed0 <StepValidator::io_read(int, unsigned short)+0x4c>
   31e9c:	e1a05001 	mov	r5, r1
    uint32_t dataVal = 0x80; // TODO - really need to find a way to make this the value returned on the BUS to keep validity
   31ea0:	e3a02080 	mov	r2, #128	; 0x80
   31ea4:	e28d3008 	add	r3, sp, #8
   31ea8:	e5232004 	str	r2, [r3, #-4]!
    HwManager::validatorHandleAccess(address, 0, BR_CTRL_BUS_IORQ_MASK | BR_CTRL_BUS_RD_MASK, dataVal);
   31eac:	e3a01000 	mov	r1, #0
   31eb0:	e3a02009 	mov	r2, #9
   31eb4:	e1a00005 	mov	r0, r5
   31eb8:	ebffeb9a 	bl	2cd28 <HwManager::validatorHandleAccess(unsigned long, unsigned long, unsigned long, unsigned long&)>
    if (_stepCycleCount < MAX_STEP_CYCLES_FOR_INSTR)
   31ebc:	e5943004 	ldr	r3, [r4, #4]
   31ec0:	e3530009 	cmp	r3, #9
   31ec4:	da000003 	ble	31ed8 <StepValidator::io_read(int, unsigned short)+0x54>
   31ec8:	e59d0004 	ldr	r0, [sp, #4]
    return dataVal;
   31ecc:	e6ef0070 	uxtb	r0, r0
}
   31ed0:	e28dd00c 	add	sp, sp, #12
   31ed4:	e8bd8030 	pop	{r4, r5, pc}
        _stepCycles[_stepCycleCount].flags = BR_CTRL_BUS_RD_MASK | BR_CTRL_BUS_IORQ_MASK;
   31ed8:	e3a01009 	mov	r1, #9
        _stepCycles[_stepCycleCount].addr = address;
   31edc:	e0832083 	add	r2, r3, r3, lsl #1
        _stepCycles[_stepCycleCount].data = dataVal;
   31ee0:	e59d0004 	ldr	r0, [sp, #4]
        _stepCycles[_stepCycleCount].addr = address;
   31ee4:	e0842102 	add	r2, r4, r2, lsl #2
        _stepCycleCount++;
   31ee8:	e2833001 	add	r3, r3, #1
        _stepCycles[_stepCycleCount].addr = address;
   31eec:	e5825008 	str	r5, [r2, #8]
        _stepCycleCount++;
   31ef0:	e5843004 	str	r3, [r4, #4]
        _stepCycles[_stepCycleCount].data = dataVal;
   31ef4:	e1c200fc 	strd	r0, [r2, #12]
   31ef8:	eafffff3 	b	31ecc <StepValidator::io_read(int, unsigned short)+0x48>
   31efc:	00084134 	.word	0x00084134

00031f00 <StepValidator::handleWaitInterruptStatic(unsigned long, unsigned long, unsigned long, unsigned long&)>:
{
   31f00:	e92d4ff8 	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if (_pThisInstance)
   31f04:	e59f6148 	ldr	r6, [pc, #328]	; 32054 <StepValidator::handleWaitInterruptStatic(unsigned long, unsigned long, unsigned long, unsigned long&)+0x154>
   31f08:	e5964000 	ldr	r4, [r6]
   31f0c:	e3540000 	cmp	r4, #0
   31f10:	08bd8ff8 	popeq	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (!_isActive)
   31f14:	e2845a01 	add	r5, r4, #4096	; 0x1000
   31f18:	e5d5c95c 	ldrb	ip, [r5, #2396]	; 0x95c
   31f1c:	e35c0000 	cmp	ip, #0
   31f20:	08bd8ff8 	popeq	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   31f24:	e1a0a003 	mov	sl, r3
   31f28:	e1a07000 	mov	r7, r0
    if (_stepCyclePos == _stepCycleCount)
   31f2c:	e5963004 	ldr	r3, [r6, #4]
   31f30:	e5960080 	ldr	r0, [r6, #128]	; 0x80
   31f34:	e1a08002 	mov	r8, r2
   31f38:	e1500003 	cmp	r0, r3
   31f3c:	e1a09001 	mov	r9, r1
   31f40:	0a000035 	beq	3201c <StepValidator::handleWaitInterruptStatic(unsigned long, unsigned long, unsigned long, unsigned long&)+0x11c>
    expCtrl = _stepCycles[_stepCyclePos].flags;
   31f44:	e0803080 	add	r3, r0, r0, lsl #1
   31f48:	e0863103 	add	r3, r6, r3, lsl #2
    expAddr = _stepCycles[_stepCyclePos].addr;
   31f4c:	e5931008 	ldr	r1, [r3, #8]
    _stepCyclePos++;
   31f50:	e2800001 	add	r0, r0, #1
    if ((addr != expAddr) || (expCtrl != (flags & ~BR_CTRL_BUS_WAIT_MASK)) || (expData != data))
   31f54:	e1570001 	cmp	r7, r1
    _stepCyclePos++;
   31f58:	e5860080 	str	r0, [r6, #128]	; 0x80
    expData = _stepCycles[_stepCyclePos].data;
   31f5c:	e593c00c 	ldr	ip, [r3, #12]
    expCtrl = _stepCycles[_stepCyclePos].flags;
   31f60:	e5930010 	ldr	r0, [r3, #16]
   31f64:	e5953960 	ldr	r3, [r5, #2400]	; 0x960
    if ((addr != expAddr) || (expCtrl != (flags & ~BR_CTRL_BUS_WAIT_MASK)) || (expData != data))
   31f68:	1a000003 	bne	31f7c <StepValidator::handleWaitInterruptStatic(unsigned long, unsigned long, unsigned long, unsigned long&)+0x7c>
   31f6c:	e3c82020 	bic	r2, r8, #32
   31f70:	e159000c 	cmp	r9, ip
   31f74:	01520000 	cmpeq	r2, r0
   31f78:	0a000024 	beq	32010 <StepValidator::handleWaitInterruptStatic(unsigned long, unsigned long, unsigned long, unsigned long&)+0x110>
        return _putPos;
    }

    bool canPut()
    {
        if (_bufLen == 0)
   31f7c:	e5952958 	ldr	r2, [r5, #2392]	; 0x958
   31f80:	e3520000 	cmp	r2, #0
   31f84:	0a00001e 	beq	32004 <StepValidator::handleWaitInterruptStatic(unsigned long, unsigned long, unsigned long, unsigned long&)+0x104>
            return false;
        if (_putPos == _getPos)
   31f88:	e5956950 	ldr	r6, [r5, #2384]	; 0x950
   31f8c:	e595e954 	ldr	lr, [r5, #2388]	; 0x954
   31f90:	e156000e 	cmp	r6, lr
   31f94:	0a000008 	beq	31fbc <StepValidator::handleWaitInterruptStatic(unsigned long, unsigned long, unsigned long, unsigned long&)+0xbc>
            return true;
        unsigned int gp = _getPos;
   31f98:	e595e954 	ldr	lr, [r5, #2388]	; 0x954
        if (_putPos > gp)
   31f9c:	e5956950 	ldr	r6, [r5, #2384]	; 0x950
   31fa0:	e15e0006 	cmp	lr, r6
        {
            if ((_putPos != _bufLen - 1) || (gp != 0))
   31fa4:	e5956950 	ldr	r6, [r5, #2384]	; 0x950
        if (_putPos > gp)
   31fa8:	2a000025 	bcs	32044 <StepValidator::handleWaitInterruptStatic(unsigned long, unsigned long, unsigned long, unsigned long&)+0x144>
            if ((_putPos != _bufLen - 1) || (gp != 0))
   31fac:	e242b001 	sub	fp, r2, #1
   31fb0:	e35e0000 	cmp	lr, #0
   31fb4:	015b0006 	cmpeq	fp, r6
   31fb8:	0a000011 	beq	32004 <StepValidator::handleWaitInterruptStatic(unsigned long, unsigned long, unsigned long, unsigned long&)+0x104>
        return _putPos;
   31fbc:	e595e950 	ldr	lr, [r5, #2384]	; 0x950
            _exceptions[pos].addr = addr;
   31fc0:	e084428e 	add	r4, r4, lr, lsl #5
   31fc4:	e5847050 	str	r7, [r4, #80]	; 0x50
            _exceptions[pos].expectedAddr = expAddr;
   31fc8:	e5841054 	str	r1, [r4, #84]	; 0x54
            _exceptions[pos].dataFromZ80 = data;
   31fcc:	e5849058 	str	r9, [r4, #88]	; 0x58
            _exceptions[pos].expectedData = expData;
   31fd0:	e584c05c 	str	ip, [r4, #92]	; 0x5c
            _exceptions[pos].dataToZ80 = retVal;
   31fd4:	e59a1000 	ldr	r1, [sl]
   31fd8:	e5841060 	str	r1, [r4, #96]	; 0x60
            _exceptions[pos].flags = flags;
   31fdc:	e5848064 	str	r8, [r4, #100]	; 0x64
            _exceptions[pos].expectedFlags = expCtrl;
   31fe0:	e5840068 	str	r0, [r4, #104]	; 0x68
            _exceptions[pos].stepCount = _stats.isrCalls;
   31fe4:	e584306c 	str	r3, [r4, #108]	; 0x6c
        return _putPos != _getPos;
    }

    void hasPut()
    {
        _putPos++;
   31fe8:	e5951950 	ldr	r1, [r5, #2384]	; 0x950
   31fec:	e2811001 	add	r1, r1, #1
   31ff0:	e5851950 	str	r1, [r5, #2384]	; 0x950
        if (_putPos >= _bufLen)
   31ff4:	e5951950 	ldr	r1, [r5, #2384]	; 0x950
   31ff8:	e1510002 	cmp	r1, r2
            _putPos = 0;
   31ffc:	23a02000 	movcs	r2, #0
   32000:	25852950 	strcs	r2, [r5, #2384]	; 0x950
        _stats.errors++;
   32004:	e5952964 	ldr	r2, [r5, #2404]	; 0x964
   32008:	e2822001 	add	r2, r2, #1
   3200c:	e5852964 	str	r2, [r5, #2404]	; 0x964
    _stats.isrCalls++;
   32010:	e2833001 	add	r3, r3, #1
   32014:	e5853960 	str	r3, [r5, #2400]	; 0x960
}
   32018:	e8bd8ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        _stepCyclePos = 0;
   3201c:	e3a03000 	mov	r3, #0
        Z80Execute(&_cpu_z80);
   32020:	e1a00004 	mov	r0, r4
        _stepCyclePos = 0;
   32024:	e5863080 	str	r3, [r6, #128]	; 0x80
        _stepCycleCount = 0;
   32028:	e5863004 	str	r3, [r6, #4]
        Z80Execute(&_cpu_z80);
   3202c:	ebffbcb9 	bl	21318 <Z80Execute>
        _stats.instructionCount++;
   32030:	e5953968 	ldr	r3, [r5, #2408]	; 0x968
   32034:	e5960080 	ldr	r0, [r6, #128]	; 0x80
   32038:	e2833001 	add	r3, r3, #1
   3203c:	e5853968 	str	r3, [r5, #2408]	; 0x968
   32040:	eaffffbf 	b	31f44 <StepValidator::handleWaitInterruptStatic(unsigned long, unsigned long, unsigned long, unsigned long&)+0x44>
            if (gp - _putPos > 1)
   32044:	e04ee006 	sub	lr, lr, r6
   32048:	e35e0001 	cmp	lr, #1
   3204c:	8affffda 	bhi	31fbc <StepValidator::handleWaitInterruptStatic(unsigned long, unsigned long, unsigned long, unsigned long&)+0xbc>
   32050:	eaffffeb 	b	32004 <StepValidator::handleWaitInterruptStatic(unsigned long, unsigned long, unsigned long, unsigned long&)+0x104>
   32054:	00084134 	.word	0x00084134

00032058 <StepValidator::busActionCompleteStatic(BR_BUS_ACTION, BR_BUS_ACTION_REASON)>:
    if ((actionType == BR_BUS_ACTION_RESET) && _pThisInstance)
   32058:	e3500001 	cmp	r0, #1
   3205c:	112fff1e 	bxne	lr
{
   32060:	e92d4070 	push	{r4, r5, r6, lr}
    if ((actionType == BR_BUS_ACTION_RESET) && _pThisInstance)
   32064:	e59f6054 	ldr	r6, [pc, #84]	; 320c0 <StepValidator::busActionCompleteStatic(BR_BUS_ACTION, BR_BUS_ACTION_REASON)+0x68>
   32068:	e5965000 	ldr	r5, [r6]
   3206c:	e3550000 	cmp	r5, #0
   32070:	08bd8070 	popeq	{r4, r5, r6, pc}
   32074:	e1a04000 	mov	r4, r0
    Z80RESET(&_cpu_z80);
   32078:	e1a00005 	mov	r0, r5
   3207c:	ebffbe3c 	bl	21974 <Z80RESET>
    {
        clear();
    }
    void clear()
    {
        isrCalls = 0;
   32080:	e3a03000 	mov	r3, #0
    if (_logging)
   32084:	e5d5204c 	ldrb	r2, [r5, #76]	; 0x4c
   32088:	e2855a01 	add	r5, r5, #4096	; 0x1000
   3208c:	e1520003 	cmp	r2, r3
    _stepCycleCount = 0;
   32090:	e5863004 	str	r3, [r6, #4]
    _stepCyclePos = 0;
   32094:	e5863080 	str	r3, [r6, #128]	; 0x80
   32098:	e5853960 	str	r3, [r5, #2400]	; 0x960
        errors = 0;
   3209c:	e5853964 	str	r3, [r5, #2404]	; 0x964
        instructionCount = 0;
   320a0:	e5853968 	str	r3, [r5, #2408]	; 0x968
    _isActive = true;
   320a4:	e5c5495c 	strb	r4, [r5, #2396]	; 0x95c
    if (_logging)
   320a8:	08bd8070 	popeq	{r4, r5, r6, pc}
        LogWrite(FromStepValidator, LOG_DEBUG, "Reset");
   320ac:	e59f2010 	ldr	r2, [pc, #16]	; 320c4 <StepValidator::busActionCompleteStatic(BR_BUS_ACTION, BR_BUS_ACTION_REASON)+0x6c>
   320b0:	e3a01004 	mov	r1, #4
}
   320b4:	e8bd4070 	pop	{r4, r5, r6, lr}
        LogWrite(FromStepValidator, LOG_DEBUG, "Reset");
   320b8:	e59f0008 	ldr	r0, [pc, #8]	; 320c8 <StepValidator::busActionCompleteStatic(BR_BUS_ACTION, BR_BUS_ACTION_REASON)+0x70>
   320bc:	eaffc82d 	b	24178 <LogWrite>
   320c0:	00084134 	.word	0x00084134
   320c4:	00055470 	.word	0x00055470
   320c8:	00055460 	.word	0x00055460

000320cc <StepValidator::handleRxMsg(char const*, unsigned char const*, int, char*, int)>:
{
   320cc:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   320d0:	e24dde4d 	sub	sp, sp, #1232	; 0x4d0
   320d4:	e24dd004 	sub	sp, sp, #4
    if (!jsonGetValueForKey("cmdName", pCmdJson, cmdName, MAX_CMD_NAME_STR))
   320d8:	e1a01000 	mov	r1, r0
{
   320dc:	e1a04000 	mov	r4, r0
   320e0:	e1a06003 	mov	r6, r3
    if (!jsonGetValueForKey("cmdName", pCmdJson, cmdName, MAX_CMD_NAME_STR))
   320e4:	e28d201c 	add	r2, sp, #28
   320e8:	e3a030c8 	mov	r3, #200	; 0xc8
   320ec:	e59f01fc 	ldr	r0, [pc, #508]	; 322f0 <StepValidator::handleRxMsg(char const*, unsigned char const*, int, char*, int)+0x224>
   320f0:	ebffca3d 	bl	249ec <jsonGetValueForKey>
   320f4:	e2505000 	subs	r5, r0, #0
   320f8:	0a00001f 	beq	3217c <StepValidator::handleRxMsg(char const*, unsigned char const*, int, char*, int)+0xb0>
    if (strcasecmp(cmdName, "validatorStart") == 0)
   320fc:	e59f11f0 	ldr	r1, [pc, #496]	; 322f4 <StepValidator::handleRxMsg(char const*, unsigned char const*, int, char*, int)+0x228>
   32100:	e28d001c 	add	r0, sp, #28
   32104:	eb006ba0 	bl	4cf8c <strcasecmp>
   32108:	e2507000 	subs	r7, r0, #0
   3210c:	0a00002f 	beq	321d0 <StepValidator::handleRxMsg(char const*, unsigned char const*, int, char*, int)+0x104>
    else if (strcasecmp(cmdName, "validatorStop") == 0)
   32110:	e59f11e0 	ldr	r1, [pc, #480]	; 322f8 <StepValidator::handleRxMsg(char const*, unsigned char const*, int, char*, int)+0x22c>
   32114:	e28d001c 	add	r0, sp, #28
   32118:	eb006b9b 	bl	4cf8c <strcasecmp>
   3211c:	e3500000 	cmp	r0, #0
   32120:	1a000019 	bne	3218c <StepValidator::handleRxMsg(char const*, unsigned char const*, int, char*, int)+0xc0>
        if (_pThisInstance)
   32124:	e59f31d0 	ldr	r3, [pc, #464]	; 322fc <StepValidator::handleRxMsg(char const*, unsigned char const*, int, char*, int)+0x230>
   32128:	e5934000 	ldr	r4, [r3]
   3212c:	e3540000 	cmp	r4, #0
   32130:	0a00000d 	beq	3216c <StepValidator::handleRxMsg(char const*, unsigned char const*, int, char*, int)+0xa0>
    if (_logging)
   32134:	e5d4304c 	ldrb	r3, [r4, #76]	; 0x4c
   32138:	e3530000 	cmp	r3, #0
   3213c:	0a000003 	beq	32150 <StepValidator::handleRxMsg(char const*, unsigned char const*, int, char*, int)+0x84>
        LogWrite(FromStepValidator, LOG_DEBUG, "StepValStop");
   32140:	e59f21b8 	ldr	r2, [pc, #440]	; 32300 <StepValidator::handleRxMsg(char const*, unsigned char const*, int, char*, int)+0x234>
   32144:	e3a01004 	mov	r1, #4
   32148:	e59f01b4 	ldr	r0, [pc, #436]	; 32304 <StepValidator::handleRxMsg(char const*, unsigned char const*, int, char*, int)+0x238>
   3214c:	ebffc809 	bl	24178 <LogWrite>
    BusAccess::busSocketEnable(_busSocketId, false);
   32150:	e59f31b0 	ldr	r3, [pc, #432]	; 32308 <StepValidator::handleRxMsg(char const*, unsigned char const*, int, char*, int)+0x23c>
   32154:	e3a01000 	mov	r1, #0
   32158:	e5930000 	ldr	r0, [r3]
   3215c:	eb00198d 	bl	38798 <BusAccess::busSocketEnable(int, bool)>
    _isActive = false;
   32160:	e3a03000 	mov	r3, #0
   32164:	e2844a01 	add	r4, r4, #4096	; 0x1000
   32168:	e5c4395c 	strb	r3, [r4, #2396]	; 0x95c
        strlcpy(pRespJson, "\"err\":\"ok\"", maxRespLen);
   3216c:	e1a00006 	mov	r0, r6
   32170:	e59d24e8 	ldr	r2, [sp, #1256]	; 0x4e8
   32174:	e59f1190 	ldr	r1, [pc, #400]	; 3230c <StepValidator::handleRxMsg(char const*, unsigned char const*, int, char*, int)+0x240>
   32178:	eb006d12 	bl	4d5c8 <strlcpy>
}
   3217c:	e1a00005 	mov	r0, r5
   32180:	e28dde4d 	add	sp, sp, #1232	; 0x4d0
   32184:	e28dd004 	add	sp, sp, #4
   32188:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
    else if (strcasecmp(cmdName, "validatorStatus") == 0)
   3218c:	e59f117c 	ldr	r1, [pc, #380]	; 32310 <StepValidator::handleRxMsg(char const*, unsigned char const*, int, char*, int)+0x244>
   32190:	e28d001c 	add	r0, sp, #28
   32194:	eb006b7c 	bl	4cf8c <strcasecmp>
   32198:	e2507000 	subs	r7, r0, #0
   3219c:	0a00002c 	beq	32254 <StepValidator::handleRxMsg(char const*, unsigned char const*, int, char*, int)+0x188>
    else if (strcasecmp(cmdName, "validatorPrimeFromMem") == 0)
   321a0:	e28d001c 	add	r0, sp, #28
   321a4:	e59f1168 	ldr	r1, [pc, #360]	; 32314 <StepValidator::handleRxMsg(char const*, unsigned char const*, int, char*, int)+0x248>
   321a8:	eb006b77 	bl	4cf8c <strcasecmp>
   321ac:	e3500000 	cmp	r0, #0
        return false;
   321b0:	13a05000 	movne	r5, #0
    else if (strcasecmp(cmdName, "validatorPrimeFromMem") == 0)
   321b4:	1afffff0 	bne	3217c <StepValidator::handleRxMsg(char const*, unsigned char const*, int, char*, int)+0xb0>
        if (_pThisInstance)
   321b8:	e59f313c 	ldr	r3, [pc, #316]	; 322fc <StepValidator::handleRxMsg(char const*, unsigned char const*, int, char*, int)+0x230>
   321bc:	e5933000 	ldr	r3, [r3]
   321c0:	e3530000 	cmp	r3, #0
   321c4:	0affffe8 	beq	3216c <StepValidator::handleRxMsg(char const*, unsigned char const*, int, char*, int)+0xa0>
    HwManager::validatorClone();
   321c8:	ebffe9eb 	bl	2c97c <HwManager::validatorClone()>
   321cc:	eaffffe6 	b	3216c <StepValidator::handleRxMsg(char const*, unsigned char const*, int, char*, int)+0xa0>
        loggingStr[0] = 0;
   321d0:	e28d2e4d 	add	r2, sp, #1232	; 0x4d0
   321d4:	e56273e8 	strb	r7, [r2, #-1000]!	; 0xfffffc18
        jsonGetValueForKey("logging", pCmdJson, loggingStr, MAX_CMD_NAME_STR);
   321d8:	e3a030c8 	mov	r3, #200	; 0xc8
   321dc:	e1a01004 	mov	r1, r4
   321e0:	e59f0130 	ldr	r0, [pc, #304]	; 32318 <StepValidator::handleRxMsg(char const*, unsigned char const*, int, char*, int)+0x24c>
   321e4:	ebffca00 	bl	249ec <jsonGetValueForKey>
        if ((strlen(loggingStr) != 0) && (loggingStr[0] == '1'))
   321e8:	e5dd30e8 	ldrb	r3, [sp, #232]	; 0xe8
   321ec:	e59f2108 	ldr	r2, [pc, #264]	; 322fc <StepValidator::handleRxMsg(char const*, unsigned char const*, int, char*, int)+0x230>
   321f0:	e3530000 	cmp	r3, #0
   321f4:	1a00000f 	bne	32238 <StepValidator::handleRxMsg(char const*, unsigned char const*, int, char*, int)+0x16c>
        if (_pThisInstance)
   321f8:	e5922000 	ldr	r2, [r2]
   321fc:	e3520000 	cmp	r2, #0
    _logging = logging;
   32200:	15c2304c 	strbne	r3, [r2, #76]	; 0x4c
        if (_pThisInstance)
   32204:	0affffd8 	beq	3216c <StepValidator::handleRxMsg(char const*, unsigned char const*, int, char*, int)+0xa0>
    if (_busSocketId < 0)
   32208:	e59f40f8 	ldr	r4, [pc, #248]	; 32308 <StepValidator::handleRxMsg(char const*, unsigned char const*, int, char*, int)+0x23c>
    BusAccess::clockSetFreqHz(250000);
   3220c:	e59f0108 	ldr	r0, [pc, #264]	; 3231c <StepValidator::handleRxMsg(char const*, unsigned char const*, int, char*, int)+0x250>
   32210:	eb001da0 	bl	39898 <BusAccess::clockSetFreqHz(unsigned long)>
    if (_busSocketId < 0)
   32214:	e5940000 	ldr	r0, [r4]
   32218:	e3500000 	cmp	r0, #0
   3221c:	ba00002f 	blt	322e0 <StepValidator::handleRxMsg(char const*, unsigned char const*, int, char*, int)+0x214>
    BusAccess::busSocketEnable(_busSocketId, true);
   32220:	e3a01001 	mov	r1, #1
   32224:	eb00195b 	bl	38798 <BusAccess::busSocketEnable(int, bool)>
    BusAccess::targetReqReset(_busSocketId);
   32228:	e5940000 	ldr	r0, [r4]
   3222c:	e3e01000 	mvn	r1, #0
   32230:	eb0013e1 	bl	371bc <BusAccess::targetReqReset(int, int)>
   32234:	eaffffcc 	b	3216c <StepValidator::handleRxMsg(char const*, unsigned char const*, int, char*, int)+0xa0>
        if ((strlen(loggingStr) != 0) && (loggingStr[0] == '1'))
   32238:	e3530031 	cmp	r3, #49	; 0x31
   3223c:	e5923000 	ldr	r3, [r2]
   32240:	0a00001d 	beq	322bc <StepValidator::handleRxMsg(char const*, unsigned char const*, int, char*, int)+0x1f0>
        if (_pThisInstance)
   32244:	e3530000 	cmp	r3, #0
   32248:	0affffc7 	beq	3216c <StepValidator::handleRxMsg(char const*, unsigned char const*, int, char*, int)+0xa0>
    _logging = logging;
   3224c:	e5c3704c 	strb	r7, [r3, #76]	; 0x4c
   32250:	eaffffec 	b	32208 <StepValidator::handleRxMsg(char const*, unsigned char const*, int, char*, int)+0x13c>
        jsonGetValueForKey("msgIdx", pCmdJson, statusIdxStr, MAX_STATUS_INDEX_LEN);
   32254:	e1a01004 	mov	r1, r4
   32258:	e3a03014 	mov	r3, #20
   3225c:	e28d2008 	add	r2, sp, #8
   32260:	e59f00b8 	ldr	r0, [pc, #184]	; 32320 <StepValidator::handleRxMsg(char const*, unsigned char const*, int, char*, int)+0x254>
        statusIdxStr[0] = 0;
   32264:	e5cd7008 	strb	r7, [sp, #8]
        jsonGetValueForKey("msgIdx", pCmdJson, statusIdxStr, MAX_STATUS_INDEX_LEN);
   32268:	ebffc9df 	bl	249ec <jsonGetValueForKey>
        if (_pThisInstance)
   3226c:	e59f3088 	ldr	r3, [pc, #136]	; 322fc <StepValidator::handleRxMsg(char const*, unsigned char const*, int, char*, int)+0x230>
        strcpy(statusStr, "");
   32270:	e5cd70e8 	strb	r7, [sp, #232]	; 0xe8
        if (_pThisInstance)
   32274:	e5933000 	ldr	r3, [r3]
   32278:	e3530000 	cmp	r3, #0
   3227c:	028d40e8 	addeq	r4, sp, #232	; 0xe8
   32280:	0a000008 	beq	322a8 <StepValidator::handleRxMsg(char const*, unsigned char const*, int, char*, int)+0x1dc>
    ee_sprintf(pRespJson, "\"isrCount\":%d,\"errors\":%d,\"msgIdx\":%s", _stats.isrCalls, _stats.errors, statusIdxStr);
   32284:	e2832a01 	add	r2, r3, #4096	; 0x1000
   32288:	e28d1008 	add	r1, sp, #8
   3228c:	e28d40e8 	add	r4, sp, #232	; 0xe8
   32290:	e5923964 	ldr	r3, [r2, #2404]	; 0x964
   32294:	e1a00004 	mov	r0, r4
   32298:	e5922960 	ldr	r2, [r2, #2400]	; 0x960
   3229c:	e58d1000 	str	r1, [sp]
   322a0:	e59f107c 	ldr	r1, [pc, #124]	; 32324 <StepValidator::handleRxMsg(char const*, unsigned char const*, int, char*, int)+0x258>
   322a4:	ebffc2c0 	bl	22dac <ee_sprintf>
        strlcpy(pRespJson, statusStr, maxRespLen);
   322a8:	e1a01004 	mov	r1, r4
   322ac:	e1a00006 	mov	r0, r6
   322b0:	e59d24e8 	ldr	r2, [sp, #1256]	; 0x4e8
   322b4:	eb006cc3 	bl	4d5c8 <strlcpy>
   322b8:	eaffffaf 	b	3217c <StepValidator::handleRxMsg(char const*, unsigned char const*, int, char*, int)+0xb0>
        if (_pThisInstance)
   322bc:	e3530000 	cmp	r3, #0
   322c0:	0affffa9 	beq	3216c <StepValidator::handleRxMsg(char const*, unsigned char const*, int, char*, int)+0xa0>
    _logging = logging;
   322c4:	e3a01001 	mov	r1, #1
        LogWrite(FromStepValidator, LOG_DEBUG, "StepValStart");
   322c8:	e59f2058 	ldr	r2, [pc, #88]	; 32328 <StepValidator::handleRxMsg(char const*, unsigned char const*, int, char*, int)+0x25c>
    _logging = logging;
   322cc:	e5c3104c 	strb	r1, [r3, #76]	; 0x4c
        LogWrite(FromStepValidator, LOG_DEBUG, "StepValStart");
   322d0:	e59f002c 	ldr	r0, [pc, #44]	; 32304 <StepValidator::handleRxMsg(char const*, unsigned char const*, int, char*, int)+0x238>
   322d4:	e3a01004 	mov	r1, #4
   322d8:	ebffc7a6 	bl	24178 <LogWrite>
   322dc:	eaffffc9 	b	32208 <StepValidator::handleRxMsg(char const*, unsigned char const*, int, char*, int)+0x13c>
        _busSocketId = BusAccess::busSocketAdd(_busSocketInfo);
   322e0:	e2840004 	add	r0, r4, #4
   322e4:	eb0018e7 	bl	38688 <BusAccess::busSocketAdd(BusSocketInfo&)>
   322e8:	e5840000 	str	r0, [r4]
   322ec:	eaffffcb 	b	32220 <StepValidator::handleRxMsg(char const*, unsigned char const*, int, char*, int)+0x154>
   322f0:	00053b5c 	.word	0x00053b5c
   322f4:	00055478 	.word	0x00055478
   322f8:	000554a0 	.word	0x000554a0
   322fc:	00084134 	.word	0x00084134
   32300:	000554b0 	.word	0x000554b0
   32304:	00055460 	.word	0x00055460
   32308:	0006f3b8 	.word	0x0006f3b8
   3230c:	00053bc4 	.word	0x00053bc4
   32310:	000554bc 	.word	0x000554bc
   32314:	000554f4 	.word	0x000554f4
   32318:	00055488 	.word	0x00055488
   3231c:	0003d090 	.word	0x0003d090
   32320:	00054260 	.word	0x00054260
   32324:	000554cc 	.word	0x000554cc
   32328:	00055490 	.word	0x00055490

0003232c <StepValidator::StepValidator()>:
StepValidator::StepValidator() : 
   3232c:	e92d4010 	push	{r4, lr}
        _putPos = 0;
   32330:	e3a03000 	mov	r3, #0
        _bufLen = maxLen;
   32334:	e3a0e0c8 	mov	lr, #200	; 0xc8
   32338:	e1a02000 	mov	r2, r0
    _cpu_z80.ioRead = io_read;
   3233c:	e59fc04c 	ldr	ip, [pc, #76]	; 32390 <StepValidator::StepValidator()+0x64>
   32340:	e2801a01 	add	r1, r0, #4096	; 0x1000
   32344:	e581e958 	str	lr, [r1, #2392]	; 0x958
        _putPos = 0;
   32348:	e5813950 	str	r3, [r1, #2384]	; 0x950
        isrCalls = 0;
   3234c:	e5813960 	str	r3, [r1, #2400]	; 0x960
        _getPos = 0;
   32350:	e5813954 	str	r3, [r1, #2388]	; 0x954
        errors = 0;
   32354:	e5813964 	str	r3, [r1, #2404]	; 0x964
        instructionCount = 0;
   32358:	e5813968 	str	r3, [r1, #2408]	; 0x968
    _isActive = false;
   3235c:	e5c1395c 	strb	r3, [r1, #2396]	; 0x95c
	_cpu_z80.ioWrite = io_write;
   32360:	e59f402c 	ldr	r4, [pc, #44]	; 32394 <StepValidator::StepValidator()+0x68>
    _cpu_z80.ioRead = io_read;
   32364:	e580c030 	str	ip, [r0, #48]	; 0x30
    _stepCycleCount = 0;
   32368:	e59f1028 	ldr	r1, [pc, #40]	; 32398 <StepValidator::StepValidator()+0x6c>
	_cpu_z80.memRead = mem_read;
   3236c:	e59fe028 	ldr	lr, [pc, #40]	; 3239c <StepValidator::StepValidator()+0x70>
	_cpu_z80.memWrite = mem_write;
   32370:	e59fc028 	ldr	ip, [pc, #40]	; 323a0 <StepValidator::StepValidator()+0x74>
    _logging = false;
   32374:	e5c0304c 	strb	r3, [r0, #76]	; 0x4c
	_cpu_z80.ioWrite = io_write;
   32378:	e5804034 	str	r4, [r0, #52]	; 0x34
	_cpu_z80.memRead = mem_read;
   3237c:	e580e024 	str	lr, [r0, #36]	; 0x24
	_cpu_z80.memWrite = mem_write;
   32380:	e580c028 	str	ip, [r0, #40]	; 0x28
    _stepCyclePos = 0;
   32384:	e5813080 	str	r3, [r1, #128]	; 0x80
    _stepCycleCount = 0;
   32388:	e1c120f0 	strd	r2, [r1]
}
   3238c:	e8bd8010 	pop	{r4, pc}
   32390:	00031e84 	.word	0x00031e84
   32394:	00031d8c 	.word	0x00031d8c
   32398:	00084134 	.word	0x00084134
   3239c:	00031df8 	.word	0x00031df8
   323a0:	00031d20 	.word	0x00031d20

000323a4 <StepValidator::init()>:
{
   323a4:	e92d4010 	push	{r4, lr}
    if (_commsSocketId < 0)
   323a8:	e59f4018 	ldr	r4, [pc, #24]	; 323c8 <StepValidator::init()+0x24>
   323ac:	e594302c 	ldr	r3, [r4, #44]	; 0x2c
   323b0:	e3530000 	cmp	r3, #0
   323b4:	a8bd8010 	popge	{r4, pc}
        _commsSocketId = CommandHandler::commsSocketAdd(_commsSocketInfo);
   323b8:	e2840030 	add	r0, r4, #48	; 0x30
   323bc:	ebffd16c 	bl	26974 <CommandHandler::commsSocketAdd(CommsSocketInfo&)>
   323c0:	e584002c 	str	r0, [r4, #44]	; 0x2c
}
   323c4:	e8bd8010 	pop	{r4, pc}
   323c8:	0006f3b8 	.word	0x0006f3b8

000323cc <StepValidator::start(bool)>:
    if (_logging)
   323cc:	e3510000 	cmp	r1, #0
{
   323d0:	e92d4010 	push	{r4, lr}
    _logging = logging;
   323d4:	e5c0104c 	strb	r1, [r0, #76]	; 0x4c
    if (_logging)
   323d8:	1a00000b 	bne	3240c <StepValidator::start(bool)+0x40>
    if (_busSocketId < 0)
   323dc:	e59f404c 	ldr	r4, [pc, #76]	; 32430 <StepValidator::start(bool)+0x64>
    BusAccess::clockSetFreqHz(250000);
   323e0:	e59f004c 	ldr	r0, [pc, #76]	; 32434 <StepValidator::start(bool)+0x68>
   323e4:	eb001d2b 	bl	39898 <BusAccess::clockSetFreqHz(unsigned long)>
    if (_busSocketId < 0)
   323e8:	e5940000 	ldr	r0, [r4]
   323ec:	e3500000 	cmp	r0, #0
   323f0:	ba00000a 	blt	32420 <StepValidator::start(bool)+0x54>
    BusAccess::busSocketEnable(_busSocketId, true);
   323f4:	e3a01001 	mov	r1, #1
   323f8:	eb0018e6 	bl	38798 <BusAccess::busSocketEnable(int, bool)>
    BusAccess::targetReqReset(_busSocketId);
   323fc:	e5940000 	ldr	r0, [r4]
   32400:	e3e01000 	mvn	r1, #0
}
   32404:	e8bd4010 	pop	{r4, lr}
    BusAccess::targetReqReset(_busSocketId);
   32408:	ea00136b 	b	371bc <BusAccess::targetReqReset(int, int)>
        LogWrite(FromStepValidator, LOG_DEBUG, "StepValStart");
   3240c:	e59f2024 	ldr	r2, [pc, #36]	; 32438 <StepValidator::start(bool)+0x6c>
   32410:	e3a01004 	mov	r1, #4
   32414:	e59f0020 	ldr	r0, [pc, #32]	; 3243c <StepValidator::start(bool)+0x70>
   32418:	ebffc756 	bl	24178 <LogWrite>
   3241c:	eaffffee 	b	323dc <StepValidator::start(bool)+0x10>
        _busSocketId = BusAccess::busSocketAdd(_busSocketInfo);
   32420:	e2840004 	add	r0, r4, #4
   32424:	eb001897 	bl	38688 <BusAccess::busSocketAdd(BusSocketInfo&)>
   32428:	e5840000 	str	r0, [r4]
   3242c:	eafffff0 	b	323f4 <StepValidator::start(bool)+0x28>
   32430:	0006f3b8 	.word	0x0006f3b8
   32434:	0003d090 	.word	0x0003d090
   32438:	00055490 	.word	0x00055490
   3243c:	00055460 	.word	0x00055460

00032440 <StepValidator::stop()>:
    if (_logging)
   32440:	e5d0304c 	ldrb	r3, [r0, #76]	; 0x4c
{
   32444:	e92d4010 	push	{r4, lr}
    if (_logging)
   32448:	e3530000 	cmp	r3, #0
{
   3244c:	e1a04000 	mov	r4, r0
    if (_logging)
   32450:	0a000003 	beq	32464 <StepValidator::stop()+0x24>
        LogWrite(FromStepValidator, LOG_DEBUG, "StepValStop");
   32454:	e59f2028 	ldr	r2, [pc, #40]	; 32484 <StepValidator::stop()+0x44>
   32458:	e3a01004 	mov	r1, #4
   3245c:	e59f0024 	ldr	r0, [pc, #36]	; 32488 <StepValidator::stop()+0x48>
   32460:	ebffc744 	bl	24178 <LogWrite>
    BusAccess::busSocketEnable(_busSocketId, false);
   32464:	e59f3020 	ldr	r3, [pc, #32]	; 3248c <StepValidator::stop()+0x4c>
   32468:	e3a01000 	mov	r1, #0
   3246c:	e5930000 	ldr	r0, [r3]
   32470:	eb0018c8 	bl	38798 <BusAccess::busSocketEnable(int, bool)>
    _isActive = false;
   32474:	e3a03000 	mov	r3, #0
   32478:	e2844a01 	add	r4, r4, #4096	; 0x1000
   3247c:	e5c4395c 	strb	r3, [r4, #2396]	; 0x95c
}
   32480:	e8bd8010 	pop	{r4, pc}
   32484:	000554b0 	.word	0x000554b0
   32488:	00055460 	.word	0x00055460
   3248c:	0006f3b8 	.word	0x0006f3b8

00032490 <StepValidator::primeFromMem()>:
    HwManager::validatorClone();
   32490:	eaffe939 	b	2c97c <HwManager::validatorClone()>

00032494 <StepValidator::resetComplete()>:
{
   32494:	e92d4010 	push	{r4, lr}
   32498:	e1a04000 	mov	r4, r0
    Z80RESET(&_cpu_z80);
   3249c:	ebffbd34 	bl	21974 <Z80RESET>
        isrCalls = 0;
   324a0:	e3a03000 	mov	r3, #0
    _isActive = true;
   324a4:	e3a01001 	mov	r1, #1
    if (_logging)
   324a8:	e5d4004c 	ldrb	r0, [r4, #76]	; 0x4c
    _stepCycleCount = 0;
   324ac:	e59f2034 	ldr	r2, [pc, #52]	; 324e8 <StepValidator::resetComplete()+0x54>
    if (_logging)
   324b0:	e1500003 	cmp	r0, r3
   324b4:	e2840a01 	add	r0, r4, #4096	; 0x1000
    _isActive = true;
   324b8:	e5c0195c 	strb	r1, [r0, #2396]	; 0x95c
   324bc:	e5803960 	str	r3, [r0, #2400]	; 0x960
        errors = 0;
   324c0:	e5803964 	str	r3, [r0, #2404]	; 0x964
        instructionCount = 0;
   324c4:	e5803968 	str	r3, [r0, #2408]	; 0x968
    _stepCycleCount = 0;
   324c8:	e5823004 	str	r3, [r2, #4]
    _stepCyclePos = 0;
   324cc:	e5823080 	str	r3, [r2, #128]	; 0x80
    if (_logging)
   324d0:	08bd8010 	popeq	{r4, pc}
        LogWrite(FromStepValidator, LOG_DEBUG, "Reset");
   324d4:	e59f2010 	ldr	r2, [pc, #16]	; 324ec <StepValidator::resetComplete()+0x58>
   324d8:	e3a01004 	mov	r1, #4
}
   324dc:	e8bd4010 	pop	{r4, lr}
        LogWrite(FromStepValidator, LOG_DEBUG, "Reset");
   324e0:	e59f0008 	ldr	r0, [pc, #8]	; 324f0 <StepValidator::resetComplete()+0x5c>
   324e4:	eaffc723 	b	24178 <LogWrite>
   324e8:	00084134 	.word	0x00084134
   324ec:	00055470 	.word	0x00055470
   324f0:	00055460 	.word	0x00055460

000324f4 <StepValidator::handleWaitInterrupt(unsigned long, unsigned long, unsigned long, unsigned long&)>:
{    
   324f4:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    if (!_isActive)
   324f8:	e2804a01 	add	r4, r0, #4096	; 0x1000
   324fc:	e5d4e95c 	ldrb	lr, [r4, #2396]	; 0x95c
   32500:	e35e0000 	cmp	lr, #0
   32504:	08bd87f0 	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
    if (_stepCyclePos == _stepCycleCount)
   32508:	e59f512c 	ldr	r5, [pc, #300]	; 3263c <StepValidator::handleWaitInterrupt(unsigned long, unsigned long, unsigned long, unsigned long&)+0x148>
   3250c:	e1a07003 	mov	r7, r3
   32510:	e595c080 	ldr	ip, [r5, #128]	; 0x80
   32514:	e5953004 	ldr	r3, [r5, #4]
   32518:	e1a09000 	mov	r9, r0
   3251c:	e15c0003 	cmp	ip, r3
   32520:	e1a08002 	mov	r8, r2
   32524:	e1a06001 	mov	r6, r1
   32528:	0a000036 	beq	32608 <StepValidator::handleWaitInterrupt(unsigned long, unsigned long, unsigned long, unsigned long&)+0x114>
    expCtrl = _stepCycles[_stepCyclePos].flags;
   3252c:	e08ce08c 	add	lr, ip, ip, lsl #1
   32530:	e085e10e 	add	lr, r5, lr, lsl #2
    expAddr = _stepCycles[_stepCyclePos].addr;
   32534:	e59e1008 	ldr	r1, [lr, #8]
    _stepCyclePos++;
   32538:	e28cc001 	add	ip, ip, #1
    if ((addr != expAddr) || (expCtrl != (flags & ~BR_CTRL_BUS_WAIT_MASK)) || (expData != data))
   3253c:	e1560001 	cmp	r6, r1
    _stepCyclePos++;
   32540:	e585c080 	str	ip, [r5, #128]	; 0x80
   32544:	e5943960 	ldr	r3, [r4, #2400]	; 0x960
    expCtrl = _stepCycles[_stepCyclePos].flags;
   32548:	e59ec010 	ldr	ip, [lr, #16]
    expData = _stepCycles[_stepCyclePos].data;
   3254c:	e59ee00c 	ldr	lr, [lr, #12]
    if ((addr != expAddr) || (expCtrl != (flags & ~BR_CTRL_BUS_WAIT_MASK)) || (expData != data))
   32550:	1a000003 	bne	32564 <StepValidator::handleWaitInterrupt(unsigned long, unsigned long, unsigned long, unsigned long&)+0x70>
   32554:	e3c72020 	bic	r2, r7, #32
   32558:	e158000e 	cmp	r8, lr
   3255c:	0152000c 	cmpeq	r2, ip
   32560:	0a000025 	beq	325fc <StepValidator::handleWaitInterrupt(unsigned long, unsigned long, unsigned long, unsigned long&)+0x108>
        if (_bufLen == 0)
   32564:	e5942958 	ldr	r2, [r4, #2392]	; 0x958
   32568:	e3520000 	cmp	r2, #0
   3256c:	0a00001f 	beq	325f0 <StepValidator::handleWaitInterrupt(unsigned long, unsigned long, unsigned long, unsigned long&)+0xfc>
        if (_putPos == _getPos)
   32570:	e5945950 	ldr	r5, [r4, #2384]	; 0x950
   32574:	e5940954 	ldr	r0, [r4, #2388]	; 0x954
   32578:	e1550000 	cmp	r5, r0
   3257c:	0a000008 	beq	325a4 <StepValidator::handleWaitInterrupt(unsigned long, unsigned long, unsigned long, unsigned long&)+0xb0>
        unsigned int gp = _getPos;
   32580:	e5940954 	ldr	r0, [r4, #2388]	; 0x954
        if (_putPos > gp)
   32584:	e5945950 	ldr	r5, [r4, #2384]	; 0x950
   32588:	e1500005 	cmp	r0, r5
            if ((_putPos != _bufLen - 1) || (gp != 0))
   3258c:	e5945950 	ldr	r5, [r4, #2384]	; 0x950
        if (_putPos > gp)
   32590:	2a000025 	bcs	3262c <StepValidator::handleWaitInterrupt(unsigned long, unsigned long, unsigned long, unsigned long&)+0x138>
            if ((_putPos != _bufLen - 1) || (gp != 0))
   32594:	e242a001 	sub	sl, r2, #1
   32598:	e3500000 	cmp	r0, #0
   3259c:	015a0005 	cmpeq	sl, r5
   325a0:	0a000012 	beq	325f0 <StepValidator::handleWaitInterrupt(unsigned long, unsigned long, unsigned long, unsigned long&)+0xfc>
        return _putPos;
   325a4:	e5940950 	ldr	r0, [r4, #2384]	; 0x950
            _exceptions[pos].addr = addr;
   325a8:	e0890280 	add	r0, r9, r0, lsl #5
   325ac:	e5806050 	str	r6, [r0, #80]	; 0x50
            _exceptions[pos].expectedAddr = expAddr;
   325b0:	e5801054 	str	r1, [r0, #84]	; 0x54
            _exceptions[pos].dataToZ80 = retVal;
   325b4:	e59d1020 	ldr	r1, [sp, #32]
            _exceptions[pos].dataFromZ80 = data;
   325b8:	e5808058 	str	r8, [r0, #88]	; 0x58
            _exceptions[pos].expectedData = expData;
   325bc:	e580e05c 	str	lr, [r0, #92]	; 0x5c
            _exceptions[pos].dataToZ80 = retVal;
   325c0:	e5911000 	ldr	r1, [r1]
   325c4:	e5801060 	str	r1, [r0, #96]	; 0x60
            _exceptions[pos].flags = flags;
   325c8:	e5807064 	str	r7, [r0, #100]	; 0x64
            _exceptions[pos].expectedFlags = expCtrl;
   325cc:	e580c068 	str	ip, [r0, #104]	; 0x68
            _exceptions[pos].stepCount = _stats.isrCalls;
   325d0:	e580306c 	str	r3, [r0, #108]	; 0x6c
        _putPos++;
   325d4:	e5941950 	ldr	r1, [r4, #2384]	; 0x950
   325d8:	e2811001 	add	r1, r1, #1
   325dc:	e5841950 	str	r1, [r4, #2384]	; 0x950
        if (_putPos >= _bufLen)
   325e0:	e5941950 	ldr	r1, [r4, #2384]	; 0x950
   325e4:	e1510002 	cmp	r1, r2
            _putPos = 0;
   325e8:	23a02000 	movcs	r2, #0
   325ec:	25842950 	strcs	r2, [r4, #2384]	; 0x950
        _stats.errors++;
   325f0:	e5942964 	ldr	r2, [r4, #2404]	; 0x964
   325f4:	e2822001 	add	r2, r2, #1
   325f8:	e5842964 	str	r2, [r4, #2404]	; 0x964
    _stats.isrCalls++;
   325fc:	e2833001 	add	r3, r3, #1
   32600:	e5843960 	str	r3, [r4, #2400]	; 0x960
}
   32604:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
        _stepCyclePos = 0;
   32608:	e3a03000 	mov	r3, #0
   3260c:	e5853080 	str	r3, [r5, #128]	; 0x80
        _stepCycleCount = 0;
   32610:	e5853004 	str	r3, [r5, #4]
        Z80Execute(&_cpu_z80);
   32614:	ebffbb3f 	bl	21318 <Z80Execute>
        _stats.instructionCount++;
   32618:	e5943968 	ldr	r3, [r4, #2408]	; 0x968
   3261c:	e595c080 	ldr	ip, [r5, #128]	; 0x80
   32620:	e2833001 	add	r3, r3, #1
   32624:	e5843968 	str	r3, [r4, #2408]	; 0x968
   32628:	eaffffbf 	b	3252c <StepValidator::handleWaitInterrupt(unsigned long, unsigned long, unsigned long, unsigned long&)+0x38>
            if (gp - _putPos > 1)
   3262c:	e0400005 	sub	r0, r0, r5
   32630:	e3500001 	cmp	r0, #1
   32634:	8affffda 	bhi	325a4 <StepValidator::handleWaitInterrupt(unsigned long, unsigned long, unsigned long, unsigned long&)+0xb0>
   32638:	eaffffec 	b	325f0 <StepValidator::handleWaitInterrupt(unsigned long, unsigned long, unsigned long, unsigned long&)+0xfc>
   3263c:	00084134 	.word	0x00084134

00032640 <StepValidator::service()>:
{
   32640:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    _serviceCount++;
   32644:	e2804a01 	add	r4, r0, #4096	; 0x1000
   32648:	e594396c 	ldr	r3, [r4, #2412]	; 0x96c
    if (_serviceCount < 100000)
   3264c:	e59f2238 	ldr	r2, [pc, #568]	; 3288c <StepValidator::service()+0x24c>
    _serviceCount++;
   32650:	e2833001 	add	r3, r3, #1
    if (_serviceCount < 100000)
   32654:	e1530002 	cmp	r3, r2
{
   32658:	e24ddfa1 	sub	sp, sp, #644	; 0x284
    _serviceCount++;
   3265c:	d584396c 	strle	r3, [r4, #2412]	; 0x96c
    if (_serviceCount < 100000)
   32660:	da000087 	ble	32884 <StepValidator::service()+0x244>
    _serviceCount = 0;
   32664:	e3a05000 	mov	r5, #0
        return _putPos != _getPos;
   32668:	e5942950 	ldr	r2, [r4, #2384]	; 0x950
   3266c:	e5943954 	ldr	r3, [r4, #2388]	; 0x954
   32670:	e584596c 	str	r5, [r4, #2412]	; 0x96c
    if (_exceptionsPosn.canGet())
   32674:	e1520003 	cmp	r2, r3
    debugMsg[0] = 0;
   32678:	e5cd508c 	strb	r5, [sp, #140]	; 0x8c
    if (_exceptionsPosn.canGet())
   3267c:	0a000080 	beq	32884 <StepValidator::service()+0x244>
        if (_logging)
   32680:	e5d0304c 	ldrb	r3, [r0, #76]	; 0x4c
   32684:	e1530005 	cmp	r3, r5
   32688:	0a000075 	beq	32864 <StepValidator::service()+0x224>
        return _getPos;
   3268c:	e5941954 	ldr	r1, [r4, #2388]	; 0x954
            ee_sprintf(debugMsg+strlen(debugMsg), "%07d got %04x %02x %c%c%c%c%c%c%c%c%c exp %04x %02x %c%c%c%c%c%c%c%c%c ToZ80 %02x",
   32690:	e59f61f8 	ldr	r6, [pc, #504]	; 32890 <StepValidator::service()+0x250>
   32694:	e0801281 	add	r1, r0, r1, lsl #5
            int flags = _exceptions[pos].flags;
   32698:	e591e064 	ldr	lr, [r1, #100]	; 0x64
            int expFlags = _exceptions[pos].expectedFlags;
   3269c:	e591c068 	ldr	ip, [r1, #104]	; 0x68
            ee_sprintf(debugMsg+strlen(debugMsg), "%07d got %04x %02x %c%c%c%c%c%c%c%c%c exp %04x %02x %c%c%c%c%c%c%c%c%c ToZ80 %02x",
   326a0:	e31e0001 	tst	lr, #1
   326a4:	13a03052 	movne	r3, #82	; 0x52
   326a8:	03a03020 	moveq	r3, #32
   326ac:	e31e0002 	tst	lr, #2
   326b0:	e58d3064 	str	r3, [sp, #100]	; 0x64
   326b4:	13a03057 	movne	r3, #87	; 0x57
   326b8:	03a03020 	moveq	r3, #32
   326bc:	e31e0004 	tst	lr, #4
   326c0:	e58d3068 	str	r3, [sp, #104]	; 0x68
   326c4:	13a0304d 	movne	r3, #77	; 0x4d
   326c8:	03a03020 	moveq	r3, #32
   326cc:	e31e0008 	tst	lr, #8
   326d0:	e58d306c 	str	r3, [sp, #108]	; 0x6c
   326d4:	13a03049 	movne	r3, #73	; 0x49
   326d8:	03a03020 	moveq	r3, #32
   326dc:	e31e0010 	tst	lr, #16
   326e0:	e58d3070 	str	r3, [sp, #112]	; 0x70
   326e4:	13a03031 	movne	r3, #49	; 0x31
   326e8:	03a03020 	moveq	r3, #32
   326ec:	e31e0020 	tst	lr, #32
   326f0:	e58d3074 	str	r3, [sp, #116]	; 0x74
   326f4:	13a03054 	movne	r3, #84	; 0x54
   326f8:	03a03020 	moveq	r3, #32
                        _exceptions[pos].stepCount,
   326fc:	e591206c 	ldr	r2, [r1, #108]	; 0x6c
            ee_sprintf(debugMsg+strlen(debugMsg), "%07d got %04x %02x %c%c%c%c%c%c%c%c%c exp %04x %02x %c%c%c%c%c%c%c%c%c ToZ80 %02x",
   32700:	e58d3078 	str	r3, [sp, #120]	; 0x78
                        _exceptions[pos].addr, 
   32704:	e5913050 	ldr	r3, [r1, #80]	; 0x50
                        _exceptions[pos].dataFromZ80, 
   32708:	e5910058 	ldr	r0, [r1, #88]	; 0x58
            ee_sprintf(debugMsg+strlen(debugMsg), "%07d got %04x %02x %c%c%c%c%c%c%c%c%c exp %04x %02x %c%c%c%c%c%c%c%c%c ToZ80 %02x",
   3270c:	e31e0040 	tst	lr, #64	; 0x40
                        _exceptions[pos].dataFromZ80, 
   32710:	e58d005c 	str	r0, [sp, #92]	; 0x5c
                        _exceptions[pos].expectedAddr, 
   32714:	e5910054 	ldr	r0, [r1, #84]	; 0x54
            ee_sprintf(debugMsg+strlen(debugMsg), "%07d got %04x %02x %c%c%c%c%c%c%c%c%c exp %04x %02x %c%c%c%c%c%c%c%c%c ToZ80 %02x",
   32718:	13a0b058 	movne	fp, #88	; 0x58
   3271c:	03a0b020 	moveq	fp, #32
   32720:	e31e0080 	tst	lr, #128	; 0x80
                        _exceptions[pos].expectedAddr, 
   32724:	e58d0060 	str	r0, [sp, #96]	; 0x60
            ee_sprintf(debugMsg+strlen(debugMsg), "%07d got %04x %02x %c%c%c%c%c%c%c%c%c exp %04x %02x %c%c%c%c%c%c%c%c%c ToZ80 %02x",
   32728:	13a00051 	movne	r0, #81	; 0x51
   3272c:	03a00020 	moveq	r0, #32
   32730:	e31e0c01 	tst	lr, #256	; 0x100
   32734:	13a0e04e 	movne	lr, #78	; 0x4e
   32738:	03a0e020 	moveq	lr, #32
                        _exceptions[pos].expectedData == 0xffff ? 0 : _exceptions[pos].expectedData, 
   3273c:	e591705c 	ldr	r7, [r1, #92]	; 0x5c
            ee_sprintf(debugMsg+strlen(debugMsg), "%07d got %04x %02x %c%c%c%c%c%c%c%c%c exp %04x %02x %c%c%c%c%c%c%c%c%c ToZ80 %02x",
   32740:	e58de07c 	str	lr, [sp, #124]	; 0x7c
   32744:	e1570006 	cmp	r7, r6
   32748:	1591505c 	ldrne	r5, [r1, #92]	; 0x5c
   3274c:	e31c0001 	tst	ip, #1
   32750:	13a0e052 	movne	lr, #82	; 0x52
   32754:	03a0e020 	moveq	lr, #32
   32758:	e31c0002 	tst	ip, #2
   3275c:	13a0a057 	movne	sl, #87	; 0x57
   32760:	03a0a020 	moveq	sl, #32
   32764:	e31c0004 	tst	ip, #4
   32768:	13a0904d 	movne	r9, #77	; 0x4d
   3276c:	03a09020 	moveq	r9, #32
   32770:	e31c0008 	tst	ip, #8
   32774:	13a08049 	movne	r8, #73	; 0x49
   32778:	03a08020 	moveq	r8, #32
   3277c:	e31c0010 	tst	ip, #16
   32780:	13a07031 	movne	r7, #49	; 0x31
   32784:	03a07020 	moveq	r7, #32
   32788:	e31c0020 	tst	ip, #32
   3278c:	13a06054 	movne	r6, #84	; 0x54
   32790:	03a06020 	moveq	r6, #32
   32794:	e31c0040 	tst	ip, #64	; 0x40
   32798:	e58de080 	str	lr, [sp, #128]	; 0x80
   3279c:	13a0e058 	movne	lr, #88	; 0x58
   327a0:	03a0e020 	moveq	lr, #32
   327a4:	e31c0080 	tst	ip, #128	; 0x80
   327a8:	e58de084 	str	lr, [sp, #132]	; 0x84
   327ac:	13a0e051 	movne	lr, #81	; 0x51
   327b0:	03a0e020 	moveq	lr, #32
   327b4:	e31c0c01 	tst	ip, #256	; 0x100
   327b8:	13a0c04e 	movne	ip, #78	; 0x4e
   327bc:	03a0c020 	moveq	ip, #32
                        _exceptions[pos].dataToZ80);
   327c0:	e5911060 	ldr	r1, [r1, #96]	; 0x60
            ee_sprintf(debugMsg+strlen(debugMsg), "%07d got %04x %02x %c%c%c%c%c%c%c%c%c exp %04x %02x %c%c%c%c%c%c%c%c%c ToZ80 %02x",
   327c4:	e58d0020 	str	r0, [sp, #32]
   327c8:	e59d0078 	ldr	r0, [sp, #120]	; 0x78
   327cc:	e58db01c 	str	fp, [sp, #28]
   327d0:	e58d0018 	str	r0, [sp, #24]
   327d4:	e59d0074 	ldr	r0, [sp, #116]	; 0x74
   327d8:	e58d0014 	str	r0, [sp, #20]
   327dc:	e59d0070 	ldr	r0, [sp, #112]	; 0x70
   327e0:	e58d0010 	str	r0, [sp, #16]
   327e4:	e59d006c 	ldr	r0, [sp, #108]	; 0x6c
   327e8:	e58d000c 	str	r0, [sp, #12]
   327ec:	e59d0068 	ldr	r0, [sp, #104]	; 0x68
   327f0:	e58d0008 	str	r0, [sp, #8]
   327f4:	e59d0064 	ldr	r0, [sp, #100]	; 0x64
   327f8:	e59db060 	ldr	fp, [sp, #96]	; 0x60
   327fc:	e58d502c 	str	r5, [sp, #44]	; 0x2c
   32800:	e59d5080 	ldr	r5, [sp, #128]	; 0x80
   32804:	e58d0004 	str	r0, [sp, #4]
   32808:	e58db028 	str	fp, [sp, #40]	; 0x28
   3280c:	e59d005c 	ldr	r0, [sp, #92]	; 0x5c
   32810:	e59db07c 	ldr	fp, [sp, #124]	; 0x7c
   32814:	e58d5030 	str	r5, [sp, #48]	; 0x30
   32818:	e59d5084 	ldr	r5, [sp, #132]	; 0x84
   3281c:	e58d0000 	str	r0, [sp]
   32820:	e58d1054 	str	r1, [sp, #84]	; 0x54
   32824:	e28d008c 	add	r0, sp, #140	; 0x8c
   32828:	e59f1064 	ldr	r1, [pc, #100]	; 32894 <StepValidator::service()+0x254>
   3282c:	e58db024 	str	fp, [sp, #36]	; 0x24
   32830:	e58da034 	str	sl, [sp, #52]	; 0x34
   32834:	e58d9038 	str	r9, [sp, #56]	; 0x38
   32838:	e58d803c 	str	r8, [sp, #60]	; 0x3c
   3283c:	e58d7040 	str	r7, [sp, #64]	; 0x40
   32840:	e58d6044 	str	r6, [sp, #68]	; 0x44
   32844:	e58d5048 	str	r5, [sp, #72]	; 0x48
   32848:	e58de04c 	str	lr, [sp, #76]	; 0x4c
   3284c:	e58dc050 	str	ip, [sp, #80]	; 0x50
   32850:	ebffc155 	bl	22dac <ee_sprintf>
            LogWrite(FromStepValidator, LOG_DEBUG, debugMsg);
   32854:	e28d208c 	add	r2, sp, #140	; 0x8c
   32858:	e3a01004 	mov	r1, #4
   3285c:	e59f0034 	ldr	r0, [pc, #52]	; 32898 <StepValidator::service()+0x258>
   32860:	ebffc644 	bl	24178 <LogWrite>
    }

    void hasGot()
    {
        _getPos++;
   32864:	e5943954 	ldr	r3, [r4, #2388]	; 0x954
        if (_getPos >= _bufLen)
   32868:	e5942958 	ldr	r2, [r4, #2392]	; 0x958
        _getPos++;
   3286c:	e2833001 	add	r3, r3, #1
   32870:	e5843954 	str	r3, [r4, #2388]	; 0x954
        if (_getPos >= _bufLen)
   32874:	e5943954 	ldr	r3, [r4, #2388]	; 0x954
   32878:	e1530002 	cmp	r3, r2
            _getPos = 0;
   3287c:	23a03000 	movcs	r3, #0
   32880:	25843954 	strcs	r3, [r4, #2388]	; 0x954
}
   32884:	e28ddfa1 	add	sp, sp, #644	; 0x284
   32888:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3288c:	0001869f 	.word	0x0001869f
   32890:	0000ffff 	.word	0x0000ffff
   32894:	0005550c 	.word	0x0005550c
   32898:	00055460 	.word	0x00055460

0003289c <StepValidator::getStatus(char*, int, char const*)>:
{
   3289c:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    ee_sprintf(pRespJson, "\"isrCount\":%d,\"errors\":%d,\"msgIdx\":%s", _stats.isrCalls, _stats.errors, statusIdxStr);
   328a0:	e2800a01 	add	r0, r0, #4096	; 0x1000
   328a4:	e590c964 	ldr	ip, [r0, #2404]	; 0x964
{
   328a8:	e24dd00c 	sub	sp, sp, #12
    ee_sprintf(pRespJson, "\"isrCount\":%d,\"errors\":%d,\"msgIdx\":%s", _stats.isrCalls, _stats.errors, statusIdxStr);
   328ac:	e5902960 	ldr	r2, [r0, #2400]	; 0x960
   328b0:	e58d3000 	str	r3, [sp]
   328b4:	e1a00001 	mov	r0, r1
   328b8:	e1a0300c 	mov	r3, ip
   328bc:	e59f1008 	ldr	r1, [pc, #8]	; 328cc <StepValidator::getStatus(char*, int, char const*)+0x30>
   328c0:	ebffc139 	bl	22dac <ee_sprintf>
}
   328c4:	e28dd00c 	add	sp, sp, #12
   328c8:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
   328cc:	000554cc 	.word	0x000554cc

000328d0 <CInterrupts::setup()>:
#define ARM_IRQ_MASK(irq)	(1 << ((irq) & (ARM_IRQS_PER_REG-1)))

void CInterrupts::setup()
{
	WR32(ARM_IC_FIQ_CONTROL, 0);
	WR32(ARM_IC_DISABLE_IRQS_1, (uint32_t) -1);
   328d0:	e3e02000 	mvn	r2, #0
	WR32(ARM_IC_FIQ_CONTROL, 0);
   328d4:	e3a01000 	mov	r1, #0
{
   328d8:	e92d4010 	push	{r4, lr}
	WR32(ARM_IC_FIQ_CONTROL, 0);
   328dc:	e59f3018 	ldr	r3, [pc, #24]	; 328fc <CInterrupts::setup()+0x2c>
   328e0:	e583120c 	str	r1, [r3, #524]	; 0x20c
	WR32(ARM_IC_DISABLE_IRQS_1, (uint32_t) -1);
   328e4:	e583221c 	str	r2, [r3, #540]	; 0x21c
	WR32(ARM_IC_DISABLE_IRQS_2, (uint32_t) -1);
   328e8:	e5832220 	str	r2, [r3, #544]	; 0x220
	WR32(ARM_IC_DISABLE_BASIC_IRQS, (uint32_t) -1);
   328ec:	e5832224 	str	r2, [r3, #548]	; 0x224
	lowlev_enable_irq();
   328f0:	ebff55fa 	bl	80e0 <lowlev_enable_irq>
	lowlev_enable_fiq();
}
   328f4:	e8bd4010 	pop	{r4, lr}
	lowlev_enable_fiq();
   328f8:	eaff55fe 	b	80f8 <lowlev_enable_fiq>
   328fc:	2000b000 	.word	0x2000b000

00032900 <CInterrupts::connectIRQ(unsigned int, void (*)(void*), void*)>:

void CInterrupts::connectIRQ(unsigned nIRQ, ISRFunctionType *pHandler, void *pParam)
{
    if ((nIRQ >= ARM_NUM_IRQ_LINES) || (!pHandler))
   32900:	e16f3f11 	clz	r3, r1
   32904:	e1a032a3 	lsr	r3, r3, #5
   32908:	e3500047 	cmp	r0, #71	; 0x47
   3290c:	83833001 	orrhi	r3, r3, #1
   32910:	e3530000 	cmp	r3, #0
   32914:	112fff1e 	bxne	lr
        return;
    _irqISR[nIRQ] = pHandler;
   32918:	e59f303c 	ldr	r3, [pc, #60]	; 3295c <CInterrupts::connectIRQ(unsigned int, void (*)(void*), void*)+0x5c>

void CInterrupts::enableIRQ(unsigned nIRQ)
{
    if (nIRQ >= ARM_NUM_IRQ_LINES)
        return;
	WR32(ARM_IC_IRQS_ENABLE(nIRQ), ARM_IRQ_MASK(nIRQ));
   3291c:	e350001f 	cmp	r0, #31
    _pParam[nIRQ] = pParam;
   32920:	e083c100 	add	ip, r3, r0, lsl #2
    _irqISR[nIRQ] = pHandler;
   32924:	e7831100 	str	r1, [r3, r0, lsl #2]
    _pParam[nIRQ] = pParam;
   32928:	e58c2120 	str	r2, [ip, #288]	; 0x120
	WR32(ARM_IC_IRQS_ENABLE(nIRQ), ARM_IRQ_MASK(nIRQ));
   3292c:	8a000005 	bhi	32948 <CInterrupts::connectIRQ(unsigned int, void (*)(void*), void*)+0x48>
   32930:	e59f2028 	ldr	r2, [pc, #40]	; 32960 <CInterrupts::connectIRQ(unsigned int, void (*)(void*), void*)+0x60>
   32934:	e3a03001 	mov	r3, #1
   32938:	e200001f 	and	r0, r0, #31
   3293c:	e1a00013 	lsl	r0, r3, r0
   32940:	e5820000 	str	r0, [r2]
}
   32944:	e12fff1e 	bx	lr
	WR32(ARM_IC_IRQS_ENABLE(nIRQ), ARM_IRQ_MASK(nIRQ));
   32948:	e59f3014 	ldr	r3, [pc, #20]	; 32964 <CInterrupts::connectIRQ(unsigned int, void (*)(void*), void*)+0x64>
   3294c:	e350003f 	cmp	r0, #63	; 0x3f
   32950:	e59f2010 	ldr	r2, [pc, #16]	; 32968 <CInterrupts::connectIRQ(unsigned int, void (*)(void*), void*)+0x68>
   32954:	91a02003 	movls	r2, r3
   32958:	eafffff5 	b	32934 <CInterrupts::connectIRQ(unsigned int, void (*)(void*), void*)+0x34>
   3295c:	000841b8 	.word	0x000841b8
   32960:	2000b210 	.word	0x2000b210
   32964:	2000b214 	.word	0x2000b214
   32968:	2000b218 	.word	0x2000b218

0003296c <CInterrupts::disconnectIRQ(unsigned int)>:
    if (nIRQ >= ARM_NUM_IRQ_LINES)
   3296c:	e3500047 	cmp	r0, #71	; 0x47
   32970:	812fff1e 	bxhi	lr

void CInterrupts::disableIRQ(unsigned nIRQ)
{
    if (nIRQ >= ARM_NUM_IRQ_LINES)
        return;
	WR32(ARM_IC_IRQS_DISABLE(nIRQ), ARM_IRQ_MASK(nIRQ));
   32974:	e3a03001 	mov	r3, #1
   32978:	e200201f 	and	r2, r0, #31
   3297c:	e350001f 	cmp	r0, #31
   32980:	e1a03213 	lsl	r3, r3, r2
   32984:	8a000007 	bhi	329a8 <CInterrupts::disconnectIRQ(unsigned int)+0x3c>
   32988:	e59fc02c 	ldr	ip, [pc, #44]	; 329bc <CInterrupts::disconnectIRQ(unsigned int)+0x50>
    _irqISR[nIRQ] = 0;
   3298c:	e3a01000 	mov	r1, #0
   32990:	e59f2028 	ldr	r2, [pc, #40]	; 329c0 <CInterrupts::disconnectIRQ(unsigned int)+0x54>
	WR32(ARM_IC_IRQS_DISABLE(nIRQ), ARM_IRQ_MASK(nIRQ));
   32994:	e58c3000 	str	r3, [ip]
    _pParam[nIRQ] = 0;
   32998:	e0823100 	add	r3, r2, r0, lsl #2
   3299c:	e5831120 	str	r1, [r3, #288]	; 0x120
    _irqISR[nIRQ] = 0;
   329a0:	e7821100 	str	r1, [r2, r0, lsl #2]
}
   329a4:	e12fff1e 	bx	lr
	WR32(ARM_IC_IRQS_DISABLE(nIRQ), ARM_IRQ_MASK(nIRQ));
   329a8:	e59f2014 	ldr	r2, [pc, #20]	; 329c4 <CInterrupts::disconnectIRQ(unsigned int)+0x58>
   329ac:	e350003f 	cmp	r0, #63	; 0x3f
   329b0:	e59fc010 	ldr	ip, [pc, #16]	; 329c8 <CInterrupts::disconnectIRQ(unsigned int)+0x5c>
   329b4:	81a0c002 	movhi	ip, r2
   329b8:	eafffff3 	b	3298c <CInterrupts::disconnectIRQ(unsigned int)+0x20>
   329bc:	2000b21c 	.word	0x2000b21c
   329c0:	000841b8 	.word	0x000841b8
   329c4:	2000b224 	.word	0x2000b224
   329c8:	2000b220 	.word	0x2000b220

000329cc <CInterrupts::connectFIQ(unsigned int, void (*)(void*), void*)>:
    if ((nFIQ >= ARM_NUM_IRQ_LINES) || (!pHandler))
   329cc:	e16f3f11 	clz	r3, r1
   329d0:	e1a032a3 	lsr	r3, r3, #5
   329d4:	e3500047 	cmp	r0, #71	; 0x47
   329d8:	83833001 	orrhi	r3, r3, #1
   329dc:	e3530000 	cmp	r3, #0
   329e0:	112fff1e 	bxne	lr
    _fiqIntNumber = nFIQ;
   329e4:	e59f301c 	ldr	r3, [pc, #28]	; 32a08 <CInterrupts::connectFIQ(unsigned int, void (*)(void*), void*)+0x3c>

void CInterrupts::enableFIQ(unsigned nFIQ)
{
    if (nFIQ >= ARM_NUM_IRQ_LINES)
        return;
	WR32(ARM_IC_FIQ_CONTROL, nFIQ | 0x80);
   329e8:	e59fc01c 	ldr	ip, [pc, #28]	; 32a0c <CInterrupts::connectFIQ(unsigned int, void (*)(void*), void*)+0x40>
{
   329ec:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
	WR32(ARM_IC_FIQ_CONTROL, nFIQ | 0x80);
   329f0:	e380e080 	orr	lr, r0, #128	; 0x80
    _fiqIntNumber = nFIQ;
   329f4:	e5830240 	str	r0, [r3, #576]	; 0x240
	_fiqISR = pHandler;
   329f8:	e5831244 	str	r1, [r3, #580]	; 0x244
	_pFIQParam = pParam;
   329fc:	e5832248 	str	r2, [r3, #584]	; 0x248
	WR32(ARM_IC_FIQ_CONTROL, nFIQ | 0x80);
   32a00:	e58ce20c 	str	lr, [ip, #524]	; 0x20c
}
   32a04:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
   32a08:	000841b8 	.word	0x000841b8
   32a0c:	2000b000 	.word	0x2000b000

00032a10 <CInterrupts::disconnectFIQ()>:
}

void CInterrupts::disableFIQ ()
{
	WR32(ARM_IC_FIQ_CONTROL, 0);
   32a10:	e3a03000 	mov	r3, #0
	_fiqISR = NULL;
   32a14:	e59f2010 	ldr	r2, [pc, #16]	; 32a2c <CInterrupts::disconnectFIQ()+0x1c>
	WR32(ARM_IC_FIQ_CONTROL, 0);
   32a18:	e59f1010 	ldr	r1, [pc, #16]	; 32a30 <CInterrupts::disconnectFIQ()+0x20>
   32a1c:	e581320c 	str	r3, [r1, #524]	; 0x20c
	_fiqISR = NULL;
   32a20:	e5823244 	str	r3, [r2, #580]	; 0x244
	_pFIQParam = NULL;
   32a24:	e5823248 	str	r3, [r2, #584]	; 0x248
}
   32a28:	e12fff1e 	bx	lr
   32a2c:	000841b8 	.word	0x000841b8
   32a30:	2000b000 	.word	0x2000b000

00032a34 <CInterrupts::enableIRQ(unsigned int)>:
    if (nIRQ >= ARM_NUM_IRQ_LINES)
   32a34:	e3500047 	cmp	r0, #71	; 0x47
   32a38:	812fff1e 	bxhi	lr
	WR32(ARM_IC_IRQS_ENABLE(nIRQ), ARM_IRQ_MASK(nIRQ));
   32a3c:	e3a03001 	mov	r3, #1
   32a40:	e200201f 	and	r2, r0, #31
   32a44:	e350001f 	cmp	r0, #31
   32a48:	e1a03213 	lsl	r3, r3, r2
   32a4c:	8a000002 	bhi	32a5c <CInterrupts::enableIRQ(unsigned int)+0x28>
   32a50:	e59f0020 	ldr	r0, [pc, #32]	; 32a78 <CInterrupts::enableIRQ(unsigned int)+0x44>
   32a54:	e5803000 	str	r3, [r0]
}
   32a58:	e12fff1e 	bx	lr
	WR32(ARM_IC_IRQS_ENABLE(nIRQ), ARM_IRQ_MASK(nIRQ));
   32a5c:	e59f2018 	ldr	r2, [pc, #24]	; 32a7c <CInterrupts::enableIRQ(unsigned int)+0x48>
   32a60:	e59f1018 	ldr	r1, [pc, #24]	; 32a80 <CInterrupts::enableIRQ(unsigned int)+0x4c>
   32a64:	e350003f 	cmp	r0, #63	; 0x3f
   32a68:	91a00002 	movls	r0, r2
   32a6c:	81a00001 	movhi	r0, r1
   32a70:	e5803000 	str	r3, [r0]
}
   32a74:	e12fff1e 	bx	lr
   32a78:	2000b210 	.word	0x2000b210
   32a7c:	2000b214 	.word	0x2000b214
   32a80:	2000b218 	.word	0x2000b218

00032a84 <CInterrupts::disableIRQ(unsigned int)>:
    if (nIRQ >= ARM_NUM_IRQ_LINES)
   32a84:	e3500047 	cmp	r0, #71	; 0x47
   32a88:	812fff1e 	bxhi	lr
	WR32(ARM_IC_IRQS_DISABLE(nIRQ), ARM_IRQ_MASK(nIRQ));
   32a8c:	e3a03001 	mov	r3, #1
   32a90:	e200201f 	and	r2, r0, #31
   32a94:	e350001f 	cmp	r0, #31
   32a98:	e1a03213 	lsl	r3, r3, r2
   32a9c:	8a000002 	bhi	32aac <CInterrupts::disableIRQ(unsigned int)+0x28>
   32aa0:	e59f0020 	ldr	r0, [pc, #32]	; 32ac8 <CInterrupts::disableIRQ(unsigned int)+0x44>
   32aa4:	e5803000 	str	r3, [r0]
}
   32aa8:	e12fff1e 	bx	lr
	WR32(ARM_IC_IRQS_DISABLE(nIRQ), ARM_IRQ_MASK(nIRQ));
   32aac:	e59f2018 	ldr	r2, [pc, #24]	; 32acc <CInterrupts::disableIRQ(unsigned int)+0x48>
   32ab0:	e59f1018 	ldr	r1, [pc, #24]	; 32ad0 <CInterrupts::disableIRQ(unsigned int)+0x4c>
   32ab4:	e350003f 	cmp	r0, #63	; 0x3f
   32ab8:	91a00002 	movls	r0, r2
   32abc:	81a00001 	movhi	r0, r1
   32ac0:	e5803000 	str	r3, [r0]
}
   32ac4:	e12fff1e 	bx	lr
   32ac8:	2000b21c 	.word	0x2000b21c
   32acc:	2000b220 	.word	0x2000b220
   32ad0:	2000b224 	.word	0x2000b224

00032ad4 <CInterrupts::enableFIQ(unsigned int)>:
    if (nFIQ >= ARM_NUM_IRQ_LINES)
   32ad4:	e3500047 	cmp	r0, #71	; 0x47
	WR32(ARM_IC_FIQ_CONTROL, nFIQ | 0x80);
   32ad8:	959f3008 	ldrls	r3, [pc, #8]	; 32ae8 <CInterrupts::enableFIQ(unsigned int)+0x14>
   32adc:	93800080 	orrls	r0, r0, #128	; 0x80
   32ae0:	9583020c 	strls	r0, [r3, #524]	; 0x20c
}
   32ae4:	e12fff1e 	bx	lr
   32ae8:	2000b000 	.word	0x2000b000

00032aec <CInterrupts::disableFIQ()>:
	WR32(ARM_IC_FIQ_CONTROL, 0);
   32aec:	e3a02000 	mov	r2, #0
   32af0:	e59f3004 	ldr	r3, [pc, #4]	; 32afc <CInterrupts::disableFIQ()+0x10>
   32af4:	e583220c 	str	r2, [r3, #524]	; 0x20c
}
   32af8:	e12fff1e 	bx	lr
   32afc:	2000b000 	.word	0x2000b000

00032b00 <CInterrupts::irqHandler(unsigned int)>:

bool CInterrupts::irqHandler(unsigned nIRQ)
{
    if (nIRQ >= ARM_NUM_IRQ_LINES)
   32b00:	e3500047 	cmp	r0, #71	; 0x47
   32b04:	8a000009 	bhi	32b30 <CInterrupts::irqHandler(unsigned int)+0x30>
        return false;
    ISRFunctionType *pHandler = _irqISR[nIRQ];
   32b08:	e59f3064 	ldr	r3, [pc, #100]	; 32b74 <CInterrupts::irqHandler(unsigned int)+0x74>
   32b0c:	e7932100 	ldr	r2, [r3, r0, lsl #2]
    if (pHandler != 0)
   32b10:	e3520000 	cmp	r2, #0
   32b14:	0a000007 	beq	32b38 <CInterrupts::irqHandler(unsigned int)+0x38>
    {
        (*pHandler) (_pParam[nIRQ]);
   32b18:	e0830100 	add	r0, r3, r0, lsl #2
{
   32b1c:	e92d4010 	push	{r4, lr}
        (*pHandler) (_pParam[nIRQ]);
   32b20:	e5900120 	ldr	r0, [r0, #288]	; 0x120
   32b24:	e12fff32 	blx	r2
        return true;
   32b28:	e3a00001 	mov	r0, #1
    else
    {
        disableIRQ(nIRQ);
    }
    return false;
}
   32b2c:	e8bd8010 	pop	{r4, pc}
        return false;
   32b30:	e3a00000 	mov	r0, #0
}
   32b34:	e12fff1e 	bx	lr
	WR32(ARM_IC_IRQS_DISABLE(nIRQ), ARM_IRQ_MASK(nIRQ));
   32b38:	e3a03001 	mov	r3, #1
   32b3c:	e200201f 	and	r2, r0, #31
   32b40:	e350001f 	cmp	r0, #31
   32b44:	e1a03213 	lsl	r3, r3, r2
   32b48:	9a000007 	bls	32b6c <CInterrupts::irqHandler(unsigned int)+0x6c>
   32b4c:	e59f2024 	ldr	r2, [pc, #36]	; 32b78 <CInterrupts::irqHandler(unsigned int)+0x78>
   32b50:	e59f1024 	ldr	r1, [pc, #36]	; 32b7c <CInterrupts::irqHandler(unsigned int)+0x7c>
   32b54:	e350003f 	cmp	r0, #63	; 0x3f
   32b58:	91a00002 	movls	r0, r2
   32b5c:	81a00001 	movhi	r0, r1
   32b60:	e5803000 	str	r3, [r0]
    return false;
   32b64:	e3a00000 	mov	r0, #0
   32b68:	e12fff1e 	bx	lr
	WR32(ARM_IC_IRQS_DISABLE(nIRQ), ARM_IRQ_MASK(nIRQ));
   32b6c:	e59f000c 	ldr	r0, [pc, #12]	; 32b80 <CInterrupts::irqHandler(unsigned int)+0x80>
   32b70:	eafffffa 	b	32b60 <CInterrupts::irqHandler(unsigned int)+0x60>
   32b74:	000841b8 	.word	0x000841b8
   32b78:	2000b220 	.word	0x2000b220
   32b7c:	2000b224 	.word	0x2000b224
   32b80:	2000b21c 	.word	0x2000b21c

00032b84 <CInterrupts::interruptService()>:

void CInterrupts::interruptService()
{
   32b84:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
	uint32_t pending[ARM_IC_IRQ_REGS];
	pending[0] = RD32(ARM_IC_IRQ_PENDING_1);
	pending[1] = RD32(ARM_IC_IRQ_PENDING_2);
	pending[2] = RD32(ARM_IC_IRQ_BASIC_PENDING) & 0xFF;
	for (unsigned nReg = 0; nReg < ARM_IC_IRQ_REGS; nReg++)
   32b88:	e3a00000 	mov	r0, #0
	WR32(ARM_IC_IRQS_DISABLE(nIRQ), ARM_IRQ_MASK(nIRQ));
   32b8c:	e3a05001 	mov	r5, #1
	pending[0] = RD32(ARM_IC_IRQ_PENDING_1);
   32b90:	e59f30c0 	ldr	r3, [pc, #192]	; 32c58 <CInterrupts::interruptService()+0xd4>
{
   32b94:	e24dd010 	sub	sp, sp, #16
	pending[0] = RD32(ARM_IC_IRQ_PENDING_1);
   32b98:	e5931204 	ldr	r1, [r3, #516]	; 0x204
	pending[1] = RD32(ARM_IC_IRQ_PENDING_2);
   32b9c:	e5932208 	ldr	r2, [r3, #520]	; 0x208
	pending[2] = RD32(ARM_IC_IRQ_BASIC_PENDING) & 0xFF;
   32ba0:	e5933200 	ldr	r3, [r3, #512]	; 0x200
    ISRFunctionType *pHandler = _irqISR[nIRQ];
   32ba4:	e59fc0b0 	ldr	ip, [pc, #176]	; 32c5c <CInterrupts::interruptService()+0xd8>
	pending[2] = RD32(ARM_IC_IRQ_BASIC_PENDING) & 0xFF;
   32ba8:	e6ef3073 	uxtb	r3, r3
	pending[1] = RD32(ARM_IC_IRQ_PENDING_2);
   32bac:	e1cd20f8 	strd	r2, [sp, #8]
	WR32(ARM_IC_IRQS_DISABLE(nIRQ), ARM_IRQ_MASK(nIRQ));
   32bb0:	e59f70a8 	ldr	r7, [pc, #168]	; 32c60 <CInterrupts::interruptService()+0xdc>
   32bb4:	e59f80a8 	ldr	r8, [pc, #168]	; 32c64 <CInterrupts::interruptService()+0xe0>
   32bb8:	e59f60a8 	ldr	r6, [pc, #168]	; 32c68 <CInterrupts::interruptService()+0xe4>
	pending[0] = RD32(ARM_IC_IRQ_PENDING_1);
   32bbc:	e58d1004 	str	r1, [sp, #4]
   32bc0:	e28de004 	add	lr, sp, #4
	{
		uint32_t nPending = pending[nReg];
   32bc4:	e79e3100 	ldr	r3, [lr, r0, lsl #2]
		if (nPending != 0)
   32bc8:	e3530000 	cmp	r3, #0
   32bcc:	1a000004 	bne	32be4 <CInterrupts::interruptService()+0x60>
	for (unsigned nReg = 0; nReg < ARM_IC_IRQ_REGS; nReg++)
   32bd0:	e2800001 	add	r0, r0, #1
   32bd4:	e3500003 	cmp	r0, #3
   32bd8:	1afffff9 	bne	32bc4 <CInterrupts::interruptService()+0x40>
				nIRQ++;
			}
			while (nPending != 0);
		}
	}
}
   32bdc:	e28dd010 	add	sp, sp, #16
   32be0:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
			unsigned nIRQ = nReg * ARM_IRQS_PER_REG;
   32be4:	e1a01280 	lsl	r1, r0, #5
   32be8:	ea000002 	b	32bf8 <CInterrupts::interruptService()+0x74>
			while (nPending != 0);
   32bec:	e1b030a3 	lsrs	r3, r3, #1
				nIRQ++;
   32bf0:	e2811001 	add	r1, r1, #1
			while (nPending != 0);
   32bf4:	0afffff5 	beq	32bd0 <CInterrupts::interruptService()+0x4c>
				if ((nPending & 1) && irqHandler(nIRQ))
   32bf8:	e1e02003 	mvn	r2, r3
    if (nIRQ >= ARM_NUM_IRQ_LINES)
   32bfc:	e3510047 	cmp	r1, #71	; 0x47
   32c00:	83822001 	orrhi	r2, r2, #1
   32c04:	e3120001 	tst	r2, #1
   32c08:	1afffff7 	bne	32bec <CInterrupts::interruptService()+0x68>
    ISRFunctionType *pHandler = _irqISR[nIRQ];
   32c0c:	e79c2101 	ldr	r2, [ip, r1, lsl #2]
   32c10:	e1a04101 	lsl	r4, r1, #2
    if (pHandler != 0)
   32c14:	e3520000 	cmp	r2, #0
   32c18:	0a000004 	beq	32c30 <CInterrupts::interruptService()+0xac>
        (*pHandler) (_pParam[nIRQ]);
   32c1c:	e08cc004 	add	ip, ip, r4
   32c20:	e59c0120 	ldr	r0, [ip, #288]	; 0x120
}
   32c24:	e28dd010 	add	sp, sp, #16
   32c28:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
        (*pHandler) (_pParam[nIRQ]);
   32c2c:	e12fff12 	bx	r2
	WR32(ARM_IC_IRQS_DISABLE(nIRQ), ARM_IRQ_MASK(nIRQ));
   32c30:	e351001f 	cmp	r1, #31
   32c34:	e201201f 	and	r2, r1, #31
   32c38:	e1a02215 	lsl	r2, r5, r2
   32c3c:	91a04007 	movls	r4, r7
   32c40:	9a000002 	bls	32c50 <CInterrupts::interruptService()+0xcc>
   32c44:	e351003f 	cmp	r1, #63	; 0x3f
   32c48:	91a04008 	movls	r4, r8
   32c4c:	81a04006 	movhi	r4, r6
   32c50:	e5842000 	str	r2, [r4]
   32c54:	eaffffe4 	b	32bec <CInterrupts::interruptService()+0x68>
   32c58:	2000b000 	.word	0x2000b000
   32c5c:	000841b8 	.word	0x000841b8
   32c60:	2000b21c 	.word	0x2000b21c
   32c64:	2000b220 	.word	0x2000b220
   32c68:	2000b224 	.word	0x2000b224

00032c6c <CInterrupts::fiqService()>:

void CInterrupts::fiqService()
{
	if (_fiqISR)
   32c6c:	e59f2010 	ldr	r2, [pc, #16]	; 32c84 <CInterrupts::fiqService()+0x18>
   32c70:	e5923244 	ldr	r3, [r2, #580]	; 0x244
   32c74:	e3530000 	cmp	r3, #0
   32c78:	012fff1e 	bxeq	lr
		(*_fiqISR)(_pFIQParam);
   32c7c:	e5920248 	ldr	r0, [r2, #584]	; 0x248
   32c80:	e12fff13 	bx	r3
   32c84:	000841b8 	.word	0x000841b8

00032c88 <irq_handler_>:
}

extern "C" void __attribute__((interrupt("IRQ"))) irq_handler_(void)
{
   32c88:	e24ee004 	sub	lr, lr, #4
   32c8c:	e92d51ff 	push	{r0, r1, r2, r3, r4, r5, r6, r7, r8, ip, lr}
	for (unsigned nReg = 0; nReg < ARM_IC_IRQ_REGS; nReg++)
   32c90:	e3a00000 	mov	r0, #0
	WR32(ARM_IC_IRQS_DISABLE(nIRQ), ARM_IRQ_MASK(nIRQ));
   32c94:	e3a05001 	mov	r5, #1
	pending[0] = RD32(ARM_IC_IRQ_PENDING_1);
   32c98:	e59f30c0 	ldr	r3, [pc, #192]	; 32d60 <irq_handler_+0xd8>
{
   32c9c:	e24dd014 	sub	sp, sp, #20
	pending[0] = RD32(ARM_IC_IRQ_PENDING_1);
   32ca0:	e5931204 	ldr	r1, [r3, #516]	; 0x204
	pending[1] = RD32(ARM_IC_IRQ_PENDING_2);
   32ca4:	e5932208 	ldr	r2, [r3, #520]	; 0x208
	pending[2] = RD32(ARM_IC_IRQ_BASIC_PENDING) & 0xFF;
   32ca8:	e5933200 	ldr	r3, [r3, #512]	; 0x200
    ISRFunctionType *pHandler = _irqISR[nIRQ];
   32cac:	e59fc0b0 	ldr	ip, [pc, #176]	; 32d64 <irq_handler_+0xdc>
	pending[2] = RD32(ARM_IC_IRQ_BASIC_PENDING) & 0xFF;
   32cb0:	e6ef3073 	uxtb	r3, r3
	pending[1] = RD32(ARM_IC_IRQ_PENDING_2);
   32cb4:	e1cd20f8 	strd	r2, [sp, #8]
	WR32(ARM_IC_IRQS_DISABLE(nIRQ), ARM_IRQ_MASK(nIRQ));
   32cb8:	e59f70a8 	ldr	r7, [pc, #168]	; 32d68 <irq_handler_+0xe0>
   32cbc:	e59f80a8 	ldr	r8, [pc, #168]	; 32d6c <irq_handler_+0xe4>
   32cc0:	e59f60a8 	ldr	r6, [pc, #168]	; 32d70 <irq_handler_+0xe8>
	pending[0] = RD32(ARM_IC_IRQ_PENDING_1);
   32cc4:	e58d1004 	str	r1, [sp, #4]
   32cc8:	e28de004 	add	lr, sp, #4
		uint32_t nPending = pending[nReg];
   32ccc:	e79e3100 	ldr	r3, [lr, r0, lsl #2]
		if (nPending != 0)
   32cd0:	e3530000 	cmp	r3, #0
   32cd4:	1a000004 	bne	32cec <irq_handler_+0x64>
	for (unsigned nReg = 0; nReg < ARM_IC_IRQ_REGS; nReg++)
   32cd8:	e2800001 	add	r0, r0, #1
   32cdc:	e3500003 	cmp	r0, #3
   32ce0:	1afffff9 	bne	32ccc <irq_handler_+0x44>
    CInterrupts::interruptService();
}
   32ce4:	e28dd014 	add	sp, sp, #20
   32ce8:	e8fd91ff 	ldm	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, ip, pc}^
			unsigned nIRQ = nReg * ARM_IRQS_PER_REG;
   32cec:	e1a01280 	lsl	r1, r0, #5
   32cf0:	ea000002 	b	32d00 <irq_handler_+0x78>
			while (nPending != 0);
   32cf4:	e1b030a3 	lsrs	r3, r3, #1
				nIRQ++;
   32cf8:	e2811001 	add	r1, r1, #1
			while (nPending != 0);
   32cfc:	0afffff5 	beq	32cd8 <irq_handler_+0x50>
				if ((nPending & 1) && irqHandler(nIRQ))
   32d00:	e1e02003 	mvn	r2, r3
    if (nIRQ >= ARM_NUM_IRQ_LINES)
   32d04:	e3510047 	cmp	r1, #71	; 0x47
   32d08:	83822001 	orrhi	r2, r2, #1
   32d0c:	e3120001 	tst	r2, #1
   32d10:	1afffff7 	bne	32cf4 <irq_handler_+0x6c>
    ISRFunctionType *pHandler = _irqISR[nIRQ];
   32d14:	e79c2101 	ldr	r2, [ip, r1, lsl #2]
   32d18:	e1a04101 	lsl	r4, r1, #2
    if (pHandler != 0)
   32d1c:	e3520000 	cmp	r2, #0
   32d20:	0a000004 	beq	32d38 <irq_handler_+0xb0>
        (*pHandler) (_pParam[nIRQ]);
   32d24:	e08cc004 	add	ip, ip, r4
   32d28:	e59c0120 	ldr	r0, [ip, #288]	; 0x120
   32d2c:	e12fff32 	blx	r2
}
   32d30:	e28dd014 	add	sp, sp, #20
   32d34:	e8fd91ff 	ldm	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, ip, pc}^
	WR32(ARM_IC_IRQS_DISABLE(nIRQ), ARM_IRQ_MASK(nIRQ));
   32d38:	e351001f 	cmp	r1, #31
   32d3c:	e201201f 	and	r2, r1, #31
   32d40:	e1a02215 	lsl	r2, r5, r2
   32d44:	91a04007 	movls	r4, r7
   32d48:	9a000002 	bls	32d58 <irq_handler_+0xd0>
   32d4c:	e351003f 	cmp	r1, #63	; 0x3f
   32d50:	91a04008 	movls	r4, r8
   32d54:	81a04006 	movhi	r4, r6
   32d58:	e5842000 	str	r2, [r4]
   32d5c:	eaffffe4 	b	32cf4 <irq_handler_+0x6c>
   32d60:	2000b000 	.word	0x2000b000
   32d64:	000841b8 	.word	0x000841b8
   32d68:	2000b21c 	.word	0x2000b21c
   32d6c:	2000b220 	.word	0x2000b220
   32d70:	2000b224 	.word	0x2000b224

00032d74 <c_firq_handler>:
	if (_fiqISR)
   32d74:	e59f2010 	ldr	r2, [pc, #16]	; 32d8c <c_firq_handler+0x18>
   32d78:	e5923244 	ldr	r3, [r2, #580]	; 0x244
   32d7c:	e3530000 	cmp	r3, #0
   32d80:	012fff1e 	bxeq	lr
		(*_fiqISR)(_pFIQParam);
   32d84:	e5920248 	ldr	r0, [r2, #584]	; 0x248
   32d88:	e12fff13 	bx	r3
   32d8c:	000841b8 	.word	0x000841b8

00032d90 <Display::foreground(DISPLAY_FX_COLOUR)>:
// Windows
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void Display::windowForeground(int winIdx, DISPLAY_FX_COLOUR colour)
{
    if (!_displayStarted)
   32d90:	e5d03b4c 	ldrb	r3, [r0, #2892]	; 0xb4c
   32d94:	e3530000 	cmp	r3, #0
   32d98:	012fff1e 	bxeq	lr
        return;
    _displayFX.windowForeground(winIdx, colour);
   32d9c:	e1a02001 	mov	r2, r1
   32da0:	e2800004 	add	r0, r0, #4
   32da4:	e3a01000 	mov	r1, #0
   32da8:	ea00027e 	b	337a8 <DisplayFX::windowForeground(int, DISPLAY_FX_COLOUR)>

00032dac <Display::write(int, int, char const*)>:
}

void Display::windowWrite(int winIdx, int col, int row, const char* pStr)
{
    if (!_displayStarted)
   32dac:	e5d0cb4c 	ldrb	ip, [r0, #2892]	; 0xb4c
   32db0:	e35c0000 	cmp	ip, #0
   32db4:	012fff1e 	bxeq	lr
   32db8:	e1a0c003 	mov	ip, r3
{
    windowForeground(DISPLAY_WINDOW_TARGET, colour);
}

void Display::write(int col, int row, const char* pStr)
{
   32dbc:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   32dc0:	e24dd00c 	sub	sp, sp, #12
   32dc4:	e1a03002 	mov	r3, r2
    _displayFX.windowPut(winIdx, col, row, pStr);
   32dc8:	e58dc000 	str	ip, [sp]
   32dcc:	e1a02001 	mov	r2, r1
   32dd0:	e2800004 	add	r0, r0, #4
   32dd4:	e3a01000 	mov	r1, #0
   32dd8:	eb00021d 	bl	33654 <DisplayFX::windowPut(int, int, int, char const*)>
    windowWrite(DISPLAY_WINDOW_TARGET, col, row, pStr);
}
   32ddc:	e28dd00c 	add	sp, sp, #12
   32de0:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

00032de4 <Display::write(int, int, int)>:
    if (!_displayStarted)
   32de4:	e5d0cb4c 	ldrb	ip, [r0, #2892]	; 0xb4c
   32de8:	e35c0000 	cmp	ip, #0
   32dec:	012fff1e 	bxeq	lr
   32df0:	e1a0c003 	mov	ip, r3

void Display::write(int col, int row, int ch)
{
   32df4:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   32df8:	e24dd00c 	sub	sp, sp, #12
   32dfc:	e1a03002 	mov	r3, r2
    _displayFX.windowPut(winIdx, col, row, ch);
   32e00:	e58dc000 	str	ip, [sp]
   32e04:	e1a02001 	mov	r2, r1
   32e08:	e2800004 	add	r0, r0, #4
   32e0c:	e3a01000 	mov	r1, #0
   32e10:	eb00023e 	bl	33710 <DisplayFX::windowPut(int, int, int, int)>
    windowWrite(DISPLAY_WINDOW_TARGET, col, row, ch);
}
   32e14:	e28dd00c 	add	sp, sp, #12
   32e18:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

00032e1c <Display::setPixel(int, int, int, DISPLAY_FX_COLOUR)>:

void Display::setPixel(int x, int y, int value, DISPLAY_FX_COLOUR colour)
{
   32e1c:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    if (!_displayStarted)
   32e20:	e5d0cb4c 	ldrb	ip, [r0, #2892]	; 0xb4c
{
   32e24:	e24dd00c 	sub	sp, sp, #12
    if (!_displayStarted)
   32e28:	e35c0000 	cmp	ip, #0
{
   32e2c:	e1dde1d0 	ldrsb	lr, [sp, #16]
    if (!_displayStarted)
   32e30:	0a000006 	beq	32e50 <Display::setPixel(int, int, int, DISPLAY_FX_COLOUR)+0x34>
   32e34:	e1a0c003 	mov	ip, r3
    _displayFX.windowSetPixel(winIdx, x, y, value, colour);
   32e38:	e2800004 	add	r0, r0, #4
   32e3c:	e1a03002 	mov	r3, r2
   32e40:	e88d5000 	stm	sp, {ip, lr}
   32e44:	e1a02001 	mov	r2, r1
   32e48:	e3a01000 	mov	r1, #0
   32e4c:	eb00025b 	bl	337c0 <DisplayFX::windowSetPixel(int, int, int, int, DISPLAY_FX_COLOUR)>
    windowSetPixel(DISPLAY_WINDOW_TARGET, x, y, value, colour);
}
   32e50:	e28dd00c 	add	sp, sp, #12
   32e54:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

00032e58 <Display::getFramebuffer(FrameBufferInfo&)>:

void Display::getFramebuffer(FrameBufferInfo& frameBufferInfo)
{
    _displayFX.getFramebuffer(DISPLAY_WINDOW_TARGET, frameBufferInfo);
   32e58:	e1a02001 	mov	r2, r1
   32e5c:	e2800004 	add	r0, r0, #4
   32e60:	e3a01000 	mov	r1, #0
   32e64:	ea0002a8 	b	3390c <DisplayFX::getFramebuffer(int, FrameBufferInfo&)>

00032e68 <Display::targetLayout(int, int, int, int, int, int, WgfxFont*, int, int)>:
    if (!_displayStarted)
   32e68:	e5d0cb4c 	ldrb	ip, [r0, #2892]	; 0xb4c
   32e6c:	e35c0000 	cmp	ip, #0
   32e70:	012fff1e 	bxeq	lr
{
   32e74:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   32e78:	e1a07003 	mov	r7, r3
   32e7c:	e1a06002 	mov	r6, r2
    _displayFX.screenRectClear(0, 0, DISPLAY_TARGET_WIDTH + DISPLAY_TARGET_BORDER * 2, DISPLAY_TARGET_HEIGHT + DISPLAY_TARGET_BORDER * 2);
   32e80:	e3a03e31 	mov	r3, #784	; 0x310
   32e84:	e3a02000 	mov	r2, #0
{
   32e88:	e24dd034 	sub	sp, sp, #52	; 0x34
    _displayFX.screenRectClear(0, 0, DISPLAY_TARGET_WIDTH + DISPLAY_TARGET_BORDER * 2, DISPLAY_TARGET_HEIGHT + DISPLAY_TARGET_BORDER * 2);
   32e8c:	e2804004 	add	r4, r0, #4
   32e90:	e1a05001 	mov	r5, r1
   32e94:	e1a00004 	mov	r0, r4
   32e98:	e58d3000 	str	r3, [sp]
   32e9c:	e1a01002 	mov	r1, r2
   32ea0:	e3a03e41 	mov	r3, #1040	; 0x410
   32ea4:	eb0001d2 	bl	335f4 <DisplayFX::screenRectClear(int, int, int, int)>
    _displayFX.windowSetup(DISPLAY_WINDOW_TARGET, 0, 0, pixX, pixY, cellX, cellY, xScale, yScale,
   32ea8:	e3a03000 	mov	r3, #0
   32eac:	e3a02008 	mov	r2, #8
   32eb0:	e59d105c 	ldr	r1, [sp, #92]	; 0x5c
   32eb4:	e58d2028 	str	r2, [sp, #40]	; 0x28
   32eb8:	e58d1020 	str	r1, [sp, #32]
   32ebc:	e59d1058 	ldr	r1, [sp, #88]	; 0x58
   32ec0:	e58d2024 	str	r2, [sp, #36]	; 0x24
   32ec4:	e58d101c 	str	r1, [sp, #28]
   32ec8:	e59d1054 	ldr	r1, [sp, #84]	; 0x54
   32ecc:	e1a00004 	mov	r0, r4
   32ed0:	e58d1018 	str	r1, [sp, #24]
   32ed4:	e59d1050 	ldr	r1, [sp, #80]	; 0x50
   32ed8:	e1cd60f4 	strd	r6, [sp, #4]
   32edc:	e58d1014 	str	r1, [sp, #20]
   32ee0:	e59d104c 	ldr	r1, [sp, #76]	; 0x4c
   32ee4:	e58d5000 	str	r5, [sp]
   32ee8:	e58d1010 	str	r1, [sp, #16]
   32eec:	e59d1048 	ldr	r1, [sp, #72]	; 0x48
   32ef0:	e1a02003 	mov	r2, r3
   32ef4:	e58d100c 	str	r1, [sp, #12]
   32ef8:	e1a01003 	mov	r1, r3
   32efc:	eb000342 	bl	33c0c <DisplayFX::windowSetup(int, int, int, int, int, int, int, int, int, WgfxFont*, int, int, int, int)>
}
   32f00:	e28dd034 	add	sp, sp, #52	; 0x34
   32f04:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}

00032f08 <Display::Display()>:
Display::Display()
   32f08:	e59f301c 	ldr	r3, [pc, #28]	; 32f2c <Display::Display()+0x24>
   32f0c:	e92d4010 	push	{r4, lr}
   32f10:	e1a04000 	mov	r4, r0
   32f14:	e4803004 	str	r3, [r0], #4
   32f18:	eb000108 	bl	33340 <DisplayFX::DisplayFX()>
    _displayStarted = false;
   32f1c:	e3a03000 	mov	r3, #0
}
   32f20:	e1a00004 	mov	r0, r4
    _displayStarted = false;
   32f24:	e5c43b4c 	strb	r3, [r4, #2892]	; 0xb4c
}
   32f28:	e8bd8010 	pop	{r4, pc}
   32f2c:	00055568 	.word	0x00055568

00032f30 <Display::~Display()>:
Display::~Display()
   32f30:	e92d4010 	push	{r4, lr}
   32f34:	e1a04000 	mov	r4, r0
   32f38:	e59f300c 	ldr	r3, [pc, #12]	; 32f4c <Display::~Display()+0x1c>
   32f3c:	e4803004 	str	r3, [r0], #4
   32f40:	eb000155 	bl	3349c <DisplayFX::~DisplayFX()>
}
   32f44:	e1a00004 	mov	r0, r4
   32f48:	e8bd8010 	pop	{r4, pc}
   32f4c:	00055568 	.word	0x00055568

00032f50 <Display::init()>:
{
   32f50:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    _displayFX.init(DISPLAY_WIDTH, DISPLAY_HEIGHT);
   32f54:	e2808004 	add	r8, r0, #4
{
   32f58:	e24dd030 	sub	sp, sp, #48	; 0x30
   32f5c:	e1a09000 	mov	r9, r0
    _displayFX.init(DISPLAY_WIDTH, DISPLAY_HEIGHT);
   32f60:	e3a02fe1 	mov	r2, #900	; 0x384
   32f64:	e1a00008 	mov	r0, r8
   32f68:	e3a01d19 	mov	r1, #1600	; 0x640
   32f6c:	eb0002a0 	bl	339f4 <DisplayFX::init(int, int)>
    _displayFX.windowSetup(DISPLAY_WINDOW_TARGET, 0, 0, DISPLAY_TARGET_WIDTH, DISPLAY_TARGET_HEIGHT, 
   32f70:	e3e04000 	mvn	r4, #0
   32f74:	e3a06000 	mov	r6, #0
   32f78:	e3a05001 	mov	r5, #1
   32f7c:	e3a07008 	mov	r7, #8
   32f80:	e3a0ec03 	mov	lr, #768	; 0x300
   32f84:	e3a0cb01 	mov	ip, #1024	; 0x400
    _displayFX.windowSetup(DISPLAY_WINDOW_STATUS, DISPLAY_TARGET_WIDTH + DISPLAY_TARGET_BORDER * 2 + DISPLAY_STATUS_MARGIN, 0,
   32f88:	e59fa0d4 	ldr	sl, [pc, #212]	; 33064 <Display::init()+0x114>
    _displayFX.windowSetup(DISPLAY_WINDOW_TARGET, 0, 0, DISPLAY_TARGET_WIDTH, DISPLAY_TARGET_HEIGHT, 
   32f8c:	e58de004 	str	lr, [sp, #4]
   32f90:	e58dc000 	str	ip, [sp]
   32f94:	e1a00008 	mov	r0, r8
   32f98:	e1a03006 	mov	r3, r6
   32f9c:	e1a02006 	mov	r2, r6
   32fa0:	e1a01006 	mov	r1, r6
   32fa4:	e58d7028 	str	r7, [sp, #40]	; 0x28
   32fa8:	e58d7024 	str	r7, [sp, #36]	; 0x24
   32fac:	e58d700c 	str	r7, [sp, #12]
   32fb0:	e58d7008 	str	r7, [sp, #8]
   32fb4:	e58d4020 	str	r4, [sp, #32]
   32fb8:	e58d401c 	str	r4, [sp, #28]
   32fbc:	e58d6018 	str	r6, [sp, #24]
   32fc0:	e58d5014 	str	r5, [sp, #20]
   32fc4:	e58d5010 	str	r5, [sp, #16]
   32fc8:	eb00030f 	bl	33c0c <DisplayFX::windowSetup(int, int, int, int, int, int, int, int, int, WgfxFont*, int, int, int, int)>
    _displayFX.windowSetup(DISPLAY_WINDOW_STATUS, DISPLAY_TARGET_WIDTH + DISPLAY_TARGET_BORDER * 2 + DISPLAY_STATUS_MARGIN, 0,
   32fcc:	e1a00008 	mov	r0, r8
   32fd0:	e1a03006 	mov	r3, r6
   32fd4:	e1a01005 	mov	r1, r5
   32fd8:	e1a0200a 	mov	r2, sl
   32fdc:	e1cd62f4 	strd	r6, [sp, #36]	; 0x24
   32fe0:	e58d4020 	str	r4, [sp, #32]
   32fe4:	e58d401c 	str	r4, [sp, #28]
   32fe8:	e58d6018 	str	r6, [sp, #24]
   32fec:	e58d5014 	str	r5, [sp, #20]
   32ff0:	e1cd40fc 	strd	r4, [sp, #12]
   32ff4:	e58d4008 	str	r4, [sp, #8]
   32ff8:	e58d4004 	str	r4, [sp, #4]
   32ffc:	e58d4000 	str	r4, [sp]
   33000:	eb000301 	bl	33c0c <DisplayFX::windowSetup(int, int, int, int, int, int, int, int, int, WgfxFont*, int, int, int, int)>
        DISPLAY_STATUS_LINES * __systemFont.cellY,
   33004:	e59f305c 	ldr	r3, [pc, #92]	; 33068 <Display::init()+0x118>
    _displayFX.windowSetup(DISPLAY_WINDOW_CONSOLE, DISPLAY_TARGET_WIDTH + DISPLAY_TARGET_BORDER * 2 + DISPLAY_CONSOLE_MARGIN, 
   33008:	e58d7028 	str	r7, [sp, #40]	; 0x28
   3300c:	e5933004 	ldr	r3, [r3, #4]
   33010:	e1a0200a 	mov	r2, sl
   33014:	e1a00008 	mov	r0, r8
   33018:	e0633183 	rsb	r3, r3, r3, lsl #3
   3301c:	e58d6024 	str	r6, [sp, #36]	; 0x24
   33020:	e58d4020 	str	r4, [sp, #32]
   33024:	e58d401c 	str	r4, [sp, #28]
   33028:	e58d6018 	str	r6, [sp, #24]
   3302c:	e58d5014 	str	r5, [sp, #20]
   33030:	e1cd40fc 	strd	r4, [sp, #12]
   33034:	e58d4008 	str	r4, [sp, #8]
   33038:	e58d4004 	str	r4, [sp, #4]
   3303c:	e58d4000 	str	r4, [sp]
   33040:	e3a01002 	mov	r1, #2
   33044:	eb0002f0 	bl	33c0c <DisplayFX::windowSetup(int, int, int, int, int, int, int, int, int, WgfxFont*, int, int, int, int)>
    _displayFX.consoleSetWindow(DISPLAY_WINDOW_CONSOLE);
   33048:	e1a00008 	mov	r0, r8
   3304c:	e3a01002 	mov	r1, #2
   33050:	eb0003fa 	bl	34040 <DisplayFX::consoleSetWindow(int)>
}
   33054:	e1a00005 	mov	r0, r5
    _displayStarted = true;
   33058:	e5c95b4c 	strb	r5, [r9, #2892]	; 0xb4c
}
   3305c:	e28dd030 	add	sp, sp, #48	; 0x30
   33060:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   33064:	0000041a 	.word	0x0000041a
   33068:	0005aa28 	.word	0x0005aa28

0003306c <Display::statusPut(int, int, char const*)>:
    windowForeground(DISPLAY_WINDOW_STATUS, (statusType == STATUS_FAIL) ? DISPLAY_FX_RED : (statusType == STATUS_NORMAL) ? DISPLAY_FX_YELLOW : DISPLAY_FX_GREEN);
   3306c:	e3520001 	cmp	r2, #1
   33070:	03a02009 	moveq	r2, #9
   33074:	0a000002 	beq	33084 <Display::statusPut(int, int, char const*)+0x18>
   33078:	e3520000 	cmp	r2, #0
   3307c:	13a0200a 	movne	r2, #10
   33080:	03a0200b 	moveq	r2, #11
    if (!_displayStarted)
   33084:	e5d0cb4c 	ldrb	ip, [r0, #2892]	; 0xb4c
   33088:	e35c0000 	cmp	ip, #0
   3308c:	012fff1e 	bxeq	lr
{
   33090:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   33094:	e1a04000 	mov	r4, r0
    int x = fieldPositions[statusElement].x;
   33098:	e59fc070 	ldr	ip, [pc, #112]	; 33110 <Display::statusPut(int, int, char const*)+0xa4>
    _displayFX.windowForeground(winIdx, colour);
   3309c:	e2805004 	add	r5, r0, #4
    int x = fieldPositions[statusElement].x;
   330a0:	e08cc181 	add	ip, ip, r1, lsl #3
{
   330a4:	e24dd008 	sub	sp, sp, #8
    _displayFX.windowForeground(winIdx, colour);
   330a8:	e1a00005 	mov	r0, r5
   330ac:	e3a01001 	mov	r1, #1
   330b0:	e1a06003 	mov	r6, r3
    int x = fieldPositions[statusElement].x;
   330b4:	e59c7020 	ldr	r7, [ip, #32]
    int y = fieldPositions[statusElement].y;
   330b8:	e59c8024 	ldr	r8, [ip, #36]	; 0x24
    _displayFX.windowForeground(winIdx, colour);
   330bc:	eb0001b9 	bl	337a8 <DisplayFX::windowForeground(int, DISPLAY_FX_COLOUR)>
    if (!_displayStarted)
   330c0:	e5d43b4c 	ldrb	r3, [r4, #2892]	; 0xb4c
   330c4:	e3530000 	cmp	r3, #0
   330c8:	0a00000e 	beq	33108 <Display::statusPut(int, int, char const*)+0x9c>
    _displayFX.windowPut(winIdx, col, row, pStr);
   330cc:	e1a03008 	mov	r3, r8
   330d0:	e58d6000 	str	r6, [sp]
   330d4:	e1a02007 	mov	r2, r7
   330d8:	e3a01001 	mov	r1, #1
   330dc:	e1a00005 	mov	r0, r5
   330e0:	eb00015b 	bl	33654 <DisplayFX::windowPut(int, int, int, char const*)>
    if (!_displayStarted)
   330e4:	e5d43b4c 	ldrb	r3, [r4, #2892]	; 0xb4c
   330e8:	e3530000 	cmp	r3, #0
   330ec:	0a000005 	beq	33108 <Display::statusPut(int, int, char const*)+0x9c>
    _displayFX.windowForeground(winIdx, colour);
   330f0:	e1a00005 	mov	r0, r5
   330f4:	e3a0200f 	mov	r2, #15
   330f8:	e3a01001 	mov	r1, #1
}
   330fc:	e28dd008 	add	sp, sp, #8
   33100:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    _displayFX.windowForeground(winIdx, colour);
   33104:	ea0001a7 	b	337a8 <DisplayFX::windowForeground(int, DISPLAY_FX_COLOUR)>
}
   33108:	e28dd008 	add	sp, sp, #8
   3310c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   33110:	00055560 	.word	0x00055560

00033114 <Display::windowForeground(int, DISPLAY_FX_COLOUR)>:
    if (!_displayStarted)
   33114:	e5d03b4c 	ldrb	r3, [r0, #2892]	; 0xb4c
   33118:	e3530000 	cmp	r3, #0
   3311c:	012fff1e 	bxeq	lr
    _displayFX.windowForeground(winIdx, colour);
   33120:	e2800004 	add	r0, r0, #4
   33124:	ea00019f 	b	337a8 <DisplayFX::windowForeground(int, DISPLAY_FX_COLOUR)>

00033128 <Display::windowWrite(int, int, int, char const*)>:
    if (!_displayStarted)
   33128:	e5d0cb4c 	ldrb	ip, [r0, #2892]	; 0xb4c
   3312c:	e35c0000 	cmp	ip, #0
   33130:	012fff1e 	bxeq	lr
    _displayFX.windowPut(winIdx, col, row, pStr);
   33134:	e2800004 	add	r0, r0, #4
   33138:	ea000145 	b	33654 <DisplayFX::windowPut(int, int, int, char const*)>

0003313c <Display::windowWrite(int, int, int, int)>:
    if (!_displayStarted)
   3313c:	e5d0cb4c 	ldrb	ip, [r0, #2892]	; 0xb4c
   33140:	e35c0000 	cmp	ip, #0
   33144:	012fff1e 	bxeq	lr
    _displayFX.windowPut(winIdx, col, row, ch);
   33148:	e2800004 	add	r0, r0, #4
   3314c:	ea00016f 	b	33710 <DisplayFX::windowPut(int, int, int, int)>

00033150 <Display::windowSetPixel(int, int, int, int, DISPLAY_FX_COLOUR)>:
{
   33150:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    if (!_displayStarted)
   33154:	e5d0cb4c 	ldrb	ip, [r0, #2892]	; 0xb4c
{
   33158:	e1dde0d8 	ldrsb	lr, [sp, #8]
    if (!_displayStarted)
   3315c:	e35c0000 	cmp	ip, #0
   33160:	049df004 	popeq	{pc}		; (ldreq pc, [sp], #4)
    _displayFX.windowSetPixel(winIdx, x, y, value, colour);
   33164:	e58de008 	str	lr, [sp, #8]
   33168:	e2800004 	add	r0, r0, #4
}
   3316c:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
    _displayFX.windowSetPixel(winIdx, x, y, value, colour);
   33170:	ea000192 	b	337c0 <DisplayFX::windowSetPixel(int, int, int, int, DISPLAY_FX_COLOUR)>

00033174 <Display::consolePut(char const*)>:
// Console
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void Display::consolePut(const char* pStr)
{
    if (!_displayStarted)
   33174:	e5d03b4c 	ldrb	r3, [r0, #2892]	; 0xb4c
   33178:	e3530000 	cmp	r3, #0
   3317c:	012fff1e 	bxeq	lr
        return;
    _displayFX.consolePut(pStr);
   33180:	e2800004 	add	r0, r0, #4
   33184:	ea0005c7 	b	348a8 <DisplayFX::consolePut(char const*)>

00033188 <Display::consolePut(int)>:
}

void Display::consolePut(int ch)
{
    if (!_displayStarted)
   33188:	e5d03b4c 	ldrb	r3, [r0, #2892]	; 0xb4c
   3318c:	e3530000 	cmp	r3, #0
   33190:	012fff1e 	bxeq	lr
        return; 
    _displayFX.consolePut(ch);
   33194:	e2800004 	add	r0, r0, #4
   33198:	ea0004de 	b	34518 <DisplayFX::consolePut(int)>

0003319c <Display::consoleForeground(DISPLAY_FX_COLOUR)>:
}

void Display::consoleForeground(DISPLAY_FX_COLOUR colour)
{
    if (!_displayStarted)
   3319c:	e5d03b4c 	ldrb	r3, [r0, #2892]	; 0xb4c
   331a0:	e3530000 	cmp	r3, #0
   331a4:	012fff1e 	bxeq	lr
        return;
    _displayFX.consoleForeground(colour);
   331a8:	e2800004 	add	r0, r0, #4
   331ac:	ea000390 	b	33ff4 <DisplayFX::consoleForeground(DISPLAY_FX_COLOUR)>

000331b0 <Display::consoleGetWidth()>:
}

int Display::consoleGetWidth()
{
    if (!_displayStarted)
   331b0:	e5d03b4c 	ldrb	r3, [r0, #2892]	; 0xb4c
   331b4:	e3530000 	cmp	r3, #0
   331b8:	1a000001 	bne	331c4 <Display::consoleGetWidth()+0x14>
        return 0;
    return _displayFX.consoleGetWidth();
}
   331bc:	e1a00003 	mov	r0, r3
   331c0:	e12fff1e 	bx	lr
    return _displayFX.consoleGetWidth();
   331c4:	e2800004 	add	r0, r0, #4
   331c8:	ea00038f 	b	3400c <DisplayFX::consoleGetWidth()>

000331cc <DisplayFX::windowPut(int, int, int, int) [clone .part.2]>:
            break;
        windowPut(winIdx, col++, row, *pStr++);
    }
}

void DisplayFX::windowPut(int winIdx, int col, int row, int ch)
   331cc:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    }
}

uint8_t* DisplayFX::windowGetPFB(int winIdx, int col, int row)
{
    return _pfb + ((row * _windows[winIdx].cellHeight * _windows[winIdx].yPixScale) + _windows[winIdx].tly) * _pitch + 
   331d0:	e1a0c181 	lsl	ip, r1, #3
   331d4:	e08ce001 	add	lr, ip, r1
   331d8:	e061e20e 	rsb	lr, r1, lr, lsl #4
   331dc:	e080e10e 	add	lr, r0, lr, lsl #2
   331e0:	e59e4018 	ldr	r4, [lr, #24]
            (col * _windows[winIdx].cellWidth * _windows[winIdx].xPixScale) + _windows[winIdx].tlx;
   331e4:	e59e7014 	ldr	r7, [lr, #20]
    return _pfb + ((row * _windows[winIdx].cellHeight * _windows[winIdx].yPixScale) + _windows[winIdx].tly) * _pitch + 
   331e8:	e0030493 	mul	r3, r3, r4
            (col * _windows[winIdx].cellWidth * _windows[winIdx].xPixScale) + _windows[winIdx].tlx;
   331ec:	e0020792 	mul	r2, r2, r7
void DisplayFX::windowPut(int winIdx, int col, int row, int ch)
   331f0:	e24dd014 	sub	sp, sp, #20
    return _pfb + ((row * _windows[winIdx].cellHeight * _windows[winIdx].yPixScale) + _windows[winIdx].tly) * _pitch + 
   331f4:	e58d4008 	str	r4, [sp, #8]
   331f8:	e59eb020 	ldr	fp, [lr, #32]
            (col * _windows[winIdx].cellWidth * _windows[winIdx].xPixScale) + _windows[winIdx].tlx;
   331fc:	e59e4004 	ldr	r4, [lr, #4]
    return _pfb + ((row * _windows[winIdx].cellHeight * _windows[winIdx].yPixScale) + _windows[winIdx].tly) * _pitch + 
   33200:	e59ea00c 	ldr	sl, [lr, #12]
            (col * _windows[winIdx].cellWidth * _windows[winIdx].xPixScale) + _windows[winIdx].tlx;
   33204:	e59e801c 	ldr	r8, [lr, #28]
    return _pfb + ((row * _windows[winIdx].cellHeight * _windows[winIdx].yPixScale) + _windows[winIdx].tly) * _pitch + 
   33208:	e02aa39b 	mla	sl, fp, r3, sl
            (col * _windows[winIdx].cellWidth * _windows[winIdx].xPixScale) + _windows[winIdx].tlx;
   3320c:	e0224298 	mla	r2, r8, r2, r4
    return _pfb + ((row * _windows[winIdx].cellHeight * _windows[winIdx].yPixScale) + _windows[winIdx].tly) * _pitch + 
   33210:	e5903b34 	ldr	r3, [r0, #2868]	; 0xb34
    int fgColour = (_windows[winIdx].windowForeground != -1) ? _windows[winIdx].windowForeground : _screenForeground;
   33214:	e59e5028 	ldr	r5, [lr, #40]	; 0x28
            (col * _windows[winIdx].cellWidth * _windows[winIdx].xPixScale) + _windows[winIdx].tlx;
   33218:	e0222a93 	mla	r2, r3, sl, r2
   3321c:	e590ab3c 	ldr	sl, [r0, #2876]	; 0xb3c
    int fgColour = (_windows[winIdx].windowForeground != -1) ? _windows[winIdx].windowForeground : _screenForeground;
   33220:	e3750001 	cmn	r5, #1
    uint8_t* pFont = _windows[winIdx].pFont->pFontData + ch * _windows[winIdx].pFont->bytesPerChar;
   33224:	e59e402c 	ldr	r4, [lr, #44]	; 0x2c
            (col * _windows[winIdx].cellWidth * _windows[winIdx].xPixScale) + _windows[winIdx].tlx;
   33228:	e08aa002 	add	sl, sl, r2
    int fgColour = (_windows[winIdx].windowForeground != -1) ? _windows[winIdx].windowForeground : _screenForeground;
   3322c:	02802d2d 	addeq	r2, r0, #2880	; 0xb40
   33230:	01d250d1 	ldrsbeq	r5, [r2, #1]
    int bgColour = (_windows[winIdx].windowBackground != -1) ? _windows[winIdx].windowBackground : _screenBackground;
   33234:	e08c2001 	add	r2, ip, r1
    uint8_t* pFont = _windows[winIdx].pFont->pFontData + ch * _windows[winIdx].pFont->bytesPerChar;
   33238:	e594600c 	ldr	r6, [r4, #12]
   3323c:	e594e010 	ldr	lr, [r4, #16]
    int bgColour = (_windows[winIdx].windowBackground != -1) ? _windows[winIdx].windowBackground : _screenBackground;
   33240:	e0612202 	rsb	r2, r1, r2, lsl #4
void DisplayFX::windowPut(int winIdx, int col, int row, int ch)
   33244:	e59d4038 	ldr	r4, [sp, #56]	; 0x38
    int bgColour = (_windows[winIdx].windowBackground != -1) ? _windows[winIdx].windowBackground : _screenBackground;
   33248:	e0802102 	add	r2, r0, r2, lsl #2
    uint8_t* pFont = _windows[winIdx].pFont->pFontData + ch * _windows[winIdx].pFont->bytesPerChar;
   3324c:	e02ee496 	mla	lr, r6, r4, lr
    int bgColour = (_windows[winIdx].windowBackground != -1) ? _windows[winIdx].windowBackground : _screenBackground;
   33250:	e5924024 	ldr	r4, [r2, #36]	; 0x24
   33254:	e3740001 	cmn	r4, #1
   33258:	02802d2d 	addeq	r2, r0, #2880	; 0xb40
   3325c:	01d240d0 	ldrsbeq	r4, [r2]
    for (int y = 0; y < cellHeight; y++) {
   33260:	e59d2008 	ldr	r2, [sp, #8]
   33264:	e3520000 	cmp	r2, #0
   33268:	da000032 	ble	33338 <DisplayFX::windowPut(int, int, int, int) [clone .part.2]+0x16c>
            int bitMask = 0x01 << (cellWidth - 1);
   3326c:	e3a06001 	mov	r6, #1
   33270:	e2472001 	sub	r2, r7, #1
   33274:	e1a02216 	lsl	r2, r6, r2
   33278:	e35b0000 	cmp	fp, #0
   3327c:	e58d2000 	str	r2, [sp]
   33280:	da00002c 	ble	33338 <DisplayFX::windowPut(int, int, int, int) [clone .part.2]+0x16c>
    for (int y = 0; y < cellHeight; y++) {
   33284:	e3a02000 	mov	r2, #0
        pFont += _windows[winIdx].pFont->bytesAcross;
   33288:	e08cc001 	add	ip, ip, r1
   3328c:	e061120c 	rsb	r1, r1, ip, lsl #4
    for (int y = 0; y < cellHeight; y++) {
   33290:	e58d2004 	str	r2, [sp, #4]
        pFont += _windows[winIdx].pFont->bytesAcross;
   33294:	e0802101 	add	r2, r0, r1, lsl #2
   33298:	e58d200c 	str	r2, [sp, #12]
                    *pBufCur = (*pFont & bitMask) ? fgColour : bgColour;
   3329c:	e6ef5075 	uxtb	r5, r5
   332a0:	e6ef4074 	uxtb	r4, r4
        for (int i = 0; i < yPixScale; i++) {
   332a4:	e3a09000 	mov	r9, #0
            for (int x = 0; x < cellWidth; x++) {
   332a8:	e3570000 	cmp	r7, #0
   332ac:	da000013 	ble	33300 <DisplayFX::windowPut(int, int, int, int) [clone .part.2]+0x134>
   332b0:	e3580000 	cmp	r8, #0
   332b4:	da000011 	ble	33300 <DisplayFX::windowPut(int, int, int, int) [clone .part.2]+0x134>
   332b8:	e1a0100a 	mov	r1, sl
   332bc:	e3a06000 	mov	r6, #0
            int bitMask = 0x01 << (cellWidth - 1);
   332c0:	e59dc000 	ldr	ip, [sp]
            for (int x = 0; x < cellWidth; x++) {
   332c4:	e1a03001 	mov	r3, r1
   332c8:	e0811008 	add	r1, r1, r8
                    *pBufCur = (*pFont & bitMask) ? fgColour : bgColour;
   332cc:	e5de2000 	ldrb	r2, [lr]
   332d0:	e112000c 	tst	r2, ip
   332d4:	01a02004 	moveq	r2, r4
   332d8:	11a02005 	movne	r2, r5
   332dc:	e4c32001 	strb	r2, [r3], #1
                for (register int j = 0; j < xPixScale; j++) {
   332e0:	e1530001 	cmp	r3, r1
   332e4:	1afffff8 	bne	332cc <DisplayFX::windowPut(int, int, int, int) [clone .part.2]+0x100>
            for (int x = 0; x < cellWidth; x++) {
   332e8:	e2866001 	add	r6, r6, #1
   332ec:	e1570006 	cmp	r7, r6
   332f0:	e1a01003 	mov	r1, r3
                bitMask = bitMask >> 1;
   332f4:	e1a0c0cc 	asr	ip, ip, #1
            for (int x = 0; x < cellWidth; x++) {
   332f8:	1afffff1 	bne	332c4 <DisplayFX::windowPut(int, int, int, int) [clone .part.2]+0xf8>
   332fc:	e5903b34 	ldr	r3, [r0, #2868]	; 0xb34
        for (int i = 0; i < yPixScale; i++) {
   33300:	e2899001 	add	r9, r9, #1
   33304:	e15b0009 	cmp	fp, r9
            pBuf += _pitch;
   33308:	e08aa003 	add	sl, sl, r3
        for (int i = 0; i < yPixScale; i++) {
   3330c:	1affffe5 	bne	332a8 <DisplayFX::windowPut(int, int, int, int) [clone .part.2]+0xdc>
        pFont += _windows[winIdx].pFont->bytesAcross;
   33310:	e59d200c 	ldr	r2, [sp, #12]
    for (int y = 0; y < cellHeight; y++) {
   33314:	e59d1004 	ldr	r1, [sp, #4]
        pFont += _windows[winIdx].pFont->bytesAcross;
   33318:	e592202c 	ldr	r2, [r2, #44]	; 0x2c
    for (int y = 0; y < cellHeight; y++) {
   3331c:	e59dc008 	ldr	ip, [sp, #8]
   33320:	e2811001 	add	r1, r1, #1
        pFont += _windows[winIdx].pFont->bytesAcross;
   33324:	e5922008 	ldr	r2, [r2, #8]
    for (int y = 0; y < cellHeight; y++) {
   33328:	e15c0001 	cmp	ip, r1
   3332c:	e58d1004 	str	r1, [sp, #4]
        pFont += _windows[winIdx].pFont->bytesAcross;
   33330:	e08ee002 	add	lr, lr, r2
    for (int y = 0; y < cellHeight; y++) {
   33334:	1affffda 	bne	332a4 <DisplayFX::windowPut(int, int, int, int) [clone .part.2]+0xd8>
}
   33338:	e28dd014 	add	sp, sp, #20
   3333c:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

00033340 <DisplayFX::DisplayFX()>:
class DisplayWindow
{
public:
    DisplayWindow()
    {
        _valid = false;
   33340:	e3a02000 	mov	r2, #0
        tlx = tly = 0;
        width = height = 0;
        cellWidth = cellHeight = 0;
        xPixScale = yPixScale = 1;
   33344:	e3a01001 	mov	r1, #1
        windowBackground = DISPLAY_FX_BLACK;
        windowForeground = DISPLAY_FX_WHITE;
   33348:	e3a0c00f 	mov	ip, #15
        _valid = false;
   3334c:	e5c02000 	strb	r2, [r0]
        tlx = tly = 0;
   33350:	e580200c 	str	r2, [r0, #12]
   33354:	e5802004 	str	r2, [r0, #4]
        width = height = 0;
   33358:	e5802010 	str	r2, [r0, #16]
   3335c:	e5802008 	str	r2, [r0, #8]
        cellWidth = cellHeight = 0;
   33360:	e5802018 	str	r2, [r0, #24]
   33364:	e5802014 	str	r2, [r0, #20]
        windowBackground = DISPLAY_FX_BLACK;
   33368:	e5802024 	str	r2, [r0, #36]	; 0x24
        pFont = NULL;
   3336c:	e580202c 	str	r2, [r0, #44]	; 0x2c
        _cursorRow = 0;
   33370:	e5802030 	str	r2, [r0, #48]	; 0x30
        _cursorCol = 0;
   33374:	e5802034 	str	r2, [r0, #52]	; 0x34
        _cursorVisible = false;
   33378:	e5c02038 	strb	r2, [r0, #56]	; 0x38
        _valid = false;
   3337c:	e5c0223c 	strb	r2, [r0, #572]	; 0x23c
        tlx = tly = 0;
   33380:	e5802248 	str	r2, [r0, #584]	; 0x248
   33384:	e5802240 	str	r2, [r0, #576]	; 0x240
        width = height = 0;
   33388:	e580224c 	str	r2, [r0, #588]	; 0x24c
   3338c:	e5802244 	str	r2, [r0, #580]	; 0x244
        cellWidth = cellHeight = 0;
   33390:	e5802254 	str	r2, [r0, #596]	; 0x254
   33394:	e5802250 	str	r2, [r0, #592]	; 0x250
        windowBackground = DISPLAY_FX_BLACK;
   33398:	e5802260 	str	r2, [r0, #608]	; 0x260
        pFont = NULL;
   3339c:	e5802268 	str	r2, [r0, #616]	; 0x268
        _cursorRow = 0;
   333a0:	e580226c 	str	r2, [r0, #620]	; 0x26c
        _cursorCol = 0;
   333a4:	e5802270 	str	r2, [r0, #624]	; 0x270
        _cursorVisible = false;
   333a8:	e5c02274 	strb	r2, [r0, #628]	; 0x274
        _valid = false;
   333ac:	e5c02478 	strb	r2, [r0, #1144]	; 0x478
        tlx = tly = 0;
   333b0:	e5802484 	str	r2, [r0, #1156]	; 0x484
        xPixScale = yPixScale = 1;
   333b4:	e5801020 	str	r1, [r0, #32]
   333b8:	e580101c 	str	r1, [r0, #28]
   333bc:	e580125c 	str	r1, [r0, #604]	; 0x25c
   333c0:	e5801258 	str	r1, [r0, #600]	; 0x258
        windowForeground = DISPLAY_FX_WHITE;
   333c4:	e580c028 	str	ip, [r0, #40]	; 0x28
   333c8:	e580c264 	str	ip, [r0, #612]	; 0x264
        tlx = tly = 0;
   333cc:	e580247c 	str	r2, [r0, #1148]	; 0x47c
        width = height = 0;
   333d0:	e5802488 	str	r2, [r0, #1160]	; 0x488
   333d4:	e5802480 	str	r2, [r0, #1152]	; 0x480
        cellWidth = cellHeight = 0;
   333d8:	e5802490 	str	r2, [r0, #1168]	; 0x490
   333dc:	e580248c 	str	r2, [r0, #1164]	; 0x48c
        xPixScale = yPixScale = 1;
   333e0:	e5801498 	str	r1, [r0, #1176]	; 0x498
   333e4:	e5801494 	str	r1, [r0, #1172]	; 0x494
        windowBackground = DISPLAY_FX_BLACK;
   333e8:	e580249c 	str	r2, [r0, #1180]	; 0x49c
        windowForeground = DISPLAY_FX_WHITE;
   333ec:	e580c4a0 	str	ip, [r0, #1184]	; 0x4a0
        pFont = NULL;
   333f0:	e58024a4 	str	r2, [r0, #1188]	; 0x4a4
        _cursorRow = 0;
   333f4:	e58024a8 	str	r2, [r0, #1192]	; 0x4a8
        _cursorCol = 0;
   333f8:	e58024ac 	str	r2, [r0, #1196]	; 0x4ac
        _cursorVisible = false;
   333fc:	e5c024b0 	strb	r2, [r0, #1200]	; 0x4b0
        _valid = false;
   33400:	e5c026b4 	strb	r2, [r0, #1716]	; 0x6b4
        tlx = tly = 0;
   33404:	e58026c0 	str	r2, [r0, #1728]	; 0x6c0
   33408:	e58026b8 	str	r2, [r0, #1720]	; 0x6b8
        width = height = 0;
   3340c:	e58026c4 	str	r2, [r0, #1732]	; 0x6c4
   33410:	e58026bc 	str	r2, [r0, #1724]	; 0x6bc
        cellWidth = cellHeight = 0;
   33414:	e58026cc 	str	r2, [r0, #1740]	; 0x6cc
   33418:	e58026c8 	str	r2, [r0, #1736]	; 0x6c8
        xPixScale = yPixScale = 1;
   3341c:	e58016d4 	str	r1, [r0, #1748]	; 0x6d4
   33420:	e58016d0 	str	r1, [r0, #1744]	; 0x6d0
        windowBackground = DISPLAY_FX_BLACK;
   33424:	e58026d8 	str	r2, [r0, #1752]	; 0x6d8
        windowForeground = DISPLAY_FX_WHITE;
   33428:	e580c6dc 	str	ip, [r0, #1756]	; 0x6dc
        pFont = NULL;
   3342c:	e58026e0 	str	r2, [r0, #1760]	; 0x6e0
        _cursorRow = 0;
   33430:	e58026e4 	str	r2, [r0, #1764]	; 0x6e4
        _cursorCol = 0;
   33434:	e58026e8 	str	r2, [r0, #1768]	; 0x6e8
        _cursorVisible = false;
   33438:	e5c026ec 	strb	r2, [r0, #1772]	; 0x6ec
        _valid = false;
   3343c:	e5c028f0 	strb	r2, [r0, #2288]	; 0x8f0
        tlx = tly = 0;
   33440:	e58028fc 	str	r2, [r0, #2300]	; 0x8fc
   33444:	e58028f4 	str	r2, [r0, #2292]	; 0x8f4
        width = height = 0;
   33448:	e5802900 	str	r2, [r0, #2304]	; 0x900
   3344c:	e58028f8 	str	r2, [r0, #2296]	; 0x8f8
        cellWidth = cellHeight = 0;
   33450:	e5802908 	str	r2, [r0, #2312]	; 0x908
   33454:	e5802904 	str	r2, [r0, #2308]	; 0x904
        xPixScale = yPixScale = 1;
   33458:	e5801910 	str	r1, [r0, #2320]	; 0x910
   3345c:	e580190c 	str	r1, [r0, #2316]	; 0x90c
        windowBackground = DISPLAY_FX_BLACK;
   33460:	e5802914 	str	r2, [r0, #2324]	; 0x914
        windowForeground = DISPLAY_FX_WHITE;
   33464:	e580c918 	str	ip, [r0, #2328]	; 0x918
        pFont = NULL;
   33468:	e580291c 	str	r2, [r0, #2332]	; 0x91c
        _cursorRow = 0;
   3346c:	e5802920 	str	r2, [r0, #2336]	; 0x920
        _cursorCol = 0;
   33470:	e5802924 	str	r2, [r0, #2340]	; 0x924
        _cursorVisible = false;
   33474:	e5c02928 	strb	r2, [r0, #2344]	; 0x928
    _screenWidth = 0;
   33478:	e5802b2c 	str	r2, [r0, #2860]	; 0xb2c
    _screenHeight = 0;
   3347c:	e5802b30 	str	r2, [r0, #2864]	; 0xb30
    _pitch = 0;
   33480:	e5802b34 	str	r2, [r0, #2868]	; 0xb34
    _size = 0;
   33484:	e5802b38 	str	r2, [r0, #2872]	; 0xb38
    _pfb = NULL;
   33488:	e5802b3c 	str	r2, [r0, #2876]	; 0xb3c
    _consoleWinIdx = 0;
   3348c:	e5802b44 	str	r2, [r0, #2884]	; 0xb44
    _screenBackground = DISPLAY_FX_BLACK;
   33490:	e5c02b40 	strb	r2, [r0, #2880]	; 0xb40
    _screenForeground = DISPLAY_FX_WHITE;
   33494:	e5c0cb41 	strb	ip, [r0, #2881]	; 0xb41
}
   33498:	e12fff1e 	bx	lr

0003349c <DisplayFX::~DisplayFX()>:
}
   3349c:	e12fff1e 	bx	lr

000334a0 <DisplayFX::screenClear()>:
    uint8_t* pFrameBuf = _pfb;
   334a0:	e5903b3c 	ldr	r3, [r0, #2876]	; 0xb3c
    uint8_t* pFBEnd = _pfb + _size;
   334a4:	e5902b38 	ldr	r2, [r0, #2872]	; 0xb38
{
   334a8:	e92d4070 	push	{r4, r5, r6, lr}
    uint8_t* pFBEnd = _pfb + _size;
   334ac:	e083e002 	add	lr, r3, r2
    while (pFrameBuf < pFBEnd)
   334b0:	e153000e 	cmp	r3, lr
   334b4:	28bd8070 	popcs	{r4, r5, r6, pc}
   334b8:	e280cd2d 	add	ip, r0, #2880	; 0xb40
   334bc:	e28c1001 	add	r1, ip, #1
   334c0:	e1510003 	cmp	r1, r3
   334c4:	815e000c 	cmphi	lr, ip
   334c8:	93a01001 	movls	r1, #1
   334cc:	83a01000 	movhi	r1, #0
   334d0:	e3520008 	cmp	r2, #8
   334d4:	93a01000 	movls	r1, #0
   334d8:	82011001 	andhi	r1, r1, #1
   334dc:	e2834001 	add	r4, r3, #1
   334e0:	e3510000 	cmp	r1, #0
   334e4:	e2421001 	sub	r1, r2, #1
   334e8:	e1a02004 	mov	r2, r4
   334ec:	0a00003a 	beq	335dc <DisplayFX::screenClear()+0x13c>
   334f0:	e2635000 	rsb	r5, r3, #0
   334f4:	e2155003 	ands	r5, r5, #3
   334f8:	01a04003 	moveq	r4, r3
   334fc:	0a00000a 	beq	3352c <DisplayFX::screenClear()+0x8c>
        *pFrameBuf++ = _screenBackground;
   33500:	e5d02b40 	ldrb	r2, [r0, #2880]	; 0xb40
   33504:	e3550001 	cmp	r5, #1
   33508:	e5c32000 	strb	r2, [r3]
   3350c:	0a000006 	beq	3352c <DisplayFX::screenClear()+0x8c>
   33510:	e5d02b40 	ldrb	r2, [r0, #2880]	; 0xb40
   33514:	e3550002 	cmp	r5, #2
   33518:	e5c32001 	strb	r2, [r3, #1]
   3351c:	15d02b40 	ldrbne	r2, [r0, #2880]	; 0xb40
   33520:	e2834002 	add	r4, r3, #2
   33524:	15c32002 	strbne	r2, [r3, #2]
   33528:	12834003 	addne	r4, r3, #3
    while (pFrameBuf < pFBEnd)
   3352c:	e3a02000 	mov	r2, #0
   33530:	e5dc6000 	ldrb	r6, [ip]
   33534:	e0411005 	sub	r1, r1, r5
   33538:	e186c406 	orr	ip, r6, r6, lsl #8
   3353c:	e2811001 	add	r1, r1, #1
   33540:	e18cc806 	orr	ip, ip, r6, lsl #16
   33544:	e0833005 	add	r3, r3, r5
   33548:	e18ccc06 	orr	ip, ip, r6, lsl #24
   3354c:	e1a05121 	lsr	r5, r1, #2
   33550:	e2822001 	add	r2, r2, #1
   33554:	e1520005 	cmp	r2, r5
        *pFrameBuf++ = _screenBackground;
   33558:	e483c004 	str	ip, [r3], #4
   3355c:	3afffffb 	bcc	33550 <DisplayFX::screenClear()+0xb0>
   33560:	e3c12003 	bic	r2, r1, #3
   33564:	e1510002 	cmp	r1, r2
   33568:	e0843002 	add	r3, r4, r2
   3356c:	08bd8070 	popeq	{r4, r5, r6, pc}
   33570:	e5d01b40 	ldrb	r1, [r0, #2880]	; 0xb40
   33574:	e283c001 	add	ip, r3, #1
    while (pFrameBuf < pFBEnd)
   33578:	e15e000c 	cmp	lr, ip
        *pFrameBuf++ = _screenBackground;
   3357c:	e7c41002 	strb	r1, [r4, r2]
    while (pFrameBuf < pFBEnd)
   33580:	98bd8070 	popls	{r4, r5, r6, pc}
        *pFrameBuf++ = _screenBackground;
   33584:	e5d02b40 	ldrb	r2, [r0, #2880]	; 0xb40
   33588:	e2831002 	add	r1, r3, #2
    while (pFrameBuf < pFBEnd)
   3358c:	e15e0001 	cmp	lr, r1
        *pFrameBuf++ = _screenBackground;
   33590:	e5c32001 	strb	r2, [r3, #1]
    while (pFrameBuf < pFBEnd)
   33594:	98bd8070 	popls	{r4, r5, r6, pc}
        *pFrameBuf++ = _screenBackground;
   33598:	e5d02b40 	ldrb	r2, [r0, #2880]	; 0xb40
   3359c:	e2831003 	add	r1, r3, #3
    while (pFrameBuf < pFBEnd)
   335a0:	e15e0001 	cmp	lr, r1
        *pFrameBuf++ = _screenBackground;
   335a4:	e5c32002 	strb	r2, [r3, #2]
    while (pFrameBuf < pFBEnd)
   335a8:	98bd8070 	popls	{r4, r5, r6, pc}
        *pFrameBuf++ = _screenBackground;
   335ac:	e5d02b40 	ldrb	r2, [r0, #2880]	; 0xb40
   335b0:	e2831004 	add	r1, r3, #4
    while (pFrameBuf < pFBEnd)
   335b4:	e15e0001 	cmp	lr, r1
        *pFrameBuf++ = _screenBackground;
   335b8:	e5c32003 	strb	r2, [r3, #3]
    while (pFrameBuf < pFBEnd)
   335bc:	98bd8070 	popls	{r4, r5, r6, pc}
        *pFrameBuf++ = _screenBackground;
   335c0:	e5d02b40 	ldrb	r2, [r0, #2880]	; 0xb40
   335c4:	e2831005 	add	r1, r3, #5
    while (pFrameBuf < pFBEnd)
   335c8:	e15e0001 	cmp	lr, r1
        *pFrameBuf++ = _screenBackground;
   335cc:	e5c32004 	strb	r2, [r3, #4]
   335d0:	85d02b40 	ldrbhi	r2, [r0, #2880]	; 0xb40
   335d4:	85c32005 	strbhi	r2, [r3, #5]
   335d8:	e8bd8070 	pop	{r4, r5, r6, pc}
   335dc:	e5d03b40 	ldrb	r3, [r0, #2880]	; 0xb40
    while (pFrameBuf < pFBEnd)
   335e0:	e15e0002 	cmp	lr, r2
        *pFrameBuf++ = _screenBackground;
   335e4:	e5423001 	strb	r3, [r2, #-1]
    while (pFrameBuf < pFBEnd)
   335e8:	08bd8070 	popeq	{r4, r5, r6, pc}
   335ec:	e2822001 	add	r2, r2, #1
   335f0:	eafffff9 	b	335dc <DisplayFX::screenClear()+0x13c>

000335f4 <DisplayFX::screenRectClear(int, int, int, int)>:
{
   335f4:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
}

uint8_t* DisplayFX::screenGetPFBXY(int x, int y)
{
    return _pfb + y * _pitch + x;
   335f8:	e5904b34 	ldr	r4, [r0, #2868]	; 0xb34
{
   335fc:	e59d8020 	ldr	r8, [sp, #32]
    return _pfb + y * _pitch + x;
   33600:	e0221294 	mla	r2, r4, r2, r1
   33604:	e5904b3c 	ldr	r4, [r0, #2876]	; 0xb3c
    for (int i = 0; i < pixDown; i++)
   33608:	e3580000 	cmp	r8, #0
    return _pfb + y * _pitch + x;
   3360c:	e0844002 	add	r4, r4, r2
    for (int i = 0; i < pixDown; i++)
   33610:	d8bd87f0 	pople	{r4, r5, r6, r7, r8, r9, sl, pc}
   33614:	e1a07003 	mov	r7, r3
   33618:	e1a06000 	mov	r6, r0
   3361c:	e3a05000 	mov	r5, #0
   33620:	e2809d2d 	add	r9, r0, #2880	; 0xb40
        memset(pDest, _screenBackground, bytesAcross);
   33624:	e1a02007 	mov	r2, r7
   33628:	e1a00004 	mov	r0, r4
   3362c:	e1d910d0 	ldrsb	r1, [r9]
   33630:	eb006610 	bl	4ce78 <memset>
    for (int i = 0; i < pixDown; i++)
   33634:	e2855001 	add	r5, r5, #1
        pDest += _pitch;
   33638:	e5962b34 	ldr	r2, [r6, #2868]	; 0xb34
    for (int i = 0; i < pixDown; i++)
   3363c:	e1580005 	cmp	r8, r5
        pDest += _pitch;
   33640:	e0844002 	add	r4, r4, r2
    for (int i = 0; i < pixDown; i++)
   33644:	1afffff6 	bne	33624 <DisplayFX::screenRectClear(int, int, int, int)+0x30>
   33648:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}

0003364c <DisplayFX::screenBackground(DISPLAY_FX_COLOUR)>:
    _screenBackground = colour;
   3364c:	e5c01b40 	strb	r1, [r0, #2880]	; 0xb40
}
   33650:	e12fff1e 	bx	lr

00033654 <DisplayFX::windowPut(int, int, int, char const*)>:
    if (winIdx < 0 || winIdx >= DISPLAY_FX_MAX_WINDOWS)
   33654:	e3510004 	cmp	r1, #4
   33658:	812fff1e 	bxhi	lr
{
   3365c:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   33660:	e24dd00c 	sub	sp, sp, #12
   33664:	e1a0a003 	mov	sl, r3
   33668:	e59d3030 	ldr	r3, [sp, #48]	; 0x30
        if (col >= _windows[winIdx].cols())
   3366c:	e0817181 	add	r7, r1, r1, lsl #3
   33670:	e2434001 	sub	r4, r3, #1
    while(*pStr)
   33674:	e5f4b001 	ldrb	fp, [r4, #1]!
        if (col >= _windows[winIdx].cols())
   33678:	e0617207 	rsb	r7, r1, r7, lsl #4
    while(*pStr)
   3367c:	e35b0000 	cmp	fp, #0
   33680:	e1a09001 	mov	r9, r1
   33684:	e1a08000 	mov	r8, r0
   33688:	e1a05002 	mov	r5, r2
        if (col >= _windows[winIdx].cols())
   3368c:	e0806107 	add	r6, r0, r7, lsl #2
    while(*pStr)
   33690:	0a00001c 	beq	33708 <DisplayFX::windowPut(int, int, int, char const*)+0xb4>
   33694:	e5961014 	ldr	r1, [r6, #20]
   33698:	e5960008 	ldr	r0, [r6, #8]
    }

    int cols()
    {
        if (cellWidth <= 0)
   3369c:	e3510000 	cmp	r1, #0
            return 0;
   336a0:	d3a00000 	movle	r0, #0
        if (cellWidth <= 0)
   336a4:	da000000 	ble	336ac <DisplayFX::windowPut(int, int, int, char const*)+0x58>
        return width/cellWidth;
   336a8:	eb006d06 	bl	4eac8 <__divsi3>
        if (col >= _windows[winIdx].cols())
   336ac:	e1550000 	cmp	r5, r0
   336b0:	aa000014 	bge	33708 <DisplayFX::windowPut(int, int, int, char const*)+0xb4>
    if (!_windows[winIdx]._valid)
   336b4:	e7d83107 	ldrb	r3, [r8, r7, lsl #2]
   336b8:	e3530000 	cmp	r3, #0
   336bc:	0a00000d 	beq	336f8 <DisplayFX::windowPut(int, int, int, char const*)+0xa4>
   336c0:	e5961018 	ldr	r1, [r6, #24]
   336c4:	e5960010 	ldr	r0, [r6, #16]
    }

    int rows()
    {
        if (cellHeight <= 0)
   336c8:	e3510000 	cmp	r1, #0
            return 0;
   336cc:	d3a00000 	movle	r0, #0
        if (cellHeight <= 0)
   336d0:	da000000 	ble	336d8 <DisplayFX::windowPut(int, int, int, char const*)+0x84>
        return height/cellHeight;
   336d4:	eb006cfb 	bl	4eac8 <__divsi3>
    if (row >= _windows[winIdx].rows())
   336d8:	e15a0000 	cmp	sl, r0
   336dc:	aa000005 	bge	336f8 <DisplayFX::windowPut(int, int, int, char const*)+0xa4>
        windowPut(winIdx, col++, row, *pStr++);
   336e0:	e58db000 	str	fp, [sp]
   336e4:	e1a0300a 	mov	r3, sl
   336e8:	e1a02005 	mov	r2, r5
   336ec:	e1a01009 	mov	r1, r9
   336f0:	e1a00008 	mov	r0, r8
   336f4:	ebfffeb4 	bl	331cc <DisplayFX::windowPut(int, int, int, int) [clone .part.2]>
    while(*pStr)
   336f8:	e5f4b001 	ldrb	fp, [r4, #1]!
        windowPut(winIdx, col++, row, *pStr++);
   336fc:	e2855001 	add	r5, r5, #1
    while(*pStr)
   33700:	e35b0000 	cmp	fp, #0
   33704:	1affffe2 	bne	33694 <DisplayFX::windowPut(int, int, int, char const*)+0x40>
}
   33708:	e28dd00c 	add	sp, sp, #12
   3370c:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

00033710 <DisplayFX::windowPut(int, int, int, int)>:
{
   33710:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    if (winIdx < 0 || winIdx >= DISPLAY_FX_MAX_WINDOWS)
   33714:	e3510004 	cmp	r1, #4
{
   33718:	e59d7020 	ldr	r7, [sp, #32]
    if (winIdx < 0 || winIdx >= DISPLAY_FX_MAX_WINDOWS)
   3371c:	88bd87f0 	pophi	{r4, r5, r6, r7, r8, r9, sl, pc}
    if (!_windows[winIdx]._valid)
   33720:	e081c181 	add	ip, r1, r1, lsl #3
   33724:	e061c20c 	rsb	ip, r1, ip, lsl #4
   33728:	e1a0c10c 	lsl	ip, ip, #2
   3372c:	e7d0e00c 	ldrb	lr, [r0, ip]
   33730:	e35e0000 	cmp	lr, #0
   33734:	08bd87f0 	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
    if (col >= _windows[winIdx].cols())
   33738:	e080400c 	add	r4, r0, ip
   3373c:	e1a09001 	mov	r9, r1
   33740:	e5941014 	ldr	r1, [r4, #20]
   33744:	e1a05000 	mov	r5, r0
        if (cellWidth <= 0)
   33748:	e3510000 	cmp	r1, #0
   3374c:	e5940008 	ldr	r0, [r4, #8]
   33750:	e1a08003 	mov	r8, r3
   33754:	e1a06002 	mov	r6, r2
            return 0;
   33758:	d3a00000 	movle	r0, #0
        if (cellWidth <= 0)
   3375c:	da000000 	ble	33764 <DisplayFX::windowPut(int, int, int, int)+0x54>
        return width/cellWidth;
   33760:	eb006cd8 	bl	4eac8 <__divsi3>
   33764:	e1560000 	cmp	r6, r0
   33768:	a8bd87f0 	popge	{r4, r5, r6, r7, r8, r9, sl, pc}
   3376c:	e5941018 	ldr	r1, [r4, #24]
   33770:	e5940010 	ldr	r0, [r4, #16]
        if (cellHeight <= 0)
   33774:	e3510000 	cmp	r1, #0
            return 0;
   33778:	d3a00000 	movle	r0, #0
        if (cellHeight <= 0)
   3377c:	da000000 	ble	33784 <DisplayFX::windowPut(int, int, int, int)+0x74>
        return height/cellHeight;
   33780:	eb006cd0 	bl	4eac8 <__divsi3>
    if (row >= _windows[winIdx].rows())
   33784:	e1580000 	cmp	r8, r0
   33788:	a8bd87f0 	popge	{r4, r5, r6, r7, r8, r9, sl, pc}
   3378c:	e58d7020 	str	r7, [sp, #32]
   33790:	e1a03008 	mov	r3, r8
   33794:	e1a02006 	mov	r2, r6
   33798:	e1a01009 	mov	r1, r9
   3379c:	e1a00005 	mov	r0, r5
}
   337a0:	e8bd47f0 	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   337a4:	eafffe88 	b	331cc <DisplayFX::windowPut(int, int, int, int) [clone .part.2]>

000337a8 <DisplayFX::windowForeground(int, DISPLAY_FX_COLOUR)>:
    if (winIdx < 0 || winIdx >= DISPLAY_FX_MAX_WINDOWS)
   337a8:	e3510004 	cmp	r1, #4
    _windows[winIdx].windowForeground = colour;
   337ac:	90813181 	addls	r3, r1, r1, lsl #3
   337b0:	90611203 	rsbls	r1, r1, r3, lsl #4
   337b4:	90801101 	addls	r1, r0, r1, lsl #2
   337b8:	95812028 	strls	r2, [r1, #40]	; 0x28
}
   337bc:	e12fff1e 	bx	lr

000337c0 <DisplayFX::windowSetPixel(int, int, int, int, DISPLAY_FX_COLOUR)>:
{
   337c0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
}

uint8_t* DisplayFX::windowGetPFBXY(int winIdx, int x, int y)
{
    return _pfb + 
            ((y * _windows[winIdx].yPixScale) + _windows[winIdx].tly) * _pitch + 
   337c4:	e1a0e181 	lsl	lr, r1, #3
   337c8:	e08e4001 	add	r4, lr, r1
   337cc:	e0614204 	rsb	r4, r1, r4, lsl #4
   337d0:	e0804104 	add	r4, r0, r4, lsl #2
   337d4:	e594500c 	ldr	r5, [r4, #12]
            (x * _windows[winIdx].xPixScale) + _windows[winIdx].tlx;
   337d8:	e594c01c 	ldr	ip, [r4, #28]
   337dc:	e5946004 	ldr	r6, [r4, #4]
            ((y * _windows[winIdx].yPixScale) + _windows[winIdx].tly) * _pitch + 
   337e0:	e5947020 	ldr	r7, [r4, #32]
    int fgColour = ((_windows[winIdx].windowForeground != -1) ?
   337e4:	e5944028 	ldr	r4, [r4, #40]	; 0x28
            ((y * _windows[winIdx].yPixScale) + _windows[winIdx].tly) * _pitch + 
   337e8:	e0235397 	mla	r3, r7, r3, r5
            (x * _windows[winIdx].xPixScale) + _windows[winIdx].tlx;
   337ec:	e025629c 	mla	r5, ip, r2, r6
            ((y * _windows[winIdx].yPixScale) + _windows[winIdx].tly) * _pitch + 
   337f0:	e5906b34 	ldr	r6, [r0, #2868]	; 0xb34
    int fgColour = ((_windows[winIdx].windowForeground != -1) ?
   337f4:	e3740001 	cmn	r4, #1
            (x * _windows[winIdx].xPixScale) + _windows[winIdx].tlx;
   337f8:	e0255396 	mla	r5, r6, r3, r5
   337fc:	e5903b3c 	ldr	r3, [r0, #2876]	; 0xb3c
{
   33800:	e1dd21dc 	ldrsb	r2, [sp, #28]
            (x * _windows[winIdx].xPixScale) + _windows[winIdx].tlx;
   33804:	e0835005 	add	r5, r3, r5
    int fgColour = ((_windows[winIdx].windowForeground != -1) ?
   33808:	02803d2d 	addeq	r3, r0, #2880	; 0xb40
   3380c:	01d340d1 	ldrsbeq	r4, [r3, #1]
        fgColour = colour;
   33810:	e3720001 	cmn	r2, #1
   33814:	11a04002 	movne	r4, r2
    int bgColour = ((_windows[winIdx].windowBackground != -1) ?
   33818:	e08e3001 	add	r3, lr, r1
   3381c:	e0613203 	rsb	r3, r1, r3, lsl #4
   33820:	e0803103 	add	r3, r0, r3, lsl #2
   33824:	e5933024 	ldr	r3, [r3, #36]	; 0x24
{
   33828:	e59d8018 	ldr	r8, [sp, #24]
    int bgColour = ((_windows[winIdx].windowBackground != -1) ?
   3382c:	e3730001 	cmn	r3, #1
   33830:	02803d2d 	addeq	r3, r0, #2880	; 0xb40
   33834:	01d330d0 	ldrsbeq	r3, [r3]
    uint8_t pixColour = value ? fgColour : bgColour;
   33838:	e3580000 	cmp	r8, #0
   3383c:	16ef4074 	uxtbne	r4, r4
   33840:	06ef4073 	uxtbeq	r4, r3
    if ((_windows[winIdx].xPixScale & 0x03) == 0)
   33844:	e21c8003 	ands	r8, ip, #3
   33848:	1a00001a 	bne	338b8 <DisplayFX::windowSetPixel(int, int, int, int, DISPLAY_FX_COLOUR)+0xf8>
        uint32_t pixColourL = (pixColour << 24) + (pixColour << 16) + (pixColour << 8) + pixColour;
   3384c:	e1a03804 	lsl	r3, r4, #16
   33850:	e0833c04 	add	r3, r3, r4, lsl #24
   33854:	e0833404 	add	r3, r3, r4, lsl #8
        for (int iy = 0; iy < _windows[winIdx].yPixScale; iy++)
   33858:	e3570000 	cmp	r7, #0
        uint32_t pixColourL = (pixColour << 24) + (pixColour << 16) + (pixColour << 8) + pixColour;
   3385c:	e0834004 	add	r4, r3, r4
        for (int iy = 0; iy < _windows[winIdx].yPixScale; iy++)
   33860:	d8bd81f0 	pople	{r4, r5, r6, r7, r8, pc}
            for (int ix = 0; ix < _windows[winIdx].xPixScale/4; ix++)
   33864:	e08ee001 	add	lr, lr, r1
   33868:	e061120e 	rsb	r1, r1, lr, lsl #4
   3386c:	e080e101 	add	lr, r0, r1, lsl #2
   33870:	e35c0003 	cmp	ip, #3
            uint32_t* pBufL = (uint32_t*) (pBuf + iy * _pitch);
   33874:	e0215896 	mla	r1, r6, r8, r5
            for (int ix = 0; ix < _windows[winIdx].xPixScale/4; ix++)
   33878:	da000009 	ble	338a4 <DisplayFX::windowSetPixel(int, int, int, int, DISPLAY_FX_COLOUR)+0xe4>
   3387c:	e3a02000 	mov	r2, #0
                *pBufL++ = pixColourL;
   33880:	e4814004 	str	r4, [r1], #4
            for (int ix = 0; ix < _windows[winIdx].xPixScale/4; ix++)
   33884:	e59ec01c 	ldr	ip, [lr, #28]
   33888:	e2822001 	add	r2, r2, #1
   3388c:	e35c0000 	cmp	ip, #0
   33890:	e28c3003 	add	r3, ip, #3
   33894:	a1a0300c 	movge	r3, ip
   33898:	e1520143 	cmp	r2, r3, asr #2
   3389c:	bafffff7 	blt	33880 <DisplayFX::windowSetPixel(int, int, int, int, DISPLAY_FX_COLOUR)+0xc0>
   338a0:	e59e7020 	ldr	r7, [lr, #32]
        for (int iy = 0; iy < _windows[winIdx].yPixScale; iy++)
   338a4:	e2888001 	add	r8, r8, #1
   338a8:	e1580007 	cmp	r8, r7
   338ac:	a8bd81f0 	popge	{r4, r5, r6, r7, r8, pc}
   338b0:	e5906b34 	ldr	r6, [r0, #2868]	; 0xb34
   338b4:	eaffffed 	b	33870 <DisplayFX::windowSetPixel(int, int, int, int, DISPLAY_FX_COLOUR)+0xb0>
        for (int iy = 0; iy < _windows[winIdx].yPixScale; iy++)
   338b8:	e3570000 	cmp	r7, #0
   338bc:	d8bd81f0 	pople	{r4, r5, r6, r7, r8, pc}
   338c0:	e3a08000 	mov	r8, #0
            for (int ix = 0; ix < _windows[winIdx].xPixScale; ix++)
   338c4:	e08ee001 	add	lr, lr, r1
   338c8:	e061e20e 	rsb	lr, r1, lr, lsl #4
   338cc:	e080e10e 	add	lr, r0, lr, lsl #2
   338d0:	e35c0000 	cmp	ip, #0
            unsigned char* pBufL = pBuf + iy * _pitch;
   338d4:	e0215896 	mla	r1, r6, r8, r5
            for (int ix = 0; ix < _windows[winIdx].xPixScale; ix++)
   338d8:	da000006 	ble	338f8 <DisplayFX::windowSetPixel(int, int, int, int, DISPLAY_FX_COLOUR)+0x138>
            unsigned char* pBufL = pBuf + iy * _pitch;
   338dc:	e1a03001 	mov	r3, r1
                *pBufL++ = pixColour;
   338e0:	e4c34001 	strb	r4, [r3], #1
            for (int ix = 0; ix < _windows[winIdx].xPixScale; ix++)
   338e4:	e59ec01c 	ldr	ip, [lr, #28]
   338e8:	e0432001 	sub	r2, r3, r1
   338ec:	e15c0002 	cmp	ip, r2
   338f0:	cafffffa 	bgt	338e0 <DisplayFX::windowSetPixel(int, int, int, int, DISPLAY_FX_COLOUR)+0x120>
   338f4:	e59e7020 	ldr	r7, [lr, #32]
        for (int iy = 0; iy < _windows[winIdx].yPixScale; iy++)
   338f8:	e2888001 	add	r8, r8, #1
   338fc:	e1580007 	cmp	r8, r7
   33900:	a8bd81f0 	popge	{r4, r5, r6, r7, r8, pc}
   33904:	e5906b34 	ldr	r6, [r0, #2868]	; 0xb34
   33908:	eafffff0 	b	338d0 <DisplayFX::windowSetPixel(int, int, int, int, DISPLAY_FX_COLOUR)+0x110>

0003390c <DisplayFX::getFramebuffer(int, FrameBufferInfo&)>:
{
   3390c:	e92d4030 	push	{r4, r5, lr}
    frameBufferInfo.bytesPerPixel = 1;
   33910:	e3a0e001 	mov	lr, #1
    frameBufferInfo.pFB = _pfb;
   33914:	e590cb3c 	ldr	ip, [r0, #2876]	; 0xb3c
            ((y * _windows[winIdx].yPixScale) + _windows[winIdx].tly) * _pitch + 
   33918:	e0813181 	add	r3, r1, r1, lsl #3
    frameBufferInfo.pFB = _pfb;
   3391c:	e582c000 	str	ip, [r2]
    frameBufferInfo.pixelsWidth = _screenWidth;
   33920:	e590cb2c 	ldr	ip, [r0, #2860]	; 0xb2c
            ((y * _windows[winIdx].yPixScale) + _windows[winIdx].tly) * _pitch + 
   33924:	e0611203 	rsb	r1, r1, r3, lsl #4
    frameBufferInfo.pixelsWidth = _screenWidth;
   33928:	e582c004 	str	ip, [r2, #4]
    frameBufferInfo.pixelsHeight = _screenWidth;
   3392c:	e5903b2c 	ldr	r3, [r0, #2860]	; 0xb2c
            ((y * _windows[winIdx].yPixScale) + _windows[winIdx].tly) * _pitch + 
   33930:	e0801101 	add	r1, r0, r1, lsl #2
    frameBufferInfo.pixelsHeight = _screenWidth;
   33934:	e5823008 	str	r3, [r2, #8]
    frameBufferInfo.pitch = _pitch;
   33938:	e5903b34 	ldr	r3, [r0, #2868]	; 0xb34
   3393c:	e582300c 	str	r3, [r2, #12]
            ((y * _windows[winIdx].yPixScale) + _windows[winIdx].tly) * _pitch + 
   33940:	e591c00c 	ldr	ip, [r1, #12]
   33944:	e5905b34 	ldr	r5, [r0, #2868]	; 0xb34
            (x * _windows[winIdx].xPixScale) + _windows[winIdx].tlx;
   33948:	e5914004 	ldr	r4, [r1, #4]
   3394c:	e5903b3c 	ldr	r3, [r0, #2876]	; 0xb3c
   33950:	e0204c95 	mla	r0, r5, ip, r4
   33954:	e0833000 	add	r3, r3, r0
    frameBufferInfo.pFBWindow = windowGetPFBXY(winIdx, 0, 0);
   33958:	e5823010 	str	r3, [r2, #16]
    frameBufferInfo.pixelsWidthWindow = _windows[winIdx].width;
   3395c:	e5913008 	ldr	r3, [r1, #8]
   33960:	e5823014 	str	r3, [r2, #20]
    frameBufferInfo.pixelsHeightWindow = _windows[winIdx].height;
   33964:	e5913010 	ldr	r3, [r1, #16]
    frameBufferInfo.bytesPerPixel = 1;
   33968:	e582e01c 	str	lr, [r2, #28]
    frameBufferInfo.pixelsHeightWindow = _windows[winIdx].height;
   3396c:	e5823018 	str	r3, [r2, #24]
}
   33970:	e8bd8030 	pop	{r4, r5, pc}

00033974 <DisplayFX::setFramebuffer(unsigned char*, int, int, int, int)>:
{
   33974:	e92d4010 	push	{r4, lr}
   33978:	e59de008 	ldr	lr, [sp, #8]
   3397c:	e59dc00c 	ldr	ip, [sp, #12]
    _pitch = pitch;
   33980:	e580eb34 	str	lr, [r0, #2868]	; 0xb34
        _windows[winIdx].tlx = tlx * xPixScale + borderWidth;
   33984:	e3a0e000 	mov	lr, #0
    _pfb = p_framebuffer;
   33988:	e5801b3c 	str	r1, [r0, #2876]	; 0xb3c
    _size = size;
   3398c:	e580cb38 	str	ip, [r0, #2872]	; 0xb38
    _windows[winIdx].windowForeground = foregroundColour;
   33990:	e3e01000 	mvn	r1, #0
    _windows[winIdx].xPixScale = xPixScale;
   33994:	e3a0c002 	mov	ip, #2
    _windows[winIdx]._valid = true;
   33998:	e3a04001 	mov	r4, #1
    if (width == -1 && tlx != -1)
   3399c:	e3720001 	cmn	r2, #1
    _screenWidth = width;
   339a0:	e5802b2c 	str	r2, [r0, #2860]	; 0xb2c
        _windows[winIdx].width = width * xPixScale;
   339a4:	11a02082 	lslne	r2, r2, #1
   339a8:	e5802008 	str	r2, [r0, #8]
    if (height == -1)
   339ac:	e3730001 	cmn	r3, #1
        _windows[winIdx].cellWidth = pFontToUse->cellX;
   339b0:	e59f2038 	ldr	r2, [pc, #56]	; 339f0 <DisplayFX::setFramebuffer(unsigned char*, int, int, int, int)+0x7c>
    _screenHeight = height;
   339b4:	e5803b30 	str	r3, [r0, #2864]	; 0xb30
        _windows[winIdx].tlx = tlx * xPixScale + borderWidth;
   339b8:	e580e004 	str	lr, [r0, #4]
        _windows[winIdx].height = height * yPixScale;
   339bc:	11a03083 	lslne	r3, r3, #1
   339c0:	e5803010 	str	r3, [r0, #16]
    _windows[winIdx].tly = tly * yPixScale + borderWidth;
   339c4:	e580e00c 	str	lr, [r0, #12]
    _windows[winIdx].pFont = pFontToUse;
   339c8:	e580202c 	str	r2, [r0, #44]	; 0x2c
        _windows[winIdx].cellWidth = pFontToUse->cellX;
   339cc:	e8924008 	ldm	r2, {r3, lr}
    _windows[winIdx].xPixScale = xPixScale;
   339d0:	e580c01c 	str	ip, [r0, #28]
        _windows[winIdx].cellHeight = pFontToUse->cellY;
   339d4:	e580e018 	str	lr, [r0, #24]
        _windows[winIdx].cellWidth = pFontToUse->cellX;
   339d8:	e5803014 	str	r3, [r0, #20]
    _windows[winIdx].yPixScale = yPixScale;
   339dc:	e580c020 	str	ip, [r0, #32]
    _windows[winIdx].windowForeground = foregroundColour;
   339e0:	e5801028 	str	r1, [r0, #40]	; 0x28
    _windows[winIdx].windowBackground = backgroundColour;
   339e4:	e5801024 	str	r1, [r0, #36]	; 0x24
    _windows[winIdx]._valid = true;
   339e8:	e5c04000 	strb	r4, [r0]
}
   339ec:	e8bd8010 	pop	{r4, pc}
   339f0:	0005aa28 	.word	0x0005aa28

000339f4 <DisplayFX::init(int, int)>:
{
   339f4:	e92d4070 	push	{r4, r5, r6, lr}
   339f8:	e1a04000 	mov	r4, r0
   339fc:	e24dd028 	sub	sp, sp, #40	; 0x28
    microsDelay(10000);
   33a00:	e59f0200 	ldr	r0, [pc, #512]	; 33c08 <DisplayFX::init(int, int)+0x214>
{
   33a04:	e1a05001 	mov	r5, r1
   33a08:	e1a06002 	mov	r6, r2
    microsDelay(10000);
   33a0c:	eb000b65 	bl	367a8 <microsDelay>
    fb_release();
   33a10:	ebffbd8d 	bl	2304c <fb_release>
    fb_init(p_w, p_h, v_w, v_h, 8, (void**)&p_fb, &fbsize, &pitch);
   33a14:	e3a0e008 	mov	lr, #8
    uint8_t* p_fb = 0;
   33a18:	e3a0c000 	mov	ip, #0
    fb_init(p_w, p_h, v_w, v_h, 8, (void**)&p_fb, &fbsize, &pitch);
   33a1c:	e58de000 	str	lr, [sp]
   33a20:	e28de01c 	add	lr, sp, #28
   33a24:	e58de00c 	str	lr, [sp, #12]
   33a28:	e28de018 	add	lr, sp, #24
   33a2c:	e58de008 	str	lr, [sp, #8]
   33a30:	e28de014 	add	lr, sp, #20
   33a34:	e1a03006 	mov	r3, r6
   33a38:	e1a02005 	mov	r2, r5
   33a3c:	e58de004 	str	lr, [sp, #4]
   33a40:	e1a01006 	mov	r1, r6
   33a44:	e1a00005 	mov	r0, r5
    uint8_t* p_fb = 0;
   33a48:	e58dc014 	str	ip, [sp, #20]
    unsigned int fbsize = 0;
   33a4c:	e58dc018 	str	ip, [sp, #24]
    unsigned int pitch = 0;
   33a50:	e58dc01c 	str	ip, [sp, #28]
    unsigned int p_w = displayWidth;
   33a54:	e58d5020 	str	r5, [sp, #32]
    unsigned int p_h = displayHeight;
   33a58:	e58d6024 	str	r6, [sp, #36]	; 0x24
    fb_init(p_w, p_h, v_w, v_h, 8, (void**)&p_fb, &fbsize, &pitch);
   33a5c:	ebffbce1 	bl	22de8 <fb_init>
    fb_set_xterm_palette();
   33a60:	ebffbdcf 	bl	231a4 <fb_set_xterm_palette>
    if (fb_get_physical_buffer_size(&p_w, &p_h) != FB_SUCCESS) {
   33a64:	e28d1024 	add	r1, sp, #36	; 0x24
   33a68:	e28d0020 	add	r0, sp, #32
   33a6c:	ebffbe72 	bl	2343c <fb_get_physical_buffer_size>
    microsDelay(10000);
   33a70:	e59f0190 	ldr	r0, [pc, #400]	; 33c08 <DisplayFX::init(int, int)+0x214>
   33a74:	eb000b4b 	bl	367a8 <microsDelay>
    setFramebuffer(p_fb, v_w, v_h, pitch, fbsize);
   33a78:	e59dc01c 	ldr	ip, [sp, #28]
   33a7c:	e59de018 	ldr	lr, [sp, #24]
   33a80:	e1a03006 	mov	r3, r6
   33a84:	e1a02005 	mov	r2, r5
   33a88:	e88d5000 	stm	sp, {ip, lr}
   33a8c:	e59d1014 	ldr	r1, [sp, #20]
   33a90:	e1a00004 	mov	r0, r4
   33a94:	ebffffb6 	bl	33974 <DisplayFX::setFramebuffer(unsigned char*, int, int, int, int)>
    uint8_t* pFrameBuf = _pfb;
   33a98:	e5943b3c 	ldr	r3, [r4, #2876]	; 0xb3c
    uint8_t* pFBEnd = _pfb + _size;
   33a9c:	e5942b38 	ldr	r2, [r4, #2872]	; 0xb38
   33aa0:	e083c002 	add	ip, r3, r2
    while (pFrameBuf < pFBEnd)
   33aa4:	e153000c 	cmp	r3, ip
   33aa8:	2a000047 	bcs	33bcc <DisplayFX::init(int, int)+0x1d8>
   33aac:	e2840d2d 	add	r0, r4, #2880	; 0xb40
   33ab0:	e2801001 	add	r1, r0, #1
   33ab4:	e1530001 	cmp	r3, r1
   33ab8:	3150000c 	cmpcc	r0, ip
   33abc:	23a01001 	movcs	r1, #1
   33ac0:	33a01000 	movcc	r1, #0
   33ac4:	e3520008 	cmp	r2, #8
   33ac8:	93a01000 	movls	r1, #0
   33acc:	82011001 	andhi	r1, r1, #1
   33ad0:	e283e001 	add	lr, r3, #1
   33ad4:	e3510000 	cmp	r1, #0
   33ad8:	e2421001 	sub	r1, r2, #1
   33adc:	e1a0200e 	mov	r2, lr
   33ae0:	0a000043 	beq	33bf4 <DisplayFX::init(int, int)+0x200>
   33ae4:	e2635000 	rsb	r5, r3, #0
   33ae8:	e2155003 	ands	r5, r5, #3
   33aec:	01a0e003 	moveq	lr, r3
   33af0:	0a00000a 	beq	33b20 <DisplayFX::init(int, int)+0x12c>
        *pFrameBuf++ = _screenBackground;
   33af4:	e5d42b40 	ldrb	r2, [r4, #2880]	; 0xb40
   33af8:	e3550001 	cmp	r5, #1
   33afc:	e5c32000 	strb	r2, [r3]
   33b00:	0a000006 	beq	33b20 <DisplayFX::init(int, int)+0x12c>
   33b04:	e5d42b40 	ldrb	r2, [r4, #2880]	; 0xb40
   33b08:	e3550002 	cmp	r5, #2
   33b0c:	e5c32001 	strb	r2, [r3, #1]
   33b10:	15d42b40 	ldrbne	r2, [r4, #2880]	; 0xb40
   33b14:	e283e002 	add	lr, r3, #2
   33b18:	15c32002 	strbne	r2, [r3, #2]
   33b1c:	1283e003 	addne	lr, r3, #3
    while (pFrameBuf < pFBEnd)
   33b20:	e3a02000 	mov	r2, #0
   33b24:	e5d06000 	ldrb	r6, [r0]
   33b28:	e0411005 	sub	r1, r1, r5
   33b2c:	e1860406 	orr	r0, r6, r6, lsl #8
   33b30:	e2811001 	add	r1, r1, #1
   33b34:	e1800806 	orr	r0, r0, r6, lsl #16
   33b38:	e0833005 	add	r3, r3, r5
   33b3c:	e1800c06 	orr	r0, r0, r6, lsl #24
   33b40:	e1a05121 	lsr	r5, r1, #2
   33b44:	e2822001 	add	r2, r2, #1
   33b48:	e1520005 	cmp	r2, r5
        *pFrameBuf++ = _screenBackground;
   33b4c:	e4830004 	str	r0, [r3], #4
   33b50:	3afffffb 	bcc	33b44 <DisplayFX::init(int, int)+0x150>
   33b54:	e3c12003 	bic	r2, r1, #3
   33b58:	e1510002 	cmp	r1, r2
   33b5c:	e08e3002 	add	r3, lr, r2
   33b60:	0a000019 	beq	33bcc <DisplayFX::init(int, int)+0x1d8>
   33b64:	e5d41b40 	ldrb	r1, [r4, #2880]	; 0xb40
   33b68:	e2830001 	add	r0, r3, #1
    while (pFrameBuf < pFBEnd)
   33b6c:	e15c0000 	cmp	ip, r0
        *pFrameBuf++ = _screenBackground;
   33b70:	e7ce1002 	strb	r1, [lr, r2]
    while (pFrameBuf < pFBEnd)
   33b74:	9a000014 	bls	33bcc <DisplayFX::init(int, int)+0x1d8>
        *pFrameBuf++ = _screenBackground;
   33b78:	e5d42b40 	ldrb	r2, [r4, #2880]	; 0xb40
   33b7c:	e2831002 	add	r1, r3, #2
    while (pFrameBuf < pFBEnd)
   33b80:	e15c0001 	cmp	ip, r1
        *pFrameBuf++ = _screenBackground;
   33b84:	e5c32001 	strb	r2, [r3, #1]
    while (pFrameBuf < pFBEnd)
   33b88:	9a00000f 	bls	33bcc <DisplayFX::init(int, int)+0x1d8>
        *pFrameBuf++ = _screenBackground;
   33b8c:	e5d42b40 	ldrb	r2, [r4, #2880]	; 0xb40
   33b90:	e2831003 	add	r1, r3, #3
    while (pFrameBuf < pFBEnd)
   33b94:	e15c0001 	cmp	ip, r1
        *pFrameBuf++ = _screenBackground;
   33b98:	e5c32002 	strb	r2, [r3, #2]
    while (pFrameBuf < pFBEnd)
   33b9c:	9a00000a 	bls	33bcc <DisplayFX::init(int, int)+0x1d8>
        *pFrameBuf++ = _screenBackground;
   33ba0:	e5d42b40 	ldrb	r2, [r4, #2880]	; 0xb40
   33ba4:	e2831004 	add	r1, r3, #4
    while (pFrameBuf < pFBEnd)
   33ba8:	e15c0001 	cmp	ip, r1
        *pFrameBuf++ = _screenBackground;
   33bac:	e5c32003 	strb	r2, [r3, #3]
    while (pFrameBuf < pFBEnd)
   33bb0:	9a000005 	bls	33bcc <DisplayFX::init(int, int)+0x1d8>
        *pFrameBuf++ = _screenBackground;
   33bb4:	e5d42b40 	ldrb	r2, [r4, #2880]	; 0xb40
   33bb8:	e2831005 	add	r1, r3, #5
    while (pFrameBuf < pFBEnd)
   33bbc:	e15c0001 	cmp	ip, r1
        *pFrameBuf++ = _screenBackground;
   33bc0:	e5c32004 	strb	r2, [r3, #4]
   33bc4:	85d42b40 	ldrbhi	r2, [r4, #2880]	; 0xb40
   33bc8:	85c32005 	strbhi	r2, [r3, #5]
        _windows[i]._valid = false;
   33bcc:	e3a03000 	mov	r3, #0
}
   33bd0:	e3a00001 	mov	r0, #1
        _windows[i]._valid = false;
   33bd4:	e5c43000 	strb	r3, [r4]
   33bd8:	e5c4323c 	strb	r3, [r4, #572]	; 0x23c
   33bdc:	e5c43478 	strb	r3, [r4, #1144]	; 0x478
   33be0:	e5c436b4 	strb	r3, [r4, #1716]	; 0x6b4
   33be4:	e5c438f0 	strb	r3, [r4, #2288]	; 0x8f0
}
   33be8:	e28dd028 	add	sp, sp, #40	; 0x28
   33bec:	e8bd8070 	pop	{r4, r5, r6, pc}
   33bf0:	e2822001 	add	r2, r2, #1
        *pFrameBuf++ = _screenBackground;
   33bf4:	e5d43b40 	ldrb	r3, [r4, #2880]	; 0xb40
    while (pFrameBuf < pFBEnd)
   33bf8:	e15c0002 	cmp	ip, r2
        *pFrameBuf++ = _screenBackground;
   33bfc:	e5423001 	strb	r3, [r2, #-1]
    while (pFrameBuf < pFBEnd)
   33c00:	1afffffa 	bne	33bf0 <DisplayFX::init(int, int)+0x1fc>
   33c04:	eafffff0 	b	33bcc <DisplayFX::init(int, int)+0x1d8>
   33c08:	00002710 	.word	0x00002710

00033c0c <DisplayFX::windowSetup(int, int, int, int, int, int, int, int, int, WgfxFont*, int, int, int, int)>:
{
   33c0c:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   33c10:	e24dd00c 	sub	sp, sp, #12
   33c14:	e28d603c 	add	r6, sp, #60	; 0x3c
    if (winIdx < 0 || winIdx >= DISPLAY_FX_MAX_WINDOWS)
   33c18:	e3510004 	cmp	r1, #4
{
   33c1c:	e59da038 	ldr	sl, [sp, #56]	; 0x38
   33c20:	e8964140 	ldm	r6, {r6, r8, lr}
   33c24:	e59dc048 	ldr	ip, [sp, #72]	; 0x48
   33c28:	e59d7054 	ldr	r7, [sp, #84]	; 0x54
    if (winIdx < 0 || winIdx >= DISPLAY_FX_MAX_WINDOWS)
   33c2c:	8a00009a 	bhi	33e9c <DisplayFX::windowSetup(int, int, int, int, int, int, int, int, int, WgfxFont*, int, int, int, int)+0x290>
    if (width == -1 && tlx != -1)
   33c30:	e59d5030 	ldr	r5, [sp, #48]	; 0x30
   33c34:	e2924001 	adds	r4, r2, #1
   33c38:	13a04001 	movne	r4, #1
   33c3c:	e3750001 	cmn	r5, #1
   33c40:	13a04000 	movne	r4, #0
    WgfxFont* pFontToUse = (pFont != NULL) ? pFont : (&__systemFont);
   33c44:	e59f5284 	ldr	r5, [pc, #644]	; 33ed0 <DisplayFX::windowSetup(int, int, int, int, int, int, int, int, int, WgfxFont*, int, int, int, int)+0x2c4>
   33c48:	e35c0000 	cmp	ip, #0
   33c4c:	01a0c005 	moveq	ip, r5
    if (width == -1 && tlx != -1)
   33c50:	e3540000 	cmp	r4, #0
   33c54:	1a000092 	bne	33ea4 <DisplayFX::windowSetup(int, int, int, int, int, int, int, int, int, WgfxFont*, int, int, int, int)+0x298>
    else if (width == -1)
   33c58:	e59d4030 	ldr	r4, [sp, #48]	; 0x30
        _windows[winIdx].width = _screenWidth;
   33c5c:	e1a05181 	lsl	r5, r1, #3
    else if (width == -1)
   33c60:	e3740001 	cmn	r4, #1
        _windows[winIdx].width = width * xPixScale;
   33c64:	10040498 	mulne	r4, r8, r4
        _windows[winIdx].width = _screenWidth;
   33c68:	00854001 	addeq	r4, r5, r1
        _windows[winIdx].width = width * xPixScale;
   33c6c:	10859001 	addne	r9, r5, r1
        _windows[winIdx].width = _screenWidth;
   33c70:	00614204 	rsbeq	r4, r1, r4, lsl #4
        _windows[winIdx].width = width * xPixScale;
   33c74:	10619209 	rsbne	r9, r1, r9, lsl #4
        _windows[winIdx].width = _screenWidth;
   33c78:	05909b2c 	ldreq	r9, [r0, #2860]	; 0xb2c
   33c7c:	00804104 	addeq	r4, r0, r4, lsl #2
        _windows[winIdx].width = width * xPixScale;
   33c80:	10809109 	addne	r9, r0, r9, lsl #2
        _windows[winIdx].width = _screenWidth;
   33c84:	05849008 	streq	r9, [r4, #8]
        _windows[winIdx].width = width * xPixScale;
   33c88:	15894008 	strne	r4, [r9, #8]
    if (height == -1)
   33c8c:	e59d4034 	ldr	r4, [sp, #52]	; 0x34
   33c90:	e0859001 	add	r9, r5, r1
   33c94:	e3740001 	cmn	r4, #1
        _windows[winIdx].height = _screenHeight - tly - borderWidth * 2;
   33c98:	05904b30 	ldreq	r4, [r0, #2864]	; 0xb30
        _windows[winIdx].height = height * yPixScale;
   33c9c:	1004049e 	mulne	r4, lr, r4
        _windows[winIdx].height = _screenHeight - tly - borderWidth * 2;
   33ca0:	00444003 	subeq	r4, r4, r3
   33ca4:	e0619209 	rsb	r9, r1, r9, lsl #4
   33ca8:	00444087 	subeq	r4, r4, r7, lsl #1
   33cac:	e0809109 	add	r9, r0, r9, lsl #2
   33cb0:	e5894010 	str	r4, [r9, #16]
    if (tlx != -1)
   33cb4:	e3720001 	cmn	r2, #1
        _windows[winIdx].tlx = (_screenWidth - _windows[winIdx].width) / 2;
   33cb8:	05902b2c 	ldreq	r2, [r0, #2860]	; 0xb2c
   33cbc:	05994008 	ldreq	r4, [r9, #8]
        _windows[winIdx].tlx = tlx * xPixScale + borderWidth;
   33cc0:	10227298 	mlane	r2, r8, r2, r7
        _windows[winIdx].tlx = (_screenWidth - _windows[winIdx].width) / 2;
   33cc4:	00422004 	subeq	r2, r2, r4
    _windows[winIdx].tly = tly * yPixScale + borderWidth;
   33cc8:	e0237e93 	mla	r3, r3, lr, r7
   33ccc:	e0854001 	add	r4, r5, r1
   33cd0:	e0614204 	rsb	r4, r1, r4, lsl #4
        _windows[winIdx].tlx = (_screenWidth - _windows[winIdx].width) / 2;
   33cd4:	00822fa2 	addeq	r2, r2, r2, lsr #31
   33cd8:	e1a04104 	lsl	r4, r4, #2
   33cdc:	e0809004 	add	r9, r0, r4
   33ce0:	01a020c2 	asreq	r2, r2, #1
    _windows[winIdx].tly = tly * yPixScale + borderWidth;
   33ce4:	e589300c 	str	r3, [r9, #12]
   33ce8:	e5892004 	str	r2, [r9, #4]
   33cec:	e0853001 	add	r3, r5, r1
    if (cellWidth == -1)
   33cf0:	e37a0001 	cmn	sl, #1
        _windows[winIdx].cellWidth = pFontToUse->cellX;
   33cf4:	059ca000 	ldreq	sl, [ip]
   33cf8:	e0613203 	rsb	r3, r1, r3, lsl #4
   33cfc:	e0803103 	add	r3, r0, r3, lsl #2
   33d00:	e583a014 	str	sl, [r3, #20]
    if (borderColour != -1 && borderWidth > 0)
   33d04:	e59d3058 	ldr	r3, [sp, #88]	; 0x58
    if (cellHeight == -1)
   33d08:	e3760001 	cmn	r6, #1
        _windows[winIdx].cellHeight = pFontToUse->cellY;
   33d0c:	059c6004 	ldreq	r6, [ip, #4]
    if (borderColour != -1 && borderWidth > 0)
   33d10:	e3730001 	cmn	r3, #1
   33d14:	13570000 	cmpne	r7, #0
   33d18:	e0855001 	add	r5, r5, r1
    _windows[winIdx].windowForeground = foregroundColour;
   33d1c:	e59d304c 	ldr	r3, [sp, #76]	; 0x4c
   33d20:	e0611205 	rsb	r1, r1, r5, lsl #4
   33d24:	e0805101 	add	r5, r0, r1, lsl #2
   33d28:	e5853028 	str	r3, [r5, #40]	; 0x28
    _windows[winIdx].windowBackground = backgroundColour;
   33d2c:	e59d3050 	ldr	r3, [sp, #80]	; 0x50
   33d30:	e58d4004 	str	r4, [sp, #4]
   33d34:	e5856018 	str	r6, [r5, #24]
   33d38:	e1a04000 	mov	r4, r0
    _windows[winIdx].xPixScale = xPixScale;
   33d3c:	e585801c 	str	r8, [r5, #28]
    _windows[winIdx].yPixScale = yPixScale;
   33d40:	e585e020 	str	lr, [r5, #32]
    _windows[winIdx].pFont = pFontToUse;
   33d44:	e585c02c 	str	ip, [r5, #44]	; 0x2c
    _windows[winIdx].windowBackground = backgroundColour;
   33d48:	e5853024 	str	r3, [r5, #36]	; 0x24
    if (borderColour != -1 && borderWidth > 0)
   33d4c:	da00004f 	ble	33e90 <DisplayFX::windowSetup(int, int, int, int, int, int, int, int, int, WgfxFont*, int, int, int, int)+0x284>
        for (int i = 0; i < borderWidth; i++)
   33d50:	e3a08000 	mov	r8, #0
   33d54:	e59d3058 	ldr	r3, [sp, #88]	; 0x58
   33d58:	e590bb34 	ldr	fp, [r0, #2868]	; 0xb34
                    _windows[winIdx].width + borderWidth * 2,
   33d5c:	e1a0a087 	lsl	sl, r7, #1
   33d60:	e6ef6073 	uxtb	r6, r3
                    _windows[winIdx].tly-borderWidth+i, 
   33d64:	e595c00c 	ldr	ip, [r5, #12]
            drawHorizontal(_windows[winIdx].tlx-borderWidth, 
   33d68:	e5952008 	ldr	r2, [r5, #8]
                    _windows[winIdx].tly-borderWidth+i, 
   33d6c:	e04cc007 	sub	ip, ip, r7
            drawHorizontal(_windows[winIdx].tlx-borderWidth, 
   33d70:	e08a2002 	add	r2, sl, r2
   33d74:	e5993004 	ldr	r3, [r9, #4]
   33d78:	e08c1008 	add	r1, ip, r8
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void DisplayFX::drawHorizontal(int x, int y, int len, int colour)
{
    uint8_t* pBuf = screenGetPFBXY(x, y);
    for (int i = 0; i < len; i++)
   33d7c:	e3520000 	cmp	r2, #0
    return _pfb + y * _pitch + x;
   33d80:	e001019b 	mul	r1, fp, r1
            drawHorizontal(_windows[winIdx].tlx-borderWidth, 
   33d84:	e0433007 	sub	r3, r3, r7
    return _pfb + y * _pitch + x;
   33d88:	e5940b3c 	ldr	r0, [r4, #2876]	; 0xb3c
    for (int i = 0; i < len; i++)
   33d8c:	da00004d 	ble	33ec8 <DisplayFX::windowSetup(int, int, int, int, int, int, int, int, int, WgfxFont*, int, int, int, int)+0x2bc>
   33d90:	e0811003 	add	r1, r1, r3
   33d94:	e0800001 	add	r0, r0, r1
   33d98:	e1a01006 	mov	r1, r6
   33d9c:	eb006435 	bl	4ce78 <memset>
   33da0:	e595c00c 	ldr	ip, [r5, #12]
                    _windows[winIdx].tly+_windows[winIdx].height+i, 
   33da4:	e5951010 	ldr	r1, [r5, #16]
   33da8:	e5952008 	ldr	r2, [r5, #8]
   33dac:	e5990004 	ldr	r0, [r9, #4]
   33db0:	e081e00c 	add	lr, r1, ip
   33db4:	e594bb34 	ldr	fp, [r4, #2868]	; 0xb34
   33db8:	e08a2002 	add	r2, sl, r2
            drawHorizontal(_windows[winIdx].tlx-borderWidth, 
   33dbc:	e08ee008 	add	lr, lr, r8
    for (int i = 0; i < len; i++)
   33dc0:	e3520000 	cmp	r2, #0
   33dc4:	e0403007 	sub	r3, r0, r7
    return _pfb + y * _pitch + x;
   33dc8:	e00e0e9b 	mul	lr, fp, lr
   33dcc:	e5940b3c 	ldr	r0, [r4, #2876]	; 0xb3c
    for (int i = 0; i < len; i++)
   33dd0:	da000009 	ble	33dfc <DisplayFX::windowSetup(int, int, int, int, int, int, int, int, int, WgfxFont*, int, int, int, int)+0x1f0>
   33dd4:	e08e3003 	add	r3, lr, r3
   33dd8:	e0800003 	add	r0, r0, r3
   33ddc:	e1a01006 	mov	r1, r6
   33de0:	eb006424 	bl	4ce78 <memset>
   33de4:	e5993004 	ldr	r3, [r9, #4]
   33de8:	e595c00c 	ldr	ip, [r5, #12]
   33dec:	e5951010 	ldr	r1, [r5, #16]
   33df0:	e5940b3c 	ldr	r0, [r4, #2876]	; 0xb3c
   33df4:	e594bb34 	ldr	fp, [r4, #2868]	; 0xb34
   33df8:	e0433007 	sub	r3, r3, r7
   33dfc:	e04cc007 	sub	ip, ip, r7
            drawVertical(_windows[winIdx].tlx-borderWidth+i, 
   33e00:	e0883003 	add	r3, r8, r3
    return _pfb + y * _pitch + x;
   33e04:	e0233c9b 	mla	r3, fp, ip, r3
            drawVertical(_windows[winIdx].tlx-borderWidth+i, 
   33e08:	e08a2001 	add	r2, sl, r1
}

void DisplayFX::drawVertical(int x, int y, int len, int colour)
{
    uint8_t* pBuf = screenGetPFBXY(x, y);
    for (int i = 0; i < len; i++)
   33e0c:	e3520000 	cmp	r2, #0
    return _pfb + y * _pitch + x;
   33e10:	e0800003 	add	r0, r0, r3
    for (int i = 0; i < len; i++)
   33e14:	da00001a 	ble	33e84 <DisplayFX::windowSetup(int, int, int, int, int, int, int, int, int, WgfxFont*, int, int, int, int)+0x278>
   33e18:	e3a03000 	mov	r3, #0
    {
        *pBuf = colour;
   33e1c:	e5c06000 	strb	r6, [r0]
    for (int i = 0; i < len; i++)
   33e20:	e2833001 	add	r3, r3, #1
        pBuf += _pitch;
   33e24:	e594bb34 	ldr	fp, [r4, #2868]	; 0xb34
    for (int i = 0; i < len; i++)
   33e28:	e1520003 	cmp	r2, r3
        pBuf += _pitch;
   33e2c:	e080000b 	add	r0, r0, fp
    for (int i = 0; i < len; i++)
   33e30:	1afffff9 	bne	33e1c <DisplayFX::windowSetup(int, int, int, int, int, int, int, int, int, WgfxFont*, int, int, int, int)+0x210>
            drawVertical(_windows[winIdx].tlx+_windows[winIdx].width+i, 
   33e34:	e5991004 	ldr	r1, [r9, #4]
   33e38:	e5952008 	ldr	r2, [r5, #8]
    return _pfb + y * _pitch + x;
   33e3c:	e595300c 	ldr	r3, [r5, #12]
            drawVertical(_windows[winIdx].tlx+_windows[winIdx].width+i, 
   33e40:	e0822001 	add	r2, r2, r1
    return _pfb + y * _pitch + x;
   33e44:	e0433007 	sub	r3, r3, r7
            drawVertical(_windows[winIdx].tlx+_windows[winIdx].width+i, 
   33e48:	e0822008 	add	r2, r2, r8
    return _pfb + y * _pitch + x;
   33e4c:	e022239b 	mla	r2, fp, r3, r2
   33e50:	e5951010 	ldr	r1, [r5, #16]
   33e54:	e5943b3c 	ldr	r3, [r4, #2876]	; 0xb3c
   33e58:	e08a1001 	add	r1, sl, r1
    for (int i = 0; i < len; i++)
   33e5c:	e3510000 	cmp	r1, #0
    return _pfb + y * _pitch + x;
   33e60:	e0833002 	add	r3, r3, r2
    for (int i = 0; i < len; i++)
   33e64:	da000006 	ble	33e84 <DisplayFX::windowSetup(int, int, int, int, int, int, int, int, int, WgfxFont*, int, int, int, int)+0x278>
   33e68:	e3a02000 	mov	r2, #0
        *pBuf = colour;
   33e6c:	e5c36000 	strb	r6, [r3]
    for (int i = 0; i < len; i++)
   33e70:	e2822001 	add	r2, r2, #1
        pBuf += _pitch;
   33e74:	e594bb34 	ldr	fp, [r4, #2868]	; 0xb34
    for (int i = 0; i < len; i++)
   33e78:	e1520001 	cmp	r2, r1
        pBuf += _pitch;
   33e7c:	e083300b 	add	r3, r3, fp
    for (int i = 0; i < len; i++)
   33e80:	1afffff9 	bne	33e6c <DisplayFX::windowSetup(int, int, int, int, int, int, int, int, int, WgfxFont*, int, int, int, int)+0x260>
        for (int i = 0; i < borderWidth; i++)
   33e84:	e2888001 	add	r8, r8, #1
   33e88:	e1570008 	cmp	r7, r8
   33e8c:	caffffb4 	bgt	33d64 <DisplayFX::windowSetup(int, int, int, int, int, int, int, int, int, WgfxFont*, int, int, int, int)+0x158>
    _windows[winIdx]._valid = true;
   33e90:	e3a03001 	mov	r3, #1
   33e94:	e59d2004 	ldr	r2, [sp, #4]
   33e98:	e7c43002 	strb	r3, [r4, r2]
}
   33e9c:	e28dd00c 	add	sp, sp, #12
   33ea0:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
        _windows[winIdx].width = _screenWidth - tlx - borderWidth * 2;
   33ea4:	e5909b2c 	ldr	r9, [r0, #2860]	; 0xb2c
   33ea8:	e1a05181 	lsl	r5, r1, #3
   33eac:	e0854001 	add	r4, r5, r1
   33eb0:	e0614204 	rsb	r4, r1, r4, lsl #4
   33eb4:	e0499002 	sub	r9, r9, r2
   33eb8:	e0804104 	add	r4, r0, r4, lsl #2
   33ebc:	e0499087 	sub	r9, r9, r7, lsl #1
   33ec0:	e5849008 	str	r9, [r4, #8]
   33ec4:	eaffff70 	b	33c8c <DisplayFX::windowSetup(int, int, int, int, int, int, int, int, int, WgfxFont*, int, int, int, int)+0x80>
                    _windows[winIdx].tly+_windows[winIdx].height+i, 
   33ec8:	e5951010 	ldr	r1, [r5, #16]
   33ecc:	eaffffcb 	b	33e00 <DisplayFX::windowSetup(int, int, int, int, int, int, int, int, int, WgfxFont*, int, int, int, int)+0x1f4>
   33ed0:	0005aa28 	.word	0x0005aa28

00033ed4 <DisplayFX::windowClear(int)>:
    if (winIdx < 0 || winIdx >= DISPLAY_FX_MAX_WINDOWS)
   33ed4:	e3510004 	cmp	r1, #4
   33ed8:	812fff1e 	bxhi	lr
   33edc:	e0813181 	add	r3, r1, r1, lsl #3
   33ee0:	e0611203 	rsb	r1, r1, r3, lsl #4
   33ee4:	e1a01101 	lsl	r1, r1, #2
    if (!_windows[winIdx]._valid)
   33ee8:	e7d03001 	ldrb	r3, [r0, r1]
   33eec:	e0801001 	add	r1, r0, r1
   33ef0:	e3530000 	cmp	r3, #0
   33ef4:	012fff1e 	bxeq	lr
{
   33ef8:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    return _pfb + ((row * _windows[winIdx].cellHeight * _windows[winIdx].yPixScale) + _windows[winIdx].tly) * _pitch + 
   33efc:	e591300c 	ldr	r3, [r1, #12]
   33f00:	e590cb34 	ldr	ip, [r0, #2868]	; 0xb34
            (col * _windows[winIdx].cellWidth * _windows[winIdx].xPixScale) + _windows[winIdx].tlx;
   33f04:	e5912004 	ldr	r2, [r1, #4]
    int pixDown = _windows[winIdx].height;
   33f08:	e5916010 	ldr	r6, [r1, #16]
            (col * _windows[winIdx].cellWidth * _windows[winIdx].xPixScale) + _windows[winIdx].tlx;
   33f0c:	e022239c 	mla	r2, ip, r3, r2
   33f10:	e5903b3c 	ldr	r3, [r0, #2876]	; 0xb3c
    for (int i = 0; i < pixDown; i++)
   33f14:	e3560000 	cmp	r6, #0
            (col * _windows[winIdx].cellWidth * _windows[winIdx].xPixScale) + _windows[winIdx].tlx;
   33f18:	e0833002 	add	r3, r3, r2
    int bytesAcross = _windows[winIdx].width;
   33f1c:	e5917008 	ldr	r7, [r1, #8]
    for (int i = 0; i < pixDown; i++)
   33f20:	d8bd81f0 	pople	{r4, r5, r6, r7, r8, pc}
   33f24:	e1a05000 	mov	r5, r0
   33f28:	e3a04000 	mov	r4, #0
   33f2c:	e2808d2d 	add	r8, r0, #2880	; 0xb40
        memset(pDest, _screenBackground, bytesAcross);
   33f30:	e1a02007 	mov	r2, r7
   33f34:	e1a00003 	mov	r0, r3
   33f38:	e1d810d0 	ldrsb	r1, [r8]
   33f3c:	eb0063cd 	bl	4ce78 <memset>
    for (int i = 0; i < pixDown; i++)
   33f40:	e2844001 	add	r4, r4, #1
        pDest += _pitch;
   33f44:	e5952b34 	ldr	r2, [r5, #2868]	; 0xb34
    for (int i = 0; i < pixDown; i++)
   33f48:	e1560004 	cmp	r6, r4
        pDest += _pitch;
   33f4c:	e0803002 	add	r3, r0, r2
    for (int i = 0; i < pixDown; i++)
   33f50:	1afffff6 	bne	33f30 <DisplayFX::windowClear(int)+0x5c>
   33f54:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

00033f58 <DisplayFX::windowGetPFB(int, int, int)>:
{
   33f58:	e92d4030 	push	{r4, r5, lr}
    return _pfb + ((row * _windows[winIdx].cellHeight * _windows[winIdx].yPixScale) + _windows[winIdx].tly) * _pitch + 
   33f5c:	e081c181 	add	ip, r1, r1, lsl #3
   33f60:	e061120c 	rsb	r1, r1, ip, lsl #4
   33f64:	e0801101 	add	r1, r0, r1, lsl #2
   33f68:	e591c018 	ldr	ip, [r1, #24]
            (col * _windows[winIdx].cellWidth * _windows[winIdx].xPixScale) + _windows[winIdx].tlx;
   33f6c:	e591e014 	ldr	lr, [r1, #20]
    return _pfb + ((row * _windows[winIdx].cellHeight * _windows[winIdx].yPixScale) + _windows[winIdx].tly) * _pitch + 
   33f70:	e003039c 	mul	r3, ip, r3
            (col * _windows[winIdx].cellWidth * _windows[winIdx].xPixScale) + _windows[winIdx].tlx;
   33f74:	e002029e 	mul	r2, lr, r2
    return _pfb + ((row * _windows[winIdx].cellHeight * _windows[winIdx].yPixScale) + _windows[winIdx].tly) * _pitch + 
   33f78:	e591c00c 	ldr	ip, [r1, #12]
   33f7c:	e5915020 	ldr	r5, [r1, #32]
            (col * _windows[winIdx].cellWidth * _windows[winIdx].xPixScale) + _windows[winIdx].tlx;
   33f80:	e591401c 	ldr	r4, [r1, #28]
   33f84:	e591e004 	ldr	lr, [r1, #4]
    return _pfb + ((row * _windows[winIdx].cellHeight * _windows[winIdx].yPixScale) + _windows[winIdx].tly) * _pitch + 
   33f88:	e023c395 	mla	r3, r5, r3, ip
            (col * _windows[winIdx].cellWidth * _windows[winIdx].xPixScale) + _windows[winIdx].tlx;
   33f8c:	e022e294 	mla	r2, r4, r2, lr
    return _pfb + ((row * _windows[winIdx].cellHeight * _windows[winIdx].yPixScale) + _windows[winIdx].tly) * _pitch + 
   33f90:	e590cb34 	ldr	ip, [r0, #2868]	; 0xb34
            (col * _windows[winIdx].cellWidth * _windows[winIdx].xPixScale) + _windows[winIdx].tlx;
   33f94:	e5900b3c 	ldr	r0, [r0, #2876]	; 0xb3c
   33f98:	e023239c 	mla	r3, ip, r3, r2
}
   33f9c:	e0800003 	add	r0, r0, r3
   33fa0:	e8bd8030 	pop	{r4, r5, pc}

00033fa4 <DisplayFX::screenGetPFBXY(int, int)>:
    return _pfb + y * _pitch + x;
   33fa4:	e5903b34 	ldr	r3, [r0, #2868]	; 0xb34
   33fa8:	e5900b3c 	ldr	r0, [r0, #2876]	; 0xb3c
   33fac:	e0221293 	mla	r2, r3, r2, r1
}
   33fb0:	e0800002 	add	r0, r0, r2
   33fb4:	e12fff1e 	bx	lr

00033fb8 <DisplayFX::windowGetPFBXY(int, int, int)>:
{
   33fb8:	e92d4010 	push	{r4, lr}
            ((y * _windows[winIdx].yPixScale) + _windows[winIdx].tly) * _pitch + 
   33fbc:	e081c181 	add	ip, r1, r1, lsl #3
   33fc0:	e061120c 	rsb	r1, r1, ip, lsl #4
   33fc4:	e0801101 	add	r1, r0, r1, lsl #2
   33fc8:	e591c020 	ldr	ip, [r1, #32]
   33fcc:	e591400c 	ldr	r4, [r1, #12]
            (x * _windows[winIdx].xPixScale) + _windows[winIdx].tlx;
   33fd0:	e591e01c 	ldr	lr, [r1, #28]
   33fd4:	e5911004 	ldr	r1, [r1, #4]
            ((y * _windows[winIdx].yPixScale) + _windows[winIdx].tly) * _pitch + 
   33fd8:	e023439c 	mla	r3, ip, r3, r4
            (x * _windows[winIdx].xPixScale) + _windows[winIdx].tlx;
   33fdc:	e022129e 	mla	r2, lr, r2, r1
            ((y * _windows[winIdx].yPixScale) + _windows[winIdx].tly) * _pitch + 
   33fe0:	e590cb34 	ldr	ip, [r0, #2868]	; 0xb34
            (x * _windows[winIdx].xPixScale) + _windows[winIdx].tlx;
   33fe4:	e5900b3c 	ldr	r0, [r0, #2876]	; 0xb3c
   33fe8:	e023239c 	mla	r3, ip, r3, r2
}
   33fec:	e0800003 	add	r0, r0, r3
   33ff0:	e8bd8010 	pop	{r4, pc}

00033ff4 <DisplayFX::consoleForeground(DISPLAY_FX_COLOUR)>:
    _windows[_consoleWinIdx].windowForeground = colour;
   33ff4:	e5903b44 	ldr	r3, [r0, #2884]	; 0xb44
   33ff8:	e0832183 	add	r2, r3, r3, lsl #3
   33ffc:	e0633202 	rsb	r3, r3, r2, lsl #4
   34000:	e0803103 	add	r3, r0, r3, lsl #2
   34004:	e5831028 	str	r1, [r3, #40]	; 0x28
}
   34008:	e12fff1e 	bx	lr

0003400c <DisplayFX::consoleGetWidth()>:
    return _windows[_consoleWinIdx].cols();
   3400c:	e5903b44 	ldr	r3, [r0, #2884]	; 0xb44
   34010:	e0832183 	add	r2, r3, r3, lsl #3
   34014:	e0633202 	rsb	r3, r3, r2, lsl #4
   34018:	e0800103 	add	r0, r0, r3, lsl #2
   3401c:	e5901014 	ldr	r1, [r0, #20]
   34020:	e5900008 	ldr	r0, [r0, #8]
        if (cellWidth <= 0)
   34024:	e3510000 	cmp	r1, #0
   34028:	da000002 	ble	34038 <DisplayFX::consoleGetWidth()+0x2c>
{
   3402c:	e92d4010 	push	{r4, lr}
        return width/cellWidth;
   34030:	eb006aa4 	bl	4eac8 <__divsi3>
}
   34034:	e8bd8010 	pop	{r4, pc}
            return 0;
   34038:	e3a00000 	mov	r0, #0
   3403c:	e12fff1e 	bx	lr

00034040 <DisplayFX::consoleSetWindow(int)>:
    if (winIdx < 0 || winIdx >= DISPLAY_FX_MAX_WINDOWS)
   34040:	e3510004 	cmp	r1, #4
    _consoleWinIdx = winIdx;
   34044:	95801b44 	strls	r1, [r0, #2884]	; 0xb44
}
   34048:	e12fff1e 	bx	lr

0003404c <DisplayFX::cursorRestore()>:
{
   3404c:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    if (!_windows[_consoleWinIdx]._valid)
   34050:	e5906b44 	ldr	r6, [r0, #2884]	; 0xb44
   34054:	e1a07186 	lsl	r7, r6, #3
   34058:	e0874006 	add	r4, r7, r6
   3405c:	e0664204 	rsb	r4, r6, r4, lsl #4
   34060:	e1a04104 	lsl	r4, r4, #2
   34064:	e7d03004 	ldrb	r3, [r0, r4]
   34068:	e0808004 	add	r8, r0, r4
   3406c:	e3530000 	cmp	r3, #0
   34070:	08bd87f0 	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void DisplayFX::screenReadCell(int winIdx, int col, int row, uint8_t* pCellBuf)
{
    // Validity
    if (winIdx < 0 || winIdx >= DISPLAY_FX_MAX_WINDOWS)
   34074:	e3560004 	cmp	r6, #4
   34078:	88bd87f0 	pophi	{r4, r5, r6, r7, r8, r9, sl, pc}
   3407c:	e5981014 	ldr	r1, [r8, #20]
   34080:	e1a05000 	mov	r5, r0
        if (cellWidth <= 0)
   34084:	e3510000 	cmp	r1, #0
   34088:	e5980008 	ldr	r0, [r8, #8]
            return 0;
   3408c:	d3a00000 	movle	r0, #0
        if (cellWidth <= 0)
   34090:	da000000 	ble	34098 <DisplayFX::cursorRestore()+0x4c>
        return width/cellWidth;
   34094:	eb006a8b 	bl	4eac8 <__divsi3>
    screenReadCell(_consoleWinIdx, _windows[_consoleWinIdx]._cursorCol,
   34098:	e0873006 	add	r3, r7, r6
   3409c:	e0663203 	rsb	r3, r6, r3, lsl #4
   340a0:	e0853103 	add	r3, r5, r3, lsl #2
   340a4:	e5939034 	ldr	r9, [r3, #52]	; 0x34
        return;
    if (col >= _windows[winIdx].cols())
   340a8:	e1590000 	cmp	r9, r0
   340ac:	a8bd87f0 	popge	{r4, r5, r6, r7, r8, r9, sl, pc}
   340b0:	e5981018 	ldr	r1, [r8, #24]
   340b4:	e5980010 	ldr	r0, [r8, #16]
        if (cellHeight <= 0)
   340b8:	e3510000 	cmp	r1, #0
            return 0;
   340bc:	d3a00000 	movle	r0, #0
        if (cellHeight <= 0)
   340c0:	da000000 	ble	340c8 <DisplayFX::cursorRestore()+0x7c>
        return height/cellHeight;
   340c4:	eb006a7f 	bl	4eac8 <__divsi3>
    screenReadCell(_consoleWinIdx, _windows[_consoleWinIdx]._cursorCol,
   340c8:	e0873006 	add	r3, r7, r6
   340cc:	e0663203 	rsb	r3, r6, r3, lsl #4
   340d0:	e0853103 	add	r3, r5, r3, lsl #2
   340d4:	e5932030 	ldr	r2, [r3, #48]	; 0x30
        return;
    if (row >= _windows[winIdx].rows())
   340d8:	e1520000 	cmp	r2, r0
   340dc:	a8bd87f0 	popge	{r4, r5, r6, r7, r8, r9, sl, pc}
            (col * _windows[winIdx].cellWidth * _windows[winIdx].xPixScale) + _windows[winIdx].tlx;
   340e0:	e5930014 	ldr	r0, [r3, #20]
    return _pfb + ((row * _windows[winIdx].cellHeight * _windows[winIdx].yPixScale) + _windows[winIdx].tly) * _pitch + 
   340e4:	e593e018 	ldr	lr, [r3, #24]
            (col * _windows[winIdx].cellWidth * _windows[winIdx].xPixScale) + _windows[winIdx].tlx;
   340e8:	e0000990 	mul	r0, r0, r9
    return _pfb + ((row * _windows[winIdx].cellHeight * _windows[winIdx].yPixScale) + _windows[winIdx].tly) * _pitch + 
   340ec:	e001029e 	mul	r1, lr, r2
            (col * _windows[winIdx].cellWidth * _windows[winIdx].xPixScale) + _windows[winIdx].tlx;
   340f0:	e598c004 	ldr	ip, [r8, #4]
   340f4:	e593601c 	ldr	r6, [r3, #28]
    return _pfb + ((row * _windows[winIdx].cellHeight * _windows[winIdx].yPixScale) + _windows[winIdx].tly) * _pitch + 
   340f8:	e5932020 	ldr	r2, [r3, #32]
            (col * _windows[winIdx].cellWidth * _windows[winIdx].xPixScale) + _windows[winIdx].tlx;
   340fc:	e020c096 	mla	r0, r6, r0, ip
    return _pfb + ((row * _windows[winIdx].cellHeight * _windows[winIdx].yPixScale) + _windows[winIdx].tly) * _pitch + 
   34100:	e593c00c 	ldr	ip, [r3, #12]
            (col * _windows[winIdx].cellWidth * _windows[winIdx].xPixScale) + _windows[winIdx].tlx;
   34104:	e5956b3c 	ldr	r6, [r5, #2876]	; 0xb3c
    return _pfb + ((row * _windows[winIdx].cellHeight * _windows[winIdx].yPixScale) + _windows[winIdx].tly) * _pitch + 
   34108:	e021c192 	mla	r1, r2, r1, ip
   3410c:	e595cb34 	ldr	ip, [r5, #2868]	; 0xb34
    // Pointer to framebuffer where char cell starts
    uint8_t* pBuf = windowGetPFB(winIdx, col, row);

    // Write data from cell buffer
    uint8_t* pBufCur = pBuf;
    for (int y = 0; y < _windows[winIdx].cellHeight; y++) {
   34110:	e35e0000 	cmp	lr, #0
            (col * _windows[winIdx].cellWidth * _windows[winIdx].xPixScale) + _windows[winIdx].tlx;
   34114:	e021019c 	mla	r1, ip, r1, r0
   34118:	e0866001 	add	r6, r6, r1
    for (int y = 0; y < _windows[winIdx].cellHeight; y++) {
   3411c:	d8bd87f0 	pople	{r4, r5, r6, r7, r8, r9, sl, pc}
   34120:	e1a00003 	mov	r0, r3
   34124:	e3a07000 	mov	r7, #0
    screenReadCell(_consoleWinIdx, _windows[_consoleWinIdx]._cursorCol,
   34128:	e2841039 	add	r1, r4, #57	; 0x39
   3412c:	e0851001 	add	r1, r5, r1
        for (int i = 0; i < _windows[winIdx].yPixScale; i++) {
   34130:	e3520000 	cmp	r2, #0
   34134:	da00001b 	ble	341a8 <DisplayFX::cursorRestore()+0x15c>
   34138:	e3a08000 	mov	r8, #0
   3413c:	e5903014 	ldr	r3, [r0, #20]
            pBufCur = pBuf;
            for (int x = 0; x < _windows[winIdx].cellWidth; x++) {
   34140:	e3530000 	cmp	r3, #0
   34144:	da000012 	ble	34194 <DisplayFX::cursorRestore()+0x148>
   34148:	e1a0e006 	mov	lr, r6
   3414c:	e3a04000 	mov	r4, #0
   34150:	e590201c 	ldr	r2, [r0, #28]
                for (int j = 0; j < _windows[winIdx].xPixScale; j++) {
   34154:	e3520000 	cmp	r2, #0
   34158:	da000008 	ble	34180 <DisplayFX::cursorRestore()+0x134>
   3415c:	e1a0300e 	mov	r3, lr
                    *pCellBuf++ = *pBufCur++;
   34160:	e4d32001 	ldrb	r2, [r3], #1
   34164:	e4c12001 	strb	r2, [r1], #1
                for (int j = 0; j < _windows[winIdx].xPixScale; j++) {
   34168:	e590201c 	ldr	r2, [r0, #28]
   3416c:	e043c00e 	sub	ip, r3, lr
   34170:	e15c0002 	cmp	ip, r2
   34174:	bafffff9 	blt	34160 <DisplayFX::cursorRestore()+0x114>
                    *pCellBuf++ = *pBufCur++;
   34178:	e1a0e003 	mov	lr, r3
   3417c:	e5903014 	ldr	r3, [r0, #20]
            for (int x = 0; x < _windows[winIdx].cellWidth; x++) {
   34180:	e2844001 	add	r4, r4, #1
   34184:	e1530004 	cmp	r3, r4
   34188:	cafffff1 	bgt	34154 <DisplayFX::cursorRestore()+0x108>
   3418c:	e5902020 	ldr	r2, [r0, #32]
   34190:	e595cb34 	ldr	ip, [r5, #2868]	; 0xb34
        for (int i = 0; i < _windows[winIdx].yPixScale; i++) {
   34194:	e2888001 	add	r8, r8, #1
   34198:	e1580002 	cmp	r8, r2
                }
            }
            pBuf += _pitch;
   3419c:	e086600c 	add	r6, r6, ip
        for (int i = 0; i < _windows[winIdx].yPixScale; i++) {
   341a0:	baffffe6 	blt	34140 <DisplayFX::cursorRestore()+0xf4>
   341a4:	e590e018 	ldr	lr, [r0, #24]
    for (int y = 0; y < _windows[winIdx].cellHeight; y++) {
   341a8:	e2877001 	add	r7, r7, #1
   341ac:	e15e0007 	cmp	lr, r7
   341b0:	caffffde 	bgt	34130 <DisplayFX::cursorRestore()+0xe4>
   341b4:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}

000341b8 <DisplayFX::cursorRender()>:
{
   341b8:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    if (!_windows[_consoleWinIdx]._valid)
   341bc:	e5906b44 	ldr	r6, [r0, #2884]	; 0xb44
{
   341c0:	e24dd008 	sub	sp, sp, #8
   341c4:	e1a08186 	lsl	r8, r6, #3
   341c8:	e0884006 	add	r4, r8, r6
   341cc:	e0664204 	rsb	r4, r6, r4, lsl #4
   341d0:	e1a04104 	lsl	r4, r4, #2
    if (!_windows[_consoleWinIdx]._valid)
   341d4:	e7d03004 	ldrb	r3, [r0, r4]
   341d8:	e0807004 	add	r7, r0, r4
   341dc:	e3530000 	cmp	r3, #0
   341e0:	1a000001 	bne	341ec <DisplayFX::cursorRender()+0x34>
}
   341e4:	e28dd008 	add	sp, sp, #8
   341e8:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
}

void DisplayFX::screenWriteCell(int winIdx, int col, int row, uint8_t* pCellBuf)
{
    // Validity
    if (winIdx < 0 || winIdx >= DISPLAY_FX_MAX_WINDOWS)
   341ec:	e3560004 	cmp	r6, #4
   341f0:	8afffffb 	bhi	341e4 <DisplayFX::cursorRender()+0x2c>
   341f4:	e5971014 	ldr	r1, [r7, #20]
   341f8:	e1a05000 	mov	r5, r0
        if (cellWidth <= 0)
   341fc:	e3510000 	cmp	r1, #0
   34200:	e5970008 	ldr	r0, [r7, #8]
            return 0;
   34204:	d3a00000 	movle	r0, #0
        if (cellWidth <= 0)
   34208:	da000000 	ble	34210 <DisplayFX::cursorRender()+0x58>
        return width/cellWidth;
   3420c:	eb006a2d 	bl	4eac8 <__divsi3>
    screenWriteCell(_consoleWinIdx, _windows[_consoleWinIdx]._cursorCol,
   34210:	e0883006 	add	r3, r8, r6
   34214:	e0663203 	rsb	r3, r6, r3, lsl #4
   34218:	e0853103 	add	r3, r5, r3, lsl #2
   3421c:	e5939034 	ldr	r9, [r3, #52]	; 0x34
   34220:	e593a030 	ldr	sl, [r3, #48]	; 0x30
        return;
    if (col >= _windows[winIdx].cols())
   34224:	e1590000 	cmp	r9, r0
   34228:	aa00004b 	bge	3435c <DisplayFX::cursorRender()+0x1a4>
   3422c:	e5971018 	ldr	r1, [r7, #24]
   34230:	e5970010 	ldr	r0, [r7, #16]
        if (cellHeight <= 0)
   34234:	e3510000 	cmp	r1, #0
            return 0;
   34238:	d3a00000 	movle	r0, #0
        if (cellHeight <= 0)
   3423c:	da000000 	ble	34244 <DisplayFX::cursorRender()+0x8c>
        return height/cellHeight;
   34240:	eb006a20 	bl	4eac8 <__divsi3>
        return;
    if (row >= _windows[winIdx].rows())
   34244:	e15a0000 	cmp	sl, r0
   34248:	aa000043 	bge	3435c <DisplayFX::cursorRender()+0x1a4>
    return _pfb + ((row * _windows[winIdx].cellHeight * _windows[winIdx].yPixScale) + _windows[winIdx].tly) * _pitch + 
   3424c:	e0880006 	add	r0, r8, r6
   34250:	e0660200 	rsb	r0, r6, r0, lsl #4
   34254:	e0850100 	add	r0, r5, r0, lsl #2
            (col * _windows[winIdx].cellWidth * _windows[winIdx].xPixScale) + _windows[winIdx].tlx;
   34258:	e590e014 	ldr	lr, [r0, #20]
    return _pfb + ((row * _windows[winIdx].cellHeight * _windows[winIdx].yPixScale) + _windows[winIdx].tly) * _pitch + 
   3425c:	e5903018 	ldr	r3, [r0, #24]
            (col * _windows[winIdx].cellWidth * _windows[winIdx].xPixScale) + _windows[winIdx].tlx;
   34260:	e00e099e 	mul	lr, lr, r9
   34264:	e597c004 	ldr	ip, [r7, #4]
    return _pfb + ((row * _windows[winIdx].cellHeight * _windows[winIdx].yPixScale) + _windows[winIdx].tly) * _pitch + 
   34268:	e0020a93 	mul	r2, r3, sl
            (col * _windows[winIdx].cellWidth * _windows[winIdx].xPixScale) + _windows[winIdx].tlx;
   3426c:	e590701c 	ldr	r7, [r0, #28]
    return _pfb + ((row * _windows[winIdx].cellHeight * _windows[winIdx].yPixScale) + _windows[winIdx].tly) * _pitch + 
   34270:	e5901020 	ldr	r1, [r0, #32]
            (col * _windows[winIdx].cellWidth * _windows[winIdx].xPixScale) + _windows[winIdx].tlx;
   34274:	e02ece97 	mla	lr, r7, lr, ip
    return _pfb + ((row * _windows[winIdx].cellHeight * _windows[winIdx].yPixScale) + _windows[winIdx].tly) * _pitch + 
   34278:	e590c00c 	ldr	ip, [r0, #12]
            (col * _windows[winIdx].cellWidth * _windows[winIdx].xPixScale) + _windows[winIdx].tlx;
   3427c:	e5957b3c 	ldr	r7, [r5, #2876]	; 0xb3c
    return _pfb + ((row * _windows[winIdx].cellHeight * _windows[winIdx].yPixScale) + _windows[winIdx].tly) * _pitch + 
   34280:	e022c291 	mla	r2, r1, r2, ip
   34284:	e595cb34 	ldr	ip, [r5, #2868]	; 0xb34
    // Pointer to framebuffer where char cell starts
    uint8_t* pBuf = windowGetPFB(winIdx, col, row);

    // Write data from cell buffer
    uint8_t* pBufCur = pBuf;
    for (int y = 0; y < _windows[winIdx].cellHeight; y++) {
   34288:	e3530000 	cmp	r3, #0
            (col * _windows[winIdx].cellWidth * _windows[winIdx].xPixScale) + _windows[winIdx].tlx;
   3428c:	e022e29c 	mla	r2, ip, r2, lr
   34290:	e0877002 	add	r7, r7, r2
    for (int y = 0; y < _windows[winIdx].cellHeight; y++) {
   34294:	da000030 	ble	3435c <DisplayFX::cursorRender()+0x1a4>
   34298:	e3a06000 	mov	r6, #0
    screenWriteCell(_consoleWinIdx, _windows[_consoleWinIdx]._cursorCol,
   3429c:	e284e039 	add	lr, r4, #57	; 0x39
   342a0:	e085e00e 	add	lr, r5, lr
        for (int i = 0; i < _windows[winIdx].yPixScale; i++) {
   342a4:	e3510000 	cmp	r1, #0
   342a8:	da00001b 	ble	3431c <DisplayFX::cursorRender()+0x164>
   342ac:	e3a08000 	mov	r8, #0
   342b0:	e5903014 	ldr	r3, [r0, #20]
            pBufCur = pBuf;
            for (int x = 0; x < _windows[winIdx].cellWidth; x++) {
   342b4:	e3530000 	cmp	r3, #0
   342b8:	da000012 	ble	34308 <DisplayFX::cursorRender()+0x150>
   342bc:	e1a01007 	mov	r1, r7
   342c0:	e3a04000 	mov	r4, #0
   342c4:	e590201c 	ldr	r2, [r0, #28]
                for (int j = 0; j < _windows[winIdx].xPixScale; j++) {
   342c8:	e3520000 	cmp	r2, #0
   342cc:	da000008 	ble	342f4 <DisplayFX::cursorRender()+0x13c>
   342d0:	e1a0300e 	mov	r3, lr
                    *pBufCur++ = *pCellBuf++;
   342d4:	e4d32001 	ldrb	r2, [r3], #1
   342d8:	e4c12001 	strb	r2, [r1], #1
                for (int j = 0; j < _windows[winIdx].xPixScale; j++) {
   342dc:	e590201c 	ldr	r2, [r0, #28]
   342e0:	e043c00e 	sub	ip, r3, lr
   342e4:	e152000c 	cmp	r2, ip
   342e8:	cafffff9 	bgt	342d4 <DisplayFX::cursorRender()+0x11c>
                    *pBufCur++ = *pCellBuf++;
   342ec:	e1a0e003 	mov	lr, r3
   342f0:	e5903014 	ldr	r3, [r0, #20]
            for (int x = 0; x < _windows[winIdx].cellWidth; x++) {
   342f4:	e2844001 	add	r4, r4, #1
   342f8:	e1540003 	cmp	r4, r3
   342fc:	bafffff1 	blt	342c8 <DisplayFX::cursorRender()+0x110>
   34300:	e5901020 	ldr	r1, [r0, #32]
   34304:	e595cb34 	ldr	ip, [r5, #2868]	; 0xb34
        for (int i = 0; i < _windows[winIdx].yPixScale; i++) {
   34308:	e2888001 	add	r8, r8, #1
   3430c:	e1580001 	cmp	r8, r1
                }
            }
            pBuf += _pitch;
   34310:	e087700c 	add	r7, r7, ip
        for (int i = 0; i < _windows[winIdx].yPixScale; i++) {
   34314:	baffffe6 	blt	342b4 <DisplayFX::cursorRender()+0xfc>
   34318:	e5903018 	ldr	r3, [r0, #24]
    for (int y = 0; y < _windows[winIdx].cellHeight; y++) {
   3431c:	e2866001 	add	r6, r6, #1
   34320:	e1560003 	cmp	r6, r3
   34324:	baffffde 	blt	342a4 <DisplayFX::cursorRender()+0xec>
    windowPut(_consoleWinIdx, _windows[_consoleWinIdx]._cursorCol,
   34328:	e5956b44 	ldr	r6, [r5, #2884]	; 0xb44
   3432c:	e1a08186 	lsl	r8, r6, #3
   34330:	e0883006 	add	r3, r8, r6
   34334:	e0663203 	rsb	r3, r6, r3, lsl #4
   34338:	e1a03103 	lsl	r3, r3, #2
   3433c:	e0852003 	add	r2, r5, r3
    if (winIdx < 0 || winIdx >= DISPLAY_FX_MAX_WINDOWS)
   34340:	e3560004 	cmp	r6, #4
    windowPut(_consoleWinIdx, _windows[_consoleWinIdx]._cursorCol,
   34344:	e5929034 	ldr	r9, [r2, #52]	; 0x34
   34348:	e592a030 	ldr	sl, [r2, #48]	; 0x30
    if (winIdx < 0 || winIdx >= DISPLAY_FX_MAX_WINDOWS)
   3434c:	8affffa4 	bhi	341e4 <DisplayFX::cursorRender()+0x2c>
    if (!_windows[winIdx]._valid)
   34350:	e7d53003 	ldrb	r3, [r5, r3]
   34354:	e3530000 	cmp	r3, #0
   34358:	0affffa1 	beq	341e4 <DisplayFX::cursorRender()+0x2c>
    if (col >= _windows[winIdx].cols())
   3435c:	e0884006 	add	r4, r8, r6
   34360:	e0664204 	rsb	r4, r6, r4, lsl #4
   34364:	e0854104 	add	r4, r5, r4, lsl #2
   34368:	e5941014 	ldr	r1, [r4, #20]
   3436c:	e5940008 	ldr	r0, [r4, #8]
        if (cellWidth <= 0)
   34370:	e3510000 	cmp	r1, #0
            return 0;
   34374:	d3a00000 	movle	r0, #0
        if (cellWidth <= 0)
   34378:	da000000 	ble	34380 <DisplayFX::cursorRender()+0x1c8>
        return width/cellWidth;
   3437c:	eb0069d1 	bl	4eac8 <__divsi3>
   34380:	e1500009 	cmp	r0, r9
   34384:	daffff96 	ble	341e4 <DisplayFX::cursorRender()+0x2c>
   34388:	e5941018 	ldr	r1, [r4, #24]
   3438c:	e5940010 	ldr	r0, [r4, #16]
        if (cellHeight <= 0)
   34390:	e3510000 	cmp	r1, #0
            return 0;
   34394:	d3a00000 	movle	r0, #0
        if (cellHeight <= 0)
   34398:	da000000 	ble	343a0 <DisplayFX::cursorRender()+0x1e8>
        return height/cellHeight;
   3439c:	eb0069c9 	bl	4eac8 <__divsi3>
    if (row >= _windows[winIdx].rows())
   343a0:	e150000a 	cmp	r0, sl
   343a4:	daffff8e 	ble	341e4 <DisplayFX::cursorRender()+0x2c>
   343a8:	e3a0c05f 	mov	ip, #95	; 0x5f
   343ac:	e1a0300a 	mov	r3, sl
   343b0:	e1a02009 	mov	r2, r9
   343b4:	e1a01006 	mov	r1, r6
   343b8:	e1a00005 	mov	r0, r5
   343bc:	e58dc000 	str	ip, [sp]
   343c0:	ebfffb81 	bl	331cc <DisplayFX::windowPut(int, int, int, int) [clone .part.2]>
   343c4:	eaffff86 	b	341e4 <DisplayFX::cursorRender()+0x2c>

000343c8 <DisplayFX::cursorCheck()>:
{
   343c8:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    if (_windows[_consoleWinIdx]._cursorCol >= _windows[_consoleWinIdx].cols())
   343cc:	e5905b44 	ldr	r5, [r0, #2884]	; 0xb44
{
   343d0:	e1a06000 	mov	r6, r0
    if (_windows[_consoleWinIdx]._cursorCol >= _windows[_consoleWinIdx].cols())
   343d4:	e1a08185 	lsl	r8, r5, #3
   343d8:	e0884005 	add	r4, r8, r5
   343dc:	e0654204 	rsb	r4, r5, r4, lsl #4
   343e0:	e0804104 	add	r4, r0, r4, lsl #2
   343e4:	e5941014 	ldr	r1, [r4, #20]
   343e8:	e5940008 	ldr	r0, [r4, #8]
        if (cellWidth <= 0)
   343ec:	e3510000 	cmp	r1, #0
   343f0:	e5947034 	ldr	r7, [r4, #52]	; 0x34
            return 0;
   343f4:	d3a00000 	movle	r0, #0
        if (cellWidth <= 0)
   343f8:	da000000 	ble	34400 <DisplayFX::cursorCheck()+0x38>
        return width/cellWidth;
   343fc:	eb0069b1 	bl	4eac8 <__divsi3>
   34400:	e1570000 	cmp	r7, r0
        _windows[_consoleWinIdx]._cursorCol = 0;
   34404:	a3a01000 	movge	r1, #0
   34408:	e0883005 	add	r3, r8, r5
   3440c:	e0653203 	rsb	r3, r5, r3, lsl #4
   34410:	e0863103 	add	r3, r6, r3, lsl #2
   34414:	e5937030 	ldr	r7, [r3, #48]	; 0x30
   34418:	a5831034 	strge	r1, [r3, #52]	; 0x34
        _windows[_consoleWinIdx]._cursorRow++;
   3441c:	a2872001 	addge	r2, r7, #1
   34420:	a5832030 	strge	r2, [r3, #48]	; 0x30
   34424:	e5941018 	ldr	r1, [r4, #24]
   34428:	a1a07002 	movge	r7, r2
        if (cellHeight <= 0)
   3442c:	e3510000 	cmp	r1, #0
   34430:	e5940010 	ldr	r0, [r4, #16]
            return 0;
   34434:	d3a00000 	movle	r0, #0
        if (cellHeight <= 0)
   34438:	da000000 	ble	34440 <DisplayFX::cursorCheck()+0x78>
        return height/cellHeight;
   3443c:	eb0069a1 	bl	4eac8 <__divsi3>
    if (_windows[_consoleWinIdx]._cursorRow >= _windows[_consoleWinIdx].rows()) 
   34440:	e1500007 	cmp	r0, r7
   34444:	c8bd87f0 	popgt	{r4, r5, r6, r7, r8, r9, sl, pc}
        _windows[_consoleWinIdx]._cursorRow--;
   34448:	e0883005 	add	r3, r8, r5
   3444c:	e0653203 	rsb	r3, r5, r3, lsl #4
   34450:	e2477001 	sub	r7, r7, #1
   34454:	e0863103 	add	r3, r6, r3, lsl #2
    if (winIdx < 0 || winIdx >= DISPLAY_FX_MAX_WINDOWS || rows == 0)
   34458:	e3550004 	cmp	r5, #4
        _windows[_consoleWinIdx]._cursorRow--;
   3445c:	e5837030 	str	r7, [r3, #48]	; 0x30
    if (winIdx < 0 || winIdx >= DISPLAY_FX_MAX_WINDOWS || rows == 0)
   34460:	88bd87f0 	pophi	{r4, r5, r6, r7, r8, r9, sl, pc}
   34464:	e5941014 	ldr	r1, [r4, #20]
            (col * _windows[winIdx].cellWidth * _windows[winIdx].xPixScale) + _windows[winIdx].tlx;
   34468:	e593701c 	ldr	r7, [r3, #28]
        if (cellWidth <= 0)
   3446c:	e3510000 	cmp	r1, #0
   34470:	e5939014 	ldr	r9, [r3, #20]
   34474:	e5940008 	ldr	r0, [r4, #8]
   34478:	d3a07000 	movle	r7, #0
   3447c:	da000002 	ble	3448c <DisplayFX::cursorCheck()+0xc4>
        return width/cellWidth;
   34480:	eb006990 	bl	4eac8 <__divsi3>
   34484:	e0000099 	mul	r0, r9, r0
   34488:	e0070097 	mul	r7, r7, r0
   3448c:	e5941018 	ldr	r1, [r4, #24]
        if (cellHeight <= 0)
   34490:	e3510000 	cmp	r1, #0
   34494:	d8bd87f0 	pople	{r4, r5, r6, r7, r8, r9, sl, pc}
        return height/cellHeight;
   34498:	e5940010 	ldr	r0, [r4, #16]
   3449c:	eb006989 	bl	4eac8 <__divsi3>
    return _pfb + ((row * _windows[winIdx].cellHeight * _windows[winIdx].yPixScale) + _windows[winIdx].tly) * _pitch + 
   344a0:	e0888005 	add	r8, r8, r5
   344a4:	e0655208 	rsb	r5, r5, r8, lsl #4
   344a8:	e0865105 	add	r5, r6, r5, lsl #2
   344ac:	e5954018 	ldr	r4, [r5, #24]
   344b0:	e5952020 	ldr	r2, [r5, #32]
        int pixDown = _windows[winIdx].rows() * _windows[winIdx].cellHeight * _windows[winIdx].yPixScale;
   344b4:	e0000094 	mul	r0, r4, r0
   344b8:	e0080092 	mul	r8, r2, r0
        for (int i = 0; i < pixDown; i++)
   344bc:	e3580000 	cmp	r8, #0
   344c0:	d8bd87f0 	pople	{r4, r5, r6, r7, r8, r9, sl, pc}
   344c4:	e3a09000 	mov	r9, #0
    return _pfb + ((row * _windows[winIdx].cellHeight * _windows[winIdx].yPixScale) + _windows[winIdx].tly) * _pitch + 
   344c8:	e595300c 	ldr	r3, [r5, #12]
            (col * _windows[winIdx].cellWidth * _windows[winIdx].xPixScale) + _windows[winIdx].tlx;
   344cc:	e5955004 	ldr	r5, [r5, #4]
    return _pfb + ((row * _windows[winIdx].cellHeight * _windows[winIdx].yPixScale) + _windows[winIdx].tly) * _pitch + 
   344d0:	e0243492 	mla	r4, r2, r4, r3
   344d4:	e5962b34 	ldr	r2, [r6, #2868]	; 0xb34
            (col * _windows[winIdx].cellWidth * _windows[winIdx].xPixScale) + _windows[winIdx].tlx;
   344d8:	e0245492 	mla	r4, r2, r4, r5
   344dc:	e0235392 	mla	r3, r2, r3, r5
    return _pfb + ((row * _windows[winIdx].cellHeight * _windows[winIdx].yPixScale) + _windows[winIdx].tly) * _pitch + 
   344e0:	e5965b3c 	ldr	r5, [r6, #2876]	; 0xb3c
            (col * _windows[winIdx].cellWidth * _windows[winIdx].xPixScale) + _windows[winIdx].tlx;
   344e4:	e0854004 	add	r4, r5, r4
   344e8:	e0855003 	add	r5, r5, r3
            memcopyfast(pDest, pSrc, bytesAcross);
   344ec:	e1a01004 	mov	r1, r4
   344f0:	e1a00005 	mov	r0, r5
   344f4:	e1a02007 	mov	r2, r7
   344f8:	ebff4f53 	bl	824c <memcopyfast>
        for (int i = 0; i < pixDown; i++)
   344fc:	e2899001 	add	r9, r9, #1
            pDest += _pitch;
   34500:	e5963b34 	ldr	r3, [r6, #2868]	; 0xb34
        for (int i = 0; i < pixDown; i++)
   34504:	e1580009 	cmp	r8, r9
            pDest += _pitch;
   34508:	e0855003 	add	r5, r5, r3
            pSrc += _pitch;
   3450c:	e0844003 	add	r4, r4, r3
        for (int i = 0; i < pixDown; i++)
   34510:	1afffff5 	bne	344ec <DisplayFX::cursorCheck()+0x124>
   34514:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}

00034518 <DisplayFX::consolePut(int)>:
{
   34518:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    switch (ch) {
   3451c:	e2413008 	sub	r3, r1, #8
{
   34520:	e24dd008 	sub	sp, sp, #8
   34524:	e1a05000 	mov	r5, r0
   34528:	e5904b44 	ldr	r4, [r0, #2884]	; 0xb44
    switch (ch) {
   3452c:	e3530005 	cmp	r3, #5
   34530:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
   34534:	ea0000a6 	b	347d4 <DisplayFX::consolePut(int)+0x2bc>
   34538:	00034730 	.word	0x00034730
   3453c:	00034598 	.word	0x00034598
   34540:	0003456c 	.word	0x0003456c
   34544:	000347d4 	.word	0x000347d4
   34548:	000347d4 	.word	0x000347d4
   3454c:	00034550 	.word	0x00034550
        _windows[_consoleWinIdx]._cursorCol = 0;
   34550:	e3a02000 	mov	r2, #0
   34554:	e0843184 	add	r3, r4, r4, lsl #3
   34558:	e0644203 	rsb	r4, r4, r3, lsl #4
   3455c:	e0805104 	add	r5, r0, r4, lsl #2
   34560:	e5852034 	str	r2, [r5, #52]	; 0x34
}
   34564:	e28dd008 	add	sp, sp, #8
   34568:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
        _windows[_consoleWinIdx]._cursorCol = 0;
   3456c:	e3a02000 	mov	r2, #0
   34570:	e0843184 	add	r3, r4, r4, lsl #3
   34574:	e0644203 	rsb	r4, r4, r3, lsl #4
   34578:	e0804104 	add	r4, r0, r4, lsl #2
        _windows[_consoleWinIdx]._cursorRow++;
   3457c:	e5943030 	ldr	r3, [r4, #48]	; 0x30
        _windows[_consoleWinIdx]._cursorCol = 0;
   34580:	e5842034 	str	r2, [r4, #52]	; 0x34
        _windows[_consoleWinIdx]._cursorRow++;
   34584:	e2833001 	add	r3, r3, #1
   34588:	e5843030 	str	r3, [r4, #48]	; 0x30
}
   3458c:	e28dd008 	add	sp, sp, #8
   34590:	e8bd47f0 	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
        cursorCheck();
   34594:	eaffff8b 	b	343c8 <DisplayFX::cursorCheck()>
        _windows[_consoleWinIdx]._cursorCol += 1;
   34598:	e1a07184 	lsl	r7, r4, #3
   3459c:	e0876004 	add	r6, r7, r4
   345a0:	e0646206 	rsb	r6, r4, r6, lsl #4
   345a4:	e0806106 	add	r6, r0, r6, lsl #2
   345a8:	e5968034 	ldr	r8, [r6, #52]	; 0x34
   345ac:	e5961014 	ldr	r1, [r6, #20]
   345b0:	e2883001 	add	r3, r8, #1
        _windows[_consoleWinIdx]._cursorCol = MIN(_windows[_consoleWinIdx]._cursorCol + 8 - 
   345b4:	e2732000 	rsbs	r2, r3, #0
   345b8:	e2022007 	and	r2, r2, #7
   345bc:	e2030007 	and	r0, r3, #7
   345c0:	e2888009 	add	r8, r8, #9
   345c4:	52620000 	rsbpl	r0, r2, #0
        if (cellWidth <= 0)
   345c8:	e3510000 	cmp	r1, #0
   345cc:	e0488000 	sub	r8, r8, r0
        _windows[_consoleWinIdx]._cursorCol += 1;
   345d0:	e5863034 	str	r3, [r6, #52]	; 0x34
   345d4:	e5960008 	ldr	r0, [r6, #8]
   345d8:	d3e00000 	mvnle	r0, #0
   345dc:	da000001 	ble	345e8 <DisplayFX::consolePut(int)+0xd0>
        return width/cellWidth;
   345e0:	eb006938 	bl	4eac8 <__divsi3>
   345e4:	e2400001 	sub	r0, r0, #1
   345e8:	e1580000 	cmp	r8, r0
   345ec:	a1a08000 	movge	r8, r0
        _windows[_consoleWinIdx]._cursorCol = MIN(_windows[_consoleWinIdx]._cursorCol + 8 - 
   345f0:	e0873004 	add	r3, r7, r4
   345f4:	e0643203 	rsb	r3, r4, r3, lsl #4
   345f8:	e0853103 	add	r3, r5, r3, lsl #2
   345fc:	e5838034 	str	r8, [r3, #52]	; 0x34
   34600:	e5961014 	ldr	r1, [r6, #20]
   34604:	e5960008 	ldr	r0, [r6, #8]
        if (cellWidth <= 0)
   34608:	e3510000 	cmp	r1, #0
            return 0;
   3460c:	d3a00000 	movle	r0, #0
        if (cellWidth <= 0)
   34610:	da000000 	ble	34618 <DisplayFX::consolePut(int)+0x100>
        return width/cellWidth;
   34614:	eb00692b 	bl	4eac8 <__divsi3>
    if (_windows[_consoleWinIdx]._cursorCol >= _windows[_consoleWinIdx].cols())
   34618:	e1500008 	cmp	r0, r8
        _windows[_consoleWinIdx]._cursorCol = 0;
   3461c:	d3a01000 	movle	r1, #0
   34620:	e0873004 	add	r3, r7, r4
   34624:	e0643203 	rsb	r3, r4, r3, lsl #4
   34628:	e0853103 	add	r3, r5, r3, lsl #2
   3462c:	e5938030 	ldr	r8, [r3, #48]	; 0x30
   34630:	d5831034 	strle	r1, [r3, #52]	; 0x34
        _windows[_consoleWinIdx]._cursorRow++;
   34634:	d2882001 	addle	r2, r8, #1
   34638:	d5832030 	strle	r2, [r3, #48]	; 0x30
   3463c:	e5961018 	ldr	r1, [r6, #24]
   34640:	d1a08002 	movle	r8, r2
        if (cellHeight <= 0)
   34644:	e3510000 	cmp	r1, #0
   34648:	e5960010 	ldr	r0, [r6, #16]
            return 0;
   3464c:	d3a00000 	movle	r0, #0
        if (cellHeight <= 0)
   34650:	da000000 	ble	34658 <DisplayFX::consolePut(int)+0x140>
        return height/cellHeight;
   34654:	eb00691b 	bl	4eac8 <__divsi3>
    if (_windows[_consoleWinIdx]._cursorRow >= _windows[_consoleWinIdx].rows()) 
   34658:	e1500008 	cmp	r0, r8
   3465c:	caffffc0 	bgt	34564 <DisplayFX::consolePut(int)+0x4c>
        _windows[_consoleWinIdx]._cursorRow--;
   34660:	e0873004 	add	r3, r7, r4
   34664:	e0643203 	rsb	r3, r4, r3, lsl #4
   34668:	e2488001 	sub	r8, r8, #1
   3466c:	e0853103 	add	r3, r5, r3, lsl #2
    if (winIdx < 0 || winIdx >= DISPLAY_FX_MAX_WINDOWS || rows == 0)
   34670:	e3540004 	cmp	r4, #4
        _windows[_consoleWinIdx]._cursorRow--;
   34674:	e5838030 	str	r8, [r3, #48]	; 0x30
    if (winIdx < 0 || winIdx >= DISPLAY_FX_MAX_WINDOWS || rows == 0)
   34678:	8affffb9 	bhi	34564 <DisplayFX::consolePut(int)+0x4c>
   3467c:	e5961014 	ldr	r1, [r6, #20]
            (col * _windows[winIdx].cellWidth * _windows[winIdx].xPixScale) + _windows[winIdx].tlx;
   34680:	e593801c 	ldr	r8, [r3, #28]
        if (cellWidth <= 0)
   34684:	e3510000 	cmp	r1, #0
   34688:	e5939014 	ldr	r9, [r3, #20]
   3468c:	e5960008 	ldr	r0, [r6, #8]
   34690:	d3a08000 	movle	r8, #0
   34694:	da000002 	ble	346a4 <DisplayFX::consolePut(int)+0x18c>
        return width/cellWidth;
   34698:	eb00690a 	bl	4eac8 <__divsi3>
   3469c:	e0000099 	mul	r0, r9, r0
   346a0:	e0080098 	mul	r8, r8, r0
   346a4:	e5961018 	ldr	r1, [r6, #24]
        if (cellHeight <= 0)
   346a8:	e3510000 	cmp	r1, #0
   346ac:	daffffac 	ble	34564 <DisplayFX::consolePut(int)+0x4c>
        return height/cellHeight;
   346b0:	e5960010 	ldr	r0, [r6, #16]
   346b4:	eb006903 	bl	4eac8 <__divsi3>
    return _pfb + ((row * _windows[winIdx].cellHeight * _windows[winIdx].yPixScale) + _windows[winIdx].tly) * _pitch + 
   346b8:	e0877004 	add	r7, r7, r4
   346bc:	e0644207 	rsb	r4, r4, r7, lsl #4
   346c0:	e085a104 	add	sl, r5, r4, lsl #2
   346c4:	e59a3018 	ldr	r3, [sl, #24]
   346c8:	e59a4020 	ldr	r4, [sl, #32]
        int pixDown = _windows[winIdx].rows() * _windows[winIdx].cellHeight * _windows[winIdx].yPixScale;
   346cc:	e0000093 	mul	r0, r3, r0
   346d0:	e0070094 	mul	r7, r4, r0
        for (int i = 0; i < pixDown; i++)
   346d4:	e3570000 	cmp	r7, #0
   346d8:	daffffa1 	ble	34564 <DisplayFX::consolePut(int)+0x4c>
   346dc:	e3a09000 	mov	r9, #0
    return _pfb + ((row * _windows[winIdx].cellHeight * _windows[winIdx].yPixScale) + _windows[winIdx].tly) * _pitch + 
   346e0:	e59a600c 	ldr	r6, [sl, #12]
            (col * _windows[winIdx].cellWidth * _windows[winIdx].xPixScale) + _windows[winIdx].tlx;
   346e4:	e59a2004 	ldr	r2, [sl, #4]
    return _pfb + ((row * _windows[winIdx].cellHeight * _windows[winIdx].yPixScale) + _windows[winIdx].tly) * _pitch + 
   346e8:	e0246394 	mla	r4, r4, r3, r6
   346ec:	e5953b34 	ldr	r3, [r5, #2868]	; 0xb34
            (col * _windows[winIdx].cellWidth * _windows[winIdx].xPixScale) + _windows[winIdx].tlx;
   346f0:	e0242493 	mla	r4, r3, r4, r2
   346f4:	e0232693 	mla	r3, r3, r6, r2
    return _pfb + ((row * _windows[winIdx].cellHeight * _windows[winIdx].yPixScale) + _windows[winIdx].tly) * _pitch + 
   346f8:	e5956b3c 	ldr	r6, [r5, #2876]	; 0xb3c
            (col * _windows[winIdx].cellWidth * _windows[winIdx].xPixScale) + _windows[winIdx].tlx;
   346fc:	e0864004 	add	r4, r6, r4
   34700:	e0866003 	add	r6, r6, r3
            memcopyfast(pDest, pSrc, bytesAcross);
   34704:	e1a01004 	mov	r1, r4
   34708:	e1a00006 	mov	r0, r6
   3470c:	e1a02008 	mov	r2, r8
   34710:	ebff4ecd 	bl	824c <memcopyfast>
        for (int i = 0; i < pixDown; i++)
   34714:	e2899001 	add	r9, r9, #1
            pDest += _pitch;
   34718:	e5953b34 	ldr	r3, [r5, #2868]	; 0xb34
        for (int i = 0; i < pixDown; i++)
   3471c:	e1570009 	cmp	r7, r9
            pDest += _pitch;
   34720:	e0866003 	add	r6, r6, r3
            pSrc += _pitch;
   34724:	e0844003 	add	r4, r4, r3
        for (int i = 0; i < pixDown; i++)
   34728:	1afffff5 	bne	34704 <DisplayFX::consolePut(int)+0x1ec>
   3472c:	eaffff8c 	b	34564 <DisplayFX::consolePut(int)+0x4c>
        if (_windows[_consoleWinIdx]._cursorCol > 0) {
   34730:	e1a07184 	lsl	r7, r4, #3
   34734:	e0873004 	add	r3, r7, r4
   34738:	e0643203 	rsb	r3, r4, r3, lsl #4
   3473c:	e1a03103 	lsl	r3, r3, #2
   34740:	e0806003 	add	r6, r0, r3
   34744:	e5962034 	ldr	r2, [r6, #52]	; 0x34
   34748:	e3520000 	cmp	r2, #0
   3474c:	daffff84 	ble	34564 <DisplayFX::consolePut(int)+0x4c>
            _windows[_consoleWinIdx]._cursorCol--;
   34750:	e2428001 	sub	r8, r2, #1
    if (winIdx < 0 || winIdx >= DISPLAY_FX_MAX_WINDOWS)
   34754:	e3540004 	cmp	r4, #4
            _windows[_consoleWinIdx]._cursorCol--;
   34758:	e5868034 	str	r8, [r6, #52]	; 0x34
    if (winIdx < 0 || winIdx >= DISPLAY_FX_MAX_WINDOWS)
   3475c:	8affff80 	bhi	34564 <DisplayFX::consolePut(int)+0x4c>
    if (!_windows[winIdx]._valid)
   34760:	e7d03003 	ldrb	r3, [r0, r3]
   34764:	e3530000 	cmp	r3, #0
   34768:	0affff7d 	beq	34564 <DisplayFX::consolePut(int)+0x4c>
   3476c:	e5961014 	ldr	r1, [r6, #20]
        if (cellWidth <= 0)
   34770:	e3510000 	cmp	r1, #0
   34774:	daffff7a 	ble	34564 <DisplayFX::consolePut(int)+0x4c>
        return width/cellWidth;
   34778:	e5960008 	ldr	r0, [r6, #8]
   3477c:	eb0068d1 	bl	4eac8 <__divsi3>
    if (col >= _windows[winIdx].cols())
   34780:	e1580000 	cmp	r8, r0
   34784:	aaffff76 	bge	34564 <DisplayFX::consolePut(int)+0x4c>
   34788:	e5961018 	ldr	r1, [r6, #24]
   3478c:	e5960010 	ldr	r0, [r6, #16]
        if (cellHeight <= 0)
   34790:	e3510000 	cmp	r1, #0
            return 0;
   34794:	d3a00000 	movle	r0, #0
        if (cellHeight <= 0)
   34798:	da000000 	ble	347a0 <DisplayFX::consolePut(int)+0x288>
        return height/cellHeight;
   3479c:	eb0068c9 	bl	4eac8 <__divsi3>
            windowPut(_consoleWinIdx, _windows[_consoleWinIdx]._cursorCol, 
   347a0:	e0873004 	add	r3, r7, r4
   347a4:	e0643203 	rsb	r3, r4, r3, lsl #4
   347a8:	e0853103 	add	r3, r5, r3, lsl #2
   347ac:	e5933030 	ldr	r3, [r3, #48]	; 0x30
    if (row >= _windows[winIdx].rows())
   347b0:	e1530000 	cmp	r3, r0
   347b4:	aaffff6a 	bge	34564 <DisplayFX::consolePut(int)+0x4c>
   347b8:	e3a0c020 	mov	ip, #32
   347bc:	e1a02008 	mov	r2, r8
   347c0:	e1a01004 	mov	r1, r4
   347c4:	e1a00005 	mov	r0, r5
   347c8:	e58dc000 	str	ip, [sp]
   347cc:	ebfffa7e 	bl	331cc <DisplayFX::windowPut(int, int, int, int) [clone .part.2]>
   347d0:	eaffff63 	b	34564 <DisplayFX::consolePut(int)+0x4c>
        windowPut(_consoleWinIdx, _windows[_consoleWinIdx]._cursorCol, 
   347d4:	e1a07184 	lsl	r7, r4, #3
   347d8:	e0873004 	add	r3, r7, r4
   347dc:	e0643203 	rsb	r3, r4, r3, lsl #4
   347e0:	e1a03103 	lsl	r3, r3, #2
   347e4:	e0802003 	add	r2, r0, r3
    if (winIdx < 0 || winIdx >= DISPLAY_FX_MAX_WINDOWS)
   347e8:	e3540004 	cmp	r4, #4
        windowPut(_consoleWinIdx, _windows[_consoleWinIdx]._cursorCol, 
   347ec:	e5928034 	ldr	r8, [r2, #52]	; 0x34
    if (winIdx < 0 || winIdx >= DISPLAY_FX_MAX_WINDOWS)
   347f0:	8a000023 	bhi	34884 <DisplayFX::consolePut(int)+0x36c>
    if (!_windows[winIdx]._valid)
   347f4:	e7d03003 	ldrb	r3, [r0, r3]
   347f8:	e3530000 	cmp	r3, #0
   347fc:	0a000020 	beq	34884 <DisplayFX::consolePut(int)+0x36c>
   34800:	e1a06001 	mov	r6, r1
   34804:	e5921014 	ldr	r1, [r2, #20]
   34808:	e5920008 	ldr	r0, [r2, #8]
        if (cellWidth <= 0)
   3480c:	e3510000 	cmp	r1, #0
    if (col >= _windows[winIdx].cols())
   34810:	e1a09002 	mov	r9, r2
            return 0;
   34814:	d3a00000 	movle	r0, #0
        if (cellWidth <= 0)
   34818:	da000000 	ble	34820 <DisplayFX::consolePut(int)+0x308>
        return width/cellWidth;
   3481c:	eb0068a9 	bl	4eac8 <__divsi3>
   34820:	e1580000 	cmp	r8, r0
   34824:	aa000016 	bge	34884 <DisplayFX::consolePut(int)+0x36c>
   34828:	e5991018 	ldr	r1, [r9, #24]
   3482c:	e5990010 	ldr	r0, [r9, #16]
        if (cellHeight <= 0)
   34830:	e3510000 	cmp	r1, #0
            return 0;
   34834:	d3a00000 	movle	r0, #0
        if (cellHeight <= 0)
   34838:	da000000 	ble	34840 <DisplayFX::consolePut(int)+0x328>
        return height/cellHeight;
   3483c:	eb0068a1 	bl	4eac8 <__divsi3>
        windowPut(_consoleWinIdx, _windows[_consoleWinIdx]._cursorCol, 
   34840:	e0873004 	add	r3, r7, r4
   34844:	e0643203 	rsb	r3, r4, r3, lsl #4
   34848:	e0853103 	add	r3, r5, r3, lsl #2
   3484c:	e5933030 	ldr	r3, [r3, #48]	; 0x30
    if (row >= _windows[winIdx].rows())
   34850:	e1530000 	cmp	r3, r0
   34854:	aa00000a 	bge	34884 <DisplayFX::consolePut(int)+0x36c>
   34858:	e1a02008 	mov	r2, r8
   3485c:	e1a01004 	mov	r1, r4
   34860:	e58d6000 	str	r6, [sp]
   34864:	e1a00005 	mov	r0, r5
   34868:	ebfffa57 	bl	331cc <DisplayFX::windowPut(int, int, int, int) [clone .part.2]>
   3486c:	e5954b44 	ldr	r4, [r5, #2884]	; 0xb44
   34870:	e1a07184 	lsl	r7, r4, #3
   34874:	e0873004 	add	r3, r7, r4
   34878:	e0643203 	rsb	r3, r4, r3, lsl #4
   3487c:	e0853103 	add	r3, r5, r3, lsl #2
   34880:	e5938034 	ldr	r8, [r3, #52]	; 0x34
        cursorCheck();
   34884:	e1a00005 	mov	r0, r5
        _windows[_consoleWinIdx]._cursorCol++;
   34888:	e0877004 	add	r7, r7, r4
   3488c:	e0644207 	rsb	r4, r4, r7, lsl #4
   34890:	e0854104 	add	r4, r5, r4, lsl #2
   34894:	e2888001 	add	r8, r8, #1
   34898:	e5848034 	str	r8, [r4, #52]	; 0x34
}
   3489c:	e28dd008 	add	sp, sp, #8
   348a0:	e8bd47f0 	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
        cursorCheck();
   348a4:	eafffec7 	b	343c8 <DisplayFX::cursorCheck()>

000348a8 <DisplayFX::consolePut(char const*)>:
{
   348a8:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   348ac:	e1a05000 	mov	r5, r0
        if (cellWidth <= 0)
   348b0:	e3a07000 	mov	r7, #0
   348b4:	e24dd014 	sub	sp, sp, #20
   348b8:	e2416001 	sub	r6, r1, #1
    while (*pStr)
   348bc:	e5f69001 	ldrb	r9, [r6, #1]!
   348c0:	e3590000 	cmp	r9, #0
   348c4:	0a000011 	beq	34910 <DisplayFX::consolePut(char const*)+0x68>
    switch (ch) {
   348c8:	e2493008 	sub	r3, r9, #8
   348cc:	e5954b44 	ldr	r4, [r5, #2884]	; 0xb44
   348d0:	e3530005 	cmp	r3, #5
   348d4:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
   348d8:	ea0000a4 	b	34b70 <DisplayFX::consolePut(char const*)+0x2c8>
   348dc:	00034ad0 	.word	0x00034ad0
   348e0:	00034940 	.word	0x00034940
   348e4:	00034918 	.word	0x00034918
   348e8:	00034b70 	.word	0x00034b70
   348ec:	00034b70 	.word	0x00034b70
   348f0:	000348f4 	.word	0x000348f4
        _windows[_consoleWinIdx]._cursorCol = 0;
   348f4:	e0843184 	add	r3, r4, r4, lsl #3
   348f8:	e0644203 	rsb	r4, r4, r3, lsl #4
   348fc:	e0854104 	add	r4, r5, r4, lsl #2
   34900:	e5847034 	str	r7, [r4, #52]	; 0x34
    while (*pStr)
   34904:	e5f69001 	ldrb	r9, [r6, #1]!
   34908:	e3590000 	cmp	r9, #0
   3490c:	1affffed 	bne	348c8 <DisplayFX::consolePut(char const*)+0x20>
}
   34910:	e28dd014 	add	sp, sp, #20
   34914:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
        _windows[_consoleWinIdx]._cursorCol = 0;
   34918:	e0843184 	add	r3, r4, r4, lsl #3
   3491c:	e0644203 	rsb	r4, r4, r3, lsl #4
   34920:	e0854104 	add	r4, r5, r4, lsl #2
        _windows[_consoleWinIdx]._cursorRow++;
   34924:	e5943030 	ldr	r3, [r4, #48]	; 0x30
        _windows[_consoleWinIdx]._cursorCol = 0;
   34928:	e5847034 	str	r7, [r4, #52]	; 0x34
        _windows[_consoleWinIdx]._cursorRow++;
   3492c:	e2833001 	add	r3, r3, #1
   34930:	e5843030 	str	r3, [r4, #48]	; 0x30
        cursorCheck();
   34934:	e1a00005 	mov	r0, r5
   34938:	ebfffea2 	bl	343c8 <DisplayFX::cursorCheck()>
   3493c:	eaffffde 	b	348bc <DisplayFX::consolePut(char const*)+0x14>
        _windows[_consoleWinIdx]._cursorCol += 1;
   34940:	e1a0a184 	lsl	sl, r4, #3
   34944:	e08a9004 	add	r9, sl, r4
   34948:	e0649209 	rsb	r9, r4, r9, lsl #4
   3494c:	e0859109 	add	r9, r5, r9, lsl #2
   34950:	e599b034 	ldr	fp, [r9, #52]	; 0x34
   34954:	e5991014 	ldr	r1, [r9, #20]
   34958:	e28b3001 	add	r3, fp, #1
        _windows[_consoleWinIdx]._cursorCol = MIN(_windows[_consoleWinIdx]._cursorCol + 8 - 
   3495c:	e2732000 	rsbs	r2, r3, #0
   34960:	e2022007 	and	r2, r2, #7
   34964:	e2030007 	and	r0, r3, #7
   34968:	e28bb009 	add	fp, fp, #9
   3496c:	52620000 	rsbpl	r0, r2, #0
   34970:	e3510000 	cmp	r1, #0
   34974:	e04bb000 	sub	fp, fp, r0
        _windows[_consoleWinIdx]._cursorCol += 1;
   34978:	e5893034 	str	r3, [r9, #52]	; 0x34
   3497c:	e5990008 	ldr	r0, [r9, #8]
   34980:	d3e00000 	mvnle	r0, #0
   34984:	da000001 	ble	34990 <DisplayFX::consolePut(char const*)+0xe8>
        return width/cellWidth;
   34988:	eb00684e 	bl	4eac8 <__divsi3>
   3498c:	e2400001 	sub	r0, r0, #1
   34990:	e15b0000 	cmp	fp, r0
   34994:	a1a0b000 	movge	fp, r0
        _windows[_consoleWinIdx]._cursorCol = MIN(_windows[_consoleWinIdx]._cursorCol + 8 - 
   34998:	e08a3004 	add	r3, sl, r4
   3499c:	e0643203 	rsb	r3, r4, r3, lsl #4
   349a0:	e0853103 	add	r3, r5, r3, lsl #2
   349a4:	e583b034 	str	fp, [r3, #52]	; 0x34
   349a8:	e5991014 	ldr	r1, [r9, #20]
   349ac:	e5990008 	ldr	r0, [r9, #8]
        if (cellWidth <= 0)
   349b0:	e3510000 	cmp	r1, #0
            return 0;
   349b4:	d3a00000 	movle	r0, #0
        if (cellWidth <= 0)
   349b8:	da000000 	ble	349c0 <DisplayFX::consolePut(char const*)+0x118>
        return width/cellWidth;
   349bc:	eb006841 	bl	4eac8 <__divsi3>
   349c0:	e08a3004 	add	r3, sl, r4
   349c4:	e0643203 	rsb	r3, r4, r3, lsl #4
   349c8:	e0853103 	add	r3, r5, r3, lsl #2
    if (_windows[_consoleWinIdx]._cursorCol >= _windows[_consoleWinIdx].cols())
   349cc:	e15b0000 	cmp	fp, r0
   349d0:	e593b030 	ldr	fp, [r3, #48]	; 0x30
        _windows[_consoleWinIdx]._cursorCol = 0;
   349d4:	a5837034 	strge	r7, [r3, #52]	; 0x34
        _windows[_consoleWinIdx]._cursorRow++;
   349d8:	a28bb001 	addge	fp, fp, #1
   349dc:	a583b030 	strge	fp, [r3, #48]	; 0x30
   349e0:	e5991018 	ldr	r1, [r9, #24]
   349e4:	e5990010 	ldr	r0, [r9, #16]
        if (cellHeight <= 0)
   349e8:	e3510000 	cmp	r1, #0
            return 0;
   349ec:	d3a00000 	movle	r0, #0
        if (cellHeight <= 0)
   349f0:	da000000 	ble	349f8 <DisplayFX::consolePut(char const*)+0x150>
        return height/cellHeight;
   349f4:	eb006833 	bl	4eac8 <__divsi3>
    if (_windows[_consoleWinIdx]._cursorRow >= _windows[_consoleWinIdx].rows()) 
   349f8:	e150000b 	cmp	r0, fp
   349fc:	caffffae 	bgt	348bc <DisplayFX::consolePut(char const*)+0x14>
        _windows[_consoleWinIdx]._cursorRow--;
   34a00:	e08a3004 	add	r3, sl, r4
   34a04:	e0643203 	rsb	r3, r4, r3, lsl #4
   34a08:	e24bb001 	sub	fp, fp, #1
   34a0c:	e0853103 	add	r3, r5, r3, lsl #2
    if (winIdx < 0 || winIdx >= DISPLAY_FX_MAX_WINDOWS || rows == 0)
   34a10:	e3540004 	cmp	r4, #4
        _windows[_consoleWinIdx]._cursorRow--;
   34a14:	e583b030 	str	fp, [r3, #48]	; 0x30
    if (winIdx < 0 || winIdx >= DISPLAY_FX_MAX_WINDOWS || rows == 0)
   34a18:	8affffa7 	bhi	348bc <DisplayFX::consolePut(char const*)+0x14>
   34a1c:	e5991014 	ldr	r1, [r9, #20]
            (col * _windows[winIdx].cellWidth * _windows[winIdx].xPixScale) + _windows[winIdx].tlx;
   34a20:	e593b014 	ldr	fp, [r3, #20]
        if (cellWidth <= 0)
   34a24:	e3510000 	cmp	r1, #0
   34a28:	e593801c 	ldr	r8, [r3, #28]
   34a2c:	e5990008 	ldr	r0, [r9, #8]
   34a30:	d3a0b000 	movle	fp, #0
   34a34:	da000002 	ble	34a44 <DisplayFX::consolePut(char const*)+0x19c>
        return width/cellWidth;
   34a38:	eb006822 	bl	4eac8 <__divsi3>
   34a3c:	e00b009b 	mul	fp, fp, r0
   34a40:	e00b0b98 	mul	fp, r8, fp
   34a44:	e5991018 	ldr	r1, [r9, #24]
        if (cellHeight <= 0)
   34a48:	e3510000 	cmp	r1, #0
   34a4c:	daffff9a 	ble	348bc <DisplayFX::consolePut(char const*)+0x14>
        return height/cellHeight;
   34a50:	e5990010 	ldr	r0, [r9, #16]
   34a54:	eb00681b 	bl	4eac8 <__divsi3>
    return _pfb + ((row * _windows[winIdx].cellHeight * _windows[winIdx].yPixScale) + _windows[winIdx].tly) * _pitch + 
   34a58:	e08aa004 	add	sl, sl, r4
   34a5c:	e064420a 	rsb	r4, r4, sl, lsl #4
   34a60:	e0854104 	add	r4, r5, r4, lsl #2
   34a64:	e5942018 	ldr	r2, [r4, #24]
   34a68:	e594c020 	ldr	ip, [r4, #32]
        int pixDown = _windows[winIdx].rows() * _windows[winIdx].cellHeight * _windows[winIdx].yPixScale;
   34a6c:	e0000092 	mul	r0, r2, r0
   34a70:	e00a009c 	mul	sl, ip, r0
        for (int i = 0; i < pixDown; i++)
   34a74:	e35a0000 	cmp	sl, #0
   34a78:	daffff8f 	ble	348bc <DisplayFX::consolePut(char const*)+0x14>
   34a7c:	e3a08000 	mov	r8, #0
    return _pfb + ((row * _windows[winIdx].cellHeight * _windows[winIdx].yPixScale) + _windows[winIdx].tly) * _pitch + 
   34a80:	e594900c 	ldr	r9, [r4, #12]
            (col * _windows[winIdx].cellWidth * _windows[winIdx].xPixScale) + _windows[winIdx].tlx;
   34a84:	e5941004 	ldr	r1, [r4, #4]
    return _pfb + ((row * _windows[winIdx].cellHeight * _windows[winIdx].yPixScale) + _windows[winIdx].tly) * _pitch + 
   34a88:	e024929c 	mla	r4, ip, r2, r9
   34a8c:	e5952b34 	ldr	r2, [r5, #2868]	; 0xb34
            (col * _windows[winIdx].cellWidth * _windows[winIdx].xPixScale) + _windows[winIdx].tlx;
   34a90:	e0241492 	mla	r4, r2, r4, r1
   34a94:	e0291992 	mla	r9, r2, r9, r1
    return _pfb + ((row * _windows[winIdx].cellHeight * _windows[winIdx].yPixScale) + _windows[winIdx].tly) * _pitch + 
   34a98:	e5952b3c 	ldr	r2, [r5, #2876]	; 0xb3c
            (col * _windows[winIdx].cellWidth * _windows[winIdx].xPixScale) + _windows[winIdx].tlx;
   34a9c:	e0824004 	add	r4, r2, r4
   34aa0:	e0829009 	add	r9, r2, r9
            memcopyfast(pDest, pSrc, bytesAcross);
   34aa4:	e1a0200b 	mov	r2, fp
   34aa8:	e1a01004 	mov	r1, r4
   34aac:	e1a00009 	mov	r0, r9
   34ab0:	ebff4de5 	bl	824c <memcopyfast>
        for (int i = 0; i < pixDown; i++)
   34ab4:	e2888001 	add	r8, r8, #1
            pDest += _pitch;
   34ab8:	e5952b34 	ldr	r2, [r5, #2868]	; 0xb34
        for (int i = 0; i < pixDown; i++)
   34abc:	e15a0008 	cmp	sl, r8
            pDest += _pitch;
   34ac0:	e0899002 	add	r9, r9, r2
            pSrc += _pitch;
   34ac4:	e0844002 	add	r4, r4, r2
        for (int i = 0; i < pixDown; i++)
   34ac8:	1afffff5 	bne	34aa4 <DisplayFX::consolePut(char const*)+0x1fc>
   34acc:	eaffff7a 	b	348bc <DisplayFX::consolePut(char const*)+0x14>
        if (_windows[_consoleWinIdx]._cursorCol > 0) {
   34ad0:	e1a0a184 	lsl	sl, r4, #3
   34ad4:	e08a3004 	add	r3, sl, r4
   34ad8:	e0643203 	rsb	r3, r4, r3, lsl #4
   34adc:	e085b103 	add	fp, r5, r3, lsl #2
   34ae0:	e59b2034 	ldr	r2, [fp, #52]	; 0x34
   34ae4:	e3520000 	cmp	r2, #0
   34ae8:	daffff73 	ble	348bc <DisplayFX::consolePut(char const*)+0x14>
            _windows[_consoleWinIdx]._cursorCol--;
   34aec:	e2429001 	sub	r9, r2, #1
    if (winIdx < 0 || winIdx >= DISPLAY_FX_MAX_WINDOWS)
   34af0:	e3540004 	cmp	r4, #4
            _windows[_consoleWinIdx]._cursorCol--;
   34af4:	e58b9034 	str	r9, [fp, #52]	; 0x34
    if (winIdx < 0 || winIdx >= DISPLAY_FX_MAX_WINDOWS)
   34af8:	8affff6f 	bhi	348bc <DisplayFX::consolePut(char const*)+0x14>
    if (!_windows[winIdx]._valid)
   34afc:	e7d53103 	ldrb	r3, [r5, r3, lsl #2]
   34b00:	e3530000 	cmp	r3, #0
   34b04:	0affff6c 	beq	348bc <DisplayFX::consolePut(char const*)+0x14>
   34b08:	e59b1014 	ldr	r1, [fp, #20]
        if (cellWidth <= 0)
   34b0c:	e3510000 	cmp	r1, #0
   34b10:	daffff69 	ble	348bc <DisplayFX::consolePut(char const*)+0x14>
        return width/cellWidth;
   34b14:	e59b0008 	ldr	r0, [fp, #8]
   34b18:	eb0067ea 	bl	4eac8 <__divsi3>
    if (col >= _windows[winIdx].cols())
   34b1c:	e1590000 	cmp	r9, r0
   34b20:	aaffff65 	bge	348bc <DisplayFX::consolePut(char const*)+0x14>
   34b24:	e59b1018 	ldr	r1, [fp, #24]
   34b28:	e59b0010 	ldr	r0, [fp, #16]
        if (cellHeight <= 0)
   34b2c:	e3510000 	cmp	r1, #0
            return 0;
   34b30:	d3a00000 	movle	r0, #0
        if (cellHeight <= 0)
   34b34:	da000000 	ble	34b3c <DisplayFX::consolePut(char const*)+0x294>
        return height/cellHeight;
   34b38:	eb0067e2 	bl	4eac8 <__divsi3>
            windowPut(_consoleWinIdx, _windows[_consoleWinIdx]._cursorCol, 
   34b3c:	e08a3004 	add	r3, sl, r4
   34b40:	e0643203 	rsb	r3, r4, r3, lsl #4
   34b44:	e0853103 	add	r3, r5, r3, lsl #2
   34b48:	e5933030 	ldr	r3, [r3, #48]	; 0x30
    if (row >= _windows[winIdx].rows())
   34b4c:	e1530000 	cmp	r3, r0
   34b50:	aaffff59 	bge	348bc <DisplayFX::consolePut(char const*)+0x14>
   34b54:	e3a02020 	mov	r2, #32
   34b58:	e1a01004 	mov	r1, r4
   34b5c:	e58d2000 	str	r2, [sp]
   34b60:	e1a00005 	mov	r0, r5
   34b64:	e1a02009 	mov	r2, r9
   34b68:	ebfff997 	bl	331cc <DisplayFX::windowPut(int, int, int, int) [clone .part.2]>
   34b6c:	eaffff52 	b	348bc <DisplayFX::consolePut(char const*)+0x14>
        windowPut(_consoleWinIdx, _windows[_consoleWinIdx]._cursorCol, 
   34b70:	e1a0a184 	lsl	sl, r4, #3
   34b74:	e08a1004 	add	r1, sl, r4
   34b78:	e0641201 	rsb	r1, r4, r1, lsl #4
   34b7c:	e0853101 	add	r3, r5, r1, lsl #2
    if (winIdx < 0 || winIdx >= DISPLAY_FX_MAX_WINDOWS)
   34b80:	e3540004 	cmp	r4, #4
        windowPut(_consoleWinIdx, _windows[_consoleWinIdx]._cursorCol, 
   34b84:	e5938034 	ldr	r8, [r3, #52]	; 0x34
   34b88:	e1a0b003 	mov	fp, r3
    if (winIdx < 0 || winIdx >= DISPLAY_FX_MAX_WINDOWS)
   34b8c:	8a000024 	bhi	34c24 <DisplayFX::consolePut(char const*)+0x37c>
    if (!_windows[winIdx]._valid)
   34b90:	e7d51101 	ldrb	r1, [r5, r1, lsl #2]
   34b94:	e3510000 	cmp	r1, #0
   34b98:	0a000021 	beq	34c24 <DisplayFX::consolePut(char const*)+0x37c>
   34b9c:	e5931014 	ldr	r1, [r3, #20]
   34ba0:	e5930008 	ldr	r0, [r3, #8]
        if (cellWidth <= 0)
   34ba4:	e3510000 	cmp	r1, #0
            return 0;
   34ba8:	d3a00000 	movle	r0, #0
        if (cellWidth <= 0)
   34bac:	da000002 	ble	34bbc <DisplayFX::consolePut(char const*)+0x314>
   34bb0:	e58d300c 	str	r3, [sp, #12]
        return width/cellWidth;
   34bb4:	eb0067c3 	bl	4eac8 <__divsi3>
   34bb8:	e59d300c 	ldr	r3, [sp, #12]
    if (col >= _windows[winIdx].cols())
   34bbc:	e1580000 	cmp	r8, r0
   34bc0:	aa000017 	bge	34c24 <DisplayFX::consolePut(char const*)+0x37c>
   34bc4:	e5931018 	ldr	r1, [r3, #24]
   34bc8:	e5930010 	ldr	r0, [r3, #16]
        if (cellHeight <= 0)
   34bcc:	e3510000 	cmp	r1, #0
            return 0;
   34bd0:	d3a00000 	movle	r0, #0
        if (cellHeight <= 0)
   34bd4:	da000000 	ble	34bdc <DisplayFX::consolePut(char const*)+0x334>
        return height/cellHeight;
   34bd8:	eb0067ba 	bl	4eac8 <__divsi3>
        windowPut(_consoleWinIdx, _windows[_consoleWinIdx]._cursorCol, 
   34bdc:	e08a3004 	add	r3, sl, r4
   34be0:	e0643203 	rsb	r3, r4, r3, lsl #4
   34be4:	e0853103 	add	r3, r5, r3, lsl #2
   34be8:	e5933030 	ldr	r3, [r3, #48]	; 0x30
    if (row >= _windows[winIdx].rows())
   34bec:	e1530000 	cmp	r3, r0
   34bf0:	aa00000b 	bge	34c24 <DisplayFX::consolePut(char const*)+0x37c>
   34bf4:	e1a02008 	mov	r2, r8
   34bf8:	e1a01004 	mov	r1, r4
        consolePut(*pStr++);
   34bfc:	e58d9000 	str	r9, [sp]
   34c00:	e1a00005 	mov	r0, r5
   34c04:	ebfff970 	bl	331cc <DisplayFX::windowPut(int, int, int, int) [clone .part.2]>
   34c08:	e5954b44 	ldr	r4, [r5, #2884]	; 0xb44
   34c0c:	e1a0a184 	lsl	sl, r4, #3
   34c10:	e08a3004 	add	r3, sl, r4
   34c14:	e0643203 	rsb	r3, r4, r3, lsl #4
   34c18:	e0853103 	add	r3, r5, r3, lsl #2
   34c1c:	e1a0b003 	mov	fp, r3
   34c20:	e5938034 	ldr	r8, [r3, #52]	; 0x34
        _windows[_consoleWinIdx]._cursorCol++;
   34c24:	e08a3004 	add	r3, sl, r4
   34c28:	e0643203 	rsb	r3, r4, r3, lsl #4
   34c2c:	e2889001 	add	r9, r8, #1
   34c30:	e0853103 	add	r3, r5, r3, lsl #2
   34c34:	e5839034 	str	r9, [r3, #52]	; 0x34
   34c38:	e59b1014 	ldr	r1, [fp, #20]
   34c3c:	e59b0008 	ldr	r0, [fp, #8]
        if (cellWidth <= 0)
   34c40:	e3510000 	cmp	r1, #0
            return 0;
   34c44:	d3a00000 	movle	r0, #0
        if (cellWidth <= 0)
   34c48:	da000000 	ble	34c50 <DisplayFX::consolePut(char const*)+0x3a8>
        return width/cellWidth;
   34c4c:	eb00679d 	bl	4eac8 <__divsi3>
   34c50:	e08a3004 	add	r3, sl, r4
   34c54:	e0643203 	rsb	r3, r4, r3, lsl #4
   34c58:	e0853103 	add	r3, r5, r3, lsl #2
    if (_windows[_consoleWinIdx]._cursorCol >= _windows[_consoleWinIdx].cols())
   34c5c:	e1590000 	cmp	r9, r0
   34c60:	e5939030 	ldr	r9, [r3, #48]	; 0x30
        _windows[_consoleWinIdx]._cursorCol = 0;
   34c64:	a5837034 	strge	r7, [r3, #52]	; 0x34
        _windows[_consoleWinIdx]._cursorRow++;
   34c68:	a2899001 	addge	r9, r9, #1
   34c6c:	a5839030 	strge	r9, [r3, #48]	; 0x30
   34c70:	e59b1018 	ldr	r1, [fp, #24]
   34c74:	e59b0010 	ldr	r0, [fp, #16]
        if (cellHeight <= 0)
   34c78:	e3510000 	cmp	r1, #0
            return 0;
   34c7c:	d3a00000 	movle	r0, #0
        if (cellHeight <= 0)
   34c80:	da000000 	ble	34c88 <DisplayFX::consolePut(char const*)+0x3e0>
        return height/cellHeight;
   34c84:	eb00678f 	bl	4eac8 <__divsi3>
    if (_windows[_consoleWinIdx]._cursorRow >= _windows[_consoleWinIdx].rows()) 
   34c88:	e1590000 	cmp	r9, r0
   34c8c:	baffff0a 	blt	348bc <DisplayFX::consolePut(char const*)+0x14>
        _windows[_consoleWinIdx]._cursorRow--;
   34c90:	e08a3004 	add	r3, sl, r4
   34c94:	e0643203 	rsb	r3, r4, r3, lsl #4
   34c98:	e2499001 	sub	r9, r9, #1
   34c9c:	e0853103 	add	r3, r5, r3, lsl #2
    if (winIdx < 0 || winIdx >= DISPLAY_FX_MAX_WINDOWS || rows == 0)
   34ca0:	e3540004 	cmp	r4, #4
        _windows[_consoleWinIdx]._cursorRow--;
   34ca4:	e5839030 	str	r9, [r3, #48]	; 0x30
    if (winIdx < 0 || winIdx >= DISPLAY_FX_MAX_WINDOWS || rows == 0)
   34ca8:	8affff03 	bhi	348bc <DisplayFX::consolePut(char const*)+0x14>
   34cac:	e59b1014 	ldr	r1, [fp, #20]
            (col * _windows[winIdx].cellWidth * _windows[winIdx].xPixScale) + _windows[winIdx].tlx;
   34cb0:	e5939014 	ldr	r9, [r3, #20]
        if (cellWidth <= 0)
   34cb4:	e3510000 	cmp	r1, #0
   34cb8:	e593801c 	ldr	r8, [r3, #28]
   34cbc:	e59b0008 	ldr	r0, [fp, #8]
   34cc0:	d3a09000 	movle	r9, #0
   34cc4:	da000002 	ble	34cd4 <DisplayFX::consolePut(char const*)+0x42c>
        return width/cellWidth;
   34cc8:	eb00677e 	bl	4eac8 <__divsi3>
   34ccc:	e0090099 	mul	r9, r9, r0
   34cd0:	e0090998 	mul	r9, r8, r9
   34cd4:	e59b1018 	ldr	r1, [fp, #24]
        if (cellHeight <= 0)
   34cd8:	e3510000 	cmp	r1, #0
   34cdc:	dafffef6 	ble	348bc <DisplayFX::consolePut(char const*)+0x14>
        return height/cellHeight;
   34ce0:	e59b0010 	ldr	r0, [fp, #16]
   34ce4:	eb006777 	bl	4eac8 <__divsi3>
    return _pfb + ((row * _windows[winIdx].cellHeight * _windows[winIdx].yPixScale) + _windows[winIdx].tly) * _pitch + 
   34ce8:	e08aa004 	add	sl, sl, r4
   34cec:	e064420a 	rsb	r4, r4, sl, lsl #4
   34cf0:	e0854104 	add	r4, r5, r4, lsl #2
   34cf4:	e5942018 	ldr	r2, [r4, #24]
   34cf8:	e594c020 	ldr	ip, [r4, #32]
        int pixDown = _windows[winIdx].rows() * _windows[winIdx].cellHeight * _windows[winIdx].yPixScale;
   34cfc:	e0000092 	mul	r0, r2, r0
   34d00:	e00a009c 	mul	sl, ip, r0
        for (int i = 0; i < pixDown; i++)
   34d04:	e35a0000 	cmp	sl, #0
   34d08:	dafffeeb 	ble	348bc <DisplayFX::consolePut(char const*)+0x14>
   34d0c:	e3a0b000 	mov	fp, #0
    return _pfb + ((row * _windows[winIdx].cellHeight * _windows[winIdx].yPixScale) + _windows[winIdx].tly) * _pitch + 
   34d10:	e594300c 	ldr	r3, [r4, #12]
            (col * _windows[winIdx].cellWidth * _windows[winIdx].xPixScale) + _windows[winIdx].tlx;
   34d14:	e5941004 	ldr	r1, [r4, #4]
    return _pfb + ((row * _windows[winIdx].cellHeight * _windows[winIdx].yPixScale) + _windows[winIdx].tly) * _pitch + 
   34d18:	e024329c 	mla	r4, ip, r2, r3
   34d1c:	e5952b34 	ldr	r2, [r5, #2868]	; 0xb34
            (col * _windows[winIdx].cellWidth * _windows[winIdx].xPixScale) + _windows[winIdx].tlx;
   34d20:	e0241492 	mla	r4, r2, r4, r1
   34d24:	e0231392 	mla	r3, r2, r3, r1
    return _pfb + ((row * _windows[winIdx].cellHeight * _windows[winIdx].yPixScale) + _windows[winIdx].tly) * _pitch + 
   34d28:	e5952b3c 	ldr	r2, [r5, #2876]	; 0xb3c
            (col * _windows[winIdx].cellWidth * _windows[winIdx].xPixScale) + _windows[winIdx].tlx;
   34d2c:	e0824004 	add	r4, r2, r4
   34d30:	e0828003 	add	r8, r2, r3
            memcopyfast(pDest, pSrc, bytesAcross);
   34d34:	e1a02009 	mov	r2, r9
   34d38:	e1a01004 	mov	r1, r4
   34d3c:	e1a00008 	mov	r0, r8
   34d40:	ebff4d41 	bl	824c <memcopyfast>
        for (int i = 0; i < pixDown; i++)
   34d44:	e28bb001 	add	fp, fp, #1
            pDest += _pitch;
   34d48:	e5952b34 	ldr	r2, [r5, #2868]	; 0xb34
        for (int i = 0; i < pixDown; i++)
   34d4c:	e15a000b 	cmp	sl, fp
            pDest += _pitch;
   34d50:	e0888002 	add	r8, r8, r2
            pSrc += _pitch;
   34d54:	e0844002 	add	r4, r4, r2
        for (int i = 0; i < pixDown; i++)
   34d58:	1afffff5 	bne	34d34 <DisplayFX::consolePut(char const*)+0x48c>
   34d5c:	eafffed6 	b	348bc <DisplayFX::consolePut(char const*)+0x14>

00034d60 <DisplayFX::windowScroll(int, int)>:
{
   34d60:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if (winIdx < 0 || winIdx >= DISPLAY_FX_MAX_WINDOWS || rows == 0)
   34d64:	e16f5f12 	clz	r5, r2
   34d68:	e1a052a5 	lsr	r5, r5, #5
   34d6c:	e3510004 	cmp	r1, #4
   34d70:	91a0c005 	movls	ip, r5
   34d74:	8385c001 	orrhi	ip, r5, #1
   34d78:	e35c0000 	cmp	ip, #0
{
   34d7c:	e24dd014 	sub	sp, sp, #20
    if (winIdx < 0 || winIdx >= DISPLAY_FX_MAX_WINDOWS || rows == 0)
   34d80:	1a00003d 	bne	34e7c <DisplayFX::windowScroll(int, int)+0x11c>
   34d84:	e1a04002 	mov	r4, r2
   34d88:	e0813181 	add	r3, r1, r1, lsl #3
   34d8c:	e0611203 	rsb	r1, r1, r3, lsl #4
   34d90:	e0801101 	add	r1, r0, r1, lsl #2
   34d94:	e5903b34 	ldr	r3, [r0, #2868]	; 0xb34
   34d98:	e591200c 	ldr	r2, [r1, #12]
   34d9c:	e5909b3c 	ldr	r9, [r0, #2876]	; 0xb3c
   34da0:	e00e0293 	mul	lr, r3, r2
   34da4:	e1a08000 	mov	r8, r0
    int numRows = rows < 0 ? -rows : rows;
   34da8:	e0240fc4 	eor	r0, r4, r4, asr #31
   34dac:	e0400fc4 	sub	r0, r0, r4, asr #31
   34db0:	e591b004 	ldr	fp, [r1, #4]
   34db4:	e58d0004 	str	r0, [sp, #4]
   34db8:	e5910020 	ldr	r0, [r1, #32]
   34dbc:	e08b600e 	add	r6, fp, lr
    if (rows > 0)
   34dc0:	e3540000 	cmp	r4, #0
   34dc4:	e0896006 	add	r6, r9, r6
   34dc8:	e5917010 	ldr	r7, [r1, #16]
   34dcc:	e5914018 	ldr	r4, [r1, #24]
   34dd0:	e58d0000 	str	r0, [sp]
   34dd4:	da00002a 	ble	34e84 <DisplayFX::windowScroll(int, int)+0x124>
            (col * _windows[winIdx].cellWidth * _windows[winIdx].xPixScale) + _windows[winIdx].tlx;
   34dd8:	e591a014 	ldr	sl, [r1, #20]
   34ddc:	e591501c 	ldr	r5, [r1, #28]
        if (cellWidth <= 0)
   34de0:	e35a0000 	cmp	sl, #0
   34de4:	e5910008 	ldr	r0, [r1, #8]
   34de8:	d1a0500c 	movle	r5, ip
   34dec:	da000005 	ble	34e08 <DisplayFX::windowScroll(int, int)+0xa8>
        return width/cellWidth;
   34df0:	e1a0100a 	mov	r1, sl
   34df4:	e1cd20f8 	strd	r2, [sp, #8]
   34df8:	eb006732 	bl	4eac8 <__divsi3>
   34dfc:	e1cd20d8 	ldrd	r2, [sp, #8]
   34e00:	e000009a 	mul	r0, sl, r0
   34e04:	e0050095 	mul	r5, r5, r0
        if (cellHeight <= 0)
   34e08:	e3540000 	cmp	r4, #0
   34e0c:	e1cd20f8 	strd	r2, [sp, #8]
   34e10:	da000019 	ble	34e7c <DisplayFX::windowScroll(int, int)+0x11c>
        return height/cellHeight;
   34e14:	e1a00007 	mov	r0, r7
   34e18:	e1a01004 	mov	r1, r4
   34e1c:	eb006729 	bl	4eac8 <__divsi3>
        int pixDown = _windows[winIdx].rows() * _windows[winIdx].cellHeight * _windows[winIdx].yPixScale;
   34e20:	e0000094 	mul	r0, r4, r0
   34e24:	e59d3000 	ldr	r3, [sp]
   34e28:	e00a0093 	mul	sl, r3, r0
        for (int i = 0; i < pixDown; i++)
   34e2c:	e35a0000 	cmp	sl, #0
   34e30:	da000011 	ble	34e7c <DisplayFX::windowScroll(int, int)+0x11c>
   34e34:	e3a07000 	mov	r7, #0
    return _pfb + ((row * _windows[winIdx].cellHeight * _windows[winIdx].yPixScale) + _windows[winIdx].tly) * _pitch + 
   34e38:	e59d2004 	ldr	r2, [sp, #4]
   34e3c:	e0040294 	mul	r4, r4, r2
   34e40:	e59d2008 	ldr	r2, [sp, #8]
   34e44:	e0222493 	mla	r2, r3, r4, r2
            (col * _windows[winIdx].cellWidth * _windows[winIdx].xPixScale) + _windows[winIdx].tlx;
   34e48:	e59d300c 	ldr	r3, [sp, #12]
   34e4c:	e02bb293 	mla	fp, r3, r2, fp
   34e50:	e089900b 	add	r9, r9, fp
            memcopyfast(pDest, pSrc, bytesAcross);
   34e54:	e1a01009 	mov	r1, r9
   34e58:	e1a00006 	mov	r0, r6
   34e5c:	e1a02005 	mov	r2, r5
   34e60:	ebff4cf9 	bl	824c <memcopyfast>
        for (int i = 0; i < pixDown; i++)
   34e64:	e2877001 	add	r7, r7, #1
            pDest += _pitch;
   34e68:	e5983b34 	ldr	r3, [r8, #2868]	; 0xb34
        for (int i = 0; i < pixDown; i++)
   34e6c:	e15a0007 	cmp	sl, r7
            pDest += _pitch;
   34e70:	e0866003 	add	r6, r6, r3
            pSrc += _pitch;
   34e74:	e0899003 	add	r9, r9, r3
        for (int i = 0; i < pixDown; i++)
   34e78:	1afffff5 	bne	34e54 <DisplayFX::windowScroll(int, int)+0xf4>
}
   34e7c:	e28dd014 	add	sp, sp, #20
   34e80:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (cellHeight <= 0)
   34e84:	e3540000 	cmp	r4, #0
            return 0;
   34e88:	d1a0000c 	movle	r0, ip
        if (cellHeight <= 0)
   34e8c:	da000009 	ble	34eb8 <DisplayFX::windowScroll(int, int)+0x158>
        return height/cellHeight;
   34e90:	e1a00007 	mov	r0, r7
   34e94:	e1a01004 	mov	r1, r4
   34e98:	e1cd20f8 	strd	r2, [sp, #8]
   34e9c:	eb006709 	bl	4eac8 <__divsi3>
   34ea0:	e00e0094 	mul	lr, r4, r0
   34ea4:	e59d3000 	ldr	r3, [sp]
   34ea8:	e59d2008 	ldr	r2, [sp, #8]
   34eac:	e02e2e93 	mla	lr, r3, lr, r2
   34eb0:	e59d300c 	ldr	r3, [sp, #12]
   34eb4:	e00e0e93 	mul	lr, r3, lr
        uint8_t* pSrc = windowGetPFB(winIdx, 0, _windows[winIdx].rows()-numRows) - 1;
   34eb8:	e59d1004 	ldr	r1, [sp, #4]
   34ebc:	e24bb001 	sub	fp, fp, #1
   34ec0:	e0400001 	sub	r0, r0, r1
    return _pfb + ((row * _windows[winIdx].cellHeight * _windows[winIdx].yPixScale) + _windows[winIdx].tly) * _pitch + 
   34ec4:	e0040094 	mul	r4, r4, r0
   34ec8:	e59d1000 	ldr	r1, [sp]
   34ecc:	e0222491 	mla	r2, r1, r4, r2
        uint8_t* pSrc = windowGetPFB(winIdx, 0, _windows[winIdx].rows()-numRows) - 1;
   34ed0:	e023b293 	mla	r3, r3, r2, fp
   34ed4:	e0893003 	add	r3, r9, r3
        while (pSrc > pEnd)
   34ed8:	e1530006 	cmp	r3, r6
   34edc:	e08bb00e 	add	fp, fp, lr
   34ee0:	9affffe5 	bls	34e7c <DisplayFX::windowScroll(int, int)+0x11c>
   34ee4:	e28bb001 	add	fp, fp, #1
   34ee8:	e089900b 	add	r9, r9, fp
            *pDest-- = *pSrc--;            
   34eec:	e4532001 	ldrb	r2, [r3], #-1
        while (pSrc > pEnd)
   34ef0:	e1530006 	cmp	r3, r6
            *pDest-- = *pSrc--;            
   34ef4:	e5692001 	strb	r2, [r9, #-1]!
        while (pSrc > pEnd)
   34ef8:	1afffffb 	bne	34eec <DisplayFX::windowScroll(int, int)+0x18c>
}
   34efc:	e28dd014 	add	sp, sp, #20
   34f00:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

00034f04 <DisplayFX::drawHorizontal(int, int, int, int)>:
    return _pfb + y * _pitch + x;
   34f04:	e590cb34 	ldr	ip, [r0, #2868]	; 0xb34
    for (int i = 0; i < len; i++)
   34f08:	e3530000 	cmp	r3, #0
    return _pfb + y * _pitch + x;
   34f0c:	e002029c 	mul	r2, ip, r2
   34f10:	e5900b3c 	ldr	r0, [r0, #2876]	; 0xb3c
{
   34f14:	e59dc000 	ldr	ip, [sp]
    for (int i = 0; i < len; i++)
   34f18:	d12fff1e 	bxle	lr
   34f1c:	e0812002 	add	r2, r1, r2
   34f20:	e0800002 	add	r0, r0, r2
   34f24:	e6ef107c 	uxtb	r1, ip
   34f28:	e1a02003 	mov	r2, r3
   34f2c:	ea005fd1 	b	4ce78 <memset>

00034f30 <DisplayFX::drawVertical(int, int, int, int)>:
    return _pfb + y * _pitch + x;
   34f30:	e590cb34 	ldr	ip, [r0, #2868]	; 0xb34
    for (int i = 0; i < len; i++)
   34f34:	e3530000 	cmp	r3, #0
    return _pfb + y * _pitch + x;
   34f38:	e022129c 	mla	r2, ip, r2, r1
   34f3c:	e590cb3c 	ldr	ip, [r0, #2876]	; 0xb3c
   34f40:	e08c2002 	add	r2, ip, r2
    for (int i = 0; i < len; i++)
   34f44:	d12fff1e 	bxle	lr
   34f48:	e3a01000 	mov	r1, #0
{
   34f4c:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   34f50:	e59dc004 	ldr	ip, [sp, #4]
   34f54:	e6efe07c 	uxtb	lr, ip
        *pBuf = colour;
   34f58:	e5c2e000 	strb	lr, [r2]
    for (int i = 0; i < len; i++)
   34f5c:	e2811001 	add	r1, r1, #1
        pBuf += _pitch;
   34f60:	e590cb34 	ldr	ip, [r0, #2868]	; 0xb34
    for (int i = 0; i < len; i++)
   34f64:	e1530001 	cmp	r3, r1
        pBuf += _pitch;
   34f68:	e082200c 	add	r2, r2, ip
    for (int i = 0; i < len; i++)
   34f6c:	1afffff9 	bne	34f58 <DisplayFX::drawVertical(int, int, int, int)+0x28>
   34f70:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

00034f74 <DisplayFX::screenReadCell(int, int, int, unsigned char*)>:
{
   34f74:	e92d4ff8 	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if (winIdx < 0 || winIdx >= DISPLAY_FX_MAX_WINDOWS)
   34f78:	e3510004 	cmp	r1, #4
{
   34f7c:	e59d4028 	ldr	r4, [sp, #40]	; 0x28
    if (winIdx < 0 || winIdx >= DISPLAY_FX_MAX_WINDOWS)
   34f80:	88bd8ff8 	pophi	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (col >= _windows[winIdx].cols())
   34f84:	e1a0b181 	lsl	fp, r1, #3
   34f88:	e08b5001 	add	r5, fp, r1
   34f8c:	e0615205 	rsb	r5, r1, r5, lsl #4
   34f90:	e1a05105 	lsl	r5, r5, #2
   34f94:	e080a005 	add	sl, r0, r5
   34f98:	e1a07001 	mov	r7, r1
   34f9c:	e59a1014 	ldr	r1, [sl, #20]
   34fa0:	e1a06000 	mov	r6, r0
        if (cellWidth <= 0)
   34fa4:	e3510000 	cmp	r1, #0
   34fa8:	e59a0008 	ldr	r0, [sl, #8]
   34fac:	e1a08003 	mov	r8, r3
   34fb0:	e1a09002 	mov	r9, r2
            return 0;
   34fb4:	d3a00000 	movle	r0, #0
        if (cellWidth <= 0)
   34fb8:	da000000 	ble	34fc0 <DisplayFX::screenReadCell(int, int, int, unsigned char*)+0x4c>
        return width/cellWidth;
   34fbc:	eb0066c1 	bl	4eac8 <__divsi3>
   34fc0:	e1590000 	cmp	r9, r0
   34fc4:	a8bd8ff8 	popge	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   34fc8:	e59a1018 	ldr	r1, [sl, #24]
   34fcc:	e59a0010 	ldr	r0, [sl, #16]
        if (cellHeight <= 0)
   34fd0:	e3510000 	cmp	r1, #0
            return 0;
   34fd4:	d3a00000 	movle	r0, #0
        if (cellHeight <= 0)
   34fd8:	da000000 	ble	34fe0 <DisplayFX::screenReadCell(int, int, int, unsigned char*)+0x6c>
        return height/cellHeight;
   34fdc:	eb0066b9 	bl	4eac8 <__divsi3>
    if (row >= _windows[winIdx].rows())
   34fe0:	e1580000 	cmp	r8, r0
   34fe4:	a8bd8ff8 	popge	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (!_windows[winIdx]._valid)
   34fe8:	e7d63005 	ldrb	r3, [r6, r5]
   34fec:	e3530000 	cmp	r3, #0
   34ff0:	08bd8ff8 	popeq	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return _pfb + ((row * _windows[winIdx].cellHeight * _windows[winIdx].yPixScale) + _windows[winIdx].tly) * _pitch + 
   34ff4:	e08be007 	add	lr, fp, r7
   34ff8:	e067e20e 	rsb	lr, r7, lr, lsl #4
   34ffc:	e086e10e 	add	lr, r6, lr, lsl #2
            (col * _windows[winIdx].cellWidth * _windows[winIdx].xPixScale) + _windows[winIdx].tlx;
   35000:	e59ec014 	ldr	ip, [lr, #20]
    return _pfb + ((row * _windows[winIdx].cellHeight * _windows[winIdx].yPixScale) + _windows[winIdx].tly) * _pitch + 
   35004:	e59e0018 	ldr	r0, [lr, #24]
            (col * _windows[winIdx].cellWidth * _windows[winIdx].xPixScale) + _windows[winIdx].tlx;
   35008:	e00c099c 	mul	ip, ip, r9
   3500c:	e59a1004 	ldr	r1, [sl, #4]
    return _pfb + ((row * _windows[winIdx].cellHeight * _windows[winIdx].yPixScale) + _windows[winIdx].tly) * _pitch + 
   35010:	e0030890 	mul	r3, r0, r8
            (col * _windows[winIdx].cellWidth * _windows[winIdx].xPixScale) + _windows[winIdx].tlx;
   35014:	e59e501c 	ldr	r5, [lr, #28]
    return _pfb + ((row * _windows[winIdx].cellHeight * _windows[winIdx].yPixScale) + _windows[winIdx].tly) * _pitch + 
   35018:	e59e2020 	ldr	r2, [lr, #32]
            (col * _windows[winIdx].cellWidth * _windows[winIdx].xPixScale) + _windows[winIdx].tlx;
   3501c:	e02c1c95 	mla	ip, r5, ip, r1
    return _pfb + ((row * _windows[winIdx].cellHeight * _windows[winIdx].yPixScale) + _windows[winIdx].tly) * _pitch + 
   35020:	e59e100c 	ldr	r1, [lr, #12]
            (col * _windows[winIdx].cellWidth * _windows[winIdx].xPixScale) + _windows[winIdx].tlx;
   35024:	e5967b3c 	ldr	r7, [r6, #2876]	; 0xb3c
    return _pfb + ((row * _windows[winIdx].cellHeight * _windows[winIdx].yPixScale) + _windows[winIdx].tly) * _pitch + 
   35028:	e0231392 	mla	r3, r2, r3, r1
   3502c:	e5961b34 	ldr	r1, [r6, #2868]	; 0xb34
    for (int y = 0; y < _windows[winIdx].cellHeight; y++) {
   35030:	e3500000 	cmp	r0, #0
            (col * _windows[winIdx].cellWidth * _windows[winIdx].xPixScale) + _windows[winIdx].tlx;
   35034:	e023c391 	mla	r3, r1, r3, ip
   35038:	e0877003 	add	r7, r7, r3
    for (int y = 0; y < _windows[winIdx].cellHeight; y++) {
   3503c:	d8bd8ff8 	pople	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   35040:	e3a08000 	mov	r8, #0
        for (int i = 0; i < _windows[winIdx].yPixScale; i++) {
   35044:	e3520000 	cmp	r2, #0
   35048:	da00001b 	ble	350bc <DisplayFX::screenReadCell(int, int, int, unsigned char*)+0x148>
   3504c:	e3a00000 	mov	r0, #0
   35050:	e59e3014 	ldr	r3, [lr, #20]
            for (int x = 0; x < _windows[winIdx].cellWidth; x++) {
   35054:	e3530000 	cmp	r3, #0
   35058:	da000012 	ble	350a8 <DisplayFX::screenReadCell(int, int, int, unsigned char*)+0x134>
   3505c:	e1a0c007 	mov	ip, r7
   35060:	e3a05000 	mov	r5, #0
   35064:	e59e201c 	ldr	r2, [lr, #28]
                for (int j = 0; j < _windows[winIdx].xPixScale; j++) {
   35068:	e3520000 	cmp	r2, #0
   3506c:	da000008 	ble	35094 <DisplayFX::screenReadCell(int, int, int, unsigned char*)+0x120>
   35070:	e1a0300c 	mov	r3, ip
                    *pCellBuf++ = *pBufCur++;
   35074:	e4d32001 	ldrb	r2, [r3], #1
   35078:	e4c42001 	strb	r2, [r4], #1
                for (int j = 0; j < _windows[winIdx].xPixScale; j++) {
   3507c:	e59e201c 	ldr	r2, [lr, #28]
   35080:	e043100c 	sub	r1, r3, ip
   35084:	e1520001 	cmp	r2, r1
   35088:	cafffff9 	bgt	35074 <DisplayFX::screenReadCell(int, int, int, unsigned char*)+0x100>
                    *pCellBuf++ = *pBufCur++;
   3508c:	e1a0c003 	mov	ip, r3
   35090:	e59e3014 	ldr	r3, [lr, #20]
            for (int x = 0; x < _windows[winIdx].cellWidth; x++) {
   35094:	e2855001 	add	r5, r5, #1
   35098:	e1550003 	cmp	r5, r3
   3509c:	bafffff1 	blt	35068 <DisplayFX::screenReadCell(int, int, int, unsigned char*)+0xf4>
   350a0:	e59e2020 	ldr	r2, [lr, #32]
   350a4:	e5961b34 	ldr	r1, [r6, #2868]	; 0xb34
        for (int i = 0; i < _windows[winIdx].yPixScale; i++) {
   350a8:	e2800001 	add	r0, r0, #1
   350ac:	e1520000 	cmp	r2, r0
            pBuf += _pitch;
   350b0:	e0877001 	add	r7, r7, r1
        for (int i = 0; i < _windows[winIdx].yPixScale; i++) {
   350b4:	caffffe6 	bgt	35054 <DisplayFX::screenReadCell(int, int, int, unsigned char*)+0xe0>
   350b8:	e59e0018 	ldr	r0, [lr, #24]
    for (int y = 0; y < _windows[winIdx].cellHeight; y++) {
   350bc:	e2888001 	add	r8, r8, #1
   350c0:	e1580000 	cmp	r8, r0
   350c4:	baffffde 	blt	35044 <DisplayFX::screenReadCell(int, int, int, unsigned char*)+0xd0>
   350c8:	e8bd8ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

000350cc <DisplayFX::screenWriteCell(int, int, int, unsigned char*)>:
{
   350cc:	e92d4ff8 	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if (winIdx < 0 || winIdx >= DISPLAY_FX_MAX_WINDOWS)
   350d0:	e3510004 	cmp	r1, #4
{
   350d4:	e59d4028 	ldr	r4, [sp, #40]	; 0x28
    if (winIdx < 0 || winIdx >= DISPLAY_FX_MAX_WINDOWS)
   350d8:	88bd8ff8 	pophi	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (col >= _windows[winIdx].cols())
   350dc:	e1a0b181 	lsl	fp, r1, #3
   350e0:	e08b5001 	add	r5, fp, r1
   350e4:	e0615205 	rsb	r5, r1, r5, lsl #4
   350e8:	e1a05105 	lsl	r5, r5, #2
   350ec:	e080a005 	add	sl, r0, r5
   350f0:	e1a07001 	mov	r7, r1
   350f4:	e59a1014 	ldr	r1, [sl, #20]
   350f8:	e1a06000 	mov	r6, r0
        if (cellWidth <= 0)
   350fc:	e3510000 	cmp	r1, #0
   35100:	e59a0008 	ldr	r0, [sl, #8]
   35104:	e1a08003 	mov	r8, r3
   35108:	e1a09002 	mov	r9, r2
            return 0;
   3510c:	d3a00000 	movle	r0, #0
        if (cellWidth <= 0)
   35110:	da000000 	ble	35118 <DisplayFX::screenWriteCell(int, int, int, unsigned char*)+0x4c>
        return width/cellWidth;
   35114:	eb00666b 	bl	4eac8 <__divsi3>
   35118:	e1590000 	cmp	r9, r0
   3511c:	a8bd8ff8 	popge	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   35120:	e59a1018 	ldr	r1, [sl, #24]
   35124:	e59a0010 	ldr	r0, [sl, #16]
        if (cellHeight <= 0)
   35128:	e3510000 	cmp	r1, #0
            return 0;
   3512c:	d3a00000 	movle	r0, #0
        if (cellHeight <= 0)
   35130:	da000000 	ble	35138 <DisplayFX::screenWriteCell(int, int, int, unsigned char*)+0x6c>
        return height/cellHeight;
   35134:	eb006663 	bl	4eac8 <__divsi3>
    if (row >= _windows[winIdx].rows())
   35138:	e1580000 	cmp	r8, r0
   3513c:	a8bd8ff8 	popge	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (!_windows[winIdx]._valid)
   35140:	e7d63005 	ldrb	r3, [r6, r5]
   35144:	e3530000 	cmp	r3, #0
   35148:	08bd8ff8 	popeq	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return _pfb + ((row * _windows[winIdx].cellHeight * _windows[winIdx].yPixScale) + _windows[winIdx].tly) * _pitch + 
   3514c:	e08be007 	add	lr, fp, r7
   35150:	e067e20e 	rsb	lr, r7, lr, lsl #4
   35154:	e086e10e 	add	lr, r6, lr, lsl #2
            (col * _windows[winIdx].cellWidth * _windows[winIdx].xPixScale) + _windows[winIdx].tlx;
   35158:	e59ec014 	ldr	ip, [lr, #20]
    return _pfb + ((row * _windows[winIdx].cellHeight * _windows[winIdx].yPixScale) + _windows[winIdx].tly) * _pitch + 
   3515c:	e59e0018 	ldr	r0, [lr, #24]
            (col * _windows[winIdx].cellWidth * _windows[winIdx].xPixScale) + _windows[winIdx].tlx;
   35160:	e00c099c 	mul	ip, ip, r9
   35164:	e59a1004 	ldr	r1, [sl, #4]
    return _pfb + ((row * _windows[winIdx].cellHeight * _windows[winIdx].yPixScale) + _windows[winIdx].tly) * _pitch + 
   35168:	e0030890 	mul	r3, r0, r8
            (col * _windows[winIdx].cellWidth * _windows[winIdx].xPixScale) + _windows[winIdx].tlx;
   3516c:	e59e501c 	ldr	r5, [lr, #28]
    return _pfb + ((row * _windows[winIdx].cellHeight * _windows[winIdx].yPixScale) + _windows[winIdx].tly) * _pitch + 
   35170:	e59e2020 	ldr	r2, [lr, #32]
            (col * _windows[winIdx].cellWidth * _windows[winIdx].xPixScale) + _windows[winIdx].tlx;
   35174:	e02c1c95 	mla	ip, r5, ip, r1
    return _pfb + ((row * _windows[winIdx].cellHeight * _windows[winIdx].yPixScale) + _windows[winIdx].tly) * _pitch + 
   35178:	e59e100c 	ldr	r1, [lr, #12]
            (col * _windows[winIdx].cellWidth * _windows[winIdx].xPixScale) + _windows[winIdx].tlx;
   3517c:	e5967b3c 	ldr	r7, [r6, #2876]	; 0xb3c
    return _pfb + ((row * _windows[winIdx].cellHeight * _windows[winIdx].yPixScale) + _windows[winIdx].tly) * _pitch + 
   35180:	e0231392 	mla	r3, r2, r3, r1
   35184:	e5961b34 	ldr	r1, [r6, #2868]	; 0xb34
    for (int y = 0; y < _windows[winIdx].cellHeight; y++) {
   35188:	e3500000 	cmp	r0, #0
            (col * _windows[winIdx].cellWidth * _windows[winIdx].xPixScale) + _windows[winIdx].tlx;
   3518c:	e023c391 	mla	r3, r1, r3, ip
   35190:	e0877003 	add	r7, r7, r3
    for (int y = 0; y < _windows[winIdx].cellHeight; y++) {
   35194:	d8bd8ff8 	pople	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   35198:	e3a08000 	mov	r8, #0
        for (int i = 0; i < _windows[winIdx].yPixScale; i++) {
   3519c:	e3520000 	cmp	r2, #0
   351a0:	da00001b 	ble	35214 <DisplayFX::screenWriteCell(int, int, int, unsigned char*)+0x148>
   351a4:	e3a00000 	mov	r0, #0
   351a8:	e59e3014 	ldr	r3, [lr, #20]
            for (int x = 0; x < _windows[winIdx].cellWidth; x++) {
   351ac:	e3530000 	cmp	r3, #0
   351b0:	da000012 	ble	35200 <DisplayFX::screenWriteCell(int, int, int, unsigned char*)+0x134>
   351b4:	e1a01007 	mov	r1, r7
   351b8:	e3a05000 	mov	r5, #0
   351bc:	e59e201c 	ldr	r2, [lr, #28]
                for (int j = 0; j < _windows[winIdx].xPixScale; j++) {
   351c0:	e3520000 	cmp	r2, #0
   351c4:	da000008 	ble	351ec <DisplayFX::screenWriteCell(int, int, int, unsigned char*)+0x120>
   351c8:	e1a03004 	mov	r3, r4
                    *pBufCur++ = *pCellBuf++;
   351cc:	e4d32001 	ldrb	r2, [r3], #1
   351d0:	e4c12001 	strb	r2, [r1], #1
                for (int j = 0; j < _windows[winIdx].xPixScale; j++) {
   351d4:	e59e201c 	ldr	r2, [lr, #28]
   351d8:	e043c004 	sub	ip, r3, r4
   351dc:	e152000c 	cmp	r2, ip
   351e0:	cafffff9 	bgt	351cc <DisplayFX::screenWriteCell(int, int, int, unsigned char*)+0x100>
                    *pBufCur++ = *pCellBuf++;
   351e4:	e1a04003 	mov	r4, r3
   351e8:	e59e3014 	ldr	r3, [lr, #20]
            for (int x = 0; x < _windows[winIdx].cellWidth; x++) {
   351ec:	e2855001 	add	r5, r5, #1
   351f0:	e1550003 	cmp	r5, r3
   351f4:	bafffff1 	blt	351c0 <DisplayFX::screenWriteCell(int, int, int, unsigned char*)+0xf4>
   351f8:	e59e2020 	ldr	r2, [lr, #32]
   351fc:	e5961b34 	ldr	r1, [r6, #2868]	; 0xb34
        for (int i = 0; i < _windows[winIdx].yPixScale; i++) {
   35200:	e2800001 	add	r0, r0, #1
   35204:	e1520000 	cmp	r2, r0
            pBuf += _pitch;
   35208:	e0877001 	add	r7, r7, r1
        for (int i = 0; i < _windows[winIdx].yPixScale; i++) {
   3520c:	caffffe6 	bgt	351ac <DisplayFX::screenWriteCell(int, int, int, unsigned char*)+0xe0>
   35210:	e59e0018 	ldr	r0, [lr, #24]
    for (int y = 0; y < _windows[winIdx].cellHeight; y++) {
   35214:	e2888001 	add	r8, r8, #1
   35218:	e1580000 	cmp	r8, r0
   3521c:	baffffde 	blt	3519c <DisplayFX::screenWriteCell(int, int, int, unsigned char*)+0xd0>
   35220:	e8bd8ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

00035224 <OTAUpdate::performUpdate(unsigned char const*, int)>:
#include <string.h>

static const char FromOTAUpdate[] = "OTAUpdate";

bool OTAUpdate::performUpdate(const uint8_t* pData, int dataLen)
{
   35224:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    lowlev_disable_irq();
    lowlev_disable_fiq();
    disable_mmu_and_cache();

    // Copy the blockCopyExecRelocatable() code to otaUpdateBuffer
    memcpy((void*)pCopyBlockNewLocation, (void*)lowlev_blockCopyExecRelocatable, lowlev_blockCopyExecRelocatableLen);
   35228:	e3a0564d 	mov	r5, #80740352	; 0x4d00000
{
   3522c:	e1a06001 	mov	r6, r1
   35230:	e1a08000 	mov	r8, r0
    uint8_t* pRxDataNewLocation = pCopyBlockNewLocation + lowlev_blockCopyExecRelocatableLen;
   35234:	e59f7074 	ldr	r7, [pc, #116]	; 352b0 <OTAUpdate::performUpdate(unsigned char const*, int)+0x8c>
{
   35238:	e24dd008 	sub	sp, sp, #8
    microsDelay(1000000);
   3523c:	e59f0070 	ldr	r0, [pc, #112]	; 352b4 <OTAUpdate::performUpdate(unsigned char const*, int)+0x90>
   35240:	eb000558 	bl	367a8 <microsDelay>
    uint8_t* pRxDataNewLocation = pCopyBlockNewLocation + lowlev_blockCopyExecRelocatableLen;
   35244:	e5974000 	ldr	r4, [r7]
    LogWrite(FromOTAUpdate, LOG_DEBUG, "Address of copyBlockFn %08x, len %d", pCopyBlockNewLocation, lowlev_blockCopyExecRelocatableLen);
   35248:	e1a03005 	mov	r3, r5
   3524c:	e59f2064 	ldr	r2, [pc, #100]	; 352b8 <OTAUpdate::performUpdate(unsigned char const*, int)+0x94>
   35250:	e3a01004 	mov	r1, #4
   35254:	e59f0060 	ldr	r0, [pc, #96]	; 352bc <OTAUpdate::performUpdate(unsigned char const*, int)+0x98>
   35258:	e58d4000 	str	r4, [sp]
   3525c:	ebffbbc5 	bl	24178 <LogWrite>
    uint8_t* pRxDataNewLocation = pCopyBlockNewLocation + lowlev_blockCopyExecRelocatableLen;
   35260:	e0844005 	add	r4, r4, r5
    lowlev_disable_irq();
   35264:	ebff4ba1 	bl	80f0 <lowlev_disable_irq>
    lowlev_disable_fiq();
   35268:	ebff4ba6 	bl	8108 <lowlev_disable_fiq>
    disable_mmu_and_cache();
   3526c:	ebff4bb5 	bl	8148 <disable_mmu_and_cache>
    memcpy((void*)pCopyBlockNewLocation, (void*)lowlev_blockCopyExecRelocatable, lowlev_blockCopyExecRelocatableLen);
   35270:	e5972000 	ldr	r2, [r7]
   35274:	e1a00005 	mov	r0, r5
   35278:	e59f1040 	ldr	r1, [pc, #64]	; 352c0 <OTAUpdate::performUpdate(unsigned char const*, int)+0x9c>
   3527c:	eb005eb9 	bl	4cd68 <memcpy>

    // Copy the received data to otaUpdateBuffer
    memcpy((void*)pRxDataNewLocation, (void*)pData, dataLen);
   35280:	e1a02006 	mov	r2, r6
   35284:	e1a01008 	mov	r1, r8
   35288:	e1a00004 	mov	r0, r4
   3528c:	eb005eb5 	bl	4cd68 <memcpy>
    // Access the copyblock function in it's new location
    lowlev_blockCopyExecRelocatableFnT* pCopyBlockFn = (lowlev_blockCopyExecRelocatableFnT*) pCopyBlockNewLocation;

    // Call the copyBlock function in its new location using it to move the program
    // to 0x8000 the base address for Pi programs
    (*pCopyBlockFn) ((uint8_t*)0x8000, pRxDataNewLocation, dataLen, (uint8_t*)0x8000);
   35290:	e3a03902 	mov	r3, #32768	; 0x8000
   35294:	e1a01004 	mov	r1, r4
   35298:	e1a02006 	mov	r2, r6
   3529c:	e1a00003 	mov	r0, r3
   352a0:	e12fff35 	blx	r5
    //         diffs++;
    // }
    // LogWrite(FromOTAUpdate, LOG_DEBUG, "Num diffs %d", diffs);
    // Should actually never return
    return true;
}
   352a4:	e3a00001 	mov	r0, #1
   352a8:	e28dd008 	add	sp, sp, #8
   352ac:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   352b0:	0000823c 	.word	0x0000823c
   352b4:	000f4240 	.word	0x000f4240
   352b8:	000555dc 	.word	0x000555dc
   352bc:	000555d0 	.word	0x000555d0
   352c0:	00008220 	.word	0x00008220

000352c4 <convModeToVal>:
#include "BCM2835.h"
#include "LowLev.h"
#include "LowLib.h"

uint8_t convModeToVal(uint8_t mode)
{
   352c4:	e2400001 	sub	r0, r0, #1
   352c8:	e6ef0070 	uxtb	r0, r0
   352cc:	e3500008 	cmp	r0, #8
   352d0:	959f3008 	ldrls	r3, [pc, #8]	; 352e0 <convModeToVal+0x1c>
   352d4:	97d30000 	ldrbls	r0, [r3, r0]
   352d8:	83a00000 	movhi	r0, #0
        return 3;
    case PINMODE_ALT5:
        return 2;
    }
    return 0;
}
   352dc:	e12fff1e 	bx	lr
   352e0:	00055600 	.word	0x00055600

000352e4 <pinMode>:

void pinMode(uint8_t pin, uint8_t mode)
{
   352e4:	e92d4070 	push	{r4, r5, r6, lr}
    uint32_t gpfSelReg = ARM_GPIO_GPFSEL0 + (pin / 10) * 4;
    uint8_t bitPos = ((pin - ((pin / 10) * 10)) % 10) * 3;
    uint32_t regVal = RD32(gpfSelReg);
    regVal &= ~(7 << bitPos);
   352e8:	e3a0e007 	mov	lr, #7
    uint32_t gpfSelReg = ARM_GPIO_GPFSEL0 + (pin / 10) * 4;
   352ec:	e59f20e8 	ldr	r2, [pc, #232]	; 353dc <pinMode+0xf8>
    uint8_t bitPos = ((pin - ((pin / 10) * 10)) % 10) * 3;
   352f0:	e59f40e8 	ldr	r4, [pc, #232]	; 353e0 <pinMode+0xfc>
    uint32_t gpfSelReg = ARM_GPIO_GPFSEL0 + (pin / 10) * 4;
   352f4:	e0832290 	umull	r2, r3, r0, r2
   352f8:	e1a021a3 	lsr	r2, r3, #3
   352fc:	e6ef2072 	uxtb	r2, r2
    uint8_t bitPos = ((pin - ((pin / 10) * 10)) % 10) * 3;
   35300:	e0623e82 	rsb	r3, r2, r2, lsl #29
   35304:	e0623103 	rsb	r3, r2, r3, lsl #2
   35308:	e0803083 	add	r3, r0, r3, lsl #1
   3530c:	e0c54493 	smull	r4, r5, r3, r4
   35310:	e1a0cfc3 	asr	ip, r3, #31
    uint32_t gpfSelReg = ARM_GPIO_GPFSEL0 + (pin / 10) * 4;
   35314:	e2822302 	add	r2, r2, #134217728	; 0x8000000
    uint8_t bitPos = ((pin - ((pin / 10) * 10)) % 10) * 3;
   35318:	e06cc145 	rsb	ip, ip, r5, asr #2
   3531c:	e08cc10c 	add	ip, ip, ip, lsl #2
    uint32_t gpfSelReg = ARM_GPIO_GPFSEL0 + (pin / 10) * 4;
   35320:	e2822702 	add	r2, r2, #524288	; 0x80000
    uint8_t bitPos = ((pin - ((pin / 10) * 10)) % 10) * 3;
   35324:	e043308c 	sub	r3, r3, ip, lsl #1
   35328:	e2411001 	sub	r1, r1, #1
    uint32_t gpfSelReg = ARM_GPIO_GPFSEL0 + (pin / 10) * 4;
   3532c:	e1a02102 	lsl	r2, r2, #2
   35330:	e6ef1071 	uxtb	r1, r1
    uint8_t bitPos = ((pin - ((pin / 10) * 10)) % 10) * 3;
   35334:	e0833083 	add	r3, r3, r3, lsl #1
    uint32_t regVal = RD32(gpfSelReg);
   35338:	e592c000 	ldr	ip, [r2]
    regVal &= ~(7 << bitPos);
   3533c:	e6ef3073 	uxtb	r3, r3
   35340:	e3510008 	cmp	r1, #8
   35344:	e1cce31e 	bic	lr, ip, lr, lsl r3
   35348:	8a000017 	bhi	353ac <pinMode+0xc8>
   3534c:	e59fc090 	ldr	ip, [pc, #144]	; 353e4 <pinMode+0x100>
   35350:	e7dc1001 	ldrb	r1, [ip, r1]
    uint8_t modeVal = convModeToVal(mode);
    regVal |= (modeVal & 0x0f) << bitPos;
   35354:	e201c00f 	and	ip, r1, #15
   35358:	e18ee31c 	orr	lr, lr, ip, lsl r3
    WR32(gpfSelReg, regVal);
    // Check for pull-up / pull-down
    if ((modeVal & 0xf0) != 0) {
   3535c:	e31100f0 	tst	r1, #240	; 0xf0
    WR32(gpfSelReg, regVal);
   35360:	e582e000 	str	lr, [r2]
    if ((modeVal & 0xf0) != 0) {
   35364:	08bd8070 	popeq	{r4, r5, r6, pc}
   35368:	e1a04000 	mov	r4, r0
        WR32(ARM_GPIO_GPPUD, modeVal >> 4);
   3536c:	e59f5074 	ldr	r5, [pc, #116]	; 353e8 <pinMode+0x104>
   35370:	e1a01241 	asr	r1, r1, #4
   35374:	e5851094 	str	r1, [r5, #148]	; 0x94
        lowlev_cycleDelay(150);
   35378:	e3a00096 	mov	r0, #150	; 0x96
   3537c:	ebff4b63 	bl	8110 <lowlev_cycleDelay>
        if (pin < 32)
   35380:	e354001f 	cmp	r4, #31
   35384:	8a00000a 	bhi	353b4 <pinMode+0xd0>
            WR32(ARM_GPIO_GPPUDCLK0, 1 << pin);
   35388:	e3a00001 	mov	r0, #1
   3538c:	e1a00410 	lsl	r0, r0, r4
   35390:	e5850098 	str	r0, [r5, #152]	; 0x98
        else
            WR32(ARM_GPIO_GPPUDCLK1, 1 << (pin - 32));
        lowlev_cycleDelay(150);
   35394:	e3a00096 	mov	r0, #150	; 0x96
   35398:	ebff4b5c 	bl	8110 <lowlev_cycleDelay>
        WR32(ARM_GPIO_GPPUD, 0);
   3539c:	e3a03000 	mov	r3, #0
   353a0:	e5853094 	str	r3, [r5, #148]	; 0x94
        if (pin < 32)
            WR32(ARM_GPIO_GPPUDCLK0, 0);
   353a4:	e5853098 	str	r3, [r5, #152]	; 0x98
   353a8:	e8bd8070 	pop	{r4, r5, r6, pc}
    WR32(gpfSelReg, regVal);
   353ac:	e582e000 	str	lr, [r2]
        else
            WR32(ARM_GPIO_GPPUDCLK1, 0);
    }
}
   353b0:	e8bd8070 	pop	{r4, r5, r6, pc}
            WR32(ARM_GPIO_GPPUDCLK1, 1 << (pin - 32));
   353b4:	e3a03001 	mov	r3, #1
   353b8:	e2440020 	sub	r0, r4, #32
   353bc:	e1a00013 	lsl	r0, r3, r0
   353c0:	e585009c 	str	r0, [r5, #156]	; 0x9c
        lowlev_cycleDelay(150);
   353c4:	e3a00096 	mov	r0, #150	; 0x96
   353c8:	ebff4b50 	bl	8110 <lowlev_cycleDelay>
        WR32(ARM_GPIO_GPPUD, 0);
   353cc:	e3a03000 	mov	r3, #0
   353d0:	e5853094 	str	r3, [r5, #148]	; 0x94
            WR32(ARM_GPIO_GPPUDCLK1, 0);
   353d4:	e585309c 	str	r3, [r5, #156]	; 0x9c
}
   353d8:	e8bd8070 	pop	{r4, r5, r6, pc}
   353dc:	cccccccd 	.word	0xcccccccd
   353e0:	66666667 	.word	0x66666667
   353e4:	00055600 	.word	0x00055600
   353e8:	20200000 	.word	0x20200000

000353ec <digitalWrite>:

void digitalWrite(uint8_t pin, int val)
{
    if (val) {
   353ec:	e3510000 	cmp	r1, #0
        if (pin < 32)
            WR32(ARM_GPIO_GPSET0, 1 << pin);
   353f0:	e3a03001 	mov	r3, #1
    if (val) {
   353f4:	0a000008 	beq	3541c <digitalWrite+0x30>
        if (pin < 32)
   353f8:	e350001f 	cmp	r0, #31
        else
            WR32(ARM_GPIO_GPSET1, 1 << (pin - 32));
   353fc:	82400020 	subhi	r0, r0, #32
            WR32(ARM_GPIO_GPSET0, 1 << pin);
   35400:	959f2038 	ldrls	r2, [pc, #56]	; 35440 <digitalWrite+0x54>
            WR32(ARM_GPIO_GPSET1, 1 << (pin - 32));
   35404:	859f2034 	ldrhi	r2, [pc, #52]	; 35440 <digitalWrite+0x54>
            WR32(ARM_GPIO_GPSET0, 1 << pin);
   35408:	91a00013 	lslls	r0, r3, r0
            WR32(ARM_GPIO_GPSET1, 1 << (pin - 32));
   3540c:	81a00013 	lslhi	r0, r3, r0
            WR32(ARM_GPIO_GPSET0, 1 << pin);
   35410:	9582001c 	strls	r0, [r2, #28]
            WR32(ARM_GPIO_GPSET1, 1 << (pin - 32));
   35414:	85820020 	strhi	r0, [r2, #32]
   35418:	e12fff1e 	bx	lr
    } else {
        if (pin < 32)
   3541c:	e350001f 	cmp	r0, #31
            WR32(ARM_GPIO_GPCLR0, 1 << pin);
        else
            WR32(ARM_GPIO_GPCLR1, 1 << (pin - 32));
   35420:	82400020 	subhi	r0, r0, #32
            WR32(ARM_GPIO_GPCLR0, 1 << pin);
   35424:	959f2014 	ldrls	r2, [pc, #20]	; 35440 <digitalWrite+0x54>
            WR32(ARM_GPIO_GPCLR1, 1 << (pin - 32));
   35428:	859f2010 	ldrhi	r2, [pc, #16]	; 35440 <digitalWrite+0x54>
            WR32(ARM_GPIO_GPCLR0, 1 << pin);
   3542c:	91a00013 	lslls	r0, r3, r0
            WR32(ARM_GPIO_GPCLR1, 1 << (pin - 32));
   35430:	81a00013 	lslhi	r0, r3, r0
            WR32(ARM_GPIO_GPCLR0, 1 << pin);
   35434:	95820028 	strls	r0, [r2, #40]	; 0x28
            WR32(ARM_GPIO_GPCLR1, 1 << (pin - 32));
   35438:	8582002c 	strhi	r0, [r2, #44]	; 0x2c
    }
}
   3543c:	e12fff1e 	bx	lr
   35440:	20200000 	.word	0x20200000

00035444 <digitalRead>:

int digitalRead(uint8_t pin)
{
    if (pin < 32)
   35444:	e350001f 	cmp	r0, #31
        return ((RD32(ARM_GPIO_GPLEV0) >> pin) & 0x01) != 0;
   35448:	959f301c 	ldrls	r3, [pc, #28]	; 3546c <digitalRead+0x28>
    return ((RD32(ARM_GPIO_GPLEV1) >> (pin - 32)) & 0x01) != 0;
   3544c:	859f2018 	ldrhi	r2, [pc, #24]	; 3546c <digitalRead+0x28>
   35450:	82403020 	subhi	r3, r0, #32
        return ((RD32(ARM_GPIO_GPLEV0) >> pin) & 0x01) != 0;
   35454:	95933034 	ldrls	r3, [r3, #52]	; 0x34
    return ((RD32(ARM_GPIO_GPLEV1) >> (pin - 32)) & 0x01) != 0;
   35458:	85920038 	ldrhi	r0, [r2, #56]	; 0x38
        return ((RD32(ARM_GPIO_GPLEV0) >> pin) & 0x01) != 0;
   3545c:	91a00033 	lsrls	r0, r3, r0
    return ((RD32(ARM_GPIO_GPLEV1) >> (pin - 32)) & 0x01) != 0;
   35460:	81a00330 	lsrhi	r0, r0, r3
   35464:	e2000001 	and	r0, r0, #1
   35468:	e12fff1e 	bx	lr
   3546c:	20200000 	.word	0x20200000

00035470 <operator new(unsigned int)>:

#include "RdStdCpp.h"
#include "../System/nmalloc.h"

void* operator new(size_t sz) {
    return nmalloc_malloc(sz);
   35470:	eaffbc27 	b	24514 <nmalloc_malloc>

00035474 <operator new[](unsigned int)>:
   35474:	eaffbc26 	b	24514 <nmalloc_malloc>

00035478 <operator delete(void*)>:
void* operator new[](size_t sz) {
    return nmalloc_malloc(sz);
}

void operator delete(void* ptr) noexcept
{
   35478:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   3547c:	e24dd00c 	sub	sp, sp, #12
   35480:	e28d3008 	add	r3, sp, #8
   35484:	e5230004 	str	r0, [r3, #-4]!
    nmalloc_free(&ptr);
   35488:	e1a00003 	mov	r0, r3
   3548c:	ebffbc5d 	bl	24608 <nmalloc_free>
}
   35490:	e28dd00c 	add	sp, sp, #12
   35494:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

00035498 <operator delete[](void*)>:
   35498:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   3549c:	e24dd00c 	sub	sp, sp, #12
   354a0:	e28d3008 	add	r3, sp, #8
   354a4:	e5230004 	str	r0, [r3, #-4]!
   354a8:	e1a00003 	mov	r0, r3
   354ac:	ebffbc55 	bl	24608 <nmalloc_free>
   354b0:	e28dd00c 	add	sp, sp, #12
   354b4:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

000354b8 <operator delete(void*, unsigned int)>:
{
    nmalloc_free(&ptr);
}

void operator delete(void* ptr, [[maybe_unused]] size_t nSize) noexcept
{
   354b8:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   354bc:	e24dd00c 	sub	sp, sp, #12
   354c0:	e28d3008 	add	r3, sp, #8
   354c4:	e5230004 	str	r0, [r3, #-4]!
    nmalloc_free(&ptr);
   354c8:	e1a00003 	mov	r0, r3
   354cc:	ebffbc4d 	bl	24608 <nmalloc_free>
}
   354d0:	e28dd00c 	add	sp, sp, #12
   354d4:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

000354d8 <operator delete[](void*, unsigned int)>:
   354d8:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   354dc:	e24dd00c 	sub	sp, sp, #12
   354e0:	e28d3008 	add	r3, sp, #8
   354e4:	e5230004 	str	r0, [r3, #-4]!
   354e8:	e1a00003 	mov	r0, r3
   354ec:	ebffbc45 	bl	24608 <nmalloc_free>
   354f0:	e28dd00c 	add	sp, sp, #12
   354f4:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

000354f8 <UartMaxi::isrStatic(void*)>:
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ISR
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void UartMaxi::isrStatic(void* pParam)
{
   354f8:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
	pStatic->isr();
}

void UartMaxi::isr()
{
    PeripheralEntry();
   354fc:	e3a0c000 	mov	ip, #0
   35500:	ee07cf9a 	mcr	15, 0, ip, cr7, cr10, {4}
#ifdef USE_PI_SPI0_CE0_AS_DEBUG_PIN
    digitalWrite(DEBUG_PI_SPI0_CE0, 1);
#endif

	// acknowledge pending interrupts
	WR32(ARM_UART0_ICR, RD32(ARM_UART0_MIS));
   35504:	e59f31b0 	ldr	r3, [pc, #432]	; 356bc <UartMaxi::isrStatic(void*)+0x1c4>
		else if (nDR & UART0_DR_FE_MASK)
		{
            // Check for framing error
            _rxFramingErrCount++;
			if (_nRxStatus == UART_ERROR_NONE)
				_nRxStatus = UART_ERROR_FRAMING;
   35508:	e3a06003 	mov	r6, #3
	while (!(RD32(ARM_UART0_FR) & UART0_FR_RXFE_MASK))
   3550c:	e1a01003 	mov	r1, r3
				_nRxStatus = UART_ERROR_OVERRUN;
   35510:	e3a05002 	mov	r5, #2
				_nRxStatus = UART_ERROR_BREAK;
   35514:	e3a04001 	mov	r4, #1
		else
		{
            // Record buffer full error
            _rxBufferFullCount++;
			if (_nRxStatus == UART_ERROR_NONE)
				_nRxStatus = UART_ERROR_FULL;
   35518:	e3a0e004 	mov	lr, #4
	WR32(ARM_UART0_ICR, RD32(ARM_UART0_MIS));
   3551c:	e5932040 	ldr	r2, [r3, #64]	; 0x40
   35520:	e5832044 	str	r2, [r3, #68]	; 0x44
	while (!(RD32(ARM_UART0_FR) & UART0_FR_RXFE_MASK))
   35524:	e5913018 	ldr	r3, [r1, #24]
   35528:	e3130010 	tst	r3, #16
   3552c:	1a000027 	bne	355d0 <UartMaxi::isrStatic(void*)+0xd8>
		uint32_t nDR = RD32(ARM_UART0_DR);
   35530:	e5913000 	ldr	r3, [r1]
		if (nDR & UART0_DR_BE_MASK)
   35534:	e3130b01 	tst	r3, #1024	; 0x400
   35538:	0a000048 	beq	35660 <UartMaxi::isrStatic(void*)+0x168>
            _rxBreakCount++;
   3553c:	e590201c 	ldr	r2, [r0, #28]
			if (_nRxStatus == UART_ERROR_NONE)
   35540:	e5d07010 	ldrb	r7, [r0, #16]
            _rxBreakCount++;
   35544:	e2822001 	add	r2, r2, #1
			if (_nRxStatus == UART_ERROR_NONE)
   35548:	e3570000 	cmp	r7, #0
            _rxBreakCount++;
   3554c:	e580201c 	str	r2, [r0, #28]
				_nRxStatus = UART_ERROR_BREAK;
   35550:	05c04010 	strbeq	r4, [r0, #16]
        if (_bufLen == 0)
   35554:	e590200c 	ldr	r2, [r0, #12]
   35558:	e3520000 	cmp	r2, #0
   3555c:	0a000038 	beq	35644 <UartMaxi::isrStatic(void*)+0x14c>
        if (_putPos == _getPos)
   35560:	e5908004 	ldr	r8, [r0, #4]
   35564:	e5907008 	ldr	r7, [r0, #8]
   35568:	e1580007 	cmp	r8, r7
   3556c:	0a000008 	beq	35594 <UartMaxi::isrStatic(void*)+0x9c>
        unsigned int gp = _getPos;
   35570:	e5907008 	ldr	r7, [r0, #8]
        if (_putPos > gp)
   35574:	e5908004 	ldr	r8, [r0, #4]
   35578:	e1570008 	cmp	r7, r8
   3557c:	2a00002c 	bcs	35634 <UartMaxi::isrStatic(void*)+0x13c>
            if ((_putPos != _bufLen - 1) || (gp != 0))
   35580:	e5908004 	ldr	r8, [r0, #4]
   35584:	e2422001 	sub	r2, r2, #1
   35588:	e3570000 	cmp	r7, #0
   3558c:	01520008 	cmpeq	r2, r8
   35590:	0a00002b 	beq	35644 <UartMaxi::isrStatic(void*)+0x14c>
    	if (_rxBufferPosn.canPut() && _pRxBuffer)
   35594:	e5902000 	ldr	r2, [r0]
   35598:	e3520000 	cmp	r2, #0
   3559c:	0a000028 	beq	35644 <UartMaxi::isrStatic(void*)+0x14c>
        return _putPos;
   355a0:	e5907004 	ldr	r7, [r0, #4]
			_pRxBuffer[_rxBufferPosn.posToPut()] = nDR & 0xFF;
   355a4:	e7c23007 	strb	r3, [r2, r7]
        _putPos++;
   355a8:	e5903004 	ldr	r3, [r0, #4]
        if (_putPos >= _bufLen)
   355ac:	e590200c 	ldr	r2, [r0, #12]
        _putPos++;
   355b0:	e2833001 	add	r3, r3, #1
   355b4:	e5803004 	str	r3, [r0, #4]
        if (_putPos >= _bufLen)
   355b8:	e5903004 	ldr	r3, [r0, #4]
   355bc:	e1530002 	cmp	r3, r2
            _putPos = 0;
   355c0:	2580c004 	strcs	ip, [r0, #4]
	while (!(RD32(ARM_UART0_FR) & UART0_FR_RXFE_MASK))
   355c4:	e5913018 	ldr	r3, [r1, #24]
   355c8:	e3130010 	tst	r3, #16
   355cc:	0affffd7 	beq	35530 <UartMaxi::isrStatic(void*)+0x38>
		}
	}

    // Check the tx fifo 
	while (!(RD32(ARM_UART0_FR) & UART0_FR_TXFF_MASK))
   355d0:	e59f10e4 	ldr	r1, [pc, #228]	; 356bc <UartMaxi::isrStatic(void*)+0x1c4>
   355d4:	ea000010 	b	3561c <UartMaxi::isrStatic(void*)+0x124>
        return _putPos != _getPos;
   355d8:	e590c028 	ldr	ip, [r0, #40]	; 0x28
   355dc:	e590202c 	ldr	r2, [r0, #44]	; 0x2c
	{
        // FIFO is not full
		if (_txBufferPosn.canGet() && _pTxBuffer)
   355e0:	e15c0002 	cmp	ip, r2
   355e4:	0a00002f 	beq	356a8 <UartMaxi::isrStatic(void*)+0x1b0>
   355e8:	e5902024 	ldr	r2, [r0, #36]	; 0x24
   355ec:	e3520000 	cmp	r2, #0
   355f0:	0a00002c 	beq	356a8 <UartMaxi::isrStatic(void*)+0x1b0>
        return _getPos;
   355f4:	e590c02c 	ldr	ip, [r0, #44]	; 0x2c
		{
            // Tx buffer has some chars to tx so add one to the FIFO
			WR32(ARM_UART0_DR, _pTxBuffer[_txBufferPosn.posToGet()]);
   355f8:	e7d2200c 	ldrb	r2, [r2, ip]
   355fc:	e5812000 	str	r2, [r1]
        _getPos++;
   35600:	e590202c 	ldr	r2, [r0, #44]	; 0x2c
        if (_getPos >= _bufLen)
   35604:	e590c030 	ldr	ip, [r0, #48]	; 0x30
        _getPos++;
   35608:	e2822001 	add	r2, r2, #1
   3560c:	e580202c 	str	r2, [r0, #44]	; 0x2c
        if (_getPos >= _bufLen)
   35610:	e590202c 	ldr	r2, [r0, #44]	; 0x2c
   35614:	e152000c 	cmp	r2, ip
            _getPos = 0;
   35618:	2580302c 	strcs	r3, [r0, #44]	; 0x2c
	while (!(RD32(ARM_UART0_FR) & UART0_FR_TXFF_MASK))
   3561c:	e5913018 	ldr	r3, [r1, #24]
   35620:	e2133020 	ands	r3, r3, #32
   35624:	0affffeb 	beq	355d8 <UartMaxi::isrStatic(void*)+0xe0>
    // Debug
#ifdef USE_PI_SPI0_CE0_AS_DEBUG_PIN
    digitalWrite(DEBUG_PI_SPI0_CE0, 0);
#endif

    PeripheralExit();
   35628:	e3a03000 	mov	r3, #0
   3562c:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
}
   35630:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
            if (gp - _putPos > 1)
   35634:	e5902004 	ldr	r2, [r0, #4]
   35638:	e0477002 	sub	r7, r7, r2
   3563c:	e3570001 	cmp	r7, #1
   35640:	8affffd3 	bhi	35594 <UartMaxi::isrStatic(void*)+0x9c>
            _rxBufferFullCount++;
   35644:	e5903020 	ldr	r3, [r0, #32]
			if (_nRxStatus == UART_ERROR_NONE)
   35648:	e5d02010 	ldrb	r2, [r0, #16]
            _rxBufferFullCount++;
   3564c:	e2833001 	add	r3, r3, #1
			if (_nRxStatus == UART_ERROR_NONE)
   35650:	e3520000 	cmp	r2, #0
            _rxBufferFullCount++;
   35654:	e5803020 	str	r3, [r0, #32]
				_nRxStatus = UART_ERROR_FULL;
   35658:	05c0e010 	strbeq	lr, [r0, #16]
   3565c:	eaffffb0 	b	35524 <UartMaxi::isrStatic(void*)+0x2c>
		else if (nDR & UART0_DR_OE_MASK)
   35660:	e3130b02 	tst	r3, #2048	; 0x800
   35664:	0a000006 	beq	35684 <UartMaxi::isrStatic(void*)+0x18c>
            _rxOverrunErrCount++;
   35668:	e5902018 	ldr	r2, [r0, #24]
			if (_nRxStatus == UART_ERROR_NONE)
   3566c:	e5d07010 	ldrb	r7, [r0, #16]
            _rxOverrunErrCount++;
   35670:	e2822001 	add	r2, r2, #1
			if (_nRxStatus == UART_ERROR_NONE)
   35674:	e3570000 	cmp	r7, #0
            _rxOverrunErrCount++;
   35678:	e5802018 	str	r2, [r0, #24]
				_nRxStatus = UART_ERROR_OVERRUN;
   3567c:	05c05010 	strbeq	r5, [r0, #16]
   35680:	eaffffb3 	b	35554 <UartMaxi::isrStatic(void*)+0x5c>
		else if (nDR & UART0_DR_FE_MASK)
   35684:	e3130c01 	tst	r3, #256	; 0x100
   35688:	0affffb1 	beq	35554 <UartMaxi::isrStatic(void*)+0x5c>
            _rxFramingErrCount++;
   3568c:	e5902014 	ldr	r2, [r0, #20]
			if (_nRxStatus == UART_ERROR_NONE)
   35690:	e5d07010 	ldrb	r7, [r0, #16]
            _rxFramingErrCount++;
   35694:	e2822001 	add	r2, r2, #1
			if (_nRxStatus == UART_ERROR_NONE)
   35698:	e3570000 	cmp	r7, #0
            _rxFramingErrCount++;
   3569c:	e5802014 	str	r2, [r0, #20]
				_nRxStatus = UART_ERROR_FRAMING;
   356a0:	05c06010 	strbeq	r6, [r0, #16]
   356a4:	eaffffaa 	b	35554 <UartMaxi::isrStatic(void*)+0x5c>
			WR32(ARM_UART0_IMSC, RD32(ARM_UART0_IMSC) & ~UART0_INT_TX);
   356a8:	e59f200c 	ldr	r2, [pc, #12]	; 356bc <UartMaxi::isrStatic(void*)+0x1c4>
   356ac:	e5923038 	ldr	r3, [r2, #56]	; 0x38
   356b0:	e3c33020 	bic	r3, r3, #32
   356b4:	e5823038 	str	r3, [r2, #56]	; 0x38
   356b8:	eaffffda 	b	35628 <UartMaxi::isrStatic(void*)+0x130>
   356bc:	20201000 	.word	0x20201000

000356c0 <UartMaxi::UartMaxi()>:
        _bufLen = maxLen;
   356c0:	e3a02000 	mov	r2, #0
        _putPos = 0;
   356c4:	e5802004 	str	r2, [r0, #4]
        _bufLen = maxLen;
   356c8:	e580200c 	str	r2, [r0, #12]
        _getPos = 0;
   356cc:	e5802008 	str	r2, [r0, #8]
        _bufLen = maxLen;
   356d0:	e5802030 	str	r2, [r0, #48]	; 0x30
        _putPos = 0;
   356d4:	e5802028 	str	r2, [r0, #40]	; 0x28
    _pRxBuffer = NULL;
   356d8:	e5802000 	str	r2, [r0]
        _getPos = 0;
   356dc:	e580202c 	str	r2, [r0, #44]	; 0x2c
    _pTxBuffer = NULL;
   356e0:	e5802024 	str	r2, [r0, #36]	; 0x24
    _nRxStatus = UART_ERROR_NONE;
   356e4:	e5c02010 	strb	r2, [r0, #16]
        rxBreakCount = _rxBreakCount;
        rxBufferFullCount = _rxBufferFullCount;
    }
    void resetStatusCounts()
    {
        _txBufferFullCount = 0;
   356e8:	e5802034 	str	r2, [r0, #52]	; 0x34
        _rxFramingErrCount = 0;
   356ec:	e5802014 	str	r2, [r0, #20]
        _rxOverrunErrCount = 0;
   356f0:	e5802018 	str	r2, [r0, #24]
        _rxBreakCount = 0;
   356f4:	e580201c 	str	r2, [r0, #28]
        _rxBufferFullCount = 0;
   356f8:	e5802020 	str	r2, [r0, #32]
}
   356fc:	e12fff1e 	bx	lr

00035700 <UartMaxi::~UartMaxi()>:
UartMaxi::~UartMaxi()
   35700:	e92d4010 	push	{r4, lr}
    PeripheralEntry();
   35704:	e3a03000 	mov	r3, #0
UartMaxi::~UartMaxi()
   35708:	e1a04000 	mov	r4, r0
    PeripheralEntry();
   3570c:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
    WR32(ARM_UART0_IMSC, 0);
   35710:	e59f2040 	ldr	r2, [pc, #64]	; 35758 <UartMaxi::~UartMaxi()+0x58>
   35714:	e5823038 	str	r3, [r2, #56]	; 0x38
    WR32(ARM_UART0_CR, 0);
   35718:	e5823030 	str	r3, [r2, #48]	; 0x30
    PeripheralExit();
   3571c:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
    CInterrupts::disconnectIRQ(ARM_IRQ_UART);
   35720:	e3a00039 	mov	r0, #57	; 0x39
   35724:	ebfff490 	bl	3296c <CInterrupts::disconnectIRQ(unsigned int)>
    if (_pRxBuffer)
   35728:	e5943000 	ldr	r3, [r4]
   3572c:	e3530000 	cmp	r3, #0
   35730:	0a000001 	beq	3573c <UartMaxi::~UartMaxi()+0x3c>
        nmalloc_free((void**)&_pRxBuffer);
   35734:	e1a00004 	mov	r0, r4
   35738:	ebffbbb2 	bl	24608 <nmalloc_free>
    if (_pTxBuffer)
   3573c:	e5943024 	ldr	r3, [r4, #36]	; 0x24
   35740:	e3530000 	cmp	r3, #0
   35744:	0a000001 	beq	35750 <UartMaxi::~UartMaxi()+0x50>
        nmalloc_free((void**)&_pTxBuffer);
   35748:	e2840024 	add	r0, r4, #36	; 0x24
   3574c:	ebffbbad 	bl	24608 <nmalloc_free>
}
   35750:	e1a00004 	mov	r0, r4
   35754:	e8bd8010 	pop	{r4, pc}
   35758:	20201000 	.word	0x20201000

0003575c <UartMaxi::setup(unsigned int, int, int)>:
{
   3575c:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   35760:	e24dd014 	sub	sp, sp, #20
   35764:	e1a08002 	mov	r8, r2
   35768:	e1a09003 	mov	r9, r3
   3576c:	e1a06001 	mov	r6, r1
   35770:	e1a04000 	mov	r4, r0
    uint32_t FUARTCLK_MAX = CMachineInfo::Get ()->GetMaxClockRate (CLOCK_ID_UART);
   35774:	eb000588 	bl	36d9c <CMachineInfo::Get()>
   35778:	e3a01002 	mov	r1, #2
   3577c:	eb000525 	bl	36c18 <CMachineInfo::GetMaxClockRate(unsigned long) const>
   35780:	e1a0b000 	mov	fp, r0
    CMachineInfo::Get ()->SetClockRate (CLOCK_ID_UART, 16000000, true);
   35784:	eb000584 	bl	36d9c <CMachineInfo::Get()>
   35788:	e3a03001 	mov	r3, #1
   3578c:	e59f21c4 	ldr	r2, [pc, #452]	; 35958 <UartMaxi::setup(unsigned int, int, int)+0x1fc>
   35790:	e3a01002 	mov	r1, #2
   35794:	eb000560 	bl	36d1c <CMachineInfo::SetClockRate(unsigned long, unsigned int, bool)>
    uint32_t FUARTCLK = CMachineInfo::Get ()->GetClockRate (CLOCK_ID_UART);
   35798:	eb00057f 	bl	36d9c <CMachineInfo::Get()>
   3579c:	e3a01002 	mov	r1, #2
   357a0:	eb000531 	bl	36c6c <CMachineInfo::GetClockRate(unsigned long) const>
	uint32_t baudRateX16 = baudRate * 16;
   357a4:	e1a05206 	lsl	r5, r6, #4
   357a8:	e1a01005 	mov	r1, r5
    uint32_t FUARTCLK = CMachineInfo::Get ()->GetClockRate (CLOCK_ID_UART);
   357ac:	e1a0a000 	mov	sl, r0
   357b0:	eb0064bc 	bl	4eaa8 <__aeabi_uidivmod>
    if ((intBaudDivisor < 1) || (intBaudDivisor > 0xffff))
   357b4:	e59f31a0 	ldr	r3, [pc, #416]	; 3595c <UartMaxi::setup(unsigned int, int, int)+0x200>
   357b8:	e2402001 	sub	r2, r0, #1
   357bc:	e1520003 	cmp	r2, r3
   357c0:	e1a07000 	mov	r7, r0
   357c4:	8a000059 	bhi	35930 <UartMaxi::setup(unsigned int, int, int)+0x1d4>
    unsigned fracBaudDivisor2 = (FUARTCLK % baudRateX16) * 8 / baudRate;
   357c8:	e1a00181 	lsl	r0, r1, #3
   357cc:	e1a01006 	mov	r1, r6
   357d0:	eb006477 	bl	4e9b4 <__udivsi3>
	unsigned fracBaudDivisor = fracBaudDivisor2 / 2 + fracBaudDivisor2 % 2;
   357d4:	e2005001 	and	r5, r0, #1
   357d8:	e08550a0 	add	r5, r5, r0, lsr #1
    if (fracBaudDivisor > 0x3f)
   357dc:	e355003f 	cmp	r5, #63	; 0x3f
   357e0:	8a000047 	bhi	35904 <UartMaxi::setup(unsigned int, int, int)+0x1a8>
    LogWrite(FromUartMaxi, LOG_VERBOSE, "Baud rate %d (%d:%d)\n",
   357e4:	e1a03006 	mov	r3, r6
   357e8:	e58d5004 	str	r5, [sp, #4]
   357ec:	e58d7000 	str	r7, [sp]
   357f0:	e59f2168 	ldr	r2, [pc, #360]	; 35960 <UartMaxi::setup(unsigned int, int, int)+0x204>
   357f4:	e3a01005 	mov	r1, #5
   357f8:	e59f0164 	ldr	r0, [pc, #356]	; 35964 <UartMaxi::setup(unsigned int, int, int)+0x208>
   357fc:	ebffba5d 	bl	24178 <LogWrite>
    if (_pRxBuffer)
   35800:	e5943000 	ldr	r3, [r4]
   35804:	e3530000 	cmp	r3, #0
   35808:	0a000001 	beq	35814 <UartMaxi::setup(unsigned int, int, int)+0xb8>
        nmalloc_free((void**)&_pRxBuffer);
   3580c:	e1a00004 	mov	r0, r4
   35810:	ebffbb7c 	bl	24608 <nmalloc_free>
    _pRxBuffer = NULL;
   35814:	e3a02000 	mov	r2, #0
    if (_pTxBuffer)
   35818:	e5943024 	ldr	r3, [r4, #36]	; 0x24
    _pRxBuffer = NULL;
   3581c:	e5842000 	str	r2, [r4]
    if (_pTxBuffer)
   35820:	e1530002 	cmp	r3, r2
   35824:	0a000001 	beq	35830 <UartMaxi::setup(unsigned int, int, int)+0xd4>
        nmalloc_free((void**)&_pTxBuffer);
   35828:	e2840024 	add	r0, r4, #36	; 0x24
   3582c:	ebffbb75 	bl	24608 <nmalloc_free>
    _pTxBuffer = NULL;
   35830:	e3a06000 	mov	r6, #0
    _pRxBuffer = (uint8_t*)nmalloc_malloc(rxBufSize);
   35834:	e1a00008 	mov	r0, r8
    _pTxBuffer = NULL;
   35838:	e5846024 	str	r6, [r4, #36]	; 0x24
    _pRxBuffer = (uint8_t*)nmalloc_malloc(rxBufSize);
   3583c:	ebffbb34 	bl	24514 <nmalloc_malloc>
    if (!_pRxBuffer)
   35840:	e1500006 	cmp	r0, r6
    _pRxBuffer = (uint8_t*)nmalloc_malloc(rxBufSize);
   35844:	e5840000 	str	r0, [r4]
    if (!_pRxBuffer)
   35848:	0a000035 	beq	35924 <UartMaxi::setup(unsigned int, int, int)+0x1c8>
    _pTxBuffer = (uint8_t*)nmalloc_malloc(txBufSize);
   3584c:	e1a00009 	mov	r0, r9
   35850:	ebffbb2f 	bl	24514 <nmalloc_malloc>
    if (!_pTxBuffer)
   35854:	e3500000 	cmp	r0, #0
    _pTxBuffer = (uint8_t*)nmalloc_malloc(txBufSize);
   35858:	e5840024 	str	r0, [r4, #36]	; 0x24
    if (!_pTxBuffer)
   3585c:	0a000030 	beq	35924 <UartMaxi::setup(unsigned int, int, int)+0x1c8>
        _putPos = 0;
   35860:	e5846004 	str	r6, [r4, #4]
        _bufLen = maxLen;
   35864:	e584800c 	str	r8, [r4, #12]
        _getPos = 0;
   35868:	e5846008 	str	r6, [r4, #8]
        _bufLen = maxLen;
   3586c:	e5849030 	str	r9, [r4, #48]	; 0x30
        _putPos = 0;
   35870:	e5846028 	str	r6, [r4, #40]	; 0x28
    pinMode(15, PINMODE_ALT0);
   35874:	e3a01004 	mov	r1, #4
        _getPos = 0;
   35878:	e584602c 	str	r6, [r4, #44]	; 0x2c
   3587c:	e3a0000f 	mov	r0, #15
   35880:	ebfffe97 	bl	352e4 <pinMode>
    pinMode(14, PINMODE_ALT0);
   35884:	e3a01004 	mov	r1, #4
   35888:	e3a0000e 	mov	r0, #14
   3588c:	ebfffe94 	bl	352e4 <pinMode>
    CInterrupts::connectIRQ(ARM_IRQ_UART, isrStatic, this);
   35890:	e1a02004 	mov	r2, r4
   35894:	e59f10cc 	ldr	r1, [pc, #204]	; 35968 <UartMaxi::setup(unsigned int, int, int)+0x20c>
   35898:	e3a00039 	mov	r0, #57	; 0x39
   3589c:	ebfff417 	bl	32900 <CInterrupts::connectIRQ(unsigned int, void (*)(void*), void*)>
    PeripheralEntry();
   358a0:	ee076f9a 	mcr	15, 0, r6, cr7, cr10, {4}
    WR32(ARM_UART0_IFLS, UART0_IFLS_IFSEL_1_4 << UART0_IFLS_TXIFSEL_SHIFT
   358a4:	e3a0c011 	mov	ip, #17
    WR32(ARM_UART0_LCRH, UART0_LCRH_WLEN8_MASK | UART0_LCRH_FEN_MASK);
   358a8:	e3a00070 	mov	r0, #112	; 0x70
    WR32(ARM_UART0_IMSC, UART0_INT_RX | UART0_INT_RT | UART0_INT_OE);    
   358ac:	e3a01e45 	mov	r1, #1104	; 0x450
	WR32(ARM_UART0_IMSC, 0);
   358b0:	e59f30b4 	ldr	r3, [pc, #180]	; 3596c <UartMaxi::setup(unsigned int, int, int)+0x210>
	WR32(ARM_UART0_ICR,  0x7FF);
   358b4:	e59f20b4 	ldr	r2, [pc, #180]	; 35970 <UartMaxi::setup(unsigned int, int, int)+0x214>
	WR32(ARM_UART0_IMSC, 0);
   358b8:	e5836038 	str	r6, [r3, #56]	; 0x38
	WR32(ARM_UART0_ICR,  0x7FF);
   358bc:	e5832044 	str	r2, [r3, #68]	; 0x44
	WR32(ARM_UART0_CR, UART0_CR_UART_EN_MASK | UART0_CR_TXE_MASK | UART0_CR_RXE_MASK);
   358c0:	e59f20ac 	ldr	r2, [pc, #172]	; 35974 <UartMaxi::setup(unsigned int, int, int)+0x218>
	WR32(ARM_UART0_IBRD, intBaudDivisor);
   358c4:	e5837024 	str	r7, [r3, #36]	; 0x24
	WR32(ARM_UART0_FBRD, fracBaudDivisor);
   358c8:	e5835028 	str	r5, [r3, #40]	; 0x28
    WR32(ARM_UART0_IFLS, UART0_IFLS_IFSEL_1_4 << UART0_IFLS_TXIFSEL_SHIFT
   358cc:	e583c034 	str	ip, [r3, #52]	; 0x34
    WR32(ARM_UART0_LCRH, UART0_LCRH_WLEN8_MASK | UART0_LCRH_FEN_MASK);
   358d0:	e583002c 	str	r0, [r3, #44]	; 0x2c
    WR32(ARM_UART0_IMSC, UART0_INT_RX | UART0_INT_RT | UART0_INT_OE);    
   358d4:	e5831038 	str	r1, [r3, #56]	; 0x38
	WR32(ARM_UART0_CR, UART0_CR_UART_EN_MASK | UART0_CR_TXE_MASK | UART0_CR_RXE_MASK);
   358d8:	e5832030 	str	r2, [r3, #48]	; 0x30
    PeripheralExit();
   358dc:	ee076fba 	mcr	15, 0, r6, cr7, cr10, {5}
    return true;
   358e0:	e3a00001 	mov	r0, #1
        _txBufferFullCount = 0;
   358e4:	e5846034 	str	r6, [r4, #52]	; 0x34
        _rxFramingErrCount = 0;
   358e8:	e5846014 	str	r6, [r4, #20]
        _rxOverrunErrCount = 0;
   358ec:	e5846018 	str	r6, [r4, #24]
        _rxBreakCount = 0;
   358f0:	e584601c 	str	r6, [r4, #28]
        _rxBufferFullCount = 0;
   358f4:	e5846020 	str	r6, [r4, #32]
    _nRxStatus = UART_ERROR_NONE;
   358f8:	e5c46010 	strb	r6, [r4, #16]
}
   358fc:	e28dd014 	add	sp, sp, #20
   35900:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
        LogWrite(FromUartMaxi, LOG_VERBOSE, "Frac issue %d", fracBaudDivisor);
   35904:	e1a03005 	mov	r3, r5
   35908:	e59f2068 	ldr	r2, [pc, #104]	; 35978 <UartMaxi::setup(unsigned int, int, int)+0x21c>
   3590c:	e3a01005 	mov	r1, #5
   35910:	e59f004c 	ldr	r0, [pc, #76]	; 35964 <UartMaxi::setup(unsigned int, int, int)+0x208>
   35914:	ebffba17 	bl	24178 <LogWrite>
        return false;
   35918:	e3a00000 	mov	r0, #0
}
   3591c:	e28dd014 	add	sp, sp, #20
   35920:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return false;
   35924:	e3a00000 	mov	r0, #0
}
   35928:	e28dd014 	add	sp, sp, #20
   3592c:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
        LogWrite(FromUartMaxi, LOG_VERBOSE, "Divisor issue %d, FUARTCLK %d, FUARTCLK_MAX %d, baudRate*16 %d",
   35930:	e1a03000 	mov	r3, r0
   35934:	e58d5008 	str	r5, [sp, #8]
   35938:	e1cda0f0 	strd	sl, [sp]
   3593c:	e59f2038 	ldr	r2, [pc, #56]	; 3597c <UartMaxi::setup(unsigned int, int, int)+0x220>
   35940:	e3a01005 	mov	r1, #5
   35944:	e59f0018 	ldr	r0, [pc, #24]	; 35964 <UartMaxi::setup(unsigned int, int, int)+0x208>
   35948:	ebffba0a 	bl	24178 <LogWrite>
        return false;
   3594c:	e3a00000 	mov	r0, #0
}
   35950:	e28dd014 	add	sp, sp, #20
   35954:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   35958:	00f42400 	.word	0x00f42400
   3595c:	0000fffe 	.word	0x0000fffe
   35960:	00055668 	.word	0x00055668
   35964:	0005560c 	.word	0x0005560c
   35968:	000354f8 	.word	0x000354f8
   3596c:	20201000 	.word	0x20201000
   35970:	000007ff 	.word	0x000007ff
   35974:	00000301 	.word	0x00000301
   35978:	00055658 	.word	0x00055658
   3597c:	00055618 	.word	0x00055618

00035980 <UartMaxi::clear()>:
        _getPos = _putPos = 0;
   35980:	e3a03000 	mov	r3, #0
   35984:	e5803004 	str	r3, [r0, #4]
        _txBufferFullCount = 0;
   35988:	e5803034 	str	r3, [r0, #52]	; 0x34
   3598c:	e5803008 	str	r3, [r0, #8]
        _rxFramingErrCount = 0;
   35990:	e5803014 	str	r3, [r0, #20]
        _rxOverrunErrCount = 0;
   35994:	e5803018 	str	r3, [r0, #24]
        _rxBreakCount = 0;
   35998:	e580301c 	str	r3, [r0, #28]
        _rxBufferFullCount = 0;
   3599c:	e5803020 	str	r3, [r0, #32]
}
   359a0:	e12fff1e 	bx	lr

000359a4 <UartMaxi::writeBase(unsigned int)>:
        if (_bufLen == 0)
   359a4:	e5902030 	ldr	r2, [r0, #48]	; 0x30
{
   359a8:	e1a03000 	mov	r3, r0
   359ac:	e3520000 	cmp	r2, #0
   359b0:	0a00000d 	beq	359ec <UartMaxi::writeBase(unsigned int)+0x48>
        if (_putPos == _getPos)
   359b4:	e590c028 	ldr	ip, [r0, #40]	; 0x28
   359b8:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   359bc:	e15c0000 	cmp	ip, r0
   359c0:	0a000012 	beq	35a10 <UartMaxi::writeBase(unsigned int)+0x6c>
        unsigned int gp = _getPos;
   359c4:	e593002c 	ldr	r0, [r3, #44]	; 0x2c
        if (_putPos > gp)
   359c8:	e593c028 	ldr	ip, [r3, #40]	; 0x28
   359cc:	e150000c 	cmp	r0, ip
   359d0:	2a00000a 	bcs	35a00 <UartMaxi::writeBase(unsigned int)+0x5c>
            if ((_putPos != _bufLen - 1) || (gp != 0))
   359d4:	e593c028 	ldr	ip, [r3, #40]	; 0x28
   359d8:	e2422001 	sub	r2, r2, #1
   359dc:	e15c0002 	cmp	ip, r2
   359e0:	1a00000a 	bne	35a10 <UartMaxi::writeBase(unsigned int)+0x6c>
   359e4:	e3500000 	cmp	r0, #0
   359e8:	1a000008 	bne	35a10 <UartMaxi::writeBase(unsigned int)+0x6c>
        _txBufferFullCount++;
   359ec:	e5932034 	ldr	r2, [r3, #52]	; 0x34
        return 0;
   359f0:	e3a00000 	mov	r0, #0
        _txBufferFullCount++;
   359f4:	e2822001 	add	r2, r2, #1
   359f8:	e5832034 	str	r2, [r3, #52]	; 0x34
        return 0;
   359fc:	e12fff1e 	bx	lr
            if (gp - _putPos > 1)
   35a00:	e5932028 	ldr	r2, [r3, #40]	; 0x28
   35a04:	e0400002 	sub	r0, r0, r2
   35a08:	e3500001 	cmp	r0, #1
   35a0c:	9afffff6 	bls	359ec <UartMaxi::writeBase(unsigned int)+0x48>
    if ((!_pTxBuffer) || (!canPut))
   35a10:	e5932024 	ldr	r2, [r3, #36]	; 0x24
   35a14:	e3520000 	cmp	r2, #0
   35a18:	0afffff3 	beq	359ec <UartMaxi::writeBase(unsigned int)+0x48>
    _pTxBuffer[_txBufferPosn._putPos] = c;
   35a1c:	e5930028 	ldr	r0, [r3, #40]	; 0x28
   35a20:	e7c21000 	strb	r1, [r2, r0]
        _putPos++;
   35a24:	e5932028 	ldr	r2, [r3, #40]	; 0x28
        if (_putPos >= _bufLen)
   35a28:	e5931030 	ldr	r1, [r3, #48]	; 0x30
        _putPos++;
   35a2c:	e2822001 	add	r2, r2, #1
   35a30:	e5832028 	str	r2, [r3, #40]	; 0x28
        if (_putPos >= _bufLen)
   35a34:	e5932028 	ldr	r2, [r3, #40]	; 0x28
   35a38:	e1520001 	cmp	r2, r1
            _putPos = 0;
   35a3c:	23a02000 	movcs	r2, #0
    return 1;
   35a40:	23a00001 	movcs	r0, #1
   35a44:	25832028 	strcs	r2, [r3, #40]	; 0x28
   35a48:	33a00001 	movcc	r0, #1
}
   35a4c:	e12fff1e 	bx	lr

00035a50 <UartMaxi::write(unsigned int)>:
        if (_bufLen == 0)
   35a50:	e5903030 	ldr	r3, [r0, #48]	; 0x30
{
   35a54:	e92d4070 	push	{r4, r5, r6, lr}
   35a58:	e3530000 	cmp	r3, #0
   35a5c:	e1a04000 	mov	r4, r0
   35a60:	0a00000d 	beq	35a9c <UartMaxi::write(unsigned int)+0x4c>
        if (_putPos == _getPos)
   35a64:	e5900028 	ldr	r0, [r0, #40]	; 0x28
   35a68:	e594202c 	ldr	r2, [r4, #44]	; 0x2c
   35a6c:	e1500002 	cmp	r0, r2
   35a70:	0a000036 	beq	35b50 <UartMaxi::write(unsigned int)+0x100>
        unsigned int gp = _getPos;
   35a74:	e594202c 	ldr	r2, [r4, #44]	; 0x2c
        if (_putPos > gp)
   35a78:	e5940028 	ldr	r0, [r4, #40]	; 0x28
   35a7c:	e1520000 	cmp	r2, r0
   35a80:	2a00002e 	bcs	35b40 <UartMaxi::write(unsigned int)+0xf0>
            if ((_putPos != _bufLen - 1) || (gp != 0))
   35a84:	e5940028 	ldr	r0, [r4, #40]	; 0x28
   35a88:	e2433001 	sub	r3, r3, #1
   35a8c:	e1500003 	cmp	r0, r3
   35a90:	1a00002e 	bne	35b50 <UartMaxi::write(unsigned int)+0x100>
   35a94:	e3520000 	cmp	r2, #0
   35a98:	1a00002c 	bne	35b50 <UartMaxi::write(unsigned int)+0x100>
        return 0;
   35a9c:	e3a05000 	mov	r5, #0
        _txBufferFullCount++;
   35aa0:	e5943034 	ldr	r3, [r4, #52]	; 0x34
   35aa4:	e2833001 	add	r3, r3, #1
   35aa8:	e5843034 	str	r3, [r4, #52]	; 0x34
    lowlev_disable_irq();
   35aac:	ebff498f 	bl	80f0 <lowlev_disable_irq>
        return _putPos != _getPos;
   35ab0:	e5942028 	ldr	r2, [r4, #40]	; 0x28
   35ab4:	e594302c 	ldr	r3, [r4, #44]	; 0x2c
    while(_txBufferPosn.canGet() && _pTxBuffer)
   35ab8:	e1520003 	cmp	r2, r3
   35abc:	0a00001c 	beq	35b34 <UartMaxi::write(unsigned int)+0xe4>
   35ac0:	e594e024 	ldr	lr, [r4, #36]	; 0x24
   35ac4:	e35e0000 	cmp	lr, #0
   35ac8:	0a000019 	beq	35b34 <UartMaxi::write(unsigned int)+0xe4>
        PeripheralEntry();
   35acc:	e3a03000 	mov	r3, #0
   35ad0:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
        if ((RD32(ARM_UART0_FR) & UART0_FR_TXFF_MASK) == 0)
   35ad4:	e59f10c8 	ldr	r1, [pc, #200]	; 35ba4 <UartMaxi::write(unsigned int)+0x154>
   35ad8:	e5912018 	ldr	r2, [r1, #24]
   35adc:	e2122020 	ands	r2, r2, #32
   35ae0:	0a000004 	beq	35af8 <UartMaxi::write(unsigned int)+0xa8>
   35ae4:	ea000029 	b	35b90 <UartMaxi::write(unsigned int)+0x140>
        PeripheralEntry();
   35ae8:	ee072f9a 	mcr	15, 0, r2, cr7, cr10, {4}
        if ((RD32(ARM_UART0_FR) & UART0_FR_TXFF_MASK) == 0)
   35aec:	e5913018 	ldr	r3, [r1, #24]
   35af0:	e3130020 	tst	r3, #32
   35af4:	1a000025 	bne	35b90 <UartMaxi::write(unsigned int)+0x140>
        return _getPos;
   35af8:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
        _getPos++;
   35afc:	e594302c 	ldr	r3, [r4, #44]	; 0x2c
            uint8_t val = _pTxBuffer[_txBufferPosn.posToGet()];
   35b00:	e7de0000 	ldrb	r0, [lr, r0]
   35b04:	e2833001 	add	r3, r3, #1
   35b08:	e584302c 	str	r3, [r4, #44]	; 0x2c
        if (_getPos >= _bufLen)
   35b0c:	e594c02c 	ldr	ip, [r4, #44]	; 0x2c
   35b10:	e5943030 	ldr	r3, [r4, #48]	; 0x30
   35b14:	e15c0003 	cmp	ip, r3
            _getPos = 0;
   35b18:	2584202c 	strcs	r2, [r4, #44]	; 0x2c
            WR32(ARM_UART0_DR, val);
   35b1c:	e5810000 	str	r0, [r1]
        PeripheralExit();
   35b20:	ee072fba 	mcr	15, 0, r2, cr7, cr10, {5}
        return _putPos != _getPos;
   35b24:	e5940028 	ldr	r0, [r4, #40]	; 0x28
   35b28:	e594302c 	ldr	r3, [r4, #44]	; 0x2c
    while(_txBufferPosn.canGet() && _pTxBuffer)
   35b2c:	e1500003 	cmp	r0, r3
   35b30:	1affffec 	bne	35ae8 <UartMaxi::write(unsigned int)+0x98>
    lowlev_enable_irq();
   35b34:	ebff4969 	bl	80e0 <lowlev_enable_irq>
}
   35b38:	e1a00005 	mov	r0, r5
   35b3c:	e8bd8070 	pop	{r4, r5, r6, pc}
            if (gp - _putPos > 1)
   35b40:	e5943028 	ldr	r3, [r4, #40]	; 0x28
   35b44:	e0422003 	sub	r2, r2, r3
   35b48:	e3520001 	cmp	r2, #1
   35b4c:	9affffd2 	bls	35a9c <UartMaxi::write(unsigned int)+0x4c>
    if ((!_pTxBuffer) || (!canPut))
   35b50:	e5943024 	ldr	r3, [r4, #36]	; 0x24
   35b54:	e3530000 	cmp	r3, #0
   35b58:	0affffcf 	beq	35a9c <UartMaxi::write(unsigned int)+0x4c>
    _pTxBuffer[_txBufferPosn._putPos] = c;
   35b5c:	e5942028 	ldr	r2, [r4, #40]	; 0x28
   35b60:	e7c31002 	strb	r1, [r3, r2]
        _putPos++;
   35b64:	e5943028 	ldr	r3, [r4, #40]	; 0x28
        if (_putPos >= _bufLen)
   35b68:	e5942030 	ldr	r2, [r4, #48]	; 0x30
        _putPos++;
   35b6c:	e2833001 	add	r3, r3, #1
   35b70:	e5843028 	str	r3, [r4, #40]	; 0x28
        if (_putPos >= _bufLen)
   35b74:	e5943028 	ldr	r3, [r4, #40]	; 0x28
   35b78:	e1530002 	cmp	r3, r2
            _putPos = 0;
   35b7c:	23a03000 	movcs	r3, #0
    return 1;
   35b80:	23a05001 	movcs	r5, #1
   35b84:	25843028 	strcs	r3, [r4, #40]	; 0x28
   35b88:	33a05001 	movcc	r5, #1
   35b8c:	eaffffc6 	b	35aac <UartMaxi::write(unsigned int)+0x5c>
            WR32(ARM_UART0_IMSC, RD32(ARM_UART0_IMSC) | UART0_INT_TX);
   35b90:	e59f200c 	ldr	r2, [pc, #12]	; 35ba4 <UartMaxi::write(unsigned int)+0x154>
   35b94:	e5923038 	ldr	r3, [r2, #56]	; 0x38
   35b98:	e3833020 	orr	r3, r3, #32
   35b9c:	e5823038 	str	r3, [r2, #56]	; 0x38
   35ba0:	eaffffe3 	b	35b34 <UartMaxi::write(unsigned int)+0xe4>
   35ba4:	20201000 	.word	0x20201000

00035ba8 <UartMaxi::write(char const*, unsigned int)>:
    for (size_t i = 0; i < size; i++)
   35ba8:	e3520000 	cmp	r2, #0
{
   35bac:	e92d4070 	push	{r4, r5, r6, lr}
   35bb0:	e1a04000 	mov	r4, r0
    for (size_t i = 0; i < size; i++)
   35bb4:	0a000027 	beq	35c58 <UartMaxi::write(char const*, unsigned int)+0xb0>
   35bb8:	e3a0e000 	mov	lr, #0
   35bbc:	e5900030 	ldr	r0, [r0, #48]	; 0x30
   35bc0:	e0812002 	add	r2, r1, r2
   35bc4:	ea00001b 	b	35c38 <UartMaxi::write(char const*, unsigned int)+0x90>
        if (_putPos == _getPos)
   35bc8:	e594c028 	ldr	ip, [r4, #40]	; 0x28
   35bcc:	e594302c 	ldr	r3, [r4, #44]	; 0x2c
   35bd0:	e15c0003 	cmp	ip, r3
   35bd4:	0a000007 	beq	35bf8 <UartMaxi::write(char const*, unsigned int)+0x50>
        unsigned int gp = _getPos;
   35bd8:	e594302c 	ldr	r3, [r4, #44]	; 0x2c
        if (_putPos > gp)
   35bdc:	e594c028 	ldr	ip, [r4, #40]	; 0x28
   35be0:	e153000c 	cmp	r3, ip
   35be4:	2a00003f 	bcs	35ce8 <UartMaxi::write(char const*, unsigned int)+0x140>
            if ((_putPos != _bufLen - 1) || (gp != 0))
   35be8:	e5945028 	ldr	r5, [r4, #40]	; 0x28
   35bec:	e240c001 	sub	ip, r0, #1
   35bf0:	e155000c 	cmp	r5, ip
   35bf4:	0a000043 	beq	35d08 <UartMaxi::write(char const*, unsigned int)+0x160>
    if ((!_pTxBuffer) || (!canPut))
   35bf8:	e5943024 	ldr	r3, [r4, #36]	; 0x24
   35bfc:	e3530000 	cmp	r3, #0
   35c00:	0a00000e 	beq	35c40 <UartMaxi::write(char const*, unsigned int)+0x98>
    _pTxBuffer[_txBufferPosn._putPos] = c;
   35c04:	e5940028 	ldr	r0, [r4, #40]	; 0x28
        writeBase(data[i]);
   35c08:	e5d1c000 	ldrb	ip, [r1]
   35c0c:	e2811001 	add	r1, r1, #1
    _pTxBuffer[_txBufferPosn._putPos] = c;
   35c10:	e7c3c000 	strb	ip, [r3, r0]
        _putPos++;
   35c14:	e5943028 	ldr	r3, [r4, #40]	; 0x28
        if (_putPos >= _bufLen)
   35c18:	e5940030 	ldr	r0, [r4, #48]	; 0x30
        _putPos++;
   35c1c:	e2833001 	add	r3, r3, #1
   35c20:	e5843028 	str	r3, [r4, #40]	; 0x28
        if (_putPos >= _bufLen)
   35c24:	e5943028 	ldr	r3, [r4, #40]	; 0x28
   35c28:	e1530000 	cmp	r3, r0
            _putPos = 0;
   35c2c:	2584e028 	strcs	lr, [r4, #40]	; 0x28
    for (size_t i = 0; i < size; i++)
   35c30:	e1510002 	cmp	r1, r2
   35c34:	0a000007 	beq	35c58 <UartMaxi::write(char const*, unsigned int)+0xb0>
        if (_bufLen == 0)
   35c38:	e3500000 	cmp	r0, #0
   35c3c:	1affffe1 	bne	35bc8 <UartMaxi::write(char const*, unsigned int)+0x20>
        _txBufferFullCount++;
   35c40:	e5943034 	ldr	r3, [r4, #52]	; 0x34
   35c44:	e2833001 	add	r3, r3, #1
   35c48:	e5843034 	str	r3, [r4, #52]	; 0x34
   35c4c:	e2811001 	add	r1, r1, #1
    for (size_t i = 0; i < size; i++)
   35c50:	e1510002 	cmp	r1, r2
   35c54:	1afffff7 	bne	35c38 <UartMaxi::write(char const*, unsigned int)+0x90>
    lowlev_disable_irq();
   35c58:	ebff4924 	bl	80f0 <lowlev_disable_irq>
        return _putPos != _getPos;
   35c5c:	e5942028 	ldr	r2, [r4, #40]	; 0x28
   35c60:	e594302c 	ldr	r3, [r4, #44]	; 0x2c
    while(_txBufferPosn.canGet() && _pTxBuffer)
   35c64:	e1520003 	cmp	r2, r3
   35c68:	0a00001c 	beq	35ce0 <UartMaxi::write(char const*, unsigned int)+0x138>
   35c6c:	e594e024 	ldr	lr, [r4, #36]	; 0x24
   35c70:	e35e0000 	cmp	lr, #0
   35c74:	0a000019 	beq	35ce0 <UartMaxi::write(char const*, unsigned int)+0x138>
        PeripheralEntry();
   35c78:	e3a03000 	mov	r3, #0
   35c7c:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
        if ((RD32(ARM_UART0_FR) & UART0_FR_TXFF_MASK) == 0)
   35c80:	e59f10b0 	ldr	r1, [pc, #176]	; 35d38 <UartMaxi::write(char const*, unsigned int)+0x190>
   35c84:	e5912018 	ldr	r2, [r1, #24]
   35c88:	e2122020 	ands	r2, r2, #32
   35c8c:	0a000004 	beq	35ca4 <UartMaxi::write(char const*, unsigned int)+0xfc>
   35c90:	ea000022 	b	35d20 <UartMaxi::write(char const*, unsigned int)+0x178>
        PeripheralEntry();
   35c94:	ee072f9a 	mcr	15, 0, r2, cr7, cr10, {4}
        if ((RD32(ARM_UART0_FR) & UART0_FR_TXFF_MASK) == 0)
   35c98:	e5913018 	ldr	r3, [r1, #24]
   35c9c:	e3130020 	tst	r3, #32
   35ca0:	1a00001e 	bne	35d20 <UartMaxi::write(char const*, unsigned int)+0x178>
        return _getPos;
   35ca4:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
        _getPos++;
   35ca8:	e594302c 	ldr	r3, [r4, #44]	; 0x2c
            uint8_t val = _pTxBuffer[_txBufferPosn.posToGet()];
   35cac:	e7de0000 	ldrb	r0, [lr, r0]
   35cb0:	e2833001 	add	r3, r3, #1
   35cb4:	e584302c 	str	r3, [r4, #44]	; 0x2c
        if (_getPos >= _bufLen)
   35cb8:	e594c02c 	ldr	ip, [r4, #44]	; 0x2c
   35cbc:	e5943030 	ldr	r3, [r4, #48]	; 0x30
   35cc0:	e15c0003 	cmp	ip, r3
            _getPos = 0;
   35cc4:	2584202c 	strcs	r2, [r4, #44]	; 0x2c
            WR32(ARM_UART0_DR, val);
   35cc8:	e5810000 	str	r0, [r1]
        PeripheralExit();
   35ccc:	ee072fba 	mcr	15, 0, r2, cr7, cr10, {5}
        return _putPos != _getPos;
   35cd0:	e5940028 	ldr	r0, [r4, #40]	; 0x28
   35cd4:	e594302c 	ldr	r3, [r4, #44]	; 0x2c
    while(_txBufferPosn.canGet() && _pTxBuffer)
   35cd8:	e1500003 	cmp	r0, r3
   35cdc:	1affffec 	bne	35c94 <UartMaxi::write(char const*, unsigned int)+0xec>
}
   35ce0:	e8bd4070 	pop	{r4, r5, r6, lr}
    lowlev_enable_irq();
   35ce4:	eaff48fd 	b	80e0 <lowlev_enable_irq>
            if (gp - _putPos > 1)
   35ce8:	e594c028 	ldr	ip, [r4, #40]	; 0x28
   35cec:	e043300c 	sub	r3, r3, ip
   35cf0:	e3530001 	cmp	r3, #1
   35cf4:	8affffbf 	bhi	35bf8 <UartMaxi::write(char const*, unsigned int)+0x50>
        _txBufferFullCount++;
   35cf8:	e5943034 	ldr	r3, [r4, #52]	; 0x34
   35cfc:	e2833001 	add	r3, r3, #1
   35d00:	e5843034 	str	r3, [r4, #52]	; 0x34
   35d04:	eaffffd0 	b	35c4c <UartMaxi::write(char const*, unsigned int)+0xa4>
            if ((_putPos != _bufLen - 1) || (gp != 0))
   35d08:	e3530000 	cmp	r3, #0
   35d0c:	1affffb9 	bne	35bf8 <UartMaxi::write(char const*, unsigned int)+0x50>
   35d10:	e5943034 	ldr	r3, [r4, #52]	; 0x34
   35d14:	e2833001 	add	r3, r3, #1
   35d18:	e5843034 	str	r3, [r4, #52]	; 0x34
   35d1c:	eaffffca 	b	35c4c <UartMaxi::write(char const*, unsigned int)+0xa4>
            WR32(ARM_UART0_IMSC, RD32(ARM_UART0_IMSC) | UART0_INT_TX);
   35d20:	e59f2010 	ldr	r2, [pc, #16]	; 35d38 <UartMaxi::write(char const*, unsigned int)+0x190>
}
   35d24:	e8bd4070 	pop	{r4, r5, r6, lr}
            WR32(ARM_UART0_IMSC, RD32(ARM_UART0_IMSC) | UART0_INT_TX);
   35d28:	e5923038 	ldr	r3, [r2, #56]	; 0x38
   35d2c:	e3833020 	orr	r3, r3, #32
   35d30:	e5823038 	str	r3, [r2, #56]	; 0x38
    lowlev_enable_irq();
   35d34:	eaff48e9 	b	80e0 <lowlev_enable_irq>
   35d38:	20201000 	.word	0x20201000

00035d3c <UartMaxi::writeStr(char const*)>:
{
   35d3c:	e92d4070 	push	{r4, r5, r6, lr}
   35d40:	e1a04000 	mov	r4, r0
    write(data, strlen(data));
   35d44:	e1a00001 	mov	r0, r1
{
   35d48:	e1a05001 	mov	r5, r1
    write(data, strlen(data));
   35d4c:	eb005e32 	bl	4d61c <strlen>
    for (size_t i = 0; i < size; i++)
   35d50:	e3500000 	cmp	r0, #0
   35d54:	0a000028 	beq	35dfc <UartMaxi::writeStr(char const*)+0xc0>
   35d58:	e1a01005 	mov	r1, r5
            _putPos = 0;
   35d5c:	e3a0e000 	mov	lr, #0
   35d60:	e5942030 	ldr	r2, [r4, #48]	; 0x30
   35d64:	e0850000 	add	r0, r5, r0
   35d68:	ea00001b 	b	35ddc <UartMaxi::writeStr(char const*)+0xa0>
        if (_putPos == _getPos)
   35d6c:	e594c028 	ldr	ip, [r4, #40]	; 0x28
   35d70:	e594302c 	ldr	r3, [r4, #44]	; 0x2c
   35d74:	e15c0003 	cmp	ip, r3
   35d78:	0a000007 	beq	35d9c <UartMaxi::writeStr(char const*)+0x60>
        unsigned int gp = _getPos;
   35d7c:	e594302c 	ldr	r3, [r4, #44]	; 0x2c
        if (_putPos > gp)
   35d80:	e594c028 	ldr	ip, [r4, #40]	; 0x28
   35d84:	e153000c 	cmp	r3, ip
   35d88:	2a00003f 	bcs	35e8c <UartMaxi::writeStr(char const*)+0x150>
            if ((_putPos != _bufLen - 1) || (gp != 0))
   35d8c:	e5945028 	ldr	r5, [r4, #40]	; 0x28
   35d90:	e242c001 	sub	ip, r2, #1
   35d94:	e155000c 	cmp	r5, ip
   35d98:	0a000043 	beq	35eac <UartMaxi::writeStr(char const*)+0x170>
    if ((!_pTxBuffer) || (!canPut))
   35d9c:	e5943024 	ldr	r3, [r4, #36]	; 0x24
   35da0:	e3530000 	cmp	r3, #0
   35da4:	0a00000e 	beq	35de4 <UartMaxi::writeStr(char const*)+0xa8>
    _pTxBuffer[_txBufferPosn._putPos] = c;
   35da8:	e5942028 	ldr	r2, [r4, #40]	; 0x28
        writeBase(data[i]);
   35dac:	e5d1c000 	ldrb	ip, [r1]
   35db0:	e2811001 	add	r1, r1, #1
    _pTxBuffer[_txBufferPosn._putPos] = c;
   35db4:	e7c3c002 	strb	ip, [r3, r2]
        _putPos++;
   35db8:	e5943028 	ldr	r3, [r4, #40]	; 0x28
        if (_putPos >= _bufLen)
   35dbc:	e5942030 	ldr	r2, [r4, #48]	; 0x30
        _putPos++;
   35dc0:	e2833001 	add	r3, r3, #1
   35dc4:	e5843028 	str	r3, [r4, #40]	; 0x28
        if (_putPos >= _bufLen)
   35dc8:	e5943028 	ldr	r3, [r4, #40]	; 0x28
   35dcc:	e1530002 	cmp	r3, r2
            _putPos = 0;
   35dd0:	2584e028 	strcs	lr, [r4, #40]	; 0x28
    for (size_t i = 0; i < size; i++)
   35dd4:	e1510000 	cmp	r1, r0
   35dd8:	0a000007 	beq	35dfc <UartMaxi::writeStr(char const*)+0xc0>
        if (_bufLen == 0)
   35ddc:	e3520000 	cmp	r2, #0
   35de0:	1affffe1 	bne	35d6c <UartMaxi::writeStr(char const*)+0x30>
        _txBufferFullCount++;
   35de4:	e5943034 	ldr	r3, [r4, #52]	; 0x34
   35de8:	e2833001 	add	r3, r3, #1
   35dec:	e5843034 	str	r3, [r4, #52]	; 0x34
   35df0:	e2811001 	add	r1, r1, #1
    for (size_t i = 0; i < size; i++)
   35df4:	e1510000 	cmp	r1, r0
   35df8:	1afffff7 	bne	35ddc <UartMaxi::writeStr(char const*)+0xa0>
    lowlev_disable_irq();
   35dfc:	ebff48bb 	bl	80f0 <lowlev_disable_irq>
        return _putPos != _getPos;
   35e00:	e5942028 	ldr	r2, [r4, #40]	; 0x28
   35e04:	e594302c 	ldr	r3, [r4, #44]	; 0x2c
    while(_txBufferPosn.canGet() && _pTxBuffer)
   35e08:	e1520003 	cmp	r2, r3
   35e0c:	0a00001c 	beq	35e84 <UartMaxi::writeStr(char const*)+0x148>
   35e10:	e594e024 	ldr	lr, [r4, #36]	; 0x24
   35e14:	e35e0000 	cmp	lr, #0
   35e18:	0a000019 	beq	35e84 <UartMaxi::writeStr(char const*)+0x148>
        PeripheralEntry();
   35e1c:	e3a03000 	mov	r3, #0
   35e20:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
        if ((RD32(ARM_UART0_FR) & UART0_FR_TXFF_MASK) == 0)
   35e24:	e59f10b0 	ldr	r1, [pc, #176]	; 35edc <UartMaxi::writeStr(char const*)+0x1a0>
   35e28:	e5912018 	ldr	r2, [r1, #24]
   35e2c:	e2122020 	ands	r2, r2, #32
   35e30:	0a000004 	beq	35e48 <UartMaxi::writeStr(char const*)+0x10c>
   35e34:	ea000022 	b	35ec4 <UartMaxi::writeStr(char const*)+0x188>
        PeripheralEntry();
   35e38:	ee072f9a 	mcr	15, 0, r2, cr7, cr10, {4}
        if ((RD32(ARM_UART0_FR) & UART0_FR_TXFF_MASK) == 0)
   35e3c:	e5913018 	ldr	r3, [r1, #24]
   35e40:	e3130020 	tst	r3, #32
   35e44:	1a00001e 	bne	35ec4 <UartMaxi::writeStr(char const*)+0x188>
        return _getPos;
   35e48:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
        _getPos++;
   35e4c:	e594302c 	ldr	r3, [r4, #44]	; 0x2c
            uint8_t val = _pTxBuffer[_txBufferPosn.posToGet()];
   35e50:	e7de0000 	ldrb	r0, [lr, r0]
   35e54:	e2833001 	add	r3, r3, #1
   35e58:	e584302c 	str	r3, [r4, #44]	; 0x2c
        if (_getPos >= _bufLen)
   35e5c:	e594c02c 	ldr	ip, [r4, #44]	; 0x2c
   35e60:	e5943030 	ldr	r3, [r4, #48]	; 0x30
   35e64:	e15c0003 	cmp	ip, r3
            _getPos = 0;
   35e68:	2584202c 	strcs	r2, [r4, #44]	; 0x2c
            WR32(ARM_UART0_DR, val);
   35e6c:	e5810000 	str	r0, [r1]
        PeripheralExit();
   35e70:	ee072fba 	mcr	15, 0, r2, cr7, cr10, {5}
        return _putPos != _getPos;
   35e74:	e5940028 	ldr	r0, [r4, #40]	; 0x28
   35e78:	e594302c 	ldr	r3, [r4, #44]	; 0x2c
    while(_txBufferPosn.canGet() && _pTxBuffer)
   35e7c:	e1500003 	cmp	r0, r3
   35e80:	1affffec 	bne	35e38 <UartMaxi::writeStr(char const*)+0xfc>
}
   35e84:	e8bd4070 	pop	{r4, r5, r6, lr}
    lowlev_enable_irq();
   35e88:	eaff4894 	b	80e0 <lowlev_enable_irq>
            if (gp - _putPos > 1)
   35e8c:	e594c028 	ldr	ip, [r4, #40]	; 0x28
   35e90:	e043300c 	sub	r3, r3, ip
   35e94:	e3530001 	cmp	r3, #1
   35e98:	8affffbf 	bhi	35d9c <UartMaxi::writeStr(char const*)+0x60>
        _txBufferFullCount++;
   35e9c:	e5943034 	ldr	r3, [r4, #52]	; 0x34
   35ea0:	e2833001 	add	r3, r3, #1
   35ea4:	e5843034 	str	r3, [r4, #52]	; 0x34
   35ea8:	eaffffd0 	b	35df0 <UartMaxi::writeStr(char const*)+0xb4>
            if ((_putPos != _bufLen - 1) || (gp != 0))
   35eac:	e3530000 	cmp	r3, #0
   35eb0:	1affffb9 	bne	35d9c <UartMaxi::writeStr(char const*)+0x60>
   35eb4:	e5943034 	ldr	r3, [r4, #52]	; 0x34
   35eb8:	e2833001 	add	r3, r3, #1
   35ebc:	e5843034 	str	r3, [r4, #52]	; 0x34
   35ec0:	eaffffca 	b	35df0 <UartMaxi::writeStr(char const*)+0xb4>
            WR32(ARM_UART0_IMSC, RD32(ARM_UART0_IMSC) | UART0_INT_TX);
   35ec4:	e59f2010 	ldr	r2, [pc, #16]	; 35edc <UartMaxi::writeStr(char const*)+0x1a0>
}
   35ec8:	e8bd4070 	pop	{r4, r5, r6, lr}
            WR32(ARM_UART0_IMSC, RD32(ARM_UART0_IMSC) | UART0_INT_TX);
   35ecc:	e5923038 	ldr	r3, [r2, #56]	; 0x38
   35ed0:	e3833020 	orr	r3, r3, #32
   35ed4:	e5823038 	str	r3, [r2, #56]	; 0x38
    lowlev_enable_irq();
   35ed8:	eaff4880 	b	80e0 <lowlev_enable_irq>
   35edc:	20201000 	.word	0x20201000

00035ee0 <UartMaxi::txPumpPrime()>:
{
   35ee0:	e92d4010 	push	{r4, lr}
   35ee4:	e1a04000 	mov	r4, r0
    lowlev_disable_irq();
   35ee8:	ebff4880 	bl	80f0 <lowlev_disable_irq>
        return _putPos != _getPos;
   35eec:	e5942028 	ldr	r2, [r4, #40]	; 0x28
   35ef0:	e594302c 	ldr	r3, [r4, #44]	; 0x2c
    while(_txBufferPosn.canGet() && _pTxBuffer)
   35ef4:	e1520003 	cmp	r2, r3
   35ef8:	0a00001c 	beq	35f70 <UartMaxi::txPumpPrime()+0x90>
   35efc:	e594e024 	ldr	lr, [r4, #36]	; 0x24
   35f00:	e35e0000 	cmp	lr, #0
   35f04:	0a000019 	beq	35f70 <UartMaxi::txPumpPrime()+0x90>
        PeripheralEntry();
   35f08:	e3a03000 	mov	r3, #0
   35f0c:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
        if ((RD32(ARM_UART0_FR) & UART0_FR_TXFF_MASK) == 0)
   35f10:	e59f1078 	ldr	r1, [pc, #120]	; 35f90 <UartMaxi::txPumpPrime()+0xb0>
   35f14:	e5912018 	ldr	r2, [r1, #24]
   35f18:	e2122020 	ands	r2, r2, #32
   35f1c:	0a000004 	beq	35f34 <UartMaxi::txPumpPrime()+0x54>
   35f20:	ea000014 	b	35f78 <UartMaxi::txPumpPrime()+0x98>
        PeripheralEntry();
   35f24:	ee072f9a 	mcr	15, 0, r2, cr7, cr10, {4}
        if ((RD32(ARM_UART0_FR) & UART0_FR_TXFF_MASK) == 0)
   35f28:	e5913018 	ldr	r3, [r1, #24]
   35f2c:	e3130020 	tst	r3, #32
   35f30:	1a000010 	bne	35f78 <UartMaxi::txPumpPrime()+0x98>
        return _getPos;
   35f34:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
        _getPos++;
   35f38:	e594302c 	ldr	r3, [r4, #44]	; 0x2c
            uint8_t val = _pTxBuffer[_txBufferPosn.posToGet()];
   35f3c:	e7de0000 	ldrb	r0, [lr, r0]
   35f40:	e2833001 	add	r3, r3, #1
   35f44:	e584302c 	str	r3, [r4, #44]	; 0x2c
        if (_getPos >= _bufLen)
   35f48:	e594c02c 	ldr	ip, [r4, #44]	; 0x2c
   35f4c:	e5943030 	ldr	r3, [r4, #48]	; 0x30
   35f50:	e15c0003 	cmp	ip, r3
            _getPos = 0;
   35f54:	2584202c 	strcs	r2, [r4, #44]	; 0x2c
            WR32(ARM_UART0_DR, val);
   35f58:	e5810000 	str	r0, [r1]
        PeripheralExit();
   35f5c:	ee072fba 	mcr	15, 0, r2, cr7, cr10, {5}
        return _putPos != _getPos;
   35f60:	e5940028 	ldr	r0, [r4, #40]	; 0x28
   35f64:	e594302c 	ldr	r3, [r4, #44]	; 0x2c
    while(_txBufferPosn.canGet() && _pTxBuffer)
   35f68:	e1500003 	cmp	r0, r3
   35f6c:	1affffec 	bne	35f24 <UartMaxi::txPumpPrime()+0x44>
}
   35f70:	e8bd4010 	pop	{r4, lr}
    lowlev_enable_irq();
   35f74:	eaff4859 	b	80e0 <lowlev_enable_irq>
            WR32(ARM_UART0_IMSC, RD32(ARM_UART0_IMSC) | UART0_INT_TX);
   35f78:	e59f2010 	ldr	r2, [pc, #16]	; 35f90 <UartMaxi::txPumpPrime()+0xb0>
}
   35f7c:	e8bd4010 	pop	{r4, lr}
            WR32(ARM_UART0_IMSC, RD32(ARM_UART0_IMSC) | UART0_INT_TX);
   35f80:	e5923038 	ldr	r3, [r2, #56]	; 0x38
   35f84:	e3833020 	orr	r3, r3, #32
   35f88:	e5823038 	str	r3, [r2, #56]	; 0x38
    lowlev_enable_irq();
   35f8c:	eaff4853 	b	80e0 <lowlev_enable_irq>
   35f90:	20201000 	.word	0x20201000

00035f94 <UartMaxi::read()>:
    if ((!_pRxBuffer) || (!_rxBufferPosn.canGet()))
   35f94:	e5901000 	ldr	r1, [r0]
{
   35f98:	e1a03000 	mov	r3, r0
    if ((!_pRxBuffer) || (!_rxBufferPosn.canGet()))
   35f9c:	e3510000 	cmp	r1, #0
   35fa0:	0a00000e 	beq	35fe0 <UartMaxi::read()+0x4c>
   35fa4:	e5900004 	ldr	r0, [r0, #4]
   35fa8:	e5932008 	ldr	r2, [r3, #8]
   35fac:	e1500002 	cmp	r0, r2
   35fb0:	0a00000a 	beq	35fe0 <UartMaxi::read()+0x4c>
    int ch = _pRxBuffer[_rxBufferPosn._getPos];
   35fb4:	e5930008 	ldr	r0, [r3, #8]
        _getPos++;
   35fb8:	e5932008 	ldr	r2, [r3, #8]
   35fbc:	e7d10000 	ldrb	r0, [r1, r0]
   35fc0:	e2822001 	add	r2, r2, #1
   35fc4:	e5832008 	str	r2, [r3, #8]
        if (_getPos >= _bufLen)
   35fc8:	e5931008 	ldr	r1, [r3, #8]
   35fcc:	e593200c 	ldr	r2, [r3, #12]
   35fd0:	e1510002 	cmp	r1, r2
            _getPos = 0;
   35fd4:	23a02000 	movcs	r2, #0
   35fd8:	25832008 	strcs	r2, [r3, #8]
   35fdc:	e12fff1e 	bx	lr
        return -1;
   35fe0:	e3e00000 	mvn	r0, #0
}
   35fe4:	e12fff1e 	bx	lr

00035fe8 <UartMaxi::poll()>:
        return _putPos != _getPos;
   35fe8:	e5902004 	ldr	r2, [r0, #4]
   35fec:	e5900008 	ldr	r0, [r0, #8]
}
   35ff0:	e0520000 	subs	r0, r2, r0
   35ff4:	13a00001 	movne	r0, #1
   35ff8:	e12fff1e 	bx	lr

00035ffc <UartMaxi::peek()>:
    if ((!_pRxBuffer) || (!_rxBufferPosn.canGet()))
   35ffc:	e5903000 	ldr	r3, [r0]
   36000:	e3530000 	cmp	r3, #0
   36004:	0a000006 	beq	36024 <UartMaxi::peek()+0x28>
   36008:	e5901004 	ldr	r1, [r0, #4]
   3600c:	e5902008 	ldr	r2, [r0, #8]
   36010:	e1510002 	cmp	r1, r2
   36014:	0a000002 	beq	36024 <UartMaxi::peek()+0x28>
    return _pRxBuffer[_rxBufferPosn._getPos];
   36018:	e5902008 	ldr	r2, [r0, #8]
   3601c:	e7d30002 	ldrb	r0, [r3, r2]
   36020:	e12fff1e 	bx	lr
        return -1;
   36024:	e3e00000 	mvn	r0, #0
}
   36028:	e12fff1e 	bx	lr

0003602c <UartMaxi::available()>:
    }

    unsigned int count()
    {
        unsigned int posToGet = _getPos;
   3602c:	e5903008 	ldr	r3, [r0, #8]
        if (posToGet <= _putPos)
   36030:	e5902004 	ldr	r2, [r0, #4]
   36034:	e1530002 	cmp	r3, r2
            return _putPos - posToGet;
        return _bufLen - posToGet + _putPos;
   36038:	85902004 	ldrhi	r2, [r0, #4]
   3603c:	8590000c 	ldrhi	r0, [r0, #12]
            return _putPos - posToGet;
   36040:	95900004 	ldrls	r0, [r0, #4]
        return _bufLen - posToGet + _putPos;
   36044:	80820000 	addhi	r0, r2, r0
   36048:	e0400003 	sub	r0, r0, r3
}
   3604c:	e12fff1e 	bx	lr

00036050 <UartMaxi::isr()>:
{
   36050:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    PeripheralEntry();
   36054:	e3a0c000 	mov	ip, #0
   36058:	ee07cf9a 	mcr	15, 0, ip, cr7, cr10, {4}
	WR32(ARM_UART0_ICR, RD32(ARM_UART0_MIS));
   3605c:	e59f31b0 	ldr	r3, [pc, #432]	; 36214 <UartMaxi::isr()+0x1c4>
				_nRxStatus = UART_ERROR_FRAMING;
   36060:	e3a06003 	mov	r6, #3
	while (!(RD32(ARM_UART0_FR) & UART0_FR_RXFE_MASK))
   36064:	e1a01003 	mov	r1, r3
				_nRxStatus = UART_ERROR_OVERRUN;
   36068:	e3a05002 	mov	r5, #2
				_nRxStatus = UART_ERROR_BREAK;
   3606c:	e3a04001 	mov	r4, #1
				_nRxStatus = UART_ERROR_FULL;
   36070:	e3a0e004 	mov	lr, #4
	WR32(ARM_UART0_ICR, RD32(ARM_UART0_MIS));
   36074:	e5932040 	ldr	r2, [r3, #64]	; 0x40
   36078:	e5832044 	str	r2, [r3, #68]	; 0x44
	while (!(RD32(ARM_UART0_FR) & UART0_FR_RXFE_MASK))
   3607c:	e5913018 	ldr	r3, [r1, #24]
   36080:	e3130010 	tst	r3, #16
   36084:	1a000027 	bne	36128 <UartMaxi::isr()+0xd8>
		uint32_t nDR = RD32(ARM_UART0_DR);
   36088:	e5913000 	ldr	r3, [r1]
		if (nDR & UART0_DR_BE_MASK)
   3608c:	e3130b01 	tst	r3, #1024	; 0x400
   36090:	0a000048 	beq	361b8 <UartMaxi::isr()+0x168>
            _rxBreakCount++;
   36094:	e590201c 	ldr	r2, [r0, #28]
			if (_nRxStatus == UART_ERROR_NONE)
   36098:	e5d07010 	ldrb	r7, [r0, #16]
            _rxBreakCount++;
   3609c:	e2822001 	add	r2, r2, #1
			if (_nRxStatus == UART_ERROR_NONE)
   360a0:	e3570000 	cmp	r7, #0
            _rxBreakCount++;
   360a4:	e580201c 	str	r2, [r0, #28]
				_nRxStatus = UART_ERROR_BREAK;
   360a8:	05c04010 	strbeq	r4, [r0, #16]
        if (_bufLen == 0)
   360ac:	e590200c 	ldr	r2, [r0, #12]
   360b0:	e3520000 	cmp	r2, #0
   360b4:	0a000038 	beq	3619c <UartMaxi::isr()+0x14c>
        if (_putPos == _getPos)
   360b8:	e5908004 	ldr	r8, [r0, #4]
   360bc:	e5907008 	ldr	r7, [r0, #8]
   360c0:	e1580007 	cmp	r8, r7
   360c4:	0a000008 	beq	360ec <UartMaxi::isr()+0x9c>
        unsigned int gp = _getPos;
   360c8:	e5907008 	ldr	r7, [r0, #8]
        if (_putPos > gp)
   360cc:	e5908004 	ldr	r8, [r0, #4]
   360d0:	e1570008 	cmp	r7, r8
   360d4:	2a00002c 	bcs	3618c <UartMaxi::isr()+0x13c>
            if ((_putPos != _bufLen - 1) || (gp != 0))
   360d8:	e5908004 	ldr	r8, [r0, #4]
   360dc:	e2422001 	sub	r2, r2, #1
   360e0:	e3570000 	cmp	r7, #0
   360e4:	01520008 	cmpeq	r2, r8
   360e8:	0a00002b 	beq	3619c <UartMaxi::isr()+0x14c>
    	if (_rxBufferPosn.canPut() && _pRxBuffer)
   360ec:	e5902000 	ldr	r2, [r0]
   360f0:	e3520000 	cmp	r2, #0
   360f4:	0a000028 	beq	3619c <UartMaxi::isr()+0x14c>
        return _putPos;
   360f8:	e5907004 	ldr	r7, [r0, #4]
			_pRxBuffer[_rxBufferPosn.posToPut()] = nDR & 0xFF;
   360fc:	e7c23007 	strb	r3, [r2, r7]
        _putPos++;
   36100:	e5903004 	ldr	r3, [r0, #4]
        if (_putPos >= _bufLen)
   36104:	e590200c 	ldr	r2, [r0, #12]
        _putPos++;
   36108:	e2833001 	add	r3, r3, #1
   3610c:	e5803004 	str	r3, [r0, #4]
        if (_putPos >= _bufLen)
   36110:	e5903004 	ldr	r3, [r0, #4]
   36114:	e1530002 	cmp	r3, r2
            _putPos = 0;
   36118:	2580c004 	strcs	ip, [r0, #4]
	while (!(RD32(ARM_UART0_FR) & UART0_FR_RXFE_MASK))
   3611c:	e5913018 	ldr	r3, [r1, #24]
   36120:	e3130010 	tst	r3, #16
   36124:	0affffd7 	beq	36088 <UartMaxi::isr()+0x38>
	while (!(RD32(ARM_UART0_FR) & UART0_FR_TXFF_MASK))
   36128:	e59f10e4 	ldr	r1, [pc, #228]	; 36214 <UartMaxi::isr()+0x1c4>
   3612c:	ea000010 	b	36174 <UartMaxi::isr()+0x124>
        return _putPos != _getPos;
   36130:	e590c028 	ldr	ip, [r0, #40]	; 0x28
   36134:	e590202c 	ldr	r2, [r0, #44]	; 0x2c
		if (_txBufferPosn.canGet() && _pTxBuffer)
   36138:	e15c0002 	cmp	ip, r2
   3613c:	0a00002f 	beq	36200 <UartMaxi::isr()+0x1b0>
   36140:	e5902024 	ldr	r2, [r0, #36]	; 0x24
   36144:	e3520000 	cmp	r2, #0
   36148:	0a00002c 	beq	36200 <UartMaxi::isr()+0x1b0>
        return _getPos;
   3614c:	e590c02c 	ldr	ip, [r0, #44]	; 0x2c
			WR32(ARM_UART0_DR, _pTxBuffer[_txBufferPosn.posToGet()]);
   36150:	e7d2200c 	ldrb	r2, [r2, ip]
   36154:	e5812000 	str	r2, [r1]
        _getPos++;
   36158:	e590202c 	ldr	r2, [r0, #44]	; 0x2c
        if (_getPos >= _bufLen)
   3615c:	e590c030 	ldr	ip, [r0, #48]	; 0x30
        _getPos++;
   36160:	e2822001 	add	r2, r2, #1
   36164:	e580202c 	str	r2, [r0, #44]	; 0x2c
        if (_getPos >= _bufLen)
   36168:	e590202c 	ldr	r2, [r0, #44]	; 0x2c
   3616c:	e152000c 	cmp	r2, ip
            _getPos = 0;
   36170:	2580302c 	strcs	r3, [r0, #44]	; 0x2c
	while (!(RD32(ARM_UART0_FR) & UART0_FR_TXFF_MASK))
   36174:	e5913018 	ldr	r3, [r1, #24]
   36178:	e2133020 	ands	r3, r3, #32
   3617c:	0affffeb 	beq	36130 <UartMaxi::isr()+0xe0>
    PeripheralExit();
   36180:	e3a03000 	mov	r3, #0
   36184:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}

   36188:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
            if (gp - _putPos > 1)
   3618c:	e5902004 	ldr	r2, [r0, #4]
   36190:	e0477002 	sub	r7, r7, r2
   36194:	e3570001 	cmp	r7, #1
   36198:	8affffd3 	bhi	360ec <UartMaxi::isr()+0x9c>
            _rxBufferFullCount++;
   3619c:	e5903020 	ldr	r3, [r0, #32]
			if (_nRxStatus == UART_ERROR_NONE)
   361a0:	e5d02010 	ldrb	r2, [r0, #16]
            _rxBufferFullCount++;
   361a4:	e2833001 	add	r3, r3, #1
			if (_nRxStatus == UART_ERROR_NONE)
   361a8:	e3520000 	cmp	r2, #0
            _rxBufferFullCount++;
   361ac:	e5803020 	str	r3, [r0, #32]
				_nRxStatus = UART_ERROR_FULL;
   361b0:	05c0e010 	strbeq	lr, [r0, #16]
   361b4:	eaffffb0 	b	3607c <UartMaxi::isr()+0x2c>
		else if (nDR & UART0_DR_OE_MASK)
   361b8:	e3130b02 	tst	r3, #2048	; 0x800
   361bc:	0a000006 	beq	361dc <UartMaxi::isr()+0x18c>
            _rxOverrunErrCount++;
   361c0:	e5902018 	ldr	r2, [r0, #24]
			if (_nRxStatus == UART_ERROR_NONE)
   361c4:	e5d07010 	ldrb	r7, [r0, #16]
            _rxOverrunErrCount++;
   361c8:	e2822001 	add	r2, r2, #1
			if (_nRxStatus == UART_ERROR_NONE)
   361cc:	e3570000 	cmp	r7, #0
            _rxOverrunErrCount++;
   361d0:	e5802018 	str	r2, [r0, #24]
				_nRxStatus = UART_ERROR_OVERRUN;
   361d4:	05c05010 	strbeq	r5, [r0, #16]
   361d8:	eaffffb3 	b	360ac <UartMaxi::isr()+0x5c>
		else if (nDR & UART0_DR_FE_MASK)
   361dc:	e3130c01 	tst	r3, #256	; 0x100
   361e0:	0affffb1 	beq	360ac <UartMaxi::isr()+0x5c>
            _rxFramingErrCount++;
   361e4:	e5902014 	ldr	r2, [r0, #20]
			if (_nRxStatus == UART_ERROR_NONE)
   361e8:	e5d07010 	ldrb	r7, [r0, #16]
            _rxFramingErrCount++;
   361ec:	e2822001 	add	r2, r2, #1
			if (_nRxStatus == UART_ERROR_NONE)
   361f0:	e3570000 	cmp	r7, #0
            _rxFramingErrCount++;
   361f4:	e5802014 	str	r2, [r0, #20]
				_nRxStatus = UART_ERROR_FRAMING;
   361f8:	05c06010 	strbeq	r6, [r0, #16]
   361fc:	eaffffaa 	b	360ac <UartMaxi::isr()+0x5c>
			WR32(ARM_UART0_IMSC, RD32(ARM_UART0_IMSC) & ~UART0_INT_TX);
   36200:	e59f200c 	ldr	r2, [pc, #12]	; 36214 <UartMaxi::isr()+0x1c4>
   36204:	e5923038 	ldr	r3, [r2, #56]	; 0x38
   36208:	e3c33020 	bic	r3, r3, #32
   3620c:	e5823038 	str	r3, [r2, #56]	; 0x38
			break;
   36210:	eaffffda 	b	36180 <UartMaxi::isr()+0x130>
   36214:	20201000 	.word	0x20201000

00036218 <UartMini::isrStatic(void*)>:
            break;
    }
}

void UartMini::isrStatic(void* pParam)
{
   36218:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    unsigned int rb, rc;

    // An interrupt has occurred, find out why
    while (1)
    {
        rb = RD32(ARM_AUX_MU_IIR_REG);
   3621c:	e59f1044 	ldr	r1, [pc, #68]	; 36268 <UartMini::isrStatic(void*)+0x50>
        if ((rb & 1) == 1)
            break; // No more interrupts
        if ((rb & 6) == 4) {
            // Receiver holds a valid byte
            rc = RD32(ARM_AUX_MU_IO_REG); // Read byte from rx fifo
            rxbuffer[rxhead] = rc & 0xFF;
   36220:	e59f0044 	ldr	r0, [pc, #68]	; 3626c <UartMini::isrStatic(void*)+0x54>
   36224:	e59fe044 	ldr	lr, [pc, #68]	; 36270 <UartMini::isrStatic(void*)+0x58>
            rxhead = (rxhead + 1) & RXBUFMASK;
   36228:	e59fc044 	ldr	ip, [pc, #68]	; 36274 <UartMini::isrStatic(void*)+0x5c>
        rb = RD32(ARM_AUX_MU_IIR_REG);
   3622c:	e5913048 	ldr	r3, [r1, #72]	; 0x48
        if ((rb & 1) == 1)
   36230:	e3130001 	tst	r3, #1
        if ((rb & 6) == 4) {
   36234:	e2032006 	and	r2, r3, #6
        if ((rb & 1) == 1)
   36238:	149df004 	popne	{pc}		; (ldrne pc, [sp], #4)
        if ((rb & 6) == 4) {
   3623c:	e3520004 	cmp	r2, #4
   36240:	1afffff9 	bne	3622c <UartMini::isrStatic(void*)+0x14>
            rc = RD32(ARM_AUX_MU_IO_REG); // Read byte from rx fifo
   36244:	e5913040 	ldr	r3, [r1, #64]	; 0x40
            rxbuffer[rxhead] = rc & 0xFF;
   36248:	e5902000 	ldr	r2, [r0]
   3624c:	e6ef3073 	uxtb	r3, r3
   36250:	e7ce3002 	strb	r3, [lr, r2]
            rxhead = (rxhead + 1) & RXBUFMASK;
   36254:	e5903000 	ldr	r3, [r0]
   36258:	e2833001 	add	r3, r3, #1
   3625c:	e003300c 	and	r3, r3, ip
   36260:	e5803000 	str	r3, [r0]
   36264:	eafffff0 	b	3622c <UartMini::isrStatic(void*)+0x14>
   36268:	20215000 	.word	0x20215000
   3626c:	00084410 	.word	0x00084410
   36270:	00084418 	.word	0x00084418
   36274:	00007fff 	.word	0x00007fff

00036278 <UartMini::UartMini()>:
}
   36278:	e12fff1e 	bx	lr

0003627c <UartMini::~UartMini()>:
}
   3627c:	e12fff1e 	bx	lr

00036280 <UartMini::read()>:
    if (rxtail != rxhead) {
   36280:	e59f2034 	ldr	r2, [pc, #52]	; 362bc <UartMini::read()+0x3c>
   36284:	e5921004 	ldr	r1, [r2, #4]
   36288:	e5923000 	ldr	r3, [r2]
   3628c:	e1510003 	cmp	r1, r3
        int ch = rxbuffer[rxtail];
   36290:	15923004 	ldrne	r3, [r2, #4]
   36294:	159f1024 	ldrne	r1, [pc, #36]	; 362c0 <UartMini::read()+0x40>
   36298:	17d10003 	ldrbne	r0, [r1, r3]
        rxtail = (rxtail + 1) & RXBUFMASK;
   3629c:	15923004 	ldrne	r3, [r2, #4]
        int ch = rxbuffer[rxtail];
   362a0:	16ef0070 	uxtbne	r0, r0
        rxtail = (rxtail + 1) & RXBUFMASK;
   362a4:	12833001 	addne	r3, r3, #1
   362a8:	11a03883 	lslne	r3, r3, #17
   362ac:	11a038a3 	lsrne	r3, r3, #17
   362b0:	15823004 	strne	r3, [r2, #4]
    return 0;
   362b4:	03a00000 	moveq	r0, #0
}
   362b8:	e12fff1e 	bx	lr
   362bc:	00084410 	.word	0x00084410
   362c0:	00084418 	.word	0x00084418

000362c4 <UartMini::poll()>:
    return rxtail != rxhead;
   362c4:	e59f3010 	ldr	r3, [pc, #16]	; 362dc <UartMini::poll()+0x18>
   362c8:	e5930004 	ldr	r0, [r3, #4]
   362cc:	e5933000 	ldr	r3, [r3]
}
   362d0:	e0500003 	subs	r0, r0, r3
   362d4:	13a00001 	movne	r0, #1
   362d8:	e12fff1e 	bx	lr
   362dc:	00084410 	.word	0x00084410

000362e0 <UartMini::write(unsigned int)>:
        if (RD32(ARM_AUX_MU_LSR_REG) & 0x20)
   362e0:	e59f2014 	ldr	r2, [pc, #20]	; 362fc <UartMini::write(unsigned int)+0x1c>
   362e4:	e5923054 	ldr	r3, [r2, #84]	; 0x54
   362e8:	e3130020 	tst	r3, #32
   362ec:	0afffffc 	beq	362e4 <UartMini::write(unsigned int)+0x4>
    WR32(ARM_AUX_MU_IO_REG, c);
   362f0:	e5821040 	str	r1, [r2, #64]	; 0x40
}
   362f4:	e3a00001 	mov	r0, #1
   362f8:	e12fff1e 	bx	lr
   362fc:	20215000 	.word	0x20215000

00036300 <UartMini::write(char const*, unsigned int)>:
    for (unsigned int i = 0; i < size; i++)
   36300:	e3520000 	cmp	r2, #0
   36304:	012fff1e 	bxeq	lr
   36308:	e081c002 	add	ip, r1, r2
        if (RD32(ARM_AUX_MU_LSR_REG) & 0x20)
   3630c:	e59f2024 	ldr	r2, [pc, #36]	; 36338 <UartMini::write(char const*, unsigned int)+0x38>
   36310:	e24cc001 	sub	ip, ip, #1
   36314:	e2411001 	sub	r1, r1, #1
        write(data[i]);
   36318:	e5f10001 	ldrb	r0, [r1, #1]!
        if (RD32(ARM_AUX_MU_LSR_REG) & 0x20)
   3631c:	e5923054 	ldr	r3, [r2, #84]	; 0x54
   36320:	e3130020 	tst	r3, #32
   36324:	0afffffc 	beq	3631c <UartMini::write(char const*, unsigned int)+0x1c>
    for (unsigned int i = 0; i < size; i++)
   36328:	e151000c 	cmp	r1, ip
    WR32(ARM_AUX_MU_IO_REG, c);
   3632c:	e5820040 	str	r0, [r2, #64]	; 0x40
    for (unsigned int i = 0; i < size; i++)
   36330:	1afffff8 	bne	36318 <UartMini::write(char const*, unsigned int)+0x18>
   36334:	e12fff1e 	bx	lr
   36338:	20215000 	.word	0x20215000

0003633c <UartMini::writeStr(char const*)>:
    while (*pD)
   3633c:	e5d10000 	ldrb	r0, [r1]
   36340:	e3500000 	cmp	r0, #0
   36344:	012fff1e 	bxeq	lr
        if (RD32(ARM_AUX_MU_LSR_REG) & 0x20)
   36348:	e59f201c 	ldr	r2, [pc, #28]	; 3636c <UartMini::writeStr(char const*)+0x30>
   3634c:	e5923054 	ldr	r3, [r2, #84]	; 0x54
   36350:	e3130020 	tst	r3, #32
   36354:	0afffffc 	beq	3634c <UartMini::writeStr(char const*)+0x10>
    WR32(ARM_AUX_MU_IO_REG, c);
   36358:	e5820040 	str	r0, [r2, #64]	; 0x40
    while (*pD)
   3635c:	e5f10001 	ldrb	r0, [r1, #1]!
   36360:	e3500000 	cmp	r0, #0
   36364:	1afffff8 	bne	3634c <UartMini::writeStr(char const*)+0x10>
   36368:	e12fff1e 	bx	lr
   3636c:	20215000 	.word	0x20215000

00036370 <UartMini::clear()>:
{
   36370:	e59f3018 	ldr	r3, [pc, #24]	; 36390 <UartMini::clear()+0x20>
        if (RD32(ARM_AUX_MU_LSR_REG) & 0x40)
   36374:	e59f1018 	ldr	r1, [pc, #24]	; 36394 <UartMini::clear()+0x24>
   36378:	e5912054 	ldr	r2, [r1, #84]	; 0x54
   3637c:	e3120040 	tst	r2, #64	; 0x40
   36380:	112fff1e 	bxne	lr
    for (int i=0; i < 100000; i++) {
   36384:	e2533001 	subs	r3, r3, #1
   36388:	1afffffa 	bne	36378 <UartMini::clear()+0x8>
   3638c:	e12fff1e 	bx	lr
   36390:	000186a0 	.word	0x000186a0
   36394:	20215000 	.word	0x20215000

00036398 <UartMini::isr()>:
   36398:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   3639c:	e59f1044 	ldr	r1, [pc, #68]	; 363e8 <UartMini::isr()+0x50>
   363a0:	e59f0044 	ldr	r0, [pc, #68]	; 363ec <UartMini::isr()+0x54>
   363a4:	e59fe044 	ldr	lr, [pc, #68]	; 363f0 <UartMini::isr()+0x58>
   363a8:	e59fc044 	ldr	ip, [pc, #68]	; 363f4 <UartMini::isr()+0x5c>
   363ac:	e5913048 	ldr	r3, [r1, #72]	; 0x48
   363b0:	e3130001 	tst	r3, #1
   363b4:	e2032006 	and	r2, r3, #6
   363b8:	149df004 	popne	{pc}		; (ldrne pc, [sp], #4)
   363bc:	e3520004 	cmp	r2, #4
   363c0:	1afffff9 	bne	363ac <UartMini::isr()+0x14>
   363c4:	e5913040 	ldr	r3, [r1, #64]	; 0x40
   363c8:	e5902000 	ldr	r2, [r0]
   363cc:	e6ef3073 	uxtb	r3, r3
   363d0:	e7ce3002 	strb	r3, [lr, r2]
   363d4:	e5903000 	ldr	r3, [r0]
   363d8:	e2833001 	add	r3, r3, #1
   363dc:	e003300c 	and	r3, r3, ip
   363e0:	e5803000 	str	r3, [r0]
   363e4:	eafffff0 	b	363ac <UartMini::isr()+0x14>
   363e8:	20215000 	.word	0x20215000
   363ec:	00084410 	.word	0x00084410
   363f0:	00084418 	.word	0x00084418
   363f4:	00007fff 	.word	0x00007fff

000363f8 <UartMini::setup(unsigned int, int, int)>:
    }
}

//------------------------------------------------------------------------
bool UartMini::setup(unsigned int baudRate, [[maybe_unused]]int rxBufSize, [[maybe_unused]]int txBufSize)
{
   363f8:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    WR32(ARM_AUX_MU_IER_REG, 0);
    WR32(ARM_AUX_MU_CNTL_REG, 0);
    WR32(ARM_AUX_MU_LCR_REG, 3);
    WR32(ARM_AUX_MU_MCR_REG, 0);
    // Enable RX interrupt
    WR32(ARM_AUX_MU_IER_REG, 0x05);
   363fc:	e3a02005 	mov	r2, #5
    WR32(ARM_AUX_MU_IER_REG, 0);
   36400:	e3a05000 	mov	r5, #0
    WR32(ARM_AUX_MU_LCR_REG, 3);
   36404:	e3a07003 	mov	r7, #3
    WR32(ARM_AUX_ENABLE, 1);
   36408:	e3a06001 	mov	r6, #1
    WR32(ARM_AUX_MU_IIR_REG, 0xC6);
   3640c:	e3a030c6 	mov	r3, #198	; 0xc6
    WR32(ARM_AUX_ENABLE, 1);
   36410:	e59f405c 	ldr	r4, [pc, #92]	; 36474 <UartMini::setup(unsigned int, int, int)+0x7c>
    // WR32(AUX_MU_BAUD_REG,270);
    //WR32(AUX_MU_BAUD_REG, 33); // 921,600 baud
    WR32(ARM_AUX_MU_BAUD_REG, ((ARM_AUX_MU_CLOCK/(baudRate*8))-1));
   36414:	e1a01711 	lsl	r1, r1, r7
    WR32(ARM_AUX_ENABLE, 1);
   36418:	e5846004 	str	r6, [r4, #4]
    WR32(ARM_AUX_MU_BAUD_REG, ((ARM_AUX_MU_CLOCK/(baudRate*8))-1));
   3641c:	e59f0054 	ldr	r0, [pc, #84]	; 36478 <UartMini::setup(unsigned int, int, int)+0x80>
    WR32(ARM_AUX_MU_IER_REG, 0);
   36420:	e5845044 	str	r5, [r4, #68]	; 0x44
    WR32(ARM_AUX_MU_CNTL_REG, 0);
   36424:	e5845060 	str	r5, [r4, #96]	; 0x60
    WR32(ARM_AUX_MU_LCR_REG, 3);
   36428:	e584704c 	str	r7, [r4, #76]	; 0x4c
    WR32(ARM_AUX_MU_MCR_REG, 0);
   3642c:	e5845050 	str	r5, [r4, #80]	; 0x50
    WR32(ARM_AUX_MU_IER_REG, 0x05);
   36430:	e5842044 	str	r2, [r4, #68]	; 0x44
    WR32(ARM_AUX_MU_IIR_REG, 0xC6);
   36434:	e5843048 	str	r3, [r4, #72]	; 0x48
    WR32(ARM_AUX_MU_BAUD_REG, ((ARM_AUX_MU_CLOCK/(baudRate*8))-1));
   36438:	eb00615d 	bl	4e9b4 <__udivsi3>

    ra = RD32(ARM_GPIO_GPFSEL1);
   3643c:	e59f1038 	ldr	r1, [pc, #56]	; 3647c <UartMini::setup(unsigned int, int, int)+0x84>
    WR32(ARM_AUX_MU_BAUD_REG, ((ARM_AUX_MU_CLOCK/(baudRate*8))-1));
   36440:	e2400001 	sub	r0, r0, #1
   36444:	e5840068 	str	r0, [r4, #104]	; 0x68
    ra = RD32(ARM_GPIO_GPFSEL1);
   36448:	e5913004 	ldr	r3, [r1, #4]
    WR32(ARM_GPIO_GPFSEL1, ra);

    WR32(ARM_AUX_MU_CNTL_REG, 3);

    // // Initialise the interrupt handler
    CInterrupts::connectIRQ(ARM_IRQ_AUX, isrStatic, NULL);
   3644c:	e1a02005 	mov	r2, r5
    ra |= 2 << 15; //alt5
   36450:	e3c33a3f 	bic	r3, r3, #258048	; 0x3f000
   36454:	e3833a12 	orr	r3, r3, #73728	; 0x12000
    WR32(ARM_GPIO_GPFSEL1, ra);
   36458:	e5813004 	str	r3, [r1, #4]
    CInterrupts::connectIRQ(ARM_IRQ_AUX, isrStatic, NULL);
   3645c:	e3a0001d 	mov	r0, #29
   36460:	e59f1018 	ldr	r1, [pc, #24]	; 36480 <UartMini::setup(unsigned int, int, int)+0x88>
    WR32(ARM_AUX_MU_CNTL_REG, 3);
   36464:	e5847060 	str	r7, [r4, #96]	; 0x60
    CInterrupts::connectIRQ(ARM_IRQ_AUX, isrStatic, NULL);
   36468:	ebfff124 	bl	32900 <CInterrupts::connectIRQ(unsigned int, void (*)(void*), void*)>
    return true;
}
   3646c:	e1a00006 	mov	r0, r6
   36470:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   36474:	20215000 	.word	0x20215000
   36478:	0ee6b280 	.word	0x0ee6b280
   3647c:	20200000 	.word	0x20200000
   36480:	00036218 	.word	0x00036218

00036484 <CBcmMailBox::CBcmMailBox(unsigned int)>:
// #include "assert.h"

// CSpinLock CBcmMailBox::s_SpinLock (TASK_LEVEL);

CBcmMailBox::CBcmMailBox (unsigned nChannel)
:	m_nChannel (nChannel)
   36484:	e5801000 	str	r1, [r0]
{
}
   36488:	e12fff1e 	bx	lr

0003648c <CBcmMailBox::~CBcmMailBox()>:

CBcmMailBox::~CBcmMailBox (void)
{
}
   3648c:	e12fff1e 	bx	lr

00036490 <CBcmMailBox::WriteRead(unsigned long)>:

uint32_t CBcmMailBox::WriteRead (uint32_t nData)
{
   36490:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
	PeripheralEntry ();
   36494:	e3a03000 	mov	r3, #0
{
   36498:	e1a06000 	mov	r6, r0
   3649c:	e1a05001 	mov	r5, r1
	PeripheralEntry ();
   364a0:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
	return nResult;
}

void CBcmMailBox::Flush (void)
{
	while (!(RD32 (MAILBOX0_STATUS) & MAILBOX_STATUS_EMPTY))
   364a4:	e59f4070 	ldr	r4, [pc, #112]	; 3651c <CBcmMailBox::WriteRead(unsigned long)+0x8c>
   364a8:	e5943898 	ldr	r3, [r4, #2200]	; 0x898
   364ac:	e3130101 	tst	r3, #1073741824	; 0x40000000
   364b0:	1a000006 	bne	364d0 <CBcmMailBox::WriteRead(unsigned long)+0x40>
	{
		RD32 (MAILBOX0_READ);

		microsDelay(20000);
   364b4:	e59f7064 	ldr	r7, [pc, #100]	; 36520 <CBcmMailBox::WriteRead(unsigned long)+0x90>
   364b8:	e1a00007 	mov	r0, r7
		RD32 (MAILBOX0_READ);
   364bc:	e5943880 	ldr	r3, [r4, #2176]	; 0x880
		microsDelay(20000);
   364c0:	eb0000b8 	bl	367a8 <microsDelay>
	while (!(RD32 (MAILBOX0_STATUS) & MAILBOX_STATUS_EMPTY))
   364c4:	e5943898 	ldr	r3, [r4, #2200]	; 0x898
   364c8:	e3130101 	tst	r3, #1073741824	; 0x40000000
   364cc:	0afffff9 	beq	364b8 <CBcmMailBox::WriteRead(unsigned long)+0x28>
	return nResult & ~0xF;
}

void CBcmMailBox::Write (uint32_t nData)
{
	while (RD32 (MAILBOX1_STATUS) & MAILBOX_STATUS_FULL)
   364d0:	e59f0044 	ldr	r0, [pc, #68]	; 3651c <CBcmMailBox::WriteRead(unsigned long)+0x8c>
   364d4:	e59038b8 	ldr	r3, [r0, #2232]	; 0x8b8
   364d8:	e3530000 	cmp	r3, #0
   364dc:	bafffffc 	blt	364d4 <CBcmMailBox::WriteRead(unsigned long)+0x44>
	{
		// do nothing
	}

	// assert ((nData & 0xF) == 0);
	WR32 (MAILBOX1_WRITE, m_nChannel | nData);	// channel number is in the lower 4 bits
   364e0:	e5963000 	ldr	r3, [r6]
		while (RD32 (MAILBOX0_STATUS) & MAILBOX_STATUS_EMPTY)
   364e4:	e59f2030 	ldr	r2, [pc, #48]	; 3651c <CBcmMailBox::WriteRead(unsigned long)+0x8c>
	WR32 (MAILBOX1_WRITE, m_nChannel | nData);	// channel number is in the lower 4 bits
   364e8:	e1855003 	orr	r5, r5, r3
   364ec:	e58058a0 	str	r5, [r0, #2208]	; 0x8a0
   364f0:	e596c000 	ldr	ip, [r6]
		while (RD32 (MAILBOX0_STATUS) & MAILBOX_STATUS_EMPTY)
   364f4:	e5923898 	ldr	r3, [r2, #2200]	; 0x898
   364f8:	e2133101 	ands	r3, r3, #1073741824	; 0x40000000
   364fc:	1afffffc 	bne	364f4 <CBcmMailBox::WriteRead(unsigned long)+0x64>
		nResult = RD32 (MAILBOX0_READ);
   36500:	e5920880 	ldr	r0, [r2, #2176]	; 0x880
	while ((nResult & 0xF) != m_nChannel);		// channel number is in the lower 4 bits
   36504:	e200100f 	and	r1, r0, #15
   36508:	e151000c 	cmp	r1, ip
   3650c:	1afffff8 	bne	364f4 <CBcmMailBox::WriteRead(unsigned long)+0x64>
	PeripheralExit ();
   36510:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
}
   36514:	e3c0000f 	bic	r0, r0, #15
   36518:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   3651c:	2000b000 	.word	0x2000b000
   36520:	00004e20 	.word	0x00004e20

00036524 <CBcmMailBox::Flush()>:
{
   36524:	e92d4070 	push	{r4, r5, r6, lr}
	while (!(RD32 (MAILBOX0_STATUS) & MAILBOX_STATUS_EMPTY))
   36528:	e59f4028 	ldr	r4, [pc, #40]	; 36558 <CBcmMailBox::Flush()+0x34>
   3652c:	e5943898 	ldr	r3, [r4, #2200]	; 0x898
   36530:	e3130101 	tst	r3, #1073741824	; 0x40000000
   36534:	18bd8070 	popne	{r4, r5, r6, pc}
		microsDelay(20000);
   36538:	e59f501c 	ldr	r5, [pc, #28]	; 3655c <CBcmMailBox::Flush()+0x38>
   3653c:	e1a00005 	mov	r0, r5
		RD32 (MAILBOX0_READ);
   36540:	e5943880 	ldr	r3, [r4, #2176]	; 0x880
		microsDelay(20000);
   36544:	eb000097 	bl	367a8 <microsDelay>
	while (!(RD32 (MAILBOX0_STATUS) & MAILBOX_STATUS_EMPTY))
   36548:	e5943898 	ldr	r3, [r4, #2200]	; 0x898
   3654c:	e3130101 	tst	r3, #1073741824	; 0x40000000
   36550:	0afffff9 	beq	3653c <CBcmMailBox::Flush()+0x18>
   36554:	e8bd8070 	pop	{r4, r5, r6, pc}
   36558:	2000b000 	.word	0x2000b000
   3655c:	00004e20 	.word	0x00004e20

00036560 <CBcmMailBox::Read()>:
{
   36560:	e5901000 	ldr	r1, [r0]
		while (RD32 (MAILBOX0_STATUS) & MAILBOX_STATUS_EMPTY)
   36564:	e59f2020 	ldr	r2, [pc, #32]	; 3658c <CBcmMailBox::Read()+0x2c>
   36568:	e5923898 	ldr	r3, [r2, #2200]	; 0x898
   3656c:	e3130101 	tst	r3, #1073741824	; 0x40000000
   36570:	1afffffc 	bne	36568 <CBcmMailBox::Read()+0x8>
		nResult = RD32 (MAILBOX0_READ);
   36574:	e5920880 	ldr	r0, [r2, #2176]	; 0x880
	while ((nResult & 0xF) != m_nChannel);		// channel number is in the lower 4 bits
   36578:	e200300f 	and	r3, r0, #15
   3657c:	e1530001 	cmp	r3, r1
   36580:	1afffff8 	bne	36568 <CBcmMailBox::Read()+0x8>
}
   36584:	e3c0000f 	bic	r0, r0, #15
   36588:	e12fff1e 	bx	lr
   3658c:	2000b000 	.word	0x2000b000

00036590 <CBcmMailBox::Write(unsigned long)>:
	while (RD32 (MAILBOX1_STATUS) & MAILBOX_STATUS_FULL)
   36590:	e59f2018 	ldr	r2, [pc, #24]	; 365b0 <CBcmMailBox::Write(unsigned long)+0x20>
   36594:	e59238b8 	ldr	r3, [r2, #2232]	; 0x8b8
   36598:	e3530000 	cmp	r3, #0
   3659c:	bafffffc 	blt	36594 <CBcmMailBox::Write(unsigned long)+0x4>
	WR32 (MAILBOX1_WRITE, m_nChannel | nData);	// channel number is in the lower 4 bits
   365a0:	e5903000 	ldr	r3, [r0]
   365a4:	e1811003 	orr	r1, r1, r3
   365a8:	e58218a0 	str	r1, [r2, #2208]	; 0x8a0
}
   365ac:	e12fff1e 	bx	lr
   365b0:	2000b000 	.word	0x2000b000

000365b4 <CBcmPropertyTags::CBcmPropertyTags()>:
	uint8_t	Tags[0];
	// end tag follows
}
PACKED;

CBcmPropertyTags::CBcmPropertyTags (void)
   365b4:	e92d4010 	push	{r4, lr}
   365b8:	e1a04000 	mov	r4, r0
:	m_MailBox (BCM_MAILBOX_PROP_OUT)
   365bc:	e3a01008 	mov	r1, #8
   365c0:	ebffffaf 	bl	36484 <CBcmMailBox::CBcmMailBox(unsigned int)>
{
}
   365c4:	e1a00004 	mov	r0, r4
   365c8:	e8bd8010 	pop	{r4, pc}

000365cc <CBcmPropertyTags::~CBcmPropertyTags()>:

CBcmPropertyTags::~CBcmPropertyTags (void)
   365cc:	e92d4010 	push	{r4, lr}
   365d0:	e1a04000 	mov	r4, r0
   365d4:	ebffffac 	bl	3648c <CBcmMailBox::~CBcmMailBox()>
{
}
   365d8:	e1a00004 	mov	r0, r4
   365dc:	e8bd8010 	pop	{r4, pc}

000365e0 <CBcmPropertyTags::GetTag(unsigned long, void*, unsigned int, unsigned int)>:

bool CBcmPropertyTags::GetTag (uint32_t nTagId, void *pTag, unsigned nTagSize, unsigned nRequestParmSize)
{
   365e0:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   365e4:	e1a04002 	mov	r4, r2
   365e8:	e1a05003 	mov	r5, r3
	// assert (pTag != 0);
	// assert (nTagSize >= sizeof (TPropertyTagSimple));

	TPropertyTag *pHeader = (TPropertyTag *) pTag;
	pHeader->nTagId = nTagId;
   365ec:	e3a06000 	mov	r6, #0
	// assert ((nBufferSize & 3) == 0);

	TPropertyBuffer *pBuffer =
		(TPropertyBuffer *) GetCoherentPage (COHERENT_SLOT_PROP_MAILBOX);

	pBuffer->nBufferSize = nBufferSize;
   365f0:	e3a08503 	mov	r8, #12582912	; 0xc00000
	pHeader->nValueBufSize = nTagSize - sizeof (TPropertyTag);
   365f4:	e243c00c 	sub	ip, r3, #12
{
   365f8:	e59d2020 	ldr	r2, [sp, #32]
	pHeader->nTagId = nTagId;
   365fc:	e1a03421 	lsr	r3, r1, #8
   36600:	e5c43001 	strb	r3, [r4, #1]
   36604:	e1a03821 	lsr	r3, r1, #16
	pHeader->nValueLength = nRequestParmSize & ~VALUE_LENGTH_RESPONSE;
   36608:	e3c22102 	bic	r2, r2, #-2147483648	; 0x80000000
	pHeader->nTagId = nTagId;
   3660c:	e5c41000 	strb	r1, [r4]
   36610:	e5c43002 	strb	r3, [r4, #2]
	pBuffer->nCode = CODE_REQUEST;
	memcpy (pBuffer->Tags, pTags, nTagsSize);
   36614:	e59f70e8 	ldr	r7, [pc, #232]	; 36704 <CBcmPropertyTags::GetTag(unsigned long, void*, unsigned int, unsigned int)+0x124>
	pHeader->nValueBufSize = nTagSize - sizeof (TPropertyTag);
   36618:	e1a0382c 	lsr	r3, ip, #16
{
   3661c:	e1a09000 	mov	r9, r0
	pHeader->nTagId = nTagId;
   36620:	e1a01c21 	lsr	r1, r1, #24
	pHeader->nValueBufSize = nTagSize - sizeof (TPropertyTag);
   36624:	e1a0042c 	lsr	r0, ip, #8
	pHeader->nTagId = nTagId;
   36628:	e5c41003 	strb	r1, [r4, #3]
	pHeader->nValueBufSize = nTagSize - sizeof (TPropertyTag);
   3662c:	e5c4c004 	strb	ip, [r4, #4]
   36630:	e5c40005 	strb	r0, [r4, #5]
	pHeader->nValueLength = nRequestParmSize & ~VALUE_LENGTH_RESPONSE;
   36634:	e1a0e422 	lsr	lr, r2, #8
	pHeader->nValueBufSize = nTagSize - sizeof (TPropertyTag);
   36638:	e5c43006 	strb	r3, [r4, #6]
   3663c:	e1a0cc2c 	lsr	ip, ip, #24
	pHeader->nValueLength = nRequestParmSize & ~VALUE_LENGTH_RESPONSE;
   36640:	e1a00822 	lsr	r0, r2, #16
   36644:	e1a01c22 	lsr	r1, r2, #24
	unsigned nBufferSize = sizeof (TPropertyBuffer) + nTagsSize + sizeof (uint32_t);
   36648:	e285300c 	add	r3, r5, #12
	pHeader->nValueLength = nRequestParmSize & ~VALUE_LENGTH_RESPONSE;
   3664c:	e5c42008 	strb	r2, [r4, #8]
   36650:	e5c4000a 	strb	r0, [r4, #10]
   36654:	e5c4100b 	strb	r1, [r4, #11]
	pHeader->nValueBufSize = nTagSize - sizeof (TPropertyTag);
   36658:	e5c4c007 	strb	ip, [r4, #7]
	pHeader->nValueLength = nRequestParmSize & ~VALUE_LENGTH_RESPONSE;
   3665c:	e5c4e009 	strb	lr, [r4, #9]
	memcpy (pBuffer->Tags, pTags, nTagsSize);
   36660:	e1a02005 	mov	r2, r5
	pBuffer->nCode = CODE_REQUEST;
   36664:	e8880048 	stm	r8, {r3, r6}
	memcpy (pBuffer->Tags, pTags, nTagsSize);
   36668:	e1a01004 	mov	r1, r4
   3666c:	e1a00007 	mov	r0, r7
   36670:	eb0059bc 	bl	4cd68 <memcpy>

	uint32_t *pEndTag = (uint32_t *) (pBuffer->Tags + nTagsSize);
	*pEndTag = PROPTAG_END;
   36674:	e7876005 	str	r6, [r7, r5]

	lowlev_dsb();
   36678:	ee076f9a 	mcr	15, 0, r6, cr7, cr10, {4}

	uint32_t nBufferAddress = BUS_ADDRESS ((unsigned int) pBuffer);
	if (m_MailBox.WriteRead (nBufferAddress) != nBufferAddress)
   3667c:	e59f1084 	ldr	r1, [pc, #132]	; 36708 <CBcmPropertyTags::GetTag(unsigned long, void*, unsigned int, unsigned int)+0x128>
   36680:	e1a00009 	mov	r0, r9
   36684:	ebffff81 	bl	36490 <CBcmMailBox::WriteRead(unsigned long)>
   36688:	e37005fd 	cmn	r0, #1061158912	; 0x3f400000
   3668c:	0a000001 	beq	36698 <CBcmPropertyTags::GetTag(unsigned long, void*, unsigned int, unsigned int)+0xb8>
		return false;
   36690:	e3a00000 	mov	r0, #0
   36694:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
	{
		return false;
	}

	lowlev_dmb();
   36698:	ee076fba 	mcr	15, 0, r6, cr7, cr10, {5}

	if (pBuffer->nCode != CODE_RESPONSE_SUCCESS)
   3669c:	e5983004 	ldr	r3, [r8, #4]
   366a0:	e3530102 	cmp	r3, #-2147483648	; 0x80000000
   366a4:	1afffff9 	bne	36690 <CBcmPropertyTags::GetTag(unsigned long, void*, unsigned int, unsigned int)+0xb0>
	{
		return false;
	}

	memcpy (pTags, pBuffer->Tags, nTagsSize);
   366a8:	e1a02005 	mov	r2, r5
   366ac:	e1a01007 	mov	r1, r7
   366b0:	e1a00004 	mov	r0, r4
   366b4:	eb0059ab 	bl	4cd68 <memcpy>
	if (!(pHeader->nValueLength & VALUE_LENGTH_RESPONSE))
   366b8:	e5d42009 	ldrb	r2, [r4, #9]
   366bc:	e5d43008 	ldrb	r3, [r4, #8]
   366c0:	e5d4100a 	ldrb	r1, [r4, #10]
   366c4:	e1833402 	orr	r3, r3, r2, lsl #8
   366c8:	e5d4200b 	ldrb	r2, [r4, #11]
   366cc:	e1833801 	orr	r3, r3, r1, lsl #16
   366d0:	e1933c02 	orrs	r3, r3, r2, lsl #24
   366d4:	5affffed 	bpl	36690 <CBcmPropertyTags::GetTag(unsigned long, void*, unsigned int, unsigned int)+0xb0>
	pHeader->nValueLength &= ~VALUE_LENGTH_RESPONSE;
   366d8:	e3c33102 	bic	r3, r3, #-2147483648	; 0x80000000
	if (pHeader->nValueLength == 0)
   366dc:	e2930000 	adds	r0, r3, #0
	pHeader->nValueLength &= ~VALUE_LENGTH_RESPONSE;
   366e0:	e1a0c423 	lsr	ip, r3, #8
   366e4:	e1a01823 	lsr	r1, r3, #16
   366e8:	e1a02c23 	lsr	r2, r3, #24
	if (pHeader->nValueLength == 0)
   366ec:	13a00001 	movne	r0, #1
	pHeader->nValueLength &= ~VALUE_LENGTH_RESPONSE;
   366f0:	e5c43008 	strb	r3, [r4, #8]
   366f4:	e5c4c009 	strb	ip, [r4, #9]
   366f8:	e5c4100a 	strb	r1, [r4, #10]
   366fc:	e5c4200b 	strb	r2, [r4, #11]
}
   36700:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   36704:	00c00008 	.word	0x00c00008
   36708:	c0c00000 	.word	0xc0c00000

0003670c <CBcmPropertyTags::GetCoherentPage(unsigned int)>:
	nPageAddress += nSlot * PAGE_SIZE;
   3670c:	e1a01601 	lsl	r1, r1, #12
}
   36710:	e2810503 	add	r0, r1, #12582912	; 0xc00000
   36714:	e12fff1e 	bx	lr

00036718 <CBcmPropertyTags::GetTags(void*, unsigned int)>:
{
   36718:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
	pBuffer->nCode = CODE_REQUEST;
   3671c:	e3a04000 	mov	r4, #0
	pBuffer->nBufferSize = nBufferSize;
   36720:	e3a05503 	mov	r5, #12582912	; 0xc00000
{
   36724:	e1a07002 	mov	r7, r2
	memcpy (pBuffer->Tags, pTags, nTagsSize);
   36728:	e59f6060 	ldr	r6, [pc, #96]	; 36790 <CBcmPropertyTags::GetTags(void*, unsigned int)+0x78>
	unsigned nBufferSize = sizeof (TPropertyBuffer) + nTagsSize + sizeof (uint32_t);
   3672c:	e282300c 	add	r3, r2, #12
{
   36730:	e1a08000 	mov	r8, r0
	pBuffer->nCode = CODE_REQUEST;
   36734:	e8850018 	stm	r5, {r3, r4}
	memcpy (pBuffer->Tags, pTags, nTagsSize);
   36738:	e1a00006 	mov	r0, r6
{
   3673c:	e1a09001 	mov	r9, r1
	memcpy (pBuffer->Tags, pTags, nTagsSize);
   36740:	eb005988 	bl	4cd68 <memcpy>
	*pEndTag = PROPTAG_END;
   36744:	e7864007 	str	r4, [r6, r7]
	lowlev_dsb();
   36748:	ee074f9a 	mcr	15, 0, r4, cr7, cr10, {4}
	if (m_MailBox.WriteRead (nBufferAddress) != nBufferAddress)
   3674c:	e59f1040 	ldr	r1, [pc, #64]	; 36794 <CBcmPropertyTags::GetTags(void*, unsigned int)+0x7c>
   36750:	e1a00008 	mov	r0, r8
   36754:	ebffff4d 	bl	36490 <CBcmMailBox::WriteRead(unsigned long)>
   36758:	e37005fd 	cmn	r0, #1061158912	; 0x3f400000
   3675c:	0a000001 	beq	36768 <CBcmPropertyTags::GetTags(void*, unsigned int)+0x50>
		return false;
   36760:	e1a00004 	mov	r0, r4

	return true;
}
   36764:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
	lowlev_dmb();
   36768:	ee074fba 	mcr	15, 0, r4, cr7, cr10, {5}
	if (pBuffer->nCode != CODE_RESPONSE_SUCCESS)
   3676c:	e5953004 	ldr	r3, [r5, #4]
   36770:	e3530102 	cmp	r3, #-2147483648	; 0x80000000
   36774:	1afffff9 	bne	36760 <CBcmPropertyTags::GetTags(void*, unsigned int)+0x48>
	memcpy (pTags, pBuffer->Tags, nTagsSize);
   36778:	e1a02007 	mov	r2, r7
   3677c:	e1a01006 	mov	r1, r6
   36780:	e1a00009 	mov	r0, r9
   36784:	eb005977 	bl	4cd68 <memcpy>
	return true;
   36788:	e3a00001 	mov	r0, #1
   3678c:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   36790:	00c00008 	.word	0x00c00008
   36794:	c0c00000 	.word	0xc0c00000

00036798 <micros>:
#endif

uint32_t micros()
{
    static const uint32_t volatile* pTimerLower32Bits = (uint32_t*)ARM_SYSTIMER_CLO;
    return *pTimerLower32Bits;
   36798:	e59f3004 	ldr	r3, [pc, #4]	; 367a4 <micros+0xc>
   3679c:	e5930004 	ldr	r0, [r3, #4]
}
   367a0:	e12fff1e 	bx	lr
   367a4:	20003000 	.word	0x20003000

000367a8 <microsDelay>:
    return *pTimerLower32Bits;
   367a8:	e59f3038 	ldr	r3, [pc, #56]	; 367e8 <microsDelay+0x40>

void microsDelay(uint32_t us)
{
   367ac:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    return *pTimerLower32Bits;
   367b0:	e1a0c003 	mov	ip, r3
   367b4:	e5931004 	ldr	r1, [r3, #4]
}

int isTimeout(unsigned long curTime, unsigned long lastTime, unsigned long maxDuration)
{
    if (curTime >= lastTime) {
        return curTime > lastTime + maxDuration;
   367b8:	e080e001 	add	lr, r0, r1
    return *pTimerLower32Bits;
   367bc:	e59c2004 	ldr	r2, [ip, #4]
    }
    return ((ULONG_MAX - lastTime) + curTime) > maxDuration;
   367c0:	e2423001 	sub	r3, r2, #1
    if (curTime >= lastTime) {
   367c4:	e1510002 	cmp	r1, r2
    return ((ULONG_MAX - lastTime) + curTime) > maxDuration;
   367c8:	e0433001 	sub	r3, r3, r1
    if (curTime >= lastTime) {
   367cc:	8a000002 	bhi	367dc <microsDelay+0x34>
    while (!isTimeout(micros(), timeNow, us)) {
   367d0:	e152000e 	cmp	r2, lr
   367d4:	9afffff8 	bls	367bc <microsDelay+0x14>
   367d8:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
   367dc:	e1500003 	cmp	r0, r3
   367e0:	2afffff5 	bcs	367bc <microsDelay+0x14>
   367e4:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
   367e8:	20003000 	.word	0x20003000

000367ec <isTimeout>:
    if (curTime >= lastTime) {
   367ec:	e1500001 	cmp	r0, r1
   367f0:	2a000005 	bcs	3680c <isTimeout+0x20>
    return ((ULONG_MAX - lastTime) + curTime) > maxDuration;
   367f4:	e0400001 	sub	r0, r0, r1
   367f8:	e2400001 	sub	r0, r0, #1
   367fc:	e1500002 	cmp	r0, r2
   36800:	93a00000 	movls	r0, #0
   36804:	83a00001 	movhi	r0, #1
}
   36808:	e12fff1e 	bx	lr
        return curTime > lastTime + maxDuration;
   3680c:	e0811002 	add	r1, r1, r2
   36810:	e1510000 	cmp	r1, r0
   36814:	23a00000 	movcs	r0, #0
   36818:	33a00001 	movcc	r0, #1
   3681c:	e12fff1e 	bx	lr

00036820 <entry_point>:

// Startup code
extern "C" void entry_point()
{
   36820:	e92d4070 	push	{r4, r5, r6, lr}
    extern void (*__init_array_end)();

    // Call each function in the list.
    // We have to take the address of the symbols, as __init_array_start *is*
    // the first function pointer, not the address of it.
    for (void (**p)() = &__init_array_start; p < &__init_array_end; ++p) {
   36824:	e59f3044 	ldr	r3, [pc, #68]	; 36870 <entry_point+0x50>
   36828:	e59f4044 	ldr	r4, [pc, #68]	; 36874 <entry_point+0x54>
   3682c:	e1540003 	cmp	r4, r3
   36830:	2a000008 	bcs	36858 <entry_point+0x38>
   36834:	e1e05004 	mvn	r5, r4
   36838:	e0855003 	add	r5, r5, r3
   3683c:	e3c55003 	bic	r5, r5, #3
   36840:	e0855004 	add	r5, r5, r4
   36844:	e2444004 	sub	r4, r4, #4
        (*p)();
   36848:	e5b43004 	ldr	r3, [r4, #4]!
   3684c:	e12fff33 	blx	r3
    for (void (**p)() = &__init_array_start; p < &__init_array_end; ++p) {
   36850:	e1540005 	cmp	r4, r5
   36854:	1afffffb 	bne	36848 <entry_point+0x28>
    }

    // Heap init
    nmalloc_set_memory_area((unsigned char*)(MEM_HEAP_START), MEM_HEAP_SIZE);
   36858:	e3a01301 	mov	r1, #67108864	; 0x4000000
   3685c:	e3a0060d 	mov	r0, #13631488	; 0xd00000
   36860:	ebffb722 	bl	244f0 <nmalloc_set_memory_area>

    // Interrupts
    CInterrupts::setup();
   36864:	ebfff019 	bl	328d0 <CInterrupts::setup()>

    // Main function
    extern int main (void);
    main();
}
   36868:	e8bd4070 	pop	{r4, r5, r6, lr}
    main();
   3686c:	ea001bad 	b	3d728 <main>
   36870:	000587c8 	.word	0x000587c8
   36874:	000587b4 	.word	0x000587b4

00036878 <__cxa_pure_virtual>:

// Error handler for pure virtual functions
// extern void __cxa_pure_virtual();
void __cxa_pure_virtual()
{
}
   36878:	e12fff1e 	bx	lr

0003687c <__aeabi_atexit>:
{ 
    static_cast<void>(object); 
    static_cast<void>(destructor); 
    static_cast<void>(dso_handle); 
    return 0; 
} 
   3687c:	e3a00000 	mov	r0, #0
   36880:	e12fff1e 	bx	lr

00036884 <CMachineInfo::CMachineInfo()>:
:	m_nRevisionRaw (0),
	m_MachineModel (MachineModelUnknown),
	m_nModelMajor (0),
	m_nModelRevision (0),
	m_SoCType (SoCTypeUnknown),
	m_nRAMSize (0)
   36884:	e3a03000 	mov	r3, #0
CMachineInfo::CMachineInfo (void)
   36888:	e92d4070 	push	{r4, r5, r6, lr}
	m_nRAMSize (0)
   3688c:	e3a0100e 	mov	r1, #14
   36890:	e3a06003 	mov	r6, #3
{
	if (s_pThis != 0)
   36894:	e59f22ec 	ldr	r2, [pc, #748]	; 36b88 <CMachineInfo::CMachineInfo()+0x304>
CMachineInfo::CMachineInfo (void)
   36898:	e24dd020 	sub	sp, sp, #32
	if (s_pThis != 0)
   3689c:	e5925000 	ldr	r5, [r2]
CMachineInfo::CMachineInfo (void)
   368a0:	e1a04000 	mov	r4, r0
	if (s_pThis != 0)
   368a4:	e1550003 	cmp	r5, r3
	m_nRAMSize (0)
   368a8:	e5c01004 	strb	r1, [r0, #4]
   368ac:	e5803000 	str	r3, [r0]
   368b0:	e5803008 	str	r3, [r0, #8]
   368b4:	e580300c 	str	r3, [r0, #12]
   368b8:	e5803014 	str	r3, [r0, #20]
   368bc:	e5c06010 	strb	r6, [r0, #16]
	if (s_pThis != 0)
   368c0:	0a00000c 	beq	368f8 <CMachineInfo::CMachineInfo()+0x74>
	{
		m_nRevisionRaw	 = s_pThis->m_nRevisionRaw;
		m_MachineModel	 = s_pThis->m_MachineModel;
		m_nModelMajor	 = s_pThis->m_nModelMajor;
		m_nModelRevision = s_pThis->m_nModelRevision;
   368c4:	e1c500d8 	ldrd	r0, [r5, #8]
		m_nRevisionRaw	 = s_pThis->m_nRevisionRaw;
   368c8:	e5953000 	ldr	r3, [r5]
		m_MachineModel	 = s_pThis->m_MachineModel;
   368cc:	e5d5c004 	ldrb	ip, [r5, #4]
		m_SoCType	 = s_pThis->m_SoCType;
   368d0:	e5d52010 	ldrb	r2, [r5, #16]
		m_nRevisionRaw	 = s_pThis->m_nRevisionRaw;
   368d4:	e5843000 	str	r3, [r4]
		m_nRAMSize	 = s_pThis->m_nRAMSize;
   368d8:	e5953014 	ldr	r3, [r5, #20]
		m_nModelRevision = s_pThis->m_nModelRevision;
   368dc:	e1c400f8 	strd	r0, [r4, #8]
		m_nModelMajor	 = 1;
		m_nModelRevision = s_OldInfo[i].nRevision;
		m_SoCType	 = SoCTypeBCM2835;
		m_nRAMSize	 = s_OldInfo[i].nRAMSize;
	}
}
   368e0:	e1a00004 	mov	r0, r4
		m_MachineModel	 = s_pThis->m_MachineModel;
   368e4:	e5c4c004 	strb	ip, [r4, #4]
		m_SoCType	 = s_pThis->m_SoCType;
   368e8:	e5c42010 	strb	r2, [r4, #16]
		m_nRAMSize	 = s_pThis->m_nRAMSize;
   368ec:	e5843014 	str	r3, [r4, #20]
}
   368f0:	e28dd020 	add	sp, sp, #32
   368f4:	e8bd8070 	pop	{r4, r5, r6, pc}
	CBcmPropertyTags Tags;
   368f8:	e28d000c 	add	r0, sp, #12
	s_pThis = this;
   368fc:	e5824000 	str	r4, [r2]
	CBcmPropertyTags Tags;
   36900:	ebffff2b 	bl	365b4 <CBcmPropertyTags::CBcmPropertyTags()>
	if (!Tags.GetTag (PROPTAG_GET_BOARD_REVISION, &BoardRevision, sizeof BoardRevision))
   36904:	e3a03010 	mov	r3, #16
   36908:	e58d5000 	str	r5, [sp]
   3690c:	e28d000c 	add	r0, sp, #12
   36910:	e08d2003 	add	r2, sp, r3
   36914:	e59f1270 	ldr	r1, [pc, #624]	; 36b8c <CMachineInfo::CMachineInfo()+0x308>
   36918:	ebffff30 	bl	365e0 <CBcmPropertyTags::GetTag(unsigned long, void*, unsigned int, unsigned int)>
   3691c:	e3500000 	cmp	r0, #0
   36920:	0a000039 	beq	36a0c <CMachineInfo::CMachineInfo()+0x188>
	m_nRevisionRaw = BoardRevision.nValue;
   36924:	e59d301c 	ldr	r3, [sp, #28]
	if (m_nRevisionRaw & (1 << 23))		// new revision scheme?
   36928:	e2132502 	ands	r2, r3, #8388608	; 0x800000
	m_nRevisionRaw = BoardRevision.nValue;
   3692c:	e5843000 	str	r3, [r4]
	if (m_nRevisionRaw & (1 << 23))		// new revision scheme?
   36930:	0a00003a 	beq	36a20 <CMachineInfo::CMachineInfo()+0x19c>
		unsigned nType = (m_nRevisionRaw >> 4) & 0xFF;
   36934:	e1a02223 	lsr	r2, r3, #4
			if (s_NewInfo[i].nType == nType)
   36938:	e21220ff 	ands	r2, r2, #255	; 0xff
   3693c:	0a000016 	beq	3699c <CMachineInfo::CMachineInfo()+0x118>
   36940:	e3520001 	cmp	r2, #1
   36944:	0a000014 	beq	3699c <CMachineInfo::CMachineInfo()+0x118>
   36948:	e3520002 	cmp	r2, #2
   3694c:	0a000012 	beq	3699c <CMachineInfo::CMachineInfo()+0x118>
   36950:	e3520003 	cmp	r2, #3
   36954:	0a000010 	beq	3699c <CMachineInfo::CMachineInfo()+0x118>
   36958:	e3520004 	cmp	r2, #4
   3695c:	0a00000e 	beq	3699c <CMachineInfo::CMachineInfo()+0x118>
   36960:	e3520006 	cmp	r2, #6
   36964:	0a000067 	beq	36b08 <CMachineInfo::CMachineInfo()+0x284>
   36968:	e3520008 	cmp	r2, #8
   3696c:	0a000069 	beq	36b18 <CMachineInfo::CMachineInfo()+0x294>
   36970:	e3520009 	cmp	r2, #9
   36974:	0a00006b 	beq	36b28 <CMachineInfo::CMachineInfo()+0x2a4>
   36978:	e352000a 	cmp	r2, #10
   3697c:	0a00006b 	beq	36b30 <CMachineInfo::CMachineInfo()+0x2ac>
   36980:	e352000c 	cmp	r2, #12
   36984:	0a00006d 	beq	36b40 <CMachineInfo::CMachineInfo()+0x2bc>
   36988:	e352000d 	cmp	r2, #13
   3698c:	0a000071 	beq	36b58 <CMachineInfo::CMachineInfo()+0x2d4>
   36990:	e352000e 	cmp	r2, #14
   36994:	1a00001c 	bne	36a0c <CMachineInfo::CMachineInfo()+0x188>
		for (i = 0; i < sizeof s_NewInfo / sizeof s_NewInfo[0]; i++)
   36998:	e3a0200b 	mov	r2, #11
		m_MachineModel   = s_NewInfo[i].Model;
   3699c:	e59f11ec 	ldr	r1, [pc, #492]	; 36b90 <CMachineInfo::CMachineInfo()+0x30c>
   369a0:	e0822082 	add	r2, r2, r2, lsl #1
   369a4:	e0811102 	add	r1, r1, r2, lsl #2
   369a8:	e5d1c004 	ldrb	ip, [r1, #4]
		m_nModelMajor    = s_NewInfo[i].nMajor;
   369ac:	e591e008 	ldr	lr, [r1, #8]
		m_SoCType        = (TSoCType) ((m_nRevisionRaw >> 12) & 0xF);
   369b0:	e1a01623 	lsr	r1, r3, #12
   369b4:	e201100f 	and	r1, r1, #15
		if (m_SoCType >= SoCTypeUnknown)
   369b8:	e3510002 	cmp	r1, #2
		m_SoCType        = (TSoCType) ((m_nRevisionRaw >> 12) & 0xF);
   369bc:	e5c41010 	strb	r1, [r4, #16]
			m_SoCType = SoCTypeUnknown;
   369c0:	83a01003 	movhi	r1, #3
		m_nRAMSize       = 256 << ((m_nRevisionRaw >> 20) & 7);
   369c4:	e1a02a23 	lsr	r2, r3, #20
   369c8:	e2022007 	and	r2, r2, #7
   369cc:	e3a00c01 	mov	r0, #256	; 0x100
			m_SoCType = SoCTypeUnknown;
   369d0:	85c41010 	strbhi	r1, [r4, #16]
		    && m_nRAMSize     == 256)
   369d4:	e35c0003 	cmp	ip, #3
   369d8:	03520000 	cmpeq	r2, #0
		m_nModelRevision = (m_nRevisionRaw & 0xF) + 1;
   369dc:	e203300f 	and	r3, r3, #15
		m_nRAMSize       = 256 << ((m_nRevisionRaw >> 20) & 7);
   369e0:	e1a00210 	lsl	r0, r0, r2
		m_nModelRevision = (m_nRevisionRaw & 0xF) + 1;
   369e4:	e2833001 	add	r3, r3, #1
		m_MachineModel   = s_NewInfo[i].Model;
   369e8:	e5c4c004 	strb	ip, [r4, #4]
		m_nModelMajor    = s_NewInfo[i].nMajor;
   369ec:	e584e008 	str	lr, [r4, #8]
		m_nRAMSize       = 256 << ((m_nRevisionRaw >> 20) & 7);
   369f0:	e5840014 	str	r0, [r4, #20]
		m_nModelRevision = (m_nRevisionRaw & 0xF) + 1;
   369f4:	e584300c 	str	r3, [r4, #12]
		    && m_nRAMSize     == 256)
   369f8:	1a000003 	bne	36a0c <CMachineInfo::CMachineInfo()+0x188>
					 ? MachineModelBRelease1MB256
   369fc:	e3530001 	cmp	r3, #1
   36a00:	03a03001 	moveq	r3, #1
   36a04:	13a03002 	movne	r3, #2
			m_MachineModel =   m_nModelRevision == 1
   36a08:	e5c43004 	strb	r3, [r4, #4]
   36a0c:	e28d000c 	add	r0, sp, #12
   36a10:	ebfffeed 	bl	365cc <CBcmPropertyTags::~CBcmPropertyTags()>
}
   36a14:	e1a00004 	mov	r0, r4
   36a18:	e28dd020 	add	sp, sp, #32
   36a1c:	e8bd8070 	pop	{r4, r5, r6, pc}
			if (s_OldInfo[i].nRevisionRaw == m_nRevisionRaw)
   36a20:	e3530002 	cmp	r3, #2
   36a24:	0a000020 	beq	36aac <CMachineInfo::CMachineInfo()+0x228>
   36a28:	e3530003 	cmp	r3, #3
   36a2c:	0a00002d 	beq	36ae8 <CMachineInfo::CMachineInfo()+0x264>
   36a30:	e3530004 	cmp	r3, #4
   36a34:	0a000029 	beq	36ae0 <CMachineInfo::CMachineInfo()+0x25c>
   36a38:	e3530005 	cmp	r3, #5
   36a3c:	0a00002b 	beq	36af0 <CMachineInfo::CMachineInfo()+0x26c>
   36a40:	e3530006 	cmp	r3, #6
   36a44:	0a00002b 	beq	36af8 <CMachineInfo::CMachineInfo()+0x274>
   36a48:	e3530007 	cmp	r3, #7
   36a4c:	0a00002b 	beq	36b00 <CMachineInfo::CMachineInfo()+0x27c>
   36a50:	e3530008 	cmp	r3, #8
   36a54:	0a00002d 	beq	36b10 <CMachineInfo::CMachineInfo()+0x28c>
   36a58:	e3530009 	cmp	r3, #9
   36a5c:	0a00002f 	beq	36b20 <CMachineInfo::CMachineInfo()+0x29c>
   36a60:	e353000d 	cmp	r3, #13
   36a64:	0a000033 	beq	36b38 <CMachineInfo::CMachineInfo()+0x2b4>
   36a68:	e353000e 	cmp	r3, #14
   36a6c:	0a000035 	beq	36b48 <CMachineInfo::CMachineInfo()+0x2c4>
   36a70:	e353000f 	cmp	r3, #15
   36a74:	0a000035 	beq	36b50 <CMachineInfo::CMachineInfo()+0x2cc>
   36a78:	e3530010 	cmp	r3, #16
   36a7c:	0a000037 	beq	36b60 <CMachineInfo::CMachineInfo()+0x2dc>
   36a80:	e3530011 	cmp	r3, #17
   36a84:	0a000037 	beq	36b68 <CMachineInfo::CMachineInfo()+0x2e4>
   36a88:	e3530012 	cmp	r3, #18
   36a8c:	0a000037 	beq	36b70 <CMachineInfo::CMachineInfo()+0x2ec>
   36a90:	e3530013 	cmp	r3, #19
   36a94:	0a000037 	beq	36b78 <CMachineInfo::CMachineInfo()+0x2f4>
   36a98:	e3530014 	cmp	r3, #20
   36a9c:	0a000037 	beq	36b80 <CMachineInfo::CMachineInfo()+0x2fc>
   36aa0:	e3530015 	cmp	r3, #21
   36aa4:	1affffd8 	bne	36a0c <CMachineInfo::CMachineInfo()+0x188>
		for (i = 0; i < sizeof s_OldInfo / sizeof s_OldInfo[0]; i++)
   36aa8:	e3a02010 	mov	r2, #16
		m_nModelMajor	 = 1;
   36aac:	e3a01001 	mov	r1, #1
		m_SoCType	 = SoCTypeBCM2835;
   36ab0:	e3a03000 	mov	r3, #0
		m_MachineModel	 = s_OldInfo[i].Model;
   36ab4:	e59f60d4 	ldr	r6, [pc, #212]	; 36b90 <CMachineInfo::CMachineInfo()+0x30c>
		m_nModelMajor	 = 1;
   36ab8:	e5841008 	str	r1, [r4, #8]
		m_MachineModel	 = s_OldInfo[i].Model;
   36abc:	e0866202 	add	r6, r6, r2, lsl #4
   36ac0:	e5d60094 	ldrb	r0, [r6, #148]	; 0x94
		m_nModelRevision = s_OldInfo[i].nRevision;
   36ac4:	e5961098 	ldr	r1, [r6, #152]	; 0x98
		m_nRAMSize	 = s_OldInfo[i].nRAMSize;
   36ac8:	e596209c 	ldr	r2, [r6, #156]	; 0x9c
		m_MachineModel	 = s_OldInfo[i].Model;
   36acc:	e5c40004 	strb	r0, [r4, #4]
		m_nModelRevision = s_OldInfo[i].nRevision;
   36ad0:	e584100c 	str	r1, [r4, #12]
		m_nRAMSize	 = s_OldInfo[i].nRAMSize;
   36ad4:	e5842014 	str	r2, [r4, #20]
		m_SoCType	 = SoCTypeBCM2835;
   36ad8:	e5c43010 	strb	r3, [r4, #16]
   36adc:	eaffffca 	b	36a0c <CMachineInfo::CMachineInfo()+0x188>
		for (i = 0; i < sizeof s_OldInfo / sizeof s_OldInfo[0]; i++)
   36ae0:	e3a02002 	mov	r2, #2
   36ae4:	eafffff0 	b	36aac <CMachineInfo::CMachineInfo()+0x228>
   36ae8:	e3a02001 	mov	r2, #1
   36aec:	eaffffee 	b	36aac <CMachineInfo::CMachineInfo()+0x228>
   36af0:	e1a02006 	mov	r2, r6
   36af4:	eaffffec 	b	36aac <CMachineInfo::CMachineInfo()+0x228>
   36af8:	e3a02004 	mov	r2, #4
   36afc:	eaffffea 	b	36aac <CMachineInfo::CMachineInfo()+0x228>
   36b00:	e3a02005 	mov	r2, #5
   36b04:	eaffffe8 	b	36aac <CMachineInfo::CMachineInfo()+0x228>
		for (i = 0; i < sizeof s_NewInfo / sizeof s_NewInfo[0]; i++)
   36b08:	e3a02005 	mov	r2, #5
   36b0c:	eaffffa2 	b	3699c <CMachineInfo::CMachineInfo()+0x118>
		for (i = 0; i < sizeof s_OldInfo / sizeof s_OldInfo[0]; i++)
   36b10:	e3a02006 	mov	r2, #6
   36b14:	eaffffe4 	b	36aac <CMachineInfo::CMachineInfo()+0x228>
		for (i = 0; i < sizeof s_NewInfo / sizeof s_NewInfo[0]; i++)
   36b18:	e3a02006 	mov	r2, #6
   36b1c:	eaffff9e 	b	3699c <CMachineInfo::CMachineInfo()+0x118>
		for (i = 0; i < sizeof s_OldInfo / sizeof s_OldInfo[0]; i++)
   36b20:	e3a02007 	mov	r2, #7
   36b24:	eaffffe0 	b	36aac <CMachineInfo::CMachineInfo()+0x228>
		for (i = 0; i < sizeof s_NewInfo / sizeof s_NewInfo[0]; i++)
   36b28:	e3a02007 	mov	r2, #7
   36b2c:	eaffff9a 	b	3699c <CMachineInfo::CMachineInfo()+0x118>
   36b30:	e3a02008 	mov	r2, #8
   36b34:	eaffff98 	b	3699c <CMachineInfo::CMachineInfo()+0x118>
		for (i = 0; i < sizeof s_OldInfo / sizeof s_OldInfo[0]; i++)
   36b38:	e3a02008 	mov	r2, #8
   36b3c:	eaffffda 	b	36aac <CMachineInfo::CMachineInfo()+0x228>
		for (i = 0; i < sizeof s_NewInfo / sizeof s_NewInfo[0]; i++)
   36b40:	e3a02009 	mov	r2, #9
   36b44:	eaffff94 	b	3699c <CMachineInfo::CMachineInfo()+0x118>
		for (i = 0; i < sizeof s_OldInfo / sizeof s_OldInfo[0]; i++)
   36b48:	e3a02009 	mov	r2, #9
   36b4c:	eaffffd6 	b	36aac <CMachineInfo::CMachineInfo()+0x228>
   36b50:	e3a0200a 	mov	r2, #10
   36b54:	eaffffd4 	b	36aac <CMachineInfo::CMachineInfo()+0x228>
		for (i = 0; i < sizeof s_NewInfo / sizeof s_NewInfo[0]; i++)
   36b58:	e3a0200a 	mov	r2, #10
   36b5c:	eaffff8e 	b	3699c <CMachineInfo::CMachineInfo()+0x118>
		for (i = 0; i < sizeof s_OldInfo / sizeof s_OldInfo[0]; i++)
   36b60:	e3a0200b 	mov	r2, #11
   36b64:	eaffffd0 	b	36aac <CMachineInfo::CMachineInfo()+0x228>
   36b68:	e3a0200c 	mov	r2, #12
   36b6c:	eaffffce 	b	36aac <CMachineInfo::CMachineInfo()+0x228>
   36b70:	e3a0200d 	mov	r2, #13
   36b74:	eaffffcc 	b	36aac <CMachineInfo::CMachineInfo()+0x228>
   36b78:	e3a0200e 	mov	r2, #14
   36b7c:	eaffffca 	b	36aac <CMachineInfo::CMachineInfo()+0x228>
   36b80:	e3a0200f 	mov	r2, #15
   36b84:	eaffffc8 	b	36aac <CMachineInfo::CMachineInfo()+0x228>
   36b88:	0008c41c 	.word	0x0008c41c
   36b8c:	00010002 	.word	0x00010002
   36b90:	00055680 	.word	0x00055680

00036b94 <CMachineInfo::~CMachineInfo()>:

CMachineInfo::~CMachineInfo (void)
{
	m_MachineModel = MachineModelUnknown;
   36b94:	e3a0200e 	mov	r2, #14

	if (s_pThis == this)
   36b98:	e59f3014 	ldr	r3, [pc, #20]	; 36bb4 <CMachineInfo::~CMachineInfo()+0x20>
	m_MachineModel = MachineModelUnknown;
   36b9c:	e5c02004 	strb	r2, [r0, #4]
	if (s_pThis == this)
   36ba0:	e5932000 	ldr	r2, [r3]
   36ba4:	e1520000 	cmp	r2, r0
	{
		s_pThis = 0;
   36ba8:	03a02000 	moveq	r2, #0
   36bac:	05832000 	streq	r2, [r3]
	}
}
   36bb0:	e12fff1e 	bx	lr
   36bb4:	0008c41c 	.word	0x0008c41c

00036bb8 <CMachineInfo::GetMachineModel() const>:

TMachineModel CMachineInfo::GetMachineModel (void) const
{
	return m_MachineModel;
}
   36bb8:	e5d00004 	ldrb	r0, [r0, #4]
   36bbc:	e12fff1e 	bx	lr

00036bc0 <CMachineInfo::GetMachineName() const>:

const char *CMachineInfo::GetMachineName (void) const
{
	return s_MachineName[m_MachineModel];
   36bc0:	e5d02004 	ldrb	r2, [r0, #4]
   36bc4:	e59f3008 	ldr	r3, [pc, #8]	; 36bd4 <CMachineInfo::GetMachineName() const+0x14>
   36bc8:	e0833102 	add	r3, r3, r2, lsl #2
}
   36bcc:	e59301a0 	ldr	r0, [r3, #416]	; 0x1a0
   36bd0:	e12fff1e 	bx	lr
   36bd4:	00055680 	.word	0x00055680

00036bd8 <CMachineInfo::GetModelMajor() const>:

unsigned CMachineInfo::GetModelMajor (void) const
{
	return m_nModelMajor;
}
   36bd8:	e5900008 	ldr	r0, [r0, #8]
   36bdc:	e12fff1e 	bx	lr

00036be0 <CMachineInfo::GetModelRevision() const>:

unsigned CMachineInfo::GetModelRevision (void) const
{
	return m_nModelRevision;
}
   36be0:	e590000c 	ldr	r0, [r0, #12]
   36be4:	e12fff1e 	bx	lr

00036be8 <CMachineInfo::GetSoCType() const>:

TSoCType CMachineInfo::GetSoCType (void) const
{
	return m_SoCType;
}
   36be8:	e5d00010 	ldrb	r0, [r0, #16]
   36bec:	e12fff1e 	bx	lr

00036bf0 <CMachineInfo::GetRAMSize() const>:

unsigned CMachineInfo::GetRAMSize (void) const
{
	return m_nRAMSize;
}
   36bf0:	e5900014 	ldr	r0, [r0, #20]
   36bf4:	e12fff1e 	bx	lr

00036bf8 <CMachineInfo::GetSoCName() const>:

const char *CMachineInfo::GetSoCName (void) const
{
	return s_SoCName[m_SoCType];
   36bf8:	e5d02010 	ldrb	r2, [r0, #16]
   36bfc:	e59f3008 	ldr	r3, [pc, #8]	; 36c0c <CMachineInfo::GetSoCName() const+0x14>
   36c00:	e0833102 	add	r3, r3, r2, lsl #2
}
   36c04:	e59301dc 	ldr	r0, [r3, #476]	; 0x1dc
   36c08:	e12fff1e 	bx	lr
   36c0c:	00055680 	.word	0x00055680

00036c10 <CMachineInfo::GetRevisionRaw() const>:

uint32_t CMachineInfo::GetRevisionRaw (void) const
{
	return m_nRevisionRaw;
}
   36c10:	e5900000 	ldr	r0, [r0]
   36c14:	e12fff1e 	bx	lr

00036c18 <CMachineInfo::GetMaxClockRate(unsigned long) const>:

unsigned CMachineInfo::GetMaxClockRate(uint32_t nClockId) const
{
   36c18:	e92d4010 	push	{r4, lr}
   36c1c:	e24dd020 	sub	sp, sp, #32
	CBcmPropertyTags Tags;
   36c20:	e28d0008 	add	r0, sp, #8
{
   36c24:	e1a04001 	mov	r4, r1
	CBcmPropertyTags Tags;
   36c28:	ebfffe61 	bl	365b4 <CBcmPropertyTags::CBcmPropertyTags()>
	TPropertyTagClockRate TagClockRate;
	TagClockRate.nClockId = nClockId;
	if (Tags.GetTag (PROPTAG_GET_MAX_CLOCK_RATE, &TagClockRate, sizeof TagClockRate, 4))
   36c2c:	e3a03004 	mov	r3, #4
   36c30:	e28d200c 	add	r2, sp, #12
   36c34:	e58d3000 	str	r3, [sp]
   36c38:	e59f1028 	ldr	r1, [pc, #40]	; 36c68 <CMachineInfo::GetMaxClockRate(unsigned long) const+0x50>
   36c3c:	e3a03014 	mov	r3, #20
   36c40:	e28d0008 	add	r0, sp, #8
	TagClockRate.nClockId = nClockId;
   36c44:	e58d4018 	str	r4, [sp, #24]
	if (Tags.GetTag (PROPTAG_GET_MAX_CLOCK_RATE, &TagClockRate, sizeof TagClockRate, 4))
   36c48:	ebfffe64 	bl	365e0 <CBcmPropertyTags::GetTag(unsigned long, void*, unsigned int, unsigned int)>
   36c4c:	e2504000 	subs	r4, r0, #0
	{
		return TagClockRate.nRate;
   36c50:	159d401c 	ldrne	r4, [sp, #28]
	CBcmPropertyTags Tags;
   36c54:	e28d0008 	add	r0, sp, #8
   36c58:	ebfffe5b 	bl	365cc <CBcmPropertyTags::~CBcmPropertyTags()>
	}
	return 0;
}
   36c5c:	e1a00004 	mov	r0, r4
   36c60:	e28dd020 	add	sp, sp, #32
   36c64:	e8bd8010 	pop	{r4, pc}
   36c68:	00030004 	.word	0x00030004

00036c6c <CMachineInfo::GetClockRate(unsigned long) const>:

unsigned CMachineInfo::GetClockRate (uint32_t nClockId) const
{
   36c6c:	e92d4030 	push	{r4, r5, lr}
   36c70:	e24dd024 	sub	sp, sp, #36	; 0x24
   36c74:	e1a05000 	mov	r5, r0
	CBcmPropertyTags Tags;
   36c78:	e28d0008 	add	r0, sp, #8
{
   36c7c:	e1a04001 	mov	r4, r1
	CBcmPropertyTags Tags;
   36c80:	ebfffe4b 	bl	365b4 <CBcmPropertyTags::CBcmPropertyTags()>
	TPropertyTagClockRate TagClockRate;
	TagClockRate.nClockId = nClockId;
	if (Tags.GetTag (PROPTAG_GET_CLOCK_RATE, &TagClockRate, sizeof TagClockRate, 4))
   36c84:	e3a03004 	mov	r3, #4
   36c88:	e28d0008 	add	r0, sp, #8
   36c8c:	e58d3000 	str	r3, [sp]
   36c90:	e28d200c 	add	r2, sp, #12
   36c94:	e3a03014 	mov	r3, #20
   36c98:	e59f1068 	ldr	r1, [pc, #104]	; 36d08 <CMachineInfo::GetClockRate(unsigned long) const+0x9c>
	TagClockRate.nClockId = nClockId;
   36c9c:	e58d4018 	str	r4, [sp, #24]
	if (Tags.GetTag (PROPTAG_GET_CLOCK_RATE, &TagClockRate, sizeof TagClockRate, 4))
   36ca0:	ebfffe4e 	bl	365e0 <CBcmPropertyTags::GetTag(unsigned long, void*, unsigned int, unsigned int)>
   36ca4:	e3500000 	cmp	r0, #0
   36ca8:	1a00000c 	bne	36ce0 <CMachineInfo::GetClockRate(unsigned long) const+0x74>
	}

	// if clock rate can not be requested, use a default rate
	unsigned nResult = 0;

	switch (nClockId)
   36cac:	e3540002 	cmp	r4, #2
   36cb0:	0a00000c 	beq	36ce8 <CMachineInfo::GetClockRate(unsigned long) const+0x7c>
   36cb4:	e3540004 	cmp	r4, #4
   36cb8:	0a00000c 	beq	36cf0 <CMachineInfo::GetClockRate(unsigned long) const+0x84>
	unsigned nResult = 0;
   36cbc:	e59f3048 	ldr	r3, [pc, #72]	; 36d0c <CMachineInfo::GetClockRate(unsigned long) const+0xa0>
	switch (nClockId)
   36cc0:	e3540001 	cmp	r4, #1
	unsigned nResult = 0;
   36cc4:	01a04003 	moveq	r4, r3
   36cc8:	13a04000 	movne	r4, #0
	CBcmPropertyTags Tags;
   36ccc:	e28d0008 	add	r0, sp, #8
   36cd0:	ebfffe3d 	bl	365cc <CBcmPropertyTags::~CBcmPropertyTags()>
		// assert (0);
		break;
	}

	return nResult;
}
   36cd4:	e1a00004 	mov	r0, r4
   36cd8:	e28dd024 	add	sp, sp, #36	; 0x24
   36cdc:	e8bd8030 	pop	{r4, r5, pc}
		return TagClockRate.nRate;
   36ce0:	e59d401c 	ldr	r4, [sp, #28]
   36ce4:	eafffff8 	b	36ccc <CMachineInfo::GetClockRate(unsigned long) const+0x60>
		nResult = 48000000;
   36ce8:	e59f4020 	ldr	r4, [pc, #32]	; 36d10 <CMachineInfo::GetClockRate(unsigned long) const+0xa4>
		break;
   36cec:	eafffff6 	b	36ccc <CMachineInfo::GetClockRate(unsigned long) const+0x60>
		if (m_nModelMajor < 3)
   36cf0:	e5952008 	ldr	r2, [r5, #8]
			nResult = 300000000;
   36cf4:	e59f3018 	ldr	r3, [pc, #24]	; 36d14 <CMachineInfo::GetClockRate(unsigned long) const+0xa8>
   36cf8:	e3520002 	cmp	r2, #2
   36cfc:	e59f4014 	ldr	r4, [pc, #20]	; 36d18 <CMachineInfo::GetClockRate(unsigned long) const+0xac>
   36d00:	81a04003 	movhi	r4, r3
   36d04:	eafffff0 	b	36ccc <CMachineInfo::GetClockRate(unsigned long) const+0x60>
   36d08:	00030002 	.word	0x00030002
   36d0c:	05f5e100 	.word	0x05f5e100
   36d10:	02dc6c00 	.word	0x02dc6c00
   36d14:	11e1a300 	.word	0x11e1a300
   36d18:	0ee6b280 	.word	0x0ee6b280

00036d1c <CMachineInfo::SetClockRate(unsigned long, unsigned int, bool)>:

bool CMachineInfo::SetClockRate (uint32_t nClockId, unsigned nRate, bool bSkipTurbo)
{
   36d1c:	e92d4070 	push	{r4, r5, r6, lr}
   36d20:	e24dd028 	sub	sp, sp, #40	; 0x28
	CBcmPropertyTags Tags;
   36d24:	e28d000c 	add	r0, sp, #12
{
   36d28:	e1a06001 	mov	r6, r1
   36d2c:	e1a05002 	mov	r5, r2
   36d30:	e1a04003 	mov	r4, r3
	CBcmPropertyTags Tags;
   36d34:	ebfffe1e 	bl	365b4 <CBcmPropertyTags::CBcmPropertyTags()>
	TPropertyTagSetClockRate TagSetClockRate;
	TagSetClockRate.nClockId = nClockId;
	TagSetClockRate.nRate = nRate;
	TagSetClockRate.nSkipSettingTurbo = bSkipTurbo ? SKIP_SETTING_TURBO : 0;
	return Tags.GetTag (PROPTAG_SET_CLOCK_RATE, &TagSetClockRate, sizeof TagSetClockRate, 12);
   36d38:	e3a0300c 	mov	r3, #12
   36d3c:	e28d2010 	add	r2, sp, #16
   36d40:	e58d3000 	str	r3, [sp]
   36d44:	e08d0003 	add	r0, sp, r3
   36d48:	e59f1028 	ldr	r1, [pc, #40]	; 36d78 <CMachineInfo::SetClockRate(unsigned long, unsigned int, bool)+0x5c>
   36d4c:	e3a03018 	mov	r3, #24
	TagSetClockRate.nSkipSettingTurbo = bSkipTurbo ? SKIP_SETTING_TURBO : 0;
   36d50:	e58d4024 	str	r4, [sp, #36]	; 0x24
	TagSetClockRate.nClockId = nClockId;
   36d54:	e58d601c 	str	r6, [sp, #28]
	TagSetClockRate.nRate = nRate;
   36d58:	e58d5020 	str	r5, [sp, #32]
	return Tags.GetTag (PROPTAG_SET_CLOCK_RATE, &TagSetClockRate, sizeof TagSetClockRate, 12);
   36d5c:	ebfffe1f 	bl	365e0 <CBcmPropertyTags::GetTag(unsigned long, void*, unsigned int, unsigned int)>
   36d60:	e1a04000 	mov	r4, r0
	CBcmPropertyTags Tags;
   36d64:	e28d000c 	add	r0, sp, #12
   36d68:	ebfffe17 	bl	365cc <CBcmPropertyTags::~CBcmPropertyTags()>
}
   36d6c:	e1a00004 	mov	r0, r4
   36d70:	e28dd028 	add	sp, sp, #40	; 0x28
   36d74:	e8bd8070 	pop	{r4, r5, r6, pc}
   36d78:	00038002 	.word	0x00038002

00036d7c <CMachineInfo::GetDevice(TDeviceId) const>:

unsigned CMachineInfo::GetDevice (TDeviceId DeviceId) const
{
	unsigned nResult = 0;

	switch (DeviceId)
   36d7c:	e3510000 	cmp	r1, #0
   36d80:	1a000003 	bne	36d94 <CMachineInfo::GetDevice(TDeviceId) const+0x18>
	{
	case DeviceI2CMaster:
		if (m_MachineModel == MachineModelBRelease1MB256)
   36d84:	e5d00004 	ldrb	r0, [r0, #4]
   36d88:	e2500001 	subs	r0, r0, #1
   36d8c:	13a00001 	movne	r0, #1
   36d90:	e12fff1e 	bx	lr
	unsigned nResult = 0;
   36d94:	e3a00000 	mov	r0, #0
		// assert (0);
		break;
	}

	return nResult;
}
   36d98:	e12fff1e 	bx	lr

00036d9c <CMachineInfo::Get()>:

CMachineInfo *CMachineInfo::Get (void)
{
	// assert (s_pThis != 0);
	return s_pThis;
   36d9c:	e59f3004 	ldr	r3, [pc, #4]	; 36da8 <CMachineInfo::Get()+0xc>
}
   36da0:	e5930000 	ldr	r0, [r3]
   36da4:	e12fff1e 	bx	lr
   36da8:	0008c41c 	.word	0x0008c41c

00036dac <malloc>:
extern "C" {
#endif

void* malloc(unsigned nSize) // result must be 4-byte aligned
{
    return nmalloc_malloc(nSize);
   36dac:	eaffb5d8 	b	24514 <nmalloc_malloc>

00036db0 <free>:
}

void free(void* pBlock)
{
   36db0:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   36db4:	e24dd00c 	sub	sp, sp, #12
   36db8:	e28d3008 	add	r3, sp, #8
   36dbc:	e5230004 	str	r0, [r3, #-4]!
    nmalloc_free(&pBlock);
   36dc0:	e1a00003 	mov	r0, r3
   36dc4:	ebffb60f 	bl	24608 <nmalloc_free>
}
   36dc8:	e28dd00c 	add	sp, sp, #12
   36dcc:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

00036dd0 <MsDelay>:

void MsDelay(unsigned nMilliSeconds)
{
    microsDelay(nMilliSeconds * 1000);
   36dd0:	e0603280 	rsb	r3, r0, r0, lsl #5
   36dd4:	e0800103 	add	r0, r0, r3, lsl #2
   36dd8:	e1a00180 	lsl	r0, r0, #3
   36ddc:	eafffe71 	b	367a8 <microsDelay>

00036de0 <usDelay>:
}

void usDelay(unsigned nMicroSeconds)
{
    microsDelay(nMicroSeconds);
   36de0:	eafffe70 	b	367a8 <microsDelay>

00036de4 <StartKernelTimer>:

unsigned StartKernelTimer(unsigned nHzDelay, // in HZ units (see "system configuration" above)
    TKernelTimerHandler* pHandler,
    void* pParam, void* pContext) // handed over to the timer handler
{
    nHzDelay = nHzDelay * HZ;
   36de4:	e0800100 	add	r0, r0, r0, lsl #2
   36de8:	e0800100 	add	r0, r0, r0, lsl #2
    return timer_attach_handler(nHzDelay, pHandler, pParam, pContext);
   36dec:	e1a00100 	lsl	r0, r0, #2
   36df0:	eaffb87a 	b	24fe0 <timer_attach_handler>

00036df4 <CancelKernelTimer>:

void CancelKernelTimer(__attribute__((unused)) unsigned hTimer)
{
    // NOT IMPLEMENTED
    //ee_printf("* CancelKernelTimer *\n");
}
   36df4:	e12fff1e 	bx	lr

00036df8 <ConnectInterrupt>:

void ConnectInterrupt(unsigned nIRQ, TInterruptHandler* pHandler, void* pParam)
{
    nIRQ = nIRQ;
    // irq_set_usb_handler(pHandler, pParam);
    CInterrupts::connectIRQ(ARM_IRQ_USB, pHandler, pParam);
   36df8:	e3a00009 	mov	r0, #9
   36dfc:	eaffeebf 	b	32900 <CInterrupts::connectIRQ(unsigned int, void (*)(void*), void*)>

00036e00 <SetPowerStateOn>:
}

int SetPowerStateOn(unsigned nDeviceId) // "set power state" to "on", wait until completed
{
   36e00:	e92d4010 	push	{r4, lr}
    if (RHW_SUCCESS != rhw_set_device_power((RHW_DEVICE)nDeviceId, RHW_POWER_ON)) {
   36e04:	e6ef0070 	uxtb	r0, r0
   36e08:	e3a01000 	mov	r1, #0
   36e0c:	ebffb6c5 	bl	24928 <rhw_set_device_power>
   36e10:	e3500000 	cmp	r0, #0
   36e14:	0a000001 	beq	36e20 <SetPowerStateOn+0x20>
        return 0;
   36e18:	e3a00000 	mov	r0, #0
    }
    microsDelay(500000); // Wait some more for wireless keyboards startup time
    return 1;
}
   36e1c:	e8bd8010 	pop	{r4, pc}
    microsDelay(500000); // Wait some more for wireless keyboards startup time
   36e20:	e59f0008 	ldr	r0, [pc, #8]	; 36e30 <SetPowerStateOn+0x30>
   36e24:	ebfffe5f 	bl	367a8 <microsDelay>
    return 1;
   36e28:	e3a00001 	mov	r0, #1
   36e2c:	e8bd8010 	pop	{r4, pc}
   36e30:	0007a120 	.word	0x0007a120

00036e34 <GetMACAddress>:

int GetMACAddress(unsigned char Buffer[6]) // "get board MAC address"
{
   36e34:	e92d4010 	push	{r4, lr}
    //ee_printf("* GetMacAddress *\n");

    if (RHW_SUCCESS != rhw_get_mac_address(Buffer))
   36e38:	ebffb690 	bl	24880 <rhw_get_mac_address>
        return 0;

    return 1;
}
   36e3c:	e16f0f10 	clz	r0, r0
   36e40:	e1a002a0 	lsr	r0, r0, #5
   36e44:	e8bd8010 	pop	{r4, pc}

00036e48 <uspi_assertion_failed>:

void uspi_assertion_failed(const char* pExpr, const char* pFile, unsigned nLine)
{
   36e48:	e92d4010 	push	{r4, lr}
    LogPrintf("ASSERTION FAILED: %s, in %s (Line %d)\n", pExpr, pFile, nLine);
   36e4c:	e1a03002 	mov	r3, r2
   36e50:	e1a02001 	mov	r2, r1
   36e54:	e1a01000 	mov	r1, r0
   36e58:	e59f0010 	ldr	r0, [pc, #16]	; 36e70 <uspi_assertion_failed+0x28>
   36e5c:	ebffb56a 	bl	2440c <LogPrintf>

    while (1)
        microsDelay(1000000);
   36e60:	e59f400c 	ldr	r4, [pc, #12]	; 36e74 <uspi_assertion_failed+0x2c>
   36e64:	e1a00004 	mov	r0, r4
   36e68:	ebfffe4e 	bl	367a8 <microsDelay>
   36e6c:	eafffffc 	b	36e64 <uspi_assertion_failed+0x1c>
   36e70:	000559b0 	.word	0x000559b0
   36e74:	000f4240 	.word	0x000f4240

00036e78 <DebugHexdump>:
}

void DebugHexdump(const void* pBuffer, unsigned nBufLen, const char* pSource /* = 0 */)
{
   36e78:	e92d4070 	push	{r4, r5, r6, lr}
   36e7c:	e1a04000 	mov	r4, r0
   36e80:	e1a05001 	mov	r5, r1
    LogPrintf("Memory dump of %s:\n", pSource);
   36e84:	e59f0014 	ldr	r0, [pc, #20]	; 36ea0 <DebugHexdump+0x28>
   36e88:	e1a01002 	mov	r1, r2
   36e8c:	ebffb55e 	bl	2440c <LogPrintf>
    LogDumpMemory((unsigned char*)pBuffer, (unsigned char*)(pBuffer) + nBufLen);
   36e90:	e0841005 	add	r1, r4, r5
   36e94:	e1a00004 	mov	r0, r4
}
   36e98:	e8bd4070 	pop	{r4, r5, r6, lr}
    LogDumpMemory((unsigned char*)pBuffer, (unsigned char*)(pBuffer) + nBufLen);
   36e9c:	eaffb571 	b	24468 <LogDumpMemory>
   36ea0:	000559d8 	.word	0x000559d8

00036ea4 <BusAccess::init()>:
// Initialisation
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// Initialise the bus raider
void BusAccess::init()
{
   36ea4:	e92d4010 	push	{r4, lr}
    setPinOut(BR_MUX_1, 0);
    setPinOut(BR_MUX_2, 0);
    
    // Bus Request
    setPinOut(BR_BUSRQ_BAR, 1);
    _busIsUnderControl = false;
   36ea8:	e3a04000 	mov	r4, #0
    clockSetup();
   36eac:	eb000a46 	bl	397cc <BusAccess::clockSetup()>
    clockSetFreqHz(1000000);
   36eb0:	e59f008c 	ldr	r0, [pc, #140]	; 36f44 <BusAccess::init()+0xa0>
   36eb4:	eb000a77 	bl	39898 <BusAccess::clockSetFreqHz(unsigned long)>
    clockEnable(true);
   36eb8:	e3a00001 	mov	r0, #1
   36ebc:	eb000ac6 	bl	399dc <BusAccess::clockEnable(bool)>
    setPinOut(BR_MUX_0, 0);
   36ec0:	e1a01004 	mov	r1, r4
   36ec4:	e3a0000b 	mov	r0, #11
   36ec8:	eb000c2c 	bl	39f80 <BusAccess::setPinOut(int, bool)>
    setPinOut(BR_MUX_1, 0);
   36ecc:	e1a01004 	mov	r1, r4
   36ed0:	e3a00009 	mov	r0, #9
   36ed4:	eb000c29 	bl	39f80 <BusAccess::setPinOut(int, bool)>
    setPinOut(BR_MUX_2, 0);
   36ed8:	e1a01004 	mov	r1, r4
   36edc:	e3a0000a 	mov	r0, #10
   36ee0:	eb000c26 	bl	39f80 <BusAccess::setPinOut(int, bool)>
    setPinOut(BR_BUSRQ_BAR, 1);
   36ee4:	e3a01001 	mov	r1, #1
   36ee8:	e3a00013 	mov	r0, #19
   36eec:	eb000c23 	bl	39f80 <BusAccess::setPinOut(int, bool)>
    _busIsUnderControl = false;
   36ef0:	e59f3050 	ldr	r3, [pc, #80]	; 36f48 <BusAccess::init()+0xa4>
        
    // Address push
    setPinOut(BR_PUSH_ADDR_BAR, 1);
   36ef4:	e3a01001 	mov	r1, #1
   36ef8:	e3a00003 	mov	r0, #3
    _busIsUnderControl = false;
   36efc:	e5c34000 	strb	r4, [r3]
    setPinOut(BR_PUSH_ADDR_BAR, 1);
   36f00:	eb000c1e 	bl	39f80 <BusAccess::setPinOut(int, bool)>
    
    // High address clock
    setPinOut(BR_HADDR_CK, 0);
   36f04:	e1a01004 	mov	r1, r4
   36f08:	e3a00007 	mov	r0, #7
   36f0c:	eb000c1b 	bl	39f80 <BusAccess::setPinOut(int, bool)>
    
    // Low address clock
    setPinOut(BR_LADDR_CK, 0);
   36f10:	e1a01004 	mov	r1, r4
   36f14:	e3a00010 	mov	r0, #16
   36f18:	eb000c18 	bl	39f80 <BusAccess::setPinOut(int, bool)>
    
    // Data bus direction
    setPinOut(BR_DATA_DIR_IN, 1);
   36f1c:	e3a01001 	mov	r1, #1
   36f20:	e3a00006 	mov	r0, #6
   36f24:	eb000c15 	bl	39f80 <BusAccess::setPinOut(int, bool)>

    // Paging initially inactive
    setPinOut(BR_PAGING_RAM_PIN, 0);
   36f28:	e1a01004 	mov	r1, r4
   36f2c:	e3a00008 	mov	r0, #8
   36f30:	eb000c12 	bl	39f80 <BusAccess::setPinOut(int, bool)>

    // Setup MREQ and IORQ enables
    waitSetupMREQAndIORQEnables();
   36f34:	eb000bb7 	bl	39e18 <BusAccess::waitSetupMREQAndIORQEnables()>
    _waitAsserted = false;
   36f38:	e59f300c 	ldr	r3, [pc, #12]	; 36f4c <BusAccess::init()+0xa8>
   36f3c:	e5c34000 	strb	r4, [r3]
    // Heartbeat timer
#ifdef TIMER_BASED_WAIT_STATES
    Timers::set(TIMER_ISR_PERIOD_US, BusAccess::stepTimerISR, NULL);
    Timers::start();
#endif
}
   36f40:	e8bd8010 	pop	{r4, pc}
   36f44:	000f4240 	.word	0x000f4240
   36f48:	0008c8b0 	.word	0x0008c8b0
   36f4c:	0008c420 	.word	0x0008c420

00036f50 <BusAccess::busAccessReset()>:
// Bus Reset
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// Reset the bus raider bus
void BusAccess::busAccessReset()
{
   36f50:	e92d4010 	push	{r4, lr}
    // Instruct hardware to page in
    pagingPageIn();
   36f54:	eb000c5d 	bl	3a0d0 <BusAccess::pagingPageIn()>

    // Clear the MUX
    static inline void muxClear()
    {
        // Clear to a safe setting - sets HADDR_SER low
        WR32(ARM_GPIO_GPCLR0, BR_MUX_CTRL_BIT_MASK);
   36f58:	e3a00c0e 	mov	r0, #3584	; 0xe00
    
    // Clear mux
    muxClear();

    // Wait cycle length
    _waitCycleLengthUs = 0;
   36f5c:	e3a02000 	mov	r2, #0
   36f60:	e59f1048 	ldr	r1, [pc, #72]	; 36fb0 <BusAccess::busAccessReset()+0x60>
   36f64:	e59f3048 	ldr	r3, [pc, #72]	; 36fb4 <BusAccess::busAccessReset()+0x64>
   36f68:	e5810028 	str	r0, [r1, #40]	; 0x28
   36f6c:	e3a04064 	mov	r4, #100	; 0x64
   36f70:	e5832000 	str	r2, [r3]
   36f74:	ea000003 	b	36f88 <BusAccess::busAccessReset()+0x38>
    // Check for bus ack released
    for (int i = 0; i < BusSocketInfo::MAX_WAIT_FOR_BUSACK_US; i++)
    {
        if (!controlBusAcknowledged())
            break;
        microsDelay(1);
   36f78:	e3a00001 	mov	r0, #1
   36f7c:	ebfffe09 	bl	367a8 <microsDelay>
    for (int i = 0; i < BusSocketInfo::MAX_WAIT_FOR_BUSACK_US; i++)
   36f80:	e2544001 	subs	r4, r4, #1
   36f84:	0a000002 	beq	36f94 <BusAccess::busAccessReset()+0x44>
        if (!controlBusAcknowledged())
   36f88:	eb000668 	bl	38930 <BusAccess::controlBusAcknowledged()>
   36f8c:	e3500000 	cmp	r0, #0
   36f90:	1afffff8 	bne	36f78 <BusAccess::busAccessReset()+0x28>
    }

    // Clear any wait condition if necessary
    uint32_t busVals = RD32(ARM_GPIO_GPLEV0);
   36f94:	e59f3014 	ldr	r3, [pc, #20]	; 36fb0 <BusAccess::busAccessReset()+0x60>
   36f98:	e5933034 	ldr	r3, [r3, #52]	; 0x34
    if ((busVals & BR_WAIT_BAR_MASK) == 0)
   36f9c:	e3130020 	tst	r3, #32
   36fa0:	1a000000 	bne	36fa8 <BusAccess::busAccessReset()+0x58>
        waitResetFlipFlops();
   36fa4:	eb000bde 	bl	39f24 <BusAccess::waitResetFlipFlops()>

    // Update wait state generation
    // Debug
    // LogWrite("BusAccess", LOG_DEBUG, "busAccessReset");
    waitEnablementUpdate();
}
   36fa8:	e8bd4010 	pop	{r4, lr}
    waitEnablementUpdate();
   36fac:	ea000ad2 	b	39afc <BusAccess::waitEnablementUpdate()>
   36fb0:	20200000 	.word	0x20200000
   36fb4:	0006f3fc 	.word	0x0006f3fc

00036fb8 <BusAccess::waitOnMemory(int, bool)>:
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void BusAccess::waitOnMemory(int busSocket, bool isOn)
{
    // Check validity
    if ((busSocket < 0) || (busSocket >= _busSocketCount))
   36fb8:	e3500000 	cmp	r0, #0
   36fbc:	b12fff1e 	bxlt	lr
   36fc0:	e59f3018 	ldr	r3, [pc, #24]	; 36fe0 <BusAccess::waitOnMemory(int, bool)+0x28>
   36fc4:	e5932004 	ldr	r2, [r3, #4]
   36fc8:	e1520000 	cmp	r2, r0
   36fcc:	d12fff1e 	bxle	lr
        return;
    _busSockets[busSocket].waitOnMemory = isOn;
   36fd0:	e0800100 	add	r0, r0, r0, lsl #2
   36fd4:	e0830180 	add	r0, r3, r0, lsl #3
   36fd8:	e5c01014 	strb	r1, [r0, #20]

    // Update wait handling
    // Debug
    // LogWrite("BusAccess", LOG_DEBUG, "waitonMem");
    waitEnablementUpdate();
   36fdc:	ea000ac6 	b	39afc <BusAccess::waitEnablementUpdate()>
   36fe0:	0008c420 	.word	0x0008c420

00036fe4 <BusAccess::waitOnIO(int, bool)>:
}

void BusAccess::waitOnIO(int busSocket, bool isOn)
{
    // Check validity
    if ((busSocket < 0) || (busSocket >= _busSocketCount))
   36fe4:	e3500000 	cmp	r0, #0
   36fe8:	b12fff1e 	bxlt	lr
   36fec:	e59f3018 	ldr	r3, [pc, #24]	; 3700c <BusAccess::waitOnIO(int, bool)+0x28>
   36ff0:	e5932004 	ldr	r2, [r3, #4]
   36ff4:	e1520000 	cmp	r2, r0
   36ff8:	d12fff1e 	bxle	lr
        return;
    _busSockets[busSocket].waitOnIO = isOn;
   36ffc:	e0800100 	add	r0, r0, r0, lsl #2
   37000:	e0830180 	add	r0, r3, r0, lsl #3
   37004:	e5c01015 	strb	r1, [r0, #21]

    // Update wait handling
    // Debug
    // LogWrite("BusAccess", LOG_DEBUG, "waitOnIO");
    waitEnablementUpdate();
   37008:	ea000abb 	b	39afc <BusAccess::waitEnablementUpdate()>
   3700c:	0008c420 	.word	0x0008c420

00037010 <BusAccess::waitIsOnMemory()>:
}

bool BusAccess::waitIsOnMemory()
{
    return _waitOnMemory;
   37010:	e59f3004 	ldr	r3, [pc, #4]	; 3701c <BusAccess::waitIsOnMemory()+0xc>
}
   37014:	e5d30198 	ldrb	r0, [r3, #408]	; 0x198
   37018:	e12fff1e 	bx	lr
   3701c:	0008c420 	.word	0x0008c420

00037020 <BusAccess::waitSetCycleUs(unsigned long)>:

// Min cycle Us when in waitOnMemory mode
void BusAccess::waitSetCycleUs(uint32_t cycleUs)
{
    _waitCycleLengthUs = cycleUs;
   37020:	e59f3004 	ldr	r3, [pc, #4]	; 3702c <BusAccess::waitSetCycleUs(unsigned long)+0xc>
   37024:	e5830000 	str	r0, [r3]
}
   37028:	e12fff1e 	bx	lr
   3702c:	0006f3fc 	.word	0x0006f3fc

00037030 <BusAccess::waitRelease()>:
// Pause & Single Step Handling
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void BusAccess::waitRelease()
{
    waitResetFlipFlops();
   37030:	ea000bbb 	b	39f24 <BusAccess::waitResetFlipFlops()>

00037034 <BusAccess::waitIsHeld()>:
}

bool BusAccess::waitIsHeld()
{
    return _waitHold;
   37034:	e59f3004 	ldr	r3, [pc, #4]	; 37040 <BusAccess::waitIsHeld()+0xc>
   37038:	e5d30199 	ldrb	r0, [r3, #409]	; 0x199
}
   3703c:	e12fff1e 	bx	lr
   37040:	0008c420 	.word	0x0008c420

00037044 <BusAccess::waitHold(int, bool)>:

void BusAccess::waitHold(int busSocket, bool hold)
{
    // Check validity
    if ((busSocket < 0) || (busSocket >= _busSocketCount))
   37044:	e3500000 	cmp	r0, #0
   37048:	b12fff1e 	bxlt	lr
   3704c:	e59f3164 	ldr	r3, [pc, #356]	; 371b8 <BusAccess::waitHold(int, bool)+0x174>
   37050:	e5932004 	ldr	r2, [r3, #4]
   37054:	e1520000 	cmp	r2, r0
   37058:	d12fff1e 	bxle	lr
        return;
    _busSockets[busSocket].holdInWaitReq = hold;
    // Update flag
    for (int i = 0; i < _busSocketCount; i++)
    {
        if (!_busSockets[i].enabled)
   3705c:	e5d3c008 	ldrb	ip, [r3, #8]
    _busSockets[busSocket].holdInWaitReq = hold;
   37060:	e0800100 	add	r0, r0, r0, lsl #2
   37064:	e0830180 	add	r0, r3, r0, lsl #3
        if (!_busSockets[i].enabled)
   37068:	e35c0000 	cmp	ip, #0
    _busSockets[busSocket].holdInWaitReq = hold;
   3706c:	e5c0102e 	strb	r1, [r0, #46]	; 0x2e
        if (!_busSockets[i].enabled)
   37070:	0a000002 	beq	37080 <BusAccess::waitHold(int, bool)+0x3c>
            continue;
        if (_busSockets[i].holdInWaitReq)
   37074:	e5d3102e 	ldrb	r1, [r3, #46]	; 0x2e
   37078:	e3510000 	cmp	r1, #0
   3707c:	1a00004a 	bne	371ac <BusAccess::waitHold(int, bool)+0x168>
    for (int i = 0; i < _busSocketCount; i++)
   37080:	e3520001 	cmp	r2, #1
   37084:	0a000045 	beq	371a0 <BusAccess::waitHold(int, bool)+0x15c>
        if (!_busSockets[i].enabled)
   37088:	e5d31030 	ldrb	r1, [r3, #48]	; 0x30
   3708c:	e3510000 	cmp	r1, #0
   37090:	0a000002 	beq	370a0 <BusAccess::waitHold(int, bool)+0x5c>
        if (_busSockets[i].holdInWaitReq)
   37094:	e5d31056 	ldrb	r1, [r3, #86]	; 0x56
   37098:	e3510000 	cmp	r1, #0
   3709c:	1a000042 	bne	371ac <BusAccess::waitHold(int, bool)+0x168>
    for (int i = 0; i < _busSocketCount; i++)
   370a0:	e3520002 	cmp	r2, #2
   370a4:	0a00003d 	beq	371a0 <BusAccess::waitHold(int, bool)+0x15c>
        if (!_busSockets[i].enabled)
   370a8:	e5d31058 	ldrb	r1, [r3, #88]	; 0x58
   370ac:	e3510000 	cmp	r1, #0
   370b0:	0a000002 	beq	370c0 <BusAccess::waitHold(int, bool)+0x7c>
        if (_busSockets[i].holdInWaitReq)
   370b4:	e5d3107e 	ldrb	r1, [r3, #126]	; 0x7e
   370b8:	e3510000 	cmp	r1, #0
   370bc:	1a00003a 	bne	371ac <BusAccess::waitHold(int, bool)+0x168>
    for (int i = 0; i < _busSocketCount; i++)
   370c0:	e3520003 	cmp	r2, #3
   370c4:	0a000035 	beq	371a0 <BusAccess::waitHold(int, bool)+0x15c>
        if (!_busSockets[i].enabled)
   370c8:	e5d31080 	ldrb	r1, [r3, #128]	; 0x80
   370cc:	e3510000 	cmp	r1, #0
   370d0:	0a000002 	beq	370e0 <BusAccess::waitHold(int, bool)+0x9c>
        if (_busSockets[i].holdInWaitReq)
   370d4:	e5d310a6 	ldrb	r1, [r3, #166]	; 0xa6
   370d8:	e3510000 	cmp	r1, #0
   370dc:	1a000032 	bne	371ac <BusAccess::waitHold(int, bool)+0x168>
    for (int i = 0; i < _busSocketCount; i++)
   370e0:	e3520004 	cmp	r2, #4
   370e4:	0a00002d 	beq	371a0 <BusAccess::waitHold(int, bool)+0x15c>
        if (!_busSockets[i].enabled)
   370e8:	e5d310a8 	ldrb	r1, [r3, #168]	; 0xa8
   370ec:	e3510000 	cmp	r1, #0
   370f0:	0a000002 	beq	37100 <BusAccess::waitHold(int, bool)+0xbc>
        if (_busSockets[i].holdInWaitReq)
   370f4:	e5d310ce 	ldrb	r1, [r3, #206]	; 0xce
   370f8:	e3510000 	cmp	r1, #0
   370fc:	1a00002a 	bne	371ac <BusAccess::waitHold(int, bool)+0x168>
    for (int i = 0; i < _busSocketCount; i++)
   37100:	e3520005 	cmp	r2, #5
   37104:	0a000025 	beq	371a0 <BusAccess::waitHold(int, bool)+0x15c>
        if (!_busSockets[i].enabled)
   37108:	e5d310d0 	ldrb	r1, [r3, #208]	; 0xd0
   3710c:	e3510000 	cmp	r1, #0
   37110:	0a000002 	beq	37120 <BusAccess::waitHold(int, bool)+0xdc>
        if (_busSockets[i].holdInWaitReq)
   37114:	e5d310f6 	ldrb	r1, [r3, #246]	; 0xf6
   37118:	e3510000 	cmp	r1, #0
   3711c:	1a000022 	bne	371ac <BusAccess::waitHold(int, bool)+0x168>
    for (int i = 0; i < _busSocketCount; i++)
   37120:	e3520006 	cmp	r2, #6
   37124:	0a00001d 	beq	371a0 <BusAccess::waitHold(int, bool)+0x15c>
        if (!_busSockets[i].enabled)
   37128:	e5d310f8 	ldrb	r1, [r3, #248]	; 0xf8
   3712c:	e3510000 	cmp	r1, #0
   37130:	0a000002 	beq	37140 <BusAccess::waitHold(int, bool)+0xfc>
        if (_busSockets[i].holdInWaitReq)
   37134:	e5d3111e 	ldrb	r1, [r3, #286]	; 0x11e
   37138:	e3510000 	cmp	r1, #0
   3713c:	1a00001a 	bne	371ac <BusAccess::waitHold(int, bool)+0x168>
    for (int i = 0; i < _busSocketCount; i++)
   37140:	e3520007 	cmp	r2, #7
   37144:	0a000015 	beq	371a0 <BusAccess::waitHold(int, bool)+0x15c>
        if (!_busSockets[i].enabled)
   37148:	e5d31120 	ldrb	r1, [r3, #288]	; 0x120
   3714c:	e3510000 	cmp	r1, #0
   37150:	0a000002 	beq	37160 <BusAccess::waitHold(int, bool)+0x11c>
        if (_busSockets[i].holdInWaitReq)
   37154:	e5d31146 	ldrb	r1, [r3, #326]	; 0x146
   37158:	e3510000 	cmp	r1, #0
   3715c:	1a000012 	bne	371ac <BusAccess::waitHold(int, bool)+0x168>
    for (int i = 0; i < _busSocketCount; i++)
   37160:	e3520008 	cmp	r2, #8
   37164:	0a00000d 	beq	371a0 <BusAccess::waitHold(int, bool)+0x15c>
        if (!_busSockets[i].enabled)
   37168:	e5d31148 	ldrb	r1, [r3, #328]	; 0x148
   3716c:	e3510000 	cmp	r1, #0
   37170:	0a000002 	beq	37180 <BusAccess::waitHold(int, bool)+0x13c>
        if (_busSockets[i].holdInWaitReq)
   37174:	e5d3116e 	ldrb	r1, [r3, #366]	; 0x16e
   37178:	e3510000 	cmp	r1, #0
   3717c:	1a00000a 	bne	371ac <BusAccess::waitHold(int, bool)+0x168>
    for (int i = 0; i < _busSocketCount; i++)
   37180:	e3520009 	cmp	r2, #9
   37184:	0a000005 	beq	371a0 <BusAccess::waitHold(int, bool)+0x15c>
        if (!_busSockets[i].enabled)
   37188:	e5d32170 	ldrb	r2, [r3, #368]	; 0x170
   3718c:	e3520000 	cmp	r2, #0
   37190:	0a000002 	beq	371a0 <BusAccess::waitHold(int, bool)+0x15c>
        if (_busSockets[i].holdInWaitReq)
   37194:	e5d32196 	ldrb	r2, [r3, #406]	; 0x196
   37198:	e3520000 	cmp	r2, #0
   3719c:	1a000002 	bne	371ac <BusAccess::waitHold(int, bool)+0x168>
        {
            _waitHold = true;
            return;
        }
    }
    _waitHold = false;
   371a0:	e3a02000 	mov	r2, #0
   371a4:	e5c32199 	strb	r2, [r3, #409]	; 0x199
}
   371a8:	e12fff1e 	bx	lr
            _waitHold = true;
   371ac:	e3a02001 	mov	r2, #1
   371b0:	e5c32199 	strb	r2, [r3, #409]	; 0x199
            return;
   371b4:	e12fff1e 	bx	lr
   371b8:	0008c420 	.word	0x0008c420

000371bc <BusAccess::targetReqReset(int, int)>:

// Reset the host
void BusAccess::targetReqReset(int busSocket, int durationUs)
{
    // Check validity
    if ((busSocket < 0) || (busSocket >= _busSocketCount))
   371bc:	e3500000 	cmp	r0, #0
   371c0:	b12fff1e 	bxlt	lr
   371c4:	e59f3044 	ldr	r3, [pc, #68]	; 37210 <BusAccess::targetReqReset(int, int)+0x54>
   371c8:	e5932004 	ldr	r2, [r3, #4]
   371cc:	e1520000 	cmp	r2, r0
   371d0:	d12fff1e 	bxle	lr
        return;
    _busSockets[busSocket].resetDurationUs = (durationUs <= 0) ? BR_RESET_PULSE_US : durationUs;
   371d4:	e3510000 	cmp	r1, #0
{
   371d8:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   371dc:	e1a0c001 	mov	ip, r1
    _busSockets[busSocket].resetPending = true;
   371e0:	e3a0e001 	mov	lr, #1
    _busSockets[busSocket].resetDurationUs = (durationUs <= 0) ? BR_RESET_PULSE_US : durationUs;
   371e4:	c1a0c001 	movgt	ip, r1
   371e8:	d3a0cffa 	movle	ip, #1000	; 0x3e8
   371ec:	e0800100 	add	r0, r0, r0, lsl #2
   371f0:	e0833180 	add	r3, r3, r0, lsl #3
   371f4:	e583c018 	str	ip, [r3, #24]
    LogWrite("BusAccess", LOG_DEBUG, "targetReqReset");
   371f8:	e59f2014 	ldr	r2, [pc, #20]	; 37214 <BusAccess::targetReqReset(int, int)+0x58>
    _busSockets[busSocket].resetPending = true;
   371fc:	e5c3e016 	strb	lr, [r3, #22]
    LogWrite("BusAccess", LOG_DEBUG, "targetReqReset");
   37200:	e3a01004 	mov	r1, #4
   37204:	e59f000c 	ldr	r0, [pc, #12]	; 37218 <BusAccess::targetReqReset(int, int)+0x5c>
}
   37208:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
    LogWrite("BusAccess", LOG_DEBUG, "targetReqReset");
   3720c:	eaffb3d9 	b	24178 <LogWrite>
   37210:	0008c420 	.word	0x0008c420
   37214:	000559ec 	.word	0x000559ec
   37218:	000559fc 	.word	0x000559fc

0003721c <BusAccess::targetReqNMI(int, int)>:

// Non-maskable interrupt the host
void BusAccess::targetReqNMI(int busSocket, int durationUs)
{
    // Check validity
    if ((busSocket < 0) || (busSocket >= _busSocketCount))
   3721c:	e3500000 	cmp	r0, #0
   37220:	b12fff1e 	bxlt	lr
   37224:	e59f3028 	ldr	r3, [pc, #40]	; 37254 <BusAccess::targetReqNMI(int, int)+0x38>
   37228:	e5932004 	ldr	r2, [r3, #4]
   3722c:	e1520000 	cmp	r2, r0
   37230:	d12fff1e 	bxle	lr
        return;
    // Request NMI
    _busSockets[busSocket].nmiDurationUs = (durationUs <= 0) ? BR_NMI_PULSE_US : durationUs;
   37234:	e3510000 	cmp	r1, #0
   37238:	d3a01032 	movle	r1, #50	; 0x32
    _busSockets[busSocket].nmiPending = true;
   3723c:	e3a02001 	mov	r2, #1
    _busSockets[busSocket].nmiDurationUs = (durationUs <= 0) ? BR_NMI_PULSE_US : durationUs;
   37240:	e0800100 	add	r0, r0, r0, lsl #2
   37244:	e0830180 	add	r0, r3, r0, lsl #3
   37248:	e5801020 	str	r1, [r0, #32]
    _busSockets[busSocket].nmiPending = true;
   3724c:	e5c0201c 	strb	r2, [r0, #28]
}
   37250:	e12fff1e 	bx	lr
   37254:	0008c420 	.word	0x0008c420

00037258 <BusAccess::targetReqIRQ(int, int)>:
// Maskable interrupt the host
void BusAccess::targetReqIRQ(int busSocket, int durationUs)
{
    // Check validity
    // LogWrite("BA", LOG_DEBUG, "ReqIRQ sock %d us %d", busSocket, _busSockets[busSocket].busActionDurationUs);
    if ((busSocket < 0) || (busSocket >= _busSocketCount))
   37258:	e3500000 	cmp	r0, #0
   3725c:	b12fff1e 	bxlt	lr
   37260:	e59f3028 	ldr	r3, [pc, #40]	; 37290 <BusAccess::targetReqIRQ(int, int)+0x38>
   37264:	e5932004 	ldr	r2, [r3, #4]
   37268:	e1520000 	cmp	r2, r0
   3726c:	d12fff1e 	bxle	lr
        return;
    // Request NMI
    _busSockets[busSocket].irqDurationUs = (durationUs <= 0) ? BR_IRQ_PULSE_US : durationUs;
   37270:	e3510000 	cmp	r1, #0
   37274:	d3a01032 	movle	r1, #50	; 0x32
    _busSockets[busSocket].irqPending = true;
   37278:	e3a02001 	mov	r2, #1
    _busSockets[busSocket].irqDurationUs = (durationUs <= 0) ? BR_IRQ_PULSE_US : durationUs;
   3727c:	e0800100 	add	r0, r0, r0, lsl #2
   37280:	e0830180 	add	r0, r3, r0, lsl #3
   37284:	e5801028 	str	r1, [r0, #40]	; 0x28
    _busSockets[busSocket].irqPending = true;
   37288:	e5c02024 	strb	r2, [r0, #36]	; 0x24
}
   3728c:	e12fff1e 	bx	lr
   37290:	0008c420 	.word	0x0008c420

00037294 <BusAccess::targetReqBus(int, BR_BUS_ACTION_REASON)>:

// Bus request
void BusAccess::targetReqBus(int busSocket, BR_BUS_ACTION_REASON busMasterReason)
{
    // Check validity
    if ((busSocket < 0) || (busSocket >= _busSocketCount))
   37294:	e3500000 	cmp	r0, #0
   37298:	b12fff1e 	bxlt	lr
{
   3729c:	e92d4070 	push	{r4, r5, r6, lr}
    if ((busSocket < 0) || (busSocket >= _busSocketCount))
   372a0:	e59f4190 	ldr	r4, [pc, #400]	; 37438 <BusAccess::targetReqBus(int, BR_BUS_ACTION_REASON)+0x1a4>
   372a4:	e594c004 	ldr	ip, [r4, #4]
   372a8:	e15c0000 	cmp	ip, r0
   372ac:	d8bd8070 	pople	{r4, r5, r6, pc}
        return;
    _busSockets[busSocket].busMasterRequest = true;
   372b0:	e3a03001 	mov	r3, #1
   372b4:	e0800100 	add	r0, r0, r0, lsl #2
   372b8:	e0840180 	add	r0, r4, r0, lsl #3
   372bc:	e5c0302c 	strb	r3, [r0, #44]	; 0x2c
    _busSockets[busSocket].busMasterReason = busMasterReason;
   372c0:	e5c0102d 	strb	r1, [r0, #45]	; 0x2d
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void BusAccess::busActionCheck()
{
    // Should be idle
    if (_busActionInProgress)
   372c4:	e5d4319a 	ldrb	r3, [r4, #410]	; 0x19a
   372c8:	e21330ff 	ands	r3, r3, #255	; 0xff
   372cc:	0a00001d 	beq	37348 <BusAccess::targetReqBus(int, BR_BUS_ACTION_REASON)+0xb4>
}

bool BusAccess::busActionHandleStart()
{
    // Check if a bus action has started but isn't yet asserted
    if (!_busActionInProgress || _busActionAsserted)
   372d0:	e5d4319a 	ldrb	r3, [r4, #410]	; 0x19a
   372d4:	e3530000 	cmp	r3, #0
   372d8:	08bd8070 	popeq	{r4, r5, r6, pc}
   372dc:	e5d431a0 	ldrb	r3, [r4, #416]	; 0x1a0
   372e0:	e21350ff 	ands	r5, r3, #255	; 0xff
   372e4:	18bd8070 	popne	{r4, r5, r6, pc}
        return false;

    // Initiate the action
    setSignal(_busActionType, true);
   372e8:	e5d4019b 	ldrb	r0, [r4, #411]	; 0x19b
   372ec:	e3a01001 	mov	r1, #1
   372f0:	eb000b48 	bl	3a018 <BusAccess::setSignal(BR_BUS_ACTION, bool)>
    // if (_busActionType == BR_BUS_ACTION_RESET)
    //     LogWrite(FromBusAccess, LOG_DEBUG, "RESET SET %u", micros());

    // Set start timer
    _busActionAssertedStartUs = micros();
   372f4:	ebfffd27 	bl	36798 <micros>
   372f8:	e58401a4 	str	r0, [r4, #420]	; 0x1a4
    _busActionAssertedMaxUs = _busSockets[_busActionSocket].getAssertUs(_busActionType);
   372fc:	e59421a8 	ldr	r2, [r4, #424]	; 0x1a8
   37300:	e5d4319b 	ldrb	r3, [r4, #411]	; 0x19b
   37304:	e6ef3073 	uxtb	r3, r3
        if (type == BR_BUS_ACTION_BUSRQ)
   37308:	e3530004 	cmp	r3, #4
            return MAX_WAIT_FOR_BUSACK_US;
   3730c:	03a03064 	moveq	r3, #100	; 0x64
        if (type == BR_BUS_ACTION_BUSRQ)
   37310:	0a000008 	beq	37338 <BusAccess::targetReqBus(int, BR_BUS_ACTION_REASON)+0xa4>
        else if (type == BR_BUS_ACTION_RESET)
   37314:	e3530001 	cmp	r3, #1
   37318:	0a00003e 	beq	37418 <BusAccess::targetReqBus(int, BR_BUS_ACTION_REASON)+0x184>
        else if (type == BR_BUS_ACTION_NMI)
   3731c:	e3530002 	cmp	r3, #2
   37320:	0a000040 	beq	37428 <BusAccess::targetReqBus(int, BR_BUS_ACTION_REASON)+0x194>
        else if (type == BR_BUS_ACTION_IRQ)
   37324:	e3530003 	cmp	r3, #3
        return 0;
   37328:	11a03005 	movne	r3, r5
            return irqDurationUs;
   3732c:	00822102 	addeq	r2, r2, r2, lsl #2
   37330:	00843182 	addeq	r3, r4, r2, lsl #3
   37334:	05933028 	ldreq	r3, [r3, #40]	; 0x28
    _busActionAsserted = true;
   37338:	e3a02001 	mov	r2, #1
    _busActionAssertedMaxUs = _busSockets[_busActionSocket].getAssertUs(_busActionType);
   3733c:	e58431ac 	str	r3, [r4, #428]	; 0x1ac
    _busActionAsserted = true;
   37340:	e5c421a0 	strb	r2, [r4, #416]	; 0x1a0
}
   37344:	e8bd8070 	pop	{r4, r5, r6, pc}
   37348:	e2840008 	add	r0, r4, #8
   3734c:	ea000008 	b	37374 <BusAccess::targetReqBus(int, BR_BUS_ACTION_REASON)+0xe0>
        if (nmiPending)
   37350:	e5d2e01c 	ldrb	lr, [r2, #28]
   37354:	e35e0000 	cmp	lr, #0
   37358:	1a000012 	bne	373a8 <BusAccess::targetReqBus(int, BR_BUS_ACTION_REASON)+0x114>
        if (irqPending)
   3735c:	e5d22024 	ldrb	r2, [r2, #36]	; 0x24
   37360:	e3520000 	cmp	r2, #0
   37364:	1a00000f 	bne	373a8 <BusAccess::targetReqBus(int, BR_BUS_ACTION_REASON)+0x114>
    for (int i = 0; i < _busSocketCount; i++)
   37368:	e2833001 	add	r3, r3, #1
   3736c:	e15c0003 	cmp	ip, r3
   37370:	daffffd6 	ble	372d0 <BusAccess::targetReqBus(int, BR_BUS_ACTION_REASON)+0x3c>
        if (_busSockets[i].enabled && (_busSockets[i].getType() != BR_BUS_ACTION_NONE))
   37374:	e5d0e000 	ldrb	lr, [r0]
        if (busMasterRequest)
   37378:	e1a01103 	lsl	r1, r3, #2
   3737c:	e0812003 	add	r2, r1, r3
   37380:	e35e0000 	cmp	lr, #0
   37384:	e0842182 	add	r2, r4, r2, lsl #3
   37388:	e2800028 	add	r0, r0, #40	; 0x28
   3738c:	0afffff5 	beq	37368 <BusAccess::targetReqBus(int, BR_BUS_ACTION_REASON)+0xd4>
   37390:	e5d2e02c 	ldrb	lr, [r2, #44]	; 0x2c
   37394:	e35e0000 	cmp	lr, #0
   37398:	1a000002 	bne	373a8 <BusAccess::targetReqBus(int, BR_BUS_ACTION_REASON)+0x114>
        if (resetPending)
   3739c:	e5d2e016 	ldrb	lr, [r2, #22]
   373a0:	e35e0000 	cmp	lr, #0
   373a4:	0affffe9 	beq	37350 <BusAccess::targetReqBus(int, BR_BUS_ACTION_REASON)+0xbc>
        if (busMasterRequest)
   373a8:	e0811003 	add	r1, r1, r3
   373ac:	e0841181 	add	r1, r4, r1, lsl #3
    _busActionSocket = busSocket;
   373b0:	e58431a8 	str	r3, [r4, #424]	; 0x1a8
   373b4:	e5d1302c 	ldrb	r3, [r1, #44]	; 0x2c
   373b8:	e3530000 	cmp	r3, #0
            return BR_BUS_ACTION_BUSRQ;
   373bc:	13a03004 	movne	r3, #4
        if (busMasterRequest)
   373c0:	0a000007 	beq	373e4 <BusAccess::targetReqBus(int, BR_BUS_ACTION_REASON)+0x150>
    _busActionInProgress = true;
   373c4:	e3a02001 	mov	r2, #1
    _busActionType = _busSockets[busSocket].getType();
   373c8:	e5c4319b 	strb	r3, [r4, #411]	; 0x19b
    _busActionInProgress = true;
   373cc:	e5c4219a 	strb	r2, [r4, #410]	; 0x19a
    _busActionInProgressStartUs = micros();
   373d0:	ebfffcf0 	bl	36798 <micros>
    _busActionAsserted = false;
   373d4:	e3a03000 	mov	r3, #0
    _busActionInProgressStartUs = micros();
   373d8:	e584019c 	str	r0, [r4, #412]	; 0x19c
    _busActionAsserted = false;
   373dc:	e5c431a0 	strb	r3, [r4, #416]	; 0x1a0
   373e0:	eaffffba 	b	372d0 <BusAccess::targetReqBus(int, BR_BUS_ACTION_REASON)+0x3c>
        if (resetPending)
   373e4:	e5d13016 	ldrb	r3, [r1, #22]
   373e8:	e3530000 	cmp	r3, #0
            return BR_BUS_ACTION_RESET;
   373ec:	13a03001 	movne	r3, #1
        if (resetPending)
   373f0:	1afffff3 	bne	373c4 <BusAccess::targetReqBus(int, BR_BUS_ACTION_REASON)+0x130>
        if (nmiPending)
   373f4:	e5d1301c 	ldrb	r3, [r1, #28]
   373f8:	e3530000 	cmp	r3, #0
            return BR_BUS_ACTION_NMI;
   373fc:	13a03002 	movne	r3, #2
        if (nmiPending)
   37400:	1affffef 	bne	373c4 <BusAccess::targetReqBus(int, BR_BUS_ACTION_REASON)+0x130>
        if (irqPending)
   37404:	e5d13024 	ldrb	r3, [r1, #36]	; 0x24
        return BR_BUS_ACTION_NONE;
   37408:	e3530000 	cmp	r3, #0
   3740c:	13a03003 	movne	r3, #3
   37410:	03a03000 	moveq	r3, #0
   37414:	eaffffea 	b	373c4 <BusAccess::targetReqBus(int, BR_BUS_ACTION_REASON)+0x130>
            return resetDurationUs;
   37418:	e0822102 	add	r2, r2, r2, lsl #2
   3741c:	e0843182 	add	r3, r4, r2, lsl #3
   37420:	e5933018 	ldr	r3, [r3, #24]
   37424:	eaffffc3 	b	37338 <BusAccess::targetReqBus(int, BR_BUS_ACTION_REASON)+0xa4>
            return nmiDurationUs;
   37428:	e0822102 	add	r2, r2, r2, lsl #2
   3742c:	e0843182 	add	r3, r4, r2, lsl #3
   37430:	e5933020 	ldr	r3, [r3, #32]
   37434:	eaffffbf 	b	37338 <BusAccess::targetReqBus(int, BR_BUS_ACTION_REASON)+0xa4>
   37438:	0008c420 	.word	0x0008c420

0003743c <BusAccess::targetPageForInjection(int, bool)>:
    if (pageOut)
   3743c:	e3510000 	cmp	r1, #0
   37440:	0a00001a 	beq	374b0 <BusAccess::targetPageForInjection(int, bool)+0x74>
{
   37444:	e92d4070 	push	{r4, r5, r6, lr}
        for (int i = 0; i < _busSocketCount; i++)
   37448:	e59f6070 	ldr	r6, [pc, #112]	; 374c0 <BusAccess::targetPageForInjection(int, bool)+0x84>
   3744c:	e5963004 	ldr	r3, [r6, #4]
   37450:	e3530000 	cmp	r3, #0
   37454:	d8bd8070 	pople	{r4, r5, r6, pc}
   37458:	e3a05000 	mov	r5, #0
   3745c:	e2864008 	add	r4, r6, #8
            if (_busSockets[i].enabled)
   37460:	e5d42000 	ldrb	r2, [r4]
   37464:	e3520000 	cmp	r2, #0
   37468:	0a00000b 	beq	3749c <BusAccess::targetPageForInjection(int, bool)+0x60>
                _busSockets[i].busActionCallback(BR_BUS_ACTION_PAGE_OUT_FOR_INJECT, BR_BUS_ACTION_GENERAL);
   3746c:	e5943008 	ldr	r3, [r4, #8]
   37470:	e3a01003 	mov	r1, #3
   37474:	e3a00007 	mov	r0, #7
   37478:	e12fff33 	blx	r3
   3747c:	e5963004 	ldr	r3, [r6, #4]
        for (int i = 0; i < _busSocketCount; i++)
   37480:	e2855001 	add	r5, r5, #1
   37484:	e1530005 	cmp	r3, r5
   37488:	e2844028 	add	r4, r4, #40	; 0x28
   3748c:	d8bd8070 	pople	{r4, r5, r6, pc}
            if (_busSockets[i].enabled)
   37490:	e5d42000 	ldrb	r2, [r4]
   37494:	e3520000 	cmp	r2, #0
   37498:	1afffff3 	bne	3746c <BusAccess::targetPageForInjection(int, bool)+0x30>
        for (int i = 0; i < _busSocketCount; i++)
   3749c:	e2855001 	add	r5, r5, #1
   374a0:	e1550003 	cmp	r5, r3
   374a4:	e2844028 	add	r4, r4, #40	; 0x28
   374a8:	baffffec 	blt	37460 <BusAccess::targetPageForInjection(int, bool)+0x24>
   374ac:	e8bd8070 	pop	{r4, r5, r6, pc}
        _targetPageInOnReadComplete = true;
   374b0:	e3a02001 	mov	r2, #1
   374b4:	e59f3004 	ldr	r3, [pc, #4]	; 374c0 <BusAccess::targetPageForInjection(int, bool)+0x84>
   374b8:	e5c321b0 	strb	r2, [r3, #432]	; 0x1b0
   374bc:	e12fff1e 	bx	lr
   374c0:	0008c420 	.word	0x0008c420

000374c4 <BusAccess::busActionCheck()>:
{
   374c4:	e92d4010 	push	{r4, lr}
    if (_busActionInProgress)
   374c8:	e59f40e4 	ldr	r4, [pc, #228]	; 375b4 <BusAccess::busActionCheck()+0xf0>
   374cc:	e5d4319a 	ldrb	r3, [r4, #410]	; 0x19a
   374d0:	e21330ff 	ands	r3, r3, #255	; 0xff
   374d4:	18bd8010 	popne	{r4, pc}
    for (int i = 0; i < _busSocketCount; i++)
   374d8:	e594e004 	ldr	lr, [r4, #4]
   374dc:	e35e0000 	cmp	lr, #0
   374e0:	d8bd8010 	pople	{r4, pc}
   374e4:	e2840008 	add	r0, r4, #8
   374e8:	ea000008 	b	37510 <BusAccess::busActionCheck()+0x4c>
        if (nmiPending)
   374ec:	e5d2c01c 	ldrb	ip, [r2, #28]
   374f0:	e35c0000 	cmp	ip, #0
   374f4:	1a000012 	bne	37544 <BusAccess::busActionCheck()+0x80>
        if (irqPending)
   374f8:	e5d22024 	ldrb	r2, [r2, #36]	; 0x24
   374fc:	e3520000 	cmp	r2, #0
   37500:	1a00000f 	bne	37544 <BusAccess::busActionCheck()+0x80>
   37504:	e2833001 	add	r3, r3, #1
   37508:	e153000e 	cmp	r3, lr
   3750c:	08bd8010 	popeq	{r4, pc}
        if (_busSockets[i].enabled && (_busSockets[i].getType() != BR_BUS_ACTION_NONE))
   37510:	e5d0c000 	ldrb	ip, [r0]
        if (busMasterRequest)
   37514:	e1a01103 	lsl	r1, r3, #2
   37518:	e0812003 	add	r2, r1, r3
   3751c:	e35c0000 	cmp	ip, #0
   37520:	e0842182 	add	r2, r4, r2, lsl #3
   37524:	e2800028 	add	r0, r0, #40	; 0x28
   37528:	0afffff5 	beq	37504 <BusAccess::busActionCheck()+0x40>
   3752c:	e5d2c02c 	ldrb	ip, [r2, #44]	; 0x2c
   37530:	e35c0000 	cmp	ip, #0
   37534:	1a000002 	bne	37544 <BusAccess::busActionCheck()+0x80>
        if (resetPending)
   37538:	e5d2c016 	ldrb	ip, [r2, #22]
   3753c:	e35c0000 	cmp	ip, #0
   37540:	0affffe9 	beq	374ec <BusAccess::busActionCheck()+0x28>
        if (busMasterRequest)
   37544:	e0811003 	add	r1, r1, r3
   37548:	e0841181 	add	r1, r4, r1, lsl #3
    _busActionSocket = busSocket;
   3754c:	e58431a8 	str	r3, [r4, #424]	; 0x1a8
   37550:	e5d1302c 	ldrb	r3, [r1, #44]	; 0x2c
   37554:	e3530000 	cmp	r3, #0
            return BR_BUS_ACTION_BUSRQ;
   37558:	13a03004 	movne	r3, #4
        if (busMasterRequest)
   3755c:	0a000007 	beq	37580 <BusAccess::busActionCheck()+0xbc>
    _busActionInProgress = true;
   37560:	e3a02001 	mov	r2, #1
    _busActionType = _busSockets[busSocket].getType();
   37564:	e5c4319b 	strb	r3, [r4, #411]	; 0x19b
    _busActionInProgress = true;
   37568:	e5c4219a 	strb	r2, [r4, #410]	; 0x19a
    _busActionInProgressStartUs = micros();
   3756c:	ebfffc89 	bl	36798 <micros>
    _busActionAsserted = false;
   37570:	e3a03000 	mov	r3, #0
    _busActionInProgressStartUs = micros();
   37574:	e584019c 	str	r0, [r4, #412]	; 0x19c
    _busActionAsserted = false;
   37578:	e5c431a0 	strb	r3, [r4, #416]	; 0x1a0
}
   3757c:	e8bd8010 	pop	{r4, pc}
        if (resetPending)
   37580:	e5d13016 	ldrb	r3, [r1, #22]
   37584:	e3530000 	cmp	r3, #0
            return BR_BUS_ACTION_RESET;
   37588:	13a03001 	movne	r3, #1
        if (resetPending)
   3758c:	1afffff3 	bne	37560 <BusAccess::busActionCheck()+0x9c>
        if (nmiPending)
   37590:	e5d1301c 	ldrb	r3, [r1, #28]
   37594:	e3530000 	cmp	r3, #0
            return BR_BUS_ACTION_NMI;
   37598:	13a03002 	movne	r3, #2
        if (nmiPending)
   3759c:	1affffef 	bne	37560 <BusAccess::busActionCheck()+0x9c>
        if (irqPending)
   375a0:	e5d13024 	ldrb	r3, [r1, #36]	; 0x24
        return BR_BUS_ACTION_NONE;
   375a4:	e3530000 	cmp	r3, #0
   375a8:	13a03003 	movne	r3, #3
   375ac:	03a03000 	moveq	r3, #0
   375b0:	eaffffea 	b	37560 <BusAccess::busActionCheck()+0x9c>
   375b4:	0008c420 	.word	0x0008c420

000375b8 <BusAccess::busActionHandleStart()>:
{
   375b8:	e92d4070 	push	{r4, r5, r6, lr}
    if (!_busActionInProgress || _busActionAsserted)
   375bc:	e59f50a4 	ldr	r5, [pc, #164]	; 37668 <BusAccess::busActionHandleStart()+0xb0>
   375c0:	e5d5019a 	ldrb	r0, [r5, #410]	; 0x19a
   375c4:	e21040ff 	ands	r4, r0, #255	; 0xff
   375c8:	0a000003 	beq	375dc <BusAccess::busActionHandleStart()+0x24>
   375cc:	e5d531a0 	ldrb	r3, [r5, #416]	; 0x1a0
   375d0:	e21360ff 	ands	r6, r3, #255	; 0xff
        return false;
   375d4:	13a04000 	movne	r4, #0
    if (!_busActionInProgress || _busActionAsserted)
   375d8:	0a000001 	beq	375e4 <BusAccess::busActionHandleStart()+0x2c>
    return true;
}
   375dc:	e1a00004 	mov	r0, r4
   375e0:	e8bd8070 	pop	{r4, r5, r6, pc}
    setSignal(_busActionType, true);
   375e4:	e5d5019b 	ldrb	r0, [r5, #411]	; 0x19b
   375e8:	e3a01001 	mov	r1, #1
   375ec:	eb000a89 	bl	3a018 <BusAccess::setSignal(BR_BUS_ACTION, bool)>
    _busActionAssertedStartUs = micros();
   375f0:	ebfffc68 	bl	36798 <micros>
   375f4:	e58501a4 	str	r0, [r5, #420]	; 0x1a4
    _busActionAssertedMaxUs = _busSockets[_busActionSocket].getAssertUs(_busActionType);
   375f8:	e59521a8 	ldr	r2, [r5, #424]	; 0x1a8
   375fc:	e5d5319b 	ldrb	r3, [r5, #411]	; 0x19b
   37600:	e6ef3073 	uxtb	r3, r3
        if (type == BR_BUS_ACTION_BUSRQ)
   37604:	e3530004 	cmp	r3, #4
            return MAX_WAIT_FOR_BUSACK_US;
   37608:	03a03064 	moveq	r3, #100	; 0x64
        if (type == BR_BUS_ACTION_BUSRQ)
   3760c:	0a000008 	beq	37634 <BusAccess::busActionHandleStart()+0x7c>
        else if (type == BR_BUS_ACTION_RESET)
   37610:	e3530001 	cmp	r3, #1
   37614:	0a00000b 	beq	37648 <BusAccess::busActionHandleStart()+0x90>
        else if (type == BR_BUS_ACTION_NMI)
   37618:	e3530002 	cmp	r3, #2
   3761c:	0a00000d 	beq	37658 <BusAccess::busActionHandleStart()+0xa0>
        else if (type == BR_BUS_ACTION_IRQ)
   37620:	e3530003 	cmp	r3, #3
        return 0;
   37624:	11a03006 	movne	r3, r6
            return irqDurationUs;
   37628:	00822102 	addeq	r2, r2, r2, lsl #2
   3762c:	00852182 	addeq	r2, r5, r2, lsl #3
   37630:	05923028 	ldreq	r3, [r2, #40]	; 0x28
    _busActionAsserted = true;
   37634:	e3a02001 	mov	r2, #1
    _busActionAssertedMaxUs = _busSockets[_busActionSocket].getAssertUs(_busActionType);
   37638:	e58531ac 	str	r3, [r5, #428]	; 0x1ac
}
   3763c:	e1a00004 	mov	r0, r4
    _busActionAsserted = true;
   37640:	e5c521a0 	strb	r2, [r5, #416]	; 0x1a0
}
   37644:	e8bd8070 	pop	{r4, r5, r6, pc}
            return resetDurationUs;
   37648:	e0822102 	add	r2, r2, r2, lsl #2
   3764c:	e0852182 	add	r2, r5, r2, lsl #3
   37650:	e5923018 	ldr	r3, [r2, #24]
   37654:	eafffff6 	b	37634 <BusAccess::busActionHandleStart()+0x7c>
            return nmiDurationUs;
   37658:	e0822102 	add	r2, r2, r2, lsl #2
   3765c:	e0852182 	add	r2, r5, r2, lsl #3
   37660:	e5923020 	ldr	r3, [r2, #32]
   37664:	eafffff2 	b	37634 <BusAccess::busActionHandleStart()+0x7c>
   37668:	0008c420 	.word	0x0008c420

0003766c <BusAccess::busActionHandleActive()>:

void BusAccess::busActionHandleActive()
{
   3766c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    // Handle active asserts
    if (!_busActionInProgress || !_busActionAsserted)
   37670:	e59f43f0 	ldr	r4, [pc, #1008]	; 37a68 <BusAccess::busActionHandleActive()+0x3fc>
   37674:	e5d4319a 	ldrb	r3, [r4, #410]	; 0x19a
   37678:	e3530000 	cmp	r3, #0
   3767c:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
   37680:	e5d431a0 	ldrb	r3, [r4, #416]	; 0x1a0
   37684:	e3530000 	cmp	r3, #0
   37688:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
        return;

    // Handle BUSRQ separately
    if (_busActionType == BR_BUS_ACTION_BUSRQ)
   3768c:	e5d4319b 	ldrb	r3, [r4, #411]	; 0x19b
   37690:	e3530004 	cmp	r3, #4
   37694:	0a00003b 	beq	37788 <BusAccess::busActionHandleActive()+0x11c>
        }

    }
    else
    {
        if (isTimeout(micros(), _busActionAssertedStartUs, _busActionAssertedMaxUs))
   37698:	ebfffc3e 	bl	36798 <micros>
   3769c:	e59411a4 	ldr	r1, [r4, #420]	; 0x1a4
   376a0:	e59421ac 	ldr	r2, [r4, #428]	; 0x1ac
   376a4:	ebfffc50 	bl	367ec <isTimeout>
   376a8:	e3500000 	cmp	r0, #0
   376ac:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
    _busActionInProgress = false;
}

void BusAccess::busActionCallback(BR_BUS_ACTION busActionType, BR_BUS_ACTION_REASON reason)
{
    for (int i = 0; i < _busSocketCount; i++)
   376b0:	e5943004 	ldr	r3, [r4, #4]
            busActionCallback(_busActionType, BR_BUS_ACTION_GENERAL);
   376b4:	e5d4719b 	ldrb	r7, [r4, #411]	; 0x19b
    for (int i = 0; i < _busSocketCount; i++)
   376b8:	e3530000 	cmp	r3, #0
            busActionCallback(_busActionType, BR_BUS_ACTION_GENERAL);
   376bc:	e6ef7077 	uxtb	r7, r7
    for (int i = 0; i < _busSocketCount; i++)
   376c0:	da00000d 	ble	376fc <BusAccess::busActionHandleActive()+0x90>
   376c4:	e3a06000 	mov	r6, #0
   376c8:	e2845008 	add	r5, r4, #8
    {
        if (!_busSockets[i].enabled)
   376cc:	e5d52000 	ldrb	r2, [r5]
   376d0:	e3520000 	cmp	r2, #0
   376d4:	0a0000a2 	beq	37964 <BusAccess::busActionHandleActive()+0x2f8>
                //     microsDelay(3);
                //     digitalWrite(8,val);
                //     microsDelay(1);
                // }

        _busSockets[i].busActionCallback(busActionType, reason);
   376d8:	e5953008 	ldr	r3, [r5, #8]
   376dc:	e3a01003 	mov	r1, #3
   376e0:	e1a00007 	mov	r0, r7
   376e4:	e12fff33 	blx	r3
   376e8:	e5943004 	ldr	r3, [r4, #4]
    for (int i = 0; i < _busSocketCount; i++)
   376ec:	e2866001 	add	r6, r6, #1
   376f0:	e1530006 	cmp	r3, r6
   376f4:	e2855028 	add	r5, r5, #40	; 0x28
   376f8:	cafffff3 	bgt	376cc <BusAccess::busActionHandleActive()+0x60>
            setSignal(_busActionType, false);
   376fc:	e5d4019b 	ldrb	r0, [r4, #411]	; 0x19b
   37700:	e3a01000 	mov	r1, #0
   37704:	eb000a43 	bl	3a018 <BusAccess::setSignal(BR_BUS_ACTION, bool)>
    for (int i = 0; i < _busSocketCount; i++)
   37708:	e5940004 	ldr	r0, [r4, #4]
   3770c:	e3500000 	cmp	r0, #0
   37710:	da000019 	ble	3777c <BusAccess::busActionHandleActive()+0x110>
   37714:	e3a03000 	mov	r3, #0
            irqPending = false;
   37718:	e1a0c003 	mov	ip, r3
        _busSockets[i].clearDown(_busActionType);
   3771c:	e5d4119b 	ldrb	r1, [r4, #411]	; 0x19b
            busMasterRequest = false;
   37720:	e0832103 	add	r2, r3, r3, lsl #2
   37724:	e6ef1071 	uxtb	r1, r1
        if (type == BR_BUS_ACTION_BUSRQ)
   37728:	e3510004 	cmp	r1, #4
            busMasterRequest = false;
   3772c:	e0842182 	add	r2, r4, r2, lsl #3
   37730:	05c2c02c 	strbeq	ip, [r2, #44]	; 0x2c
        if (type == BR_BUS_ACTION_BUSRQ)
   37734:	0a00000d 	beq	37770 <BusAccess::busActionHandleActive()+0x104>
        else if (type == BR_BUS_ACTION_RESET)
   37738:	e3510001 	cmp	r1, #1
            resetPending = false;
   3773c:	00832103 	addeq	r2, r3, r3, lsl #2
   37740:	00842182 	addeq	r2, r4, r2, lsl #3
   37744:	05c2c016 	strbeq	ip, [r2, #22]
        else if (type == BR_BUS_ACTION_RESET)
   37748:	0a000008 	beq	37770 <BusAccess::busActionHandleActive()+0x104>
        else if (type == BR_BUS_ACTION_NMI)
   3774c:	e3510002 	cmp	r1, #2
            nmiPending = false;
   37750:	00832103 	addeq	r2, r3, r3, lsl #2
   37754:	00842182 	addeq	r2, r4, r2, lsl #3
   37758:	05c2c01c 	strbeq	ip, [r2, #28]
        else if (type == BR_BUS_ACTION_NMI)
   3775c:	0a000003 	beq	37770 <BusAccess::busActionHandleActive()+0x104>
        else if (type == BR_BUS_ACTION_IRQ)
   37760:	e3510003 	cmp	r1, #3
            irqPending = false;
   37764:	00832103 	addeq	r2, r3, r3, lsl #2
   37768:	00842182 	addeq	r2, r4, r2, lsl #3
   3776c:	05c2c024 	strbeq	ip, [r2, #36]	; 0x24
    for (int i = 0; i < _busSocketCount; i++)
   37770:	e2833001 	add	r3, r3, #1
   37774:	e1530000 	cmp	r3, r0
   37778:	1affffe7 	bne	3771c <BusAccess::busActionHandleActive()+0xb0>
    _busActionInProgress = false;
   3777c:	e3a03000 	mov	r3, #0
   37780:	e5c4319a 	strb	r3, [r4, #410]	; 0x19a
}
   37784:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
        if (controlBusAcknowledged())
   37788:	eb000468 	bl	38930 <BusAccess::controlBusAcknowledged()>
   3778c:	e2505000 	subs	r5, r0, #0
   37790:	1a00003d 	bne	3788c <BusAccess::busActionHandleActive()+0x220>
            if (isTimeout(micros(), _busActionAssertedStartUs, _busActionAssertedMaxUs))
   37794:	ebfffbff 	bl	36798 <micros>
   37798:	e59411a4 	ldr	r1, [r4, #420]	; 0x1a4
   3779c:	e59421ac 	ldr	r2, [r4, #428]	; 0x1ac
   377a0:	ebfffc11 	bl	367ec <isTimeout>
   377a4:	e3500000 	cmp	r0, #0
   377a8:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
                busActionCallback(BR_BUS_ACTION_BUSRQ_FAIL, _busSockets[_busActionSocket].busMasterReason);
   377ac:	e59421a8 	ldr	r2, [r4, #424]	; 0x1a8
    for (int i = 0; i < _busSocketCount; i++)
   377b0:	e5943004 	ldr	r3, [r4, #4]
                busActionCallback(BR_BUS_ACTION_BUSRQ_FAIL, _busSockets[_busActionSocket].busMasterReason);
   377b4:	e0822102 	add	r2, r2, r2, lsl #2
   377b8:	e0842182 	add	r2, r4, r2, lsl #3
   377bc:	e5d2802d 	ldrb	r8, [r2, #45]	; 0x2d
    for (int i = 0; i < _busSocketCount; i++)
   377c0:	e3530000 	cmp	r3, #0
                busActionCallback(BR_BUS_ACTION_BUSRQ_FAIL, _busSockets[_busActionSocket].busMasterReason);
   377c4:	e6ef8078 	uxtb	r8, r8
    for (int i = 0; i < _busSocketCount; i++)
   377c8:	da00000f 	ble	3780c <BusAccess::busActionHandleActive()+0x1a0>
   377cc:	e1a07005 	mov	r7, r5
   377d0:	e2846008 	add	r6, r4, #8
        if (!_busSockets[i].enabled)
   377d4:	e5d62000 	ldrb	r2, [r6]
   377d8:	e3520000 	cmp	r2, #0
   377dc:	0a00007b 	beq	379d0 <BusAccess::busActionHandleActive()+0x364>
        _busSockets[i].busActionCallback(busActionType, reason);
   377e0:	e5963008 	ldr	r3, [r6, #8]
   377e4:	e1a01008 	mov	r1, r8
   377e8:	e3a00005 	mov	r0, #5
   377ec:	e12fff33 	blx	r3
   377f0:	e5943004 	ldr	r3, [r4, #4]
    for (int i = 0; i < _busSocketCount; i++)
   377f4:	e2877001 	add	r7, r7, #1
   377f8:	e1530007 	cmp	r3, r7
   377fc:	e2866028 	add	r6, r6, #40	; 0x28
   37800:	cafffff3 	bgt	377d4 <BusAccess::busActionHandleActive()+0x168>
                // }

    }

    // If we just programmed then call again for mirroring
    if (reason == BR_BUS_ACTION_PROGRAMMING)
   37804:	e3580002 	cmp	r8, #2
   37808:	0a000080 	beq	37a10 <BusAccess::busActionHandleActive()+0x3a4>
                setSignal(BR_BUS_ACTION_BUSRQ, false);
   3780c:	e3a01000 	mov	r1, #0
   37810:	e3a00004 	mov	r0, #4
   37814:	eb0009ff 	bl	3a018 <BusAccess::setSignal(BR_BUS_ACTION, bool)>
    for (int i = 0; i < _busSocketCount; i++)
   37818:	e5941004 	ldr	r1, [r4, #4]
   3781c:	e3510000 	cmp	r1, #0
   37820:	daffffd5 	ble	3777c <BusAccess::busActionHandleActive()+0x110>
   37824:	e3a00000 	mov	r0, #0
        _busSockets[i].clearDown(_busActionType);
   37828:	e5d4219b 	ldrb	r2, [r4, #411]	; 0x19b
            busMasterRequest = false;
   3782c:	e0853105 	add	r3, r5, r5, lsl #2
   37830:	e6ef2072 	uxtb	r2, r2
        if (type == BR_BUS_ACTION_BUSRQ)
   37834:	e3520004 	cmp	r2, #4
            busMasterRequest = false;
   37838:	e0843183 	add	r3, r4, r3, lsl #3
   3783c:	05c3002c 	strbeq	r0, [r3, #44]	; 0x2c
        if (type == BR_BUS_ACTION_BUSRQ)
   37840:	0a00000d 	beq	3787c <BusAccess::busActionHandleActive()+0x210>
        else if (type == BR_BUS_ACTION_RESET)
   37844:	e3520001 	cmp	r2, #1
            resetPending = false;
   37848:	00853105 	addeq	r3, r5, r5, lsl #2
   3784c:	00843183 	addeq	r3, r4, r3, lsl #3
   37850:	05c30016 	strbeq	r0, [r3, #22]
        else if (type == BR_BUS_ACTION_RESET)
   37854:	0a000008 	beq	3787c <BusAccess::busActionHandleActive()+0x210>
        else if (type == BR_BUS_ACTION_NMI)
   37858:	e3520002 	cmp	r2, #2
            nmiPending = false;
   3785c:	00853105 	addeq	r3, r5, r5, lsl #2
   37860:	00843183 	addeq	r3, r4, r3, lsl #3
   37864:	05c3001c 	strbeq	r0, [r3, #28]
        else if (type == BR_BUS_ACTION_NMI)
   37868:	0a000003 	beq	3787c <BusAccess::busActionHandleActive()+0x210>
        else if (type == BR_BUS_ACTION_IRQ)
   3786c:	e3520003 	cmp	r2, #3
            irqPending = false;
   37870:	00853105 	addeq	r3, r5, r5, lsl #2
   37874:	00843183 	addeq	r3, r4, r3, lsl #3
   37878:	05c30024 	strbeq	r0, [r3, #36]	; 0x24
    for (int i = 0; i < _busSocketCount; i++)
   3787c:	e2855001 	add	r5, r5, #1
   37880:	e1510005 	cmp	r1, r5
   37884:	1affffe7 	bne	37828 <BusAccess::busActionHandleActive()+0x1bc>
   37888:	eaffffbb 	b	3777c <BusAccess::busActionHandleActive()+0x110>
            controlTake();
   3788c:	eb00042e 	bl	3894c <BusAccess::controlTake()>
    for (int i = 0; i < _busSocketCount; i++)
   37890:	e5940004 	ldr	r0, [r4, #4]
    _busActionInProgress = false;
   37894:	e3a03000 	mov	r3, #0
    for (int i = 0; i < _busSocketCount; i++)
   37898:	e3500000 	cmp	r0, #0
   3789c:	da000055 	ble	379f8 <BusAccess::busActionHandleActive()+0x38c>
   378a0:	e1a0c003 	mov	ip, r3
        _busSockets[i].clearDown(_busActionType);
   378a4:	e5d4119b 	ldrb	r1, [r4, #411]	; 0x19b
            busMasterRequest = false;
   378a8:	e0832103 	add	r2, r3, r3, lsl #2
   378ac:	e6ef1071 	uxtb	r1, r1
        if (type == BR_BUS_ACTION_BUSRQ)
   378b0:	e3510004 	cmp	r1, #4
            busMasterRequest = false;
   378b4:	e0842182 	add	r2, r4, r2, lsl #3
   378b8:	05c2c02c 	strbeq	ip, [r2, #44]	; 0x2c
        if (type == BR_BUS_ACTION_BUSRQ)
   378bc:	0a00000d 	beq	378f8 <BusAccess::busActionHandleActive()+0x28c>
        else if (type == BR_BUS_ACTION_RESET)
   378c0:	e3510001 	cmp	r1, #1
            resetPending = false;
   378c4:	00832103 	addeq	r2, r3, r3, lsl #2
   378c8:	00842182 	addeq	r2, r4, r2, lsl #3
   378cc:	05c2c016 	strbeq	ip, [r2, #22]
        else if (type == BR_BUS_ACTION_RESET)
   378d0:	0a000008 	beq	378f8 <BusAccess::busActionHandleActive()+0x28c>
        else if (type == BR_BUS_ACTION_NMI)
   378d4:	e3510002 	cmp	r1, #2
            nmiPending = false;
   378d8:	00832103 	addeq	r2, r3, r3, lsl #2
   378dc:	00842182 	addeq	r2, r4, r2, lsl #3
   378e0:	05c2c01c 	strbeq	ip, [r2, #28]
        else if (type == BR_BUS_ACTION_NMI)
   378e4:	0a000003 	beq	378f8 <BusAccess::busActionHandleActive()+0x28c>
        else if (type == BR_BUS_ACTION_IRQ)
   378e8:	e3510003 	cmp	r1, #3
            irqPending = false;
   378ec:	00832103 	addeq	r2, r3, r3, lsl #2
   378f0:	00842182 	addeq	r2, r4, r2, lsl #3
   378f4:	05c2c024 	strbeq	ip, [r2, #36]	; 0x24
    for (int i = 0; i < _busSocketCount; i++)
   378f8:	e2833001 	add	r3, r3, #1
   378fc:	e1530000 	cmp	r3, r0
   37900:	1affffe7 	bne	378a4 <BusAccess::busActionHandleActive()+0x238>
    _busActionInProgress = false;
   37904:	e3a06000 	mov	r6, #0
   37908:	e5c4619a 	strb	r6, [r4, #410]	; 0x19a
            busActionCallback(BR_BUS_ACTION_BUSRQ, _busSockets[_busActionSocket].busMasterReason);
   3790c:	e59421a8 	ldr	r2, [r4, #424]	; 0x1a8
   37910:	e59f5154 	ldr	r5, [pc, #340]	; 37a6c <BusAccess::busActionHandleActive()+0x400>
   37914:	e0822102 	add	r2, r2, r2, lsl #2
   37918:	e0842182 	add	r2, r4, r2, lsl #3
   3791c:	e5d2702d 	ldrb	r7, [r2, #45]	; 0x2d
   37920:	e6ef7077 	uxtb	r7, r7
        if (!_busSockets[i].enabled)
   37924:	e5d52000 	ldrb	r2, [r5]
   37928:	e3520000 	cmp	r2, #0
   3792c:	0a000011 	beq	37978 <BusAccess::busActionHandleActive()+0x30c>
        _busSockets[i].busActionCallback(busActionType, reason);
   37930:	e5953008 	ldr	r3, [r5, #8]
   37934:	e1a01007 	mov	r1, r7
   37938:	e3a00004 	mov	r0, #4
   3793c:	e12fff33 	blx	r3
   37940:	e5943004 	ldr	r3, [r4, #4]
    for (int i = 0; i < _busSocketCount; i++)
   37944:	e2866001 	add	r6, r6, #1
   37948:	e1530006 	cmp	r3, r6
   3794c:	e2855028 	add	r5, r5, #40	; 0x28
   37950:	cafffff3 	bgt	37924 <BusAccess::busActionHandleActive()+0x2b8>
    if (reason == BR_BUS_ACTION_PROGRAMMING)
   37954:	e3570002 	cmp	r7, #2
   37958:	0a00000b 	beq	3798c <BusAccess::busActionHandleActive()+0x320>
}
   3795c:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
            controlRelease();
   37960:	ea000433 	b	38a34 <BusAccess::controlRelease()>
    for (int i = 0; i < _busSocketCount; i++)
   37964:	e2866001 	add	r6, r6, #1
   37968:	e1530006 	cmp	r3, r6
   3796c:	e2855028 	add	r5, r5, #40	; 0x28
   37970:	caffff55 	bgt	376cc <BusAccess::busActionHandleActive()+0x60>
   37974:	eaffff60 	b	376fc <BusAccess::busActionHandleActive()+0x90>
   37978:	e2866001 	add	r6, r6, #1
   3797c:	e1560003 	cmp	r6, r3
   37980:	e2855028 	add	r5, r5, #40	; 0x28
   37984:	baffffe6 	blt	37924 <BusAccess::busActionHandleActive()+0x2b8>
   37988:	eafffff1 	b	37954 <BusAccess::busActionHandleActive()+0x2e8>
    {
        for (int i = 0; i < _busSocketCount; i++)
   3798c:	e3530000 	cmp	r3, #0
   37990:	dafffff1 	ble	3795c <BusAccess::busActionHandleActive()+0x2f0>
   37994:	e3a06000 	mov	r6, #0
   37998:	e59f50cc 	ldr	r5, [pc, #204]	; 37a6c <BusAccess::busActionHandleActive()+0x400>
        {
            if (!_busSockets[i].enabled)
   3799c:	e5d52000 	ldrb	r2, [r5]
   379a0:	e3520000 	cmp	r2, #0
   379a4:	0a00000e 	beq	379e4 <BusAccess::busActionHandleActive()+0x378>
                continue;
            _busSockets[i].busActionCallback(busActionType, BR_BUS_ACTION_MIRROR);
   379a8:	e5953008 	ldr	r3, [r5, #8]
   379ac:	e3a01001 	mov	r1, #1
   379b0:	e3a00004 	mov	r0, #4
   379b4:	e12fff33 	blx	r3
   379b8:	e5943004 	ldr	r3, [r4, #4]
        for (int i = 0; i < _busSocketCount; i++)
   379bc:	e2866001 	add	r6, r6, #1
   379c0:	e1530006 	cmp	r3, r6
   379c4:	e2855028 	add	r5, r5, #40	; 0x28
   379c8:	cafffff3 	bgt	3799c <BusAccess::busActionHandleActive()+0x330>
   379cc:	eaffffe2 	b	3795c <BusAccess::busActionHandleActive()+0x2f0>
    for (int i = 0; i < _busSocketCount; i++)
   379d0:	e2877001 	add	r7, r7, #1
   379d4:	e1530007 	cmp	r3, r7
   379d8:	e2866028 	add	r6, r6, #40	; 0x28
   379dc:	caffff7c 	bgt	377d4 <BusAccess::busActionHandleActive()+0x168>
   379e0:	eaffff87 	b	37804 <BusAccess::busActionHandleActive()+0x198>
        for (int i = 0; i < _busSocketCount; i++)
   379e4:	e2866001 	add	r6, r6, #1
   379e8:	e1560003 	cmp	r6, r3
   379ec:	e2855028 	add	r5, r5, #40	; 0x28
   379f0:	baffffe9 	blt	3799c <BusAccess::busActionHandleActive()+0x330>
   379f4:	eaffffd8 	b	3795c <BusAccess::busActionHandleActive()+0x2f0>
    _busActionInProgress = false;
   379f8:	e5c4319a 	strb	r3, [r4, #410]	; 0x19a
            busActionCallback(BR_BUS_ACTION_BUSRQ, _busSockets[_busActionSocket].busMasterReason);
   379fc:	e59431a8 	ldr	r3, [r4, #424]	; 0x1a8
   37a00:	e0833103 	add	r3, r3, r3, lsl #2
   37a04:	e0844183 	add	r4, r4, r3, lsl #3
   37a08:	e5d4302d 	ldrb	r3, [r4, #45]	; 0x2d
   37a0c:	eaffffd2 	b	3795c <BusAccess::busActionHandleActive()+0x2f0>
        for (int i = 0; i < _busSocketCount; i++)
   37a10:	e3530000 	cmp	r3, #0
   37a14:	daffff7c 	ble	3780c <BusAccess::busActionHandleActive()+0x1a0>
   37a18:	e3a07000 	mov	r7, #0
   37a1c:	e59f6048 	ldr	r6, [pc, #72]	; 37a6c <BusAccess::busActionHandleActive()+0x400>
            if (!_busSockets[i].enabled)
   37a20:	e5d62000 	ldrb	r2, [r6]
   37a24:	e3520000 	cmp	r2, #0
   37a28:	0a000009 	beq	37a54 <BusAccess::busActionHandleActive()+0x3e8>
            _busSockets[i].busActionCallback(busActionType, BR_BUS_ACTION_MIRROR);
   37a2c:	e5963008 	ldr	r3, [r6, #8]
   37a30:	e3a01001 	mov	r1, #1
   37a34:	e3a00005 	mov	r0, #5
   37a38:	e12fff33 	blx	r3
   37a3c:	e5943004 	ldr	r3, [r4, #4]
        for (int i = 0; i < _busSocketCount; i++)
   37a40:	e2877001 	add	r7, r7, #1
   37a44:	e1530007 	cmp	r3, r7
   37a48:	e2866028 	add	r6, r6, #40	; 0x28
   37a4c:	cafffff3 	bgt	37a20 <BusAccess::busActionHandleActive()+0x3b4>
   37a50:	eaffff6d 	b	3780c <BusAccess::busActionHandleActive()+0x1a0>
   37a54:	e2877001 	add	r7, r7, #1
   37a58:	e1570003 	cmp	r7, r3
   37a5c:	e2866028 	add	r6, r6, #40	; 0x28
   37a60:	baffffee 	blt	37a20 <BusAccess::busActionHandleActive()+0x3b4>
   37a64:	eaffff68 	b	3780c <BusAccess::busActionHandleActive()+0x1a0>
   37a68:	0008c420 	.word	0x0008c420
   37a6c:	0008c428 	.word	0x0008c428

00037a70 <BusAccess::busActionClearFlags()>:
    for (int i = 0; i < _busSocketCount; i++)
   37a70:	e59f008c 	ldr	r0, [pc, #140]	; 37b04 <BusAccess::busActionClearFlags()+0x94>
   37a74:	e590c004 	ldr	ip, [r0, #4]
   37a78:	e35c0000 	cmp	ip, #0
   37a7c:	da00001d 	ble	37af8 <BusAccess::busActionClearFlags()+0x88>
   37a80:	e3a03000 	mov	r3, #0
{
   37a84:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   37a88:	e1a0e003 	mov	lr, r3
        _busSockets[i].clearDown(_busActionType);
   37a8c:	e5d0119b 	ldrb	r1, [r0, #411]	; 0x19b
            busMasterRequest = false;
   37a90:	e0832103 	add	r2, r3, r3, lsl #2
   37a94:	e6ef1071 	uxtb	r1, r1
        if (type == BR_BUS_ACTION_BUSRQ)
   37a98:	e3510004 	cmp	r1, #4
            busMasterRequest = false;
   37a9c:	e0802182 	add	r2, r0, r2, lsl #3
   37aa0:	05c2e02c 	strbeq	lr, [r2, #44]	; 0x2c
        if (type == BR_BUS_ACTION_BUSRQ)
   37aa4:	0a00000d 	beq	37ae0 <BusAccess::busActionClearFlags()+0x70>
        else if (type == BR_BUS_ACTION_RESET)
   37aa8:	e3510001 	cmp	r1, #1
            resetPending = false;
   37aac:	00832103 	addeq	r2, r3, r3, lsl #2
   37ab0:	00802182 	addeq	r2, r0, r2, lsl #3
   37ab4:	05c2e016 	strbeq	lr, [r2, #22]
        else if (type == BR_BUS_ACTION_RESET)
   37ab8:	0a000008 	beq	37ae0 <BusAccess::busActionClearFlags()+0x70>
        else if (type == BR_BUS_ACTION_NMI)
   37abc:	e3510002 	cmp	r1, #2
            nmiPending = false;
   37ac0:	00832103 	addeq	r2, r3, r3, lsl #2
   37ac4:	00802182 	addeq	r2, r0, r2, lsl #3
   37ac8:	05c2e01c 	strbeq	lr, [r2, #28]
        else if (type == BR_BUS_ACTION_NMI)
   37acc:	0a000003 	beq	37ae0 <BusAccess::busActionClearFlags()+0x70>
        else if (type == BR_BUS_ACTION_IRQ)
   37ad0:	e3510003 	cmp	r1, #3
            irqPending = false;
   37ad4:	00832103 	addeq	r2, r3, r3, lsl #2
   37ad8:	00802182 	addeq	r2, r0, r2, lsl #3
   37adc:	05c2e024 	strbeq	lr, [r2, #36]	; 0x24
    for (int i = 0; i < _busSocketCount; i++)
   37ae0:	e2833001 	add	r3, r3, #1
   37ae4:	e153000c 	cmp	r3, ip
   37ae8:	1affffe7 	bne	37a8c <BusAccess::busActionClearFlags()+0x1c>
    _busActionInProgress = false;
   37aec:	e3a03000 	mov	r3, #0
   37af0:	e5c0319a 	strb	r3, [r0, #410]	; 0x19a
}
   37af4:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
    _busActionInProgress = false;
   37af8:	e3a03000 	mov	r3, #0
   37afc:	e5c0319a 	strb	r3, [r0, #410]	; 0x19a
   37b00:	e12fff1e 	bx	lr
   37b04:	0008c420 	.word	0x0008c420

00037b08 <BusAccess::busActionCallback(BR_BUS_ACTION, BR_BUS_ACTION_REASON)>:
{
   37b08:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    for (int i = 0; i < _busSocketCount; i++)
   37b0c:	e59f60c4 	ldr	r6, [pc, #196]	; 37bd8 <BusAccess::busActionCallback(BR_BUS_ACTION, BR_BUS_ACTION_REASON)+0xd0>
   37b10:	e5963004 	ldr	r3, [r6, #4]
   37b14:	e3530000 	cmp	r3, #0
   37b18:	d8bd81f0 	pople	{r4, r5, r6, r7, r8, pc}
   37b1c:	e1a08001 	mov	r8, r1
   37b20:	e1a07000 	mov	r7, r0
   37b24:	e3a05000 	mov	r5, #0
   37b28:	e2864008 	add	r4, r6, #8
        if (!_busSockets[i].enabled)
   37b2c:	e5d42000 	ldrb	r2, [r4]
   37b30:	e3520000 	cmp	r2, #0
   37b34:	0a000022 	beq	37bc4 <BusAccess::busActionCallback(BR_BUS_ACTION, BR_BUS_ACTION_REASON)+0xbc>
        _busSockets[i].busActionCallback(busActionType, reason);
   37b38:	e5943008 	ldr	r3, [r4, #8]
   37b3c:	e1a01008 	mov	r1, r8
   37b40:	e1a00007 	mov	r0, r7
   37b44:	e12fff33 	blx	r3
   37b48:	e5963004 	ldr	r3, [r6, #4]
    for (int i = 0; i < _busSocketCount; i++)
   37b4c:	e2855001 	add	r5, r5, #1
   37b50:	e1530005 	cmp	r3, r5
   37b54:	e2844028 	add	r4, r4, #40	; 0x28
   37b58:	cafffff3 	bgt	37b2c <BusAccess::busActionCallback(BR_BUS_ACTION, BR_BUS_ACTION_REASON)+0x24>
    if (reason == BR_BUS_ACTION_PROGRAMMING)
   37b5c:	e3580002 	cmp	r8, #2
   37b60:	18bd81f0 	popne	{r4, r5, r6, r7, r8, pc}
        for (int i = 0; i < _busSocketCount; i++)
   37b64:	e3530000 	cmp	r3, #0
   37b68:	d8bd81f0 	pople	{r4, r5, r6, r7, r8, pc}
   37b6c:	e3a05000 	mov	r5, #0
   37b70:	e59f4064 	ldr	r4, [pc, #100]	; 37bdc <BusAccess::busActionCallback(BR_BUS_ACTION, BR_BUS_ACTION_REASON)+0xd4>
            if (!_busSockets[i].enabled)
   37b74:	e5d42000 	ldrb	r2, [r4]
   37b78:	e3520000 	cmp	r2, #0
   37b7c:	0a00000b 	beq	37bb0 <BusAccess::busActionCallback(BR_BUS_ACTION, BR_BUS_ACTION_REASON)+0xa8>
            _busSockets[i].busActionCallback(busActionType, BR_BUS_ACTION_MIRROR);
   37b80:	e5943008 	ldr	r3, [r4, #8]
   37b84:	e3a01001 	mov	r1, #1
   37b88:	e1a00007 	mov	r0, r7
   37b8c:	e12fff33 	blx	r3
   37b90:	e5963004 	ldr	r3, [r6, #4]
        for (int i = 0; i < _busSocketCount; i++)
   37b94:	e2855001 	add	r5, r5, #1
   37b98:	e1530005 	cmp	r3, r5
   37b9c:	e2844028 	add	r4, r4, #40	; 0x28
   37ba0:	d8bd81f0 	pople	{r4, r5, r6, r7, r8, pc}
            if (!_busSockets[i].enabled)
   37ba4:	e5d42000 	ldrb	r2, [r4]
   37ba8:	e3520000 	cmp	r2, #0
   37bac:	1afffff3 	bne	37b80 <BusAccess::busActionCallback(BR_BUS_ACTION, BR_BUS_ACTION_REASON)+0x78>
        for (int i = 0; i < _busSocketCount; i++)
   37bb0:	e2855001 	add	r5, r5, #1
   37bb4:	e1550003 	cmp	r5, r3
   37bb8:	e2844028 	add	r4, r4, #40	; 0x28
   37bbc:	baffffec 	blt	37b74 <BusAccess::busActionCallback(BR_BUS_ACTION, BR_BUS_ACTION_REASON)+0x6c>
   37bc0:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    for (int i = 0; i < _busSocketCount; i++)
   37bc4:	e2855001 	add	r5, r5, #1
   37bc8:	e1550003 	cmp	r5, r3
   37bcc:	e2844028 	add	r4, r4, #40	; 0x28
   37bd0:	baffffd5 	blt	37b2c <BusAccess::busActionCallback(BR_BUS_ACTION, BR_BUS_ACTION_REASON)+0x24>
   37bd4:	eaffffe0 	b	37b5c <BusAccess::busActionCallback(BR_BUS_ACTION, BR_BUS_ACTION_REASON)+0x54>
   37bd8:	0008c420 	.word	0x0008c420
   37bdc:	0008c428 	.word	0x0008c428

00037be0 <BusAccess::stepTimerISR(void*)>:
void BusAccess::stepTimerISR([[maybe_unused]] void* pParam)
{
#ifdef TIMER_BASED_WAIT_STATES
    serviceWaitActivity();
#endif
}
   37be0:	e12fff1e 	bx	lr

00037be4 <BusAccess::waitHandleReadRelease()>:
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Read release
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void BusAccess::waitHandleReadRelease()
{
   37be4:	e92d4070 	push	{r4, r5, r6, lr}
    // Stay here until read cycle is complete
    uint32_t waitForReadCompleteStartUs = micros();
   37be8:	ebfffaea 	bl	36798 <micros>
    while(!isTimeout(micros(), waitForReadCompleteStartUs, MAX_WAIT_FOR_END_OF_READ_US))
    {
        // Read the control lines
        uint32_t busVals = RD32(ARM_GPIO_GPLEV0);
   37bec:	e59f406c 	ldr	r4, [pc, #108]	; 37c60 <BusAccess::waitHandleReadRelease()+0x7c>
    uint32_t waitForReadCompleteStartUs = micros();
   37bf0:	e1a05000 	mov	r5, r0
   37bf4:	ea000003 	b	37c08 <BusAccess::waitHandleReadRelease()+0x24>
        uint32_t busVals = RD32(ARM_GPIO_GPLEV0);
   37bf8:	e5943034 	ldr	r3, [r4, #52]	; 0x34

        // Check if a neither IORQ or MREQ asserted
        if (((busVals & BR_MREQ_BAR_MASK) != 0) && ((busVals & BR_IORQ_BAR_MASK) != 0))
   37bfc:	e2033003 	and	r3, r3, #3
   37c00:	e3530003 	cmp	r3, #3
   37c04:	0a000009 	beq	37c30 <BusAccess::waitHandleReadRelease()+0x4c>
    while(!isTimeout(micros(), waitForReadCompleteStartUs, MAX_WAIT_FOR_END_OF_READ_US))
   37c08:	ebfffae2 	bl	36798 <micros>
   37c0c:	e3a0200a 	mov	r2, #10
   37c10:	e1a01005 	mov	r1, r5
   37c14:	ebfffaf4 	bl	367ec <isTimeout>
   37c18:	e2506000 	subs	r6, r0, #0
   37c1c:	0afffff5 	beq	37bf8 <BusAccess::waitHandleReadRelease()+0x14>
            }
            // Done now
            return;
        }
    }
    _targetReadInProgress = false;
   37c20:	e3a02000 	mov	r2, #0
   37c24:	e59f3038 	ldr	r3, [pc, #56]	; 37c64 <BusAccess::waitHandleReadRelease()+0x80>
   37c28:	e5c321b1 	strb	r2, [r3, #433]	; 0x1b1
}
   37c2c:	e8bd8070 	pop	{r4, r5, r6, pc}
            WR32(ARM_GPIO_GPSET0, 1 << BR_DATA_DIR_IN);
   37c30:	e3a02040 	mov	r2, #64	; 0x40
        WR32(BR_PIB_GPF_REG, (RD32(BR_PIB_GPF_REG) & BR_PIB_GPF_MASK) | BR_PIB_GPF_INPUT);
   37c34:	e5943008 	ldr	r3, [r4, #8]
            if (_targetPageInOnReadComplete)
   37c38:	e59f5024 	ldr	r5, [pc, #36]	; 37c64 <BusAccess::waitHandleReadRelease()+0x80>
   37c3c:	e20334ff 	and	r3, r3, #-16777216	; 0xff000000
   37c40:	e5843008 	str	r3, [r4, #8]
            WR32(ARM_GPIO_GPSET0, 1 << BR_DATA_DIR_IN);
   37c44:	e584201c 	str	r2, [r4, #28]
            if (_targetPageInOnReadComplete)
   37c48:	e5d531b0 	ldrb	r3, [r5, #432]	; 0x1b0
   37c4c:	e3530000 	cmp	r3, #0
   37c50:	08bd8070 	popeq	{r4, r5, r6, pc}
                pagingPageIn();
   37c54:	eb00091d 	bl	3a0d0 <BusAccess::pagingPageIn()>
                _targetPageInOnReadComplete = false;
   37c58:	e5c561b0 	strb	r6, [r5, #432]	; 0x1b0
   37c5c:	e8bd8070 	pop	{r4, r5, r6, pc}
   37c60:	20200000 	.word	0x20200000
   37c64:	0008c420 	.word	0x0008c420

00037c68 <BusAccess::waitHandleNew()>:
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// New Wait
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void BusAccess::waitHandleNew()
{
   37c68:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   37c6c:	e24dd014 	sub	sp, sp, #20
    // Time at start of ISR
    uint32_t isrStartUs = micros();
   37c70:	ebfffac8 	bl	36798 <micros>
    uint32_t addr = 0;
    uint32_t dataBusVals = 0;
    uint32_t ctrlBusVals = 0;

    // Check if paging in/out is required
    if (_targetPageInOnReadComplete)
   37c74:	e59f6320 	ldr	r6, [pc, #800]	; 37f9c <BusAccess::waitHandleNew()+0x334>
    uint32_t isrStartUs = micros();
   37c78:	e1a09000 	mov	r9, r0
    if (_targetPageInOnReadComplete)
   37c7c:	e5d631b0 	ldrb	r3, [r6, #432]	; 0x1b0
   37c80:	e3530000 	cmp	r3, #0
   37c84:	1a0000b7 	bne	37f68 <BusAccess::waitHandleNew()+0x300>
{
   37c88:	e3a0800a 	mov	r8, #10
    int avoidLockupCtr = 0;
    ctrlBusVals = 0;
    while(avoidLockupCtr < MAX_WAIT_FOR_CTRL_LINES_COUNT)
    {
        // Read the control lines
        uint32_t busVals = RD32(ARM_GPIO_GPLEV0);
   37c8c:	e59f530c 	ldr	r5, [pc, #780]	; 37fa0 <BusAccess::waitHandleNew()+0x338>
   37c90:	e5953034 	ldr	r3, [r5, #52]	; 0x34

        // Get the appropriate bits for up-line communication
        ctrlBusVals = 
                (((busVals & BR_RD_BAR_MASK) == 0) ? BR_CTRL_BUS_RD_MASK : 0) |
   37c94:	e1a04923 	lsr	r4, r3, #18
   37c98:	e2244001 	eor	r4, r4, #1
   37c9c:	e2044001 	and	r4, r4, #1
                (((busVals & BR_WR_BAR_MASK) == 0) ? BR_CTRL_BUS_WR_MASK : 0) |
   37ca0:	e3130802 	tst	r3, #131072	; 0x20000
   37ca4:	03844002 	orreq	r4, r4, #2
                (((busVals & BR_MREQ_BAR_MASK) == 0) ? BR_CTRL_BUS_MREQ_MASK : 0) |
   37ca8:	e3130001 	tst	r3, #1
   37cac:	03844004 	orreq	r4, r4, #4
                (((busVals & BR_IORQ_BAR_MASK) == 0) ? BR_CTRL_BUS_IORQ_MASK : 0) |
   37cb0:	e3130002 	tst	r3, #2
   37cb4:	03844008 	orreq	r4, r4, #8
                (((busVals & BR_WAIT_BAR_MASK) == 0) ? BR_CTRL_BUS_WAIT_MASK : 0);
   37cb8:	e3130020 	tst	r3, #32
   37cbc:	03844020 	orreq	r4, r4, #32

        // Check for (MREQ || IORQ) && (RD || WR)
        bool ctrlValid = ((ctrlBusVals & BR_CTRL_BUS_IORQ_MASK) || (ctrlBusVals & BR_CTRL_BUS_MREQ_MASK)) && ((ctrlBusVals & BR_CTRL_BUS_RD_MASK) || (ctrlBusVals & BR_CTRL_BUS_WR_MASK));
   37cc0:	e314000c 	tst	r4, #12
        ctrlBusVals = 
   37cc4:	e1a07004 	mov	r7, r4
        bool ctrlValid = ((ctrlBusVals & BR_CTRL_BUS_IORQ_MASK) || (ctrlBusVals & BR_CTRL_BUS_MREQ_MASK)) && ((ctrlBusVals & BR_CTRL_BUS_RD_MASK) || (ctrlBusVals & BR_CTRL_BUS_WR_MASK));
   37cc8:	0a000001 	beq	37cd4 <BusAccess::waitHandleNew()+0x6c>
   37ccc:	e3140003 	tst	r4, #3
   37cd0:	1a000003 	bne	37ce4 <BusAccess::waitHandleNew()+0x7c>
        // If ctrl is already valid then continue
        if (ctrlValid)
            break;

        // Delay
        microsDelay(1);
   37cd4:	e3a00001 	mov	r0, #1
   37cd8:	ebfffab2 	bl	367a8 <microsDelay>
    while(avoidLockupCtr < MAX_WAIT_FOR_CTRL_LINES_COUNT)
   37cdc:	e2588001 	subs	r8, r8, #1
   37ce0:	1affffea 	bne	37c90 <BusAccess::waitHandleNew()+0x28>
        // Ensure we don't lock up on weird bus activity
        avoidLockupCtr++;
    }
    
    // Check if bus detail is suspended for one cycle
    if (_waitSuspendBusDetailOneCycle)
   37ce4:	e5d631b2 	ldrb	r3, [r6, #434]	; 0x1b2
   37ce8:	e3530000 	cmp	r3, #0
   37cec:	0a000070 	beq	37eb4 <BusAccess::waitHandleNew()+0x24c>
    {
        _waitSuspendBusDetailOneCycle = false;
   37cf0:	e3a03000 	mov	r3, #0
    uint32_t dataBusVals = 0;
   37cf4:	e1a0a003 	mov	sl, r3
    uint32_t addr = 0;
   37cf8:	e1a0b003 	mov	fp, r3
        _waitSuspendBusDetailOneCycle = false;
   37cfc:	e5c631b2 	strb	r3, [r6, #434]	; 0x1b2
        // Clear Mux
        muxClear();
    }

    // Send this to all bus sockets
    uint32_t retVal = BR_MEM_ACCESS_RSLT_NOT_DECODED;
   37d00:	e3a03102 	mov	r3, #-2147483648	; 0x80000000
    for (int sockIdx = 0; sockIdx < _busSocketCount; sockIdx++)
   37d04:	e5962004 	ldr	r2, [r6, #4]
    uint32_t retVal = BR_MEM_ACCESS_RSLT_NOT_DECODED;
   37d08:	e58d300c 	str	r3, [sp, #12]
    for (int sockIdx = 0; sockIdx < _busSocketCount; sockIdx++)
   37d0c:	e3520000 	cmp	r2, #0
   37d10:	e2073002 	and	r3, r7, #2
   37d14:	e58d3004 	str	r3, [sp, #4]
   37d18:	da00002e 	ble	37dd8 <BusAccess::waitHandleNew()+0x170>
   37d1c:	e3a05000 	mov	r5, #0
   37d20:	e59f427c 	ldr	r4, [pc, #636]	; 37fa4 <BusAccess::waitHandleNew()+0x33c>
    {
        if (_busSockets[sockIdx].enabled && _busSockets[sockIdx].busAccessCallback)
   37d24:	e5543004 	ldrb	r3, [r4, #-4]
    for (int sockIdx = 0; sockIdx < _busSocketCount; sockIdx++)
   37d28:	e2855001 	add	r5, r5, #1
        if (_busSockets[sockIdx].enabled && _busSockets[sockIdx].busAccessCallback)
   37d2c:	e3530000 	cmp	r3, #0
   37d30:	0a000008 	beq	37d58 <BusAccess::waitHandleNew()+0xf0>
   37d34:	e5948000 	ldr	r8, [r4]
   37d38:	e3580000 	cmp	r8, #0
   37d3c:	0a000005 	beq	37d58 <BusAccess::waitHandleNew()+0xf0>
        {
            _busSockets[sockIdx].busAccessCallback(addr, dataBusVals, ctrlBusVals, retVal);
   37d40:	e1a02007 	mov	r2, r7
   37d44:	e28d300c 	add	r3, sp, #12
   37d48:	e1a0100a 	mov	r1, sl
   37d4c:	e1a0000b 	mov	r0, fp
   37d50:	e12fff38 	blx	r8
   37d54:	e5962004 	ldr	r2, [r6, #4]
    for (int sockIdx = 0; sockIdx < _busSocketCount; sockIdx++)
   37d58:	e1550002 	cmp	r5, r2
   37d5c:	e2844028 	add	r4, r4, #40	; 0x28
   37d60:	baffffef 	blt	37d24 <BusAccess::waitHandleNew()+0xbc>
    }

    // If Z80 is reading from the data bus (inc reading an ISR vector)
    // and result is valid then put the returned data onto the bus
    bool isWriting = (ctrlBusVals & BR_CTRL_BUS_WR_MASK);
    if (!isWriting && ((retVal & BR_MEM_ACCESS_RSLT_NOT_DECODED) == 0))
   37d64:	e59d3004 	ldr	r3, [sp, #4]
   37d68:	e3530000 	cmp	r3, #0
   37d6c:	1a000019 	bne	37dd8 <BusAccess::waitHandleNew()+0x170>
   37d70:	e59d300c 	ldr	r3, [sp, #12]
   37d74:	e3530000 	cmp	r3, #0
   37d78:	ba000016 	blt	37dd8 <BusAccess::waitHandleNew()+0x170>
        WR32(ARM_GPIO_GPCLR0, BR_MUX_CTRL_BIT_MASK);
   37d7c:	e3a0ec0e 	mov	lr, #3584	; 0xe00
    {
        // Now driving data onto the target data bus
        WR32(ARM_GPIO_GPCLR0, 1 << BR_DATA_DIR_IN);
   37d80:	e3a0c040 	mov	ip, #64	; 0x40
        WR32(ARM_GPIO_GPSET0, muxVal << BR_MUX_LOW_BIT_POS);
   37d84:	e3a00c02 	mov	r0, #512	; 0x200
   37d88:	e1a03a03 	lsl	r3, r3, #20
        uint32_t clrBits = (~(((uint32_t)val) << BR_DATA_BUS)) & (~BR_PIB_MASK);
   37d8c:	e1e01003 	mvn	r1, r3
   37d90:	e59f2208 	ldr	r2, [pc, #520]	; 37fa0 <BusAccess::waitHandleNew()+0x338>
        uint32_t setBits = ((uint32_t)val) << BR_DATA_BUS;
   37d94:	e20336ff 	and	r3, r3, #267386880	; 0xff00000
   37d98:	e582c028 	str	ip, [r2, #40]	; 0x28
        WR32(ARM_GPIO_GPCLR0, BR_MUX_CTRL_BIT_MASK);
   37d9c:	e582e028 	str	lr, [r2, #40]	; 0x28
        WR32(ARM_GPIO_GPSET0, muxVal << BR_MUX_LOW_BIT_POS);
   37da0:	e582001c 	str	r0, [r2, #28]
        WR32(BR_PIB_GPF_REG, (RD32(BR_PIB_GPF_REG) & BR_PIB_GPF_MASK) | BR_PIB_GPF_OUTPUT);
   37da4:	e592c008 	ldr	ip, [r2, #8]
   37da8:	e59f01f8 	ldr	r0, [pc, #504]	; 37fa8 <BusAccess::waitHandleNew()+0x340>
   37dac:	e20cc4ff 	and	ip, ip, #-16777216	; 0xff000000
   37db0:	e18c0000 	orr	r0, ip, r0
        uint32_t clrBits = (~(((uint32_t)val) << BR_DATA_BUS)) & (~BR_PIB_MASK);
   37db4:	e20116ff 	and	r1, r1, #267386880	; 0xff00000
        WR32(BR_PIB_GPF_REG, (RD32(BR_PIB_GPF_REG) & BR_PIB_GPF_MASK) | BR_PIB_GPF_OUTPUT);
   37db8:	e5820008 	str	r0, [r2, #8]
        WR32(ARM_GPIO_GPSET0, setBits);
   37dbc:	e582301c 	str	r3, [r2, #28]
        muxSet(BR_MUX_DATA_OE_BAR_LOW);
        pibSetOut();
        pibSetValue(retVal & 0xff);
        // lowlev_cycleDelay(CYCLES_DELAY_FOR_WAIT_CLEAR);
        muxClear();
        lowlev_cycleDelay(CYCLES_DELAY_FOR_TARGET_READ);
   37dc0:	e3a00064 	mov	r0, #100	; 0x64
        WR32(ARM_GPIO_GPCLR0, clrBits);
   37dc4:	e5821028 	str	r1, [r2, #40]	; 0x28
        WR32(ARM_GPIO_GPCLR0, BR_MUX_CTRL_BIT_MASK);
   37dc8:	e582e028 	str	lr, [r2, #40]	; 0x28
   37dcc:	ebff40cf 	bl	8110 <lowlev_cycleDelay>
        _targetReadInProgress = true;
   37dd0:	e3a03001 	mov	r3, #1
   37dd4:	e5c631b1 	strb	r3, [r6, #433]	; 0x1b1
    }

    // Elapsed and count
    uint32_t isrElapsedUs = micros() - isrStartUs;
   37dd8:	ebfffa6e 	bl	36798 <micros>
    _statusInfo.isrCount++;
   37ddc:	e59631b4 	ldr	r3, [r6, #436]	; 0x1b4

    // Stats
    if (ctrlBusVals & BR_CTRL_BUS_MREQ_MASK)
   37de0:	e3170004 	tst	r7, #4
    _statusInfo.isrCount++;
   37de4:	e2833001 	add	r3, r3, #1
    uint32_t isrElapsedUs = micros() - isrStartUs;
   37de8:	e0409009 	sub	r9, r0, r9
    _statusInfo.isrCount++;
   37dec:	e58631b4 	str	r3, [r6, #436]	; 0x1b4
    if (ctrlBusVals & BR_CTRL_BUS_MREQ_MASK)
   37df0:	0a00001e 	beq	37e70 <BusAccess::waitHandleNew()+0x208>
    {
        if (ctrlBusVals & BR_CTRL_BUS_RD_MASK)
   37df4:	e3170001 	tst	r7, #1
   37df8:	0a000027 	beq	37e9c <BusAccess::waitHandleNew()+0x234>
            _statusInfo.isrMREQRD++;
   37dfc:	e59631d4 	ldr	r3, [r6, #468]	; 0x1d4
   37e00:	e2833001 	add	r3, r3, #1
   37e04:	e58631d4 	str	r3, [r6, #468]	; 0x1d4
        else if (ctrlBusVals & BR_CTRL_BUS_M1_MASK)
            _statusInfo.isrIRQACK++;
    }

    // Overflows
    if (_statusInfo.isrAccumUs > 1000000000)
   37e08:	e59f219c 	ldr	r2, [pc, #412]	; 37fac <BusAccess::waitHandleNew()+0x344>
   37e0c:	e59631b8 	ldr	r3, [r6, #440]	; 0x1b8
   37e10:	e1530002 	cmp	r3, r2
    {
        _statusInfo.isrAccumUs = 0;
   37e14:	83a02000 	movhi	r2, #0
   37e18:	81a03002 	movhi	r3, r2
   37e1c:	858621b8 	strhi	r2, [r6, #440]	; 0x1b8
        _statusInfo.isrAvgingCount = 0;
   37e20:	858621bc 	strhi	r2, [r6, #444]	; 0x1bc
    }

    // Averages
    if (isrElapsedUs < 1000000)
   37e24:	e59f2184 	ldr	r2, [pc, #388]	; 37fb0 <BusAccess::waitHandleNew()+0x348>
   37e28:	e1590002 	cmp	r9, r2
   37e2c:	8a00000a 	bhi	37e5c <BusAccess::waitHandleNew()+0x1f4>
    {
        _statusInfo.isrAccumUs += isrElapsedUs;
   37e30:	e0893003 	add	r3, r9, r3
        _statusInfo.isrAvgingCount++;
   37e34:	e59621bc 	ldr	r2, [r6, #444]	; 0x1bc
        _statusInfo.isrAvgNs = _statusInfo.isrAccumUs * 1000 / _statusInfo.isrAvgingCount;
   37e38:	e0630283 	rsb	r0, r3, r3, lsl #5
        _statusInfo.isrAvgingCount++;
   37e3c:	e2822001 	add	r2, r2, #1
        _statusInfo.isrAvgNs = _statusInfo.isrAccumUs * 1000 / _statusInfo.isrAvgingCount;
   37e40:	e0830100 	add	r0, r3, r0, lsl #2
   37e44:	e1a00180 	lsl	r0, r0, #3
   37e48:	e1a01002 	mov	r1, r2
        _statusInfo.isrAccumUs += isrElapsedUs;
   37e4c:	e58631b8 	str	r3, [r6, #440]	; 0x1b8
        _statusInfo.isrAvgingCount++;
   37e50:	e58621bc 	str	r2, [r6, #444]	; 0x1bc
        _statusInfo.isrAvgNs = _statusInfo.isrAccumUs * 1000 / _statusInfo.isrAvgingCount;
   37e54:	eb005ad6 	bl	4e9b4 <__udivsi3>
   37e58:	e58601c0 	str	r0, [r6, #448]	; 0x1c0
    }

    // Max
    if (_statusInfo.isrMaxUs < isrElapsedUs)
   37e5c:	e59631c4 	ldr	r3, [r6, #452]	; 0x1c4
   37e60:	e1530009 	cmp	r3, r9
        _statusInfo.isrMaxUs = isrElapsedUs;
   37e64:	358691c4 	strcc	r9, [r6, #452]	; 0x1c4

}
   37e68:	e28dd014 	add	sp, sp, #20
   37e6c:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    else if (ctrlBusVals & BR_CTRL_BUS_IORQ_MASK)
   37e70:	e3170008 	tst	r7, #8
   37e74:	0affffe3 	beq	37e08 <BusAccess::waitHandleNew()+0x1a0>
        if (ctrlBusVals & BR_CTRL_BUS_RD_MASK)
   37e78:	e3170001 	tst	r7, #1
   37e7c:	1a00003d 	bne	37f78 <BusAccess::waitHandleNew()+0x310>
        else if (ctrlBusVals & BR_CTRL_BUS_WR_MASK)
   37e80:	e59d3004 	ldr	r3, [sp, #4]
   37e84:	e3530000 	cmp	r3, #0
   37e88:	0a00003e 	beq	37f88 <BusAccess::waitHandleNew()+0x320>
            _statusInfo.isrIORQWR++;
   37e8c:	e59631e0 	ldr	r3, [r6, #480]	; 0x1e0
   37e90:	e2833001 	add	r3, r3, #1
   37e94:	e58631e0 	str	r3, [r6, #480]	; 0x1e0
   37e98:	eaffffda 	b	37e08 <BusAccess::waitHandleNew()+0x1a0>
        else if (ctrlBusVals & BR_CTRL_BUS_WR_MASK)
   37e9c:	e59d3004 	ldr	r3, [sp, #4]
   37ea0:	e3530000 	cmp	r3, #0
            _statusInfo.isrMREQWR++;
   37ea4:	159631d8 	ldrne	r3, [r6, #472]	; 0x1d8
   37ea8:	12833001 	addne	r3, r3, #1
   37eac:	158631d8 	strne	r3, [r6, #472]	; 0x1d8
   37eb0:	eaffffd4 	b	37e08 <BusAccess::waitHandleNew()+0x1a0>
        WR32(ARM_GPIO_GPCLR0, 1 << BR_DATA_DIR_IN);
   37eb4:	e3a01040 	mov	r1, #64	; 0x40
   37eb8:	e3a02c0e 	mov	r2, #3584	; 0xe00
        WR32(BR_PIB_GPF_REG, (RD32(BR_PIB_GPF_REG) & BR_PIB_GPF_MASK) | BR_PIB_GPF_INPUT);
   37ebc:	e59f50dc 	ldr	r5, [pc, #220]	; 37fa0 <BusAccess::waitHandleNew()+0x338>
        lowlev_cycleDelay(CYCLES_DELAY_FOR_M1_SETTLING);
   37ec0:	e3a00064 	mov	r0, #100	; 0x64
   37ec4:	e5953008 	ldr	r3, [r5, #8]
   37ec8:	e20334ff 	and	r3, r3, #-16777216	; 0xff000000
   37ecc:	e5853008 	str	r3, [r5, #8]
        WR32(ARM_GPIO_GPCLR0, 1 << BR_DATA_DIR_IN);
   37ed0:	e5851028 	str	r1, [r5, #40]	; 0x28
        WR32(ARM_GPIO_GPCLR0, BR_MUX_CTRL_BIT_MASK);
   37ed4:	e5852028 	str	r2, [r5, #40]	; 0x28
        lowlev_cycleDelay(CYCLES_DELAY_FOR_M1_SETTLING);
   37ed8:	ebff408c 	bl	8110 <lowlev_cycleDelay>
        uint32_t busVals = RD32(ARM_GPIO_GPLEV0);
   37edc:	e5953034 	ldr	r3, [r5, #52]	; 0x34
        WR32(ARM_GPIO_GPCLR0, BR_MUX_CTRL_BIT_MASK);
   37ee0:	e3a05c0e 	mov	r5, #3584	; 0xe00
        ctrlBusVals |= (((busVals & BR_M1_PIB_BAR_MASK) == 0) ? BR_CTRL_BUS_M1_MASK : 0);
   37ee4:	e3130601 	tst	r3, #1048576	; 0x100000
   37ee8:	03847010 	orreq	r7, r4, #16
   37eec:	e59f40ac 	ldr	r4, [pc, #172]	; 37fa0 <BusAccess::waitHandleNew()+0x338>
        lowlev_cycleDelay(CYCLES_DELAY_FOR_HIGH_ADDR_READ);
   37ef0:	e3a00064 	mov	r0, #100	; 0x64
   37ef4:	e5845028 	str	r5, [r4, #40]	; 0x28
        WR32(ARM_GPIO_GPSET0, muxVal << BR_MUX_LOW_BIT_POS);
   37ef8:	e584501c 	str	r5, [r4, #28]
   37efc:	ebff4083 	bl	8110 <lowlev_cycleDelay>
   37f00:	e3a03c06 	mov	r3, #1536	; 0x600
        return (RD32(ARM_GPIO_GPLEV0) >> BR_DATA_BUS) & 0xff;
   37f04:	e594b034 	ldr	fp, [r4, #52]	; 0x34
        lowlev_cycleDelay(CYCLES_DELAY_FOR_READ_FROM_PIB);
   37f08:	e3a00005 	mov	r0, #5
        WR32(ARM_GPIO_GPCLR0, BR_MUX_CTRL_BIT_MASK);
   37f0c:	e5845028 	str	r5, [r4, #40]	; 0x28
        WR32(ARM_GPIO_GPSET0, muxVal << BR_MUX_LOW_BIT_POS);
   37f10:	e584301c 	str	r3, [r4, #28]
   37f14:	ebff407d 	bl	8110 <lowlev_cycleDelay>
        return (RD32(ARM_GPIO_GPLEV0) >> BR_DATA_BUS) & 0xff;
   37f18:	e5943034 	ldr	r3, [r4, #52]	; 0x34
        addr = (pibGetValue() & 0xff) << 8;
   37f1c:	e1a0b62b 	lsr	fp, fp, #12
        addr |= pibGetValue() & 0xff;
   37f20:	e1a03203 	lsl	r3, r3, #4
        lowlev_cycleDelay(CYCLES_DELAY_FOR_READ_FROM_PIB);
   37f24:	e3a00005 	mov	r0, #5
        addr = (pibGetValue() & 0xff) << 8;
   37f28:	e20bbcff 	and	fp, fp, #65280	; 0xff00
        WR32(ARM_GPIO_GPCLR0, BR_MUX_CTRL_BIT_MASK);
   37f2c:	e5845028 	str	r5, [r4, #40]	; 0x28
        addr |= pibGetValue() & 0xff;
   37f30:	e18bbc23 	orr	fp, fp, r3, lsr #24
        lowlev_cycleDelay(CYCLES_DELAY_FOR_READ_FROM_PIB);
   37f34:	ebff4075 	bl	8110 <lowlev_cycleDelay>
        WR32(ARM_GPIO_GPSET0, 1 << BR_DATA_DIR_IN);
   37f38:	e3a02040 	mov	r2, #64	; 0x40
        WR32(ARM_GPIO_GPSET0, muxVal << BR_MUX_LOW_BIT_POS);
   37f3c:	e3a03c02 	mov	r3, #512	; 0x200
   37f40:	e584201c 	str	r2, [r4, #28]
        lowlev_cycleDelay(CYCLES_DELAY_FOR_READ_FROM_PIB);
   37f44:	e3a00005 	mov	r0, #5
        WR32(ARM_GPIO_GPCLR0, BR_MUX_CTRL_BIT_MASK);
   37f48:	e5845028 	str	r5, [r4, #40]	; 0x28
        WR32(ARM_GPIO_GPSET0, muxVal << BR_MUX_LOW_BIT_POS);
   37f4c:	e584301c 	str	r3, [r4, #28]
   37f50:	ebff406e 	bl	8110 <lowlev_cycleDelay>
        return (RD32(ARM_GPIO_GPLEV0) >> BR_DATA_BUS) & 0xff;
   37f54:	e594a034 	ldr	sl, [r4, #52]	; 0x34
        WR32(ARM_GPIO_GPCLR0, BR_MUX_CTRL_BIT_MASK);
   37f58:	e5845028 	str	r5, [r4, #40]	; 0x28
        return (RD32(ARM_GPIO_GPLEV0) >> BR_DATA_BUS) & 0xff;
   37f5c:	e1a0aa2a 	lsr	sl, sl, #20
   37f60:	e6efa07a 	uxtb	sl, sl
   37f64:	eaffff65 	b	37d00 <BusAccess::waitHandleNew()+0x98>
        pagingPageIn();
   37f68:	eb000858 	bl	3a0d0 <BusAccess::pagingPageIn()>
        _targetPageInOnReadComplete = false;
   37f6c:	e3a03000 	mov	r3, #0
   37f70:	e5c631b0 	strb	r3, [r6, #432]	; 0x1b0
   37f74:	eaffff43 	b	37c88 <BusAccess::waitHandleNew()+0x20>
            _statusInfo.isrIORQRD++;
   37f78:	e59631dc 	ldr	r3, [r6, #476]	; 0x1dc
   37f7c:	e2833001 	add	r3, r3, #1
   37f80:	e58631dc 	str	r3, [r6, #476]	; 0x1dc
   37f84:	eaffff9f 	b	37e08 <BusAccess::waitHandleNew()+0x1a0>
        else if (ctrlBusVals & BR_CTRL_BUS_M1_MASK)
   37f88:	e3170010 	tst	r7, #16
            _statusInfo.isrIRQACK++;
   37f8c:	159631e4 	ldrne	r3, [r6, #484]	; 0x1e4
   37f90:	12833001 	addne	r3, r3, #1
   37f94:	158631e4 	strne	r3, [r6, #484]	; 0x1e4
   37f98:	eaffff9a 	b	37e08 <BusAccess::waitHandleNew()+0x1a0>
   37f9c:	0008c420 	.word	0x0008c420
   37fa0:	20200000 	.word	0x20200000
   37fa4:	0008c42c 	.word	0x0008c42c
   37fa8:	00249249 	.word	0x00249249
   37fac:	3b9aca00 	.word	0x3b9aca00
   37fb0:	000f423f 	.word	0x000f423f

00037fb4 <BusAccess::serviceWaitActivity()>:
{
   37fb4:	e92d4070 	push	{r4, r5, r6, lr}
    if (_busActionInProgress)
   37fb8:	e59f42cc 	ldr	r4, [pc, #716]	; 3828c <BusAccess::serviceWaitActivity()+0x2d8>
   37fbc:	e5d4319a 	ldrb	r3, [r4, #410]	; 0x19a
   37fc0:	e3530000 	cmp	r3, #0
   37fc4:	1a000059 	bne	38130 <BusAccess::serviceWaitActivity()+0x17c>
    if (_busActionInProgress)
   37fc8:	e5d4319a 	ldrb	r3, [r4, #410]	; 0x19a
   37fcc:	e21330ff 	ands	r3, r3, #255	; 0xff
   37fd0:	0a00005a 	beq	38140 <BusAccess::serviceWaitActivity()+0x18c>
    if (!_waitAsserted)
   37fd4:	e5d43000 	ldrb	r3, [r4]
   37fd8:	e3530000 	cmp	r3, #0
   37fdc:	1a000007 	bne	38000 <BusAccess::serviceWaitActivity()+0x4c>
    if (!_busActionInProgress || _busActionAsserted)
   37fe0:	e5d4319a 	ldrb	r3, [r4, #410]	; 0x19a
   37fe4:	e3530000 	cmp	r3, #0
   37fe8:	1a000035 	bne	380c4 <BusAccess::serviceWaitActivity()+0x110>
        uint32_t busVals = RD32(ARM_GPIO_GPLEV0);
   37fec:	e59f329c 	ldr	r3, [pc, #668]	; 38290 <BusAccess::serviceWaitActivity()+0x2dc>
   37ff0:	e5933034 	ldr	r3, [r3, #52]	; 0x34
        if (((busVals & BR_WAIT_BAR_MASK) == 0) && ((busVals & BR_BUSACK_BAR_MASK) != 0))
   37ff4:	e2033024 	and	r3, r3, #36	; 0x24
   37ff8:	e3530004 	cmp	r3, #4
   37ffc:	0a000079 	beq	381e8 <BusAccess::serviceWaitActivity()+0x234>
    if (_waitAsserted)
   38000:	e5d43000 	ldrb	r3, [r4]
   38004:	e3530000 	cmp	r3, #0
   38008:	08bd8070 	popeq	{r4, r5, r6, pc}
        uint32_t busVals = RD32(ARM_GPIO_GPLEV0);
   3800c:	e59f327c 	ldr	r3, [pc, #636]	; 38290 <BusAccess::serviceWaitActivity()+0x2dc>
   38010:	e5932034 	ldr	r2, [r3, #52]	; 0x34
        busVals = RD32(ARM_GPIO_GPLEV0);
   38014:	e5933034 	ldr	r3, [r3, #52]	; 0x34
        if ((busVals & BR_IORQ_BAR_MASK) == 0)
   38018:	e3130002 	tst	r3, #2
   3801c:	0a000026 	beq	380bc <BusAccess::serviceWaitActivity()+0x108>
        else if (!_waitHold)
   38020:	e5d43199 	ldrb	r3, [r4, #409]	; 0x199
   38024:	e3530000 	cmp	r3, #0
   38028:	18bd8070 	popne	{r4, r5, r6, pc}
            if (isTimeout(micros(), _waitAssertedStartUs, _waitCycleLengthUs))
   3802c:	ebfff9d9 	bl	36798 <micros>
   38030:	e59f325c 	ldr	r3, [pc, #604]	; 38294 <BusAccess::serviceWaitActivity()+0x2e0>
   38034:	e5941200 	ldr	r1, [r4, #512]	; 0x200
   38038:	e5932000 	ldr	r2, [r3]
   3803c:	ebfff9ea 	bl	367ec <isTimeout>
   38040:	e3500000 	cmp	r0, #0
   38044:	08bd8070 	popeq	{r4, r5, r6, pc}
    if (!_busActionInProgress || _busActionAsserted)
   38048:	e5d4319a 	ldrb	r3, [r4, #410]	; 0x19a
   3804c:	e3530000 	cmp	r3, #0
   38050:	0a000019 	beq	380bc <BusAccess::serviceWaitActivity()+0x108>
   38054:	e5d431a0 	ldrb	r3, [r4, #416]	; 0x1a0
   38058:	e3530000 	cmp	r3, #0
   3805c:	1a000016 	bne	380bc <BusAccess::serviceWaitActivity()+0x108>
    setSignal(_busActionType, true);
   38060:	e5d4019b 	ldrb	r0, [r4, #411]	; 0x19b
   38064:	e3a01001 	mov	r1, #1
   38068:	eb0007ea 	bl	3a018 <BusAccess::setSignal(BR_BUS_ACTION, bool)>
    _busActionAssertedStartUs = micros();
   3806c:	ebfff9c9 	bl	36798 <micros>
   38070:	e58401a4 	str	r0, [r4, #420]	; 0x1a4
    _busActionAssertedMaxUs = _busSockets[_busActionSocket].getAssertUs(_busActionType);
   38074:	e59431a8 	ldr	r3, [r4, #424]	; 0x1a8
   38078:	e5d4219b 	ldrb	r2, [r4, #411]	; 0x19b
   3807c:	e6ef2072 	uxtb	r2, r2
        if (type == BR_BUS_ACTION_BUSRQ)
   38080:	e3520004 	cmp	r2, #4
            return MAX_WAIT_FOR_BUSACK_US;
   38084:	03a03064 	moveq	r3, #100	; 0x64
        if (type == BR_BUS_ACTION_BUSRQ)
   38088:	0a000008 	beq	380b0 <BusAccess::serviceWaitActivity()+0xfc>
        else if (type == BR_BUS_ACTION_RESET)
   3808c:	e3520001 	cmp	r2, #1
   38090:	0a000075 	beq	3826c <BusAccess::serviceWaitActivity()+0x2b8>
        else if (type == BR_BUS_ACTION_NMI)
   38094:	e3520002 	cmp	r2, #2
   38098:	0a000077 	beq	3827c <BusAccess::serviceWaitActivity()+0x2c8>
        else if (type == BR_BUS_ACTION_IRQ)
   3809c:	e3520003 	cmp	r2, #3
        return 0;
   380a0:	13a03000 	movne	r3, #0
            return irqDurationUs;
   380a4:	00833103 	addeq	r3, r3, r3, lsl #2
   380a8:	00843183 	addeq	r3, r4, r3, lsl #3
   380ac:	05933028 	ldreq	r3, [r3, #40]	; 0x28
    _busActionAsserted = true;
   380b0:	e3a02001 	mov	r2, #1
    _busActionAssertedMaxUs = _busSockets[_busActionSocket].getAssertUs(_busActionType);
   380b4:	e58431ac 	str	r3, [r4, #428]	; 0x1ac
    _busActionAsserted = true;
   380b8:	e5c421a0 	strb	r2, [r4, #416]	; 0x1a0
}
   380bc:	e8bd4070 	pop	{r4, r5, r6, lr}
            waitResetFlipFlops();
   380c0:	ea000797 	b	39f24 <BusAccess::waitResetFlipFlops()>
    if (!_busActionInProgress || _busActionAsserted)
   380c4:	e5d431a0 	ldrb	r3, [r4, #416]	; 0x1a0
   380c8:	e21350ff 	ands	r5, r3, #255	; 0xff
   380cc:	1affffc6 	bne	37fec <BusAccess::serviceWaitActivity()+0x38>
    setSignal(_busActionType, true);
   380d0:	e5d4019b 	ldrb	r0, [r4, #411]	; 0x19b
   380d4:	e3a01001 	mov	r1, #1
   380d8:	eb0007ce 	bl	3a018 <BusAccess::setSignal(BR_BUS_ACTION, bool)>
    _busActionAssertedStartUs = micros();
   380dc:	ebfff9ad 	bl	36798 <micros>
   380e0:	e58401a4 	str	r0, [r4, #420]	; 0x1a4
    _busActionAssertedMaxUs = _busSockets[_busActionSocket].getAssertUs(_busActionType);
   380e4:	e59421a8 	ldr	r2, [r4, #424]	; 0x1a8
   380e8:	e5d4319b 	ldrb	r3, [r4, #411]	; 0x19b
   380ec:	e6ef3073 	uxtb	r3, r3
        if (type == BR_BUS_ACTION_BUSRQ)
   380f0:	e3530004 	cmp	r3, #4
            return MAX_WAIT_FOR_BUSACK_US;
   380f4:	03a03064 	moveq	r3, #100	; 0x64
        if (type == BR_BUS_ACTION_BUSRQ)
   380f8:	0a000008 	beq	38120 <BusAccess::serviceWaitActivity()+0x16c>
        else if (type == BR_BUS_ACTION_RESET)
   380fc:	e3530001 	cmp	r3, #1
   38100:	0a000051 	beq	3824c <BusAccess::serviceWaitActivity()+0x298>
        else if (type == BR_BUS_ACTION_NMI)
   38104:	e3530002 	cmp	r3, #2
   38108:	0a000053 	beq	3825c <BusAccess::serviceWaitActivity()+0x2a8>
        else if (type == BR_BUS_ACTION_IRQ)
   3810c:	e3530003 	cmp	r3, #3
        return 0;
   38110:	11a03005 	movne	r3, r5
            return irqDurationUs;
   38114:	00822102 	addeq	r2, r2, r2, lsl #2
   38118:	00843182 	addeq	r3, r4, r2, lsl #3
   3811c:	05933028 	ldreq	r3, [r3, #40]	; 0x28
    _busActionAsserted = true;
   38120:	e3a02001 	mov	r2, #1
    _busActionAssertedMaxUs = _busSockets[_busActionSocket].getAssertUs(_busActionType);
   38124:	e58431ac 	str	r3, [r4, #428]	; 0x1ac
    _busActionAsserted = true;
   38128:	e5c421a0 	strb	r2, [r4, #416]	; 0x1a0
   3812c:	eaffffae 	b	37fec <BusAccess::serviceWaitActivity()+0x38>
        busActionHandleActive();
   38130:	ebfffd4d 	bl	3766c <BusAccess::busActionHandleActive()>
    if (_busActionInProgress)
   38134:	e5d4319a 	ldrb	r3, [r4, #410]	; 0x19a
   38138:	e21330ff 	ands	r3, r3, #255	; 0xff
   3813c:	1affffa4 	bne	37fd4 <BusAccess::serviceWaitActivity()+0x20>
    for (int i = 0; i < _busSocketCount; i++)
   38140:	e594e004 	ldr	lr, [r4, #4]
   38144:	e35e0000 	cmp	lr, #0
   38148:	daffffa1 	ble	37fd4 <BusAccess::serviceWaitActivity()+0x20>
   3814c:	e59f0144 	ldr	r0, [pc, #324]	; 38298 <BusAccess::serviceWaitActivity()+0x2e4>
   38150:	ea000008 	b	38178 <BusAccess::serviceWaitActivity()+0x1c4>
        if (nmiPending)
   38154:	e5d2c01c 	ldrb	ip, [r2, #28]
   38158:	e35c0000 	cmp	ip, #0
   3815c:	1a000012 	bne	381ac <BusAccess::serviceWaitActivity()+0x1f8>
        if (irqPending)
   38160:	e5d22024 	ldrb	r2, [r2, #36]	; 0x24
   38164:	e3520000 	cmp	r2, #0
   38168:	1a00000f 	bne	381ac <BusAccess::serviceWaitActivity()+0x1f8>
   3816c:	e2833001 	add	r3, r3, #1
   38170:	e153000e 	cmp	r3, lr
   38174:	0affff96 	beq	37fd4 <BusAccess::serviceWaitActivity()+0x20>
        if (_busSockets[i].enabled && (_busSockets[i].getType() != BR_BUS_ACTION_NONE))
   38178:	e5d0c000 	ldrb	ip, [r0]
        if (busMasterRequest)
   3817c:	e1a01103 	lsl	r1, r3, #2
   38180:	e0812003 	add	r2, r1, r3
   38184:	e35c0000 	cmp	ip, #0
   38188:	e0842182 	add	r2, r4, r2, lsl #3
   3818c:	e2800028 	add	r0, r0, #40	; 0x28
   38190:	0afffff5 	beq	3816c <BusAccess::serviceWaitActivity()+0x1b8>
   38194:	e5d2c02c 	ldrb	ip, [r2, #44]	; 0x2c
   38198:	e35c0000 	cmp	ip, #0
   3819c:	1a000002 	bne	381ac <BusAccess::serviceWaitActivity()+0x1f8>
        if (resetPending)
   381a0:	e5d2c016 	ldrb	ip, [r2, #22]
   381a4:	e35c0000 	cmp	ip, #0
   381a8:	0affffe9 	beq	38154 <BusAccess::serviceWaitActivity()+0x1a0>
        if (busMasterRequest)
   381ac:	e0811003 	add	r1, r1, r3
   381b0:	e0841181 	add	r1, r4, r1, lsl #3
    _busActionSocket = busSocket;
   381b4:	e58431a8 	str	r3, [r4, #424]	; 0x1a8
   381b8:	e5d1302c 	ldrb	r3, [r1, #44]	; 0x2c
   381bc:	e3530000 	cmp	r3, #0
            return BR_BUS_ACTION_BUSRQ;
   381c0:	13a03004 	movne	r3, #4
        if (busMasterRequest)
   381c4:	0a000013 	beq	38218 <BusAccess::serviceWaitActivity()+0x264>
    _busActionInProgress = true;
   381c8:	e3a02001 	mov	r2, #1
    _busActionType = _busSockets[busSocket].getType();
   381cc:	e5c4319b 	strb	r3, [r4, #411]	; 0x19b
    _busActionInProgress = true;
   381d0:	e5c4219a 	strb	r2, [r4, #410]	; 0x19a
    _busActionInProgressStartUs = micros();
   381d4:	ebfff96f 	bl	36798 <micros>
    _busActionAsserted = false;
   381d8:	e3a03000 	mov	r3, #0
    _busActionInProgressStartUs = micros();
   381dc:	e584019c 	str	r0, [r4, #412]	; 0x19c
    _busActionAsserted = false;
   381e0:	e5c431a0 	strb	r3, [r4, #416]	; 0x1a0
   381e4:	eaffff7a 	b	37fd4 <BusAccess::serviceWaitActivity()+0x20>
            if (_busActionInProgress && (_busActionType != BR_BUS_ACTION_BUSRQ))
   381e8:	e5d4319a 	ldrb	r3, [r4, #410]	; 0x19a
   381ec:	e3530000 	cmp	r3, #0
   381f0:	0a000002 	beq	38200 <BusAccess::serviceWaitActivity()+0x24c>
   381f4:	e5d4319b 	ldrb	r3, [r4, #411]	; 0x19b
   381f8:	e3530004 	cmp	r3, #4
   381fc:	1affff7f 	bne	38000 <BusAccess::serviceWaitActivity()+0x4c>
                _waitAssertedStartUs = micros();
   38200:	ebfff964 	bl	36798 <micros>
                _waitAsserted = true;
   38204:	e3a03001 	mov	r3, #1
                _waitAssertedStartUs = micros();
   38208:	e5840200 	str	r0, [r4, #512]	; 0x200
                _waitAsserted = true;
   3820c:	e5c43000 	strb	r3, [r4]
                waitHandleNew();
   38210:	ebfffe94 	bl	37c68 <BusAccess::waitHandleNew()>
   38214:	eaffff79 	b	38000 <BusAccess::serviceWaitActivity()+0x4c>
        if (resetPending)
   38218:	e5d13016 	ldrb	r3, [r1, #22]
   3821c:	e3530000 	cmp	r3, #0
            return BR_BUS_ACTION_RESET;
   38220:	13a03001 	movne	r3, #1
        if (resetPending)
   38224:	1affffe7 	bne	381c8 <BusAccess::serviceWaitActivity()+0x214>
        if (nmiPending)
   38228:	e5d1301c 	ldrb	r3, [r1, #28]
   3822c:	e3530000 	cmp	r3, #0
            return BR_BUS_ACTION_NMI;
   38230:	13a03002 	movne	r3, #2
        if (nmiPending)
   38234:	1affffe3 	bne	381c8 <BusAccess::serviceWaitActivity()+0x214>
        if (irqPending)
   38238:	e5d13024 	ldrb	r3, [r1, #36]	; 0x24
        return BR_BUS_ACTION_NONE;
   3823c:	e3530000 	cmp	r3, #0
   38240:	13a03003 	movne	r3, #3
   38244:	03a03000 	moveq	r3, #0
   38248:	eaffffde 	b	381c8 <BusAccess::serviceWaitActivity()+0x214>
            return resetDurationUs;
   3824c:	e0822102 	add	r2, r2, r2, lsl #2
   38250:	e0843182 	add	r3, r4, r2, lsl #3
   38254:	e5933018 	ldr	r3, [r3, #24]
   38258:	eaffffb0 	b	38120 <BusAccess::serviceWaitActivity()+0x16c>
            return nmiDurationUs;
   3825c:	e0822102 	add	r2, r2, r2, lsl #2
   38260:	e0843182 	add	r3, r4, r2, lsl #3
   38264:	e5933020 	ldr	r3, [r3, #32]
   38268:	eaffffac 	b	38120 <BusAccess::serviceWaitActivity()+0x16c>
            return resetDurationUs;
   3826c:	e0833103 	add	r3, r3, r3, lsl #2
   38270:	e0843183 	add	r3, r4, r3, lsl #3
   38274:	e5933018 	ldr	r3, [r3, #24]
   38278:	eaffff8c 	b	380b0 <BusAccess::serviceWaitActivity()+0xfc>
            return nmiDurationUs;
   3827c:	e0833103 	add	r3, r3, r3, lsl #2
   38280:	e0843183 	add	r3, r4, r3, lsl #3
   38284:	e5933020 	ldr	r3, [r3, #32]
   38288:	eaffff88 	b	380b0 <BusAccess::serviceWaitActivity()+0xfc>
   3828c:	0008c420 	.word	0x0008c420
   38290:	20200000 	.word	0x20200000
   38294:	0006f3fc 	.word	0x0006f3fc
   38298:	0008c428 	.word	0x0008c428

0003829c <BusAccess::service()>:
{
   3829c:	e92d4070 	push	{r4, r5, r6, lr}
    if (_busActionInProgress)
   382a0:	e59f42cc 	ldr	r4, [pc, #716]	; 38574 <BusAccess::service()+0x2d8>
   382a4:	e5d4319a 	ldrb	r3, [r4, #410]	; 0x19a
   382a8:	e3530000 	cmp	r3, #0
   382ac:	1a000059 	bne	38418 <BusAccess::service()+0x17c>
    if (_busActionInProgress)
   382b0:	e5d4319a 	ldrb	r3, [r4, #410]	; 0x19a
   382b4:	e21330ff 	ands	r3, r3, #255	; 0xff
   382b8:	0a00005a 	beq	38428 <BusAccess::service()+0x18c>
    if (!_waitAsserted)
   382bc:	e5d43000 	ldrb	r3, [r4]
   382c0:	e3530000 	cmp	r3, #0
   382c4:	1a000007 	bne	382e8 <BusAccess::service()+0x4c>
    if (!_busActionInProgress || _busActionAsserted)
   382c8:	e5d4319a 	ldrb	r3, [r4, #410]	; 0x19a
   382cc:	e3530000 	cmp	r3, #0
   382d0:	1a000035 	bne	383ac <BusAccess::service()+0x110>
        uint32_t busVals = RD32(ARM_GPIO_GPLEV0);
   382d4:	e59f329c 	ldr	r3, [pc, #668]	; 38578 <BusAccess::service()+0x2dc>
   382d8:	e5933034 	ldr	r3, [r3, #52]	; 0x34
        if (((busVals & BR_WAIT_BAR_MASK) == 0) && ((busVals & BR_BUSACK_BAR_MASK) != 0))
   382dc:	e2033024 	and	r3, r3, #36	; 0x24
   382e0:	e3530004 	cmp	r3, #4
   382e4:	0a000079 	beq	384d0 <BusAccess::service()+0x234>
    if (_waitAsserted)
   382e8:	e5d43000 	ldrb	r3, [r4]
   382ec:	e3530000 	cmp	r3, #0
   382f0:	08bd8070 	popeq	{r4, r5, r6, pc}
        uint32_t busVals = RD32(ARM_GPIO_GPLEV0);
   382f4:	e59f327c 	ldr	r3, [pc, #636]	; 38578 <BusAccess::service()+0x2dc>
   382f8:	e5932034 	ldr	r2, [r3, #52]	; 0x34
        busVals = RD32(ARM_GPIO_GPLEV0);
   382fc:	e5933034 	ldr	r3, [r3, #52]	; 0x34
        if ((busVals & BR_IORQ_BAR_MASK) == 0)
   38300:	e3130002 	tst	r3, #2
   38304:	0a000026 	beq	383a4 <BusAccess::service()+0x108>
        else if (!_waitHold)
   38308:	e5d43199 	ldrb	r3, [r4, #409]	; 0x199
   3830c:	e3530000 	cmp	r3, #0
   38310:	18bd8070 	popne	{r4, r5, r6, pc}
            if (isTimeout(micros(), _waitAssertedStartUs, _waitCycleLengthUs))
   38314:	ebfff91f 	bl	36798 <micros>
   38318:	e59f325c 	ldr	r3, [pc, #604]	; 3857c <BusAccess::service()+0x2e0>
   3831c:	e5941200 	ldr	r1, [r4, #512]	; 0x200
   38320:	e5932000 	ldr	r2, [r3]
   38324:	ebfff930 	bl	367ec <isTimeout>
   38328:	e3500000 	cmp	r0, #0
   3832c:	08bd8070 	popeq	{r4, r5, r6, pc}
    if (!_busActionInProgress || _busActionAsserted)
   38330:	e5d4319a 	ldrb	r3, [r4, #410]	; 0x19a
   38334:	e3530000 	cmp	r3, #0
   38338:	0a000019 	beq	383a4 <BusAccess::service()+0x108>
   3833c:	e5d431a0 	ldrb	r3, [r4, #416]	; 0x1a0
   38340:	e3530000 	cmp	r3, #0
   38344:	1a000016 	bne	383a4 <BusAccess::service()+0x108>
    setSignal(_busActionType, true);
   38348:	e5d4019b 	ldrb	r0, [r4, #411]	; 0x19b
   3834c:	e3a01001 	mov	r1, #1
   38350:	eb000730 	bl	3a018 <BusAccess::setSignal(BR_BUS_ACTION, bool)>
    _busActionAssertedStartUs = micros();
   38354:	ebfff90f 	bl	36798 <micros>
   38358:	e58401a4 	str	r0, [r4, #420]	; 0x1a4
    _busActionAssertedMaxUs = _busSockets[_busActionSocket].getAssertUs(_busActionType);
   3835c:	e59431a8 	ldr	r3, [r4, #424]	; 0x1a8
   38360:	e5d4219b 	ldrb	r2, [r4, #411]	; 0x19b
   38364:	e6ef2072 	uxtb	r2, r2
        if (type == BR_BUS_ACTION_BUSRQ)
   38368:	e3520004 	cmp	r2, #4
            return MAX_WAIT_FOR_BUSACK_US;
   3836c:	03a03064 	moveq	r3, #100	; 0x64
        if (type == BR_BUS_ACTION_BUSRQ)
   38370:	0a000008 	beq	38398 <BusAccess::service()+0xfc>
        else if (type == BR_BUS_ACTION_RESET)
   38374:	e3520001 	cmp	r2, #1
   38378:	0a000075 	beq	38554 <BusAccess::service()+0x2b8>
        else if (type == BR_BUS_ACTION_NMI)
   3837c:	e3520002 	cmp	r2, #2
   38380:	0a000077 	beq	38564 <BusAccess::service()+0x2c8>
        else if (type == BR_BUS_ACTION_IRQ)
   38384:	e3520003 	cmp	r2, #3
        return 0;
   38388:	13a03000 	movne	r3, #0
            return irqDurationUs;
   3838c:	00833103 	addeq	r3, r3, r3, lsl #2
   38390:	00843183 	addeq	r3, r4, r3, lsl #3
   38394:	05933028 	ldreq	r3, [r3, #40]	; 0x28
    _busActionAsserted = true;
   38398:	e3a02001 	mov	r2, #1
    _busActionAssertedMaxUs = _busSockets[_busActionSocket].getAssertUs(_busActionType);
   3839c:	e58431ac 	str	r3, [r4, #428]	; 0x1ac
    _busActionAsserted = true;
   383a0:	e5c421a0 	strb	r2, [r4, #416]	; 0x1a0
}
   383a4:	e8bd4070 	pop	{r4, r5, r6, lr}
            waitResetFlipFlops();
   383a8:	ea0006dd 	b	39f24 <BusAccess::waitResetFlipFlops()>
    if (!_busActionInProgress || _busActionAsserted)
   383ac:	e5d431a0 	ldrb	r3, [r4, #416]	; 0x1a0
   383b0:	e21350ff 	ands	r5, r3, #255	; 0xff
   383b4:	1affffc6 	bne	382d4 <BusAccess::service()+0x38>
    setSignal(_busActionType, true);
   383b8:	e5d4019b 	ldrb	r0, [r4, #411]	; 0x19b
   383bc:	e3a01001 	mov	r1, #1
   383c0:	eb000714 	bl	3a018 <BusAccess::setSignal(BR_BUS_ACTION, bool)>
    _busActionAssertedStartUs = micros();
   383c4:	ebfff8f3 	bl	36798 <micros>
   383c8:	e58401a4 	str	r0, [r4, #420]	; 0x1a4
    _busActionAssertedMaxUs = _busSockets[_busActionSocket].getAssertUs(_busActionType);
   383cc:	e59421a8 	ldr	r2, [r4, #424]	; 0x1a8
   383d0:	e5d4319b 	ldrb	r3, [r4, #411]	; 0x19b
   383d4:	e6ef3073 	uxtb	r3, r3
        if (type == BR_BUS_ACTION_BUSRQ)
   383d8:	e3530004 	cmp	r3, #4
            return MAX_WAIT_FOR_BUSACK_US;
   383dc:	03a03064 	moveq	r3, #100	; 0x64
        if (type == BR_BUS_ACTION_BUSRQ)
   383e0:	0a000008 	beq	38408 <BusAccess::service()+0x16c>
        else if (type == BR_BUS_ACTION_RESET)
   383e4:	e3530001 	cmp	r3, #1
   383e8:	0a000051 	beq	38534 <BusAccess::service()+0x298>
        else if (type == BR_BUS_ACTION_NMI)
   383ec:	e3530002 	cmp	r3, #2
   383f0:	0a000053 	beq	38544 <BusAccess::service()+0x2a8>
        else if (type == BR_BUS_ACTION_IRQ)
   383f4:	e3530003 	cmp	r3, #3
        return 0;
   383f8:	11a03005 	movne	r3, r5
            return irqDurationUs;
   383fc:	00822102 	addeq	r2, r2, r2, lsl #2
   38400:	00843182 	addeq	r3, r4, r2, lsl #3
   38404:	05933028 	ldreq	r3, [r3, #40]	; 0x28
    _busActionAsserted = true;
   38408:	e3a02001 	mov	r2, #1
    _busActionAssertedMaxUs = _busSockets[_busActionSocket].getAssertUs(_busActionType);
   3840c:	e58431ac 	str	r3, [r4, #428]	; 0x1ac
    _busActionAsserted = true;
   38410:	e5c421a0 	strb	r2, [r4, #416]	; 0x1a0
   38414:	eaffffae 	b	382d4 <BusAccess::service()+0x38>
        busActionHandleActive();
   38418:	ebfffc93 	bl	3766c <BusAccess::busActionHandleActive()>
    if (_busActionInProgress)
   3841c:	e5d4319a 	ldrb	r3, [r4, #410]	; 0x19a
   38420:	e21330ff 	ands	r3, r3, #255	; 0xff
   38424:	1affffa4 	bne	382bc <BusAccess::service()+0x20>
    for (int i = 0; i < _busSocketCount; i++)
   38428:	e594e004 	ldr	lr, [r4, #4]
   3842c:	e35e0000 	cmp	lr, #0
   38430:	daffffa1 	ble	382bc <BusAccess::service()+0x20>
   38434:	e59f0144 	ldr	r0, [pc, #324]	; 38580 <BusAccess::service()+0x2e4>
   38438:	ea000008 	b	38460 <BusAccess::service()+0x1c4>
        if (nmiPending)
   3843c:	e5d2c01c 	ldrb	ip, [r2, #28]
   38440:	e35c0000 	cmp	ip, #0
   38444:	1a000012 	bne	38494 <BusAccess::service()+0x1f8>
        if (irqPending)
   38448:	e5d22024 	ldrb	r2, [r2, #36]	; 0x24
   3844c:	e3520000 	cmp	r2, #0
   38450:	1a00000f 	bne	38494 <BusAccess::service()+0x1f8>
   38454:	e2833001 	add	r3, r3, #1
   38458:	e153000e 	cmp	r3, lr
   3845c:	0affff96 	beq	382bc <BusAccess::service()+0x20>
        if (_busSockets[i].enabled && (_busSockets[i].getType() != BR_BUS_ACTION_NONE))
   38460:	e5d0c000 	ldrb	ip, [r0]
        if (busMasterRequest)
   38464:	e1a01103 	lsl	r1, r3, #2
   38468:	e0812003 	add	r2, r1, r3
   3846c:	e35c0000 	cmp	ip, #0
   38470:	e0842182 	add	r2, r4, r2, lsl #3
   38474:	e2800028 	add	r0, r0, #40	; 0x28
   38478:	0afffff5 	beq	38454 <BusAccess::service()+0x1b8>
   3847c:	e5d2c02c 	ldrb	ip, [r2, #44]	; 0x2c
   38480:	e35c0000 	cmp	ip, #0
   38484:	1a000002 	bne	38494 <BusAccess::service()+0x1f8>
        if (resetPending)
   38488:	e5d2c016 	ldrb	ip, [r2, #22]
   3848c:	e35c0000 	cmp	ip, #0
   38490:	0affffe9 	beq	3843c <BusAccess::service()+0x1a0>
        if (busMasterRequest)
   38494:	e0811003 	add	r1, r1, r3
   38498:	e0841181 	add	r1, r4, r1, lsl #3
    _busActionSocket = busSocket;
   3849c:	e58431a8 	str	r3, [r4, #424]	; 0x1a8
   384a0:	e5d1302c 	ldrb	r3, [r1, #44]	; 0x2c
   384a4:	e3530000 	cmp	r3, #0
            return BR_BUS_ACTION_BUSRQ;
   384a8:	13a03004 	movne	r3, #4
        if (busMasterRequest)
   384ac:	0a000013 	beq	38500 <BusAccess::service()+0x264>
    _busActionInProgress = true;
   384b0:	e3a02001 	mov	r2, #1
    _busActionType = _busSockets[busSocket].getType();
   384b4:	e5c4319b 	strb	r3, [r4, #411]	; 0x19b
    _busActionInProgress = true;
   384b8:	e5c4219a 	strb	r2, [r4, #410]	; 0x19a
    _busActionInProgressStartUs = micros();
   384bc:	ebfff8b5 	bl	36798 <micros>
    _busActionAsserted = false;
   384c0:	e3a03000 	mov	r3, #0
    _busActionInProgressStartUs = micros();
   384c4:	e584019c 	str	r0, [r4, #412]	; 0x19c
    _busActionAsserted = false;
   384c8:	e5c431a0 	strb	r3, [r4, #416]	; 0x1a0
   384cc:	eaffff7a 	b	382bc <BusAccess::service()+0x20>
            if (_busActionInProgress && (_busActionType != BR_BUS_ACTION_BUSRQ))
   384d0:	e5d4319a 	ldrb	r3, [r4, #410]	; 0x19a
   384d4:	e3530000 	cmp	r3, #0
   384d8:	0a000002 	beq	384e8 <BusAccess::service()+0x24c>
   384dc:	e5d4319b 	ldrb	r3, [r4, #411]	; 0x19b
   384e0:	e3530004 	cmp	r3, #4
   384e4:	1affff7f 	bne	382e8 <BusAccess::service()+0x4c>
                _waitAssertedStartUs = micros();
   384e8:	ebfff8aa 	bl	36798 <micros>
                _waitAsserted = true;
   384ec:	e3a03001 	mov	r3, #1
                _waitAssertedStartUs = micros();
   384f0:	e5840200 	str	r0, [r4, #512]	; 0x200
                _waitAsserted = true;
   384f4:	e5c43000 	strb	r3, [r4]
                waitHandleNew();
   384f8:	ebfffdda 	bl	37c68 <BusAccess::waitHandleNew()>
   384fc:	eaffff79 	b	382e8 <BusAccess::service()+0x4c>
        if (resetPending)
   38500:	e5d13016 	ldrb	r3, [r1, #22]
   38504:	e3530000 	cmp	r3, #0
            return BR_BUS_ACTION_RESET;
   38508:	13a03001 	movne	r3, #1
        if (resetPending)
   3850c:	1affffe7 	bne	384b0 <BusAccess::service()+0x214>
        if (nmiPending)
   38510:	e5d1301c 	ldrb	r3, [r1, #28]
   38514:	e3530000 	cmp	r3, #0
            return BR_BUS_ACTION_NMI;
   38518:	13a03002 	movne	r3, #2
        if (nmiPending)
   3851c:	1affffe3 	bne	384b0 <BusAccess::service()+0x214>
        if (irqPending)
   38520:	e5d13024 	ldrb	r3, [r1, #36]	; 0x24
        return BR_BUS_ACTION_NONE;
   38524:	e3530000 	cmp	r3, #0
   38528:	13a03003 	movne	r3, #3
   3852c:	03a03000 	moveq	r3, #0
   38530:	eaffffde 	b	384b0 <BusAccess::service()+0x214>
            return resetDurationUs;
   38534:	e0822102 	add	r2, r2, r2, lsl #2
   38538:	e0843182 	add	r3, r4, r2, lsl #3
   3853c:	e5933018 	ldr	r3, [r3, #24]
   38540:	eaffffb0 	b	38408 <BusAccess::service()+0x16c>
            return nmiDurationUs;
   38544:	e0822102 	add	r2, r2, r2, lsl #2
   38548:	e0843182 	add	r3, r4, r2, lsl #3
   3854c:	e5933020 	ldr	r3, [r3, #32]
   38550:	eaffffac 	b	38408 <BusAccess::service()+0x16c>
            return resetDurationUs;
   38554:	e0833103 	add	r3, r3, r3, lsl #2
   38558:	e0843183 	add	r3, r4, r3, lsl #3
   3855c:	e5933018 	ldr	r3, [r3, #24]
   38560:	eaffff8c 	b	38398 <BusAccess::service()+0xfc>
            return nmiDurationUs;
   38564:	e0833103 	add	r3, r3, r3, lsl #2
   38568:	e0843183 	add	r3, r4, r3, lsl #3
   3856c:	e5933020 	ldr	r3, [r3, #32]
   38570:	eaffff88 	b	38398 <BusAccess::service()+0xfc>
   38574:	0008c420 	.word	0x0008c420
   38578:	20200000 	.word	0x20200000
   3857c:	0006f3fc 	.word	0x0006f3fc
   38580:	0008c428 	.word	0x0008c428

00038584 <BusAccessStatusInfo::getJson()>:

char BusAccessStatusInfo::_jsonBuf[MAX_JSON_LEN];
const char* BusAccessStatusInfo::getJson()
{
   38584:	e92d4030 	push	{r4, r5, lr}
   38588:	e1a04000 	mov	r4, r0
    char tmpResp[MAX_JSON_LEN];
    ee_sprintf(_jsonBuf, "\"err\":\"ok\",\"c\":%u,\"avgNs\":%u,\"maxUs\":%u,\"clrAvgNs\":%u,\"clrMaxUs\":%u,\"busRqFail\":%u,\"busActFailDueWait\":%u",
   3858c:	e590300c 	ldr	r3, [r0, #12]
   38590:	e5902000 	ldr	r2, [r0]
   38594:	e5900048 	ldr	r0, [r0, #72]	; 0x48
{
   38598:	e24ddf9d 	sub	sp, sp, #628	; 0x274
    ee_sprintf(_jsonBuf, "\"err\":\"ok\",\"c\":%u,\"avgNs\":%u,\"maxUs\":%u,\"clrAvgNs\":%u,\"clrMaxUs\":%u,\"busRqFail\":%u,\"busActFailDueWait\":%u",
   3859c:	e5941044 	ldr	r1, [r4, #68]	; 0x44
   385a0:	e594c040 	ldr	ip, [r4, #64]	; 0x40
   385a4:	e58d0010 	str	r0, [sp, #16]
   385a8:	e594003c 	ldr	r0, [r4, #60]	; 0x3c
   385ac:	e58d100c 	str	r1, [sp, #12]
   385b0:	e5941010 	ldr	r1, [r4, #16]
   385b4:	e59f5064 	ldr	r5, [pc, #100]	; 38620 <BusAccessStatusInfo::getJson()+0x9c>
   385b8:	e98d1001 	stmib	sp, {r0, ip}
   385bc:	e58d1000 	str	r1, [sp]
   385c0:	e1a00005 	mov	r0, r5
   385c4:	e59f1058 	ldr	r1, [pc, #88]	; 38624 <BusAccessStatusInfo::getJson()+0xa0>
   385c8:	ebffa9f7 	bl	22dac <ee_sprintf>
                isrCount, isrAvgNs, isrMaxUs, clrAvgNs, clrMaxUs, busrqFailCount, busActionFailedDueToWait);
    ee_sprintf(tmpResp, ",\"mreqRd\":%u,\"mreqWr\":%u,\"iorqRd\":%u,\"iorqWr\":%u,\"irqAck\":%u,\"isrBadBusrq\":%u,\"irqDuringBusAck\":%u,\"irqNoWait\":%u",
   385cc:	e1c422d0 	ldrd	r2, [r4, #32]
   385d0:	e594001c 	ldr	r0, [r4, #28]
   385d4:	e5941018 	ldr	r1, [r4, #24]
   385d8:	e594e014 	ldr	lr, [r4, #20]
   385dc:	e58d0014 	str	r0, [sp, #20]
   385e0:	e594c030 	ldr	ip, [r4, #48]	; 0x30
   385e4:	e58d1010 	str	r1, [sp, #16]
   385e8:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   385ec:	e5941028 	ldr	r1, [r4, #40]	; 0x28
   385f0:	e98d5001 	stmib	sp, {r0, ip, lr}
   385f4:	e58d1000 	str	r1, [sp]
   385f8:	e28d0018 	add	r0, sp, #24
   385fc:	e59f1024 	ldr	r1, [pc, #36]	; 38628 <BusAccessStatusInfo::getJson()+0xa4>
   38600:	ebffa9e9 	bl	22dac <ee_sprintf>
                isrMREQRD, isrMREQWR, isrIORQRD, isrIORQWR, isrIRQACK, isrSpuriousBUSRQ, isrDuringBUSACK, isrWithoutWAIT);
    strlcat(_jsonBuf, tmpResp, MAX_JSON_LEN);
   38604:	e28d1018 	add	r1, sp, #24
   38608:	e1a00005 	mov	r0, r5
   3860c:	e3a02f96 	mov	r2, #600	; 0x258
   38610:	eb0053bc 	bl	4d508 <strlcat>
    return _jsonBuf;
}
   38614:	e1a00005 	mov	r0, r5
   38618:	e28ddf9d 	add	sp, sp, #628	; 0x274
   3861c:	e8bd8030 	pop	{r4, r5, pc}
   38620:	0008c624 	.word	0x0008c624
   38624:	00055a08 	.word	0x00055a08
   38628:	00055a74 	.word	0x00055a74

0003862c <_GLOBAL__sub_I__ZN9BusAccess11_busSocketsE>:
        isrCount = 0;
   3862c:	e3a02000 	mov	r2, #0
   38630:	e59f304c 	ldr	r3, [pc, #76]	; 38684 <_GLOBAL__sub_I__ZN9BusAccess11_busSocketsE+0x58>
   38634:	e58321b4 	str	r2, [r3, #436]	; 0x1b4
        isrAccumUs = 0;
   38638:	e58321b8 	str	r2, [r3, #440]	; 0x1b8
        isrAvgingCount = 0;
   3863c:	e58321bc 	str	r2, [r3, #444]	; 0x1bc
        isrAvgNs = 0;
   38640:	e58321c0 	str	r2, [r3, #448]	; 0x1c0
        isrMaxUs = 0;
   38644:	e58321c4 	str	r2, [r3, #452]	; 0x1c4
        isrSpuriousBUSRQ = 0;
   38648:	e58321c8 	str	r2, [r3, #456]	; 0x1c8
        isrDuringBUSACK = 0;
   3864c:	e58321cc 	str	r2, [r3, #460]	; 0x1cc
        isrWithoutWAIT = 0;
   38650:	e58321d0 	str	r2, [r3, #464]	; 0x1d0
        clrAccumUs = 0;
   38654:	e58321e8 	str	r2, [r3, #488]	; 0x1e8
        clrAvgingCount = 0;
   38658:	e58321ec 	str	r2, [r3, #492]	; 0x1ec
        clrAvgNs = 0;
   3865c:	e58321f0 	str	r2, [r3, #496]	; 0x1f0
        clrMaxUs = 0;
   38660:	e58321f4 	str	r2, [r3, #500]	; 0x1f4
        busrqFailCount = 0;
   38664:	e58321f8 	str	r2, [r3, #504]	; 0x1f8
        busActionFailedDueToWait = 0;
   38668:	e58321fc 	str	r2, [r3, #508]	; 0x1fc
        isrMREQRD = 0;
   3866c:	e58321d4 	str	r2, [r3, #468]	; 0x1d4
        isrMREQWR = 0;
   38670:	e58321d8 	str	r2, [r3, #472]	; 0x1d8
        isrIORQRD = 0;
   38674:	e58321dc 	str	r2, [r3, #476]	; 0x1dc
        isrIORQWR = 0;
   38678:	e58321e0 	str	r2, [r3, #480]	; 0x1e0
        isrIRQACK = 0;
   3867c:	e58321e4 	str	r2, [r3, #484]	; 0x1e4
   38680:	e12fff1e 	bx	lr
   38684:	0008c420 	.word	0x0008c420

00038688 <BusAccess::busSocketAdd(BusSocketInfo&)>:
// Bus Sockets
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// Add a bus socket
int BusAccess::busSocketAdd(BusSocketInfo& busSocketInfo)
{
   38688:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    // Check if all used
    if (_busSocketCount >= MAX_BUS_SOCKETS)
   3868c:	e59f70f0 	ldr	r7, [pc, #240]	; 38784 <BusAccess::busSocketAdd(BusSocketInfo&)+0xfc>
   38690:	e5976000 	ldr	r6, [r7]
   38694:	e3560009 	cmp	r6, #9
   38698:	ca000037 	bgt	3877c <BusAccess::busSocketAdd(BusSocketInfo&)+0xf4>
        return -1;

    // Add in available space
    _busSockets[_busSocketCount] = busSocketInfo;
   3869c:	e1a0e000 	mov	lr, r0
   386a0:	e0861106 	add	r1, r6, r6, lsl #2
   386a4:	e59fc0dc 	ldr	ip, [pc, #220]	; 38788 <BusAccess::busSocketAdd(BusSocketInfo&)+0x100>
   386a8:	e1a05181 	lsl	r5, r1, #3
   386ac:	e08c4005 	add	r4, ip, r5
   386b0:	e8be000f 	ldm	lr!, {r0, r1, r2, r3}
   386b4:	e8a4000f 	stmia	r4!, {r0, r1, r2, r3}
   386b8:	e8be000f 	ldm	lr!, {r0, r1, r2, r3}
   386bc:	e8a4000f 	stmia	r4!, {r0, r1, r2, r3}
    int tmpCount = _busSocketCount++;
   386c0:	e2863001 	add	r3, r6, #1
void BusAccess::waitEnablementUpdate()
{
    // Iterate bus sockets to see if any enable Mem/IO wait states
    bool ioWait = false;
    bool memWait = false;
    for (int i = 0; i < _busSocketCount; i++)
   386c4:	e3530000 	cmp	r3, #0
    _busSockets[_busSocketCount] = busSocketInfo;
   386c8:	e89e0003 	ldm	lr, {r0, r1}
    int tmpCount = _busSocketCount++;
   386cc:	e5873000 	str	r3, [r7]
    _busSockets[_busSocketCount] = busSocketInfo;
   386d0:	e8840003 	stm	r4, {r0, r1}
    for (int i = 0; i < _busSocketCount; i++)
   386d4:	da00001e 	ble	38754 <BusAccess::busSocketAdd(BusSocketInfo&)+0xcc>
    bool ioWait = false;
   386d8:	e3a00000 	mov	r0, #0
   386dc:	e1a0300c 	mov	r3, ip
    bool memWait = false;
   386e0:	e1a0c000 	mov	ip, r0
   386e4:	e2831028 	add	r1, r3, #40	; 0x28
   386e8:	e0851001 	add	r1, r5, r1
    {
        if (_busSockets[i].enabled)
   386ec:	e5d32000 	ldrb	r2, [r3]
   386f0:	e3520000 	cmp	r2, #0
   386f4:	0a000003 	beq	38708 <BusAccess::busSocketAdd(BusSocketInfo&)+0x80>
        {
            memWait = memWait || _busSockets[i].waitOnMemory;
   386f8:	e35c0000 	cmp	ip, #0
   386fc:	05d3c00c 	ldrbeq	ip, [r3, #12]
            ioWait = ioWait || _busSockets[i].waitOnIO;
   38700:	e3500000 	cmp	r0, #0
   38704:	05d3000d 	ldrbeq	r0, [r3, #13]
   38708:	e2833028 	add	r3, r3, #40	; 0x28
    for (int i = 0; i < _busSocketCount; i++)
   3870c:	e1510003 	cmp	r1, r3
   38710:	1afffff5 	bne	386ec <BusAccess::busSocketAdd(BusSocketInfo&)+0x64>

    // LogWrite("BusAccess", LOG_DEBUG, "WAIT ENABLEMENT mreq %d iorq %d", memWait, ioWait);

    // Set PWM generator idle value to enable/disable wait states
    // This is done using the idle states of the PWM
    uint32_t pwmCtrl = RD32(ARM_PWM_CTL);
   38714:	e59f3070 	ldr	r3, [pc, #112]	; 3878c <BusAccess::busSocketAdd(BusSocketInfo&)+0x104>
    pwmCtrl &= ~(ARM_PWM_CTL_SBIT1 | ARM_PWM_CTL_SBIT2);
    if (_waitOnIO)
   38718:	e3500000 	cmp	r0, #0
    uint32_t pwmCtrl = RD32(ARM_PWM_CTL);
   3871c:	e5933000 	ldr	r3, [r3]
    _waitOnMemory = memWait;
   38720:	e59f1068 	ldr	r1, [pc, #104]	; 38790 <BusAccess::busSocketAdd(BusSocketInfo&)+0x108>
    pwmCtrl &= ~(ARM_PWM_CTL_SBIT1 | ARM_PWM_CTL_SBIT2);
   38724:	e3c33b02 	bic	r3, r3, #2048	; 0x800
   38728:	e3c33008 	bic	r3, r3, #8
    _waitOnIO = ioWait;
   3872c:	e59f2060 	ldr	r2, [pc, #96]	; 38794 <BusAccess::busSocketAdd(BusSocketInfo&)+0x10c>
        pwmCtrl |= ARM_PWM_CTL_SBIT1;
   38730:	13833008 	orrne	r3, r3, #8
    if (_waitOnMemory)
   38734:	e35c0000 	cmp	ip, #0
    _waitOnMemory = memWait;
   38738:	e5c1c000 	strb	ip, [r1]
    _waitOnIO = ioWait;
   3873c:	e5c20000 	strb	r0, [r2]
        pwmCtrl |= ARM_PWM_CTL_SBIT2;
   38740:	13833b02 	orrne	r3, r3, #2048	; 0x800
    WR32(ARM_PWM_CTL, pwmCtrl);
   38744:	e59f2040 	ldr	r2, [pc, #64]	; 3878c <BusAccess::busSocketAdd(BusSocketInfo&)+0x104>
   38748:	e5823000 	str	r3, [r2]
}
   3874c:	e1a00006 	mov	r0, r6
   38750:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
    _waitOnMemory = memWait;
   38754:	e3a03000 	mov	r3, #0
   38758:	e59f0030 	ldr	r0, [pc, #48]	; 38790 <BusAccess::busSocketAdd(BusSocketInfo&)+0x108>
    _waitOnIO = ioWait;
   3875c:	e59f1030 	ldr	r1, [pc, #48]	; 38794 <BusAccess::busSocketAdd(BusSocketInfo&)+0x10c>
    uint32_t pwmCtrl = RD32(ARM_PWM_CTL);
   38760:	e59f2024 	ldr	r2, [pc, #36]	; 3878c <BusAccess::busSocketAdd(BusSocketInfo&)+0x104>
    _waitOnMemory = memWait;
   38764:	e5c03000 	strb	r3, [r0]
    _waitOnIO = ioWait;
   38768:	e5c13000 	strb	r3, [r1]
    uint32_t pwmCtrl = RD32(ARM_PWM_CTL);
   3876c:	e5923000 	ldr	r3, [r2]
    pwmCtrl &= ~(ARM_PWM_CTL_SBIT1 | ARM_PWM_CTL_SBIT2);
   38770:	e3c33b02 	bic	r3, r3, #2048	; 0x800
   38774:	e3c33008 	bic	r3, r3, #8
   38778:	eafffff1 	b	38744 <BusAccess::busSocketAdd(BusSocketInfo&)+0xbc>
        return -1;
   3877c:	e3e06000 	mvn	r6, #0
   38780:	eafffff1 	b	3874c <BusAccess::busSocketAdd(BusSocketInfo&)+0xc4>
   38784:	0008c424 	.word	0x0008c424
   38788:	0008c428 	.word	0x0008c428
   3878c:	2020c000 	.word	0x2020c000
   38790:	0008c5b8 	.word	0x0008c5b8
   38794:	0008c8ad 	.word	0x0008c8ad

00038798 <BusAccess::busSocketEnable(int, bool)>:
    if ((busSocket < 0) || (busSocket >= _busSocketCount))
   38798:	e3500000 	cmp	r0, #0
   3879c:	b12fff1e 	bxlt	lr
   387a0:	e59f3090 	ldr	r3, [pc, #144]	; 38838 <BusAccess::busSocketEnable(int, bool)+0xa0>
   387a4:	e593c000 	ldr	ip, [r3]
   387a8:	e15c0000 	cmp	ip, r0
   387ac:	d12fff1e 	bxle	lr
{
   387b0:	e92d4030 	push	{r4, r5, lr}
    bool ioWait = false;
   387b4:	e3a0e000 	mov	lr, #0
    _busSockets[busSocket].enabled = enable;
   387b8:	e59f507c 	ldr	r5, [pc, #124]	; 3883c <BusAccess::busSocketEnable(int, bool)+0xa4>
    bool memWait = false;
   387bc:	e1a0400e 	mov	r4, lr
   387c0:	e1a03005 	mov	r3, r5
    for (int i = 0; i < _busSocketCount; i++)
   387c4:	e1a0200e 	mov	r2, lr
    _busSockets[busSocket].enabled = enable;
   387c8:	e0800100 	add	r0, r0, r0, lsl #2
   387cc:	e7c51180 	strb	r1, [r5, r0, lsl #3]
        if (_busSockets[i].enabled)
   387d0:	e5d31000 	ldrb	r1, [r3]
    for (int i = 0; i < _busSocketCount; i++)
   387d4:	e2822001 	add	r2, r2, #1
        if (_busSockets[i].enabled)
   387d8:	e3510000 	cmp	r1, #0
   387dc:	0a000003 	beq	387f0 <BusAccess::busSocketEnable(int, bool)+0x58>
            memWait = memWait || _busSockets[i].waitOnMemory;
   387e0:	e3540000 	cmp	r4, #0
   387e4:	05d3400c 	ldrbeq	r4, [r3, #12]
            ioWait = ioWait || _busSockets[i].waitOnIO;
   387e8:	e35e0000 	cmp	lr, #0
   387ec:	05d3e00d 	ldrbeq	lr, [r3, #13]
    for (int i = 0; i < _busSocketCount; i++)
   387f0:	e15c0002 	cmp	ip, r2
   387f4:	e2833028 	add	r3, r3, #40	; 0x28
   387f8:	cafffff4 	bgt	387d0 <BusAccess::busSocketEnable(int, bool)+0x38>
    uint32_t pwmCtrl = RD32(ARM_PWM_CTL);
   387fc:	e59f303c 	ldr	r3, [pc, #60]	; 38840 <BusAccess::busSocketEnable(int, bool)+0xa8>
    _waitOnIO = ioWait;
   38800:	e59f203c 	ldr	r2, [pc, #60]	; 38844 <BusAccess::busSocketEnable(int, bool)+0xac>
    uint32_t pwmCtrl = RD32(ARM_PWM_CTL);
   38804:	e5933000 	ldr	r3, [r3]
    if (_waitOnIO)
   38808:	e35e0000 	cmp	lr, #0
    pwmCtrl &= ~(ARM_PWM_CTL_SBIT1 | ARM_PWM_CTL_SBIT2);
   3880c:	e3c33b02 	bic	r3, r3, #2048	; 0x800
   38810:	e3c33008 	bic	r3, r3, #8
        pwmCtrl |= ARM_PWM_CTL_SBIT1;
   38814:	13833008 	orrne	r3, r3, #8
    _waitOnIO = ioWait;
   38818:	e5c2e000 	strb	lr, [r2]
    _waitOnMemory = memWait;
   3881c:	e59f1024 	ldr	r1, [pc, #36]	; 38848 <BusAccess::busSocketEnable(int, bool)+0xb0>
    if (_waitOnMemory)
   38820:	e3540000 	cmp	r4, #0
    WR32(ARM_PWM_CTL, pwmCtrl);
   38824:	e59f2014 	ldr	r2, [pc, #20]	; 38840 <BusAccess::busSocketEnable(int, bool)+0xa8>
        pwmCtrl |= ARM_PWM_CTL_SBIT2;
   38828:	13833b02 	orrne	r3, r3, #2048	; 0x800
    _waitOnMemory = memWait;
   3882c:	e5c14000 	strb	r4, [r1]
    WR32(ARM_PWM_CTL, pwmCtrl);
   38830:	e5823000 	str	r3, [r2]
}
   38834:	e8bd8030 	pop	{r4, r5, pc}
   38838:	0008c424 	.word	0x0008c424
   3883c:	0008c428 	.word	0x0008c428
   38840:	2020c000 	.word	0x2020c000
   38844:	0008c8ad 	.word	0x0008c8ad
   38848:	0008c5b8 	.word	0x0008c5b8

0003884c <BusAccess::busSocketIsEnabled(int)>:
    if ((busSocket < 0) || (busSocket >= _busSocketCount))
   3884c:	e3500000 	cmp	r0, #0
   38850:	ba000007 	blt	38874 <BusAccess::busSocketIsEnabled(int)+0x28>
   38854:	e59f3020 	ldr	r3, [pc, #32]	; 3887c <BusAccess::busSocketIsEnabled(int)+0x30>
   38858:	e5933000 	ldr	r3, [r3]
   3885c:	e1530000 	cmp	r3, r0
   38860:	da000003 	ble	38874 <BusAccess::busSocketIsEnabled(int)+0x28>
    return _busSockets[busSocket].enabled;
   38864:	e59f3014 	ldr	r3, [pc, #20]	; 38880 <BusAccess::busSocketIsEnabled(int)+0x34>
   38868:	e0800100 	add	r0, r0, r0, lsl #2
   3886c:	e7d30180 	ldrb	r0, [r3, r0, lsl #3]
   38870:	e12fff1e 	bx	lr
        return false;
   38874:	e3a00000 	mov	r0, #0
}
   38878:	e12fff1e 	bx	lr
   3887c:	0008c424 	.word	0x0008c424
   38880:	0008c428 	.word	0x0008c428

00038884 <BusAccess::getStatus(BusAccessStatusInfo&)>:
{
   38884:	e92d4010 	push	{r4, lr}
    statusInfo = _statusInfo;
   38888:	e3a0204c 	mov	r2, #76	; 0x4c
   3888c:	e59f1004 	ldr	r1, [pc, #4]	; 38898 <BusAccess::getStatus(BusAccessStatusInfo&)+0x14>
   38890:	eb005134 	bl	4cd68 <memcpy>
}
   38894:	e8bd8010 	pop	{r4, pc}
   38898:	0008c5d4 	.word	0x0008c5d4

0003889c <BusAccess::clearStatus()>:
        isrCount = 0;
   3889c:	e3a02000 	mov	r2, #0
   388a0:	e59f304c 	ldr	r3, [pc, #76]	; 388f4 <BusAccess::clearStatus()+0x58>
   388a4:	e5832000 	str	r2, [r3]
        isrAccumUs = 0;
   388a8:	e5832004 	str	r2, [r3, #4]
        isrAvgingCount = 0;
   388ac:	e5832008 	str	r2, [r3, #8]
        isrAvgNs = 0;
   388b0:	e583200c 	str	r2, [r3, #12]
        isrMaxUs = 0;
   388b4:	e5832010 	str	r2, [r3, #16]
        isrSpuriousBUSRQ = 0;
   388b8:	e5832014 	str	r2, [r3, #20]
        isrDuringBUSACK = 0;
   388bc:	e5832018 	str	r2, [r3, #24]
        isrWithoutWAIT = 0;
   388c0:	e583201c 	str	r2, [r3, #28]
        clrAccumUs = 0;
   388c4:	e5832034 	str	r2, [r3, #52]	; 0x34
        clrAvgingCount = 0;
   388c8:	e5832038 	str	r2, [r3, #56]	; 0x38
        clrAvgNs = 0;
   388cc:	e583203c 	str	r2, [r3, #60]	; 0x3c
        clrMaxUs = 0;
   388d0:	e5832040 	str	r2, [r3, #64]	; 0x40
        busrqFailCount = 0;
   388d4:	e5832044 	str	r2, [r3, #68]	; 0x44
        busActionFailedDueToWait = 0;
   388d8:	e5832048 	str	r2, [r3, #72]	; 0x48
        isrMREQRD = 0;
   388dc:	e5832020 	str	r2, [r3, #32]
        isrMREQWR = 0;
   388e0:	e5832024 	str	r2, [r3, #36]	; 0x24
        isrIORQRD = 0;
   388e4:	e5832028 	str	r2, [r3, #40]	; 0x28
        isrIORQWR = 0;
   388e8:	e583202c 	str	r2, [r3, #44]	; 0x2c
        isrIRQACK = 0;
   388ec:	e5832030 	str	r2, [r3, #48]	; 0x30
}
   388f0:	e12fff1e 	bx	lr
   388f4:	0008c5d4 	.word	0x0008c5d4

000388f8 <BusAccess::isUnderControl()>:
    return _busIsUnderControl;
   388f8:	e59f3004 	ldr	r3, [pc, #4]	; 38904 <BusAccess::isUnderControl()+0xc>
   388fc:	e5d30000 	ldrb	r0, [r3]
}
   38900:	e12fff1e 	bx	lr
   38904:	0008c8b0 	.word	0x0008c8b0

00038908 <BusAccess::controlRequest()>:
    WR32(ARM_GPIO_GPSET0, 1 << BR_DATA_DIR_IN);
   38908:	e3a0c040 	mov	ip, #64	; 0x40
        WR32(BR_PIB_GPF_REG, (RD32(BR_PIB_GPF_REG) & BR_PIB_GPF_MASK) | BR_PIB_GPF_INPUT);
   3890c:	e59f3018 	ldr	r3, [pc, #24]	; 3892c <BusAccess::controlRequest()+0x24>
    digitalWrite(BR_BUSRQ_BAR, 0);
   38910:	e3a01000 	mov	r1, #0
   38914:	e5932008 	ldr	r2, [r3, #8]
   38918:	e3a00013 	mov	r0, #19
   3891c:	e20224ff 	and	r2, r2, #-16777216	; 0xff000000
   38920:	e5832008 	str	r2, [r3, #8]
    WR32(ARM_GPIO_GPSET0, 1 << BR_DATA_DIR_IN);
   38924:	e583c01c 	str	ip, [r3, #28]
    digitalWrite(BR_BUSRQ_BAR, 0);
   38928:	eafff2af 	b	353ec <digitalWrite>
   3892c:	20200000 	.word	0x20200000

00038930 <BusAccess::controlBusAcknowledged()>:
    return (RD32(ARM_GPIO_GPLEV0) & BR_BUSACK_BAR_MASK) == 0;
   38930:	e59f3010 	ldr	r3, [pc, #16]	; 38948 <BusAccess::controlBusAcknowledged()+0x18>
   38934:	e5930034 	ldr	r0, [r3, #52]	; 0x34
   38938:	e1a00120 	lsr	r0, r0, #2
   3893c:	e2200001 	eor	r0, r0, #1
}
   38940:	e2000001 	and	r0, r0, #1
   38944:	e12fff1e 	bx	lr
   38948:	20200000 	.word	0x20200000

0003894c <BusAccess::controlTake()>:
{
   3894c:	e92d4010 	push	{r4, lr}
    _busIsUnderControl = true;
   38950:	e3a04001 	mov	r4, #1
    WR32(ARM_GPIO_GPSET0, 1 << BR_DATA_DIR_IN);
   38954:	e3a0c040 	mov	ip, #64	; 0x40
    _busIsUnderControl = true;
   38958:	e59f30c8 	ldr	r3, [pc, #200]	; 38a28 <BusAccess::controlTake()+0xdc>
void BusAccess::waitGenerationDisable()
{
    // Debug
    // LogWrite("BusAccess", LOG_DEBUG, "WAIT DISABLE");
    // Set PWM idle state to disable waits
    uint32_t pwmCtrl = RD32(ARM_PWM_CTL);
   3895c:	e59f10c8 	ldr	r1, [pc, #200]	; 38a2c <BusAccess::controlTake()+0xe0>
    _busIsUnderControl = true;
   38960:	e5c34000 	strb	r4, [r3]
    uint32_t pwmCtrl = RD32(ARM_PWM_CTL);
   38964:	e5913000 	ldr	r3, [r1]
   38968:	e59f20c0 	ldr	r2, [pc, #192]	; 38a30 <BusAccess::controlTake()+0xe4>
    pwmCtrl &= ~(ARM_PWM_CTL_SBIT1 | ARM_PWM_CTL_SBIT2);
   3896c:	e3c33b02 	bic	r3, r3, #2048	; 0x800
   38970:	e3c33008 	bic	r3, r3, #8
    WR32(ARM_PWM_CTL, pwmCtrl);
   38974:	e5813000 	str	r3, [r1]
   38978:	e5923008 	ldr	r3, [r2, #8]
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// Set a pin to be an output and set initial value for that pin
void BusAccess::setPinOut(int pinNumber, bool val)
{
    digitalWrite(pinNumber, val);
   3897c:	e1a01004 	mov	r1, r4
   38980:	e20334ff 	and	r3, r3, #-16777216	; 0xff000000
   38984:	e5823008 	str	r3, [r2, #8]
   38988:	e3a00011 	mov	r0, #17
    WR32(ARM_GPIO_GPSET0, 1 << BR_DATA_DIR_IN);
   3898c:	e582c01c 	str	ip, [r2, #28]
    digitalWrite(pinNumber, val);
   38990:	ebfff295 	bl	353ec <digitalWrite>
    pinMode(pinNumber, OUTPUT);
   38994:	e1a01004 	mov	r1, r4
   38998:	e3a00011 	mov	r0, #17
   3899c:	ebfff250 	bl	352e4 <pinMode>
    digitalWrite(pinNumber, val);
   389a0:	e1a01004 	mov	r1, r4
   389a4:	e3a00011 	mov	r0, #17
   389a8:	ebfff28f 	bl	353ec <digitalWrite>
    digitalWrite(pinNumber, val);
   389ac:	e1a01004 	mov	r1, r4
   389b0:	e3a00012 	mov	r0, #18
   389b4:	ebfff28c 	bl	353ec <digitalWrite>
    pinMode(pinNumber, OUTPUT);
   389b8:	e1a01004 	mov	r1, r4
   389bc:	e3a00012 	mov	r0, #18
   389c0:	ebfff247 	bl	352e4 <pinMode>
    digitalWrite(pinNumber, val);
   389c4:	e1a01004 	mov	r1, r4
   389c8:	e3a00012 	mov	r0, #18
   389cc:	ebfff286 	bl	353ec <digitalWrite>
    digitalWrite(pinNumber, val);
   389d0:	e1a01004 	mov	r1, r4
   389d4:	e3a00000 	mov	r0, #0
   389d8:	ebfff283 	bl	353ec <digitalWrite>
    pinMode(pinNumber, OUTPUT);
   389dc:	e1a01004 	mov	r1, r4
   389e0:	e3a00000 	mov	r0, #0
   389e4:	ebfff23e 	bl	352e4 <pinMode>
    digitalWrite(pinNumber, val);
   389e8:	e1a01004 	mov	r1, r4
   389ec:	e3a00000 	mov	r0, #0
   389f0:	ebfff27d 	bl	353ec <digitalWrite>
    digitalWrite(pinNumber, val);
   389f4:	e1a01004 	mov	r1, r4
   389f8:	e1a00004 	mov	r0, r4
   389fc:	ebfff27a 	bl	353ec <digitalWrite>
    pinMode(pinNumber, OUTPUT);
   38a00:	e1a01004 	mov	r1, r4
   38a04:	e1a00004 	mov	r0, r4
   38a08:	ebfff235 	bl	352e4 <pinMode>
    digitalWrite(pinNumber, val);
   38a0c:	e1a01004 	mov	r1, r4
   38a10:	e1a00004 	mov	r0, r4
   38a14:	ebfff274 	bl	353ec <digitalWrite>
}
   38a18:	e8bd4010 	pop	{r4, lr}
    digitalWrite(BR_PUSH_ADDR_BAR, 0);
   38a1c:	e3a01000 	mov	r1, #0
   38a20:	e3a00003 	mov	r0, #3
   38a24:	eafff270 	b	353ec <digitalWrite>
   38a28:	0008c8b0 	.word	0x0008c8b0
   38a2c:	2020c000 	.word	0x2020c000
   38a30:	20200000 	.word	0x20200000

00038a34 <BusAccess::controlRelease()>:
{
   38a34:	e92d4070 	push	{r4, r5, r6, lr}
        WR32(ARM_GPIO_GPSET0, setBits);
   38a38:	e3a0c601 	mov	ip, #1048576	; 0x100000
        WR32(ARM_GPIO_GPCLR0, clrBits);
   38a3c:	e3a016fe 	mov	r1, #266338304	; 0xfe00000
    WR32(ARM_GPIO_GPCLR0, 1 << BR_DATA_DIR_IN);
   38a40:	e3a05040 	mov	r5, #64	; 0x40
        WR32(BR_PIB_GPF_REG, (RD32(BR_PIB_GPF_REG) & BR_PIB_GPF_MASK) | BR_PIB_GPF_OUTPUT);
   38a44:	e59f43f8 	ldr	r4, [pc, #1016]	; 38e44 <BusAccess::controlRelease()+0x410>
   38a48:	e59f33f8 	ldr	r3, [pc, #1016]	; 38e48 <BusAccess::controlRelease()+0x414>
   38a4c:	e5942008 	ldr	r2, [r4, #8]
    lowlev_cycleDelay(CYCLES_DELAY_FOR_MREQ_FF_RESET);
   38a50:	e3a00014 	mov	r0, #20
   38a54:	e20224ff 	and	r2, r2, #-16777216	; 0xff000000
   38a58:	e1823003 	orr	r3, r2, r3
   38a5c:	e5843008 	str	r3, [r4, #8]
        WR32(ARM_GPIO_GPSET0, setBits);
   38a60:	e584c01c 	str	ip, [r4, #28]
        WR32(ARM_GPIO_GPCLR0, clrBits);
   38a64:	e5841028 	str	r1, [r4, #40]	; 0x28
    WR32(ARM_GPIO_GPCLR0, 1 << BR_DATA_DIR_IN);
   38a68:	e5845028 	str	r5, [r4, #40]	; 0x28
    lowlev_cycleDelay(CYCLES_DELAY_FOR_MREQ_FF_RESET);
   38a6c:	ebff3da7 	bl	8110 <lowlev_cycleDelay>
    digitalWrite(BR_MREQ_BAR, 0);
   38a70:	e3a01000 	mov	r1, #0
   38a74:	e1a00001 	mov	r0, r1
   38a78:	ebfff25b 	bl	353ec <digitalWrite>
    lowlev_cycleDelay(CYCLES_DELAY_FOR_MREQ_FF_RESET);
   38a7c:	e3a00014 	mov	r0, #20
   38a80:	ebff3da2 	bl	8110 <lowlev_cycleDelay>
    digitalWrite(BR_MREQ_BAR, 1);
   38a84:	e3a01001 	mov	r1, #1
   38a88:	e3a00000 	mov	r0, #0
   38a8c:	ebfff256 	bl	353ec <digitalWrite>
        WR32(ARM_GPIO_GPCLR0, BR_MUX_CTRL_BIT_MASK);
   38a90:	e3a02c0e 	mov	r2, #3584	; 0xe00
    WR32(ARM_GPIO_GPSET0, 1 << BR_DATA_DIR_IN);
   38a94:	e584501c 	str	r5, [r4, #28]
        WR32(BR_PIB_GPF_REG, (RD32(BR_PIB_GPF_REG) & BR_PIB_GPF_MASK) | BR_PIB_GPF_INPUT);
   38a98:	e5943008 	ldr	r3, [r4, #8]
    digitalWrite(BR_PUSH_ADDR_BAR, 1);
   38a9c:	e3a01001 	mov	r1, #1
   38aa0:	e20334ff 	and	r3, r3, #-16777216	; 0xff000000
   38aa4:	e5843008 	str	r3, [r4, #8]
   38aa8:	e3a00003 	mov	r0, #3
        WR32(ARM_GPIO_GPCLR0, BR_MUX_CTRL_BIT_MASK);
   38aac:	e5842028 	str	r2, [r4, #40]	; 0x28
   38ab0:	ebfff24d 	bl	353ec <digitalWrite>
    uint32_t busVals = RD32(ARM_GPIO_GPLEV0);
   38ab4:	e5943034 	ldr	r3, [r4, #52]	; 0x34
    if ((busVals & BR_WAIT_BAR_MASK) == 0)
   38ab8:	e3130020 	tst	r3, #32
   38abc:	0a0000a3 	beq	38d50 <BusAccess::controlRelease()+0x31c>
    for (int i = 0; i < _busSocketCount; i++)
   38ac0:	e59f3384 	ldr	r3, [pc, #900]	; 38e4c <BusAccess::controlRelease()+0x418>
   38ac4:	e5932000 	ldr	r2, [r3]
   38ac8:	e3520000 	cmp	r2, #0
   38acc:	da0000b1 	ble	38d98 <BusAccess::controlRelease()+0x364>
        if (_busSockets[i].enabled)
   38ad0:	e59f3378 	ldr	r3, [pc, #888]	; 38e50 <BusAccess::controlRelease()+0x41c>
   38ad4:	e5d31000 	ldrb	r1, [r3]
   38ad8:	e3510000 	cmp	r1, #0
   38adc:	0a000020 	beq	38b64 <BusAccess::controlRelease()+0x130>
    for (int i = 0; i < _busSocketCount; i++)
   38ae0:	e3520001 	cmp	r2, #1
            memWait = memWait || _busSockets[i].waitOnMemory;
   38ae4:	e5d3100c 	ldrb	r1, [r3, #12]
            ioWait = ioWait || _busSockets[i].waitOnIO;
   38ae8:	e5d3000d 	ldrb	r0, [r3, #13]
    for (int i = 0; i < _busSocketCount; i++)
   38aec:	0a000066 	beq	38c8c <BusAccess::controlRelease()+0x258>
        if (_busSockets[i].enabled)
   38af0:	e5d3c028 	ldrb	ip, [r3, #40]	; 0x28
   38af4:	e35c0000 	cmp	ip, #0
   38af8:	0a000004 	beq	38b10 <BusAccess::controlRelease()+0xdc>
            memWait = memWait || _busSockets[i].waitOnMemory;
   38afc:	e3510000 	cmp	r1, #0
   38b00:	0a0000cd 	beq	38e3c <BusAccess::controlRelease()+0x408>
            ioWait = ioWait || _busSockets[i].waitOnIO;
   38b04:	e3500000 	cmp	r0, #0
   38b08:	1a00001f 	bne	38b8c <BusAccess::controlRelease()+0x158>
   38b0c:	e5d30035 	ldrb	r0, [r3, #53]	; 0x35
    for (int i = 0; i < _busSocketCount; i++)
   38b10:	e3520002 	cmp	r2, #2
   38b14:	0a00005c 	beq	38c8c <BusAccess::controlRelease()+0x258>
        if (_busSockets[i].enabled)
   38b18:	e5d3c050 	ldrb	ip, [r3, #80]	; 0x50
   38b1c:	e35c0000 	cmp	ip, #0
   38b20:	0a00001e 	beq	38ba0 <BusAccess::controlRelease()+0x16c>
            memWait = memWait || _busSockets[i].waitOnMemory;
   38b24:	e3510000 	cmp	r1, #0
   38b28:	05d3105c 	ldrbeq	r1, [r3, #92]	; 0x5c
            ioWait = ioWait || _busSockets[i].waitOnIO;
   38b2c:	e3500000 	cmp	r0, #0
   38b30:	0a0000a2 	beq	38dc0 <BusAccess::controlRelease()+0x38c>
    for (int i = 0; i < _busSocketCount; i++)
   38b34:	e3520003 	cmp	r2, #3
   38b38:	1a00001a 	bne	38ba8 <BusAccess::controlRelease()+0x174>
    _waitOnIO = ioWait;
   38b3c:	e3a0c001 	mov	ip, #1
    uint32_t pwmCtrl = RD32(ARM_PWM_CTL);
   38b40:	e59f330c 	ldr	r3, [pc, #780]	; 38e54 <BusAccess::controlRelease()+0x420>
    _waitOnIO = ioWait;
   38b44:	e59f030c 	ldr	r0, [pc, #780]	; 38e58 <BusAccess::controlRelease()+0x424>
    uint32_t pwmCtrl = RD32(ARM_PWM_CTL);
   38b48:	e5933000 	ldr	r3, [r3]
    _waitOnMemory = memWait;
   38b4c:	e59f2308 	ldr	r2, [pc, #776]	; 38e5c <BusAccess::controlRelease()+0x428>
    pwmCtrl &= ~(ARM_PWM_CTL_SBIT1 | ARM_PWM_CTL_SBIT2);
   38b50:	e3c33b02 	bic	r3, r3, #2048	; 0x800
    _waitOnIO = ioWait;
   38b54:	e5c0c000 	strb	ip, [r0]
    _waitOnMemory = memWait;
   38b58:	e5c21000 	strb	r1, [r2]
    pwmCtrl &= ~(ARM_PWM_CTL_SBIT1 | ARM_PWM_CTL_SBIT2);
   38b5c:	e3c33008 	bic	r3, r3, #8
   38b60:	ea000053 	b	38cb4 <BusAccess::controlRelease()+0x280>
    for (int i = 0; i < _busSocketCount; i++)
   38b64:	e3520001 	cmp	r2, #1
   38b68:	0a0000a7 	beq	38e0c <BusAccess::controlRelease()+0x3d8>
        if (_busSockets[i].enabled)
   38b6c:	e5d30028 	ldrb	r0, [r3, #40]	; 0x28
   38b70:	e3500000 	cmp	r0, #0
    bool memWait = false;
   38b74:	01a01000 	moveq	r1, r0
        if (_busSockets[i].enabled)
   38b78:	0affffe4 	beq	38b10 <BusAccess::controlRelease()+0xdc>
            memWait = memWait || _busSockets[i].waitOnMemory;
   38b7c:	e1a00001 	mov	r0, r1
            ioWait = ioWait || _busSockets[i].waitOnIO;
   38b80:	e3500000 	cmp	r0, #0
            memWait = memWait || _busSockets[i].waitOnMemory;
   38b84:	e5d31034 	ldrb	r1, [r3, #52]	; 0x34
            ioWait = ioWait || _busSockets[i].waitOnIO;
   38b88:	0affffdf 	beq	38b0c <BusAccess::controlRelease()+0xd8>
    for (int i = 0; i < _busSocketCount; i++)
   38b8c:	e3520002 	cmp	r2, #2
   38b90:	0affffe9 	beq	38b3c <BusAccess::controlRelease()+0x108>
        if (_busSockets[i].enabled)
   38b94:	e5d3c050 	ldrb	ip, [r3, #80]	; 0x50
   38b98:	e35c0000 	cmp	ip, #0
   38b9c:	1affffe0 	bne	38b24 <BusAccess::controlRelease()+0xf0>
    for (int i = 0; i < _busSocketCount; i++)
   38ba0:	e3520003 	cmp	r2, #3
   38ba4:	0a000038 	beq	38c8c <BusAccess::controlRelease()+0x258>
        if (_busSockets[i].enabled)
   38ba8:	e5d3c078 	ldrb	ip, [r3, #120]	; 0x78
   38bac:	e35c0000 	cmp	ip, #0
   38bb0:	0a00005a 	beq	38d20 <BusAccess::controlRelease()+0x2ec>
            memWait = memWait || _busSockets[i].waitOnMemory;
   38bb4:	e3510000 	cmp	r1, #0
   38bb8:	05d31084 	ldrbeq	r1, [r3, #132]	; 0x84
            ioWait = ioWait || _busSockets[i].waitOnIO;
   38bbc:	e3500000 	cmp	r0, #0
   38bc0:	0a000055 	beq	38d1c <BusAccess::controlRelease()+0x2e8>
    for (int i = 0; i < _busSocketCount; i++)
   38bc4:	e3520004 	cmp	r2, #4
   38bc8:	0affffdb 	beq	38b3c <BusAccess::controlRelease()+0x108>
        if (_busSockets[i].enabled)
   38bcc:	e5d3c0a0 	ldrb	ip, [r3, #160]	; 0xa0
   38bd0:	e35c0000 	cmp	ip, #0
   38bd4:	1a000056 	bne	38d34 <BusAccess::controlRelease()+0x300>
    for (int i = 0; i < _busSocketCount; i++)
   38bd8:	e3520005 	cmp	r2, #5
   38bdc:	0a00002a 	beq	38c8c <BusAccess::controlRelease()+0x258>
        if (_busSockets[i].enabled)
   38be0:	e5d3c0c8 	ldrb	ip, [r3, #200]	; 0xc8
   38be4:	e35c0000 	cmp	ip, #0
   38be8:	0a000004 	beq	38c00 <BusAccess::controlRelease()+0x1cc>
            memWait = memWait || _busSockets[i].waitOnMemory;
   38bec:	e3510000 	cmp	r1, #0
   38bf0:	05d310d4 	ldrbeq	r1, [r3, #212]	; 0xd4
            ioWait = ioWait || _busSockets[i].waitOnIO;
   38bf4:	e3500000 	cmp	r0, #0
   38bf8:	1a00007a 	bne	38de8 <BusAccess::controlRelease()+0x3b4>
   38bfc:	e5d300d5 	ldrb	r0, [r3, #213]	; 0xd5
    for (int i = 0; i < _busSocketCount; i++)
   38c00:	e3520006 	cmp	r2, #6
   38c04:	0a000020 	beq	38c8c <BusAccess::controlRelease()+0x258>
        if (_busSockets[i].enabled)
   38c08:	e5d3c0f0 	ldrb	ip, [r3, #240]	; 0xf0
   38c0c:	e35c0000 	cmp	ip, #0
   38c10:	0a000004 	beq	38c28 <BusAccess::controlRelease()+0x1f4>
            memWait = memWait || _busSockets[i].waitOnMemory;
   38c14:	e3510000 	cmp	r1, #0
   38c18:	05d310fc 	ldrbeq	r1, [r3, #252]	; 0xfc
            ioWait = ioWait || _busSockets[i].waitOnIO;
   38c1c:	e3500000 	cmp	r0, #0
   38c20:	1a000073 	bne	38df4 <BusAccess::controlRelease()+0x3c0>
   38c24:	e5d300fd 	ldrb	r0, [r3, #253]	; 0xfd
    for (int i = 0; i < _busSocketCount; i++)
   38c28:	e3520007 	cmp	r2, #7
   38c2c:	0a000016 	beq	38c8c <BusAccess::controlRelease()+0x258>
        if (_busSockets[i].enabled)
   38c30:	e5d3c118 	ldrb	ip, [r3, #280]	; 0x118
   38c34:	e35c0000 	cmp	ip, #0
   38c38:	0a000004 	beq	38c50 <BusAccess::controlRelease()+0x21c>
            memWait = memWait || _busSockets[i].waitOnMemory;
   38c3c:	e3510000 	cmp	r1, #0
   38c40:	05d31124 	ldrbeq	r1, [r3, #292]	; 0x124
            ioWait = ioWait || _busSockets[i].waitOnIO;
   38c44:	e3500000 	cmp	r0, #0
   38c48:	1a00006c 	bne	38e00 <BusAccess::controlRelease()+0x3cc>
   38c4c:	e5d30125 	ldrb	r0, [r3, #293]	; 0x125
    for (int i = 0; i < _busSocketCount; i++)
   38c50:	e3520008 	cmp	r2, #8
   38c54:	0a00000c 	beq	38c8c <BusAccess::controlRelease()+0x258>
        if (_busSockets[i].enabled)
   38c58:	e5d3c140 	ldrb	ip, [r3, #320]	; 0x140
   38c5c:	e35c0000 	cmp	ip, #0
   38c60:	1a000058 	bne	38dc8 <BusAccess::controlRelease()+0x394>
    for (int i = 0; i < _busSocketCount; i++)
   38c64:	e3520009 	cmp	r2, #9
   38c68:	0a000007 	beq	38c8c <BusAccess::controlRelease()+0x258>
        if (_busSockets[i].enabled)
   38c6c:	e5d32168 	ldrb	r2, [r3, #360]	; 0x168
   38c70:	e3520000 	cmp	r2, #0
   38c74:	0a000004 	beq	38c8c <BusAccess::controlRelease()+0x258>
            memWait = memWait || _busSockets[i].waitOnMemory;
   38c78:	e3510000 	cmp	r1, #0
   38c7c:	05d31174 	ldrbeq	r1, [r3, #372]	; 0x174
            ioWait = ioWait || _busSockets[i].waitOnIO;
   38c80:	e3500000 	cmp	r0, #0
   38c84:	1affffac 	bne	38b3c <BusAccess::controlRelease()+0x108>
   38c88:	e5d30175 	ldrb	r0, [r3, #373]	; 0x175
    uint32_t pwmCtrl = RD32(ARM_PWM_CTL);
   38c8c:	e59f31c0 	ldr	r3, [pc, #448]	; 38e54 <BusAccess::controlRelease()+0x420>
    _waitOnMemory = memWait;
   38c90:	e59fc1c4 	ldr	ip, [pc, #452]	; 38e5c <BusAccess::controlRelease()+0x428>
    uint32_t pwmCtrl = RD32(ARM_PWM_CTL);
   38c94:	e5933000 	ldr	r3, [r3]
    _waitOnIO = ioWait;
   38c98:	e59f21b8 	ldr	r2, [pc, #440]	; 38e58 <BusAccess::controlRelease()+0x424>
    pwmCtrl &= ~(ARM_PWM_CTL_SBIT1 | ARM_PWM_CTL_SBIT2);
   38c9c:	e3c33b02 	bic	r3, r3, #2048	; 0x800
    if (_waitOnIO)
   38ca0:	e3500000 	cmp	r0, #0
    _waitOnMemory = memWait;
   38ca4:	e5cc1000 	strb	r1, [ip]
    _waitOnIO = ioWait;
   38ca8:	e5c20000 	strb	r0, [r2]
    pwmCtrl &= ~(ARM_PWM_CTL_SBIT1 | ARM_PWM_CTL_SBIT2);
   38cac:	e3c33008 	bic	r3, r3, #8
    if (_waitOnIO)
   38cb0:	0a000000 	beq	38cb8 <BusAccess::controlRelease()+0x284>
        pwmCtrl |= ARM_PWM_CTL_SBIT1;
   38cb4:	e3833008 	orr	r3, r3, #8
    if (_waitOnMemory)
   38cb8:	e3510000 	cmp	r1, #0
        pwmCtrl |= ARM_PWM_CTL_SBIT2;
   38cbc:	13833b02 	orrne	r3, r3, #2048	; 0x800
    WR32(ARM_PWM_CTL, pwmCtrl);
   38cc0:	e59f218c 	ldr	r2, [pc, #396]	; 38e54 <BusAccess::controlRelease()+0x420>
   38cc4:	e5823000 	str	r3, [r2]
    busActionCheck();
   38cc8:	ebfff9fd 	bl	374c4 <BusAccess::busActionCheck()>
    busActionHandleStart();
   38ccc:	ebfffa39 	bl	375b8 <BusAccess::busActionHandleStart()>
    digitalWrite(BR_BUSRQ_BAR, 1);
   38cd0:	e3a01001 	mov	r1, #1
   38cd4:	e3a00013 	mov	r0, #19
   38cd8:	ebfff1c3 	bl	353ec <digitalWrite>
    pinMode(BR_WR_BAR, INPUT);
   38cdc:	e3a01000 	mov	r1, #0
   38ce0:	e3a00011 	mov	r0, #17
   38ce4:	ebfff17e 	bl	352e4 <pinMode>
    pinMode(BR_RD_BAR, INPUT);
   38ce8:	e3a01000 	mov	r1, #0
   38cec:	e3a00012 	mov	r0, #18
   38cf0:	ebfff17b 	bl	352e4 <pinMode>
    pinMode(BR_MREQ_BAR, INPUT);
   38cf4:	e3a01000 	mov	r1, #0
   38cf8:	e1a00001 	mov	r0, r1
   38cfc:	ebfff178 	bl	352e4 <pinMode>
    pinMode(BR_IORQ_BAR, INPUT);
   38d00:	e3a01000 	mov	r1, #0
   38d04:	e3a00001 	mov	r0, #1
   38d08:	ebfff175 	bl	352e4 <pinMode>
    _busIsUnderControl = false;    
   38d0c:	e3a02000 	mov	r2, #0
   38d10:	e59f3148 	ldr	r3, [pc, #328]	; 38e60 <BusAccess::controlRelease()+0x42c>
   38d14:	e5c32000 	strb	r2, [r3]
}
   38d18:	e8bd8070 	pop	{r4, r5, r6, pc}
            ioWait = ioWait || _busSockets[i].waitOnIO;
   38d1c:	e5d30085 	ldrb	r0, [r3, #133]	; 0x85
    for (int i = 0; i < _busSocketCount; i++)
   38d20:	e3520004 	cmp	r2, #4
   38d24:	0affffd8 	beq	38c8c <BusAccess::controlRelease()+0x258>
        if (_busSockets[i].enabled)
   38d28:	e5d3c0a0 	ldrb	ip, [r3, #160]	; 0xa0
   38d2c:	e35c0000 	cmp	ip, #0
   38d30:	0affffa8 	beq	38bd8 <BusAccess::controlRelease()+0x1a4>
            memWait = memWait || _busSockets[i].waitOnMemory;
   38d34:	e3510000 	cmp	r1, #0
   38d38:	05d310ac 	ldrbeq	r1, [r3, #172]	; 0xac
            ioWait = ioWait || _busSockets[i].waitOnIO;
   38d3c:	e3500000 	cmp	r0, #0
   38d40:	0a000026 	beq	38de0 <BusAccess::controlRelease()+0x3ac>
    for (int i = 0; i < _busSocketCount; i++)
   38d44:	e3520005 	cmp	r2, #5
   38d48:	1affffa4 	bne	38be0 <BusAccess::controlRelease()+0x1ac>
   38d4c:	eaffff7a 	b	38b3c <BusAccess::controlRelease()+0x108>
    if ((RD32(ARM_PWM_STA) & 1) == 0)
   38d50:	e59f30fc 	ldr	r3, [pc, #252]	; 38e54 <BusAccess::controlRelease()+0x420>
    _waitAsserted = false;
   38d54:	e3a01000 	mov	r1, #0
    if ((RD32(ARM_PWM_STA) & 1) == 0)
   38d58:	e5932004 	ldr	r2, [r3, #4]
   38d5c:	e3120001 	tst	r2, #1
        WR32(ARM_PWM_FIF1, 0x00ffffff);
   38d60:	03e024ff 	mvneq	r2, #-16777216	; 0xff000000
   38d64:	05832018 	streq	r2, [r3, #24]
        WR32(ARM_PWM_FIF1, 0x00ffffff);
   38d68:	05832018 	streq	r2, [r3, #24]
    _waitAsserted = false;
   38d6c:	e59f20f0 	ldr	r2, [pc, #240]	; 38e64 <BusAccess::controlRelease()+0x430>
    if (_targetReadInProgress)
   38d70:	e59f30f0 	ldr	r3, [pc, #240]	; 38e68 <BusAccess::controlRelease()+0x434>
    _waitAsserted = false;
   38d74:	e5c21000 	strb	r1, [r2]
    if (_targetReadInProgress)
   38d78:	e5d33000 	ldrb	r3, [r3]
   38d7c:	e1530001 	cmp	r3, r1
   38d80:	0affff4e 	beq	38ac0 <BusAccess::controlRelease()+0x8c>
        waitHandleReadRelease();
   38d84:	ebfffb96 	bl	37be4 <BusAccess::waitHandleReadRelease()>
    for (int i = 0; i < _busSocketCount; i++)
   38d88:	e59f30bc 	ldr	r3, [pc, #188]	; 38e4c <BusAccess::controlRelease()+0x418>
   38d8c:	e5932000 	ldr	r2, [r3]
   38d90:	e3520000 	cmp	r2, #0
   38d94:	caffff4d 	bgt	38ad0 <BusAccess::controlRelease()+0x9c>
    _waitOnMemory = memWait;
   38d98:	e3a03000 	mov	r3, #0
   38d9c:	e59f00b8 	ldr	r0, [pc, #184]	; 38e5c <BusAccess::controlRelease()+0x428>
    _waitOnIO = ioWait;
   38da0:	e59f10b0 	ldr	r1, [pc, #176]	; 38e58 <BusAccess::controlRelease()+0x424>
    uint32_t pwmCtrl = RD32(ARM_PWM_CTL);
   38da4:	e59f20a8 	ldr	r2, [pc, #168]	; 38e54 <BusAccess::controlRelease()+0x420>
    _waitOnMemory = memWait;
   38da8:	e5c03000 	strb	r3, [r0]
    _waitOnIO = ioWait;
   38dac:	e5c13000 	strb	r3, [r1]
    uint32_t pwmCtrl = RD32(ARM_PWM_CTL);
   38db0:	e5923000 	ldr	r3, [r2]
    pwmCtrl &= ~(ARM_PWM_CTL_SBIT1 | ARM_PWM_CTL_SBIT2);
   38db4:	e3c33b02 	bic	r3, r3, #2048	; 0x800
   38db8:	e3c33008 	bic	r3, r3, #8
   38dbc:	eaffffbf 	b	38cc0 <BusAccess::controlRelease()+0x28c>
            ioWait = ioWait || _busSockets[i].waitOnIO;
   38dc0:	e5d3005d 	ldrb	r0, [r3, #93]	; 0x5d
   38dc4:	eaffff75 	b	38ba0 <BusAccess::controlRelease()+0x16c>
            memWait = memWait || _busSockets[i].waitOnMemory;
   38dc8:	e3510000 	cmp	r1, #0
   38dcc:	05d3114c 	ldrbeq	r1, [r3, #332]	; 0x14c
            ioWait = ioWait || _busSockets[i].waitOnIO;
   38dd0:	e3500000 	cmp	r0, #0
   38dd4:	1a000015 	bne	38e30 <BusAccess::controlRelease()+0x3fc>
   38dd8:	e5d3014d 	ldrb	r0, [r3, #333]	; 0x14d
   38ddc:	eaffffa0 	b	38c64 <BusAccess::controlRelease()+0x230>
   38de0:	e5d300ad 	ldrb	r0, [r3, #173]	; 0xad
   38de4:	eaffff7b 	b	38bd8 <BusAccess::controlRelease()+0x1a4>
    for (int i = 0; i < _busSocketCount; i++)
   38de8:	e3520006 	cmp	r2, #6
   38dec:	1affff85 	bne	38c08 <BusAccess::controlRelease()+0x1d4>
   38df0:	eaffff51 	b	38b3c <BusAccess::controlRelease()+0x108>
   38df4:	e3520007 	cmp	r2, #7
   38df8:	1affff8c 	bne	38c30 <BusAccess::controlRelease()+0x1fc>
   38dfc:	eaffff4e 	b	38b3c <BusAccess::controlRelease()+0x108>
   38e00:	e3520008 	cmp	r2, #8
   38e04:	1affff93 	bne	38c58 <BusAccess::controlRelease()+0x224>
   38e08:	eaffff4b 	b	38b3c <BusAccess::controlRelease()+0x108>
    uint32_t pwmCtrl = RD32(ARM_PWM_CTL);
   38e0c:	e59f3040 	ldr	r3, [pc, #64]	; 38e54 <BusAccess::controlRelease()+0x420>
    _waitOnMemory = memWait;
   38e10:	e59f0044 	ldr	r0, [pc, #68]	; 38e5c <BusAccess::controlRelease()+0x428>
    uint32_t pwmCtrl = RD32(ARM_PWM_CTL);
   38e14:	e5933000 	ldr	r3, [r3]
    _waitOnIO = ioWait;
   38e18:	e59f2038 	ldr	r2, [pc, #56]	; 38e58 <BusAccess::controlRelease()+0x424>
    pwmCtrl &= ~(ARM_PWM_CTL_SBIT1 | ARM_PWM_CTL_SBIT2);
   38e1c:	e3c33b02 	bic	r3, r3, #2048	; 0x800
    _waitOnMemory = memWait;
   38e20:	e5c01000 	strb	r1, [r0]
    _waitOnIO = ioWait;
   38e24:	e5c21000 	strb	r1, [r2]
    pwmCtrl &= ~(ARM_PWM_CTL_SBIT1 | ARM_PWM_CTL_SBIT2);
   38e28:	e3c33008 	bic	r3, r3, #8
   38e2c:	eaffffa3 	b	38cc0 <BusAccess::controlRelease()+0x28c>
    for (int i = 0; i < _busSocketCount; i++)
   38e30:	e3520009 	cmp	r2, #9
   38e34:	1affff8c 	bne	38c6c <BusAccess::controlRelease()+0x238>
   38e38:	eaffff3f 	b	38b3c <BusAccess::controlRelease()+0x108>
            ioWait = ioWait || _busSockets[i].waitOnIO;
   38e3c:	e1a01000 	mov	r1, r0
   38e40:	eaffff4d 	b	38b7c <BusAccess::controlRelease()+0x148>
   38e44:	20200000 	.word	0x20200000
   38e48:	00249249 	.word	0x00249249
   38e4c:	0008c424 	.word	0x0008c424
   38e50:	0008c428 	.word	0x0008c428
   38e54:	2020c000 	.word	0x2020c000
   38e58:	0008c8ad 	.word	0x0008c8ad
   38e5c:	0008c5b8 	.word	0x0008c5b8
   38e60:	0008c8b0 	.word	0x0008c8b0
   38e64:	0008c420 	.word	0x0008c420
   38e68:	0008c5d1 	.word	0x0008c5d1

00038e6c <BusAccess::controlRequestAndTake()>:
    WR32(ARM_GPIO_GPSET0, 1 << BR_DATA_DIR_IN);
   38e6c:	e3a02040 	mov	r2, #64	; 0x40
{
   38e70:	e92d4070 	push	{r4, r5, r6, lr}
        WR32(BR_PIB_GPF_REG, (RD32(BR_PIB_GPF_REG) & BR_PIB_GPF_MASK) | BR_PIB_GPF_INPUT);
   38e74:	e59f5064 	ldr	r5, [pc, #100]	; 38ee0 <BusAccess::controlRequestAndTake()+0x74>
    digitalWrite(BR_BUSRQ_BAR, 0);
   38e78:	e3a01000 	mov	r1, #0
   38e7c:	e5953008 	ldr	r3, [r5, #8]
   38e80:	e3a00013 	mov	r0, #19
   38e84:	e20334ff 	and	r3, r3, #-16777216	; 0xff000000
   38e88:	e5853008 	str	r3, [r5, #8]
    WR32(ARM_GPIO_GPSET0, 1 << BR_DATA_DIR_IN);
   38e8c:	e585201c 	str	r2, [r5, #28]
    digitalWrite(BR_BUSRQ_BAR, 0);
   38e90:	ebfff155 	bl	353ec <digitalWrite>
   38e94:	e3a04064 	mov	r4, #100	; 0x64
   38e98:	ea000003 	b	38eac <BusAccess::controlRequestAndTake()+0x40>
        microsDelay(1);
   38e9c:	e3a00001 	mov	r0, #1
   38ea0:	ebfff640 	bl	367a8 <microsDelay>
    for (int i = 0; i < BusSocketInfo::MAX_WAIT_FOR_BUSACK_US; i++)
   38ea4:	e2544001 	subs	r4, r4, #1
   38ea8:	0a000002 	beq	38eb8 <BusAccess::controlRequestAndTake()+0x4c>
    return (RD32(ARM_GPIO_GPLEV0) & BR_BUSACK_BAR_MASK) == 0;
   38eac:	e5953034 	ldr	r3, [r5, #52]	; 0x34
        if (controlBusAcknowledged())
   38eb0:	e3130004 	tst	r3, #4
   38eb4:	1afffff8 	bne	38e9c <BusAccess::controlRequestAndTake()+0x30>
    return (RD32(ARM_GPIO_GPLEV0) & BR_BUSACK_BAR_MASK) == 0;
   38eb8:	e59f3020 	ldr	r3, [pc, #32]	; 38ee0 <BusAccess::controlRequestAndTake()+0x74>
   38ebc:	e5930034 	ldr	r0, [r3, #52]	; 0x34
    if (!controlBusAcknowledged()) 
   38ec0:	e2104004 	ands	r4, r0, #4
   38ec4:	1a000002 	bne	38ed4 <BusAccess::controlRequestAndTake()+0x68>
    controlTake();
   38ec8:	ebfffe9f 	bl	3894c <BusAccess::controlTake()>
    return BR_OK;
   38ecc:	e1a00004 	mov	r0, r4
}
   38ed0:	e8bd8070 	pop	{r4, r5, r6, pc}
        controlRelease();
   38ed4:	ebfffed6 	bl	38a34 <BusAccess::controlRelease()>
        return BR_NO_BUS_ACK;
   38ed8:	e3a00002 	mov	r0, #2
   38edc:	e8bd8070 	pop	{r4, r5, r6, pc}
   38ee0:	20200000 	.word	0x20200000

00038ee4 <BusAccess::addrLowSet(unsigned long)>:
{
   38ee4:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
        WR32(ARM_GPIO_GPSET0, 1 << BR_LADDR_CK);
   38ee8:	e3a07801 	mov	r7, #65536	; 0x10000
{
   38eec:	e1a06000 	mov	r6, r0
    lowlev_cycleDelay(CYCLES_DELAY_FOR_CLEAR_LOW_ADDR);
   38ef0:	e3a00005 	mov	r0, #5
   38ef4:	ebff3c85 	bl	8110 <lowlev_cycleDelay>
        WR32(ARM_GPIO_GPCLR0, BR_MUX_CTRL_BIT_MASK);
   38ef8:	e59f9054 	ldr	r9, [pc, #84]	; 38f54 <BusAccess::addrLowSet(unsigned long)+0x70>
   38efc:	e3a0ac0e 	mov	sl, #3584	; 0xe00
        WR32(ARM_GPIO_GPSET0, muxVal << BR_MUX_LOW_BIT_POS);
   38f00:	e3a03b02 	mov	r3, #2048	; 0x800
        WR32(ARM_GPIO_GPSET0, 1 << BR_LADDR_CK);
   38f04:	e1a08007 	mov	r8, r7
   38f08:	e1a05009 	mov	r5, r9
    for (uint32_t i = 0; i < (lowAddrByte & 0xff) + 1; i++) {
   38f0c:	e3a04000 	mov	r4, #0
        WR32(ARM_GPIO_GPCLR0, BR_MUX_CTRL_BIT_MASK);
   38f10:	e589a028 	str	sl, [r9, #40]	; 0x28
    lowlev_cycleDelay(CYCLES_DELAY_FOR_CLEAR_LOW_ADDR);
   38f14:	e3a00005 	mov	r0, #5
        WR32(ARM_GPIO_GPSET0, muxVal << BR_MUX_LOW_BIT_POS);
   38f18:	e589301c 	str	r3, [r9, #28]
    for (uint32_t i = 0; i < (lowAddrByte & 0xff) + 1; i++) {
   38f1c:	e6ef6076 	uxtb	r6, r6
    lowlev_cycleDelay(CYCLES_DELAY_FOR_CLEAR_LOW_ADDR);
   38f20:	ebff3c7a 	bl	8110 <lowlev_cycleDelay>
    for (uint32_t i = 0; i < (lowAddrByte & 0xff) + 1; i++) {
   38f24:	e2866001 	add	r6, r6, #1
        WR32(ARM_GPIO_GPCLR0, BR_MUX_CTRL_BIT_MASK);
   38f28:	e589a028 	str	sl, [r9, #40]	; 0x28
        lowlev_cycleDelay(CYCLES_DELAY_FOR_LOW_ADDR_SET);
   38f2c:	e3a00005 	mov	r0, #5
        WR32(ARM_GPIO_GPSET0, 1 << BR_LADDR_CK);
   38f30:	e585801c 	str	r8, [r5, #28]
        lowlev_cycleDelay(CYCLES_DELAY_FOR_LOW_ADDR_SET);
   38f34:	ebff3c75 	bl	8110 <lowlev_cycleDelay>
    for (uint32_t i = 0; i < (lowAddrByte & 0xff) + 1; i++) {
   38f38:	e2844001 	add	r4, r4, #1
        WR32(ARM_GPIO_GPCLR0, 1 << BR_LADDR_CK);
   38f3c:	e5857028 	str	r7, [r5, #40]	; 0x28
        lowlev_cycleDelay(CYCLES_DELAY_FOR_LOW_ADDR_SET);
   38f40:	e3a00005 	mov	r0, #5
   38f44:	ebff3c71 	bl	8110 <lowlev_cycleDelay>
    for (uint32_t i = 0; i < (lowAddrByte & 0xff) + 1; i++) {
   38f48:	e1540006 	cmp	r4, r6
   38f4c:	1afffff6 	bne	38f2c <BusAccess::addrLowSet(unsigned long)+0x48>
   38f50:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   38f54:	20200000 	.word	0x20200000

00038f58 <BusAccess::addrLowInc()>:
{
   38f58:	e92d4070 	push	{r4, r5, r6, lr}
    WR32(ARM_GPIO_GPSET0, 1 << BR_LADDR_CK);
   38f5c:	e3a05801 	mov	r5, #65536	; 0x10000
   38f60:	e59f4010 	ldr	r4, [pc, #16]	; 38f78 <BusAccess::addrLowInc()+0x20>
    lowlev_cycleDelay(CYCLES_DELAY_FOR_LOW_ADDR_SET);
   38f64:	e3a00005 	mov	r0, #5
    WR32(ARM_GPIO_GPSET0, 1 << BR_LADDR_CK);
   38f68:	e584501c 	str	r5, [r4, #28]
    lowlev_cycleDelay(CYCLES_DELAY_FOR_LOW_ADDR_SET);
   38f6c:	ebff3c67 	bl	8110 <lowlev_cycleDelay>
    WR32(ARM_GPIO_GPCLR0, 1 << BR_LADDR_CK);
   38f70:	e5845028 	str	r5, [r4, #40]	; 0x28
}
   38f74:	e8bd8070 	pop	{r4, r5, r6, pc}
   38f78:	20200000 	.word	0x20200000

00038f7c <BusAccess::addrHighSet(unsigned long)>:
{
   38f7c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   38f80:	e1a05000 	mov	r5, r0
   38f84:	e3a06009 	mov	r6, #9
        WR32(ARM_GPIO_GPCLR0, BR_MUX_CTRL_BIT_MASK);
   38f88:	e3a07c0e 	mov	r7, #3584	; 0xe00
   38f8c:	e59f404c 	ldr	r4, [pc, #76]	; 38fe0 <BusAccess::addrHighSet(unsigned long)+0x64>
        WR32(ARM_GPIO_GPSET0, 1 << BR_HADDR_CK);
   38f90:	e3a08080 	mov	r8, #128	; 0x80
        if (highAddrByte & 0x80)
   38f94:	e2153080 	ands	r3, r5, #128	; 0x80
   38f98:	e5847028 	str	r7, [r4, #40]	; 0x28
        lowlev_cycleDelay(CYCLES_DELAY_FOR_HIGH_ADDR_SET);
   38f9c:	e3a00014 	mov	r0, #20
        WR32(ARM_GPIO_GPSET0, muxVal << BR_MUX_LOW_BIT_POS);
   38fa0:	1584701c 	strne	r7, [r4, #28]
   38fa4:	0584301c 	streq	r3, [r4, #28]
   38fa8:	ebff3c58 	bl	8110 <lowlev_cycleDelay>
        WR32(ARM_GPIO_GPSET0, 1 << BR_HADDR_CK);
   38fac:	e584801c 	str	r8, [r4, #28]
        lowlev_cycleDelay(CYCLES_DELAY_FOR_HIGH_ADDR_SET);
   38fb0:	e3a00014 	mov	r0, #20
   38fb4:	ebff3c55 	bl	8110 <lowlev_cycleDelay>
    for (uint32_t i = 0; i < 9; i++) {
   38fb8:	e2566001 	subs	r6, r6, #1
        highAddrByte = highAddrByte << 1;
   38fbc:	e1a05085 	lsl	r5, r5, #1
        WR32(ARM_GPIO_GPCLR0, 1 << BR_HADDR_CK);
   38fc0:	e5848028 	str	r8, [r4, #40]	; 0x28
    for (uint32_t i = 0; i < 9; i++) {
   38fc4:	1afffff1 	bne	38f90 <BusAccess::addrHighSet(unsigned long)+0x14>
    lowlev_cycleDelay(CYCLES_DELAY_FOR_HIGH_ADDR_SET);
   38fc8:	e3a00014 	mov	r0, #20
   38fcc:	ebff3c4f 	bl	8110 <lowlev_cycleDelay>
        WR32(ARM_GPIO_GPCLR0, BR_MUX_CTRL_BIT_MASK);
   38fd0:	e3a02c0e 	mov	r2, #3584	; 0xe00
   38fd4:	e59f3004 	ldr	r3, [pc, #4]	; 38fe0 <BusAccess::addrHighSet(unsigned long)+0x64>
   38fd8:	e5832028 	str	r2, [r3, #40]	; 0x28
}
   38fdc:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   38fe0:	20200000 	.word	0x20200000

00038fe4 <BusAccess::addrSet(unsigned int)>:
{
   38fe4:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   38fe8:	e1a09000 	mov	r9, r0
    addrHighSet(addr >> 8);
   38fec:	e3a06009 	mov	r6, #9
        WR32(ARM_GPIO_GPCLR0, BR_MUX_CTRL_BIT_MASK);
   38ff0:	e3a07c0e 	mov	r7, #3584	; 0xe00
   38ff4:	e59f50a8 	ldr	r5, [pc, #168]	; 390a4 <BusAccess::addrSet(unsigned int)+0xc0>
   38ff8:	e1a04420 	lsr	r4, r0, #8
        WR32(ARM_GPIO_GPSET0, 1 << BR_HADDR_CK);
   38ffc:	e3a08080 	mov	r8, #128	; 0x80
        if (highAddrByte & 0x80)
   39000:	e2143080 	ands	r3, r4, #128	; 0x80
   39004:	e5857028 	str	r7, [r5, #40]	; 0x28
        lowlev_cycleDelay(CYCLES_DELAY_FOR_HIGH_ADDR_SET);
   39008:	e3a00014 	mov	r0, #20
        WR32(ARM_GPIO_GPSET0, muxVal << BR_MUX_LOW_BIT_POS);
   3900c:	1585701c 	strne	r7, [r5, #28]
   39010:	0585301c 	streq	r3, [r5, #28]
   39014:	ebff3c3d 	bl	8110 <lowlev_cycleDelay>
        WR32(ARM_GPIO_GPSET0, 1 << BR_HADDR_CK);
   39018:	e585801c 	str	r8, [r5, #28]
        lowlev_cycleDelay(CYCLES_DELAY_FOR_HIGH_ADDR_SET);
   3901c:	e3a00014 	mov	r0, #20
   39020:	ebff3c3a 	bl	8110 <lowlev_cycleDelay>
    for (uint32_t i = 0; i < 9; i++) {
   39024:	e2566001 	subs	r6, r6, #1
        highAddrByte = highAddrByte << 1;
   39028:	e1a04084 	lsl	r4, r4, #1
        WR32(ARM_GPIO_GPCLR0, 1 << BR_HADDR_CK);
   3902c:	e5858028 	str	r8, [r5, #40]	; 0x28
    for (uint32_t i = 0; i < 9; i++) {
   39030:	1afffff1 	bne	38ffc <BusAccess::addrSet(unsigned int)+0x18>
        WR32(ARM_GPIO_GPCLR0, BR_MUX_CTRL_BIT_MASK);
   39034:	e3a05c0e 	mov	r5, #3584	; 0xe00
   39038:	e59f4064 	ldr	r4, [pc, #100]	; 390a4 <BusAccess::addrSet(unsigned int)+0xc0>
    lowlev_cycleDelay(CYCLES_DELAY_FOR_HIGH_ADDR_SET);
   3903c:	e3a00014 	mov	r0, #20
   39040:	ebff3c32 	bl	8110 <lowlev_cycleDelay>
   39044:	e5845028 	str	r5, [r4, #40]	; 0x28
    lowlev_cycleDelay(CYCLES_DELAY_FOR_CLEAR_LOW_ADDR);
   39048:	e3a00005 	mov	r0, #5
   3904c:	ebff3c2f 	bl	8110 <lowlev_cycleDelay>
        WR32(ARM_GPIO_GPSET0, muxVal << BR_MUX_LOW_BIT_POS);
   39050:	e3a03b02 	mov	r3, #2048	; 0x800
        WR32(ARM_GPIO_GPSET0, 1 << BR_LADDR_CK);
   39054:	e3a06801 	mov	r6, #65536	; 0x10000
        WR32(ARM_GPIO_GPCLR0, BR_MUX_CTRL_BIT_MASK);
   39058:	e5845028 	str	r5, [r4, #40]	; 0x28
    lowlev_cycleDelay(CYCLES_DELAY_FOR_CLEAR_LOW_ADDR);
   3905c:	e3a00005 	mov	r0, #5
        WR32(ARM_GPIO_GPSET0, muxVal << BR_MUX_LOW_BIT_POS);
   39060:	e584301c 	str	r3, [r4, #28]
   39064:	ebff3c29 	bl	8110 <lowlev_cycleDelay>
        WR32(ARM_GPIO_GPSET0, 1 << BR_LADDR_CK);
   39068:	e1a07006 	mov	r7, r6
        WR32(ARM_GPIO_GPCLR0, BR_MUX_CTRL_BIT_MASK);
   3906c:	e5845028 	str	r5, [r4, #40]	; 0x28
    for (uint32_t i = 0; i < (lowAddrByte & 0xff) + 1; i++) {
   39070:	e3a05000 	mov	r5, #0
    addrLowSet(addr & 0xff);
   39074:	e6ef9079 	uxtb	r9, r9
    for (uint32_t i = 0; i < (lowAddrByte & 0xff) + 1; i++) {
   39078:	e2899001 	add	r9, r9, #1
        lowlev_cycleDelay(CYCLES_DELAY_FOR_LOW_ADDR_SET);
   3907c:	e3a00005 	mov	r0, #5
        WR32(ARM_GPIO_GPSET0, 1 << BR_LADDR_CK);
   39080:	e584701c 	str	r7, [r4, #28]
        lowlev_cycleDelay(CYCLES_DELAY_FOR_LOW_ADDR_SET);
   39084:	ebff3c21 	bl	8110 <lowlev_cycleDelay>
    for (uint32_t i = 0; i < (lowAddrByte & 0xff) + 1; i++) {
   39088:	e2855001 	add	r5, r5, #1
        WR32(ARM_GPIO_GPCLR0, 1 << BR_LADDR_CK);
   3908c:	e5846028 	str	r6, [r4, #40]	; 0x28
        lowlev_cycleDelay(CYCLES_DELAY_FOR_LOW_ADDR_SET);
   39090:	e3a00005 	mov	r0, #5
   39094:	ebff3c1d 	bl	8110 <lowlev_cycleDelay>
    for (uint32_t i = 0; i < (lowAddrByte & 0xff) + 1; i++) {
   39098:	e1550009 	cmp	r5, r9
   3909c:	1afffff6 	bne	3907c <BusAccess::addrSet(unsigned int)+0x98>
   390a0:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   390a4:	20200000 	.word	0x20200000

000390a8 <BusAccess::byteWrite(unsigned long, int)>:
{
   390a8:	e1a00a00 	lsl	r0, r0, #20
        uint32_t clrBits = (~(((uint32_t)val) << BR_DATA_BUS)) & (~BR_PIB_MASK);
   390ac:	e1e02000 	mvn	r2, r0
        WR32(ARM_GPIO_GPSET0, setBits);
   390b0:	e59f3078 	ldr	r3, [pc, #120]	; 39130 <BusAccess::byteWrite(unsigned long, int)+0x88>
        uint32_t clrBits = (~(((uint32_t)val) << BR_DATA_BUS)) & (~BR_PIB_MASK);
   390b4:	e20226ff 	and	r2, r2, #267386880	; 0xff00000
        uint32_t setBits = ((uint32_t)val) << BR_DATA_BUS;
   390b8:	e20006ff 	and	r0, r0, #267386880	; 0xff00000
    WR32(ARM_GPIO_GPCLR0, (1 << BR_DATA_DIR_IN) | BR_MUX_CTRL_BIT_MASK | (1 << (iorq ? BR_IORQ_BAR : BR_MREQ_BAR)));
   390bc:	e3510000 	cmp	r1, #0
{
   390c0:	e92d4010 	push	{r4, lr}
        WR32(ARM_GPIO_GPSET0, setBits);
   390c4:	e583001c 	str	r0, [r3, #28]
        WR32(ARM_GPIO_GPCLR0, clrBits);
   390c8:	e5832028 	str	r2, [r3, #40]	; 0x28
    WR32(ARM_GPIO_GPCLR0, (1 << BR_DATA_DIR_IN) | BR_MUX_CTRL_BIT_MASK | (1 << (iorq ? BR_IORQ_BAR : BR_MREQ_BAR)));
   390cc:	0a00000d 	beq	39108 <BusAccess::byteWrite(unsigned long, int)+0x60>
    WR32(ARM_GPIO_GPCLR0, (1 << BR_WR_BAR));
   390d0:	e3a02802 	mov	r2, #131072	; 0x20000
    WR32(ARM_GPIO_GPSET0, BR_MUX_DATA_OE_BAR_LOW << BR_MUX_LOW_BIT_POS);
   390d4:	e3a01c02 	mov	r1, #512	; 0x200
    WR32(ARM_GPIO_GPCLR0, (1 << BR_DATA_DIR_IN) | BR_MUX_CTRL_BIT_MASK | (1 << (iorq ? BR_IORQ_BAR : BR_MREQ_BAR)));
   390d8:	e59fc054 	ldr	ip, [pc, #84]	; 39134 <BusAccess::byteWrite(unsigned long, int)+0x8c>
    lowlev_cycleDelay(CYCLES_DELAY_FOR_WRITE_TO_TARGET);
   390dc:	e3a000fa 	mov	r0, #250	; 0xfa
    WR32(ARM_GPIO_GPCLR0, (1 << BR_DATA_DIR_IN) | BR_MUX_CTRL_BIT_MASK | (1 << (iorq ? BR_IORQ_BAR : BR_MREQ_BAR)));
   390e0:	e583c028 	str	ip, [r3, #40]	; 0x28
    WR32(ARM_GPIO_GPSET0, BR_MUX_DATA_OE_BAR_LOW << BR_MUX_LOW_BIT_POS);
   390e4:	e583101c 	str	r1, [r3, #28]
    WR32(ARM_GPIO_GPCLR0, (1 << BR_WR_BAR));
   390e8:	e5832028 	str	r2, [r3, #40]	; 0x28
    lowlev_cycleDelay(CYCLES_DELAY_FOR_WRITE_TO_TARGET);
   390ec:	ebff3c07 	bl	8110 <lowlev_cycleDelay>
    WR32(ARM_GPIO_GPSET0, (1 << BR_DATA_DIR_IN) | (1 << (iorq ? BR_IORQ_BAR : BR_MREQ_BAR)) | (1 << BR_WR_BAR));
   390f0:	e59f2040 	ldr	r2, [pc, #64]	; 39138 <BusAccess::byteWrite(unsigned long, int)+0x90>
        WR32(ARM_GPIO_GPCLR0, BR_MUX_CTRL_BIT_MASK);
   390f4:	e3a01c0e 	mov	r1, #3584	; 0xe00
   390f8:	e59f3030 	ldr	r3, [pc, #48]	; 39130 <BusAccess::byteWrite(unsigned long, int)+0x88>
   390fc:	e583201c 	str	r2, [r3, #28]
   39100:	e5831028 	str	r1, [r3, #40]	; 0x28
}
   39104:	e8bd8010 	pop	{r4, pc}
    WR32(ARM_GPIO_GPCLR0, (1 << BR_WR_BAR));
   39108:	e3a02802 	mov	r2, #131072	; 0x20000
    WR32(ARM_GPIO_GPSET0, BR_MUX_DATA_OE_BAR_LOW << BR_MUX_LOW_BIT_POS);
   3910c:	e3a01c02 	mov	r1, #512	; 0x200
    WR32(ARM_GPIO_GPCLR0, (1 << BR_DATA_DIR_IN) | BR_MUX_CTRL_BIT_MASK | (1 << (iorq ? BR_IORQ_BAR : BR_MREQ_BAR)));
   39110:	e59fc024 	ldr	ip, [pc, #36]	; 3913c <BusAccess::byteWrite(unsigned long, int)+0x94>
    lowlev_cycleDelay(CYCLES_DELAY_FOR_WRITE_TO_TARGET);
   39114:	e3a000fa 	mov	r0, #250	; 0xfa
    WR32(ARM_GPIO_GPCLR0, (1 << BR_DATA_DIR_IN) | BR_MUX_CTRL_BIT_MASK | (1 << (iorq ? BR_IORQ_BAR : BR_MREQ_BAR)));
   39118:	e583c028 	str	ip, [r3, #40]	; 0x28
    WR32(ARM_GPIO_GPSET0, BR_MUX_DATA_OE_BAR_LOW << BR_MUX_LOW_BIT_POS);
   3911c:	e583101c 	str	r1, [r3, #28]
    WR32(ARM_GPIO_GPCLR0, (1 << BR_WR_BAR));
   39120:	e5832028 	str	r2, [r3, #40]	; 0x28
    lowlev_cycleDelay(CYCLES_DELAY_FOR_WRITE_TO_TARGET);
   39124:	ebff3bf9 	bl	8110 <lowlev_cycleDelay>
    WR32(ARM_GPIO_GPSET0, (1 << BR_DATA_DIR_IN) | (1 << (iorq ? BR_IORQ_BAR : BR_MREQ_BAR)) | (1 << BR_WR_BAR));
   39128:	e59f2010 	ldr	r2, [pc, #16]	; 39140 <BusAccess::byteWrite(unsigned long, int)+0x98>
   3912c:	eafffff0 	b	390f4 <BusAccess::byteWrite(unsigned long, int)+0x4c>
   39130:	20200000 	.word	0x20200000
   39134:	00000e42 	.word	0x00000e42
   39138:	00020042 	.word	0x00020042
   3913c:	00000e41 	.word	0x00000e41
   39140:	00020041 	.word	0x00020041

00039144 <BusAccess::byteRead(int)>:
    WR32(ARM_GPIO_GPCLR0, BR_MUX_CTRL_BIT_MASK | (1 << (iorq ? BR_IORQ_BAR : BR_MREQ_BAR)) | (1 << BR_RD_BAR));
   39144:	e3500000 	cmp	r0, #0
{
   39148:	e92d4010 	push	{r4, lr}
    WR32(ARM_GPIO_GPSET0, BR_MUX_DATA_OE_BAR_LOW << BR_MUX_LOW_BIT_POS);
   3914c:	e3a03c02 	mov	r3, #512	; 0x200
    WR32(ARM_GPIO_GPCLR0, BR_MUX_CTRL_BIT_MASK | (1 << (iorq ? BR_IORQ_BAR : BR_MREQ_BAR)) | (1 << BR_RD_BAR));
   39150:	e59f4060 	ldr	r4, [pc, #96]	; 391b8 <BusAccess::byteRead(int)+0x74>
   39154:	1a00000d 	bne	39190 <BusAccess::byteRead(int)+0x4c>
   39158:	e59f205c 	ldr	r2, [pc, #92]	; 391bc <BusAccess::byteRead(int)+0x78>
    lowlev_cycleDelay(CYCLES_DELAY_FOR_READ_FROM_PIB);
   3915c:	e3a00005 	mov	r0, #5
    WR32(ARM_GPIO_GPCLR0, BR_MUX_CTRL_BIT_MASK | (1 << (iorq ? BR_IORQ_BAR : BR_MREQ_BAR)) | (1 << BR_RD_BAR));
   39160:	e5842028 	str	r2, [r4, #40]	; 0x28
    WR32(ARM_GPIO_GPSET0, BR_MUX_DATA_OE_BAR_LOW << BR_MUX_LOW_BIT_POS);
   39164:	e584301c 	str	r3, [r4, #28]
    lowlev_cycleDelay(CYCLES_DELAY_FOR_READ_FROM_PIB);
   39168:	ebff3be8 	bl	8110 <lowlev_cycleDelay>
    uint8_t val = (RD32(ARM_GPIO_GPLEV0) >> BR_DATA_BUS) & 0xff;
   3916c:	e5940034 	ldr	r0, [r4, #52]	; 0x34
    WR32(ARM_GPIO_GPSET0, (1 << (iorq ? BR_IORQ_BAR : BR_MREQ_BAR)) | (1 << BR_RD_BAR));
   39170:	e59f2048 	ldr	r2, [pc, #72]	; 391c0 <BusAccess::byteRead(int)+0x7c>
    uint8_t val = (RD32(ARM_GPIO_GPLEV0) >> BR_DATA_BUS) & 0xff;
   39174:	e1a00a20 	lsr	r0, r0, #20
   39178:	e6ef0070 	uxtb	r0, r0
    WR32(ARM_GPIO_GPCLR0, BR_MUX_CTRL_BIT_MASK);
   3917c:	e3a01c0e 	mov	r1, #3584	; 0xe00
    WR32(ARM_GPIO_GPSET0, (1 << (iorq ? BR_IORQ_BAR : BR_MREQ_BAR)) | (1 << BR_RD_BAR));
   39180:	e59f3030 	ldr	r3, [pc, #48]	; 391b8 <BusAccess::byteRead(int)+0x74>
   39184:	e583201c 	str	r2, [r3, #28]
    WR32(ARM_GPIO_GPCLR0, BR_MUX_CTRL_BIT_MASK);
   39188:	e5831028 	str	r1, [r3, #40]	; 0x28
}
   3918c:	e8bd8010 	pop	{r4, pc}
    WR32(ARM_GPIO_GPCLR0, BR_MUX_CTRL_BIT_MASK | (1 << (iorq ? BR_IORQ_BAR : BR_MREQ_BAR)) | (1 << BR_RD_BAR));
   39190:	e59f202c 	ldr	r2, [pc, #44]	; 391c4 <BusAccess::byteRead(int)+0x80>
    lowlev_cycleDelay(CYCLES_DELAY_FOR_READ_FROM_PIB);
   39194:	e3a00005 	mov	r0, #5
    WR32(ARM_GPIO_GPCLR0, BR_MUX_CTRL_BIT_MASK | (1 << (iorq ? BR_IORQ_BAR : BR_MREQ_BAR)) | (1 << BR_RD_BAR));
   39198:	e5842028 	str	r2, [r4, #40]	; 0x28
    WR32(ARM_GPIO_GPSET0, BR_MUX_DATA_OE_BAR_LOW << BR_MUX_LOW_BIT_POS);
   3919c:	e584301c 	str	r3, [r4, #28]
    lowlev_cycleDelay(CYCLES_DELAY_FOR_READ_FROM_PIB);
   391a0:	ebff3bda 	bl	8110 <lowlev_cycleDelay>
    uint8_t val = (RD32(ARM_GPIO_GPLEV0) >> BR_DATA_BUS) & 0xff;
   391a4:	e5940034 	ldr	r0, [r4, #52]	; 0x34
    WR32(ARM_GPIO_GPSET0, (1 << (iorq ? BR_IORQ_BAR : BR_MREQ_BAR)) | (1 << BR_RD_BAR));
   391a8:	e59f2018 	ldr	r2, [pc, #24]	; 391c8 <BusAccess::byteRead(int)+0x84>
    uint8_t val = (RD32(ARM_GPIO_GPLEV0) >> BR_DATA_BUS) & 0xff;
   391ac:	e1a00a20 	lsr	r0, r0, #20
   391b0:	e6ef0070 	uxtb	r0, r0
   391b4:	eafffff0 	b	3917c <BusAccess::byteRead(int)+0x38>
   391b8:	20200000 	.word	0x20200000
   391bc:	00040e01 	.word	0x00040e01
   391c0:	00040001 	.word	0x00040001
   391c4:	00040e02 	.word	0x00040e02
   391c8:	00040002 	.word	0x00040002

000391cc <BusAccess::blockWrite(unsigned long, unsigned char const*, unsigned long, bool, bool)>:
{
   391cc:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if (busRqAndRelease) {
   391d0:	e3530000 	cmp	r3, #0
{
   391d4:	e24dd014 	sub	sp, sp, #20
    if (busRqAndRelease) {
   391d8:	e58d300c 	str	r3, [sp, #12]
{
   391dc:	e1a05000 	mov	r5, r0
   391e0:	e58d1008 	str	r1, [sp, #8]
   391e4:	e1a08002 	mov	r8, r2
   391e8:	e5dda038 	ldrb	sl, [sp, #56]	; 0x38
    if (busRqAndRelease) {
   391ec:	0a000016 	beq	3924c <BusAccess::blockWrite(unsigned long, unsigned char const*, unsigned long, bool, bool)+0x80>
    WR32(ARM_GPIO_GPSET0, 1 << BR_DATA_DIR_IN);
   391f0:	e3a02040 	mov	r2, #64	; 0x40
        WR32(BR_PIB_GPF_REG, (RD32(BR_PIB_GPF_REG) & BR_PIB_GPF_MASK) | BR_PIB_GPF_INPUT);
   391f4:	e59f62c8 	ldr	r6, [pc, #712]	; 394c4 <BusAccess::blockWrite(unsigned long, unsigned char const*, unsigned long, bool, bool)+0x2f8>
    digitalWrite(BR_BUSRQ_BAR, 0);
   391f8:	e3a01000 	mov	r1, #0
   391fc:	e5963008 	ldr	r3, [r6, #8]
   39200:	e3a00013 	mov	r0, #19
   39204:	e20334ff 	and	r3, r3, #-16777216	; 0xff000000
   39208:	e5863008 	str	r3, [r6, #8]
    WR32(ARM_GPIO_GPSET0, 1 << BR_DATA_DIR_IN);
   3920c:	e586201c 	str	r2, [r6, #28]
    digitalWrite(BR_BUSRQ_BAR, 0);
   39210:	ebfff075 	bl	353ec <digitalWrite>
   39214:	e3a04064 	mov	r4, #100	; 0x64
   39218:	ea000003 	b	3922c <BusAccess::blockWrite(unsigned long, unsigned char const*, unsigned long, bool, bool)+0x60>
        microsDelay(1);
   3921c:	e3a00001 	mov	r0, #1
   39220:	ebfff560 	bl	367a8 <microsDelay>
    for (int i = 0; i < BusSocketInfo::MAX_WAIT_FOR_BUSACK_US; i++)
   39224:	e2544001 	subs	r4, r4, #1
   39228:	0a000002 	beq	39238 <BusAccess::blockWrite(unsigned long, unsigned char const*, unsigned long, bool, bool)+0x6c>
    return (RD32(ARM_GPIO_GPLEV0) & BR_BUSACK_BAR_MASK) == 0;
   3922c:	e5963034 	ldr	r3, [r6, #52]	; 0x34
        if (controlBusAcknowledged())
   39230:	e3130004 	tst	r3, #4
   39234:	1afffff8 	bne	3921c <BusAccess::blockWrite(unsigned long, unsigned char const*, unsigned long, bool, bool)+0x50>
    return (RD32(ARM_GPIO_GPLEV0) & BR_BUSACK_BAR_MASK) == 0;
   39238:	e59f3284 	ldr	r3, [pc, #644]	; 394c4 <BusAccess::blockWrite(unsigned long, unsigned char const*, unsigned long, bool, bool)+0x2f8>
   3923c:	e5933034 	ldr	r3, [r3, #52]	; 0x34
    if (!controlBusAcknowledged()) 
   39240:	e3130004 	tst	r3, #4
   39244:	1a00009a 	bne	394b4 <BusAccess::blockWrite(unsigned long, unsigned char const*, unsigned long, bool, bool)+0x2e8>
    controlTake();
   39248:	ebfffdbf 	bl	3894c <BusAccess::controlTake()>
   3924c:	e59f2270 	ldr	r2, [pc, #624]	; 394c4 <BusAccess::blockWrite(unsigned long, unsigned char const*, unsigned long, bool, bool)+0x2f8>
    addrHighSet(addr >> 8);
   39250:	e3a07009 	mov	r7, #9
        WR32(ARM_GPIO_GPCLR0, BR_MUX_CTRL_BIT_MASK);
   39254:	e1a0b002 	mov	fp, r2
   39258:	e3a06c0e 	mov	r6, #3584	; 0xe00
        WR32(BR_PIB_GPF_REG, (RD32(BR_PIB_GPF_REG) & BR_PIB_GPF_MASK) | BR_PIB_GPF_INPUT);
   3925c:	e5921008 	ldr	r1, [r2, #8]
   39260:	e1a04425 	lsr	r4, r5, #8
   39264:	e20114ff 	and	r1, r1, #-16777216	; 0xff000000
   39268:	e5821008 	str	r1, [r2, #8]
        WR32(ARM_GPIO_GPSET0, 1 << BR_HADDR_CK);
   3926c:	e3a09080 	mov	r9, #128	; 0x80
        if (highAddrByte & 0x80)
   39270:	e2143080 	ands	r3, r4, #128	; 0x80
        lowlev_cycleDelay(CYCLES_DELAY_FOR_HIGH_ADDR_SET);
   39274:	13a00014 	movne	r0, #20
   39278:	03a00014 	moveq	r0, #20
        WR32(ARM_GPIO_GPCLR0, BR_MUX_CTRL_BIT_MASK);
   3927c:	e58b6028 	str	r6, [fp, #40]	; 0x28
        WR32(ARM_GPIO_GPSET0, muxVal << BR_MUX_LOW_BIT_POS);
   39280:	158b601c 	strne	r6, [fp, #28]
   39284:	058b301c 	streq	r3, [fp, #28]
   39288:	ebff3ba0 	bl	8110 <lowlev_cycleDelay>
        WR32(ARM_GPIO_GPSET0, 1 << BR_HADDR_CK);
   3928c:	e58b901c 	str	r9, [fp, #28]
        lowlev_cycleDelay(CYCLES_DELAY_FOR_HIGH_ADDR_SET);
   39290:	e3a00014 	mov	r0, #20
   39294:	ebff3b9d 	bl	8110 <lowlev_cycleDelay>
    for (uint32_t i = 0; i < 9; i++) {
   39298:	e2577001 	subs	r7, r7, #1
        highAddrByte = highAddrByte << 1;
   3929c:	e1a04084 	lsl	r4, r4, #1
        WR32(ARM_GPIO_GPCLR0, 1 << BR_HADDR_CK);
   392a0:	e58b9028 	str	r9, [fp, #40]	; 0x28
    for (uint32_t i = 0; i < 9; i++) {
   392a4:	1afffff0 	bne	3926c <BusAccess::blockWrite(unsigned long, unsigned char const*, unsigned long, bool, bool)+0xa0>
        WR32(ARM_GPIO_GPCLR0, BR_MUX_CTRL_BIT_MASK);
   392a8:	e3a0bc0e 	mov	fp, #3584	; 0xe00
   392ac:	e59f4210 	ldr	r4, [pc, #528]	; 394c4 <BusAccess::blockWrite(unsigned long, unsigned char const*, unsigned long, bool, bool)+0x2f8>
    lowlev_cycleDelay(CYCLES_DELAY_FOR_HIGH_ADDR_SET);
   392b0:	e3a00014 	mov	r0, #20
   392b4:	ebff3b95 	bl	8110 <lowlev_cycleDelay>
   392b8:	e584b028 	str	fp, [r4, #40]	; 0x28
    lowlev_cycleDelay(CYCLES_DELAY_FOR_CLEAR_LOW_ADDR);
   392bc:	e3a00005 	mov	r0, #5
   392c0:	ebff3b92 	bl	8110 <lowlev_cycleDelay>
        WR32(ARM_GPIO_GPSET0, muxVal << BR_MUX_LOW_BIT_POS);
   392c4:	e3a03b02 	mov	r3, #2048	; 0x800
        WR32(ARM_GPIO_GPSET0, 1 << BR_LADDR_CK);
   392c8:	e3a09801 	mov	r9, #65536	; 0x10000
        WR32(ARM_GPIO_GPCLR0, BR_MUX_CTRL_BIT_MASK);
   392cc:	e584b028 	str	fp, [r4, #40]	; 0x28
    lowlev_cycleDelay(CYCLES_DELAY_FOR_CLEAR_LOW_ADDR);
   392d0:	e3a00005 	mov	r0, #5
        WR32(ARM_GPIO_GPSET0, muxVal << BR_MUX_LOW_BIT_POS);
   392d4:	e584301c 	str	r3, [r4, #28]
   392d8:	ebff3b8c 	bl	8110 <lowlev_cycleDelay>
    for (uint32_t i = 0; i < (lowAddrByte & 0xff) + 1; i++) {
   392dc:	e3a07000 	mov	r7, #0
        WR32(ARM_GPIO_GPCLR0, BR_MUX_CTRL_BIT_MASK);
   392e0:	e584b028 	str	fp, [r4, #40]	; 0x28
        WR32(ARM_GPIO_GPSET0, 1 << BR_LADDR_CK);
   392e4:	e1a0b009 	mov	fp, r9
    addrLowSet(addr & 0xff);
   392e8:	e6ef6075 	uxtb	r6, r5
    for (uint32_t i = 0; i < (lowAddrByte & 0xff) + 1; i++) {
   392ec:	e2866001 	add	r6, r6, #1
        lowlev_cycleDelay(CYCLES_DELAY_FOR_LOW_ADDR_SET);
   392f0:	e3a00005 	mov	r0, #5
        WR32(ARM_GPIO_GPSET0, 1 << BR_LADDR_CK);
   392f4:	e584b01c 	str	fp, [r4, #28]
        lowlev_cycleDelay(CYCLES_DELAY_FOR_LOW_ADDR_SET);
   392f8:	ebff3b84 	bl	8110 <lowlev_cycleDelay>
    for (uint32_t i = 0; i < (lowAddrByte & 0xff) + 1; i++) {
   392fc:	e2877001 	add	r7, r7, #1
        WR32(ARM_GPIO_GPCLR0, 1 << BR_LADDR_CK);
   39300:	e5849028 	str	r9, [r4, #40]	; 0x28
        lowlev_cycleDelay(CYCLES_DELAY_FOR_LOW_ADDR_SET);
   39304:	e3a00005 	mov	r0, #5
   39308:	ebff3b80 	bl	8110 <lowlev_cycleDelay>
    for (uint32_t i = 0; i < (lowAddrByte & 0xff) + 1; i++) {
   3930c:	e1560007 	cmp	r6, r7
   39310:	1afffff6 	bne	392f0 <BusAccess::blockWrite(unsigned long, unsigned char const*, unsigned long, bool, bool)+0x124>
        WR32(BR_PIB_GPF_REG, (RD32(BR_PIB_GPF_REG) & BR_PIB_GPF_MASK) | BR_PIB_GPF_OUTPUT);
   39314:	e5942008 	ldr	r2, [r4, #8]
   39318:	e59f31a8 	ldr	r3, [pc, #424]	; 394c8 <BusAccess::blockWrite(unsigned long, unsigned char const*, unsigned long, bool, bool)+0x2fc>
   3931c:	e20224ff 	and	r2, r2, #-16777216	; 0xff000000
   39320:	e1823003 	orr	r3, r2, r3
    for (uint32_t i = 0; i < len; i++) {
   39324:	e3580000 	cmp	r8, #0
   39328:	e5843008 	str	r3, [r4, #8]
   3932c:	0a000053 	beq	39480 <BusAccess::blockWrite(unsigned long, unsigned char const*, unsigned long, bool, bool)+0x2b4>
   39330:	e59f2194 	ldr	r2, [pc, #404]	; 394cc <BusAccess::blockWrite(unsigned long, unsigned char const*, unsigned long, bool, bool)+0x300>
   39334:	e35a0000 	cmp	sl, #0
   39338:	e59f9190 	ldr	r9, [pc, #400]	; 394d0 <BusAccess::blockWrite(unsigned long, unsigned char const*, unsigned long, bool, bool)+0x304>
   3933c:	01a09002 	moveq	r9, r2
   39340:	e59d3008 	ldr	r3, [sp, #8]
        WR32(ARM_GPIO_GPSET0, setBits);
   39344:	e59fb178 	ldr	fp, [pc, #376]	; 394c4 <BusAccess::blockWrite(unsigned long, unsigned char const*, unsigned long, bool, bool)+0x2f8>
   39348:	e2437001 	sub	r7, r3, #1
   3934c:	e0853008 	add	r3, r5, r8
   39350:	e58d9004 	str	r9, [sp, #4]
   39354:	e58d3008 	str	r3, [sp, #8]
   39358:	ea000016 	b	393b8 <BusAccess::blockWrite(unsigned long, unsigned char const*, unsigned long, bool, bool)+0x1ec>
    WR32(ARM_GPIO_GPSET0, BR_MUX_DATA_OE_BAR_LOW << BR_MUX_LOW_BIT_POS);
   3935c:	e3a02c02 	mov	r2, #512	; 0x200
    WR32(ARM_GPIO_GPCLR0, (1 << BR_WR_BAR));
   39360:	e3a03802 	mov	r3, #131072	; 0x20000
    WR32(ARM_GPIO_GPCLR0, (1 << BR_DATA_DIR_IN) | BR_MUX_CTRL_BIT_MASK | (1 << (iorq ? BR_IORQ_BAR : BR_MREQ_BAR)));
   39364:	e59f1168 	ldr	r1, [pc, #360]	; 394d4 <BusAccess::blockWrite(unsigned long, unsigned char const*, unsigned long, bool, bool)+0x308>
    WR32(ARM_GPIO_GPSET0, 1 << BR_LADDR_CK);
   39368:	e3a06801 	mov	r6, #65536	; 0x10000
        WR32(ARM_GPIO_GPCLR0, BR_MUX_CTRL_BIT_MASK);
   3936c:	e3a04c0e 	mov	r4, #3584	; 0xe00
    WR32(ARM_GPIO_GPCLR0, (1 << BR_DATA_DIR_IN) | BR_MUX_CTRL_BIT_MASK | (1 << (iorq ? BR_IORQ_BAR : BR_MREQ_BAR)));
   39370:	e58b1028 	str	r1, [fp, #40]	; 0x28
    lowlev_cycleDelay(CYCLES_DELAY_FOR_WRITE_TO_TARGET);
   39374:	e3a000fa 	mov	r0, #250	; 0xfa
    WR32(ARM_GPIO_GPSET0, BR_MUX_DATA_OE_BAR_LOW << BR_MUX_LOW_BIT_POS);
   39378:	e58b201c 	str	r2, [fp, #28]
    WR32(ARM_GPIO_GPCLR0, (1 << BR_WR_BAR));
   3937c:	e58b3028 	str	r3, [fp, #40]	; 0x28
    lowlev_cycleDelay(CYCLES_DELAY_FOR_WRITE_TO_TARGET);
   39380:	ebff3b62 	bl	8110 <lowlev_cycleDelay>
    WR32(ARM_GPIO_GPSET0, (1 << BR_DATA_DIR_IN) | (1 << (iorq ? BR_IORQ_BAR : BR_MREQ_BAR)) | (1 << BR_WR_BAR));
   39384:	e59d3004 	ldr	r3, [sp, #4]
        addr++;
   39388:	e2855001 	add	r5, r5, #1
    WR32(ARM_GPIO_GPSET0, (1 << BR_DATA_DIR_IN) | (1 << (iorq ? BR_IORQ_BAR : BR_MREQ_BAR)) | (1 << BR_WR_BAR));
   3938c:	e58b301c 	str	r3, [fp, #28]
    lowlev_cycleDelay(CYCLES_DELAY_FOR_LOW_ADDR_SET);
   39390:	e3a00005 	mov	r0, #5
   39394:	e58b4028 	str	r4, [fp, #40]	; 0x28
    WR32(ARM_GPIO_GPSET0, 1 << BR_LADDR_CK);
   39398:	e58b601c 	str	r6, [fp, #28]
    lowlev_cycleDelay(CYCLES_DELAY_FOR_LOW_ADDR_SET);
   3939c:	ebff3b5b 	bl	8110 <lowlev_cycleDelay>
        if ((addr & 0xff) == 0) {
   393a0:	e31500ff 	tst	r5, #255	; 0xff
    WR32(ARM_GPIO_GPCLR0, 1 << BR_LADDR_CK);
   393a4:	e58b6028 	str	r6, [fp, #40]	; 0x28
        if ((addr & 0xff) == 0) {
   393a8:	0a00000d 	beq	393e4 <BusAccess::blockWrite(unsigned long, unsigned char const*, unsigned long, bool, bool)+0x218>
    for (uint32_t i = 0; i < len; i++) {
   393ac:	e59d3008 	ldr	r3, [sp, #8]
   393b0:	e1550003 	cmp	r5, r3
   393b4:	0a000031 	beq	39480 <BusAccess::blockWrite(unsigned long, unsigned char const*, unsigned long, bool, bool)+0x2b4>
        byteWrite(*pData, iorq);
   393b8:	e5f73001 	ldrb	r3, [r7, #1]!
    WR32(ARM_GPIO_GPCLR0, (1 << BR_DATA_DIR_IN) | BR_MUX_CTRL_BIT_MASK | (1 << (iorq ? BR_IORQ_BAR : BR_MREQ_BAR)));
   393bc:	e35a0000 	cmp	sl, #0
   393c0:	e1a03a03 	lsl	r3, r3, #20
        uint32_t clrBits = (~(((uint32_t)val) << BR_DATA_BUS)) & (~BR_PIB_MASK);
   393c4:	e22326ff 	eor	r2, r3, #267386880	; 0xff00000
        WR32(ARM_GPIO_GPSET0, setBits);
   393c8:	e58b301c 	str	r3, [fp, #28]
        WR32(ARM_GPIO_GPCLR0, clrBits);
   393cc:	e58b2028 	str	r2, [fp, #40]	; 0x28
   393d0:	1affffe1 	bne	3935c <BusAccess::blockWrite(unsigned long, unsigned char const*, unsigned long, bool, bool)+0x190>
    WR32(ARM_GPIO_GPSET0, BR_MUX_DATA_OE_BAR_LOW << BR_MUX_LOW_BIT_POS);
   393d4:	e3a02c02 	mov	r2, #512	; 0x200
    WR32(ARM_GPIO_GPCLR0, (1 << BR_WR_BAR));
   393d8:	e3a03802 	mov	r3, #131072	; 0x20000
    WR32(ARM_GPIO_GPCLR0, (1 << BR_DATA_DIR_IN) | BR_MUX_CTRL_BIT_MASK | (1 << (iorq ? BR_IORQ_BAR : BR_MREQ_BAR)));
   393dc:	e59f10f4 	ldr	r1, [pc, #244]	; 394d8 <BusAccess::blockWrite(unsigned long, unsigned char const*, unsigned long, bool, bool)+0x30c>
   393e0:	eaffffe0 	b	39368 <BusAccess::blockWrite(unsigned long, unsigned char const*, unsigned long, bool, bool)+0x19c>
    addrHighSet(addr >> 8);
   393e4:	e3a09009 	mov	r9, #9
   393e8:	e1a08425 	lsr	r8, r5, #8
        WR32(ARM_GPIO_GPSET0, 1 << BR_HADDR_CK);
   393ec:	e3a06080 	mov	r6, #128	; 0x80
        if (highAddrByte & 0x80)
   393f0:	e2183080 	ands	r3, r8, #128	; 0x80
        lowlev_cycleDelay(CYCLES_DELAY_FOR_HIGH_ADDR_SET);
   393f4:	13a00014 	movne	r0, #20
   393f8:	03a00014 	moveq	r0, #20
        WR32(ARM_GPIO_GPCLR0, BR_MUX_CTRL_BIT_MASK);
   393fc:	e58b4028 	str	r4, [fp, #40]	; 0x28
        WR32(ARM_GPIO_GPSET0, muxVal << BR_MUX_LOW_BIT_POS);
   39400:	158b401c 	strne	r4, [fp, #28]
   39404:	058b301c 	streq	r3, [fp, #28]
   39408:	ebff3b40 	bl	8110 <lowlev_cycleDelay>
        WR32(ARM_GPIO_GPSET0, 1 << BR_HADDR_CK);
   3940c:	e58b601c 	str	r6, [fp, #28]
        lowlev_cycleDelay(CYCLES_DELAY_FOR_HIGH_ADDR_SET);
   39410:	e3a00014 	mov	r0, #20
   39414:	ebff3b3d 	bl	8110 <lowlev_cycleDelay>
    for (uint32_t i = 0; i < 9; i++) {
   39418:	e2599001 	subs	r9, r9, #1
        highAddrByte = highAddrByte << 1;
   3941c:	e1a08088 	lsl	r8, r8, #1
        WR32(ARM_GPIO_GPCLR0, 1 << BR_HADDR_CK);
   39420:	e58b6028 	str	r6, [fp, #40]	; 0x28
    for (uint32_t i = 0; i < 9; i++) {
   39424:	1afffff0 	bne	393ec <BusAccess::blockWrite(unsigned long, unsigned char const*, unsigned long, bool, bool)+0x220>
        WR32(ARM_GPIO_GPCLR0, BR_MUX_CTRL_BIT_MASK);
   39428:	e3a04c0e 	mov	r4, #3584	; 0xe00
    lowlev_cycleDelay(CYCLES_DELAY_FOR_HIGH_ADDR_SET);
   3942c:	e3a00014 	mov	r0, #20
   39430:	ebff3b36 	bl	8110 <lowlev_cycleDelay>
    lowlev_cycleDelay(CYCLES_DELAY_FOR_CLEAR_LOW_ADDR);
   39434:	e3a00005 	mov	r0, #5
   39438:	e58b4028 	str	r4, [fp, #40]	; 0x28
   3943c:	ebff3b33 	bl	8110 <lowlev_cycleDelay>
        WR32(ARM_GPIO_GPSET0, muxVal << BR_MUX_LOW_BIT_POS);
   39440:	e3a03b02 	mov	r3, #2048	; 0x800
        WR32(ARM_GPIO_GPSET0, 1 << BR_LADDR_CK);
   39444:	e3a06801 	mov	r6, #65536	; 0x10000
        WR32(ARM_GPIO_GPCLR0, BR_MUX_CTRL_BIT_MASK);
   39448:	e58b4028 	str	r4, [fp, #40]	; 0x28
    lowlev_cycleDelay(CYCLES_DELAY_FOR_CLEAR_LOW_ADDR);
   3944c:	e3a00005 	mov	r0, #5
        WR32(ARM_GPIO_GPSET0, muxVal << BR_MUX_LOW_BIT_POS);
   39450:	e58b301c 	str	r3, [fp, #28]
   39454:	ebff3b2d 	bl	8110 <lowlev_cycleDelay>
        WR32(ARM_GPIO_GPCLR0, BR_MUX_CTRL_BIT_MASK);
   39458:	e58b4028 	str	r4, [fp, #40]	; 0x28
        lowlev_cycleDelay(CYCLES_DELAY_FOR_LOW_ADDR_SET);
   3945c:	e3a00005 	mov	r0, #5
        WR32(ARM_GPIO_GPSET0, 1 << BR_LADDR_CK);
   39460:	e58b601c 	str	r6, [fp, #28]
        lowlev_cycleDelay(CYCLES_DELAY_FOR_LOW_ADDR_SET);
   39464:	ebff3b29 	bl	8110 <lowlev_cycleDelay>
        WR32(ARM_GPIO_GPCLR0, 1 << BR_LADDR_CK);
   39468:	e58b6028 	str	r6, [fp, #40]	; 0x28
        lowlev_cycleDelay(CYCLES_DELAY_FOR_LOW_ADDR_SET);
   3946c:	e3a00005 	mov	r0, #5
   39470:	ebff3b26 	bl	8110 <lowlev_cycleDelay>
    for (uint32_t i = 0; i < len; i++) {
   39474:	e59d3008 	ldr	r3, [sp, #8]
   39478:	e1550003 	cmp	r5, r3
   3947c:	1affffcd 	bne	393b8 <BusAccess::blockWrite(unsigned long, unsigned char const*, unsigned long, bool, bool)+0x1ec>
        WR32(BR_PIB_GPF_REG, (RD32(BR_PIB_GPF_REG) & BR_PIB_GPF_MASK) | BR_PIB_GPF_INPUT);
   39480:	e59f203c 	ldr	r2, [pc, #60]	; 394c4 <BusAccess::blockWrite(unsigned long, unsigned char const*, unsigned long, bool, bool)+0x2f8>
    if (busRqAndRelease) {
   39484:	e59d000c 	ldr	r0, [sp, #12]
   39488:	e5923008 	ldr	r3, [r2, #8]
   3948c:	e3500000 	cmp	r0, #0
   39490:	e20334ff 	and	r3, r3, #-16777216	; 0xff000000
   39494:	e5823008 	str	r3, [r2, #8]
   39498:	1a000001 	bne	394a4 <BusAccess::blockWrite(unsigned long, unsigned char const*, unsigned long, bool, bool)+0x2d8>
}
   3949c:	e28dd014 	add	sp, sp, #20
   394a0:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
        controlRelease();
   394a4:	ebfffd62 	bl	38a34 <BusAccess::controlRelease()>
    return BR_OK;
   394a8:	e3a00000 	mov	r0, #0
}
   394ac:	e28dd014 	add	sp, sp, #20
   394b0:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
        controlRelease();
   394b4:	ebfffd5e 	bl	38a34 <BusAccess::controlRelease()>
        return BR_NO_BUS_ACK;
   394b8:	e3a00002 	mov	r0, #2
}
   394bc:	e28dd014 	add	sp, sp, #20
   394c0:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   394c4:	20200000 	.word	0x20200000
   394c8:	00249249 	.word	0x00249249
   394cc:	00020041 	.word	0x00020041
   394d0:	00020042 	.word	0x00020042
   394d4:	00000e42 	.word	0x00000e42
   394d8:	00000e41 	.word	0x00000e41

000394dc <BusAccess::blockRead(unsigned long, unsigned char*, unsigned long, bool, bool)>:
{
   394dc:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if (busRqAndRelease) {
   394e0:	e3530000 	cmp	r3, #0
{
   394e4:	e24dd014 	sub	sp, sp, #20
    if (busRqAndRelease) {
   394e8:	e58d300c 	str	r3, [sp, #12]
{
   394ec:	e1a08000 	mov	r8, r0
   394f0:	e58d1004 	str	r1, [sp, #4]
   394f4:	e1a06002 	mov	r6, r2
   394f8:	e5ddb038 	ldrb	fp, [sp, #56]	; 0x38
    if (busRqAndRelease) {
   394fc:	0a000016 	beq	3955c <BusAccess::blockRead(unsigned long, unsigned char*, unsigned long, bool, bool)+0x80>
    WR32(ARM_GPIO_GPSET0, 1 << BR_DATA_DIR_IN);
   39500:	e3a02040 	mov	r2, #64	; 0x40
   39504:	e59f52ac 	ldr	r5, [pc, #684]	; 397b8 <BusAccess::blockRead(unsigned long, unsigned char*, unsigned long, bool, bool)+0x2dc>
    digitalWrite(BR_BUSRQ_BAR, 0);
   39508:	e3a01000 	mov	r1, #0
   3950c:	e5953008 	ldr	r3, [r5, #8]
   39510:	e3a00013 	mov	r0, #19
   39514:	e20334ff 	and	r3, r3, #-16777216	; 0xff000000
   39518:	e5853008 	str	r3, [r5, #8]
    WR32(ARM_GPIO_GPSET0, 1 << BR_DATA_DIR_IN);
   3951c:	e585201c 	str	r2, [r5, #28]
    digitalWrite(BR_BUSRQ_BAR, 0);
   39520:	ebffefb1 	bl	353ec <digitalWrite>
   39524:	e3a04064 	mov	r4, #100	; 0x64
   39528:	ea000003 	b	3953c <BusAccess::blockRead(unsigned long, unsigned char*, unsigned long, bool, bool)+0x60>
        microsDelay(1);
   3952c:	e3a00001 	mov	r0, #1
   39530:	ebfff49c 	bl	367a8 <microsDelay>
    for (int i = 0; i < BusSocketInfo::MAX_WAIT_FOR_BUSACK_US; i++)
   39534:	e2544001 	subs	r4, r4, #1
   39538:	0a000002 	beq	39548 <BusAccess::blockRead(unsigned long, unsigned char*, unsigned long, bool, bool)+0x6c>
    return (RD32(ARM_GPIO_GPLEV0) & BR_BUSACK_BAR_MASK) == 0;
   3953c:	e5953034 	ldr	r3, [r5, #52]	; 0x34
        if (controlBusAcknowledged())
   39540:	e3130004 	tst	r3, #4
   39544:	1afffff8 	bne	3952c <BusAccess::blockRead(unsigned long, unsigned char*, unsigned long, bool, bool)+0x50>
    return (RD32(ARM_GPIO_GPLEV0) & BR_BUSACK_BAR_MASK) == 0;
   39548:	e59f3268 	ldr	r3, [pc, #616]	; 397b8 <BusAccess::blockRead(unsigned long, unsigned char*, unsigned long, bool, bool)+0x2dc>
   3954c:	e5933034 	ldr	r3, [r3, #52]	; 0x34
    if (!controlBusAcknowledged()) 
   39550:	e3130004 	tst	r3, #4
   39554:	1a000093 	bne	397a8 <BusAccess::blockRead(unsigned long, unsigned char*, unsigned long, bool, bool)+0x2cc>
    controlTake();
   39558:	ebfffcfb 	bl	3894c <BusAccess::controlTake()>
   3955c:	e59f2254 	ldr	r2, [pc, #596]	; 397b8 <BusAccess::blockRead(unsigned long, unsigned char*, unsigned long, bool, bool)+0x2dc>
    addrHighSet(addr >> 8);
   39560:	e3a09009 	mov	r9, #9
        WR32(ARM_GPIO_GPCLR0, BR_MUX_CTRL_BIT_MASK);
   39564:	e1a0a002 	mov	sl, r2
   39568:	e3a05c0e 	mov	r5, #3584	; 0xe00
        WR32(BR_PIB_GPF_REG, (RD32(BR_PIB_GPF_REG) & BR_PIB_GPF_MASK) | BR_PIB_GPF_INPUT);
   3956c:	e5921008 	ldr	r1, [r2, #8]
   39570:	e1a04428 	lsr	r4, r8, #8
   39574:	e20114ff 	and	r1, r1, #-16777216	; 0xff000000
   39578:	e5821008 	str	r1, [r2, #8]
        WR32(ARM_GPIO_GPSET0, 1 << BR_HADDR_CK);
   3957c:	e3a07080 	mov	r7, #128	; 0x80
        if (highAddrByte & 0x80)
   39580:	e2143080 	ands	r3, r4, #128	; 0x80
        lowlev_cycleDelay(CYCLES_DELAY_FOR_HIGH_ADDR_SET);
   39584:	13a00014 	movne	r0, #20
   39588:	03a00014 	moveq	r0, #20
        WR32(ARM_GPIO_GPCLR0, BR_MUX_CTRL_BIT_MASK);
   3958c:	e58a5028 	str	r5, [sl, #40]	; 0x28
        WR32(ARM_GPIO_GPSET0, muxVal << BR_MUX_LOW_BIT_POS);
   39590:	158a501c 	strne	r5, [sl, #28]
   39594:	058a301c 	streq	r3, [sl, #28]
   39598:	ebff3adc 	bl	8110 <lowlev_cycleDelay>
        WR32(ARM_GPIO_GPSET0, 1 << BR_HADDR_CK);
   3959c:	e58a701c 	str	r7, [sl, #28]
        lowlev_cycleDelay(CYCLES_DELAY_FOR_HIGH_ADDR_SET);
   395a0:	e3a00014 	mov	r0, #20
   395a4:	ebff3ad9 	bl	8110 <lowlev_cycleDelay>
    for (uint32_t i = 0; i < 9; i++) {
   395a8:	e2599001 	subs	r9, r9, #1
        highAddrByte = highAddrByte << 1;
   395ac:	e1a04084 	lsl	r4, r4, #1
        WR32(ARM_GPIO_GPCLR0, 1 << BR_HADDR_CK);
   395b0:	e58a7028 	str	r7, [sl, #40]	; 0x28
    for (uint32_t i = 0; i < 9; i++) {
   395b4:	1afffff0 	bne	3957c <BusAccess::blockRead(unsigned long, unsigned char*, unsigned long, bool, bool)+0xa0>
        WR32(ARM_GPIO_GPCLR0, BR_MUX_CTRL_BIT_MASK);
   395b8:	e3a0ac0e 	mov	sl, #3584	; 0xe00
   395bc:	e59f41f4 	ldr	r4, [pc, #500]	; 397b8 <BusAccess::blockRead(unsigned long, unsigned char*, unsigned long, bool, bool)+0x2dc>
    lowlev_cycleDelay(CYCLES_DELAY_FOR_HIGH_ADDR_SET);
   395c0:	e3a00014 	mov	r0, #20
   395c4:	ebff3ad1 	bl	8110 <lowlev_cycleDelay>
   395c8:	e584a028 	str	sl, [r4, #40]	; 0x28
    lowlev_cycleDelay(CYCLES_DELAY_FOR_CLEAR_LOW_ADDR);
   395cc:	e3a00005 	mov	r0, #5
   395d0:	ebff3ace 	bl	8110 <lowlev_cycleDelay>
        WR32(ARM_GPIO_GPSET0, muxVal << BR_MUX_LOW_BIT_POS);
   395d4:	e3a03b02 	mov	r3, #2048	; 0x800
        WR32(ARM_GPIO_GPSET0, 1 << BR_LADDR_CK);
   395d8:	e3a07801 	mov	r7, #65536	; 0x10000
        WR32(ARM_GPIO_GPCLR0, BR_MUX_CTRL_BIT_MASK);
   395dc:	e584a028 	str	sl, [r4, #40]	; 0x28
    lowlev_cycleDelay(CYCLES_DELAY_FOR_CLEAR_LOW_ADDR);
   395e0:	e3a00005 	mov	r0, #5
        WR32(ARM_GPIO_GPSET0, muxVal << BR_MUX_LOW_BIT_POS);
   395e4:	e584301c 	str	r3, [r4, #28]
   395e8:	ebff3ac8 	bl	8110 <lowlev_cycleDelay>
    for (uint32_t i = 0; i < (lowAddrByte & 0xff) + 1; i++) {
   395ec:	e3a09000 	mov	r9, #0
        WR32(ARM_GPIO_GPCLR0, BR_MUX_CTRL_BIT_MASK);
   395f0:	e584a028 	str	sl, [r4, #40]	; 0x28
        WR32(ARM_GPIO_GPSET0, 1 << BR_LADDR_CK);
   395f4:	e1a0a007 	mov	sl, r7
    addrLowSet(addr & 0xff);
   395f8:	e6ef5078 	uxtb	r5, r8
    for (uint32_t i = 0; i < (lowAddrByte & 0xff) + 1; i++) {
   395fc:	e2855001 	add	r5, r5, #1
        lowlev_cycleDelay(CYCLES_DELAY_FOR_LOW_ADDR_SET);
   39600:	e3a00005 	mov	r0, #5
        WR32(ARM_GPIO_GPSET0, 1 << BR_LADDR_CK);
   39604:	e584a01c 	str	sl, [r4, #28]
        lowlev_cycleDelay(CYCLES_DELAY_FOR_LOW_ADDR_SET);
   39608:	ebff3ac0 	bl	8110 <lowlev_cycleDelay>
    for (uint32_t i = 0; i < (lowAddrByte & 0xff) + 1; i++) {
   3960c:	e2899001 	add	r9, r9, #1
        WR32(ARM_GPIO_GPCLR0, 1 << BR_LADDR_CK);
   39610:	e5847028 	str	r7, [r4, #40]	; 0x28
        lowlev_cycleDelay(CYCLES_DELAY_FOR_LOW_ADDR_SET);
   39614:	e3a00005 	mov	r0, #5
   39618:	ebff3abc 	bl	8110 <lowlev_cycleDelay>
    for (uint32_t i = 0; i < (lowAddrByte & 0xff) + 1; i++) {
   3961c:	e1590005 	cmp	r9, r5
   39620:	1afffff6 	bne	39600 <BusAccess::blockRead(unsigned long, unsigned char*, unsigned long, bool, bool)+0x124>
    WR32(ARM_GPIO_GPSET0, BR_MUX_DATA_OE_BAR_LOW << BR_MUX_LOW_BIT_POS);
   39624:	e3a03c02 	mov	r3, #512	; 0x200
    for (uint32_t i = 0; i < len; i++) {
   39628:	e3560000 	cmp	r6, #0
    WR32(ARM_GPIO_GPSET0, BR_MUX_DATA_OE_BAR_LOW << BR_MUX_LOW_BIT_POS);
   3962c:	e584301c 	str	r3, [r4, #28]
    for (uint32_t i = 0; i < len; i++) {
   39630:	0a000051 	beq	3977c <BusAccess::blockRead(unsigned long, unsigned char*, unsigned long, bool, bool)+0x2a0>
   39634:	e59d2004 	ldr	r2, [sp, #4]
   39638:	e59f317c 	ldr	r3, [pc, #380]	; 397bc <BusAccess::blockRead(unsigned long, unsigned char*, unsigned long, bool, bool)+0x2e0>
   3963c:	e35b0000 	cmp	fp, #0
   39640:	e59fa178 	ldr	sl, [pc, #376]	; 397c0 <BusAccess::blockRead(unsigned long, unsigned char*, unsigned long, bool, bool)+0x2e4>
   39644:	01a0a003 	moveq	sl, r3
   39648:	e0823006 	add	r3, r2, r6
   3964c:	e58d3004 	str	r3, [sp, #4]
   39650:	e0483002 	sub	r3, r8, r2
   39654:	e1a05002 	mov	r5, r2
        WR32(ARM_GPIO_GPCLR0, (1 << (iorq ? BR_IORQ_BAR : BR_MREQ_BAR)) | (1 << BR_RD_BAR));
   39658:	e59f4158 	ldr	r4, [pc, #344]	; 397b8 <BusAccess::blockRead(unsigned long, unsigned char*, unsigned long, bool, bool)+0x2dc>
   3965c:	e58d3008 	str	r3, [sp, #8]
   39660:	ea000013 	b	396b4 <BusAccess::blockRead(unsigned long, unsigned char*, unsigned long, bool, bool)+0x1d8>
   39664:	e59f3158 	ldr	r3, [pc, #344]	; 397c4 <BusAccess::blockRead(unsigned long, unsigned char*, unsigned long, bool, bool)+0x2e8>
        lowlev_cycleDelay(CYCLES_DELAY_FOR_READ_FROM_PIB);
   39668:	e3a00005 	mov	r0, #5
        WR32(ARM_GPIO_GPCLR0, (1 << (iorq ? BR_IORQ_BAR : BR_MREQ_BAR)) | (1 << BR_RD_BAR));
   3966c:	e5843028 	str	r3, [r4, #40]	; 0x28
        lowlev_cycleDelay(CYCLES_DELAY_FOR_READ_FROM_PIB);
   39670:	ebff3aa6 	bl	8110 <lowlev_cycleDelay>
        *pData = (RD32(ARM_GPIO_GPLEV0) >> BR_DATA_BUS) & 0xff;
   39674:	e5943034 	ldr	r3, [r4, #52]	; 0x34
   39678:	e1a03a23 	lsr	r3, r3, #20
   3967c:	e5c53000 	strb	r3, [r5]
        WR32(ARM_GPIO_GPSET0, (1 << (iorq ? BR_IORQ_BAR : BR_MREQ_BAR)) | (1 << BR_RD_BAR) | (1 << BR_LADDR_CK));
   39680:	e584a01c 	str	sl, [r4, #28]
        lowlev_cycleDelay(CYCLES_DELAY_FOR_LOW_ADDR_SET);
   39684:	e3a00005 	mov	r0, #5
   39688:	ebff3aa0 	bl	8110 <lowlev_cycleDelay>
        WR32(ARM_GPIO_GPCLR0, 1 << BR_LADDR_CK);
   3968c:	e3a02801 	mov	r2, #65536	; 0x10000
   39690:	e59d3008 	ldr	r3, [sp, #8]
        pData++;
   39694:	e2855001 	add	r5, r5, #1
   39698:	e0853003 	add	r3, r5, r3
        if ((addr & 0xff) == 0) {
   3969c:	e31300ff 	tst	r3, #255	; 0xff
        WR32(ARM_GPIO_GPCLR0, 1 << BR_LADDR_CK);
   396a0:	e5842028 	str	r2, [r4, #40]	; 0x28
        if ((addr & 0xff) == 0) {
   396a4:	0a00000c 	beq	396dc <BusAccess::blockRead(unsigned long, unsigned char*, unsigned long, bool, bool)+0x200>
    for (uint32_t i = 0; i < len; i++) {
   396a8:	e59d3004 	ldr	r3, [sp, #4]
   396ac:	e1550003 	cmp	r5, r3
   396b0:	0a000031 	beq	3977c <BusAccess::blockRead(unsigned long, unsigned char*, unsigned long, bool, bool)+0x2a0>
        WR32(ARM_GPIO_GPCLR0, (1 << (iorq ? BR_IORQ_BAR : BR_MREQ_BAR)) | (1 << BR_RD_BAR));
   396b4:	e35b0000 	cmp	fp, #0
   396b8:	1affffe9 	bne	39664 <BusAccess::blockRead(unsigned long, unsigned char*, unsigned long, bool, bool)+0x188>
   396bc:	e59f3104 	ldr	r3, [pc, #260]	; 397c8 <BusAccess::blockRead(unsigned long, unsigned char*, unsigned long, bool, bool)+0x2ec>
        lowlev_cycleDelay(CYCLES_DELAY_FOR_READ_FROM_PIB);
   396c0:	e3a00005 	mov	r0, #5
        WR32(ARM_GPIO_GPCLR0, (1 << (iorq ? BR_IORQ_BAR : BR_MREQ_BAR)) | (1 << BR_RD_BAR));
   396c4:	e5843028 	str	r3, [r4, #40]	; 0x28
        lowlev_cycleDelay(CYCLES_DELAY_FOR_READ_FROM_PIB);
   396c8:	ebff3a90 	bl	8110 <lowlev_cycleDelay>
        *pData = (RD32(ARM_GPIO_GPLEV0) >> BR_DATA_BUS) & 0xff;
   396cc:	e5943034 	ldr	r3, [r4, #52]	; 0x34
   396d0:	e1a03a23 	lsr	r3, r3, #20
   396d4:	e5c53000 	strb	r3, [r5]
   396d8:	eaffffe8 	b	39680 <BusAccess::blockRead(unsigned long, unsigned char*, unsigned long, bool, bool)+0x1a4>
    addrHighSet(addr >> 8);
   396dc:	e3a09009 	mov	r9, #9
        WR32(ARM_GPIO_GPCLR0, BR_MUX_CTRL_BIT_MASK);
   396e0:	e3a06c0e 	mov	r6, #3584	; 0xe00
   396e4:	e1a08423 	lsr	r8, r3, #8
        WR32(ARM_GPIO_GPSET0, 1 << BR_HADDR_CK);
   396e8:	e3a07080 	mov	r7, #128	; 0x80
        if (highAddrByte & 0x80)
   396ec:	e2183080 	ands	r3, r8, #128	; 0x80
        lowlev_cycleDelay(CYCLES_DELAY_FOR_HIGH_ADDR_SET);
   396f0:	13a00014 	movne	r0, #20
   396f4:	03a00014 	moveq	r0, #20
   396f8:	e5846028 	str	r6, [r4, #40]	; 0x28
        WR32(ARM_GPIO_GPSET0, muxVal << BR_MUX_LOW_BIT_POS);
   396fc:	1584601c 	strne	r6, [r4, #28]
   39700:	0584301c 	streq	r3, [r4, #28]
   39704:	ebff3a81 	bl	8110 <lowlev_cycleDelay>
        WR32(ARM_GPIO_GPSET0, 1 << BR_HADDR_CK);
   39708:	e584701c 	str	r7, [r4, #28]
        lowlev_cycleDelay(CYCLES_DELAY_FOR_HIGH_ADDR_SET);
   3970c:	e3a00014 	mov	r0, #20
   39710:	ebff3a7e 	bl	8110 <lowlev_cycleDelay>
    for (uint32_t i = 0; i < 9; i++) {
   39714:	e2599001 	subs	r9, r9, #1
        highAddrByte = highAddrByte << 1;
   39718:	e1a08088 	lsl	r8, r8, #1
        WR32(ARM_GPIO_GPCLR0, 1 << BR_HADDR_CK);
   3971c:	e5847028 	str	r7, [r4, #40]	; 0x28
    for (uint32_t i = 0; i < 9; i++) {
   39720:	1afffff0 	bne	396e8 <BusAccess::blockRead(unsigned long, unsigned char*, unsigned long, bool, bool)+0x20c>
        WR32(ARM_GPIO_GPCLR0, BR_MUX_CTRL_BIT_MASK);
   39724:	e3a06c0e 	mov	r6, #3584	; 0xe00
    lowlev_cycleDelay(CYCLES_DELAY_FOR_HIGH_ADDR_SET);
   39728:	e3a00014 	mov	r0, #20
   3972c:	ebff3a77 	bl	8110 <lowlev_cycleDelay>
    lowlev_cycleDelay(CYCLES_DELAY_FOR_CLEAR_LOW_ADDR);
   39730:	e3a00005 	mov	r0, #5
   39734:	e5846028 	str	r6, [r4, #40]	; 0x28
   39738:	ebff3a74 	bl	8110 <lowlev_cycleDelay>
        WR32(ARM_GPIO_GPSET0, muxVal << BR_MUX_LOW_BIT_POS);
   3973c:	e3a03b02 	mov	r3, #2048	; 0x800
        WR32(ARM_GPIO_GPSET0, 1 << BR_LADDR_CK);
   39740:	e3a07801 	mov	r7, #65536	; 0x10000
        WR32(ARM_GPIO_GPCLR0, BR_MUX_CTRL_BIT_MASK);
   39744:	e5846028 	str	r6, [r4, #40]	; 0x28
    lowlev_cycleDelay(CYCLES_DELAY_FOR_CLEAR_LOW_ADDR);
   39748:	e3a00005 	mov	r0, #5
        WR32(ARM_GPIO_GPSET0, muxVal << BR_MUX_LOW_BIT_POS);
   3974c:	e584301c 	str	r3, [r4, #28]
   39750:	ebff3a6e 	bl	8110 <lowlev_cycleDelay>
        WR32(ARM_GPIO_GPCLR0, BR_MUX_CTRL_BIT_MASK);
   39754:	e5846028 	str	r6, [r4, #40]	; 0x28
        lowlev_cycleDelay(CYCLES_DELAY_FOR_LOW_ADDR_SET);
   39758:	e3a00005 	mov	r0, #5
        WR32(ARM_GPIO_GPSET0, 1 << BR_LADDR_CK);
   3975c:	e584701c 	str	r7, [r4, #28]
        lowlev_cycleDelay(CYCLES_DELAY_FOR_LOW_ADDR_SET);
   39760:	ebff3a6a 	bl	8110 <lowlev_cycleDelay>
        WR32(ARM_GPIO_GPCLR0, 1 << BR_LADDR_CK);
   39764:	e5847028 	str	r7, [r4, #40]	; 0x28
        lowlev_cycleDelay(CYCLES_DELAY_FOR_LOW_ADDR_SET);
   39768:	e3a00005 	mov	r0, #5
   3976c:	ebff3a67 	bl	8110 <lowlev_cycleDelay>
    for (uint32_t i = 0; i < len; i++) {
   39770:	e59d3004 	ldr	r3, [sp, #4]
   39774:	e1550003 	cmp	r5, r3
   39778:	1affffcd 	bne	396b4 <BusAccess::blockRead(unsigned long, unsigned char*, unsigned long, bool, bool)+0x1d8>
   3977c:	e3a02c0e 	mov	r2, #3584	; 0xe00
    if (busRqAndRelease) {
   39780:	e59d100c 	ldr	r1, [sp, #12]
   39784:	e59f302c 	ldr	r3, [pc, #44]	; 397b8 <BusAccess::blockRead(unsigned long, unsigned char*, unsigned long, bool, bool)+0x2dc>
   39788:	e3510000 	cmp	r1, #0
   3978c:	e5832028 	str	r2, [r3, #40]	; 0x28
   39790:	1a000002 	bne	397a0 <BusAccess::blockRead(unsigned long, unsigned char*, unsigned long, bool, bool)+0x2c4>
    return BR_OK;
   39794:	e3a00000 	mov	r0, #0
}
   39798:	e28dd014 	add	sp, sp, #20
   3979c:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
        controlRelease();
   397a0:	ebfffca3 	bl	38a34 <BusAccess::controlRelease()>
   397a4:	eafffffa 	b	39794 <BusAccess::blockRead(unsigned long, unsigned char*, unsigned long, bool, bool)+0x2b8>
        controlRelease();
   397a8:	ebfffca1 	bl	38a34 <BusAccess::controlRelease()>
        return BR_NO_BUS_ACK;
   397ac:	e3a00002 	mov	r0, #2
}
   397b0:	e28dd014 	add	sp, sp, #20
   397b4:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   397b8:	20200000 	.word	0x20200000
   397bc:	00050001 	.word	0x00050001
   397c0:	00050002 	.word	0x00050002
   397c4:	00040002 	.word	0x00040002
   397c8:	00040001 	.word	0x00040001

000397cc <BusAccess::clockSetup()>:
        else if (pin == 20) altMode = PINMODE_ALT5;
        else if (pin == 32) altMode = PINMODE_ALT0;
        else if (pin == 34) altMode = PINMODE_ALT0;
        if (altMode == INPUT)
            return false;
        _altMode = altMode;
   397cc:	e3a03004 	mov	r3, #4
{
   397d0:	e92d4070 	push	{r4, r5, r6, lr}
   397d4:	e59f40a4 	ldr	r4, [pc, #164]	; 39880 <BusAccess::clockSetup()+0xb4>
   397d8:	e24dd008 	sub	sp, sp, #8
        bool isEnabled = _enabled;
        if (_enabled)
   397dc:	e5d42008 	ldrb	r2, [r4, #8]
        _altMode = altMode;
   397e0:	e5843010 	str	r3, [r4, #16]
        if (_enabled)
   397e4:	e3520000 	cmp	r2, #0
            enable(false);
        _outputPin = pin;
   397e8:	0584300c 	streq	r3, [r4, #12]
        if (_enabled)
   397ec:	0a000021 	beq	39878 <BusAccess::clockSetup()+0xac>

        // Disable to start
        WR32(ARM_CM_GP0CTL, ARM_CM_PASSWD | ARM_CM_CTL_CLKSRC_PLLD);
        if (!en)
        {
            _enabled = false;
   397f0:	e3a01000 	mov	r1, #0
        WR32(ARM_CM_GP0CTL, ARM_CM_PASSWD | ARM_CM_CTL_CLKSRC_PLLD);
   397f4:	e59f2088 	ldr	r2, [pc, #136]	; 39884 <BusAccess::clockSetup()+0xb8>
        _outputPin = pin;
   397f8:	e584300c 	str	r3, [r4, #12]
        WR32(ARM_CM_GP0CTL, ARM_CM_PASSWD | ARM_CM_CTL_CLKSRC_PLLD);
   397fc:	e59f3084 	ldr	r3, [pc, #132]	; 39888 <BusAccess::clockSetup()+0xbc>
            _enabled = false;
   39800:	e5c41008 	strb	r1, [r4, #8]
        int busyCount = 0;
        static const int MAX_BUSY_WAIT_COUNT = 100;
        // uint32_t lastBusy = 0;
        for (int i = 0; i < MAX_BUSY_WAIT_COUNT; i++)
        {
            if ((RD32(ARM_CM_GP0CTL) & ARM_CM_CTL_BUSY) == 0)
   39804:	e1a06002 	mov	r6, r2
        WR32(ARM_CM_GP0CTL, ARM_CM_PASSWD | ARM_CM_CTL_CLKSRC_PLLD);
   39808:	e5823070 	str	r3, [r2, #112]	; 0x70
        if (_outputPin == -1 || _altMode == INPUT)
   3980c:	e3a05064 	mov	r5, #100	; 0x64
        WR32(ARM_CM_GP0CTL, ARM_CM_PASSWD | ARM_CM_CTL_CLKSRC_PLLD);
   39810:	e5823070 	str	r3, [r2, #112]	; 0x70
   39814:	ea000003 	b	39828 <BusAccess::clockSetup()+0x5c>
                break;
            microsDelay(1);
   39818:	e3a00001 	mov	r0, #1
   3981c:	ebfff3e1 	bl	367a8 <microsDelay>
        for (int i = 0; i < MAX_BUSY_WAIT_COUNT; i++)
   39820:	e2555001 	subs	r5, r5, #1
   39824:	0a000002 	beq	39834 <BusAccess::clockSetup()+0x68>
            if ((RD32(ARM_CM_GP0CTL) & ARM_CM_CTL_BUSY) == 0)
   39828:	e5963070 	ldr	r3, [r6, #112]	; 0x70
   3982c:	e3130080 	tst	r3, #128	; 0x80
   39830:	1afffff8 	bne	39818 <BusAccess::clockSetup()+0x4c>
            busyCount++;
            // lastBusy = RD32(ARM_CM_PWMCTL);
        }

        // Set the output pin
        pinMode(_outputPin, _altMode);
   39834:	e5d41010 	ldrb	r1, [r4, #16]
   39838:	e5d4000c 	ldrb	r0, [r4, #12]
   3983c:	ebffeea8 	bl	352e4 <pinMode>

        // Set the divisor
        uint32_t divisor = ARM_CM_CTL_PLLD_FREQ / _freqReqd;
   39840:	e5941004 	ldr	r1, [r4, #4]
   39844:	e59f0040 	ldr	r0, [pc, #64]	; 3988c <BusAccess::clockSetup()+0xc0>
   39848:	eb005459 	bl	4e9b4 <__udivsi3>
        if (divisor > 4095)
            divisor = 4095;
        WR32(ARM_CM_GP0DIV, ARM_CM_PASSWD | divisor << 12);
   3984c:	e59f303c 	ldr	r3, [pc, #60]	; 39890 <BusAccess::clockSetup()+0xc4>

        // Enable (or disable) as required
        uint32_t enMask = en ? ARM_CM_CTL_ENAB : 0;
        WR32(ARM_CM_GP0CTL, ARM_CM_PASSWD | enMask | ARM_CM_CTL_CLKSRC_PLLD);
        _enabled = true;
   39850:	e3a0c001 	mov	ip, #1
        WR32(ARM_CM_GP0DIV, ARM_CM_PASSWD | divisor << 12);
   39854:	e1500003 	cmp	r0, r3
   39858:	31a03000 	movcc	r3, r0
   3985c:	e59f2020 	ldr	r2, [pc, #32]	; 39884 <BusAccess::clockSetup()+0xb8>
   39860:	e1a03603 	lsl	r3, r3, #12
        WR32(ARM_CM_GP0CTL, ARM_CM_PASSWD | enMask | ARM_CM_CTL_CLKSRC_PLLD);
   39864:	e59f1028 	ldr	r1, [pc, #40]	; 39894 <BusAccess::clockSetup()+0xc8>
        WR32(ARM_CM_GP0DIV, ARM_CM_PASSWD | divisor << 12);
   39868:	e383345a 	orr	r3, r3, #1509949440	; 0x5a000000
   3986c:	e5823074 	str	r3, [r2, #116]	; 0x74
        _enabled = true;
   39870:	e5c4c008 	strb	ip, [r4, #8]
        WR32(ARM_CM_GP0CTL, ARM_CM_PASSWD | enMask | ARM_CM_CTL_CLKSRC_PLLD);
   39874:	e5821070 	str	r1, [r2, #112]	; 0x70
}
   39878:	e28dd008 	add	sp, sp, #8
   3987c:	e8bd8070 	pop	{r4, r5, r6, pc}
   39880:	0008c8b0 	.word	0x0008c8b0
   39884:	20101000 	.word	0x20101000
   39888:	5a000006 	.word	0x5a000006
   3988c:	1dcd6500 	.word	0x1dcd6500
   39890:	00000fff 	.word	0x00000fff
   39894:	5a000016 	.word	0x5a000016

00039898 <BusAccess::clockSetFreqHz(unsigned long)>:
{
   39898:	e92d4070 	push	{r4, r5, r6, lr}
        bool isEnabled = _enabled;
   3989c:	e59f4114 	ldr	r4, [pc, #276]	; 399b8 <BusAccess::clockSetFreqHz(unsigned long)+0x120>
   398a0:	e24dd008 	sub	sp, sp, #8
   398a4:	e5d46008 	ldrb	r6, [r4, #8]
        LogWrite("ClockGen", LOG_DEBUG, "setFrequency %d curEnabled %d",
   398a8:	e1a03000 	mov	r3, r0
   398ac:	e1a05000 	mov	r5, r0
   398b0:	e59f2104 	ldr	r2, [pc, #260]	; 399bc <BusAccess::clockSetFreqHz(unsigned long)+0x124>
   398b4:	e58d6000 	str	r6, [sp]
   398b8:	e3a01004 	mov	r1, #4
   398bc:	e59f00fc 	ldr	r0, [pc, #252]	; 399c0 <BusAccess::clockSetFreqHz(unsigned long)+0x128>
   398c0:	ebffaa2c 	bl	24178 <LogWrite>
        if (_enabled)
   398c4:	e5d43008 	ldrb	r3, [r4, #8]
   398c8:	e3530000 	cmp	r3, #0
   398cc:	0a000009 	beq	398f8 <BusAccess::clockSetFreqHz(unsigned long)+0x60>
            _enabled = false;
   398d0:	e3a01000 	mov	r1, #0
        WR32(ARM_CM_GP0CTL, ARM_CM_PASSWD | ARM_CM_CTL_CLKSRC_PLLD);
   398d4:	e59f30e8 	ldr	r3, [pc, #232]	; 399c4 <BusAccess::clockSetFreqHz(unsigned long)+0x12c>
   398d8:	e59f20e8 	ldr	r2, [pc, #232]	; 399c8 <BusAccess::clockSetFreqHz(unsigned long)+0x130>
        if (isEnabled)
   398dc:	e1560001 	cmp	r6, r1
        _freqReqd = newFreq;
   398e0:	e5845004 	str	r5, [r4, #4]
            _enabled = false;
   398e4:	e5c41008 	strb	r1, [r4, #8]
        WR32(ARM_CM_GP0CTL, ARM_CM_PASSWD | ARM_CM_CTL_CLKSRC_PLLD);
   398e8:	e5832070 	str	r2, [r3, #112]	; 0x70
        if (isEnabled)
   398ec:	1a000004 	bne	39904 <BusAccess::clockSetFreqHz(unsigned long)+0x6c>
}
   398f0:	e28dd008 	add	sp, sp, #8
   398f4:	e8bd8070 	pop	{r4, r5, r6, pc}
   398f8:	e3560000 	cmp	r6, #0
        _freqReqd = newFreq;
   398fc:	e5845004 	str	r5, [r4, #4]
        if (isEnabled)
   39900:	0afffffa 	beq	398f0 <BusAccess::clockSetFreqHz(unsigned long)+0x58>
        if (_outputPin == -1 || _altMode == INPUT)
   39904:	e594300c 	ldr	r3, [r4, #12]
        WR32(ARM_CM_GP0CTL, ARM_CM_PASSWD | ARM_CM_CTL_CLKSRC_PLLD);
   39908:	e59f20b8 	ldr	r2, [pc, #184]	; 399c8 <BusAccess::clockSetFreqHz(unsigned long)+0x130>
   3990c:	e59f60b0 	ldr	r6, [pc, #176]	; 399c4 <BusAccess::clockSetFreqHz(unsigned long)+0x12c>
        if (_outputPin == -1 || _altMode == INPUT)
   39910:	e3730001 	cmn	r3, #1
        WR32(ARM_CM_GP0CTL, ARM_CM_PASSWD | ARM_CM_CTL_CLKSRC_PLLD);
   39914:	e5862070 	str	r2, [r6, #112]	; 0x70
   39918:	e5942010 	ldr	r2, [r4, #16]
        if (_outputPin == -1 || _altMode == INPUT)
   3991c:	0a000002 	beq	3992c <BusAccess::clockSetFreqHz(unsigned long)+0x94>
   39920:	e3520000 	cmp	r2, #0
   39924:	13a05064 	movne	r5, #100	; 0x64
   39928:	1a00000c 	bne	39960 <BusAccess::clockSetFreqHz(unsigned long)+0xc8>
            _enabled = false;
   3992c:	e3a0c000 	mov	ip, #0
            LogWrite("ClockGen", LOG_ERROR, "Invalid settings pin %d mode %d",
   39930:	e58d2000 	str	r2, [sp]
   39934:	e3a01001 	mov	r1, #1
   39938:	e59f208c 	ldr	r2, [pc, #140]	; 399cc <BusAccess::clockSetFreqHz(unsigned long)+0x134>
   3993c:	e59f007c 	ldr	r0, [pc, #124]	; 399c0 <BusAccess::clockSetFreqHz(unsigned long)+0x128>
            _enabled = false;
   39940:	e5c4c008 	strb	ip, [r4, #8]
            LogWrite("ClockGen", LOG_ERROR, "Invalid settings pin %d mode %d",
   39944:	ebffaa0b 	bl	24178 <LogWrite>
   39948:	e28dd008 	add	sp, sp, #8
   3994c:	e8bd8070 	pop	{r4, r5, r6, pc}
            microsDelay(1);
   39950:	e3a00001 	mov	r0, #1
   39954:	ebfff393 	bl	367a8 <microsDelay>
        for (int i = 0; i < MAX_BUSY_WAIT_COUNT; i++)
   39958:	e2555001 	subs	r5, r5, #1
   3995c:	0a000002 	beq	3996c <BusAccess::clockSetFreqHz(unsigned long)+0xd4>
            if ((RD32(ARM_CM_GP0CTL) & ARM_CM_CTL_BUSY) == 0)
   39960:	e5963070 	ldr	r3, [r6, #112]	; 0x70
   39964:	e3130080 	tst	r3, #128	; 0x80
   39968:	1afffff8 	bne	39950 <BusAccess::clockSetFreqHz(unsigned long)+0xb8>
        pinMode(_outputPin, _altMode);
   3996c:	e5d41010 	ldrb	r1, [r4, #16]
   39970:	e5d4000c 	ldrb	r0, [r4, #12]
   39974:	ebffee5a 	bl	352e4 <pinMode>
        uint32_t divisor = ARM_CM_CTL_PLLD_FREQ / _freqReqd;
   39978:	e5941004 	ldr	r1, [r4, #4]
   3997c:	e59f004c 	ldr	r0, [pc, #76]	; 399d0 <BusAccess::clockSetFreqHz(unsigned long)+0x138>
   39980:	eb00540b 	bl	4e9b4 <__udivsi3>
        WR32(ARM_CM_GP0DIV, ARM_CM_PASSWD | divisor << 12);
   39984:	e59f3048 	ldr	r3, [pc, #72]	; 399d4 <BusAccess::clockSetFreqHz(unsigned long)+0x13c>
        _enabled = true;
   39988:	e3a0c001 	mov	ip, #1
        WR32(ARM_CM_GP0DIV, ARM_CM_PASSWD | divisor << 12);
   3998c:	e1500003 	cmp	r0, r3
   39990:	31a03000 	movcc	r3, r0
   39994:	e59f2028 	ldr	r2, [pc, #40]	; 399c4 <BusAccess::clockSetFreqHz(unsigned long)+0x12c>
        WR32(ARM_CM_GP0CTL, ARM_CM_PASSWD | enMask | ARM_CM_CTL_CLKSRC_PLLD);
   39998:	e59f1038 	ldr	r1, [pc, #56]	; 399d8 <BusAccess::clockSetFreqHz(unsigned long)+0x140>
        WR32(ARM_CM_GP0DIV, ARM_CM_PASSWD | divisor << 12);
   3999c:	e1a03603 	lsl	r3, r3, #12
   399a0:	e383345a 	orr	r3, r3, #1509949440	; 0x5a000000
   399a4:	e5823074 	str	r3, [r2, #116]	; 0x74
        _enabled = true;
   399a8:	e5c4c008 	strb	ip, [r4, #8]
        WR32(ARM_CM_GP0CTL, ARM_CM_PASSWD | enMask | ARM_CM_CTL_CLKSRC_PLLD);
   399ac:	e5821070 	str	r1, [r2, #112]	; 0x70
   399b0:	e28dd008 	add	sp, sp, #8
   399b4:	e8bd8070 	pop	{r4, r5, r6, pc}
   399b8:	0008c8b0 	.word	0x0008c8b0
   399bc:	00055b14 	.word	0x00055b14
   399c0:	00055b08 	.word	0x00055b08
   399c4:	20101000 	.word	0x20101000
   399c8:	5a000006 	.word	0x5a000006
   399cc:	00055ae8 	.word	0x00055ae8
   399d0:	1dcd6500 	.word	0x1dcd6500
   399d4:	00000fff 	.word	0x00000fff
   399d8:	5a000016 	.word	0x5a000016

000399dc <BusAccess::clockEnable(bool)>:
{
   399dc:	e92d4070 	push	{r4, r5, r6, lr}
        if (en == _enabled)
   399e0:	e59f50cc 	ldr	r5, [pc, #204]	; 39ab4 <BusAccess::clockEnable(bool)+0xd8>
   399e4:	e24dd008 	sub	sp, sp, #8
   399e8:	e5d53008 	ldrb	r3, [r5, #8]
   399ec:	e1530000 	cmp	r3, r0
   399f0:	0a000013 	beq	39a44 <BusAccess::clockEnable(bool)+0x68>
        WR32(ARM_CM_GP0CTL, ARM_CM_PASSWD | ARM_CM_CTL_CLKSRC_PLLD);
   399f4:	e59f60bc 	ldr	r6, [pc, #188]	; 39ab8 <BusAccess::clockEnable(bool)+0xdc>
   399f8:	e59f30bc 	ldr	r3, [pc, #188]	; 39abc <BusAccess::clockEnable(bool)+0xe0>
        if (!en)
   399fc:	e3500000 	cmp	r0, #0
        WR32(ARM_CM_GP0CTL, ARM_CM_PASSWD | ARM_CM_CTL_CLKSRC_PLLD);
   39a00:	e5863070 	str	r3, [r6, #112]	; 0x70
            _enabled = false;
   39a04:	05c50008 	strbeq	r0, [r5, #8]
        if (!en)
   39a08:	0a00000d 	beq	39a44 <BusAccess::clockEnable(bool)+0x68>
        if (_outputPin == -1 || _altMode == INPUT)
   39a0c:	e595300c 	ldr	r3, [r5, #12]
   39a10:	e5952010 	ldr	r2, [r5, #16]
   39a14:	e3730001 	cmn	r3, #1
   39a18:	0a000002 	beq	39a28 <BusAccess::clockEnable(bool)+0x4c>
   39a1c:	e3520000 	cmp	r2, #0
   39a20:	13a04064 	movne	r4, #100	; 0x64
   39a24:	1a00000c 	bne	39a5c <BusAccess::clockEnable(bool)+0x80>
            _enabled = false;
   39a28:	e3a0c000 	mov	ip, #0
            LogWrite("ClockGen", LOG_ERROR, "Invalid settings pin %d mode %d",
   39a2c:	e58d2000 	str	r2, [sp]
   39a30:	e3a01001 	mov	r1, #1
   39a34:	e59f2084 	ldr	r2, [pc, #132]	; 39ac0 <BusAccess::clockEnable(bool)+0xe4>
   39a38:	e59f0084 	ldr	r0, [pc, #132]	; 39ac4 <BusAccess::clockEnable(bool)+0xe8>
            _enabled = false;
   39a3c:	e5c5c008 	strb	ip, [r5, #8]
            LogWrite("ClockGen", LOG_ERROR, "Invalid settings pin %d mode %d",
   39a40:	ebffa9cc 	bl	24178 <LogWrite>
}
   39a44:	e28dd008 	add	sp, sp, #8
   39a48:	e8bd8070 	pop	{r4, r5, r6, pc}
            microsDelay(1);
   39a4c:	e3a00001 	mov	r0, #1
   39a50:	ebfff354 	bl	367a8 <microsDelay>
        for (int i = 0; i < MAX_BUSY_WAIT_COUNT; i++)
   39a54:	e2544001 	subs	r4, r4, #1
   39a58:	0a000002 	beq	39a68 <BusAccess::clockEnable(bool)+0x8c>
            if ((RD32(ARM_CM_GP0CTL) & ARM_CM_CTL_BUSY) == 0)
   39a5c:	e5963070 	ldr	r3, [r6, #112]	; 0x70
   39a60:	e3130080 	tst	r3, #128	; 0x80
   39a64:	1afffff8 	bne	39a4c <BusAccess::clockEnable(bool)+0x70>
        pinMode(_outputPin, _altMode);
   39a68:	e5d51010 	ldrb	r1, [r5, #16]
   39a6c:	e5d5000c 	ldrb	r0, [r5, #12]
   39a70:	ebffee1b 	bl	352e4 <pinMode>
        uint32_t divisor = ARM_CM_CTL_PLLD_FREQ / _freqReqd;
   39a74:	e5951004 	ldr	r1, [r5, #4]
   39a78:	e59f0048 	ldr	r0, [pc, #72]	; 39ac8 <BusAccess::clockEnable(bool)+0xec>
   39a7c:	eb0053cc 	bl	4e9b4 <__udivsi3>
        WR32(ARM_CM_GP0DIV, ARM_CM_PASSWD | divisor << 12);
   39a80:	e59f3044 	ldr	r3, [pc, #68]	; 39acc <BusAccess::clockEnable(bool)+0xf0>
        _enabled = true;
   39a84:	e3a0c001 	mov	ip, #1
        WR32(ARM_CM_GP0DIV, ARM_CM_PASSWD | divisor << 12);
   39a88:	e1500003 	cmp	r0, r3
   39a8c:	31a03000 	movcc	r3, r0
   39a90:	e59f2020 	ldr	r2, [pc, #32]	; 39ab8 <BusAccess::clockEnable(bool)+0xdc>
        WR32(ARM_CM_GP0CTL, ARM_CM_PASSWD | enMask | ARM_CM_CTL_CLKSRC_PLLD);
   39a94:	e59f1034 	ldr	r1, [pc, #52]	; 39ad0 <BusAccess::clockEnable(bool)+0xf4>
        WR32(ARM_CM_GP0DIV, ARM_CM_PASSWD | divisor << 12);
   39a98:	e1a03603 	lsl	r3, r3, #12
   39a9c:	e383345a 	orr	r3, r3, #1509949440	; 0x5a000000
   39aa0:	e5823074 	str	r3, [r2, #116]	; 0x74
        _enabled = true;
   39aa4:	e5c5c008 	strb	ip, [r5, #8]
        WR32(ARM_CM_GP0CTL, ARM_CM_PASSWD | enMask | ARM_CM_CTL_CLKSRC_PLLD);
   39aa8:	e5821070 	str	r1, [r2, #112]	; 0x70
   39aac:	e28dd008 	add	sp, sp, #8
   39ab0:	e8bd8070 	pop	{r4, r5, r6, pc}
   39ab4:	0008c8b0 	.word	0x0008c8b0
   39ab8:	20101000 	.word	0x20101000
   39abc:	5a000006 	.word	0x5a000006
   39ac0:	00055ae8 	.word	0x00055ae8
   39ac4:	00055b08 	.word	0x00055b08
   39ac8:	1dcd6500 	.word	0x1dcd6500
   39acc:	00000fff 	.word	0x00000fff
   39ad0:	5a000016 	.word	0x5a000016

00039ad4 <BusAccess::clockCurFreqHz()>:
    return _clockGenerator.getFreqInHz();
   39ad4:	e59f3004 	ldr	r3, [pc, #4]	; 39ae0 <BusAccess::clockCurFreqHz()+0xc>
}
   39ad8:	e5930004 	ldr	r0, [r3, #4]
   39adc:	e12fff1e 	bx	lr
   39ae0:	0008c8b0 	.word	0x0008c8b0

00039ae4 <BusAccess::clockGetMinFreqHz()>:
}
   39ae4:	e59f0000 	ldr	r0, [pc]	; 39aec <BusAccess::clockGetMinFreqHz()+0x8>
   39ae8:	e12fff1e 	bx	lr
   39aec:	00030d40 	.word	0x00030d40

00039af0 <BusAccess::clockGetMaxFreqHz()>:
}
   39af0:	e59f0000 	ldr	r0, [pc]	; 39af8 <BusAccess::clockGetMaxFreqHz()+0x8>
   39af4:	e12fff1e 	bx	lr
   39af8:	017d7840 	.word	0x017d7840

00039afc <BusAccess::waitEnablementUpdate()>:
    for (int i = 0; i < _busSocketCount; i++)
   39afc:	e59f32e4 	ldr	r3, [pc, #740]	; 39de8 <BusAccess::waitEnablementUpdate()+0x2ec>
   39b00:	e5932000 	ldr	r2, [r3]
   39b04:	e3520000 	cmp	r2, #0
   39b08:	da000095 	ble	39d64 <BusAccess::waitEnablementUpdate()+0x268>
        if (_busSockets[i].enabled)
   39b0c:	e59f32d8 	ldr	r3, [pc, #728]	; 39dec <BusAccess::waitEnablementUpdate()+0x2f0>
   39b10:	e5d31000 	ldrb	r1, [r3]
   39b14:	e3510000 	cmp	r1, #0
   39b18:	0a000020 	beq	39ba0 <BusAccess::waitEnablementUpdate()+0xa4>
    for (int i = 0; i < _busSocketCount; i++)
   39b1c:	e3520001 	cmp	r2, #1
            memWait = memWait || _busSockets[i].waitOnMemory;
   39b20:	e5d3100c 	ldrb	r1, [r3, #12]
            ioWait = ioWait || _busSockets[i].waitOnIO;
   39b24:	e5d3000d 	ldrb	r0, [r3, #13]
    for (int i = 0; i < _busSocketCount; i++)
   39b28:	0a000066 	beq	39cc8 <BusAccess::waitEnablementUpdate()+0x1cc>
        if (_busSockets[i].enabled)
   39b2c:	e5d3c028 	ldrb	ip, [r3, #40]	; 0x28
   39b30:	e35c0000 	cmp	ip, #0
   39b34:	0a000004 	beq	39b4c <BusAccess::waitEnablementUpdate()+0x50>
            memWait = memWait || _busSockets[i].waitOnMemory;
   39b38:	e3510000 	cmp	r1, #0
   39b3c:	0a0000a7 	beq	39de0 <BusAccess::waitEnablementUpdate()+0x2e4>
            ioWait = ioWait || _busSockets[i].waitOnIO;
   39b40:	e3500000 	cmp	r0, #0
   39b44:	1a00001f 	bne	39bc8 <BusAccess::waitEnablementUpdate()+0xcc>
   39b48:	e5d30035 	ldrb	r0, [r3, #53]	; 0x35
    for (int i = 0; i < _busSocketCount; i++)
   39b4c:	e3520002 	cmp	r2, #2
   39b50:	0a00005c 	beq	39cc8 <BusAccess::waitEnablementUpdate()+0x1cc>
        if (_busSockets[i].enabled)
   39b54:	e5d3c050 	ldrb	ip, [r3, #80]	; 0x50
   39b58:	e35c0000 	cmp	ip, #0
   39b5c:	0a00001e 	beq	39bdc <BusAccess::waitEnablementUpdate()+0xe0>
            memWait = memWait || _busSockets[i].waitOnMemory;
   39b60:	e3510000 	cmp	r1, #0
   39b64:	05d3105c 	ldrbeq	r1, [r3, #92]	; 0x5c
            ioWait = ioWait || _busSockets[i].waitOnIO;
   39b68:	e3500000 	cmp	r0, #0
   39b6c:	0a000072 	beq	39d3c <BusAccess::waitEnablementUpdate()+0x240>
    for (int i = 0; i < _busSocketCount; i++)
   39b70:	e3520003 	cmp	r2, #3
   39b74:	1a00001a 	bne	39be4 <BusAccess::waitEnablementUpdate()+0xe8>
    _waitOnIO = ioWait;
   39b78:	e3a0c001 	mov	ip, #1
    uint32_t pwmCtrl = RD32(ARM_PWM_CTL);
   39b7c:	e59f326c 	ldr	r3, [pc, #620]	; 39df0 <BusAccess::waitEnablementUpdate()+0x2f4>
    _waitOnIO = ioWait;
   39b80:	e59f026c 	ldr	r0, [pc, #620]	; 39df4 <BusAccess::waitEnablementUpdate()+0x2f8>
    uint32_t pwmCtrl = RD32(ARM_PWM_CTL);
   39b84:	e5933000 	ldr	r3, [r3]
    _waitOnMemory = memWait;
   39b88:	e59f2268 	ldr	r2, [pc, #616]	; 39df8 <BusAccess::waitEnablementUpdate()+0x2fc>
    pwmCtrl &= ~(ARM_PWM_CTL_SBIT1 | ARM_PWM_CTL_SBIT2);
   39b8c:	e3c33b02 	bic	r3, r3, #2048	; 0x800
    _waitOnIO = ioWait;
   39b90:	e5c0c000 	strb	ip, [r0]
    _waitOnMemory = memWait;
   39b94:	e5c21000 	strb	r1, [r2]
    pwmCtrl &= ~(ARM_PWM_CTL_SBIT1 | ARM_PWM_CTL_SBIT2);
   39b98:	e3c33008 	bic	r3, r3, #8
   39b9c:	ea000053 	b	39cf0 <BusAccess::waitEnablementUpdate()+0x1f4>
    for (int i = 0; i < _busSocketCount; i++)
   39ba0:	e3520001 	cmp	r2, #1
   39ba4:	0a000081 	beq	39db0 <BusAccess::waitEnablementUpdate()+0x2b4>
        if (_busSockets[i].enabled)
   39ba8:	e5d30028 	ldrb	r0, [r3, #40]	; 0x28
   39bac:	e3500000 	cmp	r0, #0
    bool memWait = false;
   39bb0:	01a01000 	moveq	r1, r0
        if (_busSockets[i].enabled)
   39bb4:	0affffe4 	beq	39b4c <BusAccess::waitEnablementUpdate()+0x50>
            memWait = memWait || _busSockets[i].waitOnMemory;
   39bb8:	e1a00001 	mov	r0, r1
            ioWait = ioWait || _busSockets[i].waitOnIO;
   39bbc:	e3500000 	cmp	r0, #0
            memWait = memWait || _busSockets[i].waitOnMemory;
   39bc0:	e5d31034 	ldrb	r1, [r3, #52]	; 0x34
            ioWait = ioWait || _busSockets[i].waitOnIO;
   39bc4:	0affffdf 	beq	39b48 <BusAccess::waitEnablementUpdate()+0x4c>
    for (int i = 0; i < _busSocketCount; i++)
   39bc8:	e3520002 	cmp	r2, #2
   39bcc:	0affffe9 	beq	39b78 <BusAccess::waitEnablementUpdate()+0x7c>
        if (_busSockets[i].enabled)
   39bd0:	e5d3c050 	ldrb	ip, [r3, #80]	; 0x50
   39bd4:	e35c0000 	cmp	ip, #0
   39bd8:	1affffe0 	bne	39b60 <BusAccess::waitEnablementUpdate()+0x64>
    for (int i = 0; i < _busSocketCount; i++)
   39bdc:	e3520003 	cmp	r2, #3
   39be0:	0a000038 	beq	39cc8 <BusAccess::waitEnablementUpdate()+0x1cc>
        if (_busSockets[i].enabled)
   39be4:	e5d3c078 	ldrb	ip, [r3, #120]	; 0x78
   39be8:	e35c0000 	cmp	ip, #0
   39bec:	0a000046 	beq	39d0c <BusAccess::waitEnablementUpdate()+0x210>
            memWait = memWait || _busSockets[i].waitOnMemory;
   39bf0:	e3510000 	cmp	r1, #0
   39bf4:	05d31084 	ldrbeq	r1, [r3, #132]	; 0x84
            ioWait = ioWait || _busSockets[i].waitOnIO;
   39bf8:	e3500000 	cmp	r0, #0
   39bfc:	0a000041 	beq	39d08 <BusAccess::waitEnablementUpdate()+0x20c>
    for (int i = 0; i < _busSocketCount; i++)
   39c00:	e3520004 	cmp	r2, #4
   39c04:	0affffdb 	beq	39b78 <BusAccess::waitEnablementUpdate()+0x7c>
        if (_busSockets[i].enabled)
   39c08:	e5d3c0a0 	ldrb	ip, [r3, #160]	; 0xa0
   39c0c:	e35c0000 	cmp	ip, #0
   39c10:	1a000042 	bne	39d20 <BusAccess::waitEnablementUpdate()+0x224>
    for (int i = 0; i < _busSocketCount; i++)
   39c14:	e3520005 	cmp	r2, #5
   39c18:	0a00002a 	beq	39cc8 <BusAccess::waitEnablementUpdate()+0x1cc>
        if (_busSockets[i].enabled)
   39c1c:	e5d3c0c8 	ldrb	ip, [r3, #200]	; 0xc8
   39c20:	e35c0000 	cmp	ip, #0
   39c24:	0a000004 	beq	39c3c <BusAccess::waitEnablementUpdate()+0x140>
            memWait = memWait || _busSockets[i].waitOnMemory;
   39c28:	e3510000 	cmp	r1, #0
   39c2c:	05d310d4 	ldrbeq	r1, [r3, #212]	; 0xd4
            ioWait = ioWait || _busSockets[i].waitOnIO;
   39c30:	e3500000 	cmp	r0, #0
   39c34:	1a000054 	bne	39d8c <BusAccess::waitEnablementUpdate()+0x290>
   39c38:	e5d300d5 	ldrb	r0, [r3, #213]	; 0xd5
    for (int i = 0; i < _busSocketCount; i++)
   39c3c:	e3520006 	cmp	r2, #6
   39c40:	0a000020 	beq	39cc8 <BusAccess::waitEnablementUpdate()+0x1cc>
        if (_busSockets[i].enabled)
   39c44:	e5d3c0f0 	ldrb	ip, [r3, #240]	; 0xf0
   39c48:	e35c0000 	cmp	ip, #0
   39c4c:	0a000004 	beq	39c64 <BusAccess::waitEnablementUpdate()+0x168>
            memWait = memWait || _busSockets[i].waitOnMemory;
   39c50:	e3510000 	cmp	r1, #0
   39c54:	05d310fc 	ldrbeq	r1, [r3, #252]	; 0xfc
            ioWait = ioWait || _busSockets[i].waitOnIO;
   39c58:	e3500000 	cmp	r0, #0
   39c5c:	1a00004d 	bne	39d98 <BusAccess::waitEnablementUpdate()+0x29c>
   39c60:	e5d300fd 	ldrb	r0, [r3, #253]	; 0xfd
    for (int i = 0; i < _busSocketCount; i++)
   39c64:	e3520007 	cmp	r2, #7
   39c68:	0a000016 	beq	39cc8 <BusAccess::waitEnablementUpdate()+0x1cc>
        if (_busSockets[i].enabled)
   39c6c:	e5d3c118 	ldrb	ip, [r3, #280]	; 0x118
   39c70:	e35c0000 	cmp	ip, #0
   39c74:	0a000004 	beq	39c8c <BusAccess::waitEnablementUpdate()+0x190>
            memWait = memWait || _busSockets[i].waitOnMemory;
   39c78:	e3510000 	cmp	r1, #0
   39c7c:	05d31124 	ldrbeq	r1, [r3, #292]	; 0x124
            ioWait = ioWait || _busSockets[i].waitOnIO;
   39c80:	e3500000 	cmp	r0, #0
   39c84:	1a000046 	bne	39da4 <BusAccess::waitEnablementUpdate()+0x2a8>
   39c88:	e5d30125 	ldrb	r0, [r3, #293]	; 0x125
    for (int i = 0; i < _busSocketCount; i++)
   39c8c:	e3520008 	cmp	r2, #8
   39c90:	0a00000c 	beq	39cc8 <BusAccess::waitEnablementUpdate()+0x1cc>
        if (_busSockets[i].enabled)
   39c94:	e5d3c140 	ldrb	ip, [r3, #320]	; 0x140
   39c98:	e35c0000 	cmp	ip, #0
   39c9c:	1a000028 	bne	39d44 <BusAccess::waitEnablementUpdate()+0x248>
    for (int i = 0; i < _busSocketCount; i++)
   39ca0:	e3520009 	cmp	r2, #9
   39ca4:	0a000007 	beq	39cc8 <BusAccess::waitEnablementUpdate()+0x1cc>
        if (_busSockets[i].enabled)
   39ca8:	e5d32168 	ldrb	r2, [r3, #360]	; 0x168
   39cac:	e3520000 	cmp	r2, #0
   39cb0:	0a000004 	beq	39cc8 <BusAccess::waitEnablementUpdate()+0x1cc>
            memWait = memWait || _busSockets[i].waitOnMemory;
   39cb4:	e3510000 	cmp	r1, #0
   39cb8:	05d31174 	ldrbeq	r1, [r3, #372]	; 0x174
            ioWait = ioWait || _busSockets[i].waitOnIO;
   39cbc:	e3500000 	cmp	r0, #0
   39cc0:	1affffac 	bne	39b78 <BusAccess::waitEnablementUpdate()+0x7c>
   39cc4:	e5d30175 	ldrb	r0, [r3, #373]	; 0x175
    uint32_t pwmCtrl = RD32(ARM_PWM_CTL);
   39cc8:	e59f3120 	ldr	r3, [pc, #288]	; 39df0 <BusAccess::waitEnablementUpdate()+0x2f4>
    _waitOnMemory = memWait;
   39ccc:	e59fc124 	ldr	ip, [pc, #292]	; 39df8 <BusAccess::waitEnablementUpdate()+0x2fc>
    uint32_t pwmCtrl = RD32(ARM_PWM_CTL);
   39cd0:	e5933000 	ldr	r3, [r3]
    _waitOnIO = ioWait;
   39cd4:	e59f2118 	ldr	r2, [pc, #280]	; 39df4 <BusAccess::waitEnablementUpdate()+0x2f8>
    pwmCtrl &= ~(ARM_PWM_CTL_SBIT1 | ARM_PWM_CTL_SBIT2);
   39cd8:	e3c33b02 	bic	r3, r3, #2048	; 0x800
    if (_waitOnIO)
   39cdc:	e3500000 	cmp	r0, #0
    _waitOnMemory = memWait;
   39ce0:	e5cc1000 	strb	r1, [ip]
    _waitOnIO = ioWait;
   39ce4:	e5c20000 	strb	r0, [r2]
    pwmCtrl &= ~(ARM_PWM_CTL_SBIT1 | ARM_PWM_CTL_SBIT2);
   39ce8:	e3c33008 	bic	r3, r3, #8
    if (_waitOnIO)
   39cec:	0a000000 	beq	39cf4 <BusAccess::waitEnablementUpdate()+0x1f8>
        pwmCtrl |= ARM_PWM_CTL_SBIT1;
   39cf0:	e3833008 	orr	r3, r3, #8
    if (_waitOnMemory)
   39cf4:	e3510000 	cmp	r1, #0
        pwmCtrl |= ARM_PWM_CTL_SBIT2;
   39cf8:	13833b02 	orrne	r3, r3, #2048	; 0x800
    WR32(ARM_PWM_CTL, pwmCtrl);
   39cfc:	e59f20ec 	ldr	r2, [pc, #236]	; 39df0 <BusAccess::waitEnablementUpdate()+0x2f4>
   39d00:	e5823000 	str	r3, [r2]
}
   39d04:	e12fff1e 	bx	lr
            ioWait = ioWait || _busSockets[i].waitOnIO;
   39d08:	e5d30085 	ldrb	r0, [r3, #133]	; 0x85
    for (int i = 0; i < _busSocketCount; i++)
   39d0c:	e3520004 	cmp	r2, #4
   39d10:	0affffec 	beq	39cc8 <BusAccess::waitEnablementUpdate()+0x1cc>
        if (_busSockets[i].enabled)
   39d14:	e5d3c0a0 	ldrb	ip, [r3, #160]	; 0xa0
   39d18:	e35c0000 	cmp	ip, #0
   39d1c:	0affffbc 	beq	39c14 <BusAccess::waitEnablementUpdate()+0x118>
            memWait = memWait || _busSockets[i].waitOnMemory;
   39d20:	e3510000 	cmp	r1, #0
   39d24:	05d310ac 	ldrbeq	r1, [r3, #172]	; 0xac
            ioWait = ioWait || _busSockets[i].waitOnIO;
   39d28:	e3500000 	cmp	r0, #0
   39d2c:	0a00000a 	beq	39d5c <BusAccess::waitEnablementUpdate()+0x260>
    for (int i = 0; i < _busSocketCount; i++)
   39d30:	e3520005 	cmp	r2, #5
   39d34:	1affffb8 	bne	39c1c <BusAccess::waitEnablementUpdate()+0x120>
   39d38:	eaffff8e 	b	39b78 <BusAccess::waitEnablementUpdate()+0x7c>
            ioWait = ioWait || _busSockets[i].waitOnIO;
   39d3c:	e5d3005d 	ldrb	r0, [r3, #93]	; 0x5d
   39d40:	eaffffa5 	b	39bdc <BusAccess::waitEnablementUpdate()+0xe0>
            memWait = memWait || _busSockets[i].waitOnMemory;
   39d44:	e3510000 	cmp	r1, #0
   39d48:	05d3114c 	ldrbeq	r1, [r3, #332]	; 0x14c
            ioWait = ioWait || _busSockets[i].waitOnIO;
   39d4c:	e3500000 	cmp	r0, #0
   39d50:	1a00001f 	bne	39dd4 <BusAccess::waitEnablementUpdate()+0x2d8>
   39d54:	e5d3014d 	ldrb	r0, [r3, #333]	; 0x14d
   39d58:	eaffffd0 	b	39ca0 <BusAccess::waitEnablementUpdate()+0x1a4>
   39d5c:	e5d300ad 	ldrb	r0, [r3, #173]	; 0xad
   39d60:	eaffffab 	b	39c14 <BusAccess::waitEnablementUpdate()+0x118>
    _waitOnMemory = memWait;
   39d64:	e3a03000 	mov	r3, #0
   39d68:	e59f0088 	ldr	r0, [pc, #136]	; 39df8 <BusAccess::waitEnablementUpdate()+0x2fc>
    _waitOnIO = ioWait;
   39d6c:	e59f1080 	ldr	r1, [pc, #128]	; 39df4 <BusAccess::waitEnablementUpdate()+0x2f8>
    uint32_t pwmCtrl = RD32(ARM_PWM_CTL);
   39d70:	e59f2078 	ldr	r2, [pc, #120]	; 39df0 <BusAccess::waitEnablementUpdate()+0x2f4>
    _waitOnMemory = memWait;
   39d74:	e5c03000 	strb	r3, [r0]
    _waitOnIO = ioWait;
   39d78:	e5c13000 	strb	r3, [r1]
    uint32_t pwmCtrl = RD32(ARM_PWM_CTL);
   39d7c:	e5923000 	ldr	r3, [r2]
    pwmCtrl &= ~(ARM_PWM_CTL_SBIT1 | ARM_PWM_CTL_SBIT2);
   39d80:	e3c33b02 	bic	r3, r3, #2048	; 0x800
   39d84:	e3c33008 	bic	r3, r3, #8
   39d88:	eaffffdb 	b	39cfc <BusAccess::waitEnablementUpdate()+0x200>
    for (int i = 0; i < _busSocketCount; i++)
   39d8c:	e3520006 	cmp	r2, #6
   39d90:	1affffab 	bne	39c44 <BusAccess::waitEnablementUpdate()+0x148>
   39d94:	eaffff77 	b	39b78 <BusAccess::waitEnablementUpdate()+0x7c>
   39d98:	e3520007 	cmp	r2, #7
   39d9c:	1affffb2 	bne	39c6c <BusAccess::waitEnablementUpdate()+0x170>
   39da0:	eaffff74 	b	39b78 <BusAccess::waitEnablementUpdate()+0x7c>
   39da4:	e3520008 	cmp	r2, #8
   39da8:	1affffb9 	bne	39c94 <BusAccess::waitEnablementUpdate()+0x198>
   39dac:	eaffff71 	b	39b78 <BusAccess::waitEnablementUpdate()+0x7c>
    uint32_t pwmCtrl = RD32(ARM_PWM_CTL);
   39db0:	e59f3038 	ldr	r3, [pc, #56]	; 39df0 <BusAccess::waitEnablementUpdate()+0x2f4>
    _waitOnMemory = memWait;
   39db4:	e59f003c 	ldr	r0, [pc, #60]	; 39df8 <BusAccess::waitEnablementUpdate()+0x2fc>
    uint32_t pwmCtrl = RD32(ARM_PWM_CTL);
   39db8:	e5933000 	ldr	r3, [r3]
    _waitOnIO = ioWait;
   39dbc:	e59f2030 	ldr	r2, [pc, #48]	; 39df4 <BusAccess::waitEnablementUpdate()+0x2f8>
    pwmCtrl &= ~(ARM_PWM_CTL_SBIT1 | ARM_PWM_CTL_SBIT2);
   39dc0:	e3c33b02 	bic	r3, r3, #2048	; 0x800
    _waitOnMemory = memWait;
   39dc4:	e5c01000 	strb	r1, [r0]
    _waitOnIO = ioWait;
   39dc8:	e5c21000 	strb	r1, [r2]
    pwmCtrl &= ~(ARM_PWM_CTL_SBIT1 | ARM_PWM_CTL_SBIT2);
   39dcc:	e3c33008 	bic	r3, r3, #8
   39dd0:	eaffffc9 	b	39cfc <BusAccess::waitEnablementUpdate()+0x200>
    for (int i = 0; i < _busSocketCount; i++)
   39dd4:	e3520009 	cmp	r2, #9
   39dd8:	1affffb2 	bne	39ca8 <BusAccess::waitEnablementUpdate()+0x1ac>
   39ddc:	eaffff65 	b	39b78 <BusAccess::waitEnablementUpdate()+0x7c>
            ioWait = ioWait || _busSockets[i].waitOnIO;
   39de0:	e1a01000 	mov	r1, r0
   39de4:	eaffff73 	b	39bb8 <BusAccess::waitEnablementUpdate()+0xbc>
   39de8:	0008c424 	.word	0x0008c424
   39dec:	0008c428 	.word	0x0008c428
   39df0:	2020c000 	.word	0x2020c000
   39df4:	0008c8ad 	.word	0x0008c8ad
   39df8:	0008c5b8 	.word	0x0008c5b8

00039dfc <BusAccess::waitGenerationDisable()>:
    uint32_t pwmCtrl = RD32(ARM_PWM_CTL);
   39dfc:	e59f2010 	ldr	r2, [pc, #16]	; 39e14 <BusAccess::waitGenerationDisable()+0x18>
   39e00:	e5923000 	ldr	r3, [r2]
    pwmCtrl &= ~(ARM_PWM_CTL_SBIT1 | ARM_PWM_CTL_SBIT2);
   39e04:	e3c33b02 	bic	r3, r3, #2048	; 0x800
   39e08:	e3c33008 	bic	r3, r3, #8
    WR32(ARM_PWM_CTL, pwmCtrl);
   39e0c:	e5823000 	str	r3, [r2]
}
   39e10:	e12fff1e 	bx	lr
   39e14:	2020c000 	.word	0x2020c000

00039e18 <BusAccess::waitSetupMREQAndIORQEnables()>:
{
   39e18:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    uint32_t lastBusy = 0;
   39e1c:	e3a06000 	mov	r6, #0
    WR32(ARM_CM_PWMCTL, ARM_CM_PASSWD | clockSource);
   39e20:	e59f30d4 	ldr	r3, [pc, #212]	; 39efc <BusAccess::waitSetupMREQAndIORQEnables()+0xe4>
   39e24:	e59f20d4 	ldr	r2, [pc, #212]	; 39f00 <BusAccess::waitSetupMREQAndIORQEnables()+0xe8>
{
   39e28:	e24dd010 	sub	sp, sp, #16
    int busyCount = 0;
   39e2c:	e1a05006 	mov	r5, r6
        if ((RD32(ARM_CM_PWMCTL) & ARM_CM_CTL_BUSY) == 0)
   39e30:	e1a04003 	mov	r4, r3
    for (int i = 0; i < MAX_BUSY_WAIT_COUNT; i++)
   39e34:	e59f70c8 	ldr	r7, [pc, #200]	; 39f04 <BusAccess::waitSetupMREQAndIORQEnables()+0xec>
    WR32(ARM_CM_PWMCTL, ARM_CM_PASSWD | clockSource);
   39e38:	e58320a0 	str	r2, [r3, #160]	; 0xa0
   39e3c:	ea000005 	b	39e58 <BusAccess::waitSetupMREQAndIORQEnables()+0x40>
        busyCount++;
   39e40:	e2855001 	add	r5, r5, #1
        microsDelay(1);
   39e44:	e3a00001 	mov	r0, #1
   39e48:	ebfff256 	bl	367a8 <microsDelay>
    for (int i = 0; i < MAX_BUSY_WAIT_COUNT; i++)
   39e4c:	e1550007 	cmp	r5, r7
        lastBusy = RD32(ARM_CM_PWMCTL);
   39e50:	e59460a0 	ldr	r6, [r4, #160]	; 0xa0
    for (int i = 0; i < MAX_BUSY_WAIT_COUNT; i++)
   39e54:	0a000022 	beq	39ee4 <BusAccess::waitSetupMREQAndIORQEnables()+0xcc>
        if ((RD32(ARM_CM_PWMCTL) & ARM_CM_CTL_BUSY) == 0)
   39e58:	e59430a0 	ldr	r3, [r4, #160]	; 0xa0
   39e5c:	e2133080 	ands	r3, r3, #128	; 0x80
   39e60:	1afffff6 	bne	39e40 <BusAccess::waitSetupMREQAndIORQEnables()+0x28>
    uint32_t afterKill = 0;
   39e64:	e1a04003 	mov	r4, r3
    pinMode(BR_MREQ_WAIT_EN, PINMODE_ALT0);
   39e68:	e3a01004 	mov	r1, #4
   39e6c:	e3a0000d 	mov	r0, #13
   39e70:	ebffed1b 	bl	352e4 <pinMode>
    pinMode(BR_IORQ_WAIT_EN, PINMODE_ALT0);
   39e74:	e3a01004 	mov	r1, #4
   39e78:	e3a0000c 	mov	r0, #12
   39e7c:	ebffed18 	bl	352e4 <pinMode>
    WR32(ARM_PWM_STA, 0xffffffff);
   39e80:	e3e02000 	mvn	r2, #0
   39e84:	e59f707c 	ldr	r7, [pc, #124]	; 39f08 <BusAccess::waitSetupMREQAndIORQEnables()+0xf0>
    WR32(ARM_CM_PWMDIV, ARM_CM_PASSWD | divisor << 12);
   39e88:	e59f806c 	ldr	r8, [pc, #108]	; 39efc <BusAccess::waitSetupMREQAndIORQEnables()+0xe4>
   39e8c:	e59f3078 	ldr	r3, [pc, #120]	; 39f0c <BusAccess::waitSetupMREQAndIORQEnables()+0xf4>
    WR32(ARM_PWM_STA, 0xffffffff);
   39e90:	e5872004 	str	r2, [r7, #4]
    microsDelay(1);
   39e94:	e3a00001 	mov	r0, #1
    WR32(ARM_CM_PWMDIV, ARM_CM_PASSWD | divisor << 12);
   39e98:	e58830a4 	str	r3, [r8, #164]	; 0xa4
    microsDelay(1);
   39e9c:	ebfff241 	bl	367a8 <microsDelay>
    WR32(ARM_CM_PWMCTL, ARM_CM_PASSWD | ARM_CM_CTL_ENAB | clockSource);
   39ea0:	e59f3068 	ldr	r3, [pc, #104]	; 39f10 <BusAccess::waitSetupMREQAndIORQEnables()+0xf8>
    microsDelay(1);
   39ea4:	e3a00001 	mov	r0, #1
    WR32(ARM_CM_PWMCTL, ARM_CM_PASSWD | ARM_CM_CTL_ENAB | clockSource);
   39ea8:	e58830a0 	str	r3, [r8, #160]	; 0xa0
    microsDelay(1);
   39eac:	ebfff23d 	bl	367a8 <microsDelay>
    WR32(ARM_PWM_CTL, ARM_PWM_CTL_CLRF1 | ARM_PWM_CTL_USEF2 | ARM_PWM_CTL_MODE2 | ARM_PWM_CTL_PWEN2 |
   39eb0:	e59f305c 	ldr	r3, [pc, #92]	; 39f14 <BusAccess::waitSetupMREQAndIORQEnables()+0xfc>
    microsDelay(1);
   39eb4:	e3a00001 	mov	r0, #1
    WR32(ARM_PWM_CTL, ARM_PWM_CTL_CLRF1 | ARM_PWM_CTL_USEF2 | ARM_PWM_CTL_MODE2 | ARM_PWM_CTL_PWEN2 |
   39eb8:	e5873000 	str	r3, [r7]
    microsDelay(1);
   39ebc:	ebfff239 	bl	367a8 <microsDelay>
    LogWrite("BusAccess", LOG_DEBUG, "PWM div %d, busyCount %d, lastBusy %08x afterKill %08x", divisor, busyCount, lastBusy, afterKill);
   39ec0:	e58d4008 	str	r4, [sp, #8]
   39ec4:	e88d0060 	stm	sp, {r5, r6}
   39ec8:	e3a03010 	mov	r3, #16
   39ecc:	e59f2044 	ldr	r2, [pc, #68]	; 39f18 <BusAccess::waitSetupMREQAndIORQEnables()+0x100>
   39ed0:	e3a01004 	mov	r1, #4
   39ed4:	e59f0040 	ldr	r0, [pc, #64]	; 39f1c <BusAccess::waitSetupMREQAndIORQEnables()+0x104>
   39ed8:	ebffa8a6 	bl	24178 <LogWrite>
}
   39edc:	e28dd010 	add	sp, sp, #16
   39ee0:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
        WR32(ARM_CM_PWMCTL, ARM_CM_PASSWD | ARM_CM_CTL_KILL | clockSource);
   39ee4:	e59f3034 	ldr	r3, [pc, #52]	; 39f20 <BusAccess::waitSetupMREQAndIORQEnables()+0x108>
        microsDelay(1);
   39ee8:	e3a00001 	mov	r0, #1
        WR32(ARM_CM_PWMCTL, ARM_CM_PASSWD | ARM_CM_CTL_KILL | clockSource);
   39eec:	e58430a0 	str	r3, [r4, #160]	; 0xa0
        microsDelay(1);
   39ef0:	ebfff22c 	bl	367a8 <microsDelay>
        afterKill = RD32(ARM_CM_PWMCTL);
   39ef4:	e59440a0 	ldr	r4, [r4, #160]	; 0xa0
   39ef8:	eaffffda 	b	39e68 <BusAccess::waitSetupMREQAndIORQEnables()+0x50>
   39efc:	20101000 	.word	0x20101000
   39f00:	5a000006 	.word	0x5a000006
   39f04:	000186a0 	.word	0x000186a0
   39f08:	2020c000 	.word	0x2020c000
   39f0c:	5a010000 	.word	0x5a010000
   39f10:	5a000016 	.word	0x5a000016
   39f14:	00002363 	.word	0x00002363
   39f18:	00055b34 	.word	0x00055b34
   39f1c:	000559fc 	.word	0x000559fc
   39f20:	5a000026 	.word	0x5a000026

00039f24 <BusAccess::waitResetFlipFlops()>:
    if ((RD32(ARM_PWM_STA) & 1) == 0)
   39f24:	e59f3030 	ldr	r3, [pc, #48]	; 39f5c <BusAccess::waitResetFlipFlops()+0x38>
    _waitAsserted = false;
   39f28:	e3a01000 	mov	r1, #0
    if ((RD32(ARM_PWM_STA) & 1) == 0)
   39f2c:	e5932004 	ldr	r2, [r3, #4]
   39f30:	e3120001 	tst	r2, #1
        WR32(ARM_PWM_FIF1, 0x00ffffff);
   39f34:	03e024ff 	mvneq	r2, #-16777216	; 0xff000000
   39f38:	05832018 	streq	r2, [r3, #24]
        WR32(ARM_PWM_FIF1, 0x00ffffff);
   39f3c:	05832018 	streq	r2, [r3, #24]
    _waitAsserted = false;
   39f40:	e59f2018 	ldr	r2, [pc, #24]	; 39f60 <BusAccess::waitResetFlipFlops()+0x3c>
    if (_targetReadInProgress)
   39f44:	e59f3018 	ldr	r3, [pc, #24]	; 39f64 <BusAccess::waitResetFlipFlops()+0x40>
    _waitAsserted = false;
   39f48:	e5c21000 	strb	r1, [r2]
    if (_targetReadInProgress)
   39f4c:	e5d33000 	ldrb	r3, [r3]
   39f50:	e1530001 	cmp	r3, r1
   39f54:	012fff1e 	bxeq	lr
        waitHandleReadRelease();
   39f58:	eafff721 	b	37be4 <BusAccess::waitHandleReadRelease()>
   39f5c:	2020c000 	.word	0x2020c000
   39f60:	0008c420 	.word	0x0008c420
   39f64:	0008c5d1 	.word	0x0008c5d1

00039f68 <BusAccess::waitClearDetected()>:
}
   39f68:	e12fff1e 	bx	lr

00039f6c <BusAccess::waitSuspendBusDetailOneCycle()>:
    _waitSuspendBusDetailOneCycle = true;
   39f6c:	e3a02001 	mov	r2, #1
   39f70:	e59f3004 	ldr	r3, [pc, #4]	; 39f7c <BusAccess::waitSuspendBusDetailOneCycle()+0x10>
   39f74:	e5c32000 	strb	r2, [r3]
}
   39f78:	e12fff1e 	bx	lr
   39f7c:	0008c5d2 	.word	0x0008c5d2

00039f80 <BusAccess::setPinOut(int, bool)>:
{
   39f80:	e92d4070 	push	{r4, r5, r6, lr}
   39f84:	e1a05001 	mov	r5, r1
    digitalWrite(pinNumber, val);
   39f88:	e6ef4070 	uxtb	r4, r0
   39f8c:	e1a00004 	mov	r0, r4
   39f90:	ebffed15 	bl	353ec <digitalWrite>
    pinMode(pinNumber, OUTPUT);
   39f94:	e1a00004 	mov	r0, r4
   39f98:	e3a01001 	mov	r1, #1
   39f9c:	ebffecd0 	bl	352e4 <pinMode>
    digitalWrite(pinNumber, val);
   39fa0:	e1a01005 	mov	r1, r5
   39fa4:	e1a00004 	mov	r0, r4
}
   39fa8:	e8bd4070 	pop	{r4, r5, r6, lr}
    digitalWrite(pinNumber, val);
   39fac:	eaffed0e 	b	353ec <digitalWrite>

00039fb0 <BusAccess::isrAssert(int)>:

void BusAccess::isrAssert(int code)
{
    if (code < ISR_ASSERT_NUM_CODES)
   39fb0:	e350000b 	cmp	r0, #11
        _isrAssertCounts[code]++;
   39fb4:	d59f200c 	ldrle	r2, [pc, #12]	; 39fc8 <BusAccess::isrAssert(int)+0x18>
   39fb8:	d7923100 	ldrle	r3, [r2, r0, lsl #2]
   39fbc:	d2833001 	addle	r3, r3, #1
   39fc0:	d7823100 	strle	r3, [r2, r0, lsl #2]
}
   39fc4:	e12fff1e 	bx	lr
   39fc8:	0008c87c 	.word	0x0008c87c

00039fcc <BusAccess::isrAssertGetCount(int)>:

int  BusAccess::isrAssertGetCount(int code)
{
    if (code < ISR_ASSERT_NUM_CODES)
   39fcc:	e350000b 	cmp	r0, #11
        return _isrAssertCounts[code];
   39fd0:	d59f3008 	ldrle	r3, [pc, #8]	; 39fe0 <BusAccess::isrAssertGetCount(int)+0x14>
   39fd4:	d7930100 	ldrle	r0, [r3, r0, lsl #2]
    return 0;
   39fd8:	c3a00000 	movgt	r0, #0
}
   39fdc:	e12fff1e 	bx	lr
   39fe0:	0008c87c 	.word	0x0008c87c

00039fe4 <BusAccess::isrValue(int, int)>:

void BusAccess::isrValue(int code, int val)
{
    if (code < ISR_ASSERT_NUM_CODES)
   39fe4:	e350000b 	cmp	r0, #11
        _isrAssertCounts[code] = val;
   39fe8:	d59f3004 	ldrle	r3, [pc, #4]	; 39ff4 <BusAccess::isrValue(int, int)+0x10>
   39fec:	d7831100 	strle	r1, [r3, r0, lsl #2]
}
   39ff0:	e12fff1e 	bx	lr
   39ff4:	0008c87c 	.word	0x0008c87c

00039ff8 <BusAccess::isrPeak(int, int)>:

void BusAccess::isrPeak(int code, int val)
{
    if (code < ISR_ASSERT_NUM_CODES)
   39ff8:	e350000b 	cmp	r0, #11
   39ffc:	c12fff1e 	bxgt	lr
        if (_isrAssertCounts[code] < val)
   3a000:	e59f300c 	ldr	r3, [pc, #12]	; 3a014 <BusAccess::isrPeak(int, int)+0x1c>
   3a004:	e7932100 	ldr	r2, [r3, r0, lsl #2]
   3a008:	e1520001 	cmp	r2, r1
            _isrAssertCounts[code] = val;
   3a00c:	b7831100 	strlt	r1, [r3, r0, lsl #2]
}
   3a010:	e12fff1e 	bx	lr
   3a014:	0008c87c 	.word	0x0008c87c

0003a018 <BusAccess::setSignal(BR_BUS_ACTION, bool)>:

void BusAccess::setSignal(BR_BUS_ACTION busAction, bool assert)
{
    switch (busAction)
   3a018:	e2400001 	sub	r0, r0, #1
   3a01c:	e3500003 	cmp	r0, #3
   3a020:	979ff100 	ldrls	pc, [pc, r0, lsl #2]
   3a024:	ea000003 	b	3a038 <BusAccess::setSignal(BR_BUS_ACTION, bool)+0x20>
   3a028:	0003a090 	.word	0x0003a090
   3a02c:	0003a070 	.word	0x0003a070
   3a030:	0003a050 	.word	0x0003a050
   3a034:	0003a03c 	.word	0x0003a03c
                    // LogWrite("BA", LOG_DEBUG, "IRQ"); 
                    break;
        case BR_BUS_ACTION_BUSRQ: assert ? digitalWrite(BR_BUSRQ_BAR, 0) : digitalWrite(BR_BUSRQ_BAR, 1); break;
        default: break;
    }
}
   3a038:	e12fff1e 	bx	lr
        case BR_BUS_ACTION_BUSRQ: assert ? digitalWrite(BR_BUSRQ_BAR, 0) : digitalWrite(BR_BUSRQ_BAR, 1); break;
   3a03c:	e3510000 	cmp	r1, #0
   3a040:	1a00001e 	bne	3a0c0 <BusAccess::setSignal(BR_BUS_ACTION, bool)+0xa8>
   3a044:	e3a01001 	mov	r1, #1
   3a048:	e3a00013 	mov	r0, #19
   3a04c:	eaffece6 	b	353ec <digitalWrite>
        case BR_BUS_ACTION_IRQ: assert ? muxSet(BR_MUX_IRQ_BAR_LOW) : muxClear(); 
   3a050:	e3510000 	cmp	r1, #0
   3a054:	0a000015 	beq	3a0b0 <BusAccess::setSignal(BR_BUS_ACTION, bool)+0x98>
        WR32(ARM_GPIO_GPCLR0, BR_MUX_CTRL_BIT_MASK);
   3a058:	e3a01c0e 	mov	r1, #3584	; 0xe00
        WR32(ARM_GPIO_GPSET0, muxVal << BR_MUX_LOW_BIT_POS);
   3a05c:	e3a02b01 	mov	r2, #1024	; 0x400
        WR32(ARM_GPIO_GPCLR0, BR_MUX_CTRL_BIT_MASK);
   3a060:	e59f3064 	ldr	r3, [pc, #100]	; 3a0cc <BusAccess::setSignal(BR_BUS_ACTION, bool)+0xb4>
   3a064:	e5831028 	str	r1, [r3, #40]	; 0x28
        WR32(ARM_GPIO_GPSET0, muxVal << BR_MUX_LOW_BIT_POS);
   3a068:	e583201c 	str	r2, [r3, #28]
   3a06c:	e12fff1e 	bx	lr
        case BR_BUS_ACTION_NMI: assert ? muxSet(BR_MUX_NMI_BAR_LOW) : muxClear(); break;
   3a070:	e3510000 	cmp	r1, #0
   3a074:	0a00000d 	beq	3a0b0 <BusAccess::setSignal(BR_BUS_ACTION, bool)+0x98>
        WR32(ARM_GPIO_GPCLR0, BR_MUX_CTRL_BIT_MASK);
   3a078:	e3a01c0e 	mov	r1, #3584	; 0xe00
        WR32(ARM_GPIO_GPSET0, muxVal << BR_MUX_LOW_BIT_POS);
   3a07c:	e3a02b03 	mov	r2, #3072	; 0xc00
        WR32(ARM_GPIO_GPCLR0, BR_MUX_CTRL_BIT_MASK);
   3a080:	e59f3044 	ldr	r3, [pc, #68]	; 3a0cc <BusAccess::setSignal(BR_BUS_ACTION, bool)+0xb4>
   3a084:	e5831028 	str	r1, [r3, #40]	; 0x28
        WR32(ARM_GPIO_GPSET0, muxVal << BR_MUX_LOW_BIT_POS);
   3a088:	e583201c 	str	r2, [r3, #28]
   3a08c:	e12fff1e 	bx	lr
        case BR_BUS_ACTION_RESET: assert ? muxSet(BR_MUX_RESET_Z80_BAR_LOW) : muxClear();
   3a090:	e3510000 	cmp	r1, #0
   3a094:	0a000005 	beq	3a0b0 <BusAccess::setSignal(BR_BUS_ACTION, bool)+0x98>
        WR32(ARM_GPIO_GPCLR0, BR_MUX_CTRL_BIT_MASK);
   3a098:	e3a01c0e 	mov	r1, #3584	; 0xe00
        WR32(ARM_GPIO_GPSET0, muxVal << BR_MUX_LOW_BIT_POS);
   3a09c:	e3a02c0a 	mov	r2, #2560	; 0xa00
        WR32(ARM_GPIO_GPCLR0, BR_MUX_CTRL_BIT_MASK);
   3a0a0:	e59f3024 	ldr	r3, [pc, #36]	; 3a0cc <BusAccess::setSignal(BR_BUS_ACTION, bool)+0xb4>
   3a0a4:	e5831028 	str	r1, [r3, #40]	; 0x28
        WR32(ARM_GPIO_GPSET0, muxVal << BR_MUX_LOW_BIT_POS);
   3a0a8:	e583201c 	str	r2, [r3, #28]
   3a0ac:	e12fff1e 	bx	lr
        WR32(ARM_GPIO_GPCLR0, BR_MUX_CTRL_BIT_MASK);
   3a0b0:	e3a02c0e 	mov	r2, #3584	; 0xe00
   3a0b4:	e59f3010 	ldr	r3, [pc, #16]	; 3a0cc <BusAccess::setSignal(BR_BUS_ACTION, bool)+0xb4>
   3a0b8:	e5832028 	str	r2, [r3, #40]	; 0x28
   3a0bc:	e12fff1e 	bx	lr
        case BR_BUS_ACTION_BUSRQ: assert ? digitalWrite(BR_BUSRQ_BAR, 0) : digitalWrite(BR_BUSRQ_BAR, 1); break;
   3a0c0:	e3a01000 	mov	r1, #0
   3a0c4:	e3a00013 	mov	r0, #19
   3a0c8:	eaffecc7 	b	353ec <digitalWrite>
   3a0cc:	20200000 	.word	0x20200000

0003a0d0 <BusAccess::pagingPageIn()>:

void BusAccess::pagingPageIn()
{
   3a0d0:	e92d4070 	push	{r4, r5, r6, lr}
    for (int i = 0; i < _busSocketCount; i++)
   3a0d4:	e59f6060 	ldr	r6, [pc, #96]	; 3a13c <BusAccess::pagingPageIn()+0x6c>
   3a0d8:	e5963000 	ldr	r3, [r6]
   3a0dc:	e3530000 	cmp	r3, #0
   3a0e0:	d8bd8070 	pople	{r4, r5, r6, pc}
   3a0e4:	e3a05000 	mov	r5, #0
   3a0e8:	e59f4050 	ldr	r4, [pc, #80]	; 3a140 <BusAccess::pagingPageIn()+0x70>
    {
        if (_busSockets[i].enabled)
   3a0ec:	e5d42000 	ldrb	r2, [r4]
   3a0f0:	e3520000 	cmp	r2, #0
   3a0f4:	0a00000b 	beq	3a128 <BusAccess::pagingPageIn()+0x58>
            _busSockets[i].busActionCallback(BR_BUS_ACTION_PAGE_IN_FOR_INJECT, BR_BUS_ACTION_GENERAL);
   3a0f8:	e5943008 	ldr	r3, [r4, #8]
   3a0fc:	e3a01003 	mov	r1, #3
   3a100:	e3a00008 	mov	r0, #8
   3a104:	e12fff33 	blx	r3
   3a108:	e5963000 	ldr	r3, [r6]
    for (int i = 0; i < _busSocketCount; i++)
   3a10c:	e2855001 	add	r5, r5, #1
   3a110:	e1530005 	cmp	r3, r5
   3a114:	e2844028 	add	r4, r4, #40	; 0x28
   3a118:	d8bd8070 	pople	{r4, r5, r6, pc}
        if (_busSockets[i].enabled)
   3a11c:	e5d42000 	ldrb	r2, [r4]
   3a120:	e3520000 	cmp	r2, #0
   3a124:	1afffff3 	bne	3a0f8 <BusAccess::pagingPageIn()+0x28>
    for (int i = 0; i < _busSocketCount; i++)
   3a128:	e2855001 	add	r5, r5, #1
   3a12c:	e1530005 	cmp	r3, r5
   3a130:	e2844028 	add	r4, r4, #40	; 0x28
   3a134:	caffffec 	bgt	3a0ec <BusAccess::pagingPageIn()+0x1c>
   3a138:	e8bd8070 	pop	{r4, r5, r6, pc}
   3a13c:	0008c424 	.word	0x0008c424
   3a140:	0008c428 	.word	0x0008c428

0003a144 <_GLOBAL__sub_I__ZN9BusAccess18_busIsUnderControlE>:
        _enabled = false;
   3a144:	e3a02000 	mov	r2, #0
        _outputPin = -1;
   3a148:	e3e01000 	mvn	r1, #0
        _freqReqd = 1000000;
   3a14c:	e59f3014 	ldr	r3, [pc, #20]	; 3a168 <_GLOBAL__sub_I__ZN9BusAccess18_busIsUnderControlE+0x24>
   3a150:	e59f0014 	ldr	r0, [pc, #20]	; 3a16c <_GLOBAL__sub_I__ZN9BusAccess18_busIsUnderControlE+0x28>
        _enabled = false;
   3a154:	e5c32008 	strb	r2, [r3, #8]
        _altMode = INPUT;
   3a158:	e5832010 	str	r2, [r3, #16]
        _freqReqd = 1000000;
   3a15c:	e5830004 	str	r0, [r3, #4]
        _outputPin = -1;
   3a160:	e583100c 	str	r1, [r3, #12]
    }
}
   3a164:	e12fff1e 	bx	lr
   3a168:	0008c8b0 	.word	0x0008c8b0
   3a16c:	000f4240 	.word	0x000f4240

0003a170 <TargetBreakpoints::TargetBreakpoints()>:
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// Module name
static const char FromTargetBreakpoints[] = "TargetBreakpoints";

TargetBreakpoints::TargetBreakpoints()
   3a170:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    char hitMessage[MAX_HIT_MSG_LEN];
    uint32_t pcValue;

    SimpleBreakpoint()
    {
        enabled = false;
   3a174:	e3a02000 	mov	r2, #0
   3a178:	e1a07000 	mov	r7, r0
   3a17c:	e2803008 	add	r3, r0, #8
   3a180:	e2831c2a 	add	r1, r3, #10752	; 0x2a00
   3a184:	e2811030 	add	r1, r1, #48	; 0x30
   3a188:	e5c32000 	strb	r2, [r3]
        hitMessage[0] = 0;
   3a18c:	e5c32001 	strb	r2, [r3, #1]
        pcValue = 0;
   3a190:	e5832068 	str	r2, [r3, #104]	; 0x68
   3a194:	e283306c 	add	r3, r3, #108	; 0x6c
   3a198:	e1530001 	cmp	r3, r1
   3a19c:	1afffff9 	bne	3a188 <TargetBreakpoints::TargetBreakpoints()+0x18>
        enabled = false;
   3a1a0:	e3a02000 	mov	r2, #0
   3a1a4:	e2874daf 	add	r4, r7, #11200	; 0x2bc0
   3a1a8:	e2843010 	add	r3, r4, #16
   3a1ac:	e2831c2a 	add	r1, r3, #10752	; 0x2a00
   3a1b0:	e2811030 	add	r1, r1, #48	; 0x30
   3a1b4:	e5c32000 	strb	r2, [r3]
        hitMessage[0] = 0;
   3a1b8:	e5c32001 	strb	r2, [r3, #1]
        pcValue = 0;
   3a1bc:	e5832068 	str	r2, [r3, #104]	; 0x68
   3a1c0:	e283306c 	add	r3, r3, #108	; 0x6c
   3a1c4:	e1530001 	cmp	r3, r1
   3a1c8:	1afffff9 	bne	3a1b4 <TargetBreakpoints::TargetBreakpoints()+0x44>
    clear();
}

void TargetBreakpoints::clear()
{
    for (int i = 0; i < MAX_BREAKPOINTS; i++)
   3a1cc:	e3a05000 	mov	r5, #0
   3a1d0:	e1a06007 	mov	r6, r7
    {
        _breakpoints[i].enabled = false;
   3a1d4:	e1a08005 	mov	r8, r5
        _fastBreakpoints[i].enabled = false;
        ee_sprintf(_fastBreakpoints[i].hitMessage, "FB%02d", i);
   3a1d8:	e59f9054 	ldr	r9, [pc, #84]	; 3a234 <TargetBreakpoints::TargetBreakpoints()+0xc4>
   3a1dc:	e2844011 	add	r4, r4, #17
        _breakpoints[i].enabled = false;
   3a1e0:	e5c68008 	strb	r8, [r6, #8]
        ee_sprintf(_fastBreakpoints[i].hitMessage, "FB%02d", i);
   3a1e4:	e1a02005 	mov	r2, r5
        _fastBreakpoints[i].enabled = false;
   3a1e8:	e5448001 	strb	r8, [r4, #-1]
        ee_sprintf(_fastBreakpoints[i].hitMessage, "FB%02d", i);
   3a1ec:	e1a00004 	mov	r0, r4
    for (int i = 0; i < MAX_BREAKPOINTS; i++)
   3a1f0:	e2855001 	add	r5, r5, #1
        ee_sprintf(_fastBreakpoints[i].hitMessage, "FB%02d", i);
   3a1f4:	e1a01009 	mov	r1, r9
   3a1f8:	ebffa2eb 	bl	22dac <ee_sprintf>
    for (int i = 0; i < MAX_BREAKPOINTS; i++)
   3a1fc:	e3550064 	cmp	r5, #100	; 0x64
   3a200:	e286606c 	add	r6, r6, #108	; 0x6c
   3a204:	e284406c 	add	r4, r4, #108	; 0x6c
   3a208:	1afffff4 	bne	3a1e0 <TargetBreakpoints::TargetBreakpoints()+0x70>
    }
    _breakpointNumEnabled = 0;
    _breakpointsEnabled = true;
   3a20c:	e3a01001 	mov	r1, #1
    _breakpointHitIndex = 0;
   3a210:	e2873a02 	add	r3, r7, #8192	; 0x2000
    _fastBreakpointsNumEnabled = 0;
    _fastBreakpointHitIdx = 0;
   3a214:	e2872a05 	add	r2, r7, #20480	; 0x5000
    _breakpointNumEnabled = 0;
   3a218:	e5878004 	str	r8, [r7, #4]
    _breakpointsEnabled = true;
   3a21c:	e5c71000 	strb	r1, [r7]
}
   3a220:	e1a00007 	mov	r0, r7
    _breakpointHitIndex = 0;
   3a224:	e5838bc8 	str	r8, [r3, #3016]	; 0xbc8
    _fastBreakpointsNumEnabled = 0;
   3a228:	e5838bcc 	str	r8, [r3, #3020]	; 0xbcc
    _fastBreakpointHitIdx = 0;
   3a22c:	e5828600 	str	r8, [r2, #1536]	; 0x600
}
   3a230:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   3a234:	00055b6c 	.word	0x00055b6c

0003a238 <TargetBreakpoints::clear()>:
{
   3a238:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    for (int i = 0; i < MAX_BREAKPOINTS; i++)
   3a23c:	e3a05000 	mov	r5, #0
{
   3a240:	e1a09000 	mov	r9, r0
   3a244:	e1a06000 	mov	r6, r0
        _breakpoints[i].enabled = false;
   3a248:	e1a07005 	mov	r7, r5
   3a24c:	e2804daf 	add	r4, r0, #11200	; 0x2bc0
        ee_sprintf(_fastBreakpoints[i].hitMessage, "FB%02d", i);
   3a250:	e59f8050 	ldr	r8, [pc, #80]	; 3a2a8 <TargetBreakpoints::clear()+0x70>
   3a254:	e2844011 	add	r4, r4, #17
        _breakpoints[i].enabled = false;
   3a258:	e5c67008 	strb	r7, [r6, #8]
        ee_sprintf(_fastBreakpoints[i].hitMessage, "FB%02d", i);
   3a25c:	e1a02005 	mov	r2, r5
        _fastBreakpoints[i].enabled = false;
   3a260:	e5447001 	strb	r7, [r4, #-1]
        ee_sprintf(_fastBreakpoints[i].hitMessage, "FB%02d", i);
   3a264:	e1a00004 	mov	r0, r4
    for (int i = 0; i < MAX_BREAKPOINTS; i++)
   3a268:	e2855001 	add	r5, r5, #1
        ee_sprintf(_fastBreakpoints[i].hitMessage, "FB%02d", i);
   3a26c:	e1a01008 	mov	r1, r8
   3a270:	ebffa2cd 	bl	22dac <ee_sprintf>
    for (int i = 0; i < MAX_BREAKPOINTS; i++)
   3a274:	e3550064 	cmp	r5, #100	; 0x64
   3a278:	e286606c 	add	r6, r6, #108	; 0x6c
   3a27c:	e284406c 	add	r4, r4, #108	; 0x6c
   3a280:	1afffff4 	bne	3a258 <TargetBreakpoints::clear()+0x20>
    _breakpointsEnabled = true;
   3a284:	e3a01001 	mov	r1, #1
    _breakpointHitIndex = 0;
   3a288:	e2893a02 	add	r3, r9, #8192	; 0x2000
    _fastBreakpointHitIdx = 0;
   3a28c:	e2892a05 	add	r2, r9, #20480	; 0x5000
    _breakpointNumEnabled = 0;
   3a290:	e5897004 	str	r7, [r9, #4]
    _breakpointsEnabled = true;
   3a294:	e5c91000 	strb	r1, [r9]
    _breakpointHitIndex = 0;
   3a298:	e5837bc8 	str	r7, [r3, #3016]	; 0xbc8
    _fastBreakpointsNumEnabled = 0;
   3a29c:	e5837bcc 	str	r7, [r3, #3020]	; 0xbcc
    _fastBreakpointHitIdx = 0;
   3a2a0:	e5827600 	str	r7, [r2, #1536]	; 0x600
}
   3a2a4:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   3a2a8:	00055b6c 	.word	0x00055b6c

0003a2ac <TargetBreakpoints::enableBreakpoint(int, bool)>:
// Breakpoints
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void TargetBreakpoints::enableBreakpoint(int idx, bool enabled)
{
    if ((idx < 0) || (idx >= MAX_BREAKPOINTS))
   3a2ac:	e3510063 	cmp	r1, #99	; 0x63
   3a2b0:	812fff1e 	bxhi	lr
{
   3a2b4:	e92d4010 	push	{r4, lr}
        return;
    _breakpoints[idx].enabled = enabled;
    _breakpointNumEnabled = 0;
   3a2b8:	e3a04000 	mov	r4, #0
   3a2bc:	e1a0c000 	mov	ip, r0
    int numBreakpointsEnabled = 0;
    for (int i = 0; i < MAX_BREAKPOINTS; i++)
   3a2c0:	e1a03004 	mov	r3, r4
    int numBreakpointsEnabled = 0;
   3a2c4:	e1a0e004 	mov	lr, r4
    _breakpoints[idx].enabled = enabled;
   3a2c8:	e0811081 	add	r1, r1, r1, lsl #1
   3a2cc:	e0811181 	add	r1, r1, r1, lsl #3
   3a2d0:	e0801101 	add	r1, r0, r1, lsl #2
   3a2d4:	e5c12008 	strb	r2, [r1, #8]
    _breakpointNumEnabled = 0;
   3a2d8:	e5804004 	str	r4, [r0, #4]
        if (_breakpoints[i].enabled)
   3a2dc:	e5dc2008 	ldrb	r2, [ip, #8]
   3a2e0:	e28cc06c 	add	ip, ip, #108	; 0x6c
   3a2e4:	e3520000 	cmp	r2, #0
            _breakpointIdxsToCheck[numBreakpointsEnabled++] = i;
   3a2e8:	128e2d2a 	addne	r2, lr, #2688	; 0xa80
   3a2ec:	1282200e 	addne	r2, r2, #14
   3a2f0:	17803102 	strne	r3, [r0, r2, lsl #2]
    for (int i = 0; i < MAX_BREAKPOINTS; i++)
   3a2f4:	e2833001 	add	r3, r3, #1
            _breakpointIdxsToCheck[numBreakpointsEnabled++] = i;
   3a2f8:	128ee001 	addne	lr, lr, #1
    for (int i = 0; i < MAX_BREAKPOINTS; i++)
   3a2fc:	e3530064 	cmp	r3, #100	; 0x64
   3a300:	1afffff5 	bne	3a2dc <TargetBreakpoints::enableBreakpoint(int, bool)+0x30>
    _breakpointNumEnabled = numBreakpointsEnabled;
   3a304:	e580e004 	str	lr, [r0, #4]
}
   3a308:	e8bd8010 	pop	{r4, pc}

0003a30c <TargetBreakpoints::setBreakpointMessage(int, char const*)>:

void TargetBreakpoints::setBreakpointMessage(int idx, const char* hitMessage)
{
    if ((idx < 0) || (idx >= MAX_BREAKPOINTS))
        return;
    if (hitMessage != NULL)
   3a30c:	e3510063 	cmp	r1, #99	; 0x63
   3a310:	83a03000 	movhi	r3, #0
   3a314:	93a03001 	movls	r3, #1
   3a318:	e3520000 	cmp	r2, #0
   3a31c:	03a03000 	moveq	r3, #0
   3a320:	e3530000 	cmp	r3, #0
   3a324:	012fff1e 	bxeq	lr
        strlcpy(_breakpoints[idx].hitMessage, hitMessage, SimpleBreakpoint::MAX_HIT_MSG_LEN);
   3a328:	e0813081 	add	r3, r1, r1, lsl #1
   3a32c:	e0833183 	add	r3, r3, r3, lsl #3
   3a330:	e0800103 	add	r0, r0, r3, lsl #2
   3a334:	e1a01002 	mov	r1, r2
   3a338:	e2800009 	add	r0, r0, #9
   3a33c:	e3a02064 	mov	r2, #100	; 0x64
   3a340:	ea004ca0 	b	4d5c8 <strlcpy>

0003a344 <TargetBreakpoints::setBreakpointPCAddr(int, unsigned long)>:
}

void TargetBreakpoints::setBreakpointPCAddr(int idx, uint32_t pcVal)
{
    if ((idx < 0) || (idx >= MAX_BREAKPOINTS))
   3a344:	e3510063 	cmp	r1, #99	; 0x63
        return;
    _breakpoints[idx].pcValue = pcVal;
   3a348:	90811081 	addls	r1, r1, r1, lsl #1
   3a34c:	90811181 	addls	r1, r1, r1, lsl #3
   3a350:	90801101 	addls	r1, r0, r1, lsl #2
   3a354:	95812070 	strls	r2, [r1, #112]	; 0x70
}
   3a358:	e12fff1e 	bx	lr

0003a35c <TargetBreakpoints::checkForBreak(unsigned long, unsigned long, unsigned long, unsigned long&)>:

bool TargetBreakpoints::checkForBreak([[maybe_unused]] uint32_t addr, [[maybe_unused]] uint32_t data, 
        uint32_t flags, [[maybe_unused]] uint32_t& retVal)
{
   3a35c:	e92d4070 	push	{r4, r5, r6, lr}
    // LogWrite(FromTargetBreakpoints, LOG_DEBUG, "checkForBreak %04x, fast %d", 
    //         addr, _fastBreakpointsNumEnabled);
    // See if fast-breakpoints enabled and M1 cycle
    if ((_fastBreakpointsNumEnabled > 0) && (flags & BR_CTRL_BUS_M1_MASK) && (flags & BR_CTRL_BUS_RD_MASK))
   3a360:	e2805a02 	add	r5, r0, #8192	; 0x2000
   3a364:	e595ebcc 	ldr	lr, [r5, #3020]	; 0xbcc
   3a368:	e35e0000 	cmp	lr, #0
   3a36c:	da000002 	ble	3a37c <TargetBreakpoints::checkForBreak(unsigned long, unsigned long, unsigned long, unsigned long&)+0x20>
   3a370:	e2032011 	and	r2, r3, #17
   3a374:	e3520011 	cmp	r2, #17
   3a378:	0a00000b 	beq	3a3ac <TargetBreakpoints::checkForBreak(unsigned long, unsigned long, unsigned long, unsigned long&)+0x50>
                return true;
            }
        }
    }
    // See if breakpoints enabled and M1 cycle
    if (_breakpointsEnabled && (_breakpointNumEnabled > 0) && (flags & BR_CTRL_BUS_M1_MASK) && (flags & BR_CTRL_BUS_RD_MASK))
   3a37c:	e5d02000 	ldrb	r2, [r0]
   3a380:	e3520000 	cmp	r2, #0
   3a384:	0a000006 	beq	3a3a4 <TargetBreakpoints::checkForBreak(unsigned long, unsigned long, unsigned long, unsigned long&)+0x48>
   3a388:	e5906004 	ldr	r6, [r0, #4]
   3a38c:	e3560000 	cmp	r6, #0
   3a390:	da000002 	ble	3a3a0 <TargetBreakpoints::checkForBreak(unsigned long, unsigned long, unsigned long, unsigned long&)+0x44>
   3a394:	e2033011 	and	r3, r3, #17
   3a398:	e3530011 	cmp	r3, #17
   3a39c:	0a000015 	beq	3a3f8 <TargetBreakpoints::checkForBreak(unsigned long, unsigned long, unsigned long, unsigned long&)+0x9c>
                _breakpointHitIndex = bpIdx;
                return true;
            }
        }
    }
    return false;
   3a3a0:	e3a02000 	mov	r2, #0
}
   3a3a4:	e1a00002 	mov	r0, r2
   3a3a8:	e8bd8070 	pop	{r4, r5, r6, pc}
   3a3ac:	e2802b0b 	add	r2, r0, #11264	; 0x2c00
   3a3b0:	e2822038 	add	r2, r2, #56	; 0x38
            if (_fastBreakpoints[i].pcValue == addr)
   3a3b4:	e5924000 	ldr	r4, [r2]
        for (int i = 0; i < _fastBreakpointsNumEnabled; i++)
   3a3b8:	e3a0c000 	mov	ip, #0
            if (_fastBreakpoints[i].pcValue == addr)
   3a3bc:	e1540001 	cmp	r4, r1
   3a3c0:	e282206c 	add	r2, r2, #108	; 0x6c
   3a3c4:	0a000006 	beq	3a3e4 <TargetBreakpoints::checkForBreak(unsigned long, unsigned long, unsigned long, unsigned long&)+0x88>
        for (int i = 0; i < _fastBreakpointsNumEnabled; i++)
   3a3c8:	e28cc001 	add	ip, ip, #1
   3a3cc:	e15e000c 	cmp	lr, ip
   3a3d0:	0affffe9 	beq	3a37c <TargetBreakpoints::checkForBreak(unsigned long, unsigned long, unsigned long, unsigned long&)+0x20>
            if (_fastBreakpoints[i].pcValue == addr)
   3a3d4:	e5924000 	ldr	r4, [r2]
   3a3d8:	e282206c 	add	r2, r2, #108	; 0x6c
   3a3dc:	e1540001 	cmp	r4, r1
   3a3e0:	1afffff8 	bne	3a3c8 <TargetBreakpoints::checkForBreak(unsigned long, unsigned long, unsigned long, unsigned long&)+0x6c>
                return true;
   3a3e4:	e3a02001 	mov	r2, #1
                _fastBreakpointHitIdx = i;
   3a3e8:	e2800a05 	add	r0, r0, #20480	; 0x5000
   3a3ec:	e580c600 	str	ip, [r0, #1536]	; 0x600
}
   3a3f0:	e1a00002 	mov	r0, r2
   3a3f4:	e8bd8070 	pop	{r4, r5, r6, pc}
   3a3f8:	e2804c2a 	add	r4, r0, #10752	; 0x2a00
        for (int i = 0; i < _breakpointNumEnabled; i++)
   3a3fc:	e3a0c000 	mov	ip, #0
   3a400:	e2844034 	add	r4, r4, #52	; 0x34
   3a404:	ea000001 	b	3a410 <TargetBreakpoints::checkForBreak(unsigned long, unsigned long, unsigned long, unsigned long&)+0xb4>
   3a408:	e156000c 	cmp	r6, ip
   3a40c:	0affffe3 	beq	3a3a0 <TargetBreakpoints::checkForBreak(unsigned long, unsigned long, unsigned long, unsigned long&)+0x44>
            int bpIdx = _breakpointIdxsToCheck[i];
   3a410:	e5b4e004 	ldr	lr, [r4, #4]!
        for (int i = 0; i < _breakpointNumEnabled; i++)
   3a414:	e28cc001 	add	ip, ip, #1
            if (_breakpoints[bpIdx].pcValue == addr)
   3a418:	e08e308e 	add	r3, lr, lr, lsl #1
   3a41c:	e0833183 	add	r3, r3, r3, lsl #3
   3a420:	e0803103 	add	r3, r0, r3, lsl #2
   3a424:	e5933070 	ldr	r3, [r3, #112]	; 0x70
   3a428:	e1530001 	cmp	r3, r1
   3a42c:	1afffff5 	bne	3a408 <TargetBreakpoints::checkForBreak(unsigned long, unsigned long, unsigned long, unsigned long&)+0xac>
                _breakpointHitIndex = bpIdx;
   3a430:	e585ebc8 	str	lr, [r5, #3016]	; 0xbc8
                return true;
   3a434:	eaffffda 	b	3a3a4 <TargetBreakpoints::checkForBreak(unsigned long, unsigned long, unsigned long, unsigned long&)+0x48>

0003a438 <TargetBreakpoints::setFastBreakpoint(unsigned long, bool)>:

void TargetBreakpoints::setFastBreakpoint(uint32_t addr, bool en)
{
   3a438:	e92d4030 	push	{r4, r5, lr}
    // Check for change to existing
    for (int i = 0; i < _fastBreakpointsNumEnabled; i++)
   3a43c:	e2805a02 	add	r5, r0, #8192	; 0x2000
   3a440:	e5954bcc 	ldr	r4, [r5, #3020]	; 0xbcc
   3a444:	e3540000 	cmp	r4, #0
   3a448:	da00000c 	ble	3a480 <TargetBreakpoints::setFastBreakpoint(unsigned long, bool)+0x48>
    {
        if (_fastBreakpoints[i].pcValue == addr)
   3a44c:	e5953c38 	ldr	r3, [r5, #3128]	; 0xc38
   3a450:	e1510003 	cmp	r1, r3
   3a454:	1280cdb2 	addne	ip, r0, #11392	; 0x2c80
    for (int i = 0; i < _fastBreakpointsNumEnabled; i++)
   3a458:	13a03000 	movne	r3, #0
   3a45c:	128cc024 	addne	ip, ip, #36	; 0x24
        if (_fastBreakpoints[i].pcValue == addr)
   3a460:	1a000003 	bne	3a474 <TargetBreakpoints::setFastBreakpoint(unsigned long, bool)+0x3c>
   3a464:	ea000015 	b	3a4c0 <TargetBreakpoints::setFastBreakpoint(unsigned long, bool)+0x88>
   3a468:	e49ce06c 	ldr	lr, [ip], #108	; 0x6c
   3a46c:	e15e0001 	cmp	lr, r1
   3a470:	0a000013 	beq	3a4c4 <TargetBreakpoints::setFastBreakpoint(unsigned long, bool)+0x8c>
    for (int i = 0; i < _fastBreakpointsNumEnabled; i++)
   3a474:	e2833001 	add	r3, r3, #1
   3a478:	e1530004 	cmp	r3, r4
   3a47c:	1afffff9 	bne	3a468 <TargetBreakpoints::setFastBreakpoint(unsigned long, bool)+0x30>
        {
            _fastBreakpoints[i].enabled = en;
            return;
        }
    }
    if (en && (_fastBreakpointsNumEnabled < MAX_BREAKPOINTS))
   3a480:	e3540064 	cmp	r4, #100	; 0x64
   3a484:	03a02000 	moveq	r2, #0
   3a488:	12022001 	andne	r2, r2, #1
   3a48c:	e3520000 	cmp	r2, #0
   3a490:	08bd8030 	popeq	{r4, r5, pc}
    {
        _fastBreakpoints[_fastBreakpointsNumEnabled].enabled = true;
   3a494:	e3a0c001 	mov	ip, #1
   3a498:	e0843c14 	add	r3, r4, r4, lsl ip
   3a49c:	e0833183 	add	r3, r3, r3, lsl #3
   3a4a0:	e0803103 	add	r3, r0, r3, lsl #2
   3a4a4:	e2832daf 	add	r2, r3, #11200	; 0x2bc0
        _fastBreakpoints[_fastBreakpointsNumEnabled].pcValue = addr;
        _fastBreakpointsNumEnabled++;
   3a4a8:	e084400c 	add	r4, r4, ip
        _fastBreakpoints[_fastBreakpointsNumEnabled].pcValue = addr;
   3a4ac:	e2833b0b 	add	r3, r3, #11264	; 0x2c00
        _fastBreakpoints[_fastBreakpointsNumEnabled].enabled = true;
   3a4b0:	e5c2c010 	strb	ip, [r2, #16]
        _fastBreakpoints[_fastBreakpointsNumEnabled].pcValue = addr;
   3a4b4:	e5831038 	str	r1, [r3, #56]	; 0x38
        _fastBreakpointsNumEnabled++;
   3a4b8:	e5854bcc 	str	r4, [r5, #3020]	; 0xbcc
    }
}
   3a4bc:	e8bd8030 	pop	{r4, r5, pc}
    for (int i = 0; i < _fastBreakpointsNumEnabled; i++)
   3a4c0:	e3a03000 	mov	r3, #0
            _fastBreakpoints[i].enabled = en;
   3a4c4:	e0833083 	add	r3, r3, r3, lsl #1
   3a4c8:	e0833183 	add	r3, r3, r3, lsl #3
   3a4cc:	e0803103 	add	r3, r0, r3, lsl #2
   3a4d0:	e2833daf 	add	r3, r3, #11200	; 0x2bc0
   3a4d4:	e5c32010 	strb	r2, [r3, #16]
            return;
   3a4d8:	e8bd8030 	pop	{r4, r5, pc}

0003a4dc <TargetCPUZ80::store16BitVal(unsigned char*, int, unsigned short)>:
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void TargetCPUZ80::store16BitVal(uint8_t arry[], int offset, uint16_t val)
{
    arry[offset] = val & 0xff;
    arry[offset+1] = (val >> 8) & 0xff;
   3a4dc:	e1a03422 	lsr	r3, r2, #8
    arry[offset] = val & 0xff;
   3a4e0:	e7e02001 	strb	r2, [r0, r1]!
    arry[offset+1] = (val >> 8) & 0xff;
   3a4e4:	e5c03001 	strb	r3, [r0, #1]
}
   3a4e8:	e12fff1e 	bx	lr

0003a4ec <TargetCPUZ80::getInjectToSetRegs(Z80Registers&, unsigned char*, unsigned long)>:
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Handle register setting when injecting opcodes
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////

int TargetCPUZ80::getInjectToSetRegs(Z80Registers& regs, uint8_t* pCodeBuffer, uint32_t codeMaxlen)
{
   3a4ec:	e92d4070 	push	{r4, r5, r6, lr}
    arry[offset] = val & 0xff;
   3a4f0:	e59f3170 	ldr	r3, [pc, #368]	; 3a668 <TargetCPUZ80::getInjectToSetRegs(Z80Registers&, unsigned char*, unsigned long)+0x17c>
    const int RegisterIMUpdatePos = 49;
    const int RegisterINTENUpdatePos = 50;
    const int RegisterPCUpdatePos = 52;

    // Fill in the register values
    store16BitVal(regSetInstructions, RegisterIXUpdatePos, regs.IX);
   3a4f4:	e5904018 	ldr	r4, [r0, #24]
    store16BitVal(regSetInstructions, RegisterIYUpdatePos, regs.IY);
    store16BitVal(regSetInstructions, RegisterHLDASHUpdatePos, regs.HLDASH);
   3a4f8:	e590c020 	ldr	ip, [r0, #32]
    store16BitVal(regSetInstructions, RegisterDEDASHUpdatePos, regs.DEDASH);
   3a4fc:	e5906024 	ldr	r6, [r0, #36]	; 0x24
    arry[offset] = val & 0xff;
   3a500:	e5c3c00a 	strb	ip, [r3, #10]
    arry[offset+1] = (val >> 8) & 0xff;
   3a504:	e6ff5074 	uxth	r5, r4
   3a508:	e6ffc07c 	uxth	ip, ip
   3a50c:	e1a05425 	lsr	r5, r5, #8
   3a510:	e1a0c42c 	lsr	ip, ip, #8
    store16BitVal(regSetInstructions, RegisterIYUpdatePos, regs.IY);
   3a514:	e590e01c 	ldr	lr, [r0, #28]
    arry[offset+1] = (val >> 8) & 0xff;
   3a518:	e5c3c00b 	strb	ip, [r3, #11]
   3a51c:	e5c35004 	strb	r5, [r3, #4]
   3a520:	e6ffc076 	uxth	ip, r6
    store16BitVal(regSetInstructions, RegisterBCDASHUpdatePos, regs.BCDASH);
   3a524:	e5905028 	ldr	r5, [r0, #40]	; 0x28
    arry[offset+1] = (val >> 8) & 0xff;
   3a528:	e1a0c42c 	lsr	ip, ip, #8
   3a52c:	e5c3c00e 	strb	ip, [r3, #14]
    arry[offset] = val & 0xff;
   3a530:	e5c3e007 	strb	lr, [r3, #7]
    arry[offset+1] = (val >> 8) & 0xff;
   3a534:	e6ffc075 	uxth	ip, r5
   3a538:	e6ffe07e 	uxth	lr, lr
   3a53c:	e1a0e42e 	lsr	lr, lr, #8
   3a540:	e1a0c42c 	lsr	ip, ip, #8
   3a544:	e5c3c011 	strb	ip, [r3, #17]
    arry[offset] = val & 0xff;
   3a548:	e5c35010 	strb	r5, [r3, #16]
   3a54c:	e5c3600d 	strb	r6, [r3, #13]
    arry[offset+1] = (val >> 8) & 0xff;
   3a550:	e5c3e008 	strb	lr, [r3, #8]
    store16BitVal(regSetInstructions, RegisterSPUpdatePos, regs.SP);
   3a554:	e590e004 	ldr	lr, [r0, #4]
    arry[offset] = val & 0xff;
   3a558:	e5c34003 	strb	r4, [r3, #3]
    arry[offset+1] = (val >> 8) & 0xff;
   3a55c:	e6ffc07e 	uxth	ip, lr
   3a560:	e1a0c42c 	lsr	ip, ip, #8
   3a564:	e5c3c025 	strb	ip, [r3, #37]	; 0x25
    arry[offset] = val & 0xff;
   3a568:	e5c3e024 	strb	lr, [r3, #36]	; 0x24
    store16BitVal(regSetInstructions, RegisterHLUpdatePos, regs.HL);
   3a56c:	e590e008 	ldr	lr, [r0, #8]
    store16BitVal(regSetInstructions, RegisterDEUpdatePos, regs.DE);
    store16BitVal(regSetInstructions, RegisterBCUpdatePos, regs.BC);
    store16BitVal(regSetInstructions, RegisterAFDASHUpdatePos, regs.AFDASH);
   3a570:	e590402c 	ldr	r4, [r0, #44]	; 0x2c
    arry[offset+1] = (val >> 8) & 0xff;
   3a574:	e6ffc07e 	uxth	ip, lr
   3a578:	e1a0c42c 	lsr	ip, ip, #8
   3a57c:	e5c3c015 	strb	ip, [r3, #21]
    arry[offset] = val & 0xff;
   3a580:	e5c3e014 	strb	lr, [r3, #20]
    store16BitVal(regSetInstructions, RegisterDEUpdatePos, regs.DE);
   3a584:	e590e00c 	ldr	lr, [r0, #12]
    arry[offset+1] = (val >> 8) & 0xff;
   3a588:	e6ffc07e 	uxth	ip, lr
   3a58c:	e1a0c42c 	lsr	ip, ip, #8
    arry[offset] = val & 0xff;
   3a590:	e5c3e017 	strb	lr, [r3, #23]
    arry[offset+1] = (val >> 8) & 0xff;
   3a594:	e5c3c018 	strb	ip, [r3, #24]
    store16BitVal(regSetInstructions, RegisterBCUpdatePos, regs.BC);
   3a598:	e590c010 	ldr	ip, [r0, #16]
    arry[offset+1] = (val >> 8) & 0xff;
   3a59c:	e6ffe074 	uxth	lr, r4
    arry[offset] = val & 0xff;
   3a5a0:	e5c3c01a 	strb	ip, [r3, #26]
    arry[offset+1] = (val >> 8) & 0xff;
   3a5a4:	e6ffc07c 	uxth	ip, ip
   3a5a8:	e1a0e42e 	lsr	lr, lr, #8
   3a5ac:	e1a0c42c 	lsr	ip, ip, #8
    arry[offset] = val & 0xff;
   3a5b0:	e5c3401d 	strb	r4, [r3, #29]
    arry[offset+1] = (val >> 8) & 0xff;
   3a5b4:	e5c3e01e 	strb	lr, [r3, #30]
   3a5b8:	e5c3c01b 	strb	ip, [r3, #27]
    store16BitVal(regSetInstructions, RegisterAFUpdatePos, regs.AF);
   3a5bc:	e590c014 	ldr	ip, [r0, #20]
    arry[offset] = val & 0xff;
   3a5c0:	e5c3c021 	strb	ip, [r3, #33]	; 0x21
    regSetInstructions[RegisterIUpdatePos] = regs.I;
   3a5c4:	e5904034 	ldr	r4, [r0, #52]	; 0x34
    arry[offset+1] = (val >> 8) & 0xff;
   3a5c8:	e6ffe07c 	uxth	lr, ip
   3a5cc:	e1a0e42e 	lsr	lr, lr, #8
    regSetInstructions[RegisterIUpdatePos] = regs.I;
   3a5d0:	e5c34027 	strb	r4, [r3, #39]	; 0x27
    arry[offset+1] = (val >> 8) & 0xff;
   3a5d4:	e5c3e022 	strb	lr, [r3, #34]	; 0x22
    regSetInstructions[RegisterRUpdatePos] = (regs.R + 256 - 5) % 256;
    regSetInstructions[RegisterAUpdatePos] = regs.AF >> 8;
   3a5d8:	e1a0e44c 	asr	lr, ip, #8
    regSetInstructions[RegisterRUpdatePos] = (regs.R + 256 - 5) % 256;
   3a5dc:	e590c038 	ldr	ip, [r0, #56]	; 0x38
    regSetInstructions[RegisterAUpdatePos] = regs.AF >> 8;
   3a5e0:	e5c3e02f 	strb	lr, [r3, #47]	; 0x2f
    regSetInstructions[RegisterRUpdatePos] = (regs.R + 256 - 5) % 256;
   3a5e4:	e28cc0fb 	add	ip, ip, #251	; 0xfb
   3a5e8:	e27ce000 	rsbs	lr, ip, #0
   3a5ec:	e6efe07e 	uxtb	lr, lr
   3a5f0:	e6efc07c 	uxtb	ip, ip
   3a5f4:	526ec000 	rsbpl	ip, lr, #0
   3a5f8:	e5c3c02b 	strb	ip, [r3, #43]	; 0x2b
    regSetInstructions[RegisterIMUpdatePos] = (regs.INTMODE == 0) ? 0x46 : ((regs.INTMODE == 1) ? 0x56 : 0x5e);
   3a5fc:	e590c03c 	ldr	ip, [r0, #60]	; 0x3c
   3a600:	e35c0000 	cmp	ip, #0
   3a604:	03a0c046 	moveq	ip, #70	; 0x46
   3a608:	0a000002 	beq	3a618 <TargetCPUZ80::getInjectToSetRegs(Z80Registers&, unsigned char*, unsigned long)+0x12c>
   3a60c:	e35c0001 	cmp	ip, #1
   3a610:	03a0c056 	moveq	ip, #86	; 0x56
   3a614:	13a0c05e 	movne	ip, #94	; 0x5e
   3a618:	e5c3c031 	strb	ip, [r3, #49]	; 0x31
    regSetInstructions[RegisterINTENUpdatePos] = (regs.INTENABLED == 0) ? 0xf3 : 0xfb;
   3a61c:	e590c040 	ldr	ip, [r0, #64]	; 0x40
   3a620:	e35c0000 	cmp	ip, #0
   3a624:	03a0c0f3 	moveq	ip, #243	; 0xf3
   3a628:	13a0c0fb 	movne	ip, #251	; 0xfb
   3a62c:	e5c3c032 	strb	ip, [r3, #50]	; 0x32
    store16BitVal(regSetInstructions, RegisterPCUpdatePos, regs.PC);
   3a630:	e5900000 	ldr	r0, [r0]

    if (codeMaxlen >= sizeof(regSetInstructions))
   3a634:	e3520035 	cmp	r2, #53	; 0x35
    arry[offset+1] = (val >> 8) & 0xff;
   3a638:	e6ffc070 	uxth	ip, r0
   3a63c:	e1a0c42c 	lsr	ip, ip, #8
    arry[offset] = val & 0xff;
   3a640:	e5c30034 	strb	r0, [r3, #52]	; 0x34
    arry[offset+1] = (val >> 8) & 0xff;
   3a644:	e5c3c035 	strb	ip, [r3, #53]	; 0x35
    if (codeMaxlen >= sizeof(regSetInstructions))
   3a648:	8a000001 	bhi	3a654 <TargetCPUZ80::getInjectToSetRegs(Z80Registers&, unsigned char*, unsigned long)+0x168>
    {
        memcpy(pCodeBuffer, regSetInstructions, codeMaxlen);
        return sizeof(regSetInstructions);
    }
    return 0;
   3a64c:	e3a00000 	mov	r0, #0
}
   3a650:	e8bd8070 	pop	{r4, r5, r6, pc}
   3a654:	e1a00001 	mov	r0, r1
        memcpy(pCodeBuffer, regSetInstructions, codeMaxlen);
   3a658:	e59f1008 	ldr	r1, [pc, #8]	; 3a668 <TargetCPUZ80::getInjectToSetRegs(Z80Registers&, unsigned char*, unsigned long)+0x17c>
   3a65c:	eb0049c1 	bl	4cd68 <memcpy>
        return sizeof(regSetInstructions);
   3a660:	e3a00036 	mov	r0, #54	; 0x36
   3a664:	e8bd8070 	pop	{r4, r5, r6, pc}
   3a668:	0006f400 	.word	0x0006f400

0003a66c <TargetCPUZ80::getSnippetToSetRegs(unsigned long, Z80Registers&, unsigned char*, unsigned long)>:
    arry[offset] = val & 0xff;
   3a66c:	e59fc18c 	ldr	ip, [pc, #396]	; 3a800 <TargetCPUZ80::getSnippetToSetRegs(unsigned long, Z80Registers&, unsigned char*, unsigned long)+0x194>
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Handle snippet to set regs
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////

int TargetCPUZ80::getSnippetToSetRegs(uint32_t codeLocation, Z80Registers& regs, uint8_t* pCodeBuffer, uint32_t codeMaxlen)
{
   3a670:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    const int RegisterPCUpdatePos = 57;

    // Fill in the register values
    store16BitVal(regSetInstructions, TempSPUpdatePos, codeLocation+6);
    store16BitVal(regSetInstructions, RegisterIXUpdatePos, regs.IX);
    store16BitVal(regSetInstructions, RegisterIYUpdatePos, regs.IY);
   3a674:	e591e01c 	ldr	lr, [r1, #28]
    store16BitVal(regSetInstructions, RegisterIXUpdatePos, regs.IX);
   3a678:	e5918018 	ldr	r8, [r1, #24]
    store16BitVal(regSetInstructions, RegisterHLDASHUpdatePos, regs.HLDASH);
   3a67c:	e5917020 	ldr	r7, [r1, #32]
    arry[offset] = val & 0xff;
   3a680:	e5cce048 	strb	lr, [ip, #72]	; 0x48
    arry[offset+1] = (val >> 8) & 0xff;
   3a684:	e6ffe07e 	uxth	lr, lr
   3a688:	e1a0e42e 	lsr	lr, lr, #8
    store16BitVal(regSetInstructions, RegisterDEDASHUpdatePos, regs.DEDASH);
   3a68c:	e5916024 	ldr	r6, [r1, #36]	; 0x24
    store16BitVal(regSetInstructions, RegisterBCDASHUpdatePos, regs.BCDASH);
   3a690:	e5915028 	ldr	r5, [r1, #40]	; 0x28
    arry[offset+1] = (val >> 8) & 0xff;
   3a694:	e5cce049 	strb	lr, [ip, #73]	; 0x49
   3a698:	e6ff4078 	uxth	r4, r8
   3a69c:	e6ffe077 	uxth	lr, r7
   3a6a0:	e1a04424 	lsr	r4, r4, #8
   3a6a4:	e1a0e42e 	lsr	lr, lr, #8
   3a6a8:	e5cce04c 	strb	lr, [ip, #76]	; 0x4c
   3a6ac:	e5cc4045 	strb	r4, [ip, #69]	; 0x45
   3a6b0:	e6ffe075 	uxth	lr, r5
   3a6b4:	e6ff4076 	uxth	r4, r6
   3a6b8:	e1a04424 	lsr	r4, r4, #8
   3a6bc:	e1a0e42e 	lsr	lr, lr, #8
    arry[offset] = val & 0xff;
   3a6c0:	e5cc5051 	strb	r5, [ip, #81]	; 0x51
    arry[offset+1] = (val >> 8) & 0xff;
   3a6c4:	e5cce052 	strb	lr, [ip, #82]	; 0x52
    arry[offset] = val & 0xff;
   3a6c8:	e5cc704b 	strb	r7, [ip, #75]	; 0x4b
   3a6cc:	e5cc604e 	strb	r6, [ip, #78]	; 0x4e
    arry[offset+1] = (val >> 8) & 0xff;
   3a6d0:	e5cc404f 	strb	r4, [ip, #79]	; 0x4f
    arry[offset] = val & 0xff;
   3a6d4:	e5cc8044 	strb	r8, [ip, #68]	; 0x44
    store16BitVal(regSetInstructions, RegisterSPUpdatePos, regs.SP);
   3a6d8:	e5914004 	ldr	r4, [r1, #4]
    store16BitVal(regSetInstructions, RegisterHLUpdatePos, regs.HL);
    store16BitVal(regSetInstructions, RegisterDEUpdatePos, regs.DE);
    store16BitVal(regSetInstructions, RegisterBCUpdatePos, regs.BC);
    store16BitVal(regSetInstructions, RegisterAFDASHUpdatePos, regs.AFDASH);
   3a6dc:	e591502c 	ldr	r5, [r1, #44]	; 0x2c
    arry[offset+1] = (val >> 8) & 0xff;
   3a6e0:	e6ffe074 	uxth	lr, r4
   3a6e4:	e1a0e42e 	lsr	lr, lr, #8
   3a6e8:	e5cce062 	strb	lr, [ip, #98]	; 0x62
    arry[offset] = val & 0xff;
   3a6ec:	e5cc4061 	strb	r4, [ip, #97]	; 0x61
    store16BitVal(regSetInstructions, RegisterHLUpdatePos, regs.HL);
   3a6f0:	e5914008 	ldr	r4, [r1, #8]
    store16BitVal(regSetInstructions, TempSPUpdatePos, codeLocation+6);
   3a6f4:	e2800006 	add	r0, r0, #6
    arry[offset+1] = (val >> 8) & 0xff;
   3a6f8:	e6ffe074 	uxth	lr, r4
   3a6fc:	e1a0e42e 	lsr	lr, lr, #8
   3a700:	e5cce056 	strb	lr, [ip, #86]	; 0x56
    arry[offset] = val & 0xff;
   3a704:	e5cc4055 	strb	r4, [ip, #85]	; 0x55
    store16BitVal(regSetInstructions, RegisterDEUpdatePos, regs.DE);
   3a708:	e591400c 	ldr	r4, [r1, #12]
    store16BitVal(regSetInstructions, TempSPUpdatePos, codeLocation+6);
   3a70c:	e6ff0070 	uxth	r0, r0
    arry[offset+1] = (val >> 8) & 0xff;
   3a710:	e6ffe074 	uxth	lr, r4
   3a714:	e1a0e42e 	lsr	lr, lr, #8
    arry[offset] = val & 0xff;
   3a718:	e5cc4058 	strb	r4, [ip, #88]	; 0x58
    arry[offset+1] = (val >> 8) & 0xff;
   3a71c:	e5cce059 	strb	lr, [ip, #89]	; 0x59
    store16BitVal(regSetInstructions, RegisterBCUpdatePos, regs.BC);
   3a720:	e5916010 	ldr	r6, [r1, #16]
    arry[offset+1] = (val >> 8) & 0xff;
   3a724:	e6ffe075 	uxth	lr, r5
   3a728:	e6ff4076 	uxth	r4, r6
   3a72c:	e1a04424 	lsr	r4, r4, #8
   3a730:	e5cc405c 	strb	r4, [ip, #92]	; 0x5c
   3a734:	e1a0e42e 	lsr	lr, lr, #8
   3a738:	e1a04420 	lsr	r4, r0, #8
    arry[offset] = val & 0xff;
   3a73c:	e5cc0039 	strb	r0, [ip, #57]	; 0x39
    arry[offset+1] = (val >> 8) & 0xff;
   3a740:	e5cc403a 	strb	r4, [ip, #58]	; 0x3a
    arry[offset] = val & 0xff;
   3a744:	e5cc503e 	strb	r5, [ip, #62]	; 0x3e
   3a748:	e5cc605b 	strb	r6, [ip, #91]	; 0x5b
    arry[offset+1] = (val >> 8) & 0xff;
   3a74c:	e5cce03f 	strb	lr, [ip, #63]	; 0x3f
    store16BitVal(regSetInstructions, RegisterAFUpdatePos, regs.AF);
    regSetInstructions[RegisterIUpdatePos] = regs.I;
   3a750:	e5910034 	ldr	r0, [r1, #52]	; 0x34
    store16BitVal(regSetInstructions, RegisterAFUpdatePos, regs.AF);
   3a754:	e5914014 	ldr	r4, [r1, #20]
    regSetInstructions[RegisterIUpdatePos] = regs.I;
   3a758:	e5cc0064 	strb	r0, [ip, #100]	; 0x64
    regSetInstructions[RegisterRUpdatePos] = (regs.R + 256 - 5) % 256;
   3a75c:	e591e038 	ldr	lr, [r1, #56]	; 0x38
    regSetInstructions[RegisterAUpdatePos] = regs.AF >> 8;
   3a760:	e1a00444 	asr	r0, r4, #8
    regSetInstructions[RegisterRUpdatePos] = (regs.R + 256 - 5) % 256;
   3a764:	e28ee0fb 	add	lr, lr, #251	; 0xfb
   3a768:	e27e5000 	rsbs	r5, lr, #0
   3a76c:	e6ef5075 	uxtb	r5, r5
   3a770:	e6efe07e 	uxtb	lr, lr
   3a774:	5265e000 	rsbpl	lr, r5, #0
   3a778:	e5cce068 	strb	lr, [ip, #104]	; 0x68
    regSetInstructions[RegisterAUpdatePos] = regs.AF >> 8;
   3a77c:	e5cc006c 	strb	r0, [ip, #108]	; 0x6c
    regSetInstructions[RegisterIMUpdatePos] = (regs.INTMODE == 0) ? 0x46 : ((regs.INTMODE == 1) ? 0x56 : 0x5e);
   3a780:	e591003c 	ldr	r0, [r1, #60]	; 0x3c
    arry[offset+1] = (val >> 8) & 0xff;
   3a784:	e6ffe074 	uxth	lr, r4
   3a788:	e1a0e42e 	lsr	lr, lr, #8
    regSetInstructions[RegisterIMUpdatePos] = (regs.INTMODE == 0) ? 0x46 : ((regs.INTMODE == 1) ? 0x56 : 0x5e);
   3a78c:	e3500000 	cmp	r0, #0
    arry[offset] = val & 0xff;
   3a790:	e5cc4040 	strb	r4, [ip, #64]	; 0x40
    arry[offset+1] = (val >> 8) & 0xff;
   3a794:	e5cce041 	strb	lr, [ip, #65]	; 0x41
    regSetInstructions[RegisterIMUpdatePos] = (regs.INTMODE == 0) ? 0x46 : ((regs.INTMODE == 1) ? 0x56 : 0x5e);
   3a798:	03a00046 	moveq	r0, #70	; 0x46
   3a79c:	0a000002 	beq	3a7ac <TargetCPUZ80::getSnippetToSetRegs(unsigned long, Z80Registers&, unsigned char*, unsigned long)+0x140>
   3a7a0:	e3500001 	cmp	r0, #1
   3a7a4:	03a00056 	moveq	r0, #86	; 0x56
   3a7a8:	13a0005e 	movne	r0, #94	; 0x5e
   3a7ac:	e5cc006e 	strb	r0, [ip, #110]	; 0x6e
    regSetInstructions[RegisterINTENUpdatePos] = (regs.INTENABLED == 0) ? 0xf3 : 0xfb;
   3a7b0:	e5910040 	ldr	r0, [r1, #64]	; 0x40
   3a7b4:	e3500000 	cmp	r0, #0
   3a7b8:	03a000f3 	moveq	r0, #243	; 0xf3
   3a7bc:	13a000fb 	movne	r0, #251	; 0xfb
   3a7c0:	e5cc006f 	strb	r0, [ip, #111]	; 0x6f
    store16BitVal(regSetInstructions, RegisterPCUpdatePos, regs.PC);
   3a7c4:	e5910000 	ldr	r0, [r1]

    if (codeMaxlen >= sizeof(regSetInstructions))
   3a7c8:	e353003a 	cmp	r3, #58	; 0x3a
    arry[offset+1] = (val >> 8) & 0xff;
   3a7cc:	e6ff1070 	uxth	r1, r0
   3a7d0:	e1a01421 	lsr	r1, r1, #8
    arry[offset] = val & 0xff;
   3a7d4:	e5cc0071 	strb	r0, [ip, #113]	; 0x71
    arry[offset+1] = (val >> 8) & 0xff;
   3a7d8:	e5cc1072 	strb	r1, [ip, #114]	; 0x72
    if (codeMaxlen >= sizeof(regSetInstructions))
   3a7dc:	8a000001 	bhi	3a7e8 <TargetCPUZ80::getSnippetToSetRegs(unsigned long, Z80Registers&, unsigned char*, unsigned long)+0x17c>
    {
        memcpy(pCodeBuffer, regSetInstructions, codeMaxlen);
        return sizeof(regSetInstructions);
    }
    return 0;
   3a7e0:	e3a00000 	mov	r0, #0
}
   3a7e4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   3a7e8:	e1a00002 	mov	r0, r2
        memcpy(pCodeBuffer, regSetInstructions, codeMaxlen);
   3a7ec:	e59f1010 	ldr	r1, [pc, #16]	; 3a804 <TargetCPUZ80::getSnippetToSetRegs(unsigned long, Z80Registers&, unsigned char*, unsigned long)+0x198>
   3a7f0:	e1a02003 	mov	r2, r3
   3a7f4:	eb00495b 	bl	4cd68 <memcpy>
        return sizeof(regSetInstructions);
   3a7f8:	e3a0003b 	mov	r0, #59	; 0x3b
   3a7fc:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   3a800:	0006f400 	.word	0x0006f400
   3a804:	0006f438 	.word	0x0006f438

0003a808 <TargetState::clear()>:
Z80Registers TargetState::_targetRegisters;

// Clear target
void TargetState::clear()
{
    _targetRegsValid = false;
   3a808:	e3a03000 	mov	r3, #0
   3a80c:	e59f2030 	ldr	r2, [pc, #48]	; 3a844 <TargetState::clear()+0x3c>
    _targetMemoryBlockLastIdx = 0;

    for (int i = 0; i < MAX_TARGET_MEMORY_BLOCKS; i++)
        _targetMemoryBlocks[i].len = 0;
   3a810:	e1a01003 	mov	r1, r3
    _targetRegsValid = false;
   3a814:	e5c23000 	strb	r3, [r2]
    _targetMemoryBlockLastIdx = 0;
   3a818:	e5823004 	str	r3, [r2, #4]
   3a81c:	e2823008 	add	r3, r2, #8
   3a820:	e28220a8 	add	r2, r2, #168	; 0xa8
        _targetMemoryBlocks[i].len = 0;
   3a824:	e5831004 	str	r1, [r3, #4]
   3a828:	e2833008 	add	r3, r3, #8
    for (int i = 0; i < MAX_TARGET_MEMORY_BLOCKS; i++)
   3a82c:	e1530002 	cmp	r3, r2
   3a830:	1afffffb 	bne	3a824 <TargetState::clear()+0x1c>
   3a834:	e3a02801 	mov	r2, #65536	; 0x10000
   3a838:	e3a01000 	mov	r1, #0
   3a83c:	e59f0004 	ldr	r0, [pc, #4]	; 3a848 <TargetState::clear()+0x40>
   3a840:	ea00498c 	b	4ce78 <memset>
   3a844:	0008c8c4 	.word	0x0008c8c4
   3a848:	0008c9b4 	.word	0x0008c9b4

0003a84c <TargetState::addMemoryBlock(unsigned long, unsigned char const*, unsigned long)>:
    for (int i = 0; i < MAX_TARGET_MEMORY_SIZE; i++)
        _pTargetMemoryImage[i] = 0;
}

void TargetState::addMemoryBlock(uint32_t addr, const uint8_t* pData, uint32_t len)
{
   3a84c:	e92d4070 	push	{r4, r5, r6, lr}
    // Check if contiguous with other data
    int blockIdx = -1;
    for (int i = 0; i < _targetMemoryBlockLastIdx; i++) {
   3a850:	e59f60d0 	ldr	r6, [pc, #208]	; 3a928 <TargetState::addMemoryBlock(unsigned long, unsigned char const*, unsigned long)+0xdc>
   3a854:	e5965004 	ldr	r5, [r6, #4]
   3a858:	e3550000 	cmp	r5, #0
   3a85c:	da000012 	ble	3a8ac <TargetState::addMemoryBlock(unsigned long, unsigned char const*, unsigned long)+0x60>
        if (_targetMemoryBlocks[i].start + _targetMemoryBlocks[i].len == addr) {
   3a860:	e596400c 	ldr	r4, [r6, #12]
   3a864:	e5963008 	ldr	r3, [r6, #8]
   3a868:	e0843003 	add	r3, r4, r3
   3a86c:	e1500003 	cmp	r0, r3
    for (int i = 0; i < _targetMemoryBlockLastIdx; i++) {
   3a870:	13a0e000 	movne	lr, #0
   3a874:	12863008 	addne	r3, r6, #8
        if (_targetMemoryBlocks[i].start + _targetMemoryBlocks[i].len == addr) {
   3a878:	1a000006 	bne	3a898 <TargetState::addMemoryBlock(unsigned long, unsigned char const*, unsigned long)+0x4c>
   3a87c:	ea00001d 	b	3a8f8 <TargetState::addMemoryBlock(unsigned long, unsigned char const*, unsigned long)+0xac>
   3a880:	e593400c 	ldr	r4, [r3, #12]
   3a884:	e593c008 	ldr	ip, [r3, #8]
   3a888:	e2833008 	add	r3, r3, #8
   3a88c:	e084c00c 	add	ip, r4, ip
   3a890:	e15c0000 	cmp	ip, r0
   3a894:	0a000018 	beq	3a8fc <TargetState::addMemoryBlock(unsigned long, unsigned char const*, unsigned long)+0xb0>
    for (int i = 0; i < _targetMemoryBlockLastIdx; i++) {
   3a898:	e28ee001 	add	lr, lr, #1
   3a89c:	e15e0005 	cmp	lr, r5
   3a8a0:	1afffff6 	bne	3a880 <TargetState::addMemoryBlock(unsigned long, unsigned char const*, unsigned long)+0x34>
    }

    // New block
    if (blockIdx == -1) 
    {
        if (_targetMemoryBlockLastIdx >= MAX_TARGET_MEMORY_BLOCKS) 
   3a8a4:	e35e0013 	cmp	lr, #19
   3a8a8:	ca000019 	bgt	3a914 <TargetState::addMemoryBlock(unsigned long, unsigned char const*, unsigned long)+0xc8>
        {
            LogWrite(FromTargetState, LOG_DEBUG, "Too many target memory blocks\n");
            return;
        }
        _targetMemoryBlocks[_targetMemoryBlockLastIdx].start = addr;
   3a8ac:	e0863185 	add	r3, r6, r5, lsl #3
    }

    // ee_printf("Blk st %04x len %d\n", addr, len);
    
    // Store block
    for (unsigned int i = 0; i < len; i++) 
   3a8b0:	e3520000 	cmp	r2, #0
        _targetMemoryBlockLastIdx++;
   3a8b4:	e2855001 	add	r5, r5, #1
        _targetMemoryBlocks[_targetMemoryBlockLastIdx].start = addr;
   3a8b8:	e5830008 	str	r0, [r3, #8]
        _targetMemoryBlocks[_targetMemoryBlockLastIdx].len = len;
   3a8bc:	e583200c 	str	r2, [r3, #12]
        _targetMemoryBlockLastIdx++;
   3a8c0:	e5865004 	str	r5, [r6, #4]
    for (unsigned int i = 0; i < len; i++) 
   3a8c4:	08bd8070 	popeq	{r4, r5, r6, pc}
   3a8c8:	e1a03000 	mov	r3, r0
    {
        if (addr + i < MAX_TARGET_MEMORY_SIZE)
   3a8cc:	e59fc058 	ldr	ip, [pc, #88]	; 3a92c <TargetState::addMemoryBlock(unsigned long, unsigned char const*, unsigned long)+0xe0>
            _pTargetMemoryImage[addr + i] = pData[i];
   3a8d0:	e59fe058 	ldr	lr, [pc, #88]	; 3a930 <TargetState::addMemoryBlock(unsigned long, unsigned char const*, unsigned long)+0xe4>
   3a8d4:	e0802002 	add	r2, r0, r2
   3a8d8:	e0411000 	sub	r1, r1, r0
        if (addr + i < MAX_TARGET_MEMORY_SIZE)
   3a8dc:	e153000c 	cmp	r3, ip
            _pTargetMemoryImage[addr + i] = pData[i];
   3a8e0:	97d10003 	ldrbls	r0, [r1, r3]
   3a8e4:	97c3000e 	strbls	r0, [r3, lr]
   3a8e8:	e2833001 	add	r3, r3, #1
    for (unsigned int i = 0; i < len; i++) 
   3a8ec:	e1520003 	cmp	r2, r3
   3a8f0:	1afffff9 	bne	3a8dc <TargetState::addMemoryBlock(unsigned long, unsigned char const*, unsigned long)+0x90>
   3a8f4:	e8bd8070 	pop	{r4, r5, r6, pc}
    for (int i = 0; i < _targetMemoryBlockLastIdx; i++) {
   3a8f8:	e3a0e000 	mov	lr, #0
            _targetMemoryBlocks[i].len += len;
   3a8fc:	e086e18e 	add	lr, r6, lr, lsl #3
   3a900:	e0844002 	add	r4, r4, r2
    for (unsigned int i = 0; i < len; i++) 
   3a904:	e3520000 	cmp	r2, #0
            _targetMemoryBlocks[i].len += len;
   3a908:	e58e400c 	str	r4, [lr, #12]
    for (unsigned int i = 0; i < len; i++) 
   3a90c:	1affffed 	bne	3a8c8 <TargetState::addMemoryBlock(unsigned long, unsigned char const*, unsigned long)+0x7c>
   3a910:	e8bd8070 	pop	{r4, r5, r6, pc}
            LogWrite(FromTargetState, LOG_DEBUG, "Too many target memory blocks\n");
   3a914:	e59f2018 	ldr	r2, [pc, #24]	; 3a934 <TargetState::addMemoryBlock(unsigned long, unsigned char const*, unsigned long)+0xe8>
   3a918:	e3a01004 	mov	r1, #4
    }
}
   3a91c:	e8bd4070 	pop	{r4, r5, r6, lr}
            LogWrite(FromTargetState, LOG_DEBUG, "Too many target memory blocks\n");
   3a920:	e59f0010 	ldr	r0, [pc, #16]	; 3a938 <TargetState::addMemoryBlock(unsigned long, unsigned char const*, unsigned long)+0xec>
   3a924:	eaffa613 	b	24178 <LogWrite>
   3a928:	0008c8c4 	.word	0x0008c8c4
   3a92c:	0000ffff 	.word	0x0000ffff
   3a930:	0008c9b4 	.word	0x0008c9b4
   3a934:	00055b80 	.word	0x00055b80
   3a938:	00055b74 	.word	0x00055b74

0003a93c <TargetState::numMemoryBlocks()>:

int TargetState::numMemoryBlocks()
{
    return _targetMemoryBlockLastIdx;
   3a93c:	e59f3004 	ldr	r3, [pc, #4]	; 3a948 <TargetState::numMemoryBlocks()+0xc>
}
   3a940:	e5930004 	ldr	r0, [r3, #4]
   3a944:	e12fff1e 	bx	lr
   3a948:	0008c8c4 	.word	0x0008c8c4

0003a94c <TargetState::getMemoryBlock(int)>:

TargetState::TargetMemoryBlock* TargetState::getMemoryBlock(int n)
{
    return &_targetMemoryBlocks[n];
   3a94c:	e59f3004 	ldr	r3, [pc, #4]	; 3a958 <TargetState::getMemoryBlock(int)+0xc>
}
   3a950:	e0830180 	add	r0, r3, r0, lsl #3
   3a954:	e12fff1e 	bx	lr
   3a958:	0008c8cc 	.word	0x0008c8cc

0003a95c <TargetState::getMemoryImagePtr()>:

uint8_t* TargetState::getMemoryImagePtr()
{
    return _pTargetMemoryImage;
}
   3a95c:	e59f0000 	ldr	r0, [pc]	; 3a964 <TargetState::getMemoryImagePtr()+0x8>
   3a960:	e12fff1e 	bx	lr
   3a964:	0008c9b4 	.word	0x0008c9b4

0003a968 <TargetState::getMemoryImageSize()>:

int TargetState::getMemoryImageSize()
{
    return MAX_TARGET_MEMORY_SIZE;
}
   3a968:	e3a00801 	mov	r0, #65536	; 0x10000
   3a96c:	e12fff1e 	bx	lr

0003a970 <TargetState::setTargetRegisters(Z80Registers const&)>:

void TargetState::setTargetRegisters(const Z80Registers& regs)
{
   3a970:	e92d4030 	push	{r4, r5, lr}
   3a974:	e1a04000 	mov	r4, r0
    _targetRegisters = regs;
   3a978:	e59f503c 	ldr	r5, [pc, #60]	; 3a9bc <TargetState::setTargetRegisters(Z80Registers const&)+0x4c>
{
   3a97c:	e24dd00c 	sub	sp, sp, #12
    _targetRegisters = regs;
   3a980:	e1a01000 	mov	r1, r0
   3a984:	e3a02048 	mov	r2, #72	; 0x48
   3a988:	e28500a8 	add	r0, r5, #168	; 0xa8
   3a98c:	eb0048f5 	bl	4cd68 <memcpy>
    _targetRegsValid = true;
   3a990:	e3a0c001 	mov	ip, #1
    LogWrite(FromTargetState, LOG_VERBOSE, "SetTargetRegs PC=%04x SP=%04x", regs.PC, regs.SP);
   3a994:	e5942004 	ldr	r2, [r4, #4]
   3a998:	e5943000 	ldr	r3, [r4]
   3a99c:	e3a01005 	mov	r1, #5
   3a9a0:	e58d2000 	str	r2, [sp]
   3a9a4:	e59f0014 	ldr	r0, [pc, #20]	; 3a9c0 <TargetState::setTargetRegisters(Z80Registers const&)+0x50>
   3a9a8:	e59f2014 	ldr	r2, [pc, #20]	; 3a9c4 <TargetState::setTargetRegisters(Z80Registers const&)+0x54>
    _targetRegsValid = true;
   3a9ac:	e5c5c000 	strb	ip, [r5]
    LogWrite(FromTargetState, LOG_VERBOSE, "SetTargetRegs PC=%04x SP=%04x", regs.PC, regs.SP);
   3a9b0:	ebffa5f0 	bl	24178 <LogWrite>
}
   3a9b4:	e28dd00c 	add	sp, sp, #12
   3a9b8:	e8bd8030 	pop	{r4, r5, pc}
   3a9bc:	0008c8c4 	.word	0x0008c8c4
   3a9c0:	00055b74 	.word	0x00055b74
   3a9c4:	00055ba0 	.word	0x00055ba0

0003a9c8 <TargetState::areRegistersValid()>:

bool TargetState::areRegistersValid()
{
    return _targetRegsValid;
   3a9c8:	e59f3004 	ldr	r3, [pc, #4]	; 3a9d4 <TargetState::areRegistersValid()+0xc>
}
   3a9cc:	e5d30000 	ldrb	r0, [r3]
   3a9d0:	e12fff1e 	bx	lr
   3a9d4:	0008c8c4 	.word	0x0008c8c4

0003a9d8 <TargetState::getTargetRegs(Z80Registers&)>:

void TargetState::getTargetRegs(Z80Registers& regs)
{
   3a9d8:	e92d4010 	push	{r4, lr}
    regs = _targetRegisters;
   3a9dc:	e3a02048 	mov	r2, #72	; 0x48
   3a9e0:	e59f1018 	ldr	r1, [pc, #24]	; 3aa00 <TargetState::getTargetRegs(Z80Registers&)+0x28>
   3a9e4:	eb0048df 	bl	4cd68 <memcpy>
    LogWrite(FromTargetState, LOG_VERBOSE, "getTargetRegs PC=%04x", regs.PC);
}
   3a9e8:	e8bd4010 	pop	{r4, lr}
    LogWrite(FromTargetState, LOG_VERBOSE, "getTargetRegs PC=%04x", regs.PC);
   3a9ec:	e5903000 	ldr	r3, [r0]
   3a9f0:	e59f200c 	ldr	r2, [pc, #12]	; 3aa04 <TargetState::getTargetRegs(Z80Registers&)+0x2c>
   3a9f4:	e3a01005 	mov	r1, #5
   3a9f8:	e59f0008 	ldr	r0, [pc, #8]	; 3aa08 <TargetState::getTargetRegs(Z80Registers&)+0x30>
   3a9fc:	eaffa5dd 	b	24178 <LogWrite>
   3aa00:	0008c96c 	.word	0x0008c96c
   3aa04:	00055bc0 	.word	0x00055bc0
   3aa08:	00055b74 	.word	0x00055b74

0003aa0c <_GLOBAL__sub_I__ZN11TargetState19_pTargetMemoryImageE>:
        PC = SP = HL = DE = BC = AF = IX = IY = 0;
   3aa0c:	e3a02000 	mov	r2, #0
   3aa10:	e59f3048 	ldr	r3, [pc, #72]	; 3aa60 <_GLOBAL__sub_I__ZN11TargetState19_pTargetMemoryImageE+0x54>
   3aa14:	e58320c4 	str	r2, [r3, #196]	; 0xc4
   3aa18:	e58320c0 	str	r2, [r3, #192]	; 0xc0
   3aa1c:	e58320bc 	str	r2, [r3, #188]	; 0xbc
   3aa20:	e58320b8 	str	r2, [r3, #184]	; 0xb8
   3aa24:	e58320b4 	str	r2, [r3, #180]	; 0xb4
   3aa28:	e58320b0 	str	r2, [r3, #176]	; 0xb0
   3aa2c:	e58320ac 	str	r2, [r3, #172]	; 0xac
   3aa30:	e58320a8 	str	r2, [r3, #168]	; 0xa8
        HLDASH = DEDASH = BCDASH = AFDASH = MEMPTR = 0;
   3aa34:	e58320d8 	str	r2, [r3, #216]	; 0xd8
   3aa38:	e58320d4 	str	r2, [r3, #212]	; 0xd4
   3aa3c:	e58320d0 	str	r2, [r3, #208]	; 0xd0
   3aa40:	e58320cc 	str	r2, [r3, #204]	; 0xcc
   3aa44:	e58320c8 	str	r2, [r3, #200]	; 0xc8
        I = R = INTMODE = INTENABLED = VPS = 0;
   3aa48:	e58320ec 	str	r2, [r3, #236]	; 0xec
   3aa4c:	e58320e8 	str	r2, [r3, #232]	; 0xe8
   3aa50:	e58320e4 	str	r2, [r3, #228]	; 0xe4
   3aa54:	e58320e0 	str	r2, [r3, #224]	; 0xe0
   3aa58:	e58320dc 	str	r2, [r3, #220]	; 0xdc
}
   3aa5c:	e12fff1e 	bx	lr
   3aa60:	0008c8c4 	.word	0x0008c8c4

0003aa64 <TargetTracker::busActionCompleteStatic(BR_BUS_ACTION, BR_BUS_ACTION_REASON)>:
// Handle bus actions
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void TargetTracker::busActionCompleteStatic([[maybe_unused]]BR_BUS_ACTION actionType, [[maybe_unused]] BR_BUS_ACTION_REASON reason)
{
    if (actionType == BR_BUS_ACTION_RESET)
   3aa64:	e3500001 	cmp	r0, #1
   3aa68:	112fff1e 	bxne	lr
{
   3aa6c:	e92d4070 	push	{r4, r5, r6, lr}
    {
        _prefixTracker[0] = _prefixTracker[1] = false;
   3aa70:	e3a06000 	mov	r6, #0
   3aa74:	e1a04000 	mov	r4, r0
   3aa78:	e59f5044 	ldr	r5, [pc, #68]	; 3aac4 <TargetTracker::busActionCompleteStatic(BR_BUS_ACTION, BR_BUS_ACTION_REASON)+0x60>

        // Since we're receiving a reset we are at the start of the program and want to hold
        // immediately
        LogWrite(FromTargetTracker, LOG_DEBUG, "busActionComplete Reset");
   3aa7c:	e59f2044 	ldr	r2, [pc, #68]	; 3aac8 <TargetTracker::busActionCompleteStatic(BR_BUS_ACTION, BR_BUS_ACTION_REASON)+0x64>
   3aa80:	e3a01004 	mov	r1, #4
   3aa84:	e59f0040 	ldr	r0, [pc, #64]	; 3aacc <TargetTracker::busActionCompleteStatic(BR_BUS_ACTION, BR_BUS_ACTION_REASON)+0x68>
        _prefixTracker[0] = _prefixTracker[1] = false;
   3aa88:	e5c56001 	strb	r6, [r5, #1]
   3aa8c:	e5c56000 	strb	r6, [r5]
        LogWrite(FromTargetTracker, LOG_DEBUG, "busActionComplete Reset");
   3aa90:	ebffa5b8 	bl	24178 <LogWrite>
        _targetStateAcqMode = TARGET_STATE_ACQ_INJECT_IF_NEW_INSTR;

        // Check for reset pending
        if (_targetResetPending)
   3aa94:	e5d53003 	ldrb	r3, [r5, #3]
        _targetStateAcqMode = TARGET_STATE_ACQ_INJECT_IF_NEW_INSTR;
   3aa98:	e5c54002 	strb	r4, [r5, #2]
        if (_targetResetPending)
   3aa9c:	e1530006 	cmp	r3, r6
   3aaa0:	08bd8070 	popeq	{r4, r5, r6, pc}
        {
            LogWrite(FromTargetTracker, LOG_DEBUG, "busActionComplete Reset pending - go straight to inject");
   3aaa4:	e59f2024 	ldr	r2, [pc, #36]	; 3aad0 <TargetTracker::busActionCompleteStatic(BR_BUS_ACTION, BR_BUS_ACTION_REASON)+0x6c>
   3aaa8:	e3a01004 	mov	r1, #4
   3aaac:	e59f0018 	ldr	r0, [pc, #24]	; 3aacc <TargetTracker::busActionCompleteStatic(BR_BUS_ACTION, BR_BUS_ACTION_REASON)+0x68>
   3aab0:	ebffa5b0 	bl	24178 <LogWrite>
            // Go straight into injecting mode
            _targetStateAcqMode = TARGET_STATE_ACQ_INJECTING;
   3aab4:	e3a03002 	mov	r3, #2
            _targetResetPending = false;
   3aab8:	e5c56003 	strb	r6, [r5, #3]
            _targetStateAcqMode = TARGET_STATE_ACQ_INJECTING;
   3aabc:	e5c53002 	strb	r3, [r5, #2]
        }
    }
}
   3aac0:	e8bd8070 	pop	{r4, r5, r6, pc}
   3aac4:	0009c9b4 	.word	0x0009c9b4
   3aac8:	00055be8 	.word	0x00055be8
   3aacc:	00055bd8 	.word	0x00055bd8
   3aad0:	00055c00 	.word	0x00055c00

0003aad4 <TargetTracker::init()>:
{
   3aad4:	e92d4010 	push	{r4, lr}
    if (_busSocketId < 0)
   3aad8:	e59f4018 	ldr	r4, [pc, #24]	; 3aaf8 <TargetTracker::init()+0x24>
   3aadc:	e5943000 	ldr	r3, [r4]
   3aae0:	e3530000 	cmp	r3, #0
   3aae4:	a8bd8010 	popge	{r4, pc}
        _busSocketId = BusAccess::busSocketAdd(_busSocketInfo);
   3aae8:	e2840004 	add	r0, r4, #4
   3aaec:	ebfff6e5 	bl	38688 <BusAccess::busSocketAdd(BusSocketInfo&)>
   3aaf0:	e5840000 	str	r0, [r4]
}
   3aaf4:	e8bd8010 	pop	{r4, pc}
   3aaf8:	0006f474 	.word	0x0006f474

0003aafc <TargetTracker::service()>:
}
   3aafc:	e12fff1e 	bx	lr

0003ab00 <TargetTracker::enable(bool)>:
    _stepMode = STEP_MODE_STEP_PAUSED;
   3ab00:	e3a03000 	mov	r3, #0
{
   3ab04:	e92d4070 	push	{r4, r5, r6, lr}
    _stepMode = STEP_MODE_STEP_PAUSED;
   3ab08:	e59f505c 	ldr	r5, [pc, #92]	; 3ab6c <TargetTracker::enable(bool)+0x6c>
   3ab0c:	e59f605c 	ldr	r6, [pc, #92]	; 3ab70 <TargetTracker::enable(bool)+0x70>
    if (en)
   3ab10:	e2504000 	subs	r4, r0, #0
    _stepMode = STEP_MODE_STEP_PAUSED;
   3ab14:	e5c53004 	strb	r3, [r5, #4]
   3ab18:	e5960000 	ldr	r0, [r6]
    if (en)
   3ab1c:	1a00000f 	bne	3ab60 <TargetTracker::enable(bool)+0x60>
        BusAccess::waitHold(_busSocketId, false);
   3ab20:	e1a01004 	mov	r1, r4
   3ab24:	ebfff146 	bl	37044 <BusAccess::waitHold(int, bool)>
        if (_targetStateAcqMode != TARGET_STATE_ACQ_INJECTING)
   3ab28:	e5d53002 	ldrb	r3, [r5, #2]
   3ab2c:	e3530002 	cmp	r3, #2
   3ab30:	1a000002 	bne	3ab40 <TargetTracker::enable(bool)+0x40>
            _disablePending = true;
   3ab34:	e3a03001 	mov	r3, #1
   3ab38:	e5c53006 	strb	r3, [r5, #6]
}
   3ab3c:	e8bd8070 	pop	{r4, r5, r6, pc}
            BusAccess::busSocketEnable(_busSocketId, en);
   3ab40:	e1a01004 	mov	r1, r4
   3ab44:	e5960000 	ldr	r0, [r6]
   3ab48:	ebfff712 	bl	38798 <BusAccess::busSocketEnable(int, bool)>
            BusAccess::targetPageForInjection(_busSocketId, false);
   3ab4c:	e1a01004 	mov	r1, r4
   3ab50:	e5960000 	ldr	r0, [r6]
   3ab54:	ebfff238 	bl	3743c <BusAccess::targetPageForInjection(int, bool)>
            _pageOutForInjectionActive = false;
   3ab58:	e5c54005 	strb	r4, [r5, #5]
   3ab5c:	e8bd8070 	pop	{r4, r5, r6, pc}
        BusAccess::busSocketEnable(_busSocketId, en);
   3ab60:	e3a01001 	mov	r1, #1
}
   3ab64:	e8bd4070 	pop	{r4, r5, r6, lr}
        BusAccess::busSocketEnable(_busSocketId, en);
   3ab68:	eafff70a 	b	38798 <BusAccess::busSocketEnable(int, bool)>
   3ab6c:	0009c9b4 	.word	0x0009c9b4
   3ab70:	0006f474 	.word	0x0006f474

0003ab74 <TargetTracker::busAccessAvailable()>:
{
   3ab74:	e92d4010 	push	{r4, lr}
    return !(BusAccess::waitIsHeld() || HwManager::getMemoryEmulationMode() || BusAccess::busSocketIsEnabled(_busSocketId));
   3ab78:	ebfff12d 	bl	37034 <BusAccess::waitIsHeld()>
   3ab7c:	e3500000 	cmp	r0, #0
   3ab80:	1a000009 	bne	3abac <TargetTracker::busAccessAvailable()+0x38>
   3ab84:	e59f3028 	ldr	r3, [pc, #40]	; 3abb4 <TargetTracker::busAccessAvailable()+0x40>
   3ab88:	e5d33000 	ldrb	r3, [r3]
   3ab8c:	e3530000 	cmp	r3, #0
   3ab90:	18bd8010 	popne	{r4, pc}
   3ab94:	e59f301c 	ldr	r3, [pc, #28]	; 3abb8 <TargetTracker::busAccessAvailable()+0x44>
   3ab98:	e5930000 	ldr	r0, [r3]
   3ab9c:	ebfff72a 	bl	3884c <BusAccess::busSocketIsEnabled(int)>
   3aba0:	e2200001 	eor	r0, r0, #1
   3aba4:	e6ef0070 	uxtb	r0, r0
   3aba8:	e8bd8010 	pop	{r4, pc}
   3abac:	e3a00000 	mov	r0, #0
}
   3abb0:	e8bd8010 	pop	{r4, pc}
   3abb4:	00074d94 	.word	0x00074d94
   3abb8:	0006f474 	.word	0x0006f474

0003abbc <TargetTracker::isPaused()>:
    if (!BusAccess::busSocketIsEnabled(_busSocketId))
   3abbc:	e59f3020 	ldr	r3, [pc, #32]	; 3abe4 <TargetTracker::isPaused()+0x28>
{
   3abc0:	e92d4010 	push	{r4, lr}
    if (!BusAccess::busSocketIsEnabled(_busSocketId))
   3abc4:	e5930000 	ldr	r0, [r3]
   3abc8:	ebfff71f 	bl	3884c <BusAccess::busSocketIsEnabled(int)>
   3abcc:	e3500000 	cmp	r0, #0
    return _stepMode == STEP_MODE_STEP_PAUSED;
   3abd0:	159f3010 	ldrne	r3, [pc, #16]	; 3abe8 <TargetTracker::isPaused()+0x2c>
   3abd4:	15d30004 	ldrbne	r0, [r3, #4]
   3abd8:	116f0f10 	clzne	r0, r0
   3abdc:	11a002a0 	lsrne	r0, r0, #5
}
   3abe0:	e8bd8010 	pop	{r4, pc}
   3abe4:	0006f474 	.word	0x0006f474
   3abe8:	0009c9b4 	.word	0x0009c9b4

0003abec <TargetTracker::isTrackingActive()>:
    return BusAccess::busSocketIsEnabled(_busSocketId);
   3abec:	e59f3004 	ldr	r3, [pc, #4]	; 3abf8 <TargetTracker::isTrackingActive()+0xc>
   3abf0:	e5930000 	ldr	r0, [r3]
   3abf4:	eafff714 	b	3884c <BusAccess::busSocketIsEnabled(int)>
   3abf8:	0006f474 	.word	0x0006f474

0003abfc <TargetTracker::targetReset()>:
    _targetResetPending = true;
   3abfc:	e3a02001 	mov	r2, #1
   3ac00:	e59f3004 	ldr	r3, [pc, #4]	; 3ac0c <TargetTracker::targetReset()+0x10>
   3ac04:	e5c32003 	strb	r2, [r3, #3]
    McManager::targetReset();
   3ac08:	eaffce99 	b	2e674 <McManager::targetReset()>
   3ac0c:	0009c9b4 	.word	0x0009c9b4

0003ac10 <TargetTracker::startSetRegisterSequence(Z80Registers*)>:
    if (pRegs)
   3ac10:	e2501000 	subs	r1, r0, #0
{
   3ac14:	e92d4010 	push	{r4, lr}
    if (pRegs)
   3ac18:	0a000002 	beq	3ac28 <TargetTracker::startSetRegisterSequence(Z80Registers*)+0x18>
        _z80Registers = *pRegs;
   3ac1c:	e3a02048 	mov	r2, #72	; 0x48
   3ac20:	e59f0060 	ldr	r0, [pc, #96]	; 3ac88 <TargetTracker::startSetRegisterSequence(Z80Registers*)+0x78>
   3ac24:	eb00484f 	bl	4cd68 <memcpy>
    if (_targetStateAcqMode == TARGET_STATE_ACQ_INJECTING)
   3ac28:	e59f405c 	ldr	r4, [pc, #92]	; 3ac8c <TargetTracker::startSetRegisterSequence(Z80Registers*)+0x7c>
   3ac2c:	e5d43002 	ldrb	r3, [r4, #2]
   3ac30:	e3530002 	cmp	r3, #2
   3ac34:	0a00000e 	beq	3ac74 <TargetTracker::startSetRegisterSequence(Z80Registers*)+0x64>
    _targetStateAcqMode = TARGET_STATE_ACQ_INJECTING;
   3ac38:	e3a03002 	mov	r3, #2
    BusAccess::waitHold(_busSocketId, false);
   3ac3c:	e59f204c 	ldr	r2, [pc, #76]	; 3ac90 <TargetTracker::startSetRegisterSequence(Z80Registers*)+0x80>
   3ac40:	e3a01000 	mov	r1, #0
   3ac44:	e5920000 	ldr	r0, [r2]
    _targetStateAcqMode = TARGET_STATE_ACQ_INJECTING;
   3ac48:	e5c43002 	strb	r3, [r4, #2]
    BusAccess::waitHold(_busSocketId, false);
   3ac4c:	ebfff0fc 	bl	37044 <BusAccess::waitHold(int, bool)>
    LogWrite(FromTargetTracker, LOG_DEBUG, "Wait release for injection");
   3ac50:	e59f203c 	ldr	r2, [pc, #60]	; 3ac94 <TargetTracker::startSetRegisterSequence(Z80Registers*)+0x84>
   3ac54:	e3a01004 	mov	r1, #4
   3ac58:	e59f0038 	ldr	r0, [pc, #56]	; 3ac98 <TargetTracker::startSetRegisterSequence(Z80Registers*)+0x88>
   3ac5c:	ebffa545 	bl	24178 <LogWrite>
    _setRegs = true;
   3ac60:	e3a02001 	mov	r2, #1
    _snippetPos = 0;
   3ac64:	e3a03000 	mov	r3, #0
    _setRegs = true;
   3ac68:	e5c42050 	strb	r2, [r4, #80]	; 0x50
    _snippetPos = 0;
   3ac6c:	e5843054 	str	r3, [r4, #84]	; 0x54
}
   3ac70:	e8bd8010 	pop	{r4, pc}
        LogWrite(FromTargetTracker, LOG_DEBUG, "Can't inject as Injector is busy - state = %d", _targetStateAcqMode);
   3ac74:	e59f2020 	ldr	r2, [pc, #32]	; 3ac9c <TargetTracker::startSetRegisterSequence(Z80Registers*)+0x8c>
   3ac78:	e3a01004 	mov	r1, #4
}
   3ac7c:	e8bd4010 	pop	{r4, lr}
        LogWrite(FromTargetTracker, LOG_DEBUG, "Can't inject as Injector is busy - state = %d", _targetStateAcqMode);
   3ac80:	e59f0010 	ldr	r0, [pc, #16]	; 3ac98 <TargetTracker::startSetRegisterSequence(Z80Registers*)+0x88>
   3ac84:	eaffa53b 	b	24178 <LogWrite>
   3ac88:	0009c9bc 	.word	0x0009c9bc
   3ac8c:	0009c9b4 	.word	0x0009c9b4
   3ac90:	0006f474 	.word	0x0006f474
   3ac94:	00055c68 	.word	0x00055c68
   3ac98:	00055bd8 	.word	0x00055bd8
   3ac9c:	00055c38 	.word	0x00055c38

0003aca0 <TargetTracker::store16BitVal(unsigned char*, int, unsigned short)>:
    arry[offset+1] = (val >> 8) & 0xff;
   3aca0:	e1a03422 	lsr	r3, r2, #8
    arry[offset] = val & 0xff;
   3aca4:	e7e02001 	strb	r2, [r0, r1]!
    arry[offset+1] = (val >> 8) & 0xff;
   3aca8:	e5c03001 	strb	r3, [r0, #1]
}
   3acac:	e12fff1e 	bx	lr

0003acb0 <TargetTracker::getInstructionsToSetRegs(Z80Registers&, unsigned char*, unsigned long)>:
{
   3acb0:	e92d4070 	push	{r4, r5, r6, lr}
    arry[offset] = val & 0xff;
   3acb4:	e59f3170 	ldr	r3, [pc, #368]	; 3ae2c <TargetTracker::getInstructionsToSetRegs(Z80Registers&, unsigned char*, unsigned long)+0x17c>
    store16BitVal(regSetInstructions, RegisterIXUpdatePos, regs.IX);
   3acb8:	e5904018 	ldr	r4, [r0, #24]
    store16BitVal(regSetInstructions, RegisterHLDASHUpdatePos, regs.HLDASH);
   3acbc:	e590c020 	ldr	ip, [r0, #32]
    store16BitVal(regSetInstructions, RegisterDEDASHUpdatePos, regs.DEDASH);
   3acc0:	e5906024 	ldr	r6, [r0, #36]	; 0x24
    arry[offset] = val & 0xff;
   3acc4:	e5c3c036 	strb	ip, [r3, #54]	; 0x36
    arry[offset+1] = (val >> 8) & 0xff;
   3acc8:	e6ff5074 	uxth	r5, r4
   3accc:	e6ffc07c 	uxth	ip, ip
   3acd0:	e1a05425 	lsr	r5, r5, #8
   3acd4:	e1a0c42c 	lsr	ip, ip, #8
    store16BitVal(regSetInstructions, RegisterIYUpdatePos, regs.IY);
   3acd8:	e590e01c 	ldr	lr, [r0, #28]
    arry[offset+1] = (val >> 8) & 0xff;
   3acdc:	e5c3c037 	strb	ip, [r3, #55]	; 0x37
   3ace0:	e5c35030 	strb	r5, [r3, #48]	; 0x30
   3ace4:	e6ffc076 	uxth	ip, r6
    store16BitVal(regSetInstructions, RegisterBCDASHUpdatePos, regs.BCDASH);
   3ace8:	e5905028 	ldr	r5, [r0, #40]	; 0x28
    arry[offset+1] = (val >> 8) & 0xff;
   3acec:	e1a0c42c 	lsr	ip, ip, #8
   3acf0:	e5c3c03a 	strb	ip, [r3, #58]	; 0x3a
    arry[offset] = val & 0xff;
   3acf4:	e5c3e033 	strb	lr, [r3, #51]	; 0x33
    arry[offset+1] = (val >> 8) & 0xff;
   3acf8:	e6ffc075 	uxth	ip, r5
   3acfc:	e6ffe07e 	uxth	lr, lr
   3ad00:	e1a0e42e 	lsr	lr, lr, #8
   3ad04:	e1a0c42c 	lsr	ip, ip, #8
   3ad08:	e5c3c03d 	strb	ip, [r3, #61]	; 0x3d
    arry[offset] = val & 0xff;
   3ad0c:	e5c3503c 	strb	r5, [r3, #60]	; 0x3c
   3ad10:	e5c36039 	strb	r6, [r3, #57]	; 0x39
    arry[offset+1] = (val >> 8) & 0xff;
   3ad14:	e5c3e034 	strb	lr, [r3, #52]	; 0x34
    store16BitVal(regSetInstructions, RegisterSPUpdatePos, regs.SP);
   3ad18:	e590e004 	ldr	lr, [r0, #4]
    arry[offset] = val & 0xff;
   3ad1c:	e5c3402f 	strb	r4, [r3, #47]	; 0x2f
    arry[offset+1] = (val >> 8) & 0xff;
   3ad20:	e6ffc07e 	uxth	ip, lr
   3ad24:	e1a0c42c 	lsr	ip, ip, #8
   3ad28:	e5c3c051 	strb	ip, [r3, #81]	; 0x51
    arry[offset] = val & 0xff;
   3ad2c:	e5c3e050 	strb	lr, [r3, #80]	; 0x50
    store16BitVal(regSetInstructions, RegisterHLUpdatePos, regs.HL);
   3ad30:	e590e008 	ldr	lr, [r0, #8]
    store16BitVal(regSetInstructions, RegisterAFDASHUpdatePos, regs.AFDASH);
   3ad34:	e590402c 	ldr	r4, [r0, #44]	; 0x2c
    arry[offset+1] = (val >> 8) & 0xff;
   3ad38:	e6ffc07e 	uxth	ip, lr
   3ad3c:	e1a0c42c 	lsr	ip, ip, #8
   3ad40:	e5c3c041 	strb	ip, [r3, #65]	; 0x41
    arry[offset] = val & 0xff;
   3ad44:	e5c3e040 	strb	lr, [r3, #64]	; 0x40
    store16BitVal(regSetInstructions, RegisterDEUpdatePos, regs.DE);
   3ad48:	e590e00c 	ldr	lr, [r0, #12]
    arry[offset+1] = (val >> 8) & 0xff;
   3ad4c:	e6ffc07e 	uxth	ip, lr
   3ad50:	e1a0c42c 	lsr	ip, ip, #8
    arry[offset] = val & 0xff;
   3ad54:	e5c3e043 	strb	lr, [r3, #67]	; 0x43
    arry[offset+1] = (val >> 8) & 0xff;
   3ad58:	e5c3c044 	strb	ip, [r3, #68]	; 0x44
    store16BitVal(regSetInstructions, RegisterBCUpdatePos, regs.BC);
   3ad5c:	e590c010 	ldr	ip, [r0, #16]
    arry[offset+1] = (val >> 8) & 0xff;
   3ad60:	e6ffe074 	uxth	lr, r4
    arry[offset] = val & 0xff;
   3ad64:	e5c3c046 	strb	ip, [r3, #70]	; 0x46
    arry[offset+1] = (val >> 8) & 0xff;
   3ad68:	e6ffc07c 	uxth	ip, ip
   3ad6c:	e1a0e42e 	lsr	lr, lr, #8
   3ad70:	e1a0c42c 	lsr	ip, ip, #8
    arry[offset] = val & 0xff;
   3ad74:	e5c34049 	strb	r4, [r3, #73]	; 0x49
    arry[offset+1] = (val >> 8) & 0xff;
   3ad78:	e5c3e04a 	strb	lr, [r3, #74]	; 0x4a
   3ad7c:	e5c3c047 	strb	ip, [r3, #71]	; 0x47
    store16BitVal(regSetInstructions, RegisterAFUpdatePos, regs.AF);
   3ad80:	e590c014 	ldr	ip, [r0, #20]
    arry[offset] = val & 0xff;
   3ad84:	e5c3c04d 	strb	ip, [r3, #77]	; 0x4d
    regSetInstructions[RegisterIUpdatePos] = regs.I;
   3ad88:	e5904034 	ldr	r4, [r0, #52]	; 0x34
    arry[offset+1] = (val >> 8) & 0xff;
   3ad8c:	e6ffe07c 	uxth	lr, ip
   3ad90:	e1a0e42e 	lsr	lr, lr, #8
    regSetInstructions[RegisterIUpdatePos] = regs.I;
   3ad94:	e5c34053 	strb	r4, [r3, #83]	; 0x53
    arry[offset+1] = (val >> 8) & 0xff;
   3ad98:	e5c3e04e 	strb	lr, [r3, #78]	; 0x4e
    regSetInstructions[RegisterAUpdatePos] = regs.AF >> 8;
   3ad9c:	e1a0e44c 	asr	lr, ip, #8
    regSetInstructions[RegisterRUpdatePos] = (regs.R + 256 - 5) % 256;
   3ada0:	e590c038 	ldr	ip, [r0, #56]	; 0x38
    regSetInstructions[RegisterAUpdatePos] = regs.AF >> 8;
   3ada4:	e5c3e05b 	strb	lr, [r3, #91]	; 0x5b
    regSetInstructions[RegisterRUpdatePos] = (regs.R + 256 - 5) % 256;
   3ada8:	e28cc0fb 	add	ip, ip, #251	; 0xfb
   3adac:	e27ce000 	rsbs	lr, ip, #0
   3adb0:	e6efe07e 	uxtb	lr, lr
   3adb4:	e6efc07c 	uxtb	ip, ip
   3adb8:	526ec000 	rsbpl	ip, lr, #0
   3adbc:	e5c3c057 	strb	ip, [r3, #87]	; 0x57
    regSetInstructions[RegisterIMUpdatePos] = (regs.INTMODE == 0) ? 0x46 : ((regs.INTMODE == 1) ? 0x56 : 0x5e);
   3adc0:	e590c03c 	ldr	ip, [r0, #60]	; 0x3c
   3adc4:	e35c0000 	cmp	ip, #0
   3adc8:	03a0c046 	moveq	ip, #70	; 0x46
   3adcc:	0a000002 	beq	3addc <TargetTracker::getInstructionsToSetRegs(Z80Registers&, unsigned char*, unsigned long)+0x12c>
   3add0:	e35c0001 	cmp	ip, #1
   3add4:	03a0c056 	moveq	ip, #86	; 0x56
   3add8:	13a0c05e 	movne	ip, #94	; 0x5e
   3addc:	e5c3c05d 	strb	ip, [r3, #93]	; 0x5d
    regSetInstructions[RegisterINTENUpdatePos] = (regs.INTENABLED == 0) ? 0xf3 : 0xfb;
   3ade0:	e590c040 	ldr	ip, [r0, #64]	; 0x40
   3ade4:	e35c0000 	cmp	ip, #0
   3ade8:	03a0c0f3 	moveq	ip, #243	; 0xf3
   3adec:	13a0c0fb 	movne	ip, #251	; 0xfb
   3adf0:	e5c3c05e 	strb	ip, [r3, #94]	; 0x5e
    store16BitVal(regSetInstructions, RegisterPCUpdatePos, regs.PC);
   3adf4:	e5900000 	ldr	r0, [r0]
    if (codeMaxlen >= sizeof(regSetInstructions))
   3adf8:	e3520035 	cmp	r2, #53	; 0x35
    arry[offset+1] = (val >> 8) & 0xff;
   3adfc:	e6ffc070 	uxth	ip, r0
   3ae00:	e1a0c42c 	lsr	ip, ip, #8
    arry[offset] = val & 0xff;
   3ae04:	e5c30060 	strb	r0, [r3, #96]	; 0x60
    arry[offset+1] = (val >> 8) & 0xff;
   3ae08:	e5c3c061 	strb	ip, [r3, #97]	; 0x61
    if (codeMaxlen >= sizeof(regSetInstructions))
   3ae0c:	8a000001 	bhi	3ae18 <TargetTracker::getInstructionsToSetRegs(Z80Registers&, unsigned char*, unsigned long)+0x168>
    return 0;
   3ae10:	e3a00000 	mov	r0, #0
}
   3ae14:	e8bd8070 	pop	{r4, r5, r6, pc}
   3ae18:	e1a00001 	mov	r0, r1
        memcpy(pCodeBuffer, regSetInstructions, codeMaxlen);
   3ae1c:	e59f100c 	ldr	r1, [pc, #12]	; 3ae30 <TargetTracker::getInstructionsToSetRegs(Z80Registers&, unsigned char*, unsigned long)+0x180>
   3ae20:	eb0047d0 	bl	4cd68 <memcpy>
        return sizeof(regSetInstructions);
   3ae24:	e3a00036 	mov	r0, #54	; 0x36
   3ae28:	e8bd8070 	pop	{r4, r5, r6, pc}
   3ae2c:	0006f474 	.word	0x0006f474
   3ae30:	0006f4a0 	.word	0x0006f4a0

0003ae34 <TargetTracker::handleRegisterGet(unsigned long, unsigned long, unsigned long, unsigned long&)>:
    if (flags & BR_CTRL_BUS_WR_MASK)
   3ae34:	e3120002 	tst	r2, #2
{
   3ae38:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    if (flags & BR_CTRL_BUS_WR_MASK)
   3ae3c:	0a000022 	beq	3aecc <TargetTracker::handleRegisterGet(unsigned long, unsigned long, unsigned long, unsigned long&)+0x98>
        retVal = BR_MEM_ACCESS_INSTR_INJECT;
   3ae40:	e3a0c101 	mov	ip, #1073741824	; 0x40000000
        switch(_snippetPos)
   3ae44:	e59f2214 	ldr	r2, [pc, #532]	; 3b060 <TargetTracker::handleRegisterGet(unsigned long, unsigned long, unsigned long, unsigned long&)+0x22c>
        retVal = BR_MEM_ACCESS_INSTR_INJECT;
   3ae48:	e583c000 	str	ip, [r3]
        switch(_snippetPos)
   3ae4c:	e5923054 	ldr	r3, [r2, #84]	; 0x54
   3ae50:	e243c001 	sub	ip, r3, #1
   3ae54:	e35c001a 	cmp	ip, #26
   3ae58:	979ff10c 	ldrls	pc, [pc, ip, lsl #2]
   3ae5c:	ea000028 	b	3af04 <TargetTracker::handleRegisterGet(unsigned long, unsigned long, unsigned long, unsigned long&)+0xd0>
   3ae60:	0003af1c 	.word	0x0003af1c
   3ae64:	0003af04 	.word	0x0003af04
   3ae68:	0003af04 	.word	0x0003af04
   3ae6c:	0003b028 	.word	0x0003b028
   3ae70:	0003af04 	.word	0x0003af04
   3ae74:	0003af04 	.word	0x0003af04
   3ae78:	0003b020 	.word	0x0003b020
   3ae7c:	0003af04 	.word	0x0003af04
   3ae80:	0003af04 	.word	0x0003af04
   3ae84:	0003b018 	.word	0x0003b018
   3ae88:	0003b010 	.word	0x0003b010
   3ae8c:	0003af04 	.word	0x0003af04
   3ae90:	0003b008 	.word	0x0003b008
   3ae94:	0003b000 	.word	0x0003b000
   3ae98:	0003aff8 	.word	0x0003aff8
   3ae9c:	0003af04 	.word	0x0003af04
   3aea0:	0003af04 	.word	0x0003af04
   3aea4:	0003afc4 	.word	0x0003afc4
   3aea8:	0003af04 	.word	0x0003af04
   3aeac:	0003af04 	.word	0x0003af04
   3aeb0:	0003af04 	.word	0x0003af04
   3aeb4:	0003af04 	.word	0x0003af04
   3aeb8:	0003af90 	.word	0x0003af90
   3aebc:	0003af04 	.word	0x0003af04
   3aec0:	0003af04 	.word	0x0003af04
   3aec4:	0003af04 	.word	0x0003af04
   3aec8:	0003af5c 	.word	0x0003af5c
        if (_snippetPos == 0)
   3aecc:	e59f218c 	ldr	r2, [pc, #396]	; 3b060 <TargetTracker::handleRegisterGet(unsigned long, unsigned long, unsigned long, unsigned long&)+0x22c>
        retVal = regQueryInstructions[_snippetPos++] | BR_MEM_ACCESS_INSTR_INJECT;
   3aed0:	e59f118c 	ldr	r1, [pc, #396]	; 3b064 <TargetTracker::handleRegisterGet(unsigned long, unsigned long, unsigned long, unsigned long&)+0x230>
        if (_snippetPos == 0)
   3aed4:	e592c054 	ldr	ip, [r2, #84]	; 0x54
   3aed8:	e35c0000 	cmp	ip, #0
            _z80Registers.PC = addr;
   3aedc:	05820008 	streq	r0, [r2, #8]
        _snippetWriteIdx = 0;
   3aee0:	e3a00000 	mov	r0, #0
        retVal = regQueryInstructions[_snippetPos++] | BR_MEM_ACCESS_INSTR_INJECT;
   3aee4:	e081100c 	add	r1, r1, ip
   3aee8:	e5d11064 	ldrb	r1, [r1, #100]	; 0x64
   3aeec:	e28ce001 	add	lr, ip, #1
   3aef0:	e3811101 	orr	r1, r1, #1073741824	; 0x40000000
   3aef4:	e582e054 	str	lr, [r2, #84]	; 0x54
   3aef8:	e5831000 	str	r1, [r3]
   3aefc:	e5923054 	ldr	r3, [r2, #84]	; 0x54
        _snippetWriteIdx = 0;
   3af00:	e5820058 	str	r0, [r2, #88]	; 0x58
    if (_snippetPos >= sizeof(regQueryInstructions))
   3af04:	e3530023 	cmp	r3, #35	; 0x23
   3af08:	9a00000f 	bls	3af4c <TargetTracker::handleRegisterGet(unsigned long, unsigned long, unsigned long, unsigned long&)+0x118>
        _snippetPos = 0;
   3af0c:	e3a03000 	mov	r3, #0
        return OPCODE_INJECT_DONE;
   3af10:	e3a00002 	mov	r0, #2
        _snippetPos = 0;
   3af14:	e5823054 	str	r3, [r2, #84]	; 0x54
        return OPCODE_INJECT_DONE;
   3af18:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
                if (_snippetWriteIdx == 0)
   3af1c:	e592e058 	ldr	lr, [r2, #88]	; 0x58
   3af20:	e6efc071 	uxtb	ip, r1
   3af24:	e35e0000 	cmp	lr, #0
   3af28:	1a000045 	bne	3b044 <TargetTracker::handleRegisterGet(unsigned long, unsigned long, unsigned long, unsigned long&)+0x210>
                    _snippetWriteIdx++;
   3af2c:	e3a0e001 	mov	lr, #1
                    _z80Registers.SP = addr+1;
   3af30:	e080000e 	add	r0, r0, lr
   3af34:	e582000c 	str	r0, [r2, #12]
                    regQueryInstructions[RegisterAFUpdatePos+1] = data;                     
   3af38:	e59f0124 	ldr	r0, [pc, #292]	; 3b064 <TargetTracker::handleRegisterGet(unsigned long, unsigned long, unsigned long, unsigned long&)+0x230>
                    _z80Registers.AF = data << 8;
   3af3c:	e1a01401 	lsl	r1, r1, #8
   3af40:	e582101c 	str	r1, [r2, #28]
                    _snippetWriteIdx++;
   3af44:	e582e058 	str	lr, [r2, #88]	; 0x58
                    regQueryInstructions[RegisterAFUpdatePos+1] = data;                     
   3af48:	e5c0c085 	strb	ip, [r0, #133]	; 0x85
        return OPCODE_INJECT_DONE;
   3af4c:	e2430022 	sub	r0, r3, #34	; 0x22
   3af50:	e16f0f10 	clz	r0, r0
   3af54:	e1a002a0 	lsr	r0, r0, #5
}
   3af58:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
                if (_snippetWriteIdx == 0)
   3af5c:	e592c058 	ldr	ip, [r2, #88]	; 0x58
   3af60:	e5920024 	ldr	r0, [r2, #36]	; 0x24
   3af64:	e35c0000 	cmp	ip, #0
                    _snippetWriteIdx++;
   3af68:	03a0c001 	moveq	ip, #1
                    _z80Registers.IY = (_z80Registers.IY & 0xff00) | (data & 0xff);
   3af6c:	16ef1071 	uxtbne	r1, r1
                    _z80Registers.IY = (_z80Registers.IY & 0xff) | (data << 8);
   3af70:	06ef0070 	uxtbeq	r0, r0
                    _z80Registers.IY = (_z80Registers.IY & 0xff00) | (data & 0xff);
   3af74:	12000cff 	andne	r0, r0, #65280	; 0xff00
                    _z80Registers.IY = (_z80Registers.IY & 0xff) | (data << 8);
   3af78:	01801401 	orreq	r1, r0, r1, lsl #8
                    _z80Registers.IY = (_z80Registers.IY & 0xff00) | (data & 0xff);
   3af7c:	11801001 	orrne	r1, r0, r1
                    _z80Registers.IY = (_z80Registers.IY & 0xff) | (data << 8);
   3af80:	05821024 	streq	r1, [r2, #36]	; 0x24
                    _snippetWriteIdx++;
   3af84:	0582c058 	streq	ip, [r2, #88]	; 0x58
                    _z80Registers.IY = (_z80Registers.IY & 0xff00) | (data & 0xff);
   3af88:	15821024 	strne	r1, [r2, #36]	; 0x24
   3af8c:	eaffffee 	b	3af4c <TargetTracker::handleRegisterGet(unsigned long, unsigned long, unsigned long, unsigned long&)+0x118>
                if (_snippetWriteIdx == 0)
   3af90:	e592c058 	ldr	ip, [r2, #88]	; 0x58
   3af94:	e5920020 	ldr	r0, [r2, #32]
   3af98:	e35c0000 	cmp	ip, #0
                    _snippetWriteIdx++;
   3af9c:	03a0c001 	moveq	ip, #1
                    _z80Registers.IX = (_z80Registers.IX & 0xff00) | (data & 0xff);
   3afa0:	16ef1071 	uxtbne	r1, r1
                    _z80Registers.IX = (_z80Registers.IX & 0xff) | (data << 8);
   3afa4:	06ef0070 	uxtbeq	r0, r0
                    _z80Registers.IX = (_z80Registers.IX & 0xff00) | (data & 0xff);
   3afa8:	12000cff 	andne	r0, r0, #65280	; 0xff00
                    _z80Registers.IX = (_z80Registers.IX & 0xff) | (data << 8);
   3afac:	01801401 	orreq	r1, r0, r1, lsl #8
                    _z80Registers.IX = (_z80Registers.IX & 0xff00) | (data & 0xff);
   3afb0:	11801001 	orrne	r1, r0, r1
                    _z80Registers.IX = (_z80Registers.IX & 0xff) | (data << 8);
   3afb4:	05821020 	streq	r1, [r2, #32]
                    _snippetWriteIdx++;
   3afb8:	0582c058 	streq	ip, [r2, #88]	; 0x58
                    _z80Registers.IX = (_z80Registers.IX & 0xff00) | (data & 0xff);
   3afbc:	15821020 	strne	r1, [r2, #32]
   3afc0:	eaffffe1 	b	3af4c <TargetTracker::handleRegisterGet(unsigned long, unsigned long, unsigned long, unsigned long&)+0x118>
                if (_snippetWriteIdx == 0)
   3afc4:	e592c058 	ldr	ip, [r2, #88]	; 0x58
   3afc8:	e5920034 	ldr	r0, [r2, #52]	; 0x34
   3afcc:	e35c0000 	cmp	ip, #0
                    _snippetWriteIdx++;
   3afd0:	03a0c001 	moveq	ip, #1
                    _z80Registers.AFDASH = (_z80Registers.AFDASH & 0xff00) | (data & 0xff);
   3afd4:	16ef1071 	uxtbne	r1, r1
                    _z80Registers.AFDASH = (_z80Registers.AFDASH & 0xff) | (data << 8);
   3afd8:	06ef0070 	uxtbeq	r0, r0
                    _z80Registers.AFDASH = (_z80Registers.AFDASH & 0xff00) | (data & 0xff);
   3afdc:	12000cff 	andne	r0, r0, #65280	; 0xff00
                    _z80Registers.AFDASH = (_z80Registers.AFDASH & 0xff) | (data << 8);
   3afe0:	01801401 	orreq	r1, r0, r1, lsl #8
                    _z80Registers.AFDASH = (_z80Registers.AFDASH & 0xff00) | (data & 0xff);
   3afe4:	11801001 	orrne	r1, r0, r1
                    _z80Registers.AFDASH = (_z80Registers.AFDASH & 0xff) | (data << 8);
   3afe8:	05821034 	streq	r1, [r2, #52]	; 0x34
                    _snippetWriteIdx++;
   3afec:	0582c058 	streq	ip, [r2, #88]	; 0x58
                    _z80Registers.AFDASH = (_z80Registers.AFDASH & 0xff00) | (data & 0xff);
   3aff0:	15821034 	strne	r1, [r2, #52]	; 0x34
   3aff4:	eaffffd4 	b	3af4c <TargetTracker::handleRegisterGet(unsigned long, unsigned long, unsigned long, unsigned long&)+0x118>
                _z80Registers.BCDASH = addr;                        
   3aff8:	e5820030 	str	r0, [r2, #48]	; 0x30
                break;
   3affc:	eaffffd2 	b	3af4c <TargetTracker::handleRegisterGet(unsigned long, unsigned long, unsigned long, unsigned long&)+0x118>
                _z80Registers.DEDASH = addr;                        
   3b000:	e582002c 	str	r0, [r2, #44]	; 0x2c
                break;
   3b004:	eaffffd0 	b	3af4c <TargetTracker::handleRegisterGet(unsigned long, unsigned long, unsigned long, unsigned long&)+0x118>
                _z80Registers.HLDASH = addr;                        
   3b008:	e5820028 	str	r0, [r2, #40]	; 0x28
                break;
   3b00c:	eaffffce 	b	3af4c <TargetTracker::handleRegisterGet(unsigned long, unsigned long, unsigned long, unsigned long&)+0x118>
                _z80Registers.BC = addr;                        
   3b010:	e5820018 	str	r0, [r2, #24]
                break;
   3b014:	eaffffcc 	b	3af4c <TargetTracker::handleRegisterGet(unsigned long, unsigned long, unsigned long, unsigned long&)+0x118>
                _z80Registers.DE = addr;                        
   3b018:	e5820014 	str	r0, [r2, #20]
                break;
   3b01c:	eaffffca 	b	3af4c <TargetTracker::handleRegisterGet(unsigned long, unsigned long, unsigned long, unsigned long&)+0x118>
                _z80Registers.I = data;                        
   3b020:	e582103c 	str	r1, [r2, #60]	; 0x3c
                break;
   3b024:	eaffffc8 	b	3af4c <TargetTracker::handleRegisterGet(unsigned long, unsigned long, unsigned long, unsigned long&)+0x118>
                regQueryInstructions[RegisterRUpdatePos] = _z80Registers.R - 2;                 
   3b028:	e59fc034 	ldr	ip, [pc, #52]	; 3b064 <TargetTracker::handleRegisterGet(unsigned long, unsigned long, unsigned long, unsigned long&)+0x230>
   3b02c:	e241e005 	sub	lr, r1, #5
                _z80Registers.R = data - 3;
   3b030:	e2411003 	sub	r1, r1, #3
                _z80Registers.HL = addr;
   3b034:	e5820010 	str	r0, [r2, #16]
                regQueryInstructions[RegisterRUpdatePos] = _z80Registers.R - 2;                 
   3b038:	e5cce080 	strb	lr, [ip, #128]	; 0x80
                _z80Registers.R = data - 3;
   3b03c:	e5821040 	str	r1, [r2, #64]	; 0x40
                break;
   3b040:	eaffffc1 	b	3af4c <TargetTracker::handleRegisterGet(unsigned long, unsigned long, unsigned long, unsigned long&)+0x118>
                    _z80Registers.AF = (_z80Registers.AF & 0xff00) | (data & 0xff);
   3b044:	e592101c 	ldr	r1, [r2, #28]
                    regQueryInstructions[RegisterAFUpdatePos] = data;                     
   3b048:	e59f0014 	ldr	r0, [pc, #20]	; 3b064 <TargetTracker::handleRegisterGet(unsigned long, unsigned long, unsigned long, unsigned long&)+0x230>
                    _z80Registers.AF = (_z80Registers.AF & 0xff00) | (data & 0xff);
   3b04c:	e2011cff 	and	r1, r1, #65280	; 0xff00
   3b050:	e181100c 	orr	r1, r1, ip
   3b054:	e582101c 	str	r1, [r2, #28]
                    regQueryInstructions[RegisterAFUpdatePos] = data;                     
   3b058:	e5c0c084 	strb	ip, [r0, #132]	; 0x84
   3b05c:	eaffffba 	b	3af4c <TargetTracker::handleRegisterGet(unsigned long, unsigned long, unsigned long, unsigned long&)+0x118>
   3b060:	0009c9b4 	.word	0x0009c9b4
   3b064:	0006f474 	.word	0x0006f474

0003b068 <TargetTracker::handleRegisterSet(unsigned long&)>:
{
   3b068:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    if (_snippetPos == 0)
   3b06c:	e59f41a4 	ldr	r4, [pc, #420]	; 3b218 <TargetTracker::handleRegisterSet(unsigned long&)+0x1b0>
{
   3b070:	e1a06000 	mov	r6, r0
    if (_snippetPos == 0)
   3b074:	e5945054 	ldr	r5, [r4, #84]	; 0x54
   3b078:	e3550000 	cmp	r5, #0
   3b07c:	0a00000b 	beq	3b0b0 <TargetTracker::handleRegisterSet(unsigned long&)+0x48>
    retVal = _snippetBuf[_snippetPos++] | BR_MEM_ACCESS_INSTR_INJECT;
   3b080:	e0843005 	add	r3, r4, r5
   3b084:	e5d3305c 	ldrb	r3, [r3, #92]	; 0x5c
   3b088:	e2855001 	add	r5, r5, #1
   3b08c:	e3833101 	orr	r3, r3, #1073741824	; 0x40000000
   3b090:	e5845054 	str	r5, [r4, #84]	; 0x54
   3b094:	e5863000 	str	r3, [r6]
    if (_snippetPos >= _snippetLen)
   3b098:	e5940054 	ldr	r0, [r4, #84]	; 0x54
   3b09c:	e59430c0 	ldr	r3, [r4, #192]	; 0xc0
}
   3b0a0:	e1500003 	cmp	r0, r3
   3b0a4:	23a00002 	movcs	r0, #2
   3b0a8:	33a00000 	movcc	r0, #0
   3b0ac:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    arry[offset] = val & 0xff;
   3b0b0:	e59f3164 	ldr	r3, [pc, #356]	; 3b21c <TargetTracker::handleRegisterSet(unsigned long&)+0x1b4>
    store16BitVal(regSetInstructions, RegisterHLDASHUpdatePos, regs.HLDASH);
   3b0b4:	e2840020 	add	r0, r4, #32
   3b0b8:	e8900085 	ldm	r0, {r0, r2, r7}
    arry[offset] = val & 0xff;
   3b0bc:	e5c32033 	strb	r2, [r3, #51]	; 0x33
    arry[offset+1] = (val >> 8) & 0xff;
   3b0c0:	e6ff2072 	uxth	r2, r2
   3b0c4:	e1a02422 	lsr	r2, r2, #8
    store16BitVal(regSetInstructions, RegisterDEDASHUpdatePos, regs.DEDASH);
   3b0c8:	e594e02c 	ldr	lr, [r4, #44]	; 0x2c
    store16BitVal(regSetInstructions, RegisterBCDASHUpdatePos, regs.BCDASH);
   3b0cc:	e594c030 	ldr	ip, [r4, #48]	; 0x30
    arry[offset+1] = (val >> 8) & 0xff;
   3b0d0:	e5c32034 	strb	r2, [r3, #52]	; 0x34
    arry[offset] = val & 0xff;
   3b0d4:	e5c37036 	strb	r7, [r3, #54]	; 0x36
    store16BitVal(regSetInstructions, RegisterDEUpdatePos, regs.DE);
   3b0d8:	e5942014 	ldr	r2, [r4, #20]
    arry[offset+1] = (val >> 8) & 0xff;
   3b0dc:	e6ff7077 	uxth	r7, r7
   3b0e0:	e1a07427 	lsr	r7, r7, #8
   3b0e4:	e6ff1070 	uxth	r1, r0
   3b0e8:	e5c37037 	strb	r7, [r3, #55]	; 0x37
    arry[offset] = val & 0xff;
   3b0ec:	e5c3e039 	strb	lr, [r3, #57]	; 0x39
    store16BitVal(regSetInstructions, RegisterBCUpdatePos, regs.BC);
   3b0f0:	e5947018 	ldr	r7, [r4, #24]
    arry[offset] = val & 0xff;
   3b0f4:	e5c3c03c 	strb	ip, [r3, #60]	; 0x3c
   3b0f8:	e5c32043 	strb	r2, [r3, #67]	; 0x43
    arry[offset+1] = (val >> 8) & 0xff;
   3b0fc:	e6ffe07e 	uxth	lr, lr
   3b100:	e6ffc07c 	uxth	ip, ip
   3b104:	e6ff2072 	uxth	r2, r2
   3b108:	e1a01421 	lsr	r1, r1, #8
   3b10c:	e1a0e42e 	lsr	lr, lr, #8
   3b110:	e1a0c42c 	lsr	ip, ip, #8
   3b114:	e1a02422 	lsr	r2, r2, #8
   3b118:	e5c31030 	strb	r1, [r3, #48]	; 0x30
    arry[offset] = val & 0xff;
   3b11c:	e5c3002f 	strb	r0, [r3, #47]	; 0x2f
    arry[offset+1] = (val >> 8) & 0xff;
   3b120:	e5c3e03a 	strb	lr, [r3, #58]	; 0x3a
    store16BitVal(regSetInstructions, RegisterHLUpdatePos, regs.HL);
   3b124:	e1c400dc 	ldrd	r0, [r4, #12]
    store16BitVal(regSetInstructions, RegisterAFDASHUpdatePos, regs.AFDASH);
   3b128:	e594e034 	ldr	lr, [r4, #52]	; 0x34
    arry[offset+1] = (val >> 8) & 0xff;
   3b12c:	e5c3c03d 	strb	ip, [r3, #61]	; 0x3d
    arry[offset] = val & 0xff;
   3b130:	e5c31040 	strb	r1, [r3, #64]	; 0x40
    store16BitVal(regSetInstructions, RegisterAFUpdatePos, regs.AF);
   3b134:	e594c01c 	ldr	ip, [r4, #28]
    arry[offset+1] = (val >> 8) & 0xff;
   3b138:	e5c32044 	strb	r2, [r3, #68]	; 0x44
   3b13c:	e6ff1071 	uxth	r1, r1
   3b140:	e6ff2077 	uxth	r2, r7
   3b144:	e1a01421 	lsr	r1, r1, #8
   3b148:	e1a02422 	lsr	r2, r2, #8
    arry[offset] = val & 0xff;
   3b14c:	e5c30050 	strb	r0, [r3, #80]	; 0x50
    arry[offset+1] = (val >> 8) & 0xff;
   3b150:	e5c31041 	strb	r1, [r3, #65]	; 0x41
   3b154:	e5c32047 	strb	r2, [r3, #71]	; 0x47
   3b158:	e6ff0070 	uxth	r0, r0
   3b15c:	e6ff207c 	uxth	r2, ip
   3b160:	e6ff107e 	uxth	r1, lr
   3b164:	e1a00420 	lsr	r0, r0, #8
   3b168:	e1a01421 	lsr	r1, r1, #8
   3b16c:	e1a02422 	lsr	r2, r2, #8
   3b170:	e5c30051 	strb	r0, [r3, #81]	; 0x51
   3b174:	e5c3104a 	strb	r1, [r3, #74]	; 0x4a
    arry[offset] = val & 0xff;
   3b178:	e5c3c04d 	strb	ip, [r3, #77]	; 0x4d
   3b17c:	e5c37046 	strb	r7, [r3, #70]	; 0x46
   3b180:	e5c3e049 	strb	lr, [r3, #73]	; 0x49
    arry[offset+1] = (val >> 8) & 0xff;
   3b184:	e5c3204e 	strb	r2, [r3, #78]	; 0x4e
    regSetInstructions[RegisterRUpdatePos] = (regs.R + 256 - 5) % 256;
   3b188:	e5942040 	ldr	r2, [r4, #64]	; 0x40
    regSetInstructions[RegisterIUpdatePos] = regs.I;
   3b18c:	e594003c 	ldr	r0, [r4, #60]	; 0x3c
    regSetInstructions[RegisterRUpdatePos] = (regs.R + 256 - 5) % 256;
   3b190:	e28220fb 	add	r2, r2, #251	; 0xfb
   3b194:	e2721000 	rsbs	r1, r2, #0
   3b198:	e6ef1071 	uxtb	r1, r1
   3b19c:	e6ef2072 	uxtb	r2, r2
   3b1a0:	52612000 	rsbpl	r2, r1, #0
    regSetInstructions[RegisterIMUpdatePos] = (regs.INTMODE == 0) ? 0x46 : ((regs.INTMODE == 1) ? 0x56 : 0x5e);
   3b1a4:	e5941044 	ldr	r1, [r4, #68]	; 0x44
    regSetInstructions[RegisterAUpdatePos] = regs.AF >> 8;
   3b1a8:	e1a0c44c 	asr	ip, ip, #8
    regSetInstructions[RegisterIMUpdatePos] = (regs.INTMODE == 0) ? 0x46 : ((regs.INTMODE == 1) ? 0x56 : 0x5e);
   3b1ac:	e3510000 	cmp	r1, #0
    regSetInstructions[RegisterAUpdatePos] = regs.AF >> 8;
   3b1b0:	e5c3c05b 	strb	ip, [r3, #91]	; 0x5b
    regSetInstructions[RegisterIUpdatePos] = regs.I;
   3b1b4:	e5c30053 	strb	r0, [r3, #83]	; 0x53
    regSetInstructions[RegisterRUpdatePos] = (regs.R + 256 - 5) % 256;
   3b1b8:	e5c32057 	strb	r2, [r3, #87]	; 0x57
    regSetInstructions[RegisterIMUpdatePos] = (regs.INTMODE == 0) ? 0x46 : ((regs.INTMODE == 1) ? 0x56 : 0x5e);
   3b1bc:	03a01046 	moveq	r1, #70	; 0x46
   3b1c0:	0a000002 	beq	3b1d0 <TargetTracker::handleRegisterSet(unsigned long&)+0x168>
   3b1c4:	e3510001 	cmp	r1, #1
   3b1c8:	03a01056 	moveq	r1, #86	; 0x56
   3b1cc:	13a0105e 	movne	r1, #94	; 0x5e
    regSetInstructions[RegisterINTENUpdatePos] = (regs.INTENABLED == 0) ? 0xf3 : 0xfb;
   3b1d0:	e5942048 	ldr	r2, [r4, #72]	; 0x48
    regSetInstructions[RegisterIMUpdatePos] = (regs.INTMODE == 0) ? 0x46 : ((regs.INTMODE == 1) ? 0x56 : 0x5e);
   3b1d4:	e5c3105d 	strb	r1, [r3, #93]	; 0x5d
    regSetInstructions[RegisterINTENUpdatePos] = (regs.INTENABLED == 0) ? 0xf3 : 0xfb;
   3b1d8:	e3520000 	cmp	r2, #0
   3b1dc:	03a000f3 	moveq	r0, #243	; 0xf3
   3b1e0:	13a000fb 	movne	r0, #251	; 0xfb
    store16BitVal(regSetInstructions, RegisterPCUpdatePos, regs.PC);
   3b1e4:	e5941008 	ldr	r1, [r4, #8]
    regSetInstructions[RegisterINTENUpdatePos] = (regs.INTENABLED == 0) ? 0xf3 : 0xfb;
   3b1e8:	e5c3005e 	strb	r0, [r3, #94]	; 0x5e
    arry[offset+1] = (val >> 8) & 0xff;
   3b1ec:	e6ff0071 	uxth	r0, r1
   3b1f0:	e1a00420 	lsr	r0, r0, #8
    arry[offset] = val & 0xff;
   3b1f4:	e5c31060 	strb	r1, [r3, #96]	; 0x60
    arry[offset+1] = (val >> 8) & 0xff;
   3b1f8:	e5c30061 	strb	r0, [r3, #97]	; 0x61
        memcpy(pCodeBuffer, regSetInstructions, codeMaxlen);
   3b1fc:	e3a02064 	mov	r2, #100	; 0x64
   3b200:	e59f1018 	ldr	r1, [pc, #24]	; 3b220 <TargetTracker::handleRegisterSet(unsigned long&)+0x1b8>
   3b204:	e59f0018 	ldr	r0, [pc, #24]	; 3b224 <TargetTracker::handleRegisterSet(unsigned long&)+0x1bc>
   3b208:	eb0046d6 	bl	4cd68 <memcpy>
        _snippetLen = getInstructionsToSetRegs(_z80Registers, _snippetBuf, MAX_REGISTER_SET_CODE_LEN);
   3b20c:	e3a03036 	mov	r3, #54	; 0x36
   3b210:	e58430c0 	str	r3, [r4, #192]	; 0xc0
   3b214:	eaffff99 	b	3b080 <TargetTracker::handleRegisterSet(unsigned long&)+0x18>
   3b218:	0009c9b4 	.word	0x0009c9b4
   3b21c:	0006f474 	.word	0x0006f474
   3b220:	0006f4a0 	.word	0x0006f4a0
   3b224:	0009ca10 	.word	0x0009ca10

0003b228 <TargetTracker::stepInto()>:
    _stepMode = STEP_MODE_STEP_INTO;
   3b228:	e3a02001 	mov	r2, #1
   3b22c:	e59f3028 	ldr	r3, [pc, #40]	; 3b25c <TargetTracker::stepInto()+0x34>
{
   3b230:	e92d4010 	push	{r4, lr}
    _stepMode = STEP_MODE_STEP_INTO;
   3b234:	e5c32004 	strb	r2, [r3, #4]
    if (BusAccess::waitIsHeld())
   3b238:	ebffef7d 	bl	37034 <BusAccess::waitIsHeld()>
   3b23c:	e3500000 	cmp	r0, #0
   3b240:	08bd8010 	popeq	{r4, pc}
        BusAccess::waitHold(_busSocketId, false);
   3b244:	e59f3014 	ldr	r3, [pc, #20]	; 3b260 <TargetTracker::stepInto()+0x38>
   3b248:	e3a01000 	mov	r1, #0
   3b24c:	e5930000 	ldr	r0, [r3]
   3b250:	ebffef7b 	bl	37044 <BusAccess::waitHold(int, bool)>
}
   3b254:	e8bd4010 	pop	{r4, lr}
        BusAccess::waitRelease();
   3b258:	eaffef74 	b	37030 <BusAccess::waitRelease()>
   3b25c:	0009c9b4 	.word	0x0009c9b4
   3b260:	0006f474 	.word	0x0006f474

0003b264 <TargetTracker::stepOver()>:
{
   3b264:	e92d4070 	push	{r4, r5, r6, lr}
    uint8_t* pMirrorMemory = HwManager::getMirrorMemForAddr(0);
   3b268:	e3a00000 	mov	r0, #0
{
   3b26c:	e24ddd05 	sub	sp, sp, #320	; 0x140
    uint8_t* pMirrorMemory = HwManager::getMirrorMemForAddr(0);
   3b270:	ebffc4b0 	bl	2c538 <HwManager::getMirrorMemForAddr(unsigned long)>
    if (!pMirrorMemory)
   3b274:	e3500000 	cmp	r0, #0
   3b278:	0a000017 	beq	3b2dc <TargetTracker::stepOver()+0x78>
    int instrLen = disasmZ80(pMirrorMemory, 0, curAddr, pDisassembly, INTEL, false, true);
   3b27c:	e3a06000 	mov	r6, #0
   3b280:	e3a03001 	mov	r3, #1
    uint32_t curAddr = _z80Registers.PC;
   3b284:	e59f5074 	ldr	r5, [pc, #116]	; 3b300 <TargetTracker::stepOver()+0x9c>
    int instrLen = disasmZ80(pMirrorMemory, 0, curAddr, pDisassembly, INTEL, false, true);
   3b288:	e58d3008 	str	r3, [sp, #8]
    uint32_t curAddr = _z80Registers.PC;
   3b28c:	e5954008 	ldr	r4, [r5, #8]
    int instrLen = disasmZ80(pMirrorMemory, 0, curAddr, pDisassembly, INTEL, false, true);
   3b290:	e1a01006 	mov	r1, r6
   3b294:	e1a02004 	mov	r2, r4
   3b298:	e28d3014 	add	r3, sp, #20
   3b29c:	e58d6004 	str	r6, [sp, #4]
   3b2a0:	e58d6000 	str	r6, [sp]
   3b2a4:	ebffb578 	bl	2888c <disasmZ80(unsigned char*, unsigned long, unsigned long, char*, int, int, int)>
    _stepOverPCValue = curAddr + instrLen;
   3b2a8:	e0804004 	add	r4, r0, r4
    LogWrite(FromTargetTracker, LOG_DEBUG, "cpu-step-over PCnow %04x StepToPC %04x", _z80Registers.PC, _stepOverPCValue);
   3b2ac:	e5953008 	ldr	r3, [r5, #8]
   3b2b0:	e59f204c 	ldr	r2, [pc, #76]	; 3b304 <TargetTracker::stepOver()+0xa0>
   3b2b4:	e3a01004 	mov	r1, #4
   3b2b8:	e59f0048 	ldr	r0, [pc, #72]	; 3b308 <TargetTracker::stepOver()+0xa4>
   3b2bc:	e58d4000 	str	r4, [sp]
    _stepOverPCValue = curAddr + instrLen;
   3b2c0:	e58540c4 	str	r4, [r5, #196]	; 0xc4
    LogWrite(FromTargetTracker, LOG_DEBUG, "cpu-step-over PCnow %04x StepToPC %04x", _z80Registers.PC, _stepOverPCValue);
   3b2c4:	ebffa3ab 	bl	24178 <LogWrite>
    _stepMode = STEP_MODE_STEP_OVER;
   3b2c8:	e3a03002 	mov	r3, #2
   3b2cc:	e5c53004 	strb	r3, [r5, #4]
    if (BusAccess::waitIsHeld())
   3b2d0:	ebffef57 	bl	37034 <BusAccess::waitIsHeld()>
   3b2d4:	e1500006 	cmp	r0, r6
   3b2d8:	1a000001 	bne	3b2e4 <TargetTracker::stepOver()+0x80>
}
   3b2dc:	e28ddd05 	add	sp, sp, #320	; 0x140
   3b2e0:	e8bd8070 	pop	{r4, r5, r6, pc}
        BusAccess::waitHold(_busSocketId, false);
   3b2e4:	e59f3020 	ldr	r3, [pc, #32]	; 3b30c <TargetTracker::stepOver()+0xa8>
   3b2e8:	e1a01006 	mov	r1, r6
   3b2ec:	e5930000 	ldr	r0, [r3]
   3b2f0:	ebffef53 	bl	37044 <BusAccess::waitHold(int, bool)>
        BusAccess::waitRelease();
   3b2f4:	ebffef4d 	bl	37030 <BusAccess::waitRelease()>
}
   3b2f8:	e28ddd05 	add	sp, sp, #320	; 0x140
   3b2fc:	e8bd8070 	pop	{r4, r5, r6, pc}
   3b300:	0009c9b4 	.word	0x0009c9b4
   3b304:	00055c84 	.word	0x00055c84
   3b308:	00055bd8 	.word	0x00055bd8
   3b30c:	0006f474 	.word	0x0006f474

0003b310 <TargetTracker::stepRun()>:
    _stepMode = STEP_MODE_RUN;
   3b310:	e3a02003 	mov	r2, #3
   3b314:	e59f3028 	ldr	r3, [pc, #40]	; 3b344 <TargetTracker::stepRun()+0x34>
{
   3b318:	e92d4010 	push	{r4, lr}
    _stepMode = STEP_MODE_RUN;
   3b31c:	e5c32004 	strb	r2, [r3, #4]
    if (BusAccess::waitIsHeld())
   3b320:	ebffef43 	bl	37034 <BusAccess::waitIsHeld()>
   3b324:	e3500000 	cmp	r0, #0
   3b328:	08bd8010 	popeq	{r4, pc}
        BusAccess::waitHold(_busSocketId, false);
   3b32c:	e59f3014 	ldr	r3, [pc, #20]	; 3b348 <TargetTracker::stepRun()+0x38>
   3b330:	e3a01000 	mov	r1, #0
   3b334:	e5930000 	ldr	r0, [r3]
   3b338:	ebffef41 	bl	37044 <BusAccess::waitHold(int, bool)>
}
   3b33c:	e8bd4010 	pop	{r4, lr}
        BusAccess::waitRelease();
   3b340:	eaffef3a 	b	37030 <BusAccess::waitRelease()>
   3b344:	0009c9b4 	.word	0x0009c9b4
   3b348:	0006f474 	.word	0x0006f474

0003b34c <TargetTracker::completeTargetProgram()>:
{
   3b34c:	e92d4010 	push	{r4, lr}
    _stepMode = STEP_MODE_STEP_PAUSED;
   3b350:	e3a04000 	mov	r4, #0
   3b354:	e59f3024 	ldr	r3, [pc, #36]	; 3b380 <TargetTracker::completeTargetProgram()+0x34>
   3b358:	e5c34004 	strb	r4, [r3, #4]
    if (BusAccess::waitIsHeld())
   3b35c:	ebffef34 	bl	37034 <BusAccess::waitIsHeld()>
   3b360:	e1500004 	cmp	r0, r4
   3b364:	08bd8010 	popeq	{r4, pc}
        BusAccess::waitHold(_busSocketId, false);
   3b368:	e59f3014 	ldr	r3, [pc, #20]	; 3b384 <TargetTracker::completeTargetProgram()+0x38>
   3b36c:	e1a01004 	mov	r1, r4
   3b370:	e5930000 	ldr	r0, [r3]
   3b374:	ebffef32 	bl	37044 <BusAccess::waitHold(int, bool)>
}
   3b378:	e8bd4010 	pop	{r4, lr}
        BusAccess::waitRelease();
   3b37c:	eaffef2b 	b	37030 <BusAccess::waitRelease()>
   3b380:	0009c9b4 	.word	0x0009c9b4
   3b384:	0006f474 	.word	0x0006f474

0003b388 <TargetTracker::requestDisplayGrab()>:
   3b388:	e12fff1e 	bx	lr

0003b38c <TargetTracker::getRegsFormatted(char*, int)>:
{
   3b38c:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3b390:	e1a05000 	mov	r5, r0
   3b394:	e1a06001 	mov	r6, r1
        ee_sprintf(tmpStr, "PC=%04x SP=%04x BC=%04x AF=%04x HL=%04x DE=%04x IX=%04x IY=%04x",
   3b398:	e59f41bc 	ldr	r4, [pc, #444]	; 3b55c <TargetTracker::getRegsFormatted(char*, int)+0x1d0>
   3b39c:	e24dd0c4 	sub	sp, sp, #196	; 0xc4
   3b3a0:	e594a024 	ldr	sl, [r4, #36]	; 0x24
   3b3a4:	e5949020 	ldr	r9, [r4, #32]
   3b3a8:	e2847010 	add	r7, r4, #16
   3b3ac:	e8975180 	ldm	r7, {r7, r8, ip, lr}
   3b3b0:	e1c420d8 	ldrd	r2, [r4, #8]
   3b3b4:	e28d005c 	add	r0, sp, #92	; 0x5c
   3b3b8:	e1cd80fc 	strd	r8, [sp, #12]
   3b3bc:	e88d5000 	stm	sp, {ip, lr}
   3b3c0:	e58d7008 	str	r7, [sp, #8]
   3b3c4:	e58da014 	str	sl, [sp, #20]
   3b3c8:	e59f1190 	ldr	r1, [pc, #400]	; 3b560 <TargetTracker::getRegsFormatted(char*, int)+0x1d4>
   3b3cc:	ebff9e76 	bl	22dac <ee_sprintf>
        strlcpy(pResponse, tmpStr, maxLen);
   3b3d0:	e1a02006 	mov	r2, r6
   3b3d4:	e28d105c 	add	r1, sp, #92	; 0x5c
   3b3d8:	e1a00005 	mov	r0, r5
   3b3dc:	eb004879 	bl	4d5c8 <strlcpy>
        ee_sprintf(tmpStr, " AF'=%04x BC'=%04x HL'=%04x DE'=%04x I=%02x R=%02x",
   3b3e0:	e594c03c 	ldr	ip, [r4, #60]	; 0x3c
   3b3e4:	e594e040 	ldr	lr, [r4, #64]	; 0x40
   3b3e8:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   3b3ec:	e5941028 	ldr	r1, [r4, #40]	; 0x28
   3b3f0:	e5943030 	ldr	r3, [r4, #48]	; 0x30
   3b3f4:	e5942034 	ldr	r2, [r4, #52]	; 0x34
   3b3f8:	e98d5001 	stmib	sp, {r0, ip, lr}
   3b3fc:	e58d1000 	str	r1, [sp]
   3b400:	e28d005c 	add	r0, sp, #92	; 0x5c
   3b404:	e59f1158 	ldr	r1, [pc, #344]	; 3b564 <TargetTracker::getRegsFormatted(char*, int)+0x1d8>
   3b408:	ebff9e67 	bl	22dac <ee_sprintf>
        strlcat(pResponse, tmpStr, maxLen);
   3b40c:	e1a02006 	mov	r2, r6
   3b410:	e28d105c 	add	r1, sp, #92	; 0x5c
   3b414:	e1a00005 	mov	r0, r5
   3b418:	eb00483a 	bl	4d508 <strlcat>
                (AF & 0x80) ? 'S' : '-',
   3b41c:	e594001c 	ldr	r0, [r4, #28]
                (AFDASH & 0x80) ? 'S' : '-',
   3b420:	e5941034 	ldr	r1, [r4, #52]	; 0x34
        ee_sprintf(tmpStr, "  F=%c%c-%c-%c%c%c F'=%c%c--%c-%c%c%c MEMPTR=%04x IM%d IFF%c%c VPS: %d",
   3b424:	e3100080 	tst	r0, #128	; 0x80
   3b428:	13a02053 	movne	r2, #83	; 0x53
   3b42c:	03a0202d 	moveq	r2, #45	; 0x2d
   3b430:	e3100040 	tst	r0, #64	; 0x40
   3b434:	13a0305a 	movne	r3, #90	; 0x5a
   3b438:	03a0302d 	moveq	r3, #45	; 0x2d
   3b43c:	e3100010 	tst	r0, #16
   3b440:	13a0c048 	movne	ip, #72	; 0x48
   3b444:	03a0c02d 	moveq	ip, #45	; 0x2d
   3b448:	e3100004 	tst	r0, #4
   3b44c:	e58dc044 	str	ip, [sp, #68]	; 0x44
   3b450:	13a0c050 	movne	ip, #80	; 0x50
   3b454:	03a0c02d 	moveq	ip, #45	; 0x2d
   3b458:	e3100002 	tst	r0, #2
   3b45c:	e58dc048 	str	ip, [sp, #72]	; 0x48
   3b460:	13a0c04e 	movne	ip, #78	; 0x4e
   3b464:	03a0c02d 	moveq	ip, #45	; 0x2d
   3b468:	e3100001 	tst	r0, #1
   3b46c:	13a00043 	movne	r0, #67	; 0x43
   3b470:	03a0002d 	moveq	r0, #45	; 0x2d
   3b474:	e3110080 	tst	r1, #128	; 0x80
   3b478:	e58d0050 	str	r0, [sp, #80]	; 0x50
   3b47c:	13a00053 	movne	r0, #83	; 0x53
   3b480:	03a0002d 	moveq	r0, #45	; 0x2d
   3b484:	e3110040 	tst	r1, #64	; 0x40
   3b488:	e58d0054 	str	r0, [sp, #84]	; 0x54
   3b48c:	13a0005a 	movne	r0, #90	; 0x5a
   3b490:	03a0002d 	moveq	r0, #45	; 0x2d
   3b494:	e3110010 	tst	r1, #16
   3b498:	e58dc04c 	str	ip, [sp, #76]	; 0x4c
   3b49c:	13a0c048 	movne	ip, #72	; 0x48
   3b4a0:	03a0c02d 	moveq	ip, #45	; 0x2d
   3b4a4:	e3110004 	tst	r1, #4
   3b4a8:	e5949048 	ldr	r9, [r4, #72]	; 0x48
   3b4ac:	13a0e050 	movne	lr, #80	; 0x50
   3b4b0:	03a0e02d 	moveq	lr, #45	; 0x2d
   3b4b4:	e3110002 	tst	r1, #2
   3b4b8:	13a0704e 	movne	r7, #78	; 0x4e
   3b4bc:	03a0702d 	moveq	r7, #45	; 0x2d
   3b4c0:	e3110001 	tst	r1, #1
   3b4c4:	13a08043 	movne	r8, #67	; 0x43
   3b4c8:	03a0802d 	moveq	r8, #45	; 0x2d
   3b4cc:	e3590000 	cmp	r9, #0
   3b4d0:	03a01020 	moveq	r1, #32
   3b4d4:	13a01031 	movne	r1, #49	; 0x31
   3b4d8:	01a0b001 	moveq	fp, r1
   3b4dc:	13a0b032 	movne	fp, #50	; 0x32
   3b4e0:	e5949038 	ldr	r9, [r4, #56]	; 0x38
   3b4e4:	e594a044 	ldr	sl, [r4, #68]	; 0x44
   3b4e8:	e594404c 	ldr	r4, [r4, #76]	; 0x4c
   3b4ec:	e58d1030 	str	r1, [sp, #48]	; 0x30
   3b4f0:	e59d1054 	ldr	r1, [sp, #84]	; 0x54
   3b4f4:	e58d0014 	str	r0, [sp, #20]
   3b4f8:	e58d1010 	str	r1, [sp, #16]
   3b4fc:	e59d1050 	ldr	r1, [sp, #80]	; 0x50
   3b500:	e28d005c 	add	r0, sp, #92	; 0x5c
   3b504:	e58d100c 	str	r1, [sp, #12]
   3b508:	e59d104c 	ldr	r1, [sp, #76]	; 0x4c
   3b50c:	e58de01c 	str	lr, [sp, #28]
   3b510:	e58d1008 	str	r1, [sp, #8]
   3b514:	e59d1048 	ldr	r1, [sp, #72]	; 0x48
   3b518:	e58dc018 	str	ip, [sp, #24]
   3b51c:	e58d1004 	str	r1, [sp, #4]
   3b520:	e59d1044 	ldr	r1, [sp, #68]	; 0x44
   3b524:	e58db034 	str	fp, [sp, #52]	; 0x34
   3b528:	e58d1000 	str	r1, [sp]
   3b52c:	e59f1034 	ldr	r1, [pc, #52]	; 3b568 <TargetTracker::getRegsFormatted(char*, int)+0x1dc>
   3b530:	e58d4038 	str	r4, [sp, #56]	; 0x38
   3b534:	e58da02c 	str	sl, [sp, #44]	; 0x2c
   3b538:	e1cd82f4 	strd	r8, [sp, #36]	; 0x24
   3b53c:	e58d7020 	str	r7, [sp, #32]
   3b540:	ebff9e19 	bl	22dac <ee_sprintf>
        strlcat(pResponse, tmpStr, maxLen);
   3b544:	e1a02006 	mov	r2, r6
   3b548:	e28d105c 	add	r1, sp, #92	; 0x5c
   3b54c:	e1a00005 	mov	r0, r5
   3b550:	eb0047ec 	bl	4d508 <strlcat>
}
   3b554:	e28dd0c4 	add	sp, sp, #196	; 0xc4
   3b558:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3b55c:	0009c9b4 	.word	0x0009c9b4
   3b560:	00054d8c 	.word	0x00054d8c
   3b564:	00054dcc 	.word	0x00054dcc
   3b568:	00054e00 	.word	0x00054e00

0003b56c <TargetTracker::isPrefixInstruction(unsigned long)>:
    switch(instr)
   3b56c:	e35000dd 	cmp	r0, #221	; 0xdd
   3b570:	0a000008 	beq	3b598 <TargetTracker::isPrefixInstruction(unsigned long)+0x2c>
   3b574:	9a000005 	bls	3b590 <TargetTracker::isPrefixInstruction(unsigned long)+0x24>
   3b578:	e35000ed 	cmp	r0, #237	; 0xed
   3b57c:	0a000005 	beq	3b598 <TargetTracker::isPrefixInstruction(unsigned long)+0x2c>
   3b580:	e35000fd 	cmp	r0, #253	; 0xfd
   3b584:	0a000003 	beq	3b598 <TargetTracker::isPrefixInstruction(unsigned long)+0x2c>
    return false;
   3b588:	e3a00000 	mov	r0, #0
   3b58c:	e12fff1e 	bx	lr
    switch(instr)
   3b590:	e35000cb 	cmp	r0, #203	; 0xcb
   3b594:	1afffffb 	bne	3b588 <TargetTracker::isPrefixInstruction(unsigned long)+0x1c>
            return true;
   3b598:	e3a00001 	mov	r0, #1
}
   3b59c:	e12fff1e 	bx	lr

0003b5a0 <TargetTracker::trackPrefixedInstructions(unsigned long, unsigned long, unsigned long)>:
    uint32_t codeVal = ((retVal & BR_MEM_ACCESS_RSLT_NOT_DECODED) ? data : retVal) & 0xff;
   3b5a0:	e3520000 	cmp	r2, #0
   3b5a4:	b6ef1071 	uxtblt	r1, r1
   3b5a8:	a6ef1072 	uxtbge	r1, r2
    if (flags & BR_CTRL_BUS_M1_MASK)
   3b5ac:	e2103010 	ands	r3, r0, #16
   3b5b0:	0a00000d 	beq	3b5ec <TargetTracker::trackPrefixedInstructions(unsigned long, unsigned long, unsigned long)+0x4c>
        _prefixTracker[0] = _prefixTracker[1];
   3b5b4:	e59f3058 	ldr	r3, [pc, #88]	; 3b614 <TargetTracker::trackPrefixedInstructions(unsigned long, unsigned long, unsigned long)+0x74>
    switch(instr)
   3b5b8:	e35100dd 	cmp	r1, #221	; 0xdd
        _prefixTracker[0] = _prefixTracker[1];
   3b5bc:	e5d30001 	ldrb	r0, [r3, #1]
   3b5c0:	e5c30000 	strb	r0, [r3]
        if (!_prefixTracker[0])
   3b5c4:	e2200001 	eor	r0, r0, #1
    switch(instr)
   3b5c8:	0a00000e 	beq	3b608 <TargetTracker::trackPrefixedInstructions(unsigned long, unsigned long, unsigned long)+0x68>
   3b5cc:	9a00000b 	bls	3b600 <TargetTracker::trackPrefixedInstructions(unsigned long, unsigned long, unsigned long)+0x60>
   3b5d0:	e35100ed 	cmp	r1, #237	; 0xed
   3b5d4:	0a00000b 	beq	3b608 <TargetTracker::trackPrefixedInstructions(unsigned long, unsigned long, unsigned long)+0x68>
   3b5d8:	e35100fd 	cmp	r1, #253	; 0xfd
   3b5dc:	0a000009 	beq	3b608 <TargetTracker::trackPrefixedInstructions(unsigned long, unsigned long, unsigned long)+0x68>
    return false;
   3b5e0:	e3a02000 	mov	r2, #0
        _prefixTracker[1] = isPrefixInstruction(codeVal);
   3b5e4:	e5c32001 	strb	r2, [r3, #1]
   3b5e8:	e12fff1e 	bx	lr
        _prefixTracker[0] = _prefixTracker[1] = false;
   3b5ec:	e59f2020 	ldr	r2, [pc, #32]	; 3b614 <TargetTracker::trackPrefixedInstructions(unsigned long, unsigned long, unsigned long)+0x74>
    bool firstByteOfInstr = false;
   3b5f0:	e1a00003 	mov	r0, r3
        _prefixTracker[0] = _prefixTracker[1] = false;
   3b5f4:	e5c23001 	strb	r3, [r2, #1]
   3b5f8:	e5c23000 	strb	r3, [r2]
}
   3b5fc:	e12fff1e 	bx	lr
    switch(instr)
   3b600:	e35100cb 	cmp	r1, #203	; 0xcb
   3b604:	1afffff5 	bne	3b5e0 <TargetTracker::trackPrefixedInstructions(unsigned long, unsigned long, unsigned long)+0x40>
            return true;
   3b608:	e3a02001 	mov	r2, #1
        _prefixTracker[1] = isPrefixInstruction(codeVal);
   3b60c:	e5c32001 	strb	r2, [r3, #1]
   3b610:	e12fff1e 	bx	lr
   3b614:	0009c9b4 	.word	0x0009c9b4

0003b618 <TargetTracker::handlePendingDisable()>:
{
   3b618:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    if (_disablePending)
   3b61c:	e59f5044 	ldr	r5, [pc, #68]	; 3b668 <TargetTracker::handlePendingDisable()+0x50>
   3b620:	e5d54006 	ldrb	r4, [r5, #6]
   3b624:	e3540000 	cmp	r4, #0
   3b628:	0a00000c 	beq	3b660 <TargetTracker::handlePendingDisable()+0x48>
        _disablePending = false;
   3b62c:	e3a06000 	mov	r6, #0
        BusAccess::busSocketEnable(_busSocketId, false);
   3b630:	e59f7034 	ldr	r7, [pc, #52]	; 3b66c <TargetTracker::handlePendingDisable()+0x54>
   3b634:	e1a01006 	mov	r1, r6
   3b638:	e5970000 	ldr	r0, [r7]
        _disablePending = false;
   3b63c:	e5c56006 	strb	r6, [r5, #6]
        BusAccess::busSocketEnable(_busSocketId, false);
   3b640:	ebfff454 	bl	38798 <BusAccess::busSocketEnable(int, bool)>
        BusAccess::waitHold(_busSocketId, false);
   3b644:	e1a01006 	mov	r1, r6
   3b648:	e5970000 	ldr	r0, [r7]
   3b64c:	ebffee7c 	bl	37044 <BusAccess::waitHold(int, bool)>
        BusAccess::targetPageForInjection(_busSocketId, false);
   3b650:	e1a01006 	mov	r1, r6
   3b654:	e5970000 	ldr	r0, [r7]
   3b658:	ebffef77 	bl	3743c <BusAccess::targetPageForInjection(int, bool)>
        _pageOutForInjectionActive = false;
   3b65c:	e5c56005 	strb	r6, [r5, #5]
}
   3b660:	e1a00004 	mov	r0, r4
   3b664:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   3b668:	0009c9b4 	.word	0x0009c9b4
   3b66c:	0006f474 	.word	0x0006f474

0003b670 <TargetTracker::handleStepOverBkpts(unsigned long, unsigned long, unsigned long, unsigned long&)>:
// State helpers
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void TargetTracker::handleStepOverBkpts([[maybe_unused]] uint32_t addr, [[maybe_unused]] uint32_t data, 
        uint32_t flags, [[maybe_unused]] uint32_t& retVal)
{
   3b670:	e92d4030 	push	{r4, r5, lr}
    // Ignore if injecting
    if ((_targetStateAcqMode == TARGET_STATE_ACQ_INJECTING) || 
   3b674:	e59f40ac 	ldr	r4, [pc, #172]	; 3b728 <TargetTracker::handleStepOverBkpts(unsigned long, unsigned long, unsigned long, unsigned long&)+0xb8>
{
   3b678:	e24dd00c 	sub	sp, sp, #12
    if ((_targetStateAcqMode == TARGET_STATE_ACQ_INJECTING) || 
   3b67c:	e5d4c002 	ldrb	ip, [r4, #2]
   3b680:	e24cc002 	sub	ip, ip, #2
   3b684:	e35c0001 	cmp	ip, #1
   3b688:	9a000011 	bls	3b6d4 <TargetTracker::handleStepOverBkpts(unsigned long, unsigned long, unsigned long, unsigned long&)+0x64>
                (_targetStateAcqMode == TARGET_STATE_ACQ_POST_INJECT))
        return;

    // Step-over handling: enabled and M1 cycle
    if ((_stepMode == STEP_MODE_STEP_OVER) && (flags & BR_CTRL_BUS_M1_MASK) && (_stepOverPCValue == addr))
   3b68c:	e5d4c004 	ldrb	ip, [r4, #4]
   3b690:	e35c0002 	cmp	ip, #2
   3b694:	1a000004 	bne	3b6ac <TargetTracker::handleStepOverBkpts(unsigned long, unsigned long, unsigned long, unsigned long&)+0x3c>
   3b698:	e3120010 	tst	r2, #16
   3b69c:	0a000002 	beq	3b6ac <TargetTracker::handleStepOverBkpts(unsigned long, unsigned long, unsigned long, unsigned long&)+0x3c>
   3b6a0:	e594e0c4 	ldr	lr, [r4, #196]	; 0xc4
   3b6a4:	e15e0000 	cmp	lr, r0
   3b6a8:	0a000016 	beq	3b708 <TargetTracker::handleStepOverBkpts(unsigned long, unsigned long, unsigned long, unsigned long&)+0x98>
   3b6ac:	e1a0c003 	mov	ip, r3
   3b6b0:	e1a05000 	mov	r5, r0
   3b6b4:	e1a03002 	mov	r3, r2
    {
        _targetStateAcqMode = TARGET_STATE_ACQ_INJECTING;
        _stepMode = STEP_MODE_STEP_PAUSED;
        LogWrite(FromTargetTracker, LOG_DEBUG, "Hit step-over PC value %04x", _stepOverPCValue);
    }
    else if (_breakpoints.checkForBreak(addr, data, flags, retVal))
   3b6b8:	e58dc000 	str	ip, [sp]
   3b6bc:	e1a02001 	mov	r2, r1
   3b6c0:	e1a01000 	mov	r1, r0
   3b6c4:	e59f0060 	ldr	r0, [pc, #96]	; 3b72c <TargetTracker::handleStepOverBkpts(unsigned long, unsigned long, unsigned long, unsigned long&)+0xbc>
   3b6c8:	ebfffb23 	bl	3a35c <TargetBreakpoints::checkForBreak(unsigned long, unsigned long, unsigned long, unsigned long&)>
   3b6cc:	e3500000 	cmp	r0, #0
   3b6d0:	1a000001 	bne	3b6dc <TargetTracker::handleStepOverBkpts(unsigned long, unsigned long, unsigned long, unsigned long&)+0x6c>
    {
        _targetStateAcqMode = TARGET_STATE_ACQ_INJECTING;
        _stepMode = STEP_MODE_STEP_PAUSED;
        LogWrite(FromTargetTracker, LOG_DEBUG, "Hit Breakpoint %04x", addr);
    }
}
   3b6d4:	e28dd00c 	add	sp, sp, #12
   3b6d8:	e8bd8030 	pop	{r4, r5, pc}
        _targetStateAcqMode = TARGET_STATE_ACQ_INJECTING;
   3b6dc:	e3a00002 	mov	r0, #2
        _stepMode = STEP_MODE_STEP_PAUSED;
   3b6e0:	e3a0c000 	mov	ip, #0
        LogWrite(FromTargetTracker, LOG_DEBUG, "Hit Breakpoint %04x", addr);
   3b6e4:	e1a03005 	mov	r3, r5
   3b6e8:	e3a01004 	mov	r1, #4
        _targetStateAcqMode = TARGET_STATE_ACQ_INJECTING;
   3b6ec:	e5c40002 	strb	r0, [r4, #2]
        LogWrite(FromTargetTracker, LOG_DEBUG, "Hit Breakpoint %04x", addr);
   3b6f0:	e59f2038 	ldr	r2, [pc, #56]	; 3b730 <TargetTracker::handleStepOverBkpts(unsigned long, unsigned long, unsigned long, unsigned long&)+0xc0>
   3b6f4:	e59f0038 	ldr	r0, [pc, #56]	; 3b734 <TargetTracker::handleStepOverBkpts(unsigned long, unsigned long, unsigned long, unsigned long&)+0xc4>
        _stepMode = STEP_MODE_STEP_PAUSED;
   3b6f8:	e5c4c004 	strb	ip, [r4, #4]
}
   3b6fc:	e28dd00c 	add	sp, sp, #12
   3b700:	e8bd4030 	pop	{r4, r5, lr}
        LogWrite(FromTargetTracker, LOG_DEBUG, "Hit Breakpoint %04x", addr);
   3b704:	eaffa29b 	b	24178 <LogWrite>
        _stepMode = STEP_MODE_STEP_PAUSED;
   3b708:	e3a05000 	mov	r5, #0
        LogWrite(FromTargetTracker, LOG_DEBUG, "Hit step-over PC value %04x", _stepOverPCValue);
   3b70c:	e1a0300e 	mov	r3, lr
   3b710:	e59f2020 	ldr	r2, [pc, #32]	; 3b738 <TargetTracker::handleStepOverBkpts(unsigned long, unsigned long, unsigned long, unsigned long&)+0xc8>
   3b714:	e3a01004 	mov	r1, #4
        _targetStateAcqMode = TARGET_STATE_ACQ_INJECTING;
   3b718:	e5c4c002 	strb	ip, [r4, #2]
        LogWrite(FromTargetTracker, LOG_DEBUG, "Hit step-over PC value %04x", _stepOverPCValue);
   3b71c:	e59f0010 	ldr	r0, [pc, #16]	; 3b734 <TargetTracker::handleStepOverBkpts(unsigned long, unsigned long, unsigned long, unsigned long&)+0xc4>
        _stepMode = STEP_MODE_STEP_PAUSED;
   3b720:	e5c45004 	strb	r5, [r4, #4]
   3b724:	eafffff4 	b	3b6fc <TargetTracker::handleStepOverBkpts(unsigned long, unsigned long, unsigned long, unsigned long&)+0x8c>
   3b728:	0009c9b4 	.word	0x0009c9b4
   3b72c:	0009ca90 	.word	0x0009ca90
   3b730:	00055cc8 	.word	0x00055cc8
   3b734:	00055bd8 	.word	0x00055bd8
   3b738:	00055cac 	.word	0x00055cac

0003b73c <TargetTracker::handleTrackerIdle(unsigned long, unsigned long, unsigned long, unsigned long&)>:

void TargetTracker::handleTrackerIdle([[maybe_unused]] uint32_t addr, uint32_t data, 
        uint32_t flags, uint32_t& retVal)
{
   3b73c:	e92d4070 	push	{r4, r5, r6, lr}
    if (_disablePending)
   3b740:	e59f40d4 	ldr	r4, [pc, #212]	; 3b81c <TargetTracker::handleTrackerIdle(unsigned long, unsigned long, unsigned long, unsigned long&)+0xe0>
   3b744:	e5d40006 	ldrb	r0, [r4, #6]
   3b748:	e3500000 	cmp	r0, #0
   3b74c:	0a00000d 	beq	3b788 <TargetTracker::handleTrackerIdle(unsigned long, unsigned long, unsigned long, unsigned long&)+0x4c>
        _disablePending = false;
   3b750:	e3a05000 	mov	r5, #0
        BusAccess::busSocketEnable(_busSocketId, false);
   3b754:	e59f60c4 	ldr	r6, [pc, #196]	; 3b820 <TargetTracker::handleTrackerIdle(unsigned long, unsigned long, unsigned long, unsigned long&)+0xe4>
   3b758:	e1a01005 	mov	r1, r5
   3b75c:	e5960000 	ldr	r0, [r6]
        _disablePending = false;
   3b760:	e5c45006 	strb	r5, [r4, #6]
        BusAccess::busSocketEnable(_busSocketId, false);
   3b764:	ebfff40b 	bl	38798 <BusAccess::busSocketEnable(int, bool)>
        BusAccess::waitHold(_busSocketId, false);
   3b768:	e1a01005 	mov	r1, r5
   3b76c:	e5960000 	ldr	r0, [r6]
   3b770:	ebffee33 	bl	37044 <BusAccess::waitHold(int, bool)>
        BusAccess::targetPageForInjection(_busSocketId, false);
   3b774:	e1a01005 	mov	r1, r5
   3b778:	e5960000 	ldr	r0, [r6]
   3b77c:	ebffef2e 	bl	3743c <BusAccess::targetPageForInjection(int, bool)>
        _pageOutForInjectionActive = false;
   3b780:	e5c45005 	strb	r5, [r4, #5]
   3b784:	e8bd8070 	pop	{r4, r5, r6, pc}
    // Check for disable
    if (handlePendingDisable())
        return;

    // If we detect the first byte of an instruction then move state
    bool firstByteOfInstr = trackPrefixedInstructions(flags, data, retVal);
   3b788:	e5933000 	ldr	r3, [r3]
    uint32_t codeVal = ((retVal & BR_MEM_ACCESS_RSLT_NOT_DECODED) ? data : retVal) & 0xff;
   3b78c:	e3530000 	cmp	r3, #0
   3b790:	b6ef3071 	uxtblt	r3, r1
   3b794:	a6ef3073 	uxtbge	r3, r3
    if (flags & BR_CTRL_BUS_M1_MASK)
   3b798:	e2122010 	ands	r2, r2, #16
   3b79c:	1a00000b 	bne	3b7d0 <TargetTracker::handleTrackerIdle(unsigned long, unsigned long, unsigned long, unsigned long&)+0x94>
        _prefixTracker[0] = _prefixTracker[1] = false;
   3b7a0:	e5c42001 	strb	r2, [r4, #1]
   3b7a4:	e5c42000 	strb	r2, [r4]
    //                 addr, codeByteValue, 
    //                 (flags & BR_CTRL_BUS_RD_MASK) ? "R" : "", (flags & BR_CTRL_BUS_WR_MASK) ? "W" : "",
    //                 _prefixTracker[0], _prefixTracker[1]);

    // Debug
    if (firstByteOfInstr || (_debugInstrBytePos >= MAX_BYTES_IN_INSTR))
   3b7a8:	e59430c8 	ldr	r3, [r4, #200]	; 0xc8
   3b7ac:	e3530009 	cmp	r3, #9
   3b7b0:	92832001 	addls	r2, r3, #1
   3b7b4:	9a000001 	bls	3b7c0 <TargetTracker::handleTrackerIdle(unsigned long, unsigned long, unsigned long, unsigned long&)+0x84>
            return true;
   3b7b8:	e3a02001 	mov	r2, #1
   3b7bc:	e3a03000 	mov	r3, #0
        _debugInstrBytePos = 0;
    _debugInstrBytes[_debugInstrBytePos++] = data;
   3b7c0:	e0843003 	add	r3, r4, r3
   3b7c4:	e5c310cc 	strb	r1, [r3, #204]	; 0xcc
   3b7c8:	e58420c8 	str	r2, [r4, #200]	; 0xc8
}
   3b7cc:	e8bd8070 	pop	{r4, r5, r6, pc}
        _prefixTracker[0] = _prefixTracker[1];
   3b7d0:	e5d42001 	ldrb	r2, [r4, #1]
    switch(instr)
   3b7d4:	e35300dd 	cmp	r3, #221	; 0xdd
        _prefixTracker[0] = _prefixTracker[1];
   3b7d8:	e5c42000 	strb	r2, [r4]
    switch(instr)
   3b7dc:	0a00000c 	beq	3b814 <TargetTracker::handleTrackerIdle(unsigned long, unsigned long, unsigned long, unsigned long&)+0xd8>
   3b7e0:	9a000009 	bls	3b80c <TargetTracker::handleTrackerIdle(unsigned long, unsigned long, unsigned long, unsigned long&)+0xd0>
   3b7e4:	e35300ed 	cmp	r3, #237	; 0xed
   3b7e8:	0a000009 	beq	3b814 <TargetTracker::handleTrackerIdle(unsigned long, unsigned long, unsigned long, unsigned long&)+0xd8>
   3b7ec:	e35300fd 	cmp	r3, #253	; 0xfd
   3b7f0:	0a000007 	beq	3b814 <TargetTracker::handleTrackerIdle(unsigned long, unsigned long, unsigned long, unsigned long&)+0xd8>
    if (firstByteOfInstr)
   3b7f4:	e3520000 	cmp	r2, #0
        _targetStateAcqMode = TARGET_STATE_ACQ_INJECT_IF_NEW_INSTR;
   3b7f8:	03a03001 	moveq	r3, #1
        _prefixTracker[1] = isPrefixInstruction(codeVal);
   3b7fc:	e5c40001 	strb	r0, [r4, #1]
        _targetStateAcqMode = TARGET_STATE_ACQ_INJECT_IF_NEW_INSTR;
   3b800:	05c43002 	strbeq	r3, [r4, #2]
    if (firstByteOfInstr)
   3b804:	0affffeb 	beq	3b7b8 <TargetTracker::handleTrackerIdle(unsigned long, unsigned long, unsigned long, unsigned long&)+0x7c>
   3b808:	eaffffe6 	b	3b7a8 <TargetTracker::handleTrackerIdle(unsigned long, unsigned long, unsigned long, unsigned long&)+0x6c>
    switch(instr)
   3b80c:	e35300cb 	cmp	r3, #203	; 0xcb
   3b810:	1afffff7 	bne	3b7f4 <TargetTracker::handleTrackerIdle(unsigned long, unsigned long, unsigned long, unsigned long&)+0xb8>
            return true;
   3b814:	e3a00001 	mov	r0, #1
   3b818:	eafffff5 	b	3b7f4 <TargetTracker::handleTrackerIdle(unsigned long, unsigned long, unsigned long, unsigned long&)+0xb8>
   3b81c:	0009c9b4 	.word	0x0009c9b4
   3b820:	0006f474 	.word	0x0006f474

0003b824 <TargetTracker::handleInjection(unsigned long, unsigned long, unsigned long, unsigned long&)>:

void TargetTracker::handleInjection(uint32_t addr, uint32_t data, 
        uint32_t flags, uint32_t& retVal)
{
   3b824:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    // Use the bus socket to request page out if required
    if (!_pageOutForInjectionActive)
   3b828:	e59f449c 	ldr	r4, [pc, #1180]	; 3bccc <TargetTracker::handleInjection(unsigned long, unsigned long, unsigned long, unsigned long&)+0x4a8>
{
   3b82c:	e1a08000 	mov	r8, r0
    if (!_pageOutForInjectionActive)
   3b830:	e5d40005 	ldrb	r0, [r4, #5]
{
   3b834:	e1a09001 	mov	r9, r1
    if (!_pageOutForInjectionActive)
   3b838:	e3500000 	cmp	r0, #0
{
   3b83c:	e1a07002 	mov	r7, r2
   3b840:	e1a06003 	mov	r6, r3
    if (!_pageOutForInjectionActive)
   3b844:	0a000067 	beq	3b9e8 <TargetTracker::handleInjection(unsigned long, unsigned long, unsigned long, unsigned long&)+0x1c4>
        _pageOutForInjectionActive = true;
    }
    
    // Handle get or set
    OPCODE_INJECT_PROGRESS injectProgress = OPCODE_INJECT_GENERAL;
    if (_setRegs)
   3b848:	e5d43050 	ldrb	r3, [r4, #80]	; 0x50
   3b84c:	e3530000 	cmp	r3, #0
   3b850:	0a00001c 	beq	3b8c8 <TargetTracker::handleInjection(unsigned long, unsigned long, unsigned long, unsigned long&)+0xa4>
    if (_snippetPos == 0)
   3b854:	e5942054 	ldr	r2, [r4, #84]	; 0x54
   3b858:	e3520000 	cmp	r2, #0
   3b85c:	0a000068 	beq	3ba04 <TargetTracker::handleInjection(unsigned long, unsigned long, unsigned long, unsigned long&)+0x1e0>
    retVal = _snippetBuf[_snippetPos++] | BR_MEM_ACCESS_INSTR_INJECT;
   3b860:	e0843002 	add	r3, r4, r2
   3b864:	e5d3305c 	ldrb	r3, [r3, #92]	; 0x5c
   3b868:	e2822001 	add	r2, r2, #1
   3b86c:	e3833101 	orr	r3, r3, #1073741824	; 0x40000000
   3b870:	e5842054 	str	r2, [r4, #84]	; 0x54
   3b874:	e5863000 	str	r3, [r6]
    if (_snippetPos >= _snippetLen)
   3b878:	e5942054 	ldr	r2, [r4, #84]	; 0x54
   3b87c:	e59430c0 	ldr	r3, [r4, #192]	; 0xc0
   3b880:	e1520003 	cmp	r2, r3
   3b884:	38bd87f0 	popcc	{r4, r5, r6, r7, r8, r9, sl, pc}
   3b888:	e59f5440 	ldr	r5, [pc, #1088]	; 3bcd0 <TargetTracker::handleInjection(unsigned long, unsigned long, unsigned long, unsigned long&)+0x4ac>
        }
    }
    else if (injectProgress == OPCODE_INJECT_DONE)
    {
        // Clear the prefix tracker
        _prefixTracker[0] = _prefixTracker[1] = false;
   3b88c:	e3a06000 	mov	r6, #0
        // Default back to getting
        _setRegs = false;
        _snippetPos = 0;

        // Use the bus socket to request page-in delayed to next wait event
        BusAccess::targetPageForInjection(_busSocketId, false);
   3b890:	e5950000 	ldr	r0, [r5]
   3b894:	e1a01006 	mov	r1, r6
        _prefixTracker[0] = _prefixTracker[1] = false;
   3b898:	e5c46001 	strb	r6, [r4, #1]
   3b89c:	e5c46000 	strb	r6, [r4]
        _setRegs = false;
   3b8a0:	e5c46050 	strb	r6, [r4, #80]	; 0x50
        _snippetPos = 0;
   3b8a4:	e5846054 	str	r6, [r4, #84]	; 0x54
        BusAccess::targetPageForInjection(_busSocketId, false);
   3b8a8:	ebffeee3 	bl	3743c <BusAccess::targetPageForInjection(int, bool)>
                //     microsDelay(10);
                // }

        // Go back to allowing a single instruction to run before reg get
#ifdef PAUSE_GET_REGS_AT_CUR_ADDR
        _targetStateAcqMode = TARGET_STATE_ACQ_POST_INJECT;
   3b8ac:	e3a03003 	mov	r3, #3
        if (_stepMode == STEP_MODE_STEP_INTO)
   3b8b0:	e5d42004 	ldrb	r2, [r4, #4]
        _pageOutForInjectionActive = false;
   3b8b4:	e5c46005 	strb	r6, [r4, #5]
        if (_stepMode == STEP_MODE_STEP_INTO)
   3b8b8:	e3520001 	cmp	r2, #1
        _targetStateAcqMode = TARGET_STATE_ACQ_POST_INJECT;
   3b8bc:	e5c43002 	strb	r3, [r4, #2]
        {
            _stepMode = STEP_MODE_STEP_PAUSED;
   3b8c0:	05c46004 	strbeq	r6, [r4, #4]
        // LogWrite(FromTargetTracker, LOG_DEBUG, "INJECTING %04x %02x %s%s",
        //             addr, ((flags & BR_CTRL_BUS_RD_MASK) & ((retVal & BR_MEM_ACCESS_RSLT_NOT_DECODED) == 0)) ? (retVal & 0xff) : data, 
        //             (flags & BR_CTRL_BUS_RD_MASK) ? "R" : "", (flags & BR_CTRL_BUS_WR_MASK) ? "W" : "");

    }
}
   3b8c4:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    if (flags & BR_CTRL_BUS_WR_MASK)
   3b8c8:	e3170002 	tst	r7, #2
   3b8cc:	1a000023 	bne	3b960 <TargetTracker::handleInjection(unsigned long, unsigned long, unsigned long, unsigned long&)+0x13c>
        _snippetWriteIdx = 0;
   3b8d0:	e3a02000 	mov	r2, #0
        if (_snippetPos == 0)
   3b8d4:	e5943054 	ldr	r3, [r4, #84]	; 0x54
        retVal = regQueryInstructions[_snippetPos++] | BR_MEM_ACCESS_INSTR_INJECT;
   3b8d8:	e59f53f0 	ldr	r5, [pc, #1008]	; 3bcd0 <TargetTracker::handleInjection(unsigned long, unsigned long, unsigned long, unsigned long&)+0x4ac>
        if (_snippetPos == 0)
   3b8dc:	e3530000 	cmp	r3, #0
        retVal = regQueryInstructions[_snippetPos++] | BR_MEM_ACCESS_INSTR_INJECT;
   3b8e0:	e0855003 	add	r5, r5, r3
   3b8e4:	e2831001 	add	r1, r3, #1
   3b8e8:	e5d53064 	ldrb	r3, [r5, #100]	; 0x64
   3b8ec:	e5841054 	str	r1, [r4, #84]	; 0x54
   3b8f0:	e3833101 	orr	r3, r3, #1073741824	; 0x40000000
            _z80Registers.PC = addr;
   3b8f4:	05848008 	streq	r8, [r4, #8]
        retVal = regQueryInstructions[_snippetPos++] | BR_MEM_ACCESS_INSTR_INJECT;
   3b8f8:	e5863000 	str	r3, [r6]
   3b8fc:	e5943054 	ldr	r3, [r4, #84]	; 0x54
        _snippetWriteIdx = 0;
   3b900:	e5842058 	str	r2, [r4, #88]	; 0x58
    if (_snippetPos >= sizeof(regQueryInstructions))
   3b904:	e3530023 	cmp	r3, #35	; 0x23
   3b908:	8affffde 	bhi	3b888 <TargetTracker::handleInjection(unsigned long, unsigned long, unsigned long, unsigned long&)+0x64>
    else if (_snippetPos == RelJumpBackStartPos)
   3b90c:	e3530022 	cmp	r3, #34	; 0x22
   3b910:	18bd87f0 	popne	{r4, r5, r6, r7, r8, r9, sl, pc}
        if (_postInjectMemoryMirror || _requestDisplayWhileStepping)
   3b914:	e59f53b4 	ldr	r5, [pc, #948]	; 3bcd0 <TargetTracker::handleInjection(unsigned long, unsigned long, unsigned long, unsigned long&)+0x4ac>
   3b918:	e5d53088 	ldrb	r3, [r5, #136]	; 0x88
   3b91c:	e3530000 	cmp	r3, #0
   3b920:	1a000002 	bne	3b930 <TargetTracker::handleInjection(unsigned long, unsigned long, unsigned long, unsigned long&)+0x10c>
   3b924:	e5d430d6 	ldrb	r3, [r4, #214]	; 0xd6
   3b928:	e3530000 	cmp	r3, #0
   3b92c:	08bd87f0 	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
            BusAccess::waitSuspendBusDetailOneCycle();
   3b930:	ebfff98d 	bl	39f6c <BusAccess::waitSuspendBusDetailOneCycle()>
            BusAccess::targetPageForInjection(_busSocketId, false);
   3b934:	e5950000 	ldr	r0, [r5]
   3b938:	e3a01000 	mov	r1, #0
   3b93c:	ebffeebe 	bl	3743c <BusAccess::targetPageForInjection(int, bool)>
            _pageOutForInjectionActive = false;
   3b940:	e3a03000 	mov	r3, #0
            if (_requestDisplayWhileStepping)
   3b944:	e5d410d6 	ldrb	r1, [r4, #214]	; 0xd6
            BusAccess::targetReqBus(_busSocketId, busAction);
   3b948:	e5950000 	ldr	r0, [r5]
            _pageOutForInjectionActive = false;
   3b94c:	e5c43005 	strb	r3, [r4, #5]
            _requestDisplayWhileStepping = false;
   3b950:	e5c430d6 	strb	r3, [r4, #214]	; 0xd6
            BusAccess::targetReqBus(_busSocketId, busAction);
   3b954:	e2211001 	eor	r1, r1, #1
}
   3b958:	e8bd47f0 	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
            BusAccess::targetReqBus(_busSocketId, busAction);
   3b95c:	eaffee4c 	b	37294 <BusAccess::targetReqBus(int, BR_BUS_ACTION_REASON)>
        retVal = BR_MEM_ACCESS_INSTR_INJECT;
   3b960:	e3a03101 	mov	r3, #1073741824	; 0x40000000
   3b964:	e5863000 	str	r3, [r6]
        switch(_snippetPos)
   3b968:	e5943054 	ldr	r3, [r4, #84]	; 0x54
   3b96c:	e2432001 	sub	r2, r3, #1
   3b970:	e352001a 	cmp	r2, #26
   3b974:	979ff102 	ldrls	pc, [pc, r2, lsl #2]
   3b978:	eaffffe1 	b	3b904 <TargetTracker::handleInjection(unsigned long, unsigned long, unsigned long, unsigned long&)+0xe0>
   3b97c:	0003bc60 	.word	0x0003bc60
   3b980:	0003b904 	.word	0x0003b904
   3b984:	0003b904 	.word	0x0003b904
   3b988:	0003bc94 	.word	0x0003bc94
   3b98c:	0003b904 	.word	0x0003b904
   3b990:	0003b904 	.word	0x0003b904
   3b994:	0003bbc8 	.word	0x0003bbc8
   3b998:	0003b904 	.word	0x0003b904
   3b99c:	0003b904 	.word	0x0003b904
   3b9a0:	0003bbd0 	.word	0x0003bbd0
   3b9a4:	0003bbd8 	.word	0x0003bbd8
   3b9a8:	0003b904 	.word	0x0003b904
   3b9ac:	0003bbe0 	.word	0x0003bbe0
   3b9b0:	0003bbe8 	.word	0x0003bbe8
   3b9b4:	0003bbf0 	.word	0x0003bbf0
   3b9b8:	0003b904 	.word	0x0003b904
   3b9bc:	0003b904 	.word	0x0003b904
   3b9c0:	0003bbf8 	.word	0x0003bbf8
   3b9c4:	0003b904 	.word	0x0003b904
   3b9c8:	0003b904 	.word	0x0003b904
   3b9cc:	0003b904 	.word	0x0003b904
   3b9d0:	0003b904 	.word	0x0003b904
   3b9d4:	0003bc2c 	.word	0x0003bc2c
   3b9d8:	0003b904 	.word	0x0003b904
   3b9dc:	0003b904 	.word	0x0003b904
   3b9e0:	0003b904 	.word	0x0003b904
   3b9e4:	0003bb94 	.word	0x0003bb94
        BusAccess::targetPageForInjection(_busSocketId, true);
   3b9e8:	e59f52e0 	ldr	r5, [pc, #736]	; 3bcd0 <TargetTracker::handleInjection(unsigned long, unsigned long, unsigned long, unsigned long&)+0x4ac>
   3b9ec:	e3a01001 	mov	r1, #1
   3b9f0:	e5950000 	ldr	r0, [r5]
   3b9f4:	ebffee90 	bl	3743c <BusAccess::targetPageForInjection(int, bool)>
        _pageOutForInjectionActive = true;
   3b9f8:	e3a03001 	mov	r3, #1
   3b9fc:	e5c43005 	strb	r3, [r4, #5]
   3ba00:	eaffff90 	b	3b848 <TargetTracker::handleInjection(unsigned long, unsigned long, unsigned long, unsigned long&)+0x24>
    arry[offset] = val & 0xff;
   3ba04:	e59f52c4 	ldr	r5, [pc, #708]	; 3bcd0 <TargetTracker::handleInjection(unsigned long, unsigned long, unsigned long, unsigned long&)+0x4ac>
    store16BitVal(regSetInstructions, RegisterHLDASHUpdatePos, regs.HLDASH);
   3ba08:	e2841020 	add	r1, r4, #32
   3ba0c:	e891400a 	ldm	r1, {r1, r3, lr}
    arry[offset] = val & 0xff;
   3ba10:	e5c53033 	strb	r3, [r5, #51]	; 0x33
    arry[offset+1] = (val >> 8) & 0xff;
   3ba14:	e6ff3073 	uxth	r3, r3
   3ba18:	e1a03423 	lsr	r3, r3, #8
    store16BitVal(regSetInstructions, RegisterDEDASHUpdatePos, regs.DEDASH);
   3ba1c:	e594c02c 	ldr	ip, [r4, #44]	; 0x2c
    store16BitVal(regSetInstructions, RegisterBCDASHUpdatePos, regs.BCDASH);
   3ba20:	e5940030 	ldr	r0, [r4, #48]	; 0x30
    arry[offset+1] = (val >> 8) & 0xff;
   3ba24:	e6ff2071 	uxth	r2, r1
   3ba28:	e5c53034 	strb	r3, [r5, #52]	; 0x34
    arry[offset] = val & 0xff;
   3ba2c:	e5c5e036 	strb	lr, [r5, #54]	; 0x36
    store16BitVal(regSetInstructions, RegisterDEUpdatePos, regs.DE);
   3ba30:	e5943014 	ldr	r3, [r4, #20]
    arry[offset+1] = (val >> 8) & 0xff;
   3ba34:	e6ffe07e 	uxth	lr, lr
   3ba38:	e1a02422 	lsr	r2, r2, #8
   3ba3c:	e1a0e42e 	lsr	lr, lr, #8
   3ba40:	e5c52030 	strb	r2, [r5, #48]	; 0x30
   3ba44:	e5c5e037 	strb	lr, [r5, #55]	; 0x37
    store16BitVal(regSetInstructions, RegisterHLUpdatePos, regs.HL);
   3ba48:	e5942010 	ldr	r2, [r4, #16]
    store16BitVal(regSetInstructions, RegisterBCUpdatePos, regs.BC);
   3ba4c:	e594e018 	ldr	lr, [r4, #24]
    arry[offset] = val & 0xff;
   3ba50:	e5c5c039 	strb	ip, [r5, #57]	; 0x39
   3ba54:	e5c5003c 	strb	r0, [r5, #60]	; 0x3c
   3ba58:	e5c53043 	strb	r3, [r5, #67]	; 0x43
    arry[offset+1] = (val >> 8) & 0xff;
   3ba5c:	e6ffc07c 	uxth	ip, ip
   3ba60:	e6ff0070 	uxth	r0, r0
   3ba64:	e6ff3073 	uxth	r3, r3
   3ba68:	e1a0c42c 	lsr	ip, ip, #8
   3ba6c:	e1a00420 	lsr	r0, r0, #8
   3ba70:	e1a03423 	lsr	r3, r3, #8
    arry[offset] = val & 0xff;
   3ba74:	e5c5102f 	strb	r1, [r5, #47]	; 0x2f
    arry[offset+1] = (val >> 8) & 0xff;
   3ba78:	e5c5c03a 	strb	ip, [r5, #58]	; 0x3a
    store16BitVal(regSetInstructions, RegisterSPUpdatePos, regs.SP);
   3ba7c:	e594100c 	ldr	r1, [r4, #12]
    store16BitVal(regSetInstructions, RegisterAFDASHUpdatePos, regs.AFDASH);
   3ba80:	e594c034 	ldr	ip, [r4, #52]	; 0x34
    arry[offset+1] = (val >> 8) & 0xff;
   3ba84:	e5c5003d 	strb	r0, [r5, #61]	; 0x3d
    arry[offset] = val & 0xff;
   3ba88:	e5c52040 	strb	r2, [r5, #64]	; 0x40
    store16BitVal(regSetInstructions, RegisterAFUpdatePos, regs.AF);
   3ba8c:	e594001c 	ldr	r0, [r4, #28]
    arry[offset+1] = (val >> 8) & 0xff;
   3ba90:	e5c53044 	strb	r3, [r5, #68]	; 0x44
   3ba94:	e6ff2072 	uxth	r2, r2
   3ba98:	e6ff307e 	uxth	r3, lr
   3ba9c:	e1a02422 	lsr	r2, r2, #8
   3baa0:	e1a03423 	lsr	r3, r3, #8
    arry[offset] = val & 0xff;
   3baa4:	e5c51050 	strb	r1, [r5, #80]	; 0x50
    arry[offset+1] = (val >> 8) & 0xff;
   3baa8:	e5c52041 	strb	r2, [r5, #65]	; 0x41
   3baac:	e5c53047 	strb	r3, [r5, #71]	; 0x47
   3bab0:	e6ff1071 	uxth	r1, r1
   3bab4:	e6ff3070 	uxth	r3, r0
   3bab8:	e6ff207c 	uxth	r2, ip
   3babc:	e1a01421 	lsr	r1, r1, #8
   3bac0:	e1a02422 	lsr	r2, r2, #8
   3bac4:	e1a03423 	lsr	r3, r3, #8
   3bac8:	e5c51051 	strb	r1, [r5, #81]	; 0x51
   3bacc:	e5c5204a 	strb	r2, [r5, #74]	; 0x4a
    arry[offset] = val & 0xff;
   3bad0:	e5c5004d 	strb	r0, [r5, #77]	; 0x4d
   3bad4:	e5c5e046 	strb	lr, [r5, #70]	; 0x46
   3bad8:	e5c5c049 	strb	ip, [r5, #73]	; 0x49
    arry[offset+1] = (val >> 8) & 0xff;
   3badc:	e5c5304e 	strb	r3, [r5, #78]	; 0x4e
    regSetInstructions[RegisterRUpdatePos] = (regs.R + 256 - 5) % 256;
   3bae0:	e5943040 	ldr	r3, [r4, #64]	; 0x40
    regSetInstructions[RegisterIUpdatePos] = regs.I;
   3bae4:	e594103c 	ldr	r1, [r4, #60]	; 0x3c
    regSetInstructions[RegisterRUpdatePos] = (regs.R + 256 - 5) % 256;
   3bae8:	e28330fb 	add	r3, r3, #251	; 0xfb
   3baec:	e2732000 	rsbs	r2, r3, #0
   3baf0:	e6ef2072 	uxtb	r2, r2
   3baf4:	e6ef3073 	uxtb	r3, r3
   3baf8:	52623000 	rsbpl	r3, r2, #0
    regSetInstructions[RegisterIMUpdatePos] = (regs.INTMODE == 0) ? 0x46 : ((regs.INTMODE == 1) ? 0x56 : 0x5e);
   3bafc:	e5942044 	ldr	r2, [r4, #68]	; 0x44
    regSetInstructions[RegisterAUpdatePos] = regs.AF >> 8;
   3bb00:	e1a00440 	asr	r0, r0, #8
    regSetInstructions[RegisterIMUpdatePos] = (regs.INTMODE == 0) ? 0x46 : ((regs.INTMODE == 1) ? 0x56 : 0x5e);
   3bb04:	e3520000 	cmp	r2, #0
    regSetInstructions[RegisterAUpdatePos] = regs.AF >> 8;
   3bb08:	e5c5005b 	strb	r0, [r5, #91]	; 0x5b
    regSetInstructions[RegisterIUpdatePos] = regs.I;
   3bb0c:	e5c51053 	strb	r1, [r5, #83]	; 0x53
    regSetInstructions[RegisterRUpdatePos] = (regs.R + 256 - 5) % 256;
   3bb10:	e5c53057 	strb	r3, [r5, #87]	; 0x57
    regSetInstructions[RegisterIMUpdatePos] = (regs.INTMODE == 0) ? 0x46 : ((regs.INTMODE == 1) ? 0x56 : 0x5e);
   3bb14:	03a02046 	moveq	r2, #70	; 0x46
   3bb18:	0a000002 	beq	3bb28 <TargetTracker::handleInjection(unsigned long, unsigned long, unsigned long, unsigned long&)+0x304>
   3bb1c:	e3520001 	cmp	r2, #1
   3bb20:	13a0205e 	movne	r2, #94	; 0x5e
   3bb24:	03a02056 	moveq	r2, #86	; 0x56
    regSetInstructions[RegisterINTENUpdatePos] = (regs.INTENABLED == 0) ? 0xf3 : 0xfb;
   3bb28:	e5943048 	ldr	r3, [r4, #72]	; 0x48
    store16BitVal(regSetInstructions, RegisterPCUpdatePos, regs.PC);
   3bb2c:	e5940008 	ldr	r0, [r4, #8]
    regSetInstructions[RegisterINTENUpdatePos] = (regs.INTENABLED == 0) ? 0xf3 : 0xfb;
   3bb30:	e3530000 	cmp	r3, #0
   3bb34:	13a010fb 	movne	r1, #251	; 0xfb
   3bb38:	03a010f3 	moveq	r1, #243	; 0xf3
    arry[offset+1] = (val >> 8) & 0xff;
   3bb3c:	e6ff3070 	uxth	r3, r0
   3bb40:	e1a03423 	lsr	r3, r3, #8
    regSetInstructions[RegisterIMUpdatePos] = (regs.INTMODE == 0) ? 0x46 : ((regs.INTMODE == 1) ? 0x56 : 0x5e);
   3bb44:	e5c5205d 	strb	r2, [r5, #93]	; 0x5d
    regSetInstructions[RegisterINTENUpdatePos] = (regs.INTENABLED == 0) ? 0xf3 : 0xfb;
   3bb48:	e5c5105e 	strb	r1, [r5, #94]	; 0x5e
        memcpy(pCodeBuffer, regSetInstructions, codeMaxlen);
   3bb4c:	e3a02064 	mov	r2, #100	; 0x64
   3bb50:	e59f117c 	ldr	r1, [pc, #380]	; 3bcd4 <TargetTracker::handleInjection(unsigned long, unsigned long, unsigned long, unsigned long&)+0x4b0>
    arry[offset] = val & 0xff;
   3bb54:	e5c50060 	strb	r0, [r5, #96]	; 0x60
    arry[offset+1] = (val >> 8) & 0xff;
   3bb58:	e5c53061 	strb	r3, [r5, #97]	; 0x61
        memcpy(pCodeBuffer, regSetInstructions, codeMaxlen);
   3bb5c:	e59f0174 	ldr	r0, [pc, #372]	; 3bcd8 <TargetTracker::handleInjection(unsigned long, unsigned long, unsigned long, unsigned long&)+0x4b4>
   3bb60:	eb004480 	bl	4cd68 <memcpy>
    retVal = _snippetBuf[_snippetPos++] | BR_MEM_ACCESS_INSTR_INJECT;
   3bb64:	e3a02001 	mov	r2, #1
        _snippetLen = getInstructionsToSetRegs(_z80Registers, _snippetBuf, MAX_REGISTER_SET_CODE_LEN);
   3bb68:	e3a01036 	mov	r1, #54	; 0x36
    retVal = _snippetBuf[_snippetPos++] | BR_MEM_ACCESS_INSTR_INJECT;
   3bb6c:	e5d4305c 	ldrb	r3, [r4, #92]	; 0x5c
        _snippetLen = getInstructionsToSetRegs(_z80Registers, _snippetBuf, MAX_REGISTER_SET_CODE_LEN);
   3bb70:	e58410c0 	str	r1, [r4, #192]	; 0xc0
    retVal = _snippetBuf[_snippetPos++] | BR_MEM_ACCESS_INSTR_INJECT;
   3bb74:	e3833101 	orr	r3, r3, #1073741824	; 0x40000000
   3bb78:	e5842054 	str	r2, [r4, #84]	; 0x54
   3bb7c:	e5863000 	str	r3, [r6]
    if (_snippetPos >= _snippetLen)
   3bb80:	e5942054 	ldr	r2, [r4, #84]	; 0x54
   3bb84:	e59430c0 	ldr	r3, [r4, #192]	; 0xc0
   3bb88:	e1520003 	cmp	r2, r3
   3bb8c:	38bd87f0 	popcc	{r4, r5, r6, r7, r8, r9, sl, pc}
   3bb90:	eaffff3d 	b	3b88c <TargetTracker::handleInjection(unsigned long, unsigned long, unsigned long, unsigned long&)+0x68>
                if (_snippetWriteIdx == 0)
   3bb94:	e5942058 	ldr	r2, [r4, #88]	; 0x58
   3bb98:	e5943024 	ldr	r3, [r4, #36]	; 0x24
   3bb9c:	e3520000 	cmp	r2, #0
                    _snippetWriteIdx++;
   3bba0:	03a02001 	moveq	r2, #1
                    _z80Registers.IY = (_z80Registers.IY & 0xff00) | (data & 0xff);
   3bba4:	16ef9079 	uxtbne	r9, r9
                    _z80Registers.IY = (_z80Registers.IY & 0xff) | (data << 8);
   3bba8:	06ef3073 	uxtbeq	r3, r3
                    _z80Registers.IY = (_z80Registers.IY & 0xff00) | (data & 0xff);
   3bbac:	12033cff 	andne	r3, r3, #65280	; 0xff00
                    _z80Registers.IY = (_z80Registers.IY & 0xff) | (data << 8);
   3bbb0:	01839409 	orreq	r9, r3, r9, lsl #8
                    _z80Registers.IY = (_z80Registers.IY & 0xff00) | (data & 0xff);
   3bbb4:	11839009 	orrne	r9, r3, r9
                    _z80Registers.IY = (_z80Registers.IY & 0xff) | (data << 8);
   3bbb8:	05849024 	streq	r9, [r4, #36]	; 0x24
                    _snippetWriteIdx++;
   3bbbc:	05842058 	streq	r2, [r4, #88]	; 0x58
                    _z80Registers.IY = (_z80Registers.IY & 0xff00) | (data & 0xff);
   3bbc0:	15849024 	strne	r9, [r4, #36]	; 0x24
   3bbc4:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
                _z80Registers.I = data;                        
   3bbc8:	e584903c 	str	r9, [r4, #60]	; 0x3c
   3bbcc:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
                _z80Registers.DE = addr;                        
   3bbd0:	e5848014 	str	r8, [r4, #20]
   3bbd4:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
                _z80Registers.BC = addr;                        
   3bbd8:	e5848018 	str	r8, [r4, #24]
   3bbdc:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
                _z80Registers.HLDASH = addr;                        
   3bbe0:	e5848028 	str	r8, [r4, #40]	; 0x28
   3bbe4:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
                _z80Registers.DEDASH = addr;                        
   3bbe8:	e584802c 	str	r8, [r4, #44]	; 0x2c
   3bbec:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
                _z80Registers.BCDASH = addr;                        
   3bbf0:	e5848030 	str	r8, [r4, #48]	; 0x30
   3bbf4:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
                if (_snippetWriteIdx == 0)
   3bbf8:	e5942058 	ldr	r2, [r4, #88]	; 0x58
   3bbfc:	e5943034 	ldr	r3, [r4, #52]	; 0x34
   3bc00:	e3520000 	cmp	r2, #0
                    _snippetWriteIdx++;
   3bc04:	03a02001 	moveq	r2, #1
                    _z80Registers.AFDASH = (_z80Registers.AFDASH & 0xff00) | (data & 0xff);
   3bc08:	12033cff 	andne	r3, r3, #65280	; 0xff00
                    _z80Registers.AFDASH = (_z80Registers.AFDASH & 0xff) | (data << 8);
   3bc0c:	06ef3073 	uxtbeq	r3, r3
                    _z80Registers.AFDASH = (_z80Registers.AFDASH & 0xff00) | (data & 0xff);
   3bc10:	16ef9079 	uxtbne	r9, r9
                    _z80Registers.AFDASH = (_z80Registers.AFDASH & 0xff) | (data << 8);
   3bc14:	01839409 	orreq	r9, r3, r9, lsl #8
                    _z80Registers.AFDASH = (_z80Registers.AFDASH & 0xff00) | (data & 0xff);
   3bc18:	11833009 	orrne	r3, r3, r9
                    _z80Registers.AFDASH = (_z80Registers.AFDASH & 0xff) | (data << 8);
   3bc1c:	05849034 	streq	r9, [r4, #52]	; 0x34
                    _snippetWriteIdx++;
   3bc20:	05842058 	streq	r2, [r4, #88]	; 0x58
                    _z80Registers.AFDASH = (_z80Registers.AFDASH & 0xff00) | (data & 0xff);
   3bc24:	15843034 	strne	r3, [r4, #52]	; 0x34
   3bc28:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
                if (_snippetWriteIdx == 0)
   3bc2c:	e5942058 	ldr	r2, [r4, #88]	; 0x58
   3bc30:	e5943020 	ldr	r3, [r4, #32]
   3bc34:	e3520000 	cmp	r2, #0
                    _snippetWriteIdx++;
   3bc38:	03a02001 	moveq	r2, #1
                    _z80Registers.IX = (_z80Registers.IX & 0xff00) | (data & 0xff);
   3bc3c:	12033cff 	andne	r3, r3, #65280	; 0xff00
                    _z80Registers.IX = (_z80Registers.IX & 0xff) | (data << 8);
   3bc40:	06ef3073 	uxtbeq	r3, r3
                    _z80Registers.IX = (_z80Registers.IX & 0xff00) | (data & 0xff);
   3bc44:	16ef9079 	uxtbne	r9, r9
                    _z80Registers.IX = (_z80Registers.IX & 0xff) | (data << 8);
   3bc48:	01839409 	orreq	r9, r3, r9, lsl #8
                    _z80Registers.IX = (_z80Registers.IX & 0xff00) | (data & 0xff);
   3bc4c:	11833009 	orrne	r3, r3, r9
                    _z80Registers.IX = (_z80Registers.IX & 0xff) | (data << 8);
   3bc50:	05849020 	streq	r9, [r4, #32]
                    _snippetWriteIdx++;
   3bc54:	05842058 	streq	r2, [r4, #88]	; 0x58
                    _z80Registers.IX = (_z80Registers.IX & 0xff00) | (data & 0xff);
   3bc58:	15843020 	strne	r3, [r4, #32]
   3bc5c:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
                if (_snippetWriteIdx == 0)
   3bc60:	e5943058 	ldr	r3, [r4, #88]	; 0x58
   3bc64:	e6ef2079 	uxtb	r2, r9
   3bc68:	e3530000 	cmp	r3, #0
   3bc6c:	1a00000f 	bne	3bcb0 <TargetTracker::handleInjection(unsigned long, unsigned long, unsigned long, unsigned long&)+0x48c>
                    _snippetWriteIdx++;
   3bc70:	e3a01001 	mov	r1, #1
                    regQueryInstructions[RegisterAFUpdatePos+1] = data;                     
   3bc74:	e59f3054 	ldr	r3, [pc, #84]	; 3bcd0 <TargetTracker::handleInjection(unsigned long, unsigned long, unsigned long, unsigned long&)+0x4ac>
                    _z80Registers.SP = addr+1;
   3bc78:	e0888001 	add	r8, r8, r1
                    _z80Registers.AF = data << 8;
   3bc7c:	e1a09409 	lsl	r9, r9, #8
                    _z80Registers.SP = addr+1;
   3bc80:	e584800c 	str	r8, [r4, #12]
                    _z80Registers.AF = data << 8;
   3bc84:	e584901c 	str	r9, [r4, #28]
                    _snippetWriteIdx++;
   3bc88:	e5841058 	str	r1, [r4, #88]	; 0x58
                    regQueryInstructions[RegisterAFUpdatePos+1] = data;                     
   3bc8c:	e5c32085 	strb	r2, [r3, #133]	; 0x85
   3bc90:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
                regQueryInstructions[RegisterRUpdatePos] = _z80Registers.R - 2;                 
   3bc94:	e59f3034 	ldr	r3, [pc, #52]	; 3bcd0 <TargetTracker::handleInjection(unsigned long, unsigned long, unsigned long, unsigned long&)+0x4ac>
   3bc98:	e2492005 	sub	r2, r9, #5
                _z80Registers.R = data - 3;
   3bc9c:	e2499003 	sub	r9, r9, #3
                _z80Registers.HL = addr;
   3bca0:	e5848010 	str	r8, [r4, #16]
                regQueryInstructions[RegisterRUpdatePos] = _z80Registers.R - 2;                 
   3bca4:	e5c32080 	strb	r2, [r3, #128]	; 0x80
                _z80Registers.R = data - 3;
   3bca8:	e5849040 	str	r9, [r4, #64]	; 0x40
   3bcac:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
                    _z80Registers.AF = (_z80Registers.AF & 0xff00) | (data & 0xff);
   3bcb0:	e594301c 	ldr	r3, [r4, #28]
                    regQueryInstructions[RegisterAFUpdatePos] = data;                     
   3bcb4:	e59f1014 	ldr	r1, [pc, #20]	; 3bcd0 <TargetTracker::handleInjection(unsigned long, unsigned long, unsigned long, unsigned long&)+0x4ac>
                    _z80Registers.AF = (_z80Registers.AF & 0xff00) | (data & 0xff);
   3bcb8:	e2033cff 	and	r3, r3, #65280	; 0xff00
   3bcbc:	e1833002 	orr	r3, r3, r2
   3bcc0:	e584301c 	str	r3, [r4, #28]
                    regQueryInstructions[RegisterAFUpdatePos] = data;                     
   3bcc4:	e5c12084 	strb	r2, [r1, #132]	; 0x84
   3bcc8:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   3bccc:	0009c9b4 	.word	0x0009c9b4
   3bcd0:	0006f474 	.word	0x0006f474
   3bcd4:	0006f4a0 	.word	0x0006f4a0
   3bcd8:	0009ca10 	.word	0x0009ca10

0003bcdc <TargetTracker::handleWaitInterruptStatic(unsigned long, unsigned long, unsigned long, unsigned long&)>:
    if ((flags & BR_CTRL_BUS_MREQ_MASK) == 0)
   3bcdc:	e3120004 	tst	r2, #4
   3bce0:	012fff1e 	bxeq	lr
{
   3bce4:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    switch (_targetStateAcqMode)
   3bce8:	e59f52dc 	ldr	r5, [pc, #732]	; 3bfcc <TargetTracker::handleWaitInterruptStatic(unsigned long, unsigned long, unsigned long, unsigned long&)+0x2f0>
   3bcec:	e1a04002 	mov	r4, r2
   3bcf0:	e5d52002 	ldrb	r2, [r5, #2]
{
   3bcf4:	e24dd008 	sub	sp, sp, #8
   3bcf8:	e1a06003 	mov	r6, r3
   3bcfc:	e1a07001 	mov	r7, r1
   3bd00:	e1a08000 	mov	r8, r0
    switch (_targetStateAcqMode)
   3bd04:	e3520003 	cmp	r2, #3
   3bd08:	979ff102 	ldrls	pc, [pc, r2, lsl #2]
   3bd0c:	ea000013 	b	3bd60 <TargetTracker::handleWaitInterruptStatic(unsigned long, unsigned long, unsigned long, unsigned long&)+0x84>
   3bd10:	0003bd78 	.word	0x0003bd78
   3bd14:	0003bd20 	.word	0x0003bd20
   3bd18:	0003bd68 	.word	0x0003bd68
   3bd1c:	0003bd78 	.word	0x0003bd78
    if (_disablePending)
   3bd20:	e5d59006 	ldrb	r9, [r5, #6]
   3bd24:	e3590000 	cmp	r9, #0
   3bd28:	0a00003d 	beq	3be24 <TargetTracker::handleWaitInterruptStatic(unsigned long, unsigned long, unsigned long, unsigned long&)+0x148>
        _disablePending = false;
   3bd2c:	e3a04000 	mov	r4, #0
        BusAccess::busSocketEnable(_busSocketId, false);
   3bd30:	e59f6298 	ldr	r6, [pc, #664]	; 3bfd0 <TargetTracker::handleWaitInterruptStatic(unsigned long, unsigned long, unsigned long, unsigned long&)+0x2f4>
   3bd34:	e1a01004 	mov	r1, r4
   3bd38:	e5960000 	ldr	r0, [r6]
        _disablePending = false;
   3bd3c:	e5c54006 	strb	r4, [r5, #6]
        BusAccess::busSocketEnable(_busSocketId, false);
   3bd40:	ebfff294 	bl	38798 <BusAccess::busSocketEnable(int, bool)>
        BusAccess::waitHold(_busSocketId, false);
   3bd44:	e1a01004 	mov	r1, r4
   3bd48:	e5960000 	ldr	r0, [r6]
   3bd4c:	ebffecbc 	bl	37044 <BusAccess::waitHold(int, bool)>
        BusAccess::targetPageForInjection(_busSocketId, false);
   3bd50:	e1a01004 	mov	r1, r4
   3bd54:	e5960000 	ldr	r0, [r6]
   3bd58:	ebffedb7 	bl	3743c <BusAccess::targetPageForInjection(int, bool)>
        _pageOutForInjectionActive = false;
   3bd5c:	e5c54005 	strb	r4, [r5, #5]
}
   3bd60:	e28dd008 	add	sp, sp, #8
   3bd64:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
            handleInjection(addr, data, flags, retVal);
   3bd68:	e1a02004 	mov	r2, r4
}
   3bd6c:	e28dd008 	add	sp, sp, #8
   3bd70:	e8bd47f0 	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
            handleInjection(addr, data, flags, retVal);
   3bd74:	eafffeaa 	b	3b824 <TargetTracker::handleInjection(unsigned long, unsigned long, unsigned long, unsigned long&)>
            _machineHeartbeatCounter++;
   3bd78:	e59530d8 	ldr	r3, [r5, #216]	; 0xd8
            if (_machineHeartbeatCounter > 100000)
   3bd7c:	e59f1250 	ldr	r1, [pc, #592]	; 3bfd4 <TargetTracker::handleWaitInterruptStatic(unsigned long, unsigned long, unsigned long, unsigned long&)+0x2f8>
            _machineHeartbeatCounter++;
   3bd80:	e2833001 	add	r3, r3, #1
            if (_machineHeartbeatCounter > 100000)
   3bd84:	e1530001 	cmp	r3, r1
            _machineHeartbeatCounter++;
   3bd88:	958530d8 	strls	r3, [r5, #216]	; 0xd8
            if (_machineHeartbeatCounter > 100000)
   3bd8c:	8a000081 	bhi	3bf98 <TargetTracker::handleWaitInterruptStatic(unsigned long, unsigned long, unsigned long, unsigned long&)+0x2bc>
            if ((_targetStateAcqMode == TARGET_STATE_ACQ_POST_INJECT) && (_stepMode == STEP_MODE_STEP_PAUSED))
   3bd90:	e3520003 	cmp	r2, #3
   3bd94:	0a000072 	beq	3bf64 <TargetTracker::handleWaitInterruptStatic(unsigned long, unsigned long, unsigned long, unsigned long&)+0x288>
    if ((_targetStateAcqMode == TARGET_STATE_ACQ_INJECTING) || 
   3bd98:	e2422002 	sub	r2, r2, #2
   3bd9c:	e3520001 	cmp	r2, #1
   3bda0:	9a000018 	bls	3be08 <TargetTracker::handleWaitInterruptStatic(unsigned long, unsigned long, unsigned long, unsigned long&)+0x12c>
    if ((_stepMode == STEP_MODE_STEP_OVER) && (flags & BR_CTRL_BUS_M1_MASK) && (_stepOverPCValue == addr))
   3bda4:	e5d51004 	ldrb	r1, [r5, #4]
   3bda8:	e3510002 	cmp	r1, #2
   3bdac:	1a00000d 	bne	3bde8 <TargetTracker::handleWaitInterruptStatic(unsigned long, unsigned long, unsigned long, unsigned long&)+0x10c>
   3bdb0:	e3140010 	tst	r4, #16
   3bdb4:	0a00000b 	beq	3bde8 <TargetTracker::handleWaitInterruptStatic(unsigned long, unsigned long, unsigned long, unsigned long&)+0x10c>
   3bdb8:	e59530c4 	ldr	r3, [r5, #196]	; 0xc4
   3bdbc:	e1580003 	cmp	r8, r3
   3bdc0:	1a000008 	bne	3bde8 <TargetTracker::handleWaitInterruptStatic(unsigned long, unsigned long, unsigned long, unsigned long&)+0x10c>
        _stepMode = STEP_MODE_STEP_PAUSED;
   3bdc4:	e3a00000 	mov	r0, #0
        LogWrite(FromTargetTracker, LOG_DEBUG, "Hit step-over PC value %04x", _stepOverPCValue);
   3bdc8:	e1a03008 	mov	r3, r8
   3bdcc:	e59f2204 	ldr	r2, [pc, #516]	; 3bfd8 <TargetTracker::handleWaitInterruptStatic(unsigned long, unsigned long, unsigned long, unsigned long&)+0x2fc>
        _targetStateAcqMode = TARGET_STATE_ACQ_INJECTING;
   3bdd0:	e5c51002 	strb	r1, [r5, #2]
        _stepMode = STEP_MODE_STEP_PAUSED;
   3bdd4:	e5c50004 	strb	r0, [r5, #4]
        LogWrite(FromTargetTracker, LOG_DEBUG, "Hit Breakpoint %04x", addr);
   3bdd8:	e3a01004 	mov	r1, #4
   3bddc:	e59f01f8 	ldr	r0, [pc, #504]	; 3bfdc <TargetTracker::handleWaitInterruptStatic(unsigned long, unsigned long, unsigned long, unsigned long&)+0x300>
   3bde0:	ebffa0e4 	bl	24178 <LogWrite>
   3bde4:	ea000007 	b	3be08 <TargetTracker::handleWaitInterruptStatic(unsigned long, unsigned long, unsigned long, unsigned long&)+0x12c>
    else if (_breakpoints.checkForBreak(addr, data, flags, retVal))
   3bde8:	e58d6000 	str	r6, [sp]
   3bdec:	e1a03004 	mov	r3, r4
   3bdf0:	e1a02007 	mov	r2, r7
   3bdf4:	e1a01008 	mov	r1, r8
   3bdf8:	e59f01e0 	ldr	r0, [pc, #480]	; 3bfe0 <TargetTracker::handleWaitInterruptStatic(unsigned long, unsigned long, unsigned long, unsigned long&)+0x304>
   3bdfc:	ebfff956 	bl	3a35c <TargetBreakpoints::checkForBreak(unsigned long, unsigned long, unsigned long, unsigned long&)>
   3be00:	e3500000 	cmp	r0, #0
   3be04:	1a00006b 	bne	3bfb8 <TargetTracker::handleWaitInterruptStatic(unsigned long, unsigned long, unsigned long, unsigned long&)+0x2dc>
            handleTrackerIdle(addr, data, flags, retVal);
   3be08:	e1a03006 	mov	r3, r6
   3be0c:	e1a02004 	mov	r2, r4
   3be10:	e1a01007 	mov	r1, r7
   3be14:	e1a00008 	mov	r0, r8
}
   3be18:	e28dd008 	add	sp, sp, #8
   3be1c:	e8bd47f0 	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
            handleTrackerIdle(addr, data, flags, retVal);
   3be20:	eafffe45 	b	3b73c <TargetTracker::handleTrackerIdle(unsigned long, unsigned long, unsigned long, unsigned long&)>
    if ((_stepMode == STEP_MODE_STEP_OVER) && (flags & BR_CTRL_BUS_M1_MASK) && (_stepOverPCValue == addr))
   3be24:	e5d5c004 	ldrb	ip, [r5, #4]
   3be28:	e204a010 	and	sl, r4, #16
   3be2c:	e35c0002 	cmp	ip, #2
   3be30:	1a00002d 	bne	3beec <TargetTracker::handleWaitInterruptStatic(unsigned long, unsigned long, unsigned long, unsigned long&)+0x210>
   3be34:	e35a0000 	cmp	sl, #0
   3be38:	0a00002b 	beq	3beec <TargetTracker::handleWaitInterruptStatic(unsigned long, unsigned long, unsigned long, unsigned long&)+0x210>
   3be3c:	e59530c4 	ldr	r3, [r5, #196]	; 0xc4
   3be40:	e1500003 	cmp	r0, r3
   3be44:	1a000028 	bne	3beec <TargetTracker::handleWaitInterruptStatic(unsigned long, unsigned long, unsigned long, unsigned long&)+0x210>
        LogWrite(FromTargetTracker, LOG_DEBUG, "Hit step-over PC value %04x", _stepOverPCValue);
   3be48:	e1a03000 	mov	r3, r0
   3be4c:	e59f2184 	ldr	r2, [pc, #388]	; 3bfd8 <TargetTracker::handleWaitInterruptStatic(unsigned long, unsigned long, unsigned long, unsigned long&)+0x2fc>
   3be50:	e3a01004 	mov	r1, #4
   3be54:	e59f0180 	ldr	r0, [pc, #384]	; 3bfdc <TargetTracker::handleWaitInterruptStatic(unsigned long, unsigned long, unsigned long, unsigned long&)+0x300>
        _targetStateAcqMode = TARGET_STATE_ACQ_INJECTING;
   3be58:	e5c5c002 	strb	ip, [r5, #2]
        _stepMode = STEP_MODE_STEP_PAUSED;
   3be5c:	e5c59004 	strb	r9, [r5, #4]
        LogWrite(FromTargetTracker, LOG_DEBUG, "Hit step-over PC value %04x", _stepOverPCValue);
   3be60:	ebffa0c4 	bl	24178 <LogWrite>
            bool firstByteOfInstr = trackPrefixedInstructions(flags, data, retVal);
   3be64:	e5963000 	ldr	r3, [r6]
    uint32_t codeVal = ((retVal & BR_MEM_ACCESS_RSLT_NOT_DECODED) ? data : retVal) & 0xff;
   3be68:	e3530000 	cmp	r3, #0
   3be6c:	b6ef3077 	uxtblt	r3, r7
   3be70:	a6ef3073 	uxtbge	r3, r3
    if (flags & BR_CTRL_BUS_M1_MASK)
   3be74:	e35a0000 	cmp	sl, #0
   3be78:	0a00002d 	beq	3bf34 <TargetTracker::handleWaitInterruptStatic(unsigned long, unsigned long, unsigned long, unsigned long&)+0x258>
        _prefixTracker[0] = _prefixTracker[1];
   3be7c:	e5d52001 	ldrb	r2, [r5, #1]
    switch(instr)
   3be80:	e35300dd 	cmp	r3, #221	; 0xdd
        _prefixTracker[0] = _prefixTracker[1];
   3be84:	e5c52000 	strb	r2, [r5]
    switch(instr)
   3be88:	0a000040 	beq	3bf90 <TargetTracker::handleWaitInterruptStatic(unsigned long, unsigned long, unsigned long, unsigned long&)+0x2b4>
   3be8c:	9a00003d 	bls	3bf88 <TargetTracker::handleWaitInterruptStatic(unsigned long, unsigned long, unsigned long, unsigned long&)+0x2ac>
   3be90:	e35300ed 	cmp	r3, #237	; 0xed
   3be94:	0a00003d 	beq	3bf90 <TargetTracker::handleWaitInterruptStatic(unsigned long, unsigned long, unsigned long, unsigned long&)+0x2b4>
   3be98:	e35300fd 	cmp	r3, #253	; 0xfd
   3be9c:	0a00003b 	beq	3bf90 <TargetTracker::handleWaitInterruptStatic(unsigned long, unsigned long, unsigned long, unsigned long&)+0x2b4>
            if (!firstByteOfInstr)
   3bea0:	e3520000 	cmp	r2, #0
        _prefixTracker[1] = isPrefixInstruction(codeVal);
   3bea4:	e5c59001 	strb	r9, [r5, #1]
            if (!firstByteOfInstr)
   3bea8:	1a000023 	bne	3bf3c <TargetTracker::handleWaitInterruptStatic(unsigned long, unsigned long, unsigned long, unsigned long&)+0x260>
                if ((_stepMode == STEP_MODE_STEP_INTO) || _requestDisplayWhileStepping)
   3beac:	e5d53004 	ldrb	r3, [r5, #4]
   3beb0:	e3530001 	cmp	r3, #1
   3beb4:	0a000002 	beq	3bec4 <TargetTracker::handleWaitInterruptStatic(unsigned long, unsigned long, unsigned long, unsigned long&)+0x1e8>
   3beb8:	e5d530d6 	ldrb	r3, [r5, #214]	; 0xd6
   3bebc:	e3530000 	cmp	r3, #0
   3bec0:	0a000023 	beq	3bf54 <TargetTracker::handleWaitInterruptStatic(unsigned long, unsigned long, unsigned long, unsigned long&)+0x278>
                    _targetStateAcqMode = TARGET_STATE_ACQ_INJECTING;
   3bec4:	e3a03002 	mov	r3, #2
   3bec8:	e5c53002 	strb	r3, [r5, #2]
                _setRegs = false;
   3becc:	e3a0c000 	mov	ip, #0
                handleInjection(addr, data, flags, retVal);
   3bed0:	e1a03006 	mov	r3, r6
   3bed4:	e1a02004 	mov	r2, r4
   3bed8:	e1a01007 	mov	r1, r7
   3bedc:	e1a00008 	mov	r0, r8
                _setRegs = false;
   3bee0:	e5c5c050 	strb	ip, [r5, #80]	; 0x50
                _snippetPos = 0;
   3bee4:	e585c054 	str	ip, [r5, #84]	; 0x54
   3bee8:	eaffff9f 	b	3bd6c <TargetTracker::handleWaitInterruptStatic(unsigned long, unsigned long, unsigned long, unsigned long&)+0x90>
    else if (_breakpoints.checkForBreak(addr, data, flags, retVal))
   3beec:	e58d6000 	str	r6, [sp]
   3bef0:	e1a03004 	mov	r3, r4
   3bef4:	e1a02007 	mov	r2, r7
   3bef8:	e1a01008 	mov	r1, r8
   3befc:	e59f00dc 	ldr	r0, [pc, #220]	; 3bfe0 <TargetTracker::handleWaitInterruptStatic(unsigned long, unsigned long, unsigned long, unsigned long&)+0x304>
   3bf00:	ebfff915 	bl	3a35c <TargetBreakpoints::checkForBreak(unsigned long, unsigned long, unsigned long, unsigned long&)>
   3bf04:	e3500000 	cmp	r0, #0
   3bf08:	0affffd5 	beq	3be64 <TargetTracker::handleWaitInterruptStatic(unsigned long, unsigned long, unsigned long, unsigned long&)+0x188>
        _targetStateAcqMode = TARGET_STATE_ACQ_INJECTING;
   3bf0c:	e3a00002 	mov	r0, #2
        _stepMode = STEP_MODE_STEP_PAUSED;
   3bf10:	e3a0c000 	mov	ip, #0
        _targetStateAcqMode = TARGET_STATE_ACQ_INJECTING;
   3bf14:	e5c50002 	strb	r0, [r5, #2]
        LogWrite(FromTargetTracker, LOG_DEBUG, "Hit Breakpoint %04x", addr);
   3bf18:	e1a03008 	mov	r3, r8
   3bf1c:	e59f20c0 	ldr	r2, [pc, #192]	; 3bfe4 <TargetTracker::handleWaitInterruptStatic(unsigned long, unsigned long, unsigned long, unsigned long&)+0x308>
   3bf20:	e3a01004 	mov	r1, #4
   3bf24:	e59f00b0 	ldr	r0, [pc, #176]	; 3bfdc <TargetTracker::handleWaitInterruptStatic(unsigned long, unsigned long, unsigned long, unsigned long&)+0x300>
        _stepMode = STEP_MODE_STEP_PAUSED;
   3bf28:	e5c5c004 	strb	ip, [r5, #4]
        LogWrite(FromTargetTracker, LOG_DEBUG, "Hit Breakpoint %04x", addr);
   3bf2c:	ebffa091 	bl	24178 <LogWrite>
   3bf30:	eaffffcb 	b	3be64 <TargetTracker::handleWaitInterruptStatic(unsigned long, unsigned long, unsigned long, unsigned long&)+0x188>
        _prefixTracker[0] = _prefixTracker[1] = false;
   3bf34:	e5c5a001 	strb	sl, [r5, #1]
   3bf38:	e5c5a000 	strb	sl, [r5]
                if (_debugInstrBytePos < MAX_BYTES_IN_INSTR)
   3bf3c:	e59530c8 	ldr	r3, [r5, #200]	; 0xc8
   3bf40:	e3530009 	cmp	r3, #9
                    _debugInstrBytes[_debugInstrBytePos++] = data;
   3bf44:	92832001 	addls	r2, r3, #1
   3bf48:	90853003 	addls	r3, r5, r3
   3bf4c:	958520c8 	strls	r2, [r5, #200]	; 0xc8
   3bf50:	95c370cc 	strbls	r7, [r3, #204]	; 0xcc
            if (_targetStateAcqMode == TARGET_STATE_ACQ_INJECTING)
   3bf54:	e5d53002 	ldrb	r3, [r5, #2]
   3bf58:	e3530002 	cmp	r3, #2
   3bf5c:	1affff7f 	bne	3bd60 <TargetTracker::handleWaitInterruptStatic(unsigned long, unsigned long, unsigned long, unsigned long&)+0x84>
   3bf60:	eaffffd9 	b	3becc <TargetTracker::handleWaitInterruptStatic(unsigned long, unsigned long, unsigned long, unsigned long&)+0x1f0>
            if ((_targetStateAcqMode == TARGET_STATE_ACQ_POST_INJECT) && (_stepMode == STEP_MODE_STEP_PAUSED))
   3bf64:	e5d53004 	ldrb	r3, [r5, #4]
   3bf68:	e3530000 	cmp	r3, #0
   3bf6c:	1affffa5 	bne	3be08 <TargetTracker::handleWaitInterruptStatic(unsigned long, unsigned long, unsigned long, unsigned long&)+0x12c>
                BusAccess::waitHold(_busSocketId, true);
   3bf70:	e59f3058 	ldr	r3, [pc, #88]	; 3bfd0 <TargetTracker::handleWaitInterruptStatic(unsigned long, unsigned long, unsigned long, unsigned long&)+0x2f4>
   3bf74:	e3a01001 	mov	r1, #1
   3bf78:	e5930000 	ldr	r0, [r3]
   3bf7c:	ebffec30 	bl	37044 <BusAccess::waitHold(int, bool)>
   3bf80:	e5d52002 	ldrb	r2, [r5, #2]
   3bf84:	eaffff83 	b	3bd98 <TargetTracker::handleWaitInterruptStatic(unsigned long, unsigned long, unsigned long, unsigned long&)+0xbc>
    switch(instr)
   3bf88:	e35300cb 	cmp	r3, #203	; 0xcb
   3bf8c:	1affffc3 	bne	3bea0 <TargetTracker::handleWaitInterruptStatic(unsigned long, unsigned long, unsigned long, unsigned long&)+0x1c4>
            return true;
   3bf90:	e3a09001 	mov	r9, #1
   3bf94:	eaffffc1 	b	3bea0 <TargetTracker::handleWaitInterruptStatic(unsigned long, unsigned long, unsigned long, unsigned long&)+0x1c4>
                _machineHeartbeatCounter = 0;
   3bf98:	e3a03000 	mov	r3, #0
                LogWrite(FromTargetTracker, LOG_DEBUG, "INT");
   3bf9c:	e59f2044 	ldr	r2, [pc, #68]	; 3bfe8 <TargetTracker::handleWaitInterruptStatic(unsigned long, unsigned long, unsigned long, unsigned long&)+0x30c>
   3bfa0:	e3a01004 	mov	r1, #4
   3bfa4:	e59f0030 	ldr	r0, [pc, #48]	; 3bfdc <TargetTracker::handleWaitInterruptStatic(unsigned long, unsigned long, unsigned long, unsigned long&)+0x300>
                _machineHeartbeatCounter = 0;
   3bfa8:	e58530d8 	str	r3, [r5, #216]	; 0xd8
                LogWrite(FromTargetTracker, LOG_DEBUG, "INT");
   3bfac:	ebffa071 	bl	24178 <LogWrite>
   3bfb0:	e5d52002 	ldrb	r2, [r5, #2]
   3bfb4:	eaffff75 	b	3bd90 <TargetTracker::handleWaitInterruptStatic(unsigned long, unsigned long, unsigned long, unsigned long&)+0xb4>
        _targetStateAcqMode = TARGET_STATE_ACQ_INJECTING;
   3bfb8:	e3a01002 	mov	r1, #2
        _stepMode = STEP_MODE_STEP_PAUSED;
   3bfbc:	e3a00000 	mov	r0, #0
        LogWrite(FromTargetTracker, LOG_DEBUG, "Hit Breakpoint %04x", addr);
   3bfc0:	e1a03008 	mov	r3, r8
   3bfc4:	e59f2018 	ldr	r2, [pc, #24]	; 3bfe4 <TargetTracker::handleWaitInterruptStatic(unsigned long, unsigned long, unsigned long, unsigned long&)+0x308>
   3bfc8:	eaffff80 	b	3bdd0 <TargetTracker::handleWaitInterruptStatic(unsigned long, unsigned long, unsigned long, unsigned long&)+0xf4>
   3bfcc:	0009c9b4 	.word	0x0009c9b4
   3bfd0:	0006f474 	.word	0x0006f474
   3bfd4:	000186a0 	.word	0x000186a0
   3bfd8:	00055cac 	.word	0x00055cac
   3bfdc:	00055bd8 	.word	0x00055bd8
   3bfe0:	0009ca90 	.word	0x0009ca90
   3bfe4:	00055cc8 	.word	0x00055cc8
   3bfe8:	00055cdc 	.word	0x00055cdc

0003bfec <_GLOBAL__sub_I__ZN13TargetTracker12_busSocketIdE>:
        PC = SP = HL = DE = BC = AF = IX = IY = 0;
   3bfec:	e3a02000 	mov	r2, #0
   3bff0:	e59f304c 	ldr	r3, [pc, #76]	; 3c044 <_GLOBAL__sub_I__ZN13TargetTracker12_busSocketIdE+0x58>
TargetBreakpoints TargetTracker::_breakpoints;
   3bff4:	e59f004c 	ldr	r0, [pc, #76]	; 3c048 <_GLOBAL__sub_I__ZN13TargetTracker12_busSocketIdE+0x5c>
   3bff8:	e5832024 	str	r2, [r3, #36]	; 0x24
   3bffc:	e5832020 	str	r2, [r3, #32]
   3c000:	e583201c 	str	r2, [r3, #28]
   3c004:	e5832018 	str	r2, [r3, #24]
   3c008:	e5832014 	str	r2, [r3, #20]
   3c00c:	e5832010 	str	r2, [r3, #16]
   3c010:	e583200c 	str	r2, [r3, #12]
   3c014:	e5832008 	str	r2, [r3, #8]
        HLDASH = DEDASH = BCDASH = AFDASH = MEMPTR = 0;
   3c018:	e5832038 	str	r2, [r3, #56]	; 0x38
   3c01c:	e5832034 	str	r2, [r3, #52]	; 0x34
   3c020:	e5832030 	str	r2, [r3, #48]	; 0x30
   3c024:	e583202c 	str	r2, [r3, #44]	; 0x2c
   3c028:	e5832028 	str	r2, [r3, #40]	; 0x28
        I = R = INTMODE = INTENABLED = VPS = 0;
   3c02c:	e583204c 	str	r2, [r3, #76]	; 0x4c
   3c030:	e5832048 	str	r2, [r3, #72]	; 0x48
   3c034:	e5832044 	str	r2, [r3, #68]	; 0x44
   3c038:	e5832040 	str	r2, [r3, #64]	; 0x40
   3c03c:	e583203c 	str	r2, [r3, #60]	; 0x3c
   3c040:	eafff84a 	b	3a170 <TargetBreakpoints::TargetBreakpoints()>
   3c044:	0009c9b4 	.word	0x0009c9b4
   3c048:	0009ca90 	.word	0x0009ca90

0003c04c <ZEsarUXInterface::commandMatch(char const*, char const*) [clone .constprop.2]>:
        else
            break;
    }
}

bool ZEsarUXInterface::commandMatch(const char* s1, const char* s2)
   3c04c:	e92d4070 	push	{r4, r5, r6, lr}
   3c050:	e1a04000 	mov	r4, r0
{
    const char* p1 = s1;
    const char* p2 = s2;
    // Skip blanks at start of received string
    while (*p1 == ' ')
   3c054:	e5d00000 	ldrb	r0, [r0]
   3c058:	e3500020 	cmp	r0, #32
   3c05c:	1a000002 	bne	3c06c <ZEsarUXInterface::commandMatch(char const*, char const*) [clone .constprop.2]+0x20>
   3c060:	e5f40001 	ldrb	r0, [r4, #1]!
   3c064:	e3500020 	cmp	r0, #32
   3c068:	0afffffc 	beq	3c060 <ZEsarUXInterface::commandMatch(char const*, char const*) [clone .constprop.2]+0x14>
   3c06c:	e2415001 	sub	r5, r1, #1
   3c070:	ea000008 	b	3c098 <ZEsarUXInterface::commandMatch(char const*, char const*) [clone .constprop.2]+0x4c>
        p1++;
    // Check match from start of received string
    while(*p1)
    {
        if (*p2 == 0)
   3c074:	e3530000 	cmp	r3, #0
   3c078:	0a00000c 	beq	3c0b0 <ZEsarUXInterface::commandMatch(char const*, char const*) [clone .constprop.2]+0x64>
        if (*p1 == 0)
        {
            // LogWrite(FromDebugger, LOG_VERBOSE, "Compare <%s> <%s> FALSE s1 shorter", s1, s2);
            return false;
        }
        if (rdtolower(*p1++) != rdtolower(*p2++))
   3c07c:	ebffa37b 	bl	24e70 <rdtolower>
   3c080:	e1a06000 	mov	r6, r0
   3c084:	e5d50000 	ldrb	r0, [r5]
   3c088:	ebffa378 	bl	24e70 <rdtolower>
   3c08c:	e1560000 	cmp	r6, r0
   3c090:	1a000010 	bne	3c0d8 <ZEsarUXInterface::commandMatch(char const*, char const*) [clone .constprop.2]+0x8c>
   3c094:	e5f40001 	ldrb	r0, [r4, #1]!
    while(*p1)
   3c098:	e3500000 	cmp	r0, #0
   3c09c:	e5f53001 	ldrb	r3, [r5, #1]!
   3c0a0:	1afffff3 	bne	3c074 <ZEsarUXInterface::commandMatch(char const*, char const*) [clone .constprop.2]+0x28>
            // LogWrite(FromDebugger, LOG_VERBOSE, "Compare <%s> <%s> FALSE no match at %d", s1, s2, p1 - s1);
            return false;
        }
    }
    // LogWrite(FromDebugger, LOG_VERBOSE, "Compare <%s> <%s> %s ", s1, s2, *p2 == 0 ? "TRUE" : "FALSE");
    return (*p2 == 0);
   3c0a4:	e16f0f13 	clz	r0, r3
   3c0a8:	e1a002a0 	lsr	r0, r0, #5
   3c0ac:	e8bd8070 	pop	{r4, r5, r6, pc}
            while (rdisspace(*p1))
   3c0b0:	e5d40000 	ldrb	r0, [r4]
   3c0b4:	ebffa355 	bl	24e10 <rdisspace>
   3c0b8:	e3500000 	cmp	r0, #0
   3c0bc:	e1a05004 	mov	r5, r4
   3c0c0:	e2844001 	add	r4, r4, #1
   3c0c4:	1afffff9 	bne	3c0b0 <ZEsarUXInterface::commandMatch(char const*, char const*) [clone .constprop.2]+0x64>
            return *p1 == 0;
   3c0c8:	e5d53000 	ldrb	r3, [r5]
   3c0cc:	e16f0f13 	clz	r0, r3
   3c0d0:	e1a002a0 	lsr	r0, r0, #5
   3c0d4:	e8bd8070 	pop	{r4, r5, r6, pc}
            return false;
   3c0d8:	e3a00000 	mov	r0, #0
}
   3c0dc:	e8bd8070 	pop	{r4, r5, r6, pc}

0003c0e0 <ZEsarUXInterface::ZEsarUXInterface()>:
    _smartloadInProgress = false;
   3c0e0:	e3a02000 	mov	r2, #0
    _pThisInstance = this;
   3c0e4:	e59f1020 	ldr	r1, [pc, #32]	; 3c10c <ZEsarUXInterface::ZEsarUXInterface()+0x2c>
    _smartloadInProgress = false;
   3c0e8:	e5c02004 	strb	r2, [r0, #4]
    _pThisInstance = this;
   3c0ec:	e5810000 	str	r0, [r1]
    _smartloadStartDetected = false;
   3c0f0:	e5c0200c 	strb	r2, [r0, #12]
    _smartloadMsgIdx = 0;
   3c0f4:	e5802008 	str	r2, [r0, #8]
    _smartloadStartUs = 0;
   3c0f8:	e5802000 	str	r2, [r0]
    _resetPending = 0;
   3c0fc:	e5c0200d 	strb	r2, [r0, #13]
    _resetPendingTimeUs = 0;
   3c100:	e5802010 	str	r2, [r0, #16]
    _stepCompletionPending = false;
   3c104:	e5c02014 	strb	r2, [r0, #20]
}
   3c108:	e12fff1e 	bx	lr
   3c10c:	000a2094 	.word	0x000a2094

0003c110 <ZEsarUXInterface::init()>:
{
   3c110:	e92d4010 	push	{r4, lr}
    if (_commsSocketId < 0)
   3c114:	e59f4018 	ldr	r4, [pc, #24]	; 3c134 <ZEsarUXInterface::init()+0x24>
   3c118:	e5943000 	ldr	r3, [r4]
   3c11c:	e3530000 	cmp	r3, #0
   3c120:	a8bd8010 	popge	{r4, pc}
        _commsSocketId = CommandHandler::commsSocketAdd(_commsSocketInfo);
   3c124:	e2840004 	add	r0, r4, #4
   3c128:	ebffaa11 	bl	26974 <CommandHandler::commsSocketAdd(CommsSocketInfo&)>
   3c12c:	e5840000 	str	r0, [r4]
}
   3c130:	e8bd8010 	pop	{r4, pc}
   3c134:	0006f500 	.word	0x0006f500

0003c138 <ZEsarUXInterface::service()>:
{
   3c138:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    if (_smartloadInProgress)
   3c13c:	e5d03004 	ldrb	r3, [r0, #4]
{
   3c140:	e24ddffe 	sub	sp, sp, #1016	; 0x3f8
    if (_smartloadInProgress)
   3c144:	e3530000 	cmp	r3, #0
{
   3c148:	e1a04000 	mov	r4, r0
    if (_smartloadInProgress)
   3c14c:	0a000029 	beq	3c1f8 <ZEsarUXInterface::service()+0xc0>
   3c150:	e59f32ac 	ldr	r3, [pc, #684]	; 3c404 <ZEsarUXInterface::service()+0x2cc>
        if (_smartloadStartDetected)
   3c154:	e5d0200c 	ldrb	r2, [r0, #12]
   3c158:	e5933000 	ldr	r3, [r3]
   3c15c:	e3520000 	cmp	r2, #0
   3c160:	e2833906 	add	r3, r3, #98304	; 0x18000
   3c164:	e5935820 	ldr	r5, [r3, #2080]	; 0x820
   3c168:	0a00002b 	beq	3c21c <ZEsarUXInterface::service()+0xe4>
            if (!CommandHandler::isFileTransferInProgress())
   3c16c:	e3550000 	cmp	r5, #0
   3c170:	0a000075 	beq	3c34c <ZEsarUXInterface::service()+0x214>
            else if (isTimeout(micros(), _smartloadStartUs, MAX_SMART_LOAD_TIME_US))
   3c174:	ebffe987 	bl	36798 <micros>
   3c178:	e59f2288 	ldr	r2, [pc, #648]	; 3c408 <ZEsarUXInterface::service()+0x2d0>
   3c17c:	e5941000 	ldr	r1, [r4]
   3c180:	ebffe999 	bl	367ec <isTimeout>
   3c184:	e3500000 	cmp	r0, #0
   3c188:	0a00001a 	beq	3c1f8 <ZEsarUXInterface::service()+0xc0>
                LogWrite(FromZEsarUXInterface, LOG_DEBUG, "Smartload timed-out");
   3c18c:	e59f2278 	ldr	r2, [pc, #632]	; 3c40c <ZEsarUXInterface::service()+0x2d4>
   3c190:	e3a01004 	mov	r1, #4
   3c194:	e59f0274 	ldr	r0, [pc, #628]	; 3c410 <ZEsarUXInterface::service()+0x2d8>
   3c198:	ebff9ff6 	bl	24178 <LogWrite>
                strlcpy(respMsg, "Smartload failed to complete in time", ZEsarUX_RESP_MAX_LEN);
   3c19c:	e28d7010 	add	r7, sp, #16
                _smartloadInProgress = false;
   3c1a0:	e3a03000 	mov	r3, #0
                strlcpy(respMsg, "Smartload failed to complete in time", ZEsarUX_RESP_MAX_LEN);
   3c1a4:	e1a00007 	mov	r0, r7
   3c1a8:	e3a02ffa 	mov	r2, #1000	; 0x3e8
   3c1ac:	e59f1260 	ldr	r1, [pc, #608]	; 3c414 <ZEsarUXInterface::service()+0x2dc>
                _smartloadInProgress = false;
   3c1b0:	e5c43004 	strb	r3, [r4, #4]
                strlcpy(respMsg, "Smartload start not detected", ZEsarUX_RESP_MAX_LEN);
   3c1b4:	eb004503 	bl	4d5c8 <strlcpy>
    strlcat(pResponse, (TargetTracker::isPaused() ? "\ncommand@cpu-step> " : "\ncommand> "), maxResponseLen);
   3c1b8:	ebfffa7f 	bl	3abbc <TargetTracker::isPaused()>
   3c1bc:	e59f3254 	ldr	r3, [pc, #596]	; 3c418 <ZEsarUXInterface::service()+0x2e0>
   3c1c0:	e3500000 	cmp	r0, #0
   3c1c4:	e59f1250 	ldr	r1, [pc, #592]	; 3c41c <ZEsarUXInterface::service()+0x2e4>
   3c1c8:	e3a02ffa 	mov	r2, #1000	; 0x3e8
   3c1cc:	11a01003 	movne	r1, r3
   3c1d0:	e1a00007 	mov	r0, r7
   3c1d4:	eb0044cb 	bl	4d508 <strlcat>
                                (const uint8_t*)respMsg, strlen(respMsg));
   3c1d8:	e1a00007 	mov	r0, r7
   3c1dc:	eb00450e 	bl	4d61c <strlen>
                CommandHandler::sendWithJSON("zesarux", "", _smartloadMsgIdx, 
   3c1e0:	e5942008 	ldr	r2, [r4, #8]
   3c1e4:	e1a03007 	mov	r3, r7
   3c1e8:	e58d0000 	str	r0, [sp]
   3c1ec:	e59f122c 	ldr	r1, [pc, #556]	; 3c420 <ZEsarUXInterface::service()+0x2e8>
   3c1f0:	e59f022c 	ldr	r0, [pc, #556]	; 3c424 <ZEsarUXInterface::service()+0x2ec>
   3c1f4:	ebffab28 	bl	26e9c <CommandHandler::sendWithJSON(char const*, char const*, unsigned long, unsigned char const*, unsigned long)>
    if (_stepCompletionPending)
   3c1f8:	e5d43014 	ldrb	r3, [r4, #20]
   3c1fc:	e3530000 	cmp	r3, #0
   3c200:	0a000003 	beq	3c214 <ZEsarUXInterface::service()+0xdc>
        return _stepMode;
    }

    static bool isStepPaused()
    {
        return (_stepMode == STEP_MODE_STEP_PAUSED);
   3c204:	e59f321c 	ldr	r3, [pc, #540]	; 3c428 <ZEsarUXInterface::service()+0x2f0>
        if (TargetTracker::isStepPaused())
   3c208:	e5d35000 	ldrb	r5, [r3]
   3c20c:	e3550000 	cmp	r5, #0
   3c210:	0a00000a 	beq	3c240 <ZEsarUXInterface::service()+0x108>
}
   3c214:	e28ddffe 	add	sp, sp, #1016	; 0x3f8
   3c218:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
            if (CommandHandler::isFileTransferInProgress())
   3c21c:	e3550000 	cmp	r5, #0
   3c220:	0a000067 	beq	3c3c4 <ZEsarUXInterface::service()+0x28c>
                LogWrite(FromZEsarUXInterface, LOG_DEBUG, "Smartload start detected");
   3c224:	e59f2200 	ldr	r2, [pc, #512]	; 3c42c <ZEsarUXInterface::service()+0x2f4>
   3c228:	e3a01004 	mov	r1, #4
   3c22c:	e59f01dc 	ldr	r0, [pc, #476]	; 3c410 <ZEsarUXInterface::service()+0x2d8>
   3c230:	ebff9fd0 	bl	24178 <LogWrite>
                _smartloadStartDetected = true;
   3c234:	e3a03001 	mov	r3, #1
   3c238:	e5c4300c 	strb	r3, [r4, #12]
   3c23c:	eaffffed 	b	3c1f8 <ZEsarUXInterface::service()+0xc0>
            uint32_t curAddr = TargetTracker::getRegs().PC;
   3c240:	e59f31e8 	ldr	r3, [pc, #488]	; 3c430 <ZEsarUXInterface::service()+0x2f8>
            uint8_t* pMirrorMemory = HwManager::getMirrorMemForAddr(0);
   3c244:	e1a00005 	mov	r0, r5
            uint32_t curAddr = TargetTracker::getRegs().PC;
   3c248:	e5938000 	ldr	r8, [r3]
            uint8_t* pMirrorMemory = HwManager::getMirrorMemForAddr(0);
   3c24c:	ebffc0b9 	bl	2c538 <HwManager::getMirrorMemForAddr(unsigned long)>
   3c250:	e1a06000 	mov	r6, r0
            strlcpy(respMsg, "", ZEsarUX_RESP_MAX_LEN);
   3c254:	e28d7010 	add	r7, sp, #16
   3c258:	e1a00007 	mov	r0, r7
   3c25c:	e3a02ffa 	mov	r2, #1000	; 0x3e8
   3c260:	e59f11b8 	ldr	r1, [pc, #440]	; 3c420 <ZEsarUXInterface::service()+0x2e8>
   3c264:	eb0044d7 	bl	4d5c8 <strlcpy>
            if (pMirrorMemory)
   3c268:	e3560000 	cmp	r6, #0
   3c26c:	0a000022 	beq	3c2fc <ZEsarUXInterface::service()+0x1c4>
                disasmZ80(pMirrorMemory, 0, curAddr, respMsg, INTEL, false, true);
   3c270:	e3a03001 	mov	r3, #1
   3c274:	e1a01005 	mov	r1, r5
   3c278:	e58d5004 	str	r5, [sp, #4]
   3c27c:	e58d5000 	str	r5, [sp]
   3c280:	e1a02008 	mov	r2, r8
   3c284:	e58d3008 	str	r3, [sp, #8]
   3c288:	e1a00006 	mov	r0, r6
   3c28c:	e1a03007 	mov	r3, r7
   3c290:	ebffb17d 	bl	2888c <disasmZ80(unsigned char*, unsigned long, unsigned long, char*, int, int, int)>
    int txtLen = strlen(pText);
   3c294:	e1a00007 	mov	r0, r7
   3c298:	eb0044df 	bl	4d61c <strlen>
    for (int i = 0; i < txtLen; i++)
   3c29c:	e2505000 	subs	r5, r0, #0
   3c2a0:	0a000015 	beq	3c2fc <ZEsarUXInterface::service()+0x1c4>
   3c2a4:	e1a06007 	mov	r6, r7
   3c2a8:	e0878005 	add	r8, r7, r5
        pText[i] = rdtoupper(pText[i]);
   3c2ac:	e5d60000 	ldrb	r0, [r6]
   3c2b0:	ebffa2f3 	bl	24e84 <rdtoupper>
   3c2b4:	e4c60001 	strb	r0, [r6], #1
    for (int i = 0; i < txtLen; i++)
   3c2b8:	e1580006 	cmp	r8, r6
   3c2bc:	1afffffa 	bne	3c2ac <ZEsarUXInterface::service()+0x174>
    for (int i = txtLen-1; i > 0; i--)
   3c2c0:	e3550001 	cmp	r5, #1
   3c2c4:	da00000c 	ble	3c2fc <ZEsarUXInterface::service()+0x1c4>
            pText[i] = 0;
   3c2c8:	e3a08000 	mov	r8, #0
   3c2cc:	e0875005 	add	r5, r7, r5
   3c2d0:	e2876001 	add	r6, r7, #1
        if (rdisspace(pText[i]) || (pText[i] == ';'))
   3c2d4:	e5550001 	ldrb	r0, [r5, #-1]
   3c2d8:	ebffa2cc 	bl	24e10 <rdisspace>
   3c2dc:	e3500000 	cmp	r0, #0
   3c2e0:	1a000002 	bne	3c2f0 <ZEsarUXInterface::service()+0x1b8>
   3c2e4:	e5553001 	ldrb	r3, [r5, #-1]
   3c2e8:	e353003b 	cmp	r3, #59	; 0x3b
   3c2ec:	1a000002 	bne	3c2fc <ZEsarUXInterface::service()+0x1c4>
            pText[i] = 0;
   3c2f0:	e5658001 	strb	r8, [r5, #-1]!
    for (int i = txtLen-1; i > 0; i--)
   3c2f4:	e1550006 	cmp	r5, r6
   3c2f8:	1afffff5 	bne	3c2d4 <ZEsarUXInterface::service()+0x19c>
    strlcat(pResponse, (TargetTracker::isPaused() ? "\ncommand@cpu-step> " : "\ncommand> "), maxResponseLen);
   3c2fc:	ebfffa2e 	bl	3abbc <TargetTracker::isPaused()>
   3c300:	e59f3110 	ldr	r3, [pc, #272]	; 3c418 <ZEsarUXInterface::service()+0x2e0>
   3c304:	e3500000 	cmp	r0, #0
   3c308:	e59f110c 	ldr	r1, [pc, #268]	; 3c41c <ZEsarUXInterface::service()+0x2e4>
   3c30c:	e3a02ffa 	mov	r2, #1000	; 0x3e8
   3c310:	11a01003 	movne	r1, r3
   3c314:	e1a00007 	mov	r0, r7
   3c318:	eb00447a 	bl	4d508 <strlcat>
                            (const uint8_t*)respMsg, strlen(respMsg));
   3c31c:	e1a00007 	mov	r0, r7
   3c320:	eb0044bd 	bl	4d61c <strlen>
            CommandHandler::sendWithJSON("zesarux", "", _smartloadMsgIdx, 
   3c324:	e5942008 	ldr	r2, [r4, #8]
   3c328:	e1a03007 	mov	r3, r7
   3c32c:	e58d0000 	str	r0, [sp]
   3c330:	e59f10e8 	ldr	r1, [pc, #232]	; 3c420 <ZEsarUXInterface::service()+0x2e8>
   3c334:	e59f00e8 	ldr	r0, [pc, #232]	; 3c424 <ZEsarUXInterface::service()+0x2ec>
   3c338:	ebffaad7 	bl	26e9c <CommandHandler::sendWithJSON(char const*, char const*, unsigned long, unsigned char const*, unsigned long)>
            _stepCompletionPending = false;
   3c33c:	e3a03000 	mov	r3, #0
   3c340:	e5c43014 	strb	r3, [r4, #20]
}
   3c344:	e28ddffe 	add	sp, sp, #1016	; 0x3f8
   3c348:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
                strlcpy(respMsg, "Smartload OK", ZEsarUX_RESP_MAX_LEN);
   3c34c:	e28d7010 	add	r7, sp, #16
                LogWrite(FromZEsarUXInterface, LOG_DEBUG, "Smartload completed");
   3c350:	e59f20dc 	ldr	r2, [pc, #220]	; 3c434 <ZEsarUXInterface::service()+0x2fc>
   3c354:	e3a01004 	mov	r1, #4
   3c358:	e59f00b0 	ldr	r0, [pc, #176]	; 3c410 <ZEsarUXInterface::service()+0x2d8>
   3c35c:	ebff9f85 	bl	24178 <LogWrite>
                strlcpy(respMsg, "Smartload OK", ZEsarUX_RESP_MAX_LEN);
   3c360:	e3a02ffa 	mov	r2, #1000	; 0x3e8
   3c364:	e59f10cc 	ldr	r1, [pc, #204]	; 3c438 <ZEsarUXInterface::service()+0x300>
                _smartloadInProgress = false;
   3c368:	e5c45004 	strb	r5, [r4, #4]
                strlcpy(respMsg, "Smartload OK", ZEsarUX_RESP_MAX_LEN);
   3c36c:	e1a00007 	mov	r0, r7
   3c370:	eb004494 	bl	4d5c8 <strlcpy>
    strlcat(pResponse, (TargetTracker::isPaused() ? "\ncommand@cpu-step> " : "\ncommand> "), maxResponseLen);
   3c374:	ebfffa10 	bl	3abbc <TargetTracker::isPaused()>
   3c378:	e59f3098 	ldr	r3, [pc, #152]	; 3c418 <ZEsarUXInterface::service()+0x2e0>
   3c37c:	e3500000 	cmp	r0, #0
   3c380:	e59f1094 	ldr	r1, [pc, #148]	; 3c41c <ZEsarUXInterface::service()+0x2e4>
   3c384:	e3a02ffa 	mov	r2, #1000	; 0x3e8
   3c388:	11a01003 	movne	r1, r3
   3c38c:	e1a00007 	mov	r0, r7
   3c390:	eb00445c 	bl	4d508 <strlcat>
                                (const uint8_t*)respMsg, strlen(respMsg));
   3c394:	e1a00007 	mov	r0, r7
   3c398:	eb00449f 	bl	4d61c <strlen>
                CommandHandler::sendWithJSON("zesarux", "", _smartloadMsgIdx, 
   3c39c:	e5942008 	ldr	r2, [r4, #8]
   3c3a0:	e1a03007 	mov	r3, r7
   3c3a4:	e58d0000 	str	r0, [sp]
   3c3a8:	e59f1070 	ldr	r1, [pc, #112]	; 3c420 <ZEsarUXInterface::service()+0x2e8>
   3c3ac:	e59f0070 	ldr	r0, [pc, #112]	; 3c424 <ZEsarUXInterface::service()+0x2ec>
   3c3b0:	ebffaab9 	bl	26e9c <CommandHandler::sendWithJSON(char const*, char const*, unsigned long, unsigned char const*, unsigned long)>
                McManager::handleTargetProgram(true);
   3c3b4:	e3a00001 	mov	r0, #1
   3c3b8:	ebffc8b2 	bl	2e688 <McManager::handleTargetProgram(bool)>
                TargetTracker::completeTargetProgram();
   3c3bc:	ebfffbe2 	bl	3b34c <TargetTracker::completeTargetProgram()>
   3c3c0:	eaffff8c 	b	3c1f8 <ZEsarUXInterface::service()+0xc0>
            else if (isTimeout(micros(), _smartloadStartUs, MAX_TIME_BEFORE_START_DETECT_US))
   3c3c4:	ebffe8f3 	bl	36798 <micros>
   3c3c8:	e59f206c 	ldr	r2, [pc, #108]	; 3c43c <ZEsarUXInterface::service()+0x304>
   3c3cc:	e5941000 	ldr	r1, [r4]
   3c3d0:	ebffe905 	bl	367ec <isTimeout>
   3c3d4:	e3500000 	cmp	r0, #0
   3c3d8:	0affff86 	beq	3c1f8 <ZEsarUXInterface::service()+0xc0>
                LogWrite(FromZEsarUXInterface, LOG_DEBUG, "Smartload start not detected");
   3c3dc:	e59f205c 	ldr	r2, [pc, #92]	; 3c440 <ZEsarUXInterface::service()+0x308>
   3c3e0:	e3a01004 	mov	r1, #4
   3c3e4:	e59f0024 	ldr	r0, [pc, #36]	; 3c410 <ZEsarUXInterface::service()+0x2d8>
                strlcpy(respMsg, "Smartload start not detected", ZEsarUX_RESP_MAX_LEN);
   3c3e8:	e28d7010 	add	r7, sp, #16
                LogWrite(FromZEsarUXInterface, LOG_DEBUG, "Smartload start not detected");
   3c3ec:	ebff9f61 	bl	24178 <LogWrite>
                _smartloadInProgress = false;
   3c3f0:	e5c45004 	strb	r5, [r4, #4]
                strlcpy(respMsg, "Smartload start not detected", ZEsarUX_RESP_MAX_LEN);
   3c3f4:	e1a00007 	mov	r0, r7
   3c3f8:	e3a02ffa 	mov	r2, #1000	; 0x3e8
   3c3fc:	e59f103c 	ldr	r1, [pc, #60]	; 3c440 <ZEsarUXInterface::service()+0x308>
   3c400:	eaffff6b 	b	3c1b4 <ZEsarUXInterface::service()+0x7c>
   3c404:	0006fca4 	.word	0x0006fca4
   3c408:	003d0900 	.word	0x003d0900
   3c40c:	00055d40 	.word	0x00055d40
   3c410:	00055ce0 	.word	0x00055ce0
   3c414:	00055d54 	.word	0x00055d54
   3c418:	00055cf4 	.word	0x00055cf4
   3c41c:	00055d08 	.word	0x00055d08
   3c420:	00053e00 	.word	0x00053e00
   3c424:	00055d38 	.word	0x00055d38
   3c428:	0009c9b8 	.word	0x0009c9b8
   3c42c:	00055d7c 	.word	0x00055d7c
   3c430:	0009c9bc 	.word	0x0009c9bc
   3c434:	00055d14 	.word	0x00055d14
   3c438:	00055d28 	.word	0x00055d28
   3c43c:	000f4240 	.word	0x000f4240
   3c440:	00055d98 	.word	0x00055d98

0003c444 <ZEsarUXInterface::addPromptMsg(char*, int)>:
{
   3c444:	e92d4070 	push	{r4, r5, r6, lr}
   3c448:	e1a04001 	mov	r4, r1
   3c44c:	e1a05002 	mov	r5, r2
    strlcat(pResponse, (TargetTracker::isPaused() ? "\ncommand@cpu-step> " : "\ncommand> "), maxResponseLen);
   3c450:	ebfff9d9 	bl	3abbc <TargetTracker::isPaused()>
   3c454:	e59f3018 	ldr	r3, [pc, #24]	; 3c474 <ZEsarUXInterface::addPromptMsg(char*, int)+0x30>
   3c458:	e3500000 	cmp	r0, #0
   3c45c:	e59f1014 	ldr	r1, [pc, #20]	; 3c478 <ZEsarUXInterface::addPromptMsg(char*, int)+0x34>
   3c460:	e1a02005 	mov	r2, r5
   3c464:	e1a00004 	mov	r0, r4
}
   3c468:	e8bd4070 	pop	{r4, r5, r6, lr}
    strlcat(pResponse, (TargetTracker::isPaused() ? "\ncommand@cpu-step> " : "\ncommand> "), maxResponseLen);
   3c46c:	01a01003 	moveq	r1, r3
   3c470:	ea004424 	b	4d508 <strlcat>
   3c474:	00055d08 	.word	0x00055d08
   3c478:	00055cf4 	.word	0x00055cf4

0003c47c <ZEsarUXInterface::mungeDisassembly(char*)>:
{
   3c47c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    int txtLen = strlen(pText);
   3c480:	e1a00001 	mov	r0, r1
{
   3c484:	e1a06001 	mov	r6, r1
    int txtLen = strlen(pText);
   3c488:	eb004463 	bl	4d61c <strlen>
    for (int i = 0; i < txtLen; i++)
   3c48c:	e2504000 	subs	r4, r0, #0
   3c490:	0a000006 	beq	3c4b0 <ZEsarUXInterface::mungeDisassembly(char*)+0x34>
   3c494:	e2465001 	sub	r5, r6, #1
   3c498:	e0857004 	add	r7, r5, r4
        pText[i] = rdtoupper(pText[i]);
   3c49c:	e5f50001 	ldrb	r0, [r5, #1]!
   3c4a0:	ebffa277 	bl	24e84 <rdtoupper>
    for (int i = 0; i < txtLen; i++)
   3c4a4:	e1550007 	cmp	r5, r7
        pText[i] = rdtoupper(pText[i]);
   3c4a8:	e5c50000 	strb	r0, [r5]
    for (int i = 0; i < txtLen; i++)
   3c4ac:	1afffffa 	bne	3c49c <ZEsarUXInterface::mungeDisassembly(char*)+0x20>
    for (int i = txtLen-1; i > 0; i--)
   3c4b0:	e2444001 	sub	r4, r4, #1
   3c4b4:	e3540000 	cmp	r4, #0
   3c4b8:	d8bd81f0 	pople	{r4, r5, r6, r7, r8, pc}
            pText[i] = 0;
   3c4bc:	e3a05000 	mov	r5, #0
   3c4c0:	e0864004 	add	r4, r6, r4
        if (rdisspace(pText[i]) || (pText[i] == ';'))
   3c4c4:	e5d40000 	ldrb	r0, [r4]
   3c4c8:	ebffa250 	bl	24e10 <rdisspace>
   3c4cc:	e3500000 	cmp	r0, #0
   3c4d0:	1a000002 	bne	3c4e0 <ZEsarUXInterface::mungeDisassembly(char*)+0x64>
   3c4d4:	e5d43000 	ldrb	r3, [r4]
   3c4d8:	e353003b 	cmp	r3, #59	; 0x3b
   3c4dc:	18bd81f0 	popne	{r4, r5, r6, r7, r8, pc}
            pText[i] = 0;
   3c4e0:	e4445001 	strb	r5, [r4], #-1
    for (int i = txtLen-1; i > 0; i--)
   3c4e4:	e1560004 	cmp	r6, r4
   3c4e8:	1afffff5 	bne	3c4c4 <ZEsarUXInterface::mungeDisassembly(char*)+0x48>
   3c4ec:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

0003c4f0 <ZEsarUXInterface::handleLine(char*, char*, int, unsigned long)>:
{
   3c4f0:	e1a0c001 	mov	ip, r1
   3c4f4:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3c4f8:	e24dde43 	sub	sp, sp, #1072	; 0x430
   3c4fc:	e24dd00c 	sub	sp, sp, #12
   3c500:	e58d0014 	str	r0, [sp, #20]
    const char* cmdStr = strtok(pCmd, " ");
   3c504:	e59f1dc8 	ldr	r1, [pc, #3528]	; 3d2d4 <ZEsarUXInterface::handleLine(char*, char*, int, unsigned long)+0xde4>
   3c508:	e1a0000c 	mov	r0, ip
{
   3c50c:	e1a06002 	mov	r6, r2
   3c510:	e1a07003 	mov	r7, r3
    const char* cmdStr = strtok(pCmd, " ");
   3c514:	eb0046ba 	bl	4e004 <strtok>
    char* argStr = strtok(NULL, " ");
   3c518:	e59f1db4 	ldr	r1, [pc, #3508]	; 3d2d4 <ZEsarUXInterface::handleLine(char*, char*, int, unsigned long)+0xde4>
    const char* cmdStr = strtok(pCmd, " ");
   3c51c:	e1a05000 	mov	r5, r0
    char* argStr = strtok(NULL, " ");
   3c520:	e3a00000 	mov	r0, #0
   3c524:	eb0046b6 	bl	4e004 <strtok>
    char* argStr2 = strtok(NULL, " ");
   3c528:	e59f1da4 	ldr	r1, [pc, #3492]	; 3d2d4 <ZEsarUXInterface::handleLine(char*, char*, int, unsigned long)+0xde4>
    char* argStr = strtok(NULL, " ");
   3c52c:	e1a08000 	mov	r8, r0
    char* argStr2 = strtok(NULL, " ");
   3c530:	e3a00000 	mov	r0, #0
   3c534:	eb0046b2 	bl	4e004 <strtok>
    char* argRest = strtok(NULL, "");
   3c538:	e59f1d98 	ldr	r1, [pc, #3480]	; 3d2d8 <ZEsarUXInterface::handleLine(char*, char*, int, unsigned long)+0xde8>
    char* argStr2 = strtok(NULL, " ");
   3c53c:	e58d0018 	str	r0, [sp, #24]
    char* argRest = strtok(NULL, "");
   3c540:	e3a00000 	mov	r0, #0
   3c544:	eb0046ae 	bl	4e004 <strtok>
    if (cmdStr == NULL)
   3c548:	e3550000 	cmp	r5, #0
    char* argRest = strtok(NULL, "");
   3c54c:	e58d001c 	str	r0, [sp, #28]
    if (cmdStr == NULL)
   3c550:	0a00005c 	beq	3c6c8 <ZEsarUXInterface::handleLine(char*, char*, int, unsigned long)+0x1d8>
    while (*p1 == ' ')
   3c554:	e5d50000 	ldrb	r0, [r5]
   3c558:	e1a04005 	mov	r4, r5
   3c55c:	e3500020 	cmp	r0, #32
   3c560:	1a000002 	bne	3c570 <ZEsarUXInterface::handleLine(char*, char*, int, unsigned long)+0x80>
   3c564:	e5f40001 	ldrb	r0, [r4, #1]!
   3c568:	e3500020 	cmp	r0, #32
   3c56c:	0afffffc 	beq	3c564 <ZEsarUXInterface::handleLine(char*, char*, int, unsigned long)+0x74>
   3c570:	e59fbd64 	ldr	fp, [pc, #3428]	; 3d2dc <ZEsarUXInterface::handleLine(char*, char*, int, unsigned long)+0xdec>
   3c574:	ea000008 	b	3c59c <ZEsarUXInterface::handleLine(char*, char*, int, unsigned long)+0xac>
        if (*p2 == 0)
   3c578:	e35a0000 	cmp	sl, #0
   3c57c:	0a00001e 	beq	3c5fc <ZEsarUXInterface::handleLine(char*, char*, int, unsigned long)+0x10c>
        if (rdtolower(*p1++) != rdtolower(*p2++))
   3c580:	ebffa23a 	bl	24e70 <rdtolower>
   3c584:	e1a09000 	mov	r9, r0
   3c588:	e1a0000a 	mov	r0, sl
   3c58c:	ebffa237 	bl	24e70 <rdtolower>
   3c590:	e1590000 	cmp	r9, r0
   3c594:	1a000023 	bne	3c628 <ZEsarUXInterface::handleLine(char*, char*, int, unsigned long)+0x138>
   3c598:	e5f40001 	ldrb	r0, [r4, #1]!
    while(*p1)
   3c59c:	e3500000 	cmp	r0, #0
   3c5a0:	e5fba001 	ldrb	sl, [fp, #1]!
   3c5a4:	1afffff3 	bne	3c578 <ZEsarUXInterface::handleLine(char*, char*, int, unsigned long)+0x88>
    return (*p2 == 0);
   3c5a8:	e16f3f1a 	clz	r3, sl
   3c5ac:	e1a032a3 	lsr	r3, r3, #5
    if (commandMatch(cmdStr, "about"))
   3c5b0:	e3530000 	cmp	r3, #0
   3c5b4:	0a00001b 	beq	3c628 <ZEsarUXInterface::handleLine(char*, char*, int, unsigned long)+0x138>
        strlcat(pResponse, "BusRaider RCP", maxResponseLen);
   3c5b8:	e1a02007 	mov	r2, r7
   3c5bc:	e59f1d1c 	ldr	r1, [pc, #3356]	; 3d2e0 <ZEsarUXInterface::handleLine(char*, char*, int, unsigned long)+0xdf0>
   3c5c0:	e1a00006 	mov	r0, r6
   3c5c4:	eb0043cf 	bl	4d508 <strlcat>
    strlcat(pResponse, (TargetTracker::isPaused() ? "\ncommand@cpu-step> " : "\ncommand> "), maxResponseLen);
   3c5c8:	ebfff97b 	bl	3abbc <TargetTracker::isPaused()>
   3c5cc:	e59f3d10 	ldr	r3, [pc, #3344]	; 3d2e4 <ZEsarUXInterface::handleLine(char*, char*, int, unsigned long)+0xdf4>
   3c5d0:	e3500000 	cmp	r0, #0
   3c5d4:	e59f1d0c 	ldr	r1, [pc, #3340]	; 3d2e8 <ZEsarUXInterface::handleLine(char*, char*, int, unsigned long)+0xdf8>
   3c5d8:	e1a02007 	mov	r2, r7
   3c5dc:	11a01003 	movne	r1, r3
   3c5e0:	e1a00006 	mov	r0, r6
   3c5e4:	eb0043c7 	bl	4d508 <strlcat>
    return false;
   3c5e8:	e3a04000 	mov	r4, #0
}
   3c5ec:	e1a00004 	mov	r0, r4
   3c5f0:	e28dde43 	add	sp, sp, #1072	; 0x430
   3c5f4:	e28dd00c 	add	sp, sp, #12
   3c5f8:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
            while (rdisspace(*p1))
   3c5fc:	e5d40000 	ldrb	r0, [r4]
   3c600:	ebffa202 	bl	24e10 <rdisspace>
   3c604:	e3500000 	cmp	r0, #0
   3c608:	e1a0a004 	mov	sl, r4
   3c60c:	e2844001 	add	r4, r4, #1
   3c610:	1afffff9 	bne	3c5fc <ZEsarUXInterface::handleLine(char*, char*, int, unsigned long)+0x10c>
            return *p1 == 0;
   3c614:	e5da3000 	ldrb	r3, [sl]
   3c618:	e16f3f13 	clz	r3, r3
   3c61c:	e1a032a3 	lsr	r3, r3, #5
    if (commandMatch(cmdStr, "about"))
   3c620:	e3530000 	cmp	r3, #0
   3c624:	1affffe3 	bne	3c5b8 <ZEsarUXInterface::handleLine(char*, char*, int, unsigned long)+0xc8>
    while (*p1 == ' ')
   3c628:	e5d50000 	ldrb	r0, [r5]
   3c62c:	e1a04005 	mov	r4, r5
   3c630:	e3500020 	cmp	r0, #32
   3c634:	1a000002 	bne	3c644 <ZEsarUXInterface::handleLine(char*, char*, int, unsigned long)+0x154>
   3c638:	e5f40001 	ldrb	r0, [r4, #1]!
   3c63c:	e3500020 	cmp	r0, #32
   3c640:	0afffffc 	beq	3c638 <ZEsarUXInterface::handleLine(char*, char*, int, unsigned long)+0x148>
   3c644:	e59fbca0 	ldr	fp, [pc, #3232]	; 3d2ec <ZEsarUXInterface::handleLine(char*, char*, int, unsigned long)+0xdfc>
   3c648:	ea000008 	b	3c670 <ZEsarUXInterface::handleLine(char*, char*, int, unsigned long)+0x180>
        if (*p2 == 0)
   3c64c:	e35a0000 	cmp	sl, #0
   3c650:	0a000012 	beq	3c6a0 <ZEsarUXInterface::handleLine(char*, char*, int, unsigned long)+0x1b0>
        if (rdtolower(*p1++) != rdtolower(*p2++))
   3c654:	ebffa205 	bl	24e70 <rdtolower>
   3c658:	e1a09000 	mov	r9, r0
   3c65c:	e1a0000a 	mov	r0, sl
   3c660:	ebffa202 	bl	24e70 <rdtolower>
   3c664:	e1590000 	cmp	r9, r0
   3c668:	1a00001a 	bne	3c6d8 <ZEsarUXInterface::handleLine(char*, char*, int, unsigned long)+0x1e8>
   3c66c:	e5f40001 	ldrb	r0, [r4, #1]!
    while(*p1)
   3c670:	e3500000 	cmp	r0, #0
   3c674:	e5fba001 	ldrb	sl, [fp, #1]!
   3c678:	1afffff3 	bne	3c64c <ZEsarUXInterface::handleLine(char*, char*, int, unsigned long)+0x15c>
    return (*p2 == 0);
   3c67c:	e16f3f1a 	clz	r3, sl
   3c680:	e1a032a3 	lsr	r3, r3, #5
    else if (commandMatch(cmdStr, "get-version"))
   3c684:	e3530000 	cmp	r3, #0
   3c688:	0a000012 	beq	3c6d8 <ZEsarUXInterface::handleLine(char*, char*, int, unsigned long)+0x1e8>
        strlcat(pResponse, "7.2-SN", maxResponseLen);
   3c68c:	e1a02007 	mov	r2, r7
   3c690:	e59f1c58 	ldr	r1, [pc, #3160]	; 3d2f0 <ZEsarUXInterface::handleLine(char*, char*, int, unsigned long)+0xe00>
   3c694:	e1a00006 	mov	r0, r6
   3c698:	eb00439a 	bl	4d508 <strlcat>
   3c69c:	eaffffc9 	b	3c5c8 <ZEsarUXInterface::handleLine(char*, char*, int, unsigned long)+0xd8>
            while (rdisspace(*p1))
   3c6a0:	e5d40000 	ldrb	r0, [r4]
   3c6a4:	ebffa1d9 	bl	24e10 <rdisspace>
   3c6a8:	e3500000 	cmp	r0, #0
   3c6ac:	e1a0a004 	mov	sl, r4
   3c6b0:	e2844001 	add	r4, r4, #1
   3c6b4:	1afffff9 	bne	3c6a0 <ZEsarUXInterface::handleLine(char*, char*, int, unsigned long)+0x1b0>
            return *p1 == 0;
   3c6b8:	e5da3000 	ldrb	r3, [sl]
   3c6bc:	e16f3f13 	clz	r3, r3
   3c6c0:	e1a032a3 	lsr	r3, r3, #5
   3c6c4:	eaffffee 	b	3c684 <ZEsarUXInterface::handleLine(char*, char*, int, unsigned long)+0x194>
        cmdStr = "\n";
   3c6c8:	e59f5c24 	ldr	r5, [pc, #3108]	; 3d2f4 <ZEsarUXInterface::handleLine(char*, char*, int, unsigned long)+0xe04>
   3c6cc:	e3a0000a 	mov	r0, #10
   3c6d0:	e1a04005 	mov	r4, r5
   3c6d4:	eaffffa5 	b	3c570 <ZEsarUXInterface::handleLine(char*, char*, int, unsigned long)+0x80>
    while (*p1 == ' ')
   3c6d8:	e5d50000 	ldrb	r0, [r5]
   3c6dc:	e1a04005 	mov	r4, r5
   3c6e0:	e3500020 	cmp	r0, #32
   3c6e4:	1a000002 	bne	3c6f4 <ZEsarUXInterface::handleLine(char*, char*, int, unsigned long)+0x204>
   3c6e8:	e5f40001 	ldrb	r0, [r4, #1]!
   3c6ec:	e3500020 	cmp	r0, #32
   3c6f0:	0afffffc 	beq	3c6e8 <ZEsarUXInterface::handleLine(char*, char*, int, unsigned long)+0x1f8>
   3c6f4:	e59fbbfc 	ldr	fp, [pc, #3068]	; 3d2f8 <ZEsarUXInterface::handleLine(char*, char*, int, unsigned long)+0xe08>
   3c6f8:	ea000008 	b	3c720 <ZEsarUXInterface::handleLine(char*, char*, int, unsigned long)+0x230>
        if (*p2 == 0)
   3c6fc:	e35a0000 	cmp	sl, #0
   3c700:	0a000012 	beq	3c750 <ZEsarUXInterface::handleLine(char*, char*, int, unsigned long)+0x260>
        if (rdtolower(*p1++) != rdtolower(*p2++))
   3c704:	ebffa1d9 	bl	24e70 <rdtolower>
   3c708:	e1a09000 	mov	r9, r0
   3c70c:	e1a0000a 	mov	r0, sl
   3c710:	ebffa1d6 	bl	24e70 <rdtolower>
   3c714:	e1590000 	cmp	r9, r0
   3c718:	1a000016 	bne	3c778 <ZEsarUXInterface::handleLine(char*, char*, int, unsigned long)+0x288>
   3c71c:	e5f40001 	ldrb	r0, [r4, #1]!
    while(*p1)
   3c720:	e3500000 	cmp	r0, #0
   3c724:	e5fba001 	ldrb	sl, [fp, #1]!
   3c728:	1afffff3 	bne	3c6fc <ZEsarUXInterface::handleLine(char*, char*, int, unsigned long)+0x20c>
    return (*p2 == 0);
   3c72c:	e16f3f1a 	clz	r3, sl
   3c730:	e1a032a3 	lsr	r3, r3, #5
    else if (commandMatch(cmdStr, "check-extensions"))
   3c734:	e3530000 	cmp	r3, #0
   3c738:	0a00000e 	beq	3c778 <ZEsarUXInterface::handleLine(char*, char*, int, unsigned long)+0x288>
        strlcat(pResponse, "Extensions available.", maxResponseLen);
   3c73c:	e1a02007 	mov	r2, r7
   3c740:	e59f1bb4 	ldr	r1, [pc, #2996]	; 3d2fc <ZEsarUXInterface::handleLine(char*, char*, int, unsigned long)+0xe0c>
   3c744:	e1a00006 	mov	r0, r6
   3c748:	eb00436e 	bl	4d508 <strlcat>
   3c74c:	eaffff9d 	b	3c5c8 <ZEsarUXInterface::handleLine(char*, char*, int, unsigned long)+0xd8>
            while (rdisspace(*p1))
   3c750:	e5d40000 	ldrb	r0, [r4]
   3c754:	ebffa1ad 	bl	24e10 <rdisspace>
   3c758:	e3500000 	cmp	r0, #0
   3c75c:	e1a0a004 	mov	sl, r4
   3c760:	e2844001 	add	r4, r4, #1
   3c764:	1afffff9 	bne	3c750 <ZEsarUXInterface::handleLine(char*, char*, int, unsigned long)+0x260>
            return *p1 == 0;
   3c768:	e5da3000 	ldrb	r3, [sl]
   3c76c:	e16f3f13 	clz	r3, r3
   3c770:	e1a032a3 	lsr	r3, r3, #5
   3c774:	eaffffee 	b	3c734 <ZEsarUXInterface::handleLine(char*, char*, int, unsigned long)+0x244>
    while (*p1 == ' ')
   3c778:	e5d50000 	ldrb	r0, [r5]
   3c77c:	e1a04005 	mov	r4, r5
   3c780:	e3500020 	cmp	r0, #32
   3c784:	1a000002 	bne	3c794 <ZEsarUXInterface::handleLine(char*, char*, int, unsigned long)+0x2a4>
   3c788:	e5f40001 	ldrb	r0, [r4, #1]!
   3c78c:	e3500020 	cmp	r0, #32
   3c790:	0afffffc 	beq	3c788 <ZEsarUXInterface::handleLine(char*, char*, int, unsigned long)+0x298>
   3c794:	e59fab64 	ldr	sl, [pc, #2916]	; 3d300 <ZEsarUXInterface::handleLine(char*, char*, int, unsigned long)+0xe10>
   3c798:	ea000008 	b	3c7c0 <ZEsarUXInterface::handleLine(char*, char*, int, unsigned long)+0x2d0>
        if (*p2 == 0)
   3c79c:	e35b0000 	cmp	fp, #0
   3c7a0:	0a00001d 	beq	3c81c <ZEsarUXInterface::handleLine(char*, char*, int, unsigned long)+0x32c>
        if (rdtolower(*p1++) != rdtolower(*p2++))
   3c7a4:	ebffa1b1 	bl	24e70 <rdtolower>
   3c7a8:	e1a09000 	mov	r9, r0
   3c7ac:	e1a0000b 	mov	r0, fp
   3c7b0:	ebffa1ae 	bl	24e70 <rdtolower>
   3c7b4:	e1590000 	cmp	r9, r0
   3c7b8:	1a000021 	bne	3c844 <ZEsarUXInterface::handleLine(char*, char*, int, unsigned long)+0x354>
   3c7bc:	e5f40001 	ldrb	r0, [r4, #1]!
    while(*p1)
   3c7c0:	e3500000 	cmp	r0, #0
   3c7c4:	e5fab001 	ldrb	fp, [sl, #1]!
   3c7c8:	1afffff3 	bne	3c79c <ZEsarUXInterface::handleLine(char*, char*, int, unsigned long)+0x2ac>
    return (*p2 == 0);
   3c7cc:	e16f3f1b 	clz	r3, fp
   3c7d0:	e1a032a3 	lsr	r3, r3, #5
    else if (commandMatch(cmdStr, "get-current-machine"))
   3c7d4:	e3530000 	cmp	r3, #0
   3c7d8:	0a000019 	beq	3c844 <ZEsarUXInterface::handleLine(char*, char*, int, unsigned long)+0x354>
        strlcpy(machineNameMunged, McManager::getDescriptorTable()->machineName, MAX_MACHINE_NAME_LEN);
   3c7dc:	ebffc559 	bl	2dd48 <McManager::getDescriptorTable()>
   3c7e0:	e28d4038 	add	r4, sp, #56	; 0x38
   3c7e4:	e5901000 	ldr	r1, [r0]
   3c7e8:	e3a020c8 	mov	r2, #200	; 0xc8
   3c7ec:	e1a00004 	mov	r0, r4
   3c7f0:	eb004374 	bl	4d5c8 <strlcpy>
        if (strcasecmp(machineNameMunged, "ZX Spectrum") == 0)
   3c7f4:	e1a00004 	mov	r0, r4
   3c7f8:	e59f1b04 	ldr	r1, [pc, #2820]	; 3d304 <ZEsarUXInterface::handleLine(char*, char*, int, unsigned long)+0xe14>
   3c7fc:	eb0041e2 	bl	4cf8c <strcasecmp>
   3c800:	e3500000 	cmp	r0, #0
   3c804:	0a00009d 	beq	3ca80 <ZEsarUXInterface::handleLine(char*, char*, int, unsigned long)+0x590>
        strlcat(pResponse, machineNameMunged, maxResponseLen);
   3c808:	e1a01004 	mov	r1, r4
   3c80c:	e1a02007 	mov	r2, r7
   3c810:	e1a00006 	mov	r0, r6
   3c814:	eb00433b 	bl	4d508 <strlcat>
   3c818:	eaffff6a 	b	3c5c8 <ZEsarUXInterface::handleLine(char*, char*, int, unsigned long)+0xd8>
            while (rdisspace(*p1))
   3c81c:	e5d40000 	ldrb	r0, [r4]
   3c820:	ebffa17a 	bl	24e10 <rdisspace>
   3c824:	e3500000 	cmp	r0, #0
   3c828:	e1a0b004 	mov	fp, r4
   3c82c:	e2844001 	add	r4, r4, #1
   3c830:	1afffff9 	bne	3c81c <ZEsarUXInterface::handleLine(char*, char*, int, unsigned long)+0x32c>
            return *p1 == 0;
   3c834:	e5db3000 	ldrb	r3, [fp]
   3c838:	e16f3f13 	clz	r3, r3
   3c83c:	e1a032a3 	lsr	r3, r3, #5
   3c840:	eaffffe3 	b	3c7d4 <ZEsarUXInterface::handleLine(char*, char*, int, unsigned long)+0x2e4>
    while (*p1 == ' ')
   3c844:	e5d50000 	ldrb	r0, [r5]
   3c848:	e1a04005 	mov	r4, r5
   3c84c:	e3500020 	cmp	r0, #32
   3c850:	1a000002 	bne	3c860 <ZEsarUXInterface::handleLine(char*, char*, int, unsigned long)+0x370>
   3c854:	e5f40001 	ldrb	r0, [r4, #1]!
   3c858:	e3500020 	cmp	r0, #32
   3c85c:	0afffffc 	beq	3c854 <ZEsarUXInterface::handleLine(char*, char*, int, unsigned long)+0x364>
   3c860:	e59f2aa0 	ldr	r2, [pc, #2720]	; 3d308 <ZEsarUXInterface::handleLine(char*, char*, int, unsigned long)+0xe18>
   3c864:	ea00000b 	b	3c898 <ZEsarUXInterface::handleLine(char*, char*, int, unsigned long)+0x3a8>
        if (*p2 == 0)
   3c868:	e3530000 	cmp	r3, #0
   3c86c:	0a00002b 	beq	3c920 <ZEsarUXInterface::handleLine(char*, char*, int, unsigned long)+0x430>
   3c870:	e1cd22f0 	strd	r2, [sp, #32]
        if (rdtolower(*p1++) != rdtolower(*p2++))
   3c874:	ebffa17d 	bl	24e70 <rdtolower>
   3c878:	e59d3024 	ldr	r3, [sp, #36]	; 0x24
   3c87c:	e1a0a000 	mov	sl, r0
   3c880:	e1a00003 	mov	r0, r3
   3c884:	ebffa179 	bl	24e70 <rdtolower>
   3c888:	e15a0000 	cmp	sl, r0
   3c88c:	e59d2020 	ldr	r2, [sp, #32]
   3c890:	1a000007 	bne	3c8b4 <ZEsarUXInterface::handleLine(char*, char*, int, unsigned long)+0x3c4>
   3c894:	e5f40001 	ldrb	r0, [r4, #1]!
    while(*p1)
   3c898:	e3500000 	cmp	r0, #0
   3c89c:	e5f23001 	ldrb	r3, [r2, #1]!
   3c8a0:	1afffff0 	bne	3c868 <ZEsarUXInterface::handleLine(char*, char*, int, unsigned long)+0x378>
    return (*p2 == 0);
   3c8a4:	e16f3f13 	clz	r3, r3
   3c8a8:	e1a032a3 	lsr	r3, r3, #5
    else if (commandMatch(cmdStr, "set-debug-settings"))
   3c8ac:	e3530000 	cmp	r3, #0
   3c8b0:	1affff44 	bne	3c5c8 <ZEsarUXInterface::handleLine(char*, char*, int, unsigned long)+0xd8>
    while (*p1 == ' ')
   3c8b4:	e5d50000 	ldrb	r0, [r5]
   3c8b8:	e1a03005 	mov	r3, r5
   3c8bc:	e3500020 	cmp	r0, #32
   3c8c0:	1a000002 	bne	3c8d0 <ZEsarUXInterface::handleLine(char*, char*, int, unsigned long)+0x3e0>
   3c8c4:	e5f30001 	ldrb	r0, [r3, #1]!
   3c8c8:	e3500020 	cmp	r0, #32
   3c8cc:	0afffffc 	beq	3c8c4 <ZEsarUXInterface::handleLine(char*, char*, int, unsigned long)+0x3d4>
   3c8d0:	e59f2a34 	ldr	r2, [pc, #2612]	; 3d30c <ZEsarUXInterface::handleLine(char*, char*, int, unsigned long)+0xe1c>
   3c8d4:	ea00000b 	b	3c908 <ZEsarUXInterface::handleLine(char*, char*, int, unsigned long)+0x418>
        if (*p2 == 0)
   3c8d8:	e3540000 	cmp	r4, #0
   3c8dc:	0a00001a 	beq	3c94c <ZEsarUXInterface::handleLine(char*, char*, int, unsigned long)+0x45c>
   3c8e0:	e1cd22f0 	strd	r2, [sp, #32]
        if (rdtolower(*p1++) != rdtolower(*p2++))
   3c8e4:	ebffa161 	bl	24e70 <rdtolower>
   3c8e8:	e1a0a000 	mov	sl, r0
   3c8ec:	e1a00004 	mov	r0, r4
   3c8f0:	ebffa15e 	bl	24e70 <rdtolower>
   3c8f4:	e15a0000 	cmp	sl, r0
   3c8f8:	1a000065 	bne	3ca94 <ZEsarUXInterface::handleLine(char*, char*, int, unsigned long)+0x5a4>
   3c8fc:	e59d3024 	ldr	r3, [sp, #36]	; 0x24
   3c900:	e59d2020 	ldr	r2, [sp, #32]
   3c904:	e5f30001 	ldrb	r0, [r3, #1]!
    while(*p1)
   3c908:	e3500000 	cmp	r0, #0
   3c90c:	e5f24001 	ldrb	r4, [r2, #1]!
   3c910:	1afffff0 	bne	3c8d8 <ZEsarUXInterface::handleLine(char*, char*, int, unsigned long)+0x3e8>
    return (*p2 == 0);
   3c914:	e16f4f14 	clz	r4, r4
   3c918:	e1a042a4 	lsr	r4, r4, #5
   3c91c:	ea000015 	b	3c978 <ZEsarUXInterface::handleLine(char*, char*, int, unsigned long)+0x488>
            while (rdisspace(*p1))
   3c920:	e5d40000 	ldrb	r0, [r4]
   3c924:	e58d4020 	str	r4, [sp, #32]
   3c928:	ebffa138 	bl	24e10 <rdisspace>
   3c92c:	e3500000 	cmp	r0, #0
   3c930:	e2844001 	add	r4, r4, #1
   3c934:	e59d3020 	ldr	r3, [sp, #32]
   3c938:	1afffff8 	bne	3c920 <ZEsarUXInterface::handleLine(char*, char*, int, unsigned long)+0x430>
            return *p1 == 0;
   3c93c:	e5d33000 	ldrb	r3, [r3]
   3c940:	e16f3f13 	clz	r3, r3
   3c944:	e1a032a3 	lsr	r3, r3, #5
   3c948:	eaffffd7 	b	3c8ac <ZEsarUXInterface::handleLine(char*, char*, int, unsigned long)+0x3bc>
            while (rdisspace(*p1))
   3c94c:	e5d30000 	ldrb	r0, [r3]
   3c950:	e1a04003 	mov	r4, r3
   3c954:	e58d3020 	str	r3, [sp, #32]
   3c958:	ebffa12c 	bl	24e10 <rdisspace>
   3c95c:	e59d3020 	ldr	r3, [sp, #32]
   3c960:	e3500000 	cmp	r0, #0
   3c964:	e2833001 	add	r3, r3, #1
   3c968:	1afffff7 	bne	3c94c <ZEsarUXInterface::handleLine(char*, char*, int, unsigned long)+0x45c>
            return *p1 == 0;
   3c96c:	e5d44000 	ldrb	r4, [r4]
   3c970:	e16f4f14 	clz	r4, r4
   3c974:	e1a042a4 	lsr	r4, r4, #5
    else if (commandMatch(cmdStr, "smartload"))
   3c978:	e3540000 	cmp	r4, #0
   3c97c:	0a000044 	beq	3ca94 <ZEsarUXInterface::handleLine(char*, char*, int, unsigned long)+0x5a4>
        LogWrite(FromZEsarUXInterface, LOG_DEBUG, "Smartload");
   3c980:	e59f2988 	ldr	r2, [pc, #2440]	; 3d310 <ZEsarUXInterface::handleLine(char*, char*, int, unsigned long)+0xe20>
   3c984:	e3a01004 	mov	r1, #4
   3c988:	e59f0984 	ldr	r0, [pc, #2436]	; 3d314 <ZEsarUXInterface::handleLine(char*, char*, int, unsigned long)+0xe24>
   3c98c:	ebff9df9 	bl	24178 <LogWrite>
        char* fileNamePtr = argStr+strlen(argStr);
   3c990:	e1a00008 	mov	r0, r8
   3c994:	eb004320 	bl	4d61c <strlen>
        for (uint32_t i = 0; i < strlen(argStr); i++)
   3c998:	e3500000 	cmp	r0, #0
        char* fileNamePtr = argStr+strlen(argStr);
   3c99c:	e0888000 	add	r8, r8, r0
        for (uint32_t i = 0; i < strlen(argStr); i++)
   3c9a0:	0a0000d2 	beq	3ccf0 <ZEsarUXInterface::handleLine(char*, char*, int, unsigned long)+0x800>
   3c9a4:	e1a01008 	mov	r1, r8
        const char* fileTypePtr = "";
   3c9a8:	e59f5928 	ldr	r5, [pc, #2344]	; 3d2d8 <ZEsarUXInterface::handleLine(char*, char*, int, unsigned long)+0xde8>
   3c9ac:	e0480000 	sub	r0, r8, r0
   3c9b0:	ea000002 	b	3c9c0 <ZEsarUXInterface::handleLine(char*, char*, int, unsigned long)+0x4d0>
        for (uint32_t i = 0; i < strlen(argStr); i++)
   3c9b4:	e1500008 	cmp	r0, r8
   3c9b8:	e1a01008 	mov	r1, r8
   3c9bc:	0a000008 	beq	3c9e4 <ZEsarUXInterface::handleLine(char*, char*, int, unsigned long)+0x4f4>
            if (*fileNamePtr == '.')
   3c9c0:	e1a08001 	mov	r8, r1
   3c9c4:	e4582001 	ldrb	r2, [r8], #-1
   3c9c8:	e352002e 	cmp	r2, #46	; 0x2e
   3c9cc:	02815001 	addeq	r5, r1, #1
   3c9d0:	0afffff7 	beq	3c9b4 <ZEsarUXInterface::handleLine(char*, char*, int, unsigned long)+0x4c4>
            if ((*fileNamePtr == '\\') || (*fileNamePtr == '/'))
   3c9d4:	e352002f 	cmp	r2, #47	; 0x2f
   3c9d8:	1352005c 	cmpne	r2, #92	; 0x5c
   3c9dc:	1afffff4 	bne	3c9b4 <ZEsarUXInterface::handleLine(char*, char*, int, unsigned long)+0x4c4>
                fileNamePtr++;
   3c9e0:	e2818001 	add	r8, r1, #1
        if (strlen(fileNamePtr) > 0)
   3c9e4:	e5d83000 	ldrb	r3, [r8]
   3c9e8:	e3530000 	cmp	r3, #0
   3c9ec:	0a0000b6 	beq	3cccc <ZEsarUXInterface::handleLine(char*, char*, int, unsigned long)+0x7dc>
            const char* pMcName = McManager::getMachineForFileType(fileTypePtr);
   3c9f0:	e1a00005 	mov	r0, r5
   3c9f4:	ebffc4b5 	bl	2dcd0 <McManager::getMachineForFileType(char const*)>
            if (pMcName)
   3c9f8:	e2506000 	subs	r6, r0, #0
   3c9fc:	0a000006 	beq	3ca1c <ZEsarUXInterface::handleLine(char*, char*, int, unsigned long)+0x52c>
                McManager::setMachineByName(pMcName);
   3ca00:	ebffc58d 	bl	2e03c <McManager::setMachineByName(char const*)>
                LogWrite(FromZEsarUXInterface, LOG_DEBUG, "fileType %s setMachine %s", fileTypePtr, pMcName);
   3ca04:	e58d6000 	str	r6, [sp]
   3ca08:	e1a03005 	mov	r3, r5
   3ca0c:	e59f2904 	ldr	r2, [pc, #2308]	; 3d318 <ZEsarUXInterface::handleLine(char*, char*, int, unsigned long)+0xe28>
   3ca10:	e3a01004 	mov	r1, #4
   3ca14:	e59f08f8 	ldr	r0, [pc, #2296]	; 3d314 <ZEsarUXInterface::handleLine(char*, char*, int, unsigned long)+0xe24>
   3ca18:	ebff9dd6 	bl	24178 <LogWrite>
            strlcpy(apiReqStr, "sendfiletotargetbuffer//", MAX_API_REQ_LEN);
   3ca1c:	e3a020c8 	mov	r2, #200	; 0xc8
   3ca20:	e59f18f4 	ldr	r1, [pc, #2292]	; 3d31c <ZEsarUXInterface::handleLine(char*, char*, int, unsigned long)+0xe2c>
   3ca24:	e28d0038 	add	r0, sp, #56	; 0x38
   3ca28:	eb0042e6 	bl	4d5c8 <strlcpy>
            strlcat(apiReqStr, fileNamePtr, MAX_API_REQ_LEN);
   3ca2c:	e1a01008 	mov	r1, r8
   3ca30:	e3a020c8 	mov	r2, #200	; 0xc8
   3ca34:	e28d0038 	add	r0, sp, #56	; 0x38
   3ca38:	eb0042b2 	bl	4d508 <strlcat>
            LogWrite(FromZEsarUXInterface, LOG_DEBUG, "sendFileReq %s", apiReqStr);
   3ca3c:	e28d3038 	add	r3, sp, #56	; 0x38
   3ca40:	e59f28d8 	ldr	r2, [pc, #2264]	; 3d320 <ZEsarUXInterface::handleLine(char*, char*, int, unsigned long)+0xe30>
   3ca44:	e3a01004 	mov	r1, #4
   3ca48:	e59f08c4 	ldr	r0, [pc, #2244]	; 3d314 <ZEsarUXInterface::handleLine(char*, char*, int, unsigned long)+0xe24>
   3ca4c:	ebff9dc9 	bl	24178 <LogWrite>
            CommandHandler::sendAPIReq(apiReqStr);
   3ca50:	e28d0038 	add	r0, sp, #56	; 0x38
   3ca54:	ebffab30 	bl	2771c <CommandHandler::sendAPIReq(char const*)>
            _smartloadStartUs = micros();
   3ca58:	ebffe74e 	bl	36798 <micros>
            _smartloadInProgress = true;
   3ca5c:	e3a02001 	mov	r2, #1
            _smartloadStartDetected = false;
   3ca60:	e3a03000 	mov	r3, #0
            _smartloadStartUs = micros();
   3ca64:	e59d1014 	ldr	r1, [sp, #20]
   3ca68:	e5810000 	str	r0, [r1]
            _smartloadMsgIdx = zesaruxMsgIndex;
   3ca6c:	e59d0460 	ldr	r0, [sp, #1120]	; 0x460
            _smartloadInProgress = true;
   3ca70:	e5c12004 	strb	r2, [r1, #4]
            _smartloadMsgIdx = zesaruxMsgIndex;
   3ca74:	e5810008 	str	r0, [r1, #8]
            _smartloadStartDetected = false;
   3ca78:	e5c1300c 	strb	r3, [r1, #12]
   3ca7c:	eafffeda 	b	3c5ec <ZEsarUXInterface::handleLine(char*, char*, int, unsigned long)+0xfc>
            strlcpy(machineNameMunged, "Spectrum 48k", MAX_MACHINE_NAME_LEN);
   3ca80:	e3a020c8 	mov	r2, #200	; 0xc8
   3ca84:	e59f1898 	ldr	r1, [pc, #2200]	; 3d324 <ZEsarUXInterface::handleLine(char*, char*, int, unsigned long)+0xe34>
   3ca88:	e1a00004 	mov	r0, r4
   3ca8c:	eb0042cd 	bl	4d5c8 <strlcpy>
   3ca90:	eaffff5c 	b	3c808 <ZEsarUXInterface::handleLine(char*, char*, int, unsigned long)+0x318>
    while (*p1 == ' ')
   3ca94:	e5d50000 	ldrb	r0, [r5]
   3ca98:	e1a04005 	mov	r4, r5
   3ca9c:	e3500020 	cmp	r0, #32
   3caa0:	1a000002 	bne	3cab0 <ZEsarUXInterface::handleLine(char*, char*, int, unsigned long)+0x5c0>
   3caa4:	e5f40001 	ldrb	r0, [r4, #1]!
   3caa8:	e3500020 	cmp	r0, #32
   3caac:	0afffffc 	beq	3caa4 <ZEsarUXInterface::handleLine(char*, char*, int, unsigned long)+0x5b4>
   3cab0:	e59f2870 	ldr	r2, [pc, #2160]	; 3d328 <ZEsarUXInterface::handleLine(char*, char*, int, unsigned long)+0xe38>
   3cab4:	ea00000c 	b	3caec <ZEsarUXInterface::handleLine(char*, char*, int, unsigned long)+0x5fc>
        if (*p2 == 0)
   3cab8:	e3530000 	cmp	r3, #0
   3cabc:	0a000010 	beq	3cb04 <ZEsarUXInterface::handleLine(char*, char*, int, unsigned long)+0x614>
   3cac0:	e58d2024 	str	r2, [sp, #36]	; 0x24
   3cac4:	e58d3020 	str	r3, [sp, #32]
        if (rdtolower(*p1++) != rdtolower(*p2++))
   3cac8:	ebffa0e8 	bl	24e70 <rdtolower>
   3cacc:	e59d3020 	ldr	r3, [sp, #32]
   3cad0:	e1a0a000 	mov	sl, r0
   3cad4:	e1a00003 	mov	r0, r3
   3cad8:	ebffa0e4 	bl	24e70 <rdtolower>
   3cadc:	e15a0000 	cmp	sl, r0
   3cae0:	1a000017 	bne	3cb44 <ZEsarUXInterface::handleLine(char*, char*, int, unsigned long)+0x654>
   3cae4:	e5f40001 	ldrb	r0, [r4, #1]!
   3cae8:	e59d2024 	ldr	r2, [sp, #36]	; 0x24
    while(*p1)
   3caec:	e3500000 	cmp	r0, #0
   3caf0:	e5f23001 	ldrb	r3, [r2, #1]!
   3caf4:	1affffef 	bne	3cab8 <ZEsarUXInterface::handleLine(char*, char*, int, unsigned long)+0x5c8>
    return (*p2 == 0);
   3caf8:	e16f3f13 	clz	r3, r3
   3cafc:	e1a032a3 	lsr	r3, r3, #5
   3cb00:	ea000009 	b	3cb2c <ZEsarUXInterface::handleLine(char*, char*, int, unsigned long)+0x63c>
            while (rdisspace(*p1))
   3cb04:	e5d40000 	ldrb	r0, [r4]
   3cb08:	e58d4020 	str	r4, [sp, #32]
   3cb0c:	ebffa0bf 	bl	24e10 <rdisspace>
   3cb10:	e3500000 	cmp	r0, #0
   3cb14:	e2844001 	add	r4, r4, #1
   3cb18:	e59d3020 	ldr	r3, [sp, #32]
   3cb1c:	1afffff8 	bne	3cb04 <ZEsarUXInterface::handleLine(char*, char*, int, unsigned long)+0x614>
            return *p1 == 0;
   3cb20:	e5d33000 	ldrb	r3, [r3]
   3cb24:	e16f3f13 	clz	r3, r3
   3cb28:	e1a032a3 	lsr	r3, r3, #5
    else if (commandMatch(cmdStr, "get-registers"))
   3cb2c:	e3530000 	cmp	r3, #0
   3cb30:	0a000003 	beq	3cb44 <ZEsarUXInterface::handleLine(char*, char*, int, unsigned long)+0x654>
        TargetTracker::getRegsFormatted(pResponse, maxResponseLen);
   3cb34:	e1a01007 	mov	r1, r7
   3cb38:	e1a00006 	mov	r0, r6
   3cb3c:	ebfffa12 	bl	3b38c <TargetTracker::getRegsFormatted(char*, int)>
   3cb40:	eafffea0 	b	3c5c8 <ZEsarUXInterface::handleLine(char*, char*, int, unsigned long)+0xd8>
    while (*p1 == ' ')
   3cb44:	e5d50000 	ldrb	r0, [r5]
   3cb48:	e1a03005 	mov	r3, r5
   3cb4c:	e3500020 	cmp	r0, #32
   3cb50:	1a000002 	bne	3cb60 <ZEsarUXInterface::handleLine(char*, char*, int, unsigned long)+0x670>
   3cb54:	e5f30001 	ldrb	r0, [r3, #1]!
   3cb58:	e3500020 	cmp	r0, #32
   3cb5c:	0afffffc 	beq	3cb54 <ZEsarUXInterface::handleLine(char*, char*, int, unsigned long)+0x664>
   3cb60:	e59f27c4 	ldr	r2, [pc, #1988]	; 3d32c <ZEsarUXInterface::handleLine(char*, char*, int, unsigned long)+0xe3c>
   3cb64:	ea00000a 	b	3cb94 <ZEsarUXInterface::handleLine(char*, char*, int, unsigned long)+0x6a4>
        if (*p2 == 0)
   3cb68:	e3540000 	cmp	r4, #0
   3cb6c:	0a00004a 	beq	3cc9c <ZEsarUXInterface::handleLine(char*, char*, int, unsigned long)+0x7ac>
   3cb70:	e1cd22f0 	strd	r2, [sp, #32]
        if (rdtolower(*p1++) != rdtolower(*p2++))
   3cb74:	ebffa0bd 	bl	24e70 <rdtolower>
   3cb78:	e1a0a000 	mov	sl, r0
   3cb7c:	e1a00004 	mov	r0, r4
   3cb80:	ebffa0ba 	bl	24e70 <rdtolower>
   3cb84:	e1cd22d0 	ldrd	r2, [sp, #32]
   3cb88:	e15a0000 	cmp	sl, r0
   3cb8c:	1a000007 	bne	3cbb0 <ZEsarUXInterface::handleLine(char*, char*, int, unsigned long)+0x6c0>
   3cb90:	e5f30001 	ldrb	r0, [r3, #1]!
    while(*p1)
   3cb94:	e3500000 	cmp	r0, #0
   3cb98:	e5f24001 	ldrb	r4, [r2, #1]!
   3cb9c:	1afffff1 	bne	3cb68 <ZEsarUXInterface::handleLine(char*, char*, int, unsigned long)+0x678>
    return (*p2 == 0);
   3cba0:	e16f4f14 	clz	r4, r4
   3cba4:	e1a042a4 	lsr	r4, r4, #5
    else if (commandMatch(cmdStr, "set-register"))
   3cba8:	e3540000 	cmp	r4, #0
   3cbac:	1afffe85 	bne	3c5c8 <ZEsarUXInterface::handleLine(char*, char*, int, unsigned long)+0xd8>
    else if (commandMatch(cmdStr, "get-stack-backtrace"))
   3cbb0:	e59f1778 	ldr	r1, [pc, #1912]	; 3d330 <ZEsarUXInterface::handleLine(char*, char*, int, unsigned long)+0xe40>
   3cbb4:	e1a00005 	mov	r0, r5
   3cbb8:	ebfffd23 	bl	3c04c <ZEsarUXInterface::commandMatch(char const*, char const*) [clone .constprop.2]>
   3cbbc:	e2503000 	subs	r3, r0, #0
   3cbc0:	1afffe80 	bne	3c5c8 <ZEsarUXInterface::handleLine(char*, char*, int, unsigned long)+0xd8>
    else if (commandMatch(cmdStr, "read-memory"))
   3cbc4:	e59f1768 	ldr	r1, [pc, #1896]	; 3d334 <ZEsarUXInterface::handleLine(char*, char*, int, unsigned long)+0xe44>
   3cbc8:	e1a00005 	mov	r0, r5
   3cbcc:	e58d3020 	str	r3, [sp, #32]
   3cbd0:	ebfffd1d 	bl	3c04c <ZEsarUXInterface::commandMatch(char const*, char const*) [clone .constprop.2]>
   3cbd4:	e3500000 	cmp	r0, #0
   3cbd8:	0a00005c 	beq	3cd50 <ZEsarUXInterface::handleLine(char*, char*, int, unsigned long)+0x860>
        if (strlen(argStr) > 5)
   3cbdc:	e1a00008 	mov	r0, r8
   3cbe0:	eb00428d 	bl	4d61c <strlen>
   3cbe4:	e59d3020 	ldr	r3, [sp, #32]
   3cbe8:	e3500005 	cmp	r0, #5
        int memAddn = 0;
   3cbec:	91a05003 	movls	r5, r3
        if (strlen(argStr) > 5)
   3cbf0:	8a000040 	bhi	3ccf8 <ZEsarUXInterface::handleLine(char*, char*, int, unsigned long)+0x808>
        uint32_t startAddr = strtol(argStr, NULL, 10) + memAddn;
   3cbf4:	e1a00008 	mov	r0, r8
   3cbf8:	e3a0200a 	mov	r2, #10
   3cbfc:	e3a01000 	mov	r1, #0
   3cc00:	eb0045c6 	bl	4e320 <strtol>
        uint32_t blockLength = strtol(argStr2, NULL, 10);
   3cc04:	e3a0200a 	mov	r2, #10
        uint32_t startAddr = strtol(argStr, NULL, 10) + memAddn;
   3cc08:	e0805005 	add	r5, r0, r5
        uint32_t blockLength = strtol(argStr2, NULL, 10);
   3cc0c:	e3a01000 	mov	r1, #0
   3cc10:	e59d0018 	ldr	r0, [sp, #24]
   3cc14:	eb0045c1 	bl	4e320 <strtol>
   3cc18:	e1a08000 	mov	r8, r0
        if ((startAddr <= HwManager::getMaxAddress()) && (blockLength <= MAX_BYTES_TO_RETURN))
   3cc1c:	ebffbdbe 	bl	2c31c <HwManager::getMaxAddress()>
   3cc20:	e3580b01 	cmp	r8, #1024	; 0x400
   3cc24:	83a03000 	movhi	r3, #0
   3cc28:	93a03001 	movls	r3, #1
   3cc2c:	e1500005 	cmp	r0, r5
   3cc30:	33a03000 	movcc	r3, #0
   3cc34:	e3530000 	cmp	r3, #0
   3cc38:	0afffe62 	beq	3c5c8 <ZEsarUXInterface::handleLine(char*, char*, int, unsigned long)+0xd8>
            HwManager::blockRead(startAddr, dataBlock, blockLength, false, false, false);
   3cc3c:	e3a03000 	mov	r3, #0
   3cc40:	e28d4038 	add	r4, sp, #56	; 0x38
   3cc44:	e1a00005 	mov	r0, r5
   3cc48:	e58d3004 	str	r3, [sp, #4]
   3cc4c:	e58d3000 	str	r3, [sp]
   3cc50:	e1a01004 	mov	r1, r4
   3cc54:	e1a02008 	mov	r2, r8
            for (uint32_t i = 0; i < blockLength; i++)
   3cc58:	e1a05003 	mov	r5, r3
                ee_sprintf(chBuf, "%02X", dataBlock[i]);
   3cc5c:	e59fa6d4 	ldr	sl, [pc, #1748]	; 3d338 <ZEsarUXInterface::handleLine(char*, char*, int, unsigned long)+0xe48>
            HwManager::blockRead(startAddr, dataBlock, blockLength, false, false, false);
   3cc60:	ebffbdf2 	bl	2c430 <HwManager::blockRead(unsigned long, unsigned char*, unsigned long, bool, bool, bool)>
                ee_sprintf(chBuf, "%02X", dataBlock[i]);
   3cc64:	e244900c 	sub	r9, r4, #12
   3cc68:	ea000008 	b	3cc90 <ZEsarUXInterface::handleLine(char*, char*, int, unsigned long)+0x7a0>
   3cc6c:	e7d42005 	ldrb	r2, [r4, r5]
   3cc70:	e1a0100a 	mov	r1, sl
   3cc74:	e1a00009 	mov	r0, r9
   3cc78:	ebff984b 	bl	22dac <ee_sprintf>
                strlcat(pResponse, chBuf, maxResponseLen);
   3cc7c:	e1a02007 	mov	r2, r7
   3cc80:	e1a01009 	mov	r1, r9
   3cc84:	e1a00006 	mov	r0, r6
            for (uint32_t i = 0; i < blockLength; i++)
   3cc88:	e2855001 	add	r5, r5, #1
                strlcat(pResponse, chBuf, maxResponseLen);
   3cc8c:	eb00421d 	bl	4d508 <strlcat>
            for (uint32_t i = 0; i < blockLength; i++)
   3cc90:	e1550008 	cmp	r5, r8
   3cc94:	1afffff4 	bne	3cc6c <ZEsarUXInterface::handleLine(char*, char*, int, unsigned long)+0x77c>
   3cc98:	eafffe4a 	b	3c5c8 <ZEsarUXInterface::handleLine(char*, char*, int, unsigned long)+0xd8>
            while (rdisspace(*p1))
   3cc9c:	e5d30000 	ldrb	r0, [r3]
   3cca0:	e1a04003 	mov	r4, r3
   3cca4:	e58d3020 	str	r3, [sp, #32]
   3cca8:	ebffa058 	bl	24e10 <rdisspace>
   3ccac:	e59d3020 	ldr	r3, [sp, #32]
   3ccb0:	e3500000 	cmp	r0, #0
   3ccb4:	e2833001 	add	r3, r3, #1
   3ccb8:	1afffff7 	bne	3cc9c <ZEsarUXInterface::handleLine(char*, char*, int, unsigned long)+0x7ac>
            return *p1 == 0;
   3ccbc:	e5d44000 	ldrb	r4, [r4]
   3ccc0:	e16f4f14 	clz	r4, r4
   3ccc4:	e1a042a4 	lsr	r4, r4, #5
   3ccc8:	eaffffb6 	b	3cba8 <ZEsarUXInterface::handleLine(char*, char*, int, unsigned long)+0x6b8>
            LogWrite(FromZEsarUXInterface, LOG_NOTICE, "Failed to smartload file");
   3cccc:	e59f2668 	ldr	r2, [pc, #1640]	; 3d33c <ZEsarUXInterface::handleLine(char*, char*, int, unsigned long)+0xe4c>
   3ccd0:	e3a01003 	mov	r1, #3
   3ccd4:	e59f0638 	ldr	r0, [pc, #1592]	; 3d314 <ZEsarUXInterface::handleLine(char*, char*, int, unsigned long)+0xe24>
   3ccd8:	ebff9d26 	bl	24178 <LogWrite>
            strlcat(pResponse, "Failed to smartload file", maxResponseLen);
   3ccdc:	e1a02007 	mov	r2, r7
   3cce0:	e59f1654 	ldr	r1, [pc, #1620]	; 3d33c <ZEsarUXInterface::handleLine(char*, char*, int, unsigned long)+0xe4c>
   3cce4:	e1a00006 	mov	r0, r6
   3cce8:	eb004206 	bl	4d508 <strlcat>
   3ccec:	eafffe35 	b	3c5c8 <ZEsarUXInterface::handleLine(char*, char*, int, unsigned long)+0xd8>
        const char* fileTypePtr = "";
   3ccf0:	e59f55e0 	ldr	r5, [pc, #1504]	; 3d2d8 <ZEsarUXInterface::handleLine(char*, char*, int, unsigned long)+0xde8>
   3ccf4:	eaffff3a 	b	3c9e4 <ZEsarUXInterface::handleLine(char*, char*, int, unsigned long)+0x4f4>
            memset(memAddnStr, 0, 10);
   3ccf8:	e28d4038 	add	r4, sp, #56	; 0x38
   3ccfc:	e58d3038 	str	r3, [sp, #56]	; 0x38
            for (int i = 0; i < 10; i++)
   3cd00:	e1a02003 	mov	r2, r3
            memset(memAddnStr, 0, 10);
   3cd04:	e5843004 	str	r3, [r4, #4]
   3cd08:	e1c430b8 	strh	r3, [r4, #8]
   3cd0c:	e2883004 	add	r3, r8, #4
   3cd10:	ea000001 	b	3cd1c <ZEsarUXInterface::handleLine(char*, char*, int, unsigned long)+0x82c>
            for (int i = 0; i < 10; i++)
   3cd14:	e352000a 	cmp	r2, #10
   3cd18:	0a000004 	beq	3cd30 <ZEsarUXInterface::handleLine(char*, char*, int, unsigned long)+0x840>
                memAddnStr[i] = argStr[5+i];
   3cd1c:	e5f31001 	ldrb	r1, [r3, #1]!
                if (memAddnStr[i] == 0)
   3cd20:	e3510000 	cmp	r1, #0
                memAddnStr[i] = argStr[5+i];
   3cd24:	e7c41002 	strb	r1, [r4, r2]
            for (int i = 0; i < 10; i++)
   3cd28:	e2822001 	add	r2, r2, #1
                if (memAddnStr[i] == 0)
   3cd2c:	1afffff8 	bne	3cd14 <ZEsarUXInterface::handleLine(char*, char*, int, unsigned long)+0x824>
            memAddn = strtol(memAddnStr, NULL, 10);
   3cd30:	e1a00004 	mov	r0, r4
   3cd34:	e3a0200a 	mov	r2, #10
   3cd38:	e3a01000 	mov	r1, #0
   3cd3c:	eb004577 	bl	4e320 <strtol>
            argStr[5] = 0;
   3cd40:	e3a03000 	mov	r3, #0
            memAddn = strtol(memAddnStr, NULL, 10);
   3cd44:	e1a05000 	mov	r5, r0
            argStr[5] = 0;
   3cd48:	e5c83005 	strb	r3, [r8, #5]
   3cd4c:	eaffffa8 	b	3cbf4 <ZEsarUXInterface::handleLine(char*, char*, int, unsigned long)+0x704>
    else if (commandMatch(cmdStr, "write-memory"))
   3cd50:	e59f15e8 	ldr	r1, [pc, #1512]	; 3d340 <ZEsarUXInterface::handleLine(char*, char*, int, unsigned long)+0xe50>
   3cd54:	e1a00005 	mov	r0, r5
   3cd58:	ebfffcbb 	bl	3c04c <ZEsarUXInterface::commandMatch(char const*, char const*) [clone .constprop.2]>
   3cd5c:	e3500000 	cmp	r0, #0
   3cd60:	1afffe18 	bne	3c5c8 <ZEsarUXInterface::handleLine(char*, char*, int, unsigned long)+0xd8>
    else if (commandMatch(cmdStr, "write-memory-raw"))
   3cd64:	e59f15d8 	ldr	r1, [pc, #1496]	; 3d344 <ZEsarUXInterface::handleLine(char*, char*, int, unsigned long)+0xe54>
   3cd68:	e1a00005 	mov	r0, r5
   3cd6c:	ebfffcb6 	bl	3c04c <ZEsarUXInterface::commandMatch(char const*, char const*) [clone .constprop.2]>
   3cd70:	e3500000 	cmp	r0, #0
   3cd74:	1afffe13 	bne	3c5c8 <ZEsarUXInterface::handleLine(char*, char*, int, unsigned long)+0xd8>
    else if (commandMatch(cmdStr, "get-memory-pages"))
   3cd78:	e59f15c8 	ldr	r1, [pc, #1480]	; 3d348 <ZEsarUXInterface::handleLine(char*, char*, int, unsigned long)+0xe58>
   3cd7c:	e1a00005 	mov	r0, r5
   3cd80:	ebfffcb1 	bl	3c04c <ZEsarUXInterface::commandMatch(char const*, char const*) [clone .constprop.2]>
   3cd84:	e2504000 	subs	r4, r0, #0
   3cd88:	1afffe0e 	bne	3c5c8 <ZEsarUXInterface::handleLine(char*, char*, int, unsigned long)+0xd8>
    else if (commandMatch(cmdStr, "disassemble"))
   3cd8c:	e59f15b8 	ldr	r1, [pc, #1464]	; 3d34c <ZEsarUXInterface::handleLine(char*, char*, int, unsigned long)+0xe5c>
   3cd90:	e1a00005 	mov	r0, r5
   3cd94:	ebfffcac 	bl	3c04c <ZEsarUXInterface::commandMatch(char const*, char const*) [clone .constprop.2]>
   3cd98:	e3500000 	cmp	r0, #0
   3cd9c:	0a000014 	beq	3cdf4 <ZEsarUXInterface::handleLine(char*, char*, int, unsigned long)+0x904>
        uint8_t* pMirrorMemory = HwManager::getMirrorMemForAddr(0);
   3cda0:	e1a00004 	mov	r0, r4
   3cda4:	ebffbde3 	bl	2c538 <HwManager::getMirrorMemForAddr(unsigned long)>
        if (pMirrorMemory)
   3cda8:	e2505000 	subs	r5, r0, #0
   3cdac:	0afffe05 	beq	3c5c8 <ZEsarUXInterface::handleLine(char*, char*, int, unsigned long)+0xd8>
            uint32_t addr = strtol(argStr, NULL, 10);
   3cdb0:	e1a01004 	mov	r1, r4
   3cdb4:	e1a00008 	mov	r0, r8
   3cdb8:	e3a0200a 	mov	r2, #10
   3cdbc:	eb004557 	bl	4e320 <strtol>
            disasmZ80(pMirrorMemory, 0, addr, pResponse, INTEL, false, true);
   3cdc0:	e3a03001 	mov	r3, #1
   3cdc4:	e1a02000 	mov	r2, r0
   3cdc8:	e1a01004 	mov	r1, r4
   3cdcc:	e58d3008 	str	r3, [sp, #8]
   3cdd0:	e58d4004 	str	r4, [sp, #4]
   3cdd4:	e58d4000 	str	r4, [sp]
   3cdd8:	e1a00005 	mov	r0, r5
   3cddc:	e1a03006 	mov	r3, r6
   3cde0:	ebffaea9 	bl	2888c <disasmZ80(unsigned char*, unsigned long, unsigned long, char*, int, int, int)>
            mungeDisassembly(pResponse);
   3cde4:	e1a01006 	mov	r1, r6
   3cde8:	e59d0014 	ldr	r0, [sp, #20]
   3cdec:	ebfffda2 	bl	3c47c <ZEsarUXInterface::mungeDisassembly(char*)>
   3cdf0:	eafffdf4 	b	3c5c8 <ZEsarUXInterface::handleLine(char*, char*, int, unsigned long)+0xd8>
    else if (commandMatch(cmdStr, "enable-breakpoints"))
   3cdf4:	e59f1554 	ldr	r1, [pc, #1364]	; 3d350 <ZEsarUXInterface::handleLine(char*, char*, int, unsigned long)+0xe60>
   3cdf8:	e1a00005 	mov	r0, r5
   3cdfc:	ebfffc92 	bl	3c04c <ZEsarUXInterface::commandMatch(char const*, char const*) [clone .constprop.2]>
   3ce00:	e2502000 	subs	r2, r0, #0
    TargetBreakpoints();

    // Control
    void enableBreakpoints(bool en)
    {
        _breakpointsEnabled = en;
   3ce04:	13a02001 	movne	r2, #1
   3ce08:	159f3544 	ldrne	r3, [pc, #1348]	; 3d354 <ZEsarUXInterface::handleLine(char*, char*, int, unsigned long)+0xe64>
   3ce0c:	15c32000 	strbne	r2, [r3]
   3ce10:	1afffdec 	bne	3c5c8 <ZEsarUXInterface::handleLine(char*, char*, int, unsigned long)+0xd8>
    else if (commandMatch(cmdStr, "disable-breakpoints"))
   3ce14:	e59f153c 	ldr	r1, [pc, #1340]	; 3d358 <ZEsarUXInterface::handleLine(char*, char*, int, unsigned long)+0xe68>
   3ce18:	e1a00005 	mov	r0, r5
   3ce1c:	e58d2020 	str	r2, [sp, #32]
   3ce20:	ebfffc89 	bl	3c04c <ZEsarUXInterface::commandMatch(char const*, char const*) [clone .constprop.2]>
   3ce24:	e2504000 	subs	r4, r0, #0
   3ce28:	159f3524 	ldrne	r3, [pc, #1316]	; 3d354 <ZEsarUXInterface::handleLine(char*, char*, int, unsigned long)+0xe64>
   3ce2c:	159d2020 	ldrne	r2, [sp, #32]
   3ce30:	15c32000 	strbne	r2, [r3]
   3ce34:	1afffde3 	bne	3c5c8 <ZEsarUXInterface::handleLine(char*, char*, int, unsigned long)+0xd8>
    else if (commandMatch(cmdStr, "set-breakpoint"))
   3ce38:	e59f151c 	ldr	r1, [pc, #1308]	; 3d35c <ZEsarUXInterface::handleLine(char*, char*, int, unsigned long)+0xe6c>
   3ce3c:	e1a00005 	mov	r0, r5
   3ce40:	ebfffc81 	bl	3c04c <ZEsarUXInterface::commandMatch(char const*, char const*) [clone .constprop.2]>
   3ce44:	e3500000 	cmp	r0, #0
   3ce48:	0a00001e 	beq	3cec8 <ZEsarUXInterface::handleLine(char*, char*, int, unsigned long)+0x9d8>
        LogWrite(FromZEsarUXInterface, LOG_DEBUG, "set breakpoint %s %s", argStr, argStr2);
   3ce4c:	e59d5018 	ldr	r5, [sp, #24]
   3ce50:	e1a03008 	mov	r3, r8
   3ce54:	e59f2504 	ldr	r2, [pc, #1284]	; 3d360 <ZEsarUXInterface::handleLine(char*, char*, int, unsigned long)+0xe70>
   3ce58:	e3a01004 	mov	r1, #4
   3ce5c:	e59f04b0 	ldr	r0, [pc, #1200]	; 3d314 <ZEsarUXInterface::handleLine(char*, char*, int, unsigned long)+0xe24>
   3ce60:	e58d5000 	str	r5, [sp]
   3ce64:	ebff9cc3 	bl	24178 <LogWrite>
        int breakpointIdx = strtol(argStr, NULL, 10) - 1;
   3ce68:	e1a01004 	mov	r1, r4
   3ce6c:	e3a0200a 	mov	r2, #10
   3ce70:	e1a00008 	mov	r0, r8
   3ce74:	eb004529 	bl	4e320 <strtol>
        if ((argStr2[0] != 'P') || (argStr2[1] != 'C') || (argStr2[2] != '='))
   3ce78:	e5d53000 	ldrb	r3, [r5]
   3ce7c:	e1a02005 	mov	r2, r5
   3ce80:	e3530050 	cmp	r3, #80	; 0x50
        int breakpointIdx = strtol(argStr, NULL, 10) - 1;
   3ce84:	e2404001 	sub	r4, r0, #1
   3ce88:	15d52002 	ldrbne	r2, [r5, #2]
        if ((argStr2[0] != 'P') || (argStr2[1] != 'C') || (argStr2[2] != '='))
   3ce8c:	1a000004 	bne	3cea4 <ZEsarUXInterface::handleLine(char*, char*, int, unsigned long)+0x9b4>
   3ce90:	e59d2018 	ldr	r2, [sp, #24]
   3ce94:	e5d21001 	ldrb	r1, [r2, #1]
   3ce98:	e5d22002 	ldrb	r2, [r2, #2]
   3ce9c:	e3510043 	cmp	r1, #67	; 0x43
   3cea0:	0a000025 	beq	3cf3c <ZEsarUXInterface::handleLine(char*, char*, int, unsigned long)+0xa4c>
            LogWrite(FromZEsarUXInterface, LOG_DEBUG, "breakpoint format must be PC= argstr2 %02x %02x %02x", 
   3cea4:	e58d2004 	str	r2, [sp, #4]
   3cea8:	e59d2018 	ldr	r2, [sp, #24]
   3ceac:	e3a01004 	mov	r1, #4
   3ceb0:	e5d22001 	ldrb	r2, [r2, #1]
   3ceb4:	e59f0458 	ldr	r0, [pc, #1112]	; 3d314 <ZEsarUXInterface::handleLine(char*, char*, int, unsigned long)+0xe24>
   3ceb8:	e58d2000 	str	r2, [sp]
   3cebc:	e59f24a0 	ldr	r2, [pc, #1184]	; 3d364 <ZEsarUXInterface::handleLine(char*, char*, int, unsigned long)+0xe74>
   3cec0:	ebff9cac 	bl	24178 <LogWrite>
   3cec4:	eafffdbf 	b	3c5c8 <ZEsarUXInterface::handleLine(char*, char*, int, unsigned long)+0xd8>
    else if (commandMatch(cmdStr, "set-breakpointaction"))
   3cec8:	e59f1498 	ldr	r1, [pc, #1176]	; 3d368 <ZEsarUXInterface::handleLine(char*, char*, int, unsigned long)+0xe78>
   3cecc:	e1a00005 	mov	r0, r5
   3ced0:	ebfffc5d 	bl	3c04c <ZEsarUXInterface::commandMatch(char const*, char const*) [clone .constprop.2]>
   3ced4:	e3500000 	cmp	r0, #0
   3ced8:	0a000028 	beq	3cf80 <ZEsarUXInterface::handleLine(char*, char*, int, unsigned long)+0xa90>
        LogWrite(FromZEsarUXInterface, LOG_DEBUG, "set breakpoint action %s %s %s", argStr, argStr2, argRest);
   3cedc:	e59d301c 	ldr	r3, [sp, #28]
   3cee0:	e59d5018 	ldr	r5, [sp, #24]
   3cee4:	e58d3004 	str	r3, [sp, #4]
   3cee8:	e59f247c 	ldr	r2, [pc, #1148]	; 3d36c <ZEsarUXInterface::handleLine(char*, char*, int, unsigned long)+0xe7c>
   3ceec:	e1a03008 	mov	r3, r8
   3cef0:	e3a01004 	mov	r1, #4
   3cef4:	e59f0418 	ldr	r0, [pc, #1048]	; 3d314 <ZEsarUXInterface::handleLine(char*, char*, int, unsigned long)+0xe24>
   3cef8:	e58d5000 	str	r5, [sp]
   3cefc:	ebff9c9d 	bl	24178 <LogWrite>
        int breakpointIdx = strtol(argStr, NULL, 10) - 1;
   3cf00:	e3a0200a 	mov	r2, #10
   3cf04:	e3a01000 	mov	r1, #0
   3cf08:	e1a00008 	mov	r0, r8
   3cf0c:	eb004503 	bl	4e320 <strtol>
        if (!commandMatch(argStr2, "prints"))
   3cf10:	e59f1458 	ldr	r1, [pc, #1112]	; 3d370 <ZEsarUXInterface::handleLine(char*, char*, int, unsigned long)+0xe80>
        int breakpointIdx = strtol(argStr, NULL, 10) - 1;
   3cf14:	e2404001 	sub	r4, r0, #1
        if (!commandMatch(argStr2, "prints"))
   3cf18:	e1a00005 	mov	r0, r5
   3cf1c:	ebfffc4a 	bl	3c04c <ZEsarUXInterface::commandMatch(char const*, char const*) [clone .constprop.2]>
   3cf20:	e3500000 	cmp	r0, #0
   3cf24:	1a000010 	bne	3cf6c <ZEsarUXInterface::handleLine(char*, char*, int, unsigned long)+0xa7c>
            LogWrite(FromZEsarUXInterface, LOG_DEBUG, "breakpoint doesn't have message");
   3cf28:	e59f2444 	ldr	r2, [pc, #1092]	; 3d374 <ZEsarUXInterface::handleLine(char*, char*, int, unsigned long)+0xe84>
   3cf2c:	e3a01004 	mov	r1, #4
   3cf30:	e59f03dc 	ldr	r0, [pc, #988]	; 3d314 <ZEsarUXInterface::handleLine(char*, char*, int, unsigned long)+0xe24>
   3cf34:	ebff9c8f 	bl	24178 <LogWrite>
   3cf38:	eafffda2 	b	3c5c8 <ZEsarUXInterface::handleLine(char*, char*, int, unsigned long)+0xd8>
        if ((argStr2[0] != 'P') || (argStr2[1] != 'C') || (argStr2[2] != '='))
   3cf3c:	e352003d 	cmp	r2, #61	; 0x3d
   3cf40:	1affffd7 	bne	3cea4 <ZEsarUXInterface::handleLine(char*, char*, int, unsigned long)+0x9b4>
            int addr = strtol(argStr2+3, NULL, 16);
   3cf44:	e59d3018 	ldr	r3, [sp, #24]
   3cf48:	e3a02010 	mov	r2, #16
   3cf4c:	e2830003 	add	r0, r3, #3
   3cf50:	e3a01000 	mov	r1, #0
   3cf54:	eb0044f1 	bl	4e320 <strtol>
    {
        _breakpoints.setBreakpointMessage(idx, hitMessage);
    }
    static void setBreakpointPCAddr(int idx, uint32_t pcVal)
    {
        _breakpoints.setBreakpointPCAddr(idx, pcVal);
   3cf58:	e1a01004 	mov	r1, r4
   3cf5c:	e1a02000 	mov	r2, r0
   3cf60:	e59f03ec 	ldr	r0, [pc, #1004]	; 3d354 <ZEsarUXInterface::handleLine(char*, char*, int, unsigned long)+0xe64>
   3cf64:	ebfff4f6 	bl	3a344 <TargetBreakpoints::setBreakpointPCAddr(int, unsigned long)>
   3cf68:	eafffd96 	b	3c5c8 <ZEsarUXInterface::handleLine(char*, char*, int, unsigned long)+0xd8>
        _breakpoints.setBreakpointMessage(idx, hitMessage);
   3cf6c:	e59d201c 	ldr	r2, [sp, #28]
   3cf70:	e1a01004 	mov	r1, r4
   3cf74:	e59f03d8 	ldr	r0, [pc, #984]	; 3d354 <ZEsarUXInterface::handleLine(char*, char*, int, unsigned long)+0xe64>
   3cf78:	ebfff4e3 	bl	3a30c <TargetBreakpoints::setBreakpointMessage(int, char const*)>
   3cf7c:	eafffd91 	b	3c5c8 <ZEsarUXInterface::handleLine(char*, char*, int, unsigned long)+0xd8>
    else if (commandMatch(cmdStr, "enable-breakpoint"))
   3cf80:	e59f13f0 	ldr	r1, [pc, #1008]	; 3d378 <ZEsarUXInterface::handleLine(char*, char*, int, unsigned long)+0xe88>
   3cf84:	e1a00005 	mov	r0, r5
   3cf88:	ebfffc2f 	bl	3c04c <ZEsarUXInterface::commandMatch(char const*, char const*) [clone .constprop.2]>
   3cf8c:	e2504000 	subs	r4, r0, #0
   3cf90:	0a00000d 	beq	3cfcc <ZEsarUXInterface::handleLine(char*, char*, int, unsigned long)+0xadc>
        LogWrite(FromZEsarUXInterface, LOG_DEBUG, "enable breakpoint %s", argStr);
   3cf94:	e1a03008 	mov	r3, r8
   3cf98:	e59f23dc 	ldr	r2, [pc, #988]	; 3d37c <ZEsarUXInterface::handleLine(char*, char*, int, unsigned long)+0xe8c>
   3cf9c:	e3a01004 	mov	r1, #4
   3cfa0:	e59f036c 	ldr	r0, [pc, #876]	; 3d314 <ZEsarUXInterface::handleLine(char*, char*, int, unsigned long)+0xe24>
   3cfa4:	ebff9c73 	bl	24178 <LogWrite>
        int breakpointIdx = strtol(argStr, NULL, 10) - 1;
   3cfa8:	e1a00008 	mov	r0, r8
   3cfac:	e3a0200a 	mov	r2, #10
   3cfb0:	e3a01000 	mov	r1, #0
   3cfb4:	eb0044d9 	bl	4e320 <strtol>
        _breakpoints.enableBreakpoint(idx, enabled);
   3cfb8:	e3a02001 	mov	r2, #1
   3cfbc:	e2401001 	sub	r1, r0, #1
   3cfc0:	e59f038c 	ldr	r0, [pc, #908]	; 3d354 <ZEsarUXInterface::handleLine(char*, char*, int, unsigned long)+0xe64>
   3cfc4:	ebfff4b8 	bl	3a2ac <TargetBreakpoints::enableBreakpoint(int, bool)>
   3cfc8:	eafffd7e 	b	3c5c8 <ZEsarUXInterface::handleLine(char*, char*, int, unsigned long)+0xd8>
    else if (commandMatch(cmdStr, "disable-breakpoint"))
   3cfcc:	e59f13ac 	ldr	r1, [pc, #940]	; 3d380 <ZEsarUXInterface::handleLine(char*, char*, int, unsigned long)+0xe90>
   3cfd0:	e1a00005 	mov	r0, r5
   3cfd4:	ebfffc1c 	bl	3c04c <ZEsarUXInterface::commandMatch(char const*, char const*) [clone .constprop.2]>
   3cfd8:	e3500000 	cmp	r0, #0
   3cfdc:	0a000008 	beq	3d004 <ZEsarUXInterface::handleLine(char*, char*, int, unsigned long)+0xb14>
        int breakpointIdx = strtol(argStr, NULL, 10) - 1;
   3cfe0:	e1a01004 	mov	r1, r4
   3cfe4:	e1a00008 	mov	r0, r8
   3cfe8:	e3a0200a 	mov	r2, #10
   3cfec:	eb0044cb 	bl	4e320 <strtol>
   3cff0:	e1a02004 	mov	r2, r4
   3cff4:	e2401001 	sub	r1, r0, #1
   3cff8:	e59f0354 	ldr	r0, [pc, #852]	; 3d354 <ZEsarUXInterface::handleLine(char*, char*, int, unsigned long)+0xe64>
   3cffc:	ebfff4aa 	bl	3a2ac <TargetBreakpoints::enableBreakpoint(int, bool)>
   3d000:	eafffd70 	b	3c5c8 <ZEsarUXInterface::handleLine(char*, char*, int, unsigned long)+0xd8>
    else if (commandMatch(cmdStr, "clear-membreakpoints"))
   3d004:	e59f1378 	ldr	r1, [pc, #888]	; 3d384 <ZEsarUXInterface::handleLine(char*, char*, int, unsigned long)+0xe94>
   3d008:	e1a00005 	mov	r0, r5
   3d00c:	ebfffc0e 	bl	3c04c <ZEsarUXInterface::commandMatch(char const*, char const*) [clone .constprop.2]>
   3d010:	e3500000 	cmp	r0, #0
   3d014:	1afffd6b 	bne	3c5c8 <ZEsarUXInterface::handleLine(char*, char*, int, unsigned long)+0xd8>
    else if (commandMatch(cmdStr, "set-membreakpoint"))
   3d018:	e59f1368 	ldr	r1, [pc, #872]	; 3d388 <ZEsarUXInterface::handleLine(char*, char*, int, unsigned long)+0xe98>
   3d01c:	e1a00005 	mov	r0, r5
   3d020:	ebfffc09 	bl	3c04c <ZEsarUXInterface::commandMatch(char const*, char const*) [clone .constprop.2]>
   3d024:	e2504000 	subs	r4, r0, #0
   3d028:	1afffd66 	bne	3c5c8 <ZEsarUXInterface::handleLine(char*, char*, int, unsigned long)+0xd8>
    else if (commandMatch(cmdStr, "clear-fast-breakpoint"))
   3d02c:	e59f1358 	ldr	r1, [pc, #856]	; 3d38c <ZEsarUXInterface::handleLine(char*, char*, int, unsigned long)+0xe9c>
   3d030:	e1a00005 	mov	r0, r5
   3d034:	ebfffc04 	bl	3c04c <ZEsarUXInterface::commandMatch(char const*, char const*) [clone .constprop.2]>
   3d038:	e250a000 	subs	sl, r0, #0
   3d03c:	0a000008 	beq	3d064 <ZEsarUXInterface::handleLine(char*, char*, int, unsigned long)+0xb74>
        int breakpointAddr = strtol(argStr, NULL, 10);
   3d040:	e1a01004 	mov	r1, r4
   3d044:	e1a00008 	mov	r0, r8
   3d048:	e3a0200a 	mov	r2, #10
   3d04c:	eb0044b3 	bl	4e320 <strtol>
    }
    static void setFastBreakpoint(uint32_t addr, bool en)
    {
        _breakpoints.setFastBreakpoint(addr, en);
   3d050:	e1a02004 	mov	r2, r4
   3d054:	e1a01000 	mov	r1, r0
   3d058:	e59f02f4 	ldr	r0, [pc, #756]	; 3d354 <ZEsarUXInterface::handleLine(char*, char*, int, unsigned long)+0xe64>
   3d05c:	ebfff4f5 	bl	3a438 <TargetBreakpoints::setFastBreakpoint(unsigned long, bool)>
   3d060:	eafffd58 	b	3c5c8 <ZEsarUXInterface::handleLine(char*, char*, int, unsigned long)+0xd8>
    else if (commandMatch(cmdStr, "set-fast-breakpoint"))
   3d064:	e59f1324 	ldr	r1, [pc, #804]	; 3d390 <ZEsarUXInterface::handleLine(char*, char*, int, unsigned long)+0xea0>
   3d068:	e1a00005 	mov	r0, r5
   3d06c:	ebfffbf6 	bl	3c04c <ZEsarUXInterface::commandMatch(char const*, char const*) [clone .constprop.2]>
   3d070:	e2504000 	subs	r4, r0, #0
   3d074:	0a000008 	beq	3d09c <ZEsarUXInterface::handleLine(char*, char*, int, unsigned long)+0xbac>
        int breakpointAddr = strtol(argStr, NULL, 10);
   3d078:	e1a0100a 	mov	r1, sl
   3d07c:	e1a00008 	mov	r0, r8
   3d080:	e3a0200a 	mov	r2, #10
   3d084:	eb0044a5 	bl	4e320 <strtol>
   3d088:	e3a02001 	mov	r2, #1
   3d08c:	e1a01000 	mov	r1, r0
   3d090:	e59f02bc 	ldr	r0, [pc, #700]	; 3d354 <ZEsarUXInterface::handleLine(char*, char*, int, unsigned long)+0xe64>
   3d094:	ebfff4e7 	bl	3a438 <TargetBreakpoints::setFastBreakpoint(unsigned long, bool)>
   3d098:	eafffd4a 	b	3c5c8 <ZEsarUXInterface::handleLine(char*, char*, int, unsigned long)+0xd8>
    else if (commandMatch(cmdStr, "clear-all-fast-breakpoints"))
   3d09c:	e59f12f0 	ldr	r1, [pc, #752]	; 3d394 <ZEsarUXInterface::handleLine(char*, char*, int, unsigned long)+0xea4>
   3d0a0:	e1a00005 	mov	r0, r5
   3d0a4:	ebfffbe8 	bl	3c04c <ZEsarUXInterface::commandMatch(char const*, char const*) [clone .constprop.2]>
   3d0a8:	e3500000 	cmp	r0, #0
        return _breakpointsEnabled;
    }
    void setFastBreakpoint(uint32_t addr, bool en);
    void clearFastBreakpoints()
    {
        _fastBreakpointsNumEnabled = 0;
   3d0ac:	159f32e4 	ldrne	r3, [pc, #740]	; 3d398 <ZEsarUXInterface::handleLine(char*, char*, int, unsigned long)+0xea8>
   3d0b0:	15834bcc 	strne	r4, [r3, #3020]	; 0xbcc
   3d0b4:	1afffd43 	bne	3c5c8 <ZEsarUXInterface::handleLine(char*, char*, int, unsigned long)+0xd8>
    else if (commandMatch(cmdStr, "set-fast-watchpoint"))
   3d0b8:	e59f12dc 	ldr	r1, [pc, #732]	; 3d39c <ZEsarUXInterface::handleLine(char*, char*, int, unsigned long)+0xeac>
   3d0bc:	e1a00005 	mov	r0, r5
   3d0c0:	ebfffbe1 	bl	3c04c <ZEsarUXInterface::commandMatch(char const*, char const*) [clone .constprop.2]>
   3d0c4:	e3500000 	cmp	r0, #0
   3d0c8:	1afffd3e 	bne	3c5c8 <ZEsarUXInterface::handleLine(char*, char*, int, unsigned long)+0xd8>
    else if (commandMatch(cmdStr, "hard-reset-cpu"))
   3d0cc:	e59f12cc 	ldr	r1, [pc, #716]	; 3d3a0 <ZEsarUXInterface::handleLine(char*, char*, int, unsigned long)+0xeb0>
   3d0d0:	e1a00005 	mov	r0, r5
   3d0d4:	ebfffbdc 	bl	3c04c <ZEsarUXInterface::commandMatch(char const*, char const*) [clone .constprop.2]>
   3d0d8:	e3500000 	cmp	r0, #0
   3d0dc:	0a00000b 	beq	3d110 <ZEsarUXInterface::handleLine(char*, char*, int, unsigned long)+0xc20>
        LogWrite(FromZEsarUXInterface, LOG_DEBUG, "Reset machine");
   3d0e0:	e59f22bc 	ldr	r2, [pc, #700]	; 3d3a4 <ZEsarUXInterface::handleLine(char*, char*, int, unsigned long)+0xeb4>
   3d0e4:	e3a01004 	mov	r1, #4
   3d0e8:	e59f0224 	ldr	r0, [pc, #548]	; 3d314 <ZEsarUXInterface::handleLine(char*, char*, int, unsigned long)+0xe24>
   3d0ec:	ebff9c21 	bl	24178 <LogWrite>
        BusAccess::busAccessReset();
   3d0f0:	ebffe796 	bl	36f50 <BusAccess::busAccessReset()>
        TargetTracker::targetReset();
   3d0f4:	ebfff6c0 	bl	3abfc <TargetTracker::targetReset()>
        _resetPending = true;
   3d0f8:	e3a03001 	mov	r3, #1
   3d0fc:	e59d4014 	ldr	r4, [sp, #20]
   3d100:	e5c4300d 	strb	r3, [r4, #13]
        _resetPendingTimeUs = micros();
   3d104:	ebffe5a3 	bl	36798 <micros>
   3d108:	e5840010 	str	r0, [r4, #16]
   3d10c:	eafffd2d 	b	3c5c8 <ZEsarUXInterface::handleLine(char*, char*, int, unsigned long)+0xd8>
    else if (commandMatch(cmdStr, "reset-tstates-partial"))
   3d110:	e59f1290 	ldr	r1, [pc, #656]	; 3d3a8 <ZEsarUXInterface::handleLine(char*, char*, int, unsigned long)+0xeb8>
   3d114:	e1a00005 	mov	r0, r5
   3d118:	ebfffbcb 	bl	3c04c <ZEsarUXInterface::commandMatch(char const*, char const*) [clone .constprop.2]>
   3d11c:	e3500000 	cmp	r0, #0
   3d120:	1afffd28 	bne	3c5c8 <ZEsarUXInterface::handleLine(char*, char*, int, unsigned long)+0xd8>
    else if (commandMatch(cmdStr, "get-tstates-partial"))
   3d124:	e59f1280 	ldr	r1, [pc, #640]	; 3d3ac <ZEsarUXInterface::handleLine(char*, char*, int, unsigned long)+0xebc>
   3d128:	e1a00005 	mov	r0, r5
   3d12c:	ebfffbc6 	bl	3c04c <ZEsarUXInterface::commandMatch(char const*, char const*) [clone .constprop.2]>
   3d130:	e3500000 	cmp	r0, #0
   3d134:	1afffd23 	bne	3c5c8 <ZEsarUXInterface::handleLine(char*, char*, int, unsigned long)+0xd8>
    else if (commandMatch(cmdStr, "get-cpu-frequency"))
   3d138:	e59f1270 	ldr	r1, [pc, #624]	; 3d3b0 <ZEsarUXInterface::handleLine(char*, char*, int, unsigned long)+0xec0>
   3d13c:	e1a00005 	mov	r0, r5
   3d140:	ebfffbc1 	bl	3c04c <ZEsarUXInterface::commandMatch(char const*, char const*) [clone .constprop.2]>
   3d144:	e2504000 	subs	r4, r0, #0
   3d148:	1afffd1e 	bne	3c5c8 <ZEsarUXInterface::handleLine(char*, char*, int, unsigned long)+0xd8>
    else if (commandMatch(cmdStr, "quit"))
   3d14c:	e59f1260 	ldr	r1, [pc, #608]	; 3d3b4 <ZEsarUXInterface::handleLine(char*, char*, int, unsigned long)+0xec4>
   3d150:	e1a00005 	mov	r0, r5
   3d154:	ebfffbbc 	bl	3c04c <ZEsarUXInterface::commandMatch(char const*, char const*) [clone .constprop.2]>
   3d158:	e3500000 	cmp	r0, #0
   3d15c:	0a000006 	beq	3d17c <ZEsarUXInterface::handleLine(char*, char*, int, unsigned long)+0xc8c>
        LogWrite(FromZEsarUXInterface, LOG_DEBUG, "TargetTracker OFF");
   3d160:	e59f2250 	ldr	r2, [pc, #592]	; 3d3b8 <ZEsarUXInterface::handleLine(char*, char*, int, unsigned long)+0xec8>
   3d164:	e3a01004 	mov	r1, #4
   3d168:	e59f01a4 	ldr	r0, [pc, #420]	; 3d314 <ZEsarUXInterface::handleLine(char*, char*, int, unsigned long)+0xe24>
   3d16c:	ebff9c01 	bl	24178 <LogWrite>
        TargetTracker::enable(false);
   3d170:	e1a00004 	mov	r0, r4
   3d174:	ebfff661 	bl	3ab00 <TargetTracker::enable(bool)>
   3d178:	eafffd12 	b	3c5c8 <ZEsarUXInterface::handleLine(char*, char*, int, unsigned long)+0xd8>
    else if (commandMatch(cmdStr, "enter-cpu-step"))
   3d17c:	e59f1238 	ldr	r1, [pc, #568]	; 3d3bc <ZEsarUXInterface::handleLine(char*, char*, int, unsigned long)+0xecc>
   3d180:	e1a00005 	mov	r0, r5
   3d184:	ebfffbb0 	bl	3c04c <ZEsarUXInterface::commandMatch(char const*, char const*) [clone .constprop.2]>
   3d188:	e3500000 	cmp	r0, #0
   3d18c:	0a00000b 	beq	3d1c0 <ZEsarUXInterface::handleLine(char*, char*, int, unsigned long)+0xcd0>
        BusAccess::busAccessReset();
   3d190:	ebffe76e 	bl	36f50 <BusAccess::busAccessReset()>
        LogWrite(FromZEsarUXInterface, LOG_DEBUG, "TargetTracker ON");
   3d194:	e59f2224 	ldr	r2, [pc, #548]	; 3d3c0 <ZEsarUXInterface::handleLine(char*, char*, int, unsigned long)+0xed0>
   3d198:	e3a01004 	mov	r1, #4
   3d19c:	e59f0170 	ldr	r0, [pc, #368]	; 3d314 <ZEsarUXInterface::handleLine(char*, char*, int, unsigned long)+0xe24>
   3d1a0:	ebff9bf4 	bl	24178 <LogWrite>
        if (_resetPending)
   3d1a4:	e59d3014 	ldr	r3, [sp, #20]
   3d1a8:	e5d3300d 	ldrb	r3, [r3, #13]
   3d1ac:	e3530000 	cmp	r3, #0
   3d1b0:	1a00001c 	bne	3d228 <ZEsarUXInterface::handleLine(char*, char*, int, unsigned long)+0xd38>
        TargetTracker::enable(true);
   3d1b4:	e3a00001 	mov	r0, #1
   3d1b8:	ebfff650 	bl	3ab00 <TargetTracker::enable(bool)>
   3d1bc:	eafffd01 	b	3c5c8 <ZEsarUXInterface::handleLine(char*, char*, int, unsigned long)+0xd8>
    else if (commandMatch(cmdStr, "cpu-step-over"))
   3d1c0:	e59f11fc 	ldr	r1, [pc, #508]	; 3d3c4 <ZEsarUXInterface::handleLine(char*, char*, int, unsigned long)+0xed4>
   3d1c4:	e1a00005 	mov	r0, r5
   3d1c8:	ebfffb9f 	bl	3c04c <ZEsarUXInterface::commandMatch(char const*, char const*) [clone .constprop.2]>
   3d1cc:	e2504000 	subs	r4, r0, #0
   3d1d0:	1a00003a 	bne	3d2c0 <ZEsarUXInterface::handleLine(char*, char*, int, unsigned long)+0xdd0>
    else if (commandMatch(cmdStr, "cpu-step"))
   3d1d4:	e59f11ec 	ldr	r1, [pc, #492]	; 3d3c8 <ZEsarUXInterface::handleLine(char*, char*, int, unsigned long)+0xed8>
   3d1d8:	e1a00005 	mov	r0, r5
   3d1dc:	ebfffb9a 	bl	3c04c <ZEsarUXInterface::commandMatch(char const*, char const*) [clone .constprop.2]>
   3d1e0:	e2504000 	subs	r4, r0, #0
   3d1e4:	1a000030 	bne	3d2ac <ZEsarUXInterface::handleLine(char*, char*, int, unsigned long)+0xdbc>
    else if (commandMatch(cmdStr, "run"))
   3d1e8:	e59f11dc 	ldr	r1, [pc, #476]	; 3d3cc <ZEsarUXInterface::handleLine(char*, char*, int, unsigned long)+0xedc>
   3d1ec:	e1a00005 	mov	r0, r5
   3d1f0:	ebfffb95 	bl	3c04c <ZEsarUXInterface::commandMatch(char const*, char const*) [clone .constprop.2]>
   3d1f4:	e2504000 	subs	r4, r0, #0
   3d1f8:	1a000022 	bne	3d288 <ZEsarUXInterface::handleLine(char*, char*, int, unsigned long)+0xd98>
    else if (commandMatch(cmdStr, "\n"))
   3d1fc:	e59f10f0 	ldr	r1, [pc, #240]	; 3d2f4 <ZEsarUXInterface::handleLine(char*, char*, int, unsigned long)+0xe04>
   3d200:	e1a00005 	mov	r0, r5
   3d204:	ebfffb90 	bl	3c04c <ZEsarUXInterface::commandMatch(char const*, char const*) [clone .constprop.2]>
   3d208:	e3500000 	cmp	r0, #0
   3d20c:	0a000011 	beq	3d258 <ZEsarUXInterface::handleLine(char*, char*, int, unsigned long)+0xd68>
        LogWrite(FromZEsarUXInterface, LOG_DEBUG, "blank (step)");
   3d210:	e59f21b8 	ldr	r2, [pc, #440]	; 3d3d0 <ZEsarUXInterface::handleLine(char*, char*, int, unsigned long)+0xee0>
   3d214:	e3a01004 	mov	r1, #4
   3d218:	e59f00f4 	ldr	r0, [pc, #244]	; 3d314 <ZEsarUXInterface::handleLine(char*, char*, int, unsigned long)+0xe24>
   3d21c:	ebff9bd5 	bl	24178 <LogWrite>
        TargetTracker::stepInto();
   3d220:	ebfff800 	bl	3b228 <TargetTracker::stepInto()>
   3d224:	eafffce7 	b	3c5c8 <ZEsarUXInterface::handleLine(char*, char*, int, unsigned long)+0xd8>
            if (!isTimeout(micros(), _resetPendingTimeUs, MAX_TIME_RESET_PENDING_US))
   3d228:	ebffe55a 	bl	36798 <micros>
   3d22c:	e59d3014 	ldr	r3, [sp, #20]
   3d230:	e59f219c 	ldr	r2, [pc, #412]	; 3d3d4 <ZEsarUXInterface::handleLine(char*, char*, int, unsigned long)+0xee4>
   3d234:	e5931010 	ldr	r1, [r3, #16]
   3d238:	ebffe56b 	bl	367ec <isTimeout>
   3d23c:	e3500000 	cmp	r0, #0
   3d240:	1a000000 	bne	3d248 <ZEsarUXInterface::handleLine(char*, char*, int, unsigned long)+0xd58>
                McManager::targetReset();
   3d244:	ebffc50a 	bl	2e674 <McManager::targetReset()>
            _resetPending = false;
   3d248:	e3a03000 	mov	r3, #0
   3d24c:	e59d2014 	ldr	r2, [sp, #20]
   3d250:	e5c2300d 	strb	r3, [r2, #13]
   3d254:	eaffffd6 	b	3d1b4 <ZEsarUXInterface::handleLine(char*, char*, int, unsigned long)+0xcc4>
        LogWrite(FromZEsarUXInterface, LOG_DEBUG, "cmdStr %s %02x %02x %02x", cmdStr, cmdStr[0], cmdStr[1], cmdStr[2]);
   3d258:	e5d52002 	ldrb	r2, [r5, #2]
   3d25c:	e1a03005 	mov	r3, r5
   3d260:	e58d2008 	str	r2, [sp, #8]
   3d264:	e5d51001 	ldrb	r1, [r5, #1]
   3d268:	e59f2168 	ldr	r2, [pc, #360]	; 3d3d8 <ZEsarUXInterface::handleLine(char*, char*, int, unsigned long)+0xee8>
   3d26c:	e58d1004 	str	r1, [sp, #4]
   3d270:	e5d50000 	ldrb	r0, [r5]
   3d274:	e3a01004 	mov	r1, #4
   3d278:	e58d0000 	str	r0, [sp]
   3d27c:	e59f0090 	ldr	r0, [pc, #144]	; 3d314 <ZEsarUXInterface::handleLine(char*, char*, int, unsigned long)+0xe24>
   3d280:	ebff9bbc 	bl	24178 <LogWrite>
   3d284:	eafffccf 	b	3c5c8 <ZEsarUXInterface::handleLine(char*, char*, int, unsigned long)+0xd8>
        TargetTracker::stepRun();
   3d288:	ebfff820 	bl	3b310 <TargetTracker::stepRun()>
        _stepCompletionPending = true;
   3d28c:	e3a03001 	mov	r3, #1
   3d290:	e59d1014 	ldr	r1, [sp, #20]
        strlcat(pResponse, "Running until a breakpoint, key press or data sent, menu opening or other event\n", 
   3d294:	e1a02007 	mov	r2, r7
        _stepCompletionPending = true;
   3d298:	e5c13014 	strb	r3, [r1, #20]
        strlcat(pResponse, "Running until a breakpoint, key press or data sent, menu opening or other event\n", 
   3d29c:	e1a00006 	mov	r0, r6
   3d2a0:	e59f1134 	ldr	r1, [pc, #308]	; 3d3dc <ZEsarUXInterface::handleLine(char*, char*, int, unsigned long)+0xeec>
   3d2a4:	eb004097 	bl	4d508 <strlcat>
        return true;    
   3d2a8:	eafffccf 	b	3c5ec <ZEsarUXInterface::handleLine(char*, char*, int, unsigned long)+0xfc>
        TargetTracker::stepInto();
   3d2ac:	ebfff7dd 	bl	3b228 <TargetTracker::stepInto()>
        _stepCompletionPending = true;
   3d2b0:	e3a03001 	mov	r3, #1
   3d2b4:	e59d2014 	ldr	r2, [sp, #20]
   3d2b8:	e5c23014 	strb	r3, [r2, #20]
        return true;
   3d2bc:	eafffcca 	b	3c5ec <ZEsarUXInterface::handleLine(char*, char*, int, unsigned long)+0xfc>
        TargetTracker::stepOver();
   3d2c0:	ebfff7e7 	bl	3b264 <TargetTracker::stepOver()>
        _stepCompletionPending = true;
   3d2c4:	e3a03001 	mov	r3, #1
   3d2c8:	e59d2014 	ldr	r2, [sp, #20]
   3d2cc:	e5c23014 	strb	r3, [r2, #20]
        return true;
   3d2d0:	eafffcc5 	b	3c5ec <ZEsarUXInterface::handleLine(char*, char*, int, unsigned long)+0xfc>
   3d2d4:	00053ed8 	.word	0x00053ed8
   3d2d8:	00053e00 	.word	0x00053e00
   3d2dc:	00055db7 	.word	0x00055db7
   3d2e0:	00055dc0 	.word	0x00055dc0
   3d2e4:	00055cf4 	.word	0x00055cf4
   3d2e8:	00055d08 	.word	0x00055d08
   3d2ec:	00055dcf 	.word	0x00055dcf
   3d2f0:	00055ddc 	.word	0x00055ddc
   3d2f4:	0005567c 	.word	0x0005567c
   3d2f8:	00055de3 	.word	0x00055de3
   3d2fc:	00055df8 	.word	0x00055df8
   3d300:	00055e0f 	.word	0x00055e0f
   3d304:	00055448 	.word	0x00055448
   3d308:	00055e33 	.word	0x00055e33
   3d30c:	00055e47 	.word	0x00055e47
   3d310:	00055e54 	.word	0x00055e54
   3d314:	00055ce0 	.word	0x00055ce0
   3d318:	00055e60 	.word	0x00055e60
   3d31c:	00055e7c 	.word	0x00055e7c
   3d320:	00055e98 	.word	0x00055e98
   3d324:	00055e24 	.word	0x00055e24
   3d328:	00055ec3 	.word	0x00055ec3
   3d32c:	00055ed3 	.word	0x00055ed3
   3d330:	00055ee4 	.word	0x00055ee4
   3d334:	00055ef8 	.word	0x00055ef8
   3d338:	0004f410 	.word	0x0004f410
   3d33c:	00055ea8 	.word	0x00055ea8
   3d340:	00055f04 	.word	0x00055f04
   3d344:	00055f14 	.word	0x00055f14
   3d348:	00055f28 	.word	0x00055f28
   3d34c:	00055f3c 	.word	0x00055f3c
   3d350:	00055f48 	.word	0x00055f48
   3d354:	0009ca90 	.word	0x0009ca90
   3d358:	00055f5c 	.word	0x00055f5c
   3d35c:	00055f70 	.word	0x00055f70
   3d360:	00055f80 	.word	0x00055f80
   3d364:	00055f98 	.word	0x00055f98
   3d368:	00055fd0 	.word	0x00055fd0
   3d36c:	00055fe8 	.word	0x00055fe8
   3d370:	00056008 	.word	0x00056008
   3d374:	00056010 	.word	0x00056010
   3d378:	00056030 	.word	0x00056030
   3d37c:	00056044 	.word	0x00056044
   3d380:	0005605c 	.word	0x0005605c
   3d384:	00056070 	.word	0x00056070
   3d388:	00056088 	.word	0x00056088
   3d38c:	0005609c 	.word	0x0005609c
   3d390:	000560b4 	.word	0x000560b4
   3d394:	000560c8 	.word	0x000560c8
   3d398:	0009ea90 	.word	0x0009ea90
   3d39c:	000560e4 	.word	0x000560e4
   3d3a0:	000560f8 	.word	0x000560f8
   3d3a4:	00056108 	.word	0x00056108
   3d3a8:	00056118 	.word	0x00056118
   3d3ac:	00056130 	.word	0x00056130
   3d3b0:	00056144 	.word	0x00056144
   3d3b4:	00056158 	.word	0x00056158
   3d3b8:	00056160 	.word	0x00056160
   3d3bc:	00056174 	.word	0x00056174
   3d3c0:	00056184 	.word	0x00056184
   3d3c4:	00056198 	.word	0x00056198
   3d3c8:	000561a8 	.word	0x000561a8
   3d3cc:	000561b4 	.word	0x000561b4
   3d3d0:	0005620c 	.word	0x0005620c
   3d3d4:	000186a0 	.word	0x000186a0
   3d3d8:	0005621c 	.word	0x0005621c
   3d3dc:	000561b8 	.word	0x000561b8

0003d3e0 <ZEsarUXInterface::handleMessage(char const*, char const*, unsigned long)>:
{
   3d3e0:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
   3d3e4:	e24ddd2f 	sub	sp, sp, #3008	; 0xbc0
   3d3e8:	e24dd004 	sub	sp, sp, #4
    strlcpy(cmdToSplit, pZesaruxMsg, ZEsarUX_CMD_MAX_LEN);
   3d3ec:	e1a01002 	mov	r1, r2
{
   3d3f0:	e1a07000 	mov	r7, r0
    strlcpy(cmdToSplit, pZesaruxMsg, ZEsarUX_CMD_MAX_LEN);
   3d3f4:	e3a02ffa 	mov	r2, #1000	; 0x3e8
   3d3f8:	e28d0008 	add	r0, sp, #8
{
   3d3fc:	e1a05003 	mov	r5, r3
    strlcpy(cmdToSplit, pZesaruxMsg, ZEsarUX_CMD_MAX_LEN);
   3d400:	eb004070 	bl	4d5c8 <strlcpy>
    while (*pCmdCur)
   3d404:	e5dd3008 	ldrb	r3, [sp, #8]
   3d408:	e3530000 	cmp	r3, #0
   3d40c:	0a00001e 	beq	3d48c <ZEsarUXInterface::handleMessage(char const*, char const*, unsigned long)+0xac>
                *pCmdNext = 0;
   3d410:	e3a06000 	mov	r6, #0
        CommandHandler::sendWithJSON("zesarux", "", zesaruxIndex, (const uint8_t*)respMsg, strlen(respMsg));
   3d414:	e59f90a0 	ldr	r9, [pc, #160]	; 3d4bc <ZEsarUXInterface::handleMessage(char const*, char const*, unsigned long)+0xdc>
   3d418:	e59f80a0 	ldr	r8, [pc, #160]	; 3d4c0 <ZEsarUXInterface::handleMessage(char const*, char const*, unsigned long)+0xe0>
    char* pCmdCur = cmdToSplit;
   3d41c:	e28d1008 	add	r1, sp, #8
            if (*pCmdNext == '\n')
   3d420:	e353000a 	cmp	r3, #10
   3d424:	e1a04001 	mov	r4, r1
   3d428:	1a000002 	bne	3d438 <ZEsarUXInterface::handleMessage(char const*, char const*, unsigned long)+0x58>
   3d42c:	ea000019 	b	3d498 <ZEsarUXInterface::handleMessage(char const*, char const*, unsigned long)+0xb8>
   3d430:	e353000a 	cmp	r3, #10
   3d434:	0a000017 	beq	3d498 <ZEsarUXInterface::handleMessage(char const*, char const*, unsigned long)+0xb8>
        while(*pCmdNext)
   3d438:	e5f43001 	ldrb	r3, [r4, #1]!
   3d43c:	e3530000 	cmp	r3, #0
   3d440:	1afffffa 	bne	3d430 <ZEsarUXInterface::handleMessage(char const*, char const*, unsigned long)+0x50>
        handleLine(pCmdCur, respMsg, MAX_RESP_MSG_LEN, zesaruxIndex);
   3d444:	e3a03e7d 	mov	r3, #2000	; 0x7d0
   3d448:	e28d2e3f 	add	r2, sp, #1008	; 0x3f0
   3d44c:	e58d5000 	str	r5, [sp]
   3d450:	e1a00007 	mov	r0, r7
        respMsg[0] = 0;
   3d454:	e5cd63f0 	strb	r6, [sp, #1008]	; 0x3f0
        handleLine(pCmdCur, respMsg, MAX_RESP_MSG_LEN, zesaruxIndex);
   3d458:	ebfffc24 	bl	3c4f0 <ZEsarUXInterface::handleLine(char*, char*, int, unsigned long)>
        CommandHandler::sendWithJSON("zesarux", "", zesaruxIndex, (const uint8_t*)respMsg, strlen(respMsg));
   3d45c:	e28d0e3f 	add	r0, sp, #1008	; 0x3f0
   3d460:	eb00406d 	bl	4d61c <strlen>
   3d464:	e28d3e3f 	add	r3, sp, #1008	; 0x3f0
   3d468:	e58d0000 	str	r0, [sp]
   3d46c:	e1a01009 	mov	r1, r9
   3d470:	e1a02005 	mov	r2, r5
   3d474:	e1a00008 	mov	r0, r8
   3d478:	ebffa687 	bl	26e9c <CommandHandler::sendWithJSON(char const*, char const*, unsigned long, unsigned char const*, unsigned long)>
    while (*pCmdCur)
   3d47c:	e5d43000 	ldrb	r3, [r4]
   3d480:	e1a01004 	mov	r1, r4
   3d484:	e3530000 	cmp	r3, #0
   3d488:	1affffe4 	bne	3d420 <ZEsarUXInterface::handleMessage(char const*, char const*, unsigned long)+0x40>
}
   3d48c:	e28ddd2f 	add	sp, sp, #3008	; 0xbc0
   3d490:	e28dd004 	add	sp, sp, #4
   3d494:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
                if (*(pCmdNext+1) == '\n')
   3d498:	e5d42001 	ldrb	r2, [r4, #1]
   3d49c:	e2843001 	add	r3, r4, #1
   3d4a0:	e352000a 	cmp	r2, #10
   3d4a4:	02842002 	addeq	r2, r4, #2
                    pCmdNext++;
   3d4a8:	01a04003 	moveq	r4, r3
   3d4ac:	01a03002 	moveq	r3, r2
                *pCmdNext = 0;
   3d4b0:	e5c46000 	strb	r6, [r4]
                pCmdNext++;
   3d4b4:	e1a04003 	mov	r4, r3
                break;
   3d4b8:	eaffffe1 	b	3d444 <ZEsarUXInterface::handleMessage(char const*, char const*, unsigned long)+0x64>
   3d4bc:	00053e00 	.word	0x00053e00
   3d4c0:	00055d38 	.word	0x00055d38

0003d4c4 <ZEsarUXInterface::handleRxMsg(char const*, unsigned char const*, int, char*, int)>:
{
   3d4c4:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    pRespJson[0] = 0;
   3d4c8:	e3a04000 	mov	r4, #0
{
   3d4cc:	e24ddeff 	sub	sp, sp, #4080	; 0xff0
    pRespJson[0] = 0;
   3d4d0:	e5c34000 	strb	r4, [r3]
{
   3d4d4:	e1a06000 	mov	r6, r0
   3d4d8:	e1a08001 	mov	r8, r1
   3d4dc:	e1a07002 	mov	r7, r2
    if (!jsonGetValueForKey("cmdName", pCmdJson, cmdName, MAX_CMD_NAME_STR))
   3d4e0:	e1a01000 	mov	r1, r0
   3d4e4:	e28d201c 	add	r2, sp, #28
   3d4e8:	e3a03032 	mov	r3, #50	; 0x32
   3d4ec:	e59f0170 	ldr	r0, [pc, #368]	; 3d664 <ZEsarUXInterface::handleRxMsg(char const*, unsigned char const*, int, char*, int)+0x1a0>
   3d4f0:	ebff9d3d 	bl	249ec <jsonGetValueForKey>
   3d4f4:	e2505000 	subs	r5, r0, #0
   3d4f8:	1a000003 	bne	3d50c <ZEsarUXInterface::handleRxMsg(char const*, unsigned char const*, int, char*, int)+0x48>
        return false;
   3d4fc:	e3a05000 	mov	r5, #0
}
   3d500:	e1a00005 	mov	r0, r5
   3d504:	e28ddeff 	add	sp, sp, #4080	; 0xff0
   3d508:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    jsonGetValueForKey("msgIdx", pCmdJson, msgIdxStr, MAX_MSGIDX_STR_LEN);
   3d50c:	e3a03014 	mov	r3, #20
   3d510:	e1a01006 	mov	r1, r6
   3d514:	e28d2008 	add	r2, sp, #8
   3d518:	e59f0148 	ldr	r0, [pc, #328]	; 3d668 <ZEsarUXInterface::handleRxMsg(char const*, unsigned char const*, int, char*, int)+0x1a4>
    msgIdxStr[0] = 0;
   3d51c:	e5cd4008 	strb	r4, [sp, #8]
    jsonGetValueForKey("msgIdx", pCmdJson, msgIdxStr, MAX_MSGIDX_STR_LEN);
   3d520:	ebff9d31 	bl	249ec <jsonGetValueForKey>
    if (strcasecmp(cmdName, "zesarux") == 0)
   3d524:	e28d001c 	add	r0, sp, #28
   3d528:	e59f113c 	ldr	r1, [pc, #316]	; 3d66c <ZEsarUXInterface::handleRxMsg(char const*, unsigned char const*, int, char*, int)+0x1a8>
   3d52c:	eb003e96 	bl	4cf8c <strcasecmp>
   3d530:	e2503000 	subs	r3, r0, #0
   3d534:	1afffff0 	bne	3d4fc <ZEsarUXInterface::handleRxMsg(char const*, unsigned char const*, int, char*, int)+0x38>
        uint32_t maxContentLen = ZEsarUX_CMD_MAX_LEN-1 < paramsLen ? ZEsarUX_CMD_MAX_LEN-1 : paramsLen;
   3d538:	e59f4130 	ldr	r4, [pc, #304]	; 3d670 <ZEsarUXInterface::handleRxMsg(char const*, unsigned char const*, int, char*, int)+0x1ac>
        uint32_t zesaruxIndex = strtol(msgIdxStr, NULL, 10);
   3d53c:	e1a01003 	mov	r1, r3
   3d540:	e28d0008 	add	r0, sp, #8
   3d544:	e3a0200a 	mov	r2, #10
        pCommandString[0] = 0;
   3d548:	e5cd3050 	strb	r3, [sp, #80]	; 0x50
        uint32_t zesaruxIndex = strtol(msgIdxStr, NULL, 10);
   3d54c:	eb004373 	bl	4e320 <strtol>
        uint32_t maxContentLen = ZEsarUX_CMD_MAX_LEN-1 < paramsLen ? ZEsarUX_CMD_MAX_LEN-1 : paramsLen;
   3d550:	e1570004 	cmp	r7, r4
   3d554:	b1a04007 	movlt	r4, r7
        if (maxContentLen > 0)
   3d558:	e3540000 	cmp	r4, #0
        uint32_t zesaruxIndex = strtol(msgIdxStr, NULL, 10);
   3d55c:	e1a06000 	mov	r6, r0
            memcpy(pCommandString, (const char*)pParams, maxContentLen);
   3d560:	e28d3050 	add	r3, sp, #80	; 0x50
        if (maxContentLen > 0)
   3d564:	1a000038 	bne	3d64c <ZEsarUXInterface::handleRxMsg(char const*, unsigned char const*, int, char*, int)+0x188>
        pCommandString[maxContentLen] = 0;
   3d568:	e3a07000 	mov	r7, #0
        _pThisInstance->handleMessage(pCmdJson, pCommandString, zesaruxIndex);
   3d56c:	e59fc100 	ldr	ip, [pc, #256]	; 3d674 <ZEsarUXInterface::handleRxMsg(char const*, unsigned char const*, int, char*, int)+0x1b0>
        pCommandString[maxContentLen] = 0;
   3d570:	e28d2eff 	add	r2, sp, #4080	; 0xff0
    strlcpy(cmdToSplit, pZesaruxMsg, ZEsarUX_CMD_MAX_LEN);
   3d574:	e28d0e43 	add	r0, sp, #1072	; 0x430
        pCommandString[maxContentLen] = 0;
   3d578:	e0824004 	add	r4, r2, r4
    strlcpy(cmdToSplit, pZesaruxMsg, ZEsarUX_CMD_MAX_LEN);
   3d57c:	e1a01003 	mov	r1, r3
   3d580:	e2800008 	add	r0, r0, #8
   3d584:	e3a02ffa 	mov	r2, #1000	; 0x3e8
        pCommandString[maxContentLen] = 0;
   3d588:	e5447fa0 	strb	r7, [r4, #-4000]	; 0xfffff060
        _pThisInstance->handleMessage(pCmdJson, pCommandString, zesaruxIndex);
   3d58c:	e59c8000 	ldr	r8, [ip]
    strlcpy(cmdToSplit, pZesaruxMsg, ZEsarUX_CMD_MAX_LEN);
   3d590:	eb00400c 	bl	4d5c8 <strlcpy>
    while (*pCmdCur)
   3d594:	e5dd3438 	ldrb	r3, [sp, #1080]	; 0x438
   3d598:	e1530007 	cmp	r3, r7
   3d59c:	0affffd7 	beq	3d500 <ZEsarUXInterface::handleRxMsg(char const*, unsigned char const*, int, char*, int)+0x3c>
    char* pCmdCur = cmdToSplit;
   3d5a0:	e28d1e43 	add	r1, sp, #1072	; 0x430
        CommandHandler::sendWithJSON("zesarux", "", zesaruxIndex, (const uint8_t*)respMsg, strlen(respMsg));
   3d5a4:	e59fa0cc 	ldr	sl, [pc, #204]	; 3d678 <ZEsarUXInterface::handleRxMsg(char const*, unsigned char const*, int, char*, int)+0x1b4>
   3d5a8:	e59f90bc 	ldr	r9, [pc, #188]	; 3d66c <ZEsarUXInterface::handleRxMsg(char const*, unsigned char const*, int, char*, int)+0x1a8>
    char* pCmdCur = cmdToSplit;
   3d5ac:	e2811008 	add	r1, r1, #8
            if (*pCmdNext == '\n')
   3d5b0:	e353000a 	cmp	r3, #10
   3d5b4:	e1a04001 	mov	r4, r1
   3d5b8:	1a000002 	bne	3d5c8 <ZEsarUXInterface::handleRxMsg(char const*, unsigned char const*, int, char*, int)+0x104>
   3d5bc:	ea000019 	b	3d628 <ZEsarUXInterface::handleRxMsg(char const*, unsigned char const*, int, char*, int)+0x164>
   3d5c0:	e353000a 	cmp	r3, #10
   3d5c4:	0a000017 	beq	3d628 <ZEsarUXInterface::handleRxMsg(char const*, unsigned char const*, int, char*, int)+0x164>
        while(*pCmdNext)
   3d5c8:	e5f43001 	ldrb	r3, [r4, #1]!
   3d5cc:	e3530000 	cmp	r3, #0
   3d5d0:	1afffffa 	bne	3d5c0 <ZEsarUXInterface::handleRxMsg(char const*, unsigned char const*, int, char*, int)+0xfc>
        handleLine(pCmdCur, respMsg, MAX_RESP_MSG_LEN, zesaruxIndex);
   3d5d4:	e3a03e7d 	mov	r3, #2000	; 0x7d0
   3d5d8:	e28d2e82 	add	r2, sp, #2080	; 0x820
   3d5dc:	e58d6000 	str	r6, [sp]
   3d5e0:	e1a00008 	mov	r0, r8
        respMsg[0] = 0;
   3d5e4:	e5cd7820 	strb	r7, [sp, #2080]	; 0x820
        handleLine(pCmdCur, respMsg, MAX_RESP_MSG_LEN, zesaruxIndex);
   3d5e8:	ebfffbc0 	bl	3c4f0 <ZEsarUXInterface::handleLine(char*, char*, int, unsigned long)>
        CommandHandler::sendWithJSON("zesarux", "", zesaruxIndex, (const uint8_t*)respMsg, strlen(respMsg));
   3d5ec:	e28d0e82 	add	r0, sp, #2080	; 0x820
   3d5f0:	eb004009 	bl	4d61c <strlen>
   3d5f4:	e28d3e82 	add	r3, sp, #2080	; 0x820
   3d5f8:	e58d0000 	str	r0, [sp]
   3d5fc:	e1a0100a 	mov	r1, sl
   3d600:	e1a02006 	mov	r2, r6
   3d604:	e1a00009 	mov	r0, r9
   3d608:	ebffa623 	bl	26e9c <CommandHandler::sendWithJSON(char const*, char const*, unsigned long, unsigned char const*, unsigned long)>
    while (*pCmdCur)
   3d60c:	e5d43000 	ldrb	r3, [r4]
   3d610:	e1a01004 	mov	r1, r4
   3d614:	e3530000 	cmp	r3, #0
   3d618:	1affffe4 	bne	3d5b0 <ZEsarUXInterface::handleRxMsg(char const*, unsigned char const*, int, char*, int)+0xec>
}
   3d61c:	e1a00005 	mov	r0, r5
   3d620:	e28ddeff 	add	sp, sp, #4080	; 0xff0
   3d624:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
                if (*(pCmdNext+1) == '\n')
   3d628:	e5d42001 	ldrb	r2, [r4, #1]
   3d62c:	e2843001 	add	r3, r4, #1
   3d630:	e352000a 	cmp	r2, #10
   3d634:	02842002 	addeq	r2, r4, #2
                    pCmdNext++;
   3d638:	01a04003 	moveq	r4, r3
                if (*(pCmdNext+1) == '\n')
   3d63c:	01a03002 	moveq	r3, r2
                *pCmdNext = 0;
   3d640:	e5c47000 	strb	r7, [r4]
                pCmdNext++;
   3d644:	e1a04003 	mov	r4, r3
   3d648:	eaffffe1 	b	3d5d4 <ZEsarUXInterface::handleRxMsg(char const*, unsigned char const*, int, char*, int)+0x110>
            memcpy(pCommandString, (const char*)pParams, maxContentLen);
   3d64c:	e1a00003 	mov	r0, r3
   3d650:	e1a01008 	mov	r1, r8
   3d654:	e1a02004 	mov	r2, r4
   3d658:	eb003dc2 	bl	4cd68 <memcpy>
   3d65c:	e1a03000 	mov	r3, r0
   3d660:	eaffffc0 	b	3d568 <ZEsarUXInterface::handleRxMsg(char const*, unsigned char const*, int, char*, int)+0xa4>
   3d664:	00053b5c 	.word	0x00053b5c
   3d668:	00054260 	.word	0x00054260
   3d66c:	00055d38 	.word	0x00055d38
   3d670:	000003e7 	.word	0x000003e7
   3d674:	000a2094 	.word	0x000a2094
   3d678:	00053e00 	.word	0x00053e00

0003d67c <ZEsarUXInterface::commandMatch(char const*, char const*)>:
    while (*p1 == ' ')
   3d67c:	e5d10000 	ldrb	r0, [r1]
{
   3d680:	e92d4070 	push	{r4, r5, r6, lr}
    while (*p1 == ' ')
   3d684:	e3500020 	cmp	r0, #32
   3d688:	1a000002 	bne	3d698 <ZEsarUXInterface::commandMatch(char const*, char const*)+0x1c>
   3d68c:	e5f10001 	ldrb	r0, [r1, #1]!
   3d690:	e3500020 	cmp	r0, #32
   3d694:	0afffffc 	beq	3d68c <ZEsarUXInterface::commandMatch(char const*, char const*)+0x10>
   3d698:	e1a04001 	mov	r4, r1
   3d69c:	e2425001 	sub	r5, r2, #1
   3d6a0:	ea000008 	b	3d6c8 <ZEsarUXInterface::commandMatch(char const*, char const*)+0x4c>
        if (*p2 == 0)
   3d6a4:	e3530000 	cmp	r3, #0
   3d6a8:	0a00000c 	beq	3d6e0 <ZEsarUXInterface::commandMatch(char const*, char const*)+0x64>
        if (rdtolower(*p1++) != rdtolower(*p2++))
   3d6ac:	ebff9def 	bl	24e70 <rdtolower>
   3d6b0:	e1a06000 	mov	r6, r0
   3d6b4:	e5d50000 	ldrb	r0, [r5]
   3d6b8:	ebff9dec 	bl	24e70 <rdtolower>
   3d6bc:	e1560000 	cmp	r6, r0
   3d6c0:	1a000010 	bne	3d708 <ZEsarUXInterface::commandMatch(char const*, char const*)+0x8c>
   3d6c4:	e5f40001 	ldrb	r0, [r4, #1]!
    while(*p1)
   3d6c8:	e3500000 	cmp	r0, #0
   3d6cc:	e5f53001 	ldrb	r3, [r5, #1]!
   3d6d0:	1afffff3 	bne	3d6a4 <ZEsarUXInterface::commandMatch(char const*, char const*)+0x28>
    return (*p2 == 0);
   3d6d4:	e16f0f13 	clz	r0, r3
   3d6d8:	e1a002a0 	lsr	r0, r0, #5
   3d6dc:	e8bd8070 	pop	{r4, r5, r6, pc}
            while (rdisspace(*p1))
   3d6e0:	e5d40000 	ldrb	r0, [r4]
   3d6e4:	ebff9dc9 	bl	24e10 <rdisspace>
   3d6e8:	e3500000 	cmp	r0, #0
   3d6ec:	e1a05004 	mov	r5, r4
   3d6f0:	e2844001 	add	r4, r4, #1
   3d6f4:	1afffff9 	bne	3d6e0 <ZEsarUXInterface::commandMatch(char const*, char const*)+0x64>
            return *p1 == 0;
   3d6f8:	e5d53000 	ldrb	r3, [r5]
   3d6fc:	e16f0f13 	clz	r0, r3
   3d700:	e1a002a0 	lsr	r0, r0, #5
   3d704:	e8bd8070 	pop	{r4, r5, r6, pc}
            return false;
   3d708:	e3a00000 	mov	r0, #0
}
   3d70c:	e8bd8070 	pop	{r4, r5, r6, pc}

0003d710 <BusRaiderApp::~BusRaiderApp()>:
#include "CommandInterface/CommandHandler.h"

class Display;
class UartMaxi;

class BusRaiderApp
   3d710:	e92d4010 	push	{r4, lr}
   3d714:	e1a04000 	mov	r4, r0
   3d718:	e2800078 	add	r0, r0, #120	; 0x78
   3d71c:	ebffa493 	bl	26970 <CommandHandler::~CommandHandler()>
   3d720:	e1a00004 	mov	r0, r4
   3d724:	e8bd8010 	pop	{r4, pc}

0003d728 <main>:
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Main
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////

extern "C" int main()
{
   3d728:	e92d4080 	push	{r7, lr}
    // Initialise UART
    if (!mainUart.setup(MAIN_UART_BAUD_RATE, 1000000, 100000))
   3d72c:	e59f3128 	ldr	r3, [pc, #296]	; 3d85c <main+0x134>
   3d730:	e59f2128 	ldr	r2, [pc, #296]	; 3d860 <main+0x138>
   3d734:	e3a01ae1 	mov	r1, #921600	; 0xe1000
   3d738:	e59f0124 	ldr	r0, [pc, #292]	; 3d864 <main+0x13c>
   3d73c:	ebffe006 	bl	3575c <UartMaxi::setup(unsigned int, int, int)>
   3d740:	e3500000 	cmp	r0, #0
   3d744:	0a000041 	beq	3d850 <main+0x128>
        // display.statusPut(Display::STATUS_FIELD_ESP_VERSION, Display::STATUS_FAIL, "ESP32: Not Connected, UART Fail");
        microsDelay(5000000);
    }

    // Logging
    LogSetLevel(LOG_DEBUG);
   3d748:	e3a00004 	mov	r0, #4
   3d74c:	ebff9b2a 	bl	243fc <LogSetLevel>
    LogSetOutMsgFn(CommandHandler::logDebug);
   3d750:	e59f0110 	ldr	r0, [pc, #272]	; 3d868 <main+0x140>
   3d754:	ebff9a83 	bl	24168 <LogSetOutMsgFn>
    LogWrite(FromMain, LOG_NOTICE, "Startup ...");
   3d758:	e59f310c 	ldr	r3, [pc, #268]	; 3d86c <main+0x144>
   3d75c:	e59f210c 	ldr	r2, [pc, #268]	; 3d870 <main+0x148>
   3d760:	e5930000 	ldr	r0, [r3]
   3d764:	e3a01003 	mov	r1, #3
   3d768:	ebff9a82 	bl	24178 <LogWrite>

    // Init timers
    timers_init();
   3d76c:	ebff9e13 	bl	24fc0 <timers_init>

    // Initialise graphics system
    display.init();
   3d770:	e59f00fc 	ldr	r0, [pc, #252]	; 3d874 <main+0x14c>
   3d774:	ebffd5f5 	bl	32f50 <Display::init()>

    // Status
    display.statusPut(Display::STATUS_FIELD_PI_VERSION, Display::STATUS_NORMAL, PROG_VERSION);
   3d778:	e3a02000 	mov	r2, #0

    // Target tracker
    TargetTracker::init();

    // BusController, StepValidator
    busController.init();
   3d77c:	e59f40f4 	ldr	r4, [pc, #244]	; 3d878 <main+0x150>
    display.statusPut(Display::STATUS_FIELD_PI_VERSION, Display::STATUS_NORMAL, PROG_VERSION);
   3d780:	e1a01002 	mov	r1, r2
   3d784:	e59f30f0 	ldr	r3, [pc, #240]	; 3d87c <main+0x154>
   3d788:	e59f00e4 	ldr	r0, [pc, #228]	; 3d874 <main+0x14c>
   3d78c:	ebffd636 	bl	3306c <Display::statusPut(int, int, char const*)>
    display.statusPut(Display::STATUS_FIELD_ESP_VERSION, Display::STATUS_FAIL, "ESP32 Not Connected");
   3d790:	e2440d2d 	sub	r0, r4, #2880	; 0xb40
   3d794:	e59f30e4 	ldr	r3, [pc, #228]	; 3d880 <main+0x158>
   3d798:	e3a02001 	mov	r2, #1
   3d79c:	e3a01002 	mov	r1, #2
   3d7a0:	e2400008 	sub	r0, r0, #8
   3d7a4:	ebffd630 	bl	3306c <Display::statusPut(int, int, char const*)>
    display.statusPut(Display::STATUS_FIELD_LINKS, Display::STATUS_NORMAL, PROG_LINKS_1);
   3d7a8:	e2440d2d 	sub	r0, r4, #2880	; 0xb40
   3d7ac:	e59f30d0 	ldr	r3, [pc, #208]	; 3d884 <main+0x15c>
   3d7b0:	e3a02000 	mov	r2, #0
   3d7b4:	e3a01001 	mov	r1, #1
   3d7b8:	e2400008 	sub	r0, r0, #8
   3d7bc:	ebffd62a 	bl	3306c <Display::statusPut(int, int, char const*)>
    BusAccess::init();
   3d7c0:	ebffe5b7 	bl	36ea4 <BusAccess::init()>
    HwManager::init();
   3d7c4:	ebffb6d0 	bl	2b30c <HwManager::init()>
    TargetTracker::init();
   3d7c8:	ebfff4c1 	bl	3aad4 <TargetTracker::init()>
    busController.init();
   3d7cc:	e2840008 	add	r0, r4, #8
   3d7d0:	ebffa0af 	bl	25a94 <BusController::init()>
    stepValidator.init();
   3d7d4:	e59f00ac 	ldr	r0, [pc, #172]	; 3d888 <main+0x160>
   3d7d8:	ebffd2f1 	bl	323a4 <StepValidator::init()>
    _ZEsarUXInterface.init();
   3d7dc:	e284000c 	add	r0, r4, #12
   3d7e0:	ebfffa4a 	bl	3c110 <ZEsarUXInterface::init()>

    // Init machine manager
    mcManager.init(&display);
   3d7e4:	e2440d2d 	sub	r0, r4, #2880	; 0xb40
   3d7e8:	e2400008 	sub	r0, r0, #8
   3d7ec:	ebffc102 	bl	2dbfc <McManager::init(DisplayBase*)>

    // USB and status
    busRaiderApp.initUSB();
   3d7f0:	e59f0094 	ldr	r0, [pc, #148]	; 3d88c <main+0x164>
   3d7f4:	ebffa1a2 	bl	25e84 <BusRaiderApp::initUSB()>

    // Bus raider app
    busRaiderApp.init();
   3d7f8:	e59f008c 	ldr	r0, [pc, #140]	; 3d88c <main+0x164>
   3d7fc:	ebffa16f 	bl	25dc0 <BusRaiderApp::init()>

    // Select Serial Terminal machine - overridden with info from ESP32
    mcManager.setMachineByName("Serial Terminal");
   3d800:	e59f0088 	ldr	r0, [pc, #136]	; 3d890 <main+0x168>
   3d804:	ebffc20c 	bl	2e03c <McManager::setMachineByName(char const*)>
    {
        // Handle target machine display updates
        McManager::displayRefresh();

        // Service the comms channels and display updates
        busRaiderApp.service();
   3d808:	e59f707c 	ldr	r7, [pc, #124]	; 3d88c <main+0x164>
        // Service machine manager
        McManager::service();

        // BusController, StepValidator
        busController.service();
        stepValidator.service();
   3d80c:	e59f6074 	ldr	r6, [pc, #116]	; 3d888 <main+0x160>
        busController.service();
   3d810:	e2845008 	add	r5, r4, #8
        McManager::displayRefresh();
   3d814:	ebffc2f5 	bl	2e3f0 <McManager::displayRefresh()>
        busRaiderApp.service();
   3d818:	e1a00007 	mov	r0, r7
   3d81c:	ebffa2c2 	bl	2632c <BusRaiderApp::service()>
        timer_poll();
   3d820:	ebff9e0d 	bl	2505c <timer_poll>
        BusAccess::service();
   3d824:	ebffea9c 	bl	3829c <BusAccess::service()>
        HwManager::service();
   3d828:	ebffb6d0 	bl	2b370 <HwManager::service()>
        TargetTracker::service();
   3d82c:	ebfff4b2 	bl	3aafc <TargetTracker::service()>
        McManager::service();
   3d830:	ebffc11a 	bl	2dca0 <McManager::service()>
        busController.service();
   3d834:	e1a00005 	mov	r0, r5
   3d838:	ebffa0dc 	bl	25bb0 <BusController::service()>
        stepValidator.service();
   3d83c:	e1a00006 	mov	r0, r6
   3d840:	ebffd37e 	bl	32640 <StepValidator::service()>
        _ZEsarUXInterface.service();
   3d844:	e284000c 	add	r0, r4, #12
   3d848:	ebfffa3a 	bl	3c138 <ZEsarUXInterface::service()>
   3d84c:	eafffff0 	b	3d814 <main+0xec>
        microsDelay(5000000);
   3d850:	e59f003c 	ldr	r0, [pc, #60]	; 3d894 <main+0x16c>
   3d854:	ebffe3d3 	bl	367a8 <microsDelay>
   3d858:	eaffffba 	b	3d748 <main+0x20>
   3d85c:	000186a0 	.word	0x000186a0
   3d860:	000f4240 	.word	0x000f4240
   3d864:	000a2098 	.word	0x000a2098
   3d868:	00027a98 	.word	0x00027a98
   3d86c:	0006f514 	.word	0x0006f514
   3d870:	00056238 	.word	0x00056238
   3d874:	000a20d0 	.word	0x000a20d0
   3d878:	000a2c18 	.word	0x000a2c18
   3d87c:	00056244 	.word	0x00056244
   3d880:	00056274 	.word	0x00056274
   3d884:	00056288 	.word	0x00056288
   3d888:	000be4e4 	.word	0x000be4e4
   3d88c:	000a2c3c 	.word	0x000a2c3c
   3d890:	0005507c 	.word	0x0005507c
   3d894:	004c4b40 	.word	0x004c4b40

0003d898 <_GLOBAL__sub_I_FromMain>:
    }
}
   3d898:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
Display display;
   3d89c:	e59f4078 	ldr	r4, [pc, #120]	; 3d91c <_GLOBAL__sub_I_FromMain+0x84>
   3d8a0:	e59f5078 	ldr	r5, [pc, #120]	; 3d920 <_GLOBAL__sub_I_FromMain+0x88>
   3d8a4:	e2846038 	add	r6, r4, #56	; 0x38
   3d8a8:	e1a00006 	mov	r0, r6
   3d8ac:	ebffd595 	bl	32f08 <Display::Display()>
   3d8b0:	e1a02005 	mov	r2, r5
   3d8b4:	e59f1068 	ldr	r1, [pc, #104]	; 3d924 <_GLOBAL__sub_I_FromMain+0x8c>
   3d8b8:	e1a00006 	mov	r0, r6
   3d8bc:	ebffe3ee 	bl	3687c <__aeabi_atexit>
UartMaxi mainUart;
   3d8c0:	e1a00004 	mov	r0, r4
   3d8c4:	ebffdf7d 	bl	356c0 <UartMaxi::UartMaxi()>
   3d8c8:	e1a02005 	mov	r2, r5
   3d8cc:	e59f1054 	ldr	r1, [pc, #84]	; 3d928 <_GLOBAL__sub_I_FromMain+0x90>
   3d8d0:	e1a00004 	mov	r0, r4
   3d8d4:	ebffe3e8 	bl	3687c <__aeabi_atexit>
BusController busController;
   3d8d8:	e2848d2e 	add	r8, r4, #2944	; 0xb80
StepValidator stepValidator;
   3d8dc:	e59f0048 	ldr	r0, [pc, #72]	; 3d92c <_GLOBAL__sub_I_FromMain+0x94>
   3d8e0:	ebffd291 	bl	3232c <StepValidator::StepValidator()>
BusRaiderApp busRaiderApp(display, mainUart);
   3d8e4:	e59f7044 	ldr	r7, [pc, #68]	; 3d930 <_GLOBAL__sub_I_FromMain+0x98>
BusController busController;
   3d8e8:	e2880008 	add	r0, r8, #8
   3d8ec:	ebffa064 	bl	25a84 <BusController::BusController()>
ZEsarUXInterface _ZEsarUXInterface;
   3d8f0:	e288000c 	add	r0, r8, #12
   3d8f4:	ebfff9f9 	bl	3c0e0 <ZEsarUXInterface::ZEsarUXInterface()>
BusRaiderApp busRaiderApp(display, mainUart);
   3d8f8:	e1a01006 	mov	r1, r6
   3d8fc:	e1a02004 	mov	r2, r4
   3d900:	e1a00007 	mov	r0, r7
   3d904:	ebffa10b 	bl	25d38 <BusRaiderApp::BusRaiderApp(Display&, UartMaxi&)>
   3d908:	e1a02005 	mov	r2, r5
   3d90c:	e1a00007 	mov	r0, r7
}
   3d910:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
BusRaiderApp busRaiderApp(display, mainUart);
   3d914:	e59f1018 	ldr	r1, [pc, #24]	; 3d934 <_GLOBAL__sub_I_FromMain+0x9c>
   3d918:	eaffe3d7 	b	3687c <__aeabi_atexit>
   3d91c:	000a2098 	.word	0x000a2098
   3d920:	0008c418 	.word	0x0008c418
   3d924:	00032f30 	.word	0x00032f30
   3d928:	00035700 	.word	0x00035700
   3d92c:	000be4e4 	.word	0x000be4e4
   3d930:	000a2c3c 	.word	0x000a2c3c
   3d934:	0003d710 	.word	0x0003d710

0003d938 <USPiInitialize>:
   3d938:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   3d93c:	e59f5224 	ldr	r5, [pc, #548]	; 3db68 <USPiInitialize+0x230>
   3d940:	e24dd010 	sub	sp, sp, #16
   3d944:	e59f0220 	ldr	r0, [pc, #544]	; 3db6c <USPiInitialize+0x234>
   3d948:	e3a01004 	mov	r1, #4
   3d94c:	e59f221c 	ldr	r2, [pc, #540]	; 3db70 <USPiInitialize+0x238>
   3d950:	ebff9a08 	bl	24178 <LogWrite>
   3d954:	e5953000 	ldr	r3, [r5]
   3d958:	e3530000 	cmp	r3, #0
   3d95c:	0a000003 	beq	3d970 <USPiInitialize+0x38>
   3d960:	e59f020c 	ldr	r0, [pc, #524]	; 3db74 <USPiInitialize+0x23c>
   3d964:	e59f120c 	ldr	r1, [pc, #524]	; 3db78 <USPiInitialize+0x240>
   3d968:	e3a02024 	mov	r2, #36	; 0x24
   3d96c:	ebffe535 	bl	36e48 <uspi_assertion_failed>
   3d970:	e59f0204 	ldr	r0, [pc, #516]	; 3db7c <USPiInitialize+0x244>
   3d974:	ebffe50c 	bl	36dac <malloc>
   3d978:	e3500000 	cmp	r0, #0
   3d97c:	e5850000 	str	r0, [r5]
   3d980:	e59f41e0 	ldr	r4, [pc, #480]	; 3db68 <USPiInitialize+0x230>
   3d984:	0a000071 	beq	3db50 <USPiInitialize+0x218>
   3d988:	e3a04000 	mov	r4, #0
   3d98c:	eb001c42 	bl	44a9c <DeviceNameService>
   3d990:	e5950000 	ldr	r0, [r5]
   3d994:	e59f61cc 	ldr	r6, [pc, #460]	; 3db68 <USPiInitialize+0x230>
   3d998:	e2800004 	add	r0, r0, #4
   3d99c:	eb0003aa 	bl	3e84c <DWHCIDevice>
   3d9a0:	e5950000 	ldr	r0, [r5]
   3d9a4:	e58047b0 	str	r4, [r0, #1968]	; 0x7b0
   3d9a8:	e58047b4 	str	r4, [r0, #1972]	; 0x7b4
   3d9ac:	e2800004 	add	r0, r0, #4
   3d9b0:	eb000bd2 	bl	40900 <DWHCIDeviceInitialize>
   3d9b4:	e2507000 	subs	r7, r0, #0
   3d9b8:	0a000055 	beq	3db14 <USPiInitialize+0x1dc>
   3d9bc:	e5967000 	ldr	r7, [r6]
   3d9c0:	eb001ce5 	bl	44d5c <DeviceNameServiceGet>
   3d9c4:	e59f11b4 	ldr	r1, [pc, #436]	; 3db80 <USPiInitialize+0x248>
   3d9c8:	e1a02004 	mov	r2, r4
   3d9cc:	eb001cae 	bl	44c8c <DeviceNameServiceGetDevice>
   3d9d0:	e5870798 	str	r0, [r7, #1944]	; 0x798
   3d9d4:	e5967000 	ldr	r7, [r6]
   3d9d8:	eb001cdf 	bl	44d5c <DeviceNameServiceGet>
   3d9dc:	e59f11a0 	ldr	r1, [pc, #416]	; 3db84 <USPiInitialize+0x24c>
   3d9e0:	e1a02004 	mov	r2, r4
   3d9e4:	eb001ca8 	bl	44c8c <DeviceNameServiceGetDevice>
   3d9e8:	e587079c 	str	r0, [r7, #1948]	; 0x79c
   3d9ec:	e5966000 	ldr	r6, [r6]
   3d9f0:	eb001cd9 	bl	44d5c <DeviceNameServiceGet>
   3d9f4:	e59f118c 	ldr	r1, [pc, #396]	; 3db88 <USPiInitialize+0x250>
   3d9f8:	e1a02004 	mov	r2, r4
   3d9fc:	eb001ca2 	bl	44c8c <DeviceNameServiceGetDevice>
   3da00:	e58607c8 	str	r0, [r6, #1992]	; 0x7c8
   3da04:	e2846001 	add	r6, r4, #1
   3da08:	e28d0004 	add	r0, sp, #4
   3da0c:	eb00270d 	bl	47648 <String>
   3da10:	e1a02006 	mov	r2, r6
   3da14:	e59f1170 	ldr	r1, [pc, #368]	; 3db8c <USPiInitialize+0x254>
   3da18:	e28d0004 	add	r0, sp, #4
   3da1c:	eb002989 	bl	48048 <StringFormat>
   3da20:	e5957000 	ldr	r7, [r5]
   3da24:	eb001ccc 	bl	44d5c <DeviceNameServiceGet>
   3da28:	e1a08000 	mov	r8, r0
   3da2c:	e28d0004 	add	r0, sp, #4
   3da30:	eb002737 	bl	47714 <StringGet>
   3da34:	e3a02001 	mov	r2, #1
   3da38:	e1a01000 	mov	r1, r0
   3da3c:	e1a00008 	mov	r0, r8
   3da40:	eb001c91 	bl	44c8c <DeviceNameServiceGetDevice>
   3da44:	e2843f7a 	add	r3, r4, #488	; 0x1e8
   3da48:	e7870103 	str	r0, [r7, r3, lsl #2]
   3da4c:	e28d0004 	add	r0, sp, #4
   3da50:	eb00271e 	bl	476d0 <_String>
   3da54:	e3560004 	cmp	r6, #4
   3da58:	e1a04006 	mov	r4, r6
   3da5c:	e59f6104 	ldr	r6, [pc, #260]	; 3db68 <USPiInitialize+0x230>
   3da60:	1affffe7 	bne	3da04 <USPiInitialize+0xcc>
   3da64:	e5964000 	ldr	r4, [r6]
   3da68:	eb001cbb 	bl	44d5c <DeviceNameServiceGet>
   3da6c:	e59f111c 	ldr	r1, [pc, #284]	; 3db90 <USPiInitialize+0x258>
   3da70:	e3a02000 	mov	r2, #0
   3da74:	eb001c84 	bl	44c8c <DeviceNameServiceGetDevice>
   3da78:	e58407b0 	str	r0, [r4, #1968]	; 0x7b0
   3da7c:	e5966000 	ldr	r6, [r6]
   3da80:	eb001cb5 	bl	44d5c <DeviceNameServiceGet>
   3da84:	e59f1108 	ldr	r1, [pc, #264]	; 3db94 <USPiInitialize+0x25c>
   3da88:	e3a02000 	mov	r2, #0
   3da8c:	eb001c7e 	bl	44c8c <DeviceNameServiceGetDevice>
   3da90:	e3a04000 	mov	r4, #0
   3da94:	e58607b4 	str	r0, [r6, #1972]	; 0x7b4
   3da98:	e2847001 	add	r7, r4, #1
   3da9c:	e28d0004 	add	r0, sp, #4
   3daa0:	eb0026e8 	bl	47648 <String>
   3daa4:	e1a02007 	mov	r2, r7
   3daa8:	e59f10e8 	ldr	r1, [pc, #232]	; 3db98 <USPiInitialize+0x260>
   3daac:	e28d0004 	add	r0, sp, #4
   3dab0:	eb002964 	bl	48048 <StringFormat>
   3dab4:	e5956000 	ldr	r6, [r5]
   3dab8:	eb001ca7 	bl	44d5c <DeviceNameServiceGet>
   3dabc:	e1a08000 	mov	r8, r0
   3dac0:	e28d0004 	add	r0, sp, #4
   3dac4:	eb002712 	bl	47714 <StringGet>
   3dac8:	e3a02000 	mov	r2, #0
   3dacc:	e1a01000 	mov	r1, r0
   3dad0:	e1a00008 	mov	r0, r8
   3dad4:	eb001c6c 	bl	44c8c <DeviceNameServiceGetDevice>
   3dad8:	e0866104 	add	r6, r6, r4, lsl #2
   3dadc:	e58607b8 	str	r0, [r6, #1976]	; 0x7b8
   3dae0:	e28d0004 	add	r0, sp, #4
   3dae4:	eb0026f9 	bl	476d0 <_String>
   3dae8:	e3570004 	cmp	r7, #4
   3daec:	e1a04007 	mov	r4, r7
   3daf0:	1affffe8 	bne	3da98 <USPiInitialize+0x160>
   3daf4:	e1a01007 	mov	r1, r7
   3daf8:	e3a07001 	mov	r7, #1
   3dafc:	e59f0068 	ldr	r0, [pc, #104]	; 3db6c <USPiInitialize+0x234>
   3db00:	e59f2094 	ldr	r2, [pc, #148]	; 3db9c <USPiInitialize+0x264>
   3db04:	ebff999b 	bl	24178 <LogWrite>
   3db08:	e1a00007 	mov	r0, r7
   3db0c:	e28dd010 	add	sp, sp, #16
   3db10:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   3db14:	e3a01001 	mov	r1, #1
   3db18:	e59f2080 	ldr	r2, [pc, #128]	; 3dba0 <USPiInitialize+0x268>
   3db1c:	e59f0048 	ldr	r0, [pc, #72]	; 3db6c <USPiInitialize+0x234>
   3db20:	ebff9994 	bl	24178 <LogWrite>
   3db24:	e5960000 	ldr	r0, [r6]
   3db28:	e2800004 	add	r0, r0, #4
   3db2c:	eb000359 	bl	3e898 <_DWHCIDevice>
   3db30:	e5960000 	ldr	r0, [r6]
   3db34:	eb001bf0 	bl	44afc <_DeviceNameService>
   3db38:	e5960000 	ldr	r0, [r6]
   3db3c:	ebffe49b 	bl	36db0 <free>
   3db40:	e1a00007 	mov	r0, r7
   3db44:	e5867000 	str	r7, [r6]
   3db48:	e28dd010 	add	sp, sp, #16
   3db4c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   3db50:	e59f004c 	ldr	r0, [pc, #76]	; 3dba4 <USPiInitialize+0x26c>
   3db54:	e59f101c 	ldr	r1, [pc, #28]	; 3db78 <USPiInitialize+0x240>
   3db58:	e3a02026 	mov	r2, #38	; 0x26
   3db5c:	ebffe4b9 	bl	36e48 <uspi_assertion_failed>
   3db60:	e5940000 	ldr	r0, [r4]
   3db64:	eaffff87 	b	3d988 <USPiInitialize+0x50>
   3db68:	000bfe54 	.word	0x000bfe54
   3db6c:	000562b4 	.word	0x000562b4
   3db70:	000562bc 	.word	0x000562bc
   3db74:	000562dc 	.word	0x000562dc
   3db78:	000562ec 	.word	0x000562ec
   3db7c:	000007cc 	.word	0x000007cc
   3db80:	0005633c 	.word	0x0005633c
   3db84:	00056344 	.word	0x00056344
   3db88:	0005634c 	.word	0x0005634c
   3db8c:	00056354 	.word	0x00056354
   3db90:	0005635c 	.word	0x0005635c
   3db94:	00056364 	.word	0x00056364
   3db98:	0005636c 	.word	0x0005636c
   3db9c:	00056374 	.word	0x00056374
   3dba0:	0005630c 	.word	0x0005630c
   3dba4:	000562fc 	.word	0x000562fc

0003dba8 <USPiKeyboardAvailable>:
   3dba8:	e92d4010 	push	{r4, lr}
   3dbac:	e59f4030 	ldr	r4, [pc, #48]	; 3dbe4 <USPiKeyboardAvailable+0x3c>
   3dbb0:	e5943000 	ldr	r3, [r4]
   3dbb4:	e3530000 	cmp	r3, #0
   3dbb8:	0a000003 	beq	3dbcc <USPiKeyboardAvailable+0x24>
   3dbbc:	e5930798 	ldr	r0, [r3, #1944]	; 0x798
   3dbc0:	e2900000 	adds	r0, r0, #0
   3dbc4:	13a00001 	movne	r0, #1
   3dbc8:	e8bd8010 	pop	{r4, pc}
   3dbcc:	e59f0014 	ldr	r0, [pc, #20]	; 3dbe8 <USPiKeyboardAvailable+0x40>
   3dbd0:	e59f1014 	ldr	r1, [pc, #20]	; 3dbec <USPiKeyboardAvailable+0x44>
   3dbd4:	e3a02062 	mov	r2, #98	; 0x62
   3dbd8:	ebffe49a 	bl	36e48 <uspi_assertion_failed>
   3dbdc:	e5943000 	ldr	r3, [r4]
   3dbe0:	eafffff5 	b	3dbbc <USPiKeyboardAvailable+0x14>
   3dbe4:	000bfe54 	.word	0x000bfe54
   3dbe8:	000562fc 	.word	0x000562fc
   3dbec:	000562ec 	.word	0x000562ec

0003dbf0 <USPiKeyboardRegisterKeyPressedHandler>:
   3dbf0:	e92d4038 	push	{r3, r4, r5, lr}
   3dbf4:	e59f4060 	ldr	r4, [pc, #96]	; 3dc5c <USPiKeyboardRegisterKeyPressedHandler+0x6c>
   3dbf8:	e1a05000 	mov	r5, r0
   3dbfc:	e5943000 	ldr	r3, [r4]
   3dc00:	e3530000 	cmp	r3, #0
   3dc04:	0a00000e 	beq	3dc44 <USPiKeyboardRegisterKeyPressedHandler+0x54>
   3dc08:	e5930798 	ldr	r0, [r3, #1944]	; 0x798
   3dc0c:	e3500000 	cmp	r0, #0
   3dc10:	0a000002 	beq	3dc20 <USPiKeyboardRegisterKeyPressedHandler+0x30>
   3dc14:	e1a01005 	mov	r1, r5
   3dc18:	e8bd4038 	pop	{r3, r4, r5, lr}
   3dc1c:	ea002f83 	b	49a30 <USBKeyboardDeviceRegisterKeyPressedHandler>
   3dc20:	e59f0038 	ldr	r0, [pc, #56]	; 3dc60 <USPiKeyboardRegisterKeyPressedHandler+0x70>
   3dc24:	e59f1038 	ldr	r1, [pc, #56]	; 3dc64 <USPiKeyboardRegisterKeyPressedHandler+0x74>
   3dc28:	e3a02069 	mov	r2, #105	; 0x69
   3dc2c:	ebffe485 	bl	36e48 <uspi_assertion_failed>
   3dc30:	e5943000 	ldr	r3, [r4]
   3dc34:	e1a01005 	mov	r1, r5
   3dc38:	e5930798 	ldr	r0, [r3, #1944]	; 0x798
   3dc3c:	e8bd4038 	pop	{r3, r4, r5, lr}
   3dc40:	ea002f7a 	b	49a30 <USBKeyboardDeviceRegisterKeyPressedHandler>
   3dc44:	e59f001c 	ldr	r0, [pc, #28]	; 3dc68 <USPiKeyboardRegisterKeyPressedHandler+0x78>
   3dc48:	e59f1014 	ldr	r1, [pc, #20]	; 3dc64 <USPiKeyboardRegisterKeyPressedHandler+0x74>
   3dc4c:	e3a02068 	mov	r2, #104	; 0x68
   3dc50:	ebffe47c 	bl	36e48 <uspi_assertion_failed>
   3dc54:	e5943000 	ldr	r3, [r4]
   3dc58:	eaffffea 	b	3dc08 <USPiKeyboardRegisterKeyPressedHandler+0x18>
   3dc5c:	000bfe54 	.word	0x000bfe54
   3dc60:	0005639c 	.word	0x0005639c
   3dc64:	000562ec 	.word	0x000562ec
   3dc68:	000562fc 	.word	0x000562fc

0003dc6c <USPiKeyboardRegisterShutdownHandler>:
   3dc6c:	e92d4038 	push	{r3, r4, r5, lr}
   3dc70:	e59f4060 	ldr	r4, [pc, #96]	; 3dcd8 <USPiKeyboardRegisterShutdownHandler+0x6c>
   3dc74:	e1a05000 	mov	r5, r0
   3dc78:	e5943000 	ldr	r3, [r4]
   3dc7c:	e3530000 	cmp	r3, #0
   3dc80:	0a00000e 	beq	3dcc0 <USPiKeyboardRegisterShutdownHandler+0x54>
   3dc84:	e5930798 	ldr	r0, [r3, #1944]	; 0x798
   3dc88:	e3500000 	cmp	r0, #0
   3dc8c:	0a000002 	beq	3dc9c <USPiKeyboardRegisterShutdownHandler+0x30>
   3dc90:	e1a01005 	mov	r1, r5
   3dc94:	e8bd4038 	pop	{r3, r4, r5, lr}
   3dc98:	ea002f90 	b	49ae0 <USBKeyboardDeviceRegisterShutdownHandler>
   3dc9c:	e59f0038 	ldr	r0, [pc, #56]	; 3dcdc <USPiKeyboardRegisterShutdownHandler+0x70>
   3dca0:	e59f1038 	ldr	r1, [pc, #56]	; 3dce0 <USPiKeyboardRegisterShutdownHandler+0x74>
   3dca4:	e3a02070 	mov	r2, #112	; 0x70
   3dca8:	ebffe466 	bl	36e48 <uspi_assertion_failed>
   3dcac:	e5943000 	ldr	r3, [r4]
   3dcb0:	e1a01005 	mov	r1, r5
   3dcb4:	e5930798 	ldr	r0, [r3, #1944]	; 0x798
   3dcb8:	e8bd4038 	pop	{r3, r4, r5, lr}
   3dcbc:	ea002f87 	b	49ae0 <USBKeyboardDeviceRegisterShutdownHandler>
   3dcc0:	e59f001c 	ldr	r0, [pc, #28]	; 3dce4 <USPiKeyboardRegisterShutdownHandler+0x78>
   3dcc4:	e59f1014 	ldr	r1, [pc, #20]	; 3dce0 <USPiKeyboardRegisterShutdownHandler+0x74>
   3dcc8:	e3a0206f 	mov	r2, #111	; 0x6f
   3dccc:	ebffe45d 	bl	36e48 <uspi_assertion_failed>
   3dcd0:	e5943000 	ldr	r3, [r4]
   3dcd4:	eaffffea 	b	3dc84 <USPiKeyboardRegisterShutdownHandler+0x18>
   3dcd8:	000bfe54 	.word	0x000bfe54
   3dcdc:	0005639c 	.word	0x0005639c
   3dce0:	000562ec 	.word	0x000562ec
   3dce4:	000562fc 	.word	0x000562fc

0003dce8 <USPiKeyboardUpdateLEDs>:
   3dce8:	e92d4010 	push	{r4, lr}
   3dcec:	e59f4054 	ldr	r4, [pc, #84]	; 3dd48 <USPiKeyboardUpdateLEDs+0x60>
   3dcf0:	e5943000 	ldr	r3, [r4]
   3dcf4:	e3530000 	cmp	r3, #0
   3dcf8:	0a00000c 	beq	3dd30 <USPiKeyboardUpdateLEDs+0x48>
   3dcfc:	e5930798 	ldr	r0, [r3, #1944]	; 0x798
   3dd00:	e3500000 	cmp	r0, #0
   3dd04:	0a000001 	beq	3dd10 <USPiKeyboardUpdateLEDs+0x28>
   3dd08:	e8bd4010 	pop	{r4, lr}
   3dd0c:	ea003055 	b	49e68 <USBKeyboardDeviceUpdateLEDs>
   3dd10:	e59f0034 	ldr	r0, [pc, #52]	; 3dd4c <USPiKeyboardUpdateLEDs+0x64>
   3dd14:	e59f1034 	ldr	r1, [pc, #52]	; 3dd50 <USPiKeyboardUpdateLEDs+0x68>
   3dd18:	e3a02077 	mov	r2, #119	; 0x77
   3dd1c:	ebffe449 	bl	36e48 <uspi_assertion_failed>
   3dd20:	e5943000 	ldr	r3, [r4]
   3dd24:	e8bd4010 	pop	{r4, lr}
   3dd28:	e5930798 	ldr	r0, [r3, #1944]	; 0x798
   3dd2c:	ea00304d 	b	49e68 <USBKeyboardDeviceUpdateLEDs>
   3dd30:	e59f001c 	ldr	r0, [pc, #28]	; 3dd54 <USPiKeyboardUpdateLEDs+0x6c>
   3dd34:	e59f1014 	ldr	r1, [pc, #20]	; 3dd50 <USPiKeyboardUpdateLEDs+0x68>
   3dd38:	e3a02076 	mov	r2, #118	; 0x76
   3dd3c:	ebffe441 	bl	36e48 <uspi_assertion_failed>
   3dd40:	e5943000 	ldr	r3, [r4]
   3dd44:	eaffffec 	b	3dcfc <USPiKeyboardUpdateLEDs+0x14>
   3dd48:	000bfe54 	.word	0x000bfe54
   3dd4c:	0005639c 	.word	0x0005639c
   3dd50:	000562ec 	.word	0x000562ec
   3dd54:	000562fc 	.word	0x000562fc

0003dd58 <USPiKeyboardRegisterKeyStatusHandlerRaw>:
   3dd58:	e92d4038 	push	{r3, r4, r5, lr}
   3dd5c:	e59f4060 	ldr	r4, [pc, #96]	; 3ddc4 <USPiKeyboardRegisterKeyStatusHandlerRaw+0x6c>
   3dd60:	e1a05000 	mov	r5, r0
   3dd64:	e5943000 	ldr	r3, [r4]
   3dd68:	e3530000 	cmp	r3, #0
   3dd6c:	0a00000e 	beq	3ddac <USPiKeyboardRegisterKeyStatusHandlerRaw+0x54>
   3dd70:	e5930798 	ldr	r0, [r3, #1944]	; 0x798
   3dd74:	e3500000 	cmp	r0, #0
   3dd78:	0a000002 	beq	3dd88 <USPiKeyboardRegisterKeyStatusHandlerRaw+0x30>
   3dd7c:	e1a01005 	mov	r1, r5
   3dd80:	e8bd4038 	pop	{r3, r4, r5, lr}
   3dd84:	ea002f6b 	b	49b38 <USBKeyboardDeviceRegisterKeyStatusHandlerRaw>
   3dd88:	e59f0038 	ldr	r0, [pc, #56]	; 3ddc8 <USPiKeyboardRegisterKeyStatusHandlerRaw+0x70>
   3dd8c:	e59f1038 	ldr	r1, [pc, #56]	; 3ddcc <USPiKeyboardRegisterKeyStatusHandlerRaw+0x74>
   3dd90:	e3a0207e 	mov	r2, #126	; 0x7e
   3dd94:	ebffe42b 	bl	36e48 <uspi_assertion_failed>
   3dd98:	e5943000 	ldr	r3, [r4]
   3dd9c:	e1a01005 	mov	r1, r5
   3dda0:	e5930798 	ldr	r0, [r3, #1944]	; 0x798
   3dda4:	e8bd4038 	pop	{r3, r4, r5, lr}
   3dda8:	ea002f62 	b	49b38 <USBKeyboardDeviceRegisterKeyStatusHandlerRaw>
   3ddac:	e59f001c 	ldr	r0, [pc, #28]	; 3ddd0 <USPiKeyboardRegisterKeyStatusHandlerRaw+0x78>
   3ddb0:	e59f1014 	ldr	r1, [pc, #20]	; 3ddcc <USPiKeyboardRegisterKeyStatusHandlerRaw+0x74>
   3ddb4:	e3a0207d 	mov	r2, #125	; 0x7d
   3ddb8:	ebffe422 	bl	36e48 <uspi_assertion_failed>
   3ddbc:	e5943000 	ldr	r3, [r4]
   3ddc0:	eaffffea 	b	3dd70 <USPiKeyboardRegisterKeyStatusHandlerRaw+0x18>
   3ddc4:	000bfe54 	.word	0x000bfe54
   3ddc8:	0005639c 	.word	0x0005639c
   3ddcc:	000562ec 	.word	0x000562ec
   3ddd0:	000562fc 	.word	0x000562fc

0003ddd4 <USPiKeyboardSetLEDs>:
   3ddd4:	e92d4038 	push	{r3, r4, r5, lr}
   3ddd8:	e59f4060 	ldr	r4, [pc, #96]	; 3de40 <USPiKeyboardSetLEDs+0x6c>
   3dddc:	e1a05000 	mov	r5, r0
   3dde0:	e5943000 	ldr	r3, [r4]
   3dde4:	e3530000 	cmp	r3, #0
   3dde8:	0a00000e 	beq	3de28 <USPiKeyboardSetLEDs+0x54>
   3ddec:	e5930798 	ldr	r0, [r3, #1944]	; 0x798
   3ddf0:	e3500000 	cmp	r0, #0
   3ddf4:	0a000002 	beq	3de04 <USPiKeyboardSetLEDs+0x30>
   3ddf8:	e1a01005 	mov	r1, r5
   3ddfc:	e8bd4038 	pop	{r3, r4, r5, lr}
   3de00:	ea002f62 	b	49b90 <USBKeyboardDeviceSetLEDs>
   3de04:	e59f0038 	ldr	r0, [pc, #56]	; 3de44 <USPiKeyboardSetLEDs+0x70>
   3de08:	e59f1038 	ldr	r1, [pc, #56]	; 3de48 <USPiKeyboardSetLEDs+0x74>
   3de0c:	e3a02085 	mov	r2, #133	; 0x85
   3de10:	ebffe40c 	bl	36e48 <uspi_assertion_failed>
   3de14:	e5943000 	ldr	r3, [r4]
   3de18:	e1a01005 	mov	r1, r5
   3de1c:	e5930798 	ldr	r0, [r3, #1944]	; 0x798
   3de20:	e8bd4038 	pop	{r3, r4, r5, lr}
   3de24:	ea002f59 	b	49b90 <USBKeyboardDeviceSetLEDs>
   3de28:	e59f001c 	ldr	r0, [pc, #28]	; 3de4c <USPiKeyboardSetLEDs+0x78>
   3de2c:	e59f1014 	ldr	r1, [pc, #20]	; 3de48 <USPiKeyboardSetLEDs+0x74>
   3de30:	e3a02084 	mov	r2, #132	; 0x84
   3de34:	ebffe403 	bl	36e48 <uspi_assertion_failed>
   3de38:	e5943000 	ldr	r3, [r4]
   3de3c:	eaffffea 	b	3ddec <USPiKeyboardSetLEDs+0x18>
   3de40:	000bfe54 	.word	0x000bfe54
   3de44:	0005639c 	.word	0x0005639c
   3de48:	000562ec 	.word	0x000562ec
   3de4c:	000562fc 	.word	0x000562fc

0003de50 <USPiMouseAvailable>:
   3de50:	e92d4010 	push	{r4, lr}
   3de54:	e59f4030 	ldr	r4, [pc, #48]	; 3de8c <USPiMouseAvailable+0x3c>
   3de58:	e5943000 	ldr	r3, [r4]
   3de5c:	e3530000 	cmp	r3, #0
   3de60:	0a000003 	beq	3de74 <USPiMouseAvailable+0x24>
   3de64:	e593079c 	ldr	r0, [r3, #1948]	; 0x79c
   3de68:	e2900000 	adds	r0, r0, #0
   3de6c:	13a00001 	movne	r0, #1
   3de70:	e8bd8010 	pop	{r4, pc}
   3de74:	e59f0014 	ldr	r0, [pc, #20]	; 3de90 <USPiMouseAvailable+0x40>
   3de78:	e59f1014 	ldr	r1, [pc, #20]	; 3de94 <USPiMouseAvailable+0x44>
   3de7c:	e3a0208b 	mov	r2, #139	; 0x8b
   3de80:	ebffe3f0 	bl	36e48 <uspi_assertion_failed>
   3de84:	e5943000 	ldr	r3, [r4]
   3de88:	eafffff5 	b	3de64 <USPiMouseAvailable+0x14>
   3de8c:	000bfe54 	.word	0x000bfe54
   3de90:	000562fc 	.word	0x000562fc
   3de94:	000562ec 	.word	0x000562ec

0003de98 <USPiMouseRegisterStatusHandler>:
   3de98:	e92d4038 	push	{r3, r4, r5, lr}
   3de9c:	e59f4060 	ldr	r4, [pc, #96]	; 3df04 <USPiMouseRegisterStatusHandler+0x6c>
   3dea0:	e1a05000 	mov	r5, r0
   3dea4:	e5943000 	ldr	r3, [r4]
   3dea8:	e3530000 	cmp	r3, #0
   3deac:	0a00000e 	beq	3deec <USPiMouseRegisterStatusHandler+0x54>
   3deb0:	e593079c 	ldr	r0, [r3, #1948]	; 0x79c
   3deb4:	e3500000 	cmp	r0, #0
   3deb8:	0a000002 	beq	3dec8 <USPiMouseRegisterStatusHandler+0x30>
   3debc:	e1a01005 	mov	r1, r5
   3dec0:	e8bd4038 	pop	{r3, r4, r5, lr}
   3dec4:	ea003209 	b	4a6f0 <USBMouseDeviceRegisterStatusHandler>
   3dec8:	e59f0038 	ldr	r0, [pc, #56]	; 3df08 <USPiMouseRegisterStatusHandler+0x70>
   3decc:	e59f1038 	ldr	r1, [pc, #56]	; 3df0c <USPiMouseRegisterStatusHandler+0x74>
   3ded0:	e3a02092 	mov	r2, #146	; 0x92
   3ded4:	ebffe3db 	bl	36e48 <uspi_assertion_failed>
   3ded8:	e5943000 	ldr	r3, [r4]
   3dedc:	e1a01005 	mov	r1, r5
   3dee0:	e593079c 	ldr	r0, [r3, #1948]	; 0x79c
   3dee4:	e8bd4038 	pop	{r3, r4, r5, lr}
   3dee8:	ea003200 	b	4a6f0 <USBMouseDeviceRegisterStatusHandler>
   3deec:	e59f001c 	ldr	r0, [pc, #28]	; 3df10 <USPiMouseRegisterStatusHandler+0x78>
   3def0:	e59f1014 	ldr	r1, [pc, #20]	; 3df0c <USPiMouseRegisterStatusHandler+0x74>
   3def4:	e3a02091 	mov	r2, #145	; 0x91
   3def8:	ebffe3d2 	bl	36e48 <uspi_assertion_failed>
   3defc:	e5943000 	ldr	r3, [r4]
   3df00:	eaffffea 	b	3deb0 <USPiMouseRegisterStatusHandler+0x18>
   3df04:	000bfe54 	.word	0x000bfe54
   3df08:	000563b4 	.word	0x000563b4
   3df0c:	000562ec 	.word	0x000562ec
   3df10:	000562fc 	.word	0x000562fc

0003df14 <USPiMassStorageDeviceAvailable>:
   3df14:	e92d4010 	push	{r4, lr}
   3df18:	e59f4048 	ldr	r4, [pc, #72]	; 3df68 <USPiMassStorageDeviceAvailable+0x54>
   3df1c:	e5943000 	ldr	r3, [r4]
   3df20:	e3530000 	cmp	r3, #0
   3df24:	0a000009 	beq	3df50 <USPiMassStorageDeviceAvailable+0x3c>
   3df28:	e3a00000 	mov	r0, #0
   3df2c:	e2833e79 	add	r3, r3, #1936	; 0x790
   3df30:	e283300c 	add	r3, r3, #12
   3df34:	e5b32004 	ldr	r2, [r3, #4]!
   3df38:	e3520000 	cmp	r2, #0
   3df3c:	08bd8010 	popeq	{r4, pc}
   3df40:	e2800001 	add	r0, r0, #1
   3df44:	e3500004 	cmp	r0, #4
   3df48:	1afffff9 	bne	3df34 <USPiMassStorageDeviceAvailable+0x20>
   3df4c:	e8bd8010 	pop	{r4, pc}
   3df50:	e59f0014 	ldr	r0, [pc, #20]	; 3df6c <USPiMassStorageDeviceAvailable+0x58>
   3df54:	e59f1014 	ldr	r1, [pc, #20]	; 3df70 <USPiMassStorageDeviceAvailable+0x5c>
   3df58:	e3a02098 	mov	r2, #152	; 0x98
   3df5c:	ebffe3b9 	bl	36e48 <uspi_assertion_failed>
   3df60:	e5943000 	ldr	r3, [r4]
   3df64:	eaffffef 	b	3df28 <USPiMassStorageDeviceAvailable+0x14>
   3df68:	000bfe54 	.word	0x000bfe54
   3df6c:	000562fc 	.word	0x000562fc
   3df70:	000562ec 	.word	0x000562ec

0003df74 <USPiMassStorageDeviceRead>:
   3df74:	e92d43f8 	push	{r3, r4, r5, r6, r7, r8, r9, lr}
   3df78:	e59f5088 	ldr	r5, [pc, #136]	; 3e008 <USPiMassStorageDeviceRead+0x94>
   3df7c:	e1a07001 	mov	r7, r1
   3df80:	e5951000 	ldr	r1, [r5]
   3df84:	e1a06000 	mov	r6, r0
   3df88:	e3510000 	cmp	r1, #0
   3df8c:	e1a08002 	mov	r8, r2
   3df90:	e1a09003 	mov	r9, r3
   3df94:	e59d4020 	ldr	r4, [sp, #32]
   3df98:	0a000015 	beq	3dff4 <USPiMassStorageDeviceRead+0x80>
   3df9c:	e3540003 	cmp	r4, #3
   3dfa0:	8a000011 	bhi	3dfec <USPiMassStorageDeviceRead+0x78>
   3dfa4:	e5953000 	ldr	r3, [r5]
   3dfa8:	e2844f7a 	add	r4, r4, #488	; 0x1e8
   3dfac:	e7930104 	ldr	r0, [r3, r4, lsl #2]
   3dfb0:	e59f5050 	ldr	r5, [pc, #80]	; 3e008 <USPiMassStorageDeviceRead+0x94>
   3dfb4:	e3500000 	cmp	r0, #0
   3dfb8:	0a00000b 	beq	3dfec <USPiMassStorageDeviceRead+0x78>
   3dfbc:	e1a02006 	mov	r2, r6
   3dfc0:	e1a03007 	mov	r3, r7
   3dfc4:	eb0028f9 	bl	483b0 <USBBulkOnlyMassStorageDeviceSeek>
   3dfc8:	e1510007 	cmp	r1, r7
   3dfcc:	01500006 	cmpeq	r0, r6
   3dfd0:	1a000005 	bne	3dfec <USPiMassStorageDeviceRead+0x78>
   3dfd4:	e5953000 	ldr	r3, [r5]
   3dfd8:	e1a01008 	mov	r1, r8
   3dfdc:	e7930104 	ldr	r0, [r3, r4, lsl #2]
   3dfe0:	e1a02009 	mov	r2, r9
   3dfe4:	e8bd43f8 	pop	{r3, r4, r5, r6, r7, r8, r9, lr}
   3dfe8:	ea002bce 	b	48f28 <USBBulkOnlyMassStorageDeviceRead>
   3dfec:	e3e00000 	mvn	r0, #0
   3dff0:	e8bd83f8 	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   3dff4:	e59f0010 	ldr	r0, [pc, #16]	; 3e00c <USPiMassStorageDeviceRead+0x98>
   3dff8:	e59f1010 	ldr	r1, [pc, #16]	; 3e010 <USPiMassStorageDeviceRead+0x9c>
   3dffc:	e3a020a8 	mov	r2, #168	; 0xa8
   3e000:	ebffe390 	bl	36e48 <uspi_assertion_failed>
   3e004:	eaffffe4 	b	3df9c <USPiMassStorageDeviceRead+0x28>
   3e008:	000bfe54 	.word	0x000bfe54
   3e00c:	000562fc 	.word	0x000562fc
   3e010:	000562ec 	.word	0x000562ec

0003e014 <USPiMassStorageDeviceWrite>:
   3e014:	e92d43f8 	push	{r3, r4, r5, r6, r7, r8, r9, lr}
   3e018:	e59f5088 	ldr	r5, [pc, #136]	; 3e0a8 <USPiMassStorageDeviceWrite+0x94>
   3e01c:	e1a07001 	mov	r7, r1
   3e020:	e5951000 	ldr	r1, [r5]
   3e024:	e1a06000 	mov	r6, r0
   3e028:	e3510000 	cmp	r1, #0
   3e02c:	e1a08002 	mov	r8, r2
   3e030:	e1a09003 	mov	r9, r3
   3e034:	e59d4020 	ldr	r4, [sp, #32]
   3e038:	0a000015 	beq	3e094 <USPiMassStorageDeviceWrite+0x80>
   3e03c:	e3540003 	cmp	r4, #3
   3e040:	8a000011 	bhi	3e08c <USPiMassStorageDeviceWrite+0x78>
   3e044:	e5953000 	ldr	r3, [r5]
   3e048:	e2844f7a 	add	r4, r4, #488	; 0x1e8
   3e04c:	e7930104 	ldr	r0, [r3, r4, lsl #2]
   3e050:	e59f5050 	ldr	r5, [pc, #80]	; 3e0a8 <USPiMassStorageDeviceWrite+0x94>
   3e054:	e3500000 	cmp	r0, #0
   3e058:	0a00000b 	beq	3e08c <USPiMassStorageDeviceWrite+0x78>
   3e05c:	e1a02006 	mov	r2, r6
   3e060:	e1a03007 	mov	r3, r7
   3e064:	eb0028d1 	bl	483b0 <USBBulkOnlyMassStorageDeviceSeek>
   3e068:	e1510007 	cmp	r1, r7
   3e06c:	01500006 	cmpeq	r0, r6
   3e070:	1a000005 	bne	3e08c <USPiMassStorageDeviceWrite+0x78>
   3e074:	e5953000 	ldr	r3, [r5]
   3e078:	e1a01008 	mov	r1, r8
   3e07c:	e7930104 	ldr	r0, [r3, r4, lsl #2]
   3e080:	e1a02009 	mov	r2, r9
   3e084:	e8bd43f8 	pop	{r3, r4, r5, r6, r7, r8, r9, lr}
   3e088:	ea002bc5 	b	48fa4 <USBBulkOnlyMassStorageDeviceWrite>
   3e08c:	e3e00000 	mvn	r0, #0
   3e090:	e8bd83f8 	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   3e094:	e59f0010 	ldr	r0, [pc, #16]	; 3e0ac <USPiMassStorageDeviceWrite+0x98>
   3e098:	e59f1010 	ldr	r1, [pc, #16]	; 3e0b0 <USPiMassStorageDeviceWrite+0x9c>
   3e09c:	e3a020ba 	mov	r2, #186	; 0xba
   3e0a0:	ebffe368 	bl	36e48 <uspi_assertion_failed>
   3e0a4:	eaffffe4 	b	3e03c <USPiMassStorageDeviceWrite+0x28>
   3e0a8:	000bfe54 	.word	0x000bfe54
   3e0ac:	000562fc 	.word	0x000562fc
   3e0b0:	000562ec 	.word	0x000562ec

0003e0b4 <USPiMassStorageDeviceGetCapacity>:
   3e0b4:	e92d4038 	push	{r3, r4, r5, lr}
   3e0b8:	e59f504c 	ldr	r5, [pc, #76]	; 3e10c <USPiMassStorageDeviceGetCapacity+0x58>
   3e0bc:	e1a04000 	mov	r4, r0
   3e0c0:	e5953000 	ldr	r3, [r5]
   3e0c4:	e3530000 	cmp	r3, #0
   3e0c8:	0a00000a 	beq	3e0f8 <USPiMassStorageDeviceGetCapacity+0x44>
   3e0cc:	e3540003 	cmp	r4, #3
   3e0d0:	8a000006 	bhi	3e0f0 <USPiMassStorageDeviceGetCapacity+0x3c>
   3e0d4:	e5953000 	ldr	r3, [r5]
   3e0d8:	e2844f7a 	add	r4, r4, #488	; 0x1e8
   3e0dc:	e7930104 	ldr	r0, [r3, r4, lsl #2]
   3e0e0:	e3500000 	cmp	r0, #0
   3e0e4:	0a000001 	beq	3e0f0 <USPiMassStorageDeviceGetCapacity+0x3c>
   3e0e8:	e8bd4038 	pop	{r3, r4, r5, lr}
   3e0ec:	ea0028c0 	b	483f4 <USBBulkOnlyMassStorageDeviceGetCapacity>
   3e0f0:	e3a00000 	mov	r0, #0
   3e0f4:	e8bd8038 	pop	{r3, r4, r5, pc}
   3e0f8:	e59f0010 	ldr	r0, [pc, #16]	; 3e110 <USPiMassStorageDeviceGetCapacity+0x5c>
   3e0fc:	e59f1010 	ldr	r1, [pc, #16]	; 3e114 <USPiMassStorageDeviceGetCapacity+0x60>
   3e100:	e3a020cc 	mov	r2, #204	; 0xcc
   3e104:	ebffe34f 	bl	36e48 <uspi_assertion_failed>
   3e108:	eaffffef 	b	3e0cc <USPiMassStorageDeviceGetCapacity+0x18>
   3e10c:	000bfe54 	.word	0x000bfe54
   3e110:	000562fc 	.word	0x000562fc
   3e114:	000562ec 	.word	0x000562ec

0003e118 <USPiEthernetAvailable>:
   3e118:	e92d4010 	push	{r4, lr}
   3e11c:	e59f4044 	ldr	r4, [pc, #68]	; 3e168 <USPiEthernetAvailable+0x50>
   3e120:	e5943000 	ldr	r3, [r4]
   3e124:	e3530000 	cmp	r3, #0
   3e128:	0a000008 	beq	3e150 <USPiEthernetAvailable+0x38>
   3e12c:	e59327b0 	ldr	r2, [r3, #1968]	; 0x7b0
   3e130:	e3520000 	cmp	r2, #0
   3e134:	0a000001 	beq	3e140 <USPiEthernetAvailable+0x28>
   3e138:	e3a00001 	mov	r0, #1
   3e13c:	e8bd8010 	pop	{r4, pc}
   3e140:	e59307b4 	ldr	r0, [r3, #1972]	; 0x7b4
   3e144:	e2900000 	adds	r0, r0, #0
   3e148:	13a00001 	movne	r0, #1
   3e14c:	e8bd8010 	pop	{r4, pc}
   3e150:	e59f0014 	ldr	r0, [pc, #20]	; 3e16c <USPiEthernetAvailable+0x54>
   3e154:	e59f1014 	ldr	r1, [pc, #20]	; 3e170 <USPiEthernetAvailable+0x58>
   3e158:	e3a020d9 	mov	r2, #217	; 0xd9
   3e15c:	ebffe339 	bl	36e48 <uspi_assertion_failed>
   3e160:	e5943000 	ldr	r3, [r4]
   3e164:	eafffff0 	b	3e12c <USPiEthernetAvailable+0x14>
   3e168:	000bfe54 	.word	0x000bfe54
   3e16c:	000562fc 	.word	0x000562fc
   3e170:	000562ec 	.word	0x000562ec

0003e174 <USPiGetMACAddress>:
   3e174:	e92d4038 	push	{r3, r4, r5, lr}
   3e178:	e59f50a8 	ldr	r5, [pc, #168]	; 3e228 <USPiGetMACAddress+0xb4>
   3e17c:	e1a04000 	mov	r4, r0
   3e180:	e5953000 	ldr	r3, [r5]
   3e184:	e3530000 	cmp	r3, #0
   3e188:	0a000019 	beq	3e1f4 <USPiGetMACAddress+0x80>
   3e18c:	e59307b4 	ldr	r0, [r3, #1972]	; 0x7b4
   3e190:	e3500000 	cmp	r0, #0
   3e194:	0a000007 	beq	3e1b8 <USPiGetMACAddress+0x44>
   3e198:	eb0021a4 	bl	46830 <LAN7800DeviceGetMACAddress>
   3e19c:	e3540000 	cmp	r4, #0
   3e1a0:	e1a05000 	mov	r5, r0
   3e1a4:	0a00000a 	beq	3e1d4 <USPiGetMACAddress+0x60>
   3e1a8:	e1a00005 	mov	r0, r5
   3e1ac:	e1a01004 	mov	r1, r4
   3e1b0:	e8bd4038 	pop	{r3, r4, r5, lr}
   3e1b4:	ea001b7d 	b	44fb0 <MACAddressCopyTo>
   3e1b8:	e59307b0 	ldr	r0, [r3, #1968]	; 0x7b0
   3e1bc:	e3500000 	cmp	r0, #0
   3e1c0:	0a000011 	beq	3e20c <USPiGetMACAddress+0x98>
   3e1c4:	eb001e48 	bl	45aec <SMSC951xDeviceGetMACAddress>
   3e1c8:	e3540000 	cmp	r4, #0
   3e1cc:	e1a05000 	mov	r5, r0
   3e1d0:	1afffff4 	bne	3e1a8 <USPiGetMACAddress+0x34>
   3e1d4:	e59f0050 	ldr	r0, [pc, #80]	; 3e22c <USPiGetMACAddress+0xb8>
   3e1d8:	e59f1050 	ldr	r1, [pc, #80]	; 3e230 <USPiGetMACAddress+0xbc>
   3e1dc:	e3a020ec 	mov	r2, #236	; 0xec
   3e1e0:	ebffe318 	bl	36e48 <uspi_assertion_failed>
   3e1e4:	e1a00005 	mov	r0, r5
   3e1e8:	e1a01004 	mov	r1, r4
   3e1ec:	e8bd4038 	pop	{r3, r4, r5, lr}
   3e1f0:	ea001b6e 	b	44fb0 <MACAddressCopyTo>
   3e1f4:	e59f0038 	ldr	r0, [pc, #56]	; 3e234 <USPiGetMACAddress+0xc0>
   3e1f8:	e59f1030 	ldr	r1, [pc, #48]	; 3e230 <USPiGetMACAddress+0xbc>
   3e1fc:	e3a020df 	mov	r2, #223	; 0xdf
   3e200:	ebffe310 	bl	36e48 <uspi_assertion_failed>
   3e204:	e5953000 	ldr	r3, [r5]
   3e208:	eaffffdf 	b	3e18c <USPiGetMACAddress+0x18>
   3e20c:	e59f0024 	ldr	r0, [pc, #36]	; 3e238 <USPiGetMACAddress+0xc4>
   3e210:	e59f1018 	ldr	r1, [pc, #24]	; 3e230 <USPiGetMACAddress+0xbc>
   3e214:	e3a020e8 	mov	r2, #232	; 0xe8
   3e218:	ebffe30a 	bl	36e48 <uspi_assertion_failed>
   3e21c:	e5953000 	ldr	r3, [r5]
   3e220:	e59307b0 	ldr	r0, [r3, #1968]	; 0x7b0
   3e224:	eaffffe6 	b	3e1c4 <USPiGetMACAddress+0x50>
   3e228:	000bfe54 	.word	0x000bfe54
   3e22c:	00057fe8 	.word	0x00057fe8
   3e230:	000562ec 	.word	0x000562ec
   3e234:	000562fc 	.word	0x000562fc
   3e238:	000563d0 	.word	0x000563d0

0003e23c <USPiEthernetIsLinkUp>:
   3e23c:	e92d4010 	push	{r4, lr}
   3e240:	e59f4074 	ldr	r4, [pc, #116]	; 3e2bc <USPiEthernetIsLinkUp+0x80>
   3e244:	e5943000 	ldr	r3, [r4]
   3e248:	e3530000 	cmp	r3, #0
   3e24c:	0a00000d 	beq	3e288 <USPiEthernetIsLinkUp+0x4c>
   3e250:	e59307b4 	ldr	r0, [r3, #1972]	; 0x7b4
   3e254:	e3500000 	cmp	r0, #0
   3e258:	0a000003 	beq	3e26c <USPiEthernetIsLinkUp+0x30>
   3e25c:	eb00236f 	bl	47020 <LAN7800DeviceIsLinkUp>
   3e260:	e2900000 	adds	r0, r0, #0
   3e264:	13a00001 	movne	r0, #1
   3e268:	e8bd8010 	pop	{r4, pc}
   3e26c:	e59307b0 	ldr	r0, [r3, #1968]	; 0x7b0
   3e270:	e3500000 	cmp	r0, #0
   3e274:	0a000009 	beq	3e2a0 <USPiEthernetIsLinkUp+0x64>
   3e278:	eb00207c 	bl	46470 <SMSC951xDeviceIsLinkUp>
   3e27c:	e2900000 	adds	r0, r0, #0
   3e280:	13a00001 	movne	r0, #1
   3e284:	e8bd8010 	pop	{r4, pc}
   3e288:	e59f0030 	ldr	r0, [pc, #48]	; 3e2c0 <USPiEthernetIsLinkUp+0x84>
   3e28c:	e59f1030 	ldr	r1, [pc, #48]	; 3e2c4 <USPiEthernetIsLinkUp+0x88>
   3e290:	e3a020f2 	mov	r2, #242	; 0xf2
   3e294:	ebffe2eb 	bl	36e48 <uspi_assertion_failed>
   3e298:	e5943000 	ldr	r3, [r4]
   3e29c:	eaffffeb 	b	3e250 <USPiEthernetIsLinkUp+0x14>
   3e2a0:	e59f0020 	ldr	r0, [pc, #32]	; 3e2c8 <USPiEthernetIsLinkUp+0x8c>
   3e2a4:	e59f1018 	ldr	r1, [pc, #24]	; 3e2c4 <USPiEthernetIsLinkUp+0x88>
   3e2a8:	e3a020f9 	mov	r2, #249	; 0xf9
   3e2ac:	ebffe2e5 	bl	36e48 <uspi_assertion_failed>
   3e2b0:	e5943000 	ldr	r3, [r4]
   3e2b4:	e59307b0 	ldr	r0, [r3, #1968]	; 0x7b0
   3e2b8:	eaffffee 	b	3e278 <USPiEthernetIsLinkUp+0x3c>
   3e2bc:	000bfe54 	.word	0x000bfe54
   3e2c0:	000562fc 	.word	0x000562fc
   3e2c4:	000562ec 	.word	0x000562ec
   3e2c8:	000563d0 	.word	0x000563d0

0003e2cc <USPiSendFrame>:
   3e2cc:	e92d4070 	push	{r4, r5, r6, lr}
   3e2d0:	e59f408c 	ldr	r4, [pc, #140]	; 3e364 <USPiSendFrame+0x98>
   3e2d4:	e1a06000 	mov	r6, r0
   3e2d8:	e5943000 	ldr	r3, [r4]
   3e2dc:	e1a05001 	mov	r5, r1
   3e2e0:	e3530000 	cmp	r3, #0
   3e2e4:	0a000011 	beq	3e330 <USPiSendFrame+0x64>
   3e2e8:	e59307b4 	ldr	r0, [r3, #1972]	; 0x7b4
   3e2ec:	e3500000 	cmp	r0, #0
   3e2f0:	0a000005 	beq	3e30c <USPiSendFrame+0x40>
   3e2f4:	e1a01006 	mov	r1, r6
   3e2f8:	e1a02005 	mov	r2, r5
   3e2fc:	eb002159 	bl	46868 <LAN7800DeviceSendFrame>
   3e300:	e2900000 	adds	r0, r0, #0
   3e304:	13a00001 	movne	r0, #1
   3e308:	e8bd8070 	pop	{r4, r5, r6, pc}
   3e30c:	e59307b0 	ldr	r0, [r3, #1968]	; 0x7b0
   3e310:	e3500000 	cmp	r0, #0
   3e314:	0a00000b 	beq	3e348 <USPiSendFrame+0x7c>
   3e318:	e1a01006 	mov	r1, r6
   3e31c:	e1a02005 	mov	r2, r5
   3e320:	eb001dff 	bl	45b24 <SMSC951xDeviceSendFrame>
   3e324:	e2900000 	adds	r0, r0, #0
   3e328:	13a00001 	movne	r0, #1
   3e32c:	e8bd8070 	pop	{r4, r5, r6, pc}
   3e330:	e59f0030 	ldr	r0, [pc, #48]	; 3e368 <USPiSendFrame+0x9c>
   3e334:	e59f1030 	ldr	r1, [pc, #48]	; 3e36c <USPiSendFrame+0xa0>
   3e338:	e3a020ff 	mov	r2, #255	; 0xff
   3e33c:	ebffe2c1 	bl	36e48 <uspi_assertion_failed>
   3e340:	e5943000 	ldr	r3, [r4]
   3e344:	eaffffe7 	b	3e2e8 <USPiSendFrame+0x1c>
   3e348:	e59f0020 	ldr	r0, [pc, #32]	; 3e370 <USPiSendFrame+0xa4>
   3e34c:	e59f1018 	ldr	r1, [pc, #24]	; 3e36c <USPiSendFrame+0xa0>
   3e350:	e59f201c 	ldr	r2, [pc, #28]	; 3e374 <USPiSendFrame+0xa8>
   3e354:	ebffe2bb 	bl	36e48 <uspi_assertion_failed>
   3e358:	e5943000 	ldr	r3, [r4]
   3e35c:	e59307b0 	ldr	r0, [r3, #1968]	; 0x7b0
   3e360:	eaffffec 	b	3e318 <USPiSendFrame+0x4c>
   3e364:	000bfe54 	.word	0x000bfe54
   3e368:	000562fc 	.word	0x000562fc
   3e36c:	000562ec 	.word	0x000562ec
   3e370:	000563d0 	.word	0x000563d0
   3e374:	00000106 	.word	0x00000106

0003e378 <USPiReceiveFrame>:
   3e378:	e92d4070 	push	{r4, r5, r6, lr}
   3e37c:	e59f408c 	ldr	r4, [pc, #140]	; 3e410 <USPiReceiveFrame+0x98>
   3e380:	e1a06000 	mov	r6, r0
   3e384:	e5943000 	ldr	r3, [r4]
   3e388:	e1a05001 	mov	r5, r1
   3e38c:	e3530000 	cmp	r3, #0
   3e390:	0a000011 	beq	3e3dc <USPiReceiveFrame+0x64>
   3e394:	e59307b4 	ldr	r0, [r3, #1972]	; 0x7b4
   3e398:	e3500000 	cmp	r0, #0
   3e39c:	0a000005 	beq	3e3b8 <USPiReceiveFrame+0x40>
   3e3a0:	e1a01006 	mov	r1, r6
   3e3a4:	e1a02005 	mov	r2, r5
   3e3a8:	eb002170 	bl	46970 <LAN7800DeviceReceiveFrame>
   3e3ac:	e2900000 	adds	r0, r0, #0
   3e3b0:	13a00001 	movne	r0, #1
   3e3b4:	e8bd8070 	pop	{r4, r5, r6, pc}
   3e3b8:	e59307b0 	ldr	r0, [r3, #1968]	; 0x7b0
   3e3bc:	e3500000 	cmp	r0, #0
   3e3c0:	0a00000b 	beq	3e3f4 <USPiReceiveFrame+0x7c>
   3e3c4:	e1a01006 	mov	r1, r6
   3e3c8:	e1a02005 	mov	r2, r5
   3e3cc:	eb001e14 	bl	45c24 <SMSC951xDeviceReceiveFrame>
   3e3d0:	e2900000 	adds	r0, r0, #0
   3e3d4:	13a00001 	movne	r0, #1
   3e3d8:	e8bd8070 	pop	{r4, r5, r6, pc}
   3e3dc:	e59f0030 	ldr	r0, [pc, #48]	; 3e414 <USPiReceiveFrame+0x9c>
   3e3e0:	e59f1030 	ldr	r1, [pc, #48]	; 3e418 <USPiReceiveFrame+0xa0>
   3e3e4:	e3a02f43 	mov	r2, #268	; 0x10c
   3e3e8:	ebffe296 	bl	36e48 <uspi_assertion_failed>
   3e3ec:	e5943000 	ldr	r3, [r4]
   3e3f0:	eaffffe7 	b	3e394 <USPiReceiveFrame+0x1c>
   3e3f4:	e59f0020 	ldr	r0, [pc, #32]	; 3e41c <USPiReceiveFrame+0xa4>
   3e3f8:	e59f1018 	ldr	r1, [pc, #24]	; 3e418 <USPiReceiveFrame+0xa0>
   3e3fc:	e59f201c 	ldr	r2, [pc, #28]	; 3e420 <USPiReceiveFrame+0xa8>
   3e400:	ebffe290 	bl	36e48 <uspi_assertion_failed>
   3e404:	e5943000 	ldr	r3, [r4]
   3e408:	e59307b0 	ldr	r0, [r3, #1968]	; 0x7b0
   3e40c:	eaffffec 	b	3e3c4 <USPiReceiveFrame+0x4c>
   3e410:	000bfe54 	.word	0x000bfe54
   3e414:	000562fc 	.word	0x000562fc
   3e418:	000562ec 	.word	0x000562ec
   3e41c:	000563d0 	.word	0x000563d0
   3e420:	00000113 	.word	0x00000113

0003e424 <USPiGamePadAvailable>:
   3e424:	e92d4010 	push	{r4, lr}
   3e428:	e59f4048 	ldr	r4, [pc, #72]	; 3e478 <USPiGamePadAvailable+0x54>
   3e42c:	e5943000 	ldr	r3, [r4]
   3e430:	e3530000 	cmp	r3, #0
   3e434:	0a000009 	beq	3e460 <USPiGamePadAvailable+0x3c>
   3e438:	e3a00000 	mov	r0, #0
   3e43c:	e2833e7b 	add	r3, r3, #1968	; 0x7b0
   3e440:	e2833004 	add	r3, r3, #4
   3e444:	e5b32004 	ldr	r2, [r3, #4]!
   3e448:	e3520000 	cmp	r2, #0
   3e44c:	08bd8010 	popeq	{r4, pc}
   3e450:	e2800001 	add	r0, r0, #1
   3e454:	e3500004 	cmp	r0, #4
   3e458:	1afffff9 	bne	3e444 <USPiGamePadAvailable+0x20>
   3e45c:	e8bd8010 	pop	{r4, pc}
   3e460:	e59f0014 	ldr	r0, [pc, #20]	; 3e47c <USPiGamePadAvailable+0x58>
   3e464:	e59f1014 	ldr	r1, [pc, #20]	; 3e480 <USPiGamePadAvailable+0x5c>
   3e468:	e59f2014 	ldr	r2, [pc, #20]	; 3e484 <USPiGamePadAvailable+0x60>
   3e46c:	ebffe275 	bl	36e48 <uspi_assertion_failed>
   3e470:	e5943000 	ldr	r3, [r4]
   3e474:	eaffffef 	b	3e438 <USPiGamePadAvailable+0x14>
   3e478:	000bfe54 	.word	0x000bfe54
   3e47c:	000562fc 	.word	0x000562fc
   3e480:	000562ec 	.word	0x000562ec
   3e484:	00000119 	.word	0x00000119

0003e488 <USPiGamePadRegisterStatusHandler>:
   3e488:	e92d4070 	push	{r4, r5, r6, lr}
   3e48c:	e59f5054 	ldr	r5, [pc, #84]	; 3e4e8 <USPiGamePadRegisterStatusHandler+0x60>
   3e490:	e1a06000 	mov	r6, r0
   3e494:	e5953000 	ldr	r3, [r5]
   3e498:	e3530000 	cmp	r3, #0
   3e49c:	0a00000b 	beq	3e4d0 <USPiGamePadRegisterStatusHandler+0x48>
   3e4a0:	e3a04000 	mov	r4, #0
   3e4a4:	e0833104 	add	r3, r3, r4, lsl #2
   3e4a8:	e59307b8 	ldr	r0, [r3, #1976]	; 0x7b8
   3e4ac:	e2844001 	add	r4, r4, #1
   3e4b0:	e3500000 	cmp	r0, #0
   3e4b4:	0a000001 	beq	3e4c0 <USPiGamePadRegisterStatusHandler+0x38>
   3e4b8:	e1a01006 	mov	r1, r6
   3e4bc:	eb003447 	bl	4b5e0 <USBGamePadDeviceRegisterStatusHandler>
   3e4c0:	e3540004 	cmp	r4, #4
   3e4c4:	08bd8070 	popeq	{r4, r5, r6, pc}
   3e4c8:	e5953000 	ldr	r3, [r5]
   3e4cc:	eafffff4 	b	3e4a4 <USPiGamePadRegisterStatusHandler+0x1c>
   3e4d0:	e59f0014 	ldr	r0, [pc, #20]	; 3e4ec <USPiGamePadRegisterStatusHandler+0x64>
   3e4d4:	e59f1014 	ldr	r1, [pc, #20]	; 3e4f0 <USPiGamePadRegisterStatusHandler+0x68>
   3e4d8:	e59f2014 	ldr	r2, [pc, #20]	; 3e4f4 <USPiGamePadRegisterStatusHandler+0x6c>
   3e4dc:	ebffe259 	bl	36e48 <uspi_assertion_failed>
   3e4e0:	e5953000 	ldr	r3, [r5]
   3e4e4:	eaffffed 	b	3e4a0 <USPiGamePadRegisterStatusHandler+0x18>
   3e4e8:	000bfe54 	.word	0x000bfe54
   3e4ec:	000562fc 	.word	0x000562fc
   3e4f0:	000562ec 	.word	0x000562ec
   3e4f4:	00000129 	.word	0x00000129

0003e4f8 <USPiGamePadGetStatus>:
   3e4f8:	e92d4038 	push	{r3, r4, r5, lr}
   3e4fc:	e59f5060 	ldr	r5, [pc, #96]	; 3e564 <USPiGamePadGetStatus+0x6c>
   3e500:	e1a04000 	mov	r4, r0
   3e504:	e5953000 	ldr	r3, [r5]
   3e508:	e3530000 	cmp	r3, #0
   3e50c:	0a00000f 	beq	3e550 <USPiGamePadGetStatus+0x58>
   3e510:	e3540003 	cmp	r4, #3
   3e514:	8a00000b 	bhi	3e548 <USPiGamePadGetStatus+0x50>
   3e518:	e5953000 	ldr	r3, [r5]
   3e51c:	e2844f7b 	add	r4, r4, #492	; 0x1ec
   3e520:	e2844002 	add	r4, r4, #2
   3e524:	e7930104 	ldr	r0, [r3, r4, lsl #2]
   3e528:	e59f5034 	ldr	r5, [pc, #52]	; 3e564 <USPiGamePadGetStatus+0x6c>
   3e52c:	e3500000 	cmp	r0, #0
   3e530:	08bd8038 	popeq	{r3, r4, r5, pc}
   3e534:	eb003441 	bl	4b640 <USBGamePadDeviceGetReport>
   3e538:	e5953000 	ldr	r3, [r5]
   3e53c:	e7930104 	ldr	r0, [r3, r4, lsl #2]
   3e540:	e280001c 	add	r0, r0, #28
   3e544:	e8bd8038 	pop	{r3, r4, r5, pc}
   3e548:	e3a00000 	mov	r0, #0
   3e54c:	e8bd8038 	pop	{r3, r4, r5, pc}
   3e550:	e59f0010 	ldr	r0, [pc, #16]	; 3e568 <USPiGamePadGetStatus+0x70>
   3e554:	e59f1010 	ldr	r1, [pc, #16]	; 3e56c <USPiGamePadGetStatus+0x74>
   3e558:	e59f2010 	ldr	r2, [pc, #16]	; 3e570 <USPiGamePadGetStatus+0x78>
   3e55c:	ebffe239 	bl	36e48 <uspi_assertion_failed>
   3e560:	eaffffea 	b	3e510 <USPiGamePadGetStatus+0x18>
   3e564:	000bfe54 	.word	0x000bfe54
   3e568:	000562fc 	.word	0x000562fc
   3e56c:	000562ec 	.word	0x000562ec
   3e570:	00000137 	.word	0x00000137

0003e574 <USPiMIDIAvailable>:
   3e574:	e92d4010 	push	{r4, lr}
   3e578:	e59f4030 	ldr	r4, [pc, #48]	; 3e5b0 <USPiMIDIAvailable+0x3c>
   3e57c:	e5943000 	ldr	r3, [r4]
   3e580:	e3530000 	cmp	r3, #0
   3e584:	0a000003 	beq	3e598 <USPiMIDIAvailable+0x24>
   3e588:	e59307c8 	ldr	r0, [r3, #1992]	; 0x7c8
   3e58c:	e2900000 	adds	r0, r0, #0
   3e590:	13a00001 	movne	r0, #1
   3e594:	e8bd8010 	pop	{r4, pc}
   3e598:	e59f0014 	ldr	r0, [pc, #20]	; 3e5b4 <USPiMIDIAvailable+0x40>
   3e59c:	e59f1014 	ldr	r1, [pc, #20]	; 3e5b8 <USPiMIDIAvailable+0x44>
   3e5a0:	e59f2014 	ldr	r2, [pc, #20]	; 3e5bc <USPiMIDIAvailable+0x48>
   3e5a4:	ebffe227 	bl	36e48 <uspi_assertion_failed>
   3e5a8:	e5943000 	ldr	r3, [r4]
   3e5ac:	eafffff5 	b	3e588 <USPiMIDIAvailable+0x14>
   3e5b0:	000bfe54 	.word	0x000bfe54
   3e5b4:	000562fc 	.word	0x000562fc
   3e5b8:	000562ec 	.word	0x000562ec
   3e5bc:	00000146 	.word	0x00000146

0003e5c0 <USPiMIDIRegisterPacketHandler>:
   3e5c0:	e92d4038 	push	{r3, r4, r5, lr}
   3e5c4:	e59f4060 	ldr	r4, [pc, #96]	; 3e62c <USPiMIDIRegisterPacketHandler+0x6c>
   3e5c8:	e1a05000 	mov	r5, r0
   3e5cc:	e5943000 	ldr	r3, [r4]
   3e5d0:	e3530000 	cmp	r3, #0
   3e5d4:	0a00000e 	beq	3e614 <USPiMIDIRegisterPacketHandler+0x54>
   3e5d8:	e59307c8 	ldr	r0, [r3, #1992]	; 0x7c8
   3e5dc:	e3500000 	cmp	r0, #0
   3e5e0:	0a000002 	beq	3e5f0 <USPiMIDIRegisterPacketHandler+0x30>
   3e5e4:	e1a01005 	mov	r1, r5
   3e5e8:	e8bd4038 	pop	{r3, r4, r5, lr}
   3e5ec:	ea00376d 	b	4c3a8 <USBMIDIDeviceRegisterPacketHandler>
   3e5f0:	e59f0038 	ldr	r0, [pc, #56]	; 3e630 <USPiMIDIRegisterPacketHandler+0x70>
   3e5f4:	e59f1038 	ldr	r1, [pc, #56]	; 3e634 <USPiMIDIRegisterPacketHandler+0x74>
   3e5f8:	e59f2038 	ldr	r2, [pc, #56]	; 3e638 <USPiMIDIRegisterPacketHandler+0x78>
   3e5fc:	ebffe211 	bl	36e48 <uspi_assertion_failed>
   3e600:	e5943000 	ldr	r3, [r4]
   3e604:	e1a01005 	mov	r1, r5
   3e608:	e59307c8 	ldr	r0, [r3, #1992]	; 0x7c8
   3e60c:	e8bd4038 	pop	{r3, r4, r5, lr}
   3e610:	ea003764 	b	4c3a8 <USBMIDIDeviceRegisterPacketHandler>
   3e614:	e59f0020 	ldr	r0, [pc, #32]	; 3e63c <USPiMIDIRegisterPacketHandler+0x7c>
   3e618:	e59f1014 	ldr	r1, [pc, #20]	; 3e634 <USPiMIDIRegisterPacketHandler+0x74>
   3e61c:	e3a02f53 	mov	r2, #332	; 0x14c
   3e620:	ebffe208 	bl	36e48 <uspi_assertion_failed>
   3e624:	e5943000 	ldr	r3, [r4]
   3e628:	eaffffea 	b	3e5d8 <USPiMIDIRegisterPacketHandler+0x18>
   3e62c:	000bfe54 	.word	0x000bfe54
   3e630:	000563e8 	.word	0x000563e8
   3e634:	000562ec 	.word	0x000562ec
   3e638:	0000014d 	.word	0x0000014d
   3e63c:	000562fc 	.word	0x000562fc

0003e640 <USPiDeviceGetInformation>:
   3e640:	e92d40f8 	push	{r3, r4, r5, r6, r7, lr}
   3e644:	e59f61a4 	ldr	r6, [pc, #420]	; 3e7f0 <USPiDeviceGetInformation+0x1b0>
   3e648:	e1a05000 	mov	r5, r0
   3e64c:	e5963000 	ldr	r3, [r6]
   3e650:	e1a07001 	mov	r7, r1
   3e654:	e3530000 	cmp	r3, #0
   3e658:	e1a04002 	mov	r4, r2
   3e65c:	0a00004f 	beq	3e7a0 <USPiDeviceGetInformation+0x160>
   3e660:	e2450001 	sub	r0, r5, #1
   3e664:	e3500005 	cmp	r0, #5
   3e668:	979ff100 	ldrls	pc, [pc, r0, lsl #2]
   3e66c:	ea000005 	b	3e688 <USPiDeviceGetInformation+0x48>
   3e670:	0003e728 	.word	0x0003e728
   3e674:	0003e73c 	.word	0x0003e73c
   3e678:	0003e750 	.word	0x0003e750
   3e67c:	0003e768 	.word	0x0003e768
   3e680:	0003e788 	.word	0x0003e788
   3e684:	0003e694 	.word	0x0003e694
   3e688:	e3a03000 	mov	r3, #0
   3e68c:	e1a00003 	mov	r0, r3
   3e690:	e8bd80f8 	pop	{r3, r4, r5, r6, r7, pc}
   3e694:	e3570000 	cmp	r7, #0
   3e698:	1afffffa 	bne	3e688 <USPiDeviceGetInformation+0x48>
   3e69c:	e5963000 	ldr	r3, [r6]
   3e6a0:	e59307c8 	ldr	r0, [r3, #1992]	; 0x7c8
   3e6a4:	e3500000 	cmp	r0, #0
   3e6a8:	01a03000 	moveq	r3, r0
   3e6ac:	0afffff6 	beq	3e68c <USPiDeviceGetInformation+0x4c>
   3e6b0:	eb001b7a 	bl	454a0 <USBFunctionGetDevice>
   3e6b4:	e2506000 	subs	r6, r0, #0
   3e6b8:	0a000047 	beq	3e7dc <USPiDeviceGetInformation+0x19c>
   3e6bc:	e1a00006 	mov	r0, r6
   3e6c0:	eb001039 	bl	427ac <USBDeviceGetDeviceDescriptor>
   3e6c4:	e2505000 	subs	r5, r0, #0
   3e6c8:	0a00003e 	beq	3e7c8 <USPiDeviceGetInformation+0x188>
   3e6cc:	e3540000 	cmp	r4, #0
   3e6d0:	0a000037 	beq	3e7b4 <USPiDeviceGetInformation+0x174>
   3e6d4:	e5d52009 	ldrb	r2, [r5, #9]
   3e6d8:	e5d53008 	ldrb	r3, [r5, #8]
   3e6dc:	e2860020 	add	r0, r6, #32
   3e6e0:	e1833402 	orr	r3, r3, r2, lsl #8
   3e6e4:	e1c430b0 	strh	r3, [r4]
   3e6e8:	e5d5200b 	ldrb	r2, [r5, #11]
   3e6ec:	e5d5300a 	ldrb	r3, [r5, #10]
   3e6f0:	e1833402 	orr	r3, r3, r2, lsl #8
   3e6f4:	e1c430b2 	strh	r3, [r4, #2]
   3e6f8:	e5d5200d 	ldrb	r2, [r5, #13]
   3e6fc:	e5d5300c 	ldrb	r3, [r5, #12]
   3e700:	e1833402 	orr	r3, r3, r2, lsl #8
   3e704:	e1c430b4 	strh	r3, [r4, #4]
   3e708:	eb003562 	bl	4bc98 <USBStringGet>
   3e70c:	e5840008 	str	r0, [r4, #8]
   3e710:	e286002c 	add	r0, r6, #44	; 0x2c
   3e714:	eb00355f 	bl	4bc98 <USBStringGet>
   3e718:	e3a03001 	mov	r3, #1
   3e71c:	e584000c 	str	r0, [r4, #12]
   3e720:	e1a00003 	mov	r0, r3
   3e724:	e8bd80f8 	pop	{r3, r4, r5, r6, r7, pc}
   3e728:	e3570000 	cmp	r7, #0
   3e72c:	1affffd5 	bne	3e688 <USPiDeviceGetInformation+0x48>
   3e730:	e5963000 	ldr	r3, [r6]
   3e734:	e5930798 	ldr	r0, [r3, #1944]	; 0x798
   3e738:	eaffffd9 	b	3e6a4 <USPiDeviceGetInformation+0x64>
   3e73c:	e3570000 	cmp	r7, #0
   3e740:	1affffd0 	bne	3e688 <USPiDeviceGetInformation+0x48>
   3e744:	e5963000 	ldr	r3, [r6]
   3e748:	e593079c 	ldr	r0, [r3, #1948]	; 0x79c
   3e74c:	eaffffd4 	b	3e6a4 <USPiDeviceGetInformation+0x64>
   3e750:	e3570003 	cmp	r7, #3
   3e754:	8affffcb 	bhi	3e688 <USPiDeviceGetInformation+0x48>
   3e758:	e5963000 	ldr	r3, [r6]
   3e75c:	e2877f7a 	add	r7, r7, #488	; 0x1e8
   3e760:	e7930107 	ldr	r0, [r3, r7, lsl #2]
   3e764:	eaffffce 	b	3e6a4 <USPiDeviceGetInformation+0x64>
   3e768:	e3570000 	cmp	r7, #0
   3e76c:	1affffc5 	bne	3e688 <USPiDeviceGetInformation+0x48>
   3e770:	e5963000 	ldr	r3, [r6]
   3e774:	e59307b4 	ldr	r0, [r3, #1972]	; 0x7b4
   3e778:	e3500000 	cmp	r0, #0
   3e77c:	059307b0 	ldreq	r0, [r3, #1968]	; 0x7b0
   3e780:	1affffca 	bne	3e6b0 <USPiDeviceGetInformation+0x70>
   3e784:	eaffffc6 	b	3e6a4 <USPiDeviceGetInformation+0x64>
   3e788:	e3570003 	cmp	r7, #3
   3e78c:	8affffbd 	bhi	3e688 <USPiDeviceGetInformation+0x48>
   3e790:	e5963000 	ldr	r3, [r6]
   3e794:	e0837107 	add	r7, r3, r7, lsl #2
   3e798:	e59707b8 	ldr	r0, [r7, #1976]	; 0x7b8
   3e79c:	eaffffc0 	b	3e6a4 <USPiDeviceGetInformation+0x64>
   3e7a0:	e59f004c 	ldr	r0, [pc, #76]	; 3e7f4 <USPiDeviceGetInformation+0x1b4>
   3e7a4:	e59f104c 	ldr	r1, [pc, #76]	; 3e7f8 <USPiDeviceGetInformation+0x1b8>
   3e7a8:	e59f204c 	ldr	r2, [pc, #76]	; 3e7fc <USPiDeviceGetInformation+0x1bc>
   3e7ac:	ebffe1a5 	bl	36e48 <uspi_assertion_failed>
   3e7b0:	eaffffaa 	b	3e660 <USPiDeviceGetInformation+0x20>
   3e7b4:	e59f0044 	ldr	r0, [pc, #68]	; 3e800 <USPiDeviceGetInformation+0x1c0>
   3e7b8:	e59f1038 	ldr	r1, [pc, #56]	; 3e7f8 <USPiDeviceGetInformation+0x1b8>
   3e7bc:	e59f2040 	ldr	r2, [pc, #64]	; 3e804 <USPiDeviceGetInformation+0x1c4>
   3e7c0:	ebffe1a0 	bl	36e48 <uspi_assertion_failed>
   3e7c4:	eaffffc2 	b	3e6d4 <USPiDeviceGetInformation+0x94>
   3e7c8:	e59f0038 	ldr	r0, [pc, #56]	; 3e808 <USPiDeviceGetInformation+0x1c8>
   3e7cc:	e59f1024 	ldr	r1, [pc, #36]	; 3e7f8 <USPiDeviceGetInformation+0x1b8>
   3e7d0:	e59f2034 	ldr	r2, [pc, #52]	; 3e80c <USPiDeviceGetInformation+0x1cc>
   3e7d4:	ebffe19b 	bl	36e48 <uspi_assertion_failed>
   3e7d8:	eaffffbb 	b	3e6cc <USPiDeviceGetInformation+0x8c>
   3e7dc:	e59f002c 	ldr	r0, [pc, #44]	; 3e810 <USPiDeviceGetInformation+0x1d0>
   3e7e0:	e59f1010 	ldr	r1, [pc, #16]	; 3e7f8 <USPiDeviceGetInformation+0x1b8>
   3e7e4:	e3a02f65 	mov	r2, #404	; 0x194
   3e7e8:	ebffe196 	bl	36e48 <uspi_assertion_failed>
   3e7ec:	eaffffb2 	b	3e6bc <USPiDeviceGetInformation+0x7c>
   3e7f0:	000bfe54 	.word	0x000bfe54
   3e7f4:	000562fc 	.word	0x000562fc
   3e7f8:	000562ec 	.word	0x000562ec
   3e7fc:	00000153 	.word	0x00000153
   3e800:	0005641c 	.word	0x0005641c
   3e804:	00000199 	.word	0x00000199
   3e808:	00056410 	.word	0x00056410
   3e80c:	00000197 	.word	0x00000197
   3e810:	00056400 	.word	0x00056400

0003e814 <DWHCIDeviceCompletionRoutine>:
   3e814:	e92d4010 	push	{r4, lr}
   3e818:	e2524000 	subs	r4, r2, #0
   3e81c:	0a000002 	beq	3e82c <DWHCIDeviceCompletionRoutine+0x18>
   3e820:	e3a03000 	mov	r3, #0
   3e824:	e5843788 	str	r3, [r4, #1928]	; 0x788
   3e828:	e8bd8010 	pop	{r4, pc}
   3e82c:	e59f000c 	ldr	r0, [pc, #12]	; 3e840 <DWHCIDeviceCompletionRoutine+0x2c>
   3e830:	e59f100c 	ldr	r1, [pc, #12]	; 3e844 <DWHCIDeviceCompletionRoutine+0x30>
   3e834:	e59f200c 	ldr	r2, [pc, #12]	; 3e848 <DWHCIDeviceCompletionRoutine+0x34>
   3e838:	ebffe182 	bl	36e48 <uspi_assertion_failed>
   3e83c:	eafffff7 	b	3e820 <DWHCIDeviceCompletionRoutine+0xc>
   3e840:	00056434 	.word	0x00056434
   3e844:	00056440 	.word	0x00056440
   3e848:	000002da 	.word	0x000002da

0003e84c <DWHCIDevice>:
   3e84c:	e92d4010 	push	{r4, lr}
   3e850:	e2504000 	subs	r4, r0, #0
   3e854:	0a000008 	beq	3e87c <DWHCIDevice+0x30>
   3e858:	e3a03000 	mov	r3, #0
   3e85c:	e2840d1e 	add	r0, r4, #1920	; 0x780
   3e860:	e5843004 	str	r3, [r4, #4]
   3e864:	e5843000 	str	r3, [r4]
   3e868:	e5843788 	str	r3, [r4, #1928]	; 0x788
   3e86c:	e1a01004 	mov	r1, r4
   3e870:	e8bd4010 	pop	{r4, lr}
   3e874:	e280000c 	add	r0, r0, #12
   3e878:	ea002d8f 	b	49ebc <DWHCIRootPort>
   3e87c:	e59f000c 	ldr	r0, [pc, #12]	; 3e890 <DWHCIDevice+0x44>
   3e880:	e59f100c 	ldr	r1, [pc, #12]	; 3e894 <DWHCIDevice+0x48>
   3e884:	e3a0205f 	mov	r2, #95	; 0x5f
   3e888:	ebffe16e 	bl	36e48 <uspi_assertion_failed>
   3e88c:	eafffff1 	b	3e858 <DWHCIDevice+0xc>
   3e890:	00056434 	.word	0x00056434
   3e894:	00056440 	.word	0x00056440

0003e898 <_DWHCIDevice>:
   3e898:	e2800d1e 	add	r0, r0, #1920	; 0x780
   3e89c:	e280000c 	add	r0, r0, #12
   3e8a0:	ea002d9b 	b	49f14 <_DWHCIRootPort>

0003e8a4 <DWHCIDeviceEnableGlobalInterrupts>:
   3e8a4:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   3e8a8:	e3500000 	cmp	r0, #0
   3e8ac:	e24dd014 	sub	sp, sp, #20
   3e8b0:	0a00000d 	beq	3e8ec <DWHCIDeviceEnableGlobalInterrupts+0x48>
   3e8b4:	e28d0004 	add	r0, sp, #4
   3e8b8:	e59f1040 	ldr	r1, [pc, #64]	; 3e900 <DWHCIDeviceEnableGlobalInterrupts+0x5c>
   3e8bc:	eb00098a 	bl	40eec <DWHCIRegister>
   3e8c0:	e28d0004 	add	r0, sp, #4
   3e8c4:	eb0009b4 	bl	40f9c <DWHCIRegisterRead>
   3e8c8:	e3a01001 	mov	r1, #1
   3e8cc:	e28d0004 	add	r0, sp, #4
   3e8d0:	eb000a29 	bl	4117c <DWHCIRegisterOr>
   3e8d4:	e28d0004 	add	r0, sp, #4
   3e8d8:	eb0009bf 	bl	40fdc <DWHCIRegisterWrite>
   3e8dc:	e28d0004 	add	r0, sp, #4
   3e8e0:	eb0009a0 	bl	40f68 <_DWHCIRegister>
   3e8e4:	e28dd014 	add	sp, sp, #20
   3e8e8:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
   3e8ec:	e59f0010 	ldr	r0, [pc, #16]	; 3e904 <DWHCIDeviceEnableGlobalInterrupts+0x60>
   3e8f0:	e59f1010 	ldr	r1, [pc, #16]	; 3e908 <DWHCIDeviceEnableGlobalInterrupts+0x64>
   3e8f4:	e59f2010 	ldr	r2, [pc, #16]	; 3e90c <DWHCIDeviceEnableGlobalInterrupts+0x68>
   3e8f8:	ebffe152 	bl	36e48 <uspi_assertion_failed>
   3e8fc:	eaffffec 	b	3e8b4 <DWHCIDeviceEnableGlobalInterrupts+0x10>
   3e900:	20980008 	.word	0x20980008
   3e904:	00056434 	.word	0x00056434
   3e908:	00056440 	.word	0x00056440
   3e90c:	0000023f 	.word	0x0000023f

0003e910 <DWHCIDeviceEnableCommonInterrupts>:
   3e910:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   3e914:	e3500000 	cmp	r0, #0
   3e918:	e24dd014 	sub	sp, sp, #20
   3e91c:	0a00000a 	beq	3e94c <DWHCIDeviceEnableCommonInterrupts+0x3c>
   3e920:	e59f1038 	ldr	r1, [pc, #56]	; 3e960 <DWHCIDeviceEnableCommonInterrupts+0x50>
   3e924:	e28d0004 	add	r0, sp, #4
   3e928:	eb00096f 	bl	40eec <DWHCIRegister>
   3e92c:	e28d0004 	add	r0, sp, #4
   3e930:	eb000a77 	bl	41314 <DWHCIRegisterSetAll>
   3e934:	e28d0004 	add	r0, sp, #4
   3e938:	eb0009a7 	bl	40fdc <DWHCIRegisterWrite>
   3e93c:	e28d0004 	add	r0, sp, #4
   3e940:	eb000988 	bl	40f68 <_DWHCIRegister>
   3e944:	e28dd014 	add	sp, sp, #20
   3e948:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
   3e94c:	e59f0010 	ldr	r0, [pc, #16]	; 3e964 <DWHCIDeviceEnableCommonInterrupts+0x54>
   3e950:	e59f1010 	ldr	r1, [pc, #16]	; 3e968 <DWHCIDeviceEnableCommonInterrupts+0x58>
   3e954:	e3a02f93 	mov	r2, #588	; 0x24c
   3e958:	ebffe13a 	bl	36e48 <uspi_assertion_failed>
   3e95c:	eaffffef 	b	3e920 <DWHCIDeviceEnableCommonInterrupts+0x10>
   3e960:	20980014 	.word	0x20980014
   3e964:	00056434 	.word	0x00056434
   3e968:	00056440 	.word	0x00056440

0003e96c <DWHCIDeviceEnableHostInterrupts>:
   3e96c:	e92d4010 	push	{r4, lr}
   3e970:	e2504000 	subs	r4, r0, #0
   3e974:	e24dd010 	sub	sp, sp, #16
   3e978:	0a000012 	beq	3e9c8 <DWHCIDeviceEnableHostInterrupts+0x5c>
   3e97c:	e3a02000 	mov	r2, #0
   3e980:	e59f1054 	ldr	r1, [pc, #84]	; 3e9dc <DWHCIDeviceEnableHostInterrupts+0x70>
   3e984:	e28d0004 	add	r0, sp, #4
   3e988:	eb000965 	bl	40f24 <DWHCIRegister2>
   3e98c:	e28d0004 	add	r0, sp, #4
   3e990:	eb000991 	bl	40fdc <DWHCIRegisterWrite>
   3e994:	e1a00004 	mov	r0, r4
   3e998:	ebffffdc 	bl	3e910 <DWHCIDeviceEnableCommonInterrupts>
   3e99c:	e28d0004 	add	r0, sp, #4
   3e9a0:	eb00097d 	bl	40f9c <DWHCIRegisterRead>
   3e9a4:	e3a01402 	mov	r1, #33554432	; 0x2000000
   3e9a8:	e28d0004 	add	r0, sp, #4
   3e9ac:	eb0009f2 	bl	4117c <DWHCIRegisterOr>
   3e9b0:	e28d0004 	add	r0, sp, #4
   3e9b4:	eb000988 	bl	40fdc <DWHCIRegisterWrite>
   3e9b8:	e28d0004 	add	r0, sp, #4
   3e9bc:	eb000969 	bl	40f68 <_DWHCIRegister>
   3e9c0:	e28dd010 	add	sp, sp, #16
   3e9c4:	e8bd8010 	pop	{r4, pc}
   3e9c8:	e59f0010 	ldr	r0, [pc, #16]	; 3e9e0 <DWHCIDeviceEnableHostInterrupts+0x74>
   3e9cc:	e59f1010 	ldr	r1, [pc, #16]	; 3e9e4 <DWHCIDeviceEnableHostInterrupts+0x78>
   3e9d0:	e3a02f99 	mov	r2, #612	; 0x264
   3e9d4:	ebffe11b 	bl	36e48 <uspi_assertion_failed>
   3e9d8:	eaffffe7 	b	3e97c <DWHCIDeviceEnableHostInterrupts+0x10>
   3e9dc:	20980018 	.word	0x20980018
   3e9e0:	00056434 	.word	0x00056434
   3e9e4:	00056440 	.word	0x00056440

0003e9e8 <DWHCIDeviceEnableChannelInterrupt>:
   3e9e8:	e92d4010 	push	{r4, lr}
   3e9ec:	e3500000 	cmp	r0, #0
   3e9f0:	e24dd010 	sub	sp, sp, #16
   3e9f4:	e1a04001 	mov	r4, r1
   3e9f8:	0a000010 	beq	3ea40 <DWHCIDeviceEnableChannelInterrupt+0x58>
   3e9fc:	e28d0004 	add	r0, sp, #4
   3ea00:	e59f104c 	ldr	r1, [pc, #76]	; 3ea54 <DWHCIDeviceEnableChannelInterrupt+0x6c>
   3ea04:	eb000938 	bl	40eec <DWHCIRegister>
   3ea08:	eb00332b 	bl	4b6bc <uspi_EnterCritical>
   3ea0c:	e28d0004 	add	r0, sp, #4
   3ea10:	eb000961 	bl	40f9c <DWHCIRegisterRead>
   3ea14:	e3a01001 	mov	r1, #1
   3ea18:	e28d0004 	add	r0, sp, #4
   3ea1c:	e1a01411 	lsl	r1, r1, r4
   3ea20:	eb0009d5 	bl	4117c <DWHCIRegisterOr>
   3ea24:	e28d0004 	add	r0, sp, #4
   3ea28:	eb00096b 	bl	40fdc <DWHCIRegisterWrite>
   3ea2c:	eb003331 	bl	4b6f8 <uspi_LeaveCritical>
   3ea30:	e28d0004 	add	r0, sp, #4
   3ea34:	eb00094b 	bl	40f68 <_DWHCIRegister>
   3ea38:	e28dd010 	add	sp, sp, #16
   3ea3c:	e8bd8010 	pop	{r4, pc}
   3ea40:	e59f0010 	ldr	r0, [pc, #16]	; 3ea58 <DWHCIDeviceEnableChannelInterrupt+0x70>
   3ea44:	e59f1010 	ldr	r1, [pc, #16]	; 3ea5c <DWHCIDeviceEnableChannelInterrupt+0x74>
   3ea48:	e3a02f9e 	mov	r2, #632	; 0x278
   3ea4c:	ebffe0fd 	bl	36e48 <uspi_assertion_failed>
   3ea50:	eaffffe9 	b	3e9fc <DWHCIDeviceEnableChannelInterrupt+0x14>
   3ea54:	20980418 	.word	0x20980418
   3ea58:	00056434 	.word	0x00056434
   3ea5c:	00056440 	.word	0x00056440

0003ea60 <DWHCIDeviceDisableChannelInterrupt>:
   3ea60:	e92d4010 	push	{r4, lr}
   3ea64:	e3500000 	cmp	r0, #0
   3ea68:	e24dd010 	sub	sp, sp, #16
   3ea6c:	e1a04001 	mov	r4, r1
   3ea70:	0a000010 	beq	3eab8 <DWHCIDeviceDisableChannelInterrupt+0x58>
   3ea74:	e28d0004 	add	r0, sp, #4
   3ea78:	e59f104c 	ldr	r1, [pc, #76]	; 3eacc <DWHCIDeviceDisableChannelInterrupt+0x6c>
   3ea7c:	eb00091a 	bl	40eec <DWHCIRegister>
   3ea80:	eb00330d 	bl	4b6bc <uspi_EnterCritical>
   3ea84:	e28d0004 	add	r0, sp, #4
   3ea88:	eb000943 	bl	40f9c <DWHCIRegisterRead>
   3ea8c:	e3a01001 	mov	r1, #1
   3ea90:	e28d0004 	add	r0, sp, #4
   3ea94:	e1e01411 	mvn	r1, r1, lsl r4
   3ea98:	eb0009a0 	bl	41120 <DWHCIRegisterAnd>
   3ea9c:	e28d0004 	add	r0, sp, #4
   3eaa0:	eb00094d 	bl	40fdc <DWHCIRegisterWrite>
   3eaa4:	eb003313 	bl	4b6f8 <uspi_LeaveCritical>
   3eaa8:	e28d0004 	add	r0, sp, #4
   3eaac:	eb00092d 	bl	40f68 <_DWHCIRegister>
   3eab0:	e28dd010 	add	sp, sp, #16
   3eab4:	e8bd8010 	pop	{r4, pc}
   3eab8:	e59f0010 	ldr	r0, [pc, #16]	; 3ead0 <DWHCIDeviceDisableChannelInterrupt+0x70>
   3eabc:	e59f1010 	ldr	r1, [pc, #16]	; 3ead4 <DWHCIDeviceDisableChannelInterrupt+0x74>
   3eac0:	e59f2010 	ldr	r2, [pc, #16]	; 3ead8 <DWHCIDeviceDisableChannelInterrupt+0x78>
   3eac4:	ebffe0df 	bl	36e48 <uspi_assertion_failed>
   3eac8:	eaffffe9 	b	3ea74 <DWHCIDeviceDisableChannelInterrupt+0x14>
   3eacc:	20980418 	.word	0x20980418
   3ead0:	00056434 	.word	0x00056434
   3ead4:	00056440 	.word	0x00056440
   3ead8:	0000028a 	.word	0x0000028a

0003eadc <DWHCIDeviceStartChannel>:
   3eadc:	e92d4070 	push	{r4, r5, r6, lr}
   3eae0:	e2506000 	subs	r6, r0, #0
   3eae4:	e24dd048 	sub	sp, sp, #72	; 0x48
   3eae8:	e1a04001 	mov	r4, r1
   3eaec:	0a0000dd 	beq	3ee68 <DWHCIDeviceStartChannel+0x38c>
   3eaf0:	e3540000 	cmp	r4, #0
   3eaf4:	0a0000e0 	beq	3ee7c <DWHCIDeviceStartChannel+0x3a0>
   3eaf8:	e1a00004 	mov	r0, r4
   3eafc:	eb000afd 	bl	416f8 <DWHCITransferStageDataGetChannelNumber>
   3eb00:	e5963000 	ldr	r3, [r6]
   3eb04:	e1a05000 	mov	r5, r0
   3eb08:	e1500003 	cmp	r0, r3
   3eb0c:	2a0000cc 	bcs	3ee44 <DWHCIDeviceStartChannel+0x368>
   3eb10:	e1a00004 	mov	r0, r4
   3eb14:	e3a01001 	mov	r1, #1
   3eb18:	eb000ad9 	bl	41684 <DWHCITransferStageDataSetSubState>
   3eb1c:	e59f136c 	ldr	r1, [pc, #876]	; 3ee90 <DWHCIDeviceStartChannel+0x3b4>
   3eb20:	e1a05285 	lsl	r5, r5, #5
   3eb24:	e0851001 	add	r1, r5, r1
   3eb28:	e1a0000d 	mov	r0, sp
   3eb2c:	eb0008ee 	bl	40eec <DWHCIRegister>
   3eb30:	e1a0000d 	mov	r0, sp
   3eb34:	eb0009f6 	bl	41314 <DWHCIRegisterSetAll>
   3eb38:	e1a0000d 	mov	r0, sp
   3eb3c:	eb000926 	bl	40fdc <DWHCIRegisterWrite>
   3eb40:	e59f134c 	ldr	r1, [pc, #844]	; 3ee94 <DWHCIDeviceStartChannel+0x3b8>
   3eb44:	e3a02000 	mov	r2, #0
   3eb48:	e0851001 	add	r1, r5, r1
   3eb4c:	e28d000c 	add	r0, sp, #12
   3eb50:	eb0008f3 	bl	40f24 <DWHCIRegister2>
   3eb54:	e1a00004 	mov	r0, r4
   3eb58:	eb000c7c 	bl	41d50 <DWHCITransferStageDataGetBytesToTransfer>
   3eb5c:	e3c004ff 	bic	r0, r0, #-16777216	; 0xff000000
   3eb60:	e3c0173e 	bic	r1, r0, #16252928	; 0xf80000
   3eb64:	e28d000c 	add	r0, sp, #12
   3eb68:	eb000983 	bl	4117c <DWHCIRegisterOr>
   3eb6c:	e1a00004 	mov	r0, r4
   3eb70:	eb000c84 	bl	41d88 <DWHCITransferStageDataGetPacketsToTransfer>
   3eb74:	e59f131c 	ldr	r1, [pc, #796]	; 3ee98 <DWHCIDeviceStartChannel+0x3bc>
   3eb78:	e1a00980 	lsl	r0, r0, #19
   3eb7c:	e0011000 	and	r1, r1, r0
   3eb80:	e28d000c 	add	r0, sp, #12
   3eb84:	eb00097c 	bl	4117c <DWHCIRegisterOr>
   3eb88:	e1a00004 	mov	r0, r4
   3eb8c:	eb000c17 	bl	41bf0 <DWHCITransferStageDataGetPID>
   3eb90:	e1a01e80 	lsl	r1, r0, #29
   3eb94:	e28d000c 	add	r0, sp, #12
   3eb98:	eb000977 	bl	4117c <DWHCIRegisterOr>
   3eb9c:	e28d000c 	add	r0, sp, #12
   3eba0:	eb00090d 	bl	40fdc <DWHCIRegisterWrite>
   3eba4:	e1a00004 	mov	r0, r4
   3eba8:	eb000c53 	bl	41cfc <DWHCITransferStageDataGetDMAAddress>
   3ebac:	e59f12e8 	ldr	r1, [pc, #744]	; 3ee9c <DWHCIDeviceStartChannel+0x3c0>
   3ebb0:	e3c02103 	bic	r2, r0, #-1073741824	; 0xc0000000
   3ebb4:	e3822101 	orr	r2, r2, #1073741824	; 0x40000000
   3ebb8:	e0851001 	add	r1, r5, r1
   3ebbc:	e28d0018 	add	r0, sp, #24
   3ebc0:	eb0008d7 	bl	40f24 <DWHCIRegister2>
   3ebc4:	e28d0018 	add	r0, sp, #24
   3ebc8:	eb000903 	bl	40fdc <DWHCIRegisterWrite>
   3ebcc:	e1a00004 	mov	r0, r4
   3ebd0:	eb000c49 	bl	41cfc <DWHCITransferStageDataGetDMAAddress>
   3ebd4:	e1a06000 	mov	r6, r0
   3ebd8:	e1a00004 	mov	r0, r4
   3ebdc:	eb000c5b 	bl	41d50 <DWHCITransferStageDataGetBytesToTransfer>
   3ebe0:	e1a01000 	mov	r1, r0
   3ebe4:	e1a00006 	mov	r0, r6
   3ebe8:	eb0032dc 	bl	4b760 <uspi_CleanAndInvalidateDataCacheRange>
   3ebec:	e3a02000 	mov	r2, #0
   3ebf0:	ee072fba 	mcr	15, 0, r2, cr7, cr10, {5}
   3ebf4:	e59f12a4 	ldr	r1, [pc, #676]	; 3eea0 <DWHCIDeviceStartChannel+0x3c4>
   3ebf8:	e28d0024 	add	r0, sp, #36	; 0x24
   3ebfc:	e0851001 	add	r1, r5, r1
   3ec00:	eb0008c7 	bl	40f24 <DWHCIRegister2>
   3ec04:	e1a00004 	mov	r0, r4
   3ec08:	eb000c6c 	bl	41dc0 <DWHCITransferStageDataIsSplit>
   3ec0c:	e3500000 	cmp	r0, #0
   3ec10:	1a000074 	bne	3ede8 <DWHCIDeviceStartChannel+0x30c>
   3ec14:	e28d0024 	add	r0, sp, #36	; 0x24
   3ec18:	eb0008ef 	bl	40fdc <DWHCIRegisterWrite>
   3ec1c:	e59f1280 	ldr	r1, [pc, #640]	; 3eea4 <DWHCIDeviceStartChannel+0x3c8>
   3ec20:	e28d0030 	add	r0, sp, #48	; 0x30
   3ec24:	e0851001 	add	r1, r5, r1
   3ec28:	eb0008af 	bl	40eec <DWHCIRegister>
   3ec2c:	e28d0030 	add	r0, sp, #48	; 0x30
   3ec30:	eb0008d9 	bl	40f9c <DWHCIRegisterRead>
   3ec34:	e59f126c 	ldr	r1, [pc, #620]	; 3eea8 <DWHCIDeviceStartChannel+0x3cc>
   3ec38:	e28d0030 	add	r0, sp, #48	; 0x30
   3ec3c:	eb000937 	bl	41120 <DWHCIRegisterAnd>
   3ec40:	e1a00004 	mov	r0, r4
   3ec44:	eb000bce 	bl	41b84 <DWHCITransferStageDataGetMaxPacketSize>
   3ec48:	e1a01a80 	lsl	r1, r0, #21
   3ec4c:	e1a01aa1 	lsr	r1, r1, #21
   3ec50:	e28d0030 	add	r0, sp, #48	; 0x30
   3ec54:	eb000948 	bl	4117c <DWHCIRegisterOr>
   3ec58:	e28d0030 	add	r0, sp, #48	; 0x30
   3ec5c:	e3e01603 	mvn	r1, #3145728	; 0x300000
   3ec60:	eb00092e 	bl	41120 <DWHCIRegisterAnd>
   3ec64:	e28d0030 	add	r0, sp, #48	; 0x30
   3ec68:	e3a01601 	mov	r1, #1048576	; 0x100000
   3ec6c:	eb000942 	bl	4117c <DWHCIRegisterOr>
   3ec70:	e1a00004 	mov	r0, r4
   3ec74:	eb000c04 	bl	41c8c <DWHCITransferStageDataIsDirectionIn>
   3ec78:	e3500000 	cmp	r0, #0
   3ec7c:	e28d0030 	add	r0, sp, #48	; 0x30
   3ec80:	0a000052 	beq	3edd0 <DWHCIDeviceStartChannel+0x2f4>
   3ec84:	e3a01902 	mov	r1, #32768	; 0x8000
   3ec88:	eb00093b 	bl	4117c <DWHCIRegisterOr>
   3ec8c:	e1a00004 	mov	r0, r4
   3ec90:	eb000bc9 	bl	41bbc <DWHCITransferStageDataGetSpeed>
   3ec94:	e3500000 	cmp	r0, #0
   3ec98:	e28d0030 	add	r0, sp, #48	; 0x30
   3ec9c:	1a000048 	bne	3edc4 <DWHCIDeviceStartChannel+0x2e8>
   3eca0:	e3a01802 	mov	r1, #131072	; 0x20000
   3eca4:	eb000934 	bl	4117c <DWHCIRegisterOr>
   3eca8:	e3e0157f 	mvn	r1, #532676608	; 0x1fc00000
   3ecac:	e28d0030 	add	r0, sp, #48	; 0x30
   3ecb0:	eb00091a 	bl	41120 <DWHCIRegisterAnd>
   3ecb4:	e1a00004 	mov	r0, r4
   3ecb8:	eb000b58 	bl	41a20 <DWHCITransferStageDataGetDeviceAddress>
   3ecbc:	e1a01b00 	lsl	r1, r0, #22
   3ecc0:	e28d0030 	add	r0, sp, #48	; 0x30
   3ecc4:	eb00092c 	bl	4117c <DWHCIRegisterOr>
   3ecc8:	e3e01703 	mvn	r1, #786432	; 0xc0000
   3eccc:	e28d0030 	add	r0, sp, #48	; 0x30
   3ecd0:	eb000912 	bl	41120 <DWHCIRegisterAnd>
   3ecd4:	e1a00004 	mov	r0, r4
   3ecd8:	eb000b67 	bl	41a7c <DWHCITransferStageDataGetEndpointType>
   3ecdc:	e1a01900 	lsl	r1, r0, #18
   3ece0:	e28d0030 	add	r0, sp, #48	; 0x30
   3ece4:	eb000924 	bl	4117c <DWHCIRegisterOr>
   3ece8:	e3e01b1e 	mvn	r1, #30720	; 0x7800
   3ecec:	e28d0030 	add	r0, sp, #48	; 0x30
   3ecf0:	eb00090a 	bl	41120 <DWHCIRegisterAnd>
   3ecf4:	e1a00004 	mov	r0, r4
   3ecf8:	eb000b89 	bl	41b24 <DWHCITransferStageDataGetEndpointNumber>
   3ecfc:	e1a01580 	lsl	r1, r0, #11
   3ed00:	e28d0030 	add	r0, sp, #48	; 0x30
   3ed04:	eb00091c 	bl	4117c <DWHCIRegisterOr>
   3ed08:	e1a00004 	mov	r0, r4
   3ed0c:	eb000cfc 	bl	42104 <DWHCITransferStageDataGetFrameScheduler>
   3ed10:	e2506000 	subs	r6, r0, #0
   3ed14:	0a000009 	beq	3ed40 <DWHCIDeviceStartChannel+0x264>
   3ed18:	e5963010 	ldr	r3, [r6, #16]
   3ed1c:	e12fff33 	blx	r3
   3ed20:	e5963014 	ldr	r3, [r6, #20]
   3ed24:	e1a00006 	mov	r0, r6
   3ed28:	e12fff33 	blx	r3
   3ed2c:	e3500000 	cmp	r0, #0
   3ed30:	e28d0030 	add	r0, sp, #48	; 0x30
   3ed34:	1a000028 	bne	3eddc <DWHCIDeviceStartChannel+0x300>
   3ed38:	e3e01202 	mvn	r1, #536870912	; 0x20000000
   3ed3c:	eb0008f7 	bl	41120 <DWHCIRegisterAnd>
   3ed40:	e59f1164 	ldr	r1, [pc, #356]	; 3eeac <DWHCIDeviceStartChannel+0x3d0>
   3ed44:	e28d003c 	add	r0, sp, #60	; 0x3c
   3ed48:	e0851001 	add	r1, r5, r1
   3ed4c:	eb000866 	bl	40eec <DWHCIRegister>
   3ed50:	e1a00004 	mov	r0, r4
   3ed54:	eb000c88 	bl	41f7c <DWHCITransferStageDataGetStatusMask>
   3ed58:	e1a01000 	mov	r1, r0
   3ed5c:	e28d003c 	add	r0, sp, #60	; 0x3c
   3ed60:	eb0008c7 	bl	41084 <DWHCIRegisterSet>
   3ed64:	e28d003c 	add	r0, sp, #60	; 0x3c
   3ed68:	eb00089b 	bl	40fdc <DWHCIRegisterWrite>
   3ed6c:	e28d0030 	add	r0, sp, #48	; 0x30
   3ed70:	e3a01102 	mov	r1, #-2147483648	; 0x80000000
   3ed74:	eb000900 	bl	4117c <DWHCIRegisterOr>
   3ed78:	e3e01101 	mvn	r1, #1073741824	; 0x40000000
   3ed7c:	e28d0030 	add	r0, sp, #48	; 0x30
   3ed80:	eb0008e6 	bl	41120 <DWHCIRegisterAnd>
   3ed84:	e28d0030 	add	r0, sp, #48	; 0x30
   3ed88:	eb000893 	bl	40fdc <DWHCIRegisterWrite>
   3ed8c:	e28d003c 	add	r0, sp, #60	; 0x3c
   3ed90:	eb000874 	bl	40f68 <_DWHCIRegister>
   3ed94:	e28d0030 	add	r0, sp, #48	; 0x30
   3ed98:	eb000872 	bl	40f68 <_DWHCIRegister>
   3ed9c:	e28d0024 	add	r0, sp, #36	; 0x24
   3eda0:	eb000870 	bl	40f68 <_DWHCIRegister>
   3eda4:	e28d0018 	add	r0, sp, #24
   3eda8:	eb00086e 	bl	40f68 <_DWHCIRegister>
   3edac:	e28d000c 	add	r0, sp, #12
   3edb0:	eb00086c 	bl	40f68 <_DWHCIRegister>
   3edb4:	e1a0000d 	mov	r0, sp
   3edb8:	eb00086a 	bl	40f68 <_DWHCIRegister>
   3edbc:	e28dd048 	add	sp, sp, #72	; 0x48
   3edc0:	e8bd8070 	pop	{r4, r5, r6, pc}
   3edc4:	e3e01802 	mvn	r1, #131072	; 0x20000
   3edc8:	eb0008d4 	bl	41120 <DWHCIRegisterAnd>
   3edcc:	eaffffb5 	b	3eca8 <DWHCIDeviceStartChannel+0x1cc>
   3edd0:	e3e01902 	mvn	r1, #32768	; 0x8000
   3edd4:	eb0008d1 	bl	41120 <DWHCIRegisterAnd>
   3edd8:	eaffffab 	b	3ec8c <DWHCIDeviceStartChannel+0x1b0>
   3eddc:	e3a01202 	mov	r1, #536870912	; 0x20000000
   3ede0:	eb0008e5 	bl	4117c <DWHCIRegisterOr>
   3ede4:	eaffffd5 	b	3ed40 <DWHCIDeviceStartChannel+0x264>
   3ede8:	e1a00004 	mov	r0, r4
   3edec:	eb000c3b 	bl	41ee0 <DWHCITransferStageDataGetHubPortAddress>
   3edf0:	e1a01000 	mov	r1, r0
   3edf4:	e28d0024 	add	r0, sp, #36	; 0x24
   3edf8:	eb0008df 	bl	4117c <DWHCIRegisterOr>
   3edfc:	e1a00004 	mov	r0, r4
   3ee00:	eb000c12 	bl	41e50 <DWHCITransferStageDataGetHubAddress>
   3ee04:	e1a01380 	lsl	r1, r0, #7
   3ee08:	e28d0024 	add	r0, sp, #36	; 0x24
   3ee0c:	eb0008da 	bl	4117c <DWHCIRegisterOr>
   3ee10:	e1a00004 	mov	r0, r4
   3ee14:	eb000c56 	bl	41f74 <DWHCITransferStageDataGetSplitPosition>
   3ee18:	e1a01700 	lsl	r1, r0, #14
   3ee1c:	e28d0024 	add	r0, sp, #36	; 0x24
   3ee20:	eb0008d5 	bl	4117c <DWHCIRegisterOr>
   3ee24:	e1a00004 	mov	r0, r4
   3ee28:	eb000bf2 	bl	41df8 <DWHCITransferStageDataIsSplitComplete>
   3ee2c:	e3500000 	cmp	r0, #0
   3ee30:	1a000008 	bne	3ee58 <DWHCIDeviceStartChannel+0x37c>
   3ee34:	e28d0024 	add	r0, sp, #36	; 0x24
   3ee38:	e3a01102 	mov	r1, #-2147483648	; 0x80000000
   3ee3c:	eb0008ce 	bl	4117c <DWHCIRegisterOr>
   3ee40:	eaffff73 	b	3ec14 <DWHCIDeviceStartChannel+0x138>
   3ee44:	e59f0064 	ldr	r0, [pc, #100]	; 3eeb0 <DWHCIDeviceStartChannel+0x3d4>
   3ee48:	e59f1064 	ldr	r1, [pc, #100]	; 3eeb4 <DWHCIDeviceStartChannel+0x3d8>
   3ee4c:	e59f2064 	ldr	r2, [pc, #100]	; 3eeb8 <DWHCIDeviceStartChannel+0x3dc>
   3ee50:	ebffdffc 	bl	36e48 <uspi_assertion_failed>
   3ee54:	eaffff2d 	b	3eb10 <DWHCIDeviceStartChannel+0x34>
   3ee58:	e28d0024 	add	r0, sp, #36	; 0x24
   3ee5c:	e3a01801 	mov	r1, #65536	; 0x10000
   3ee60:	eb0008c5 	bl	4117c <DWHCIRegisterOr>
   3ee64:	eafffff2 	b	3ee34 <DWHCIDeviceStartChannel+0x358>
   3ee68:	e59f004c 	ldr	r0, [pc, #76]	; 3eebc <DWHCIDeviceStartChannel+0x3e0>
   3ee6c:	e59f1040 	ldr	r1, [pc, #64]	; 3eeb4 <DWHCIDeviceStartChannel+0x3d8>
   3ee70:	e59f2048 	ldr	r2, [pc, #72]	; 3eec0 <DWHCIDeviceStartChannel+0x3e4>
   3ee74:	ebffdff3 	bl	36e48 <uspi_assertion_failed>
   3ee78:	eaffff1c 	b	3eaf0 <DWHCIDeviceStartChannel+0x14>
   3ee7c:	e59f0040 	ldr	r0, [pc, #64]	; 3eec4 <DWHCIDeviceStartChannel+0x3e8>
   3ee80:	e59f102c 	ldr	r1, [pc, #44]	; 3eeb4 <DWHCIDeviceStartChannel+0x3d8>
   3ee84:	e59f203c 	ldr	r2, [pc, #60]	; 3eec8 <DWHCIDeviceStartChannel+0x3ec>
   3ee88:	ebffdfee 	bl	36e48 <uspi_assertion_failed>
   3ee8c:	eaffff19 	b	3eaf8 <DWHCIDeviceStartChannel+0x1c>
   3ee90:	20980508 	.word	0x20980508
   3ee94:	20980510 	.word	0x20980510
   3ee98:	1ff80000 	.word	0x1ff80000
   3ee9c:	20980514 	.word	0x20980514
   3eea0:	20980504 	.word	0x20980504
   3eea4:	20980500 	.word	0x20980500
   3eea8:	fffff800 	.word	0xfffff800
   3eeac:	2098050c 	.word	0x2098050c
   3eeb0:	00056460 	.word	0x00056460
   3eeb4:	00056440 	.word	0x00056440
   3eeb8:	00000337 	.word	0x00000337
   3eebc:	00056434 	.word	0x00056434
   3eec0:	00000333 	.word	0x00000333
   3eec4:	00056450 	.word	0x00056450
   3eec8:	00000335 	.word	0x00000335

0003eecc <DWHCIDeviceStartTransaction>:
   3eecc:	e92d4070 	push	{r4, r5, r6, lr}
   3eed0:	e2506000 	subs	r6, r0, #0
   3eed4:	e24dd018 	sub	sp, sp, #24
   3eed8:	e1a05001 	mov	r5, r1
   3eedc:	0a00003e 	beq	3efdc <DWHCIDeviceStartTransaction+0x110>
   3eee0:	e3550000 	cmp	r5, #0
   3eee4:	0a000037 	beq	3efc8 <DWHCIDeviceStartTransaction+0xfc>
   3eee8:	e1a00005 	mov	r0, r5
   3eeec:	eb000a01 	bl	416f8 <DWHCITransferStageDataGetChannelNumber>
   3eef0:	e5963000 	ldr	r3, [r6]
   3eef4:	e1a04000 	mov	r4, r0
   3eef8:	e1500003 	cmp	r0, r3
   3eefc:	2a00002c 	bcs	3efb4 <DWHCIDeviceStartTransaction+0xe8>
   3ef00:	e59f10e8 	ldr	r1, [pc, #232]	; 3eff0 <DWHCIDeviceStartTransaction+0x124>
   3ef04:	e1a0000d 	mov	r0, sp
   3ef08:	e0841001 	add	r1, r4, r1
   3ef0c:	e1a04281 	lsl	r4, r1, #5
   3ef10:	e1a01004 	mov	r1, r4
   3ef14:	eb0007f4 	bl	40eec <DWHCIRegister>
   3ef18:	e1a0000d 	mov	r0, sp
   3ef1c:	eb00081e 	bl	40f9c <DWHCIRegisterRead>
   3ef20:	e1a0000d 	mov	r0, sp
   3ef24:	e3a01102 	mov	r1, #-2147483648	; 0x80000000
   3ef28:	eb000864 	bl	410c0 <DWHCIRegisterIsSet>
   3ef2c:	e3500000 	cmp	r0, #0
   3ef30:	1a000006 	bne	3ef50 <DWHCIDeviceStartTransaction+0x84>
   3ef34:	e1a00006 	mov	r0, r6
   3ef38:	e1a01005 	mov	r1, r5
   3ef3c:	ebfffee6 	bl	3eadc <DWHCIDeviceStartChannel>
   3ef40:	e1a0000d 	mov	r0, sp
   3ef44:	eb000807 	bl	40f68 <_DWHCIRegister>
   3ef48:	e28dd018 	add	sp, sp, #24
   3ef4c:	e8bd8070 	pop	{r4, r5, r6, pc}
   3ef50:	e1a00005 	mov	r0, r5
   3ef54:	e3a01000 	mov	r1, #0
   3ef58:	eb0009c9 	bl	41684 <DWHCITransferStageDataSetSubState>
   3ef5c:	e1a0000d 	mov	r0, sp
   3ef60:	e3e01102 	mvn	r1, #-2147483648	; 0x80000000
   3ef64:	eb00086d 	bl	41120 <DWHCIRegisterAnd>
   3ef68:	e1a0000d 	mov	r0, sp
   3ef6c:	e3a01101 	mov	r1, #1073741824	; 0x40000000
   3ef70:	eb000881 	bl	4117c <DWHCIRegisterOr>
   3ef74:	e1a0000d 	mov	r0, sp
   3ef78:	eb000817 	bl	40fdc <DWHCIRegisterWrite>
   3ef7c:	e284100c 	add	r1, r4, #12
   3ef80:	e28d000c 	add	r0, sp, #12
   3ef84:	eb0007d8 	bl	40eec <DWHCIRegister>
   3ef88:	e3a01002 	mov	r1, #2
   3ef8c:	e28d000c 	add	r0, sp, #12
   3ef90:	eb00083b 	bl	41084 <DWHCIRegisterSet>
   3ef94:	e28d000c 	add	r0, sp, #12
   3ef98:	eb00080f 	bl	40fdc <DWHCIRegisterWrite>
   3ef9c:	e28d000c 	add	r0, sp, #12
   3efa0:	eb0007f0 	bl	40f68 <_DWHCIRegister>
   3efa4:	e1a0000d 	mov	r0, sp
   3efa8:	eb0007ee 	bl	40f68 <_DWHCIRegister>
   3efac:	e28dd018 	add	sp, sp, #24
   3efb0:	e8bd8070 	pop	{r4, r5, r6, pc}
   3efb4:	e59f0038 	ldr	r0, [pc, #56]	; 3eff4 <DWHCIDeviceStartTransaction+0x128>
   3efb8:	e59f1038 	ldr	r1, [pc, #56]	; 3eff8 <DWHCIDeviceStartTransaction+0x12c>
   3efbc:	e3a02fc5 	mov	r2, #788	; 0x314
   3efc0:	ebffdfa0 	bl	36e48 <uspi_assertion_failed>
   3efc4:	eaffffcd 	b	3ef00 <DWHCIDeviceStartTransaction+0x34>
   3efc8:	e59f002c 	ldr	r0, [pc, #44]	; 3effc <DWHCIDeviceStartTransaction+0x130>
   3efcc:	e59f1024 	ldr	r1, [pc, #36]	; 3eff8 <DWHCIDeviceStartTransaction+0x12c>
   3efd0:	e59f2028 	ldr	r2, [pc, #40]	; 3f000 <DWHCIDeviceStartTransaction+0x134>
   3efd4:	ebffdf9b 	bl	36e48 <uspi_assertion_failed>
   3efd8:	eaffffc2 	b	3eee8 <DWHCIDeviceStartTransaction+0x1c>
   3efdc:	e59f0020 	ldr	r0, [pc, #32]	; 3f004 <DWHCIDeviceStartTransaction+0x138>
   3efe0:	e59f1010 	ldr	r1, [pc, #16]	; 3eff8 <DWHCIDeviceStartTransaction+0x12c>
   3efe4:	e3a02e31 	mov	r2, #784	; 0x310
   3efe8:	ebffdf96 	bl	36e48 <uspi_assertion_failed>
   3efec:	eaffffbb 	b	3eee0 <DWHCIDeviceStartTransaction+0x14>
   3eff0:	0104c028 	.word	0x0104c028
   3eff4:	00056460 	.word	0x00056460
   3eff8:	00056440 	.word	0x00056440
   3effc:	00056450 	.word	0x00056450
   3f000:	00000312 	.word	0x00000312
   3f004:	00056434 	.word	0x00056434

0003f008 <DWHCIDeviceTimerHandler>:
   3f008:	e92d4070 	push	{r4, r5, r6, lr}
   3f00c:	e2525000 	subs	r5, r2, #0
   3f010:	e1a04001 	mov	r4, r1
   3f014:	0a00002b 	beq	3f0c8 <DWHCIDeviceTimerHandler+0xc0>
   3f018:	e3540000 	cmp	r4, #0
   3f01c:	0a00002e 	beq	3f0dc <DWHCIDeviceTimerHandler+0xd4>
   3f020:	e3a03000 	mov	r3, #0
   3f024:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   3f028:	e1540003 	cmp	r4, r3
   3f02c:	0a00002f 	beq	3f0f0 <DWHCIDeviceTimerHandler+0xe8>
   3f030:	e1a00004 	mov	r0, r4
   3f034:	eb000985 	bl	41650 <DWHCITransferStageDataGetState>
   3f038:	e3500003 	cmp	r0, #3
   3f03c:	0a000003 	beq	3f050 <DWHCIDeviceTimerHandler+0x48>
   3f040:	e59f00bc 	ldr	r0, [pc, #188]	; 3f104 <DWHCIDeviceTimerHandler+0xfc>
   3f044:	e59f10bc 	ldr	r1, [pc, #188]	; 3f108 <DWHCIDeviceTimerHandler+0x100>
   3f048:	e59f20bc 	ldr	r2, [pc, #188]	; 3f10c <DWHCIDeviceTimerHandler+0x104>
   3f04c:	ebffdf7d 	bl	36e48 <uspi_assertion_failed>
   3f050:	e1a00004 	mov	r0, r4
   3f054:	eb000b59 	bl	41dc0 <DWHCITransferStageDataIsSplit>
   3f058:	e2501000 	subs	r1, r0, #0
   3f05c:	e1a00004 	mov	r0, r4
   3f060:	0a000011 	beq	3f0ac <DWHCIDeviceTimerHandler+0xa4>
   3f064:	e3a01001 	mov	r1, #1
   3f068:	eb00096a 	bl	41618 <DWHCITransferStageDataSetState>
   3f06c:	e1a00004 	mov	r0, r4
   3f070:	e3a01000 	mov	r1, #0
   3f074:	eb000952 	bl	415c4 <DWHCITransferStageDataSetSplitComplete>
   3f078:	e1a00004 	mov	r0, r4
   3f07c:	eb000c20 	bl	42104 <DWHCITransferStageDataGetFrameScheduler>
   3f080:	e2506000 	subs	r6, r0, #0
   3f084:	0a00000a 	beq	3f0b4 <DWHCIDeviceTimerHandler+0xac>
   3f088:	e5963004 	ldr	r3, [r6, #4]
   3f08c:	e1a00006 	mov	r0, r6
   3f090:	e12fff33 	blx	r3
   3f094:	e1a00005 	mov	r0, r5
   3f098:	e1a01004 	mov	r1, r4
   3f09c:	ebffff8a 	bl	3eecc <DWHCIDeviceStartTransaction>
   3f0a0:	e3a03000 	mov	r3, #0
   3f0a4:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   3f0a8:	e8bd8070 	pop	{r4, r5, r6, pc}
   3f0ac:	eb000959 	bl	41618 <DWHCITransferStageDataSetState>
   3f0b0:	eafffff7 	b	3f094 <DWHCIDeviceTimerHandler+0x8c>
   3f0b4:	e59f0054 	ldr	r0, [pc, #84]	; 3f110 <DWHCIDeviceTimerHandler+0x108>
   3f0b8:	e59f1048 	ldr	r1, [pc, #72]	; 3f108 <DWHCIDeviceTimerHandler+0x100>
   3f0bc:	e59f2050 	ldr	r2, [pc, #80]	; 3f114 <DWHCIDeviceTimerHandler+0x10c>
   3f0c0:	ebffdf60 	bl	36e48 <uspi_assertion_failed>
   3f0c4:	eaffffef 	b	3f088 <DWHCIDeviceTimerHandler+0x80>
   3f0c8:	e59f0048 	ldr	r0, [pc, #72]	; 3f118 <DWHCIDeviceTimerHandler+0x110>
   3f0cc:	e59f1034 	ldr	r1, [pc, #52]	; 3f108 <DWHCIDeviceTimerHandler+0x100>
   3f0d0:	e59f2044 	ldr	r2, [pc, #68]	; 3f11c <DWHCIDeviceTimerHandler+0x114>
   3f0d4:	ebffdf5b 	bl	36e48 <uspi_assertion_failed>
   3f0d8:	eaffffce 	b	3f018 <DWHCIDeviceTimerHandler+0x10>
   3f0dc:	e59f003c 	ldr	r0, [pc, #60]	; 3f120 <DWHCIDeviceTimerHandler+0x118>
   3f0e0:	e59f1020 	ldr	r1, [pc, #32]	; 3f108 <DWHCIDeviceTimerHandler+0x100>
   3f0e4:	e3a02d13 	mov	r2, #1216	; 0x4c0
   3f0e8:	ebffdf56 	bl	36e48 <uspi_assertion_failed>
   3f0ec:	eaffffcb 	b	3f020 <DWHCIDeviceTimerHandler+0x18>
   3f0f0:	e59f0028 	ldr	r0, [pc, #40]	; 3f120 <DWHCIDeviceTimerHandler+0x118>
   3f0f4:	e59f100c 	ldr	r1, [pc, #12]	; 3f108 <DWHCIDeviceTimerHandler+0x100>
   3f0f8:	e59f2024 	ldr	r2, [pc, #36]	; 3f124 <DWHCIDeviceTimerHandler+0x11c>
   3f0fc:	ebffdf51 	bl	36e48 <uspi_assertion_failed>
   3f100:	eaffffca 	b	3f030 <DWHCIDeviceTimerHandler+0x28>
   3f104:	00056480 	.word	0x00056480
   3f108:	00056440 	.word	0x00056440
   3f10c:	000004c5 	.word	0x000004c5
   3f110:	000564c8 	.word	0x000564c8
   3f114:	000004ce 	.word	0x000004ce
   3f118:	00056434 	.word	0x00056434
   3f11c:	000004bd 	.word	0x000004bd
   3f120:	00056450 	.word	0x00056450
   3f124:	000004c4 	.word	0x000004c4

0003f128 <DWHCIDeviceAllocateChannel>:
   3f128:	e92d4038 	push	{r3, r4, r5, lr}
   3f12c:	e2505000 	subs	r5, r0, #0
   3f130:	0a00001a 	beq	3f1a0 <DWHCIDeviceAllocateChannel+0x78>
   3f134:	eb003160 	bl	4b6bc <uspi_EnterCritical>
   3f138:	e5951000 	ldr	r1, [r5]
   3f13c:	e3510000 	cmp	r1, #0
   3f140:	0a00000c 	beq	3f178 <DWHCIDeviceAllocateChannel+0x50>
   3f144:	e5954004 	ldr	r4, [r5, #4]
   3f148:	e2144001 	ands	r4, r4, #1
   3f14c:	0a00000c 	beq	3f184 <DWHCIDeviceAllocateChannel+0x5c>
   3f150:	e3a04000 	mov	r4, #0
   3f154:	e3a03001 	mov	r3, #1
   3f158:	ea000002 	b	3f168 <DWHCIDeviceAllocateChannel+0x40>
   3f15c:	e5952004 	ldr	r2, [r5, #4]
   3f160:	e1120003 	tst	r2, r3
   3f164:	0a000007 	beq	3f188 <DWHCIDeviceAllocateChannel+0x60>
   3f168:	e2844001 	add	r4, r4, #1
   3f16c:	e1540001 	cmp	r4, r1
   3f170:	e1a03083 	lsl	r3, r3, #1
   3f174:	1afffff8 	bne	3f15c <DWHCIDeviceAllocateChannel+0x34>
   3f178:	eb00315e 	bl	4b6f8 <uspi_LeaveCritical>
   3f17c:	e3a00010 	mov	r0, #16
   3f180:	e8bd8038 	pop	{r3, r4, r5, pc}
   3f184:	e3a03001 	mov	r3, #1
   3f188:	e5952004 	ldr	r2, [r5, #4]
   3f18c:	e1833002 	orr	r3, r3, r2
   3f190:	e5853004 	str	r3, [r5, #4]
   3f194:	eb003157 	bl	4b6f8 <uspi_LeaveCritical>
   3f198:	e1a00004 	mov	r0, r4
   3f19c:	e8bd8038 	pop	{r3, r4, r5, pc}
   3f1a0:	e59f000c 	ldr	r0, [pc, #12]	; 3f1b4 <DWHCIDeviceAllocateChannel+0x8c>
   3f1a4:	e59f100c 	ldr	r1, [pc, #12]	; 3f1b8 <DWHCIDeviceAllocateChannel+0x90>
   3f1a8:	e59f200c 	ldr	r2, [pc, #12]	; 3f1bc <DWHCIDeviceAllocateChannel+0x94>
   3f1ac:	ebffdf25 	bl	36e48 <uspi_assertion_failed>
   3f1b0:	eaffffdf 	b	3f134 <DWHCIDeviceAllocateChannel+0xc>
   3f1b4:	00056434 	.word	0x00056434
   3f1b8:	00056440 	.word	0x00056440
   3f1bc:	000004dd 	.word	0x000004dd

0003f1c0 <DWHCIDeviceFreeChannel>:
   3f1c0:	e92d4038 	push	{r3, r4, r5, lr}
   3f1c4:	e2504000 	subs	r4, r0, #0
   3f1c8:	e1a05001 	mov	r5, r1
   3f1cc:	0a000016 	beq	3f22c <DWHCIDeviceFreeChannel+0x6c>
   3f1d0:	e5943000 	ldr	r3, [r4]
   3f1d4:	e1530005 	cmp	r3, r5
   3f1d8:	9a00000e 	bls	3f218 <DWHCIDeviceFreeChannel+0x58>
   3f1dc:	e3a03001 	mov	r3, #1
   3f1e0:	e1a05513 	lsl	r5, r3, r5
   3f1e4:	eb003134 	bl	4b6bc <uspi_EnterCritical>
   3f1e8:	e5943004 	ldr	r3, [r4, #4]
   3f1ec:	e1150003 	tst	r5, r3
   3f1f0:	1a000003 	bne	3f204 <DWHCIDeviceFreeChannel+0x44>
   3f1f4:	e59f0044 	ldr	r0, [pc, #68]	; 3f240 <DWHCIDeviceFreeChannel+0x80>
   3f1f8:	e59f1044 	ldr	r1, [pc, #68]	; 3f244 <DWHCIDeviceFreeChannel+0x84>
   3f1fc:	e59f2044 	ldr	r2, [pc, #68]	; 3f248 <DWHCIDeviceFreeChannel+0x88>
   3f200:	ebffdf10 	bl	36e48 <uspi_assertion_failed>
   3f204:	e5943004 	ldr	r3, [r4, #4]
   3f208:	e1c35005 	bic	r5, r3, r5
   3f20c:	e5845004 	str	r5, [r4, #4]
   3f210:	e8bd4038 	pop	{r3, r4, r5, lr}
   3f214:	ea003137 	b	4b6f8 <uspi_LeaveCritical>
   3f218:	e59f002c 	ldr	r0, [pc, #44]	; 3f24c <DWHCIDeviceFreeChannel+0x8c>
   3f21c:	e59f1020 	ldr	r1, [pc, #32]	; 3f244 <DWHCIDeviceFreeChannel+0x84>
   3f220:	e59f2028 	ldr	r2, [pc, #40]	; 3f250 <DWHCIDeviceFreeChannel+0x90>
   3f224:	ebffdf07 	bl	36e48 <uspi_assertion_failed>
   3f228:	eaffffeb 	b	3f1dc <DWHCIDeviceFreeChannel+0x1c>
   3f22c:	e59f0020 	ldr	r0, [pc, #32]	; 3f254 <DWHCIDeviceFreeChannel+0x94>
   3f230:	e59f100c 	ldr	r1, [pc, #12]	; 3f244 <DWHCIDeviceFreeChannel+0x84>
   3f234:	e59f201c 	ldr	r2, [pc, #28]	; 3f258 <DWHCIDeviceFreeChannel+0x98>
   3f238:	ebffdf02 	bl	36e48 <uspi_assertion_failed>
   3f23c:	eaffffe3 	b	3f1d0 <DWHCIDeviceFreeChannel+0x10>
   3f240:	000564e0 	.word	0x000564e0
   3f244:	00056440 	.word	0x00056440
   3f248:	000004fe 	.word	0x000004fe
   3f24c:	00056460 	.word	0x00056460
   3f250:	000004f9 	.word	0x000004f9
   3f254:	00056434 	.word	0x00056434
   3f258:	000004f7 	.word	0x000004f7

0003f25c <DWHCIDeviceTransferStageAsync>:
   3f25c:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
   3f260:	e2504000 	subs	r4, r0, #0
   3f264:	e24dd00c 	sub	sp, sp, #12
   3f268:	e1a06001 	mov	r6, r1
   3f26c:	e1a08002 	mov	r8, r2
   3f270:	e1a09003 	mov	r9, r3
   3f274:	0a00003e 	beq	3f374 <DWHCIDeviceTransferStageAsync+0x118>
   3f278:	e3560000 	cmp	r6, #0
   3f27c:	0a000041 	beq	3f388 <DWHCIDeviceTransferStageAsync+0x12c>
   3f280:	e1a00004 	mov	r0, r4
   3f284:	ebffffa7 	bl	3f128 <DWHCIDeviceAllocateChannel>
   3f288:	e5943000 	ldr	r3, [r4]
   3f28c:	e1a07000 	mov	r7, r0
   3f290:	e1500003 	cmp	r0, r3
   3f294:	23a06000 	movcs	r6, #0
   3f298:	3a000002 	bcc	3f2a8 <DWHCIDeviceTransferStageAsync+0x4c>
   3f29c:	e1a00006 	mov	r0, r6
   3f2a0:	e28dd00c 	add	sp, sp, #12
   3f2a4:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   3f2a8:	e0605200 	rsb	r5, r0, r0, lsl #4
   3f2ac:	e0845185 	add	r5, r4, r5, lsl #3
   3f2b0:	e2855008 	add	r5, r5, #8
   3f2b4:	e1a02006 	mov	r2, r6
   3f2b8:	e1a03008 	mov	r3, r8
   3f2bc:	e1a00005 	mov	r0, r5
   3f2c0:	e1a01007 	mov	r1, r7
   3f2c4:	e58d9000 	str	r9, [sp]
   3f2c8:	eb000932 	bl	41798 <DWHCITransferStageData>
   3f2cc:	e1a01007 	mov	r1, r7
   3f2d0:	e1a00004 	mov	r0, r4
   3f2d4:	ebfffdc3 	bl	3e9e8 <DWHCIDeviceEnableChannelInterrupt>
   3f2d8:	e1a00005 	mov	r0, r5
   3f2dc:	eb000ab7 	bl	41dc0 <DWHCITransferStageDataIsSplit>
   3f2e0:	e2501000 	subs	r1, r0, #0
   3f2e4:	e1a00005 	mov	r0, r5
   3f2e8:	0a000016 	beq	3f348 <DWHCIDeviceTransferStageAsync+0xec>
   3f2ec:	eb0008ff 	bl	416f0 <DWHCITransferStageDataBeginSplitCycle>
   3f2f0:	e2506000 	subs	r6, r0, #0
   3f2f4:	0a000015 	beq	3f350 <DWHCIDeviceTransferStageAsync+0xf4>
   3f2f8:	e1a00005 	mov	r0, r5
   3f2fc:	e3a01001 	mov	r1, #1
   3f300:	eb0008c4 	bl	41618 <DWHCITransferStageDataSetState>
   3f304:	e1a00005 	mov	r0, r5
   3f308:	e3a01000 	mov	r1, #0
   3f30c:	eb0008ac 	bl	415c4 <DWHCITransferStageDataSetSplitComplete>
   3f310:	e1a00005 	mov	r0, r5
   3f314:	eb000b7a 	bl	42104 <DWHCITransferStageDataGetFrameScheduler>
   3f318:	e2506000 	subs	r6, r0, #0
   3f31c:	0a00001e 	beq	3f39c <DWHCIDeviceTransferStageAsync+0x140>
   3f320:	e5963004 	ldr	r3, [r6, #4]
   3f324:	e1a00006 	mov	r0, r6
   3f328:	e12fff33 	blx	r3
   3f32c:	e3a06001 	mov	r6, #1
   3f330:	e1a00004 	mov	r0, r4
   3f334:	e1a01005 	mov	r1, r5
   3f338:	ebfffee3 	bl	3eecc <DWHCIDeviceStartTransaction>
   3f33c:	e1a00006 	mov	r0, r6
   3f340:	e28dd00c 	add	sp, sp, #12
   3f344:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   3f348:	eb0008b2 	bl	41618 <DWHCITransferStageDataSetState>
   3f34c:	eafffff6 	b	3f32c <DWHCIDeviceTransferStageAsync+0xd0>
   3f350:	e1a01007 	mov	r1, r7
   3f354:	e1a00004 	mov	r0, r4
   3f358:	ebfffdc0 	bl	3ea60 <DWHCIDeviceDisableChannelInterrupt>
   3f35c:	e1a00005 	mov	r0, r5
   3f360:	eb00081e 	bl	413e0 <_DWHCITransferStageData>
   3f364:	e1a00004 	mov	r0, r4
   3f368:	e1a01007 	mov	r1, r7
   3f36c:	ebffff93 	bl	3f1c0 <DWHCIDeviceFreeChannel>
   3f370:	eaffffc9 	b	3f29c <DWHCIDeviceTransferStageAsync+0x40>
   3f374:	e59f0034 	ldr	r0, [pc, #52]	; 3f3b0 <DWHCIDeviceTransferStageAsync+0x154>
   3f378:	e59f1034 	ldr	r1, [pc, #52]	; 3f3b4 <DWHCIDeviceTransferStageAsync+0x158>
   3f37c:	e59f2034 	ldr	r2, [pc, #52]	; 3f3b8 <DWHCIDeviceTransferStageAsync+0x15c>
   3f380:	ebffdeb0 	bl	36e48 <uspi_assertion_failed>
   3f384:	eaffffbb 	b	3f278 <DWHCIDeviceTransferStageAsync+0x1c>
   3f388:	e59f002c 	ldr	r0, [pc, #44]	; 3f3bc <DWHCIDeviceTransferStageAsync+0x160>
   3f38c:	e59f1020 	ldr	r1, [pc, #32]	; 3f3b4 <DWHCIDeviceTransferStageAsync+0x158>
   3f390:	e59f2028 	ldr	r2, [pc, #40]	; 3f3c0 <DWHCIDeviceTransferStageAsync+0x164>
   3f394:	ebffdeab 	bl	36e48 <uspi_assertion_failed>
   3f398:	eaffffb8 	b	3f280 <DWHCIDeviceTransferStageAsync+0x24>
   3f39c:	e59f0020 	ldr	r0, [pc, #32]	; 3f3c4 <DWHCIDeviceTransferStageAsync+0x168>
   3f3a0:	e59f100c 	ldr	r1, [pc, #12]	; 3f3b4 <DWHCIDeviceTransferStageAsync+0x158>
   3f3a4:	e59f201c 	ldr	r2, [pc, #28]	; 3f3c8 <DWHCIDeviceTransferStageAsync+0x16c>
   3f3a8:	ebffdea6 	bl	36e48 <uspi_assertion_failed>
   3f3ac:	eaffffdb 	b	3f320 <DWHCIDeviceTransferStageAsync+0xc4>
   3f3b0:	00056434 	.word	0x00056434
   3f3b4:	00056440 	.word	0x00056440
   3f3b8:	000002e1 	.word	0x000002e1
   3f3bc:	0005650c 	.word	0x0005650c
   3f3c0:	000002e2 	.word	0x000002e2
   3f3c4:	000564c8 	.word	0x000564c8
   3f3c8:	00000305 	.word	0x00000305

0003f3cc <DWHCIDeviceSubmitAsyncRequest>:
   3f3cc:	e92d4038 	push	{r3, r4, r5, lr}
   3f3d0:	e2505000 	subs	r5, r0, #0
   3f3d4:	e1a04001 	mov	r4, r1
   3f3d8:	0a00002c 	beq	3f490 <DWHCIDeviceSubmitAsyncRequest+0xc4>
   3f3dc:	e3a03000 	mov	r3, #0
   3f3e0:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   3f3e4:	e1540003 	cmp	r4, r3
   3f3e8:	0a000023 	beq	3f47c <DWHCIDeviceSubmitAsyncRequest+0xb0>
   3f3ec:	e1a00004 	mov	r0, r4
   3f3f0:	eb00124e 	bl	43d30 <USBRequestGetEndpoint>
   3f3f4:	eb00115c 	bl	4396c <USBEndpointGetType>
   3f3f8:	e3500001 	cmp	r0, #1
   3f3fc:	0a000008 	beq	3f424 <DWHCIDeviceSubmitAsyncRequest+0x58>
   3f400:	e1a00004 	mov	r0, r4
   3f404:	eb001249 	bl	43d30 <USBRequestGetEndpoint>
   3f408:	eb001157 	bl	4396c <USBEndpointGetType>
   3f40c:	e3500002 	cmp	r0, #2
   3f410:	0a000003 	beq	3f424 <DWHCIDeviceSubmitAsyncRequest+0x58>
   3f414:	e59f0088 	ldr	r0, [pc, #136]	; 3f4a4 <DWHCIDeviceSubmitAsyncRequest+0xd8>
   3f418:	e59f1088 	ldr	r1, [pc, #136]	; 3f4a8 <DWHCIDeviceSubmitAsyncRequest+0xdc>
   3f41c:	e3a02f56 	mov	r2, #344	; 0x158
   3f420:	ebffde88 	bl	36e48 <uspi_assertion_failed>
   3f424:	e1a00004 	mov	r0, r4
   3f428:	eb0012c6 	bl	43f48 <USBRequestGetBufLen>
   3f42c:	e3500000 	cmp	r0, #0
   3f430:	1a000003 	bne	3f444 <DWHCIDeviceSubmitAsyncRequest+0x78>
   3f434:	e59f0070 	ldr	r0, [pc, #112]	; 3f4ac <DWHCIDeviceSubmitAsyncRequest+0xe0>
   3f438:	e59f1068 	ldr	r1, [pc, #104]	; 3f4a8 <DWHCIDeviceSubmitAsyncRequest+0xdc>
   3f43c:	e59f206c 	ldr	r2, [pc, #108]	; 3f4b0 <DWHCIDeviceSubmitAsyncRequest+0xe4>
   3f440:	ebffde80 	bl	36e48 <uspi_assertion_failed>
   3f444:	e3a01000 	mov	r1, #0
   3f448:	e1a00004 	mov	r0, r4
   3f44c:	eb00124b 	bl	43d80 <USBRequestSetStatus>
   3f450:	e1a00004 	mov	r0, r4
   3f454:	eb001235 	bl	43d30 <USBRequestGetEndpoint>
   3f458:	eb001150 	bl	439a0 <USBEndpointIsDirectionIn>
   3f45c:	e1a01004 	mov	r1, r4
   3f460:	e1a02000 	mov	r2, r0
   3f464:	e3a03000 	mov	r3, #0
   3f468:	e1a00005 	mov	r0, r5
   3f46c:	ebffff7a 	bl	3f25c <DWHCIDeviceTransferStageAsync>
   3f470:	e3a03000 	mov	r3, #0
   3f474:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   3f478:	e8bd8038 	pop	{r3, r4, r5, pc}
   3f47c:	e59f0030 	ldr	r0, [pc, #48]	; 3f4b4 <DWHCIDeviceSubmitAsyncRequest+0xe8>
   3f480:	e59f1020 	ldr	r1, [pc, #32]	; 3f4a8 <DWHCIDeviceSubmitAsyncRequest+0xdc>
   3f484:	e59f202c 	ldr	r2, [pc, #44]	; 3f4b8 <DWHCIDeviceSubmitAsyncRequest+0xec>
   3f488:	ebffde6e 	bl	36e48 <uspi_assertion_failed>
   3f48c:	eaffffd6 	b	3f3ec <DWHCIDeviceSubmitAsyncRequest+0x20>
   3f490:	e59f0024 	ldr	r0, [pc, #36]	; 3f4bc <DWHCIDeviceSubmitAsyncRequest+0xf0>
   3f494:	e59f100c 	ldr	r1, [pc, #12]	; 3f4a8 <DWHCIDeviceSubmitAsyncRequest+0xdc>
   3f498:	e59f2020 	ldr	r2, [pc, #32]	; 3f4c0 <DWHCIDeviceSubmitAsyncRequest+0xf4>
   3f49c:	ebffde69 	bl	36e48 <uspi_assertion_failed>
   3f4a0:	eaffffcd 	b	3f3dc <DWHCIDeviceSubmitAsyncRequest+0x10>
   3f4a4:	00056518 	.word	0x00056518
   3f4a8:	00056440 	.word	0x00056440
   3f4ac:	000565ac 	.word	0x000565ac
   3f4b0:	00000159 	.word	0x00000159
   3f4b4:	0005650c 	.word	0x0005650c
   3f4b8:	00000156 	.word	0x00000156
   3f4bc:	00056434 	.word	0x00056434
   3f4c0:	00000152 	.word	0x00000152

0003f4c4 <DWHCIDeviceTransferStage>:
   3f4c4:	e92d40f8 	push	{r3, r4, r5, r6, r7, lr}
   3f4c8:	e2504000 	subs	r4, r0, #0
   3f4cc:	e1a05001 	mov	r5, r1
   3f4d0:	e1a07002 	mov	r7, r2
   3f4d4:	e1a06003 	mov	r6, r3
   3f4d8:	0a000024 	beq	3f570 <DWHCIDeviceTransferStage+0xac>
   3f4dc:	e3550000 	cmp	r5, #0
   3f4e0:	0a00001d 	beq	3f55c <DWHCIDeviceTransferStage+0x98>
   3f4e4:	e1a03004 	mov	r3, r4
   3f4e8:	e1a00005 	mov	r0, r5
   3f4ec:	e59f1090 	ldr	r1, [pc, #144]	; 3f584 <DWHCIDeviceTransferStage+0xc0>
   3f4f0:	e3a02000 	mov	r2, #0
   3f4f4:	eb0012a0 	bl	43f7c <USBRequestSetCompletionRoutine>
   3f4f8:	e5943788 	ldr	r3, [r4, #1928]	; 0x788
   3f4fc:	e3530000 	cmp	r3, #0
   3f500:	1a000010 	bne	3f548 <DWHCIDeviceTransferStage+0x84>
   3f504:	e3a01001 	mov	r1, #1
   3f508:	e1a03006 	mov	r3, r6
   3f50c:	e5841788 	str	r1, [r4, #1928]	; 0x788
   3f510:	e1a02007 	mov	r2, r7
   3f514:	e1a00004 	mov	r0, r4
   3f518:	e1a01005 	mov	r1, r5
   3f51c:	ebffff4e 	bl	3f25c <DWHCIDeviceTransferStageAsync>
   3f520:	e2503000 	subs	r3, r0, #0
   3f524:	0a000005 	beq	3f540 <DWHCIDeviceTransferStage+0x7c>
   3f528:	e5943788 	ldr	r3, [r4, #1928]	; 0x788
   3f52c:	e3530000 	cmp	r3, #0
   3f530:	1afffffc 	bne	3f528 <DWHCIDeviceTransferStage+0x64>
   3f534:	e1a00005 	mov	r0, r5
   3f538:	e8bd40f8 	pop	{r3, r4, r5, r6, r7, lr}
   3f53c:	ea00122b 	b	43df0 <USBRequestGetStatus>
   3f540:	e5843788 	str	r3, [r4, #1928]	; 0x788
   3f544:	e8bd80f8 	pop	{r3, r4, r5, r6, r7, pc}
   3f548:	e59f0038 	ldr	r0, [pc, #56]	; 3f588 <DWHCIDeviceTransferStage+0xc4>
   3f54c:	e59f1038 	ldr	r1, [pc, #56]	; 3f58c <DWHCIDeviceTransferStage+0xc8>
   3f550:	e59f2038 	ldr	r2, [pc, #56]	; 3f590 <DWHCIDeviceTransferStage+0xcc>
   3f554:	ebffde3b 	bl	36e48 <uspi_assertion_failed>
   3f558:	eaffffe9 	b	3f504 <DWHCIDeviceTransferStage+0x40>
   3f55c:	e59f0030 	ldr	r0, [pc, #48]	; 3f594 <DWHCIDeviceTransferStage+0xd0>
   3f560:	e59f1024 	ldr	r1, [pc, #36]	; 3f58c <DWHCIDeviceTransferStage+0xc8>
   3f564:	e59f202c 	ldr	r2, [pc, #44]	; 3f598 <DWHCIDeviceTransferStage+0xd4>
   3f568:	ebffde36 	bl	36e48 <uspi_assertion_failed>
   3f56c:	eaffffdc 	b	3f4e4 <DWHCIDeviceTransferStage+0x20>
   3f570:	e59f0024 	ldr	r0, [pc, #36]	; 3f59c <DWHCIDeviceTransferStage+0xd8>
   3f574:	e59f1010 	ldr	r1, [pc, #16]	; 3f58c <DWHCIDeviceTransferStage+0xc8>
   3f578:	e3a02d0b 	mov	r2, #704	; 0x2c0
   3f57c:	ebffde31 	bl	36e48 <uspi_assertion_failed>
   3f580:	eaffffd5 	b	3f4dc <DWHCIDeviceTransferStage+0x18>
   3f584:	0003e814 	.word	0x0003e814
   3f588:	000565cc 	.word	0x000565cc
   3f58c:	00056440 	.word	0x00056440
   3f590:	000002c5 	.word	0x000002c5
   3f594:	0005650c 	.word	0x0005650c
   3f598:	000002c2 	.word	0x000002c2
   3f59c:	00056434 	.word	0x00056434

0003f5a0 <DWHCIDeviceSubmitBlockingRequest>:
   3f5a0:	e92d4070 	push	{r4, r5, r6, lr}
   3f5a4:	e2505000 	subs	r5, r0, #0
   3f5a8:	e1a04001 	mov	r4, r1
   3f5ac:	0a000076 	beq	3f78c <DWHCIDeviceSubmitBlockingRequest+0x1ec>
   3f5b0:	e3a03000 	mov	r3, #0
   3f5b4:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   3f5b8:	e1540003 	cmp	r4, r3
   3f5bc:	0a00006d 	beq	3f778 <DWHCIDeviceSubmitBlockingRequest+0x1d8>
   3f5c0:	e3a01000 	mov	r1, #0
   3f5c4:	e1a00004 	mov	r0, r4
   3f5c8:	eb0011ec 	bl	43d80 <USBRequestSetStatus>
   3f5cc:	e1a00004 	mov	r0, r4
   3f5d0:	eb0011d6 	bl	43d30 <USBRequestGetEndpoint>
   3f5d4:	eb0010e4 	bl	4396c <USBEndpointGetType>
   3f5d8:	e3500000 	cmp	r0, #0
   3f5dc:	e1a00004 	mov	r0, r4
   3f5e0:	1a00001a 	bne	3f650 <DWHCIDeviceSubmitBlockingRequest+0xb0>
   3f5e4:	eb001222 	bl	43e74 <USBRequestGetSetupData>
   3f5e8:	e2506000 	subs	r6, r0, #0
   3f5ec:	0a00006b 	beq	3f7a0 <DWHCIDeviceSubmitBlockingRequest+0x200>
   3f5f0:	e1d630d0 	ldrsb	r3, [r6]
   3f5f4:	e1a00004 	mov	r0, r4
   3f5f8:	e3530000 	cmp	r3, #0
   3f5fc:	ba000044 	blt	3f714 <DWHCIDeviceSubmitBlockingRequest+0x174>
   3f600:	eb001250 	bl	43f48 <USBRequestGetBufLen>
   3f604:	e2502000 	subs	r2, r0, #0
   3f608:	1a00002d 	bne	3f6c4 <DWHCIDeviceSubmitBlockingRequest+0x124>
   3f60c:	e1a00005 	mov	r0, r5
   3f610:	e1a01004 	mov	r1, r4
   3f614:	e1a03002 	mov	r3, r2
   3f618:	ebffffa9 	bl	3f4c4 <DWHCIDeviceTransferStage>
   3f61c:	e3500000 	cmp	r0, #0
   3f620:	0a000025 	beq	3f6bc <DWHCIDeviceSubmitBlockingRequest+0x11c>
   3f624:	e3a02001 	mov	r2, #1
   3f628:	e1a00005 	mov	r0, r5
   3f62c:	e1a01004 	mov	r1, r4
   3f630:	e1a03002 	mov	r3, r2
   3f634:	ebffffa2 	bl	3f4c4 <DWHCIDeviceTransferStage>
   3f638:	e3500000 	cmp	r0, #0
   3f63c:	0a00001e 	beq	3f6bc <DWHCIDeviceSubmitBlockingRequest+0x11c>
   3f640:	e3a03000 	mov	r3, #0
   3f644:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   3f648:	e3a00001 	mov	r0, #1
   3f64c:	e8bd8070 	pop	{r4, r5, r6, pc}
   3f650:	eb0011b6 	bl	43d30 <USBRequestGetEndpoint>
   3f654:	eb0010c4 	bl	4396c <USBEndpointGetType>
   3f658:	e3500001 	cmp	r0, #1
   3f65c:	0a000008 	beq	3f684 <DWHCIDeviceSubmitBlockingRequest+0xe4>
   3f660:	e1a00004 	mov	r0, r4
   3f664:	eb0011b1 	bl	43d30 <USBRequestGetEndpoint>
   3f668:	eb0010bf 	bl	4396c <USBEndpointGetType>
   3f66c:	e3500002 	cmp	r0, #2
   3f670:	0a000003 	beq	3f684 <DWHCIDeviceSubmitBlockingRequest+0xe4>
   3f674:	e59f014c 	ldr	r0, [pc, #332]	; 3f7c8 <DWHCIDeviceSubmitBlockingRequest+0x228>
   3f678:	e59f114c 	ldr	r1, [pc, #332]	; 3f7cc <DWHCIDeviceSubmitBlockingRequest+0x22c>
   3f67c:	e59f214c 	ldr	r2, [pc, #332]	; 3f7d0 <DWHCIDeviceSubmitBlockingRequest+0x230>
   3f680:	ebffddf0 	bl	36e48 <uspi_assertion_failed>
   3f684:	e1a00004 	mov	r0, r4
   3f688:	eb00122e 	bl	43f48 <USBRequestGetBufLen>
   3f68c:	e3500000 	cmp	r0, #0
   3f690:	0a00001a 	beq	3f700 <DWHCIDeviceSubmitBlockingRequest+0x160>
   3f694:	e1a00004 	mov	r0, r4
   3f698:	eb0011a4 	bl	43d30 <USBRequestGetEndpoint>
   3f69c:	eb0010bf 	bl	439a0 <USBEndpointIsDirectionIn>
   3f6a0:	e1a01004 	mov	r1, r4
   3f6a4:	e1a02000 	mov	r2, r0
   3f6a8:	e3a03000 	mov	r3, #0
   3f6ac:	e1a00005 	mov	r0, r5
   3f6b0:	ebffff83 	bl	3f4c4 <DWHCIDeviceTransferStage>
   3f6b4:	e3500000 	cmp	r0, #0
   3f6b8:	1affffe0 	bne	3f640 <DWHCIDeviceSubmitBlockingRequest+0xa0>
   3f6bc:	e3a00000 	mov	r0, #0
   3f6c0:	e8bd8070 	pop	{r4, r5, r6, pc}
   3f6c4:	e3a02000 	mov	r2, #0
   3f6c8:	e1a00005 	mov	r0, r5
   3f6cc:	e1a03002 	mov	r3, r2
   3f6d0:	e1a01004 	mov	r1, r4
   3f6d4:	ebffff7a 	bl	3f4c4 <DWHCIDeviceTransferStage>
   3f6d8:	e3500000 	cmp	r0, #0
   3f6dc:	0afffff6 	beq	3f6bc <DWHCIDeviceSubmitBlockingRequest+0x11c>
   3f6e0:	e3a02000 	mov	r2, #0
   3f6e4:	e1a00005 	mov	r0, r5
   3f6e8:	e1a03002 	mov	r3, r2
   3f6ec:	e1a01004 	mov	r1, r4
   3f6f0:	ebffff73 	bl	3f4c4 <DWHCIDeviceTransferStage>
   3f6f4:	e3500000 	cmp	r0, #0
   3f6f8:	0affffef 	beq	3f6bc <DWHCIDeviceSubmitBlockingRequest+0x11c>
   3f6fc:	eaffffc8 	b	3f624 <DWHCIDeviceSubmitBlockingRequest+0x84>
   3f700:	e59f00cc 	ldr	r0, [pc, #204]	; 3f7d4 <DWHCIDeviceSubmitBlockingRequest+0x234>
   3f704:	e59f10c0 	ldr	r1, [pc, #192]	; 3f7cc <DWHCIDeviceSubmitBlockingRequest+0x22c>
   3f708:	e59f20c8 	ldr	r2, [pc, #200]	; 3f7d8 <DWHCIDeviceSubmitBlockingRequest+0x238>
   3f70c:	ebffddcd 	bl	36e48 <uspi_assertion_failed>
   3f710:	eaffffdf 	b	3f694 <DWHCIDeviceSubmitBlockingRequest+0xf4>
   3f714:	eb00120b 	bl	43f48 <USBRequestGetBufLen>
   3f718:	e3500000 	cmp	r0, #0
   3f71c:	0a000024 	beq	3f7b4 <DWHCIDeviceSubmitBlockingRequest+0x214>
   3f720:	e3a02000 	mov	r2, #0
   3f724:	e1a00005 	mov	r0, r5
   3f728:	e1a03002 	mov	r3, r2
   3f72c:	e1a01004 	mov	r1, r4
   3f730:	ebffff63 	bl	3f4c4 <DWHCIDeviceTransferStage>
   3f734:	e3500000 	cmp	r0, #0
   3f738:	0affffdf 	beq	3f6bc <DWHCIDeviceSubmitBlockingRequest+0x11c>
   3f73c:	e1a00005 	mov	r0, r5
   3f740:	e1a01004 	mov	r1, r4
   3f744:	e3a02001 	mov	r2, #1
   3f748:	e3a03000 	mov	r3, #0
   3f74c:	ebffff5c 	bl	3f4c4 <DWHCIDeviceTransferStage>
   3f750:	e3500000 	cmp	r0, #0
   3f754:	0affffd8 	beq	3f6bc <DWHCIDeviceSubmitBlockingRequest+0x11c>
   3f758:	e1a00005 	mov	r0, r5
   3f75c:	e1a01004 	mov	r1, r4
   3f760:	e3a02000 	mov	r2, #0
   3f764:	e3a03001 	mov	r3, #1
   3f768:	ebffff55 	bl	3f4c4 <DWHCIDeviceTransferStage>
   3f76c:	e3500000 	cmp	r0, #0
   3f770:	1affffb2 	bne	3f640 <DWHCIDeviceSubmitBlockingRequest+0xa0>
   3f774:	eaffffd0 	b	3f6bc <DWHCIDeviceSubmitBlockingRequest+0x11c>
   3f778:	e59f005c 	ldr	r0, [pc, #92]	; 3f7dc <DWHCIDeviceSubmitBlockingRequest+0x23c>
   3f77c:	e59f1048 	ldr	r1, [pc, #72]	; 3f7cc <DWHCIDeviceSubmitBlockingRequest+0x22c>
   3f780:	e59f2058 	ldr	r2, [pc, #88]	; 3f7e0 <DWHCIDeviceSubmitBlockingRequest+0x240>
   3f784:	ebffddaf 	bl	36e48 <uspi_assertion_failed>
   3f788:	eaffff8c 	b	3f5c0 <DWHCIDeviceSubmitBlockingRequest+0x20>
   3f78c:	e59f0050 	ldr	r0, [pc, #80]	; 3f7e4 <DWHCIDeviceSubmitBlockingRequest+0x244>
   3f790:	e59f1034 	ldr	r1, [pc, #52]	; 3f7cc <DWHCIDeviceSubmitBlockingRequest+0x22c>
   3f794:	e59f204c 	ldr	r2, [pc, #76]	; 3f7e8 <DWHCIDeviceSubmitBlockingRequest+0x248>
   3f798:	ebffddaa 	bl	36e48 <uspi_assertion_failed>
   3f79c:	eaffff83 	b	3f5b0 <DWHCIDeviceSubmitBlockingRequest+0x10>
   3f7a0:	e59f0044 	ldr	r0, [pc, #68]	; 3f7ec <DWHCIDeviceSubmitBlockingRequest+0x24c>
   3f7a4:	e59f1020 	ldr	r1, [pc, #32]	; 3f7cc <DWHCIDeviceSubmitBlockingRequest+0x22c>
   3f7a8:	e59f2040 	ldr	r2, [pc, #64]	; 3f7f0 <DWHCIDeviceSubmitBlockingRequest+0x250>
   3f7ac:	ebffdda5 	bl	36e48 <uspi_assertion_failed>
   3f7b0:	eaffff8e 	b	3f5f0 <DWHCIDeviceSubmitBlockingRequest+0x50>
   3f7b4:	e59f0018 	ldr	r0, [pc, #24]	; 3f7d4 <DWHCIDeviceSubmitBlockingRequest+0x234>
   3f7b8:	e59f100c 	ldr	r1, [pc, #12]	; 3f7cc <DWHCIDeviceSubmitBlockingRequest+0x22c>
   3f7bc:	e59f2030 	ldr	r2, [pc, #48]	; 3f7f4 <DWHCIDeviceSubmitBlockingRequest+0x254>
   3f7c0:	ebffdda0 	bl	36e48 <uspi_assertion_failed>
   3f7c4:	eaffffd5 	b	3f720 <DWHCIDeviceSubmitBlockingRequest+0x180>
   3f7c8:	00056518 	.word	0x00056518
   3f7cc:	00056440 	.word	0x00056440
   3f7d0:	00000142 	.word	0x00000142
   3f7d4:	000565ac 	.word	0x000565ac
   3f7d8:	00000143 	.word	0x00000143
   3f7dc:	0005650c 	.word	0x0005650c
   3f7e0:	00000117 	.word	0x00000117
   3f7e4:	00056434 	.word	0x00056434
   3f7e8:	00000113 	.word	0x00000113
   3f7ec:	000565e0 	.word	0x000565e0
   3f7f0:	0000011d 	.word	0x0000011d
   3f7f4:	00000121 	.word	0x00000121

0003f7f8 <DWHCIDeviceControlMessage>:
   3f7f8:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   3f7fc:	e2505000 	subs	r5, r0, #0
   3f800:	e24dd038 	sub	sp, sp, #56	; 0x38
   3f804:	e1a0a001 	mov	sl, r1
   3f808:	e1a09002 	mov	r9, r2
   3f80c:	e1a08003 	mov	r8, r3
   3f810:	e1dd75b8 	ldrh	r7, [sp, #88]	; 0x58
   3f814:	e1dd65bc 	ldrh	r6, [sp, #92]	; 0x5c
   3f818:	e1dd46b4 	ldrh	r4, [sp, #100]	; 0x64
   3f81c:	0a00001a 	beq	3f88c <DWHCIDeviceControlMessage+0x94>
   3f820:	e28d200c 	add	r2, sp, #12
   3f824:	e1a0100a 	mov	r1, sl
   3f828:	e1a03004 	mov	r3, r4
   3f82c:	e28d0014 	add	r0, sp, #20
   3f830:	e58d2000 	str	r2, [sp]
   3f834:	e59d2060 	ldr	r2, [sp, #96]	; 0x60
   3f838:	e5cd900c 	strb	r9, [sp, #12]
   3f83c:	e5cd800d 	strb	r8, [sp, #13]
   3f840:	e1cd70be 	strh	r7, [sp, #14]
   3f844:	e1cd61b0 	strh	r6, [sp, #16]
   3f848:	e1cd41b2 	strh	r4, [sp, #18]
   3f84c:	eb0010f7 	bl	43c30 <USBRequest>
   3f850:	e1a00005 	mov	r0, r5
   3f854:	e28d1014 	add	r1, sp, #20
   3f858:	ebffff50 	bl	3f5a0 <DWHCIDeviceSubmitBlockingRequest>
   3f85c:	e3500000 	cmp	r0, #0
   3f860:	0a000007 	beq	3f884 <DWHCIDeviceControlMessage+0x8c>
   3f864:	e28d0014 	add	r0, sp, #20
   3f868:	eb00116d 	bl	43e24 <USBRequestGetResultLength>
   3f86c:	e1a04000 	mov	r4, r0
   3f870:	e28d0014 	add	r0, sp, #20
   3f874:	eb00111d 	bl	43cf0 <_USBRequest>
   3f878:	e1a00004 	mov	r0, r4
   3f87c:	e28dd038 	add	sp, sp, #56	; 0x38
   3f880:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   3f884:	e3e04000 	mvn	r4, #0
   3f888:	eafffff8 	b	3f870 <DWHCIDeviceControlMessage+0x78>
   3f88c:	e59f000c 	ldr	r0, [pc, #12]	; 3f8a0 <DWHCIDeviceControlMessage+0xa8>
   3f890:	e59f100c 	ldr	r1, [pc, #12]	; 3f8a4 <DWHCIDeviceControlMessage+0xac>
   3f894:	e3a020e5 	mov	r2, #229	; 0xe5
   3f898:	ebffdd6a 	bl	36e48 <uspi_assertion_failed>
   3f89c:	eaffffdf 	b	3f820 <DWHCIDeviceControlMessage+0x28>
   3f8a0:	00056434 	.word	0x00056434
   3f8a4:	00056440 	.word	0x00056440

0003f8a8 <DWHCIDeviceGetDescriptor>:
   3f8a8:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   3f8ac:	e2506000 	subs	r6, r0, #0
   3f8b0:	e24dd018 	sub	sp, sp, #24
   3f8b4:	e1a05001 	mov	r5, r1
   3f8b8:	e1a08002 	mov	r8, r2
   3f8bc:	e59d7030 	ldr	r7, [sp, #48]	; 0x30
   3f8c0:	e5dd4038 	ldrb	r4, [sp, #56]	; 0x38
   3f8c4:	0a00000d 	beq	3f900 <DWHCIDeviceGetDescriptor+0x58>
   3f8c8:	e3a0e000 	mov	lr, #0
   3f8cc:	e1ddc3b4 	ldrh	ip, [sp, #52]	; 0x34
   3f8d0:	e1833408 	orr	r3, r3, r8, lsl #8
   3f8d4:	e58d3000 	str	r3, [sp]
   3f8d8:	e58d7008 	str	r7, [sp, #8]
   3f8dc:	e1a00006 	mov	r0, r6
   3f8e0:	e1a01005 	mov	r1, r5
   3f8e4:	e1a02004 	mov	r2, r4
   3f8e8:	e58de004 	str	lr, [sp, #4]
   3f8ec:	e58dc00c 	str	ip, [sp, #12]
   3f8f0:	e3a03006 	mov	r3, #6
   3f8f4:	ebffffbf 	bl	3f7f8 <DWHCIDeviceControlMessage>
   3f8f8:	e28dd018 	add	sp, sp, #24
   3f8fc:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   3f900:	e59f0014 	ldr	r0, [pc, #20]	; 3f91c <DWHCIDeviceGetDescriptor+0x74>
   3f904:	e59f1014 	ldr	r1, [pc, #20]	; 3f920 <DWHCIDeviceGetDescriptor+0x78>
   3f908:	e3a020bd 	mov	r2, #189	; 0xbd
   3f90c:	e58d3014 	str	r3, [sp, #20]
   3f910:	ebffdd4c 	bl	36e48 <uspi_assertion_failed>
   3f914:	e59d3014 	ldr	r3, [sp, #20]
   3f918:	eaffffea 	b	3f8c8 <DWHCIDeviceGetDescriptor+0x20>
   3f91c:	00056434 	.word	0x00056434
   3f920:	00056440 	.word	0x00056440

0003f924 <DWHCIDeviceSetAddress>:
   3f924:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   3f928:	e2506000 	subs	r6, r0, #0
   3f92c:	e24dd014 	sub	sp, sp, #20
   3f930:	e1a05001 	mov	r5, r1
   3f934:	e1a07002 	mov	r7, r2
   3f938:	0a000011 	beq	3f984 <DWHCIDeviceSetAddress+0x60>
   3f93c:	e3a04000 	mov	r4, #0
   3f940:	e58d7000 	str	r7, [sp]
   3f944:	e1a00006 	mov	r0, r6
   3f948:	e1a01005 	mov	r1, r5
   3f94c:	e58d4004 	str	r4, [sp, #4]
   3f950:	e58d4008 	str	r4, [sp, #8]
   3f954:	e58d400c 	str	r4, [sp, #12]
   3f958:	e1a02004 	mov	r2, r4
   3f95c:	e3a03005 	mov	r3, #5
   3f960:	ebffffa4 	bl	3f7f8 <DWHCIDeviceControlMessage>
   3f964:	e1500004 	cmp	r0, r4
   3f968:	b1a00004 	movlt	r0, r4
   3f96c:	ba000002 	blt	3f97c <DWHCIDeviceSetAddress+0x58>
   3f970:	e3a00032 	mov	r0, #50	; 0x32
   3f974:	ebffdd15 	bl	36dd0 <MsDelay>
   3f978:	e3a00001 	mov	r0, #1
   3f97c:	e28dd014 	add	sp, sp, #20
   3f980:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   3f984:	e59f000c 	ldr	r0, [pc, #12]	; 3f998 <DWHCIDeviceSetAddress+0x74>
   3f988:	e59f100c 	ldr	r1, [pc, #12]	; 3f99c <DWHCIDeviceSetAddress+0x78>
   3f98c:	e3a020c7 	mov	r2, #199	; 0xc7
   3f990:	ebffdd2c 	bl	36e48 <uspi_assertion_failed>
   3f994:	eaffffe8 	b	3f93c <DWHCIDeviceSetAddress+0x18>
   3f998:	00056434 	.word	0x00056434
   3f99c:	00056440 	.word	0x00056440

0003f9a0 <DWHCIDeviceSetConfiguration>:
   3f9a0:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   3f9a4:	e2506000 	subs	r6, r0, #0
   3f9a8:	e24dd014 	sub	sp, sp, #20
   3f9ac:	e1a05001 	mov	r5, r1
   3f9b0:	e1a07002 	mov	r7, r2
   3f9b4:	0a000011 	beq	3fa00 <DWHCIDeviceSetConfiguration+0x60>
   3f9b8:	e3a04000 	mov	r4, #0
   3f9bc:	e58d7000 	str	r7, [sp]
   3f9c0:	e1a00006 	mov	r0, r6
   3f9c4:	e1a01005 	mov	r1, r5
   3f9c8:	e58d4004 	str	r4, [sp, #4]
   3f9cc:	e58d4008 	str	r4, [sp, #8]
   3f9d0:	e58d400c 	str	r4, [sp, #12]
   3f9d4:	e1a02004 	mov	r2, r4
   3f9d8:	e3a03009 	mov	r3, #9
   3f9dc:	ebffff85 	bl	3f7f8 <DWHCIDeviceControlMessage>
   3f9e0:	e1500004 	cmp	r0, r4
   3f9e4:	b1a00004 	movlt	r0, r4
   3f9e8:	ba000002 	blt	3f9f8 <DWHCIDeviceSetConfiguration+0x58>
   3f9ec:	e3a00032 	mov	r0, #50	; 0x32
   3f9f0:	ebffdcf6 	bl	36dd0 <MsDelay>
   3f9f4:	e3a00001 	mov	r0, #1
   3f9f8:	e28dd014 	add	sp, sp, #20
   3f9fc:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   3fa00:	e59f000c 	ldr	r0, [pc, #12]	; 3fa14 <DWHCIDeviceSetConfiguration+0x74>
   3fa04:	e59f100c 	ldr	r1, [pc, #12]	; 3fa18 <DWHCIDeviceSetConfiguration+0x78>
   3fa08:	e3a020d5 	mov	r2, #213	; 0xd5
   3fa0c:	ebffdd0d 	bl	36e48 <uspi_assertion_failed>
   3fa10:	eaffffe8 	b	3f9b8 <DWHCIDeviceSetConfiguration+0x18>
   3fa14:	00056434 	.word	0x00056434
   3fa18:	00056440 	.word	0x00056440

0003fa1c <DWHCIDeviceTransfer>:
   3fa1c:	e92d4070 	push	{r4, r5, r6, lr}
   3fa20:	e2504000 	subs	r4, r0, #0
   3fa24:	e24dd038 	sub	sp, sp, #56	; 0x38
   3fa28:	e1a06001 	mov	r6, r1
   3fa2c:	e1a05002 	mov	r5, r2
   3fa30:	0a000014 	beq	3fa88 <DWHCIDeviceTransfer+0x6c>
   3fa34:	e3a00000 	mov	r0, #0
   3fa38:	e1a01006 	mov	r1, r6
   3fa3c:	e1a02005 	mov	r2, r5
   3fa40:	e58d0000 	str	r0, [sp]
   3fa44:	e28d0014 	add	r0, sp, #20
   3fa48:	eb001078 	bl	43c30 <USBRequest>
   3fa4c:	e1a00004 	mov	r0, r4
   3fa50:	e28d1014 	add	r1, sp, #20
   3fa54:	ebfffed1 	bl	3f5a0 <DWHCIDeviceSubmitBlockingRequest>
   3fa58:	e3500000 	cmp	r0, #0
   3fa5c:	0a000007 	beq	3fa80 <DWHCIDeviceTransfer+0x64>
   3fa60:	e28d0014 	add	r0, sp, #20
   3fa64:	eb0010ee 	bl	43e24 <USBRequestGetResultLength>
   3fa68:	e1a04000 	mov	r4, r0
   3fa6c:	e28d0014 	add	r0, sp, #20
   3fa70:	eb00109e 	bl	43cf0 <_USBRequest>
   3fa74:	e1a00004 	mov	r0, r4
   3fa78:	e28dd038 	add	sp, sp, #56	; 0x38
   3fa7c:	e8bd8070 	pop	{r4, r5, r6, pc}
   3fa80:	e3e04000 	mvn	r4, #0
   3fa84:	eafffff8 	b	3fa6c <DWHCIDeviceTransfer+0x50>
   3fa88:	e59f0014 	ldr	r0, [pc, #20]	; 3faa4 <DWHCIDeviceTransfer+0x88>
   3fa8c:	e59f1014 	ldr	r1, [pc, #20]	; 3faa8 <DWHCIDeviceTransfer+0x8c>
   3fa90:	e3a02c01 	mov	r2, #256	; 0x100
   3fa94:	e58d300c 	str	r3, [sp, #12]
   3fa98:	ebffdcea 	bl	36e48 <uspi_assertion_failed>
   3fa9c:	e59d300c 	ldr	r3, [sp, #12]
   3faa0:	eaffffe3 	b	3fa34 <DWHCIDeviceTransfer+0x18>
   3faa4:	00056434 	.word	0x00056434
   3faa8:	00056440 	.word	0x00056440

0003faac <DWHCIDeviceChannelInterruptHandler>:
   3faac:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   3fab0:	e2506000 	subs	r6, r0, #0
   3fab4:	e24dd018 	sub	sp, sp, #24
   3fab8:	e1a05001 	mov	r5, r1
   3fabc:	0a0000c7 	beq	3fde0 <DWHCIDeviceChannelInterruptHandler+0x334>
   3fac0:	e0654205 	rsb	r4, r5, r5, lsl #4
   3fac4:	e0864184 	add	r4, r6, r4, lsl #3
   3fac8:	e2844008 	add	r4, r4, #8
   3facc:	e1a00004 	mov	r0, r4
   3fad0:	eb00098b 	bl	42104 <DWHCITransferStageDataGetFrameScheduler>
   3fad4:	e1a08000 	mov	r8, r0
   3fad8:	e1a00004 	mov	r0, r4
   3fadc:	eb000973 	bl	420b0 <DWHCITransferStageDataGetURB>
   3fae0:	e2507000 	subs	r7, r0, #0
   3fae4:	0a0000c2 	beq	3fdf4 <DWHCIDeviceChannelInterruptHandler+0x348>
   3fae8:	e1a00004 	mov	r0, r4
   3faec:	eb0006f2 	bl	416bc <DWHCITransferStageDataGetSubState>
   3faf0:	e3500000 	cmp	r0, #0
   3faf4:	0a000067 	beq	3fc98 <DWHCIDeviceChannelInterruptHandler+0x1ec>
   3faf8:	e3500001 	cmp	r0, #1
   3fafc:	0a000034 	beq	3fbd4 <DWHCIDeviceChannelInterruptHandler+0x128>
   3fb00:	e59f03e8 	ldr	r0, [pc, #1000]	; 3fef0 <DWHCIDeviceChannelInterruptHandler+0x444>
   3fb04:	e59f13e8 	ldr	r1, [pc, #1000]	; 3fef4 <DWHCIDeviceChannelInterruptHandler+0x448>
   3fb08:	e59f23e8 	ldr	r2, [pc, #1000]	; 3fef8 <DWHCIDeviceChannelInterruptHandler+0x44c>
   3fb0c:	ebffdccd 	bl	36e48 <uspi_assertion_failed>
   3fb10:	e1a00004 	mov	r0, r4
   3fb14:	eb0006cd 	bl	41650 <DWHCITransferStageDataGetState>
   3fb18:	e3500001 	cmp	r0, #1
   3fb1c:	e1a09000 	mov	r9, r0
   3fb20:	0a000092 	beq	3fd70 <DWHCIDeviceChannelInterruptHandler+0x2c4>
   3fb24:	3a000071 	bcc	3fcf0 <DWHCIDeviceChannelInterruptHandler+0x244>
   3fb28:	e3500002 	cmp	r0, #2
   3fb2c:	1a00005e 	bne	3fcac <DWHCIDeviceChannelInterruptHandler+0x200>
   3fb30:	e1a00004 	mov	r0, r4
   3fb34:	eb00092a 	bl	41fe4 <DWHCITransferStageDataGetTransactionStatus>
   3fb38:	e59f23bc 	ldr	r2, [pc, #956]	; 3fefc <DWHCIDeviceChannelInterruptHandler+0x450>
   3fb3c:	e0022000 	and	r2, r2, r0
   3fb40:	e3520000 	cmp	r2, #0
   3fb44:	1a0000bb 	bne	3fe38 <DWHCIDeviceChannelInterruptHandler+0x38c>
   3fb48:	e1a01000 	mov	r1, r0
   3fb4c:	e598300c 	ldr	r3, [r8, #12]
   3fb50:	e1a00008 	mov	r0, r8
   3fb54:	e12fff33 	blx	r3
   3fb58:	e5983008 	ldr	r3, [r8, #8]
   3fb5c:	e1a00008 	mov	r0, r8
   3fb60:	e12fff33 	blx	r3
   3fb64:	e3500000 	cmp	r0, #0
   3fb68:	1a000014 	bne	3fbc0 <DWHCIDeviceChannelInterruptHandler+0x114>
   3fb6c:	e1a00004 	mov	r0, r4
   3fb70:	eb000930 	bl	42038 <DWHCITransferStageDataIsStageComplete>
   3fb74:	e3500000 	cmp	r0, #0
   3fb78:	1a00008d 	bne	3fdb4 <DWHCIDeviceChannelInterruptHandler+0x308>
   3fb7c:	e1a00004 	mov	r0, r4
   3fb80:	eb0006da 	bl	416f0 <DWHCITransferStageDataBeginSplitCycle>
   3fb84:	e2501000 	subs	r1, r0, #0
   3fb88:	0a0000ae 	beq	3fe48 <DWHCIDeviceChannelInterruptHandler+0x39c>
   3fb8c:	e1a00004 	mov	r0, r4
   3fb90:	eb0006e5 	bl	4172c <DWHCITransferStageDataIsPeriodic>
   3fb94:	e2505000 	subs	r5, r0, #0
   3fb98:	e1a00004 	mov	r0, r4
   3fb9c:	1a0000b5 	bne	3fe78 <DWHCIDeviceChannelInterruptHandler+0x3cc>
   3fba0:	e3a01001 	mov	r1, #1
   3fba4:	eb00069b 	bl	41618 <DWHCITransferStageDataSetState>
   3fba8:	e1a00004 	mov	r0, r4
   3fbac:	e1a01005 	mov	r1, r5
   3fbb0:	eb000683 	bl	415c4 <DWHCITransferStageDataSetSplitComplete>
   3fbb4:	e5983004 	ldr	r3, [r8, #4]
   3fbb8:	e1a00008 	mov	r0, r8
   3fbbc:	e12fff33 	blx	r3
   3fbc0:	e1a00006 	mov	r0, r6
   3fbc4:	e1a01004 	mov	r1, r4
   3fbc8:	ebfffcbf 	bl	3eecc <DWHCIDeviceStartTransaction>
   3fbcc:	e28dd018 	add	sp, sp, #24
   3fbd0:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   3fbd4:	e1a00004 	mov	r0, r4
   3fbd8:	eb000847 	bl	41cfc <DWHCITransferStageDataGetDMAAddress>
   3fbdc:	e1a09000 	mov	r9, r0
   3fbe0:	e1a00004 	mov	r0, r4
   3fbe4:	eb000859 	bl	41d50 <DWHCITransferStageDataGetBytesToTransfer>
   3fbe8:	e1a01000 	mov	r1, r0
   3fbec:	e1a00009 	mov	r0, r9
   3fbf0:	eb002eda 	bl	4b760 <uspi_CleanAndInvalidateDataCacheRange>
   3fbf4:	e3a03000 	mov	r3, #0
   3fbf8:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   3fbfc:	e59f12fc 	ldr	r1, [pc, #764]	; 3ff00 <DWHCIDeviceChannelInterruptHandler+0x454>
   3fc00:	e1a09285 	lsl	r9, r5, #5
   3fc04:	e0891001 	add	r1, r9, r1
   3fc08:	e1a0000d 	mov	r0, sp
   3fc0c:	eb0004b6 	bl	40eec <DWHCIRegister>
   3fc10:	e1a0000d 	mov	r0, sp
   3fc14:	eb0004e0 	bl	40f9c <DWHCIRegisterRead>
   3fc18:	e59f12e4 	ldr	r1, [pc, #740]	; 3ff04 <DWHCIDeviceChannelInterruptHandler+0x458>
   3fc1c:	e28d000c 	add	r0, sp, #12
   3fc20:	e0891001 	add	r1, r9, r1
   3fc24:	eb0004b0 	bl	40eec <DWHCIRegister>
   3fc28:	e28d000c 	add	r0, sp, #12
   3fc2c:	eb0004da 	bl	40f9c <DWHCIRegisterRead>
   3fc30:	e3500002 	cmp	r0, #2
   3fc34:	0affffe1 	beq	3fbc0 <DWHCIDeviceChannelInterruptHandler+0x114>
   3fc38:	e1a00004 	mov	r0, r4
   3fc3c:	eb0006ba 	bl	4172c <DWHCITransferStageDataIsPeriodic>
   3fc40:	e3500000 	cmp	r0, #0
   3fc44:	1a00001e 	bne	3fcc4 <DWHCIDeviceChannelInterruptHandler+0x218>
   3fc48:	e28d000c 	add	r0, sp, #12
   3fc4c:	eb0004d2 	bl	40f9c <DWHCIRegisterRead>
   3fc50:	e1a0a000 	mov	sl, r0
   3fc54:	e1a0000d 	mov	r0, sp
   3fc58:	eb0004f5 	bl	41034 <DWHCIRegisterGet>
   3fc5c:	e1a09000 	mov	r9, r0
   3fc60:	e1a0000d 	mov	r0, sp
   3fc64:	eb0004f2 	bl	41034 <DWHCIRegisterGet>
   3fc68:	e1a02189 	lsl	r2, r9, #3
   3fc6c:	e3c004ff 	bic	r0, r0, #-16777216	; 0xff000000
   3fc70:	e3c0373e 	bic	r3, r0, #16252928	; 0xf80000
   3fc74:	e1a02b22 	lsr	r2, r2, #22
   3fc78:	e1a0100a 	mov	r1, sl
   3fc7c:	e1a00004 	mov	r0, r4
   3fc80:	eb0005ec 	bl	41438 <DWHCITransferStageDataTransactionComplete>
   3fc84:	e28d000c 	add	r0, sp, #12
   3fc88:	eb0004b6 	bl	40f68 <_DWHCIRegister>
   3fc8c:	e1a0000d 	mov	r0, sp
   3fc90:	eb0004b4 	bl	40f68 <_DWHCIRegister>
   3fc94:	eaffff9d 	b	3fb10 <DWHCIDeviceChannelInterruptHandler+0x64>
   3fc98:	e1a00006 	mov	r0, r6
   3fc9c:	e1a01004 	mov	r1, r4
   3fca0:	ebfffb8d 	bl	3eadc <DWHCIDeviceStartChannel>
   3fca4:	e28dd018 	add	sp, sp, #24
   3fca8:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   3fcac:	e59f023c 	ldr	r0, [pc, #572]	; 3fef0 <DWHCIDeviceChannelInterruptHandler+0x444>
   3fcb0:	e59f123c 	ldr	r1, [pc, #572]	; 3fef4 <DWHCIDeviceChannelInterruptHandler+0x448>
   3fcb4:	e59f224c 	ldr	r2, [pc, #588]	; 3ff08 <DWHCIDeviceChannelInterruptHandler+0x45c>
   3fcb8:	ebffdc62 	bl	36e48 <uspi_assertion_failed>
   3fcbc:	e28dd018 	add	sp, sp, #24
   3fcc0:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   3fcc4:	e1a0000d 	mov	r0, sp
   3fcc8:	eb0004d9 	bl	41034 <DWHCIRegisterGet>
   3fccc:	e1a00ea0 	lsr	r0, r0, #29
   3fcd0:	e2000003 	and	r0, r0, #3
   3fcd4:	e3500003 	cmp	r0, #3
   3fcd8:	1affffda 	bne	3fc48 <DWHCIDeviceChannelInterruptHandler+0x19c>
   3fcdc:	e59f0228 	ldr	r0, [pc, #552]	; 3ff0c <DWHCIDeviceChannelInterruptHandler+0x460>
   3fce0:	e59f120c 	ldr	r1, [pc, #524]	; 3fef4 <DWHCIDeviceChannelInterruptHandler+0x448>
   3fce4:	e59f2224 	ldr	r2, [pc, #548]	; 3ff10 <DWHCIDeviceChannelInterruptHandler+0x464>
   3fce8:	ebffdc56 	bl	36e48 <uspi_assertion_failed>
   3fcec:	eaffffd5 	b	3fc48 <DWHCIDeviceChannelInterruptHandler+0x19c>
   3fcf0:	e1a00004 	mov	r0, r4
   3fcf4:	eb0008ba 	bl	41fe4 <DWHCITransferStageDataGetTransactionStatus>
   3fcf8:	e59f21fc 	ldr	r2, [pc, #508]	; 3fefc <DWHCIDeviceChannelInterruptHandler+0x450>
   3fcfc:	e0022000 	and	r2, r2, r0
   3fd00:	e3520000 	cmp	r2, #0
   3fd04:	1a00006a 	bne	3feb4 <DWHCIDeviceChannelInterruptHandler+0x408>
   3fd08:	e3100050 	tst	r0, #80	; 0x50
   3fd0c:	0a000004 	beq	3fd24 <DWHCIDeviceChannelInterruptHandler+0x278>
   3fd10:	e1a00004 	mov	r0, r4
   3fd14:	eb000684 	bl	4172c <DWHCITransferStageDataIsPeriodic>
   3fd18:	e3500000 	cmp	r0, #0
   3fd1c:	11a00004 	movne	r0, r4
   3fd20:	1a000054 	bne	3fe78 <DWHCIDeviceChannelInterruptHandler+0x3cc>
   3fd24:	e1a00004 	mov	r0, r4
   3fd28:	eb0007e5 	bl	41cc4 <DWHCITransferStageDataIsStatusStage>
   3fd2c:	e3500000 	cmp	r0, #0
   3fd30:	0a000068 	beq	3fed8 <DWHCIDeviceChannelInterruptHandler+0x42c>
   3fd34:	e1a00007 	mov	r0, r7
   3fd38:	e3a01001 	mov	r1, #1
   3fd3c:	eb00100f 	bl	43d80 <USBRequestSetStatus>
   3fd40:	e1a00006 	mov	r0, r6
   3fd44:	e1a01005 	mov	r1, r5
   3fd48:	ebfffb44 	bl	3ea60 <DWHCIDeviceDisableChannelInterrupt>
   3fd4c:	e1a00004 	mov	r0, r4
   3fd50:	eb0005a2 	bl	413e0 <_DWHCITransferStageData>
   3fd54:	e1a00006 	mov	r0, r6
   3fd58:	e1a01005 	mov	r1, r5
   3fd5c:	ebfffd17 	bl	3f1c0 <DWHCIDeviceFreeChannel>
   3fd60:	e1a00007 	mov	r0, r7
   3fd64:	eb0010a1 	bl	43ff0 <USBRequestCallCompletionRoutine>
   3fd68:	e28dd018 	add	sp, sp, #24
   3fd6c:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   3fd70:	e1a00004 	mov	r0, r4
   3fd74:	eb00089a 	bl	41fe4 <DWHCITransferStageDataGetTransactionStatus>
   3fd78:	e59f2194 	ldr	r2, [pc, #404]	; 3ff14 <DWHCIDeviceChannelInterruptHandler+0x468>
   3fd7c:	e0022000 	and	r2, r2, r0
   3fd80:	e3520000 	cmp	r2, #0
   3fd84:	1a00001f 	bne	3fe08 <DWHCIDeviceChannelInterruptHandler+0x35c>
   3fd88:	e1a01000 	mov	r1, r0
   3fd8c:	e598300c 	ldr	r3, [r8, #12]
   3fd90:	e1a00008 	mov	r0, r8
   3fd94:	e12fff33 	blx	r3
   3fd98:	e1a00004 	mov	r0, r4
   3fd9c:	e3a01002 	mov	r1, #2
   3fda0:	eb00061c 	bl	41618 <DWHCITransferStageDataSetState>
   3fda4:	e1a00004 	mov	r0, r4
   3fda8:	e1a01009 	mov	r1, r9
   3fdac:	eb000604 	bl	415c4 <DWHCITransferStageDataSetSplitComplete>
   3fdb0:	eaffff68 	b	3fb58 <DWHCIDeviceChannelInterruptHandler+0xac>
   3fdb4:	e1a00006 	mov	r0, r6
   3fdb8:	e1a01005 	mov	r1, r5
   3fdbc:	ebfffb27 	bl	3ea60 <DWHCIDeviceDisableChannelInterrupt>
   3fdc0:	e1a00004 	mov	r0, r4
   3fdc4:	eb0007be 	bl	41cc4 <DWHCITransferStageDataIsStatusStage>
   3fdc8:	e3500000 	cmp	r0, #0
   3fdcc:	0a000023 	beq	3fe60 <DWHCIDeviceChannelInterruptHandler+0x3b4>
   3fdd0:	e1a00007 	mov	r0, r7
   3fdd4:	e3a01001 	mov	r1, #1
   3fdd8:	eb000fe8 	bl	43d80 <USBRequestSetStatus>
   3fddc:	eaffffda 	b	3fd4c <DWHCIDeviceChannelInterruptHandler+0x2a0>
   3fde0:	e59f0130 	ldr	r0, [pc, #304]	; 3ff18 <DWHCIDeviceChannelInterruptHandler+0x46c>
   3fde4:	e59f1108 	ldr	r1, [pc, #264]	; 3fef4 <DWHCIDeviceChannelInterruptHandler+0x448>
   3fde8:	e59f212c 	ldr	r2, [pc, #300]	; 3ff1c <DWHCIDeviceChannelInterruptHandler+0x470>
   3fdec:	ebffdc15 	bl	36e48 <uspi_assertion_failed>
   3fdf0:	eaffff32 	b	3fac0 <DWHCIDeviceChannelInterruptHandler+0x14>
   3fdf4:	e59f0124 	ldr	r0, [pc, #292]	; 3ff20 <DWHCIDeviceChannelInterruptHandler+0x474>
   3fdf8:	e59f10f4 	ldr	r1, [pc, #244]	; 3fef4 <DWHCIDeviceChannelInterruptHandler+0x448>
   3fdfc:	e59f2120 	ldr	r2, [pc, #288]	; 3ff24 <DWHCIDeviceChannelInterruptHandler+0x478>
   3fe00:	ebffdc10 	bl	36e48 <uspi_assertion_failed>
   3fe04:	eaffff37 	b	3fae8 <DWHCIDeviceChannelInterruptHandler+0x3c>
   3fe08:	e1a01009 	mov	r1, r9
   3fe0c:	e1a03000 	mov	r3, r0
   3fe10:	e59f0110 	ldr	r0, [pc, #272]	; 3ff28 <DWHCIDeviceChannelInterruptHandler+0x47c>
   3fe14:	e59f2110 	ldr	r2, [pc, #272]	; 3ff2c <DWHCIDeviceChannelInterruptHandler+0x480>
   3fe18:	ebff90d6 	bl	24178 <LogWrite>
   3fe1c:	e1a00007 	mov	r0, r7
   3fe20:	e3a01000 	mov	r1, #0
   3fe24:	eb000fd5 	bl	43d80 <USBRequestSetStatus>
   3fe28:	e1a00006 	mov	r0, r6
   3fe2c:	e1a01005 	mov	r1, r5
   3fe30:	ebfffb0a 	bl	3ea60 <DWHCIDeviceDisableChannelInterrupt>
   3fe34:	eaffffc4 	b	3fd4c <DWHCIDeviceChannelInterruptHandler+0x2a0>
   3fe38:	e1a03000 	mov	r3, r0
   3fe3c:	e3a01001 	mov	r1, #1
   3fe40:	e59f00e0 	ldr	r0, [pc, #224]	; 3ff28 <DWHCIDeviceChannelInterruptHandler+0x47c>
   3fe44:	eafffff2 	b	3fe14 <DWHCIDeviceChannelInterruptHandler+0x368>
   3fe48:	e1a00007 	mov	r0, r7
   3fe4c:	eb000fcb 	bl	43d80 <USBRequestSetStatus>
   3fe50:	e1a00006 	mov	r0, r6
   3fe54:	e1a01005 	mov	r1, r5
   3fe58:	ebfffb00 	bl	3ea60 <DWHCIDeviceDisableChannelInterrupt>
   3fe5c:	eaffffba 	b	3fd4c <DWHCIDeviceChannelInterruptHandler+0x2a0>
   3fe60:	e1a00004 	mov	r0, r4
   3fe64:	eb000882 	bl	42074 <DWHCITransferStageDataGetResultLen>
   3fe68:	e1a01000 	mov	r1, r0
   3fe6c:	e1a00007 	mov	r0, r7
   3fe70:	eb000fd0 	bl	43db8 <USBRequestSetResultLen>
   3fe74:	eaffffd5 	b	3fdd0 <DWHCIDeviceChannelInterruptHandler+0x324>
   3fe78:	e3a01003 	mov	r1, #3
   3fe7c:	eb0005e5 	bl	41618 <DWHCITransferStageDataSetState>
   3fe80:	e1a00007 	mov	r0, r7
   3fe84:	eb000fa9 	bl	43d30 <USBRequestGetEndpoint>
   3fe88:	eb000eec 	bl	43a40 <USBEndpointGetInterval>
   3fe8c:	e3a03064 	mov	r3, #100	; 0x64
   3fe90:	e0000093 	mul	r0, r3, r0
   3fe94:	e59f3094 	ldr	r3, [pc, #148]	; 3ff30 <DWHCIDeviceChannelInterruptHandler+0x484>
   3fe98:	e1a02004 	mov	r2, r4
   3fe9c:	e0803093 	umull	r3, r0, r3, r0
   3fea0:	e59f108c 	ldr	r1, [pc, #140]	; 3ff34 <DWHCIDeviceChannelInterruptHandler+0x488>
   3fea4:	e1a03006 	mov	r3, r6
   3fea8:	e1a00320 	lsr	r0, r0, #6
   3feac:	ebffdbcc 	bl	36de4 <StartKernelTimer>
   3feb0:	eaffff7b 	b	3fca4 <DWHCIDeviceChannelInterruptHandler+0x1f8>
   3feb4:	e1a03000 	mov	r3, r0
   3feb8:	e3a01001 	mov	r1, #1
   3febc:	e59f0064 	ldr	r0, [pc, #100]	; 3ff28 <DWHCIDeviceChannelInterruptHandler+0x47c>
   3fec0:	e59f2064 	ldr	r2, [pc, #100]	; 3ff2c <DWHCIDeviceChannelInterruptHandler+0x480>
   3fec4:	ebff90ab 	bl	24178 <LogWrite>
   3fec8:	e1a00007 	mov	r0, r7
   3fecc:	e3a01000 	mov	r1, #0
   3fed0:	eb000faa 	bl	43d80 <USBRequestSetStatus>
   3fed4:	eaffff99 	b	3fd40 <DWHCIDeviceChannelInterruptHandler+0x294>
   3fed8:	e1a00004 	mov	r0, r4
   3fedc:	eb000864 	bl	42074 <DWHCITransferStageDataGetResultLen>
   3fee0:	e1a01000 	mov	r1, r0
   3fee4:	e1a00007 	mov	r0, r7
   3fee8:	eb000fb2 	bl	43db8 <USBRequestSetResultLen>
   3feec:	eaffff90 	b	3fd34 <DWHCIDeviceChannelInterruptHandler+0x288>
   3fef0:	000563cc 	.word	0x000563cc
   3fef4:	00056440 	.word	0x00056440
   3fef8:	000003da 	.word	0x000003da
   3fefc:	0000078c 	.word	0x0000078c
   3ff00:	20980510 	.word	0x20980510
   3ff04:	20980508 	.word	0x20980508
   3ff08:	00000478 	.word	0x00000478
   3ff0c:	000565ec 	.word	0x000565ec
   3ff10:	000003cf 	.word	0x000003cf
   3ff14:	000007dc 	.word	0x000007dc
   3ff18:	00056434 	.word	0x00056434
   3ff1c:	000003ad 	.word	0x000003ad
   3ff20:	0005650c 	.word	0x0005650c
   3ff24:	000003b2 	.word	0x000003b2
   3ff28:	00056428 	.word	0x00056428
   3ff2c:	00056684 	.word	0x00056684
   3ff30:	10624dd3 	.word	0x10624dd3
   3ff34:	0003f008 	.word	0x0003f008

0003ff38 <DWHCIDeviceInterruptHandler>:
   3ff38:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   3ff3c:	e2507000 	subs	r7, r0, #0
   3ff40:	e24dd02c 	sub	sp, sp, #44	; 0x2c
   3ff44:	0a000038 	beq	4002c <DWHCIDeviceInterruptHandler+0xf4>
   3ff48:	e3a04000 	mov	r4, #0
   3ff4c:	ee074fba 	mcr	15, 0, r4, cr7, cr10, {5}
   3ff50:	e59f10e8 	ldr	r1, [pc, #232]	; 40040 <DWHCIDeviceInterruptHandler+0x108>
   3ff54:	e28d0004 	add	r0, sp, #4
   3ff58:	eb0003e3 	bl	40eec <DWHCIRegister>
   3ff5c:	e28d0004 	add	r0, sp, #4
   3ff60:	eb00040d 	bl	40f9c <DWHCIRegisterRead>
   3ff64:	e28d0004 	add	r0, sp, #4
   3ff68:	eb000431 	bl	41034 <DWHCIRegisterGet>
   3ff6c:	e3100402 	tst	r0, #33554432	; 0x2000000
   3ff70:	1a000007 	bne	3ff94 <DWHCIDeviceInterruptHandler+0x5c>
   3ff74:	e28d0004 	add	r0, sp, #4
   3ff78:	eb000417 	bl	40fdc <DWHCIRegisterWrite>
   3ff7c:	e3a03000 	mov	r3, #0
   3ff80:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   3ff84:	e28d0004 	add	r0, sp, #4
   3ff88:	eb0003f6 	bl	40f68 <_DWHCIRegister>
   3ff8c:	e28dd02c 	add	sp, sp, #44	; 0x2c
   3ff90:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   3ff94:	e59f10a8 	ldr	r1, [pc, #168]	; 40044 <DWHCIDeviceInterruptHandler+0x10c>
   3ff98:	e28d0010 	add	r0, sp, #16
   3ff9c:	eb0003d2 	bl	40eec <DWHCIRegister>
   3ffa0:	e28d0010 	add	r0, sp, #16
   3ffa4:	eb0003fc 	bl	40f9c <DWHCIRegisterRead>
   3ffa8:	e28d0010 	add	r0, sp, #16
   3ffac:	eb00040a 	bl	40fdc <DWHCIRegisterWrite>
   3ffb0:	e5973000 	ldr	r3, [r7]
   3ffb4:	e1530004 	cmp	r3, r4
   3ffb8:	13a05001 	movne	r5, #1
   3ffbc:	159f6084 	ldrne	r6, [pc, #132]	; 40048 <DWHCIDeviceInterruptHandler+0x110>
   3ffc0:	1a000006 	bne	3ffe0 <DWHCIDeviceInterruptHandler+0xa8>
   3ffc4:	ea000015 	b	40020 <DWHCIDeviceInterruptHandler+0xe8>
   3ffc8:	e5973000 	ldr	r3, [r7]
   3ffcc:	e2844001 	add	r4, r4, #1
   3ffd0:	e1530004 	cmp	r3, r4
   3ffd4:	e1a05085 	lsl	r5, r5, #1
   3ffd8:	e2866020 	add	r6, r6, #32
   3ffdc:	9a00000f 	bls	40020 <DWHCIDeviceInterruptHandler+0xe8>
   3ffe0:	e28d0010 	add	r0, sp, #16
   3ffe4:	eb000412 	bl	41034 <DWHCIRegisterGet>
   3ffe8:	e1100005 	tst	r0, r5
   3ffec:	0afffff5 	beq	3ffc8 <DWHCIDeviceInterruptHandler+0x90>
   3fff0:	e1a01006 	mov	r1, r6
   3fff4:	e3a02000 	mov	r2, #0
   3fff8:	e28d001c 	add	r0, sp, #28
   3fffc:	eb0003c8 	bl	40f24 <DWHCIRegister2>
   40000:	e28d001c 	add	r0, sp, #28
   40004:	eb0003f4 	bl	40fdc <DWHCIRegisterWrite>
   40008:	e1a00007 	mov	r0, r7
   4000c:	e1a01004 	mov	r1, r4
   40010:	ebfffea5 	bl	3faac <DWHCIDeviceChannelInterruptHandler>
   40014:	e28d001c 	add	r0, sp, #28
   40018:	eb0003d2 	bl	40f68 <_DWHCIRegister>
   4001c:	eaffffe9 	b	3ffc8 <DWHCIDeviceInterruptHandler+0x90>
   40020:	e28d0010 	add	r0, sp, #16
   40024:	eb0003cf 	bl	40f68 <_DWHCIRegister>
   40028:	eaffffd1 	b	3ff74 <DWHCIDeviceInterruptHandler+0x3c>
   4002c:	e59f0018 	ldr	r0, [pc, #24]	; 4004c <DWHCIDeviceInterruptHandler+0x114>
   40030:	e59f1018 	ldr	r1, [pc, #24]	; 40050 <DWHCIDeviceInterruptHandler+0x118>
   40034:	e3a02d12 	mov	r2, #1152	; 0x480
   40038:	ebffdb82 	bl	36e48 <uspi_assertion_failed>
   4003c:	eaffffc1 	b	3ff48 <DWHCIDeviceInterruptHandler+0x10>
   40040:	20980014 	.word	0x20980014
   40044:	20980414 	.word	0x20980414
   40048:	2098050c 	.word	0x2098050c
   4004c:	00056434 	.word	0x00056434
   40050:	00056440 	.word	0x00056440

00040054 <DWHCIDeviceWaitForBit>:
   40054:	e92d40f8 	push	{r3, r4, r5, r6, r7, lr}
   40058:	e3500000 	cmp	r0, #0
   4005c:	e1a05001 	mov	r5, r1
   40060:	e1a06002 	mov	r6, r2
   40064:	e1a07003 	mov	r7, r3
   40068:	e59d4018 	ldr	r4, [sp, #24]
   4006c:	0a000029 	beq	40118 <DWHCIDeviceWaitForBit+0xc4>
   40070:	e3550000 	cmp	r5, #0
   40074:	0a000022 	beq	40104 <DWHCIDeviceWaitForBit+0xb0>
   40078:	e3560000 	cmp	r6, #0
   4007c:	0a00001b 	beq	400f0 <DWHCIDeviceWaitForBit+0x9c>
   40080:	e3540000 	cmp	r4, #0
   40084:	1a000008 	bne	400ac <DWHCIDeviceWaitForBit+0x58>
   40088:	ea000013 	b	400dc <DWHCIDeviceWaitForBit+0x88>
   4008c:	e16f3f17 	clz	r3, r7
   40090:	e1a032a3 	lsr	r3, r3, #5
   40094:	e3530000 	cmp	r3, #0
   40098:	e3a00001 	mov	r0, #1
   4009c:	0a00000b 	beq	400d0 <DWHCIDeviceWaitForBit+0x7c>
   400a0:	ebffdb4a 	bl	36dd0 <MsDelay>
   400a4:	e2544001 	subs	r4, r4, #1
   400a8:	0a000009 	beq	400d4 <DWHCIDeviceWaitForBit+0x80>
   400ac:	e1a00005 	mov	r0, r5
   400b0:	eb0003b9 	bl	40f9c <DWHCIRegisterRead>
   400b4:	e1100006 	tst	r0, r6
   400b8:	1afffff3 	bne	4008c <DWHCIDeviceWaitForBit+0x38>
   400bc:	e2973000 	adds	r3, r7, #0
   400c0:	13a03001 	movne	r3, #1
   400c4:	e3530000 	cmp	r3, #0
   400c8:	e3a00001 	mov	r0, #1
   400cc:	1afffff3 	bne	400a0 <DWHCIDeviceWaitForBit+0x4c>
   400d0:	e8bd80f8 	pop	{r3, r4, r5, r6, r7, pc}
   400d4:	e1a00004 	mov	r0, r4
   400d8:	e8bd80f8 	pop	{r3, r4, r5, r6, r7, pc}
   400dc:	e59f0048 	ldr	r0, [pc, #72]	; 4012c <DWHCIDeviceWaitForBit+0xd8>
   400e0:	e59f1048 	ldr	r1, [pc, #72]	; 40130 <DWHCIDeviceWaitForBit+0xdc>
   400e4:	e59f2048 	ldr	r2, [pc, #72]	; 40134 <DWHCIDeviceWaitForBit+0xe0>
   400e8:	ebffdb56 	bl	36e48 <uspi_assertion_failed>
   400ec:	eaffffee 	b	400ac <DWHCIDeviceWaitForBit+0x58>
   400f0:	e59f0040 	ldr	r0, [pc, #64]	; 40138 <DWHCIDeviceWaitForBit+0xe4>
   400f4:	e59f1034 	ldr	r1, [pc, #52]	; 40130 <DWHCIDeviceWaitForBit+0xdc>
   400f8:	e59f203c 	ldr	r2, [pc, #60]	; 4013c <DWHCIDeviceWaitForBit+0xe8>
   400fc:	ebffdb51 	bl	36e48 <uspi_assertion_failed>
   40100:	eaffffde 	b	40080 <DWHCIDeviceWaitForBit+0x2c>
   40104:	e59f0034 	ldr	r0, [pc, #52]	; 40140 <DWHCIDeviceWaitForBit+0xec>
   40108:	e59f1020 	ldr	r1, [pc, #32]	; 40130 <DWHCIDeviceWaitForBit+0xdc>
   4010c:	e59f2030 	ldr	r2, [pc, #48]	; 40144 <DWHCIDeviceWaitForBit+0xf0>
   40110:	ebffdb4c 	bl	36e48 <uspi_assertion_failed>
   40114:	eaffffd7 	b	40078 <DWHCIDeviceWaitForBit+0x24>
   40118:	e59f0028 	ldr	r0, [pc, #40]	; 40148 <DWHCIDeviceWaitForBit+0xf4>
   4011c:	e59f100c 	ldr	r1, [pc, #12]	; 40130 <DWHCIDeviceWaitForBit+0xdc>
   40120:	e59f2024 	ldr	r2, [pc, #36]	; 4014c <DWHCIDeviceWaitForBit+0xf8>
   40124:	ebffdb47 	bl	36e48 <uspi_assertion_failed>
   40128:	eaffffd0 	b	40070 <DWHCIDeviceWaitForBit+0x1c>
   4012c:	000566c4 	.word	0x000566c4
   40130:	00056440 	.word	0x00056440
   40134:	0000050a 	.word	0x0000050a
   40138:	000566b8 	.word	0x000566b8
   4013c:	00000509 	.word	0x00000509
   40140:	000566a8 	.word	0x000566a8
   40144:	00000508 	.word	0x00000508
   40148:	00056434 	.word	0x00056434
   4014c:	00000506 	.word	0x00000506

00040150 <DWHCIDeviceEnableRootPort>:
   40150:	e92d4030 	push	{r4, r5, lr}
   40154:	e2504000 	subs	r4, r0, #0
   40158:	e24dd01c 	sub	sp, sp, #28
   4015c:	0a000030 	beq	40224 <DWHCIDeviceEnableRootPort+0xd4>
   40160:	e28d000c 	add	r0, sp, #12
   40164:	e59f10cc 	ldr	r1, [pc, #204]	; 40238 <DWHCIDeviceEnableRootPort+0xe8>
   40168:	eb00035f 	bl	40eec <DWHCIRegister>
   4016c:	e3a05014 	mov	r5, #20
   40170:	e3a02001 	mov	r2, #1
   40174:	e1a00004 	mov	r0, r4
   40178:	e28d100c 	add	r1, sp, #12
   4017c:	e58d5000 	str	r5, [sp]
   40180:	e1a03002 	mov	r3, r2
   40184:	ebffffb2 	bl	40054 <DWHCIDeviceWaitForBit>
   40188:	e2504000 	subs	r4, r0, #0
   4018c:	0a00001f 	beq	40210 <DWHCIDeviceEnableRootPort+0xc0>
   40190:	e3a04001 	mov	r4, #1
   40194:	e3a00064 	mov	r0, #100	; 0x64
   40198:	ebffdb0c 	bl	36dd0 <MsDelay>
   4019c:	e28d000c 	add	r0, sp, #12
   401a0:	eb00037d 	bl	40f9c <DWHCIRegisterRead>
   401a4:	e28d000c 	add	r0, sp, #12
   401a8:	e3e0102e 	mvn	r1, #46	; 0x2e
   401ac:	eb0003db 	bl	41120 <DWHCIRegisterAnd>
   401b0:	e3a01c01 	mov	r1, #256	; 0x100
   401b4:	e28d000c 	add	r0, sp, #12
   401b8:	eb0003ef 	bl	4117c <DWHCIRegisterOr>
   401bc:	e28d000c 	add	r0, sp, #12
   401c0:	eb000385 	bl	40fdc <DWHCIRegisterWrite>
   401c4:	e3a00032 	mov	r0, #50	; 0x32
   401c8:	ebffdb00 	bl	36dd0 <MsDelay>
   401cc:	e28d000c 	add	r0, sp, #12
   401d0:	eb000371 	bl	40f9c <DWHCIRegisterRead>
   401d4:	e28d000c 	add	r0, sp, #12
   401d8:	e3e0102e 	mvn	r1, #46	; 0x2e
   401dc:	eb0003cf 	bl	41120 <DWHCIRegisterAnd>
   401e0:	e3e01c01 	mvn	r1, #256	; 0x100
   401e4:	e28d000c 	add	r0, sp, #12
   401e8:	eb0003cc 	bl	41120 <DWHCIRegisterAnd>
   401ec:	e28d000c 	add	r0, sp, #12
   401f0:	eb000379 	bl	40fdc <DWHCIRegisterWrite>
   401f4:	e1a00005 	mov	r0, r5
   401f8:	ebffdaf4 	bl	36dd0 <MsDelay>
   401fc:	e28d000c 	add	r0, sp, #12
   40200:	eb000358 	bl	40f68 <_DWHCIRegister>
   40204:	e1a00004 	mov	r0, r4
   40208:	e28dd01c 	add	sp, sp, #28
   4020c:	e8bd8030 	pop	{r4, r5, pc}
   40210:	e28d000c 	add	r0, sp, #12
   40214:	eb000353 	bl	40f68 <_DWHCIRegister>
   40218:	e1a00004 	mov	r0, r4
   4021c:	e28dd01c 	add	sp, sp, #28
   40220:	e8bd8030 	pop	{r4, r5, pc}
   40224:	e59f0010 	ldr	r0, [pc, #16]	; 4023c <DWHCIDeviceEnableRootPort+0xec>
   40228:	e59f1010 	ldr	r1, [pc, #16]	; 40240 <DWHCIDeviceEnableRootPort+0xf0>
   4022c:	e59f2010 	ldr	r2, [pc, #16]	; 40244 <DWHCIDeviceEnableRootPort+0xf4>
   40230:	ebffdb04 	bl	36e48 <uspi_assertion_failed>
   40234:	eaffffc9 	b	40160 <DWHCIDeviceEnableRootPort+0x10>
   40238:	20980440 	.word	0x20980440
   4023c:	00056434 	.word	0x00056434
   40240:	00056440 	.word	0x00056440
   40244:	000001fb 	.word	0x000001fb

00040248 <DWHCIDeviceReset>:
   40248:	e92d4030 	push	{r4, r5, lr}
   4024c:	e2504000 	subs	r4, r0, #0
   40250:	e24dd01c 	sub	sp, sp, #28
   40254:	0a000026 	beq	402f4 <DWHCIDeviceReset+0xac>
   40258:	e3a05064 	mov	r5, #100	; 0x64
   4025c:	e28d000c 	add	r0, sp, #12
   40260:	e59f10a0 	ldr	r1, [pc, #160]	; 40308 <DWHCIDeviceReset+0xc0>
   40264:	e3a02000 	mov	r2, #0
   40268:	eb00032d 	bl	40f24 <DWHCIRegister2>
   4026c:	e28d100c 	add	r1, sp, #12
   40270:	e58d5000 	str	r5, [sp]
   40274:	e1a00004 	mov	r0, r4
   40278:	e3a02102 	mov	r2, #-2147483648	; 0x80000000
   4027c:	e3a03001 	mov	r3, #1
   40280:	ebffff73 	bl	40054 <DWHCIDeviceWaitForBit>
   40284:	e3500000 	cmp	r0, #0
   40288:	0a000014 	beq	402e0 <DWHCIDeviceReset+0x98>
   4028c:	e3a01001 	mov	r1, #1
   40290:	e28d000c 	add	r0, sp, #12
   40294:	eb0003b8 	bl	4117c <DWHCIRegisterOr>
   40298:	e28d000c 	add	r0, sp, #12
   4029c:	eb00034e 	bl	40fdc <DWHCIRegisterWrite>
   402a0:	e3a0300a 	mov	r3, #10
   402a4:	e1a00004 	mov	r0, r4
   402a8:	e58d3000 	str	r3, [sp]
   402ac:	e28d100c 	add	r1, sp, #12
   402b0:	e3a02001 	mov	r2, #1
   402b4:	e3a03000 	mov	r3, #0
   402b8:	ebffff65 	bl	40054 <DWHCIDeviceWaitForBit>
   402bc:	e3500000 	cmp	r0, #0
   402c0:	0a000006 	beq	402e0 <DWHCIDeviceReset+0x98>
   402c4:	e1a00005 	mov	r0, r5
   402c8:	ebffdac0 	bl	36dd0 <MsDelay>
   402cc:	e28d000c 	add	r0, sp, #12
   402d0:	eb000324 	bl	40f68 <_DWHCIRegister>
   402d4:	e3a00001 	mov	r0, #1
   402d8:	e28dd01c 	add	sp, sp, #28
   402dc:	e8bd8030 	pop	{r4, r5, pc}
   402e0:	e28d000c 	add	r0, sp, #12
   402e4:	eb00031f 	bl	40f68 <_DWHCIRegister>
   402e8:	e3a00000 	mov	r0, #0
   402ec:	e28dd01c 	add	sp, sp, #28
   402f0:	e8bd8030 	pop	{r4, r5, pc}
   402f4:	e59f0010 	ldr	r0, [pc, #16]	; 4030c <DWHCIDeviceReset+0xc4>
   402f8:	e59f1010 	ldr	r1, [pc, #16]	; 40310 <DWHCIDeviceReset+0xc8>
   402fc:	e59f2010 	ldr	r2, [pc, #16]	; 40314 <DWHCIDeviceReset+0xcc>
   40300:	ebffdad0 	bl	36e48 <uspi_assertion_failed>
   40304:	eaffffd3 	b	40258 <DWHCIDeviceReset+0x10>
   40308:	20980010 	.word	0x20980010
   4030c:	00056434 	.word	0x00056434
   40310:	00056440 	.word	0x00056440
   40314:	0000021e 	.word	0x0000021e

00040318 <DWHCIDeviceInitCore>:
   40318:	e92d4030 	push	{r4, r5, lr}
   4031c:	e2504000 	subs	r4, r0, #0
   40320:	e24dd02c 	sub	sp, sp, #44	; 0x2c
   40324:	0a000089 	beq	40550 <DWHCIDeviceInitCore+0x238>
   40328:	e59f1234 	ldr	r1, [pc, #564]	; 40564 <DWHCIDeviceInitCore+0x24c>
   4032c:	e28d0004 	add	r0, sp, #4
   40330:	eb0002ed 	bl	40eec <DWHCIRegister>
   40334:	e28d0004 	add	r0, sp, #4
   40338:	eb000317 	bl	40f9c <DWHCIRegisterRead>
   4033c:	e28d0004 	add	r0, sp, #4
   40340:	e3e01601 	mvn	r1, #1048576	; 0x100000
   40344:	eb000375 	bl	41120 <DWHCIRegisterAnd>
   40348:	e3e01501 	mvn	r1, #4194304	; 0x400000
   4034c:	e28d0004 	add	r0, sp, #4
   40350:	eb000372 	bl	41120 <DWHCIRegisterAnd>
   40354:	e28d0004 	add	r0, sp, #4
   40358:	eb00031f 	bl	40fdc <DWHCIRegisterWrite>
   4035c:	e1a00004 	mov	r0, r4
   40360:	ebffffb8 	bl	40248 <DWHCIDeviceReset>
   40364:	e2505000 	subs	r5, r0, #0
   40368:	0a00005a 	beq	404d8 <DWHCIDeviceInitCore+0x1c0>
   4036c:	e28d0004 	add	r0, sp, #4
   40370:	eb000309 	bl	40f9c <DWHCIRegisterRead>
   40374:	e28d0004 	add	r0, sp, #4
   40378:	e3e01010 	mvn	r1, #16
   4037c:	eb000367 	bl	41120 <DWHCIRegisterAnd>
   40380:	e3e01008 	mvn	r1, #8
   40384:	e28d0004 	add	r0, sp, #4
   40388:	eb000364 	bl	41120 <DWHCIRegisterAnd>
   4038c:	e28d0004 	add	r0, sp, #4
   40390:	eb000311 	bl	40fdc <DWHCIRegisterWrite>
   40394:	e59f11cc 	ldr	r1, [pc, #460]	; 40568 <DWHCIDeviceInitCore+0x250>
   40398:	e28d0010 	add	r0, sp, #16
   4039c:	eb0002d2 	bl	40eec <DWHCIRegister>
   403a0:	e28d0010 	add	r0, sp, #16
   403a4:	eb0002fc 	bl	40f9c <DWHCIRegisterRead>
   403a8:	e28d0010 	add	r0, sp, #16
   403ac:	eb000320 	bl	41034 <DWHCIRegisterGet>
   403b0:	e1a001a0 	lsr	r0, r0, #3
   403b4:	e2000003 	and	r0, r0, #3
   403b8:	e3500002 	cmp	r0, #2
   403bc:	0a000003 	beq	403d0 <DWHCIDeviceInitCore+0xb8>
   403c0:	e59f01a4 	ldr	r0, [pc, #420]	; 4056c <DWHCIDeviceInitCore+0x254>
   403c4:	e59f11a4 	ldr	r1, [pc, #420]	; 40570 <DWHCIDeviceInitCore+0x258>
   403c8:	e59f21a4 	ldr	r2, [pc, #420]	; 40574 <DWHCIDeviceInitCore+0x25c>
   403cc:	ebffda9d 	bl	36e48 <uspi_assertion_failed>
   403d0:	e28d0004 	add	r0, sp, #4
   403d4:	eb0002f0 	bl	40f9c <DWHCIRegisterRead>
   403d8:	e28d0010 	add	r0, sp, #16
   403dc:	eb000314 	bl	41034 <DWHCIRegisterGet>
   403e0:	e1a00320 	lsr	r0, r0, #6
   403e4:	e2000003 	and	r0, r0, #3
   403e8:	e3500002 	cmp	r0, #2
   403ec:	0a00004a 	beq	4051c <DWHCIDeviceInitCore+0x204>
   403f0:	e28d0004 	add	r0, sp, #4
   403f4:	e3e01802 	mvn	r1, #131072	; 0x20000
   403f8:	eb000348 	bl	41120 <DWHCIRegisterAnd>
   403fc:	e28d0004 	add	r0, sp, #4
   40400:	e3e01702 	mvn	r1, #524288	; 0x80000
   40404:	eb000345 	bl	41120 <DWHCIRegisterAnd>
   40408:	e28d0004 	add	r0, sp, #4
   4040c:	eb0002f2 	bl	40fdc <DWHCIRegisterWrite>
   40410:	e5943000 	ldr	r3, [r4]
   40414:	e3530000 	cmp	r3, #0
   40418:	1a00003a 	bne	40508 <DWHCIDeviceInitCore+0x1f0>
   4041c:	e28d0010 	add	r0, sp, #16
   40420:	eb000303 	bl	41034 <DWHCIRegisterGet>
   40424:	e1a00720 	lsr	r0, r0, #14
   40428:	e200000f 	and	r0, r0, #15
   4042c:	e2403003 	sub	r3, r0, #3
   40430:	e353000c 	cmp	r3, #12
   40434:	e2800001 	add	r0, r0, #1
   40438:	e5840000 	str	r0, [r4]
   4043c:	8a00002c 	bhi	404f4 <DWHCIDeviceInitCore+0x1dc>
   40440:	e3a05001 	mov	r5, #1
   40444:	e28d001c 	add	r0, sp, #28
   40448:	e59f1128 	ldr	r1, [pc, #296]	; 40578 <DWHCIDeviceInitCore+0x260>
   4044c:	eb0002a6 	bl	40eec <DWHCIRegister>
   40450:	e28d001c 	add	r0, sp, #28
   40454:	eb0002d0 	bl	40f9c <DWHCIRegisterRead>
   40458:	e28d001c 	add	r0, sp, #28
   4045c:	e3a01020 	mov	r1, #32
   40460:	eb000345 	bl	4117c <DWHCIRegisterOr>
   40464:	e28d001c 	add	r0, sp, #28
   40468:	e3a01010 	mov	r1, #16
   4046c:	eb000342 	bl	4117c <DWHCIRegisterOr>
   40470:	e3e01006 	mvn	r1, #6
   40474:	e28d001c 	add	r0, sp, #28
   40478:	eb000328 	bl	41120 <DWHCIRegisterAnd>
   4047c:	e28d001c 	add	r0, sp, #28
   40480:	eb0002d5 	bl	40fdc <DWHCIRegisterWrite>
   40484:	e28d0004 	add	r0, sp, #4
   40488:	eb0002c3 	bl	40f9c <DWHCIRegisterRead>
   4048c:	e28d0004 	add	r0, sp, #4
   40490:	e3e01c02 	mvn	r1, #512	; 0x200
   40494:	eb000321 	bl	41120 <DWHCIRegisterAnd>
   40498:	e3e01c01 	mvn	r1, #256	; 0x100
   4049c:	e28d0004 	add	r0, sp, #4
   404a0:	eb00031e 	bl	41120 <DWHCIRegisterAnd>
   404a4:	e28d0004 	add	r0, sp, #4
   404a8:	eb0002cb 	bl	40fdc <DWHCIRegisterWrite>
   404ac:	e1a00004 	mov	r0, r4
   404b0:	ebfff916 	bl	3e910 <DWHCIDeviceEnableCommonInterrupts>
   404b4:	e28d001c 	add	r0, sp, #28
   404b8:	eb0002aa 	bl	40f68 <_DWHCIRegister>
   404bc:	e28d0010 	add	r0, sp, #16
   404c0:	eb0002a8 	bl	40f68 <_DWHCIRegister>
   404c4:	e28d0004 	add	r0, sp, #4
   404c8:	eb0002a6 	bl	40f68 <_DWHCIRegister>
   404cc:	e1a00005 	mov	r0, r5
   404d0:	e28dd02c 	add	sp, sp, #44	; 0x2c
   404d4:	e8bd8030 	pop	{r4, r5, pc}
   404d8:	e59f009c 	ldr	r0, [pc, #156]	; 4057c <DWHCIDeviceInitCore+0x264>
   404dc:	e3a01001 	mov	r1, #1
   404e0:	e59f2098 	ldr	r2, [pc, #152]	; 40580 <DWHCIDeviceInitCore+0x268>
   404e4:	ebff8f23 	bl	24178 <LogWrite>
   404e8:	e1a00005 	mov	r0, r5
   404ec:	e28dd02c 	add	sp, sp, #44	; 0x2c
   404f0:	e8bd8030 	pop	{r4, r5, pc}
   404f4:	e59f0088 	ldr	r0, [pc, #136]	; 40584 <DWHCIDeviceInitCore+0x26c>
   404f8:	e59f1070 	ldr	r1, [pc, #112]	; 40570 <DWHCIDeviceInitCore+0x258>
   404fc:	e3a02e19 	mov	r2, #400	; 0x190
   40500:	ebffda50 	bl	36e48 <uspi_assertion_failed>
   40504:	eaffffcd 	b	40440 <DWHCIDeviceInitCore+0x128>
   40508:	e59f0078 	ldr	r0, [pc, #120]	; 40588 <DWHCIDeviceInitCore+0x270>
   4050c:	e59f105c 	ldr	r1, [pc, #92]	; 40570 <DWHCIDeviceInitCore+0x258>
   40510:	e59f2074 	ldr	r2, [pc, #116]	; 4058c <DWHCIDeviceInitCore+0x274>
   40514:	ebffda4b 	bl	36e48 <uspi_assertion_failed>
   40518:	eaffffbf 	b	4041c <DWHCIDeviceInitCore+0x104>
   4051c:	e28d0010 	add	r0, sp, #16
   40520:	eb0002c3 	bl	41034 <DWHCIRegisterGet>
   40524:	e1a00420 	lsr	r0, r0, #8
   40528:	e2000003 	and	r0, r0, #3
   4052c:	e3500001 	cmp	r0, #1
   40530:	1affffae 	bne	403f0 <DWHCIDeviceInitCore+0xd8>
   40534:	e28d0004 	add	r0, sp, #4
   40538:	e3a01802 	mov	r1, #131072	; 0x20000
   4053c:	eb00030e 	bl	4117c <DWHCIRegisterOr>
   40540:	e28d0004 	add	r0, sp, #4
   40544:	e3a01702 	mov	r1, #524288	; 0x80000
   40548:	eb00030b 	bl	4117c <DWHCIRegisterOr>
   4054c:	eaffffad 	b	40408 <DWHCIDeviceInitCore+0xf0>
   40550:	e59f0038 	ldr	r0, [pc, #56]	; 40590 <DWHCIDeviceInitCore+0x278>
   40554:	e59f1014 	ldr	r1, [pc, #20]	; 40570 <DWHCIDeviceInitCore+0x258>
   40558:	e59f2034 	ldr	r2, [pc, #52]	; 40594 <DWHCIDeviceInitCore+0x27c>
   4055c:	ebffda39 	bl	36e48 <uspi_assertion_failed>
   40560:	eaffff70 	b	40328 <DWHCIDeviceInitCore+0x10>
   40564:	2098000c 	.word	0x2098000c
   40568:	20980048 	.word	0x20980048
   4056c:	000566e4 	.word	0x000566e4
   40570:	00056440 	.word	0x00056440
   40574:	0000017e 	.word	0x0000017e
   40578:	20980008 	.word	0x20980008
   4057c:	00056428 	.word	0x00056428
   40580:	000566d4 	.word	0x000566d4
   40584:	00056744 	.word	0x00056744
   40588:	0005672c 	.word	0x0005672c
   4058c:	0000018e 	.word	0x0000018e
   40590:	00056434 	.word	0x00056434
   40594:	00000166 	.word	0x00000166

00040598 <DWHCIDeviceFlushTxFIFO>:
   40598:	e92d4030 	push	{r4, r5, lr}
   4059c:	e2504000 	subs	r4, r0, #0
   405a0:	e24dd01c 	sub	sp, sp, #28
   405a4:	e1a05001 	mov	r5, r1
   405a8:	0a00001d 	beq	40624 <DWHCIDeviceFlushTxFIFO+0x8c>
   405ac:	e3a02000 	mov	r2, #0
   405b0:	e28d000c 	add	r0, sp, #12
   405b4:	e59f107c 	ldr	r1, [pc, #124]	; 40638 <DWHCIDeviceFlushTxFIFO+0xa0>
   405b8:	eb000259 	bl	40f24 <DWHCIRegister2>
   405bc:	e28d000c 	add	r0, sp, #12
   405c0:	e3a01020 	mov	r1, #32
   405c4:	eb0002ec 	bl	4117c <DWHCIRegisterOr>
   405c8:	e28d000c 	add	r0, sp, #12
   405cc:	e3e01d1f 	mvn	r1, #1984	; 0x7c0
   405d0:	eb0002d2 	bl	41120 <DWHCIRegisterAnd>
   405d4:	e1a01305 	lsl	r1, r5, #6
   405d8:	e28d000c 	add	r0, sp, #12
   405dc:	eb0002e6 	bl	4117c <DWHCIRegisterOr>
   405e0:	e28d000c 	add	r0, sp, #12
   405e4:	eb00027c 	bl	40fdc <DWHCIRegisterWrite>
   405e8:	e3a0300a 	mov	r3, #10
   405ec:	e1a00004 	mov	r0, r4
   405f0:	e58d3000 	str	r3, [sp]
   405f4:	e28d100c 	add	r1, sp, #12
   405f8:	e3a02020 	mov	r2, #32
   405fc:	e3a03000 	mov	r3, #0
   40600:	ebfffe93 	bl	40054 <DWHCIDeviceWaitForBit>
   40604:	e3500000 	cmp	r0, #0
   40608:	0a000001 	beq	40614 <DWHCIDeviceFlushTxFIFO+0x7c>
   4060c:	e3a00001 	mov	r0, #1
   40610:	ebffd9f2 	bl	36de0 <usDelay>
   40614:	e28d000c 	add	r0, sp, #12
   40618:	eb000252 	bl	40f68 <_DWHCIRegister>
   4061c:	e28dd01c 	add	sp, sp, #28
   40620:	e8bd8030 	pop	{r4, r5, pc}
   40624:	e59f0010 	ldr	r0, [pc, #16]	; 4063c <DWHCIDeviceFlushTxFIFO+0xa4>
   40628:	e59f1010 	ldr	r1, [pc, #16]	; 40640 <DWHCIDeviceFlushTxFIFO+0xa8>
   4062c:	e3a02fa7 	mov	r2, #668	; 0x29c
   40630:	ebffda04 	bl	36e48 <uspi_assertion_failed>
   40634:	eaffffdc 	b	405ac <DWHCIDeviceFlushTxFIFO+0x14>
   40638:	20980010 	.word	0x20980010
   4063c:	00056434 	.word	0x00056434
   40640:	00056440 	.word	0x00056440

00040644 <DWHCIDeviceFlushRxFIFO>:
   40644:	e92d4010 	push	{r4, lr}
   40648:	e2504000 	subs	r4, r0, #0
   4064c:	e24dd018 	sub	sp, sp, #24
   40650:	0a000017 	beq	406b4 <DWHCIDeviceFlushRxFIFO+0x70>
   40654:	e3a02000 	mov	r2, #0
   40658:	e28d000c 	add	r0, sp, #12
   4065c:	e59f1064 	ldr	r1, [pc, #100]	; 406c8 <DWHCIDeviceFlushRxFIFO+0x84>
   40660:	eb00022f 	bl	40f24 <DWHCIRegister2>
   40664:	e3a01010 	mov	r1, #16
   40668:	e28d000c 	add	r0, sp, #12
   4066c:	eb0002c2 	bl	4117c <DWHCIRegisterOr>
   40670:	e28d000c 	add	r0, sp, #12
   40674:	eb000258 	bl	40fdc <DWHCIRegisterWrite>
   40678:	e3a0300a 	mov	r3, #10
   4067c:	e1a00004 	mov	r0, r4
   40680:	e58d3000 	str	r3, [sp]
   40684:	e28d100c 	add	r1, sp, #12
   40688:	e3a02010 	mov	r2, #16
   4068c:	e3a03000 	mov	r3, #0
   40690:	ebfffe6f 	bl	40054 <DWHCIDeviceWaitForBit>
   40694:	e3500000 	cmp	r0, #0
   40698:	0a000001 	beq	406a4 <DWHCIDeviceFlushRxFIFO+0x60>
   4069c:	e3a00001 	mov	r0, #1
   406a0:	ebffd9ce 	bl	36de0 <usDelay>
   406a4:	e28d000c 	add	r0, sp, #12
   406a8:	eb00022e 	bl	40f68 <_DWHCIRegister>
   406ac:	e28dd018 	add	sp, sp, #24
   406b0:	e8bd8010 	pop	{r4, pc}
   406b4:	e59f0010 	ldr	r0, [pc, #16]	; 406cc <DWHCIDeviceFlushRxFIFO+0x88>
   406b8:	e59f1010 	ldr	r1, [pc, #16]	; 406d0 <DWHCIDeviceFlushRxFIFO+0x8c>
   406bc:	e59f2010 	ldr	r2, [pc, #16]	; 406d4 <DWHCIDeviceFlushRxFIFO+0x90>
   406c0:	ebffd9e0 	bl	36e48 <uspi_assertion_failed>
   406c4:	eaffffe2 	b	40654 <DWHCIDeviceFlushRxFIFO+0x10>
   406c8:	20980010 	.word	0x20980010
   406cc:	00056434 	.word	0x00056434
   406d0:	00056440 	.word	0x00056440
   406d4:	000002af 	.word	0x000002af

000406d8 <DWHCIDeviceInitHost>:
   406d8:	e92d4030 	push	{r4, r5, lr}
   406dc:	e2504000 	subs	r4, r0, #0
   406e0:	e24dd064 	sub	sp, sp, #100	; 0x64
   406e4:	0a000075 	beq	408c0 <DWHCIDeviceInitHost+0x1e8>
   406e8:	e3a02000 	mov	r2, #0
   406ec:	e59f11e0 	ldr	r1, [pc, #480]	; 408d4 <DWHCIDeviceInitHost+0x1fc>
   406f0:	e1a0000d 	mov	r0, sp
   406f4:	eb00020a 	bl	40f24 <DWHCIRegister2>
   406f8:	e1a0000d 	mov	r0, sp
   406fc:	eb000236 	bl	40fdc <DWHCIRegisterWrite>
   40700:	e59f11d0 	ldr	r1, [pc, #464]	; 408d8 <DWHCIDeviceInitHost+0x200>
   40704:	e28d000c 	add	r0, sp, #12
   40708:	eb0001f7 	bl	40eec <DWHCIRegister>
   4070c:	e28d000c 	add	r0, sp, #12
   40710:	eb000221 	bl	40f9c <DWHCIRegisterRead>
   40714:	e28d000c 	add	r0, sp, #12
   40718:	e3e01003 	mvn	r1, #3
   4071c:	eb00027f 	bl	41120 <DWHCIRegisterAnd>
   40720:	e28d0018 	add	r0, sp, #24
   40724:	e59f11b0 	ldr	r1, [pc, #432]	; 408dc <DWHCIDeviceInitHost+0x204>
   40728:	eb0001ef 	bl	40eec <DWHCIRegister>
   4072c:	e28d0024 	add	r0, sp, #36	; 0x24
   40730:	e59f11a8 	ldr	r1, [pc, #424]	; 408e0 <DWHCIDeviceInitHost+0x208>
   40734:	eb0001ec 	bl	40eec <DWHCIRegister>
   40738:	e28d0018 	add	r0, sp, #24
   4073c:	eb000216 	bl	40f9c <DWHCIRegisterRead>
   40740:	e1a00320 	lsr	r0, r0, #6
   40744:	e2000003 	and	r0, r0, #3
   40748:	e3500002 	cmp	r0, #2
   4074c:	0a00004d 	beq	40888 <DWHCIDeviceInitHost+0x1b0>
   40750:	e28d000c 	add	r0, sp, #12
   40754:	e3a01000 	mov	r1, #0
   40758:	eb000287 	bl	4117c <DWHCIRegisterOr>
   4075c:	e28d000c 	add	r0, sp, #12
   40760:	eb00021d 	bl	40fdc <DWHCIRegisterWrite>
   40764:	e59f1178 	ldr	r1, [pc, #376]	; 408e4 <DWHCIDeviceInitHost+0x20c>
   40768:	e3a02b01 	mov	r2, #1024	; 0x400
   4076c:	e28d0030 	add	r0, sp, #48	; 0x30
   40770:	eb0001eb 	bl	40f24 <DWHCIRegister2>
   40774:	e28d0030 	add	r0, sp, #48	; 0x30
   40778:	eb000217 	bl	40fdc <DWHCIRegisterWrite>
   4077c:	e3a02000 	mov	r2, #0
   40780:	e28d003c 	add	r0, sp, #60	; 0x3c
   40784:	e59f115c 	ldr	r1, [pc, #348]	; 408e8 <DWHCIDeviceInitHost+0x210>
   40788:	eb0001e5 	bl	40f24 <DWHCIRegister2>
   4078c:	e28d003c 	add	r0, sp, #60	; 0x3c
   40790:	e3a01b01 	mov	r1, #1024	; 0x400
   40794:	eb000278 	bl	4117c <DWHCIRegisterOr>
   40798:	e3a01301 	mov	r1, #67108864	; 0x4000000
   4079c:	e28d003c 	add	r0, sp, #60	; 0x3c
   407a0:	eb000275 	bl	4117c <DWHCIRegisterOr>
   407a4:	e28d003c 	add	r0, sp, #60	; 0x3c
   407a8:	eb00020b 	bl	40fdc <DWHCIRegisterWrite>
   407ac:	e3a02000 	mov	r2, #0
   407b0:	e28d0048 	add	r0, sp, #72	; 0x48
   407b4:	e59f1130 	ldr	r1, [pc, #304]	; 408ec <DWHCIDeviceInitHost+0x214>
   407b8:	eb0001d9 	bl	40f24 <DWHCIRegister2>
   407bc:	e28d0048 	add	r0, sp, #72	; 0x48
   407c0:	e3a01b02 	mov	r1, #2048	; 0x800
   407c4:	eb00026c 	bl	4117c <DWHCIRegisterOr>
   407c8:	e3a01301 	mov	r1, #67108864	; 0x4000000
   407cc:	e28d0048 	add	r0, sp, #72	; 0x48
   407d0:	eb000269 	bl	4117c <DWHCIRegisterOr>
   407d4:	e28d0048 	add	r0, sp, #72	; 0x48
   407d8:	eb0001ff 	bl	40fdc <DWHCIRegisterWrite>
   407dc:	e3a01010 	mov	r1, #16
   407e0:	e1a00004 	mov	r0, r4
   407e4:	ebffff6b 	bl	40598 <DWHCIDeviceFlushTxFIFO>
   407e8:	e1a00004 	mov	r0, r4
   407ec:	ebffff94 	bl	40644 <DWHCIDeviceFlushRxFIFO>
   407f0:	e59f10f8 	ldr	r1, [pc, #248]	; 408f0 <DWHCIDeviceInitHost+0x218>
   407f4:	e28d0054 	add	r0, sp, #84	; 0x54
   407f8:	eb0001bb 	bl	40eec <DWHCIRegister>
   407fc:	e28d0054 	add	r0, sp, #84	; 0x54
   40800:	eb0001e5 	bl	40f9c <DWHCIRegisterRead>
   40804:	e28d0054 	add	r0, sp, #84	; 0x54
   40808:	e3e0102e 	mvn	r1, #46	; 0x2e
   4080c:	eb000243 	bl	41120 <DWHCIRegisterAnd>
   40810:	e28d0054 	add	r0, sp, #84	; 0x54
   40814:	eb000206 	bl	41034 <DWHCIRegisterGet>
   40818:	e3100a01 	tst	r0, #4096	; 0x1000
   4081c:	1a000004 	bne	40834 <DWHCIDeviceInitHost+0x15c>
   40820:	e28d0054 	add	r0, sp, #84	; 0x54
   40824:	e3a01a01 	mov	r1, #4096	; 0x1000
   40828:	eb000253 	bl	4117c <DWHCIRegisterOr>
   4082c:	e28d0054 	add	r0, sp, #84	; 0x54
   40830:	eb0001e9 	bl	40fdc <DWHCIRegisterWrite>
   40834:	e1a00004 	mov	r0, r4
   40838:	ebfff84b 	bl	3e96c <DWHCIDeviceEnableHostInterrupts>
   4083c:	e28d0054 	add	r0, sp, #84	; 0x54
   40840:	eb0001c8 	bl	40f68 <_DWHCIRegister>
   40844:	e28d0048 	add	r0, sp, #72	; 0x48
   40848:	eb0001c6 	bl	40f68 <_DWHCIRegister>
   4084c:	e28d003c 	add	r0, sp, #60	; 0x3c
   40850:	eb0001c4 	bl	40f68 <_DWHCIRegister>
   40854:	e28d0030 	add	r0, sp, #48	; 0x30
   40858:	eb0001c2 	bl	40f68 <_DWHCIRegister>
   4085c:	e28d0024 	add	r0, sp, #36	; 0x24
   40860:	eb0001c0 	bl	40f68 <_DWHCIRegister>
   40864:	e28d0018 	add	r0, sp, #24
   40868:	eb0001be 	bl	40f68 <_DWHCIRegister>
   4086c:	e28d000c 	add	r0, sp, #12
   40870:	eb0001bc 	bl	40f68 <_DWHCIRegister>
   40874:	e1a0000d 	mov	r0, sp
   40878:	eb0001ba 	bl	40f68 <_DWHCIRegister>
   4087c:	e3a00001 	mov	r0, #1
   40880:	e28dd064 	add	sp, sp, #100	; 0x64
   40884:	e8bd8030 	pop	{r4, r5, pc}
   40888:	e28d0018 	add	r0, sp, #24
   4088c:	eb0001e8 	bl	41034 <DWHCIRegisterGet>
   40890:	e1a00420 	lsr	r0, r0, #8
   40894:	e2005003 	and	r5, r0, #3
   40898:	e3550001 	cmp	r5, #1
   4089c:	1affffab 	bne	40750 <DWHCIDeviceInitHost+0x78>
   408a0:	e28d0024 	add	r0, sp, #36	; 0x24
   408a4:	eb0001bc 	bl	40f9c <DWHCIRegisterRead>
   408a8:	e3100802 	tst	r0, #131072	; 0x20000
   408ac:	0affffa7 	beq	40750 <DWHCIDeviceInitHost+0x78>
   408b0:	e1a01005 	mov	r1, r5
   408b4:	e28d000c 	add	r0, sp, #12
   408b8:	eb00022f 	bl	4117c <DWHCIRegisterOr>
   408bc:	eaffffa6 	b	4075c <DWHCIDeviceInitHost+0x84>
   408c0:	e59f002c 	ldr	r0, [pc, #44]	; 408f4 <DWHCIDeviceInitHost+0x21c>
   408c4:	e59f102c 	ldr	r1, [pc, #44]	; 408f8 <DWHCIDeviceInitHost+0x220>
   408c8:	e59f202c 	ldr	r2, [pc, #44]	; 408fc <DWHCIDeviceInitHost+0x224>
   408cc:	ebffd95d 	bl	36e48 <uspi_assertion_failed>
   408d0:	eaffff84 	b	406e8 <DWHCIDeviceInitHost+0x10>
   408d4:	20980e00 	.word	0x20980e00
   408d8:	20980400 	.word	0x20980400
   408dc:	20980048 	.word	0x20980048
   408e0:	2098000c 	.word	0x2098000c
   408e4:	20980024 	.word	0x20980024
   408e8:	20980028 	.word	0x20980028
   408ec:	20980100 	.word	0x20980100
   408f0:	20980440 	.word	0x20980440
   408f4:	00056434 	.word	0x00056434
   408f8:	00056440 	.word	0x00056440
   408fc:	000001ad 	.word	0x000001ad

00040900 <DWHCIDeviceInitialize>:
   40900:	e92d4070 	push	{r4, r5, r6, lr}
   40904:	e2506000 	subs	r6, r0, #0
   40908:	e24dd018 	sub	sp, sp, #24
   4090c:	0a000056 	beq	40a6c <DWHCIDeviceInitialize+0x16c>
   40910:	e3a04000 	mov	r4, #0
   40914:	ee074fba 	mcr	15, 0, r4, cr7, cr10, {5}
   40918:	e59f1198 	ldr	r1, [pc, #408]	; 40ab8 <DWHCIDeviceInitialize+0x1b8>
   4091c:	e1a0000d 	mov	r0, sp
   40920:	eb000171 	bl	40eec <DWHCIRegister>
   40924:	e1a0000d 	mov	r0, sp
   40928:	eb00019b 	bl	40f9c <DWHCIRegisterRead>
   4092c:	e59f3188 	ldr	r3, [pc, #392]	; 40abc <DWHCIDeviceInitialize+0x1bc>
   40930:	e1500003 	cmp	r0, r3
   40934:	0a00000c 	beq	4096c <DWHCIDeviceInitialize+0x6c>
   40938:	e1a0000d 	mov	r0, sp
   4093c:	eb0001bc 	bl	41034 <DWHCIRegisterGet>
   40940:	e3a01001 	mov	r1, #1
   40944:	e1a03000 	mov	r3, r0
   40948:	e59f2170 	ldr	r2, [pc, #368]	; 40ac0 <DWHCIDeviceInitialize+0x1c0>
   4094c:	e59f0170 	ldr	r0, [pc, #368]	; 40ac4 <DWHCIDeviceInitialize+0x1c4>
   40950:	ebff8e08 	bl	24178 <LogWrite>
   40954:	e1a0000d 	mov	r0, sp
   40958:	e1a05004 	mov	r5, r4
   4095c:	eb000181 	bl	40f68 <_DWHCIRegister>
   40960:	e1a00005 	mov	r0, r5
   40964:	e28dd018 	add	sp, sp, #24
   40968:	e8bd8070 	pop	{r4, r5, r6, pc}
   4096c:	e3a00003 	mov	r0, #3
   40970:	ebffd922 	bl	36e00 <SetPowerStateOn>
   40974:	e2505000 	subs	r5, r0, #0
   40978:	0a000032 	beq	40a48 <DWHCIDeviceInitialize+0x148>
   4097c:	e59f1144 	ldr	r1, [pc, #324]	; 40ac8 <DWHCIDeviceInitialize+0x1c8>
   40980:	e28d000c 	add	r0, sp, #12
   40984:	eb000158 	bl	40eec <DWHCIRegister>
   40988:	e28d000c 	add	r0, sp, #12
   4098c:	eb000182 	bl	40f9c <DWHCIRegisterRead>
   40990:	e3e01001 	mvn	r1, #1
   40994:	e28d000c 	add	r0, sp, #12
   40998:	eb0001e0 	bl	41120 <DWHCIRegisterAnd>
   4099c:	e28d000c 	add	r0, sp, #12
   409a0:	eb00018d 	bl	40fdc <DWHCIRegisterWrite>
   409a4:	e3a00009 	mov	r0, #9
   409a8:	e59f111c 	ldr	r1, [pc, #284]	; 40acc <DWHCIDeviceInitialize+0x1cc>
   409ac:	e1a02006 	mov	r2, r6
   409b0:	ebffd910 	bl	36df8 <ConnectInterrupt>
   409b4:	e1a00006 	mov	r0, r6
   409b8:	ebfffe56 	bl	40318 <DWHCIDeviceInitCore>
   409bc:	e2505000 	subs	r5, r0, #0
   409c0:	0a000015 	beq	40a1c <DWHCIDeviceInitialize+0x11c>
   409c4:	e1a00006 	mov	r0, r6
   409c8:	ebfff7b5 	bl	3e8a4 <DWHCIDeviceEnableGlobalInterrupts>
   409cc:	e1a00006 	mov	r0, r6
   409d0:	ebffff40 	bl	406d8 <DWHCIDeviceInitHost>
   409d4:	e2505000 	subs	r5, r0, #0
   409d8:	0a000028 	beq	40a80 <DWHCIDeviceInitialize+0x180>
   409dc:	e1a00006 	mov	r0, r6
   409e0:	ebfffdda 	bl	40150 <DWHCIDeviceEnableRootPort>
   409e4:	e3500000 	cmp	r0, #0
   409e8:	0a00002d 	beq	40aa4 <DWHCIDeviceInitialize+0x1a4>
   409ec:	e2860d1e 	add	r0, r6, #1920	; 0x780
   409f0:	e280000c 	add	r0, r0, #12
   409f4:	eb00255b 	bl	49f68 <DWHCIRootPortInitialize>
   409f8:	e3500000 	cmp	r0, #0
   409fc:	0a000023 	beq	40a90 <DWHCIDeviceInitialize+0x190>
   40a00:	ee074fba 	mcr	15, 0, r4, cr7, cr10, {5}
   40a04:	e28d000c 	add	r0, sp, #12
   40a08:	eb000156 	bl	40f68 <_DWHCIRegister>
   40a0c:	e1a0000d 	mov	r0, sp
   40a10:	eb000154 	bl	40f68 <_DWHCIRegister>
   40a14:	e3a05001 	mov	r5, #1
   40a18:	eaffffd0 	b	40960 <DWHCIDeviceInitialize+0x60>
   40a1c:	e3a01001 	mov	r1, #1
   40a20:	e59f009c 	ldr	r0, [pc, #156]	; 40ac4 <DWHCIDeviceInitialize+0x1c4>
   40a24:	e59f20a4 	ldr	r2, [pc, #164]	; 40ad0 <DWHCIDeviceInitialize+0x1d0>
   40a28:	ebff8dd2 	bl	24178 <LogWrite>
   40a2c:	e28d000c 	add	r0, sp, #12
   40a30:	eb00014c 	bl	40f68 <_DWHCIRegister>
   40a34:	e1a0000d 	mov	r0, sp
   40a38:	eb00014a 	bl	40f68 <_DWHCIRegister>
   40a3c:	e1a00005 	mov	r0, r5
   40a40:	e28dd018 	add	sp, sp, #24
   40a44:	e8bd8070 	pop	{r4, r5, r6, pc}
   40a48:	e3a01001 	mov	r1, #1
   40a4c:	e59f2080 	ldr	r2, [pc, #128]	; 40ad4 <DWHCIDeviceInitialize+0x1d4>
   40a50:	e59f006c 	ldr	r0, [pc, #108]	; 40ac4 <DWHCIDeviceInitialize+0x1c4>
   40a54:	ebff8dc7 	bl	24178 <LogWrite>
   40a58:	e1a0000d 	mov	r0, sp
   40a5c:	eb000141 	bl	40f68 <_DWHCIRegister>
   40a60:	e1a00005 	mov	r0, r5
   40a64:	e28dd018 	add	sp, sp, #24
   40a68:	e8bd8070 	pop	{r4, r5, r6, pc}
   40a6c:	e59f0064 	ldr	r0, [pc, #100]	; 40ad8 <DWHCIDeviceInitialize+0x1d8>
   40a70:	e59f1064 	ldr	r1, [pc, #100]	; 40adc <DWHCIDeviceInitialize+0x1dc>
   40a74:	e3a0206e 	mov	r2, #110	; 0x6e
   40a78:	ebffd8f2 	bl	36e48 <uspi_assertion_failed>
   40a7c:	eaffffa3 	b	40910 <DWHCIDeviceInitialize+0x10>
   40a80:	e59f003c 	ldr	r0, [pc, #60]	; 40ac4 <DWHCIDeviceInitialize+0x1c4>
   40a84:	e3a01001 	mov	r1, #1
   40a88:	e59f2050 	ldr	r2, [pc, #80]	; 40ae0 <DWHCIDeviceInitialize+0x1e0>
   40a8c:	eaffffe5 	b	40a28 <DWHCIDeviceInitialize+0x128>
   40a90:	e59f002c 	ldr	r0, [pc, #44]	; 40ac4 <DWHCIDeviceInitialize+0x1c4>
   40a94:	e3a01002 	mov	r1, #2
   40a98:	e59f2044 	ldr	r2, [pc, #68]	; 40ae4 <DWHCIDeviceInitialize+0x1e4>
   40a9c:	ebff8db5 	bl	24178 <LogWrite>
   40aa0:	eaffffd7 	b	40a04 <DWHCIDeviceInitialize+0x104>
   40aa4:	e59f0018 	ldr	r0, [pc, #24]	; 40ac4 <DWHCIDeviceInitialize+0x1c4>
   40aa8:	e3a01002 	mov	r1, #2
   40aac:	e59f2034 	ldr	r2, [pc, #52]	; 40ae8 <DWHCIDeviceInitialize+0x1e8>
   40ab0:	ebff8db0 	bl	24178 <LogWrite>
   40ab4:	eaffffd2 	b	40a04 <DWHCIDeviceInitialize+0x104>
   40ab8:	20980040 	.word	0x20980040
   40abc:	4f54280a 	.word	0x4f54280a
   40ac0:	00056788 	.word	0x00056788
   40ac4:	00056428 	.word	0x00056428
   40ac8:	20980008 	.word	0x20980008
   40acc:	0003ff38 	.word	0x0003ff38
   40ad0:	000567b0 	.word	0x000567b0
   40ad4:	000567a0 	.word	0x000567a0
   40ad8:	00056434 	.word	0x00056434
   40adc:	00056440 	.word	0x00056440
   40ae0:	000567c8 	.word	0x000567c8
   40ae4:	00056804 	.word	0x00056804
   40ae8:	000567e0 	.word	0x000567e0

00040aec <DWHCIDeviceGetPortSpeed>:
   40aec:	e92d4010 	push	{r4, lr}
   40af0:	e3500000 	cmp	r0, #0
   40af4:	e24dd010 	sub	sp, sp, #16
   40af8:	0a000010 	beq	40b40 <DWHCIDeviceGetPortSpeed+0x54>
   40afc:	e59f1050 	ldr	r1, [pc, #80]	; 40b54 <DWHCIDeviceGetPortSpeed+0x68>
   40b00:	e28d0004 	add	r0, sp, #4
   40b04:	eb0000f8 	bl	40eec <DWHCIRegister>
   40b08:	e28d0004 	add	r0, sp, #4
   40b0c:	eb000122 	bl	40f9c <DWHCIRegisterRead>
   40b10:	e1a008a0 	lsr	r0, r0, #17
   40b14:	e2000003 	and	r0, r0, #3
   40b18:	e3500003 	cmp	r0, #3
   40b1c:	01a04000 	moveq	r4, r0
   40b20:	159f3030 	ldrne	r3, [pc, #48]	; 40b58 <DWHCIDeviceGetPortSpeed+0x6c>
   40b24:	10830000 	addne	r0, r3, r0
   40b28:	15d04008 	ldrbne	r4, [r0, #8]
   40b2c:	e28d0004 	add	r0, sp, #4
   40b30:	eb00010c 	bl	40f68 <_DWHCIRegister>
   40b34:	e1a00004 	mov	r0, r4
   40b38:	e28dd010 	add	sp, sp, #16
   40b3c:	e8bd8010 	pop	{r4, pc}
   40b40:	e59f0014 	ldr	r0, [pc, #20]	; 40b5c <DWHCIDeviceGetPortSpeed+0x70>
   40b44:	e59f1014 	ldr	r1, [pc, #20]	; 40b60 <DWHCIDeviceGetPortSpeed+0x74>
   40b48:	e59f2014 	ldr	r2, [pc, #20]	; 40b64 <DWHCIDeviceGetPortSpeed+0x78>
   40b4c:	ebffd8bd 	bl	36e48 <uspi_assertion_failed>
   40b50:	eaffffe9 	b	40afc <DWHCIDeviceGetPortSpeed+0x10>
   40b54:	20980440 	.word	0x20980440
   40b58:	00056428 	.word	0x00056428
   40b5c:	00056434 	.word	0x00056434
   40b60:	00056440 	.word	0x00056440
   40b64:	0000051f 	.word	0x0000051f

00040b68 <DWHCIDeviceOvercurrentDetected>:
   40b68:	e92d4010 	push	{r4, lr}
   40b6c:	e3500000 	cmp	r0, #0
   40b70:	e24dd010 	sub	sp, sp, #16
   40b74:	0a00000f 	beq	40bb8 <DWHCIDeviceOvercurrentDetected+0x50>
   40b78:	e28d0004 	add	r0, sp, #4
   40b7c:	e59f1048 	ldr	r1, [pc, #72]	; 40bcc <DWHCIDeviceOvercurrentDetected+0x64>
   40b80:	eb0000d9 	bl	40eec <DWHCIRegister>
   40b84:	e28d0004 	add	r0, sp, #4
   40b88:	eb000103 	bl	40f9c <DWHCIRegisterRead>
   40b8c:	e2104010 	ands	r4, r0, #16
   40b90:	e28d0004 	add	r0, sp, #4
   40b94:	1a000003 	bne	40ba8 <DWHCIDeviceOvercurrentDetected+0x40>
   40b98:	eb0000f2 	bl	40f68 <_DWHCIRegister>
   40b9c:	e1a00004 	mov	r0, r4
   40ba0:	e28dd010 	add	sp, sp, #16
   40ba4:	e8bd8010 	pop	{r4, pc}
   40ba8:	eb0000ee 	bl	40f68 <_DWHCIRegister>
   40bac:	e3a00001 	mov	r0, #1
   40bb0:	e28dd010 	add	sp, sp, #16
   40bb4:	e8bd8010 	pop	{r4, pc}
   40bb8:	e59f0010 	ldr	r0, [pc, #16]	; 40bd0 <DWHCIDeviceOvercurrentDetected+0x68>
   40bbc:	e59f1010 	ldr	r1, [pc, #16]	; 40bd4 <DWHCIDeviceOvercurrentDetected+0x6c>
   40bc0:	e59f2010 	ldr	r2, [pc, #16]	; 40bd8 <DWHCIDeviceOvercurrentDetected+0x70>
   40bc4:	ebffd89f 	bl	36e48 <uspi_assertion_failed>
   40bc8:	eaffffea 	b	40b78 <DWHCIDeviceOvercurrentDetected+0x10>
   40bcc:	20980440 	.word	0x20980440
   40bd0:	00056434 	.word	0x00056434
   40bd4:	00056440 	.word	0x00056440
   40bd8:	0000053f 	.word	0x0000053f

00040bdc <DWHCIDeviceDisableRootPort>:
   40bdc:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   40be0:	e3500000 	cmp	r0, #0
   40be4:	e24dd014 	sub	sp, sp, #20
   40be8:	0a00000d 	beq	40c24 <DWHCIDeviceDisableRootPort+0x48>
   40bec:	e28d0004 	add	r0, sp, #4
   40bf0:	e59f1040 	ldr	r1, [pc, #64]	; 40c38 <DWHCIDeviceDisableRootPort+0x5c>
   40bf4:	eb0000bc 	bl	40eec <DWHCIRegister>
   40bf8:	e28d0004 	add	r0, sp, #4
   40bfc:	eb0000e6 	bl	40f9c <DWHCIRegisterRead>
   40c00:	e3e01a01 	mvn	r1, #4096	; 0x1000
   40c04:	e28d0004 	add	r0, sp, #4
   40c08:	eb000144 	bl	41120 <DWHCIRegisterAnd>
   40c0c:	e28d0004 	add	r0, sp, #4
   40c10:	eb0000f1 	bl	40fdc <DWHCIRegisterWrite>
   40c14:	e28d0004 	add	r0, sp, #4
   40c18:	eb0000d2 	bl	40f68 <_DWHCIRegister>
   40c1c:	e28dd014 	add	sp, sp, #20
   40c20:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
   40c24:	e59f0010 	ldr	r0, [pc, #16]	; 40c3c <DWHCIDeviceDisableRootPort+0x60>
   40c28:	e59f1010 	ldr	r1, [pc, #16]	; 40c40 <DWHCIDeviceDisableRootPort+0x64>
   40c2c:	e59f2010 	ldr	r2, [pc, #16]	; 40c44 <DWHCIDeviceDisableRootPort+0x68>
   40c30:	ebffd884 	bl	36e48 <uspi_assertion_failed>
   40c34:	eaffffec 	b	40bec <DWHCIDeviceDisableRootPort+0x10>
   40c38:	20980440 	.word	0x20980440
   40c3c:	00056434 	.word	0x00056434
   40c40:	00056440 	.word	0x00056440
   40c44:	00000552 	.word	0x00000552

00040c48 <DWHCIDeviceDumpRegister>:
   40c48:	e92d4030 	push	{r4, r5, lr}
   40c4c:	e3500000 	cmp	r0, #0
   40c50:	e24dd01c 	sub	sp, sp, #28
   40c54:	e1a04001 	mov	r4, r1
   40c58:	e1a05002 	mov	r5, r2
   40c5c:	0a000010 	beq	40ca4 <DWHCIDeviceDumpRegister+0x5c>
   40c60:	e1a01005 	mov	r1, r5
   40c64:	e28d000c 	add	r0, sp, #12
   40c68:	eb00009f 	bl	40eec <DWHCIRegister>
   40c6c:	e3a03000 	mov	r3, #0
   40c70:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   40c74:	e28d000c 	add	r0, sp, #12
   40c78:	eb0000c7 	bl	40f9c <DWHCIRegisterRead>
   40c7c:	e3a01004 	mov	r1, #4
   40c80:	e1a03000 	mov	r3, r0
   40c84:	e59f202c 	ldr	r2, [pc, #44]	; 40cb8 <DWHCIDeviceDumpRegister+0x70>
   40c88:	e58d4000 	str	r4, [sp]
   40c8c:	e59f0028 	ldr	r0, [pc, #40]	; 40cbc <DWHCIDeviceDumpRegister+0x74>
   40c90:	ebff8d38 	bl	24178 <LogWrite>
   40c94:	e28d000c 	add	r0, sp, #12
   40c98:	eb0000b2 	bl	40f68 <_DWHCIRegister>
   40c9c:	e28dd01c 	add	sp, sp, #28
   40ca0:	e8bd8030 	pop	{r4, r5, pc}
   40ca4:	e59f0014 	ldr	r0, [pc, #20]	; 40cc0 <DWHCIDeviceDumpRegister+0x78>
   40ca8:	e59f1014 	ldr	r1, [pc, #20]	; 40cc4 <DWHCIDeviceDumpRegister+0x7c>
   40cac:	e59f2014 	ldr	r2, [pc, #20]	; 40cc8 <DWHCIDeviceDumpRegister+0x80>
   40cb0:	ebffd864 	bl	36e48 <uspi_assertion_failed>
   40cb4:	eaffffe9 	b	40c60 <DWHCIDeviceDumpRegister+0x18>
   40cb8:	00056820 	.word	0x00056820
   40cbc:	00056428 	.word	0x00056428
   40cc0:	00056434 	.word	0x00056434
   40cc4:	00056440 	.word	0x00056440
   40cc8:	00000562 	.word	0x00000562

00040ccc <DWHCIDeviceDumpStatus>:
   40ccc:	e92d4070 	push	{r4, r5, r6, lr}
   40cd0:	e2504000 	subs	r4, r0, #0
   40cd4:	e1a06001 	mov	r6, r1
   40cd8:	0a000057 	beq	40e3c <DWHCIDeviceDumpStatus+0x170>
   40cdc:	e1a00004 	mov	r0, r4
   40ce0:	e59f1168 	ldr	r1, [pc, #360]	; 40e50 <DWHCIDeviceDumpStatus+0x184>
   40ce4:	e59f2168 	ldr	r2, [pc, #360]	; 40e54 <DWHCIDeviceDumpStatus+0x188>
   40ce8:	ebffffd6 	bl	40c48 <DWHCIDeviceDumpRegister>
   40cec:	e1a00004 	mov	r0, r4
   40cf0:	e59f1160 	ldr	r1, [pc, #352]	; 40e58 <DWHCIDeviceDumpStatus+0x18c>
   40cf4:	e59f2160 	ldr	r2, [pc, #352]	; 40e5c <DWHCIDeviceDumpStatus+0x190>
   40cf8:	ebffffd2 	bl	40c48 <DWHCIDeviceDumpRegister>
   40cfc:	e1a00004 	mov	r0, r4
   40d00:	e59f1158 	ldr	r1, [pc, #344]	; 40e60 <DWHCIDeviceDumpStatus+0x194>
   40d04:	e59f2158 	ldr	r2, [pc, #344]	; 40e64 <DWHCIDeviceDumpStatus+0x198>
   40d08:	ebffffce 	bl	40c48 <DWHCIDeviceDumpRegister>
   40d0c:	e1a00004 	mov	r0, r4
   40d10:	e59f1150 	ldr	r1, [pc, #336]	; 40e68 <DWHCIDeviceDumpStatus+0x19c>
   40d14:	e59f2150 	ldr	r2, [pc, #336]	; 40e6c <DWHCIDeviceDumpStatus+0x1a0>
   40d18:	ebffffca 	bl	40c48 <DWHCIDeviceDumpRegister>
   40d1c:	e1a00004 	mov	r0, r4
   40d20:	e59f1148 	ldr	r1, [pc, #328]	; 40e70 <DWHCIDeviceDumpStatus+0x1a4>
   40d24:	e59f2148 	ldr	r2, [pc, #328]	; 40e74 <DWHCIDeviceDumpStatus+0x1a8>
   40d28:	ebffffc6 	bl	40c48 <DWHCIDeviceDumpRegister>
   40d2c:	e1a00004 	mov	r0, r4
   40d30:	e59f1140 	ldr	r1, [pc, #320]	; 40e78 <DWHCIDeviceDumpStatus+0x1ac>
   40d34:	e59f2140 	ldr	r2, [pc, #320]	; 40e7c <DWHCIDeviceDumpStatus+0x1b0>
   40d38:	ebffffc2 	bl	40c48 <DWHCIDeviceDumpRegister>
   40d3c:	e1a00004 	mov	r0, r4
   40d40:	e59f1138 	ldr	r1, [pc, #312]	; 40e80 <DWHCIDeviceDumpStatus+0x1b4>
   40d44:	e59f2138 	ldr	r2, [pc, #312]	; 40e84 <DWHCIDeviceDumpStatus+0x1b8>
   40d48:	ebffffbe 	bl	40c48 <DWHCIDeviceDumpRegister>
   40d4c:	e1a00004 	mov	r0, r4
   40d50:	e59f1130 	ldr	r1, [pc, #304]	; 40e88 <DWHCIDeviceDumpStatus+0x1bc>
   40d54:	e59f2130 	ldr	r2, [pc, #304]	; 40e8c <DWHCIDeviceDumpStatus+0x1c0>
   40d58:	ebffffba 	bl	40c48 <DWHCIDeviceDumpRegister>
   40d5c:	e1a00004 	mov	r0, r4
   40d60:	e59f1128 	ldr	r1, [pc, #296]	; 40e90 <DWHCIDeviceDumpStatus+0x1c4>
   40d64:	e59f2128 	ldr	r2, [pc, #296]	; 40e94 <DWHCIDeviceDumpStatus+0x1c8>
   40d68:	ebffffb6 	bl	40c48 <DWHCIDeviceDumpRegister>
   40d6c:	e1a00004 	mov	r0, r4
   40d70:	e59f1120 	ldr	r1, [pc, #288]	; 40e98 <DWHCIDeviceDumpStatus+0x1cc>
   40d74:	e59f2120 	ldr	r2, [pc, #288]	; 40e9c <DWHCIDeviceDumpStatus+0x1d0>
   40d78:	ebffffb2 	bl	40c48 <DWHCIDeviceDumpRegister>
   40d7c:	e1a00004 	mov	r0, r4
   40d80:	e59f1118 	ldr	r1, [pc, #280]	; 40ea0 <DWHCIDeviceDumpStatus+0x1d4>
   40d84:	e59f2118 	ldr	r2, [pc, #280]	; 40ea4 <DWHCIDeviceDumpStatus+0x1d8>
   40d88:	ebffffae 	bl	40c48 <DWHCIDeviceDumpRegister>
   40d8c:	e59f5114 	ldr	r5, [pc, #276]	; 40ea8 <DWHCIDeviceDumpStatus+0x1dc>
   40d90:	e1a00004 	mov	r0, r4
   40d94:	e59f1110 	ldr	r1, [pc, #272]	; 40eac <DWHCIDeviceDumpStatus+0x1e0>
   40d98:	e59f2110 	ldr	r2, [pc, #272]	; 40eb0 <DWHCIDeviceDumpStatus+0x1e4>
   40d9c:	ebffffa9 	bl	40c48 <DWHCIDeviceDumpRegister>
   40da0:	e1a00004 	mov	r0, r4
   40da4:	e59f1108 	ldr	r1, [pc, #264]	; 40eb4 <DWHCIDeviceDumpStatus+0x1e8>
   40da8:	e59f2108 	ldr	r2, [pc, #264]	; 40eb8 <DWHCIDeviceDumpStatus+0x1ec>
   40dac:	ebffffa5 	bl	40c48 <DWHCIDeviceDumpRegister>
   40db0:	e0865005 	add	r5, r6, r5
   40db4:	e1a00004 	mov	r0, r4
   40db8:	e59f10fc 	ldr	r1, [pc, #252]	; 40ebc <DWHCIDeviceDumpStatus+0x1f0>
   40dbc:	e59f20fc 	ldr	r2, [pc, #252]	; 40ec0 <DWHCIDeviceDumpStatus+0x1f4>
   40dc0:	e1a05285 	lsl	r5, r5, #5
   40dc4:	ebffff9f 	bl	40c48 <DWHCIDeviceDumpRegister>
   40dc8:	e1a00004 	mov	r0, r4
   40dcc:	e59f10f0 	ldr	r1, [pc, #240]	; 40ec4 <DWHCIDeviceDumpStatus+0x1f8>
   40dd0:	e59f20f0 	ldr	r2, [pc, #240]	; 40ec8 <DWHCIDeviceDumpStatus+0x1fc>
   40dd4:	ebffff9b 	bl	40c48 <DWHCIDeviceDumpRegister>
   40dd8:	e1a00004 	mov	r0, r4
   40ddc:	e1a02005 	mov	r2, r5
   40de0:	e59f10e4 	ldr	r1, [pc, #228]	; 40ecc <DWHCIDeviceDumpStatus+0x200>
   40de4:	ebffff97 	bl	40c48 <DWHCIDeviceDumpRegister>
   40de8:	e1a00004 	mov	r0, r4
   40dec:	e2852004 	add	r2, r5, #4
   40df0:	e59f10d8 	ldr	r1, [pc, #216]	; 40ed0 <DWHCIDeviceDumpStatus+0x204>
   40df4:	ebffff93 	bl	40c48 <DWHCIDeviceDumpRegister>
   40df8:	e1a00004 	mov	r0, r4
   40dfc:	e2852008 	add	r2, r5, #8
   40e00:	e59f10cc 	ldr	r1, [pc, #204]	; 40ed4 <DWHCIDeviceDumpStatus+0x208>
   40e04:	ebffff8f 	bl	40c48 <DWHCIDeviceDumpRegister>
   40e08:	e1a00004 	mov	r0, r4
   40e0c:	e285200c 	add	r2, r5, #12
   40e10:	e59f10c0 	ldr	r1, [pc, #192]	; 40ed8 <DWHCIDeviceDumpStatus+0x20c>
   40e14:	ebffff8b 	bl	40c48 <DWHCIDeviceDumpRegister>
   40e18:	e1a00004 	mov	r0, r4
   40e1c:	e2852010 	add	r2, r5, #16
   40e20:	e59f10b4 	ldr	r1, [pc, #180]	; 40edc <DWHCIDeviceDumpStatus+0x210>
   40e24:	ebffff87 	bl	40c48 <DWHCIDeviceDumpRegister>
   40e28:	e1a00004 	mov	r0, r4
   40e2c:	e2852014 	add	r2, r5, #20
   40e30:	e59f10a8 	ldr	r1, [pc, #168]	; 40ee0 <DWHCIDeviceDumpStatus+0x214>
   40e34:	e8bd4070 	pop	{r4, r5, r6, lr}
   40e38:	eaffff82 	b	40c48 <DWHCIDeviceDumpRegister>
   40e3c:	e59f00a0 	ldr	r0, [pc, #160]	; 40ee4 <DWHCIDeviceDumpStatus+0x218>
   40e40:	e59f10a0 	ldr	r1, [pc, #160]	; 40ee8 <DWHCIDeviceDumpStatus+0x21c>
   40e44:	e3a02e57 	mov	r2, #1392	; 0x570
   40e48:	ebffd7fe 	bl	36e48 <uspi_assertion_failed>
   40e4c:	eaffffa2 	b	40cdc <DWHCIDeviceDumpStatus+0x10>
   40e50:	0005682c 	.word	0x0005682c
   40e54:	20980000 	.word	0x20980000
   40e58:	00056838 	.word	0x00056838
   40e5c:	20980008 	.word	0x20980008
   40e60:	00056840 	.word	0x00056840
   40e64:	2098000c 	.word	0x2098000c
   40e68:	00056848 	.word	0x00056848
   40e6c:	20980010 	.word	0x20980010
   40e70:	00056850 	.word	0x00056850
   40e74:	20980014 	.word	0x20980014
   40e78:	0005685c 	.word	0x0005685c
   40e7c:	20980018 	.word	0x20980018
   40e80:	00056868 	.word	0x00056868
   40e84:	20980024 	.word	0x20980024
   40e88:	00056874 	.word	0x00056874
   40e8c:	20980028 	.word	0x20980028
   40e90:	00056888 	.word	0x00056888
   40e94:	2098002c 	.word	0x2098002c
   40e98:	00056898 	.word	0x00056898
   40e9c:	20980100 	.word	0x20980100
   40ea0:	000568b0 	.word	0x000568b0
   40ea4:	20980400 	.word	0x20980400
   40ea8:	0104c028 	.word	0x0104c028
   40eac:	000568bc 	.word	0x000568bc
   40eb0:	20980410 	.word	0x20980410
   40eb4:	000568d4 	.word	0x000568d4
   40eb8:	20980414 	.word	0x20980414
   40ebc:	000568e8 	.word	0x000568e8
   40ec0:	20980418 	.word	0x20980418
   40ec4:	00056900 	.word	0x00056900
   40ec8:	20980440 	.word	0x20980440
   40ecc:	0005690c 	.word	0x0005690c
   40ed0:	00056924 	.word	0x00056924
   40ed4:	0005693c 	.word	0x0005693c
   40ed8:	00056950 	.word	0x00056950
   40edc:	00056968 	.word	0x00056968
   40ee0:	00056980 	.word	0x00056980
   40ee4:	00056434 	.word	0x00056434
   40ee8:	00056440 	.word	0x00056440

00040eec <DWHCIRegister>:
   40eec:	e92d4038 	push	{r3, r4, r5, lr}
   40ef0:	e2504000 	subs	r4, r0, #0
   40ef4:	e1a05001 	mov	r5, r1
   40ef8:	0a000002 	beq	40f08 <DWHCIRegister+0x1c>
   40efc:	e3a03000 	mov	r3, #0
   40f00:	e8840028 	stm	r4, {r3, r5}
   40f04:	e8bd8038 	pop	{r3, r4, r5, pc}
   40f08:	e59f000c 	ldr	r0, [pc, #12]	; 40f1c <DWHCIRegister+0x30>
   40f0c:	e59f100c 	ldr	r1, [pc, #12]	; 40f20 <DWHCIRegister+0x34>
   40f10:	e3a0201a 	mov	r2, #26
   40f14:	ebffd7cb 	bl	36e48 <uspi_assertion_failed>
   40f18:	eafffff7 	b	40efc <DWHCIRegister+0x10>
   40f1c:	00056434 	.word	0x00056434
   40f20:	00056998 	.word	0x00056998

00040f24 <DWHCIRegister2>:
   40f24:	e92d4070 	push	{r4, r5, r6, lr}
   40f28:	e2504000 	subs	r4, r0, #0
   40f2c:	e1a06001 	mov	r6, r1
   40f30:	e1a05002 	mov	r5, r2
   40f34:	0a000004 	beq	40f4c <DWHCIRegister2+0x28>
   40f38:	e3a03001 	mov	r3, #1
   40f3c:	e5846004 	str	r6, [r4, #4]
   40f40:	e5845008 	str	r5, [r4, #8]
   40f44:	e5843000 	str	r3, [r4]
   40f48:	e8bd8070 	pop	{r4, r5, r6, pc}
   40f4c:	e59f000c 	ldr	r0, [pc, #12]	; 40f60 <DWHCIRegister2+0x3c>
   40f50:	e59f100c 	ldr	r1, [pc, #12]	; 40f64 <DWHCIRegister2+0x40>
   40f54:	e3a02021 	mov	r2, #33	; 0x21
   40f58:	ebffd7ba 	bl	36e48 <uspi_assertion_failed>
   40f5c:	eafffff5 	b	40f38 <DWHCIRegister2+0x14>
   40f60:	00056434 	.word	0x00056434
   40f64:	00056998 	.word	0x00056998

00040f68 <_DWHCIRegister>:
   40f68:	e92d4010 	push	{r4, lr}
   40f6c:	e2504000 	subs	r4, r0, #0
   40f70:	0a000002 	beq	40f80 <_DWHCIRegister+0x18>
   40f74:	e3a03000 	mov	r3, #0
   40f78:	e5843000 	str	r3, [r4]
   40f7c:	e8bd8010 	pop	{r4, pc}
   40f80:	e59f000c 	ldr	r0, [pc, #12]	; 40f94 <_DWHCIRegister+0x2c>
   40f84:	e59f100c 	ldr	r1, [pc, #12]	; 40f98 <_DWHCIRegister+0x30>
   40f88:	e3a02029 	mov	r2, #41	; 0x29
   40f8c:	ebffd7ad 	bl	36e48 <uspi_assertion_failed>
   40f90:	eafffff7 	b	40f74 <_DWHCIRegister+0xc>
   40f94:	00056434 	.word	0x00056434
   40f98:	00056998 	.word	0x00056998

00040f9c <DWHCIRegisterRead>:
   40f9c:	e92d4010 	push	{r4, lr}
   40fa0:	e2504000 	subs	r4, r0, #0
   40fa4:	0a000005 	beq	40fc0 <DWHCIRegisterRead+0x24>
   40fa8:	e3a03001 	mov	r3, #1
   40fac:	e5942004 	ldr	r2, [r4, #4]
   40fb0:	e5920000 	ldr	r0, [r2]
   40fb4:	e5843000 	str	r3, [r4]
   40fb8:	e5840008 	str	r0, [r4, #8]
   40fbc:	e8bd8010 	pop	{r4, pc}
   40fc0:	e59f000c 	ldr	r0, [pc, #12]	; 40fd4 <DWHCIRegisterRead+0x38>
   40fc4:	e59f100c 	ldr	r1, [pc, #12]	; 40fd8 <DWHCIRegisterRead+0x3c>
   40fc8:	e3a0202f 	mov	r2, #47	; 0x2f
   40fcc:	ebffd79d 	bl	36e48 <uspi_assertion_failed>
   40fd0:	eafffff4 	b	40fa8 <DWHCIRegisterRead+0xc>
   40fd4:	00056434 	.word	0x00056434
   40fd8:	00056998 	.word	0x00056998

00040fdc <DWHCIRegisterWrite>:
   40fdc:	e92d4010 	push	{r4, lr}
   40fe0:	e2504000 	subs	r4, r0, #0
   40fe4:	0a00000a 	beq	41014 <DWHCIRegisterWrite+0x38>
   40fe8:	e5943000 	ldr	r3, [r4]
   40fec:	e3530000 	cmp	r3, #0
   40ff0:	1a000003 	bne	41004 <DWHCIRegisterWrite+0x28>
   40ff4:	e59f002c 	ldr	r0, [pc, #44]	; 41028 <DWHCIRegisterWrite+0x4c>
   40ff8:	e59f102c 	ldr	r1, [pc, #44]	; 4102c <DWHCIRegisterWrite+0x50>
   40ffc:	e3a02039 	mov	r2, #57	; 0x39
   41000:	ebffd790 	bl	36e48 <uspi_assertion_failed>
   41004:	e5943004 	ldr	r3, [r4, #4]
   41008:	e5942008 	ldr	r2, [r4, #8]
   4100c:	e5832000 	str	r2, [r3]
   41010:	e8bd8010 	pop	{r4, pc}
   41014:	e59f0014 	ldr	r0, [pc, #20]	; 41030 <DWHCIRegisterWrite+0x54>
   41018:	e59f100c 	ldr	r1, [pc, #12]	; 4102c <DWHCIRegisterWrite+0x50>
   4101c:	e3a02038 	mov	r2, #56	; 0x38
   41020:	ebffd788 	bl	36e48 <uspi_assertion_failed>
   41024:	eaffffef 	b	40fe8 <DWHCIRegisterWrite+0xc>
   41028:	000569a8 	.word	0x000569a8
   4102c:	00056998 	.word	0x00056998
   41030:	00056434 	.word	0x00056434

00041034 <DWHCIRegisterGet>:
   41034:	e92d4010 	push	{r4, lr}
   41038:	e2504000 	subs	r4, r0, #0
   4103c:	0a000008 	beq	41064 <DWHCIRegisterGet+0x30>
   41040:	e5943000 	ldr	r3, [r4]
   41044:	e3530000 	cmp	r3, #0
   41048:	1a000003 	bne	4105c <DWHCIRegisterGet+0x28>
   4104c:	e59f0024 	ldr	r0, [pc, #36]	; 41078 <DWHCIRegisterGet+0x44>
   41050:	e59f1024 	ldr	r1, [pc, #36]	; 4107c <DWHCIRegisterGet+0x48>
   41054:	e3a02040 	mov	r2, #64	; 0x40
   41058:	ebffd77a 	bl	36e48 <uspi_assertion_failed>
   4105c:	e5940008 	ldr	r0, [r4, #8]
   41060:	e8bd8010 	pop	{r4, pc}
   41064:	e59f0014 	ldr	r0, [pc, #20]	; 41080 <DWHCIRegisterGet+0x4c>
   41068:	e59f100c 	ldr	r1, [pc, #12]	; 4107c <DWHCIRegisterGet+0x48>
   4106c:	e3a0203f 	mov	r2, #63	; 0x3f
   41070:	ebffd774 	bl	36e48 <uspi_assertion_failed>
   41074:	eafffff1 	b	41040 <DWHCIRegisterGet+0xc>
   41078:	000569a8 	.word	0x000569a8
   4107c:	00056998 	.word	0x00056998
   41080:	00056434 	.word	0x00056434

00041084 <DWHCIRegisterSet>:
   41084:	e92d4038 	push	{r3, r4, r5, lr}
   41088:	e2504000 	subs	r4, r0, #0
   4108c:	e1a05001 	mov	r5, r1
   41090:	0a000003 	beq	410a4 <DWHCIRegisterSet+0x20>
   41094:	e3a03001 	mov	r3, #1
   41098:	e5845008 	str	r5, [r4, #8]
   4109c:	e5843000 	str	r3, [r4]
   410a0:	e8bd8038 	pop	{r3, r4, r5, pc}
   410a4:	e59f000c 	ldr	r0, [pc, #12]	; 410b8 <DWHCIRegisterSet+0x34>
   410a8:	e59f100c 	ldr	r1, [pc, #12]	; 410bc <DWHCIRegisterSet+0x38>
   410ac:	e3a02046 	mov	r2, #70	; 0x46
   410b0:	ebffd764 	bl	36e48 <uspi_assertion_failed>
   410b4:	eafffff6 	b	41094 <DWHCIRegisterSet+0x10>
   410b8:	00056434 	.word	0x00056434
   410bc:	00056998 	.word	0x00056998

000410c0 <DWHCIRegisterIsSet>:
   410c0:	e92d4038 	push	{r3, r4, r5, lr}
   410c4:	e2504000 	subs	r4, r0, #0
   410c8:	e1a05001 	mov	r5, r1
   410cc:	0a00000b 	beq	41100 <DWHCIRegisterIsSet+0x40>
   410d0:	e5943000 	ldr	r3, [r4]
   410d4:	e3530000 	cmp	r3, #0
   410d8:	1a000003 	bne	410ec <DWHCIRegisterIsSet+0x2c>
   410dc:	e59f0030 	ldr	r0, [pc, #48]	; 41114 <DWHCIRegisterIsSet+0x54>
   410e0:	e59f1030 	ldr	r1, [pc, #48]	; 41118 <DWHCIRegisterIsSet+0x58>
   410e4:	e3a0204e 	mov	r2, #78	; 0x4e
   410e8:	ebffd756 	bl	36e48 <uspi_assertion_failed>
   410ec:	e5943008 	ldr	r3, [r4, #8]
   410f0:	e1150003 	tst	r5, r3
   410f4:	13a00001 	movne	r0, #1
   410f8:	03a00000 	moveq	r0, #0
   410fc:	e8bd8038 	pop	{r3, r4, r5, pc}
   41100:	e59f0014 	ldr	r0, [pc, #20]	; 4111c <DWHCIRegisterIsSet+0x5c>
   41104:	e59f100c 	ldr	r1, [pc, #12]	; 41118 <DWHCIRegisterIsSet+0x58>
   41108:	e3a0204d 	mov	r2, #77	; 0x4d
   4110c:	ebffd74d 	bl	36e48 <uspi_assertion_failed>
   41110:	eaffffee 	b	410d0 <DWHCIRegisterIsSet+0x10>
   41114:	000569a8 	.word	0x000569a8
   41118:	00056998 	.word	0x00056998
   4111c:	00056434 	.word	0x00056434

00041120 <DWHCIRegisterAnd>:
   41120:	e92d4038 	push	{r3, r4, r5, lr}
   41124:	e2504000 	subs	r4, r0, #0
   41128:	e1a05001 	mov	r5, r1
   4112c:	0a00000a 	beq	4115c <DWHCIRegisterAnd+0x3c>
   41130:	e5943000 	ldr	r3, [r4]
   41134:	e3530000 	cmp	r3, #0
   41138:	1a000003 	bne	4114c <DWHCIRegisterAnd+0x2c>
   4113c:	e59f002c 	ldr	r0, [pc, #44]	; 41170 <DWHCIRegisterAnd+0x50>
   41140:	e59f102c 	ldr	r1, [pc, #44]	; 41174 <DWHCIRegisterAnd+0x54>
   41144:	e3a02055 	mov	r2, #85	; 0x55
   41148:	ebffd73e 	bl	36e48 <uspi_assertion_failed>
   4114c:	e5943008 	ldr	r3, [r4, #8]
   41150:	e0055003 	and	r5, r5, r3
   41154:	e5845008 	str	r5, [r4, #8]
   41158:	e8bd8038 	pop	{r3, r4, r5, pc}
   4115c:	e59f0014 	ldr	r0, [pc, #20]	; 41178 <DWHCIRegisterAnd+0x58>
   41160:	e59f100c 	ldr	r1, [pc, #12]	; 41174 <DWHCIRegisterAnd+0x54>
   41164:	e3a02054 	mov	r2, #84	; 0x54
   41168:	ebffd736 	bl	36e48 <uspi_assertion_failed>
   4116c:	eaffffef 	b	41130 <DWHCIRegisterAnd+0x10>
   41170:	000569a8 	.word	0x000569a8
   41174:	00056998 	.word	0x00056998
   41178:	00056434 	.word	0x00056434

0004117c <DWHCIRegisterOr>:
   4117c:	e92d4038 	push	{r3, r4, r5, lr}
   41180:	e2504000 	subs	r4, r0, #0
   41184:	e1a05001 	mov	r5, r1
   41188:	0a00000a 	beq	411b8 <DWHCIRegisterOr+0x3c>
   4118c:	e5943000 	ldr	r3, [r4]
   41190:	e3530000 	cmp	r3, #0
   41194:	1a000003 	bne	411a8 <DWHCIRegisterOr+0x2c>
   41198:	e59f002c 	ldr	r0, [pc, #44]	; 411cc <DWHCIRegisterOr+0x50>
   4119c:	e59f102c 	ldr	r1, [pc, #44]	; 411d0 <DWHCIRegisterOr+0x54>
   411a0:	e3a0205c 	mov	r2, #92	; 0x5c
   411a4:	ebffd727 	bl	36e48 <uspi_assertion_failed>
   411a8:	e5943008 	ldr	r3, [r4, #8]
   411ac:	e1835005 	orr	r5, r3, r5
   411b0:	e5845008 	str	r5, [r4, #8]
   411b4:	e8bd8038 	pop	{r3, r4, r5, pc}
   411b8:	e59f0014 	ldr	r0, [pc, #20]	; 411d4 <DWHCIRegisterOr+0x58>
   411bc:	e59f100c 	ldr	r1, [pc, #12]	; 411d0 <DWHCIRegisterOr+0x54>
   411c0:	e3a0205b 	mov	r2, #91	; 0x5b
   411c4:	ebffd71f 	bl	36e48 <uspi_assertion_failed>
   411c8:	eaffffef 	b	4118c <DWHCIRegisterOr+0x10>
   411cc:	000569a8 	.word	0x000569a8
   411d0:	00056998 	.word	0x00056998
   411d4:	00056434 	.word	0x00056434

000411d8 <DWHCIRegisterClearBit>:
   411d8:	e92d4038 	push	{r3, r4, r5, lr}
   411dc:	e2504000 	subs	r4, r0, #0
   411e0:	e1a05001 	mov	r5, r1
   411e4:	0a000012 	beq	41234 <DWHCIRegisterClearBit+0x5c>
   411e8:	e5943000 	ldr	r3, [r4]
   411ec:	e3530000 	cmp	r3, #0
   411f0:	0a00000a 	beq	41220 <DWHCIRegisterClearBit+0x48>
   411f4:	e355001f 	cmp	r5, #31
   411f8:	9a000003 	bls	4120c <DWHCIRegisterClearBit+0x34>
   411fc:	e59f0044 	ldr	r0, [pc, #68]	; 41248 <DWHCIRegisterClearBit+0x70>
   41200:	e59f1044 	ldr	r1, [pc, #68]	; 4124c <DWHCIRegisterClearBit+0x74>
   41204:	e3a02064 	mov	r2, #100	; 0x64
   41208:	ebffd70e 	bl	36e48 <uspi_assertion_failed>
   4120c:	e3a01001 	mov	r1, #1
   41210:	e5943008 	ldr	r3, [r4, #8]
   41214:	e1c31511 	bic	r1, r3, r1, lsl r5
   41218:	e5841008 	str	r1, [r4, #8]
   4121c:	e8bd8038 	pop	{r3, r4, r5, pc}
   41220:	e59f0028 	ldr	r0, [pc, #40]	; 41250 <DWHCIRegisterClearBit+0x78>
   41224:	e59f1020 	ldr	r1, [pc, #32]	; 4124c <DWHCIRegisterClearBit+0x74>
   41228:	e3a02063 	mov	r2, #99	; 0x63
   4122c:	ebffd705 	bl	36e48 <uspi_assertion_failed>
   41230:	eaffffef 	b	411f4 <DWHCIRegisterClearBit+0x1c>
   41234:	e59f0018 	ldr	r0, [pc, #24]	; 41254 <DWHCIRegisterClearBit+0x7c>
   41238:	e59f100c 	ldr	r1, [pc, #12]	; 4124c <DWHCIRegisterClearBit+0x74>
   4123c:	e3a02062 	mov	r2, #98	; 0x62
   41240:	ebffd700 	bl	36e48 <uspi_assertion_failed>
   41244:	eaffffe7 	b	411e8 <DWHCIRegisterClearBit+0x10>
   41248:	000569b8 	.word	0x000569b8
   4124c:	00056998 	.word	0x00056998
   41250:	000569a8 	.word	0x000569a8
   41254:	00056434 	.word	0x00056434

00041258 <DWHCIRegisterSetBit>:
   41258:	e92d4038 	push	{r3, r4, r5, lr}
   4125c:	e2504000 	subs	r4, r0, #0
   41260:	e1a05001 	mov	r5, r1
   41264:	0a000012 	beq	412b4 <DWHCIRegisterSetBit+0x5c>
   41268:	e5943000 	ldr	r3, [r4]
   4126c:	e3530000 	cmp	r3, #0
   41270:	0a00000a 	beq	412a0 <DWHCIRegisterSetBit+0x48>
   41274:	e355001f 	cmp	r5, #31
   41278:	9a000003 	bls	4128c <DWHCIRegisterSetBit+0x34>
   4127c:	e59f0044 	ldr	r0, [pc, #68]	; 412c8 <DWHCIRegisterSetBit+0x70>
   41280:	e59f1044 	ldr	r1, [pc, #68]	; 412cc <DWHCIRegisterSetBit+0x74>
   41284:	e3a0206c 	mov	r2, #108	; 0x6c
   41288:	ebffd6ee 	bl	36e48 <uspi_assertion_failed>
   4128c:	e3a01001 	mov	r1, #1
   41290:	e5943008 	ldr	r3, [r4, #8]
   41294:	e1831511 	orr	r1, r3, r1, lsl r5
   41298:	e5841008 	str	r1, [r4, #8]
   4129c:	e8bd8038 	pop	{r3, r4, r5, pc}
   412a0:	e59f0028 	ldr	r0, [pc, #40]	; 412d0 <DWHCIRegisterSetBit+0x78>
   412a4:	e59f1020 	ldr	r1, [pc, #32]	; 412cc <DWHCIRegisterSetBit+0x74>
   412a8:	e3a0206b 	mov	r2, #107	; 0x6b
   412ac:	ebffd6e5 	bl	36e48 <uspi_assertion_failed>
   412b0:	eaffffef 	b	41274 <DWHCIRegisterSetBit+0x1c>
   412b4:	e59f0018 	ldr	r0, [pc, #24]	; 412d4 <DWHCIRegisterSetBit+0x7c>
   412b8:	e59f100c 	ldr	r1, [pc, #12]	; 412cc <DWHCIRegisterSetBit+0x74>
   412bc:	e3a0206a 	mov	r2, #106	; 0x6a
   412c0:	ebffd6e0 	bl	36e48 <uspi_assertion_failed>
   412c4:	eaffffe7 	b	41268 <DWHCIRegisterSetBit+0x10>
   412c8:	000569b8 	.word	0x000569b8
   412cc:	00056998 	.word	0x00056998
   412d0:	000569a8 	.word	0x000569a8
   412d4:	00056434 	.word	0x00056434

000412d8 <DWHCIRegisterClearAll>:
   412d8:	e92d4010 	push	{r4, lr}
   412dc:	e2504000 	subs	r4, r0, #0
   412e0:	0a000004 	beq	412f8 <DWHCIRegisterClearAll+0x20>
   412e4:	e3a02000 	mov	r2, #0
   412e8:	e3a03001 	mov	r3, #1
   412ec:	e5842008 	str	r2, [r4, #8]
   412f0:	e5843000 	str	r3, [r4]
   412f4:	e8bd8010 	pop	{r4, pc}
   412f8:	e59f000c 	ldr	r0, [pc, #12]	; 4130c <DWHCIRegisterClearAll+0x34>
   412fc:	e59f100c 	ldr	r1, [pc, #12]	; 41310 <DWHCIRegisterClearAll+0x38>
   41300:	e3a02072 	mov	r2, #114	; 0x72
   41304:	ebffd6cf 	bl	36e48 <uspi_assertion_failed>
   41308:	eafffff5 	b	412e4 <DWHCIRegisterClearAll+0xc>
   4130c:	00056434 	.word	0x00056434
   41310:	00056998 	.word	0x00056998

00041314 <DWHCIRegisterSetAll>:
   41314:	e92d4010 	push	{r4, lr}
   41318:	e2504000 	subs	r4, r0, #0
   4131c:	0a000004 	beq	41334 <DWHCIRegisterSetAll+0x20>
   41320:	e3e02000 	mvn	r2, #0
   41324:	e3a03001 	mov	r3, #1
   41328:	e5842008 	str	r2, [r4, #8]
   4132c:	e5843000 	str	r3, [r4]
   41330:	e8bd8010 	pop	{r4, pc}
   41334:	e59f000c 	ldr	r0, [pc, #12]	; 41348 <DWHCIRegisterSetAll+0x34>
   41338:	e59f100c 	ldr	r1, [pc, #12]	; 4134c <DWHCIRegisterSetAll+0x38>
   4133c:	e3a02079 	mov	r2, #121	; 0x79
   41340:	ebffd6c0 	bl	36e48 <uspi_assertion_failed>
   41344:	eafffff5 	b	41320 <DWHCIRegisterSetAll+0xc>
   41348:	00056434 	.word	0x00056434
   4134c:	00056998 	.word	0x00056998

00041350 <DWHCIRegisterDump>:
   41350:	e92d4010 	push	{r4, lr}
   41354:	e2504000 	subs	r4, r0, #0
   41358:	e24dd008 	sub	sp, sp, #8
   4135c:	0a000015 	beq	413b8 <DWHCIRegisterDump+0x68>
   41360:	e5943000 	ldr	r3, [r4]
   41364:	e3530000 	cmp	r3, #0
   41368:	e5943004 	ldr	r3, [r4, #4]
   4136c:	1a000007 	bne	41390 <DWHCIRegisterDump+0x40>
   41370:	e3a01004 	mov	r1, #4
   41374:	e59f0050 	ldr	r0, [pc, #80]	; 413cc <DWHCIRegisterDump+0x7c>
   41378:	e1a03a03 	lsl	r3, r3, #20
   4137c:	e59f204c 	ldr	r2, [pc, #76]	; 413d0 <DWHCIRegisterDump+0x80>
   41380:	e1a03a23 	lsr	r3, r3, #20
   41384:	e28dd008 	add	sp, sp, #8
   41388:	e8bd4010 	pop	{r4, lr}
   4138c:	eaff8b79 	b	24178 <LogWrite>
   41390:	e5942008 	ldr	r2, [r4, #8]
   41394:	e1a03a03 	lsl	r3, r3, #20
   41398:	e58d2000 	str	r2, [sp]
   4139c:	e1a03a23 	lsr	r3, r3, #20
   413a0:	e59f0024 	ldr	r0, [pc, #36]	; 413cc <DWHCIRegisterDump+0x7c>
   413a4:	e3a01004 	mov	r1, #4
   413a8:	e59f2024 	ldr	r2, [pc, #36]	; 413d4 <DWHCIRegisterDump+0x84>
   413ac:	ebff8b71 	bl	24178 <LogWrite>
   413b0:	e28dd008 	add	sp, sp, #8
   413b4:	e8bd8010 	pop	{r4, pc}
   413b8:	e59f0018 	ldr	r0, [pc, #24]	; 413d8 <DWHCIRegisterDump+0x88>
   413bc:	e59f1018 	ldr	r1, [pc, #24]	; 413dc <DWHCIRegisterDump+0x8c>
   413c0:	e3a02082 	mov	r2, #130	; 0x82
   413c4:	ebffd69f 	bl	36e48 <uspi_assertion_failed>
   413c8:	eaffffe4 	b	41360 <DWHCIRegisterDump+0x10>
   413cc:	000569dc 	.word	0x000569dc
   413d0:	00056a00 	.word	0x00056a00
   413d4:	000569e4 	.word	0x000569e4
   413d8:	00056434 	.word	0x00056434
   413dc:	00056998 	.word	0x00056998

000413e0 <_DWHCITransferStageData>:
   413e0:	e92d4010 	push	{r4, lr}
   413e4:	e2504000 	subs	r4, r0, #0
   413e8:	0a00000b 	beq	4141c <_DWHCITransferStageData+0x3c>
   413ec:	e5943050 	ldr	r3, [r4, #80]	; 0x50
   413f0:	e3530000 	cmp	r3, #0
   413f4:	0a000002 	beq	41404 <_DWHCITransferStageData+0x24>
   413f8:	e5943054 	ldr	r3, [r4, #84]	; 0x54
   413fc:	e2840054 	add	r0, r4, #84	; 0x54
   41400:	e12fff33 	blx	r3
   41404:	e3a03000 	mov	r3, #0
   41408:	e584304c 	str	r3, [r4, #76]	; 0x4c
   4140c:	e584301c 	str	r3, [r4, #28]
   41410:	e5843018 	str	r3, [r4, #24]
   41414:	e5843004 	str	r3, [r4, #4]
   41418:	e8bd8010 	pop	{r4, pc}
   4141c:	e59f000c 	ldr	r0, [pc, #12]	; 41430 <_DWHCITransferStageData+0x50>
   41420:	e59f100c 	ldr	r1, [pc, #12]	; 41434 <_DWHCITransferStageData+0x54>
   41424:	e3a02080 	mov	r2, #128	; 0x80
   41428:	ebffd686 	bl	36e48 <uspi_assertion_failed>
   4142c:	eaffffee 	b	413ec <_DWHCITransferStageData+0xc>
   41430:	00056434 	.word	0x00056434
   41434:	00056a20 	.word	0x00056a20

00041438 <DWHCITransferStageDataTransactionComplete>:
   41438:	e92d4070 	push	{r4, r5, r6, lr}
   4143c:	e2504000 	subs	r4, r0, #0
   41440:	e24dd008 	sub	sp, sp, #8
   41444:	e1a06001 	mov	r6, r1
   41448:	e1a05002 	mov	r5, r2
   4144c:	0a000050 	beq	41594 <DWHCITransferStageDataTransactionComplete+0x15c>
   41450:	e59f2158 	ldr	r2, [pc, #344]	; 415b0 <DWHCITransferStageDataTransactionComplete+0x178>
   41454:	e5846044 	str	r6, [r4, #68]	; 0x44
   41458:	e0022006 	and	r2, r2, r6
   4145c:	e3520000 	cmp	r2, #0
   41460:	1a00001e 	bne	414e0 <DWHCITransferStageDataTransactionComplete+0xa8>
   41464:	e5940010 	ldr	r0, [r4, #16]
   41468:	e5941034 	ldr	r1, [r4, #52]	; 0x34
   4146c:	e5942030 	ldr	r2, [r4, #48]	; 0x30
   41470:	e3500000 	cmp	r0, #0
   41474:	e0655001 	rsb	r5, r5, r1
   41478:	e0633002 	rsb	r3, r3, r2
   4147c:	1a000019 	bne	414e8 <DWHCITransferStageDataTransactionComplete+0xb0>
   41480:	e5941038 	ldr	r1, [r4, #56]	; 0x38
   41484:	e594204c 	ldr	r2, [r4, #76]	; 0x4c
   41488:	e0811003 	add	r1, r1, r3
   4148c:	e0823003 	add	r3, r2, r3
   41490:	e5841038 	str	r1, [r4, #56]	; 0x38
   41494:	e584304c 	str	r3, [r4, #76]	; 0x4c
   41498:	e594001c 	ldr	r0, [r4, #28]
   4149c:	e1a01005 	mov	r1, r5
   414a0:	e594200c 	ldr	r2, [r4, #12]
   414a4:	eb000994 	bl	43afc <USBEndpointSkipPID>
   414a8:	e594302c 	ldr	r3, [r4, #44]	; 0x2c
   414ac:	e1550003 	cmp	r5, r3
   414b0:	8a000029 	bhi	4155c <DWHCITransferStageDataTransactionComplete+0x124>
   414b4:	e5940028 	ldr	r0, [r4, #40]	; 0x28
   414b8:	e5941038 	ldr	r1, [r4, #56]	; 0x38
   414bc:	e594c030 	ldr	ip, [r4, #48]	; 0x30
   414c0:	e0612000 	rsb	r2, r1, r0
   414c4:	e0655003 	rsb	r5, r5, r3
   414c8:	e152000c 	cmp	r2, ip
   414cc:	e584502c 	str	r5, [r4, #44]	; 0x2c
   414d0:	2a000002 	bcs	414e0 <DWHCITransferStageDataTransactionComplete+0xa8>
   414d4:	e1500001 	cmp	r0, r1
   414d8:	3a000025 	bcc	41574 <DWHCITransferStageDataTransactionComplete+0x13c>
   414dc:	e5842030 	str	r2, [r4, #48]	; 0x30
   414e0:	e28dd008 	add	sp, sp, #8
   414e4:	e8bd8070 	pop	{r4, r5, r6, pc}
   414e8:	e5941014 	ldr	r1, [r4, #20]
   414ec:	e2911000 	adds	r1, r1, #0
   414f0:	13a01001 	movne	r1, #1
   414f4:	e3530000 	cmp	r3, #0
   414f8:	13a00000 	movne	r0, #0
   414fc:	02010001 	andeq	r0, r1, #1
   41500:	e3500000 	cmp	r0, #0
   41504:	0a000009 	beq	41530 <DWHCITransferStageDataTransactionComplete+0xf8>
   41508:	e3520000 	cmp	r2, #0
   4150c:	15942024 	ldrne	r2, [r4, #36]	; 0x24
   41510:	10020592 	mulne	r2, r2, r5
   41514:	e5941038 	ldr	r1, [r4, #56]	; 0x38
   41518:	e594304c 	ldr	r3, [r4, #76]	; 0x4c
   4151c:	e0811002 	add	r1, r1, r2
   41520:	e0832002 	add	r2, r3, r2
   41524:	e5841038 	str	r1, [r4, #56]	; 0x38
   41528:	e584204c 	str	r2, [r4, #76]	; 0x4c
   4152c:	eaffffd9 	b	41498 <DWHCITransferStageDataTransactionComplete+0x60>
   41530:	e5940038 	ldr	r0, [r4, #56]	; 0x38
   41534:	e594204c 	ldr	r2, [r4, #76]	; 0x4c
   41538:	e3510000 	cmp	r1, #0
   4153c:	e0801003 	add	r1, r0, r3
   41540:	e0823003 	add	r3, r2, r3
   41544:	e5841038 	str	r1, [r4, #56]	; 0x38
   41548:	e584304c 	str	r3, [r4, #76]	; 0x4c
   4154c:	1affffd1 	bne	41498 <DWHCITransferStageDataTransactionComplete+0x60>
   41550:	e594302c 	ldr	r3, [r4, #44]	; 0x2c
   41554:	e1550003 	cmp	r5, r3
   41558:	9affffd5 	bls	414b4 <DWHCITransferStageDataTransactionComplete+0x7c>
   4155c:	e59f0050 	ldr	r0, [pc, #80]	; 415b4 <DWHCITransferStageDataTransactionComplete+0x17c>
   41560:	e59f1050 	ldr	r1, [pc, #80]	; 415b8 <DWHCITransferStageDataTransactionComplete+0x180>
   41564:	e3a020b9 	mov	r2, #185	; 0xb9
   41568:	ebffd636 	bl	36e48 <uspi_assertion_failed>
   4156c:	e594302c 	ldr	r3, [r4, #44]	; 0x2c
   41570:	eaffffcf 	b	414b4 <DWHCITransferStageDataTransactionComplete+0x7c>
   41574:	e3a020bf 	mov	r2, #191	; 0xbf
   41578:	e59f003c 	ldr	r0, [pc, #60]	; 415bc <DWHCITransferStageDataTransactionComplete+0x184>
   4157c:	e59f1034 	ldr	r1, [pc, #52]	; 415b8 <DWHCITransferStageDataTransactionComplete+0x180>
   41580:	ebffd630 	bl	36e48 <uspi_assertion_failed>
   41584:	e5943028 	ldr	r3, [r4, #40]	; 0x28
   41588:	e5942038 	ldr	r2, [r4, #56]	; 0x38
   4158c:	e0622003 	rsb	r2, r2, r3
   41590:	eaffffd1 	b	414dc <DWHCITransferStageDataTransactionComplete+0xa4>
   41594:	e59f0024 	ldr	r0, [pc, #36]	; 415c0 <DWHCITransferStageDataTransactionComplete+0x188>
   41598:	e59f1018 	ldr	r1, [pc, #24]	; 415b8 <DWHCITransferStageDataTransactionComplete+0x180>
   4159c:	e3a02090 	mov	r2, #144	; 0x90
   415a0:	e58d3004 	str	r3, [sp, #4]
   415a4:	ebffd627 	bl	36e48 <uspi_assertion_failed>
   415a8:	e59d3004 	ldr	r3, [sp, #4]
   415ac:	eaffffa7 	b	41450 <DWHCITransferStageDataTransactionComplete+0x18>
   415b0:	000007dc 	.word	0x000007dc
   415b4:	00056a38 	.word	0x00056a38
   415b8:	00056a20 	.word	0x00056a20
   415bc:	00056a60 	.word	0x00056a60
   415c0:	00056434 	.word	0x00056434

000415c4 <DWHCITransferStageDataSetSplitComplete>:
   415c4:	e92d4038 	push	{r3, r4, r5, lr}
   415c8:	e2504000 	subs	r4, r0, #0
   415cc:	e1a05001 	mov	r5, r1
   415d0:	0a000008 	beq	415f8 <DWHCITransferStageDataSetSplitComplete+0x34>
   415d4:	e5943010 	ldr	r3, [r4, #16]
   415d8:	e3530000 	cmp	r3, #0
   415dc:	1a000003 	bne	415f0 <DWHCITransferStageDataSetSplitComplete+0x2c>
   415e0:	e59f0024 	ldr	r0, [pc, #36]	; 4160c <DWHCITransferStageDataSetSplitComplete+0x48>
   415e4:	e59f1024 	ldr	r1, [pc, #36]	; 41610 <DWHCITransferStageDataSetSplitComplete+0x4c>
   415e8:	e3a020c7 	mov	r2, #199	; 0xc7
   415ec:	ebffd615 	bl	36e48 <uspi_assertion_failed>
   415f0:	e5845014 	str	r5, [r4, #20]
   415f4:	e8bd8038 	pop	{r3, r4, r5, pc}
   415f8:	e59f0014 	ldr	r0, [pc, #20]	; 41614 <DWHCITransferStageDataSetSplitComplete+0x50>
   415fc:	e59f100c 	ldr	r1, [pc, #12]	; 41610 <DWHCITransferStageDataSetSplitComplete+0x4c>
   41600:	e3a020c6 	mov	r2, #198	; 0xc6
   41604:	ebffd60f 	bl	36e48 <uspi_assertion_failed>
   41608:	eafffff1 	b	415d4 <DWHCITransferStageDataSetSplitComplete+0x10>
   4160c:	00056a9c 	.word	0x00056a9c
   41610:	00056a20 	.word	0x00056a20
   41614:	00056434 	.word	0x00056434

00041618 <DWHCITransferStageDataSetState>:
   41618:	e92d4038 	push	{r3, r4, r5, lr}
   4161c:	e2504000 	subs	r4, r0, #0
   41620:	e1a05001 	mov	r5, r1
   41624:	0a000001 	beq	41630 <DWHCITransferStageDataSetState+0x18>
   41628:	e584503c 	str	r5, [r4, #60]	; 0x3c
   4162c:	e8bd8038 	pop	{r3, r4, r5, pc}
   41630:	e59f0010 	ldr	r0, [pc, #16]	; 41648 <DWHCITransferStageDataSetState+0x30>
   41634:	e59f1010 	ldr	r1, [pc, #16]	; 4164c <DWHCITransferStageDataSetState+0x34>
   41638:	e3a020ce 	mov	r2, #206	; 0xce
   4163c:	ebffd601 	bl	36e48 <uspi_assertion_failed>
   41640:	e584503c 	str	r5, [r4, #60]	; 0x3c
   41644:	e8bd8038 	pop	{r3, r4, r5, pc}
   41648:	00056434 	.word	0x00056434
   4164c:	00056a20 	.word	0x00056a20

00041650 <DWHCITransferStageDataGetState>:
   41650:	e92d4010 	push	{r4, lr}
   41654:	e2504000 	subs	r4, r0, #0
   41658:	0a000001 	beq	41664 <DWHCITransferStageDataGetState+0x14>
   4165c:	e594003c 	ldr	r0, [r4, #60]	; 0x3c
   41660:	e8bd8010 	pop	{r4, pc}
   41664:	e59f0010 	ldr	r0, [pc, #16]	; 4167c <DWHCITransferStageDataGetState+0x2c>
   41668:	e59f1010 	ldr	r1, [pc, #16]	; 41680 <DWHCITransferStageDataGetState+0x30>
   4166c:	e3a020d4 	mov	r2, #212	; 0xd4
   41670:	ebffd5f4 	bl	36e48 <uspi_assertion_failed>
   41674:	e594003c 	ldr	r0, [r4, #60]	; 0x3c
   41678:	e8bd8010 	pop	{r4, pc}
   4167c:	00056434 	.word	0x00056434
   41680:	00056a20 	.word	0x00056a20

00041684 <DWHCITransferStageDataSetSubState>:
   41684:	e92d4038 	push	{r3, r4, r5, lr}
   41688:	e2504000 	subs	r4, r0, #0
   4168c:	e1a05001 	mov	r5, r1
   41690:	0a000001 	beq	4169c <DWHCITransferStageDataSetSubState+0x18>
   41694:	e5845040 	str	r5, [r4, #64]	; 0x40
   41698:	e8bd8038 	pop	{r3, r4, r5, pc}
   4169c:	e59f0010 	ldr	r0, [pc, #16]	; 416b4 <DWHCITransferStageDataSetSubState+0x30>
   416a0:	e59f1010 	ldr	r1, [pc, #16]	; 416b8 <DWHCITransferStageDataSetSubState+0x34>
   416a4:	e3a020da 	mov	r2, #218	; 0xda
   416a8:	ebffd5e6 	bl	36e48 <uspi_assertion_failed>
   416ac:	e5845040 	str	r5, [r4, #64]	; 0x40
   416b0:	e8bd8038 	pop	{r3, r4, r5, pc}
   416b4:	00056434 	.word	0x00056434
   416b8:	00056a20 	.word	0x00056a20

000416bc <DWHCITransferStageDataGetSubState>:
   416bc:	e92d4010 	push	{r4, lr}
   416c0:	e2504000 	subs	r4, r0, #0
   416c4:	0a000001 	beq	416d0 <DWHCITransferStageDataGetSubState+0x14>
   416c8:	e5940040 	ldr	r0, [r4, #64]	; 0x40
   416cc:	e8bd8010 	pop	{r4, pc}
   416d0:	e59f0010 	ldr	r0, [pc, #16]	; 416e8 <DWHCITransferStageDataGetSubState+0x2c>
   416d4:	e59f1010 	ldr	r1, [pc, #16]	; 416ec <DWHCITransferStageDataGetSubState+0x30>
   416d8:	e3a020e0 	mov	r2, #224	; 0xe0
   416dc:	ebffd5d9 	bl	36e48 <uspi_assertion_failed>
   416e0:	e5940040 	ldr	r0, [r4, #64]	; 0x40
   416e4:	e8bd8010 	pop	{r4, pc}
   416e8:	00056434 	.word	0x00056434
   416ec:	00056a20 	.word	0x00056a20

000416f0 <DWHCITransferStageDataBeginSplitCycle>:
   416f0:	e3a00001 	mov	r0, #1
   416f4:	e12fff1e 	bx	lr

000416f8 <DWHCITransferStageDataGetChannelNumber>:
   416f8:	e92d4010 	push	{r4, lr}
   416fc:	e2504000 	subs	r4, r0, #0
   41700:	0a000001 	beq	4170c <DWHCITransferStageDataGetChannelNumber+0x14>
   41704:	e5940000 	ldr	r0, [r4]
   41708:	e8bd8010 	pop	{r4, pc}
   4170c:	e59f0010 	ldr	r0, [pc, #16]	; 41724 <DWHCITransferStageDataGetChannelNumber+0x2c>
   41710:	e59f1010 	ldr	r1, [pc, #16]	; 41728 <DWHCITransferStageDataGetChannelNumber+0x30>
   41714:	e3a020eb 	mov	r2, #235	; 0xeb
   41718:	ebffd5ca 	bl	36e48 <uspi_assertion_failed>
   4171c:	e5940000 	ldr	r0, [r4]
   41720:	e8bd8010 	pop	{r4, pc}
   41724:	00056434 	.word	0x00056434
   41728:	00056a20 	.word	0x00056a20

0004172c <DWHCITransferStageDataIsPeriodic>:
   4172c:	e92d4010 	push	{r4, lr}
   41730:	e2504000 	subs	r4, r0, #0
   41734:	0a00000f 	beq	41778 <DWHCITransferStageDataIsPeriodic+0x4c>
   41738:	e594001c 	ldr	r0, [r4, #28]
   4173c:	e3500000 	cmp	r0, #0
   41740:	0a000006 	beq	41760 <DWHCITransferStageDataIsPeriodic+0x34>
   41744:	eb000888 	bl	4396c <USBEndpointGetType>
   41748:	e2400002 	sub	r0, r0, #2
   4174c:	e6ef0070 	uxtb	r0, r0
   41750:	e3500001 	cmp	r0, #1
   41754:	83a00000 	movhi	r0, #0
   41758:	93a00001 	movls	r0, #1
   4175c:	e8bd8010 	pop	{r4, pc}
   41760:	e59f0024 	ldr	r0, [pc, #36]	; 4178c <DWHCITransferStageDataIsPeriodic+0x60>
   41764:	e59f1024 	ldr	r1, [pc, #36]	; 41790 <DWHCITransferStageDataIsPeriodic+0x64>
   41768:	e3a020f2 	mov	r2, #242	; 0xf2
   4176c:	ebffd5b5 	bl	36e48 <uspi_assertion_failed>
   41770:	e594001c 	ldr	r0, [r4, #28]
   41774:	eafffff2 	b	41744 <DWHCITransferStageDataIsPeriodic+0x18>
   41778:	e59f0014 	ldr	r0, [pc, #20]	; 41794 <DWHCITransferStageDataIsPeriodic+0x68>
   4177c:	e59f100c 	ldr	r1, [pc, #12]	; 41790 <DWHCITransferStageDataIsPeriodic+0x64>
   41780:	e3a020f1 	mov	r2, #241	; 0xf1
   41784:	ebffd5af 	bl	36e48 <uspi_assertion_failed>
   41788:	eaffffea 	b	41738 <DWHCITransferStageDataIsPeriodic+0xc>
   4178c:	00056ab8 	.word	0x00056ab8
   41790:	00056a20 	.word	0x00056a20
   41794:	00056434 	.word	0x00056434

00041798 <DWHCITransferStageData>:
   41798:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   4179c:	e2504000 	subs	r4, r0, #0
   417a0:	e24dd00c 	sub	sp, sp, #12
   417a4:	e1a07001 	mov	r7, r1
   417a8:	e1a05002 	mov	r5, r2
   417ac:	e59d6020 	ldr	r6, [sp, #32]
   417b0:	0a00007b 	beq	419a4 <DWHCITransferStageData+0x20c>
   417b4:	e3a02000 	mov	r2, #0
   417b8:	e1550002 	cmp	r5, r2
   417bc:	e5847000 	str	r7, [r4]
   417c0:	e5845004 	str	r5, [r4, #4]
   417c4:	e5843008 	str	r3, [r4, #8]
   417c8:	e584600c 	str	r6, [r4, #12]
   417cc:	e5842014 	str	r2, [r4, #20]
   417d0:	e5842038 	str	r2, [r4, #56]	; 0x38
   417d4:	e584203c 	str	r2, [r4, #60]	; 0x3c
   417d8:	e5842040 	str	r2, [r4, #64]	; 0x40
   417dc:	e5842044 	str	r2, [r4, #68]	; 0x44
   417e0:	e5842050 	str	r2, [r4, #80]	; 0x50
   417e4:	0a000075 	beq	419c0 <DWHCITransferStageData+0x228>
   417e8:	e1a00005 	mov	r0, r5
   417ec:	eb00094f 	bl	43d30 <USBRequestGetEndpoint>
   417f0:	e3500000 	cmp	r0, #0
   417f4:	e584001c 	str	r0, [r4, #28]
   417f8:	0a000075 	beq	419d4 <DWHCITransferStageData+0x23c>
   417fc:	eb000839 	bl	438e8 <USBEndpointGetDevice>
   41800:	e3500000 	cmp	r0, #0
   41804:	e5840018 	str	r0, [r4, #24]
   41808:	0a000077 	beq	419ec <DWHCITransferStageData+0x254>
   4180c:	eb000384 	bl	42624 <USBDeviceGetSpeed>
   41810:	e5c40020 	strb	r0, [r4, #32]
   41814:	e594001c 	ldr	r0, [r4, #28]
   41818:	eb00087b 	bl	43a0c <USBEndpointGetMaxPacketSize>
   4181c:	e5840024 	str	r0, [r4, #36]	; 0x24
   41820:	e5940018 	ldr	r0, [r4, #24]
   41824:	eb000399 	bl	42690 <USBDeviceGetHubAddress>
   41828:	e3500000 	cmp	r0, #0
   4182c:	0a000002 	beq	4183c <DWHCITransferStageData+0xa4>
   41830:	e5d40020 	ldrb	r0, [r4, #32]
   41834:	e2500002 	subs	r0, r0, #2
   41838:	13a00001 	movne	r0, #1
   4183c:	e3560000 	cmp	r6, #0
   41840:	e5840010 	str	r0, [r4, #16]
   41844:	0a00002a 	beq	418f4 <DWHCITransferStageData+0x15c>
   41848:	e3a01000 	mov	r1, #0
   4184c:	e3a02001 	mov	r2, #1
   41850:	e2843048 	add	r3, r4, #72	; 0x48
   41854:	e5841028 	str	r1, [r4, #40]	; 0x28
   41858:	e5841030 	str	r1, [r4, #48]	; 0x30
   4185c:	e584202c 	str	r2, [r4, #44]	; 0x2c
   41860:	e5842034 	str	r2, [r4, #52]	; 0x34
   41864:	e584304c 	str	r3, [r4, #76]	; 0x4c
   41868:	e3130003 	tst	r3, #3
   4186c:	1a00001b 	bne	418e0 <DWHCITransferStageData+0x148>
   41870:	e5943010 	ldr	r3, [r4, #16]
   41874:	e3530000 	cmp	r3, #0
   41878:	0a000009 	beq	418a4 <DWHCITransferStageData+0x10c>
   4187c:	e1a00004 	mov	r0, r4
   41880:	ebffffa9 	bl	4172c <DWHCITransferStageDataIsPeriodic>
   41884:	e3500000 	cmp	r0, #0
   41888:	e2840054 	add	r0, r4, #84	; 0x54
   4188c:	1a000011 	bne	418d8 <DWHCITransferStageData+0x140>
   41890:	eb001e6f 	bl	49254 <DWHCIFrameSchedulerNonPeriodic>
   41894:	e3a03001 	mov	r3, #1
   41898:	e5843050 	str	r3, [r4, #80]	; 0x50
   4189c:	e28dd00c 	add	sp, sp, #12
   418a0:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   418a4:	e5940018 	ldr	r0, [r4, #24]
   418a8:	eb000378 	bl	42690 <USBDeviceGetHubAddress>
   418ac:	e3500000 	cmp	r0, #0
   418b0:	1afffff9 	bne	4189c <DWHCITransferStageData+0x104>
   418b4:	e5d43020 	ldrb	r3, [r4, #32]
   418b8:	e3530002 	cmp	r3, #2
   418bc:	0afffff6 	beq	4189c <DWHCITransferStageData+0x104>
   418c0:	e1a00004 	mov	r0, r4
   418c4:	ebffff98 	bl	4172c <DWHCITransferStageDataIsPeriodic>
   418c8:	e1a01000 	mov	r1, r0
   418cc:	e2840054 	add	r0, r4, #84	; 0x54
   418d0:	eb0023e1 	bl	4a85c <DWHCIFrameSchedulerNoSplit>
   418d4:	eaffffee 	b	41894 <DWHCITransferStageData+0xfc>
   418d8:	eb001f3f 	bl	495dc <DWHCIFrameSchedulerPeriodic>
   418dc:	eaffffec 	b	41894 <DWHCITransferStageData+0xfc>
   418e0:	e59f011c 	ldr	r0, [pc, #284]	; 41a04 <DWHCITransferStageData+0x26c>
   418e4:	e59f111c 	ldr	r1, [pc, #284]	; 41a08 <DWHCITransferStageData+0x270>
   418e8:	e3a02062 	mov	r2, #98	; 0x62
   418ec:	ebffd555 	bl	36e48 <uspi_assertion_failed>
   418f0:	eaffffde 	b	41870 <DWHCITransferStageData+0xd8>
   418f4:	e1a01006 	mov	r1, r6
   418f8:	e594001c 	ldr	r0, [r4, #28]
   418fc:	eb000863 	bl	43a90 <USBEndpointGetNextPID>
   41900:	e3500000 	cmp	r0, #0
   41904:	e1a00005 	mov	r0, r5
   41908:	0a00001c 	beq	41980 <DWHCITransferStageData+0x1e8>
   4190c:	eb000976 	bl	43eec <USBRequestGetBuffer>
   41910:	e584004c 	str	r0, [r4, #76]	; 0x4c
   41914:	e1a00005 	mov	r0, r5
   41918:	eb00098a 	bl	43f48 <USBRequestGetBufLen>
   4191c:	e1a05000 	mov	r5, r0
   41920:	e5840028 	str	r0, [r4, #40]	; 0x28
   41924:	e5946024 	ldr	r6, [r4, #36]	; 0x24
   41928:	e2460001 	sub	r0, r6, #1
   4192c:	e0800005 	add	r0, r0, r5
   41930:	e1a01006 	mov	r1, r6
   41934:	eb00341e 	bl	4e9b4 <__udivsi3>
   41938:	e5943010 	ldr	r3, [r4, #16]
   4193c:	e584002c 	str	r0, [r4, #44]	; 0x2c
   41940:	e3530000 	cmp	r3, #0
   41944:	0a000012 	beq	41994 <DWHCITransferStageData+0x1fc>
   41948:	e3a03001 	mov	r3, #1
   4194c:	e1560005 	cmp	r6, r5
   41950:	21a06005 	movcs	r6, r5
   41954:	e5843034 	str	r3, [r4, #52]	; 0x34
   41958:	e594304c 	ldr	r3, [r4, #76]	; 0x4c
   4195c:	e5846030 	str	r6, [r4, #48]	; 0x30
   41960:	e3530000 	cmp	r3, #0
   41964:	1affffbf 	bne	41868 <DWHCITransferStageData+0xd0>
   41968:	e59f009c 	ldr	r0, [pc, #156]	; 41a0c <DWHCITransferStageData+0x274>
   4196c:	e59f1094 	ldr	r1, [pc, #148]	; 41a08 <DWHCITransferStageData+0x270>
   41970:	e3a02061 	mov	r2, #97	; 0x61
   41974:	ebffd533 	bl	36e48 <uspi_assertion_failed>
   41978:	e594304c 	ldr	r3, [r4, #76]	; 0x4c
   4197c:	eaffffb9 	b	41868 <DWHCITransferStageData+0xd0>
   41980:	eb00093b 	bl	43e74 <USBRequestGetSetupData>
   41984:	e3a05008 	mov	r5, #8
   41988:	e584004c 	str	r0, [r4, #76]	; 0x4c
   4198c:	e5845028 	str	r5, [r4, #40]	; 0x28
   41990:	eaffffe3 	b	41924 <DWHCITransferStageData+0x18c>
   41994:	e5845030 	str	r5, [r4, #48]	; 0x30
   41998:	e5840034 	str	r0, [r4, #52]	; 0x34
   4199c:	e594304c 	ldr	r3, [r4, #76]	; 0x4c
   419a0:	eaffffee 	b	41960 <DWHCITransferStageData+0x1c8>
   419a4:	e59f0064 	ldr	r0, [pc, #100]	; 41a10 <DWHCITransferStageData+0x278>
   419a8:	e59f1058 	ldr	r1, [pc, #88]	; 41a08 <DWHCITransferStageData+0x270>
   419ac:	e3a0201b 	mov	r2, #27
   419b0:	e58d3004 	str	r3, [sp, #4]
   419b4:	ebffd523 	bl	36e48 <uspi_assertion_failed>
   419b8:	e59d3004 	ldr	r3, [sp, #4]
   419bc:	eaffff7c 	b	417b4 <DWHCITransferStageData+0x1c>
   419c0:	e59f004c 	ldr	r0, [pc, #76]	; 41a14 <DWHCITransferStageData+0x27c>
   419c4:	e59f103c 	ldr	r1, [pc, #60]	; 41a08 <DWHCITransferStageData+0x270>
   419c8:	e3a02028 	mov	r2, #40	; 0x28
   419cc:	ebffd51d 	bl	36e48 <uspi_assertion_failed>
   419d0:	eaffff84 	b	417e8 <DWHCITransferStageData+0x50>
   419d4:	e59f003c 	ldr	r0, [pc, #60]	; 41a18 <DWHCITransferStageData+0x280>
   419d8:	e59f1028 	ldr	r1, [pc, #40]	; 41a08 <DWHCITransferStageData+0x270>
   419dc:	e3a0202b 	mov	r2, #43	; 0x2b
   419e0:	ebffd518 	bl	36e48 <uspi_assertion_failed>
   419e4:	e594001c 	ldr	r0, [r4, #28]
   419e8:	eaffff83 	b	417fc <DWHCITransferStageData+0x64>
   419ec:	e59f0028 	ldr	r0, [pc, #40]	; 41a1c <DWHCITransferStageData+0x284>
   419f0:	e59f1010 	ldr	r1, [pc, #16]	; 41a08 <DWHCITransferStageData+0x270>
   419f4:	e3a0202d 	mov	r2, #45	; 0x2d
   419f8:	ebffd512 	bl	36e48 <uspi_assertion_failed>
   419fc:	e5940018 	ldr	r0, [r4, #24]
   41a00:	eaffff81 	b	4180c <DWHCITransferStageData+0x74>
   41a04:	00056b1c 	.word	0x00056b1c
   41a08:	00056a20 	.word	0x00056a20
   41a0c:	00056afc 	.word	0x00056afc
   41a10:	00056434 	.word	0x00056434
   41a14:	00056ad0 	.word	0x00056ad0
   41a18:	00056ab8 	.word	0x00056ab8
   41a1c:	00056ae4 	.word	0x00056ae4

00041a20 <DWHCITransferStageDataGetDeviceAddress>:
   41a20:	e92d4010 	push	{r4, lr}
   41a24:	e2504000 	subs	r4, r0, #0
   41a28:	0a00000b 	beq	41a5c <DWHCITransferStageDataGetDeviceAddress+0x3c>
   41a2c:	e5940018 	ldr	r0, [r4, #24]
   41a30:	e3500000 	cmp	r0, #0
   41a34:	0a000001 	beq	41a40 <DWHCITransferStageDataGetDeviceAddress+0x20>
   41a38:	e8bd4010 	pop	{r4, lr}
   41a3c:	ea0002eb 	b	425f0 <USBDeviceGetAddress>
   41a40:	e59f0028 	ldr	r0, [pc, #40]	; 41a70 <DWHCITransferStageDataGetDeviceAddress+0x50>
   41a44:	e59f1028 	ldr	r1, [pc, #40]	; 41a74 <DWHCITransferStageDataGetDeviceAddress+0x54>
   41a48:	e3a020fc 	mov	r2, #252	; 0xfc
   41a4c:	ebffd4fd 	bl	36e48 <uspi_assertion_failed>
   41a50:	e5940018 	ldr	r0, [r4, #24]
   41a54:	e8bd4010 	pop	{r4, lr}
   41a58:	ea0002e4 	b	425f0 <USBDeviceGetAddress>
   41a5c:	e59f0014 	ldr	r0, [pc, #20]	; 41a78 <DWHCITransferStageDataGetDeviceAddress+0x58>
   41a60:	e59f100c 	ldr	r1, [pc, #12]	; 41a74 <DWHCITransferStageDataGetDeviceAddress+0x54>
   41a64:	e3a020fb 	mov	r2, #251	; 0xfb
   41a68:	ebffd4f6 	bl	36e48 <uspi_assertion_failed>
   41a6c:	eaffffee 	b	41a2c <DWHCITransferStageDataGetDeviceAddress+0xc>
   41a70:	00056ae4 	.word	0x00056ae4
   41a74:	00056a20 	.word	0x00056a20
   41a78:	00056434 	.word	0x00056434

00041a7c <DWHCITransferStageDataGetEndpointType>:
   41a7c:	e92d4010 	push	{r4, lr}
   41a80:	e2504000 	subs	r4, r0, #0
   41a84:	0a00001a 	beq	41af4 <DWHCITransferStageDataGetEndpointType+0x78>
   41a88:	e594001c 	ldr	r0, [r4, #28]
   41a8c:	e3500000 	cmp	r0, #0
   41a90:	0a000011 	beq	41adc <DWHCITransferStageDataGetEndpointType+0x60>
   41a94:	eb0007b4 	bl	4396c <USBEndpointGetType>
   41a98:	e3500001 	cmp	r0, #1
   41a9c:	0a00000c 	beq	41ad4 <DWHCITransferStageDataGetEndpointType+0x58>
   41aa0:	3a000009 	bcc	41acc <DWHCITransferStageDataGetEndpointType+0x50>
   41aa4:	e3500002 	cmp	r0, #2
   41aa8:	1a000001 	bne	41ab4 <DWHCITransferStageDataGetEndpointType+0x38>
   41aac:	e3a00003 	mov	r0, #3
   41ab0:	e8bd8010 	pop	{r4, pc}
   41ab4:	e59f004c 	ldr	r0, [pc, #76]	; 41b08 <DWHCITransferStageDataGetEndpointType+0x8c>
   41ab8:	e59f104c 	ldr	r1, [pc, #76]	; 41b0c <DWHCITransferStageDataGetEndpointType+0x90>
   41abc:	e59f204c 	ldr	r2, [pc, #76]	; 41b10 <DWHCITransferStageDataGetEndpointType+0x94>
   41ac0:	ebffd4e0 	bl	36e48 <uspi_assertion_failed>
   41ac4:	e3a00000 	mov	r0, #0
   41ac8:	e8bd8010 	pop	{r4, pc}
   41acc:	e3a00000 	mov	r0, #0
   41ad0:	e8bd8010 	pop	{r4, pc}
   41ad4:	e3a00002 	mov	r0, #2
   41ad8:	e8bd8010 	pop	{r4, pc}
   41adc:	e59f0030 	ldr	r0, [pc, #48]	; 41b14 <DWHCITransferStageDataGetEndpointType+0x98>
   41ae0:	e59f1024 	ldr	r1, [pc, #36]	; 41b0c <DWHCITransferStageDataGetEndpointType+0x90>
   41ae4:	e59f202c 	ldr	r2, [pc, #44]	; 41b18 <DWHCITransferStageDataGetEndpointType+0x9c>
   41ae8:	ebffd4d6 	bl	36e48 <uspi_assertion_failed>
   41aec:	e594001c 	ldr	r0, [r4, #28]
   41af0:	eaffffe7 	b	41a94 <DWHCITransferStageDataGetEndpointType+0x18>
   41af4:	e59f0020 	ldr	r0, [pc, #32]	; 41b1c <DWHCITransferStageDataGetEndpointType+0xa0>
   41af8:	e59f100c 	ldr	r1, [pc, #12]	; 41b0c <DWHCITransferStageDataGetEndpointType+0x90>
   41afc:	e59f201c 	ldr	r2, [pc, #28]	; 41b20 <DWHCITransferStageDataGetEndpointType+0xa4>
   41b00:	ebffd4d0 	bl	36e48 <uspi_assertion_failed>
   41b04:	eaffffdf 	b	41a88 <DWHCITransferStageDataGetEndpointType+0xc>
   41b08:	000563cc 	.word	0x000563cc
   41b0c:	00056a20 	.word	0x00056a20
   41b10:	00000116 	.word	0x00000116
   41b14:	00056ab8 	.word	0x00056ab8
   41b18:	00000103 	.word	0x00000103
   41b1c:	00056434 	.word	0x00056434
   41b20:	00000102 	.word	0x00000102

00041b24 <DWHCITransferStageDataGetEndpointNumber>:
   41b24:	e92d4010 	push	{r4, lr}
   41b28:	e2504000 	subs	r4, r0, #0
   41b2c:	0a00000b 	beq	41b60 <DWHCITransferStageDataGetEndpointNumber+0x3c>
   41b30:	e594001c 	ldr	r0, [r4, #28]
   41b34:	e3500000 	cmp	r0, #0
   41b38:	0a000001 	beq	41b44 <DWHCITransferStageDataGetEndpointNumber+0x20>
   41b3c:	e8bd4010 	pop	{r4, lr}
   41b40:	ea00077c 	b	43938 <USBEndpointGetNumber>
   41b44:	e59f0028 	ldr	r0, [pc, #40]	; 41b74 <DWHCITransferStageDataGetEndpointNumber+0x50>
   41b48:	e59f1028 	ldr	r1, [pc, #40]	; 41b78 <DWHCITransferStageDataGetEndpointNumber+0x54>
   41b4c:	e3a02e12 	mov	r2, #288	; 0x120
   41b50:	ebffd4bc 	bl	36e48 <uspi_assertion_failed>
   41b54:	e594001c 	ldr	r0, [r4, #28]
   41b58:	e8bd4010 	pop	{r4, lr}
   41b5c:	ea000775 	b	43938 <USBEndpointGetNumber>
   41b60:	e59f0014 	ldr	r0, [pc, #20]	; 41b7c <DWHCITransferStageDataGetEndpointNumber+0x58>
   41b64:	e59f100c 	ldr	r1, [pc, #12]	; 41b78 <DWHCITransferStageDataGetEndpointNumber+0x54>
   41b68:	e59f2010 	ldr	r2, [pc, #16]	; 41b80 <DWHCITransferStageDataGetEndpointNumber+0x5c>
   41b6c:	ebffd4b5 	bl	36e48 <uspi_assertion_failed>
   41b70:	eaffffee 	b	41b30 <DWHCITransferStageDataGetEndpointNumber+0xc>
   41b74:	00056ab8 	.word	0x00056ab8
   41b78:	00056a20 	.word	0x00056a20
   41b7c:	00056434 	.word	0x00056434
   41b80:	0000011f 	.word	0x0000011f

00041b84 <DWHCITransferStageDataGetMaxPacketSize>:
   41b84:	e92d4010 	push	{r4, lr}
   41b88:	e2504000 	subs	r4, r0, #0
   41b8c:	0a000001 	beq	41b98 <DWHCITransferStageDataGetMaxPacketSize+0x14>
   41b90:	e5940024 	ldr	r0, [r4, #36]	; 0x24
   41b94:	e8bd8010 	pop	{r4, pc}
   41b98:	e59f0010 	ldr	r0, [pc, #16]	; 41bb0 <DWHCITransferStageDataGetMaxPacketSize+0x2c>
   41b9c:	e59f1010 	ldr	r1, [pc, #16]	; 41bb4 <DWHCITransferStageDataGetMaxPacketSize+0x30>
   41ba0:	e59f2010 	ldr	r2, [pc, #16]	; 41bb8 <DWHCITransferStageDataGetMaxPacketSize+0x34>
   41ba4:	ebffd4a7 	bl	36e48 <uspi_assertion_failed>
   41ba8:	e5940024 	ldr	r0, [r4, #36]	; 0x24
   41bac:	e8bd8010 	pop	{r4, pc}
   41bb0:	00056434 	.word	0x00056434
   41bb4:	00056a20 	.word	0x00056a20
   41bb8:	00000126 	.word	0x00000126

00041bbc <DWHCITransferStageDataGetSpeed>:
   41bbc:	e92d4010 	push	{r4, lr}
   41bc0:	e2504000 	subs	r4, r0, #0
   41bc4:	0a000001 	beq	41bd0 <DWHCITransferStageDataGetSpeed+0x14>
   41bc8:	e5d40020 	ldrb	r0, [r4, #32]
   41bcc:	e8bd8010 	pop	{r4, pc}
   41bd0:	e59f0010 	ldr	r0, [pc, #16]	; 41be8 <DWHCITransferStageDataGetSpeed+0x2c>
   41bd4:	e59f1010 	ldr	r1, [pc, #16]	; 41bec <DWHCITransferStageDataGetSpeed+0x30>
   41bd8:	e3a02f4b 	mov	r2, #300	; 0x12c
   41bdc:	ebffd499 	bl	36e48 <uspi_assertion_failed>
   41be0:	e5d40020 	ldrb	r0, [r4, #32]
   41be4:	e8bd8010 	pop	{r4, pc}
   41be8:	00056434 	.word	0x00056434
   41bec:	00056a20 	.word	0x00056a20

00041bf0 <DWHCITransferStageDataGetPID>:
   41bf0:	e92d4010 	push	{r4, lr}
   41bf4:	e2504000 	subs	r4, r0, #0
   41bf8:	0a000017 	beq	41c5c <DWHCITransferStageDataGetPID+0x6c>
   41bfc:	e594001c 	ldr	r0, [r4, #28]
   41c00:	e3500000 	cmp	r0, #0
   41c04:	0a00000e 	beq	41c44 <DWHCITransferStageDataGetPID+0x54>
   41c08:	e594100c 	ldr	r1, [r4, #12]
   41c0c:	eb00079f 	bl	43a90 <USBEndpointGetNextPID>
   41c10:	e3500001 	cmp	r0, #1
   41c14:	0a000006 	beq	41c34 <DWHCITransferStageDataGetPID+0x44>
   41c18:	3a000007 	bcc	41c3c <DWHCITransferStageDataGetPID+0x4c>
   41c1c:	e3500002 	cmp	r0, #2
   41c20:	08bd8010 	popeq	{r4, pc}
   41c24:	e59f0044 	ldr	r0, [pc, #68]	; 41c70 <DWHCITransferStageDataGetPID+0x80>
   41c28:	e59f1044 	ldr	r1, [pc, #68]	; 41c74 <DWHCITransferStageDataGetPID+0x84>
   41c2c:	e59f2044 	ldr	r2, [pc, #68]	; 41c78 <DWHCITransferStageDataGetPID+0x88>
   41c30:	ebffd484 	bl	36e48 <uspi_assertion_failed>
   41c34:	e3a00000 	mov	r0, #0
   41c38:	e8bd8010 	pop	{r4, pc}
   41c3c:	e3a00003 	mov	r0, #3
   41c40:	e8bd8010 	pop	{r4, pc}
   41c44:	e59f0030 	ldr	r0, [pc, #48]	; 41c7c <DWHCITransferStageDataGetPID+0x8c>
   41c48:	e59f1024 	ldr	r1, [pc, #36]	; 41c74 <DWHCITransferStageDataGetPID+0x84>
   41c4c:	e59f202c 	ldr	r2, [pc, #44]	; 41c80 <DWHCITransferStageDataGetPID+0x90>
   41c50:	ebffd47c 	bl	36e48 <uspi_assertion_failed>
   41c54:	e594001c 	ldr	r0, [r4, #28]
   41c58:	eaffffea 	b	41c08 <DWHCITransferStageDataGetPID+0x18>
   41c5c:	e59f0020 	ldr	r0, [pc, #32]	; 41c84 <DWHCITransferStageDataGetPID+0x94>
   41c60:	e59f100c 	ldr	r1, [pc, #12]	; 41c74 <DWHCITransferStageDataGetPID+0x84>
   41c64:	e59f201c 	ldr	r2, [pc, #28]	; 41c88 <DWHCITransferStageDataGetPID+0x98>
   41c68:	ebffd476 	bl	36e48 <uspi_assertion_failed>
   41c6c:	eaffffe2 	b	41bfc <DWHCITransferStageDataGetPID+0xc>
   41c70:	000563cc 	.word	0x000563cc
   41c74:	00056a20 	.word	0x00056a20
   41c78:	00000146 	.word	0x00000146
   41c7c:	00056ab8 	.word	0x00056ab8
   41c80:	00000133 	.word	0x00000133
   41c84:	00056434 	.word	0x00056434
   41c88:	00000132 	.word	0x00000132

00041c8c <DWHCITransferStageDataIsDirectionIn>:
   41c8c:	e92d4010 	push	{r4, lr}
   41c90:	e2504000 	subs	r4, r0, #0
   41c94:	0a000001 	beq	41ca0 <DWHCITransferStageDataIsDirectionIn+0x14>
   41c98:	e5940008 	ldr	r0, [r4, #8]
   41c9c:	e8bd8010 	pop	{r4, pc}
   41ca0:	e59f0010 	ldr	r0, [pc, #16]	; 41cb8 <DWHCITransferStageDataIsDirectionIn+0x2c>
   41ca4:	e59f1010 	ldr	r1, [pc, #16]	; 41cbc <DWHCITransferStageDataIsDirectionIn+0x30>
   41ca8:	e59f2010 	ldr	r2, [pc, #16]	; 41cc0 <DWHCITransferStageDataIsDirectionIn+0x34>
   41cac:	ebffd465 	bl	36e48 <uspi_assertion_failed>
   41cb0:	e5940008 	ldr	r0, [r4, #8]
   41cb4:	e8bd8010 	pop	{r4, pc}
   41cb8:	00056434 	.word	0x00056434
   41cbc:	00056a20 	.word	0x00056a20
   41cc0:	0000014f 	.word	0x0000014f

00041cc4 <DWHCITransferStageDataIsStatusStage>:
   41cc4:	e92d4010 	push	{r4, lr}
   41cc8:	e2504000 	subs	r4, r0, #0
   41ccc:	0a000001 	beq	41cd8 <DWHCITransferStageDataIsStatusStage+0x14>
   41cd0:	e594000c 	ldr	r0, [r4, #12]
   41cd4:	e8bd8010 	pop	{r4, pc}
   41cd8:	e59f0010 	ldr	r0, [pc, #16]	; 41cf0 <DWHCITransferStageDataIsStatusStage+0x2c>
   41cdc:	e59f1010 	ldr	r1, [pc, #16]	; 41cf4 <DWHCITransferStageDataIsStatusStage+0x30>
   41ce0:	e59f2010 	ldr	r2, [pc, #16]	; 41cf8 <DWHCITransferStageDataIsStatusStage+0x34>
   41ce4:	ebffd457 	bl	36e48 <uspi_assertion_failed>
   41ce8:	e594000c 	ldr	r0, [r4, #12]
   41cec:	e8bd8010 	pop	{r4, pc}
   41cf0:	00056434 	.word	0x00056434
   41cf4:	00056a20 	.word	0x00056a20
   41cf8:	00000155 	.word	0x00000155

00041cfc <DWHCITransferStageDataGetDMAAddress>:
   41cfc:	e92d4010 	push	{r4, lr}
   41d00:	e2504000 	subs	r4, r0, #0
   41d04:	0a000008 	beq	41d2c <DWHCITransferStageDataGetDMAAddress+0x30>
   41d08:	e594004c 	ldr	r0, [r4, #76]	; 0x4c
   41d0c:	e3500000 	cmp	r0, #0
   41d10:	18bd8010 	popne	{r4, pc}
   41d14:	e59f0024 	ldr	r0, [pc, #36]	; 41d40 <DWHCITransferStageDataGetDMAAddress+0x44>
   41d18:	e59f1024 	ldr	r1, [pc, #36]	; 41d44 <DWHCITransferStageDataGetDMAAddress+0x48>
   41d1c:	e3a02f57 	mov	r2, #348	; 0x15c
   41d20:	ebffd448 	bl	36e48 <uspi_assertion_failed>
   41d24:	e594004c 	ldr	r0, [r4, #76]	; 0x4c
   41d28:	e8bd8010 	pop	{r4, pc}
   41d2c:	e59f0014 	ldr	r0, [pc, #20]	; 41d48 <DWHCITransferStageDataGetDMAAddress+0x4c>
   41d30:	e59f100c 	ldr	r1, [pc, #12]	; 41d44 <DWHCITransferStageDataGetDMAAddress+0x48>
   41d34:	e59f2010 	ldr	r2, [pc, #16]	; 41d4c <DWHCITransferStageDataGetDMAAddress+0x50>
   41d38:	ebffd442 	bl	36e48 <uspi_assertion_failed>
   41d3c:	eafffff1 	b	41d08 <DWHCITransferStageDataGetDMAAddress+0xc>
   41d40:	00056afc 	.word	0x00056afc
   41d44:	00056a20 	.word	0x00056a20
   41d48:	00056434 	.word	0x00056434
   41d4c:	0000015b 	.word	0x0000015b

00041d50 <DWHCITransferStageDataGetBytesToTransfer>:
   41d50:	e92d4010 	push	{r4, lr}
   41d54:	e2504000 	subs	r4, r0, #0
   41d58:	0a000001 	beq	41d64 <DWHCITransferStageDataGetBytesToTransfer+0x14>
   41d5c:	e5940030 	ldr	r0, [r4, #48]	; 0x30
   41d60:	e8bd8010 	pop	{r4, pc}
   41d64:	e59f0010 	ldr	r0, [pc, #16]	; 41d7c <DWHCITransferStageDataGetBytesToTransfer+0x2c>
   41d68:	e59f1010 	ldr	r1, [pc, #16]	; 41d80 <DWHCITransferStageDataGetBytesToTransfer+0x30>
   41d6c:	e59f2010 	ldr	r2, [pc, #16]	; 41d84 <DWHCITransferStageDataGetBytesToTransfer+0x34>
   41d70:	ebffd434 	bl	36e48 <uspi_assertion_failed>
   41d74:	e5940030 	ldr	r0, [r4, #48]	; 0x30
   41d78:	e8bd8010 	pop	{r4, pc}
   41d7c:	00056434 	.word	0x00056434
   41d80:	00056a20 	.word	0x00056a20
   41d84:	00000163 	.word	0x00000163

00041d88 <DWHCITransferStageDataGetPacketsToTransfer>:
   41d88:	e92d4010 	push	{r4, lr}
   41d8c:	e2504000 	subs	r4, r0, #0
   41d90:	0a000001 	beq	41d9c <DWHCITransferStageDataGetPacketsToTransfer+0x14>
   41d94:	e5940034 	ldr	r0, [r4, #52]	; 0x34
   41d98:	e8bd8010 	pop	{r4, pc}
   41d9c:	e59f0010 	ldr	r0, [pc, #16]	; 41db4 <DWHCITransferStageDataGetPacketsToTransfer+0x2c>
   41da0:	e59f1010 	ldr	r1, [pc, #16]	; 41db8 <DWHCITransferStageDataGetPacketsToTransfer+0x30>
   41da4:	e59f2010 	ldr	r2, [pc, #16]	; 41dbc <DWHCITransferStageDataGetPacketsToTransfer+0x34>
   41da8:	ebffd426 	bl	36e48 <uspi_assertion_failed>
   41dac:	e5940034 	ldr	r0, [r4, #52]	; 0x34
   41db0:	e8bd8010 	pop	{r4, pc}
   41db4:	00056434 	.word	0x00056434
   41db8:	00056a20 	.word	0x00056a20
   41dbc:	00000169 	.word	0x00000169

00041dc0 <DWHCITransferStageDataIsSplit>:
   41dc0:	e92d4010 	push	{r4, lr}
   41dc4:	e2504000 	subs	r4, r0, #0
   41dc8:	0a000001 	beq	41dd4 <DWHCITransferStageDataIsSplit+0x14>
   41dcc:	e5940010 	ldr	r0, [r4, #16]
   41dd0:	e8bd8010 	pop	{r4, pc}
   41dd4:	e59f0010 	ldr	r0, [pc, #16]	; 41dec <DWHCITransferStageDataIsSplit+0x2c>
   41dd8:	e59f1010 	ldr	r1, [pc, #16]	; 41df0 <DWHCITransferStageDataIsSplit+0x30>
   41ddc:	e59f2010 	ldr	r2, [pc, #16]	; 41df4 <DWHCITransferStageDataIsSplit+0x34>
   41de0:	ebffd418 	bl	36e48 <uspi_assertion_failed>
   41de4:	e5940010 	ldr	r0, [r4, #16]
   41de8:	e8bd8010 	pop	{r4, pc}
   41dec:	00056434 	.word	0x00056434
   41df0:	00056a20 	.word	0x00056a20
   41df4:	0000016f 	.word	0x0000016f

00041df8 <DWHCITransferStageDataIsSplitComplete>:
   41df8:	e92d4010 	push	{r4, lr}
   41dfc:	e2504000 	subs	r4, r0, #0
   41e00:	0a000008 	beq	41e28 <DWHCITransferStageDataIsSplitComplete+0x30>
   41e04:	e5943010 	ldr	r3, [r4, #16]
   41e08:	e3530000 	cmp	r3, #0
   41e0c:	1a000003 	bne	41e20 <DWHCITransferStageDataIsSplitComplete+0x28>
   41e10:	e59f0024 	ldr	r0, [pc, #36]	; 41e3c <DWHCITransferStageDataIsSplitComplete+0x44>
   41e14:	e59f1024 	ldr	r1, [pc, #36]	; 41e40 <DWHCITransferStageDataIsSplitComplete+0x48>
   41e18:	e59f2024 	ldr	r2, [pc, #36]	; 41e44 <DWHCITransferStageDataIsSplitComplete+0x4c>
   41e1c:	ebffd409 	bl	36e48 <uspi_assertion_failed>
   41e20:	e5940014 	ldr	r0, [r4, #20]
   41e24:	e8bd8010 	pop	{r4, pc}
   41e28:	e59f0018 	ldr	r0, [pc, #24]	; 41e48 <DWHCITransferStageDataIsSplitComplete+0x50>
   41e2c:	e59f100c 	ldr	r1, [pc, #12]	; 41e40 <DWHCITransferStageDataIsSplitComplete+0x48>
   41e30:	e59f2014 	ldr	r2, [pc, #20]	; 41e4c <DWHCITransferStageDataIsSplitComplete+0x54>
   41e34:	ebffd403 	bl	36e48 <uspi_assertion_failed>
   41e38:	eafffff1 	b	41e04 <DWHCITransferStageDataIsSplitComplete+0xc>
   41e3c:	00056a9c 	.word	0x00056a9c
   41e40:	00056a20 	.word	0x00056a20
   41e44:	00000176 	.word	0x00000176
   41e48:	00056434 	.word	0x00056434
   41e4c:	00000175 	.word	0x00000175

00041e50 <DWHCITransferStageDataGetHubAddress>:
   41e50:	e92d4010 	push	{r4, lr}
   41e54:	e2504000 	subs	r4, r0, #0
   41e58:	0a000015 	beq	41eb4 <DWHCITransferStageDataGetHubAddress+0x64>
   41e5c:	e5943010 	ldr	r3, [r4, #16]
   41e60:	e3530000 	cmp	r3, #0
   41e64:	0a000004 	beq	41e7c <DWHCITransferStageDataGetHubAddress+0x2c>
   41e68:	e5940018 	ldr	r0, [r4, #24]
   41e6c:	e3500000 	cmp	r0, #0
   41e70:	0a000008 	beq	41e98 <DWHCITransferStageDataGetHubAddress+0x48>
   41e74:	e8bd4010 	pop	{r4, lr}
   41e78:	ea000204 	b	42690 <USBDeviceGetHubAddress>
   41e7c:	e59f0044 	ldr	r0, [pc, #68]	; 41ec8 <DWHCITransferStageDataGetHubAddress+0x78>
   41e80:	e59f1044 	ldr	r1, [pc, #68]	; 41ecc <DWHCITransferStageDataGetHubAddress+0x7c>
   41e84:	e59f2044 	ldr	r2, [pc, #68]	; 41ed0 <DWHCITransferStageDataGetHubAddress+0x80>
   41e88:	ebffd3ee 	bl	36e48 <uspi_assertion_failed>
   41e8c:	e5940018 	ldr	r0, [r4, #24]
   41e90:	e3500000 	cmp	r0, #0
   41e94:	1afffff6 	bne	41e74 <DWHCITransferStageDataGetHubAddress+0x24>
   41e98:	e59f0034 	ldr	r0, [pc, #52]	; 41ed4 <DWHCITransferStageDataGetHubAddress+0x84>
   41e9c:	e59f1028 	ldr	r1, [pc, #40]	; 41ecc <DWHCITransferStageDataGetHubAddress+0x7c>
   41ea0:	e3a02d06 	mov	r2, #384	; 0x180
   41ea4:	ebffd3e7 	bl	36e48 <uspi_assertion_failed>
   41ea8:	e5940018 	ldr	r0, [r4, #24]
   41eac:	e8bd4010 	pop	{r4, lr}
   41eb0:	ea0001f6 	b	42690 <USBDeviceGetHubAddress>
   41eb4:	e59f001c 	ldr	r0, [pc, #28]	; 41ed8 <DWHCITransferStageDataGetHubAddress+0x88>
   41eb8:	e59f100c 	ldr	r1, [pc, #12]	; 41ecc <DWHCITransferStageDataGetHubAddress+0x7c>
   41ebc:	e59f2018 	ldr	r2, [pc, #24]	; 41edc <DWHCITransferStageDataGetHubAddress+0x8c>
   41ec0:	ebffd3e0 	bl	36e48 <uspi_assertion_failed>
   41ec4:	eaffffe4 	b	41e5c <DWHCITransferStageDataGetHubAddress+0xc>
   41ec8:	00056a9c 	.word	0x00056a9c
   41ecc:	00056a20 	.word	0x00056a20
   41ed0:	0000017e 	.word	0x0000017e
   41ed4:	00056ae4 	.word	0x00056ae4
   41ed8:	00056434 	.word	0x00056434
   41edc:	0000017d 	.word	0x0000017d

00041ee0 <DWHCITransferStageDataGetHubPortAddress>:
   41ee0:	e92d4010 	push	{r4, lr}
   41ee4:	e2504000 	subs	r4, r0, #0
   41ee8:	0a000015 	beq	41f44 <DWHCITransferStageDataGetHubPortAddress+0x64>
   41eec:	e5943010 	ldr	r3, [r4, #16]
   41ef0:	e3530000 	cmp	r3, #0
   41ef4:	0a000004 	beq	41f0c <DWHCITransferStageDataGetHubPortAddress+0x2c>
   41ef8:	e5940018 	ldr	r0, [r4, #24]
   41efc:	e3500000 	cmp	r0, #0
   41f00:	0a000008 	beq	41f28 <DWHCITransferStageDataGetHubPortAddress+0x48>
   41f04:	e8bd4010 	pop	{r4, lr}
   41f08:	ea0001ee 	b	426c8 <USBDeviceGetHubPortNumber>
   41f0c:	e59f0044 	ldr	r0, [pc, #68]	; 41f58 <DWHCITransferStageDataGetHubPortAddress+0x78>
   41f10:	e59f1044 	ldr	r1, [pc, #68]	; 41f5c <DWHCITransferStageDataGetHubPortAddress+0x7c>
   41f14:	e59f2044 	ldr	r2, [pc, #68]	; 41f60 <DWHCITransferStageDataGetHubPortAddress+0x80>
   41f18:	ebffd3ca 	bl	36e48 <uspi_assertion_failed>
   41f1c:	e5940018 	ldr	r0, [r4, #24]
   41f20:	e3500000 	cmp	r0, #0
   41f24:	1afffff6 	bne	41f04 <DWHCITransferStageDataGetHubPortAddress+0x24>
   41f28:	e59f0034 	ldr	r0, [pc, #52]	; 41f64 <DWHCITransferStageDataGetHubPortAddress+0x84>
   41f2c:	e59f1028 	ldr	r1, [pc, #40]	; 41f5c <DWHCITransferStageDataGetHubPortAddress+0x7c>
   41f30:	e59f2030 	ldr	r2, [pc, #48]	; 41f68 <DWHCITransferStageDataGetHubPortAddress+0x88>
   41f34:	ebffd3c3 	bl	36e48 <uspi_assertion_failed>
   41f38:	e5940018 	ldr	r0, [r4, #24]
   41f3c:	e8bd4010 	pop	{r4, lr}
   41f40:	ea0001e0 	b	426c8 <USBDeviceGetHubPortNumber>
   41f44:	e59f0020 	ldr	r0, [pc, #32]	; 41f6c <DWHCITransferStageDataGetHubPortAddress+0x8c>
   41f48:	e59f100c 	ldr	r1, [pc, #12]	; 41f5c <DWHCITransferStageDataGetHubPortAddress+0x7c>
   41f4c:	e59f201c 	ldr	r2, [pc, #28]	; 41f70 <DWHCITransferStageDataGetHubPortAddress+0x90>
   41f50:	ebffd3bc 	bl	36e48 <uspi_assertion_failed>
   41f54:	eaffffe4 	b	41eec <DWHCITransferStageDataGetHubPortAddress+0xc>
   41f58:	00056a9c 	.word	0x00056a9c
   41f5c:	00056a20 	.word	0x00056a20
   41f60:	00000187 	.word	0x00000187
   41f64:	00056ae4 	.word	0x00056ae4
   41f68:	00000189 	.word	0x00000189
   41f6c:	00056434 	.word	0x00056434
   41f70:	00000186 	.word	0x00000186

00041f74 <DWHCITransferStageDataGetSplitPosition>:
   41f74:	e3a00003 	mov	r0, #3
   41f78:	e12fff1e 	bx	lr

00041f7c <DWHCITransferStageDataGetStatusMask>:
   41f7c:	e92d4010 	push	{r4, lr}
   41f80:	e2504000 	subs	r4, r0, #0
   41f84:	0a00000c 	beq	41fbc <DWHCITransferStageDataGetStatusMask+0x40>
   41f88:	e5943010 	ldr	r3, [r4, #16]
   41f8c:	e3530000 	cmp	r3, #0
   41f90:	0a000001 	beq	41f9c <DWHCITransferStageDataGetStatusMask+0x20>
   41f94:	e59f0034 	ldr	r0, [pc, #52]	; 41fd0 <DWHCITransferStageDataGetStatusMask+0x54>
   41f98:	e8bd8010 	pop	{r4, pc}
   41f9c:	e1a00004 	mov	r0, r4
   41fa0:	ebfffde1 	bl	4172c <DWHCITransferStageDataIsPeriodic>
   41fa4:	e59f3028 	ldr	r3, [pc, #40]	; 41fd4 <DWHCITransferStageDataGetStatusMask+0x58>
   41fa8:	e59f2020 	ldr	r2, [pc, #32]	; 41fd0 <DWHCITransferStageDataGetStatusMask+0x54>
   41fac:	e3500000 	cmp	r0, #0
   41fb0:	01a00003 	moveq	r0, r3
   41fb4:	11a00002 	movne	r0, r2
   41fb8:	e8bd8010 	pop	{r4, pc}
   41fbc:	e59f0014 	ldr	r0, [pc, #20]	; 41fd8 <DWHCITransferStageDataGetStatusMask+0x5c>
   41fc0:	e59f1014 	ldr	r1, [pc, #20]	; 41fdc <DWHCITransferStageDataGetStatusMask+0x60>
   41fc4:	e59f2014 	ldr	r2, [pc, #20]	; 41fe0 <DWHCITransferStageDataGetStatusMask+0x64>
   41fc8:	ebffd39e 	bl	36e48 <uspi_assertion_failed>
   41fcc:	eaffffed 	b	41f88 <DWHCITransferStageDataGetStatusMask+0xc>
   41fd0:	000007ff 	.word	0x000007ff
   41fd4:	0000078f 	.word	0x0000078f
   41fd8:	00056434 	.word	0x00056434
   41fdc:	00056a20 	.word	0x00056a20
   41fe0:	00000195 	.word	0x00000195

00041fe4 <DWHCITransferStageDataGetTransactionStatus>:
   41fe4:	e92d4010 	push	{r4, lr}
   41fe8:	e2504000 	subs	r4, r0, #0
   41fec:	0a000008 	beq	42014 <DWHCITransferStageDataGetTransactionStatus+0x30>
   41ff0:	e5940044 	ldr	r0, [r4, #68]	; 0x44
   41ff4:	e3500000 	cmp	r0, #0
   41ff8:	18bd8010 	popne	{r4, pc}
   41ffc:	e59f0024 	ldr	r0, [pc, #36]	; 42028 <DWHCITransferStageDataGetTransactionStatus+0x44>
   42000:	e59f1024 	ldr	r1, [pc, #36]	; 4202c <DWHCITransferStageDataGetTransactionStatus+0x48>
   42004:	e3a02f6a 	mov	r2, #424	; 0x1a8
   42008:	ebffd38e 	bl	36e48 <uspi_assertion_failed>
   4200c:	e5940044 	ldr	r0, [r4, #68]	; 0x44
   42010:	e8bd8010 	pop	{r4, pc}
   42014:	e59f0014 	ldr	r0, [pc, #20]	; 42030 <DWHCITransferStageDataGetTransactionStatus+0x4c>
   42018:	e59f100c 	ldr	r1, [pc, #12]	; 4202c <DWHCITransferStageDataGetTransactionStatus+0x48>
   4201c:	e59f2010 	ldr	r2, [pc, #16]	; 42034 <DWHCITransferStageDataGetTransactionStatus+0x50>
   42020:	ebffd388 	bl	36e48 <uspi_assertion_failed>
   42024:	eafffff1 	b	41ff0 <DWHCITransferStageDataGetTransactionStatus+0xc>
   42028:	00056b4c 	.word	0x00056b4c
   4202c:	00056a20 	.word	0x00056a20
   42030:	00056434 	.word	0x00056434
   42034:	000001a7 	.word	0x000001a7

00042038 <DWHCITransferStageDataIsStageComplete>:
   42038:	e92d4010 	push	{r4, lr}
   4203c:	e2504000 	subs	r4, r0, #0
   42040:	0a000003 	beq	42054 <DWHCITransferStageDataIsStageComplete+0x1c>
   42044:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   42048:	e16f0f10 	clz	r0, r0
   4204c:	e1a002a0 	lsr	r0, r0, #5
   42050:	e8bd8010 	pop	{r4, pc}
   42054:	e59f000c 	ldr	r0, [pc, #12]	; 42068 <DWHCITransferStageDataIsStageComplete+0x30>
   42058:	e59f100c 	ldr	r1, [pc, #12]	; 4206c <DWHCITransferStageDataIsStageComplete+0x34>
   4205c:	e59f200c 	ldr	r2, [pc, #12]	; 42070 <DWHCITransferStageDataIsStageComplete+0x38>
   42060:	ebffd378 	bl	36e48 <uspi_assertion_failed>
   42064:	eafffff6 	b	42044 <DWHCITransferStageDataIsStageComplete+0xc>
   42068:	00056434 	.word	0x00056434
   4206c:	00056a20 	.word	0x00056a20
   42070:	000001ae 	.word	0x000001ae

00042074 <DWHCITransferStageDataGetResultLen>:
   42074:	e92d4010 	push	{r4, lr}
   42078:	e2504000 	subs	r4, r0, #0
   4207c:	0a000004 	beq	42094 <DWHCITransferStageDataGetResultLen+0x20>
   42080:	e5940028 	ldr	r0, [r4, #40]	; 0x28
   42084:	e5943038 	ldr	r3, [r4, #56]	; 0x38
   42088:	e1500003 	cmp	r0, r3
   4208c:	21a00003 	movcs	r0, r3
   42090:	e8bd8010 	pop	{r4, pc}
   42094:	e59f000c 	ldr	r0, [pc, #12]	; 420a8 <DWHCITransferStageDataGetResultLen+0x34>
   42098:	e59f100c 	ldr	r1, [pc, #12]	; 420ac <DWHCITransferStageDataGetResultLen+0x38>
   4209c:	e3a02f6d 	mov	r2, #436	; 0x1b4
   420a0:	ebffd368 	bl	36e48 <uspi_assertion_failed>
   420a4:	eafffff5 	b	42080 <DWHCITransferStageDataGetResultLen+0xc>
   420a8:	00056434 	.word	0x00056434
   420ac:	00056a20 	.word	0x00056a20

000420b0 <DWHCITransferStageDataGetURB>:
   420b0:	e92d4010 	push	{r4, lr}
   420b4:	e2504000 	subs	r4, r0, #0
   420b8:	0a000008 	beq	420e0 <DWHCITransferStageDataGetURB+0x30>
   420bc:	e5940004 	ldr	r0, [r4, #4]
   420c0:	e3500000 	cmp	r0, #0
   420c4:	18bd8010 	popne	{r4, pc}
   420c8:	e59f0024 	ldr	r0, [pc, #36]	; 420f4 <DWHCITransferStageDataGetURB+0x44>
   420cc:	e59f1024 	ldr	r1, [pc, #36]	; 420f8 <DWHCITransferStageDataGetURB+0x48>
   420d0:	e3a02d07 	mov	r2, #448	; 0x1c0
   420d4:	ebffd35b 	bl	36e48 <uspi_assertion_failed>
   420d8:	e5940004 	ldr	r0, [r4, #4]
   420dc:	e8bd8010 	pop	{r4, pc}
   420e0:	e59f0014 	ldr	r0, [pc, #20]	; 420fc <DWHCITransferStageDataGetURB+0x4c>
   420e4:	e59f100c 	ldr	r1, [pc, #12]	; 420f8 <DWHCITransferStageDataGetURB+0x48>
   420e8:	e59f2010 	ldr	r2, [pc, #16]	; 42100 <DWHCITransferStageDataGetURB+0x50>
   420ec:	ebffd355 	bl	36e48 <uspi_assertion_failed>
   420f0:	eafffff1 	b	420bc <DWHCITransferStageDataGetURB+0xc>
   420f4:	00056ad0 	.word	0x00056ad0
   420f8:	00056a20 	.word	0x00056a20
   420fc:	00056434 	.word	0x00056434
   42100:	000001bf 	.word	0x000001bf

00042104 <DWHCITransferStageDataGetFrameScheduler>:
   42104:	e92d4010 	push	{r4, lr}
   42108:	e2504000 	subs	r4, r0, #0
   4210c:	0a000003 	beq	42120 <DWHCITransferStageDataGetFrameScheduler+0x1c>
   42110:	e5940050 	ldr	r0, [r4, #80]	; 0x50
   42114:	e3500000 	cmp	r0, #0
   42118:	12840054 	addne	r0, r4, #84	; 0x54
   4211c:	e8bd8010 	pop	{r4, pc}
   42120:	e59f000c 	ldr	r0, [pc, #12]	; 42134 <DWHCITransferStageDataGetFrameScheduler+0x30>
   42124:	e59f100c 	ldr	r1, [pc, #12]	; 42138 <DWHCITransferStageDataGetFrameScheduler+0x34>
   42128:	e59f200c 	ldr	r2, [pc, #12]	; 4213c <DWHCITransferStageDataGetFrameScheduler+0x38>
   4212c:	ebffd345 	bl	36e48 <uspi_assertion_failed>
   42130:	eafffff6 	b	42110 <DWHCITransferStageDataGetFrameScheduler+0xc>
   42134:	00056434 	.word	0x00056434
   42138:	00056a20 	.word	0x00056a20
   4213c:	000001c6 	.word	0x000001c6

00042140 <USBDevice>:
   42140:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   42144:	e2504000 	subs	r4, r0, #0
   42148:	e24dd008 	sub	sp, sp, #8
   4214c:	e1a06001 	mov	r6, r1
   42150:	e1a08002 	mov	r8, r2
   42154:	e5dd7020 	ldrb	r7, [sp, #32]
   42158:	e5dd5024 	ldrb	r5, [sp, #36]	; 0x24
   4215c:	0a00002e 	beq	4221c <USBDevice+0xdc>
   42160:	e3a02000 	mov	r2, #0
   42164:	e1560002 	cmp	r6, r2
   42168:	e5846000 	str	r6, [r4]
   4216c:	e5c48005 	strb	r8, [r4, #5]
   42170:	e584300c 	str	r3, [r4, #12]
   42174:	e5c47010 	strb	r7, [r4, #16]
   42178:	e5c45011 	strb	r5, [r4, #17]
   4217c:	e5c42004 	strb	r2, [r4, #4]
   42180:	e5842008 	str	r2, [r4, #8]
   42184:	e5842014 	str	r2, [r4, #20]
   42188:	e5842018 	str	r2, [r4, #24]
   4218c:	e584201c 	str	r2, [r4, #28]
   42190:	0a000028 	beq	42238 <USBDevice+0xf8>
   42194:	e3a00018 	mov	r0, #24
   42198:	ebffd303 	bl	36dac <malloc>
   4219c:	e3500000 	cmp	r0, #0
   421a0:	e5840008 	str	r0, [r4, #8]
   421a4:	0a000016 	beq	42204 <USBDevice+0xc4>
   421a8:	e1a01004 	mov	r1, r4
   421ac:	eb000506 	bl	435cc <USBEndpoint>
   421b0:	e3550000 	cmp	r5, #0
   421b4:	0a00000d 	beq	421f0 <USBDevice+0xb0>
   421b8:	e2840020 	add	r0, r4, #32
   421bc:	e1a01004 	mov	r1, r4
   421c0:	eb002572 	bl	4b790 <USBString>
   421c4:	e284002c 	add	r0, r4, #44	; 0x2c
   421c8:	e1a01004 	mov	r1, r4
   421cc:	eb00256f 	bl	4b790 <USBString>
   421d0:	e3a02000 	mov	r2, #0
   421d4:	e2843034 	add	r3, r4, #52	; 0x34
   421d8:	e284405c 	add	r4, r4, #92	; 0x5c
   421dc:	e5a32004 	str	r2, [r3, #4]!
   421e0:	e1530004 	cmp	r3, r4
   421e4:	1afffffc 	bne	421dc <USBDevice+0x9c>
   421e8:	e28dd008 	add	sp, sp, #8
   421ec:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   421f0:	e59f0070 	ldr	r0, [pc, #112]	; 42268 <USBDevice+0x128>
   421f4:	e59f1070 	ldr	r1, [pc, #112]	; 4226c <USBDevice+0x12c>
   421f8:	e3a02043 	mov	r2, #67	; 0x43
   421fc:	ebffd311 	bl	36e48 <uspi_assertion_failed>
   42200:	eaffffec 	b	421b8 <USBDevice+0x78>
   42204:	e59f0064 	ldr	r0, [pc, #100]	; 42270 <USBDevice+0x130>
   42208:	e59f105c 	ldr	r1, [pc, #92]	; 4226c <USBDevice+0x12c>
   4220c:	e3a02040 	mov	r2, #64	; 0x40
   42210:	ebffd30c 	bl	36e48 <uspi_assertion_failed>
   42214:	e5940008 	ldr	r0, [r4, #8]
   42218:	eaffffe2 	b	421a8 <USBDevice+0x68>
   4221c:	e59f0050 	ldr	r0, [pc, #80]	; 42274 <USBDevice+0x134>
   42220:	e59f1044 	ldr	r1, [pc, #68]	; 4226c <USBDevice+0x12c>
   42224:	e3a0202f 	mov	r2, #47	; 0x2f
   42228:	e58d3004 	str	r3, [sp, #4]
   4222c:	ebffd305 	bl	36e48 <uspi_assertion_failed>
   42230:	e59d3004 	ldr	r3, [sp, #4]
   42234:	eaffffc9 	b	42160 <USBDevice+0x20>
   42238:	e59f0038 	ldr	r0, [pc, #56]	; 42278 <USBDevice+0x138>
   4223c:	e59f1028 	ldr	r1, [pc, #40]	; 4226c <USBDevice+0x12c>
   42240:	e3a0203c 	mov	r2, #60	; 0x3c
   42244:	ebffd2ff 	bl	36e48 <uspi_assertion_failed>
   42248:	e5943008 	ldr	r3, [r4, #8]
   4224c:	e3530000 	cmp	r3, #0
   42250:	0affffcf 	beq	42194 <USBDevice+0x54>
   42254:	e59f0020 	ldr	r0, [pc, #32]	; 4227c <USBDevice+0x13c>
   42258:	e59f100c 	ldr	r1, [pc, #12]	; 4226c <USBDevice+0x12c>
   4225c:	e3a0203e 	mov	r2, #62	; 0x3e
   42260:	ebffd2f8 	bl	36e48 <uspi_assertion_failed>
   42264:	eaffffca 	b	42194 <USBDevice+0x54>
   42268:	00056bd0 	.word	0x00056bd0
   4226c:	00056b78 	.word	0x00056b78
   42270:	00056bb4 	.word	0x00056bb4
   42274:	00056434 	.word	0x00056434
   42278:	00056b84 	.word	0x00056b84
   4227c:	00056b98 	.word	0x00056b98

00042280 <_USBDevice>:
   42280:	e92d40f8 	push	{r3, r4, r5, r6, r7, lr}
   42284:	e2505000 	subs	r5, r0, #0
   42288:	0a00002e 	beq	42348 <_USBDevice+0xc8>
   4228c:	e3a07000 	mov	r7, #0
   42290:	e2854034 	add	r4, r5, #52	; 0x34
   42294:	e285605c 	add	r6, r5, #92	; 0x5c
   42298:	e5b40004 	ldr	r0, [r4, #4]!
   4229c:	e3500000 	cmp	r0, #0
   422a0:	0a000003 	beq	422b4 <_USBDevice+0x34>
   422a4:	eb000c27 	bl	45348 <_USBFunction>
   422a8:	e5940000 	ldr	r0, [r4]
   422ac:	ebffd2bf 	bl	36db0 <free>
   422b0:	e5847000 	str	r7, [r4]
   422b4:	e1540006 	cmp	r4, r6
   422b8:	1afffff6 	bne	42298 <_USBDevice+0x18>
   422bc:	e595001c 	ldr	r0, [r5, #28]
   422c0:	e3500000 	cmp	r0, #0
   422c4:	0a000004 	beq	422dc <_USBDevice+0x5c>
   422c8:	eb0028c7 	bl	4c5ec <_USBConfigurationParser>
   422cc:	e595001c 	ldr	r0, [r5, #28]
   422d0:	ebffd2b6 	bl	36db0 <free>
   422d4:	e3a03000 	mov	r3, #0
   422d8:	e585301c 	str	r3, [r5, #28]
   422dc:	e5950018 	ldr	r0, [r5, #24]
   422e0:	e3500000 	cmp	r0, #0
   422e4:	0a000002 	beq	422f4 <_USBDevice+0x74>
   422e8:	ebffd2b0 	bl	36db0 <free>
   422ec:	e3a03000 	mov	r3, #0
   422f0:	e5853018 	str	r3, [r5, #24]
   422f4:	e5950014 	ldr	r0, [r5, #20]
   422f8:	e3500000 	cmp	r0, #0
   422fc:	0a000002 	beq	4230c <_USBDevice+0x8c>
   42300:	ebffd2aa 	bl	36db0 <free>
   42304:	e3a03000 	mov	r3, #0
   42308:	e5853014 	str	r3, [r5, #20]
   4230c:	e5950008 	ldr	r0, [r5, #8]
   42310:	e3500000 	cmp	r0, #0
   42314:	0a000004 	beq	4232c <_USBDevice+0xac>
   42318:	eb000565 	bl	438b4 <_USBEndpoint>
   4231c:	e5950008 	ldr	r0, [r5, #8]
   42320:	ebffd2a2 	bl	36db0 <free>
   42324:	e3a03000 	mov	r3, #0
   42328:	e5853008 	str	r3, [r5, #8]
   4232c:	e1a00005 	mov	r0, r5
   42330:	e3a03000 	mov	r3, #0
   42334:	e480302c 	str	r3, [r0], #44	; 0x2c
   42338:	eb00257e 	bl	4b938 <_USBString>
   4233c:	e2850020 	add	r0, r5, #32
   42340:	e8bd40f8 	pop	{r3, r4, r5, r6, r7, lr}
   42344:	ea00257b 	b	4b938 <_USBString>
   42348:	e59f000c 	ldr	r0, [pc, #12]	; 4235c <_USBDevice+0xdc>
   4234c:	e59f100c 	ldr	r1, [pc, #12]	; 42360 <_USBDevice+0xe0>
   42350:	e3a02050 	mov	r2, #80	; 0x50
   42354:	ebffd2bb 	bl	36e48 <uspi_assertion_failed>
   42358:	eaffffcb 	b	4228c <_USBDevice+0xc>
   4235c:	00056434 	.word	0x00056434
   42360:	00056b78 	.word	0x00056b78

00042364 <USBDeviceGetName>:
   42364:	e92d4070 	push	{r4, r5, r6, lr}
   42368:	e2506000 	subs	r6, r0, #0
   4236c:	e24dd008 	sub	sp, sp, #8
   42370:	e1a05001 	mov	r5, r1
   42374:	0a000031 	beq	42440 <USBDeviceGetName+0xdc>
   42378:	e3a0000c 	mov	r0, #12
   4237c:	ebffd28a 	bl	36dac <malloc>
   42380:	e2504000 	subs	r4, r0, #0
   42384:	0a000032 	beq	42454 <USBDeviceGetName+0xf0>
   42388:	e1a00004 	mov	r0, r4
   4238c:	eb0014ad 	bl	47648 <String>
   42390:	e3550000 	cmp	r5, #0
   42394:	0a00001a 	beq	42404 <USBDeviceGetName+0xa0>
   42398:	e3550001 	cmp	r5, #1
   4239c:	0a000009 	beq	423c8 <USBDeviceGetName+0x64>
   423a0:	e59f00f0 	ldr	r0, [pc, #240]	; 42498 <USBDeviceGetName+0x134>
   423a4:	e59f10f0 	ldr	r1, [pc, #240]	; 4249c <USBDeviceGetName+0x138>
   423a8:	e59f20f0 	ldr	r2, [pc, #240]	; 424a0 <USBDeviceGetName+0x13c>
   423ac:	ebffd2a5 	bl	36e48 <uspi_assertion_failed>
   423b0:	e1a00004 	mov	r0, r4
   423b4:	e59f10e8 	ldr	r1, [pc, #232]	; 424a4 <USBDeviceGetName+0x140>
   423b8:	eb0014e5 	bl	47754 <StringSet>
   423bc:	e1a00004 	mov	r0, r4
   423c0:	e28dd008 	add	sp, sp, #8
   423c4:	e8bd8070 	pop	{r4, r5, r6, pc}
   423c8:	e5961014 	ldr	r1, [r6, #20]
   423cc:	e3510000 	cmp	r1, #0
   423d0:	0a00002a 	beq	42480 <USBDeviceGetName+0x11c>
   423d4:	e5d12004 	ldrb	r2, [r1, #4]
   423d8:	e2423001 	sub	r3, r2, #1
   423dc:	e6ef3073 	uxtb	r3, r3
   423e0:	e35300fd 	cmp	r3, #253	; 0xfd
   423e4:	8afffff1 	bhi	423b0 <USBDeviceGetName+0x4c>
   423e8:	e5d13005 	ldrb	r3, [r1, #5]
   423ec:	e5d11006 	ldrb	r1, [r1, #6]
   423f0:	e1a00004 	mov	r0, r4
   423f4:	e58d1000 	str	r1, [sp]
   423f8:	e59f10a8 	ldr	r1, [pc, #168]	; 424a8 <USBDeviceGetName+0x144>
   423fc:	eb001711 	bl	48048 <StringFormat>
   42400:	eaffffed 	b	423bc <USBDeviceGetName+0x58>
   42404:	e5961014 	ldr	r1, [r6, #20]
   42408:	e3510000 	cmp	r1, #0
   4240c:	0a000015 	beq	42468 <USBDeviceGetName+0x104>
   42410:	e5d10009 	ldrb	r0, [r1, #9]
   42414:	e5d12008 	ldrb	r2, [r1, #8]
   42418:	e5d1300a 	ldrb	r3, [r1, #10]
   4241c:	e5d1100b 	ldrb	r1, [r1, #11]
   42420:	e1822400 	orr	r2, r2, r0, lsl #8
   42424:	e1833401 	orr	r3, r3, r1, lsl #8
   42428:	e1a00004 	mov	r0, r4
   4242c:	e59f1078 	ldr	r1, [pc, #120]	; 424ac <USBDeviceGetName+0x148>
   42430:	eb001704 	bl	48048 <StringFormat>
   42434:	e1a00004 	mov	r0, r4
   42438:	e28dd008 	add	sp, sp, #8
   4243c:	e8bd8070 	pop	{r4, r5, r6, pc}
   42440:	e59f0068 	ldr	r0, [pc, #104]	; 424b0 <USBDeviceGetName+0x14c>
   42444:	e59f1050 	ldr	r1, [pc, #80]	; 4249c <USBDeviceGetName+0x138>
   42448:	e59f2064 	ldr	r2, [pc, #100]	; 424b4 <USBDeviceGetName+0x150>
   4244c:	ebffd27d 	bl	36e48 <uspi_assertion_failed>
   42450:	eaffffc8 	b	42378 <USBDeviceGetName+0x14>
   42454:	e59f005c 	ldr	r0, [pc, #92]	; 424b8 <USBDeviceGetName+0x154>
   42458:	e59f103c 	ldr	r1, [pc, #60]	; 4249c <USBDeviceGetName+0x138>
   4245c:	e3a02f69 	mov	r2, #420	; 0x1a4
   42460:	ebffd278 	bl	36e48 <uspi_assertion_failed>
   42464:	eaffffc7 	b	42388 <USBDeviceGetName+0x24>
   42468:	e59f102c 	ldr	r1, [pc, #44]	; 4249c <USBDeviceGetName+0x138>
   4246c:	e59f0048 	ldr	r0, [pc, #72]	; 424bc <USBDeviceGetName+0x158>
   42470:	e59f2048 	ldr	r2, [pc, #72]	; 424c0 <USBDeviceGetName+0x15c>
   42474:	ebffd273 	bl	36e48 <uspi_assertion_failed>
   42478:	e5961014 	ldr	r1, [r6, #20]
   4247c:	eaffffe3 	b	42410 <USBDeviceGetName+0xac>
   42480:	e59f1014 	ldr	r1, [pc, #20]	; 4249c <USBDeviceGetName+0x138>
   42484:	e59f0030 	ldr	r0, [pc, #48]	; 424bc <USBDeviceGetName+0x158>
   42488:	e59f2034 	ldr	r2, [pc, #52]	; 424c4 <USBDeviceGetName+0x160>
   4248c:	ebffd26d 	bl	36e48 <uspi_assertion_failed>
   42490:	e5961014 	ldr	r1, [r6, #20]
   42494:	eaffffce 	b	423d4 <USBDeviceGetName+0x70>
   42498:	000563cc 	.word	0x000563cc
   4249c:	00056b78 	.word	0x00056b78
   424a0:	000001be 	.word	0x000001be
   424a4:	00056c2c 	.word	0x00056c2c
   424a8:	00056c20 	.word	0x00056c20
   424ac:	00056c14 	.word	0x00056c14
   424b0:	00056434 	.word	0x00056434
   424b4:	000001a1 	.word	0x000001a1
   424b8:	00056be8 	.word	0x00056be8
   424bc:	00056bf8 	.word	0x00056bf8
   424c0:	000001aa 	.word	0x000001aa
   424c4:	000001b1 	.word	0x000001b1

000424c8 <USBDeviceGetNames>:
   424c8:	e92d40f8 	push	{r3, r4, r5, r6, r7, lr}
   424cc:	e2507000 	subs	r7, r0, #0
   424d0:	0a000034 	beq	425a8 <USBDeviceGetNames+0xe0>
   424d4:	e3a0000c 	mov	r0, #12
   424d8:	ebffd233 	bl	36dac <malloc>
   424dc:	e2506000 	subs	r6, r0, #0
   424e0:	0a000035 	beq	425bc <USBDeviceGetNames+0xf4>
   424e4:	e1a00006 	mov	r0, r6
   424e8:	eb001456 	bl	47648 <String>
   424ec:	e3a05000 	mov	r5, #0
   424f0:	e1a00007 	mov	r0, r7
   424f4:	e1a01005 	mov	r1, r5
   424f8:	ebffff99 	bl	42364 <USBDeviceGetName>
   424fc:	e2504000 	subs	r4, r0, #0
   42500:	0a000023 	beq	42594 <USBDeviceGetNames+0xcc>
   42504:	e1a00004 	mov	r0, r4
   42508:	e59f10c0 	ldr	r1, [pc, #192]	; 425d0 <USBDeviceGetNames+0x108>
   4250c:	eb0014df 	bl	47890 <StringCompare>
   42510:	e3500000 	cmp	r0, #0
   42514:	1a000010 	bne	4255c <USBDeviceGetNames+0x94>
   42518:	e1a00004 	mov	r0, r4
   4251c:	eb00146b 	bl	476d0 <_String>
   42520:	e1a00004 	mov	r0, r4
   42524:	ebffd221 	bl	36db0 <free>
   42528:	e3550001 	cmp	r5, #1
   4252c:	1a000008 	bne	42554 <USBDeviceGetNames+0x8c>
   42530:	e1a00006 	mov	r0, r6
   42534:	eb00149f 	bl	477b8 <StringGetLength>
   42538:	e3500000 	cmp	r0, #0
   4253c:	1a000002 	bne	4254c <USBDeviceGetNames+0x84>
   42540:	e1a00006 	mov	r0, r6
   42544:	e59f1084 	ldr	r1, [pc, #132]	; 425d0 <USBDeviceGetNames+0x108>
   42548:	eb001481 	bl	47754 <StringSet>
   4254c:	e1a00006 	mov	r0, r6
   42550:	e8bd80f8 	pop	{r3, r4, r5, r6, r7, pc}
   42554:	e3a05001 	mov	r5, #1
   42558:	eaffffe4 	b	424f0 <USBDeviceGetNames+0x28>
   4255c:	e1a00006 	mov	r0, r6
   42560:	eb001494 	bl	477b8 <StringGetLength>
   42564:	e3500000 	cmp	r0, #0
   42568:	1a000005 	bne	42584 <USBDeviceGetNames+0xbc>
   4256c:	e1a00004 	mov	r0, r4
   42570:	eb001467 	bl	47714 <StringGet>
   42574:	e1a01000 	mov	r1, r0
   42578:	e1a00006 	mov	r0, r6
   4257c:	eb00149c 	bl	477f4 <StringAppend>
   42580:	eaffffe4 	b	42518 <USBDeviceGetNames+0x50>
   42584:	e1a00006 	mov	r0, r6
   42588:	e59f1044 	ldr	r1, [pc, #68]	; 425d4 <USBDeviceGetNames+0x10c>
   4258c:	eb001498 	bl	477f4 <StringAppend>
   42590:	eafffff5 	b	4256c <USBDeviceGetNames+0xa4>
   42594:	e59f003c 	ldr	r0, [pc, #60]	; 425d8 <USBDeviceGetNames+0x110>
   42598:	e59f103c 	ldr	r1, [pc, #60]	; 425dc <USBDeviceGetNames+0x114>
   4259c:	e59f203c 	ldr	r2, [pc, #60]	; 425e0 <USBDeviceGetNames+0x118>
   425a0:	ebffd228 	bl	36e48 <uspi_assertion_failed>
   425a4:	eaffffd6 	b	42504 <USBDeviceGetNames+0x3c>
   425a8:	e59f0034 	ldr	r0, [pc, #52]	; 425e4 <USBDeviceGetNames+0x11c>
   425ac:	e59f1028 	ldr	r1, [pc, #40]	; 425dc <USBDeviceGetNames+0x114>
   425b0:	e59f2030 	ldr	r2, [pc, #48]	; 425e8 <USBDeviceGetNames+0x120>
   425b4:	ebffd223 	bl	36e48 <uspi_assertion_failed>
   425b8:	eaffffc5 	b	424d4 <USBDeviceGetNames+0xc>
   425bc:	e59f0028 	ldr	r0, [pc, #40]	; 425ec <USBDeviceGetNames+0x124>
   425c0:	e59f1014 	ldr	r1, [pc, #20]	; 425dc <USBDeviceGetNames+0x114>
   425c4:	e3a02f73 	mov	r2, #460	; 0x1cc
   425c8:	ebffd21e 	bl	36e48 <uspi_assertion_failed>
   425cc:	eaffffc4 	b	424e4 <USBDeviceGetNames+0x1c>
   425d0:	00056c2c 	.word	0x00056c2c
   425d4:	00056c44 	.word	0x00056c44
   425d8:	00057534 	.word	0x00057534
   425dc:	00056b78 	.word	0x00056b78
   425e0:	000001d2 	.word	0x000001d2
   425e4:	00056434 	.word	0x00056434
   425e8:	000001c9 	.word	0x000001c9
   425ec:	00056c34 	.word	0x00056c34

000425f0 <USBDeviceGetAddress>:
   425f0:	e92d4010 	push	{r4, lr}
   425f4:	e2504000 	subs	r4, r0, #0
   425f8:	0a000001 	beq	42604 <USBDeviceGetAddress+0x14>
   425fc:	e5d40004 	ldrb	r0, [r4, #4]
   42600:	e8bd8010 	pop	{r4, pc}
   42604:	e59f0010 	ldr	r0, [pc, #16]	; 4261c <USBDeviceGetAddress+0x2c>
   42608:	e59f1010 	ldr	r1, [pc, #16]	; 42620 <USBDeviceGetAddress+0x30>
   4260c:	e3a02f7b 	mov	r2, #492	; 0x1ec
   42610:	ebffd20c 	bl	36e48 <uspi_assertion_failed>
   42614:	e5d40004 	ldrb	r0, [r4, #4]
   42618:	e8bd8010 	pop	{r4, pc}
   4261c:	00056434 	.word	0x00056434
   42620:	00056b78 	.word	0x00056b78

00042624 <USBDeviceGetSpeed>:
   42624:	e92d4010 	push	{r4, lr}
   42628:	e2504000 	subs	r4, r0, #0
   4262c:	0a000001 	beq	42638 <USBDeviceGetSpeed+0x14>
   42630:	e5d40005 	ldrb	r0, [r4, #5]
   42634:	e8bd8010 	pop	{r4, pc}
   42638:	e59f0010 	ldr	r0, [pc, #16]	; 42650 <USBDeviceGetSpeed+0x2c>
   4263c:	e59f1010 	ldr	r1, [pc, #16]	; 42654 <USBDeviceGetSpeed+0x30>
   42640:	e59f2010 	ldr	r2, [pc, #16]	; 42658 <USBDeviceGetSpeed+0x34>
   42644:	ebffd1ff 	bl	36e48 <uspi_assertion_failed>
   42648:	e5d40005 	ldrb	r0, [r4, #5]
   4264c:	e8bd8010 	pop	{r4, pc}
   42650:	00056434 	.word	0x00056434
   42654:	00056b78 	.word	0x00056b78
   42658:	000001f2 	.word	0x000001f2

0004265c <USBDeviceIsSplit>:
   4265c:	e92d4010 	push	{r4, lr}
   42660:	e2504000 	subs	r4, r0, #0
   42664:	0a000001 	beq	42670 <USBDeviceIsSplit+0x14>
   42668:	e594000c 	ldr	r0, [r4, #12]
   4266c:	e8bd8010 	pop	{r4, pc}
   42670:	e59f0010 	ldr	r0, [pc, #16]	; 42688 <USBDeviceIsSplit+0x2c>
   42674:	e59f1010 	ldr	r1, [pc, #16]	; 4268c <USBDeviceIsSplit+0x30>
   42678:	e3a02f7e 	mov	r2, #504	; 0x1f8
   4267c:	ebffd1f1 	bl	36e48 <uspi_assertion_failed>
   42680:	e594000c 	ldr	r0, [r4, #12]
   42684:	e8bd8010 	pop	{r4, pc}
   42688:	00056434 	.word	0x00056434
   4268c:	00056b78 	.word	0x00056b78

00042690 <USBDeviceGetHubAddress>:
   42690:	e92d4010 	push	{r4, lr}
   42694:	e2504000 	subs	r4, r0, #0
   42698:	0a000001 	beq	426a4 <USBDeviceGetHubAddress+0x14>
   4269c:	e5d40010 	ldrb	r0, [r4, #16]
   426a0:	e8bd8010 	pop	{r4, pc}
   426a4:	e59f0010 	ldr	r0, [pc, #16]	; 426bc <USBDeviceGetHubAddress+0x2c>
   426a8:	e59f1010 	ldr	r1, [pc, #16]	; 426c0 <USBDeviceGetHubAddress+0x30>
   426ac:	e59f2010 	ldr	r2, [pc, #16]	; 426c4 <USBDeviceGetHubAddress+0x34>
   426b0:	ebffd1e4 	bl	36e48 <uspi_assertion_failed>
   426b4:	e5d40010 	ldrb	r0, [r4, #16]
   426b8:	e8bd8010 	pop	{r4, pc}
   426bc:	00056434 	.word	0x00056434
   426c0:	00056b78 	.word	0x00056b78
   426c4:	000001fe 	.word	0x000001fe

000426c8 <USBDeviceGetHubPortNumber>:
   426c8:	e92d4010 	push	{r4, lr}
   426cc:	e2504000 	subs	r4, r0, #0
   426d0:	0a000001 	beq	426dc <USBDeviceGetHubPortNumber+0x14>
   426d4:	e5d40011 	ldrb	r0, [r4, #17]
   426d8:	e8bd8010 	pop	{r4, pc}
   426dc:	e59f0010 	ldr	r0, [pc, #16]	; 426f4 <USBDeviceGetHubPortNumber+0x2c>
   426e0:	e59f1010 	ldr	r1, [pc, #16]	; 426f8 <USBDeviceGetHubPortNumber+0x30>
   426e4:	e3a02f81 	mov	r2, #516	; 0x204
   426e8:	ebffd1d6 	bl	36e48 <uspi_assertion_failed>
   426ec:	e5d40011 	ldrb	r0, [r4, #17]
   426f0:	e8bd8010 	pop	{r4, pc}
   426f4:	00056434 	.word	0x00056434
   426f8:	00056b78 	.word	0x00056b78

000426fc <USBDeviceGetEndpoint0>:
   426fc:	e92d4010 	push	{r4, lr}
   42700:	e2504000 	subs	r4, r0, #0
   42704:	0a000008 	beq	4272c <USBDeviceGetEndpoint0+0x30>
   42708:	e5940008 	ldr	r0, [r4, #8]
   4270c:	e3500000 	cmp	r0, #0
   42710:	18bd8010 	popne	{r4, pc}
   42714:	e59f0024 	ldr	r0, [pc, #36]	; 42740 <USBDeviceGetEndpoint0+0x44>
   42718:	e59f1024 	ldr	r1, [pc, #36]	; 42744 <USBDeviceGetEndpoint0+0x48>
   4271c:	e59f2024 	ldr	r2, [pc, #36]	; 42748 <USBDeviceGetEndpoint0+0x4c>
   42720:	ebffd1c8 	bl	36e48 <uspi_assertion_failed>
   42724:	e5940008 	ldr	r0, [r4, #8]
   42728:	e8bd8010 	pop	{r4, pc}
   4272c:	e59f0018 	ldr	r0, [pc, #24]	; 4274c <USBDeviceGetEndpoint0+0x50>
   42730:	e59f100c 	ldr	r1, [pc, #12]	; 42744 <USBDeviceGetEndpoint0+0x48>
   42734:	e59f2014 	ldr	r2, [pc, #20]	; 42750 <USBDeviceGetEndpoint0+0x54>
   42738:	ebffd1c2 	bl	36e48 <uspi_assertion_failed>
   4273c:	eafffff1 	b	42708 <USBDeviceGetEndpoint0+0xc>
   42740:	00056bb4 	.word	0x00056bb4
   42744:	00056b78 	.word	0x00056b78
   42748:	0000020b 	.word	0x0000020b
   4274c:	00056434 	.word	0x00056434
   42750:	0000020a 	.word	0x0000020a

00042754 <USBDeviceGetHost>:
   42754:	e92d4010 	push	{r4, lr}
   42758:	e2504000 	subs	r4, r0, #0
   4275c:	0a000008 	beq	42784 <USBDeviceGetHost+0x30>
   42760:	e5940000 	ldr	r0, [r4]
   42764:	e3500000 	cmp	r0, #0
   42768:	18bd8010 	popne	{r4, pc}
   4276c:	e59f0024 	ldr	r0, [pc, #36]	; 42798 <USBDeviceGetHost+0x44>
   42770:	e59f1024 	ldr	r1, [pc, #36]	; 4279c <USBDeviceGetHost+0x48>
   42774:	e59f2024 	ldr	r2, [pc, #36]	; 427a0 <USBDeviceGetHost+0x4c>
   42778:	ebffd1b2 	bl	36e48 <uspi_assertion_failed>
   4277c:	e5940000 	ldr	r0, [r4]
   42780:	e8bd8010 	pop	{r4, pc}
   42784:	e59f0018 	ldr	r0, [pc, #24]	; 427a4 <USBDeviceGetHost+0x50>
   42788:	e59f100c 	ldr	r1, [pc, #12]	; 4279c <USBDeviceGetHost+0x48>
   4278c:	e59f2014 	ldr	r2, [pc, #20]	; 427a8 <USBDeviceGetHost+0x54>
   42790:	ebffd1ac 	bl	36e48 <uspi_assertion_failed>
   42794:	eafffff1 	b	42760 <USBDeviceGetHost+0xc>
   42798:	00056b84 	.word	0x00056b84
   4279c:	00056b78 	.word	0x00056b78
   427a0:	00000212 	.word	0x00000212
   427a4:	00056434 	.word	0x00056434
   427a8:	00000211 	.word	0x00000211

000427ac <USBDeviceGetDeviceDescriptor>:
   427ac:	e92d4010 	push	{r4, lr}
   427b0:	e2504000 	subs	r4, r0, #0
   427b4:	0a000008 	beq	427dc <USBDeviceGetDeviceDescriptor+0x30>
   427b8:	e5940014 	ldr	r0, [r4, #20]
   427bc:	e3500000 	cmp	r0, #0
   427c0:	18bd8010 	popne	{r4, pc}
   427c4:	e59f0024 	ldr	r0, [pc, #36]	; 427f0 <USBDeviceGetDeviceDescriptor+0x44>
   427c8:	e59f1024 	ldr	r1, [pc, #36]	; 427f4 <USBDeviceGetDeviceDescriptor+0x48>
   427cc:	e59f2024 	ldr	r2, [pc, #36]	; 427f8 <USBDeviceGetDeviceDescriptor+0x4c>
   427d0:	ebffd19c 	bl	36e48 <uspi_assertion_failed>
   427d4:	e5940014 	ldr	r0, [r4, #20]
   427d8:	e8bd8010 	pop	{r4, pc}
   427dc:	e59f0018 	ldr	r0, [pc, #24]	; 427fc <USBDeviceGetDeviceDescriptor+0x50>
   427e0:	e59f100c 	ldr	r1, [pc, #12]	; 427f4 <USBDeviceGetDeviceDescriptor+0x48>
   427e4:	e3a02f86 	mov	r2, #536	; 0x218
   427e8:	ebffd196 	bl	36e48 <uspi_assertion_failed>
   427ec:	eafffff1 	b	427b8 <USBDeviceGetDeviceDescriptor+0xc>
   427f0:	00056bf8 	.word	0x00056bf8
   427f4:	00056b78 	.word	0x00056b78
   427f8:	00000219 	.word	0x00000219
   427fc:	00056434 	.word	0x00056434

00042800 <USBDeviceGetConfigurationDescriptor>:
   42800:	e92d4010 	push	{r4, lr}
   42804:	e2504000 	subs	r4, r0, #0
   42808:	0a000008 	beq	42830 <USBDeviceGetConfigurationDescriptor+0x30>
   4280c:	e5940018 	ldr	r0, [r4, #24]
   42810:	e3500000 	cmp	r0, #0
   42814:	18bd8010 	popne	{r4, pc}
   42818:	e59f0024 	ldr	r0, [pc, #36]	; 42844 <USBDeviceGetConfigurationDescriptor+0x44>
   4281c:	e59f1024 	ldr	r1, [pc, #36]	; 42848 <USBDeviceGetConfigurationDescriptor+0x48>
   42820:	e3a02e22 	mov	r2, #544	; 0x220
   42824:	ebffd187 	bl	36e48 <uspi_assertion_failed>
   42828:	e5940018 	ldr	r0, [r4, #24]
   4282c:	e8bd8010 	pop	{r4, pc}
   42830:	e59f0014 	ldr	r0, [pc, #20]	; 4284c <USBDeviceGetConfigurationDescriptor+0x4c>
   42834:	e59f100c 	ldr	r1, [pc, #12]	; 42848 <USBDeviceGetConfigurationDescriptor+0x48>
   42838:	e59f2010 	ldr	r2, [pc, #16]	; 42850 <USBDeviceGetConfigurationDescriptor+0x50>
   4283c:	ebffd181 	bl	36e48 <uspi_assertion_failed>
   42840:	eafffff1 	b	4280c <USBDeviceGetConfigurationDescriptor+0xc>
   42844:	00056c48 	.word	0x00056c48
   42848:	00056b78 	.word	0x00056b78
   4284c:	00056434 	.word	0x00056434
   42850:	0000021f 	.word	0x0000021f

00042854 <USBDeviceGetDescriptor>:
   42854:	e92d4038 	push	{r3, r4, r5, lr}
   42858:	e2504000 	subs	r4, r0, #0
   4285c:	e1a05001 	mov	r5, r1
   42860:	0a00000d 	beq	4289c <USBDeviceGetDescriptor+0x48>
   42864:	e594001c 	ldr	r0, [r4, #28]
   42868:	e3500000 	cmp	r0, #0
   4286c:	0a000002 	beq	4287c <USBDeviceGetDescriptor+0x28>
   42870:	e1a01005 	mov	r1, r5
   42874:	e8bd4038 	pop	{r3, r4, r5, lr}
   42878:	ea002775 	b	4c654 <USBConfigurationParserGetDescriptor>
   4287c:	e59f002c 	ldr	r0, [pc, #44]	; 428b0 <USBDeviceGetDescriptor+0x5c>
   42880:	e59f102c 	ldr	r1, [pc, #44]	; 428b4 <USBDeviceGetDescriptor+0x60>
   42884:	e59f202c 	ldr	r2, [pc, #44]	; 428b8 <USBDeviceGetDescriptor+0x64>
   42888:	ebffd16e 	bl	36e48 <uspi_assertion_failed>
   4288c:	e594001c 	ldr	r0, [r4, #28]
   42890:	e1a01005 	mov	r1, r5
   42894:	e8bd4038 	pop	{r3, r4, r5, lr}
   42898:	ea00276d 	b	4c654 <USBConfigurationParserGetDescriptor>
   4289c:	e59f0018 	ldr	r0, [pc, #24]	; 428bc <USBDeviceGetDescriptor+0x68>
   428a0:	e59f100c 	ldr	r1, [pc, #12]	; 428b4 <USBDeviceGetDescriptor+0x60>
   428a4:	e59f2014 	ldr	r2, [pc, #20]	; 428c0 <USBDeviceGetDescriptor+0x6c>
   428a8:	ebffd166 	bl	36e48 <uspi_assertion_failed>
   428ac:	eaffffec 	b	42864 <USBDeviceGetDescriptor+0x10>
   428b0:	00056c64 	.word	0x00056c64
   428b4:	00056b78 	.word	0x00056b78
   428b8:	00000227 	.word	0x00000227
   428bc:	00056434 	.word	0x00056434
   428c0:	00000226 	.word	0x00000226

000428c4 <USBDeviceConfigurationError>:
   428c4:	e92d4038 	push	{r3, r4, r5, lr}
   428c8:	e2504000 	subs	r4, r0, #0
   428cc:	e1a05001 	mov	r5, r1
   428d0:	0a00000d 	beq	4290c <USBDeviceConfigurationError+0x48>
   428d4:	e594001c 	ldr	r0, [r4, #28]
   428d8:	e3500000 	cmp	r0, #0
   428dc:	0a000002 	beq	428ec <USBDeviceConfigurationError+0x28>
   428e0:	e1a01005 	mov	r1, r5
   428e4:	e8bd4038 	pop	{r3, r4, r5, lr}
   428e8:	ea0027ab 	b	4c79c <USBConfigurationParserError>
   428ec:	e59f002c 	ldr	r0, [pc, #44]	; 42920 <USBDeviceConfigurationError+0x5c>
   428f0:	e59f102c 	ldr	r1, [pc, #44]	; 42924 <USBDeviceConfigurationError+0x60>
   428f4:	e59f202c 	ldr	r2, [pc, #44]	; 42928 <USBDeviceConfigurationError+0x64>
   428f8:	ebffd152 	bl	36e48 <uspi_assertion_failed>
   428fc:	e594001c 	ldr	r0, [r4, #28]
   42900:	e1a01005 	mov	r1, r5
   42904:	e8bd4038 	pop	{r3, r4, r5, lr}
   42908:	ea0027a3 	b	4c79c <USBConfigurationParserError>
   4290c:	e59f0018 	ldr	r0, [pc, #24]	; 4292c <USBDeviceConfigurationError+0x68>
   42910:	e59f100c 	ldr	r1, [pc, #12]	; 42924 <USBDeviceConfigurationError+0x60>
   42914:	e59f2014 	ldr	r2, [pc, #20]	; 42930 <USBDeviceConfigurationError+0x6c>
   42918:	ebffd14a 	bl	36e48 <uspi_assertion_failed>
   4291c:	eaffffec 	b	428d4 <USBDeviceConfigurationError+0x10>
   42920:	00056c64 	.word	0x00056c64
   42924:	00056b78 	.word	0x00056b78
   42928:	0000022e 	.word	0x0000022e
   4292c:	00056434 	.word	0x00056434
   42930:	0000022d 	.word	0x0000022d

00042934 <USBDeviceSetAddress>:
   42934:	e92d4038 	push	{r3, r4, r5, lr}
   42938:	e2505000 	subs	r5, r0, #0
   4293c:	e1a04001 	mov	r4, r1
   42940:	0a000009 	beq	4296c <USBDeviceSetAddress+0x38>
   42944:	e3140080 	tst	r4, #128	; 0x80
   42948:	1a000001 	bne	42954 <USBDeviceSetAddress+0x20>
   4294c:	e5c54004 	strb	r4, [r5, #4]
   42950:	e8bd8038 	pop	{r3, r4, r5, pc}
   42954:	e59f0024 	ldr	r0, [pc, #36]	; 42980 <USBDeviceSetAddress+0x4c>
   42958:	e59f1024 	ldr	r1, [pc, #36]	; 42984 <USBDeviceSetAddress+0x50>
   4295c:	e59f2024 	ldr	r2, [pc, #36]	; 42988 <USBDeviceSetAddress+0x54>
   42960:	ebffd138 	bl	36e48 <uspi_assertion_failed>
   42964:	e5c54004 	strb	r4, [r5, #4]
   42968:	e8bd8038 	pop	{r3, r4, r5, pc}
   4296c:	e59f0018 	ldr	r0, [pc, #24]	; 4298c <USBDeviceSetAddress+0x58>
   42970:	e59f100c 	ldr	r1, [pc, #12]	; 42984 <USBDeviceSetAddress+0x50>
   42974:	e3a02f8d 	mov	r2, #564	; 0x234
   42978:	ebffd132 	bl	36e48 <uspi_assertion_failed>
   4297c:	eafffff0 	b	42944 <USBDeviceSetAddress+0x10>
   42980:	00056c80 	.word	0x00056c80
   42984:	00056b78 	.word	0x00056b78
   42988:	00000236 	.word	0x00000236
   4298c:	00056434 	.word	0x00056434

00042990 <USBDeviceLogWrite>:
   42990:	e92d000c 	push	{r2, r3}
   42994:	e92d4070 	push	{r4, r5, r6, lr}
   42998:	e2505000 	subs	r5, r0, #0
   4299c:	e24dd028 	sub	sp, sp, #40	; 0x28
   429a0:	e1a06001 	mov	r6, r1
   429a4:	e59d4038 	ldr	r4, [sp, #56]	; 0x38
   429a8:	0a000028 	beq	42a50 <USBDeviceLogWrite+0xc0>
   429ac:	e3540000 	cmp	r4, #0
   429b0:	0a000021 	beq	42a3c <USBDeviceLogWrite+0xac>
   429b4:	e28d0010 	add	r0, sp, #16
   429b8:	eb001322 	bl	47648 <String>
   429bc:	e5d52011 	ldrb	r2, [r5, #17]
   429c0:	e5d53010 	ldrb	r3, [r5, #16]
   429c4:	e28d0010 	add	r0, sp, #16
   429c8:	e58d2000 	str	r2, [sp]
   429cc:	e59f1090 	ldr	r1, [pc, #144]	; 42a64 <USBDeviceLogWrite+0xd4>
   429d0:	e59f2090 	ldr	r2, [pc, #144]	; 42a68 <USBDeviceLogWrite+0xd8>
   429d4:	eb00159b 	bl	48048 <StringFormat>
   429d8:	e28d303c 	add	r3, sp, #60	; 0x3c
   429dc:	e28d001c 	add	r0, sp, #28
   429e0:	e58d300c 	str	r3, [sp, #12]
   429e4:	eb001317 	bl	47648 <String>
   429e8:	e1a01004 	mov	r1, r4
   429ec:	e59d200c 	ldr	r2, [sp, #12]
   429f0:	e28d001c 	add	r0, sp, #28
   429f4:	eb00145e 	bl	47b74 <StringFormatV>
   429f8:	e28d0010 	add	r0, sp, #16
   429fc:	eb001344 	bl	47714 <StringGet>
   42a00:	e1a04000 	mov	r4, r0
   42a04:	e28d001c 	add	r0, sp, #28
   42a08:	eb001341 	bl	47714 <StringGet>
   42a0c:	e1a01006 	mov	r1, r6
   42a10:	e1a02000 	mov	r2, r0
   42a14:	e1a00004 	mov	r0, r4
   42a18:	ebff85d6 	bl	24178 <LogWrite>
   42a1c:	e28d001c 	add	r0, sp, #28
   42a20:	eb00132a 	bl	476d0 <_String>
   42a24:	e28d0010 	add	r0, sp, #16
   42a28:	eb001328 	bl	476d0 <_String>
   42a2c:	e28dd028 	add	sp, sp, #40	; 0x28
   42a30:	e8bd4070 	pop	{r4, r5, r6, lr}
   42a34:	e28dd008 	add	sp, sp, #8
   42a38:	e12fff1e 	bx	lr
   42a3c:	e59f0028 	ldr	r0, [pc, #40]	; 42a6c <USBDeviceLogWrite+0xdc>
   42a40:	e59f1028 	ldr	r1, [pc, #40]	; 42a70 <USBDeviceLogWrite+0xe0>
   42a44:	e59f2028 	ldr	r2, [pc, #40]	; 42a74 <USBDeviceLogWrite+0xe4>
   42a48:	ebffd0fe 	bl	36e48 <uspi_assertion_failed>
   42a4c:	eaffffd8 	b	429b4 <USBDeviceLogWrite+0x24>
   42a50:	e59f0020 	ldr	r0, [pc, #32]	; 42a78 <USBDeviceLogWrite+0xe8>
   42a54:	e59f1014 	ldr	r1, [pc, #20]	; 42a70 <USBDeviceLogWrite+0xe0>
   42a58:	e59f201c 	ldr	r2, [pc, #28]	; 42a7c <USBDeviceLogWrite+0xec>
   42a5c:	ebffd0f9 	bl	36e48 <uspi_assertion_failed>
   42a60:	eaffffd1 	b	429ac <USBDeviceLogWrite+0x1c>
   42a64:	00056cb0 	.word	0x00056cb0
   42a68:	00056b70 	.word	0x00056b70
   42a6c:	00056ca0 	.word	0x00056ca0
   42a70:	00056b78 	.word	0x00056b78
   42a74:	0000023f 	.word	0x0000023f
   42a78:	00056434 	.word	0x00056434
   42a7c:	0000023e 	.word	0x0000023e

00042a80 <USBDeviceInitialize>:
   42a80:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
   42a84:	e2504000 	subs	r4, r0, #0
   42a88:	e24dd014 	sub	sp, sp, #20
   42a8c:	0a000089 	beq	42cb8 <USBDeviceInitialize+0x238>
   42a90:	e5943014 	ldr	r3, [r4, #20]
   42a94:	e3530000 	cmp	r3, #0
   42a98:	0a000003 	beq	42aac <USBDeviceInitialize+0x2c>
   42a9c:	e59f0670 	ldr	r0, [pc, #1648]	; 43114 <USBDeviceInitialize+0x694>
   42aa0:	e59f1670 	ldr	r1, [pc, #1648]	; 43118 <USBDeviceInitialize+0x698>
   42aa4:	e3a02080 	mov	r2, #128	; 0x80
   42aa8:	ebffd0e6 	bl	36e48 <uspi_assertion_failed>
   42aac:	e3a00012 	mov	r0, #18
   42ab0:	ebffd0bd 	bl	36dac <malloc>
   42ab4:	e3500000 	cmp	r0, #0
   42ab8:	e5840014 	str	r0, [r4, #20]
   42abc:	0a000082 	beq	42ccc <USBDeviceInitialize+0x24c>
   42ac0:	e5943000 	ldr	r3, [r4]
   42ac4:	e3530000 	cmp	r3, #0
   42ac8:	0a000084 	beq	42ce0 <USBDeviceInitialize+0x260>
   42acc:	e5941008 	ldr	r1, [r4, #8]
   42ad0:	e3510000 	cmp	r1, #0
   42ad4:	0a000086 	beq	42cf4 <USBDeviceInitialize+0x274>
   42ad8:	e3a02008 	mov	r2, #8
   42adc:	e3a05080 	mov	r5, #128	; 0x80
   42ae0:	e5943014 	ldr	r3, [r4, #20]
   42ae4:	e5940000 	ldr	r0, [r4]
   42ae8:	e58d2004 	str	r2, [sp, #4]
   42aec:	e58d3000 	str	r3, [sp]
   42af0:	e58d5008 	str	r5, [sp, #8]
   42af4:	e3a02001 	mov	r2, #1
   42af8:	e3a03000 	mov	r3, #0
   42afc:	ebfff369 	bl	3f8a8 <DWHCIDeviceGetDescriptor>
   42b00:	e3500008 	cmp	r0, #8
   42b04:	1a000011 	bne	42b50 <USBDeviceInitialize+0xd0>
   42b08:	e5943014 	ldr	r3, [r4, #20]
   42b0c:	e5d36000 	ldrb	r6, [r3]
   42b10:	e3560012 	cmp	r6, #18
   42b14:	1a000002 	bne	42b24 <USBDeviceInitialize+0xa4>
   42b18:	e5d37001 	ldrb	r7, [r3, #1]
   42b1c:	e3570001 	cmp	r7, #1
   42b20:	0a00000e 	beq	42b60 <USBDeviceInitialize+0xe0>
   42b24:	e1a00004 	mov	r0, r4
   42b28:	e3a01001 	mov	r1, #1
   42b2c:	e59f25e8 	ldr	r2, [pc, #1512]	; 4311c <USBDeviceInitialize+0x69c>
   42b30:	e3a05000 	mov	r5, #0
   42b34:	ebffff95 	bl	42990 <USBDeviceLogWrite>
   42b38:	e5940014 	ldr	r0, [r4, #20]
   42b3c:	ebffd09b 	bl	36db0 <free>
   42b40:	e5845014 	str	r5, [r4, #20]
   42b44:	e1a00005 	mov	r0, r5
   42b48:	e28dd014 	add	sp, sp, #20
   42b4c:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   42b50:	e1a00004 	mov	r0, r4
   42b54:	e3a01001 	mov	r1, #1
   42b58:	e59f25c0 	ldr	r2, [pc, #1472]	; 43120 <USBDeviceInitialize+0x6a0>
   42b5c:	eafffff3 	b	42b30 <USBDeviceInitialize+0xb0>
   42b60:	e5d31007 	ldrb	r1, [r3, #7]
   42b64:	e5940008 	ldr	r0, [r4, #8]
   42b68:	eb000399 	bl	439d4 <USBEndpointSetMaxPacketSize>
   42b6c:	e5943014 	ldr	r3, [r4, #20]
   42b70:	e5940000 	ldr	r0, [r4]
   42b74:	e5941008 	ldr	r1, [r4, #8]
   42b78:	e1a02007 	mov	r2, r7
   42b7c:	e88d0048 	stm	sp, {r3, r6}
   42b80:	e58d5008 	str	r5, [sp, #8]
   42b84:	e3a03000 	mov	r3, #0
   42b88:	ebfff346 	bl	3f8a8 <DWHCIDeviceGetDescriptor>
   42b8c:	e3500012 	cmp	r0, #18
   42b90:	1a00005d 	bne	42d0c <USBDeviceInitialize+0x28c>
   42b94:	e59f3588 	ldr	r3, [pc, #1416]	; 43124 <USBDeviceInitialize+0x6a4>
   42b98:	e5d36000 	ldrb	r6, [r3]
   42b9c:	e2862001 	add	r2, r6, #1
   42ba0:	e3160080 	tst	r6, #128	; 0x80
   42ba4:	e5c32000 	strb	r2, [r3]
   42ba8:	1a000065 	bne	42d44 <USBDeviceInitialize+0x2c4>
   42bac:	e5940000 	ldr	r0, [r4]
   42bb0:	e5941008 	ldr	r1, [r4, #8]
   42bb4:	e1a02006 	mov	r2, r6
   42bb8:	ebfff359 	bl	3f924 <DWHCIDeviceSetAddress>
   42bbc:	e2505000 	subs	r5, r0, #0
   42bc0:	0a000055 	beq	42d1c <USBDeviceInitialize+0x29c>
   42bc4:	e1a01006 	mov	r1, r6
   42bc8:	e1a00004 	mov	r0, r4
   42bcc:	ebffff58 	bl	42934 <USBDeviceSetAddress>
   42bd0:	e5943014 	ldr	r3, [r4, #20]
   42bd4:	e5d3200e 	ldrb	r2, [r3, #14]
   42bd8:	e3520000 	cmp	r2, #0
   42bdc:	1a000002 	bne	42bec <USBDeviceInitialize+0x16c>
   42be0:	e5d3300f 	ldrb	r3, [r3, #15]
   42be4:	e3530000 	cmp	r3, #0
   42be8:	0a00000a 	beq	42c18 <USBDeviceInitialize+0x198>
   42bec:	e2845020 	add	r5, r4, #32
   42bf0:	e1a00005 	mov	r0, r5
   42bf4:	eb002436 	bl	4bcd4 <USBStringGetLanguageID>
   42bf8:	e5943014 	ldr	r3, [r4, #20]
   42bfc:	e1a06000 	mov	r6, r0
   42c00:	e5d3100e 	ldrb	r1, [r3, #14]
   42c04:	e3510000 	cmp	r1, #0
   42c08:	1a000057 	bne	42d6c <USBDeviceInitialize+0x2ec>
   42c0c:	e5d3100f 	ldrb	r1, [r3, #15]
   42c10:	e3510000 	cmp	r1, #0
   42c14:	1a000050 	bne	42d5c <USBDeviceInitialize+0x2dc>
   42c18:	e5943018 	ldr	r3, [r4, #24]
   42c1c:	e3530000 	cmp	r3, #0
   42c20:	0a000003 	beq	42c34 <USBDeviceInitialize+0x1b4>
   42c24:	e59f04fc 	ldr	r0, [pc, #1276]	; 43128 <USBDeviceInitialize+0x6a8>
   42c28:	e59f14e8 	ldr	r1, [pc, #1256]	; 43118 <USBDeviceInitialize+0x698>
   42c2c:	e3a020d6 	mov	r2, #214	; 0xd6
   42c30:	ebffd084 	bl	36e48 <uspi_assertion_failed>
   42c34:	e3a00009 	mov	r0, #9
   42c38:	ebffd05b 	bl	36dac <malloc>
   42c3c:	e3500000 	cmp	r0, #0
   42c40:	e5840018 	str	r0, [r4, #24]
   42c44:	11a03000 	movne	r3, r0
   42c48:	0a0000cd 	beq	42f84 <USBDeviceInitialize+0x504>
   42c4c:	e3a0c009 	mov	ip, #9
   42c50:	e3a02080 	mov	r2, #128	; 0x80
   42c54:	e5940000 	ldr	r0, [r4]
   42c58:	e5941008 	ldr	r1, [r4, #8]
   42c5c:	e88d1008 	stm	sp, {r3, ip}
   42c60:	e58d2008 	str	r2, [sp, #8]
   42c64:	e3a03000 	mov	r3, #0
   42c68:	e3a02002 	mov	r2, #2
   42c6c:	ebfff30d 	bl	3f8a8 <DWHCIDeviceGetDescriptor>
   42c70:	e3500009 	cmp	r0, #9
   42c74:	1a00002e 	bne	42d34 <USBDeviceInitialize+0x2b4>
   42c78:	e5940018 	ldr	r0, [r4, #24]
   42c7c:	e5d03000 	ldrb	r3, [r0]
   42c80:	e3530009 	cmp	r3, #9
   42c84:	1a000002 	bne	42c94 <USBDeviceInitialize+0x214>
   42c88:	e5d03001 	ldrb	r3, [r0, #1]
   42c8c:	e3530002 	cmp	r3, #2
   42c90:	0a00003a 	beq	42d80 <USBDeviceInitialize+0x300>
   42c94:	e1a00004 	mov	r0, r4
   42c98:	e3a01001 	mov	r1, #1
   42c9c:	e59f2488 	ldr	r2, [pc, #1160]	; 4312c <USBDeviceInitialize+0x6ac>
   42ca0:	e3a05000 	mov	r5, #0
   42ca4:	ebffff39 	bl	42990 <USBDeviceLogWrite>
   42ca8:	e5940018 	ldr	r0, [r4, #24]
   42cac:	ebffd03f 	bl	36db0 <free>
   42cb0:	e5845018 	str	r5, [r4, #24]
   42cb4:	eaffffa2 	b	42b44 <USBDeviceInitialize+0xc4>
   42cb8:	e59f0470 	ldr	r0, [pc, #1136]	; 43130 <USBDeviceInitialize+0x6b0>
   42cbc:	e59f1454 	ldr	r1, [pc, #1108]	; 43118 <USBDeviceInitialize+0x698>
   42cc0:	e3a0207e 	mov	r2, #126	; 0x7e
   42cc4:	ebffd05f 	bl	36e48 <uspi_assertion_failed>
   42cc8:	eaffff70 	b	42a90 <USBDeviceInitialize+0x10>
   42ccc:	e59f0460 	ldr	r0, [pc, #1120]	; 43134 <USBDeviceInitialize+0x6b4>
   42cd0:	e59f1440 	ldr	r1, [pc, #1088]	; 43118 <USBDeviceInitialize+0x698>
   42cd4:	e3a02082 	mov	r2, #130	; 0x82
   42cd8:	ebffd05a 	bl	36e48 <uspi_assertion_failed>
   42cdc:	eaffff77 	b	42ac0 <USBDeviceInitialize+0x40>
   42ce0:	e59f0450 	ldr	r0, [pc, #1104]	; 43138 <USBDeviceInitialize+0x6b8>
   42ce4:	e59f142c 	ldr	r1, [pc, #1068]	; 43118 <USBDeviceInitialize+0x698>
   42ce8:	e3a02084 	mov	r2, #132	; 0x84
   42cec:	ebffd055 	bl	36e48 <uspi_assertion_failed>
   42cf0:	eaffff75 	b	42acc <USBDeviceInitialize+0x4c>
   42cf4:	e59f141c 	ldr	r1, [pc, #1052]	; 43118 <USBDeviceInitialize+0x698>
   42cf8:	e59f043c 	ldr	r0, [pc, #1084]	; 4313c <USBDeviceInitialize+0x6bc>
   42cfc:	e3a02085 	mov	r2, #133	; 0x85
   42d00:	ebffd050 	bl	36e48 <uspi_assertion_failed>
   42d04:	e5941008 	ldr	r1, [r4, #8]
   42d08:	eaffff72 	b	42ad8 <USBDeviceInitialize+0x58>
   42d0c:	e1a01007 	mov	r1, r7
   42d10:	e1a00004 	mov	r0, r4
   42d14:	e59f2424 	ldr	r2, [pc, #1060]	; 43140 <USBDeviceInitialize+0x6c0>
   42d18:	eaffff84 	b	42b30 <USBDeviceInitialize+0xb0>
   42d1c:	e1a00004 	mov	r0, r4
   42d20:	e1a01007 	mov	r1, r7
   42d24:	e1a03006 	mov	r3, r6
   42d28:	e59f2414 	ldr	r2, [pc, #1044]	; 43144 <USBDeviceInitialize+0x6c4>
   42d2c:	ebffff17 	bl	42990 <USBDeviceLogWrite>
   42d30:	eaffff83 	b	42b44 <USBDeviceInitialize+0xc4>
   42d34:	e1a00004 	mov	r0, r4
   42d38:	e3a01001 	mov	r1, #1
   42d3c:	e59f2404 	ldr	r2, [pc, #1028]	; 43148 <USBDeviceInitialize+0x6c8>
   42d40:	eaffffd6 	b	42ca0 <USBDeviceInitialize+0x220>
   42d44:	e1a00004 	mov	r0, r4
   42d48:	e1a01007 	mov	r1, r7
   42d4c:	e59f23f8 	ldr	r2, [pc, #1016]	; 4314c <USBDeviceInitialize+0x6cc>
   42d50:	ebffff0e 	bl	42990 <USBDeviceLogWrite>
   42d54:	e3a05000 	mov	r5, #0
   42d58:	eaffff79 	b	42b44 <USBDeviceInitialize+0xc4>
   42d5c:	e1a02006 	mov	r2, r6
   42d60:	e284002c 	add	r0, r4, #44	; 0x2c
   42d64:	eb002314 	bl	4b9bc <USBStringGetFromDescriptor>
   42d68:	eaffffaa 	b	42c18 <USBDeviceInitialize+0x198>
   42d6c:	e1a00005 	mov	r0, r5
   42d70:	e1a02006 	mov	r2, r6
   42d74:	eb002310 	bl	4b9bc <USBStringGetFromDescriptor>
   42d78:	e5943014 	ldr	r3, [r4, #20]
   42d7c:	eaffffa2 	b	42c0c <USBDeviceInitialize+0x18c>
   42d80:	e5d03002 	ldrb	r3, [r0, #2]
   42d84:	e5d05003 	ldrb	r5, [r0, #3]
   42d88:	e1835405 	orr	r5, r3, r5, lsl #8
   42d8c:	e3550c02 	cmp	r5, #512	; 0x200
   42d90:	8affffbf 	bhi	42c94 <USBDeviceInitialize+0x214>
   42d94:	ebffd005 	bl	36db0 <free>
   42d98:	e1a00005 	mov	r0, r5
   42d9c:	ebffd002 	bl	36dac <malloc>
   42da0:	e3500000 	cmp	r0, #0
   42da4:	e5840018 	str	r0, [r4, #24]
   42da8:	11a03000 	movne	r3, r0
   42dac:	0a0000af 	beq	43070 <USBDeviceInitialize+0x5f0>
   42db0:	e3a02080 	mov	r2, #128	; 0x80
   42db4:	e5940000 	ldr	r0, [r4]
   42db8:	e5941008 	ldr	r1, [r4, #8]
   42dbc:	e58d2008 	str	r2, [sp, #8]
   42dc0:	e88d0028 	stm	sp, {r3, r5}
   42dc4:	e3a02002 	mov	r2, #2
   42dc8:	e3a03000 	mov	r3, #0
   42dcc:	ebfff2b5 	bl	3f8a8 <DWHCIDeviceGetDescriptor>
   42dd0:	e1500005 	cmp	r0, r5
   42dd4:	1a000082 	bne	42fe4 <USBDeviceInitialize+0x564>
   42dd8:	e594301c 	ldr	r3, [r4, #28]
   42ddc:	e3530000 	cmp	r3, #0
   42de0:	0a000003 	beq	42df4 <USBDeviceInitialize+0x374>
   42de4:	e59f0364 	ldr	r0, [pc, #868]	; 43150 <USBDeviceInitialize+0x6d0>
   42de8:	e59f1328 	ldr	r1, [pc, #808]	; 43118 <USBDeviceInitialize+0x698>
   42dec:	e59f2360 	ldr	r2, [pc, #864]	; 43154 <USBDeviceInitialize+0x6d4>
   42df0:	ebffd014 	bl	36e48 <uspi_assertion_failed>
   42df4:	e3a0001c 	mov	r0, #28
   42df8:	ebffcfeb 	bl	36dac <malloc>
   42dfc:	e3500000 	cmp	r0, #0
   42e00:	e584001c 	str	r0, [r4, #28]
   42e04:	0a0000b3 	beq	430d8 <USBDeviceInitialize+0x658>
   42e08:	e1a02005 	mov	r2, r5
   42e0c:	e594001c 	ldr	r0, [r4, #28]
   42e10:	e5941018 	ldr	r1, [r4, #24]
   42e14:	eb002579 	bl	4c400 <USBConfigurationParser>
   42e18:	e594001c 	ldr	r0, [r4, #28]
   42e1c:	eb0025ff 	bl	4c620 <USBConfigurationParserIsValid>
   42e20:	e2505000 	subs	r5, r0, #0
   42e24:	e1a00004 	mov	r0, r4
   42e28:	0a000079 	beq	43014 <USBDeviceInitialize+0x594>
   42e2c:	ebfffda5 	bl	424c8 <USBDeviceGetNames>
   42e30:	e2505000 	subs	r5, r0, #0
   42e34:	0a0000ac 	beq	430ec <USBDeviceInitialize+0x66c>
   42e38:	e1a00005 	mov	r0, r5
   42e3c:	eb001234 	bl	47714 <StringGet>
   42e40:	e3a06000 	mov	r6, #0
   42e44:	e1a03000 	mov	r3, r0
   42e48:	e3a01003 	mov	r1, #3
   42e4c:	e59f2304 	ldr	r2, [pc, #772]	; 43158 <USBDeviceInitialize+0x6d8>
   42e50:	e1a00004 	mov	r0, r4
   42e54:	ebfffecd 	bl	42990 <USBDeviceLogWrite>
   42e58:	e1a00005 	mov	r0, r5
   42e5c:	eb00121b 	bl	476d0 <_String>
   42e60:	e1a00005 	mov	r0, r5
   42e64:	ebffcfd1 	bl	36db0 <free>
   42e68:	e1a05006 	mov	r5, r6
   42e6c:	e594001c 	ldr	r0, [r4, #28]
   42e70:	e3a01004 	mov	r1, #4
   42e74:	eb0025f6 	bl	4c654 <USBConfigurationParserGetDescriptor>
   42e78:	e3500000 	cmp	r0, #0
   42e7c:	0a00005c 	beq	42ff4 <USBDeviceInitialize+0x574>
   42e80:	e5d07002 	ldrb	r7, [r0, #2]
   42e84:	e1560007 	cmp	r6, r7
   42e88:	3a000006 	bcc	42ea8 <USBDeviceInitialize+0x428>
   42e8c:	0a000005 	beq	42ea8 <USBDeviceInitialize+0x428>
   42e90:	e5d03003 	ldrb	r3, [r0, #3]
   42e94:	e3a01004 	mov	r1, #4
   42e98:	e1a00004 	mov	r0, r4
   42e9c:	e59f22b8 	ldr	r2, [pc, #696]	; 4315c <USBDeviceInitialize+0x6dc>
   42ea0:	ebfffeba 	bl	42990 <USBDeviceLogWrite>
   42ea4:	eafffff0 	b	42e6c <USBDeviceInitialize+0x3ec>
   42ea8:	e594301c 	ldr	r3, [r4, #28]
   42eac:	e3530000 	cmp	r3, #0
   42eb0:	0a000060 	beq	43038 <USBDeviceInitialize+0x5b8>
   42eb4:	e0846105 	add	r6, r4, r5, lsl #2
   42eb8:	e5963038 	ldr	r3, [r6, #56]	; 0x38
   42ebc:	e3530000 	cmp	r3, #0
   42ec0:	0a000003 	beq	42ed4 <USBDeviceInitialize+0x454>
   42ec4:	e59f0294 	ldr	r0, [pc, #660]	; 43160 <USBDeviceInitialize+0x6e0>
   42ec8:	e59f1248 	ldr	r1, [pc, #584]	; 43118 <USBDeviceInitialize+0x698>
   42ecc:	e59f2290 	ldr	r2, [pc, #656]	; 43164 <USBDeviceInitialize+0x6e4>
   42ed0:	ebffcfdc 	bl	36e48 <uspi_assertion_failed>
   42ed4:	e3a00010 	mov	r0, #16
   42ed8:	ebffcfb3 	bl	36dac <malloc>
   42edc:	e3500000 	cmp	r0, #0
   42ee0:	e5860038 	str	r0, [r6, #56]	; 0x38
   42ee4:	0a00004d 	beq	43020 <USBDeviceInitialize+0x5a0>
   42ee8:	e1a01004 	mov	r1, r4
   42eec:	e594201c 	ldr	r2, [r4, #28]
   42ef0:	eb00089e 	bl	45170 <USBFunction>
   42ef4:	e3550000 	cmp	r5, #0
   42ef8:	0a000027 	beq	42f9c <USBDeviceInitialize+0x51c>
   42efc:	e5960038 	ldr	r0, [r6, #56]	; 0x38
   42f00:	eb000924 	bl	45398 <USBFunctionGetInterfaceName>
   42f04:	e2508000 	subs	r8, r0, #0
   42f08:	0a00007c 	beq	43100 <USBDeviceInitialize+0x680>
   42f0c:	e1a00008 	mov	r0, r8
   42f10:	e59f1250 	ldr	r1, [pc, #592]	; 43168 <USBDeviceInitialize+0x6e8>
   42f14:	eb00125d 	bl	47890 <StringCompare>
   42f18:	e2509000 	subs	r9, r0, #0
   42f1c:	e1a00008 	mov	r0, r8
   42f20:	0a000049 	beq	4304c <USBDeviceInitialize+0x5cc>
   42f24:	eb0011fa 	bl	47714 <StringGet>
   42f28:	e59f223c 	ldr	r2, [pc, #572]	; 4316c <USBDeviceInitialize+0x6ec>
   42f2c:	e1a03000 	mov	r3, r0
   42f30:	e3a01003 	mov	r1, #3
   42f34:	e1a00004 	mov	r0, r4
   42f38:	ebfffe94 	bl	42990 <USBDeviceLogWrite>
   42f3c:	e1a01008 	mov	r1, r8
   42f40:	e5960038 	ldr	r0, [r6, #56]	; 0x38
   42f44:	eb0000dc 	bl	432bc <USBDeviceFactoryGetDevice>
   42f48:	e1a08000 	mov	r8, r0
   42f4c:	e5960038 	ldr	r0, [r6, #56]	; 0x38
   42f50:	eb0008fc 	bl	45348 <_USBFunction>
   42f54:	e5960038 	ldr	r0, [r6, #56]	; 0x38
   42f58:	ebffcf94 	bl	36db0 <free>
   42f5c:	e3a03000 	mov	r3, #0
   42f60:	e1580003 	cmp	r8, r3
   42f64:	e5863038 	str	r3, [r6, #56]	; 0x38
   42f68:	1a000050 	bne	430b0 <USBDeviceInitialize+0x630>
   42f6c:	e1a00004 	mov	r0, r4
   42f70:	e3a01002 	mov	r1, #2
   42f74:	e59f21f4 	ldr	r2, [pc, #500]	; 43170 <USBDeviceInitialize+0x6f0>
   42f78:	e1a06007 	mov	r6, r7
   42f7c:	ebfffe83 	bl	42990 <USBDeviceLogWrite>
   42f80:	eaffffb9 	b	42e6c <USBDeviceInitialize+0x3ec>
   42f84:	e59f01e8 	ldr	r0, [pc, #488]	; 43174 <USBDeviceInitialize+0x6f4>
   42f88:	e59f1188 	ldr	r1, [pc, #392]	; 43118 <USBDeviceInitialize+0x698>
   42f8c:	e3a020d8 	mov	r2, #216	; 0xd8
   42f90:	ebffcfac 	bl	36e48 <uspi_assertion_failed>
   42f94:	e5943018 	ldr	r3, [r4, #24]
   42f98:	eaffff2b 	b	42c4c <USBDeviceInitialize+0x1cc>
   42f9c:	e1a01005 	mov	r1, r5
   42fa0:	e1a00004 	mov	r0, r4
   42fa4:	e5948038 	ldr	r8, [r4, #56]	; 0x38
   42fa8:	ebfffced 	bl	42364 <USBDeviceGetName>
   42fac:	e1a01000 	mov	r1, r0
   42fb0:	e1a00008 	mov	r0, r8
   42fb4:	eb0000c0 	bl	432bc <USBDeviceFactoryGetDevice>
   42fb8:	e2508000 	subs	r8, r0, #0
   42fbc:	0a000031 	beq	43088 <USBDeviceInitialize+0x608>
   42fc0:	e3a05001 	mov	r5, #1
   42fc4:	e5940038 	ldr	r0, [r4, #56]	; 0x38
   42fc8:	eb0008de 	bl	45348 <_USBFunction>
   42fcc:	e5940038 	ldr	r0, [r4, #56]	; 0x38
   42fd0:	ebffcf76 	bl	36db0 <free>
   42fd4:	e5848038 	str	r8, [r4, #56]	; 0x38
   42fd8:	e2876001 	add	r6, r7, #1
   42fdc:	e6ef6076 	uxtb	r6, r6
   42fe0:	eaffffa1 	b	42e6c <USBDeviceInitialize+0x3ec>
   42fe4:	e1a00004 	mov	r0, r4
   42fe8:	e3a01001 	mov	r1, #1
   42fec:	e59f2184 	ldr	r2, [pc, #388]	; 43178 <USBDeviceInitialize+0x6f8>
   42ff0:	eaffff2a 	b	42ca0 <USBDeviceInitialize+0x220>
   42ff4:	e3550000 	cmp	r5, #0
   42ff8:	13a05001 	movne	r5, #1
   42ffc:	1afffed0 	bne	42b44 <USBDeviceInitialize+0xc4>
   43000:	e1a00004 	mov	r0, r4
   43004:	e3a01002 	mov	r1, #2
   43008:	e59f216c 	ldr	r2, [pc, #364]	; 4317c <USBDeviceInitialize+0x6fc>
   4300c:	ebfffe5f 	bl	42990 <USBDeviceLogWrite>
   43010:	eafffecb 	b	42b44 <USBDeviceInitialize+0xc4>
   43014:	e59f1164 	ldr	r1, [pc, #356]	; 43180 <USBDeviceInitialize+0x700>
   43018:	ebfffe29 	bl	428c4 <USBDeviceConfigurationError>
   4301c:	eafffec8 	b	42b44 <USBDeviceInitialize+0xc4>
   43020:	e59f015c 	ldr	r0, [pc, #348]	; 43184 <USBDeviceInitialize+0x704>
   43024:	e59f10ec 	ldr	r1, [pc, #236]	; 43118 <USBDeviceInitialize+0x698>
   43028:	e59f2158 	ldr	r2, [pc, #344]	; 43188 <USBDeviceInitialize+0x708>
   4302c:	ebffcf85 	bl	36e48 <uspi_assertion_failed>
   43030:	e5960038 	ldr	r0, [r6, #56]	; 0x38
   43034:	eaffffab 	b	42ee8 <USBDeviceInitialize+0x468>
   43038:	e59f014c 	ldr	r0, [pc, #332]	; 4318c <USBDeviceInitialize+0x70c>
   4303c:	e59f10d4 	ldr	r1, [pc, #212]	; 43118 <USBDeviceInitialize+0x698>
   43040:	e3a02e13 	mov	r2, #304	; 0x130
   43044:	ebffcf7f 	bl	36e48 <uspi_assertion_failed>
   43048:	eaffff99 	b	42eb4 <USBDeviceInitialize+0x434>
   4304c:	eb00119f 	bl	476d0 <_String>
   43050:	e1a00008 	mov	r0, r8
   43054:	ebffcf55 	bl	36db0 <free>
   43058:	e5960038 	ldr	r0, [r6, #56]	; 0x38
   4305c:	eb0008b9 	bl	45348 <_USBFunction>
   43060:	e5960038 	ldr	r0, [r6, #56]	; 0x38
   43064:	ebffcf51 	bl	36db0 <free>
   43068:	e5869038 	str	r9, [r6, #56]	; 0x38
   4306c:	eaffffbe 	b	42f6c <USBDeviceInitialize+0x4ec>
   43070:	e59f00fc 	ldr	r0, [pc, #252]	; 43174 <USBDeviceInitialize+0x6f4>
   43074:	e59f109c 	ldr	r1, [pc, #156]	; 43118 <USBDeviceInitialize+0x698>
   43078:	e3a020f8 	mov	r2, #248	; 0xf8
   4307c:	ebffcf71 	bl	36e48 <uspi_assertion_failed>
   43080:	e5943018 	ldr	r3, [r4, #24]
   43084:	eaffff49 	b	42db0 <USBDeviceInitialize+0x330>
   43088:	e3a01001 	mov	r1, #1
   4308c:	e1a00004 	mov	r0, r4
   43090:	e5948038 	ldr	r8, [r4, #56]	; 0x38
   43094:	ebfffcb2 	bl	42364 <USBDeviceGetName>
   43098:	e1a01000 	mov	r1, r0
   4309c:	e1a00008 	mov	r0, r8
   430a0:	eb000085 	bl	432bc <USBDeviceFactoryGetDevice>
   430a4:	e2508000 	subs	r8, r0, #0
   430a8:	1affffc4 	bne	42fc0 <USBDeviceInitialize+0x540>
   430ac:	eaffff92 	b	42efc <USBDeviceInitialize+0x47c>
   430b0:	e2855001 	add	r5, r5, #1
   430b4:	e355000a 	cmp	r5, #10
   430b8:	e5868038 	str	r8, [r6, #56]	; 0x38
   430bc:	1affffc5 	bne	42fd8 <USBDeviceInitialize+0x558>
   430c0:	e1a00004 	mov	r0, r4
   430c4:	e3a01002 	mov	r1, #2
   430c8:	e59f20c0 	ldr	r2, [pc, #192]	; 43190 <USBDeviceInitialize+0x710>
   430cc:	ebfffe2f 	bl	42990 <USBDeviceLogWrite>
   430d0:	e3a05001 	mov	r5, #1
   430d4:	eafffe9a 	b	42b44 <USBDeviceInitialize+0xc4>
   430d8:	e59f00ac 	ldr	r0, [pc, #172]	; 4318c <USBDeviceInitialize+0x70c>
   430dc:	e59f1034 	ldr	r1, [pc, #52]	; 43118 <USBDeviceInitialize+0x698>
   430e0:	e59f20ac 	ldr	r2, [pc, #172]	; 43194 <USBDeviceInitialize+0x714>
   430e4:	ebffcf57 	bl	36e48 <uspi_assertion_failed>
   430e8:	eaffff46 	b	42e08 <USBDeviceInitialize+0x388>
   430ec:	e59f00a4 	ldr	r0, [pc, #164]	; 43198 <USBDeviceInitialize+0x718>
   430f0:	e59f1020 	ldr	r1, [pc, #32]	; 43118 <USBDeviceInitialize+0x698>
   430f4:	e3a02f46 	mov	r2, #280	; 0x118
   430f8:	ebffcf52 	bl	36e48 <uspi_assertion_failed>
   430fc:	eaffff4d 	b	42e38 <USBDeviceInitialize+0x3b8>
   43100:	e59f0094 	ldr	r0, [pc, #148]	; 4319c <USBDeviceInitialize+0x71c>
   43104:	e59f100c 	ldr	r1, [pc, #12]	; 43118 <USBDeviceInitialize+0x698>
   43108:	e3a02f51 	mov	r2, #324	; 0x144
   4310c:	ebffcf4d 	bl	36e48 <uspi_assertion_failed>
   43110:	eaffff7d 	b	42f0c <USBDeviceInitialize+0x48c>
   43114:	00056cb8 	.word	0x00056cb8
   43118:	00056b78 	.word	0x00056b78
   4311c:	00056cfc 	.word	0x00056cfc
   43120:	00056cd4 	.word	0x00056cd4
   43124:	0006f518 	.word	0x0006f518
   43128:	00056d64 	.word	0x00056d64
   4312c:	00056dac 	.word	0x00056dac
   43130:	00056434 	.word	0x00056434
   43134:	00056bf8 	.word	0x00056bf8
   43138:	00056b84 	.word	0x00056b84
   4313c:	00056bb4 	.word	0x00056bb4
   43140:	00056d18 	.word	0x00056d18
   43144:	00056d4c 	.word	0x00056d4c
   43148:	00056d80 	.word	0x00056d80
   4314c:	00056d38 	.word	0x00056d38
   43150:	00056df4 	.word	0x00056df4
   43154:	0000010b 	.word	0x0000010b
   43158:	00056e1c 	.word	0x00056e1c
   4315c:	00056e2c 	.word	0x00056e2c
   43160:	00056e4c 	.word	0x00056e4c
   43164:	00000131 	.word	0x00000131
   43168:	00056c2c 	.word	0x00056c2c
   4316c:	00056e94 	.word	0x00056e94
   43170:	00056ea8 	.word	0x00056ea8
   43174:	00056c48 	.word	0x00056c48
   43178:	00056dd0 	.word	0x00056dd0
   4317c:	00056ee4 	.word	0x00056ee4
   43180:	00056b70 	.word	0x00056b70
   43184:	00056e70 	.word	0x00056e70
   43188:	00000133 	.word	0x00000133
   4318c:	00056c64 	.word	0x00056c64
   43190:	00056ec4 	.word	0x00056ec4
   43194:	0000010d 	.word	0x0000010d
   43198:	00056e10 	.word	0x00056e10
   4319c:	00057534 	.word	0x00057534

000431a0 <USBDeviceConfigure>:
   431a0:	e92d40f8 	push	{r3, r4, r5, r6, r7, lr}
   431a4:	e2505000 	subs	r5, r0, #0
   431a8:	0a00002d 	beq	43264 <USBDeviceConfigure+0xc4>
   431ac:	e5953000 	ldr	r3, [r5]
   431b0:	e3530000 	cmp	r3, #0
   431b4:	0a00002f 	beq	43278 <USBDeviceConfigure+0xd8>
   431b8:	e5953008 	ldr	r3, [r5, #8]
   431bc:	e3530000 	cmp	r3, #0
   431c0:	0a000031 	beq	4328c <USBDeviceConfigure+0xec>
   431c4:	e5956018 	ldr	r6, [r5, #24]
   431c8:	e3560000 	cmp	r6, #0
   431cc:	0a00001a 	beq	4323c <USBDeviceConfigure+0x9c>
   431d0:	e5d62005 	ldrb	r2, [r6, #5]
   431d4:	e5950000 	ldr	r0, [r5]
   431d8:	e5951008 	ldr	r1, [r5, #8]
   431dc:	ebfff1ef 	bl	3f9a0 <DWHCIDeviceSetConfiguration>
   431e0:	e2506000 	subs	r6, r0, #0
   431e4:	12854034 	addne	r4, r5, #52	; 0x34
   431e8:	13a06000 	movne	r6, #0
   431ec:	1285505c 	addne	r5, r5, #92	; 0x5c
   431f0:	1a000002 	bne	43200 <USBDeviceConfigure+0x60>
   431f4:	ea000012 	b	43244 <USBDeviceConfigure+0xa4>
   431f8:	e1540005 	cmp	r4, r5
   431fc:	0a00000e 	beq	4323c <USBDeviceConfigure+0x9c>
   43200:	e5b40004 	ldr	r0, [r4, #4]!
   43204:	e3500000 	cmp	r0, #0
   43208:	0afffffa 	beq	431f8 <USBDeviceConfigure+0x58>
   4320c:	e5903000 	ldr	r3, [r0]
   43210:	e12fff33 	blx	r3
   43214:	e2507000 	subs	r7, r0, #0
   43218:	13a06001 	movne	r6, #1
   4321c:	1afffff5 	bne	431f8 <USBDeviceConfigure+0x58>
   43220:	e5940000 	ldr	r0, [r4]
   43224:	eb000847 	bl	45348 <_USBFunction>
   43228:	e5940000 	ldr	r0, [r4]
   4322c:	ebffcedf 	bl	36db0 <free>
   43230:	e1540005 	cmp	r4, r5
   43234:	e5847000 	str	r7, [r4]
   43238:	1afffff0 	bne	43200 <USBDeviceConfigure+0x60>
   4323c:	e1a00006 	mov	r0, r6
   43240:	e8bd80f8 	pop	{r3, r4, r5, r6, r7, pc}
   43244:	e5953018 	ldr	r3, [r5, #24]
   43248:	e1a00005 	mov	r0, r5
   4324c:	e5d33005 	ldrb	r3, [r3, #5]
   43250:	e3a01001 	mov	r1, #1
   43254:	e59f2044 	ldr	r2, [pc, #68]	; 432a0 <USBDeviceConfigure+0x100>
   43258:	ebfffdcc 	bl	42990 <USBDeviceLogWrite>
   4325c:	e1a00006 	mov	r0, r6
   43260:	e8bd80f8 	pop	{r3, r4, r5, r6, r7, pc}
   43264:	e59f0038 	ldr	r0, [pc, #56]	; 432a4 <USBDeviceConfigure+0x104>
   43268:	e59f1038 	ldr	r1, [pc, #56]	; 432a8 <USBDeviceConfigure+0x108>
   4326c:	e59f2038 	ldr	r2, [pc, #56]	; 432ac <USBDeviceConfigure+0x10c>
   43270:	ebffcef4 	bl	36e48 <uspi_assertion_failed>
   43274:	eaffffcc 	b	431ac <USBDeviceConfigure+0xc>
   43278:	e59f0030 	ldr	r0, [pc, #48]	; 432b0 <USBDeviceConfigure+0x110>
   4327c:	e59f1024 	ldr	r1, [pc, #36]	; 432a8 <USBDeviceConfigure+0x108>
   43280:	e59f202c 	ldr	r2, [pc, #44]	; 432b4 <USBDeviceConfigure+0x114>
   43284:	ebffceef 	bl	36e48 <uspi_assertion_failed>
   43288:	eaffffca 	b	431b8 <USBDeviceConfigure+0x18>
   4328c:	e59f0024 	ldr	r0, [pc, #36]	; 432b8 <USBDeviceConfigure+0x118>
   43290:	e59f1010 	ldr	r1, [pc, #16]	; 432a8 <USBDeviceConfigure+0x108>
   43294:	e3a02f5e 	mov	r2, #376	; 0x178
   43298:	ebffceea 	bl	36e48 <uspi_assertion_failed>
   4329c:	eaffffc8 	b	431c4 <USBDeviceConfigure+0x24>
   432a0:	00056f08 	.word	0x00056f08
   432a4:	00056434 	.word	0x00056434
   432a8:	00056b78 	.word	0x00056b78
   432ac:	00000175 	.word	0x00000175
   432b0:	00056b84 	.word	0x00056b84
   432b4:	00000177 	.word	0x00000177
   432b8:	00056bb4 	.word	0x00056bb4

000432bc <USBDeviceFactoryGetDevice>:
   432bc:	e92d4070 	push	{r4, r5, r6, lr}
   432c0:	e2506000 	subs	r6, r0, #0
   432c4:	e1a04001 	mov	r4, r1
   432c8:	0a000040 	beq	433d0 <USBDeviceFactoryGetDevice+0x114>
   432cc:	e3540000 	cmp	r4, #0
   432d0:	0a000043 	beq	433e4 <USBDeviceFactoryGetDevice+0x128>
   432d4:	e1a00004 	mov	r0, r4
   432d8:	e59f12ac 	ldr	r1, [pc, #684]	; 4358c <USBDeviceFactoryGetDevice+0x2d0>
   432dc:	eb00116b 	bl	47890 <StringCompare>
   432e0:	e3500000 	cmp	r0, #0
   432e4:	0a000004 	beq	432fc <USBDeviceFactoryGetDevice+0x40>
   432e8:	e1a00004 	mov	r0, r4
   432ec:	e59f129c 	ldr	r1, [pc, #668]	; 43590 <USBDeviceFactoryGetDevice+0x2d4>
   432f0:	eb001166 	bl	47890 <StringCompare>
   432f4:	e3500000 	cmp	r0, #0
   432f8:	1a000015 	bne	43354 <USBDeviceFactoryGetDevice+0x98>
   432fc:	e3a00058 	mov	r0, #88	; 0x58
   43300:	ebffcea9 	bl	36dac <malloc>
   43304:	e2505000 	subs	r5, r0, #0
   43308:	0a00003a 	beq	433f8 <USBDeviceFactoryGetDevice+0x13c>
   4330c:	e1a01006 	mov	r1, r6
   43310:	e1a00005 	mov	r0, r5
   43314:	eb00034e 	bl	44054 <USBStandardHub>
   43318:	e3550000 	cmp	r5, #0
   4331c:	0a000006 	beq	4333c <USBDeviceFactoryGetDevice+0x80>
   43320:	e1a00004 	mov	r0, r4
   43324:	eb0010fa 	bl	47714 <StringGet>
   43328:	e3a01003 	mov	r1, #3
   4332c:	e1a03000 	mov	r3, r0
   43330:	e59f225c 	ldr	r2, [pc, #604]	; 43594 <USBDeviceFactoryGetDevice+0x2d8>
   43334:	e59f025c 	ldr	r0, [pc, #604]	; 43598 <USBDeviceFactoryGetDevice+0x2dc>
   43338:	ebff838e 	bl	24178 <LogWrite>
   4333c:	e1a00004 	mov	r0, r4
   43340:	eb0010e2 	bl	476d0 <_String>
   43344:	e1a00004 	mov	r0, r4
   43348:	ebffce98 	bl	36db0 <free>
   4334c:	e1a00005 	mov	r0, r5
   43350:	e8bd8070 	pop	{r4, r5, r6, pc}
   43354:	e1a00004 	mov	r0, r4
   43358:	e59f123c 	ldr	r1, [pc, #572]	; 4359c <USBDeviceFactoryGetDevice+0x2e0>
   4335c:	eb00114b 	bl	47890 <StringCompare>
   43360:	e3500000 	cmp	r0, #0
   43364:	1a000007 	bne	43388 <USBDeviceFactoryGetDevice+0xcc>
   43368:	e3a00028 	mov	r0, #40	; 0x28
   4336c:	ebffce8e 	bl	36dac <malloc>
   43370:	e2505000 	subs	r5, r0, #0
   43374:	0a000046 	beq	43494 <USBDeviceFactoryGetDevice+0x1d8>
   43378:	e1a01006 	mov	r1, r6
   4337c:	e1a00005 	mov	r0, r5
   43380:	eb0013d3 	bl	482d4 <USBBulkOnlyMassStorageDevice>
   43384:	eaffffe3 	b	43318 <USBDeviceFactoryGetDevice+0x5c>
   43388:	e1a00004 	mov	r0, r4
   4338c:	e59f120c 	ldr	r1, [pc, #524]	; 435a0 <USBDeviceFactoryGetDevice+0x2e4>
   43390:	eb00113e 	bl	47890 <StringCompare>
   43394:	e3500000 	cmp	r0, #0
   43398:	0a00001b 	beq	4340c <USBDeviceFactoryGetDevice+0x150>
   4339c:	e1a00004 	mov	r0, r4
   433a0:	e59f11fc 	ldr	r1, [pc, #508]	; 435a4 <USBDeviceFactoryGetDevice+0x2e8>
   433a4:	eb001139 	bl	47890 <StringCompare>
   433a8:	e3500000 	cmp	r0, #0
   433ac:	1a00001e 	bne	4342c <USBDeviceFactoryGetDevice+0x170>
   433b0:	e3a00048 	mov	r0, #72	; 0x48
   433b4:	ebffce7c 	bl	36dac <malloc>
   433b8:	e2505000 	subs	r5, r0, #0
   433bc:	0a000059 	beq	43528 <USBDeviceFactoryGetDevice+0x26c>
   433c0:	e1a01006 	mov	r1, r6
   433c4:	e1a00005 	mov	r0, r5
   433c8:	eb001c84 	bl	4a5e0 <USBMouseDevice>
   433cc:	eaffffd1 	b	43318 <USBDeviceFactoryGetDevice+0x5c>
   433d0:	e59f01d0 	ldr	r0, [pc, #464]	; 435a8 <USBDeviceFactoryGetDevice+0x2ec>
   433d4:	e59f11d0 	ldr	r1, [pc, #464]	; 435ac <USBDeviceFactoryGetDevice+0x2f0>
   433d8:	e3a02024 	mov	r2, #36	; 0x24
   433dc:	ebffce99 	bl	36e48 <uspi_assertion_failed>
   433e0:	eaffffb9 	b	432cc <USBDeviceFactoryGetDevice+0x10>
   433e4:	e59f01c4 	ldr	r0, [pc, #452]	; 435b0 <USBDeviceFactoryGetDevice+0x2f4>
   433e8:	e59f11bc 	ldr	r1, [pc, #444]	; 435ac <USBDeviceFactoryGetDevice+0x2f0>
   433ec:	e3a02025 	mov	r2, #37	; 0x25
   433f0:	ebffce94 	bl	36e48 <uspi_assertion_failed>
   433f4:	eaffffb6 	b	432d4 <USBDeviceFactoryGetDevice+0x18>
   433f8:	e59f01b4 	ldr	r0, [pc, #436]	; 435b4 <USBDeviceFactoryGetDevice+0x2f8>
   433fc:	e59f11a8 	ldr	r1, [pc, #424]	; 435ac <USBDeviceFactoryGetDevice+0x2f0>
   43400:	e3a0202d 	mov	r2, #45	; 0x2d
   43404:	ebffce8f 	bl	36e48 <uspi_assertion_failed>
   43408:	eaffffbf 	b	4330c <USBDeviceFactoryGetDevice+0x50>
   4340c:	e59f01a4 	ldr	r0, [pc, #420]	; 435b8 <USBDeviceFactoryGetDevice+0x2fc>
   43410:	ebffce65 	bl	36dac <malloc>
   43414:	e2505000 	subs	r5, r0, #0
   43418:	0a00002f 	beq	434dc <USBDeviceFactoryGetDevice+0x220>
   4341c:	e1a01006 	mov	r1, r6
   43420:	e1a00005 	mov	r0, r5
   43424:	eb00193c 	bl	4991c <USBKeyboardDevice>
   43428:	eaffffba 	b	43318 <USBDeviceFactoryGetDevice+0x5c>
   4342c:	e1a00004 	mov	r0, r4
   43430:	e59f1184 	ldr	r1, [pc, #388]	; 435bc <USBDeviceFactoryGetDevice+0x300>
   43434:	eb001115 	bl	47890 <StringCompare>
   43438:	e3500000 	cmp	r0, #0
   4343c:	1a000007 	bne	43460 <USBDeviceFactoryGetDevice+0x1a4>
   43440:	e3a00028 	mov	r0, #40	; 0x28
   43444:	ebffce58 	bl	36dac <malloc>
   43448:	e2505000 	subs	r5, r0, #0
   4344c:	0a00003a 	beq	4353c <USBDeviceFactoryGetDevice+0x280>
   43450:	e1a01006 	mov	r1, r6
   43454:	e1a00005 	mov	r0, r5
   43458:	eb000960 	bl	459e0 <SMSC951xDevice>
   4345c:	eaffffad 	b	43318 <USBDeviceFactoryGetDevice+0x5c>
   43460:	e1a00004 	mov	r0, r4
   43464:	e59f1154 	ldr	r1, [pc, #340]	; 435c0 <USBDeviceFactoryGetDevice+0x304>
   43468:	eb001108 	bl	47890 <StringCompare>
   4346c:	e3500000 	cmp	r0, #0
   43470:	1a00000c 	bne	434a8 <USBDeviceFactoryGetDevice+0x1ec>
   43474:	e3a00028 	mov	r0, #40	; 0x28
   43478:	ebffce4b 	bl	36dac <malloc>
   4347c:	e2505000 	subs	r5, r0, #0
   43480:	0a000032 	beq	43550 <USBDeviceFactoryGetDevice+0x294>
   43484:	e1a01006 	mov	r1, r6
   43488:	e1a00005 	mov	r0, r5
   4348c:	eb000ca2 	bl	4671c <LAN7800Device>
   43490:	eaffffa0 	b	43318 <USBDeviceFactoryGetDevice+0x5c>
   43494:	e59f0118 	ldr	r0, [pc, #280]	; 435b4 <USBDeviceFactoryGetDevice+0x2f8>
   43498:	e59f110c 	ldr	r1, [pc, #268]	; 435ac <USBDeviceFactoryGetDevice+0x2f0>
   4349c:	e3a02034 	mov	r2, #52	; 0x34
   434a0:	ebffce68 	bl	36e48 <uspi_assertion_failed>
   434a4:	eaffffb3 	b	43378 <USBDeviceFactoryGetDevice+0xbc>
   434a8:	e1a00004 	mov	r0, r4
   434ac:	e59f1110 	ldr	r1, [pc, #272]	; 435c4 <USBDeviceFactoryGetDevice+0x308>
   434b0:	eb0010f6 	bl	47890 <StringCompare>
   434b4:	e3500000 	cmp	r0, #0
   434b8:	1a00000c 	bne	434f0 <USBDeviceFactoryGetDevice+0x234>
   434bc:	e3a000c4 	mov	r0, #196	; 0xc4
   434c0:	ebffce39 	bl	36dac <malloc>
   434c4:	e2505000 	subs	r5, r0, #0
   434c8:	0a000025 	beq	43564 <USBDeviceFactoryGetDevice+0x2a8>
   434cc:	e1a01006 	mov	r1, r6
   434d0:	e1a00005 	mov	r0, r5
   434d4:	eb001fe1 	bl	4b460 <USBGamePadDevice>
   434d8:	eaffff8e 	b	43318 <USBDeviceFactoryGetDevice+0x5c>
   434dc:	e59f00d0 	ldr	r0, [pc, #208]	; 435b4 <USBDeviceFactoryGetDevice+0x2f8>
   434e0:	e59f10c4 	ldr	r1, [pc, #196]	; 435ac <USBDeviceFactoryGetDevice+0x2f0>
   434e4:	e3a0203b 	mov	r2, #59	; 0x3b
   434e8:	ebffce56 	bl	36e48 <uspi_assertion_failed>
   434ec:	eaffffca 	b	4341c <USBDeviceFactoryGetDevice+0x160>
   434f0:	e1a00004 	mov	r0, r4
   434f4:	e59f10cc 	ldr	r1, [pc, #204]	; 435c8 <USBDeviceFactoryGetDevice+0x30c>
   434f8:	eb0010e4 	bl	47890 <StringCompare>
   434fc:	e3500000 	cmp	r0, #0
   43500:	13a05000 	movne	r5, #0
   43504:	1affff8c 	bne	4333c <USBDeviceFactoryGetDevice+0x80>
   43508:	e3a00044 	mov	r0, #68	; 0x44
   4350c:	ebffce26 	bl	36dac <malloc>
   43510:	e2505000 	subs	r5, r0, #0
   43514:	0a000017 	beq	43578 <USBDeviceFactoryGetDevice+0x2bc>
   43518:	e1a01006 	mov	r1, r6
   4351c:	e1a00005 	mov	r0, r5
   43520:	eb00236f 	bl	4c2e4 <USBMIDIDevice>
   43524:	eaffff7b 	b	43318 <USBDeviceFactoryGetDevice+0x5c>
   43528:	e59f0084 	ldr	r0, [pc, #132]	; 435b4 <USBDeviceFactoryGetDevice+0x2f8>
   4352c:	e59f1078 	ldr	r1, [pc, #120]	; 435ac <USBDeviceFactoryGetDevice+0x2f0>
   43530:	e3a02042 	mov	r2, #66	; 0x42
   43534:	ebffce43 	bl	36e48 <uspi_assertion_failed>
   43538:	eaffffa0 	b	433c0 <USBDeviceFactoryGetDevice+0x104>
   4353c:	e59f0070 	ldr	r0, [pc, #112]	; 435b4 <USBDeviceFactoryGetDevice+0x2f8>
   43540:	e59f1064 	ldr	r1, [pc, #100]	; 435ac <USBDeviceFactoryGetDevice+0x2f0>
   43544:	e3a02049 	mov	r2, #73	; 0x49
   43548:	ebffce3e 	bl	36e48 <uspi_assertion_failed>
   4354c:	eaffffbf 	b	43450 <USBDeviceFactoryGetDevice+0x194>
   43550:	e59f005c 	ldr	r0, [pc, #92]	; 435b4 <USBDeviceFactoryGetDevice+0x2f8>
   43554:	e59f1050 	ldr	r1, [pc, #80]	; 435ac <USBDeviceFactoryGetDevice+0x2f0>
   43558:	e3a02050 	mov	r2, #80	; 0x50
   4355c:	ebffce39 	bl	36e48 <uspi_assertion_failed>
   43560:	eaffffc7 	b	43484 <USBDeviceFactoryGetDevice+0x1c8>
   43564:	e59f0048 	ldr	r0, [pc, #72]	; 435b4 <USBDeviceFactoryGetDevice+0x2f8>
   43568:	e59f103c 	ldr	r1, [pc, #60]	; 435ac <USBDeviceFactoryGetDevice+0x2f0>
   4356c:	e3a02057 	mov	r2, #87	; 0x57
   43570:	ebffce34 	bl	36e48 <uspi_assertion_failed>
   43574:	eaffffd4 	b	434cc <USBDeviceFactoryGetDevice+0x210>
   43578:	e59f0034 	ldr	r0, [pc, #52]	; 435b4 <USBDeviceFactoryGetDevice+0x2f8>
   4357c:	e59f1028 	ldr	r1, [pc, #40]	; 435ac <USBDeviceFactoryGetDevice+0x2f0>
   43580:	e3a0205e 	mov	r2, #94	; 0x5e
   43584:	ebffce2f 	bl	36e48 <uspi_assertion_failed>
   43588:	eaffffe2 	b	43518 <USBDeviceFactoryGetDevice+0x25c>
   4358c:	00056f4c 	.word	0x00056f4c
   43590:	00056f58 	.word	0x00056f58
   43594:	00056fc8 	.word	0x00056fc8
   43598:	00053abc 	.word	0x00053abc
   4359c:	00056f74 	.word	0x00056f74
   435a0:	00056f80 	.word	0x00056f80
   435a4:	00056f8c 	.word	0x00056f8c
   435a8:	00056f28 	.word	0x00056f28
   435ac:	00056f38 	.word	0x00056f38
   435b0:	00057534 	.word	0x00057534
   435b4:	00056f64 	.word	0x00056f64
   435b8:	00000464 	.word	0x00000464
   435bc:	00056f98 	.word	0x00056f98
   435c0:	00056fa4 	.word	0x00056fa4
   435c4:	00056fb0 	.word	0x00056fb0
   435c8:	00056fbc 	.word	0x00056fbc

000435cc <USBEndpoint>:
   435cc:	e92d4038 	push	{r3, r4, r5, lr}
   435d0:	e2504000 	subs	r4, r0, #0
   435d4:	e1a05001 	mov	r5, r1
   435d8:	0a000010 	beq	43620 <USBEndpoint+0x54>
   435dc:	e3a03000 	mov	r3, #0
   435e0:	e3a01008 	mov	r1, #8
   435e4:	e3a02001 	mov	r2, #1
   435e8:	e1550003 	cmp	r5, r3
   435ec:	e5845000 	str	r5, [r4]
   435f0:	e5c43004 	strb	r3, [r4, #4]
   435f4:	e5c43005 	strb	r3, [r4, #5]
   435f8:	e5843008 	str	r3, [r4, #8]
   435fc:	e5c43014 	strb	r3, [r4, #20]
   43600:	e584100c 	str	r1, [r4, #12]
   43604:	e5842010 	str	r2, [r4, #16]
   43608:	18bd8038 	popne	{r3, r4, r5, pc}
   4360c:	e59f0020 	ldr	r0, [pc, #32]	; 43634 <USBEndpoint+0x68>
   43610:	e59f1020 	ldr	r1, [pc, #32]	; 43638 <USBEndpoint+0x6c>
   43614:	e3a02022 	mov	r2, #34	; 0x22
   43618:	e8bd4038 	pop	{r3, r4, r5, lr}
   4361c:	eaffce09 	b	36e48 <uspi_assertion_failed>
   43620:	e59f0014 	ldr	r0, [pc, #20]	; 4363c <USBEndpoint+0x70>
   43624:	e59f100c 	ldr	r1, [pc, #12]	; 43638 <USBEndpoint+0x6c>
   43628:	e3a02019 	mov	r2, #25
   4362c:	ebffce05 	bl	36e48 <uspi_assertion_failed>
   43630:	eaffffe9 	b	435dc <USBEndpoint+0x10>
   43634:	00056ae4 	.word	0x00056ae4
   43638:	00056fe4 	.word	0x00056fe4
   4363c:	00056434 	.word	0x00056434

00043640 <USBEndpoint2>:
   43640:	e92d4070 	push	{r4, r5, r6, lr}
   43644:	e2505000 	subs	r5, r0, #0
   43648:	e1a06001 	mov	r6, r1
   4364c:	e1a04002 	mov	r4, r2
   43650:	0a000058 	beq	437b8 <USBEndpoint2+0x178>
   43654:	e3a03001 	mov	r3, #1
   43658:	e3560000 	cmp	r6, #0
   4365c:	e5856000 	str	r6, [r5]
   43660:	e5853010 	str	r3, [r5, #16]
   43664:	0a000058 	beq	437cc <USBEndpoint2+0x18c>
   43668:	e3540000 	cmp	r4, #0
   4366c:	0a00005b 	beq	437e0 <USBEndpoint2+0x1a0>
   43670:	e5d43000 	ldrb	r3, [r4]
   43674:	e2433007 	sub	r3, r3, #7
   43678:	e31300fd 	tst	r3, #253	; 0xfd
   4367c:	1a000048 	bne	437a4 <USBEndpoint2+0x164>
   43680:	e5d43001 	ldrb	r3, [r4, #1]
   43684:	e3530005 	cmp	r3, #5
   43688:	0a000003 	beq	4369c <USBEndpoint2+0x5c>
   4368c:	e59f0160 	ldr	r0, [pc, #352]	; 437f4 <USBEndpoint2+0x1b4>
   43690:	e59f1160 	ldr	r1, [pc, #352]	; 437f8 <USBEndpoint2+0x1b8>
   43694:	e3a0202f 	mov	r2, #47	; 0x2f
   43698:	ebffcdea 	bl	36e48 <uspi_assertion_failed>
   4369c:	e5d43003 	ldrb	r3, [r4, #3]
   436a0:	e2033003 	and	r3, r3, #3
   436a4:	e3530002 	cmp	r3, #2
   436a8:	0a00002f 	beq	4376c <USBEndpoint2+0x12c>
   436ac:	e3530003 	cmp	r3, #3
   436b0:	1a000017 	bne	43714 <USBEndpoint2+0xd4>
   436b4:	e3a03002 	mov	r3, #2
   436b8:	e3a06001 	mov	r6, #1
   436bc:	e5c53005 	strb	r3, [r5, #5]
   436c0:	e5c56014 	strb	r6, [r5, #20]
   436c4:	e5d43002 	ldrb	r3, [r4, #2]
   436c8:	e203300f 	and	r3, r3, #15
   436cc:	e5c53004 	strb	r3, [r5, #4]
   436d0:	e1d430d2 	ldrsb	r3, [r4, #2]
   436d4:	e1a03fa3 	lsr	r3, r3, #31
   436d8:	e5853008 	str	r3, [r5, #8]
   436dc:	e5d43004 	ldrb	r3, [r4, #4]
   436e0:	e5d42005 	ldrb	r2, [r4, #5]
   436e4:	e1833402 	orr	r3, r3, r2, lsl #8
   436e8:	e585300c 	str	r3, [r5, #12]
   436ec:	e5d44006 	ldrb	r4, [r4, #6]
   436f0:	e3540000 	cmp	r4, #0
   436f4:	1a00000b 	bne	43728 <USBEndpoint2+0xe8>
   436f8:	e5950000 	ldr	r0, [r5]
   436fc:	ebfffbc8 	bl	42624 <USBDeviceGetSpeed>
   43700:	e3500002 	cmp	r0, #2
   43704:	11a04006 	movne	r4, r6
   43708:	0a000014 	beq	43760 <USBEndpoint2+0x120>
   4370c:	e5854010 	str	r4, [r5, #16]
   43710:	e8bd8070 	pop	{r4, r5, r6, pc}
   43714:	e59f00e0 	ldr	r0, [pc, #224]	; 437fc <USBEndpoint2+0x1bc>
   43718:	e59f10d8 	ldr	r1, [pc, #216]	; 437f8 <USBEndpoint2+0x1b8>
   4371c:	e3a0203e 	mov	r2, #62	; 0x3e
   43720:	e8bd4070 	pop	{r4, r5, r6, lr}
   43724:	eaffcdc7 	b	36e48 <uspi_assertion_failed>
   43728:	e5950000 	ldr	r0, [r5]
   4372c:	ebfffbbc 	bl	42624 <USBDeviceGetSpeed>
   43730:	e3500002 	cmp	r0, #2
   43734:	1afffff4 	bne	4370c <USBEndpoint2+0xcc>
   43738:	e3540010 	cmp	r4, #16
   4373c:	83a03a01 	movhi	r3, #4096	; 0x1000
   43740:	85853010 	strhi	r3, [r5, #16]
   43744:	88bd8070 	pophi	{r4, r5, r6, pc}
   43748:	e2443001 	sub	r3, r4, #1
   4374c:	e1a03316 	lsl	r3, r6, r3
   43750:	e1a031a3 	lsr	r3, r3, #3
   43754:	e3530000 	cmp	r3, #0
   43758:	e5853010 	str	r3, [r5, #16]
   4375c:	18bd8070 	popne	{r4, r5, r6, pc}
   43760:	e3a03001 	mov	r3, #1
   43764:	e5853010 	str	r3, [r5, #16]
   43768:	e8bd8070 	pop	{r4, r5, r6, pc}
   4376c:	e3a03001 	mov	r3, #1
   43770:	e5c53005 	strb	r3, [r5, #5]
   43774:	e5c53014 	strb	r3, [r5, #20]
   43778:	e5d43002 	ldrb	r3, [r4, #2]
   4377c:	e203300f 	and	r3, r3, #15
   43780:	e5c53004 	strb	r3, [r5, #4]
   43784:	e1d430d2 	ldrsb	r3, [r4, #2]
   43788:	e1a03fa3 	lsr	r3, r3, #31
   4378c:	e5853008 	str	r3, [r5, #8]
   43790:	e5d43004 	ldrb	r3, [r4, #4]
   43794:	e5d42005 	ldrb	r2, [r4, #5]
   43798:	e1833402 	orr	r3, r3, r2, lsl #8
   4379c:	e585300c 	str	r3, [r5, #12]
   437a0:	e8bd8070 	pop	{r4, r5, r6, pc}
   437a4:	e59f0054 	ldr	r0, [pc, #84]	; 43800 <USBEndpoint2+0x1c0>
   437a8:	e59f1048 	ldr	r1, [pc, #72]	; 437f8 <USBEndpoint2+0x1b8>
   437ac:	e3a0202e 	mov	r2, #46	; 0x2e
   437b0:	ebffcda4 	bl	36e48 <uspi_assertion_failed>
   437b4:	eaffffb1 	b	43680 <USBEndpoint2+0x40>
   437b8:	e59f0044 	ldr	r0, [pc, #68]	; 43804 <USBEndpoint2+0x1c4>
   437bc:	e59f1034 	ldr	r1, [pc, #52]	; 437f8 <USBEndpoint2+0x1b8>
   437c0:	e3a02027 	mov	r2, #39	; 0x27
   437c4:	ebffcd9f 	bl	36e48 <uspi_assertion_failed>
   437c8:	eaffffa1 	b	43654 <USBEndpoint2+0x14>
   437cc:	e59f0034 	ldr	r0, [pc, #52]	; 43808 <USBEndpoint2+0x1c8>
   437d0:	e59f1020 	ldr	r1, [pc, #32]	; 437f8 <USBEndpoint2+0x1b8>
   437d4:	e3a0202b 	mov	r2, #43	; 0x2b
   437d8:	ebffcd9a 	bl	36e48 <uspi_assertion_failed>
   437dc:	eaffffa1 	b	43668 <USBEndpoint2+0x28>
   437e0:	e59f0024 	ldr	r0, [pc, #36]	; 4380c <USBEndpoint2+0x1cc>
   437e4:	e59f100c 	ldr	r1, [pc, #12]	; 437f8 <USBEndpoint2+0x1b8>
   437e8:	e3a0202d 	mov	r2, #45	; 0x2d
   437ec:	ebffcd95 	bl	36e48 <uspi_assertion_failed>
   437f0:	eaffff9e 	b	43670 <USBEndpoint2+0x30>
   437f4:	00057050 	.word	0x00057050
   437f8:	00056fe4 	.word	0x00056fe4
   437fc:	000563cc 	.word	0x000563cc
   43800:	00056ff4 	.word	0x00056ff4
   43804:	00056434 	.word	0x00056434
   43808:	00056ae4 	.word	0x00056ae4
   4380c:	00056410 	.word	0x00056410

00043810 <USBEndpointCopy>:
   43810:	e92d4070 	push	{r4, r5, r6, lr}
   43814:	e2504000 	subs	r4, r0, #0
   43818:	e1a05001 	mov	r5, r1
   4381c:	e1a06002 	mov	r6, r2
   43820:	0a000015 	beq	4387c <USBEndpointCopy+0x6c>
   43824:	e3550000 	cmp	r5, #0
   43828:	0a000018 	beq	43890 <USBEndpointCopy+0x80>
   4382c:	e3560000 	cmp	r6, #0
   43830:	e5846000 	str	r6, [r4]
   43834:	0a00000b 	beq	43868 <USBEndpointCopy+0x58>
   43838:	e5d5e004 	ldrb	lr, [r5, #4]
   4383c:	e5d5c005 	ldrb	ip, [r5, #5]
   43840:	e5d53014 	ldrb	r3, [r5, #20]
   43844:	e2850008 	add	r0, r5, #8
   43848:	e8900007 	ldm	r0, {r0, r1, r2}
   4384c:	e5c4e004 	strb	lr, [r4, #4]
   43850:	e5c4c005 	strb	ip, [r4, #5]
   43854:	e5840008 	str	r0, [r4, #8]
   43858:	e584100c 	str	r1, [r4, #12]
   4385c:	e5842010 	str	r2, [r4, #16]
   43860:	e5c43014 	strb	r3, [r4, #20]
   43864:	e8bd8070 	pop	{r4, r5, r6, pc}
   43868:	e59f0034 	ldr	r0, [pc, #52]	; 438a4 <USBEndpointCopy+0x94>
   4386c:	e59f1034 	ldr	r1, [pc, #52]	; 438a8 <USBEndpointCopy+0x98>
   43870:	e3a0206d 	mov	r2, #109	; 0x6d
   43874:	ebffcd73 	bl	36e48 <uspi_assertion_failed>
   43878:	eaffffee 	b	43838 <USBEndpointCopy+0x28>
   4387c:	e59f0028 	ldr	r0, [pc, #40]	; 438ac <USBEndpointCopy+0x9c>
   43880:	e59f1020 	ldr	r1, [pc, #32]	; 438a8 <USBEndpointCopy+0x98>
   43884:	e3a02068 	mov	r2, #104	; 0x68
   43888:	ebffcd6e 	bl	36e48 <uspi_assertion_failed>
   4388c:	eaffffe4 	b	43824 <USBEndpointCopy+0x14>
   43890:	e59f0018 	ldr	r0, [pc, #24]	; 438b0 <USBEndpointCopy+0xa0>
   43894:	e59f100c 	ldr	r1, [pc, #12]	; 438a8 <USBEndpointCopy+0x98>
   43898:	e3a0206a 	mov	r2, #106	; 0x6a
   4389c:	ebffcd69 	bl	36e48 <uspi_assertion_failed>
   438a0:	eaffffe1 	b	4382c <USBEndpointCopy+0x1c>
   438a4:	00056ae4 	.word	0x00056ae4
   438a8:	00056fe4 	.word	0x00056fe4
   438ac:	00056434 	.word	0x00056434
   438b0:	00057080 	.word	0x00057080

000438b4 <_USBEndpoint>:
   438b4:	e92d4010 	push	{r4, lr}
   438b8:	e2504000 	subs	r4, r0, #0
   438bc:	0a000002 	beq	438cc <_USBEndpoint+0x18>
   438c0:	e3a03000 	mov	r3, #0
   438c4:	e5843000 	str	r3, [r4]
   438c8:	e8bd8010 	pop	{r4, pc}
   438cc:	e59f000c 	ldr	r0, [pc, #12]	; 438e0 <_USBEndpoint+0x2c>
   438d0:	e59f100c 	ldr	r1, [pc, #12]	; 438e4 <_USBEndpoint+0x30>
   438d4:	e3a02079 	mov	r2, #121	; 0x79
   438d8:	ebffcd5a 	bl	36e48 <uspi_assertion_failed>
   438dc:	eafffff7 	b	438c0 <_USBEndpoint+0xc>
   438e0:	00056434 	.word	0x00056434
   438e4:	00056fe4 	.word	0x00056fe4

000438e8 <USBEndpointGetDevice>:
   438e8:	e92d4010 	push	{r4, lr}
   438ec:	e2504000 	subs	r4, r0, #0
   438f0:	0a000008 	beq	43918 <USBEndpointGetDevice+0x30>
   438f4:	e5940000 	ldr	r0, [r4]
   438f8:	e3500000 	cmp	r0, #0
   438fc:	18bd8010 	popne	{r4, pc}
   43900:	e59f0024 	ldr	r0, [pc, #36]	; 4392c <USBEndpointGetDevice+0x44>
   43904:	e59f1024 	ldr	r1, [pc, #36]	; 43930 <USBEndpointGetDevice+0x48>
   43908:	e3a02080 	mov	r2, #128	; 0x80
   4390c:	ebffcd4d 	bl	36e48 <uspi_assertion_failed>
   43910:	e5940000 	ldr	r0, [r4]
   43914:	e8bd8010 	pop	{r4, pc}
   43918:	e59f0014 	ldr	r0, [pc, #20]	; 43934 <USBEndpointGetDevice+0x4c>
   4391c:	e59f100c 	ldr	r1, [pc, #12]	; 43930 <USBEndpointGetDevice+0x48>
   43920:	e3a0207f 	mov	r2, #127	; 0x7f
   43924:	ebffcd47 	bl	36e48 <uspi_assertion_failed>
   43928:	eafffff1 	b	438f4 <USBEndpointGetDevice+0xc>
   4392c:	00056ae4 	.word	0x00056ae4
   43930:	00056fe4 	.word	0x00056fe4
   43934:	00056434 	.word	0x00056434

00043938 <USBEndpointGetNumber>:
   43938:	e92d4010 	push	{r4, lr}
   4393c:	e2504000 	subs	r4, r0, #0
   43940:	0a000001 	beq	4394c <USBEndpointGetNumber+0x14>
   43944:	e5d40004 	ldrb	r0, [r4, #4]
   43948:	e8bd8010 	pop	{r4, pc}
   4394c:	e59f0010 	ldr	r0, [pc, #16]	; 43964 <USBEndpointGetNumber+0x2c>
   43950:	e59f1010 	ldr	r1, [pc, #16]	; 43968 <USBEndpointGetNumber+0x30>
   43954:	e3a02086 	mov	r2, #134	; 0x86
   43958:	ebffcd3a 	bl	36e48 <uspi_assertion_failed>
   4395c:	e5d40004 	ldrb	r0, [r4, #4]
   43960:	e8bd8010 	pop	{r4, pc}
   43964:	00056434 	.word	0x00056434
   43968:	00056fe4 	.word	0x00056fe4

0004396c <USBEndpointGetType>:
   4396c:	e92d4010 	push	{r4, lr}
   43970:	e2504000 	subs	r4, r0, #0
   43974:	0a000001 	beq	43980 <USBEndpointGetType+0x14>
   43978:	e5d40005 	ldrb	r0, [r4, #5]
   4397c:	e8bd8010 	pop	{r4, pc}
   43980:	e59f0010 	ldr	r0, [pc, #16]	; 43998 <USBEndpointGetType+0x2c>
   43984:	e59f1010 	ldr	r1, [pc, #16]	; 4399c <USBEndpointGetType+0x30>
   43988:	e3a0208c 	mov	r2, #140	; 0x8c
   4398c:	ebffcd2d 	bl	36e48 <uspi_assertion_failed>
   43990:	e5d40005 	ldrb	r0, [r4, #5]
   43994:	e8bd8010 	pop	{r4, pc}
   43998:	00056434 	.word	0x00056434
   4399c:	00056fe4 	.word	0x00056fe4

000439a0 <USBEndpointIsDirectionIn>:
   439a0:	e92d4010 	push	{r4, lr}
   439a4:	e2504000 	subs	r4, r0, #0
   439a8:	0a000001 	beq	439b4 <USBEndpointIsDirectionIn+0x14>
   439ac:	e5940008 	ldr	r0, [r4, #8]
   439b0:	e8bd8010 	pop	{r4, pc}
   439b4:	e59f0010 	ldr	r0, [pc, #16]	; 439cc <USBEndpointIsDirectionIn+0x2c>
   439b8:	e59f1010 	ldr	r1, [pc, #16]	; 439d0 <USBEndpointIsDirectionIn+0x30>
   439bc:	e3a02092 	mov	r2, #146	; 0x92
   439c0:	ebffcd20 	bl	36e48 <uspi_assertion_failed>
   439c4:	e5940008 	ldr	r0, [r4, #8]
   439c8:	e8bd8010 	pop	{r4, pc}
   439cc:	00056434 	.word	0x00056434
   439d0:	00056fe4 	.word	0x00056fe4

000439d4 <USBEndpointSetMaxPacketSize>:
   439d4:	e92d4038 	push	{r3, r4, r5, lr}
   439d8:	e2504000 	subs	r4, r0, #0
   439dc:	e1a05001 	mov	r5, r1
   439e0:	0a000001 	beq	439ec <USBEndpointSetMaxPacketSize+0x18>
   439e4:	e584500c 	str	r5, [r4, #12]
   439e8:	e8bd8038 	pop	{r3, r4, r5, pc}
   439ec:	e59f0010 	ldr	r0, [pc, #16]	; 43a04 <USBEndpointSetMaxPacketSize+0x30>
   439f0:	e59f1010 	ldr	r1, [pc, #16]	; 43a08 <USBEndpointSetMaxPacketSize+0x34>
   439f4:	e3a02098 	mov	r2, #152	; 0x98
   439f8:	ebffcd12 	bl	36e48 <uspi_assertion_failed>
   439fc:	e584500c 	str	r5, [r4, #12]
   43a00:	e8bd8038 	pop	{r3, r4, r5, pc}
   43a04:	00056434 	.word	0x00056434
   43a08:	00056fe4 	.word	0x00056fe4

00043a0c <USBEndpointGetMaxPacketSize>:
   43a0c:	e92d4010 	push	{r4, lr}
   43a10:	e2504000 	subs	r4, r0, #0
   43a14:	0a000001 	beq	43a20 <USBEndpointGetMaxPacketSize+0x14>
   43a18:	e594000c 	ldr	r0, [r4, #12]
   43a1c:	e8bd8010 	pop	{r4, pc}
   43a20:	e59f0010 	ldr	r0, [pc, #16]	; 43a38 <USBEndpointGetMaxPacketSize+0x2c>
   43a24:	e59f1010 	ldr	r1, [pc, #16]	; 43a3c <USBEndpointGetMaxPacketSize+0x30>
   43a28:	e3a0209e 	mov	r2, #158	; 0x9e
   43a2c:	ebffcd05 	bl	36e48 <uspi_assertion_failed>
   43a30:	e594000c 	ldr	r0, [r4, #12]
   43a34:	e8bd8010 	pop	{r4, pc}
   43a38:	00056434 	.word	0x00056434
   43a3c:	00056fe4 	.word	0x00056fe4

00043a40 <USBEndpointGetInterval>:
   43a40:	e92d4010 	push	{r4, lr}
   43a44:	e2504000 	subs	r4, r0, #0
   43a48:	0a000008 	beq	43a70 <USBEndpointGetInterval+0x30>
   43a4c:	e5d43005 	ldrb	r3, [r4, #5]
   43a50:	e3530002 	cmp	r3, #2
   43a54:	0a000003 	beq	43a68 <USBEndpointGetInterval+0x28>
   43a58:	e59f0024 	ldr	r0, [pc, #36]	; 43a84 <USBEndpointGetInterval+0x44>
   43a5c:	e59f1024 	ldr	r1, [pc, #36]	; 43a88 <USBEndpointGetInterval+0x48>
   43a60:	e3a020a5 	mov	r2, #165	; 0xa5
   43a64:	ebffccf7 	bl	36e48 <uspi_assertion_failed>
   43a68:	e5940010 	ldr	r0, [r4, #16]
   43a6c:	e8bd8010 	pop	{r4, pc}
   43a70:	e59f0014 	ldr	r0, [pc, #20]	; 43a8c <USBEndpointGetInterval+0x4c>
   43a74:	e59f100c 	ldr	r1, [pc, #12]	; 43a88 <USBEndpointGetInterval+0x48>
   43a78:	e3a020a4 	mov	r2, #164	; 0xa4
   43a7c:	ebffccf1 	bl	36e48 <uspi_assertion_failed>
   43a80:	eafffff1 	b	43a4c <USBEndpointGetInterval+0xc>
   43a84:	00057090 	.word	0x00057090
   43a88:	00056fe4 	.word	0x00056fe4
   43a8c:	00056434 	.word	0x00056434

00043a90 <USBEndpointGetNextPID>:
   43a90:	e92d4038 	push	{r3, r4, r5, lr}
   43a94:	e2504000 	subs	r4, r0, #0
   43a98:	e1a05001 	mov	r5, r1
   43a9c:	0a00000e 	beq	43adc <USBEndpointGetNextPID+0x4c>
   43aa0:	e3550000 	cmp	r5, #0
   43aa4:	0a000004 	beq	43abc <USBEndpointGetNextPID+0x2c>
   43aa8:	e5d43005 	ldrb	r3, [r4, #5]
   43aac:	e3530000 	cmp	r3, #0
   43ab0:	1a000003 	bne	43ac4 <USBEndpointGetNextPID+0x34>
   43ab4:	e3a00002 	mov	r0, #2
   43ab8:	e8bd8038 	pop	{r3, r4, r5, pc}
   43abc:	e5d40014 	ldrb	r0, [r4, #20]
   43ac0:	e8bd8038 	pop	{r3, r4, r5, pc}
   43ac4:	e59f0024 	ldr	r0, [pc, #36]	; 43af0 <USBEndpointGetNextPID+0x60>
   43ac8:	e59f1024 	ldr	r1, [pc, #36]	; 43af4 <USBEndpointGetNextPID+0x64>
   43acc:	e3a020af 	mov	r2, #175	; 0xaf
   43ad0:	ebffccdc 	bl	36e48 <uspi_assertion_failed>
   43ad4:	e3a00002 	mov	r0, #2
   43ad8:	e8bd8038 	pop	{r3, r4, r5, pc}
   43adc:	e59f0014 	ldr	r0, [pc, #20]	; 43af8 <USBEndpointGetNextPID+0x68>
   43ae0:	e59f100c 	ldr	r1, [pc, #12]	; 43af4 <USBEndpointGetNextPID+0x64>
   43ae4:	e3a020ac 	mov	r2, #172	; 0xac
   43ae8:	ebffccd6 	bl	36e48 <uspi_assertion_failed>
   43aec:	eaffffeb 	b	43aa0 <USBEndpointGetNextPID+0x10>
   43af0:	000570b8 	.word	0x000570b8
   43af4:	00056fe4 	.word	0x00056fe4
   43af8:	00056434 	.word	0x00056434

00043afc <USBEndpointSkipPID>:
   43afc:	e92d4070 	push	{r4, r5, r6, lr}
   43b00:	e2504000 	subs	r4, r0, #0
   43b04:	e1a06001 	mov	r6, r1
   43b08:	e1a05002 	mov	r5, r2
   43b0c:	0a000028 	beq	43bb4 <USBEndpointSkipPID+0xb8>
   43b10:	e5d43005 	ldrb	r3, [r4, #5]
   43b14:	e3530002 	cmp	r3, #2
   43b18:	8a000011 	bhi	43b64 <USBEndpointSkipPID+0x68>
   43b1c:	e3550000 	cmp	r5, #0
   43b20:	1a000009 	bne	43b4c <USBEndpointSkipPID+0x50>
   43b24:	e5d43014 	ldrb	r3, [r4, #20]
   43b28:	e3530001 	cmp	r3, #1
   43b2c:	0a00001b 	beq	43ba0 <USBEndpointSkipPID+0xa4>
   43b30:	3a00001c 	bcc	43ba8 <USBEndpointSkipPID+0xac>
   43b34:	e3530002 	cmp	r3, #2
   43b38:	1a000013 	bne	43b8c <USBEndpointSkipPID+0x90>
   43b3c:	e3160001 	tst	r6, #1
   43b40:	13a03001 	movne	r3, #1
   43b44:	15c43014 	strbne	r3, [r4, #20]
   43b48:	e8bd8070 	pop	{r4, r5, r6, pc}
   43b4c:	e5d43005 	ldrb	r3, [r4, #5]
   43b50:	e3530000 	cmp	r3, #0
   43b54:	1a000007 	bne	43b78 <USBEndpointSkipPID+0x7c>
   43b58:	e3a03000 	mov	r3, #0
   43b5c:	e5c43014 	strb	r3, [r4, #20]
   43b60:	e8bd8070 	pop	{r4, r5, r6, pc}
   43b64:	e59f005c 	ldr	r0, [pc, #92]	; 43bc8 <USBEndpointSkipPID+0xcc>
   43b68:	e59f105c 	ldr	r1, [pc, #92]	; 43bcc <USBEndpointSkipPID+0xd0>
   43b6c:	e3a020bc 	mov	r2, #188	; 0xbc
   43b70:	ebffccb4 	bl	36e48 <uspi_assertion_failed>
   43b74:	eaffffe8 	b	43b1c <USBEndpointSkipPID+0x20>
   43b78:	e59f0050 	ldr	r0, [pc, #80]	; 43bd0 <USBEndpointSkipPID+0xd4>
   43b7c:	e59f1048 	ldr	r1, [pc, #72]	; 43bcc <USBEndpointSkipPID+0xd0>
   43b80:	e3a020db 	mov	r2, #219	; 0xdb
   43b84:	ebffccaf 	bl	36e48 <uspi_assertion_failed>
   43b88:	eafffff2 	b	43b58 <USBEndpointSkipPID+0x5c>
   43b8c:	e59f0040 	ldr	r0, [pc, #64]	; 43bd4 <USBEndpointSkipPID+0xd8>
   43b90:	e59f1034 	ldr	r1, [pc, #52]	; 43bcc <USBEndpointSkipPID+0xd0>
   43b94:	e3a020d5 	mov	r2, #213	; 0xd5
   43b98:	e8bd4070 	pop	{r4, r5, r6, lr}
   43b9c:	eaffcca9 	b	36e48 <uspi_assertion_failed>
   43ba0:	e3160001 	tst	r6, #1
   43ba4:	08bd8070 	popeq	{r4, r5, r6, pc}
   43ba8:	e3a03002 	mov	r3, #2
   43bac:	e5c43014 	strb	r3, [r4, #20]
   43bb0:	e8bd8070 	pop	{r4, r5, r6, pc}
   43bb4:	e59f001c 	ldr	r0, [pc, #28]	; 43bd8 <USBEndpointSkipPID+0xdc>
   43bb8:	e59f100c 	ldr	r1, [pc, #12]	; 43bcc <USBEndpointSkipPID+0xd0>
   43bbc:	e3a020b9 	mov	r2, #185	; 0xb9
   43bc0:	ebffcca0 	bl	36e48 <uspi_assertion_failed>
   43bc4:	eaffffd1 	b	43b10 <USBEndpointSkipPID+0x14>
   43bc8:	000570e0 	.word	0x000570e0
   43bcc:	00056fe4 	.word	0x00056fe4
   43bd0:	000570b8 	.word	0x000570b8
   43bd4:	000563cc 	.word	0x000563cc
   43bd8:	00056434 	.word	0x00056434

00043bdc <USBEndpointResetPID>:
   43bdc:	e92d4010 	push	{r4, lr}
   43be0:	e2504000 	subs	r4, r0, #0
   43be4:	0a000009 	beq	43c10 <USBEndpointResetPID+0x34>
   43be8:	e5d43005 	ldrb	r3, [r4, #5]
   43bec:	e3530001 	cmp	r3, #1
   43bf0:	0a000003 	beq	43c04 <USBEndpointResetPID+0x28>
   43bf4:	e59f0028 	ldr	r0, [pc, #40]	; 43c24 <USBEndpointResetPID+0x48>
   43bf8:	e59f1028 	ldr	r1, [pc, #40]	; 43c28 <USBEndpointResetPID+0x4c>
   43bfc:	e3a020e4 	mov	r2, #228	; 0xe4
   43c00:	ebffcc90 	bl	36e48 <uspi_assertion_failed>
   43c04:	e3a03001 	mov	r3, #1
   43c08:	e5c43014 	strb	r3, [r4, #20]
   43c0c:	e8bd8010 	pop	{r4, pc}
   43c10:	e59f0014 	ldr	r0, [pc, #20]	; 43c2c <USBEndpointResetPID+0x50>
   43c14:	e59f100c 	ldr	r1, [pc, #12]	; 43c28 <USBEndpointResetPID+0x4c>
   43c18:	e3a020e3 	mov	r2, #227	; 0xe3
   43c1c:	ebffcc89 	bl	36e48 <uspi_assertion_failed>
   43c20:	eafffff0 	b	43be8 <USBEndpointResetPID+0xc>
   43c24:	00057154 	.word	0x00057154
   43c28:	00056fe4 	.word	0x00056fe4
   43c2c:	00056434 	.word	0x00056434

00043c30 <USBRequest>:
   43c30:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   43c34:	e2504000 	subs	r4, r0, #0
   43c38:	e24dd00c 	sub	sp, sp, #12
   43c3c:	e1a06001 	mov	r6, r1
   43c40:	e1a05002 	mov	r5, r2
   43c44:	e59d7020 	ldr	r7, [sp, #32]
   43c48:	0a000017 	beq	43cac <USBRequest+0x7c>
   43c4c:	e3a02000 	mov	r2, #0
   43c50:	e1560002 	cmp	r6, r2
   43c54:	e88400c0 	stm	r4, {r6, r7}
   43c58:	e5845008 	str	r5, [r4, #8]
   43c5c:	e584300c 	str	r3, [r4, #12]
   43c60:	e5842010 	str	r2, [r4, #16]
   43c64:	e5842014 	str	r2, [r4, #20]
   43c68:	e5842018 	str	r2, [r4, #24]
   43c6c:	e584201c 	str	r2, [r4, #28]
   43c70:	e5842020 	str	r2, [r4, #32]
   43c74:	0a000013 	beq	43cc8 <USBRequest+0x98>
   43c78:	e3550000 	cmp	r5, #0
   43c7c:	0a000001 	beq	43c88 <USBRequest+0x58>
   43c80:	e28dd00c 	add	sp, sp, #12
   43c84:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   43c88:	e594300c 	ldr	r3, [r4, #12]
   43c8c:	e3530000 	cmp	r3, #0
   43c90:	0afffffa 	beq	43c80 <USBRequest+0x50>
   43c94:	e3a02026 	mov	r2, #38	; 0x26
   43c98:	e59f0040 	ldr	r0, [pc, #64]	; 43ce0 <USBRequest+0xb0>
   43c9c:	e59f1040 	ldr	r1, [pc, #64]	; 43ce4 <USBRequest+0xb4>
   43ca0:	e28dd00c 	add	sp, sp, #12
   43ca4:	e8bd40f0 	pop	{r4, r5, r6, r7, lr}
   43ca8:	eaffcc66 	b	36e48 <uspi_assertion_failed>
   43cac:	e59f0034 	ldr	r0, [pc, #52]	; 43ce8 <USBRequest+0xb8>
   43cb0:	e59f102c 	ldr	r1, [pc, #44]	; 43ce4 <USBRequest+0xb4>
   43cb4:	e3a02019 	mov	r2, #25
   43cb8:	e58d3004 	str	r3, [sp, #4]
   43cbc:	ebffcc61 	bl	36e48 <uspi_assertion_failed>
   43cc0:	e59d3004 	ldr	r3, [sp, #4]
   43cc4:	eaffffe0 	b	43c4c <USBRequest+0x1c>
   43cc8:	e59f001c 	ldr	r0, [pc, #28]	; 43cec <USBRequest+0xbc>
   43ccc:	e59f1010 	ldr	r1, [pc, #16]	; 43ce4 <USBRequest+0xb4>
   43cd0:	e3a02025 	mov	r2, #37	; 0x25
   43cd4:	ebffcc5b 	bl	36e48 <uspi_assertion_failed>
   43cd8:	e5945008 	ldr	r5, [r4, #8]
   43cdc:	eaffffe5 	b	43c78 <USBRequest+0x48>
   43ce0:	00057188 	.word	0x00057188
   43ce4:	00057178 	.word	0x00057178
   43ce8:	00056434 	.word	0x00056434
   43cec:	00056ab8 	.word	0x00056ab8

00043cf0 <_USBRequest>:
   43cf0:	e92d4010 	push	{r4, lr}
   43cf4:	e2504000 	subs	r4, r0, #0
   43cf8:	0a000005 	beq	43d14 <_USBRequest+0x24>
   43cfc:	e3a03000 	mov	r3, #0
   43d00:	e5843000 	str	r3, [r4]
   43d04:	e5843004 	str	r3, [r4, #4]
   43d08:	e5843008 	str	r3, [r4, #8]
   43d0c:	e5843018 	str	r3, [r4, #24]
   43d10:	e8bd8010 	pop	{r4, pc}
   43d14:	e59f000c 	ldr	r0, [pc, #12]	; 43d28 <_USBRequest+0x38>
   43d18:	e59f100c 	ldr	r1, [pc, #12]	; 43d2c <_USBRequest+0x3c>
   43d1c:	e3a0202b 	mov	r2, #43	; 0x2b
   43d20:	ebffcc48 	bl	36e48 <uspi_assertion_failed>
   43d24:	eafffff4 	b	43cfc <_USBRequest+0xc>
   43d28:	00056434 	.word	0x00056434
   43d2c:	00057178 	.word	0x00057178

00043d30 <USBRequestGetEndpoint>:
   43d30:	e92d4010 	push	{r4, lr}
   43d34:	e2504000 	subs	r4, r0, #0
   43d38:	0a000008 	beq	43d60 <USBRequestGetEndpoint+0x30>
   43d3c:	e5940000 	ldr	r0, [r4]
   43d40:	e3500000 	cmp	r0, #0
   43d44:	18bd8010 	popne	{r4, pc}
   43d48:	e59f0024 	ldr	r0, [pc, #36]	; 43d74 <USBRequestGetEndpoint+0x44>
   43d4c:	e59f1024 	ldr	r1, [pc, #36]	; 43d78 <USBRequestGetEndpoint+0x48>
   43d50:	e3a02035 	mov	r2, #53	; 0x35
   43d54:	ebffcc3b 	bl	36e48 <uspi_assertion_failed>
   43d58:	e5940000 	ldr	r0, [r4]
   43d5c:	e8bd8010 	pop	{r4, pc}
   43d60:	e59f0014 	ldr	r0, [pc, #20]	; 43d7c <USBRequestGetEndpoint+0x4c>
   43d64:	e59f100c 	ldr	r1, [pc, #12]	; 43d78 <USBRequestGetEndpoint+0x48>
   43d68:	e3a02034 	mov	r2, #52	; 0x34
   43d6c:	ebffcc35 	bl	36e48 <uspi_assertion_failed>
   43d70:	eafffff1 	b	43d3c <USBRequestGetEndpoint+0xc>
   43d74:	00056ab8 	.word	0x00056ab8
   43d78:	00057178 	.word	0x00057178
   43d7c:	00056434 	.word	0x00056434

00043d80 <USBRequestSetStatus>:
   43d80:	e92d4038 	push	{r3, r4, r5, lr}
   43d84:	e2504000 	subs	r4, r0, #0
   43d88:	e1a05001 	mov	r5, r1
   43d8c:	0a000001 	beq	43d98 <USBRequestSetStatus+0x18>
   43d90:	e5845010 	str	r5, [r4, #16]
   43d94:	e8bd8038 	pop	{r3, r4, r5, pc}
   43d98:	e59f0010 	ldr	r0, [pc, #16]	; 43db0 <USBRequestSetStatus+0x30>
   43d9c:	e59f1010 	ldr	r1, [pc, #16]	; 43db4 <USBRequestSetStatus+0x34>
   43da0:	e3a0203b 	mov	r2, #59	; 0x3b
   43da4:	ebffcc27 	bl	36e48 <uspi_assertion_failed>
   43da8:	e5845010 	str	r5, [r4, #16]
   43dac:	e8bd8038 	pop	{r3, r4, r5, pc}
   43db0:	00056434 	.word	0x00056434
   43db4:	00057178 	.word	0x00057178

00043db8 <USBRequestSetResultLen>:
   43db8:	e92d4038 	push	{r3, r4, r5, lr}
   43dbc:	e2504000 	subs	r4, r0, #0
   43dc0:	e1a05001 	mov	r5, r1
   43dc4:	0a000001 	beq	43dd0 <USBRequestSetResultLen+0x18>
   43dc8:	e5845014 	str	r5, [r4, #20]
   43dcc:	e8bd8038 	pop	{r3, r4, r5, pc}
   43dd0:	e59f0010 	ldr	r0, [pc, #16]	; 43de8 <USBRequestSetResultLen+0x30>
   43dd4:	e59f1010 	ldr	r1, [pc, #16]	; 43dec <USBRequestSetResultLen+0x34>
   43dd8:	e3a02041 	mov	r2, #65	; 0x41
   43ddc:	ebffcc19 	bl	36e48 <uspi_assertion_failed>
   43de0:	e5845014 	str	r5, [r4, #20]
   43de4:	e8bd8038 	pop	{r3, r4, r5, pc}
   43de8:	00056434 	.word	0x00056434
   43dec:	00057178 	.word	0x00057178

00043df0 <USBRequestGetStatus>:
   43df0:	e92d4010 	push	{r4, lr}
   43df4:	e2504000 	subs	r4, r0, #0
   43df8:	0a000001 	beq	43e04 <USBRequestGetStatus+0x14>
   43dfc:	e5940010 	ldr	r0, [r4, #16]
   43e00:	e8bd8010 	pop	{r4, pc}
   43e04:	e59f0010 	ldr	r0, [pc, #16]	; 43e1c <USBRequestGetStatus+0x2c>
   43e08:	e59f1010 	ldr	r1, [pc, #16]	; 43e20 <USBRequestGetStatus+0x30>
   43e0c:	e3a02047 	mov	r2, #71	; 0x47
   43e10:	ebffcc0c 	bl	36e48 <uspi_assertion_failed>
   43e14:	e5940010 	ldr	r0, [r4, #16]
   43e18:	e8bd8010 	pop	{r4, pc}
   43e1c:	00056434 	.word	0x00056434
   43e20:	00057178 	.word	0x00057178

00043e24 <USBRequestGetResultLength>:
   43e24:	e92d4010 	push	{r4, lr}
   43e28:	e2504000 	subs	r4, r0, #0
   43e2c:	0a000008 	beq	43e54 <USBRequestGetResultLength+0x30>
   43e30:	e5943010 	ldr	r3, [r4, #16]
   43e34:	e3530000 	cmp	r3, #0
   43e38:	1a000003 	bne	43e4c <USBRequestGetResultLength+0x28>
   43e3c:	e59f0024 	ldr	r0, [pc, #36]	; 43e68 <USBRequestGetResultLength+0x44>
   43e40:	e59f1024 	ldr	r1, [pc, #36]	; 43e6c <USBRequestGetResultLength+0x48>
   43e44:	e3a0204e 	mov	r2, #78	; 0x4e
   43e48:	ebffcbfe 	bl	36e48 <uspi_assertion_failed>
   43e4c:	e5940014 	ldr	r0, [r4, #20]
   43e50:	e8bd8010 	pop	{r4, pc}
   43e54:	e59f0014 	ldr	r0, [pc, #20]	; 43e70 <USBRequestGetResultLength+0x4c>
   43e58:	e59f100c 	ldr	r1, [pc, #12]	; 43e6c <USBRequestGetResultLength+0x48>
   43e5c:	e3a0204d 	mov	r2, #77	; 0x4d
   43e60:	ebffcbf8 	bl	36e48 <uspi_assertion_failed>
   43e64:	eafffff1 	b	43e30 <USBRequestGetResultLength+0xc>
   43e68:	000571b8 	.word	0x000571b8
   43e6c:	00057178 	.word	0x00057178
   43e70:	00056434 	.word	0x00056434

00043e74 <USBRequestGetSetupData>:
   43e74:	e92d4010 	push	{r4, lr}
   43e78:	e2504000 	subs	r4, r0, #0
   43e7c:	0a000011 	beq	43ec8 <USBRequestGetSetupData+0x54>
   43e80:	e5940000 	ldr	r0, [r4]
   43e84:	ebfffeb8 	bl	4396c <USBEndpointGetType>
   43e88:	e3500000 	cmp	r0, #0
   43e8c:	1a000008 	bne	43eb4 <USBRequestGetSetupData+0x40>
   43e90:	e5940004 	ldr	r0, [r4, #4]
   43e94:	e3500000 	cmp	r0, #0
   43e98:	18bd8010 	popne	{r4, pc}
   43e9c:	e59f0038 	ldr	r0, [pc, #56]	; 43edc <USBRequestGetSetupData+0x68>
   43ea0:	e59f1038 	ldr	r1, [pc, #56]	; 43ee0 <USBRequestGetSetupData+0x6c>
   43ea4:	e3a02057 	mov	r2, #87	; 0x57
   43ea8:	ebffcbe6 	bl	36e48 <uspi_assertion_failed>
   43eac:	e5940004 	ldr	r0, [r4, #4]
   43eb0:	e8bd8010 	pop	{r4, pc}
   43eb4:	e59f0028 	ldr	r0, [pc, #40]	; 43ee4 <USBRequestGetSetupData+0x70>
   43eb8:	e59f1020 	ldr	r1, [pc, #32]	; 43ee0 <USBRequestGetSetupData+0x6c>
   43ebc:	e3a02056 	mov	r2, #86	; 0x56
   43ec0:	ebffcbe0 	bl	36e48 <uspi_assertion_failed>
   43ec4:	eafffff1 	b	43e90 <USBRequestGetSetupData+0x1c>
   43ec8:	e59f0018 	ldr	r0, [pc, #24]	; 43ee8 <USBRequestGetSetupData+0x74>
   43ecc:	e59f100c 	ldr	r1, [pc, #12]	; 43ee0 <USBRequestGetSetupData+0x6c>
   43ed0:	e3a02055 	mov	r2, #85	; 0x55
   43ed4:	ebffcbdb 	bl	36e48 <uspi_assertion_failed>
   43ed8:	eaffffe8 	b	43e80 <USBRequestGetSetupData+0xc>
   43edc:	0005720c 	.word	0x0005720c
   43ee0:	00057178 	.word	0x00057178
   43ee4:	000571cc 	.word	0x000571cc
   43ee8:	00056434 	.word	0x00056434

00043eec <USBRequestGetBuffer>:
   43eec:	e92d4010 	push	{r4, lr}
   43ef0:	e2504000 	subs	r4, r0, #0
   43ef4:	0a00000b 	beq	43f28 <USBRequestGetBuffer+0x3c>
   43ef8:	e5940008 	ldr	r0, [r4, #8]
   43efc:	e3500000 	cmp	r0, #0
   43f00:	18bd8010 	popne	{r4, pc}
   43f04:	e594300c 	ldr	r3, [r4, #12]
   43f08:	e3530000 	cmp	r3, #0
   43f0c:	08bd8010 	popeq	{r4, pc}
   43f10:	e59f0024 	ldr	r0, [pc, #36]	; 43f3c <USBRequestGetBuffer+0x50>
   43f14:	e59f1024 	ldr	r1, [pc, #36]	; 43f40 <USBRequestGetBuffer+0x54>
   43f18:	e3a02060 	mov	r2, #96	; 0x60
   43f1c:	ebffcbc9 	bl	36e48 <uspi_assertion_failed>
   43f20:	e5940008 	ldr	r0, [r4, #8]
   43f24:	e8bd8010 	pop	{r4, pc}
   43f28:	e59f0014 	ldr	r0, [pc, #20]	; 43f44 <USBRequestGetBuffer+0x58>
   43f2c:	e59f100c 	ldr	r1, [pc, #12]	; 43f40 <USBRequestGetBuffer+0x54>
   43f30:	e3a0205e 	mov	r2, #94	; 0x5e
   43f34:	ebffcbc3 	bl	36e48 <uspi_assertion_failed>
   43f38:	eaffffee 	b	43ef8 <USBRequestGetBuffer+0xc>
   43f3c:	00057188 	.word	0x00057188
   43f40:	00057178 	.word	0x00057178
   43f44:	00056434 	.word	0x00056434

00043f48 <USBRequestGetBufLen>:
   43f48:	e92d4010 	push	{r4, lr}
   43f4c:	e2504000 	subs	r4, r0, #0
   43f50:	0a000001 	beq	43f5c <USBRequestGetBufLen+0x14>
   43f54:	e594000c 	ldr	r0, [r4, #12]
   43f58:	e8bd8010 	pop	{r4, pc}
   43f5c:	e59f0010 	ldr	r0, [pc, #16]	; 43f74 <USBRequestGetBufLen+0x2c>
   43f60:	e59f1010 	ldr	r1, [pc, #16]	; 43f78 <USBRequestGetBufLen+0x30>
   43f64:	e3a02067 	mov	r2, #103	; 0x67
   43f68:	ebffcbb6 	bl	36e48 <uspi_assertion_failed>
   43f6c:	e594000c 	ldr	r0, [r4, #12]
   43f70:	e8bd8010 	pop	{r4, pc}
   43f74:	00056434 	.word	0x00056434
   43f78:	00057178 	.word	0x00057178

00043f7c <USBRequestSetCompletionRoutine>:
   43f7c:	e92d4070 	push	{r4, r5, r6, lr}
   43f80:	e2504000 	subs	r4, r0, #0
   43f84:	e24dd008 	sub	sp, sp, #8
   43f88:	e1a05001 	mov	r5, r1
   43f8c:	e1a06002 	mov	r6, r2
   43f90:	0a00000c 	beq	43fc8 <USBRequestSetCompletionRoutine+0x4c>
   43f94:	e3550000 	cmp	r5, #0
   43f98:	e5845018 	str	r5, [r4, #24]
   43f9c:	e584601c 	str	r6, [r4, #28]
   43fa0:	e5843020 	str	r3, [r4, #32]
   43fa4:	0a000001 	beq	43fb0 <USBRequestSetCompletionRoutine+0x34>
   43fa8:	e28dd008 	add	sp, sp, #8
   43fac:	e8bd8070 	pop	{r4, r5, r6, pc}
   43fb0:	e3a02072 	mov	r2, #114	; 0x72
   43fb4:	e59f0028 	ldr	r0, [pc, #40]	; 43fe4 <USBRequestSetCompletionRoutine+0x68>
   43fb8:	e59f1028 	ldr	r1, [pc, #40]	; 43fe8 <USBRequestSetCompletionRoutine+0x6c>
   43fbc:	e28dd008 	add	sp, sp, #8
   43fc0:	e8bd4070 	pop	{r4, r5, r6, lr}
   43fc4:	eaffcb9f 	b	36e48 <uspi_assertion_failed>
   43fc8:	e59f001c 	ldr	r0, [pc, #28]	; 43fec <USBRequestSetCompletionRoutine+0x70>
   43fcc:	e59f1014 	ldr	r1, [pc, #20]	; 43fe8 <USBRequestSetCompletionRoutine+0x6c>
   43fd0:	e3a0206d 	mov	r2, #109	; 0x6d
   43fd4:	e58d3004 	str	r3, [sp, #4]
   43fd8:	ebffcb9a 	bl	36e48 <uspi_assertion_failed>
   43fdc:	e59d3004 	ldr	r3, [sp, #4]
   43fe0:	eaffffeb 	b	43f94 <USBRequestSetCompletionRoutine+0x18>
   43fe4:	00057228 	.word	0x00057228
   43fe8:	00057178 	.word	0x00057178
   43fec:	00056434 	.word	0x00056434

00043ff0 <USBRequestCallCompletionRoutine>:
   43ff0:	e92d4010 	push	{r4, lr}
   43ff4:	e2504000 	subs	r4, r0, #0
   43ff8:	0a00000d 	beq	44034 <USBRequestCallCompletionRoutine+0x44>
   43ffc:	e5943018 	ldr	r3, [r4, #24]
   44000:	e3530000 	cmp	r3, #0
   44004:	0a000004 	beq	4401c <USBRequestCallCompletionRoutine+0x2c>
   44008:	e1a00004 	mov	r0, r4
   4400c:	e594101c 	ldr	r1, [r4, #28]
   44010:	e5942020 	ldr	r2, [r4, #32]
   44014:	e8bd4010 	pop	{r4, lr}
   44018:	e12fff13 	bx	r3
   4401c:	e59f0024 	ldr	r0, [pc, #36]	; 44048 <USBRequestCallCompletionRoutine+0x58>
   44020:	e59f1024 	ldr	r1, [pc, #36]	; 4404c <USBRequestCallCompletionRoutine+0x5c>
   44024:	e3a02078 	mov	r2, #120	; 0x78
   44028:	ebffcb86 	bl	36e48 <uspi_assertion_failed>
   4402c:	e5943018 	ldr	r3, [r4, #24]
   44030:	eafffff4 	b	44008 <USBRequestCallCompletionRoutine+0x18>
   44034:	e59f0014 	ldr	r0, [pc, #20]	; 44050 <USBRequestCallCompletionRoutine+0x60>
   44038:	e59f100c 	ldr	r1, [pc, #12]	; 4404c <USBRequestCallCompletionRoutine+0x5c>
   4403c:	e3a02077 	mov	r2, #119	; 0x77
   44040:	ebffcb80 	bl	36e48 <uspi_assertion_failed>
   44044:	eaffffec 	b	43ffc <USBRequestCallCompletionRoutine+0xc>
   44048:	00057228 	.word	0x00057228
   4404c:	00057178 	.word	0x00057178
   44050:	00056434 	.word	0x00056434

00044054 <USBStandardHub>:
   44054:	e92d4038 	push	{r3, r4, r5, lr}
   44058:	e2504000 	subs	r4, r0, #0
   4405c:	e1a05001 	mov	r5, r1
   44060:	0a000010 	beq	440a8 <USBStandardHub+0x54>
   44064:	e1a01005 	mov	r1, r5
   44068:	e1a00004 	mov	r0, r4
   4406c:	eb000476 	bl	4524c <USBFunctionCopy>
   44070:	e3a0c000 	mov	ip, #0
   44074:	e1a03004 	mov	r3, r4
   44078:	e2840034 	add	r0, r4, #52	; 0x34
   4407c:	e1a0100c 	mov	r1, ip
   44080:	e1a02000 	mov	r2, r0
   44084:	e59fe030 	ldr	lr, [pc, #48]	; 440bc <USBStandardHub+0x68>
   44088:	e584c010 	str	ip, [r4, #16]
   4408c:	e584e000 	str	lr, [r4]
   44090:	e5a3c014 	str	ip, [r3, #20]!
   44094:	e5a31004 	str	r1, [r3, #4]!
   44098:	e1530000 	cmp	r3, r0
   4409c:	e5a21004 	str	r1, [r2, #4]!
   440a0:	1afffffb 	bne	44094 <USBStandardHub+0x40>
   440a4:	e8bd8038 	pop	{r3, r4, r5, pc}
   440a8:	e59f0010 	ldr	r0, [pc, #16]	; 440c0 <USBStandardHub+0x6c>
   440ac:	e59f1010 	ldr	r1, [pc, #16]	; 440c4 <USBStandardHub+0x70>
   440b0:	e3a02020 	mov	r2, #32
   440b4:	ebffcb63 	bl	36e48 <uspi_assertion_failed>
   440b8:	eaffffe9 	b	44064 <USBStandardHub+0x10>
   440bc:	000448a4 	.word	0x000448a4
   440c0:	00056434 	.word	0x00056434
   440c4:	00057254 	.word	0x00057254

000440c8 <_USBStandardHub>:
   440c8:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   440cc:	e2507000 	subs	r7, r0, #0
   440d0:	0a000020 	beq	44158 <_USBStandardHub+0x90>
   440d4:	e5973014 	ldr	r3, [r7, #20]
   440d8:	e3530000 	cmp	r3, #0
   440dc:	13a05000 	movne	r5, #0
   440e0:	12876034 	addne	r6, r7, #52	; 0x34
   440e4:	11a08005 	movne	r8, r5
   440e8:	12874014 	addne	r4, r7, #20
   440ec:	0a00000f 	beq	44130 <_USBStandardHub+0x68>
   440f0:	e5b60004 	ldr	r0, [r6, #4]!
   440f4:	e2855001 	add	r5, r5, #1
   440f8:	e3500000 	cmp	r0, #0
   440fc:	0a000001 	beq	44108 <_USBStandardHub+0x40>
   44100:	ebffcb2a 	bl	36db0 <free>
   44104:	e5868000 	str	r8, [r6]
   44108:	e5b40004 	ldr	r0, [r4, #4]!
   4410c:	e3500000 	cmp	r0, #0
   44110:	0a000003 	beq	44124 <_USBStandardHub+0x5c>
   44114:	ebfff859 	bl	42280 <_USBDevice>
   44118:	e5940000 	ldr	r0, [r4]
   4411c:	ebffcb23 	bl	36db0 <free>
   44120:	e5848000 	str	r8, [r4]
   44124:	e5973014 	ldr	r3, [r7, #20]
   44128:	e1530005 	cmp	r3, r5
   4412c:	8affffef 	bhi	440f0 <_USBStandardHub+0x28>
   44130:	e3a04000 	mov	r4, #0
   44134:	e5970010 	ldr	r0, [r7, #16]
   44138:	e5874014 	str	r4, [r7, #20]
   4413c:	e1500004 	cmp	r0, r4
   44140:	0a000001 	beq	4414c <_USBStandardHub+0x84>
   44144:	ebffcb19 	bl	36db0 <free>
   44148:	e5874010 	str	r4, [r7, #16]
   4414c:	e1a00007 	mov	r0, r7
   44150:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   44154:	ea00047b 	b	45348 <_USBFunction>
   44158:	e59f000c 	ldr	r0, [pc, #12]	; 4416c <_USBStandardHub+0xa4>
   4415c:	e59f100c 	ldr	r1, [pc, #12]	; 44170 <_USBStandardHub+0xa8>
   44160:	e3a02031 	mov	r2, #49	; 0x31
   44164:	ebffcb37 	bl	36e48 <uspi_assertion_failed>
   44168:	eaffffd9 	b	440d4 <_USBStandardHub+0xc>
   4416c:	00056434 	.word	0x00056434
   44170:	00057254 	.word	0x00057254

00044174 <USBStandardHubEnumeratePorts>:
   44174:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   44178:	e2506000 	subs	r6, r0, #0
   4417c:	e24dd024 	sub	sp, sp, #36	; 0x24
   44180:	0a000184 	beq	44798 <USBStandardHubEnumeratePorts+0x624>
   44184:	e1a00006 	mov	r0, r6
   44188:	eb0004ef 	bl	4554c <USBFunctionGetHost>
   4418c:	e2507000 	subs	r7, r0, #0
   44190:	0a000176 	beq	44770 <USBStandardHubEnumeratePorts+0x5fc>
   44194:	e1a00006 	mov	r0, r6
   44198:	eb0004d4 	bl	454f0 <USBFunctionGetEndpoint0>
   4419c:	e2508000 	subs	r8, r0, #0
   441a0:	0a000177 	beq	44784 <USBStandardHubEnumeratePorts+0x610>
   441a4:	e5963014 	ldr	r3, [r6, #20]
   441a8:	e3530000 	cmp	r3, #0
   441ac:	0a00001c 	beq	44224 <USBStandardHubEnumeratePorts+0xb0>
   441b0:	e3a03000 	mov	r3, #0
   441b4:	e3a09008 	mov	r9, #8
   441b8:	e1a05003 	mov	r5, r3
   441bc:	e1a04003 	mov	r4, r3
   441c0:	ea000002 	b	441d0 <USBStandardHubEnumeratePorts+0x5c>
   441c4:	e5963014 	ldr	r3, [r6, #20]
   441c8:	e1530004 	cmp	r3, r4
   441cc:	9a00001b 	bls	44240 <USBStandardHubEnumeratePorts+0xcc>
   441d0:	e2844001 	add	r4, r4, #1
   441d4:	e6ff3074 	uxth	r3, r4
   441d8:	e58d3004 	str	r3, [sp, #4]
   441dc:	e58d9000 	str	r9, [sp]
   441e0:	e58d5008 	str	r5, [sp, #8]
   441e4:	e58d500c 	str	r5, [sp, #12]
   441e8:	e1a00007 	mov	r0, r7
   441ec:	e1a01008 	mov	r1, r8
   441f0:	e3a02023 	mov	r2, #35	; 0x23
   441f4:	e3a03003 	mov	r3, #3
   441f8:	ebffed7e 	bl	3f7f8 <DWHCIDeviceControlMessage>
   441fc:	e3500000 	cmp	r0, #0
   44200:	aaffffef 	bge	441c4 <USBStandardHubEnumeratePorts+0x50>
   44204:	e59f0630 	ldr	r0, [pc, #1584]	; 4483c <USBStandardHubEnumeratePorts+0x6c8>
   44208:	e1a03004 	mov	r3, r4
   4420c:	e3a01001 	mov	r1, #1
   44210:	e59f2628 	ldr	r2, [pc, #1576]	; 44840 <USBStandardHubEnumeratePorts+0x6cc>
   44214:	ebff7fd7 	bl	24178 <LogWrite>
   44218:	e3a00000 	mov	r0, #0
   4421c:	e28dd024 	add	sp, sp, #36	; 0x24
   44220:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   44224:	e59f0618 	ldr	r0, [pc, #1560]	; 44844 <USBStandardHubEnumeratePorts+0x6d0>
   44228:	e59f1618 	ldr	r1, [pc, #1560]	; 44848 <USBStandardHubEnumeratePorts+0x6d4>
   4422c:	e3a020a4 	mov	r2, #164	; 0xa4
   44230:	ebffcb04 	bl	36e48 <uspi_assertion_failed>
   44234:	e5963014 	ldr	r3, [r6, #20]
   44238:	e3530000 	cmp	r3, #0
   4423c:	1affffdb 	bne	441b0 <USBStandardHubEnumeratePorts+0x3c>
   44240:	e59f0604 	ldr	r0, [pc, #1540]	; 4484c <USBStandardHubEnumeratePorts+0x6d8>
   44244:	ebffcae1 	bl	36dd0 <MsDelay>
   44248:	e5963014 	ldr	r3, [r6, #20]
   4424c:	e3530000 	cmp	r3, #0
   44250:	12865034 	addne	r5, r6, #52	; 0x34
   44254:	12869018 	addne	r9, r6, #24
   44258:	13a04001 	movne	r4, #1
   4425c:	1a00003e 	bne	4435c <USBStandardHubEnumeratePorts+0x1e8>
   44260:	e3a00004 	mov	r0, #4
   44264:	ebffcad0 	bl	36dac <malloc>
   44268:	e250b000 	subs	fp, r0, #0
   4426c:	0a00016d 	beq	44828 <USBStandardHubEnumeratePorts+0x6b4>
   44270:	e3a04000 	mov	r4, #0
   44274:	e3a02004 	mov	r2, #4
   44278:	e58db008 	str	fp, [sp, #8]
   4427c:	e58d200c 	str	r2, [sp, #12]
   44280:	e58d4000 	str	r4, [sp]
   44284:	e58d4004 	str	r4, [sp, #4]
   44288:	e1a03004 	mov	r3, r4
   4428c:	e1a00007 	mov	r0, r7
   44290:	e1a01008 	mov	r1, r8
   44294:	e3a020a0 	mov	r2, #160	; 0xa0
   44298:	ebffed56 	bl	3f7f8 <DWHCIDeviceControlMessage>
   4429c:	e3500004 	cmp	r0, #4
   442a0:	e1a0a000 	mov	sl, r0
   442a4:	1a000124 	bne	4473c <USBStandardHubEnumeratePorts+0x5c8>
   442a8:	e5db9000 	ldrb	r9, [fp]
   442ac:	e2099002 	and	r9, r9, #2
   442b0:	e6ff9079 	uxth	r9, r9
   442b4:	e3590000 	cmp	r9, #0
   442b8:	0a0000f0 	beq	44680 <USBStandardHubEnumeratePorts+0x50c>
   442bc:	e5963014 	ldr	r3, [r6, #20]
   442c0:	e3530000 	cmp	r3, #0
   442c4:	13a05001 	movne	r5, #1
   442c8:	13a09008 	movne	r9, #8
   442cc:	1a000001 	bne	442d8 <USBStandardHubEnumeratePorts+0x164>
   442d0:	ea00000e 	b	44310 <USBStandardHubEnumeratePorts+0x19c>
   442d4:	e1a05002 	mov	r5, r2
   442d8:	e6ff3075 	uxth	r3, r5
   442dc:	e58d3004 	str	r3, [sp, #4]
   442e0:	e3a02023 	mov	r2, #35	; 0x23
   442e4:	e3a03001 	mov	r3, #1
   442e8:	e58d9000 	str	r9, [sp]
   442ec:	e58d4008 	str	r4, [sp, #8]
   442f0:	e58d400c 	str	r4, [sp, #12]
   442f4:	e1a00007 	mov	r0, r7
   442f8:	e1a01008 	mov	r1, r8
   442fc:	ebffed3d 	bl	3f7f8 <DWHCIDeviceControlMessage>
   44300:	e5963014 	ldr	r3, [r6, #20]
   44304:	e2852001 	add	r2, r5, #1
   44308:	e1530005 	cmp	r3, r5
   4430c:	8afffff0 	bhi	442d4 <USBStandardHubEnumeratePorts+0x160>
   44310:	e3a01001 	mov	r1, #1
   44314:	e59f2534 	ldr	r2, [pc, #1332]	; 44850 <USBStandardHubEnumeratePorts+0x6dc>
   44318:	e59f051c 	ldr	r0, [pc, #1308]	; 4483c <USBStandardHubEnumeratePorts+0x6c8>
   4431c:	ebff7f95 	bl	24178 <LogWrite>
   44320:	e1a0000b 	mov	r0, fp
   44324:	ebffcaa1 	bl	36db0 <free>
   44328:	e3a00000 	mov	r0, #0
   4432c:	e28dd024 	add	sp, sp, #36	; 0x24
   44330:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   44334:	e59f0500 	ldr	r0, [pc, #1280]	; 4483c <USBStandardHubEnumeratePorts+0x6c8>
   44338:	e3a01001 	mov	r1, #1
   4433c:	e59f2510 	ldr	r2, [pc, #1296]	; 44854 <USBStandardHubEnumeratePorts+0x6e0>
   44340:	e1a03004 	mov	r3, r4
   44344:	ebff7f8b 	bl	24178 <LogWrite>
   44348:	e5962014 	ldr	r2, [r6, #20]
   4434c:	e2899004 	add	r9, r9, #4
   44350:	e1520004 	cmp	r2, r4
   44354:	e2844001 	add	r4, r4, #1
   44358:	9a000091 	bls	445a4 <USBStandardHubEnumeratePorts+0x430>
   4435c:	e5b53004 	ldr	r3, [r5, #4]!
   44360:	e244b001 	sub	fp, r4, #1
   44364:	e3530000 	cmp	r3, #0
   44368:	0a000003 	beq	4437c <USBStandardHubEnumeratePorts+0x208>
   4436c:	e59f04e4 	ldr	r0, [pc, #1252]	; 44858 <USBStandardHubEnumeratePorts+0x6e4>
   44370:	e59f14d0 	ldr	r1, [pc, #1232]	; 44848 <USBStandardHubEnumeratePorts+0x6d4>
   44374:	e3a020ba 	mov	r2, #186	; 0xba
   44378:	ebffcab2 	bl	36e48 <uspi_assertion_failed>
   4437c:	e3a00004 	mov	r0, #4
   44380:	ebffca89 	bl	36dac <malloc>
   44384:	e3500000 	cmp	r0, #0
   44388:	e5850000 	str	r0, [r5]
   4438c:	0a000073 	beq	44560 <USBStandardHubEnumeratePorts+0x3ec>
   44390:	e3a03000 	mov	r3, #0
   44394:	e3a02004 	mov	r2, #4
   44398:	e6ffa074 	uxth	sl, r4
   4439c:	e58d0008 	str	r0, [sp, #8]
   443a0:	e58d200c 	str	r2, [sp, #12]
   443a4:	e58d3000 	str	r3, [sp]
   443a8:	e58da004 	str	sl, [sp, #4]
   443ac:	e1a00007 	mov	r0, r7
   443b0:	e1a01008 	mov	r1, r8
   443b4:	e3a020a3 	mov	r2, #163	; 0xa3
   443b8:	ebffed0e 	bl	3f7f8 <DWHCIDeviceControlMessage>
   443bc:	e3500004 	cmp	r0, #4
   443c0:	1affffdb 	bne	44334 <USBStandardHubEnumeratePorts+0x1c0>
   443c4:	e5952000 	ldr	r2, [r5]
   443c8:	e5d23000 	ldrb	r3, [r2]
   443cc:	e5d22001 	ldrb	r2, [r2, #1]
   443d0:	e1833402 	orr	r3, r3, r2, lsl #8
   443d4:	e3130c01 	tst	r3, #256	; 0x100
   443d8:	0a000057 	beq	4453c <USBStandardHubEnumeratePorts+0x3c8>
   443dc:	e3130001 	tst	r3, #1
   443e0:	0affffd8 	beq	44348 <USBStandardHubEnumeratePorts+0x1d4>
   443e4:	e3a03004 	mov	r3, #4
   443e8:	e58d3000 	str	r3, [sp]
   443ec:	e3a03000 	mov	r3, #0
   443f0:	e58da004 	str	sl, [sp, #4]
   443f4:	e58d3008 	str	r3, [sp, #8]
   443f8:	e58d300c 	str	r3, [sp, #12]
   443fc:	e1a00007 	mov	r0, r7
   44400:	e1a01008 	mov	r1, r8
   44404:	e3a02023 	mov	r2, #35	; 0x23
   44408:	e3a03003 	mov	r3, #3
   4440c:	ebffecf9 	bl	3f7f8 <DWHCIDeviceControlMessage>
   44410:	e3500000 	cmp	r0, #0
   44414:	ba000057 	blt	44578 <USBStandardHubEnumeratePorts+0x404>
   44418:	e3a00064 	mov	r0, #100	; 0x64
   4441c:	ebffca6b 	bl	36dd0 <MsDelay>
   44420:	e3a03000 	mov	r3, #0
   44424:	e88d0408 	stm	sp, {r3, sl}
   44428:	e5953000 	ldr	r3, [r5]
   4442c:	e1a00007 	mov	r0, r7
   44430:	e58d3008 	str	r3, [sp, #8]
   44434:	e3a03004 	mov	r3, #4
   44438:	e1a01008 	mov	r1, r8
   4443c:	e58d300c 	str	r3, [sp, #12]
   44440:	e3a020a3 	mov	r2, #163	; 0xa3
   44444:	e3a03000 	mov	r3, #0
   44448:	ebffecea 	bl	3f7f8 <DWHCIDeviceControlMessage>
   4444c:	e3500004 	cmp	r0, #4
   44450:	1a0000e0 	bne	447d8 <USBStandardHubEnumeratePorts+0x664>
   44454:	e5952000 	ldr	r2, [r5]
   44458:	e5d23000 	ldrb	r3, [r2]
   4445c:	e5d22001 	ldrb	r2, [r2, #1]
   44460:	e1833402 	orr	r3, r3, r2, lsl #8
   44464:	e3130002 	tst	r3, #2
   44468:	0a00006d 	beq	44624 <USBStandardHubEnumeratePorts+0x4b0>
   4446c:	e2032008 	and	r2, r3, #8
   44470:	e6ff2072 	uxth	r2, r2
   44474:	e3520000 	cmp	r2, #0
   44478:	1a0000d8 	bne	447e0 <USBStandardHubEnumeratePorts+0x66c>
   4447c:	e3130c02 	tst	r3, #512	; 0x200
   44480:	158d2014 	strne	r2, [sp, #20]
   44484:	0a000041 	beq	44590 <USBStandardHubEnumeratePorts+0x41c>
   44488:	e1a00006 	mov	r0, r6
   4448c:	eb000403 	bl	454a0 <USBFunctionGetDevice>
   44490:	e250a000 	subs	sl, r0, #0
   44494:	0a0000ca 	beq	447c4 <USBStandardHubEnumeratePorts+0x650>
   44498:	e1a0000a 	mov	r0, sl
   4449c:	ebfff86e 	bl	4265c <USBDeviceIsSplit>
   444a0:	e1a0b000 	mov	fp, r0
   444a4:	e1a0000a 	mov	r0, sl
   444a8:	ebfff878 	bl	42690 <USBDeviceGetHubAddress>
   444ac:	e58d0018 	str	r0, [sp, #24]
   444b0:	e1a0000a 	mov	r0, sl
   444b4:	ebfff883 	bl	426c8 <USBDeviceGetHubPortNumber>
   444b8:	e35b0000 	cmp	fp, #0
   444bc:	e58d001c 	str	r0, [sp, #28]
   444c0:	0a00005d 	beq	4463c <USBStandardHubEnumeratePorts+0x4c8>
   444c4:	e5993000 	ldr	r3, [r9]
   444c8:	e3530000 	cmp	r3, #0
   444cc:	0a000003 	beq	444e0 <USBStandardHubEnumeratePorts+0x36c>
   444d0:	e59f0384 	ldr	r0, [pc, #900]	; 4485c <USBStandardHubEnumeratePorts+0x6e8>
   444d4:	e59f136c 	ldr	r1, [pc, #876]	; 44848 <USBStandardHubEnumeratePorts+0x6d4>
   444d8:	e59f2380 	ldr	r2, [pc, #896]	; 44860 <USBStandardHubEnumeratePorts+0x6ec>
   444dc:	ebffca59 	bl	36e48 <uspi_assertion_failed>
   444e0:	e3a00060 	mov	r0, #96	; 0x60
   444e4:	ebffca30 	bl	36dac <malloc>
   444e8:	e3500000 	cmp	r0, #0
   444ec:	e5890000 	str	r0, [r9]
   444f0:	0a0000ad 	beq	447ac <USBStandardHubEnumeratePorts+0x638>
   444f4:	e59d3018 	ldr	r3, [sp, #24]
   444f8:	e59d2014 	ldr	r2, [sp, #20]
   444fc:	e58d3000 	str	r3, [sp]
   44500:	e59d301c 	ldr	r3, [sp, #28]
   44504:	e1a01007 	mov	r1, r7
   44508:	e58d3004 	str	r3, [sp, #4]
   4450c:	e1a0300b 	mov	r3, fp
   44510:	ebfff70a 	bl	42140 <USBDevice>
   44514:	e5990000 	ldr	r0, [r9]
   44518:	ebfff958 	bl	42a80 <USBDeviceInitialize>
   4451c:	e250a000 	subs	sl, r0, #0
   44520:	1affff88 	bne	44348 <USBStandardHubEnumeratePorts+0x1d4>
   44524:	e5990000 	ldr	r0, [r9]
   44528:	ebfff754 	bl	42280 <_USBDevice>
   4452c:	e5990000 	ldr	r0, [r9]
   44530:	ebffca1e 	bl	36db0 <free>
   44534:	e589a000 	str	sl, [r9]
   44538:	eaffff82 	b	44348 <USBStandardHubEnumeratePorts+0x1d4>
   4453c:	e3a020c7 	mov	r2, #199	; 0xc7
   44540:	e59f031c 	ldr	r0, [pc, #796]	; 44864 <USBStandardHubEnumeratePorts+0x6f0>
   44544:	e59f12fc 	ldr	r1, [pc, #764]	; 44848 <USBStandardHubEnumeratePorts+0x6d4>
   44548:	ebffca3e 	bl	36e48 <uspi_assertion_failed>
   4454c:	e5952000 	ldr	r2, [r5]
   44550:	e5d23000 	ldrb	r3, [r2]
   44554:	e5d22001 	ldrb	r2, [r2, #1]
   44558:	e1833402 	orr	r3, r3, r2, lsl #8
   4455c:	eaffff9e 	b	443dc <USBStandardHubEnumeratePorts+0x268>
   44560:	e59f0300 	ldr	r0, [pc, #768]	; 44868 <USBStandardHubEnumeratePorts+0x6f4>
   44564:	e59f12dc 	ldr	r1, [pc, #732]	; 44848 <USBStandardHubEnumeratePorts+0x6d4>
   44568:	e3a020bc 	mov	r2, #188	; 0xbc
   4456c:	ebffca35 	bl	36e48 <uspi_assertion_failed>
   44570:	e5950000 	ldr	r0, [r5]
   44574:	eaffff85 	b	44390 <USBStandardHubEnumeratePorts+0x21c>
   44578:	e59f02bc 	ldr	r0, [pc, #700]	; 4483c <USBStandardHubEnumeratePorts+0x6c8>
   4457c:	e3a01001 	mov	r1, #1
   44580:	e59f22e4 	ldr	r2, [pc, #740]	; 4486c <USBStandardHubEnumeratePorts+0x6f8>
   44584:	e1a03004 	mov	r3, r4
   44588:	ebff7efa 	bl	24178 <LogWrite>
   4458c:	eaffff6d 	b	44348 <USBStandardHubEnumeratePorts+0x1d4>
   44590:	e3130b01 	tst	r3, #1024	; 0x400
   44594:	13a03002 	movne	r3, #2
   44598:	03a03001 	moveq	r3, #1
   4459c:	e58d3014 	str	r3, [sp, #20]
   445a0:	eaffffb8 	b	44488 <USBStandardHubEnumeratePorts+0x314>
   445a4:	e3520000 	cmp	r2, #0
   445a8:	0affff2c 	beq	44260 <USBStandardHubEnumeratePorts+0xec>
   445ac:	e2865014 	add	r5, r6, #20
   445b0:	e3a04001 	mov	r4, #1
   445b4:	ea00000b 	b	445e8 <USBStandardHubEnumeratePorts+0x474>
   445b8:	e3a01001 	mov	r1, #1
   445bc:	e1a03004 	mov	r3, r4
   445c0:	ebff7eec 	bl	24178 <LogWrite>
   445c4:	e5950000 	ldr	r0, [r5]
   445c8:	ebfff72c 	bl	42280 <_USBDevice>
   445cc:	e5950000 	ldr	r0, [r5]
   445d0:	ebffc9f6 	bl	36db0 <free>
   445d4:	e5962014 	ldr	r2, [r6, #20]
   445d8:	e5859000 	str	r9, [r5]
   445dc:	e1520004 	cmp	r2, r4
   445e0:	e2844001 	add	r4, r4, #1
   445e4:	9affff1d 	bls	44260 <USBStandardHubEnumeratePorts+0xec>
   445e8:	e5b50004 	ldr	r0, [r5, #4]!
   445ec:	e3500000 	cmp	r0, #0
   445f0:	0afffff9 	beq	445dc <USBStandardHubEnumeratePorts+0x468>
   445f4:	ebfffae9 	bl	431a0 <USBDeviceConfigure>
   445f8:	e2509000 	subs	r9, r0, #0
   445fc:	e59f226c 	ldr	r2, [pc, #620]	; 44870 <USBStandardHubEnumeratePorts+0x6fc>
   44600:	e59f0234 	ldr	r0, [pc, #564]	; 4483c <USBStandardHubEnumeratePorts+0x6c8>
   44604:	0affffeb 	beq	445b8 <USBStandardHubEnumeratePorts+0x444>
   44608:	e59f2264 	ldr	r2, [pc, #612]	; 44874 <USBStandardHubEnumeratePorts+0x700>
   4460c:	e59f0228 	ldr	r0, [pc, #552]	; 4483c <USBStandardHubEnumeratePorts+0x6c8>
   44610:	e3a01004 	mov	r1, #4
   44614:	e1a03004 	mov	r3, r4
   44618:	ebff7ed6 	bl	24178 <LogWrite>
   4461c:	e5962014 	ldr	r2, [r6, #20]
   44620:	eaffffed 	b	445dc <USBStandardHubEnumeratePorts+0x468>
   44624:	e59f0210 	ldr	r0, [pc, #528]	; 4483c <USBStandardHubEnumeratePorts+0x6c8>
   44628:	e3a01001 	mov	r1, #1
   4462c:	e59f2244 	ldr	r2, [pc, #580]	; 44878 <USBStandardHubEnumeratePorts+0x704>
   44630:	e1a03004 	mov	r3, r4
   44634:	ebff7ecf 	bl	24178 <LogWrite>
   44638:	eaffff42 	b	44348 <USBStandardHubEnumeratePorts+0x1d4>
   4463c:	e1a0000a 	mov	r0, sl
   44640:	ebfff7f7 	bl	42624 <USBDeviceGetSpeed>
   44644:	e2400002 	sub	r0, r0, #2
   44648:	e16f0f10 	clz	r0, r0
   4464c:	e59d3014 	ldr	r3, [sp, #20]
   44650:	e1a002a0 	lsr	r0, r0, #5
   44654:	e3530002 	cmp	r3, #2
   44658:	03a00000 	moveq	r0, #0
   4465c:	e3500000 	cmp	r0, #0
   44660:	0affff97 	beq	444c4 <USBStandardHubEnumeratePorts+0x350>
   44664:	e1a0000a 	mov	r0, sl
   44668:	ebfff7e0 	bl	425f0 <USBDeviceGetAddress>
   4466c:	e6ef3074 	uxtb	r3, r4
   44670:	e58d0018 	str	r0, [sp, #24]
   44674:	e3a0b001 	mov	fp, #1
   44678:	e58d301c 	str	r3, [sp, #28]
   4467c:	eaffff90 	b	444c4 <USBStandardHubEnumeratePorts+0x350>
   44680:	e1a0000b 	mov	r0, fp
   44684:	ebffc9c9 	bl	36db0 <free>
   44688:	e5963014 	ldr	r3, [r6, #20]
   4468c:	e3530000 	cmp	r3, #0
   44690:	0a000032 	beq	44760 <USBStandardHubEnumeratePorts+0x5ec>
   44694:	e3a05001 	mov	r5, #1
   44698:	e286b034 	add	fp, r6, #52	; 0x34
   4469c:	e58d5014 	str	r5, [sp, #20]
   446a0:	ea000004 	b	446b8 <USBStandardHubEnumeratePorts+0x544>
   446a4:	e5963014 	ldr	r3, [r6, #20]
   446a8:	e2852001 	add	r2, r5, #1
   446ac:	e1530005 	cmp	r3, r5
   446b0:	9a00002c 	bls	44768 <USBStandardHubEnumeratePorts+0x5f4>
   446b4:	e1a05002 	mov	r5, r2
   446b8:	e6ff4075 	uxth	r4, r5
   446bc:	e58d9000 	str	r9, [sp]
   446c0:	e58d4004 	str	r4, [sp, #4]
   446c4:	e5bb3004 	ldr	r3, [fp, #4]!
   446c8:	e1a00007 	mov	r0, r7
   446cc:	e58d3008 	str	r3, [sp, #8]
   446d0:	e58da00c 	str	sl, [sp, #12]
   446d4:	e1a01008 	mov	r1, r8
   446d8:	e3a020a3 	mov	r2, #163	; 0xa3
   446dc:	e3a03000 	mov	r3, #0
   446e0:	ebffec44 	bl	3f7f8 <DWHCIDeviceControlMessage>
   446e4:	e3500004 	cmp	r0, #4
   446e8:	1affffed 	bne	446a4 <USBStandardHubEnumeratePorts+0x530>
   446ec:	e59b3000 	ldr	r3, [fp]
   446f0:	e5d33000 	ldrb	r3, [r3]
   446f4:	e3130008 	tst	r3, #8
   446f8:	0affffe9 	beq	446a4 <USBStandardHubEnumeratePorts+0x530>
   446fc:	e3a03008 	mov	r3, #8
   44700:	e1a01008 	mov	r1, r8
   44704:	e88d0218 	stm	sp, {r3, r4, r9}
   44708:	e3a02023 	mov	r2, #35	; 0x23
   4470c:	e3a03001 	mov	r3, #1
   44710:	e58d900c 	str	r9, [sp, #12]
   44714:	e1a00007 	mov	r0, r7
   44718:	ebffec36 	bl	3f7f8 <DWHCIDeviceControlMessage>
   4471c:	e1a03005 	mov	r3, r5
   44720:	e59f0114 	ldr	r0, [pc, #276]	; 4483c <USBStandardHubEnumeratePorts+0x6c8>
   44724:	e3a01001 	mov	r1, #1
   44728:	e59f214c 	ldr	r2, [pc, #332]	; 4487c <USBStandardHubEnumeratePorts+0x708>
   4472c:	ebff7e91 	bl	24178 <LogWrite>
   44730:	e3a03000 	mov	r3, #0
   44734:	e58d3014 	str	r3, [sp, #20]
   44738:	eaffffd9 	b	446a4 <USBStandardHubEnumeratePorts+0x530>
   4473c:	e3a01001 	mov	r1, #1
   44740:	e59f2138 	ldr	r2, [pc, #312]	; 44880 <USBStandardHubEnumeratePorts+0x70c>
   44744:	e59f00f0 	ldr	r0, [pc, #240]	; 4483c <USBStandardHubEnumeratePorts+0x6c8>
   44748:	ebff7e8a 	bl	24178 <LogWrite>
   4474c:	e1a0000b 	mov	r0, fp
   44750:	ebffc996 	bl	36db0 <free>
   44754:	e1a00004 	mov	r0, r4
   44758:	e28dd024 	add	sp, sp, #36	; 0x24
   4475c:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   44760:	e3a03001 	mov	r3, #1
   44764:	e58d3014 	str	r3, [sp, #20]
   44768:	e59d0014 	ldr	r0, [sp, #20]
   4476c:	eafffeaa 	b	4421c <USBStandardHubEnumeratePorts+0xa8>
   44770:	e59f010c 	ldr	r0, [pc, #268]	; 44884 <USBStandardHubEnumeratePorts+0x710>
   44774:	e59f10cc 	ldr	r1, [pc, #204]	; 44848 <USBStandardHubEnumeratePorts+0x6d4>
   44778:	e3a0209f 	mov	r2, #159	; 0x9f
   4477c:	ebffc9b1 	bl	36e48 <uspi_assertion_failed>
   44780:	eafffe83 	b	44194 <USBStandardHubEnumeratePorts+0x20>
   44784:	e59f00fc 	ldr	r0, [pc, #252]	; 44888 <USBStandardHubEnumeratePorts+0x714>
   44788:	e59f10b8 	ldr	r1, [pc, #184]	; 44848 <USBStandardHubEnumeratePorts+0x6d4>
   4478c:	e3a020a2 	mov	r2, #162	; 0xa2
   44790:	ebffc9ac 	bl	36e48 <uspi_assertion_failed>
   44794:	eafffe82 	b	441a4 <USBStandardHubEnumeratePorts+0x30>
   44798:	e59f00ec 	ldr	r0, [pc, #236]	; 4488c <USBStandardHubEnumeratePorts+0x718>
   4479c:	e59f10a4 	ldr	r1, [pc, #164]	; 44848 <USBStandardHubEnumeratePorts+0x6d4>
   447a0:	e3a0209c 	mov	r2, #156	; 0x9c
   447a4:	ebffc9a7 	bl	36e48 <uspi_assertion_failed>
   447a8:	eafffe75 	b	44184 <USBStandardHubEnumeratePorts+0x10>
   447ac:	e59f00dc 	ldr	r0, [pc, #220]	; 44890 <USBStandardHubEnumeratePorts+0x71c>
   447b0:	e59f1090 	ldr	r1, [pc, #144]	; 44848 <USBStandardHubEnumeratePorts+0x6d4>
   447b4:	e59f20d8 	ldr	r2, [pc, #216]	; 44894 <USBStandardHubEnumeratePorts+0x720>
   447b8:	ebffc9a2 	bl	36e48 <uspi_assertion_failed>
   447bc:	e5990000 	ldr	r0, [r9]
   447c0:	eaffff4b 	b	444f4 <USBStandardHubEnumeratePorts+0x380>
   447c4:	e59f00cc 	ldr	r0, [pc, #204]	; 44898 <USBStandardHubEnumeratePorts+0x724>
   447c8:	e59f1078 	ldr	r1, [pc, #120]	; 44848 <USBStandardHubEnumeratePorts+0x6d4>
   447cc:	e59f20c8 	ldr	r2, [pc, #200]	; 4489c <USBStandardHubEnumeratePorts+0x728>
   447d0:	ebffc99c 	bl	36e48 <uspi_assertion_failed>
   447d4:	eaffff2f 	b	44498 <USBStandardHubEnumeratePorts+0x324>
   447d8:	e3a00000 	mov	r0, #0
   447dc:	eafffe8e 	b	4421c <USBStandardHubEnumeratePorts+0xa8>
   447e0:	e3a02000 	mov	r2, #0
   447e4:	e3a03008 	mov	r3, #8
   447e8:	e58d2008 	str	r2, [sp, #8]
   447ec:	e58d200c 	str	r2, [sp, #12]
   447f0:	e1a01008 	mov	r1, r8
   447f4:	e58d3000 	str	r3, [sp]
   447f8:	e3a02023 	mov	r2, #35	; 0x23
   447fc:	e3a03001 	mov	r3, #1
   44800:	e58da004 	str	sl, [sp, #4]
   44804:	e1a00007 	mov	r0, r7
   44808:	ebffebfa 	bl	3f7f8 <DWHCIDeviceControlMessage>
   4480c:	e59f0028 	ldr	r0, [pc, #40]	; 4483c <USBStandardHubEnumeratePorts+0x6c8>
   44810:	e28b3001 	add	r3, fp, #1
   44814:	e3a01001 	mov	r1, #1
   44818:	e59f205c 	ldr	r2, [pc, #92]	; 4487c <USBStandardHubEnumeratePorts+0x708>
   4481c:	ebff7e55 	bl	24178 <LogWrite>
   44820:	e3a00000 	mov	r0, #0
   44824:	eafffe7c 	b	4421c <USBStandardHubEnumeratePorts+0xa8>
   44828:	e59f0070 	ldr	r0, [pc, #112]	; 448a0 <USBStandardHubEnumeratePorts+0x72c>
   4482c:	e59f1014 	ldr	r1, [pc, #20]	; 44848 <USBStandardHubEnumeratePorts+0x6d4>
   44830:	e3a02f4f 	mov	r2, #316	; 0x13c
   44834:	ebffc983 	bl	36e48 <uspi_assertion_failed>
   44838:	eafffe8c 	b	44270 <USBStandardHubEnumeratePorts+0xfc>
   4483c:	0005724c 	.word	0x0005724c
   44840:	00057298 	.word	0x00057298
   44844:	00057284 	.word	0x00057284
   44848:	00057254 	.word	0x00057254
   4484c:	000001fe 	.word	0x000001fe
   44850:	00057454 	.word	0x00057454
   44854:	000572f0 	.word	0x000572f0
   44858:	000572b0 	.word	0x000572b0
   4485c:	000573ac 	.word	0x000573ac
   44860:	00000115 	.word	0x00000115
   44864:	00057310 	.word	0x00057310
   44868:	000572d0 	.word	0x000572d0
   4486c:	00057348 	.word	0x00057348
   44870:	000573ec 	.word	0x000573ec
   44874:	00057410 	.word	0x00057410
   44878:	00057360 	.word	0x00057360
   4487c:	00057378 	.word	0x00057378
   44880:	0005743c 	.word	0x0005743c
   44884:	00057268 	.word	0x00057268
   44888:	00057274 	.word	0x00057274
   4488c:	00056434 	.word	0x00056434
   44890:	000573cc 	.word	0x000573cc
   44894:	00000117 	.word	0x00000117
   44898:	0005739c 	.word	0x0005739c
   4489c:	00000103 	.word	0x00000103
   448a0:	0005742c 	.word	0x0005742c

000448a4 <USBStandardHubConfigure>:
   448a4:	e92d4070 	push	{r4, r5, r6, lr}
   448a8:	e2504000 	subs	r4, r0, #0
   448ac:	e24dd010 	sub	sp, sp, #16
   448b0:	0a000049 	beq	449dc <USBStandardHubConfigure+0x138>
   448b4:	e1a00004 	mov	r0, r4
   448b8:	eb0002e1 	bl	45444 <USBFunctionGetNumEndpoints>
   448bc:	e1a06000 	mov	r6, r0
   448c0:	e3560001 	cmp	r6, #1
   448c4:	e1a00004 	mov	r0, r4
   448c8:	0a000005 	beq	448e4 <USBStandardHubConfigure+0x40>
   448cc:	e59f11a0 	ldr	r1, [pc, #416]	; 44a74 <USBStandardHubConfigure+0x1d0>
   448d0:	eb000384 	bl	456e8 <USBFunctionConfigurationError>
   448d4:	e3a05000 	mov	r5, #0
   448d8:	e1a00005 	mov	r0, r5
   448dc:	e28dd010 	add	sp, sp, #16
   448e0:	e8bd8070 	pop	{r4, r5, r6, pc}
   448e4:	e3a01005 	mov	r1, #5
   448e8:	eb000364 	bl	45680 <USBFunctionGetDescriptor>
   448ec:	e3500000 	cmp	r0, #0
   448f0:	0a000002 	beq	44900 <USBStandardHubConfigure+0x5c>
   448f4:	e1d030d2 	ldrsb	r3, [r0, #2]
   448f8:	e3530000 	cmp	r3, #0
   448fc:	ba000001 	blt	44908 <USBStandardHubConfigure+0x64>
   44900:	e1a00004 	mov	r0, r4
   44904:	eafffff0 	b	448cc <USBStandardHubConfigure+0x28>
   44908:	e5d03003 	ldrb	r3, [r0, #3]
   4490c:	e203303f 	and	r3, r3, #63	; 0x3f
   44910:	e3530003 	cmp	r3, #3
   44914:	1afffff9 	bne	44900 <USBStandardHubConfigure+0x5c>
   44918:	e1a00004 	mov	r0, r4
   4491c:	eb000321 	bl	455a8 <USBFunctionConfigure>
   44920:	e2505000 	subs	r5, r0, #0
   44924:	0a000031 	beq	449f0 <USBStandardHubConfigure+0x14c>
   44928:	e1a00004 	mov	r0, r4
   4492c:	eb000306 	bl	4554c <USBFunctionGetHost>
   44930:	e2505000 	subs	r5, r0, #0
   44934:	0a000049 	beq	44a60 <USBStandardHubConfigure+0x1bc>
   44938:	e5943010 	ldr	r3, [r4, #16]
   4493c:	e3530000 	cmp	r3, #0
   44940:	0a000003 	beq	44954 <USBStandardHubConfigure+0xb0>
   44944:	e59f012c 	ldr	r0, [pc, #300]	; 44a78 <USBStandardHubConfigure+0x1d4>
   44948:	e59f112c 	ldr	r1, [pc, #300]	; 44a7c <USBStandardHubConfigure+0x1d8>
   4494c:	e3a0206f 	mov	r2, #111	; 0x6f
   44950:	ebffc93c 	bl	36e48 <uspi_assertion_failed>
   44954:	e3a00009 	mov	r0, #9
   44958:	ebffc913 	bl	36dac <malloc>
   4495c:	e3500000 	cmp	r0, #0
   44960:	e5840010 	str	r0, [r4, #16]
   44964:	0a000038 	beq	44a4c <USBStandardHubConfigure+0x1a8>
   44968:	e1a00004 	mov	r0, r4
   4496c:	eb0002df 	bl	454f0 <USBFunctionGetEndpoint0>
   44970:	e3a0c009 	mov	ip, #9
   44974:	e3a030a0 	mov	r3, #160	; 0xa0
   44978:	e5942010 	ldr	r2, [r4, #16]
   4497c:	e1a01000 	mov	r1, r0
   44980:	e88d1004 	stm	sp, {r2, ip}
   44984:	e58d3008 	str	r3, [sp, #8]
   44988:	e1a00005 	mov	r0, r5
   4498c:	e3a02029 	mov	r2, #41	; 0x29
   44990:	e3a03000 	mov	r3, #0
   44994:	ebffebc3 	bl	3f8a8 <DWHCIDeviceGetDescriptor>
   44998:	e3500009 	cmp	r0, #9
   4499c:	1a000018 	bne	44a04 <USBStandardHubConfigure+0x160>
   449a0:	e5943010 	ldr	r3, [r4, #16]
   449a4:	e5d33002 	ldrb	r3, [r3, #2]
   449a8:	e3530008 	cmp	r3, #8
   449ac:	e5843014 	str	r3, [r4, #20]
   449b0:	8a00001c 	bhi	44a28 <USBStandardHubConfigure+0x184>
   449b4:	e1a00004 	mov	r0, r4
   449b8:	ebfffded 	bl	44174 <USBStandardHubEnumeratePorts>
   449bc:	e2505000 	subs	r5, r0, #0
   449c0:	13a05001 	movne	r5, #1
   449c4:	1affffc3 	bne	448d8 <USBStandardHubConfigure+0x34>
   449c8:	e59f00a4 	ldr	r0, [pc, #164]	; 44a74 <USBStandardHubConfigure+0x1d0>
   449cc:	e3a01001 	mov	r1, #1
   449d0:	e59f20a8 	ldr	r2, [pc, #168]	; 44a80 <USBStandardHubConfigure+0x1dc>
   449d4:	ebff7de7 	bl	24178 <LogWrite>
   449d8:	eaffffbe 	b	448d8 <USBStandardHubConfigure+0x34>
   449dc:	e59f00a0 	ldr	r0, [pc, #160]	; 44a84 <USBStandardHubConfigure+0x1e0>
   449e0:	e59f1094 	ldr	r1, [pc, #148]	; 44a7c <USBStandardHubConfigure+0x1d8>
   449e4:	e3a02051 	mov	r2, #81	; 0x51
   449e8:	ebffc916 	bl	36e48 <uspi_assertion_failed>
   449ec:	eaffffb0 	b	448b4 <USBStandardHubConfigure+0x10>
   449f0:	e1a01006 	mov	r1, r6
   449f4:	e59f0078 	ldr	r0, [pc, #120]	; 44a74 <USBStandardHubConfigure+0x1d0>
   449f8:	e59f2088 	ldr	r2, [pc, #136]	; 44a88 <USBStandardHubConfigure+0x1e4>
   449fc:	ebff7ddd 	bl	24178 <LogWrite>
   44a00:	eaffffb4 	b	448d8 <USBStandardHubConfigure+0x34>
   44a04:	e3a05000 	mov	r5, #0
   44a08:	e59f0064 	ldr	r0, [pc, #100]	; 44a74 <USBStandardHubConfigure+0x1d0>
   44a0c:	e3a01001 	mov	r1, #1
   44a10:	e59f2074 	ldr	r2, [pc, #116]	; 44a8c <USBStandardHubConfigure+0x1e8>
   44a14:	ebff7dd7 	bl	24178 <LogWrite>
   44a18:	e5940010 	ldr	r0, [r4, #16]
   44a1c:	ebffc8e3 	bl	36db0 <free>
   44a20:	e5845010 	str	r5, [r4, #16]
   44a24:	eaffffab 	b	448d8 <USBStandardHubConfigure+0x34>
   44a28:	e3a05000 	mov	r5, #0
   44a2c:	e59f0040 	ldr	r0, [pc, #64]	; 44a74 <USBStandardHubConfigure+0x1d0>
   44a30:	e3a01001 	mov	r1, #1
   44a34:	e59f2054 	ldr	r2, [pc, #84]	; 44a90 <USBStandardHubConfigure+0x1ec>
   44a38:	ebff7dce 	bl	24178 <LogWrite>
   44a3c:	e5940010 	ldr	r0, [r4, #16]
   44a40:	ebffc8da 	bl	36db0 <free>
   44a44:	e5845010 	str	r5, [r4, #16]
   44a48:	eaffffa2 	b	448d8 <USBStandardHubConfigure+0x34>
   44a4c:	e59f0040 	ldr	r0, [pc, #64]	; 44a94 <USBStandardHubConfigure+0x1f0>
   44a50:	e59f1024 	ldr	r1, [pc, #36]	; 44a7c <USBStandardHubConfigure+0x1d8>
   44a54:	e3a02071 	mov	r2, #113	; 0x71
   44a58:	ebffc8fa 	bl	36e48 <uspi_assertion_failed>
   44a5c:	eaffffc1 	b	44968 <USBStandardHubConfigure+0xc4>
   44a60:	e59f0030 	ldr	r0, [pc, #48]	; 44a98 <USBStandardHubConfigure+0x1f4>
   44a64:	e59f1010 	ldr	r1, [pc, #16]	; 44a7c <USBStandardHubConfigure+0x1d8>
   44a68:	e3a0206d 	mov	r2, #109	; 0x6d
   44a6c:	ebffc8f5 	bl	36e48 <uspi_assertion_failed>
   44a70:	eaffffb0 	b	44938 <USBStandardHubConfigure+0x94>
   44a74:	0005724c 	.word	0x0005724c
   44a78:	00057488 	.word	0x00057488
   44a7c:	00057254 	.word	0x00057254
   44a80:	000574e8 	.word	0x000574e8
   44a84:	00056434 	.word	0x00056434
   44a88:	00057470 	.word	0x00057470
   44a8c:	000574b8 	.word	0x000574b8
   44a90:	000574d4 	.word	0x000574d4
   44a94:	000574a0 	.word	0x000574a0
   44a98:	00057268 	.word	0x00057268

00044a9c <DeviceNameService>:
   44a9c:	e92d4038 	push	{r3, r4, r5, lr}
   44aa0:	e2505000 	subs	r5, r0, #0
   44aa4:	0a00000b 	beq	44ad8 <DeviceNameService+0x3c>
   44aa8:	e3a03000 	mov	r3, #0
   44aac:	e59f4038 	ldr	r4, [pc, #56]	; 44aec <DeviceNameService+0x50>
   44ab0:	e5853000 	str	r3, [r5]
   44ab4:	e5943000 	ldr	r3, [r4]
   44ab8:	e3530000 	cmp	r3, #0
   44abc:	0a000003 	beq	44ad0 <DeviceNameService+0x34>
   44ac0:	e59f0028 	ldr	r0, [pc, #40]	; 44af0 <DeviceNameService+0x54>
   44ac4:	e59f1028 	ldr	r1, [pc, #40]	; 44af4 <DeviceNameService+0x58>
   44ac8:	e3a02021 	mov	r2, #33	; 0x21
   44acc:	ebffc8dd 	bl	36e48 <uspi_assertion_failed>
   44ad0:	e5845000 	str	r5, [r4]
   44ad4:	e8bd8038 	pop	{r3, r4, r5, pc}
   44ad8:	e59f0018 	ldr	r0, [pc, #24]	; 44af8 <DeviceNameService+0x5c>
   44adc:	e59f1010 	ldr	r1, [pc, #16]	; 44af4 <DeviceNameService+0x58>
   44ae0:	e3a0201d 	mov	r2, #29
   44ae4:	ebffc8d7 	bl	36e48 <uspi_assertion_failed>
   44ae8:	eaffffee 	b	44aa8 <DeviceNameService+0xc>
   44aec:	000bfe58 	.word	0x000bfe58
   44af0:	00057514 	.word	0x00057514
   44af4:	00057500 	.word	0x00057500
   44af8:	00056434 	.word	0x00056434

00044afc <_DeviceNameService>:
   44afc:	e92d4070 	push	{r4, r5, r6, lr}
   44b00:	e2505000 	subs	r5, r0, #0
   44b04:	0a00001a 	beq	44b74 <_DeviceNameService+0x78>
   44b08:	e5953000 	ldr	r3, [r5]
   44b0c:	e3530000 	cmp	r3, #0
   44b10:	13a06000 	movne	r6, #0
   44b14:	0a00000d 	beq	44b50 <_DeviceNameService+0x54>
   44b18:	e5932004 	ldr	r2, [r3, #4]
   44b1c:	e5934000 	ldr	r4, [r3]
   44b20:	e3520000 	cmp	r2, #0
   44b24:	0a00000d 	beq	44b60 <_DeviceNameService+0x64>
   44b28:	e5953000 	ldr	r3, [r5]
   44b2c:	e5930004 	ldr	r0, [r3, #4]
   44b30:	ebffc89e 	bl	36db0 <free>
   44b34:	e5950000 	ldr	r0, [r5]
   44b38:	e5806004 	str	r6, [r0, #4]
   44b3c:	e5806008 	str	r6, [r0, #8]
   44b40:	ebffc89a 	bl	36db0 <free>
   44b44:	e2543000 	subs	r3, r4, #0
   44b48:	e5854000 	str	r4, [r5]
   44b4c:	1afffff1 	bne	44b18 <_DeviceNameService+0x1c>
   44b50:	e3a02000 	mov	r2, #0
   44b54:	e59f302c 	ldr	r3, [pc, #44]	; 44b88 <_DeviceNameService+0x8c>
   44b58:	e5832000 	str	r2, [r3]
   44b5c:	e8bd8070 	pop	{r4, r5, r6, pc}
   44b60:	e59f0024 	ldr	r0, [pc, #36]	; 44b8c <_DeviceNameService+0x90>
   44b64:	e59f1024 	ldr	r1, [pc, #36]	; 44b90 <_DeviceNameService+0x94>
   44b68:	e3a0202d 	mov	r2, #45	; 0x2d
   44b6c:	ebffc8b5 	bl	36e48 <uspi_assertion_failed>
   44b70:	eaffffec 	b	44b28 <_DeviceNameService+0x2c>
   44b74:	e59f0018 	ldr	r0, [pc, #24]	; 44b94 <_DeviceNameService+0x98>
   44b78:	e59f1010 	ldr	r1, [pc, #16]	; 44b90 <_DeviceNameService+0x94>
   44b7c:	e3a02027 	mov	r2, #39	; 0x27
   44b80:	ebffc8b0 	bl	36e48 <uspi_assertion_failed>
   44b84:	eaffffdf 	b	44b08 <_DeviceNameService+0xc>
   44b88:	000bfe58 	.word	0x000bfe58
   44b8c:	00057524 	.word	0x00057524
   44b90:	00057500 	.word	0x00057500
   44b94:	00056434 	.word	0x00056434

00044b98 <DeviceNameServiceAddDevice>:
   44b98:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   44b9c:	e2506000 	subs	r6, r0, #0
   44ba0:	e1a05001 	mov	r5, r1
   44ba4:	e1a07002 	mov	r7, r2
   44ba8:	e1a08003 	mov	r8, r3
   44bac:	0a00001b 	beq	44c20 <DeviceNameServiceAddDevice+0x88>
   44bb0:	e3a00010 	mov	r0, #16
   44bb4:	ebffc87c 	bl	36dac <malloc>
   44bb8:	e2504000 	subs	r4, r0, #0
   44bbc:	0a00001c 	beq	44c34 <DeviceNameServiceAddDevice+0x9c>
   44bc0:	e3550000 	cmp	r5, #0
   44bc4:	0a00001f 	beq	44c48 <DeviceNameServiceAddDevice+0xb0>
   44bc8:	e1a00005 	mov	r0, r5
   44bcc:	eb000d5c 	bl	48144 <uspi_strlen>
   44bd0:	e2800001 	add	r0, r0, #1
   44bd4:	ebffc874 	bl	36dac <malloc>
   44bd8:	e3500000 	cmp	r0, #0
   44bdc:	e5840004 	str	r0, [r4, #4]
   44be0:	0a00001d 	beq	44c5c <DeviceNameServiceAddDevice+0xc4>
   44be4:	e1a01005 	mov	r1, r5
   44be8:	eb000d83 	bl	481fc <uspi_strcpy>
   44bec:	e3570000 	cmp	r7, #0
   44bf0:	0a000005 	beq	44c0c <DeviceNameServiceAddDevice+0x74>
   44bf4:	e5963000 	ldr	r3, [r6]
   44bf8:	e5847008 	str	r7, [r4, #8]
   44bfc:	e584800c 	str	r8, [r4, #12]
   44c00:	e5843000 	str	r3, [r4]
   44c04:	e5864000 	str	r4, [r6]
   44c08:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   44c0c:	e59f0060 	ldr	r0, [pc, #96]	; 44c74 <DeviceNameServiceAddDevice+0xdc>
   44c10:	e59f1060 	ldr	r1, [pc, #96]	; 44c78 <DeviceNameServiceAddDevice+0xe0>
   44c14:	e3a02047 	mov	r2, #71	; 0x47
   44c18:	ebffc88a 	bl	36e48 <uspi_assertion_failed>
   44c1c:	eafffff4 	b	44bf4 <DeviceNameServiceAddDevice+0x5c>
   44c20:	e59f0054 	ldr	r0, [pc, #84]	; 44c7c <DeviceNameServiceAddDevice+0xe4>
   44c24:	e59f104c 	ldr	r1, [pc, #76]	; 44c78 <DeviceNameServiceAddDevice+0xe0>
   44c28:	e3a0203d 	mov	r2, #61	; 0x3d
   44c2c:	ebffc885 	bl	36e48 <uspi_assertion_failed>
   44c30:	eaffffde 	b	44bb0 <DeviceNameServiceAddDevice+0x18>
   44c34:	e59f0044 	ldr	r0, [pc, #68]	; 44c80 <DeviceNameServiceAddDevice+0xe8>
   44c38:	e59f1038 	ldr	r1, [pc, #56]	; 44c78 <DeviceNameServiceAddDevice+0xe0>
   44c3c:	e3a02040 	mov	r2, #64	; 0x40
   44c40:	ebffc880 	bl	36e48 <uspi_assertion_failed>
   44c44:	eaffffdd 	b	44bc0 <DeviceNameServiceAddDevice+0x28>
   44c48:	e59f0034 	ldr	r0, [pc, #52]	; 44c84 <DeviceNameServiceAddDevice+0xec>
   44c4c:	e59f1024 	ldr	r1, [pc, #36]	; 44c78 <DeviceNameServiceAddDevice+0xe0>
   44c50:	e3a02042 	mov	r2, #66	; 0x42
   44c54:	ebffc87b 	bl	36e48 <uspi_assertion_failed>
   44c58:	eaffffda 	b	44bc8 <DeviceNameServiceAddDevice+0x30>
   44c5c:	e59f0024 	ldr	r0, [pc, #36]	; 44c88 <DeviceNameServiceAddDevice+0xf0>
   44c60:	e59f1010 	ldr	r1, [pc, #16]	; 44c78 <DeviceNameServiceAddDevice+0xe0>
   44c64:	e3a02044 	mov	r2, #68	; 0x44
   44c68:	ebffc876 	bl	36e48 <uspi_assertion_failed>
   44c6c:	e5940004 	ldr	r0, [r4, #4]
   44c70:	eaffffdb 	b	44be4 <DeviceNameServiceAddDevice+0x4c>
   44c74:	00056f64 	.word	0x00056f64
   44c78:	00057500 	.word	0x00057500
   44c7c:	00056434 	.word	0x00056434
   44c80:	0005641c 	.word	0x0005641c
   44c84:	00057534 	.word	0x00057534
   44c88:	00057540 	.word	0x00057540

00044c8c <DeviceNameServiceGetDevice>:
   44c8c:	e92d4070 	push	{r4, r5, r6, lr}
   44c90:	e2504000 	subs	r4, r0, #0
   44c94:	e1a05001 	mov	r5, r1
   44c98:	e1a06002 	mov	r6, r2
   44c9c:	0a00001f 	beq	44d20 <DeviceNameServiceGetDevice+0x94>
   44ca0:	e3550000 	cmp	r5, #0
   44ca4:	0a000022 	beq	44d34 <DeviceNameServiceGetDevice+0xa8>
   44ca8:	e5944000 	ldr	r4, [r4]
   44cac:	e3540000 	cmp	r4, #0
   44cb0:	0a000018 	beq	44d18 <DeviceNameServiceGetDevice+0x8c>
   44cb4:	e5941004 	ldr	r1, [r4, #4]
   44cb8:	e3510000 	cmp	r1, #0
   44cbc:	0a00000f 	beq	44d00 <DeviceNameServiceGetDevice+0x74>
   44cc0:	e1a00005 	mov	r0, r5
   44cc4:	eb000d28 	bl	4816c <uspi_strcmp>
   44cc8:	e3500000 	cmp	r0, #0
   44ccc:	1afffff5 	bne	44ca8 <DeviceNameServiceGetDevice+0x1c>
   44cd0:	e594300c 	ldr	r3, [r4, #12]
   44cd4:	e1530006 	cmp	r3, r6
   44cd8:	1afffff2 	bne	44ca8 <DeviceNameServiceGetDevice+0x1c>
   44cdc:	e5940008 	ldr	r0, [r4, #8]
   44ce0:	e3500000 	cmp	r0, #0
   44ce4:	18bd8070 	popne	{r4, r5, r6, pc}
   44ce8:	e59f0058 	ldr	r0, [pc, #88]	; 44d48 <DeviceNameServiceGetDevice+0xbc>
   44cec:	e59f1058 	ldr	r1, [pc, #88]	; 44d4c <DeviceNameServiceGetDevice+0xc0>
   44cf0:	e3a0205c 	mov	r2, #92	; 0x5c
   44cf4:	ebffc853 	bl	36e48 <uspi_assertion_failed>
   44cf8:	e5940008 	ldr	r0, [r4, #8]
   44cfc:	e8bd8070 	pop	{r4, r5, r6, pc}
   44d00:	e59f1044 	ldr	r1, [pc, #68]	; 44d4c <DeviceNameServiceGetDevice+0xc0>
   44d04:	e59f0044 	ldr	r0, [pc, #68]	; 44d50 <DeviceNameServiceGetDevice+0xc4>
   44d08:	e3a02058 	mov	r2, #88	; 0x58
   44d0c:	ebffc84d 	bl	36e48 <uspi_assertion_failed>
   44d10:	e5941004 	ldr	r1, [r4, #4]
   44d14:	eaffffe9 	b	44cc0 <DeviceNameServiceGetDevice+0x34>
   44d18:	e3a00000 	mov	r0, #0
   44d1c:	e8bd8070 	pop	{r4, r5, r6, pc}
   44d20:	e59f002c 	ldr	r0, [pc, #44]	; 44d54 <DeviceNameServiceGetDevice+0xc8>
   44d24:	e59f1020 	ldr	r1, [pc, #32]	; 44d4c <DeviceNameServiceGetDevice+0xc0>
   44d28:	e3a02052 	mov	r2, #82	; 0x52
   44d2c:	ebffc845 	bl	36e48 <uspi_assertion_failed>
   44d30:	eaffffda 	b	44ca0 <DeviceNameServiceGetDevice+0x14>
   44d34:	e59f001c 	ldr	r0, [pc, #28]	; 44d58 <DeviceNameServiceGetDevice+0xcc>
   44d38:	e59f100c 	ldr	r1, [pc, #12]	; 44d4c <DeviceNameServiceGetDevice+0xc0>
   44d3c:	e3a02053 	mov	r2, #83	; 0x53
   44d40:	ebffc840 	bl	36e48 <uspi_assertion_failed>
   44d44:	eaffffd7 	b	44ca8 <DeviceNameServiceGetDevice+0x1c>
   44d48:	00057554 	.word	0x00057554
   44d4c:	00057500 	.word	0x00057500
   44d50:	00057540 	.word	0x00057540
   44d54:	00056434 	.word	0x00056434
   44d58:	00057534 	.word	0x00057534

00044d5c <DeviceNameServiceGet>:
   44d5c:	e92d4010 	push	{r4, lr}
   44d60:	e59f4020 	ldr	r4, [pc, #32]	; 44d88 <DeviceNameServiceGet+0x2c>
   44d64:	e5940000 	ldr	r0, [r4]
   44d68:	e3500000 	cmp	r0, #0
   44d6c:	18bd8010 	popne	{r4, pc}
   44d70:	e59f0014 	ldr	r0, [pc, #20]	; 44d8c <DeviceNameServiceGet+0x30>
   44d74:	e59f1014 	ldr	r1, [pc, #20]	; 44d90 <DeviceNameServiceGet+0x34>
   44d78:	e3a02068 	mov	r2, #104	; 0x68
   44d7c:	ebffc831 	bl	36e48 <uspi_assertion_failed>
   44d80:	e5940000 	ldr	r0, [r4]
   44d84:	e8bd8010 	pop	{r4, pc}
   44d88:	000bfe58 	.word	0x000bfe58
   44d8c:	00057568 	.word	0x00057568
   44d90:	00057500 	.word	0x00057500

00044d94 <MACAddress>:
   44d94:	e92d4010 	push	{r4, lr}
   44d98:	e2504000 	subs	r4, r0, #0
   44d9c:	0a000002 	beq	44dac <MACAddress+0x18>
   44da0:	e3a03000 	mov	r3, #0
   44da4:	e5843000 	str	r3, [r4]
   44da8:	e8bd8010 	pop	{r4, pc}
   44dac:	e59f000c 	ldr	r0, [pc, #12]	; 44dc0 <MACAddress+0x2c>
   44db0:	e59f100c 	ldr	r1, [pc, #12]	; 44dc4 <MACAddress+0x30>
   44db4:	e3a0201a 	mov	r2, #26
   44db8:	ebffc822 	bl	36e48 <uspi_assertion_failed>
   44dbc:	eafffff7 	b	44da0 <MACAddress+0xc>
   44dc0:	00056434 	.word	0x00056434
   44dc4:	00057578 	.word	0x00057578

00044dc8 <_MACAddress>:
   44dc8:	e92d4010 	push	{r4, lr}
   44dcc:	e2504000 	subs	r4, r0, #0
   44dd0:	0a000002 	beq	44de0 <_MACAddress+0x18>
   44dd4:	e3a03000 	mov	r3, #0
   44dd8:	e5843000 	str	r3, [r4]
   44ddc:	e8bd8010 	pop	{r4, pc}
   44de0:	e59f000c 	ldr	r0, [pc, #12]	; 44df4 <_MACAddress+0x2c>
   44de4:	e59f100c 	ldr	r1, [pc, #12]	; 44df8 <_MACAddress+0x30>
   44de8:	e3a02028 	mov	r2, #40	; 0x28
   44dec:	ebffc815 	bl	36e48 <uspi_assertion_failed>
   44df0:	eafffff7 	b	44dd4 <_MACAddress+0xc>
   44df4:	00056434 	.word	0x00056434
   44df8:	00057578 	.word	0x00057578

00044dfc <MACAddressSet>:
   44dfc:	e92d4038 	push	{r3, r4, r5, lr}
   44e00:	e2504000 	subs	r4, r0, #0
   44e04:	e1a05001 	mov	r5, r1
   44e08:	0a00000d 	beq	44e44 <MACAddressSet+0x48>
   44e0c:	e3550000 	cmp	r5, #0
   44e10:	0a000006 	beq	44e30 <MACAddressSet+0x34>
   44e14:	e1a01005 	mov	r1, r5
   44e18:	e2840004 	add	r0, r4, #4
   44e1c:	e3a02006 	mov	r2, #6
   44e20:	eb000ca7 	bl	480c4 <uspi_memcpy>
   44e24:	e3a03001 	mov	r3, #1
   44e28:	e5843000 	str	r3, [r4]
   44e2c:	e8bd8038 	pop	{r3, r4, r5, pc}
   44e30:	e59f0020 	ldr	r0, [pc, #32]	; 44e58 <MACAddressSet+0x5c>
   44e34:	e59f1020 	ldr	r1, [pc, #32]	; 44e5c <MACAddressSet+0x60>
   44e38:	e3a02038 	mov	r2, #56	; 0x38
   44e3c:	ebffc801 	bl	36e48 <uspi_assertion_failed>
   44e40:	eafffff3 	b	44e14 <MACAddressSet+0x18>
   44e44:	e59f0014 	ldr	r0, [pc, #20]	; 44e60 <MACAddressSet+0x64>
   44e48:	e59f100c 	ldr	r1, [pc, #12]	; 44e5c <MACAddressSet+0x60>
   44e4c:	e3a02037 	mov	r2, #55	; 0x37
   44e50:	ebffc7fc 	bl	36e48 <uspi_assertion_failed>
   44e54:	eaffffec 	b	44e0c <MACAddressSet+0x10>
   44e58:	00057588 	.word	0x00057588
   44e5c:	00057578 	.word	0x00057578
   44e60:	00056434 	.word	0x00056434

00044e64 <MACAddress2>:
   44e64:	e92d4038 	push	{r3, r4, r5, lr}
   44e68:	e2505000 	subs	r5, r0, #0
   44e6c:	e1a04001 	mov	r4, r1
   44e70:	0a000003 	beq	44e84 <MACAddress2+0x20>
   44e74:	e1a00005 	mov	r0, r5
   44e78:	e1a01004 	mov	r1, r4
   44e7c:	e8bd4038 	pop	{r3, r4, r5, lr}
   44e80:	eaffffdd 	b	44dfc <MACAddressSet>
   44e84:	e59f0018 	ldr	r0, [pc, #24]	; 44ea4 <MACAddress2+0x40>
   44e88:	e59f1018 	ldr	r1, [pc, #24]	; 44ea8 <MACAddress2+0x44>
   44e8c:	e3a02021 	mov	r2, #33	; 0x21
   44e90:	ebffc7ec 	bl	36e48 <uspi_assertion_failed>
   44e94:	e1a00005 	mov	r0, r5
   44e98:	e1a01004 	mov	r1, r4
   44e9c:	e8bd4038 	pop	{r3, r4, r5, lr}
   44ea0:	eaffffd5 	b	44dfc <MACAddressSet>
   44ea4:	00056434 	.word	0x00056434
   44ea8:	00057578 	.word	0x00057578

00044eac <MACAddressSetBroadcast>:
   44eac:	e92d4010 	push	{r4, lr}
   44eb0:	e2504000 	subs	r4, r0, #0
   44eb4:	0a000006 	beq	44ed4 <MACAddressSetBroadcast+0x28>
   44eb8:	e2840004 	add	r0, r4, #4
   44ebc:	e3a010ff 	mov	r1, #255	; 0xff
   44ec0:	e3a02006 	mov	r2, #6
   44ec4:	eb000c75 	bl	480a0 <uspi_memset>
   44ec8:	e3a03001 	mov	r3, #1
   44ecc:	e5843000 	str	r3, [r4]
   44ed0:	e8bd8010 	pop	{r4, pc}
   44ed4:	e59f000c 	ldr	r0, [pc, #12]	; 44ee8 <MACAddressSetBroadcast+0x3c>
   44ed8:	e59f100c 	ldr	r1, [pc, #12]	; 44eec <MACAddressSetBroadcast+0x40>
   44edc:	e3a02040 	mov	r2, #64	; 0x40
   44ee0:	ebffc7d8 	bl	36e48 <uspi_assertion_failed>
   44ee4:	eafffff3 	b	44eb8 <MACAddressSetBroadcast+0xc>
   44ee8:	00056434 	.word	0x00056434
   44eec:	00057578 	.word	0x00057578

00044ef0 <MACAddressGet>:
   44ef0:	e92d4010 	push	{r4, lr}
   44ef4:	e2504000 	subs	r4, r0, #0
   44ef8:	0a000008 	beq	44f20 <MACAddressGet+0x30>
   44efc:	e5943000 	ldr	r3, [r4]
   44f00:	e3530000 	cmp	r3, #0
   44f04:	1a000003 	bne	44f18 <MACAddressGet+0x28>
   44f08:	e59f0024 	ldr	r0, [pc, #36]	; 44f34 <MACAddressGet+0x44>
   44f0c:	e59f1024 	ldr	r1, [pc, #36]	; 44f38 <MACAddressGet+0x48>
   44f10:	e3a02049 	mov	r2, #73	; 0x49
   44f14:	ebffc7cb 	bl	36e48 <uspi_assertion_failed>
   44f18:	e2840004 	add	r0, r4, #4
   44f1c:	e8bd8010 	pop	{r4, pc}
   44f20:	e59f0014 	ldr	r0, [pc, #20]	; 44f3c <MACAddressGet+0x4c>
   44f24:	e59f100c 	ldr	r1, [pc, #12]	; 44f38 <MACAddressGet+0x48>
   44f28:	e3a02048 	mov	r2, #72	; 0x48
   44f2c:	ebffc7c5 	bl	36e48 <uspi_assertion_failed>
   44f30:	eafffff1 	b	44efc <MACAddressGet+0xc>
   44f34:	000569a8 	.word	0x000569a8
   44f38:	00057578 	.word	0x00057578
   44f3c:	00056434 	.word	0x00056434

00044f40 <MACAddressIsEqual>:
   44f40:	e92d4038 	push	{r3, r4, r5, lr}
   44f44:	e2504000 	subs	r4, r0, #0
   44f48:	e1a05001 	mov	r5, r1
   44f4c:	0a00000f 	beq	44f90 <MACAddressIsEqual+0x50>
   44f50:	e5943000 	ldr	r3, [r4]
   44f54:	e3530000 	cmp	r3, #0
   44f58:	1a000003 	bne	44f6c <MACAddressIsEqual+0x2c>
   44f5c:	e59f0040 	ldr	r0, [pc, #64]	; 44fa4 <MACAddressIsEqual+0x64>
   44f60:	e59f1040 	ldr	r1, [pc, #64]	; 44fa8 <MACAddressIsEqual+0x68>
   44f64:	e3a02030 	mov	r2, #48	; 0x30
   44f68:	ebffc7b6 	bl	36e48 <uspi_assertion_failed>
   44f6c:	e1a00005 	mov	r0, r5
   44f70:	ebffffde 	bl	44ef0 <MACAddressGet>
   44f74:	e3a02006 	mov	r2, #6
   44f78:	e1a01000 	mov	r1, r0
   44f7c:	e2840004 	add	r0, r4, #4
   44f80:	eb000c58 	bl	480e8 <uspi_memcmp>
   44f84:	e16f0f10 	clz	r0, r0
   44f88:	e1a002a0 	lsr	r0, r0, #5
   44f8c:	e8bd8038 	pop	{r3, r4, r5, pc}
   44f90:	e59f0014 	ldr	r0, [pc, #20]	; 44fac <MACAddressIsEqual+0x6c>
   44f94:	e59f100c 	ldr	r1, [pc, #12]	; 44fa8 <MACAddressIsEqual+0x68>
   44f98:	e3a0202f 	mov	r2, #47	; 0x2f
   44f9c:	ebffc7a9 	bl	36e48 <uspi_assertion_failed>
   44fa0:	eaffffea 	b	44f50 <MACAddressIsEqual+0x10>
   44fa4:	000569a8 	.word	0x000569a8
   44fa8:	00057578 	.word	0x00057578
   44fac:	00056434 	.word	0x00056434

00044fb0 <MACAddressCopyTo>:
   44fb0:	e92d4038 	push	{r3, r4, r5, lr}
   44fb4:	e2504000 	subs	r4, r0, #0
   44fb8:	e1a05001 	mov	r5, r1
   44fbc:	0a000014 	beq	45014 <MACAddressCopyTo+0x64>
   44fc0:	e5943000 	ldr	r3, [r4]
   44fc4:	e3530000 	cmp	r3, #0
   44fc8:	0a000006 	beq	44fe8 <MACAddressCopyTo+0x38>
   44fcc:	e3550000 	cmp	r5, #0
   44fd0:	0a00000a 	beq	45000 <MACAddressCopyTo+0x50>
   44fd4:	e1a00005 	mov	r0, r5
   44fd8:	e2841004 	add	r1, r4, #4
   44fdc:	e3a02006 	mov	r2, #6
   44fe0:	e8bd4038 	pop	{r3, r4, r5, lr}
   44fe4:	ea000c36 	b	480c4 <uspi_memcpy>
   44fe8:	e59f0038 	ldr	r0, [pc, #56]	; 45028 <MACAddressCopyTo+0x78>
   44fec:	e59f1038 	ldr	r1, [pc, #56]	; 4502c <MACAddressCopyTo+0x7c>
   44ff0:	e3a02051 	mov	r2, #81	; 0x51
   44ff4:	ebffc793 	bl	36e48 <uspi_assertion_failed>
   44ff8:	e3550000 	cmp	r5, #0
   44ffc:	1afffff4 	bne	44fd4 <MACAddressCopyTo+0x24>
   45000:	e59f0028 	ldr	r0, [pc, #40]	; 45030 <MACAddressCopyTo+0x80>
   45004:	e59f1020 	ldr	r1, [pc, #32]	; 4502c <MACAddressCopyTo+0x7c>
   45008:	e3a02052 	mov	r2, #82	; 0x52
   4500c:	ebffc78d 	bl	36e48 <uspi_assertion_failed>
   45010:	eaffffef 	b	44fd4 <MACAddressCopyTo+0x24>
   45014:	e59f0018 	ldr	r0, [pc, #24]	; 45034 <MACAddressCopyTo+0x84>
   45018:	e59f100c 	ldr	r1, [pc, #12]	; 4502c <MACAddressCopyTo+0x7c>
   4501c:	e3a02050 	mov	r2, #80	; 0x50
   45020:	ebffc788 	bl	36e48 <uspi_assertion_failed>
   45024:	eaffffe5 	b	44fc0 <MACAddressCopyTo+0x10>
   45028:	000569a8 	.word	0x000569a8
   4502c:	00057578 	.word	0x00057578
   45030:	000579e4 	.word	0x000579e4
   45034:	00056434 	.word	0x00056434

00045038 <MACAddressIsBroadcast>:
   45038:	e92d4010 	push	{r4, lr}
   4503c:	e2504000 	subs	r4, r0, #0
   45040:	0a000012 	beq	45090 <MACAddressIsBroadcast+0x58>
   45044:	e5943000 	ldr	r3, [r4]
   45048:	e3530000 	cmp	r3, #0
   4504c:	0a000008 	beq	45074 <MACAddressIsBroadcast+0x3c>
   45050:	e2843003 	add	r3, r4, #3
   45054:	e2842009 	add	r2, r4, #9
   45058:	e5f31001 	ldrb	r1, [r3, #1]!
   4505c:	e35100ff 	cmp	r1, #255	; 0xff
   45060:	1a000008 	bne	45088 <MACAddressIsBroadcast+0x50>
   45064:	e1530002 	cmp	r3, r2
   45068:	1afffffa 	bne	45058 <MACAddressIsBroadcast+0x20>
   4506c:	e3a00001 	mov	r0, #1
   45070:	e8bd8010 	pop	{r4, pc}
   45074:	e59f0028 	ldr	r0, [pc, #40]	; 450a4 <MACAddressIsBroadcast+0x6c>
   45078:	e59f1028 	ldr	r1, [pc, #40]	; 450a8 <MACAddressIsBroadcast+0x70>
   4507c:	e3a0205a 	mov	r2, #90	; 0x5a
   45080:	ebffc770 	bl	36e48 <uspi_assertion_failed>
   45084:	eafffff1 	b	45050 <MACAddressIsBroadcast+0x18>
   45088:	e3a00000 	mov	r0, #0
   4508c:	e8bd8010 	pop	{r4, pc}
   45090:	e59f0014 	ldr	r0, [pc, #20]	; 450ac <MACAddressIsBroadcast+0x74>
   45094:	e59f100c 	ldr	r1, [pc, #12]	; 450a8 <MACAddressIsBroadcast+0x70>
   45098:	e3a02059 	mov	r2, #89	; 0x59
   4509c:	ebffc769 	bl	36e48 <uspi_assertion_failed>
   450a0:	eaffffe7 	b	45044 <MACAddressIsBroadcast+0xc>
   450a4:	000569a8 	.word	0x000569a8
   450a8:	00057578 	.word	0x00057578
   450ac:	00056434 	.word	0x00056434

000450b0 <MACAddressGetSize>:
   450b0:	e3a00006 	mov	r0, #6
   450b4:	e12fff1e 	bx	lr

000450b8 <MACAddressFormat>:
   450b8:	e92d4030 	push	{r4, r5, lr}
   450bc:	e2504000 	subs	r4, r0, #0
   450c0:	e24dd014 	sub	sp, sp, #20
   450c4:	e1a05001 	mov	r5, r1
   450c8:	0a00001e 	beq	45148 <MACAddressFormat+0x90>
   450cc:	e5943000 	ldr	r3, [r4]
   450d0:	e3530000 	cmp	r3, #0
   450d4:	0a000010 	beq	4511c <MACAddressFormat+0x64>
   450d8:	e3550000 	cmp	r5, #0
   450dc:	0a000014 	beq	45134 <MACAddressFormat+0x7c>
   450e0:	e5d41006 	ldrb	r1, [r4, #6]
   450e4:	e5d42004 	ldrb	r2, [r4, #4]
   450e8:	e5d43005 	ldrb	r3, [r4, #5]
   450ec:	e58d1000 	str	r1, [sp]
   450f0:	e5d41007 	ldrb	r1, [r4, #7]
   450f4:	e1a00005 	mov	r0, r5
   450f8:	e58d1004 	str	r1, [sp, #4]
   450fc:	e5d41008 	ldrb	r1, [r4, #8]
   45100:	e58d1008 	str	r1, [sp, #8]
   45104:	e5d41009 	ldrb	r1, [r4, #9]
   45108:	e58d100c 	str	r1, [sp, #12]
   4510c:	e59f1048 	ldr	r1, [pc, #72]	; 4515c <MACAddressFormat+0xa4>
   45110:	eb000bcc 	bl	48048 <StringFormat>
   45114:	e28dd014 	add	sp, sp, #20
   45118:	e8bd8030 	pop	{r4, r5, pc}
   4511c:	e59f003c 	ldr	r0, [pc, #60]	; 45160 <MACAddressFormat+0xa8>
   45120:	e59f103c 	ldr	r1, [pc, #60]	; 45164 <MACAddressFormat+0xac>
   45124:	e3a0206f 	mov	r2, #111	; 0x6f
   45128:	ebffc746 	bl	36e48 <uspi_assertion_failed>
   4512c:	e3550000 	cmp	r5, #0
   45130:	1affffea 	bne	450e0 <MACAddressFormat+0x28>
   45134:	e59f002c 	ldr	r0, [pc, #44]	; 45168 <MACAddressFormat+0xb0>
   45138:	e59f1024 	ldr	r1, [pc, #36]	; 45164 <MACAddressFormat+0xac>
   4513c:	e3a02071 	mov	r2, #113	; 0x71
   45140:	ebffc740 	bl	36e48 <uspi_assertion_failed>
   45144:	eaffffe5 	b	450e0 <MACAddressFormat+0x28>
   45148:	e59f001c 	ldr	r0, [pc, #28]	; 4516c <MACAddressFormat+0xb4>
   4514c:	e59f1010 	ldr	r1, [pc, #16]	; 45164 <MACAddressFormat+0xac>
   45150:	e3a0206e 	mov	r2, #110	; 0x6e
   45154:	ebffc73b 	bl	36e48 <uspi_assertion_failed>
   45158:	eaffffdb 	b	450cc <MACAddressFormat+0x14>
   4515c:	00057598 	.word	0x00057598
   45160:	000569a8 	.word	0x000569a8
   45164:	00057578 	.word	0x00057578
   45168:	00056be8 	.word	0x00056be8
   4516c:	00056434 	.word	0x00056434

00045170 <USBFunction>:
   45170:	e92d4070 	push	{r4, r5, r6, lr}
   45174:	e2504000 	subs	r4, r0, #0
   45178:	e1a06001 	mov	r6, r1
   4517c:	e1a05002 	mov	r5, r2
   45180:	0a000017 	beq	451e4 <USBFunction+0x74>
   45184:	e3a03000 	mov	r3, #0
   45188:	e1560003 	cmp	r6, r3
   4518c:	e8840048 	stm	r4, {r3, r6}
   45190:	0a000018 	beq	451f8 <USBFunction+0x88>
   45194:	e3a0001c 	mov	r0, #28
   45198:	ebffc703 	bl	36dac <malloc>
   4519c:	e3500000 	cmp	r0, #0
   451a0:	e5840008 	str	r0, [r4, #8]
   451a4:	0a000018 	beq	4520c <USBFunction+0x9c>
   451a8:	e3550000 	cmp	r5, #0
   451ac:	0a00001b 	beq	45220 <USBFunction+0xb0>
   451b0:	e1a01005 	mov	r1, r5
   451b4:	e5940008 	ldr	r0, [r4, #8]
   451b8:	eb001ced 	bl	4c574 <USBConfigurationParserCopy>
   451bc:	e5940008 	ldr	r0, [r4, #8]
   451c0:	eb001d5f 	bl	4c744 <USBConfigurationParserGetCurrentDescriptor>
   451c4:	e3500000 	cmp	r0, #0
   451c8:	e584000c 	str	r0, [r4, #12]
   451cc:	18bd8070 	popne	{r4, r5, r6, pc}
   451d0:	e59f005c 	ldr	r0, [pc, #92]	; 45234 <USBFunction+0xc4>
   451d4:	e59f105c 	ldr	r1, [pc, #92]	; 45238 <USBFunction+0xc8>
   451d8:	e3a0202c 	mov	r2, #44	; 0x2c
   451dc:	e8bd4070 	pop	{r4, r5, r6, lr}
   451e0:	eaffc718 	b	36e48 <uspi_assertion_failed>
   451e4:	e59f0050 	ldr	r0, [pc, #80]	; 4523c <USBFunction+0xcc>
   451e8:	e59f1048 	ldr	r1, [pc, #72]	; 45238 <USBFunction+0xc8>
   451ec:	e3a0201f 	mov	r2, #31
   451f0:	ebffc714 	bl	36e48 <uspi_assertion_failed>
   451f4:	eaffffe2 	b	45184 <USBFunction+0x14>
   451f8:	e59f0040 	ldr	r0, [pc, #64]	; 45240 <USBFunction+0xd0>
   451fc:	e59f1034 	ldr	r1, [pc, #52]	; 45238 <USBFunction+0xc8>
   45200:	e3a02024 	mov	r2, #36	; 0x24
   45204:	ebffc70f 	bl	36e48 <uspi_assertion_failed>
   45208:	eaffffe1 	b	45194 <USBFunction+0x24>
   4520c:	e59f0030 	ldr	r0, [pc, #48]	; 45244 <USBFunction+0xd4>
   45210:	e59f1020 	ldr	r1, [pc, #32]	; 45238 <USBFunction+0xc8>
   45214:	e3a02027 	mov	r2, #39	; 0x27
   45218:	ebffc70a 	bl	36e48 <uspi_assertion_failed>
   4521c:	eaffffe1 	b	451a8 <USBFunction+0x38>
   45220:	e59f0020 	ldr	r0, [pc, #32]	; 45248 <USBFunction+0xd8>
   45224:	e59f100c 	ldr	r1, [pc, #12]	; 45238 <USBFunction+0xc8>
   45228:	e3a02028 	mov	r2, #40	; 0x28
   4522c:	ebffc705 	bl	36e48 <uspi_assertion_failed>
   45230:	eaffffde 	b	451b0 <USBFunction+0x40>
   45234:	000575e4 	.word	0x000575e4
   45238:	000575c0 	.word	0x000575c0
   4523c:	00056434 	.word	0x00056434
   45240:	00056ae4 	.word	0x00056ae4
   45244:	00056c64 	.word	0x00056c64
   45248:	000575d0 	.word	0x000575d0

0004524c <USBFunctionCopy>:
   4524c:	e92d4038 	push	{r3, r4, r5, lr}
   45250:	e2504000 	subs	r4, r0, #0
   45254:	e1a05001 	mov	r5, r1
   45258:	0a000019 	beq	452c4 <USBFunctionCopy+0x78>
   4525c:	e3550000 	cmp	r5, #0
   45260:	0a00001c 	beq	452d8 <USBFunctionCopy+0x8c>
   45264:	e895000c 	ldm	r5, {r2, r3}
   45268:	e3530000 	cmp	r3, #0
   4526c:	e884000c 	stm	r4, {r2, r3}
   45270:	0a00001d 	beq	452ec <USBFunctionCopy+0xa0>
   45274:	e3a0001c 	mov	r0, #28
   45278:	ebffc6cb 	bl	36dac <malloc>
   4527c:	e3500000 	cmp	r0, #0
   45280:	e5840008 	str	r0, [r4, #8]
   45284:	0a00001d 	beq	45300 <USBFunctionCopy+0xb4>
   45288:	e5951008 	ldr	r1, [r5, #8]
   4528c:	e3510000 	cmp	r1, #0
   45290:	0a00001f 	beq	45314 <USBFunctionCopy+0xc8>
   45294:	e5940008 	ldr	r0, [r4, #8]
   45298:	eb001cb5 	bl	4c574 <USBConfigurationParserCopy>
   4529c:	e5940008 	ldr	r0, [r4, #8]
   452a0:	eb001d27 	bl	4c744 <USBConfigurationParserGetCurrentDescriptor>
   452a4:	e3500000 	cmp	r0, #0
   452a8:	e584000c 	str	r0, [r4, #12]
   452ac:	18bd8038 	popne	{r3, r4, r5, pc}
   452b0:	e59f0074 	ldr	r0, [pc, #116]	; 4532c <USBFunctionCopy+0xe0>
   452b4:	e59f1074 	ldr	r1, [pc, #116]	; 45330 <USBFunctionCopy+0xe4>
   452b8:	e3a0203f 	mov	r2, #63	; 0x3f
   452bc:	e8bd4038 	pop	{r3, r4, r5, lr}
   452c0:	eaffc6e0 	b	36e48 <uspi_assertion_failed>
   452c4:	e59f0068 	ldr	r0, [pc, #104]	; 45334 <USBFunctionCopy+0xe8>
   452c8:	e59f1060 	ldr	r1, [pc, #96]	; 45330 <USBFunctionCopy+0xe4>
   452cc:	e3a02031 	mov	r2, #49	; 0x31
   452d0:	ebffc6dc 	bl	36e48 <uspi_assertion_failed>
   452d4:	eaffffe0 	b	4525c <USBFunctionCopy+0x10>
   452d8:	e59f0058 	ldr	r0, [pc, #88]	; 45338 <USBFunctionCopy+0xec>
   452dc:	e59f104c 	ldr	r1, [pc, #76]	; 45330 <USBFunctionCopy+0xe4>
   452e0:	e3a02032 	mov	r2, #50	; 0x32
   452e4:	ebffc6d7 	bl	36e48 <uspi_assertion_failed>
   452e8:	eaffffdd 	b	45264 <USBFunctionCopy+0x18>
   452ec:	e59f0048 	ldr	r0, [pc, #72]	; 4533c <USBFunctionCopy+0xf0>
   452f0:	e59f1038 	ldr	r1, [pc, #56]	; 45330 <USBFunctionCopy+0xe4>
   452f4:	e3a02037 	mov	r2, #55	; 0x37
   452f8:	ebffc6d2 	bl	36e48 <uspi_assertion_failed>
   452fc:	eaffffdc 	b	45274 <USBFunctionCopy+0x28>
   45300:	e59f0038 	ldr	r0, [pc, #56]	; 45340 <USBFunctionCopy+0xf4>
   45304:	e59f1024 	ldr	r1, [pc, #36]	; 45330 <USBFunctionCopy+0xe4>
   45308:	e3a0203a 	mov	r2, #58	; 0x3a
   4530c:	ebffc6cd 	bl	36e48 <uspi_assertion_failed>
   45310:	eaffffdc 	b	45288 <USBFunctionCopy+0x3c>
   45314:	e59f1014 	ldr	r1, [pc, #20]	; 45330 <USBFunctionCopy+0xe4>
   45318:	e59f0024 	ldr	r0, [pc, #36]	; 45344 <USBFunctionCopy+0xf8>
   4531c:	e3a0203b 	mov	r2, #59	; 0x3b
   45320:	ebffc6c8 	bl	36e48 <uspi_assertion_failed>
   45324:	e5951008 	ldr	r1, [r5, #8]
   45328:	eaffffd9 	b	45294 <USBFunctionCopy+0x48>
   4532c:	000575e4 	.word	0x000575e4
   45330:	000575c0 	.word	0x000575c0
   45334:	00056434 	.word	0x00056434
   45338:	00057604 	.word	0x00057604
   4533c:	00056ae4 	.word	0x00056ae4
   45340:	00056c64 	.word	0x00056c64
   45344:	00057614 	.word	0x00057614

00045348 <_USBFunction>:
   45348:	e92d4038 	push	{r3, r4, r5, lr}
   4534c:	e2504000 	subs	r4, r0, #0
   45350:	0a000009 	beq	4537c <_USBFunction+0x34>
   45354:	e3a05000 	mov	r5, #0
   45358:	e5940008 	ldr	r0, [r4, #8]
   4535c:	e584500c 	str	r5, [r4, #12]
   45360:	eb001ca1 	bl	4c5ec <_USBConfigurationParser>
   45364:	e5940008 	ldr	r0, [r4, #8]
   45368:	ebffc690 	bl	36db0 <free>
   4536c:	e5845008 	str	r5, [r4, #8]
   45370:	e5845004 	str	r5, [r4, #4]
   45374:	e5845000 	str	r5, [r4]
   45378:	e8bd8038 	pop	{r3, r4, r5, pc}
   4537c:	e59f000c 	ldr	r0, [pc, #12]	; 45390 <_USBFunction+0x48>
   45380:	e59f100c 	ldr	r1, [pc, #12]	; 45394 <_USBFunction+0x4c>
   45384:	e3a02044 	mov	r2, #68	; 0x44
   45388:	ebffc6ae 	bl	36e48 <uspi_assertion_failed>
   4538c:	eafffff0 	b	45354 <_USBFunction+0xc>
   45390:	00056434 	.word	0x00056434
   45394:	000575c0 	.word	0x000575c0

00045398 <USBFunctionGetInterfaceName>:
   45398:	e92d4030 	push	{r4, r5, lr}
   4539c:	e2505000 	subs	r5, r0, #0
   453a0:	e24dd00c 	sub	sp, sp, #12
   453a4:	0a000017 	beq	45408 <USBFunctionGetInterfaceName+0x70>
   453a8:	e3a0000c 	mov	r0, #12
   453ac:	ebffc67e 	bl	36dac <malloc>
   453b0:	e2504000 	subs	r4, r0, #0
   453b4:	0a000018 	beq	4541c <USBFunctionGetInterfaceName+0x84>
   453b8:	e59f1070 	ldr	r1, [pc, #112]	; 45430 <USBFunctionGetInterfaceName+0x98>
   453bc:	e1a00004 	mov	r0, r4
   453c0:	eb0008ae 	bl	47680 <String2>
   453c4:	e595100c 	ldr	r1, [r5, #12]
   453c8:	e3510000 	cmp	r1, #0
   453cc:	0a00000a 	beq	453fc <USBFunctionGetInterfaceName+0x64>
   453d0:	e5d12005 	ldrb	r2, [r1, #5]
   453d4:	e2423001 	sub	r3, r2, #1
   453d8:	e6ef3073 	uxtb	r3, r3
   453dc:	e35300fd 	cmp	r3, #253	; 0xfd
   453e0:	8a000005 	bhi	453fc <USBFunctionGetInterfaceName+0x64>
   453e4:	e5d13006 	ldrb	r3, [r1, #6]
   453e8:	e5d11007 	ldrb	r1, [r1, #7]
   453ec:	e1a00004 	mov	r0, r4
   453f0:	e58d1000 	str	r1, [sp]
   453f4:	e59f1038 	ldr	r1, [pc, #56]	; 45434 <USBFunctionGetInterfaceName+0x9c>
   453f8:	eb000b12 	bl	48048 <StringFormat>
   453fc:	e1a00004 	mov	r0, r4
   45400:	e28dd00c 	add	sp, sp, #12
   45404:	e8bd8030 	pop	{r4, r5, pc}
   45408:	e59f0028 	ldr	r0, [pc, #40]	; 45438 <USBFunctionGetInterfaceName+0xa0>
   4540c:	e59f1028 	ldr	r1, [pc, #40]	; 4543c <USBFunctionGetInterfaceName+0xa4>
   45410:	e3a02068 	mov	r2, #104	; 0x68
   45414:	ebffc68b 	bl	36e48 <uspi_assertion_failed>
   45418:	eaffffe2 	b	453a8 <USBFunctionGetInterfaceName+0x10>
   4541c:	e59f001c 	ldr	r0, [pc, #28]	; 45440 <USBFunctionGetInterfaceName+0xa8>
   45420:	e59f1014 	ldr	r1, [pc, #20]	; 4543c <USBFunctionGetInterfaceName+0xa4>
   45424:	e3a0206b 	mov	r2, #107	; 0x6b
   45428:	ebffc686 	bl	36e48 <uspi_assertion_failed>
   4542c:	eaffffe1 	b	453b8 <USBFunctionGetInterfaceName+0x20>
   45430:	00056c2c 	.word	0x00056c2c
   45434:	00057634 	.word	0x00057634
   45438:	00056434 	.word	0x00056434
   4543c:	000575c0 	.word	0x000575c0
   45440:	00056be8 	.word	0x00056be8

00045444 <USBFunctionGetNumEndpoints>:
   45444:	e92d4010 	push	{r4, lr}
   45448:	e2504000 	subs	r4, r0, #0
   4544c:	0a00000b 	beq	45480 <USBFunctionGetNumEndpoints+0x3c>
   45450:	e594300c 	ldr	r3, [r4, #12]
   45454:	e3530000 	cmp	r3, #0
   45458:	0a000001 	beq	45464 <USBFunctionGetNumEndpoints+0x20>
   4545c:	e5d30004 	ldrb	r0, [r3, #4]
   45460:	e8bd8010 	pop	{r4, pc}
   45464:	e59f0028 	ldr	r0, [pc, #40]	; 45494 <USBFunctionGetNumEndpoints+0x50>
   45468:	e59f1028 	ldr	r1, [pc, #40]	; 45498 <USBFunctionGetNumEndpoints+0x54>
   4546c:	e3a0207e 	mov	r2, #126	; 0x7e
   45470:	ebffc674 	bl	36e48 <uspi_assertion_failed>
   45474:	e594300c 	ldr	r3, [r4, #12]
   45478:	e5d30004 	ldrb	r0, [r3, #4]
   4547c:	e8bd8010 	pop	{r4, pc}
   45480:	e59f0014 	ldr	r0, [pc, #20]	; 4549c <USBFunctionGetNumEndpoints+0x58>
   45484:	e59f100c 	ldr	r1, [pc, #12]	; 45498 <USBFunctionGetNumEndpoints+0x54>
   45488:	e3a0207d 	mov	r2, #125	; 0x7d
   4548c:	ebffc66d 	bl	36e48 <uspi_assertion_failed>
   45490:	eaffffee 	b	45450 <USBFunctionGetNumEndpoints+0xc>
   45494:	000575e4 	.word	0x000575e4
   45498:	000575c0 	.word	0x000575c0
   4549c:	00056434 	.word	0x00056434

000454a0 <USBFunctionGetDevice>:
   454a0:	e92d4010 	push	{r4, lr}
   454a4:	e2504000 	subs	r4, r0, #0
   454a8:	0a000008 	beq	454d0 <USBFunctionGetDevice+0x30>
   454ac:	e5940004 	ldr	r0, [r4, #4]
   454b0:	e3500000 	cmp	r0, #0
   454b4:	18bd8010 	popne	{r4, pc}
   454b8:	e59f0024 	ldr	r0, [pc, #36]	; 454e4 <USBFunctionGetDevice+0x44>
   454bc:	e59f1024 	ldr	r1, [pc, #36]	; 454e8 <USBFunctionGetDevice+0x48>
   454c0:	e3a02085 	mov	r2, #133	; 0x85
   454c4:	ebffc65f 	bl	36e48 <uspi_assertion_failed>
   454c8:	e5940004 	ldr	r0, [r4, #4]
   454cc:	e8bd8010 	pop	{r4, pc}
   454d0:	e59f0014 	ldr	r0, [pc, #20]	; 454ec <USBFunctionGetDevice+0x4c>
   454d4:	e59f100c 	ldr	r1, [pc, #12]	; 454e8 <USBFunctionGetDevice+0x48>
   454d8:	e3a02084 	mov	r2, #132	; 0x84
   454dc:	ebffc659 	bl	36e48 <uspi_assertion_failed>
   454e0:	eafffff1 	b	454ac <USBFunctionGetDevice+0xc>
   454e4:	00056ae4 	.word	0x00056ae4
   454e8:	000575c0 	.word	0x000575c0
   454ec:	00056434 	.word	0x00056434

000454f0 <USBFunctionGetEndpoint0>:
   454f0:	e92d4010 	push	{r4, lr}
   454f4:	e2504000 	subs	r4, r0, #0
   454f8:	0a00000b 	beq	4552c <USBFunctionGetEndpoint0+0x3c>
   454fc:	e5940004 	ldr	r0, [r4, #4]
   45500:	e3500000 	cmp	r0, #0
   45504:	0a000001 	beq	45510 <USBFunctionGetEndpoint0+0x20>
   45508:	e8bd4010 	pop	{r4, lr}
   4550c:	eafff47a 	b	426fc <USBDeviceGetEndpoint0>
   45510:	e59f0028 	ldr	r0, [pc, #40]	; 45540 <USBFunctionGetEndpoint0+0x50>
   45514:	e59f1028 	ldr	r1, [pc, #40]	; 45544 <USBFunctionGetEndpoint0+0x54>
   45518:	e3a0208c 	mov	r2, #140	; 0x8c
   4551c:	ebffc649 	bl	36e48 <uspi_assertion_failed>
   45520:	e5940004 	ldr	r0, [r4, #4]
   45524:	e8bd4010 	pop	{r4, lr}
   45528:	eafff473 	b	426fc <USBDeviceGetEndpoint0>
   4552c:	e59f0014 	ldr	r0, [pc, #20]	; 45548 <USBFunctionGetEndpoint0+0x58>
   45530:	e59f100c 	ldr	r1, [pc, #12]	; 45544 <USBFunctionGetEndpoint0+0x54>
   45534:	e3a0208b 	mov	r2, #139	; 0x8b
   45538:	ebffc642 	bl	36e48 <uspi_assertion_failed>
   4553c:	eaffffee 	b	454fc <USBFunctionGetEndpoint0+0xc>
   45540:	00056ae4 	.word	0x00056ae4
   45544:	000575c0 	.word	0x000575c0
   45548:	00056434 	.word	0x00056434

0004554c <USBFunctionGetHost>:
   4554c:	e92d4010 	push	{r4, lr}
   45550:	e2504000 	subs	r4, r0, #0
   45554:	0a00000b 	beq	45588 <USBFunctionGetHost+0x3c>
   45558:	e5940004 	ldr	r0, [r4, #4]
   4555c:	e3500000 	cmp	r0, #0
   45560:	0a000001 	beq	4556c <USBFunctionGetHost+0x20>
   45564:	e8bd4010 	pop	{r4, lr}
   45568:	eafff479 	b	42754 <USBDeviceGetHost>
   4556c:	e59f0028 	ldr	r0, [pc, #40]	; 4559c <USBFunctionGetHost+0x50>
   45570:	e59f1028 	ldr	r1, [pc, #40]	; 455a0 <USBFunctionGetHost+0x54>
   45574:	e3a02093 	mov	r2, #147	; 0x93
   45578:	ebffc632 	bl	36e48 <uspi_assertion_failed>
   4557c:	e5940004 	ldr	r0, [r4, #4]
   45580:	e8bd4010 	pop	{r4, lr}
   45584:	eafff472 	b	42754 <USBDeviceGetHost>
   45588:	e59f0014 	ldr	r0, [pc, #20]	; 455a4 <USBFunctionGetHost+0x58>
   4558c:	e59f100c 	ldr	r1, [pc, #12]	; 455a0 <USBFunctionGetHost+0x54>
   45590:	e3a02092 	mov	r2, #146	; 0x92
   45594:	ebffc62b 	bl	36e48 <uspi_assertion_failed>
   45598:	eaffffee 	b	45558 <USBFunctionGetHost+0xc>
   4559c:	00056ae4 	.word	0x00056ae4
   455a0:	000575c0 	.word	0x000575c0
   455a4:	00056434 	.word	0x00056434

000455a8 <USBFunctionConfigure>:
   455a8:	e92d4070 	push	{r4, r5, r6, lr}
   455ac:	e2505000 	subs	r5, r0, #0
   455b0:	e24dd010 	sub	sp, sp, #16
   455b4:	0a000021 	beq	45640 <USBFunctionConfigure+0x98>
   455b8:	e595300c 	ldr	r3, [r5, #12]
   455bc:	e3530000 	cmp	r3, #0
   455c0:	0a000023 	beq	45654 <USBFunctionConfigure+0xac>
   455c4:	e5d33003 	ldrb	r3, [r3, #3]
   455c8:	e3530000 	cmp	r3, #0
   455cc:	1a000002 	bne	455dc <USBFunctionConfigure+0x34>
   455d0:	e3a00001 	mov	r0, #1
   455d4:	e28dd010 	add	sp, sp, #16
   455d8:	e8bd8070 	pop	{r4, r5, r6, pc}
   455dc:	e1a00005 	mov	r0, r5
   455e0:	ebffffd9 	bl	4554c <USBFunctionGetHost>
   455e4:	e1a06000 	mov	r6, r0
   455e8:	e1a00005 	mov	r0, r5
   455ec:	ebffffbf 	bl	454f0 <USBFunctionGetEndpoint0>
   455f0:	e3a04000 	mov	r4, #0
   455f4:	e595300c 	ldr	r3, [r5, #12]
   455f8:	e1a01000 	mov	r1, r0
   455fc:	e5d32003 	ldrb	r2, [r3, #3]
   45600:	e1a00006 	mov	r0, r6
   45604:	e58d2000 	str	r2, [sp]
   45608:	e5d33002 	ldrb	r3, [r3, #2]
   4560c:	e3a02001 	mov	r2, #1
   45610:	e98d0018 	stmib	sp, {r3, r4}
   45614:	e58d400c 	str	r4, [sp, #12]
   45618:	e3a0300b 	mov	r3, #11
   4561c:	ebffe875 	bl	3f7f8 <DWHCIDeviceControlMessage>
   45620:	e1500004 	cmp	r0, r4
   45624:	aaffffe9 	bge	455d0 <USBFunctionConfigure+0x28>
   45628:	e59f003c 	ldr	r0, [pc, #60]	; 4566c <USBFunctionConfigure+0xc4>
   4562c:	e3a01001 	mov	r1, #1
   45630:	e59f2038 	ldr	r2, [pc, #56]	; 45670 <USBFunctionConfigure+0xc8>
   45634:	ebff7acf 	bl	24178 <LogWrite>
   45638:	e1a00004 	mov	r0, r4
   4563c:	eaffffe4 	b	455d4 <USBFunctionConfigure+0x2c>
   45640:	e59f002c 	ldr	r0, [pc, #44]	; 45674 <USBFunctionConfigure+0xcc>
   45644:	e59f102c 	ldr	r1, [pc, #44]	; 45678 <USBFunctionConfigure+0xd0>
   45648:	e3a02053 	mov	r2, #83	; 0x53
   4564c:	ebffc5fd 	bl	36e48 <uspi_assertion_failed>
   45650:	eaffffd8 	b	455b8 <USBFunctionConfigure+0x10>
   45654:	e59f0020 	ldr	r0, [pc, #32]	; 4567c <USBFunctionConfigure+0xd4>
   45658:	e59f1018 	ldr	r1, [pc, #24]	; 45678 <USBFunctionConfigure+0xd0>
   4565c:	e3a02055 	mov	r2, #85	; 0x55
   45660:	ebffc5f8 	bl	36e48 <uspi_assertion_failed>
   45664:	e595300c 	ldr	r3, [r5, #12]
   45668:	eaffffd5 	b	455c4 <USBFunctionConfigure+0x1c>
   4566c:	000575b8 	.word	0x000575b8
   45670:	00057470 	.word	0x00057470
   45674:	00056434 	.word	0x00056434
   45678:	000575c0 	.word	0x000575c0
   4567c:	000575e4 	.word	0x000575e4

00045680 <USBFunctionGetDescriptor>:
   45680:	e92d4038 	push	{r3, r4, r5, lr}
   45684:	e2504000 	subs	r4, r0, #0
   45688:	e1a05001 	mov	r5, r1
   4568c:	0a00000d 	beq	456c8 <USBFunctionGetDescriptor+0x48>
   45690:	e5940008 	ldr	r0, [r4, #8]
   45694:	e3500000 	cmp	r0, #0
   45698:	0a000002 	beq	456a8 <USBFunctionGetDescriptor+0x28>
   4569c:	e1a01005 	mov	r1, r5
   456a0:	e8bd4038 	pop	{r3, r4, r5, lr}
   456a4:	ea001bea 	b	4c654 <USBConfigurationParserGetDescriptor>
   456a8:	e59f002c 	ldr	r0, [pc, #44]	; 456dc <USBFunctionGetDescriptor+0x5c>
   456ac:	e59f102c 	ldr	r1, [pc, #44]	; 456e0 <USBFunctionGetDescriptor+0x60>
   456b0:	e3a0209a 	mov	r2, #154	; 0x9a
   456b4:	ebffc5e3 	bl	36e48 <uspi_assertion_failed>
   456b8:	e5940008 	ldr	r0, [r4, #8]
   456bc:	e1a01005 	mov	r1, r5
   456c0:	e8bd4038 	pop	{r3, r4, r5, lr}
   456c4:	ea001be2 	b	4c654 <USBConfigurationParserGetDescriptor>
   456c8:	e59f0014 	ldr	r0, [pc, #20]	; 456e4 <USBFunctionGetDescriptor+0x64>
   456cc:	e59f100c 	ldr	r1, [pc, #12]	; 456e0 <USBFunctionGetDescriptor+0x60>
   456d0:	e3a02099 	mov	r2, #153	; 0x99
   456d4:	ebffc5db 	bl	36e48 <uspi_assertion_failed>
   456d8:	eaffffec 	b	45690 <USBFunctionGetDescriptor+0x10>
   456dc:	00056c64 	.word	0x00056c64
   456e0:	000575c0 	.word	0x000575c0
   456e4:	00056434 	.word	0x00056434

000456e8 <USBFunctionConfigurationError>:
   456e8:	e92d4038 	push	{r3, r4, r5, lr}
   456ec:	e2505000 	subs	r5, r0, #0
   456f0:	e1a04001 	mov	r4, r1
   456f4:	0a000010 	beq	4573c <USBFunctionConfigurationError+0x54>
   456f8:	e5953008 	ldr	r3, [r5, #8]
   456fc:	e3530000 	cmp	r3, #0
   45700:	0a000012 	beq	45750 <USBFunctionConfigurationError+0x68>
   45704:	e3540000 	cmp	r4, #0
   45708:	0a000003 	beq	4571c <USBFunctionConfigurationError+0x34>
   4570c:	e5950008 	ldr	r0, [r5, #8]
   45710:	e1a01004 	mov	r1, r4
   45714:	e8bd4038 	pop	{r3, r4, r5, lr}
   45718:	ea001c1f 	b	4c79c <USBConfigurationParserError>
   4571c:	e59f0040 	ldr	r0, [pc, #64]	; 45764 <USBFunctionConfigurationError+0x7c>
   45720:	e59f1040 	ldr	r1, [pc, #64]	; 45768 <USBFunctionConfigurationError+0x80>
   45724:	e3a020a2 	mov	r2, #162	; 0xa2
   45728:	ebffc5c6 	bl	36e48 <uspi_assertion_failed>
   4572c:	e5950008 	ldr	r0, [r5, #8]
   45730:	e1a01004 	mov	r1, r4
   45734:	e8bd4038 	pop	{r3, r4, r5, lr}
   45738:	ea001c17 	b	4c79c <USBConfigurationParserError>
   4573c:	e59f0028 	ldr	r0, [pc, #40]	; 4576c <USBFunctionConfigurationError+0x84>
   45740:	e59f1020 	ldr	r1, [pc, #32]	; 45768 <USBFunctionConfigurationError+0x80>
   45744:	e3a020a0 	mov	r2, #160	; 0xa0
   45748:	ebffc5be 	bl	36e48 <uspi_assertion_failed>
   4574c:	eaffffe9 	b	456f8 <USBFunctionConfigurationError+0x10>
   45750:	e59f0018 	ldr	r0, [pc, #24]	; 45770 <USBFunctionConfigurationError+0x88>
   45754:	e59f100c 	ldr	r1, [pc, #12]	; 45768 <USBFunctionConfigurationError+0x80>
   45758:	e3a020a1 	mov	r2, #161	; 0xa1
   4575c:	ebffc5b9 	bl	36e48 <uspi_assertion_failed>
   45760:	eaffffe7 	b	45704 <USBFunctionConfigurationError+0x1c>
   45764:	00057640 	.word	0x00057640
   45768:	000575c0 	.word	0x000575c0
   4576c:	00056434 	.word	0x00056434
   45770:	00056c64 	.word	0x00056c64

00045774 <USBFunctionSelectInterfaceByClass>:
   45774:	e92d40f8 	push	{r3, r4, r5, r6, r7, lr}
   45778:	e2504000 	subs	r4, r0, #0
   4577c:	e1a05001 	mov	r5, r1
   45780:	e1a06002 	mov	r6, r2
   45784:	e1a07003 	mov	r7, r3
   45788:	0a00001f 	beq	4580c <USBFunctionSelectInterfaceByClass+0x98>
   4578c:	e594300c 	ldr	r3, [r4, #12]
   45790:	e3530000 	cmp	r3, #0
   45794:	0a000021 	beq	45820 <USBFunctionSelectInterfaceByClass+0xac>
   45798:	e5943008 	ldr	r3, [r4, #8]
   4579c:	e3530000 	cmp	r3, #0
   457a0:	0a000023 	beq	45834 <USBFunctionSelectInterfaceByClass+0xc0>
   457a4:	e5943004 	ldr	r3, [r4, #4]
   457a8:	e3530000 	cmp	r3, #0
   457ac:	0a000025 	beq	45848 <USBFunctionSelectInterfaceByClass+0xd4>
   457b0:	e594000c 	ldr	r0, [r4, #12]
   457b4:	ea000008 	b	457dc <USBFunctionSelectInterfaceByClass+0x68>
   457b8:	e3a01004 	mov	r1, #4
   457bc:	e5940004 	ldr	r0, [r4, #4]
   457c0:	ebfff423 	bl	42854 <USBDeviceGetDescriptor>
   457c4:	e5940008 	ldr	r0, [r4, #8]
   457c8:	e3a01004 	mov	r1, #4
   457cc:	eb001ba0 	bl	4c654 <USBConfigurationParserGetDescriptor>
   457d0:	e3500000 	cmp	r0, #0
   457d4:	e584000c 	str	r0, [r4, #12]
   457d8:	0a00000a 	beq	45808 <USBFunctionSelectInterfaceByClass+0x94>
   457dc:	e5d03005 	ldrb	r3, [r0, #5]
   457e0:	e1530005 	cmp	r3, r5
   457e4:	1afffff3 	bne	457b8 <USBFunctionSelectInterfaceByClass+0x44>
   457e8:	e5d03006 	ldrb	r3, [r0, #6]
   457ec:	e1530006 	cmp	r3, r6
   457f0:	1afffff0 	bne	457b8 <USBFunctionSelectInterfaceByClass+0x44>
   457f4:	e5d03007 	ldrb	r3, [r0, #7]
   457f8:	e1530007 	cmp	r3, r7
   457fc:	1affffed 	bne	457b8 <USBFunctionSelectInterfaceByClass+0x44>
   45800:	e3a00001 	mov	r0, #1
   45804:	e8bd80f8 	pop	{r3, r4, r5, r6, r7, pc}
   45808:	e8bd80f8 	pop	{r3, r4, r5, r6, r7, pc}
   4580c:	e59f0048 	ldr	r0, [pc, #72]	; 4585c <USBFunctionSelectInterfaceByClass+0xe8>
   45810:	e59f1048 	ldr	r1, [pc, #72]	; 45860 <USBFunctionSelectInterfaceByClass+0xec>
   45814:	e3a020a8 	mov	r2, #168	; 0xa8
   45818:	ebffc58a 	bl	36e48 <uspi_assertion_failed>
   4581c:	eaffffda 	b	4578c <USBFunctionSelectInterfaceByClass+0x18>
   45820:	e59f003c 	ldr	r0, [pc, #60]	; 45864 <USBFunctionSelectInterfaceByClass+0xf0>
   45824:	e59f1034 	ldr	r1, [pc, #52]	; 45860 <USBFunctionSelectInterfaceByClass+0xec>
   45828:	e3a020a9 	mov	r2, #169	; 0xa9
   4582c:	ebffc585 	bl	36e48 <uspi_assertion_failed>
   45830:	eaffffd8 	b	45798 <USBFunctionSelectInterfaceByClass+0x24>
   45834:	e59f002c 	ldr	r0, [pc, #44]	; 45868 <USBFunctionSelectInterfaceByClass+0xf4>
   45838:	e59f1020 	ldr	r1, [pc, #32]	; 45860 <USBFunctionSelectInterfaceByClass+0xec>
   4583c:	e3a020aa 	mov	r2, #170	; 0xaa
   45840:	ebffc580 	bl	36e48 <uspi_assertion_failed>
   45844:	eaffffd6 	b	457a4 <USBFunctionSelectInterfaceByClass+0x30>
   45848:	e59f001c 	ldr	r0, [pc, #28]	; 4586c <USBFunctionSelectInterfaceByClass+0xf8>
   4584c:	e59f100c 	ldr	r1, [pc, #12]	; 45860 <USBFunctionSelectInterfaceByClass+0xec>
   45850:	e3a020ab 	mov	r2, #171	; 0xab
   45854:	ebffc57b 	bl	36e48 <uspi_assertion_failed>
   45858:	eaffffd4 	b	457b0 <USBFunctionSelectInterfaceByClass+0x3c>
   4585c:	00056434 	.word	0x00056434
   45860:	000575c0 	.word	0x000575c0
   45864:	000575e4 	.word	0x000575e4
   45868:	00056c64 	.word	0x00056c64
   4586c:	00056ae4 	.word	0x00056ae4

00045870 <USBFunctionGetInterfaceNumber>:
   45870:	e92d4010 	push	{r4, lr}
   45874:	e2504000 	subs	r4, r0, #0
   45878:	0a00000b 	beq	458ac <USBFunctionGetInterfaceNumber+0x3c>
   4587c:	e594300c 	ldr	r3, [r4, #12]
   45880:	e3530000 	cmp	r3, #0
   45884:	0a000001 	beq	45890 <USBFunctionGetInterfaceNumber+0x20>
   45888:	e5d30002 	ldrb	r0, [r3, #2]
   4588c:	e8bd8010 	pop	{r4, pc}
   45890:	e59f0028 	ldr	r0, [pc, #40]	; 458c0 <USBFunctionGetInterfaceNumber+0x50>
   45894:	e59f1028 	ldr	r1, [pc, #40]	; 458c4 <USBFunctionGetInterfaceNumber+0x54>
   45898:	e3a020c2 	mov	r2, #194	; 0xc2
   4589c:	ebffc569 	bl	36e48 <uspi_assertion_failed>
   458a0:	e594300c 	ldr	r3, [r4, #12]
   458a4:	e5d30002 	ldrb	r0, [r3, #2]
   458a8:	e8bd8010 	pop	{r4, pc}
   458ac:	e59f0014 	ldr	r0, [pc, #20]	; 458c8 <USBFunctionGetInterfaceNumber+0x58>
   458b0:	e59f100c 	ldr	r1, [pc, #12]	; 458c4 <USBFunctionGetInterfaceNumber+0x54>
   458b4:	e3a020c1 	mov	r2, #193	; 0xc1
   458b8:	ebffc562 	bl	36e48 <uspi_assertion_failed>
   458bc:	eaffffee 	b	4587c <USBFunctionGetInterfaceNumber+0xc>
   458c0:	000575e4 	.word	0x000575e4
   458c4:	000575c0 	.word	0x000575c0
   458c8:	00056434 	.word	0x00056434

000458cc <USBFunctionGetInterfaceClass>:
   458cc:	e92d4010 	push	{r4, lr}
   458d0:	e2504000 	subs	r4, r0, #0
   458d4:	0a00000b 	beq	45908 <USBFunctionGetInterfaceClass+0x3c>
   458d8:	e594300c 	ldr	r3, [r4, #12]
   458dc:	e3530000 	cmp	r3, #0
   458e0:	0a000001 	beq	458ec <USBFunctionGetInterfaceClass+0x20>
   458e4:	e5d30005 	ldrb	r0, [r3, #5]
   458e8:	e8bd8010 	pop	{r4, pc}
   458ec:	e59f0028 	ldr	r0, [pc, #40]	; 4591c <USBFunctionGetInterfaceClass+0x50>
   458f0:	e59f1028 	ldr	r1, [pc, #40]	; 45920 <USBFunctionGetInterfaceClass+0x54>
   458f4:	e3a020c9 	mov	r2, #201	; 0xc9
   458f8:	ebffc552 	bl	36e48 <uspi_assertion_failed>
   458fc:	e594300c 	ldr	r3, [r4, #12]
   45900:	e5d30005 	ldrb	r0, [r3, #5]
   45904:	e8bd8010 	pop	{r4, pc}
   45908:	e59f0014 	ldr	r0, [pc, #20]	; 45924 <USBFunctionGetInterfaceClass+0x58>
   4590c:	e59f100c 	ldr	r1, [pc, #12]	; 45920 <USBFunctionGetInterfaceClass+0x54>
   45910:	e3a020c8 	mov	r2, #200	; 0xc8
   45914:	ebffc54b 	bl	36e48 <uspi_assertion_failed>
   45918:	eaffffee 	b	458d8 <USBFunctionGetInterfaceClass+0xc>
   4591c:	000575e4 	.word	0x000575e4
   45920:	000575c0 	.word	0x000575c0
   45924:	00056434 	.word	0x00056434

00045928 <USBFunctionGetInterfaceSubClass>:
   45928:	e92d4010 	push	{r4, lr}
   4592c:	e2504000 	subs	r4, r0, #0
   45930:	0a00000b 	beq	45964 <USBFunctionGetInterfaceSubClass+0x3c>
   45934:	e594300c 	ldr	r3, [r4, #12]
   45938:	e3530000 	cmp	r3, #0
   4593c:	0a000001 	beq	45948 <USBFunctionGetInterfaceSubClass+0x20>
   45940:	e5d30006 	ldrb	r0, [r3, #6]
   45944:	e8bd8010 	pop	{r4, pc}
   45948:	e59f0028 	ldr	r0, [pc, #40]	; 45978 <USBFunctionGetInterfaceSubClass+0x50>
   4594c:	e59f1028 	ldr	r1, [pc, #40]	; 4597c <USBFunctionGetInterfaceSubClass+0x54>
   45950:	e3a020d0 	mov	r2, #208	; 0xd0
   45954:	ebffc53b 	bl	36e48 <uspi_assertion_failed>
   45958:	e594300c 	ldr	r3, [r4, #12]
   4595c:	e5d30006 	ldrb	r0, [r3, #6]
   45960:	e8bd8010 	pop	{r4, pc}
   45964:	e59f0014 	ldr	r0, [pc, #20]	; 45980 <USBFunctionGetInterfaceSubClass+0x58>
   45968:	e59f100c 	ldr	r1, [pc, #12]	; 4597c <USBFunctionGetInterfaceSubClass+0x54>
   4596c:	e3a020cf 	mov	r2, #207	; 0xcf
   45970:	ebffc534 	bl	36e48 <uspi_assertion_failed>
   45974:	eaffffee 	b	45934 <USBFunctionGetInterfaceSubClass+0xc>
   45978:	000575e4 	.word	0x000575e4
   4597c:	000575c0 	.word	0x000575c0
   45980:	00056434 	.word	0x00056434

00045984 <USBFunctionGetInterfaceProtocol>:
   45984:	e92d4010 	push	{r4, lr}
   45988:	e2504000 	subs	r4, r0, #0
   4598c:	0a00000b 	beq	459c0 <USBFunctionGetInterfaceProtocol+0x3c>
   45990:	e594300c 	ldr	r3, [r4, #12]
   45994:	e3530000 	cmp	r3, #0
   45998:	0a000001 	beq	459a4 <USBFunctionGetInterfaceProtocol+0x20>
   4599c:	e5d30007 	ldrb	r0, [r3, #7]
   459a0:	e8bd8010 	pop	{r4, pc}
   459a4:	e59f0028 	ldr	r0, [pc, #40]	; 459d4 <USBFunctionGetInterfaceProtocol+0x50>
   459a8:	e59f1028 	ldr	r1, [pc, #40]	; 459d8 <USBFunctionGetInterfaceProtocol+0x54>
   459ac:	e3a020d7 	mov	r2, #215	; 0xd7
   459b0:	ebffc524 	bl	36e48 <uspi_assertion_failed>
   459b4:	e594300c 	ldr	r3, [r4, #12]
   459b8:	e5d30007 	ldrb	r0, [r3, #7]
   459bc:	e8bd8010 	pop	{r4, pc}
   459c0:	e59f0014 	ldr	r0, [pc, #20]	; 459dc <USBFunctionGetInterfaceProtocol+0x58>
   459c4:	e59f100c 	ldr	r1, [pc, #12]	; 459d8 <USBFunctionGetInterfaceProtocol+0x54>
   459c8:	e3a020d6 	mov	r2, #214	; 0xd6
   459cc:	ebffc51d 	bl	36e48 <uspi_assertion_failed>
   459d0:	eaffffee 	b	45990 <USBFunctionGetInterfaceProtocol+0xc>
   459d4:	000575e4 	.word	0x000575e4
   459d8:	000575c0 	.word	0x000575c0
   459dc:	00056434 	.word	0x00056434

000459e0 <SMSC951xDevice>:
   459e0:	e92d4038 	push	{r3, r4, r5, lr}
   459e4:	e2504000 	subs	r4, r0, #0
   459e8:	e1a05001 	mov	r5, r1
   459ec:	0a000012 	beq	45a3c <SMSC951xDevice+0x5c>
   459f0:	e1a01005 	mov	r1, r5
   459f4:	e1a00004 	mov	r0, r4
   459f8:	ebfffe13 	bl	4524c <USBFunctionCopy>
   459fc:	e3a03000 	mov	r3, #0
   45a00:	e59f2048 	ldr	r2, [pc, #72]	; 45a50 <SMSC951xDevice+0x70>
   45a04:	e5843010 	str	r3, [r4, #16]
   45a08:	e5843014 	str	r3, [r4, #20]
   45a0c:	e5843024 	str	r3, [r4, #36]	; 0x24
   45a10:	e5842000 	str	r2, [r4]
   45a14:	e3a00d19 	mov	r0, #1600	; 0x640
   45a18:	ebffc4e3 	bl	36dac <malloc>
   45a1c:	e3500000 	cmp	r0, #0
   45a20:	e5840024 	str	r0, [r4, #36]	; 0x24
   45a24:	18bd8038 	popne	{r3, r4, r5, pc}
   45a28:	e59f0024 	ldr	r0, [pc, #36]	; 45a54 <SMSC951xDevice+0x74>
   45a2c:	e59f1024 	ldr	r1, [pc, #36]	; 45a58 <SMSC951xDevice+0x78>
   45a30:	e3a02093 	mov	r2, #147	; 0x93
   45a34:	e8bd4038 	pop	{r3, r4, r5, lr}
   45a38:	eaffc502 	b	36e48 <uspi_assertion_failed>
   45a3c:	e59f0018 	ldr	r0, [pc, #24]	; 45a5c <SMSC951xDevice+0x7c>
   45a40:	e59f1010 	ldr	r1, [pc, #16]	; 45a58 <SMSC951xDevice+0x78>
   45a44:	e3a02089 	mov	r2, #137	; 0x89
   45a48:	ebffc4fe 	bl	36e48 <uspi_assertion_failed>
   45a4c:	eaffffe7 	b	459f0 <SMSC951xDevice+0x10>
   45a50:	00045e70 	.word	0x00045e70
   45a54:	00057668 	.word	0x00057668
   45a58:	0005765c 	.word	0x0005765c
   45a5c:	00056434 	.word	0x00056434

00045a60 <_SMSC951xDevice>:
   45a60:	e92d4010 	push	{r4, lr}
   45a64:	e2504000 	subs	r4, r0, #0
   45a68:	0a000018 	beq	45ad0 <_SMSC951xDevice+0x70>
   45a6c:	e5940024 	ldr	r0, [r4, #36]	; 0x24
   45a70:	e3500000 	cmp	r0, #0
   45a74:	0a000002 	beq	45a84 <_SMSC951xDevice+0x24>
   45a78:	ebffc4cc 	bl	36db0 <free>
   45a7c:	e3a03000 	mov	r3, #0
   45a80:	e5843024 	str	r3, [r4, #36]	; 0x24
   45a84:	e5940014 	ldr	r0, [r4, #20]
   45a88:	e3500000 	cmp	r0, #0
   45a8c:	0a000004 	beq	45aa4 <_SMSC951xDevice+0x44>
   45a90:	ebfff787 	bl	438b4 <_USBEndpoint>
   45a94:	e5940014 	ldr	r0, [r4, #20]
   45a98:	ebffc4c4 	bl	36db0 <free>
   45a9c:	e3a03000 	mov	r3, #0
   45aa0:	e5843014 	str	r3, [r4, #20]
   45aa4:	e5940010 	ldr	r0, [r4, #16]
   45aa8:	e3500000 	cmp	r0, #0
   45aac:	0a000004 	beq	45ac4 <_SMSC951xDevice+0x64>
   45ab0:	ebfff77f 	bl	438b4 <_USBEndpoint>
   45ab4:	e5940010 	ldr	r0, [r4, #16]
   45ab8:	ebffc4bc 	bl	36db0 <free>
   45abc:	e3a03000 	mov	r3, #0
   45ac0:	e5843010 	str	r3, [r4, #16]
   45ac4:	e1a00004 	mov	r0, r4
   45ac8:	e8bd4010 	pop	{r4, lr}
   45acc:	eafffe1d 	b	45348 <_USBFunction>
   45ad0:	e59f000c 	ldr	r0, [pc, #12]	; 45ae4 <_SMSC951xDevice+0x84>
   45ad4:	e59f100c 	ldr	r1, [pc, #12]	; 45ae8 <_SMSC951xDevice+0x88>
   45ad8:	e3a02098 	mov	r2, #152	; 0x98
   45adc:	ebffc4d9 	bl	36e48 <uspi_assertion_failed>
   45ae0:	eaffffe1 	b	45a6c <_SMSC951xDevice+0xc>
   45ae4:	00056434 	.word	0x00056434
   45ae8:	0005765c 	.word	0x0005765c

00045aec <SMSC951xDeviceGetMACAddress>:
   45aec:	e92d4010 	push	{r4, lr}
   45af0:	e2504000 	subs	r4, r0, #0
   45af4:	0a000001 	beq	45b00 <SMSC951xDeviceGetMACAddress+0x14>
   45af8:	e2840018 	add	r0, r4, #24
   45afc:	e8bd8010 	pop	{r4, pc}
   45b00:	e59f0010 	ldr	r0, [pc, #16]	; 45b18 <SMSC951xDeviceGetMACAddress+0x2c>
   45b04:	e59f1010 	ldr	r1, [pc, #16]	; 45b1c <SMSC951xDeviceGetMACAddress+0x30>
   45b08:	e59f2010 	ldr	r2, [pc, #16]	; 45b20 <SMSC951xDeviceGetMACAddress+0x34>
   45b0c:	ebffc4cd 	bl	36e48 <uspi_assertion_failed>
   45b10:	e2840018 	add	r0, r4, #24
   45b14:	e8bd8010 	pop	{r4, pc}
   45b18:	00056434 	.word	0x00056434
   45b1c:	0005765c 	.word	0x0005765c
   45b20:	00000137 	.word	0x00000137

00045b24 <SMSC951xDeviceSendFrame>:
   45b24:	e92d4070 	push	{r4, r5, r6, lr}
   45b28:	e2504000 	subs	r4, r0, #0
   45b2c:	e1a06001 	mov	r6, r1
   45b30:	e1a05002 	mov	r5, r2
   45b34:	0a00001d 	beq	45bb0 <SMSC951xDeviceSendFrame+0x8c>
   45b38:	e59f30c0 	ldr	r3, [pc, #192]	; 45c00 <SMSC951xDeviceSendFrame+0xdc>
   45b3c:	e1550003 	cmp	r5, r3
   45b40:	8a000018 	bhi	45ba8 <SMSC951xDeviceSendFrame+0x84>
   45b44:	e5943024 	ldr	r3, [r4, #36]	; 0x24
   45b48:	e3530000 	cmp	r3, #0
   45b4c:	0a00001c 	beq	45bc4 <SMSC951xDeviceSendFrame+0xa0>
   45b50:	e3560000 	cmp	r6, #0
   45b54:	0a000024 	beq	45bec <SMSC951xDeviceSendFrame+0xc8>
   45b58:	e5940024 	ldr	r0, [r4, #36]	; 0x24
   45b5c:	e1a02005 	mov	r2, r5
   45b60:	e1a01006 	mov	r1, r6
   45b64:	e2800008 	add	r0, r0, #8
   45b68:	eb000955 	bl	480c4 <uspi_memcpy>
   45b6c:	e5942014 	ldr	r2, [r4, #20]
   45b70:	e5943024 	ldr	r3, [r4, #36]	; 0x24
   45b74:	e3520000 	cmp	r2, #0
   45b78:	e3852a03 	orr	r2, r5, #12288	; 0x3000
   45b7c:	e8830024 	stm	r3, {r2, r5}
   45b80:	0a000014 	beq	45bd8 <SMSC951xDeviceSendFrame+0xb4>
   45b84:	e1a00004 	mov	r0, r4
   45b88:	ebfffe6f 	bl	4554c <USBFunctionGetHost>
   45b8c:	e2853008 	add	r3, r5, #8
   45b90:	e5941014 	ldr	r1, [r4, #20]
   45b94:	e5942024 	ldr	r2, [r4, #36]	; 0x24
   45b98:	ebffe79f 	bl	3fa1c <DWHCIDeviceTransfer>
   45b9c:	e1e00000 	mvn	r0, r0
   45ba0:	e1a00fa0 	lsr	r0, r0, #31
   45ba4:	e8bd8070 	pop	{r4, r5, r6, pc}
   45ba8:	e3a00000 	mov	r0, #0
   45bac:	e8bd8070 	pop	{r4, r5, r6, pc}
   45bb0:	e59f004c 	ldr	r0, [pc, #76]	; 45c04 <SMSC951xDeviceSendFrame+0xe0>
   45bb4:	e59f104c 	ldr	r1, [pc, #76]	; 45c08 <SMSC951xDeviceSendFrame+0xe4>
   45bb8:	e59f204c 	ldr	r2, [pc, #76]	; 45c0c <SMSC951xDeviceSendFrame+0xe8>
   45bbc:	ebffc4a1 	bl	36e48 <uspi_assertion_failed>
   45bc0:	eaffffdc 	b	45b38 <SMSC951xDeviceSendFrame+0x14>
   45bc4:	e59f0044 	ldr	r0, [pc, #68]	; 45c10 <SMSC951xDeviceSendFrame+0xec>
   45bc8:	e59f1038 	ldr	r1, [pc, #56]	; 45c08 <SMSC951xDeviceSendFrame+0xe4>
   45bcc:	e59f2040 	ldr	r2, [pc, #64]	; 45c14 <SMSC951xDeviceSendFrame+0xf0>
   45bd0:	ebffc49c 	bl	36e48 <uspi_assertion_failed>
   45bd4:	eaffffdd 	b	45b50 <SMSC951xDeviceSendFrame+0x2c>
   45bd8:	e59f0038 	ldr	r0, [pc, #56]	; 45c18 <SMSC951xDeviceSendFrame+0xf4>
   45bdc:	e59f1024 	ldr	r1, [pc, #36]	; 45c08 <SMSC951xDeviceSendFrame+0xe4>
   45be0:	e3a02f53 	mov	r2, #332	; 0x14c
   45be4:	ebffc497 	bl	36e48 <uspi_assertion_failed>
   45be8:	eaffffe5 	b	45b84 <SMSC951xDeviceSendFrame+0x60>
   45bec:	e59f0028 	ldr	r0, [pc, #40]	; 45c1c <SMSC951xDeviceSendFrame+0xf8>
   45bf0:	e59f1010 	ldr	r1, [pc, #16]	; 45c08 <SMSC951xDeviceSendFrame+0xe4>
   45bf4:	e59f2024 	ldr	r2, [pc, #36]	; 45c20 <SMSC951xDeviceSendFrame+0xfc>
   45bf8:	ebffc492 	bl	36e48 <uspi_assertion_failed>
   45bfc:	eaffffd5 	b	45b58 <SMSC951xDeviceSendFrame+0x34>
   45c00:	00000637 	.word	0x00000637
   45c04:	00056434 	.word	0x00056434
   45c08:	0005765c 	.word	0x0005765c
   45c0c:	0000013e 	.word	0x0000013e
   45c10:	00057668 	.word	0x00057668
   45c14:	00000145 	.word	0x00000145
   45c18:	00057680 	.word	0x00057680
   45c1c:	000579e4 	.word	0x000579e4
   45c20:	00000146 	.word	0x00000146

00045c24 <SMSC951xDeviceReceiveFrame>:
   45c24:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   45c28:	e2505000 	subs	r5, r0, #0
   45c2c:	e24dd034 	sub	sp, sp, #52	; 0x34
   45c30:	e1a06001 	mov	r6, r1
   45c34:	e1a07002 	mov	r7, r2
   45c38:	0a000045 	beq	45d54 <SMSC951xDeviceReceiveFrame+0x130>
   45c3c:	e5953010 	ldr	r3, [r5, #16]
   45c40:	e3530000 	cmp	r3, #0
   45c44:	0a000047 	beq	45d68 <SMSC951xDeviceReceiveFrame+0x144>
   45c48:	e3560000 	cmp	r6, #0
   45c4c:	0a00004a 	beq	45d7c <SMSC951xDeviceReceiveFrame+0x158>
   45c50:	e3a04000 	mov	r4, #0
   45c54:	e5951010 	ldr	r1, [r5, #16]
   45c58:	e1a02006 	mov	r2, r6
   45c5c:	e3a03d19 	mov	r3, #1600	; 0x640
   45c60:	e28d000c 	add	r0, sp, #12
   45c64:	e58d4000 	str	r4, [sp]
   45c68:	ebfff7f0 	bl	43c30 <USBRequest>
   45c6c:	e1a00005 	mov	r0, r5
   45c70:	ebfffe35 	bl	4554c <USBFunctionGetHost>
   45c74:	e28d100c 	add	r1, sp, #12
   45c78:	ebffe648 	bl	3f5a0 <DWHCIDeviceSubmitBlockingRequest>
   45c7c:	e1500004 	cmp	r0, r4
   45c80:	0a000025 	beq	45d1c <SMSC951xDeviceReceiveFrame+0xf8>
   45c84:	e28d000c 	add	r0, sp, #12
   45c88:	ebfff865 	bl	43e24 <USBRequestGetResultLength>
   45c8c:	e3500003 	cmp	r0, #3
   45c90:	9a000021 	bls	45d1c <SMSC951xDeviceReceiveFrame+0xf8>
   45c94:	e5963000 	ldr	r3, [r6]
   45c98:	e59f2104 	ldr	r2, [pc, #260]	; 45da4 <SMSC951xDeviceReceiveFrame+0x180>
   45c9c:	e0022003 	and	r2, r2, r3
   45ca0:	e3520000 	cmp	r2, #0
   45ca4:	1a000021 	bne	45d30 <SMSC951xDeviceReceiveFrame+0x10c>
   45ca8:	e59f20f8 	ldr	r2, [pc, #248]	; 45da8 <SMSC951xDeviceReceiveFrame+0x184>
   45cac:	e2400004 	sub	r0, r0, #4
   45cb0:	e0022003 	and	r2, r2, r3
   45cb4:	e1a04822 	lsr	r4, r2, #16
   45cb8:	e1500004 	cmp	r0, r4
   45cbc:	0a000003 	beq	45cd0 <SMSC951xDeviceReceiveFrame+0xac>
   45cc0:	e59f00e4 	ldr	r0, [pc, #228]	; 45dac <SMSC951xDeviceReceiveFrame+0x188>
   45cc4:	e59f10e4 	ldr	r1, [pc, #228]	; 45db0 <SMSC951xDeviceReceiveFrame+0x18c>
   45cc8:	e59f20e4 	ldr	r2, [pc, #228]	; 45db4 <SMSC951xDeviceReceiveFrame+0x190>
   45ccc:	ebffc45d 	bl	36e48 <uspi_assertion_failed>
   45cd0:	e3540004 	cmp	r4, #4
   45cd4:	9a00000c 	bls	45d0c <SMSC951xDeviceReceiveFrame+0xe8>
   45cd8:	e2444004 	sub	r4, r4, #4
   45cdc:	e1a02004 	mov	r2, r4
   45ce0:	e1a00006 	mov	r0, r6
   45ce4:	e2861004 	add	r1, r6, #4
   45ce8:	eb0008f5 	bl	480c4 <uspi_memcpy>
   45cec:	e3570000 	cmp	r7, #0
   45cf0:	0a000026 	beq	45d90 <SMSC951xDeviceReceiveFrame+0x16c>
   45cf4:	e28d000c 	add	r0, sp, #12
   45cf8:	e5874000 	str	r4, [r7]
   45cfc:	ebfff7fb 	bl	43cf0 <_USBRequest>
   45d00:	e3a00001 	mov	r0, #1
   45d04:	e28dd034 	add	sp, sp, #52	; 0x34
   45d08:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   45d0c:	e59f00a4 	ldr	r0, [pc, #164]	; 45db8 <SMSC951xDeviceReceiveFrame+0x194>
   45d10:	e59f1098 	ldr	r1, [pc, #152]	; 45db0 <SMSC951xDeviceReceiveFrame+0x18c>
   45d14:	e3a02f5d 	mov	r2, #372	; 0x174
   45d18:	ebffc44a 	bl	36e48 <uspi_assertion_failed>
   45d1c:	e28d000c 	add	r0, sp, #12
   45d20:	ebfff7f2 	bl	43cf0 <_USBRequest>
   45d24:	e3a00000 	mov	r0, #0
   45d28:	e28dd034 	add	sp, sp, #52	; 0x34
   45d2c:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   45d30:	e3a01002 	mov	r1, #2
   45d34:	e59f2080 	ldr	r2, [pc, #128]	; 45dbc <SMSC951xDeviceReceiveFrame+0x198>
   45d38:	e59f0080 	ldr	r0, [pc, #128]	; 45dc0 <SMSC951xDeviceReceiveFrame+0x19c>
   45d3c:	ebff790d 	bl	24178 <LogWrite>
   45d40:	e28d000c 	add	r0, sp, #12
   45d44:	ebfff7e9 	bl	43cf0 <_USBRequest>
   45d48:	e1a00004 	mov	r0, r4
   45d4c:	e28dd034 	add	sp, sp, #52	; 0x34
   45d50:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   45d54:	e59f0068 	ldr	r0, [pc, #104]	; 45dc4 <SMSC951xDeviceReceiveFrame+0x1a0>
   45d58:	e59f1050 	ldr	r1, [pc, #80]	; 45db0 <SMSC951xDeviceReceiveFrame+0x18c>
   45d5c:	e59f2064 	ldr	r2, [pc, #100]	; 45dc8 <SMSC951xDeviceReceiveFrame+0x1a4>
   45d60:	ebffc438 	bl	36e48 <uspi_assertion_failed>
   45d64:	eaffffb4 	b	45c3c <SMSC951xDeviceReceiveFrame+0x18>
   45d68:	e59f005c 	ldr	r0, [pc, #92]	; 45dcc <SMSC951xDeviceReceiveFrame+0x1a8>
   45d6c:	e59f103c 	ldr	r1, [pc, #60]	; 45db0 <SMSC951xDeviceReceiveFrame+0x18c>
   45d70:	e3a02f55 	mov	r2, #340	; 0x154
   45d74:	ebffc433 	bl	36e48 <uspi_assertion_failed>
   45d78:	eaffffb2 	b	45c48 <SMSC951xDeviceReceiveFrame+0x24>
   45d7c:	e59f004c 	ldr	r0, [pc, #76]	; 45dd0 <SMSC951xDeviceReceiveFrame+0x1ac>
   45d80:	e59f1028 	ldr	r1, [pc, #40]	; 45db0 <SMSC951xDeviceReceiveFrame+0x18c>
   45d84:	e59f2048 	ldr	r2, [pc, #72]	; 45dd4 <SMSC951xDeviceReceiveFrame+0x1b0>
   45d88:	ebffc42e 	bl	36e48 <uspi_assertion_failed>
   45d8c:	eaffffaf 	b	45c50 <SMSC951xDeviceReceiveFrame+0x2c>
   45d90:	e59f0040 	ldr	r0, [pc, #64]	; 45dd8 <SMSC951xDeviceReceiveFrame+0x1b4>
   45d94:	e59f1014 	ldr	r1, [pc, #20]	; 45db0 <SMSC951xDeviceReceiveFrame+0x18c>
   45d98:	e59f203c 	ldr	r2, [pc, #60]	; 45ddc <SMSC951xDeviceReceiveFrame+0x1b8>
   45d9c:	ebffc429 	bl	36e48 <uspi_assertion_failed>
   45da0:	eaffffd3 	b	45cf4 <SMSC951xDeviceReceiveFrame+0xd0>
   45da4:	400090de 	.word	0x400090de
   45da8:	3fff0000 	.word	0x3fff0000
   45dac:	000576d8 	.word	0x000576d8
   45db0:	0005765c 	.word	0x0005765c
   45db4:	00000173 	.word	0x00000173
   45db8:	000576f8 	.word	0x000576f8
   45dbc:	000576c0 	.word	0x000576c0
   45dc0:	00057650 	.word	0x00057650
   45dc4:	00056434 	.word	0x00056434
   45dc8:	00000152 	.word	0x00000152
   45dcc:	000576a0 	.word	0x000576a0
   45dd0:	000579e4 	.word	0x000579e4
   45dd4:	00000155 	.word	0x00000155
   45dd8:	0005770c 	.word	0x0005770c
   45ddc:	00000181 	.word	0x00000181

00045de0 <SMSC951xDeviceWriteReg>:
   45de0:	e92d4070 	push	{r4, r5, r6, lr}
   45de4:	e2505000 	subs	r5, r0, #0
   45de8:	e24dd018 	sub	sp, sp, #24
   45dec:	e1a04001 	mov	r4, r1
   45df0:	e58d2014 	str	r2, [sp, #20]
   45df4:	0a000015 	beq	45e50 <SMSC951xDeviceWriteReg+0x70>
   45df8:	e1a00005 	mov	r0, r5
   45dfc:	ebfffdd2 	bl	4554c <USBFunctionGetHost>
   45e00:	e1a06000 	mov	r6, r0
   45e04:	e1a00005 	mov	r0, r5
   45e08:	ebfffdb8 	bl	454f0 <USBFunctionGetEndpoint0>
   45e0c:	e3a0c000 	mov	ip, #0
   45e10:	e3a02004 	mov	r2, #4
   45e14:	e28d3014 	add	r3, sp, #20
   45e18:	e6ff4074 	uxth	r4, r4
   45e1c:	e1a01000 	mov	r1, r0
   45e20:	e58d200c 	str	r2, [sp, #12]
   45e24:	e58d3008 	str	r3, [sp, #8]
   45e28:	e1a00006 	mov	r0, r6
   45e2c:	e58d4004 	str	r4, [sp, #4]
   45e30:	e58dc000 	str	ip, [sp]
   45e34:	e3a02040 	mov	r2, #64	; 0x40
   45e38:	e3a030a0 	mov	r3, #160	; 0xa0
   45e3c:	ebffe66d 	bl	3f7f8 <DWHCIDeviceControlMessage>
   45e40:	e1e00000 	mvn	r0, r0
   45e44:	e1a00fa0 	lsr	r0, r0, #31
   45e48:	e28dd018 	add	sp, sp, #24
   45e4c:	e8bd8070 	pop	{r4, r5, r6, pc}
   45e50:	e59f000c 	ldr	r0, [pc, #12]	; 45e64 <SMSC951xDeviceWriteReg+0x84>
   45e54:	e59f100c 	ldr	r1, [pc, #12]	; 45e68 <SMSC951xDeviceWriteReg+0x88>
   45e58:	e59f200c 	ldr	r2, [pc, #12]	; 45e6c <SMSC951xDeviceWriteReg+0x8c>
   45e5c:	ebffc3f9 	bl	36e48 <uspi_assertion_failed>
   45e60:	eaffffe4 	b	45df8 <SMSC951xDeviceWriteReg+0x18>
   45e64:	00056434 	.word	0x00056434
   45e68:	0005765c 	.word	0x0005765c
   45e6c:	000001de 	.word	0x000001de

00045e70 <SMSC951xDeviceConfigure>:
   45e70:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
   45e74:	e2505000 	subs	r5, r0, #0
   45e78:	e24dd02c 	sub	sp, sp, #44	; 0x2c
   45e7c:	0a000086 	beq	4609c <SMSC951xDeviceConfigure+0x22c>
   45e80:	e1a0000d 	mov	r0, sp
   45e84:	ebffc3ea 	bl	36e34 <GetMACAddress>
   45e88:	e2506000 	subs	r6, r0, #0
   45e8c:	0a000051 	beq	45fd8 <SMSC951xDeviceConfigure+0x168>
   45e90:	e2857018 	add	r7, r5, #24
   45e94:	e1a0100d 	mov	r1, sp
   45e98:	e1a00007 	mov	r0, r7
   45e9c:	ebfffbd6 	bl	44dfc <MACAddressSet>
   45ea0:	e28d0010 	add	r0, sp, #16
   45ea4:	eb0005e7 	bl	47648 <String>
   45ea8:	e28d1010 	add	r1, sp, #16
   45eac:	e1a00007 	mov	r0, r7
   45eb0:	ebfffc80 	bl	450b8 <MACAddressFormat>
   45eb4:	e28d0010 	add	r0, sp, #16
   45eb8:	eb000615 	bl	47714 <StringGet>
   45ebc:	e3a01004 	mov	r1, #4
   45ec0:	e1a03000 	mov	r3, r0
   45ec4:	e59f22c4 	ldr	r2, [pc, #708]	; 46190 <SMSC951xDeviceConfigure+0x320>
   45ec8:	e59f02c4 	ldr	r0, [pc, #708]	; 46194 <SMSC951xDeviceConfigure+0x324>
   45ecc:	ebff78a9 	bl	24178 <LogWrite>
   45ed0:	e1a00005 	mov	r0, r5
   45ed4:	ebfffd5a 	bl	45444 <USBFunctionGetNumEndpoints>
   45ed8:	e3500003 	cmp	r0, #3
   45edc:	0a00000c 	beq	45f14 <SMSC951xDeviceConfigure+0xa4>
   45ee0:	e1a00005 	mov	r0, r5
   45ee4:	e59f12a8 	ldr	r1, [pc, #680]	; 46194 <SMSC951xDeviceConfigure+0x324>
   45ee8:	ebfffdfe 	bl	456e8 <USBFunctionConfigurationError>
   45eec:	e28d0010 	add	r0, sp, #16
   45ef0:	eb0005f6 	bl	476d0 <_String>
   45ef4:	e3a06000 	mov	r6, #0
   45ef8:	e1a00006 	mov	r0, r6
   45efc:	e28dd02c 	add	sp, sp, #44	; 0x2c
   45f00:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   45f04:	e5d42003 	ldrb	r2, [r4, #3]
   45f08:	e202203f 	and	r2, r2, #63	; 0x3f
   45f0c:	e3520002 	cmp	r2, #2
   45f10:	0a000037 	beq	45ff4 <SMSC951xDeviceConfigure+0x184>
   45f14:	e1a00005 	mov	r0, r5
   45f18:	e3a01005 	mov	r1, #5
   45f1c:	ebfffdd7 	bl	45680 <USBFunctionGetDescriptor>
   45f20:	e2504000 	subs	r4, r0, #0
   45f24:	1afffff6 	bne	45f04 <SMSC951xDeviceConfigure+0x94>
   45f28:	e5953010 	ldr	r3, [r5, #16]
   45f2c:	e1a00005 	mov	r0, r5
   45f30:	e3530000 	cmp	r3, #0
   45f34:	0affffea 	beq	45ee4 <SMSC951xDeviceConfigure+0x74>
   45f38:	e5953014 	ldr	r3, [r5, #20]
   45f3c:	e3530000 	cmp	r3, #0
   45f40:	0affffe7 	beq	45ee4 <SMSC951xDeviceConfigure+0x74>
   45f44:	ebfffd97 	bl	455a8 <USBFunctionConfigure>
   45f48:	e2506000 	subs	r6, r0, #0
   45f4c:	0a00003b 	beq	46040 <SMSC951xDeviceConfigure+0x1d0>
   45f50:	e1a00007 	mov	r0, r7
   45f54:	e28d1008 	add	r1, sp, #8
   45f58:	ebfffc14 	bl	44fb0 <MACAddressCopyTo>
   45f5c:	e5dd200d 	ldrb	r2, [sp, #13]
   45f60:	e5dd300c 	ldrb	r3, [sp, #12]
   45f64:	e1a00005 	mov	r0, r5
   45f68:	e1832402 	orr	r2, r3, r2, lsl #8
   45f6c:	e3a01f41 	mov	r1, #260	; 0x104
   45f70:	e5dd7008 	ldrb	r7, [sp, #8]
   45f74:	e5dd8009 	ldrb	r8, [sp, #9]
   45f78:	e5dd600a 	ldrb	r6, [sp, #10]
   45f7c:	e5dd900b 	ldrb	r9, [sp, #11]
   45f80:	ebffff96 	bl	45de0 <SMSC951xDeviceWriteReg>
   45f84:	e3500000 	cmp	r0, #0
   45f88:	0a000008 	beq	45fb0 <SMSC951xDeviceConfigure+0x140>
   45f8c:	e1a03806 	lsl	r3, r6, #16
   45f90:	e1833c09 	orr	r3, r3, r9, lsl #24
   45f94:	e1832007 	orr	r2, r3, r7
   45f98:	e1822408 	orr	r2, r2, r8, lsl #8
   45f9c:	e1a00005 	mov	r0, r5
   45fa0:	e3a01f42 	mov	r1, #264	; 0x108
   45fa4:	ebffff8d 	bl	45de0 <SMSC951xDeviceWriteReg>
   45fa8:	e3500000 	cmp	r0, #0
   45fac:	1a00003f 	bne	460b0 <SMSC951xDeviceConfigure+0x240>
   45fb0:	e3a06000 	mov	r6, #0
   45fb4:	e3a01001 	mov	r1, #1
   45fb8:	e59f21d8 	ldr	r2, [pc, #472]	; 46198 <SMSC951xDeviceConfigure+0x328>
   45fbc:	e59f01d0 	ldr	r0, [pc, #464]	; 46194 <SMSC951xDeviceConfigure+0x324>
   45fc0:	ebff786c 	bl	24178 <LogWrite>
   45fc4:	e28d0010 	add	r0, sp, #16
   45fc8:	eb0005c0 	bl	476d0 <_String>
   45fcc:	e1a00006 	mov	r0, r6
   45fd0:	e28dd02c 	add	sp, sp, #44	; 0x2c
   45fd4:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   45fd8:	e59f01b4 	ldr	r0, [pc, #436]	; 46194 <SMSC951xDeviceConfigure+0x324>
   45fdc:	e3a01001 	mov	r1, #1
   45fe0:	e59f21b4 	ldr	r2, [pc, #436]	; 4619c <SMSC951xDeviceConfigure+0x32c>
   45fe4:	ebff7863 	bl	24178 <LogWrite>
   45fe8:	e1a00006 	mov	r0, r6
   45fec:	e28dd02c 	add	sp, sp, #44	; 0x2c
   45ff0:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   45ff4:	e1d430d2 	ldrsb	r3, [r4, #2]
   45ff8:	e3530000 	cmp	r3, #0
   45ffc:	ba000018 	blt	46064 <SMSC951xDeviceConfigure+0x1f4>
   46000:	e5953014 	ldr	r3, [r5, #20]
   46004:	e3530000 	cmp	r3, #0
   46008:	1affffb4 	bne	45ee0 <SMSC951xDeviceConfigure+0x70>
   4600c:	e3a00018 	mov	r0, #24
   46010:	ebffc365 	bl	36dac <malloc>
   46014:	e3500000 	cmp	r0, #0
   46018:	e5850014 	str	r0, [r5, #20]
   4601c:	0a000037 	beq	46100 <SMSC951xDeviceConfigure+0x290>
   46020:	e1a06000 	mov	r6, r0
   46024:	e1a00005 	mov	r0, r5
   46028:	ebfffd1c 	bl	454a0 <USBFunctionGetDevice>
   4602c:	e1a02004 	mov	r2, r4
   46030:	e1a01000 	mov	r1, r0
   46034:	e1a00006 	mov	r0, r6
   46038:	ebfff580 	bl	43640 <USBEndpoint2>
   4603c:	eaffffb4 	b	45f14 <SMSC951xDeviceConfigure+0xa4>
   46040:	e3a01001 	mov	r1, #1
   46044:	e59f2154 	ldr	r2, [pc, #340]	; 461a0 <SMSC951xDeviceConfigure+0x330>
   46048:	e59f0144 	ldr	r0, [pc, #324]	; 46194 <SMSC951xDeviceConfigure+0x324>
   4604c:	ebff7849 	bl	24178 <LogWrite>
   46050:	e28d0010 	add	r0, sp, #16
   46054:	eb00059d 	bl	476d0 <_String>
   46058:	e1a00006 	mov	r0, r6
   4605c:	e28dd02c 	add	sp, sp, #44	; 0x2c
   46060:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   46064:	e5953010 	ldr	r3, [r5, #16]
   46068:	e3530000 	cmp	r3, #0
   4606c:	1affff9b 	bne	45ee0 <SMSC951xDeviceConfigure+0x70>
   46070:	e3a00018 	mov	r0, #24
   46074:	ebffc34c 	bl	36dac <malloc>
   46078:	e3500000 	cmp	r0, #0
   4607c:	e5850010 	str	r0, [r5, #16]
   46080:	1affffe6 	bne	46020 <SMSC951xDeviceConfigure+0x1b0>
   46084:	e59f0118 	ldr	r0, [pc, #280]	; 461a4 <SMSC951xDeviceConfigure+0x334>
   46088:	e59f1118 	ldr	r1, [pc, #280]	; 461a8 <SMSC951xDeviceConfigure+0x338>
   4608c:	e3a020e0 	mov	r2, #224	; 0xe0
   46090:	ebffc36c 	bl	36e48 <uspi_assertion_failed>
   46094:	e5956010 	ldr	r6, [r5, #16]
   46098:	eaffffe1 	b	46024 <SMSC951xDeviceConfigure+0x1b4>
   4609c:	e59f0108 	ldr	r0, [pc, #264]	; 461ac <SMSC951xDeviceConfigure+0x33c>
   460a0:	e59f1100 	ldr	r1, [pc, #256]	; 461a8 <SMSC951xDeviceConfigure+0x338>
   460a4:	e3a020b4 	mov	r2, #180	; 0xb4
   460a8:	ebffc366 	bl	36e48 <uspi_assertion_failed>
   460ac:	eaffff73 	b	45e80 <SMSC951xDeviceConfigure+0x10>
   460b0:	e1a00005 	mov	r0, r5
   460b4:	e3a01024 	mov	r1, #36	; 0x24
   460b8:	e59f20f0 	ldr	r2, [pc, #240]	; 461b0 <SMSC951xDeviceConfigure+0x340>
   460bc:	ebffff47 	bl	45de0 <SMSC951xDeviceWriteReg>
   460c0:	e3500000 	cmp	r0, #0
   460c4:	0a000005 	beq	460e0 <SMSC951xDeviceConfigure+0x270>
   460c8:	e1a00005 	mov	r0, r5
   460cc:	e3a01c01 	mov	r1, #256	; 0x100
   460d0:	e59f20dc 	ldr	r2, [pc, #220]	; 461b4 <SMSC951xDeviceConfigure+0x344>
   460d4:	ebffff41 	bl	45de0 <SMSC951xDeviceWriteReg>
   460d8:	e3500000 	cmp	r0, #0
   460dc:	1a00000d 	bne	46118 <SMSC951xDeviceConfigure+0x2a8>
   460e0:	e59f00ac 	ldr	r0, [pc, #172]	; 46194 <SMSC951xDeviceConfigure+0x324>
   460e4:	e3a01001 	mov	r1, #1
   460e8:	e59f20c8 	ldr	r2, [pc, #200]	; 461b8 <SMSC951xDeviceConfigure+0x348>
   460ec:	ebff7821 	bl	24178 <LogWrite>
   460f0:	e28d0010 	add	r0, sp, #16
   460f4:	eb000575 	bl	476d0 <_String>
   460f8:	e3a06000 	mov	r6, #0
   460fc:	eaffff7d 	b	45ef8 <SMSC951xDeviceConfigure+0x88>
   46100:	e59f00b4 	ldr	r0, [pc, #180]	; 461bc <SMSC951xDeviceConfigure+0x34c>
   46104:	e59f109c 	ldr	r1, [pc, #156]	; 461a8 <SMSC951xDeviceConfigure+0x338>
   46108:	e3a020ef 	mov	r2, #239	; 0xef
   4610c:	ebffc34d 	bl	36e48 <uspi_assertion_failed>
   46110:	e5956014 	ldr	r6, [r5, #20]
   46114:	eaffffc2 	b	46024 <SMSC951xDeviceConfigure+0x1b4>
   46118:	e1a00005 	mov	r0, r5
   4611c:	e3a01010 	mov	r1, #16
   46120:	e3a02004 	mov	r2, #4
   46124:	ebffff2d 	bl	45de0 <SMSC951xDeviceWriteReg>
   46128:	e3500000 	cmp	r0, #0
   4612c:	0affffeb 	beq	460e0 <SMSC951xDeviceConfigure+0x270>
   46130:	e28d001c 	add	r0, sp, #28
   46134:	eb000543 	bl	47648 <String>
   46138:	e59f3080 	ldr	r3, [pc, #128]	; 461c0 <SMSC951xDeviceConfigure+0x350>
   4613c:	e59f1080 	ldr	r1, [pc, #128]	; 461c4 <SMSC951xDeviceConfigure+0x354>
   46140:	e5932000 	ldr	r2, [r3]
   46144:	e28d001c 	add	r0, sp, #28
   46148:	e282c001 	add	ip, r2, #1
   4614c:	e583c000 	str	ip, [r3]
   46150:	eb0007bc 	bl	48048 <StringFormat>
   46154:	ebfffb00 	bl	44d5c <DeviceNameServiceGet>
   46158:	e1a06000 	mov	r6, r0
   4615c:	e28d001c 	add	r0, sp, #28
   46160:	eb00056b 	bl	47714 <StringGet>
   46164:	e1a02005 	mov	r2, r5
   46168:	e1a01000 	mov	r1, r0
   4616c:	e1a03004 	mov	r3, r4
   46170:	e1a00006 	mov	r0, r6
   46174:	ebfffa87 	bl	44b98 <DeviceNameServiceAddDevice>
   46178:	e28d001c 	add	r0, sp, #28
   4617c:	eb000553 	bl	476d0 <_String>
   46180:	e28d0010 	add	r0, sp, #16
   46184:	eb000551 	bl	476d0 <_String>
   46188:	e3a06001 	mov	r6, #1
   4618c:	eaffff59 	b	45ef8 <SMSC951xDeviceConfigure+0x88>
   46190:	00057720 	.word	0x00057720
   46194:	00057650 	.word	0x00057650
   46198:	00057784 	.word	0x00057784
   4619c:	00057734 	.word	0x00057734
   461a0:	00057470 	.word	0x00057470
   461a4:	0005774c 	.word	0x0005774c
   461a8:	0005765c 	.word	0x0005765c
   461ac:	00056434 	.word	0x00056434
   461b0:	01110000 	.word	0x01110000
   461b4:	0080000c 	.word	0x0080000c
   461b8:	0005779c 	.word	0x0005779c
   461bc:	00057768 	.word	0x00057768
   461c0:	000bfe5c 	.word	0x000bfe5c
   461c4:	000577b0 	.word	0x000577b0

000461c8 <SMSC951xDeviceReadReg>:
   461c8:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   461cc:	e2505000 	subs	r5, r0, #0
   461d0:	e24dd014 	sub	sp, sp, #20
   461d4:	e1a04001 	mov	r4, r1
   461d8:	e1a06002 	mov	r6, r2
   461dc:	0a000013 	beq	46230 <SMSC951xDeviceReadReg+0x68>
   461e0:	e1a00005 	mov	r0, r5
   461e4:	ebfffcd8 	bl	4554c <USBFunctionGetHost>
   461e8:	e1a07000 	mov	r7, r0
   461ec:	e1a00005 	mov	r0, r5
   461f0:	ebfffcbe 	bl	454f0 <USBFunctionGetEndpoint0>
   461f4:	e3a02000 	mov	r2, #0
   461f8:	e3a03004 	mov	r3, #4
   461fc:	e6ff4074 	uxth	r4, r4
   46200:	e1a01000 	mov	r1, r0
   46204:	e88d0054 	stm	sp, {r2, r4, r6}
   46208:	e58d300c 	str	r3, [sp, #12]
   4620c:	e1a00007 	mov	r0, r7
   46210:	e3a020c0 	mov	r2, #192	; 0xc0
   46214:	e3a030a1 	mov	r3, #161	; 0xa1
   46218:	ebffe576 	bl	3f7f8 <DWHCIDeviceControlMessage>
   4621c:	e2400004 	sub	r0, r0, #4
   46220:	e16f0f10 	clz	r0, r0
   46224:	e1a002a0 	lsr	r0, r0, #5
   46228:	e28dd014 	add	sp, sp, #20
   4622c:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   46230:	e59f000c 	ldr	r0, [pc, #12]	; 46244 <SMSC951xDeviceReadReg+0x7c>
   46234:	e59f100c 	ldr	r1, [pc, #12]	; 46248 <SMSC951xDeviceReadReg+0x80>
   46238:	e3a02f7a 	mov	r2, #488	; 0x1e8
   4623c:	ebffc301 	bl	36e48 <uspi_assertion_failed>
   46240:	eaffffe6 	b	461e0 <SMSC951xDeviceReadReg+0x18>
   46244:	00056434 	.word	0x00056434
   46248:	0005765c 	.word	0x0005765c

0004624c <SMSC951xDevicePHYWaitNotBusy>:
   4624c:	e92d4030 	push	{r4, r5, lr}
   46250:	e2505000 	subs	r5, r0, #0
   46254:	e24dd00c 	sub	sp, sp, #12
   46258:	0a000013 	beq	462ac <SMSC951xDevicePHYWaitNotBusy+0x60>
   4625c:	e3a00001 	mov	r0, #1
   46260:	ebffc2da 	bl	36dd0 <MsDelay>
   46264:	e59f4054 	ldr	r4, [pc, #84]	; 462c0 <SMSC951xDevicePHYWaitNotBusy+0x74>
   46268:	ea000006 	b	46288 <SMSC951xDevicePHYWaitNotBusy+0x3c>
   4626c:	e59d3004 	ldr	r3, [sp, #4]
   46270:	e3a00001 	mov	r0, #1
   46274:	e3130001 	tst	r3, #1
   46278:	0a000009 	beq	462a4 <SMSC951xDevicePHYWaitNotBusy+0x58>
   4627c:	ebffc2d3 	bl	36dd0 <MsDelay>
   46280:	e2544001 	subs	r4, r4, #1
   46284:	0a000005 	beq	462a0 <SMSC951xDevicePHYWaitNotBusy+0x54>
   46288:	e1a00005 	mov	r0, r5
   4628c:	e3a01f45 	mov	r1, #276	; 0x114
   46290:	e28d2004 	add	r2, sp, #4
   46294:	ebffffcb 	bl	461c8 <SMSC951xDeviceReadReg>
   46298:	e3500000 	cmp	r0, #0
   4629c:	1afffff2 	bne	4626c <SMSC951xDevicePHYWaitNotBusy+0x20>
   462a0:	e3a00000 	mov	r0, #0
   462a4:	e28dd00c 	add	sp, sp, #12
   462a8:	e8bd8030 	pop	{r4, r5, pc}
   462ac:	e59f0010 	ldr	r0, [pc, #16]	; 462c4 <SMSC951xDevicePHYWaitNotBusy+0x78>
   462b0:	e59f1010 	ldr	r1, [pc, #16]	; 462c8 <SMSC951xDevicePHYWaitNotBusy+0x7c>
   462b4:	e59f2010 	ldr	r2, [pc, #16]	; 462cc <SMSC951xDevicePHYWaitNotBusy+0x80>
   462b8:	ebffc2e2 	bl	36e48 <uspi_assertion_failed>
   462bc:	eaffffe6 	b	4625c <SMSC951xDevicePHYWaitNotBusy+0x10>
   462c0:	000003e7 	.word	0x000003e7
   462c4:	00056434 	.word	0x00056434
   462c8:	0005765c 	.word	0x0005765c
   462cc:	000001c5 	.word	0x000001c5

000462d0 <SMSC951xDevicePHYWrite>:
   462d0:	e92d4070 	push	{r4, r5, r6, lr}
   462d4:	e2505000 	subs	r5, r0, #0
   462d8:	e1a04001 	mov	r4, r1
   462dc:	e1a06002 	mov	r6, r2
   462e0:	0a00001d 	beq	4635c <SMSC951xDevicePHYWrite+0x8c>
   462e4:	e354001f 	cmp	r4, #31
   462e8:	8a000016 	bhi	46348 <SMSC951xDevicePHYWrite+0x78>
   462ec:	e1a00005 	mov	r0, r5
   462f0:	ebffffd5 	bl	4624c <SMSC951xDevicePHYWaitNotBusy>
   462f4:	e3500000 	cmp	r0, #0
   462f8:	1a000001 	bne	46304 <SMSC951xDevicePHYWrite+0x34>
   462fc:	e3a00000 	mov	r0, #0
   46300:	e8bd8070 	pop	{r4, r5, r6, pc}
   46304:	e1a02006 	mov	r2, r6
   46308:	e1a00005 	mov	r0, r5
   4630c:	e3a01f46 	mov	r1, #280	; 0x118
   46310:	ebfffeb2 	bl	45de0 <SMSC951xDeviceWriteReg>
   46314:	e3500000 	cmp	r0, #0
   46318:	0afffff7 	beq	462fc <SMSC951xDevicePHYWrite+0x2c>
   4631c:	e1a02304 	lsl	r2, r4, #6
   46320:	e3822b02 	orr	r2, r2, #2048	; 0x800
   46324:	e3822003 	orr	r2, r2, #3
   46328:	e1a00005 	mov	r0, r5
   4632c:	e3a01f45 	mov	r1, #276	; 0x114
   46330:	ebfffeaa 	bl	45de0 <SMSC951xDeviceWriteReg>
   46334:	e3500000 	cmp	r0, #0
   46338:	0affffef 	beq	462fc <SMSC951xDevicePHYWrite+0x2c>
   4633c:	e1a00005 	mov	r0, r5
   46340:	e8bd4070 	pop	{r4, r5, r6, lr}
   46344:	eaffffc0 	b	4624c <SMSC951xDevicePHYWaitNotBusy>
   46348:	e59f0020 	ldr	r0, [pc, #32]	; 46370 <SMSC951xDevicePHYWrite+0xa0>
   4634c:	e59f1020 	ldr	r1, [pc, #32]	; 46374 <SMSC951xDevicePHYWrite+0xa4>
   46350:	e59f2020 	ldr	r2, [pc, #32]	; 46378 <SMSC951xDevicePHYWrite+0xa8>
   46354:	ebffc2bb 	bl	36e48 <uspi_assertion_failed>
   46358:	eaffffe3 	b	462ec <SMSC951xDevicePHYWrite+0x1c>
   4635c:	e59f0018 	ldr	r0, [pc, #24]	; 4637c <SMSC951xDevicePHYWrite+0xac>
   46360:	e59f100c 	ldr	r1, [pc, #12]	; 46374 <SMSC951xDevicePHYWrite+0xa4>
   46364:	e3a02f66 	mov	r2, #408	; 0x198
   46368:	ebffc2b6 	bl	36e48 <uspi_assertion_failed>
   4636c:	eaffffdc 	b	462e4 <SMSC951xDevicePHYWrite+0x14>
   46370:	000577b8 	.word	0x000577b8
   46374:	0005765c 	.word	0x0005765c
   46378:	00000199 	.word	0x00000199
   4637c:	00056434 	.word	0x00056434

00046380 <SMSC951xDevicePHYRead>:
   46380:	e92d4070 	push	{r4, r5, r6, lr}
   46384:	e2505000 	subs	r5, r0, #0
   46388:	e24dd008 	sub	sp, sp, #8
   4638c:	e1a04001 	mov	r4, r1
   46390:	e1a06002 	mov	r6, r2
   46394:	0a000025 	beq	46430 <SMSC951xDevicePHYRead+0xb0>
   46398:	e354001f 	cmp	r4, #31
   4639c:	8a00001e 	bhi	4641c <SMSC951xDevicePHYRead+0x9c>
   463a0:	e1a00005 	mov	r0, r5
   463a4:	ebffffa8 	bl	4624c <SMSC951xDevicePHYWaitNotBusy>
   463a8:	e3500000 	cmp	r0, #0
   463ac:	1a000002 	bne	463bc <SMSC951xDevicePHYRead+0x3c>
   463b0:	e3a00000 	mov	r0, #0
   463b4:	e28dd008 	add	sp, sp, #8
   463b8:	e8bd8070 	pop	{r4, r5, r6, pc}
   463bc:	e1a02304 	lsl	r2, r4, #6
   463c0:	e3822b02 	orr	r2, r2, #2048	; 0x800
   463c4:	e3822001 	orr	r2, r2, #1
   463c8:	e1a00005 	mov	r0, r5
   463cc:	e3a01f45 	mov	r1, #276	; 0x114
   463d0:	ebfffe82 	bl	45de0 <SMSC951xDeviceWriteReg>
   463d4:	e3500000 	cmp	r0, #0
   463d8:	0afffff4 	beq	463b0 <SMSC951xDevicePHYRead+0x30>
   463dc:	e1a00005 	mov	r0, r5
   463e0:	ebffff99 	bl	4624c <SMSC951xDevicePHYWaitNotBusy>
   463e4:	e3500000 	cmp	r0, #0
   463e8:	0afffff0 	beq	463b0 <SMSC951xDevicePHYRead+0x30>
   463ec:	e1a00005 	mov	r0, r5
   463f0:	e3a01f46 	mov	r1, #280	; 0x118
   463f4:	e28d2004 	add	r2, sp, #4
   463f8:	ebffff72 	bl	461c8 <SMSC951xDeviceReadReg>
   463fc:	e3500000 	cmp	r0, #0
   46400:	0affffeb 	beq	463b4 <SMSC951xDevicePHYRead+0x34>
   46404:	e3560000 	cmp	r6, #0
   46408:	0a00000d 	beq	46444 <SMSC951xDevicePHYRead+0xc4>
   4640c:	e59d3004 	ldr	r3, [sp, #4]
   46410:	e3a00001 	mov	r0, #1
   46414:	e1c630b0 	strh	r3, [r6]
   46418:	eaffffe5 	b	463b4 <SMSC951xDevicePHYRead+0x34>
   4641c:	e59f0034 	ldr	r0, [pc, #52]	; 46458 <SMSC951xDevicePHYRead+0xd8>
   46420:	e59f1034 	ldr	r1, [pc, #52]	; 4645c <SMSC951xDevicePHYRead+0xdc>
   46424:	e59f2034 	ldr	r2, [pc, #52]	; 46460 <SMSC951xDevicePHYRead+0xe0>
   46428:	ebffc286 	bl	36e48 <uspi_assertion_failed>
   4642c:	eaffffdb 	b	463a0 <SMSC951xDevicePHYRead+0x20>
   46430:	e59f002c 	ldr	r0, [pc, #44]	; 46464 <SMSC951xDevicePHYRead+0xe4>
   46434:	e59f1020 	ldr	r1, [pc, #32]	; 4645c <SMSC951xDevicePHYRead+0xdc>
   46438:	e3a02f6b 	mov	r2, #428	; 0x1ac
   4643c:	ebffc281 	bl	36e48 <uspi_assertion_failed>
   46440:	eaffffd4 	b	46398 <SMSC951xDevicePHYRead+0x18>
   46444:	e59f001c 	ldr	r0, [pc, #28]	; 46468 <SMSC951xDevicePHYRead+0xe8>
   46448:	e59f100c 	ldr	r1, [pc, #12]	; 4645c <SMSC951xDevicePHYRead+0xdc>
   4644c:	e59f2018 	ldr	r2, [pc, #24]	; 4646c <SMSC951xDevicePHYRead+0xec>
   46450:	ebffc27c 	bl	36e48 <uspi_assertion_failed>
   46454:	eaffffec 	b	4640c <SMSC951xDevicePHYRead+0x8c>
   46458:	000577b8 	.word	0x000577b8
   4645c:	0005765c 	.word	0x0005765c
   46460:	000001ad 	.word	0x000001ad
   46464:	00056434 	.word	0x00056434
   46468:	000577c8 	.word	0x000577c8
   4646c:	000001bd 	.word	0x000001bd

00046470 <SMSC951xDeviceIsLinkUp>:
   46470:	e92d4010 	push	{r4, lr}
   46474:	e2504000 	subs	r4, r0, #0
   46478:	e24dd008 	sub	sp, sp, #8
   4647c:	0a000009 	beq	464a8 <SMSC951xDeviceIsLinkUp+0x38>
   46480:	e1a00004 	mov	r0, r4
   46484:	e3a01001 	mov	r1, #1
   46488:	e28d2006 	add	r2, sp, #6
   4648c:	ebffffbb 	bl	46380 <SMSC951xDevicePHYRead>
   46490:	e3500000 	cmp	r0, #0
   46494:	11dd00b6 	ldrhne	r0, [sp, #6]
   46498:	11a00120 	lsrne	r0, r0, #2
   4649c:	12000001 	andne	r0, r0, #1
   464a0:	e28dd008 	add	sp, sp, #8
   464a4:	e8bd8010 	pop	{r4, pc}
   464a8:	e59f000c 	ldr	r0, [pc, #12]	; 464bc <SMSC951xDeviceIsLinkUp+0x4c>
   464ac:	e59f100c 	ldr	r1, [pc, #12]	; 464c0 <SMSC951xDeviceIsLinkUp+0x50>
   464b0:	e59f200c 	ldr	r2, [pc, #12]	; 464c4 <SMSC951xDeviceIsLinkUp+0x54>
   464b4:	ebffc263 	bl	36e48 <uspi_assertion_failed>
   464b8:	eafffff0 	b	46480 <SMSC951xDeviceIsLinkUp+0x10>
   464bc:	00056434 	.word	0x00056434
   464c0:	0005765c 	.word	0x0005765c
   464c4:	0000018b 	.word	0x0000018b

000464c8 <SMSC951xDeviceDumpReg>:
   464c8:	e92d4070 	push	{r4, r5, r6, lr}
   464cc:	e2505000 	subs	r5, r0, #0
   464d0:	e24dd010 	sub	sp, sp, #16
   464d4:	e1a06001 	mov	r6, r1
   464d8:	e1a04002 	mov	r4, r2
   464dc:	0a000014 	beq	46534 <SMSC951xDeviceDumpReg+0x6c>
   464e0:	e1a00005 	mov	r0, r5
   464e4:	e1a01004 	mov	r1, r4
   464e8:	e28d200c 	add	r2, sp, #12
   464ec:	ebffff35 	bl	461c8 <SMSC951xDeviceReadReg>
   464f0:	e3500000 	cmp	r0, #0
   464f4:	0a000007 	beq	46518 <SMSC951xDeviceDumpReg+0x50>
   464f8:	e59d300c 	ldr	r3, [sp, #12]
   464fc:	e58d6000 	str	r6, [sp]
   46500:	e59f0040 	ldr	r0, [pc, #64]	; 46548 <SMSC951xDeviceDumpReg+0x80>
   46504:	e3a01004 	mov	r1, #4
   46508:	e59f203c 	ldr	r2, [pc, #60]	; 4654c <SMSC951xDeviceDumpReg+0x84>
   4650c:	ebff7719 	bl	24178 <LogWrite>
   46510:	e28dd010 	add	sp, sp, #16
   46514:	e8bd8070 	pop	{r4, r5, r6, pc}
   46518:	e1a03004 	mov	r3, r4
   4651c:	e59f0024 	ldr	r0, [pc, #36]	; 46548 <SMSC951xDeviceDumpReg+0x80>
   46520:	e3a01001 	mov	r1, #1
   46524:	e59f2024 	ldr	r2, [pc, #36]	; 46550 <SMSC951xDeviceDumpReg+0x88>
   46528:	ebff7712 	bl	24178 <LogWrite>
   4652c:	e28dd010 	add	sp, sp, #16
   46530:	e8bd8070 	pop	{r4, r5, r6, pc}
   46534:	e59f0018 	ldr	r0, [pc, #24]	; 46554 <SMSC951xDeviceDumpReg+0x8c>
   46538:	e59f1018 	ldr	r1, [pc, #24]	; 46558 <SMSC951xDeviceDumpReg+0x90>
   4653c:	e3a02f7d 	mov	r2, #500	; 0x1f4
   46540:	ebffc240 	bl	36e48 <uspi_assertion_failed>
   46544:	eaffffe5 	b	464e0 <SMSC951xDeviceDumpReg+0x18>
   46548:	00057650 	.word	0x00057650
   4654c:	000577f0 	.word	0x000577f0
   46550:	000577d4 	.word	0x000577d4
   46554:	00056434 	.word	0x00056434
   46558:	0005765c 	.word	0x0005765c

0004655c <SMSC951xDeviceDumpRegs>:
   4655c:	e92d4010 	push	{r4, lr}
   46560:	e2504000 	subs	r4, r0, #0
   46564:	0a000050 	beq	466ac <SMSC951xDeviceDumpRegs+0x150>
   46568:	e1a00004 	mov	r0, r4
   4656c:	e59f114c 	ldr	r1, [pc, #332]	; 466c0 <SMSC951xDeviceDumpRegs+0x164>
   46570:	e3a02000 	mov	r2, #0
   46574:	ebffffd3 	bl	464c8 <SMSC951xDeviceDumpReg>
   46578:	e1a00004 	mov	r0, r4
   4657c:	e59f1140 	ldr	r1, [pc, #320]	; 466c4 <SMSC951xDeviceDumpRegs+0x168>
   46580:	e3a02008 	mov	r2, #8
   46584:	ebffffcf 	bl	464c8 <SMSC951xDeviceDumpReg>
   46588:	e1a00004 	mov	r0, r4
   4658c:	e59f1134 	ldr	r1, [pc, #308]	; 466c8 <SMSC951xDeviceDumpRegs+0x16c>
   46590:	e3a0200c 	mov	r2, #12
   46594:	ebffffcb 	bl	464c8 <SMSC951xDeviceDumpReg>
   46598:	e1a00004 	mov	r0, r4
   4659c:	e59f1128 	ldr	r1, [pc, #296]	; 466cc <SMSC951xDeviceDumpRegs+0x170>
   465a0:	e3a02010 	mov	r2, #16
   465a4:	ebffffc7 	bl	464c8 <SMSC951xDeviceDumpReg>
   465a8:	e1a00004 	mov	r0, r4
   465ac:	e59f111c 	ldr	r1, [pc, #284]	; 466d0 <SMSC951xDeviceDumpRegs+0x174>
   465b0:	e3a02014 	mov	r2, #20
   465b4:	ebffffc3 	bl	464c8 <SMSC951xDeviceDumpReg>
   465b8:	e1a00004 	mov	r0, r4
   465bc:	e59f1110 	ldr	r1, [pc, #272]	; 466d4 <SMSC951xDeviceDumpRegs+0x178>
   465c0:	e3a02018 	mov	r2, #24
   465c4:	ebffffbf 	bl	464c8 <SMSC951xDeviceDumpReg>
   465c8:	e1a00004 	mov	r0, r4
   465cc:	e59f1104 	ldr	r1, [pc, #260]	; 466d8 <SMSC951xDeviceDumpRegs+0x17c>
   465d0:	e3a02020 	mov	r2, #32
   465d4:	ebffffbb 	bl	464c8 <SMSC951xDeviceDumpReg>
   465d8:	e1a00004 	mov	r0, r4
   465dc:	e59f10f8 	ldr	r1, [pc, #248]	; 466dc <SMSC951xDeviceDumpRegs+0x180>
   465e0:	e3a02024 	mov	r2, #36	; 0x24
   465e4:	ebffffb7 	bl	464c8 <SMSC951xDeviceDumpReg>
   465e8:	e1a00004 	mov	r0, r4
   465ec:	e59f10ec 	ldr	r1, [pc, #236]	; 466e0 <SMSC951xDeviceDumpRegs+0x184>
   465f0:	e3a02028 	mov	r2, #40	; 0x28
   465f4:	ebffffb3 	bl	464c8 <SMSC951xDeviceDumpReg>
   465f8:	e1a00004 	mov	r0, r4
   465fc:	e59f10e0 	ldr	r1, [pc, #224]	; 466e4 <SMSC951xDeviceDumpRegs+0x188>
   46600:	e3a0202c 	mov	r2, #44	; 0x2c
   46604:	ebffffaf 	bl	464c8 <SMSC951xDeviceDumpReg>
   46608:	e1a00004 	mov	r0, r4
   4660c:	e59f10d4 	ldr	r1, [pc, #212]	; 466e8 <SMSC951xDeviceDumpRegs+0x18c>
   46610:	e3a02038 	mov	r2, #56	; 0x38
   46614:	ebffffab 	bl	464c8 <SMSC951xDeviceDumpReg>
   46618:	e1a00004 	mov	r0, r4
   4661c:	e59f10c8 	ldr	r1, [pc, #200]	; 466ec <SMSC951xDeviceDumpRegs+0x190>
   46620:	e3a02068 	mov	r2, #104	; 0x68
   46624:	ebffffa7 	bl	464c8 <SMSC951xDeviceDumpReg>
   46628:	e1a00004 	mov	r0, r4
   4662c:	e59f10bc 	ldr	r1, [pc, #188]	; 466f0 <SMSC951xDeviceDumpRegs+0x194>
   46630:	e3a0206c 	mov	r2, #108	; 0x6c
   46634:	ebffffa3 	bl	464c8 <SMSC951xDeviceDumpReg>
   46638:	e1a00004 	mov	r0, r4
   4663c:	e59f10b0 	ldr	r1, [pc, #176]	; 466f4 <SMSC951xDeviceDumpRegs+0x198>
   46640:	e3a02c01 	mov	r2, #256	; 0x100
   46644:	ebffff9f 	bl	464c8 <SMSC951xDeviceDumpReg>
   46648:	e1a00004 	mov	r0, r4
   4664c:	e59f10a4 	ldr	r1, [pc, #164]	; 466f8 <SMSC951xDeviceDumpRegs+0x19c>
   46650:	e3a02f41 	mov	r2, #260	; 0x104
   46654:	ebffff9b 	bl	464c8 <SMSC951xDeviceDumpReg>
   46658:	e1a00004 	mov	r0, r4
   4665c:	e59f1098 	ldr	r1, [pc, #152]	; 466fc <SMSC951xDeviceDumpRegs+0x1a0>
   46660:	e3a02f42 	mov	r2, #264	; 0x108
   46664:	ebffff97 	bl	464c8 <SMSC951xDeviceDumpReg>
   46668:	e1a00004 	mov	r0, r4
   4666c:	e59f108c 	ldr	r1, [pc, #140]	; 46700 <SMSC951xDeviceDumpRegs+0x1a4>
   46670:	e3a02f43 	mov	r2, #268	; 0x10c
   46674:	ebffff93 	bl	464c8 <SMSC951xDeviceDumpReg>
   46678:	e1a00004 	mov	r0, r4
   4667c:	e59f1080 	ldr	r1, [pc, #128]	; 46704 <SMSC951xDeviceDumpRegs+0x1a8>
   46680:	e3a02e11 	mov	r2, #272	; 0x110
   46684:	ebffff8f 	bl	464c8 <SMSC951xDeviceDumpReg>
   46688:	e1a00004 	mov	r0, r4
   4668c:	e59f1074 	ldr	r1, [pc, #116]	; 46708 <SMSC951xDeviceDumpRegs+0x1ac>
   46690:	e3a02f47 	mov	r2, #284	; 0x11c
   46694:	ebffff8b 	bl	464c8 <SMSC951xDeviceDumpReg>
   46698:	e1a00004 	mov	r0, r4
   4669c:	e8bd4010 	pop	{r4, lr}
   466a0:	e59f1064 	ldr	r1, [pc, #100]	; 4670c <SMSC951xDeviceDumpRegs+0x1b0>
   466a4:	e3a02f4b 	mov	r2, #300	; 0x12c
   466a8:	eaffff86 	b	464c8 <SMSC951xDeviceDumpReg>
   466ac:	e59f005c 	ldr	r0, [pc, #92]	; 46710 <SMSC951xDeviceDumpRegs+0x1b4>
   466b0:	e59f105c 	ldr	r1, [pc, #92]	; 46714 <SMSC951xDeviceDumpRegs+0x1b8>
   466b4:	e59f205c 	ldr	r2, [pc, #92]	; 46718 <SMSC951xDeviceDumpRegs+0x1bc>
   466b8:	ebffc1e2 	bl	36e48 <uspi_assertion_failed>
   466bc:	eaffffa9 	b	46568 <SMSC951xDeviceDumpRegs+0xc>
   466c0:	000577f8 	.word	0x000577f8
   466c4:	00057800 	.word	0x00057800
   466c8:	00057808 	.word	0x00057808
   466cc:	00057810 	.word	0x00057810
   466d0:	00057818 	.word	0x00057818
   466d4:	00057820 	.word	0x00057820
   466d8:	0005782c 	.word	0x0005782c
   466dc:	00057834 	.word	0x00057834
   466e0:	00057838 	.word	0x00057838
   466e4:	00057844 	.word	0x00057844
   466e8:	0005784c 	.word	0x0005784c
   466ec:	00057858 	.word	0x00057858
   466f0:	00057864 	.word	0x00057864
   466f4:	00057870 	.word	0x00057870
   466f8:	00057878 	.word	0x00057878
   466fc:	00057880 	.word	0x00057880
   46700:	00057888 	.word	0x00057888
   46704:	00057890 	.word	0x00057890
   46708:	00057898 	.word	0x00057898
   4670c:	000578a0 	.word	0x000578a0
   46710:	00056434 	.word	0x00056434
   46714:	0005765c 	.word	0x0005765c
   46718:	00000203 	.word	0x00000203

0004671c <LAN7800Device>:
   4671c:	e92d4038 	push	{r3, r4, r5, lr}
   46720:	e2504000 	subs	r4, r0, #0
   46724:	e1a05001 	mov	r5, r1
   46728:	0a000012 	beq	46778 <LAN7800Device+0x5c>
   4672c:	e1a01005 	mov	r1, r5
   46730:	e1a00004 	mov	r0, r4
   46734:	ebfffac4 	bl	4524c <USBFunctionCopy>
   46738:	e3a03000 	mov	r3, #0
   4673c:	e59f2048 	ldr	r2, [pc, #72]	; 4678c <LAN7800Device+0x70>
   46740:	e5843010 	str	r3, [r4, #16]
   46744:	e5843014 	str	r3, [r4, #20]
   46748:	e5843024 	str	r3, [r4, #36]	; 0x24
   4674c:	e5842000 	str	r2, [r4]
   46750:	e3a00d19 	mov	r0, #1600	; 0x640
   46754:	ebffc194 	bl	36dac <malloc>
   46758:	e3500000 	cmp	r0, #0
   4675c:	e5840024 	str	r0, [r4, #36]	; 0x24
   46760:	18bd8038 	popne	{r3, r4, r5, pc}
   46764:	e59f0024 	ldr	r0, [pc, #36]	; 46790 <LAN7800Device+0x74>
   46768:	e59f1024 	ldr	r1, [pc, #36]	; 46794 <LAN7800Device+0x78>
   4676c:	e59f2024 	ldr	r2, [pc, #36]	; 46798 <LAN7800Device+0x7c>
   46770:	e8bd4038 	pop	{r3, r4, r5, lr}
   46774:	eaffc1b3 	b	36e48 <uspi_assertion_failed>
   46778:	e59f001c 	ldr	r0, [pc, #28]	; 4679c <LAN7800Device+0x80>
   4677c:	e59f1010 	ldr	r1, [pc, #16]	; 46794 <LAN7800Device+0x78>
   46780:	e3a020f8 	mov	r2, #248	; 0xf8
   46784:	ebffc1af 	bl	36e48 <uspi_assertion_failed>
   46788:	eaffffe7 	b	4672c <LAN7800Device+0x10>
   4678c:	00047164 	.word	0x00047164
   46790:	00057668 	.word	0x00057668
   46794:	000578b0 	.word	0x000578b0
   46798:	00000102 	.word	0x00000102
   4679c:	00056434 	.word	0x00056434

000467a0 <_LAN7800Device>:
   467a0:	e92d4010 	push	{r4, lr}
   467a4:	e2504000 	subs	r4, r0, #0
   467a8:	0a000018 	beq	46810 <_LAN7800Device+0x70>
   467ac:	e5940024 	ldr	r0, [r4, #36]	; 0x24
   467b0:	e3500000 	cmp	r0, #0
   467b4:	0a000002 	beq	467c4 <_LAN7800Device+0x24>
   467b8:	ebffc17c 	bl	36db0 <free>
   467bc:	e3a03000 	mov	r3, #0
   467c0:	e5843024 	str	r3, [r4, #36]	; 0x24
   467c4:	e5940014 	ldr	r0, [r4, #20]
   467c8:	e3500000 	cmp	r0, #0
   467cc:	0a000004 	beq	467e4 <_LAN7800Device+0x44>
   467d0:	ebfff437 	bl	438b4 <_USBEndpoint>
   467d4:	e5940014 	ldr	r0, [r4, #20]
   467d8:	ebffc174 	bl	36db0 <free>
   467dc:	e3a03000 	mov	r3, #0
   467e0:	e5843014 	str	r3, [r4, #20]
   467e4:	e5940010 	ldr	r0, [r4, #16]
   467e8:	e3500000 	cmp	r0, #0
   467ec:	0a000004 	beq	46804 <_LAN7800Device+0x64>
   467f0:	ebfff42f 	bl	438b4 <_USBEndpoint>
   467f4:	e5940010 	ldr	r0, [r4, #16]
   467f8:	ebffc16c 	bl	36db0 <free>
   467fc:	e3a03000 	mov	r3, #0
   46800:	e5843010 	str	r3, [r4, #16]
   46804:	e1a00004 	mov	r0, r4
   46808:	e8bd4010 	pop	{r4, lr}
   4680c:	eafffacd 	b	45348 <_USBFunction>
   46810:	e59f000c 	ldr	r0, [pc, #12]	; 46824 <_LAN7800Device+0x84>
   46814:	e59f100c 	ldr	r1, [pc, #12]	; 46828 <_LAN7800Device+0x88>
   46818:	e59f200c 	ldr	r2, [pc, #12]	; 4682c <_LAN7800Device+0x8c>
   4681c:	ebffc189 	bl	36e48 <uspi_assertion_failed>
   46820:	eaffffe1 	b	467ac <_LAN7800Device+0xc>
   46824:	00056434 	.word	0x00056434
   46828:	000578b0 	.word	0x000578b0
   4682c:	00000107 	.word	0x00000107

00046830 <LAN7800DeviceGetMACAddress>:
   46830:	e92d4010 	push	{r4, lr}
   46834:	e2504000 	subs	r4, r0, #0
   46838:	0a000001 	beq	46844 <LAN7800DeviceGetMACAddress+0x14>
   4683c:	e2840018 	add	r0, r4, #24
   46840:	e8bd8010 	pop	{r4, pc}
   46844:	e59f0010 	ldr	r0, [pc, #16]	; 4685c <LAN7800DeviceGetMACAddress+0x2c>
   46848:	e59f1010 	ldr	r1, [pc, #16]	; 46860 <LAN7800DeviceGetMACAddress+0x30>
   4684c:	e59f2010 	ldr	r2, [pc, #16]	; 46864 <LAN7800DeviceGetMACAddress+0x34>
   46850:	ebffc17c 	bl	36e48 <uspi_assertion_failed>
   46854:	e2840018 	add	r0, r4, #24
   46858:	e8bd8010 	pop	{r4, pc}
   4685c:	00056434 	.word	0x00056434
   46860:	000578b0 	.word	0x000578b0
   46864:	000001de 	.word	0x000001de

00046868 <LAN7800DeviceSendFrame>:
   46868:	e92d4070 	push	{r4, r5, r6, lr}
   4686c:	e2504000 	subs	r4, r0, #0
   46870:	e1a06001 	mov	r6, r1
   46874:	e1a05002 	mov	r5, r2
   46878:	0a00001f 	beq	468fc <LAN7800DeviceSendFrame+0x94>
   4687c:	e59f30c8 	ldr	r3, [pc, #200]	; 4694c <LAN7800DeviceSendFrame+0xe4>
   46880:	e1550003 	cmp	r5, r3
   46884:	8a00001a 	bhi	468f4 <LAN7800DeviceSendFrame+0x8c>
   46888:	e5943024 	ldr	r3, [r4, #36]	; 0x24
   4688c:	e3530000 	cmp	r3, #0
   46890:	0a00001e 	beq	46910 <LAN7800DeviceSendFrame+0xa8>
   46894:	e3560000 	cmp	r6, #0
   46898:	0a000026 	beq	46938 <LAN7800DeviceSendFrame+0xd0>
   4689c:	e5940024 	ldr	r0, [r4, #36]	; 0x24
   468a0:	e1a01006 	mov	r1, r6
   468a4:	e1a02005 	mov	r2, r5
   468a8:	e2800008 	add	r0, r0, #8
   468ac:	eb000604 	bl	480c4 <uspi_memcpy>
   468b0:	e3a01000 	mov	r1, #0
   468b4:	e5940014 	ldr	r0, [r4, #20]
   468b8:	e5943024 	ldr	r3, [r4, #36]	; 0x24
   468bc:	e3852501 	orr	r2, r5, #4194304	; 0x400000
   468c0:	e1500001 	cmp	r0, r1
   468c4:	e5831004 	str	r1, [r3, #4]
   468c8:	e5832000 	str	r2, [r3]
   468cc:	0a000014 	beq	46924 <LAN7800DeviceSendFrame+0xbc>
   468d0:	e1a00004 	mov	r0, r4
   468d4:	ebfffb1c 	bl	4554c <USBFunctionGetHost>
   468d8:	e2853008 	add	r3, r5, #8
   468dc:	e5941014 	ldr	r1, [r4, #20]
   468e0:	e5942024 	ldr	r2, [r4, #36]	; 0x24
   468e4:	ebffe44c 	bl	3fa1c <DWHCIDeviceTransfer>
   468e8:	e1e00000 	mvn	r0, r0
   468ec:	e1a00fa0 	lsr	r0, r0, #31
   468f0:	e8bd8070 	pop	{r4, r5, r6, pc}
   468f4:	e3a00000 	mov	r0, #0
   468f8:	e8bd8070 	pop	{r4, r5, r6, pc}
   468fc:	e59f004c 	ldr	r0, [pc, #76]	; 46950 <LAN7800DeviceSendFrame+0xe8>
   46900:	e59f104c 	ldr	r1, [pc, #76]	; 46954 <LAN7800DeviceSendFrame+0xec>
   46904:	e59f204c 	ldr	r2, [pc, #76]	; 46958 <LAN7800DeviceSendFrame+0xf0>
   46908:	ebffc14e 	bl	36e48 <uspi_assertion_failed>
   4690c:	eaffffda 	b	4687c <LAN7800DeviceSendFrame+0x14>
   46910:	e59f0044 	ldr	r0, [pc, #68]	; 4695c <LAN7800DeviceSendFrame+0xf4>
   46914:	e59f1038 	ldr	r1, [pc, #56]	; 46954 <LAN7800DeviceSendFrame+0xec>
   46918:	e3a02f7b 	mov	r2, #492	; 0x1ec
   4691c:	ebffc149 	bl	36e48 <uspi_assertion_failed>
   46920:	eaffffdb 	b	46894 <LAN7800DeviceSendFrame+0x2c>
   46924:	e59f0034 	ldr	r0, [pc, #52]	; 46960 <LAN7800DeviceSendFrame+0xf8>
   46928:	e59f1024 	ldr	r1, [pc, #36]	; 46954 <LAN7800DeviceSendFrame+0xec>
   4692c:	e59f2030 	ldr	r2, [pc, #48]	; 46964 <LAN7800DeviceSendFrame+0xfc>
   46930:	ebffc144 	bl	36e48 <uspi_assertion_failed>
   46934:	eaffffe5 	b	468d0 <LAN7800DeviceSendFrame+0x68>
   46938:	e59f0028 	ldr	r0, [pc, #40]	; 46968 <LAN7800DeviceSendFrame+0x100>
   4693c:	e59f1010 	ldr	r1, [pc, #16]	; 46954 <LAN7800DeviceSendFrame+0xec>
   46940:	e59f2024 	ldr	r2, [pc, #36]	; 4696c <LAN7800DeviceSendFrame+0x104>
   46944:	ebffc13f 	bl	36e48 <uspi_assertion_failed>
   46948:	eaffffd3 	b	4689c <LAN7800DeviceSendFrame+0x34>
   4694c:	00000638 	.word	0x00000638
   46950:	00056434 	.word	0x00056434
   46954:	000578b0 	.word	0x000578b0
   46958:	000001e5 	.word	0x000001e5
   4695c:	00057668 	.word	0x00057668
   46960:	00057680 	.word	0x00057680
   46964:	000001f3 	.word	0x000001f3
   46968:	000579e4 	.word	0x000579e4
   4696c:	000001ed 	.word	0x000001ed

00046970 <LAN7800DeviceReceiveFrame>:
   46970:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   46974:	e2505000 	subs	r5, r0, #0
   46978:	e24dd034 	sub	sp, sp, #52	; 0x34
   4697c:	e1a06001 	mov	r6, r1
   46980:	e1a07002 	mov	r7, r2
   46984:	0a000042 	beq	46a94 <LAN7800DeviceReceiveFrame+0x124>
   46988:	e5953010 	ldr	r3, [r5, #16]
   4698c:	e3530000 	cmp	r3, #0
   46990:	0a000044 	beq	46aa8 <LAN7800DeviceReceiveFrame+0x138>
   46994:	e3560000 	cmp	r6, #0
   46998:	0a000047 	beq	46abc <LAN7800DeviceReceiveFrame+0x14c>
   4699c:	e3a04000 	mov	r4, #0
   469a0:	e5951010 	ldr	r1, [r5, #16]
   469a4:	e1a02006 	mov	r2, r6
   469a8:	e3a03d19 	mov	r3, #1600	; 0x640
   469ac:	e28d000c 	add	r0, sp, #12
   469b0:	e58d4000 	str	r4, [sp]
   469b4:	ebfff49d 	bl	43c30 <USBRequest>
   469b8:	e1a00005 	mov	r0, r5
   469bc:	ebfffae2 	bl	4554c <USBFunctionGetHost>
   469c0:	e28d100c 	add	r1, sp, #12
   469c4:	ebffe2f5 	bl	3f5a0 <DWHCIDeviceSubmitBlockingRequest>
   469c8:	e1500004 	cmp	r0, r4
   469cc:	0a000022 	beq	46a5c <LAN7800DeviceReceiveFrame+0xec>
   469d0:	e28d000c 	add	r0, sp, #12
   469d4:	ebfff512 	bl	43e24 <USBRequestGetResultLength>
   469d8:	e3500009 	cmp	r0, #9
   469dc:	9a00001e 	bls	46a5c <LAN7800DeviceReceiveFrame+0xec>
   469e0:	e5963000 	ldr	r3, [r6]
   469e4:	e3130501 	tst	r3, #4194304	; 0x400000
   469e8:	1a000020 	bne	46a70 <LAN7800DeviceReceiveFrame+0x100>
   469ec:	e1a03903 	lsl	r3, r3, #18
   469f0:	e1a04923 	lsr	r4, r3, #18
   469f4:	e240000a 	sub	r0, r0, #10
   469f8:	e1500004 	cmp	r0, r4
   469fc:	0a000003 	beq	46a10 <LAN7800DeviceReceiveFrame+0xa0>
   46a00:	e59f00dc 	ldr	r0, [pc, #220]	; 46ae4 <LAN7800DeviceReceiveFrame+0x174>
   46a04:	e59f10dc 	ldr	r1, [pc, #220]	; 46ae8 <LAN7800DeviceReceiveFrame+0x178>
   46a08:	e59f20dc 	ldr	r2, [pc, #220]	; 46aec <LAN7800DeviceReceiveFrame+0x17c>
   46a0c:	ebffc10d 	bl	36e48 <uspi_assertion_failed>
   46a10:	e3540004 	cmp	r4, #4
   46a14:	9a00000c 	bls	46a4c <LAN7800DeviceReceiveFrame+0xdc>
   46a18:	e2444004 	sub	r4, r4, #4
   46a1c:	e1a02004 	mov	r2, r4
   46a20:	e1a00006 	mov	r0, r6
   46a24:	e286100a 	add	r1, r6, #10
   46a28:	eb0005a5 	bl	480c4 <uspi_memcpy>
   46a2c:	e3570000 	cmp	r7, #0
   46a30:	0a000026 	beq	46ad0 <LAN7800DeviceReceiveFrame+0x160>
   46a34:	e28d000c 	add	r0, sp, #12
   46a38:	e5874000 	str	r4, [r7]
   46a3c:	ebfff4ab 	bl	43cf0 <_USBRequest>
   46a40:	e3a00001 	mov	r0, #1
   46a44:	e28dd034 	add	sp, sp, #52	; 0x34
   46a48:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   46a4c:	e59f009c 	ldr	r0, [pc, #156]	; 46af0 <LAN7800DeviceReceiveFrame+0x180>
   46a50:	e59f1090 	ldr	r1, [pc, #144]	; 46ae8 <LAN7800DeviceReceiveFrame+0x178>
   46a54:	e3a02f87 	mov	r2, #540	; 0x21c
   46a58:	ebffc0fa 	bl	36e48 <uspi_assertion_failed>
   46a5c:	e28d000c 	add	r0, sp, #12
   46a60:	ebfff4a2 	bl	43cf0 <_USBRequest>
   46a64:	e3a00000 	mov	r0, #0
   46a68:	e28dd034 	add	sp, sp, #52	; 0x34
   46a6c:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   46a70:	e3a01002 	mov	r1, #2
   46a74:	e59f2078 	ldr	r2, [pc, #120]	; 46af4 <LAN7800DeviceReceiveFrame+0x184>
   46a78:	e59f0078 	ldr	r0, [pc, #120]	; 46af8 <LAN7800DeviceReceiveFrame+0x188>
   46a7c:	ebff75bd 	bl	24178 <LogWrite>
   46a80:	e28d000c 	add	r0, sp, #12
   46a84:	ebfff499 	bl	43cf0 <_USBRequest>
   46a88:	e1a00004 	mov	r0, r4
   46a8c:	e28dd034 	add	sp, sp, #52	; 0x34
   46a90:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   46a94:	e59f0060 	ldr	r0, [pc, #96]	; 46afc <LAN7800DeviceReceiveFrame+0x18c>
   46a98:	e59f1048 	ldr	r1, [pc, #72]	; 46ae8 <LAN7800DeviceReceiveFrame+0x178>
   46a9c:	e59f205c 	ldr	r2, [pc, #92]	; 46b00 <LAN7800DeviceReceiveFrame+0x190>
   46aa0:	ebffc0e8 	bl	36e48 <uspi_assertion_failed>
   46aa4:	eaffffb7 	b	46988 <LAN7800DeviceReceiveFrame+0x18>
   46aa8:	e59f0054 	ldr	r0, [pc, #84]	; 46b04 <LAN7800DeviceReceiveFrame+0x194>
   46aac:	e59f1034 	ldr	r1, [pc, #52]	; 46ae8 <LAN7800DeviceReceiveFrame+0x178>
   46ab0:	e3a02f7f 	mov	r2, #508	; 0x1fc
   46ab4:	ebffc0e3 	bl	36e48 <uspi_assertion_failed>
   46ab8:	eaffffb5 	b	46994 <LAN7800DeviceReceiveFrame+0x24>
   46abc:	e59f0044 	ldr	r0, [pc, #68]	; 46b08 <LAN7800DeviceReceiveFrame+0x198>
   46ac0:	e59f1020 	ldr	r1, [pc, #32]	; 46ae8 <LAN7800DeviceReceiveFrame+0x178>
   46ac4:	e59f2040 	ldr	r2, [pc, #64]	; 46b0c <LAN7800DeviceReceiveFrame+0x19c>
   46ac8:	ebffc0de 	bl	36e48 <uspi_assertion_failed>
   46acc:	eaffffb2 	b	4699c <LAN7800DeviceReceiveFrame+0x2c>
   46ad0:	e59f0038 	ldr	r0, [pc, #56]	; 46b10 <LAN7800DeviceReceiveFrame+0x1a0>
   46ad4:	e59f100c 	ldr	r1, [pc, #12]	; 46ae8 <LAN7800DeviceReceiveFrame+0x178>
   46ad8:	e59f2034 	ldr	r2, [pc, #52]	; 46b14 <LAN7800DeviceReceiveFrame+0x1a4>
   46adc:	ebffc0d9 	bl	36e48 <uspi_assertion_failed>
   46ae0:	eaffffd3 	b	46a34 <LAN7800DeviceReceiveFrame+0xc4>
   46ae4:	000578bc 	.word	0x000578bc
   46ae8:	000578b0 	.word	0x000578b0
   46aec:	0000021b 	.word	0x0000021b
   46af0:	000576f8 	.word	0x000576f8
   46af4:	000576c0 	.word	0x000576c0
   46af8:	000578a8 	.word	0x000578a8
   46afc:	00056434 	.word	0x00056434
   46b00:	000001fa 	.word	0x000001fa
   46b04:	000576a0 	.word	0x000576a0
   46b08:	000579e4 	.word	0x000579e4
   46b0c:	000001fd 	.word	0x000001fd
   46b10:	0005770c 	.word	0x0005770c
   46b14:	00000229 	.word	0x00000229

00046b18 <LAN7800DeviceWriteReg>:
   46b18:	e92d4070 	push	{r4, r5, r6, lr}
   46b1c:	e2504000 	subs	r4, r0, #0
   46b20:	e24dd018 	sub	sp, sp, #24
   46b24:	e1a05001 	mov	r5, r1
   46b28:	e58d2014 	str	r2, [sp, #20]
   46b2c:	0a00001c 	beq	46ba4 <LAN7800DeviceWriteReg+0x8c>
   46b30:	e1a00004 	mov	r0, r4
   46b34:	ebfffa84 	bl	4554c <USBFunctionGetHost>
   46b38:	e1a06000 	mov	r6, r0
   46b3c:	e1a00004 	mov	r0, r4
   46b40:	ebfffa6a 	bl	454f0 <USBFunctionGetEndpoint0>
   46b44:	e3a04000 	mov	r4, #0
   46b48:	e3a0c004 	mov	ip, #4
   46b4c:	e6ff2075 	uxth	r2, r5
   46b50:	e28d3014 	add	r3, sp, #20
   46b54:	e98d100c 	stmib	sp, {r2, r3, ip}
   46b58:	e1a01000 	mov	r1, r0
   46b5c:	e58d4000 	str	r4, [sp]
   46b60:	e1a00006 	mov	r0, r6
   46b64:	e3a02040 	mov	r2, #64	; 0x40
   46b68:	e3a030a0 	mov	r3, #160	; 0xa0
   46b6c:	ebffe321 	bl	3f7f8 <DWHCIDeviceControlMessage>
   46b70:	e1500004 	cmp	r0, r4
   46b74:	a3a00001 	movge	r0, #1
   46b78:	ba000001 	blt	46b84 <LAN7800DeviceWriteReg+0x6c>
   46b7c:	e28dd018 	add	sp, sp, #24
   46b80:	e8bd8070 	pop	{r4, r5, r6, pc}
   46b84:	e1a03005 	mov	r3, r5
   46b88:	e59f0028 	ldr	r0, [pc, #40]	; 46bb8 <LAN7800DeviceWriteReg+0xa0>
   46b8c:	e3a01002 	mov	r1, #2
   46b90:	e59f2024 	ldr	r2, [pc, #36]	; 46bbc <LAN7800DeviceWriteReg+0xa4>
   46b94:	ebff7577 	bl	24178 <LogWrite>
   46b98:	e1a00004 	mov	r0, r4
   46b9c:	e28dd018 	add	sp, sp, #24
   46ba0:	e8bd8070 	pop	{r4, r5, r6, pc}
   46ba4:	e59f0014 	ldr	r0, [pc, #20]	; 46bc0 <LAN7800DeviceWriteReg+0xa8>
   46ba8:	e59f1014 	ldr	r1, [pc, #20]	; 46bc4 <LAN7800DeviceWriteReg+0xac>
   46bac:	e59f2014 	ldr	r2, [pc, #20]	; 46bc8 <LAN7800DeviceWriteReg+0xb0>
   46bb0:	ebffc0a4 	bl	36e48 <uspi_assertion_failed>
   46bb4:	eaffffdd 	b	46b30 <LAN7800DeviceWriteReg+0x18>
   46bb8:	000578a8 	.word	0x000578a8
   46bbc:	000578ec 	.word	0x000578ec
   46bc0:	00056434 	.word	0x00056434
   46bc4:	000578b0 	.word	0x000578b0
   46bc8:	000002e2 	.word	0x000002e2

00046bcc <LAN7800DeviceInitMACAddress>:
   46bcc:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   46bd0:	e2505000 	subs	r5, r0, #0
   46bd4:	e24dd018 	sub	sp, sp, #24
   46bd8:	0a00003d 	beq	46cd4 <LAN7800DeviceInitMACAddress+0x108>
   46bdc:	e28d0004 	add	r0, sp, #4
   46be0:	ebffc093 	bl	36e34 <GetMACAddress>
   46be4:	e3500000 	cmp	r0, #0
   46be8:	1a000002 	bne	46bf8 <LAN7800DeviceInitMACAddress+0x2c>
   46bec:	e3a00000 	mov	r0, #0
   46bf0:	e28dd018 	add	sp, sp, #24
   46bf4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   46bf8:	e2856018 	add	r6, r5, #24
   46bfc:	e28d1004 	add	r1, sp, #4
   46c00:	e1a00006 	mov	r0, r6
   46c04:	ebfff87c 	bl	44dfc <MACAddressSet>
   46c08:	e5dd3006 	ldrb	r3, [sp, #6]
   46c0c:	e5dd4005 	ldrb	r4, [sp, #5]
   46c10:	e5dd2004 	ldrb	r2, [sp, #4]
   46c14:	e1a03803 	lsl	r3, r3, #16
   46c18:	e1833404 	orr	r3, r3, r4, lsl #8
   46c1c:	e5dd4007 	ldrb	r4, [sp, #7]
   46c20:	e1833002 	orr	r3, r3, r2
   46c24:	e1834c04 	orr	r4, r3, r4, lsl #24
   46c28:	e1a02004 	mov	r2, r4
   46c2c:	e1a00005 	mov	r0, r5
   46c30:	e3a01f47 	mov	r1, #284	; 0x11c
   46c34:	e5dd7008 	ldrb	r7, [sp, #8]
   46c38:	e5dd8009 	ldrb	r8, [sp, #9]
   46c3c:	ebffffb5 	bl	46b18 <LAN7800DeviceWriteReg>
   46c40:	e3500000 	cmp	r0, #0
   46c44:	0affffe8 	beq	46bec <LAN7800DeviceInitMACAddress+0x20>
   46c48:	e1877408 	orr	r7, r7, r8, lsl #8
   46c4c:	e1a02007 	mov	r2, r7
   46c50:	e1a00005 	mov	r0, r5
   46c54:	e3a01f46 	mov	r1, #280	; 0x118
   46c58:	ebffffae 	bl	46b18 <LAN7800DeviceWriteReg>
   46c5c:	e3500000 	cmp	r0, #0
   46c60:	0affffe1 	beq	46bec <LAN7800DeviceInitMACAddress+0x20>
   46c64:	e1a02004 	mov	r2, r4
   46c68:	e1a00005 	mov	r0, r5
   46c6c:	e59f1074 	ldr	r1, [pc, #116]	; 46ce8 <LAN7800DeviceInitMACAddress+0x11c>
   46c70:	ebffffa8 	bl	46b18 <LAN7800DeviceWriteReg>
   46c74:	e3500000 	cmp	r0, #0
   46c78:	0affffdb 	beq	46bec <LAN7800DeviceInitMACAddress+0x20>
   46c7c:	e1a00005 	mov	r0, r5
   46c80:	e3872102 	orr	r2, r7, #-2147483648	; 0x80000000
   46c84:	e3a01b01 	mov	r1, #1024	; 0x400
   46c88:	ebffffa2 	bl	46b18 <LAN7800DeviceWriteReg>
   46c8c:	e3500000 	cmp	r0, #0
   46c90:	0affffd5 	beq	46bec <LAN7800DeviceInitMACAddress+0x20>
   46c94:	e28d000c 	add	r0, sp, #12
   46c98:	eb00026a 	bl	47648 <String>
   46c9c:	e28d100c 	add	r1, sp, #12
   46ca0:	e1a00006 	mov	r0, r6
   46ca4:	ebfff903 	bl	450b8 <MACAddressFormat>
   46ca8:	e28d000c 	add	r0, sp, #12
   46cac:	eb000298 	bl	47714 <StringGet>
   46cb0:	e3a01004 	mov	r1, #4
   46cb4:	e1a03000 	mov	r3, r0
   46cb8:	e59f202c 	ldr	r2, [pc, #44]	; 46cec <LAN7800DeviceInitMACAddress+0x120>
   46cbc:	e59f002c 	ldr	r0, [pc, #44]	; 46cf0 <LAN7800DeviceInitMACAddress+0x124>
   46cc0:	ebff752c 	bl	24178 <LogWrite>
   46cc4:	e28d000c 	add	r0, sp, #12
   46cc8:	eb000280 	bl	476d0 <_String>
   46ccc:	e3a00001 	mov	r0, #1
   46cd0:	eaffffc6 	b	46bf0 <LAN7800DeviceInitMACAddress+0x24>
   46cd4:	e59f0018 	ldr	r0, [pc, #24]	; 46cf4 <LAN7800DeviceInitMACAddress+0x128>
   46cd8:	e59f1018 	ldr	r1, [pc, #24]	; 46cf8 <LAN7800DeviceInitMACAddress+0x12c>
   46cdc:	e3a02d09 	mov	r2, #576	; 0x240
   46ce0:	ebffc058 	bl	36e48 <uspi_assertion_failed>
   46ce4:	eaffffbc 	b	46bdc <LAN7800DeviceInitMACAddress+0x10>
   46ce8:	00000404 	.word	0x00000404
   46cec:	00057720 	.word	0x00057720
   46cf0:	000578a8 	.word	0x000578a8
   46cf4:	00056434 	.word	0x00056434
   46cf8:	000578b0 	.word	0x000578b0

00046cfc <LAN7800DeviceReadReg>:
   46cfc:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   46d00:	e2504000 	subs	r4, r0, #0
   46d04:	e24dd014 	sub	sp, sp, #20
   46d08:	e1a05001 	mov	r5, r1
   46d0c:	e1a06002 	mov	r6, r2
   46d10:	0a00001b 	beq	46d84 <LAN7800DeviceReadReg+0x88>
   46d14:	e1a00004 	mov	r0, r4
   46d18:	ebfffa0b 	bl	4554c <USBFunctionGetHost>
   46d1c:	e1a07000 	mov	r7, r0
   46d20:	e1a00004 	mov	r0, r4
   46d24:	ebfff9f1 	bl	454f0 <USBFunctionGetEndpoint0>
   46d28:	e3a04000 	mov	r4, #0
   46d2c:	e3a02004 	mov	r2, #4
   46d30:	e6ff3075 	uxth	r3, r5
   46d34:	e1a01000 	mov	r1, r0
   46d38:	e58d200c 	str	r2, [sp, #12]
   46d3c:	e58d3004 	str	r3, [sp, #4]
   46d40:	e1a00007 	mov	r0, r7
   46d44:	e58d6008 	str	r6, [sp, #8]
   46d48:	e58d4000 	str	r4, [sp]
   46d4c:	e3a020c0 	mov	r2, #192	; 0xc0
   46d50:	e3a030a1 	mov	r3, #161	; 0xa1
   46d54:	ebffe2a7 	bl	3f7f8 <DWHCIDeviceControlMessage>
   46d58:	e3500004 	cmp	r0, #4
   46d5c:	03a00001 	moveq	r0, #1
   46d60:	0a000005 	beq	46d7c <LAN7800DeviceReadReg+0x80>
   46d64:	e59f002c 	ldr	r0, [pc, #44]	; 46d98 <LAN7800DeviceReadReg+0x9c>
   46d68:	e1a03005 	mov	r3, r5
   46d6c:	e3a01002 	mov	r1, #2
   46d70:	e59f2024 	ldr	r2, [pc, #36]	; 46d9c <LAN7800DeviceReadReg+0xa0>
   46d74:	ebff74ff 	bl	24178 <LogWrite>
   46d78:	e1a00004 	mov	r0, r4
   46d7c:	e28dd014 	add	sp, sp, #20
   46d80:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   46d84:	e59f0014 	ldr	r0, [pc, #20]	; 46da0 <LAN7800DeviceReadReg+0xa4>
   46d88:	e59f1014 	ldr	r1, [pc, #20]	; 46da4 <LAN7800DeviceReadReg+0xa8>
   46d8c:	e59f2014 	ldr	r2, [pc, #20]	; 46da8 <LAN7800DeviceReadReg+0xac>
   46d90:	ebffc02c 	bl	36e48 <uspi_assertion_failed>
   46d94:	eaffffde 	b	46d14 <LAN7800DeviceReadReg+0x18>
   46d98:	000578a8 	.word	0x000578a8
   46d9c:	000577d4 	.word	0x000577d4
   46da0:	00056434 	.word	0x00056434
   46da4:	000578b0 	.word	0x000578b0
   46da8:	000002f3 	.word	0x000002f3

00046dac <LAN7800DeviceWaitReg>:
   46dac:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   46db0:	e2505000 	subs	r5, r0, #0
   46db4:	e24dd008 	sub	sp, sp, #8
   46db8:	e1a06001 	mov	r6, r1
   46dbc:	e1a07002 	mov	r7, r2
   46dc0:	e1a08003 	mov	r8, r3
   46dc4:	0a000014 	beq	46e1c <LAN7800DeviceWaitReg+0x70>
   46dc8:	e3a00001 	mov	r0, #1
   46dcc:	ebffbfff 	bl	36dd0 <MsDelay>
   46dd0:	e59f4058 	ldr	r4, [pc, #88]	; 46e30 <LAN7800DeviceWaitReg+0x84>
   46dd4:	ea000007 	b	46df8 <LAN7800DeviceWaitReg+0x4c>
   46dd8:	e59d3004 	ldr	r3, [sp, #4]
   46ddc:	e3a00001 	mov	r0, #1
   46de0:	e0033007 	and	r3, r3, r7
   46de4:	e1530008 	cmp	r3, r8
   46de8:	0a000009 	beq	46e14 <LAN7800DeviceWaitReg+0x68>
   46dec:	ebffbff7 	bl	36dd0 <MsDelay>
   46df0:	e2544001 	subs	r4, r4, #1
   46df4:	0a000005 	beq	46e10 <LAN7800DeviceWaitReg+0x64>
   46df8:	e1a00005 	mov	r0, r5
   46dfc:	e1a01006 	mov	r1, r6
   46e00:	e28d2004 	add	r2, sp, #4
   46e04:	ebffffbc 	bl	46cfc <LAN7800DeviceReadReg>
   46e08:	e3500000 	cmp	r0, #0
   46e0c:	1afffff1 	bne	46dd8 <LAN7800DeviceWaitReg+0x2c>
   46e10:	e3a00000 	mov	r0, #0
   46e14:	e28dd008 	add	sp, sp, #8
   46e18:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   46e1c:	e59f0010 	ldr	r0, [pc, #16]	; 46e34 <LAN7800DeviceWaitReg+0x88>
   46e20:	e59f1010 	ldr	r1, [pc, #16]	; 46e38 <LAN7800DeviceWaitReg+0x8c>
   46e24:	e59f2010 	ldr	r2, [pc, #16]	; 46e3c <LAN7800DeviceWaitReg+0x90>
   46e28:	ebffc006 	bl	36e48 <uspi_assertion_failed>
   46e2c:	eaffffe5 	b	46dc8 <LAN7800DeviceWaitReg+0x1c>
   46e30:	000003e7 	.word	0x000003e7
   46e34:	00056434 	.word	0x00056434
   46e38:	000578b0 	.word	0x000578b0
   46e3c:	000002b9 	.word	0x000002b9

00046e40 <LAN7800DevicePHYWrite>:
   46e40:	e92d4070 	push	{r4, r5, r6, lr}
   46e44:	e2505000 	subs	r5, r0, #0
   46e48:	e1a04001 	mov	r4, r1
   46e4c:	e1a06002 	mov	r6, r2
   46e50:	0a000024 	beq	46ee8 <LAN7800DevicePHYWrite+0xa8>
   46e54:	e354001e 	cmp	r4, #30
   46e58:	8a00001d 	bhi	46ed4 <LAN7800DevicePHYWrite+0x94>
   46e5c:	e1a00005 	mov	r0, r5
   46e60:	e3a01e12 	mov	r1, #288	; 0x120
   46e64:	e3a02001 	mov	r2, #1
   46e68:	e3a03000 	mov	r3, #0
   46e6c:	ebffffce 	bl	46dac <LAN7800DeviceWaitReg>
   46e70:	e3500000 	cmp	r0, #0
   46e74:	1a000001 	bne	46e80 <LAN7800DevicePHYWrite+0x40>
   46e78:	e3a00000 	mov	r0, #0
   46e7c:	e8bd8070 	pop	{r4, r5, r6, pc}
   46e80:	e1a02006 	mov	r2, r6
   46e84:	e1a00005 	mov	r0, r5
   46e88:	e3a01f49 	mov	r1, #292	; 0x124
   46e8c:	ebffff21 	bl	46b18 <LAN7800DeviceWriteReg>
   46e90:	e3500000 	cmp	r0, #0
   46e94:	0afffff7 	beq	46e78 <LAN7800DevicePHYWrite+0x38>
   46e98:	e1a02304 	lsl	r2, r4, #6
   46e9c:	e2022d1f 	and	r2, r2, #1984	; 0x7c0
   46ea0:	e3822b02 	orr	r2, r2, #2048	; 0x800
   46ea4:	e3822003 	orr	r2, r2, #3
   46ea8:	e1a00005 	mov	r0, r5
   46eac:	e3a01e12 	mov	r1, #288	; 0x120
   46eb0:	ebffff18 	bl	46b18 <LAN7800DeviceWriteReg>
   46eb4:	e3500000 	cmp	r0, #0
   46eb8:	0affffee 	beq	46e78 <LAN7800DevicePHYWrite+0x38>
   46ebc:	e1a00005 	mov	r0, r5
   46ec0:	e8bd4070 	pop	{r4, r5, r6, lr}
   46ec4:	e3a01e12 	mov	r1, #288	; 0x120
   46ec8:	e3a02001 	mov	r2, #1
   46ecc:	e3a03000 	mov	r3, #0
   46ed0:	eaffffb5 	b	46dac <LAN7800DeviceWaitReg>
   46ed4:	e59f0020 	ldr	r0, [pc, #32]	; 46efc <LAN7800DevicePHYWrite+0xbc>
   46ed8:	e59f1020 	ldr	r1, [pc, #32]	; 46f00 <LAN7800DevicePHYWrite+0xc0>
   46edc:	e59f2020 	ldr	r2, [pc, #32]	; 46f04 <LAN7800DevicePHYWrite+0xc4>
   46ee0:	ebffbfd8 	bl	36e48 <uspi_assertion_failed>
   46ee4:	eaffffdc 	b	46e5c <LAN7800DevicePHYWrite+0x1c>
   46ee8:	e59f0018 	ldr	r0, [pc, #24]	; 46f08 <LAN7800DevicePHYWrite+0xc8>
   46eec:	e59f100c 	ldr	r1, [pc, #12]	; 46f00 <LAN7800DevicePHYWrite+0xc0>
   46ef0:	e59f2014 	ldr	r2, [pc, #20]	; 46f0c <LAN7800DevicePHYWrite+0xcc>
   46ef4:	ebffbfd3 	bl	36e48 <uspi_assertion_failed>
   46ef8:	eaffffd5 	b	46e54 <LAN7800DevicePHYWrite+0x14>
   46efc:	00057908 	.word	0x00057908
   46f00:	000578b0 	.word	0x000578b0
   46f04:	00000283 	.word	0x00000283
   46f08:	00056434 	.word	0x00056434
   46f0c:	00000282 	.word	0x00000282

00046f10 <LAN7800DevicePHYRead>:
   46f10:	e92d4070 	push	{r4, r5, r6, lr}
   46f14:	e2505000 	subs	r5, r0, #0
   46f18:	e24dd008 	sub	sp, sp, #8
   46f1c:	e1a04001 	mov	r4, r1
   46f20:	e1a06002 	mov	r6, r2
   46f24:	0a00002c 	beq	46fdc <LAN7800DevicePHYRead+0xcc>
   46f28:	e354001e 	cmp	r4, #30
   46f2c:	8a000025 	bhi	46fc8 <LAN7800DevicePHYRead+0xb8>
   46f30:	e1a00005 	mov	r0, r5
   46f34:	e3a01e12 	mov	r1, #288	; 0x120
   46f38:	e3a02001 	mov	r2, #1
   46f3c:	e3a03000 	mov	r3, #0
   46f40:	ebffff99 	bl	46dac <LAN7800DeviceWaitReg>
   46f44:	e3500000 	cmp	r0, #0
   46f48:	1a000002 	bne	46f58 <LAN7800DevicePHYRead+0x48>
   46f4c:	e3a00000 	mov	r0, #0
   46f50:	e28dd008 	add	sp, sp, #8
   46f54:	e8bd8070 	pop	{r4, r5, r6, pc}
   46f58:	e1a02304 	lsl	r2, r4, #6
   46f5c:	e2022d1f 	and	r2, r2, #1984	; 0x7c0
   46f60:	e3822b02 	orr	r2, r2, #2048	; 0x800
   46f64:	e3822001 	orr	r2, r2, #1
   46f68:	e1a00005 	mov	r0, r5
   46f6c:	e3a01e12 	mov	r1, #288	; 0x120
   46f70:	ebfffee8 	bl	46b18 <LAN7800DeviceWriteReg>
   46f74:	e3500000 	cmp	r0, #0
   46f78:	0afffff3 	beq	46f4c <LAN7800DevicePHYRead+0x3c>
   46f7c:	e1a00005 	mov	r0, r5
   46f80:	e3a01e12 	mov	r1, #288	; 0x120
   46f84:	e3a02001 	mov	r2, #1
   46f88:	e3a03000 	mov	r3, #0
   46f8c:	ebffff86 	bl	46dac <LAN7800DeviceWaitReg>
   46f90:	e3500000 	cmp	r0, #0
   46f94:	0affffec 	beq	46f4c <LAN7800DevicePHYRead+0x3c>
   46f98:	e1a00005 	mov	r0, r5
   46f9c:	e3a01f49 	mov	r1, #292	; 0x124
   46fa0:	e28d2004 	add	r2, sp, #4
   46fa4:	ebffff54 	bl	46cfc <LAN7800DeviceReadReg>
   46fa8:	e3500000 	cmp	r0, #0
   46fac:	0affffe6 	beq	46f4c <LAN7800DevicePHYRead+0x3c>
   46fb0:	e3560000 	cmp	r6, #0
   46fb4:	0a00000d 	beq	46ff0 <LAN7800DevicePHYRead+0xe0>
   46fb8:	e59d3004 	ldr	r3, [sp, #4]
   46fbc:	e3a00001 	mov	r0, #1
   46fc0:	e1c630b0 	strh	r3, [r6]
   46fc4:	eaffffe1 	b	46f50 <LAN7800DevicePHYRead+0x40>
   46fc8:	e59f0034 	ldr	r0, [pc, #52]	; 47004 <LAN7800DevicePHYRead+0xf4>
   46fcc:	e59f1034 	ldr	r1, [pc, #52]	; 47008 <LAN7800DevicePHYRead+0xf8>
   46fd0:	e59f2034 	ldr	r2, [pc, #52]	; 4700c <LAN7800DevicePHYRead+0xfc>
   46fd4:	ebffbf9b 	bl	36e48 <uspi_assertion_failed>
   46fd8:	eaffffd4 	b	46f30 <LAN7800DevicePHYRead+0x20>
   46fdc:	e59f002c 	ldr	r0, [pc, #44]	; 47010 <LAN7800DevicePHYRead+0x100>
   46fe0:	e59f1020 	ldr	r1, [pc, #32]	; 47008 <LAN7800DevicePHYRead+0xf8>
   46fe4:	e59f2028 	ldr	r2, [pc, #40]	; 47014 <LAN7800DevicePHYRead+0x104>
   46fe8:	ebffbf96 	bl	36e48 <uspi_assertion_failed>
   46fec:	eaffffcd 	b	46f28 <LAN7800DevicePHYRead+0x18>
   46ff0:	e59f0020 	ldr	r0, [pc, #32]	; 47018 <LAN7800DevicePHYRead+0x108>
   46ff4:	e59f100c 	ldr	r1, [pc, #12]	; 47008 <LAN7800DevicePHYRead+0xf8>
   46ff8:	e59f201c 	ldr	r2, [pc, #28]	; 4701c <LAN7800DevicePHYRead+0x10c>
   46ffc:	ebffbf91 	bl	36e48 <uspi_assertion_failed>
   47000:	eaffffec 	b	46fb8 <LAN7800DevicePHYRead+0xa8>
   47004:	00057908 	.word	0x00057908
   47008:	000578b0 	.word	0x000578b0
   4700c:	0000029b 	.word	0x0000029b
   47010:	00056434 	.word	0x00056434
   47014:	0000029a 	.word	0x0000029a
   47018:	000577c8 	.word	0x000577c8
   4701c:	000002af 	.word	0x000002af

00047020 <LAN7800DeviceIsLinkUp>:
   47020:	e92d4010 	push	{r4, lr}
   47024:	e2504000 	subs	r4, r0, #0
   47028:	e24dd008 	sub	sp, sp, #8
   4702c:	0a000009 	beq	47058 <LAN7800DeviceIsLinkUp+0x38>
   47030:	e1a00004 	mov	r0, r4
   47034:	e3a01001 	mov	r1, #1
   47038:	e28d2006 	add	r2, sp, #6
   4703c:	ebffffb3 	bl	46f10 <LAN7800DevicePHYRead>
   47040:	e3500000 	cmp	r0, #0
   47044:	11dd00b6 	ldrhne	r0, [sp, #6]
   47048:	11a00120 	lsrne	r0, r0, #2
   4704c:	12000001 	andne	r0, r0, #1
   47050:	e28dd008 	add	sp, sp, #8
   47054:	e8bd8010 	pop	{r4, pc}
   47058:	e59f000c 	ldr	r0, [pc, #12]	; 4706c <LAN7800DeviceIsLinkUp+0x4c>
   4705c:	e59f100c 	ldr	r1, [pc, #12]	; 47070 <LAN7800DeviceIsLinkUp+0x50>
   47060:	e59f200c 	ldr	r2, [pc, #12]	; 47074 <LAN7800DeviceIsLinkUp+0x54>
   47064:	ebffbf77 	bl	36e48 <uspi_assertion_failed>
   47068:	eafffff0 	b	47030 <LAN7800DeviceIsLinkUp+0x10>
   4706c:	00056434 	.word	0x00056434
   47070:	000578b0 	.word	0x000578b0
   47074:	00000233 	.word	0x00000233

00047078 <LAN7800DeviceInitPHY>:
   47078:	e92d4010 	push	{r4, lr}
   4707c:	e2504000 	subs	r4, r0, #0
   47080:	e24dd008 	sub	sp, sp, #8
   47084:	0a00000f 	beq	470c8 <LAN7800DeviceInitPHY+0x50>
   47088:	e1a00004 	mov	r0, r4
   4708c:	e3a0101d 	mov	r1, #29
   47090:	e28d2006 	add	r2, sp, #6
   47094:	ebffff9d 	bl	46f10 <LAN7800DevicePHYRead>
   47098:	e3500000 	cmp	r0, #0
   4709c:	0a000007 	beq	470c0 <LAN7800DeviceInitPHY+0x48>
   470a0:	e1dd30b6 	ldrh	r3, [sp, #6]
   470a4:	e1a00004 	mov	r0, r4
   470a8:	e3c330ff 	bic	r3, r3, #255	; 0xff
   470ac:	e3833061 	orr	r3, r3, #97	; 0x61
   470b0:	e1a02003 	mov	r2, r3
   470b4:	e3a0101d 	mov	r1, #29
   470b8:	e1cd30b6 	strh	r3, [sp, #6]
   470bc:	ebffff5f 	bl	46e40 <LAN7800DevicePHYWrite>
   470c0:	e28dd008 	add	sp, sp, #8
   470c4:	e8bd8010 	pop	{r4, pc}
   470c8:	e59f000c 	ldr	r0, [pc, #12]	; 470dc <LAN7800DeviceInitPHY+0x64>
   470cc:	e59f100c 	ldr	r1, [pc, #12]	; 470e0 <LAN7800DeviceInitPHY+0x68>
   470d0:	e59f200c 	ldr	r2, [pc, #12]	; 470e4 <LAN7800DeviceInitPHY+0x6c>
   470d4:	ebffbf5b 	bl	36e48 <uspi_assertion_failed>
   470d8:	eaffffea 	b	47088 <LAN7800DeviceInitPHY+0x10>
   470dc:	00056434 	.word	0x00056434
   470e0:	000578b0 	.word	0x000578b0
   470e4:	0000026a 	.word	0x0000026a

000470e8 <LAN7800DeviceReadWriteReg>:
   470e8:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   470ec:	e2506000 	subs	r6, r0, #0
   470f0:	e24dd00c 	sub	sp, sp, #12
   470f4:	e1a05001 	mov	r5, r1
   470f8:	e1a04002 	mov	r4, r2
   470fc:	e1a07003 	mov	r7, r3
   47100:	0a00000f 	beq	47144 <LAN7800DeviceReadWriteReg+0x5c>
   47104:	e1a00006 	mov	r0, r6
   47108:	e1a01005 	mov	r1, r5
   4710c:	e28d2004 	add	r2, sp, #4
   47110:	ebfffef9 	bl	46cfc <LAN7800DeviceReadReg>
   47114:	e3500000 	cmp	r0, #0
   47118:	0a000007 	beq	4713c <LAN7800DeviceReadWriteReg+0x54>
   4711c:	e59d3004 	ldr	r3, [sp, #4]
   47120:	e1a00006 	mov	r0, r6
   47124:	e0033007 	and	r3, r3, r7
   47128:	e1834004 	orr	r4, r3, r4
   4712c:	e1a01005 	mov	r1, r5
   47130:	e1a02004 	mov	r2, r4
   47134:	e58d4004 	str	r4, [sp, #4]
   47138:	ebfffe76 	bl	46b18 <LAN7800DeviceWriteReg>
   4713c:	e28dd00c 	add	sp, sp, #12
   47140:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   47144:	e59f000c 	ldr	r0, [pc, #12]	; 47158 <LAN7800DeviceReadWriteReg+0x70>
   47148:	e59f100c 	ldr	r1, [pc, #12]	; 4715c <LAN7800DeviceReadWriteReg+0x74>
   4714c:	e59f200c 	ldr	r2, [pc, #12]	; 47160 <LAN7800DeviceReadWriteReg+0x78>
   47150:	ebffbf3c 	bl	36e48 <uspi_assertion_failed>
   47154:	eaffffea 	b	47104 <LAN7800DeviceReadWriteReg+0x1c>
   47158:	00056434 	.word	0x00056434
   4715c:	000578b0 	.word	0x000578b0
   47160:	000002d2 	.word	0x000002d2

00047164 <LAN7800DeviceConfigure>:
   47164:	e92d4070 	push	{r4, r5, r6, lr}
   47168:	e2505000 	subs	r5, r0, #0
   4716c:	e24dd010 	sub	sp, sp, #16
   47170:	0a00005d 	beq	472ec <LAN7800DeviceConfigure+0x188>
   47174:	e1a00005 	mov	r0, r5
   47178:	ebfff8b1 	bl	45444 <USBFunctionGetNumEndpoints>
   4717c:	e3500003 	cmp	r0, #3
   47180:	0a000004 	beq	47198 <LAN7800DeviceConfigure+0x34>
   47184:	ea000036 	b	47264 <LAN7800DeviceConfigure+0x100>
   47188:	e5d43003 	ldrb	r3, [r4, #3]
   4718c:	e203303f 	and	r3, r3, #63	; 0x3f
   47190:	e3530002 	cmp	r3, #2
   47194:	0a00001f 	beq	47218 <LAN7800DeviceConfigure+0xb4>
   47198:	e1a00005 	mov	r0, r5
   4719c:	e3a01005 	mov	r1, #5
   471a0:	ebfff936 	bl	45680 <USBFunctionGetDescriptor>
   471a4:	e2504000 	subs	r4, r0, #0
   471a8:	1afffff6 	bne	47188 <LAN7800DeviceConfigure+0x24>
   471ac:	e5953010 	ldr	r3, [r5, #16]
   471b0:	e1a00005 	mov	r0, r5
   471b4:	e3530000 	cmp	r3, #0
   471b8:	0a00003e 	beq	472b8 <LAN7800DeviceConfigure+0x154>
   471bc:	e5953014 	ldr	r3, [r5, #20]
   471c0:	e3530000 	cmp	r3, #0
   471c4:	0a00003b 	beq	472b8 <LAN7800DeviceConfigure+0x154>
   471c8:	ebfff8f6 	bl	455a8 <USBFunctionConfigure>
   471cc:	e2506000 	subs	r6, r0, #0
   471d0:	0a00003e 	beq	472d0 <LAN7800DeviceConfigure+0x16c>
   471d4:	e1a00005 	mov	r0, r5
   471d8:	e1a01004 	mov	r1, r4
   471dc:	e1a0200d 	mov	r2, sp
   471e0:	ebfffec5 	bl	46cfc <LAN7800DeviceReadReg>
   471e4:	e3500000 	cmp	r0, #0
   471e8:	e1dd30b2 	ldrh	r3, [sp, #2]
   471ec:	0a000001 	beq	471f8 <LAN7800DeviceConfigure+0x94>
   471f0:	e3530b1e 	cmp	r3, #30720	; 0x7800
   471f4:	0a000041 	beq	47300 <LAN7800DeviceConfigure+0x19c>
   471f8:	e59f03fc 	ldr	r0, [pc, #1020]	; 475fc <LAN7800DeviceConfigure+0x498>
   471fc:	e3a01001 	mov	r1, #1
   47200:	e59f23f8 	ldr	r2, [pc, #1016]	; 47600 <LAN7800DeviceConfigure+0x49c>
   47204:	ebff73db 	bl	24178 <LogWrite>
   47208:	e3a06000 	mov	r6, #0
   4720c:	e1a00006 	mov	r0, r6
   47210:	e28dd010 	add	sp, sp, #16
   47214:	e8bd8070 	pop	{r4, r5, r6, pc}
   47218:	e1d430d2 	ldrsb	r3, [r4, #2]
   4721c:	e3530000 	cmp	r3, #0
   47220:	ba000016 	blt	47280 <LAN7800DeviceConfigure+0x11c>
   47224:	e5953014 	ldr	r3, [r5, #20]
   47228:	e3530000 	cmp	r3, #0
   4722c:	1a00000c 	bne	47264 <LAN7800DeviceConfigure+0x100>
   47230:	e3a00018 	mov	r0, #24
   47234:	ebffbedc 	bl	36dac <malloc>
   47238:	e3500000 	cmp	r0, #0
   4723c:	e5850014 	str	r0, [r5, #20]
   47240:	0a000042 	beq	47350 <LAN7800DeviceConfigure+0x1ec>
   47244:	e1a06000 	mov	r6, r0
   47248:	e1a00005 	mov	r0, r5
   4724c:	ebfff893 	bl	454a0 <USBFunctionGetDevice>
   47250:	e1a02004 	mov	r2, r4
   47254:	e1a01000 	mov	r1, r0
   47258:	e1a00006 	mov	r0, r6
   4725c:	ebfff0f7 	bl	43640 <USBEndpoint2>
   47260:	eaffffcc 	b	47198 <LAN7800DeviceConfigure+0x34>
   47264:	e3a06000 	mov	r6, #0
   47268:	e1a00005 	mov	r0, r5
   4726c:	e59f1388 	ldr	r1, [pc, #904]	; 475fc <LAN7800DeviceConfigure+0x498>
   47270:	ebfff91c 	bl	456e8 <USBFunctionConfigurationError>
   47274:	e1a00006 	mov	r0, r6
   47278:	e28dd010 	add	sp, sp, #16
   4727c:	e8bd8070 	pop	{r4, r5, r6, pc}
   47280:	e5953010 	ldr	r3, [r5, #16]
   47284:	e3530000 	cmp	r3, #0
   47288:	1afffff5 	bne	47264 <LAN7800DeviceConfigure+0x100>
   4728c:	e3a00018 	mov	r0, #24
   47290:	ebffbec5 	bl	36dac <malloc>
   47294:	e3500000 	cmp	r0, #0
   47298:	e5850010 	str	r0, [r5, #16]
   4729c:	1affffe8 	bne	47244 <LAN7800DeviceConfigure+0xe0>
   472a0:	e59f035c 	ldr	r0, [pc, #860]	; 47604 <LAN7800DeviceConfigure+0x4a0>
   472a4:	e59f135c 	ldr	r1, [pc, #860]	; 47608 <LAN7800DeviceConfigure+0x4a4>
   472a8:	e59f235c 	ldr	r2, [pc, #860]	; 4760c <LAN7800DeviceConfigure+0x4a8>
   472ac:	ebffbee5 	bl	36e48 <uspi_assertion_failed>
   472b0:	e5956010 	ldr	r6, [r5, #16]
   472b4:	eaffffe3 	b	47248 <LAN7800DeviceConfigure+0xe4>
   472b8:	e3a06000 	mov	r6, #0
   472bc:	e59f1338 	ldr	r1, [pc, #824]	; 475fc <LAN7800DeviceConfigure+0x498>
   472c0:	ebfff908 	bl	456e8 <USBFunctionConfigurationError>
   472c4:	e1a00006 	mov	r0, r6
   472c8:	e28dd010 	add	sp, sp, #16
   472cc:	e8bd8070 	pop	{r4, r5, r6, pc}
   472d0:	e59f0324 	ldr	r0, [pc, #804]	; 475fc <LAN7800DeviceConfigure+0x498>
   472d4:	e3a01001 	mov	r1, #1
   472d8:	e59f2330 	ldr	r2, [pc, #816]	; 47610 <LAN7800DeviceConfigure+0x4ac>
   472dc:	ebff73a5 	bl	24178 <LogWrite>
   472e0:	e1a00006 	mov	r0, r6
   472e4:	e28dd010 	add	sp, sp, #16
   472e8:	e8bd8070 	pop	{r4, r5, r6, pc}
   472ec:	e59f0320 	ldr	r0, [pc, #800]	; 47614 <LAN7800DeviceConfigure+0x4b0>
   472f0:	e59f1310 	ldr	r1, [pc, #784]	; 47608 <LAN7800DeviceConfigure+0x4a4>
   472f4:	e59f231c 	ldr	r2, [pc, #796]	; 47618 <LAN7800DeviceConfigure+0x4b4>
   472f8:	ebffbed2 	bl	36e48 <uspi_assertion_failed>
   472fc:	eaffff9c 	b	47174 <LAN7800DeviceConfigure+0x10>
   47300:	e1a00005 	mov	r0, r5
   47304:	e3a01010 	mov	r1, #16
   47308:	e3a02002 	mov	r2, #2
   4730c:	e3e03000 	mvn	r3, #0
   47310:	ebffff74 	bl	470e8 <LAN7800DeviceReadWriteReg>
   47314:	e3500000 	cmp	r0, #0
   47318:	0a000006 	beq	47338 <LAN7800DeviceConfigure+0x1d4>
   4731c:	e1a03004 	mov	r3, r4
   47320:	e1a00005 	mov	r0, r5
   47324:	e3a01010 	mov	r1, #16
   47328:	e3a02002 	mov	r2, #2
   4732c:	ebfffe9e 	bl	46dac <LAN7800DeviceWaitReg>
   47330:	e3500000 	cmp	r0, #0
   47334:	1a00000b 	bne	47368 <LAN7800DeviceConfigure+0x204>
   47338:	e59f02bc 	ldr	r0, [pc, #700]	; 475fc <LAN7800DeviceConfigure+0x498>
   4733c:	e3a01001 	mov	r1, #1
   47340:	e59f22d4 	ldr	r2, [pc, #724]	; 4761c <LAN7800DeviceConfigure+0x4b8>
   47344:	ebff738b 	bl	24178 <LogWrite>
   47348:	e3a06000 	mov	r6, #0
   4734c:	eaffffae 	b	4720c <LAN7800DeviceConfigure+0xa8>
   47350:	e59f02c8 	ldr	r0, [pc, #712]	; 47620 <LAN7800DeviceConfigure+0x4bc>
   47354:	e59f12ac 	ldr	r1, [pc, #684]	; 47608 <LAN7800DeviceConfigure+0x4a4>
   47358:	e59f22c4 	ldr	r2, [pc, #708]	; 47624 <LAN7800DeviceConfigure+0x4c0>
   4735c:	ebffbeb9 	bl	36e48 <uspi_assertion_failed>
   47360:	e5956014 	ldr	r6, [r5, #20]
   47364:	eaffffb7 	b	47248 <LAN7800DeviceConfigure+0xe4>
   47368:	e1a00005 	mov	r0, r5
   4736c:	ebfffe16 	bl	46bcc <LAN7800DeviceInitMACAddress>
   47370:	e2506000 	subs	r6, r0, #0
   47374:	0a000007 	beq	47398 <LAN7800DeviceConfigure+0x234>
   47378:	e1a00005 	mov	r0, r5
   4737c:	e3a01090 	mov	r1, #144	; 0x90
   47380:	e3a02018 	mov	r2, #24
   47384:	ebfffde3 	bl	46b18 <LAN7800DeviceWriteReg>
   47388:	e3500000 	cmp	r0, #0
   4738c:	1a000006 	bne	473ac <LAN7800DeviceConfigure+0x248>
   47390:	e3a06000 	mov	r6, #0
   47394:	eaffff9c 	b	4720c <LAN7800DeviceConfigure+0xa8>
   47398:	e59f025c 	ldr	r0, [pc, #604]	; 475fc <LAN7800DeviceConfigure+0x498>
   4739c:	e3a01001 	mov	r1, #1
   473a0:	e59f2280 	ldr	r2, [pc, #640]	; 47628 <LAN7800DeviceConfigure+0x4c4>
   473a4:	ebff7373 	bl	24178 <LogWrite>
   473a8:	eaffff97 	b	4720c <LAN7800DeviceConfigure+0xa8>
   473ac:	e1a00005 	mov	r0, r5
   473b0:	e3a01094 	mov	r1, #148	; 0x94
   473b4:	e3a02b02 	mov	r2, #2048	; 0x800
   473b8:	ebfffdd6 	bl	46b18 <LAN7800DeviceWriteReg>
   473bc:	e3500000 	cmp	r0, #0
   473c0:	0afffff2 	beq	47390 <LAN7800DeviceConfigure+0x22c>
   473c4:	e1a00005 	mov	r0, r5
   473c8:	e3a01010 	mov	r1, #16
   473cc:	e3a02603 	mov	r2, #3145728	; 0x300000
   473d0:	e3e03010 	mvn	r3, #16
   473d4:	ebffff43 	bl	470e8 <LAN7800DeviceReadWriteReg>
   473d8:	e3500000 	cmp	r0, #0
   473dc:	0affffeb 	beq	47390 <LAN7800DeviceConfigure+0x22c>
   473e0:	e1a00005 	mov	r0, r5
   473e4:	e3a01080 	mov	r1, #128	; 0x80
   473e8:	e3a02020 	mov	r2, #32
   473ec:	e3e03040 	mvn	r3, #64	; 0x40
   473f0:	ebffff3c 	bl	470e8 <LAN7800DeviceReadWriteReg>
   473f4:	e3500000 	cmp	r0, #0
   473f8:	0affffe4 	beq	47390 <LAN7800DeviceConfigure+0x22c>
   473fc:	e1a00005 	mov	r0, r5
   47400:	e3a010c8 	mov	r1, #200	; 0xc8
   47404:	e3a02017 	mov	r2, #23
   47408:	ebfffdc2 	bl	46b18 <LAN7800DeviceWriteReg>
   4740c:	e3500000 	cmp	r0, #0
   47410:	0affffde 	beq	47390 <LAN7800DeviceConfigure+0x22c>
   47414:	e1a00005 	mov	r0, r5
   47418:	e3a010cc 	mov	r1, #204	; 0xcc
   4741c:	e3a02017 	mov	r2, #23
   47420:	ebfffdbc 	bl	46b18 <LAN7800DeviceWriteReg>
   47424:	e3500000 	cmp	r0, #0
   47428:	0affffd8 	beq	47390 <LAN7800DeviceConfigure+0x22c>
   4742c:	e1a00005 	mov	r0, r5
   47430:	e3a01098 	mov	r1, #152	; 0x98
   47434:	e3a02000 	mov	r2, #0
   47438:	ebfffdb6 	bl	46b18 <LAN7800DeviceWriteReg>
   4743c:	e3500000 	cmp	r0, #0
   47440:	0affffd2 	beq	47390 <LAN7800DeviceConfigure+0x22c>
   47444:	e1a00005 	mov	r0, r5
   47448:	e3a0100c 	mov	r1, #12
   4744c:	e3e02000 	mvn	r2, #0
   47450:	ebfffdb0 	bl	46b18 <LAN7800DeviceWriteReg>
   47454:	e3500000 	cmp	r0, #0
   47458:	0affffcc 	beq	47390 <LAN7800DeviceConfigure+0x22c>
   4745c:	e1a00005 	mov	r0, r5
   47460:	e3a01f43 	mov	r1, #268	; 0x10c
   47464:	e3a02000 	mov	r2, #0
   47468:	ebfffdaa 	bl	46b18 <LAN7800DeviceWriteReg>
   4746c:	e3500000 	cmp	r0, #0
   47470:	0affffc6 	beq	47390 <LAN7800DeviceConfigure+0x22c>
   47474:	e1a00005 	mov	r0, r5
   47478:	e3a010d0 	mov	r1, #208	; 0xd0
   4747c:	e3a02000 	mov	r2, #0
   47480:	ebfffda4 	bl	46b18 <LAN7800DeviceWriteReg>
   47484:	e3500000 	cmp	r0, #0
   47488:	0affffc0 	beq	47390 <LAN7800DeviceConfigure+0x22c>
   4748c:	e1a00005 	mov	r0, r5
   47490:	e3a010b0 	mov	r1, #176	; 0xb0
   47494:	e59f2190 	ldr	r2, [pc, #400]	; 4762c <LAN7800DeviceConfigure+0x4c8>
   47498:	e3e03000 	mvn	r3, #0
   4749c:	ebffff11 	bl	470e8 <LAN7800DeviceReadWriteReg>
   474a0:	e3500000 	cmp	r0, #0
   474a4:	0affffb9 	beq	47390 <LAN7800DeviceConfigure+0x22c>
   474a8:	e1a00005 	mov	r0, r5
   474ac:	e3a01014 	mov	r1, #20
   474b0:	e3a02010 	mov	r2, #16
   474b4:	e3e03000 	mvn	r3, #0
   474b8:	ebffff0a 	bl	470e8 <LAN7800DeviceReadWriteReg>
   474bc:	e3500000 	cmp	r0, #0
   474c0:	0a000006 	beq	474e0 <LAN7800DeviceConfigure+0x37c>
   474c4:	e1a00005 	mov	r0, r5
   474c8:	e3a01014 	mov	r1, #20
   474cc:	e3a02090 	mov	r2, #144	; 0x90
   474d0:	e3a03080 	mov	r3, #128	; 0x80
   474d4:	ebfffe34 	bl	46dac <LAN7800DeviceWaitReg>
   474d8:	e3500000 	cmp	r0, #0
   474dc:	1a000004 	bne	474f4 <LAN7800DeviceConfigure+0x390>
   474e0:	e59f0114 	ldr	r0, [pc, #276]	; 475fc <LAN7800DeviceConfigure+0x498>
   474e4:	e3a01001 	mov	r1, #1
   474e8:	e59f2140 	ldr	r2, [pc, #320]	; 47630 <LAN7800DeviceConfigure+0x4cc>
   474ec:	ebff7321 	bl	24178 <LogWrite>
   474f0:	eaffffa6 	b	47390 <LAN7800DeviceConfigure+0x22c>
   474f4:	e1a00005 	mov	r0, r5
   474f8:	e3a01c01 	mov	r1, #256	; 0x100
   474fc:	e3a02b06 	mov	r2, #6144	; 0x1800
   47500:	e3e03000 	mvn	r3, #0
   47504:	ebfffef7 	bl	470e8 <LAN7800DeviceReadWriteReg>
   47508:	e3500000 	cmp	r0, #0
   4750c:	0affff9f 	beq	47390 <LAN7800DeviceConfigure+0x22c>
   47510:	e1a00005 	mov	r0, r5
   47514:	e3a01f42 	mov	r1, #264	; 0x108
   47518:	e3a02001 	mov	r2, #1
   4751c:	e3e03000 	mvn	r3, #0
   47520:	ebfffef0 	bl	470e8 <LAN7800DeviceReadWriteReg>
   47524:	e3500000 	cmp	r0, #0
   47528:	0affff98 	beq	47390 <LAN7800DeviceConfigure+0x22c>
   4752c:	e1a00005 	mov	r0, r5
   47530:	e3a010c4 	mov	r1, #196	; 0xc4
   47534:	e3a02102 	mov	r2, #-2147483648	; 0x80000000
   47538:	e3e03000 	mvn	r3, #0
   4753c:	ebfffee9 	bl	470e8 <LAN7800DeviceReadWriteReg>
   47540:	e3500000 	cmp	r0, #0
   47544:	0affff91 	beq	47390 <LAN7800DeviceConfigure+0x22c>
   47548:	e1a00005 	mov	r0, r5
   4754c:	e3a01f41 	mov	r1, #260	; 0x104
   47550:	e59f20dc 	ldr	r2, [pc, #220]	; 47634 <LAN7800DeviceConfigure+0x4d0>
   47554:	e59f30dc 	ldr	r3, [pc, #220]	; 47638 <LAN7800DeviceConfigure+0x4d4>
   47558:	ebfffee2 	bl	470e8 <LAN7800DeviceReadWriteReg>
   4755c:	e3500000 	cmp	r0, #0
   47560:	0affff8a 	beq	47390 <LAN7800DeviceConfigure+0x22c>
   47564:	e1a00005 	mov	r0, r5
   47568:	e3a010c0 	mov	r1, #192	; 0xc0
   4756c:	e3a02102 	mov	r2, #-2147483648	; 0x80000000
   47570:	e3e03000 	mvn	r3, #0
   47574:	ebfffedb 	bl	470e8 <LAN7800DeviceReadWriteReg>
   47578:	e3500000 	cmp	r0, #0
   4757c:	0affff83 	beq	47390 <LAN7800DeviceConfigure+0x22c>
   47580:	e1a00005 	mov	r0, r5
   47584:	ebfffebb 	bl	47078 <LAN7800DeviceInitPHY>
   47588:	e2506000 	subs	r6, r0, #0
   4758c:	0a000015 	beq	475e8 <LAN7800DeviceConfigure+0x484>
   47590:	e28d0004 	add	r0, sp, #4
   47594:	eb00002b 	bl	47648 <String>
   47598:	e59f309c 	ldr	r3, [pc, #156]	; 4763c <LAN7800DeviceConfigure+0x4d8>
   4759c:	e59f109c 	ldr	r1, [pc, #156]	; 47640 <LAN7800DeviceConfigure+0x4dc>
   475a0:	e5932000 	ldr	r2, [r3]
   475a4:	e28d0004 	add	r0, sp, #4
   475a8:	e282c001 	add	ip, r2, #1
   475ac:	e583c000 	str	ip, [r3]
   475b0:	eb0002a4 	bl	48048 <StringFormat>
   475b4:	ebfff5e8 	bl	44d5c <DeviceNameServiceGet>
   475b8:	e1a04000 	mov	r4, r0
   475bc:	e28d0004 	add	r0, sp, #4
   475c0:	eb000053 	bl	47714 <StringGet>
   475c4:	e1a02005 	mov	r2, r5
   475c8:	e1a01000 	mov	r1, r0
   475cc:	e3a03000 	mov	r3, #0
   475d0:	e1a00004 	mov	r0, r4
   475d4:	ebfff56f 	bl	44b98 <DeviceNameServiceAddDevice>
   475d8:	e28d0004 	add	r0, sp, #4
   475dc:	eb00003b 	bl	476d0 <_String>
   475e0:	e3a06001 	mov	r6, #1
   475e4:	eaffff08 	b	4720c <LAN7800DeviceConfigure+0xa8>
   475e8:	e59f000c 	ldr	r0, [pc, #12]	; 475fc <LAN7800DeviceConfigure+0x498>
   475ec:	e3a01001 	mov	r1, #1
   475f0:	e59f204c 	ldr	r2, [pc, #76]	; 47644 <LAN7800DeviceConfigure+0x4e0>
   475f4:	ebff72df 	bl	24178 <LogWrite>
   475f8:	eaffff03 	b	4720c <LAN7800DeviceConfigure+0xa8>
   475fc:	000578a8 	.word	0x000578a8
   47600:	00057918 	.word	0x00057918
   47604:	0005774c 	.word	0x0005774c
   47608:	000578b0 	.word	0x000578b0
   4760c:	0000013d 	.word	0x0000013d
   47610:	00057470 	.word	0x00057470
   47614:	00056434 	.word	0x00056434
   47618:	00000123 	.word	0x00000123
   4761c:	00057930 	.word	0x00057930
   47620:	00057768 	.word	0x00057768
   47624:	0000014a 	.word	0x0000014a
   47628:	00057940 	.word	0x00057940
   4762c:	00000402 	.word	0x00000402
   47630:	00057958 	.word	0x00057958
   47634:	05ee0001 	.word	0x05ee0001
   47638:	c000ffff 	.word	0xc000ffff
   4763c:	0006f51c 	.word	0x0006f51c
   47640:	000577b0 	.word	0x000577b0
   47644:	0005796c 	.word	0x0005796c

00047648 <String>:
   47648:	e92d4010 	push	{r4, lr}
   4764c:	e2504000 	subs	r4, r0, #0
   47650:	0a000003 	beq	47664 <String+0x1c>
   47654:	e3a03000 	mov	r3, #0
   47658:	e5843000 	str	r3, [r4]
   4765c:	e5843004 	str	r3, [r4, #4]
   47660:	e8bd8010 	pop	{r4, pc}
   47664:	e59f000c 	ldr	r0, [pc, #12]	; 47678 <String+0x30>
   47668:	e59f100c 	ldr	r1, [pc, #12]	; 4767c <String+0x34>
   4766c:	e3a02023 	mov	r2, #35	; 0x23
   47670:	ebffbdf4 	bl	36e48 <uspi_assertion_failed>
   47674:	eafffff6 	b	47654 <String+0xc>
   47678:	00056434 	.word	0x00056434
   4767c:	0005797c 	.word	0x0005797c

00047680 <String2>:
   47680:	e92d4038 	push	{r3, r4, r5, lr}
   47684:	e2504000 	subs	r4, r0, #0
   47688:	e1a05001 	mov	r5, r1
   4768c:	0a000008 	beq	476b4 <String2+0x34>
   47690:	e1a00005 	mov	r0, r5
   47694:	eb0002aa 	bl	48144 <uspi_strlen>
   47698:	e2800001 	add	r0, r0, #1
   4769c:	e5840004 	str	r0, [r4, #4]
   476a0:	ebffbdc1 	bl	36dac <malloc>
   476a4:	e1a01005 	mov	r1, r5
   476a8:	e5840000 	str	r0, [r4]
   476ac:	e8bd4038 	pop	{r3, r4, r5, lr}
   476b0:	ea0002d1 	b	481fc <uspi_strcpy>
   476b4:	e59f000c 	ldr	r0, [pc, #12]	; 476c8 <String2+0x48>
   476b8:	e59f100c 	ldr	r1, [pc, #12]	; 476cc <String2+0x4c>
   476bc:	e3a0202a 	mov	r2, #42	; 0x2a
   476c0:	ebffbde0 	bl	36e48 <uspi_assertion_failed>
   476c4:	eafffff1 	b	47690 <String2+0x10>
   476c8:	00056434 	.word	0x00056434
   476cc:	0005797c 	.word	0x0005797c

000476d0 <_String>:
   476d0:	e92d4010 	push	{r4, lr}
   476d4:	e2504000 	subs	r4, r0, #0
   476d8:	0a000006 	beq	476f8 <_String+0x28>
   476dc:	e5940000 	ldr	r0, [r4]
   476e0:	e3500000 	cmp	r0, #0
   476e4:	08bd8010 	popeq	{r4, pc}
   476e8:	ebffbdb0 	bl	36db0 <free>
   476ec:	e3a03000 	mov	r3, #0
   476f0:	e5843000 	str	r3, [r4]
   476f4:	e8bd8010 	pop	{r4, pc}
   476f8:	e59f000c 	ldr	r0, [pc, #12]	; 4770c <_String+0x3c>
   476fc:	e59f100c 	ldr	r1, [pc, #12]	; 47710 <_String+0x40>
   47700:	e3a02035 	mov	r2, #53	; 0x35
   47704:	ebffbdcf 	bl	36e48 <uspi_assertion_failed>
   47708:	eafffff3 	b	476dc <_String+0xc>
   4770c:	00056434 	.word	0x00056434
   47710:	0005797c 	.word	0x0005797c

00047714 <StringGet>:
   47714:	e92d4010 	push	{r4, lr}
   47718:	e2504000 	subs	r4, r0, #0
   4771c:	0a000004 	beq	47734 <StringGet+0x20>
   47720:	e5940000 	ldr	r0, [r4]
   47724:	e59f301c 	ldr	r3, [pc, #28]	; 47748 <StringGet+0x34>
   47728:	e3500000 	cmp	r0, #0
   4772c:	01a00003 	moveq	r0, r3
   47730:	e8bd8010 	pop	{r4, pc}
   47734:	e59f0010 	ldr	r0, [pc, #16]	; 4774c <StringGet+0x38>
   47738:	e59f1010 	ldr	r1, [pc, #16]	; 47750 <StringGet+0x3c>
   4773c:	e3a02040 	mov	r2, #64	; 0x40
   47740:	ebffbdc0 	bl	36e48 <uspi_assertion_failed>
   47744:	eafffff5 	b	47720 <StringGet+0xc>
   47748:	00053e00 	.word	0x00053e00
   4774c:	00056434 	.word	0x00056434
   47750:	0005797c 	.word	0x0005797c

00047754 <StringSet>:
   47754:	e92d4038 	push	{r3, r4, r5, lr}
   47758:	e2504000 	subs	r4, r0, #0
   4775c:	e1a05001 	mov	r5, r1
   47760:	0a00000d 	beq	4779c <StringSet+0x48>
   47764:	e5940000 	ldr	r0, [r4]
   47768:	e3500000 	cmp	r0, #0
   4776c:	0a000000 	beq	47774 <StringSet+0x20>
   47770:	ebffbd8e 	bl	36db0 <free>
   47774:	e1a00005 	mov	r0, r5
   47778:	eb000271 	bl	48144 <uspi_strlen>
   4777c:	e2800001 	add	r0, r0, #1
   47780:	e5840004 	str	r0, [r4, #4]
   47784:	ebffbd88 	bl	36dac <malloc>
   47788:	e1a01005 	mov	r1, r5
   4778c:	e5840000 	str	r0, [r4]
   47790:	eb000299 	bl	481fc <uspi_strcpy>
   47794:	e5940000 	ldr	r0, [r4]
   47798:	e8bd8038 	pop	{r3, r4, r5, pc}
   4779c:	e59f000c 	ldr	r0, [pc, #12]	; 477b0 <StringSet+0x5c>
   477a0:	e59f100c 	ldr	r1, [pc, #12]	; 477b4 <StringSet+0x60>
   477a4:	e3a0204c 	mov	r2, #76	; 0x4c
   477a8:	ebffbda6 	bl	36e48 <uspi_assertion_failed>
   477ac:	eaffffec 	b	47764 <StringSet+0x10>
   477b0:	00056434 	.word	0x00056434
   477b4:	0005797c 	.word	0x0005797c

000477b8 <StringGetLength>:
   477b8:	e92d4010 	push	{r4, lr}
   477bc:	e2504000 	subs	r4, r0, #0
   477c0:	0a000004 	beq	477d8 <StringGetLength+0x20>
   477c4:	e5940000 	ldr	r0, [r4]
   477c8:	e3500000 	cmp	r0, #0
   477cc:	08bd8010 	popeq	{r4, pc}
   477d0:	e8bd4010 	pop	{r4, lr}
   477d4:	ea00025a 	b	48144 <uspi_strlen>
   477d8:	e59f000c 	ldr	r0, [pc, #12]	; 477ec <StringGetLength+0x34>
   477dc:	e59f100c 	ldr	r1, [pc, #12]	; 477f0 <StringGetLength+0x38>
   477e0:	e3a0205e 	mov	r2, #94	; 0x5e
   477e4:	ebffbd97 	bl	36e48 <uspi_assertion_failed>
   477e8:	eafffff5 	b	477c4 <StringGetLength+0xc>
   477ec:	00056434 	.word	0x00056434
   477f0:	0005797c 	.word	0x0005797c

000477f4 <StringAppend>:
   477f4:	e92d4070 	push	{r4, r5, r6, lr}
   477f8:	e2504000 	subs	r4, r0, #0
   477fc:	e1a06001 	mov	r6, r1
   47800:	0a00001b 	beq	47874 <StringAppend+0x80>
   47804:	e3a03001 	mov	r3, #1
   47808:	e5940000 	ldr	r0, [r4]
   4780c:	e5843004 	str	r3, [r4, #4]
   47810:	e3500000 	cmp	r0, #0
   47814:	0a000003 	beq	47828 <StringAppend+0x34>
   47818:	eb000249 	bl	48144 <uspi_strlen>
   4781c:	e5943004 	ldr	r3, [r4, #4]
   47820:	e0830000 	add	r0, r3, r0
   47824:	e5840004 	str	r0, [r4, #4]
   47828:	e1a00006 	mov	r0, r6
   4782c:	eb000244 	bl	48144 <uspi_strlen>
   47830:	e5943004 	ldr	r3, [r4, #4]
   47834:	e0800003 	add	r0, r0, r3
   47838:	e5840004 	str	r0, [r4, #4]
   4783c:	ebffbd5a 	bl	36dac <malloc>
   47840:	e5941000 	ldr	r1, [r4]
   47844:	e1a05000 	mov	r5, r0
   47848:	e3510000 	cmp	r1, #0
   4784c:	05c01000 	strbeq	r1, [r0]
   47850:	0a000002 	beq	47860 <StringAppend+0x6c>
   47854:	eb000268 	bl	481fc <uspi_strcpy>
   47858:	e5940000 	ldr	r0, [r4]
   4785c:	ebffbd53 	bl	36db0 <free>
   47860:	e1a01006 	mov	r1, r6
   47864:	e1a00005 	mov	r0, r5
   47868:	eb000282 	bl	48278 <uspi_strcat>
   4786c:	e5845000 	str	r5, [r4]
   47870:	e8bd8070 	pop	{r4, r5, r6, pc}
   47874:	e59f000c 	ldr	r0, [pc, #12]	; 47888 <StringAppend+0x94>
   47878:	e59f100c 	ldr	r1, [pc, #12]	; 4788c <StringAppend+0x98>
   4787c:	e3a0206a 	mov	r2, #106	; 0x6a
   47880:	ebffbd70 	bl	36e48 <uspi_assertion_failed>
   47884:	eaffffde 	b	47804 <StringAppend+0x10>
   47888:	00056434 	.word	0x00056434
   4788c:	0005797c 	.word	0x0005797c

00047890 <StringCompare>:
   47890:	e92d4038 	push	{r3, r4, r5, lr}
   47894:	e2505000 	subs	r5, r0, #0
   47898:	e1a04001 	mov	r4, r1
   4789c:	0a000003 	beq	478b0 <StringCompare+0x20>
   478a0:	e5950000 	ldr	r0, [r5]
   478a4:	e1a01004 	mov	r1, r4
   478a8:	e8bd4038 	pop	{r3, r4, r5, lr}
   478ac:	ea00022e 	b	4816c <uspi_strcmp>
   478b0:	e59f0018 	ldr	r0, [pc, #24]	; 478d0 <StringCompare+0x40>
   478b4:	e59f1018 	ldr	r1, [pc, #24]	; 478d4 <StringCompare+0x44>
   478b8:	e3a02086 	mov	r2, #134	; 0x86
   478bc:	ebffbd61 	bl	36e48 <uspi_assertion_failed>
   478c0:	e5950000 	ldr	r0, [r5]
   478c4:	e1a01004 	mov	r1, r4
   478c8:	e8bd4038 	pop	{r3, r4, r5, lr}
   478cc:	ea000226 	b	4816c <uspi_strcmp>
   478d0:	00056434 	.word	0x00056434
   478d4:	0005797c 	.word	0x0005797c

000478d8 <StringFind>:
   478d8:	e92d4038 	push	{r3, r4, r5, lr}
   478dc:	e2505000 	subs	r5, r0, #0
   478e0:	e1a04001 	mov	r4, r1
   478e4:	0a000012 	beq	47934 <StringFind+0x5c>
   478e8:	e5952000 	ldr	r2, [r5]
   478ec:	e5d23000 	ldrb	r3, [r2]
   478f0:	e3530000 	cmp	r3, #0
   478f4:	0a00000b 	beq	47928 <StringFind+0x50>
   478f8:	e6af3073 	sxtb	r3, r3
   478fc:	e1530004 	cmp	r3, r4
   47900:	13a00000 	movne	r0, #0
   47904:	1a000002 	bne	47914 <StringFind+0x3c>
   47908:	ea00000e 	b	47948 <StringFind+0x70>
   4790c:	e1510004 	cmp	r1, r4
   47910:	0a000006 	beq	47930 <StringFind+0x58>
   47914:	e5f23001 	ldrb	r3, [r2, #1]!
   47918:	e2800001 	add	r0, r0, #1
   4791c:	e3530000 	cmp	r3, #0
   47920:	e6af1073 	sxtb	r1, r3
   47924:	1afffff8 	bne	4790c <StringFind+0x34>
   47928:	e3e00000 	mvn	r0, #0
   4792c:	e8bd8038 	pop	{r3, r4, r5, pc}
   47930:	e8bd8038 	pop	{r3, r4, r5, pc}
   47934:	e59f0014 	ldr	r0, [pc, #20]	; 47950 <StringFind+0x78>
   47938:	e59f1014 	ldr	r1, [pc, #20]	; 47954 <StringFind+0x7c>
   4793c:	e3a0208d 	mov	r2, #141	; 0x8d
   47940:	ebffbd40 	bl	36e48 <uspi_assertion_failed>
   47944:	eaffffe7 	b	478e8 <StringFind+0x10>
   47948:	e3a00000 	mov	r0, #0
   4794c:	e8bd8038 	pop	{r3, r4, r5, pc}
   47950:	00056434 	.word	0x00056434
   47954:	0005797c 	.word	0x0005797c

00047958 <StringReserveSpace>:
   47958:	e92d40f8 	push	{r3, r4, r5, r6, r7, lr}
   4795c:	e2505000 	subs	r5, r0, #0
   47960:	e1a04001 	mov	r4, r1
   47964:	0a000018 	beq	479cc <StringReserveSpace+0x74>
   47968:	e3540000 	cmp	r4, #0
   4796c:	08bd80f8 	popeq	{r3, r4, r5, r6, r7, pc}
   47970:	e5953008 	ldr	r3, [r5, #8]
   47974:	e5956000 	ldr	r6, [r5]
   47978:	e5952004 	ldr	r2, [r5, #4]
   4797c:	e0666003 	rsb	r6, r6, r3
   47980:	e0864004 	add	r4, r6, r4
   47984:	e2843001 	add	r3, r4, #1
   47988:	e1530002 	cmp	r3, r2
   4798c:	98bd80f8 	popls	{r3, r4, r5, r6, r7, pc}
   47990:	e2844041 	add	r4, r4, #65	; 0x41
   47994:	e1a00004 	mov	r0, r4
   47998:	ebffbd03 	bl	36dac <malloc>
   4799c:	e3a02000 	mov	r2, #0
   479a0:	e1a07000 	mov	r7, r0
   479a4:	e5953008 	ldr	r3, [r5, #8]
   479a8:	e0876006 	add	r6, r7, r6
   479ac:	e5c32000 	strb	r2, [r3]
   479b0:	e5951000 	ldr	r1, [r5]
   479b4:	eb000210 	bl	481fc <uspi_strcpy>
   479b8:	e5950000 	ldr	r0, [r5]
   479bc:	ebffbcfb 	bl	36db0 <free>
   479c0:	e9850050 	stmib	r5, {r4, r6}
   479c4:	e5857000 	str	r7, [r5]
   479c8:	e8bd80f8 	pop	{r3, r4, r5, r6, r7, pc}
   479cc:	e59f000c 	ldr	r0, [pc, #12]	; 479e0 <StringReserveSpace+0x88>
   479d0:	e59f100c 	ldr	r1, [pc, #12]	; 479e4 <StringReserveSpace+0x8c>
   479d4:	e59f200c 	ldr	r2, [pc, #12]	; 479e8 <StringReserveSpace+0x90>
   479d8:	ebffbd1a 	bl	36e48 <uspi_assertion_failed>
   479dc:	eaffffe1 	b	47968 <StringReserveSpace+0x10>
   479e0:	00056434 	.word	0x00056434
   479e4:	0005797c 	.word	0x0005797c
   479e8:	00000199 	.word	0x00000199

000479ec <StringPutChar>:
   479ec:	e92d4070 	push	{r4, r5, r6, lr}
   479f0:	e2505000 	subs	r5, r0, #0
   479f4:	e1a06001 	mov	r6, r1
   479f8:	e1a04002 	mov	r4, r2
   479fc:	0a00000d 	beq	47a38 <StringPutChar+0x4c>
   47a00:	e1a00005 	mov	r0, r5
   47a04:	e1a01004 	mov	r1, r4
   47a08:	ebffffd2 	bl	47958 <StringReserveSpace>
   47a0c:	e3540000 	cmp	r4, #0
   47a10:	e2442001 	sub	r2, r4, #1
   47a14:	08bd8070 	popeq	{r4, r5, r6, pc}
   47a18:	e5953008 	ldr	r3, [r5, #8]
   47a1c:	e2422001 	sub	r2, r2, #1
   47a20:	e2831001 	add	r1, r3, #1
   47a24:	e3720001 	cmn	r2, #1
   47a28:	e5851008 	str	r1, [r5, #8]
   47a2c:	e5c36000 	strb	r6, [r3]
   47a30:	1afffff8 	bne	47a18 <StringPutChar+0x2c>
   47a34:	e8bd8070 	pop	{r4, r5, r6, pc}
   47a38:	e59f000c 	ldr	r0, [pc, #12]	; 47a4c <StringPutChar+0x60>
   47a3c:	e59f100c 	ldr	r1, [pc, #12]	; 47a50 <StringPutChar+0x64>
   47a40:	e3a02d06 	mov	r2, #384	; 0x180
   47a44:	ebffbcff 	bl	36e48 <uspi_assertion_failed>
   47a48:	eaffffec 	b	47a00 <StringPutChar+0x14>
   47a4c:	00056434 	.word	0x00056434
   47a50:	0005797c 	.word	0x0005797c

00047a54 <StringPutString>:
   47a54:	e92d4070 	push	{r4, r5, r6, lr}
   47a58:	e2504000 	subs	r4, r0, #0
   47a5c:	e1a06001 	mov	r6, r1
   47a60:	0a00000c 	beq	47a98 <StringPutString+0x44>
   47a64:	e1a00006 	mov	r0, r6
   47a68:	eb0001b5 	bl	48144 <uspi_strlen>
   47a6c:	e1a05000 	mov	r5, r0
   47a70:	e1a00004 	mov	r0, r4
   47a74:	e1a01005 	mov	r1, r5
   47a78:	ebffffb6 	bl	47958 <StringReserveSpace>
   47a7c:	e1a01006 	mov	r1, r6
   47a80:	e5940008 	ldr	r0, [r4, #8]
   47a84:	eb0001dc 	bl	481fc <uspi_strcpy>
   47a88:	e5940008 	ldr	r0, [r4, #8]
   47a8c:	e0800005 	add	r0, r0, r5
   47a90:	e5840008 	str	r0, [r4, #8]
   47a94:	e8bd8070 	pop	{r4, r5, r6, pc}
   47a98:	e59f000c 	ldr	r0, [pc, #12]	; 47aac <StringPutString+0x58>
   47a9c:	e59f100c 	ldr	r1, [pc, #12]	; 47ab0 <StringPutString+0x5c>
   47aa0:	e3a02f63 	mov	r2, #396	; 0x18c
   47aa4:	ebffbce7 	bl	36e48 <uspi_assertion_failed>
   47aa8:	eaffffed 	b	47a64 <StringPutString+0x10>
   47aac:	00056434 	.word	0x00056434
   47ab0:	0005797c 	.word	0x0005797c

00047ab4 <ntoa>:
   47ab4:	e1510002 	cmp	r1, r2
   47ab8:	e92d4ff8 	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   47abc:	e1a06001 	mov	r6, r1
   47ac0:	e1a08002 	mov	r8, r2
   47ac4:	e1a0b000 	mov	fp, r0
   47ac8:	e1a0a003 	mov	sl, r3
   47acc:	23a04001 	movcs	r4, #1
   47ad0:	3a000024 	bcc	47b68 <ntoa+0xb4>
   47ad4:	e0040498 	mul	r4, r8, r4
   47ad8:	e1a00006 	mov	r0, r6
   47adc:	e1a01004 	mov	r1, r4
   47ae0:	eb001bb3 	bl	4e9b4 <__udivsi3>
   47ae4:	e1500008 	cmp	r0, r8
   47ae8:	e1a05000 	mov	r5, r0
   47aec:	2afffff8 	bcs	47ad4 <ntoa+0x20>
   47af0:	e1a0700b 	mov	r7, fp
   47af4:	ea000003 	b	47b08 <ntoa+0x54>
   47af8:	e1a00006 	mov	r0, r6
   47afc:	e1a01004 	mov	r1, r4
   47b00:	eb001bab 	bl	4e9b4 <__udivsi3>
   47b04:	e1a05000 	mov	r5, r0
   47b08:	e1a00006 	mov	r0, r6
   47b0c:	e1a01004 	mov	r1, r4
   47b10:	eb001be4 	bl	4eaa8 <__aeabi_uidivmod>
   47b14:	e3550009 	cmp	r5, #9
   47b18:	e2853030 	add	r3, r5, #48	; 0x30
   47b1c:	e1a06001 	mov	r6, r1
   47b20:	e1a09007 	mov	r9, r7
   47b24:	96ef5073 	uxtbls	r5, r3
   47b28:	9a000005 	bls	47b44 <ntoa+0x90>
   47b2c:	e35a0000 	cmp	sl, #0
   47b30:	03a03020 	moveq	r3, #32
   47b34:	13a03000 	movne	r3, #0
   47b38:	e2855037 	add	r5, r5, #55	; 0x37
   47b3c:	e0835005 	add	r5, r3, r5
   47b40:	e6ef5075 	uxtb	r5, r5
   47b44:	e1a00004 	mov	r0, r4
   47b48:	e4c75001 	strb	r5, [r7], #1
   47b4c:	e1a01008 	mov	r1, r8
   47b50:	eb001b97 	bl	4e9b4 <__udivsi3>
   47b54:	e2504000 	subs	r4, r0, #0
   47b58:	1affffe6 	bne	47af8 <ntoa+0x44>
   47b5c:	e5c94001 	strb	r4, [r9, #1]
   47b60:	e1a0000b 	mov	r0, fp
   47b64:	e8bd8ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   47b68:	e1a05001 	mov	r5, r1
   47b6c:	e3a04001 	mov	r4, #1
   47b70:	eaffffde 	b	47af0 <ntoa+0x3c>

00047b74 <StringFormatV>:
   47b74:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   47b78:	e2506000 	subs	r6, r0, #0
   47b7c:	e24dd010 	sub	sp, sp, #16
   47b80:	e1a05001 	mov	r5, r1
   47b84:	e1a07002 	mov	r7, r2
   47b88:	0a000122 	beq	48018 <StringFormatV+0x4a4>
   47b8c:	e5960000 	ldr	r0, [r6]
   47b90:	e3500000 	cmp	r0, #0
   47b94:	0a000000 	beq	47b9c <StringFormatV+0x28>
   47b98:	ebffbc84 	bl	36db0 <free>
   47b9c:	e3a00040 	mov	r0, #64	; 0x40
   47ba0:	e5860004 	str	r0, [r6, #4]
   47ba4:	ebffbc80 	bl	36dac <malloc>
   47ba8:	e5860000 	str	r0, [r6]
   47bac:	e5860008 	str	r0, [r6, #8]
   47bb0:	e5d51000 	ldrb	r1, [r5]
   47bb4:	e3510000 	cmp	r1, #0
   47bb8:	0a000062 	beq	47d48 <StringFormatV+0x1d4>
   47bbc:	e6af1071 	sxtb	r1, r1
   47bc0:	e3510025 	cmp	r1, #37	; 0x25
   47bc4:	1a0000a2 	bne	47e54 <StringFormatV+0x2e0>
   47bc8:	e5d53001 	ldrb	r3, [r5, #1]
   47bcc:	e6af1073 	sxtb	r1, r3
   47bd0:	e3510025 	cmp	r1, #37	; 0x25
   47bd4:	0a0000c9 	beq	47f00 <StringFormatV+0x38c>
   47bd8:	e351002d 	cmp	r1, #45	; 0x2d
   47bdc:	05d53002 	ldrbeq	r3, [r5, #2]
   47be0:	12855001 	addne	r5, r5, #1
   47be4:	02855002 	addeq	r5, r5, #2
   47be8:	13a08000 	movne	r8, #0
   47bec:	03a08001 	moveq	r8, #1
   47bf0:	e3530030 	cmp	r3, #48	; 0x30
   47bf4:	03a09001 	moveq	r9, #1
   47bf8:	05d53001 	ldrbeq	r3, [r5, #1]
   47bfc:	13a09000 	movne	r9, #0
   47c00:	e2432030 	sub	r2, r3, #48	; 0x30
   47c04:	00855009 	addeq	r5, r5, r9
   47c08:	e3520009 	cmp	r2, #9
   47c0c:	e3a04000 	mov	r4, #0
   47c10:	8a000007 	bhi	47c34 <StringFormatV+0xc0>
   47c14:	e6af2073 	sxtb	r2, r3
   47c18:	e5f53001 	ldrb	r3, [r5, #1]!
   47c1c:	e0844104 	add	r4, r4, r4, lsl #2
   47c20:	e2431030 	sub	r1, r3, #48	; 0x30
   47c24:	e0824084 	add	r4, r2, r4, lsl #1
   47c28:	e3510009 	cmp	r1, #9
   47c2c:	e2444030 	sub	r4, r4, #48	; 0x30
   47c30:	9afffff7 	bls	47c14 <StringFormatV+0xa0>
   47c34:	e6af3073 	sxtb	r3, r3
   47c38:	e353006c 	cmp	r3, #108	; 0x6c
   47c3c:	0a000088 	beq	47e64 <StringFormatV+0x2f0>
   47c40:	e1d530d0 	ldrsb	r3, [r5]
   47c44:	e2432058 	sub	r2, r3, #88	; 0x58
   47c48:	e3520020 	cmp	r2, #32
   47c4c:	979ff102 	ldrls	pc, [pc, r2, lsl #2]
   47c50:	ea000076 	b	47e30 <StringFormatV+0x2bc>
   47c54:	00047dd8 	.word	0x00047dd8
   47c58:	00047e30 	.word	0x00047e30
   47c5c:	00047e30 	.word	0x00047e30
   47c60:	00047e30 	.word	0x00047e30
   47c64:	00047e30 	.word	0x00047e30
   47c68:	00047e30 	.word	0x00047e30
   47c6c:	00047e30 	.word	0x00047e30
   47c70:	00047e30 	.word	0x00047e30
   47c74:	00047e30 	.word	0x00047e30
   47c78:	00047e30 	.word	0x00047e30
   47c7c:	00047e30 	.word	0x00047e30
   47c80:	00047d98 	.word	0x00047d98
   47c84:	00047de0 	.word	0x00047de0
   47c88:	00047e30 	.word	0x00047e30
   47c8c:	00047e30 	.word	0x00047e30
   47c90:	00047e30 	.word	0x00047e30
   47c94:	00047e30 	.word	0x00047e30
   47c98:	00047e30 	.word	0x00047e30
   47c9c:	00047e30 	.word	0x00047e30
   47ca0:	00047e30 	.word	0x00047e30
   47ca4:	00047e30 	.word	0x00047e30
   47ca8:	00047e30 	.word	0x00047e30
   47cac:	00047e30 	.word	0x00047e30
   47cb0:	00047d8c 	.word	0x00047d8c
   47cb4:	00047e30 	.word	0x00047e30
   47cb8:	00047e30 	.word	0x00047e30
   47cbc:	00047e30 	.word	0x00047e30
   47cc0:	00047d58 	.word	0x00047d58
   47cc4:	00047e30 	.word	0x00047e30
   47cc8:	00047cd8 	.word	0x00047cd8
   47ccc:	00047e30 	.word	0x00047e30
   47cd0:	00047e30 	.word	0x00047e30
   47cd4:	00047dd8 	.word	0x00047dd8
   47cd8:	e3a0200a 	mov	r2, #10
   47cdc:	e2433058 	sub	r3, r3, #88	; 0x58
   47ce0:	e16f3f13 	clz	r3, r3
   47ce4:	e5971000 	ldr	r1, [r7]
   47ce8:	e1a032a3 	lsr	r3, r3, #5
   47cec:	e28d0004 	add	r0, sp, #4
   47cf0:	ebffff6f 	bl	47ab4 <ntoa>
   47cf4:	e28d0004 	add	r0, sp, #4
   47cf8:	eb000111 	bl	48144 <uspi_strlen>
   47cfc:	e3580000 	cmp	r8, #0
   47d00:	e2877004 	add	r7, r7, #4
   47d04:	e1a0a000 	mov	sl, r0
   47d08:	1a000081 	bne	47f14 <StringFormatV+0x3a0>
   47d0c:	e1500004 	cmp	r0, r4
   47d10:	2a000005 	bcs	47d2c <StringFormatV+0x1b8>
   47d14:	e3590000 	cmp	r9, #0
   47d18:	e0602004 	rsb	r2, r0, r4
   47d1c:	13a01030 	movne	r1, #48	; 0x30
   47d20:	03a01020 	moveq	r1, #32
   47d24:	e1a00006 	mov	r0, r6
   47d28:	ebffff2f 	bl	479ec <StringPutChar>
   47d2c:	e1a00006 	mov	r0, r6
   47d30:	e28d1004 	add	r1, sp, #4
   47d34:	ebffff46 	bl	47a54 <StringPutString>
   47d38:	e2855001 	add	r5, r5, #1
   47d3c:	e5d51000 	ldrb	r1, [r5]
   47d40:	e3510000 	cmp	r1, #0
   47d44:	1affff9c 	bne	47bbc <StringFormatV+0x48>
   47d48:	e5963008 	ldr	r3, [r6, #8]
   47d4c:	e5c31000 	strb	r1, [r3]
   47d50:	e28dd010 	add	sp, sp, #16
   47d54:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   47d58:	e5979000 	ldr	r9, [r7]
   47d5c:	e2877004 	add	r7, r7, #4
   47d60:	e1a00009 	mov	r0, r9
   47d64:	eb0000f6 	bl	48144 <uspi_strlen>
   47d68:	e3580000 	cmp	r8, #0
   47d6c:	e1a0a000 	mov	sl, r0
   47d70:	1a000096 	bne	47fd0 <StringFormatV+0x45c>
   47d74:	e1500004 	cmp	r0, r4
   47d78:	3a00009a 	bcc	47fe8 <StringFormatV+0x474>
   47d7c:	e1a01009 	mov	r1, r9
   47d80:	e1a00006 	mov	r0, r6
   47d84:	ebffff32 	bl	47a54 <StringPutString>
   47d88:	eaffffea 	b	47d38 <StringFormatV+0x1c4>
   47d8c:	e3a02008 	mov	r2, #8
   47d90:	e3a0306f 	mov	r3, #111	; 0x6f
   47d94:	eaffffd0 	b	47cdc <StringFormatV+0x168>
   47d98:	e3580000 	cmp	r8, #0
   47d9c:	e2878004 	add	r8, r7, #4
   47da0:	e5d77000 	ldrb	r7, [r7]
   47da4:	1a00007c 	bne	47f9c <StringFormatV+0x428>
   47da8:	e3540001 	cmp	r4, #1
   47dac:	9a000003 	bls	47dc0 <StringFormatV+0x24c>
   47db0:	e2442001 	sub	r2, r4, #1
   47db4:	e1a00006 	mov	r0, r6
   47db8:	e3a01020 	mov	r1, #32
   47dbc:	ebffff0a 	bl	479ec <StringPutChar>
   47dc0:	e6af1077 	sxtb	r1, r7
   47dc4:	e1a00006 	mov	r0, r6
   47dc8:	e3a02001 	mov	r2, #1
   47dcc:	e1a07008 	mov	r7, r8
   47dd0:	ebffff05 	bl	479ec <StringPutChar>
   47dd4:	eaffffd7 	b	47d38 <StringFormatV+0x1c4>
   47dd8:	e3a02010 	mov	r2, #16
   47ddc:	eaffffbe 	b	47cdc <StringFormatV+0x168>
   47de0:	e5971000 	ldr	r1, [r7]
   47de4:	e2877004 	add	r7, r7, #4
   47de8:	e3510000 	cmp	r1, #0
   47dec:	ba000052 	blt	47f3c <StringFormatV+0x3c8>
   47df0:	e3a0200a 	mov	r2, #10
   47df4:	e3a03000 	mov	r3, #0
   47df8:	e28d0004 	add	r0, sp, #4
   47dfc:	ebffff2c 	bl	47ab4 <ntoa>
   47e00:	e28d0004 	add	r0, sp, #4
   47e04:	eb0000ce 	bl	48144 <uspi_strlen>
   47e08:	e3580000 	cmp	r8, #0
   47e0c:	e1a09000 	mov	r9, r0
   47e10:	1a000057 	bne	47f74 <StringFormatV+0x400>
   47e14:	e1540000 	cmp	r4, r0
   47e18:	9affffc3 	bls	47d2c <StringFormatV+0x1b8>
   47e1c:	e0602004 	rsb	r2, r0, r4
   47e20:	e3a01020 	mov	r1, #32
   47e24:	e1a00006 	mov	r0, r6
   47e28:	ebfffeef 	bl	479ec <StringPutChar>
   47e2c:	eaffffbe 	b	47d2c <StringFormatV+0x1b8>
   47e30:	e1a00006 	mov	r0, r6
   47e34:	e3a01025 	mov	r1, #37	; 0x25
   47e38:	e3a02001 	mov	r2, #1
   47e3c:	ebfffeea 	bl	479ec <StringPutChar>
   47e40:	e1a00006 	mov	r0, r6
   47e44:	e1d510d0 	ldrsb	r1, [r5]
   47e48:	e3a02001 	mov	r2, #1
   47e4c:	ebfffee6 	bl	479ec <StringPutChar>
   47e50:	eaffffb8 	b	47d38 <StringFormatV+0x1c4>
   47e54:	e1a00006 	mov	r0, r6
   47e58:	e3a02001 	mov	r2, #1
   47e5c:	ebfffee2 	bl	479ec <StringPutChar>
   47e60:	eaffffb4 	b	47d38 <StringFormatV+0x1c4>
   47e64:	e1d530d1 	ldrsb	r3, [r5, #1]
   47e68:	e2855001 	add	r5, r5, #1
   47e6c:	e2432058 	sub	r2, r3, #88	; 0x58
   47e70:	e3520020 	cmp	r2, #32
   47e74:	979ff102 	ldrls	pc, [pc, r2, lsl #2]
   47e78:	eaffffec 	b	47e30 <StringFormatV+0x2bc>
   47e7c:	00047dd8 	.word	0x00047dd8
   47e80:	00047e30 	.word	0x00047e30
   47e84:	00047e30 	.word	0x00047e30
   47e88:	00047e30 	.word	0x00047e30
   47e8c:	00047e30 	.word	0x00047e30
   47e90:	00047e30 	.word	0x00047e30
   47e94:	00047e30 	.word	0x00047e30
   47e98:	00047e30 	.word	0x00047e30
   47e9c:	00047e30 	.word	0x00047e30
   47ea0:	00047e30 	.word	0x00047e30
   47ea4:	00047e30 	.word	0x00047e30
   47ea8:	00047d98 	.word	0x00047d98
   47eac:	00047de0 	.word	0x00047de0
   47eb0:	00047e30 	.word	0x00047e30
   47eb4:	00047e30 	.word	0x00047e30
   47eb8:	00047e30 	.word	0x00047e30
   47ebc:	00047e30 	.word	0x00047e30
   47ec0:	00047e30 	.word	0x00047e30
   47ec4:	00047e30 	.word	0x00047e30
   47ec8:	00047e30 	.word	0x00047e30
   47ecc:	00047e30 	.word	0x00047e30
   47ed0:	00047e30 	.word	0x00047e30
   47ed4:	00047e30 	.word	0x00047e30
   47ed8:	00047d8c 	.word	0x00047d8c
   47edc:	00047e30 	.word	0x00047e30
   47ee0:	00047e30 	.word	0x00047e30
   47ee4:	00047e30 	.word	0x00047e30
   47ee8:	00047d58 	.word	0x00047d58
   47eec:	00047e30 	.word	0x00047e30
   47ef0:	00047cd8 	.word	0x00047cd8
   47ef4:	00047e30 	.word	0x00047e30
   47ef8:	00047e30 	.word	0x00047e30
   47efc:	00047dd8 	.word	0x00047dd8
   47f00:	e1a00006 	mov	r0, r6
   47f04:	e3a02001 	mov	r2, #1
   47f08:	e2855002 	add	r5, r5, #2
   47f0c:	ebfffeb6 	bl	479ec <StringPutChar>
   47f10:	eaffff26 	b	47bb0 <StringFormatV+0x3c>
   47f14:	e1a00006 	mov	r0, r6
   47f18:	e28d1004 	add	r1, sp, #4
   47f1c:	ebfffecc 	bl	47a54 <StringPutString>
   47f20:	e15a0004 	cmp	sl, r4
   47f24:	2affff83 	bcs	47d38 <StringFormatV+0x1c4>
   47f28:	e06a2004 	rsb	r2, sl, r4
   47f2c:	e1a00006 	mov	r0, r6
   47f30:	e3a01020 	mov	r1, #32
   47f34:	ebfffeac 	bl	479ec <StringPutChar>
   47f38:	eaffff7e 	b	47d38 <StringFormatV+0x1c4>
   47f3c:	e2611000 	rsb	r1, r1, #0
   47f40:	e3a0200a 	mov	r2, #10
   47f44:	e3a03000 	mov	r3, #0
   47f48:	e28d0004 	add	r0, sp, #4
   47f4c:	ebfffed8 	bl	47ab4 <ntoa>
   47f50:	e28d0004 	add	r0, sp, #4
   47f54:	eb00007a 	bl	48144 <uspi_strlen>
   47f58:	e3580000 	cmp	r8, #0
   47f5c:	e2809001 	add	r9, r0, #1
   47f60:	0a000025 	beq	47ffc <StringFormatV+0x488>
   47f64:	e1a00006 	mov	r0, r6
   47f68:	e3a0102d 	mov	r1, #45	; 0x2d
   47f6c:	e3a02001 	mov	r2, #1
   47f70:	ebfffe9d 	bl	479ec <StringPutChar>
   47f74:	e1a00006 	mov	r0, r6
   47f78:	e28d1004 	add	r1, sp, #4
   47f7c:	ebfffeb4 	bl	47a54 <StringPutString>
   47f80:	e1540009 	cmp	r4, r9
   47f84:	9affff6b 	bls	47d38 <StringFormatV+0x1c4>
   47f88:	e0692004 	rsb	r2, r9, r4
   47f8c:	e1a00006 	mov	r0, r6
   47f90:	e3a01020 	mov	r1, #32
   47f94:	ebfffe94 	bl	479ec <StringPutChar>
   47f98:	eaffff66 	b	47d38 <StringFormatV+0x1c4>
   47f9c:	e6af1077 	sxtb	r1, r7
   47fa0:	e1a00006 	mov	r0, r6
   47fa4:	e3a02001 	mov	r2, #1
   47fa8:	ebfffe8f 	bl	479ec <StringPutChar>
   47fac:	e3540001 	cmp	r4, #1
   47fb0:	91a07008 	movls	r7, r8
   47fb4:	9affff5f 	bls	47d38 <StringFormatV+0x1c4>
   47fb8:	e2442001 	sub	r2, r4, #1
   47fbc:	e1a00006 	mov	r0, r6
   47fc0:	e3a01020 	mov	r1, #32
   47fc4:	e1a07008 	mov	r7, r8
   47fc8:	ebfffe87 	bl	479ec <StringPutChar>
   47fcc:	eaffff59 	b	47d38 <StringFormatV+0x1c4>
   47fd0:	e1a01009 	mov	r1, r9
   47fd4:	e1a00006 	mov	r0, r6
   47fd8:	ebfffe9d 	bl	47a54 <StringPutString>
   47fdc:	e15a0004 	cmp	sl, r4
   47fe0:	2affff54 	bcs	47d38 <StringFormatV+0x1c4>
   47fe4:	eaffffcf 	b	47f28 <StringFormatV+0x3b4>
   47fe8:	e0602004 	rsb	r2, r0, r4
   47fec:	e3a01020 	mov	r1, #32
   47ff0:	e1a00006 	mov	r0, r6
   47ff4:	ebfffe7c 	bl	479ec <StringPutChar>
   47ff8:	eaffff5f 	b	47d7c <StringFormatV+0x208>
   47ffc:	e1540009 	cmp	r4, r9
   48000:	8a000009 	bhi	4802c <StringFormatV+0x4b8>
   48004:	e1a00006 	mov	r0, r6
   48008:	e3a0102d 	mov	r1, #45	; 0x2d
   4800c:	e3a02001 	mov	r2, #1
   48010:	ebfffe75 	bl	479ec <StringPutChar>
   48014:	eaffff44 	b	47d2c <StringFormatV+0x1b8>
   48018:	e59f0020 	ldr	r0, [pc, #32]	; 48040 <StringFormatV+0x4cc>
   4801c:	e59f1020 	ldr	r1, [pc, #32]	; 48044 <StringFormatV+0x4d0>
   48020:	e3a020ad 	mov	r2, #173	; 0xad
   48024:	ebffbb87 	bl	36e48 <uspi_assertion_failed>
   48028:	eafffed7 	b	47b8c <StringFormatV+0x18>
   4802c:	e0692004 	rsb	r2, r9, r4
   48030:	e1a00006 	mov	r0, r6
   48034:	e3a01020 	mov	r1, #32
   48038:	ebfffe6b 	bl	479ec <StringPutChar>
   4803c:	eafffff0 	b	48004 <StringFormatV+0x490>
   48040:	00056434 	.word	0x00056434
   48044:	0005797c 	.word	0x0005797c

00048048 <StringFormat>:
   48048:	e92d000e 	push	{r1, r2, r3}
   4804c:	e92d4010 	push	{r4, lr}
   48050:	e2504000 	subs	r4, r0, #0
   48054:	e24dd00c 	sub	sp, sp, #12
   48058:	0a000009 	beq	48084 <StringFormat+0x3c>
   4805c:	e28d3018 	add	r3, sp, #24
   48060:	e1a00004 	mov	r0, r4
   48064:	e1a02003 	mov	r2, r3
   48068:	e59d1014 	ldr	r1, [sp, #20]
   4806c:	e58d3004 	str	r3, [sp, #4]
   48070:	ebfffebf 	bl	47b74 <StringFormatV>
   48074:	e28dd00c 	add	sp, sp, #12
   48078:	e8bd4010 	pop	{r4, lr}
   4807c:	e28dd00c 	add	sp, sp, #12
   48080:	e12fff1e 	bx	lr
   48084:	e59f000c 	ldr	r0, [pc, #12]	; 48098 <StringFormat+0x50>
   48088:	e59f100c 	ldr	r1, [pc, #12]	; 4809c <StringFormat+0x54>
   4808c:	e3a020a1 	mov	r2, #161	; 0xa1
   48090:	ebffbb6c 	bl	36e48 <uspi_assertion_failed>
   48094:	eafffff0 	b	4805c <StringFormat+0x14>
   48098:	00056434 	.word	0x00056434
   4809c:	0005797c 	.word	0x0005797c

000480a0 <uspi_memset>:
   480a0:	e3520000 	cmp	r2, #0
   480a4:	012fff1e 	bxeq	lr
   480a8:	e1a03000 	mov	r3, r0
   480ac:	e6ef1071 	uxtb	r1, r1
   480b0:	e0802002 	add	r2, r0, r2
   480b4:	e4c31001 	strb	r1, [r3], #1
   480b8:	e1530002 	cmp	r3, r2
   480bc:	1afffffc 	bne	480b4 <uspi_memset+0x14>
   480c0:	e12fff1e 	bx	lr

000480c4 <uspi_memcpy>:
   480c4:	e3520000 	cmp	r2, #0
   480c8:	012fff1e 	bxeq	lr
   480cc:	e0812002 	add	r2, r1, r2
   480d0:	e2403001 	sub	r3, r0, #1
   480d4:	e4d1c001 	ldrb	ip, [r1], #1
   480d8:	e1510002 	cmp	r1, r2
   480dc:	e5e3c001 	strb	ip, [r3, #1]!
   480e0:	1afffffb 	bne	480d4 <uspi_memcpy+0x10>
   480e4:	e12fff1e 	bx	lr

000480e8 <uspi_memcmp>:
   480e8:	e3520000 	cmp	r2, #0
   480ec:	0a00000e 	beq	4812c <uspi_memcmp+0x44>
   480f0:	e5d0c000 	ldrb	ip, [r0]
   480f4:	e5d13000 	ldrb	r3, [r1]
   480f8:	e15c0003 	cmp	ip, r3
   480fc:	8a00000c 	bhi	48134 <uspi_memcmp+0x4c>
   48100:	3a00000d 	bcc	4813c <uspi_memcmp+0x54>
   48104:	e0802002 	add	r2, r0, r2
   48108:	e2800001 	add	r0, r0, #1
   4810c:	ea000004 	b	48124 <uspi_memcmp+0x3c>
   48110:	e4d0c001 	ldrb	ip, [r0], #1
   48114:	e5f13001 	ldrb	r3, [r1, #1]!
   48118:	e15c0003 	cmp	ip, r3
   4811c:	8a000004 	bhi	48134 <uspi_memcmp+0x4c>
   48120:	3a000005 	bcc	4813c <uspi_memcmp+0x54>
   48124:	e1500002 	cmp	r0, r2
   48128:	1afffff8 	bne	48110 <uspi_memcmp+0x28>
   4812c:	e3a00000 	mov	r0, #0
   48130:	e12fff1e 	bx	lr
   48134:	e3a00001 	mov	r0, #1
   48138:	e12fff1e 	bx	lr
   4813c:	e3e00000 	mvn	r0, #0
   48140:	e12fff1e 	bx	lr

00048144 <uspi_strlen>:
   48144:	e1d010d0 	ldrsb	r1, [r0]
   48148:	e2803001 	add	r3, r0, #1
   4814c:	e3510000 	cmp	r1, #0
   48150:	0a000003 	beq	48164 <uspi_strlen+0x20>
   48154:	e0601003 	rsb	r1, r0, r3
   48158:	e0d320d1 	ldrsb	r2, [r3], #1
   4815c:	e3520000 	cmp	r2, #0
   48160:	1afffffb 	bne	48154 <uspi_strlen+0x10>
   48164:	e1a00001 	mov	r0, r1
   48168:	e12fff1e 	bx	lr

0004816c <uspi_strcmp>:
   4816c:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   48170:	e5d03000 	ldrb	r3, [r0]
   48174:	e5d12000 	ldrb	r2, [r1]
   48178:	e3530000 	cmp	r3, #0
   4817c:	0a000013 	beq	481d0 <uspi_strcmp+0x64>
   48180:	e3520000 	cmp	r2, #0
   48184:	0a000011 	beq	481d0 <uspi_strcmp+0x64>
   48188:	e6af2072 	sxtb	r2, r2
   4818c:	e6af3073 	sxtb	r3, r3
   48190:	e1520003 	cmp	r2, r3
   48194:	ba000014 	blt	481ec <uspi_strcmp+0x80>
   48198:	da000007 	ble	481bc <uspi_strcmp+0x50>
   4819c:	ea000014 	b	481f4 <uspi_strcmp+0x88>
   481a0:	e5f12001 	ldrb	r2, [r1, #1]!
   481a4:	e3520000 	cmp	r2, #0
   481a8:	e6afe072 	sxtb	lr, r2
   481ac:	0a000007 	beq	481d0 <uspi_strcmp+0x64>
   481b0:	e15c000e 	cmp	ip, lr
   481b4:	ca00000c 	bgt	481ec <uspi_strcmp+0x80>
   481b8:	ba00000d 	blt	481f4 <uspi_strcmp+0x88>
   481bc:	e5f03001 	ldrb	r3, [r0, #1]!
   481c0:	e3530000 	cmp	r3, #0
   481c4:	e6afc073 	sxtb	ip, r3
   481c8:	1afffff4 	bne	481a0 <uspi_strcmp+0x34>
   481cc:	e5d12001 	ldrb	r2, [r1, #1]
   481d0:	e6af2072 	sxtb	r2, r2
   481d4:	e6af3073 	sxtb	r3, r3
   481d8:	e1520003 	cmp	r2, r3
   481dc:	ba000002 	blt	481ec <uspi_strcmp+0x80>
   481e0:	c3e00000 	mvngt	r0, #0
   481e4:	d3a00000 	movle	r0, #0
   481e8:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
   481ec:	e3a00001 	mov	r0, #1
   481f0:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
   481f4:	e3e00000 	mvn	r0, #0
   481f8:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

000481fc <uspi_strcpy>:
   481fc:	e5d13000 	ldrb	r3, [r1]
   48200:	e1a02000 	mov	r2, r0
   48204:	e3530000 	cmp	r3, #0
   48208:	0a000003 	beq	4821c <uspi_strcpy+0x20>
   4820c:	e4c23001 	strb	r3, [r2], #1
   48210:	e5f13001 	ldrb	r3, [r1, #1]!
   48214:	e3530000 	cmp	r3, #0
   48218:	1afffffb 	bne	4820c <uspi_strcpy+0x10>
   4821c:	e3a03000 	mov	r3, #0
   48220:	e5c23000 	strb	r3, [r2]
   48224:	e12fff1e 	bx	lr

00048228 <uspi_strncpy>:
   48228:	e3520000 	cmp	r2, #0
   4822c:	012fff1e 	bxeq	lr
   48230:	e5d13000 	ldrb	r3, [r1]
   48234:	e3530000 	cmp	r3, #0
   48238:	0a00000a 	beq	48268 <uspi_strncpy+0x40>
   4823c:	e0812002 	add	r2, r1, r2
   48240:	e1a0c000 	mov	ip, r0
   48244:	e2811001 	add	r1, r1, #1
   48248:	ea000002 	b	48258 <uspi_strncpy+0x30>
   4824c:	e4d13001 	ldrb	r3, [r1], #1
   48250:	e3530000 	cmp	r3, #0
   48254:	0a000004 	beq	4826c <uspi_strncpy+0x44>
   48258:	e1510002 	cmp	r1, r2
   4825c:	e4cc3001 	strb	r3, [ip], #1
   48260:	1afffff9 	bne	4824c <uspi_strncpy+0x24>
   48264:	e12fff1e 	bx	lr
   48268:	e1a0c000 	mov	ip, r0
   4826c:	e3a03000 	mov	r3, #0
   48270:	e5cc3000 	strb	r3, [ip]
   48274:	e12fff1e 	bx	lr

00048278 <uspi_strcat>:
   48278:	e1d030d0 	ldrsb	r3, [r0]
   4827c:	e3530000 	cmp	r3, #0
   48280:	e1a03000 	mov	r3, r0
   48284:	0a000002 	beq	48294 <uspi_strcat+0x1c>
   48288:	e1f320d1 	ldrsb	r2, [r3, #1]!
   4828c:	e3520000 	cmp	r2, #0
   48290:	1afffffc 	bne	48288 <uspi_strcat+0x10>
   48294:	e5d12000 	ldrb	r2, [r1]
   48298:	e3520000 	cmp	r2, #0
   4829c:	0a000003 	beq	482b0 <uspi_strcat+0x38>
   482a0:	e4c32001 	strb	r2, [r3], #1
   482a4:	e5f12001 	ldrb	r2, [r1, #1]!
   482a8:	e3520000 	cmp	r2, #0
   482ac:	1afffffb 	bne	482a0 <uspi_strcat+0x28>
   482b0:	e3a02000 	mov	r2, #0
   482b4:	e5c32000 	strb	r2, [r3]
   482b8:	e12fff1e 	bx	lr

000482bc <uspi_char2int>:
   482bc:	e12fff1e 	bx	lr

000482c0 <uspi_le2be16>:
   482c0:	e6bf0fb0 	rev16	r0, r0
   482c4:	e6ff0070 	uxth	r0, r0
   482c8:	e12fff1e 	bx	lr

000482cc <uspi_le2be32>:
   482cc:	e6bf0f30 	rev	r0, r0
   482d0:	e12fff1e 	bx	lr

000482d4 <USBBulkOnlyMassStorageDevice>:
   482d4:	e92d4038 	push	{r3, r4, r5, lr}
   482d8:	e2504000 	subs	r4, r0, #0
   482dc:	e1a05001 	mov	r5, r1
   482e0:	0a00000d 	beq	4831c <USBBulkOnlyMassStorageDevice+0x48>
   482e4:	e1a01005 	mov	r1, r5
   482e8:	e1a00004 	mov	r0, r4
   482ec:	ebfff3d6 	bl	4524c <USBFunctionCopy>
   482f0:	e3a03000 	mov	r3, #0
   482f4:	e3a00000 	mov	r0, #0
   482f8:	e3a01000 	mov	r1, #0
   482fc:	e59f202c 	ldr	r2, [pc, #44]	; 48330 <USBBulkOnlyMassStorageDevice+0x5c>
   48300:	e1c402f0 	strd	r0, [r4, #32]
   48304:	e5843010 	str	r3, [r4, #16]
   48308:	e5843014 	str	r3, [r4, #20]
   4830c:	e5843018 	str	r3, [r4, #24]
   48310:	e584301c 	str	r3, [r4, #28]
   48314:	e5842000 	str	r2, [r4]
   48318:	e8bd8038 	pop	{r3, r4, r5, pc}
   4831c:	e59f0010 	ldr	r0, [pc, #16]	; 48334 <USBBulkOnlyMassStorageDevice+0x60>
   48320:	e59f1010 	ldr	r1, [pc, #16]	; 48338 <USBBulkOnlyMassStorageDevice+0x64>
   48324:	e3a020c8 	mov	r2, #200	; 0xc8
   48328:	ebffbac6 	bl	36e48 <uspi_assertion_failed>
   4832c:	eaffffec 	b	482e4 <USBBulkOnlyMassStorageDevice+0x10>
   48330:	000486f0 	.word	0x000486f0
   48334:	00056434 	.word	0x00056434
   48338:	00057990 	.word	0x00057990

0004833c <_USBBulkOnlyMassStorageDevice>:
   4833c:	e92d4010 	push	{r4, lr}
   48340:	e2504000 	subs	r4, r0, #0
   48344:	0a000012 	beq	48394 <_USBBulkOnlyMassStorageDevice+0x58>
   48348:	e5940014 	ldr	r0, [r4, #20]
   4834c:	e3500000 	cmp	r0, #0
   48350:	0a000004 	beq	48368 <_USBBulkOnlyMassStorageDevice+0x2c>
   48354:	ebffed56 	bl	438b4 <_USBEndpoint>
   48358:	e5940014 	ldr	r0, [r4, #20]
   4835c:	ebffba93 	bl	36db0 <free>
   48360:	e3a03000 	mov	r3, #0
   48364:	e5843014 	str	r3, [r4, #20]
   48368:	e5940010 	ldr	r0, [r4, #16]
   4836c:	e3500000 	cmp	r0, #0
   48370:	0a000004 	beq	48388 <_USBBulkOnlyMassStorageDevice+0x4c>
   48374:	ebffed4e 	bl	438b4 <_USBEndpoint>
   48378:	e5940010 	ldr	r0, [r4, #16]
   4837c:	ebffba8b 	bl	36db0 <free>
   48380:	e3a03000 	mov	r3, #0
   48384:	e5843010 	str	r3, [r4, #16]
   48388:	e1a00004 	mov	r0, r4
   4838c:	e8bd4010 	pop	{r4, lr}
   48390:	eafff3ec 	b	45348 <_USBFunction>
   48394:	e59f000c 	ldr	r0, [pc, #12]	; 483a8 <_USBBulkOnlyMassStorageDevice+0x6c>
   48398:	e59f100c 	ldr	r1, [pc, #12]	; 483ac <_USBBulkOnlyMassStorageDevice+0x70>
   4839c:	e3a020d6 	mov	r2, #214	; 0xd6
   483a0:	ebffbaa8 	bl	36e48 <uspi_assertion_failed>
   483a4:	eaffffe7 	b	48348 <_USBBulkOnlyMassStorageDevice+0xc>
   483a8:	00056434 	.word	0x00056434
   483ac:	00057990 	.word	0x00057990

000483b0 <USBBulkOnlyMassStorageDeviceSeek>:
   483b0:	e92d4070 	push	{r4, r5, r6, lr}
   483b4:	e2506000 	subs	r6, r0, #0
   483b8:	e1a04002 	mov	r4, r2
   483bc:	e1a05003 	mov	r5, r3
   483c0:	0a000003 	beq	483d4 <USBBulkOnlyMassStorageDeviceSeek+0x24>
   483c4:	e1c642f0 	strd	r4, [r6, #32]
   483c8:	e1a00004 	mov	r0, r4
   483cc:	e1a01005 	mov	r1, r5
   483d0:	e8bd8070 	pop	{r4, r5, r6, pc}
   483d4:	e59f000c 	ldr	r0, [pc, #12]	; 483e8 <USBBulkOnlyMassStorageDeviceSeek+0x38>
   483d8:	e59f100c 	ldr	r1, [pc, #12]	; 483ec <USBBulkOnlyMassStorageDeviceSeek+0x3c>
   483dc:	e59f200c 	ldr	r2, [pc, #12]	; 483f0 <USBBulkOnlyMassStorageDeviceSeek+0x40>
   483e0:	ebffba98 	bl	36e48 <uspi_assertion_failed>
   483e4:	eafffff6 	b	483c4 <USBBulkOnlyMassStorageDeviceSeek+0x14>
   483e8:	00056434 	.word	0x00056434
   483ec:	00057990 	.word	0x00057990
   483f0:	000001d3 	.word	0x000001d3

000483f4 <USBBulkOnlyMassStorageDeviceGetCapacity>:
   483f4:	e92d4010 	push	{r4, lr}
   483f8:	e2504000 	subs	r4, r0, #0
   483fc:	0a000001 	beq	48408 <USBBulkOnlyMassStorageDeviceGetCapacity+0x14>
   48400:	e594001c 	ldr	r0, [r4, #28]
   48404:	e8bd8010 	pop	{r4, pc}
   48408:	e59f0010 	ldr	r0, [pc, #16]	; 48420 <USBBulkOnlyMassStorageDeviceGetCapacity+0x2c>
   4840c:	e59f1010 	ldr	r1, [pc, #16]	; 48424 <USBBulkOnlyMassStorageDeviceGetCapacity+0x30>
   48410:	e3a02f77 	mov	r2, #476	; 0x1dc
   48414:	ebffba8b 	bl	36e48 <uspi_assertion_failed>
   48418:	e594001c 	ldr	r0, [r4, #28]
   4841c:	e8bd8010 	pop	{r4, pc}
   48420:	00056434 	.word	0x00056434
   48424:	00057990 	.word	0x00057990

00048428 <USBBulkOnlyMassStorageDeviceCommand>:
   48428:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   4842c:	e2504000 	subs	r4, r0, #0
   48430:	e24dd034 	sub	sp, sp, #52	; 0x34
   48434:	e1a0a001 	mov	sl, r1
   48438:	e1a06002 	mov	r6, r2
   4843c:	e1a09003 	mov	r9, r3
   48440:	e59d7058 	ldr	r7, [sp, #88]	; 0x58
   48444:	e59d805c 	ldr	r8, [sp, #92]	; 0x5c
   48448:	0a00005f 	beq	485cc <USBBulkOnlyMassStorageDeviceCommand+0x1a4>
   4844c:	e35a0000 	cmp	sl, #0
   48450:	0a000067 	beq	485f4 <USBBulkOnlyMassStorageDeviceCommand+0x1cc>
   48454:	e2463006 	sub	r3, r6, #6
   48458:	e353000a 	cmp	r3, #10
   4845c:	8a000050 	bhi	485a4 <USBBulkOnlyMassStorageDeviceCommand+0x17c>
   48460:	e2975000 	adds	r5, r7, #0
   48464:	13a05001 	movne	r5, #1
   48468:	e3590000 	cmp	r9, #0
   4846c:	13a03000 	movne	r3, #0
   48470:	02053001 	andeq	r3, r5, #1
   48474:	e3530000 	cmp	r3, #0
   48478:	1a00004e 	bne	485b8 <USBBulkOnlyMassStorageDeviceCommand+0x190>
   4847c:	e3a01000 	mov	r1, #0
   48480:	e3a0201f 	mov	r2, #31
   48484:	e28d0010 	add	r0, sp, #16
   48488:	ebffff04 	bl	480a0 <uspi_memset>
   4848c:	e3580000 	cmp	r8, #0
   48490:	13a0b080 	movne	fp, #128	; 0x80
   48494:	03a0b000 	moveq	fp, #0
   48498:	e594c018 	ldr	ip, [r4, #24]
   4849c:	e5dd001d 	ldrb	r0, [sp, #29]
   484a0:	e28cc001 	add	ip, ip, #1
   484a4:	e584c018 	str	ip, [r4, #24]
   484a8:	e5dd301e 	ldrb	r3, [sp, #30]
   484ac:	e206201f 	and	r2, r6, #31
   484b0:	e59fe1e8 	ldr	lr, [pc, #488]	; 486a0 <USBBulkOnlyMassStorageDeviceCommand+0x278>
   484b4:	e3c3301f 	bic	r3, r3, #31
   484b8:	e1823003 	orr	r3, r2, r3
   484bc:	e1a0100a 	mov	r1, sl
   484c0:	e1a02006 	mov	r2, r6
   484c4:	e3c0600f 	bic	r6, r0, #15
   484c8:	e28d001f 	add	r0, sp, #31
   484cc:	e58dc014 	str	ip, [sp, #20]
   484d0:	e5cd301e 	strb	r3, [sp, #30]
   484d4:	e5cd601d 	strb	r6, [sp, #29]
   484d8:	e58de010 	str	lr, [sp, #16]
   484dc:	e58d7018 	str	r7, [sp, #24]
   484e0:	e5cdb01c 	strb	fp, [sp, #28]
   484e4:	ebfffef6 	bl	480c4 <uspi_memcpy>
   484e8:	e1a00004 	mov	r0, r4
   484ec:	ebfff416 	bl	4554c <USBFunctionGetHost>
   484f0:	e2506000 	subs	r6, r0, #0
   484f4:	0a000039 	beq	485e0 <USBBulkOnlyMassStorageDeviceCommand+0x1b8>
   484f8:	e28d2010 	add	r2, sp, #16
   484fc:	e1a00006 	mov	r0, r6
   48500:	e5941014 	ldr	r1, [r4, #20]
   48504:	e3a0301f 	mov	r3, #31
   48508:	ebffdd43 	bl	3fa1c <DWHCIDeviceTransfer>
   4850c:	e3500000 	cmp	r0, #0
   48510:	ba000056 	blt	48670 <USBBulkOnlyMassStorageDeviceCommand+0x248>
   48514:	e3550000 	cmp	r5, #0
   48518:	0a000009 	beq	48544 <USBBulkOnlyMassStorageDeviceCommand+0x11c>
   4851c:	e5940010 	ldr	r0, [r4, #16]
   48520:	e3580000 	cmp	r8, #0
   48524:	e5941014 	ldr	r1, [r4, #20]
   48528:	e1a02009 	mov	r2, r9
   4852c:	11a01000 	movne	r1, r0
   48530:	e1a03007 	mov	r3, r7
   48534:	e1a00006 	mov	r0, r6
   48538:	ebffdd37 	bl	3fa1c <DWHCIDeviceTransfer>
   4853c:	e2505000 	subs	r5, r0, #0
   48540:	ba000050 	blt	48688 <USBBulkOnlyMassStorageDeviceCommand+0x260>
   48544:	e1a00006 	mov	r0, r6
   48548:	e5941010 	ldr	r1, [r4, #16]
   4854c:	e1a0200d 	mov	r2, sp
   48550:	e3a0300d 	mov	r3, #13
   48554:	ebffdd30 	bl	3fa1c <DWHCIDeviceTransfer>
   48558:	e350000d 	cmp	r0, #13
   4855c:	1a000029 	bne	48608 <USBBulkOnlyMassStorageDeviceCommand+0x1e0>
   48560:	e59f313c 	ldr	r3, [pc, #316]	; 486a4 <USBBulkOnlyMassStorageDeviceCommand+0x27c>
   48564:	e59d2000 	ldr	r2, [sp]
   48568:	e1520003 	cmp	r2, r3
   4856c:	1a00002b 	bne	48620 <USBBulkOnlyMassStorageDeviceCommand+0x1f8>
   48570:	e5943018 	ldr	r3, [r4, #24]
   48574:	e59d2004 	ldr	r2, [sp, #4]
   48578:	e1520003 	cmp	r2, r3
   4857c:	1a00002d 	bne	48638 <USBBulkOnlyMassStorageDeviceCommand+0x210>
   48580:	e5dd300c 	ldrb	r3, [sp, #12]
   48584:	e3530000 	cmp	r3, #0
   48588:	1a000030 	bne	48650 <USBBulkOnlyMassStorageDeviceCommand+0x228>
   4858c:	e59d3008 	ldr	r3, [sp, #8]
   48590:	e3530000 	cmp	r3, #0
   48594:	01a00005 	moveq	r0, r5
   48598:	1a00002e 	bne	48658 <USBBulkOnlyMassStorageDeviceCommand+0x230>
   4859c:	e28dd034 	add	sp, sp, #52	; 0x34
   485a0:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   485a4:	e59f00fc 	ldr	r0, [pc, #252]	; 486a8 <USBBulkOnlyMassStorageDeviceCommand+0x280>
   485a8:	e59f10fc 	ldr	r1, [pc, #252]	; 486ac <USBBulkOnlyMassStorageDeviceCommand+0x284>
   485ac:	e59f20fc 	ldr	r2, [pc, #252]	; 486b0 <USBBulkOnlyMassStorageDeviceCommand+0x288>
   485b0:	ebffba24 	bl	36e48 <uspi_assertion_failed>
   485b4:	eaffffa9 	b	48460 <USBBulkOnlyMassStorageDeviceCommand+0x38>
   485b8:	e59f00f4 	ldr	r0, [pc, #244]	; 486b4 <USBBulkOnlyMassStorageDeviceCommand+0x28c>
   485bc:	e59f10e8 	ldr	r1, [pc, #232]	; 486ac <USBBulkOnlyMassStorageDeviceCommand+0x284>
   485c0:	e59f20f0 	ldr	r2, [pc, #240]	; 486b8 <USBBulkOnlyMassStorageDeviceCommand+0x290>
   485c4:	ebffba1f 	bl	36e48 <uspi_assertion_failed>
   485c8:	eaffffab 	b	4847c <USBBulkOnlyMassStorageDeviceCommand+0x54>
   485cc:	e59f00e8 	ldr	r0, [pc, #232]	; 486bc <USBBulkOnlyMassStorageDeviceCommand+0x294>
   485d0:	e59f10d4 	ldr	r1, [pc, #212]	; 486ac <USBBulkOnlyMassStorageDeviceCommand+0x284>
   485d4:	e59f20e4 	ldr	r2, [pc, #228]	; 486c0 <USBBulkOnlyMassStorageDeviceCommand+0x298>
   485d8:	ebffba1a 	bl	36e48 <uspi_assertion_failed>
   485dc:	eaffff9a 	b	4844c <USBBulkOnlyMassStorageDeviceCommand+0x24>
   485e0:	e59f00dc 	ldr	r0, [pc, #220]	; 486c4 <USBBulkOnlyMassStorageDeviceCommand+0x29c>
   485e4:	e59f10c0 	ldr	r1, [pc, #192]	; 486ac <USBBulkOnlyMassStorageDeviceCommand+0x284>
   485e8:	e59f20d8 	ldr	r2, [pc, #216]	; 486c8 <USBBulkOnlyMassStorageDeviceCommand+0x2a0>
   485ec:	ebffba15 	bl	36e48 <uspi_assertion_failed>
   485f0:	eaffffc0 	b	484f8 <USBBulkOnlyMassStorageDeviceCommand+0xd0>
   485f4:	e59f00d0 	ldr	r0, [pc, #208]	; 486cc <USBBulkOnlyMassStorageDeviceCommand+0x2a4>
   485f8:	e59f10ac 	ldr	r1, [pc, #172]	; 486ac <USBBulkOnlyMassStorageDeviceCommand+0x284>
   485fc:	e59f20cc 	ldr	r2, [pc, #204]	; 486d0 <USBBulkOnlyMassStorageDeviceCommand+0x2a8>
   48600:	ebffba10 	bl	36e48 <uspi_assertion_failed>
   48604:	eaffff92 	b	48454 <USBBulkOnlyMassStorageDeviceCommand+0x2c>
   48608:	e59f00c4 	ldr	r0, [pc, #196]	; 486d4 <USBBulkOnlyMassStorageDeviceCommand+0x2ac>
   4860c:	e3a01001 	mov	r1, #1
   48610:	e59f20c0 	ldr	r2, [pc, #192]	; 486d8 <USBBulkOnlyMassStorageDeviceCommand+0x2b0>
   48614:	ebff6ed7 	bl	24178 <LogWrite>
   48618:	e3e00000 	mvn	r0, #0
   4861c:	eaffffde 	b	4859c <USBBulkOnlyMassStorageDeviceCommand+0x174>
   48620:	e59f00ac 	ldr	r0, [pc, #172]	; 486d4 <USBBulkOnlyMassStorageDeviceCommand+0x2ac>
   48624:	e3a01001 	mov	r1, #1
   48628:	e59f20ac 	ldr	r2, [pc, #172]	; 486dc <USBBulkOnlyMassStorageDeviceCommand+0x2b4>
   4862c:	ebff6ed1 	bl	24178 <LogWrite>
   48630:	e3e00000 	mvn	r0, #0
   48634:	eaffffd8 	b	4859c <USBBulkOnlyMassStorageDeviceCommand+0x174>
   48638:	e59f0094 	ldr	r0, [pc, #148]	; 486d4 <USBBulkOnlyMassStorageDeviceCommand+0x2ac>
   4863c:	e3a01001 	mov	r1, #1
   48640:	e59f2098 	ldr	r2, [pc, #152]	; 486e0 <USBBulkOnlyMassStorageDeviceCommand+0x2b8>
   48644:	ebff6ecb 	bl	24178 <LogWrite>
   48648:	e3e00000 	mvn	r0, #0
   4864c:	eaffffd2 	b	4859c <USBBulkOnlyMassStorageDeviceCommand+0x174>
   48650:	e3e00000 	mvn	r0, #0
   48654:	eaffffd0 	b	4859c <USBBulkOnlyMassStorageDeviceCommand+0x174>
   48658:	e59f0074 	ldr	r0, [pc, #116]	; 486d4 <USBBulkOnlyMassStorageDeviceCommand+0x2ac>
   4865c:	e3a01001 	mov	r1, #1
   48660:	e59f207c 	ldr	r2, [pc, #124]	; 486e4 <USBBulkOnlyMassStorageDeviceCommand+0x2bc>
   48664:	ebff6ec3 	bl	24178 <LogWrite>
   48668:	e3e00000 	mvn	r0, #0
   4866c:	eaffffca 	b	4859c <USBBulkOnlyMassStorageDeviceCommand+0x174>
   48670:	e59f005c 	ldr	r0, [pc, #92]	; 486d4 <USBBulkOnlyMassStorageDeviceCommand+0x2ac>
   48674:	e3a01001 	mov	r1, #1
   48678:	e59f2068 	ldr	r2, [pc, #104]	; 486e8 <USBBulkOnlyMassStorageDeviceCommand+0x2c0>
   4867c:	ebff6ebd 	bl	24178 <LogWrite>
   48680:	e3e00000 	mvn	r0, #0
   48684:	eaffffc4 	b	4859c <USBBulkOnlyMassStorageDeviceCommand+0x174>
   48688:	e59f0044 	ldr	r0, [pc, #68]	; 486d4 <USBBulkOnlyMassStorageDeviceCommand+0x2ac>
   4868c:	e3a01001 	mov	r1, #1
   48690:	e59f2054 	ldr	r2, [pc, #84]	; 486ec <USBBulkOnlyMassStorageDeviceCommand+0x2c4>
   48694:	ebff6eb7 	bl	24178 <LogWrite>
   48698:	e3e00000 	mvn	r0, #0
   4869c:	eaffffbe 	b	4859c <USBBulkOnlyMassStorageDeviceCommand+0x174>
   486a0:	43425355 	.word	0x43425355
   486a4:	53425355 	.word	0x53425355
   486a8:	000579b0 	.word	0x000579b0
   486ac:	00057990 	.word	0x00057990
   486b0:	0000023a 	.word	0x0000023a
   486b4:	000579d4 	.word	0x000579d4
   486b8:	0000023b 	.word	0x0000023b
   486bc:	00056434 	.word	0x00056434
   486c0:	00000237 	.word	0x00000237
   486c4:	00057268 	.word	0x00057268
   486c8:	0000024a 	.word	0x0000024a
   486cc:	000579a0 	.word	0x000579a0
   486d0:	00000239 	.word	0x00000239
   486d4:	00057988 	.word	0x00057988
   486d8:	00057a20 	.word	0x00057a20
   486dc:	00057a34 	.word	0x00057a34
   486e0:	00057a4c 	.word	0x00057a4c
   486e4:	00057a60 	.word	0x00057a60
   486e8:	000579f4 	.word	0x000579f4
   486ec:	00057a08 	.word	0x00057a08

000486f0 <USBBulkOnlyMassStorageDeviceConfigure>:
   486f0:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   486f4:	e2505000 	subs	r5, r0, #0
   486f8:	e24dd060 	sub	sp, sp, #96	; 0x60
   486fc:	0a0000b0 	beq	489c4 <USBBulkOnlyMassStorageDeviceConfigure+0x2d4>
   48700:	e1a00005 	mov	r0, r5
   48704:	ebfff34e 	bl	45444 <USBFunctionGetNumEndpoints>
   48708:	e3500001 	cmp	r0, #1
   4870c:	8a000004 	bhi	48724 <USBBulkOnlyMassStorageDeviceConfigure+0x34>
   48710:	ea00009f 	b	48994 <USBBulkOnlyMassStorageDeviceConfigure+0x2a4>
   48714:	e5d43003 	ldrb	r3, [r4, #3]
   48718:	e203303f 	and	r3, r3, #63	; 0x3f
   4871c:	e3530002 	cmp	r3, #2
   48720:	0a00002c 	beq	487d8 <USBBulkOnlyMassStorageDeviceConfigure+0xe8>
   48724:	e1a00005 	mov	r0, r5
   48728:	e3a01005 	mov	r1, #5
   4872c:	ebfff3d3 	bl	45680 <USBFunctionGetDescriptor>
   48730:	e2504000 	subs	r4, r0, #0
   48734:	1afffff6 	bne	48714 <USBBulkOnlyMassStorageDeviceConfigure+0x24>
   48738:	e5953010 	ldr	r3, [r5, #16]
   4873c:	e1a00005 	mov	r0, r5
   48740:	e3530000 	cmp	r3, #0
   48744:	0a000084 	beq	4895c <USBBulkOnlyMassStorageDeviceConfigure+0x26c>
   48748:	e5953014 	ldr	r3, [r5, #20]
   4874c:	e3530000 	cmp	r3, #0
   48750:	0a000081 	beq	4895c <USBBulkOnlyMassStorageDeviceConfigure+0x26c>
   48754:	ebfff393 	bl	455a8 <USBFunctionConfigure>
   48758:	e2506000 	subs	r6, r0, #0
   4875c:	0a000069 	beq	48908 <USBBulkOnlyMassStorageDeviceConfigure+0x218>
   48760:	e3a0c024 	mov	ip, #36	; 0x24
   48764:	e3a09001 	mov	r9, #1
   48768:	e3a08012 	mov	r8, #18
   4876c:	e58dc000 	str	ip, [sp]
   48770:	e58d9004 	str	r9, [sp, #4]
   48774:	e1a00005 	mov	r0, r5
   48778:	e28d100c 	add	r1, sp, #12
   4877c:	e3a02006 	mov	r2, #6
   48780:	e28d303c 	add	r3, sp, #60	; 0x3c
   48784:	e5cd400d 	strb	r4, [sp, #13]
   48788:	e5cd400e 	strb	r4, [sp, #14]
   4878c:	e5cd400f 	strb	r4, [sp, #15]
   48790:	e5cd4011 	strb	r4, [sp, #17]
   48794:	e5cdc010 	strb	ip, [sp, #16]
   48798:	e5cd800c 	strb	r8, [sp, #12]
   4879c:	ebffff21 	bl	48428 <USBBulkOnlyMassStorageDeviceCommand>
   487a0:	e3500024 	cmp	r0, #36	; 0x24
   487a4:	1a000072 	bne	48974 <USBBulkOnlyMassStorageDeviceConfigure+0x284>
   487a8:	e5dd303c 	ldrb	r3, [sp, #60]	; 0x3c
   487ac:	e213301f 	ands	r3, r3, #31
   487b0:	01a04003 	moveq	r4, r3
   487b4:	03a07063 	moveq	r7, #99	; 0x63
   487b8:	03a0a003 	moveq	sl, #3
   487bc:	0a000029 	beq	48868 <USBBulkOnlyMassStorageDeviceConfigure+0x178>
   487c0:	e1a01009 	mov	r1, r9
   487c4:	e59f0300 	ldr	r0, [pc, #768]	; 48acc <USBBulkOnlyMassStorageDeviceConfigure+0x3dc>
   487c8:	e59f2300 	ldr	r2, [pc, #768]	; 48ad0 <USBBulkOnlyMassStorageDeviceConfigure+0x3e0>
   487cc:	e1a06004 	mov	r6, r4
   487d0:	ebff6e68 	bl	24178 <LogWrite>
   487d4:	ea00004f 	b	48918 <USBBulkOnlyMassStorageDeviceConfigure+0x228>
   487d8:	e1d430d2 	ldrsb	r3, [r4, #2]
   487dc:	e3530000 	cmp	r3, #0
   487e0:	ba00004f 	blt	48924 <USBBulkOnlyMassStorageDeviceConfigure+0x234>
   487e4:	e5953014 	ldr	r3, [r5, #20]
   487e8:	e3530000 	cmp	r3, #0
   487ec:	1a000068 	bne	48994 <USBBulkOnlyMassStorageDeviceConfigure+0x2a4>
   487f0:	e3a00018 	mov	r0, #24
   487f4:	ebffb96c 	bl	36dac <malloc>
   487f8:	e3500000 	cmp	r0, #0
   487fc:	e5850014 	str	r0, [r5, #20]
   48800:	0a000074 	beq	489d8 <USBBulkOnlyMassStorageDeviceConfigure+0x2e8>
   48804:	e1a06000 	mov	r6, r0
   48808:	e1a00005 	mov	r0, r5
   4880c:	ebfff323 	bl	454a0 <USBFunctionGetDevice>
   48810:	e1a02004 	mov	r2, r4
   48814:	e1a01000 	mov	r1, r0
   48818:	e1a00006 	mov	r0, r6
   4881c:	ebffeb87 	bl	43640 <USBEndpoint2>
   48820:	eaffffbf 	b	48724 <USBBulkOnlyMassStorageDeviceConfigure+0x34>
   48824:	e88d0300 	stm	sp, {r8, r9}
   48828:	e1a00005 	mov	r0, r5
   4882c:	e28d101c 	add	r1, sp, #28
   48830:	e3a02006 	mov	r2, #6
   48834:	e28d3028 	add	r3, sp, #40	; 0x28
   48838:	e5cda01c 	strb	sl, [sp, #28]
   4883c:	e1cd41be 	strh	r4, [sp, #30]
   48840:	e5cd8020 	strb	r8, [sp, #32]
   48844:	e5cd4021 	strb	r4, [sp, #33]	; 0x21
   48848:	e5cd601d 	strb	r6, [sp, #29]
   4884c:	ebfffef5 	bl	48428 <USBBulkOnlyMassStorageDeviceCommand>
   48850:	e1500006 	cmp	r0, r6
   48854:	ba000055 	blt	489b0 <USBBulkOnlyMassStorageDeviceConfigure+0x2c0>
   48858:	e3a00064 	mov	r0, #100	; 0x64
   4885c:	ebffb95b 	bl	36dd0 <MsDelay>
   48860:	e2577001 	subs	r7, r7, #1
   48864:	0a000061 	beq	489f0 <USBBulkOnlyMassStorageDeviceConfigure+0x300>
   48868:	e3a06000 	mov	r6, #0
   4886c:	e58d4000 	str	r4, [sp]
   48870:	e58d4004 	str	r4, [sp, #4]
   48874:	e1a03006 	mov	r3, r6
   48878:	e1a00005 	mov	r0, r5
   4887c:	e28d1014 	add	r1, sp, #20
   48880:	e3a02006 	mov	r2, #6
   48884:	e5cd4014 	strb	r4, [sp, #20]
   48888:	e5cd4015 	strb	r4, [sp, #21]
   4888c:	e5cd4016 	strb	r4, [sp, #22]
   48890:	e5cd4017 	strb	r4, [sp, #23]
   48894:	e5cd4018 	strb	r4, [sp, #24]
   48898:	e5cd4019 	strb	r4, [sp, #25]
   4889c:	ebfffee1 	bl	48428 <USBBulkOnlyMassStorageDeviceCommand>
   488a0:	e1500006 	cmp	r0, r6
   488a4:	baffffde 	blt	48824 <USBBulkOnlyMassStorageDeviceConfigure+0x134>
   488a8:	e3a02008 	mov	r2, #8
   488ac:	e3a04001 	mov	r4, #1
   488b0:	e3a0e000 	mov	lr, #0
   488b4:	e3a07025 	mov	r7, #37	; 0x25
   488b8:	e88d0014 	stm	sp, {r2, r4}
   488bc:	e28d101c 	add	r1, sp, #28
   488c0:	e28d3014 	add	r3, sp, #20
   488c4:	e1a00005 	mov	r0, r5
   488c8:	e3a0200a 	mov	r2, #10
   488cc:	e1cd61be 	strh	r6, [sp, #30]
   488d0:	e1cd62b0 	strh	r6, [sp, #32]
   488d4:	e1cd62b2 	strh	r6, [sp, #34]	; 0x22
   488d8:	e5cd6025 	strb	r6, [sp, #37]	; 0x25
   488dc:	e5cd701c 	strb	r7, [sp, #28]
   488e0:	e5cde01d 	strb	lr, [sp, #29]
   488e4:	e5cde024 	strb	lr, [sp, #36]	; 0x24
   488e8:	ebfffece 	bl	48428 <USBBulkOnlyMassStorageDeviceCommand>
   488ec:	e3500008 	cmp	r0, #8
   488f0:	0a000044 	beq	48a08 <USBBulkOnlyMassStorageDeviceConfigure+0x318>
   488f4:	e1a01004 	mov	r1, r4
   488f8:	e59f01cc 	ldr	r0, [pc, #460]	; 48acc <USBBulkOnlyMassStorageDeviceConfigure+0x3dc>
   488fc:	e59f21d0 	ldr	r2, [pc, #464]	; 48ad4 <USBBulkOnlyMassStorageDeviceConfigure+0x3e4>
   48900:	ebff6e1c 	bl	24178 <LogWrite>
   48904:	ea000003 	b	48918 <USBBulkOnlyMassStorageDeviceConfigure+0x228>
   48908:	e59f01bc 	ldr	r0, [pc, #444]	; 48acc <USBBulkOnlyMassStorageDeviceConfigure+0x3dc>
   4890c:	e3a01001 	mov	r1, #1
   48910:	e59f21c0 	ldr	r2, [pc, #448]	; 48ad8 <USBBulkOnlyMassStorageDeviceConfigure+0x3e8>
   48914:	ebff6e17 	bl	24178 <LogWrite>
   48918:	e1a00006 	mov	r0, r6
   4891c:	e28dd060 	add	sp, sp, #96	; 0x60
   48920:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   48924:	e5953010 	ldr	r3, [r5, #16]
   48928:	e3530000 	cmp	r3, #0
   4892c:	1a000018 	bne	48994 <USBBulkOnlyMassStorageDeviceConfigure+0x2a4>
   48930:	e3a00018 	mov	r0, #24
   48934:	ebffb91c 	bl	36dac <malloc>
   48938:	e3500000 	cmp	r0, #0
   4893c:	e5850010 	str	r0, [r5, #16]
   48940:	1affffaf 	bne	48804 <USBBulkOnlyMassStorageDeviceConfigure+0x114>
   48944:	e59f0190 	ldr	r0, [pc, #400]	; 48adc <USBBulkOnlyMassStorageDeviceConfigure+0x3ec>
   48948:	e59f1190 	ldr	r1, [pc, #400]	; 48ae0 <USBBulkOnlyMassStorageDeviceConfigure+0x3f0>
   4894c:	e3a02f41 	mov	r2, #260	; 0x104
   48950:	ebffb93c 	bl	36e48 <uspi_assertion_failed>
   48954:	e5956010 	ldr	r6, [r5, #16]
   48958:	eaffffaa 	b	48808 <USBBulkOnlyMassStorageDeviceConfigure+0x118>
   4895c:	e3a06000 	mov	r6, #0
   48960:	e59f1164 	ldr	r1, [pc, #356]	; 48acc <USBBulkOnlyMassStorageDeviceConfigure+0x3dc>
   48964:	ebfff35f 	bl	456e8 <USBFunctionConfigurationError>
   48968:	e1a00006 	mov	r0, r6
   4896c:	e28dd060 	add	sp, sp, #96	; 0x60
   48970:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   48974:	e1a06004 	mov	r6, r4
   48978:	e1a01009 	mov	r1, r9
   4897c:	e59f0148 	ldr	r0, [pc, #328]	; 48acc <USBBulkOnlyMassStorageDeviceConfigure+0x3dc>
   48980:	e59f215c 	ldr	r2, [pc, #348]	; 48ae4 <USBBulkOnlyMassStorageDeviceConfigure+0x3f4>
   48984:	ebff6dfb 	bl	24178 <LogWrite>
   48988:	e1a00006 	mov	r0, r6
   4898c:	e28dd060 	add	sp, sp, #96	; 0x60
   48990:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   48994:	e3a06000 	mov	r6, #0
   48998:	e1a00005 	mov	r0, r5
   4899c:	e59f1128 	ldr	r1, [pc, #296]	; 48acc <USBBulkOnlyMassStorageDeviceConfigure+0x3dc>
   489a0:	ebfff350 	bl	456e8 <USBFunctionConfigurationError>
   489a4:	e1a00006 	mov	r0, r6
   489a8:	e28dd060 	add	sp, sp, #96	; 0x60
   489ac:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   489b0:	e59f0114 	ldr	r0, [pc, #276]	; 48acc <USBBulkOnlyMassStorageDeviceConfigure+0x3dc>
   489b4:	e3a01001 	mov	r1, #1
   489b8:	e59f2128 	ldr	r2, [pc, #296]	; 48ae8 <USBBulkOnlyMassStorageDeviceConfigure+0x3f8>
   489bc:	ebff6ded 	bl	24178 <LogWrite>
   489c0:	eaffffd4 	b	48918 <USBBulkOnlyMassStorageDeviceConfigure+0x228>
   489c4:	e59f0120 	ldr	r0, [pc, #288]	; 48aec <USBBulkOnlyMassStorageDeviceConfigure+0x3fc>
   489c8:	e59f1110 	ldr	r1, [pc, #272]	; 48ae0 <USBBulkOnlyMassStorageDeviceConfigure+0x3f0>
   489cc:	e3a020ec 	mov	r2, #236	; 0xec
   489d0:	ebffb91c 	bl	36e48 <uspi_assertion_failed>
   489d4:	eaffff49 	b	48700 <USBBulkOnlyMassStorageDeviceConfigure+0x10>
   489d8:	e59f0110 	ldr	r0, [pc, #272]	; 48af0 <USBBulkOnlyMassStorageDeviceConfigure+0x400>
   489dc:	e59f10fc 	ldr	r1, [pc, #252]	; 48ae0 <USBBulkOnlyMassStorageDeviceConfigure+0x3f0>
   489e0:	e59f210c 	ldr	r2, [pc, #268]	; 48af4 <USBBulkOnlyMassStorageDeviceConfigure+0x404>
   489e4:	ebffb917 	bl	36e48 <uspi_assertion_failed>
   489e8:	e5956014 	ldr	r6, [r5, #20]
   489ec:	eaffff85 	b	48808 <USBBulkOnlyMassStorageDeviceConfigure+0x118>
   489f0:	e59f00d4 	ldr	r0, [pc, #212]	; 48acc <USBBulkOnlyMassStorageDeviceConfigure+0x3dc>
   489f4:	e3a01001 	mov	r1, #1
   489f8:	e59f20f8 	ldr	r2, [pc, #248]	; 48af8 <USBBulkOnlyMassStorageDeviceConfigure+0x408>
   489fc:	e1a06007 	mov	r6, r7
   48a00:	ebff6ddc 	bl	24178 <LogWrite>
   48a04:	eaffffc3 	b	48918 <USBBulkOnlyMassStorageDeviceConfigure+0x228>
   48a08:	e59d0018 	ldr	r0, [sp, #24]
   48a0c:	ebfffe2e 	bl	482cc <uspi_le2be32>
   48a10:	e3500c02 	cmp	r0, #512	; 0x200
   48a14:	e1a03000 	mov	r3, r0
   48a18:	0a000004 	beq	48a30 <USBBulkOnlyMassStorageDeviceConfigure+0x340>
   48a1c:	e1a01004 	mov	r1, r4
   48a20:	e59f00a4 	ldr	r0, [pc, #164]	; 48acc <USBBulkOnlyMassStorageDeviceConfigure+0x3dc>
   48a24:	e59f20d0 	ldr	r2, [pc, #208]	; 48afc <USBBulkOnlyMassStorageDeviceConfigure+0x40c>
   48a28:	ebff6dd2 	bl	24178 <LogWrite>
   48a2c:	eaffffb9 	b	48918 <USBBulkOnlyMassStorageDeviceConfigure+0x228>
   48a30:	e59d0014 	ldr	r0, [sp, #20]
   48a34:	ebfffe24 	bl	482cc <uspi_le2be32>
   48a38:	e3700001 	cmn	r0, #1
   48a3c:	e585001c 	str	r0, [r5, #28]
   48a40:	0a00001c 	beq	48ab8 <USBBulkOnlyMassStorageDeviceConfigure+0x3c8>
   48a44:	e2803001 	add	r3, r0, #1
   48a48:	e3a01004 	mov	r1, #4
   48a4c:	e59f20ac 	ldr	r2, [pc, #172]	; 48b00 <USBBulkOnlyMassStorageDeviceConfigure+0x410>
   48a50:	e585301c 	str	r3, [r5, #28]
   48a54:	e59f0070 	ldr	r0, [pc, #112]	; 48acc <USBBulkOnlyMassStorageDeviceConfigure+0x3dc>
   48a58:	e1a035a3 	lsr	r3, r3, #11
   48a5c:	ebff6dc5 	bl	24178 <LogWrite>
   48a60:	e28d0028 	add	r0, sp, #40	; 0x28
   48a64:	ebfffaf7 	bl	47648 <String>
   48a68:	e59f3094 	ldr	r3, [pc, #148]	; 48b04 <USBBulkOnlyMassStorageDeviceConfigure+0x414>
   48a6c:	e59f1094 	ldr	r1, [pc, #148]	; 48b08 <USBBulkOnlyMassStorageDeviceConfigure+0x418>
   48a70:	e5932000 	ldr	r2, [r3]
   48a74:	e28d0028 	add	r0, sp, #40	; 0x28
   48a78:	e282c001 	add	ip, r2, #1
   48a7c:	e583c000 	str	ip, [r3]
   48a80:	ebfffd70 	bl	48048 <StringFormat>
   48a84:	ebfff0b4 	bl	44d5c <DeviceNameServiceGet>
   48a88:	e1a06000 	mov	r6, r0
   48a8c:	e28d0028 	add	r0, sp, #40	; 0x28
   48a90:	ebfffb1f 	bl	47714 <StringGet>
   48a94:	e1a02005 	mov	r2, r5
   48a98:	e1a01000 	mov	r1, r0
   48a9c:	e1a03004 	mov	r3, r4
   48aa0:	e1a00006 	mov	r0, r6
   48aa4:	ebfff03b 	bl	44b98 <DeviceNameServiceAddDevice>
   48aa8:	e28d0028 	add	r0, sp, #40	; 0x28
   48aac:	ebfffb07 	bl	476d0 <_String>
   48ab0:	e1a06004 	mov	r6, r4
   48ab4:	eaffff97 	b	48918 <USBBulkOnlyMassStorageDeviceConfigure+0x228>
   48ab8:	e1a01004 	mov	r1, r4
   48abc:	e59f0008 	ldr	r0, [pc, #8]	; 48acc <USBBulkOnlyMassStorageDeviceConfigure+0x3dc>
   48ac0:	e59f2044 	ldr	r2, [pc, #68]	; 48b0c <USBBulkOnlyMassStorageDeviceConfigure+0x41c>
   48ac4:	ebff6dab 	bl	24178 <LogWrite>
   48ac8:	eaffff92 	b	48918 <USBBulkOnlyMassStorageDeviceConfigure+0x228>
   48acc:	00057988 	.word	0x00057988
   48ad0:	00057ac8 	.word	0x00057ac8
   48ad4:	00057b00 	.word	0x00057b00
   48ad8:	00057470 	.word	0x00057470
   48adc:	00057a78 	.word	0x00057a78
   48ae0:	00057990 	.word	0x00057990
   48ae4:	00057ab0 	.word	0x00057ab0
   48ae8:	00057ae8 	.word	0x00057ae8
   48aec:	00056434 	.word	0x00056434
   48af0:	00057a94 	.word	0x00057a94
   48af4:	00000111 	.word	0x00000111
   48af8:	00057b68 	.word	0x00057b68
   48afc:	00057b18 	.word	0x00057b18
   48b00:	00057b50 	.word	0x00057b50
   48b04:	0006f520 	.word	0x0006f520
   48b08:	00056354 	.word	0x00056354
   48b0c:	00057b34 	.word	0x00057b34

00048b10 <USBBulkOnlyMassStorageDeviceTryRead>:
   48b10:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
   48b14:	e2509000 	subs	r9, r0, #0
   48b18:	e24dd01c 	sub	sp, sp, #28
   48b1c:	e1a08001 	mov	r8, r1
   48b20:	e1a04002 	mov	r4, r2
   48b24:	0a000037 	beq	48c08 <USBBulkOnlyMassStorageDeviceTryRead+0xf8>
   48b28:	e3580000 	cmp	r8, #0
   48b2c:	0a00003a 	beq	48c1c <USBBulkOnlyMassStorageDeviceTryRead+0x10c>
   48b30:	e1c962d0 	ldrd	r6, [r9, #32]
   48b34:	e3a03000 	mov	r3, #0
   48b38:	e59f2108 	ldr	r2, [pc, #264]	; 48c48 <USBBulkOnlyMassStorageDeviceTryRead+0x138>
   48b3c:	e0033007 	and	r3, r3, r7
   48b40:	e0022006 	and	r2, r2, r6
   48b44:	e1923003 	orrs	r3, r2, r3
   48b48:	e3e00000 	mvn	r0, #0
   48b4c:	13a03001 	movne	r3, #1
   48b50:	03a03000 	moveq	r3, #0
   48b54:	e59f10ec 	ldr	r1, [pc, #236]	; 48c48 <USBBulkOnlyMassStorageDeviceTryRead+0x138>
   48b58:	e1570001 	cmp	r7, r1
   48b5c:	01560000 	cmpeq	r6, r0
   48b60:	83833001 	orrhi	r3, r3, #1
   48b64:	e3530000 	cmp	r3, #0
   48b68:	1a000022 	bne	48bf8 <USBBulkOnlyMassStorageDeviceTryRead+0xe8>
   48b6c:	e1a05b84 	lsl	r5, r4, #23
   48b70:	e1a004a6 	lsr	r0, r6, #9
   48b74:	e1b05ba5 	lsrs	r5, r5, #23
   48b78:	e1800b87 	orr	r0, r0, r7, lsl #23
   48b7c:	1a00001d 	bne	48bf8 <USBBulkOnlyMassStorageDeviceTryRead+0xe8>
   48b80:	e3a03028 	mov	r3, #40	; 0x28
   48b84:	e5cd500d 	strb	r5, [sp, #13]
   48b88:	e5cd300c 	strb	r3, [sp, #12]
   48b8c:	ebfffdce 	bl	482cc <uspi_le2be32>
   48b90:	e1a03000 	mov	r3, r0
   48b94:	e1a004a4 	lsr	r0, r4, #9
   48b98:	e1a02823 	lsr	r2, r3, #16
   48b9c:	e6ff0070 	uxth	r0, r0
   48ba0:	e1cd30be 	strh	r3, [sp, #14]
   48ba4:	e1cd21b0 	strh	r2, [sp, #16]
   48ba8:	e5cd5012 	strb	r5, [sp, #18]
   48bac:	ebfffdc3 	bl	482c0 <uspi_le2be16>
   48bb0:	e3a06001 	mov	r6, #1
   48bb4:	e1a0c000 	mov	ip, r0
   48bb8:	e1a0e420 	lsr	lr, r0, #8
   48bbc:	e58d4000 	str	r4, [sp]
   48bc0:	e1a00009 	mov	r0, r9
   48bc4:	e1a03008 	mov	r3, r8
   48bc8:	e58d6004 	str	r6, [sp, #4]
   48bcc:	e28d100c 	add	r1, sp, #12
   48bd0:	e3a0200a 	mov	r2, #10
   48bd4:	e5cdc013 	strb	ip, [sp, #19]
   48bd8:	e5cde014 	strb	lr, [sp, #20]
   48bdc:	e5cd5015 	strb	r5, [sp, #21]
   48be0:	ebfffe10 	bl	48428 <USBBulkOnlyMassStorageDeviceCommand>
   48be4:	e1500004 	cmp	r0, r4
   48be8:	1a000010 	bne	48c30 <USBBulkOnlyMassStorageDeviceTryRead+0x120>
   48bec:	e1a00004 	mov	r0, r4
   48bf0:	e28dd01c 	add	sp, sp, #28
   48bf4:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   48bf8:	e3e04000 	mvn	r4, #0
   48bfc:	e1a00004 	mov	r0, r4
   48c00:	e28dd01c 	add	sp, sp, #28
   48c04:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   48c08:	e59f003c 	ldr	r0, [pc, #60]	; 48c4c <USBBulkOnlyMassStorageDeviceTryRead+0x13c>
   48c0c:	e59f103c 	ldr	r1, [pc, #60]	; 48c50 <USBBulkOnlyMassStorageDeviceTryRead+0x140>
   48c10:	e59f203c 	ldr	r2, [pc, #60]	; 48c54 <USBBulkOnlyMassStorageDeviceTryRead+0x144>
   48c14:	ebffb88b 	bl	36e48 <uspi_assertion_failed>
   48c18:	eaffffc2 	b	48b28 <USBBulkOnlyMassStorageDeviceTryRead+0x18>
   48c1c:	e59f0034 	ldr	r0, [pc, #52]	; 48c58 <USBBulkOnlyMassStorageDeviceTryRead+0x148>
   48c20:	e59f1028 	ldr	r1, [pc, #40]	; 48c50 <USBBulkOnlyMassStorageDeviceTryRead+0x140>
   48c24:	e59f2030 	ldr	r2, [pc, #48]	; 48c5c <USBBulkOnlyMassStorageDeviceTryRead+0x14c>
   48c28:	ebffb886 	bl	36e48 <uspi_assertion_failed>
   48c2c:	eaffffbf 	b	48b30 <USBBulkOnlyMassStorageDeviceTryRead+0x20>
   48c30:	e1a01006 	mov	r1, r6
   48c34:	e59f0024 	ldr	r0, [pc, #36]	; 48c60 <USBBulkOnlyMassStorageDeviceTryRead+0x150>
   48c38:	e59f2024 	ldr	r2, [pc, #36]	; 48c64 <USBBulkOnlyMassStorageDeviceTryRead+0x154>
   48c3c:	ebff6d4d 	bl	24178 <LogWrite>
   48c40:	e3e04000 	mvn	r4, #0
   48c44:	eaffffe8 	b	48bec <USBBulkOnlyMassStorageDeviceTryRead+0xdc>
   48c48:	000001ff 	.word	0x000001ff
   48c4c:	00056434 	.word	0x00056434
   48c50:	00057990 	.word	0x00057990
   48c54:	000001e3 	.word	0x000001e3
   48c58:	000579e4 	.word	0x000579e4
   48c5c:	000001e5 	.word	0x000001e5
   48c60:	00057988 	.word	0x00057988
   48c64:	00057b7c 	.word	0x00057b7c

00048c68 <USBBulkOnlyMassStorageDeviceTryWrite>:
   48c68:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
   48c6c:	e2509000 	subs	r9, r0, #0
   48c70:	e24dd01c 	sub	sp, sp, #28
   48c74:	e1a08001 	mov	r8, r1
   48c78:	e1a04002 	mov	r4, r2
   48c7c:	0a000036 	beq	48d5c <USBBulkOnlyMassStorageDeviceTryWrite+0xf4>
   48c80:	e3580000 	cmp	r8, #0
   48c84:	0a000039 	beq	48d70 <USBBulkOnlyMassStorageDeviceTryWrite+0x108>
   48c88:	e1c962d0 	ldrd	r6, [r9, #32]
   48c8c:	e3a03000 	mov	r3, #0
   48c90:	e59f2104 	ldr	r2, [pc, #260]	; 48d9c <USBBulkOnlyMassStorageDeviceTryWrite+0x134>
   48c94:	e0033007 	and	r3, r3, r7
   48c98:	e0022006 	and	r2, r2, r6
   48c9c:	e1923003 	orrs	r3, r2, r3
   48ca0:	e3e00000 	mvn	r0, #0
   48ca4:	13a03001 	movne	r3, #1
   48ca8:	03a03000 	moveq	r3, #0
   48cac:	e59f10e8 	ldr	r1, [pc, #232]	; 48d9c <USBBulkOnlyMassStorageDeviceTryWrite+0x134>
   48cb0:	e1570001 	cmp	r7, r1
   48cb4:	01560000 	cmpeq	r6, r0
   48cb8:	83833001 	orrhi	r3, r3, #1
   48cbc:	e3530000 	cmp	r3, #0
   48cc0:	1a000022 	bne	48d50 <USBBulkOnlyMassStorageDeviceTryWrite+0xe8>
   48cc4:	e1a05b84 	lsl	r5, r4, #23
   48cc8:	e1a004a6 	lsr	r0, r6, #9
   48ccc:	e1b05ba5 	lsrs	r5, r5, #23
   48cd0:	e1800b87 	orr	r0, r0, r7, lsl #23
   48cd4:	1a00001d 	bne	48d50 <USBBulkOnlyMassStorageDeviceTryWrite+0xe8>
   48cd8:	e3a0202a 	mov	r2, #42	; 0x2a
   48cdc:	e3a03008 	mov	r3, #8
   48ce0:	e5cd200c 	strb	r2, [sp, #12]
   48ce4:	e5cd300d 	strb	r3, [sp, #13]
   48ce8:	ebfffd77 	bl	482cc <uspi_le2be32>
   48cec:	e1a03000 	mov	r3, r0
   48cf0:	e1a004a4 	lsr	r0, r4, #9
   48cf4:	e1a02823 	lsr	r2, r3, #16
   48cf8:	e6ff0070 	uxth	r0, r0
   48cfc:	e1cd30be 	strh	r3, [sp, #14]
   48d00:	e1cd21b0 	strh	r2, [sp, #16]
   48d04:	e5cd5012 	strb	r5, [sp, #18]
   48d08:	ebfffd6c 	bl	482c0 <uspi_le2be16>
   48d0c:	e1a0c000 	mov	ip, r0
   48d10:	e1a0e420 	lsr	lr, r0, #8
   48d14:	e58d4000 	str	r4, [sp]
   48d18:	e58d5004 	str	r5, [sp, #4]
   48d1c:	e1a00009 	mov	r0, r9
   48d20:	e1a03008 	mov	r3, r8
   48d24:	e28d100c 	add	r1, sp, #12
   48d28:	e3a0200a 	mov	r2, #10
   48d2c:	e5cdc013 	strb	ip, [sp, #19]
   48d30:	e5cde014 	strb	lr, [sp, #20]
   48d34:	e5cd5015 	strb	r5, [sp, #21]
   48d38:	ebfffdba 	bl	48428 <USBBulkOnlyMassStorageDeviceCommand>
   48d3c:	e3500000 	cmp	r0, #0
   48d40:	a1a00004 	movge	r0, r4
   48d44:	ba00000e 	blt	48d84 <USBBulkOnlyMassStorageDeviceTryWrite+0x11c>
   48d48:	e28dd01c 	add	sp, sp, #28
   48d4c:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   48d50:	e3e00000 	mvn	r0, #0
   48d54:	e28dd01c 	add	sp, sp, #28
   48d58:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   48d5c:	e59f003c 	ldr	r0, [pc, #60]	; 48da0 <USBBulkOnlyMassStorageDeviceTryWrite+0x138>
   48d60:	e59f103c 	ldr	r1, [pc, #60]	; 48da4 <USBBulkOnlyMassStorageDeviceTryWrite+0x13c>
   48d64:	e3a02f83 	mov	r2, #524	; 0x20c
   48d68:	ebffb836 	bl	36e48 <uspi_assertion_failed>
   48d6c:	eaffffc3 	b	48c80 <USBBulkOnlyMassStorageDeviceTryWrite+0x18>
   48d70:	e59f0030 	ldr	r0, [pc, #48]	; 48da8 <USBBulkOnlyMassStorageDeviceTryWrite+0x140>
   48d74:	e59f1028 	ldr	r1, [pc, #40]	; 48da4 <USBBulkOnlyMassStorageDeviceTryWrite+0x13c>
   48d78:	e59f202c 	ldr	r2, [pc, #44]	; 48dac <USBBulkOnlyMassStorageDeviceTryWrite+0x144>
   48d7c:	ebffb831 	bl	36e48 <uspi_assertion_failed>
   48d80:	eaffffc0 	b	48c88 <USBBulkOnlyMassStorageDeviceTryWrite+0x20>
   48d84:	e59f0024 	ldr	r0, [pc, #36]	; 48db0 <USBBulkOnlyMassStorageDeviceTryWrite+0x148>
   48d88:	e3a01001 	mov	r1, #1
   48d8c:	e59f2020 	ldr	r2, [pc, #32]	; 48db4 <USBBulkOnlyMassStorageDeviceTryWrite+0x14c>
   48d90:	ebff6cf8 	bl	24178 <LogWrite>
   48d94:	e3e00000 	mvn	r0, #0
   48d98:	eaffffea 	b	48d48 <USBBulkOnlyMassStorageDeviceTryWrite+0xe0>
   48d9c:	000001ff 	.word	0x000001ff
   48da0:	00056434 	.word	0x00056434
   48da4:	00057990 	.word	0x00057990
   48da8:	000579e4 	.word	0x000579e4
   48dac:	0000020e 	.word	0x0000020e
   48db0:	00057988 	.word	0x00057988
   48db4:	00057b8c 	.word	0x00057b8c

00048db8 <USBBulkOnlyMassStorageDeviceReset>:
   48db8:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   48dbc:	e2505000 	subs	r5, r0, #0
   48dc0:	e24dd014 	sub	sp, sp, #20
   48dc4:	0a000033 	beq	48e98 <USBBulkOnlyMassStorageDeviceReset+0xe0>
   48dc8:	e1a00005 	mov	r0, r5
   48dcc:	ebfff1de 	bl	4554c <USBFunctionGetHost>
   48dd0:	e2506000 	subs	r6, r0, #0
   48dd4:	0a000034 	beq	48eac <USBBulkOnlyMassStorageDeviceReset+0xf4>
   48dd8:	e1a00005 	mov	r0, r5
   48ddc:	ebfff1c3 	bl	454f0 <USBFunctionGetEndpoint0>
   48de0:	e3a04000 	mov	r4, #0
   48de4:	e1a01000 	mov	r1, r0
   48de8:	e58d4000 	str	r4, [sp]
   48dec:	e58d4004 	str	r4, [sp, #4]
   48df0:	e58d4008 	str	r4, [sp, #8]
   48df4:	e58d400c 	str	r4, [sp, #12]
   48df8:	e1a00006 	mov	r0, r6
   48dfc:	e3a02021 	mov	r2, #33	; 0x21
   48e00:	e3a030ff 	mov	r3, #255	; 0xff
   48e04:	ebffda7b 	bl	3f7f8 <DWHCIDeviceControlMessage>
   48e08:	e1500004 	cmp	r0, r4
   48e0c:	ba00002b 	blt	48ec0 <USBBulkOnlyMassStorageDeviceReset+0x108>
   48e10:	e1a00005 	mov	r0, r5
   48e14:	ebfff1b5 	bl	454f0 <USBFunctionGetEndpoint0>
   48e18:	e3a07001 	mov	r7, #1
   48e1c:	e1a01000 	mov	r1, r0
   48e20:	e58d4000 	str	r4, [sp]
   48e24:	e58d4008 	str	r4, [sp, #8]
   48e28:	e58d400c 	str	r4, [sp, #12]
   48e2c:	e58d7004 	str	r7, [sp, #4]
   48e30:	e1a03007 	mov	r3, r7
   48e34:	e1a00006 	mov	r0, r6
   48e38:	e3a02002 	mov	r2, #2
   48e3c:	ebffda6d 	bl	3f7f8 <DWHCIDeviceControlMessage>
   48e40:	e3500000 	cmp	r0, #0
   48e44:	ba000023 	blt	48ed8 <USBBulkOnlyMassStorageDeviceReset+0x120>
   48e48:	e1a00005 	mov	r0, r5
   48e4c:	ebfff1a7 	bl	454f0 <USBFunctionGetEndpoint0>
   48e50:	e3a02002 	mov	r2, #2
   48e54:	e1a01000 	mov	r1, r0
   48e58:	e58d4000 	str	r4, [sp]
   48e5c:	e58d4008 	str	r4, [sp, #8]
   48e60:	e58d400c 	str	r4, [sp, #12]
   48e64:	e1a00006 	mov	r0, r6
   48e68:	e1a03007 	mov	r3, r7
   48e6c:	e58d2004 	str	r2, [sp, #4]
   48e70:	ebffda60 	bl	3f7f8 <DWHCIDeviceControlMessage>
   48e74:	e3500000 	cmp	r0, #0
   48e78:	ba00001c 	blt	48ef0 <USBBulkOnlyMassStorageDeviceReset+0x138>
   48e7c:	e5950010 	ldr	r0, [r5, #16]
   48e80:	ebffeb55 	bl	43bdc <USBEndpointResetPID>
   48e84:	e5950014 	ldr	r0, [r5, #20]
   48e88:	ebffeb53 	bl	43bdc <USBEndpointResetPID>
   48e8c:	e1a00004 	mov	r0, r4
   48e90:	e28dd014 	add	sp, sp, #20
   48e94:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   48e98:	e59f0068 	ldr	r0, [pc, #104]	; 48f08 <USBBulkOnlyMassStorageDeviceReset+0x150>
   48e9c:	e59f1068 	ldr	r1, [pc, #104]	; 48f0c <USBBulkOnlyMassStorageDeviceReset+0x154>
   48ea0:	e3a02fa2 	mov	r2, #648	; 0x288
   48ea4:	ebffb7e7 	bl	36e48 <uspi_assertion_failed>
   48ea8:	eaffffc6 	b	48dc8 <USBBulkOnlyMassStorageDeviceReset+0x10>
   48eac:	e59f005c 	ldr	r0, [pc, #92]	; 48f10 <USBBulkOnlyMassStorageDeviceReset+0x158>
   48eb0:	e59f1054 	ldr	r1, [pc, #84]	; 48f0c <USBBulkOnlyMassStorageDeviceReset+0x154>
   48eb4:	e59f2058 	ldr	r2, [pc, #88]	; 48f14 <USBBulkOnlyMassStorageDeviceReset+0x15c>
   48eb8:	ebffb7e2 	bl	36e48 <uspi_assertion_failed>
   48ebc:	eaffffc5 	b	48dd8 <USBBulkOnlyMassStorageDeviceReset+0x20>
   48ec0:	e59f0050 	ldr	r0, [pc, #80]	; 48f18 <USBBulkOnlyMassStorageDeviceReset+0x160>
   48ec4:	e3a01004 	mov	r1, #4
   48ec8:	e59f204c 	ldr	r2, [pc, #76]	; 48f1c <USBBulkOnlyMassStorageDeviceReset+0x164>
   48ecc:	ebff6ca9 	bl	24178 <LogWrite>
   48ed0:	e3e00000 	mvn	r0, #0
   48ed4:	eaffffed 	b	48e90 <USBBulkOnlyMassStorageDeviceReset+0xd8>
   48ed8:	e59f0038 	ldr	r0, [pc, #56]	; 48f18 <USBBulkOnlyMassStorageDeviceReset+0x160>
   48edc:	e3a01004 	mov	r1, #4
   48ee0:	e59f2038 	ldr	r2, [pc, #56]	; 48f20 <USBBulkOnlyMassStorageDeviceReset+0x168>
   48ee4:	ebff6ca3 	bl	24178 <LogWrite>
   48ee8:	e3e00000 	mvn	r0, #0
   48eec:	eaffffe7 	b	48e90 <USBBulkOnlyMassStorageDeviceReset+0xd8>
   48ef0:	e59f0020 	ldr	r0, [pc, #32]	; 48f18 <USBBulkOnlyMassStorageDeviceReset+0x160>
   48ef4:	e3a01004 	mov	r1, #4
   48ef8:	e59f2024 	ldr	r2, [pc, #36]	; 48f24 <USBBulkOnlyMassStorageDeviceReset+0x16c>
   48efc:	ebff6c9d 	bl	24178 <LogWrite>
   48f00:	e3e00000 	mvn	r0, #0
   48f04:	eaffffe1 	b	48e90 <USBBulkOnlyMassStorageDeviceReset+0xd8>
   48f08:	00056434 	.word	0x00056434
   48f0c:	00057990 	.word	0x00057990
   48f10:	00057268 	.word	0x00057268
   48f14:	0000028b 	.word	0x0000028b
   48f18:	00057988 	.word	0x00057988
   48f1c:	00057b9c 	.word	0x00057b9c
   48f20:	00057bb0 	.word	0x00057bb0
   48f24:	00057bd0 	.word	0x00057bd0

00048f28 <USBBulkOnlyMassStorageDeviceRead>:
   48f28:	e92d43f8 	push	{r3, r4, r5, r6, r7, r8, r9, lr}
   48f2c:	e2508000 	subs	r8, r0, #0
   48f30:	e1a09001 	mov	r9, r1
   48f34:	e1a05002 	mov	r5, r2
   48f38:	0a000011 	beq	48f84 <USBBulkOnlyMassStorageDeviceRead+0x5c>
   48f3c:	e1a06005 	mov	r6, r5
   48f40:	e3a04004 	mov	r4, #4
   48f44:	e1a00008 	mov	r0, r8
   48f48:	e1a01009 	mov	r1, r9
   48f4c:	e1a02005 	mov	r2, r5
   48f50:	ebfffeee 	bl	48b10 <USBBulkOnlyMassStorageDeviceTryRead>
   48f54:	e1500005 	cmp	r0, r5
   48f58:	e1a07000 	mov	r7, r0
   48f5c:	0a000006 	beq	48f7c <USBBulkOnlyMassStorageDeviceRead+0x54>
   48f60:	e1a00008 	mov	r0, r8
   48f64:	ebffff93 	bl	48db8 <USBBulkOnlyMassStorageDeviceReset>
   48f68:	e3500000 	cmp	r0, #0
   48f6c:	18bd83f8 	popne	{r3, r4, r5, r6, r7, r8, r9, pc}
   48f70:	e2544001 	subs	r4, r4, #1
   48f74:	1afffff2 	bne	48f44 <USBBulkOnlyMassStorageDeviceRead+0x1c>
   48f78:	e1a06007 	mov	r6, r7
   48f7c:	e1a00006 	mov	r0, r6
   48f80:	e8bd83f8 	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   48f84:	e59f000c 	ldr	r0, [pc, #12]	; 48f98 <USBBulkOnlyMassStorageDeviceRead+0x70>
   48f88:	e59f100c 	ldr	r1, [pc, #12]	; 48f9c <USBBulkOnlyMassStorageDeviceRead+0x74>
   48f8c:	e59f200c 	ldr	r2, [pc, #12]	; 48fa0 <USBBulkOnlyMassStorageDeviceRead+0x78>
   48f90:	ebffb7ac 	bl	36e48 <uspi_assertion_failed>
   48f94:	eaffffe8 	b	48f3c <USBBulkOnlyMassStorageDeviceRead+0x14>
   48f98:	00056434 	.word	0x00056434
   48f9c:	00057990 	.word	0x00057990
   48fa0:	0000019d 	.word	0x0000019d

00048fa4 <USBBulkOnlyMassStorageDeviceWrite>:
   48fa4:	e92d43f8 	push	{r3, r4, r5, r6, r7, r8, r9, lr}
   48fa8:	e2508000 	subs	r8, r0, #0
   48fac:	e1a09001 	mov	r9, r1
   48fb0:	e1a05002 	mov	r5, r2
   48fb4:	0a000011 	beq	49000 <USBBulkOnlyMassStorageDeviceWrite+0x5c>
   48fb8:	e1a06005 	mov	r6, r5
   48fbc:	e3a04004 	mov	r4, #4
   48fc0:	e1a00008 	mov	r0, r8
   48fc4:	e1a01009 	mov	r1, r9
   48fc8:	e1a02005 	mov	r2, r5
   48fcc:	ebffff25 	bl	48c68 <USBBulkOnlyMassStorageDeviceTryWrite>
   48fd0:	e1500005 	cmp	r0, r5
   48fd4:	e1a07000 	mov	r7, r0
   48fd8:	0a000006 	beq	48ff8 <USBBulkOnlyMassStorageDeviceWrite+0x54>
   48fdc:	e1a00008 	mov	r0, r8
   48fe0:	ebffff74 	bl	48db8 <USBBulkOnlyMassStorageDeviceReset>
   48fe4:	e3500000 	cmp	r0, #0
   48fe8:	18bd83f8 	popne	{r3, r4, r5, r6, r7, r8, r9, pc}
   48fec:	e2544001 	subs	r4, r4, #1
   48ff0:	1afffff2 	bne	48fc0 <USBBulkOnlyMassStorageDeviceWrite+0x1c>
   48ff4:	e1a06007 	mov	r6, r7
   48ff8:	e1a00006 	mov	r0, r6
   48ffc:	e8bd83f8 	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   49000:	e59f000c 	ldr	r0, [pc, #12]	; 49014 <USBBulkOnlyMassStorageDeviceWrite+0x70>
   49004:	e59f100c 	ldr	r1, [pc, #12]	; 49018 <USBBulkOnlyMassStorageDeviceWrite+0x74>
   49008:	e3a02f6e 	mov	r2, #440	; 0x1b8
   4900c:	ebffb78d 	bl	36e48 <uspi_assertion_failed>
   49010:	eaffffe8 	b	48fb8 <USBBulkOnlyMassStorageDeviceWrite+0x14>
   49014:	00056434 	.word	0x00056434
   49018:	00057990 	.word	0x00057990

0004901c <DWHCIFrameSchedulerNonPeriodicWaitForFrame>:
   4901c:	e12fff1e 	bx	lr

00049020 <DWHCIFrameSchedulerNonPeriodicIsOddFrame>:
   49020:	e3a00000 	mov	r0, #0
   49024:	e12fff1e 	bx	lr

00049028 <_DWHCIFrameSchedulerNonPeriodic>:
   49028:	e92d4010 	push	{r4, lr}
   4902c:	e2504000 	subs	r4, r0, #0
   49030:	0a000002 	beq	49040 <_DWHCIFrameSchedulerNonPeriodic+0x18>
   49034:	e3a03006 	mov	r3, #6
   49038:	e5843018 	str	r3, [r4, #24]
   4903c:	e8bd8010 	pop	{r4, pc}
   49040:	e59f000c 	ldr	r0, [pc, #12]	; 49054 <_DWHCIFrameSchedulerNonPeriodic+0x2c>
   49044:	e59f100c 	ldr	r1, [pc, #12]	; 49058 <_DWHCIFrameSchedulerNonPeriodic+0x30>
   49048:	e3a0203a 	mov	r2, #58	; 0x3a
   4904c:	ebffb77d 	bl	36e48 <uspi_assertion_failed>
   49050:	eafffff7 	b	49034 <_DWHCIFrameSchedulerNonPeriodic+0xc>
   49054:	00056434 	.word	0x00056434
   49058:	00057bf0 	.word	0x00057bf0

0004905c <DWHCIFrameSchedulerNonPeriodicStartSplit>:
   4905c:	e92d4010 	push	{r4, lr}
   49060:	e2504000 	subs	r4, r0, #0
   49064:	0a000002 	beq	49074 <DWHCIFrameSchedulerNonPeriodicStartSplit+0x18>
   49068:	e3a03000 	mov	r3, #0
   4906c:	e5843018 	str	r3, [r4, #24]
   49070:	e8bd8010 	pop	{r4, pc}
   49074:	e59f000c 	ldr	r0, [pc, #12]	; 49088 <DWHCIFrameSchedulerNonPeriodicStartSplit+0x2c>
   49078:	e59f100c 	ldr	r1, [pc, #12]	; 4908c <DWHCIFrameSchedulerNonPeriodicStartSplit+0x30>
   4907c:	e3a02042 	mov	r2, #66	; 0x42
   49080:	ebffb770 	bl	36e48 <uspi_assertion_failed>
   49084:	eafffff7 	b	49068 <DWHCIFrameSchedulerNonPeriodicStartSplit+0xc>
   49088:	00056434 	.word	0x00056434
   4908c:	00057bf0 	.word	0x00057bf0

00049090 <DWHCIFrameSchedulerNonPeriodicCompleteSplit>:
   49090:	e92d4010 	push	{r4, lr}
   49094:	e2504000 	subs	r4, r0, #0
   49098:	0a00001b 	beq	4910c <DWHCIFrameSchedulerNonPeriodicCompleteSplit+0x7c>
   4909c:	e5943018 	ldr	r3, [r4, #24]
   490a0:	e2433001 	sub	r3, r3, #1
   490a4:	e3530004 	cmp	r3, #4
   490a8:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
   490ac:	ea000010 	b	490f4 <DWHCIFrameSchedulerNonPeriodicCompleteSplit+0x64>
   490b0:	000490dc 	.word	0x000490dc
   490b4:	000490cc 	.word	0x000490cc
   490b8:	000490cc 	.word	0x000490cc
   490bc:	000490c4 	.word	0x000490c4
   490c0:	000490c4 	.word	0x000490c4
   490c4:	e3a00000 	mov	r0, #0
   490c8:	e8bd8010 	pop	{r4, pc}
   490cc:	e59f004c 	ldr	r0, [pc, #76]	; 49120 <DWHCIFrameSchedulerNonPeriodicCompleteSplit+0x90>
   490d0:	ebffb742 	bl	36de0 <usDelay>
   490d4:	e3a00001 	mov	r0, #1
   490d8:	e8bd8010 	pop	{r4, pc}
   490dc:	e3a02002 	mov	r2, #2
   490e0:	e3a03003 	mov	r3, #3
   490e4:	e5842018 	str	r2, [r4, #24]
   490e8:	e584301c 	str	r3, [r4, #28]
   490ec:	e3a00001 	mov	r0, #1
   490f0:	e8bd8010 	pop	{r4, pc}
   490f4:	e59f0028 	ldr	r0, [pc, #40]	; 49124 <DWHCIFrameSchedulerNonPeriodicCompleteSplit+0x94>
   490f8:	e59f1028 	ldr	r1, [pc, #40]	; 49128 <DWHCIFrameSchedulerNonPeriodicCompleteSplit+0x98>
   490fc:	e3a02061 	mov	r2, #97	; 0x61
   49100:	ebffb750 	bl	36e48 <uspi_assertion_failed>
   49104:	e3a00000 	mov	r0, #0
   49108:	e8bd8010 	pop	{r4, pc}
   4910c:	e59f0018 	ldr	r0, [pc, #24]	; 4912c <DWHCIFrameSchedulerNonPeriodicCompleteSplit+0x9c>
   49110:	e59f1010 	ldr	r1, [pc, #16]	; 49128 <DWHCIFrameSchedulerNonPeriodicCompleteSplit+0x98>
   49114:	e3a0204a 	mov	r2, #74	; 0x4a
   49118:	ebffb74a 	bl	36e48 <uspi_assertion_failed>
   4911c:	eaffffde 	b	4909c <DWHCIFrameSchedulerNonPeriodicCompleteSplit+0xc>
   49120:	00000271 	.word	0x00000271
   49124:	000563cc 	.word	0x000563cc
   49128:	00057bf0 	.word	0x00057bf0
   4912c:	00056434 	.word	0x00056434

00049130 <DWHCIFrameSchedulerNonPeriodicTransactionComplete>:
   49130:	e92d4038 	push	{r3, r4, r5, lr}
   49134:	e2504000 	subs	r4, r0, #0
   49138:	e1a05001 	mov	r5, r1
   4913c:	0a00002b 	beq	491f0 <DWHCIFrameSchedulerNonPeriodicTransactionComplete+0xc0>
   49140:	e5942018 	ldr	r2, [r4, #24]
   49144:	e3520000 	cmp	r2, #0
   49148:	0a000017 	beq	491ac <DWHCIFrameSchedulerNonPeriodicTransactionComplete+0x7c>
   4914c:	e2422002 	sub	r2, r2, #2
   49150:	e3520001 	cmp	r2, #1
   49154:	8a00000f 	bhi	49198 <DWHCIFrameSchedulerNonPeriodicTransactionComplete+0x68>
   49158:	e3150001 	tst	r5, #1
   4915c:	13a03004 	movne	r3, #4
   49160:	15843018 	strne	r3, [r4, #24]
   49164:	18bd8038 	popne	{r3, r4, r5, pc}
   49168:	e3150060 	tst	r5, #96	; 0x60
   4916c:	1a000017 	bne	491d0 <DWHCIFrameSchedulerNonPeriodicTransactionComplete+0xa0>
   49170:	e3150010 	tst	r5, #16
   49174:	0a000025 	beq	49210 <DWHCIFrameSchedulerNonPeriodicTransactionComplete+0xe0>
   49178:	e594301c 	ldr	r3, [r4, #28]
   4917c:	e3530000 	cmp	r3, #0
   49180:	e2433001 	sub	r3, r3, #1
   49184:	e584301c 	str	r3, [r4, #28]
   49188:	0a00001d 	beq	49204 <DWHCIFrameSchedulerNonPeriodicTransactionComplete+0xd4>
   4918c:	e3a03003 	mov	r3, #3
   49190:	e5843018 	str	r3, [r4, #24]
   49194:	e8bd8038 	pop	{r3, r4, r5, pc}
   49198:	e59f0098 	ldr	r0, [pc, #152]	; 49238 <DWHCIFrameSchedulerNonPeriodicTransactionComplete+0x108>
   4919c:	e59f1098 	ldr	r1, [pc, #152]	; 4923c <DWHCIFrameSchedulerNonPeriodicTransactionComplete+0x10c>
   491a0:	e3a02099 	mov	r2, #153	; 0x99
   491a4:	e8bd4038 	pop	{r3, r4, r5, lr}
   491a8:	eaffb726 	b	36e48 <uspi_assertion_failed>
   491ac:	e3150020 	tst	r5, #32
   491b0:	1a000003 	bne	491c4 <DWHCIFrameSchedulerNonPeriodicTransactionComplete+0x94>
   491b4:	e59f0084 	ldr	r0, [pc, #132]	; 49240 <DWHCIFrameSchedulerNonPeriodicTransactionComplete+0x110>
   491b8:	e59f107c 	ldr	r1, [pc, #124]	; 4923c <DWHCIFrameSchedulerNonPeriodicTransactionComplete+0x10c>
   491bc:	e3a02070 	mov	r2, #112	; 0x70
   491c0:	ebffb720 	bl	36e48 <uspi_assertion_failed>
   491c4:	e3a03001 	mov	r3, #1
   491c8:	e5843018 	str	r3, [r4, #24]
   491cc:	e8bd8038 	pop	{r3, r4, r5, pc}
   491d0:	e594301c 	ldr	r3, [r4, #28]
   491d4:	e3530000 	cmp	r3, #0
   491d8:	e2433001 	sub	r3, r3, #1
   491dc:	e584301c 	str	r3, [r4, #28]
   491e0:	1affffe9 	bne	4918c <DWHCIFrameSchedulerNonPeriodicTransactionComplete+0x5c>
   491e4:	e3a03005 	mov	r3, #5
   491e8:	e5843018 	str	r3, [r4, #24]
   491ec:	e8bd8038 	pop	{r3, r4, r5, pc}
   491f0:	e59f004c 	ldr	r0, [pc, #76]	; 49244 <DWHCIFrameSchedulerNonPeriodicTransactionComplete+0x114>
   491f4:	e59f1040 	ldr	r1, [pc, #64]	; 4923c <DWHCIFrameSchedulerNonPeriodicTransactionComplete+0x10c>
   491f8:	e3a0206b 	mov	r2, #107	; 0x6b
   491fc:	ebffb711 	bl	36e48 <uspi_assertion_failed>
   49200:	eaffffce 	b	49140 <DWHCIFrameSchedulerNonPeriodicTransactionComplete+0x10>
   49204:	e59f003c 	ldr	r0, [pc, #60]	; 49248 <DWHCIFrameSchedulerNonPeriodicTransactionComplete+0x118>
   49208:	ebffb6f4 	bl	36de0 <usDelay>
   4920c:	eafffff4 	b	491e4 <DWHCIFrameSchedulerNonPeriodicTransactionComplete+0xb4>
   49210:	e1a03005 	mov	r3, r5
   49214:	e59f0030 	ldr	r0, [pc, #48]	; 4924c <DWHCIFrameSchedulerNonPeriodicTransactionComplete+0x11c>
   49218:	e3a01001 	mov	r1, #1
   4921c:	e59f202c 	ldr	r2, [pc, #44]	; 49250 <DWHCIFrameSchedulerNonPeriodicTransactionComplete+0x120>
   49220:	ebff6bd4 	bl	24178 <LogWrite>
   49224:	e8bd4038 	pop	{r3, r4, r5, lr}
   49228:	e59f0008 	ldr	r0, [pc, #8]	; 49238 <DWHCIFrameSchedulerNonPeriodicTransactionComplete+0x108>
   4922c:	e59f1008 	ldr	r1, [pc, #8]	; 4923c <DWHCIFrameSchedulerNonPeriodicTransactionComplete+0x10c>
   49230:	e3a02094 	mov	r2, #148	; 0x94
   49234:	eaffb703 	b	36e48 <uspi_assertion_failed>
   49238:	000563cc 	.word	0x000563cc
   4923c:	00057bf0 	.word	0x00057bf0
   49240:	00057c08 	.word	0x00057c08
   49244:	00056434 	.word	0x00056434
   49248:	00000271 	.word	0x00000271
   4924c:	00057c2c 	.word	0x00057c2c
   49250:	00057c34 	.word	0x00057c34

00049254 <DWHCIFrameSchedulerNonPeriodic>:
   49254:	e92d4038 	push	{r3, r4, r5, lr}
   49258:	e2504000 	subs	r4, r0, #0
   4925c:	0a00000e 	beq	4929c <DWHCIFrameSchedulerNonPeriodic+0x48>
   49260:	e3a05006 	mov	r5, #6
   49264:	e59fe044 	ldr	lr, [pc, #68]	; 492b0 <DWHCIFrameSchedulerNonPeriodic+0x5c>
   49268:	e59fc044 	ldr	ip, [pc, #68]	; 492b4 <DWHCIFrameSchedulerNonPeriodic+0x60>
   4926c:	e59f0044 	ldr	r0, [pc, #68]	; 492b8 <DWHCIFrameSchedulerNonPeriodic+0x64>
   49270:	e59f1044 	ldr	r1, [pc, #68]	; 492bc <DWHCIFrameSchedulerNonPeriodic+0x68>
   49274:	e59f2044 	ldr	r2, [pc, #68]	; 492c0 <DWHCIFrameSchedulerNonPeriodic+0x6c>
   49278:	e59f3044 	ldr	r3, [pc, #68]	; 492c4 <DWHCIFrameSchedulerNonPeriodic+0x70>
   4927c:	e5845018 	str	r5, [r4, #24]
   49280:	e584e000 	str	lr, [r4]
   49284:	e584c004 	str	ip, [r4, #4]
   49288:	e5840008 	str	r0, [r4, #8]
   4928c:	e584100c 	str	r1, [r4, #12]
   49290:	e5842010 	str	r2, [r4, #16]
   49294:	e5843014 	str	r3, [r4, #20]
   49298:	e8bd8038 	pop	{r3, r4, r5, pc}
   4929c:	e59f0024 	ldr	r0, [pc, #36]	; 492c8 <DWHCIFrameSchedulerNonPeriodic+0x74>
   492a0:	e59f1024 	ldr	r1, [pc, #36]	; 492cc <DWHCIFrameSchedulerNonPeriodic+0x78>
   492a4:	e3a02029 	mov	r2, #41	; 0x29
   492a8:	ebffb6e6 	bl	36e48 <uspi_assertion_failed>
   492ac:	eaffffeb 	b	49260 <DWHCIFrameSchedulerNonPeriodic+0xc>
   492b0:	00049028 	.word	0x00049028
   492b4:	0004905c 	.word	0x0004905c
   492b8:	00049090 	.word	0x00049090
   492bc:	00049130 	.word	0x00049130
   492c0:	0004901c 	.word	0x0004901c
   492c4:	00049020 	.word	0x00049020
   492c8:	00056434 	.word	0x00056434
   492cc:	00057bf0 	.word	0x00057bf0

000492d0 <_DWHCIFrameSchedulerPeriodic>:
   492d0:	e92d4010 	push	{r4, lr}
   492d4:	e2504000 	subs	r4, r0, #0
   492d8:	0a000002 	beq	492e8 <_DWHCIFrameSchedulerPeriodic+0x18>
   492dc:	e3a03006 	mov	r3, #6
   492e0:	e5843018 	str	r3, [r4, #24]
   492e4:	e8bd8010 	pop	{r4, pc}
   492e8:	e59f000c 	ldr	r0, [pc, #12]	; 492fc <_DWHCIFrameSchedulerPeriodic+0x2c>
   492ec:	e59f100c 	ldr	r1, [pc, #12]	; 49300 <_DWHCIFrameSchedulerPeriodic+0x30>
   492f0:	e3a0203e 	mov	r2, #62	; 0x3e
   492f4:	ebffb6d3 	bl	36e48 <uspi_assertion_failed>
   492f8:	eafffff7 	b	492dc <_DWHCIFrameSchedulerPeriodic+0xc>
   492fc:	00056434 	.word	0x00056434
   49300:	00057c48 	.word	0x00057c48

00049304 <DWHCIFrameSchedulerPeriodicStartSplit>:
   49304:	e92d4010 	push	{r4, lr}
   49308:	e2504000 	subs	r4, r0, #0
   4930c:	0a000004 	beq	49324 <DWHCIFrameSchedulerPeriodicStartSplit+0x20>
   49310:	e3a02000 	mov	r2, #0
   49314:	e3a03008 	mov	r3, #8
   49318:	e5842018 	str	r2, [r4, #24]
   4931c:	e5843020 	str	r3, [r4, #32]
   49320:	e8bd8010 	pop	{r4, pc}
   49324:	e59f000c 	ldr	r0, [pc, #12]	; 49338 <DWHCIFrameSchedulerPeriodicStartSplit+0x34>
   49328:	e59f100c 	ldr	r1, [pc, #12]	; 4933c <DWHCIFrameSchedulerPeriodicStartSplit+0x38>
   4932c:	e3a02046 	mov	r2, #70	; 0x46
   49330:	ebffb6c4 	bl	36e48 <uspi_assertion_failed>
   49334:	eafffff5 	b	49310 <DWHCIFrameSchedulerPeriodicStartSplit+0xc>
   49338:	00056434 	.word	0x00056434
   4933c:	00057c48 	.word	0x00057c48

00049340 <DWHCIFrameSchedulerPeriodicIsOddFrame>:
   49340:	e92d4010 	push	{r4, lr}
   49344:	e2504000 	subs	r4, r0, #0
   49348:	0a000002 	beq	49358 <DWHCIFrameSchedulerPeriodicIsOddFrame+0x18>
   4934c:	e5940020 	ldr	r0, [r4, #32]
   49350:	e2000001 	and	r0, r0, #1
   49354:	e8bd8010 	pop	{r4, pc}
   49358:	e59f000c 	ldr	r0, [pc, #12]	; 4936c <DWHCIFrameSchedulerPeriodicIsOddFrame+0x2c>
   4935c:	e59f100c 	ldr	r1, [pc, #12]	; 49370 <DWHCIFrameSchedulerPeriodicIsOddFrame+0x30>
   49360:	e3a020ba 	mov	r2, #186	; 0xba
   49364:	ebffb6b7 	bl	36e48 <uspi_assertion_failed>
   49368:	eafffff7 	b	4934c <DWHCIFrameSchedulerPeriodicIsOddFrame+0xc>
   4936c:	00056434 	.word	0x00056434
   49370:	00057c48 	.word	0x00057c48

00049374 <DWHCIFrameSchedulerPeriodicWaitForFrame>:
   49374:	e92d4010 	push	{r4, lr}
   49378:	e2504000 	subs	r4, r0, #0
   4937c:	e24dd010 	sub	sp, sp, #16
   49380:	0a000017 	beq	493e4 <DWHCIFrameSchedulerPeriodicWaitForFrame+0x70>
   49384:	e28d0004 	add	r0, sp, #4
   49388:	e59f1068 	ldr	r1, [pc, #104]	; 493f8 <DWHCIFrameSchedulerPeriodicWaitForFrame+0x84>
   4938c:	ebffded6 	bl	40eec <DWHCIRegister>
   49390:	e5943020 	ldr	r3, [r4, #32]
   49394:	e3530008 	cmp	r3, #8
   49398:	0a000009 	beq	493c4 <DWHCIFrameSchedulerPeriodicWaitForFrame+0x50>
   4939c:	e28d0004 	add	r0, sp, #4
   493a0:	ebffdefd 	bl	40f9c <DWHCIRegisterRead>
   493a4:	e5943020 	ldr	r3, [r4, #32]
   493a8:	e2000007 	and	r0, r0, #7
   493ac:	e1500003 	cmp	r0, r3
   493b0:	1afffff9 	bne	4939c <DWHCIFrameSchedulerPeriodicWaitForFrame+0x28>
   493b4:	e28d0004 	add	r0, sp, #4
   493b8:	ebffdeea 	bl	40f68 <_DWHCIRegister>
   493bc:	e28dd010 	add	sp, sp, #16
   493c0:	e8bd8010 	pop	{r4, pc}
   493c4:	e28d0004 	add	r0, sp, #4
   493c8:	ebffdef3 	bl	40f9c <DWHCIRegisterRead>
   493cc:	e2800001 	add	r0, r0, #1
   493d0:	e2003007 	and	r3, r0, #7
   493d4:	e3530006 	cmp	r3, #6
   493d8:	03a03007 	moveq	r3, #7
   493dc:	e5843020 	str	r3, [r4, #32]
   493e0:	eaffffed 	b	4939c <DWHCIFrameSchedulerPeriodicWaitForFrame+0x28>
   493e4:	e59f0010 	ldr	r0, [pc, #16]	; 493fc <DWHCIFrameSchedulerPeriodicWaitForFrame+0x88>
   493e8:	e59f1010 	ldr	r1, [pc, #16]	; 49400 <DWHCIFrameSchedulerPeriodicWaitForFrame+0x8c>
   493ec:	e3a020a1 	mov	r2, #161	; 0xa1
   493f0:	ebffb694 	bl	36e48 <uspi_assertion_failed>
   493f4:	eaffffe2 	b	49384 <DWHCIFrameSchedulerPeriodicWaitForFrame+0x10>
   493f8:	20980408 	.word	0x20980408
   493fc:	00056434 	.word	0x00056434
   49400:	00057c48 	.word	0x00057c48

00049404 <DWHCIFrameSchedulerPeriodicCompleteSplit>:
   49404:	e92d4010 	push	{r4, lr}
   49408:	e2504000 	subs	r4, r0, #0
   4940c:	0a000023 	beq	494a0 <DWHCIFrameSchedulerPeriodicCompleteSplit+0x9c>
   49410:	e5943018 	ldr	r3, [r4, #24]
   49414:	e2433001 	sub	r3, r3, #1
   49418:	e3530004 	cmp	r3, #4
   4941c:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
   49420:	ea000018 	b	49488 <DWHCIFrameSchedulerPeriodicCompleteSplit+0x84>
   49424:	00049458 	.word	0x00049458
   49428:	00049488 	.word	0x00049488
   4942c:	00049440 	.word	0x00049440
   49430:	00049438 	.word	0x00049438
   49434:	00049438 	.word	0x00049438
   49438:	e3a00000 	mov	r0, #0
   4943c:	e8bd8010 	pop	{r4, pc}
   49440:	e3a00001 	mov	r0, #1
   49444:	e5943020 	ldr	r3, [r4, #32]
   49448:	e0833000 	add	r3, r3, r0
   4944c:	e2033007 	and	r3, r3, #7
   49450:	e5843020 	str	r3, [r4, #32]
   49454:	e8bd8010 	pop	{r4, pc}
   49458:	e3a02002 	mov	r2, #2
   4945c:	e5943020 	ldr	r3, [r4, #32]
   49460:	e5842018 	str	r2, [r4, #24]
   49464:	e3530005 	cmp	r3, #5
   49468:	13a01003 	movne	r1, #3
   4946c:	01a01002 	moveq	r1, r2
   49470:	e0833002 	add	r3, r3, r2
   49474:	e2033007 	and	r3, r3, #7
   49478:	e5843020 	str	r3, [r4, #32]
   4947c:	e584101c 	str	r1, [r4, #28]
   49480:	e3a00001 	mov	r0, #1
   49484:	e8bd8010 	pop	{r4, pc}
   49488:	e59f0024 	ldr	r0, [pc, #36]	; 494b4 <DWHCIFrameSchedulerPeriodicCompleteSplit+0xb0>
   4948c:	e59f1024 	ldr	r1, [pc, #36]	; 494b8 <DWHCIFrameSchedulerPeriodicCompleteSplit+0xb4>
   49490:	e3a02066 	mov	r2, #102	; 0x66
   49494:	ebffb66b 	bl	36e48 <uspi_assertion_failed>
   49498:	e3a00000 	mov	r0, #0
   4949c:	e8bd8010 	pop	{r4, pc}
   494a0:	e59f0014 	ldr	r0, [pc, #20]	; 494bc <DWHCIFrameSchedulerPeriodicCompleteSplit+0xb8>
   494a4:	e59f100c 	ldr	r1, [pc, #12]	; 494b8 <DWHCIFrameSchedulerPeriodicCompleteSplit+0xb4>
   494a8:	e3a0204f 	mov	r2, #79	; 0x4f
   494ac:	ebffb665 	bl	36e48 <uspi_assertion_failed>
   494b0:	eaffffd6 	b	49410 <DWHCIFrameSchedulerPeriodicCompleteSplit+0xc>
   494b4:	000563cc 	.word	0x000563cc
   494b8:	00057c48 	.word	0x00057c48
   494bc:	00056434 	.word	0x00056434

000494c0 <DWHCIFrameSchedulerPeriodicTransactionComplete>:
   494c0:	e92d4038 	push	{r3, r4, r5, lr}
   494c4:	e2504000 	subs	r4, r0, #0
   494c8:	e1a05001 	mov	r5, r1
   494cc:	0a00002c 	beq	49584 <DWHCIFrameSchedulerPeriodicTransactionComplete+0xc4>
   494d0:	e5942018 	ldr	r2, [r4, #24]
   494d4:	e3520000 	cmp	r2, #0
   494d8:	0a000014 	beq	49530 <DWHCIFrameSchedulerPeriodicTransactionComplete+0x70>
   494dc:	e2422002 	sub	r2, r2, #2
   494e0:	e3520001 	cmp	r2, #1
   494e4:	8a00000c 	bhi	4951c <DWHCIFrameSchedulerPeriodicTransactionComplete+0x5c>
   494e8:	e3150001 	tst	r5, #1
   494ec:	13a03004 	movne	r3, #4
   494f0:	15843018 	strne	r3, [r4, #24]
   494f4:	18bd8038 	popne	{r3, r4, r5, pc}
   494f8:	e3150060 	tst	r5, #96	; 0x60
   494fc:	1a000014 	bne	49554 <DWHCIFrameSchedulerPeriodicTransactionComplete+0x94>
   49500:	e3150010 	tst	r5, #16
   49504:	0a000023 	beq	49598 <DWHCIFrameSchedulerPeriodicTransactionComplete+0xd8>
   49508:	e59f00b0 	ldr	r0, [pc, #176]	; 495c0 <DWHCIFrameSchedulerPeriodicTransactionComplete+0x100>
   4950c:	ebffb633 	bl	36de0 <usDelay>
   49510:	e3a03005 	mov	r3, #5
   49514:	e5843018 	str	r3, [r4, #24]
   49518:	e8bd8038 	pop	{r3, r4, r5, pc}
   4951c:	e59f00a0 	ldr	r0, [pc, #160]	; 495c4 <DWHCIFrameSchedulerPeriodicTransactionComplete+0x104>
   49520:	e59f10a0 	ldr	r1, [pc, #160]	; 495c8 <DWHCIFrameSchedulerPeriodicTransactionComplete+0x108>
   49524:	e3a02099 	mov	r2, #153	; 0x99
   49528:	e8bd4038 	pop	{r3, r4, r5, lr}
   4952c:	eaffb645 	b	36e48 <uspi_assertion_failed>
   49530:	e3150020 	tst	r5, #32
   49534:	1a000003 	bne	49548 <DWHCIFrameSchedulerPeriodicTransactionComplete+0x88>
   49538:	e59f008c 	ldr	r0, [pc, #140]	; 495cc <DWHCIFrameSchedulerPeriodicTransactionComplete+0x10c>
   4953c:	e59f1084 	ldr	r1, [pc, #132]	; 495c8 <DWHCIFrameSchedulerPeriodicTransactionComplete+0x108>
   49540:	e3a02075 	mov	r2, #117	; 0x75
   49544:	ebffb63f 	bl	36e48 <uspi_assertion_failed>
   49548:	e3a03001 	mov	r3, #1
   4954c:	e5843018 	str	r3, [r4, #24]
   49550:	e8bd8038 	pop	{r3, r4, r5, pc}
   49554:	e594301c 	ldr	r3, [r4, #28]
   49558:	e3530000 	cmp	r3, #0
   4955c:	e2433001 	sub	r3, r3, #1
   49560:	e584301c 	str	r3, [r4, #28]
   49564:	13a03003 	movne	r3, #3
   49568:	15843018 	strne	r3, [r4, #24]
   4956c:	18bd8038 	popne	{r3, r4, r5, pc}
   49570:	e3a03005 	mov	r3, #5
   49574:	e3a00ffa 	mov	r0, #1000	; 0x3e8
   49578:	e5843018 	str	r3, [r4, #24]
   4957c:	e8bd4038 	pop	{r3, r4, r5, lr}
   49580:	eaffb616 	b	36de0 <usDelay>
   49584:	e59f0044 	ldr	r0, [pc, #68]	; 495d0 <DWHCIFrameSchedulerPeriodicTransactionComplete+0x110>
   49588:	e59f1038 	ldr	r1, [pc, #56]	; 495c8 <DWHCIFrameSchedulerPeriodicTransactionComplete+0x108>
   4958c:	e3a02070 	mov	r2, #112	; 0x70
   49590:	ebffb62c 	bl	36e48 <uspi_assertion_failed>
   49594:	eaffffcd 	b	494d0 <DWHCIFrameSchedulerPeriodicTransactionComplete+0x10>
   49598:	e1a03005 	mov	r3, r5
   4959c:	e59f0030 	ldr	r0, [pc, #48]	; 495d4 <DWHCIFrameSchedulerPeriodicTransactionComplete+0x114>
   495a0:	e3a01001 	mov	r1, #1
   495a4:	e59f202c 	ldr	r2, [pc, #44]	; 495d8 <DWHCIFrameSchedulerPeriodicTransactionComplete+0x118>
   495a8:	ebff6af2 	bl	24178 <LogWrite>
   495ac:	e8bd4038 	pop	{r3, r4, r5, lr}
   495b0:	e59f000c 	ldr	r0, [pc, #12]	; 495c4 <DWHCIFrameSchedulerPeriodicTransactionComplete+0x104>
   495b4:	e59f100c 	ldr	r1, [pc, #12]	; 495c8 <DWHCIFrameSchedulerPeriodicTransactionComplete+0x108>
   495b8:	e3a02094 	mov	r2, #148	; 0x94
   495bc:	eaffb621 	b	36e48 <uspi_assertion_failed>
   495c0:	00000271 	.word	0x00000271
   495c4:	000563cc 	.word	0x000563cc
   495c8:	00057c48 	.word	0x00057c48
   495cc:	00057c08 	.word	0x00057c08
   495d0:	00056434 	.word	0x00056434
   495d4:	00057c2c 	.word	0x00057c2c
   495d8:	00057c34 	.word	0x00057c34

000495dc <DWHCIFrameSchedulerPeriodic>:
   495dc:	e92d4070 	push	{r4, r5, r6, lr}
   495e0:	e2504000 	subs	r4, r0, #0
   495e4:	0a000010 	beq	4962c <DWHCIFrameSchedulerPeriodic+0x50>
   495e8:	e3a06006 	mov	r6, #6
   495ec:	e3a05008 	mov	r5, #8
   495f0:	e59fe048 	ldr	lr, [pc, #72]	; 49640 <DWHCIFrameSchedulerPeriodic+0x64>
   495f4:	e59fc048 	ldr	ip, [pc, #72]	; 49644 <DWHCIFrameSchedulerPeriodic+0x68>
   495f8:	e59f0048 	ldr	r0, [pc, #72]	; 49648 <DWHCIFrameSchedulerPeriodic+0x6c>
   495fc:	e59f1048 	ldr	r1, [pc, #72]	; 4964c <DWHCIFrameSchedulerPeriodic+0x70>
   49600:	e59f2048 	ldr	r2, [pc, #72]	; 49650 <DWHCIFrameSchedulerPeriodic+0x74>
   49604:	e59f3048 	ldr	r3, [pc, #72]	; 49654 <DWHCIFrameSchedulerPeriodic+0x78>
   49608:	e5846018 	str	r6, [r4, #24]
   4960c:	e5845020 	str	r5, [r4, #32]
   49610:	e584e000 	str	lr, [r4]
   49614:	e584c004 	str	ip, [r4, #4]
   49618:	e5840008 	str	r0, [r4, #8]
   4961c:	e584100c 	str	r1, [r4, #12]
   49620:	e5842010 	str	r2, [r4, #16]
   49624:	e5843014 	str	r3, [r4, #20]
   49628:	e8bd8070 	pop	{r4, r5, r6, pc}
   4962c:	e59f0024 	ldr	r0, [pc, #36]	; 49658 <DWHCIFrameSchedulerPeriodic+0x7c>
   49630:	e59f1024 	ldr	r1, [pc, #36]	; 4965c <DWHCIFrameSchedulerPeriodic+0x80>
   49634:	e3a0202c 	mov	r2, #44	; 0x2c
   49638:	ebffb602 	bl	36e48 <uspi_assertion_failed>
   4963c:	eaffffe9 	b	495e8 <DWHCIFrameSchedulerPeriodic+0xc>
   49640:	000492d0 	.word	0x000492d0
   49644:	00049304 	.word	0x00049304
   49648:	00049404 	.word	0x00049404
   4964c:	000494c0 	.word	0x000494c0
   49650:	00049374 	.word	0x00049374
   49654:	00049340 	.word	0x00049340
   49658:	00056434 	.word	0x00056434
   4965c:	00057c48 	.word	0x00057c48

00049660 <USBKeyboardDeviceStartRequest>:
   49660:	e92d4070 	push	{r4, r5, r6, lr}
   49664:	e2504000 	subs	r4, r0, #0
   49668:	e24dd008 	sub	sp, sp, #8
   4966c:	0a00001d 	beq	496e8 <USBKeyboardDeviceStartRequest+0x88>
   49670:	e5943010 	ldr	r3, [r4, #16]
   49674:	e3530000 	cmp	r3, #0
   49678:	0a00001f 	beq	496fc <USBKeyboardDeviceStartRequest+0x9c>
   4967c:	e5942048 	ldr	r2, [r4, #72]	; 0x48
   49680:	e3520000 	cmp	r2, #0
   49684:	0a000011 	beq	496d0 <USBKeyboardDeviceStartRequest+0x70>
   49688:	e3a06000 	mov	r6, #0
   4968c:	e2845024 	add	r5, r4, #36	; 0x24
   49690:	e5941010 	ldr	r1, [r4, #16]
   49694:	e1a00005 	mov	r0, r5
   49698:	e58d6000 	str	r6, [sp]
   4969c:	e3a03008 	mov	r3, #8
   496a0:	ebffe962 	bl	43c30 <USBRequest>
   496a4:	e1a00005 	mov	r0, r5
   496a8:	e1a02006 	mov	r2, r6
   496ac:	e59f105c 	ldr	r1, [pc, #92]	; 49710 <USBKeyboardDeviceStartRequest+0xb0>
   496b0:	e1a03004 	mov	r3, r4
   496b4:	ebffea30 	bl	43f7c <USBRequestSetCompletionRoutine>
   496b8:	e1a00004 	mov	r0, r4
   496bc:	ebffefa2 	bl	4554c <USBFunctionGetHost>
   496c0:	e1a01005 	mov	r1, r5
   496c4:	e28dd008 	add	sp, sp, #8
   496c8:	e8bd4070 	pop	{r4, r5, r6, lr}
   496cc:	eaffd73e 	b	3f3cc <DWHCIDeviceSubmitAsyncRequest>
   496d0:	e3a02f46 	mov	r2, #280	; 0x118
   496d4:	e59f0038 	ldr	r0, [pc, #56]	; 49714 <USBKeyboardDeviceStartRequest+0xb4>
   496d8:	e59f1038 	ldr	r1, [pc, #56]	; 49718 <USBKeyboardDeviceStartRequest+0xb8>
   496dc:	ebffb5d9 	bl	36e48 <uspi_assertion_failed>
   496e0:	e5942048 	ldr	r2, [r4, #72]	; 0x48
   496e4:	eaffffe7 	b	49688 <USBKeyboardDeviceStartRequest+0x28>
   496e8:	e59f002c 	ldr	r0, [pc, #44]	; 4971c <USBKeyboardDeviceStartRequest+0xbc>
   496ec:	e59f1024 	ldr	r1, [pc, #36]	; 49718 <USBKeyboardDeviceStartRequest+0xb8>
   496f0:	e59f2028 	ldr	r2, [pc, #40]	; 49720 <USBKeyboardDeviceStartRequest+0xc0>
   496f4:	ebffb5d3 	bl	36e48 <uspi_assertion_failed>
   496f8:	eaffffdc 	b	49670 <USBKeyboardDeviceStartRequest+0x10>
   496fc:	e59f0020 	ldr	r0, [pc, #32]	; 49724 <USBKeyboardDeviceStartRequest+0xc4>
   49700:	e59f1010 	ldr	r1, [pc, #16]	; 49718 <USBKeyboardDeviceStartRequest+0xb8>
   49704:	e59f201c 	ldr	r2, [pc, #28]	; 49728 <USBKeyboardDeviceStartRequest+0xc8>
   49708:	ebffb5ce 	bl	36e48 <uspi_assertion_failed>
   4970c:	eaffffda 	b	4967c <USBKeyboardDeviceStartRequest+0x1c>
   49710:	0004972c 	.word	0x0004972c
   49714:	00057c98 	.word	0x00057c98
   49718:	00057c68 	.word	0x00057c68
   4971c:	00056434 	.word	0x00056434
   49720:	00000115 	.word	0x00000115
   49724:	00057c78 	.word	0x00057c78
   49728:	00000117 	.word	0x00000117

0004972c <USBKeyboardDeviceCompletionRoutine>:
   4972c:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   49730:	e2525000 	subs	r5, r2, #0
   49734:	e24dd00c 	sub	sp, sp, #12
   49738:	e1a04000 	mov	r4, r0
   4973c:	0a00001d 	beq	497b8 <USBKeyboardDeviceCompletionRoutine+0x8c>
   49740:	e3540000 	cmp	r4, #0
   49744:	0a000020 	beq	497cc <USBKeyboardDeviceCompletionRoutine+0xa0>
   49748:	e2856024 	add	r6, r5, #36	; 0x24
   4974c:	e1560004 	cmp	r6, r4
   49750:	0a000003 	beq	49764 <USBKeyboardDeviceCompletionRoutine+0x38>
   49754:	e59f01a4 	ldr	r0, [pc, #420]	; 49900 <USBKeyboardDeviceCompletionRoutine+0x1d4>
   49758:	e59f11a4 	ldr	r1, [pc, #420]	; 49904 <USBKeyboardDeviceCompletionRoutine+0x1d8>
   4975c:	e59f21a4 	ldr	r2, [pc, #420]	; 49908 <USBKeyboardDeviceCompletionRoutine+0x1dc>
   49760:	ebffb5b8 	bl	36e48 <uspi_assertion_failed>
   49764:	e1a00004 	mov	r0, r4
   49768:	ebffe9a0 	bl	43df0 <USBRequestGetStatus>
   4976c:	e3500000 	cmp	r0, #0
   49770:	1a000005 	bne	4978c <USBKeyboardDeviceCompletionRoutine+0x60>
   49774:	e1a00006 	mov	r0, r6
   49778:	ebffe95c 	bl	43cf0 <_USBRequest>
   4977c:	e1a00005 	mov	r0, r5
   49780:	ebffffb6 	bl	49660 <USBKeyboardDeviceStartRequest>
   49784:	e28dd00c 	add	sp, sp, #12
   49788:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   4978c:	e1a00004 	mov	r0, r4
   49790:	ebffe9a3 	bl	43e24 <USBRequestGetResultLength>
   49794:	e3500008 	cmp	r0, #8
   49798:	1afffff5 	bne	49774 <USBKeyboardDeviceCompletionRoutine+0x48>
   4979c:	e5953020 	ldr	r3, [r5, #32]
   497a0:	e3530000 	cmp	r3, #0
   497a4:	0a00000d 	beq	497e0 <USBKeyboardDeviceCompletionRoutine+0xb4>
   497a8:	e5951048 	ldr	r1, [r5, #72]	; 0x48
   497ac:	e4d10002 	ldrb	r0, [r1], #2
   497b0:	e12fff33 	blx	r3
   497b4:	eaffffee 	b	49774 <USBKeyboardDeviceCompletionRoutine+0x48>
   497b8:	e59f014c 	ldr	r0, [pc, #332]	; 4990c <USBKeyboardDeviceCompletionRoutine+0x1e0>
   497bc:	e59f1140 	ldr	r1, [pc, #320]	; 49904 <USBKeyboardDeviceCompletionRoutine+0x1d8>
   497c0:	e59f2148 	ldr	r2, [pc, #328]	; 49910 <USBKeyboardDeviceCompletionRoutine+0x1e4>
   497c4:	ebffb59f 	bl	36e48 <uspi_assertion_failed>
   497c8:	eaffffdc 	b	49740 <USBKeyboardDeviceCompletionRoutine+0x14>
   497cc:	e59f0140 	ldr	r0, [pc, #320]	; 49914 <USBKeyboardDeviceCompletionRoutine+0x1e8>
   497d0:	e59f112c 	ldr	r1, [pc, #300]	; 49904 <USBKeyboardDeviceCompletionRoutine+0x1d8>
   497d4:	e59f213c 	ldr	r2, [pc, #316]	; 49918 <USBKeyboardDeviceCompletionRoutine+0x1ec>
   497d8:	ebffb59a 	bl	36e48 <uspi_assertion_failed>
   497dc:	eaffffd9 	b	49748 <USBKeyboardDeviceCompletionRoutine+0x1c>
   497e0:	e5950048 	ldr	r0, [r5, #72]	; 0x48
   497e4:	e2803008 	add	r3, r0, #8
   497e8:	e2802002 	add	r2, r0, #2
   497ec:	e5731001 	ldrb	r1, [r3, #-1]!
   497f0:	e3510000 	cmp	r1, #0
   497f4:	1a00000b 	bne	49828 <USBKeyboardDeviceCompletionRoutine+0xfc>
   497f8:	e1530002 	cmp	r3, r2
   497fc:	1afffffa 	bne	497ec <USBKeyboardDeviceCompletionRoutine+0xc0>
   49800:	e5d5304c 	ldrb	r3, [r5, #76]	; 0x4c
   49804:	e3530000 	cmp	r3, #0
   49808:	15c5104c 	strbne	r1, [r5, #76]	; 0x4c
   4980c:	e5950050 	ldr	r0, [r5, #80]	; 0x50
   49810:	e3500000 	cmp	r0, #0
   49814:	0affffd6 	beq	49774 <USBKeyboardDeviceCompletionRoutine+0x48>
   49818:	ebffb575 	bl	36df4 <CancelKernelTimer>
   4981c:	e3a03000 	mov	r3, #0
   49820:	e5853050 	str	r3, [r5, #80]	; 0x50
   49824:	eaffffd2 	b	49774 <USBKeyboardDeviceCompletionRoutine+0x48>
   49828:	e5d5304c 	ldrb	r3, [r5, #76]	; 0x4c
   4982c:	e1530001 	cmp	r3, r1
   49830:	0afffff5 	beq	4980c <USBKeyboardDeviceCompletionRoutine+0xe0>
   49834:	e5c5104c 	strb	r1, [r5, #76]	; 0x4c
   49838:	e5d07000 	ldrb	r7, [r0]
   4983c:	e2854054 	add	r4, r5, #84	; 0x54
   49840:	e1a02007 	mov	r2, r7
   49844:	e1a00004 	mov	r0, r4
   49848:	eb000c41 	bl	4c954 <KeyMapTranslate>
   4984c:	e2403e13 	sub	r3, r0, #304	; 0x130
   49850:	e2433003 	sub	r3, r3, #3
   49854:	e1a01000 	mov	r1, r0
   49858:	e353000f 	cmp	r3, #15
   4985c:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
   49860:	ea00000f 	b	498a4 <USBKeyboardDeviceCompletionRoutine+0x178>
   49864:	00049774 	.word	0x00049774
   49868:	00049774 	.word	0x00049774
   4986c:	00049774 	.word	0x00049774
   49870:	000498e4 	.word	0x000498e4
   49874:	000498e4 	.word	0x000498e4
   49878:	000498e4 	.word	0x000498e4
   4987c:	000498e4 	.word	0x000498e4
   49880:	000498e4 	.word	0x000498e4
   49884:	000498e4 	.word	0x000498e4
   49888:	000498e4 	.word	0x000498e4
   4988c:	000498e4 	.word	0x000498e4
   49890:	000498e4 	.word	0x000498e4
   49894:	000498e4 	.word	0x000498e4
   49898:	000498e4 	.word	0x000498e4
   4989c:	000498e4 	.word	0x000498e4
   498a0:	000498d0 	.word	0x000498d0
   498a4:	e1a00004 	mov	r0, r4
   498a8:	e1a02007 	mov	r2, r7
   498ac:	e28d3004 	add	r3, sp, #4
   498b0:	eb000c7b 	bl	4caa4 <KeyMapGetString>
   498b4:	e3500000 	cmp	r0, #0
   498b8:	0affffad 	beq	49774 <USBKeyboardDeviceCompletionRoutine+0x48>
   498bc:	e5953014 	ldr	r3, [r5, #20]
   498c0:	e3530000 	cmp	r3, #0
   498c4:	0affffaa 	beq	49774 <USBKeyboardDeviceCompletionRoutine+0x48>
   498c8:	e12fff33 	blx	r3
   498cc:	eaffffa8 	b	49774 <USBKeyboardDeviceCompletionRoutine+0x48>
   498d0:	e595301c 	ldr	r3, [r5, #28]
   498d4:	e3530000 	cmp	r3, #0
   498d8:	0affffa5 	beq	49774 <USBKeyboardDeviceCompletionRoutine+0x48>
   498dc:	e12fff33 	blx	r3
   498e0:	eaffffa3 	b	49774 <USBKeyboardDeviceCompletionRoutine+0x48>
   498e4:	e5953018 	ldr	r3, [r5, #24]
   498e8:	e3530000 	cmp	r3, #0
   498ec:	0affffa0 	beq	49774 <USBKeyboardDeviceCompletionRoutine+0x48>
   498f0:	e2410f4d 	sub	r0, r1, #308	; 0x134
   498f4:	e2400002 	sub	r0, r0, #2
   498f8:	e12fff33 	blx	r3
   498fc:	eaffff9c 	b	49774 <USBKeyboardDeviceCompletionRoutine+0x48>
   49900:	00057cb4 	.word	0x00057cb4
   49904:	00057c68 	.word	0x00057c68
   49908:	00000126 	.word	0x00000126
   4990c:	00056434 	.word	0x00056434
   49910:	00000123 	.word	0x00000123
   49914:	0005650c 	.word	0x0005650c
   49918:	00000125 	.word	0x00000125

0004991c <USBKeyboardDevice>:
   4991c:	e92d4038 	push	{r3, r4, r5, lr}
   49920:	e2504000 	subs	r4, r0, #0
   49924:	e1a05001 	mov	r5, r1
   49928:	0a00001a 	beq	49998 <USBKeyboardDevice+0x7c>
   4992c:	e1a01005 	mov	r1, r5
   49930:	e1a00004 	mov	r0, r4
   49934:	ebffee44 	bl	4524c <USBFunctionCopy>
   49938:	e3a03000 	mov	r3, #0
   4993c:	e59f2068 	ldr	r2, [pc, #104]	; 499ac <USBKeyboardDevice+0x90>
   49940:	e5843010 	str	r3, [r4, #16]
   49944:	e5843014 	str	r3, [r4, #20]
   49948:	e5843018 	str	r3, [r4, #24]
   4994c:	e584301c 	str	r3, [r4, #28]
   49950:	e5843020 	str	r3, [r4, #32]
   49954:	e5843048 	str	r3, [r4, #72]	; 0x48
   49958:	e5c4304c 	strb	r3, [r4, #76]	; 0x4c
   4995c:	e5843050 	str	r3, [r4, #80]	; 0x50
   49960:	e5c43460 	strb	r3, [r4, #1120]	; 0x460
   49964:	e5842000 	str	r2, [r4]
   49968:	e2840054 	add	r0, r4, #84	; 0x54
   4996c:	eb000ba9 	bl	4c818 <KeyMap>
   49970:	e3a00008 	mov	r0, #8
   49974:	ebffb50c 	bl	36dac <malloc>
   49978:	e3500000 	cmp	r0, #0
   4997c:	e5840048 	str	r0, [r4, #72]	; 0x48
   49980:	18bd8038 	popne	{r3, r4, r5, pc}
   49984:	e59f0024 	ldr	r0, [pc, #36]	; 499b0 <USBKeyboardDevice+0x94>
   49988:	e59f1024 	ldr	r1, [pc, #36]	; 499b4 <USBKeyboardDevice+0x98>
   4998c:	e3a02044 	mov	r2, #68	; 0x44
   49990:	e8bd4038 	pop	{r3, r4, r5, lr}
   49994:	eaffb52b 	b	36e48 <uspi_assertion_failed>
   49998:	e59f0018 	ldr	r0, [pc, #24]	; 499b8 <USBKeyboardDevice+0x9c>
   4999c:	e59f1010 	ldr	r1, [pc, #16]	; 499b4 <USBKeyboardDevice+0x98>
   499a0:	e3a02032 	mov	r2, #50	; 0x32
   499a4:	ebffb527 	bl	36e48 <uspi_assertion_failed>
   499a8:	eaffffdf 	b	4992c <USBKeyboardDevice+0x10>
   499ac:	00049c44 	.word	0x00049c44
   499b0:	00057c98 	.word	0x00057c98
   499b4:	00057c68 	.word	0x00057c68
   499b8:	00056434 	.word	0x00056434

000499bc <_CUSBKeyboardDevice>:
   499bc:	e92d4010 	push	{r4, lr}
   499c0:	e2504000 	subs	r4, r0, #0
   499c4:	0a000012 	beq	49a14 <_CUSBKeyboardDevice+0x58>
   499c8:	e5940048 	ldr	r0, [r4, #72]	; 0x48
   499cc:	e3500000 	cmp	r0, #0
   499d0:	0a000002 	beq	499e0 <_CUSBKeyboardDevice+0x24>
   499d4:	ebffb4f5 	bl	36db0 <free>
   499d8:	e3a03000 	mov	r3, #0
   499dc:	e5843048 	str	r3, [r4, #72]	; 0x48
   499e0:	e5940010 	ldr	r0, [r4, #16]
   499e4:	e3500000 	cmp	r0, #0
   499e8:	0a000004 	beq	49a00 <_CUSBKeyboardDevice+0x44>
   499ec:	ebffe7b0 	bl	438b4 <_USBEndpoint>
   499f0:	e5940010 	ldr	r0, [r4, #16]
   499f4:	ebffb4ed 	bl	36db0 <free>
   499f8:	e3a03000 	mov	r3, #0
   499fc:	e5843010 	str	r3, [r4, #16]
   49a00:	e2840054 	add	r0, r4, #84	; 0x54
   49a04:	eb000b98 	bl	4c86c <_KeyMap>
   49a08:	e1a00004 	mov	r0, r4
   49a0c:	e8bd4010 	pop	{r4, lr}
   49a10:	eaffee4c 	b	45348 <_USBFunction>
   49a14:	e59f000c 	ldr	r0, [pc, #12]	; 49a28 <_CUSBKeyboardDevice+0x6c>
   49a18:	e59f100c 	ldr	r1, [pc, #12]	; 49a2c <_CUSBKeyboardDevice+0x70>
   49a1c:	e3a02049 	mov	r2, #73	; 0x49
   49a20:	ebffb508 	bl	36e48 <uspi_assertion_failed>
   49a24:	eaffffe7 	b	499c8 <_CUSBKeyboardDevice+0xc>
   49a28:	00056434 	.word	0x00056434
   49a2c:	00057c68 	.word	0x00057c68

00049a30 <USBKeyboardDeviceRegisterKeyPressedHandler>:
   49a30:	e92d4038 	push	{r3, r4, r5, lr}
   49a34:	e2505000 	subs	r5, r0, #0
   49a38:	e1a04001 	mov	r4, r1
   49a3c:	0a000009 	beq	49a68 <USBKeyboardDeviceRegisterKeyPressedHandler+0x38>
   49a40:	e3540000 	cmp	r4, #0
   49a44:	0a000001 	beq	49a50 <USBKeyboardDeviceRegisterKeyPressedHandler+0x20>
   49a48:	e5854014 	str	r4, [r5, #20]
   49a4c:	e8bd8038 	pop	{r3, r4, r5, pc}
   49a50:	e59f0024 	ldr	r0, [pc, #36]	; 49a7c <USBKeyboardDeviceRegisterKeyPressedHandler+0x4c>
   49a54:	e59f1024 	ldr	r1, [pc, #36]	; 49a80 <USBKeyboardDeviceRegisterKeyPressedHandler+0x50>
   49a58:	e3a020a3 	mov	r2, #163	; 0xa3
   49a5c:	ebffb4f9 	bl	36e48 <uspi_assertion_failed>
   49a60:	e5854014 	str	r4, [r5, #20]
   49a64:	e8bd8038 	pop	{r3, r4, r5, pc}
   49a68:	e59f0014 	ldr	r0, [pc, #20]	; 49a84 <USBKeyboardDeviceRegisterKeyPressedHandler+0x54>
   49a6c:	e59f100c 	ldr	r1, [pc, #12]	; 49a80 <USBKeyboardDeviceRegisterKeyPressedHandler+0x50>
   49a70:	e3a020a2 	mov	r2, #162	; 0xa2
   49a74:	ebffb4f3 	bl	36e48 <uspi_assertion_failed>
   49a78:	eafffff0 	b	49a40 <USBKeyboardDeviceRegisterKeyPressedHandler+0x10>
   49a7c:	00057ccc 	.word	0x00057ccc
   49a80:	00057c68 	.word	0x00057c68
   49a84:	00056434 	.word	0x00056434

00049a88 <USBKeyboardDeviceRegisterSelectConsoleHandler>:
   49a88:	e92d4038 	push	{r3, r4, r5, lr}
   49a8c:	e2505000 	subs	r5, r0, #0
   49a90:	e1a04001 	mov	r4, r1
   49a94:	0a000009 	beq	49ac0 <USBKeyboardDeviceRegisterSelectConsoleHandler+0x38>
   49a98:	e3540000 	cmp	r4, #0
   49a9c:	0a000001 	beq	49aa8 <USBKeyboardDeviceRegisterSelectConsoleHandler+0x20>
   49aa0:	e5854018 	str	r4, [r5, #24]
   49aa4:	e8bd8038 	pop	{r3, r4, r5, pc}
   49aa8:	e59f0024 	ldr	r0, [pc, #36]	; 49ad4 <USBKeyboardDeviceRegisterSelectConsoleHandler+0x4c>
   49aac:	e59f1024 	ldr	r1, [pc, #36]	; 49ad8 <USBKeyboardDeviceRegisterSelectConsoleHandler+0x50>
   49ab0:	e3a020aa 	mov	r2, #170	; 0xaa
   49ab4:	ebffb4e3 	bl	36e48 <uspi_assertion_failed>
   49ab8:	e5854018 	str	r4, [r5, #24]
   49abc:	e8bd8038 	pop	{r3, r4, r5, pc}
   49ac0:	e59f0014 	ldr	r0, [pc, #20]	; 49adc <USBKeyboardDeviceRegisterSelectConsoleHandler+0x54>
   49ac4:	e59f100c 	ldr	r1, [pc, #12]	; 49ad8 <USBKeyboardDeviceRegisterSelectConsoleHandler+0x50>
   49ac8:	e3a020a9 	mov	r2, #169	; 0xa9
   49acc:	ebffb4dd 	bl	36e48 <uspi_assertion_failed>
   49ad0:	eafffff0 	b	49a98 <USBKeyboardDeviceRegisterSelectConsoleHandler+0x10>
   49ad4:	00057ce4 	.word	0x00057ce4
   49ad8:	00057c68 	.word	0x00057c68
   49adc:	00056434 	.word	0x00056434

00049ae0 <USBKeyboardDeviceRegisterShutdownHandler>:
   49ae0:	e92d4038 	push	{r3, r4, r5, lr}
   49ae4:	e2505000 	subs	r5, r0, #0
   49ae8:	e1a04001 	mov	r4, r1
   49aec:	0a000009 	beq	49b18 <USBKeyboardDeviceRegisterShutdownHandler+0x38>
   49af0:	e3540000 	cmp	r4, #0
   49af4:	0a000001 	beq	49b00 <USBKeyboardDeviceRegisterShutdownHandler+0x20>
   49af8:	e585401c 	str	r4, [r5, #28]
   49afc:	e8bd8038 	pop	{r3, r4, r5, pc}
   49b00:	e59f0024 	ldr	r0, [pc, #36]	; 49b2c <USBKeyboardDeviceRegisterShutdownHandler+0x4c>
   49b04:	e59f1024 	ldr	r1, [pc, #36]	; 49b30 <USBKeyboardDeviceRegisterShutdownHandler+0x50>
   49b08:	e3a020b1 	mov	r2, #177	; 0xb1
   49b0c:	ebffb4cd 	bl	36e48 <uspi_assertion_failed>
   49b10:	e585401c 	str	r4, [r5, #28]
   49b14:	e8bd8038 	pop	{r3, r4, r5, pc}
   49b18:	e59f0014 	ldr	r0, [pc, #20]	; 49b34 <USBKeyboardDeviceRegisterShutdownHandler+0x54>
   49b1c:	e59f100c 	ldr	r1, [pc, #12]	; 49b30 <USBKeyboardDeviceRegisterShutdownHandler+0x50>
   49b20:	e3a020b0 	mov	r2, #176	; 0xb0
   49b24:	ebffb4c7 	bl	36e48 <uspi_assertion_failed>
   49b28:	eafffff0 	b	49af0 <USBKeyboardDeviceRegisterShutdownHandler+0x10>
   49b2c:	00057d00 	.word	0x00057d00
   49b30:	00057c68 	.word	0x00057c68
   49b34:	00056434 	.word	0x00056434

00049b38 <USBKeyboardDeviceRegisterKeyStatusHandlerRaw>:
   49b38:	e92d4038 	push	{r3, r4, r5, lr}
   49b3c:	e2505000 	subs	r5, r0, #0
   49b40:	e1a04001 	mov	r4, r1
   49b44:	0a000009 	beq	49b70 <USBKeyboardDeviceRegisterKeyStatusHandlerRaw+0x38>
   49b48:	e3540000 	cmp	r4, #0
   49b4c:	0a000001 	beq	49b58 <USBKeyboardDeviceRegisterKeyStatusHandlerRaw+0x20>
   49b50:	e5854020 	str	r4, [r5, #32]
   49b54:	e8bd8038 	pop	{r3, r4, r5, pc}
   49b58:	e59f0024 	ldr	r0, [pc, #36]	; 49b84 <USBKeyboardDeviceRegisterKeyStatusHandlerRaw+0x4c>
   49b5c:	e59f1024 	ldr	r1, [pc, #36]	; 49b88 <USBKeyboardDeviceRegisterKeyStatusHandlerRaw+0x50>
   49b60:	e3a020c4 	mov	r2, #196	; 0xc4
   49b64:	ebffb4b7 	bl	36e48 <uspi_assertion_failed>
   49b68:	e5854020 	str	r4, [r5, #32]
   49b6c:	e8bd8038 	pop	{r3, r4, r5, pc}
   49b70:	e59f0014 	ldr	r0, [pc, #20]	; 49b8c <USBKeyboardDeviceRegisterKeyStatusHandlerRaw+0x54>
   49b74:	e59f100c 	ldr	r1, [pc, #12]	; 49b88 <USBKeyboardDeviceRegisterKeyStatusHandlerRaw+0x50>
   49b78:	e3a020c3 	mov	r2, #195	; 0xc3
   49b7c:	ebffb4b1 	bl	36e48 <uspi_assertion_failed>
   49b80:	eafffff0 	b	49b48 <USBKeyboardDeviceRegisterKeyStatusHandlerRaw+0x10>
   49b84:	00057d18 	.word	0x00057d18
   49b88:	00057c68 	.word	0x00057c68
   49b8c:	00056434 	.word	0x00056434

00049b90 <USBKeyboardDeviceSetLEDs>:
   49b90:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   49b94:	e2505000 	subs	r5, r0, #0
   49b98:	e24dd01c 	sub	sp, sp, #28
   49b9c:	e1a06001 	mov	r6, r1
   49ba0:	0a00001e 	beq	49c20 <USBKeyboardDeviceSetLEDs+0x90>
   49ba4:	e28d4018 	add	r4, sp, #24
   49ba8:	e1a00005 	mov	r0, r5
   49bac:	e5646004 	strb	r6, [r4, #-4]!
   49bb0:	ebffee65 	bl	4554c <USBFunctionGetHost>
   49bb4:	e1a07000 	mov	r7, r0
   49bb8:	e1a00005 	mov	r0, r5
   49bbc:	ebffee4b 	bl	454f0 <USBFunctionGetEndpoint0>
   49bc0:	e1a06000 	mov	r6, r0
   49bc4:	e1a00005 	mov	r0, r5
   49bc8:	ebffef28 	bl	45870 <USBFunctionGetInterfaceNumber>
   49bcc:	e3a02c02 	mov	r2, #512	; 0x200
   49bd0:	e3a03001 	mov	r3, #1
   49bd4:	e6ff0070 	uxth	r0, r0
   49bd8:	e98d0011 	stmib	sp, {r0, r4}
   49bdc:	e58d2000 	str	r2, [sp]
   49be0:	e58d300c 	str	r3, [sp, #12]
   49be4:	e1a00007 	mov	r0, r7
   49be8:	e1a01006 	mov	r1, r6
   49bec:	e3a02021 	mov	r2, #33	; 0x21
   49bf0:	e3a03009 	mov	r3, #9
   49bf4:	ebffd6ff 	bl	3f7f8 <DWHCIDeviceControlMessage>
   49bf8:	e3500000 	cmp	r0, #0
   49bfc:	ba000001 	blt	49c08 <USBKeyboardDeviceSetLEDs+0x78>
   49c00:	e28dd01c 	add	sp, sp, #28
   49c04:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   49c08:	e59f0024 	ldr	r0, [pc, #36]	; 49c34 <USBKeyboardDeviceSetLEDs+0xa4>
   49c0c:	e3a01002 	mov	r1, #2
   49c10:	e59f2020 	ldr	r2, [pc, #32]	; 49c38 <USBKeyboardDeviceSetLEDs+0xa8>
   49c14:	ebff6957 	bl	24178 <LogWrite>
   49c18:	e28dd01c 	add	sp, sp, #28
   49c1c:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   49c20:	e59f0014 	ldr	r0, [pc, #20]	; 49c3c <USBKeyboardDeviceSetLEDs+0xac>
   49c24:	e59f1014 	ldr	r1, [pc, #20]	; 49c40 <USBKeyboardDeviceSetLEDs+0xb0>
   49c28:	e3a020ca 	mov	r2, #202	; 0xca
   49c2c:	ebffb485 	bl	36e48 <uspi_assertion_failed>
   49c30:	eaffffdb 	b	49ba4 <USBKeyboardDeviceSetLEDs+0x14>
   49c34:	00057c60 	.word	0x00057c60
   49c38:	00057d34 	.word	0x00057d34
   49c3c:	00056434 	.word	0x00056434
   49c40:	00057c68 	.word	0x00057c68

00049c44 <USBKeyboardDeviceConfigure>:
   49c44:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   49c48:	e2505000 	subs	r5, r0, #0
   49c4c:	e24dd024 	sub	sp, sp, #36	; 0x24
   49c50:	0a000070 	beq	49e18 <USBKeyboardDeviceConfigure+0x1d4>
   49c54:	e1a00005 	mov	r0, r5
   49c58:	ebffedf9 	bl	45444 <USBFunctionGetNumEndpoints>
   49c5c:	e2504000 	subs	r4, r0, #0
   49c60:	0a00005e 	beq	49de0 <USBKeyboardDeviceConfigure+0x19c>
   49c64:	e1a00005 	mov	r0, r5
   49c68:	e3a01005 	mov	r1, #5
   49c6c:	ebffee83 	bl	45680 <USBFunctionGetDescriptor>
   49c70:	e2504000 	subs	r4, r0, #0
   49c74:	0a000019 	beq	49ce0 <USBKeyboardDeviceConfigure+0x9c>
   49c78:	e1d430d2 	ldrsb	r3, [r4, #2]
   49c7c:	e3530000 	cmp	r3, #0
   49c80:	aafffff7 	bge	49c64 <USBKeyboardDeviceConfigure+0x20>
   49c84:	e5d43003 	ldrb	r3, [r4, #3]
   49c88:	e203303f 	and	r3, r3, #63	; 0x3f
   49c8c:	e3530003 	cmp	r3, #3
   49c90:	1afffff3 	bne	49c64 <USBKeyboardDeviceConfigure+0x20>
   49c94:	e5953010 	ldr	r3, [r5, #16]
   49c98:	e3530000 	cmp	r3, #0
   49c9c:	0a000003 	beq	49cb0 <USBKeyboardDeviceConfigure+0x6c>
   49ca0:	e59f019c 	ldr	r0, [pc, #412]	; 49e44 <USBKeyboardDeviceConfigure+0x200>
   49ca4:	e59f119c 	ldr	r1, [pc, #412]	; 49e48 <USBKeyboardDeviceConfigure+0x204>
   49ca8:	e3a02072 	mov	r2, #114	; 0x72
   49cac:	ebffb465 	bl	36e48 <uspi_assertion_failed>
   49cb0:	e3a00018 	mov	r0, #24
   49cb4:	ebffb43c 	bl	36dac <malloc>
   49cb8:	e3500000 	cmp	r0, #0
   49cbc:	e5850010 	str	r0, [r5, #16]
   49cc0:	11a06000 	movne	r6, r0
   49cc4:	0a000058 	beq	49e2c <USBKeyboardDeviceConfigure+0x1e8>
   49cc8:	e1a00005 	mov	r0, r5
   49ccc:	ebffedf3 	bl	454a0 <USBFunctionGetDevice>
   49cd0:	e1a02004 	mov	r2, r4
   49cd4:	e1a01000 	mov	r1, r0
   49cd8:	e1a00006 	mov	r0, r6
   49cdc:	ebffe657 	bl	43640 <USBEndpoint2>
   49ce0:	e5954010 	ldr	r4, [r5, #16]
   49ce4:	e1a00005 	mov	r0, r5
   49ce8:	e3540000 	cmp	r4, #0
   49cec:	0a000046 	beq	49e0c <USBKeyboardDeviceConfigure+0x1c8>
   49cf0:	ebffee2c 	bl	455a8 <USBFunctionConfigure>
   49cf4:	e2504000 	subs	r4, r0, #0
   49cf8:	0a000031 	beq	49dc4 <USBKeyboardDeviceConfigure+0x180>
   49cfc:	e1a00005 	mov	r0, r5
   49d00:	ebffee11 	bl	4554c <USBFunctionGetHost>
   49d04:	e1a07000 	mov	r7, r0
   49d08:	e1a00005 	mov	r0, r5
   49d0c:	ebffedf7 	bl	454f0 <USBFunctionGetEndpoint0>
   49d10:	e1a06000 	mov	r6, r0
   49d14:	e1a00005 	mov	r0, r5
   49d18:	ebffeed4 	bl	45870 <USBFunctionGetInterfaceNumber>
   49d1c:	e3a04000 	mov	r4, #0
   49d20:	e6ff0070 	uxth	r0, r0
   49d24:	e58d0004 	str	r0, [sp, #4]
   49d28:	e1a01006 	mov	r1, r6
   49d2c:	e1a00007 	mov	r0, r7
   49d30:	e58d4000 	str	r4, [sp]
   49d34:	e58d4008 	str	r4, [sp, #8]
   49d38:	e58d400c 	str	r4, [sp, #12]
   49d3c:	e3a02021 	mov	r2, #33	; 0x21
   49d40:	e3a0300b 	mov	r3, #11
   49d44:	ebffd6ab 	bl	3f7f8 <DWHCIDeviceControlMessage>
   49d48:	e1500004 	cmp	r0, r4
   49d4c:	ba000029 	blt	49df8 <USBKeyboardDeviceConfigure+0x1b4>
   49d50:	e5d51460 	ldrb	r1, [r5, #1120]	; 0x460
   49d54:	e1a00005 	mov	r0, r5
   49d58:	ebffff8c 	bl	49b90 <USBKeyboardDeviceSetLEDs>
   49d5c:	e28d0014 	add	r0, sp, #20
   49d60:	ebfff638 	bl	47648 <String>
   49d64:	e59f30e0 	ldr	r3, [pc, #224]	; 49e4c <USBKeyboardDeviceConfigure+0x208>
   49d68:	e59f10e0 	ldr	r1, [pc, #224]	; 49e50 <USBKeyboardDeviceConfigure+0x20c>
   49d6c:	e5932000 	ldr	r2, [r3]
   49d70:	e28d0014 	add	r0, sp, #20
   49d74:	e282c001 	add	ip, r2, #1
   49d78:	e583c000 	str	ip, [r3]
   49d7c:	ebfff8b1 	bl	48048 <StringFormat>
   49d80:	ebffebf5 	bl	44d5c <DeviceNameServiceGet>
   49d84:	e1a06000 	mov	r6, r0
   49d88:	e28d0014 	add	r0, sp, #20
   49d8c:	ebfff660 	bl	47714 <StringGet>
   49d90:	e1a03004 	mov	r3, r4
   49d94:	e1a01000 	mov	r1, r0
   49d98:	e1a02005 	mov	r2, r5
   49d9c:	e1a00006 	mov	r0, r6
   49da0:	ebffeb7c 	bl	44b98 <DeviceNameServiceAddDevice>
   49da4:	e28d0014 	add	r0, sp, #20
   49da8:	ebfff648 	bl	476d0 <_String>
   49dac:	e1a00005 	mov	r0, r5
   49db0:	ebfffe2a 	bl	49660 <USBKeyboardDeviceStartRequest>
   49db4:	e1a04000 	mov	r4, r0
   49db8:	e1a00004 	mov	r0, r4
   49dbc:	e28dd024 	add	sp, sp, #36	; 0x24
   49dc0:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   49dc4:	e59f0088 	ldr	r0, [pc, #136]	; 49e54 <USBKeyboardDeviceConfigure+0x210>
   49dc8:	e3a01001 	mov	r1, #1
   49dcc:	e59f2084 	ldr	r2, [pc, #132]	; 49e58 <USBKeyboardDeviceConfigure+0x214>
   49dd0:	ebff68e8 	bl	24178 <LogWrite>
   49dd4:	e1a00004 	mov	r0, r4
   49dd8:	e28dd024 	add	sp, sp, #36	; 0x24
   49ddc:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   49de0:	e1a00005 	mov	r0, r5
   49de4:	e59f1068 	ldr	r1, [pc, #104]	; 49e54 <USBKeyboardDeviceConfigure+0x210>
   49de8:	ebffee3e 	bl	456e8 <USBFunctionConfigurationError>
   49dec:	e1a00004 	mov	r0, r4
   49df0:	e28dd024 	add	sp, sp, #36	; 0x24
   49df4:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   49df8:	e59f0054 	ldr	r0, [pc, #84]	; 49e54 <USBKeyboardDeviceConfigure+0x210>
   49dfc:	e3a01001 	mov	r1, #1
   49e00:	e59f2054 	ldr	r2, [pc, #84]	; 49e5c <USBKeyboardDeviceConfigure+0x218>
   49e04:	ebff68db 	bl	24178 <LogWrite>
   49e08:	eaffffea 	b	49db8 <USBKeyboardDeviceConfigure+0x174>
   49e0c:	e59f1040 	ldr	r1, [pc, #64]	; 49e54 <USBKeyboardDeviceConfigure+0x210>
   49e10:	ebffee34 	bl	456e8 <USBFunctionConfigurationError>
   49e14:	eaffffe7 	b	49db8 <USBKeyboardDeviceConfigure+0x174>
   49e18:	e59f0040 	ldr	r0, [pc, #64]	; 49e60 <USBKeyboardDeviceConfigure+0x21c>
   49e1c:	e59f1024 	ldr	r1, [pc, #36]	; 49e48 <USBKeyboardDeviceConfigure+0x204>
   49e20:	e3a0205f 	mov	r2, #95	; 0x5f
   49e24:	ebffb407 	bl	36e48 <uspi_assertion_failed>
   49e28:	eaffff89 	b	49c54 <USBKeyboardDeviceConfigure+0x10>
   49e2c:	e59f0030 	ldr	r0, [pc, #48]	; 49e64 <USBKeyboardDeviceConfigure+0x220>
   49e30:	e59f1010 	ldr	r1, [pc, #16]	; 49e48 <USBKeyboardDeviceConfigure+0x204>
   49e34:	e3a02074 	mov	r2, #116	; 0x74
   49e38:	ebffb402 	bl	36e48 <uspi_assertion_failed>
   49e3c:	e5956010 	ldr	r6, [r5, #16]
   49e40:	eaffffa0 	b	49cc8 <USBKeyboardDeviceConfigure+0x84>
   49e44:	00057d44 	.word	0x00057d44
   49e48:	00057c68 	.word	0x00057c68
   49e4c:	0006f524 	.word	0x0006f524
   49e50:	00057d80 	.word	0x00057d80
   49e54:	00057c60 	.word	0x00057c60
   49e58:	00057470 	.word	0x00057470
   49e5c:	00057d64 	.word	0x00057d64
   49e60:	00056434 	.word	0x00056434
   49e64:	00057c78 	.word	0x00057c78

00049e68 <USBKeyboardDeviceUpdateLEDs>:
   49e68:	e92d4038 	push	{r3, r4, r5, lr}
   49e6c:	e2504000 	subs	r4, r0, #0
   49e70:	0a00000a 	beq	49ea0 <USBKeyboardDeviceUpdateLEDs+0x38>
   49e74:	e2840054 	add	r0, r4, #84	; 0x54
   49e78:	eb000b4a 	bl	4cba8 <KeyMapGetLEDStatus>
   49e7c:	e5d43460 	ldrb	r3, [r4, #1120]	; 0x460
   49e80:	e1a05000 	mov	r5, r0
   49e84:	e1530000 	cmp	r3, r0
   49e88:	08bd8038 	popeq	{r3, r4, r5, pc}
   49e8c:	e1a00004 	mov	r0, r4
   49e90:	e1a01005 	mov	r1, r5
   49e94:	ebffff3d 	bl	49b90 <USBKeyboardDeviceSetLEDs>
   49e98:	e5c45460 	strb	r5, [r4, #1120]	; 0x460
   49e9c:	e8bd8038 	pop	{r3, r4, r5, pc}
   49ea0:	e59f000c 	ldr	r0, [pc, #12]	; 49eb4 <USBKeyboardDeviceUpdateLEDs+0x4c>
   49ea4:	e59f100c 	ldr	r1, [pc, #12]	; 49eb8 <USBKeyboardDeviceUpdateLEDs+0x50>
   49ea8:	e3a020b7 	mov	r2, #183	; 0xb7
   49eac:	ebffb3e5 	bl	36e48 <uspi_assertion_failed>
   49eb0:	eaffffef 	b	49e74 <USBKeyboardDeviceUpdateLEDs+0xc>
   49eb4:	00056434 	.word	0x00056434
   49eb8:	00057c68 	.word	0x00057c68

00049ebc <DWHCIRootPort>:
   49ebc:	e92d4038 	push	{r3, r4, r5, lr}
   49ec0:	e2504000 	subs	r4, r0, #0
   49ec4:	e1a05001 	mov	r5, r1
   49ec8:	0a000009 	beq	49ef4 <DWHCIRootPort+0x38>
   49ecc:	e3a03000 	mov	r3, #0
   49ed0:	e1550003 	cmp	r5, r3
   49ed4:	e5845000 	str	r5, [r4]
   49ed8:	e5843004 	str	r3, [r4, #4]
   49edc:	18bd8038 	popne	{r3, r4, r5, pc}
   49ee0:	e59f0020 	ldr	r0, [pc, #32]	; 49f08 <DWHCIRootPort+0x4c>
   49ee4:	e59f1020 	ldr	r1, [pc, #32]	; 49f0c <DWHCIRootPort+0x50>
   49ee8:	e3a02024 	mov	r2, #36	; 0x24
   49eec:	e8bd4038 	pop	{r3, r4, r5, lr}
   49ef0:	eaffb3d4 	b	36e48 <uspi_assertion_failed>
   49ef4:	e59f0014 	ldr	r0, [pc, #20]	; 49f10 <DWHCIRootPort+0x54>
   49ef8:	e59f100c 	ldr	r1, [pc, #12]	; 49f0c <DWHCIRootPort+0x50>
   49efc:	e3a0201f 	mov	r2, #31
   49f00:	ebffb3d0 	bl	36e48 <uspi_assertion_failed>
   49f04:	eafffff0 	b	49ecc <DWHCIRootPort+0x10>
   49f08:	00056b84 	.word	0x00056b84
   49f0c:	00057d90 	.word	0x00057d90
   49f10:	00056434 	.word	0x00056434

00049f14 <_DWHCIRootPort>:
   49f14:	e92d4010 	push	{r4, lr}
   49f18:	e2504000 	subs	r4, r0, #0
   49f1c:	0a00000a 	beq	49f4c <_DWHCIRootPort+0x38>
   49f20:	e5940004 	ldr	r0, [r4, #4]
   49f24:	e3500000 	cmp	r0, #0
   49f28:	0a000004 	beq	49f40 <_DWHCIRootPort+0x2c>
   49f2c:	ebffe0d3 	bl	42280 <_USBDevice>
   49f30:	e5940004 	ldr	r0, [r4, #4]
   49f34:	ebffb39d 	bl	36db0 <free>
   49f38:	e3a03000 	mov	r3, #0
   49f3c:	e5843004 	str	r3, [r4, #4]
   49f40:	e3a03000 	mov	r3, #0
   49f44:	e5843000 	str	r3, [r4]
   49f48:	e8bd8010 	pop	{r4, pc}
   49f4c:	e59f000c 	ldr	r0, [pc, #12]	; 49f60 <_DWHCIRootPort+0x4c>
   49f50:	e59f100c 	ldr	r1, [pc, #12]	; 49f64 <_DWHCIRootPort+0x50>
   49f54:	e3a02029 	mov	r2, #41	; 0x29
   49f58:	ebffb3ba 	bl	36e48 <uspi_assertion_failed>
   49f5c:	eaffffef 	b	49f20 <_DWHCIRootPort+0xc>
   49f60:	00056434 	.word	0x00056434
   49f64:	00057d90 	.word	0x00057d90

00049f68 <DWHCIRootPortInitialize>:
   49f68:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   49f6c:	e2504000 	subs	r4, r0, #0
   49f70:	e24dd00c 	sub	sp, sp, #12
   49f74:	0a000052 	beq	4a0c4 <DWHCIRootPortInitialize+0x15c>
   49f78:	e5940000 	ldr	r0, [r4]
   49f7c:	e3500000 	cmp	r0, #0
   49f80:	0a000049 	beq	4a0ac <DWHCIRootPortInitialize+0x144>
   49f84:	ebffdad8 	bl	40aec <DWHCIDeviceGetPortSpeed>
   49f88:	e3500003 	cmp	r0, #3
   49f8c:	e1a05000 	mov	r5, r0
   49f90:	0a00003f 	beq	4a094 <DWHCIRootPortInitialize+0x12c>
   49f94:	e5943004 	ldr	r3, [r4, #4]
   49f98:	e3530000 	cmp	r3, #0
   49f9c:	0a000003 	beq	49fb0 <DWHCIRootPortInitialize+0x48>
   49fa0:	e59f0148 	ldr	r0, [pc, #328]	; 4a0f0 <DWHCIRootPortInitialize+0x188>
   49fa4:	e59f1148 	ldr	r1, [pc, #328]	; 4a0f4 <DWHCIRootPortInitialize+0x18c>
   49fa8:	e3a02043 	mov	r2, #67	; 0x43
   49fac:	ebffb3a5 	bl	36e48 <uspi_assertion_failed>
   49fb0:	e3a00060 	mov	r0, #96	; 0x60
   49fb4:	ebffb37c 	bl	36dac <malloc>
   49fb8:	e3500000 	cmp	r0, #0
   49fbc:	e5840004 	str	r0, [r4, #4]
   49fc0:	0a000044 	beq	4a0d8 <DWHCIRootPortInitialize+0x170>
   49fc4:	e3a06000 	mov	r6, #0
   49fc8:	e3a07001 	mov	r7, #1
   49fcc:	e5941000 	ldr	r1, [r4]
   49fd0:	e1a02005 	mov	r2, r5
   49fd4:	e1a03006 	mov	r3, r6
   49fd8:	e58d6000 	str	r6, [sp]
   49fdc:	e58d7004 	str	r7, [sp, #4]
   49fe0:	ebffe056 	bl	42140 <USBDevice>
   49fe4:	e5940004 	ldr	r0, [r4, #4]
   49fe8:	ebffe2a4 	bl	42a80 <USBDeviceInitialize>
   49fec:	e2505000 	subs	r5, r0, #0
   49ff0:	e5940004 	ldr	r0, [r4, #4]
   49ff4:	0a00001f 	beq	4a078 <DWHCIRootPortInitialize+0x110>
   49ff8:	ebffe468 	bl	431a0 <USBDeviceConfigure>
   49ffc:	e2505000 	subs	r5, r0, #0
   4a000:	0a000017 	beq	4a064 <DWHCIRootPortInitialize+0xfc>
   4a004:	e59f00ec 	ldr	r0, [pc, #236]	; 4a0f8 <DWHCIRootPortInitialize+0x190>
   4a008:	e3a01004 	mov	r1, #4
   4a00c:	e59f20e8 	ldr	r2, [pc, #232]	; 4a0fc <DWHCIRootPortInitialize+0x194>
   4a010:	ebff6858 	bl	24178 <LogWrite>
   4a014:	e5940000 	ldr	r0, [r4]
   4a018:	ebffdad2 	bl	40b68 <DWHCIDeviceOvercurrentDetected>
   4a01c:	e3500000 	cmp	r0, #0
   4a020:	01a05007 	moveq	r5, r7
   4a024:	0a000017 	beq	4a088 <DWHCIRootPortInitialize+0x120>
   4a028:	e1a05006 	mov	r5, r6
   4a02c:	e1a01007 	mov	r1, r7
   4a030:	e59f20c8 	ldr	r2, [pc, #200]	; 4a100 <DWHCIRootPortInitialize+0x198>
   4a034:	e59f00bc 	ldr	r0, [pc, #188]	; 4a0f8 <DWHCIRootPortInitialize+0x190>
   4a038:	ebff684e 	bl	24178 <LogWrite>
   4a03c:	e5940000 	ldr	r0, [r4]
   4a040:	ebffdae5 	bl	40bdc <DWHCIDeviceDisableRootPort>
   4a044:	e5940004 	ldr	r0, [r4, #4]
   4a048:	ebffe08c 	bl	42280 <_USBDevice>
   4a04c:	e5940004 	ldr	r0, [r4, #4]
   4a050:	ebffb356 	bl	36db0 <free>
   4a054:	e1a00005 	mov	r0, r5
   4a058:	e5846004 	str	r6, [r4, #4]
   4a05c:	e28dd00c 	add	sp, sp, #12
   4a060:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   4a064:	e59f008c 	ldr	r0, [pc, #140]	; 4a0f8 <DWHCIRootPortInitialize+0x190>
   4a068:	e1a01007 	mov	r1, r7
   4a06c:	e59f2090 	ldr	r2, [pc, #144]	; 4a104 <DWHCIRootPortInitialize+0x19c>
   4a070:	ebff6840 	bl	24178 <LogWrite>
   4a074:	e5940004 	ldr	r0, [r4, #4]
   4a078:	ebffe080 	bl	42280 <_USBDevice>
   4a07c:	e5940004 	ldr	r0, [r4, #4]
   4a080:	ebffb34a 	bl	36db0 <free>
   4a084:	e5845004 	str	r5, [r4, #4]
   4a088:	e1a00005 	mov	r0, r5
   4a08c:	e28dd00c 	add	sp, sp, #12
   4a090:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   4a094:	e59f005c 	ldr	r0, [pc, #92]	; 4a0f8 <DWHCIRootPortInitialize+0x190>
   4a098:	e3a01001 	mov	r1, #1
   4a09c:	e59f2064 	ldr	r2, [pc, #100]	; 4a108 <DWHCIRootPortInitialize+0x1a0>
   4a0a0:	ebff6834 	bl	24178 <LogWrite>
   4a0a4:	e3a05000 	mov	r5, #0
   4a0a8:	eafffff6 	b	4a088 <DWHCIRootPortInitialize+0x120>
   4a0ac:	e59f0058 	ldr	r0, [pc, #88]	; 4a10c <DWHCIRootPortInitialize+0x1a4>
   4a0b0:	e59f103c 	ldr	r1, [pc, #60]	; 4a0f4 <DWHCIRootPortInitialize+0x18c>
   4a0b4:	e3a02039 	mov	r2, #57	; 0x39
   4a0b8:	ebffb362 	bl	36e48 <uspi_assertion_failed>
   4a0bc:	e5940000 	ldr	r0, [r4]
   4a0c0:	eaffffaf 	b	49f84 <DWHCIRootPortInitialize+0x1c>
   4a0c4:	e59f0044 	ldr	r0, [pc, #68]	; 4a110 <DWHCIRootPortInitialize+0x1a8>
   4a0c8:	e59f1024 	ldr	r1, [pc, #36]	; 4a0f4 <DWHCIRootPortInitialize+0x18c>
   4a0cc:	e3a02037 	mov	r2, #55	; 0x37
   4a0d0:	ebffb35c 	bl	36e48 <uspi_assertion_failed>
   4a0d4:	eaffffa7 	b	49f78 <DWHCIRootPortInitialize+0x10>
   4a0d8:	e59f0034 	ldr	r0, [pc, #52]	; 4a114 <DWHCIRootPortInitialize+0x1ac>
   4a0dc:	e59f1010 	ldr	r1, [pc, #16]	; 4a0f4 <DWHCIRootPortInitialize+0x18c>
   4a0e0:	e3a02045 	mov	r2, #69	; 0x45
   4a0e4:	ebffb357 	bl	36e48 <uspi_assertion_failed>
   4a0e8:	e5940004 	ldr	r0, [r4, #4]
   4a0ec:	eaffffb4 	b	49fc4 <DWHCIRootPortInitialize+0x5c>
   4a0f0:	00057dbc 	.word	0x00057dbc
   4a0f4:	00057d90 	.word	0x00057d90
   4a0f8:	00057d88 	.word	0x00057d88
   4a0fc:	00057dec 	.word	0x00057dec
   4a100:	00057e00 	.word	0x00057e00
   4a104:	00057dd4 	.word	0x00057dd4
   4a108:	00057da0 	.word	0x00057da0
   4a10c:	00056b84 	.word	0x00056b84
   4a110:	00056434 	.word	0x00056434
   4a114:	00056ae4 	.word	0x00056ae4

0004a118 <USBMouseDeviceStartRequest>:
   4a118:	e92d4070 	push	{r4, r5, r6, lr}
   4a11c:	e2504000 	subs	r4, r0, #0
   4a120:	e24dd008 	sub	sp, sp, #8
   4a124:	0a00001d 	beq	4a1a0 <USBMouseDeviceStartRequest+0x88>
   4a128:	e5943010 	ldr	r3, [r4, #16]
   4a12c:	e3530000 	cmp	r3, #0
   4a130:	0a00001f 	beq	4a1b4 <USBMouseDeviceStartRequest+0x9c>
   4a134:	e5942044 	ldr	r2, [r4, #68]	; 0x44
   4a138:	e3520000 	cmp	r2, #0
   4a13c:	0a000011 	beq	4a188 <USBMouseDeviceStartRequest+0x70>
   4a140:	e3a06000 	mov	r6, #0
   4a144:	e2845020 	add	r5, r4, #32
   4a148:	e5941010 	ldr	r1, [r4, #16]
   4a14c:	e1a00005 	mov	r0, r5
   4a150:	e58d6000 	str	r6, [sp]
   4a154:	e3a03003 	mov	r3, #3
   4a158:	ebffe6b4 	bl	43c30 <USBRequest>
   4a15c:	e1a00005 	mov	r0, r5
   4a160:	e1a02006 	mov	r2, r6
   4a164:	e59f105c 	ldr	r1, [pc, #92]	; 4a1c8 <USBMouseDeviceStartRequest+0xb0>
   4a168:	e1a03004 	mov	r3, r4
   4a16c:	ebffe782 	bl	43f7c <USBRequestSetCompletionRoutine>
   4a170:	e1a00004 	mov	r0, r4
   4a174:	ebffecf4 	bl	4554c <USBFunctionGetHost>
   4a178:	e1a01005 	mov	r1, r5
   4a17c:	e28dd008 	add	sp, sp, #8
   4a180:	e8bd4070 	pop	{r4, r5, r6, lr}
   4a184:	eaffd490 	b	3f3cc <DWHCIDeviceSubmitAsyncRequest>
   4a188:	e3a020b7 	mov	r2, #183	; 0xb7
   4a18c:	e59f0038 	ldr	r0, [pc, #56]	; 4a1cc <USBMouseDeviceStartRequest+0xb4>
   4a190:	e59f1038 	ldr	r1, [pc, #56]	; 4a1d0 <USBMouseDeviceStartRequest+0xb8>
   4a194:	ebffb32b 	bl	36e48 <uspi_assertion_failed>
   4a198:	e5942044 	ldr	r2, [r4, #68]	; 0x44
   4a19c:	eaffffe7 	b	4a140 <USBMouseDeviceStartRequest+0x28>
   4a1a0:	e59f002c 	ldr	r0, [pc, #44]	; 4a1d4 <USBMouseDeviceStartRequest+0xbc>
   4a1a4:	e59f1024 	ldr	r1, [pc, #36]	; 4a1d0 <USBMouseDeviceStartRequest+0xb8>
   4a1a8:	e3a020b4 	mov	r2, #180	; 0xb4
   4a1ac:	ebffb325 	bl	36e48 <uspi_assertion_failed>
   4a1b0:	eaffffdc 	b	4a128 <USBMouseDeviceStartRequest+0x10>
   4a1b4:	e59f001c 	ldr	r0, [pc, #28]	; 4a1d8 <USBMouseDeviceStartRequest+0xc0>
   4a1b8:	e59f1010 	ldr	r1, [pc, #16]	; 4a1d0 <USBMouseDeviceStartRequest+0xb8>
   4a1bc:	e3a020b6 	mov	r2, #182	; 0xb6
   4a1c0:	ebffb320 	bl	36e48 <uspi_assertion_failed>
   4a1c4:	eaffffda 	b	4a134 <USBMouseDeviceStartRequest+0x1c>
   4a1c8:	0004a4d8 	.word	0x0004a4d8
   4a1cc:	00057c98 	.word	0x00057c98
   4a1d0:	00057e20 	.word	0x00057e20
   4a1d4:	00056434 	.word	0x00056434
   4a1d8:	00057c78 	.word	0x00057c78

0004a1dc <USBMouseDeviceConfigure>:
   4a1dc:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   4a1e0:	e2504000 	subs	r4, r0, #0
   4a1e4:	e24dd020 	sub	sp, sp, #32
   4a1e8:	0a000095 	beq	4a444 <USBMouseDeviceConfigure+0x268>
   4a1ec:	e1a00004 	mov	r0, r4
   4a1f0:	ebffec93 	bl	45444 <USBFunctionGetNumEndpoints>
   4a1f4:	e2505000 	subs	r5, r0, #0
   4a1f8:	e1a00004 	mov	r0, r4
   4a1fc:	0a00005a 	beq	4a36c <USBMouseDeviceConfigure+0x190>
   4a200:	e3a01021 	mov	r1, #33	; 0x21
   4a204:	ebffed1d 	bl	45680 <USBFunctionGetDescriptor>
   4a208:	e2506000 	subs	r6, r0, #0
   4a20c:	0a00004e 	beq	4a34c <USBMouseDeviceConfigure+0x170>
   4a210:	e5d63007 	ldrb	r3, [r6, #7]
   4a214:	e5d62008 	ldrb	r2, [r6, #8]
   4a218:	e1933402 	orrs	r3, r3, r2, lsl #8
   4a21c:	0a00004a 	beq	4a34c <USBMouseDeviceConfigure+0x170>
   4a220:	e1a00004 	mov	r0, r4
   4a224:	e3a01005 	mov	r1, #5
   4a228:	ebffed14 	bl	45680 <USBFunctionGetDescriptor>
   4a22c:	e2505000 	subs	r5, r0, #0
   4a230:	0a000019 	beq	4a29c <USBMouseDeviceConfigure+0xc0>
   4a234:	e1d530d2 	ldrsb	r3, [r5, #2]
   4a238:	e3530000 	cmp	r3, #0
   4a23c:	aafffff7 	bge	4a220 <USBMouseDeviceConfigure+0x44>
   4a240:	e5d53003 	ldrb	r3, [r5, #3]
   4a244:	e203303f 	and	r3, r3, #63	; 0x3f
   4a248:	e3530003 	cmp	r3, #3
   4a24c:	1afffff3 	bne	4a220 <USBMouseDeviceConfigure+0x44>
   4a250:	e5943010 	ldr	r3, [r4, #16]
   4a254:	e3530000 	cmp	r3, #0
   4a258:	0a000003 	beq	4a26c <USBMouseDeviceConfigure+0x90>
   4a25c:	e59f0248 	ldr	r0, [pc, #584]	; 4a4ac <USBMouseDeviceConfigure+0x2d0>
   4a260:	e59f1248 	ldr	r1, [pc, #584]	; 4a4b0 <USBMouseDeviceConfigure+0x2d4>
   4a264:	e3a0206e 	mov	r2, #110	; 0x6e
   4a268:	ebffb2f6 	bl	36e48 <uspi_assertion_failed>
   4a26c:	e3a00018 	mov	r0, #24
   4a270:	ebffb2cd 	bl	36dac <malloc>
   4a274:	e3500000 	cmp	r0, #0
   4a278:	e5840010 	str	r0, [r4, #16]
   4a27c:	11a07000 	movne	r7, r0
   4a280:	0a00007e 	beq	4a480 <USBMouseDeviceConfigure+0x2a4>
   4a284:	e1a00004 	mov	r0, r4
   4a288:	ebffec84 	bl	454a0 <USBFunctionGetDevice>
   4a28c:	e1a02005 	mov	r2, r5
   4a290:	e1a01000 	mov	r1, r0
   4a294:	e1a00007 	mov	r0, r7
   4a298:	ebffe4e8 	bl	43640 <USBEndpoint2>
   4a29c:	e5945010 	ldr	r5, [r4, #16]
   4a2a0:	e3550000 	cmp	r5, #0
   4a2a4:	0a00002f 	beq	4a368 <USBMouseDeviceConfigure+0x18c>
   4a2a8:	e5d63007 	ldrb	r3, [r6, #7]
   4a2ac:	e5d60008 	ldrb	r0, [r6, #8]
   4a2b0:	e1830400 	orr	r0, r3, r0, lsl #8
   4a2b4:	e1c401b8 	strh	r0, [r4, #24]
   4a2b8:	ebffb2bb 	bl	36dac <malloc>
   4a2bc:	e3500000 	cmp	r0, #0
   4a2c0:	e584001c 	str	r0, [r4, #28]
   4a2c4:	0a000068 	beq	4a46c <USBMouseDeviceConfigure+0x290>
   4a2c8:	e1a00004 	mov	r0, r4
   4a2cc:	ebffec9e 	bl	4554c <USBFunctionGetHost>
   4a2d0:	e1a08000 	mov	r8, r0
   4a2d4:	e1a00004 	mov	r0, r4
   4a2d8:	ebffec84 	bl	454f0 <USBFunctionGetEndpoint0>
   4a2dc:	e1a07000 	mov	r7, r0
   4a2e0:	e1a00004 	mov	r0, r4
   4a2e4:	e5d65006 	ldrb	r5, [r6, #6]
   4a2e8:	ebffed60 	bl	45870 <USBFunctionGetInterfaceNumber>
   4a2ec:	e1a05405 	lsl	r5, r5, #8
   4a2f0:	e6ff0070 	uxth	r0, r0
   4a2f4:	e58d0004 	str	r0, [sp, #4]
   4a2f8:	e58d5000 	str	r5, [sp]
   4a2fc:	e594301c 	ldr	r3, [r4, #28]
   4a300:	e1a00008 	mov	r0, r8
   4a304:	e58d3008 	str	r3, [sp, #8]
   4a308:	e1d431b8 	ldrh	r3, [r4, #24]
   4a30c:	e1a01007 	mov	r1, r7
   4a310:	e58d300c 	str	r3, [sp, #12]
   4a314:	e3a02081 	mov	r2, #129	; 0x81
   4a318:	e3a03006 	mov	r3, #6
   4a31c:	ebffd535 	bl	3f7f8 <DWHCIDeviceControlMessage>
   4a320:	e1d431b8 	ldrh	r3, [r4, #24]
   4a324:	e1500003 	cmp	r0, r3
   4a328:	0a000014 	beq	4a380 <USBMouseDeviceConfigure+0x1a4>
   4a32c:	e3a05000 	mov	r5, #0
   4a330:	e59f017c 	ldr	r0, [pc, #380]	; 4a4b4 <USBMouseDeviceConfigure+0x2d8>
   4a334:	e3a01001 	mov	r1, #1
   4a338:	e59f2178 	ldr	r2, [pc, #376]	; 4a4b8 <USBMouseDeviceConfigure+0x2dc>
   4a33c:	ebff678d 	bl	24178 <LogWrite>
   4a340:	e1a00005 	mov	r0, r5
   4a344:	e28dd020 	add	sp, sp, #32
   4a348:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   4a34c:	e1a00004 	mov	r0, r4
   4a350:	e59f115c 	ldr	r1, [pc, #348]	; 4a4b4 <USBMouseDeviceConfigure+0x2d8>
   4a354:	ebffece3 	bl	456e8 <USBFunctionConfigurationError>
   4a358:	e3a05000 	mov	r5, #0
   4a35c:	e1a00005 	mov	r0, r5
   4a360:	e28dd020 	add	sp, sp, #32
   4a364:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   4a368:	e1a00004 	mov	r0, r4
   4a36c:	e59f1140 	ldr	r1, [pc, #320]	; 4a4b4 <USBMouseDeviceConfigure+0x2d8>
   4a370:	ebffecdc 	bl	456e8 <USBFunctionConfigurationError>
   4a374:	e1a00005 	mov	r0, r5
   4a378:	e28dd020 	add	sp, sp, #32
   4a37c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   4a380:	e1a00004 	mov	r0, r4
   4a384:	ebffec87 	bl	455a8 <USBFunctionConfigure>
   4a388:	e2505000 	subs	r5, r0, #0
   4a38c:	0a000031 	beq	4a458 <USBMouseDeviceConfigure+0x27c>
   4a390:	e1a00004 	mov	r0, r4
   4a394:	ebffec6c 	bl	4554c <USBFunctionGetHost>
   4a398:	e1a07000 	mov	r7, r0
   4a39c:	e1a00004 	mov	r0, r4
   4a3a0:	ebffec52 	bl	454f0 <USBFunctionGetEndpoint0>
   4a3a4:	e1a06000 	mov	r6, r0
   4a3a8:	e1a00004 	mov	r0, r4
   4a3ac:	ebffed2f 	bl	45870 <USBFunctionGetInterfaceNumber>
   4a3b0:	e3a05000 	mov	r5, #0
   4a3b4:	e6ff0070 	uxth	r0, r0
   4a3b8:	e58d0004 	str	r0, [sp, #4]
   4a3bc:	e1a01006 	mov	r1, r6
   4a3c0:	e1a00007 	mov	r0, r7
   4a3c4:	e58d5000 	str	r5, [sp]
   4a3c8:	e58d5008 	str	r5, [sp, #8]
   4a3cc:	e58d500c 	str	r5, [sp, #12]
   4a3d0:	e3a02021 	mov	r2, #33	; 0x21
   4a3d4:	e3a0300b 	mov	r3, #11
   4a3d8:	ebffd506 	bl	3f7f8 <DWHCIDeviceControlMessage>
   4a3dc:	e1500005 	cmp	r0, r5
   4a3e0:	ba00002c 	blt	4a498 <USBMouseDeviceConfigure+0x2bc>
   4a3e4:	e28d0014 	add	r0, sp, #20
   4a3e8:	ebfff496 	bl	47648 <String>
   4a3ec:	e59f30c8 	ldr	r3, [pc, #200]	; 4a4bc <USBMouseDeviceConfigure+0x2e0>
   4a3f0:	e59f10c8 	ldr	r1, [pc, #200]	; 4a4c0 <USBMouseDeviceConfigure+0x2e4>
   4a3f4:	e5932000 	ldr	r2, [r3]
   4a3f8:	e28d0014 	add	r0, sp, #20
   4a3fc:	e282c001 	add	ip, r2, #1
   4a400:	e583c000 	str	ip, [r3]
   4a404:	ebfff70f 	bl	48048 <StringFormat>
   4a408:	ebffea53 	bl	44d5c <DeviceNameServiceGet>
   4a40c:	e1a06000 	mov	r6, r0
   4a410:	e28d0014 	add	r0, sp, #20
   4a414:	ebfff4be 	bl	47714 <StringGet>
   4a418:	e1a03005 	mov	r3, r5
   4a41c:	e1a01000 	mov	r1, r0
   4a420:	e1a02004 	mov	r2, r4
   4a424:	e1a00006 	mov	r0, r6
   4a428:	ebffe9da 	bl	44b98 <DeviceNameServiceAddDevice>
   4a42c:	e28d0014 	add	r0, sp, #20
   4a430:	ebfff4a6 	bl	476d0 <_String>
   4a434:	e1a00004 	mov	r0, r4
   4a438:	ebffff36 	bl	4a118 <USBMouseDeviceStartRequest>
   4a43c:	e1a05000 	mov	r5, r0
   4a440:	eaffffc5 	b	4a35c <USBMouseDeviceConfigure+0x180>
   4a444:	e59f0078 	ldr	r0, [pc, #120]	; 4a4c4 <USBMouseDeviceConfigure+0x2e8>
   4a448:	e59f1060 	ldr	r1, [pc, #96]	; 4a4b0 <USBMouseDeviceConfigure+0x2d4>
   4a44c:	e3a02051 	mov	r2, #81	; 0x51
   4a450:	ebffb27c 	bl	36e48 <uspi_assertion_failed>
   4a454:	eaffff64 	b	4a1ec <USBMouseDeviceConfigure+0x10>
   4a458:	e59f0054 	ldr	r0, [pc, #84]	; 4a4b4 <USBMouseDeviceConfigure+0x2d8>
   4a45c:	e3a01001 	mov	r1, #1
   4a460:	e59f2060 	ldr	r2, [pc, #96]	; 4a4c8 <USBMouseDeviceConfigure+0x2ec>
   4a464:	ebff6743 	bl	24178 <LogWrite>
   4a468:	eaffffbb 	b	4a35c <USBMouseDeviceConfigure+0x180>
   4a46c:	e59f0058 	ldr	r0, [pc, #88]	; 4a4cc <USBMouseDeviceConfigure+0x2f0>
   4a470:	e59f1038 	ldr	r1, [pc, #56]	; 4a4b0 <USBMouseDeviceConfigure+0x2d4>
   4a474:	e3a0207f 	mov	r2, #127	; 0x7f
   4a478:	ebffb272 	bl	36e48 <uspi_assertion_failed>
   4a47c:	eaffff91 	b	4a2c8 <USBMouseDeviceConfigure+0xec>
   4a480:	e59f0048 	ldr	r0, [pc, #72]	; 4a4d0 <USBMouseDeviceConfigure+0x2f4>
   4a484:	e59f1024 	ldr	r1, [pc, #36]	; 4a4b0 <USBMouseDeviceConfigure+0x2d4>
   4a488:	e3a02070 	mov	r2, #112	; 0x70
   4a48c:	ebffb26d 	bl	36e48 <uspi_assertion_failed>
   4a490:	e5947010 	ldr	r7, [r4, #16]
   4a494:	eaffff7a 	b	4a284 <USBMouseDeviceConfigure+0xa8>
   4a498:	e59f0014 	ldr	r0, [pc, #20]	; 4a4b4 <USBMouseDeviceConfigure+0x2d8>
   4a49c:	e3a01001 	mov	r1, #1
   4a4a0:	e59f202c 	ldr	r2, [pc, #44]	; 4a4d4 <USBMouseDeviceConfigure+0x2f8>
   4a4a4:	ebff6733 	bl	24178 <LogWrite>
   4a4a8:	eaffffab 	b	4a35c <USBMouseDeviceConfigure+0x180>
   4a4ac:	00057d44 	.word	0x00057d44
   4a4b0:	00057e20 	.word	0x00057e20
   4a4b4:	00057e18 	.word	0x00057e18
   4a4b8:	00057e50 	.word	0x00057e50
   4a4bc:	0006f528 	.word	0x0006f528
   4a4c0:	00057e74 	.word	0x00057e74
   4a4c4:	00056434 	.word	0x00056434
   4a4c8:	00057470 	.word	0x00057470
   4a4cc:	00057e2c 	.word	0x00057e2c
   4a4d0:	00057c78 	.word	0x00057c78
   4a4d4:	00057d64 	.word	0x00057d64

0004a4d8 <USBMouseDeviceCompletionRoutine>:
   4a4d8:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   4a4dc:	e2525000 	subs	r5, r2, #0
   4a4e0:	e1a04000 	mov	r4, r0
   4a4e4:	0a000027 	beq	4a588 <USBMouseDeviceCompletionRoutine+0xb0>
   4a4e8:	e3540000 	cmp	r4, #0
   4a4ec:	0a00002a 	beq	4a59c <USBMouseDeviceCompletionRoutine+0xc4>
   4a4f0:	e2856020 	add	r6, r5, #32
   4a4f4:	e1560004 	cmp	r6, r4
   4a4f8:	0a000003 	beq	4a50c <USBMouseDeviceCompletionRoutine+0x34>
   4a4fc:	e59f00c8 	ldr	r0, [pc, #200]	; 4a5cc <USBMouseDeviceCompletionRoutine+0xf4>
   4a500:	e59f10c8 	ldr	r1, [pc, #200]	; 4a5d0 <USBMouseDeviceCompletionRoutine+0xf8>
   4a504:	e3a020c5 	mov	r2, #197	; 0xc5
   4a508:	ebffb24e 	bl	36e48 <uspi_assertion_failed>
   4a50c:	e1a00004 	mov	r0, r4
   4a510:	ebffe636 	bl	43df0 <USBRequestGetStatus>
   4a514:	e3500000 	cmp	r0, #0
   4a518:	1a000004 	bne	4a530 <USBMouseDeviceCompletionRoutine+0x58>
   4a51c:	e1a00006 	mov	r0, r6
   4a520:	ebffe5f2 	bl	43cf0 <_USBRequest>
   4a524:	e1a00005 	mov	r0, r5
   4a528:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   4a52c:	eafffef9 	b	4a118 <USBMouseDeviceStartRequest>
   4a530:	e1a00004 	mov	r0, r4
   4a534:	ebffe63a 	bl	43e24 <USBRequestGetResultLength>
   4a538:	e3500003 	cmp	r0, #3
   4a53c:	1afffff6 	bne	4a51c <USBMouseDeviceCompletionRoutine+0x44>
   4a540:	e5954014 	ldr	r4, [r5, #20]
   4a544:	e3540000 	cmp	r4, #0
   4a548:	0afffff3 	beq	4a51c <USBMouseDeviceCompletionRoutine+0x44>
   4a54c:	e5953044 	ldr	r3, [r5, #68]	; 0x44
   4a550:	e3530000 	cmp	r3, #0
   4a554:	0a000015 	beq	4a5b0 <USBMouseDeviceCompletionRoutine+0xd8>
   4a558:	e1d300d1 	ldrsb	r0, [r3, #1]
   4a55c:	e5d38000 	ldrb	r8, [r3]
   4a560:	ebfff755 	bl	482bc <uspi_char2int>
   4a564:	e5953044 	ldr	r3, [r5, #68]	; 0x44
   4a568:	e1a07000 	mov	r7, r0
   4a56c:	e1d300d2 	ldrsb	r0, [r3, #2]
   4a570:	ebfff751 	bl	482bc <uspi_char2int>
   4a574:	e1a01007 	mov	r1, r7
   4a578:	e1a02000 	mov	r2, r0
   4a57c:	e1a00008 	mov	r0, r8
   4a580:	e12fff34 	blx	r4
   4a584:	eaffffe4 	b	4a51c <USBMouseDeviceCompletionRoutine+0x44>
   4a588:	e59f0044 	ldr	r0, [pc, #68]	; 4a5d4 <USBMouseDeviceCompletionRoutine+0xfc>
   4a58c:	e59f103c 	ldr	r1, [pc, #60]	; 4a5d0 <USBMouseDeviceCompletionRoutine+0xf8>
   4a590:	e3a020c2 	mov	r2, #194	; 0xc2
   4a594:	ebffb22b 	bl	36e48 <uspi_assertion_failed>
   4a598:	eaffffd2 	b	4a4e8 <USBMouseDeviceCompletionRoutine+0x10>
   4a59c:	e59f0034 	ldr	r0, [pc, #52]	; 4a5d8 <USBMouseDeviceCompletionRoutine+0x100>
   4a5a0:	e59f1028 	ldr	r1, [pc, #40]	; 4a5d0 <USBMouseDeviceCompletionRoutine+0xf8>
   4a5a4:	e3a020c4 	mov	r2, #196	; 0xc4
   4a5a8:	ebffb226 	bl	36e48 <uspi_assertion_failed>
   4a5ac:	eaffffcf 	b	4a4f0 <USBMouseDeviceCompletionRoutine+0x18>
   4a5b0:	e59f0024 	ldr	r0, [pc, #36]	; 4a5dc <USBMouseDeviceCompletionRoutine+0x104>
   4a5b4:	e59f1014 	ldr	r1, [pc, #20]	; 4a5d0 <USBMouseDeviceCompletionRoutine+0xf8>
   4a5b8:	e3a020cb 	mov	r2, #203	; 0xcb
   4a5bc:	ebffb221 	bl	36e48 <uspi_assertion_failed>
   4a5c0:	e5954014 	ldr	r4, [r5, #20]
   4a5c4:	e5953044 	ldr	r3, [r5, #68]	; 0x44
   4a5c8:	eaffffe2 	b	4a558 <USBMouseDeviceCompletionRoutine+0x80>
   4a5cc:	00057cb4 	.word	0x00057cb4
   4a5d0:	00057e20 	.word	0x00057e20
   4a5d4:	00056434 	.word	0x00056434
   4a5d8:	0005650c 	.word	0x0005650c
   4a5dc:	00057c98 	.word	0x00057c98

0004a5e0 <USBMouseDevice>:
   4a5e0:	e92d4038 	push	{r3, r4, r5, lr}
   4a5e4:	e2504000 	subs	r4, r0, #0
   4a5e8:	e1a05001 	mov	r5, r1
   4a5ec:	0a000015 	beq	4a648 <USBMouseDevice+0x68>
   4a5f0:	e1a01005 	mov	r1, r5
   4a5f4:	e1a00004 	mov	r0, r4
   4a5f8:	ebffeb13 	bl	4524c <USBFunctionCopy>
   4a5fc:	e3a03000 	mov	r3, #0
   4a600:	e59f2054 	ldr	r2, [pc, #84]	; 4a65c <USBMouseDevice+0x7c>
   4a604:	e5843010 	str	r3, [r4, #16]
   4a608:	e5843014 	str	r3, [r4, #20]
   4a60c:	e5843044 	str	r3, [r4, #68]	; 0x44
   4a610:	e5842000 	str	r2, [r4]
   4a614:	e3a00003 	mov	r0, #3
   4a618:	ebffb1e3 	bl	36dac <malloc>
   4a61c:	e3500000 	cmp	r0, #0
   4a620:	e5840044 	str	r0, [r4, #68]	; 0x44
   4a624:	0a000002 	beq	4a634 <USBMouseDevice+0x54>
   4a628:	e3a03000 	mov	r3, #0
   4a62c:	e584301c 	str	r3, [r4, #28]
   4a630:	e8bd8038 	pop	{r3, r4, r5, pc}
   4a634:	e59f0024 	ldr	r0, [pc, #36]	; 4a660 <USBMouseDevice+0x80>
   4a638:	e59f1024 	ldr	r1, [pc, #36]	; 4a664 <USBMouseDevice+0x84>
   4a63c:	e3a0202f 	mov	r2, #47	; 0x2f
   4a640:	ebffb200 	bl	36e48 <uspi_assertion_failed>
   4a644:	eafffff7 	b	4a628 <USBMouseDevice+0x48>
   4a648:	e59f0018 	ldr	r0, [pc, #24]	; 4a668 <USBMouseDevice+0x88>
   4a64c:	e59f1010 	ldr	r1, [pc, #16]	; 4a664 <USBMouseDevice+0x84>
   4a650:	e3a02025 	mov	r2, #37	; 0x25
   4a654:	ebffb1fb 	bl	36e48 <uspi_assertion_failed>
   4a658:	eaffffe4 	b	4a5f0 <USBMouseDevice+0x10>
   4a65c:	0004a1dc 	.word	0x0004a1dc
   4a660:	00057c98 	.word	0x00057c98
   4a664:	00057e20 	.word	0x00057e20
   4a668:	00056434 	.word	0x00056434

0004a66c <_CUSBMouseDevice>:
   4a66c:	e92d4010 	push	{r4, lr}
   4a670:	e2504000 	subs	r4, r0, #0
   4a674:	0a000016 	beq	4a6d4 <_CUSBMouseDevice+0x68>
   4a678:	e594001c 	ldr	r0, [r4, #28]
   4a67c:	e3500000 	cmp	r0, #0
   4a680:	0a000002 	beq	4a690 <_CUSBMouseDevice+0x24>
   4a684:	ebffb1c9 	bl	36db0 <free>
   4a688:	e3a03000 	mov	r3, #0
   4a68c:	e584301c 	str	r3, [r4, #28]
   4a690:	e5940044 	ldr	r0, [r4, #68]	; 0x44
   4a694:	e3500000 	cmp	r0, #0
   4a698:	0a000002 	beq	4a6a8 <_CUSBMouseDevice+0x3c>
   4a69c:	ebffb1c3 	bl	36db0 <free>
   4a6a0:	e3a03000 	mov	r3, #0
   4a6a4:	e5843044 	str	r3, [r4, #68]	; 0x44
   4a6a8:	e5940010 	ldr	r0, [r4, #16]
   4a6ac:	e3500000 	cmp	r0, #0
   4a6b0:	0a000004 	beq	4a6c8 <_CUSBMouseDevice+0x5c>
   4a6b4:	ebffe47e 	bl	438b4 <_USBEndpoint>
   4a6b8:	e5940010 	ldr	r0, [r4, #16]
   4a6bc:	ebffb1bb 	bl	36db0 <free>
   4a6c0:	e3a03000 	mov	r3, #0
   4a6c4:	e5843010 	str	r3, [r4, #16]
   4a6c8:	e1a00004 	mov	r0, r4
   4a6cc:	e8bd4010 	pop	{r4, lr}
   4a6d0:	eaffeb1c 	b	45348 <_USBFunction>
   4a6d4:	e59f000c 	ldr	r0, [pc, #12]	; 4a6e8 <_CUSBMouseDevice+0x7c>
   4a6d8:	e59f100c 	ldr	r1, [pc, #12]	; 4a6ec <_CUSBMouseDevice+0x80>
   4a6dc:	e3a02036 	mov	r2, #54	; 0x36
   4a6e0:	ebffb1d8 	bl	36e48 <uspi_assertion_failed>
   4a6e4:	eaffffe3 	b	4a678 <_CUSBMouseDevice+0xc>
   4a6e8:	00056434 	.word	0x00056434
   4a6ec:	00057e20 	.word	0x00057e20

0004a6f0 <USBMouseDeviceRegisterStatusHandler>:
   4a6f0:	e92d4038 	push	{r3, r4, r5, lr}
   4a6f4:	e2505000 	subs	r5, r0, #0
   4a6f8:	e1a04001 	mov	r4, r1
   4a6fc:	0a000009 	beq	4a728 <USBMouseDeviceRegisterStatusHandler+0x38>
   4a700:	e3540000 	cmp	r4, #0
   4a704:	0a000001 	beq	4a710 <USBMouseDeviceRegisterStatusHandler+0x20>
   4a708:	e5854014 	str	r4, [r5, #20]
   4a70c:	e8bd8038 	pop	{r3, r4, r5, pc}
   4a710:	e59f0024 	ldr	r0, [pc, #36]	; 4a73c <USBMouseDeviceRegisterStatusHandler+0x4c>
   4a714:	e59f1024 	ldr	r1, [pc, #36]	; 4a740 <USBMouseDeviceRegisterStatusHandler+0x50>
   4a718:	e3a020ae 	mov	r2, #174	; 0xae
   4a71c:	ebffb1c9 	bl	36e48 <uspi_assertion_failed>
   4a720:	e5854014 	str	r4, [r5, #20]
   4a724:	e8bd8038 	pop	{r3, r4, r5, pc}
   4a728:	e59f0014 	ldr	r0, [pc, #20]	; 4a744 <USBMouseDeviceRegisterStatusHandler+0x54>
   4a72c:	e59f100c 	ldr	r1, [pc, #12]	; 4a740 <USBMouseDeviceRegisterStatusHandler+0x50>
   4a730:	e3a020ad 	mov	r2, #173	; 0xad
   4a734:	ebffb1c3 	bl	36e48 <uspi_assertion_failed>
   4a738:	eafffff0 	b	4a700 <USBMouseDeviceRegisterStatusHandler+0x10>
   4a73c:	00057e80 	.word	0x00057e80
   4a740:	00057e20 	.word	0x00057e20
   4a744:	00056434 	.word	0x00056434

0004a748 <_DWHCIFrameSchedulerNoSplit>:
   4a748:	e12fff1e 	bx	lr

0004a74c <DWHCIFrameSchedulerNoSplitStartSplit>:
   4a74c:	e59f0008 	ldr	r0, [pc, #8]	; 4a75c <DWHCIFrameSchedulerNoSplitStartSplit+0x10>
   4a750:	e59f1008 	ldr	r1, [pc, #8]	; 4a760 <DWHCIFrameSchedulerNoSplitStartSplit+0x14>
   4a754:	e3a02032 	mov	r2, #50	; 0x32
   4a758:	eaffb1ba 	b	36e48 <uspi_assertion_failed>
   4a75c:	000563cc 	.word	0x000563cc
   4a760:	00057e94 	.word	0x00057e94

0004a764 <DWHCIFrameSchedulerNoSplitCompleteSplit>:
   4a764:	e92d4008 	push	{r3, lr}
   4a768:	e59f0010 	ldr	r0, [pc, #16]	; 4a780 <DWHCIFrameSchedulerNoSplitCompleteSplit+0x1c>
   4a76c:	e59f1010 	ldr	r1, [pc, #16]	; 4a784 <DWHCIFrameSchedulerNoSplitCompleteSplit+0x20>
   4a770:	e3a02037 	mov	r2, #55	; 0x37
   4a774:	ebffb1b3 	bl	36e48 <uspi_assertion_failed>
   4a778:	e3a00000 	mov	r0, #0
   4a77c:	e8bd8008 	pop	{r3, pc}
   4a780:	000563cc 	.word	0x000563cc
   4a784:	00057e94 	.word	0x00057e94

0004a788 <DWHCIFrameSchedulerNoSplitTransactionComplete>:
   4a788:	e59f0008 	ldr	r0, [pc, #8]	; 4a798 <DWHCIFrameSchedulerNoSplitTransactionComplete+0x10>
   4a78c:	e59f1008 	ldr	r1, [pc, #8]	; 4a79c <DWHCIFrameSchedulerNoSplitTransactionComplete+0x14>
   4a790:	e3a0203d 	mov	r2, #61	; 0x3d
   4a794:	eaffb1ab 	b	36e48 <uspi_assertion_failed>
   4a798:	000563cc 	.word	0x000563cc
   4a79c:	00057e94 	.word	0x00057e94

0004a7a0 <DWHCIFrameSchedulerNoSplitIsOddFrame>:
   4a7a0:	e92d4010 	push	{r4, lr}
   4a7a4:	e2504000 	subs	r4, r0, #0
   4a7a8:	0a000002 	beq	4a7b8 <DWHCIFrameSchedulerNoSplitIsOddFrame+0x18>
   4a7ac:	e594001c 	ldr	r0, [r4, #28]
   4a7b0:	e2000001 	and	r0, r0, #1
   4a7b4:	e8bd8010 	pop	{r4, pc}
   4a7b8:	e59f000c 	ldr	r0, [pc, #12]	; 4a7cc <DWHCIFrameSchedulerNoSplitIsOddFrame+0x2c>
   4a7bc:	e59f100c 	ldr	r1, [pc, #12]	; 4a7d0 <DWHCIFrameSchedulerNoSplitIsOddFrame+0x30>
   4a7c0:	e3a02058 	mov	r2, #88	; 0x58
   4a7c4:	ebffb19f 	bl	36e48 <uspi_assertion_failed>
   4a7c8:	eafffff7 	b	4a7ac <DWHCIFrameSchedulerNoSplitIsOddFrame+0xc>
   4a7cc:	00056434 	.word	0x00056434
   4a7d0:	00057e94 	.word	0x00057e94

0004a7d4 <DWHCIFrameSchedulerNoSplitWaitForFrame>:
   4a7d4:	e92d4010 	push	{r4, lr}
   4a7d8:	e2504000 	subs	r4, r0, #0
   4a7dc:	e24dd010 	sub	sp, sp, #16
   4a7e0:	0a000015 	beq	4a83c <DWHCIFrameSchedulerNoSplitWaitForFrame+0x68>
   4a7e4:	e28d0004 	add	r0, sp, #4
   4a7e8:	e59f1060 	ldr	r1, [pc, #96]	; 4a850 <DWHCIFrameSchedulerNoSplitWaitForFrame+0x7c>
   4a7ec:	ebffd9be 	bl	40eec <DWHCIRegister>
   4a7f0:	e28d0004 	add	r0, sp, #4
   4a7f4:	ebffd9e8 	bl	40f9c <DWHCIRegisterRead>
   4a7f8:	e5943018 	ldr	r3, [r4, #24]
   4a7fc:	e2800001 	add	r0, r0, #1
   4a800:	e1a00900 	lsl	r0, r0, #18
   4a804:	e1a00920 	lsr	r0, r0, #18
   4a808:	e3530000 	cmp	r3, #0
   4a80c:	e584001c 	str	r0, [r4, #28]
   4a810:	1a000005 	bne	4a82c <DWHCIFrameSchedulerNoSplitWaitForFrame+0x58>
   4a814:	e28d0004 	add	r0, sp, #4
   4a818:	ebffd9df 	bl	40f9c <DWHCIRegisterRead>
   4a81c:	e594301c 	ldr	r3, [r4, #28]
   4a820:	e1a00900 	lsl	r0, r0, #18
   4a824:	e1530920 	cmp	r3, r0, lsr #18
   4a828:	1afffff9 	bne	4a814 <DWHCIFrameSchedulerNoSplitWaitForFrame+0x40>
   4a82c:	e28d0004 	add	r0, sp, #4
   4a830:	ebffd9cc 	bl	40f68 <_DWHCIRegister>
   4a834:	e28dd010 	add	sp, sp, #16
   4a838:	e8bd8010 	pop	{r4, pc}
   4a83c:	e59f0010 	ldr	r0, [pc, #16]	; 4a854 <DWHCIFrameSchedulerNoSplitWaitForFrame+0x80>
   4a840:	e59f1010 	ldr	r1, [pc, #16]	; 4a858 <DWHCIFrameSchedulerNoSplitWaitForFrame+0x84>
   4a844:	e3a02043 	mov	r2, #67	; 0x43
   4a848:	ebffb17e 	bl	36e48 <uspi_assertion_failed>
   4a84c:	eaffffe4 	b	4a7e4 <DWHCIFrameSchedulerNoSplitWaitForFrame+0x10>
   4a850:	20980408 	.word	0x20980408
   4a854:	00056434 	.word	0x00056434
   4a858:	00057e94 	.word	0x00057e94

0004a85c <DWHCIFrameSchedulerNoSplit>:
   4a85c:	e92d4070 	push	{r4, r5, r6, lr}
   4a860:	e2504000 	subs	r4, r0, #0
   4a864:	e1a06001 	mov	r6, r1
   4a868:	0a00000f 	beq	4a8ac <DWHCIFrameSchedulerNoSplit+0x50>
   4a86c:	e3a05901 	mov	r5, #16384	; 0x4000
   4a870:	e59fe048 	ldr	lr, [pc, #72]	; 4a8c0 <DWHCIFrameSchedulerNoSplit+0x64>
   4a874:	e59fc048 	ldr	ip, [pc, #72]	; 4a8c4 <DWHCIFrameSchedulerNoSplit+0x68>
   4a878:	e59f0048 	ldr	r0, [pc, #72]	; 4a8c8 <DWHCIFrameSchedulerNoSplit+0x6c>
   4a87c:	e59f1048 	ldr	r1, [pc, #72]	; 4a8cc <DWHCIFrameSchedulerNoSplit+0x70>
   4a880:	e59f2048 	ldr	r2, [pc, #72]	; 4a8d0 <DWHCIFrameSchedulerNoSplit+0x74>
   4a884:	e59f3048 	ldr	r3, [pc, #72]	; 4a8d4 <DWHCIFrameSchedulerNoSplit+0x78>
   4a888:	e5846018 	str	r6, [r4, #24]
   4a88c:	e584501c 	str	r5, [r4, #28]
   4a890:	e584e000 	str	lr, [r4]
   4a894:	e584c004 	str	ip, [r4, #4]
   4a898:	e5840008 	str	r0, [r4, #8]
   4a89c:	e584100c 	str	r1, [r4, #12]
   4a8a0:	e5842010 	str	r2, [r4, #16]
   4a8a4:	e5843014 	str	r3, [r4, #20]
   4a8a8:	e8bd8070 	pop	{r4, r5, r6, pc}
   4a8ac:	e59f0024 	ldr	r0, [pc, #36]	; 4a8d8 <DWHCIFrameSchedulerNoSplit+0x7c>
   4a8b0:	e59f1024 	ldr	r1, [pc, #36]	; 4a8dc <DWHCIFrameSchedulerNoSplit+0x80>
   4a8b4:	e3a0201c 	mov	r2, #28
   4a8b8:	ebffb162 	bl	36e48 <uspi_assertion_failed>
   4a8bc:	eaffffea 	b	4a86c <DWHCIFrameSchedulerNoSplit+0x10>
   4a8c0:	0004a748 	.word	0x0004a748
   4a8c4:	0004a74c 	.word	0x0004a74c
   4a8c8:	0004a764 	.word	0x0004a764
   4a8cc:	0004a788 	.word	0x0004a788
   4a8d0:	0004a7d4 	.word	0x0004a7d4
   4a8d4:	0004a7a0 	.word	0x0004a7a0
   4a8d8:	00056434 	.word	0x00056434
   4a8dc:	00057e94 	.word	0x00057e94

0004a8e0 <BitGetUnsigned>:
   4a8e0:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   4a8e4:	e0814002 	add	r4, r1, r2
   4a8e8:	e2846007 	add	r6, r4, #7
   4a8ec:	e1a061a6 	lsr	r6, r6, #3
   4a8f0:	e1a0e1a1 	lsr	lr, r1, #3
   4a8f4:	e15e0006 	cmp	lr, r6
   4a8f8:	e24dd00c 	sub	sp, sp, #12
   4a8fc:	2a000039 	bcs	4a9e8 <BitGetUnsigned+0x108>
   4a900:	e3a07001 	mov	r7, #1
   4a904:	e3a05000 	mov	r5, #0
   4a908:	e2011007 	and	r1, r1, #7
   4a90c:	e0818002 	add	r8, r1, r2
   4a910:	e1a08817 	lsl	r8, r7, r8
   4a914:	e1a07117 	lsl	r7, r7, r1
   4a918:	e6ef8078 	uxtb	r8, r8
   4a91c:	e6ef7077 	uxtb	r7, r7
   4a920:	e067b008 	rsb	fp, r7, r8
   4a924:	e2488001 	sub	r8, r8, #1
   4a928:	e6ef8078 	uxtb	r8, r8
   4a92c:	e080a00e 	add	sl, r0, lr
   4a930:	e2444001 	sub	r4, r4, #1
   4a934:	e2677000 	rsb	r7, r7, #0
   4a938:	e58d8004 	str	r8, [sp, #4]
   4a93c:	e2618008 	rsb	r8, r1, #8
   4a940:	e1a0c00a 	mov	ip, sl
   4a944:	e1a00005 	mov	r0, r5
   4a948:	e1a0300e 	mov	r3, lr
   4a94c:	e1a041a4 	lsr	r4, r4, #3
   4a950:	e6efb07b 	uxtb	fp, fp
   4a954:	e6ef7077 	uxtb	r7, r7
   4a958:	e58d8000 	str	r8, [sp]
   4a95c:	ea00000e 	b	4a99c <BitGetUnsigned+0xbc>
   4a960:	e153000e 	cmp	r3, lr
   4a964:	0a000017 	beq	4a9c8 <BitGetUnsigned+0xe8>
   4a968:	e1540003 	cmp	r4, r3
   4a96c:	05dc8000 	ldrbeq	r8, [ip]
   4a970:	059d9004 	ldreq	r9, [sp, #4]
   4a974:	12855008 	addne	r5, r5, #8
   4a978:	15dc9000 	ldrbne	r9, [ip]
   4a97c:	00088009 	andeq	r8, r8, r9
   4a980:	10658002 	rsbne	r8, r5, r2
   4a984:	01800008 	orreq	r0, r0, r8
   4a988:	11800819 	orrne	r0, r0, r9, lsl r8
   4a98c:	e2833001 	add	r3, r3, #1
   4a990:	e1530006 	cmp	r3, r6
   4a994:	e28cc001 	add	ip, ip, #1
   4a998:	0a000008 	beq	4a9c0 <BitGetUnsigned+0xe0>
   4a99c:	e15e0004 	cmp	lr, r4
   4a9a0:	1affffee 	bne	4a960 <BitGetUnsigned+0x80>
   4a9a4:	e5dc0000 	ldrb	r0, [ip]
   4a9a8:	e2833001 	add	r3, r3, #1
   4a9ac:	e000000b 	and	r0, r0, fp
   4a9b0:	e1530006 	cmp	r3, r6
   4a9b4:	e1a00150 	asr	r0, r0, r1
   4a9b8:	e28cc001 	add	ip, ip, #1
   4a9bc:	1afffff6 	bne	4a99c <BitGetUnsigned+0xbc>
   4a9c0:	e28dd00c 	add	sp, sp, #12
   4a9c4:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   4a9c8:	e59d8000 	ldr	r8, [sp]
   4a9cc:	e5da0000 	ldrb	r0, [sl]
   4a9d0:	e0855008 	add	r5, r5, r8
   4a9d4:	e0000007 	and	r0, r0, r7
   4a9d8:	e1a00150 	asr	r0, r0, r1
   4a9dc:	e0658002 	rsb	r8, r5, r2
   4a9e0:	e1a00810 	lsl	r0, r0, r8
   4a9e4:	eaffffe8 	b	4a98c <BitGetUnsigned+0xac>
   4a9e8:	e3a00000 	mov	r0, #0
   4a9ec:	eafffff3 	b	4a9c0 <BitGetUnsigned+0xe0>

0004a9f0 <USBGamePadDeviceDecodeReport>:
   4a9f0:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   4a9f4:	e1d049b0 	ldrh	r4, [r0, #144]	; 0x90
   4a9f8:	e24dd03c 	sub	sp, sp, #60	; 0x3c
   4a9fc:	e3540000 	cmp	r4, #0
   4aa00:	e58d0014 	str	r0, [sp, #20]
   4aa04:	e590a0bc 	ldr	sl, [r0, #188]	; 0xbc
   4aa08:	e5905094 	ldr	r5, [r0, #148]	; 0x94
   4aa0c:	0a000107 	beq	4ae30 <USBGamePadDeviceDecodeReport+0x440>
   4aa10:	e3a09000 	mov	r9, #0
   4aa14:	e59f8438 	ldr	r8, [pc, #1080]	; 4ae54 <USBGamePadDeviceDecodeReport+0x464>
   4aa18:	e1a06009 	mov	r6, r9
   4aa1c:	e58d800c 	str	r8, [sp, #12]
   4aa20:	e58d8010 	str	r8, [sp, #16]
   4aa24:	e58d8008 	str	r8, [sp, #8]
   4aa28:	e58d8004 	str	r8, [sp, #4]
   4aa2c:	e58d901c 	str	r9, [sp, #28]
   4aa30:	e58d9018 	str	r9, [sp, #24]
   4aa34:	e1a0b009 	mov	fp, r9
   4aa38:	e1a07009 	mov	r7, r9
   4aa3c:	e1a08009 	mov	r8, r9
   4aa40:	ea00000b 	b	4aa74 <USBGamePadDeviceDecodeReport+0x84>
   4aa44:	e3520008 	cmp	r2, #8
   4aa48:	0a000059 	beq	4abb4 <USBGamePadDeviceDecodeReport+0x1c4>
   4aa4c:	da000062 	ble	4abdc <USBGamePadDeviceDecodeReport+0x1ec>
   4aa50:	e3520014 	cmp	r2, #20
   4aa54:	058d3010 	streq	r3, [sp, #16]
   4aa58:	0a000003 	beq	4aa6c <USBGamePadDeviceDecodeReport+0x7c>
   4aa5c:	e3520024 	cmp	r2, #36	; 0x24
   4aa60:	e59d1008 	ldr	r1, [sp, #8]
   4aa64:	01a01003 	moveq	r1, r3
   4aa68:	e58d1008 	str	r1, [sp, #8]
   4aa6c:	e3540000 	cmp	r4, #0
   4aa70:	0a000026 	beq	4ab10 <USBGamePadDeviceDecodeReport+0x120>
   4aa74:	e5d52000 	ldrb	r2, [r5]
   4aa78:	e2023003 	and	r3, r2, #3
   4aa7c:	e3530001 	cmp	r3, #1
   4aa80:	e6af2072 	sxtb	r2, r2
   4aa84:	0a00003f 	beq	4ab88 <USBGamePadDeviceDecodeReport+0x198>
   4aa88:	e3530002 	cmp	r3, #2
   4aa8c:	0a000036 	beq	4ab6c <USBGamePadDeviceDecodeReport+0x17c>
   4aa90:	e3530000 	cmp	r3, #0
   4aa94:	02444001 	subeq	r4, r4, #1
   4aa98:	06ff4074 	uxtheq	r4, r4
   4aa9c:	02855001 	addeq	r5, r5, #1
   4aaa0:	0a00000a 	beq	4aad0 <USBGamePadDeviceDecodeReport+0xe0>
   4aaa4:	e1d510d3 	ldrsb	r1, [r5, #3]
   4aaa8:	e1d5c0d2 	ldrsb	ip, [r5, #2]
   4aaac:	e1a03801 	lsl	r3, r1, #16
   4aab0:	e1d500d1 	ldrsb	r0, [r5, #1]
   4aab4:	e183140c 	orr	r1, r3, ip, lsl #8
   4aab8:	e1d5c0d4 	ldrsb	ip, [r5, #4]
   4aabc:	e2444005 	sub	r4, r4, #5
   4aac0:	e1813000 	orr	r3, r1, r0
   4aac4:	e6ff4074 	uxth	r4, r4
   4aac8:	e1833c0c 	orr	r3, r3, ip, lsl #24
   4aacc:	e2855005 	add	r5, r5, #5
   4aad0:	e20220fc 	and	r2, r2, #252	; 0xfc
   4aad4:	e3520084 	cmp	r2, #132	; 0x84
   4aad8:	0a000017 	beq	4ab3c <USBGamePadDeviceDecodeReport+0x14c>
   4aadc:	e3520034 	cmp	r2, #52	; 0x34
   4aae0:	0a00003b 	beq	4abd4 <USBGamePadDeviceDecodeReport+0x1e4>
   4aae4:	daffffd6 	ble	4aa44 <USBGamePadDeviceDecodeReport+0x54>
   4aae8:	e3520074 	cmp	r2, #116	; 0x74
   4aaec:	01a0b003 	moveq	fp, r3
   4aaf0:	0affffdd 	beq	4aa6c <USBGamePadDeviceDecodeReport+0x7c>
   4aaf4:	da00003f 	ble	4abf8 <USBGamePadDeviceDecodeReport+0x208>
   4aaf8:	e3520080 	cmp	r2, #128	; 0x80
   4aafc:	0a000026 	beq	4ab9c <USBGamePadDeviceDecodeReport+0x1ac>
   4ab00:	e3520094 	cmp	r2, #148	; 0x94
   4ab04:	01a08003 	moveq	r8, r3
   4ab08:	e3540000 	cmp	r4, #0
   4ab0c:	1affffd8 	bne	4aa74 <USBGamePadDeviceDecodeReport+0x84>
   4ab10:	e2874007 	add	r4, r7, #7
   4ab14:	e1a041a4 	lsr	r4, r4, #3
   4ab18:	e6ff4074 	uxth	r4, r4
   4ab1c:	e59d3014 	ldr	r3, [sp, #20]
   4ab20:	e59d2018 	ldr	r2, [sp, #24]
   4ab24:	e1c34cb0 	strh	r4, [r3, #192]	; 0xc0
   4ab28:	e583201c 	str	r2, [r3, #28]
   4ab2c:	e59d201c 	ldr	r2, [sp, #28]
   4ab30:	e5832068 	str	r2, [r3, #104]	; 0x68
   4ab34:	e28dd03c 	add	sp, sp, #60	; 0x3c
   4ab38:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   4ab3c:	e3560000 	cmp	r6, #0
   4ab40:	1afffff2 	bne	4ab10 <USBGamePadDeviceDecodeReport+0x120>
   4ab44:	e1a01006 	mov	r1, r6
   4ab48:	e1a0000a 	mov	r0, sl
   4ab4c:	e3a02008 	mov	r2, #8
   4ab50:	e1a06003 	mov	r6, r3
   4ab54:	ebffff61 	bl	4a8e0 <BitGetUnsigned>
   4ab58:	e1560000 	cmp	r6, r0
   4ab5c:	13500000 	cmpne	r0, #0
   4ab60:	1afffff3 	bne	4ab34 <USBGamePadDeviceDecodeReport+0x144>
   4ab64:	e3a07008 	mov	r7, #8
   4ab68:	eaffffbf 	b	4aa6c <USBGamePadDeviceDecodeReport+0x7c>
   4ab6c:	e1d510d2 	ldrsb	r1, [r5, #2]
   4ab70:	e5d53001 	ldrb	r3, [r5, #1]
   4ab74:	e2444003 	sub	r4, r4, #3
   4ab78:	e6ff4074 	uxth	r4, r4
   4ab7c:	e1833401 	orr	r3, r3, r1, lsl #8
   4ab80:	e2855003 	add	r5, r5, #3
   4ab84:	eaffffd1 	b	4aad0 <USBGamePadDeviceDecodeReport+0xe0>
   4ab88:	e2444002 	sub	r4, r4, #2
   4ab8c:	e1d530d1 	ldrsb	r3, [r5, #1]
   4ab90:	e6ff4074 	uxth	r4, r4
   4ab94:	e2855002 	add	r5, r5, #2
   4ab98:	eaffffcc 	b	4aad0 <USBGamePadDeviceDecodeReport+0xe0>
   4ab9c:	e2033003 	and	r3, r3, #3
   4aba0:	e3530002 	cmp	r3, #2
   4aba4:	0a00001d 	beq	4ac20 <USBGamePadDeviceDecodeReport+0x230>
   4aba8:	e0030b98 	mul	r3, r8, fp
   4abac:	e0877003 	add	r7, r7, r3
   4abb0:	eaffffad 	b	4aa6c <USBGamePadDeviceDecodeReport+0x7c>
   4abb4:	e3530036 	cmp	r3, #54	; 0x36
   4abb8:	ca000013 	bgt	4ac0c <USBGamePadDeviceDecodeReport+0x21c>
   4abbc:	e3530030 	cmp	r3, #48	; 0x30
   4abc0:	aa000029 	bge	4ac6c <USBGamePadDeviceDecodeReport+0x27c>
   4abc4:	e2433004 	sub	r3, r3, #4
   4abc8:	e3530001 	cmp	r3, #1
   4abcc:	93a09001 	movls	r9, #1
   4abd0:	eaffffa5 	b	4aa6c <USBGamePadDeviceDecodeReport+0x7c>
   4abd4:	e58d300c 	str	r3, [sp, #12]
   4abd8:	eaffffa3 	b	4aa6c <USBGamePadDeviceDecodeReport+0x7c>
   4abdc:	e3520004 	cmp	r2, #4
   4abe0:	1affffa1 	bne	4aa6c <USBGamePadDeviceDecodeReport+0x7c>
   4abe4:	e3530009 	cmp	r3, #9
   4abe8:	1affff9f 	bne	4aa6c <USBGamePadDeviceDecodeReport+0x7c>
   4abec:	e3590001 	cmp	r9, #1
   4abf0:	03a09002 	moveq	r9, #2
   4abf4:	eaffff9c 	b	4aa6c <USBGamePadDeviceDecodeReport+0x7c>
   4abf8:	e3520044 	cmp	r2, #68	; 0x44
   4abfc:	e59d1004 	ldr	r1, [sp, #4]
   4ac00:	01a01003 	moveq	r1, r3
   4ac04:	e58d1004 	str	r1, [sp, #4]
   4ac08:	eaffff97 	b	4aa6c <USBGamePadDeviceDecodeReport+0x7c>
   4ac0c:	e3530039 	cmp	r3, #57	; 0x39
   4ac10:	1affff95 	bne	4aa6c <USBGamePadDeviceDecodeReport+0x7c>
   4ac14:	e3590001 	cmp	r9, #1
   4ac18:	03a09004 	moveq	r9, #4
   4ac1c:	eaffff92 	b	4aa6c <USBGamePadDeviceDecodeReport+0x7c>
   4ac20:	e3590003 	cmp	r9, #3
   4ac24:	0a000013 	beq	4ac78 <USBGamePadDeviceDecodeReport+0x288>
   4ac28:	e3590004 	cmp	r9, #4
   4ac2c:	0a000057 	beq	4ad90 <USBGamePadDeviceDecodeReport+0x3a0>
   4ac30:	e3590002 	cmp	r9, #2
   4ac34:	e0030b98 	mul	r3, r8, fp
   4ac38:	1affffdb 	bne	4abac <USBGamePadDeviceDecodeReport+0x1bc>
   4ac3c:	e59d2014 	ldr	r2, [sp, #20]
   4ac40:	e1a0000a 	mov	r0, sl
   4ac44:	e5828084 	str	r8, [r2, #132]	; 0x84
   4ac48:	e1a01007 	mov	r1, r7
   4ac4c:	e1a02003 	mov	r2, r3
   4ac50:	e58d3020 	str	r3, [sp, #32]
   4ac54:	ebffff21 	bl	4a8e0 <BitGetUnsigned>
   4ac58:	e59d2014 	ldr	r2, [sp, #20]
   4ac5c:	e3a09001 	mov	r9, #1
   4ac60:	e5820088 	str	r0, [r2, #136]	; 0x88
   4ac64:	e59d3020 	ldr	r3, [sp, #32]
   4ac68:	eaffffcf 	b	4abac <USBGamePadDeviceDecodeReport+0x1bc>
   4ac6c:	e3590001 	cmp	r9, #1
   4ac70:	03a09003 	moveq	r9, #3
   4ac74:	eaffff7c 	b	4aa6c <USBGamePadDeviceDecodeReport+0x7c>
   4ac78:	e3580000 	cmp	r8, #0
   4ac7c:	0a00006e 	beq	4ae3c <USBGamePadDeviceDecodeReport+0x44c>
   4ac80:	e3a02001 	mov	r2, #1
   4ac84:	e3a0e001 	mov	lr, #1
   4ac88:	e1a0c007 	mov	ip, r7
   4ac8c:	e3a03000 	mov	r3, #0
   4ac90:	e1a02b12 	lsl	r2, r2, fp
   4ac94:	e59d0018 	ldr	r0, [sp, #24]
   4ac98:	e2622000 	rsb	r2, r2, #0
   4ac9c:	e24b1001 	sub	r1, fp, #1
   4aca0:	e58d2024 	str	r2, [sp, #36]	; 0x24
   4aca4:	e59d2014 	ldr	r2, [sp, #20]
   4aca8:	e0809080 	add	r9, r0, r0, lsl #1
   4acac:	e1a0111e 	lsl	r1, lr, r1
   4acb0:	e58d5028 	str	r5, [sp, #40]	; 0x28
   4acb4:	e58d402c 	str	r4, [sp, #44]	; 0x2c
   4acb8:	e58d7030 	str	r7, [sp, #48]	; 0x30
   4acbc:	e58d8018 	str	r8, [sp, #24]
   4acc0:	e58d6034 	str	r6, [sp, #52]	; 0x34
   4acc4:	e58d1020 	str	r1, [sp, #32]
   4acc8:	e0829109 	add	r9, r2, r9, lsl #2
   4accc:	e59d5010 	ldr	r5, [sp, #16]
   4acd0:	e59d7008 	ldr	r7, [sp, #8]
   4acd4:	e1a04003 	mov	r4, r3
   4acd8:	e1a0800c 	mov	r8, ip
   4acdc:	e1a06000 	mov	r6, r0
   4ace0:	ea00000d 	b	4ad1c <USBGamePadDeviceDecodeReport+0x32c>
   4ace4:	ebfffefd 	bl	4a8e0 <BitGetUnsigned>
   4ace8:	e59d2018 	ldr	r2, [sp, #24]
   4acec:	e2844001 	add	r4, r4, #1
   4acf0:	e1540002 	cmp	r4, r2
   4acf4:	23a02000 	movcs	r2, #0
   4acf8:	33a02001 	movcc	r2, #1
   4acfc:	e3540005 	cmp	r4, #5
   4ad00:	c3a02000 	movgt	r2, #0
   4ad04:	e3520000 	cmp	r2, #0
   4ad08:	e5890020 	str	r0, [r9, #32]
   4ad0c:	e2866001 	add	r6, r6, #1
   4ad10:	e289900c 	add	r9, r9, #12
   4ad14:	e088800b 	add	r8, r8, fp
   4ad18:	0a000013 	beq	4ad6c <USBGamePadDeviceDecodeReport+0x37c>
   4ad1c:	e59f3130 	ldr	r3, [pc, #304]	; 4ae54 <USBGamePadDeviceDecodeReport+0x464>
   4ad20:	e59d200c 	ldr	r2, [sp, #12]
   4ad24:	e1550003 	cmp	r5, r3
   4ad28:	11a02005 	movne	r2, r5
   4ad2c:	e1570003 	cmp	r7, r3
   4ad30:	e59d1004 	ldr	r1, [sp, #4]
   4ad34:	11a01007 	movne	r1, r7
   4ad38:	e3520000 	cmp	r2, #0
   4ad3c:	e5892024 	str	r2, [r9, #36]	; 0x24
   4ad40:	e5891028 	str	r1, [r9, #40]	; 0x28
   4ad44:	e1a0000a 	mov	r0, sl
   4ad48:	e1a01008 	mov	r1, r8
   4ad4c:	e1a0200b 	mov	r2, fp
   4ad50:	aaffffe3 	bge	4ace4 <USBGamePadDeviceDecodeReport+0x2f4>
   4ad54:	ebfffee1 	bl	4a8e0 <BitGetUnsigned>
   4ad58:	e59d3020 	ldr	r3, [sp, #32]
   4ad5c:	e1100003 	tst	r0, r3
   4ad60:	159d3024 	ldrne	r3, [sp, #36]	; 0x24
   4ad64:	11800003 	orrne	r0, r0, r3
   4ad68:	eaffffde 	b	4ace8 <USBGamePadDeviceDecodeReport+0x2f8>
   4ad6c:	e59d8018 	ldr	r8, [sp, #24]
   4ad70:	e59d5028 	ldr	r5, [sp, #40]	; 0x28
   4ad74:	e58d6018 	str	r6, [sp, #24]
   4ad78:	e59d402c 	ldr	r4, [sp, #44]	; 0x2c
   4ad7c:	e59d7030 	ldr	r7, [sp, #48]	; 0x30
   4ad80:	e59d6034 	ldr	r6, [sp, #52]	; 0x34
   4ad84:	e0030b98 	mul	r3, r8, fp
   4ad88:	e3a09001 	mov	r9, #1
   4ad8c:	eaffff86 	b	4abac <USBGamePadDeviceDecodeReport+0x1bc>
   4ad90:	e3580000 	cmp	r8, #0
   4ad94:	0a00002b 	beq	4ae48 <USBGamePadDeviceDecodeReport+0x458>
   4ad98:	e1a03007 	mov	r3, r7
   4ad9c:	e59d201c 	ldr	r2, [sp, #28]
   4ada0:	e59d1014 	ldr	r1, [sp, #20]
   4ada4:	e282c01a 	add	ip, r2, #26
   4ada8:	e081c10c 	add	ip, r1, ip, lsl #2
   4adac:	e58d501c 	str	r5, [sp, #28]
   4adb0:	e58d4020 	str	r4, [sp, #32]
   4adb4:	e58d7024 	str	r7, [sp, #36]	; 0x24
   4adb8:	e3a09000 	mov	r9, #0
   4adbc:	e1a0700b 	mov	r7, fp
   4adc0:	e1a05003 	mov	r5, r3
   4adc4:	e1a0b006 	mov	fp, r6
   4adc8:	e1a04002 	mov	r4, r2
   4adcc:	e1a0600c 	mov	r6, ip
   4add0:	e1a02007 	mov	r2, r7
   4add4:	e2899001 	add	r9, r9, #1
   4add8:	e1a01005 	mov	r1, r5
   4addc:	e1a0000a 	mov	r0, sl
   4ade0:	ebfffebe 	bl	4a8e0 <BitGetUnsigned>
   4ade4:	e1590008 	cmp	r9, r8
   4ade8:	23a02000 	movcs	r2, #0
   4adec:	33a02001 	movcc	r2, #1
   4adf0:	e3590005 	cmp	r9, #5
   4adf4:	c3a02000 	movgt	r2, #0
   4adf8:	e3520000 	cmp	r2, #0
   4adfc:	e2844001 	add	r4, r4, #1
   4ae00:	e0855007 	add	r5, r5, r7
   4ae04:	e5a60004 	str	r0, [r6, #4]!
   4ae08:	1afffff0 	bne	4add0 <USBGamePadDeviceDecodeReport+0x3e0>
   4ae0c:	e1a0600b 	mov	r6, fp
   4ae10:	e1a0b007 	mov	fp, r7
   4ae14:	e59d501c 	ldr	r5, [sp, #28]
   4ae18:	e59d7024 	ldr	r7, [sp, #36]	; 0x24
   4ae1c:	e58d401c 	str	r4, [sp, #28]
   4ae20:	e0030b98 	mul	r3, r8, fp
   4ae24:	e59d4020 	ldr	r4, [sp, #32]
   4ae28:	e3a09001 	mov	r9, #1
   4ae2c:	eaffff5e 	b	4abac <USBGamePadDeviceDecodeReport+0x1bc>
   4ae30:	e58d401c 	str	r4, [sp, #28]
   4ae34:	e58d4018 	str	r4, [sp, #24]
   4ae38:	eaffff37 	b	4ab1c <USBGamePadDeviceDecodeReport+0x12c>
   4ae3c:	e1a03008 	mov	r3, r8
   4ae40:	e3a09001 	mov	r9, #1
   4ae44:	eaffff58 	b	4abac <USBGamePadDeviceDecodeReport+0x1bc>
   4ae48:	e3a03000 	mov	r3, #0
   4ae4c:	e3a09001 	mov	r9, #1
   4ae50:	eaffff55 	b	4abac <USBGamePadDeviceDecodeReport+0x1bc>
   4ae54:	f8a432eb 	.word	0xf8a432eb

0004ae58 <USBGamePadDeviceStartRequest>:
   4ae58:	e92d4070 	push	{r4, r5, r6, lr}
   4ae5c:	e2504000 	subs	r4, r0, #0
   4ae60:	e24dd008 	sub	sp, sp, #8
   4ae64:	0a00001d 	beq	4aee0 <USBGamePadDeviceStartRequest+0x88>
   4ae68:	e5943014 	ldr	r3, [r4, #20]
   4ae6c:	e3530000 	cmp	r3, #0
   4ae70:	0a00001f 	beq	4aef4 <USBGamePadDeviceStartRequest+0x9c>
   4ae74:	e59420bc 	ldr	r2, [r4, #188]	; 0xbc
   4ae78:	e3520000 	cmp	r2, #0
   4ae7c:	0a000011 	beq	4aec8 <USBGamePadDeviceStartRequest+0x70>
   4ae80:	e3a06000 	mov	r6, #0
   4ae84:	e2845098 	add	r5, r4, #152	; 0x98
   4ae88:	e5941014 	ldr	r1, [r4, #20]
   4ae8c:	e1d43cb0 	ldrh	r3, [r4, #192]	; 0xc0
   4ae90:	e1a00005 	mov	r0, r5
   4ae94:	e58d6000 	str	r6, [sp]
   4ae98:	ebffe364 	bl	43c30 <USBRequest>
   4ae9c:	e1a00005 	mov	r0, r5
   4aea0:	e1a02006 	mov	r2, r6
   4aea4:	e59f105c 	ldr	r1, [pc, #92]	; 4af08 <USBGamePadDeviceStartRequest+0xb0>
   4aea8:	e1a03004 	mov	r3, r4
   4aeac:	ebffe432 	bl	43f7c <USBRequestSetCompletionRoutine>
   4aeb0:	e1a00004 	mov	r0, r4
   4aeb4:	ebffe9a4 	bl	4554c <USBFunctionGetHost>
   4aeb8:	e1a01005 	mov	r1, r5
   4aebc:	e28dd008 	add	sp, sp, #8
   4aec0:	e8bd4070 	pop	{r4, r5, r6, lr}
   4aec4:	eaffd140 	b	3f3cc <DWHCIDeviceSubmitAsyncRequest>
   4aec8:	e3a02e1d 	mov	r2, #464	; 0x1d0
   4aecc:	e59f0038 	ldr	r0, [pc, #56]	; 4af0c <USBGamePadDeviceStartRequest+0xb4>
   4aed0:	e59f1038 	ldr	r1, [pc, #56]	; 4af10 <USBGamePadDeviceStartRequest+0xb8>
   4aed4:	ebffafdb 	bl	36e48 <uspi_assertion_failed>
   4aed8:	e59420bc 	ldr	r2, [r4, #188]	; 0xbc
   4aedc:	eaffffe7 	b	4ae80 <USBGamePadDeviceStartRequest+0x28>
   4aee0:	e59f002c 	ldr	r0, [pc, #44]	; 4af14 <USBGamePadDeviceStartRequest+0xbc>
   4aee4:	e59f1024 	ldr	r1, [pc, #36]	; 4af10 <USBGamePadDeviceStartRequest+0xb8>
   4aee8:	e59f2028 	ldr	r2, [pc, #40]	; 4af18 <USBGamePadDeviceStartRequest+0xc0>
   4aeec:	ebffafd5 	bl	36e48 <uspi_assertion_failed>
   4aef0:	eaffffdc 	b	4ae68 <USBGamePadDeviceStartRequest+0x10>
   4aef4:	e59f0020 	ldr	r0, [pc, #32]	; 4af1c <USBGamePadDeviceStartRequest+0xc4>
   4aef8:	e59f1010 	ldr	r1, [pc, #16]	; 4af10 <USBGamePadDeviceStartRequest+0xb8>
   4aefc:	e59f201c 	ldr	r2, [pc, #28]	; 4af20 <USBGamePadDeviceStartRequest+0xc8>
   4af00:	ebffafd0 	bl	36e48 <uspi_assertion_failed>
   4af04:	eaffffda 	b	4ae74 <USBGamePadDeviceStartRequest+0x1c>
   4af08:	0004b37c 	.word	0x0004b37c
   4af0c:	00057c98 	.word	0x00057c98
   4af10:	00057ebc 	.word	0x00057ebc
   4af14:	00056434 	.word	0x00056434
   4af18:	000001cd 	.word	0x000001cd
   4af1c:	00057a78 	.word	0x00057a78
   4af20:	000001cf 	.word	0x000001cf

0004af24 <USBGamePadDeviceConfigure>:
   4af24:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   4af28:	e2505000 	subs	r5, r0, #0
   4af2c:	e24dd020 	sub	sp, sp, #32
   4af30:	0a0000a5 	beq	4b1cc <USBGamePadDeviceConfigure+0x2a8>
   4af34:	e1a00005 	mov	r0, r5
   4af38:	ebffe941 	bl	45444 <USBFunctionGetNumEndpoints>
   4af3c:	e2504000 	subs	r4, r0, #0
   4af40:	e1a00005 	mov	r0, r5
   4af44:	0a000048 	beq	4b06c <USBGamePadDeviceConfigure+0x148>
   4af48:	e3a01021 	mov	r1, #33	; 0x21
   4af4c:	ebffe9cb 	bl	45680 <USBFunctionGetDescriptor>
   4af50:	e2506000 	subs	r6, r0, #0
   4af54:	0a000003 	beq	4af68 <USBGamePadDeviceConfigure+0x44>
   4af58:	e5d63007 	ldrb	r3, [r6, #7]
   4af5c:	e5d62008 	ldrb	r2, [r6, #8]
   4af60:	e1933402 	orrs	r3, r3, r2, lsl #8
   4af64:	1a00000a 	bne	4af94 <USBGamePadDeviceConfigure+0x70>
   4af68:	e1a00005 	mov	r0, r5
   4af6c:	e59f13d0 	ldr	r1, [pc, #976]	; 4b344 <USBGamePadDeviceConfigure+0x420>
   4af70:	ebffe9dc 	bl	456e8 <USBFunctionConfigurationError>
   4af74:	e3a04000 	mov	r4, #0
   4af78:	e1a00004 	mov	r0, r4
   4af7c:	e28dd020 	add	sp, sp, #32
   4af80:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   4af84:	e5d43003 	ldrb	r3, [r4, #3]
   4af88:	e203303f 	and	r3, r3, #63	; 0x3f
   4af8c:	e3530003 	cmp	r3, #3
   4af90:	0a00003a 	beq	4b080 <USBGamePadDeviceConfigure+0x15c>
   4af94:	e1a00005 	mov	r0, r5
   4af98:	e3a01005 	mov	r1, #5
   4af9c:	ebffe9b7 	bl	45680 <USBFunctionGetDescriptor>
   4afa0:	e2504000 	subs	r4, r0, #0
   4afa4:	1afffff6 	bne	4af84 <USBGamePadDeviceConfigure+0x60>
   4afa8:	e5954014 	ldr	r4, [r5, #20]
   4afac:	e3540000 	cmp	r4, #0
   4afb0:	0a00002c 	beq	4b068 <USBGamePadDeviceConfigure+0x144>
   4afb4:	e5d63007 	ldrb	r3, [r6, #7]
   4afb8:	e5d60008 	ldrb	r0, [r6, #8]
   4afbc:	e1830400 	orr	r0, r3, r0, lsl #8
   4afc0:	e1c509b0 	strh	r0, [r5, #144]	; 0x90
   4afc4:	ebffaf78 	bl	36dac <malloc>
   4afc8:	e3500000 	cmp	r0, #0
   4afcc:	e5850094 	str	r0, [r5, #148]	; 0x94
   4afd0:	0a00008b 	beq	4b204 <USBGamePadDeviceConfigure+0x2e0>
   4afd4:	e1a00005 	mov	r0, r5
   4afd8:	ebffe95b 	bl	4554c <USBFunctionGetHost>
   4afdc:	e1a08000 	mov	r8, r0
   4afe0:	e1a00005 	mov	r0, r5
   4afe4:	ebffe941 	bl	454f0 <USBFunctionGetEndpoint0>
   4afe8:	e1a07000 	mov	r7, r0
   4afec:	e1a00005 	mov	r0, r5
   4aff0:	e5d64006 	ldrb	r4, [r6, #6]
   4aff4:	ebffea1d 	bl	45870 <USBFunctionGetInterfaceNumber>
   4aff8:	e1a04404 	lsl	r4, r4, #8
   4affc:	e6ff0070 	uxth	r0, r0
   4b000:	e58d0004 	str	r0, [sp, #4]
   4b004:	e58d4000 	str	r4, [sp]
   4b008:	e5953094 	ldr	r3, [r5, #148]	; 0x94
   4b00c:	e1a00008 	mov	r0, r8
   4b010:	e58d3008 	str	r3, [sp, #8]
   4b014:	e5d62008 	ldrb	r2, [r6, #8]
   4b018:	e5d63007 	ldrb	r3, [r6, #7]
   4b01c:	e1a01007 	mov	r1, r7
   4b020:	e1833402 	orr	r3, r3, r2, lsl #8
   4b024:	e58d300c 	str	r3, [sp, #12]
   4b028:	e3a02081 	mov	r2, #129	; 0x81
   4b02c:	e3a03006 	mov	r3, #6
   4b030:	ebffd1f0 	bl	3f7f8 <DWHCIDeviceControlMessage>
   4b034:	e5d63007 	ldrb	r3, [r6, #7]
   4b038:	e5d62008 	ldrb	r2, [r6, #8]
   4b03c:	e1833402 	orr	r3, r3, r2, lsl #8
   4b040:	e1500003 	cmp	r0, r3
   4b044:	0a000020 	beq	4b0cc <USBGamePadDeviceConfigure+0x1a8>
   4b048:	e3a04000 	mov	r4, #0
   4b04c:	e59f02f0 	ldr	r0, [pc, #752]	; 4b344 <USBGamePadDeviceConfigure+0x420>
   4b050:	e3a01001 	mov	r1, #1
   4b054:	e59f22ec 	ldr	r2, [pc, #748]	; 4b348 <USBGamePadDeviceConfigure+0x424>
   4b058:	ebff6446 	bl	24178 <LogWrite>
   4b05c:	e1a00004 	mov	r0, r4
   4b060:	e28dd020 	add	sp, sp, #32
   4b064:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   4b068:	e1a00005 	mov	r0, r5
   4b06c:	e59f12d0 	ldr	r1, [pc, #720]	; 4b344 <USBGamePadDeviceConfigure+0x420>
   4b070:	ebffe99c 	bl	456e8 <USBFunctionConfigurationError>
   4b074:	e1a00004 	mov	r0, r4
   4b078:	e28dd020 	add	sp, sp, #32
   4b07c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   4b080:	e1d430d2 	ldrsb	r3, [r4, #2]
   4b084:	e3530000 	cmp	r3, #0
   4b088:	ba000041 	blt	4b194 <USBGamePadDeviceConfigure+0x270>
   4b08c:	e5953018 	ldr	r3, [r5, #24]
   4b090:	e3530000 	cmp	r3, #0
   4b094:	1affffb3 	bne	4af68 <USBGamePadDeviceConfigure+0x44>
   4b098:	e3a00018 	mov	r0, #24
   4b09c:	ebffaf42 	bl	36dac <malloc>
   4b0a0:	e3500000 	cmp	r0, #0
   4b0a4:	e5850018 	str	r0, [r5, #24]
   4b0a8:	0a00005a 	beq	4b218 <USBGamePadDeviceConfigure+0x2f4>
   4b0ac:	e1a07000 	mov	r7, r0
   4b0b0:	e1a00005 	mov	r0, r5
   4b0b4:	ebffe8f9 	bl	454a0 <USBFunctionGetDevice>
   4b0b8:	e1a02004 	mov	r2, r4
   4b0bc:	e1a01000 	mov	r1, r0
   4b0c0:	e1a00007 	mov	r0, r7
   4b0c4:	ebffe15d 	bl	43640 <USBEndpoint2>
   4b0c8:	eaffffb1 	b	4af94 <USBGamePadDeviceConfigure+0x70>
   4b0cc:	e3a02000 	mov	r2, #0
   4b0d0:	e59530bc 	ldr	r3, [r5, #188]	; 0xbc
   4b0d4:	e1a00005 	mov	r0, r5
   4b0d8:	e5c32000 	strb	r2, [r3]
   4b0dc:	ebfffe43 	bl	4a9f0 <USBGamePadDeviceDecodeReport>
   4b0e0:	e595301c 	ldr	r3, [r5, #28]
   4b0e4:	e3530000 	cmp	r3, #0
   4b0e8:	1a000002 	bne	4b0f8 <USBGamePadDeviceConfigure+0x1d4>
   4b0ec:	e5953068 	ldr	r3, [r5, #104]	; 0x68
   4b0f0:	e3530000 	cmp	r3, #0
   4b0f4:	0a000039 	beq	4b1e0 <USBGamePadDeviceConfigure+0x2bc>
   4b0f8:	e1a00005 	mov	r0, r5
   4b0fc:	ebffe929 	bl	455a8 <USBFunctionConfigure>
   4b100:	e2504000 	subs	r4, r0, #0
   4b104:	0a000039 	beq	4b1f0 <USBGamePadDeviceConfigure+0x2cc>
   4b108:	e59f423c 	ldr	r4, [pc, #572]	; 4b34c <USBGamePadDeviceConfigure+0x428>
   4b10c:	e1a00005 	mov	r0, r5
   4b110:	e5943000 	ldr	r3, [r4]
   4b114:	e5853010 	str	r3, [r5, #16]
   4b118:	e2833001 	add	r3, r3, #1
   4b11c:	e5843000 	str	r3, [r4]
   4b120:	ebffe8de 	bl	454a0 <USBFunctionGetDevice>
   4b124:	e5902014 	ldr	r2, [r0, #20]
   4b128:	e59f1220 	ldr	r1, [pc, #544]	; 4b350 <USBGamePadDeviceConfigure+0x42c>
   4b12c:	e5d23008 	ldrb	r3, [r2, #8]
   4b130:	e5d22009 	ldrb	r2, [r2, #9]
   4b134:	e1833402 	orr	r3, r3, r2, lsl #8
   4b138:	e1530001 	cmp	r3, r1
   4b13c:	0a00003b 	beq	4b230 <USBGamePadDeviceConfigure+0x30c>
   4b140:	e28d0014 	add	r0, sp, #20
   4b144:	ebfff13f 	bl	47648 <String>
   4b148:	e59f1204 	ldr	r1, [pc, #516]	; 4b354 <USBGamePadDeviceConfigure+0x430>
   4b14c:	e5952010 	ldr	r2, [r5, #16]
   4b150:	e28d0014 	add	r0, sp, #20
   4b154:	ebfff3bb 	bl	48048 <StringFormat>
   4b158:	ebffe6ff 	bl	44d5c <DeviceNameServiceGet>
   4b15c:	e1a04000 	mov	r4, r0
   4b160:	e28d0014 	add	r0, sp, #20
   4b164:	ebfff16a 	bl	47714 <StringGet>
   4b168:	e1a02005 	mov	r2, r5
   4b16c:	e1a01000 	mov	r1, r0
   4b170:	e3a03000 	mov	r3, #0
   4b174:	e1a00004 	mov	r0, r4
   4b178:	ebffe686 	bl	44b98 <DeviceNameServiceAddDevice>
   4b17c:	e28d0014 	add	r0, sp, #20
   4b180:	ebfff152 	bl	476d0 <_String>
   4b184:	e1a00005 	mov	r0, r5
   4b188:	ebffff32 	bl	4ae58 <USBGamePadDeviceStartRequest>
   4b18c:	e1a04000 	mov	r4, r0
   4b190:	eaffff78 	b	4af78 <USBGamePadDeviceConfigure+0x54>
   4b194:	e5953014 	ldr	r3, [r5, #20]
   4b198:	e3530000 	cmp	r3, #0
   4b19c:	1affff71 	bne	4af68 <USBGamePadDeviceConfigure+0x44>
   4b1a0:	e3a00018 	mov	r0, #24
   4b1a4:	ebffaf00 	bl	36dac <malloc>
   4b1a8:	e3500000 	cmp	r0, #0
   4b1ac:	e5850014 	str	r0, [r5, #20]
   4b1b0:	1affffbd 	bne	4b0ac <USBGamePadDeviceConfigure+0x188>
   4b1b4:	e59f019c 	ldr	r0, [pc, #412]	; 4b358 <USBGamePadDeviceConfigure+0x434>
   4b1b8:	e59f119c 	ldr	r1, [pc, #412]	; 4b35c <USBGamePadDeviceConfigure+0x438>
   4b1bc:	e3a02f5d 	mov	r2, #372	; 0x174
   4b1c0:	ebffaf20 	bl	36e48 <uspi_assertion_failed>
   4b1c4:	e5957014 	ldr	r7, [r5, #20]
   4b1c8:	eaffffb8 	b	4b0b0 <USBGamePadDeviceConfigure+0x18c>
   4b1cc:	e59f018c 	ldr	r0, [pc, #396]	; 4b360 <USBGamePadDeviceConfigure+0x43c>
   4b1d0:	e59f1184 	ldr	r1, [pc, #388]	; 4b35c <USBGamePadDeviceConfigure+0x438>
   4b1d4:	e59f2188 	ldr	r2, [pc, #392]	; 4b364 <USBGamePadDeviceConfigure+0x440>
   4b1d8:	ebffaf1a 	bl	36e48 <uspi_assertion_failed>
   4b1dc:	eaffff54 	b	4af34 <USBGamePadDeviceConfigure+0x10>
   4b1e0:	e5954084 	ldr	r4, [r5, #132]	; 0x84
   4b1e4:	e3540000 	cmp	r4, #0
   4b1e8:	1affffc2 	bne	4b0f8 <USBGamePadDeviceConfigure+0x1d4>
   4b1ec:	eaffff61 	b	4af78 <USBGamePadDeviceConfigure+0x54>
   4b1f0:	e59f014c 	ldr	r0, [pc, #332]	; 4b344 <USBGamePadDeviceConfigure+0x420>
   4b1f4:	e3a01001 	mov	r1, #1
   4b1f8:	e59f2168 	ldr	r2, [pc, #360]	; 4b368 <USBGamePadDeviceConfigure+0x444>
   4b1fc:	ebff63dd 	bl	24178 <LogWrite>
   4b200:	eaffff5c 	b	4af78 <USBGamePadDeviceConfigure+0x54>
   4b204:	e59f0160 	ldr	r0, [pc, #352]	; 4b36c <USBGamePadDeviceConfigure+0x448>
   4b208:	e59f114c 	ldr	r1, [pc, #332]	; 4b35c <USBGamePadDeviceConfigure+0x438>
   4b20c:	e3a02e19 	mov	r2, #400	; 0x190
   4b210:	ebffaf0c 	bl	36e48 <uspi_assertion_failed>
   4b214:	eaffff6e 	b	4afd4 <USBGamePadDeviceConfigure+0xb0>
   4b218:	e59f0150 	ldr	r0, [pc, #336]	; 4b370 <USBGamePadDeviceConfigure+0x44c>
   4b21c:	e59f1138 	ldr	r1, [pc, #312]	; 4b35c <USBGamePadDeviceConfigure+0x438>
   4b220:	e59f214c 	ldr	r2, [pc, #332]	; 4b374 <USBGamePadDeviceConfigure+0x450>
   4b224:	ebffaf07 	bl	36e48 <uspi_assertion_failed>
   4b228:	e5957018 	ldr	r7, [r5, #24]
   4b22c:	eaffff9f 	b	4b0b0 <USBGamePadDeviceConfigure+0x18c>
   4b230:	e1a00005 	mov	r0, r5
   4b234:	ebffe899 	bl	454a0 <USBFunctionGetDevice>
   4b238:	e5902014 	ldr	r2, [r0, #20]
   4b23c:	e5d2300a 	ldrb	r3, [r2, #10]
   4b240:	e5d2200b 	ldrb	r2, [r2, #11]
   4b244:	e1833402 	orr	r3, r3, r2, lsl #8
   4b248:	e3530f9a 	cmp	r3, #616	; 0x268
   4b24c:	1affffbb 	bne	4b140 <USBGamePadDeviceConfigure+0x21c>
   4b250:	e3a0c042 	mov	ip, #66	; 0x42
   4b254:	e3a0100c 	mov	r1, #12
   4b258:	e3a03000 	mov	r3, #0
   4b25c:	e59520bc 	ldr	r2, [r5, #188]	; 0xbc
   4b260:	e1a00005 	mov	r0, r5
   4b264:	e5c2c000 	strb	ip, [r2]
   4b268:	e59520bc 	ldr	r2, [r5, #188]	; 0xbc
   4b26c:	e2844004 	add	r4, r4, #4
   4b270:	e5c21001 	strb	r1, [r2, #1]
   4b274:	e59520bc 	ldr	r2, [r5, #188]	; 0xbc
   4b278:	e5c23002 	strb	r3, [r2, #2]
   4b27c:	e59520bc 	ldr	r2, [r5, #188]	; 0xbc
   4b280:	e5c23003 	strb	r3, [r2, #3]
   4b284:	ebffe8b0 	bl	4554c <USBFunctionGetHost>
   4b288:	e1a07000 	mov	r7, r0
   4b28c:	e1a00005 	mov	r0, r5
   4b290:	ebffe896 	bl	454f0 <USBFunctionGetEndpoint0>
   4b294:	e1a06000 	mov	r6, r0
   4b298:	e1a00005 	mov	r0, r5
   4b29c:	ebffe973 	bl	45870 <USBFunctionGetInterfaceNumber>
   4b2a0:	e3a02ffd 	mov	r2, #1012	; 0x3f4
   4b2a4:	e3a03004 	mov	r3, #4
   4b2a8:	e6ff0070 	uxth	r0, r0
   4b2ac:	e58d0004 	str	r0, [sp, #4]
   4b2b0:	e58d2000 	str	r2, [sp]
   4b2b4:	e59520bc 	ldr	r2, [r5, #188]	; 0xbc
   4b2b8:	e1a01006 	mov	r1, r6
   4b2bc:	e58d2008 	str	r2, [sp, #8]
   4b2c0:	e58d300c 	str	r3, [sp, #12]
   4b2c4:	e1a00007 	mov	r0, r7
   4b2c8:	e3a02021 	mov	r2, #33	; 0x21
   4b2cc:	e3a03009 	mov	r3, #9
   4b2d0:	ebffd148 	bl	3f7f8 <DWHCIDeviceControlMessage>
   4b2d4:	e5951010 	ldr	r1, [r5, #16]
   4b2d8:	e59f2064 	ldr	r2, [pc, #100]	; 4b344 <USBGamePadDeviceConfigure+0x420>
   4b2dc:	e5d43009 	ldrb	r3, [r4, #9]
   4b2e0:	e0822001 	add	r2, r2, r1
   4b2e4:	e5d22008 	ldrb	r2, [r2, #8]
   4b2e8:	e1a00005 	mov	r0, r5
   4b2ec:	e1833082 	orr	r3, r3, r2, lsl #1
   4b2f0:	e5c43009 	strb	r3, [r4, #9]
   4b2f4:	ebffe894 	bl	4554c <USBFunctionGetHost>
   4b2f8:	e1a07000 	mov	r7, r0
   4b2fc:	e1a00005 	mov	r0, r5
   4b300:	ebffe87a 	bl	454f0 <USBFunctionGetEndpoint0>
   4b304:	e1a06000 	mov	r6, r0
   4b308:	e1a00005 	mov	r0, r5
   4b30c:	ebffe957 	bl	45870 <USBFunctionGetInterfaceNumber>
   4b310:	e3a02030 	mov	r2, #48	; 0x30
   4b314:	e59f305c 	ldr	r3, [pc, #92]	; 4b378 <USBGamePadDeviceConfigure+0x454>
   4b318:	e6ff0070 	uxth	r0, r0
   4b31c:	e58d0004 	str	r0, [sp, #4]
   4b320:	e58d200c 	str	r2, [sp, #12]
   4b324:	e58d3000 	str	r3, [sp]
   4b328:	e1a00007 	mov	r0, r7
   4b32c:	e1a01006 	mov	r1, r6
   4b330:	e58d4008 	str	r4, [sp, #8]
   4b334:	e3a02021 	mov	r2, #33	; 0x21
   4b338:	e3a03009 	mov	r3, #9
   4b33c:	ebffd12d 	bl	3f7f8 <DWHCIDeviceControlMessage>
   4b340:	eaffff7e 	b	4b140 <USBGamePadDeviceConfigure+0x21c>
   4b344:	00057eac 	.word	0x00057eac
   4b348:	00057e50 	.word	0x00057e50
   4b34c:	0006f52c 	.word	0x0006f52c
   4b350:	0000054c 	.word	0x0000054c
   4b354:	0005636c 	.word	0x0005636c
   4b358:	00057a78 	.word	0x00057a78
   4b35c:	00057ebc 	.word	0x00057ebc
   4b360:	00056434 	.word	0x00056434
   4b364:	00000153 	.word	0x00000153
   4b368:	00057470 	.word	0x00057470
   4b36c:	00057e2c 	.word	0x00057e2c
   4b370:	00057a94 	.word	0x00057a94
   4b374:	00000181 	.word	0x00000181
   4b378:	00000201 	.word	0x00000201

0004b37c <USBGamePadDeviceCompletionRoutine>:
   4b37c:	e92d4070 	push	{r4, r5, r6, lr}
   4b380:	e2525000 	subs	r5, r2, #0
   4b384:	e1a04000 	mov	r4, r0
   4b388:	0a000023 	beq	4b41c <USBGamePadDeviceCompletionRoutine+0xa0>
   4b38c:	e3540000 	cmp	r4, #0
   4b390:	0a000026 	beq	4b430 <USBGamePadDeviceCompletionRoutine+0xb4>
   4b394:	e2856098 	add	r6, r5, #152	; 0x98
   4b398:	e1560004 	cmp	r6, r4
   4b39c:	0a000003 	beq	4b3b0 <USBGamePadDeviceCompletionRoutine+0x34>
   4b3a0:	e59f009c 	ldr	r0, [pc, #156]	; 4b444 <USBGamePadDeviceCompletionRoutine+0xc8>
   4b3a4:	e59f109c 	ldr	r1, [pc, #156]	; 4b448 <USBGamePadDeviceCompletionRoutine+0xcc>
   4b3a8:	e59f209c 	ldr	r2, [pc, #156]	; 4b44c <USBGamePadDeviceCompletionRoutine+0xd0>
   4b3ac:	ebffaea5 	bl	36e48 <uspi_assertion_failed>
   4b3b0:	e1a00004 	mov	r0, r4
   4b3b4:	ebffe28d 	bl	43df0 <USBRequestGetStatus>
   4b3b8:	e3500000 	cmp	r0, #0
   4b3bc:	1a000004 	bne	4b3d4 <USBGamePadDeviceCompletionRoutine+0x58>
   4b3c0:	e1a00006 	mov	r0, r6
   4b3c4:	ebffe249 	bl	43cf0 <_USBRequest>
   4b3c8:	e1a00005 	mov	r0, r5
   4b3cc:	e8bd4070 	pop	{r4, r5, r6, lr}
   4b3d0:	eafffea0 	b	4ae58 <USBGamePadDeviceStartRequest>
   4b3d4:	e1a00004 	mov	r0, r4
   4b3d8:	ebffe291 	bl	43e24 <USBRequestGetResultLength>
   4b3dc:	e3500000 	cmp	r0, #0
   4b3e0:	0afffff6 	beq	4b3c0 <USBGamePadDeviceCompletionRoutine+0x44>
   4b3e4:	e5953094 	ldr	r3, [r5, #148]	; 0x94
   4b3e8:	e3530000 	cmp	r3, #0
   4b3ec:	0afffff3 	beq	4b3c0 <USBGamePadDeviceCompletionRoutine+0x44>
   4b3f0:	e595308c 	ldr	r3, [r5, #140]	; 0x8c
   4b3f4:	e3530000 	cmp	r3, #0
   4b3f8:	0afffff0 	beq	4b3c0 <USBGamePadDeviceCompletionRoutine+0x44>
   4b3fc:	e1a00005 	mov	r0, r5
   4b400:	ebfffd7a 	bl	4a9f0 <USBGamePadDeviceDecodeReport>
   4b404:	e5950010 	ldr	r0, [r5, #16]
   4b408:	e595308c 	ldr	r3, [r5, #140]	; 0x8c
   4b40c:	e2400001 	sub	r0, r0, #1
   4b410:	e285101c 	add	r1, r5, #28
   4b414:	e12fff33 	blx	r3
   4b418:	eaffffe8 	b	4b3c0 <USBGamePadDeviceCompletionRoutine+0x44>
   4b41c:	e59f002c 	ldr	r0, [pc, #44]	; 4b450 <USBGamePadDeviceCompletionRoutine+0xd4>
   4b420:	e59f1020 	ldr	r1, [pc, #32]	; 4b448 <USBGamePadDeviceCompletionRoutine+0xcc>
   4b424:	e59f2028 	ldr	r2, [pc, #40]	; 4b454 <USBGamePadDeviceCompletionRoutine+0xd8>
   4b428:	ebffae86 	bl	36e48 <uspi_assertion_failed>
   4b42c:	eaffffd6 	b	4b38c <USBGamePadDeviceCompletionRoutine+0x10>
   4b430:	e59f0020 	ldr	r0, [pc, #32]	; 4b458 <USBGamePadDeviceCompletionRoutine+0xdc>
   4b434:	e59f100c 	ldr	r1, [pc, #12]	; 4b448 <USBGamePadDeviceCompletionRoutine+0xcc>
   4b438:	e59f201c 	ldr	r2, [pc, #28]	; 4b45c <USBGamePadDeviceCompletionRoutine+0xe0>
   4b43c:	ebffae81 	bl	36e48 <uspi_assertion_failed>
   4b440:	eaffffd3 	b	4b394 <USBGamePadDeviceCompletionRoutine+0x18>
   4b444:	00057cb4 	.word	0x00057cb4
   4b448:	00057ebc 	.word	0x00057ebc
   4b44c:	000001de 	.word	0x000001de
   4b450:	00056434 	.word	0x00056434
   4b454:	000001db 	.word	0x000001db
   4b458:	0005650c 	.word	0x0005650c
   4b45c:	000001dd 	.word	0x000001dd

0004b460 <USBGamePadDevice>:
   4b460:	e92d4038 	push	{r3, r4, r5, lr}
   4b464:	e2504000 	subs	r4, r0, #0
   4b468:	e1a05001 	mov	r5, r1
   4b46c:	0a000029 	beq	4b518 <USBGamePadDevice+0xb8>
   4b470:	e1a01005 	mov	r1, r5
   4b474:	e1a00004 	mov	r0, r4
   4b478:	ebffe773 	bl	4524c <USBFunctionCopy>
   4b47c:	e3a01000 	mov	r1, #0
   4b480:	e1a03004 	mov	r3, r4
   4b484:	e1a02001 	mov	r2, r1
   4b488:	e59f009c 	ldr	r0, [pc, #156]	; 4b52c <USBGamePadDevice+0xcc>
   4b48c:	e5841014 	str	r1, [r4, #20]
   4b490:	e5840000 	str	r0, [r4]
   4b494:	e5841018 	str	r1, [r4, #24]
   4b498:	e584108c 	str	r1, [r4, #140]	; 0x8c
   4b49c:	e5841094 	str	r1, [r4, #148]	; 0x94
   4b4a0:	e1c419b0 	strh	r1, [r4, #144]	; 0x90
   4b4a4:	e1c41cb0 	strh	r1, [r4, #192]	; 0xc0
   4b4a8:	e584101c 	str	r1, [r4, #28]
   4b4ac:	e2840048 	add	r0, r4, #72	; 0x48
   4b4b0:	e5832020 	str	r2, [r3, #32]
   4b4b4:	e5832024 	str	r2, [r3, #36]	; 0x24
   4b4b8:	e5832028 	str	r2, [r3, #40]	; 0x28
   4b4bc:	e283300c 	add	r3, r3, #12
   4b4c0:	e1530000 	cmp	r3, r0
   4b4c4:	e3a01000 	mov	r1, #0
   4b4c8:	1afffff8 	bne	4b4b0 <USBGamePadDevice+0x50>
   4b4cc:	e5841068 	str	r1, [r4, #104]	; 0x68
   4b4d0:	e584106c 	str	r1, [r4, #108]	; 0x6c
   4b4d4:	e5841070 	str	r1, [r4, #112]	; 0x70
   4b4d8:	e5841074 	str	r1, [r4, #116]	; 0x74
   4b4dc:	e5841078 	str	r1, [r4, #120]	; 0x78
   4b4e0:	e584107c 	str	r1, [r4, #124]	; 0x7c
   4b4e4:	e5841080 	str	r1, [r4, #128]	; 0x80
   4b4e8:	e5841084 	str	r1, [r4, #132]	; 0x84
   4b4ec:	e5841088 	str	r1, [r4, #136]	; 0x88
   4b4f0:	e3a00040 	mov	r0, #64	; 0x40
   4b4f4:	ebffae2c 	bl	36dac <malloc>
   4b4f8:	e3500000 	cmp	r0, #0
   4b4fc:	e58400bc 	str	r0, [r4, #188]	; 0xbc
   4b500:	18bd8038 	popne	{r3, r4, r5, pc}
   4b504:	e59f0024 	ldr	r0, [pc, #36]	; 4b530 <USBGamePadDevice+0xd0>
   4b508:	e59f1024 	ldr	r1, [pc, #36]	; 4b534 <USBGamePadDevice+0xd4>
   4b50c:	e3a02071 	mov	r2, #113	; 0x71
   4b510:	e8bd4038 	pop	{r3, r4, r5, lr}
   4b514:	eaffae4b 	b	36e48 <uspi_assertion_failed>
   4b518:	e59f0018 	ldr	r0, [pc, #24]	; 4b538 <USBGamePadDevice+0xd8>
   4b51c:	e59f1010 	ldr	r1, [pc, #16]	; 4b534 <USBGamePadDevice+0xd4>
   4b520:	e3a02056 	mov	r2, #86	; 0x56
   4b524:	ebffae47 	bl	36e48 <uspi_assertion_failed>
   4b528:	eaffffd0 	b	4b470 <USBGamePadDevice+0x10>
   4b52c:	0004af24 	.word	0x0004af24
   4b530:	00057c98 	.word	0x00057c98
   4b534:	00057ebc 	.word	0x00057ebc
   4b538:	00056434 	.word	0x00056434

0004b53c <_CUSBGamePadDevice>:
   4b53c:	e92d4010 	push	{r4, lr}
   4b540:	e2504000 	subs	r4, r0, #0
   4b544:	0a00001e 	beq	4b5c4 <_CUSBGamePadDevice+0x88>
   4b548:	e5940094 	ldr	r0, [r4, #148]	; 0x94
   4b54c:	e3500000 	cmp	r0, #0
   4b550:	0a000002 	beq	4b560 <_CUSBGamePadDevice+0x24>
   4b554:	ebffae15 	bl	36db0 <free>
   4b558:	e3a03000 	mov	r3, #0
   4b55c:	e5843094 	str	r3, [r4, #148]	; 0x94
   4b560:	e59400bc 	ldr	r0, [r4, #188]	; 0xbc
   4b564:	e3500000 	cmp	r0, #0
   4b568:	0a000002 	beq	4b578 <_CUSBGamePadDevice+0x3c>
   4b56c:	ebffae0f 	bl	36db0 <free>
   4b570:	e3a03000 	mov	r3, #0
   4b574:	e58430bc 	str	r3, [r4, #188]	; 0xbc
   4b578:	e5940014 	ldr	r0, [r4, #20]
   4b57c:	e3500000 	cmp	r0, #0
   4b580:	0a000004 	beq	4b598 <_CUSBGamePadDevice+0x5c>
   4b584:	ebffe0ca 	bl	438b4 <_USBEndpoint>
   4b588:	e5940014 	ldr	r0, [r4, #20]
   4b58c:	ebffae07 	bl	36db0 <free>
   4b590:	e3a03000 	mov	r3, #0
   4b594:	e5843014 	str	r3, [r4, #20]
   4b598:	e5940018 	ldr	r0, [r4, #24]
   4b59c:	e3500000 	cmp	r0, #0
   4b5a0:	0a000004 	beq	4b5b8 <_CUSBGamePadDevice+0x7c>
   4b5a4:	ebffe0c2 	bl	438b4 <_USBEndpoint>
   4b5a8:	e5940018 	ldr	r0, [r4, #24]
   4b5ac:	ebffadff 	bl	36db0 <free>
   4b5b0:	e3a03000 	mov	r3, #0
   4b5b4:	e5843018 	str	r3, [r4, #24]
   4b5b8:	e1a00004 	mov	r0, r4
   4b5bc:	e8bd4010 	pop	{r4, lr}
   4b5c0:	eaffe760 	b	45348 <_USBFunction>
   4b5c4:	e59f000c 	ldr	r0, [pc, #12]	; 4b5d8 <_CUSBGamePadDevice+0x9c>
   4b5c8:	e59f100c 	ldr	r1, [pc, #12]	; 4b5dc <_CUSBGamePadDevice+0xa0>
   4b5cc:	e3a02076 	mov	r2, #118	; 0x76
   4b5d0:	ebffae1c 	bl	36e48 <uspi_assertion_failed>
   4b5d4:	eaffffdb 	b	4b548 <_CUSBGamePadDevice+0xc>
   4b5d8:	00056434 	.word	0x00056434
   4b5dc:	00057ebc 	.word	0x00057ebc

0004b5e0 <USBGamePadDeviceRegisterStatusHandler>:
   4b5e0:	e92d4038 	push	{r3, r4, r5, lr}
   4b5e4:	e2505000 	subs	r5, r0, #0
   4b5e8:	e1a04001 	mov	r4, r1
   4b5ec:	0a000009 	beq	4b618 <USBGamePadDeviceRegisterStatusHandler+0x38>
   4b5f0:	e3540000 	cmp	r4, #0
   4b5f4:	0a000001 	beq	4b600 <USBGamePadDeviceRegisterStatusHandler+0x20>
   4b5f8:	e585408c 	str	r4, [r5, #140]	; 0x8c
   4b5fc:	e8bd8038 	pop	{r3, r4, r5, pc}
   4b600:	e59f0024 	ldr	r0, [pc, #36]	; 4b62c <USBGamePadDeviceRegisterStatusHandler+0x4c>
   4b604:	e59f1024 	ldr	r1, [pc, #36]	; 4b630 <USBGamePadDeviceRegisterStatusHandler+0x50>
   4b608:	e59f2024 	ldr	r2, [pc, #36]	; 4b634 <USBGamePadDeviceRegisterStatusHandler+0x54>
   4b60c:	ebffae0d 	bl	36e48 <uspi_assertion_failed>
   4b610:	e585408c 	str	r4, [r5, #140]	; 0x8c
   4b614:	e8bd8038 	pop	{r3, r4, r5, pc}
   4b618:	e59f0018 	ldr	r0, [pc, #24]	; 4b638 <USBGamePadDeviceRegisterStatusHandler+0x58>
   4b61c:	e59f100c 	ldr	r1, [pc, #12]	; 4b630 <USBGamePadDeviceRegisterStatusHandler+0x50>
   4b620:	e59f2014 	ldr	r2, [pc, #20]	; 4b63c <USBGamePadDeviceRegisterStatusHandler+0x5c>
   4b624:	ebffae07 	bl	36e48 <uspi_assertion_failed>
   4b628:	eafffff0 	b	4b5f0 <USBGamePadDeviceRegisterStatusHandler+0x10>
   4b62c:	00057e80 	.word	0x00057e80
   4b630:	00057ebc 	.word	0x00057ebc
   4b634:	000001c7 	.word	0x000001c7
   4b638:	00056434 	.word	0x00056434
   4b63c:	000001c6 	.word	0x000001c6

0004b640 <USBGamePadDeviceGetReport>:
   4b640:	e92d4070 	push	{r4, r5, r6, lr}
   4b644:	e24dd010 	sub	sp, sp, #16
   4b648:	e1a04000 	mov	r4, r0
   4b64c:	ebffe7be 	bl	4554c <USBFunctionGetHost>
   4b650:	e1a06000 	mov	r6, r0
   4b654:	e1a00004 	mov	r0, r4
   4b658:	ebffe7a4 	bl	454f0 <USBFunctionGetEndpoint0>
   4b65c:	e1a05000 	mov	r5, r0
   4b660:	e1a00004 	mov	r0, r4
   4b664:	ebffe881 	bl	45870 <USBFunctionGetInterfaceNumber>
   4b668:	e3a03c01 	mov	r3, #256	; 0x100
   4b66c:	e1d42cb0 	ldrh	r2, [r4, #192]	; 0xc0
   4b670:	e594c0bc 	ldr	ip, [r4, #188]	; 0xbc
   4b674:	e6ff0070 	uxth	r0, r0
   4b678:	e58d0004 	str	r0, [sp, #4]
   4b67c:	e58d200c 	str	r2, [sp, #12]
   4b680:	e58d3000 	str	r3, [sp]
   4b684:	e1a00006 	mov	r0, r6
   4b688:	e1a01005 	mov	r1, r5
   4b68c:	e58dc008 	str	ip, [sp, #8]
   4b690:	e3a020a1 	mov	r2, #161	; 0xa1
   4b694:	e3a03001 	mov	r3, #1
   4b698:	ebffd056 	bl	3f7f8 <DWHCIDeviceControlMessage>
   4b69c:	e3500000 	cmp	r0, #0
   4b6a0:	da000003 	ble	4b6b4 <USBGamePadDeviceGetReport+0x74>
   4b6a4:	e1a00004 	mov	r0, r4
   4b6a8:	e28dd010 	add	sp, sp, #16
   4b6ac:	e8bd4070 	pop	{r4, r5, r6, lr}
   4b6b0:	eafffcce 	b	4a9f0 <USBGamePadDeviceDecodeReport>
   4b6b4:	e28dd010 	add	sp, sp, #16
   4b6b8:	e8bd8070 	pop	{r4, r5, r6, pc}

0004b6bc <uspi_EnterCritical>:
   4b6bc:	e10f3000 	mrs	r3, CPSR
   4b6c0:	f10c0080 	cpsid	i
   4b6c4:	e59f1028 	ldr	r1, [pc, #40]	; 4b6f4 <uspi_EnterCritical+0x38>
   4b6c8:	e5912000 	ldr	r2, [r1]
   4b6cc:	e3520000 	cmp	r2, #0
   4b6d0:	01a033a3 	lsreq	r3, r3, #7
   4b6d4:	02233001 	eoreq	r3, r3, #1
   4b6d8:	02033001 	andeq	r3, r3, #1
   4b6dc:	e2822001 	add	r2, r2, #1
   4b6e0:	e5812000 	str	r2, [r1]
   4b6e4:	05813004 	streq	r3, [r1, #4]
   4b6e8:	e3a03000 	mov	r3, #0
   4b6ec:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   4b6f0:	e12fff1e 	bx	lr
   4b6f4:	000bfe60 	.word	0x000bfe60

0004b6f8 <uspi_LeaveCritical>:
   4b6f8:	e92d4010 	push	{r4, lr}
   4b6fc:	e3a03000 	mov	r3, #0
   4b700:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   4b704:	e59f4048 	ldr	r4, [pc, #72]	; 4b754 <uspi_LeaveCritical+0x5c>
   4b708:	e5943000 	ldr	r3, [r4]
   4b70c:	e3530000 	cmp	r3, #0
   4b710:	0a00000a 	beq	4b740 <uspi_LeaveCritical+0x48>
   4b714:	e5943000 	ldr	r3, [r4]
   4b718:	e59f2034 	ldr	r2, [pc, #52]	; 4b754 <uspi_LeaveCritical+0x5c>
   4b71c:	e2433001 	sub	r3, r3, #1
   4b720:	e3530000 	cmp	r3, #0
   4b724:	e5843000 	str	r3, [r4]
   4b728:	18bd8010 	popne	{r4, pc}
   4b72c:	e5923004 	ldr	r3, [r2, #4]
   4b730:	e3530000 	cmp	r3, #0
   4b734:	08bd8010 	popeq	{r4, pc}
   4b738:	f1080080 	cpsie	i
   4b73c:	e8bd8010 	pop	{r4, pc}
   4b740:	e59f0010 	ldr	r0, [pc, #16]	; 4b758 <uspi_LeaveCritical+0x60>
   4b744:	e59f1010 	ldr	r1, [pc, #16]	; 4b75c <uspi_LeaveCritical+0x64>
   4b748:	e3a0203b 	mov	r2, #59	; 0x3b
   4b74c:	ebffadbd 	bl	36e48 <uspi_assertion_failed>
   4b750:	eaffffef 	b	4b714 <uspi_LeaveCritical+0x1c>
   4b754:	000bfe60 	.word	0x000bfe60
   4b758:	00057ecc 	.word	0x00057ecc
   4b75c:	00057ee4 	.word	0x00057ee4

0004b760 <uspi_CleanAndInvalidateDataCacheRange>:
   4b760:	ee070f3e 	mcr	15, 0, r0, cr7, cr14, {1}
   4b764:	e2813020 	add	r3, r1, #32
   4b768:	e353001f 	cmp	r3, #31
   4b76c:	912fff1e 	bxls	lr
   4b770:	e2800020 	add	r0, r0, #32
   4b774:	e3c1101f 	bic	r1, r1, #31
   4b778:	e0801001 	add	r1, r0, r1
   4b77c:	ee070f3e 	mcr	15, 0, r0, cr7, cr14, {1}
   4b780:	e1500001 	cmp	r0, r1
   4b784:	012fff1e 	bxeq	lr
   4b788:	e2800020 	add	r0, r0, #32
   4b78c:	eafffffa 	b	4b77c <uspi_CleanAndInvalidateDataCacheRange+0x1c>

0004b790 <USBString>:
   4b790:	e92d4038 	push	{r3, r4, r5, lr}
   4b794:	e2504000 	subs	r4, r0, #0
   4b798:	e1a05001 	mov	r5, r1
   4b79c:	0a000012 	beq	4b7ec <USBString+0x5c>
   4b7a0:	e3550000 	cmp	r5, #0
   4b7a4:	e5845000 	str	r5, [r4]
   4b7a8:	0a000014 	beq	4b800 <USBString+0x70>
   4b7ac:	e3a03000 	mov	r3, #0
   4b7b0:	e3a0000c 	mov	r0, #12
   4b7b4:	e5843004 	str	r3, [r4, #4]
   4b7b8:	ebffad7b 	bl	36dac <malloc>
   4b7bc:	e3500000 	cmp	r0, #0
   4b7c0:	e5840008 	str	r0, [r4, #8]
   4b7c4:	0a000001 	beq	4b7d0 <USBString+0x40>
   4b7c8:	e8bd4038 	pop	{r3, r4, r5, lr}
   4b7cc:	eaffef9d 	b	47648 <String>
   4b7d0:	e59f003c 	ldr	r0, [pc, #60]	; 4b814 <USBString+0x84>
   4b7d4:	e59f103c 	ldr	r1, [pc, #60]	; 4b818 <USBString+0x88>
   4b7d8:	e3a02029 	mov	r2, #41	; 0x29
   4b7dc:	ebffad99 	bl	36e48 <uspi_assertion_failed>
   4b7e0:	e5940008 	ldr	r0, [r4, #8]
   4b7e4:	e8bd4038 	pop	{r3, r4, r5, lr}
   4b7e8:	eaffef96 	b	47648 <String>
   4b7ec:	e59f0028 	ldr	r0, [pc, #40]	; 4b81c <USBString+0x8c>
   4b7f0:	e59f1020 	ldr	r1, [pc, #32]	; 4b818 <USBString+0x88>
   4b7f4:	e3a02021 	mov	r2, #33	; 0x21
   4b7f8:	ebffad92 	bl	36e48 <uspi_assertion_failed>
   4b7fc:	eaffffe7 	b	4b7a0 <USBString+0x10>
   4b800:	e59f0018 	ldr	r0, [pc, #24]	; 4b820 <USBString+0x90>
   4b804:	e59f100c 	ldr	r1, [pc, #12]	; 4b818 <USBString+0x88>
   4b808:	e3a02024 	mov	r2, #36	; 0x24
   4b80c:	ebffad8d 	bl	36e48 <uspi_assertion_failed>
   4b810:	eaffffe5 	b	4b7ac <USBString+0x1c>
   4b814:	00057f00 	.word	0x00057f00
   4b818:	00057ef4 	.word	0x00057ef4
   4b81c:	00056434 	.word	0x00056434
   4b820:	00056ae4 	.word	0x00056ae4

0004b824 <USBStringCopy>:
   4b824:	e92d4038 	push	{r3, r4, r5, lr}
   4b828:	e2505000 	subs	r5, r0, #0
   4b82c:	e1a04001 	mov	r4, r1
   4b830:	0a000025 	beq	4b8cc <USBStringCopy+0xa8>
   4b834:	e3540000 	cmp	r4, #0
   4b838:	0a000028 	beq	4b8e0 <USBStringCopy+0xbc>
   4b83c:	e3a03000 	mov	r3, #0
   4b840:	e5942000 	ldr	r2, [r4]
   4b844:	e5853004 	str	r3, [r5, #4]
   4b848:	e5943004 	ldr	r3, [r4, #4]
   4b84c:	e5852000 	str	r2, [r5]
   4b850:	e3530000 	cmp	r3, #0
   4b854:	0a000007 	beq	4b878 <USBStringCopy+0x54>
   4b858:	e5d30000 	ldrb	r0, [r3]
   4b85c:	ebffad52 	bl	36dac <malloc>
   4b860:	e3500000 	cmp	r0, #0
   4b864:	e5850004 	str	r0, [r5, #4]
   4b868:	0a000026 	beq	4b908 <USBStringCopy+0xe4>
   4b86c:	e5941004 	ldr	r1, [r4, #4]
   4b870:	e5d12000 	ldrb	r2, [r1]
   4b874:	ebfff212 	bl	480c4 <uspi_memcpy>
   4b878:	e5943008 	ldr	r3, [r4, #8]
   4b87c:	e3530000 	cmp	r3, #0
   4b880:	0a00001b 	beq	4b8f4 <USBStringCopy+0xd0>
   4b884:	e3a0000c 	mov	r0, #12
   4b888:	ebffad47 	bl	36dac <malloc>
   4b88c:	e3500000 	cmp	r0, #0
   4b890:	e5850008 	str	r0, [r5, #8]
   4b894:	11a05000 	movne	r5, r0
   4b898:	0a000005 	beq	4b8b4 <USBStringCopy+0x90>
   4b89c:	e5940008 	ldr	r0, [r4, #8]
   4b8a0:	ebffef9b 	bl	47714 <StringGet>
   4b8a4:	e1a01000 	mov	r1, r0
   4b8a8:	e1a00005 	mov	r0, r5
   4b8ac:	e8bd4038 	pop	{r3, r4, r5, lr}
   4b8b0:	eaffef72 	b	47680 <String2>
   4b8b4:	e59f0064 	ldr	r0, [pc, #100]	; 4b920 <USBStringCopy+0xfc>
   4b8b8:	e59f1064 	ldr	r1, [pc, #100]	; 4b924 <USBStringCopy+0x100>
   4b8bc:	e3a0203d 	mov	r2, #61	; 0x3d
   4b8c0:	ebffad60 	bl	36e48 <uspi_assertion_failed>
   4b8c4:	e5955008 	ldr	r5, [r5, #8]
   4b8c8:	eafffff3 	b	4b89c <USBStringCopy+0x78>
   4b8cc:	e59f0054 	ldr	r0, [pc, #84]	; 4b928 <USBStringCopy+0x104>
   4b8d0:	e59f104c 	ldr	r1, [pc, #76]	; 4b924 <USBStringCopy+0x100>
   4b8d4:	e3a0202f 	mov	r2, #47	; 0x2f
   4b8d8:	ebffad5a 	bl	36e48 <uspi_assertion_failed>
   4b8dc:	eaffffd4 	b	4b834 <USBStringCopy+0x10>
   4b8e0:	e59f0044 	ldr	r0, [pc, #68]	; 4b92c <USBStringCopy+0x108>
   4b8e4:	e59f1038 	ldr	r1, [pc, #56]	; 4b924 <USBStringCopy+0x100>
   4b8e8:	e3a02030 	mov	r2, #48	; 0x30
   4b8ec:	ebffad55 	bl	36e48 <uspi_assertion_failed>
   4b8f0:	eaffffd1 	b	4b83c <USBStringCopy+0x18>
   4b8f4:	e59f0034 	ldr	r0, [pc, #52]	; 4b930 <USBStringCopy+0x10c>
   4b8f8:	e59f1024 	ldr	r1, [pc, #36]	; 4b924 <USBStringCopy+0x100>
   4b8fc:	e3a0203b 	mov	r2, #59	; 0x3b
   4b900:	ebffad50 	bl	36e48 <uspi_assertion_failed>
   4b904:	eaffffde 	b	4b884 <USBStringCopy+0x60>
   4b908:	e59f0024 	ldr	r0, [pc, #36]	; 4b934 <USBStringCopy+0x110>
   4b90c:	e59f1010 	ldr	r1, [pc, #16]	; 4b924 <USBStringCopy+0x100>
   4b910:	e3a02037 	mov	r2, #55	; 0x37
   4b914:	ebffad4b 	bl	36e48 <uspi_assertion_failed>
   4b918:	e5950004 	ldr	r0, [r5, #4]
   4b91c:	eaffffd2 	b	4b86c <USBStringCopy+0x48>
   4b920:	00057f00 	.word	0x00057f00
   4b924:	00057ef4 	.word	0x00057ef4
   4b928:	00056434 	.word	0x00056434
   4b92c:	00056f28 	.word	0x00056f28
   4b930:	00057f34 	.word	0x00057f34
   4b934:	00057f18 	.word	0x00057f18

0004b938 <_USBString>:
   4b938:	e92d4038 	push	{r3, r4, r5, lr}
   4b93c:	e2504000 	subs	r4, r0, #0
   4b940:	0a00000f 	beq	4b984 <_USBString+0x4c>
   4b944:	e5940008 	ldr	r0, [r4, #8]
   4b948:	e3500000 	cmp	r0, #0
   4b94c:	0a000011 	beq	4b998 <_USBString+0x60>
   4b950:	e3a05000 	mov	r5, #0
   4b954:	ebffef5d 	bl	476d0 <_String>
   4b958:	e5940008 	ldr	r0, [r4, #8]
   4b95c:	ebffad13 	bl	36db0 <free>
   4b960:	e5940004 	ldr	r0, [r4, #4]
   4b964:	e5845008 	str	r5, [r4, #8]
   4b968:	e1500005 	cmp	r0, r5
   4b96c:	0a000001 	beq	4b978 <_USBString+0x40>
   4b970:	ebffad0e 	bl	36db0 <free>
   4b974:	e5845004 	str	r5, [r4, #4]
   4b978:	e3a03000 	mov	r3, #0
   4b97c:	e5843000 	str	r3, [r4]
   4b980:	e8bd8038 	pop	{r3, r4, r5, pc}
   4b984:	e59f0024 	ldr	r0, [pc, #36]	; 4b9b0 <_USBString+0x78>
   4b988:	e59f1024 	ldr	r1, [pc, #36]	; 4b9b4 <_USBString+0x7c>
   4b98c:	e3a02043 	mov	r2, #67	; 0x43
   4b990:	ebffad2c 	bl	36e48 <uspi_assertion_failed>
   4b994:	eaffffea 	b	4b944 <_USBString+0xc>
   4b998:	e59f0018 	ldr	r0, [pc, #24]	; 4b9b8 <_USBString+0x80>
   4b99c:	e59f1010 	ldr	r1, [pc, #16]	; 4b9b4 <_USBString+0x7c>
   4b9a0:	e3a02045 	mov	r2, #69	; 0x45
   4b9a4:	ebffad27 	bl	36e48 <uspi_assertion_failed>
   4b9a8:	e5940008 	ldr	r0, [r4, #8]
   4b9ac:	eaffffe7 	b	4b950 <_USBString+0x18>
   4b9b0:	00056434 	.word	0x00056434
   4b9b4:	00057ef4 	.word	0x00057ef4
   4b9b8:	00057f00 	.word	0x00057f00

0004b9bc <USBStringGetFromDescriptor>:
   4b9bc:	e92d4bf0 	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   4b9c0:	e2504000 	subs	r4, r0, #0
   4b9c4:	e28db01c 	add	fp, sp, #28
   4b9c8:	e24dd010 	sub	sp, sp, #16
   4b9cc:	e1a05001 	mov	r5, r1
   4b9d0:	e1a07002 	mov	r7, r2
   4b9d4:	0a000068 	beq	4bb7c <USBStringGetFromDescriptor+0x1c0>
   4b9d8:	e3550000 	cmp	r5, #0
   4b9dc:	0a000028 	beq	4ba84 <USBStringGetFromDescriptor+0xc8>
   4b9e0:	e5940004 	ldr	r0, [r4, #4]
   4b9e4:	e3500000 	cmp	r0, #0
   4b9e8:	0a000000 	beq	4b9f0 <USBStringGetFromDescriptor+0x34>
   4b9ec:	ebffacef 	bl	36db0 <free>
   4b9f0:	e3a00004 	mov	r0, #4
   4b9f4:	ebffacec 	bl	36dac <malloc>
   4b9f8:	e3500000 	cmp	r0, #0
   4b9fc:	e5840004 	str	r0, [r4, #4]
   4ba00:	0a000052 	beq	4bb50 <USBStringGetFromDescriptor+0x194>
   4ba04:	e5940000 	ldr	r0, [r4]
   4ba08:	e3500000 	cmp	r0, #0
   4ba0c:	0a000054 	beq	4bb64 <USBStringGetFromDescriptor+0x1a8>
   4ba10:	ebffdb4f 	bl	42754 <USBDeviceGetHost>
   4ba14:	e1a06000 	mov	r6, r0
   4ba18:	e5940000 	ldr	r0, [r4]
   4ba1c:	ebffdb36 	bl	426fc <USBDeviceGetEndpoint0>
   4ba20:	e3a03004 	mov	r3, #4
   4ba24:	e3855c03 	orr	r5, r5, #768	; 0x300
   4ba28:	e88d00a0 	stm	sp, {r5, r7}
   4ba2c:	e5942004 	ldr	r2, [r4, #4]
   4ba30:	e1a01000 	mov	r1, r0
   4ba34:	e58d2008 	str	r2, [sp, #8]
   4ba38:	e58d300c 	str	r3, [sp, #12]
   4ba3c:	e1a00006 	mov	r0, r6
   4ba40:	e3a02080 	mov	r2, #128	; 0x80
   4ba44:	e3a03006 	mov	r3, #6
   4ba48:	ebffcf6a 	bl	3f7f8 <DWHCIDeviceControlMessage>
   4ba4c:	e3500000 	cmp	r0, #0
   4ba50:	ba000008 	blt	4ba78 <USBStringGetFromDescriptor+0xbc>
   4ba54:	e5940004 	ldr	r0, [r4, #4]
   4ba58:	e5d06000 	ldrb	r6, [r0]
   4ba5c:	e3560001 	cmp	r6, #1
   4ba60:	9a000004 	bls	4ba78 <USBStringGetFromDescriptor+0xbc>
   4ba64:	e2168001 	ands	r8, r6, #1
   4ba68:	1a000002 	bne	4ba78 <USBStringGetFromDescriptor+0xbc>
   4ba6c:	e5d03001 	ldrb	r3, [r0, #1]
   4ba70:	e3530003 	cmp	r3, #3
   4ba74:	0a000007 	beq	4ba98 <USBStringGetFromDescriptor+0xdc>
   4ba78:	e3a00000 	mov	r0, #0
   4ba7c:	e24bd01c 	sub	sp, fp, #28
   4ba80:	e8bd8bf0 	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   4ba84:	e59f01f0 	ldr	r0, [pc, #496]	; 4bc7c <USBStringGetFromDescriptor+0x2c0>
   4ba88:	e59f11f0 	ldr	r1, [pc, #496]	; 4bc80 <USBStringGetFromDescriptor+0x2c4>
   4ba8c:	e3a02056 	mov	r2, #86	; 0x56
   4ba90:	ebffacec 	bl	36e48 <uspi_assertion_failed>
   4ba94:	eaffffd1 	b	4b9e0 <USBStringGetFromDescriptor+0x24>
   4ba98:	e3560004 	cmp	r6, #4
   4ba9c:	91a03006 	movls	r3, r6
   4baa0:	8a00003a 	bhi	4bb90 <USBStringGetFromDescriptor+0x1d4>
   4baa4:	e2436002 	sub	r6, r3, #2
   4baa8:	e0866fa6 	add	r6, r6, r6, lsr #31
   4baac:	e1a050c6 	asr	r5, r6, #1
   4bab0:	e355007e 	cmp	r5, #126	; 0x7e
   4bab4:	8a000055 	bhi	4bc10 <USBStringGetFromDescriptor+0x254>
   4bab8:	e2853008 	add	r3, r5, #8
   4babc:	e3c33007 	bic	r3, r3, #7
   4bac0:	e04dd003 	sub	sp, sp, r3
   4bac4:	e3550000 	cmp	r5, #0
   4bac8:	e28d7010 	add	r7, sp, #16
   4bacc:	0a00000d 	beq	4bb08 <USBStringGetFromDescriptor+0x14c>
   4bad0:	e3a02000 	mov	r2, #0
   4bad4:	e247c001 	sub	ip, r7, #1
   4bad8:	e0801082 	add	r1, r0, r2, lsl #1
   4badc:	e5d13002 	ldrb	r3, [r1, #2]
   4bae0:	e5d11003 	ldrb	r1, [r1, #3]
   4bae4:	e2822001 	add	r2, r2, #1
   4bae8:	e1833401 	orr	r3, r3, r1, lsl #8
   4baec:	e2431020 	sub	r1, r3, #32
   4baf0:	e351005e 	cmp	r1, #94	; 0x5e
   4baf4:	83a0305f 	movhi	r3, #95	; 0x5f
   4baf8:	96ef3073 	uxtbls	r3, r3
   4bafc:	e1550002 	cmp	r5, r2
   4bb00:	e5ec3001 	strb	r3, [ip, #1]!
   4bb04:	1afffff3 	bne	4bad8 <USBStringGetFromDescriptor+0x11c>
   4bb08:	e3a03000 	mov	r3, #0
   4bb0c:	e5940008 	ldr	r0, [r4, #8]
   4bb10:	e7c730c6 	strb	r3, [r7, r6, asr #1]
   4bb14:	e1500003 	cmp	r0, r3
   4bb18:	0a00004c 	beq	4bc50 <USBStringGetFromDescriptor+0x294>
   4bb1c:	ebffeeeb 	bl	476d0 <_String>
   4bb20:	e5940008 	ldr	r0, [r4, #8]
   4bb24:	ebffaca1 	bl	36db0 <free>
   4bb28:	e3a0000c 	mov	r0, #12
   4bb2c:	ebffac9e 	bl	36dac <malloc>
   4bb30:	e3500000 	cmp	r0, #0
   4bb34:	e5840008 	str	r0, [r4, #8]
   4bb38:	0a00003e 	beq	4bc38 <USBStringGetFromDescriptor+0x27c>
   4bb3c:	e1a01007 	mov	r1, r7
   4bb40:	ebffeece 	bl	47680 <String2>
   4bb44:	e3a00001 	mov	r0, #1
   4bb48:	e24bd01c 	sub	sp, fp, #28
   4bb4c:	e8bd8bf0 	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   4bb50:	e59f012c 	ldr	r0, [pc, #300]	; 4bc84 <USBStringGetFromDescriptor+0x2c8>
   4bb54:	e59f1124 	ldr	r1, [pc, #292]	; 4bc80 <USBStringGetFromDescriptor+0x2c4>
   4bb58:	e3a0205d 	mov	r2, #93	; 0x5d
   4bb5c:	ebffacb9 	bl	36e48 <uspi_assertion_failed>
   4bb60:	eaffffa7 	b	4ba04 <USBStringGetFromDescriptor+0x48>
   4bb64:	e59f011c 	ldr	r0, [pc, #284]	; 4bc88 <USBStringGetFromDescriptor+0x2cc>
   4bb68:	e59f1110 	ldr	r1, [pc, #272]	; 4bc80 <USBStringGetFromDescriptor+0x2c4>
   4bb6c:	e3a0205f 	mov	r2, #95	; 0x5f
   4bb70:	ebffacb4 	bl	36e48 <uspi_assertion_failed>
   4bb74:	e5940000 	ldr	r0, [r4]
   4bb78:	eaffffa4 	b	4ba10 <USBStringGetFromDescriptor+0x54>
   4bb7c:	e59f0108 	ldr	r0, [pc, #264]	; 4bc8c <USBStringGetFromDescriptor+0x2d0>
   4bb80:	e59f10f8 	ldr	r1, [pc, #248]	; 4bc80 <USBStringGetFromDescriptor+0x2c4>
   4bb84:	e3a02055 	mov	r2, #85	; 0x55
   4bb88:	ebffacae 	bl	36e48 <uspi_assertion_failed>
   4bb8c:	eaffff91 	b	4b9d8 <USBStringGetFromDescriptor+0x1c>
   4bb90:	ebffac86 	bl	36db0 <free>
   4bb94:	e1a00006 	mov	r0, r6
   4bb98:	ebffac83 	bl	36dac <malloc>
   4bb9c:	e3500000 	cmp	r0, #0
   4bba0:	e5840004 	str	r0, [r4, #4]
   4bba4:	0a00002f 	beq	4bc68 <USBStringGetFromDescriptor+0x2ac>
   4bba8:	e5940000 	ldr	r0, [r4]
   4bbac:	ebffdae8 	bl	42754 <USBDeviceGetHost>
   4bbb0:	e1a09000 	mov	r9, r0
   4bbb4:	e5940000 	ldr	r0, [r4]
   4bbb8:	ebffdacf 	bl	426fc <USBDeviceGetEndpoint0>
   4bbbc:	e88d00a0 	stm	sp, {r5, r7}
   4bbc0:	e5943004 	ldr	r3, [r4, #4]
   4bbc4:	e1a01000 	mov	r1, r0
   4bbc8:	e58d3008 	str	r3, [sp, #8]
   4bbcc:	e1a00009 	mov	r0, r9
   4bbd0:	e58d600c 	str	r6, [sp, #12]
   4bbd4:	e3a02080 	mov	r2, #128	; 0x80
   4bbd8:	e3a03006 	mov	r3, #6
   4bbdc:	ebffcf05 	bl	3f7f8 <DWHCIDeviceControlMessage>
   4bbe0:	e1500006 	cmp	r0, r6
   4bbe4:	1affffa3 	bne	4ba78 <USBStringGetFromDescriptor+0xbc>
   4bbe8:	e5940004 	ldr	r0, [r4, #4]
   4bbec:	e5d03000 	ldrb	r3, [r0]
   4bbf0:	e1530006 	cmp	r3, r6
   4bbf4:	1affff9f 	bne	4ba78 <USBStringGetFromDescriptor+0xbc>
   4bbf8:	e3580000 	cmp	r8, #0
   4bbfc:	1affff9d 	bne	4ba78 <USBStringGetFromDescriptor+0xbc>
   4bc00:	e5d02001 	ldrb	r2, [r0, #1]
   4bc04:	e3520003 	cmp	r2, #3
   4bc08:	1affff9a 	bne	4ba78 <USBStringGetFromDescriptor+0xbc>
   4bc0c:	eaffffa4 	b	4baa4 <USBStringGetFromDescriptor+0xe8>
   4bc10:	e59f0078 	ldr	r0, [pc, #120]	; 4bc90 <USBStringGetFromDescriptor+0x2d4>
   4bc14:	e59f1064 	ldr	r1, [pc, #100]	; 4bc80 <USBStringGetFromDescriptor+0x2c4>
   4bc18:	e3a0208d 	mov	r2, #141	; 0x8d
   4bc1c:	ebffac89 	bl	36e48 <uspi_assertion_failed>
   4bc20:	e2853008 	add	r3, r5, #8
   4bc24:	e3c33007 	bic	r3, r3, #7
   4bc28:	e04dd003 	sub	sp, sp, r3
   4bc2c:	e28d7010 	add	r7, sp, #16
   4bc30:	e5940004 	ldr	r0, [r4, #4]
   4bc34:	eaffffa5 	b	4bad0 <USBStringGetFromDescriptor+0x114>
   4bc38:	e59f0054 	ldr	r0, [pc, #84]	; 4bc94 <USBStringGetFromDescriptor+0x2d8>
   4bc3c:	e59f103c 	ldr	r1, [pc, #60]	; 4bc80 <USBStringGetFromDescriptor+0x2c4>
   4bc40:	e3a020a2 	mov	r2, #162	; 0xa2
   4bc44:	ebffac7f 	bl	36e48 <uspi_assertion_failed>
   4bc48:	e5940008 	ldr	r0, [r4, #8]
   4bc4c:	eaffffba 	b	4bb3c <USBStringGetFromDescriptor+0x180>
   4bc50:	e59f003c 	ldr	r0, [pc, #60]	; 4bc94 <USBStringGetFromDescriptor+0x2d8>
   4bc54:	e59f1024 	ldr	r1, [pc, #36]	; 4bc80 <USBStringGetFromDescriptor+0x2c4>
   4bc58:	e3a0209d 	mov	r2, #157	; 0x9d
   4bc5c:	ebffac79 	bl	36e48 <uspi_assertion_failed>
   4bc60:	e5940008 	ldr	r0, [r4, #8]
   4bc64:	eaffffac 	b	4bb1c <USBStringGetFromDescriptor+0x160>
   4bc68:	e59f0014 	ldr	r0, [pc, #20]	; 4bc84 <USBStringGetFromDescriptor+0x2c8>
   4bc6c:	e59f100c 	ldr	r1, [pc, #12]	; 4bc80 <USBStringGetFromDescriptor+0x2c4>
   4bc70:	e3a02075 	mov	r2, #117	; 0x75
   4bc74:	ebffac73 	bl	36e48 <uspi_assertion_failed>
   4bc78:	eaffffca 	b	4bba8 <USBStringGetFromDescriptor+0x1ec>
   4bc7c:	00057f4c 	.word	0x00057f4c
   4bc80:	00057ef4 	.word	0x00057ef4
   4bc84:	00057f18 	.word	0x00057f18
   4bc88:	00056ae4 	.word	0x00056ae4
   4bc8c:	00056434 	.word	0x00056434
   4bc90:	00057f58 	.word	0x00057f58
   4bc94:	00057f00 	.word	0x00057f00

0004bc98 <USBStringGet>:
   4bc98:	e92d4010 	push	{r4, lr}
   4bc9c:	e2504000 	subs	r4, r0, #0
   4bca0:	0a000002 	beq	4bcb0 <USBStringGet+0x18>
   4bca4:	e5940008 	ldr	r0, [r4, #8]
   4bca8:	e8bd4010 	pop	{r4, lr}
   4bcac:	eaffee98 	b	47714 <StringGet>
   4bcb0:	e59f0014 	ldr	r0, [pc, #20]	; 4bccc <USBStringGet+0x34>
   4bcb4:	e59f1014 	ldr	r1, [pc, #20]	; 4bcd0 <USBStringGet+0x38>
   4bcb8:	e3a020aa 	mov	r2, #170	; 0xaa
   4bcbc:	ebffac61 	bl	36e48 <uspi_assertion_failed>
   4bcc0:	e5940008 	ldr	r0, [r4, #8]
   4bcc4:	e8bd4010 	pop	{r4, lr}
   4bcc8:	eaffee91 	b	47714 <StringGet>
   4bccc:	00056434 	.word	0x00056434
   4bcd0:	00057ef4 	.word	0x00057ef4

0004bcd4 <USBStringGetLanguageID>:
   4bcd4:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   4bcd8:	e2505000 	subs	r5, r0, #0
   4bcdc:	e24dd010 	sub	sp, sp, #16
   4bce0:	0a00003c 	beq	4bdd8 <USBStringGetLanguageID+0x104>
   4bce4:	e3a00004 	mov	r0, #4
   4bce8:	ebffac2f 	bl	36dac <malloc>
   4bcec:	e2504000 	subs	r4, r0, #0
   4bcf0:	0a00003d 	beq	4bdec <USBStringGetLanguageID+0x118>
   4bcf4:	e5950000 	ldr	r0, [r5]
   4bcf8:	e3500000 	cmp	r0, #0
   4bcfc:	0a00003f 	beq	4be00 <USBStringGetLanguageID+0x12c>
   4bd00:	ebffda93 	bl	42754 <USBDeviceGetHost>
   4bd04:	e1a06000 	mov	r6, r0
   4bd08:	e5950000 	ldr	r0, [r5]
   4bd0c:	ebffda7a 	bl	426fc <USBDeviceGetEndpoint0>
   4bd10:	e3a02004 	mov	r2, #4
   4bd14:	e3a03080 	mov	r3, #128	; 0x80
   4bd18:	e1a01000 	mov	r1, r0
   4bd1c:	e98d000c 	stmib	sp, {r2, r3}
   4bd20:	e1a00006 	mov	r0, r6
   4bd24:	e58d4000 	str	r4, [sp]
   4bd28:	e3a02003 	mov	r2, #3
   4bd2c:	e3a03000 	mov	r3, #0
   4bd30:	ebffcedc 	bl	3f8a8 <DWHCIDeviceGetDescriptor>
   4bd34:	e3500000 	cmp	r0, #0
   4bd38:	ba000004 	blt	4bd50 <USBStringGetLanguageID+0x7c>
   4bd3c:	e5d46000 	ldrb	r6, [r4]
   4bd40:	e3560003 	cmp	r6, #3
   4bd44:	9a000001 	bls	4bd50 <USBStringGetLanguageID+0x7c>
   4bd48:	e2167001 	ands	r7, r6, #1
   4bd4c:	0a000005 	beq	4bd68 <USBStringGetLanguageID+0x94>
   4bd50:	e1a00004 	mov	r0, r4
   4bd54:	ebffac15 	bl	36db0 <free>
   4bd58:	e59f5144 	ldr	r5, [pc, #324]	; 4bea4 <USBStringGetLanguageID+0x1d0>
   4bd5c:	e1a00005 	mov	r0, r5
   4bd60:	e28dd010 	add	sp, sp, #16
   4bd64:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   4bd68:	e5d43001 	ldrb	r3, [r4, #1]
   4bd6c:	e3530003 	cmp	r3, #3
   4bd70:	1afffff6 	bne	4bd50 <USBStringGetLanguageID+0x7c>
   4bd74:	e3560004 	cmp	r6, #4
   4bd78:	01a02006 	moveq	r2, r6
   4bd7c:	1a000025 	bne	4be18 <USBStringGetLanguageID+0x144>
   4bd80:	e5d43002 	ldrb	r3, [r4, #2]
   4bd84:	e5d45003 	ldrb	r5, [r4, #3]
   4bd88:	e59fc114 	ldr	ip, [pc, #276]	; 4bea4 <USBStringGetLanguageID+0x1d0>
   4bd8c:	e1835405 	orr	r5, r3, r5, lsl #8
   4bd90:	e2422002 	sub	r2, r2, #2
   4bd94:	e155000c 	cmp	r5, ip
   4bd98:	e1a000c2 	asr	r0, r2, #1
   4bd9c:	0affffeb 	beq	4bd50 <USBStringGetLanguageID+0x7c>
   4bda0:	e3a03000 	mov	r3, #0
   4bda4:	ea000004 	b	4bdbc <USBStringGetLanguageID+0xe8>
   4bda8:	e5d12002 	ldrb	r2, [r1, #2]
   4bdac:	e5d11003 	ldrb	r1, [r1, #3]
   4bdb0:	e1822401 	orr	r2, r2, r1, lsl #8
   4bdb4:	e152000c 	cmp	r2, ip
   4bdb8:	0affffe4 	beq	4bd50 <USBStringGetLanguageID+0x7c>
   4bdbc:	e2833001 	add	r3, r3, #1
   4bdc0:	e1500003 	cmp	r0, r3
   4bdc4:	e0841083 	add	r1, r4, r3, lsl #1
   4bdc8:	1afffff6 	bne	4bda8 <USBStringGetLanguageID+0xd4>
   4bdcc:	e1a00004 	mov	r0, r4
   4bdd0:	ebffabf6 	bl	36db0 <free>
   4bdd4:	eaffffe0 	b	4bd5c <USBStringGetLanguageID+0x88>
   4bdd8:	e59f00c8 	ldr	r0, [pc, #200]	; 4bea8 <USBStringGetLanguageID+0x1d4>
   4bddc:	e59f10c8 	ldr	r1, [pc, #200]	; 4beac <USBStringGetLanguageID+0x1d8>
   4bde0:	e3a020b0 	mov	r2, #176	; 0xb0
   4bde4:	ebffac17 	bl	36e48 <uspi_assertion_failed>
   4bde8:	eaffffbd 	b	4bce4 <USBStringGetLanguageID+0x10>
   4bdec:	e59f00bc 	ldr	r0, [pc, #188]	; 4beb0 <USBStringGetLanguageID+0x1dc>
   4bdf0:	e59f10b4 	ldr	r1, [pc, #180]	; 4beac <USBStringGetLanguageID+0x1d8>
   4bdf4:	e3a020b3 	mov	r2, #179	; 0xb3
   4bdf8:	ebffac12 	bl	36e48 <uspi_assertion_failed>
   4bdfc:	eaffffbc 	b	4bcf4 <USBStringGetLanguageID+0x20>
   4be00:	e59f00ac 	ldr	r0, [pc, #172]	; 4beb4 <USBStringGetLanguageID+0x1e0>
   4be04:	e59f10a0 	ldr	r1, [pc, #160]	; 4beac <USBStringGetLanguageID+0x1d8>
   4be08:	e3a020b5 	mov	r2, #181	; 0xb5
   4be0c:	ebffac0d 	bl	36e48 <uspi_assertion_failed>
   4be10:	e5950000 	ldr	r0, [r5]
   4be14:	eaffffb9 	b	4bd00 <USBStringGetLanguageID+0x2c>
   4be18:	e1a00004 	mov	r0, r4
   4be1c:	ebffabe3 	bl	36db0 <free>
   4be20:	e1a00006 	mov	r0, r6
   4be24:	ebffabe0 	bl	36dac <malloc>
   4be28:	e2504000 	subs	r4, r0, #0
   4be2c:	0a000017 	beq	4be90 <USBStringGetLanguageID+0x1bc>
   4be30:	e5950000 	ldr	r0, [r5]
   4be34:	ebffda46 	bl	42754 <USBDeviceGetHost>
   4be38:	e1a08000 	mov	r8, r0
   4be3c:	e5950000 	ldr	r0, [r5]
   4be40:	ebffda2d 	bl	426fc <USBDeviceGetEndpoint0>
   4be44:	e3a03080 	mov	r3, #128	; 0x80
   4be48:	e1a01000 	mov	r1, r0
   4be4c:	e58d3008 	str	r3, [sp, #8]
   4be50:	e1a00008 	mov	r0, r8
   4be54:	e88d0050 	stm	sp, {r4, r6}
   4be58:	e3a02003 	mov	r2, #3
   4be5c:	e3a03000 	mov	r3, #0
   4be60:	ebffce90 	bl	3f8a8 <DWHCIDeviceGetDescriptor>
   4be64:	e1500006 	cmp	r0, r6
   4be68:	1affffb8 	bne	4bd50 <USBStringGetLanguageID+0x7c>
   4be6c:	e5d42000 	ldrb	r2, [r4]
   4be70:	e1520006 	cmp	r2, r6
   4be74:	1affffb5 	bne	4bd50 <USBStringGetLanguageID+0x7c>
   4be78:	e3570000 	cmp	r7, #0
   4be7c:	1affffb3 	bne	4bd50 <USBStringGetLanguageID+0x7c>
   4be80:	e5d43001 	ldrb	r3, [r4, #1]
   4be84:	e3530003 	cmp	r3, #3
   4be88:	1affffb0 	bne	4bd50 <USBStringGetLanguageID+0x7c>
   4be8c:	eaffffbb 	b	4bd80 <USBStringGetLanguageID+0xac>
   4be90:	e59f0018 	ldr	r0, [pc, #24]	; 4beb0 <USBStringGetLanguageID+0x1dc>
   4be94:	e59f1010 	ldr	r1, [pc, #16]	; 4beac <USBStringGetLanguageID+0x1d8>
   4be98:	e3a020ce 	mov	r2, #206	; 0xce
   4be9c:	ebffabe9 	bl	36e48 <uspi_assertion_failed>
   4bea0:	eaffffe2 	b	4be30 <USBStringGetLanguageID+0x15c>
   4bea4:	00000409 	.word	0x00000409
   4bea8:	00056434 	.word	0x00056434
   4beac:	00057ef4 	.word	0x00057ef4
   4beb0:	00057f70 	.word	0x00057f70
   4beb4:	00056ae4 	.word	0x00056ae4

0004beb8 <USBMIDIDeviceStartRequest>:
   4beb8:	e92d4070 	push	{r4, r5, r6, lr}
   4bebc:	e2504000 	subs	r4, r0, #0
   4bec0:	e24dd008 	sub	sp, sp, #8
   4bec4:	0a00001d 	beq	4bf40 <USBMIDIDeviceStartRequest+0x88>
   4bec8:	e5943010 	ldr	r3, [r4, #16]
   4becc:	e3530000 	cmp	r3, #0
   4bed0:	0a00001f 	beq	4bf54 <USBMIDIDeviceStartRequest+0x9c>
   4bed4:	e5942040 	ldr	r2, [r4, #64]	; 0x40
   4bed8:	e3520000 	cmp	r2, #0
   4bedc:	0a000011 	beq	4bf28 <USBMIDIDeviceStartRequest+0x70>
   4bee0:	e3a06000 	mov	r6, #0
   4bee4:	e2845018 	add	r5, r4, #24
   4bee8:	e5941010 	ldr	r1, [r4, #16]
   4beec:	e1d433bc 	ldrh	r3, [r4, #60]	; 0x3c
   4bef0:	e1a00005 	mov	r0, r5
   4bef4:	e58d6000 	str	r6, [sp]
   4bef8:	ebffdf4c 	bl	43c30 <USBRequest>
   4befc:	e1a00005 	mov	r0, r5
   4bf00:	e1a02006 	mov	r2, r6
   4bf04:	e59f105c 	ldr	r1, [pc, #92]	; 4bf68 <USBMIDIDeviceStartRequest+0xb0>
   4bf08:	e1a03004 	mov	r3, r4
   4bf0c:	ebffe01a 	bl	43f7c <USBRequestSetCompletionRoutine>
   4bf10:	e1a00004 	mov	r0, r4
   4bf14:	ebffe58c 	bl	4554c <USBFunctionGetHost>
   4bf18:	e1a01005 	mov	r1, r5
   4bf1c:	e28dd008 	add	sp, sp, #8
   4bf20:	e8bd4070 	pop	{r4, r5, r6, lr}
   4bf24:	eaffcd28 	b	3f3cc <DWHCIDeviceSubmitAsyncRequest>
   4bf28:	e3a020a1 	mov	r2, #161	; 0xa1
   4bf2c:	e59f0038 	ldr	r0, [pc, #56]	; 4bf6c <USBMIDIDeviceStartRequest+0xb4>
   4bf30:	e59f1038 	ldr	r1, [pc, #56]	; 4bf70 <USBMIDIDeviceStartRequest+0xb8>
   4bf34:	ebffabc3 	bl	36e48 <uspi_assertion_failed>
   4bf38:	e5942040 	ldr	r2, [r4, #64]	; 0x40
   4bf3c:	eaffffe7 	b	4bee0 <USBMIDIDeviceStartRequest+0x28>
   4bf40:	e59f002c 	ldr	r0, [pc, #44]	; 4bf74 <USBMIDIDeviceStartRequest+0xbc>
   4bf44:	e59f1024 	ldr	r1, [pc, #36]	; 4bf70 <USBMIDIDeviceStartRequest+0xb8>
   4bf48:	e3a0209e 	mov	r2, #158	; 0x9e
   4bf4c:	ebffabbd 	bl	36e48 <uspi_assertion_failed>
   4bf50:	eaffffdc 	b	4bec8 <USBMIDIDeviceStartRequest+0x10>
   4bf54:	e59f001c 	ldr	r0, [pc, #28]	; 4bf78 <USBMIDIDeviceStartRequest+0xc0>
   4bf58:	e59f1010 	ldr	r1, [pc, #16]	; 4bf70 <USBMIDIDeviceStartRequest+0xb8>
   4bf5c:	e3a020a0 	mov	r2, #160	; 0xa0
   4bf60:	ebffabb8 	bl	36e48 <uspi_assertion_failed>
   4bf64:	eaffffda 	b	4bed4 <USBMIDIDeviceStartRequest+0x1c>
   4bf68:	0004c1b4 	.word	0x0004c1b4
   4bf6c:	00057fd8 	.word	0x00057fd8
   4bf70:	00057fcc 	.word	0x00057fcc
   4bf74:	00056434 	.word	0x00056434
   4bf78:	00057a78 	.word	0x00057a78

0004bf7c <USBMIDIDeviceConfigure>:
   4bf7c:	e92d4070 	push	{r4, r5, r6, lr}
   4bf80:	e2505000 	subs	r5, r0, #0
   4bf84:	e24dd010 	sub	sp, sp, #16
   4bf88:	0a00006f 	beq	4c14c <USBMIDIDeviceConfigure+0x1d0>
   4bf8c:	e1a00005 	mov	r0, r5
   4bf90:	ebffe52b 	bl	45444 <USBFunctionGetNumEndpoints>
   4bf94:	e2506000 	subs	r6, r0, #0
   4bf98:	0a000062 	beq	4c128 <USBMIDIDeviceConfigure+0x1ac>
   4bf9c:	e1a00005 	mov	r0, r5
   4bfa0:	e3a01005 	mov	r1, #5
   4bfa4:	ebffe5b5 	bl	45680 <USBFunctionGetDescriptor>
   4bfa8:	e2504000 	subs	r4, r0, #0
   4bfac:	0a000035 	beq	4c088 <USBMIDIDeviceConfigure+0x10c>
   4bfb0:	e1d430d2 	ldrsb	r3, [r4, #2]
   4bfb4:	e3530000 	cmp	r3, #0
   4bfb8:	aafffff7 	bge	4bf9c <USBMIDIDeviceConfigure+0x20>
   4bfbc:	e5d43003 	ldrb	r3, [r4, #3]
   4bfc0:	e203303f 	and	r3, r3, #63	; 0x3f
   4bfc4:	e3530002 	cmp	r3, #2
   4bfc8:	1afffff3 	bne	4bf9c <USBMIDIDeviceConfigure+0x20>
   4bfcc:	e1a00005 	mov	r0, r5
   4bfd0:	e3a01025 	mov	r1, #37	; 0x25
   4bfd4:	ebffe5a9 	bl	45680 <USBFunctionGetDescriptor>
   4bfd8:	e3500000 	cmp	r0, #0
   4bfdc:	0affffee 	beq	4bf9c <USBMIDIDeviceConfigure+0x20>
   4bfe0:	e5d43000 	ldrb	r3, [r4]
   4bfe4:	e0843003 	add	r3, r4, r3
   4bfe8:	e1500003 	cmp	r0, r3
   4bfec:	1affffea 	bne	4bf9c <USBMIDIDeviceConfigure+0x20>
   4bff0:	e5953010 	ldr	r3, [r5, #16]
   4bff4:	e3530000 	cmp	r3, #0
   4bff8:	0a000003 	beq	4c00c <USBMIDIDeviceConfigure+0x90>
   4bffc:	e59f0184 	ldr	r0, [pc, #388]	; 4c188 <USBMIDIDeviceConfigure+0x20c>
   4c000:	e59f1184 	ldr	r1, [pc, #388]	; 4c18c <USBMIDIDeviceConfigure+0x210>
   4c004:	e3a02070 	mov	r2, #112	; 0x70
   4c008:	ebffab8e 	bl	36e48 <uspi_assertion_failed>
   4c00c:	e3a00018 	mov	r0, #24
   4c010:	ebffab65 	bl	36dac <malloc>
   4c014:	e3500000 	cmp	r0, #0
   4c018:	e5850010 	str	r0, [r5, #16]
   4c01c:	0a00004f 	beq	4c160 <USBMIDIDeviceConfigure+0x1e4>
   4c020:	e5d43004 	ldrb	r3, [r4, #4]
   4c024:	e5d41005 	ldrb	r1, [r4, #5]
   4c028:	e59f0160 	ldr	r0, [pc, #352]	; 4c190 <USBMIDIDeviceConfigure+0x214>
   4c02c:	e5952040 	ldr	r2, [r5, #64]	; 0x40
   4c030:	e1833401 	orr	r3, r3, r1, lsl #8
   4c034:	e0000003 	and	r0, r0, r3
   4c038:	e3520000 	cmp	r2, #0
   4c03c:	e1c503bc 	strh	r0, [r5, #60]	; 0x3c
   4c040:	0a000004 	beq	4c058 <USBMIDIDeviceConfigure+0xdc>
   4c044:	e59f0148 	ldr	r0, [pc, #328]	; 4c194 <USBMIDIDeviceConfigure+0x218>
   4c048:	e59f113c 	ldr	r1, [pc, #316]	; 4c18c <USBMIDIDeviceConfigure+0x210>
   4c04c:	e3a02076 	mov	r2, #118	; 0x76
   4c050:	ebffab7c 	bl	36e48 <uspi_assertion_failed>
   4c054:	e1d503bc 	ldrh	r0, [r5, #60]	; 0x3c
   4c058:	ebffab53 	bl	36dac <malloc>
   4c05c:	e3500000 	cmp	r0, #0
   4c060:	e5850040 	str	r0, [r5, #64]	; 0x40
   4c064:	0a000042 	beq	4c174 <USBMIDIDeviceConfigure+0x1f8>
   4c068:	e1a00005 	mov	r0, r5
   4c06c:	e5956010 	ldr	r6, [r5, #16]
   4c070:	ebffe50a 	bl	454a0 <USBFunctionGetDevice>
   4c074:	e1a02004 	mov	r2, r4
   4c078:	e1a01000 	mov	r1, r0
   4c07c:	e1a00006 	mov	r0, r6
   4c080:	ebffdd6e 	bl	43640 <USBEndpoint2>
   4c084:	eaffffc4 	b	4bf9c <USBMIDIDeviceConfigure+0x20>
   4c088:	e5956010 	ldr	r6, [r5, #16]
   4c08c:	e1a00005 	mov	r0, r5
   4c090:	e3560000 	cmp	r6, #0
   4c094:	0a000029 	beq	4c140 <USBMIDIDeviceConfigure+0x1c4>
   4c098:	ebffe542 	bl	455a8 <USBFunctionConfigure>
   4c09c:	e2506000 	subs	r6, r0, #0
   4c0a0:	0a000019 	beq	4c10c <USBMIDIDeviceConfigure+0x190>
   4c0a4:	e28d0004 	add	r0, sp, #4
   4c0a8:	ebffed66 	bl	47648 <String>
   4c0ac:	e59f30e4 	ldr	r3, [pc, #228]	; 4c198 <USBMIDIDeviceConfigure+0x21c>
   4c0b0:	e59f10e4 	ldr	r1, [pc, #228]	; 4c19c <USBMIDIDeviceConfigure+0x220>
   4c0b4:	e5932000 	ldr	r2, [r3]
   4c0b8:	e28d0004 	add	r0, sp, #4
   4c0bc:	e282c001 	add	ip, r2, #1
   4c0c0:	e583c000 	str	ip, [r3]
   4c0c4:	ebffefdf 	bl	48048 <StringFormat>
   4c0c8:	ebffe323 	bl	44d5c <DeviceNameServiceGet>
   4c0cc:	e1a06000 	mov	r6, r0
   4c0d0:	e28d0004 	add	r0, sp, #4
   4c0d4:	ebffed8e 	bl	47714 <StringGet>
   4c0d8:	e1a02005 	mov	r2, r5
   4c0dc:	e1a01000 	mov	r1, r0
   4c0e0:	e1a03004 	mov	r3, r4
   4c0e4:	e1a00006 	mov	r0, r6
   4c0e8:	ebffe2aa 	bl	44b98 <DeviceNameServiceAddDevice>
   4c0ec:	e28d0004 	add	r0, sp, #4
   4c0f0:	ebffed76 	bl	476d0 <_String>
   4c0f4:	e1a00005 	mov	r0, r5
   4c0f8:	ebffff6e 	bl	4beb8 <USBMIDIDeviceStartRequest>
   4c0fc:	e1a06000 	mov	r6, r0
   4c100:	e1a00006 	mov	r0, r6
   4c104:	e28dd010 	add	sp, sp, #16
   4c108:	e8bd8070 	pop	{r4, r5, r6, pc}
   4c10c:	e59f008c 	ldr	r0, [pc, #140]	; 4c1a0 <USBMIDIDeviceConfigure+0x224>
   4c110:	e3a01001 	mov	r1, #1
   4c114:	e59f2088 	ldr	r2, [pc, #136]	; 4c1a4 <USBMIDIDeviceConfigure+0x228>
   4c118:	ebff6016 	bl	24178 <LogWrite>
   4c11c:	e1a00006 	mov	r0, r6
   4c120:	e28dd010 	add	sp, sp, #16
   4c124:	e8bd8070 	pop	{r4, r5, r6, pc}
   4c128:	e1a00005 	mov	r0, r5
   4c12c:	e59f106c 	ldr	r1, [pc, #108]	; 4c1a0 <USBMIDIDeviceConfigure+0x224>
   4c130:	ebffe56c 	bl	456e8 <USBFunctionConfigurationError>
   4c134:	e1a00006 	mov	r0, r6
   4c138:	e28dd010 	add	sp, sp, #16
   4c13c:	e8bd8070 	pop	{r4, r5, r6, pc}
   4c140:	e59f1058 	ldr	r1, [pc, #88]	; 4c1a0 <USBMIDIDeviceConfigure+0x224>
   4c144:	ebffe567 	bl	456e8 <USBFunctionConfigurationError>
   4c148:	eaffffec 	b	4c100 <USBMIDIDeviceConfigure+0x184>
   4c14c:	e59f0054 	ldr	r0, [pc, #84]	; 4c1a8 <USBMIDIDeviceConfigure+0x22c>
   4c150:	e59f1034 	ldr	r1, [pc, #52]	; 4c18c <USBMIDIDeviceConfigure+0x210>
   4c154:	e3a0204f 	mov	r2, #79	; 0x4f
   4c158:	ebffab3a 	bl	36e48 <uspi_assertion_failed>
   4c15c:	eaffff8a 	b	4bf8c <USBMIDIDeviceConfigure+0x10>
   4c160:	e59f0044 	ldr	r0, [pc, #68]	; 4c1ac <USBMIDIDeviceConfigure+0x230>
   4c164:	e59f1020 	ldr	r1, [pc, #32]	; 4c18c <USBMIDIDeviceConfigure+0x210>
   4c168:	e3a02072 	mov	r2, #114	; 0x72
   4c16c:	ebffab35 	bl	36e48 <uspi_assertion_failed>
   4c170:	eaffffaa 	b	4c020 <USBMIDIDeviceConfigure+0xa4>
   4c174:	e59f0034 	ldr	r0, [pc, #52]	; 4c1b0 <USBMIDIDeviceConfigure+0x234>
   4c178:	e59f100c 	ldr	r1, [pc, #12]	; 4c18c <USBMIDIDeviceConfigure+0x210>
   4c17c:	e3a02078 	mov	r2, #120	; 0x78
   4c180:	ebffab30 	bl	36e48 <uspi_assertion_failed>
   4c184:	eaffffb7 	b	4c068 <USBMIDIDeviceConfigure+0xec>
   4c188:	00057ff4 	.word	0x00057ff4
   4c18c:	00057fcc 	.word	0x00057fcc
   4c190:	0000fffc 	.word	0x0000fffc
   4c194:	00058010 	.word	0x00058010
   4c198:	0006f560 	.word	0x0006f560
   4c19c:	0005802c 	.word	0x0005802c
   4c1a0:	00057f84 	.word	0x00057f84
   4c1a4:	00057470 	.word	0x00057470
   4c1a8:	00056434 	.word	0x00056434
   4c1ac:	00057a78 	.word	0x00057a78
   4c1b0:	00057fd8 	.word	0x00057fd8

0004c1b4 <USBMIDIDeviceCompletionRoutine>:
   4c1b4:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   4c1b8:	e2525000 	subs	r5, r2, #0
   4c1bc:	e1a04000 	mov	r4, r0
   4c1c0:	0a000036 	beq	4c2a0 <USBMIDIDeviceCompletionRoutine+0xec>
   4c1c4:	e3540000 	cmp	r4, #0
   4c1c8:	0a00002f 	beq	4c28c <USBMIDIDeviceCompletionRoutine+0xd8>
   4c1cc:	e2856018 	add	r6, r5, #24
   4c1d0:	e1560004 	cmp	r6, r4
   4c1d4:	0a000003 	beq	4c1e8 <USBMIDIDeviceCompletionRoutine+0x34>
   4c1d8:	e59f00ec 	ldr	r0, [pc, #236]	; 4c2cc <USBMIDIDeviceCompletionRoutine+0x118>
   4c1dc:	e59f10ec 	ldr	r1, [pc, #236]	; 4c2d0 <USBMIDIDeviceCompletionRoutine+0x11c>
   4c1e0:	e3a020af 	mov	r2, #175	; 0xaf
   4c1e4:	ebffab17 	bl	36e48 <uspi_assertion_failed>
   4c1e8:	e1a00004 	mov	r0, r4
   4c1ec:	ebffdeff 	bl	43df0 <USBRequestGetStatus>
   4c1f0:	e3500000 	cmp	r0, #0
   4c1f4:	1a000004 	bne	4c20c <USBMIDIDeviceCompletionRoutine+0x58>
   4c1f8:	e1a00006 	mov	r0, r6
   4c1fc:	ebffdebb 	bl	43cf0 <_USBRequest>
   4c200:	e1a00005 	mov	r0, r5
   4c204:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   4c208:	eaffff2a 	b	4beb8 <USBMIDIDeviceStartRequest>
   4c20c:	e1a00004 	mov	r0, r4
   4c210:	ebffdf03 	bl	43e24 <USBRequestGetResultLength>
   4c214:	e3100003 	tst	r0, #3
   4c218:	1afffff6 	bne	4c1f8 <USBMIDIDeviceCompletionRoutine+0x44>
   4c21c:	e5958040 	ldr	r8, [r5, #64]	; 0x40
   4c220:	e3580000 	cmp	r8, #0
   4c224:	0a000022 	beq	4c2b4 <USBMIDIDeviceCompletionRoutine+0x100>
   4c228:	e1a00004 	mov	r0, r4
   4c22c:	ebffdefc 	bl	43e24 <USBRequestGetResultLength>
   4c230:	e5954040 	ldr	r4, [r5, #64]	; 0x40
   4c234:	e0888000 	add	r8, r8, r0
   4c238:	e1580004 	cmp	r8, r4
   4c23c:	9affffed 	bls	4c1f8 <USBMIDIDeviceCompletionRoutine+0x44>
   4c240:	e59f708c 	ldr	r7, [pc, #140]	; 4c2d4 <USBMIDIDeviceCompletionRoutine+0x120>
   4c244:	e2844001 	add	r4, r4, #1
   4c248:	e5540001 	ldrb	r0, [r4, #-1]
   4c24c:	e3500000 	cmp	r0, #0
   4c250:	0a000008 	beq	4c278 <USBMIDIDeviceCompletionRoutine+0xc4>
   4c254:	e595c014 	ldr	ip, [r5, #20]
   4c258:	e200300f 	and	r3, r0, #15
   4c25c:	e35c0000 	cmp	ip, #0
   4c260:	e0873103 	add	r3, r7, r3, lsl #2
   4c264:	e1a00220 	lsr	r0, r0, #4
   4c268:	0a000002 	beq	4c278 <USBMIDIDeviceCompletionRoutine+0xc4>
   4c26c:	e5931008 	ldr	r1, [r3, #8]
   4c270:	e1a02004 	mov	r2, r4
   4c274:	e12fff3c 	blx	ip
   4c278:	e2843003 	add	r3, r4, #3
   4c27c:	e1580003 	cmp	r8, r3
   4c280:	e2844004 	add	r4, r4, #4
   4c284:	8affffef 	bhi	4c248 <USBMIDIDeviceCompletionRoutine+0x94>
   4c288:	eaffffda 	b	4c1f8 <USBMIDIDeviceCompletionRoutine+0x44>
   4c28c:	e59f0044 	ldr	r0, [pc, #68]	; 4c2d8 <USBMIDIDeviceCompletionRoutine+0x124>
   4c290:	e59f1038 	ldr	r1, [pc, #56]	; 4c2d0 <USBMIDIDeviceCompletionRoutine+0x11c>
   4c294:	e3a020ae 	mov	r2, #174	; 0xae
   4c298:	ebffaaea 	bl	36e48 <uspi_assertion_failed>
   4c29c:	eaffffca 	b	4c1cc <USBMIDIDeviceCompletionRoutine+0x18>
   4c2a0:	e59f0034 	ldr	r0, [pc, #52]	; 4c2dc <USBMIDIDeviceCompletionRoutine+0x128>
   4c2a4:	e59f1024 	ldr	r1, [pc, #36]	; 4c2d0 <USBMIDIDeviceCompletionRoutine+0x11c>
   4c2a8:	e3a020ac 	mov	r2, #172	; 0xac
   4c2ac:	ebffaae5 	bl	36e48 <uspi_assertion_failed>
   4c2b0:	eaffffc3 	b	4c1c4 <USBMIDIDeviceCompletionRoutine+0x10>
   4c2b4:	e59f0024 	ldr	r0, [pc, #36]	; 4c2e0 <USBMIDIDeviceCompletionRoutine+0x12c>
   4c2b8:	e59f1010 	ldr	r1, [pc, #16]	; 4c2d0 <USBMIDIDeviceCompletionRoutine+0x11c>
   4c2bc:	e3a020b4 	mov	r2, #180	; 0xb4
   4c2c0:	ebffaae0 	bl	36e48 <uspi_assertion_failed>
   4c2c4:	e5958040 	ldr	r8, [r5, #64]	; 0x40
   4c2c8:	eaffffd6 	b	4c228 <USBMIDIDeviceCompletionRoutine+0x74>
   4c2cc:	00057cb4 	.word	0x00057cb4
   4c2d0:	00057fcc 	.word	0x00057fcc
   4c2d4:	00057f84 	.word	0x00057f84
   4c2d8:	0005650c 	.word	0x0005650c
   4c2dc:	00056434 	.word	0x00056434
   4c2e0:	00057fd8 	.word	0x00057fd8

0004c2e4 <USBMIDIDevice>:
   4c2e4:	e92d4038 	push	{r3, r4, r5, lr}
   4c2e8:	e2504000 	subs	r4, r0, #0
   4c2ec:	e1a05001 	mov	r5, r1
   4c2f0:	0a000009 	beq	4c31c <USBMIDIDevice+0x38>
   4c2f4:	e1a01005 	mov	r1, r5
   4c2f8:	e1a00004 	mov	r0, r4
   4c2fc:	ebffe3d2 	bl	4524c <USBFunctionCopy>
   4c300:	e3a03000 	mov	r3, #0
   4c304:	e59f2024 	ldr	r2, [pc, #36]	; 4c330 <USBMIDIDevice+0x4c>
   4c308:	e5843010 	str	r3, [r4, #16]
   4c30c:	e5843014 	str	r3, [r4, #20]
   4c310:	e5843040 	str	r3, [r4, #64]	; 0x40
   4c314:	e5842000 	str	r2, [r4]
   4c318:	e8bd8038 	pop	{r3, r4, r5, pc}
   4c31c:	e59f0010 	ldr	r0, [pc, #16]	; 4c334 <USBMIDIDevice+0x50>
   4c320:	e59f1010 	ldr	r1, [pc, #16]	; 4c338 <USBMIDIDevice+0x54>
   4c324:	e3a0202e 	mov	r2, #46	; 0x2e
   4c328:	ebffaac6 	bl	36e48 <uspi_assertion_failed>
   4c32c:	eafffff0 	b	4c2f4 <USBMIDIDevice+0x10>
   4c330:	0004bf7c 	.word	0x0004bf7c
   4c334:	00056434 	.word	0x00056434
   4c338:	00057fcc 	.word	0x00057fcc

0004c33c <_CUSBMIDIDevice>:
   4c33c:	e92d4010 	push	{r4, lr}
   4c340:	e2504000 	subs	r4, r0, #0
   4c344:	0a000010 	beq	4c38c <_CUSBMIDIDevice+0x50>
   4c348:	e5940040 	ldr	r0, [r4, #64]	; 0x40
   4c34c:	e3500000 	cmp	r0, #0
   4c350:	0a000002 	beq	4c360 <_CUSBMIDIDevice+0x24>
   4c354:	ebffaa95 	bl	36db0 <free>
   4c358:	e3a03000 	mov	r3, #0
   4c35c:	e5843040 	str	r3, [r4, #64]	; 0x40
   4c360:	e5940010 	ldr	r0, [r4, #16]
   4c364:	e3500000 	cmp	r0, #0
   4c368:	0a000004 	beq	4c380 <_CUSBMIDIDevice+0x44>
   4c36c:	ebffdd50 	bl	438b4 <_USBEndpoint>
   4c370:	e5940010 	ldr	r0, [r4, #16]
   4c374:	ebffaa8d 	bl	36db0 <free>
   4c378:	e3a03000 	mov	r3, #0
   4c37c:	e5843010 	str	r3, [r4, #16]
   4c380:	e1a00004 	mov	r0, r4
   4c384:	e8bd4010 	pop	{r4, lr}
   4c388:	eaffe3ee 	b	45348 <_USBFunction>
   4c38c:	e59f000c 	ldr	r0, [pc, #12]	; 4c3a0 <_CUSBMIDIDevice+0x64>
   4c390:	e59f100c 	ldr	r1, [pc, #12]	; 4c3a4 <_CUSBMIDIDevice+0x68>
   4c394:	e3a0203a 	mov	r2, #58	; 0x3a
   4c398:	ebffaaaa 	bl	36e48 <uspi_assertion_failed>
   4c39c:	eaffffe9 	b	4c348 <_CUSBMIDIDevice+0xc>
   4c3a0:	00056434 	.word	0x00056434
   4c3a4:	00057fcc 	.word	0x00057fcc

0004c3a8 <USBMIDIDeviceRegisterPacketHandler>:
   4c3a8:	e92d4038 	push	{r3, r4, r5, lr}
   4c3ac:	e2505000 	subs	r5, r0, #0
   4c3b0:	e1a04001 	mov	r4, r1
   4c3b4:	0a000009 	beq	4c3e0 <USBMIDIDeviceRegisterPacketHandler+0x38>
   4c3b8:	e3540000 	cmp	r4, #0
   4c3bc:	0a000001 	beq	4c3c8 <USBMIDIDeviceRegisterPacketHandler+0x20>
   4c3c0:	e5854014 	str	r4, [r5, #20]
   4c3c4:	e8bd8038 	pop	{r3, r4, r5, pc}
   4c3c8:	e59f0024 	ldr	r0, [pc, #36]	; 4c3f4 <USBMIDIDeviceRegisterPacketHandler+0x4c>
   4c3cc:	e59f1024 	ldr	r1, [pc, #36]	; 4c3f8 <USBMIDIDeviceRegisterPacketHandler+0x50>
   4c3d0:	e3a02098 	mov	r2, #152	; 0x98
   4c3d4:	ebffaa9b 	bl	36e48 <uspi_assertion_failed>
   4c3d8:	e5854014 	str	r4, [r5, #20]
   4c3dc:	e8bd8038 	pop	{r3, r4, r5, pc}
   4c3e0:	e59f0014 	ldr	r0, [pc, #20]	; 4c3fc <USBMIDIDeviceRegisterPacketHandler+0x54>
   4c3e4:	e59f100c 	ldr	r1, [pc, #12]	; 4c3f8 <USBMIDIDeviceRegisterPacketHandler+0x50>
   4c3e8:	e3a02097 	mov	r2, #151	; 0x97
   4c3ec:	ebffaa95 	bl	36e48 <uspi_assertion_failed>
   4c3f0:	eafffff0 	b	4c3b8 <USBMIDIDeviceRegisterPacketHandler+0x10>
   4c3f4:	00058034 	.word	0x00058034
   4c3f8:	00057fcc 	.word	0x00057fcc
   4c3fc:	00056434 	.word	0x00056434

0004c400 <USBConfigurationParser>:
   4c400:	e92d4070 	push	{r4, r5, r6, lr}
   4c404:	e2504000 	subs	r4, r0, #0
   4c408:	e1a05001 	mov	r5, r1
   4c40c:	e1a06002 	mov	r6, r2
   4c410:	0a000044 	beq	4c528 <USBConfigurationParser+0x128>
   4c414:	e3a03000 	mov	r3, #0
   4c418:	e0852006 	add	r2, r5, r6
   4c41c:	e1550003 	cmp	r5, r3
   4c420:	e5843008 	str	r3, [r4, #8]
   4c424:	e5843014 	str	r3, [r4, #20]
   4c428:	e8840060 	stm	r4, {r5, r6}
   4c42c:	e5845010 	str	r5, [r4, #16]
   4c430:	e5845018 	str	r5, [r4, #24]
   4c434:	e584200c 	str	r2, [r4, #12]
   4c438:	11a03006 	movne	r3, r6
   4c43c:	0a00003e 	beq	4c53c <USBConfigurationParser+0x13c>
   4c440:	e2433004 	sub	r3, r3, #4
   4c444:	e3530f7f 	cmp	r3, #508	; 0x1fc
   4c448:	88bd8070 	pophi	{r4, r5, r6, pc}
   4c44c:	e5943000 	ldr	r3, [r4]
   4c450:	e5d32000 	ldrb	r2, [r3]
   4c454:	e3520009 	cmp	r2, #9
   4c458:	18bd8070 	popne	{r4, r5, r6, pc}
   4c45c:	e5d32001 	ldrb	r2, [r3, #1]
   4c460:	e3520002 	cmp	r2, #2
   4c464:	18bd8070 	popne	{r4, r5, r6, pc}
   4c468:	e5d32002 	ldrb	r2, [r3, #2]
   4c46c:	e5d3c003 	ldrb	ip, [r3, #3]
   4c470:	e182c40c 	orr	ip, r2, ip, lsl #8
   4c474:	e156000c 	cmp	r6, ip
   4c478:	38bd8070 	popcc	{r4, r5, r6, pc}
   4c47c:	e3a05000 	mov	r5, #0
   4c480:	8083c00c 	addhi	ip, r3, ip
   4c484:	9594c00c 	ldrls	ip, [r4, #12]
   4c488:	8584c00c 	strhi	ip, [r4, #12]
   4c48c:	e1a0e005 	mov	lr, r5
   4c490:	ea000005 	b	4c4ac <USBConfigurationParser+0xac>
   4c494:	e3520005 	cmp	r2, #5
   4c498:	0a00001c 	beq	4c510 <USBConfigurationParser+0x110>
   4c49c:	e3520002 	cmp	r2, #2
   4c4a0:	0a000016 	beq	4c500 <USBConfigurationParser+0x100>
   4c4a4:	e1a0e002 	mov	lr, r2
   4c4a8:	e1a03000 	mov	r3, r0
   4c4ac:	e2832002 	add	r2, r3, #2
   4c4b0:	e15c0002 	cmp	ip, r2
   4c4b4:	9a000026 	bls	4c554 <USBConfigurationParser+0x154>
   4c4b8:	e5d31000 	ldrb	r1, [r3]
   4c4bc:	e5d32001 	ldrb	r2, [r3, #1]
   4c4c0:	e0830001 	add	r0, r3, r1
   4c4c4:	e150000c 	cmp	r0, ip
   4c4c8:	8a00000a 	bhi	4c4f8 <USBConfigurationParser+0xf8>
   4c4cc:	e3520004 	cmp	r2, #4
   4c4d0:	1affffef 	bne	4c494 <USBConfigurationParser+0x94>
   4c4d4:	e35e0000 	cmp	lr, #0
   4c4d8:	0a000006 	beq	4c4f8 <USBConfigurationParser+0xf8>
   4c4dc:	e5d35005 	ldrb	r5, [r3, #5]
   4c4e0:	e3a0e009 	mov	lr, #9
   4c4e4:	e2455001 	sub	r5, r5, #1
   4c4e8:	e16f5f15 	clz	r5, r5
   4c4ec:	e1a052a5 	lsr	r5, r5, #5
   4c4f0:	e15e0001 	cmp	lr, r1
   4c4f4:	0affffea 	beq	4c4a4 <USBConfigurationParser+0xa4>
   4c4f8:	e5843018 	str	r3, [r4, #24]
   4c4fc:	e8bd8070 	pop	{r4, r5, r6, pc}
   4c500:	e35e0000 	cmp	lr, #0
   4c504:	1afffffb 	bne	4c4f8 <USBConfigurationParser+0xf8>
   4c508:	e3a0e009 	mov	lr, #9
   4c50c:	eafffff7 	b	4c4f0 <USBConfigurationParser+0xf0>
   4c510:	e31e00fd 	tst	lr, #253	; 0xfd
   4c514:	0afffff7 	beq	4c4f8 <USBConfigurationParser+0xf8>
   4c518:	e3550000 	cmp	r5, #0
   4c51c:	13a0e009 	movne	lr, #9
   4c520:	03a0e007 	moveq	lr, #7
   4c524:	eafffff1 	b	4c4f0 <USBConfigurationParser+0xf0>
   4c528:	e59f0038 	ldr	r0, [pc, #56]	; 4c568 <USBConfigurationParser+0x168>
   4c52c:	e59f1038 	ldr	r1, [pc, #56]	; 4c56c <USBConfigurationParser+0x16c>
   4c530:	e3a0201c 	mov	r2, #28
   4c534:	ebffaa43 	bl	36e48 <uspi_assertion_failed>
   4c538:	eaffffb5 	b	4c414 <USBConfigurationParser+0x14>
   4c53c:	e59f002c 	ldr	r0, [pc, #44]	; 4c570 <USBConfigurationParser+0x170>
   4c540:	e59f1024 	ldr	r1, [pc, #36]	; 4c56c <USBConfigurationParser+0x16c>
   4c544:	e3a02025 	mov	r2, #37	; 0x25
   4c548:	ebffaa3e 	bl	36e48 <uspi_assertion_failed>
   4c54c:	e5943004 	ldr	r3, [r4, #4]
   4c550:	eaffffba 	b	4c440 <USBConfigurationParser+0x40>
   4c554:	e15c0003 	cmp	ip, r3
   4c558:	1affffe6 	bne	4c4f8 <USBConfigurationParser+0xf8>
   4c55c:	e3a03001 	mov	r3, #1
   4c560:	e5843008 	str	r3, [r4, #8]
   4c564:	e8bd8070 	pop	{r4, r5, r6, pc}
   4c568:	00056434 	.word	0x00056434
   4c56c:	00058048 	.word	0x00058048
   4c570:	0005805c 	.word	0x0005805c

0004c574 <USBConfigurationParserCopy>:
   4c574:	e92d4070 	push	{r4, r5, r6, lr}
   4c578:	e2505000 	subs	r5, r0, #0
   4c57c:	e1a04001 	mov	r4, r1
   4c580:	0a000011 	beq	4c5cc <USBConfigurationParserCopy+0x58>
   4c584:	e3540000 	cmp	r4, #0
   4c588:	0a00000a 	beq	4c5b8 <USBConfigurationParserCopy+0x44>
   4c58c:	e8944040 	ldm	r4, {r6, lr}
   4c590:	e594c008 	ldr	ip, [r4, #8]
   4c594:	e284000c 	add	r0, r4, #12
   4c598:	e890000f 	ldm	r0, {r0, r1, r2, r3}
   4c59c:	e8854040 	stm	r5, {r6, lr}
   4c5a0:	e585c008 	str	ip, [r5, #8]
   4c5a4:	e585000c 	str	r0, [r5, #12]
   4c5a8:	e5851010 	str	r1, [r5, #16]
   4c5ac:	e5852014 	str	r2, [r5, #20]
   4c5b0:	e5853018 	str	r3, [r5, #24]
   4c5b4:	e8bd8070 	pop	{r4, r5, r6, pc}
   4c5b8:	e59f0020 	ldr	r0, [pc, #32]	; 4c5e0 <USBConfigurationParserCopy+0x6c>
   4c5bc:	e59f1020 	ldr	r1, [pc, #32]	; 4c5e4 <USBConfigurationParserCopy+0x70>
   4c5c0:	e3a02083 	mov	r2, #131	; 0x83
   4c5c4:	ebffaa1f 	bl	36e48 <uspi_assertion_failed>
   4c5c8:	eaffffef 	b	4c58c <USBConfigurationParserCopy+0x18>
   4c5cc:	e59f0014 	ldr	r0, [pc, #20]	; 4c5e8 <USBConfigurationParserCopy+0x74>
   4c5d0:	e59f100c 	ldr	r1, [pc, #12]	; 4c5e4 <USBConfigurationParserCopy+0x70>
   4c5d4:	e3a02082 	mov	r2, #130	; 0x82
   4c5d8:	ebffaa1a 	bl	36e48 <uspi_assertion_failed>
   4c5dc:	eaffffe8 	b	4c584 <USBConfigurationParserCopy+0x10>
   4c5e0:	00058074 	.word	0x00058074
   4c5e4:	00058048 	.word	0x00058048
   4c5e8:	00056434 	.word	0x00056434

0004c5ec <_USBConfigurationParser>:
   4c5ec:	e92d4010 	push	{r4, lr}
   4c5f0:	e2504000 	subs	r4, r0, #0
   4c5f4:	0a000002 	beq	4c604 <_USBConfigurationParser+0x18>
   4c5f8:	e3a03000 	mov	r3, #0
   4c5fc:	e5843000 	str	r3, [r4]
   4c600:	e8bd8010 	pop	{r4, pc}
   4c604:	e59f000c 	ldr	r0, [pc, #12]	; 4c618 <_USBConfigurationParser+0x2c>
   4c608:	e59f100c 	ldr	r1, [pc, #12]	; 4c61c <_USBConfigurationParser+0x30>
   4c60c:	e3a02090 	mov	r2, #144	; 0x90
   4c610:	ebffaa0c 	bl	36e48 <uspi_assertion_failed>
   4c614:	eafffff7 	b	4c5f8 <_USBConfigurationParser+0xc>
   4c618:	00056434 	.word	0x00056434
   4c61c:	00058048 	.word	0x00058048

0004c620 <USBConfigurationParserIsValid>:
   4c620:	e92d4010 	push	{r4, lr}
   4c624:	e2504000 	subs	r4, r0, #0
   4c628:	0a000001 	beq	4c634 <USBConfigurationParserIsValid+0x14>
   4c62c:	e5940008 	ldr	r0, [r4, #8]
   4c630:	e8bd8010 	pop	{r4, pc}
   4c634:	e59f0010 	ldr	r0, [pc, #16]	; 4c64c <USBConfigurationParserIsValid+0x2c>
   4c638:	e59f1010 	ldr	r1, [pc, #16]	; 4c650 <USBConfigurationParserIsValid+0x30>
   4c63c:	e3a02096 	mov	r2, #150	; 0x96
   4c640:	ebffaa00 	bl	36e48 <uspi_assertion_failed>
   4c644:	e5940008 	ldr	r0, [r4, #8]
   4c648:	e8bd8010 	pop	{r4, pc}
   4c64c:	00056434 	.word	0x00056434
   4c650:	00058048 	.word	0x00058048

0004c654 <USBConfigurationParserGetDescriptor>:
   4c654:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   4c658:	e2506000 	subs	r6, r0, #0
   4c65c:	e1a07001 	mov	r7, r1
   4c660:	0a00002e 	beq	4c720 <USBConfigurationParserGetDescriptor+0xcc>
   4c664:	e5963008 	ldr	r3, [r6, #8]
   4c668:	e3530000 	cmp	r3, #0
   4c66c:	0a000026 	beq	4c70c <USBConfigurationParserGetDescriptor+0xb8>
   4c670:	e5963010 	ldr	r3, [r6, #16]
   4c674:	e596200c 	ldr	r2, [r6, #12]
   4c678:	e1530002 	cmp	r3, r2
   4c67c:	2a000019 	bcs	4c6e8 <USBConfigurationParserGetDescriptor+0x94>
   4c680:	e2478005 	sub	r8, r7, #5
   4c684:	e16f8f18 	clz	r8, r8
   4c688:	e1a082a8 	lsr	r8, r8, #5
   4c68c:	ea00000b 	b	4c6c0 <USBConfigurationParserGetDescriptor+0x6c>
   4c690:	e3550004 	cmp	r5, #4
   4c694:	13a03000 	movne	r3, #0
   4c698:	02083001 	andeq	r3, r8, #1
   4c69c:	e3530000 	cmp	r3, #0
   4c6a0:	1a000010 	bne	4c6e8 <USBConfigurationParserGetDescriptor+0x94>
   4c6a4:	e1550007 	cmp	r5, r7
   4c6a8:	0a000011 	beq	4c6f4 <USBConfigurationParserGetDescriptor+0xa0>
   4c6ac:	e596200c 	ldr	r2, [r6, #12]
   4c6b0:	e1a03004 	mov	r3, r4
   4c6b4:	e1520004 	cmp	r2, r4
   4c6b8:	e5864010 	str	r4, [r6, #16]
   4c6bc:	9a000009 	bls	4c6e8 <USBConfigurationParserGetDescriptor+0x94>
   4c6c0:	e5d34000 	ldrb	r4, [r3]
   4c6c4:	e5d35001 	ldrb	r5, [r3, #1]
   4c6c8:	e0834004 	add	r4, r3, r4
   4c6cc:	e1540002 	cmp	r4, r2
   4c6d0:	9affffee 	bls	4c690 <USBConfigurationParserGetDescriptor+0x3c>
   4c6d4:	e59f0058 	ldr	r0, [pc, #88]	; 4c734 <USBConfigurationParserGetDescriptor+0xe0>
   4c6d8:	e59f1058 	ldr	r1, [pc, #88]	; 4c738 <USBConfigurationParserGetDescriptor+0xe4>
   4c6dc:	e3a020a7 	mov	r2, #167	; 0xa7
   4c6e0:	ebffa9d8 	bl	36e48 <uspi_assertion_failed>
   4c6e4:	eaffffe9 	b	4c690 <USBConfigurationParserGetDescriptor+0x3c>
   4c6e8:	e3a00000 	mov	r0, #0
   4c6ec:	e5860014 	str	r0, [r6, #20]
   4c6f0:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   4c6f4:	e5960010 	ldr	r0, [r6, #16]
   4c6f8:	e5864010 	str	r4, [r6, #16]
   4c6fc:	e3500000 	cmp	r0, #0
   4c700:	15860018 	strne	r0, [r6, #24]
   4c704:	e5860014 	str	r0, [r6, #20]
   4c708:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   4c70c:	e59f0028 	ldr	r0, [pc, #40]	; 4c73c <USBConfigurationParserGetDescriptor+0xe8>
   4c710:	e59f1020 	ldr	r1, [pc, #32]	; 4c738 <USBConfigurationParserGetDescriptor+0xe4>
   4c714:	e3a0209d 	mov	r2, #157	; 0x9d
   4c718:	ebffa9ca 	bl	36e48 <uspi_assertion_failed>
   4c71c:	eaffffd3 	b	4c670 <USBConfigurationParserGetDescriptor+0x1c>
   4c720:	e59f0018 	ldr	r0, [pc, #24]	; 4c740 <USBConfigurationParserGetDescriptor+0xec>
   4c724:	e59f100c 	ldr	r1, [pc, #12]	; 4c738 <USBConfigurationParserGetDescriptor+0xe4>
   4c728:	e3a0209c 	mov	r2, #156	; 0x9c
   4c72c:	ebffa9c5 	bl	36e48 <uspi_assertion_failed>
   4c730:	eaffffcb 	b	4c664 <USBConfigurationParserGetDescriptor+0x10>
   4c734:	00058084 	.word	0x00058084
   4c738:	00058048 	.word	0x00058048
   4c73c:	000569a8 	.word	0x000569a8
   4c740:	00056434 	.word	0x00056434

0004c744 <USBConfigurationParserGetCurrentDescriptor>:
   4c744:	e5903008 	ldr	r3, [r0, #8]
   4c748:	e92d4010 	push	{r4, lr}
   4c74c:	e3530000 	cmp	r3, #0
   4c750:	e1a04000 	mov	r4, r0
   4c754:	0a000008 	beq	4c77c <USBConfigurationParserGetCurrentDescriptor+0x38>
   4c758:	e5940014 	ldr	r0, [r4, #20]
   4c75c:	e3500000 	cmp	r0, #0
   4c760:	18bd8010 	popne	{r4, pc}
   4c764:	e59f0024 	ldr	r0, [pc, #36]	; 4c790 <USBConfigurationParserGetCurrentDescriptor+0x4c>
   4c768:	e59f1024 	ldr	r1, [pc, #36]	; 4c794 <USBConfigurationParserGetCurrentDescriptor+0x50>
   4c76c:	e3a020c6 	mov	r2, #198	; 0xc6
   4c770:	ebffa9b4 	bl	36e48 <uspi_assertion_failed>
   4c774:	e5940014 	ldr	r0, [r4, #20]
   4c778:	e8bd8010 	pop	{r4, pc}
   4c77c:	e59f0014 	ldr	r0, [pc, #20]	; 4c798 <USBConfigurationParserGetCurrentDescriptor+0x54>
   4c780:	e59f100c 	ldr	r1, [pc, #12]	; 4c794 <USBConfigurationParserGetCurrentDescriptor+0x50>
   4c784:	e3a020c5 	mov	r2, #197	; 0xc5
   4c788:	ebffa9ae 	bl	36e48 <uspi_assertion_failed>
   4c78c:	eafffff1 	b	4c758 <USBConfigurationParserGetCurrentDescriptor+0x14>
   4c790:	000580a8 	.word	0x000580a8
   4c794:	00058048 	.word	0x00058048
   4c798:	000569a8 	.word	0x000569a8

0004c79c <USBConfigurationParserError>:
   4c79c:	e92d4038 	push	{r3, r4, r5, lr}
   4c7a0:	e2504000 	subs	r4, r0, #0
   4c7a4:	e1a05001 	mov	r5, r1
   4c7a8:	0a000011 	beq	4c7f4 <USBConfigurationParserError+0x58>
   4c7ac:	e3550000 	cmp	r5, #0
   4c7b0:	0a00000a 	beq	4c7e0 <USBConfigurationParserError+0x44>
   4c7b4:	e5942018 	ldr	r2, [r4, #24]
   4c7b8:	e5943000 	ldr	r3, [r4]
   4c7bc:	e1a00005 	mov	r0, r5
   4c7c0:	e0633002 	rsb	r3, r3, r2
   4c7c4:	e3a01001 	mov	r1, #1
   4c7c8:	e59f2038 	ldr	r2, [pc, #56]	; 4c808 <USBConfigurationParserError+0x6c>
   4c7cc:	ebff5e69 	bl	24178 <LogWrite>
   4c7d0:	e8940003 	ldm	r4, {r0, r1}
   4c7d4:	e1a02005 	mov	r2, r5
   4c7d8:	e8bd4038 	pop	{r3, r4, r5, lr}
   4c7dc:	eaffa9a5 	b	36e78 <DebugHexdump>
   4c7e0:	e59f0024 	ldr	r0, [pc, #36]	; 4c80c <USBConfigurationParserError+0x70>
   4c7e4:	e59f1024 	ldr	r1, [pc, #36]	; 4c810 <USBConfigurationParserError+0x74>
   4c7e8:	e3a020ce 	mov	r2, #206	; 0xce
   4c7ec:	ebffa995 	bl	36e48 <uspi_assertion_failed>
   4c7f0:	eaffffef 	b	4c7b4 <USBConfigurationParserError+0x18>
   4c7f4:	e59f0018 	ldr	r0, [pc, #24]	; 4c814 <USBConfigurationParserError+0x78>
   4c7f8:	e59f1010 	ldr	r1, [pc, #16]	; 4c810 <USBConfigurationParserError+0x74>
   4c7fc:	e3a020cd 	mov	r2, #205	; 0xcd
   4c800:	ebffa990 	bl	36e48 <uspi_assertion_failed>
   4c804:	eaffffe8 	b	4c7ac <USBConfigurationParserError+0x10>
   4c808:	000580cc 	.word	0x000580cc
   4c80c:	00057640 	.word	0x00057640
   4c810:	00058048 	.word	0x00058048
   4c814:	00056434 	.word	0x00056434

0004c818 <KeyMap>:
   4c818:	e92d4010 	push	{r4, lr}
   4c81c:	e2504000 	subs	r4, r0, #0
   4c820:	0a000009 	beq	4c84c <KeyMap+0x34>
   4c824:	e3a03000 	mov	r3, #0
   4c828:	e3a02001 	mov	r2, #1
   4c82c:	e5843400 	str	r3, [r4, #1024]	; 0x400
   4c830:	e5842404 	str	r2, [r4, #1028]	; 0x404
   4c834:	e5843408 	str	r3, [r4, #1032]	; 0x408
   4c838:	e1a00004 	mov	r0, r4
   4c83c:	e8bd4010 	pop	{r4, lr}
   4c840:	e59f1018 	ldr	r1, [pc, #24]	; 4c860 <KeyMap+0x48>
   4c844:	e3a02b01 	mov	r2, #1024	; 0x400
   4c848:	eaffee1d 	b	480c4 <uspi_memcpy>
   4c84c:	e59f0010 	ldr	r0, [pc, #16]	; 4c864 <KeyMap+0x4c>
   4c850:	e59f1010 	ldr	r1, [pc, #16]	; 4c868 <KeyMap+0x50>
   4c854:	e3a0206c 	mov	r2, #108	; 0x6c
   4c858:	ebffa97a 	bl	36e48 <uspi_assertion_failed>
   4c85c:	eafffff0 	b	4c824 <KeyMap+0xc>
   4c860:	000580fc 	.word	0x000580fc
   4c864:	00056434 	.word	0x00056434
   4c868:	000585c8 	.word	0x000585c8

0004c86c <_KeyMap>:
   4c86c:	e12fff1e 	bx	lr

0004c870 <KeyMapClearTable>:
   4c870:	e92d4038 	push	{r3, r4, r5, lr}
   4c874:	e2504000 	subs	r4, r0, #0
   4c878:	e1a05001 	mov	r5, r1
   4c87c:	0a00000c 	beq	4c8b4 <KeyMapClearTable+0x44>
   4c880:	e3550003 	cmp	r5, #3
   4c884:	8a000008 	bhi	4c8ac <KeyMapClearTable+0x3c>
   4c888:	e3a03000 	mov	r3, #0
   4c88c:	e1a01003 	mov	r1, r3
   4c890:	e0842085 	add	r2, r4, r5, lsl #1
   4c894:	e18210b3 	strh	r1, [r2, r3]
   4c898:	e2833008 	add	r3, r3, #8
   4c89c:	e3530b01 	cmp	r3, #1024	; 0x400
   4c8a0:	1afffffb 	bne	4c894 <KeyMapClearTable+0x24>
   4c8a4:	e3a00001 	mov	r0, #1
   4c8a8:	e8bd8038 	pop	{r3, r4, r5, pc}
   4c8ac:	e3a00000 	mov	r0, #0
   4c8b0:	e8bd8038 	pop	{r3, r4, r5, pc}
   4c8b4:	e59f000c 	ldr	r0, [pc, #12]	; 4c8c8 <KeyMapClearTable+0x58>
   4c8b8:	e59f100c 	ldr	r1, [pc, #12]	; 4c8cc <KeyMapClearTable+0x5c>
   4c8bc:	e3a0207c 	mov	r2, #124	; 0x7c
   4c8c0:	ebffa960 	bl	36e48 <uspi_assertion_failed>
   4c8c4:	eaffffed 	b	4c880 <KeyMapClearTable+0x10>
   4c8c8:	00056434 	.word	0x00056434
   4c8cc:	000585c8 	.word	0x000585c8

0004c8d0 <KeyMapSetEntry>:
   4c8d0:	e92d4070 	push	{r4, r5, r6, lr}
   4c8d4:	e2506000 	subs	r6, r0, #0
   4c8d8:	e24dd008 	sub	sp, sp, #8
   4c8dc:	e1a04001 	mov	r4, r1
   4c8e0:	e1a05002 	mov	r5, r2
   4c8e4:	0a000010 	beq	4c92c <KeyMapSetEntry+0x5c>
   4c8e8:	e6af0075 	sxtb	r0, r5
   4c8ec:	e3500000 	cmp	r0, #0
   4c8f0:	c3a00000 	movgt	r0, #0
   4c8f4:	d3a00001 	movle	r0, #1
   4c8f8:	e3540003 	cmp	r4, #3
   4c8fc:	83800001 	orrhi	r0, r0, #1
   4c900:	e3500000 	cmp	r0, #0
   4c904:	13a00000 	movne	r0, #0
   4c908:	1a000005 	bne	4c924 <KeyMapSetEntry+0x54>
   4c90c:	e59f2034 	ldr	r2, [pc, #52]	; 4c948 <KeyMapSetEntry+0x78>
   4c910:	e1530002 	cmp	r3, r2
   4c914:	93a00001 	movls	r0, #1
   4c918:	90844105 	addls	r4, r4, r5, lsl #2
   4c91c:	91a04084 	lslls	r4, r4, #1
   4c920:	918630b4 	strhls	r3, [r6, r4]
   4c924:	e28dd008 	add	sp, sp, #8
   4c928:	e8bd8070 	pop	{r4, r5, r6, pc}
   4c92c:	e59f0018 	ldr	r0, [pc, #24]	; 4c94c <KeyMapSetEntry+0x7c>
   4c930:	e59f1018 	ldr	r1, [pc, #24]	; 4c950 <KeyMapSetEntry+0x80>
   4c934:	e3a0208d 	mov	r2, #141	; 0x8d
   4c938:	e58d3004 	str	r3, [sp, #4]
   4c93c:	ebffa941 	bl	36e48 <uspi_assertion_failed>
   4c940:	e59d3004 	ldr	r3, [sp, #4]
   4c944:	eaffffe7 	b	4c8e8 <KeyMapSetEntry+0x18>
   4c948:	00000132 	.word	0x00000132
   4c94c:	00056434 	.word	0x00056434
   4c950:	000585c8 	.word	0x000585c8

0004c954 <KeyMapTranslate>:
   4c954:	e92d4070 	push	{r4, r5, r6, lr}
   4c958:	e2505000 	subs	r5, r0, #0
   4c95c:	e1a04001 	mov	r4, r1
   4c960:	e1a06002 	mov	r6, r2
   4c964:	0a000044 	beq	4ca7c <KeyMapTranslate+0x128>
   4c968:	e6af3074 	sxtb	r3, r4
   4c96c:	e3530000 	cmp	r3, #0
   4c970:	da000022 	ble	4ca00 <KeyMapTranslate+0xac>
   4c974:	e1a03184 	lsl	r3, r4, #3
   4c978:	e19500b3 	ldrh	r0, [r5, r3]
   4c97c:	e3500f42 	cmp	r0, #264	; 0x108
   4c980:	0a000020 	beq	4ca08 <KeyMapTranslate+0xb4>
   4c984:	e2403f43 	sub	r3, r0, #268	; 0x10c
   4c988:	e2433003 	sub	r3, r3, #3
   4c98c:	e353000b 	cmp	r3, #11
   4c990:	8a000001 	bhi	4c99c <KeyMapTranslate+0x48>
   4c994:	e3160004 	tst	r6, #4
   4c998:	1a000024 	bne	4ca30 <KeyMapTranslate+0xdc>
   4c99c:	e316008c 	tst	r6, #140	; 0x8c
   4c9a0:	1a000016 	bne	4ca00 <KeyMapTranslate+0xac>
   4c9a4:	e2443053 	sub	r3, r4, #83	; 0x53
   4c9a8:	e3530010 	cmp	r3, #16
   4c9ac:	9a00001b 	bls	4ca20 <KeyMapTranslate+0xcc>
   4c9b0:	e3160040 	tst	r6, #64	; 0x40
   4c9b4:	0a00002c 	beq	4ca6c <KeyMapTranslate+0x118>
   4c9b8:	e3160022 	tst	r6, #34	; 0x22
   4c9bc:	13a03003 	movne	r3, #3
   4c9c0:	03a03002 	moveq	r3, #2
   4c9c4:	e0834104 	add	r4, r3, r4, lsl #2
   4c9c8:	e1a04084 	lsl	r4, r4, #1
   4c9cc:	e19500b4 	ldrh	r0, [r5, r4]
   4c9d0:	e59f30b8 	ldr	r3, [pc, #184]	; 4ca90 <KeyMapTranslate+0x13c>
   4c9d4:	e1500003 	cmp	r0, r3
   4c9d8:	0a00001d 	beq	4ca54 <KeyMapTranslate+0x100>
   4c9dc:	e3500e12 	cmp	r0, #288	; 0x120
   4c9e0:	0a000015 	beq	4ca3c <KeyMapTranslate+0xe8>
   4c9e4:	e3500f47 	cmp	r0, #284	; 0x11c
   4c9e8:	05953400 	ldreq	r3, [r5, #1024]	; 0x400
   4c9ec:	02800017 	addeq	r0, r0, #23
   4c9f0:	016f3f13 	clzeq	r3, r3
   4c9f4:	01a032a3 	lsreq	r3, r3, #5
   4c9f8:	05853400 	streq	r3, [r5, #1024]	; 0x400
   4c9fc:	e8bd8070 	pop	{r4, r5, r6, pc}
   4ca00:	e3a00000 	mov	r0, #0
   4ca04:	e8bd8070 	pop	{r4, r5, r6, pc}
   4ca08:	e3160011 	tst	r6, #17
   4ca0c:	0affffe2 	beq	4c99c <KeyMapTranslate+0x48>
   4ca10:	e3160004 	tst	r6, #4
   4ca14:	0affffe0 	beq	4c99c <KeyMapTranslate+0x48>
   4ca18:	e59f0074 	ldr	r0, [pc, #116]	; 4ca94 <KeyMapTranslate+0x140>
   4ca1c:	e8bd8070 	pop	{r4, r5, r6, pc}
   4ca20:	e5953404 	ldr	r3, [r5, #1028]	; 0x404
   4ca24:	e2933000 	adds	r3, r3, #0
   4ca28:	13a03001 	movne	r3, #1
   4ca2c:	eaffffe4 	b	4c9c4 <KeyMapTranslate+0x70>
   4ca30:	e2800027 	add	r0, r0, #39	; 0x27
   4ca34:	e6ff0070 	uxth	r0, r0
   4ca38:	e8bd8070 	pop	{r4, r5, r6, pc}
   4ca3c:	e5953404 	ldr	r3, [r5, #1028]	; 0x404
   4ca40:	e3a00f4d 	mov	r0, #308	; 0x134
   4ca44:	e16f3f13 	clz	r3, r3
   4ca48:	e1a032a3 	lsr	r3, r3, #5
   4ca4c:	e5853404 	str	r3, [r5, #1028]	; 0x404
   4ca50:	e8bd8070 	pop	{r4, r5, r6, pc}
   4ca54:	e5953408 	ldr	r3, [r5, #1032]	; 0x408
   4ca58:	e59f0038 	ldr	r0, [pc, #56]	; 4ca98 <KeyMapTranslate+0x144>
   4ca5c:	e16f3f13 	clz	r3, r3
   4ca60:	e1a032a3 	lsr	r3, r3, #5
   4ca64:	e5853408 	str	r3, [r5, #1032]	; 0x408
   4ca68:	e8bd8070 	pop	{r4, r5, r6, pc}
   4ca6c:	e3160022 	tst	r6, #34	; 0x22
   4ca70:	13a03001 	movne	r3, #1
   4ca74:	03a03000 	moveq	r3, #0
   4ca78:	eaffffd1 	b	4c9c4 <KeyMapTranslate+0x70>
   4ca7c:	e59f0018 	ldr	r0, [pc, #24]	; 4ca9c <KeyMapTranslate+0x148>
   4ca80:	e59f1018 	ldr	r1, [pc, #24]	; 4caa0 <KeyMapTranslate+0x14c>
   4ca84:	e3a0209e 	mov	r2, #158	; 0x9e
   4ca88:	ebffa8ee 	bl	36e48 <uspi_assertion_failed>
   4ca8c:	eaffffb5 	b	4c968 <KeyMapTranslate+0x14>
   4ca90:	0000011e 	.word	0x0000011e
   4ca94:	00000142 	.word	0x00000142
   4ca98:	00000135 	.word	0x00000135
   4ca9c:	00056434 	.word	0x00056434
   4caa0:	000585c8 	.word	0x000585c8

0004caa4 <KeyMapGetString>:
   4caa4:	e92d4070 	push	{r4, r5, r6, lr}
   4caa8:	e2505000 	subs	r5, r0, #0
   4caac:	e24dd008 	sub	sp, sp, #8
   4cab0:	e1a04001 	mov	r4, r1
   4cab4:	e1a06002 	mov	r6, r2
   4cab8:	0a00002f 	beq	4cb7c <KeyMapGetString+0xd8>
   4cabc:	e2442021 	sub	r2, r4, #33	; 0x21
   4cac0:	e59f10d0 	ldr	r1, [pc, #208]	; 4cb98 <KeyMapGetString+0xf4>
   4cac4:	e6ff2072 	uxth	r2, r2
   4cac8:	e1520001 	cmp	r2, r1
   4cacc:	8a000027 	bhi	4cb70 <KeyMapGetString+0xcc>
   4cad0:	e2442c01 	sub	r2, r4, #256	; 0x100
   4cad4:	e6ff1072 	uxth	r1, r2
   4cad8:	e3510032 	cmp	r1, #50	; 0x32
   4cadc:	9a00001e 	bls	4cb5c <KeyMapGetString+0xb8>
   4cae0:	e3160011 	tst	r6, #17
   4cae4:	e6ef4074 	uxtb	r4, r4
   4cae8:	0a000009 	beq	4cb14 <KeyMapGetString+0x70>
   4caec:	e2442061 	sub	r2, r4, #97	; 0x61
   4caf0:	e3520019 	cmp	r2, #25
   4caf4:	8a00001d 	bhi	4cb70 <KeyMapGetString+0xcc>
   4caf8:	e3a02000 	mov	r2, #0
   4cafc:	e1a00003 	mov	r0, r3
   4cb00:	e2444060 	sub	r4, r4, #96	; 0x60
   4cb04:	e5c34000 	strb	r4, [r3]
   4cb08:	e5c32001 	strb	r2, [r3, #1]
   4cb0c:	e28dd008 	add	sp, sp, #8
   4cb10:	e8bd8070 	pop	{r4, r5, r6, pc}
   4cb14:	e5952400 	ldr	r2, [r5, #1024]	; 0x400
   4cb18:	e3520000 	cmp	r2, #0
   4cb1c:	0a000008 	beq	4cb44 <KeyMapGetString+0xa0>
   4cb20:	e2442041 	sub	r2, r4, #65	; 0x41
   4cb24:	e3520019 	cmp	r2, #25
   4cb28:	92844020 	addls	r4, r4, #32
   4cb2c:	96ef4074 	uxtbls	r4, r4
   4cb30:	9a000003 	bls	4cb44 <KeyMapGetString+0xa0>
   4cb34:	e2442061 	sub	r2, r4, #97	; 0x61
   4cb38:	e3520019 	cmp	r2, #25
   4cb3c:	92444020 	subls	r4, r4, #32
   4cb40:	96ef4074 	uxtbls	r4, r4
   4cb44:	e3a02000 	mov	r2, #0
   4cb48:	e1a00003 	mov	r0, r3
   4cb4c:	e5c34000 	strb	r4, [r3]
   4cb50:	e5c32001 	strb	r2, [r3, #1]
   4cb54:	e28dd008 	add	sp, sp, #8
   4cb58:	e8bd8070 	pop	{r4, r5, r6, pc}
   4cb5c:	e59f3038 	ldr	r3, [pc, #56]	; 4cb9c <KeyMapGetString+0xf8>
   4cb60:	e0832102 	add	r2, r3, r2, lsl #2
   4cb64:	e5920400 	ldr	r0, [r2, #1024]	; 0x400
   4cb68:	e28dd008 	add	sp, sp, #8
   4cb6c:	e8bd8070 	pop	{r4, r5, r6, pc}
   4cb70:	e3a00000 	mov	r0, #0
   4cb74:	e28dd008 	add	sp, sp, #8
   4cb78:	e8bd8070 	pop	{r4, r5, r6, pc}
   4cb7c:	e59f001c 	ldr	r0, [pc, #28]	; 4cba0 <KeyMapGetString+0xfc>
   4cb80:	e59f101c 	ldr	r1, [pc, #28]	; 4cba4 <KeyMapGetString+0x100>
   4cb84:	e3a020ea 	mov	r2, #234	; 0xea
   4cb88:	e58d3004 	str	r3, [sp, #4]
   4cb8c:	ebffa8ad 	bl	36e48 <uspi_assertion_failed>
   4cb90:	e59d3004 	ldr	r3, [sp, #4]
   4cb94:	eaffffc8 	b	4cabc <KeyMapGetString+0x18>
   4cb98:	00000111 	.word	0x00000111
   4cb9c:	000580fc 	.word	0x000580fc
   4cba0:	00056434 	.word	0x00056434
   4cba4:	000585c8 	.word	0x000585c8

0004cba8 <KeyMapGetLEDStatus>:
   4cba8:	e92d4010 	push	{r4, lr}
   4cbac:	e2504000 	subs	r4, r0, #0
   4cbb0:	0a00000b 	beq	4cbe4 <KeyMapGetLEDStatus+0x3c>
   4cbb4:	e5940400 	ldr	r0, [r4, #1024]	; 0x400
   4cbb8:	e5943404 	ldr	r3, [r4, #1028]	; 0x404
   4cbbc:	e3500000 	cmp	r0, #0
   4cbc0:	13a00002 	movne	r0, #2
   4cbc4:	03a00000 	moveq	r0, #0
   4cbc8:	e3530000 	cmp	r3, #0
   4cbcc:	e5943408 	ldr	r3, [r4, #1032]	; 0x408
   4cbd0:	13800001 	orrne	r0, r0, #1
   4cbd4:	16ef0070 	uxtbne	r0, r0
   4cbd8:	e3530000 	cmp	r3, #0
   4cbdc:	13800004 	orrne	r0, r0, #4
   4cbe0:	e8bd8010 	pop	{r4, pc}
   4cbe4:	e59f000c 	ldr	r0, [pc, #12]	; 4cbf8 <KeyMapGetLEDStatus+0x50>
   4cbe8:	e59f100c 	ldr	r1, [pc, #12]	; 4cbfc <KeyMapGetLEDStatus+0x54>
   4cbec:	e59f200c 	ldr	r2, [pc, #12]	; 4cc00 <KeyMapGetLEDStatus+0x58>
   4cbf0:	ebffa894 	bl	36e48 <uspi_assertion_failed>
   4cbf4:	eaffffee 	b	4cbb4 <KeyMapGetLEDStatus+0xc>
   4cbf8:	00056434 	.word	0x00056434
   4cbfc:	000585c8 	.word	0x000585c8
   4cc00:	0000011b 	.word	0x0000011b

0004cc04 <__itoa>:
   4cc04:	e2423002 	sub	r3, r2, #2
   4cc08:	e3530022 	cmp	r3, #34	; 0x22
   4cc0c:	8a000010 	bhi	4cc54 <__itoa+0x50>
   4cc10:	e1a03fa0 	lsr	r3, r0, #31
   4cc14:	e352000a 	cmp	r2, #10
   4cc18:	13a03000 	movne	r3, #0
   4cc1c:	02033001 	andeq	r3, r3, #1
   4cc20:	e3530000 	cmp	r3, #0
   4cc24:	11a03001 	movne	r3, r1
   4cc28:	13a0c02d 	movne	ip, #45	; 0x2d
   4cc2c:	01a03001 	moveq	r3, r1
   4cc30:	e92d4010 	push	{r4, lr}
   4cc34:	e1a04001 	mov	r4, r1
   4cc38:	14c3c001 	strbne	ip, [r3], #1
   4cc3c:	12600000 	rsbne	r0, r0, #0
   4cc40:	e1a01003 	mov	r1, r3
   4cc44:	eb000676 	bl	4e624 <__utoa>
   4cc48:	e1a00004 	mov	r0, r4
   4cc4c:	e8bd4010 	pop	{r4, lr}
   4cc50:	e12fff1e 	bx	lr
   4cc54:	e3a00000 	mov	r0, #0
   4cc58:	e5c10000 	strb	r0, [r1]
   4cc5c:	e12fff1e 	bx	lr

0004cc60 <itoa>:
   4cc60:	eaffffe7 	b	4cc04 <__itoa>

0004cc64 <memcmp>:
   4cc64:	e3520003 	cmp	r2, #3
   4cc68:	8a000010 	bhi	4ccb0 <memcmp+0x4c>
   4cc6c:	e3520000 	cmp	r2, #0
   4cc70:	e242c001 	sub	ip, r2, #1
   4cc74:	0a00000b 	beq	4cca8 <memcmp+0x44>
   4cc78:	e5d02000 	ldrb	r2, [r0]
   4cc7c:	e5d13000 	ldrb	r3, [r1]
   4cc80:	e1520003 	cmp	r2, r3
   4cc84:	0081c00c 	addeq	ip, r1, ip
   4cc88:	0a000004 	beq	4cca0 <memcmp+0x3c>
   4cc8c:	ea00002c 	b	4cd44 <memcmp+0xe0>
   4cc90:	e5f02001 	ldrb	r2, [r0, #1]!
   4cc94:	e5f13001 	ldrb	r3, [r1, #1]!
   4cc98:	e1520003 	cmp	r2, r3
   4cc9c:	1a000028 	bne	4cd44 <memcmp+0xe0>
   4cca0:	e151000c 	cmp	r1, ip
   4cca4:	1afffff9 	bne	4cc90 <memcmp+0x2c>
   4cca8:	e3a00000 	mov	r0, #0
   4ccac:	e12fff1e 	bx	lr
   4ccb0:	e1803001 	orr	r3, r0, r1
   4ccb4:	e3130003 	tst	r3, #3
   4ccb8:	e1a0c000 	mov	ip, r0
   4ccbc:	e1a03001 	mov	r3, r1
   4ccc0:	1a000024 	bne	4cd58 <memcmp+0xf4>
   4ccc4:	e92d4010 	push	{r4, lr}
   4ccc8:	e593e000 	ldr	lr, [r3]
   4cccc:	e59c4000 	ldr	r4, [ip]
   4ccd0:	e154000e 	cmp	r4, lr
   4ccd4:	e1a01003 	mov	r1, r3
   4ccd8:	e1a0000c 	mov	r0, ip
   4ccdc:	e2833004 	add	r3, r3, #4
   4cce0:	e28cc004 	add	ip, ip, #4
   4cce4:	1a00001d 	bne	4cd60 <memcmp+0xfc>
   4cce8:	e2422004 	sub	r2, r2, #4
   4ccec:	e3520003 	cmp	r2, #3
   4ccf0:	e1a0000c 	mov	r0, ip
   4ccf4:	e1a01003 	mov	r1, r3
   4ccf8:	8afffff2 	bhi	4ccc8 <memcmp+0x64>
   4ccfc:	e3520000 	cmp	r2, #0
   4cd00:	e242c001 	sub	ip, r2, #1
   4cd04:	0a00000b 	beq	4cd38 <memcmp+0xd4>
   4cd08:	e5d02000 	ldrb	r2, [r0]
   4cd0c:	e5d13000 	ldrb	r3, [r1]
   4cd10:	e1520003 	cmp	r2, r3
   4cd14:	0081c00c 	addeq	ip, r1, ip
   4cd18:	0a000004 	beq	4cd30 <memcmp+0xcc>
   4cd1c:	ea00000a 	b	4cd4c <memcmp+0xe8>
   4cd20:	e5f02001 	ldrb	r2, [r0, #1]!
   4cd24:	e5f13001 	ldrb	r3, [r1, #1]!
   4cd28:	e1520003 	cmp	r2, r3
   4cd2c:	1a000006 	bne	4cd4c <memcmp+0xe8>
   4cd30:	e151000c 	cmp	r1, ip
   4cd34:	1afffff9 	bne	4cd20 <memcmp+0xbc>
   4cd38:	e3a00000 	mov	r0, #0
   4cd3c:	e8bd4010 	pop	{r4, lr}
   4cd40:	e12fff1e 	bx	lr
   4cd44:	e0420003 	sub	r0, r2, r3
   4cd48:	e12fff1e 	bx	lr
   4cd4c:	e0420003 	sub	r0, r2, r3
   4cd50:	e8bd4010 	pop	{r4, lr}
   4cd54:	e12fff1e 	bx	lr
   4cd58:	e242c001 	sub	ip, r2, #1
   4cd5c:	eaffffc5 	b	4cc78 <memcmp+0x14>
   4cd60:	e242c001 	sub	ip, r2, #1
   4cd64:	eaffffe7 	b	4cd08 <memcmp+0xa4>

0004cd68 <memcpy>:
   4cd68:	e352000f 	cmp	r2, #15
   4cd6c:	9a00000a 	bls	4cd9c <memcpy+0x34>
   4cd70:	e1803001 	orr	r3, r0, r1
   4cd74:	e3130003 	tst	r3, #3
   4cd78:	11a03000 	movne	r3, r0
   4cd7c:	0a00000a 	beq	4cdac <memcpy+0x44>
   4cd80:	e2433001 	sub	r3, r3, #1
   4cd84:	e0812002 	add	r2, r1, r2
   4cd88:	e4d1c001 	ldrb	ip, [r1], #1
   4cd8c:	e1510002 	cmp	r1, r2
   4cd90:	e5e3c001 	strb	ip, [r3, #1]!
   4cd94:	1afffffb 	bne	4cd88 <memcpy+0x20>
   4cd98:	e12fff1e 	bx	lr
   4cd9c:	e3520000 	cmp	r2, #0
   4cda0:	e1a03000 	mov	r3, r0
   4cda4:	1afffff5 	bne	4cd80 <memcpy+0x18>
   4cda8:	e12fff1e 	bx	lr
   4cdac:	e2423010 	sub	r3, r2, #16
   4cdb0:	e92d4070 	push	{r4, r5, r6, lr}
   4cdb4:	e1a03223 	lsr	r3, r3, #4
   4cdb8:	e2816020 	add	r6, r1, #32
   4cdbc:	e0866203 	add	r6, r6, r3, lsl #4
   4cdc0:	e281c010 	add	ip, r1, #16
   4cdc4:	e280e010 	add	lr, r0, #16
   4cdc8:	e51c5010 	ldr	r5, [ip, #-16]
   4cdcc:	e51c400c 	ldr	r4, [ip, #-12]
   4cdd0:	e50e5010 	str	r5, [lr, #-16]
   4cdd4:	e50e400c 	str	r4, [lr, #-12]
   4cdd8:	e51c5008 	ldr	r5, [ip, #-8]
   4cddc:	e51c4004 	ldr	r4, [ip, #-4]
   4cde0:	e28cc010 	add	ip, ip, #16
   4cde4:	e15c0006 	cmp	ip, r6
   4cde8:	e50e5008 	str	r5, [lr, #-8]
   4cdec:	e50e4004 	str	r4, [lr, #-4]
   4cdf0:	e28ee010 	add	lr, lr, #16
   4cdf4:	1afffff3 	bne	4cdc8 <memcpy+0x60>
   4cdf8:	e202e00f 	and	lr, r2, #15
   4cdfc:	e2833001 	add	r3, r3, #1
   4ce00:	e1a03203 	lsl	r3, r3, #4
   4ce04:	e35e0003 	cmp	lr, #3
   4ce08:	e0811003 	add	r1, r1, r3
   4ce0c:	91a0200e 	movls	r2, lr
   4ce10:	e0803003 	add	r3, r0, r3
   4ce14:	9a00000d 	bls	4ce50 <memcpy+0xe8>
   4ce18:	e1a05001 	mov	r5, r1
   4ce1c:	e1a0c00e 	mov	ip, lr
   4ce20:	e2434004 	sub	r4, r3, #4
   4ce24:	e24cc004 	sub	ip, ip, #4
   4ce28:	e4956004 	ldr	r6, [r5], #4
   4ce2c:	e35c0003 	cmp	ip, #3
   4ce30:	e5a46004 	str	r6, [r4, #4]!
   4ce34:	8afffffa 	bhi	4ce24 <memcpy+0xbc>
   4ce38:	e24ec004 	sub	ip, lr, #4
   4ce3c:	e3ccc003 	bic	ip, ip, #3
   4ce40:	e28cc004 	add	ip, ip, #4
   4ce44:	e083300c 	add	r3, r3, ip
   4ce48:	e081100c 	add	r1, r1, ip
   4ce4c:	e2022003 	and	r2, r2, #3
   4ce50:	e3520000 	cmp	r2, #0
   4ce54:	12433001 	subne	r3, r3, #1
   4ce58:	10812002 	addne	r2, r1, r2
   4ce5c:	0a000003 	beq	4ce70 <memcpy+0x108>
   4ce60:	e4d1c001 	ldrb	ip, [r1], #1
   4ce64:	e1510002 	cmp	r1, r2
   4ce68:	e5e3c001 	strb	ip, [r3, #1]!
   4ce6c:	1afffffb 	bne	4ce60 <memcpy+0xf8>
   4ce70:	e8bd4070 	pop	{r4, r5, r6, lr}
   4ce74:	e12fff1e 	bx	lr

0004ce78 <memset>:
   4ce78:	e3100003 	tst	r0, #3
   4ce7c:	0a000040 	beq	4cf84 <memset+0x10c>
   4ce80:	e3520000 	cmp	r2, #0
   4ce84:	e2422001 	sub	r2, r2, #1
   4ce88:	012fff1e 	bxeq	lr
   4ce8c:	e201c0ff 	and	ip, r1, #255	; 0xff
   4ce90:	e1a03000 	mov	r3, r0
   4ce94:	ea000002 	b	4cea4 <memset+0x2c>
   4ce98:	e2422001 	sub	r2, r2, #1
   4ce9c:	e3720001 	cmn	r2, #1
   4cea0:	012fff1e 	bxeq	lr
   4cea4:	e4c3c001 	strb	ip, [r3], #1
   4cea8:	e3130003 	tst	r3, #3
   4ceac:	1afffff9 	bne	4ce98 <memset+0x20>
   4ceb0:	e3520003 	cmp	r2, #3
   4ceb4:	9a00002a 	bls	4cf64 <memset+0xec>
   4ceb8:	e92d4030 	push	{r4, r5, lr}
   4cebc:	e201e0ff 	and	lr, r1, #255	; 0xff
   4cec0:	e18ee40e 	orr	lr, lr, lr, lsl #8
   4cec4:	e352000f 	cmp	r2, #15
   4cec8:	e18ee80e 	orr	lr, lr, lr, lsl #16
   4cecc:	9a000010 	bls	4cf14 <memset+0x9c>
   4ced0:	e2425010 	sub	r5, r2, #16
   4ced4:	e1a05225 	lsr	r5, r5, #4
   4ced8:	e2834020 	add	r4, r3, #32
   4cedc:	e0844205 	add	r4, r4, r5, lsl #4
   4cee0:	e283c010 	add	ip, r3, #16
   4cee4:	e50ce010 	str	lr, [ip, #-16]
   4cee8:	e50ce00c 	str	lr, [ip, #-12]
   4ceec:	e50ce008 	str	lr, [ip, #-8]
   4cef0:	e50ce004 	str	lr, [ip, #-4]
   4cef4:	e28cc010 	add	ip, ip, #16
   4cef8:	e15c0004 	cmp	ip, r4
   4cefc:	1afffff8 	bne	4cee4 <memset+0x6c>
   4cf00:	e202200f 	and	r2, r2, #15
   4cf04:	e2855001 	add	r5, r5, #1
   4cf08:	e3520003 	cmp	r2, #3
   4cf0c:	e0833205 	add	r3, r3, r5, lsl #4
   4cf10:	9a00000a 	bls	4cf40 <memset+0xc8>
   4cf14:	e1a04003 	mov	r4, r3
   4cf18:	e1a0c002 	mov	ip, r2
   4cf1c:	e24cc004 	sub	ip, ip, #4
   4cf20:	e35c0003 	cmp	ip, #3
   4cf24:	e484e004 	str	lr, [r4], #4
   4cf28:	8afffffb 	bhi	4cf1c <memset+0xa4>
   4cf2c:	e242c004 	sub	ip, r2, #4
   4cf30:	e3ccc003 	bic	ip, ip, #3
   4cf34:	e28cc004 	add	ip, ip, #4
   4cf38:	e083300c 	add	r3, r3, ip
   4cf3c:	e2022003 	and	r2, r2, #3
   4cf40:	e3520000 	cmp	r2, #0
   4cf44:	120110ff 	andne	r1, r1, #255	; 0xff
   4cf48:	10832002 	addne	r2, r3, r2
   4cf4c:	0a000002 	beq	4cf5c <memset+0xe4>
   4cf50:	e4c31001 	strb	r1, [r3], #1
   4cf54:	e1520003 	cmp	r2, r3
   4cf58:	1afffffc 	bne	4cf50 <memset+0xd8>
   4cf5c:	e8bd4030 	pop	{r4, r5, lr}
   4cf60:	e12fff1e 	bx	lr
   4cf64:	e3520000 	cmp	r2, #0
   4cf68:	012fff1e 	bxeq	lr
   4cf6c:	e20110ff 	and	r1, r1, #255	; 0xff
   4cf70:	e0832002 	add	r2, r3, r2
   4cf74:	e4c31001 	strb	r1, [r3], #1
   4cf78:	e1520003 	cmp	r2, r3
   4cf7c:	1afffffc 	bne	4cf74 <memset+0xfc>
   4cf80:	e12fff1e 	bx	lr
   4cf84:	e1a03000 	mov	r3, r0
   4cf88:	eaffffc8 	b	4ceb0 <memset+0x38>

0004cf8c <strcasecmp>:
   4cf8c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   4cf90:	e1a07000 	mov	r7, r0
   4cf94:	e1a06001 	mov	r6, r1
   4cf98:	e4d74001 	ldrb	r4, [r7], #1
   4cf9c:	eb0005fb 	bl	4e790 <__locale_ctype_ptr>
   4cfa0:	e0800004 	add	r0, r0, r4
   4cfa4:	e5d03001 	ldrb	r3, [r0, #1]
   4cfa8:	e2033003 	and	r3, r3, #3
   4cfac:	e3530001 	cmp	r3, #1
   4cfb0:	02844020 	addeq	r4, r4, #32
   4cfb4:	e4d65001 	ldrb	r5, [r6], #1
   4cfb8:	eb0005f4 	bl	4e790 <__locale_ctype_ptr>
   4cfbc:	e0800005 	add	r0, r0, r5
   4cfc0:	e5d03001 	ldrb	r3, [r0, #1]
   4cfc4:	e2033003 	and	r3, r3, #3
   4cfc8:	e3530001 	cmp	r3, #1
   4cfcc:	0a000005 	beq	4cfe8 <strcasecmp+0x5c>
   4cfd0:	e0540005 	subs	r0, r4, r5
   4cfd4:	1a000001 	bne	4cfe0 <strcasecmp+0x54>
   4cfd8:	e3550000 	cmp	r5, #0
   4cfdc:	1affffed 	bne	4cf98 <strcasecmp+0xc>
   4cfe0:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   4cfe4:	e12fff1e 	bx	lr
   4cfe8:	e2850020 	add	r0, r5, #32
   4cfec:	e0540000 	subs	r0, r4, r0
   4cff0:	0affffe8 	beq	4cf98 <strcasecmp+0xc>
   4cff4:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   4cff8:	e12fff1e 	bx	lr

0004cffc <strcat>:
   4cffc:	e3100003 	tst	r0, #3
   4d000:	e92d4010 	push	{r4, lr}
   4d004:	e1a04000 	mov	r4, r0
   4d008:	1a00000c 	bne	4d040 <strcat+0x44>
   4d00c:	e5942000 	ldr	r2, [r4]
   4d010:	e59fe050 	ldr	lr, [pc, #80]	; 4d068 <strcat+0x6c>
   4d014:	e59fc050 	ldr	ip, [pc, #80]	; 4d06c <strcat+0x70>
   4d018:	e082300e 	add	r3, r2, lr
   4d01c:	e1c33002 	bic	r3, r3, r2
   4d020:	e113000c 	tst	r3, ip
   4d024:	e1a00004 	mov	r0, r4
   4d028:	1a000004 	bne	4d040 <strcat+0x44>
   4d02c:	e5b02004 	ldr	r2, [r0, #4]!
   4d030:	e082300e 	add	r3, r2, lr
   4d034:	e1c33002 	bic	r3, r3, r2
   4d038:	e113000c 	tst	r3, ip
   4d03c:	0afffffa 	beq	4d02c <strcat+0x30>
   4d040:	e5d03000 	ldrb	r3, [r0]
   4d044:	e3530000 	cmp	r3, #0
   4d048:	0a000002 	beq	4d058 <strcat+0x5c>
   4d04c:	e5f03001 	ldrb	r3, [r0, #1]!
   4d050:	e3530000 	cmp	r3, #0
   4d054:	1afffffc 	bne	4d04c <strcat+0x50>
   4d058:	eb0000ee 	bl	4d418 <strcpy>
   4d05c:	e1a00004 	mov	r0, r4
   4d060:	e8bd4010 	pop	{r4, lr}
   4d064:	e12fff1e 	bx	lr
   4d068:	fefefeff 	.word	0xfefefeff
   4d06c:	80808080 	.word	0x80808080

0004d070 <strchr>:
   4d070:	e20110ff 	and	r1, r1, #255	; 0xff
   4d074:	e3510000 	cmp	r1, #0
   4d078:	e2003003 	and	r3, r0, #3
   4d07c:	0a000035 	beq	4d158 <strchr+0xe8>
   4d080:	e3530000 	cmp	r3, #0
   4d084:	0a00000e 	beq	4d0c4 <strchr+0x54>
   4d088:	e5d03000 	ldrb	r3, [r0]
   4d08c:	e3530000 	cmp	r3, #0
   4d090:	0a000053 	beq	4d1e4 <strchr+0x174>
   4d094:	e1510003 	cmp	r1, r3
   4d098:	012fff1e 	bxeq	lr
   4d09c:	e2803001 	add	r3, r0, #1
   4d0a0:	ea000004 	b	4d0b8 <strchr+0x48>
   4d0a4:	e4d32001 	ldrb	r2, [r3], #1
   4d0a8:	e3520000 	cmp	r2, #0
   4d0ac:	0a00004a 	beq	4d1dc <strchr+0x16c>
   4d0b0:	e1520001 	cmp	r2, r1
   4d0b4:	012fff1e 	bxeq	lr
   4d0b8:	e3130003 	tst	r3, #3
   4d0bc:	e1a00003 	mov	r0, r3
   4d0c0:	1afffff7 	bne	4d0a4 <strchr+0x34>
   4d0c4:	e92d4070 	push	{r4, r5, r6, lr}
   4d0c8:	e590c000 	ldr	ip, [r0]
   4d0cc:	e1815401 	orr	r5, r1, r1, lsl #8
   4d0d0:	e59f4114 	ldr	r4, [pc, #276]	; 4d1ec <strchr+0x17c>
   4d0d4:	e1855805 	orr	r5, r5, r5, lsl #16
   4d0d8:	e025e00c 	eor	lr, r5, ip
   4d0dc:	e08e3004 	add	r3, lr, r4
   4d0e0:	e08c2004 	add	r2, ip, r4
   4d0e4:	e1c3300e 	bic	r3, r3, lr
   4d0e8:	e1c2200c 	bic	r2, r2, ip
   4d0ec:	e59f60fc 	ldr	r6, [pc, #252]	; 4d1f0 <strchr+0x180>
   4d0f0:	e1833002 	orr	r3, r3, r2
   4d0f4:	e1130006 	tst	r3, r6
   4d0f8:	1a000008 	bne	4d120 <strchr+0xb0>
   4d0fc:	e5b0c004 	ldr	ip, [r0, #4]!
   4d100:	e02ce005 	eor	lr, ip, r5
   4d104:	e08e2004 	add	r2, lr, r4
   4d108:	e08c3004 	add	r3, ip, r4
   4d10c:	e1c2200e 	bic	r2, r2, lr
   4d110:	e1c3300c 	bic	r3, r3, ip
   4d114:	e1833002 	orr	r3, r3, r2
   4d118:	e1130006 	tst	r3, r6
   4d11c:	0afffff6 	beq	4d0fc <strchr+0x8c>
   4d120:	e5d03000 	ldrb	r3, [r0]
   4d124:	e3530000 	cmp	r3, #0
   4d128:	0a000007 	beq	4d14c <strchr+0xdc>
   4d12c:	e1510003 	cmp	r1, r3
   4d130:	1a000002 	bne	4d140 <strchr+0xd0>
   4d134:	ea000005 	b	4d150 <strchr+0xe0>
   4d138:	e1530001 	cmp	r3, r1
   4d13c:	0a000003 	beq	4d150 <strchr+0xe0>
   4d140:	e5f03001 	ldrb	r3, [r0, #1]!
   4d144:	e3530000 	cmp	r3, #0
   4d148:	1afffffa 	bne	4d138 <strchr+0xc8>
   4d14c:	e1a00003 	mov	r0, r3
   4d150:	e8bd4070 	pop	{r4, r5, r6, lr}
   4d154:	e12fff1e 	bx	lr
   4d158:	e3530000 	cmp	r3, #0
   4d15c:	0a00000b 	beq	4d190 <strchr+0x120>
   4d160:	e5d03000 	ldrb	r3, [r0]
   4d164:	e3530000 	cmp	r3, #0
   4d168:	012fff1e 	bxeq	lr
   4d16c:	e2803001 	add	r3, r0, #1
   4d170:	ea000003 	b	4d184 <strchr+0x114>
   4d174:	e5d02000 	ldrb	r2, [r0]
   4d178:	e3520000 	cmp	r2, #0
   4d17c:	e2833001 	add	r3, r3, #1
   4d180:	012fff1e 	bxeq	lr
   4d184:	e3130003 	tst	r3, #3
   4d188:	e1a00003 	mov	r0, r3
   4d18c:	1afffff8 	bne	4d174 <strchr+0x104>
   4d190:	e5902000 	ldr	r2, [r0]
   4d194:	e59fc050 	ldr	ip, [pc, #80]	; 4d1ec <strchr+0x17c>
   4d198:	e59f1050 	ldr	r1, [pc, #80]	; 4d1f0 <strchr+0x180>
   4d19c:	e082300c 	add	r3, r2, ip
   4d1a0:	e1c33002 	bic	r3, r3, r2
   4d1a4:	e1130001 	tst	r3, r1
   4d1a8:	1a000004 	bne	4d1c0 <strchr+0x150>
   4d1ac:	e5b02004 	ldr	r2, [r0, #4]!
   4d1b0:	e082300c 	add	r3, r2, ip
   4d1b4:	e1c33002 	bic	r3, r3, r2
   4d1b8:	e1130001 	tst	r3, r1
   4d1bc:	0afffffa 	beq	4d1ac <strchr+0x13c>
   4d1c0:	e5d03000 	ldrb	r3, [r0]
   4d1c4:	e3530000 	cmp	r3, #0
   4d1c8:	012fff1e 	bxeq	lr
   4d1cc:	e5f03001 	ldrb	r3, [r0, #1]!
   4d1d0:	e3530000 	cmp	r3, #0
   4d1d4:	1afffffc 	bne	4d1cc <strchr+0x15c>
   4d1d8:	e12fff1e 	bx	lr
   4d1dc:	e1a00002 	mov	r0, r2
   4d1e0:	e12fff1e 	bx	lr
   4d1e4:	e1a00003 	mov	r0, r3
   4d1e8:	e12fff1e 	bx	lr
   4d1ec:	fefefeff 	.word	0xfefefeff
   4d1f0:	80808080 	.word	0x80808080

0004d1f4 <strcmp>:
   4d1f4:	e020c001 	eor	ip, r0, r1
   4d1f8:	e31c0003 	tst	ip, #3
   4d1fc:	1a000021 	bne	4d288 <strcmp+0x94>
   4d200:	e210c003 	ands	ip, r0, #3
   4d204:	e3c00003 	bic	r0, r0, #3
   4d208:	e3c11003 	bic	r1, r1, #3
   4d20c:	e4902004 	ldr	r2, [r0], #4
   4d210:	04913004 	ldreq	r3, [r1], #4
   4d214:	0a000006 	beq	4d234 <strcmp+0x40>
   4d218:	e22cc003 	eor	ip, ip, #3
   4d21c:	e3e034ff 	mvn	r3, #-16777216	; 0xff000000
   4d220:	e1a0c18c 	lsl	ip, ip, #3
   4d224:	e1a0cc33 	lsr	ip, r3, ip
   4d228:	e4913004 	ldr	r3, [r1], #4
   4d22c:	e182200c 	orr	r2, r2, ip
   4d230:	e183300c 	orr	r3, r3, ip
   4d234:	e52d4004 	push	{r4}		; (str r4, [sp, #-4]!)
   4d238:	e3a04001 	mov	r4, #1
   4d23c:	e1844404 	orr	r4, r4, r4, lsl #8
   4d240:	e1844804 	orr	r4, r4, r4, lsl #16
   4d244:	e042c004 	sub	ip, r2, r4
   4d248:	e1520003 	cmp	r2, r3
   4d24c:	01ccc002 	biceq	ip, ip, r2
   4d250:	011c0384 	tsteq	ip, r4, lsl #7
   4d254:	04902004 	ldreq	r2, [r0], #4
   4d258:	04913004 	ldreq	r3, [r1], #4
   4d25c:	0afffff8 	beq	4d244 <strcmp+0x50>
   4d260:	e1a00c02 	lsl	r0, r2, #24
   4d264:	e1a02422 	lsr	r2, r2, #8
   4d268:	e3500001 	cmp	r0, #1
   4d26c:	21500c03 	cmpcs	r0, r3, lsl #24
   4d270:	01a03423 	lsreq	r3, r3, #8
   4d274:	0afffff9 	beq	4d260 <strcmp+0x6c>
   4d278:	e20330ff 	and	r3, r3, #255	; 0xff
   4d27c:	e0630c20 	rsb	r0, r3, r0, lsr #24
   4d280:	e49d4004 	pop	{r4}		; (ldr r4, [sp], #4)
   4d284:	e12fff1e 	bx	lr
   4d288:	e3100003 	tst	r0, #3
   4d28c:	0a000006 	beq	4d2ac <strcmp+0xb8>
   4d290:	e4d02001 	ldrb	r2, [r0], #1
   4d294:	e4d13001 	ldrb	r3, [r1], #1
   4d298:	e3520001 	cmp	r2, #1
   4d29c:	21520003 	cmpcs	r2, r3
   4d2a0:	0afffff8 	beq	4d288 <strcmp+0x94>
   4d2a4:	e0420003 	sub	r0, r2, r3
   4d2a8:	e12fff1e 	bx	lr
   4d2ac:	e92d0030 	push	{r4, r5}
   4d2b0:	e3a04001 	mov	r4, #1
   4d2b4:	e1844404 	orr	r4, r4, r4, lsl #8
   4d2b8:	e1844804 	orr	r4, r4, r4, lsl #16
   4d2bc:	e4902004 	ldr	r2, [r0], #4
   4d2c0:	e2015003 	and	r5, r1, #3
   4d2c4:	e3c11003 	bic	r1, r1, #3
   4d2c8:	e4913004 	ldr	r3, [r1], #4
   4d2cc:	e3550002 	cmp	r5, #2
   4d2d0:	0a000017 	beq	4d334 <strcmp+0x140>
   4d2d4:	8a00002d 	bhi	4d390 <strcmp+0x19c>
   4d2d8:	e3c254ff 	bic	r5, r2, #-16777216	; 0xff000000
   4d2dc:	e1550423 	cmp	r5, r3, lsr #8
   4d2e0:	e042c004 	sub	ip, r2, r4
   4d2e4:	e1ccc002 	bic	ip, ip, r2
   4d2e8:	1a000007 	bne	4d30c <strcmp+0x118>
   4d2ec:	e01cc384 	ands	ip, ip, r4, lsl #7
   4d2f0:	04913004 	ldreq	r3, [r1], #4
   4d2f4:	1a000006 	bne	4d314 <strcmp+0x120>
   4d2f8:	e0255002 	eor	r5, r5, r2
   4d2fc:	e1550c03 	cmp	r5, r3, lsl #24
   4d300:	1a000008 	bne	4d328 <strcmp+0x134>
   4d304:	e4902004 	ldr	r2, [r0], #4
   4d308:	eafffff2 	b	4d2d8 <strcmp+0xe4>
   4d30c:	e1a03423 	lsr	r3, r3, #8
   4d310:	ea000036 	b	4d3f0 <strcmp+0x1fc>
   4d314:	e3dcc4ff 	bics	ip, ip, #-16777216	; 0xff000000
   4d318:	1a000031 	bne	4d3e4 <strcmp+0x1f0>
   4d31c:	e5d13000 	ldrb	r3, [r1]
   4d320:	e1a05c22 	lsr	r5, r2, #24
   4d324:	ea000031 	b	4d3f0 <strcmp+0x1fc>
   4d328:	e1a05c22 	lsr	r5, r2, #24
   4d32c:	e20330ff 	and	r3, r3, #255	; 0xff
   4d330:	ea00002e 	b	4d3f0 <strcmp+0x1fc>
   4d334:	e1a05802 	lsl	r5, r2, #16
   4d338:	e042c004 	sub	ip, r2, r4
   4d33c:	e1a05825 	lsr	r5, r5, #16
   4d340:	e1ccc002 	bic	ip, ip, r2
   4d344:	e1550823 	cmp	r5, r3, lsr #16
   4d348:	1a00000e 	bne	4d388 <strcmp+0x194>
   4d34c:	e01cc384 	ands	ip, ip, r4, lsl #7
   4d350:	04913004 	ldreq	r3, [r1], #4
   4d354:	1a000004 	bne	4d36c <strcmp+0x178>
   4d358:	e0255002 	eor	r5, r5, r2
   4d35c:	e1550803 	cmp	r5, r3, lsl #16
   4d360:	1a000006 	bne	4d380 <strcmp+0x18c>
   4d364:	e4902004 	ldr	r2, [r0], #4
   4d368:	eafffff1 	b	4d334 <strcmp+0x140>
   4d36c:	e1b0c80c 	lsls	ip, ip, #16
   4d370:	1a00001b 	bne	4d3e4 <strcmp+0x1f0>
   4d374:	e1d130b0 	ldrh	r3, [r1]
   4d378:	e1a05822 	lsr	r5, r2, #16
   4d37c:	ea00001b 	b	4d3f0 <strcmp+0x1fc>
   4d380:	e1a03803 	lsl	r3, r3, #16
   4d384:	e1a05822 	lsr	r5, r2, #16
   4d388:	e1a03823 	lsr	r3, r3, #16
   4d38c:	ea000017 	b	4d3f0 <strcmp+0x1fc>
   4d390:	e20250ff 	and	r5, r2, #255	; 0xff
   4d394:	e1550c23 	cmp	r5, r3, lsr #24
   4d398:	e042c004 	sub	ip, r2, r4
   4d39c:	e1ccc002 	bic	ip, ip, r2
   4d3a0:	1a000007 	bne	4d3c4 <strcmp+0x1d0>
   4d3a4:	e01cc384 	ands	ip, ip, r4, lsl #7
   4d3a8:	04913004 	ldreq	r3, [r1], #4
   4d3ac:	1a000006 	bne	4d3cc <strcmp+0x1d8>
   4d3b0:	e0255002 	eor	r5, r5, r2
   4d3b4:	e1550403 	cmp	r5, r3, lsl #8
   4d3b8:	1a000006 	bne	4d3d8 <strcmp+0x1e4>
   4d3bc:	e4902004 	ldr	r2, [r0], #4
   4d3c0:	eafffff2 	b	4d390 <strcmp+0x19c>
   4d3c4:	e1a03c23 	lsr	r3, r3, #24
   4d3c8:	ea000008 	b	4d3f0 <strcmp+0x1fc>
   4d3cc:	e31200ff 	tst	r2, #255	; 0xff
   4d3d0:	0a000003 	beq	4d3e4 <strcmp+0x1f0>
   4d3d4:	e4913004 	ldr	r3, [r1], #4
   4d3d8:	e1a05422 	lsr	r5, r2, #8
   4d3dc:	e3c334ff 	bic	r3, r3, #-16777216	; 0xff000000
   4d3e0:	ea000002 	b	4d3f0 <strcmp+0x1fc>
   4d3e4:	e3a00000 	mov	r0, #0
   4d3e8:	e8bd0030 	pop	{r4, r5}
   4d3ec:	e12fff1e 	bx	lr
   4d3f0:	e20520ff 	and	r2, r5, #255	; 0xff
   4d3f4:	e20300ff 	and	r0, r3, #255	; 0xff
   4d3f8:	e3500001 	cmp	r0, #1
   4d3fc:	21500002 	cmpcs	r0, r2
   4d400:	01a05425 	lsreq	r5, r5, #8
   4d404:	01a03423 	lsreq	r3, r3, #8
   4d408:	0afffff8 	beq	4d3f0 <strcmp+0x1fc>
   4d40c:	e0420000 	sub	r0, r2, r0
   4d410:	e8bd0030 	pop	{r4, r5}
   4d414:	e12fff1e 	bx	lr

0004d418 <strcpy>:
   4d418:	e0202001 	eor	r2, r0, r1
   4d41c:	e1a0c000 	mov	ip, r0
   4d420:	e3120003 	tst	r2, #3
   4d424:	1a000032 	bne	4d4f4 <strcpy+0xdc>
   4d428:	e3110003 	tst	r1, #3
   4d42c:	1a000021 	bne	4d4b8 <strcpy+0xa0>
   4d430:	e52d5004 	push	{r5}		; (str r5, [sp, #-4]!)
   4d434:	e3a05001 	mov	r5, #1
   4d438:	e1855405 	orr	r5, r5, r5, lsl #8
   4d43c:	e1855805 	orr	r5, r5, r5, lsl #16
   4d440:	e52d4004 	push	{r4}		; (str r4, [sp, #-4]!)
   4d444:	e3110004 	tst	r1, #4
   4d448:	e4913004 	ldr	r3, [r1], #4
   4d44c:	0a000005 	beq	4d468 <strcpy+0x50>
   4d450:	e0432005 	sub	r2, r3, r5
   4d454:	e1d22003 	bics	r2, r2, r3
   4d458:	e1120385 	tst	r2, r5, lsl #7
   4d45c:	048c3004 	streq	r3, [ip], #4
   4d460:	04913004 	ldreq	r3, [r1], #4
   4d464:	1a00000c 	bne	4d49c <strcpy+0x84>
   4d468:	e4914004 	ldr	r4, [r1], #4
   4d46c:	e0432005 	sub	r2, r3, r5
   4d470:	e1d22003 	bics	r2, r2, r3
   4d474:	e1120385 	tst	r2, r5, lsl #7
   4d478:	e0442005 	sub	r2, r4, r5
   4d47c:	1a000006 	bne	4d49c <strcpy+0x84>
   4d480:	e48c3004 	str	r3, [ip], #4
   4d484:	e1d22004 	bics	r2, r2, r4
   4d488:	e1120385 	tst	r2, r5, lsl #7
   4d48c:	04913004 	ldreq	r3, [r1], #4
   4d490:	048c4004 	streq	r4, [ip], #4
   4d494:	0afffff3 	beq	4d468 <strcpy+0x50>
   4d498:	e1a03004 	mov	r3, r4
   4d49c:	e4cc3001 	strb	r3, [ip], #1
   4d4a0:	e31300ff 	tst	r3, #255	; 0xff
   4d4a4:	e1a03463 	ror	r3, r3, #8
   4d4a8:	1afffffb 	bne	4d49c <strcpy+0x84>
   4d4ac:	e49d4004 	pop	{r4}		; (ldr r4, [sp], #4)
   4d4b0:	e49d5004 	pop	{r5}		; (ldr r5, [sp], #4)
   4d4b4:	e12fff1e 	bx	lr
   4d4b8:	e3110001 	tst	r1, #1
   4d4bc:	0a000003 	beq	4d4d0 <strcpy+0xb8>
   4d4c0:	e4d12001 	ldrb	r2, [r1], #1
   4d4c4:	e4cc2001 	strb	r2, [ip], #1
   4d4c8:	e3520000 	cmp	r2, #0
   4d4cc:	012fff1e 	bxeq	lr
   4d4d0:	e3110002 	tst	r1, #2
   4d4d4:	0affffd5 	beq	4d430 <strcpy+0x18>
   4d4d8:	e0d120b2 	ldrh	r2, [r1], #2
   4d4dc:	e31200ff 	tst	r2, #255	; 0xff
   4d4e0:	10cc20b2 	strhne	r2, [ip], #2
   4d4e4:	05cc2000 	strbeq	r2, [ip]
   4d4e8:	13120cff 	tstne	r2, #65280	; 0xff00
   4d4ec:	1affffcf 	bne	4d430 <strcpy+0x18>
   4d4f0:	e12fff1e 	bx	lr
   4d4f4:	e4d12001 	ldrb	r2, [r1], #1
   4d4f8:	e4cc2001 	strb	r2, [ip], #1
   4d4fc:	e3520000 	cmp	r2, #0
   4d500:	1afffffb 	bne	4d4f4 <strcpy+0xdc>
   4d504:	e12fff1e 	bx	lr

0004d508 <strlcat>:
   4d508:	e3520000 	cmp	r2, #0
   4d50c:	e92d4010 	push	{r4, lr}
   4d510:	0a000023 	beq	4d5a4 <strlcat+0x9c>
   4d514:	e5d03000 	ldrb	r3, [r0]
   4d518:	e3530000 	cmp	r3, #0
   4d51c:	e1a04000 	mov	r4, r0
   4d520:	0a000026 	beq	4d5c0 <strlcat+0xb8>
   4d524:	e2803001 	add	r3, r0, #1
   4d528:	e080c002 	add	ip, r0, r2
   4d52c:	ea000003 	b	4d540 <strlcat+0x38>
   4d530:	e5d33000 	ldrb	r3, [r3]
   4d534:	e3530000 	cmp	r3, #0
   4d538:	e2803001 	add	r3, r0, #1
   4d53c:	0a000002 	beq	4d54c <strlcat+0x44>
   4d540:	e15c0003 	cmp	ip, r3
   4d544:	e1a00003 	mov	r0, r3
   4d548:	1afffff8 	bne	4d530 <strlcat+0x28>
   4d54c:	e0404004 	sub	r4, r0, r4
   4d550:	e0422004 	sub	r2, r2, r4
   4d554:	e3520000 	cmp	r2, #0
   4d558:	0a000012 	beq	4d5a8 <strlcat+0xa0>
   4d55c:	e5d13000 	ldrb	r3, [r1]
   4d560:	e3530000 	cmp	r3, #0
   4d564:	e1a0c001 	mov	ip, r1
   4d568:	0a000008 	beq	4d590 <strlcat+0x88>
   4d56c:	e3520001 	cmp	r2, #1
   4d570:	15c03000 	strbne	r3, [r0]
   4d574:	e5f13001 	ldrb	r3, [r1, #1]!
   4d578:	12422001 	subne	r2, r2, #1
   4d57c:	12800001 	addne	r0, r0, #1
   4d580:	e3530000 	cmp	r3, #0
   4d584:	1afffff8 	bne	4d56c <strlcat+0x64>
   4d588:	e041100c 	sub	r1, r1, ip
   4d58c:	e0844001 	add	r4, r4, r1
   4d590:	e3a03000 	mov	r3, #0
   4d594:	e5c03000 	strb	r3, [r0]
   4d598:	e1a00004 	mov	r0, r4
   4d59c:	e8bd4010 	pop	{r4, lr}
   4d5a0:	e12fff1e 	bx	lr
   4d5a4:	e1a04002 	mov	r4, r2
   4d5a8:	e1a00001 	mov	r0, r1
   4d5ac:	eb00001a 	bl	4d61c <strlen>
   4d5b0:	e0844000 	add	r4, r4, r0
   4d5b4:	e1a00004 	mov	r0, r4
   4d5b8:	e8bd4010 	pop	{r4, lr}
   4d5bc:	e12fff1e 	bx	lr
   4d5c0:	e1a04003 	mov	r4, r3
   4d5c4:	eaffffe4 	b	4d55c <strlcat+0x54>

0004d5c8 <strlcpy>:
   4d5c8:	e3520000 	cmp	r2, #0
   4d5cc:	e1a03001 	mov	r3, r1
   4d5d0:	0a00000a 	beq	4d600 <strlcpy+0x38>
   4d5d4:	e2522001 	subs	r2, r2, #1
   4d5d8:	0a000006 	beq	4d5f8 <strlcpy+0x30>
   4d5dc:	e4d3c001 	ldrb	ip, [r3], #1
   4d5e0:	e35c0000 	cmp	ip, #0
   4d5e4:	e4c0c001 	strb	ip, [r0], #1
   4d5e8:	1afffff9 	bne	4d5d4 <strlcpy+0xc>
   4d5ec:	e0430001 	sub	r0, r3, r1
   4d5f0:	e2400001 	sub	r0, r0, #1
   4d5f4:	e12fff1e 	bx	lr
   4d5f8:	e3a02000 	mov	r2, #0
   4d5fc:	e5c02000 	strb	r2, [r0]
   4d600:	e4d32001 	ldrb	r2, [r3], #1
   4d604:	e3520000 	cmp	r2, #0
   4d608:	0afffff7 	beq	4d5ec <strlcpy+0x24>
   4d60c:	e4d32001 	ldrb	r2, [r3], #1
   4d610:	e3520000 	cmp	r2, #0
   4d614:	1afffff9 	bne	4d600 <strlcpy+0x38>
   4d618:	eafffff3 	b	4d5ec <strlcpy+0x24>

0004d61c <strlen>:
   4d61c:	e3c01003 	bic	r1, r0, #3
   4d620:	e2100003 	ands	r0, r0, #3
   4d624:	e2600000 	rsb	r0, r0, #0
   4d628:	e4913004 	ldr	r3, [r1], #4
   4d62c:	e280c004 	add	ip, r0, #4
   4d630:	e1a0c18c 	lsl	ip, ip, #3
   4d634:	e3e02000 	mvn	r2, #0
   4d638:	11833c32 	orrne	r3, r3, r2, lsr ip
   4d63c:	e3a0c001 	mov	ip, #1
   4d640:	e18cc40c 	orr	ip, ip, ip, lsl #8
   4d644:	e18cc80c 	orr	ip, ip, ip, lsl #16
   4d648:	e043200c 	sub	r2, r3, ip
   4d64c:	e1c22003 	bic	r2, r2, r3
   4d650:	e012238c 	ands	r2, r2, ip, lsl #7
   4d654:	04913004 	ldreq	r3, [r1], #4
   4d658:	02800004 	addeq	r0, r0, #4
   4d65c:	0afffff9 	beq	4d648 <strlen+0x2c>
   4d660:	e31300ff 	tst	r3, #255	; 0xff
   4d664:	12800001 	addne	r0, r0, #1
   4d668:	13130cff 	tstne	r3, #65280	; 0xff00
   4d66c:	12800001 	addne	r0, r0, #1
   4d670:	131308ff 	tstne	r3, #16711680	; 0xff0000
   4d674:	12800001 	addne	r0, r0, #1
   4d678:	e12fff1e 	bx	lr

0004d67c <strncasecmp>:
   4d67c:	e3520000 	cmp	r2, #0
   4d680:	0a000020 	beq	4d708 <strncasecmp+0x8c>
   4d684:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   4d688:	e1a07000 	mov	r7, r0
   4d68c:	e1a06001 	mov	r6, r1
   4d690:	e0818002 	add	r8, r1, r2
   4d694:	ea000005 	b	4d6b0 <strncasecmp+0x34>
   4d698:	e0540005 	subs	r0, r4, r5
   4d69c:	1a000014 	bne	4d6f4 <strncasecmp+0x78>
   4d6a0:	e3550000 	cmp	r5, #0
   4d6a4:	0a000014 	beq	4d6fc <strncasecmp+0x80>
   4d6a8:	e1580006 	cmp	r8, r6
   4d6ac:	0a000012 	beq	4d6fc <strncasecmp+0x80>
   4d6b0:	e4d74001 	ldrb	r4, [r7], #1
   4d6b4:	eb000435 	bl	4e790 <__locale_ctype_ptr>
   4d6b8:	e0800004 	add	r0, r0, r4
   4d6bc:	e5d03001 	ldrb	r3, [r0, #1]
   4d6c0:	e2033003 	and	r3, r3, #3
   4d6c4:	e3530001 	cmp	r3, #1
   4d6c8:	02844020 	addeq	r4, r4, #32
   4d6cc:	e4d65001 	ldrb	r5, [r6], #1
   4d6d0:	eb00042e 	bl	4e790 <__locale_ctype_ptr>
   4d6d4:	e0800005 	add	r0, r0, r5
   4d6d8:	e5d03001 	ldrb	r3, [r0, #1]
   4d6dc:	e2033003 	and	r3, r3, #3
   4d6e0:	e3530001 	cmp	r3, #1
   4d6e4:	1affffeb 	bne	4d698 <strncasecmp+0x1c>
   4d6e8:	e2850020 	add	r0, r5, #32
   4d6ec:	e0540000 	subs	r0, r4, r0
   4d6f0:	0affffec 	beq	4d6a8 <strncasecmp+0x2c>
   4d6f4:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   4d6f8:	e12fff1e 	bx	lr
   4d6fc:	e3a00000 	mov	r0, #0
   4d700:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   4d704:	e12fff1e 	bx	lr
   4d708:	e3a00000 	mov	r0, #0
   4d70c:	e12fff1e 	bx	lr

0004d710 <strncmp>:
   4d710:	e3520000 	cmp	r2, #0
   4d714:	0a000036 	beq	4d7f4 <strncmp+0xe4>
   4d718:	e1803001 	orr	r3, r0, r1
   4d71c:	e2133003 	ands	r3, r3, #3
   4d720:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   4d724:	1a00001f 	bne	4d7a8 <strncmp+0x98>
   4d728:	e3520003 	cmp	r2, #3
   4d72c:	9a00001d 	bls	4d7a8 <strncmp+0x98>
   4d730:	e590c000 	ldr	ip, [r0]
   4d734:	e591e000 	ldr	lr, [r1]
   4d738:	e15c000e 	cmp	ip, lr
   4d73c:	1a000019 	bne	4d7a8 <strncmp+0x98>
   4d740:	e2522004 	subs	r2, r2, #4
   4d744:	0a000027 	beq	4d7e8 <strncmp+0xd8>
   4d748:	e59f60b8 	ldr	r6, [pc, #184]	; 4d808 <strncmp+0xf8>
   4d74c:	e59f70b8 	ldr	r7, [pc, #184]	; 4d80c <strncmp+0xfc>
   4d750:	e08ce006 	add	lr, ip, r6
   4d754:	e1cec00c 	bic	ip, lr, ip
   4d758:	e11c0007 	tst	ip, r7
   4d75c:	1a000021 	bne	4d7e8 <strncmp+0xd8>
   4d760:	e2804004 	add	r4, r0, #4
   4d764:	e281e004 	add	lr, r1, #4
   4d768:	ea00000a 	b	4d798 <strncmp+0x88>
   4d76c:	e4943004 	ldr	r3, [r4], #4
   4d770:	e59e5000 	ldr	r5, [lr]
   4d774:	e083c006 	add	ip, r3, r6
   4d778:	e1530005 	cmp	r3, r5
   4d77c:	e1ccc003 	bic	ip, ip, r3
   4d780:	e28ee004 	add	lr, lr, #4
   4d784:	1a000007 	bne	4d7a8 <strncmp+0x98>
   4d788:	e2522004 	subs	r2, r2, #4
   4d78c:	0a000015 	beq	4d7e8 <strncmp+0xd8>
   4d790:	e11c0007 	tst	ip, r7
   4d794:	1a000013 	bne	4d7e8 <strncmp+0xd8>
   4d798:	e3520003 	cmp	r2, #3
   4d79c:	e1a00004 	mov	r0, r4
   4d7a0:	e1a0100e 	mov	r1, lr
   4d7a4:	8afffff0 	bhi	4d76c <strncmp+0x5c>
   4d7a8:	e5d03000 	ldrb	r3, [r0]
   4d7ac:	e5d1c000 	ldrb	ip, [r1]
   4d7b0:	e15c0003 	cmp	ip, r3
   4d7b4:	e2422001 	sub	r2, r2, #1
   4d7b8:	1a00000f 	bne	4d7fc <strncmp+0xec>
   4d7bc:	e3520000 	cmp	r2, #0
   4d7c0:	135c0000 	cmpne	ip, #0
   4d7c4:	0a000007 	beq	4d7e8 <strncmp+0xd8>
   4d7c8:	e5f03001 	ldrb	r3, [r0, #1]!
   4d7cc:	e5f1c001 	ldrb	ip, [r1, #1]!
   4d7d0:	e153000c 	cmp	r3, ip
   4d7d4:	e2422001 	sub	r2, r2, #1
   4d7d8:	1a000007 	bne	4d7fc <strncmp+0xec>
   4d7dc:	e3520000 	cmp	r2, #0
   4d7e0:	13530000 	cmpne	r3, #0
   4d7e4:	1afffff7 	bne	4d7c8 <strncmp+0xb8>
   4d7e8:	e3a00000 	mov	r0, #0
   4d7ec:	e8bd40f0 	pop	{r4, r5, r6, r7, lr}
   4d7f0:	e12fff1e 	bx	lr
   4d7f4:	e1a00002 	mov	r0, r2
   4d7f8:	e12fff1e 	bx	lr
   4d7fc:	e043000c 	sub	r0, r3, ip
   4d800:	e8bd40f0 	pop	{r4, r5, r6, r7, lr}
   4d804:	e12fff1e 	bx	lr
   4d808:	fefefeff 	.word	0xfefefeff
   4d80c:	80808080 	.word	0x80808080

0004d810 <critical_factorization>:
   4d810:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   4d814:	e3a06001 	mov	r6, #1
   4d818:	e3a04000 	mov	r4, #0
   4d81c:	e1a0c006 	mov	ip, r6
   4d820:	e3e0e000 	mvn	lr, #0
   4d824:	e084300c 	add	r3, r4, ip
   4d828:	e1530001 	cmp	r3, r1
   4d82c:	e080500e 	add	r5, r0, lr
   4d830:	2a00000a 	bcs	4d860 <critical_factorization+0x50>
   4d834:	e7d5500c 	ldrb	r5, [r5, ip]
   4d838:	e7d07003 	ldrb	r7, [r0, r3]
   4d83c:	e1570005 	cmp	r7, r5
   4d840:	2a000021 	bcs	4d8cc <critical_factorization+0xbc>
   4d844:	e1a04003 	mov	r4, r3
   4d848:	e3a0c001 	mov	ip, #1
   4d84c:	e043600e 	sub	r6, r3, lr
   4d850:	e084300c 	add	r3, r4, ip
   4d854:	e1530001 	cmp	r3, r1
   4d858:	e080500e 	add	r5, r0, lr
   4d85c:	3afffff4 	bcc	4d834 <critical_factorization+0x24>
   4d860:	e3a08001 	mov	r8, #1
   4d864:	e3a04000 	mov	r4, #0
   4d868:	e1a0c008 	mov	ip, r8
   4d86c:	e3e05000 	mvn	r5, #0
   4d870:	e5826000 	str	r6, [r2]
   4d874:	e084300c 	add	r3, r4, ip
   4d878:	e1530001 	cmp	r3, r1
   4d87c:	e0806005 	add	r6, r0, r5
   4d880:	2a00000a 	bcs	4d8b0 <critical_factorization+0xa0>
   4d884:	e7d6600c 	ldrb	r6, [r6, ip]
   4d888:	e7d07003 	ldrb	r7, [r0, r3]
   4d88c:	e1570006 	cmp	r7, r6
   4d890:	9a000013 	bls	4d8e4 <critical_factorization+0xd4>
   4d894:	e1a04003 	mov	r4, r3
   4d898:	e3a0c001 	mov	ip, #1
   4d89c:	e0438005 	sub	r8, r3, r5
   4d8a0:	e084300c 	add	r3, r4, ip
   4d8a4:	e1530001 	cmp	r3, r1
   4d8a8:	e0806005 	add	r6, r0, r5
   4d8ac:	3afffff4 	bcc	4d884 <critical_factorization+0x74>
   4d8b0:	e28e0001 	add	r0, lr, #1
   4d8b4:	e2855001 	add	r5, r5, #1
   4d8b8:	e1550000 	cmp	r5, r0
   4d8bc:	21a00005 	movcs	r0, r5
   4d8c0:	25828000 	strcs	r8, [r2]
   4d8c4:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   4d8c8:	e12fff1e 	bx	lr
   4d8cc:	0a00000a 	beq	4d8fc <critical_factorization+0xec>
   4d8d0:	e3a06001 	mov	r6, #1
   4d8d4:	e1a0e004 	mov	lr, r4
   4d8d8:	e1a0c006 	mov	ip, r6
   4d8dc:	e0844006 	add	r4, r4, r6
   4d8e0:	eaffffcf 	b	4d824 <critical_factorization+0x14>
   4d8e4:	0a000009 	beq	4d910 <critical_factorization+0x100>
   4d8e8:	e3a08001 	mov	r8, #1
   4d8ec:	e1a05004 	mov	r5, r4
   4d8f0:	e1a0c008 	mov	ip, r8
   4d8f4:	e0844008 	add	r4, r4, r8
   4d8f8:	eaffffdd 	b	4d874 <critical_factorization+0x64>
   4d8fc:	e15c0006 	cmp	ip, r6
   4d900:	128cc001 	addne	ip, ip, #1
   4d904:	01a04003 	moveq	r4, r3
   4d908:	03a0c001 	moveq	ip, #1
   4d90c:	eaffffc4 	b	4d824 <critical_factorization+0x14>
   4d910:	e15c0008 	cmp	ip, r8
   4d914:	128cc001 	addne	ip, ip, #1
   4d918:	01a04003 	moveq	r4, r3
   4d91c:	03a0c001 	moveq	ip, #1
   4d920:	eaffffd3 	b	4d874 <critical_factorization+0x64>

0004d924 <two_way_long_needle>:
   4d924:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   4d928:	e24dde41 	sub	sp, sp, #1040	; 0x410
   4d92c:	e24dd00c 	sub	sp, sp, #12
   4d930:	e1a09002 	mov	r9, r2
   4d934:	e1a05000 	mov	r5, r0
   4d938:	e1a0b001 	mov	fp, r1
   4d93c:	e1a00002 	mov	r0, r2
   4d940:	e1a01003 	mov	r1, r3
   4d944:	e28d2014 	add	r2, sp, #20
   4d948:	e1a04003 	mov	r4, r3
   4d94c:	ebffffaf 	bl	4d810 <critical_factorization>
   4d950:	e1a06000 	mov	r6, r0
   4d954:	e28d2e41 	add	r2, sp, #1040	; 0x410
   4d958:	e28d3014 	add	r3, sp, #20
   4d95c:	e2822004 	add	r2, r2, #4
   4d960:	e5a34004 	str	r4, [r3, #4]!
   4d964:	e1530002 	cmp	r3, r2
   4d968:	1afffffc 	bne	4d960 <two_way_long_needle+0x3c>
   4d96c:	e59d3014 	ldr	r3, [sp, #20]
   4d970:	e3540000 	cmp	r4, #0
   4d974:	e0891003 	add	r1, r9, r3
   4d978:	0a0000bc 	beq	4dc70 <two_way_long_needle+0x34c>
   4d97c:	e244a001 	sub	sl, r4, #1
   4d980:	e1a0300a 	mov	r3, sl
   4d984:	e2490001 	sub	r0, r9, #1
   4d988:	e5f02001 	ldrb	r2, [r0, #1]!
   4d98c:	e28dce41 	add	ip, sp, #1040	; 0x410
   4d990:	e28cc008 	add	ip, ip, #8
   4d994:	e08c2102 	add	r2, ip, r2, lsl #2
   4d998:	e5023400 	str	r3, [r2, #-1024]	; 0xfffffc00
   4d99c:	e2533001 	subs	r3, r3, #1
   4d9a0:	2afffff8 	bcs	4d988 <two_way_long_needle+0x64>
   4d9a4:	e1a02006 	mov	r2, r6
   4d9a8:	e1a00009 	mov	r0, r9
   4d9ac:	ebfffcac 	bl	4cc64 <memcmp>
   4d9b0:	e3500000 	cmp	r0, #0
   4d9b4:	1a000057 	bne	4db18 <two_way_long_needle+0x1f4>
   4d9b8:	e1a02000 	mov	r2, r0
   4d9bc:	e2463001 	sub	r3, r6, #1
   4d9c0:	e58d3008 	str	r3, [sp, #8]
   4d9c4:	e0893003 	add	r3, r9, r3
   4d9c8:	e1a08000 	mov	r8, r0
   4d9cc:	e58d9004 	str	r9, [sp, #4]
   4d9d0:	e58d300c 	str	r3, [sp, #12]
   4d9d4:	e1a0000b 	mov	r0, fp
   4d9d8:	e1a09002 	mov	r9, r2
   4d9dc:	ea000007 	b	4da00 <two_way_long_needle+0xdc>
   4d9e0:	e3590000 	cmp	r9, #0
   4d9e4:	0a000002 	beq	4d9f4 <two_way_long_needle+0xd0>
   4d9e8:	e59d2014 	ldr	r2, [sp, #20]
   4d9ec:	e1520003 	cmp	r2, r3
   4d9f0:	80443002 	subhi	r3, r4, r2
   4d9f4:	e3a09000 	mov	r9, #0
   4d9f8:	e0888003 	add	r8, r8, r3
   4d9fc:	e1a00007 	mov	r0, r7
   4da00:	e0887004 	add	r7, r8, r4
   4da04:	e0472000 	sub	r2, r7, r0
   4da08:	e3a01000 	mov	r1, #0
   4da0c:	e0850000 	add	r0, r5, r0
   4da10:	eb00038c 	bl	4e848 <memchr>
   4da14:	e2973000 	adds	r3, r7, #0
   4da18:	13a03001 	movne	r3, #1
   4da1c:	e3500000 	cmp	r0, #0
   4da20:	01a00003 	moveq	r0, r3
   4da24:	13a00000 	movne	r0, #0
   4da28:	e3500000 	cmp	r0, #0
   4da2c:	0a000087 	beq	4dc50 <two_way_long_needle+0x32c>
   4da30:	e0853007 	add	r3, r5, r7
   4da34:	e5533001 	ldrb	r3, [r3, #-1]
   4da38:	e28d2e41 	add	r2, sp, #1040	; 0x410
   4da3c:	e2822008 	add	r2, r2, #8
   4da40:	e0823103 	add	r3, r2, r3, lsl #2
   4da44:	e5133400 	ldr	r3, [r3, #-1024]	; 0xfffffc00
   4da48:	e3530000 	cmp	r3, #0
   4da4c:	1affffe3 	bne	4d9e0 <two_way_long_needle+0xbc>
   4da50:	e1590006 	cmp	r9, r6
   4da54:	21a03009 	movcs	r3, r9
   4da58:	31a03006 	movcc	r3, r6
   4da5c:	e153000a 	cmp	r3, sl
   4da60:	2a00000f 	bcs	4daa4 <two_way_long_needle+0x180>
   4da64:	e59dc004 	ldr	ip, [sp, #4]
   4da68:	e0882003 	add	r2, r8, r3
   4da6c:	e7d51002 	ldrb	r1, [r5, r2]
   4da70:	e7dc0003 	ldrb	r0, [ip, r3]
   4da74:	e1500001 	cmp	r0, r1
   4da78:	e0852002 	add	r2, r5, r2
   4da7c:	e08c1003 	add	r1, ip, r3
   4da80:	0a000004 	beq	4da98 <two_way_long_needle+0x174>
   4da84:	ea000076 	b	4dc64 <two_way_long_needle+0x340>
   4da88:	e5f1c001 	ldrb	ip, [r1, #1]!
   4da8c:	e5f20001 	ldrb	r0, [r2, #1]!
   4da90:	e15c0000 	cmp	ip, r0
   4da94:	1a000072 	bne	4dc64 <two_way_long_needle+0x340>
   4da98:	e2833001 	add	r3, r3, #1
   4da9c:	e153000a 	cmp	r3, sl
   4daa0:	1afffff8 	bne	4da88 <two_way_long_needle+0x164>
   4daa4:	e59d3008 	ldr	r3, [sp, #8]
   4daa8:	e1590006 	cmp	r9, r6
   4daac:	e1a01003 	mov	r1, r3
   4dab0:	2a000079 	bcs	4dc9c <two_way_long_needle+0x378>
   4dab4:	e59dc00c 	ldr	ip, [sp, #12]
   4dab8:	e0883003 	add	r3, r8, r3
   4dabc:	e5dc2000 	ldrb	r2, [ip]
   4dac0:	e7d50003 	ldrb	r0, [r5, r3]
   4dac4:	e1500002 	cmp	r0, r2
   4dac8:	e0852003 	add	r2, r5, r3
   4dacc:	1a000072 	bne	4dc9c <two_way_long_needle+0x378>
   4dad0:	e1a0000c 	mov	r0, ip
   4dad4:	e249b001 	sub	fp, r9, #1
   4dad8:	ea000004 	b	4daf0 <two_way_long_needle+0x1cc>
   4dadc:	e570e001 	ldrb	lr, [r0, #-1]!
   4dae0:	e572c001 	ldrb	ip, [r2, #-1]!
   4dae4:	e15e000c 	cmp	lr, ip
   4dae8:	1a000003 	bne	4dafc <two_way_long_needle+0x1d8>
   4daec:	e1a01003 	mov	r1, r3
   4daf0:	e2413001 	sub	r3, r1, #1
   4daf4:	e15b0003 	cmp	fp, r3
   4daf8:	1afffff7 	bne	4dadc <two_way_long_needle+0x1b8>
   4dafc:	e2899001 	add	r9, r9, #1
   4db00:	e1590001 	cmp	r9, r1
   4db04:	8a000066 	bhi	4dca4 <two_way_long_needle+0x380>
   4db08:	e59d9014 	ldr	r9, [sp, #20]
   4db0c:	e0888009 	add	r8, r8, r9
   4db10:	e0449009 	sub	r9, r4, r9
   4db14:	eaffffb8 	b	4d9fc <two_way_long_needle+0xd8>
   4db18:	e0443006 	sub	r3, r4, r6
   4db1c:	e1530006 	cmp	r3, r6
   4db20:	31a03006 	movcc	r3, r6
   4db24:	e2468001 	sub	r8, r6, #1
   4db28:	e2833001 	add	r3, r3, #1
   4db2c:	e58d3014 	str	r3, [sp, #20]
   4db30:	e0893008 	add	r3, r9, r8
   4db34:	e1a0000b 	mov	r0, fp
   4db38:	e3a0a000 	mov	sl, #0
   4db3c:	e1a0b006 	mov	fp, r6
   4db40:	e1a06003 	mov	r6, r3
   4db44:	e08a7004 	add	r7, sl, r4
   4db48:	e0472000 	sub	r2, r7, r0
   4db4c:	e3a01000 	mov	r1, #0
   4db50:	e0850000 	add	r0, r5, r0
   4db54:	eb00033b 	bl	4e848 <memchr>
   4db58:	e2700001 	rsbs	r0, r0, #1
   4db5c:	33a00000 	movcc	r0, #0
   4db60:	e3570000 	cmp	r7, #0
   4db64:	03a00000 	moveq	r0, #0
   4db68:	e3500000 	cmp	r0, #0
   4db6c:	0a000037 	beq	4dc50 <two_way_long_needle+0x32c>
   4db70:	e0853007 	add	r3, r5, r7
   4db74:	e5533001 	ldrb	r3, [r3, #-1]
   4db78:	e28d2e41 	add	r2, sp, #1040	; 0x410
   4db7c:	e2822008 	add	r2, r2, #8
   4db80:	e0823103 	add	r3, r2, r3, lsl #2
   4db84:	e5133400 	ldr	r3, [r3, #-1024]	; 0xfffffc00
   4db88:	e3530000 	cmp	r3, #0
   4db8c:	1a000028 	bne	4dc34 <two_way_long_needle+0x310>
   4db90:	e2440001 	sub	r0, r4, #1
   4db94:	e15b0000 	cmp	fp, r0
   4db98:	2a00000f 	bcs	4dbdc <two_way_long_needle+0x2b8>
   4db9c:	e08a200b 	add	r2, sl, fp
   4dba0:	e7d53002 	ldrb	r3, [r5, r2]
   4dba4:	e7d9100b 	ldrb	r1, [r9, fp]
   4dba8:	e1510003 	cmp	r1, r3
   4dbac:	e0852002 	add	r2, r5, r2
   4dbb0:	e089100b 	add	r1, r9, fp
   4dbb4:	e1a0300b 	mov	r3, fp
   4dbb8:	0a000004 	beq	4dbd0 <two_way_long_needle+0x2ac>
   4dbbc:	ea00001f 	b	4dc40 <two_way_long_needle+0x31c>
   4dbc0:	e5f1e001 	ldrb	lr, [r1, #1]!
   4dbc4:	e5f2c001 	ldrb	ip, [r2, #1]!
   4dbc8:	e15e000c 	cmp	lr, ip
   4dbcc:	1a00001b 	bne	4dc40 <two_way_long_needle+0x31c>
   4dbd0:	e2833001 	add	r3, r3, #1
   4dbd4:	e1530000 	cmp	r3, r0
   4dbd8:	3afffff8 	bcc	4dbc0 <two_way_long_needle+0x29c>
   4dbdc:	e3780001 	cmn	r8, #1
   4dbe0:	0a00000d 	beq	4dc1c <two_way_long_needle+0x2f8>
   4dbe4:	e08a3008 	add	r3, sl, r8
   4dbe8:	e7d52003 	ldrb	r2, [r5, r3]
   4dbec:	e5d61000 	ldrb	r1, [r6]
   4dbf0:	e1510002 	cmp	r1, r2
   4dbf4:	e0852003 	add	r2, r5, r3
   4dbf8:	1a00000c 	bne	4dc30 <two_way_long_needle+0x30c>
   4dbfc:	e1a03006 	mov	r3, r6
   4dc00:	ea000003 	b	4dc14 <two_way_long_needle+0x2f0>
   4dc04:	e5730001 	ldrb	r0, [r3, #-1]!
   4dc08:	e5721001 	ldrb	r1, [r2, #-1]!
   4dc0c:	e1500001 	cmp	r0, r1
   4dc10:	1a000006 	bne	4dc30 <two_way_long_needle+0x30c>
   4dc14:	e1590003 	cmp	r9, r3
   4dc18:	1afffff9 	bne	4dc04 <two_way_long_needle+0x2e0>
   4dc1c:	e085000a 	add	r0, r5, sl
   4dc20:	e28dde41 	add	sp, sp, #1040	; 0x410
   4dc24:	e28dd00c 	add	sp, sp, #12
   4dc28:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   4dc2c:	e12fff1e 	bx	lr
   4dc30:	e59d3014 	ldr	r3, [sp, #20]
   4dc34:	e08aa003 	add	sl, sl, r3
   4dc38:	e1a00007 	mov	r0, r7
   4dc3c:	eaffffc0 	b	4db44 <two_way_long_needle+0x220>
   4dc40:	e26b2001 	rsb	r2, fp, #1
   4dc44:	e082a00a 	add	sl, r2, sl
   4dc48:	e08aa003 	add	sl, sl, r3
   4dc4c:	eafffff9 	b	4dc38 <two_way_long_needle+0x314>
   4dc50:	e3a00000 	mov	r0, #0
   4dc54:	e28dde41 	add	sp, sp, #1040	; 0x410
   4dc58:	e28dd00c 	add	sp, sp, #12
   4dc5c:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   4dc60:	e12fff1e 	bx	lr
   4dc64:	e2662001 	rsb	r2, r6, #1
   4dc68:	e0828008 	add	r8, r2, r8
   4dc6c:	eaffff60 	b	4d9f4 <two_way_long_needle+0xd0>
   4dc70:	e1a02006 	mov	r2, r6
   4dc74:	e1a00009 	mov	r0, r9
   4dc78:	ebfffbf9 	bl	4cc64 <memcmp>
   4dc7c:	e3500000 	cmp	r0, #0
   4dc80:	1affffa4 	bne	4db18 <two_way_long_needle+0x1f4>
   4dc84:	e085000b 	add	r0, r5, fp
   4dc88:	e26b2000 	rsb	r2, fp, #0
   4dc8c:	e1a01004 	mov	r1, r4
   4dc90:	eb0002ec 	bl	4e848 <memchr>
   4dc94:	e1a00004 	mov	r0, r4
   4dc98:	eaffffed 	b	4dc54 <two_way_long_needle+0x330>
   4dc9c:	e1a01006 	mov	r1, r6
   4dca0:	eaffff95 	b	4dafc <two_way_long_needle+0x1d8>
   4dca4:	e0850008 	add	r0, r5, r8
   4dca8:	eaffffe9 	b	4dc54 <two_way_long_needle+0x330>

0004dcac <strstr>:
   4dcac:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   4dcb0:	e5d02000 	ldrb	r2, [r0]
   4dcb4:	e3520000 	cmp	r2, #0
   4dcb8:	e1a06001 	mov	r6, r1
   4dcbc:	e24dd014 	sub	sp, sp, #20
   4dcc0:	e1a05000 	mov	r5, r0
   4dcc4:	e5d11000 	ldrb	r1, [r1]
   4dcc8:	0a000082 	beq	4ded8 <strstr+0x22c>
   4dccc:	e3510000 	cmp	r1, #0
   4dcd0:	0a000013 	beq	4dd24 <strstr+0x78>
   4dcd4:	e1a0e000 	mov	lr, r0
   4dcd8:	e2864001 	add	r4, r6, #1
   4dcdc:	e1a00001 	mov	r0, r1
   4dce0:	e3a0c001 	mov	ip, #1
   4dce4:	ea000002 	b	4dcf4 <strstr+0x48>
   4dce8:	e3500000 	cmp	r0, #0
   4dcec:	0a00000a 	beq	4dd1c <strstr+0x70>
   4dcf0:	e1a04003 	mov	r4, r3
   4dcf4:	e1a03004 	mov	r3, r4
   4dcf8:	e1500002 	cmp	r0, r2
   4dcfc:	13a0c000 	movne	ip, #0
   4dd00:	020cc001 	andeq	ip, ip, #1
   4dd04:	e5fe2001 	ldrb	r2, [lr, #1]!
   4dd08:	e3520000 	cmp	r2, #0
   4dd0c:	e4d30001 	ldrb	r0, [r3], #1
   4dd10:	1afffff4 	bne	4dce8 <strstr+0x3c>
   4dd14:	e3500000 	cmp	r0, #0
   4dd18:	1a000019 	bne	4dd84 <strstr+0xd8>
   4dd1c:	e35c0000 	cmp	ip, #0
   4dd20:	0a000003 	beq	4dd34 <strstr+0x88>
   4dd24:	e1a00005 	mov	r0, r5
   4dd28:	e28dd014 	add	sp, sp, #20
   4dd2c:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   4dd30:	e12fff1e 	bx	lr
   4dd34:	e2850001 	add	r0, r5, #1
   4dd38:	ebfffccc 	bl	4d070 <strchr>
   4dd3c:	e0444006 	sub	r4, r4, r6
   4dd40:	e3540001 	cmp	r4, #1
   4dd44:	13500000 	cmpne	r0, #0
   4dd48:	e1a07000 	mov	r7, r0
   4dd4c:	01a05000 	moveq	r5, r0
   4dd50:	0afffff3 	beq	4dd24 <strstr+0x78>
   4dd54:	e0855004 	add	r5, r5, r4
   4dd58:	e1550000 	cmp	r5, r0
   4dd5c:	20459000 	subcs	r9, r5, r0
   4dd60:	33a09001 	movcc	r9, #1
   4dd64:	e354001f 	cmp	r4, #31
   4dd68:	9a00000a 	bls	4dd98 <strstr+0xec>
   4dd6c:	e1a03004 	mov	r3, r4
   4dd70:	e1a02006 	mov	r2, r6
   4dd74:	e1a01009 	mov	r1, r9
   4dd78:	ebfffee9 	bl	4d924 <two_way_long_needle>
   4dd7c:	e1a05000 	mov	r5, r0
   4dd80:	eaffffe7 	b	4dd24 <strstr+0x78>
   4dd84:	e3a05000 	mov	r5, #0
   4dd88:	e1a00005 	mov	r0, r5
   4dd8c:	e28dd014 	add	sp, sp, #20
   4dd90:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   4dd94:	e12fff1e 	bx	lr
   4dd98:	e28d200c 	add	r2, sp, #12
   4dd9c:	e1a01004 	mov	r1, r4
   4dda0:	e1a00006 	mov	r0, r6
   4dda4:	ebfffe99 	bl	4d810 <critical_factorization>
   4dda8:	e59d100c 	ldr	r1, [sp, #12]
   4ddac:	e1a02000 	mov	r2, r0
   4ddb0:	e1a08000 	mov	r8, r0
   4ddb4:	e0861001 	add	r1, r6, r1
   4ddb8:	e1a00006 	mov	r0, r6
   4ddbc:	ebfffba8 	bl	4cc64 <memcmp>
   4ddc0:	e250a000 	subs	sl, r0, #0
   4ddc4:	1a000046 	bne	4dee4 <strstr+0x238>
   4ddc8:	e1a0500a 	mov	r5, sl
   4ddcc:	e1a00009 	mov	r0, r9
   4ddd0:	e2483001 	sub	r3, r8, #1
   4ddd4:	e58d3000 	str	r3, [sp]
   4ddd8:	e0863003 	add	r3, r6, r3
   4dddc:	e58d3004 	str	r3, [sp, #4]
   4dde0:	e084b005 	add	fp, r4, r5
   4dde4:	e04b2000 	sub	r2, fp, r0
   4dde8:	e3a01000 	mov	r1, #0
   4ddec:	e0870000 	add	r0, r7, r0
   4ddf0:	eb000294 	bl	4e848 <memchr>
   4ddf4:	e29b3000 	adds	r3, fp, #0
   4ddf8:	13a03001 	movne	r3, #1
   4ddfc:	e3500000 	cmp	r0, #0
   4de00:	01a00003 	moveq	r0, r3
   4de04:	13a00000 	movne	r0, #0
   4de08:	e3500000 	cmp	r0, #0
   4de0c:	0affffdc 	beq	4dd84 <strstr+0xd8>
   4de10:	e158000a 	cmp	r8, sl
   4de14:	21a03008 	movcs	r3, r8
   4de18:	31a0300a 	movcc	r3, sl
   4de1c:	e1540003 	cmp	r4, r3
   4de20:	9a00000e 	bls	4de60 <strstr+0x1b4>
   4de24:	e0832005 	add	r2, r3, r5
   4de28:	e7d70002 	ldrb	r0, [r7, r2]
   4de2c:	e7d61003 	ldrb	r1, [r6, r3]
   4de30:	e1500001 	cmp	r0, r1
   4de34:	e0872002 	add	r2, r7, r2
   4de38:	e0861003 	add	r1, r6, r3
   4de3c:	0a000004 	beq	4de54 <strstr+0x1a8>
   4de40:	ea000060 	b	4dfc8 <strstr+0x31c>
   4de44:	e5f1c001 	ldrb	ip, [r1, #1]!
   4de48:	e5f20001 	ldrb	r0, [r2, #1]!
   4de4c:	e15c0000 	cmp	ip, r0
   4de50:	1a00005c 	bne	4dfc8 <strstr+0x31c>
   4de54:	e2833001 	add	r3, r3, #1
   4de58:	e1540003 	cmp	r4, r3
   4de5c:	1afffff8 	bne	4de44 <strstr+0x198>
   4de60:	e59d3000 	ldr	r3, [sp]
   4de64:	e158000a 	cmp	r8, sl
   4de68:	e1a01003 	mov	r1, r3
   4de6c:	9a000062 	bls	4dffc <strstr+0x350>
   4de70:	e59dc004 	ldr	ip, [sp, #4]
   4de74:	e0853003 	add	r3, r5, r3
   4de78:	e7d72003 	ldrb	r2, [r7, r3]
   4de7c:	e5dc0000 	ldrb	r0, [ip]
   4de80:	e1500002 	cmp	r0, r2
   4de84:	e0872003 	add	r2, r7, r3
   4de88:	1a00005b 	bne	4dffc <strstr+0x350>
   4de8c:	e1a0000c 	mov	r0, ip
   4de90:	e24a9001 	sub	r9, sl, #1
   4de94:	ea000004 	b	4deac <strstr+0x200>
   4de98:	e570e001 	ldrb	lr, [r0, #-1]!
   4de9c:	e572c001 	ldrb	ip, [r2, #-1]!
   4dea0:	e15e000c 	cmp	lr, ip
   4dea4:	1a000003 	bne	4deb8 <strstr+0x20c>
   4dea8:	e1a01003 	mov	r1, r3
   4deac:	e2413001 	sub	r3, r1, #1
   4deb0:	e1530009 	cmp	r3, r9
   4deb4:	1afffff7 	bne	4de98 <strstr+0x1ec>
   4deb8:	e28aa001 	add	sl, sl, #1
   4debc:	e15a0001 	cmp	sl, r1
   4dec0:	8a00003e 	bhi	4dfc0 <strstr+0x314>
   4dec4:	e59da00c 	ldr	sl, [sp, #12]
   4dec8:	e085500a 	add	r5, r5, sl
   4decc:	e044a00a 	sub	sl, r4, sl
   4ded0:	e1a0000b 	mov	r0, fp
   4ded4:	eaffffc1 	b	4dde0 <strstr+0x134>
   4ded8:	e3510000 	cmp	r1, #0
   4dedc:	13a05000 	movne	r5, #0
   4dee0:	eaffff8f 	b	4dd24 <strstr+0x78>
   4dee4:	e0443008 	sub	r3, r4, r8
   4dee8:	e1530008 	cmp	r3, r8
   4deec:	31a03008 	movcc	r3, r8
   4def0:	e248a001 	sub	sl, r8, #1
   4def4:	e2833001 	add	r3, r3, #1
   4def8:	e58d300c 	str	r3, [sp, #12]
   4defc:	e086300a 	add	r3, r6, sl
   4df00:	e1a00009 	mov	r0, r9
   4df04:	e3a05000 	mov	r5, #0
   4df08:	e1a09003 	mov	r9, r3
   4df0c:	e084b005 	add	fp, r4, r5
   4df10:	e04b2000 	sub	r2, fp, r0
   4df14:	e3a01000 	mov	r1, #0
   4df18:	e0870000 	add	r0, r7, r0
   4df1c:	eb000249 	bl	4e848 <memchr>
   4df20:	e2700001 	rsbs	r0, r0, #1
   4df24:	33a00000 	movcc	r0, #0
   4df28:	e35b0000 	cmp	fp, #0
   4df2c:	03a00000 	moveq	r0, #0
   4df30:	e3500000 	cmp	r0, #0
   4df34:	0affff92 	beq	4dd84 <strstr+0xd8>
   4df38:	e1540008 	cmp	r4, r8
   4df3c:	9a00000f 	bls	4df80 <strstr+0x2d4>
   4df40:	e0882005 	add	r2, r8, r5
   4df44:	e7d73002 	ldrb	r3, [r7, r2]
   4df48:	e7d61008 	ldrb	r1, [r6, r8]
   4df4c:	e1510003 	cmp	r1, r3
   4df50:	e0872002 	add	r2, r7, r2
   4df54:	e0861008 	add	r1, r6, r8
   4df58:	e1a03008 	mov	r3, r8
   4df5c:	0a000004 	beq	4df74 <strstr+0x2c8>
   4df60:	ea00001d 	b	4dfdc <strstr+0x330>
   4df64:	e5f1c001 	ldrb	ip, [r1, #1]!
   4df68:	e5f20001 	ldrb	r0, [r2, #1]!
   4df6c:	e15c0000 	cmp	ip, r0
   4df70:	1a000019 	bne	4dfdc <strstr+0x330>
   4df74:	e2833001 	add	r3, r3, #1
   4df78:	e1540003 	cmp	r4, r3
   4df7c:	1afffff8 	bne	4df64 <strstr+0x2b8>
   4df80:	e37a0001 	cmn	sl, #1
   4df84:	0a00000d 	beq	4dfc0 <strstr+0x314>
   4df88:	e085300a 	add	r3, r5, sl
   4df8c:	e5d92000 	ldrb	r2, [r9]
   4df90:	e7d71003 	ldrb	r1, [r7, r3]
   4df94:	e1510002 	cmp	r1, r2
   4df98:	e0872003 	add	r2, r7, r3
   4df9c:	1a000013 	bne	4dff0 <strstr+0x344>
   4dfa0:	e1a03009 	mov	r3, r9
   4dfa4:	ea000003 	b	4dfb8 <strstr+0x30c>
   4dfa8:	e5730001 	ldrb	r0, [r3, #-1]!
   4dfac:	e5721001 	ldrb	r1, [r2, #-1]!
   4dfb0:	e1500001 	cmp	r0, r1
   4dfb4:	1a00000d 	bne	4dff0 <strstr+0x344>
   4dfb8:	e1530006 	cmp	r3, r6
   4dfbc:	1afffff9 	bne	4dfa8 <strstr+0x2fc>
   4dfc0:	e0875005 	add	r5, r7, r5
   4dfc4:	eaffff56 	b	4dd24 <strstr+0x78>
   4dfc8:	e2682001 	rsb	r2, r8, #1
   4dfcc:	e0825005 	add	r5, r2, r5
   4dfd0:	e0835005 	add	r5, r3, r5
   4dfd4:	e3a0a000 	mov	sl, #0
   4dfd8:	eaffffbc 	b	4ded0 <strstr+0x224>
   4dfdc:	e2682001 	rsb	r2, r8, #1
   4dfe0:	e0825005 	add	r5, r2, r5
   4dfe4:	e0835005 	add	r5, r3, r5
   4dfe8:	e1a0000b 	mov	r0, fp
   4dfec:	eaffffc6 	b	4df0c <strstr+0x260>
   4dff0:	e59d300c 	ldr	r3, [sp, #12]
   4dff4:	e0855003 	add	r5, r5, r3
   4dff8:	eafffffa 	b	4dfe8 <strstr+0x33c>
   4dffc:	e1a01008 	mov	r1, r8
   4e000:	eaffffac 	b	4deb8 <strstr+0x20c>

0004e004 <strtok>:
   4e004:	e92d4010 	push	{r4, lr}
   4e008:	e59f3014 	ldr	r3, [pc, #20]	; 4e024 <strtok+0x20>
   4e00c:	e5932000 	ldr	r2, [r3]
   4e010:	e3a03001 	mov	r3, #1
   4e014:	e282205c 	add	r2, r2, #92	; 0x5c
   4e018:	eb000002 	bl	4e028 <__strtok_r>
   4e01c:	e8bd4010 	pop	{r4, lr}
   4e020:	e12fff1e 	bx	lr
   4e024:	0006f564 	.word	0x0006f564

0004e028 <__strtok_r>:
   4e028:	e92d4070 	push	{r4, r5, r6, lr}
   4e02c:	e2506000 	subs	r6, r0, #0
   4e030:	0a000023 	beq	4e0c4 <__strtok_r+0x9c>
   4e034:	e1a05006 	mov	r5, r6
   4e038:	e1a0e001 	mov	lr, r1
   4e03c:	e4d54001 	ldrb	r4, [r5], #1
   4e040:	ea000001 	b	4e04c <__strtok_r+0x24>
   4e044:	e154000c 	cmp	r4, ip
   4e048:	0a000017 	beq	4e0ac <__strtok_r+0x84>
   4e04c:	e4dec001 	ldrb	ip, [lr], #1
   4e050:	e35c0000 	cmp	ip, #0
   4e054:	1afffffa 	bne	4e044 <__strtok_r+0x1c>
   4e058:	e3540000 	cmp	r4, #0
   4e05c:	05824000 	streq	r4, [r2]
   4e060:	01a00004 	moveq	r0, r4
   4e064:	0a00000e 	beq	4e0a4 <__strtok_r+0x7c>
   4e068:	e1a04005 	mov	r4, r5
   4e06c:	e1a0c001 	mov	ip, r1
   4e070:	e4d4e001 	ldrb	lr, [r4], #1
   4e074:	ea000001 	b	4e080 <__strtok_r+0x58>
   4e078:	e3530000 	cmp	r3, #0
   4e07c:	0a00000e 	beq	4e0bc <__strtok_r+0x94>
   4e080:	e4dc3001 	ldrb	r3, [ip], #1
   4e084:	e15e0003 	cmp	lr, r3
   4e088:	1afffffa 	bne	4e078 <__strtok_r+0x50>
   4e08c:	e35e0000 	cmp	lr, #0
   4e090:	13a03000 	movne	r3, #0
   4e094:	01a0400e 	moveq	r4, lr
   4e098:	e1a00006 	mov	r0, r6
   4e09c:	15c53000 	strbne	r3, [r5]
   4e0a0:	e5824000 	str	r4, [r2]
   4e0a4:	e8bd4070 	pop	{r4, r5, r6, lr}
   4e0a8:	e12fff1e 	bx	lr
   4e0ac:	e3530000 	cmp	r3, #0
   4e0b0:	0a000008 	beq	4e0d8 <__strtok_r+0xb0>
   4e0b4:	e1a06005 	mov	r6, r5
   4e0b8:	eaffffdd 	b	4e034 <__strtok_r+0xc>
   4e0bc:	e1a05004 	mov	r5, r4
   4e0c0:	eaffffe8 	b	4e068 <__strtok_r+0x40>
   4e0c4:	e5926000 	ldr	r6, [r2]
   4e0c8:	e3560000 	cmp	r6, #0
   4e0cc:	1affffd8 	bne	4e034 <__strtok_r+0xc>
   4e0d0:	e1a00006 	mov	r0, r6
   4e0d4:	eafffff2 	b	4e0a4 <__strtok_r+0x7c>
   4e0d8:	e5825000 	str	r5, [r2]
   4e0dc:	e1a00006 	mov	r0, r6
   4e0e0:	e5c63000 	strb	r3, [r6]
   4e0e4:	eaffffee 	b	4e0a4 <__strtok_r+0x7c>

0004e0e8 <strtok_r>:
   4e0e8:	e3a03001 	mov	r3, #1
   4e0ec:	eaffffcd 	b	4e028 <__strtok_r>

0004e0f0 <_strtol_l.isra.0>:
   4e0f0:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   4e0f4:	e24dd00c 	sub	sp, sp, #12
   4e0f8:	e1a07001 	mov	r7, r1
   4e0fc:	e58d0004 	str	r0, [sp, #4]
   4e100:	e1a08002 	mov	r8, r2
   4e104:	e1a06003 	mov	r6, r3
   4e108:	e1a0b001 	mov	fp, r1
   4e10c:	ea000000 	b	4e114 <_strtol_l.isra.0+0x24>
   4e110:	e1a0b005 	mov	fp, r5
   4e114:	e1a0500b 	mov	r5, fp
   4e118:	e59d0030 	ldr	r0, [sp, #48]	; 0x30
   4e11c:	e4d54001 	ldrb	r4, [r5], #1
   4e120:	eb000198 	bl	4e788 <__locale_ctype_ptr_l>
   4e124:	e0800004 	add	r0, r0, r4
   4e128:	e5d02001 	ldrb	r2, [r0, #1]
   4e12c:	e2122008 	ands	r2, r2, #8
   4e130:	1afffff6 	bne	4e110 <_strtol_l.isra.0+0x20>
   4e134:	e354002d 	cmp	r4, #45	; 0x2d
   4e138:	0a000047 	beq	4e25c <_strtol_l.isra.0+0x16c>
   4e13c:	e1a0a002 	mov	sl, r2
   4e140:	e354002b 	cmp	r4, #43	; 0x2b
   4e144:	05db4001 	ldrbeq	r4, [fp, #1]
   4e148:	028b5002 	addeq	r5, fp, #2
   4e14c:	e3d63010 	bics	r3, r6, #16
   4e150:	1a000003 	bne	4e164 <_strtol_l.isra.0+0x74>
   4e154:	e3540030 	cmp	r4, #48	; 0x30
   4e158:	0a000043 	beq	4e26c <_strtol_l.isra.0+0x17c>
   4e15c:	e3560000 	cmp	r6, #0
   4e160:	03a0600a 	moveq	r6, #10
   4e164:	e1a0b006 	mov	fp, r6
   4e168:	e35a0000 	cmp	sl, #0
   4e16c:	03e09102 	mvneq	r9, #-2147483648	; 0x80000000
   4e170:	13a09102 	movne	r9, #-2147483648	; 0x80000000
   4e174:	e1a0100b 	mov	r1, fp
   4e178:	e1a00009 	mov	r0, r9
   4e17c:	eb000249 	bl	4eaa8 <__aeabi_uidivmod>
   4e180:	e3a0c000 	mov	ip, #0
   4e184:	e1a0e000 	mov	lr, r0
   4e188:	e1a0000c 	mov	r0, ip
   4e18c:	ea000009 	b	4e1b8 <_strtol_l.isra.0+0xc8>
   4e190:	e04e2000 	sub	r2, lr, r0
   4e194:	e272c000 	rsbs	ip, r2, #0
   4e198:	e0acc002 	adc	ip, ip, r2
   4e19c:	e1510003 	cmp	r1, r3
   4e1a0:	a3a0c000 	movge	ip, #0
   4e1a4:	e35c0000 	cmp	ip, #0
   4e1a8:	1a000014 	bne	4e200 <_strtol_l.isra.0+0x110>
   4e1ac:	e3a0c001 	mov	ip, #1
   4e1b0:	e020309b 	mla	r0, fp, r0, r3
   4e1b4:	e4d54001 	ldrb	r4, [r5], #1
   4e1b8:	e2443030 	sub	r3, r4, #48	; 0x30
   4e1bc:	e3530009 	cmp	r3, #9
   4e1c0:	9a000007 	bls	4e1e4 <_strtol_l.isra.0+0xf4>
   4e1c4:	e2443041 	sub	r3, r4, #65	; 0x41
   4e1c8:	e3530019 	cmp	r3, #25
   4e1cc:	92443037 	subls	r3, r4, #55	; 0x37
   4e1d0:	9a000003 	bls	4e1e4 <_strtol_l.isra.0+0xf4>
   4e1d4:	e2443061 	sub	r3, r4, #97	; 0x61
   4e1d8:	e3530019 	cmp	r3, #25
   4e1dc:	8a000009 	bhi	4e208 <_strtol_l.isra.0+0x118>
   4e1e0:	e2443057 	sub	r3, r4, #87	; 0x57
   4e1e4:	e1560003 	cmp	r6, r3
   4e1e8:	da000006 	ble	4e208 <_strtol_l.isra.0+0x118>
   4e1ec:	e15e0000 	cmp	lr, r0
   4e1f0:	23a04000 	movcs	r4, #0
   4e1f4:	33a04001 	movcc	r4, #1
   4e1f8:	e1942fac 	orrs	r2, r4, ip, lsr #31
   4e1fc:	0affffe3 	beq	4e190 <_strtol_l.isra.0+0xa0>
   4e200:	e3e0c000 	mvn	ip, #0
   4e204:	eaffffea 	b	4e1b4 <_strtol_l.isra.0+0xc4>
   4e208:	e37c0001 	cmn	ip, #1
   4e20c:	0a000009 	beq	4e238 <_strtol_l.isra.0+0x148>
   4e210:	e35a0000 	cmp	sl, #0
   4e214:	12600000 	rsbne	r0, r0, #0
   4e218:	e3580000 	cmp	r8, #0
   4e21c:	0a000002 	beq	4e22c <_strtol_l.isra.0+0x13c>
   4e220:	e35c0000 	cmp	ip, #0
   4e224:	1a000019 	bne	4e290 <_strtol_l.isra.0+0x1a0>
   4e228:	e5887000 	str	r7, [r8]
   4e22c:	e28dd00c 	add	sp, sp, #12
   4e230:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   4e234:	e12fff1e 	bx	lr
   4e238:	e3a03022 	mov	r3, #34	; 0x22
   4e23c:	e59d2004 	ldr	r2, [sp, #4]
   4e240:	e3580000 	cmp	r8, #0
   4e244:	e5823000 	str	r3, [r2]
   4e248:	01a00009 	moveq	r0, r9
   4e24c:	0afffff6 	beq	4e22c <_strtol_l.isra.0+0x13c>
   4e250:	e1a00009 	mov	r0, r9
   4e254:	e2457001 	sub	r7, r5, #1
   4e258:	eafffff2 	b	4e228 <_strtol_l.isra.0+0x138>
   4e25c:	e28b5002 	add	r5, fp, #2
   4e260:	e5db4001 	ldrb	r4, [fp, #1]
   4e264:	e3a0a001 	mov	sl, #1
   4e268:	eaffffb7 	b	4e14c <_strtol_l.isra.0+0x5c>
   4e26c:	e5d53000 	ldrb	r3, [r5]
   4e270:	e20330df 	and	r3, r3, #223	; 0xdf
   4e274:	e3530058 	cmp	r3, #88	; 0x58
   4e278:	1a000006 	bne	4e298 <_strtol_l.isra.0+0x1a8>
   4e27c:	e3a06010 	mov	r6, #16
   4e280:	e5d54001 	ldrb	r4, [r5, #1]
   4e284:	e1a0b006 	mov	fp, r6
   4e288:	e2855002 	add	r5, r5, #2
   4e28c:	eaffffb5 	b	4e168 <_strtol_l.isra.0+0x78>
   4e290:	e1a09000 	mov	r9, r0
   4e294:	eaffffed 	b	4e250 <_strtol_l.isra.0+0x160>
   4e298:	e3560000 	cmp	r6, #0
   4e29c:	03a06008 	moveq	r6, #8
   4e2a0:	01a0b006 	moveq	fp, r6
   4e2a4:	0affffaf 	beq	4e168 <_strtol_l.isra.0+0x78>
   4e2a8:	eaffffad 	b	4e164 <_strtol_l.isra.0+0x74>

0004e2ac <_strtol_r>:
   4e2ac:	e59fc02c 	ldr	ip, [pc, #44]	; 4e2e0 <_strtol_r+0x34>
   4e2b0:	e59cc000 	ldr	ip, [ip]
   4e2b4:	e59cc034 	ldr	ip, [ip, #52]	; 0x34
   4e2b8:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   4e2bc:	e59fe020 	ldr	lr, [pc, #32]	; 4e2e4 <_strtol_r+0x38>
   4e2c0:	e35c0000 	cmp	ip, #0
   4e2c4:	01a0c00e 	moveq	ip, lr
   4e2c8:	e24dd00c 	sub	sp, sp, #12
   4e2cc:	e58dc000 	str	ip, [sp]
   4e2d0:	ebffff86 	bl	4e0f0 <_strtol_l.isra.0>
   4e2d4:	e28dd00c 	add	sp, sp, #12
   4e2d8:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
   4e2dc:	e12fff1e 	bx	lr
   4e2e0:	0006f564 	.word	0x0006f564
   4e2e4:	0006f990 	.word	0x0006f990

0004e2e8 <strtol_l>:
   4e2e8:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   4e2ec:	e59fc028 	ldr	ip, [pc, #40]	; 4e31c <strtol_l+0x34>
   4e2f0:	e59cc000 	ldr	ip, [ip]
   4e2f4:	e24dd00c 	sub	sp, sp, #12
   4e2f8:	e58d3000 	str	r3, [sp]
   4e2fc:	e1a03002 	mov	r3, r2
   4e300:	e1a02001 	mov	r2, r1
   4e304:	e1a01000 	mov	r1, r0
   4e308:	e1a0000c 	mov	r0, ip
   4e30c:	ebffff77 	bl	4e0f0 <_strtol_l.isra.0>
   4e310:	e28dd00c 	add	sp, sp, #12
   4e314:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
   4e318:	e12fff1e 	bx	lr
   4e31c:	0006f564 	.word	0x0006f564

0004e320 <strtol>:
   4e320:	e59f303c 	ldr	r3, [pc, #60]	; 4e364 <strtol+0x44>
   4e324:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   4e328:	e593e000 	ldr	lr, [r3]
   4e32c:	e59ec034 	ldr	ip, [lr, #52]	; 0x34
   4e330:	e59f3030 	ldr	r3, [pc, #48]	; 4e368 <strtol+0x48>
   4e334:	e35c0000 	cmp	ip, #0
   4e338:	01a0c003 	moveq	ip, r3
   4e33c:	e24dd00c 	sub	sp, sp, #12
   4e340:	e1a03002 	mov	r3, r2
   4e344:	e58dc000 	str	ip, [sp]
   4e348:	e1a02001 	mov	r2, r1
   4e34c:	e1a01000 	mov	r1, r0
   4e350:	e1a0000e 	mov	r0, lr
   4e354:	ebffff65 	bl	4e0f0 <_strtol_l.isra.0>
   4e358:	e28dd00c 	add	sp, sp, #12
   4e35c:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
   4e360:	e12fff1e 	bx	lr
   4e364:	0006f564 	.word	0x0006f564
   4e368:	0006f990 	.word	0x0006f990

0004e36c <_strtoul_l.isra.0>:
   4e36c:	e92d4ff8 	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   4e370:	e1a06001 	mov	r6, r1
   4e374:	e1a08000 	mov	r8, r0
   4e378:	e1a07002 	mov	r7, r2
   4e37c:	e1a09003 	mov	r9, r3
   4e380:	e1a0b001 	mov	fp, r1
   4e384:	ea000000 	b	4e38c <_strtoul_l.isra.0+0x20>
   4e388:	e1a0b005 	mov	fp, r5
   4e38c:	e1a0500b 	mov	r5, fp
   4e390:	e59d0028 	ldr	r0, [sp, #40]	; 0x28
   4e394:	e4d54001 	ldrb	r4, [r5], #1
   4e398:	eb0000fa 	bl	4e788 <__locale_ctype_ptr_l>
   4e39c:	e0800004 	add	r0, r0, r4
   4e3a0:	e5d01001 	ldrb	r1, [r0, #1]
   4e3a4:	e2111008 	ands	r1, r1, #8
   4e3a8:	1afffff6 	bne	4e388 <_strtoul_l.isra.0+0x1c>
   4e3ac:	e354002d 	cmp	r4, #45	; 0x2d
   4e3b0:	0a00004b 	beq	4e4e4 <_strtoul_l.isra.0+0x178>
   4e3b4:	e1a0a001 	mov	sl, r1
   4e3b8:	e354002b 	cmp	r4, #43	; 0x2b
   4e3bc:	05db4001 	ldrbeq	r4, [fp, #1]
   4e3c0:	028b5002 	addeq	r5, fp, #2
   4e3c4:	e3d93010 	bics	r3, r9, #16
   4e3c8:	1a00000a 	bne	4e3f8 <_strtoul_l.isra.0+0x8c>
   4e3cc:	e3540030 	cmp	r4, #48	; 0x30
   4e3d0:	0a000047 	beq	4e4f4 <_strtoul_l.isra.0+0x188>
   4e3d4:	e3590000 	cmp	r9, #0
   4e3d8:	1a000006 	bne	4e3f8 <_strtoul_l.isra.0+0x8c>
   4e3dc:	e3a0900a 	mov	r9, #10
   4e3e0:	e3a01005 	mov	r1, #5
   4e3e4:	e1a0c009 	mov	ip, r9
   4e3e8:	e59fb144 	ldr	fp, [pc, #324]	; 4e534 <_strtoul_l.isra.0+0x1c8>
   4e3ec:	ea000009 	b	4e418 <_strtoul_l.isra.0+0xac>
   4e3f0:	e3590000 	cmp	r9, #0
   4e3f4:	0a000049 	beq	4e520 <_strtoul_l.isra.0+0x1b4>
   4e3f8:	e1a01009 	mov	r1, r9
   4e3fc:	e3e00000 	mvn	r0, #0
   4e400:	eb00016b 	bl	4e9b4 <__udivsi3>
   4e404:	e1a01009 	mov	r1, r9
   4e408:	e1a0b000 	mov	fp, r0
   4e40c:	e3e00000 	mvn	r0, #0
   4e410:	eb0001a4 	bl	4eaa8 <__aeabi_uidivmod>
   4e414:	e1a0c009 	mov	ip, r9
   4e418:	e3a03000 	mov	r3, #0
   4e41c:	e1a00003 	mov	r0, r3
   4e420:	ea000009 	b	4e44c <_strtoul_l.isra.0+0xe0>
   4e424:	e040400b 	sub	r4, r0, fp
   4e428:	e2743000 	rsbs	r3, r4, #0
   4e42c:	e0a33004 	adc	r3, r3, r4
   4e430:	e1520001 	cmp	r2, r1
   4e434:	d3a03000 	movle	r3, #0
   4e438:	e3530000 	cmp	r3, #0
   4e43c:	1a000014 	bne	4e494 <_strtoul_l.isra.0+0x128>
   4e440:	e3a03001 	mov	r3, #1
   4e444:	e020209c 	mla	r0, ip, r0, r2
   4e448:	e4d54001 	ldrb	r4, [r5], #1
   4e44c:	e2442030 	sub	r2, r4, #48	; 0x30
   4e450:	e3520009 	cmp	r2, #9
   4e454:	9a000007 	bls	4e478 <_strtoul_l.isra.0+0x10c>
   4e458:	e2442041 	sub	r2, r4, #65	; 0x41
   4e45c:	e3520019 	cmp	r2, #25
   4e460:	92442037 	subls	r2, r4, #55	; 0x37
   4e464:	9a000003 	bls	4e478 <_strtoul_l.isra.0+0x10c>
   4e468:	e2442061 	sub	r2, r4, #97	; 0x61
   4e46c:	e3520019 	cmp	r2, #25
   4e470:	8a000009 	bhi	4e49c <_strtoul_l.isra.0+0x130>
   4e474:	e2442057 	sub	r2, r4, #87	; 0x57
   4e478:	e1590002 	cmp	r9, r2
   4e47c:	da000006 	ble	4e49c <_strtoul_l.isra.0+0x130>
   4e480:	e150000b 	cmp	r0, fp
   4e484:	93a0e000 	movls	lr, #0
   4e488:	83a0e001 	movhi	lr, #1
   4e48c:	e19e3fa3 	orrs	r3, lr, r3, lsr #31
   4e490:	0affffe3 	beq	4e424 <_strtoul_l.isra.0+0xb8>
   4e494:	e3e03000 	mvn	r3, #0
   4e498:	eaffffea 	b	4e448 <_strtoul_l.isra.0+0xdc>
   4e49c:	e3530000 	cmp	r3, #0
   4e4a0:	ba000008 	blt	4e4c8 <_strtoul_l.isra.0+0x15c>
   4e4a4:	e35a0000 	cmp	sl, #0
   4e4a8:	12600000 	rsbne	r0, r0, #0
   4e4ac:	e3570000 	cmp	r7, #0
   4e4b0:	0a000002 	beq	4e4c0 <_strtoul_l.isra.0+0x154>
   4e4b4:	e3530000 	cmp	r3, #0
   4e4b8:	1a000007 	bne	4e4dc <_strtoul_l.isra.0+0x170>
   4e4bc:	e5876000 	str	r6, [r7]
   4e4c0:	e8bd4ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   4e4c4:	e12fff1e 	bx	lr
   4e4c8:	e3a03022 	mov	r3, #34	; 0x22
   4e4cc:	e3570000 	cmp	r7, #0
   4e4d0:	e3e00000 	mvn	r0, #0
   4e4d4:	e5883000 	str	r3, [r8]
   4e4d8:	0afffff8 	beq	4e4c0 <_strtoul_l.isra.0+0x154>
   4e4dc:	e2456001 	sub	r6, r5, #1
   4e4e0:	eafffff5 	b	4e4bc <_strtoul_l.isra.0+0x150>
   4e4e4:	e28b5002 	add	r5, fp, #2
   4e4e8:	e5db4001 	ldrb	r4, [fp, #1]
   4e4ec:	e3a0a001 	mov	sl, #1
   4e4f0:	eaffffb3 	b	4e3c4 <_strtoul_l.isra.0+0x58>
   4e4f4:	e5d53000 	ldrb	r3, [r5]
   4e4f8:	e20330df 	and	r3, r3, #223	; 0xdf
   4e4fc:	e3530058 	cmp	r3, #88	; 0x58
   4e500:	1affffba 	bne	4e3f0 <_strtoul_l.isra.0+0x84>
   4e504:	e3a09010 	mov	r9, #16
   4e508:	e5d54001 	ldrb	r4, [r5, #1]
   4e50c:	e1a0c009 	mov	ip, r9
   4e510:	e2855002 	add	r5, r5, #2
   4e514:	e3a0100f 	mov	r1, #15
   4e518:	e3e0b20f 	mvn	fp, #-268435456	; 0xf0000000
   4e51c:	eaffffbd 	b	4e418 <_strtoul_l.isra.0+0xac>
   4e520:	e3a09008 	mov	r9, #8
   4e524:	e3a01007 	mov	r1, #7
   4e528:	e1a0c009 	mov	ip, r9
   4e52c:	e3e0b20e 	mvn	fp, #-536870912	; 0xe0000000
   4e530:	eaffffb8 	b	4e418 <_strtoul_l.isra.0+0xac>
   4e534:	19999999 	.word	0x19999999

0004e538 <_strtoul_r>:
   4e538:	e59fc02c 	ldr	ip, [pc, #44]	; 4e56c <_strtoul_r+0x34>
   4e53c:	e59cc000 	ldr	ip, [ip]
   4e540:	e59cc034 	ldr	ip, [ip, #52]	; 0x34
   4e544:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   4e548:	e59fe020 	ldr	lr, [pc, #32]	; 4e570 <_strtoul_r+0x38>
   4e54c:	e35c0000 	cmp	ip, #0
   4e550:	01a0c00e 	moveq	ip, lr
   4e554:	e24dd00c 	sub	sp, sp, #12
   4e558:	e58dc000 	str	ip, [sp]
   4e55c:	ebffff82 	bl	4e36c <_strtoul_l.isra.0>
   4e560:	e28dd00c 	add	sp, sp, #12
   4e564:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
   4e568:	e12fff1e 	bx	lr
   4e56c:	0006f564 	.word	0x0006f564
   4e570:	0006f990 	.word	0x0006f990

0004e574 <strtoul_l>:
   4e574:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   4e578:	e59fc028 	ldr	ip, [pc, #40]	; 4e5a8 <strtoul_l+0x34>
   4e57c:	e59cc000 	ldr	ip, [ip]
   4e580:	e24dd00c 	sub	sp, sp, #12
   4e584:	e58d3000 	str	r3, [sp]
   4e588:	e1a03002 	mov	r3, r2
   4e58c:	e1a02001 	mov	r2, r1
   4e590:	e1a01000 	mov	r1, r0
   4e594:	e1a0000c 	mov	r0, ip
   4e598:	ebffff73 	bl	4e36c <_strtoul_l.isra.0>
   4e59c:	e28dd00c 	add	sp, sp, #12
   4e5a0:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
   4e5a4:	e12fff1e 	bx	lr
   4e5a8:	0006f564 	.word	0x0006f564

0004e5ac <strtoul>:
   4e5ac:	e59f303c 	ldr	r3, [pc, #60]	; 4e5f0 <strtoul+0x44>
   4e5b0:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   4e5b4:	e593e000 	ldr	lr, [r3]
   4e5b8:	e59ec034 	ldr	ip, [lr, #52]	; 0x34
   4e5bc:	e59f3030 	ldr	r3, [pc, #48]	; 4e5f4 <strtoul+0x48>
   4e5c0:	e35c0000 	cmp	ip, #0
   4e5c4:	01a0c003 	moveq	ip, r3
   4e5c8:	e24dd00c 	sub	sp, sp, #12
   4e5cc:	e1a03002 	mov	r3, r2
   4e5d0:	e58dc000 	str	ip, [sp]
   4e5d4:	e1a02001 	mov	r2, r1
   4e5d8:	e1a01000 	mov	r1, r0
   4e5dc:	e1a0000e 	mov	r0, lr
   4e5e0:	ebffff61 	bl	4e36c <_strtoul_l.isra.0>
   4e5e4:	e28dd00c 	add	sp, sp, #12
   4e5e8:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
   4e5ec:	e12fff1e 	bx	lr
   4e5f0:	0006f564 	.word	0x0006f564
   4e5f4:	0006f990 	.word	0x0006f990

0004e5f8 <toupper>:
   4e5f8:	e92d4010 	push	{r4, lr}
   4e5fc:	e1a04000 	mov	r4, r0
   4e600:	eb000062 	bl	4e790 <__locale_ctype_ptr>
   4e604:	e0800004 	add	r0, r0, r4
   4e608:	e5d03001 	ldrb	r3, [r0, #1]
   4e60c:	e2033003 	and	r3, r3, #3
   4e610:	e3530002 	cmp	r3, #2
   4e614:	02444020 	subeq	r4, r4, #32
   4e618:	e1a00004 	mov	r0, r4
   4e61c:	e8bd4010 	pop	{r4, lr}
   4e620:	e12fff1e 	bx	lr

0004e624 <__utoa>:
   4e624:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   4e628:	e24dd028 	sub	sp, sp, #40	; 0x28
   4e62c:	e1a0e00d 	mov	lr, sp
   4e630:	e1a07002 	mov	r7, r2
   4e634:	e59f40b4 	ldr	r4, [pc, #180]	; 4e6f0 <__utoa+0xcc>
   4e638:	e1a06001 	mov	r6, r1
   4e63c:	e1a0c000 	mov	ip, r0
   4e640:	e8b4000f 	ldm	r4!, {r0, r1, r2, r3}
   4e644:	e8ae000f 	stmia	lr!, {r0, r1, r2, r3}
   4e648:	e8b4000f 	ldm	r4!, {r0, r1, r2, r3}
   4e64c:	e8ae000f 	stmia	lr!, {r0, r1, r2, r3}
   4e650:	e8940003 	ldm	r4, {r0, r1}
   4e654:	e2473002 	sub	r3, r7, #2
   4e658:	e3530022 	cmp	r3, #34	; 0x22
   4e65c:	e48e0004 	str	r0, [lr], #4
   4e660:	83a00000 	movhi	r0, #0
   4e664:	e5ce1000 	strb	r1, [lr]
   4e668:	85c60000 	strbhi	r0, [r6]
   4e66c:	8a00001c 	bhi	4e6e4 <__utoa+0xc0>
   4e670:	e2465001 	sub	r5, r6, #1
   4e674:	e1a08005 	mov	r8, r5
   4e678:	e3a04000 	mov	r4, #0
   4e67c:	ea000000 	b	4e684 <__utoa+0x60>
   4e680:	e1a04002 	mov	r4, r2
   4e684:	e1a0000c 	mov	r0, ip
   4e688:	e1a01007 	mov	r1, r7
   4e68c:	eb000105 	bl	4eaa8 <__aeabi_uidivmod>
   4e690:	e28d3028 	add	r3, sp, #40	; 0x28
   4e694:	e0831001 	add	r1, r3, r1
   4e698:	e5513028 	ldrb	r3, [r1, #-40]	; 0xffffffd8
   4e69c:	e250c000 	subs	ip, r0, #0
   4e6a0:	e5e83001 	strb	r3, [r8, #1]!
   4e6a4:	e2842001 	add	r2, r4, #1
   4e6a8:	1afffff4 	bne	4e680 <__utoa+0x5c>
   4e6ac:	e3540000 	cmp	r4, #0
   4e6b0:	e7c6c002 	strb	ip, [r6, r2]
   4e6b4:	0a000009 	beq	4e6e0 <__utoa+0xbc>
   4e6b8:	e1a0300c 	mov	r3, ip
   4e6bc:	e0862002 	add	r2, r6, r2
   4e6c0:	e2833001 	add	r3, r3, #1
   4e6c4:	e5f51001 	ldrb	r1, [r5, #1]!
   4e6c8:	e5720001 	ldrb	r0, [r2, #-1]!
   4e6cc:	e044c003 	sub	ip, r4, r3
   4e6d0:	e153000c 	cmp	r3, ip
   4e6d4:	e5c50000 	strb	r0, [r5]
   4e6d8:	e5c21000 	strb	r1, [r2]
   4e6dc:	bafffff7 	blt	4e6c0 <__utoa+0x9c>
   4e6e0:	e1a00006 	mov	r0, r6
   4e6e4:	e28dd028 	add	sp, sp, #40	; 0x28
   4e6e8:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   4e6ec:	e12fff1e 	bx	lr
   4e6f0:	0005867c 	.word	0x0005867c

0004e6f4 <utoa>:
   4e6f4:	eaffffca 	b	4e624 <__utoa>

0004e6f8 <_setlocale_r>:
   4e6f8:	e92d4010 	push	{r4, lr}
   4e6fc:	e2524000 	subs	r4, r2, #0
   4e700:	0a000004 	beq	4e718 <_setlocale_r+0x20>
   4e704:	e59f1048 	ldr	r1, [pc, #72]	; 4e754 <_setlocale_r+0x5c>
   4e708:	e1a00004 	mov	r0, r4
   4e70c:	ebfffab8 	bl	4d1f4 <strcmp>
   4e710:	e3500000 	cmp	r0, #0
   4e714:	1a000002 	bne	4e724 <_setlocale_r+0x2c>
   4e718:	e59f0038 	ldr	r0, [pc, #56]	; 4e758 <_setlocale_r+0x60>
   4e71c:	e8bd4010 	pop	{r4, lr}
   4e720:	e12fff1e 	bx	lr
   4e724:	e59f102c 	ldr	r1, [pc, #44]	; 4e758 <_setlocale_r+0x60>
   4e728:	e1a00004 	mov	r0, r4
   4e72c:	ebfffab0 	bl	4d1f4 <strcmp>
   4e730:	e3500000 	cmp	r0, #0
   4e734:	0afffff7 	beq	4e718 <_setlocale_r+0x20>
   4e738:	e1a00004 	mov	r0, r4
   4e73c:	e59f1018 	ldr	r1, [pc, #24]	; 4e75c <_setlocale_r+0x64>
   4e740:	ebfffaab 	bl	4d1f4 <strcmp>
   4e744:	e3500000 	cmp	r0, #0
   4e748:	0afffff2 	beq	4e718 <_setlocale_r+0x20>
   4e74c:	e3a00000 	mov	r0, #0
   4e750:	eafffff1 	b	4e71c <_setlocale_r+0x24>
   4e754:	000586a8 	.word	0x000586a8
   4e758:	000518fc 	.word	0x000518fc
   4e75c:	00053e00 	.word	0x00053e00

0004e760 <__locale_mb_cur_max>:
   4e760:	e59f3018 	ldr	r3, [pc, #24]	; 4e780 <__locale_mb_cur_max+0x20>
   4e764:	e5933000 	ldr	r3, [r3]
   4e768:	e5933034 	ldr	r3, [r3, #52]	; 0x34
   4e76c:	e59f2010 	ldr	r2, [pc, #16]	; 4e784 <__locale_mb_cur_max+0x24>
   4e770:	e3530000 	cmp	r3, #0
   4e774:	01a03002 	moveq	r3, r2
   4e778:	e5d30128 	ldrb	r0, [r3, #296]	; 0x128
   4e77c:	e12fff1e 	bx	lr
   4e780:	0006f564 	.word	0x0006f564
   4e784:	0006f990 	.word	0x0006f990

0004e788 <__locale_ctype_ptr_l>:
   4e788:	e59000ec 	ldr	r0, [r0, #236]	; 0xec
   4e78c:	e12fff1e 	bx	lr

0004e790 <__locale_ctype_ptr>:
   4e790:	e59f3018 	ldr	r3, [pc, #24]	; 4e7b0 <__locale_ctype_ptr+0x20>
   4e794:	e5933000 	ldr	r3, [r3]
   4e798:	e5933034 	ldr	r3, [r3, #52]	; 0x34
   4e79c:	e59f2010 	ldr	r2, [pc, #16]	; 4e7b4 <__locale_ctype_ptr+0x24>
   4e7a0:	e3530000 	cmp	r3, #0
   4e7a4:	01a03002 	moveq	r3, r2
   4e7a8:	e59300ec 	ldr	r0, [r3, #236]	; 0xec
   4e7ac:	e12fff1e 	bx	lr
   4e7b0:	0006f564 	.word	0x0006f564
   4e7b4:	0006f990 	.word	0x0006f990

0004e7b8 <setlocale>:
   4e7b8:	e59f300c 	ldr	r3, [pc, #12]	; 4e7cc <setlocale+0x14>
   4e7bc:	e1a02001 	mov	r2, r1
   4e7c0:	e1a01000 	mov	r1, r0
   4e7c4:	e5930000 	ldr	r0, [r3]
   4e7c8:	eaffffca 	b	4e6f8 <_setlocale_r>
   4e7cc:	0006f564 	.word	0x0006f564

0004e7d0 <_mbtowc_r>:
   4e7d0:	e59fc024 	ldr	ip, [pc, #36]	; 4e7fc <_mbtowc_r+0x2c>
   4e7d4:	e59cc000 	ldr	ip, [ip]
   4e7d8:	e59cc034 	ldr	ip, [ip, #52]	; 0x34
   4e7dc:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   4e7e0:	e59fe018 	ldr	lr, [pc, #24]	; 4e800 <_mbtowc_r+0x30>
   4e7e4:	e35c0000 	cmp	ip, #0
   4e7e8:	01a0c00e 	moveq	ip, lr
   4e7ec:	e59ce0e4 	ldr	lr, [ip, #228]	; 0xe4
   4e7f0:	e1a0c00e 	mov	ip, lr
   4e7f4:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
   4e7f8:	e12fff1c 	bx	ip
   4e7fc:	0006f564 	.word	0x0006f564
   4e800:	0006f990 	.word	0x0006f990

0004e804 <__ascii_mbtowc>:
   4e804:	e3510000 	cmp	r1, #0
   4e808:	e24dd008 	sub	sp, sp, #8
   4e80c:	028d1004 	addeq	r1, sp, #4
   4e810:	e3520000 	cmp	r2, #0
   4e814:	01a00002 	moveq	r0, r2
   4e818:	0a000006 	beq	4e838 <__ascii_mbtowc+0x34>
   4e81c:	e3530000 	cmp	r3, #0
   4e820:	0a000006 	beq	4e840 <__ascii_mbtowc+0x3c>
   4e824:	e5d23000 	ldrb	r3, [r2]
   4e828:	e5813000 	str	r3, [r1]
   4e82c:	e5d22000 	ldrb	r2, [r2]
   4e830:	e2920000 	adds	r0, r2, #0
   4e834:	13a00001 	movne	r0, #1
   4e838:	e28dd008 	add	sp, sp, #8
   4e83c:	e12fff1e 	bx	lr
   4e840:	e3e00001 	mvn	r0, #1
   4e844:	eafffffb 	b	4e838 <__ascii_mbtowc+0x34>

0004e848 <memchr>:
   4e848:	e3100003 	tst	r0, #3
   4e84c:	e92d4070 	push	{r4, r5, r6, lr}
   4e850:	e201e0ff 	and	lr, r1, #255	; 0xff
   4e854:	0a000038 	beq	4e93c <memchr+0xf4>
   4e858:	e3520000 	cmp	r2, #0
   4e85c:	e242c001 	sub	ip, r2, #1
   4e860:	0a00001e 	beq	4e8e0 <memchr+0x98>
   4e864:	e5d03000 	ldrb	r3, [r0]
   4e868:	e153000e 	cmp	r3, lr
   4e86c:	0a00001c 	beq	4e8e4 <memchr+0x9c>
   4e870:	e2803001 	add	r3, r0, #1
   4e874:	ea000005 	b	4e890 <memchr+0x48>
   4e878:	e25cc001 	subs	ip, ip, #1
   4e87c:	3a000017 	bcc	4e8e0 <memchr+0x98>
   4e880:	e5d02000 	ldrb	r2, [r0]
   4e884:	e152000e 	cmp	r2, lr
   4e888:	e2833001 	add	r3, r3, #1
   4e88c:	0a000014 	beq	4e8e4 <memchr+0x9c>
   4e890:	e3130003 	tst	r3, #3
   4e894:	e1a00003 	mov	r0, r3
   4e898:	1afffff6 	bne	4e878 <memchr+0x30>
   4e89c:	e35c0003 	cmp	ip, #3
   4e8a0:	8a000011 	bhi	4e8ec <memchr+0xa4>
   4e8a4:	e35c0000 	cmp	ip, #0
   4e8a8:	0a000025 	beq	4e944 <memchr+0xfc>
   4e8ac:	e5d03000 	ldrb	r3, [r0]
   4e8b0:	e153000e 	cmp	r3, lr
   4e8b4:	0a00000a 	beq	4e8e4 <memchr+0x9c>
   4e8b8:	e080c00c 	add	ip, r0, ip
   4e8bc:	e2803001 	add	r3, r0, #1
   4e8c0:	ea000003 	b	4e8d4 <memchr+0x8c>
   4e8c4:	e5d02000 	ldrb	r2, [r0]
   4e8c8:	e152000e 	cmp	r2, lr
   4e8cc:	e2833001 	add	r3, r3, #1
   4e8d0:	0a000003 	beq	4e8e4 <memchr+0x9c>
   4e8d4:	e15c0003 	cmp	ip, r3
   4e8d8:	e1a00003 	mov	r0, r3
   4e8dc:	1afffff8 	bne	4e8c4 <memchr+0x7c>
   4e8e0:	e3a00000 	mov	r0, #0
   4e8e4:	e8bd4070 	pop	{r4, r5, r6, lr}
   4e8e8:	e12fff1e 	bx	lr
   4e8ec:	e1a02000 	mov	r2, r0
   4e8f0:	e59f4054 	ldr	r4, [pc, #84]	; 4e94c <memchr+0x104>
   4e8f4:	e0044401 	and	r4, r4, r1, lsl #8
   4e8f8:	e184400e 	orr	r4, r4, lr
   4e8fc:	e59f604c 	ldr	r6, [pc, #76]	; 4e950 <memchr+0x108>
   4e900:	e59f504c 	ldr	r5, [pc, #76]	; 4e954 <memchr+0x10c>
   4e904:	e1844804 	orr	r4, r4, r4, lsl #16
   4e908:	e5923000 	ldr	r3, [r2]
   4e90c:	e0233004 	eor	r3, r3, r4
   4e910:	e0831006 	add	r1, r3, r6
   4e914:	e1c13003 	bic	r3, r1, r3
   4e918:	e1130005 	tst	r3, r5
   4e91c:	e1a00002 	mov	r0, r2
   4e920:	e2822004 	add	r2, r2, #4
   4e924:	1affffe0 	bne	4e8ac <memchr+0x64>
   4e928:	e24cc004 	sub	ip, ip, #4
   4e92c:	e35c0003 	cmp	ip, #3
   4e930:	e1a00002 	mov	r0, r2
   4e934:	8afffff3 	bhi	4e908 <memchr+0xc0>
   4e938:	eaffffd9 	b	4e8a4 <memchr+0x5c>
   4e93c:	e1a0c002 	mov	ip, r2
   4e940:	eaffffd5 	b	4e89c <memchr+0x54>
   4e944:	e1a0000c 	mov	r0, ip
   4e948:	eaffffe5 	b	4e8e4 <memchr+0x9c>
   4e94c:	0000ffff 	.word	0x0000ffff
   4e950:	fefefeff 	.word	0xfefefeff
   4e954:	80808080 	.word	0x80808080

0004e958 <_wctomb_r>:
   4e958:	e59fc024 	ldr	ip, [pc, #36]	; 4e984 <_wctomb_r+0x2c>
   4e95c:	e59cc000 	ldr	ip, [ip]
   4e960:	e59cc034 	ldr	ip, [ip, #52]	; 0x34
   4e964:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   4e968:	e59fe018 	ldr	lr, [pc, #24]	; 4e988 <_wctomb_r+0x30>
   4e96c:	e35c0000 	cmp	ip, #0
   4e970:	01a0c00e 	moveq	ip, lr
   4e974:	e59ce0e0 	ldr	lr, [ip, #224]	; 0xe0
   4e978:	e1a0c00e 	mov	ip, lr
   4e97c:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
   4e980:	e12fff1c 	bx	ip
   4e984:	0006f564 	.word	0x0006f564
   4e988:	0006f990 	.word	0x0006f990

0004e98c <__ascii_wctomb>:
   4e98c:	e3510000 	cmp	r1, #0
   4e990:	0a000005 	beq	4e9ac <__ascii_wctomb+0x20>
   4e994:	e35200ff 	cmp	r2, #255	; 0xff
   4e998:	83a0308a 	movhi	r3, #138	; 0x8a
   4e99c:	95c12000 	strbls	r2, [r1]
   4e9a0:	83e01000 	mvnhi	r1, #0
   4e9a4:	93a01001 	movls	r1, #1
   4e9a8:	85803000 	strhi	r3, [r0]
   4e9ac:	e1a00001 	mov	r0, r1
   4e9b0:	e12fff1e 	bx	lr

0004e9b4 <__udivsi3>:
   4e9b4:	e2512001 	subs	r2, r1, #1
   4e9b8:	012fff1e 	bxeq	lr
   4e9bc:	3a000036 	bcc	4ea9c <__udivsi3+0xe8>
   4e9c0:	e1500001 	cmp	r0, r1
   4e9c4:	9a000022 	bls	4ea54 <__udivsi3+0xa0>
   4e9c8:	e1110002 	tst	r1, r2
   4e9cc:	0a000023 	beq	4ea60 <__udivsi3+0xac>
   4e9d0:	e311020e 	tst	r1, #-536870912	; 0xe0000000
   4e9d4:	01a01181 	lsleq	r1, r1, #3
   4e9d8:	03a03008 	moveq	r3, #8
   4e9dc:	13a03001 	movne	r3, #1
   4e9e0:	e3510201 	cmp	r1, #268435456	; 0x10000000
   4e9e4:	31510000 	cmpcc	r1, r0
   4e9e8:	31a01201 	lslcc	r1, r1, #4
   4e9ec:	31a03203 	lslcc	r3, r3, #4
   4e9f0:	3afffffa 	bcc	4e9e0 <__udivsi3+0x2c>
   4e9f4:	e3510102 	cmp	r1, #-2147483648	; 0x80000000
   4e9f8:	31510000 	cmpcc	r1, r0
   4e9fc:	31a01081 	lslcc	r1, r1, #1
   4ea00:	31a03083 	lslcc	r3, r3, #1
   4ea04:	3afffffa 	bcc	4e9f4 <__udivsi3+0x40>
   4ea08:	e3a02000 	mov	r2, #0
   4ea0c:	e1500001 	cmp	r0, r1
   4ea10:	20400001 	subcs	r0, r0, r1
   4ea14:	21822003 	orrcs	r2, r2, r3
   4ea18:	e15000a1 	cmp	r0, r1, lsr #1
   4ea1c:	204000a1 	subcs	r0, r0, r1, lsr #1
   4ea20:	218220a3 	orrcs	r2, r2, r3, lsr #1
   4ea24:	e1500121 	cmp	r0, r1, lsr #2
   4ea28:	20400121 	subcs	r0, r0, r1, lsr #2
   4ea2c:	21822123 	orrcs	r2, r2, r3, lsr #2
   4ea30:	e15001a1 	cmp	r0, r1, lsr #3
   4ea34:	204001a1 	subcs	r0, r0, r1, lsr #3
   4ea38:	218221a3 	orrcs	r2, r2, r3, lsr #3
   4ea3c:	e3500000 	cmp	r0, #0
   4ea40:	11b03223 	lsrsne	r3, r3, #4
   4ea44:	11a01221 	lsrne	r1, r1, #4
   4ea48:	1affffef 	bne	4ea0c <__udivsi3+0x58>
   4ea4c:	e1a00002 	mov	r0, r2
   4ea50:	e12fff1e 	bx	lr
   4ea54:	03a00001 	moveq	r0, #1
   4ea58:	13a00000 	movne	r0, #0
   4ea5c:	e12fff1e 	bx	lr
   4ea60:	e3510801 	cmp	r1, #65536	; 0x10000
   4ea64:	21a01821 	lsrcs	r1, r1, #16
   4ea68:	23a02010 	movcs	r2, #16
   4ea6c:	33a02000 	movcc	r2, #0
   4ea70:	e3510c01 	cmp	r1, #256	; 0x100
   4ea74:	21a01421 	lsrcs	r1, r1, #8
   4ea78:	22822008 	addcs	r2, r2, #8
   4ea7c:	e3510010 	cmp	r1, #16
   4ea80:	21a01221 	lsrcs	r1, r1, #4
   4ea84:	22822004 	addcs	r2, r2, #4
   4ea88:	e3510004 	cmp	r1, #4
   4ea8c:	82822003 	addhi	r2, r2, #3
   4ea90:	908220a1 	addls	r2, r2, r1, lsr #1
   4ea94:	e1a00230 	lsr	r0, r0, r2
   4ea98:	e12fff1e 	bx	lr
   4ea9c:	e3500000 	cmp	r0, #0
   4eaa0:	13e00000 	mvnne	r0, #0
   4eaa4:	ea000059 	b	4ec10 <__aeabi_idiv0>

0004eaa8 <__aeabi_uidivmod>:
   4eaa8:	e3510000 	cmp	r1, #0
   4eaac:	0afffffa 	beq	4ea9c <__udivsi3+0xe8>
   4eab0:	e92d4003 	push	{r0, r1, lr}
   4eab4:	ebffffbe 	bl	4e9b4 <__udivsi3>
   4eab8:	e8bd4006 	pop	{r1, r2, lr}
   4eabc:	e0030092 	mul	r3, r2, r0
   4eac0:	e0411003 	sub	r1, r1, r3
   4eac4:	e12fff1e 	bx	lr

0004eac8 <__divsi3>:
   4eac8:	e3510000 	cmp	r1, #0
   4eacc:	0a000043 	beq	4ebe0 <.divsi3_skip_div0_test+0x110>

0004ead0 <.divsi3_skip_div0_test>:
   4ead0:	e020c001 	eor	ip, r0, r1
   4ead4:	42611000 	rsbmi	r1, r1, #0
   4ead8:	e2512001 	subs	r2, r1, #1
   4eadc:	0a000027 	beq	4eb80 <.divsi3_skip_div0_test+0xb0>
   4eae0:	e1b03000 	movs	r3, r0
   4eae4:	42603000 	rsbmi	r3, r0, #0
   4eae8:	e1530001 	cmp	r3, r1
   4eaec:	9a000026 	bls	4eb8c <.divsi3_skip_div0_test+0xbc>
   4eaf0:	e1110002 	tst	r1, r2
   4eaf4:	0a000028 	beq	4eb9c <.divsi3_skip_div0_test+0xcc>
   4eaf8:	e311020e 	tst	r1, #-536870912	; 0xe0000000
   4eafc:	01a01181 	lsleq	r1, r1, #3
   4eb00:	03a02008 	moveq	r2, #8
   4eb04:	13a02001 	movne	r2, #1
   4eb08:	e3510201 	cmp	r1, #268435456	; 0x10000000
   4eb0c:	31510003 	cmpcc	r1, r3
   4eb10:	31a01201 	lslcc	r1, r1, #4
   4eb14:	31a02202 	lslcc	r2, r2, #4
   4eb18:	3afffffa 	bcc	4eb08 <.divsi3_skip_div0_test+0x38>
   4eb1c:	e3510102 	cmp	r1, #-2147483648	; 0x80000000
   4eb20:	31510003 	cmpcc	r1, r3
   4eb24:	31a01081 	lslcc	r1, r1, #1
   4eb28:	31a02082 	lslcc	r2, r2, #1
   4eb2c:	3afffffa 	bcc	4eb1c <.divsi3_skip_div0_test+0x4c>
   4eb30:	e3a00000 	mov	r0, #0
   4eb34:	e1530001 	cmp	r3, r1
   4eb38:	20433001 	subcs	r3, r3, r1
   4eb3c:	21800002 	orrcs	r0, r0, r2
   4eb40:	e15300a1 	cmp	r3, r1, lsr #1
   4eb44:	204330a1 	subcs	r3, r3, r1, lsr #1
   4eb48:	218000a2 	orrcs	r0, r0, r2, lsr #1
   4eb4c:	e1530121 	cmp	r3, r1, lsr #2
   4eb50:	20433121 	subcs	r3, r3, r1, lsr #2
   4eb54:	21800122 	orrcs	r0, r0, r2, lsr #2
   4eb58:	e15301a1 	cmp	r3, r1, lsr #3
   4eb5c:	204331a1 	subcs	r3, r3, r1, lsr #3
   4eb60:	218001a2 	orrcs	r0, r0, r2, lsr #3
   4eb64:	e3530000 	cmp	r3, #0
   4eb68:	11b02222 	lsrsne	r2, r2, #4
   4eb6c:	11a01221 	lsrne	r1, r1, #4
   4eb70:	1affffef 	bne	4eb34 <.divsi3_skip_div0_test+0x64>
   4eb74:	e35c0000 	cmp	ip, #0
   4eb78:	42600000 	rsbmi	r0, r0, #0
   4eb7c:	e12fff1e 	bx	lr
   4eb80:	e13c0000 	teq	ip, r0
   4eb84:	42600000 	rsbmi	r0, r0, #0
   4eb88:	e12fff1e 	bx	lr
   4eb8c:	33a00000 	movcc	r0, #0
   4eb90:	01a00fcc 	asreq	r0, ip, #31
   4eb94:	03800001 	orreq	r0, r0, #1
   4eb98:	e12fff1e 	bx	lr
   4eb9c:	e3510801 	cmp	r1, #65536	; 0x10000
   4eba0:	21a01821 	lsrcs	r1, r1, #16
   4eba4:	23a02010 	movcs	r2, #16
   4eba8:	33a02000 	movcc	r2, #0
   4ebac:	e3510c01 	cmp	r1, #256	; 0x100
   4ebb0:	21a01421 	lsrcs	r1, r1, #8
   4ebb4:	22822008 	addcs	r2, r2, #8
   4ebb8:	e3510010 	cmp	r1, #16
   4ebbc:	21a01221 	lsrcs	r1, r1, #4
   4ebc0:	22822004 	addcs	r2, r2, #4
   4ebc4:	e3510004 	cmp	r1, #4
   4ebc8:	82822003 	addhi	r2, r2, #3
   4ebcc:	908220a1 	addls	r2, r2, r1, lsr #1
   4ebd0:	e35c0000 	cmp	ip, #0
   4ebd4:	e1a00233 	lsr	r0, r3, r2
   4ebd8:	42600000 	rsbmi	r0, r0, #0
   4ebdc:	e12fff1e 	bx	lr
   4ebe0:	e3500000 	cmp	r0, #0
   4ebe4:	c3e00102 	mvngt	r0, #-2147483648	; 0x80000000
   4ebe8:	b3a00102 	movlt	r0, #-2147483648	; 0x80000000
   4ebec:	ea000007 	b	4ec10 <__aeabi_idiv0>

0004ebf0 <__aeabi_idivmod>:
   4ebf0:	e3510000 	cmp	r1, #0
   4ebf4:	0afffff9 	beq	4ebe0 <.divsi3_skip_div0_test+0x110>
   4ebf8:	e92d4003 	push	{r0, r1, lr}
   4ebfc:	ebffffb3 	bl	4ead0 <.divsi3_skip_div0_test>
   4ec00:	e8bd4006 	pop	{r1, r2, lr}
   4ec04:	e0030092 	mul	r3, r2, r0
   4ec08:	e0411003 	sub	r1, r1, r3
   4ec0c:	e12fff1e 	bx	lr

0004ec10 <__aeabi_idiv0>:
   4ec10:	e12fff1e 	bx	lr
