
M:/RobDev/Projects/Vintage/RC2014/PiBusRaider/PiSw/build/BusRaider.elf:     file format elf32-littlearm


Disassembly of section .text:

00008000 <_startup>:
    8000:	e59ff018 	ldr	pc, [pc, #24]	; 8020 <_reset_h>
    8004:	e59ff018 	ldr	pc, [pc, #24]	; 8024 <_undefined_instruction_h>
    8008:	e59ff018 	ldr	pc, [pc, #24]	; 8028 <_software_interrupt_h>
    800c:	e59ff018 	ldr	pc, [pc, #24]	; 802c <_prefetch_abort_h>
    8010:	e59ff018 	ldr	pc, [pc, #24]	; 8030 <_data_abort_h>
    8014:	e59ff018 	ldr	pc, [pc, #24]	; 8034 <_unused_handler_h>
    8018:	e59ff018 	ldr	pc, [pc, #24]	; 8038 <_interrupt_h>
    801c:	e59ff018 	ldr	pc, [pc, #24]	; 803c <_fast_interrupt_h>

00008020 <_reset_h>:
    8020:	00008048 	.word	0x00008048

00008024 <_undefined_instruction_h>:
    8024:	000080d4 	.word	0x000080d4

00008028 <_software_interrupt_h>:
    8028:	000080d4 	.word	0x000080d4

0000802c <_prefetch_abort_h>:
    802c:	000080d4 	.word	0x000080d4

00008030 <_data_abort_h>:
    8030:	000080d4 	.word	0x000080d4

00008034 <_unused_handler_h>:
    8034:	000080d4 	.word	0x000080d4

00008038 <_interrupt_h>:
    8038:	00015834 	.word	0x00015834

0000803c <_fast_interrupt_h>:
    803c:	000080c4 	.word	0x000080c4

00008040 <bss_start>:
    8040:	000428ec 	.word	0x000428ec

00008044 <bss_end>:
    8044:	00080e40 	.word	0x00080e40

00008048 <_reset_>:
    8048:	e3a00902 	mov	r0, #32768	; 0x8000
    804c:	e3a01000 	mov	r1, #0
    8050:	e8b003fc 	ldm	r0!, {r2, r3, r4, r5, r6, r7, r8, r9}
    8054:	e8a103fc 	stmia	r1!, {r2, r3, r4, r5, r6, r7, r8, r9}
    8058:	e8b003fc 	ldm	r0!, {r2, r3, r4, r5, r6, r7, r8, r9}
    805c:	e8a103fc 	stmia	r1!, {r2, r3, r4, r5, r6, r7, r8, r9}
    8060:	e3a000d2 	mov	r0, #210	; 0xd2
    8064:	e121f000 	msr	CPSR_c, r0
    8068:	e3a0d6bf 	mov	sp, #200278016	; 0xbf00000
    806c:	e3a000d1 	mov	r0, #209	; 0xd1
    8070:	e121f000 	msr	CPSR_c, r0
    8074:	e3a0d6be 	mov	sp, #199229440	; 0xbe00000
    8078:	e3a000d3 	mov	r0, #211	; 0xd3
    807c:	e121f000 	msr	CPSR_c, r0
    8080:	e3a0d6bd 	mov	sp, #198180864	; 0xbd00000
    8084:	e3a00000 	mov	r0, #0
    8088:	ee070f17 	mcr	15, 0, r0, cr7, cr7, {0}
    808c:	ee080f17 	mcr	15, 0, r0, cr8, cr7, {0}
    8090:	ee110f10 	mrc	15, 0, r0, cr1, cr0, {0}
    8094:	e3a01003 	mov	r1, #3
    8098:	e1800581 	orr	r0, r0, r1, lsl #11
    809c:	ee010f10 	mcr	15, 0, r0, cr1, cr0, {0}
    80a0:	e51f3068 	ldr	r3, [pc, #-104]	; 8040 <bss_start>
    80a4:	e51f2068 	ldr	r2, [pc, #-104]	; 8044 <bss_end>
    80a8:	e3a00000 	mov	r0, #0

000080ac <bssZeroLoop>:
    80ac:	e1520003 	cmp	r2, r3
    80b0:	0a000002 	beq	80c0 <bssZeroDone>
    80b4:	e5830000 	str	r0, [r3]
    80b8:	e2833001 	add	r3, r3, #1
    80bc:	eafffffa 	b	80ac <bssZeroLoop>

000080c0 <bssZeroDone>:
    80c0:	eb003b37 	bl	16da4 <entry_point>

000080c4 <fiq_handler_>:
    80c4:	e92d40ff 	push	{r0, r1, r2, r3, r4, r5, r6, r7, lr}
    80c8:	eb003614 	bl	15920 <c_firq_handler>
    80cc:	e8bd40ff 	pop	{r0, r1, r2, r3, r4, r5, r6, r7, lr}
    80d0:	e25ef004 	subs	pc, lr, #4

000080d4 <hang>:
    80d4:	eafffffe 	b	80d4 <hang>

000080d8 <lowlev_enable_irq>:
    80d8:	e10f0000 	mrs	r0, CPSR
    80dc:	e3c00080 	bic	r0, r0, #128	; 0x80
    80e0:	e121f000 	msr	CPSR_c, r0
    80e4:	e12fff1e 	bx	lr

000080e8 <lowlev_disable_irq>:
    80e8:	f10c0080 	cpsid	i
    80ec:	e1a0f00e 	mov	pc, lr

000080f0 <lowlev_enable_fiq>:
    80f0:	e10f0000 	mrs	r0, CPSR
    80f4:	e3c00040 	bic	r0, r0, #64	; 0x40
    80f8:	e121f000 	msr	CPSR_c, r0
    80fc:	e12fff1e 	bx	lr

00008100 <lowlev_disable_fiq>:
    8100:	f10c0040 	cpsid	f
    8104:	e1a0f00e 	mov	pc, lr

00008108 <lowlev_cycleDelay>:
    8108:	e52d1004 	push	{r1}		; (str r1, [sp, #-4]!)
    810c:	e1a000c0 	asr	r0, r0, #1

00008110 <bloop>:
    8110:	e2500001 	subs	r0, r0, #1
    8114:	1afffffd 	bne	8110 <bloop>
    8118:	e49d1004 	pop	{r1}		; (ldr r1, [sp], #4)
    811c:	e12fff1e 	bx	lr

00008120 <membarrier>:
    8120:	e52d3004 	push	{r3}		; (str r3, [sp, #-4]!)
    8124:	e3a03000 	mov	r3, #0
    8128:	ee073f16 	mcr	15, 0, r3, cr7, cr6, {0}
    812c:	ee073f1a 	mcr	15, 0, r3, cr7, cr10, {0}
    8130:	ee073f1e 	mcr	15, 0, r3, cr7, cr14, {0}
    8134:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
    8138:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
    813c:	e12fff1e 	bx	lr

00008140 <disable_mmu_and_cache>:
    8140:	ee110f10 	mrc	15, 0, r0, cr1, cr0, {0}
    8144:	e3c00a01 	bic	r0, r0, #4096	; 0x1000
    8148:	e3c00004 	bic	r0, r0, #4
    814c:	ee010f10 	mcr	15, 0, r0, cr1, cr0, {0}
    8150:	e92d040f 	push	{r0, r1, r2, r3, sl}
    8154:	e3a03000 	mov	r3, #0
    8158:	ee073f16 	mcr	15, 0, r3, cr7, cr6, {0}
    815c:	ee073f1a 	mcr	15, 0, r3, cr7, cr10, {0}
    8160:	ee073f1e 	mcr	15, 0, r3, cr7, cr14, {0}
    8164:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
    8168:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
    816c:	ee113f10 	mrc	15, 0, r3, cr1, cr0, {0}
    8170:	e3a00005 	mov	r0, #5
    8174:	e1c33000 	bic	r3, r3, r0
    8178:	e3a00003 	mov	r0, #3
    817c:	e1c33580 	bic	r3, r3, r0, lsl #11
    8180:	ee013f10 	mcr	15, 0, r3, cr1, cr0, {0}
    8184:	e8bd040f 	pop	{r0, r1, r2, r3, sl}
    8188:	e12fff1e 	bx	lr

0000818c <blinkCE0>:
    818c:	e92d040f 	push	{r0, r1, r2, r3, sl}
    8190:	e59f00ac 	ldr	r0, [pc, #172]	; 8244 <lowlev_store_abs8+0x8>
    8194:	e3a01401 	mov	r1, #16777216	; 0x1000000
    8198:	e5801000 	str	r1, [r0]
    819c:	e3a01c01 	mov	r1, #256	; 0x100
    81a0:	e3a02c01 	mov	r2, #256	; 0x100
    81a4:	e580101c 	str	r1, [r0, #28]
    81a8:	e3a0a000 	mov	sl, #0

000081ac <delay>:
    81ac:	e28aa001 	add	sl, sl, #1
    81b0:	e15a0002 	cmp	sl, r2
    81b4:	1afffffc 	bne	81ac <delay>
    81b8:	e5801028 	str	r1, [r0, #40]	; 0x28
    81bc:	e3a0a000 	mov	sl, #0

000081c0 <delay2>:
    81c0:	e28aa001 	add	sl, sl, #1
    81c4:	e15a0002 	cmp	sl, r2
    81c8:	1afffffc 	bne	81c0 <delay2>
    81cc:	e8bd040f 	pop	{r0, r1, r2, r3, sl}
    81d0:	e12fff1e 	bx	lr

000081d4 <blinkLEDForever>:
    81d4:	e59f0068 	ldr	r0, [pc, #104]	; 8244 <lowlev_store_abs8+0x8>
    81d8:	e3a0260f 	mov	r2, #15728640	; 0xf00000
    81dc:	e3a01602 	mov	r1, #2097152	; 0x200000
    81e0:	e5801010 	str	r1, [r0, #16]
    81e4:	e3a01902 	mov	r1, #32768	; 0x8000
    81e8:	e5801020 	str	r1, [r0, #32]

000081ec <loopBlink>:
    81ec:	e5801020 	str	r1, [r0, #32]
    81f0:	e3a0a000 	mov	sl, #0

000081f4 <delay1a>:
    81f4:	e28aa001 	add	sl, sl, #1
    81f8:	e15a0002 	cmp	sl, r2
    81fc:	1afffffc 	bne	81f4 <delay1a>
    8200:	e580102c 	str	r1, [r0, #44]	; 0x2c
    8204:	e3a0a000 	mov	sl, #0

00008208 <delay2a>:
    8208:	e28aa001 	add	sl, sl, #1
    820c:	e15a0002 	cmp	sl, r2
    8210:	1afffffc 	bne	8208 <delay2a>
    8214:	eafffff4 	b	81ec <loopBlink>

00008218 <lowlev_blockCopyExecRelocatable>:
    8218:	e52d3004 	push	{r3}		; (str r3, [sp, #-4]!)

0000821c <blockCopyExecRelocatableLoop>:
    821c:	e4d13001 	ldrb	r3, [r1], #1
    8220:	e4c03001 	strb	r3, [r0], #1
    8224:	e2522001 	subs	r2, r2, #1
    8228:	aafffffb 	bge	821c <blockCopyExecRelocatableLoop>
    822c:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
    8230:	e12fff10 	bx	r0

00008234 <lowlev_blockCopyExecRelocatableLen>:
    8234:	0000001c 	.word	0x0000001c

00008238 <lowlev_goto>:
    8238:	e12fff10 	bx	r0

0000823c <lowlev_store_abs8>:
    823c:	e5c01000 	strb	r1, [r0]
    8240:	e12fff1e 	bx	lr
    8244:	20200000 	.word	0x20200000

00008248 <dma_init>:
    8248:	e3a02000 	mov	r2, #0
    824c:	e59f3004 	ldr	r3, [pc, #4]	; 8258 <dma_init+0x10>
    8250:	e5832000 	str	r2, [r3]
    8254:	e12fff1e 	bx	lr
    8258:	00080b00 	.word	0x00080b00

0000825c <dma_enqueue_operation>:
    825c:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    8260:	e59f5058 	ldr	r5, [pc, #88]	; 82c0 <dma_enqueue_operation+0x64>
    8264:	e595e000 	ldr	lr, [r5]
    8268:	e35e0010 	cmp	lr, #16
    826c:	0a000011 	beq	82b8 <dma_enqueue_operation+0x5c>
    8270:	e3a04000 	mov	r4, #0
    8274:	e59f6048 	ldr	r6, [pc, #72]	; 82c4 <dma_enqueue_operation+0x68>
    8278:	e15e0004 	cmp	lr, r4
    827c:	e086c28e 	add	ip, r6, lr, lsl #5
    8280:	e3ccc20f 	bic	ip, ip, #-268435456	; 0xf0000000
    8284:	e38cc101 	orr	ip, ip, #1073741824	; 0x40000000
    8288:	e59d7014 	ldr	r7, [sp, #20]
    828c:	e1cc00f4 	strd	r0, [ip, #4]
    8290:	1086628e 	addne	r6, r6, lr, lsl #5
    8294:	e28e0001 	add	r0, lr, #1
    8298:	e58c7000 	str	r7, [ip]
    829c:	e1cc20fc 	strd	r2, [ip, #12]
    82a0:	e58c4014 	str	r4, [ip, #20]
    82a4:	e58c4018 	str	r4, [ip, #24]
    82a8:	e58c401c 	str	r4, [ip, #28]
    82ac:	e5850000 	str	r0, [r5]
    82b0:	1506c00c 	strne	ip, [r6, #-12]
    82b4:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
    82b8:	e3a00000 	mov	r0, #0
    82bc:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
    82c0:	00080b00 	.word	0x00080b00
    82c4:	00080c00 	.word	0x00080c00

000082c8 <dma_execute_queue>:
    82c8:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    82cc:	e3a0c007 	mov	ip, #7
    82d0:	e3a0e001 	mov	lr, #1
    82d4:	e3a00000 	mov	r0, #0
    82d8:	e59f3020 	ldr	r3, [pc, #32]	; 8300 <dma_execute_queue+0x38>
    82dc:	e59f2020 	ldr	r2, [pc, #32]	; 8304 <dma_execute_queue+0x3c>
    82e0:	e3c3320f 	bic	r3, r3, #-268435456	; 0xf0000000
    82e4:	e59f101c 	ldr	r1, [pc, #28]	; 8308 <dma_execute_queue+0x40>
    82e8:	e3833101 	orr	r3, r3, #1073741824	; 0x40000000
    82ec:	e582eff0 	str	lr, [r2, #4080]	; 0xff0
    82f0:	e5823004 	str	r3, [r2, #4]
    82f4:	e582c000 	str	ip, [r2]
    82f8:	e5810000 	str	r0, [r1]
    82fc:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
    8300:	00080c00 	.word	0x00080c00
    8304:	20007000 	.word	0x20007000
    8308:	00080b00 	.word	0x00080b00

0000830c <dma_running>:
    830c:	e59f3008 	ldr	r3, [pc, #8]	; 831c <dma_running+0x10>
    8310:	e5930000 	ldr	r0, [r3]
    8314:	e2000001 	and	r0, r0, #1
    8318:	e12fff1e 	bx	lr
    831c:	20007000 	.word	0x20007000

00008320 <dma_memcpy_32>:
    8320:	e92d4070 	push	{r4, r5, r6, lr}
    8324:	e59f5078 	ldr	r5, [pc, #120]	; 83a4 <dma_memcpy_32+0x84>
    8328:	e595e000 	ldr	lr, [r5]
    832c:	e35e0010 	cmp	lr, #16
    8330:	059fc070 	ldreq	ip, [pc, #112]	; 83a8 <dma_memcpy_32+0x88>
    8334:	0a00000f 	beq	8378 <dma_memcpy_32+0x58>
    8338:	e3a04000 	mov	r4, #0
    833c:	e3a06e11 	mov	r6, #272	; 0x110
    8340:	e59fc060 	ldr	ip, [pc, #96]	; 83a8 <dma_memcpy_32+0x88>
    8344:	e15e0004 	cmp	lr, r4
    8348:	e08c328e 	add	r3, ip, lr, lsl #5
    834c:	e3c3320f 	bic	r3, r3, #-268435456	; 0xf0000000
    8350:	e3833101 	orr	r3, r3, #1073741824	; 0x40000000
    8354:	108ce28e 	addne	lr, ip, lr, lsl #5
    8358:	e1c300f4 	strd	r0, [r3, #4]
    835c:	e583200c 	str	r2, [r3, #12]
    8360:	e5836000 	str	r6, [r3]
    8364:	e5834010 	str	r4, [r3, #16]
    8368:	e5834014 	str	r4, [r3, #20]
    836c:	e5834018 	str	r4, [r3, #24]
    8370:	e583401c 	str	r4, [r3, #28]
    8374:	150e300c 	strne	r3, [lr, #-12]
    8378:	e3a00001 	mov	r0, #1
    837c:	e3a01007 	mov	r1, #7
    8380:	e3a02000 	mov	r2, #0
    8384:	e59f3020 	ldr	r3, [pc, #32]	; 83ac <dma_memcpy_32+0x8c>
    8388:	e3ccc20f 	bic	ip, ip, #-268435456	; 0xf0000000
    838c:	e38cc101 	orr	ip, ip, #1073741824	; 0x40000000
    8390:	e5830ff0 	str	r0, [r3, #4080]	; 0xff0
    8394:	e583c004 	str	ip, [r3, #4]
    8398:	e5831000 	str	r1, [r3]
    839c:	e5852000 	str	r2, [r5]
    83a0:	e8bd8070 	pop	{r4, r5, r6, pc}
    83a4:	00080b00 	.word	0x00080b00
    83a8:	00080c00 	.word	0x00080c00
    83ac:	20007000 	.word	0x20007000

000083b0 <LogSetOutFn>:
    83b0:	e59f3004 	ldr	r3, [pc, #4]	; 83bc <LogSetOutFn+0xc>
    83b4:	e5830000 	str	r0, [r3]
    83b8:	e12fff1e 	bx	lr
    83bc:	000428ec 	.word	0x000428ec

000083c0 <ee_strnlen>:
    83c0:	e5d03000 	ldrb	r3, [r0]
    83c4:	e1a02000 	mov	r2, r0
    83c8:	e3530000 	cmp	r3, #0
    83cc:	0a00000a 	beq	83fc <ee_strnlen+0x3c>
    83d0:	e3510000 	cmp	r1, #0
    83d4:	0a00000a 	beq	8404 <ee_strnlen+0x44>
    83d8:	e0801001 	add	r1, r0, r1
    83dc:	ea000001 	b	83e8 <ee_strnlen+0x28>
    83e0:	e1500001 	cmp	r0, r1
    83e4:	0a000002 	beq	83f4 <ee_strnlen+0x34>
    83e8:	e5f03001 	ldrb	r3, [r0, #1]!
    83ec:	e3530000 	cmp	r3, #0
    83f0:	1afffffa 	bne	83e0 <ee_strnlen+0x20>
    83f4:	e0400002 	sub	r0, r0, r2
    83f8:	e12fff1e 	bx	lr
    83fc:	e1a00003 	mov	r0, r3
    8400:	e12fff1e 	bx	lr
    8404:	e1a00001 	mov	r0, r1
    8408:	e12fff1e 	bx	lr

0000840c <ee_skip_atoi>:
    840c:	e5903000 	ldr	r3, [r0]
    8410:	e5d32000 	ldrb	r2, [r3]
    8414:	e2422030 	sub	r2, r2, #48	; 0x30
    8418:	e3520009 	cmp	r2, #9
    841c:	e3a02000 	mov	r2, #0
    8420:	8a000009 	bhi	844c <ee_skip_atoi+0x40>
    8424:	e2833001 	add	r3, r3, #1
    8428:	e5803000 	str	r3, [r0]
    842c:	e5d3c000 	ldrb	ip, [r3]
    8430:	e5531001 	ldrb	r1, [r3, #-1]
    8434:	e0822102 	add	r2, r2, r2, lsl #2
    8438:	e24cc030 	sub	ip, ip, #48	; 0x30
    843c:	e0812082 	add	r2, r1, r2, lsl #1
    8440:	e35c0009 	cmp	ip, #9
    8444:	e2422030 	sub	r2, r2, #48	; 0x30
    8448:	9afffff5 	bls	8424 <ee_skip_atoi+0x18>
    844c:	e1a00002 	mov	r0, r2
    8450:	e12fff1e 	bx	lr

00008454 <ee_number>:
    8454:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8458:	e24dd05c 	sub	sp, sp, #92	; 0x5c
    845c:	e59d6084 	ldr	r6, [sp, #132]	; 0x84
    8460:	e59fb2b0 	ldr	fp, [pc, #688]	; 8718 <ee_number+0x2c4>
    8464:	e3160040 	tst	r6, #64	; 0x40
    8468:	e24bc02c 	sub	ip, fp, #44	; 0x2c
    846c:	01a0b00c 	moveq	fp, ip
    8470:	e58d3000 	str	r3, [sp]
    8474:	e3160010 	tst	r6, #16
    8478:	e2423002 	sub	r3, r2, #2
    847c:	13c66001 	bicne	r6, r6, #1
    8480:	e3530022 	cmp	r3, #34	; 0x22
    8484:	e1a05000 	mov	r5, r0
    8488:	e1a0a002 	mov	sl, r2
    848c:	e1a00001 	mov	r0, r1
    8490:	8a00009e 	bhi	8710 <ee_number+0x2bc>
    8494:	e3160001 	tst	r6, #1
    8498:	03a03020 	moveq	r3, #32
    849c:	13a03030 	movne	r3, #48	; 0x30
    84a0:	e58d300c 	str	r3, [sp, #12]
    84a4:	e2163002 	ands	r3, r6, #2
    84a8:	0a00000b 	beq	84dc <ee_number+0x88>
    84ac:	e3510000 	cmp	r1, #0
    84b0:	ba000089 	blt	86dc <ee_number+0x288>
    84b4:	e3160004 	tst	r6, #4
    84b8:	1a00007a 	bne	86a8 <ee_number+0x254>
    84bc:	e2163008 	ands	r3, r6, #8
    84c0:	0a000005 	beq	84dc <ee_number+0x88>
    84c4:	e59d3000 	ldr	r3, [sp]
    84c8:	e2433001 	sub	r3, r3, #1
    84cc:	e58d3000 	str	r3, [sp]
    84d0:	e3a03020 	mov	r3, #32
    84d4:	e58d3008 	str	r3, [sp, #8]
    84d8:	ea000000 	b	84e0 <ee_number+0x8c>
    84dc:	e58d3008 	str	r3, [sp, #8]
    84e0:	e2163020 	ands	r3, r6, #32
    84e4:	e58d3004 	str	r3, [sp, #4]
    84e8:	0a000005 	beq	8504 <ee_number+0xb0>
    84ec:	e35a0010 	cmp	sl, #16
    84f0:	0a000080 	beq	86f8 <ee_number+0x2a4>
    84f4:	e35a0008 	cmp	sl, #8
    84f8:	059d3000 	ldreq	r3, [sp]
    84fc:	02433001 	subeq	r3, r3, #1
    8500:	058d3000 	streq	r3, [sp]
    8504:	e3500000 	cmp	r0, #0
    8508:	0a000060 	beq	8690 <ee_number+0x23c>
    850c:	e28d7013 	add	r7, sp, #19
    8510:	e3a04000 	mov	r4, #0
    8514:	ea000000 	b	851c <ee_number+0xc8>
    8518:	e1a04008 	mov	r4, r8
    851c:	e1a0100a 	mov	r1, sl
    8520:	eb009536 	bl	2da00 <__aeabi_uidivmod>
    8524:	e7db3001 	ldrb	r3, [fp, r1]
    8528:	e2848001 	add	r8, r4, #1
    852c:	e3500000 	cmp	r0, #0
    8530:	e5e73001 	strb	r3, [r7, #1]!
    8534:	e1a09008 	mov	r9, r8
    8538:	1afffff6 	bne	8518 <ee_number+0xc4>
    853c:	e59d3080 	ldr	r3, [sp, #128]	; 0x80
    8540:	e1590003 	cmp	r9, r3
    8544:	b1a0b003 	movlt	fp, r3
    8548:	a1a0b009 	movge	fp, r9
    854c:	e59d3000 	ldr	r3, [sp]
    8550:	e3160011 	tst	r6, #17
    8554:	e043700b 	sub	r7, r3, fp
    8558:	e2473001 	sub	r3, r7, #1
    855c:	1a00000b 	bne	8590 <ee_number+0x13c>
    8560:	e3570000 	cmp	r7, #0
    8564:	d2472002 	suble	r2, r7, #2
    8568:	d1a07003 	movle	r7, r3
    856c:	d1a03002 	movle	r3, r2
    8570:	da000006 	ble	8590 <ee_number+0x13c>
    8574:	e1a00005 	mov	r0, r5
    8578:	e1a02007 	mov	r2, r7
    857c:	e3a01020 	mov	r1, #32
    8580:	e0855007 	add	r5, r5, r7
    8584:	eb008e5e 	bl	2bf04 <memset>
    8588:	e3e07000 	mvn	r7, #0
    858c:	e3e03001 	mvn	r3, #1
    8590:	e59d2008 	ldr	r2, [sp, #8]
    8594:	e3520000 	cmp	r2, #0
    8598:	15c52000 	strbne	r2, [r5]
    859c:	e59d2004 	ldr	r2, [sp, #4]
    85a0:	12855001 	addne	r5, r5, #1
    85a4:	e3520000 	cmp	r2, #0
    85a8:	0a000006 	beq	85c8 <ee_number+0x174>
    85ac:	e35a0008 	cmp	sl, #8
    85b0:	03a02030 	moveq	r2, #48	; 0x30
    85b4:	05c52000 	strbeq	r2, [r5]
    85b8:	02855001 	addeq	r5, r5, #1
    85bc:	0a000001 	beq	85c8 <ee_number+0x174>
    85c0:	e35a0010 	cmp	sl, #16
    85c4:	0a00003d 	beq	86c0 <ee_number+0x26c>
    85c8:	e3160010 	tst	r6, #16
    85cc:	1a00000f 	bne	8610 <ee_number+0x1bc>
    85d0:	e3570000 	cmp	r7, #0
    85d4:	d1a07003 	movle	r7, r3
    85d8:	d2433001 	suble	r3, r3, #1
    85dc:	da00000b 	ble	8610 <ee_number+0x1bc>
    85e0:	e1c37fc3 	bic	r7, r3, r3, asr #31
    85e4:	e2876001 	add	r6, r7, #1
    85e8:	e1a00005 	mov	r0, r5
    85ec:	e59d100c 	ldr	r1, [sp, #12]
    85f0:	e1a02006 	mov	r2, r6
    85f4:	e58d3000 	str	r3, [sp]
    85f8:	eb008e41 	bl	2bf04 <memset>
    85fc:	e59d3000 	ldr	r3, [sp]
    8600:	e0855006 	add	r5, r5, r6
    8604:	e2433001 	sub	r3, r3, #1
    8608:	e0437007 	sub	r7, r3, r7
    860c:	e2473001 	sub	r3, r7, #1
    8610:	e159000b 	cmp	r9, fp
    8614:	aa000007 	bge	8638 <ee_number+0x1e4>
    8618:	e04b9009 	sub	r9, fp, r9
    861c:	e1a00005 	mov	r0, r5
    8620:	e1a02009 	mov	r2, r9
    8624:	e3a01030 	mov	r1, #48	; 0x30
    8628:	e58d3000 	str	r3, [sp]
    862c:	eb008e34 	bl	2bf04 <memset>
    8630:	e59d3000 	ldr	r3, [sp]
    8634:	e0855009 	add	r5, r5, r9
    8638:	e28dc014 	add	ip, sp, #20
    863c:	e08c4004 	add	r4, ip, r4
    8640:	e2452001 	sub	r2, r5, #1
    8644:	e26cc001 	rsb	ip, ip, #1
    8648:	e4541001 	ldrb	r1, [r4], #-1
    864c:	e08c0004 	add	r0, ip, r4
    8650:	e3500000 	cmp	r0, #0
    8654:	e5e21001 	strb	r1, [r2, #1]!
    8658:	cafffffa 	bgt	8648 <ee_number+0x1f4>
    865c:	e3570000 	cmp	r7, #0
    8660:	e0855008 	add	r5, r5, r8
    8664:	da000006 	ble	8684 <ee_number+0x230>
    8668:	e1c37fc3 	bic	r7, r3, r3, asr #31
    866c:	e2877001 	add	r7, r7, #1
    8670:	e1a00005 	mov	r0, r5
    8674:	e1a02007 	mov	r2, r7
    8678:	e3a01020 	mov	r1, #32
    867c:	eb008e20 	bl	2bf04 <memset>
    8680:	e0855007 	add	r5, r5, r7
    8684:	e1a00005 	mov	r0, r5
    8688:	e28dd05c 	add	sp, sp, #92	; 0x5c
    868c:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8690:	e3a03030 	mov	r3, #48	; 0x30
    8694:	e3a09001 	mov	r9, #1
    8698:	e1a04000 	mov	r4, r0
    869c:	e5cd3014 	strb	r3, [sp, #20]
    86a0:	e1a08009 	mov	r8, r9
    86a4:	eaffffa4 	b	853c <ee_number+0xe8>
    86a8:	e59d3000 	ldr	r3, [sp]
    86ac:	e2433001 	sub	r3, r3, #1
    86b0:	e58d3000 	str	r3, [sp]
    86b4:	e3a0302b 	mov	r3, #43	; 0x2b
    86b8:	e58d3008 	str	r3, [sp, #8]
    86bc:	eaffff87 	b	84e0 <ee_number+0x8c>
    86c0:	e1a02005 	mov	r2, r5
    86c4:	e3a00030 	mov	r0, #48	; 0x30
    86c8:	e3a01078 	mov	r1, #120	; 0x78
    86cc:	e4c20002 	strb	r0, [r2], #2
    86d0:	e5c51001 	strb	r1, [r5, #1]
    86d4:	e1a05002 	mov	r5, r2
    86d8:	eaffffba 	b	85c8 <ee_number+0x174>
    86dc:	e59d3000 	ldr	r3, [sp]
    86e0:	e2610000 	rsb	r0, r1, #0
    86e4:	e2433001 	sub	r3, r3, #1
    86e8:	e58d3000 	str	r3, [sp]
    86ec:	e3a0302d 	mov	r3, #45	; 0x2d
    86f0:	e58d3008 	str	r3, [sp, #8]
    86f4:	eaffff79 	b	84e0 <ee_number+0x8c>
    86f8:	e59d3000 	ldr	r3, [sp]
    86fc:	e3500000 	cmp	r0, #0
    8700:	e2433002 	sub	r3, r3, #2
    8704:	e58d3000 	str	r3, [sp]
    8708:	1affff7f 	bne	850c <ee_number+0xb8>
    870c:	eaffffdf 	b	8690 <ee_number+0x23c>
    8710:	e3a05000 	mov	r5, #0
    8714:	eaffffda 	b	8684 <ee_number+0x230>
    8718:	0002e09c 	.word	0x0002e09c

0000871c <eaddr>:
    871c:	e59fc32c 	ldr	ip, [pc, #812]	; 8a50 <eaddr+0x334>
    8720:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
    8724:	e3130040 	tst	r3, #64	; 0x40
    8728:	e24ce02c 	sub	lr, ip, #44	; 0x2c
    872c:	01a0c00e 	moveq	ip, lr
    8730:	e3a0e03a 	mov	lr, #58	; 0x3a
    8734:	e1a05002 	mov	r5, r2
    8738:	e5d17000 	ldrb	r7, [r1]
    873c:	e5d16001 	ldrb	r6, [r1, #1]
    8740:	e5d14002 	ldrb	r4, [r1, #2]
    8744:	e5d19003 	ldrb	r9, [r1, #3]
    8748:	e5d18004 	ldrb	r8, [r1, #4]
    874c:	e5d12005 	ldrb	r2, [r1, #5]
    8750:	e7dc1227 	ldrb	r1, [ip, r7, lsr #4]
    8754:	e207700f 	and	r7, r7, #15
    8758:	e24dd01c 	sub	sp, sp, #28
    875c:	e3130010 	tst	r3, #16
    8760:	e7dc3007 	ldrb	r3, [ip, r7]
    8764:	e5cd1000 	strb	r1, [sp]
    8768:	e7dc1226 	ldrb	r1, [ip, r6, lsr #4]
    876c:	e206600f 	and	r6, r6, #15
    8770:	e5cd3001 	strb	r3, [sp, #1]
    8774:	e7dc3006 	ldrb	r3, [ip, r6]
    8778:	e5cd1003 	strb	r1, [sp, #3]
    877c:	e5cd3004 	strb	r3, [sp, #4]
    8780:	e7dc3224 	ldrb	r3, [ip, r4, lsr #4]
    8784:	e204400f 	and	r4, r4, #15
    8788:	e7dc1004 	ldrb	r1, [ip, r4]
    878c:	e5cd3006 	strb	r3, [sp, #6]
    8790:	e209300f 	and	r3, r9, #15
    8794:	e7dc3003 	ldrb	r3, [ip, r3]
    8798:	e5cd1007 	strb	r1, [sp, #7]
    879c:	e208100f 	and	r1, r8, #15
    87a0:	e7dc4229 	ldrb	r4, [ip, r9, lsr #4]
    87a4:	e5cde002 	strb	lr, [sp, #2]
    87a8:	e5cde005 	strb	lr, [sp, #5]
    87ac:	e5cde008 	strb	lr, [sp, #8]
    87b0:	e5cde00b 	strb	lr, [sp, #11]
    87b4:	e5cde00e 	strb	lr, [sp, #14]
    87b8:	e7dc1001 	ldrb	r1, [ip, r1]
    87bc:	e7dce228 	ldrb	lr, [ip, r8, lsr #4]
    87c0:	e5cd300a 	strb	r3, [sp, #10]
    87c4:	e7dc3222 	ldrb	r3, [ip, r2, lsr #4]
    87c8:	e202200f 	and	r2, r2, #15
    87cc:	e5cd4009 	strb	r4, [sp, #9]
    87d0:	e5cde00c 	strb	lr, [sp, #12]
    87d4:	e5cd100d 	strb	r1, [sp, #13]
    87d8:	e5cd300f 	strb	r3, [sp, #15]
    87dc:	e7dc3002 	ldrb	r3, [ip, r2]
    87e0:	e1a04000 	mov	r4, r0
    87e4:	e245c001 	sub	ip, r5, #1
    87e8:	e5cd3010 	strb	r3, [sp, #16]
    87ec:	1a00000b 	bne	8820 <eaddr+0x104>
    87f0:	e3550011 	cmp	r5, #17
    87f4:	d2453002 	suble	r3, r5, #2
    87f8:	d1a0500c 	movle	r5, ip
    87fc:	d1a0c003 	movle	ip, r3
    8800:	da000006 	ble	8820 <eaddr+0x104>
    8804:	e2456011 	sub	r6, r5, #17
    8808:	e1a02006 	mov	r2, r6
    880c:	e3a01020 	mov	r1, #32
    8810:	eb008dbb 	bl	2bf04 <memset>
    8814:	e3a05010 	mov	r5, #16
    8818:	e3a0c00f 	mov	ip, #15
    881c:	e0844006 	add	r4, r4, r6
    8820:	e1a0e00d 	mov	lr, sp
    8824:	e8be000f 	ldm	lr!, {r0, r1, r2, r3}
    8828:	e5dee000 	ldrb	lr, [lr]
    882c:	e3550011 	cmp	r5, #17
    8830:	e5840000 	str	r0, [r4]
    8834:	e5c4e010 	strb	lr, [r4, #16]
    8838:	e5841004 	str	r1, [r4, #4]
    883c:	e5842008 	str	r2, [r4, #8]
    8840:	e584300c 	str	r3, [r4, #12]
    8844:	e2840011 	add	r0, r4, #17
    8848:	da000076 	ble	8a28 <eaddr+0x30c>
    884c:	e2603000 	rsb	r3, r0, #0
    8850:	e2033007 	and	r3, r3, #7
    8854:	e35c0010 	cmp	ip, #16
    8858:	e2832007 	add	r2, r3, #7
    885c:	c24c1011 	subgt	r1, ip, #17
    8860:	d3a01000 	movle	r1, #0
    8864:	c24c7010 	subgt	r7, ip, #16
    8868:	d3a07001 	movle	r7, #1
    886c:	e352000c 	cmp	r2, #12
    8870:	33a0200c 	movcc	r2, #12
    8874:	e1510002 	cmp	r1, r2
    8878:	3a00006f 	bcc	8a3c <eaddr+0x320>
    887c:	e3530000 	cmp	r3, #0
    8880:	0a00006a 	beq	8a30 <eaddr+0x314>
    8884:	e3a02020 	mov	r2, #32
    8888:	e3530001 	cmp	r3, #1
    888c:	e5c42011 	strb	r2, [r4, #17]
    8890:	e284e012 	add	lr, r4, #18
    8894:	e24c6001 	sub	r6, ip, #1
    8898:	0a00001a 	beq	8908 <eaddr+0x1ec>
    889c:	e3530002 	cmp	r3, #2
    88a0:	e5c42012 	strb	r2, [r4, #18]
    88a4:	e284e013 	add	lr, r4, #19
    88a8:	e24c6002 	sub	r6, ip, #2
    88ac:	0a000015 	beq	8908 <eaddr+0x1ec>
    88b0:	e3530003 	cmp	r3, #3
    88b4:	e5c42013 	strb	r2, [r4, #19]
    88b8:	e284e014 	add	lr, r4, #20
    88bc:	e24c6003 	sub	r6, ip, #3
    88c0:	0a000010 	beq	8908 <eaddr+0x1ec>
    88c4:	e3530004 	cmp	r3, #4
    88c8:	e5c42014 	strb	r2, [r4, #20]
    88cc:	e284e015 	add	lr, r4, #21
    88d0:	e24c6004 	sub	r6, ip, #4
    88d4:	0a00000b 	beq	8908 <eaddr+0x1ec>
    88d8:	e3530005 	cmp	r3, #5
    88dc:	e5c42015 	strb	r2, [r4, #21]
    88e0:	e284e016 	add	lr, r4, #22
    88e4:	e24c6005 	sub	r6, ip, #5
    88e8:	0a000006 	beq	8908 <eaddr+0x1ec>
    88ec:	e3530007 	cmp	r3, #7
    88f0:	e5c42016 	strb	r2, [r4, #22]
    88f4:	e284e017 	add	lr, r4, #23
    88f8:	e24c6006 	sub	r6, ip, #6
    88fc:	05c42017 	strbeq	r2, [r4, #23]
    8900:	0284e018 	addeq	lr, r4, #24
    8904:	024c6007 	subeq	r6, ip, #7
    8908:	e3a01000 	mov	r1, #0
    890c:	e28f5f4d 	add	r5, pc, #308	; 0x134
    8910:	e1c540d0 	ldrd	r4, [r5]
    8914:	e0477003 	sub	r7, r7, r3
    8918:	e1a0c1a7 	lsr	ip, r7, #3
    891c:	e0803003 	add	r3, r0, r3
    8920:	e28e2001 	add	r2, lr, #1
    8924:	e2811001 	add	r1, r1, #1
    8928:	e151000c 	cmp	r1, ip
    892c:	e2820007 	add	r0, r2, #7
    8930:	e0c340f8 	strd	r4, [r3], #8
    8934:	e2822008 	add	r2, r2, #8
    8938:	3afffff9 	bcc	8924 <eaddr+0x208>
    893c:	e3c7c007 	bic	ip, r7, #7
    8940:	e157000c 	cmp	r7, ip
    8944:	e08e300c 	add	r3, lr, ip
    8948:	e046c00c 	sub	ip, r6, ip
    894c:	0a000035 	beq	8a28 <eaddr+0x30c>
    8950:	e3a02020 	mov	r2, #32
    8954:	e35c0011 	cmp	ip, #17
    8958:	e5c32000 	strb	r2, [r3]
    895c:	e2830001 	add	r0, r3, #1
    8960:	da000030 	ble	8a28 <eaddr+0x30c>
    8964:	e35c0012 	cmp	ip, #18
    8968:	e5c32001 	strb	r2, [r3, #1]
    896c:	e2830002 	add	r0, r3, #2
    8970:	da00002c 	ble	8a28 <eaddr+0x30c>
    8974:	e35c0013 	cmp	ip, #19
    8978:	e5c32002 	strb	r2, [r3, #2]
    897c:	e2830003 	add	r0, r3, #3
    8980:	da000028 	ble	8a28 <eaddr+0x30c>
    8984:	e35c0014 	cmp	ip, #20
    8988:	e5c32003 	strb	r2, [r3, #3]
    898c:	e2830004 	add	r0, r3, #4
    8990:	da000024 	ble	8a28 <eaddr+0x30c>
    8994:	e35c0015 	cmp	ip, #21
    8998:	e5c32004 	strb	r2, [r3, #4]
    899c:	e2830005 	add	r0, r3, #5
    89a0:	da000020 	ble	8a28 <eaddr+0x30c>
    89a4:	e35c0016 	cmp	ip, #22
    89a8:	e5c32005 	strb	r2, [r3, #5]
    89ac:	e2830006 	add	r0, r3, #6
    89b0:	da00001c 	ble	8a28 <eaddr+0x30c>
    89b4:	e35c0017 	cmp	ip, #23
    89b8:	e5c32006 	strb	r2, [r3, #6]
    89bc:	e2830007 	add	r0, r3, #7
    89c0:	da000018 	ble	8a28 <eaddr+0x30c>
    89c4:	e35c0018 	cmp	ip, #24
    89c8:	e5c32007 	strb	r2, [r3, #7]
    89cc:	e2830008 	add	r0, r3, #8
    89d0:	da000014 	ble	8a28 <eaddr+0x30c>
    89d4:	e35c0019 	cmp	ip, #25
    89d8:	e5c32008 	strb	r2, [r3, #8]
    89dc:	e2830009 	add	r0, r3, #9
    89e0:	da000010 	ble	8a28 <eaddr+0x30c>
    89e4:	e35c001a 	cmp	ip, #26
    89e8:	e5c32009 	strb	r2, [r3, #9]
    89ec:	e283000a 	add	r0, r3, #10
    89f0:	da00000c 	ble	8a28 <eaddr+0x30c>
    89f4:	e35c001b 	cmp	ip, #27
    89f8:	e5c3200a 	strb	r2, [r3, #10]
    89fc:	e283000b 	add	r0, r3, #11
    8a00:	da000008 	ble	8a28 <eaddr+0x30c>
    8a04:	e35c001c 	cmp	ip, #28
    8a08:	e5c3200b 	strb	r2, [r3, #11]
    8a0c:	e283000c 	add	r0, r3, #12
    8a10:	da000004 	ble	8a28 <eaddr+0x30c>
    8a14:	e35c001d 	cmp	ip, #29
    8a18:	e283000d 	add	r0, r3, #13
    8a1c:	e5c3200c 	strb	r2, [r3, #12]
    8a20:	c5c3200d 	strbgt	r2, [r3, #13]
    8a24:	c283000e 	addgt	r0, r3, #14
    8a28:	e28dd01c 	add	sp, sp, #28
    8a2c:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
    8a30:	e1a0600c 	mov	r6, ip
    8a34:	e1a0e000 	mov	lr, r0
    8a38:	eaffffb2 	b	8908 <eaddr+0x1ec>
    8a3c:	e1a03000 	mov	r3, r0
    8a40:	eaffffc2 	b	8950 <eaddr+0x234>
    8a44:	e320f000 	nop	{0}
    8a48:	20202020 	.word	0x20202020
    8a4c:	20202020 	.word	0x20202020
    8a50:	0002e09c 	.word	0x0002e09c

00008a54 <iaddr>:
    8a54:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    8a58:	e5d15000 	ldrb	r5, [r1]
    8a5c:	e24dd018 	sub	sp, sp, #24
    8a60:	e3550000 	cmp	r5, #0
    8a64:	e1a04000 	mov	r4, r0
    8a68:	e1a06002 	mov	r6, r2
    8a6c:	e1a0c003 	mov	ip, r3
    8a70:	0a000018 	beq	8ad8 <iaddr+0x84>
    8a74:	e3550063 	cmp	r5, #99	; 0x63
    8a78:	da00015e 	ble	8ff8 <iaddr+0x5a4>
    8a7c:	e59f85ec 	ldr	r8, [pc, #1516]	; 9070 <iaddr+0x61c>
    8a80:	e59f25ec 	ldr	r2, [pc, #1516]	; 9074 <iaddr+0x620>
    8a84:	e0898895 	umull	r8, r9, r5, r8
    8a88:	e1a0e2a9 	lsr	lr, r9, #5
    8a8c:	e08e310e 	add	r3, lr, lr, lsl #2
    8a90:	e0833103 	add	r3, r3, r3, lsl #2
    8a94:	e0455103 	sub	r5, r5, r3, lsl #2
    8a98:	e0832295 	umull	r2, r3, r5, r2
    8a9c:	e59f05d4 	ldr	r0, [pc, #1492]	; 9078 <iaddr+0x624>
    8aa0:	e1a031a3 	lsr	r3, r3, #3
    8aa4:	e7d0200e 	ldrb	r2, [r0, lr]
    8aa8:	e083e103 	add	lr, r3, r3, lsl #2
    8aac:	e7d03003 	ldrb	r3, [r0, r3]
    8ab0:	e045508e 	sub	r5, r5, lr, lsl #1
    8ab4:	e5cd3001 	strb	r3, [sp, #1]
    8ab8:	e3a0e003 	mov	lr, #3
    8abc:	e3a03002 	mov	r3, #2
    8ac0:	e5cd2000 	strb	r2, [sp]
    8ac4:	e7d02005 	ldrb	r2, [r0, r5]
    8ac8:	e28d0018 	add	r0, sp, #24
    8acc:	e0803003 	add	r3, r0, r3
    8ad0:	e5432018 	strb	r2, [r3, #-24]	; 0xffffffe8
    8ad4:	ea000002 	b	8ae4 <iaddr+0x90>
    8ad8:	e3a03030 	mov	r3, #48	; 0x30
    8adc:	e3a0e001 	mov	lr, #1
    8ae0:	e5cd3000 	strb	r3, [sp]
    8ae4:	e3a0202e 	mov	r2, #46	; 0x2e
    8ae8:	e5d15001 	ldrb	r5, [r1, #1]
    8aec:	e28d3018 	add	r3, sp, #24
    8af0:	e083300e 	add	r3, r3, lr
    8af4:	e3550000 	cmp	r5, #0
    8af8:	e5432018 	strb	r2, [r3, #-24]	; 0xffffffe8
    8afc:	e28e3001 	add	r3, lr, #1
    8b00:	e28e2002 	add	r2, lr, #2
    8b04:	0a00001b 	beq	8b78 <iaddr+0x124>
    8b08:	e3550063 	cmp	r5, #99	; 0x63
    8b0c:	da00012a 	ble	8fbc <iaddr+0x568>
    8b10:	e59f8558 	ldr	r8, [pc, #1368]	; 9070 <iaddr+0x61c>
    8b14:	e59f055c 	ldr	r0, [pc, #1372]	; 9078 <iaddr+0x624>
    8b18:	e0898895 	umull	r8, r9, r5, r8
    8b1c:	e1a0a2a9 	lsr	sl, r9, #5
    8b20:	e08a710a 	add	r7, sl, sl, lsl #2
    8b24:	e0877107 	add	r7, r7, r7, lsl #2
    8b28:	e59f8544 	ldr	r8, [pc, #1348]	; 9074 <iaddr+0x620>
    8b2c:	e0455107 	sub	r5, r5, r7, lsl #2
    8b30:	e0898895 	umull	r8, r9, r5, r8
    8b34:	e1a071a9 	lsr	r7, r9, #3
    8b38:	e7d08007 	ldrb	r8, [r0, r7]
    8b3c:	e7d0900a 	ldrb	r9, [r0, sl]
    8b40:	e28da018 	add	sl, sp, #24
    8b44:	e08a3003 	add	r3, sl, r3
    8b48:	e08a2002 	add	r2, sl, r2
    8b4c:	e0877107 	add	r7, r7, r7, lsl #2
    8b50:	e5439018 	strb	r9, [r3, #-24]	; 0xffffffe8
    8b54:	e0455087 	sub	r5, r5, r7, lsl #1
    8b58:	e5428018 	strb	r8, [r2, #-24]	; 0xffffffe8
    8b5c:	e28e3003 	add	r3, lr, #3
    8b60:	e28e2004 	add	r2, lr, #4
    8b64:	e7d00005 	ldrb	r0, [r0, r5]
    8b68:	e28de018 	add	lr, sp, #24
    8b6c:	e08e3003 	add	r3, lr, r3
    8b70:	e5430018 	strb	r0, [r3, #-24]	; 0xffffffe8
    8b74:	ea000003 	b	8b88 <iaddr+0x134>
    8b78:	e3a00030 	mov	r0, #48	; 0x30
    8b7c:	e28de018 	add	lr, sp, #24
    8b80:	e08e3003 	add	r3, lr, r3
    8b84:	e5430018 	strb	r0, [r3, #-24]	; 0xffffffe8
    8b88:	e3a0002e 	mov	r0, #46	; 0x2e
    8b8c:	e5d15002 	ldrb	r5, [r1, #2]
    8b90:	e28d3018 	add	r3, sp, #24
    8b94:	e0833002 	add	r3, r3, r2
    8b98:	e3550000 	cmp	r5, #0
    8b9c:	e5430018 	strb	r0, [r3, #-24]	; 0xffffffe8
    8ba0:	e282e001 	add	lr, r2, #1
    8ba4:	e2823002 	add	r3, r2, #2
    8ba8:	0a00001b 	beq	8c1c <iaddr+0x1c8>
    8bac:	e3550063 	cmp	r5, #99	; 0x63
    8bb0:	da0000f2 	ble	8f80 <iaddr+0x52c>
    8bb4:	e59f84b4 	ldr	r8, [pc, #1204]	; 9070 <iaddr+0x61c>
    8bb8:	e59f04b8 	ldr	r0, [pc, #1208]	; 9078 <iaddr+0x624>
    8bbc:	e0898895 	umull	r8, r9, r5, r8
    8bc0:	e1a0a2a9 	lsr	sl, r9, #5
    8bc4:	e08a710a 	add	r7, sl, sl, lsl #2
    8bc8:	e0877107 	add	r7, r7, r7, lsl #2
    8bcc:	e59f84a0 	ldr	r8, [pc, #1184]	; 9074 <iaddr+0x620>
    8bd0:	e0455107 	sub	r5, r5, r7, lsl #2
    8bd4:	e0898895 	umull	r8, r9, r5, r8
    8bd8:	e1a071a9 	lsr	r7, r9, #3
    8bdc:	e7d08007 	ldrb	r8, [r0, r7]
    8be0:	e7d0900a 	ldrb	r9, [r0, sl]
    8be4:	e28da018 	add	sl, sp, #24
    8be8:	e08ae00e 	add	lr, sl, lr
    8bec:	e08a3003 	add	r3, sl, r3
    8bf0:	e0877107 	add	r7, r7, r7, lsl #2
    8bf4:	e54e9018 	strb	r9, [lr, #-24]	; 0xffffffe8
    8bf8:	e0455087 	sub	r5, r5, r7, lsl #1
    8bfc:	e5438018 	strb	r8, [r3, #-24]	; 0xffffffe8
    8c00:	e282e003 	add	lr, r2, #3
    8c04:	e2823004 	add	r3, r2, #4
    8c08:	e7d02005 	ldrb	r2, [r0, r5]
    8c0c:	e28d0018 	add	r0, sp, #24
    8c10:	e080e00e 	add	lr, r0, lr
    8c14:	e54e2018 	strb	r2, [lr, #-24]	; 0xffffffe8
    8c18:	ea000003 	b	8c2c <iaddr+0x1d8>
    8c1c:	e3a02030 	mov	r2, #48	; 0x30
    8c20:	e28d0018 	add	r0, sp, #24
    8c24:	e080e00e 	add	lr, r0, lr
    8c28:	e54e2018 	strb	r2, [lr, #-24]	; 0xffffffe8
    8c2c:	e3a0002e 	mov	r0, #46	; 0x2e
    8c30:	e5d12003 	ldrb	r2, [r1, #3]
    8c34:	e28d1018 	add	r1, sp, #24
    8c38:	e0811003 	add	r1, r1, r3
    8c3c:	e3520000 	cmp	r2, #0
    8c40:	e5410018 	strb	r0, [r1, #-24]	; 0xffffffe8
    8c44:	e2835002 	add	r5, r3, #2
    8c48:	e2831001 	add	r1, r3, #1
    8c4c:	1a0000a0 	bne	8ed4 <iaddr+0x480>
    8c50:	e3a03030 	mov	r3, #48	; 0x30
    8c54:	e28d2018 	add	r2, sp, #24
    8c58:	e0821001 	add	r1, r2, r1
    8c5c:	e5413018 	strb	r3, [r1, #-24]	; 0xffffffe8
    8c60:	e31c0010 	tst	ip, #16
    8c64:	e2467001 	sub	r7, r6, #1
    8c68:	1a00000c 	bne	8ca0 <iaddr+0x24c>
    8c6c:	e1550006 	cmp	r5, r6
    8c70:	a2463002 	subge	r3, r6, #2
    8c74:	a1a06007 	movge	r6, r7
    8c78:	a1a07003 	movge	r7, r3
    8c7c:	aa000007 	bge	8ca0 <iaddr+0x24c>
    8c80:	e0467005 	sub	r7, r6, r5
    8c84:	e1a02007 	mov	r2, r7
    8c88:	e1a00004 	mov	r0, r4
    8c8c:	e3a01020 	mov	r1, #32
    8c90:	eb008c9b 	bl	2bf04 <memset>
    8c94:	e2456001 	sub	r6, r5, #1
    8c98:	e0844007 	add	r4, r4, r7
    8c9c:	e2467001 	sub	r7, r6, #1
    8ca0:	e1a02005 	mov	r2, r5
    8ca4:	e1a0100d 	mov	r1, sp
    8ca8:	e1a00004 	mov	r0, r4
    8cac:	eb008c50 	bl	2bdf4 <memcpy>
    8cb0:	e1550006 	cmp	r5, r6
    8cb4:	e0840005 	add	r0, r4, r5
    8cb8:	aa000083 	bge	8ecc <iaddr+0x478>
    8cbc:	e2603000 	rsb	r3, r0, #0
    8cc0:	e2033007 	and	r3, r3, #7
    8cc4:	e1550007 	cmp	r5, r7
    8cc8:	e2832007 	add	r2, r3, #7
    8ccc:	e2654001 	rsb	r4, r5, #1
    8cd0:	d0471005 	suble	r1, r7, r5
    8cd4:	c3a01000 	movgt	r1, #0
    8cd8:	d0844007 	addle	r4, r4, r7
    8cdc:	c3a04001 	movgt	r4, #1
    8ce0:	e352000c 	cmp	r2, #12
    8ce4:	33a0200c 	movcc	r2, #12
    8ce8:	e1510002 	cmp	r1, r2
    8cec:	3a0000db 	bcc	9060 <iaddr+0x60c>
    8cf0:	e3530000 	cmp	r3, #0
    8cf4:	0a0000d6 	beq	9054 <iaddr+0x600>
    8cf8:	e3a02020 	mov	r2, #32
    8cfc:	e3530001 	cmp	r3, #1
    8d00:	e5c02000 	strb	r2, [r0]
    8d04:	e280c001 	add	ip, r0, #1
    8d08:	e247e001 	sub	lr, r7, #1
    8d0c:	0a00001a 	beq	8d7c <iaddr+0x328>
    8d10:	e3530002 	cmp	r3, #2
    8d14:	e5c02001 	strb	r2, [r0, #1]
    8d18:	e280c002 	add	ip, r0, #2
    8d1c:	e247e002 	sub	lr, r7, #2
    8d20:	0a000015 	beq	8d7c <iaddr+0x328>
    8d24:	e3530003 	cmp	r3, #3
    8d28:	e5c02002 	strb	r2, [r0, #2]
    8d2c:	e280c003 	add	ip, r0, #3
    8d30:	e247e003 	sub	lr, r7, #3
    8d34:	0a000010 	beq	8d7c <iaddr+0x328>
    8d38:	e3530004 	cmp	r3, #4
    8d3c:	e5c02003 	strb	r2, [r0, #3]
    8d40:	e280c004 	add	ip, r0, #4
    8d44:	e247e004 	sub	lr, r7, #4
    8d48:	0a00000b 	beq	8d7c <iaddr+0x328>
    8d4c:	e3530005 	cmp	r3, #5
    8d50:	e5c02004 	strb	r2, [r0, #4]
    8d54:	e280c005 	add	ip, r0, #5
    8d58:	e247e005 	sub	lr, r7, #5
    8d5c:	0a000006 	beq	8d7c <iaddr+0x328>
    8d60:	e3530007 	cmp	r3, #7
    8d64:	e5c02005 	strb	r2, [r0, #5]
    8d68:	e280c006 	add	ip, r0, #6
    8d6c:	e247e006 	sub	lr, r7, #6
    8d70:	05c02006 	strbeq	r2, [r0, #6]
    8d74:	0247e007 	subeq	lr, r7, #7
    8d78:	0280c007 	addeq	ip, r0, #7
    8d7c:	e3a01000 	mov	r1, #0
    8d80:	e28f7e2e 	add	r7, pc, #736	; 0x2e0
    8d84:	e1c760d0 	ldrd	r6, [r7]
    8d88:	e0444003 	sub	r4, r4, r3
    8d8c:	e1a081a4 	lsr	r8, r4, #3
    8d90:	e0803003 	add	r3, r0, r3
    8d94:	e28c2001 	add	r2, ip, #1
    8d98:	e2811001 	add	r1, r1, #1
    8d9c:	e1510008 	cmp	r1, r8
    8da0:	e2820007 	add	r0, r2, #7
    8da4:	e0c360f8 	strd	r6, [r3], #8
    8da8:	e2822008 	add	r2, r2, #8
    8dac:	3afffff9 	bcc	8d98 <iaddr+0x344>
    8db0:	e3c47007 	bic	r7, r4, #7
    8db4:	e1540007 	cmp	r4, r7
    8db8:	e08c3007 	add	r3, ip, r7
    8dbc:	e04e7007 	sub	r7, lr, r7
    8dc0:	0a000041 	beq	8ecc <iaddr+0x478>
    8dc4:	e3a02020 	mov	r2, #32
    8dc8:	e1550007 	cmp	r5, r7
    8dcc:	e5c32000 	strb	r2, [r3]
    8dd0:	e2830001 	add	r0, r3, #1
    8dd4:	e2471001 	sub	r1, r7, #1
    8dd8:	aa00003b 	bge	8ecc <iaddr+0x478>
    8ddc:	e1550001 	cmp	r5, r1
    8de0:	e5c32001 	strb	r2, [r3, #1]
    8de4:	e2830002 	add	r0, r3, #2
    8de8:	e2471002 	sub	r1, r7, #2
    8dec:	aa000036 	bge	8ecc <iaddr+0x478>
    8df0:	e1550001 	cmp	r5, r1
    8df4:	e5c32002 	strb	r2, [r3, #2]
    8df8:	e2830003 	add	r0, r3, #3
    8dfc:	e2471003 	sub	r1, r7, #3
    8e00:	aa000031 	bge	8ecc <iaddr+0x478>
    8e04:	e1550001 	cmp	r5, r1
    8e08:	e5c32003 	strb	r2, [r3, #3]
    8e0c:	e2830004 	add	r0, r3, #4
    8e10:	e2471004 	sub	r1, r7, #4
    8e14:	aa00002c 	bge	8ecc <iaddr+0x478>
    8e18:	e1550001 	cmp	r5, r1
    8e1c:	e5c32004 	strb	r2, [r3, #4]
    8e20:	e2830005 	add	r0, r3, #5
    8e24:	e2471005 	sub	r1, r7, #5
    8e28:	aa000027 	bge	8ecc <iaddr+0x478>
    8e2c:	e1550001 	cmp	r5, r1
    8e30:	e5c32005 	strb	r2, [r3, #5]
    8e34:	e2830006 	add	r0, r3, #6
    8e38:	e2471006 	sub	r1, r7, #6
    8e3c:	aa000022 	bge	8ecc <iaddr+0x478>
    8e40:	e1550001 	cmp	r5, r1
    8e44:	e5c32006 	strb	r2, [r3, #6]
    8e48:	e2830007 	add	r0, r3, #7
    8e4c:	e2471007 	sub	r1, r7, #7
    8e50:	aa00001d 	bge	8ecc <iaddr+0x478>
    8e54:	e1550001 	cmp	r5, r1
    8e58:	e5c32007 	strb	r2, [r3, #7]
    8e5c:	e2830008 	add	r0, r3, #8
    8e60:	e2471008 	sub	r1, r7, #8
    8e64:	aa000018 	bge	8ecc <iaddr+0x478>
    8e68:	e1550001 	cmp	r5, r1
    8e6c:	e5c32008 	strb	r2, [r3, #8]
    8e70:	e2830009 	add	r0, r3, #9
    8e74:	e2471009 	sub	r1, r7, #9
    8e78:	aa000013 	bge	8ecc <iaddr+0x478>
    8e7c:	e1550001 	cmp	r5, r1
    8e80:	e5c32009 	strb	r2, [r3, #9]
    8e84:	e283000a 	add	r0, r3, #10
    8e88:	e247100a 	sub	r1, r7, #10
    8e8c:	aa00000e 	bge	8ecc <iaddr+0x478>
    8e90:	e1550001 	cmp	r5, r1
    8e94:	e5c3200a 	strb	r2, [r3, #10]
    8e98:	e283000b 	add	r0, r3, #11
    8e9c:	e247100b 	sub	r1, r7, #11
    8ea0:	aa000009 	bge	8ecc <iaddr+0x478>
    8ea4:	e1550001 	cmp	r5, r1
    8ea8:	e5c3200b 	strb	r2, [r3, #11]
    8eac:	e247700c 	sub	r7, r7, #12
    8eb0:	e283000c 	add	r0, r3, #12
    8eb4:	aa000004 	bge	8ecc <iaddr+0x478>
    8eb8:	e1550007 	cmp	r5, r7
    8ebc:	e5c3200c 	strb	r2, [r3, #12]
    8ec0:	e283000d 	add	r0, r3, #13
    8ec4:	b5c3200d 	strblt	r2, [r3, #13]
    8ec8:	b283000e 	addlt	r0, r3, #14
    8ecc:	e28dd018 	add	sp, sp, #24
    8ed0:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    8ed4:	e3520063 	cmp	r2, #99	; 0x63
    8ed8:	da000019 	ble	8f44 <iaddr+0x4f0>
    8edc:	e59f818c 	ldr	r8, [pc, #396]	; 9070 <iaddr+0x61c>
    8ee0:	e59f0190 	ldr	r0, [pc, #400]	; 9078 <iaddr+0x624>
    8ee4:	e0898892 	umull	r8, r9, r2, r8
    8ee8:	e1a072a9 	lsr	r7, r9, #5
    8eec:	e087e107 	add	lr, r7, r7, lsl #2
    8ef0:	e08ee10e 	add	lr, lr, lr, lsl #2
    8ef4:	e59f8178 	ldr	r8, [pc, #376]	; 9074 <iaddr+0x620>
    8ef8:	e042210e 	sub	r2, r2, lr, lsl #2
    8efc:	e0898892 	umull	r8, r9, r2, r8
    8f00:	e1a0e1a9 	lsr	lr, r9, #3
    8f04:	e7d08007 	ldrb	r8, [r0, r7]
    8f08:	e28d9018 	add	r9, sp, #24
    8f0c:	e7d0700e 	ldrb	r7, [r0, lr]
    8f10:	e0891001 	add	r1, r9, r1
    8f14:	e0895005 	add	r5, r9, r5
    8f18:	e08ee10e 	add	lr, lr, lr, lsl #2
    8f1c:	e5418018 	strb	r8, [r1, #-24]	; 0xffffffe8
    8f20:	e042208e 	sub	r2, r2, lr, lsl #1
    8f24:	e5457018 	strb	r7, [r5, #-24]	; 0xffffffe8
    8f28:	e2831003 	add	r1, r3, #3
    8f2c:	e2835004 	add	r5, r3, #4
    8f30:	e7d03002 	ldrb	r3, [r0, r2]
    8f34:	e28d2018 	add	r2, sp, #24
    8f38:	e0821001 	add	r1, r2, r1
    8f3c:	e5413018 	strb	r3, [r1, #-24]	; 0xffffffe8
    8f40:	eaffff46 	b	8c60 <iaddr+0x20c>
    8f44:	e3520009 	cmp	r2, #9
    8f48:	da00003f 	ble	904c <iaddr+0x5f8>
    8f4c:	e59f8120 	ldr	r8, [pc, #288]	; 9074 <iaddr+0x620>
    8f50:	e59f0120 	ldr	r0, [pc, #288]	; 9078 <iaddr+0x624>
    8f54:	e0898892 	umull	r8, r9, r2, r8
    8f58:	e1a0e1a9 	lsr	lr, r9, #3
    8f5c:	e7d0800e 	ldrb	r8, [r0, lr]
    8f60:	e28d7018 	add	r7, sp, #24
    8f64:	e0877001 	add	r7, r7, r1
    8f68:	e08ee10e 	add	lr, lr, lr, lsl #2
    8f6c:	e1a01005 	mov	r1, r5
    8f70:	e5478018 	strb	r8, [r7, #-24]	; 0xffffffe8
    8f74:	e2835003 	add	r5, r3, #3
    8f78:	e042208e 	sub	r2, r2, lr, lsl #1
    8f7c:	eaffffeb 	b	8f30 <iaddr+0x4dc>
    8f80:	e3550009 	cmp	r5, #9
    8f84:	da00002e 	ble	9044 <iaddr+0x5f0>
    8f88:	e59f80e4 	ldr	r8, [pc, #228]	; 9074 <iaddr+0x620>
    8f8c:	e59f00e4 	ldr	r0, [pc, #228]	; 9078 <iaddr+0x624>
    8f90:	e0898895 	umull	r8, r9, r5, r8
    8f94:	e1a071a9 	lsr	r7, r9, #3
    8f98:	e7d09007 	ldrb	r9, [r0, r7]
    8f9c:	e28d8018 	add	r8, sp, #24
    8fa0:	e088800e 	add	r8, r8, lr
    8fa4:	e0877107 	add	r7, r7, r7, lsl #2
    8fa8:	e1a0e003 	mov	lr, r3
    8fac:	e5489018 	strb	r9, [r8, #-24]	; 0xffffffe8
    8fb0:	e2823003 	add	r3, r2, #3
    8fb4:	e0455087 	sub	r5, r5, r7, lsl #1
    8fb8:	eaffff12 	b	8c08 <iaddr+0x1b4>
    8fbc:	e3550009 	cmp	r5, #9
    8fc0:	da00001d 	ble	903c <iaddr+0x5e8>
    8fc4:	e59f80a8 	ldr	r8, [pc, #168]	; 9074 <iaddr+0x620>
    8fc8:	e59f00a8 	ldr	r0, [pc, #168]	; 9078 <iaddr+0x624>
    8fcc:	e0898895 	umull	r8, r9, r5, r8
    8fd0:	e1a071a9 	lsr	r7, r9, #3
    8fd4:	e7d09007 	ldrb	r9, [r0, r7]
    8fd8:	e28d8018 	add	r8, sp, #24
    8fdc:	e0888003 	add	r8, r8, r3
    8fe0:	e0877107 	add	r7, r7, r7, lsl #2
    8fe4:	e1a03002 	mov	r3, r2
    8fe8:	e5489018 	strb	r9, [r8, #-24]	; 0xffffffe8
    8fec:	e28e2003 	add	r2, lr, #3
    8ff0:	e0455087 	sub	r5, r5, r7, lsl #1
    8ff4:	eafffeda 	b	8b64 <iaddr+0x110>
    8ff8:	e3550009 	cmp	r5, #9
    8ffc:	da00000a 	ble	902c <iaddr+0x5d8>
    9000:	e59f206c 	ldr	r2, [pc, #108]	; 9074 <iaddr+0x620>
    9004:	e59f006c 	ldr	r0, [pc, #108]	; 9078 <iaddr+0x624>
    9008:	e0832295 	umull	r2, r3, r5, r2
    900c:	e1a031a3 	lsr	r3, r3, #3
    9010:	e7d02003 	ldrb	r2, [r0, r3]
    9014:	e0833103 	add	r3, r3, r3, lsl #2
    9018:	e0455083 	sub	r5, r5, r3, lsl #1
    901c:	e5cd2000 	strb	r2, [sp]
    9020:	e3a0e002 	mov	lr, #2
    9024:	e3a03001 	mov	r3, #1
    9028:	eafffea5 	b	8ac4 <iaddr+0x70>
    902c:	e3a0e001 	mov	lr, #1
    9030:	e3a03000 	mov	r3, #0
    9034:	e59f003c 	ldr	r0, [pc, #60]	; 9078 <iaddr+0x624>
    9038:	eafffea1 	b	8ac4 <iaddr+0x70>
    903c:	e59f0034 	ldr	r0, [pc, #52]	; 9078 <iaddr+0x624>
    9040:	eafffec7 	b	8b64 <iaddr+0x110>
    9044:	e59f002c 	ldr	r0, [pc, #44]	; 9078 <iaddr+0x624>
    9048:	eafffeee 	b	8c08 <iaddr+0x1b4>
    904c:	e59f0024 	ldr	r0, [pc, #36]	; 9078 <iaddr+0x624>
    9050:	eaffffb6 	b	8f30 <iaddr+0x4dc>
    9054:	e1a0e007 	mov	lr, r7
    9058:	e1a0c000 	mov	ip, r0
    905c:	eaffff46 	b	8d7c <iaddr+0x328>
    9060:	e1a03000 	mov	r3, r0
    9064:	eaffff56 	b	8dc4 <iaddr+0x370>
    9068:	20202020 	.word	0x20202020
    906c:	20202020 	.word	0x20202020
    9070:	51eb851f 	.word	0x51eb851f
    9074:	cccccccd 	.word	0xcccccccd
    9078:	0002e070 	.word	0x0002e070

0000907c <ee_vsprintf>:
    907c:	e92d4800 	push	{fp, lr}
    9080:	e28db004 	add	fp, sp, #4
    9084:	e24dd040 	sub	sp, sp, #64	; 0x40
    9088:	e50b0030 	str	r0, [fp, #-48]	; 0xffffffd0
    908c:	e50b1034 	str	r1, [fp, #-52]	; 0xffffffcc
    9090:	e50b2038 	str	r2, [fp, #-56]	; 0xffffffc8
    9094:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
    9098:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    909c:	ea0001b6 	b	977c <ee_vsprintf+0x700>
    90a0:	e51b3034 	ldr	r3, [fp, #-52]	; 0xffffffcc
    90a4:	e5d33000 	ldrb	r3, [r3]
    90a8:	e3530025 	cmp	r3, #37	; 0x25
    90ac:	0a000006 	beq	90cc <ee_vsprintf+0x50>
    90b0:	e51b2034 	ldr	r2, [fp, #-52]	; 0xffffffcc
    90b4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
    90b8:	e2831001 	add	r1, r3, #1
    90bc:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
    90c0:	e5d22000 	ldrb	r2, [r2]
    90c4:	e5c32000 	strb	r2, [r3]
    90c8:	ea0001a8 	b	9770 <ee_vsprintf+0x6f4>
    90cc:	e3a03000 	mov	r3, #0
    90d0:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
    90d4:	e51b3034 	ldr	r3, [fp, #-52]	; 0xffffffcc
    90d8:	e2833001 	add	r3, r3, #1
    90dc:	e50b3034 	str	r3, [fp, #-52]	; 0xffffffcc
    90e0:	e51b3034 	ldr	r3, [fp, #-52]	; 0xffffffcc
    90e4:	e5d33000 	ldrb	r3, [r3]
    90e8:	e2433020 	sub	r3, r3, #32
    90ec:	e3530010 	cmp	r3, #16
    90f0:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
    90f4:	ea000024 	b	918c <ee_vsprintf+0x110>
    90f8:	0000915c 	.word	0x0000915c
    90fc:	0000918c 	.word	0x0000918c
    9100:	0000918c 	.word	0x0000918c
    9104:	0000916c 	.word	0x0000916c
    9108:	0000918c 	.word	0x0000918c
    910c:	0000918c 	.word	0x0000918c
    9110:	0000918c 	.word	0x0000918c
    9114:	0000918c 	.word	0x0000918c
    9118:	0000918c 	.word	0x0000918c
    911c:	0000918c 	.word	0x0000918c
    9120:	0000918c 	.word	0x0000918c
    9124:	0000914c 	.word	0x0000914c
    9128:	0000918c 	.word	0x0000918c
    912c:	0000913c 	.word	0x0000913c
    9130:	0000918c 	.word	0x0000918c
    9134:	0000918c 	.word	0x0000918c
    9138:	0000917c 	.word	0x0000917c
    913c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
    9140:	e3833010 	orr	r3, r3, #16
    9144:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
    9148:	eaffffe1 	b	90d4 <ee_vsprintf+0x58>
    914c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
    9150:	e3833004 	orr	r3, r3, #4
    9154:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
    9158:	eaffffdd 	b	90d4 <ee_vsprintf+0x58>
    915c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
    9160:	e3833008 	orr	r3, r3, #8
    9164:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
    9168:	eaffffd9 	b	90d4 <ee_vsprintf+0x58>
    916c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
    9170:	e3833020 	orr	r3, r3, #32
    9174:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
    9178:	eaffffd5 	b	90d4 <ee_vsprintf+0x58>
    917c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
    9180:	e3833001 	orr	r3, r3, #1
    9184:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
    9188:	eaffffd1 	b	90d4 <ee_vsprintf+0x58>
    918c:	e3e03000 	mvn	r3, #0
    9190:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
    9194:	e51b3034 	ldr	r3, [fp, #-52]	; 0xffffffcc
    9198:	e5d33000 	ldrb	r3, [r3]
    919c:	e353002f 	cmp	r3, #47	; 0x2f
    91a0:	9a000008 	bls	91c8 <ee_vsprintf+0x14c>
    91a4:	e51b3034 	ldr	r3, [fp, #-52]	; 0xffffffcc
    91a8:	e5d33000 	ldrb	r3, [r3]
    91ac:	e3530039 	cmp	r3, #57	; 0x39
    91b0:	8a000004 	bhi	91c8 <ee_vsprintf+0x14c>
    91b4:	e24b3034 	sub	r3, fp, #52	; 0x34
    91b8:	e1a00003 	mov	r0, r3
    91bc:	ebfffc92 	bl	840c <ee_skip_atoi>
    91c0:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
    91c4:	ea000014 	b	921c <ee_vsprintf+0x1a0>
    91c8:	e51b3034 	ldr	r3, [fp, #-52]	; 0xffffffcc
    91cc:	e5d33000 	ldrb	r3, [r3]
    91d0:	e353002a 	cmp	r3, #42	; 0x2a
    91d4:	1a000010 	bne	921c <ee_vsprintf+0x1a0>
    91d8:	e51b3034 	ldr	r3, [fp, #-52]	; 0xffffffcc
    91dc:	e2833001 	add	r3, r3, #1
    91e0:	e50b3034 	str	r3, [fp, #-52]	; 0xffffffcc
    91e4:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
    91e8:	e2832004 	add	r2, r3, #4
    91ec:	e50b2038 	str	r2, [fp, #-56]	; 0xffffffc8
    91f0:	e5933000 	ldr	r3, [r3]
    91f4:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
    91f8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
    91fc:	e3530000 	cmp	r3, #0
    9200:	aa000005 	bge	921c <ee_vsprintf+0x1a0>
    9204:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
    9208:	e2633000 	rsb	r3, r3, #0
    920c:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
    9210:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
    9214:	e3833010 	orr	r3, r3, #16
    9218:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
    921c:	e3e03000 	mvn	r3, #0
    9220:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
    9224:	e51b3034 	ldr	r3, [fp, #-52]	; 0xffffffcc
    9228:	e5d33000 	ldrb	r3, [r3]
    922c:	e353002e 	cmp	r3, #46	; 0x2e
    9230:	1a000020 	bne	92b8 <ee_vsprintf+0x23c>
    9234:	e51b3034 	ldr	r3, [fp, #-52]	; 0xffffffcc
    9238:	e2833001 	add	r3, r3, #1
    923c:	e50b3034 	str	r3, [fp, #-52]	; 0xffffffcc
    9240:	e51b3034 	ldr	r3, [fp, #-52]	; 0xffffffcc
    9244:	e5d33000 	ldrb	r3, [r3]
    9248:	e353002f 	cmp	r3, #47	; 0x2f
    924c:	9a000008 	bls	9274 <ee_vsprintf+0x1f8>
    9250:	e51b3034 	ldr	r3, [fp, #-52]	; 0xffffffcc
    9254:	e5d33000 	ldrb	r3, [r3]
    9258:	e3530039 	cmp	r3, #57	; 0x39
    925c:	8a000004 	bhi	9274 <ee_vsprintf+0x1f8>
    9260:	e24b3034 	sub	r3, fp, #52	; 0x34
    9264:	e1a00003 	mov	r0, r3
    9268:	ebfffc67 	bl	840c <ee_skip_atoi>
    926c:	e50b0024 	str	r0, [fp, #-36]	; 0xffffffdc
    9270:	ea00000b 	b	92a4 <ee_vsprintf+0x228>
    9274:	e51b3034 	ldr	r3, [fp, #-52]	; 0xffffffcc
    9278:	e5d33000 	ldrb	r3, [r3]
    927c:	e353002a 	cmp	r3, #42	; 0x2a
    9280:	1a000007 	bne	92a4 <ee_vsprintf+0x228>
    9284:	e51b3034 	ldr	r3, [fp, #-52]	; 0xffffffcc
    9288:	e2833001 	add	r3, r3, #1
    928c:	e50b3034 	str	r3, [fp, #-52]	; 0xffffffcc
    9290:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
    9294:	e2832004 	add	r2, r3, #4
    9298:	e50b2038 	str	r2, [fp, #-56]	; 0xffffffc8
    929c:	e5933000 	ldr	r3, [r3]
    92a0:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
    92a4:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
    92a8:	e3530000 	cmp	r3, #0
    92ac:	aa000001 	bge	92b8 <ee_vsprintf+0x23c>
    92b0:	e3a03000 	mov	r3, #0
    92b4:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
    92b8:	e3e03000 	mvn	r3, #0
    92bc:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8
    92c0:	e51b3034 	ldr	r3, [fp, #-52]	; 0xffffffcc
    92c4:	e5d33000 	ldrb	r3, [r3]
    92c8:	e353006c 	cmp	r3, #108	; 0x6c
    92cc:	0a000003 	beq	92e0 <ee_vsprintf+0x264>
    92d0:	e51b3034 	ldr	r3, [fp, #-52]	; 0xffffffcc
    92d4:	e5d33000 	ldrb	r3, [r3]
    92d8:	e353004c 	cmp	r3, #76	; 0x4c
    92dc:	1a000005 	bne	92f8 <ee_vsprintf+0x27c>
    92e0:	e51b3034 	ldr	r3, [fp, #-52]	; 0xffffffcc
    92e4:	e5d33000 	ldrb	r3, [r3]
    92e8:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8
    92ec:	e51b3034 	ldr	r3, [fp, #-52]	; 0xffffffcc
    92f0:	e2833001 	add	r3, r3, #1
    92f4:	e50b3034 	str	r3, [fp, #-52]	; 0xffffffcc
    92f8:	e3a0300a 	mov	r3, #10
    92fc:	e50b3010 	str	r3, [fp, #-16]
    9300:	e51b3034 	ldr	r3, [fp, #-52]	; 0xffffffcc
    9304:	e5d33000 	ldrb	r3, [r3]
    9308:	e2433041 	sub	r3, r3, #65	; 0x41
    930c:	e3530037 	cmp	r3, #55	; 0x37
    9310:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
    9314:	ea0000da 	b	9684 <ee_vsprintf+0x608>
    9318:	000095e8 	.word	0x000095e8
    931c:	00009684 	.word	0x00009684
    9320:	00009684 	.word	0x00009684
    9324:	00009684 	.word	0x00009684
    9328:	00009684 	.word	0x00009684
    932c:	00009684 	.word	0x00009684
    9330:	00009684 	.word	0x00009684
    9334:	00009684 	.word	0x00009684
    9338:	00009684 	.word	0x00009684
    933c:	00009684 	.word	0x00009684
    9340:	00009684 	.word	0x00009684
    9344:	00009684 	.word	0x00009684
    9348:	00009684 	.word	0x00009684
    934c:	00009684 	.word	0x00009684
    9350:	00009684 	.word	0x00009684
    9354:	00009684 	.word	0x00009684
    9358:	00009684 	.word	0x00009684
    935c:	00009684 	.word	0x00009684
    9360:	00009684 	.word	0x00009684
    9364:	00009684 	.word	0x00009684
    9368:	00009684 	.word	0x00009684
    936c:	00009684 	.word	0x00009684
    9370:	00009684 	.word	0x00009684
    9374:	0000965c 	.word	0x0000965c
    9378:	00009684 	.word	0x00009684
    937c:	00009684 	.word	0x00009684
    9380:	00009684 	.word	0x00009684
    9384:	00009684 	.word	0x00009684
    9388:	00009684 	.word	0x00009684
    938c:	00009684 	.word	0x00009684
    9390:	00009684 	.word	0x00009684
    9394:	00009684 	.word	0x00009684
    9398:	000095f4 	.word	0x000095f4
    939c:	00009684 	.word	0x00009684
    93a0:	000093f8 	.word	0x000093f8
    93a4:	00009674 	.word	0x00009674
    93a8:	00009684 	.word	0x00009684
    93ac:	00009684 	.word	0x00009684
    93b0:	00009684 	.word	0x00009684
    93b4:	00009684 	.word	0x00009684
    93b8:	00009674 	.word	0x00009674
    93bc:	00009684 	.word	0x00009684
    93c0:	00009684 	.word	0x00009684
    93c4:	00009684 	.word	0x00009684
    93c8:	00009684 	.word	0x00009684
    93cc:	00009684 	.word	0x00009684
    93d0:	00009650 	.word	0x00009650
    93d4:	0000958c 	.word	0x0000958c
    93d8:	00009684 	.word	0x00009684
    93dc:	00009684 	.word	0x00009684
    93e0:	00009490 	.word	0x00009490
    93e4:	00009684 	.word	0x00009684
    93e8:	000096e4 	.word	0x000096e4
    93ec:	00009684 	.word	0x00009684
    93f0:	00009684 	.word	0x00009684
    93f4:	00009668 	.word	0x00009668
    93f8:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
    93fc:	e2033010 	and	r3, r3, #16
    9400:	e3530000 	cmp	r3, #0
    9404:	1a00000b 	bne	9438 <ee_vsprintf+0x3bc>
    9408:	ea000004 	b	9420 <ee_vsprintf+0x3a4>
    940c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
    9410:	e2832001 	add	r2, r3, #1
    9414:	e50b2014 	str	r2, [fp, #-20]	; 0xffffffec
    9418:	e3a02020 	mov	r2, #32
    941c:	e5c32000 	strb	r2, [r3]
    9420:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
    9424:	e2433001 	sub	r3, r3, #1
    9428:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
    942c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
    9430:	e3530000 	cmp	r3, #0
    9434:	cafffff4 	bgt	940c <ee_vsprintf+0x390>
    9438:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
    943c:	e2832004 	add	r2, r3, #4
    9440:	e50b2038 	str	r2, [fp, #-56]	; 0xffffffc8
    9444:	e5931000 	ldr	r1, [r3]
    9448:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
    944c:	e2832001 	add	r2, r3, #1
    9450:	e50b2014 	str	r2, [fp, #-20]	; 0xffffffec
    9454:	e6ef2071 	uxtb	r2, r1
    9458:	e5c32000 	strb	r2, [r3]
    945c:	ea000004 	b	9474 <ee_vsprintf+0x3f8>
    9460:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
    9464:	e2832001 	add	r2, r3, #1
    9468:	e50b2014 	str	r2, [fp, #-20]	; 0xffffffec
    946c:	e3a02020 	mov	r2, #32
    9470:	e5c32000 	strb	r2, [r3]
    9474:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
    9478:	e2433001 	sub	r3, r3, #1
    947c:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
    9480:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
    9484:	e3530000 	cmp	r3, #0
    9488:	cafffff4 	bgt	9460 <ee_vsprintf+0x3e4>
    948c:	ea0000b7 	b	9770 <ee_vsprintf+0x6f4>
    9490:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
    9494:	e2832004 	add	r2, r3, #4
    9498:	e50b2038 	str	r2, [fp, #-56]	; 0xffffffc8
    949c:	e5933000 	ldr	r3, [r3]
    94a0:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
    94a4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
    94a8:	e3530000 	cmp	r3, #0
    94ac:	1a000001 	bne	94b8 <ee_vsprintf+0x43c>
    94b0:	e59f32f8 	ldr	r3, [pc, #760]	; 97b0 <ee_vsprintf+0x734>
    94b4:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
    94b8:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
    94bc:	e1a01003 	mov	r1, r3
    94c0:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
    94c4:	ebfffbbd 	bl	83c0 <ee_strnlen>
    94c8:	e1a03000 	mov	r3, r0
    94cc:	e50b302c 	str	r3, [fp, #-44]	; 0xffffffd4
    94d0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
    94d4:	e2033010 	and	r3, r3, #16
    94d8:	e3530000 	cmp	r3, #0
    94dc:	1a00000b 	bne	9510 <ee_vsprintf+0x494>
    94e0:	ea000004 	b	94f8 <ee_vsprintf+0x47c>
    94e4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
    94e8:	e2832001 	add	r2, r3, #1
    94ec:	e50b2014 	str	r2, [fp, #-20]	; 0xffffffec
    94f0:	e3a02020 	mov	r2, #32
    94f4:	e5c32000 	strb	r2, [r3]
    94f8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
    94fc:	e2432001 	sub	r2, r3, #1
    9500:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
    9504:	e51b202c 	ldr	r2, [fp, #-44]	; 0xffffffd4
    9508:	e1520003 	cmp	r2, r3
    950c:	bafffff4 	blt	94e4 <ee_vsprintf+0x468>
    9510:	e3a03000 	mov	r3, #0
    9514:	e50b300c 	str	r3, [fp, #-12]
    9518:	ea00000a 	b	9548 <ee_vsprintf+0x4cc>
    951c:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
    9520:	e2823001 	add	r3, r2, #1
    9524:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
    9528:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
    952c:	e2831001 	add	r1, r3, #1
    9530:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
    9534:	e5d22000 	ldrb	r2, [r2]
    9538:	e5c32000 	strb	r2, [r3]
    953c:	e51b300c 	ldr	r3, [fp, #-12]
    9540:	e2833001 	add	r3, r3, #1
    9544:	e50b300c 	str	r3, [fp, #-12]
    9548:	e51b200c 	ldr	r2, [fp, #-12]
    954c:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
    9550:	e1520003 	cmp	r2, r3
    9554:	bafffff0 	blt	951c <ee_vsprintf+0x4a0>
    9558:	ea000004 	b	9570 <ee_vsprintf+0x4f4>
    955c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
    9560:	e2832001 	add	r2, r3, #1
    9564:	e50b2014 	str	r2, [fp, #-20]	; 0xffffffec
    9568:	e3a02020 	mov	r2, #32
    956c:	e5c32000 	strb	r2, [r3]
    9570:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
    9574:	e2432001 	sub	r2, r3, #1
    9578:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
    957c:	e51b202c 	ldr	r2, [fp, #-44]	; 0xffffffd4
    9580:	e1520003 	cmp	r2, r3
    9584:	bafffff4 	blt	955c <ee_vsprintf+0x4e0>
    9588:	ea000078 	b	9770 <ee_vsprintf+0x6f4>
    958c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
    9590:	e3730001 	cmn	r3, #1
    9594:	1a000004 	bne	95ac <ee_vsprintf+0x530>
    9598:	e3a03008 	mov	r3, #8
    959c:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
    95a0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
    95a4:	e3833001 	orr	r3, r3, #1
    95a8:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
    95ac:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
    95b0:	e2832004 	add	r2, r3, #4
    95b4:	e50b2038 	str	r2, [fp, #-56]	; 0xffffffc8
    95b8:	e5933000 	ldr	r3, [r3]
    95bc:	e1a01003 	mov	r1, r3
    95c0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
    95c4:	e58d3004 	str	r3, [sp, #4]
    95c8:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
    95cc:	e58d3000 	str	r3, [sp]
    95d0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
    95d4:	e3a02010 	mov	r2, #16
    95d8:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
    95dc:	ebfffb9c 	bl	8454 <ee_number>
    95e0:	e50b0014 	str	r0, [fp, #-20]	; 0xffffffec
    95e4:	ea000061 	b	9770 <ee_vsprintf+0x6f4>
    95e8:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
    95ec:	e3833040 	orr	r3, r3, #64	; 0x40
    95f0:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
    95f4:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
    95f8:	e353006c 	cmp	r3, #108	; 0x6c
    95fc:	1a000009 	bne	9628 <ee_vsprintf+0x5ac>
    9600:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
    9604:	e2832004 	add	r2, r3, #4
    9608:	e50b2038 	str	r2, [fp, #-56]	; 0xffffffc8
    960c:	e5931000 	ldr	r1, [r3]
    9610:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
    9614:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
    9618:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
    961c:	ebfffc3e 	bl	871c <eaddr>
    9620:	e50b0014 	str	r0, [fp, #-20]	; 0xffffffec
    9624:	ea000051 	b	9770 <ee_vsprintf+0x6f4>
    9628:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
    962c:	e2832004 	add	r2, r3, #4
    9630:	e50b2038 	str	r2, [fp, #-56]	; 0xffffffc8
    9634:	e5931000 	ldr	r1, [r3]
    9638:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
    963c:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
    9640:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
    9644:	ebfffd02 	bl	8a54 <iaddr>
    9648:	e50b0014 	str	r0, [fp, #-20]	; 0xffffffec
    964c:	ea000047 	b	9770 <ee_vsprintf+0x6f4>
    9650:	e3a03008 	mov	r3, #8
    9654:	e50b3010 	str	r3, [fp, #-16]
    9658:	ea000022 	b	96e8 <ee_vsprintf+0x66c>
    965c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
    9660:	e3833040 	orr	r3, r3, #64	; 0x40
    9664:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
    9668:	e3a03010 	mov	r3, #16
    966c:	e50b3010 	str	r3, [fp, #-16]
    9670:	ea00001c 	b	96e8 <ee_vsprintf+0x66c>
    9674:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
    9678:	e3833002 	orr	r3, r3, #2
    967c:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
    9680:	ea000017 	b	96e4 <ee_vsprintf+0x668>
    9684:	e51b3034 	ldr	r3, [fp, #-52]	; 0xffffffcc
    9688:	e5d33000 	ldrb	r3, [r3]
    968c:	e3530025 	cmp	r3, #37	; 0x25
    9690:	0a000004 	beq	96a8 <ee_vsprintf+0x62c>
    9694:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
    9698:	e2832001 	add	r2, r3, #1
    969c:	e50b2014 	str	r2, [fp, #-20]	; 0xffffffec
    96a0:	e3a02025 	mov	r2, #37	; 0x25
    96a4:	e5c32000 	strb	r2, [r3]
    96a8:	e51b3034 	ldr	r3, [fp, #-52]	; 0xffffffcc
    96ac:	e5d33000 	ldrb	r3, [r3]
    96b0:	e3530000 	cmp	r3, #0
    96b4:	0a000006 	beq	96d4 <ee_vsprintf+0x658>
    96b8:	e51b2034 	ldr	r2, [fp, #-52]	; 0xffffffcc
    96bc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
    96c0:	e2831001 	add	r1, r3, #1
    96c4:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
    96c8:	e5d22000 	ldrb	r2, [r2]
    96cc:	e5c32000 	strb	r2, [r3]
    96d0:	ea000026 	b	9770 <ee_vsprintf+0x6f4>
    96d4:	e51b3034 	ldr	r3, [fp, #-52]	; 0xffffffcc
    96d8:	e2433001 	sub	r3, r3, #1
    96dc:	e50b3034 	str	r3, [fp, #-52]	; 0xffffffcc
    96e0:	ea000022 	b	9770 <ee_vsprintf+0x6f4>
    96e4:	e320f000 	nop	{0}
    96e8:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
    96ec:	e353006c 	cmp	r3, #108	; 0x6c
    96f0:	1a000005 	bne	970c <ee_vsprintf+0x690>
    96f4:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
    96f8:	e2832004 	add	r2, r3, #4
    96fc:	e50b2038 	str	r2, [fp, #-56]	; 0xffffffc8
    9700:	e5933000 	ldr	r3, [r3]
    9704:	e50b3008 	str	r3, [fp, #-8]
    9708:	ea00000e 	b	9748 <ee_vsprintf+0x6cc>
    970c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
    9710:	e2033002 	and	r3, r3, #2
    9714:	e3530000 	cmp	r3, #0
    9718:	0a000005 	beq	9734 <ee_vsprintf+0x6b8>
    971c:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
    9720:	e2832004 	add	r2, r3, #4
    9724:	e50b2038 	str	r2, [fp, #-56]	; 0xffffffc8
    9728:	e5933000 	ldr	r3, [r3]
    972c:	e50b3008 	str	r3, [fp, #-8]
    9730:	ea000004 	b	9748 <ee_vsprintf+0x6cc>
    9734:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
    9738:	e2832004 	add	r2, r3, #4
    973c:	e50b2038 	str	r2, [fp, #-56]	; 0xffffffc8
    9740:	e5933000 	ldr	r3, [r3]
    9744:	e50b3008 	str	r3, [fp, #-8]
    9748:	e51b1008 	ldr	r1, [fp, #-8]
    974c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
    9750:	e58d3004 	str	r3, [sp, #4]
    9754:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
    9758:	e58d3000 	str	r3, [sp]
    975c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
    9760:	e51b2010 	ldr	r2, [fp, #-16]
    9764:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
    9768:	ebfffb39 	bl	8454 <ee_number>
    976c:	e50b0014 	str	r0, [fp, #-20]	; 0xffffffec
    9770:	e51b3034 	ldr	r3, [fp, #-52]	; 0xffffffcc
    9774:	e2833001 	add	r3, r3, #1
    9778:	e50b3034 	str	r3, [fp, #-52]	; 0xffffffcc
    977c:	e51b3034 	ldr	r3, [fp, #-52]	; 0xffffffcc
    9780:	e5d33000 	ldrb	r3, [r3]
    9784:	e3530000 	cmp	r3, #0
    9788:	1afffe44 	bne	90a0 <ee_vsprintf+0x24>
    978c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
    9790:	e3a02000 	mov	r2, #0
    9794:	e5c32000 	strb	r2, [r3]
    9798:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
    979c:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
    97a0:	e0423003 	sub	r3, r2, r3
    97a4:	e1a00003 	mov	r0, r3
    97a8:	e24bd004 	sub	sp, fp, #4
    97ac:	e8bd8800 	pop	{fp, pc}
    97b0:	0002e000 	.word	0x0002e000

000097b4 <LogWrite>:
    97b4:	e92d000c 	push	{r2, r3}
    97b8:	e92d4070 	push	{r4, r5, r6, lr}
    97bc:	e24dde4b 	sub	sp, sp, #1200	; 0x4b0
    97c0:	e24dd008 	sub	sp, sp, #8
    97c4:	e1a04001 	mov	r4, r1
    97c8:	e59f1198 	ldr	r1, [pc, #408]	; 9968 <LogWrite+0x1b4>
    97cc:	e1a06000 	mov	r6, r0
    97d0:	eb008cff 	bl	2cbd4 <strstr>
    97d4:	e3500000 	cmp	r0, #0
    97d8:	0a000020 	beq	9860 <LogWrite+0xac>
    97dc:	e3a04005 	mov	r4, #5
    97e0:	e59f3184 	ldr	r3, [pc, #388]	; 996c <LogWrite+0x1b8>
    97e4:	e5933000 	ldr	r3, [r3]
    97e8:	e1530004 	cmp	r3, r4
    97ec:	2a000004 	bcs	9804 <LogWrite+0x50>
    97f0:	e28dde4b 	add	sp, sp, #1200	; 0x4b0
    97f4:	e28dd008 	add	sp, sp, #8
    97f8:	e8bd4070 	pop	{r4, r5, r6, lr}
    97fc:	e28dd008 	add	sp, sp, #8
    9800:	e12fff1e 	bx	lr
    9804:	e28d3d13 	add	r3, sp, #1216	; 0x4c0
    9808:	e283300c 	add	r3, r3, #12
    980c:	e59f515c 	ldr	r5, [pc, #348]	; 9970 <LogWrite+0x1bc>
    9810:	e1a02003 	mov	r2, r3
    9814:	e28d0008 	add	r0, sp, #8
    9818:	e59d14c8 	ldr	r1, [sp, #1224]	; 0x4c8
    981c:	e58d3004 	str	r3, [sp, #4]
    9820:	ebfffe15 	bl	907c <ee_vsprintf>
    9824:	e5953000 	ldr	r3, [r5]
    9828:	e3530000 	cmp	r3, #0
    982c:	0affffef 	beq	97f0 <LogWrite+0x3c>
    9830:	e59f013c 	ldr	r0, [pc, #316]	; 9974 <LogWrite+0x1c0>
    9834:	e2444001 	sub	r4, r4, #1
    9838:	e12fff33 	blx	r3
    983c:	e5953000 	ldr	r3, [r5]
    9840:	e3540004 	cmp	r4, #4
    9844:	979ff104 	ldrls	pc, [pc, r4, lsl #2]
    9848:	ea000041 	b	9954 <LogWrite+0x1a0>
    984c:	00009940 	.word	0x00009940
    9850:	0000992c 	.word	0x0000992c
    9854:	00009918 	.word	0x00009918
    9858:	00009904 	.word	0x00009904
    985c:	0000988c 	.word	0x0000988c
    9860:	e59f1110 	ldr	r1, [pc, #272]	; 9978 <LogWrite+0x1c4>
    9864:	e1a00006 	mov	r0, r6
    9868:	eb008cd9 	bl	2cbd4 <strstr>
    986c:	e3500000 	cmp	r0, #0
    9870:	1affffd9 	bne	97dc <LogWrite+0x28>
    9874:	e59f1100 	ldr	r1, [pc, #256]	; 997c <LogWrite+0x1c8>
    9878:	e1a00006 	mov	r0, r6
    987c:	eb008cd4 	bl	2cbd4 <strstr>
    9880:	e3500000 	cmp	r0, #0
    9884:	13a04005 	movne	r4, #5
    9888:	eaffffd4 	b	97e0 <LogWrite+0x2c>
    988c:	e3530000 	cmp	r3, #0
    9890:	0affffd6 	beq	97f0 <LogWrite+0x3c>
    9894:	e59f00e4 	ldr	r0, [pc, #228]	; 9980 <LogWrite+0x1cc>
    9898:	e12fff33 	blx	r3
    989c:	e5953000 	ldr	r3, [r5]
    98a0:	e3530000 	cmp	r3, #0
    98a4:	0a000011 	beq	98f0 <LogWrite+0x13c>
    98a8:	e59f00d4 	ldr	r0, [pc, #212]	; 9984 <LogWrite+0x1d0>
    98ac:	e12fff33 	blx	r3
    98b0:	e5953000 	ldr	r3, [r5]
    98b4:	e3530000 	cmp	r3, #0
    98b8:	0affffcc 	beq	97f0 <LogWrite+0x3c>
    98bc:	e1a00006 	mov	r0, r6
    98c0:	e12fff33 	blx	r3
    98c4:	e5953000 	ldr	r3, [r5]
    98c8:	e3530000 	cmp	r3, #0
    98cc:	0affffc7 	beq	97f0 <LogWrite+0x3c>
    98d0:	e59f00b0 	ldr	r0, [pc, #176]	; 9988 <LogWrite+0x1d4>
    98d4:	e12fff33 	blx	r3
    98d8:	e5953000 	ldr	r3, [r5]
    98dc:	e3530000 	cmp	r3, #0
    98e0:	0affffc2 	beq	97f0 <LogWrite+0x3c>
    98e4:	e28d0008 	add	r0, sp, #8
    98e8:	e12fff33 	blx	r3
    98ec:	e5953000 	ldr	r3, [r5]
    98f0:	e3530000 	cmp	r3, #0
    98f4:	0affffbd 	beq	97f0 <LogWrite+0x3c>
    98f8:	e59f008c 	ldr	r0, [pc, #140]	; 998c <LogWrite+0x1d8>
    98fc:	e12fff33 	blx	r3
    9900:	eaffffba 	b	97f0 <LogWrite+0x3c>
    9904:	e3530000 	cmp	r3, #0
    9908:	0affffb8 	beq	97f0 <LogWrite+0x3c>
    990c:	e59f007c 	ldr	r0, [pc, #124]	; 9990 <LogWrite+0x1dc>
    9910:	e12fff33 	blx	r3
    9914:	eaffffe0 	b	989c <LogWrite+0xe8>
    9918:	e3530000 	cmp	r3, #0
    991c:	0affffb3 	beq	97f0 <LogWrite+0x3c>
    9920:	e59f006c 	ldr	r0, [pc, #108]	; 9994 <LogWrite+0x1e0>
    9924:	e12fff33 	blx	r3
    9928:	eaffffdb 	b	989c <LogWrite+0xe8>
    992c:	e3530000 	cmp	r3, #0
    9930:	0affffae 	beq	97f0 <LogWrite+0x3c>
    9934:	e59f005c 	ldr	r0, [pc, #92]	; 9998 <LogWrite+0x1e4>
    9938:	e12fff33 	blx	r3
    993c:	eaffffd6 	b	989c <LogWrite+0xe8>
    9940:	e3530000 	cmp	r3, #0
    9944:	0affffa9 	beq	97f0 <LogWrite+0x3c>
    9948:	e59f004c 	ldr	r0, [pc, #76]	; 999c <LogWrite+0x1e8>
    994c:	e12fff33 	blx	r3
    9950:	eaffffd1 	b	989c <LogWrite+0xe8>
    9954:	e3530000 	cmp	r3, #0
    9958:	0affffa4 	beq	97f0 <LogWrite+0x3c>
    995c:	e59f003c 	ldr	r0, [pc, #60]	; 99a0 <LogWrite+0x1ec>
    9960:	e12fff33 	blx	r3
    9964:	eaffffcc 	b	989c <LogWrite+0xe8>
    9968:	0002e008 	.word	0x0002e008
    996c:	00035a3c 	.word	0x00035a3c
    9970:	000428ec 	.word	0x000428ec
    9974:	0002e020 	.word	0x0002e020
    9978:	0002e010 	.word	0x0002e010
    997c:	0002e018 	.word	0x0002e018
    9980:	0002e044 	.word	0x0002e044
    9984:	0002e054 	.word	0x0002e054
    9988:	0002e058 	.word	0x0002e058
    998c:	0002e05c 	.word	0x0002e05c
    9990:	0002e03c 	.word	0x0002e03c
    9994:	0002e034 	.word	0x0002e034
    9998:	0002e02c 	.word	0x0002e02c
    999c:	0002e024 	.word	0x0002e024
    99a0:	0002e04c 	.word	0x0002e04c

000099a4 <LogSetLevel>:
    99a4:	e59f3004 	ldr	r3, [pc, #4]	; 99b0 <LogSetLevel+0xc>
    99a8:	e5830000 	str	r0, [r3]
    99ac:	e12fff1e 	bx	lr
    99b0:	00035a3c 	.word	0x00035a3c

000099b4 <ee_sprintf>:
    99b4:	e92d000e 	push	{r1, r2, r3}
    99b8:	e92d4010 	push	{r4, lr}
    99bc:	e1a04000 	mov	r4, r0
    99c0:	e24dd00c 	sub	sp, sp, #12
    99c4:	e28d3018 	add	r3, sp, #24
    99c8:	e1a02003 	mov	r2, r3
    99cc:	e59d1014 	ldr	r1, [sp, #20]
    99d0:	e58d3004 	str	r3, [sp, #4]
    99d4:	ebfffda8 	bl	907c <ee_vsprintf>
    99d8:	e1a00004 	mov	r0, r4
    99dc:	eb008ad8 	bl	2c544 <strlen>
    99e0:	e28dd00c 	add	sp, sp, #12
    99e4:	e8bd4010 	pop	{r4, lr}
    99e8:	e28dd00c 	add	sp, sp, #12
    99ec:	e12fff1e 	bx	lr

000099f0 <ee_printf>:
    99f0:	e92d000f 	push	{r0, r1, r2, r3}
    99f4:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    99f8:	e24dde4b 	sub	sp, sp, #1200	; 0x4b0
    99fc:	e24dd00c 	sub	sp, sp, #12
    9a00:	e28d3d13 	add	r3, sp, #1216	; 0x4c0
    9a04:	e2833004 	add	r3, r3, #4
    9a08:	e1a02003 	mov	r2, r3
    9a0c:	e28d0008 	add	r0, sp, #8
    9a10:	e59d14c0 	ldr	r1, [sp, #1216]	; 0x4c0
    9a14:	e58d3004 	str	r3, [sp, #4]
    9a18:	ebfffd97 	bl	907c <ee_vsprintf>
    9a1c:	e59f3024 	ldr	r3, [pc, #36]	; 9a48 <ee_printf+0x58>
    9a20:	e5933000 	ldr	r3, [r3]
    9a24:	e3530000 	cmp	r3, #0
    9a28:	0a000001 	beq	9a34 <ee_printf+0x44>
    9a2c:	e28d0008 	add	r0, sp, #8
    9a30:	e12fff33 	blx	r3
    9a34:	e28dde4b 	add	sp, sp, #1200	; 0x4b0
    9a38:	e28dd00c 	add	sp, sp, #12
    9a3c:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
    9a40:	e28dd010 	add	sp, sp, #16
    9a44:	e12fff1e 	bx	lr
    9a48:	000428ec 	.word	0x000428ec

00009a4c <ee_dump_mem>:
    9a4c:	e0413000 	sub	r3, r1, r0
    9a50:	e3530000 	cmp	r3, #0
    9a54:	da000019 	ble	9ac0 <ee_dump_mem+0x74>
    9a58:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    9a5c:	e1a05000 	mov	r5, r0
    9a60:	e1a07001 	mov	r7, r1
    9a64:	e3a04000 	mov	r4, #0
    9a68:	e59f6058 	ldr	r6, [pc, #88]	; 9ac8 <ee_dump_mem+0x7c>
    9a6c:	e286800c 	add	r8, r6, #12
    9a70:	e2869008 	add	r9, r6, #8
    9a74:	e2844001 	add	r4, r4, #1
    9a78:	e4d51001 	ldrb	r1, [r5], #1
    9a7c:	e1a00006 	mov	r0, r6
    9a80:	ebffffda 	bl	99f0 <ee_printf>
    9a84:	e3540010 	cmp	r4, #16
    9a88:	0a000006 	beq	9aa8 <ee_dump_mem+0x5c>
    9a8c:	e1a00008 	mov	r0, r8
    9a90:	ebffffd6 	bl	99f0 <ee_printf>
    9a94:	e1570005 	cmp	r7, r5
    9a98:	1afffff5 	bne	9a74 <ee_dump_mem+0x28>
    9a9c:	e8bd47f0 	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
    9aa0:	e59f0024 	ldr	r0, [pc, #36]	; 9acc <ee_dump_mem+0x80>
    9aa4:	eaffffd1 	b	99f0 <ee_printf>
    9aa8:	e1a00009 	mov	r0, r9
    9aac:	ebffffcf 	bl	99f0 <ee_printf>
    9ab0:	e1570005 	cmp	r7, r5
    9ab4:	0afffff8 	beq	9a9c <ee_dump_mem+0x50>
    9ab8:	e3a04000 	mov	r4, #0
    9abc:	eaffffec 	b	9a74 <ee_dump_mem+0x28>
    9ac0:	e59f0004 	ldr	r0, [pc, #4]	; 9acc <ee_dump_mem+0x80>
    9ac4:	eaffffc9 	b	99f0 <ee_printf>
    9ac8:	0002e060 	.word	0x0002e060
    9acc:	0002e068 	.word	0x0002e068

00009ad0 <fb_init>:
    9ad0:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    9ad4:	e3a06008 	mov	r6, #8
    9ad8:	e3a05000 	mov	r5, #0
    9adc:	e3a0e020 	mov	lr, #32
    9ae0:	e24dde42 	sub	sp, sp, #1056	; 0x420
    9ae4:	e28d401f 	add	r4, sp, #31
    9ae8:	e3c4400f 	bic	r4, r4, #15
    9aec:	e59fc22c 	ldr	ip, [pc, #556]	; 9d20 <fb_init+0x250>
    9af0:	e1a0a000 	mov	sl, r0
    9af4:	e1a09001 	mov	r9, r1
    9af8:	e1a00006 	mov	r0, r6
    9afc:	e1a01004 	mov	r1, r4
    9b00:	e584e000 	str	lr, [r4]
    9b04:	e1a08002 	mov	r8, r2
    9b08:	e5845004 	str	r5, [r4, #4]
    9b0c:	e1a07003 	mov	r7, r3
    9b10:	e584c008 	str	ip, [r4, #8]
    9b14:	e584600c 	str	r6, [r4, #12]
    9b18:	e5845010 	str	r5, [r4, #16]
    9b1c:	e5845014 	str	r5, [r4, #20]
    9b20:	e5845018 	str	r5, [r4, #24]
    9b24:	e584501c 	str	r5, [r4, #28]
    9b28:	eb000580 	bl	b130 <postman_send>
    9b2c:	e35000c0 	cmp	r0, #192	; 0xc0
    9b30:	0a000002 	beq	9b40 <fb_init+0x70>
    9b34:	e3a00002 	mov	r0, #2
    9b38:	e28dde42 	add	sp, sp, #1056	; 0x420
    9b3c:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    9b40:	e28d300c 	add	r3, sp, #12
    9b44:	e1a01003 	mov	r1, r3
    9b48:	e1a00006 	mov	r0, r6
    9b4c:	e58d3004 	str	r3, [sp, #4]
    9b50:	eb000541 	bl	b05c <postman_recv>
    9b54:	e35000c0 	cmp	r0, #192	; 0xc0
    9b58:	1afffff5 	bne	9b34 <fb_init+0x64>
    9b5c:	e5943004 	ldr	r3, [r4, #4]
    9b60:	e3530102 	cmp	r3, #-2147483648	; 0x80000000
    9b64:	13a00003 	movne	r0, #3
    9b68:	1afffff2 	bne	9b38 <fb_init+0x68>
    9b6c:	e3a03004 	mov	r3, #4
    9b70:	e3a0c010 	mov	ip, #16
    9b74:	e3a02058 	mov	r2, #88	; 0x58
    9b78:	e59f11a4 	ldr	r1, [pc, #420]	; 9d24 <fb_init+0x254>
    9b7c:	e59f01a4 	ldr	r0, [pc, #420]	; 9d28 <fb_init+0x258>
    9b80:	e5845004 	str	r5, [r4, #4]
    9b84:	e59de440 	ldr	lr, [sp, #1088]	; 0x440
    9b88:	e5841008 	str	r1, [r4, #8]
    9b8c:	e584600c 	str	r6, [r4, #12]
    9b90:	e2811001 	add	r1, r1, #1
    9b94:	e5846010 	str	r6, [r4, #16]
    9b98:	e584a014 	str	sl, [r4, #20]
    9b9c:	e5849018 	str	r9, [r4, #24]
    9ba0:	e59f9184 	ldr	r9, [pc, #388]	; 9d2c <fb_init+0x25c>
    9ba4:	e584101c 	str	r1, [r4, #28]
    9ba8:	e5846020 	str	r6, [r4, #32]
    9bac:	e1a01004 	mov	r1, r4
    9bb0:	e5846024 	str	r6, [r4, #36]	; 0x24
    9bb4:	e5848028 	str	r8, [r4, #40]	; 0x28
    9bb8:	e584702c 	str	r7, [r4, #44]	; 0x2c
    9bbc:	e5840030 	str	r0, [r4, #48]	; 0x30
    9bc0:	e1a00006 	mov	r0, r6
    9bc4:	e5843034 	str	r3, [r4, #52]	; 0x34
    9bc8:	e5843038 	str	r3, [r4, #56]	; 0x38
    9bcc:	e584e03c 	str	lr, [r4, #60]	; 0x3c
    9bd0:	e5849040 	str	r9, [r4, #64]	; 0x40
    9bd4:	e5846044 	str	r6, [r4, #68]	; 0x44
    9bd8:	e5843048 	str	r3, [r4, #72]	; 0x48
    9bdc:	e584c04c 	str	ip, [r4, #76]	; 0x4c
    9be0:	e5845050 	str	r5, [r4, #80]	; 0x50
    9be4:	e5845054 	str	r5, [r4, #84]	; 0x54
    9be8:	e5842000 	str	r2, [r4]
    9bec:	eb00054f 	bl	b130 <postman_send>
    9bf0:	e35000c0 	cmp	r0, #192	; 0xc0
    9bf4:	1affffce 	bne	9b34 <fb_init+0x64>
    9bf8:	e1a00006 	mov	r0, r6
    9bfc:	e59d1004 	ldr	r1, [sp, #4]
    9c00:	eb000515 	bl	b05c <postman_recv>
    9c04:	e35000c0 	cmp	r0, #192	; 0xc0
    9c08:	1affffc9 	bne	9b34 <fb_init+0x64>
    9c0c:	e5943004 	ldr	r3, [r4, #4]
    9c10:	e3530102 	cmp	r3, #-2147483648	; 0x80000000
    9c14:	03a03002 	moveq	r3, #2
    9c18:	0a000005 	beq	9c34 <fb_init+0x164>
    9c1c:	ea00003d 	b	9d18 <fb_init+0x248>
    9c20:	e7942101 	ldr	r2, [r4, r1, lsl #2]
    9c24:	e0833122 	add	r3, r3, r2, lsr #2
    9c28:	e2833003 	add	r3, r3, #3
    9c2c:	e3530016 	cmp	r3, #22
    9c30:	8a000038 	bhi	9d18 <fb_init+0x248>
    9c34:	e7942103 	ldr	r2, [r4, r3, lsl #2]
    9c38:	e2831001 	add	r1, r3, #1
    9c3c:	e3520000 	cmp	r2, #0
    9c40:	11520009 	cmpne	r2, r9
    9c44:	1afffff5 	bne	9c20 <fb_init+0x150>
    9c48:	e2831002 	add	r1, r3, #2
    9c4c:	e7941101 	ldr	r1, [r4, r1, lsl #2]
    9c50:	e58d200c 	str	r2, [sp, #12]
    9c54:	e3510122 	cmp	r1, #-2147483640	; 0x80000008
    9c58:	1a00002e 	bne	9d18 <fb_init+0x248>
    9c5c:	e2832003 	add	r2, r3, #3
    9c60:	e7942102 	ldr	r2, [r4, r2, lsl #2]
    9c64:	e2833004 	add	r3, r3, #4
    9c68:	e16f0f12 	clz	r0, r2
    9c6c:	e7943103 	ldr	r3, [r4, r3, lsl #2]
    9c70:	e1a002a0 	lsr	r0, r0, #5
    9c74:	e3530000 	cmp	r3, #0
    9c78:	11a05000 	movne	r5, r0
    9c7c:	03a05001 	moveq	r5, #1
    9c80:	e59d1448 	ldr	r1, [sp, #1096]	; 0x448
    9c84:	e3550000 	cmp	r5, #0
    9c88:	e5813000 	str	r3, [r1]
    9c8c:	13a00005 	movne	r0, #5
    9c90:	1affffa8 	bne	9b38 <fb_init+0x68>
    9c94:	e3a0101c 	mov	r1, #28
    9c98:	e3a03004 	mov	r3, #4
    9c9c:	e59d0444 	ldr	r0, [sp, #1092]	; 0x444
    9ca0:	e5841000 	str	r1, [r4]
    9ca4:	e5802000 	str	r2, [r0]
    9ca8:	e59f2080 	ldr	r2, [pc, #128]	; 9d30 <fb_init+0x260>
    9cac:	e1a01004 	mov	r1, r4
    9cb0:	e3a00008 	mov	r0, #8
    9cb4:	e5845004 	str	r5, [r4, #4]
    9cb8:	e5842008 	str	r2, [r4, #8]
    9cbc:	e584300c 	str	r3, [r4, #12]
    9cc0:	e5845010 	str	r5, [r4, #16]
    9cc4:	e5845014 	str	r5, [r4, #20]
    9cc8:	e5845018 	str	r5, [r4, #24]
    9ccc:	eb000517 	bl	b130 <postman_send>
    9cd0:	e35000c0 	cmp	r0, #192	; 0xc0
    9cd4:	1affff96 	bne	9b34 <fb_init+0x64>
    9cd8:	e59d1004 	ldr	r1, [sp, #4]
    9cdc:	e3a00008 	mov	r0, #8
    9ce0:	eb0004dd 	bl	b05c <postman_recv>
    9ce4:	e35000c0 	cmp	r0, #192	; 0xc0
    9ce8:	1affff91 	bne	9b34 <fb_init+0x64>
    9cec:	e5943010 	ldr	r3, [r4, #16]
    9cf0:	e3530112 	cmp	r3, #-2147483644	; 0x80000004
    9cf4:	1a000005 	bne	9d10 <fb_init+0x240>
    9cf8:	e5943014 	ldr	r3, [r4, #20]
    9cfc:	e59d244c 	ldr	r2, [sp, #1100]	; 0x44c
    9d00:	e3530000 	cmp	r3, #0
    9d04:	e5823000 	str	r3, [r2]
    9d08:	11a00005 	movne	r0, r5
    9d0c:	1affff89 	bne	9b38 <fb_init+0x68>
    9d10:	e3a00006 	mov	r0, #6
    9d14:	eaffff87 	b	9b38 <fb_init+0x68>
    9d18:	e3a00004 	mov	r0, #4
    9d1c:	eaffff85 	b	9b38 <fb_init+0x68>
    9d20:	00040003 	.word	0x00040003
    9d24:	00048003 	.word	0x00048003
    9d28:	00048005 	.word	0x00048005
    9d2c:	00040001 	.word	0x00040001
    9d30:	00040008 	.word	0x00040008

00009d34 <fb_release>:
    9d34:	e3a03000 	mov	r3, #0
    9d38:	e3a02018 	mov	r2, #24
    9d3c:	e92d4010 	push	{r4, lr}
    9d40:	e24dde41 	sub	sp, sp, #1040	; 0x410
    9d44:	e24dd008 	sub	sp, sp, #8
    9d48:	e59f006c 	ldr	r0, [pc, #108]	; 9dbc <fb_release+0x88>
    9d4c:	e28d4017 	add	r4, sp, #23
    9d50:	e3c4400f 	bic	r4, r4, #15
    9d54:	e5843004 	str	r3, [r4, #4]
    9d58:	e1a01004 	mov	r1, r4
    9d5c:	e5840008 	str	r0, [r4, #8]
    9d60:	e3a00008 	mov	r0, #8
    9d64:	e584300c 	str	r3, [r4, #12]
    9d68:	e5843010 	str	r3, [r4, #16]
    9d6c:	e5843014 	str	r3, [r4, #20]
    9d70:	e5842000 	str	r2, [r4]
    9d74:	eb0004ed 	bl	b130 <postman_send>
    9d78:	e35000c0 	cmp	r0, #192	; 0xc0
    9d7c:	0a000003 	beq	9d90 <fb_release+0x5c>
    9d80:	e3a00002 	mov	r0, #2
    9d84:	e28dde41 	add	sp, sp, #1040	; 0x410
    9d88:	e28dd008 	add	sp, sp, #8
    9d8c:	e8bd8010 	pop	{r4, pc}
    9d90:	e28d1004 	add	r1, sp, #4
    9d94:	e3a00008 	mov	r0, #8
    9d98:	eb0004af 	bl	b05c <postman_recv>
    9d9c:	e35000c0 	cmp	r0, #192	; 0xc0
    9da0:	1afffff6 	bne	9d80 <fb_release+0x4c>
    9da4:	e5940004 	ldr	r0, [r4, #4]
    9da8:	e2900102 	adds	r0, r0, #-2147483648	; 0x80000000
    9dac:	13a00001 	movne	r0, #1
    9db0:	e28dde41 	add	sp, sp, #1040	; 0x410
    9db4:	e28dd008 	add	sp, sp, #8
    9db8:	e8bd8010 	pop	{r4, pc}
    9dbc:	00048001 	.word	0x00048001

00009dc0 <fb_set_grayscale_palette>:
    9dc0:	e3a02000 	mov	r2, #0
    9dc4:	e3a00004 	mov	r0, #4
    9dc8:	e3a01c01 	mov	r1, #256	; 0x100
    9dcc:	e1a03002 	mov	r3, r2
    9dd0:	e92d4010 	push	{r4, lr}
    9dd4:	e24dd901 	sub	sp, sp, #16384	; 0x4000
    9dd8:	e24dd018 	sub	sp, sp, #24
    9ddc:	e28d4017 	add	r4, sp, #23
    9de0:	e59fc09c 	ldr	ip, [pc, #156]	; 9e84 <fb_set_grayscale_palette+0xc4>
    9de4:	e3c4400f 	bic	r4, r4, #15
    9de8:	e5842004 	str	r2, [r4, #4]
    9dec:	e584c008 	str	ip, [r4, #8]
    9df0:	e584000c 	str	r0, [r4, #12]
    9df4:	e59f008c 	ldr	r0, [pc, #140]	; 9e88 <fb_set_grayscale_palette+0xc8>
    9df8:	e5840010 	str	r0, [r4, #16]
    9dfc:	e5842014 	str	r2, [r4, #20]
    9e00:	e5841018 	str	r1, [r4, #24]
    9e04:	e38324ff 	orr	r2, r3, #-16777216	; 0xff000000
    9e08:	e1822803 	orr	r2, r2, r3, lsl #16
    9e0c:	e1822403 	orr	r2, r2, r3, lsl #8
    9e10:	e2831007 	add	r1, r3, #7
    9e14:	e2833001 	add	r3, r3, #1
    9e18:	e3530c01 	cmp	r3, #256	; 0x100
    9e1c:	e7842101 	str	r2, [r4, r1, lsl #2]
    9e20:	1afffff7 	bne	9e04 <fb_set_grayscale_palette+0x44>
    9e24:	e3a02000 	mov	r2, #0
    9e28:	e3a03e42 	mov	r3, #1056	; 0x420
    9e2c:	e1a01004 	mov	r1, r4
    9e30:	e3a00008 	mov	r0, #8
    9e34:	e584241c 	str	r2, [r4, #1052]	; 0x41c
    9e38:	e5843000 	str	r3, [r4]
    9e3c:	eb0004bb 	bl	b130 <postman_send>
    9e40:	e35000c0 	cmp	r0, #192	; 0xc0
    9e44:	0a000003 	beq	9e58 <fb_set_grayscale_palette+0x98>
    9e48:	e3a00002 	mov	r0, #2
    9e4c:	e28dd901 	add	sp, sp, #16384	; 0x4000
    9e50:	e28dd018 	add	sp, sp, #24
    9e54:	e8bd8010 	pop	{r4, pc}
    9e58:	e28d1004 	add	r1, sp, #4
    9e5c:	e3a00008 	mov	r0, #8
    9e60:	eb00047d 	bl	b05c <postman_recv>
    9e64:	e35000c0 	cmp	r0, #192	; 0xc0
    9e68:	1afffff6 	bne	9e48 <fb_set_grayscale_palette+0x88>
    9e6c:	e5940004 	ldr	r0, [r4, #4]
    9e70:	e2900102 	adds	r0, r0, #-2147483648	; 0x80000000
    9e74:	13a00001 	movne	r0, #1
    9e78:	e28dd901 	add	sp, sp, #16384	; 0x4000
    9e7c:	e28dd018 	add	sp, sp, #24
    9e80:	e8bd8010 	pop	{r4, pc}
    9e84:	0004800b 	.word	0x0004800b
    9e88:	00000408 	.word	0x00000408

00009e8c <fb_set_xterm_palette>:
    9e8c:	e3a03000 	mov	r3, #0
    9e90:	e3a00004 	mov	r0, #4
    9e94:	e3a02c01 	mov	r2, #256	; 0x100
    9e98:	e3a01007 	mov	r1, #7
    9e9c:	e92d4010 	push	{r4, lr}
    9ea0:	e24dd901 	sub	sp, sp, #16384	; 0x4000
    9ea4:	e24dd018 	sub	sp, sp, #24
    9ea8:	e59fc0b8 	ldr	ip, [pc, #184]	; 9f68 <fb_set_xterm_palette+0xdc>
    9eac:	e28d4017 	add	r4, sp, #23
    9eb0:	e3c4400f 	bic	r4, r4, #15
    9eb4:	e5843004 	str	r3, [r4, #4]
    9eb8:	e584c008 	str	ip, [r4, #8]
    9ebc:	e584000c 	str	r0, [r4, #12]
    9ec0:	e59f00a4 	ldr	r0, [pc, #164]	; 9f6c <fb_set_xterm_palette+0xe0>
    9ec4:	e59fc0a4 	ldr	ip, [pc, #164]	; 9f70 <fb_set_xterm_palette+0xe4>
    9ec8:	e59fe0a4 	ldr	lr, [pc, #164]	; 9f74 <fb_set_xterm_palette+0xe8>
    9ecc:	e5840010 	str	r0, [r4, #16]
    9ed0:	e5843014 	str	r3, [r4, #20]
    9ed4:	e5842018 	str	r2, [r4, #24]
    9ed8:	e5bc2004 	ldr	r2, [ip, #4]!
    9edc:	e1a03802 	lsl	r3, r2, #16
    9ee0:	e2020cff 	and	r0, r2, #65280	; 0xff00
    9ee4:	e20338ff 	and	r3, r3, #16711680	; 0xff0000
    9ee8:	e38004ff 	orr	r0, r0, #-16777216	; 0xff000000
    9eec:	e1833000 	orr	r3, r3, r0
    9ef0:	e1a02402 	lsl	r2, r2, #8
    9ef4:	e1833c22 	orr	r3, r3, r2, lsr #24
    9ef8:	e7843101 	str	r3, [r4, r1, lsl #2]
    9efc:	e2811001 	add	r1, r1, #1
    9f00:	e151000e 	cmp	r1, lr
    9f04:	1afffff3 	bne	9ed8 <fb_set_xterm_palette+0x4c>
    9f08:	e3a02000 	mov	r2, #0
    9f0c:	e3a03e42 	mov	r3, #1056	; 0x420
    9f10:	e1a01004 	mov	r1, r4
    9f14:	e3a00008 	mov	r0, #8
    9f18:	e584241c 	str	r2, [r4, #1052]	; 0x41c
    9f1c:	e5843000 	str	r3, [r4]
    9f20:	eb000482 	bl	b130 <postman_send>
    9f24:	e35000c0 	cmp	r0, #192	; 0xc0
    9f28:	0a000003 	beq	9f3c <fb_set_xterm_palette+0xb0>
    9f2c:	e3a00002 	mov	r0, #2
    9f30:	e28dd901 	add	sp, sp, #16384	; 0x4000
    9f34:	e28dd018 	add	sp, sp, #24
    9f38:	e8bd8010 	pop	{r4, pc}
    9f3c:	e28d1004 	add	r1, sp, #4
    9f40:	e3a00008 	mov	r0, #8
    9f44:	eb000444 	bl	b05c <postman_recv>
    9f48:	e35000c0 	cmp	r0, #192	; 0xc0
    9f4c:	1afffff6 	bne	9f2c <fb_set_xterm_palette+0xa0>
    9f50:	e5940004 	ldr	r0, [r4, #4]
    9f54:	e2900102 	adds	r0, r0, #-2147483648	; 0x80000000
    9f58:	13a00001 	movne	r0, #1
    9f5c:	e28dd901 	add	sp, sp, #16384	; 0x4000
    9f60:	e28dd018 	add	sp, sp, #24
    9f64:	e8bd8010 	pop	{r4, pc}
    9f68:	0004800b 	.word	0x0004800b
    9f6c:	00000408 	.word	0x00000408
    9f70:	0002e0c4 	.word	0x0002e0c4
    9f74:	00000107 	.word	0x00000107

00009f78 <fb_blank_screen>:
    9f78:	e3a03000 	mov	r3, #0
    9f7c:	e3a02004 	mov	r2, #4
    9f80:	e3a0c01c 	mov	ip, #28
    9f84:	e92d4010 	push	{r4, lr}
    9f88:	e24dde41 	sub	sp, sp, #1040	; 0x410
    9f8c:	e24dd008 	sub	sp, sp, #8
    9f90:	e59f1070 	ldr	r1, [pc, #112]	; a008 <fb_blank_screen+0x90>
    9f94:	e28d4017 	add	r4, sp, #23
    9f98:	e3c4400f 	bic	r4, r4, #15
    9f9c:	e5843004 	str	r3, [r4, #4]
    9fa0:	e5841008 	str	r1, [r4, #8]
    9fa4:	e584200c 	str	r2, [r4, #12]
    9fa8:	e1a01004 	mov	r1, r4
    9fac:	e5842010 	str	r2, [r4, #16]
    9fb0:	e5840014 	str	r0, [r4, #20]
    9fb4:	e3a00008 	mov	r0, #8
    9fb8:	e5843018 	str	r3, [r4, #24]
    9fbc:	e584c000 	str	ip, [r4]
    9fc0:	eb00045a 	bl	b130 <postman_send>
    9fc4:	e35000c0 	cmp	r0, #192	; 0xc0
    9fc8:	0a000003 	beq	9fdc <fb_blank_screen+0x64>
    9fcc:	e3a00002 	mov	r0, #2
    9fd0:	e28dde41 	add	sp, sp, #1040	; 0x410
    9fd4:	e28dd008 	add	sp, sp, #8
    9fd8:	e8bd8010 	pop	{r4, pc}
    9fdc:	e28d1004 	add	r1, sp, #4
    9fe0:	e3a00008 	mov	r0, #8
    9fe4:	eb00041c 	bl	b05c <postman_recv>
    9fe8:	e35000c0 	cmp	r0, #192	; 0xc0
    9fec:	1afffff6 	bne	9fcc <fb_blank_screen+0x54>
    9ff0:	e5940004 	ldr	r0, [r4, #4]
    9ff4:	e2900102 	adds	r0, r0, #-2147483648	; 0x80000000
    9ff8:	13a00001 	movne	r0, #1
    9ffc:	e28dde41 	add	sp, sp, #1040	; 0x410
    a000:	e28dd008 	add	sp, sp, #8
    a004:	e8bd8010 	pop	{r4, pc}
    a008:	00040002 	.word	0x00040002

0000a00c <fb_set_depth>:
    a00c:	e92d4070 	push	{r4, r5, r6, lr}
    a010:	e3a03004 	mov	r3, #4
    a014:	e3a05000 	mov	r5, #0
    a018:	e3a0201c 	mov	r2, #28
    a01c:	e24dde41 	sub	sp, sp, #1040	; 0x410
    a020:	e24dd008 	sub	sp, sp, #8
    a024:	e1a06000 	mov	r6, r0
    a028:	e28d4017 	add	r4, sp, #23
    a02c:	e5900000 	ldr	r0, [r0]
    a030:	e59f1058 	ldr	r1, [pc, #88]	; a090 <fb_set_depth+0x84>
    a034:	e3c4400f 	bic	r4, r4, #15
    a038:	e5845004 	str	r5, [r4, #4]
    a03c:	e5841008 	str	r1, [r4, #8]
    a040:	e584300c 	str	r3, [r4, #12]
    a044:	e1a01004 	mov	r1, r4
    a048:	e5843010 	str	r3, [r4, #16]
    a04c:	e5840014 	str	r0, [r4, #20]
    a050:	e3a00008 	mov	r0, #8
    a054:	e5845018 	str	r5, [r4, #24]
    a058:	e5842000 	str	r2, [r4]
    a05c:	eb000433 	bl	b130 <postman_send>
    a060:	e28d1004 	add	r1, sp, #4
    a064:	e3a00008 	mov	r0, #8
    a068:	eb0003fb 	bl	b05c <postman_recv>
    a06c:	e5943004 	ldr	r3, [r4, #4]
    a070:	e3530102 	cmp	r3, #-2147483648	; 0x80000000
    a074:	01a00005 	moveq	r0, r5
    a078:	13a00001 	movne	r0, #1
    a07c:	05943014 	ldreq	r3, [r4, #20]
    a080:	05863000 	streq	r3, [r6]
    a084:	e28dde41 	add	sp, sp, #1040	; 0x410
    a088:	e28dd008 	add	sp, sp, #8
    a08c:	e8bd8070 	pop	{r4, r5, r6, pc}
    a090:	00048005 	.word	0x00048005

0000a094 <fb_get_pitch>:
    a094:	e92d4070 	push	{r4, r5, r6, lr}
    a098:	e3a05000 	mov	r5, #0
    a09c:	e3a0301c 	mov	r3, #28
    a0a0:	e3a02004 	mov	r2, #4
    a0a4:	e24dde41 	sub	sp, sp, #1040	; 0x410
    a0a8:	e24dd008 	sub	sp, sp, #8
    a0ac:	e59f106c 	ldr	r1, [pc, #108]	; a120 <fb_get_pitch+0x8c>
    a0b0:	e28d4017 	add	r4, sp, #23
    a0b4:	e3c4400f 	bic	r4, r4, #15
    a0b8:	e5845004 	str	r5, [r4, #4]
    a0bc:	e1a06000 	mov	r6, r0
    a0c0:	e5841008 	str	r1, [r4, #8]
    a0c4:	e3a00008 	mov	r0, #8
    a0c8:	e1a01004 	mov	r1, r4
    a0cc:	e584200c 	str	r2, [r4, #12]
    a0d0:	e5845010 	str	r5, [r4, #16]
    a0d4:	e5845014 	str	r5, [r4, #20]
    a0d8:	e5845018 	str	r5, [r4, #24]
    a0dc:	e5843000 	str	r3, [r4]
    a0e0:	eb000412 	bl	b130 <postman_send>
    a0e4:	e28d1004 	add	r1, sp, #4
    a0e8:	e3a00008 	mov	r0, #8
    a0ec:	eb0003da 	bl	b05c <postman_recv>
    a0f0:	e5943004 	ldr	r3, [r4, #4]
    a0f4:	e3530102 	cmp	r3, #-2147483648	; 0x80000000
    a0f8:	13a00001 	movne	r0, #1
    a0fc:	1a000004 	bne	a114 <fb_get_pitch+0x80>
    a100:	e1560005 	cmp	r6, r5
    a104:	11a00005 	movne	r0, r5
    a108:	01a00006 	moveq	r0, r6
    a10c:	15943014 	ldrne	r3, [r4, #20]
    a110:	15863000 	strne	r3, [r6]
    a114:	e28dde41 	add	sp, sp, #1040	; 0x410
    a118:	e28dd008 	add	sp, sp, #8
    a11c:	e8bd8070 	pop	{r4, r5, r6, pc}
    a120:	00040008 	.word	0x00040008

0000a124 <fb_get_physical_buffer_size>:
    a124:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    a128:	e3a05008 	mov	r5, #8
    a12c:	e3a03000 	mov	r3, #0
    a130:	e3a02020 	mov	r2, #32
    a134:	e24dde41 	sub	sp, sp, #1040	; 0x410
    a138:	e24dd00c 	sub	sp, sp, #12
    a13c:	e08dc005 	add	ip, sp, r5
    a140:	e28c400f 	add	r4, ip, #15
    a144:	e3c4400f 	bic	r4, r4, #15
    a148:	e59fc07c 	ldr	ip, [pc, #124]	; a1cc <fb_get_physical_buffer_size+0xa8>
    a14c:	e1a07000 	mov	r7, r0
    a150:	e1a06001 	mov	r6, r1
    a154:	e1a00005 	mov	r0, r5
    a158:	e1a01004 	mov	r1, r4
    a15c:	e5843004 	str	r3, [r4, #4]
    a160:	e584c008 	str	ip, [r4, #8]
    a164:	e584500c 	str	r5, [r4, #12]
    a168:	e5843010 	str	r3, [r4, #16]
    a16c:	e5843014 	str	r3, [r4, #20]
    a170:	e5843018 	str	r3, [r4, #24]
    a174:	e584301c 	str	r3, [r4, #28]
    a178:	e5842000 	str	r2, [r4]
    a17c:	eb0003eb 	bl	b130 <postman_send>
    a180:	e08d3005 	add	r3, sp, r5
    a184:	e2431004 	sub	r1, r3, #4
    a188:	e1a00005 	mov	r0, r5
    a18c:	eb0003b2 	bl	b05c <postman_recv>
    a190:	e5943004 	ldr	r3, [r4, #4]
    a194:	e3530102 	cmp	r3, #-2147483648	; 0x80000000
    a198:	13a00001 	movne	r0, #1
    a19c:	1a000007 	bne	a1c0 <fb_get_physical_buffer_size+0x9c>
    a1a0:	e3570000 	cmp	r7, #0
    a1a4:	15943014 	ldrne	r3, [r4, #20]
    a1a8:	15873000 	strne	r3, [r7]
    a1ac:	e3560000 	cmp	r6, #0
    a1b0:	13a00000 	movne	r0, #0
    a1b4:	01a00006 	moveq	r0, r6
    a1b8:	15943018 	ldrne	r3, [r4, #24]
    a1bc:	15863000 	strne	r3, [r6]
    a1c0:	e28dde41 	add	sp, sp, #1040	; 0x410
    a1c4:	e28dd00c 	add	sp, sp, #12
    a1c8:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
    a1cc:	00040003 	.word	0x00040003

0000a1d0 <fb_set_physical_buffer_size>:
    a1d0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    a1d4:	e3a06008 	mov	r6, #8
    a1d8:	e1a08000 	mov	r8, r0
    a1dc:	e1a07001 	mov	r7, r1
    a1e0:	e3a05000 	mov	r5, #0
    a1e4:	e3a03020 	mov	r3, #32
    a1e8:	e24dde41 	sub	sp, sp, #1040	; 0x410
    a1ec:	e24dd008 	sub	sp, sp, #8
    a1f0:	e08d2006 	add	r2, sp, r6
    a1f4:	e5981000 	ldr	r1, [r8]
    a1f8:	e282400f 	add	r4, r2, #15
    a1fc:	e59f006c 	ldr	r0, [pc, #108]	; a270 <fb_set_physical_buffer_size+0xa0>
    a200:	e3c4400f 	bic	r4, r4, #15
    a204:	e5972000 	ldr	r2, [r7]
    a208:	e5845004 	str	r5, [r4, #4]
    a20c:	e5840008 	str	r0, [r4, #8]
    a210:	e584600c 	str	r6, [r4, #12]
    a214:	e1a00006 	mov	r0, r6
    a218:	e5846010 	str	r6, [r4, #16]
    a21c:	e5841014 	str	r1, [r4, #20]
    a220:	e1a01004 	mov	r1, r4
    a224:	e5842018 	str	r2, [r4, #24]
    a228:	e584501c 	str	r5, [r4, #28]
    a22c:	e5843000 	str	r3, [r4]
    a230:	eb0003be 	bl	b130 <postman_send>
    a234:	e08d3006 	add	r3, sp, r6
    a238:	e2431004 	sub	r1, r3, #4
    a23c:	e1a00006 	mov	r0, r6
    a240:	eb000385 	bl	b05c <postman_recv>
    a244:	e5943004 	ldr	r3, [r4, #4]
    a248:	e3530102 	cmp	r3, #-2147483648	; 0x80000000
    a24c:	01a00005 	moveq	r0, r5
    a250:	13a00001 	movne	r0, #1
    a254:	05942014 	ldreq	r2, [r4, #20]
    a258:	05943018 	ldreq	r3, [r4, #24]
    a25c:	05882000 	streq	r2, [r8]
    a260:	05873000 	streq	r3, [r7]
    a264:	e28dde41 	add	sp, sp, #1040	; 0x410
    a268:	e28dd008 	add	sp, sp, #8
    a26c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    a270:	00048003 	.word	0x00048003

0000a274 <fb_allocate_buffer>:
    a274:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    a278:	e3a06008 	mov	r6, #8
    a27c:	e3a02010 	mov	r2, #16
    a280:	e3a05000 	mov	r5, #0
    a284:	e3a0c004 	mov	ip, #4
    a288:	e3a03020 	mov	r3, #32
    a28c:	e24dde41 	sub	sp, sp, #1040	; 0x410
    a290:	e24dd008 	sub	sp, sp, #8
    a294:	e08de006 	add	lr, sp, r6
    a298:	e28e400f 	add	r4, lr, #15
    a29c:	e3c4400f 	bic	r4, r4, #15
    a2a0:	e59fe06c 	ldr	lr, [pc, #108]	; a314 <fb_allocate_buffer+0xa0>
    a2a4:	e1a08000 	mov	r8, r0
    a2a8:	e1a07001 	mov	r7, r1
    a2ac:	e1a00006 	mov	r0, r6
    a2b0:	e1a01004 	mov	r1, r4
    a2b4:	e5845004 	str	r5, [r4, #4]
    a2b8:	e584e008 	str	lr, [r4, #8]
    a2bc:	e584600c 	str	r6, [r4, #12]
    a2c0:	e584c010 	str	ip, [r4, #16]
    a2c4:	e5842014 	str	r2, [r4, #20]
    a2c8:	e5845018 	str	r5, [r4, #24]
    a2cc:	e584501c 	str	r5, [r4, #28]
    a2d0:	e5843000 	str	r3, [r4]
    a2d4:	eb000395 	bl	b130 <postman_send>
    a2d8:	e08d3006 	add	r3, sp, r6
    a2dc:	e2431004 	sub	r1, r3, #4
    a2e0:	e1a00006 	mov	r0, r6
    a2e4:	eb00035c 	bl	b05c <postman_recv>
    a2e8:	e5943004 	ldr	r3, [r4, #4]
    a2ec:	e3530102 	cmp	r3, #-2147483648	; 0x80000000
    a2f0:	01a00005 	moveq	r0, r5
    a2f4:	13a00001 	movne	r0, #1
    a2f8:	05942014 	ldreq	r2, [r4, #20]
    a2fc:	05943018 	ldreq	r3, [r4, #24]
    a300:	05882000 	streq	r2, [r8]
    a304:	05873000 	streq	r3, [r7]
    a308:	e28dde41 	add	sp, sp, #1040	; 0x410
    a30c:	e28dd008 	add	sp, sp, #8
    a310:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    a314:	00040004 	.word	0x00040004

0000a318 <fb_get_virtual_buffer_size>:
    a318:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    a31c:	e3a05008 	mov	r5, #8
    a320:	e3a03000 	mov	r3, #0
    a324:	e3a02020 	mov	r2, #32
    a328:	e24dde41 	sub	sp, sp, #1040	; 0x410
    a32c:	e24dd00c 	sub	sp, sp, #12
    a330:	e08dc005 	add	ip, sp, r5
    a334:	e28c400f 	add	r4, ip, #15
    a338:	e3c4400f 	bic	r4, r4, #15
    a33c:	e59fc07c 	ldr	ip, [pc, #124]	; a3c0 <fb_get_virtual_buffer_size+0xa8>
    a340:	e1a07000 	mov	r7, r0
    a344:	e1a06001 	mov	r6, r1
    a348:	e1a00005 	mov	r0, r5
    a34c:	e1a01004 	mov	r1, r4
    a350:	e5843004 	str	r3, [r4, #4]
    a354:	e584c008 	str	ip, [r4, #8]
    a358:	e584500c 	str	r5, [r4, #12]
    a35c:	e5843010 	str	r3, [r4, #16]
    a360:	e5843014 	str	r3, [r4, #20]
    a364:	e5843018 	str	r3, [r4, #24]
    a368:	e584301c 	str	r3, [r4, #28]
    a36c:	e5842000 	str	r2, [r4]
    a370:	eb00036e 	bl	b130 <postman_send>
    a374:	e08d3005 	add	r3, sp, r5
    a378:	e2431004 	sub	r1, r3, #4
    a37c:	e1a00005 	mov	r0, r5
    a380:	eb000335 	bl	b05c <postman_recv>
    a384:	e5943004 	ldr	r3, [r4, #4]
    a388:	e3530102 	cmp	r3, #-2147483648	; 0x80000000
    a38c:	13a00001 	movne	r0, #1
    a390:	1a000007 	bne	a3b4 <fb_get_virtual_buffer_size+0x9c>
    a394:	e3570000 	cmp	r7, #0
    a398:	15943014 	ldrne	r3, [r4, #20]
    a39c:	15873000 	strne	r3, [r7]
    a3a0:	e3560000 	cmp	r6, #0
    a3a4:	13a00000 	movne	r0, #0
    a3a8:	01a00006 	moveq	r0, r6
    a3ac:	15943018 	ldrne	r3, [r4, #24]
    a3b0:	15863000 	strne	r3, [r6]
    a3b4:	e28dde41 	add	sp, sp, #1040	; 0x410
    a3b8:	e28dd00c 	add	sp, sp, #12
    a3bc:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
    a3c0:	00040004 	.word	0x00040004

0000a3c4 <fb_set_virtual_buffer_size>:
    a3c4:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    a3c8:	e3a06008 	mov	r6, #8
    a3cc:	e1a08000 	mov	r8, r0
    a3d0:	e1a07001 	mov	r7, r1
    a3d4:	e3a05000 	mov	r5, #0
    a3d8:	e3a03020 	mov	r3, #32
    a3dc:	e24dde41 	sub	sp, sp, #1040	; 0x410
    a3e0:	e24dd008 	sub	sp, sp, #8
    a3e4:	e08d2006 	add	r2, sp, r6
    a3e8:	e5981000 	ldr	r1, [r8]
    a3ec:	e282400f 	add	r4, r2, #15
    a3f0:	e59f006c 	ldr	r0, [pc, #108]	; a464 <fb_set_virtual_buffer_size+0xa0>
    a3f4:	e3c4400f 	bic	r4, r4, #15
    a3f8:	e5972000 	ldr	r2, [r7]
    a3fc:	e5845004 	str	r5, [r4, #4]
    a400:	e5840008 	str	r0, [r4, #8]
    a404:	e584600c 	str	r6, [r4, #12]
    a408:	e1a00006 	mov	r0, r6
    a40c:	e5846010 	str	r6, [r4, #16]
    a410:	e5841014 	str	r1, [r4, #20]
    a414:	e1a01004 	mov	r1, r4
    a418:	e5842018 	str	r2, [r4, #24]
    a41c:	e584501c 	str	r5, [r4, #28]
    a420:	e5843000 	str	r3, [r4]
    a424:	eb000341 	bl	b130 <postman_send>
    a428:	e08d3006 	add	r3, sp, r6
    a42c:	e2431004 	sub	r1, r3, #4
    a430:	e1a00006 	mov	r0, r6
    a434:	eb000308 	bl	b05c <postman_recv>
    a438:	e5943004 	ldr	r3, [r4, #4]
    a43c:	e3530102 	cmp	r3, #-2147483648	; 0x80000000
    a440:	01a00005 	moveq	r0, r5
    a444:	13a00001 	movne	r0, #1
    a448:	05942014 	ldreq	r2, [r4, #20]
    a44c:	05943018 	ldreq	r3, [r4, #24]
    a450:	05882000 	streq	r2, [r8]
    a454:	05873000 	streq	r3, [r7]
    a458:	e28dde41 	add	sp, sp, #1040	; 0x410
    a45c:	e28dd008 	add	sp, sp, #8
    a460:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    a464:	00048004 	.word	0x00048004

0000a468 <fb_set_virtual_offset>:
    a468:	e92d4030 	push	{r4, r5, lr}
    a46c:	e3a05008 	mov	r5, #8
    a470:	e3a03000 	mov	r3, #0
    a474:	e1a0c001 	mov	ip, r1
    a478:	e3a02020 	mov	r2, #32
    a47c:	e24dde41 	sub	sp, sp, #1040	; 0x410
    a480:	e24dd00c 	sub	sp, sp, #12
    a484:	e08d1005 	add	r1, sp, r5
    a488:	e281400f 	add	r4, r1, #15
    a48c:	e59f1054 	ldr	r1, [pc, #84]	; a4e8 <fb_set_virtual_offset+0x80>
    a490:	e3c4400f 	bic	r4, r4, #15
    a494:	e5843004 	str	r3, [r4, #4]
    a498:	e5841008 	str	r1, [r4, #8]
    a49c:	e584500c 	str	r5, [r4, #12]
    a4a0:	e1a01004 	mov	r1, r4
    a4a4:	e5845010 	str	r5, [r4, #16]
    a4a8:	e5840014 	str	r0, [r4, #20]
    a4ac:	e1a00005 	mov	r0, r5
    a4b0:	e584c018 	str	ip, [r4, #24]
    a4b4:	e584301c 	str	r3, [r4, #28]
    a4b8:	e5842000 	str	r2, [r4]
    a4bc:	eb00031b 	bl	b130 <postman_send>
    a4c0:	e08d3005 	add	r3, sp, r5
    a4c4:	e2431004 	sub	r1, r3, #4
    a4c8:	e1a00005 	mov	r0, r5
    a4cc:	eb0002e2 	bl	b05c <postman_recv>
    a4d0:	e5940004 	ldr	r0, [r4, #4]
    a4d4:	e2900102 	adds	r0, r0, #-2147483648	; 0x80000000
    a4d8:	13a00001 	movne	r0, #1
    a4dc:	e28dde41 	add	sp, sp, #1040	; 0x410
    a4e0:	e28dd00c 	add	sp, sp, #12
    a4e4:	e8bd8030 	pop	{r4, r5, pc}
    a4e8:	00048009 	.word	0x00048009

0000a4ec <JSMNR_parse>:
    a4ec:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a4f0:	e28db020 	add	fp, sp, #32
    a4f4:	e24dd024 	sub	sp, sp, #36	; 0x24
    a4f8:	e5904000 	ldr	r4, [r0]
    a4fc:	e1a09000 	mov	r9, r0
    a500:	e1540002 	cmp	r4, r2
    a504:	e50b302c 	str	r3, [fp, #-44]	; 0xffffffd4
    a508:	e590a004 	ldr	sl, [r0, #4]
    a50c:	2a00015a 	bcs	aa7c <JSMNR_parse+0x590>
    a510:	e1a08003 	mov	r8, r3
    a514:	e7d13004 	ldrb	r3, [r1, r4]
    a518:	e3530000 	cmp	r3, #0
    a51c:	0a000156 	beq	aa7c <JSMNR_parse+0x590>
    a520:	e1a05000 	mov	r5, r0
    a524:	e1a06001 	mov	r6, r1
    a528:	e1a00004 	mov	r0, r4
    a52c:	e50b9030 	str	r9, [fp, #-48]	; 0xffffffd0
    a530:	ea00000f 	b	a574 <JSMNR_parse+0x88>
    a534:	e353005d 	cmp	r3, #93	; 0x5d
    a538:	0a000037 	beq	a61c <JSMNR_parse+0x130>
    a53c:	8a000032 	bhi	a60c <JSMNR_parse+0x120>
    a540:	e353003a 	cmp	r3, #58	; 0x3a
    a544:	1a000188 	bne	ab6c <JSMNR_parse+0x680>
    a548:	e5953004 	ldr	r3, [r5, #4]
    a54c:	e2433001 	sub	r3, r3, #1
    a550:	e5853008 	str	r3, [r5, #8]
    a554:	e2804001 	add	r4, r0, #1
    a558:	e1540002 	cmp	r4, r2
    a55c:	e5854000 	str	r4, [r5]
    a560:	2a000144 	bcs	aa78 <JSMNR_parse+0x58c>
    a564:	e7d63004 	ldrb	r3, [r6, r4]
    a568:	e3530000 	cmp	r3, #0
    a56c:	0a000141 	beq	aa78 <JSMNR_parse+0x58c>
    a570:	e1a00004 	mov	r0, r4
    a574:	e353002c 	cmp	r3, #44	; 0x2c
    a578:	0a00015d 	beq	aaf4 <JSMNR_parse+0x608>
    a57c:	8affffec 	bhi	a534 <JSMNR_parse+0x48>
    a580:	e353000d 	cmp	r3, #13
    a584:	0afffff2 	beq	a554 <JSMNR_parse+0x68>
    a588:	9a0000fc 	bls	a980 <JSMNR_parse+0x494>
    a58c:	e3530020 	cmp	r3, #32
    a590:	0affffef 	beq	a554 <JSMNR_parse+0x68>
    a594:	e3530022 	cmp	r3, #34	; 0x22
    a598:	1a0000fb 	bne	a98c <JSMNR_parse+0x4a0>
    a59c:	e284c001 	add	ip, r4, #1
    a5a0:	e152000c 	cmp	r2, ip
    a5a4:	e585c000 	str	ip, [r5]
    a5a8:	e1a0000c 	mov	r0, ip
    a5ac:	9a000011 	bls	a5f8 <JSMNR_parse+0x10c>
    a5b0:	e7d6300c 	ldrb	r3, [r6, ip]
    a5b4:	e3530000 	cmp	r3, #0
    a5b8:	1a000007 	bne	a5dc <JSMNR_parse+0xf0>
    a5bc:	ea00000d 	b	a5f8 <JSMNR_parse+0x10c>
    a5c0:	e2800001 	add	r0, r0, #1
    a5c4:	e1520000 	cmp	r2, r0
    a5c8:	e5850000 	str	r0, [r5]
    a5cc:	9a000009 	bls	a5f8 <JSMNR_parse+0x10c>
    a5d0:	e7d63000 	ldrb	r3, [r6, r0]
    a5d4:	e3530000 	cmp	r3, #0
    a5d8:	0a000006 	beq	a5f8 <JSMNR_parse+0x10c>
    a5dc:	e3530022 	cmp	r3, #34	; 0x22
    a5e0:	0a000196 	beq	ac40 <JSMNR_parse+0x754>
    a5e4:	e353005c 	cmp	r3, #92	; 0x5c
    a5e8:	1afffff4 	bne	a5c0 <JSMNR_parse+0xd4>
    a5ec:	e2801001 	add	r1, r0, #1
    a5f0:	e1520001 	cmp	r2, r1
    a5f4:	8a00004b 	bhi	a728 <JSMNR_parse+0x23c>
    a5f8:	e3e0a002 	mvn	sl, #2
    a5fc:	e5854000 	str	r4, [r5]
    a600:	e1a0000a 	mov	r0, sl
    a604:	e24bd020 	sub	sp, fp, #32
    a608:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a60c:	e353007b 	cmp	r3, #123	; 0x7b
    a610:	0a000157 	beq	ab74 <JSMNR_parse+0x688>
    a614:	e353007d 	cmp	r3, #125	; 0x7d
    a618:	1a0000db 	bne	a98c <JSMNR_parse+0x4a0>
    a61c:	e3580000 	cmp	r8, #0
    a620:	0affffcb 	beq	a554 <JSMNR_parse+0x68>
    a624:	e353007d 	cmp	r3, #125	; 0x7d
    a628:	13a01002 	movne	r1, #2
    a62c:	03a01001 	moveq	r1, #1
    a630:	e5959004 	ldr	r9, [r5, #4]
    a634:	e50b1034 	str	r1, [fp, #-52]	; 0xffffffcc
    a638:	e50b1028 	str	r1, [fp, #-40]	; 0xffffffd8
    a63c:	e2591001 	subs	r1, r9, #1
    a640:	4a000199 	bmi	acac <JSMNR_parse+0x7c0>
    a644:	e249c21f 	sub	ip, r9, #-268435455	; 0xf0000001
    a648:	e088c20c 	add	ip, r8, ip, lsl #4
    a64c:	e59ce004 	ldr	lr, [ip, #4]
    a650:	e37e0001 	cmn	lr, #1
    a654:	0a000002 	beq	a664 <JSMNR_parse+0x178>
    a658:	e59c7008 	ldr	r7, [ip, #8]
    a65c:	e3770001 	cmn	r7, #1
    a660:	0a000161 	beq	abec <JSMNR_parse+0x700>
    a664:	e2411001 	sub	r1, r1, #1
    a668:	e3710001 	cmn	r1, #1
    a66c:	e24cc010 	sub	ip, ip, #16
    a670:	1afffff5 	bne	a64c <JSMNR_parse+0x160>
    a674:	e3a05000 	mov	r5, #0
    a678:	e51b2034 	ldr	r2, [fp, #-52]	; 0xffffffcc
    a67c:	e3a01003 	mov	r1, #3
    a680:	e58d2008 	str	r2, [sp, #8]
    a684:	e58d9004 	str	r9, [sp, #4]
    a688:	e58d3000 	str	r3, [sp]
    a68c:	e59f266c 	ldr	r2, [pc, #1644]	; ad00 <JSMNR_parse+0x814>
    a690:	e1a03004 	mov	r3, r4
    a694:	e59f0668 	ldr	r0, [pc, #1640]	; ad04 <JSMNR_parse+0x818>
    a698:	ebfffc45 	bl	97b4 <LogWrite>
    a69c:	e59f2664 	ldr	r2, [pc, #1636]	; ad08 <JSMNR_parse+0x81c>
    a6a0:	e3a01003 	mov	r1, #3
    a6a4:	e59f0658 	ldr	r0, [pc, #1624]	; ad04 <JSMNR_parse+0x818>
    a6a8:	e1a09005 	mov	r9, r5
    a6ac:	ebfffc40 	bl	97b4 <LogWrite>
    a6b0:	e59f864c 	ldr	r8, [pc, #1612]	; ad04 <JSMNR_parse+0x818>
    a6b4:	e1a00006 	mov	r0, r6
    a6b8:	eb0087a1 	bl	2c544 <strlen>
    a6bc:	e1550000 	cmp	r5, r0
    a6c0:	e0861005 	add	r1, r6, r5
    a6c4:	2a000013 	bcs	a718 <JSMNR_parse+0x22c>
    a6c8:	e1a0700d 	mov	r7, sp
    a6cc:	e24dd058 	sub	sp, sp, #88	; 0x58
    a6d0:	e28d4010 	add	r4, sp, #16
    a6d4:	e3a02051 	mov	r2, #81	; 0x51
    a6d8:	e1a00004 	mov	r0, r4
    a6dc:	eb008783 	bl	2c4f0 <strlcpy>
    a6e0:	e5c49050 	strb	r9, [r4, #80]	; 0x50
    a6e4:	e1a02004 	mov	r2, r4
    a6e8:	e3a01003 	mov	r1, #3
    a6ec:	e1a00008 	mov	r0, r8
    a6f0:	ebfffc2f 	bl	97b4 <LogWrite>
    a6f4:	e2855050 	add	r5, r5, #80	; 0x50
    a6f8:	e1a0d007 	mov	sp, r7
    a6fc:	eaffffec 	b	a6b4 <JSMNR_parse+0x1c8>
    a700:	e59f2604 	ldr	r2, [pc, #1540]	; ad0c <JSMNR_parse+0x820>
    a704:	e58d1000 	str	r1, [sp]
    a708:	e3a01004 	mov	r1, #4
    a70c:	e59f05f0 	ldr	r0, [pc, #1520]	; ad04 <JSMNR_parse+0x818>
    a710:	ebfffc27 	bl	97b4 <LogWrite>
    a714:	e5854000 	str	r4, [r5]
    a718:	e3e0a001 	mvn	sl, #1
    a71c:	e1a0000a 	mov	r0, sl
    a720:	e24bd020 	sub	sp, fp, #32
    a724:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a728:	e5851000 	str	r1, [r5]
    a72c:	e7d63001 	ldrb	r3, [r6, r1]
    a730:	e243e022 	sub	lr, r3, #34	; 0x22
    a734:	e35e0053 	cmp	lr, #83	; 0x53
    a738:	979ff10e 	ldrls	pc, [pc, lr, lsl #2]
    a73c:	eaffffef 	b	a700 <JSMNR_parse+0x214>
    a740:	0000a890 	.word	0x0000a890
    a744:	0000a700 	.word	0x0000a700
    a748:	0000a700 	.word	0x0000a700
    a74c:	0000a700 	.word	0x0000a700
    a750:	0000a700 	.word	0x0000a700
    a754:	0000a700 	.word	0x0000a700
    a758:	0000a700 	.word	0x0000a700
    a75c:	0000a700 	.word	0x0000a700
    a760:	0000a700 	.word	0x0000a700
    a764:	0000a700 	.word	0x0000a700
    a768:	0000a700 	.word	0x0000a700
    a76c:	0000a700 	.word	0x0000a700
    a770:	0000a700 	.word	0x0000a700
    a774:	0000a890 	.word	0x0000a890
    a778:	0000a700 	.word	0x0000a700
    a77c:	0000a700 	.word	0x0000a700
    a780:	0000a700 	.word	0x0000a700
    a784:	0000a700 	.word	0x0000a700
    a788:	0000a700 	.word	0x0000a700
    a78c:	0000a700 	.word	0x0000a700
    a790:	0000a700 	.word	0x0000a700
    a794:	0000a700 	.word	0x0000a700
    a798:	0000a700 	.word	0x0000a700
    a79c:	0000a700 	.word	0x0000a700
    a7a0:	0000a700 	.word	0x0000a700
    a7a4:	0000a700 	.word	0x0000a700
    a7a8:	0000a700 	.word	0x0000a700
    a7ac:	0000a700 	.word	0x0000a700
    a7b0:	0000a700 	.word	0x0000a700
    a7b4:	0000a700 	.word	0x0000a700
    a7b8:	0000a700 	.word	0x0000a700
    a7bc:	0000a700 	.word	0x0000a700
    a7c0:	0000a700 	.word	0x0000a700
    a7c4:	0000a700 	.word	0x0000a700
    a7c8:	0000a700 	.word	0x0000a700
    a7cc:	0000a700 	.word	0x0000a700
    a7d0:	0000a700 	.word	0x0000a700
    a7d4:	0000a700 	.word	0x0000a700
    a7d8:	0000a700 	.word	0x0000a700
    a7dc:	0000a700 	.word	0x0000a700
    a7e0:	0000a700 	.word	0x0000a700
    a7e4:	0000a700 	.word	0x0000a700
    a7e8:	0000a700 	.word	0x0000a700
    a7ec:	0000a700 	.word	0x0000a700
    a7f0:	0000a700 	.word	0x0000a700
    a7f4:	0000a700 	.word	0x0000a700
    a7f8:	0000a700 	.word	0x0000a700
    a7fc:	0000a700 	.word	0x0000a700
    a800:	0000a700 	.word	0x0000a700
    a804:	0000a700 	.word	0x0000a700
    a808:	0000a700 	.word	0x0000a700
    a80c:	0000a700 	.word	0x0000a700
    a810:	0000a700 	.word	0x0000a700
    a814:	0000a700 	.word	0x0000a700
    a818:	0000a700 	.word	0x0000a700
    a81c:	0000a700 	.word	0x0000a700
    a820:	0000a700 	.word	0x0000a700
    a824:	0000a700 	.word	0x0000a700
    a828:	0000a890 	.word	0x0000a890
    a82c:	0000a700 	.word	0x0000a700
    a830:	0000a700 	.word	0x0000a700
    a834:	0000a700 	.word	0x0000a700
    a838:	0000a700 	.word	0x0000a700
    a83c:	0000a700 	.word	0x0000a700
    a840:	0000a890 	.word	0x0000a890
    a844:	0000a700 	.word	0x0000a700
    a848:	0000a700 	.word	0x0000a700
    a84c:	0000a700 	.word	0x0000a700
    a850:	0000a890 	.word	0x0000a890
    a854:	0000a700 	.word	0x0000a700
    a858:	0000a700 	.word	0x0000a700
    a85c:	0000a700 	.word	0x0000a700
    a860:	0000a700 	.word	0x0000a700
    a864:	0000a700 	.word	0x0000a700
    a868:	0000a700 	.word	0x0000a700
    a86c:	0000a700 	.word	0x0000a700
    a870:	0000a890 	.word	0x0000a890
    a874:	0000a700 	.word	0x0000a700
    a878:	0000a700 	.word	0x0000a700
    a87c:	0000a700 	.word	0x0000a700
    a880:	0000a890 	.word	0x0000a890
    a884:	0000a700 	.word	0x0000a700
    a888:	0000a890 	.word	0x0000a890
    a88c:	0000a898 	.word	0x0000a898
    a890:	e1a00001 	mov	r0, r1
    a894:	eaffff49 	b	a5c0 <JSMNR_parse+0xd4>
    a898:	e2801002 	add	r1, r0, #2
    a89c:	e1520001 	cmp	r2, r1
    a8a0:	e5851000 	str	r1, [r5]
    a8a4:	9a000033 	bls	a978 <JSMNR_parse+0x48c>
    a8a8:	e7d63001 	ldrb	r3, [r6, r1]
    a8ac:	e3530000 	cmp	r3, #0
    a8b0:	0a000030 	beq	a978 <JSMNR_parse+0x48c>
    a8b4:	e3c3e020 	bic	lr, r3, #32
    a8b8:	e24ee041 	sub	lr, lr, #65	; 0x41
    a8bc:	e2437030 	sub	r7, r3, #48	; 0x30
    a8c0:	e35e0005 	cmp	lr, #5
    a8c4:	83570009 	cmphi	r7, #9
    a8c8:	8a0000fa 	bhi	acb8 <JSMNR_parse+0x7cc>
    a8cc:	e2801003 	add	r1, r0, #3
    a8d0:	e1510002 	cmp	r1, r2
    a8d4:	e5851000 	str	r1, [r5]
    a8d8:	2a000026 	bcs	a978 <JSMNR_parse+0x48c>
    a8dc:	e7d63001 	ldrb	r3, [r6, r1]
    a8e0:	e3530000 	cmp	r3, #0
    a8e4:	0a000023 	beq	a978 <JSMNR_parse+0x48c>
    a8e8:	e3c3e020 	bic	lr, r3, #32
    a8ec:	e24ee041 	sub	lr, lr, #65	; 0x41
    a8f0:	e6efe07e 	uxtb	lr, lr
    a8f4:	e2437030 	sub	r7, r3, #48	; 0x30
    a8f8:	e35e0005 	cmp	lr, #5
    a8fc:	83570009 	cmphi	r7, #9
    a900:	8a0000ec 	bhi	acb8 <JSMNR_parse+0x7cc>
    a904:	e2801004 	add	r1, r0, #4
    a908:	e1520001 	cmp	r2, r1
    a90c:	e5851000 	str	r1, [r5]
    a910:	9a000018 	bls	a978 <JSMNR_parse+0x48c>
    a914:	e7d63001 	ldrb	r3, [r6, r1]
    a918:	e3530000 	cmp	r3, #0
    a91c:	0a000015 	beq	a978 <JSMNR_parse+0x48c>
    a920:	e3c3e020 	bic	lr, r3, #32
    a924:	e24ee041 	sub	lr, lr, #65	; 0x41
    a928:	e6efe07e 	uxtb	lr, lr
    a92c:	e2437030 	sub	r7, r3, #48	; 0x30
    a930:	e35e0005 	cmp	lr, #5
    a934:	83570009 	cmphi	r7, #9
    a938:	8a0000de 	bhi	acb8 <JSMNR_parse+0x7cc>
    a93c:	e2801005 	add	r1, r0, #5
    a940:	e1520001 	cmp	r2, r1
    a944:	e5851000 	str	r1, [r5]
    a948:	9a00000a 	bls	a978 <JSMNR_parse+0x48c>
    a94c:	e7d63001 	ldrb	r3, [r6, r1]
    a950:	e3530000 	cmp	r3, #0
    a954:	0a000007 	beq	a978 <JSMNR_parse+0x48c>
    a958:	e3c3e020 	bic	lr, r3, #32
    a95c:	e24ee041 	sub	lr, lr, #65	; 0x41
    a960:	e6efe07e 	uxtb	lr, lr
    a964:	e2437030 	sub	r7, r3, #48	; 0x30
    a968:	e35e0005 	cmp	lr, #5
    a96c:	83570009 	cmphi	r7, #9
    a970:	8a0000d0 	bhi	acb8 <JSMNR_parse+0x7cc>
    a974:	e2801006 	add	r1, r0, #6
    a978:	e2410001 	sub	r0, r1, #1
    a97c:	eaffff0f 	b	a5c0 <JSMNR_parse+0xd4>
    a980:	e2431009 	sub	r1, r3, #9
    a984:	e3510001 	cmp	r1, #1
    a988:	9afffef1 	bls	a554 <JSMNR_parse+0x68>
    a98c:	e1520004 	cmp	r2, r4
    a990:	e1a01004 	mov	r1, r4
    a994:	9a000019 	bls	aa00 <JSMNR_parse+0x514>
    a998:	e0860004 	add	r0, r6, r4
    a99c:	ea00000f 	b	a9e0 <JSMNR_parse+0x4f4>
    a9a0:	e3530009 	cmp	r3, #9
    a9a4:	3a000003 	bcc	a9b8 <JSMNR_parse+0x4cc>
    a9a8:	e353000a 	cmp	r3, #10
    a9ac:	9a000013 	bls	aa00 <JSMNR_parse+0x514>
    a9b0:	e353000d 	cmp	r3, #13
    a9b4:	0a000011 	beq	aa00 <JSMNR_parse+0x514>
    a9b8:	e243c020 	sub	ip, r3, #32
    a9bc:	e35c005e 	cmp	ip, #94	; 0x5e
    a9c0:	8a000048 	bhi	aae8 <JSMNR_parse+0x5fc>
    a9c4:	e2811001 	add	r1, r1, #1
    a9c8:	e1520001 	cmp	r2, r1
    a9cc:	e5851000 	str	r1, [r5]
    a9d0:	0a000083 	beq	abe4 <JSMNR_parse+0x6f8>
    a9d4:	e5f03001 	ldrb	r3, [r0, #1]!
    a9d8:	e3530000 	cmp	r3, #0
    a9dc:	0a000007 	beq	aa00 <JSMNR_parse+0x514>
    a9e0:	e3530020 	cmp	r3, #32
    a9e4:	0a000005 	beq	aa00 <JSMNR_parse+0x514>
    a9e8:	9affffec 	bls	a9a0 <JSMNR_parse+0x4b4>
    a9ec:	e353003a 	cmp	r3, #58	; 0x3a
    a9f0:	0a000002 	beq	aa00 <JSMNR_parse+0x514>
    a9f4:	8a000034 	bhi	aacc <JSMNR_parse+0x5e0>
    a9f8:	e353002c 	cmp	r3, #44	; 0x2c
    a9fc:	1affffed 	bne	a9b8 <JSMNR_parse+0x4cc>
    aa00:	e3580000 	cmp	r8, #0
    aa04:	02410001 	subeq	r0, r1, #1
    aa08:	028aa001 	addeq	sl, sl, #1
    aa0c:	0afffed0 	beq	a554 <JSMNR_parse+0x68>
    aa10:	e5950004 	ldr	r0, [r5, #4]
    aa14:	e59b3004 	ldr	r3, [fp, #4]
    aa18:	e1530000 	cmp	r3, r0
    aa1c:	9a0000aa 	bls	accc <JSMNR_parse+0x7e0>
    aa20:	e3a0e000 	mov	lr, #0
    aa24:	e280c001 	add	ip, r0, #1
    aa28:	e585c004 	str	ip, [r5, #4]
    aa2c:	e088c200 	add	ip, r8, r0, lsl #4
    aa30:	e5953008 	ldr	r3, [r5, #8]
    aa34:	e58ce00c 	str	lr, [ip, #12]
    aa38:	e3a0e004 	mov	lr, #4
    aa3c:	e3730001 	cmn	r3, #1
    aa40:	10883203 	addne	r3, r8, r3, lsl #4
    aa44:	e7c8e200 	strb	lr, [r8, r0, lsl #4]
    aa48:	e58c1008 	str	r1, [ip, #8]
    aa4c:	e2410001 	sub	r0, r1, #1
    aa50:	1593100c 	ldrne	r1, [r3, #12]
    aa54:	e58c4004 	str	r4, [ip, #4]
    aa58:	12811001 	addne	r1, r1, #1
    aa5c:	e2804001 	add	r4, r0, #1
    aa60:	e5850000 	str	r0, [r5]
    aa64:	1583100c 	strne	r1, [r3, #12]
    aa68:	e1540002 	cmp	r4, r2
    aa6c:	e28aa001 	add	sl, sl, #1
    aa70:	e5854000 	str	r4, [r5]
    aa74:	3afffeba 	bcc	a564 <JSMNR_parse+0x78>
    aa78:	e51b9030 	ldr	r9, [fp, #-48]	; 0xffffffd0
    aa7c:	e51b102c 	ldr	r1, [fp, #-44]	; 0xffffffd4
    aa80:	e3510000 	cmp	r1, #0
    aa84:	0afffedd 	beq	a600 <JSMNR_parse+0x114>
    aa88:	e5993004 	ldr	r3, [r9, #4]
    aa8c:	e2532001 	subs	r2, r3, #1
    aa90:	4afffeda 	bmi	a600 <JSMNR_parse+0x114>
    aa94:	e0813203 	add	r3, r1, r3, lsl #4
    aa98:	ea000002 	b	aaa8 <JSMNR_parse+0x5bc>
    aa9c:	e3720001 	cmn	r2, #1
    aaa0:	e2433010 	sub	r3, r3, #16
    aaa4:	0afffed5 	beq	a600 <JSMNR_parse+0x114>
    aaa8:	e513100c 	ldr	r1, [r3, #-12]
    aaac:	e2422001 	sub	r2, r2, #1
    aab0:	e3710001 	cmn	r1, #1
    aab4:	0afffff8 	beq	aa9c <JSMNR_parse+0x5b0>
    aab8:	e5131008 	ldr	r1, [r3, #-8]
    aabc:	e3710001 	cmn	r1, #1
    aac0:	1afffff5 	bne	aa9c <JSMNR_parse+0x5b0>
    aac4:	e3e0a002 	mvn	sl, #2
    aac8:	eafffecc 	b	a600 <JSMNR_parse+0x114>
    aacc:	e353005d 	cmp	r3, #93	; 0x5d
    aad0:	0affffca 	beq	aa00 <JSMNR_parse+0x514>
    aad4:	e353007d 	cmp	r3, #125	; 0x7d
    aad8:	0affffc8 	beq	aa00 <JSMNR_parse+0x514>
    aadc:	e243c020 	sub	ip, r3, #32
    aae0:	e35c005e 	cmp	ip, #94	; 0x5e
    aae4:	9affffb6 	bls	a9c4 <JSMNR_parse+0x4d8>
    aae8:	e58d1000 	str	r1, [sp]
    aaec:	e59f221c 	ldr	r2, [pc, #540]	; ad10 <JSMNR_parse+0x824>
    aaf0:	eaffff04 	b	a708 <JSMNR_parse+0x21c>
    aaf4:	e3580000 	cmp	r8, #0
    aaf8:	0afffe95 	beq	a554 <JSMNR_parse+0x68>
    aafc:	e5953008 	ldr	r3, [r5, #8]
    ab00:	e3730001 	cmn	r3, #1
    ab04:	0afffe92 	beq	a554 <JSMNR_parse+0x68>
    ab08:	e7d83203 	ldrb	r3, [r8, r3, lsl #4]
    ab0c:	e2433001 	sub	r3, r3, #1
    ab10:	e3530001 	cmp	r3, #1
    ab14:	9afffe8e 	bls	a554 <JSMNR_parse+0x68>
    ab18:	e5953004 	ldr	r3, [r5, #4]
    ab1c:	e253c001 	subs	ip, r3, #1
    ab20:	4afffe8b 	bmi	a554 <JSMNR_parse+0x68>
    ab24:	e0883203 	add	r3, r8, r3, lsl #4
    ab28:	ea000003 	b	ab3c <JSMNR_parse+0x650>
    ab2c:	e24cc001 	sub	ip, ip, #1
    ab30:	e37c0001 	cmn	ip, #1
    ab34:	e2433010 	sub	r3, r3, #16
    ab38:	0afffe85 	beq	a554 <JSMNR_parse+0x68>
    ab3c:	e5531010 	ldrb	r1, [r3, #-16]
    ab40:	e2411001 	sub	r1, r1, #1
    ab44:	e3510001 	cmp	r1, #1
    ab48:	8afffff7 	bhi	ab2c <JSMNR_parse+0x640>
    ab4c:	e513100c 	ldr	r1, [r3, #-12]
    ab50:	e3710001 	cmn	r1, #1
    ab54:	0afffff4 	beq	ab2c <JSMNR_parse+0x640>
    ab58:	e5131008 	ldr	r1, [r3, #-8]
    ab5c:	e3710001 	cmn	r1, #1
    ab60:	1afffff1 	bne	ab2c <JSMNR_parse+0x640>
    ab64:	e585c008 	str	ip, [r5, #8]
    ab68:	eafffe79 	b	a554 <JSMNR_parse+0x68>
    ab6c:	e353005b 	cmp	r3, #91	; 0x5b
    ab70:	1affff85 	bne	a98c <JSMNR_parse+0x4a0>
    ab74:	e3580000 	cmp	r8, #0
    ab78:	e28aa001 	add	sl, sl, #1
    ab7c:	0afffe74 	beq	a554 <JSMNR_parse+0x68>
    ab80:	e5951004 	ldr	r1, [r5, #4]
    ab84:	e59bc004 	ldr	ip, [fp, #4]
    ab88:	e15c0001 	cmp	ip, r1
    ab8c:	9a00004c 	bls	acc4 <JSMNR_parse+0x7d8>
    ab90:	e2817001 	add	r7, r1, #1
    ab94:	e5857004 	str	r7, [r5, #4]
    ab98:	e3e07000 	mvn	r7, #0
    ab9c:	e088c201 	add	ip, r8, r1, lsl #4
    aba0:	e595e008 	ldr	lr, [r5, #8]
    aba4:	e58c7004 	str	r7, [ip, #4]
    aba8:	e58c7008 	str	r7, [ip, #8]
    abac:	e3a07000 	mov	r7, #0
    abb0:	e37e0001 	cmn	lr, #1
    abb4:	e58c700c 	str	r7, [ip, #12]
    abb8:	1088e20e 	addne	lr, r8, lr, lsl #4
    abbc:	159e700c 	ldrne	r7, [lr, #12]
    abc0:	12877001 	addne	r7, r7, #1
    abc4:	158e700c 	strne	r7, [lr, #12]
    abc8:	e353007b 	cmp	r3, #123	; 0x7b
    abcc:	13a03002 	movne	r3, #2
    abd0:	03a03001 	moveq	r3, #1
    abd4:	e7c83201 	strb	r3, [r8, r1, lsl #4]
    abd8:	e58c4004 	str	r4, [ip, #4]
    abdc:	e5851008 	str	r1, [r5, #8]
    abe0:	eafffe5b 	b	a554 <JSMNR_parse+0x68>
    abe4:	e1a01002 	mov	r1, r2
    abe8:	eaffff84 	b	aa00 <JSMNR_parse+0x514>
    abec:	e5dc3000 	ldrb	r3, [ip]
    abf0:	e51b9028 	ldr	r9, [fp, #-40]	; 0xffffffd8
    abf4:	e1530009 	cmp	r3, r9
    abf8:	1a000036 	bne	acd8 <JSMNR_parse+0x7ec>
    abfc:	e2844001 	add	r4, r4, #1
    ac00:	e5857008 	str	r7, [r5, #8]
    ac04:	e0883201 	add	r3, r8, r1, lsl #4
    ac08:	e58c4008 	str	r4, [ip, #8]
    ac0c:	ea000003 	b	ac20 <JSMNR_parse+0x734>
    ac10:	e2411001 	sub	r1, r1, #1
    ac14:	e3710001 	cmn	r1, #1
    ac18:	e2433010 	sub	r3, r3, #16
    ac1c:	0afffe4c 	beq	a554 <JSMNR_parse+0x68>
    ac20:	e593c004 	ldr	ip, [r3, #4]
    ac24:	e37c0001 	cmn	ip, #1
    ac28:	0afffff8 	beq	ac10 <JSMNR_parse+0x724>
    ac2c:	e593c008 	ldr	ip, [r3, #8]
    ac30:	e37c0001 	cmn	ip, #1
    ac34:	1afffff5 	bne	ac10 <JSMNR_parse+0x724>
    ac38:	e5851008 	str	r1, [r5, #8]
    ac3c:	eafffe44 	b	a554 <JSMNR_parse+0x68>
    ac40:	e3580000 	cmp	r8, #0
    ac44:	0a000016 	beq	aca4 <JSMNR_parse+0x7b8>
    ac48:	e5951004 	ldr	r1, [r5, #4]
    ac4c:	e59b3004 	ldr	r3, [fp, #4]
    ac50:	e1530001 	cmp	r3, r1
    ac54:	9a00001c 	bls	accc <JSMNR_parse+0x7e0>
    ac58:	e3a04000 	mov	r4, #0
    ac5c:	e281e001 	add	lr, r1, #1
    ac60:	e585e004 	str	lr, [r5, #4]
    ac64:	e088e201 	add	lr, r8, r1, lsl #4
    ac68:	e5953008 	ldr	r3, [r5, #8]
    ac6c:	e58e400c 	str	r4, [lr, #12]
    ac70:	e3a04003 	mov	r4, #3
    ac74:	e3730001 	cmn	r3, #1
    ac78:	e7c84201 	strb	r4, [r8, r1, lsl #4]
    ac7c:	e28aa001 	add	sl, sl, #1
    ac80:	e58ec004 	str	ip, [lr, #4]
    ac84:	e58e0008 	str	r0, [lr, #8]
    ac88:	0afffe31 	beq	a554 <JSMNR_parse+0x68>
    ac8c:	e0883203 	add	r3, r8, r3, lsl #4
    ac90:	e593100c 	ldr	r1, [r3, #12]
    ac94:	e5950000 	ldr	r0, [r5]
    ac98:	e2811001 	add	r1, r1, #1
    ac9c:	e583100c 	str	r1, [r3, #12]
    aca0:	eafffe2b 	b	a554 <JSMNR_parse+0x68>
    aca4:	e28aa001 	add	sl, sl, #1
    aca8:	eafffe29 	b	a554 <JSMNR_parse+0x68>
    acac:	e3710001 	cmn	r1, #1
    acb0:	1afffe27 	bne	a554 <JSMNR_parse+0x68>
    acb4:	eafffe6e 	b	a674 <JSMNR_parse+0x188>
    acb8:	e58d1000 	str	r1, [sp]
    acbc:	e59f2050 	ldr	r2, [pc, #80]	; ad14 <JSMNR_parse+0x828>
    acc0:	eafffe90 	b	a708 <JSMNR_parse+0x21c>
    acc4:	e3e0a000 	mvn	sl, #0
    acc8:	eafffe4c 	b	a600 <JSMNR_parse+0x114>
    accc:	e5854000 	str	r4, [r5]
    acd0:	e3e0a000 	mvn	sl, #0
    acd4:	eafffe49 	b	a600 <JSMNR_parse+0x114>
    acd8:	e51b2034 	ldr	r2, [fp, #-52]	; 0xffffffcc
    acdc:	e3a01003 	mov	r1, #3
    ace0:	e58d2004 	str	r2, [sp, #4]
    ace4:	e58d3000 	str	r3, [sp]
    ace8:	e59f2028 	ldr	r2, [pc, #40]	; ad18 <JSMNR_parse+0x82c>
    acec:	e1a0300e 	mov	r3, lr
    acf0:	e59f000c 	ldr	r0, [pc, #12]	; ad04 <JSMNR_parse+0x818>
    acf4:	ebfffaae 	bl	97b4 <LogWrite>
    acf8:	e3e0a001 	mvn	sl, #1
    acfc:	eafffe3f 	b	a600 <JSMNR_parse+0x114>
    ad00:	0002e4f0 	.word	0x0002e4f0
    ad04:	0002e4e8 	.word	0x0002e4e8
    ad08:	0002e534 	.word	0x0002e534
    ad0c:	0002e570 	.word	0x0002e570
    ad10:	0002e598 	.word	0x0002e598
    ad14:	0002e548 	.word	0x0002e548
    ad18:	0002e4c8 	.word	0x0002e4c8

0000ad1c <JSMNR_init>:
    ad1c:	e3a03000 	mov	r3, #0
    ad20:	e3e02000 	mvn	r2, #0
    ad24:	e5803000 	str	r3, [r0]
    ad28:	e5802008 	str	r2, [r0, #8]
    ad2c:	e5803004 	str	r3, [r0, #4]
    ad30:	e12fff1e 	bx	lr

0000ad34 <JSMNR_logLongStr>:
    ad34:	e92d4bf0 	push	{r4, r5, r6, r7, r8, r9, fp, lr}
    ad38:	e2524000 	subs	r4, r2, #0
    ad3c:	e28db01c 	add	fp, sp, #28
    ad40:	e1a02000 	mov	r2, r0
    ad44:	e1a05001 	mov	r5, r1
    ad48:	0a000019 	beq	adb4 <JSMNR_logLongStr+0x80>
    ad4c:	e3a04000 	mov	r4, #0
    ad50:	e3a01003 	mov	r1, #3
    ad54:	e59f00bc 	ldr	r0, [pc, #188]	; ae18 <JSMNR_logLongStr+0xe4>
    ad58:	ebfffa95 	bl	97b4 <LogWrite>
    ad5c:	e1a08004 	mov	r8, r4
    ad60:	e59f70b0 	ldr	r7, [pc, #176]	; ae18 <JSMNR_logLongStr+0xe4>
    ad64:	ea00000b 	b	ad98 <JSMNR_logLongStr+0x64>
    ad68:	e1a0600d 	mov	r6, sp
    ad6c:	e24dd058 	sub	sp, sp, #88	; 0x58
    ad70:	e1a0000d 	mov	r0, sp
    ad74:	e3a02051 	mov	r2, #81	; 0x51
    ad78:	eb0085dc 	bl	2c4f0 <strlcpy>
    ad7c:	e5cd8050 	strb	r8, [sp, #80]	; 0x50
    ad80:	e1a0200d 	mov	r2, sp
    ad84:	e3a01003 	mov	r1, #3
    ad88:	e1a00007 	mov	r0, r7
    ad8c:	ebfffa88 	bl	97b4 <LogWrite>
    ad90:	e1a0d006 	mov	sp, r6
    ad94:	e2844050 	add	r4, r4, #80	; 0x50
    ad98:	e1a00005 	mov	r0, r5
    ad9c:	eb0085e8 	bl	2c544 <strlen>
    ada0:	e1500004 	cmp	r0, r4
    ada4:	e0851004 	add	r1, r5, r4
    ada8:	8affffee 	bhi	ad68 <JSMNR_logLongStr+0x34>
    adac:	e24bd01c 	sub	sp, fp, #28
    adb0:	e8bd8bf0 	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
    adb4:	e3a01004 	mov	r1, #4
    adb8:	e59f0058 	ldr	r0, [pc, #88]	; ae18 <JSMNR_logLongStr+0xe4>
    adbc:	ebfffa7c 	bl	97b4 <LogWrite>
    adc0:	e1a08004 	mov	r8, r4
    adc4:	e59f704c 	ldr	r7, [pc, #76]	; ae18 <JSMNR_logLongStr+0xe4>
    adc8:	ea00000b 	b	adfc <JSMNR_logLongStr+0xc8>
    adcc:	e1a0600d 	mov	r6, sp
    add0:	e24dd058 	sub	sp, sp, #88	; 0x58
    add4:	e1a0000d 	mov	r0, sp
    add8:	e3a02051 	mov	r2, #81	; 0x51
    addc:	eb0085c3 	bl	2c4f0 <strlcpy>
    ade0:	e5cd8050 	strb	r8, [sp, #80]	; 0x50
    ade4:	e1a0200d 	mov	r2, sp
    ade8:	e3a01004 	mov	r1, #4
    adec:	e1a00007 	mov	r0, r7
    adf0:	ebfffa6f 	bl	97b4 <LogWrite>
    adf4:	e1a0d006 	mov	sp, r6
    adf8:	e2844050 	add	r4, r4, #80	; 0x50
    adfc:	e1a00005 	mov	r0, r5
    ae00:	eb0085cf 	bl	2c544 <strlen>
    ae04:	e1500004 	cmp	r0, r4
    ae08:	e0851004 	add	r1, r5, r4
    ae0c:	8affffee 	bhi	adcc <JSMNR_logLongStr+0x98>
    ae10:	e24bd01c 	sub	sp, fp, #28
    ae14:	e8bd8bf0 	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
    ae18:	0002e4e8 	.word	0x0002e4e8

0000ae1c <nmalloc_set_memory_area>:
    ae1c:	e3a03000 	mov	r3, #0
    ae20:	e59f2014 	ldr	r2, [pc, #20]	; ae3c <nmalloc_set_memory_area+0x20>
    ae24:	e5801008 	str	r1, [r0, #8]
    ae28:	e5820000 	str	r0, [r2]
    ae2c:	e5820004 	str	r0, [r2, #4]
    ae30:	e5803000 	str	r3, [r0]
    ae34:	e5803004 	str	r3, [r0, #4]
    ae38:	e12fff1e 	bx	lr
    ae3c:	000428f0 	.word	0x000428f0

0000ae40 <nmalloc_malloc>:
    ae40:	e3500000 	cmp	r0, #0
    ae44:	012fff1e 	bxeq	lr
    ae48:	e2800004 	add	r0, r0, #4
    ae4c:	e350000c 	cmp	r0, #12
    ae50:	33a0000c 	movcc	r0, #12
    ae54:	e59f20d0 	ldr	r2, [pc, #208]	; af2c <nmalloc_malloc+0xec>
    ae58:	e59fc0d0 	ldr	ip, [pc, #208]	; af30 <nmalloc_malloc+0xf0>
    ae5c:	e0832290 	umull	r2, r3, r0, r2
    ae60:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    ae64:	e1a011a3 	lsr	r1, r3, #3
    ae68:	e59ce004 	ldr	lr, [ip, #4]
    ae6c:	e0811081 	add	r1, r1, r1, lsl #1
    ae70:	e1a01101 	lsl	r1, r1, #2
    ae74:	e35e0000 	cmp	lr, #0
    ae78:	e281400c 	add	r4, r1, #12
    ae7c:	e2811018 	add	r1, r1, #24
    ae80:	0a000022 	beq	af10 <nmalloc_malloc+0xd0>
    ae84:	e99e0005 	ldmib	lr, {r0, r2}
    ae88:	e3500000 	cmp	r0, #0
    ae8c:	0a000021 	beq	af18 <nmalloc_malloc+0xd8>
    ae90:	e1520001 	cmp	r2, r1
    ae94:	3a000003 	bcc	aea8 <nmalloc_malloc+0x68>
    ae98:	ea000020 	b	af20 <nmalloc_malloc+0xe0>
    ae9c:	e1510002 	cmp	r1, r2
    aea0:	9a000007 	bls	aec4 <nmalloc_malloc+0x84>
    aea4:	e1a00003 	mov	r0, r3
    aea8:	e5903004 	ldr	r3, [r0, #4]
    aeac:	e5902008 	ldr	r2, [r0, #8]
    aeb0:	e3530000 	cmp	r3, #0
    aeb4:	1afffff8 	bne	ae9c <nmalloc_malloc+0x5c>
    aeb8:	e1510002 	cmp	r1, r2
    aebc:	93a03000 	movls	r3, #0
    aec0:	8a000012 	bhi	af10 <nmalloc_malloc+0xd0>
    aec4:	e59f6060 	ldr	r6, [pc, #96]	; af2c <nmalloc_malloc+0xec>
    aec8:	e5905000 	ldr	r5, [r0]
    aecc:	e0876694 	umull	r6, r7, r4, r6
    aed0:	e1a011a7 	lsr	r1, r7, #3
    aed4:	e0811081 	add	r1, r1, r1, lsl #1
    aed8:	e1a01101 	lsl	r1, r1, #2
    aedc:	e080e001 	add	lr, r0, r1
    aee0:	e3550000 	cmp	r5, #0
    aee4:	e0422004 	sub	r2, r2, r4
    aee8:	e7805001 	str	r5, [r0, r1]
    aeec:	e58e3004 	str	r3, [lr, #4]
    aef0:	e58e2008 	str	r2, [lr, #8]
    aef4:	1585e004 	strne	lr, [r5, #4]
    aef8:	159e3004 	ldrne	r3, [lr, #4]
    aefc:	058ce004 	streq	lr, [ip, #4]
    af00:	e3530000 	cmp	r3, #0
    af04:	1583e000 	strne	lr, [r3]
    af08:	e4804004 	str	r4, [r0], #4
    af0c:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
    af10:	e3a00000 	mov	r0, #0
    af14:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
    af18:	e1a0000e 	mov	r0, lr
    af1c:	eaffffe5 	b	aeb8 <nmalloc_malloc+0x78>
    af20:	e1a03000 	mov	r3, r0
    af24:	e1a0000e 	mov	r0, lr
    af28:	eaffffe5 	b	aec4 <nmalloc_malloc+0x84>
    af2c:	aaaaaaab 	.word	0xaaaaaaab
    af30:	000428f0 	.word	0x000428f0

0000af34 <nmalloc_free>:
    af34:	e59f111c 	ldr	r1, [pc, #284]	; b058 <nmalloc_free+0x124>
    af38:	e92d4010 	push	{r4, lr}
    af3c:	e590e000 	ldr	lr, [r0]
    af40:	e5912004 	ldr	r2, [r1, #4]
    af44:	e51e3004 	ldr	r3, [lr, #-4]
    af48:	e24ec004 	sub	ip, lr, #4
    af4c:	e152000c 	cmp	r2, ip
    af50:	e58e3004 	str	r3, [lr, #4]
    af54:	9a00001f 	bls	afd8 <nmalloc_free+0xa4>
    af58:	e3a04000 	mov	r4, #0
    af5c:	e58e2000 	str	r2, [lr]
    af60:	e1a03002 	mov	r3, r2
    af64:	e1a0200c 	mov	r2, ip
    af68:	e581c004 	str	ip, [r1, #4]
    af6c:	e50e4004 	str	r4, [lr, #-4]
    af70:	e3530000 	cmp	r3, #0
    af74:	0a000000 	beq	af7c <nmalloc_free+0x48>
    af78:	e583c000 	str	ip, [r3]
    af7c:	e3a03000 	mov	r3, #0
    af80:	e5803000 	str	r3, [r0]
    af84:	e5923004 	ldr	r3, [r2, #4]
    af88:	ea000001 	b	af94 <nmalloc_free+0x60>
    af8c:	e1a02003 	mov	r2, r3
    af90:	e5933004 	ldr	r3, [r3, #4]
    af94:	e3530000 	cmp	r3, #0
    af98:	08bd8010 	popeq	{r4, pc}
    af9c:	e5921008 	ldr	r1, [r2, #8]
    afa0:	e0820001 	add	r0, r2, r1
    afa4:	e1500003 	cmp	r0, r3
    afa8:	1afffff7 	bne	af8c <nmalloc_free+0x58>
    afac:	e5930008 	ldr	r0, [r3, #8]
    afb0:	e5933004 	ldr	r3, [r3, #4]
    afb4:	e0801001 	add	r1, r0, r1
    afb8:	e3530000 	cmp	r3, #0
    afbc:	e5821008 	str	r1, [r2, #8]
    afc0:	e5823004 	str	r3, [r2, #4]
    afc4:	08bd8010 	popeq	{r4, pc}
    afc8:	e3530000 	cmp	r3, #0
    afcc:	e5832000 	str	r2, [r3]
    afd0:	1afffff1 	bne	af9c <nmalloc_free+0x68>
    afd4:	e8bd8010 	pop	{r4, pc}
    afd8:	e5921004 	ldr	r1, [r2, #4]
    afdc:	e3510000 	cmp	r1, #0
    afe0:	0a000018 	beq	b048 <nmalloc_free+0x114>
    afe4:	e152000c 	cmp	r2, ip
    afe8:	315c0001 	cmpcc	ip, r1
    afec:	2a000008 	bcs	b014 <nmalloc_free+0xe0>
    aff0:	ea00000e 	b	b030 <nmalloc_free+0xfc>
    aff4:	e15c0001 	cmp	ip, r1
    aff8:	93a04000 	movls	r4, #0
    affc:	83a04001 	movhi	r4, #1
    b000:	e15c0003 	cmp	ip, r3
    b004:	23a04000 	movcs	r4, #0
    b008:	e3540000 	cmp	r4, #0
    b00c:	1a000009 	bne	b038 <nmalloc_free+0x104>
    b010:	e1a01003 	mov	r1, r3
    b014:	e5913004 	ldr	r3, [r1, #4]
    b018:	e3530000 	cmp	r3, #0
    b01c:	1afffff4 	bne	aff4 <nmalloc_free+0xc0>
    b020:	e80e000a 	stmda	lr, {r1, r3}
    b024:	e581c004 	str	ip, [r1, #4]
    b028:	e59e3000 	ldr	r3, [lr]
    b02c:	eaffffcf 	b	af70 <nmalloc_free+0x3c>
    b030:	e1a03001 	mov	r3, r1
    b034:	e1a01002 	mov	r1, r2
    b038:	e3510000 	cmp	r1, #0
    b03c:	e80e000a 	stmda	lr, {r1, r3}
    b040:	1afffff7 	bne	b024 <nmalloc_free+0xf0>
    b044:	eaffffcb 	b	af78 <nmalloc_free+0x44>
    b048:	e58e1000 	str	r1, [lr]
    b04c:	e50e2004 	str	r2, [lr, #-4]
    b050:	e1a01002 	mov	r1, r2
    b054:	eafffff2 	b	b024 <nmalloc_free+0xf0>
    b058:	000428f0 	.word	0x000428f0

0000b05c <postman_recv>:
    b05c:	e350000f 	cmp	r0, #15
    b060:	9a000001 	bls	b06c <postman_recv+0x10>
    b064:	e3a000c3 	mov	r0, #195	; 0xc3
    b068:	e12fff1e 	bx	lr
    b06c:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    b070:	e1a08001 	mov	r8, r1
    b074:	e1a07000 	mov	r7, r0
    b078:	eb002f27 	bl	16d1c <micros>
    b07c:	e3a09014 	mov	r9, #20
    b080:	e1a06000 	mov	r6, r0
    b084:	e59f409c 	ldr	r4, [pc, #156]	; b128 <postman_recv+0xcc>
    b088:	e59f509c 	ldr	r5, [pc, #156]	; b12c <postman_recv+0xd0>
    b08c:	e3a03000 	mov	r3, #0
    b090:	ee073f1e 	mcr	15, 0, r3, cr7, cr14, {0}
    b094:	e5943898 	ldr	r3, [r4, #2200]	; 0x898
    b098:	e3130101 	tst	r3, #1073741824	; 0x40000000
    b09c:	1a000004 	bne	b0b4 <postman_recv+0x58>
    b0a0:	ea00000b 	b	b0d4 <postman_recv+0x78>
    b0a4:	ee070f1e 	mcr	15, 0, r0, cr7, cr14, {0}
    b0a8:	e5943898 	ldr	r3, [r4, #2200]	; 0x898
    b0ac:	e3130101 	tst	r3, #1073741824	; 0x40000000
    b0b0:	0a000007 	beq	b0d4 <postman_recv+0x78>
    b0b4:	eb002f18 	bl	16d1c <micros>
    b0b8:	e1a02005 	mov	r2, r5
    b0bc:	e1a01006 	mov	r1, r6
    b0c0:	eb002f2a 	bl	16d70 <isTimeout>
    b0c4:	e3500000 	cmp	r0, #0
    b0c8:	0afffff5 	beq	b0a4 <postman_recv+0x48>
    b0cc:	e3a000c2 	mov	r0, #194	; 0xc2
    b0d0:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    b0d4:	e3a03000 	mov	r3, #0
    b0d8:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
    b0dc:	e5942880 	ldr	r2, [r4, #2176]	; 0x880
    b0e0:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
    b0e4:	e0273002 	eor	r3, r7, r2
    b0e8:	e313000f 	tst	r3, #15
    b0ec:	0a000009 	beq	b118 <postman_recv+0xbc>
    b0f0:	eb002f09 	bl	16d1c <micros>
    b0f4:	e1a02005 	mov	r2, r5
    b0f8:	e1a01006 	mov	r1, r6
    b0fc:	eb002f1b 	bl	16d70 <isTimeout>
    b100:	e3500000 	cmp	r0, #0
    b104:	1afffff0 	bne	b0cc <postman_recv+0x70>
    b108:	e2599001 	subs	r9, r9, #1
    b10c:	1affffde 	bne	b08c <postman_recv+0x30>
    b110:	e3a000c4 	mov	r0, #196	; 0xc4
    b114:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    b118:	e1a02222 	lsr	r2, r2, #4
    b11c:	e5882000 	str	r2, [r8]
    b120:	e3a000c0 	mov	r0, #192	; 0xc0
    b124:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    b128:	2000b000 	.word	0x2000b000
    b12c:	0007a120 	.word	0x0007a120

0000b130 <postman_send>:
    b130:	e311000f 	tst	r1, #15
    b134:	0a000001 	beq	b140 <postman_send+0x10>
    b138:	e3a000c3 	mov	r0, #195	; 0xc3
    b13c:	e12fff1e 	bx	lr
    b140:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    b144:	e1a08000 	mov	r8, r0
    b148:	e1a04001 	mov	r4, r1
    b14c:	eb002ef2 	bl	16d1c <micros>
    b150:	e59f504c 	ldr	r5, [pc, #76]	; b1a4 <postman_send+0x74>
    b154:	e1a07000 	mov	r7, r0
    b158:	e59f6048 	ldr	r6, [pc, #72]	; b1a8 <postman_send+0x78>
    b15c:	ea000005 	b	b178 <postman_send+0x48>
    b160:	eb002eed 	bl	16d1c <micros>
    b164:	e1a02006 	mov	r2, r6
    b168:	e1a01007 	mov	r1, r7
    b16c:	eb002eff 	bl	16d70 <isTimeout>
    b170:	e3500000 	cmp	r0, #0
    b174:	1a000008 	bne	b19c <postman_send+0x6c>
    b178:	e5953898 	ldr	r3, [r5, #2200]	; 0x898
    b17c:	e3530000 	cmp	r3, #0
    b180:	bafffff6 	blt	b160 <postman_send+0x30>
    b184:	e3a03000 	mov	r3, #0
    b188:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
    b18c:	e1841008 	orr	r1, r4, r8
    b190:	e58518a0 	str	r1, [r5, #2208]	; 0x8a0
    b194:	e3a000c0 	mov	r0, #192	; 0xc0
    b198:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    b19c:	e3a000c1 	mov	r0, #193	; 0xc1
    b1a0:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    b1a4:	2000b000 	.word	0x2000b000
    b1a8:	0007a120 	.word	0x0007a120

0000b1ac <rhw_get_mac_address>:
    b1ac:	e92d4070 	push	{r4, r5, r6, lr}
    b1b0:	e3a05000 	mov	r5, #0
    b1b4:	e3a02006 	mov	r2, #6
    b1b8:	e3a03020 	mov	r3, #32
    b1bc:	e24dde41 	sub	sp, sp, #1040	; 0x410
    b1c0:	e24dd008 	sub	sp, sp, #8
    b1c4:	e59f1084 	ldr	r1, [pc, #132]	; b250 <rhw_get_mac_address+0xa4>
    b1c8:	e28d4017 	add	r4, sp, #23
    b1cc:	e3c4400f 	bic	r4, r4, #15
    b1d0:	e5845004 	str	r5, [r4, #4]
    b1d4:	e1a06000 	mov	r6, r0
    b1d8:	e5841008 	str	r1, [r4, #8]
    b1dc:	e3a00008 	mov	r0, #8
    b1e0:	e1a01004 	mov	r1, r4
    b1e4:	e584200c 	str	r2, [r4, #12]
    b1e8:	e5845010 	str	r5, [r4, #16]
    b1ec:	e5845014 	str	r5, [r4, #20]
    b1f0:	e5845018 	str	r5, [r4, #24]
    b1f4:	e584501c 	str	r5, [r4, #28]
    b1f8:	e5843000 	str	r3, [r4]
    b1fc:	ebffffcb 	bl	b130 <postman_send>
    b200:	e35000c0 	cmp	r0, #192	; 0xc0
    b204:	0a000004 	beq	b21c <rhw_get_mac_address+0x70>
    b208:	e3a05002 	mov	r5, #2
    b20c:	e1a00005 	mov	r0, r5
    b210:	e28dde41 	add	sp, sp, #1040	; 0x410
    b214:	e28dd008 	add	sp, sp, #8
    b218:	e8bd8070 	pop	{r4, r5, r6, pc}
    b21c:	e28d1004 	add	r1, sp, #4
    b220:	e3a00008 	mov	r0, #8
    b224:	ebffff8c 	bl	b05c <postman_recv>
    b228:	e35000c0 	cmp	r0, #192	; 0xc0
    b22c:	1afffff5 	bne	b208 <rhw_get_mac_address+0x5c>
    b230:	e5943004 	ldr	r3, [r4, #4]
    b234:	e3530102 	cmp	r3, #-2147483648	; 0x80000000
    b238:	13a05001 	movne	r5, #1
    b23c:	05940014 	ldreq	r0, [r4, #20]
    b240:	01d431b8 	ldrheq	r3, [r4, #24]
    b244:	05860000 	streq	r0, [r6]
    b248:	01c630b4 	strheq	r3, [r6, #4]
    b24c:	eaffffee 	b	b20c <rhw_get_mac_address+0x60>
    b250:	00010003 	.word	0x00010003

0000b254 <rhw_set_device_power>:
    b254:	e3510000 	cmp	r1, #0
    b258:	e3a03008 	mov	r3, #8
    b25c:	e1a01000 	mov	r1, r0
    b260:	e3a02000 	mov	r2, #0
    b264:	e92d4070 	push	{r4, r5, r6, lr}
    b268:	e3a0c020 	mov	ip, #32
    b26c:	03a0e003 	moveq	lr, #3
    b270:	13a0e002 	movne	lr, #2
    b274:	e24dde41 	sub	sp, sp, #1040	; 0x410
    b278:	e24dd008 	sub	sp, sp, #8
    b27c:	e59f008c 	ldr	r0, [pc, #140]	; b310 <rhw_set_device_power+0xbc>
    b280:	e28d4017 	add	r4, sp, #23
    b284:	e3c4400f 	bic	r4, r4, #15
    b288:	e5842004 	str	r2, [r4, #4]
    b28c:	e5840008 	str	r0, [r4, #8]
    b290:	e584300c 	str	r3, [r4, #12]
    b294:	e1a00003 	mov	r0, r3
    b298:	e5843010 	str	r3, [r4, #16]
    b29c:	e5841014 	str	r1, [r4, #20]
    b2a0:	e1a01004 	mov	r1, r4
    b2a4:	e584e018 	str	lr, [r4, #24]
    b2a8:	e584201c 	str	r2, [r4, #28]
    b2ac:	e584c000 	str	ip, [r4]
    b2b0:	ebffff9e 	bl	b130 <postman_send>
    b2b4:	e35000c0 	cmp	r0, #192	; 0xc0
    b2b8:	1a00000a 	bne	b2e8 <rhw_set_device_power+0x94>
    b2bc:	e3a0500a 	mov	r5, #10
    b2c0:	e59f604c 	ldr	r6, [pc, #76]	; b314 <rhw_set_device_power+0xc0>
    b2c4:	e28d1004 	add	r1, sp, #4
    b2c8:	e3a00008 	mov	r0, #8
    b2cc:	ebffff62 	bl	b05c <postman_recv>
    b2d0:	e35000c0 	cmp	r0, #192	; 0xc0
    b2d4:	0a000007 	beq	b2f8 <rhw_set_device_power+0xa4>
    b2d8:	e1a00006 	mov	r0, r6
    b2dc:	eb002e92 	bl	16d2c <microsDelay>
    b2e0:	e2555001 	subs	r5, r5, #1
    b2e4:	1afffff6 	bne	b2c4 <rhw_set_device_power+0x70>
    b2e8:	e3a00002 	mov	r0, #2
    b2ec:	e28dde41 	add	sp, sp, #1040	; 0x410
    b2f0:	e28dd008 	add	sp, sp, #8
    b2f4:	e8bd8070 	pop	{r4, r5, r6, pc}
    b2f8:	e5940004 	ldr	r0, [r4, #4]
    b2fc:	e2900102 	adds	r0, r0, #-2147483648	; 0x80000000
    b300:	13a00001 	movne	r0, #1
    b304:	e28dde41 	add	sp, sp, #1040	; 0x410
    b308:	e28dd008 	add	sp, sp, #8
    b30c:	e8bd8070 	pop	{r4, r5, r6, pc}
    b310:	00028001 	.word	0x00028001
    b314:	0007a120 	.word	0x0007a120

0000b318 <jsonGetValueForKey>:
    b318:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    b31c:	e1a07001 	mov	r7, r1
    b320:	e24ddf56 	sub	sp, sp, #344	; 0x158
    b324:	e1a06000 	mov	r6, r0
    b328:	e28d000c 	add	r0, sp, #12
    b32c:	e1a09002 	mov	r9, r2
    b330:	e1a08003 	mov	r8, r3
    b334:	ebfffe78 	bl	ad1c <JSMNR_init>
    b338:	e1a00007 	mov	r0, r7
    b33c:	eb008480 	bl	2c544 <strlen>
    b340:	e3a04014 	mov	r4, #20
    b344:	e1a02000 	mov	r2, r0
    b348:	e1a01007 	mov	r1, r7
    b34c:	e28d000c 	add	r0, sp, #12
    b350:	e58d4000 	str	r4, [sp]
    b354:	e28d3018 	add	r3, sp, #24
    b358:	ebfffc63 	bl	a4ec <JSMNR_parse>
    b35c:	e250a000 	subs	sl, r0, #0
    b360:	ba000025 	blt	b3fc <jsonGetValueForKey+0xe4>
    b364:	128d4018 	addne	r4, sp, #24
    b368:	13a05000 	movne	r5, #0
    b36c:	1a000003 	bne	b380 <jsonGetValueForKey+0x68>
    b370:	ea00001e 	b	b3f0 <jsonGetValueForKey+0xd8>
    b374:	e15a0005 	cmp	sl, r5
    b378:	e2844010 	add	r4, r4, #16
    b37c:	0a00001b 	beq	b3f0 <jsonGetValueForKey+0xd8>
    b380:	e5d42000 	ldrb	r2, [r4]
    b384:	e2855001 	add	r5, r5, #1
    b388:	e3520003 	cmp	r2, #3
    b38c:	1afffff8 	bne	b374 <jsonGetValueForKey+0x5c>
    b390:	e1a00006 	mov	r0, r6
    b394:	eb00846a 	bl	2c544 <strlen>
    b398:	e5943004 	ldr	r3, [r4, #4]
    b39c:	e5941008 	ldr	r1, [r4, #8]
    b3a0:	e0411003 	sub	r1, r1, r3
    b3a4:	e1500001 	cmp	r0, r1
    b3a8:	1afffff1 	bne	b374 <jsonGetValueForKey+0x5c>
    b3ac:	e1a02000 	mov	r2, r0
    b3b0:	e1a01006 	mov	r1, r6
    b3b4:	e0870003 	add	r0, r7, r3
    b3b8:	eb00849e 	bl	2c638 <strncmp>
    b3bc:	e3500000 	cmp	r0, #0
    b3c0:	1affffeb 	bne	b374 <jsonGetValueForKey+0x5c>
    b3c4:	e5941014 	ldr	r1, [r4, #20]
    b3c8:	e5942018 	ldr	r2, [r4, #24]
    b3cc:	e0422001 	sub	r2, r2, r1
    b3d0:	e1520008 	cmp	r2, r8
    b3d4:	aa000006 	bge	b3f4 <jsonGetValueForKey+0xdc>
    b3d8:	e2822001 	add	r2, r2, #1
    b3dc:	e0871001 	add	r1, r7, r1
    b3e0:	e1a00009 	mov	r0, r9
    b3e4:	eb008441 	bl	2c4f0 <strlcpy>
    b3e8:	e3a00001 	mov	r0, #1
    b3ec:	ea000000 	b	b3f4 <jsonGetValueForKey+0xdc>
    b3f0:	e3a00000 	mov	r0, #0
    b3f4:	e28ddf56 	add	sp, sp, #344	; 0x158
    b3f8:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    b3fc:	e1a00007 	mov	r0, r7
    b400:	eb00844f 	bl	2c544 <strlen>
    b404:	e58d4000 	str	r4, [sp]
    b408:	e58d0004 	str	r0, [sp, #4]
    b40c:	e1a0300a 	mov	r3, sl
    b410:	e59f2014 	ldr	r2, [pc, #20]	; b42c <jsonGetValueForKey+0x114>
    b414:	e3a01004 	mov	r1, #4
    b418:	e59f0010 	ldr	r0, [pc, #16]	; b430 <jsonGetValueForKey+0x118>
    b41c:	ebfff8e4 	bl	97b4 <LogWrite>
    b420:	e3a00000 	mov	r0, #0
    b424:	e28ddf56 	add	sp, sp, #344	; 0x158
    b428:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    b42c:	0002e5c0 	.word	0x0002e5c0
    b430:	0002e5ec 	.word	0x0002e5ec

0000b434 <rdisspace>:
    b434:	e3500020 	cmp	r0, #32
    b438:	0a000004 	beq	b450 <rdisspace+0x1c>
    b43c:	e2400009 	sub	r0, r0, #9
    b440:	e3500004 	cmp	r0, #4
    b444:	83a00000 	movhi	r0, #0
    b448:	93a00001 	movls	r0, #1
    b44c:	e12fff1e 	bx	lr
    b450:	e3a00001 	mov	r0, #1
    b454:	e12fff1e 	bx	lr

0000b458 <rdisdigit>:
    b458:	e2400030 	sub	r0, r0, #48	; 0x30
    b45c:	e3500009 	cmp	r0, #9
    b460:	83a00000 	movhi	r0, #0
    b464:	93a00001 	movls	r0, #1
    b468:	e12fff1e 	bx	lr

0000b46c <rdisupper>:
    b46c:	e2400041 	sub	r0, r0, #65	; 0x41
    b470:	e3500019 	cmp	r0, #25
    b474:	83a00000 	movhi	r0, #0
    b478:	93a00001 	movls	r0, #1
    b47c:	e12fff1e 	bx	lr

0000b480 <rdtolower>:
    b480:	e2403041 	sub	r3, r0, #65	; 0x41
    b484:	e3530019 	cmp	r3, #25
    b488:	92800020 	addls	r0, r0, #32
    b48c:	96ef0070 	uxtbls	r0, r0
    b490:	e12fff1e 	bx	lr

0000b494 <rdisalpha>:
    b494:	e3c00020 	bic	r0, r0, #32
    b498:	e2400041 	sub	r0, r0, #65	; 0x41
    b49c:	e3500019 	cmp	r0, #25
    b4a0:	83a00000 	movhi	r0, #0
    b4a4:	93a00001 	movls	r0, #1
    b4a8:	e12fff1e 	bx	lr

0000b4ac <rdstrrev>:
    b4ac:	e92d4010 	push	{r4, lr}
    b4b0:	e1a04000 	mov	r4, r0
    b4b4:	eb008422 	bl	2c544 <strlen>
    b4b8:	e2403001 	sub	r3, r0, #1
    b4bc:	e3530000 	cmp	r3, #0
    b4c0:	d8bd8010 	pople	{r4, pc}
    b4c4:	e3a03000 	mov	r3, #0
    b4c8:	e244c001 	sub	ip, r4, #1
    b4cc:	e0841000 	add	r1, r4, r0
    b4d0:	e2833001 	add	r3, r3, #1
    b4d4:	e1e02003 	mvn	r2, r3
    b4d8:	e5fce001 	ldrb	lr, [ip, #1]!
    b4dc:	e5714001 	ldrb	r4, [r1, #-1]!
    b4e0:	e0822000 	add	r2, r2, r0
    b4e4:	e1530002 	cmp	r3, r2
    b4e8:	e5cc4000 	strb	r4, [ip]
    b4ec:	e5c1e000 	strb	lr, [r1]
    b4f0:	bafffff6 	blt	b4d0 <rdstrrev+0x24>
    b4f4:	e8bd8010 	pop	{r4, pc}

0000b4f8 <rditoa>:
    b4f8:	e3520000 	cmp	r2, #0
    b4fc:	0a00002c 	beq	b5b4 <rditoa+0xbc>
    b500:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    b504:	e1a05001 	mov	r5, r1
    b508:	e1a06003 	mov	r6, r3
    b50c:	e1a08001 	mov	r8, r1
    b510:	e3a07000 	mov	r7, #0
    b514:	e2424001 	sub	r4, r2, #1
    b518:	ea000002 	b	b528 <rditoa+0x30>
    b51c:	e1540007 	cmp	r4, r7
    b520:	e2888001 	add	r8, r8, #1
    b524:	da00001f 	ble	b5a8 <rditoa+0xb0>
    b528:	e1a01006 	mov	r1, r6
    b52c:	eb008985 	bl	2db48 <__aeabi_idivmod>
    b530:	e3510009 	cmp	r1, #9
    b534:	e6ef1071 	uxtb	r1, r1
    b538:	e2813030 	add	r3, r1, #48	; 0x30
    b53c:	c2811037 	addgt	r1, r1, #55	; 0x37
    b540:	d5c83000 	strble	r3, [r8]
    b544:	c5c81000 	strbgt	r1, [r8]
    b548:	e3500000 	cmp	r0, #0
    b54c:	e2877001 	add	r7, r7, #1
    b550:	1afffff1 	bne	b51c <rditoa+0x24>
    b554:	e3a04000 	mov	r4, #0
    b558:	e1a00005 	mov	r0, r5
    b55c:	e7c54007 	strb	r4, [r5, r7]
    b560:	eb0083f7 	bl	2c544 <strlen>
    b564:	e2403001 	sub	r3, r0, #1
    b568:	e1530004 	cmp	r3, r4
    b56c:	c2451001 	subgt	r1, r5, #1
    b570:	c1a03004 	movgt	r3, r4
    b574:	c0855000 	addgt	r5, r5, r0
    b578:	da000008 	ble	b5a0 <rditoa+0xa8>
    b57c:	e2833001 	add	r3, r3, #1
    b580:	e1e02003 	mvn	r2, r3
    b584:	e5f1c001 	ldrb	ip, [r1, #1]!
    b588:	e575e001 	ldrb	lr, [r5, #-1]!
    b58c:	e0822000 	add	r2, r2, r0
    b590:	e1520003 	cmp	r2, r3
    b594:	e5c1e000 	strb	lr, [r1]
    b598:	e5c5c000 	strb	ip, [r5]
    b59c:	cafffff6 	bgt	b57c <rditoa+0x84>
    b5a0:	e3a00000 	mov	r0, #0
    b5a4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    b5a8:	1affffe9 	bne	b554 <rditoa+0x5c>
    b5ac:	e3e00000 	mvn	r0, #0
    b5b0:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    b5b4:	e3e00000 	mvn	r0, #0
    b5b8:	e12fff1e 	bx	lr

0000b5bc <timers_init>:
    b5bc:	e3a01000 	mov	r1, #0
    b5c0:	e59f3010 	ldr	r3, [pc, #16]	; b5d8 <timers_init+0x1c>
    b5c4:	e2832e19 	add	r2, r3, #400	; 0x190
    b5c8:	e4831014 	str	r1, [r3], #20
    b5cc:	e1530002 	cmp	r3, r2
    b5d0:	1afffffc 	bne	b5c8 <timers_init+0xc>
    b5d4:	e12fff1e 	bx	lr
    b5d8:	000428f8 	.word	0x000428f8

0000b5dc <timer_attach_handler>:
    b5dc:	e92d4070 	push	{r4, r5, r6, lr}
    b5e0:	e59f5068 	ldr	r5, [pc, #104]	; b650 <timer_attach_handler+0x74>
    b5e4:	e3a04000 	mov	r4, #0
    b5e8:	e1a0c005 	mov	ip, r5
    b5ec:	ea000002 	b	b5fc <timer_attach_handler+0x20>
    b5f0:	e2844001 	add	r4, r4, #1
    b5f4:	e3540014 	cmp	r4, #20
    b5f8:	0a000011 	beq	b644 <timer_attach_handler+0x68>
    b5fc:	e59ce000 	ldr	lr, [ip]
    b600:	e28cc014 	add	ip, ip, #20
    b604:	e35e0000 	cmp	lr, #0
    b608:	1afffff8 	bne	b5f0 <timer_attach_handler+0x14>
    b60c:	e1a0e001 	mov	lr, r1
    b610:	e084c104 	add	ip, r4, r4, lsl #2
    b614:	e1a0c10c 	lsl	ip, ip, #2
    b618:	e085600c 	add	r6, r5, ip
    b61c:	e1a01000 	mov	r1, r0
    b620:	e785e00c 	str	lr, [r5, ip]
    b624:	e1c620f4 	strd	r2, [r6, #4]
    b628:	e59f0024 	ldr	r0, [pc, #36]	; b654 <timer_attach_handler+0x78>
    b62c:	eb0088b6 	bl	2d90c <__udivsi3>
    b630:	e586000c 	str	r0, [r6, #12]
    b634:	eb002db8 	bl	16d1c <micros>
    b638:	e5860010 	str	r0, [r6, #16]
    b63c:	e1a00004 	mov	r0, r4
    b640:	e8bd8070 	pop	{r4, r5, r6, pc}
    b644:	e3a04015 	mov	r4, #21
    b648:	e1a00004 	mov	r0, r4
    b64c:	e8bd8070 	pop	{r4, r5, r6, pc}
    b650:	000428f8 	.word	0x000428f8
    b654:	000f4240 	.word	0x000f4240

0000b658 <timer_poll>:
    b658:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    b65c:	eb002dae 	bl	16d1c <micros>
    b660:	e3a05000 	mov	r5, #0
    b664:	e1a07000 	mov	r7, r0
    b668:	e1a08005 	mov	r8, r5
    b66c:	e59f403c 	ldr	r4, [pc, #60]	; b6b0 <timer_poll+0x58>
    b670:	e5946000 	ldr	r6, [r4]
    b674:	e3560000 	cmp	r6, #0
    b678:	0a000007 	beq	b69c <timer_poll+0x44>
    b67c:	e1c420dc 	ldrd	r2, [r4, #12]
    b680:	e0473003 	sub	r3, r7, r3
    b684:	e1530002 	cmp	r3, r2
    b688:	9a000003 	bls	b69c <timer_poll+0x44>
    b68c:	e9940006 	ldmib	r4, {r1, r2}
    b690:	e5848000 	str	r8, [r4]
    b694:	e1a00005 	mov	r0, r5
    b698:	e12fff36 	blx	r6
    b69c:	e2855001 	add	r5, r5, #1
    b6a0:	e3550014 	cmp	r5, #20
    b6a4:	e2844014 	add	r4, r4, #20
    b6a8:	1afffff0 	bne	b670 <timer_poll+0x18>
    b6ac:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    b6b0:	000428f8 	.word	0x000428f8

0000b6b4 <wgfx_scroll.part.3>:
    b6b4:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b6b8:	e59f615c 	ldr	r6, [pc, #348]	; b81c <wgfx_scroll.part.3+0x168>
    b6bc:	e24dd00c 	sub	sp, sp, #12
    b6c0:	e5d63000 	ldrb	r3, [r6]
    b6c4:	e1a05000 	mov	r5, r0
    b6c8:	e3530000 	cmp	r3, #0
    b6cc:	e1a08001 	mov	r8, r1
    b6d0:	0a000006 	beq	b6f0 <wgfx_scroll.part.3+0x3c>
    b6d4:	e59f4144 	ldr	r4, [pc, #324]	; b820 <wgfx_scroll.part.3+0x16c>
    b6d8:	ea000001 	b	b6e4 <wgfx_scroll.part.3+0x30>
    b6dc:	e2544001 	subs	r4, r4, #1
    b6e0:	0a000002 	beq	b6f0 <wgfx_scroll.part.3+0x3c>
    b6e4:	ebfff308 	bl	830c <dma_running>
    b6e8:	e3500000 	cmp	r0, #0
    b6ec:	1afffffa 	bne	b6dc <wgfx_scroll.part.3+0x28>
    b6f0:	e3a07000 	mov	r7, #0
    b6f4:	e0850105 	add	r0, r5, r5, lsl #2
    b6f8:	e0850080 	add	r0, r5, r0, lsl #1
    b6fc:	e0860100 	add	r0, r6, r0, lsl #2
    b700:	e596501c 	ldr	r5, [r6, #28]
    b704:	e028afc8 	eor	sl, r8, r8, asr #31
    b708:	e5909250 	ldr	r9, [r0, #592]	; 0x250
    b70c:	e04aafc8 	sub	sl, sl, r8, asr #31
    b710:	e045400a 	sub	r4, r5, sl
    b714:	e0040499 	mul	r4, r9, r4
    b718:	e0050599 	mul	r5, r9, r5
    b71c:	e590b244 	ldr	fp, [r0, #580]	; 0x244
    b720:	e5902258 	ldr	r2, [r0, #600]	; 0x258
    b724:	e590e23c 	ldr	lr, [r0, #572]	; 0x23c
    b728:	e596000c 	ldr	r0, [r6, #12]
    b72c:	e025b592 	mla	r5, r2, r5, fp
    b730:	e024b492 	mla	r4, r2, r4, fp
    b734:	e021eb90 	mla	r1, r0, fp, lr
    b738:	e596c014 	ldr	ip, [r6, #20]
    b73c:	e1580007 	cmp	r8, r7
    b740:	e0050590 	mul	r5, r0, r5
    b744:	e0040490 	mul	r4, r0, r4
    b748:	e08c1001 	add	r1, ip, r1
    b74c:	e5c67000 	strb	r7, [r6]
    b750:	ca00000d 	bgt	b78c <wgfx_scroll.part.3+0xd8>
    b754:	e24ee001 	sub	lr, lr, #1
    b758:	e08e3004 	add	r3, lr, r4
    b75c:	e08c3003 	add	r3, ip, r3
    b760:	e1530001 	cmp	r3, r1
    b764:	e08ee005 	add	lr, lr, r5
    b768:	9a000005 	bls	b784 <wgfx_scroll.part.3+0xd0>
    b76c:	e28ee001 	add	lr, lr, #1
    b770:	e08c200e 	add	r2, ip, lr
    b774:	e4530001 	ldrb	r0, [r3], #-1
    b778:	e1530001 	cmp	r3, r1
    b77c:	e5620001 	strb	r0, [r2, #-1]!
    b780:	1afffffb 	bne	b774 <wgfx_scroll.part.3+0xc0>
    b784:	e28dd00c 	add	sp, sp, #12
    b788:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b78c:	e3a03e11 	mov	r3, #272	; 0x110
    b790:	e0090a99 	mul	r9, r9, sl
    b794:	e022b992 	mla	r2, r2, r9, fp
    b798:	e5d6a038 	ldrb	sl, [r6, #56]	; 0x38
    b79c:	e0020290 	mul	r2, r0, r2
    b7a0:	e1a0980a 	lsl	r9, sl, #16
    b7a4:	e59f8078 	ldr	r8, [pc, #120]	; b824 <wgfx_scroll.part.3+0x170>
    b7a8:	e1899c0a 	orr	r9, r9, sl, lsl #24
    b7ac:	e189900a 	orr	r9, r9, sl
    b7b0:	e3c8820f 	bic	r8, r8, #-268435456	; 0xf0000000
    b7b4:	e189940a 	orr	r9, r9, sl, lsl #8
    b7b8:	e3888101 	orr	r8, r8, #1073741824	; 0x40000000
    b7bc:	e082000e 	add	r0, r2, lr
    b7c0:	e5889000 	str	r9, [r8]
    b7c4:	e08ee004 	add	lr, lr, r4
    b7c8:	e5889004 	str	r9, [r8, #4]
    b7cc:	e5889008 	str	r9, [r8, #8]
    b7d0:	e588900c 	str	r9, [r8, #12]
    b7d4:	e0452002 	sub	r2, r5, r2
    b7d8:	e58d3000 	str	r3, [sp]
    b7dc:	e08c0000 	add	r0, ip, r0
    b7e0:	e1a03007 	mov	r3, r7
    b7e4:	e08c900e 	add	r9, ip, lr
    b7e8:	ebfff29b 	bl	825c <dma_enqueue_operation>
    b7ec:	e3a0c010 	mov	ip, #16
    b7f0:	e1a03007 	mov	r3, r7
    b7f4:	e1a01009 	mov	r1, r9
    b7f8:	e0452004 	sub	r2, r5, r4
    b7fc:	e58dc000 	str	ip, [sp]
    b800:	e1a00008 	mov	r0, r8
    b804:	ebfff294 	bl	825c <dma_enqueue_operation>
    b808:	ebfff2ae 	bl	82c8 <dma_execute_queue>
    b80c:	e3a03001 	mov	r3, #1
    b810:	e5c63000 	strb	r3, [r6]
    b814:	e28dd00c 	add	sp, sp, #12
    b818:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b81c:	00042a88 	.word	0x00042a88
    b820:	000186a0 	.word	0x000186a0
    b824:	00080e00 	.word	0x00080e00

0000b828 <wgfx_putc.part.0>:
    b828:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b82c:	e1a08100 	lsl	r8, r0, #2
    b830:	e0886000 	add	r6, r8, r0
    b834:	e59fa1f4 	ldr	sl, [pc, #500]	; ba30 <wgfx_putc.part.0+0x208>
    b838:	e0806086 	add	r6, r0, r6, lsl #1
    b83c:	e08a6106 	add	r6, sl, r6, lsl #2
    b840:	e596424c 	ldr	r4, [r6, #588]	; 0x24c
    b844:	e5965254 	ldr	r5, [r6, #596]	; 0x254
    b848:	e24dd014 	sub	sp, sp, #20
    b84c:	e1a09001 	mov	r9, r1
    b850:	e1a07000 	mov	r7, r0
    b854:	e0010495 	mul	r1, r5, r4
    b858:	e5960240 	ldr	r0, [r6, #576]	; 0x240
    b85c:	e1a0b002 	mov	fp, r2
    b860:	e58d3000 	str	r3, [sp]
    b864:	eb00886d 	bl	2da20 <__divsi3>
    b868:	e1500009 	cmp	r0, r9
    b86c:	da000009 	ble	b898 <wgfx_putc.part.0+0x70>
    b870:	e5962258 	ldr	r2, [r6, #600]	; 0x258
    b874:	e5963250 	ldr	r3, [r6, #592]	; 0x250
    b878:	e5960248 	ldr	r0, [r6, #584]	; 0x248
    b87c:	e0010392 	mul	r1, r2, r3
    b880:	e58d2008 	str	r2, [sp, #8]
    b884:	e58d3004 	str	r3, [sp, #4]
    b888:	eb008864 	bl	2da20 <__divsi3>
    b88c:	e150000b 	cmp	r0, fp
    b890:	e59d2008 	ldr	r2, [sp, #8]
    b894:	ca000001 	bgt	b8a0 <wgfx_putc.part.0+0x78>
    b898:	e28dd014 	add	sp, sp, #20
    b89c:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b8a0:	e5da3000 	ldrb	r3, [sl]
    b8a4:	e3530000 	cmp	r3, #0
    b8a8:	0a00000e 	beq	b8e8 <wgfx_putc.part.0+0xc0>
    b8ac:	e59f4180 	ldr	r4, [pc, #384]	; ba34 <wgfx_putc.part.0+0x20c>
    b8b0:	ea000001 	b	b8bc <wgfx_putc.part.0+0x94>
    b8b4:	e2544001 	subs	r4, r4, #1
    b8b8:	0a000002 	beq	b8c8 <wgfx_putc.part.0+0xa0>
    b8bc:	ebfff292 	bl	830c <dma_running>
    b8c0:	e3500000 	cmp	r0, #0
    b8c4:	1afffffa 	bne	b8b4 <wgfx_putc.part.0+0x8c>
    b8c8:	e0883007 	add	r3, r8, r7
    b8cc:	e0873083 	add	r3, r7, r3, lsl #1
    b8d0:	e08a3103 	add	r3, sl, r3, lsl #2
    b8d4:	e5932250 	ldr	r2, [r3, #592]	; 0x250
    b8d8:	e593424c 	ldr	r4, [r3, #588]	; 0x24c
    b8dc:	e58d2004 	str	r2, [sp, #4]
    b8e0:	e5935254 	ldr	r5, [r3, #596]	; 0x254
    b8e4:	e5932258 	ldr	r2, [r3, #600]	; 0x258
    b8e8:	e3a01000 	mov	r1, #0
    b8ec:	e59d0004 	ldr	r0, [sp, #4]
    b8f0:	e0883007 	add	r3, r8, r7
    b8f4:	e0000b90 	mul	r0, r0, fp
    b8f8:	e0090994 	mul	r9, r4, r9
    b8fc:	e0873083 	add	r3, r7, r3, lsl #1
    b900:	e08a3103 	add	r3, sl, r3, lsl #2
    b904:	e593e23c 	ldr	lr, [r3, #572]	; 0x23c
    b908:	e593c244 	ldr	ip, [r3, #580]	; 0x244
    b90c:	e029e995 	mla	r9, r5, r9, lr
    b910:	e02cc092 	mla	ip, r2, r0, ip
    b914:	e59a000c 	ldr	r0, [sl, #12]
    b918:	e593e264 	ldr	lr, [r3, #612]	; 0x264
    b91c:	e0209c90 	mla	r0, r0, ip, r9
    b920:	e59a6014 	ldr	r6, [sl, #20]
    b924:	e59ec00c 	ldr	ip, [lr, #12]
    b928:	e0866000 	add	r6, r6, r0
    b92c:	e5ca1000 	strb	r1, [sl]
    b930:	e59e0010 	ldr	r0, [lr, #16]
    b934:	e59d1000 	ldr	r1, [sp]
    b938:	e593325c 	ldr	r3, [r3, #604]	; 0x25c
    b93c:	e02b019c 	mla	fp, ip, r1, r0
    b940:	e0881007 	add	r1, r8, r7
    b944:	e0871081 	add	r1, r7, r1, lsl #1
    b948:	e08a1101 	add	r1, sl, r1, lsl #2
    b94c:	e58de00c 	str	lr, [sp, #12]
    b950:	e591e260 	ldr	lr, [r1, #608]	; 0x260
    b954:	e3730001 	cmn	r3, #1
    b958:	e59d1004 	ldr	r1, [sp, #4]
    b95c:	05da3039 	ldrbeq	r3, [sl, #57]	; 0x39
    b960:	e37e0001 	cmn	lr, #1
    b964:	05dae038 	ldrbeq	lr, [sl, #56]	; 0x38
    b968:	e3510000 	cmp	r1, #0
    b96c:	daffffc9 	ble	b898 <wgfx_putc.part.0+0x70>
    b970:	e3a01001 	mov	r1, #1
    b974:	e2440001 	sub	r0, r4, #1
    b978:	e1a01011 	lsl	r1, r1, r0
    b97c:	e3520000 	cmp	r2, #0
    b980:	e58d1000 	str	r1, [sp]
    b984:	daffffc3 	ble	b898 <wgfx_putc.part.0+0x70>
    b988:	e3a01000 	mov	r1, #0
    b98c:	e6ef7073 	uxtb	r7, r3
    b990:	e58d1008 	str	r1, [sp, #8]
    b994:	e6efe07e 	uxtb	lr, lr
    b998:	e3a09000 	mov	r9, #0
    b99c:	e3540000 	cmp	r4, #0
    b9a0:	da000012 	ble	b9f0 <wgfx_putc.part.0+0x1c8>
    b9a4:	e3550000 	cmp	r5, #0
    b9a8:	da000010 	ble	b9f0 <wgfx_putc.part.0+0x1c8>
    b9ac:	e1a00006 	mov	r0, r6
    b9b0:	e3a08000 	mov	r8, #0
    b9b4:	e59dc000 	ldr	ip, [sp]
    b9b8:	e1a03000 	mov	r3, r0
    b9bc:	e0800005 	add	r0, r0, r5
    b9c0:	e5db1000 	ldrb	r1, [fp]
    b9c4:	e111000c 	tst	r1, ip
    b9c8:	01a0100e 	moveq	r1, lr
    b9cc:	11a01007 	movne	r1, r7
    b9d0:	e4c31001 	strb	r1, [r3], #1
    b9d4:	e1530000 	cmp	r3, r0
    b9d8:	1afffff8 	bne	b9c0 <wgfx_putc.part.0+0x198>
    b9dc:	e2888001 	add	r8, r8, #1
    b9e0:	e1580004 	cmp	r8, r4
    b9e4:	e1a00003 	mov	r0, r3
    b9e8:	e1a0c0cc 	asr	ip, ip, #1
    b9ec:	1afffff1 	bne	b9b8 <wgfx_putc.part.0+0x190>
    b9f0:	e2899001 	add	r9, r9, #1
    b9f4:	e59a300c 	ldr	r3, [sl, #12]
    b9f8:	e1590002 	cmp	r9, r2
    b9fc:	e0866003 	add	r6, r6, r3
    ba00:	1affffe5 	bne	b99c <wgfx_putc.part.0+0x174>
    ba04:	e59d3008 	ldr	r3, [sp, #8]
    ba08:	e59d0004 	ldr	r0, [sp, #4]
    ba0c:	e2831001 	add	r1, r3, #1
    ba10:	e59d300c 	ldr	r3, [sp, #12]
    ba14:	e1510000 	cmp	r1, r0
    ba18:	e5933008 	ldr	r3, [r3, #8]
    ba1c:	e58d1008 	str	r1, [sp, #8]
    ba20:	e08bb003 	add	fp, fp, r3
    ba24:	1affffdb 	bne	b998 <wgfx_putc.part.0+0x170>
    ba28:	e28dd014 	add	sp, sp, #20
    ba2c:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ba30:	00042a88 	.word	0x00042a88
    ba34:	000186a0 	.word	0x000186a0

0000ba38 <wgfx_set_window>:
    ba38:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ba3c:	e24dd01c 	sub	sp, sp, #28
    ba40:	e59dc054 	ldr	ip, [sp, #84]	; 0x54
    ba44:	e59fe2d8 	ldr	lr, [pc, #728]	; bd24 <wgfx_set_window+0x2ec>
    ba48:	e35c0000 	cmp	ip, #0
    ba4c:	01a0c00e 	moveq	ip, lr
    ba50:	e28d5048 	add	r5, sp, #72	; 0x48
    ba54:	e3500004 	cmp	r0, #4
    ba58:	e59d7044 	ldr	r7, [sp, #68]	; 0x44
    ba5c:	e8954820 	ldm	r5, {r5, fp, lr}
    ba60:	e59d8060 	ldr	r8, [sp, #96]	; 0x60
    ba64:	8a0000ac 	bhi	bd1c <wgfx_set_window+0x2e4>
    ba68:	e2914001 	adds	r4, r1, #1
    ba6c:	13a04001 	movne	r4, #1
    ba70:	e3730001 	cmn	r3, #1
    ba74:	13a04000 	movne	r4, #0
    ba78:	e3540000 	cmp	r4, #0
    ba7c:	159f42a4 	ldrne	r4, [pc, #676]	; bd28 <wgfx_set_window+0x2f0>
    ba80:	0003039b 	muleq	r3, fp, r3
    ba84:	15943004 	ldrne	r3, [r4, #4]
    ba88:	058d3000 	streq	r3, [sp]
    ba8c:	10433001 	subne	r3, r3, r1
    ba90:	10433088 	subne	r3, r3, r8, lsl #1
    ba94:	158d3000 	strne	r3, [sp]
    ba98:	e59d6040 	ldr	r6, [sp, #64]	; 0x40
    ba9c:	e1a03100 	lsl	r3, r0, #2
    baa0:	059f4280 	ldreq	r4, [pc, #640]	; bd28 <wgfx_set_window+0x2f0>
    baa4:	e0839000 	add	r9, r3, r0
    baa8:	e3760001 	cmn	r6, #1
    baac:	e0809089 	add	r9, r0, r9, lsl #1
    bab0:	e59d6000 	ldr	r6, [sp]
    bab4:	e0849109 	add	r9, r4, r9, lsl #2
    bab8:	e5896240 	str	r6, [r9, #576]	; 0x240
    babc:	05949008 	ldreq	r9, [r4, #8]
    bac0:	159d6040 	ldrne	r6, [sp, #64]	; 0x40
    bac4:	00499002 	subeq	r9, r9, r2
    bac8:	1009069e 	mulne	r9, lr, r6
    bacc:	00499088 	subeq	r9, r9, r8, lsl #1
    bad0:	e3710001 	cmn	r1, #1
    bad4:	05941004 	ldreq	r1, [r4, #4]
    bad8:	059d6000 	ldreq	r6, [sp]
    badc:	1021819b 	mlane	r1, fp, r1, r8
    bae0:	00411006 	subeq	r1, r1, r6
    bae4:	e0268e92 	mla	r6, r2, lr, r8
    bae8:	e0832000 	add	r2, r3, r0
    baec:	e0802082 	add	r2, r0, r2, lsl #1
    baf0:	01a010a1 	lsreq	r1, r1, #1
    baf4:	e0842102 	add	r2, r4, r2, lsl #2
    baf8:	e3770001 	cmn	r7, #1
    bafc:	e582123c 	str	r1, [r2, #572]	; 0x23c
    bb00:	e58d1004 	str	r1, [sp, #4]
    bb04:	e59d1064 	ldr	r1, [sp, #100]	; 0x64
    bb08:	059c7000 	ldreq	r7, [ip]
    bb0c:	e3750001 	cmn	r5, #1
    bb10:	059c5004 	ldreq	r5, [ip, #4]
    bb14:	e3710001 	cmn	r1, #1
    bb18:	13580000 	cmpne	r8, #0
    bb1c:	e5826244 	str	r6, [r2, #580]	; 0x244
    bb20:	e0832000 	add	r2, r3, r0
    bb24:	e0802082 	add	r2, r0, r2, lsl #1
    bb28:	e083a000 	add	sl, r3, r0
    bb2c:	e0842102 	add	r2, r4, r2, lsl #2
    bb30:	e0833000 	add	r3, r3, r0
    bb34:	e582724c 	str	r7, [r2, #588]	; 0x24c
    bb38:	e0803083 	add	r3, r0, r3, lsl #1
    bb3c:	e59d2058 	ldr	r2, [sp, #88]	; 0x58
    bb40:	e0843103 	add	r3, r4, r3, lsl #2
    bb44:	e080a08a 	add	sl, r0, sl, lsl #1
    bb48:	e583225c 	str	r2, [r3, #604]	; 0x25c
    bb4c:	e59d205c 	ldr	r2, [sp, #92]	; 0x5c
    bb50:	e084a10a 	add	sl, r4, sl, lsl #2
    bb54:	e58a9248 	str	r9, [sl, #584]	; 0x248
    bb58:	e58d0014 	str	r0, [sp, #20]
    bb5c:	e5835250 	str	r5, [r3, #592]	; 0x250
    bb60:	e583b254 	str	fp, [r3, #596]	; 0x254
    bb64:	e583e258 	str	lr, [r3, #600]	; 0x258
    bb68:	e583c264 	str	ip, [r3, #612]	; 0x264
    bb6c:	e5832260 	str	r2, [r3, #608]	; 0x260
    bb70:	da000065 	ble	bd0c <wgfx_set_window+0x2d4>
    bb74:	e1a02088 	lsl	r2, r8, #1
    bb78:	e1a01002 	mov	r1, r2
    bb7c:	e59d0000 	ldr	r0, [sp]
    bb80:	e0469008 	sub	r9, r6, r8
    bb84:	e081b000 	add	fp, r1, r0
    bb88:	e58d6010 	str	r6, [sp, #16]
    bb8c:	e3a07000 	mov	r7, #0
    bb90:	e1a0600b 	mov	r6, fp
    bb94:	e1a0b003 	mov	fp, r3
    bb98:	e59d1004 	ldr	r1, [sp, #4]
    bb9c:	e58d200c 	str	r2, [sp, #12]
    bba0:	e5d42000 	ldrb	r2, [r4]
    bba4:	e041a008 	sub	sl, r1, r8
    bba8:	e58d8060 	str	r8, [sp, #96]	; 0x60
    bbac:	e3520000 	cmp	r2, #0
    bbb0:	e58da008 	str	sl, [sp, #8]
    bbb4:	e0895007 	add	r5, r9, r7
    bbb8:	e1a08006 	mov	r8, r6
    bbbc:	0a000011 	beq	bc08 <wgfx_set_window+0x1d0>
    bbc0:	e59f9164 	ldr	r9, [pc, #356]	; bd2c <wgfx_set_window+0x2f4>
    bbc4:	ea000001 	b	bbd0 <wgfx_set_window+0x198>
    bbc8:	e2599001 	subs	r9, r9, #1
    bbcc:	0a000002 	beq	bbdc <wgfx_set_window+0x1a4>
    bbd0:	ebfff1cd 	bl	830c <dma_running>
    bbd4:	e3500000 	cmp	r0, #0
    bbd8:	1afffffa 	bne	bbc8 <wgfx_set_window+0x190>
    bbdc:	e59b323c 	ldr	r3, [fp, #572]	; 0x23c
    bbe0:	e59d0060 	ldr	r0, [sp, #96]	; 0x60
    bbe4:	e59b2244 	ldr	r2, [fp, #580]	; 0x244
    bbe8:	e59b1240 	ldr	r1, [fp, #576]	; 0x240
    bbec:	e58d3004 	str	r3, [sp, #4]
    bbf0:	e043a000 	sub	sl, r3, r0
    bbf4:	e59d300c 	ldr	r3, [sp, #12]
    bbf8:	e58d2010 	str	r2, [sp, #16]
    bbfc:	e58d1000 	str	r1, [sp]
    bc00:	e0429000 	sub	r9, r2, r0
    bc04:	e0836001 	add	r6, r3, r1
    bc08:	e3a03000 	mov	r3, #0
    bc0c:	e594200c 	ldr	r2, [r4, #12]
    bc10:	e3580000 	cmp	r8, #0
    bc14:	e5c43000 	strb	r3, [r4]
    bc18:	e0050592 	mul	r5, r2, r5
    bc1c:	e5940014 	ldr	r0, [r4, #20]
    bc20:	da000008 	ble	bc48 <wgfx_set_window+0x210>
    bc24:	e59d3008 	ldr	r3, [sp, #8]
    bc28:	e1a02008 	mov	r2, r8
    bc2c:	e0835005 	add	r5, r3, r5
    bc30:	e59d3064 	ldr	r3, [sp, #100]	; 0x64
    bc34:	e0800005 	add	r0, r0, r5
    bc38:	e6ef1073 	uxtb	r1, r3
    bc3c:	eb0080b0 	bl	2bf04 <memset>
    bc40:	e5940014 	ldr	r0, [r4, #20]
    bc44:	e594200c 	ldr	r2, [r4, #12]
    bc48:	e59b5248 	ldr	r5, [fp, #584]	; 0x248
    bc4c:	e59d3010 	ldr	r3, [sp, #16]
    bc50:	e3560000 	cmp	r6, #0
    bc54:	e0851003 	add	r1, r5, r3
    bc58:	e0811007 	add	r1, r1, r7
    bc5c:	e0010192 	mul	r1, r2, r1
    bc60:	da000007 	ble	bc84 <wgfx_set_window+0x24c>
    bc64:	e59d3064 	ldr	r3, [sp, #100]	; 0x64
    bc68:	e08a1001 	add	r1, sl, r1
    bc6c:	e0800001 	add	r0, r0, r1
    bc70:	e1a02006 	mov	r2, r6
    bc74:	e6ef1073 	uxtb	r1, r3
    bc78:	eb0080a1 	bl	2bf04 <memset>
    bc7c:	e5940014 	ldr	r0, [r4, #20]
    bc80:	e594200c 	ldr	r2, [r4, #12]
    bc84:	e087100a 	add	r1, r7, sl
    bc88:	e0221992 	mla	r2, r2, r9, r1
    bc8c:	e59d300c 	ldr	r3, [sp, #12]
    bc90:	e0800002 	add	r0, r0, r2
    bc94:	e0835005 	add	r5, r3, r5
    bc98:	e3550000 	cmp	r5, #0
    bc9c:	da000015 	ble	bcf8 <wgfx_set_window+0x2c0>
    bca0:	e3a0c000 	mov	ip, #0
    bca4:	e59d3064 	ldr	r3, [sp, #100]	; 0x64
    bca8:	e6ef1073 	uxtb	r1, r3
    bcac:	e5c01000 	strb	r1, [r0]
    bcb0:	e28cc001 	add	ip, ip, #1
    bcb4:	e594200c 	ldr	r2, [r4, #12]
    bcb8:	e155000c 	cmp	r5, ip
    bcbc:	e0800002 	add	r0, r0, r2
    bcc0:	1afffff9 	bne	bcac <wgfx_set_window+0x274>
    bcc4:	e89d1008 	ldm	sp, {r3, ip}
    bcc8:	e3a00000 	mov	r0, #0
    bccc:	e083c00c 	add	ip, r3, ip
    bcd0:	e08cc007 	add	ip, ip, r7
    bcd4:	e02cc992 	mla	ip, r2, r9, ip
    bcd8:	e5942014 	ldr	r2, [r4, #20]
    bcdc:	e082200c 	add	r2, r2, ip
    bce0:	e5c21000 	strb	r1, [r2]
    bce4:	e2800001 	add	r0, r0, #1
    bce8:	e594300c 	ldr	r3, [r4, #12]
    bcec:	e1550000 	cmp	r5, r0
    bcf0:	e0822003 	add	r2, r2, r3
    bcf4:	1afffff9 	bne	bce0 <wgfx_set_window+0x2a8>
    bcf8:	e59d3060 	ldr	r3, [sp, #96]	; 0x60
    bcfc:	e2877001 	add	r7, r7, #1
    bd00:	e1530007 	cmp	r3, r7
    bd04:	e3a02000 	mov	r2, #0
    bd08:	caffffa7 	bgt	bbac <wgfx_set_window+0x174>
    bd0c:	e3a03001 	mov	r3, #1
    bd10:	e59d2014 	ldr	r2, [sp, #20]
    bd14:	e0844002 	add	r4, r4, r2
    bd18:	e5c43318 	strb	r3, [r4, #792]	; 0x318
    bd1c:	e28dd01c 	add	sp, sp, #28
    bd20:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    bd24:	00034a28 	.word	0x00034a28
    bd28:	00042a88 	.word	0x00042a88
    bd2c:	000186a0 	.word	0x000186a0

0000bd30 <wgfx_set_console_window>:
    bd30:	e3500004 	cmp	r0, #4
    bd34:	812fff1e 	bxhi	lr
    bd38:	e1a03000 	mov	r3, r0
    bd3c:	e92d4070 	push	{r4, r5, r6, lr}
    bd40:	e59f504c 	ldr	r5, [pc, #76]	; bd94 <wgfx_set_console_window+0x64>
    bd44:	e0804100 	add	r4, r0, r0, lsl #2
    bd48:	e0804084 	add	r4, r0, r4, lsl #1
    bd4c:	e0854104 	add	r4, r5, r4, lsl #2
    bd50:	e594224c 	ldr	r2, [r4, #588]	; 0x24c
    bd54:	e5941254 	ldr	r1, [r4, #596]	; 0x254
    bd58:	e5853034 	str	r3, [r5, #52]	; 0x34
    bd5c:	e0010291 	mul	r1, r1, r2
    bd60:	e5940240 	ldr	r0, [r4, #576]	; 0x240
    bd64:	eb00872d 	bl	2da20 <__divsi3>
    bd68:	e5943250 	ldr	r3, [r4, #592]	; 0x250
    bd6c:	e5941258 	ldr	r1, [r4, #600]	; 0x258
    bd70:	e5850018 	str	r0, [r5, #24]
    bd74:	e0010391 	mul	r1, r1, r3
    bd78:	e5940248 	ldr	r0, [r4, #584]	; 0x248
    bd7c:	eb008727 	bl	2da20 <__divsi3>
    bd80:	e3a03000 	mov	r3, #0
    bd84:	e585001c 	str	r0, [r5, #28]
    bd88:	e5853024 	str	r3, [r5, #36]	; 0x24
    bd8c:	e5853020 	str	r3, [r5, #32]
    bd90:	e8bd8070 	pop	{r4, r5, r6, pc}
    bd94:	00042a88 	.word	0x00042a88

0000bd98 <wgfx_clear>:
    bd98:	e92d4070 	push	{r4, r5, r6, lr}
    bd9c:	e59f5174 	ldr	r5, [pc, #372]	; bf18 <wgfx_clear+0x180>
    bda0:	e5d53000 	ldrb	r3, [r5]
    bda4:	e3530000 	cmp	r3, #0
    bda8:	0a000006 	beq	bdc8 <wgfx_clear+0x30>
    bdac:	e59f4168 	ldr	r4, [pc, #360]	; bf1c <wgfx_clear+0x184>
    bdb0:	ea000001 	b	bdbc <wgfx_clear+0x24>
    bdb4:	e2544001 	subs	r4, r4, #1
    bdb8:	0a000002 	beq	bdc8 <wgfx_clear+0x30>
    bdbc:	ebfff152 	bl	830c <dma_running>
    bdc0:	e3500000 	cmp	r0, #0
    bdc4:	1afffffa 	bne	bdb4 <wgfx_clear+0x1c>
    bdc8:	e3a02000 	mov	r2, #0
    bdcc:	e5953014 	ldr	r3, [r5, #20]
    bdd0:	e595c010 	ldr	ip, [r5, #16]
    bdd4:	e5c52000 	strb	r2, [r5]
    bdd8:	e083000c 	add	r0, r3, ip
    bddc:	e1530000 	cmp	r3, r0
    bde0:	28bd8070 	popcs	{r4, r5, r6, pc}
    bde4:	e59f2134 	ldr	r2, [pc, #308]	; bf20 <wgfx_clear+0x188>
    bde8:	e283e001 	add	lr, r3, #1
    bdec:	e2821001 	add	r1, r2, #1
    bdf0:	e1510003 	cmp	r1, r3
    bdf4:	81500002 	cmphi	r0, r2
    bdf8:	93a02001 	movls	r2, #1
    bdfc:	83a02000 	movhi	r2, #0
    be00:	e35c000b 	cmp	ip, #11
    be04:	93a02000 	movls	r2, #0
    be08:	82022001 	andhi	r2, r2, #1
    be0c:	e3520000 	cmp	r2, #0
    be10:	e1a0200e 	mov	r2, lr
    be14:	0a000039 	beq	bf00 <wgfx_clear+0x168>
    be18:	e2634000 	rsb	r4, r3, #0
    be1c:	e2144003 	ands	r4, r4, #3
    be20:	01a0e003 	moveq	lr, r3
    be24:	0a00000a 	beq	be54 <wgfx_clear+0xbc>
    be28:	e5d52038 	ldrb	r2, [r5, #56]	; 0x38
    be2c:	e3540001 	cmp	r4, #1
    be30:	e5c32000 	strb	r2, [r3]
    be34:	0a000006 	beq	be54 <wgfx_clear+0xbc>
    be38:	e5d52038 	ldrb	r2, [r5, #56]	; 0x38
    be3c:	e3540003 	cmp	r4, #3
    be40:	e5c32001 	strb	r2, [r3, #1]
    be44:	05d52038 	ldrbeq	r2, [r5, #56]	; 0x38
    be48:	e283e002 	add	lr, r3, #2
    be4c:	05c32002 	strbeq	r2, [r3, #2]
    be50:	0283e003 	addeq	lr, r3, #3
    be54:	e3a02000 	mov	r2, #0
    be58:	e5d56038 	ldrb	r6, [r5, #56]	; 0x38
    be5c:	e04cc004 	sub	ip, ip, r4
    be60:	e1861406 	orr	r1, r6, r6, lsl #8
    be64:	e1811806 	orr	r1, r1, r6, lsl #16
    be68:	e0833004 	add	r3, r3, r4
    be6c:	e1811c06 	orr	r1, r1, r6, lsl #24
    be70:	e1a0412c 	lsr	r4, ip, #2
    be74:	e2822001 	add	r2, r2, #1
    be78:	e1520004 	cmp	r2, r4
    be7c:	e4831004 	str	r1, [r3], #4
    be80:	3afffffb 	bcc	be74 <wgfx_clear+0xdc>
    be84:	e3cc2003 	bic	r2, ip, #3
    be88:	e15c0002 	cmp	ip, r2
    be8c:	e08e3002 	add	r3, lr, r2
    be90:	08bd8070 	popeq	{r4, r5, r6, pc}
    be94:	e5d51038 	ldrb	r1, [r5, #56]	; 0x38
    be98:	e283c001 	add	ip, r3, #1
    be9c:	e150000c 	cmp	r0, ip
    bea0:	e7ce1002 	strb	r1, [lr, r2]
    bea4:	98bd8070 	popls	{r4, r5, r6, pc}
    bea8:	e5d52038 	ldrb	r2, [r5, #56]	; 0x38
    beac:	e2831002 	add	r1, r3, #2
    beb0:	e1500001 	cmp	r0, r1
    beb4:	e5c32001 	strb	r2, [r3, #1]
    beb8:	98bd8070 	popls	{r4, r5, r6, pc}
    bebc:	e5d52038 	ldrb	r2, [r5, #56]	; 0x38
    bec0:	e2831003 	add	r1, r3, #3
    bec4:	e1500001 	cmp	r0, r1
    bec8:	e5c32002 	strb	r2, [r3, #2]
    becc:	98bd8070 	popls	{r4, r5, r6, pc}
    bed0:	e5d52038 	ldrb	r2, [r5, #56]	; 0x38
    bed4:	e2831004 	add	r1, r3, #4
    bed8:	e1500001 	cmp	r0, r1
    bedc:	e5c32003 	strb	r2, [r3, #3]
    bee0:	98bd8070 	popls	{r4, r5, r6, pc}
    bee4:	e5d52038 	ldrb	r2, [r5, #56]	; 0x38
    bee8:	e2831005 	add	r1, r3, #5
    beec:	e1500001 	cmp	r0, r1
    bef0:	e5c32004 	strb	r2, [r3, #4]
    bef4:	85d52038 	ldrbhi	r2, [r5, #56]	; 0x38
    bef8:	85c32005 	strbhi	r2, [r3, #5]
    befc:	e8bd8070 	pop	{r4, r5, r6, pc}
    bf00:	e5d53038 	ldrb	r3, [r5, #56]	; 0x38
    bf04:	e1500002 	cmp	r0, r2
    bf08:	e5423001 	strb	r3, [r2, #-1]
    bf0c:	08bd8070 	popeq	{r4, r5, r6, pc}
    bf10:	e2822001 	add	r2, r2, #1
    bf14:	eafffff9 	b	bf00 <wgfx_clear+0x168>
    bf18:	00042a88 	.word	0x00042a88
    bf1c:	000186a0 	.word	0x000186a0
    bf20:	00042ac0 	.word	0x00042ac0

0000bf24 <wgfx_check_curpos>:
    bf24:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    bf28:	e59f4150 	ldr	r4, [pc, #336]	; c080 <wgfx_check_curpos+0x15c>
    bf2c:	e24dd008 	sub	sp, sp, #8
    bf30:	e5942018 	ldr	r2, [r4, #24]
    bf34:	e5941024 	ldr	r1, [r4, #36]	; 0x24
    bf38:	e5943020 	ldr	r3, [r4, #32]
    bf3c:	e1510002 	cmp	r1, r2
    bf40:	23a02000 	movcs	r2, #0
    bf44:	25842024 	strcs	r2, [r4, #36]	; 0x24
    bf48:	e594201c 	ldr	r2, [r4, #28]
    bf4c:	22833001 	addcs	r3, r3, #1
    bf50:	25843020 	strcs	r3, [r4, #32]
    bf54:	e1520003 	cmp	r2, r3
    bf58:	8a000004 	bhi	bf70 <wgfx_check_curpos+0x4c>
    bf5c:	e5946034 	ldr	r6, [r4, #52]	; 0x34
    bf60:	e2433001 	sub	r3, r3, #1
    bf64:	e3560004 	cmp	r6, #4
    bf68:	e5843020 	str	r3, [r4, #32]
    bf6c:	9a000001 	bls	bf78 <wgfx_check_curpos+0x54>
    bf70:	e28dd008 	add	sp, sp, #8
    bf74:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    bf78:	e5d43000 	ldrb	r3, [r4]
    bf7c:	e3530000 	cmp	r3, #0
    bf80:	0a000007 	beq	bfa4 <wgfx_check_curpos+0x80>
    bf84:	e59f50f8 	ldr	r5, [pc, #248]	; c084 <wgfx_check_curpos+0x160>
    bf88:	ea000001 	b	bf94 <wgfx_check_curpos+0x70>
    bf8c:	e2555001 	subs	r5, r5, #1
    bf90:	0a000002 	beq	bfa0 <wgfx_check_curpos+0x7c>
    bf94:	ebfff0dc 	bl	830c <dma_running>
    bf98:	e3500000 	cmp	r0, #0
    bf9c:	1afffffa 	bne	bf8c <wgfx_check_curpos+0x68>
    bfa0:	e594201c 	ldr	r2, [r4, #28]
    bfa4:	e3a07000 	mov	r7, #0
    bfa8:	e3a0ce11 	mov	ip, #272	; 0x110
    bfac:	e0863106 	add	r3, r6, r6, lsl #2
    bfb0:	e0866083 	add	r6, r6, r3, lsl #1
    bfb4:	e0846106 	add	r6, r4, r6, lsl #2
    bfb8:	e5960250 	ldr	r0, [r6, #592]	; 0x250
    bfbc:	e2428001 	sub	r8, r2, #1
    bfc0:	e0050290 	mul	r5, r0, r2
    bfc4:	e0080890 	mul	r8, r0, r8
    bfc8:	e596e258 	ldr	lr, [r6, #600]	; 0x258
    bfcc:	e5961244 	ldr	r1, [r6, #580]	; 0x244
    bfd0:	e594300c 	ldr	r3, [r4, #12]
    bfd4:	e022109e 	mla	r2, lr, r0, r1
    bfd8:	e028189e 	mla	r8, lr, r8, r1
    bfdc:	e025159e 	mla	r5, lr, r5, r1
    bfe0:	e5d4a038 	ldrb	sl, [r4, #56]	; 0x38
    bfe4:	e596e23c 	ldr	lr, [r6, #572]	; 0x23c
    bfe8:	e0020293 	mul	r2, r3, r2
    bfec:	e0080893 	mul	r8, r3, r8
    bff0:	e0050593 	mul	r5, r3, r5
    bff4:	e021e193 	mla	r1, r3, r1, lr
    bff8:	e59f6088 	ldr	r6, [pc, #136]	; c088 <wgfx_check_curpos+0x164>
    bffc:	e1a0380a 	lsl	r3, sl, #16
    c000:	e1833c0a 	orr	r3, r3, sl, lsl #24
    c004:	e5949014 	ldr	r9, [r4, #20]
    c008:	e183300a 	orr	r3, r3, sl
    c00c:	e3c6620f 	bic	r6, r6, #-268435456	; 0xf0000000
    c010:	e183340a 	orr	r3, r3, sl, lsl #8
    c014:	e3866101 	orr	r6, r6, #1073741824	; 0x40000000
    c018:	e08e0002 	add	r0, lr, r2
    c01c:	e5863000 	str	r3, [r6]
    c020:	e08ee008 	add	lr, lr, r8
    c024:	e5863004 	str	r3, [r6, #4]
    c028:	e5863008 	str	r3, [r6, #8]
    c02c:	e586300c 	str	r3, [r6, #12]
    c030:	e0452002 	sub	r2, r5, r2
    c034:	e0891001 	add	r1, r9, r1
    c038:	e58dc000 	str	ip, [sp]
    c03c:	e1a03007 	mov	r3, r7
    c040:	e0890000 	add	r0, r9, r0
    c044:	e5c47000 	strb	r7, [r4]
    c048:	e089900e 	add	r9, r9, lr
    c04c:	ebfff082 	bl	825c <dma_enqueue_operation>
    c050:	e3a0c010 	mov	ip, #16
    c054:	e1a03007 	mov	r3, r7
    c058:	e1a01009 	mov	r1, r9
    c05c:	e0452008 	sub	r2, r5, r8
    c060:	e58dc000 	str	ip, [sp]
    c064:	e1a00006 	mov	r0, r6
    c068:	ebfff07b 	bl	825c <dma_enqueue_operation>
    c06c:	ebfff095 	bl	82c8 <dma_execute_queue>
    c070:	e3a03001 	mov	r3, #1
    c074:	e5c43000 	strb	r3, [r4]
    c078:	e28dd008 	add	sp, sp, #8
    c07c:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    c080:	00042a88 	.word	0x00042a88
    c084:	000186a0 	.word	0x000186a0
    c088:	00080e00 	.word	0x00080e00

0000c08c <wgfx_term_putchar>:
    c08c:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    c090:	e2402008 	sub	r2, r0, #8
    c094:	e24dd008 	sub	sp, sp, #8
    c098:	e3520005 	cmp	r2, #5
    c09c:	979ff102 	ldrls	pc, [pc, r2, lsl #2]
    c0a0:	ea00007c 	b	c298 <wgfx_term_putchar+0x20c>
    c0a4:	0000c250 	.word	0x0000c250
    c0a8:	0000c21c 	.word	0x0000c21c
    c0ac:	0000c0d0 	.word	0x0000c0d0
    c0b0:	0000c298 	.word	0x0000c298
    c0b4:	0000c298 	.word	0x0000c298
    c0b8:	0000c0bc 	.word	0x0000c0bc
    c0bc:	e3a02000 	mov	r2, #0
    c0c0:	e59f3220 	ldr	r3, [pc, #544]	; c2e8 <wgfx_term_putchar+0x25c>
    c0c4:	e5832024 	str	r2, [r3, #36]	; 0x24
    c0c8:	e28dd008 	add	sp, sp, #8
    c0cc:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    c0d0:	e3a01000 	mov	r1, #0
    c0d4:	e59f420c 	ldr	r4, [pc, #524]	; c2e8 <wgfx_term_putchar+0x25c>
    c0d8:	e5942020 	ldr	r2, [r4, #32]
    c0dc:	e5940018 	ldr	r0, [r4, #24]
    c0e0:	e2823001 	add	r3, r2, #1
    c0e4:	e1500001 	cmp	r0, r1
    c0e8:	e5843020 	str	r3, [r4, #32]
    c0ec:	02823002 	addeq	r3, r2, #2
    c0f0:	e594201c 	ldr	r2, [r4, #28]
    c0f4:	05843020 	streq	r3, [r4, #32]
    c0f8:	e1520003 	cmp	r2, r3
    c0fc:	e5841024 	str	r1, [r4, #36]	; 0x24
    c100:	8afffff0 	bhi	c0c8 <wgfx_term_putchar+0x3c>
    c104:	e5946034 	ldr	r6, [r4, #52]	; 0x34
    c108:	e2433001 	sub	r3, r3, #1
    c10c:	e3560004 	cmp	r6, #4
    c110:	e5843020 	str	r3, [r4, #32]
    c114:	8affffeb 	bhi	c0c8 <wgfx_term_putchar+0x3c>
    c118:	e5d43000 	ldrb	r3, [r4]
    c11c:	e3530000 	cmp	r3, #0
    c120:	0a000007 	beq	c144 <wgfx_term_putchar+0xb8>
    c124:	e59f51c0 	ldr	r5, [pc, #448]	; c2ec <wgfx_term_putchar+0x260>
    c128:	ea000001 	b	c134 <wgfx_term_putchar+0xa8>
    c12c:	e2555001 	subs	r5, r5, #1
    c130:	0a000002 	beq	c140 <wgfx_term_putchar+0xb4>
    c134:	ebfff074 	bl	830c <dma_running>
    c138:	e3500000 	cmp	r0, #0
    c13c:	1afffffa 	bne	c12c <wgfx_term_putchar+0xa0>
    c140:	e594201c 	ldr	r2, [r4, #28]
    c144:	e3a07000 	mov	r7, #0
    c148:	e3a0ce11 	mov	ip, #272	; 0x110
    c14c:	e0863106 	add	r3, r6, r6, lsl #2
    c150:	e0866083 	add	r6, r6, r3, lsl #1
    c154:	e0846106 	add	r6, r4, r6, lsl #2
    c158:	e5960250 	ldr	r0, [r6, #592]	; 0x250
    c15c:	e2428001 	sub	r8, r2, #1
    c160:	e0050290 	mul	r5, r0, r2
    c164:	e0080890 	mul	r8, r0, r8
    c168:	e596e258 	ldr	lr, [r6, #600]	; 0x258
    c16c:	e5961244 	ldr	r1, [r6, #580]	; 0x244
    c170:	e594300c 	ldr	r3, [r4, #12]
    c174:	e022109e 	mla	r2, lr, r0, r1
    c178:	e028189e 	mla	r8, lr, r8, r1
    c17c:	e025159e 	mla	r5, lr, r5, r1
    c180:	e5d4a038 	ldrb	sl, [r4, #56]	; 0x38
    c184:	e596e23c 	ldr	lr, [r6, #572]	; 0x23c
    c188:	e0020293 	mul	r2, r3, r2
    c18c:	e0080893 	mul	r8, r3, r8
    c190:	e0050593 	mul	r5, r3, r5
    c194:	e021e193 	mla	r1, r3, r1, lr
    c198:	e59f6150 	ldr	r6, [pc, #336]	; c2f0 <wgfx_term_putchar+0x264>
    c19c:	e1a0380a 	lsl	r3, sl, #16
    c1a0:	e1833c0a 	orr	r3, r3, sl, lsl #24
    c1a4:	e5949014 	ldr	r9, [r4, #20]
    c1a8:	e183300a 	orr	r3, r3, sl
    c1ac:	e3c6620f 	bic	r6, r6, #-268435456	; 0xf0000000
    c1b0:	e183340a 	orr	r3, r3, sl, lsl #8
    c1b4:	e3866101 	orr	r6, r6, #1073741824	; 0x40000000
    c1b8:	e08e0002 	add	r0, lr, r2
    c1bc:	e0891001 	add	r1, r9, r1
    c1c0:	e08ee008 	add	lr, lr, r8
    c1c4:	e5863000 	str	r3, [r6]
    c1c8:	e5863004 	str	r3, [r6, #4]
    c1cc:	e5863008 	str	r3, [r6, #8]
    c1d0:	e586300c 	str	r3, [r6, #12]
    c1d4:	e0452002 	sub	r2, r5, r2
    c1d8:	e0890000 	add	r0, r9, r0
    c1dc:	e58dc000 	str	ip, [sp]
    c1e0:	e1a03007 	mov	r3, r7
    c1e4:	e089900e 	add	r9, r9, lr
    c1e8:	e5c47000 	strb	r7, [r4]
    c1ec:	ebfff01a 	bl	825c <dma_enqueue_operation>
    c1f0:	e3a0c010 	mov	ip, #16
    c1f4:	e1a03007 	mov	r3, r7
    c1f8:	e1a01009 	mov	r1, r9
    c1fc:	e0452008 	sub	r2, r5, r8
    c200:	e58dc000 	str	ip, [sp]
    c204:	e1a00006 	mov	r0, r6
    c208:	ebfff013 	bl	825c <dma_enqueue_operation>
    c20c:	ebfff02d 	bl	82c8 <dma_execute_queue>
    c210:	e3a03001 	mov	r3, #1
    c214:	e5c43000 	strb	r3, [r4]
    c218:	eaffffaa 	b	c0c8 <wgfx_term_putchar+0x3c>
    c21c:	e59f10c4 	ldr	r1, [pc, #196]	; c2e8 <wgfx_term_putchar+0x25c>
    c220:	e5913024 	ldr	r3, [r1, #36]	; 0x24
    c224:	e5912018 	ldr	r2, [r1, #24]
    c228:	e2833001 	add	r3, r3, #1
    c22c:	e3c33007 	bic	r3, r3, #7
    c230:	e2833008 	add	r3, r3, #8
    c234:	e2422001 	sub	r2, r2, #1
    c238:	e1530002 	cmp	r3, r2
    c23c:	21a03002 	movcs	r3, r2
    c240:	e5813024 	str	r3, [r1, #36]	; 0x24
    c244:	e28dd008 	add	sp, sp, #8
    c248:	e8bd47f0 	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
    c24c:	eaffff34 	b	bf24 <wgfx_check_curpos>
    c250:	e59f3090 	ldr	r3, [pc, #144]	; c2e8 <wgfx_term_putchar+0x25c>
    c254:	e5931024 	ldr	r1, [r3, #36]	; 0x24
    c258:	e3510000 	cmp	r1, #0
    c25c:	0affff99 	beq	c0c8 <wgfx_term_putchar+0x3c>
    c260:	e5930034 	ldr	r0, [r3, #52]	; 0x34
    c264:	e2411001 	sub	r1, r1, #1
    c268:	e3500004 	cmp	r0, #4
    c26c:	e5831024 	str	r1, [r3, #36]	; 0x24
    c270:	8affff94 	bhi	c0c8 <wgfx_term_putchar+0x3c>
    c274:	e0832000 	add	r2, r3, r0
    c278:	e5d22318 	ldrb	r2, [r2, #792]	; 0x318
    c27c:	e3520000 	cmp	r2, #0
    c280:	0affff90 	beq	c0c8 <wgfx_term_putchar+0x3c>
    c284:	e5932020 	ldr	r2, [r3, #32]
    c288:	e3a03020 	mov	r3, #32
    c28c:	e28dd008 	add	sp, sp, #8
    c290:	e8bd47f0 	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
    c294:	eafffd63 	b	b828 <wgfx_putc.part.0>
    c298:	e59f4048 	ldr	r4, [pc, #72]	; c2e8 <wgfx_term_putchar+0x25c>
    c29c:	e5942034 	ldr	r2, [r4, #52]	; 0x34
    c2a0:	e5941024 	ldr	r1, [r4, #36]	; 0x24
    c2a4:	e3520004 	cmp	r2, #4
    c2a8:	9a000004 	bls	c2c0 <wgfx_term_putchar+0x234>
    c2ac:	e2811001 	add	r1, r1, #1
    c2b0:	e5841024 	str	r1, [r4, #36]	; 0x24
    c2b4:	e28dd008 	add	sp, sp, #8
    c2b8:	e8bd47f0 	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
    c2bc:	eaffff18 	b	bf24 <wgfx_check_curpos>
    c2c0:	e0843002 	add	r3, r4, r2
    c2c4:	e5d33318 	ldrb	r3, [r3, #792]	; 0x318
    c2c8:	e3530000 	cmp	r3, #0
    c2cc:	0afffff6 	beq	c2ac <wgfx_term_putchar+0x220>
    c2d0:	e1a03000 	mov	r3, r0
    c2d4:	e1a00002 	mov	r0, r2
    c2d8:	e5942020 	ldr	r2, [r4, #32]
    c2dc:	ebfffd51 	bl	b828 <wgfx_putc.part.0>
    c2e0:	e5941024 	ldr	r1, [r4, #36]	; 0x24
    c2e4:	eafffff0 	b	c2ac <wgfx_term_putchar+0x220>
    c2e8:	00042a88 	.word	0x00042a88
    c2ec:	000186a0 	.word	0x000186a0
    c2f0:	00080e00 	.word	0x00080e00

0000c2f4 <wgfx_get_term_width>:
    c2f4:	e59f3004 	ldr	r3, [pc, #4]	; c300 <wgfx_get_term_width+0xc>
    c2f8:	e5930018 	ldr	r0, [r3, #24]
    c2fc:	e12fff1e 	bx	lr
    c300:	00042a88 	.word	0x00042a88

0000c304 <wgfx_puts>:
    c304:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c308:	e3500004 	cmp	r0, #4
    c30c:	e24dd00c 	sub	sp, sp, #12
    c310:	e58d2004 	str	r2, [sp, #4]
    c314:	8a00001e 	bhi	c394 <wgfx_puts+0x90>
    c318:	e59f807c 	ldr	r8, [pc, #124]	; c39c <wgfx_puts+0x98>
    c31c:	e1a05000 	mov	r5, r0
    c320:	e1a04001 	mov	r4, r1
    c324:	e2436001 	sub	r6, r3, #1
    c328:	e088a000 	add	sl, r8, r0
    c32c:	e1a09100 	lsl	r9, r0, #2
    c330:	ea000000 	b	c338 <wgfx_puts+0x34>
    c334:	e1a04007 	mov	r4, r7
    c338:	e5f6b001 	ldrb	fp, [r6, #1]!
    c33c:	e0892005 	add	r2, r9, r5
    c340:	e0852082 	add	r2, r5, r2, lsl #1
    c344:	e35b0000 	cmp	fp, #0
    c348:	e0882102 	add	r2, r8, r2, lsl #2
    c34c:	e2847001 	add	r7, r4, #1
    c350:	0a00000f 	beq	c394 <wgfx_puts+0x90>
    c354:	e592124c 	ldr	r1, [r2, #588]	; 0x24c
    c358:	e592c254 	ldr	ip, [r2, #596]	; 0x254
    c35c:	e5920240 	ldr	r0, [r2, #576]	; 0x240
    c360:	e001019c 	mul	r1, ip, r1
    c364:	eb0085ad 	bl	2da20 <__divsi3>
    c368:	e1500004 	cmp	r0, r4
    c36c:	da000008 	ble	c394 <wgfx_puts+0x90>
    c370:	e5da2318 	ldrb	r2, [sl, #792]	; 0x318
    c374:	e3520000 	cmp	r2, #0
    c378:	0affffed 	beq	c334 <wgfx_puts+0x30>
    c37c:	e1a0300b 	mov	r3, fp
    c380:	e1a01004 	mov	r1, r4
    c384:	e59d2004 	ldr	r2, [sp, #4]
    c388:	e1a00005 	mov	r0, r5
    c38c:	ebfffd25 	bl	b828 <wgfx_putc.part.0>
    c390:	eaffffe7 	b	c334 <wgfx_puts+0x30>
    c394:	e28dd00c 	add	sp, sp, #12
    c398:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c39c:	00042a88 	.word	0x00042a88

0000c3a0 <wgfx_putc>:
    c3a0:	e3500004 	cmp	r0, #4
    c3a4:	812fff1e 	bxhi	lr
    c3a8:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    c3ac:	e59fe014 	ldr	lr, [pc, #20]	; c3c8 <wgfx_putc+0x28>
    c3b0:	e08ec000 	add	ip, lr, r0
    c3b4:	e5dcc318 	ldrb	ip, [ip, #792]	; 0x318
    c3b8:	e35c0000 	cmp	ip, #0
    c3bc:	049df004 	popeq	{pc}		; (ldreq pc, [sp], #4)
    c3c0:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
    c3c4:	eafffd17 	b	b828 <wgfx_putc.part.0>
    c3c8:	00042a88 	.word	0x00042a88

0000c3cc <wgfxSetMonoPixel>:
    c3cc:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    c3d0:	e59f50e4 	ldr	r5, [pc, #228]	; c4bc <wgfxSetMonoPixel+0xf0>
    c3d4:	e1a06000 	mov	r6, r0
    c3d8:	e5d50000 	ldrb	r0, [r5]
    c3dc:	e1a09001 	mov	r9, r1
    c3e0:	e3500000 	cmp	r0, #0
    c3e4:	e1a08002 	mov	r8, r2
    c3e8:	e1a0a003 	mov	sl, r3
    c3ec:	159f40cc 	ldrne	r4, [pc, #204]	; c4c0 <wgfxSetMonoPixel+0xf4>
    c3f0:	1a000002 	bne	c400 <wgfxSetMonoPixel+0x34>
    c3f4:	ea000004 	b	c40c <wgfxSetMonoPixel+0x40>
    c3f8:	e2544001 	subs	r4, r4, #1
    c3fc:	0a000002 	beq	c40c <wgfxSetMonoPixel+0x40>
    c400:	ebffefc1 	bl	830c <dma_running>
    c404:	e3500000 	cmp	r0, #0
    c408:	1afffffa 	bne	c3f8 <wgfxSetMonoPixel+0x2c>
    c40c:	e3a04000 	mov	r4, #0
    c410:	e1a0e106 	lsl	lr, r6, #2
    c414:	e08e3006 	add	r3, lr, r6
    c418:	e0863083 	add	r3, r6, r3, lsl #1
    c41c:	e0853103 	add	r3, r5, r3, lsl #2
    c420:	e5937258 	ldr	r7, [r3, #600]	; 0x258
    c424:	e5932244 	ldr	r2, [r3, #580]	; 0x244
    c428:	e593c25c 	ldr	ip, [r3, #604]	; 0x25c
    c42c:	e0222897 	mla	r2, r7, r8, r2
    c430:	e595000c 	ldr	r0, [r5, #12]
    c434:	e5938254 	ldr	r8, [r3, #596]	; 0x254
    c438:	e37c0001 	cmn	ip, #1
    c43c:	e0010998 	mul	r1, r8, r9
    c440:	e0020290 	mul	r2, r0, r2
    c444:	e593323c 	ldr	r3, [r3, #572]	; 0x23c
    c448:	e5c54000 	strb	r4, [r5]
    c44c:	e5959014 	ldr	r9, [r5, #20]
    c450:	05d5c039 	ldrbeq	ip, [r5, #57]	; 0x39
    c454:	e08ee006 	add	lr, lr, r6
    c458:	e086608e 	add	r6, r6, lr, lsl #1
    c45c:	e0856106 	add	r6, r5, r6, lsl #2
    c460:	e5966260 	ldr	r6, [r6, #608]	; 0x260
    c464:	e3760001 	cmn	r6, #1
    c468:	05d56038 	ldrbeq	r6, [r5, #56]	; 0x38
    c46c:	e3570000 	cmp	r7, #0
    c470:	d8bd87f0 	pople	{r4, r5, r6, r7, r8, r9, sl, pc}
    c474:	e35a0000 	cmp	sl, #0
    c478:	11a0600c 	movne	r6, ip
    c47c:	e3580000 	cmp	r8, #0
    c480:	e6ef6076 	uxtb	r6, r6
    c484:	d8bd87f0 	pople	{r4, r5, r6, r7, r8, r9, sl, pc}
    c488:	e3a04000 	mov	r4, #0
    c48c:	e0833001 	add	r3, r3, r1
    c490:	e083a002 	add	sl, r3, r2
    c494:	e020a490 	mla	r0, r0, r4, sl
    c498:	e1a02008 	mov	r2, r8
    c49c:	e0890000 	add	r0, r9, r0
    c4a0:	e2844001 	add	r4, r4, #1
    c4a4:	e1a01006 	mov	r1, r6
    c4a8:	eb007e95 	bl	2bf04 <memset>
    c4ac:	e1540007 	cmp	r4, r7
    c4b0:	08bd87f0 	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
    c4b4:	e595000c 	ldr	r0, [r5, #12]
    c4b8:	eafffff5 	b	c494 <wgfxSetMonoPixel+0xc8>
    c4bc:	00042a88 	.word	0x00042a88
    c4c0:	000186a0 	.word	0x000186a0

0000c4c4 <wgfxSetColourPixel>:
    c4c4:	e92d4ff8 	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c4c8:	e59f60b0 	ldr	r6, [pc, #176]	; c580 <wgfxSetColourPixel+0xbc>
    c4cc:	e1a05000 	mov	r5, r0
    c4d0:	e5d60000 	ldrb	r0, [r6]
    c4d4:	e1a09001 	mov	r9, r1
    c4d8:	e3500000 	cmp	r0, #0
    c4dc:	e1a08002 	mov	r8, r2
    c4e0:	e1a07003 	mov	r7, r3
    c4e4:	0a000006 	beq	c504 <wgfxSetColourPixel+0x40>
    c4e8:	e59f4094 	ldr	r4, [pc, #148]	; c584 <wgfxSetColourPixel+0xc0>
    c4ec:	ea000001 	b	c4f8 <wgfxSetColourPixel+0x34>
    c4f0:	e2544001 	subs	r4, r4, #1
    c4f4:	0a000002 	beq	c504 <wgfxSetColourPixel+0x40>
    c4f8:	ebffef83 	bl	830c <dma_running>
    c4fc:	e3500000 	cmp	r0, #0
    c500:	1afffffa 	bne	c4f0 <wgfxSetColourPixel+0x2c>
    c504:	e3a04000 	mov	r4, #0
    c508:	e0853105 	add	r3, r5, r5, lsl #2
    c50c:	e0853083 	add	r3, r5, r3, lsl #1
    c510:	e0863103 	add	r3, r6, r3, lsl #2
    c514:	e5935258 	ldr	r5, [r3, #600]	; 0x258
    c518:	e5932244 	ldr	r2, [r3, #580]	; 0x244
    c51c:	e593a254 	ldr	sl, [r3, #596]	; 0x254
    c520:	e0282895 	mla	r8, r5, r8, r2
    c524:	e596000c 	ldr	r0, [r6, #12]
    c528:	e1550004 	cmp	r5, r4
    c52c:	e0080890 	mul	r8, r0, r8
    c530:	e009099a 	mul	r9, sl, r9
    c534:	e593323c 	ldr	r3, [r3, #572]	; 0x23c
    c538:	e5c64000 	strb	r4, [r6]
    c53c:	e596b014 	ldr	fp, [r6, #20]
    c540:	d8bd8ff8 	pople	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c544:	e15a0004 	cmp	sl, r4
    c548:	d8bd8ff8 	pople	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c54c:	e0839009 	add	r9, r3, r9
    c550:	e0898008 	add	r8, r9, r8
    c554:	e6ef7077 	uxtb	r7, r7
    c558:	e0208490 	mla	r0, r0, r4, r8
    c55c:	e1a0200a 	mov	r2, sl
    c560:	e08b0000 	add	r0, fp, r0
    c564:	e2844001 	add	r4, r4, #1
    c568:	e1a01007 	mov	r1, r7
    c56c:	eb007e64 	bl	2bf04 <memset>
    c570:	e1540005 	cmp	r4, r5
    c574:	08bd8ff8 	popeq	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c578:	e596000c 	ldr	r0, [r6, #12]
    c57c:	eafffff5 	b	c558 <wgfxSetColourPixel+0x94>
    c580:	00042a88 	.word	0x00042a88
    c584:	000186a0 	.word	0x000186a0

0000c588 <wgfx_write_cell>:
    c588:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c58c:	e1a05001 	mov	r5, r1
    c590:	e1a06000 	mov	r6, r0
    c594:	e59f02b0 	ldr	r0, [pc, #688]	; c84c <wgfx_write_cell+0x2c4>
    c598:	e24dd01c 	sub	sp, sp, #28
    c59c:	e5901018 	ldr	r1, [r0, #24]
    c5a0:	e1510005 	cmp	r1, r5
    c5a4:	9a000098 	bls	c80c <wgfx_write_cell+0x284>
    c5a8:	e1a04003 	mov	r4, r3
    c5ac:	e590301c 	ldr	r3, [r0, #28]
    c5b0:	e1a07002 	mov	r7, r2
    c5b4:	e1530002 	cmp	r3, r2
    c5b8:	9a000093 	bls	c80c <wgfx_write_cell+0x284>
    c5bc:	e3560004 	cmp	r6, #4
    c5c0:	8a000091 	bhi	c80c <wgfx_write_cell+0x284>
    c5c4:	e0803006 	add	r3, r0, r6
    c5c8:	e5d33318 	ldrb	r3, [r3, #792]	; 0x318
    c5cc:	e3530000 	cmp	r3, #0
    c5d0:	0a00008d 	beq	c80c <wgfx_write_cell+0x284>
    c5d4:	e5d03000 	ldrb	r3, [r0]
    c5d8:	e3530000 	cmp	r3, #0
    c5dc:	0a000006 	beq	c5fc <wgfx_write_cell+0x74>
    c5e0:	e59f8268 	ldr	r8, [pc, #616]	; c850 <wgfx_write_cell+0x2c8>
    c5e4:	ea000001 	b	c5f0 <wgfx_write_cell+0x68>
    c5e8:	e2588001 	subs	r8, r8, #1
    c5ec:	0a000002 	beq	c5fc <wgfx_write_cell+0x74>
    c5f0:	ebffef45 	bl	830c <dma_running>
    c5f4:	e3500000 	cmp	r0, #0
    c5f8:	1afffffa 	bne	c5e8 <wgfx_write_cell+0x60>
    c5fc:	e3a00000 	mov	r0, #0
    c600:	e0861106 	add	r1, r6, r6, lsl #2
    c604:	e0861081 	add	r1, r6, r1, lsl #1
    c608:	e59f623c 	ldr	r6, [pc, #572]	; c84c <wgfx_write_cell+0x2c4>
    c60c:	e0861101 	add	r1, r6, r1, lsl #2
    c610:	e5918250 	ldr	r8, [r1, #592]	; 0x250
    c614:	e591b24c 	ldr	fp, [r1, #588]	; 0x24c
    c618:	e0020798 	mul	r2, r8, r7
    c61c:	e003059b 	mul	r3, fp, r5
    c620:	e591c244 	ldr	ip, [r1, #580]	; 0x244
    c624:	e5915258 	ldr	r5, [r1, #600]	; 0x258
    c628:	e591e254 	ldr	lr, [r1, #596]	; 0x254
    c62c:	e591123c 	ldr	r1, [r1, #572]	; 0x23c
    c630:	e022c295 	mla	r2, r5, r2, ip
    c634:	e023139e 	mla	r3, lr, r3, r1
    c638:	e596100c 	ldr	r1, [r6, #12]
    c63c:	e1580000 	cmp	r8, r0
    c640:	e0233291 	mla	r3, r1, r2, r3
    c644:	e5962014 	ldr	r2, [r6, #20]
    c648:	e58d8014 	str	r8, [sp, #20]
    c64c:	e0823003 	add	r3, r2, r3
    c650:	e58d500c 	str	r5, [sp, #12]
    c654:	e5c60000 	strb	r0, [r6]
    c658:	e58d3004 	str	r3, [sp, #4]
    c65c:	da00006a 	ble	c80c <wgfx_write_cell+0x284>
    c660:	e1550000 	cmp	r5, r0
    c664:	c58d0010 	strgt	r0, [sp, #16]
    c668:	da000067 	ble	c80c <wgfx_write_cell+0x284>
    c66c:	e3a03000 	mov	r3, #0
    c670:	e58d3008 	str	r3, [sp, #8]
    c674:	e35b0000 	cmp	fp, #0
    c678:	da000052 	ble	c7c8 <wgfx_write_cell+0x240>
    c67c:	e3a07000 	mov	r7, #0
    c680:	e59dc004 	ldr	ip, [sp, #4]
    c684:	e35e0000 	cmp	lr, #0
    c688:	da00004b 	ble	c7bc <wgfx_write_cell+0x234>
    c68c:	e28c3004 	add	r3, ip, #4
    c690:	e2842004 	add	r2, r4, #4
    c694:	e15c0002 	cmp	ip, r2
    c698:	31540003 	cmpcc	r4, r3
    c69c:	23a03001 	movcs	r3, #1
    c6a0:	33a03000 	movcc	r3, #0
    c6a4:	e35e000b 	cmp	lr, #11
    c6a8:	93a03000 	movls	r3, #0
    c6ac:	82033001 	andhi	r3, r3, #1
    c6b0:	e3530000 	cmp	r3, #0
    c6b4:	0a00005c 	beq	c82c <wgfx_write_cell+0x2a4>
    c6b8:	e2643000 	rsb	r3, r4, #0
    c6bc:	e2133003 	ands	r3, r3, #3
    c6c0:	0a000055 	beq	c81c <wgfx_write_cell+0x294>
    c6c4:	e5d42000 	ldrb	r2, [r4]
    c6c8:	e3530001 	cmp	r3, #1
    c6cc:	e5cc2000 	strb	r2, [ip]
    c6d0:	e2849001 	add	r9, r4, #1
    c6d4:	e28c8001 	add	r8, ip, #1
    c6d8:	0a000051 	beq	c824 <wgfx_write_cell+0x29c>
    c6dc:	e3530003 	cmp	r3, #3
    c6e0:	01a05003 	moveq	r5, r3
    c6e4:	13a05002 	movne	r5, #2
    c6e8:	e5d42001 	ldrb	r2, [r4, #1]
    c6ec:	e2849002 	add	r9, r4, #2
    c6f0:	e5cc2001 	strb	r2, [ip, #1]
    c6f4:	05d42002 	ldrbeq	r2, [r4, #2]
    c6f8:	e28c8002 	add	r8, ip, #2
    c6fc:	02849003 	addeq	r9, r4, #3
    c700:	05cc2002 	strbeq	r2, [ip, #2]
    c704:	028c8003 	addeq	r8, ip, #3
    c708:	e3a02000 	mov	r2, #0
    c70c:	e04e6003 	sub	r6, lr, r3
    c710:	e0841003 	add	r1, r4, r3
    c714:	e1a00126 	lsr	r0, r6, #2
    c718:	e08c3003 	add	r3, ip, r3
    c71c:	e2822001 	add	r2, r2, #1
    c720:	e491a004 	ldr	sl, [r1], #4
    c724:	e1500002 	cmp	r0, r2
    c728:	e483a004 	str	sl, [r3], #4
    c72c:	8afffffa 	bhi	c71c <wgfx_write_cell+0x194>
    c730:	e3c63003 	bic	r3, r6, #3
    c734:	e1560003 	cmp	r6, r3
    c738:	e0835005 	add	r5, r3, r5
    c73c:	e0891003 	add	r1, r9, r3
    c740:	e0882003 	add	r2, r8, r3
    c744:	0a000032 	beq	c814 <wgfx_write_cell+0x28c>
    c748:	e7d90003 	ldrb	r0, [r9, r3]
    c74c:	e2856001 	add	r6, r5, #1
    c750:	e15e0006 	cmp	lr, r6
    c754:	e7c80003 	strb	r0, [r8, r3]
    c758:	da00002d 	ble	c814 <wgfx_write_cell+0x28c>
    c75c:	e5d13001 	ldrb	r3, [r1, #1]
    c760:	e2850002 	add	r0, r5, #2
    c764:	e15e0000 	cmp	lr, r0
    c768:	e5c23001 	strb	r3, [r2, #1]
    c76c:	da000028 	ble	c814 <wgfx_write_cell+0x28c>
    c770:	e5d13002 	ldrb	r3, [r1, #2]
    c774:	e2850003 	add	r0, r5, #3
    c778:	e15e0000 	cmp	lr, r0
    c77c:	e5c23002 	strb	r3, [r2, #2]
    c780:	da000023 	ble	c814 <wgfx_write_cell+0x28c>
    c784:	e5d13003 	ldrb	r3, [r1, #3]
    c788:	e2850004 	add	r0, r5, #4
    c78c:	e15e0000 	cmp	lr, r0
    c790:	e5c23003 	strb	r3, [r2, #3]
    c794:	da00001e 	ble	c814 <wgfx_write_cell+0x28c>
    c798:	e2855005 	add	r5, r5, #5
    c79c:	e5d13004 	ldrb	r3, [r1, #4]
    c7a0:	e15e0005 	cmp	lr, r5
    c7a4:	e5c23004 	strb	r3, [r2, #4]
    c7a8:	da000019 	ble	c814 <wgfx_write_cell+0x28c>
    c7ac:	e5d13005 	ldrb	r3, [r1, #5]
    c7b0:	e084400e 	add	r4, r4, lr
    c7b4:	e5c23005 	strb	r3, [r2, #5]
    c7b8:	e08cc00e 	add	ip, ip, lr
    c7bc:	e2877001 	add	r7, r7, #1
    c7c0:	e15b0007 	cmp	fp, r7
    c7c4:	1affffae 	bne	c684 <wgfx_write_cell+0xfc>
    c7c8:	e59d3008 	ldr	r3, [sp, #8]
    c7cc:	e59d100c 	ldr	r1, [sp, #12]
    c7d0:	e2832001 	add	r2, r3, #1
    c7d4:	e59f3070 	ldr	r3, [pc, #112]	; c84c <wgfx_write_cell+0x2c4>
    c7d8:	e58d2008 	str	r2, [sp, #8]
    c7dc:	e593300c 	ldr	r3, [r3, #12]
    c7e0:	e1510002 	cmp	r1, r2
    c7e4:	e59d2004 	ldr	r2, [sp, #4]
    c7e8:	e0823003 	add	r3, r2, r3
    c7ec:	e58d3004 	str	r3, [sp, #4]
    c7f0:	1affff9f 	bne	c674 <wgfx_write_cell+0xec>
    c7f4:	e59d3010 	ldr	r3, [sp, #16]
    c7f8:	e59d2014 	ldr	r2, [sp, #20]
    c7fc:	e2833001 	add	r3, r3, #1
    c800:	e1520003 	cmp	r2, r3
    c804:	e58d3010 	str	r3, [sp, #16]
    c808:	1affff97 	bne	c66c <wgfx_write_cell+0xe4>
    c80c:	e28dd01c 	add	sp, sp, #28
    c810:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c814:	e084400e 	add	r4, r4, lr
    c818:	eaffffe6 	b	c7b8 <wgfx_write_cell+0x230>
    c81c:	e1a0800c 	mov	r8, ip
    c820:	e1a09004 	mov	r9, r4
    c824:	e1a05003 	mov	r5, r3
    c828:	eaffffb6 	b	c708 <wgfx_write_cell+0x180>
    c82c:	e1a03004 	mov	r3, r4
    c830:	e24c2001 	sub	r2, ip, #1
    c834:	e084400e 	add	r4, r4, lr
    c838:	e4d31001 	ldrb	r1, [r3], #1
    c83c:	e1540003 	cmp	r4, r3
    c840:	e5e21001 	strb	r1, [r2, #1]!
    c844:	1afffffb 	bne	c838 <wgfx_write_cell+0x2b0>
    c848:	eaffffda 	b	c7b8 <wgfx_write_cell+0x230>
    c84c:	00042a88 	.word	0x00042a88
    c850:	000186a0 	.word	0x000186a0

0000c854 <wgfx_read_cell>:
    c854:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c858:	e1a05001 	mov	r5, r1
    c85c:	e1a06000 	mov	r6, r0
    c860:	e59f02b0 	ldr	r0, [pc, #688]	; cb18 <wgfx_read_cell+0x2c4>
    c864:	e24dd01c 	sub	sp, sp, #28
    c868:	e5901018 	ldr	r1, [r0, #24]
    c86c:	e1510005 	cmp	r1, r5
    c870:	9a000098 	bls	cad8 <wgfx_read_cell+0x284>
    c874:	e1a04003 	mov	r4, r3
    c878:	e590301c 	ldr	r3, [r0, #28]
    c87c:	e1a07002 	mov	r7, r2
    c880:	e1530002 	cmp	r3, r2
    c884:	9a000093 	bls	cad8 <wgfx_read_cell+0x284>
    c888:	e3560004 	cmp	r6, #4
    c88c:	8a000091 	bhi	cad8 <wgfx_read_cell+0x284>
    c890:	e0803006 	add	r3, r0, r6
    c894:	e5d33318 	ldrb	r3, [r3, #792]	; 0x318
    c898:	e3530000 	cmp	r3, #0
    c89c:	0a00008d 	beq	cad8 <wgfx_read_cell+0x284>
    c8a0:	e5d03000 	ldrb	r3, [r0]
    c8a4:	e3530000 	cmp	r3, #0
    c8a8:	0a000006 	beq	c8c8 <wgfx_read_cell+0x74>
    c8ac:	e59f8268 	ldr	r8, [pc, #616]	; cb1c <wgfx_read_cell+0x2c8>
    c8b0:	ea000001 	b	c8bc <wgfx_read_cell+0x68>
    c8b4:	e2588001 	subs	r8, r8, #1
    c8b8:	0a000002 	beq	c8c8 <wgfx_read_cell+0x74>
    c8bc:	ebffee92 	bl	830c <dma_running>
    c8c0:	e3500000 	cmp	r0, #0
    c8c4:	1afffffa 	bne	c8b4 <wgfx_read_cell+0x60>
    c8c8:	e3a00000 	mov	r0, #0
    c8cc:	e0861106 	add	r1, r6, r6, lsl #2
    c8d0:	e0861081 	add	r1, r6, r1, lsl #1
    c8d4:	e59f623c 	ldr	r6, [pc, #572]	; cb18 <wgfx_read_cell+0x2c4>
    c8d8:	e0861101 	add	r1, r6, r1, lsl #2
    c8dc:	e5918250 	ldr	r8, [r1, #592]	; 0x250
    c8e0:	e591b24c 	ldr	fp, [r1, #588]	; 0x24c
    c8e4:	e0070798 	mul	r7, r8, r7
    c8e8:	e002059b 	mul	r2, fp, r5
    c8ec:	e591c23c 	ldr	ip, [r1, #572]	; 0x23c
    c8f0:	e5915258 	ldr	r5, [r1, #600]	; 0x258
    c8f4:	e5913254 	ldr	r3, [r1, #596]	; 0x254
    c8f8:	e591e244 	ldr	lr, [r1, #580]	; 0x244
    c8fc:	e022c293 	mla	r2, r3, r2, ip
    c900:	e021e795 	mla	r1, r5, r7, lr
    c904:	e596c00c 	ldr	ip, [r6, #12]
    c908:	e1580000 	cmp	r8, r0
    c90c:	e022219c 	mla	r2, ip, r1, r2
    c910:	e5961014 	ldr	r1, [r6, #20]
    c914:	e58d8014 	str	r8, [sp, #20]
    c918:	e0812002 	add	r2, r1, r2
    c91c:	e58d500c 	str	r5, [sp, #12]
    c920:	e5c60000 	strb	r0, [r6]
    c924:	e58d2004 	str	r2, [sp, #4]
    c928:	da00006a 	ble	cad8 <wgfx_read_cell+0x284>
    c92c:	e1550000 	cmp	r5, r0
    c930:	c58d0010 	strgt	r0, [sp, #16]
    c934:	da000067 	ble	cad8 <wgfx_read_cell+0x284>
    c938:	e3a02000 	mov	r2, #0
    c93c:	e58d2008 	str	r2, [sp, #8]
    c940:	e35b0000 	cmp	fp, #0
    c944:	da000052 	ble	ca94 <wgfx_read_cell+0x240>
    c948:	e3a07000 	mov	r7, #0
    c94c:	e59d0004 	ldr	r0, [sp, #4]
    c950:	e3530000 	cmp	r3, #0
    c954:	da00004b 	ble	ca88 <wgfx_read_cell+0x234>
    c958:	e2802004 	add	r2, r0, #4
    c95c:	e2841004 	add	r1, r4, #4
    c960:	e1500001 	cmp	r0, r1
    c964:	31540002 	cmpcc	r4, r2
    c968:	23a02001 	movcs	r2, #1
    c96c:	33a02000 	movcc	r2, #0
    c970:	e353000b 	cmp	r3, #11
    c974:	93a02000 	movls	r2, #0
    c978:	82022001 	andhi	r2, r2, #1
    c97c:	e3520000 	cmp	r2, #0
    c980:	0a00005c 	beq	caf8 <wgfx_read_cell+0x2a4>
    c984:	e2602000 	rsb	r2, r0, #0
    c988:	e2122003 	ands	r2, r2, #3
    c98c:	0a000055 	beq	cae8 <wgfx_read_cell+0x294>
    c990:	e5d01000 	ldrb	r1, [r0]
    c994:	e3520001 	cmp	r2, #1
    c998:	e5c41000 	strb	r1, [r4]
    c99c:	e2809001 	add	r9, r0, #1
    c9a0:	e2848001 	add	r8, r4, #1
    c9a4:	0a000051 	beq	caf0 <wgfx_read_cell+0x29c>
    c9a8:	e3520003 	cmp	r2, #3
    c9ac:	01a05002 	moveq	r5, r2
    c9b0:	13a05002 	movne	r5, #2
    c9b4:	e5d01001 	ldrb	r1, [r0, #1]
    c9b8:	e2809002 	add	r9, r0, #2
    c9bc:	e5c41001 	strb	r1, [r4, #1]
    c9c0:	05d01002 	ldrbeq	r1, [r0, #2]
    c9c4:	e2848002 	add	r8, r4, #2
    c9c8:	02809003 	addeq	r9, r0, #3
    c9cc:	05c41002 	strbeq	r1, [r4, #2]
    c9d0:	02848003 	addeq	r8, r4, #3
    c9d4:	e3a01000 	mov	r1, #0
    c9d8:	e0436002 	sub	r6, r3, r2
    c9dc:	e080c002 	add	ip, r0, r2
    c9e0:	e1a0e126 	lsr	lr, r6, #2
    c9e4:	e0842002 	add	r2, r4, r2
    c9e8:	e2811001 	add	r1, r1, #1
    c9ec:	e49ca004 	ldr	sl, [ip], #4
    c9f0:	e15e0001 	cmp	lr, r1
    c9f4:	e482a004 	str	sl, [r2], #4
    c9f8:	8afffffa 	bhi	c9e8 <wgfx_read_cell+0x194>
    c9fc:	e3c62003 	bic	r2, r6, #3
    ca00:	e1560002 	cmp	r6, r2
    ca04:	e0825005 	add	r5, r2, r5
    ca08:	e089c002 	add	ip, r9, r2
    ca0c:	e0881002 	add	r1, r8, r2
    ca10:	0a000032 	beq	cae0 <wgfx_read_cell+0x28c>
    ca14:	e7d9e002 	ldrb	lr, [r9, r2]
    ca18:	e2856001 	add	r6, r5, #1
    ca1c:	e1530006 	cmp	r3, r6
    ca20:	e7c8e002 	strb	lr, [r8, r2]
    ca24:	da00002d 	ble	cae0 <wgfx_read_cell+0x28c>
    ca28:	e5dc2001 	ldrb	r2, [ip, #1]
    ca2c:	e285e002 	add	lr, r5, #2
    ca30:	e153000e 	cmp	r3, lr
    ca34:	e5c12001 	strb	r2, [r1, #1]
    ca38:	da000028 	ble	cae0 <wgfx_read_cell+0x28c>
    ca3c:	e5dc2002 	ldrb	r2, [ip, #2]
    ca40:	e285e003 	add	lr, r5, #3
    ca44:	e153000e 	cmp	r3, lr
    ca48:	e5c12002 	strb	r2, [r1, #2]
    ca4c:	da000023 	ble	cae0 <wgfx_read_cell+0x28c>
    ca50:	e5dc2003 	ldrb	r2, [ip, #3]
    ca54:	e285e004 	add	lr, r5, #4
    ca58:	e153000e 	cmp	r3, lr
    ca5c:	e5c12003 	strb	r2, [r1, #3]
    ca60:	da00001e 	ble	cae0 <wgfx_read_cell+0x28c>
    ca64:	e2855005 	add	r5, r5, #5
    ca68:	e5dc2004 	ldrb	r2, [ip, #4]
    ca6c:	e1530005 	cmp	r3, r5
    ca70:	e5c12004 	strb	r2, [r1, #4]
    ca74:	da000019 	ble	cae0 <wgfx_read_cell+0x28c>
    ca78:	e5dc2005 	ldrb	r2, [ip, #5]
    ca7c:	e0800003 	add	r0, r0, r3
    ca80:	e5c12005 	strb	r2, [r1, #5]
    ca84:	e0844003 	add	r4, r4, r3
    ca88:	e2877001 	add	r7, r7, #1
    ca8c:	e15b0007 	cmp	fp, r7
    ca90:	1affffae 	bne	c950 <wgfx_read_cell+0xfc>
    ca94:	e59d2008 	ldr	r2, [sp, #8]
    ca98:	e59d000c 	ldr	r0, [sp, #12]
    ca9c:	e2821001 	add	r1, r2, #1
    caa0:	e59f2070 	ldr	r2, [pc, #112]	; cb18 <wgfx_read_cell+0x2c4>
    caa4:	e58d1008 	str	r1, [sp, #8]
    caa8:	e592200c 	ldr	r2, [r2, #12]
    caac:	e1500001 	cmp	r0, r1
    cab0:	e59d1004 	ldr	r1, [sp, #4]
    cab4:	e0812002 	add	r2, r1, r2
    cab8:	e58d2004 	str	r2, [sp, #4]
    cabc:	1affff9f 	bne	c940 <wgfx_read_cell+0xec>
    cac0:	e59d2010 	ldr	r2, [sp, #16]
    cac4:	e59d1014 	ldr	r1, [sp, #20]
    cac8:	e2822001 	add	r2, r2, #1
    cacc:	e1510002 	cmp	r1, r2
    cad0:	e58d2010 	str	r2, [sp, #16]
    cad4:	1affff97 	bne	c938 <wgfx_read_cell+0xe4>
    cad8:	e28dd01c 	add	sp, sp, #28
    cadc:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    cae0:	e0800003 	add	r0, r0, r3
    cae4:	eaffffe6 	b	ca84 <wgfx_read_cell+0x230>
    cae8:	e1a08004 	mov	r8, r4
    caec:	e1a09000 	mov	r9, r0
    caf0:	e1a05002 	mov	r5, r2
    caf4:	eaffffb6 	b	c9d4 <wgfx_read_cell+0x180>
    caf8:	e1a02000 	mov	r2, r0
    cafc:	e2441001 	sub	r1, r4, #1
    cb00:	e0800003 	add	r0, r0, r3
    cb04:	e4d2c001 	ldrb	ip, [r2], #1
    cb08:	e1500002 	cmp	r0, r2
    cb0c:	e5e1c001 	strb	ip, [r1, #1]!
    cb10:	1afffffb 	bne	cb04 <wgfx_read_cell+0x2b0>
    cb14:	eaffffda 	b	ca84 <wgfx_read_cell+0x230>
    cb18:	00042a88 	.word	0x00042a88
    cb1c:	000186a0 	.word	0x000186a0

0000cb20 <wgfx_get_win_pfb>:
    cb20:	e92d4030 	push	{r4, r5, lr}
    cb24:	e0803100 	add	r3, r0, r0, lsl #2
    cb28:	e59fe040 	ldr	lr, [pc, #64]	; cb70 <wgfx_get_win_pfb+0x50>
    cb2c:	e0800083 	add	r0, r0, r3, lsl #1
    cb30:	e08e0100 	add	r0, lr, r0, lsl #2
    cb34:	e5903250 	ldr	r3, [r0, #592]	; 0x250
    cb38:	e590c24c 	ldr	ip, [r0, #588]	; 0x24c
    cb3c:	e0020293 	mul	r2, r3, r2
    cb40:	e001019c 	mul	r1, ip, r1
    cb44:	e5903244 	ldr	r3, [r0, #580]	; 0x244
    cb48:	e5905258 	ldr	r5, [r0, #600]	; 0x258
    cb4c:	e5904254 	ldr	r4, [r0, #596]	; 0x254
    cb50:	e590c23c 	ldr	ip, [r0, #572]	; 0x23c
    cb54:	e0223295 	mla	r2, r5, r2, r3
    cb58:	e021c194 	mla	r1, r4, r1, ip
    cb5c:	e59e300c 	ldr	r3, [lr, #12]
    cb60:	e59e0014 	ldr	r0, [lr, #20]
    cb64:	e0221293 	mla	r2, r3, r2, r1
    cb68:	e0800002 	add	r0, r0, r2
    cb6c:	e8bd8030 	pop	{r4, r5, pc}
    cb70:	00042a88 	.word	0x00042a88

0000cb74 <wgfx_get_win_pfb_xy>:
    cb74:	e92d4010 	push	{r4, lr}
    cb78:	e0803100 	add	r3, r0, r0, lsl #2
    cb7c:	e59fe030 	ldr	lr, [pc, #48]	; cbb4 <wgfx_get_win_pfb_xy+0x40>
    cb80:	e0800083 	add	r0, r0, r3, lsl #1
    cb84:	e08e0100 	add	r0, lr, r0, lsl #2
    cb88:	e5903258 	ldr	r3, [r0, #600]	; 0x258
    cb8c:	e5904244 	ldr	r4, [r0, #580]	; 0x244
    cb90:	e590c254 	ldr	ip, [r0, #596]	; 0x254
    cb94:	e590023c 	ldr	r0, [r0, #572]	; 0x23c
    cb98:	e0224293 	mla	r2, r3, r2, r4
    cb9c:	e021019c 	mla	r1, ip, r1, r0
    cba0:	e59e300c 	ldr	r3, [lr, #12]
    cba4:	e59e0014 	ldr	r0, [lr, #20]
    cba8:	e0221293 	mla	r2, r3, r2, r1
    cbac:	e0800002 	add	r0, r0, r2
    cbb0:	e8bd8010 	pop	{r4, pc}
    cbb4:	00042a88 	.word	0x00042a88

0000cbb8 <wgfx_get_pfb_xy>:
    cbb8:	e59f2010 	ldr	r2, [pc, #16]	; cbd0 <wgfx_get_pfb_xy+0x18>
    cbbc:	e592300c 	ldr	r3, [r2, #12]
    cbc0:	e5922014 	ldr	r2, [r2, #20]
    cbc4:	e0200193 	mla	r0, r3, r1, r0
    cbc8:	e0820000 	add	r0, r2, r0
    cbcc:	e12fff1e 	bx	lr
    cbd0:	00042a88 	.word	0x00042a88

0000cbd4 <wgfx_restore_cursor_content>:
    cbd4:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    cbd8:	e59f22b8 	ldr	r2, [pc, #696]	; ce98 <wgfx_restore_cursor_content+0x2c4>
    cbdc:	e24dd01c 	sub	sp, sp, #28
    cbe0:	e5924024 	ldr	r4, [r2, #36]	; 0x24
    cbe4:	e5923018 	ldr	r3, [r2, #24]
    cbe8:	e1540003 	cmp	r4, r3
    cbec:	2a000099 	bcs	ce58 <wgfx_restore_cursor_content+0x284>
    cbf0:	e5926020 	ldr	r6, [r2, #32]
    cbf4:	e592301c 	ldr	r3, [r2, #28]
    cbf8:	e1560003 	cmp	r6, r3
    cbfc:	2a000095 	bcs	ce58 <wgfx_restore_cursor_content+0x284>
    cc00:	e5925034 	ldr	r5, [r2, #52]	; 0x34
    cc04:	e3550004 	cmp	r5, #4
    cc08:	8a000092 	bhi	ce58 <wgfx_restore_cursor_content+0x284>
    cc0c:	e0823005 	add	r3, r2, r5
    cc10:	e5d33318 	ldrb	r3, [r3, #792]	; 0x318
    cc14:	e3530000 	cmp	r3, #0
    cc18:	0a00008e 	beq	ce58 <wgfx_restore_cursor_content+0x284>
    cc1c:	e5d23000 	ldrb	r3, [r2]
    cc20:	e3530000 	cmp	r3, #0
    cc24:	0a000006 	beq	cc44 <wgfx_restore_cursor_content+0x70>
    cc28:	e59f726c 	ldr	r7, [pc, #620]	; ce9c <wgfx_restore_cursor_content+0x2c8>
    cc2c:	ea000001 	b	cc38 <wgfx_restore_cursor_content+0x64>
    cc30:	e2577001 	subs	r7, r7, #1
    cc34:	0a000002 	beq	cc44 <wgfx_restore_cursor_content+0x70>
    cc38:	ebffedb3 	bl	830c <dma_running>
    cc3c:	e3500000 	cmp	r0, #0
    cc40:	1afffffa 	bne	cc30 <wgfx_restore_cursor_content+0x5c>
    cc44:	e3a01000 	mov	r1, #0
    cc48:	e59fe248 	ldr	lr, [pc, #584]	; ce98 <wgfx_restore_cursor_content+0x2c4>
    cc4c:	e0852105 	add	r2, r5, r5, lsl #2
    cc50:	e0852082 	add	r2, r5, r2, lsl #1
    cc54:	e08e2102 	add	r2, lr, r2, lsl #2
    cc58:	e5925250 	ldr	r5, [r2, #592]	; 0x250
    cc5c:	e592b24c 	ldr	fp, [r2, #588]	; 0x24c
    cc60:	e0060695 	mul	r6, r5, r6
    cc64:	e003049b 	mul	r3, fp, r4
    cc68:	e592023c 	ldr	r0, [r2, #572]	; 0x23c
    cc6c:	e5927258 	ldr	r7, [r2, #600]	; 0x258
    cc70:	e5924254 	ldr	r4, [r2, #596]	; 0x254
    cc74:	e592c244 	ldr	ip, [r2, #580]	; 0x244
    cc78:	e0230394 	mla	r3, r4, r3, r0
    cc7c:	e022c697 	mla	r2, r7, r6, ip
    cc80:	e59e000c 	ldr	r0, [lr, #12]
    cc84:	e1550001 	cmp	r5, r1
    cc88:	e0233290 	mla	r3, r0, r2, r3
    cc8c:	e59e2014 	ldr	r2, [lr, #20]
    cc90:	e58d5014 	str	r5, [sp, #20]
    cc94:	e0823003 	add	r3, r2, r3
    cc98:	e58d700c 	str	r7, [sp, #12]
    cc9c:	e5ce1000 	strb	r1, [lr]
    cca0:	e58d3004 	str	r3, [sp, #4]
    cca4:	da00006b 	ble	ce58 <wgfx_restore_cursor_content+0x284>
    cca8:	e1570001 	cmp	r7, r1
    ccac:	da000069 	ble	ce58 <wgfx_restore_cursor_content+0x284>
    ccb0:	e58d1010 	str	r1, [sp, #16]
    ccb4:	e59f11e4 	ldr	r1, [pc, #484]	; cea0 <wgfx_restore_cursor_content+0x2cc>
    ccb8:	e3a03000 	mov	r3, #0
    ccbc:	e58d3008 	str	r3, [sp, #8]
    ccc0:	e35b0000 	cmp	fp, #0
    ccc4:	da000052 	ble	ce14 <wgfx_restore_cursor_content+0x240>
    ccc8:	e3a07000 	mov	r7, #0
    cccc:	e59de004 	ldr	lr, [sp, #4]
    ccd0:	e3540000 	cmp	r4, #0
    ccd4:	da00004b 	ble	ce08 <wgfx_restore_cursor_content+0x234>
    ccd8:	e28e3004 	add	r3, lr, #4
    ccdc:	e2812004 	add	r2, r1, #4
    cce0:	e15e0002 	cmp	lr, r2
    cce4:	31510003 	cmpcc	r1, r3
    cce8:	23a03001 	movcs	r3, #1
    ccec:	33a03000 	movcc	r3, #0
    ccf0:	e354000b 	cmp	r4, #11
    ccf4:	93a03000 	movls	r3, #0
    ccf8:	82033001 	andhi	r3, r3, #1
    ccfc:	e3530000 	cmp	r3, #0
    cd00:	0a00005c 	beq	ce78 <wgfx_restore_cursor_content+0x2a4>
    cd04:	e2613000 	rsb	r3, r1, #0
    cd08:	e2133003 	ands	r3, r3, #3
    cd0c:	0a000055 	beq	ce68 <wgfx_restore_cursor_content+0x294>
    cd10:	e5d12000 	ldrb	r2, [r1]
    cd14:	e3530001 	cmp	r3, #1
    cd18:	e5ce2000 	strb	r2, [lr]
    cd1c:	e2819001 	add	r9, r1, #1
    cd20:	e28e8001 	add	r8, lr, #1
    cd24:	0a000051 	beq	ce70 <wgfx_restore_cursor_content+0x29c>
    cd28:	e3530003 	cmp	r3, #3
    cd2c:	01a05003 	moveq	r5, r3
    cd30:	13a05002 	movne	r5, #2
    cd34:	e5d12001 	ldrb	r2, [r1, #1]
    cd38:	e2819002 	add	r9, r1, #2
    cd3c:	e5ce2001 	strb	r2, [lr, #1]
    cd40:	05d12002 	ldrbeq	r2, [r1, #2]
    cd44:	e28e8002 	add	r8, lr, #2
    cd48:	02819003 	addeq	r9, r1, #3
    cd4c:	05ce2002 	strbeq	r2, [lr, #2]
    cd50:	028e8003 	addeq	r8, lr, #3
    cd54:	e3a02000 	mov	r2, #0
    cd58:	e0446003 	sub	r6, r4, r3
    cd5c:	e0810003 	add	r0, r1, r3
    cd60:	e1a0c126 	lsr	ip, r6, #2
    cd64:	e08e3003 	add	r3, lr, r3
    cd68:	e2822001 	add	r2, r2, #1
    cd6c:	e490a004 	ldr	sl, [r0], #4
    cd70:	e15c0002 	cmp	ip, r2
    cd74:	e483a004 	str	sl, [r3], #4
    cd78:	8afffffa 	bhi	cd68 <wgfx_restore_cursor_content+0x194>
    cd7c:	e3c63003 	bic	r3, r6, #3
    cd80:	e1560003 	cmp	r6, r3
    cd84:	e0835005 	add	r5, r3, r5
    cd88:	e0890003 	add	r0, r9, r3
    cd8c:	e0882003 	add	r2, r8, r3
    cd90:	0a000032 	beq	ce60 <wgfx_restore_cursor_content+0x28c>
    cd94:	e7d9c003 	ldrb	ip, [r9, r3]
    cd98:	e2856001 	add	r6, r5, #1
    cd9c:	e1540006 	cmp	r4, r6
    cda0:	e7c8c003 	strb	ip, [r8, r3]
    cda4:	da00002d 	ble	ce60 <wgfx_restore_cursor_content+0x28c>
    cda8:	e5d03001 	ldrb	r3, [r0, #1]
    cdac:	e285c002 	add	ip, r5, #2
    cdb0:	e154000c 	cmp	r4, ip
    cdb4:	e5c23001 	strb	r3, [r2, #1]
    cdb8:	da000028 	ble	ce60 <wgfx_restore_cursor_content+0x28c>
    cdbc:	e5d03002 	ldrb	r3, [r0, #2]
    cdc0:	e285c003 	add	ip, r5, #3
    cdc4:	e154000c 	cmp	r4, ip
    cdc8:	e5c23002 	strb	r3, [r2, #2]
    cdcc:	da000023 	ble	ce60 <wgfx_restore_cursor_content+0x28c>
    cdd0:	e5d03003 	ldrb	r3, [r0, #3]
    cdd4:	e285c004 	add	ip, r5, #4
    cdd8:	e154000c 	cmp	r4, ip
    cddc:	e5c23003 	strb	r3, [r2, #3]
    cde0:	da00001e 	ble	ce60 <wgfx_restore_cursor_content+0x28c>
    cde4:	e2855005 	add	r5, r5, #5
    cde8:	e5d03004 	ldrb	r3, [r0, #4]
    cdec:	e1540005 	cmp	r4, r5
    cdf0:	e5c23004 	strb	r3, [r2, #4]
    cdf4:	da000019 	ble	ce60 <wgfx_restore_cursor_content+0x28c>
    cdf8:	e5d03005 	ldrb	r3, [r0, #5]
    cdfc:	e0811004 	add	r1, r1, r4
    ce00:	e5c23005 	strb	r3, [r2, #5]
    ce04:	e08ee004 	add	lr, lr, r4
    ce08:	e2877001 	add	r7, r7, #1
    ce0c:	e15b0007 	cmp	fp, r7
    ce10:	1affffae 	bne	ccd0 <wgfx_restore_cursor_content+0xfc>
    ce14:	e59d3008 	ldr	r3, [sp, #8]
    ce18:	e59d000c 	ldr	r0, [sp, #12]
    ce1c:	e2832001 	add	r2, r3, #1
    ce20:	e59f3070 	ldr	r3, [pc, #112]	; ce98 <wgfx_restore_cursor_content+0x2c4>
    ce24:	e58d2008 	str	r2, [sp, #8]
    ce28:	e593300c 	ldr	r3, [r3, #12]
    ce2c:	e1500002 	cmp	r0, r2
    ce30:	e59d2004 	ldr	r2, [sp, #4]
    ce34:	e0823003 	add	r3, r2, r3
    ce38:	e58d3004 	str	r3, [sp, #4]
    ce3c:	1affff9f 	bne	ccc0 <wgfx_restore_cursor_content+0xec>
    ce40:	e59d3010 	ldr	r3, [sp, #16]
    ce44:	e59d2014 	ldr	r2, [sp, #20]
    ce48:	e2833001 	add	r3, r3, #1
    ce4c:	e1520003 	cmp	r2, r3
    ce50:	e58d3010 	str	r3, [sp, #16]
    ce54:	1affff97 	bne	ccb8 <wgfx_restore_cursor_content+0xe4>
    ce58:	e28dd01c 	add	sp, sp, #28
    ce5c:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ce60:	e0811004 	add	r1, r1, r4
    ce64:	eaffffe6 	b	ce04 <wgfx_restore_cursor_content+0x230>
    ce68:	e1a0800e 	mov	r8, lr
    ce6c:	e1a09001 	mov	r9, r1
    ce70:	e1a05003 	mov	r5, r3
    ce74:	eaffffb6 	b	cd54 <wgfx_restore_cursor_content+0x180>
    ce78:	e1a03001 	mov	r3, r1
    ce7c:	e24e2001 	sub	r2, lr, #1
    ce80:	e0811004 	add	r1, r1, r4
    ce84:	e4d30001 	ldrb	r0, [r3], #1
    ce88:	e1510003 	cmp	r1, r3
    ce8c:	e5e20001 	strb	r0, [r2, #1]!
    ce90:	1afffffb 	bne	ce84 <wgfx_restore_cursor_content+0x2b0>
    ce94:	eaffffda 	b	ce04 <wgfx_restore_cursor_content+0x230>
    ce98:	00042a88 	.word	0x00042a88
    ce9c:	000186a0 	.word	0x000186a0
    cea0:	00042ac2 	.word	0x00042ac2

0000cea4 <wgfx_term_render_cursor>:
    cea4:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    cea8:	e59f2310 	ldr	r2, [pc, #784]	; d1c0 <wgfx_term_render_cursor+0x31c>
    ceac:	e24dd01c 	sub	sp, sp, #28
    ceb0:	e5925024 	ldr	r5, [r2, #36]	; 0x24
    ceb4:	e5923018 	ldr	r3, [r2, #24]
    ceb8:	e5924034 	ldr	r4, [r2, #52]	; 0x34
    cebc:	e1550003 	cmp	r5, r3
    cec0:	e5926020 	ldr	r6, [r2, #32]
    cec4:	2a00009b 	bcs	d138 <wgfx_term_render_cursor+0x294>
    cec8:	e592301c 	ldr	r3, [r2, #28]
    cecc:	e1560003 	cmp	r6, r3
    ced0:	2a000098 	bcs	d138 <wgfx_term_render_cursor+0x294>
    ced4:	e3540004 	cmp	r4, #4
    ced8:	8a0000a4 	bhi	d170 <wgfx_term_render_cursor+0x2cc>
    cedc:	e0823004 	add	r3, r2, r4
    cee0:	e5d33318 	ldrb	r3, [r3, #792]	; 0x318
    cee4:	e3530000 	cmp	r3, #0
    cee8:	0a0000a0 	beq	d170 <wgfx_term_render_cursor+0x2cc>
    ceec:	e5d23000 	ldrb	r3, [r2]
    cef0:	e3530000 	cmp	r3, #0
    cef4:	0a000006 	beq	cf14 <wgfx_term_render_cursor+0x70>
    cef8:	e59f72c4 	ldr	r7, [pc, #708]	; d1c4 <wgfx_term_render_cursor+0x320>
    cefc:	ea000001 	b	cf08 <wgfx_term_render_cursor+0x64>
    cf00:	e2577001 	subs	r7, r7, #1
    cf04:	0a000002 	beq	cf14 <wgfx_term_render_cursor+0x70>
    cf08:	ebffecff 	bl	830c <dma_running>
    cf0c:	e3500000 	cmp	r0, #0
    cf10:	1afffffa 	bne	cf00 <wgfx_term_render_cursor+0x5c>
    cf14:	e3a02000 	mov	r2, #0
    cf18:	e59fe2a0 	ldr	lr, [pc, #672]	; d1c0 <wgfx_term_render_cursor+0x31c>
    cf1c:	e0843104 	add	r3, r4, r4, lsl #2
    cf20:	e0843083 	add	r3, r4, r3, lsl #1
    cf24:	e08e3103 	add	r3, lr, r3, lsl #2
    cf28:	e5937250 	ldr	r7, [r3, #592]	; 0x250
    cf2c:	e593b24c 	ldr	fp, [r3, #588]	; 0x24c
    cf30:	e0060697 	mul	r6, r7, r6
    cf34:	e001059b 	mul	r1, fp, r5
    cf38:	e593023c 	ldr	r0, [r3, #572]	; 0x23c
    cf3c:	e5935258 	ldr	r5, [r3, #600]	; 0x258
    cf40:	e5934254 	ldr	r4, [r3, #596]	; 0x254
    cf44:	e593c244 	ldr	ip, [r3, #580]	; 0x244
    cf48:	e0210194 	mla	r1, r4, r1, r0
    cf4c:	e023c695 	mla	r3, r5, r6, ip
    cf50:	e59e000c 	ldr	r0, [lr, #12]
    cf54:	e1570002 	cmp	r7, r2
    cf58:	e0231390 	mla	r3, r0, r3, r1
    cf5c:	e59e1014 	ldr	r1, [lr, #20]
    cf60:	e58d7014 	str	r7, [sp, #20]
    cf64:	e0813003 	add	r3, r1, r3
    cf68:	e58d500c 	str	r5, [sp, #12]
    cf6c:	e5ce2000 	strb	r2, [lr]
    cf70:	e58d3004 	str	r3, [sp, #4]
    cf74:	da00008d 	ble	d1b0 <wgfx_term_render_cursor+0x30c>
    cf78:	e3550000 	cmp	r5, #0
    cf7c:	da000069 	ble	d128 <wgfx_term_render_cursor+0x284>
    cf80:	e59fe240 	ldr	lr, [pc, #576]	; d1c8 <wgfx_term_render_cursor+0x324>
    cf84:	e58d2010 	str	r2, [sp, #16]
    cf88:	e3a03000 	mov	r3, #0
    cf8c:	e58d3008 	str	r3, [sp, #8]
    cf90:	e35b0000 	cmp	fp, #0
    cf94:	da000052 	ble	d0e4 <wgfx_term_render_cursor+0x240>
    cf98:	e3a07000 	mov	r7, #0
    cf9c:	e59d1004 	ldr	r1, [sp, #4]
    cfa0:	e3540000 	cmp	r4, #0
    cfa4:	da00004b 	ble	d0d8 <wgfx_term_render_cursor+0x234>
    cfa8:	e2813004 	add	r3, r1, #4
    cfac:	e28e2004 	add	r2, lr, #4
    cfb0:	e1510002 	cmp	r1, r2
    cfb4:	315e0003 	cmpcc	lr, r3
    cfb8:	23a03001 	movcs	r3, #1
    cfbc:	33a03000 	movcc	r3, #0
    cfc0:	e354000b 	cmp	r4, #11
    cfc4:	93a03000 	movls	r3, #0
    cfc8:	82033001 	andhi	r3, r3, #1
    cfcc:	e3530000 	cmp	r3, #0
    cfd0:	0a00006e 	beq	d190 <wgfx_term_render_cursor+0x2ec>
    cfd4:	e2613000 	rsb	r3, r1, #0
    cfd8:	e2133003 	ands	r3, r3, #3
    cfdc:	0a000067 	beq	d180 <wgfx_term_render_cursor+0x2dc>
    cfe0:	e5d12000 	ldrb	r2, [r1]
    cfe4:	e3530001 	cmp	r3, #1
    cfe8:	e5ce2000 	strb	r2, [lr]
    cfec:	e2819001 	add	r9, r1, #1
    cff0:	e28e8001 	add	r8, lr, #1
    cff4:	0a000063 	beq	d188 <wgfx_term_render_cursor+0x2e4>
    cff8:	e3530003 	cmp	r3, #3
    cffc:	01a05003 	moveq	r5, r3
    d000:	13a05002 	movne	r5, #2
    d004:	e5d12001 	ldrb	r2, [r1, #1]
    d008:	e2819002 	add	r9, r1, #2
    d00c:	e5ce2001 	strb	r2, [lr, #1]
    d010:	05d12002 	ldrbeq	r2, [r1, #2]
    d014:	e28e8002 	add	r8, lr, #2
    d018:	02819003 	addeq	r9, r1, #3
    d01c:	05ce2002 	strbeq	r2, [lr, #2]
    d020:	028e8003 	addeq	r8, lr, #3
    d024:	e3a02000 	mov	r2, #0
    d028:	e0446003 	sub	r6, r4, r3
    d02c:	e0810003 	add	r0, r1, r3
    d030:	e1a0c126 	lsr	ip, r6, #2
    d034:	e08e3003 	add	r3, lr, r3
    d038:	e2822001 	add	r2, r2, #1
    d03c:	e490a004 	ldr	sl, [r0], #4
    d040:	e15c0002 	cmp	ip, r2
    d044:	e483a004 	str	sl, [r3], #4
    d048:	8afffffa 	bhi	d038 <wgfx_term_render_cursor+0x194>
    d04c:	e3c63003 	bic	r3, r6, #3
    d050:	e1560003 	cmp	r6, r3
    d054:	e0835005 	add	r5, r3, r5
    d058:	e0890003 	add	r0, r9, r3
    d05c:	e0882003 	add	r2, r8, r3
    d060:	0a000044 	beq	d178 <wgfx_term_render_cursor+0x2d4>
    d064:	e7d9c003 	ldrb	ip, [r9, r3]
    d068:	e2856001 	add	r6, r5, #1
    d06c:	e1540006 	cmp	r4, r6
    d070:	e7c8c003 	strb	ip, [r8, r3]
    d074:	da00003f 	ble	d178 <wgfx_term_render_cursor+0x2d4>
    d078:	e5d03001 	ldrb	r3, [r0, #1]
    d07c:	e285c002 	add	ip, r5, #2
    d080:	e154000c 	cmp	r4, ip
    d084:	e5c23001 	strb	r3, [r2, #1]
    d088:	da00003a 	ble	d178 <wgfx_term_render_cursor+0x2d4>
    d08c:	e5d03002 	ldrb	r3, [r0, #2]
    d090:	e285c003 	add	ip, r5, #3
    d094:	e154000c 	cmp	r4, ip
    d098:	e5c23002 	strb	r3, [r2, #2]
    d09c:	da000035 	ble	d178 <wgfx_term_render_cursor+0x2d4>
    d0a0:	e5d03003 	ldrb	r3, [r0, #3]
    d0a4:	e285c004 	add	ip, r5, #4
    d0a8:	e154000c 	cmp	r4, ip
    d0ac:	e5c23003 	strb	r3, [r2, #3]
    d0b0:	da000030 	ble	d178 <wgfx_term_render_cursor+0x2d4>
    d0b4:	e2855005 	add	r5, r5, #5
    d0b8:	e5d03004 	ldrb	r3, [r0, #4]
    d0bc:	e1540005 	cmp	r4, r5
    d0c0:	e5c23004 	strb	r3, [r2, #4]
    d0c4:	da00002b 	ble	d178 <wgfx_term_render_cursor+0x2d4>
    d0c8:	e5d03005 	ldrb	r3, [r0, #5]
    d0cc:	e0811004 	add	r1, r1, r4
    d0d0:	e5c23005 	strb	r3, [r2, #5]
    d0d4:	e08ee004 	add	lr, lr, r4
    d0d8:	e2877001 	add	r7, r7, #1
    d0dc:	e15b0007 	cmp	fp, r7
    d0e0:	1affffae 	bne	cfa0 <wgfx_term_render_cursor+0xfc>
    d0e4:	e59d3008 	ldr	r3, [sp, #8]
    d0e8:	e59d100c 	ldr	r1, [sp, #12]
    d0ec:	e2832001 	add	r2, r3, #1
    d0f0:	e59f30c8 	ldr	r3, [pc, #200]	; d1c0 <wgfx_term_render_cursor+0x31c>
    d0f4:	e58d2008 	str	r2, [sp, #8]
    d0f8:	e593300c 	ldr	r3, [r3, #12]
    d0fc:	e1510002 	cmp	r1, r2
    d100:	e59d2004 	ldr	r2, [sp, #4]
    d104:	e0823003 	add	r3, r2, r3
    d108:	e58d3004 	str	r3, [sp, #4]
    d10c:	1affff9f 	bne	cf90 <wgfx_term_render_cursor+0xec>
    d110:	e59d3010 	ldr	r3, [sp, #16]
    d114:	e59d2014 	ldr	r2, [sp, #20]
    d118:	e2833001 	add	r3, r3, #1
    d11c:	e1520003 	cmp	r2, r3
    d120:	e58d3010 	str	r3, [sp, #16]
    d124:	1affff97 	bne	cf88 <wgfx_term_render_cursor+0xe4>
    d128:	e59f3090 	ldr	r3, [pc, #144]	; d1c0 <wgfx_term_render_cursor+0x31c>
    d12c:	e5934034 	ldr	r4, [r3, #52]	; 0x34
    d130:	e5935024 	ldr	r5, [r3, #36]	; 0x24
    d134:	e5936020 	ldr	r6, [r3, #32]
    d138:	e3540004 	cmp	r4, #4
    d13c:	8a00000b 	bhi	d170 <wgfx_term_render_cursor+0x2cc>
    d140:	e59f3078 	ldr	r3, [pc, #120]	; d1c0 <wgfx_term_render_cursor+0x31c>
    d144:	e0833004 	add	r3, r3, r4
    d148:	e5d33318 	ldrb	r3, [r3, #792]	; 0x318
    d14c:	e3530000 	cmp	r3, #0
    d150:	0a000006 	beq	d170 <wgfx_term_render_cursor+0x2cc>
    d154:	e1a02006 	mov	r2, r6
    d158:	e1a01005 	mov	r1, r5
    d15c:	e1a00004 	mov	r0, r4
    d160:	e3a0305f 	mov	r3, #95	; 0x5f
    d164:	e28dd01c 	add	sp, sp, #28
    d168:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d16c:	eafff9ad 	b	b828 <wgfx_putc.part.0>
    d170:	e28dd01c 	add	sp, sp, #28
    d174:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d178:	e0811004 	add	r1, r1, r4
    d17c:	eaffffd4 	b	d0d4 <wgfx_term_render_cursor+0x230>
    d180:	e1a0800e 	mov	r8, lr
    d184:	e1a09001 	mov	r9, r1
    d188:	e1a05003 	mov	r5, r3
    d18c:	eaffffa4 	b	d024 <wgfx_term_render_cursor+0x180>
    d190:	e1a03001 	mov	r3, r1
    d194:	e24e2001 	sub	r2, lr, #1
    d198:	e0811004 	add	r1, r1, r4
    d19c:	e4d30001 	ldrb	r0, [r3], #1
    d1a0:	e1510003 	cmp	r1, r3
    d1a4:	e5e20001 	strb	r0, [r2, #1]!
    d1a8:	1afffffb 	bne	d19c <wgfx_term_render_cursor+0x2f8>
    d1ac:	eaffffc8 	b	d0d4 <wgfx_term_render_cursor+0x230>
    d1b0:	e59e4034 	ldr	r4, [lr, #52]	; 0x34
    d1b4:	e59e5024 	ldr	r5, [lr, #36]	; 0x24
    d1b8:	e59e6020 	ldr	r6, [lr, #32]
    d1bc:	eaffffdd 	b	d138 <wgfx_term_render_cursor+0x294>
    d1c0:	00042a88 	.word	0x00042a88
    d1c4:	000186a0 	.word	0x000186a0
    d1c8:	00042ac2 	.word	0x00042ac2

0000d1cc <wgfx_clear_screen>:
    d1cc:	e92d4070 	push	{r4, r5, r6, lr}
    d1d0:	e59f517c 	ldr	r5, [pc, #380]	; d354 <wgfx_clear_screen+0x188>
    d1d4:	e5d53000 	ldrb	r3, [r5]
    d1d8:	e3530000 	cmp	r3, #0
    d1dc:	0a000006 	beq	d1fc <wgfx_clear_screen+0x30>
    d1e0:	e59f4170 	ldr	r4, [pc, #368]	; d358 <wgfx_clear_screen+0x18c>
    d1e4:	ea000001 	b	d1f0 <wgfx_clear_screen+0x24>
    d1e8:	e2544001 	subs	r4, r4, #1
    d1ec:	0a000002 	beq	d1fc <wgfx_clear_screen+0x30>
    d1f0:	ebffec45 	bl	830c <dma_running>
    d1f4:	e3500000 	cmp	r0, #0
    d1f8:	1afffffa 	bne	d1e8 <wgfx_clear_screen+0x1c>
    d1fc:	e3a02000 	mov	r2, #0
    d200:	e5953014 	ldr	r3, [r5, #20]
    d204:	e595c010 	ldr	ip, [r5, #16]
    d208:	e5c52000 	strb	r2, [r5]
    d20c:	e083000c 	add	r0, r3, ip
    d210:	e1530000 	cmp	r3, r0
    d214:	2a000045 	bcs	d330 <wgfx_clear_screen+0x164>
    d218:	e59f213c 	ldr	r2, [pc, #316]	; d35c <wgfx_clear_screen+0x190>
    d21c:	e283e001 	add	lr, r3, #1
    d220:	e2821001 	add	r1, r2, #1
    d224:	e1510003 	cmp	r1, r3
    d228:	81500002 	cmphi	r0, r2
    d22c:	93a02001 	movls	r2, #1
    d230:	83a02000 	movhi	r2, #0
    d234:	e35c000b 	cmp	ip, #11
    d238:	93a02000 	movls	r2, #0
    d23c:	82022001 	andhi	r2, r2, #1
    d240:	e3520000 	cmp	r2, #0
    d244:	e1a0200e 	mov	r2, lr
    d248:	0a00003b 	beq	d33c <wgfx_clear_screen+0x170>
    d24c:	e2634000 	rsb	r4, r3, #0
    d250:	e2144003 	ands	r4, r4, #3
    d254:	01a0e003 	moveq	lr, r3
    d258:	0a00000a 	beq	d288 <wgfx_clear_screen+0xbc>
    d25c:	e5d52038 	ldrb	r2, [r5, #56]	; 0x38
    d260:	e3540001 	cmp	r4, #1
    d264:	e5c32000 	strb	r2, [r3]
    d268:	0a000006 	beq	d288 <wgfx_clear_screen+0xbc>
    d26c:	e5d52038 	ldrb	r2, [r5, #56]	; 0x38
    d270:	e3540003 	cmp	r4, #3
    d274:	e5c32001 	strb	r2, [r3, #1]
    d278:	05d52038 	ldrbeq	r2, [r5, #56]	; 0x38
    d27c:	e283e002 	add	lr, r3, #2
    d280:	05c32002 	strbeq	r2, [r3, #2]
    d284:	0283e003 	addeq	lr, r3, #3
    d288:	e3a02000 	mov	r2, #0
    d28c:	e5d56038 	ldrb	r6, [r5, #56]	; 0x38
    d290:	e04cc004 	sub	ip, ip, r4
    d294:	e1861406 	orr	r1, r6, r6, lsl #8
    d298:	e1811806 	orr	r1, r1, r6, lsl #16
    d29c:	e0833004 	add	r3, r3, r4
    d2a0:	e1811c06 	orr	r1, r1, r6, lsl #24
    d2a4:	e1a0412c 	lsr	r4, ip, #2
    d2a8:	e2822001 	add	r2, r2, #1
    d2ac:	e1520004 	cmp	r2, r4
    d2b0:	e4831004 	str	r1, [r3], #4
    d2b4:	3afffffb 	bcc	d2a8 <wgfx_clear_screen+0xdc>
    d2b8:	e3cc2003 	bic	r2, ip, #3
    d2bc:	e15c0002 	cmp	ip, r2
    d2c0:	e08e3002 	add	r3, lr, r2
    d2c4:	0a000019 	beq	d330 <wgfx_clear_screen+0x164>
    d2c8:	e5d51038 	ldrb	r1, [r5, #56]	; 0x38
    d2cc:	e283c001 	add	ip, r3, #1
    d2d0:	e150000c 	cmp	r0, ip
    d2d4:	e7ce1002 	strb	r1, [lr, r2]
    d2d8:	9a000014 	bls	d330 <wgfx_clear_screen+0x164>
    d2dc:	e5d52038 	ldrb	r2, [r5, #56]	; 0x38
    d2e0:	e2831002 	add	r1, r3, #2
    d2e4:	e1500001 	cmp	r0, r1
    d2e8:	e5c32001 	strb	r2, [r3, #1]
    d2ec:	9a00000f 	bls	d330 <wgfx_clear_screen+0x164>
    d2f0:	e5d52038 	ldrb	r2, [r5, #56]	; 0x38
    d2f4:	e2831003 	add	r1, r3, #3
    d2f8:	e1500001 	cmp	r0, r1
    d2fc:	e5c32002 	strb	r2, [r3, #2]
    d300:	9a00000a 	bls	d330 <wgfx_clear_screen+0x164>
    d304:	e5d52038 	ldrb	r2, [r5, #56]	; 0x38
    d308:	e2831004 	add	r1, r3, #4
    d30c:	e1500001 	cmp	r0, r1
    d310:	e5c32003 	strb	r2, [r3, #3]
    d314:	9a000005 	bls	d330 <wgfx_clear_screen+0x164>
    d318:	e5d52038 	ldrb	r2, [r5, #56]	; 0x38
    d31c:	e2831005 	add	r1, r3, #5
    d320:	e1500001 	cmp	r0, r1
    d324:	e5c32004 	strb	r2, [r3, #4]
    d328:	85d52038 	ldrbhi	r2, [r5, #56]	; 0x38
    d32c:	85c32005 	strbhi	r2, [r3, #5]
    d330:	e8bd4070 	pop	{r4, r5, r6, lr}
    d334:	eafffeda 	b	cea4 <wgfx_term_render_cursor>
    d338:	e2822001 	add	r2, r2, #1
    d33c:	e5d53038 	ldrb	r3, [r5, #56]	; 0x38
    d340:	e1500002 	cmp	r0, r2
    d344:	e5423001 	strb	r3, [r2, #-1]
    d348:	1afffffa 	bne	d338 <wgfx_clear_screen+0x16c>
    d34c:	e8bd4070 	pop	{r4, r5, r6, lr}
    d350:	eafffed3 	b	cea4 <wgfx_term_render_cursor>
    d354:	00042a88 	.word	0x00042a88
    d358:	000186a0 	.word	0x000186a0
    d35c:	00042ac0 	.word	0x00042ac0

0000d360 <wgfx_term_putstring>:
    d360:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d364:	e59fb45c 	ldr	fp, [pc, #1116]	; d7c8 <wgfx_term_putstring+0x468>
    d368:	e24dd024 	sub	sp, sp, #36	; 0x24
    d36c:	e59b4024 	ldr	r4, [fp, #36]	; 0x24
    d370:	e59b3018 	ldr	r3, [fp, #24]
    d374:	e58d0010 	str	r0, [sp, #16]
    d378:	e1540003 	cmp	r4, r3
    d37c:	2a00009b 	bcs	d5f0 <wgfx_term_putstring+0x290>
    d380:	e59b6020 	ldr	r6, [fp, #32]
    d384:	e59b301c 	ldr	r3, [fp, #28]
    d388:	e1560003 	cmp	r6, r3
    d38c:	2a000097 	bcs	d5f0 <wgfx_term_putstring+0x290>
    d390:	e59b5034 	ldr	r5, [fp, #52]	; 0x34
    d394:	e3550004 	cmp	r5, #4
    d398:	8a000094 	bhi	d5f0 <wgfx_term_putstring+0x290>
    d39c:	e08b3005 	add	r3, fp, r5
    d3a0:	e5d33318 	ldrb	r3, [r3, #792]	; 0x318
    d3a4:	e3530000 	cmp	r3, #0
    d3a8:	0a000090 	beq	d5f0 <wgfx_term_putstring+0x290>
    d3ac:	e5db3000 	ldrb	r3, [fp]
    d3b0:	e3530000 	cmp	r3, #0
    d3b4:	0a000006 	beq	d3d4 <wgfx_term_putstring+0x74>
    d3b8:	e59f740c 	ldr	r7, [pc, #1036]	; d7cc <wgfx_term_putstring+0x46c>
    d3bc:	ea000001 	b	d3c8 <wgfx_term_putstring+0x68>
    d3c0:	e2577001 	subs	r7, r7, #1
    d3c4:	0a000002 	beq	d3d4 <wgfx_term_putstring+0x74>
    d3c8:	ebffebcf 	bl	830c <dma_running>
    d3cc:	e3500000 	cmp	r0, #0
    d3d0:	1afffffa 	bne	d3c0 <wgfx_term_putstring+0x60>
    d3d4:	e3a01000 	mov	r1, #0
    d3d8:	e0852105 	add	r2, r5, r5, lsl #2
    d3dc:	e0852082 	add	r2, r5, r2, lsl #1
    d3e0:	e08b2102 	add	r2, fp, r2, lsl #2
    d3e4:	e592e250 	ldr	lr, [r2, #592]	; 0x250
    d3e8:	e592324c 	ldr	r3, [r2, #588]	; 0x24c
    d3ec:	e006069e 	mul	r6, lr, r6
    d3f0:	e58d3004 	str	r3, [sp, #4]
    d3f4:	e0030493 	mul	r3, r3, r4
    d3f8:	e592023c 	ldr	r0, [r2, #572]	; 0x23c
    d3fc:	e5925258 	ldr	r5, [r2, #600]	; 0x258
    d400:	e5924254 	ldr	r4, [r2, #596]	; 0x254
    d404:	e592c244 	ldr	ip, [r2, #580]	; 0x244
    d408:	e0230394 	mla	r3, r4, r3, r0
    d40c:	e022c695 	mla	r2, r5, r6, ip
    d410:	e59b000c 	ldr	r0, [fp, #12]
    d414:	e15e0001 	cmp	lr, r1
    d418:	e0233290 	mla	r3, r0, r2, r3
    d41c:	e59b2014 	ldr	r2, [fp, #20]
    d420:	e58de01c 	str	lr, [sp, #28]
    d424:	e0823003 	add	r3, r2, r3
    d428:	e58d5014 	str	r5, [sp, #20]
    d42c:	e5cb1000 	strb	r1, [fp]
    d430:	e58d3008 	str	r3, [sp, #8]
    d434:	da00006d 	ble	d5f0 <wgfx_term_putstring+0x290>
    d438:	e1550001 	cmp	r5, r1
    d43c:	da00006b 	ble	d5f0 <wgfx_term_putstring+0x290>
    d440:	e58d1018 	str	r1, [sp, #24]
    d444:	e59f1384 	ldr	r1, [pc, #900]	; d7d0 <wgfx_term_putstring+0x470>
    d448:	e3a03000 	mov	r3, #0
    d44c:	e58d300c 	str	r3, [sp, #12]
    d450:	e59d3004 	ldr	r3, [sp, #4]
    d454:	e3530000 	cmp	r3, #0
    d458:	da000053 	ble	d5ac <wgfx_term_putstring+0x24c>
    d45c:	e3a07000 	mov	r7, #0
    d460:	e59de008 	ldr	lr, [sp, #8]
    d464:	e3540000 	cmp	r4, #0
    d468:	da00004b 	ble	d59c <wgfx_term_putstring+0x23c>
    d46c:	e28e3004 	add	r3, lr, #4
    d470:	e2812004 	add	r2, r1, #4
    d474:	e15e0002 	cmp	lr, r2
    d478:	31510003 	cmpcc	r1, r3
    d47c:	23a03001 	movcs	r3, #1
    d480:	33a03000 	movcc	r3, #0
    d484:	e354000b 	cmp	r4, #11
    d488:	93a03000 	movls	r3, #0
    d48c:	82033001 	andhi	r3, r3, #1
    d490:	e3530000 	cmp	r3, #0
    d494:	0a0000c3 	beq	d7a8 <wgfx_term_putstring+0x448>
    d498:	e2613000 	rsb	r3, r1, #0
    d49c:	e2133003 	ands	r3, r3, #3
    d4a0:	0a0000bc 	beq	d798 <wgfx_term_putstring+0x438>
    d4a4:	e5d12000 	ldrb	r2, [r1]
    d4a8:	e3530001 	cmp	r3, #1
    d4ac:	e5ce2000 	strb	r2, [lr]
    d4b0:	e281a001 	add	sl, r1, #1
    d4b4:	e28e9001 	add	r9, lr, #1
    d4b8:	0a0000b8 	beq	d7a0 <wgfx_term_putstring+0x440>
    d4bc:	e3530003 	cmp	r3, #3
    d4c0:	01a06003 	moveq	r6, r3
    d4c4:	13a06002 	movne	r6, #2
    d4c8:	e5d12001 	ldrb	r2, [r1, #1]
    d4cc:	e281a002 	add	sl, r1, #2
    d4d0:	e5ce2001 	strb	r2, [lr, #1]
    d4d4:	05d12002 	ldrbeq	r2, [r1, #2]
    d4d8:	e28e9002 	add	r9, lr, #2
    d4dc:	0281a003 	addeq	sl, r1, #3
    d4e0:	05ce2002 	strbeq	r2, [lr, #2]
    d4e4:	028e9003 	addeq	r9, lr, #3
    d4e8:	e3a02000 	mov	r2, #0
    d4ec:	e0448003 	sub	r8, r4, r3
    d4f0:	e0810003 	add	r0, r1, r3
    d4f4:	e1a05128 	lsr	r5, r8, #2
    d4f8:	e08e3003 	add	r3, lr, r3
    d4fc:	e2822001 	add	r2, r2, #1
    d500:	e490c004 	ldr	ip, [r0], #4
    d504:	e1520005 	cmp	r2, r5
    d508:	e483c004 	str	ip, [r3], #4
    d50c:	3afffffa 	bcc	d4fc <wgfx_term_putstring+0x19c>
    d510:	e3c83003 	bic	r3, r8, #3
    d514:	e1530008 	cmp	r3, r8
    d518:	e0836006 	add	r6, r3, r6
    d51c:	e08a0003 	add	r0, sl, r3
    d520:	e0892003 	add	r2, r9, r3
    d524:	0a000099 	beq	d790 <wgfx_term_putstring+0x430>
    d528:	e7dac003 	ldrb	ip, [sl, r3]
    d52c:	e2865001 	add	r5, r6, #1
    d530:	e1540005 	cmp	r4, r5
    d534:	e7c9c003 	strb	ip, [r9, r3]
    d538:	da000094 	ble	d790 <wgfx_term_putstring+0x430>
    d53c:	e5d03001 	ldrb	r3, [r0, #1]
    d540:	e286c002 	add	ip, r6, #2
    d544:	e154000c 	cmp	r4, ip
    d548:	e5c23001 	strb	r3, [r2, #1]
    d54c:	da00008f 	ble	d790 <wgfx_term_putstring+0x430>
    d550:	e5d03002 	ldrb	r3, [r0, #2]
    d554:	e286c003 	add	ip, r6, #3
    d558:	e154000c 	cmp	r4, ip
    d55c:	e5c23002 	strb	r3, [r2, #2]
    d560:	da00008a 	ble	d790 <wgfx_term_putstring+0x430>
    d564:	e5d03003 	ldrb	r3, [r0, #3]
    d568:	e286c004 	add	ip, r6, #4
    d56c:	e154000c 	cmp	r4, ip
    d570:	e5c23003 	strb	r3, [r2, #3]
    d574:	da000085 	ble	d790 <wgfx_term_putstring+0x430>
    d578:	e2866005 	add	r6, r6, #5
    d57c:	e5d03004 	ldrb	r3, [r0, #4]
    d580:	e1540006 	cmp	r4, r6
    d584:	e5c23004 	strb	r3, [r2, #4]
    d588:	da000080 	ble	d790 <wgfx_term_putstring+0x430>
    d58c:	e5d03005 	ldrb	r3, [r0, #5]
    d590:	e0811004 	add	r1, r1, r4
    d594:	e5c23005 	strb	r3, [r2, #5]
    d598:	e08ee004 	add	lr, lr, r4
    d59c:	e59d3004 	ldr	r3, [sp, #4]
    d5a0:	e2877001 	add	r7, r7, #1
    d5a4:	e1530007 	cmp	r3, r7
    d5a8:	1affffad 	bne	d464 <wgfx_term_putstring+0x104>
    d5ac:	e59d300c 	ldr	r3, [sp, #12]
    d5b0:	e59d0014 	ldr	r0, [sp, #20]
    d5b4:	e2833001 	add	r3, r3, #1
    d5b8:	e1a02003 	mov	r2, r3
    d5bc:	e58d300c 	str	r3, [sp, #12]
    d5c0:	e1500002 	cmp	r0, r2
    d5c4:	e59b300c 	ldr	r3, [fp, #12]
    d5c8:	e59d2008 	ldr	r2, [sp, #8]
    d5cc:	e0823003 	add	r3, r2, r3
    d5d0:	e58d3008 	str	r3, [sp, #8]
    d5d4:	1affff9d 	bne	d450 <wgfx_term_putstring+0xf0>
    d5d8:	e59d3018 	ldr	r3, [sp, #24]
    d5dc:	e59d201c 	ldr	r2, [sp, #28]
    d5e0:	e2833001 	add	r3, r3, #1
    d5e4:	e1520003 	cmp	r2, r3
    d5e8:	e58d3018 	str	r3, [sp, #24]
    d5ec:	1affff95 	bne	d448 <wgfx_term_putstring+0xe8>
    d5f0:	e3a05000 	mov	r5, #0
    d5f4:	e59d3010 	ldr	r3, [sp, #16]
    d5f8:	e2434001 	sub	r4, r3, #1
    d5fc:	e5f43001 	ldrb	r3, [r4, #1]!
    d600:	e3530000 	cmp	r3, #0
    d604:	0a00000d 	beq	d640 <wgfx_term_putstring+0x2e0>
    d608:	e2432008 	sub	r2, r3, #8
    d60c:	e3520005 	cmp	r2, #5
    d610:	979ff102 	ldrls	pc, [pc, r2, lsl #2]
    d614:	ea00003e 	b	d714 <wgfx_term_putstring+0x3b4>
    d618:	0000d6d4 	.word	0x0000d6d4
    d61c:	0000d698 	.word	0x0000d698
    d620:	0000d64c 	.word	0x0000d64c
    d624:	0000d714 	.word	0x0000d714
    d628:	0000d714 	.word	0x0000d714
    d62c:	0000d630 	.word	0x0000d630
    d630:	e58b5024 	str	r5, [fp, #36]	; 0x24
    d634:	e5f43001 	ldrb	r3, [r4, #1]!
    d638:	e3530000 	cmp	r3, #0
    d63c:	1afffff1 	bne	d608 <wgfx_term_putstring+0x2a8>
    d640:	e28dd024 	add	sp, sp, #36	; 0x24
    d644:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d648:	eafffe15 	b	cea4 <wgfx_term_render_cursor>
    d64c:	e59b2020 	ldr	r2, [fp, #32]
    d650:	e59b1018 	ldr	r1, [fp, #24]
    d654:	e2823001 	add	r3, r2, #1
    d658:	e3510000 	cmp	r1, #0
    d65c:	e58b3020 	str	r3, [fp, #32]
    d660:	02823002 	addeq	r3, r2, #2
    d664:	e58b5024 	str	r5, [fp, #36]	; 0x24
    d668:	058b3020 	streq	r3, [fp, #32]
    d66c:	e59b201c 	ldr	r2, [fp, #28]
    d670:	e1520003 	cmp	r2, r3
    d674:	8affffe0 	bhi	d5fc <wgfx_term_putstring+0x29c>
    d678:	e59b0034 	ldr	r0, [fp, #52]	; 0x34
    d67c:	e2433001 	sub	r3, r3, #1
    d680:	e3500004 	cmp	r0, #4
    d684:	e58b3020 	str	r3, [fp, #32]
    d688:	8affffdb 	bhi	d5fc <wgfx_term_putstring+0x29c>
    d68c:	e3a01001 	mov	r1, #1
    d690:	ebfff807 	bl	b6b4 <wgfx_scroll.part.3>
    d694:	eaffffd8 	b	d5fc <wgfx_term_putstring+0x29c>
    d698:	e59b3024 	ldr	r3, [fp, #36]	; 0x24
    d69c:	e59b2018 	ldr	r2, [fp, #24]
    d6a0:	e2833001 	add	r3, r3, #1
    d6a4:	e3c33007 	bic	r3, r3, #7
    d6a8:	e2833008 	add	r3, r3, #8
    d6ac:	e2421001 	sub	r1, r2, #1
    d6b0:	e1530001 	cmp	r3, r1
    d6b4:	21a03001 	movcs	r3, r1
    d6b8:	e1520003 	cmp	r2, r3
    d6bc:	e58b3024 	str	r3, [fp, #36]	; 0x24
    d6c0:	e59b3020 	ldr	r3, [fp, #32]
    d6c4:	958b5024 	strls	r5, [fp, #36]	; 0x24
    d6c8:	92833001 	addls	r3, r3, #1
    d6cc:	958b3020 	strls	r3, [fp, #32]
    d6d0:	eaffffe5 	b	d66c <wgfx_term_putstring+0x30c>
    d6d4:	e59b3024 	ldr	r3, [fp, #36]	; 0x24
    d6d8:	e3530000 	cmp	r3, #0
    d6dc:	0affffc6 	beq	d5fc <wgfx_term_putstring+0x29c>
    d6e0:	e59b0034 	ldr	r0, [fp, #52]	; 0x34
    d6e4:	e2431001 	sub	r1, r3, #1
    d6e8:	e3500004 	cmp	r0, #4
    d6ec:	e58b1024 	str	r1, [fp, #36]	; 0x24
    d6f0:	8affffc1 	bhi	d5fc <wgfx_term_putstring+0x29c>
    d6f4:	e08b3000 	add	r3, fp, r0
    d6f8:	e5d33318 	ldrb	r3, [r3, #792]	; 0x318
    d6fc:	e3530000 	cmp	r3, #0
    d700:	0affffbd 	beq	d5fc <wgfx_term_putstring+0x29c>
    d704:	e3a03020 	mov	r3, #32
    d708:	e59b2020 	ldr	r2, [fp, #32]
    d70c:	ebfff845 	bl	b828 <wgfx_putc.part.0>
    d710:	eaffffb9 	b	d5fc <wgfx_term_putstring+0x29c>
    d714:	e59b0034 	ldr	r0, [fp, #52]	; 0x34
    d718:	e59b1024 	ldr	r1, [fp, #36]	; 0x24
    d71c:	e3500004 	cmp	r0, #4
    d720:	e59b2020 	ldr	r2, [fp, #32]
    d724:	8a000003 	bhi	d738 <wgfx_term_putstring+0x3d8>
    d728:	e08bc000 	add	ip, fp, r0
    d72c:	e5dcc318 	ldrb	ip, [ip, #792]	; 0x318
    d730:	e35c0000 	cmp	ip, #0
    d734:	1a000011 	bne	d780 <wgfx_term_putstring+0x420>
    d738:	e59b3018 	ldr	r3, [fp, #24]
    d73c:	e2811001 	add	r1, r1, #1
    d740:	e1510003 	cmp	r1, r3
    d744:	e59b301c 	ldr	r3, [fp, #28]
    d748:	22822001 	addcs	r2, r2, #1
    d74c:	e58b1024 	str	r1, [fp, #36]	; 0x24
    d750:	258b2020 	strcs	r2, [fp, #32]
    d754:	258b5024 	strcs	r5, [fp, #36]	; 0x24
    d758:	e1530002 	cmp	r3, r2
    d75c:	8affffa6 	bhi	d5fc <wgfx_term_putstring+0x29c>
    d760:	e59b0034 	ldr	r0, [fp, #52]	; 0x34
    d764:	e2422001 	sub	r2, r2, #1
    d768:	e3500004 	cmp	r0, #4
    d76c:	e58b2020 	str	r2, [fp, #32]
    d770:	8affffa1 	bhi	d5fc <wgfx_term_putstring+0x29c>
    d774:	e3a01001 	mov	r1, #1
    d778:	ebfff7cd 	bl	b6b4 <wgfx_scroll.part.3>
    d77c:	eaffff9e 	b	d5fc <wgfx_term_putstring+0x29c>
    d780:	ebfff828 	bl	b828 <wgfx_putc.part.0>
    d784:	e59b1024 	ldr	r1, [fp, #36]	; 0x24
    d788:	e59b2020 	ldr	r2, [fp, #32]
    d78c:	eaffffe9 	b	d738 <wgfx_term_putstring+0x3d8>
    d790:	e0811004 	add	r1, r1, r4
    d794:	eaffff7f 	b	d598 <wgfx_term_putstring+0x238>
    d798:	e1a0900e 	mov	r9, lr
    d79c:	e1a0a001 	mov	sl, r1
    d7a0:	e1a06003 	mov	r6, r3
    d7a4:	eaffff4f 	b	d4e8 <wgfx_term_putstring+0x188>
    d7a8:	e1a03001 	mov	r3, r1
    d7ac:	e24e2001 	sub	r2, lr, #1
    d7b0:	e0811004 	add	r1, r1, r4
    d7b4:	e4d30001 	ldrb	r0, [r3], #1
    d7b8:	e1510003 	cmp	r1, r3
    d7bc:	e5e20001 	strb	r0, [r2, #1]!
    d7c0:	1afffffb 	bne	d7b4 <wgfx_term_putstring+0x454>
    d7c4:	eaffff73 	b	d598 <wgfx_term_putstring+0x238>
    d7c8:	00042a88 	.word	0x00042a88
    d7cc:	000186a0 	.word	0x000186a0
    d7d0:	00042ac2 	.word	0x00042ac2

0000d7d4 <wgfx_set_framebuffer>:
    d7d4:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    d7d8:	e1a06001 	mov	r6, r1
    d7dc:	e1a07002 	mov	r7, r2
    d7e0:	e1a08003 	mov	r8, r3
    d7e4:	e1a09000 	mov	r9, r0
    d7e8:	e59d5020 	ldr	r5, [sp, #32]
    d7ec:	ebffea95 	bl	8248 <dma_init>
    d7f0:	e3760001 	cmn	r6, #1
    d7f4:	01a03006 	moveq	r3, r6
    d7f8:	e59f40a4 	ldr	r4, [pc, #164]	; d8a4 <wgfx_set_framebuffer+0xd0>
    d7fc:	e1a01007 	mov	r1, r7
    d800:	e3a0c002 	mov	ip, #2
    d804:	e3e02000 	mvn	r2, #0
    d808:	e584800c 	str	r8, [r4, #12]
    d80c:	e5845010 	str	r5, [r4, #16]
    d810:	e3a08001 	mov	r8, #1
    d814:	e3a05000 	mov	r5, #0
    d818:	11a03086 	lslne	r3, r6, #1
    d81c:	e5843240 	str	r3, [r4, #576]	; 0x240
    d820:	e3770001 	cmn	r7, #1
    d824:	e59f307c 	ldr	r3, [pc, #124]	; d8a8 <wgfx_set_framebuffer+0xd4>
    d828:	11a01087 	lslne	r1, r7, #1
    d82c:	e1c460f4 	strd	r6, [r4, #4]
    d830:	e5841248 	str	r1, [r4, #584]	; 0x248
    d834:	e1a00006 	mov	r0, r6
    d838:	e5931000 	ldr	r1, [r3]
    d83c:	e5936004 	ldr	r6, [r3, #4]
    d840:	e5843264 	str	r3, [r4, #612]	; 0x264
    d844:	e584124c 	str	r1, [r4, #588]	; 0x24c
    d848:	e584c254 	str	ip, [r4, #596]	; 0x254
    d84c:	e584c258 	str	ip, [r4, #600]	; 0x258
    d850:	e584225c 	str	r2, [r4, #604]	; 0x25c
    d854:	e5842260 	str	r2, [r4, #608]	; 0x260
    d858:	e5849014 	str	r9, [r4, #20]
    d85c:	e5846250 	str	r6, [r4, #592]	; 0x250
    d860:	e584523c 	str	r5, [r4, #572]	; 0x23c
    d864:	e5845244 	str	r5, [r4, #580]	; 0x244
    d868:	e5c48318 	strb	r8, [r4, #792]	; 0x318
    d86c:	eb008026 	bl	2d90c <__udivsi3>
    d870:	e1a01006 	mov	r1, r6
    d874:	e5840018 	str	r0, [r4, #24]
    d878:	e1a00007 	mov	r0, r7
    d87c:	eb008022 	bl	2d90c <__udivsi3>
    d880:	e3a03c0f 	mov	r3, #3840	; 0xf00
    d884:	e584001c 	str	r0, [r4, #28]
    d888:	e5845024 	str	r5, [r4, #36]	; 0x24
    d88c:	e5845020 	str	r5, [r4, #32]
    d890:	e5c48030 	strb	r8, [r4, #48]	; 0x30
    d894:	e5845034 	str	r5, [r4, #52]	; 0x34
    d898:	e1c433b8 	strh	r3, [r4, #56]	; 0x38
    d89c:	e8bd47f0 	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
    d8a0:	eafffd7f 	b	cea4 <wgfx_term_render_cursor>
    d8a4:	00042a88 	.word	0x00042a88
    d8a8:	00034a28 	.word	0x00034a28

0000d8ac <wgfx_init>:
    d8ac:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
    d8b0:	e1a05000 	mov	r5, r0
    d8b4:	e24dd02c 	sub	sp, sp, #44	; 0x2c
    d8b8:	e59f02a8 	ldr	r0, [pc, #680]	; db68 <wgfx_init+0x2bc>
    d8bc:	e1a06001 	mov	r6, r1
    d8c0:	eb002519 	bl	16d2c <microsDelay>
    d8c4:	ebfff11a 	bl	9d34 <fb_release>
    d8c8:	e3a0e008 	mov	lr, #8
    d8cc:	e3a0c000 	mov	ip, #0
    d8d0:	e58de000 	str	lr, [sp]
    d8d4:	e28de01c 	add	lr, sp, #28
    d8d8:	e58de00c 	str	lr, [sp, #12]
    d8dc:	e28de018 	add	lr, sp, #24
    d8e0:	e58de008 	str	lr, [sp, #8]
    d8e4:	e28de014 	add	lr, sp, #20
    d8e8:	e1a03006 	mov	r3, r6
    d8ec:	e58de004 	str	lr, [sp, #4]
    d8f0:	e1a02005 	mov	r2, r5
    d8f4:	e1a01006 	mov	r1, r6
    d8f8:	e1a00005 	mov	r0, r5
    d8fc:	e58dc014 	str	ip, [sp, #20]
    d900:	e58d5020 	str	r5, [sp, #32]
    d904:	e58d6024 	str	r6, [sp, #36]	; 0x24
    d908:	ebfff070 	bl	9ad0 <fb_init>
    d90c:	ebfff15e 	bl	9e8c <fb_set_xterm_palette>
    d910:	e28d1024 	add	r1, sp, #36	; 0x24
    d914:	e28d0020 	add	r0, sp, #32
    d918:	ebfff201 	bl	a124 <fb_get_physical_buffer_size>
    d91c:	e59f0244 	ldr	r0, [pc, #580]	; db68 <wgfx_init+0x2bc>
    d920:	eb002501 	bl	16d2c <microsDelay>
    d924:	e59d801c 	ldr	r8, [sp, #28]
    d928:	e59d7018 	ldr	r7, [sp, #24]
    d92c:	e59d9014 	ldr	r9, [sp, #20]
    d930:	ebffea44 	bl	8248 <dma_init>
    d934:	e3750001 	cmn	r5, #1
    d938:	01a03005 	moveq	r3, r5
    d93c:	e59f4228 	ldr	r4, [pc, #552]	; db6c <wgfx_init+0x2c0>
    d940:	e1a01006 	mov	r1, r6
    d944:	e3a0c002 	mov	ip, #2
    d948:	e3e02000 	mvn	r2, #0
    d94c:	e9840160 	stmib	r4, {r5, r6, r8}
    d950:	e5847010 	str	r7, [r4, #16]
    d954:	e3a08001 	mov	r8, #1
    d958:	e3a07000 	mov	r7, #0
    d95c:	11a03085 	lslne	r3, r5, #1
    d960:	e5843240 	str	r3, [r4, #576]	; 0x240
    d964:	e3760001 	cmn	r6, #1
    d968:	e59f3200 	ldr	r3, [pc, #512]	; db70 <wgfx_init+0x2c4>
    d96c:	11a01086 	lslne	r1, r6, #1
    d970:	e1a00005 	mov	r0, r5
    d974:	e5841248 	str	r1, [r4, #584]	; 0x248
    d978:	e5935004 	ldr	r5, [r3, #4]
    d97c:	e5931000 	ldr	r1, [r3]
    d980:	e5843264 	str	r3, [r4, #612]	; 0x264
    d984:	e584c254 	str	ip, [r4, #596]	; 0x254
    d988:	e584c258 	str	ip, [r4, #600]	; 0x258
    d98c:	e584225c 	str	r2, [r4, #604]	; 0x25c
    d990:	e5842260 	str	r2, [r4, #608]	; 0x260
    d994:	e584124c 	str	r1, [r4, #588]	; 0x24c
    d998:	e5849014 	str	r9, [r4, #20]
    d99c:	e5845250 	str	r5, [r4, #592]	; 0x250
    d9a0:	e584723c 	str	r7, [r4, #572]	; 0x23c
    d9a4:	e5847244 	str	r7, [r4, #580]	; 0x244
    d9a8:	e5c48318 	strb	r8, [r4, #792]	; 0x318
    d9ac:	eb007fd6 	bl	2d90c <__udivsi3>
    d9b0:	e1a01005 	mov	r1, r5
    d9b4:	e5840018 	str	r0, [r4, #24]
    d9b8:	e1a00006 	mov	r0, r6
    d9bc:	eb007fd2 	bl	2d90c <__udivsi3>
    d9c0:	e3a03c0f 	mov	r3, #3840	; 0xf00
    d9c4:	e584001c 	str	r0, [r4, #28]
    d9c8:	e1c433b8 	strh	r3, [r4, #56]	; 0x38
    d9cc:	e5847024 	str	r7, [r4, #36]	; 0x24
    d9d0:	e5847020 	str	r7, [r4, #32]
    d9d4:	e5c48030 	strb	r8, [r4, #48]	; 0x30
    d9d8:	e5847034 	str	r7, [r4, #52]	; 0x34
    d9dc:	ebfffd30 	bl	cea4 <wgfx_term_render_cursor>
    d9e0:	e5d43000 	ldrb	r3, [r4]
    d9e4:	e1530007 	cmp	r3, r7
    d9e8:	0a000006 	beq	da08 <wgfx_init+0x15c>
    d9ec:	e59f5180 	ldr	r5, [pc, #384]	; db74 <wgfx_init+0x2c8>
    d9f0:	ea000001 	b	d9fc <wgfx_init+0x150>
    d9f4:	e2555001 	subs	r5, r5, #1
    d9f8:	0a000002 	beq	da08 <wgfx_init+0x15c>
    d9fc:	ebffea42 	bl	830c <dma_running>
    da00:	e3500000 	cmp	r0, #0
    da04:	1afffffa 	bne	d9f4 <wgfx_init+0x148>
    da08:	e3a02000 	mov	r2, #0
    da0c:	e5943014 	ldr	r3, [r4, #20]
    da10:	e594c010 	ldr	ip, [r4, #16]
    da14:	e5c42000 	strb	r2, [r4]
    da18:	e083000c 	add	r0, r3, ip
    da1c:	e1530000 	cmp	r3, r0
    da20:	2a000045 	bcs	db3c <wgfx_init+0x290>
    da24:	e59f214c 	ldr	r2, [pc, #332]	; db78 <wgfx_init+0x2cc>
    da28:	e283e001 	add	lr, r3, #1
    da2c:	e2821001 	add	r1, r2, #1
    da30:	e1510003 	cmp	r1, r3
    da34:	81500002 	cmphi	r0, r2
    da38:	93a02001 	movls	r2, #1
    da3c:	83a02000 	movhi	r2, #0
    da40:	e35c000b 	cmp	ip, #11
    da44:	93a02000 	movls	r2, #0
    da48:	82022001 	andhi	r2, r2, #1
    da4c:	e3520000 	cmp	r2, #0
    da50:	e1a0200e 	mov	r2, lr
    da54:	0a00003e 	beq	db54 <wgfx_init+0x2a8>
    da58:	e2635000 	rsb	r5, r3, #0
    da5c:	e2155003 	ands	r5, r5, #3
    da60:	01a0e003 	moveq	lr, r3
    da64:	0a00000a 	beq	da94 <wgfx_init+0x1e8>
    da68:	e5d42038 	ldrb	r2, [r4, #56]	; 0x38
    da6c:	e3550001 	cmp	r5, #1
    da70:	e5c32000 	strb	r2, [r3]
    da74:	0a000006 	beq	da94 <wgfx_init+0x1e8>
    da78:	e5d42038 	ldrb	r2, [r4, #56]	; 0x38
    da7c:	e3550003 	cmp	r5, #3
    da80:	e5c32001 	strb	r2, [r3, #1]
    da84:	05d42038 	ldrbeq	r2, [r4, #56]	; 0x38
    da88:	e283e002 	add	lr, r3, #2
    da8c:	05c32002 	strbeq	r2, [r3, #2]
    da90:	0283e003 	addeq	lr, r3, #3
    da94:	e3a02000 	mov	r2, #0
    da98:	e5d46038 	ldrb	r6, [r4, #56]	; 0x38
    da9c:	e04cc005 	sub	ip, ip, r5
    daa0:	e1861406 	orr	r1, r6, r6, lsl #8
    daa4:	e1811806 	orr	r1, r1, r6, lsl #16
    daa8:	e0833005 	add	r3, r3, r5
    daac:	e1811c06 	orr	r1, r1, r6, lsl #24
    dab0:	e1a0512c 	lsr	r5, ip, #2
    dab4:	e2822001 	add	r2, r2, #1
    dab8:	e1520005 	cmp	r2, r5
    dabc:	e4831004 	str	r1, [r3], #4
    dac0:	3afffffb 	bcc	dab4 <wgfx_init+0x208>
    dac4:	e3cc2003 	bic	r2, ip, #3
    dac8:	e15c0002 	cmp	ip, r2
    dacc:	e08e3002 	add	r3, lr, r2
    dad0:	0a000019 	beq	db3c <wgfx_init+0x290>
    dad4:	e5d41038 	ldrb	r1, [r4, #56]	; 0x38
    dad8:	e283c001 	add	ip, r3, #1
    dadc:	e150000c 	cmp	r0, ip
    dae0:	e7ce1002 	strb	r1, [lr, r2]
    dae4:	9a000014 	bls	db3c <wgfx_init+0x290>
    dae8:	e5d42038 	ldrb	r2, [r4, #56]	; 0x38
    daec:	e2831002 	add	r1, r3, #2
    daf0:	e1500001 	cmp	r0, r1
    daf4:	e5c32001 	strb	r2, [r3, #1]
    daf8:	9a00000f 	bls	db3c <wgfx_init+0x290>
    dafc:	e5d42038 	ldrb	r2, [r4, #56]	; 0x38
    db00:	e2831003 	add	r1, r3, #3
    db04:	e1500001 	cmp	r0, r1
    db08:	e5c32002 	strb	r2, [r3, #2]
    db0c:	9a00000a 	bls	db3c <wgfx_init+0x290>
    db10:	e5d42038 	ldrb	r2, [r4, #56]	; 0x38
    db14:	e2831004 	add	r1, r3, #4
    db18:	e1500001 	cmp	r0, r1
    db1c:	e5c32003 	strb	r2, [r3, #3]
    db20:	9a000005 	bls	db3c <wgfx_init+0x290>
    db24:	e5d42038 	ldrb	r2, [r4, #56]	; 0x38
    db28:	e2831005 	add	r1, r3, #5
    db2c:	e1500001 	cmp	r0, r1
    db30:	e5c32004 	strb	r2, [r3, #4]
    db34:	85d42038 	ldrbhi	r2, [r4, #56]	; 0x38
    db38:	85c32005 	strbhi	r2, [r3, #5]
    db3c:	e3a03000 	mov	r3, #0
    db40:	e5843318 	str	r3, [r4, #792]	; 0x318
    db44:	e5c4331c 	strb	r3, [r4, #796]	; 0x31c
    db48:	e28dd02c 	add	sp, sp, #44	; 0x2c
    db4c:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
    db50:	e2822001 	add	r2, r2, #1
    db54:	e5d43038 	ldrb	r3, [r4, #56]	; 0x38
    db58:	e1500002 	cmp	r0, r2
    db5c:	e5423001 	strb	r3, [r2, #-1]
    db60:	1afffffa 	bne	db50 <wgfx_init+0x2a4>
    db64:	eafffff4 	b	db3c <wgfx_init+0x290>
    db68:	00002710 	.word	0x00002710
    db6c:	00042a88 	.word	0x00042a88
    db70:	00034a28 	.word	0x00034a28
    db74:	000186a0 	.word	0x000186a0
    db78:	00042ac0 	.word	0x00042ac0

0000db7c <wgfx_set_bg>:
    db7c:	e59f3004 	ldr	r3, [pc, #4]	; db88 <wgfx_set_bg+0xc>
    db80:	e5c30038 	strb	r0, [r3, #56]	; 0x38
    db84:	e12fff1e 	bx	lr
    db88:	00042a88 	.word	0x00042a88

0000db8c <wgfx_set_fg>:
    db8c:	e59f3004 	ldr	r3, [pc, #4]	; db98 <wgfx_set_fg+0xc>
    db90:	e5c30039 	strb	r0, [r3, #57]	; 0x39
    db94:	e12fff1e 	bx	lr
    db98:	00042a88 	.word	0x00042a88

0000db9c <wgfx_wait_for_prev_operation>:
    db9c:	e92d4070 	push	{r4, r5, r6, lr}
    dba0:	e59f5030 	ldr	r5, [pc, #48]	; dbd8 <wgfx_wait_for_prev_operation+0x3c>
    dba4:	e5d53000 	ldrb	r3, [r5]
    dba8:	e3530000 	cmp	r3, #0
    dbac:	0a000006 	beq	dbcc <wgfx_wait_for_prev_operation+0x30>
    dbb0:	e59f4024 	ldr	r4, [pc, #36]	; dbdc <wgfx_wait_for_prev_operation+0x40>
    dbb4:	ea000001 	b	dbc0 <wgfx_wait_for_prev_operation+0x24>
    dbb8:	e2544001 	subs	r4, r4, #1
    dbbc:	0a000002 	beq	dbcc <wgfx_wait_for_prev_operation+0x30>
    dbc0:	ebffe9d1 	bl	830c <dma_running>
    dbc4:	e3500000 	cmp	r0, #0
    dbc8:	1afffffa 	bne	dbb8 <wgfx_wait_for_prev_operation+0x1c>
    dbcc:	e3a03000 	mov	r3, #0
    dbd0:	e5c53000 	strb	r3, [r5]
    dbd4:	e8bd8070 	pop	{r4, r5, r6, pc}
    dbd8:	00042a88 	.word	0x00042a88
    dbdc:	000186a0 	.word	0x000186a0

0000dbe0 <wgfx_scroll>:
    dbe0:	e16f3f11 	clz	r3, r1
    dbe4:	e1a032a3 	lsr	r3, r3, #5
    dbe8:	e3500004 	cmp	r0, #4
    dbec:	83833001 	orrhi	r3, r3, #1
    dbf0:	e3530000 	cmp	r3, #0
    dbf4:	112fff1e 	bxne	lr
    dbf8:	eafff6ad 	b	b6b4 <wgfx_scroll.part.3>

0000dbfc <wgfxHLine>:
    dbfc:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    dc00:	e59f5068 	ldr	r5, [pc, #104]	; dc70 <wgfxHLine+0x74>
    dc04:	e1a06000 	mov	r6, r0
    dc08:	e5d50000 	ldrb	r0, [r5]
    dc0c:	e1a09001 	mov	r9, r1
    dc10:	e3500000 	cmp	r0, #0
    dc14:	e1a07002 	mov	r7, r2
    dc18:	e1a08003 	mov	r8, r3
    dc1c:	0a000006 	beq	dc3c <wgfxHLine+0x40>
    dc20:	e59f404c 	ldr	r4, [pc, #76]	; dc74 <wgfxHLine+0x78>
    dc24:	ea000001 	b	dc30 <wgfxHLine+0x34>
    dc28:	e2544001 	subs	r4, r4, #1
    dc2c:	0a000002 	beq	dc3c <wgfxHLine+0x40>
    dc30:	ebffe9b5 	bl	830c <dma_running>
    dc34:	e3500000 	cmp	r0, #0
    dc38:	1afffffa 	bne	dc28 <wgfxHLine+0x2c>
    dc3c:	e3a03000 	mov	r3, #0
    dc40:	e595000c 	ldr	r0, [r5, #12]
    dc44:	e1570003 	cmp	r7, r3
    dc48:	e5c53000 	strb	r3, [r5]
    dc4c:	e0000990 	mul	r0, r0, r9
    dc50:	e5953014 	ldr	r3, [r5, #20]
    dc54:	d8bd87f0 	pople	{r4, r5, r6, r7, r8, r9, sl, pc}
    dc58:	e0860000 	add	r0, r6, r0
    dc5c:	e1a02007 	mov	r2, r7
    dc60:	e6ef1078 	uxtb	r1, r8
    dc64:	e0830000 	add	r0, r3, r0
    dc68:	e8bd47f0 	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
    dc6c:	ea0078a4 	b	2bf04 <memset>
    dc70:	00042a88 	.word	0x00042a88
    dc74:	000186a0 	.word	0x000186a0

0000dc78 <wgfxVLine>:
    dc78:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    dc7c:	e59f5074 	ldr	r5, [pc, #116]	; dcf8 <wgfxVLine+0x80>
    dc80:	e1a09000 	mov	r9, r0
    dc84:	e5d50000 	ldrb	r0, [r5]
    dc88:	e1a08001 	mov	r8, r1
    dc8c:	e3500000 	cmp	r0, #0
    dc90:	e1a06002 	mov	r6, r2
    dc94:	e1a07003 	mov	r7, r3
    dc98:	0a000006 	beq	dcb8 <wgfxVLine+0x40>
    dc9c:	e59f4058 	ldr	r4, [pc, #88]	; dcfc <wgfxVLine+0x84>
    dca0:	ea000001 	b	dcac <wgfxVLine+0x34>
    dca4:	e2544001 	subs	r4, r4, #1
    dca8:	0a000002 	beq	dcb8 <wgfxVLine+0x40>
    dcac:	ebffe996 	bl	830c <dma_running>
    dcb0:	e3500000 	cmp	r0, #0
    dcb4:	1afffffa 	bne	dca4 <wgfxVLine+0x2c>
    dcb8:	e3a02000 	mov	r2, #0
    dcbc:	e595100c 	ldr	r1, [r5, #12]
    dcc0:	e1560002 	cmp	r6, r2
    dcc4:	e0289891 	mla	r8, r1, r8, r9
    dcc8:	e5951014 	ldr	r1, [r5, #20]
    dccc:	e5c52000 	strb	r2, [r5]
    dcd0:	e0811008 	add	r1, r1, r8
    dcd4:	d8bd87f0 	pople	{r4, r5, r6, r7, r8, r9, sl, pc}
    dcd8:	e6ef3077 	uxtb	r3, r7
    dcdc:	e5c13000 	strb	r3, [r1]
    dce0:	e2822001 	add	r2, r2, #1
    dce4:	e595000c 	ldr	r0, [r5, #12]
    dce8:	e1560002 	cmp	r6, r2
    dcec:	e0811000 	add	r1, r1, r0
    dcf0:	1afffff9 	bne	dcdc <wgfxVLine+0x64>
    dcf4:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    dcf8:	00042a88 	.word	0x00042a88
    dcfc:	000186a0 	.word	0x000186a0

0000dd00 <CommandHandler::static_hdlcPutCh(unsigned char)>:
    dd00:	e59f3038 	ldr	r3, [pc, #56]	; dd40 <CommandHandler::static_hdlcPutCh(unsigned char)+0x40>
    dd04:	e5932000 	ldr	r2, [r3]
    dd08:	e3520000 	cmp	r2, #0
    dd0c:	012fff1e 	bxeq	lr
    dd10:	e5932004 	ldr	r2, [r3, #4]
    dd14:	e3520000 	cmp	r2, #0
    dd18:	012fff1e 	bxeq	lr
    dd1c:	e1a03000 	mov	r3, r0
    dd20:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    dd24:	e24dd00c 	sub	sp, sp, #12
    dd28:	e28d0008 	add	r0, sp, #8
    dd2c:	e5603004 	strb	r3, [r0, #-4]!
    dd30:	e3a01001 	mov	r1, #1
    dd34:	e12fff32 	blx	r2
    dd38:	e28dd00c 	add	sp, sp, #12
    dd3c:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
    dd40:	00042da8 	.word	0x00042da8

0000dd44 <CommandHandler::CommandHandler()>:
    dd44:	e92d4030 	push	{r4, r5, lr}
    dd48:	e3a04000 	mov	r4, #0
    dd4c:	e1a05000 	mov	r5, r0
    dd50:	e24dd00c 	sub	sp, sp, #12
    dd54:	e58d4000 	str	r4, [sp]
    dd58:	e3a03001 	mov	r3, #1
    dd5c:	e59f204c 	ldr	r2, [pc, #76]	; ddb0 <CommandHandler::CommandHandler()+0x6c>
    dd60:	e59f104c 	ldr	r1, [pc, #76]	; ddb4 <CommandHandler::CommandHandler()+0x70>
    dd64:	eb00040c 	bl	ed9c <MiniHDLC::MiniHDLC(void (*)(unsigned char), void (*)(unsigned char const*, int), bool, bool)>
    dd68:	e1a00005 	mov	r0, r5
    dd6c:	e59f2044 	ldr	r2, [pc, #68]	; ddb8 <CommandHandler::CommandHandler()+0x74>
    dd70:	e2853a01 	add	r3, r5, #4096	; 0x1000
    dd74:	e5825000 	str	r5, [r2]
    dd78:	e5c343a4 	strb	r4, [r3, #932]	; 0x3a4
    dd7c:	e5c34409 	strb	r4, [r3, #1033]	; 0x409
    dd80:	e5c34432 	strb	r4, [r3, #1074]	; 0x432
    dd84:	e58344fc 	str	r4, [r3, #1276]	; 0x4fc
    dd88:	e5834500 	str	r4, [r3, #1280]	; 0x500
    dd8c:	e5834504 	str	r4, [r3, #1284]	; 0x504
    dd90:	e5834508 	str	r4, [r3, #1288]	; 0x508
    dd94:	e5c3450c 	strb	r4, [r3, #1292]	; 0x50c
    dd98:	e5c3452a 	strb	r4, [r3, #1322]	; 0x52a
    dd9c:	e5c34548 	strb	r4, [r3, #1352]	; 0x548
    dda0:	e5c345ac 	strb	r4, [r3, #1452]	; 0x5ac
    dda4:	e5c34610 	strb	r4, [r3, #1552]	; 0x610
    dda8:	e28dd00c 	add	sp, sp, #12
    ddac:	e8bd8030 	pop	{r4, r5, pc}
    ddb0:	0000e840 	.word	0x0000e840
    ddb4:	0000dd00 	.word	0x0000dd00
    ddb8:	00042da8 	.word	0x00042da8

0000ddbc <CommandHandler::~CommandHandler()>:
    ddbc:	e12fff1e 	bx	lr

0000ddc0 <CommandHandler::handleSerialReceivedChars(unsigned char const*, int)>:
    ddc0:	e59f3018 	ldr	r3, [pc, #24]	; dde0 <CommandHandler::handleSerialReceivedChars(unsigned char const*, int)+0x20>
    ddc4:	e5933000 	ldr	r3, [r3]
    ddc8:	e3530000 	cmp	r3, #0
    ddcc:	012fff1e 	bxeq	lr
    ddd0:	e1a02001 	mov	r2, r1
    ddd4:	e1a01000 	mov	r1, r0
    ddd8:	e1a00003 	mov	r0, r3
    dddc:	ea0004ca 	b	f10c <MiniHDLC::handleBuffer(unsigned char const*, int)>
    dde0:	00042da8 	.word	0x00042da8

0000dde4 <CommandHandler::hdlcPutCh(unsigned char)>:
    dde4:	e59f3028 	ldr	r3, [pc, #40]	; de14 <CommandHandler::hdlcPutCh(unsigned char)+0x30>
    dde8:	e5933004 	ldr	r3, [r3, #4]
    ddec:	e3530000 	cmp	r3, #0
    ddf0:	012fff1e 	bxeq	lr
    ddf4:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    ddf8:	e24dd00c 	sub	sp, sp, #12
    ddfc:	e28d0008 	add	r0, sp, #8
    de00:	e5601004 	strb	r1, [r0, #-4]!
    de04:	e3a01001 	mov	r1, #1
    de08:	e12fff33 	blx	r3
    de0c:	e28dd00c 	add	sp, sp, #12
    de10:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
    de14:	00042da8 	.word	0x00042da8

0000de18 <CommandHandler::handleFileStart(char const*)>:
    de18:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
    de1c:	e2804d4e 	add	r4, r0, #4992	; 0x1380
    de20:	e2844024 	add	r4, r4, #36	; 0x24
    de24:	e24dd01c 	sub	sp, sp, #28
    de28:	e1a05000 	mov	r5, r0
    de2c:	e1a02004 	mov	r2, r4
    de30:	e3a03064 	mov	r3, #100	; 0x64
    de34:	e59f0124 	ldr	r0, [pc, #292]	; df60 <CommandHandler::handleFileStart(char const*)+0x148>
    de38:	e1a06001 	mov	r6, r1
    de3c:	ebfff535 	bl	b318 <jsonGetValueForKey>
    de40:	e3500000 	cmp	r0, #0
    de44:	1a000001 	bne	de50 <CommandHandler::handleFileStart(char const*)+0x38>
    de48:	e28dd01c 	add	sp, sp, #28
    de4c:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
    de50:	e2857a01 	add	r7, r5, #4096	; 0x1000
    de54:	e59724fc 	ldr	r2, [r7, #1276]	; 0x4fc
    de58:	e1a03004 	mov	r3, r4
    de5c:	e58d2000 	str	r2, [sp]
    de60:	e3a01005 	mov	r1, #5
    de64:	e59f20f8 	ldr	r2, [pc, #248]	; df64 <CommandHandler::handleFileStart(char const*)+0x14c>
    de68:	e59f00f8 	ldr	r0, [pc, #248]	; df68 <CommandHandler::handleFileStart(char const*)+0x150>
    de6c:	e2858b05 	add	r8, r5, #5120	; 0x1400
    de70:	ebffee4f 	bl	97b4 <LogWrite>
    de74:	e2882009 	add	r2, r8, #9
    de78:	e3a03028 	mov	r3, #40	; 0x28
    de7c:	e1a01006 	mov	r1, r6
    de80:	e59f00e4 	ldr	r0, [pc, #228]	; df6c <CommandHandler::handleFileStart(char const*)+0x154>
    de84:	ebfff523 	bl	b318 <jsonGetValueForKey>
    de88:	e3500000 	cmp	r0, #0
    de8c:	0affffed 	beq	de48 <CommandHandler::handleFileStart(char const*)+0x30>
    de90:	e1a03004 	mov	r3, r4
    de94:	e59f20d4 	ldr	r2, [pc, #212]	; df70 <CommandHandler::handleFileStart(char const*)+0x158>
    de98:	e3a01005 	mov	r1, #5
    de9c:	e59f00c4 	ldr	r0, [pc, #196]	; df68 <CommandHandler::handleFileStart(char const*)+0x150>
    dea0:	ebffee43 	bl	97b4 <LogWrite>
    dea4:	e28d200c 	add	r2, sp, #12
    dea8:	e3a0300a 	mov	r3, #10
    deac:	e1a01006 	mov	r1, r6
    deb0:	e59f00bc 	ldr	r0, [pc, #188]	; df74 <CommandHandler::handleFileStart(char const*)+0x15c>
    deb4:	ebfff517 	bl	b318 <jsonGetValueForKey>
    deb8:	e3500000 	cmp	r0, #0
    debc:	0affffe1 	beq	de48 <CommandHandler::handleFileStart(char const*)+0x30>
    dec0:	e28d000c 	add	r0, sp, #12
    dec4:	e3a0200a 	mov	r2, #10
    dec8:	e3a01000 	mov	r1, #0
    decc:	eb007cdd 	bl	2d248 <strtol>
    ded0:	e2509000 	subs	r9, r0, #0
    ded4:	daffffdb 	ble	de48 <CommandHandler::handleFileStart(char const*)+0x30>
    ded8:	e1a01006 	mov	r1, r6
    dedc:	e2880032 	add	r0, r8, #50	; 0x32
    dee0:	e3a020c8 	mov	r2, #200	; 0xc8
    dee4:	eb007981 	bl	2c4f0 <strlcpy>
    dee8:	e59734fc 	ldr	r3, [r7, #1276]	; 0x4fc
    deec:	e3530000 	cmp	r3, #0
    def0:	0a000002 	beq	df00 <CommandHandler::handleFileStart(char const*)+0xe8>
    def4:	e2850d53 	add	r0, r5, #5312	; 0x14c0
    def8:	e280003c 	add	r0, r0, #60	; 0x3c
    defc:	ebfff40c 	bl	af34 <nmalloc_free>
    df00:	e1a00009 	mov	r0, r9
    df04:	ebfff3cd 	bl	ae40 <nmalloc_malloc>
    df08:	e3a03000 	mov	r3, #0
    df0c:	e1500003 	cmp	r0, r3
    df10:	e58704fc 	str	r0, [r7, #1276]	; 0x4fc
    df14:	e5873504 	str	r3, [r7, #1284]	; 0x504
    df18:	e5873508 	str	r3, [r7, #1288]	; 0x508
    df1c:	0a000007 	beq	df40 <CommandHandler::handleFileStart(char const*)+0x128>
    df20:	e5879500 	str	r9, [r7, #1280]	; 0x500
    df24:	e1a03004 	mov	r3, r4
    df28:	e88d0201 	stm	sp, {r0, r9}
    df2c:	e59f2044 	ldr	r2, [pc, #68]	; df78 <CommandHandler::handleFileStart(char const*)+0x160>
    df30:	e3a01005 	mov	r1, #5
    df34:	e59f002c 	ldr	r0, [pc, #44]	; df68 <CommandHandler::handleFileStart(char const*)+0x150>
    df38:	ebffee1d 	bl	97b4 <LogWrite>
    df3c:	eaffffc1 	b	de48 <CommandHandler::handleFileStart(char const*)+0x30>
    df40:	e5870500 	str	r0, [r7, #1280]	; 0x500
    df44:	e1a03004 	mov	r3, r4
    df48:	e58d0000 	str	r0, [sp]
    df4c:	e59f2028 	ldr	r2, [pc, #40]	; df7c <CommandHandler::handleFileStart(char const*)+0x164>
    df50:	e3a01002 	mov	r1, #2
    df54:	e59f000c 	ldr	r0, [pc, #12]	; df68 <CommandHandler::handleFileStart(char const*)+0x150>
    df58:	ebffee15 	bl	97b4 <LogWrite>
    df5c:	eaffffb9 	b	de48 <CommandHandler::handleFileStart(char const*)+0x30>
    df60:	0002e604 	.word	0x0002e604
    df64:	0002e610 	.word	0x0002e610
    df68:	0002e5f4 	.word	0x0002e5f4
    df6c:	0002e62c 	.word	0x0002e62c
    df70:	0002e638 	.word	0x0002e638
    df74:	0002e64c 	.word	0x0002e64c
    df78:	0002e654 	.word	0x0002e654
    df7c:	0002e67c 	.word	0x0002e67c

0000df80 <CommandHandler::handleFileBlock(char const*, unsigned char const*, int)>:
    df80:	e92d4070 	push	{r4, r5, r6, lr}
    df84:	e2804a01 	add	r4, r0, #4096	; 0x1000
    df88:	e59404fc 	ldr	r0, [r4, #1276]	; 0x4fc
    df8c:	e24dd010 	sub	sp, sp, #16
    df90:	e3500000 	cmp	r0, #0
    df94:	0a000007 	beq	dfb8 <CommandHandler::handleFileBlock(char const*, unsigned char const*, int)+0x38>
    df98:	e1a06003 	mov	r6, r3
    df9c:	e1a05002 	mov	r5, r2
    dfa0:	e3a0300a 	mov	r3, #10
    dfa4:	e28d2004 	add	r2, sp, #4
    dfa8:	e59f0068 	ldr	r0, [pc, #104]	; e018 <CommandHandler::handleFileBlock(char const*, unsigned char const*, int)+0x98>
    dfac:	ebfff4d9 	bl	b318 <jsonGetValueForKey>
    dfb0:	e3500000 	cmp	r0, #0
    dfb4:	1a000001 	bne	dfc0 <CommandHandler::handleFileBlock(char const*, unsigned char const*, int)+0x40>
    dfb8:	e28dd010 	add	sp, sp, #16
    dfbc:	e8bd8070 	pop	{r4, r5, r6, pc}
    dfc0:	e28d0004 	add	r0, sp, #4
    dfc4:	e3a0200a 	mov	r2, #10
    dfc8:	e3a01000 	mov	r1, #0
    dfcc:	eb007c9d 	bl	2d248 <strtol>
    dfd0:	e3500000 	cmp	r0, #0
    dfd4:	bafffff7 	blt	dfb8 <CommandHandler::handleFileBlock(char const*, unsigned char const*, int)+0x38>
    dfd8:	e5943500 	ldr	r3, [r4, #1280]	; 0x500
    dfdc:	e0802006 	add	r2, r0, r6
    dfe0:	e1520003 	cmp	r2, r3
    dfe4:	cafffff3 	bgt	dfb8 <CommandHandler::handleFileBlock(char const*, unsigned char const*, int)+0x38>
    dfe8:	e59434fc 	ldr	r3, [r4, #1276]	; 0x4fc
    dfec:	e1a02006 	mov	r2, r6
    dff0:	e0830000 	add	r0, r3, r0
    dff4:	e1a01005 	mov	r1, r5
    dff8:	eb00777d 	bl	2bdf4 <memcpy>
    dffc:	e5943504 	ldr	r3, [r4, #1284]	; 0x504
    e000:	e5942508 	ldr	r2, [r4, #1288]	; 0x508
    e004:	e0833006 	add	r3, r3, r6
    e008:	e2822001 	add	r2, r2, #1
    e00c:	e5843504 	str	r3, [r4, #1284]	; 0x504
    e010:	e5842508 	str	r2, [r4, #1288]	; 0x508
    e014:	eaffffe7 	b	dfb8 <CommandHandler::handleFileBlock(char const*, unsigned char const*, int)+0x38>
    e018:	0002e6b8 	.word	0x0002e6b8

0000e01c <CommandHandler::handleStatusResponse(char const*)>:
    e01c:	e92d4070 	push	{r4, r5, r6, lr}
    e020:	e24ddffa 	sub	sp, sp, #1000	; 0x3e8
    e024:	e1a04000 	mov	r4, r0
    e028:	e1a0200d 	mov	r2, sp
    e02c:	e3a03ffa 	mov	r3, #1000	; 0x3e8
    e030:	e59f00a8 	ldr	r0, [pc, #168]	; e0e0 <CommandHandler::handleStatusResponse(char const*)+0xc4>
    e034:	ebfff4b7 	bl	b318 <jsonGetValueForKey>
    e038:	e3500000 	cmp	r0, #0
    e03c:	1a000001 	bne	e048 <CommandHandler::handleStatusResponse(char const*)+0x2c>
    e040:	e28ddffa 	add	sp, sp, #1000	; 0x3e8
    e044:	e8bd8070 	pop	{r4, r5, r6, pc}
    e048:	e2845c15 	add	r5, r4, #5376	; 0x1500
    e04c:	e285600c 	add	r6, r5, #12
    e050:	e1a02006 	mov	r2, r6
    e054:	e3a0301e 	mov	r3, #30
    e058:	e1a0100d 	mov	r1, sp
    e05c:	e59f0080 	ldr	r0, [pc, #128]	; e0e4 <CommandHandler::handleStatusResponse(char const*)+0xc8>
    e060:	ebfff4ac 	bl	b318 <jsonGetValueForKey>
    e064:	e3500000 	cmp	r0, #0
    e068:	0afffff4 	beq	e040 <CommandHandler::handleStatusResponse(char const*)+0x24>
    e06c:	e59f1074 	ldr	r1, [pc, #116]	; e0e8 <CommandHandler::handleStatusResponse(char const*)+0xcc>
    e070:	e1a00006 	mov	r0, r6
    e074:	eb007864 	bl	2c20c <strcmp>
    e078:	e2900000 	adds	r0, r0, #0
    e07c:	13a00001 	movne	r0, #1
    e080:	e2843a01 	add	r3, r4, #4096	; 0x1000
    e084:	e5c30610 	strb	r0, [r3, #1552]	; 0x610
    e088:	e285202a 	add	r2, r5, #42	; 0x2a
    e08c:	e3a0301e 	mov	r3, #30
    e090:	e1a0100d 	mov	r1, sp
    e094:	e59f0050 	ldr	r0, [pc, #80]	; e0ec <CommandHandler::handleStatusResponse(char const*)+0xd0>
    e098:	ebfff49e 	bl	b318 <jsonGetValueForKey>
    e09c:	e3500000 	cmp	r0, #0
    e0a0:	0affffe6 	beq	e040 <CommandHandler::handleStatusResponse(char const*)+0x24>
    e0a4:	e2842d55 	add	r2, r4, #5440	; 0x1540
    e0a8:	e2822008 	add	r2, r2, #8
    e0ac:	e3a03064 	mov	r3, #100	; 0x64
    e0b0:	e1a0100d 	mov	r1, sp
    e0b4:	e59f0034 	ldr	r0, [pc, #52]	; e0f0 <CommandHandler::handleStatusResponse(char const*)+0xd4>
    e0b8:	ebfff496 	bl	b318 <jsonGetValueForKey>
    e0bc:	e3500000 	cmp	r0, #0
    e0c0:	0affffde 	beq	e040 <CommandHandler::handleStatusResponse(char const*)+0x24>
    e0c4:	e2842d56 	add	r2, r4, #5504	; 0x1580
    e0c8:	e282202c 	add	r2, r2, #44	; 0x2c
    e0cc:	e1a0100d 	mov	r1, sp
    e0d0:	e3a03064 	mov	r3, #100	; 0x64
    e0d4:	e59f0018 	ldr	r0, [pc, #24]	; e0f4 <CommandHandler::handleStatusResponse(char const*)+0xd8>
    e0d8:	ebfff48e 	bl	b318 <jsonGetValueForKey>
    e0dc:	eaffffd7 	b	e040 <CommandHandler::handleStatusResponse(char const*)+0x24>
    e0e0:	0002e6c0 	.word	0x0002e6c0
    e0e4:	0002e6cc 	.word	0x0002e6cc
    e0e8:	0002e6d4 	.word	0x0002e6d4
    e0ec:	0002e6dc 	.word	0x0002e6dc
    e0f0:	0002e6e8 	.word	0x0002e6e8
    e0f4:	0002e6f0 	.word	0x0002e6f0

0000e0f8 <CommandHandler::sendKeyCodeToTarget(int)>:
    e0f8:	e92d4070 	push	{r4, r5, r6, lr}
    e0fc:	e59f4064 	ldr	r4, [pc, #100]	; e168 <CommandHandler::sendKeyCodeToTarget(int)+0x70>
    e100:	e1a05000 	mov	r5, r0
    e104:	e1a06001 	mov	r6, r1
    e108:	e3a02064 	mov	r2, #100	; 0x64
    e10c:	e59f1058 	ldr	r1, [pc, #88]	; e16c <CommandHandler::sendKeyCodeToTarget(int)+0x74>
    e110:	e1a00004 	mov	r0, r4
    e114:	eb0078f5 	bl	2c4f0 <strlcpy>
    e118:	e1a00004 	mov	r0, r4
    e11c:	eb007908 	bl	2c544 <strlen>
    e120:	e3a0300a 	mov	r3, #10
    e124:	e0841000 	add	r1, r4, r0
    e128:	e1a02003 	mov	r2, r3
    e12c:	e1a00006 	mov	r0, r6
    e130:	ebfff4f0 	bl	b4f8 <rditoa>
    e134:	e1a00004 	mov	r0, r4
    e138:	eb007901 	bl	2c544 <strlen>
    e13c:	e3a02064 	mov	r2, #100	; 0x64
    e140:	e59f1028 	ldr	r1, [pc, #40]	; e170 <CommandHandler::sendKeyCodeToTarget(int)+0x78>
    e144:	e0840000 	add	r0, r4, r0
    e148:	eb0078e8 	bl	2c4f0 <strlcpy>
    e14c:	e1a00004 	mov	r0, r4
    e150:	eb0078fb 	bl	2c544 <strlen>
    e154:	e1a01004 	mov	r1, r4
    e158:	e2802001 	add	r2, r0, #1
    e15c:	e1a00005 	mov	r0, r5
    e160:	e8bd4070 	pop	{r4, r5, r6, lr}
    e164:	ea0004e5 	b	f500 <MiniHDLC::sendFrame(unsigned char const*, int)>
    e168:	00042db0 	.word	0x00042db0
    e16c:	0002e6f8 	.word	0x0002e6f8
    e170:	0002e714 	.word	0x0002e714

0000e174 <CommandHandler::sendWithJSON(char const*, char const*)>:
    e174:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    e178:	e59f4098 	ldr	r4, [pc, #152]	; e218 <CommandHandler::sendWithJSON(char const*, char const*)+0xa4>
    e17c:	e59f5098 	ldr	r5, [pc, #152]	; e21c <CommandHandler::sendWithJSON(char const*, char const*)+0xa8>
    e180:	e1a06000 	mov	r6, r0
    e184:	e1a08001 	mov	r8, r1
    e188:	e1a07002 	mov	r7, r2
    e18c:	e59f108c 	ldr	r1, [pc, #140]	; e220 <CommandHandler::sendWithJSON(char const*, char const*)+0xac>
    e190:	e1a02005 	mov	r2, r5
    e194:	e1a00004 	mov	r0, r4
    e198:	eb0078d4 	bl	2c4f0 <strlcpy>
    e19c:	e1a00004 	mov	r0, r4
    e1a0:	eb0078e7 	bl	2c544 <strlen>
    e1a4:	e1a02005 	mov	r2, r5
    e1a8:	e1a01008 	mov	r1, r8
    e1ac:	e0840000 	add	r0, r4, r0
    e1b0:	eb0078ce 	bl	2c4f0 <strlcpy>
    e1b4:	e1a00004 	mov	r0, r4
    e1b8:	eb0078e1 	bl	2c544 <strlen>
    e1bc:	e1a02005 	mov	r2, r5
    e1c0:	e59f105c 	ldr	r1, [pc, #92]	; e224 <CommandHandler::sendWithJSON(char const*, char const*)+0xb0>
    e1c4:	e0840000 	add	r0, r4, r0
    e1c8:	eb0078c8 	bl	2c4f0 <strlcpy>
    e1cc:	e1a00004 	mov	r0, r4
    e1d0:	eb0078db 	bl	2c544 <strlen>
    e1d4:	e1a02005 	mov	r2, r5
    e1d8:	e1a01007 	mov	r1, r7
    e1dc:	e0840000 	add	r0, r4, r0
    e1e0:	eb0078c2 	bl	2c4f0 <strlcpy>
    e1e4:	e1a00004 	mov	r0, r4
    e1e8:	eb0078d5 	bl	2c544 <strlen>
    e1ec:	e1a02005 	mov	r2, r5
    e1f0:	e59f1030 	ldr	r1, [pc, #48]	; e228 <CommandHandler::sendWithJSON(char const*, char const*)+0xb4>
    e1f4:	e0840000 	add	r0, r4, r0
    e1f8:	eb0078bc 	bl	2c4f0 <strlcpy>
    e1fc:	e1a00004 	mov	r0, r4
    e200:	eb0078cf 	bl	2c544 <strlen>
    e204:	e1a01004 	mov	r1, r4
    e208:	e2802001 	add	r2, r0, #1
    e20c:	e1a00006 	mov	r0, r6
    e210:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    e214:	ea0004b9 	b	f500 <MiniHDLC::sendFrame(unsigned char const*, int)>
    e218:	00042e18 	.word	0x00042e18
    e21c:	000005dc 	.word	0x000005dc
    e220:	0002e718 	.word	0x0002e718
    e224:	0002e728 	.word	0x0002e728
    e228:	0002e714 	.word	0x0002e714

0000e22c <CommandHandler::handleFileEnd(char const*)>:
    e22c:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    e230:	e2805a01 	add	r5, r0, #4096	; 0x1000
    e234:	e59534fc 	ldr	r3, [r5, #1276]	; 0x4fc
    e238:	e24dd07c 	sub	sp, sp, #124	; 0x7c
    e23c:	e3530000 	cmp	r3, #0
    e240:	0a000006 	beq	e260 <CommandHandler::handleFileEnd(char const*)+0x34>
    e244:	e1a04000 	mov	r4, r0
    e248:	e28d2008 	add	r2, sp, #8
    e24c:	e3a0300a 	mov	r3, #10
    e250:	e59f0114 	ldr	r0, [pc, #276]	; e36c <CommandHandler::handleFileEnd(char const*)+0x140>
    e254:	ebfff42f 	bl	b318 <jsonGetValueForKey>
    e258:	e3500000 	cmp	r0, #0
    e25c:	1a000001 	bne	e268 <CommandHandler::handleFileEnd(char const*)+0x3c>
    e260:	e28dd07c 	add	sp, sp, #124	; 0x7c
    e264:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
    e268:	e3a0200a 	mov	r2, #10
    e26c:	e3a01000 	mov	r1, #0
    e270:	e28d0008 	add	r0, sp, #8
    e274:	eb007c96 	bl	2d4d4 <strtoul>
    e278:	e1a07000 	mov	r7, r0
    e27c:	e1a03000 	mov	r3, r0
    e280:	e5952508 	ldr	r2, [r5, #1288]	; 0x508
    e284:	e28d0014 	add	r0, sp, #20
    e288:	e59f10e0 	ldr	r1, [pc, #224]	; e370 <CommandHandler::handleFileEnd(char const*)+0x144>
    e28c:	ebffedc8 	bl	99b4 <ee_sprintf>
    e290:	e5953508 	ldr	r3, [r5, #1288]	; 0x508
    e294:	e2846d4e 	add	r6, r4, #4992	; 0x1380
    e298:	e1530007 	cmp	r3, r7
    e29c:	e2866024 	add	r6, r6, #36	; 0x24
    e2a0:	0a00000b 	beq	e2d4 <CommandHandler::handleFileEnd(char const*)+0xa8>
    e2a4:	e88d0088 	stm	sp, {r3, r7}
    e2a8:	e59f20c4 	ldr	r2, [pc, #196]	; e374 <CommandHandler::handleFileEnd(char const*)+0x148>
    e2ac:	e1a03006 	mov	r3, r6
    e2b0:	e3a01002 	mov	r1, #2
    e2b4:	e59f00bc 	ldr	r0, [pc, #188]	; e378 <CommandHandler::handleFileEnd(char const*)+0x14c>
    e2b8:	ebffed3d 	bl	97b4 <LogWrite>
    e2bc:	e28d2014 	add	r2, sp, #20
    e2c0:	e1a00004 	mov	r0, r4
    e2c4:	e59f10b0 	ldr	r1, [pc, #176]	; e37c <CommandHandler::handleFileEnd(char const*)+0x150>
    e2c8:	ebffffa9 	bl	e174 <CommandHandler::sendWithJSON(char const*, char const*)>
    e2cc:	e28dd07c 	add	sp, sp, #124	; 0x7c
    e2d0:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
    e2d4:	e28d2014 	add	r2, sp, #20
    e2d8:	e1a00004 	mov	r0, r4
    e2dc:	e59f109c 	ldr	r1, [pc, #156]	; e380 <CommandHandler::handleFileEnd(char const*)+0x154>
    e2e0:	e2844b05 	add	r4, r4, #5120	; 0x1400
    e2e4:	ebffffa2 	bl	e174 <CommandHandler::sendWithJSON(char const*, char const*)>
    e2e8:	e2840009 	add	r0, r4, #9
    e2ec:	e59f1090 	ldr	r1, [pc, #144]	; e384 <CommandHandler::handleFileEnd(char const*)+0x158>
    e2f0:	eb007748 	bl	2c018 <strcasecmp>
    e2f4:	e5952504 	ldr	r2, [r5, #1284]	; 0x504
    e2f8:	e3500000 	cmp	r0, #0
    e2fc:	e1a03006 	mov	r3, r6
    e300:	e58d2000 	str	r2, [sp]
    e304:	1a00000b 	bne	e338 <CommandHandler::handleFileEnd(char const*)+0x10c>
    e308:	e59f2078 	ldr	r2, [pc, #120]	; e388 <CommandHandler::handleFileEnd(char const*)+0x15c>
    e30c:	e3a01004 	mov	r1, #4
    e310:	e59f0060 	ldr	r0, [pc, #96]	; e378 <CommandHandler::handleFileEnd(char const*)+0x14c>
    e314:	ebffed26 	bl	97b4 <LogWrite>
    e318:	e59f306c 	ldr	r3, [pc, #108]	; e38c <CommandHandler::handleFileEnd(char const*)+0x160>
    e31c:	e5933650 	ldr	r3, [r3, #1616]	; 0x650
    e320:	e3530000 	cmp	r3, #0
    e324:	0affffcd 	beq	e260 <CommandHandler::handleFileEnd(char const*)+0x34>
    e328:	e5951504 	ldr	r1, [r5, #1284]	; 0x504
    e32c:	e59504fc 	ldr	r0, [r5, #1276]	; 0x4fc
    e330:	e12fff33 	blx	r3
    e334:	eaffffc9 	b	e260 <CommandHandler::handleFileEnd(char const*)+0x34>
    e338:	e59f2050 	ldr	r2, [pc, #80]	; e390 <CommandHandler::handleFileEnd(char const*)+0x164>
    e33c:	e3a01005 	mov	r1, #5
    e340:	e59f0030 	ldr	r0, [pc, #48]	; e378 <CommandHandler::handleFileEnd(char const*)+0x14c>
    e344:	ebffed1a 	bl	97b4 <LogWrite>
    e348:	e59f303c 	ldr	r3, [pc, #60]	; e38c <CommandHandler::handleFileEnd(char const*)+0x160>
    e34c:	e5933654 	ldr	r3, [r3, #1620]	; 0x654
    e350:	e3530000 	cmp	r3, #0
    e354:	0affffc1 	beq	e260 <CommandHandler::handleFileEnd(char const*)+0x34>
    e358:	e2840032 	add	r0, r4, #50	; 0x32
    e35c:	e5952504 	ldr	r2, [r5, #1284]	; 0x504
    e360:	e59514fc 	ldr	r1, [r5, #1276]	; 0x4fc
    e364:	e12fff33 	blx	r3
    e368:	eaffffbc 	b	e260 <CommandHandler::handleFileEnd(char const*)+0x34>
    e36c:	0002e72c 	.word	0x0002e72c
    e370:	0002e738 	.word	0x0002e738
    e374:	0002e754 	.word	0x0002e754
    e378:	0002e5f4 	.word	0x0002e5f4
    e37c:	0002e780 	.word	0x0002e780
    e380:	0002e78c 	.word	0x0002e78c
    e384:	0002e798 	.word	0x0002e798
    e388:	0002e7a4 	.word	0x0002e7a4
    e38c:	00042da8 	.word	0x00042da8
    e390:	0002e7d0 	.word	0x0002e7d0

0000e394 <CommandHandler::processCommand(char const*, unsigned char const*, int)>:
    e394:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    e398:	e24dde1a 	sub	sp, sp, #416	; 0x1a0
    e39c:	e1a04000 	mov	r4, r0
    e3a0:	e1a07002 	mov	r7, r2
    e3a4:	e1a06003 	mov	r6, r3
    e3a8:	e28d20d4 	add	r2, sp, #212	; 0xd4
    e3ac:	e3a030c8 	mov	r3, #200	; 0xc8
    e3b0:	e59f01e8 	ldr	r0, [pc, #488]	; e5a0 <CommandHandler::processCommand(char const*, unsigned char const*, int)+0x20c>
    e3b4:	e1a05001 	mov	r5, r1
    e3b8:	ebfff3d6 	bl	b318 <jsonGetValueForKey>
    e3bc:	e3500000 	cmp	r0, #0
    e3c0:	0a00001d 	beq	e43c <CommandHandler::processCommand(char const*, unsigned char const*, int)+0xa8>
    e3c4:	e59f11d8 	ldr	r1, [pc, #472]	; e5a4 <CommandHandler::processCommand(char const*, unsigned char const*, int)+0x210>
    e3c8:	e28d00d4 	add	r0, sp, #212	; 0xd4
    e3cc:	eb007711 	bl	2c018 <strcasecmp>
    e3d0:	e3500000 	cmp	r0, #0
    e3d4:	0a00001a 	beq	e444 <CommandHandler::processCommand(char const*, unsigned char const*, int)+0xb0>
    e3d8:	e59f11c8 	ldr	r1, [pc, #456]	; e5a8 <CommandHandler::processCommand(char const*, unsigned char const*, int)+0x214>
    e3dc:	e28d00d4 	add	r0, sp, #212	; 0xd4
    e3e0:	eb00770c 	bl	2c018 <strcasecmp>
    e3e4:	e2508000 	subs	r8, r0, #0
    e3e8:	0a000022 	beq	e478 <CommandHandler::processCommand(char const*, unsigned char const*, int)+0xe4>
    e3ec:	e59f11b8 	ldr	r1, [pc, #440]	; e5ac <CommandHandler::processCommand(char const*, unsigned char const*, int)+0x218>
    e3f0:	e28d00d4 	add	r0, sp, #212	; 0xd4
    e3f4:	eb007707 	bl	2c018 <strcasecmp>
    e3f8:	e3500000 	cmp	r0, #0
    e3fc:	0a000019 	beq	e468 <CommandHandler::processCommand(char const*, unsigned char const*, int)+0xd4>
    e400:	e28d00d4 	add	r0, sp, #212	; 0xd4
    e404:	e59f11a4 	ldr	r1, [pc, #420]	; e5b0 <CommandHandler::processCommand(char const*, unsigned char const*, int)+0x21c>
    e408:	eb007702 	bl	2c018 <strcasecmp>
    e40c:	e3500000 	cmp	r0, #0
    e410:	0a000039 	beq	e4fc <CommandHandler::processCommand(char const*, unsigned char const*, int)+0x168>
    e414:	e59f3198 	ldr	r3, [pc, #408]	; e5b4 <CommandHandler::processCommand(char const*, unsigned char const*, int)+0x220>
    e418:	e5934658 	ldr	r4, [r3, #1624]	; 0x658
    e41c:	e3540000 	cmp	r4, #0
    e420:	0a000005 	beq	e43c <CommandHandler::processCommand(char const*, unsigned char const*, int)+0xa8>
    e424:	e3a03000 	mov	r3, #0
    e428:	e1a02006 	mov	r2, r6
    e42c:	e1a01007 	mov	r1, r7
    e430:	e1a00005 	mov	r0, r5
    e434:	e58d3000 	str	r3, [sp]
    e438:	e12fff34 	blx	r4
    e43c:	e28dde1a 	add	sp, sp, #416	; 0x1a0
    e440:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    e444:	e59f216c 	ldr	r2, [pc, #364]	; e5b8 <CommandHandler::processCommand(char const*, unsigned char const*, int)+0x224>
    e448:	e3a01005 	mov	r1, #5
    e44c:	e59f0168 	ldr	r0, [pc, #360]	; e5bc <CommandHandler::processCommand(char const*, unsigned char const*, int)+0x228>
    e450:	ebffecd7 	bl	97b4 <LogWrite>
    e454:	e1a01005 	mov	r1, r5
    e458:	e1a00004 	mov	r0, r4
    e45c:	ebfffe6d 	bl	de18 <CommandHandler::handleFileStart(char const*)>
    e460:	e28dde1a 	add	sp, sp, #416	; 0x1a0
    e464:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    e468:	e1a01005 	mov	r1, r5
    e46c:	e1a00004 	mov	r0, r4
    e470:	ebffff6d 	bl	e22c <CommandHandler::handleFileEnd(char const*)>
    e474:	eafffff0 	b	e43c <CommandHandler::processCommand(char const*, unsigned char const*, int)+0xa8>
    e478:	e2844a01 	add	r4, r4, #4096	; 0x1000
    e47c:	e59434fc 	ldr	r3, [r4, #1276]	; 0x4fc
    e480:	e3530000 	cmp	r3, #0
    e484:	0affffec 	beq	e43c <CommandHandler::processCommand(char const*, unsigned char const*, int)+0xa8>
    e488:	e1a01005 	mov	r1, r5
    e48c:	e28d2070 	add	r2, sp, #112	; 0x70
    e490:	e3a0300a 	mov	r3, #10
    e494:	e59f0124 	ldr	r0, [pc, #292]	; e5c0 <CommandHandler::processCommand(char const*, unsigned char const*, int)+0x22c>
    e498:	ebfff39e 	bl	b318 <jsonGetValueForKey>
    e49c:	e3500000 	cmp	r0, #0
    e4a0:	0affffe5 	beq	e43c <CommandHandler::processCommand(char const*, unsigned char const*, int)+0xa8>
    e4a4:	e1a01008 	mov	r1, r8
    e4a8:	e28d0070 	add	r0, sp, #112	; 0x70
    e4ac:	e3a0200a 	mov	r2, #10
    e4b0:	eb007b64 	bl	2d248 <strtol>
    e4b4:	e3500000 	cmp	r0, #0
    e4b8:	baffffdf 	blt	e43c <CommandHandler::processCommand(char const*, unsigned char const*, int)+0xa8>
    e4bc:	e5943500 	ldr	r3, [r4, #1280]	; 0x500
    e4c0:	e0862000 	add	r2, r6, r0
    e4c4:	e1520003 	cmp	r2, r3
    e4c8:	caffffdb 	bgt	e43c <CommandHandler::processCommand(char const*, unsigned char const*, int)+0xa8>
    e4cc:	e59434fc 	ldr	r3, [r4, #1276]	; 0x4fc
    e4d0:	e1a02006 	mov	r2, r6
    e4d4:	e0830000 	add	r0, r3, r0
    e4d8:	e1a01007 	mov	r1, r7
    e4dc:	eb007644 	bl	2bdf4 <memcpy>
    e4e0:	e5942504 	ldr	r2, [r4, #1284]	; 0x504
    e4e4:	e5943508 	ldr	r3, [r4, #1288]	; 0x508
    e4e8:	e0826006 	add	r6, r2, r6
    e4ec:	e2833001 	add	r3, r3, #1
    e4f0:	e5846504 	str	r6, [r4, #1284]	; 0x504
    e4f4:	e5843508 	str	r3, [r4, #1288]	; 0x508
    e4f8:	eaffffcf 	b	e43c <CommandHandler::processCommand(char const*, unsigned char const*, int)+0xa8>
    e4fc:	e28d200c 	add	r2, sp, #12
    e500:	e3a03064 	mov	r3, #100	; 0x64
    e504:	e1a01005 	mov	r1, r5
    e508:	e59f00b4 	ldr	r0, [pc, #180]	; e5c4 <CommandHandler::processCommand(char const*, unsigned char const*, int)+0x230>
    e50c:	ebfff381 	bl	b318 <jsonGetValueForKey>
    e510:	e3500000 	cmp	r0, #0
    e514:	1a000006 	bne	e534 <CommandHandler::processCommand(char const*, unsigned char const*, int)+0x1a0>
    e518:	e3a03064 	mov	r3, #100	; 0x64
    e51c:	e28d200c 	add	r2, sp, #12
    e520:	e1a01005 	mov	r1, r5
    e524:	e59f009c 	ldr	r0, [pc, #156]	; e5c8 <CommandHandler::processCommand(char const*, unsigned char const*, int)+0x234>
    e528:	ebfff37a 	bl	b318 <jsonGetValueForKey>
    e52c:	e3500000 	cmp	r0, #0
    e530:	0a000016 	beq	e590 <CommandHandler::processCommand(char const*, unsigned char const*, int)+0x1fc>
    e534:	e3a02064 	mov	r2, #100	; 0x64
    e538:	e59f108c 	ldr	r1, [pc, #140]	; e5cc <CommandHandler::processCommand(char const*, unsigned char const*, int)+0x238>
    e53c:	e28d0070 	add	r0, sp, #112	; 0x70
    e540:	eb0077ea 	bl	2c4f0 <strlcpy>
    e544:	e28d100c 	add	r1, sp, #12
    e548:	e3a02064 	mov	r2, #100	; 0x64
    e54c:	e28d0070 	add	r0, sp, #112	; 0x70
    e550:	eb0077b6 	bl	2c430 <strlcat>
    e554:	e28d0070 	add	r0, sp, #112	; 0x70
    e558:	e3a02064 	mov	r2, #100	; 0x64
    e55c:	e59f106c 	ldr	r1, [pc, #108]	; e5d0 <CommandHandler::processCommand(char const*, unsigned char const*, int)+0x23c>
    e560:	eb0077b2 	bl	2c430 <strlcat>
    e564:	e59f3048 	ldr	r3, [pc, #72]	; e5b4 <CommandHandler::processCommand(char const*, unsigned char const*, int)+0x220>
    e568:	e5934658 	ldr	r4, [r3, #1624]	; 0x658
    e56c:	e3540000 	cmp	r4, #0
    e570:	0affffb1 	beq	e43c <CommandHandler::processCommand(char const*, unsigned char const*, int)+0xa8>
    e574:	e3a03000 	mov	r3, #0
    e578:	e1a02006 	mov	r2, r6
    e57c:	e1a01007 	mov	r1, r7
    e580:	e28d0070 	add	r0, sp, #112	; 0x70
    e584:	e58d3000 	str	r3, [sp]
    e588:	e12fff34 	blx	r4
    e58c:	eaffffaa 	b	e43c <CommandHandler::processCommand(char const*, unsigned char const*, int)+0xa8>
    e590:	e1a01005 	mov	r1, r5
    e594:	e1a00004 	mov	r0, r4
    e598:	ebfffe9f 	bl	e01c <CommandHandler::handleStatusResponse(char const*)>
    e59c:	eaffffa6 	b	e43c <CommandHandler::processCommand(char const*, unsigned char const*, int)+0xa8>
    e5a0:	0002e7e8 	.word	0x0002e7e8
    e5a4:	0002e7f0 	.word	0x0002e7f0
    e5a8:	0002e814 	.word	0x0002e814
    e5ac:	0002e81c 	.word	0x0002e81c
    e5b0:	0002e824 	.word	0x0002e824
    e5b4:	00042da8 	.word	0x00042da8
    e5b8:	0002e7f8 	.word	0x0002e7f8
    e5bc:	0002e5f4 	.word	0x0002e5f4
    e5c0:	0002e6b8 	.word	0x0002e6b8
    e5c4:	0002e82c 	.word	0x0002e82c
    e5c8:	0002e838 	.word	0x0002e838
    e5cc:	0002e718 	.word	0x0002e718
    e5d0:	0002e834 	.word	0x0002e834

0000e5d4 <CommandHandler::hdlcFrameRx(unsigned char const*, int)>:
    e5d4:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    e5d8:	e24ddf9b 	sub	sp, sp, #620	; 0x26c
    e5dc:	e1a07000 	mov	r7, r0
    e5e0:	e1a04002 	mov	r4, r2
    e5e4:	e28d00d0 	add	r0, sp, #208	; 0xd0
    e5e8:	e3a020c8 	mov	r2, #200	; 0xc8
    e5ec:	e1a06001 	mov	r6, r1
    e5f0:	eb0077be 	bl	2c4f0 <strlcpy>
    e5f4:	e28d00d0 	add	r0, sp, #208	; 0xd0
    e5f8:	eb0077d1 	bl	2c544 <strlen>
    e5fc:	e28d10d0 	add	r1, sp, #208	; 0xd0
    e600:	e1a05000 	mov	r5, r0
    e604:	e28d2f67 	add	r2, sp, #412	; 0x19c
    e608:	e3a030c8 	mov	r3, #200	; 0xc8
    e60c:	e59f01f8 	ldr	r0, [pc, #504]	; e80c <CommandHandler::hdlcFrameRx(unsigned char const*, int)+0x238>
    e610:	ebfff340 	bl	b318 <jsonGetValueForKey>
    e614:	e3500000 	cmp	r0, #0
    e618:	0a000022 	beq	e6a8 <CommandHandler::hdlcFrameRx(unsigned char const*, int)+0xd4>
    e61c:	e59f11ec 	ldr	r1, [pc, #492]	; e810 <CommandHandler::hdlcFrameRx(unsigned char const*, int)+0x23c>
    e620:	e28d0f67 	add	r0, sp, #412	; 0x19c
    e624:	eb00767b 	bl	2c018 <strcasecmp>
    e628:	e3500000 	cmp	r0, #0
    e62c:	0a00001f 	beq	e6b0 <CommandHandler::hdlcFrameRx(unsigned char const*, int)+0xdc>
    e630:	e59f11dc 	ldr	r1, [pc, #476]	; e814 <CommandHandler::hdlcFrameRx(unsigned char const*, int)+0x240>
    e634:	e28d0f67 	add	r0, sp, #412	; 0x19c
    e638:	eb007676 	bl	2c018 <strcasecmp>
    e63c:	e0444005 	sub	r4, r4, r5
    e640:	e2855001 	add	r5, r5, #1
    e644:	e2444001 	sub	r4, r4, #1
    e648:	e0865005 	add	r5, r6, r5
    e64c:	e2506000 	subs	r6, r0, #0
    e650:	e1c44fc4 	bic	r4, r4, r4, asr #31
    e654:	0a000022 	beq	e6e4 <CommandHandler::hdlcFrameRx(unsigned char const*, int)+0x110>
    e658:	e59f11b8 	ldr	r1, [pc, #440]	; e818 <CommandHandler::hdlcFrameRx(unsigned char const*, int)+0x244>
    e65c:	e28d0f67 	add	r0, sp, #412	; 0x19c
    e660:	eb00766c 	bl	2c018 <strcasecmp>
    e664:	e3500000 	cmp	r0, #0
    e668:	0a000019 	beq	e6d4 <CommandHandler::hdlcFrameRx(unsigned char const*, int)+0x100>
    e66c:	e28d0f67 	add	r0, sp, #412	; 0x19c
    e670:	e59f11a4 	ldr	r1, [pc, #420]	; e81c <CommandHandler::hdlcFrameRx(unsigned char const*, int)+0x248>
    e674:	eb007667 	bl	2c018 <strcasecmp>
    e678:	e3500000 	cmp	r0, #0
    e67c:	0a000039 	beq	e768 <CommandHandler::hdlcFrameRx(unsigned char const*, int)+0x194>
    e680:	e59f3198 	ldr	r3, [pc, #408]	; e820 <CommandHandler::hdlcFrameRx(unsigned char const*, int)+0x24c>
    e684:	e5936658 	ldr	r6, [r3, #1624]	; 0x658
    e688:	e3560000 	cmp	r6, #0
    e68c:	0a000005 	beq	e6a8 <CommandHandler::hdlcFrameRx(unsigned char const*, int)+0xd4>
    e690:	e3a03000 	mov	r3, #0
    e694:	e1a02004 	mov	r2, r4
    e698:	e1a01005 	mov	r1, r5
    e69c:	e28d00d0 	add	r0, sp, #208	; 0xd0
    e6a0:	e58d3000 	str	r3, [sp]
    e6a4:	e12fff36 	blx	r6
    e6a8:	e28ddf9b 	add	sp, sp, #620	; 0x26c
    e6ac:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
    e6b0:	e59f216c 	ldr	r2, [pc, #364]	; e824 <CommandHandler::hdlcFrameRx(unsigned char const*, int)+0x250>
    e6b4:	e3a01005 	mov	r1, #5
    e6b8:	e59f0168 	ldr	r0, [pc, #360]	; e828 <CommandHandler::hdlcFrameRx(unsigned char const*, int)+0x254>
    e6bc:	ebffec3c 	bl	97b4 <LogWrite>
    e6c0:	e28d10d0 	add	r1, sp, #208	; 0xd0
    e6c4:	e1a00007 	mov	r0, r7
    e6c8:	ebfffdd2 	bl	de18 <CommandHandler::handleFileStart(char const*)>
    e6cc:	e28ddf9b 	add	sp, sp, #620	; 0x26c
    e6d0:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
    e6d4:	e28d10d0 	add	r1, sp, #208	; 0xd0
    e6d8:	e1a00007 	mov	r0, r7
    e6dc:	ebfffed2 	bl	e22c <CommandHandler::handleFileEnd(char const*)>
    e6e0:	eafffff0 	b	e6a8 <CommandHandler::hdlcFrameRx(unsigned char const*, int)+0xd4>
    e6e4:	e2877a01 	add	r7, r7, #4096	; 0x1000
    e6e8:	e59734fc 	ldr	r3, [r7, #1276]	; 0x4fc
    e6ec:	e3530000 	cmp	r3, #0
    e6f0:	0affffec 	beq	e6a8 <CommandHandler::hdlcFrameRx(unsigned char const*, int)+0xd4>
    e6f4:	e28d10d0 	add	r1, sp, #208	; 0xd0
    e6f8:	e28d206c 	add	r2, sp, #108	; 0x6c
    e6fc:	e3a0300a 	mov	r3, #10
    e700:	e59f0124 	ldr	r0, [pc, #292]	; e82c <CommandHandler::hdlcFrameRx(unsigned char const*, int)+0x258>
    e704:	ebfff303 	bl	b318 <jsonGetValueForKey>
    e708:	e3500000 	cmp	r0, #0
    e70c:	0affffe5 	beq	e6a8 <CommandHandler::hdlcFrameRx(unsigned char const*, int)+0xd4>
    e710:	e1a01006 	mov	r1, r6
    e714:	e28d006c 	add	r0, sp, #108	; 0x6c
    e718:	e3a0200a 	mov	r2, #10
    e71c:	eb007ac9 	bl	2d248 <strtol>
    e720:	e3500000 	cmp	r0, #0
    e724:	baffffdf 	blt	e6a8 <CommandHandler::hdlcFrameRx(unsigned char const*, int)+0xd4>
    e728:	e5973500 	ldr	r3, [r7, #1280]	; 0x500
    e72c:	e0802004 	add	r2, r0, r4
    e730:	e1520003 	cmp	r2, r3
    e734:	caffffdb 	bgt	e6a8 <CommandHandler::hdlcFrameRx(unsigned char const*, int)+0xd4>
    e738:	e59734fc 	ldr	r3, [r7, #1276]	; 0x4fc
    e73c:	e1a02004 	mov	r2, r4
    e740:	e0830000 	add	r0, r3, r0
    e744:	e1a01005 	mov	r1, r5
    e748:	eb0075a9 	bl	2bdf4 <memcpy>
    e74c:	e5972504 	ldr	r2, [r7, #1284]	; 0x504
    e750:	e5973508 	ldr	r3, [r7, #1288]	; 0x508
    e754:	e0824004 	add	r4, r2, r4
    e758:	e2833001 	add	r3, r3, #1
    e75c:	e5874504 	str	r4, [r7, #1284]	; 0x504
    e760:	e5873508 	str	r3, [r7, #1288]	; 0x508
    e764:	eaffffcf 	b	e6a8 <CommandHandler::hdlcFrameRx(unsigned char const*, int)+0xd4>
    e768:	e28d2008 	add	r2, sp, #8
    e76c:	e3a03064 	mov	r3, #100	; 0x64
    e770:	e28d10d0 	add	r1, sp, #208	; 0xd0
    e774:	e59f00b4 	ldr	r0, [pc, #180]	; e830 <CommandHandler::hdlcFrameRx(unsigned char const*, int)+0x25c>
    e778:	ebfff2e6 	bl	b318 <jsonGetValueForKey>
    e77c:	e3500000 	cmp	r0, #0
    e780:	1a000006 	bne	e7a0 <CommandHandler::hdlcFrameRx(unsigned char const*, int)+0x1cc>
    e784:	e3a03064 	mov	r3, #100	; 0x64
    e788:	e28d2008 	add	r2, sp, #8
    e78c:	e28d10d0 	add	r1, sp, #208	; 0xd0
    e790:	e59f009c 	ldr	r0, [pc, #156]	; e834 <CommandHandler::hdlcFrameRx(unsigned char const*, int)+0x260>
    e794:	ebfff2df 	bl	b318 <jsonGetValueForKey>
    e798:	e3500000 	cmp	r0, #0
    e79c:	0a000016 	beq	e7fc <CommandHandler::hdlcFrameRx(unsigned char const*, int)+0x228>
    e7a0:	e3a02064 	mov	r2, #100	; 0x64
    e7a4:	e59f108c 	ldr	r1, [pc, #140]	; e838 <CommandHandler::hdlcFrameRx(unsigned char const*, int)+0x264>
    e7a8:	e28d006c 	add	r0, sp, #108	; 0x6c
    e7ac:	eb00774f 	bl	2c4f0 <strlcpy>
    e7b0:	e28d1008 	add	r1, sp, #8
    e7b4:	e3a02064 	mov	r2, #100	; 0x64
    e7b8:	e28d006c 	add	r0, sp, #108	; 0x6c
    e7bc:	eb00771b 	bl	2c430 <strlcat>
    e7c0:	e28d006c 	add	r0, sp, #108	; 0x6c
    e7c4:	e3a02064 	mov	r2, #100	; 0x64
    e7c8:	e59f106c 	ldr	r1, [pc, #108]	; e83c <CommandHandler::hdlcFrameRx(unsigned char const*, int)+0x268>
    e7cc:	eb007717 	bl	2c430 <strlcat>
    e7d0:	e59f3048 	ldr	r3, [pc, #72]	; e820 <CommandHandler::hdlcFrameRx(unsigned char const*, int)+0x24c>
    e7d4:	e5936658 	ldr	r6, [r3, #1624]	; 0x658
    e7d8:	e3560000 	cmp	r6, #0
    e7dc:	0affffb1 	beq	e6a8 <CommandHandler::hdlcFrameRx(unsigned char const*, int)+0xd4>
    e7e0:	e3a03000 	mov	r3, #0
    e7e4:	e1a02004 	mov	r2, r4
    e7e8:	e1a01005 	mov	r1, r5
    e7ec:	e28d006c 	add	r0, sp, #108	; 0x6c
    e7f0:	e58d3000 	str	r3, [sp]
    e7f4:	e12fff36 	blx	r6
    e7f8:	eaffffaa 	b	e6a8 <CommandHandler::hdlcFrameRx(unsigned char const*, int)+0xd4>
    e7fc:	e28d10d0 	add	r1, sp, #208	; 0xd0
    e800:	e1a00007 	mov	r0, r7
    e804:	ebfffe04 	bl	e01c <CommandHandler::handleStatusResponse(char const*)>
    e808:	eaffffa6 	b	e6a8 <CommandHandler::hdlcFrameRx(unsigned char const*, int)+0xd4>
    e80c:	0002e7e8 	.word	0x0002e7e8
    e810:	0002e7f0 	.word	0x0002e7f0
    e814:	0002e814 	.word	0x0002e814
    e818:	0002e81c 	.word	0x0002e81c
    e81c:	0002e824 	.word	0x0002e824
    e820:	00042da8 	.word	0x00042da8
    e824:	0002e7f8 	.word	0x0002e7f8
    e828:	0002e5f4 	.word	0x0002e5f4
    e82c:	0002e6b8 	.word	0x0002e6b8
    e830:	0002e82c 	.word	0x0002e82c
    e834:	0002e838 	.word	0x0002e838
    e838:	0002e718 	.word	0x0002e718
    e83c:	0002e834 	.word	0x0002e834

0000e840 <CommandHandler::static_hdlcFrameRx(unsigned char const*, int)>:
    e840:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    e844:	e59f6234 	ldr	r6, [pc, #564]	; ea80 <CommandHandler::static_hdlcFrameRx(unsigned char const*, int)+0x240>
    e848:	e24ddf9a 	sub	sp, sp, #616	; 0x268
    e84c:	e5965000 	ldr	r5, [r6]
    e850:	e3550000 	cmp	r5, #0
    e854:	0a00000f 	beq	e898 <CommandHandler::static_hdlcFrameRx(unsigned char const*, int)+0x58>
    e858:	e1a07000 	mov	r7, r0
    e85c:	e3a020c8 	mov	r2, #200	; 0xc8
    e860:	e1a04001 	mov	r4, r1
    e864:	e28d00d0 	add	r0, sp, #208	; 0xd0
    e868:	e1a01007 	mov	r1, r7
    e86c:	eb00771f 	bl	2c4f0 <strlcpy>
    e870:	e28d00d0 	add	r0, sp, #208	; 0xd0
    e874:	eb007732 	bl	2c544 <strlen>
    e878:	e28d10d0 	add	r1, sp, #208	; 0xd0
    e87c:	e1a08000 	mov	r8, r0
    e880:	e28d2f67 	add	r2, sp, #412	; 0x19c
    e884:	e3a030c8 	mov	r3, #200	; 0xc8
    e888:	e59f01f4 	ldr	r0, [pc, #500]	; ea84 <CommandHandler::static_hdlcFrameRx(unsigned char const*, int)+0x244>
    e88c:	ebfff2a1 	bl	b318 <jsonGetValueForKey>
    e890:	e3500000 	cmp	r0, #0
    e894:	1a000001 	bne	e8a0 <CommandHandler::static_hdlcFrameRx(unsigned char const*, int)+0x60>
    e898:	e28ddf9a 	add	sp, sp, #616	; 0x268
    e89c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    e8a0:	e59f11e0 	ldr	r1, [pc, #480]	; ea88 <CommandHandler::static_hdlcFrameRx(unsigned char const*, int)+0x248>
    e8a4:	e28d0f67 	add	r0, sp, #412	; 0x19c
    e8a8:	eb0075da 	bl	2c018 <strcasecmp>
    e8ac:	e3500000 	cmp	r0, #0
    e8b0:	0a00001d 	beq	e92c <CommandHandler::static_hdlcFrameRx(unsigned char const*, int)+0xec>
    e8b4:	e59f11d0 	ldr	r1, [pc, #464]	; ea8c <CommandHandler::static_hdlcFrameRx(unsigned char const*, int)+0x24c>
    e8b8:	e28d0f67 	add	r0, sp, #412	; 0x19c
    e8bc:	eb0075d5 	bl	2c018 <strcasecmp>
    e8c0:	e0444008 	sub	r4, r4, r8
    e8c4:	e2888001 	add	r8, r8, #1
    e8c8:	e2444001 	sub	r4, r4, #1
    e8cc:	e0878008 	add	r8, r7, r8
    e8d0:	e2507000 	subs	r7, r0, #0
    e8d4:	e1c44fc4 	bic	r4, r4, r4, asr #31
    e8d8:	0a00001b 	beq	e94c <CommandHandler::static_hdlcFrameRx(unsigned char const*, int)+0x10c>
    e8dc:	e59f11ac 	ldr	r1, [pc, #428]	; ea90 <CommandHandler::static_hdlcFrameRx(unsigned char const*, int)+0x250>
    e8e0:	e28d0f67 	add	r0, sp, #412	; 0x19c
    e8e4:	eb0075cb 	bl	2c018 <strcasecmp>
    e8e8:	e3500000 	cmp	r0, #0
    e8ec:	0a000037 	beq	e9d0 <CommandHandler::static_hdlcFrameRx(unsigned char const*, int)+0x190>
    e8f0:	e28d0f67 	add	r0, sp, #412	; 0x19c
    e8f4:	e59f1198 	ldr	r1, [pc, #408]	; ea94 <CommandHandler::static_hdlcFrameRx(unsigned char const*, int)+0x254>
    e8f8:	eb0075c6 	bl	2c018 <strcasecmp>
    e8fc:	e3500000 	cmp	r0, #0
    e900:	0a000036 	beq	e9e0 <CommandHandler::static_hdlcFrameRx(unsigned char const*, int)+0x1a0>
    e904:	e5965658 	ldr	r5, [r6, #1624]	; 0x658
    e908:	e3550000 	cmp	r5, #0
    e90c:	0affffe1 	beq	e898 <CommandHandler::static_hdlcFrameRx(unsigned char const*, int)+0x58>
    e910:	e3a03000 	mov	r3, #0
    e914:	e1a02004 	mov	r2, r4
    e918:	e1a01008 	mov	r1, r8
    e91c:	e28d00d0 	add	r0, sp, #208	; 0xd0
    e920:	e58d3000 	str	r3, [sp]
    e924:	e12fff35 	blx	r5
    e928:	eaffffda 	b	e898 <CommandHandler::static_hdlcFrameRx(unsigned char const*, int)+0x58>
    e92c:	e59f2164 	ldr	r2, [pc, #356]	; ea98 <CommandHandler::static_hdlcFrameRx(unsigned char const*, int)+0x258>
    e930:	e3a01005 	mov	r1, #5
    e934:	e59f0160 	ldr	r0, [pc, #352]	; ea9c <CommandHandler::static_hdlcFrameRx(unsigned char const*, int)+0x25c>
    e938:	ebffeb9d 	bl	97b4 <LogWrite>
    e93c:	e28d10d0 	add	r1, sp, #208	; 0xd0
    e940:	e1a00005 	mov	r0, r5
    e944:	ebfffd33 	bl	de18 <CommandHandler::handleFileStart(char const*)>
    e948:	eaffffd2 	b	e898 <CommandHandler::static_hdlcFrameRx(unsigned char const*, int)+0x58>
    e94c:	e2855a01 	add	r5, r5, #4096	; 0x1000
    e950:	e59534fc 	ldr	r3, [r5, #1276]	; 0x4fc
    e954:	e3530000 	cmp	r3, #0
    e958:	0affffce 	beq	e898 <CommandHandler::static_hdlcFrameRx(unsigned char const*, int)+0x58>
    e95c:	e28d10d0 	add	r1, sp, #208	; 0xd0
    e960:	e28d206c 	add	r2, sp, #108	; 0x6c
    e964:	e3a0300a 	mov	r3, #10
    e968:	e59f0130 	ldr	r0, [pc, #304]	; eaa0 <CommandHandler::static_hdlcFrameRx(unsigned char const*, int)+0x260>
    e96c:	ebfff269 	bl	b318 <jsonGetValueForKey>
    e970:	e3500000 	cmp	r0, #0
    e974:	0affffc7 	beq	e898 <CommandHandler::static_hdlcFrameRx(unsigned char const*, int)+0x58>
    e978:	e1a01007 	mov	r1, r7
    e97c:	e28d006c 	add	r0, sp, #108	; 0x6c
    e980:	e3a0200a 	mov	r2, #10
    e984:	eb007a2f 	bl	2d248 <strtol>
    e988:	e3500000 	cmp	r0, #0
    e98c:	baffffc1 	blt	e898 <CommandHandler::static_hdlcFrameRx(unsigned char const*, int)+0x58>
    e990:	e5953500 	ldr	r3, [r5, #1280]	; 0x500
    e994:	e0802004 	add	r2, r0, r4
    e998:	e1520003 	cmp	r2, r3
    e99c:	caffffbd 	bgt	e898 <CommandHandler::static_hdlcFrameRx(unsigned char const*, int)+0x58>
    e9a0:	e59534fc 	ldr	r3, [r5, #1276]	; 0x4fc
    e9a4:	e1a02004 	mov	r2, r4
    e9a8:	e0830000 	add	r0, r3, r0
    e9ac:	e1a01008 	mov	r1, r8
    e9b0:	eb00750f 	bl	2bdf4 <memcpy>
    e9b4:	e5952504 	ldr	r2, [r5, #1284]	; 0x504
    e9b8:	e5953508 	ldr	r3, [r5, #1288]	; 0x508
    e9bc:	e0824004 	add	r4, r2, r4
    e9c0:	e2833001 	add	r3, r3, #1
    e9c4:	e5854504 	str	r4, [r5, #1284]	; 0x504
    e9c8:	e5853508 	str	r3, [r5, #1288]	; 0x508
    e9cc:	eaffffb1 	b	e898 <CommandHandler::static_hdlcFrameRx(unsigned char const*, int)+0x58>
    e9d0:	e28d10d0 	add	r1, sp, #208	; 0xd0
    e9d4:	e1a00005 	mov	r0, r5
    e9d8:	ebfffe13 	bl	e22c <CommandHandler::handleFileEnd(char const*)>
    e9dc:	eaffffad 	b	e898 <CommandHandler::static_hdlcFrameRx(unsigned char const*, int)+0x58>
    e9e0:	e28d2008 	add	r2, sp, #8
    e9e4:	e3a03064 	mov	r3, #100	; 0x64
    e9e8:	e28d10d0 	add	r1, sp, #208	; 0xd0
    e9ec:	e59f00b0 	ldr	r0, [pc, #176]	; eaa4 <CommandHandler::static_hdlcFrameRx(unsigned char const*, int)+0x264>
    e9f0:	ebfff248 	bl	b318 <jsonGetValueForKey>
    e9f4:	e3500000 	cmp	r0, #0
    e9f8:	1a000006 	bne	ea18 <CommandHandler::static_hdlcFrameRx(unsigned char const*, int)+0x1d8>
    e9fc:	e3a03064 	mov	r3, #100	; 0x64
    ea00:	e28d2008 	add	r2, sp, #8
    ea04:	e28d10d0 	add	r1, sp, #208	; 0xd0
    ea08:	e59f0098 	ldr	r0, [pc, #152]	; eaa8 <CommandHandler::static_hdlcFrameRx(unsigned char const*, int)+0x268>
    ea0c:	ebfff241 	bl	b318 <jsonGetValueForKey>
    ea10:	e3500000 	cmp	r0, #0
    ea14:	0a000015 	beq	ea70 <CommandHandler::static_hdlcFrameRx(unsigned char const*, int)+0x230>
    ea18:	e3a02064 	mov	r2, #100	; 0x64
    ea1c:	e59f1088 	ldr	r1, [pc, #136]	; eaac <CommandHandler::static_hdlcFrameRx(unsigned char const*, int)+0x26c>
    ea20:	e28d006c 	add	r0, sp, #108	; 0x6c
    ea24:	eb0076b1 	bl	2c4f0 <strlcpy>
    ea28:	e28d1008 	add	r1, sp, #8
    ea2c:	e3a02064 	mov	r2, #100	; 0x64
    ea30:	e28d006c 	add	r0, sp, #108	; 0x6c
    ea34:	eb00767d 	bl	2c430 <strlcat>
    ea38:	e28d006c 	add	r0, sp, #108	; 0x6c
    ea3c:	e3a02064 	mov	r2, #100	; 0x64
    ea40:	e59f1068 	ldr	r1, [pc, #104]	; eab0 <CommandHandler::static_hdlcFrameRx(unsigned char const*, int)+0x270>
    ea44:	eb007679 	bl	2c430 <strlcat>
    ea48:	e5965658 	ldr	r5, [r6, #1624]	; 0x658
    ea4c:	e3550000 	cmp	r5, #0
    ea50:	0affff90 	beq	e898 <CommandHandler::static_hdlcFrameRx(unsigned char const*, int)+0x58>
    ea54:	e3a03000 	mov	r3, #0
    ea58:	e1a02004 	mov	r2, r4
    ea5c:	e1a01008 	mov	r1, r8
    ea60:	e28d006c 	add	r0, sp, #108	; 0x6c
    ea64:	e58d3000 	str	r3, [sp]
    ea68:	e12fff35 	blx	r5
    ea6c:	eaffff89 	b	e898 <CommandHandler::static_hdlcFrameRx(unsigned char const*, int)+0x58>
    ea70:	e28d10d0 	add	r1, sp, #208	; 0xd0
    ea74:	e1a00005 	mov	r0, r5
    ea78:	ebfffd67 	bl	e01c <CommandHandler::handleStatusResponse(char const*)>
    ea7c:	eaffff85 	b	e898 <CommandHandler::static_hdlcFrameRx(unsigned char const*, int)+0x58>
    ea80:	00042da8 	.word	0x00042da8
    ea84:	0002e7e8 	.word	0x0002e7e8
    ea88:	0002e7f0 	.word	0x0002e7f0
    ea8c:	0002e814 	.word	0x0002e814
    ea90:	0002e81c 	.word	0x0002e81c
    ea94:	0002e824 	.word	0x0002e824
    ea98:	0002e7f8 	.word	0x0002e7f8
    ea9c:	0002e5f4 	.word	0x0002e5f4
    eaa0:	0002e6b8 	.word	0x0002e6b8
    eaa4:	0002e82c 	.word	0x0002e82c
    eaa8:	0002e838 	.word	0x0002e838
    eaac:	0002e718 	.word	0x0002e718
    eab0:	0002e834 	.word	0x0002e834

0000eab4 <CommandHandler::sendAPIReq(char const*)>:
    eab4:	e92d4070 	push	{r4, r5, r6, lr}
    eab8:	e59f5064 	ldr	r5, [pc, #100]	; eb24 <CommandHandler::sendAPIReq(char const*)+0x70>
    eabc:	e3a02064 	mov	r2, #100	; 0x64
    eac0:	e2854e65 	add	r4, r5, #1616	; 0x650
    eac4:	e284400c 	add	r4, r4, #12
    eac8:	e59f1058 	ldr	r1, [pc, #88]	; eb28 <CommandHandler::sendAPIReq(char const*)+0x74>
    eacc:	e1a06000 	mov	r6, r0
    ead0:	e1a00004 	mov	r0, r4
    ead4:	eb007685 	bl	2c4f0 <strlcpy>
    ead8:	e1a00004 	mov	r0, r4
    eadc:	eb007698 	bl	2c544 <strlen>
    eae0:	e1a01006 	mov	r1, r6
    eae4:	e3a02064 	mov	r2, #100	; 0x64
    eae8:	e0840000 	add	r0, r4, r0
    eaec:	eb00767f 	bl	2c4f0 <strlcpy>
    eaf0:	e1a00004 	mov	r0, r4
    eaf4:	eb007692 	bl	2c544 <strlen>
    eaf8:	e3a02064 	mov	r2, #100	; 0x64
    eafc:	e0840000 	add	r0, r4, r0
    eb00:	e59f1024 	ldr	r1, [pc, #36]	; eb2c <CommandHandler::sendAPIReq(char const*)+0x78>
    eb04:	eb007679 	bl	2c4f0 <strlcpy>
    eb08:	e5950000 	ldr	r0, [r5]
    eb0c:	e3500000 	cmp	r0, #0
    eb10:	08bd8070 	popeq	{r4, r5, r6, pc}
    eb14:	e1a02004 	mov	r2, r4
    eb18:	e8bd4070 	pop	{r4, r5, r6, lr}
    eb1c:	e59f100c 	ldr	r1, [pc, #12]	; eb30 <CommandHandler::sendAPIReq(char const*)+0x7c>
    eb20:	eafffd93 	b	e174 <CommandHandler::sendWithJSON(char const*, char const*)>
    eb24:	00042da8 	.word	0x00042da8
    eb28:	0002e840 	.word	0x0002e840
    eb2c:	0002e8a0 	.word	0x0002e8a0
    eb30:	0002e848 	.word	0x0002e848

0000eb34 <CommandHandler::sendRegularStatusUpdate()>:
    eb34:	e2803a01 	add	r3, r0, #4096	; 0x1000
    eb38:	e59324fc 	ldr	r2, [r3, #1276]	; 0x4fc
    eb3c:	e3520000 	cmp	r2, #0
    eb40:	112fff1e 	bxne	lr
    eb44:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    eb48:	e59f60a0 	ldr	r6, [pc, #160]	; ebf0 <CommandHandler::sendRegularStatusUpdate()+0xbc>
    eb4c:	e24ddfff 	sub	sp, sp, #1020	; 0x3fc
    eb50:	e5967658 	ldr	r7, [r6, #1624]	; 0x658
    eb54:	e3570000 	cmp	r7, #0
    eb58:	0a000022 	beq	ebe8 <CommandHandler::sendRegularStatusUpdate()+0xb4>
    eb5c:	e3a03ffa 	mov	r3, #1000	; 0x3e8
    eb60:	e1a04000 	mov	r4, r0
    eb64:	e1a01002 	mov	r1, r2
    eb68:	e58d3000 	str	r3, [sp]
    eb6c:	e59f0080 	ldr	r0, [pc, #128]	; ebf4 <CommandHandler::sendRegularStatusUpdate()+0xc0>
    eb70:	e28d300c 	add	r3, sp, #12
    eb74:	e2865e65 	add	r5, r6, #1616	; 0x650
    eb78:	e12fff37 	blx	r7
    eb7c:	e285500c 	add	r5, r5, #12
    eb80:	e28d200c 	add	r2, sp, #12
    eb84:	e1a00004 	mov	r0, r4
    eb88:	e59f1068 	ldr	r1, [pc, #104]	; ebf8 <CommandHandler::sendRegularStatusUpdate()+0xc4>
    eb8c:	ebfffd78 	bl	e174 <CommandHandler::sendWithJSON(char const*, char const*)>
    eb90:	e3a02064 	mov	r2, #100	; 0x64
    eb94:	e59f1060 	ldr	r1, [pc, #96]	; ebfc <CommandHandler::sendRegularStatusUpdate()+0xc8>
    eb98:	e1a00005 	mov	r0, r5
    eb9c:	eb007653 	bl	2c4f0 <strlcpy>
    eba0:	e1a00005 	mov	r0, r5
    eba4:	eb007666 	bl	2c544 <strlen>
    eba8:	e3a02064 	mov	r2, #100	; 0x64
    ebac:	e59f104c 	ldr	r1, [pc, #76]	; ec00 <CommandHandler::sendRegularStatusUpdate()+0xcc>
    ebb0:	e0850000 	add	r0, r5, r0
    ebb4:	eb00764d 	bl	2c4f0 <strlcpy>
    ebb8:	e1a00005 	mov	r0, r5
    ebbc:	eb007660 	bl	2c544 <strlen>
    ebc0:	e3a02064 	mov	r2, #100	; 0x64
    ebc4:	e0850000 	add	r0, r5, r0
    ebc8:	e59f1034 	ldr	r1, [pc, #52]	; ec04 <CommandHandler::sendRegularStatusUpdate()+0xd0>
    ebcc:	eb007647 	bl	2c4f0 <strlcpy>
    ebd0:	e5960000 	ldr	r0, [r6]
    ebd4:	e3500000 	cmp	r0, #0
    ebd8:	0a000002 	beq	ebe8 <CommandHandler::sendRegularStatusUpdate()+0xb4>
    ebdc:	e1a02005 	mov	r2, r5
    ebe0:	e59f1020 	ldr	r1, [pc, #32]	; ec08 <CommandHandler::sendRegularStatusUpdate()+0xd4>
    ebe4:	ebfffd62 	bl	e174 <CommandHandler::sendWithJSON(char const*, char const*)>
    ebe8:	e28ddfff 	add	sp, sp, #1020	; 0x3fc
    ebec:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
    ebf0:	00042da8 	.word	0x00042da8
    ebf4:	0002e850 	.word	0x0002e850
    ebf8:	0002e868 	.word	0x0002e868
    ebfc:	0002e840 	.word	0x0002e840
    ec00:	0002e878 	.word	0x0002e878
    ec04:	0002e8a0 	.word	0x0002e8a0
    ec08:	0002e848 	.word	0x0002e848

0000ec0c <CommandHandler::getStatusResponse(bool*, char**, char**, char**, char**)>:
    ec0c:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    ec10:	e280ca01 	add	ip, r0, #4096	; 0x1000
    ec14:	e5dce610 	ldrb	lr, [ip, #1552]	; 0x610
    ec18:	e280cc15 	add	ip, r0, #5376	; 0x1500
    ec1c:	e5c1e000 	strb	lr, [r1]
    ec20:	e28ce00c 	add	lr, ip, #12
    ec24:	e582e000 	str	lr, [r2]
    ec28:	e2801d55 	add	r1, r0, #5440	; 0x1540
    ec2c:	e59de004 	ldr	lr, [sp, #4]
    ec30:	e2800d56 	add	r0, r0, #5504	; 0x1580
    ec34:	e59d2008 	ldr	r2, [sp, #8]
    ec38:	e28cc02a 	add	ip, ip, #42	; 0x2a
    ec3c:	e2811008 	add	r1, r1, #8
    ec40:	e280002c 	add	r0, r0, #44	; 0x2c
    ec44:	e583c000 	str	ip, [r3]
    ec48:	e58e1000 	str	r1, [lr]
    ec4c:	e5820000 	str	r0, [r2]
    ec50:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

0000ec54 <CommandHandler::sendRemoteDebugProtocolMsg(char const*, char const*)>:
    ec54:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    ec58:	e1a07002 	mov	r7, r2
    ec5c:	e1a06001 	mov	r6, r1
    ec60:	e1a05000 	mov	r5, r0
    ec64:	e59f4060 	ldr	r4, [pc, #96]	; eccc <CommandHandler::sendRemoteDebugProtocolMsg(char const*, char const*)+0x78>
    ec68:	e3a02e7d 	mov	r2, #2000	; 0x7d0
    ec6c:	e1a00004 	mov	r0, r4
    ec70:	e59f1058 	ldr	r1, [pc, #88]	; ecd0 <CommandHandler::sendRemoteDebugProtocolMsg(char const*, char const*)+0x7c>
    ec74:	eb00761d 	bl	2c4f0 <strlcpy>
    ec78:	e1a01007 	mov	r1, r7
    ec7c:	e1a00004 	mov	r0, r4
    ec80:	e3a02e7d 	mov	r2, #2000	; 0x7d0
    ec84:	eb0075e9 	bl	2c430 <strlcat>
    ec88:	e1a00004 	mov	r0, r4
    ec8c:	e3a02e7d 	mov	r2, #2000	; 0x7d0
    ec90:	e59f103c 	ldr	r1, [pc, #60]	; ecd4 <CommandHandler::sendRemoteDebugProtocolMsg(char const*, char const*)+0x80>
    ec94:	eb0075e5 	bl	2c430 <strlcat>
    ec98:	e1a01006 	mov	r1, r6
    ec9c:	e1a00004 	mov	r0, r4
    eca0:	e3a02e7d 	mov	r2, #2000	; 0x7d0
    eca4:	eb0075e1 	bl	2c430 <strlcat>
    eca8:	e1a00004 	mov	r0, r4
    ecac:	e3a02e7d 	mov	r2, #2000	; 0x7d0
    ecb0:	e59f1020 	ldr	r1, [pc, #32]	; ecd8 <CommandHandler::sendRemoteDebugProtocolMsg(char const*, char const*)+0x84>
    ecb4:	eb0075dd 	bl	2c430 <strlcat>
    ecb8:	e1a02004 	mov	r2, r4
    ecbc:	e1a00005 	mov	r0, r5
    ecc0:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    ecc4:	e59f1010 	ldr	r1, [pc, #16]	; ecdc <CommandHandler::sendRemoteDebugProtocolMsg(char const*, char const*)+0x88>
    ecc8:	eafffd29 	b	e174 <CommandHandler::sendWithJSON(char const*, char const*)>
    eccc:	0004346c 	.word	0x0004346c
    ecd0:	0002e888 	.word	0x0002e888
    ecd4:	0002e894 	.word	0x0002e894
    ecd8:	0002e8a0 	.word	0x0002e8a0
    ecdc:	0002e8a4 	.word	0x0002e8a4

0000ece0 <CommandHandler::logDebugMessage(char const*)>:
    ece0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    ece4:	e59f4094 	ldr	r4, [pc, #148]	; ed80 <CommandHandler::logDebugMessage(char const*)+0xa0>
    ece8:	e59f5094 	ldr	r5, [pc, #148]	; ed84 <CommandHandler::logDebugMessage(char const*)+0xa4>
    ecec:	e1a06000 	mov	r6, r0
    ecf0:	e1a02005 	mov	r2, r5
    ecf4:	e1a07001 	mov	r7, r1
    ecf8:	e1a00004 	mov	r0, r4
    ecfc:	e59f1084 	ldr	r1, [pc, #132]	; ed88 <CommandHandler::logDebugMessage(char const*)+0xa8>
    ed00:	eb0075fa 	bl	2c4f0 <strlcpy>
    ed04:	e1a00004 	mov	r0, r4
    ed08:	eb00760d 	bl	2c544 <strlen>
    ed0c:	e1a02005 	mov	r2, r5
    ed10:	e59f1074 	ldr	r1, [pc, #116]	; ed8c <CommandHandler::logDebugMessage(char const*)+0xac>
    ed14:	e0840000 	add	r0, r4, r0
    ed18:	eb0075f4 	bl	2c4f0 <strlcpy>
    ed1c:	e1a00004 	mov	r0, r4
    ed20:	eb007607 	bl	2c544 <strlen>
    ed24:	e1a02005 	mov	r2, r5
    ed28:	e59f1060 	ldr	r1, [pc, #96]	; ed90 <CommandHandler::logDebugMessage(char const*)+0xb0>
    ed2c:	e0840000 	add	r0, r4, r0
    ed30:	eb0075ee 	bl	2c4f0 <strlcpy>
    ed34:	e1a00004 	mov	r0, r4
    ed38:	eb007601 	bl	2c544 <strlen>
    ed3c:	e1a02005 	mov	r2, r5
    ed40:	e1a01007 	mov	r1, r7
    ed44:	e0840000 	add	r0, r4, r0
    ed48:	eb0075e8 	bl	2c4f0 <strlcpy>
    ed4c:	e1a00004 	mov	r0, r4
    ed50:	eb0075fb 	bl	2c544 <strlen>
    ed54:	e1a02005 	mov	r2, r5
    ed58:	e59f1034 	ldr	r1, [pc, #52]	; ed94 <CommandHandler::logDebugMessage(char const*)+0xb4>
    ed5c:	e0840000 	add	r0, r4, r0
    ed60:	eb0075e2 	bl	2c4f0 <strlcpy>
    ed64:	e1a00004 	mov	r0, r4
    ed68:	eb0075f5 	bl	2c544 <strlen>
    ed6c:	e1a01004 	mov	r1, r4
    ed70:	e2802001 	add	r2, r0, #1
    ed74:	e1a00006 	mov	r0, r6
    ed78:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    ed7c:	ea0001df 	b	f500 <MiniHDLC::sendFrame(unsigned char const*, int)>
    ed80:	00042e18 	.word	0x00042e18
    ed84:	000005dc 	.word	0x000005dc
    ed88:	0002e718 	.word	0x0002e718
    ed8c:	0002e8a8 	.word	0x0002e8a8
    ed90:	0002e728 	.word	0x0002e728
    ed94:	0002e714 	.word	0x0002e714

0000ed98 <CommandHandler::service()>:
    ed98:	e12fff1e 	bx	lr

0000ed9c <MiniHDLC::MiniHDLC(void (*)(unsigned char), void (*)(unsigned char const*, int), bool, bool)>:
    ed9c:	e92d4030 	push	{r4, r5, lr}
    eda0:	e3a0e000 	mov	lr, #0
    eda4:	e3e05000 	mvn	r5, #0
    eda8:	e59f402c 	ldr	r4, [pc, #44]	; eddc <MiniHDLC::MiniHDLC(void (*)(unsigned char), void (*)(unsigned char const*, int), bool, bool)+0x40>
    edac:	e1c050b8 	strh	r5, [r0, #8]
    edb0:	e8840006 	stm	r4, {r1, r2}
    edb4:	e5dd200c 	ldrb	r2, [sp, #12]
    edb8:	e5c03001 	strb	r3, [r0, #1]
    edbc:	e5c02000 	strb	r2, [r0]
    edc0:	e580e004 	str	lr, [r0, #4]
    edc4:	e5c0e00a 	strb	lr, [r0, #10]
    edc8:	e5c0e00b 	strb	lr, [r0, #11]
    edcc:	e5c0e00c 	strb	lr, [r0, #12]
    edd0:	e580e010 	str	lr, [r0, #16]
    edd4:	e580e014 	str	lr, [r0, #20]
    edd8:	e8bd8030 	pop	{r4, r5, pc}
    eddc:	00043c40 	.word	0x00043c40

0000ede0 <MiniHDLC::handleBit(unsigned char)>:
    ede0:	e3510000 	cmp	r1, #0
    ede4:	13e0107f 	mvnne	r1, #127	; 0x7f
    ede8:	e92d4010 	push	{r4, lr}
    edec:	e5d0300b 	ldrb	r3, [r0, #11]
    edf0:	e1a04000 	mov	r4, r0
    edf4:	e1a030a3 	lsr	r3, r3, #1
    edf8:	11833001 	orrne	r3, r3, r1
    edfc:	e6ef3073 	uxtb	r3, r3
    ee00:	e353007e 	cmp	r3, #126	; 0x7e
    ee04:	e5c0300b 	strb	r3, [r0, #11]
    ee08:	0a00002d 	beq	eec4 <MiniHDLC::handleBit(unsigned char)+0xe4>
    ee0c:	e20330fc 	and	r3, r3, #252	; 0xfc
    ee10:	e353007c 	cmp	r3, #124	; 0x7c
    ee14:	08bd8010 	popeq	{r4, pc}
    ee18:	e5d0200c 	ldrb	r2, [r0, #12]
    ee1c:	e5903010 	ldr	r3, [r0, #16]
    ee20:	e18110a2 	orr	r1, r1, r2, lsr #1
    ee24:	e2833001 	add	r3, r3, #1
    ee28:	e6ef1071 	uxtb	r1, r1
    ee2c:	e3530008 	cmp	r3, #8
    ee30:	e5c0100c 	strb	r1, [r0, #12]
    ee34:	e5803010 	str	r3, [r0, #16]
    ee38:	18bd8010 	popne	{r4, pc}
    ee3c:	e351007e 	cmp	r1, #126	; 0x7e
    ee40:	0a000045 	beq	ef5c <MiniHDLC::handleBit(unsigned char)+0x17c>
    ee44:	e5d0300a 	ldrb	r3, [r0, #10]
    ee48:	e3530000 	cmp	r3, #0
    ee4c:	1a000035 	bne	ef28 <MiniHDLC::handleBit(unsigned char)+0x148>
    ee50:	e351007d 	cmp	r1, #125	; 0x7d
    ee54:	03a03001 	moveq	r3, #1
    ee58:	05c0300a 	strbeq	r3, [r0, #10]
    ee5c:	0a000014 	beq	eeb4 <MiniHDLC::handleBit(unsigned char)+0xd4>
    ee60:	e5943004 	ldr	r3, [r4, #4]
    ee64:	e0842003 	add	r2, r4, r3
    ee68:	e3530001 	cmp	r3, #1
    ee6c:	e5c21018 	strb	r1, [r2, #24]
    ee70:	da000007 	ble	ee94 <MiniHDLC::handleBit(unsigned char)+0xb4>
    ee74:	e1d410b8 	ldrh	r1, [r4, #8]
    ee78:	e5d22016 	ldrb	r2, [r2, #22]
    ee7c:	e59f0158 	ldr	r0, [pc, #344]	; efdc <MiniHDLC::handleBit(unsigned char)+0x1fc>
    ee80:	e0222421 	eor	r2, r2, r1, lsr #8
    ee84:	e1a02082 	lsl	r2, r2, #1
    ee88:	e19020b2 	ldrh	r2, [r0, r2]
    ee8c:	e0222401 	eor	r2, r2, r1, lsl #8
    ee90:	e1c420b8 	strh	r2, [r4, #8]
    ee94:	e59f2144 	ldr	r2, [pc, #324]	; efe0 <MiniHDLC::handleBit(unsigned char)+0x200>
    ee98:	e2833001 	add	r3, r3, #1
    ee9c:	e1530002 	cmp	r3, r2
    eea0:	03a02000 	moveq	r2, #0
    eea4:	03e03000 	mvneq	r3, #0
    eea8:	15843004 	strne	r3, [r4, #4]
    eeac:	05842004 	streq	r2, [r4, #4]
    eeb0:	01c430b8 	strheq	r3, [r4, #8]
    eeb4:	e3a03000 	mov	r3, #0
    eeb8:	e5c4300c 	strb	r3, [r4, #12]
    eebc:	e5843010 	str	r3, [r4, #16]
    eec0:	e8bd8010 	pop	{r4, pc}
    eec4:	e5903004 	ldr	r3, [r0, #4]
    eec8:	e3530001 	cmp	r3, #1
    eecc:	da00000d 	ble	ef08 <MiniHDLC::handleBit(unsigned char)+0x128>
    eed0:	e5d02001 	ldrb	r2, [r0, #1]
    eed4:	e2431002 	sub	r1, r3, #2
    eed8:	e0803003 	add	r3, r0, r3
    eedc:	e0800001 	add	r0, r0, r1
    eee0:	e3520000 	cmp	r2, #0
    eee4:	e5d33017 	ldrb	r3, [r3, #23]
    eee8:	e5d02018 	ldrb	r2, [r0, #24]
    eeec:	01823403 	orreq	r3, r2, r3, lsl #8
    eef0:	11833402 	orrne	r3, r3, r2, lsl #8
    eef4:	e6bf3073 	sxth	r3, r3
    eef8:	e1d420b8 	ldrh	r2, [r4, #8]
    eefc:	e6ff3073 	uxth	r3, r3
    ef00:	e1520003 	cmp	r2, r3
    ef04:	0a00000b 	beq	ef38 <MiniHDLC::handleBit(unsigned char)+0x158>
    ef08:	e3a03000 	mov	r3, #0
    ef0c:	e3e02000 	mvn	r2, #0
    ef10:	e5c4300a 	strb	r3, [r4, #10]
    ef14:	e5843004 	str	r3, [r4, #4]
    ef18:	e5c4300c 	strb	r3, [r4, #12]
    ef1c:	e5843010 	str	r3, [r4, #16]
    ef20:	e1c420b8 	strh	r2, [r4, #8]
    ef24:	e8bd8010 	pop	{r4, pc}
    ef28:	e3a03000 	mov	r3, #0
    ef2c:	e2211020 	eor	r1, r1, #32
    ef30:	e5c0300a 	strb	r3, [r0, #10]
    ef34:	eaffffc9 	b	ee60 <MiniHDLC::handleBit(unsigned char)+0x80>
    ef38:	e3a02000 	mov	r2, #0
    ef3c:	e59f30a0 	ldr	r3, [pc, #160]	; efe4 <MiniHDLC::handleBit(unsigned char)+0x204>
    ef40:	e5c02018 	strb	r2, [r0, #24]
    ef44:	e5933004 	ldr	r3, [r3, #4]
    ef48:	e1530002 	cmp	r3, r2
    ef4c:	0affffed 	beq	ef08 <MiniHDLC::handleBit(unsigned char)+0x128>
    ef50:	e2840018 	add	r0, r4, #24
    ef54:	e12fff33 	blx	r3
    ef58:	eaffffea 	b	ef08 <MiniHDLC::handleBit(unsigned char)+0x128>
    ef5c:	e5903004 	ldr	r3, [r0, #4]
    ef60:	e3530001 	cmp	r3, #1
    ef64:	da00000d 	ble	efa0 <MiniHDLC::handleBit(unsigned char)+0x1c0>
    ef68:	e5d02001 	ldrb	r2, [r0, #1]
    ef6c:	e2431002 	sub	r1, r3, #2
    ef70:	e0803003 	add	r3, r0, r3
    ef74:	e0800001 	add	r0, r0, r1
    ef78:	e3520000 	cmp	r2, #0
    ef7c:	e5d33017 	ldrb	r3, [r3, #23]
    ef80:	e5d02018 	ldrb	r2, [r0, #24]
    ef84:	01823403 	orreq	r3, r2, r3, lsl #8
    ef88:	11833402 	orrne	r3, r3, r2, lsl #8
    ef8c:	e6bf3073 	sxth	r3, r3
    ef90:	e1d420b8 	ldrh	r2, [r4, #8]
    ef94:	e6ff3073 	uxth	r3, r3
    ef98:	e1520003 	cmp	r2, r3
    ef9c:	0a000005 	beq	efb8 <MiniHDLC::handleBit(unsigned char)+0x1d8>
    efa0:	e3a03000 	mov	r3, #0
    efa4:	e3e02000 	mvn	r2, #0
    efa8:	e5c4300a 	strb	r3, [r4, #10]
    efac:	e5843004 	str	r3, [r4, #4]
    efb0:	e1c420b8 	strh	r2, [r4, #8]
    efb4:	eaffffbe 	b	eeb4 <MiniHDLC::handleBit(unsigned char)+0xd4>
    efb8:	e3a02000 	mov	r2, #0
    efbc:	e59f3020 	ldr	r3, [pc, #32]	; efe4 <MiniHDLC::handleBit(unsigned char)+0x204>
    efc0:	e5c02018 	strb	r2, [r0, #24]
    efc4:	e5933004 	ldr	r3, [r3, #4]
    efc8:	e1530002 	cmp	r3, r2
    efcc:	0afffff3 	beq	efa0 <MiniHDLC::handleBit(unsigned char)+0x1c0>
    efd0:	e2840018 	add	r0, r4, #24
    efd4:	e12fff33 	blx	r3
    efd8:	eafffff0 	b	efa0 <MiniHDLC::handleBit(unsigned char)+0x1c0>
    efdc:	0002e8ac 	.word	0x0002e8ac
    efe0:	00001388 	.word	0x00001388
    efe4:	00043c40 	.word	0x00043c40

0000efe8 <MiniHDLC::handleChar(unsigned char)>:
    efe8:	e351007e 	cmp	r1, #126	; 0x7e
    efec:	e92d4010 	push	{r4, lr}
    eff0:	e1a04000 	mov	r4, r0
    eff4:	0a00001e 	beq	f074 <MiniHDLC::handleChar(unsigned char)+0x8c>
    eff8:	e5d0300a 	ldrb	r3, [r0, #10]
    effc:	e3530000 	cmp	r3, #0
    f000:	1a000017 	bne	f064 <MiniHDLC::handleChar(unsigned char)+0x7c>
    f004:	e351007d 	cmp	r1, #125	; 0x7d
    f008:	0a000039 	beq	f0f4 <MiniHDLC::handleChar(unsigned char)+0x10c>
    f00c:	e5943004 	ldr	r3, [r4, #4]
    f010:	e0842003 	add	r2, r4, r3
    f014:	e3530001 	cmp	r3, #1
    f018:	e5c21018 	strb	r1, [r2, #24]
    f01c:	da000007 	ble	f040 <MiniHDLC::handleChar(unsigned char)+0x58>
    f020:	e1d410b8 	ldrh	r1, [r4, #8]
    f024:	e5d22016 	ldrb	r2, [r2, #22]
    f028:	e59f00d0 	ldr	r0, [pc, #208]	; f100 <MiniHDLC::handleChar(unsigned char)+0x118>
    f02c:	e0222421 	eor	r2, r2, r1, lsr #8
    f030:	e1a02082 	lsl	r2, r2, #1
    f034:	e19020b2 	ldrh	r2, [r0, r2]
    f038:	e0222401 	eor	r2, r2, r1, lsl #8
    f03c:	e1c420b8 	strh	r2, [r4, #8]
    f040:	e59f20bc 	ldr	r2, [pc, #188]	; f104 <MiniHDLC::handleChar(unsigned char)+0x11c>
    f044:	e2833001 	add	r3, r3, #1
    f048:	e1530002 	cmp	r3, r2
    f04c:	03a02000 	moveq	r2, #0
    f050:	03e03000 	mvneq	r3, #0
    f054:	15843004 	strne	r3, [r4, #4]
    f058:	05842004 	streq	r2, [r4, #4]
    f05c:	01c430b8 	strheq	r3, [r4, #8]
    f060:	e8bd8010 	pop	{r4, pc}
    f064:	e3a03000 	mov	r3, #0
    f068:	e2211020 	eor	r1, r1, #32
    f06c:	e5c0300a 	strb	r3, [r0, #10]
    f070:	eaffffe5 	b	f00c <MiniHDLC::handleChar(unsigned char)+0x24>
    f074:	e5903004 	ldr	r3, [r0, #4]
    f078:	e3530001 	cmp	r3, #1
    f07c:	da00000d 	ble	f0b8 <MiniHDLC::handleChar(unsigned char)+0xd0>
    f080:	e5d02001 	ldrb	r2, [r0, #1]
    f084:	e2431002 	sub	r1, r3, #2
    f088:	e0803003 	add	r3, r0, r3
    f08c:	e0800001 	add	r0, r0, r1
    f090:	e3520000 	cmp	r2, #0
    f094:	e5d33017 	ldrb	r3, [r3, #23]
    f098:	e5d02018 	ldrb	r2, [r0, #24]
    f09c:	01823403 	orreq	r3, r2, r3, lsl #8
    f0a0:	11833402 	orrne	r3, r3, r2, lsl #8
    f0a4:	e6bf3073 	sxth	r3, r3
    f0a8:	e1d420b8 	ldrh	r2, [r4, #8]
    f0ac:	e6ff3073 	uxth	r3, r3
    f0b0:	e1520003 	cmp	r2, r3
    f0b4:	0a000005 	beq	f0d0 <MiniHDLC::handleChar(unsigned char)+0xe8>
    f0b8:	e3a03000 	mov	r3, #0
    f0bc:	e3e02000 	mvn	r2, #0
    f0c0:	e5c4300a 	strb	r3, [r4, #10]
    f0c4:	e5843004 	str	r3, [r4, #4]
    f0c8:	e1c420b8 	strh	r2, [r4, #8]
    f0cc:	e8bd8010 	pop	{r4, pc}
    f0d0:	e3a02000 	mov	r2, #0
    f0d4:	e59f302c 	ldr	r3, [pc, #44]	; f108 <MiniHDLC::handleChar(unsigned char)+0x120>
    f0d8:	e5c02018 	strb	r2, [r0, #24]
    f0dc:	e5933004 	ldr	r3, [r3, #4]
    f0e0:	e1530002 	cmp	r3, r2
    f0e4:	0afffff3 	beq	f0b8 <MiniHDLC::handleChar(unsigned char)+0xd0>
    f0e8:	e2840018 	add	r0, r4, #24
    f0ec:	e12fff33 	blx	r3
    f0f0:	eafffff0 	b	f0b8 <MiniHDLC::handleChar(unsigned char)+0xd0>
    f0f4:	e3a03001 	mov	r3, #1
    f0f8:	e5c0300a 	strb	r3, [r0, #10]
    f0fc:	e8bd8010 	pop	{r4, pc}
    f100:	0002e8ac 	.word	0x0002e8ac
    f104:	00001388 	.word	0x00001388
    f108:	00043c40 	.word	0x00043c40

0000f10c <MiniHDLC::handleBuffer(unsigned char const*, int)>:
    f10c:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    f110:	e2526000 	subs	r6, r2, #0
    f114:	d8bd87f0 	pople	{r4, r5, r6, r7, r8, r9, sl, pc}
    f118:	e2415001 	sub	r5, r1, #1
    f11c:	e1a04000 	mov	r4, r0
    f120:	e59f7124 	ldr	r7, [pc, #292]	; f24c <MiniHDLC::handleBuffer(unsigned char const*, int)+0x140>
    f124:	e59f8124 	ldr	r8, [pc, #292]	; f250 <MiniHDLC::handleBuffer(unsigned char const*, int)+0x144>
    f128:	e59f9124 	ldr	r9, [pc, #292]	; f254 <MiniHDLC::handleBuffer(unsigned char const*, int)+0x148>
    f12c:	e0856006 	add	r6, r5, r6
    f130:	ea00001a 	b	f1a0 <MiniHDLC::handleBuffer(unsigned char const*, int)+0x94>
    f134:	e5d4300a 	ldrb	r3, [r4, #10]
    f138:	e3530000 	cmp	r3, #0
    f13c:	0a000033 	beq	f210 <MiniHDLC::handleBuffer(unsigned char const*, int)+0x104>
    f140:	e3a03000 	mov	r3, #0
    f144:	e2222020 	eor	r2, r2, #32
    f148:	e5c4300a 	strb	r3, [r4, #10]
    f14c:	e5943004 	ldr	r3, [r4, #4]
    f150:	e0841003 	add	r1, r4, r3
    f154:	e3530001 	cmp	r3, #1
    f158:	e5c12018 	strb	r2, [r1, #24]
    f15c:	da000006 	ble	f17c <MiniHDLC::handleBuffer(unsigned char const*, int)+0x70>
    f160:	e5d12016 	ldrb	r2, [r1, #22]
    f164:	e1d410b8 	ldrh	r1, [r4, #8]
    f168:	e0222421 	eor	r2, r2, r1, lsr #8
    f16c:	e1a02082 	lsl	r2, r2, #1
    f170:	e19820b2 	ldrh	r2, [r8, r2]
    f174:	e0222401 	eor	r2, r2, r1, lsl #8
    f178:	e1c420b8 	strh	r2, [r4, #8]
    f17c:	e2833001 	add	r3, r3, #1
    f180:	e1530007 	cmp	r3, r7
    f184:	03a02000 	moveq	r2, #0
    f188:	03e03000 	mvneq	r3, #0
    f18c:	15843004 	strne	r3, [r4, #4]
    f190:	05842004 	streq	r2, [r4, #4]
    f194:	01c430b8 	strheq	r3, [r4, #8]
    f198:	e1560005 	cmp	r6, r5
    f19c:	08bd87f0 	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
    f1a0:	e5f52001 	ldrb	r2, [r5, #1]!
    f1a4:	e352007e 	cmp	r2, #126	; 0x7e
    f1a8:	1affffe1 	bne	f134 <MiniHDLC::handleBuffer(unsigned char const*, int)+0x28>
    f1ac:	e5943004 	ldr	r3, [r4, #4]
    f1b0:	e3530001 	cmp	r3, #1
    f1b4:	da00000d 	ble	f1f0 <MiniHDLC::handleBuffer(unsigned char const*, int)+0xe4>
    f1b8:	e5d42001 	ldrb	r2, [r4, #1]
    f1bc:	e2431002 	sub	r1, r3, #2
    f1c0:	e0840001 	add	r0, r4, r1
    f1c4:	e0843003 	add	r3, r4, r3
    f1c8:	e3520000 	cmp	r2, #0
    f1cc:	e5d33017 	ldrb	r3, [r3, #23]
    f1d0:	e5d02018 	ldrb	r2, [r0, #24]
    f1d4:	01823403 	orreq	r3, r2, r3, lsl #8
    f1d8:	11833402 	orrne	r3, r3, r2, lsl #8
    f1dc:	e6bf3073 	sxth	r3, r3
    f1e0:	e1d420b8 	ldrh	r2, [r4, #8]
    f1e4:	e6ff3073 	uxth	r3, r3
    f1e8:	e1520003 	cmp	r2, r3
    f1ec:	0a00000e 	beq	f22c <MiniHDLC::handleBuffer(unsigned char const*, int)+0x120>
    f1f0:	e3a03000 	mov	r3, #0
    f1f4:	e3e02000 	mvn	r2, #0
    f1f8:	e1560005 	cmp	r6, r5
    f1fc:	e5c4300a 	strb	r3, [r4, #10]
    f200:	e5843004 	str	r3, [r4, #4]
    f204:	e1c420b8 	strh	r2, [r4, #8]
    f208:	1affffe4 	bne	f1a0 <MiniHDLC::handleBuffer(unsigned char const*, int)+0x94>
    f20c:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    f210:	e352007d 	cmp	r2, #125	; 0x7d
    f214:	03a03001 	moveq	r3, #1
    f218:	05c4300a 	strbeq	r3, [r4, #10]
    f21c:	1affffca 	bne	f14c <MiniHDLC::handleBuffer(unsigned char const*, int)+0x40>
    f220:	e1560005 	cmp	r6, r5
    f224:	1affffdd 	bne	f1a0 <MiniHDLC::handleBuffer(unsigned char const*, int)+0x94>
    f228:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    f22c:	e3a02000 	mov	r2, #0
    f230:	e5993004 	ldr	r3, [r9, #4]
    f234:	e5c02018 	strb	r2, [r0, #24]
    f238:	e1530002 	cmp	r3, r2
    f23c:	0affffeb 	beq	f1f0 <MiniHDLC::handleBuffer(unsigned char const*, int)+0xe4>
    f240:	e2840018 	add	r0, r4, #24
    f244:	e12fff33 	blx	r3
    f248:	eaffffe8 	b	f1f0 <MiniHDLC::handleBuffer(unsigned char const*, int)+0xe4>
    f24c:	00001388 	.word	0x00001388
    f250:	0002e8ac 	.word	0x0002e8ac
    f254:	00043c40 	.word	0x00043c40

0000f258 <MiniHDLC::crcUpdateCCITT(unsigned short, unsigned char)>:
    f258:	e59f3014 	ldr	r3, [pc, #20]	; f274 <MiniHDLC::crcUpdateCCITT(unsigned short, unsigned char)+0x1c>
    f25c:	e0222421 	eor	r2, r2, r1, lsr #8
    f260:	e1a02082 	lsl	r2, r2, #1
    f264:	e19300b2 	ldrh	r0, [r3, r2]
    f268:	e0200401 	eor	r0, r0, r1, lsl #8
    f26c:	e6ff0070 	uxth	r0, r0
    f270:	e12fff1e 	bx	lr
    f274:	0002e8ac 	.word	0x0002e8ac

0000f278 <MiniHDLC::sendChar(unsigned char)>:
    f278:	e92d4070 	push	{r4, r5, r6, lr}
    f27c:	e5d03000 	ldrb	r3, [r0]
    f280:	e59f6048 	ldr	r6, [pc, #72]	; f2d0 <MiniHDLC::sendChar(unsigned char)+0x58>
    f284:	e3530000 	cmp	r3, #0
    f288:	e1a04001 	mov	r4, r1
    f28c:	e5963000 	ldr	r3, [r6]
    f290:	0a000009 	beq	f2bc <MiniHDLC::sendChar(unsigned char)+0x44>
    f294:	e3a05008 	mov	r5, #8
    f298:	e3530000 	cmp	r3, #0
    f29c:	e2040001 	and	r0, r4, #1
    f2a0:	0a000000 	beq	f2a8 <MiniHDLC::sendChar(unsigned char)+0x30>
    f2a4:	e12fff33 	blx	r3
    f2a8:	e2555001 	subs	r5, r5, #1
    f2ac:	e1a040a4 	lsr	r4, r4, #1
    f2b0:	08bd8070 	popeq	{r4, r5, r6, pc}
    f2b4:	e5963000 	ldr	r3, [r6]
    f2b8:	eafffff6 	b	f298 <MiniHDLC::sendChar(unsigned char)+0x20>
    f2bc:	e3530000 	cmp	r3, #0
    f2c0:	08bd8070 	popeq	{r4, r5, r6, pc}
    f2c4:	e1a00001 	mov	r0, r1
    f2c8:	e8bd4070 	pop	{r4, r5, r6, lr}
    f2cc:	e12fff13 	bx	r3
    f2d0:	00043c40 	.word	0x00043c40

0000f2d4 <MiniHDLC::sendCharWithStuffing(unsigned char)>:
    f2d4:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    f2d8:	e5d03000 	ldrb	r3, [r0]
    f2dc:	e59f7094 	ldr	r7, [pc, #148]	; f378 <MiniHDLC::sendCharWithStuffing(unsigned char)+0xa4>
    f2e0:	e3530000 	cmp	r3, #0
    f2e4:	e1a04001 	mov	r4, r1
    f2e8:	e5973000 	ldr	r3, [r7]
    f2ec:	0a00001c 	beq	f364 <MiniHDLC::sendCharWithStuffing(unsigned char)+0x90>
    f2f0:	e1a09000 	mov	r9, r0
    f2f4:	e3a05008 	mov	r5, #8
    f2f8:	e3a08000 	mov	r8, #0
    f2fc:	ea000008 	b	f324 <MiniHDLC::sendCharWithStuffing(unsigned char)+0x50>
    f300:	e5993014 	ldr	r3, [r9, #20]
    f304:	e2833001 	add	r3, r3, #1
    f308:	e3530005 	cmp	r3, #5
    f30c:	e5893014 	str	r3, [r9, #20]
    f310:	0a00000c 	beq	f348 <MiniHDLC::sendCharWithStuffing(unsigned char)+0x74>
    f314:	e2555001 	subs	r5, r5, #1
    f318:	e1a040a4 	lsr	r4, r4, #1
    f31c:	08bd87f0 	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
    f320:	e5973000 	ldr	r3, [r7]
    f324:	e3530000 	cmp	r3, #0
    f328:	e2046001 	and	r6, r4, #1
    f32c:	0a000001 	beq	f338 <MiniHDLC::sendCharWithStuffing(unsigned char)+0x64>
    f330:	e1a00006 	mov	r0, r6
    f334:	e12fff33 	blx	r3
    f338:	e3560000 	cmp	r6, #0
    f33c:	1affffef 	bne	f300 <MiniHDLC::sendCharWithStuffing(unsigned char)+0x2c>
    f340:	e5898014 	str	r8, [r9, #20]
    f344:	eafffff2 	b	f314 <MiniHDLC::sendCharWithStuffing(unsigned char)+0x40>
    f348:	e5973000 	ldr	r3, [r7]
    f34c:	e3530000 	cmp	r3, #0
    f350:	0afffffa 	beq	f340 <MiniHDLC::sendCharWithStuffing(unsigned char)+0x6c>
    f354:	e3a00000 	mov	r0, #0
    f358:	e12fff33 	blx	r3
    f35c:	e5898014 	str	r8, [r9, #20]
    f360:	eaffffeb 	b	f314 <MiniHDLC::sendCharWithStuffing(unsigned char)+0x40>
    f364:	e3530000 	cmp	r3, #0
    f368:	08bd87f0 	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
    f36c:	e1a00001 	mov	r0, r1
    f370:	e8bd47f0 	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
    f374:	e12fff13 	bx	r3
    f378:	00043c40 	.word	0x00043c40

0000f37c <MiniHDLC::sendEscaped(unsigned char)>:
    f37c:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    f380:	e241307d 	sub	r3, r1, #125	; 0x7d
    f384:	e59f7170 	ldr	r7, [pc, #368]	; f4fc <MiniHDLC::sendEscaped(unsigned char)+0x180>
    f388:	e3530001 	cmp	r3, #1
    f38c:	e1a04001 	mov	r4, r1
    f390:	e1a09000 	mov	r9, r0
    f394:	e5d02000 	ldrb	r2, [r0]
    f398:	e5973000 	ldr	r3, [r7]
    f39c:	9a00001d 	bls	f418 <MiniHDLC::sendEscaped(unsigned char)+0x9c>
    f3a0:	e3520000 	cmp	r2, #0
    f3a4:	0a000039 	beq	f490 <MiniHDLC::sendEscaped(unsigned char)+0x114>
    f3a8:	e3a05008 	mov	r5, #8
    f3ac:	e3a08000 	mov	r8, #0
    f3b0:	ea000008 	b	f3d8 <MiniHDLC::sendEscaped(unsigned char)+0x5c>
    f3b4:	e5993014 	ldr	r3, [r9, #20]
    f3b8:	e2833001 	add	r3, r3, #1
    f3bc:	e3530005 	cmp	r3, #5
    f3c0:	e5893014 	str	r3, [r9, #20]
    f3c4:	0a00000c 	beq	f3fc <MiniHDLC::sendEscaped(unsigned char)+0x80>
    f3c8:	e2555001 	subs	r5, r5, #1
    f3cc:	e1a040a4 	lsr	r4, r4, #1
    f3d0:	08bd87f0 	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
    f3d4:	e5973000 	ldr	r3, [r7]
    f3d8:	e3530000 	cmp	r3, #0
    f3dc:	e2046001 	and	r6, r4, #1
    f3e0:	0a000001 	beq	f3ec <MiniHDLC::sendEscaped(unsigned char)+0x70>
    f3e4:	e1a00006 	mov	r0, r6
    f3e8:	e12fff33 	blx	r3
    f3ec:	e3560000 	cmp	r6, #0
    f3f0:	1affffef 	bne	f3b4 <MiniHDLC::sendEscaped(unsigned char)+0x38>
    f3f4:	e5898014 	str	r8, [r9, #20]
    f3f8:	eafffff2 	b	f3c8 <MiniHDLC::sendEscaped(unsigned char)+0x4c>
    f3fc:	e5973000 	ldr	r3, [r7]
    f400:	e3530000 	cmp	r3, #0
    f404:	0afffffa 	beq	f3f4 <MiniHDLC::sendEscaped(unsigned char)+0x78>
    f408:	e3a00000 	mov	r0, #0
    f40c:	e12fff33 	blx	r3
    f410:	e5898014 	str	r8, [r9, #20]
    f414:	eaffffeb 	b	f3c8 <MiniHDLC::sendEscaped(unsigned char)+0x4c>
    f418:	e3520000 	cmp	r2, #0
    f41c:	0a00002f 	beq	f4e0 <MiniHDLC::sendEscaped(unsigned char)+0x164>
    f420:	e3a06008 	mov	r6, #8
    f424:	e3a0507d 	mov	r5, #125	; 0x7d
    f428:	e3a0a000 	mov	sl, #0
    f42c:	ea000007 	b	f450 <MiniHDLC::sendEscaped(unsigned char)+0xd4>
    f430:	e5992014 	ldr	r2, [r9, #20]
    f434:	e2822001 	add	r2, r2, #1
    f438:	e3520005 	cmp	r2, #5
    f43c:	e5892014 	str	r2, [r9, #20]
    f440:	0a000017 	beq	f4a4 <MiniHDLC::sendEscaped(unsigned char)+0x128>
    f444:	e2566001 	subs	r6, r6, #1
    f448:	e1a050a5 	lsr	r5, r5, #1
    f44c:	0a00000b 	beq	f480 <MiniHDLC::sendEscaped(unsigned char)+0x104>
    f450:	e3530000 	cmp	r3, #0
    f454:	e2058001 	and	r8, r5, #1
    f458:	0a000018 	beq	f4c0 <MiniHDLC::sendEscaped(unsigned char)+0x144>
    f45c:	e1a00008 	mov	r0, r8
    f460:	e12fff33 	blx	r3
    f464:	e3580000 	cmp	r8, #0
    f468:	e5973000 	ldr	r3, [r7]
    f46c:	1affffef 	bne	f430 <MiniHDLC::sendEscaped(unsigned char)+0xb4>
    f470:	e589a014 	str	sl, [r9, #20]
    f474:	e2566001 	subs	r6, r6, #1
    f478:	e1a050a5 	lsr	r5, r5, #1
    f47c:	1afffff3 	bne	f450 <MiniHDLC::sendEscaped(unsigned char)+0xd4>
    f480:	e5d92000 	ldrb	r2, [r9]
    f484:	e3520000 	cmp	r2, #0
    f488:	e2244020 	eor	r4, r4, #32
    f48c:	1affffc5 	bne	f3a8 <MiniHDLC::sendEscaped(unsigned char)+0x2c>
    f490:	e3530000 	cmp	r3, #0
    f494:	08bd87f0 	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
    f498:	e1a00004 	mov	r0, r4
    f49c:	e8bd47f0 	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
    f4a0:	e12fff13 	bx	r3
    f4a4:	e3530000 	cmp	r3, #0
    f4a8:	0afffff0 	beq	f470 <MiniHDLC::sendEscaped(unsigned char)+0xf4>
    f4ac:	e3a00000 	mov	r0, #0
    f4b0:	e12fff33 	blx	r3
    f4b4:	e5973000 	ldr	r3, [r7]
    f4b8:	e589a014 	str	sl, [r9, #20]
    f4bc:	eaffffec 	b	f474 <MiniHDLC::sendEscaped(unsigned char)+0xf8>
    f4c0:	e3580000 	cmp	r8, #0
    f4c4:	0affffe9 	beq	f470 <MiniHDLC::sendEscaped(unsigned char)+0xf4>
    f4c8:	e5992014 	ldr	r2, [r9, #20]
    f4cc:	e2822001 	add	r2, r2, #1
    f4d0:	e3520005 	cmp	r2, #5
    f4d4:	e5892014 	str	r2, [r9, #20]
    f4d8:	1affffd9 	bne	f444 <MiniHDLC::sendEscaped(unsigned char)+0xc8>
    f4dc:	eaffffe3 	b	f470 <MiniHDLC::sendEscaped(unsigned char)+0xf4>
    f4e0:	e3530000 	cmp	r3, #0
    f4e4:	08bd87f0 	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
    f4e8:	e3a0007d 	mov	r0, #125	; 0x7d
    f4ec:	e12fff33 	blx	r3
    f4f0:	e5d92000 	ldrb	r2, [r9]
    f4f4:	e5973000 	ldr	r3, [r7]
    f4f8:	eaffffe1 	b	f484 <MiniHDLC::sendEscaped(unsigned char)+0x108>
    f4fc:	00043c40 	.word	0x00043c40

0000f500 <MiniHDLC::sendFrame(unsigned char const*, int)>:
    f500:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f504:	e5d03000 	ldrb	r3, [r0]
    f508:	e59f62c4 	ldr	r6, [pc, #708]	; f7d4 <MiniHDLC::sendFrame(unsigned char const*, int)+0x2d4>
    f50c:	e3530000 	cmp	r3, #0
    f510:	e24dd014 	sub	sp, sp, #20
    f514:	e1a05000 	mov	r5, r0
    f518:	e1a09001 	mov	r9, r1
    f51c:	e1a04002 	mov	r4, r2
    f520:	e5963000 	ldr	r3, [r6]
    f524:	0a00008b 	beq	f758 <MiniHDLC::sendFrame(unsigned char const*, int)+0x258>
    f528:	e3a08008 	mov	r8, #8
    f52c:	e3a0707e 	mov	r7, #126	; 0x7e
    f530:	ea000000 	b	f538 <MiniHDLC::sendFrame(unsigned char const*, int)+0x38>
    f534:	e5963000 	ldr	r3, [r6]
    f538:	e3530000 	cmp	r3, #0
    f53c:	e2070001 	and	r0, r7, #1
    f540:	0a000000 	beq	f548 <MiniHDLC::sendFrame(unsigned char const*, int)+0x48>
    f544:	e12fff33 	blx	r3
    f548:	e2588001 	subs	r8, r8, #1
    f54c:	e1a070a7 	lsr	r7, r7, #1
    f550:	1afffff7 	bne	f534 <MiniHDLC::sendFrame(unsigned char const*, int)+0x34>
    f554:	e3540000 	cmp	r4, #0
    f558:	0a000084 	beq	f770 <MiniHDLC::sendFrame(unsigned char const*, int)+0x270>
    f55c:	e3a08000 	mov	r8, #0
    f560:	e0893004 	add	r3, r9, r4
    f564:	e59f726c 	ldr	r7, [pc, #620]	; f7d8 <MiniHDLC::sendFrame(unsigned char const*, int)+0x2d8>
    f568:	e58d3008 	str	r3, [sp, #8]
    f56c:	e4d94001 	ldrb	r4, [r9], #1
    f570:	e59f1264 	ldr	r1, [pc, #612]	; f7dc <MiniHDLC::sendFrame(unsigned char const*, int)+0x2dc>
    f574:	e0243427 	eor	r3, r4, r7, lsr #8
    f578:	e1a03083 	lsl	r3, r3, #1
    f57c:	e191b0b3 	ldrh	fp, [r1, r3]
    f580:	e244307d 	sub	r3, r4, #125	; 0x7d
    f584:	e02bb407 	eor	fp, fp, r7, lsl #8
    f588:	e6bf107b 	sxth	r1, fp
    f58c:	e3530001 	cmp	r3, #1
    f590:	e5d52000 	ldrb	r2, [r5]
    f594:	e58d1004 	str	r1, [sp, #4]
    f598:	e6ff7071 	uxth	r7, r1
    f59c:	e5963000 	ldr	r3, [r6]
    f5a0:	9a00003c 	bls	f698 <MiniHDLC::sendFrame(unsigned char const*, int)+0x198>
    f5a4:	e3520000 	cmp	r2, #0
    f5a8:	0a00005b 	beq	f71c <MiniHDLC::sendFrame(unsigned char const*, int)+0x21c>
    f5ac:	e3a0a008 	mov	sl, #8
    f5b0:	ea000008 	b	f5d8 <MiniHDLC::sendFrame(unsigned char const*, int)+0xd8>
    f5b4:	e5953014 	ldr	r3, [r5, #20]
    f5b8:	e2833001 	add	r3, r3, #1
    f5bc:	e3530005 	cmp	r3, #5
    f5c0:	e5853014 	str	r3, [r5, #20]
    f5c4:	0a00002c 	beq	f67c <MiniHDLC::sendFrame(unsigned char const*, int)+0x17c>
    f5c8:	e25aa001 	subs	sl, sl, #1
    f5cc:	e1a040a4 	lsr	r4, r4, #1
    f5d0:	0a00000b 	beq	f604 <MiniHDLC::sendFrame(unsigned char const*, int)+0x104>
    f5d4:	e5963000 	ldr	r3, [r6]
    f5d8:	e3530000 	cmp	r3, #0
    f5dc:	e204b001 	and	fp, r4, #1
    f5e0:	0a000001 	beq	f5ec <MiniHDLC::sendFrame(unsigned char const*, int)+0xec>
    f5e4:	e1a0000b 	mov	r0, fp
    f5e8:	e12fff33 	blx	r3
    f5ec:	e35b0000 	cmp	fp, #0
    f5f0:	1affffef 	bne	f5b4 <MiniHDLC::sendFrame(unsigned char const*, int)+0xb4>
    f5f4:	e5858014 	str	r8, [r5, #20]
    f5f8:	e25aa001 	subs	sl, sl, #1
    f5fc:	e1a040a4 	lsr	r4, r4, #1
    f600:	1afffff3 	bne	f5d4 <MiniHDLC::sendFrame(unsigned char const*, int)+0xd4>
    f604:	e59d3008 	ldr	r3, [sp, #8]
    f608:	e1590003 	cmp	r9, r3
    f60c:	1affffd6 	bne	f56c <MiniHDLC::sendFrame(unsigned char const*, int)+0x6c>
    f610:	e5dd1004 	ldrb	r1, [sp, #4]
    f614:	e1a07427 	lsr	r7, r7, #8
    f618:	e5d53001 	ldrb	r3, [r5, #1]
    f61c:	e1a00005 	mov	r0, r5
    f620:	e3530000 	cmp	r3, #0
    f624:	11a04001 	movne	r4, r1
    f628:	01a04007 	moveq	r4, r7
    f62c:	11a01007 	movne	r1, r7
    f630:	ebffff51 	bl	f37c <MiniHDLC::sendEscaped(unsigned char)>
    f634:	e1a01004 	mov	r1, r4
    f638:	e1a00005 	mov	r0, r5
    f63c:	ebffff4e 	bl	f37c <MiniHDLC::sendEscaped(unsigned char)>
    f640:	e5d53000 	ldrb	r3, [r5]
    f644:	e3530000 	cmp	r3, #0
    f648:	0a00004b 	beq	f77c <MiniHDLC::sendFrame(unsigned char const*, int)+0x27c>
    f64c:	e3a05008 	mov	r5, #8
    f650:	e3a0407e 	mov	r4, #126	; 0x7e
    f654:	e5963000 	ldr	r3, [r6]
    f658:	e2040001 	and	r0, r4, #1
    f65c:	e3530000 	cmp	r3, #0
    f660:	0a000000 	beq	f668 <MiniHDLC::sendFrame(unsigned char const*, int)+0x168>
    f664:	e12fff33 	blx	r3
    f668:	e2555001 	subs	r5, r5, #1
    f66c:	e1a040a4 	lsr	r4, r4, #1
    f670:	1afffff7 	bne	f654 <MiniHDLC::sendFrame(unsigned char const*, int)+0x154>
    f674:	e28dd014 	add	sp, sp, #20
    f678:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f67c:	e5963000 	ldr	r3, [r6]
    f680:	e3530000 	cmp	r3, #0
    f684:	0affffda 	beq	f5f4 <MiniHDLC::sendFrame(unsigned char const*, int)+0xf4>
    f688:	e3a00000 	mov	r0, #0
    f68c:	e12fff33 	blx	r3
    f690:	e5858014 	str	r8, [r5, #20]
    f694:	eaffffd7 	b	f5f8 <MiniHDLC::sendFrame(unsigned char const*, int)+0xf8>
    f698:	e3520000 	cmp	r2, #0
    f69c:	0a000045 	beq	f7b8 <MiniHDLC::sendFrame(unsigned char const*, int)+0x2b8>
    f6a0:	e58d400c 	str	r4, [sp, #12]
    f6a4:	e3a0a008 	mov	sl, #8
    f6a8:	e3a0b07d 	mov	fp, #125	; 0x7d
    f6ac:	e1a04005 	mov	r4, r5
    f6b0:	ea000007 	b	f6d4 <MiniHDLC::sendFrame(unsigned char const*, int)+0x1d4>
    f6b4:	e5942014 	ldr	r2, [r4, #20]
    f6b8:	e2822001 	add	r2, r2, #1
    f6bc:	e3520005 	cmp	r2, #5
    f6c0:	e5842014 	str	r2, [r4, #20]
    f6c4:	0a00001c 	beq	f73c <MiniHDLC::sendFrame(unsigned char const*, int)+0x23c>
    f6c8:	e25aa001 	subs	sl, sl, #1
    f6cc:	e1a0b0ab 	lsr	fp, fp, #1
    f6d0:	0a00000b 	beq	f704 <MiniHDLC::sendFrame(unsigned char const*, int)+0x204>
    f6d4:	e3530000 	cmp	r3, #0
    f6d8:	e20b5001 	and	r5, fp, #1
    f6dc:	0a00002d 	beq	f798 <MiniHDLC::sendFrame(unsigned char const*, int)+0x298>
    f6e0:	e1a00005 	mov	r0, r5
    f6e4:	e12fff33 	blx	r3
    f6e8:	e3550000 	cmp	r5, #0
    f6ec:	e5963000 	ldr	r3, [r6]
    f6f0:	1affffef 	bne	f6b4 <MiniHDLC::sendFrame(unsigned char const*, int)+0x1b4>
    f6f4:	e5848014 	str	r8, [r4, #20]
    f6f8:	e25aa001 	subs	sl, sl, #1
    f6fc:	e1a0b0ab 	lsr	fp, fp, #1
    f700:	1afffff3 	bne	f6d4 <MiniHDLC::sendFrame(unsigned char const*, int)+0x1d4>
    f704:	e1a05004 	mov	r5, r4
    f708:	e59d400c 	ldr	r4, [sp, #12]
    f70c:	e5d52000 	ldrb	r2, [r5]
    f710:	e3520000 	cmp	r2, #0
    f714:	e2244020 	eor	r4, r4, #32
    f718:	1affffa3 	bne	f5ac <MiniHDLC::sendFrame(unsigned char const*, int)+0xac>
    f71c:	e3530000 	cmp	r3, #0
    f720:	0affffb7 	beq	f604 <MiniHDLC::sendFrame(unsigned char const*, int)+0x104>
    f724:	e1a00004 	mov	r0, r4
    f728:	e12fff33 	blx	r3
    f72c:	e59d3008 	ldr	r3, [sp, #8]
    f730:	e1590003 	cmp	r9, r3
    f734:	1affff8c 	bne	f56c <MiniHDLC::sendFrame(unsigned char const*, int)+0x6c>
    f738:	eaffffb4 	b	f610 <MiniHDLC::sendFrame(unsigned char const*, int)+0x110>
    f73c:	e3530000 	cmp	r3, #0
    f740:	0affffeb 	beq	f6f4 <MiniHDLC::sendFrame(unsigned char const*, int)+0x1f4>
    f744:	e3a00000 	mov	r0, #0
    f748:	e12fff33 	blx	r3
    f74c:	e5963000 	ldr	r3, [r6]
    f750:	e5848014 	str	r8, [r4, #20]
    f754:	eaffffe7 	b	f6f8 <MiniHDLC::sendFrame(unsigned char const*, int)+0x1f8>
    f758:	e3530000 	cmp	r3, #0
    f75c:	0affff7c 	beq	f554 <MiniHDLC::sendFrame(unsigned char const*, int)+0x54>
    f760:	e3a0007e 	mov	r0, #126	; 0x7e
    f764:	e12fff33 	blx	r3
    f768:	e3540000 	cmp	r4, #0
    f76c:	1affff7a 	bne	f55c <MiniHDLC::sendFrame(unsigned char const*, int)+0x5c>
    f770:	e3a070ff 	mov	r7, #255	; 0xff
    f774:	e1a01007 	mov	r1, r7
    f778:	eaffffa6 	b	f618 <MiniHDLC::sendFrame(unsigned char const*, int)+0x118>
    f77c:	e5963000 	ldr	r3, [r6]
    f780:	e3530000 	cmp	r3, #0
    f784:	0affffba 	beq	f674 <MiniHDLC::sendFrame(unsigned char const*, int)+0x174>
    f788:	e3a0007e 	mov	r0, #126	; 0x7e
    f78c:	e28dd014 	add	sp, sp, #20
    f790:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f794:	e12fff13 	bx	r3
    f798:	e3550000 	cmp	r5, #0
    f79c:	0affffd4 	beq	f6f4 <MiniHDLC::sendFrame(unsigned char const*, int)+0x1f4>
    f7a0:	e5942014 	ldr	r2, [r4, #20]
    f7a4:	e2822001 	add	r2, r2, #1
    f7a8:	e3520005 	cmp	r2, #5
    f7ac:	e5842014 	str	r2, [r4, #20]
    f7b0:	1affffc4 	bne	f6c8 <MiniHDLC::sendFrame(unsigned char const*, int)+0x1c8>
    f7b4:	eaffffce 	b	f6f4 <MiniHDLC::sendFrame(unsigned char const*, int)+0x1f4>
    f7b8:	e3530000 	cmp	r3, #0
    f7bc:	0affff90 	beq	f604 <MiniHDLC::sendFrame(unsigned char const*, int)+0x104>
    f7c0:	e3a0007d 	mov	r0, #125	; 0x7d
    f7c4:	e12fff33 	blx	r3
    f7c8:	e5d52000 	ldrb	r2, [r5]
    f7cc:	e5963000 	ldr	r3, [r6]
    f7d0:	eaffffce 	b	f710 <MiniHDLC::sendFrame(unsigned char const*, int)+0x210>
    f7d4:	00043c40 	.word	0x00043c40
    f7d8:	0000ffff 	.word	0x0000ffff
    f7dc:	0002e8ac 	.word	0x0002e8ac

0000f7e0 <make_byte(int, char*, int)>:
    f7e0:	e3500001 	cmp	r0, #1
    f7e4:	0a00000b 	beq	f818 <make_byte(int, char*, int)+0x38>
    f7e8:	e3500002 	cmp	r0, #2
    f7ec:	0a000005 	beq	f808 <make_byte(int, char*, int)+0x28>
    f7f0:	e3500000 	cmp	r0, #0
    f7f4:	112fff1e 	bxne	lr
    f7f8:	e1a00001 	mov	r0, r1
    f7fc:	e6ef2072 	uxtb	r2, r2
    f800:	e59f1020 	ldr	r1, [pc, #32]	; f828 <make_byte(int, char*, int)+0x48>
    f804:	eaffe86a 	b	99b4 <ee_sprintf>
    f808:	e1a00001 	mov	r0, r1
    f80c:	e6ef2072 	uxtb	r2, r2
    f810:	e59f1014 	ldr	r1, [pc, #20]	; f82c <make_byte(int, char*, int)+0x4c>
    f814:	eaffe866 	b	99b4 <ee_sprintf>
    f818:	e1a00001 	mov	r0, r1
    f81c:	e6ef2072 	uxtb	r2, r2
    f820:	e59f1008 	ldr	r1, [pc, #8]	; f830 <make_byte(int, char*, int)+0x50>
    f824:	eaffe862 	b	99b4 <ee_sprintf>
    f828:	0002ead4 	.word	0x0002ead4
    f82c:	0002eae4 	.word	0x0002eae4
    f830:	0002eadc 	.word	0x0002eadc

0000f834 <make_ofs_byte(int, char*, int)>:
    f834:	e352007f 	cmp	r2, #127	; 0x7f
    f838:	c3a0302d 	movgt	r3, #45	; 0x2d
    f83c:	d3a0302b 	movle	r3, #43	; 0x2b
    f840:	c22220ff 	eorgt	r2, r2, #255	; 0xff
    f844:	c2822001 	addgt	r2, r2, #1
    f848:	e3500001 	cmp	r0, #1
    f84c:	e4c13001 	strb	r3, [r1], #1
    f850:	0a00000b 	beq	f884 <make_ofs_byte(int, char*, int)+0x50>
    f854:	e3500002 	cmp	r0, #2
    f858:	0a000005 	beq	f874 <make_ofs_byte(int, char*, int)+0x40>
    f85c:	e3500000 	cmp	r0, #0
    f860:	112fff1e 	bxne	lr
    f864:	e1a00001 	mov	r0, r1
    f868:	e6ef2072 	uxtb	r2, r2
    f86c:	e59f1020 	ldr	r1, [pc, #32]	; f894 <make_ofs_byte(int, char*, int)+0x60>
    f870:	eaffe84f 	b	99b4 <ee_sprintf>
    f874:	e1a00001 	mov	r0, r1
    f878:	e6ef2072 	uxtb	r2, r2
    f87c:	e59f1014 	ldr	r1, [pc, #20]	; f898 <make_ofs_byte(int, char*, int)+0x64>
    f880:	eaffe84b 	b	99b4 <ee_sprintf>
    f884:	e1a00001 	mov	r0, r1
    f888:	e6ef2072 	uxtb	r2, r2
    f88c:	e59f1008 	ldr	r1, [pc, #8]	; f89c <make_ofs_byte(int, char*, int)+0x68>
    f890:	eaffe847 	b	99b4 <ee_sprintf>
    f894:	0002ead4 	.word	0x0002ead4
    f898:	0002eae4 	.word	0x0002eae4
    f89c:	0002eadc 	.word	0x0002eadc

0000f8a0 <make_word(int, char*, int)>:
    f8a0:	e3500001 	cmp	r0, #1
    f8a4:	0a00000b 	beq	f8d8 <make_word(int, char*, int)+0x38>
    f8a8:	e3500002 	cmp	r0, #2
    f8ac:	0a000005 	beq	f8c8 <make_word(int, char*, int)+0x28>
    f8b0:	e3500000 	cmp	r0, #0
    f8b4:	112fff1e 	bxne	lr
    f8b8:	e1a00001 	mov	r0, r1
    f8bc:	e6ff2072 	uxth	r2, r2
    f8c0:	e59f1020 	ldr	r1, [pc, #32]	; f8e8 <make_word(int, char*, int)+0x48>
    f8c4:	eaffe83a 	b	99b4 <ee_sprintf>
    f8c8:	e1a00001 	mov	r0, r1
    f8cc:	e6ff2072 	uxth	r2, r2
    f8d0:	e59f1014 	ldr	r1, [pc, #20]	; f8ec <make_word(int, char*, int)+0x4c>
    f8d4:	eaffe836 	b	99b4 <ee_sprintf>
    f8d8:	e1a00001 	mov	r0, r1
    f8dc:	e6ff2072 	uxth	r2, r2
    f8e0:	e59f1008 	ldr	r1, [pc, #8]	; f8f0 <make_word(int, char*, int)+0x50>
    f8e4:	eaffe832 	b	99b4 <ee_sprintf>
    f8e8:	0002eaec 	.word	0x0002eaec
    f8ec:	0002eafc 	.word	0x0002eafc
    f8f0:	0002eaf4 	.word	0x0002eaf4

0000f8f4 <getOPdata(unsigned char*, unsigned long)>:
    f8f4:	e92d4030 	push	{r4, r5, lr}
    f8f8:	e59f3090 	ldr	r3, [pc, #144]	; f990 <getOPdata(unsigned char*, unsigned long)+0x9c>
    f8fc:	e24dd014 	sub	sp, sp, #20
    f900:	e0804001 	add	r4, r0, r1
    f904:	e8930007 	ldm	r3, {r0, r1, r2}
    f908:	e28d3010 	add	r3, sp, #16
    f90c:	e9030007 	stmdb	r3, {r0, r1, r2}
    f910:	e59d3004 	ldr	r3, [sp, #4]
    f914:	e59f0078 	ldr	r0, [pc, #120]	; f994 <getOPdata(unsigned char*, unsigned long)+0xa0>
    f918:	e7d42003 	ldrb	r2, [r4, r3]
    f91c:	e1a0c182 	lsl	ip, r2, #3
    f920:	e04c3002 	sub	r3, ip, r2
    f924:	e7903103 	ldr	r3, [r0, r3, lsl #2]
    f928:	e3530000 	cmp	r3, #0
    f92c:	a3a03000 	movge	r3, #0
    f930:	aa000011 	bge	f97c <getOPdata(unsigned char*, unsigned long)+0x88>
    f934:	e59d2008 	ldr	r2, [sp, #8]
    f938:	e263e000 	rsb	lr, r3, #0
    f93c:	e7d42002 	ldrb	r2, [r4, r2]
    f940:	e1a0318e 	lsl	r3, lr, #3
    f944:	e043100e 	sub	r1, r3, lr
    f948:	e1a0c182 	lsl	ip, r2, #3
    f94c:	e04c5002 	sub	r5, ip, r2
    f950:	e1a01501 	lsl	r1, r1, #10
    f954:	e0811105 	add	r1, r1, r5, lsl #2
    f958:	e7901001 	ldr	r1, [r0, r1]
    f95c:	e3510000 	cmp	r1, #0
    f960:	b59d300c 	ldrlt	r3, [sp, #12]
    f964:	b261e000 	rsblt	lr, r1, #0
    f968:	b7d42003 	ldrblt	r2, [r4, r3]
    f96c:	b1a0318e 	lsllt	r3, lr, #3
    f970:	e043300e 	sub	r3, r3, lr
    f974:	b1a0c182 	lsllt	ip, r2, #3
    f978:	e1a03503 	lsl	r3, r3, #10
    f97c:	e04c2002 	sub	r2, ip, r2
    f980:	e0833102 	add	r3, r3, r2, lsl #2
    f984:	e0800003 	add	r0, r0, r3
    f988:	e28dd014 	add	sp, sp, #20
    f98c:	e8bd8030 	pop	{r4, r5, pc}
    f990:	0002eaac 	.word	0x0002eaac
    f994:	00035c6c 	.word	0x00035c6c

0000f998 <disasmZ80(unsigned char*, unsigned long, unsigned long, char*, int, int, int)>:
    f998:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f99c:	e1a04001 	mov	r4, r1
    f9a0:	e1a0b002 	mov	fp, r2
    f9a4:	e1a06003 	mov	r6, r3
    f9a8:	e24ddf4f 	sub	sp, sp, #316	; 0x13c
    f9ac:	e59fe9b8 	ldr	lr, [pc, #2488]	; 1036c <disasmZ80(unsigned char*, unsigned long, unsigned long, char*, int, int, int)+0x9d4>
    f9b0:	e28dc01c 	add	ip, sp, #28
    f9b4:	e58d1010 	str	r1, [sp, #16]
    f9b8:	e58d0004 	str	r0, [sp, #4]
    f9bc:	e8be000f 	ldm	lr!, {r0, r1, r2, r3}
    f9c0:	e8ac000f 	stmia	ip!, {r0, r1, r2, r3}
    f9c4:	e89e0007 	ldm	lr, {r0, r1, r2}
    f9c8:	e59d5168 	ldr	r5, [sp, #360]	; 0x168
    f9cc:	e88c0007 	stm	ip, {r0, r1, r2}
    f9d0:	e3550000 	cmp	r5, #0
    f9d4:	e084200b 	add	r2, r4, fp
    f9d8:	159f1990 	ldrne	r1, [pc, #2448]	; 10370 <disasmZ80(unsigned char*, unsigned long, unsigned long, char*, int, int, int)+0x9d8>
    f9dc:	059f1990 	ldreq	r1, [pc, #2448]	; 10374 <disasmZ80(unsigned char*, unsigned long, unsigned long, char*, int, int, int)+0x9dc>
    f9e0:	e1a00006 	mov	r0, r6
    f9e4:	e59da164 	ldr	sl, [sp, #356]	; 0x164
    f9e8:	ebffe7f1 	bl	99b4 <ee_sprintf>
    f9ec:	e59f3984 	ldr	r3, [pc, #2436]	; 10378 <disasmZ80(unsigned char*, unsigned long, unsigned long, char*, int, int, int)+0x9e0>
    f9f0:	e28d9038 	add	r9, sp, #56	; 0x38
    f9f4:	e1a04000 	mov	r4, r0
    f9f8:	e8930007 	ldm	r3, {r0, r1, r2}
    f9fc:	e8890007 	stm	r9, {r0, r1, r2}
    fa00:	e59d2004 	ldr	r2, [sp, #4]
    fa04:	e59f7970 	ldr	r7, [pc, #2416]	; 1037c <disasmZ80(unsigned char*, unsigned long, unsigned long, char*, int, int, int)+0x9e4>
    fa08:	e082e00b 	add	lr, r2, fp
    fa0c:	e7de2000 	ldrb	r2, [lr, r0]
    fa10:	e1a01182 	lsl	r1, r2, #3
    fa14:	e0413002 	sub	r3, r1, r2
    fa18:	e7970103 	ldr	r0, [r7, r3, lsl #2]
    fa1c:	e3500000 	cmp	r0, #0
    fa20:	aa00010e 	bge	fe60 <disasmZ80(unsigned char*, unsigned long, unsigned long, char*, int, int, int)+0x4c8>
    fa24:	e59d303c 	ldr	r3, [sp, #60]	; 0x3c
    fa28:	e2600000 	rsb	r0, r0, #0
    fa2c:	e7de2003 	ldrb	r2, [lr, r3]
    fa30:	e1a03180 	lsl	r3, r0, #3
    fa34:	e043c000 	sub	ip, r3, r0
    fa38:	e1a01182 	lsl	r1, r2, #3
    fa3c:	e0418002 	sub	r8, r1, r2
    fa40:	e1a0c50c 	lsl	ip, ip, #10
    fa44:	e08cc108 	add	ip, ip, r8, lsl #2
    fa48:	e797c00c 	ldr	ip, [r7, ip]
    fa4c:	e35c0000 	cmp	ip, #0
    fa50:	b59d3040 	ldrlt	r3, [sp, #64]	; 0x40
    fa54:	b26c0000 	rsblt	r0, ip, #0
    fa58:	b7de2003 	ldrblt	r2, [lr, r3]
    fa5c:	b1a03180 	lsllt	r3, r0, #3
    fa60:	e0433000 	sub	r3, r3, r0
    fa64:	b1a01182 	lsllt	r1, r2, #3
    fa68:	e1a03503 	lsl	r3, r3, #10
    fa6c:	e0412002 	sub	r2, r1, r2
    fa70:	e0832102 	add	r2, r3, r2, lsl #2
    fa74:	e35a0000 	cmp	sl, #0
    fa78:	e0877002 	add	r7, r7, r2
    fa7c:	0a000003 	beq	fa90 <disasmZ80(unsigned char*, unsigned long, unsigned long, char*, int, int, int)+0xf8>
    fa80:	e59d3004 	ldr	r3, [sp, #4]
    fa84:	e7d3300b 	ldrb	r3, [r3, fp]
    fa88:	e35300ff 	cmp	r3, #255	; 0xff
    fa8c:	0a0000fa 	beq	fe7c <disasmZ80(unsigned char*, unsigned long, unsigned long, char*, int, int, int)+0x4e4>
    fa90:	e3550000 	cmp	r5, #0
    fa94:	0a00006e 	beq	fc54 <disasmZ80(unsigned char*, unsigned long, unsigned long, char*, int, int, int)+0x2bc>
    fa98:	e59f38e0 	ldr	r3, [pc, #2272]	; 10380 <disasmZ80(unsigned char*, unsigned long, unsigned long, char*, int, int, int)+0x9e8>
    fa9c:	e086a004 	add	sl, r6, r4
    faa0:	e1a02003 	mov	r2, r3
    faa4:	e58d3008 	str	r3, [sp, #8]
    faa8:	e5973008 	ldr	r3, [r7, #8]
    faac:	e7928103 	ldr	r8, [r2, r3, lsl #2]
    fab0:	e1a05008 	mov	r5, r8
    fab4:	ea000002 	b	fac4 <disasmZ80(unsigned char*, unsigned long, unsigned long, char*, int, int, int)+0x12c>
    fab8:	e4d50001 	ldrb	r0, [r5], #1
    fabc:	eb007697 	bl	2d520 <toupper>
    fac0:	e4ca0001 	strb	r0, [sl], #1
    fac4:	e1a00008 	mov	r0, r8
    fac8:	eb00729d 	bl	2c544 <strlen>
    facc:	e0453008 	sub	r3, r5, r8
    fad0:	e1530000 	cmp	r3, r0
    fad4:	e2844001 	add	r4, r4, #1
    fad8:	3afffff6 	bcc	fab8 <disasmZ80(unsigned char*, unsigned long, unsigned long, char*, int, int, int)+0x120>
    fadc:	e3a03020 	mov	r3, #32
    fae0:	e5ca3000 	strb	r3, [sl]
    fae4:	e597300c 	ldr	r3, [r7, #12]
    fae8:	e3530000 	cmp	r3, #0
    faec:	0a000045 	beq	fc08 <disasmZ80(unsigned char*, unsigned long, unsigned long, char*, int, int, int)+0x270>
    faf0:	e287a010 	add	sl, r7, #16
    faf4:	e5973004 	ldr	r3, [r7, #4]
    faf8:	da000042 	ble	fc08 <disasmZ80(unsigned char*, unsigned long, unsigned long, char*, int, int, int)+0x270>
    fafc:	e58db00c 	str	fp, [sp, #12]
    fb00:	e3a08000 	mov	r8, #0
    fb04:	e3a05020 	mov	r5, #32
    fb08:	e1a0b003 	mov	fp, r3
    fb0c:	e59a2000 	ldr	r2, [sl]
    fb10:	e0863004 	add	r3, r6, r4
    fb14:	e35200ff 	cmp	r2, #255	; 0xff
    fb18:	e1a01003 	mov	r1, r3
    fb1c:	da00006c 	ble	fcd4 <disasmZ80(unsigned char*, unsigned long, unsigned long, char*, int, int, int)+0x33c>
    fb20:	e3520f41 	cmp	r2, #260	; 0x104
    fb24:	0a000123 	beq	ffb8 <disasmZ80(unsigned char*, unsigned long, unsigned long, char*, int, int, int)+0x620>
    fb28:	da00007e 	ble	fd28 <disasmZ80(unsigned char*, unsigned long, unsigned long, char*, int, int, int)+0x390>
    fb2c:	e3520b01 	cmp	r2, #1024	; 0x400
    fb30:	0a000106 	beq	ff50 <disasmZ80(unsigned char*, unsigned long, unsigned long, char*, int, int, int)+0x5b8>
    fb34:	ca0000a1 	bgt	fdc0 <disasmZ80(unsigned char*, unsigned long, unsigned long, char*, int, int, int)+0x428>
    fb38:	e3520c02 	cmp	r2, #512	; 0x200
    fb3c:	0a000139 	beq	10028 <disasmZ80(unsigned char*, unsigned long, unsigned long, char*, int, int, int)+0x690>
    fb40:	e59f083c 	ldr	r0, [pc, #2108]	; 10384 <disasmZ80(unsigned char*, unsigned long, unsigned long, char*, int, int, int)+0x9ec>
    fb44:	e1520000 	cmp	r2, r0
    fb48:	1a000024 	bne	fbe0 <disasmZ80(unsigned char*, unsigned long, unsigned long, char*, int, int, int)+0x248>
    fb4c:	e59d2004 	ldr	r2, [sp, #4]
    fb50:	e59d100c 	ldr	r1, [sp, #12]
    fb54:	e082200b 	add	r2, r2, fp
    fb58:	e7d22001 	ldrb	r2, [r2, r1]
    fb5c:	e59d0160 	ldr	r0, [sp, #352]	; 0x160
    fb60:	e352007f 	cmp	r2, #127	; 0x7f
    fb64:	c1e02002 	mvngt	r2, r2
    fb68:	c3a0102d 	movgt	r1, #45	; 0x2d
    fb6c:	d3a0102b 	movle	r1, #43	; 0x2b
    fb70:	c6ef2072 	uxtbgt	r2, r2
    fb74:	c2822001 	addgt	r2, r2, #1
    fb78:	e3500001 	cmp	r0, #1
    fb7c:	e5cd1038 	strb	r1, [sp, #56]	; 0x38
    fb80:	0a0001a6 	beq	10220 <disasmZ80(unsigned char*, unsigned long, unsigned long, char*, int, int, int)+0x888>
    fb84:	e3500002 	cmp	r0, #2
    fb88:	0a00019d 	beq	10204 <disasmZ80(unsigned char*, unsigned long, unsigned long, char*, int, int, int)+0x86c>
    fb8c:	e3500000 	cmp	r0, #0
    fb90:	1a000005 	bne	fbac <disasmZ80(unsigned char*, unsigned long, unsigned long, char*, int, int, int)+0x214>
    fb94:	e6ef2072 	uxtb	r2, r2
    fb98:	e59f17e8 	ldr	r1, [pc, #2024]	; 10388 <disasmZ80(unsigned char*, unsigned long, unsigned long, char*, int, int, int)+0x9f0>
    fb9c:	e28d0039 	add	r0, sp, #57	; 0x39
    fba0:	e58d3014 	str	r3, [sp, #20]
    fba4:	ebffe782 	bl	99b4 <ee_sprintf>
    fba8:	e59d3014 	ldr	r3, [sp, #20]
    fbac:	e1a00003 	mov	r0, r3
    fbb0:	e1a02009 	mov	r2, r9
    fbb4:	e59f17d0 	ldr	r1, [pc, #2000]	; 1038c <disasmZ80(unsigned char*, unsigned long, unsigned long, char*, int, int, int)+0x9f4>
    fbb8:	ebffe77d 	bl	99b4 <ee_sprintf>
    fbbc:	e0844000 	add	r4, r4, r0
    fbc0:	e1a00009 	mov	r0, r9
    fbc4:	eb00725e 	bl	2c544 <strlen>
    fbc8:	e0863004 	add	r3, r6, r4
    fbcc:	e1a01003 	mov	r1, r3
    fbd0:	e2855004 	add	r5, r5, #4
    fbd4:	e28bb001 	add	fp, fp, #1
    fbd8:	e28aa004 	add	sl, sl, #4
    fbdc:	e0855000 	add	r5, r5, r0
    fbe0:	e597200c 	ldr	r2, [r7, #12]
    fbe4:	e2888001 	add	r8, r8, #1
    fbe8:	e1520008 	cmp	r2, r8
    fbec:	da00004a 	ble	fd1c <disasmZ80(unsigned char*, unsigned long, unsigned long, char*, int, int, int)+0x384>
    fbf0:	e1a00003 	mov	r0, r3
    fbf4:	e59f1794 	ldr	r1, [pc, #1940]	; 10390 <disasmZ80(unsigned char*, unsigned long, unsigned long, char*, int, int, int)+0x9f8>
    fbf8:	ebffe76d 	bl	99b4 <ee_sprintf>
    fbfc:	e2855001 	add	r5, r5, #1
    fc00:	e0844000 	add	r4, r4, r0
    fc04:	eaffffc0 	b	fb0c <disasmZ80(unsigned char*, unsigned long, unsigned long, char*, int, int, int)+0x174>
    fc08:	e3a05020 	mov	r5, #32
    fc0c:	e0863004 	add	r3, r6, r4
    fc10:	e59f877c 	ldr	r8, [pc, #1916]	; 10394 <disasmZ80(unsigned char*, unsigned long, unsigned long, char*, int, int, int)+0x9fc>
    fc14:	e1a00003 	mov	r0, r3
    fc18:	ea000000 	b	fc20 <disasmZ80(unsigned char*, unsigned long, unsigned long, char*, int, int, int)+0x288>
    fc1c:	e0860004 	add	r0, r6, r4
    fc20:	e1a01008 	mov	r1, r8
    fc24:	ebffe762 	bl	99b4 <ee_sprintf>
    fc28:	e2855008 	add	r5, r5, #8
    fc2c:	e355002f 	cmp	r5, #47	; 0x2f
    fc30:	e0844000 	add	r4, r4, r0
    fc34:	dafffff8 	ble	fc1c <disasmZ80(unsigned char*, unsigned long, unsigned long, char*, int, int, int)+0x284>
    fc38:	e0861004 	add	r1, r6, r4
    fc3c:	e1a00001 	mov	r0, r1
    fc40:	e59f1750 	ldr	r1, [pc, #1872]	; 10398 <disasmZ80(unsigned char*, unsigned long, unsigned long, char*, int, int, int)+0xa00>
    fc44:	ebffe75a 	bl	99b4 <ee_sprintf>
    fc48:	e5970000 	ldr	r0, [r7]
    fc4c:	e28ddf4f 	add	sp, sp, #316	; 0x13c
    fc50:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    fc54:	e5973000 	ldr	r3, [r7]
    fc58:	e3530000 	cmp	r3, #0
    fc5c:	da000081 	ble	fe68 <disasmZ80(unsigned char*, unsigned long, unsigned long, char*, int, int, int)+0x4d0>
    fc60:	e59d3004 	ldr	r3, [sp, #4]
    fc64:	e24ba001 	sub	sl, fp, #1
    fc68:	e59f872c 	ldr	r8, [pc, #1836]	; 1039c <disasmZ80(unsigned char*, unsigned long, unsigned long, char*, int, int, int)+0xa04>
    fc6c:	e083a00a 	add	sl, r3, sl
    fc70:	e0860004 	add	r0, r6, r4
    fc74:	e5fa2001 	ldrb	r2, [sl, #1]!
    fc78:	e1a01008 	mov	r1, r8
    fc7c:	ebffe74c 	bl	99b4 <ee_sprintf>
    fc80:	e5973000 	ldr	r3, [r7]
    fc84:	e2855001 	add	r5, r5, #1
    fc88:	e1530005 	cmp	r3, r5
    fc8c:	e0844000 	add	r4, r4, r0
    fc90:	cafffff6 	bgt	fc70 <disasmZ80(unsigned char*, unsigned long, unsigned long, char*, int, int, int)+0x2d8>
    fc94:	e3530004 	cmp	r3, #4
    fc98:	e0860004 	add	r0, r6, r4
    fc9c:	1a000072 	bne	fe6c <disasmZ80(unsigned char*, unsigned long, unsigned long, char*, int, int, int)+0x4d4>
    fca0:	e59f16ec 	ldr	r1, [pc, #1772]	; 10394 <disasmZ80(unsigned char*, unsigned long, unsigned long, char*, int, int, int)+0x9fc>
    fca4:	ebffe742 	bl	99b4 <ee_sprintf>
    fca8:	e0844000 	add	r4, r4, r0
    fcac:	e59f36cc 	ldr	r3, [pc, #1740]	; 10380 <disasmZ80(unsigned char*, unsigned long, unsigned long, char*, int, int, int)+0x9e8>
    fcb0:	e0860004 	add	r0, r6, r4
    fcb4:	e1a02003 	mov	r2, r3
    fcb8:	e58d3008 	str	r3, [sp, #8]
    fcbc:	e5973008 	ldr	r3, [r7, #8]
    fcc0:	e59f16d8 	ldr	r1, [pc, #1752]	; 103a0 <disasmZ80(unsigned char*, unsigned long, unsigned long, char*, int, int, int)+0xa08>
    fcc4:	e7922103 	ldr	r2, [r2, r3, lsl #2]
    fcc8:	ebffe739 	bl	99b4 <ee_sprintf>
    fccc:	e0844000 	add	r4, r4, r0
    fcd0:	eaffff83 	b	fae4 <disasmZ80(unsigned char*, unsigned long, unsigned long, char*, int, int, int)+0x14c>
    fcd4:	e59d1008 	ldr	r1, [sp, #8]
    fcd8:	e1a00003 	mov	r0, r3
    fcdc:	e0812102 	add	r2, r1, r2, lsl #2
    fce0:	e5921118 	ldr	r1, [r2, #280]	; 0x118
    fce4:	ebffe732 	bl	99b4 <ee_sprintf>
    fce8:	e59d1008 	ldr	r1, [sp, #8]
    fcec:	e49a3004 	ldr	r3, [sl], #4
    fcf0:	e0844000 	add	r4, r4, r0
    fcf4:	e0813103 	add	r3, r1, r3, lsl #2
    fcf8:	e5930118 	ldr	r0, [r3, #280]	; 0x118
    fcfc:	eb007210 	bl	2c544 <strlen>
    fd00:	e597200c 	ldr	r2, [r7, #12]
    fd04:	e2888001 	add	r8, r8, #1
    fd08:	e0863004 	add	r3, r6, r4
    fd0c:	e1520008 	cmp	r2, r8
    fd10:	e0855000 	add	r5, r5, r0
    fd14:	e1a01003 	mov	r1, r3
    fd18:	caffffb4 	bgt	fbf0 <disasmZ80(unsigned char*, unsigned long, unsigned long, char*, int, int, int)+0x258>
    fd1c:	e355002f 	cmp	r5, #47	; 0x2f
    fd20:	caffffc5 	bgt	fc3c <disasmZ80(unsigned char*, unsigned long, unsigned long, char*, int, int, int)+0x2a4>
    fd24:	eaffffb9 	b	fc10 <disasmZ80(unsigned char*, unsigned long, unsigned long, char*, int, int, int)+0x278>
    fd28:	e59f0674 	ldr	r0, [pc, #1652]	; 103a4 <disasmZ80(unsigned char*, unsigned long, unsigned long, char*, int, int, int)+0xa0c>
    fd2c:	e1520000 	cmp	r2, r0
    fd30:	0a0000f7 	beq	10114 <disasmZ80(unsigned char*, unsigned long, unsigned long, char*, int, int, int)+0x77c>
    fd34:	da000112 	ble	10184 <disasmZ80(unsigned char*, unsigned long, unsigned long, char*, int, int, int)+0x7ec>
    fd38:	e59f0668 	ldr	r0, [pc, #1640]	; 103a8 <disasmZ80(unsigned char*, unsigned long, unsigned long, char*, int, int, int)+0xa10>
    fd3c:	e1520000 	cmp	r2, r0
    fd40:	1a000062 	bne	fed0 <disasmZ80(unsigned char*, unsigned long, unsigned long, char*, int, int, int)+0x538>
    fd44:	e59d2160 	ldr	r2, [sp, #352]	; 0x160
    fd48:	e59d100c 	ldr	r1, [sp, #12]
    fd4c:	e3520001 	cmp	r2, #1
    fd50:	e59d2004 	ldr	r2, [sp, #4]
    fd54:	e082200b 	add	r2, r2, fp
    fd58:	e7d22001 	ldrb	r2, [r2, r1]
    fd5c:	0a00013c 	beq	10254 <disasmZ80(unsigned char*, unsigned long, unsigned long, char*, int, int, int)+0x8bc>
    fd60:	e59d1160 	ldr	r1, [sp, #352]	; 0x160
    fd64:	e3510002 	cmp	r1, #2
    fd68:	0a000133 	beq	1023c <disasmZ80(unsigned char*, unsigned long, unsigned long, char*, int, int, int)+0x8a4>
    fd6c:	e3510000 	cmp	r1, #0
    fd70:	1a000004 	bne	fd88 <disasmZ80(unsigned char*, unsigned long, unsigned long, char*, int, int, int)+0x3f0>
    fd74:	e59f160c 	ldr	r1, [pc, #1548]	; 10388 <disasmZ80(unsigned char*, unsigned long, unsigned long, char*, int, int, int)+0x9f0>
    fd78:	e1a00009 	mov	r0, r9
    fd7c:	e58d3014 	str	r3, [sp, #20]
    fd80:	ebffe70b 	bl	99b4 <ee_sprintf>
    fd84:	e59d3014 	ldr	r3, [sp, #20]
    fd88:	e1a00003 	mov	r0, r3
    fd8c:	e59f1618 	ldr	r1, [pc, #1560]	; 103ac <disasmZ80(unsigned char*, unsigned long, unsigned long, char*, int, int, int)+0xa14>
    fd90:	e1a02009 	mov	r2, r9
    fd94:	ebffe706 	bl	99b4 <ee_sprintf>
    fd98:	e0844000 	add	r4, r4, r0
    fd9c:	e1a00009 	mov	r0, r9
    fda0:	eb0071e7 	bl	2c544 <strlen>
    fda4:	e2855002 	add	r5, r5, #2
    fda8:	e0863004 	add	r3, r6, r4
    fdac:	e28bb001 	add	fp, fp, #1
    fdb0:	e28aa004 	add	sl, sl, #4
    fdb4:	e0855000 	add	r5, r5, r0
    fdb8:	e1a01003 	mov	r1, r3
    fdbc:	eaffff87 	b	fbe0 <disasmZ80(unsigned char*, unsigned long, unsigned long, char*, int, int, int)+0x248>
    fdc0:	e3520b02 	cmp	r2, #2048	; 0x800
    fdc4:	0a0000b3 	beq	10098 <disasmZ80(unsigned char*, unsigned long, unsigned long, char*, int, int, int)+0x700>
    fdc8:	e59f05e0 	ldr	r0, [pc, #1504]	; 103b0 <disasmZ80(unsigned char*, unsigned long, unsigned long, char*, int, int, int)+0xa18>
    fdcc:	e1520000 	cmp	r2, r0
    fdd0:	1affff82 	bne	fbe0 <disasmZ80(unsigned char*, unsigned long, unsigned long, char*, int, int, int)+0x248>
    fdd4:	e59d200c 	ldr	r2, [sp, #12]
    fdd8:	e59dc004 	ldr	ip, [sp, #4]
    fddc:	e08b1002 	add	r1, fp, r2
    fde0:	e08c2001 	add	r2, ip, r1
    fde4:	e5d20001 	ldrb	r0, [r2, #1]
    fde8:	e7dc2001 	ldrb	r2, [ip, r1]
    fdec:	e59d1160 	ldr	r1, [sp, #352]	; 0x160
    fdf0:	e0822400 	add	r2, r2, r0, lsl #8
    fdf4:	e3510001 	cmp	r1, #1
    fdf8:	0a000121 	beq	10284 <disasmZ80(unsigned char*, unsigned long, unsigned long, char*, int, int, int)+0x8ec>
    fdfc:	e3510002 	cmp	r1, #2
    fe00:	0a000119 	beq	1026c <disasmZ80(unsigned char*, unsigned long, unsigned long, char*, int, int, int)+0x8d4>
    fe04:	e3510000 	cmp	r1, #0
    fe08:	1a000004 	bne	fe20 <disasmZ80(unsigned char*, unsigned long, unsigned long, char*, int, int, int)+0x488>
    fe0c:	e59f15a0 	ldr	r1, [pc, #1440]	; 103b4 <disasmZ80(unsigned char*, unsigned long, unsigned long, char*, int, int, int)+0xa1c>
    fe10:	e1a00009 	mov	r0, r9
    fe14:	e58d3014 	str	r3, [sp, #20]
    fe18:	ebffe6e5 	bl	99b4 <ee_sprintf>
    fe1c:	e59d3014 	ldr	r3, [sp, #20]
    fe20:	e59f1584 	ldr	r1, [pc, #1412]	; 103ac <disasmZ80(unsigned char*, unsigned long, unsigned long, char*, int, int, int)+0xa14>
    fe24:	e1a00003 	mov	r0, r3
    fe28:	e1a02009 	mov	r2, r9
    fe2c:	ebffe6e0 	bl	99b4 <ee_sprintf>
    fe30:	e0844000 	add	r4, r4, r0
    fe34:	e0863004 	add	r3, r6, r4
    fe38:	e1a00009 	mov	r0, r9
    fe3c:	e58d3014 	str	r3, [sp, #20]
    fe40:	eb0071bf 	bl	2c544 <strlen>
    fe44:	e59d3014 	ldr	r3, [sp, #20]
    fe48:	e2855002 	add	r5, r5, #2
    fe4c:	e1a01003 	mov	r1, r3
    fe50:	e28bb002 	add	fp, fp, #2
    fe54:	e28aa004 	add	sl, sl, #4
    fe58:	e0855000 	add	r5, r5, r0
    fe5c:	eaffff5f 	b	fbe0 <disasmZ80(unsigned char*, unsigned long, unsigned long, char*, int, int, int)+0x248>
    fe60:	e3a03000 	mov	r3, #0
    fe64:	eaffff00 	b	fa6c <disasmZ80(unsigned char*, unsigned long, unsigned long, char*, int, int, int)+0xd4>
    fe68:	e0860004 	add	r0, r6, r4
    fe6c:	e59f1544 	ldr	r1, [pc, #1348]	; 103b8 <disasmZ80(unsigned char*, unsigned long, unsigned long, char*, int, int, int)+0xa20>
    fe70:	ebffe6cf 	bl	99b4 <ee_sprintf>
    fe74:	e0804004 	add	r4, r0, r4
    fe78:	eaffff8b 	b	fcac <disasmZ80(unsigned char*, unsigned long, unsigned long, char*, int, int, int)+0x314>
    fe7c:	e5de3001 	ldrb	r3, [lr, #1]
    fe80:	e35300ff 	cmp	r3, #255	; 0xff
    fe84:	1affff01 	bne	fa90 <disasmZ80(unsigned char*, unsigned long, unsigned long, char*, int, int, int)+0xf8>
    fe88:	e5de1002 	ldrb	r1, [lr, #2]
    fe8c:	e59d201c 	ldr	r2, [sp, #28]
    fe90:	e59d3028 	ldr	r3, [sp, #40]	; 0x28
    fe94:	e35100ff 	cmp	r1, #255	; 0xff
    fe98:	e2820002 	add	r0, r2, #2
    fe9c:	e2831002 	add	r1, r3, #2
    fea0:	1a0000ba 	bne	10190 <disasmZ80(unsigned char*, unsigned long, unsigned long, char*, int, int, int)+0x7f8>
    fea4:	e5de1003 	ldrb	r1, [lr, #3]
    fea8:	e2820003 	add	r0, r2, #3
    feac:	e35100ff 	cmp	r1, #255	; 0xff
    feb0:	02822004 	addeq	r2, r2, #4
    feb4:	e2831003 	add	r1, r3, #3
    feb8:	02833004 	addeq	r3, r3, #4
    febc:	058d201c 	streq	r2, [sp, #28]
    fec0:	058d3028 	streq	r3, [sp, #40]	; 0x28
    fec4:	1a0000b1 	bne	10190 <disasmZ80(unsigned char*, unsigned long, unsigned long, char*, int, int, int)+0x7f8>
    fec8:	e28d701c 	add	r7, sp, #28
    fecc:	eafffeef 	b	fa90 <disasmZ80(unsigned char*, unsigned long, unsigned long, char*, int, int, int)+0xf8>
    fed0:	e2800001 	add	r0, r0, #1
    fed4:	e1520000 	cmp	r2, r0
    fed8:	1affff40 	bne	fbe0 <disasmZ80(unsigned char*, unsigned long, unsigned long, char*, int, int, int)+0x248>
    fedc:	e59d2160 	ldr	r2, [sp, #352]	; 0x160
    fee0:	e59d100c 	ldr	r1, [sp, #12]
    fee4:	e3520001 	cmp	r2, #1
    fee8:	e59d2004 	ldr	r2, [sp, #4]
    feec:	e082200b 	add	r2, r2, fp
    fef0:	e7d22001 	ldrb	r2, [r2, r1]
    fef4:	0a0000bc 	beq	101ec <disasmZ80(unsigned char*, unsigned long, unsigned long, char*, int, int, int)+0x854>
    fef8:	e59d1160 	ldr	r1, [sp, #352]	; 0x160
    fefc:	e3510002 	cmp	r1, #2
    ff00:	0a0000ac 	beq	101b8 <disasmZ80(unsigned char*, unsigned long, unsigned long, char*, int, int, int)+0x820>
    ff04:	e3510000 	cmp	r1, #0
    ff08:	1a000004 	bne	ff20 <disasmZ80(unsigned char*, unsigned long, unsigned long, char*, int, int, int)+0x588>
    ff0c:	e59f1474 	ldr	r1, [pc, #1140]	; 10388 <disasmZ80(unsigned char*, unsigned long, unsigned long, char*, int, int, int)+0x9f0>
    ff10:	e1a00009 	mov	r0, r9
    ff14:	e58d3014 	str	r3, [sp, #20]
    ff18:	ebffe6a5 	bl	99b4 <ee_sprintf>
    ff1c:	e59d3014 	ldr	r3, [sp, #20]
    ff20:	e1a00003 	mov	r0, r3
    ff24:	e1a01009 	mov	r1, r9
    ff28:	ebffe6a1 	bl	99b4 <ee_sprintf>
    ff2c:	e0844000 	add	r4, r4, r0
    ff30:	e1a00009 	mov	r0, r9
    ff34:	eb007182 	bl	2c544 <strlen>
    ff38:	e0863004 	add	r3, r6, r4
    ff3c:	e28bb001 	add	fp, fp, #1
    ff40:	e28aa004 	add	sl, sl, #4
    ff44:	e0855000 	add	r5, r5, r0
    ff48:	e1a01003 	mov	r1, r3
    ff4c:	eaffff23 	b	fbe0 <disasmZ80(unsigned char*, unsigned long, unsigned long, char*, int, int, int)+0x248>
    ff50:	e59d2004 	ldr	r2, [sp, #4]
    ff54:	e59d100c 	ldr	r1, [sp, #12]
    ff58:	e082200b 	add	r2, r2, fp
    ff5c:	e7d21001 	ldrb	r1, [r2, r1]
    ff60:	e59d0160 	ldr	r0, [sp, #352]	; 0x160
    ff64:	e351007f 	cmp	r1, #127	; 0x7f
    ff68:	e59d200c 	ldr	r2, [sp, #12]
    ff6c:	c2411c01 	subgt	r1, r1, #256	; 0x100
    ff70:	e3500001 	cmp	r0, #1
    ff74:	e59d0010 	ldr	r0, [sp, #16]
    ff78:	e2822002 	add	r2, r2, #2
    ff7c:	e0822000 	add	r2, r2, r0
    ff80:	e0822001 	add	r2, r2, r1
    ff84:	0a000084 	beq	1019c <disasmZ80(unsigned char*, unsigned long, unsigned long, char*, int, int, int)+0x804>
    ff88:	e59d1160 	ldr	r1, [sp, #352]	; 0x160
    ff8c:	e3510002 	cmp	r1, #2
    ff90:	0a00008e 	beq	101d0 <disasmZ80(unsigned char*, unsigned long, unsigned long, char*, int, int, int)+0x838>
    ff94:	e3510000 	cmp	r1, #0
    ff98:	1affffe0 	bne	ff20 <disasmZ80(unsigned char*, unsigned long, unsigned long, char*, int, int, int)+0x588>
    ff9c:	e6ff2072 	uxth	r2, r2
    ffa0:	e59f140c 	ldr	r1, [pc, #1036]	; 103b4 <disasmZ80(unsigned char*, unsigned long, unsigned long, char*, int, int, int)+0xa1c>
    ffa4:	e1a00009 	mov	r0, r9
    ffa8:	e58d3014 	str	r3, [sp, #20]
    ffac:	ebffe680 	bl	99b4 <ee_sprintf>
    ffb0:	e59d3014 	ldr	r3, [sp, #20]
    ffb4:	eaffffd9 	b	ff20 <disasmZ80(unsigned char*, unsigned long, unsigned long, char*, int, int, int)+0x588>
    ffb8:	e59d2160 	ldr	r2, [sp, #352]	; 0x160
    ffbc:	e59d100c 	ldr	r1, [sp, #12]
    ffc0:	e3520001 	cmp	r2, #1
    ffc4:	e59d2004 	ldr	r2, [sp, #4]
    ffc8:	e082200b 	add	r2, r2, fp
    ffcc:	e7d22001 	ldrb	r2, [r2, r1]
    ffd0:	0a0000df 	beq	10354 <disasmZ80(unsigned char*, unsigned long, unsigned long, char*, int, int, int)+0x9bc>
    ffd4:	e59d1160 	ldr	r1, [sp, #352]	; 0x160
    ffd8:	e3510002 	cmp	r1, #2
    ffdc:	0a0000d6 	beq	1033c <disasmZ80(unsigned char*, unsigned long, unsigned long, char*, int, int, int)+0x9a4>
    ffe0:	e3510000 	cmp	r1, #0
    ffe4:	1a000004 	bne	fffc <disasmZ80(unsigned char*, unsigned long, unsigned long, char*, int, int, int)+0x664>
    ffe8:	e59f1398 	ldr	r1, [pc, #920]	; 10388 <disasmZ80(unsigned char*, unsigned long, unsigned long, char*, int, int, int)+0x9f0>
    ffec:	e1a00009 	mov	r0, r9
    fff0:	e58d3014 	str	r3, [sp, #20]
    fff4:	ebffe66e 	bl	99b4 <ee_sprintf>
    fff8:	e59d3014 	ldr	r3, [sp, #20]
    fffc:	e1a00003 	mov	r0, r3
   10000:	e1a01009 	mov	r1, r9
   10004:	ebffe66a 	bl	99b4 <ee_sprintf>
   10008:	e0844000 	add	r4, r4, r0
   1000c:	e1a00009 	mov	r0, r9
   10010:	eb00714b 	bl	2c544 <strlen>
   10014:	e0863004 	add	r3, r6, r4
   10018:	e28bb001 	add	fp, fp, #1
   1001c:	e0855000 	add	r5, r5, r0
   10020:	e1a01003 	mov	r1, r3
   10024:	eafffeed 	b	fbe0 <disasmZ80(unsigned char*, unsigned long, unsigned long, char*, int, int, int)+0x248>
   10028:	e59d2004 	ldr	r2, [sp, #4]
   1002c:	e59d100c 	ldr	r1, [sp, #12]
   10030:	e082200b 	add	r2, r2, fp
   10034:	e7d22001 	ldrb	r2, [r2, r1]
   10038:	e59d0160 	ldr	r0, [sp, #352]	; 0x160
   1003c:	e352007f 	cmp	r2, #127	; 0x7f
   10040:	c1e02002 	mvngt	r2, r2
   10044:	c3a0102d 	movgt	r1, #45	; 0x2d
   10048:	d3a0102b 	movle	r1, #43	; 0x2b
   1004c:	c6ef2072 	uxtbgt	r2, r2
   10050:	c2822001 	addgt	r2, r2, #1
   10054:	e3500001 	cmp	r0, #1
   10058:	e5cd1038 	strb	r1, [sp, #56]	; 0x38
   1005c:	0a0000af 	beq	10320 <disasmZ80(unsigned char*, unsigned long, unsigned long, char*, int, int, int)+0x988>
   10060:	e3500002 	cmp	r0, #2
   10064:	0a0000a6 	beq	10304 <disasmZ80(unsigned char*, unsigned long, unsigned long, char*, int, int, int)+0x96c>
   10068:	e3500000 	cmp	r0, #0
   1006c:	1a000005 	bne	10088 <disasmZ80(unsigned char*, unsigned long, unsigned long, char*, int, int, int)+0x6f0>
   10070:	e6ef2072 	uxtb	r2, r2
   10074:	e59f130c 	ldr	r1, [pc, #780]	; 10388 <disasmZ80(unsigned char*, unsigned long, unsigned long, char*, int, int, int)+0x9f0>
   10078:	e28d0039 	add	r0, sp, #57	; 0x39
   1007c:	e58d3014 	str	r3, [sp, #20]
   10080:	ebffe64b 	bl	99b4 <ee_sprintf>
   10084:	e59d3014 	ldr	r3, [sp, #20]
   10088:	e1a00003 	mov	r0, r3
   1008c:	e1a02009 	mov	r2, r9
   10090:	e59f1324 	ldr	r1, [pc, #804]	; 103bc <disasmZ80(unsigned char*, unsigned long, unsigned long, char*, int, int, int)+0xa24>
   10094:	eafffec7 	b	fbb8 <disasmZ80(unsigned char*, unsigned long, unsigned long, char*, int, int, int)+0x220>
   10098:	e59d200c 	ldr	r2, [sp, #12]
   1009c:	e59dc004 	ldr	ip, [sp, #4]
   100a0:	e08b1002 	add	r1, fp, r2
   100a4:	e08c2001 	add	r2, ip, r1
   100a8:	e5d20001 	ldrb	r0, [r2, #1]
   100ac:	e7dc2001 	ldrb	r2, [ip, r1]
   100b0:	e59d1160 	ldr	r1, [sp, #352]	; 0x160
   100b4:	e0822400 	add	r2, r2, r0, lsl #8
   100b8:	e3510001 	cmp	r1, #1
   100bc:	0a00008a 	beq	102ec <disasmZ80(unsigned char*, unsigned long, unsigned long, char*, int, int, int)+0x954>
   100c0:	e3510002 	cmp	r1, #2
   100c4:	0a000082 	beq	102d4 <disasmZ80(unsigned char*, unsigned long, unsigned long, char*, int, int, int)+0x93c>
   100c8:	e3510000 	cmp	r1, #0
   100cc:	1a000004 	bne	100e4 <disasmZ80(unsigned char*, unsigned long, unsigned long, char*, int, int, int)+0x74c>
   100d0:	e59f12dc 	ldr	r1, [pc, #732]	; 103b4 <disasmZ80(unsigned char*, unsigned long, unsigned long, char*, int, int, int)+0xa1c>
   100d4:	e1a00009 	mov	r0, r9
   100d8:	e58d3014 	str	r3, [sp, #20]
   100dc:	ebffe634 	bl	99b4 <ee_sprintf>
   100e0:	e59d3014 	ldr	r3, [sp, #20]
   100e4:	e1a00003 	mov	r0, r3
   100e8:	e1a01009 	mov	r1, r9
   100ec:	ebffe630 	bl	99b4 <ee_sprintf>
   100f0:	e0844000 	add	r4, r4, r0
   100f4:	e1a00009 	mov	r0, r9
   100f8:	eb007111 	bl	2c544 <strlen>
   100fc:	e0863004 	add	r3, r6, r4
   10100:	e28bb002 	add	fp, fp, #2
   10104:	e28aa004 	add	sl, sl, #4
   10108:	e0855000 	add	r5, r5, r0
   1010c:	e1a01003 	mov	r1, r3
   10110:	eafffeb2 	b	fbe0 <disasmZ80(unsigned char*, unsigned long, unsigned long, char*, int, int, int)+0x248>
   10114:	e59d100c 	ldr	r1, [sp, #12]
   10118:	e59d2004 	ldr	r2, [sp, #4]
   1011c:	e7d22001 	ldrb	r2, [r2, r1]
   10120:	e59d1160 	ldr	r1, [sp, #352]	; 0x160
   10124:	e24220c7 	sub	r2, r2, #199	; 0xc7
   10128:	e3510001 	cmp	r1, #1
   1012c:	0a000061 	beq	102b8 <disasmZ80(unsigned char*, unsigned long, unsigned long, char*, int, int, int)+0x920>
   10130:	e3510002 	cmp	r1, #2
   10134:	0a000058 	beq	1029c <disasmZ80(unsigned char*, unsigned long, unsigned long, char*, int, int, int)+0x904>
   10138:	e3510000 	cmp	r1, #0
   1013c:	1a000005 	bne	10158 <disasmZ80(unsigned char*, unsigned long, unsigned long, char*, int, int, int)+0x7c0>
   10140:	e6ef2072 	uxtb	r2, r2
   10144:	e59f123c 	ldr	r1, [pc, #572]	; 10388 <disasmZ80(unsigned char*, unsigned long, unsigned long, char*, int, int, int)+0x9f0>
   10148:	e1a00009 	mov	r0, r9
   1014c:	e58d3014 	str	r3, [sp, #20]
   10150:	ebffe617 	bl	99b4 <ee_sprintf>
   10154:	e59d3014 	ldr	r3, [sp, #20]
   10158:	e1a00003 	mov	r0, r3
   1015c:	e1a01009 	mov	r1, r9
   10160:	ebffe613 	bl	99b4 <ee_sprintf>
   10164:	e0844000 	add	r4, r4, r0
   10168:	e1a00009 	mov	r0, r9
   1016c:	eb0070f4 	bl	2c544 <strlen>
   10170:	e0863004 	add	r3, r6, r4
   10174:	e28aa004 	add	sl, sl, #4
   10178:	e0855000 	add	r5, r5, r0
   1017c:	e1a01003 	mov	r1, r3
   10180:	eafffe96 	b	fbe0 <disasmZ80(unsigned char*, unsigned long, unsigned long, char*, int, int, int)+0x248>
   10184:	e3520c01 	cmp	r2, #256	; 0x100
   10188:	0affff53 	beq	fedc <disasmZ80(unsigned char*, unsigned long, unsigned long, char*, int, int, int)+0x544>
   1018c:	eafffe93 	b	fbe0 <disasmZ80(unsigned char*, unsigned long, unsigned long, char*, int, int, int)+0x248>
   10190:	e58d001c 	str	r0, [sp, #28]
   10194:	e58d1028 	str	r1, [sp, #40]	; 0x28
   10198:	eaffff4a 	b	fec8 <disasmZ80(unsigned char*, unsigned long, unsigned long, char*, int, int, int)+0x530>
   1019c:	e6ff2072 	uxth	r2, r2
   101a0:	e59f1218 	ldr	r1, [pc, #536]	; 103c0 <disasmZ80(unsigned char*, unsigned long, unsigned long, char*, int, int, int)+0xa28>
   101a4:	e1a00009 	mov	r0, r9
   101a8:	e58d3014 	str	r3, [sp, #20]
   101ac:	ebffe600 	bl	99b4 <ee_sprintf>
   101b0:	e59d3014 	ldr	r3, [sp, #20]
   101b4:	eaffff59 	b	ff20 <disasmZ80(unsigned char*, unsigned long, unsigned long, char*, int, int, int)+0x588>
   101b8:	e59f1204 	ldr	r1, [pc, #516]	; 103c4 <disasmZ80(unsigned char*, unsigned long, unsigned long, char*, int, int, int)+0xa2c>
   101bc:	e1a00009 	mov	r0, r9
   101c0:	e58d3014 	str	r3, [sp, #20]
   101c4:	ebffe5fa 	bl	99b4 <ee_sprintf>
   101c8:	e59d3014 	ldr	r3, [sp, #20]
   101cc:	eaffff53 	b	ff20 <disasmZ80(unsigned char*, unsigned long, unsigned long, char*, int, int, int)+0x588>
   101d0:	e6ff2072 	uxth	r2, r2
   101d4:	e59f11ec 	ldr	r1, [pc, #492]	; 103c8 <disasmZ80(unsigned char*, unsigned long, unsigned long, char*, int, int, int)+0xa30>
   101d8:	e1a00009 	mov	r0, r9
   101dc:	e58d3014 	str	r3, [sp, #20]
   101e0:	ebffe5f3 	bl	99b4 <ee_sprintf>
   101e4:	e59d3014 	ldr	r3, [sp, #20]
   101e8:	eaffff4c 	b	ff20 <disasmZ80(unsigned char*, unsigned long, unsigned long, char*, int, int, int)+0x588>
   101ec:	e59f11d8 	ldr	r1, [pc, #472]	; 103cc <disasmZ80(unsigned char*, unsigned long, unsigned long, char*, int, int, int)+0xa34>
   101f0:	e1a00009 	mov	r0, r9
   101f4:	e58d3014 	str	r3, [sp, #20]
   101f8:	ebffe5ed 	bl	99b4 <ee_sprintf>
   101fc:	e59d3014 	ldr	r3, [sp, #20]
   10200:	eaffff46 	b	ff20 <disasmZ80(unsigned char*, unsigned long, unsigned long, char*, int, int, int)+0x588>
   10204:	e6ef2072 	uxtb	r2, r2
   10208:	e59f11b4 	ldr	r1, [pc, #436]	; 103c4 <disasmZ80(unsigned char*, unsigned long, unsigned long, char*, int, int, int)+0xa2c>
   1020c:	e28d0039 	add	r0, sp, #57	; 0x39
   10210:	e58d3014 	str	r3, [sp, #20]
   10214:	ebffe5e6 	bl	99b4 <ee_sprintf>
   10218:	e59d3014 	ldr	r3, [sp, #20]
   1021c:	eafffe62 	b	fbac <disasmZ80(unsigned char*, unsigned long, unsigned long, char*, int, int, int)+0x214>
   10220:	e6ef2072 	uxtb	r2, r2
   10224:	e59f11a0 	ldr	r1, [pc, #416]	; 103cc <disasmZ80(unsigned char*, unsigned long, unsigned long, char*, int, int, int)+0xa34>
   10228:	e28d0039 	add	r0, sp, #57	; 0x39
   1022c:	e58d3014 	str	r3, [sp, #20]
   10230:	ebffe5df 	bl	99b4 <ee_sprintf>
   10234:	e59d3014 	ldr	r3, [sp, #20]
   10238:	eafffe5b 	b	fbac <disasmZ80(unsigned char*, unsigned long, unsigned long, char*, int, int, int)+0x214>
   1023c:	e59f1180 	ldr	r1, [pc, #384]	; 103c4 <disasmZ80(unsigned char*, unsigned long, unsigned long, char*, int, int, int)+0xa2c>
   10240:	e1a00009 	mov	r0, r9
   10244:	e58d3014 	str	r3, [sp, #20]
   10248:	ebffe5d9 	bl	99b4 <ee_sprintf>
   1024c:	e59d3014 	ldr	r3, [sp, #20]
   10250:	eafffecc 	b	fd88 <disasmZ80(unsigned char*, unsigned long, unsigned long, char*, int, int, int)+0x3f0>
   10254:	e59f1170 	ldr	r1, [pc, #368]	; 103cc <disasmZ80(unsigned char*, unsigned long, unsigned long, char*, int, int, int)+0xa34>
   10258:	e1a00009 	mov	r0, r9
   1025c:	e58d3014 	str	r3, [sp, #20]
   10260:	ebffe5d3 	bl	99b4 <ee_sprintf>
   10264:	e59d3014 	ldr	r3, [sp, #20]
   10268:	eafffec6 	b	fd88 <disasmZ80(unsigned char*, unsigned long, unsigned long, char*, int, int, int)+0x3f0>
   1026c:	e59f1154 	ldr	r1, [pc, #340]	; 103c8 <disasmZ80(unsigned char*, unsigned long, unsigned long, char*, int, int, int)+0xa30>
   10270:	e1a00009 	mov	r0, r9
   10274:	e58d3014 	str	r3, [sp, #20]
   10278:	ebffe5cd 	bl	99b4 <ee_sprintf>
   1027c:	e59d3014 	ldr	r3, [sp, #20]
   10280:	eafffee6 	b	fe20 <disasmZ80(unsigned char*, unsigned long, unsigned long, char*, int, int, int)+0x488>
   10284:	e59f1134 	ldr	r1, [pc, #308]	; 103c0 <disasmZ80(unsigned char*, unsigned long, unsigned long, char*, int, int, int)+0xa28>
   10288:	e1a00009 	mov	r0, r9
   1028c:	e58d3014 	str	r3, [sp, #20]
   10290:	ebffe5c7 	bl	99b4 <ee_sprintf>
   10294:	e59d3014 	ldr	r3, [sp, #20]
   10298:	eafffee0 	b	fe20 <disasmZ80(unsigned char*, unsigned long, unsigned long, char*, int, int, int)+0x488>
   1029c:	e6ef2072 	uxtb	r2, r2
   102a0:	e59f111c 	ldr	r1, [pc, #284]	; 103c4 <disasmZ80(unsigned char*, unsigned long, unsigned long, char*, int, int, int)+0xa2c>
   102a4:	e1a00009 	mov	r0, r9
   102a8:	e58d3014 	str	r3, [sp, #20]
   102ac:	ebffe5c0 	bl	99b4 <ee_sprintf>
   102b0:	e59d3014 	ldr	r3, [sp, #20]
   102b4:	eaffffa7 	b	10158 <disasmZ80(unsigned char*, unsigned long, unsigned long, char*, int, int, int)+0x7c0>
   102b8:	e6ef2072 	uxtb	r2, r2
   102bc:	e59f1108 	ldr	r1, [pc, #264]	; 103cc <disasmZ80(unsigned char*, unsigned long, unsigned long, char*, int, int, int)+0xa34>
   102c0:	e1a00009 	mov	r0, r9
   102c4:	e58d3014 	str	r3, [sp, #20]
   102c8:	ebffe5b9 	bl	99b4 <ee_sprintf>
   102cc:	e59d3014 	ldr	r3, [sp, #20]
   102d0:	eaffffa0 	b	10158 <disasmZ80(unsigned char*, unsigned long, unsigned long, char*, int, int, int)+0x7c0>
   102d4:	e59f10ec 	ldr	r1, [pc, #236]	; 103c8 <disasmZ80(unsigned char*, unsigned long, unsigned long, char*, int, int, int)+0xa30>
   102d8:	e1a00009 	mov	r0, r9
   102dc:	e58d3014 	str	r3, [sp, #20]
   102e0:	ebffe5b3 	bl	99b4 <ee_sprintf>
   102e4:	e59d3014 	ldr	r3, [sp, #20]
   102e8:	eaffff7d 	b	100e4 <disasmZ80(unsigned char*, unsigned long, unsigned long, char*, int, int, int)+0x74c>
   102ec:	e59f10cc 	ldr	r1, [pc, #204]	; 103c0 <disasmZ80(unsigned char*, unsigned long, unsigned long, char*, int, int, int)+0xa28>
   102f0:	e1a00009 	mov	r0, r9
   102f4:	e58d3014 	str	r3, [sp, #20]
   102f8:	ebffe5ad 	bl	99b4 <ee_sprintf>
   102fc:	e59d3014 	ldr	r3, [sp, #20]
   10300:	eaffff77 	b	100e4 <disasmZ80(unsigned char*, unsigned long, unsigned long, char*, int, int, int)+0x74c>
   10304:	e6ef2072 	uxtb	r2, r2
   10308:	e59f10b4 	ldr	r1, [pc, #180]	; 103c4 <disasmZ80(unsigned char*, unsigned long, unsigned long, char*, int, int, int)+0xa2c>
   1030c:	e28d0039 	add	r0, sp, #57	; 0x39
   10310:	e58d3014 	str	r3, [sp, #20]
   10314:	ebffe5a6 	bl	99b4 <ee_sprintf>
   10318:	e59d3014 	ldr	r3, [sp, #20]
   1031c:	eaffff59 	b	10088 <disasmZ80(unsigned char*, unsigned long, unsigned long, char*, int, int, int)+0x6f0>
   10320:	e6ef2072 	uxtb	r2, r2
   10324:	e59f10a0 	ldr	r1, [pc, #160]	; 103cc <disasmZ80(unsigned char*, unsigned long, unsigned long, char*, int, int, int)+0xa34>
   10328:	e28d0039 	add	r0, sp, #57	; 0x39
   1032c:	e58d3014 	str	r3, [sp, #20]
   10330:	ebffe59f 	bl	99b4 <ee_sprintf>
   10334:	e59d3014 	ldr	r3, [sp, #20]
   10338:	eaffff52 	b	10088 <disasmZ80(unsigned char*, unsigned long, unsigned long, char*, int, int, int)+0x6f0>
   1033c:	e59f1080 	ldr	r1, [pc, #128]	; 103c4 <disasmZ80(unsigned char*, unsigned long, unsigned long, char*, int, int, int)+0xa2c>
   10340:	e1a00009 	mov	r0, r9
   10344:	e58d3014 	str	r3, [sp, #20]
   10348:	ebffe599 	bl	99b4 <ee_sprintf>
   1034c:	e59d3014 	ldr	r3, [sp, #20]
   10350:	eaffff29 	b	fffc <disasmZ80(unsigned char*, unsigned long, unsigned long, char*, int, int, int)+0x664>
   10354:	e59f1070 	ldr	r1, [pc, #112]	; 103cc <disasmZ80(unsigned char*, unsigned long, unsigned long, char*, int, int, int)+0xa34>
   10358:	e1a00009 	mov	r0, r9
   1035c:	e58d3014 	str	r3, [sp, #20]
   10360:	ebffe593 	bl	99b4 <ee_sprintf>
   10364:	e59d3014 	ldr	r3, [sp, #20]
   10368:	eaffff23 	b	fffc <disasmZ80(unsigned char*, unsigned long, unsigned long, char*, int, int, int)+0x664>
   1036c:	0002eab8 	.word	0x0002eab8
   10370:	0002eb04 	.word	0x0002eb04
   10374:	0002eb0c 	.word	0x0002eb0c
   10378:	0002eaac 	.word	0x0002eaac
   1037c:	00035c6c 	.word	0x00035c6c
   10380:	00035a40 	.word	0x00035a40
   10384:	00000201 	.word	0x00000201
   10388:	0002ead4 	.word	0x0002ead4
   1038c:	0002eb30 	.word	0x0002eb30
   10390:	0002ee9c 	.word	0x0002ee9c
   10394:	0002eb1c 	.word	0x0002eb1c
   10398:	0002eb38 	.word	0x0002eb38
   1039c:	0002eb14 	.word	0x0002eb14
   103a0:	0002eb24 	.word	0x0002eb24
   103a4:	00000101 	.word	0x00000101
   103a8:	00000102 	.word	0x00000102
   103ac:	000301dc 	.word	0x000301dc
   103b0:	00000801 	.word	0x00000801
   103b4:	0002eaec 	.word	0x0002eaec
   103b8:	0002eb20 	.word	0x0002eb20
   103bc:	0002eb28 	.word	0x0002eb28
   103c0:	0002eaf4 	.word	0x0002eaf4
   103c4:	0002eae4 	.word	0x0002eae4
   103c8:	0002eafc 	.word	0x0002eafc
   103cc:	0002eadc 	.word	0x0002eadc

000103d0 <McTRS80CmdFormat::McTRS80CmdFormat()>:
   103d0:	e12fff1e 	bx	lr

000103d4 <McTRS80CmdFormat::proc(void (*)(unsigned long, unsigned char const*, unsigned long), void (*)(Z80Registers const&), unsigned char const*, int)>:
   103d4:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   103d8:	e24dd054 	sub	sp, sp, #84	; 0x54
   103dc:	e59d5078 	ldr	r5, [sp, #120]	; 0x78
   103e0:	e2458002 	sub	r8, r5, #2
   103e4:	e3580000 	cmp	r8, #0
   103e8:	da00002a 	ble	10498 <McTRS80CmdFormat::proc(void (*)(unsigned long, unsigned char const*, unsigned long), void (*)(Z80Registers const&), unsigned char const*, int)+0xc4>
   103ec:	e1a0a001 	mov	sl, r1
   103f0:	e1a07003 	mov	r7, r3
   103f4:	e3a01000 	mov	r1, #0
   103f8:	e59f9200 	ldr	r9, [pc, #512]	; 10600 <McTRS80CmdFormat::proc(void (*)(unsigned long, unsigned char const*, unsigned long), void (*)(Z80Registers const&), unsigned char const*, int)+0x22c>
   103fc:	e59fb200 	ldr	fp, [pc, #512]	; 10604 <McTRS80CmdFormat::proc(void (*)(unsigned long, unsigned char const*, unsigned long), void (*)(Z80Registers const&), unsigned char const*, int)+0x230>
   10400:	e58d2004 	str	r2, [sp, #4]
   10404:	e2455001 	sub	r5, r5, #1
   10408:	e1a02007 	mov	r2, r7
   1040c:	e7f23001 	ldrb	r3, [r2, r1]!
   10410:	e2816002 	add	r6, r1, #2
   10414:	e5d24001 	ldrb	r4, [r2, #1]
   10418:	e2432001 	sub	r2, r3, #1
   1041c:	e1540005 	cmp	r4, r5
   10420:	a1a04005 	movge	r4, r5
   10424:	e3540000 	cmp	r4, #0
   10428:	03a04c01 	moveq	r4, #256	; 0x100
   1042c:	e3520004 	cmp	r2, #4
   10430:	979ff102 	ldrls	pc, [pc, r2, lsl #2]
   10434:	ea000044 	b	1054c <McTRS80CmdFormat::proc(void (*)(unsigned long, unsigned char const*, unsigned long), void (*)(Z80Registers const&), unsigned char const*, int)+0x178>
   10438:	0001051c 	.word	0x0001051c
   1043c:	000104a0 	.word	0x000104a0
   10440:	00010484 	.word	0x00010484
   10444:	00010470 	.word	0x00010470
   10448:	0001044c 	.word	0x0001044c
   1044c:	e59f21b4 	ldr	r2, [pc, #436]	; 10608 <McTRS80CmdFormat::proc(void (*)(unsigned long, unsigned char const*, unsigned long), void (*)(Z80Registers const&), unsigned char const*, int)+0x234>
   10450:	e3a01004 	mov	r1, #4
   10454:	e5990000 	ldr	r0, [r9]
   10458:	ebffe4d5 	bl	97b4 <LogWrite>
   1045c:	e0861004 	add	r1, r6, r4
   10460:	e1510008 	cmp	r1, r8
   10464:	baffffe7 	blt	10408 <McTRS80CmdFormat::proc(void (*)(unsigned long, unsigned char const*, unsigned long), void (*)(Z80Registers const&), unsigned char const*, int)+0x34>
   10468:	e28dd054 	add	sp, sp, #84	; 0x54
   1046c:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10470:	e59f2194 	ldr	r2, [pc, #404]	; 1060c <McTRS80CmdFormat::proc(void (*)(unsigned long, unsigned char const*, unsigned long), void (*)(Z80Registers const&), unsigned char const*, int)+0x238>
   10474:	e3a01004 	mov	r1, #4
   10478:	e5990000 	ldr	r0, [r9]
   1047c:	ebffe4cc 	bl	97b4 <LogWrite>
   10480:	eafffff5 	b	1045c <McTRS80CmdFormat::proc(void (*)(unsigned long, unsigned char const*, unsigned long), void (*)(Z80Registers const&), unsigned char const*, int)+0x88>
   10484:	e59f3174 	ldr	r3, [pc, #372]	; 10600 <McTRS80CmdFormat::proc(void (*)(unsigned long, unsigned char const*, unsigned long), void (*)(Z80Registers const&), unsigned char const*, int)+0x22c>
   10488:	e59f2180 	ldr	r2, [pc, #384]	; 10610 <McTRS80CmdFormat::proc(void (*)(unsigned long, unsigned char const*, unsigned long), void (*)(Z80Registers const&), unsigned char const*, int)+0x23c>
   1048c:	e5930000 	ldr	r0, [r3]
   10490:	e3a01004 	mov	r1, #4
   10494:	ebffe4c6 	bl	97b4 <LogWrite>
   10498:	e28dd054 	add	sp, sp, #84	; 0x54
   1049c:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   104a0:	e3540001 	cmp	r4, #1
   104a4:	1a00002d 	bne	10560 <McTRS80CmdFormat::proc(void (*)(unsigned long, unsigned char const*, unsigned long), void (*)(Z80Registers const&), unsigned char const*, int)+0x18c>
   104a8:	e3a03000 	mov	r3, #0
   104ac:	e7d72006 	ldrb	r2, [r7, r6]
   104b0:	e28d0050 	add	r0, sp, #80	; 0x50
   104b4:	e58d3024 	str	r3, [sp, #36]	; 0x24
   104b8:	e5202048 	str	r2, [r0, #-72]!	; 0xffffffb8
   104bc:	e58d3020 	str	r3, [sp, #32]
   104c0:	e58d301c 	str	r3, [sp, #28]
   104c4:	e58d3018 	str	r3, [sp, #24]
   104c8:	e58d3014 	str	r3, [sp, #20]
   104cc:	e58d3010 	str	r3, [sp, #16]
   104d0:	e58d300c 	str	r3, [sp, #12]
   104d4:	e58d3038 	str	r3, [sp, #56]	; 0x38
   104d8:	e58d3034 	str	r3, [sp, #52]	; 0x34
   104dc:	e58d3030 	str	r3, [sp, #48]	; 0x30
   104e0:	e58d302c 	str	r3, [sp, #44]	; 0x2c
   104e4:	e58d3028 	str	r3, [sp, #40]	; 0x28
   104e8:	e58d304c 	str	r3, [sp, #76]	; 0x4c
   104ec:	e58d3048 	str	r3, [sp, #72]	; 0x48
   104f0:	e58d3044 	str	r3, [sp, #68]	; 0x44
   104f4:	e58d3040 	str	r3, [sp, #64]	; 0x40
   104f8:	e58d303c 	str	r3, [sp, #60]	; 0x3c
   104fc:	e59d3004 	ldr	r3, [sp, #4]
   10500:	e12fff33 	blx	r3
   10504:	e59d3008 	ldr	r3, [sp, #8]
   10508:	e59f2104 	ldr	r2, [pc, #260]	; 10614 <McTRS80CmdFormat::proc(void (*)(unsigned long, unsigned char const*, unsigned long), void (*)(Z80Registers const&), unsigned char const*, int)+0x240>
   1050c:	e3a01004 	mov	r1, #4
   10510:	e5990000 	ldr	r0, [r9]
   10514:	ebffe4a6 	bl	97b4 <LogWrite>
   10518:	eaffffcf 	b	1045c <McTRS80CmdFormat::proc(void (*)(unsigned long, unsigned char const*, unsigned long), void (*)(Z80Registers const&), unsigned char const*, int)+0x88>
   1051c:	e0873006 	add	r3, r7, r6
   10520:	e7d70006 	ldrb	r0, [r7, r6]
   10524:	e3540002 	cmp	r4, #2
   10528:	e5d33001 	ldrb	r3, [r3, #1]
   1052c:	e2816004 	add	r6, r1, #4
   10530:	d28440fe 	addle	r4, r4, #254	; 0xfe
   10534:	c2444002 	subgt	r4, r4, #2
   10538:	e0800403 	add	r0, r0, r3, lsl #8
   1053c:	e1a02004 	mov	r2, r4
   10540:	e0871006 	add	r1, r7, r6
   10544:	e12fff3a 	blx	sl
   10548:	eaffffc3 	b	1045c <McTRS80CmdFormat::proc(void (*)(unsigned long, unsigned char const*, unsigned long), void (*)(Z80Registers const&), unsigned char const*, int)+0x88>
   1054c:	e1a0200b 	mov	r2, fp
   10550:	e3a01004 	mov	r1, #4
   10554:	e5990000 	ldr	r0, [r9]
   10558:	ebffe495 	bl	97b4 <LogWrite>
   1055c:	eaffffbe 	b	1045c <McTRS80CmdFormat::proc(void (*)(unsigned long, unsigned char const*, unsigned long), void (*)(Z80Registers const&), unsigned char const*, int)+0x88>
   10560:	e3540002 	cmp	r4, #2
   10564:	1a000020 	bne	105ec <McTRS80CmdFormat::proc(void (*)(unsigned long, unsigned char const*, unsigned long), void (*)(Z80Registers const&), unsigned char const*, int)+0x218>
   10568:	e3a03000 	mov	r3, #0
   1056c:	e0872006 	add	r2, r7, r6
   10570:	e5d2c001 	ldrb	ip, [r2, #1]
   10574:	e7d72006 	ldrb	r2, [r7, r6]
   10578:	e28d0050 	add	r0, sp, #80	; 0x50
   1057c:	e082240c 	add	r2, r2, ip, lsl #8
   10580:	e58d3024 	str	r3, [sp, #36]	; 0x24
   10584:	e5202048 	str	r2, [r0, #-72]!	; 0xffffffb8
   10588:	e58d3020 	str	r3, [sp, #32]
   1058c:	e58d301c 	str	r3, [sp, #28]
   10590:	e58d3018 	str	r3, [sp, #24]
   10594:	e58d3014 	str	r3, [sp, #20]
   10598:	e58d3010 	str	r3, [sp, #16]
   1059c:	e58d300c 	str	r3, [sp, #12]
   105a0:	e58d3038 	str	r3, [sp, #56]	; 0x38
   105a4:	e58d3034 	str	r3, [sp, #52]	; 0x34
   105a8:	e58d3030 	str	r3, [sp, #48]	; 0x30
   105ac:	e58d302c 	str	r3, [sp, #44]	; 0x2c
   105b0:	e58d3028 	str	r3, [sp, #40]	; 0x28
   105b4:	e58d304c 	str	r3, [sp, #76]	; 0x4c
   105b8:	e58d3048 	str	r3, [sp, #72]	; 0x48
   105bc:	e58d3044 	str	r3, [sp, #68]	; 0x44
   105c0:	e58d3040 	str	r3, [sp, #64]	; 0x40
   105c4:	e58d303c 	str	r3, [sp, #60]	; 0x3c
   105c8:	e59d3004 	ldr	r3, [sp, #4]
   105cc:	e2816004 	add	r6, r1, #4
   105d0:	e12fff33 	blx	r3
   105d4:	e59d3008 	ldr	r3, [sp, #8]
   105d8:	e59f2038 	ldr	r2, [pc, #56]	; 10618 <McTRS80CmdFormat::proc(void (*)(unsigned long, unsigned char const*, unsigned long), void (*)(Z80Registers const&), unsigned char const*, int)+0x244>
   105dc:	e3a01004 	mov	r1, #4
   105e0:	e5990000 	ldr	r0, [r9]
   105e4:	ebffe472 	bl	97b4 <LogWrite>
   105e8:	eaffff9b 	b	1045c <McTRS80CmdFormat::proc(void (*)(unsigned long, unsigned char const*, unsigned long), void (*)(Z80Registers const&), unsigned char const*, int)+0x88>
   105ec:	e59f2028 	ldr	r2, [pc, #40]	; 1061c <McTRS80CmdFormat::proc(void (*)(unsigned long, unsigned char const*, unsigned long), void (*)(Z80Registers const&), unsigned char const*, int)+0x248>
   105f0:	e3a01004 	mov	r1, #4
   105f4:	e5990000 	ldr	r0, [r9]
   105f8:	ebffe46d 	bl	97b4 <LogWrite>
   105fc:	eaffff96 	b	1045c <McTRS80CmdFormat::proc(void (*)(unsigned long, unsigned char const*, unsigned long), void (*)(Z80Registers const&), unsigned char const*, int)+0x88>
   10600:	0004206c 	.word	0x0004206c
   10604:	0002ed94 	.word	0x0002ed94
   10608:	0002ed8c 	.word	0x0002ed8c
   1060c:	0002ed74 	.word	0x0002ed74
   10610:	0002ed64 	.word	0x0002ed64
   10614:	0002ed30 	.word	0x0002ed30
   10618:	0002ed40 	.word	0x0002ed40
   1061c:	0002ed50 	.word	0x0002ed50

00010620 <srec_init>:
   10620:	e3a02000 	mov	r2, #0
   10624:	e59f300c 	ldr	r3, [pc, #12]	; 10638 <srec_init+0x18>
   10628:	e5c32000 	strb	r2, [r3]
   1062c:	e58320f8 	str	r2, [r3, #248]	; 0xf8
   10630:	e5c320fc 	strb	r2, [r3, #252]	; 0xfc
   10634:	e12fff1e 	bx	lr
   10638:	00043c48 	.word	0x00043c48

0001063c <chToNybble(int)>:
   1063c:	e2403030 	sub	r3, r0, #48	; 0x30
   10640:	e3530036 	cmp	r3, #54	; 0x36
   10644:	93a03000 	movls	r3, #0
   10648:	83a03001 	movhi	r3, #1
   1064c:	e240203a 	sub	r2, r0, #58	; 0x3a
   10650:	e3520006 	cmp	r2, #6
   10654:	93833001 	orrls	r3, r3, #1
   10658:	e3530000 	cmp	r3, #0
   1065c:	1a000002 	bne	1066c <chToNybble(int)+0x30>
   10660:	e2403047 	sub	r3, r0, #71	; 0x47
   10664:	e3530019 	cmp	r3, #25
   10668:	8a000002 	bhi	10678 <chToNybble(int)+0x3c>
   1066c:	e3a02005 	mov	r2, #5
   10670:	e59f3010 	ldr	r3, [pc, #16]	; 10688 <chToNybble(int)+0x4c>
   10674:	e5c320fc 	strb	r2, [r3, #252]	; 0xfc
   10678:	e3500039 	cmp	r0, #57	; 0x39
   1067c:	c2400007 	subgt	r0, r0, #7
   10680:	e200000f 	and	r0, r0, #15
   10684:	e12fff1e 	bx	lr
   10688:	00043c48 	.word	0x00043c48

0001068c <srec_handle_char(int)>:
   1068c:	e92d4010 	push	{r4, lr}
   10690:	e59f4454 	ldr	r4, [pc, #1108]	; 10aec <srec_handle_char(int)+0x460>
   10694:	e1a03000 	mov	r3, r0
   10698:	e59420f8 	ldr	r2, [r4, #248]	; 0xf8
   1069c:	e5d41000 	ldrb	r1, [r4]
   106a0:	e2822001 	add	r2, r2, #1
   106a4:	e58420f8 	str	r2, [r4, #248]	; 0xf8
   106a8:	e3510005 	cmp	r1, #5
   106ac:	979ff101 	ldrls	pc, [pc, r1, lsl #2]
   106b0:	ea000045 	b	107cc <srec_handle_char(int)+0x140>
   106b4:	00010890 	.word	0x00010890
   106b8:	000108b4 	.word	0x000108b4
   106bc:	00010920 	.word	0x00010920
   106c0:	000106cc 	.word	0x000106cc
   106c4:	000109b8 	.word	0x000109b8
   106c8:	000107d4 	.word	0x000107d4
   106cc:	e2401030 	sub	r1, r0, #48	; 0x30
   106d0:	e3510036 	cmp	r1, #54	; 0x36
   106d4:	93a01000 	movls	r1, #0
   106d8:	83a01001 	movhi	r1, #1
   106dc:	e240203a 	sub	r2, r0, #58	; 0x3a
   106e0:	e3520006 	cmp	r2, #6
   106e4:	93811001 	orrls	r1, r1, #1
   106e8:	e5d42028 	ldrb	r2, [r4, #40]	; 0x28
   106ec:	e3510000 	cmp	r1, #0
   106f0:	e1a02202 	lsl	r2, r2, #4
   106f4:	e6ef2072 	uxtb	r2, r2
   106f8:	1a000002 	bne	10708 <srec_handle_char(int)+0x7c>
   106fc:	e2401047 	sub	r1, r0, #71	; 0x47
   10700:	e3510019 	cmp	r1, #25
   10704:	8a000001 	bhi	10710 <srec_handle_char(int)+0x84>
   10708:	e3a01005 	mov	r1, #5
   1070c:	e5c410fc 	strb	r1, [r4, #252]	; 0xfc
   10710:	e3530039 	cmp	r3, #57	; 0x39
   10714:	c2433007 	subgt	r3, r3, #7
   10718:	e5941010 	ldr	r1, [r4, #16]
   1071c:	e203300f 	and	r3, r3, #15
   10720:	e0823003 	add	r3, r2, r3
   10724:	e2812001 	add	r2, r1, #1
   10728:	e6ef3073 	uxtb	r3, r3
   1072c:	e212c001 	ands	ip, r2, #1
   10730:	e5c43028 	strb	r3, [r4, #40]	; 0x28
   10734:	e5842010 	str	r2, [r4, #16]
   10738:	1a000006 	bne	10758 <srec_handle_char(int)+0xcc>
   1073c:	e5940024 	ldr	r0, [r4, #36]	; 0x24
   10740:	e5941004 	ldr	r1, [r4, #4]
   10744:	e0830400 	add	r0, r3, r0, lsl #8
   10748:	e0813003 	add	r3, r1, r3
   1074c:	e5c4c028 	strb	ip, [r4, #40]	; 0x28
   10750:	e5840024 	str	r0, [r4, #36]	; 0x24
   10754:	e5843004 	str	r3, [r4, #4]
   10758:	e594300c 	ldr	r3, [r4, #12]
   1075c:	e1520083 	cmp	r2, r3, lsl #1
   10760:	1a000019 	bne	107cc <srec_handle_char(int)+0x140>
   10764:	e5d43001 	ldrb	r3, [r4, #1]
   10768:	e3530001 	cmp	r3, #1
   1076c:	1a000004 	bne	10784 <srec_handle_char(int)+0xf8>
   10770:	e5940024 	ldr	r0, [r4, #36]	; 0x24
   10774:	e5943100 	ldr	r3, [r4, #256]	; 0x100
   10778:	e5840008 	str	r0, [r4, #8]
   1077c:	e12fff33 	blx	r3
   10780:	e5d43001 	ldrb	r3, [r4, #1]
   10784:	e3a02000 	mov	r2, #0
   10788:	e1530002 	cmp	r3, r2
   1078c:	e584201c 	str	r2, [r4, #28]
   10790:	1a0000cf 	bne	10ad4 <srec_handle_char(int)+0x448>
   10794:	e5942010 	ldr	r2, [r4, #16]
   10798:	e5943018 	ldr	r3, [r4, #24]
   1079c:	e0822fa2 	add	r2, r2, r2, lsr #31
   107a0:	e04330c2 	sub	r3, r3, r2, asr #1
   107a4:	e2433001 	sub	r3, r3, #1
   107a8:	e3530000 	cmp	r3, #0
   107ac:	e584301c 	str	r3, [r4, #28]
   107b0:	c3a02004 	movgt	r2, #4
   107b4:	da0000c6 	ble	10ad4 <srec_handle_char(int)+0x448>
   107b8:	e3a03000 	mov	r3, #0
   107bc:	e5c42000 	strb	r2, [r4]
   107c0:	e5c43028 	strb	r3, [r4, #40]	; 0x28
   107c4:	e5843020 	str	r3, [r4, #32]
   107c8:	e5843010 	str	r3, [r4, #16]
   107cc:	e5d400fc 	ldrb	r0, [r4, #252]	; 0xfc
   107d0:	e8bd8010 	pop	{r4, pc}
   107d4:	e2402030 	sub	r2, r0, #48	; 0x30
   107d8:	e3520036 	cmp	r2, #54	; 0x36
   107dc:	93a02000 	movls	r2, #0
   107e0:	83a02001 	movhi	r2, #1
   107e4:	e240103a 	sub	r1, r0, #58	; 0x3a
   107e8:	e3510006 	cmp	r1, #6
   107ec:	93822001 	orrls	r2, r2, #1
   107f0:	e5d40028 	ldrb	r0, [r4, #40]	; 0x28
   107f4:	e3520000 	cmp	r2, #0
   107f8:	e1a00200 	lsl	r0, r0, #4
   107fc:	e6ef0070 	uxtb	r0, r0
   10800:	1a000002 	bne	10810 <srec_handle_char(int)+0x184>
   10804:	e2432047 	sub	r2, r3, #71	; 0x47
   10808:	e3520019 	cmp	r2, #25
   1080c:	8a000001 	bhi	10818 <srec_handle_char(int)+0x18c>
   10810:	e3a02005 	mov	r2, #5
   10814:	e5c420fc 	strb	r2, [r4, #252]	; 0xfc
   10818:	e3530039 	cmp	r3, #57	; 0x39
   1081c:	c2433007 	subgt	r3, r3, #7
   10820:	e5942010 	ldr	r2, [r4, #16]
   10824:	e203300f 	and	r3, r3, #15
   10828:	e2822001 	add	r2, r2, #1
   1082c:	e0803003 	add	r3, r0, r3
   10830:	e6ef3073 	uxtb	r3, r3
   10834:	e3520002 	cmp	r2, #2
   10838:	e5c43028 	strb	r3, [r4, #40]	; 0x28
   1083c:	e5842010 	str	r2, [r4, #16]
   10840:	1affffe1 	bne	107cc <srec_handle_char(int)+0x140>
   10844:	e5942004 	ldr	r2, [r4, #4]
   10848:	e3a01000 	mov	r1, #0
   1084c:	e1e02002 	mvn	r2, r2
   10850:	e6ef2072 	uxtb	r2, r2
   10854:	e1530002 	cmp	r3, r2
   10858:	e5c41000 	strb	r1, [r4]
   1085c:	1a00009e 	bne	10adc <srec_handle_char(int)+0x450>
   10860:	e5d43001 	ldrb	r3, [r4, #1]
   10864:	e1530001 	cmp	r3, r1
   10868:	1a00009d 	bne	10ae4 <srec_handle_char(int)+0x458>
   1086c:	e5943104 	ldr	r3, [r4, #260]	; 0x104
   10870:	e1530001 	cmp	r3, r1
   10874:	0a00009a 	beq	10ae4 <srec_handle_char(int)+0x458>
   10878:	e5940024 	ldr	r0, [r4, #36]	; 0x24
   1087c:	e594201c 	ldr	r2, [r4, #28]
   10880:	e59f1268 	ldr	r1, [pc, #616]	; 10af0 <srec_handle_char(int)+0x464>
   10884:	e12fff33 	blx	r3
   10888:	e3a00001 	mov	r0, #1
   1088c:	e8bd8010 	pop	{r4, pc}
   10890:	e3500053 	cmp	r0, #83	; 0x53
   10894:	1a000076 	bne	10a74 <srec_handle_char(int)+0x3e8>
   10898:	e3a03000 	mov	r3, #0
   1089c:	e3a02001 	mov	r2, #1
   108a0:	e5843004 	str	r3, [r4, #4]
   108a4:	e58430f4 	str	r3, [r4, #244]	; 0xf4
   108a8:	e5c42000 	strb	r2, [r4]
   108ac:	e5d400fc 	ldrb	r0, [r4, #252]	; 0xfc
   108b0:	e8bd8010 	pop	{r4, pc}
   108b4:	e3a02000 	mov	r2, #0
   108b8:	e200100f 	and	r1, r0, #15
   108bc:	e3510008 	cmp	r1, #8
   108c0:	e5842010 	str	r2, [r4, #16]
   108c4:	e5842018 	str	r2, [r4, #24]
   108c8:	e5842014 	str	r2, [r4, #20]
   108cc:	03a02003 	moveq	r2, #3
   108d0:	0584200c 	streq	r2, [r4, #12]
   108d4:	0a000004 	beq	108ec <srec_handle_char(int)+0x260>
   108d8:	e3510009 	cmp	r1, #9
   108dc:	03a02002 	moveq	r2, #2
   108e0:	12002003 	andne	r2, r0, #3
   108e4:	12822001 	addne	r2, r2, #1
   108e8:	e584200c 	str	r2, [r4, #12]
   108ec:	e2433031 	sub	r3, r3, #49	; 0x31
   108f0:	e3530008 	cmp	r3, #8
   108f4:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
   108f8:	ea000070 	b	10ac0 <srec_handle_char(int)+0x434>
   108fc:	00010aa8 	.word	0x00010aa8
   10900:	00010aa8 	.word	0x00010aa8
   10904:	00010aa8 	.word	0x00010aa8
   10908:	00010ac0 	.word	0x00010ac0
   1090c:	00010a94 	.word	0x00010a94
   10910:	00010a94 	.word	0x00010a94
   10914:	00010a7c 	.word	0x00010a7c
   10918:	00010a7c 	.word	0x00010a7c
   1091c:	00010a7c 	.word	0x00010a7c
   10920:	e2402030 	sub	r2, r0, #48	; 0x30
   10924:	e3520036 	cmp	r2, #54	; 0x36
   10928:	93a02000 	movls	r2, #0
   1092c:	83a02001 	movhi	r2, #1
   10930:	e240103a 	sub	r1, r0, #58	; 0x3a
   10934:	e3510006 	cmp	r1, #6
   10938:	93822001 	orrls	r2, r2, #1
   1093c:	e5941018 	ldr	r1, [r4, #24]
   10940:	e3520000 	cmp	r2, #0
   10944:	e1a01201 	lsl	r1, r1, #4
   10948:	1a000003 	bne	1095c <srec_handle_char(int)+0x2d0>
   1094c:	e2402047 	sub	r2, r0, #71	; 0x47
   10950:	e3520019 	cmp	r2, #25
   10954:	85d400fc 	ldrbhi	r0, [r4, #252]	; 0xfc
   10958:	8a000002 	bhi	10968 <srec_handle_char(int)+0x2dc>
   1095c:	e3a02005 	mov	r2, #5
   10960:	e1a00002 	mov	r0, r2
   10964:	e5c420fc 	strb	r2, [r4, #252]	; 0xfc
   10968:	e3530039 	cmp	r3, #57	; 0x39
   1096c:	e5942010 	ldr	r2, [r4, #16]
   10970:	c2433007 	subgt	r3, r3, #7
   10974:	e2822001 	add	r2, r2, #1
   10978:	e203300f 	and	r3, r3, #15
   1097c:	e0833001 	add	r3, r3, r1
   10980:	e3520002 	cmp	r2, #2
   10984:	e5843018 	str	r3, [r4, #24]
   10988:	e5842010 	str	r2, [r4, #16]
   1098c:	18bd8010 	popne	{r4, pc}
   10990:	e3a02000 	mov	r2, #0
   10994:	e3a0c003 	mov	ip, #3
   10998:	e5941004 	ldr	r1, [r4, #4]
   1099c:	e5842010 	str	r2, [r4, #16]
   109a0:	e0813003 	add	r3, r1, r3
   109a4:	e5843004 	str	r3, [r4, #4]
   109a8:	e5842024 	str	r2, [r4, #36]	; 0x24
   109ac:	e5c42028 	strb	r2, [r4, #40]	; 0x28
   109b0:	e5c4c000 	strb	ip, [r4]
   109b4:	e8bd8010 	pop	{r4, pc}
   109b8:	e2401030 	sub	r1, r0, #48	; 0x30
   109bc:	e3510036 	cmp	r1, #54	; 0x36
   109c0:	93a01000 	movls	r1, #0
   109c4:	83a01001 	movhi	r1, #1
   109c8:	e240203a 	sub	r2, r0, #58	; 0x3a
   109cc:	e3520006 	cmp	r2, #6
   109d0:	93811001 	orrls	r1, r1, #1
   109d4:	e5d42028 	ldrb	r2, [r4, #40]	; 0x28
   109d8:	e3510000 	cmp	r1, #0
   109dc:	e1a02202 	lsl	r2, r2, #4
   109e0:	e6ef2072 	uxtb	r2, r2
   109e4:	1a000003 	bne	109f8 <srec_handle_char(int)+0x36c>
   109e8:	e2401047 	sub	r1, r0, #71	; 0x47
   109ec:	e3510019 	cmp	r1, #25
   109f0:	85d400fc 	ldrbhi	r0, [r4, #252]	; 0xfc
   109f4:	8a000002 	bhi	10a04 <srec_handle_char(int)+0x378>
   109f8:	e3a01005 	mov	r1, #5
   109fc:	e1a00001 	mov	r0, r1
   10a00:	e5c410fc 	strb	r1, [r4, #252]	; 0xfc
   10a04:	e3530039 	cmp	r3, #57	; 0x39
   10a08:	c2433007 	subgt	r3, r3, #7
   10a0c:	e5941010 	ldr	r1, [r4, #16]
   10a10:	e203300f 	and	r3, r3, #15
   10a14:	e0823003 	add	r3, r2, r3
   10a18:	e2812001 	add	r2, r1, #1
   10a1c:	e6ef3073 	uxtb	r3, r3
   10a20:	e3120001 	tst	r2, #1
   10a24:	e5c43028 	strb	r3, [r4, #40]	; 0x28
   10a28:	e5842010 	str	r2, [r4, #16]
   10a2c:	18bd8010 	popne	{r4, pc}
   10a30:	e5942020 	ldr	r2, [r4, #32]
   10a34:	e5941004 	ldr	r1, [r4, #4]
   10a38:	e35200c7 	cmp	r2, #199	; 0xc7
   10a3c:	e0811003 	add	r1, r1, r3
   10a40:	e5841004 	str	r1, [r4, #4]
   10a44:	d0841002 	addle	r1, r4, r2
   10a48:	d5c13029 	strble	r3, [r1, #41]	; 0x29
   10a4c:	e594101c 	ldr	r1, [r4, #28]
   10a50:	e2822001 	add	r2, r2, #1
   10a54:	e1520001 	cmp	r2, r1
   10a58:	e3a03000 	mov	r3, #0
   10a5c:	e5842020 	str	r2, [r4, #32]
   10a60:	a3a02005 	movge	r2, #5
   10a64:	e5c43028 	strb	r3, [r4, #40]	; 0x28
   10a68:	a5843010 	strge	r3, [r4, #16]
   10a6c:	a5c42000 	strbge	r2, [r4]
   10a70:	e8bd8010 	pop	{r4, pc}
   10a74:	e3a00002 	mov	r0, #2
   10a78:	e8bd8010 	pop	{r4, pc}
   10a7c:	e3a02001 	mov	r2, #1
   10a80:	e3a03002 	mov	r3, #2
   10a84:	e5c42001 	strb	r2, [r4, #1]
   10a88:	e5c43000 	strb	r3, [r4]
   10a8c:	e5d400fc 	ldrb	r0, [r4, #252]	; 0xfc
   10a90:	e8bd8010 	pop	{r4, pc}
   10a94:	e3a03002 	mov	r3, #2
   10a98:	e5d400fc 	ldrb	r0, [r4, #252]	; 0xfc
   10a9c:	e5c43001 	strb	r3, [r4, #1]
   10aa0:	e5c43000 	strb	r3, [r4]
   10aa4:	e8bd8010 	pop	{r4, pc}
   10aa8:	e3a02000 	mov	r2, #0
   10aac:	e3a03002 	mov	r3, #2
   10ab0:	e5c42001 	strb	r2, [r4, #1]
   10ab4:	e5c43000 	strb	r3, [r4]
   10ab8:	e5d400fc 	ldrb	r0, [r4, #252]	; 0xfc
   10abc:	e8bd8010 	pop	{r4, pc}
   10ac0:	e3a03000 	mov	r3, #0
   10ac4:	e3a00004 	mov	r0, #4
   10ac8:	e5c43000 	strb	r3, [r4]
   10acc:	e5c400fc 	strb	r0, [r4, #252]	; 0xfc
   10ad0:	e8bd8010 	pop	{r4, pc}
   10ad4:	e3a02005 	mov	r2, #5
   10ad8:	eaffff36 	b	107b8 <srec_handle_char(int)+0x12c>
   10adc:	e3a00003 	mov	r0, #3
   10ae0:	e8bd8010 	pop	{r4, pc}
   10ae4:	e3a00001 	mov	r0, #1
   10ae8:	e8bd8010 	pop	{r4, pc}
   10aec:	00043c48 	.word	0x00043c48
   10af0:	00043c71 	.word	0x00043c71

00010af4 <srec_decode>:
   10af4:	e3a0c000 	mov	ip, #0
   10af8:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   10afc:	e59f44bc 	ldr	r4, [pc, #1212]	; 10fc0 <srec_decode+0x4cc>
   10b00:	e3530000 	cmp	r3, #0
   10b04:	e5c4c000 	strb	ip, [r4]
   10b08:	e5840104 	str	r0, [r4, #260]	; 0x104
   10b0c:	e5841100 	str	r1, [r4, #256]	; 0x100
   10b10:	e584c0f8 	str	ip, [r4, #248]	; 0xf8
   10b14:	e5c4c0fc 	strb	ip, [r4, #252]	; 0xfc
   10b18:	08bd87f0 	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   10b1c:	e1a05002 	mov	r5, r2
   10b20:	e1a0100c 	mov	r1, ip
   10b24:	e3a08005 	mov	r8, #5
   10b28:	e1a0200c 	mov	r2, ip
   10b2c:	e1a0700c 	mov	r7, ip
   10b30:	e0856003 	add	r6, r5, r3
   10b34:	e2466001 	sub	r6, r6, #1
   10b38:	e2455001 	sub	r5, r5, #1
   10b3c:	e2849029 	add	r9, r4, #41	; 0x29
   10b40:	e5f53001 	ldrb	r3, [r5, #1]!
   10b44:	e2822001 	add	r2, r2, #1
   10b48:	e58420f8 	str	r2, [r4, #248]	; 0xf8
   10b4c:	e1a02003 	mov	r2, r3
   10b50:	e3510005 	cmp	r1, #5
   10b54:	979ff101 	ldrls	pc, [pc, r1, lsl #2]
   10b58:	ea00001c 	b	10bd0 <srec_decode+0xdc>
   10b5c:	00010dd4 	.word	0x00010dd4
   10b60:	00010df8 	.word	0x00010df8
   10b64:	00010d54 	.word	0x00010d54
   10b68:	00010c84 	.word	0x00010c84
   10b6c:	00010be4 	.word	0x00010be4
   10b70:	00010b74 	.word	0x00010b74
   10b74:	e353002f 	cmp	r3, #47	; 0x2f
   10b78:	c3a00000 	movgt	r0, #0
   10b7c:	d3a00001 	movle	r0, #1
   10b80:	e243103a 	sub	r1, r3, #58	; 0x3a
   10b84:	e3510006 	cmp	r1, #6
   10b88:	93800001 	orrls	r0, r0, #1
   10b8c:	e5d41028 	ldrb	r1, [r4, #40]	; 0x28
   10b90:	e3500000 	cmp	r0, #0
   10b94:	e1a01201 	lsl	r1, r1, #4
   10b98:	e6ef1071 	uxtb	r1, r1
   10b9c:	0a0000ca 	beq	10ecc <srec_decode+0x3d8>
   10ba0:	e5c480fc 	strb	r8, [r4, #252]	; 0xfc
   10ba4:	e3530039 	cmp	r3, #57	; 0x39
   10ba8:	c2432007 	subgt	r2, r3, #7
   10bac:	e5943010 	ldr	r3, [r4, #16]
   10bb0:	e202200f 	and	r2, r2, #15
   10bb4:	e2833001 	add	r3, r3, #1
   10bb8:	e0812002 	add	r2, r1, r2
   10bbc:	e6ef2072 	uxtb	r2, r2
   10bc0:	e3530002 	cmp	r3, #2
   10bc4:	e5c42028 	strb	r2, [r4, #40]	; 0x28
   10bc8:	e5843010 	str	r3, [r4, #16]
   10bcc:	0a0000c7 	beq	10ef0 <srec_decode+0x3fc>
   10bd0:	e1550006 	cmp	r5, r6
   10bd4:	08bd87f0 	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   10bd8:	e59420f8 	ldr	r2, [r4, #248]	; 0xf8
   10bdc:	e5d41000 	ldrb	r1, [r4]
   10be0:	eaffffd6 	b	10b40 <srec_decode+0x4c>
   10be4:	e353002f 	cmp	r3, #47	; 0x2f
   10be8:	c3a00000 	movgt	r0, #0
   10bec:	d3a00001 	movle	r0, #1
   10bf0:	e243103a 	sub	r1, r3, #58	; 0x3a
   10bf4:	e3510006 	cmp	r1, #6
   10bf8:	93800001 	orrls	r0, r0, #1
   10bfc:	e5d41028 	ldrb	r1, [r4, #40]	; 0x28
   10c00:	e3500000 	cmp	r0, #0
   10c04:	e1a01201 	lsl	r1, r1, #4
   10c08:	e6ef1071 	uxtb	r1, r1
   10c0c:	0a0000a5 	beq	10ea8 <srec_decode+0x3b4>
   10c10:	e5c480fc 	strb	r8, [r4, #252]	; 0xfc
   10c14:	e3530039 	cmp	r3, #57	; 0x39
   10c18:	c2432007 	subgt	r2, r3, #7
   10c1c:	e5943010 	ldr	r3, [r4, #16]
   10c20:	e202200f 	and	r2, r2, #15
   10c24:	e2833001 	add	r3, r3, #1
   10c28:	e0812002 	add	r2, r1, r2
   10c2c:	e6ef2072 	uxtb	r2, r2
   10c30:	e3130001 	tst	r3, #1
   10c34:	e5c42028 	strb	r2, [r4, #40]	; 0x28
   10c38:	e5843010 	str	r3, [r4, #16]
   10c3c:	1affffe3 	bne	10bd0 <srec_decode+0xdc>
   10c40:	e5943020 	ldr	r3, [r4, #32]
   10c44:	e5941004 	ldr	r1, [r4, #4]
   10c48:	e35300c7 	cmp	r3, #199	; 0xc7
   10c4c:	e0811002 	add	r1, r1, r2
   10c50:	e5841004 	str	r1, [r4, #4]
   10c54:	d0841003 	addle	r1, r4, r3
   10c58:	d5c12029 	strble	r2, [r1, #41]	; 0x29
   10c5c:	e594201c 	ldr	r2, [r4, #28]
   10c60:	e2833001 	add	r3, r3, #1
   10c64:	e1530002 	cmp	r3, r2
   10c68:	a5c48000 	strbge	r8, [r4]
   10c6c:	a5847010 	strge	r7, [r4, #16]
   10c70:	e1550006 	cmp	r5, r6
   10c74:	e5843020 	str	r3, [r4, #32]
   10c78:	e5c47028 	strb	r7, [r4, #40]	; 0x28
   10c7c:	1affffd5 	bne	10bd8 <srec_decode+0xe4>
   10c80:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   10c84:	e353002f 	cmp	r3, #47	; 0x2f
   10c88:	c3a00000 	movgt	r0, #0
   10c8c:	d3a00001 	movle	r0, #1
   10c90:	e243103a 	sub	r1, r3, #58	; 0x3a
   10c94:	e3510006 	cmp	r1, #6
   10c98:	93800001 	orrls	r0, r0, #1
   10c9c:	e5d41028 	ldrb	r1, [r4, #40]	; 0x28
   10ca0:	e3500000 	cmp	r0, #0
   10ca4:	e1a01201 	lsl	r1, r1, #4
   10ca8:	e6ef1071 	uxtb	r1, r1
   10cac:	0a000074 	beq	10e84 <srec_decode+0x390>
   10cb0:	e5c480fc 	strb	r8, [r4, #252]	; 0xfc
   10cb4:	e3530039 	cmp	r3, #57	; 0x39
   10cb8:	c2432007 	subgt	r2, r3, #7
   10cbc:	e5943010 	ldr	r3, [r4, #16]
   10cc0:	e202200f 	and	r2, r2, #15
   10cc4:	e2833001 	add	r3, r3, #1
   10cc8:	e0812002 	add	r2, r1, r2
   10ccc:	e6ef2072 	uxtb	r2, r2
   10cd0:	e213c001 	ands	ip, r3, #1
   10cd4:	e5c42028 	strb	r2, [r4, #40]	; 0x28
   10cd8:	e5843010 	str	r3, [r4, #16]
   10cdc:	1a000006 	bne	10cfc <srec_decode+0x208>
   10ce0:	e5940024 	ldr	r0, [r4, #36]	; 0x24
   10ce4:	e5941004 	ldr	r1, [r4, #4]
   10ce8:	e0820400 	add	r0, r2, r0, lsl #8
   10cec:	e0812002 	add	r2, r1, r2
   10cf0:	e5c4c028 	strb	ip, [r4, #40]	; 0x28
   10cf4:	e5840024 	str	r0, [r4, #36]	; 0x24
   10cf8:	e5842004 	str	r2, [r4, #4]
   10cfc:	e594200c 	ldr	r2, [r4, #12]
   10d00:	e1530082 	cmp	r3, r2, lsl #1
   10d04:	1affffb1 	bne	10bd0 <srec_decode+0xdc>
   10d08:	e5d43001 	ldrb	r3, [r4, #1]
   10d0c:	e3530001 	cmp	r3, #1
   10d10:	1a000004 	bne	10d28 <srec_decode+0x234>
   10d14:	e5940024 	ldr	r0, [r4, #36]	; 0x24
   10d18:	e5943100 	ldr	r3, [r4, #256]	; 0x100
   10d1c:	e5840008 	str	r0, [r4, #8]
   10d20:	e12fff33 	blx	r3
   10d24:	e5d43001 	ldrb	r3, [r4, #1]
   10d28:	e3530000 	cmp	r3, #0
   10d2c:	e584701c 	str	r7, [r4, #28]
   10d30:	0a000098 	beq	10f98 <srec_decode+0x4a4>
   10d34:	e3a03005 	mov	r3, #5
   10d38:	e1550006 	cmp	r5, r6
   10d3c:	e5c43000 	strb	r3, [r4]
   10d40:	e5c47028 	strb	r7, [r4, #40]	; 0x28
   10d44:	e5847020 	str	r7, [r4, #32]
   10d48:	e5847010 	str	r7, [r4, #16]
   10d4c:	1affffa1 	bne	10bd8 <srec_decode+0xe4>
   10d50:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   10d54:	e353002f 	cmp	r3, #47	; 0x2f
   10d58:	c3a00000 	movgt	r0, #0
   10d5c:	d3a00001 	movle	r0, #1
   10d60:	e243103a 	sub	r1, r3, #58	; 0x3a
   10d64:	e3510006 	cmp	r1, #6
   10d68:	93800001 	orrls	r0, r0, #1
   10d6c:	e5941018 	ldr	r1, [r4, #24]
   10d70:	e3500000 	cmp	r0, #0
   10d74:	e1a01201 	lsl	r1, r1, #4
   10d78:	0a000038 	beq	10e60 <srec_decode+0x36c>
   10d7c:	e5c480fc 	strb	r8, [r4, #252]	; 0xfc
   10d80:	e3530039 	cmp	r3, #57	; 0x39
   10d84:	c2432007 	subgt	r2, r3, #7
   10d88:	e5943010 	ldr	r3, [r4, #16]
   10d8c:	e202200f 	and	r2, r2, #15
   10d90:	e2833001 	add	r3, r3, #1
   10d94:	e0822001 	add	r2, r2, r1
   10d98:	e3530002 	cmp	r3, #2
   10d9c:	e5842018 	str	r2, [r4, #24]
   10da0:	e5843010 	str	r3, [r4, #16]
   10da4:	1affff89 	bne	10bd0 <srec_decode+0xdc>
   10da8:	e3a01003 	mov	r1, #3
   10dac:	e5943004 	ldr	r3, [r4, #4]
   10db0:	e1550006 	cmp	r5, r6
   10db4:	e0832002 	add	r2, r3, r2
   10db8:	e5847010 	str	r7, [r4, #16]
   10dbc:	e5847024 	str	r7, [r4, #36]	; 0x24
   10dc0:	e5c47028 	strb	r7, [r4, #40]	; 0x28
   10dc4:	e5842004 	str	r2, [r4, #4]
   10dc8:	e5c41000 	strb	r1, [r4]
   10dcc:	1affff81 	bne	10bd8 <srec_decode+0xe4>
   10dd0:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   10dd4:	e3530053 	cmp	r3, #83	; 0x53
   10dd8:	1affff7c 	bne	10bd0 <srec_decode+0xdc>
   10ddc:	e3a03001 	mov	r3, #1
   10de0:	e1550006 	cmp	r5, r6
   10de4:	e5847004 	str	r7, [r4, #4]
   10de8:	e58470f4 	str	r7, [r4, #244]	; 0xf4
   10dec:	e5c43000 	strb	r3, [r4]
   10df0:	1affff78 	bne	10bd8 <srec_decode+0xe4>
   10df4:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   10df8:	e203200f 	and	r2, r3, #15
   10dfc:	e3520008 	cmp	r2, #8
   10e00:	03a02003 	moveq	r2, #3
   10e04:	e5847010 	str	r7, [r4, #16]
   10e08:	e5847018 	str	r7, [r4, #24]
   10e0c:	e5847014 	str	r7, [r4, #20]
   10e10:	0584200c 	streq	r2, [r4, #12]
   10e14:	0a000004 	beq	10e2c <srec_decode+0x338>
   10e18:	e3520009 	cmp	r2, #9
   10e1c:	03a02002 	moveq	r2, #2
   10e20:	12032003 	andne	r2, r3, #3
   10e24:	12822001 	addne	r2, r2, #1
   10e28:	e584200c 	str	r2, [r4, #12]
   10e2c:	e2433031 	sub	r3, r3, #49	; 0x31
   10e30:	e3530008 	cmp	r3, #8
   10e34:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
   10e38:	ea000050 	b	10f80 <srec_decode+0x48c>
   10e3c:	00010f68 	.word	0x00010f68
   10e40:	00010f68 	.word	0x00010f68
   10e44:	00010f68 	.word	0x00010f68
   10e48:	00010f80 	.word	0x00010f80
   10e4c:	00010f50 	.word	0x00010f50
   10e50:	00010f50 	.word	0x00010f50
   10e54:	00010f34 	.word	0x00010f34
   10e58:	00010f34 	.word	0x00010f34
   10e5c:	00010f34 	.word	0x00010f34
   10e60:	e3530066 	cmp	r3, #102	; 0x66
   10e64:	d3a00000 	movle	r0, #0
   10e68:	c3a00001 	movgt	r0, #1
   10e6c:	e243c047 	sub	ip, r3, #71	; 0x47
   10e70:	e35c0019 	cmp	ip, #25
   10e74:	93800001 	orrls	r0, r0, #1
   10e78:	e3500000 	cmp	r0, #0
   10e7c:	1affffbe 	bne	10d7c <srec_decode+0x288>
   10e80:	eaffffbe 	b	10d80 <srec_decode+0x28c>
   10e84:	e3530066 	cmp	r3, #102	; 0x66
   10e88:	d3a00000 	movle	r0, #0
   10e8c:	c3a00001 	movgt	r0, #1
   10e90:	e243c047 	sub	ip, r3, #71	; 0x47
   10e94:	e35c0019 	cmp	ip, #25
   10e98:	93800001 	orrls	r0, r0, #1
   10e9c:	e3500000 	cmp	r0, #0
   10ea0:	1affff82 	bne	10cb0 <srec_decode+0x1bc>
   10ea4:	eaffff82 	b	10cb4 <srec_decode+0x1c0>
   10ea8:	e3530066 	cmp	r3, #102	; 0x66
   10eac:	d3a00000 	movle	r0, #0
   10eb0:	c3a00001 	movgt	r0, #1
   10eb4:	e243c047 	sub	ip, r3, #71	; 0x47
   10eb8:	e35c0019 	cmp	ip, #25
   10ebc:	93800001 	orrls	r0, r0, #1
   10ec0:	e3500000 	cmp	r0, #0
   10ec4:	1affff51 	bne	10c10 <srec_decode+0x11c>
   10ec8:	eaffff51 	b	10c14 <srec_decode+0x120>
   10ecc:	e3530066 	cmp	r3, #102	; 0x66
   10ed0:	d3a00000 	movle	r0, #0
   10ed4:	c3a00001 	movgt	r0, #1
   10ed8:	e243c047 	sub	ip, r3, #71	; 0x47
   10edc:	e35c0019 	cmp	ip, #25
   10ee0:	93800001 	orrls	r0, r0, #1
   10ee4:	e3500000 	cmp	r0, #0
   10ee8:	1affff2c 	bne	10ba0 <srec_decode+0xac>
   10eec:	eaffff2c 	b	10ba4 <srec_decode+0xb0>
   10ef0:	e5943004 	ldr	r3, [r4, #4]
   10ef4:	e5c47000 	strb	r7, [r4]
   10ef8:	e1e03003 	mvn	r3, r3
   10efc:	e6ef3073 	uxtb	r3, r3
   10f00:	e1520003 	cmp	r2, r3
   10f04:	1affff31 	bne	10bd0 <srec_decode+0xdc>
   10f08:	e5d43001 	ldrb	r3, [r4, #1]
   10f0c:	e3530000 	cmp	r3, #0
   10f10:	1affff2e 	bne	10bd0 <srec_decode+0xdc>
   10f14:	e5943104 	ldr	r3, [r4, #260]	; 0x104
   10f18:	e3530000 	cmp	r3, #0
   10f1c:	0affff2b 	beq	10bd0 <srec_decode+0xdc>
   10f20:	e594201c 	ldr	r2, [r4, #28]
   10f24:	e1a01009 	mov	r1, r9
   10f28:	e5940024 	ldr	r0, [r4, #36]	; 0x24
   10f2c:	e12fff33 	blx	r3
   10f30:	eaffff26 	b	10bd0 <srec_decode+0xdc>
   10f34:	e3a02001 	mov	r2, #1
   10f38:	e3a03002 	mov	r3, #2
   10f3c:	e1550006 	cmp	r5, r6
   10f40:	e5c42001 	strb	r2, [r4, #1]
   10f44:	e5c43000 	strb	r3, [r4]
   10f48:	1affff22 	bne	10bd8 <srec_decode+0xe4>
   10f4c:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   10f50:	e3a03002 	mov	r3, #2
   10f54:	e1550006 	cmp	r5, r6
   10f58:	e5c43001 	strb	r3, [r4, #1]
   10f5c:	e5c43000 	strb	r3, [r4]
   10f60:	1affff1c 	bne	10bd8 <srec_decode+0xe4>
   10f64:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   10f68:	e3a03002 	mov	r3, #2
   10f6c:	e1550006 	cmp	r5, r6
   10f70:	e5c47001 	strb	r7, [r4, #1]
   10f74:	e5c43000 	strb	r3, [r4]
   10f78:	1affff16 	bne	10bd8 <srec_decode+0xe4>
   10f7c:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   10f80:	e3a03004 	mov	r3, #4
   10f84:	e1550006 	cmp	r5, r6
   10f88:	e5c47000 	strb	r7, [r4]
   10f8c:	e5c430fc 	strb	r3, [r4, #252]	; 0xfc
   10f90:	1affff10 	bne	10bd8 <srec_decode+0xe4>
   10f94:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   10f98:	e5942010 	ldr	r2, [r4, #16]
   10f9c:	e5943018 	ldr	r3, [r4, #24]
   10fa0:	e0822fa2 	add	r2, r2, r2, lsr #31
   10fa4:	e04330c2 	sub	r3, r3, r2, asr #1
   10fa8:	e2433001 	sub	r3, r3, #1
   10fac:	e3530000 	cmp	r3, #0
   10fb0:	e584301c 	str	r3, [r4, #28]
   10fb4:	c3a03004 	movgt	r3, #4
   10fb8:	caffff5e 	bgt	10d38 <srec_decode+0x244>
   10fbc:	eaffff5c 	b	10d34 <srec_decode+0x240>
   10fc0:	00043c48 	.word	0x00043c48

00010fc4 <Hw512KRamRom::reset()>:
   10fc4:	e3a03000 	mov	r3, #0
   10fc8:	e3a02001 	mov	r2, #1
   10fcc:	e5c03004 	strb	r3, [r0, #4]
   10fd0:	e5c02005 	strb	r2, [r0, #5]
   10fd4:	e5803006 	str	r3, [r0, #6]
   10fd8:	e12fff1e 	bx	lr

00010fdc <Hw512KRamRom::pageOutForEmulation(bool)>:
   10fdc:	e5c01004 	strb	r1, [r0, #4]
   10fe0:	e12fff1e 	bx	lr

00010fe4 <Hw512KRamRom::pagingRequiresBusAccess()>:
   10fe4:	e5d00005 	ldrb	r0, [r0, #5]
   10fe8:	e12fff1e 	bx	lr

00010fec <Hw512KRamRom::handleMemOrIOReq(unsigned long, unsigned long, unsigned long, unsigned long)>:
   10fec:	e5d0c005 	ldrb	ip, [r0, #5]
   10ff0:	e6ef1071 	uxtb	r1, r1
   10ff4:	e35c0000 	cmp	ip, #0
   10ff8:	0a000002 	beq	11008 <Hw512KRamRom::handleMemOrIOReq(unsigned long, unsigned long, unsigned long, unsigned long)+0x1c>
   10ffc:	e241c078 	sub	ip, r1, #120	; 0x78
   11000:	e35c0003 	cmp	ip, #3
   11004:	9a000006 	bls	11024 <Hw512KRamRom::handleMemOrIOReq(unsigned long, unsigned long, unsigned long, unsigned long)+0x38>
   11008:	e351007c 	cmp	r1, #124	; 0x7c
   1100c:	1a000002 	bne	1101c <Hw512KRamRom::handleMemOrIOReq(unsigned long, unsigned long, unsigned long, unsigned long)+0x30>
   11010:	e3130002 	tst	r3, #2
   11014:	12022001 	andne	r2, r2, #1
   11018:	15c02005 	strbne	r2, [r0, #5]
   1101c:	e59d0000 	ldr	r0, [sp]
   11020:	e12fff1e 	bx	lr
   11024:	e3130002 	tst	r3, #2
   11028:	1080000c 	addne	r0, r0, ip
   1102c:	15c02006 	strbne	r2, [r0, #6]
   11030:	e59d0000 	ldr	r0, [sp]
   11034:	e12fff1e 	bx	lr

00011038 <Hw512KRamRom::pageOutForInjection(bool)>:
   11038:	e5d03005 	ldrb	r3, [r0, #5]
   1103c:	e3530000 	cmp	r3, #0
   11040:	012fff1e 	bxeq	lr
   11044:	e3a02001 	mov	r2, #1
   11048:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   1104c:	e3510000 	cmp	r1, #0
   11050:	e24dd00c 	sub	sp, sp, #12
   11054:	e1a03001 	mov	r3, r1
   11058:	158d2000 	strne	r2, [sp]
   1105c:	02801006 	addeq	r1, r0, #6
   11060:	058d2000 	streq	r2, [sp]
   11064:	13a03000 	movne	r3, #0
   11068:	13a02004 	movne	r2, #4
   1106c:	159f1010 	ldrne	r1, [pc, #16]	; 11084 <Hw512KRamRom::pageOutForInjection(bool)+0x4c>
   11070:	03a02004 	moveq	r2, #4
   11074:	e3a00078 	mov	r0, #120	; 0x78
   11078:	eb001c1e 	bl	180f8 <BusAccess::blockWrite(unsigned long, unsigned char const*, unsigned long, int, int)>
   1107c:	e28dd00c 	add	sp, sp, #12
   11080:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
   11084:	0004207c 	.word	0x0004207c

00011088 <Hw512KRamRom::Hw512KRamRom()>:
   11088:	e92d4010 	push	{r4, lr}
   1108c:	e1a04000 	mov	r4, r0
   11090:	eb000053 	bl	111e4 <HwBase::HwBase()>
   11094:	e3a03000 	mov	r3, #0
   11098:	e3a01001 	mov	r1, #1
   1109c:	e59f2014 	ldr	r2, [pc, #20]	; 110b8 <Hw512KRamRom::Hw512KRamRom()+0x30>
   110a0:	e5c41005 	strb	r1, [r4, #5]
   110a4:	e5842000 	str	r2, [r4]
   110a8:	e5c43004 	strb	r3, [r4, #4]
   110ac:	e5843006 	str	r3, [r4, #6]
   110b0:	e1a00004 	mov	r0, r4
   110b4:	e8bd8010 	pop	{r4, pc}
   110b8:	0002edec 	.word	0x0002edec

000110bc <Hw64KPagedRam::reset()>:
   110bc:	e3a03000 	mov	r3, #0
   110c0:	e3a02001 	mov	r2, #1
   110c4:	e5c03004 	strb	r3, [r0, #4]
   110c8:	e5c02005 	strb	r2, [r0, #5]
   110cc:	e5c03006 	strb	r3, [r0, #6]
   110d0:	e12fff1e 	bx	lr

000110d4 <Hw64KPagedRam::pagingRequiresBusAccess()>:
   110d4:	e3a00000 	mov	r0, #0
   110d8:	e12fff1e 	bx	lr

000110dc <Hw64KPagedRam::handleMemOrIOReq(unsigned long, unsigned long, unsigned long, unsigned long)>:
   110dc:	e59d0000 	ldr	r0, [sp]
   110e0:	e12fff1e 	bx	lr

000110e4 <Hw64KPagedRam::pageOutForEmulation(bool)>:
   110e4:	e5d03005 	ldrb	r3, [r0, #5]
   110e8:	e5c01004 	strb	r1, [r0, #4]
   110ec:	e3530000 	cmp	r3, #0
   110f0:	012fff1e 	bxeq	lr
   110f4:	e59f3058 	ldr	r3, [pc, #88]	; 11154 <Hw64KPagedRam::pageOutForEmulation(bool)+0x70>
   110f8:	e3510000 	cmp	r1, #0
   110fc:	e92d4010 	push	{r4, lr}
   11100:	e1a04000 	mov	r4, r0
   11104:	e5930000 	ldr	r0, [r3]
   11108:	0a000007 	beq	1112c <Hw64KPagedRam::pageOutForEmulation(bool)+0x48>
   1110c:	e3a01004 	mov	r1, #4
   11110:	e59f3040 	ldr	r3, [pc, #64]	; 11158 <Hw64KPagedRam::pageOutForEmulation(bool)+0x74>
   11114:	e59f2040 	ldr	r2, [pc, #64]	; 1115c <Hw64KPagedRam::pageOutForEmulation(bool)+0x78>
   11118:	ebffe1a5 	bl	97b4 <LogWrite>
   1111c:	e8bd4010 	pop	{r4, lr}
   11120:	e3a01001 	mov	r1, #1
   11124:	e3a00008 	mov	r0, #8
   11128:	ea0018ca 	b	17458 <digitalWrite>
   1112c:	e3a01004 	mov	r1, #4
   11130:	e59f3028 	ldr	r3, [pc, #40]	; 11160 <Hw64KPagedRam::pageOutForEmulation(bool)+0x7c>
   11134:	e59f2020 	ldr	r2, [pc, #32]	; 1115c <Hw64KPagedRam::pageOutForEmulation(bool)+0x78>
   11138:	ebffe19d 	bl	97b4 <LogWrite>
   1113c:	e5d41006 	ldrb	r1, [r4, #6]
   11140:	e3510000 	cmp	r1, #0
   11144:	18bd8010 	popne	{r4, pc}
   11148:	e3a00008 	mov	r0, #8
   1114c:	e8bd4010 	pop	{r4, lr}
   11150:	ea0018c0 	b	17458 <digitalWrite>
   11154:	00042084 	.word	0x00042084
   11158:	0002ee4c 	.word	0x0002ee4c
   1115c:	0002ee34 	.word	0x0002ee34
   11160:	0002ee30 	.word	0x0002ee30

00011164 <Hw64KPagedRam::pageOutForInjection(bool)>:
   11164:	e5d03005 	ldrb	r3, [r0, #5]
   11168:	e3530000 	cmp	r3, #0
   1116c:	012fff1e 	bxeq	lr
   11170:	e3510000 	cmp	r1, #0
   11174:	1a000004 	bne	1118c <Hw64KPagedRam::pageOutForInjection(bool)+0x28>
   11178:	e5d03004 	ldrb	r3, [r0, #4]
   1117c:	e3530000 	cmp	r3, #0
   11180:	112fff1e 	bxne	lr
   11184:	e3a00008 	mov	r0, #8
   11188:	ea0018b2 	b	17458 <digitalWrite>
   1118c:	e3a01001 	mov	r1, #1
   11190:	e3a00008 	mov	r0, #8
   11194:	ea0018af 	b	17458 <digitalWrite>

00011198 <Hw64KPagedRam::Hw64KPagedRam()>:
   11198:	e92d4010 	push	{r4, lr}
   1119c:	e1a04000 	mov	r4, r0
   111a0:	eb00000f 	bl	111e4 <HwBase::HwBase()>
   111a4:	e3a03000 	mov	r3, #0
   111a8:	e3a01001 	mov	r1, #1
   111ac:	e59f2014 	ldr	r2, [pc, #20]	; 111c8 <Hw64KPagedRam::Hw64KPagedRam()+0x30>
   111b0:	e5c41005 	strb	r1, [r4, #5]
   111b4:	e5842000 	str	r2, [r4]
   111b8:	e5c43004 	strb	r3, [r4, #4]
   111bc:	e5c43006 	strb	r3, [r4, #6]
   111c0:	e1a00004 	mov	r0, r4
   111c4:	e8bd8010 	pop	{r4, pc}
   111c8:	0002ee1c 	.word	0x0002ee1c

000111cc <HwBase::reset()>:
   111cc:	e12fff1e 	bx	lr

000111d0 <HwBase::handleMemOrIOReq(unsigned long, unsigned long, unsigned long, unsigned long)>:
   111d0:	e59d0000 	ldr	r0, [sp]
   111d4:	e12fff1e 	bx	lr

000111d8 <HwBase::pageOutForEmulation(bool)>:
   111d8:	e12fff1e 	bx	lr

000111dc <HwBase::pagingRequiresBusAccess()>:
   111dc:	e3a00000 	mov	r0, #0
   111e0:	e12fff1e 	bx	lr

000111e4 <HwBase::HwBase()>:
   111e4:	e92d4010 	push	{r4, lr}
   111e8:	e1a04000 	mov	r4, r0
   111ec:	e59f300c 	ldr	r3, [pc, #12]	; 11200 <HwBase::HwBase()+0x1c>
   111f0:	e5803000 	str	r3, [r0]
   111f4:	eb00003a 	bl	112e4 <HwManager::add(HwBase*)>
   111f8:	e1a00004 	mov	r0, r4
   111fc:	e8bd8010 	pop	{r4, pc}
   11200:	0002ee68 	.word	0x0002ee68

00011204 <HwManager::init(CommandHandler*, Display*)>:
   11204:	e59f3004 	ldr	r3, [pc, #4]	; 11210 <HwManager::init(CommandHandler*, Display*)+0xc>
   11208:	e1c300f0 	strd	r0, [r3]
   1120c:	e12fff1e 	bx	lr
   11210:	00043d50 	.word	0x00043d50

00011214 <HwManager::service()>:
   11214:	e3a03000 	mov	r3, #0
   11218:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1121c:	e1a0b003 	mov	fp, r3
   11220:	e3a05014 	mov	r5, #20
   11224:	e24ddf81 	sub	sp, sp, #516	; 0x204
   11228:	e28d6c02 	add	r6, sp, #512	; 0x200
   1122c:	e59f409c 	ldr	r4, [pc, #156]	; 112d0 <HwManager::service()+0xbc>
   11230:	e59f709c 	ldr	r7, [pc, #156]	; 112d4 <HwManager::service()+0xc0>
   11234:	e59fa09c 	ldr	sl, [pc, #156]	; 112d8 <HwManager::service()+0xc4>
   11238:	e59f909c 	ldr	r9, [pc, #156]	; 112dc <HwManager::service()+0xc8>
   1123c:	e59f809c 	ldr	r8, [pc, #156]	; 112e0 <HwManager::service()+0xcc>
   11240:	e56631f4 	strb	r3, [r6, #-500]!	; 0xfffffe0c
   11244:	e5942008 	ldr	r2, [r4, #8]
   11248:	e594300c 	ldr	r3, [r4, #12]
   1124c:	e1520003 	cmp	r2, r3
   11250:	0a000015 	beq	112ac <HwManager::service()+0x98>
   11254:	e1a00006 	mov	r0, r6
   11258:	eb006cb9 	bl	2c544 <strlen>
   1125c:	e594300c 	ldr	r3, [r4, #12]
   11260:	e0860000 	add	r0, r6, r0
   11264:	e0833083 	add	r3, r3, r3, lsl #1
   11268:	e0871103 	add	r1, r7, r3, lsl #2
   1126c:	e5d12004 	ldrb	r2, [r1, #4]
   11270:	e5911008 	ldr	r1, [r1, #8]
   11274:	e3520000 	cmp	r2, #0
   11278:	01a0200a 	moveq	r2, sl
   1127c:	11a02009 	movne	r2, r9
   11280:	e7973103 	ldr	r3, [r7, r3, lsl #2]
   11284:	e58d1000 	str	r1, [sp]
   11288:	e1a01008 	mov	r1, r8
   1128c:	ebffe1c8 	bl	99b4 <ee_sprintf>
   11290:	e594300c 	ldr	r3, [r4, #12]
   11294:	e5942010 	ldr	r2, [r4, #16]
   11298:	e2833001 	add	r3, r3, #1
   1129c:	e584300c 	str	r3, [r4, #12]
   112a0:	e594300c 	ldr	r3, [r4, #12]
   112a4:	e1530002 	cmp	r3, r2
   112a8:	2584b00c 	strcs	fp, [r4, #12]
   112ac:	e2555001 	subs	r5, r5, #1
   112b0:	1affffe3 	bne	11244 <HwManager::service()+0x30>
   112b4:	e5dd300c 	ldrb	r3, [sp, #12]
   112b8:	e3530000 	cmp	r3, #0
   112bc:	0a000001 	beq	112c8 <HwManager::service()+0xb4>
   112c0:	e28d000c 	add	r0, sp, #12
   112c4:	eb000626 	bl	12b64 <McManager::logDebugMessage(char const*)>
   112c8:	e28ddf81 	add	sp, sp, #516	; 0x204
   112cc:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   112d0:	00043d50 	.word	0x00043d50
   112d4:	00043d90 	.word	0x00043d90
   112d8:	0002ee8c 	.word	0x0002ee8c
   112dc:	0002ee88 	.word	0x0002ee88
   112e0:	0002ee90 	.word	0x0002ee90

000112e4 <HwManager::add(HwBase*)>:
   112e4:	e59f2018 	ldr	r2, [pc, #24]	; 11304 <HwManager::add(HwBase*)+0x20>
   112e8:	e5923014 	ldr	r3, [r2, #20]
   112ec:	e3530009 	cmp	r3, #9
   112f0:	d2831001 	addle	r1, r3, #1
   112f4:	d0823103 	addle	r3, r2, r3, lsl #2
   112f8:	d5821014 	strle	r1, [r2, #20]
   112fc:	d5830018 	strle	r0, [r3, #24]
   11300:	e12fff1e 	bx	lr
   11304:	00043d50 	.word	0x00043d50

00011308 <HwManager::reset()>:
   11308:	e92d4070 	push	{r4, r5, r6, lr}
   1130c:	e59f6034 	ldr	r6, [pc, #52]	; 11348 <HwManager::reset()+0x40>
   11310:	e5963014 	ldr	r3, [r6, #20]
   11314:	e3530000 	cmp	r3, #0
   11318:	d8bd8070 	pople	{r4, r5, r6, pc}
   1131c:	e3a04000 	mov	r4, #0
   11320:	e2865014 	add	r5, r6, #20
   11324:	e5b50004 	ldr	r0, [r5, #4]!
   11328:	e2844001 	add	r4, r4, #1
   1132c:	e5903000 	ldr	r3, [r0]
   11330:	e5933000 	ldr	r3, [r3]
   11334:	e12fff33 	blx	r3
   11338:	e5963014 	ldr	r3, [r6, #20]
   1133c:	e1530004 	cmp	r3, r4
   11340:	cafffff7 	bgt	11324 <HwManager::reset()+0x1c>
   11344:	e8bd8070 	pop	{r4, r5, r6, pc}
   11348:	00043d50 	.word	0x00043d50

0001134c <HwManager::pageOutForEmulation(bool)>:
   1134c:	e59f2060 	ldr	r2, [pc, #96]	; 113b4 <HwManager::pageOutForEmulation(bool)+0x68>
   11350:	e3500000 	cmp	r0, #0
   11354:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   11358:	e59f6058 	ldr	r6, [pc, #88]	; 113b8 <HwManager::pageOutForEmulation(bool)+0x6c>
   1135c:	e59f3058 	ldr	r3, [pc, #88]	; 113bc <HwManager::pageOutForEmulation(bool)+0x70>
   11360:	e1a07000 	mov	r7, r0
   11364:	11a03002 	movne	r3, r2
   11368:	e3a01004 	mov	r1, #4
   1136c:	e59f204c 	ldr	r2, [pc, #76]	; 113c0 <HwManager::pageOutForEmulation(bool)+0x74>
   11370:	e59f004c 	ldr	r0, [pc, #76]	; 113c4 <HwManager::pageOutForEmulation(bool)+0x78>
   11374:	ebffe10e 	bl	97b4 <LogWrite>
   11378:	e5963014 	ldr	r3, [r6, #20]
   1137c:	e3530000 	cmp	r3, #0
   11380:	d8bd81f0 	pople	{r4, r5, r6, r7, r8, pc}
   11384:	e3a04000 	mov	r4, #0
   11388:	e2865014 	add	r5, r6, #20
   1138c:	e5b50004 	ldr	r0, [r5, #4]!
   11390:	e1a01007 	mov	r1, r7
   11394:	e5903000 	ldr	r3, [r0]
   11398:	e2844001 	add	r4, r4, #1
   1139c:	e5933008 	ldr	r3, [r3, #8]
   113a0:	e12fff33 	blx	r3
   113a4:	e5963014 	ldr	r3, [r6, #20]
   113a8:	e1530004 	cmp	r3, r4
   113ac:	cafffff6 	bgt	1138c <HwManager::pageOutForEmulation(bool)+0x40>
   113b0:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   113b4:	0002ee4c 	.word	0x0002ee4c
   113b8:	00043d50 	.word	0x00043d50
   113bc:	0002ee30 	.word	0x0002ee30
   113c0:	0002ee34 	.word	0x0002ee34
   113c4:	0002ee7c 	.word	0x0002ee7c

000113c8 <HwManager::pageOutForInjection(bool)>:
   113c8:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   113cc:	e59f603c 	ldr	r6, [pc, #60]	; 11410 <HwManager::pageOutForInjection(bool)+0x48>
   113d0:	e5963014 	ldr	r3, [r6, #20]
   113d4:	e3530000 	cmp	r3, #0
   113d8:	d8bd81f0 	pople	{r4, r5, r6, r7, r8, pc}
   113dc:	e1a07000 	mov	r7, r0
   113e0:	e3a04000 	mov	r4, #0
   113e4:	e2865014 	add	r5, r6, #20
   113e8:	e5b50004 	ldr	r0, [r5, #4]!
   113ec:	e1a01007 	mov	r1, r7
   113f0:	e5903000 	ldr	r3, [r0]
   113f4:	e2844001 	add	r4, r4, #1
   113f8:	e593300c 	ldr	r3, [r3, #12]
   113fc:	e12fff33 	blx	r3
   11400:	e5963014 	ldr	r3, [r6, #20]
   11404:	e1530004 	cmp	r3, r4
   11408:	cafffff6 	bgt	113e8 <HwManager::pageOutForInjection(bool)+0x20>
   1140c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   11410:	00043d50 	.word	0x00043d50

00011414 <HwManager::pagingRequiresBusAccess()>:
   11414:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11418:	e59f30cc 	ldr	r3, [pc, #204]	; 114ec <HwManager::pagingRequiresBusAccess()+0xd8>
   1141c:	e24dd00c 	sub	sp, sp, #12
   11420:	e5934014 	ldr	r4, [r3, #20]
   11424:	e3540000 	cmp	r4, #0
   11428:	d3a00000 	movle	r0, #0
   1142c:	da00002c 	ble	114e4 <HwManager::pagingRequiresBusAccess()+0xd0>
   11430:	e3a03000 	mov	r3, #0
   11434:	e58d3000 	str	r3, [sp]
   11438:	e3a03000 	mov	r3, #0
   1143c:	e58d3004 	str	r3, [sp, #4]
   11440:	e3a0a000 	mov	sl, #0
   11444:	e3a0b000 	mov	fp, #0
   11448:	e3a08000 	mov	r8, #0
   1144c:	e3a07000 	mov	r7, #0
   11450:	e3a06000 	mov	r6, #0
   11454:	e3a05000 	mov	r5, #0
   11458:	e3a09000 	mov	r9, #0
   1145c:	ebffffec 	bl	11414 <HwManager::pagingRequiresBusAccess()>
   11460:	e3500000 	cmp	r0, #0
   11464:	e2899001 	add	r9, r9, #1
   11468:	1a00001d 	bne	114e4 <HwManager::pagingRequiresBusAccess()+0xd0>
   1146c:	e1540009 	cmp	r4, r9
   11470:	1afffff9 	bne	1145c <HwManager::pagingRequiresBusAccess()+0x48>
   11474:	e2855001 	add	r5, r5, #1
   11478:	e1550004 	cmp	r5, r4
   1147c:	1afffff5 	bne	11458 <HwManager::pagingRequiresBusAccess()+0x44>
   11480:	e2866001 	add	r6, r6, #1
   11484:	e1560004 	cmp	r6, r4
   11488:	1afffff1 	bne	11454 <HwManager::pagingRequiresBusAccess()+0x40>
   1148c:	e2877001 	add	r7, r7, #1
   11490:	e1570004 	cmp	r7, r4
   11494:	1affffed 	bne	11450 <HwManager::pagingRequiresBusAccess()+0x3c>
   11498:	e2888001 	add	r8, r8, #1
   1149c:	e1580004 	cmp	r8, r4
   114a0:	1affffe9 	bne	1144c <HwManager::pagingRequiresBusAccess()+0x38>
   114a4:	e28bb001 	add	fp, fp, #1
   114a8:	e15b0004 	cmp	fp, r4
   114ac:	1affffe5 	bne	11448 <HwManager::pagingRequiresBusAccess()+0x34>
   114b0:	e28aa001 	add	sl, sl, #1
   114b4:	e15a0004 	cmp	sl, r4
   114b8:	1affffe1 	bne	11444 <HwManager::pagingRequiresBusAccess()+0x30>
   114bc:	e59d3004 	ldr	r3, [sp, #4]
   114c0:	e2833001 	add	r3, r3, #1
   114c4:	e1530004 	cmp	r3, r4
   114c8:	e58d3004 	str	r3, [sp, #4]
   114cc:	1affffdb 	bne	11440 <HwManager::pagingRequiresBusAccess()+0x2c>
   114d0:	e59d3000 	ldr	r3, [sp]
   114d4:	e2833001 	add	r3, r3, #1
   114d8:	e1530004 	cmp	r3, r4
   114dc:	e58d3000 	str	r3, [sp]
   114e0:	1affffd4 	bne	11438 <HwManager::pagingRequiresBusAccess()+0x24>
   114e4:	e28dd00c 	add	sp, sp, #12
   114e8:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   114ec:	00043d50 	.word	0x00043d50

000114f0 <HwManager::handleMemOrIOReq(unsigned long, unsigned long, unsigned long, unsigned long)>:
   114f0:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   114f4:	e59f5104 	ldr	r5, [pc, #260]	; 11600 <HwManager::handleMemOrIOReq(unsigned long, unsigned long, unsigned long, unsigned long)+0x110>
   114f8:	e1a08000 	mov	r8, r0
   114fc:	e5950014 	ldr	r0, [r5, #20]
   11500:	e24dd008 	sub	sp, sp, #8
   11504:	e3500000 	cmp	r0, #0
   11508:	e1a07001 	mov	r7, r1
   1150c:	e1a06002 	mov	r6, r2
   11510:	e1a00003 	mov	r0, r3
   11514:	da00000e 	ble	11554 <HwManager::handleMemOrIOReq(unsigned long, unsigned long, unsigned long, unsigned long)+0x64>
   11518:	e3a04000 	mov	r4, #0
   1151c:	e2859018 	add	r9, r5, #24
   11520:	e7992104 	ldr	r2, [r9, r4, lsl #2]
   11524:	e1a03006 	mov	r3, r6
   11528:	e5921000 	ldr	r1, [r2]
   1152c:	e58d0000 	str	r0, [sp]
   11530:	e591a004 	ldr	sl, [r1, #4]
   11534:	e1a00002 	mov	r0, r2
   11538:	e1a01008 	mov	r1, r8
   1153c:	e1a02007 	mov	r2, r7
   11540:	e12fff3a 	blx	sl
   11544:	e5953014 	ldr	r3, [r5, #20]
   11548:	e2844001 	add	r4, r4, #1
   1154c:	e1530004 	cmp	r3, r4
   11550:	cafffff2 	bgt	11520 <HwManager::handleMemOrIOReq(unsigned long, unsigned long, unsigned long, unsigned long)+0x30>
   11554:	e3160008 	tst	r6, #8
   11558:	1a000001 	bne	11564 <HwManager::handleMemOrIOReq(unsigned long, unsigned long, unsigned long, unsigned long)+0x74>
   1155c:	e28dd008 	add	sp, sp, #8
   11560:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   11564:	e5952010 	ldr	r2, [r5, #16]
   11568:	e3520000 	cmp	r2, #0
   1156c:	0afffffa 	beq	1155c <HwManager::handleMemOrIOReq(unsigned long, unsigned long, unsigned long, unsigned long)+0x6c>
   11570:	e5951008 	ldr	r1, [r5, #8]
   11574:	e595300c 	ldr	r3, [r5, #12]
   11578:	e1510003 	cmp	r1, r3
   1157c:	0a000008 	beq	115a4 <HwManager::handleMemOrIOReq(unsigned long, unsigned long, unsigned long, unsigned long)+0xb4>
   11580:	e595300c 	ldr	r3, [r5, #12]
   11584:	e5951008 	ldr	r1, [r5, #8]
   11588:	e1530001 	cmp	r3, r1
   1158c:	e5951008 	ldr	r1, [r5, #8]
   11590:	2a000016 	bcs	115f0 <HwManager::handleMemOrIOReq(unsigned long, unsigned long, unsigned long, unsigned long)+0x100>
   11594:	e242c001 	sub	ip, r2, #1
   11598:	e3530000 	cmp	r3, #0
   1159c:	015c0001 	cmpeq	ip, r1
   115a0:	0affffed 	beq	1155c <HwManager::handleMemOrIOReq(unsigned long, unsigned long, unsigned long, unsigned long)+0x6c>
   115a4:	e5953008 	ldr	r3, [r5, #8]
   115a8:	e5951008 	ldr	r1, [r5, #8]
   115ac:	e0833083 	add	r3, r3, r3, lsl #1
   115b0:	e2811001 	add	r1, r1, #1
   115b4:	e5851008 	str	r1, [r5, #8]
   115b8:	e595c008 	ldr	ip, [r5, #8]
   115bc:	e59f1040 	ldr	r1, [pc, #64]	; 11604 <HwManager::handleMemOrIOReq(unsigned long, unsigned long, unsigned long, unsigned long)+0x114>
   115c0:	e1a03103 	lsl	r3, r3, #2
   115c4:	e15c0002 	cmp	ip, r2
   115c8:	e1e06006 	mvn	r6, r6
   115cc:	e0812003 	add	r2, r1, r3
   115d0:	e7818003 	str	r8, [r1, r3]
   115d4:	23a03000 	movcs	r3, #0
   115d8:	e2066001 	and	r6, r6, #1
   115dc:	e5c26004 	strb	r6, [r2, #4]
   115e0:	e5827008 	str	r7, [r2, #8]
   115e4:	25853008 	strcs	r3, [r5, #8]
   115e8:	e28dd008 	add	sp, sp, #8
   115ec:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   115f0:	e0433001 	sub	r3, r3, r1
   115f4:	e3530001 	cmp	r3, #1
   115f8:	8affffe9 	bhi	115a4 <HwManager::handleMemOrIOReq(unsigned long, unsigned long, unsigned long, unsigned long)+0xb4>
   115fc:	eaffffd6 	b	1155c <HwManager::handleMemOrIOReq(unsigned long, unsigned long, unsigned long, unsigned long)+0x6c>
   11600:	00043d50 	.word	0x00043d50
   11604:	00043d90 	.word	0x00043d90

00011608 <_GLOBAL__sub_I__ZN9HwManager15_debugIOPortBufE>:
   11608:	e3a02000 	mov	r2, #0
   1160c:	e3a01f7d 	mov	r1, #500	; 0x1f4
   11610:	e59f300c 	ldr	r3, [pc, #12]	; 11624 <_GLOBAL__sub_I__ZN9HwManager15_debugIOPortBufE+0x1c>
   11614:	e5832008 	str	r2, [r3, #8]
   11618:	e5831010 	str	r1, [r3, #16]
   1161c:	e583200c 	str	r2, [r3, #12]
   11620:	e12fff1e 	bx	lr
   11624:	00043d50 	.word	0x00043d50

00011628 <McBase::debuggerCommand(char*, char*, int)>:
   11628:	e92d4070 	push	{r4, r5, r6, lr}
   1162c:	e1a04001 	mov	r4, r1
   11630:	e1a05002 	mov	r5, r2
   11634:	e1a06003 	mov	r6, r3
   11638:	eb002231 	bl	19f04 <TargetDebug::get()>
   1163c:	e3500000 	cmp	r0, #0
   11640:	08bd8070 	popeq	{r4, r5, r6, pc}
   11644:	e1a03006 	mov	r3, r6
   11648:	e1a02005 	mov	r2, r5
   1164c:	e1a01004 	mov	r1, r4
   11650:	e8bd4070 	pop	{r4, r5, r6, lr}
   11654:	ea00277a 	b	1b444 <TargetDebug::debuggerCommand(char*, char*, int)>

00011658 <McBase::McBase()>:
   11658:	e92d4010 	push	{r4, lr}
   1165c:	e1a04000 	mov	r4, r0
   11660:	e59f300c 	ldr	r3, [pc, #12]	; 11674 <McBase::McBase()+0x1c>
   11664:	e5803000 	str	r3, [r0]
   11668:	eb00023f 	bl	11f6c <McManager::add(McBase*)>
   1166c:	e1a00004 	mov	r0, r4
   11670:	e8bd8010 	pop	{r4, pc}
   11674:	0002eea8 	.word	0x0002eea8

00011678 <McBase::getDescriptorTableCount()>:
   11678:	e3a00001 	mov	r0, #1
   1167c:	e12fff1e 	bx	lr

00011680 <McBase::reset(bool)>:
   11680:	e3a00000 	mov	r0, #0
   11684:	e12fff1e 	bx	lr

00011688 <McManager::sendRemoteDebugProtocolMsg(char const*, char const*)>:
   11688:	e59f3018 	ldr	r3, [pc, #24]	; 116a8 <McManager::sendRemoteDebugProtocolMsg(char const*, char const*)+0x20>
   1168c:	e5933000 	ldr	r3, [r3]
   11690:	e3530000 	cmp	r3, #0
   11694:	012fff1e 	bxeq	lr
   11698:	e1a02001 	mov	r2, r1
   1169c:	e1a01000 	mov	r1, r0
   116a0:	e1a00003 	mov	r0, r3
   116a4:	eafff56a 	b	ec54 <CommandHandler::sendRemoteDebugProtocolMsg(char const*, char const*)>
   116a8:	00045500 	.word	0x00045500

000116ac <McManager::busAccessCallback(unsigned long, unsigned long, unsigned long)>:
   116ac:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   116b0:	e3a03902 	mov	r3, #32768	; 0x8000
   116b4:	e24dd00c 	sub	sp, sp, #12
   116b8:	e1a06001 	mov	r6, r1
   116bc:	e1a07002 	mov	r7, r2
   116c0:	e1a05000 	mov	r5, r0
   116c4:	ebffff89 	bl	114f0 <HwManager::handleMemOrIOReq(unsigned long, unsigned long, unsigned long, unsigned long)>
   116c8:	e1a04000 	mov	r4, r0
   116cc:	eb00220c 	bl	19f04 <TargetDebug::get()>
   116d0:	e3500000 	cmp	r0, #0
   116d4:	0a000005 	beq	116f0 <McManager::busAccessCallback(unsigned long, unsigned long, unsigned long)+0x44>
   116d8:	e58d4000 	str	r4, [sp]
   116dc:	e1a03007 	mov	r3, r7
   116e0:	e1a02006 	mov	r2, r6
   116e4:	e1a01005 	mov	r1, r5
   116e8:	eb00281e 	bl	1b768 <TargetDebug::handleInterrupt(unsigned long, unsigned long, unsigned long, unsigned long)>
   116ec:	e1a04000 	mov	r4, r0
   116f0:	e59f3030 	ldr	r3, [pc, #48]	; 11728 <McManager::busAccessCallback(unsigned long, unsigned long, unsigned long)+0x7c>
   116f4:	e5930004 	ldr	r0, [r3, #4]
   116f8:	e3500000 	cmp	r0, #0
   116fc:	03a00902 	moveq	r0, #32768	; 0x8000
   11700:	0a000006 	beq	11720 <McManager::busAccessCallback(unsigned long, unsigned long, unsigned long)+0x74>
   11704:	e590c000 	ldr	ip, [r0]
   11708:	e58d4000 	str	r4, [sp]
   1170c:	e1a03007 	mov	r3, r7
   11710:	e1a02006 	mov	r2, r6
   11714:	e1a01005 	mov	r1, r5
   11718:	e59c4024 	ldr	r4, [ip, #36]	; 0x24
   1171c:	e12fff34 	blx	r4
   11720:	e28dd00c 	add	sp, sp, #12
   11724:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   11728:	00045500 	.word	0x00045500

0001172c <McManager::setMachineOpts(char const*) [clone .part.3]>:
   1172c:	e3a01000 	mov	r1, #0
   11730:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   11734:	e59f50d0 	ldr	r5, [pc, #208]	; 1180c <McManager::setMachineOpts(char const*) [clone .part.3]+0xe0>
   11738:	e24dd00c 	sub	sp, sp, #12
   1173c:	e1a06000 	mov	r6, r0
   11740:	e1a00001 	mov	r0, r1
   11744:	eb001dbf 	bl	18e48 <BusAccess::waitSetup(bool, bool)>
   11748:	e5950004 	ldr	r0, [r5, #4]
   1174c:	e5903000 	ldr	r3, [r0]
   11750:	e5933004 	ldr	r3, [r3, #4]
   11754:	e12fff33 	blx	r3
   11758:	e5950004 	ldr	r0, [r5, #4]
   1175c:	e3500000 	cmp	r0, #0
   11760:	0a000027 	beq	11804 <McManager::setMachineOpts(char const*) [clone .part.3]+0xd8>
   11764:	e5903000 	ldr	r3, [r0]
   11768:	e3e01000 	mvn	r1, #0
   1176c:	e593300c 	ldr	r3, [r3, #12]
   11770:	e12fff33 	blx	r3
   11774:	e1a04000 	mov	r4, r0
   11778:	e59f1090 	ldr	r1, [pc, #144]	; 11810 <McManager::setMachineOpts(char const*) [clone .part.3]+0xe4>
   1177c:	e1a00006 	mov	r0, r6
   11780:	eb006d13 	bl	2cbd4 <strstr>
   11784:	e2907000 	adds	r7, r0, #0
   11788:	13a07001 	movne	r7, #1
   1178c:	e59f1080 	ldr	r1, [pc, #128]	; 11814 <McManager::setMachineOpts(char const*) [clone .part.3]+0xe8>
   11790:	e5c4703a 	strb	r7, [r4, #58]	; 0x3a
   11794:	e1a00006 	mov	r0, r6
   11798:	eb006d0d 	bl	2cbd4 <strstr>
   1179c:	e2900000 	adds	r0, r0, #0
   117a0:	13a00001 	movne	r0, #1
   117a4:	e1a03006 	mov	r3, r6
   117a8:	e59f2068 	ldr	r2, [pc, #104]	; 11818 <McManager::setMachineOpts(char const*) [clone .part.3]+0xec>
   117ac:	e5c4003b 	strb	r0, [r4, #59]	; 0x3b
   117b0:	e3a01004 	mov	r1, #4
   117b4:	e58d0004 	str	r0, [sp, #4]
   117b8:	e58d7000 	str	r7, [sp]
   117bc:	e59f0058 	ldr	r0, [pc, #88]	; 1181c <McManager::setMachineOpts(char const*) [clone .part.3]+0xf0>
   117c0:	ebffdffb 	bl	97b4 <LogWrite>
   117c4:	e5d4003a 	ldrb	r0, [r4, #58]	; 0x3a
   117c8:	eb001ead 	bl	19284 <RAMEmulator::activateEmulation(bool)>
   117cc:	e5d4003a 	ldrb	r0, [r4, #58]	; 0x3a
   117d0:	ebfffedd 	bl	1134c <HwManager::pageOutForEmulation(bool)>
   117d4:	e5d41039 	ldrb	r1, [r4, #57]	; 0x39
   117d8:	e5d40038 	ldrb	r0, [r4, #56]	; 0x38
   117dc:	e3510000 	cmp	r1, #0
   117e0:	05d4103a 	ldrbeq	r1, [r4, #58]	; 0x3a
   117e4:	eb001d97 	bl	18e48 <BusAccess::waitSetup(bool, bool)>
   117e8:	e1c500d4 	ldrd	r0, [r5, #4]
   117ec:	e5903000 	ldr	r3, [r0]
   117f0:	e5933000 	ldr	r3, [r3]
   117f4:	e12fff33 	blx	r3
   117f8:	e3a00001 	mov	r0, #1
   117fc:	e28dd00c 	add	sp, sp, #12
   11800:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   11804:	e59f4014 	ldr	r4, [pc, #20]	; 11820 <McManager::setMachineOpts(char const*) [clone .part.3]+0xf4>
   11808:	eaffffda 	b	11778 <McManager::setMachineOpts(char const*) [clone .part.3]+0x4c>
   1180c:	00045500 	.word	0x00045500
   11810:	0002eedc 	.word	0x0002eedc
   11814:	0002eee4 	.word	0x0002eee4
   11818:	0002eeec 	.word	0x0002eeec
   1181c:	0002eed0 	.word	0x0002eed0
   11820:	00042088 	.word	0x00042088

00011824 <McManager::targetIrqFromTimer(void*)>:
   11824:	e92d4010 	push	{r4, lr}
   11828:	eb0018b8 	bl	17b10 <BusAccess::isUnderControl()>
   1182c:	e3500000 	cmp	r0, #0
   11830:	18bd8010 	popne	{r4, pc}
   11834:	eb001df0 	bl	18ffc <BusAccess::pauseIsPaused()>
   11838:	e3500000 	cmp	r0, #0
   1183c:	18bd8010 	popne	{r4, pc}
   11840:	e3e00000 	mvn	r0, #0
   11844:	e8bd4010 	pop	{r4, lr}
   11848:	ea0018a3 	b	17adc <BusAccess::targetIRQ(int)>

0001184c <McManager::handleTargetProgram(bool, bool, bool) [clone .part.4]>:
   1184c:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11850:	e3a05000 	mov	r5, #0
   11854:	e24ddfb5 	sub	sp, sp, #724	; 0x2d4
   11858:	e1cd01fc 	strd	r0, [sp, #28]
   1185c:	e58d2024 	str	r2, [sp, #36]	; 0x24
   11860:	e1a06005 	mov	r6, r5
   11864:	e59f9410 	ldr	r9, [pc, #1040]	; 11c7c <McManager::handleTargetProgram(bool, bool, bool) [clone .part.4]+0x430>
   11868:	e59f8410 	ldr	r8, [pc, #1040]	; 11c80 <McManager::handleTargetProgram(bool, bool, bool) [clone .part.4]+0x434>
   1186c:	ea00000c 	b	118a4 <McManager::handleTargetProgram(bool, bool, bool) [clone .part.4]+0x58>
   11870:	e59f340c 	ldr	r3, [pc, #1036]	; 11c84 <McManager::handleTargetProgram(bool, bool, bool) [clone .part.4]+0x438>
   11874:	e5d33000 	ldrb	r3, [r3]
   11878:	e3530000 	cmp	r3, #0
   1187c:	1a00001c 	bne	118f4 <McManager::handleTargetProgram(bool, bool, bool) [clone .part.4]+0xa8>
   11880:	e58d3000 	str	r3, [sp]
   11884:	e1a0200b 	mov	r2, fp
   11888:	e1a01007 	mov	r1, r7
   1188c:	e1a0000a 	mov	r0, sl
   11890:	eb001a18 	bl	180f8 <BusAccess::blockWrite(unsigned long, unsigned char const*, unsigned long, int, int)>
   11894:	e5943000 	ldr	r3, [r4]
   11898:	e2855001 	add	r5, r5, #1
   1189c:	e3530000 	cmp	r3, #0
   118a0:	03a06001 	moveq	r6, #1
   118a4:	eb00290f 	bl	1bce8 <TargetState::numMemoryBlocks()>
   118a8:	e1500005 	cmp	r0, r5
   118ac:	da000015 	ble	11908 <McManager::handleTargetProgram(bool, bool, bool) [clone .part.4]+0xbc>
   118b0:	e1a00005 	mov	r0, r5
   118b4:	eb00290f 	bl	1bcf8 <TargetState::getMemoryBlock(int)>
   118b8:	e1a04000 	mov	r4, r0
   118bc:	e5902004 	ldr	r2, [r0, #4]
   118c0:	e5903000 	ldr	r3, [r0]
   118c4:	e3a01005 	mov	r1, #5
   118c8:	e58d2000 	str	r2, [sp]
   118cc:	e1a00008 	mov	r0, r8
   118d0:	e1a02009 	mov	r2, r9
   118d4:	ebffdfb6 	bl	97b4 <LogWrite>
   118d8:	e594a000 	ldr	sl, [r4]
   118dc:	eb002909 	bl	1bd08 <TargetState::getMemoryImagePtr()>
   118e0:	e8940802 	ldm	r4, {r1, fp}
   118e4:	e0807001 	add	r7, r0, r1
   118e8:	eb001dc3 	bl	18ffc <BusAccess::pauseIsPaused()>
   118ec:	e3500000 	cmp	r0, #0
   118f0:	0affffde 	beq	11870 <McManager::handleTargetProgram(bool, bool, bool) [clone .part.4]+0x24>
   118f4:	e1a0200b 	mov	r2, fp
   118f8:	e1a01007 	mov	r1, r7
   118fc:	e1a0000a 	mov	r0, sl
   11900:	eb001e7c 	bl	192f8 <RAMEmulator::blockWrite(unsigned long, unsigned char const*, unsigned long)>
   11904:	eaffffe2 	b	11894 <McManager::handleTargetProgram(bool, bool, bool) [clone .part.4]+0x48>
   11908:	eb0028f6 	bl	1bce8 <TargetState::numMemoryBlocks()>
   1190c:	e59f2374 	ldr	r2, [pc, #884]	; 11c88 <McManager::handleTargetProgram(bool, bool, bool) [clone .part.4]+0x43c>
   11910:	e1a03000 	mov	r3, r0
   11914:	e3a01005 	mov	r1, #5
   11918:	e59f0360 	ldr	r0, [pc, #864]	; 11c80 <McManager::handleTargetProgram(bool, bool, bool) [clone .part.4]+0x434>
   1191c:	ebffdfa4 	bl	97b4 <LogWrite>
   11920:	e59d3020 	ldr	r3, [sp, #32]
   11924:	e3530000 	cmp	r3, #0
   11928:	1a00001b 	bne	1199c <McManager::handleTargetProgram(bool, bool, bool) [clone .part.4]+0x150>
   1192c:	e59d301c 	ldr	r3, [sp, #28]
   11930:	e3530000 	cmp	r3, #0
   11934:	0a000014 	beq	1198c <McManager::handleTargetProgram(bool, bool, bool) [clone .part.4]+0x140>
   11938:	e59f234c 	ldr	r2, [pc, #844]	; 11c8c <McManager::handleTargetProgram(bool, bool, bool) [clone .part.4]+0x440>
   1193c:	e3a01004 	mov	r1, #4
   11940:	e59f0338 	ldr	r0, [pc, #824]	; 11c80 <McManager::handleTargetProgram(bool, bool, bool) [clone .part.4]+0x434>
   11944:	ebffdf9a 	bl	97b4 <LogWrite>
   11948:	eb00216d 	bl	19f04 <TargetDebug::get()>
   1194c:	e1a04000 	mov	r4, r0
   11950:	eb002905 	bl	1bd6c <TargetState::areRegistersValid()>
   11954:	e3540000 	cmp	r4, #0
   11958:	03a05000 	moveq	r5, #0
   1195c:	12005001 	andne	r5, r0, #1
   11960:	e3550000 	cmp	r5, #0
   11964:	1a00000e 	bne	119a4 <McManager::handleTargetProgram(bool, bool, bool) [clone .part.4]+0x158>
   11968:	e59f3320 	ldr	r3, [pc, #800]	; 11c90 <McManager::handleTargetProgram(bool, bool, bool) [clone .part.4]+0x444>
   1196c:	e59f2320 	ldr	r2, [pc, #800]	; 11c94 <McManager::handleTargetProgram(bool, bool, bool) [clone .part.4]+0x448>
   11970:	e3a01004 	mov	r1, #4
   11974:	e59f0304 	ldr	r0, [pc, #772]	; 11c80 <McManager::handleTargetProgram(bool, bool, bool) [clone .part.4]+0x434>
   11978:	ebffdf8d 	bl	97b4 <LogWrite>
   1197c:	e59d001c 	ldr	r0, [sp, #28]
   11980:	eb0018ac 	bl	17c38 <BusAccess::controlRelease(bool)>
   11984:	e28ddfb5 	add	sp, sp, #724	; 0x2d4
   11988:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1198c:	e1a00003 	mov	r0, r3
   11990:	eb0018a8 	bl	17c38 <BusAccess::controlRelease(bool)>
   11994:	e28ddfb5 	add	sp, sp, #724	; 0x2d4
   11998:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1199c:	eb001d90 	bl	18fe4 <BusAccess::pause()>
   119a0:	eaffffe1 	b	1192c <McManager::handleTargetProgram(bool, bool, bool) [clone .part.4]+0xe0>
   119a4:	e59f72ec 	ldr	r7, [pc, #748]	; 11c98 <McManager::handleTargetProgram(bool, bool, bool) [clone .part.4]+0x44c>
   119a8:	e5970004 	ldr	r0, [r7, #4]
   119ac:	e3500000 	cmp	r0, #0
   119b0:	0a000022 	beq	11a40 <McManager::handleTargetProgram(bool, bool, bool) [clone .part.4]+0x1f4>
   119b4:	e5903000 	ldr	r3, [r0]
   119b8:	e3e01000 	mvn	r1, #0
   119bc:	e593300c 	ldr	r3, [r3, #12]
   119c0:	e12fff33 	blx	r3
   119c4:	e5d0303b 	ldrb	r3, [r0, #59]	; 0x3b
   119c8:	e59d2024 	ldr	r2, [sp, #36]	; 0x24
   119cc:	e1923003 	orrs	r3, r2, r3
   119d0:	0a00001c 	beq	11a48 <McManager::handleTargetProgram(bool, bool, bool) [clone .part.4]+0x1fc>
   119d4:	e3a0a000 	mov	sl, #0
   119d8:	e28d00dc 	add	r0, sp, #220	; 0xdc
   119dc:	e58da0f8 	str	sl, [sp, #248]	; 0xf8
   119e0:	e58da0f4 	str	sl, [sp, #244]	; 0xf4
   119e4:	e58da0f0 	str	sl, [sp, #240]	; 0xf0
   119e8:	e58da0ec 	str	sl, [sp, #236]	; 0xec
   119ec:	e58da0e8 	str	sl, [sp, #232]	; 0xe8
   119f0:	e58da0e4 	str	sl, [sp, #228]	; 0xe4
   119f4:	e58da0e0 	str	sl, [sp, #224]	; 0xe0
   119f8:	e58da0dc 	str	sl, [sp, #220]	; 0xdc
   119fc:	e58da10c 	str	sl, [sp, #268]	; 0x10c
   11a00:	e58da108 	str	sl, [sp, #264]	; 0x108
   11a04:	e58da104 	str	sl, [sp, #260]	; 0x104
   11a08:	e58da100 	str	sl, [sp, #256]	; 0x100
   11a0c:	e58da0fc 	str	sl, [sp, #252]	; 0xfc
   11a10:	e58da120 	str	sl, [sp, #288]	; 0x120
   11a14:	e58da11c 	str	sl, [sp, #284]	; 0x11c
   11a18:	e58da118 	str	sl, [sp, #280]	; 0x118
   11a1c:	e58da114 	str	sl, [sp, #276]	; 0x114
   11a20:	e58da110 	str	sl, [sp, #272]	; 0x110
   11a24:	eb0028d4 	bl	1bd7c <TargetState::getTargetRegs(Z80Registers&)>
   11a28:	e28d10dc 	add	r1, sp, #220	; 0xdc
   11a2c:	e1a00004 	mov	r0, r4
   11a30:	e58da01c 	str	sl, [sp, #28]
   11a34:	eb00216f 	bl	19ff8 <TargetDebug::startSetRegisterSequence(Z80Registers*)>
   11a38:	e59f325c 	ldr	r3, [pc, #604]	; 11c9c <McManager::handleTargetProgram(bool, bool, bool) [clone .part.4]+0x450>
   11a3c:	eaffffca 	b	1196c <McManager::handleTargetProgram(bool, bool, bool) [clone .part.4]+0x120>
   11a40:	e59f0258 	ldr	r0, [pc, #600]	; 11ca0 <McManager::handleTargetProgram(bool, bool, bool) [clone .part.4]+0x454>
   11a44:	eaffffde 	b	119c4 <McManager::handleTargetProgram(bool, bool, bool) [clone .part.4]+0x178>
   11a48:	e3560000 	cmp	r6, #0
   11a4c:	1affffc5 	bne	11968 <McManager::handleTargetProgram(bool, bool, bool) [clone .part.4]+0x11c>
   11a50:	e28d0030 	add	r0, sp, #48	; 0x30
   11a54:	e58d604c 	str	r6, [sp, #76]	; 0x4c
   11a58:	e58d6048 	str	r6, [sp, #72]	; 0x48
   11a5c:	e58d6044 	str	r6, [sp, #68]	; 0x44
   11a60:	e58d6040 	str	r6, [sp, #64]	; 0x40
   11a64:	e58d603c 	str	r6, [sp, #60]	; 0x3c
   11a68:	e58d6038 	str	r6, [sp, #56]	; 0x38
   11a6c:	e58d6034 	str	r6, [sp, #52]	; 0x34
   11a70:	e58d6030 	str	r6, [sp, #48]	; 0x30
   11a74:	e58d6060 	str	r6, [sp, #96]	; 0x60
   11a78:	e58d605c 	str	r6, [sp, #92]	; 0x5c
   11a7c:	e58d6058 	str	r6, [sp, #88]	; 0x58
   11a80:	e58d6054 	str	r6, [sp, #84]	; 0x54
   11a84:	e58d6050 	str	r6, [sp, #80]	; 0x50
   11a88:	e58d6074 	str	r6, [sp, #116]	; 0x74
   11a8c:	e58d6070 	str	r6, [sp, #112]	; 0x70
   11a90:	e58d606c 	str	r6, [sp, #108]	; 0x6c
   11a94:	e58d6068 	str	r6, [sp, #104]	; 0x68
   11a98:	e58d6064 	str	r6, [sp, #100]	; 0x64
   11a9c:	eb0028b6 	bl	1bd7c <TargetState::getTargetRegs(Z80Registers&)>
   11aa0:	e1cd23d0 	ldrd	r2, [sp, #48]	; 0x30
   11aa4:	e59d104c 	ldr	r1, [sp, #76]	; 0x4c
   11aa8:	e59de03c 	ldr	lr, [sp, #60]	; 0x3c
   11aac:	e59dc038 	ldr	ip, [sp, #56]	; 0x38
   11ab0:	e59d0044 	ldr	r0, [sp, #68]	; 0x44
   11ab4:	e59d4048 	ldr	r4, [sp, #72]	; 0x48
   11ab8:	e58d1014 	str	r1, [sp, #20]
   11abc:	e59d1040 	ldr	r1, [sp, #64]	; 0x40
   11ac0:	e98d5001 	stmib	sp, {r0, ip, lr}
   11ac4:	e58d1000 	str	r1, [sp]
   11ac8:	e58d4010 	str	r4, [sp, #16]
   11acc:	e59f11d0 	ldr	r1, [pc, #464]	; 11ca4 <McManager::handleTargetProgram(bool, bool, bool) [clone .part.4]+0x458>
   11ad0:	e28d0078 	add	r0, sp, #120	; 0x78
   11ad4:	ebffdfb6 	bl	99b4 <ee_sprintf>
   11ad8:	e28d1078 	add	r1, sp, #120	; 0x78
   11adc:	e3a02f7d 	mov	r2, #500	; 0x1f4
   11ae0:	e28d00dc 	add	r0, sp, #220	; 0xdc
   11ae4:	eb006a81 	bl	2c4f0 <strlcpy>
   11ae8:	e59d1064 	ldr	r1, [sp, #100]	; 0x64
   11aec:	e59de068 	ldr	lr, [sp, #104]	; 0x68
   11af0:	e59dc054 	ldr	ip, [sp, #84]	; 0x54
   11af4:	e58d1008 	str	r1, [sp, #8]
   11af8:	e59d1050 	ldr	r1, [sp, #80]	; 0x50
   11afc:	e58de00c 	str	lr, [sp, #12]
   11b00:	e88d1002 	stm	sp, {r1, ip}
   11b04:	e59d3058 	ldr	r3, [sp, #88]	; 0x58
   11b08:	e59d205c 	ldr	r2, [sp, #92]	; 0x5c
   11b0c:	e59f1194 	ldr	r1, [pc, #404]	; 11ca8 <McManager::handleTargetProgram(bool, bool, bool) [clone .part.4]+0x45c>
   11b10:	e28d0078 	add	r0, sp, #120	; 0x78
   11b14:	ebffdfa6 	bl	99b4 <ee_sprintf>
   11b18:	e28d1078 	add	r1, sp, #120	; 0x78
   11b1c:	e3a02f7d 	mov	r2, #500	; 0x1f4
   11b20:	e28d00dc 	add	r0, sp, #220	; 0xdc
   11b24:	eb006a41 	bl	2c430 <strlcat>
   11b28:	e59dc074 	ldr	ip, [sp, #116]	; 0x74
   11b2c:	e59d1070 	ldr	r1, [sp, #112]	; 0x70
   11b30:	e59d306c 	ldr	r3, [sp, #108]	; 0x6c
   11b34:	e88d1002 	stm	sp, {r1, ip}
   11b38:	e59d2060 	ldr	r2, [sp, #96]	; 0x60
   11b3c:	e59f1168 	ldr	r1, [pc, #360]	; 11cac <McManager::handleTargetProgram(bool, bool, bool) [clone .part.4]+0x460>
   11b40:	e28d0078 	add	r0, sp, #120	; 0x78
   11b44:	ebffdf9a 	bl	99b4 <ee_sprintf>
   11b48:	e28d1078 	add	r1, sp, #120	; 0x78
   11b4c:	e3a02f7d 	mov	r2, #500	; 0x1f4
   11b50:	e28d00dc 	add	r0, sp, #220	; 0xdc
   11b54:	eb006a35 	bl	2c430 <strlcat>
   11b58:	e59f0120 	ldr	r0, [pc, #288]	; 11c80 <McManager::handleTargetProgram(bool, bool, bool) [clone .part.4]+0x434>
   11b5c:	e28d30dc 	add	r3, sp, #220	; 0xdc
   11b60:	e59f2148 	ldr	r2, [pc, #328]	; 11cb0 <McManager::handleTargetProgram(bool, bool, bool) [clone .part.4]+0x464>
   11b64:	e3a01004 	mov	r1, #4
   11b68:	ebffdf11 	bl	97b4 <LogWrite>
   11b6c:	e5970004 	ldr	r0, [r7, #4]
   11b70:	e3500000 	cmp	r0, #0
   11b74:	0a00000d 	beq	11bb0 <McManager::handleTargetProgram(bool, bool, bool) [clone .part.4]+0x364>
   11b78:	e5903000 	ldr	r3, [r0]
   11b7c:	e3e01000 	mvn	r1, #0
   11b80:	e593300c 	ldr	r3, [r3, #12]
   11b84:	e12fff33 	blx	r3
   11b88:	e590403c 	ldr	r4, [r0, #60]	; 0x3c
   11b8c:	e28d1030 	add	r1, sp, #48	; 0x30
   11b90:	e1a00004 	mov	r0, r4
   11b94:	e3a03064 	mov	r3, #100	; 0x64
   11b98:	e28d2078 	add	r2, sp, #120	; 0x78
   11b9c:	eb00201b 	bl	19c10 <TargetCPUZ80::getSnippetToSetRegs(unsigned long, Z80Registers&, unsigned char*, unsigned long)>
   11ba0:	e2506000 	subs	r6, r0, #0
   11ba4:	1a000003 	bne	11bb8 <McManager::handleTargetProgram(bool, bool, bool) [clone .part.4]+0x36c>
   11ba8:	e58d501c 	str	r5, [sp, #28]
   11bac:	eaffff6d 	b	11968 <McManager::handleTargetProgram(bool, bool, bool) [clone .part.4]+0x11c>
   11bb0:	e59f00e8 	ldr	r0, [pc, #232]	; 11ca0 <McManager::handleTargetProgram(bool, bool, bool) [clone .part.4]+0x454>
   11bb4:	eafffff3 	b	11b88 <McManager::handleTargetProgram(bool, bool, bool) [clone .part.4]+0x33c>
   11bb8:	e1a03004 	mov	r3, r4
   11bbc:	e59f20f0 	ldr	r2, [pc, #240]	; 11cb4 <McManager::handleTargetProgram(bool, bool, bool) [clone .part.4]+0x468>
   11bc0:	e3a01004 	mov	r1, #4
   11bc4:	e59f00b4 	ldr	r0, [pc, #180]	; 11c80 <McManager::handleTargetProgram(bool, bool, bool) [clone .part.4]+0x434>
   11bc8:	e58d6000 	str	r6, [sp]
   11bcc:	ebffdef8 	bl	97b4 <LogWrite>
   11bd0:	eb001d09 	bl	18ffc <BusAccess::pauseIsPaused()>
   11bd4:	e3500000 	cmp	r0, #0
   11bd8:	1a00001d 	bne	11c54 <McManager::handleTargetProgram(bool, bool, bool) [clone .part.4]+0x408>
   11bdc:	e59f30a0 	ldr	r3, [pc, #160]	; 11c84 <McManager::handleTargetProgram(bool, bool, bool) [clone .part.4]+0x438>
   11be0:	e5d33000 	ldrb	r3, [r3]
   11be4:	e3530000 	cmp	r3, #0
   11be8:	1a000019 	bne	11c54 <McManager::handleTargetProgram(bool, bool, bool) [clone .part.4]+0x408>
   11bec:	e58d3000 	str	r3, [sp]
   11bf0:	e1a02006 	mov	r2, r6
   11bf4:	e28d1078 	add	r1, sp, #120	; 0x78
   11bf8:	e1a00004 	mov	r0, r4
   11bfc:	eb00193d 	bl	180f8 <BusAccess::blockWrite(unsigned long, unsigned char const*, unsigned long, int, int)>
   11c00:	e3e0303c 	mvn	r3, #60	; 0x3c
   11c04:	e1a02424 	lsr	r2, r4, #8
   11c08:	e5cd402d 	strb	r4, [sp, #45]	; 0x2d
   11c0c:	e5cd202e 	strb	r2, [sp, #46]	; 0x2e
   11c10:	e5cd302c 	strb	r3, [sp, #44]	; 0x2c
   11c14:	eb001cf8 	bl	18ffc <BusAccess::pauseIsPaused()>
   11c18:	e3500000 	cmp	r0, #0
   11c1c:	1a000011 	bne	11c68 <McManager::handleTargetProgram(bool, bool, bool) [clone .part.4]+0x41c>
   11c20:	e59f305c 	ldr	r3, [pc, #92]	; 11c84 <McManager::handleTargetProgram(bool, bool, bool) [clone .part.4]+0x438>
   11c24:	e5d33000 	ldrb	r3, [r3]
   11c28:	e3530000 	cmp	r3, #0
   11c2c:	1a00000d 	bne	11c68 <McManager::handleTargetProgram(bool, bool, bool) [clone .part.4]+0x41c>
   11c30:	e58d3000 	str	r3, [sp]
   11c34:	e3a02003 	mov	r2, #3
   11c38:	e28d102c 	add	r1, sp, #44	; 0x2c
   11c3c:	eb00192d 	bl	180f8 <BusAccess::blockWrite(unsigned long, unsigned char const*, unsigned long, int, int)>
   11c40:	e28d3078 	add	r3, sp, #120	; 0x78
   11c44:	e0831006 	add	r1, r3, r6
   11c48:	e1a00003 	mov	r0, r3
   11c4c:	ebffdf7e 	bl	9a4c <ee_dump_mem>
   11c50:	eaffffd4 	b	11ba8 <McManager::handleTargetProgram(bool, bool, bool) [clone .part.4]+0x35c>
   11c54:	e1a02006 	mov	r2, r6
   11c58:	e28d1078 	add	r1, sp, #120	; 0x78
   11c5c:	e1a00004 	mov	r0, r4
   11c60:	eb001da4 	bl	192f8 <RAMEmulator::blockWrite(unsigned long, unsigned char const*, unsigned long)>
   11c64:	eaffffe5 	b	11c00 <McManager::handleTargetProgram(bool, bool, bool) [clone .part.4]+0x3b4>
   11c68:	e3a02003 	mov	r2, #3
   11c6c:	e28d102c 	add	r1, sp, #44	; 0x2c
   11c70:	e3a00000 	mov	r0, #0
   11c74:	eb001d9f 	bl	192f8 <RAMEmulator::blockWrite(unsigned long, unsigned char const*, unsigned long)>
   11c78:	eafffff0 	b	11c40 <McManager::handleTargetProgram(bool, bool, bool) [clone .part.4]+0x3f4>
   11c7c:	0002ef18 	.word	0x0002ef18
   11c80:	0002eed0 	.word	0x0002eed0
   11c84:	0005ace0 	.word	0x0005ace0
   11c88:	0002ef38 	.word	0x0002ef38
   11c8c:	0002ef5c 	.word	0x0002ef5c
   11c90:	0002ee4c 	.word	0x0002ee4c
   11c94:	0002f050 	.word	0x0002f050
   11c98:	00045500 	.word	0x00045500
   11c9c:	0002ee30 	.word	0x0002ee30
   11ca0:	00042088 	.word	0x00042088
   11ca4:	0002ef74 	.word	0x0002ef74
   11ca8:	0002efb4 	.word	0x0002efb4
   11cac:	0002efe8 	.word	0x0002efe8
   11cb0:	0002f024 	.word	0x0002f024
   11cb4:	0002f030 	.word	0x0002f030

00011cb8 <McManager::init(CommandHandler*, Display*)>:
   11cb8:	e92d4010 	push	{r4, lr}
   11cbc:	e59f3020 	ldr	r3, [pc, #32]	; 11ce4 <McManager::init(CommandHandler*, Display*)+0x2c>
   11cc0:	e5830000 	str	r0, [r3]
   11cc4:	e583100c 	str	r1, [r3, #12]
   11cc8:	eb00208d 	bl	19f04 <TargetDebug::get()>
   11ccc:	e8bd4010 	pop	{r4, lr}
   11cd0:	e59f3010 	ldr	r3, [pc, #16]	; 11ce8 <McManager::init(CommandHandler*, Display*)+0x30>
   11cd4:	e59f2010 	ldr	r2, [pc, #16]	; 11cec <McManager::init(CommandHandler*, Display*)+0x34>
   11cd8:	e59f0010 	ldr	r0, [pc, #16]	; 11cf0 <McManager::init(CommandHandler*, Display*)+0x38>
   11cdc:	e5832000 	str	r2, [r3]
   11ce0:	ea001c23 	b	18d74 <BusAccess::accessCallbackAdd(unsigned long (*)(unsigned long, unsigned long, unsigned long))>
   11ce4:	00045500 	.word	0x00045500
   11ce8:	0006ae80 	.word	0x0006ae80
   11cec:	00011688 	.word	0x00011688
   11cf0:	000116ac 	.word	0x000116ac

00011cf4 <McManager::getNumMachines()>:
   11cf4:	e59f3004 	ldr	r3, [pc, #4]	; 11d00 <McManager::getNumMachines()+0xc>
   11cf8:	e5930010 	ldr	r0, [r3, #16]
   11cfc:	e12fff1e 	bx	lr
   11d00:	00045500 	.word	0x00045500

00011d04 <McManager::getMachine()>:
   11d04:	e59f3004 	ldr	r3, [pc, #4]	; 11d10 <McManager::getMachine()+0xc>
   11d08:	e5930004 	ldr	r0, [r3, #4]
   11d0c:	e12fff1e 	bx	lr
   11d10:	00045500 	.word	0x00045500

00011d14 <McManager::getDescriptorTable()>:
   11d14:	e59f3020 	ldr	r3, [pc, #32]	; 11d3c <McManager::getDescriptorTable()+0x28>
   11d18:	e5930004 	ldr	r0, [r3, #4]
   11d1c:	e3500000 	cmp	r0, #0
   11d20:	0a000003 	beq	11d34 <McManager::getDescriptorTable()+0x20>
   11d24:	e5903000 	ldr	r3, [r0]
   11d28:	e3e01000 	mvn	r1, #0
   11d2c:	e593300c 	ldr	r3, [r3, #12]
   11d30:	e12fff13 	bx	r3
   11d34:	e59f0004 	ldr	r0, [pc, #4]	; 11d40 <McManager::getDescriptorTable()+0x2c>
   11d38:	e12fff1e 	bx	lr
   11d3c:	00045500 	.word	0x00045500
   11d40:	00042088 	.word	0x00042088

00011d44 <McManager::getMachineJSON()>:
   11d44:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11d48:	e59fb1cc 	ldr	fp, [pc, #460]	; 11f1c <McManager::getMachineJSON()+0x1d8>
   11d4c:	e24dd00c 	sub	sp, sp, #12
   11d50:	e3a02e46 	mov	r2, #1120	; 0x460
   11d54:	e28b0014 	add	r0, fp, #20
   11d58:	e59f11c0 	ldr	r1, [pc, #448]	; 11f20 <McManager::getMachineJSON()+0x1dc>
   11d5c:	eb0069e3 	bl	2c4f0 <strlcpy>
   11d60:	e59b3010 	ldr	r3, [fp, #16]
   11d64:	e28b5014 	add	r5, fp, #20
   11d68:	e3530000 	cmp	r3, #0
   11d6c:	da00003e 	ble	11e6c <McManager::getMachineJSON()+0x128>
   11d70:	e3a03000 	mov	r3, #0
   11d74:	e1a06005 	mov	r6, r5
   11d78:	e3a09001 	mov	r9, #1
   11d7c:	e28b7e47 	add	r7, fp, #1136	; 0x470
   11d80:	e59fa19c 	ldr	sl, [pc, #412]	; 11f24 <McManager::getMachineJSON()+0x1e0>
   11d84:	e59f819c 	ldr	r8, [pc, #412]	; 11f28 <McManager::getMachineJSON()+0x1e4>
   11d88:	e58d3004 	str	r3, [sp, #4]
   11d8c:	e2877008 	add	r7, r7, #8
   11d90:	e3a04000 	mov	r4, #0
   11d94:	ea000016 	b	11df4 <McManager::getMachineJSON()+0xb0>
   11d98:	e3a02e46 	mov	r2, #1120	; 0x460
   11d9c:	e1a01008 	mov	r1, r8
   11da0:	eb0069d2 	bl	2c4f0 <strlcpy>
   11da4:	e1a00006 	mov	r0, r6
   11da8:	eb0069e5 	bl	2c544 <strlen>
   11dac:	e1a09000 	mov	r9, r0
   11db0:	e5970000 	ldr	r0, [r7]
   11db4:	e1a01004 	mov	r1, r4
   11db8:	e5903000 	ldr	r3, [r0]
   11dbc:	e2844001 	add	r4, r4, #1
   11dc0:	e593300c 	ldr	r3, [r3, #12]
   11dc4:	e12fff33 	blx	r3
   11dc8:	e3a02e46 	mov	r2, #1120	; 0x460
   11dcc:	e5901000 	ldr	r1, [r0]
   11dd0:	e0850009 	add	r0, r5, r9
   11dd4:	eb0069c5 	bl	2c4f0 <strlcpy>
   11dd8:	e1a00006 	mov	r0, r6
   11ddc:	eb0069d8 	bl	2c544 <strlen>
   11de0:	e3a02e46 	mov	r2, #1120	; 0x460
   11de4:	e0850000 	add	r0, r5, r0
   11de8:	e1a01008 	mov	r1, r8
   11dec:	eb0069bf 	bl	2c4f0 <strlcpy>
   11df0:	e3a09000 	mov	r9, #0
   11df4:	e5970000 	ldr	r0, [r7]
   11df8:	e5903000 	ldr	r3, [r0]
   11dfc:	e5933008 	ldr	r3, [r3, #8]
   11e00:	e153000a 	cmp	r3, sl
   11e04:	03a00001 	moveq	r0, #1
   11e08:	1a00000d 	bne	11e44 <McManager::getMachineJSON()+0x100>
   11e0c:	e1500004 	cmp	r0, r4
   11e10:	da00000e 	ble	11e50 <McManager::getMachineJSON()+0x10c>
   11e14:	e1a00006 	mov	r0, r6
   11e18:	eb0069c9 	bl	2c544 <strlen>
   11e1c:	e3590000 	cmp	r9, #0
   11e20:	e0850000 	add	r0, r5, r0
   11e24:	1affffdb 	bne	11d98 <McManager::getMachineJSON()+0x54>
   11e28:	e3a02e46 	mov	r2, #1120	; 0x460
   11e2c:	e59f10f8 	ldr	r1, [pc, #248]	; 11f2c <McManager::getMachineJSON()+0x1e8>
   11e30:	eb0069ae 	bl	2c4f0 <strlcpy>
   11e34:	e1a00006 	mov	r0, r6
   11e38:	eb0069c1 	bl	2c544 <strlen>
   11e3c:	e0850000 	add	r0, r5, r0
   11e40:	eaffffd4 	b	11d98 <McManager::getMachineJSON()+0x54>
   11e44:	e12fff33 	blx	r3
   11e48:	e1500004 	cmp	r0, r4
   11e4c:	cafffff0 	bgt	11e14 <McManager::getMachineJSON()+0xd0>
   11e50:	e59d2004 	ldr	r2, [sp, #4]
   11e54:	e59b3010 	ldr	r3, [fp, #16]
   11e58:	e2822001 	add	r2, r2, #1
   11e5c:	e1530002 	cmp	r3, r2
   11e60:	e58d2004 	str	r2, [sp, #4]
   11e64:	e2877004 	add	r7, r7, #4
   11e68:	caffffc8 	bgt	11d90 <McManager::getMachineJSON()+0x4c>
   11e6c:	e59f00bc 	ldr	r0, [pc, #188]	; 11f30 <McManager::getMachineJSON()+0x1ec>
   11e70:	eb0069b3 	bl	2c544 <strlen>
   11e74:	e3a02e46 	mov	r2, #1120	; 0x460
   11e78:	e59f10b4 	ldr	r1, [pc, #180]	; 11f34 <McManager::getMachineJSON()+0x1f0>
   11e7c:	e0850000 	add	r0, r5, r0
   11e80:	eb00699a 	bl	2c4f0 <strlcpy>
   11e84:	e59f00a4 	ldr	r0, [pc, #164]	; 11f30 <McManager::getMachineJSON()+0x1ec>
   11e88:	eb0069ad 	bl	2c544 <strlen>
   11e8c:	e3a02e46 	mov	r2, #1120	; 0x460
   11e90:	e59f10a0 	ldr	r1, [pc, #160]	; 11f38 <McManager::getMachineJSON()+0x1f4>
   11e94:	e0850000 	add	r0, r5, r0
   11e98:	eb006994 	bl	2c4f0 <strlcpy>
   11e9c:	e59f008c 	ldr	r0, [pc, #140]	; 11f30 <McManager::getMachineJSON()+0x1ec>
   11ea0:	eb0069a7 	bl	2c544 <strlen>
   11ea4:	e3a02e46 	mov	r2, #1120	; 0x460
   11ea8:	e59f1078 	ldr	r1, [pc, #120]	; 11f28 <McManager::getMachineJSON()+0x1e4>
   11eac:	e0850000 	add	r0, r5, r0
   11eb0:	eb00698e 	bl	2c4f0 <strlcpy>
   11eb4:	e59f0074 	ldr	r0, [pc, #116]	; 11f30 <McManager::getMachineJSON()+0x1ec>
   11eb8:	eb0069a1 	bl	2c544 <strlen>
   11ebc:	e59b3004 	ldr	r3, [fp, #4]
   11ec0:	e0854000 	add	r4, r5, r0
   11ec4:	e3530000 	cmp	r3, #0
   11ec8:	0a000011 	beq	11f14 <McManager::getMachineJSON()+0x1d0>
   11ecc:	e5932000 	ldr	r2, [r3]
   11ed0:	e1a00003 	mov	r0, r3
   11ed4:	e3e01000 	mvn	r1, #0
   11ed8:	e592300c 	ldr	r3, [r2, #12]
   11edc:	e12fff33 	blx	r3
   11ee0:	e5901000 	ldr	r1, [r0]
   11ee4:	e3a02e46 	mov	r2, #1120	; 0x460
   11ee8:	e1a00004 	mov	r0, r4
   11eec:	eb00697f 	bl	2c4f0 <strlcpy>
   11ef0:	e59f0038 	ldr	r0, [pc, #56]	; 11f30 <McManager::getMachineJSON()+0x1ec>
   11ef4:	eb006992 	bl	2c544 <strlen>
   11ef8:	e3a02e46 	mov	r2, #1120	; 0x460
   11efc:	e0850000 	add	r0, r5, r0
   11f00:	e59f1020 	ldr	r1, [pc, #32]	; 11f28 <McManager::getMachineJSON()+0x1e4>
   11f04:	eb006979 	bl	2c4f0 <strlcpy>
   11f08:	e59f0020 	ldr	r0, [pc, #32]	; 11f30 <McManager::getMachineJSON()+0x1ec>
   11f0c:	e28dd00c 	add	sp, sp, #12
   11f10:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11f14:	e59f0020 	ldr	r0, [pc, #32]	; 11f3c <McManager::getMachineJSON()+0x1f8>
   11f18:	eafffff0 	b	11ee0 <McManager::getMachineJSON()+0x19c>
   11f1c:	00045500 	.word	0x00045500
   11f20:	0002f06c 	.word	0x0002f06c
   11f24:	00011678 	.word	0x00011678
   11f28:	0002e8a0 	.word	0x0002e8a0
   11f2c:	0002ee9c 	.word	0x0002ee9c
   11f30:	00045514 	.word	0x00045514
   11f34:	0002f07c 	.word	0x0002f07c
   11f38:	0002f080 	.word	0x0002f080
   11f3c:	00042088 	.word	0x00042088

00011f40 <McManager::targetIrq(int)>:
   11f40:	e92d4010 	push	{r4, lr}
   11f44:	e1a04000 	mov	r4, r0
   11f48:	eb0016f0 	bl	17b10 <BusAccess::isUnderControl()>
   11f4c:	e3500000 	cmp	r0, #0
   11f50:	18bd8010 	popne	{r4, pc}
   11f54:	eb001c28 	bl	18ffc <BusAccess::pauseIsPaused()>
   11f58:	e3500000 	cmp	r0, #0
   11f5c:	18bd8010 	popne	{r4, pc}
   11f60:	e1a00004 	mov	r0, r4
   11f64:	e8bd4010 	pop	{r4, lr}
   11f68:	ea0016db 	b	17adc <BusAccess::targetIRQ(int)>

00011f6c <McManager::add(McBase*)>:
   11f6c:	e59f2018 	ldr	r2, [pc, #24]	; 11f8c <McManager::add(McBase*)+0x20>
   11f70:	e5923010 	ldr	r3, [r2, #16]
   11f74:	e3530009 	cmp	r3, #9
   11f78:	d2831001 	addle	r1, r3, #1
   11f7c:	d0823103 	addle	r3, r2, r3, lsl #2
   11f80:	d5821010 	strle	r1, [r2, #16]
   11f84:	d5830478 	strle	r0, [r3, #1144]	; 0x478
   11f88:	e12fff1e 	bx	lr
   11f8c:	00045500 	.word	0x00045500

00011f90 <McManager::setMachineIdx(int, int, bool)>:
   11f90:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   11f94:	e2506000 	subs	r6, r0, #0
   11f98:	e24dd02c 	sub	sp, sp, #44	; 0x2c
   11f9c:	ba000097 	blt	12200 <McManager::setMachineIdx(int, int, bool)+0x270>
   11fa0:	e59f5298 	ldr	r5, [pc, #664]	; 12240 <McManager::setMachineIdx(int, int, bool)+0x2b0>
   11fa4:	e5950010 	ldr	r0, [r5, #16]
   11fa8:	e1500006 	cmp	r0, r6
   11fac:	da000093 	ble	12200 <McManager::setMachineIdx(int, int, bool)+0x270>
   11fb0:	e59f428c 	ldr	r4, [pc, #652]	; 12244 <McManager::setMachineIdx(int, int, bool)+0x2b4>
   11fb4:	e5940040 	ldr	r0, [r4, #64]	; 0x40
   11fb8:	e1500006 	cmp	r0, r6
   11fbc:	1a000005 	bne	11fd8 <McManager::setMachineIdx(int, int, bool)+0x48>
   11fc0:	e5950008 	ldr	r0, [r5, #8]
   11fc4:	e1500001 	cmp	r0, r1
   11fc8:	11a00002 	movne	r0, r2
   11fcc:	03820001 	orreq	r0, r2, #1
   11fd0:	e3500000 	cmp	r0, #0
   11fd4:	0a00008a 	beq	12204 <McManager::setMachineIdx(int, int, bool)+0x274>
   11fd8:	e1a07001 	mov	r7, r1
   11fdc:	e3a01000 	mov	r1, #0
   11fe0:	e1a00001 	mov	r0, r1
   11fe4:	eb001b97 	bl	18e48 <BusAccess::waitSetup(bool, bool)>
   11fe8:	e5950004 	ldr	r0, [r5, #4]
   11fec:	e3500000 	cmp	r0, #0
   11ff0:	0a000002 	beq	12000 <McManager::setMachineIdx(int, int, bool)+0x70>
   11ff4:	e5903000 	ldr	r3, [r0]
   11ff8:	e5933004 	ldr	r3, [r3, #4]
   11ffc:	e12fff33 	blx	r3
   12000:	e0853106 	add	r3, r5, r6, lsl #2
   12004:	e5930478 	ldr	r0, [r3, #1144]	; 0x478
   12008:	e5846040 	str	r6, [r4, #64]	; 0x40
   1200c:	e5903000 	ldr	r3, [r0]
   12010:	e1a01007 	mov	r1, r7
   12014:	e9850081 	stmib	r5, {r0, r7}
   12018:	e593300c 	ldr	r3, [r3, #12]
   1201c:	e12fff33 	blx	r3
   12020:	e1a04000 	mov	r4, r0
   12024:	e595000c 	ldr	r0, [r5, #12]
   12028:	e3500000 	cmp	r0, #0
   1202c:	0a000017 	beq	12090 <McManager::setMachineIdx(int, int, bool)+0x100>
   12030:	e3a01008 	mov	r1, #8
   12034:	e3a02005 	mov	r2, #5
   12038:	e594300c 	ldr	r3, [r4, #12]
   1203c:	e58d1024 	str	r1, [sp, #36]	; 0x24
   12040:	e58d2020 	str	r2, [sp, #32]
   12044:	e594202c 	ldr	r2, [r4, #44]	; 0x2c
   12048:	e58d201c 	str	r2, [sp, #28]
   1204c:	e5942028 	ldr	r2, [r4, #40]	; 0x28
   12050:	e58d2018 	str	r2, [sp, #24]
   12054:	e5941024 	ldr	r1, [r4, #36]	; 0x24
   12058:	e3a02000 	mov	r2, #0
   1205c:	e58d1014 	str	r1, [sp, #20]
   12060:	e594c020 	ldr	ip, [r4, #32]
   12064:	e3e01000 	mvn	r1, #0
   12068:	e58dc010 	str	ip, [sp, #16]
   1206c:	e594c01c 	ldr	ip, [r4, #28]
   12070:	e58dc00c 	str	ip, [sp, #12]
   12074:	e594c018 	ldr	ip, [r4, #24]
   12078:	e58dc008 	str	ip, [sp, #8]
   1207c:	e594c014 	ldr	ip, [r4, #20]
   12080:	e58dc004 	str	ip, [sp, #4]
   12084:	e594c010 	ldr	ip, [r4, #16]
   12088:	e58dc000 	str	ip, [sp]
   1208c:	eb000e32 	bl	1595c <Display::targetLayout(int, int, int, int, int, int, int, int, WgfxFont*, int, int, int, int)>
   12090:	e5953004 	ldr	r3, [r5, #4]
   12094:	e3530000 	cmp	r3, #0
   12098:	0a000061 	beq	12224 <McManager::setMachineIdx(int, int, bool)+0x294>
   1209c:	e5946030 	ldr	r6, [r4, #48]	; 0x30
   120a0:	e3560000 	cmp	r6, #0
   120a4:	1a000058 	bne	1220c <McManager::setMachineIdx(int, int, bool)+0x27c>
   120a8:	e1a00006 	mov	r0, r6
   120ac:	eb001aea 	bl	18c5c <BusAccess::clockEnable(bool)>
   120b0:	e5950004 	ldr	r0, [r5, #4]
   120b4:	eb001c6e 	bl	19274 <RAMEmulator::setup(McBase*)>
   120b8:	e5d4003a 	ldrb	r0, [r4, #58]	; 0x3a
   120bc:	eb001c70 	bl	19284 <RAMEmulator::activateEmulation(bool)>
   120c0:	e5d4003a 	ldrb	r0, [r4, #58]	; 0x3a
   120c4:	ebfffca0 	bl	1134c <HwManager::pageOutForEmulation(bool)>
   120c8:	eb001f8d 	bl	19f04 <TargetDebug::get()>
   120cc:	e3500000 	cmp	r0, #0
   120d0:	0a000001 	beq	120dc <McManager::setMachineIdx(int, int, bool)+0x14c>
   120d4:	e5951004 	ldr	r1, [r5, #4]
   120d8:	eb001f8c 	bl	19f10 <TargetDebug::setup(McBase*)>
   120dc:	e5d4003b 	ldrb	r0, [r4, #59]	; 0x3b
   120e0:	e5d41038 	ldrb	r1, [r4, #56]	; 0x38
   120e4:	e59f315c 	ldr	r3, [pc, #348]	; 12248 <McManager::setMachineIdx(int, int, bool)+0x2b8>
   120e8:	e59f215c 	ldr	r2, [pc, #348]	; 1224c <McManager::setMachineIdx(int, int, bool)+0x2bc>
   120ec:	e5d4e039 	ldrb	lr, [r4, #57]	; 0x39
   120f0:	e5d4c03a 	ldrb	ip, [r4, #58]	; 0x3a
   120f4:	e3500000 	cmp	r0, #0
   120f8:	11a00003 	movne	r0, r3
   120fc:	01a00002 	moveq	r0, r2
   12100:	e3510000 	cmp	r1, #0
   12104:	11a01003 	movne	r1, r3
   12108:	01a01002 	moveq	r1, r2
   1210c:	e19ce00e 	orrs	lr, ip, lr
   12110:	11a0e003 	movne	lr, r3
   12114:	01a0e002 	moveq	lr, r2
   12118:	e594603c 	ldr	r6, [r4, #60]	; 0x3c
   1211c:	e35c0000 	cmp	ip, #0
   12120:	01a03002 	moveq	r3, r2
   12124:	e58de008 	str	lr, [sp, #8]
   12128:	e59f2120 	ldr	r2, [pc, #288]	; 12250 <McManager::setMachineIdx(int, int, bool)+0x2c0>
   1212c:	e1cd00f0 	strd	r0, [sp]
   12130:	e58d600c 	str	r6, [sp, #12]
   12134:	e3a01004 	mov	r1, #4
   12138:	e59f0114 	ldr	r0, [pc, #276]	; 12254 <McManager::setMachineIdx(int, int, bool)+0x2c4>
   1213c:	ebffdd9c 	bl	97b4 <LogWrite>
   12140:	e5d41039 	ldrb	r1, [r4, #57]	; 0x39
   12144:	e5d40038 	ldrb	r0, [r4, #56]	; 0x38
   12148:	e3510000 	cmp	r1, #0
   1214c:	05d4103a 	ldrbeq	r1, [r4, #58]	; 0x3a
   12150:	eb001b3c 	bl	18e48 <BusAccess::waitSetup(bool, bool)>
   12154:	e5950004 	ldr	r0, [r5, #4]
   12158:	e1a01007 	mov	r1, r7
   1215c:	e5903000 	ldr	r3, [r0]
   12160:	e5933000 	ldr	r3, [r3]
   12164:	e12fff33 	blx	r3
   12168:	e5950004 	ldr	r0, [r5, #4]
   1216c:	e1a01007 	mov	r1, r7
   12170:	e5903000 	ldr	r3, [r0]
   12174:	e593300c 	ldr	r3, [r3, #12]
   12178:	e12fff33 	blx	r3
   1217c:	e5903034 	ldr	r3, [r0, #52]	; 0x34
   12180:	e3530000 	cmp	r3, #0
   12184:	0a000015 	beq	121e0 <McManager::setMachineIdx(int, int, bool)+0x250>
   12188:	e5941034 	ldr	r1, [r4, #52]	; 0x34
   1218c:	e59f00c4 	ldr	r0, [pc, #196]	; 12258 <McManager::setMachineIdx(int, int, bool)+0x2c8>
   12190:	eb006ddd 	bl	2d90c <__udivsi3>
   12194:	e3a02000 	mov	r2, #0
   12198:	e3a0c001 	mov	ip, #1
   1219c:	e59f50b8 	ldr	r5, [pc, #184]	; 1225c <McManager::setMachineIdx(int, int, bool)+0x2cc>
   121a0:	e59f30b8 	ldr	r3, [pc, #184]	; 12260 <McManager::setMachineIdx(int, int, bool)+0x2d0>
   121a4:	e5850000 	str	r0, [r5]
   121a8:	e5832000 	str	r2, [r3]
   121ac:	e59f10b0 	ldr	r1, [pc, #176]	; 12264 <McManager::setMachineIdx(int, int, bool)+0x2d4>
   121b0:	e59f30b0 	ldr	r3, [pc, #176]	; 12268 <McManager::setMachineIdx(int, int, bool)+0x2d8>
   121b4:	e59f00b0 	ldr	r0, [pc, #176]	; 1226c <McManager::setMachineIdx(int, int, bool)+0x2dc>
   121b8:	e5c1c000 	strb	ip, [r1]
   121bc:	e5830000 	str	r0, [r3]
   121c0:	e59f10a8 	ldr	r1, [pc, #168]	; 12270 <McManager::setMachineIdx(int, int, bool)+0x2e0>
   121c4:	e3a00003 	mov	r0, #3
   121c8:	eb000cb7 	bl	154ac <CInterrupts::connectIRQ(unsigned int, void (*)(void*), void*)>
   121cc:	e59f20a0 	ldr	r2, [pc, #160]	; 12274 <McManager::setMachineIdx(int, int, bool)+0x2e4>
   121d0:	e5951000 	ldr	r1, [r5]
   121d4:	e5923004 	ldr	r3, [r2, #4]
   121d8:	e0833001 	add	r3, r3, r1
   121dc:	e5823018 	str	r3, [r2, #24]
   121e0:	e5943000 	ldr	r3, [r4]
   121e4:	e59f208c 	ldr	r2, [pc, #140]	; 12278 <McManager::setMachineIdx(int, int, bool)+0x2e8>
   121e8:	e3a01005 	mov	r1, #5
   121ec:	e59f0060 	ldr	r0, [pc, #96]	; 12254 <McManager::setMachineIdx(int, int, bool)+0x2c4>
   121f0:	ebffdd6f 	bl	97b4 <LogWrite>
   121f4:	e3a00001 	mov	r0, #1
   121f8:	e28dd02c 	add	sp, sp, #44	; 0x2c
   121fc:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   12200:	e3a00000 	mov	r0, #0
   12204:	e28dd02c 	add	sp, sp, #44	; 0x2c
   12208:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   1220c:	eb001a79 	bl	18bf8 <BusAccess::clockSetup()>
   12210:	e1a00006 	mov	r0, r6
   12214:	eb001a85 	bl	18c30 <BusAccess::clockSetFreqHz(unsigned long)>
   12218:	e3a00001 	mov	r0, #1
   1221c:	eb001a8e 	bl	18c5c <BusAccess::clockEnable(bool)>
   12220:	eaffffa2 	b	120b0 <McManager::setMachineIdx(int, int, bool)+0x120>
   12224:	e59f0028 	ldr	r0, [pc, #40]	; 12254 <McManager::setMachineIdx(int, int, bool)+0x2c4>
   12228:	e1a03006 	mov	r3, r6
   1222c:	e59f2048 	ldr	r2, [pc, #72]	; 1227c <McManager::setMachineIdx(int, int, bool)+0x2ec>
   12230:	e3a01004 	mov	r1, #4
   12234:	ebffdd5e 	bl	97b4 <LogWrite>
   12238:	e3a00001 	mov	r0, #1
   1223c:	eafffff0 	b	12204 <McManager::setMachineIdx(int, int, bool)+0x274>
   12240:	00045500 	.word	0x00045500
   12244:	00042088 	.word	0x00042088
   12248:	0002ee4c 	.word	0x0002ee4c
   1224c:	0002ee30 	.word	0x0002ee30
   12250:	0002f090 	.word	0x0002f090
   12254:	0002eed0 	.word	0x0002eed0
   12258:	000f4240 	.word	0x000f4240
   1225c:	00042244 	.word	0x00042244
   12260:	00052c70 	.word	0x00052c70
   12264:	00052c74 	.word	0x00052c74
   12268:	00052c78 	.word	0x00052c78
   1226c:	00011824 	.word	0x00011824
   12270:	00012b84 	.word	0x00012b84
   12274:	20003000 	.word	0x20003000
   12278:	0002f0d4 	.word	0x0002f0d4
   1227c:	0002f0e8 	.word	0x0002f0e8

00012280 <McManager::setMachineByName(char const*)>:
   12280:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   12284:	e59f90ac 	ldr	r9, [pc, #172]	; 12338 <McManager::setMachineByName(char const*)+0xb8>
   12288:	e5993010 	ldr	r3, [r9, #16]
   1228c:	e3530000 	cmp	r3, #0
   12290:	da000022 	ble	12320 <McManager::setMachineByName(char const*)+0xa0>
   12294:	e1a06000 	mov	r6, r0
   12298:	e3a08000 	mov	r8, #0
   1229c:	e2895e47 	add	r5, r9, #1136	; 0x470
   122a0:	e59f7094 	ldr	r7, [pc, #148]	; 1233c <McManager::setMachineByName(char const*)+0xbc>
   122a4:	e2855008 	add	r5, r5, #8
   122a8:	e3a04000 	mov	r4, #0
   122ac:	ea00000d 	b	122e8 <McManager::setMachineByName(char const*)+0x68>
   122b0:	e1500004 	cmp	r0, r4
   122b4:	da000014 	ble	1230c <McManager::setMachineByName(char const*)+0x8c>
   122b8:	e5950000 	ldr	r0, [r5]
   122bc:	e1a01004 	mov	r1, r4
   122c0:	e5903000 	ldr	r3, [r0]
   122c4:	e593300c 	ldr	r3, [r3, #12]
   122c8:	e12fff33 	blx	r3
   122cc:	e3a02064 	mov	r2, #100	; 0x64
   122d0:	e5901000 	ldr	r1, [r0]
   122d4:	e1a00006 	mov	r0, r6
   122d8:	eb0068b1 	bl	2c5a4 <strncasecmp>
   122dc:	e2502000 	subs	r2, r0, #0
   122e0:	0a000010 	beq	12328 <McManager::setMachineByName(char const*)+0xa8>
   122e4:	e2844001 	add	r4, r4, #1
   122e8:	e5950000 	ldr	r0, [r5]
   122ec:	e5903000 	ldr	r3, [r0]
   122f0:	e5933008 	ldr	r3, [r3, #8]
   122f4:	e1530007 	cmp	r3, r7
   122f8:	03a00001 	moveq	r0, #1
   122fc:	0affffeb 	beq	122b0 <McManager::setMachineByName(char const*)+0x30>
   12300:	e12fff33 	blx	r3
   12304:	e1500004 	cmp	r0, r4
   12308:	caffffea 	bgt	122b8 <McManager::setMachineByName(char const*)+0x38>
   1230c:	e5993010 	ldr	r3, [r9, #16]
   12310:	e2888001 	add	r8, r8, #1
   12314:	e1530008 	cmp	r3, r8
   12318:	e2855004 	add	r5, r5, #4
   1231c:	caffffe1 	bgt	122a8 <McManager::setMachineByName(char const*)+0x28>
   12320:	e3a00000 	mov	r0, #0
   12324:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   12328:	e1a01004 	mov	r1, r4
   1232c:	e1a00008 	mov	r0, r8
   12330:	e8bd47f0 	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   12334:	eaffff15 	b	11f90 <McManager::setMachineIdx(int, int, bool)>
   12338:	00045500 	.word	0x00045500
   1233c:	00011678 	.word	0x00011678

00012340 <McManager::setMachineOpts(char const*)>:
   12340:	e59f3014 	ldr	r3, [pc, #20]	; 1235c <McManager::setMachineOpts(char const*)+0x1c>
   12344:	e5933004 	ldr	r3, [r3, #4]
   12348:	e3530000 	cmp	r3, #0
   1234c:	0a000000 	beq	12354 <McManager::setMachineOpts(char const*)+0x14>
   12350:	eafffcf5 	b	1172c <McManager::setMachineOpts(char const*) [clone .part.3]>
   12354:	e1a00003 	mov	r0, r3
   12358:	e12fff1e 	bx	lr
   1235c:	00045500 	.word	0x00045500

00012360 <McManager::handleRxCharFromTarget(unsigned char const*, int)>:
   12360:	e92d4070 	push	{r4, r5, r6, lr}
   12364:	e59f4050 	ldr	r4, [pc, #80]	; 123bc <McManager::handleRxCharFromTarget(unsigned char const*, int)+0x5c>
   12368:	e59f2050 	ldr	r2, [pc, #80]	; 123c0 <McManager::handleRxCharFromTarget(unsigned char const*, int)+0x60>
   1236c:	e59434a0 	ldr	r3, [r4, #1184]	; 0x4a0
   12370:	e0835001 	add	r5, r3, r1
   12374:	e1550002 	cmp	r5, r2
   12378:	ca000009 	bgt	123a4 <McManager::handleRxCharFromTarget(unsigned char const*, int)+0x44>
   1237c:	e59fc040 	ldr	ip, [pc, #64]	; 123c4 <McManager::handleRxCharFromTarget(unsigned char const*, int)+0x64>
   12380:	e1a02001 	mov	r2, r1
   12384:	e1a01000 	mov	r1, r0
   12388:	e08c0003 	add	r0, ip, r3
   1238c:	eb006698 	bl	2bdf4 <memcpy>
   12390:	e3a02000 	mov	r2, #0
   12394:	e0843005 	add	r3, r4, r5
   12398:	e58454a0 	str	r5, [r4, #1184]	; 0x4a0
   1239c:	e5c324a4 	strb	r2, [r3, #1188]	; 0x4a4
   123a0:	e8bd8070 	pop	{r4, r5, r6, pc}
   123a4:	e3a03000 	mov	r3, #0
   123a8:	e1510002 	cmp	r1, r2
   123ac:	e58434a0 	str	r3, [r4, #1184]	; 0x4a0
   123b0:	c8bd8070 	popgt	{r4, r5, r6, pc}
   123b4:	e1a05001 	mov	r5, r1
   123b8:	eaffffef 	b	1237c <McManager::handleRxCharFromTarget(unsigned char const*, int)+0x1c>
   123bc:	00045500 	.word	0x00045500
   123c0:	000007cf 	.word	0x000007cf
   123c4:	000459a4 	.word	0x000459a4

000123c8 <McManager::getNumCharsReceivedFromHost()>:
   123c8:	e59f3004 	ldr	r3, [pc, #4]	; 123d4 <McManager::getNumCharsReceivedFromHost()+0xc>
   123cc:	e59304a0 	ldr	r0, [r3, #1184]	; 0x4a0
   123d0:	e12fff1e 	bx	lr
   123d4:	00045500 	.word	0x00045500

000123d8 <McManager::getCharsReceivedFromHost(unsigned char*, int)>:
   123d8:	e2503000 	subs	r3, r0, #0
   123dc:	0a00000d 	beq	12418 <McManager::getCharsReceivedFromHost(unsigned char*, int)+0x40>
   123e0:	e92d4010 	push	{r4, lr}
   123e4:	e59f4034 	ldr	r4, [pc, #52]	; 12420 <McManager::getCharsReceivedFromHost(unsigned char*, int)+0x48>
   123e8:	e59424a0 	ldr	r2, [r4, #1184]	; 0x4a0
   123ec:	e1520001 	cmp	r2, r1
   123f0:	da000001 	ble	123fc <McManager::getCharsReceivedFromHost(unsigned char*, int)+0x24>
   123f4:	e3a00000 	mov	r0, #0
   123f8:	e8bd8010 	pop	{r4, pc}
   123fc:	e2841e4a 	add	r1, r4, #1184	; 0x4a0
   12400:	e2811004 	add	r1, r1, #4
   12404:	eb00667a 	bl	2bdf4 <memcpy>
   12408:	e3a03000 	mov	r3, #0
   1240c:	e59404a0 	ldr	r0, [r4, #1184]	; 0x4a0
   12410:	e58434a0 	str	r3, [r4, #1184]	; 0x4a0
   12414:	e8bd8010 	pop	{r4, pc}
   12418:	e1a00003 	mov	r0, r3
   1241c:	e12fff1e 	bx	lr
   12420:	00045500 	.word	0x00045500

00012424 <McManager::sendKeyCodeToTarget(int)>:
   12424:	e59f3014 	ldr	r3, [pc, #20]	; 12440 <McManager::sendKeyCodeToTarget(int)+0x1c>
   12428:	e5933000 	ldr	r3, [r3]
   1242c:	e3530000 	cmp	r3, #0
   12430:	012fff1e 	bxeq	lr
   12434:	e1a01000 	mov	r1, r0
   12438:	e1a00003 	mov	r0, r3
   1243c:	eaffef2d 	b	e0f8 <CommandHandler::sendKeyCodeToTarget(int)>
   12440:	00045500 	.word	0x00045500

00012444 <McManager::debuggerCommand(char*, char*, int)>:
   12444:	e59f3038 	ldr	r3, [pc, #56]	; 12484 <McManager::debuggerCommand(char*, char*, int)+0x40>
   12448:	e593c004 	ldr	ip, [r3, #4]
   1244c:	e35c0000 	cmp	ip, #0
   12450:	0a000009 	beq	1247c <McManager::debuggerCommand(char*, char*, int)+0x38>
   12454:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   12458:	e59ce000 	ldr	lr, [ip]
   1245c:	e1a03002 	mov	r3, r2
   12460:	e59ee020 	ldr	lr, [lr, #32]
   12464:	e1a02001 	mov	r2, r1
   12468:	e1a01000 	mov	r1, r0
   1246c:	e1a0000c 	mov	r0, ip
   12470:	e1a0c00e 	mov	ip, lr
   12474:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
   12478:	e12fff1c 	bx	ip
   1247c:	e1a0000c 	mov	r0, ip
   12480:	e12fff1e 	bx	lr
   12484:	00045500 	.word	0x00045500

00012488 <McManager::blockWrite(unsigned long, unsigned char const*, unsigned long, bool, bool)>:
   12488:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   1248c:	e24dd008 	sub	sp, sp, #8
   12490:	e1a05000 	mov	r5, r0
   12494:	e1a06001 	mov	r6, r1
   12498:	e1a07002 	mov	r7, r2
   1249c:	e1a08003 	mov	r8, r3
   124a0:	e5dd4020 	ldrb	r4, [sp, #32]
   124a4:	eb001ad4 	bl	18ffc <BusAccess::pauseIsPaused()>
   124a8:	e3500000 	cmp	r0, #0
   124ac:	1a000003 	bne	124c0 <McManager::blockWrite(unsigned long, unsigned char const*, unsigned long, bool, bool)+0x38>
   124b0:	e59f3050 	ldr	r3, [pc, #80]	; 12508 <McManager::blockWrite(unsigned long, unsigned char const*, unsigned long, bool, bool)+0x80>
   124b4:	e5d33000 	ldrb	r3, [r3]
   124b8:	e3530000 	cmp	r3, #0
   124bc:	0a000001 	beq	124c8 <McManager::blockWrite(unsigned long, unsigned char const*, unsigned long, bool, bool)+0x40>
   124c0:	e3540000 	cmp	r4, #0
   124c4:	0a000009 	beq	124f0 <McManager::blockWrite(unsigned long, unsigned char const*, unsigned long, bool, bool)+0x68>
   124c8:	e58d4000 	str	r4, [sp]
   124cc:	e1a03008 	mov	r3, r8
   124d0:	e1a02007 	mov	r2, r7
   124d4:	e1a01006 	mov	r1, r6
   124d8:	e1a00005 	mov	r0, r5
   124dc:	eb001705 	bl	180f8 <BusAccess::blockWrite(unsigned long, unsigned char const*, unsigned long, int, int)>
   124e0:	e16f0f10 	clz	r0, r0
   124e4:	e1a002a0 	lsr	r0, r0, #5
   124e8:	e28dd008 	add	sp, sp, #8
   124ec:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   124f0:	e1a02007 	mov	r2, r7
   124f4:	e1a01006 	mov	r1, r6
   124f8:	e1a00005 	mov	r0, r5
   124fc:	e28dd008 	add	sp, sp, #8
   12500:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   12504:	ea001b7b 	b	192f8 <RAMEmulator::blockWrite(unsigned long, unsigned char const*, unsigned long)>
   12508:	0005ace0 	.word	0x0005ace0

0001250c <McManager::blockRead(unsigned long, unsigned char*, unsigned long, bool, bool)>:
   1250c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   12510:	e24dd008 	sub	sp, sp, #8
   12514:	e1a05000 	mov	r5, r0
   12518:	e1a06001 	mov	r6, r1
   1251c:	e1a07002 	mov	r7, r2
   12520:	e1a08003 	mov	r8, r3
   12524:	e5dd4020 	ldrb	r4, [sp, #32]
   12528:	eb001ab3 	bl	18ffc <BusAccess::pauseIsPaused()>
   1252c:	e3500000 	cmp	r0, #0
   12530:	1a000003 	bne	12544 <McManager::blockRead(unsigned long, unsigned char*, unsigned long, bool, bool)+0x38>
   12534:	e59f3050 	ldr	r3, [pc, #80]	; 1258c <McManager::blockRead(unsigned long, unsigned char*, unsigned long, bool, bool)+0x80>
   12538:	e5d33000 	ldrb	r3, [r3]
   1253c:	e3530000 	cmp	r3, #0
   12540:	0a000001 	beq	1254c <McManager::blockRead(unsigned long, unsigned char*, unsigned long, bool, bool)+0x40>
   12544:	e3540000 	cmp	r4, #0
   12548:	0a000009 	beq	12574 <McManager::blockRead(unsigned long, unsigned char*, unsigned long, bool, bool)+0x68>
   1254c:	e58d4000 	str	r4, [sp]
   12550:	e1a03008 	mov	r3, r8
   12554:	e1a02007 	mov	r2, r7
   12558:	e1a01006 	mov	r1, r6
   1255c:	e1a00005 	mov	r0, r5
   12560:	eb0017aa 	bl	18410 <BusAccess::blockRead(unsigned long, unsigned char*, unsigned long, int, int)>
   12564:	e16f0f10 	clz	r0, r0
   12568:	e1a002a0 	lsr	r0, r0, #5
   1256c:	e28dd008 	add	sp, sp, #8
   12570:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   12574:	e1a02007 	mov	r2, r7
   12578:	e1a01006 	mov	r1, r6
   1257c:	e1a00005 	mov	r0, r5
   12580:	e28dd008 	add	sp, sp, #8
   12584:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   12588:	ea001b76 	b	19368 <RAMEmulator::blockRead(unsigned long, unsigned char*, unsigned long)>
   1258c:	0005ace0 	.word	0x0005ace0

00012590 <McManager::targetReset()>:
   12590:	e92d4010 	push	{r4, lr}
   12594:	ebfffb5b 	bl	11308 <HwManager::reset()>
   12598:	e59f303c 	ldr	r3, [pc, #60]	; 125dc <McManager::targetReset()+0x4c>
   1259c:	e5930004 	ldr	r0, [r3, #4]
   125a0:	e3500000 	cmp	r0, #0
   125a4:	0a000004 	beq	125bc <McManager::targetReset()+0x2c>
   125a8:	e5903000 	ldr	r3, [r0]
   125ac:	e59f202c 	ldr	r2, [pc, #44]	; 125e0 <McManager::targetReset()+0x50>
   125b0:	e5933014 	ldr	r3, [r3, #20]
   125b4:	e1530002 	cmp	r3, r2
   125b8:	1a000002 	bne	125c8 <McManager::targetReset()+0x38>
   125bc:	e8bd4010 	pop	{r4, lr}
   125c0:	e3a00000 	mov	r0, #0
   125c4:	ea00150a 	b	179f4 <BusAccess::targetReset(bool)>
   125c8:	e3a01000 	mov	r1, #0
   125cc:	e12fff33 	blx	r3
   125d0:	e3500000 	cmp	r0, #0
   125d4:	18bd8010 	popne	{r4, pc}
   125d8:	eafffff7 	b	125bc <McManager::targetReset()+0x2c>
   125dc:	00045500 	.word	0x00045500
   125e0:	00011680 	.word	0x00011680

000125e4 <McManager::targetClearAllIO()>:
   125e4:	ea0018e7 	b	18988 <BusAccess::clearAllIO()>

000125e8 <McManager::targetPause()>:
   125e8:	ea001a7d 	b	18fe4 <BusAccess::pause()>

000125ec <McManager::targetRelease()>:
   125ec:	ea001a9e 	b	1906c <BusAccess::pauseRelease()>

000125f0 <McManager::targetStep()>:
   125f0:	ea001a85 	b	1900c <BusAccess::pauseStep()>

000125f4 <McManager::targetIsPaused()>:
   125f4:	ea001a80 	b	18ffc <BusAccess::pauseIsPaused()>

000125f8 <McManager::targetBusUnderPiControl()>:
   125f8:	ea001544 	b	17b10 <BusAccess::isUnderControl()>

000125fc <McManager::handleTargetProgram(bool, bool, bool)>:
   125fc:	e92d4070 	push	{r4, r5, r6, lr}
   12600:	e1a04000 	mov	r4, r0
   12604:	e1a05001 	mov	r5, r1
   12608:	e1a06002 	mov	r6, r2
   1260c:	eb0025b5 	bl	1bce8 <TargetState::numMemoryBlocks()>
   12610:	e3500000 	cmp	r0, #0
   12614:	0a00000a 	beq	12644 <McManager::handleTargetProgram(bool, bool, bool)+0x48>
   12618:	e3a00000 	mov	r0, #0
   1261c:	eb001585 	bl	17c38 <BusAccess::controlRelease(bool)>
   12620:	eb001a91 	bl	1906c <BusAccess::pauseRelease()>
   12624:	eb0015d8 	bl	17d8c <BusAccess::controlRequestAndTake()>
   12628:	e3500000 	cmp	r0, #0
   1262c:	1a000009 	bne	12658 <McManager::handleTargetProgram(bool, bool, bool)+0x5c>
   12630:	e1a02006 	mov	r2, r6
   12634:	e1a01005 	mov	r1, r5
   12638:	e1a00004 	mov	r0, r4
   1263c:	e8bd4070 	pop	{r4, r5, r6, lr}
   12640:	eafffc81 	b	1184c <McManager::handleTargetProgram(bool, bool, bool) [clone .part.4]>
   12644:	e59f2020 	ldr	r2, [pc, #32]	; 1266c <McManager::handleTargetProgram(bool, bool, bool)+0x70>
   12648:	e3a01004 	mov	r1, #4
   1264c:	e8bd4070 	pop	{r4, r5, r6, lr}
   12650:	e59f0018 	ldr	r0, [pc, #24]	; 12670 <McManager::handleTargetProgram(bool, bool, bool)+0x74>
   12654:	eaffdc56 	b	97b4 <LogWrite>
   12658:	e59f2014 	ldr	r2, [pc, #20]	; 12674 <McManager::handleTargetProgram(bool, bool, bool)+0x78>
   1265c:	e3a01004 	mov	r1, #4
   12660:	e8bd4070 	pop	{r4, r5, r6, lr}
   12664:	e59f0004 	ldr	r0, [pc, #4]	; 12670 <McManager::handleTargetProgram(bool, bool, bool)+0x74>
   12668:	eaffdc51 	b	97b4 <LogWrite>
   1266c:	0002f108 	.word	0x0002f108
   12670:	0002eed0 	.word	0x0002eed0
   12674:	0002f12c 	.word	0x0002f12c

00012678 <McManager::handleTargetFile(char const*, unsigned char const*, int)>:
   12678:	e59f3030 	ldr	r3, [pc, #48]	; 126b0 <McManager::handleTargetFile(char const*, unsigned char const*, int)+0x38>
   1267c:	e593c004 	ldr	ip, [r3, #4]
   12680:	e35c0000 	cmp	ip, #0
   12684:	012fff1e 	bxeq	lr
   12688:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   1268c:	e59ce000 	ldr	lr, [ip]
   12690:	e1a03002 	mov	r3, r2
   12694:	e59ee01c 	ldr	lr, [lr, #28]
   12698:	e1a02001 	mov	r2, r1
   1269c:	e1a01000 	mov	r1, r0
   126a0:	e1a0000c 	mov	r0, ip
   126a4:	e1a0c00e 	mov	ip, lr
   126a8:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
   126ac:	e12fff1c 	bx	ip
   126b0:	00045500 	.word	0x00045500

000126b4 <McManager::handleCommand(char const*, unsigned char const*, int, char*, int)>:
   126b4:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   126b8:	e24dd0ec 	sub	sp, sp, #236	; 0xec
   126bc:	e1a04000 	mov	r4, r0
   126c0:	e1a07001 	mov	r7, r1
   126c4:	e1a06002 	mov	r6, r2
   126c8:	e1a01000 	mov	r1, r0
   126cc:	e1a05003 	mov	r5, r3
   126d0:	e28d201c 	add	r2, sp, #28
   126d4:	e3a030c8 	mov	r3, #200	; 0xc8
   126d8:	e59f0414 	ldr	r0, [pc, #1044]	; 12af4 <McManager::handleCommand(char const*, unsigned char const*, int, char*, int)+0x440>
   126dc:	ebffe30d 	bl	b318 <jsonGetValueForKey>
   126e0:	e3500000 	cmp	r0, #0
   126e4:	0a000046 	beq	12804 <McManager::handleCommand(char const*, unsigned char const*, int, char*, int)+0x150>
   126e8:	e3a03000 	mov	r3, #0
   126ec:	e59f1404 	ldr	r1, [pc, #1028]	; 12af8 <McManager::handleCommand(char const*, unsigned char const*, int, char*, int)+0x444>
   126f0:	e5c53000 	strb	r3, [r5]
   126f4:	e28d001c 	add	r0, sp, #28
   126f8:	eb006646 	bl	2c018 <strcasecmp>
   126fc:	e3500000 	cmp	r0, #0
   12700:	0a000041 	beq	1280c <McManager::handleCommand(char const*, unsigned char const*, int, char*, int)+0x158>
   12704:	e59f13f0 	ldr	r1, [pc, #1008]	; 12afc <McManager::handleCommand(char const*, unsigned char const*, int, char*, int)+0x448>
   12708:	e28d001c 	add	r0, sp, #28
   1270c:	eb006641 	bl	2c018 <strcasecmp>
   12710:	e3500000 	cmp	r0, #0
   12714:	0a000054 	beq	1286c <McManager::handleCommand(char const*, unsigned char const*, int, char*, int)+0x1b8>
   12718:	e59f13e0 	ldr	r1, [pc, #992]	; 12b00 <McManager::handleCommand(char const*, unsigned char const*, int, char*, int)+0x44c>
   1271c:	e28d001c 	add	r0, sp, #28
   12720:	eb00663c 	bl	2c018 <strcasecmp>
   12724:	e2505000 	subs	r5, r0, #0
   12728:	0a00003e 	beq	12828 <McManager::handleCommand(char const*, unsigned char const*, int, char*, int)+0x174>
   1272c:	e59f13d0 	ldr	r1, [pc, #976]	; 12b04 <McManager::handleCommand(char const*, unsigned char const*, int, char*, int)+0x450>
   12730:	e28d001c 	add	r0, sp, #28
   12734:	eb006637 	bl	2c018 <strcasecmp>
   12738:	e2505000 	subs	r5, r0, #0
   1273c:	0a00004f 	beq	12880 <McManager::handleCommand(char const*, unsigned char const*, int, char*, int)+0x1cc>
   12740:	e59f13c0 	ldr	r1, [pc, #960]	; 12b08 <McManager::handleCommand(char const*, unsigned char const*, int, char*, int)+0x454>
   12744:	e28d001c 	add	r0, sp, #28
   12748:	eb006632 	bl	2c018 <strcasecmp>
   1274c:	e2505000 	subs	r5, r0, #0
   12750:	0a000057 	beq	128b4 <McManager::handleCommand(char const*, unsigned char const*, int, char*, int)+0x200>
   12754:	e59f13b0 	ldr	r1, [pc, #944]	; 12b0c <McManager::handleCommand(char const*, unsigned char const*, int, char*, int)+0x458>
   12758:	e28d001c 	add	r0, sp, #28
   1275c:	eb00662d 	bl	2c018 <strcasecmp>
   12760:	e3500000 	cmp	r0, #0
   12764:	0a000043 	beq	12878 <McManager::handleCommand(char const*, unsigned char const*, int, char*, int)+0x1c4>
   12768:	e59f13a0 	ldr	r1, [pc, #928]	; 12b10 <McManager::handleCommand(char const*, unsigned char const*, int, char*, int)+0x45c>
   1276c:	e28d001c 	add	r0, sp, #28
   12770:	eb006628 	bl	2c018 <strcasecmp>
   12774:	e3500000 	cmp	r0, #0
   12778:	0a00006a 	beq	12928 <McManager::handleCommand(char const*, unsigned char const*, int, char*, int)+0x274>
   1277c:	e59f1390 	ldr	r1, [pc, #912]	; 12b14 <McManager::handleCommand(char const*, unsigned char const*, int, char*, int)+0x460>
   12780:	e28d001c 	add	r0, sp, #28
   12784:	eb006623 	bl	2c018 <strcasecmp>
   12788:	e3500000 	cmp	r0, #0
   1278c:	0a000067 	beq	12930 <McManager::handleCommand(char const*, unsigned char const*, int, char*, int)+0x27c>
   12790:	e59f1380 	ldr	r1, [pc, #896]	; 12b18 <McManager::handleCommand(char const*, unsigned char const*, int, char*, int)+0x464>
   12794:	e28d001c 	add	r0, sp, #28
   12798:	eb00661e 	bl	2c018 <strcasecmp>
   1279c:	e3500000 	cmp	r0, #0
   127a0:	0a000055 	beq	128fc <McManager::handleCommand(char const*, unsigned char const*, int, char*, int)+0x248>
   127a4:	e59f1370 	ldr	r1, [pc, #880]	; 12b1c <McManager::handleCommand(char const*, unsigned char const*, int, char*, int)+0x468>
   127a8:	e28d001c 	add	r0, sp, #28
   127ac:	eb006619 	bl	2c018 <strcasecmp>
   127b0:	e3500000 	cmp	r0, #0
   127b4:	0a000050 	beq	128fc <McManager::handleCommand(char const*, unsigned char const*, int, char*, int)+0x248>
   127b8:	e3a0200a 	mov	r2, #10
   127bc:	e59f135c 	ldr	r1, [pc, #860]	; 12b20 <McManager::handleCommand(char const*, unsigned char const*, int, char*, int)+0x46c>
   127c0:	e28d001c 	add	r0, sp, #28
   127c4:	eb006776 	bl	2c5a4 <strncasecmp>
   127c8:	e3500000 	cmp	r0, #0
   127cc:	1a000062 	bne	1295c <McManager::handleCommand(char const*, unsigned char const*, int, char*, int)+0x2a8>
   127d0:	e28d001c 	add	r0, sp, #28
   127d4:	e3a0103d 	mov	r1, #61	; 0x3d
   127d8:	eb00662a 	bl	2c088 <strchr>
   127dc:	e3500000 	cmp	r0, #0
   127e0:	0a000007 	beq	12804 <McManager::handleCommand(char const*, unsigned char const*, int, char*, int)+0x150>
   127e4:	e2804001 	add	r4, r0, #1
   127e8:	e1a00004 	mov	r0, r4
   127ec:	ebfffea3 	bl	12280 <McManager::setMachineByName(char const*)>
   127f0:	e1a03004 	mov	r3, r4
   127f4:	e59f2328 	ldr	r2, [pc, #808]	; 12b24 <McManager::handleCommand(char const*, unsigned char const*, int, char*, int)+0x470>
   127f8:	e3a01005 	mov	r1, #5
   127fc:	e59f0324 	ldr	r0, [pc, #804]	; 12b28 <McManager::handleCommand(char const*, unsigned char const*, int, char*, int)+0x474>
   12800:	ebffdbeb 	bl	97b4 <LogWrite>
   12804:	e28dd0ec 	add	sp, sp, #236	; 0xec
   12808:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   1280c:	ebfffd4c 	bl	11d44 <McManager::getMachineJSON()>
   12810:	e59d2100 	ldr	r2, [sp, #256]	; 0x100
   12814:	e1a01000 	mov	r1, r0
   12818:	e1a00005 	mov	r0, r5
   1281c:	eb006703 	bl	2c430 <strlcat>
   12820:	e28dd0ec 	add	sp, sp, #236	; 0xec
   12824:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   12828:	eb00252e 	bl	1bce8 <TargetState::numMemoryBlocks()>
   1282c:	e3500000 	cmp	r0, #0
   12830:	0a000008 	beq	12858 <McManager::handleCommand(char const*, unsigned char const*, int, char*, int)+0x1a4>
   12834:	e1a00005 	mov	r0, r5
   12838:	eb0014fe 	bl	17c38 <BusAccess::controlRelease(bool)>
   1283c:	eb001a0a 	bl	1906c <BusAccess::pauseRelease()>
   12840:	eb001551 	bl	17d8c <BusAccess::controlRequestAndTake()>
   12844:	e2502000 	subs	r2, r0, #0
   12848:	1a000026 	bne	128e8 <McManager::handleCommand(char const*, unsigned char const*, int, char*, int)+0x234>
   1284c:	e1a01002 	mov	r1, r2
   12850:	ebfffbfd 	bl	1184c <McManager::handleTargetProgram(bool, bool, bool) [clone .part.4]>
   12854:	eaffffea 	b	12804 <McManager::handleCommand(char const*, unsigned char const*, int, char*, int)+0x150>
   12858:	e59f22cc 	ldr	r2, [pc, #716]	; 12b2c <McManager::handleCommand(char const*, unsigned char const*, int, char*, int)+0x478>
   1285c:	e3a01004 	mov	r1, #4
   12860:	e59f02c0 	ldr	r0, [pc, #704]	; 12b28 <McManager::handleCommand(char const*, unsigned char const*, int, char*, int)+0x474>
   12864:	ebffdbd2 	bl	97b4 <LogWrite>
   12868:	eaffffe5 	b	12804 <McManager::handleCommand(char const*, unsigned char const*, int, char*, int)+0x150>
   1286c:	eb0024d0 	bl	1bbb4 <TargetState::clear()>
   12870:	e28dd0ec 	add	sp, sp, #236	; 0xec
   12874:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   12878:	eb0019d9 	bl	18fe4 <BusAccess::pause()>
   1287c:	eaffffe0 	b	12804 <McManager::handleCommand(char const*, unsigned char const*, int, char*, int)+0x150>
   12880:	eb002518 	bl	1bce8 <TargetState::numMemoryBlocks()>
   12884:	e3500000 	cmp	r0, #0
   12888:	0afffff2 	beq	12858 <McManager::handleCommand(char const*, unsigned char const*, int, char*, int)+0x1a4>
   1288c:	e1a00005 	mov	r0, r5
   12890:	eb0014e8 	bl	17c38 <BusAccess::controlRelease(bool)>
   12894:	eb0019f4 	bl	1906c <BusAccess::pauseRelease()>
   12898:	eb00153b 	bl	17d8c <BusAccess::controlRequestAndTake()>
   1289c:	e2502000 	subs	r2, r0, #0
   128a0:	1a000010 	bne	128e8 <McManager::handleCommand(char const*, unsigned char const*, int, char*, int)+0x234>
   128a4:	e1a01002 	mov	r1, r2
   128a8:	e3a00001 	mov	r0, #1
   128ac:	ebfffbe6 	bl	1184c <McManager::handleTargetProgram(bool, bool, bool) [clone .part.4]>
   128b0:	eaffffd3 	b	12804 <McManager::handleCommand(char const*, unsigned char const*, int, char*, int)+0x150>
   128b4:	ebfffa93 	bl	11308 <HwManager::reset()>
   128b8:	e59f3270 	ldr	r3, [pc, #624]	; 12b30 <McManager::handleCommand(char const*, unsigned char const*, int, char*, int)+0x47c>
   128bc:	e5930004 	ldr	r0, [r3, #4]
   128c0:	e3500000 	cmp	r0, #0
   128c4:	0a000004 	beq	128dc <McManager::handleCommand(char const*, unsigned char const*, int, char*, int)+0x228>
   128c8:	e5903000 	ldr	r3, [r0]
   128cc:	e59f2260 	ldr	r2, [pc, #608]	; 12b34 <McManager::handleCommand(char const*, unsigned char const*, int, char*, int)+0x480>
   128d0:	e5933014 	ldr	r3, [r3, #20]
   128d4:	e1530002 	cmp	r3, r2
   128d8:	1a00001a 	bne	12948 <McManager::handleCommand(char const*, unsigned char const*, int, char*, int)+0x294>
   128dc:	e3a00000 	mov	r0, #0
   128e0:	eb001443 	bl	179f4 <BusAccess::targetReset(bool)>
   128e4:	eaffffc6 	b	12804 <McManager::handleCommand(char const*, unsigned char const*, int, char*, int)+0x150>
   128e8:	e59f2248 	ldr	r2, [pc, #584]	; 12b38 <McManager::handleCommand(char const*, unsigned char const*, int, char*, int)+0x484>
   128ec:	e3a01004 	mov	r1, #4
   128f0:	e59f0230 	ldr	r0, [pc, #560]	; 12b28 <McManager::handleCommand(char const*, unsigned char const*, int, char*, int)+0x474>
   128f4:	ebffdbae 	bl	97b4 <LogWrite>
   128f8:	eaffffc1 	b	12804 <McManager::handleCommand(char const*, unsigned char const*, int, char*, int)+0x150>
   128fc:	e59f322c 	ldr	r3, [pc, #556]	; 12b30 <McManager::handleCommand(char const*, unsigned char const*, int, char*, int)+0x47c>
   12900:	e5930004 	ldr	r0, [r3, #4]
   12904:	e3500000 	cmp	r0, #0
   12908:	0affffbd 	beq	12804 <McManager::handleCommand(char const*, unsigned char const*, int, char*, int)+0x150>
   1290c:	e590c000 	ldr	ip, [r0]
   12910:	e1a01004 	mov	r1, r4
   12914:	e1a03006 	mov	r3, r6
   12918:	e1a02007 	mov	r2, r7
   1291c:	e59c401c 	ldr	r4, [ip, #28]
   12920:	e12fff34 	blx	r4
   12924:	eaffffb6 	b	12804 <McManager::handleCommand(char const*, unsigned char const*, int, char*, int)+0x150>
   12928:	eb0019cf 	bl	1906c <BusAccess::pauseRelease()>
   1292c:	eaffffb4 	b	12804 <McManager::handleCommand(char const*, unsigned char const*, int, char*, int)+0x150>
   12930:	e59f2204 	ldr	r2, [pc, #516]	; 12b3c <McManager::handleCommand(char const*, unsigned char const*, int, char*, int)+0x488>
   12934:	e3a01005 	mov	r1, #5
   12938:	e59f01e8 	ldr	r0, [pc, #488]	; 12b28 <McManager::handleCommand(char const*, unsigned char const*, int, char*, int)+0x474>
   1293c:	ebffdb9c 	bl	97b4 <LogWrite>
   12940:	eb001810 	bl	18988 <BusAccess::clearAllIO()>
   12944:	eaffffae 	b	12804 <McManager::handleCommand(char const*, unsigned char const*, int, char*, int)+0x150>
   12948:	e1a01005 	mov	r1, r5
   1294c:	e12fff33 	blx	r3
   12950:	e3500000 	cmp	r0, #0
   12954:	1affffaa 	bne	12804 <McManager::handleCommand(char const*, unsigned char const*, int, char*, int)+0x150>
   12958:	eaffffdf 	b	128dc <McManager::handleCommand(char const*, unsigned char const*, int, char*, int)+0x228>
   1295c:	e3a02009 	mov	r2, #9
   12960:	e59f11d8 	ldr	r1, [pc, #472]	; 12b40 <McManager::handleCommand(char const*, unsigned char const*, int, char*, int)+0x48c>
   12964:	e28d001c 	add	r0, sp, #28
   12968:	eb00670d 	bl	2c5a4 <strncasecmp>
   1296c:	e3500000 	cmp	r0, #0
   12970:	1a000011 	bne	129bc <McManager::handleCommand(char const*, unsigned char const*, int, char*, int)+0x308>
   12974:	e28d001c 	add	r0, sp, #28
   12978:	e3a0103d 	mov	r1, #61	; 0x3d
   1297c:	eb0065c1 	bl	2c088 <strchr>
   12980:	e3500000 	cmp	r0, #0
   12984:	0affff9e 	beq	12804 <McManager::handleCommand(char const*, unsigned char const*, int, char*, int)+0x150>
   12988:	e2804001 	add	r4, r0, #1
   1298c:	e1a03004 	mov	r3, r4
   12990:	e59f21ac 	ldr	r2, [pc, #428]	; 12b44 <McManager::handleCommand(char const*, unsigned char const*, int, char*, int)+0x490>
   12994:	e3a01005 	mov	r1, #5
   12998:	e59f0188 	ldr	r0, [pc, #392]	; 12b28 <McManager::handleCommand(char const*, unsigned char const*, int, char*, int)+0x474>
   1299c:	ebffdb84 	bl	97b4 <LogWrite>
   129a0:	e59f3188 	ldr	r3, [pc, #392]	; 12b30 <McManager::handleCommand(char const*, unsigned char const*, int, char*, int)+0x47c>
   129a4:	e5933004 	ldr	r3, [r3, #4]
   129a8:	e3530000 	cmp	r3, #0
   129ac:	0affff94 	beq	12804 <McManager::handleCommand(char const*, unsigned char const*, int, char*, int)+0x150>
   129b0:	e1a00004 	mov	r0, r4
   129b4:	ebfffb5c 	bl	1172c <McManager::setMachineOpts(char const*) [clone .part.3]>
   129b8:	eaffff91 	b	12804 <McManager::handleCommand(char const*, unsigned char const*, int, char*, int)+0x150>
   129bc:	e59f1184 	ldr	r1, [pc, #388]	; 12b48 <McManager::handleCommand(char const*, unsigned char const*, int, char*, int)+0x494>
   129c0:	e28d001c 	add	r0, sp, #28
   129c4:	eb006593 	bl	2c018 <strcasecmp>
   129c8:	e3500000 	cmp	r0, #0
   129cc:	0a000012 	beq	12a1c <McManager::handleCommand(char const*, unsigned char const*, int, char*, int)+0x368>
   129d0:	e59f1174 	ldr	r1, [pc, #372]	; 12b4c <McManager::handleCommand(char const*, unsigned char const*, int, char*, int)+0x498>
   129d4:	e28d001c 	add	r0, sp, #28
   129d8:	eb00658e 	bl	2c018 <strcasecmp>
   129dc:	e3500000 	cmp	r0, #0
   129e0:	0a000017 	beq	12a44 <McManager::handleCommand(char const*, unsigned char const*, int, char*, int)+0x390>
   129e4:	e59f1164 	ldr	r1, [pc, #356]	; 12b50 <McManager::handleCommand(char const*, unsigned char const*, int, char*, int)+0x49c>
   129e8:	e28d001c 	add	r0, sp, #28
   129ec:	eb006589 	bl	2c018 <strcasecmp>
   129f0:	e3500000 	cmp	r0, #0
   129f4:	1a00000c 	bne	12a2c <McManager::handleCommand(char const*, unsigned char const*, int, char*, int)+0x378>
   129f8:	eb001d41 	bl	19f04 <TargetDebug::get()>
   129fc:	e3500000 	cmp	r0, #0
   12a00:	0affff7f 	beq	12804 <McManager::handleCommand(char const*, unsigned char const*, int, char*, int)+0x150>
   12a04:	e3a02001 	mov	r2, #1
   12a08:	e2803a01 	add	r3, r0, #4096	; 0x1000
   12a0c:	e5c32a38 	strb	r2, [r3, #2616]	; 0xa38
   12a10:	e28000cc 	add	r0, r0, #204	; 0xcc
   12a14:	eb001aac 	bl	194cc <StepTester::writeTestCode()>
   12a18:	eaffff79 	b	12804 <McManager::handleCommand(char const*, unsigned char const*, int, char*, int)+0x150>
   12a1c:	e1a01006 	mov	r1, r6
   12a20:	e1a00007 	mov	r0, r7
   12a24:	ebfffe4d 	bl	12360 <McManager::handleRxCharFromTarget(unsigned char const*, int)>
   12a28:	eaffff75 	b	12804 <McManager::handleCommand(char const*, unsigned char const*, int, char*, int)+0x150>
   12a2c:	e28d301c 	add	r3, sp, #28
   12a30:	e59f211c 	ldr	r2, [pc, #284]	; 12b54 <McManager::handleCommand(char const*, unsigned char const*, int, char*, int)+0x4a0>
   12a34:	e3a01004 	mov	r1, #4
   12a38:	e59f00e8 	ldr	r0, [pc, #232]	; 12b28 <McManager::handleCommand(char const*, unsigned char const*, int, char*, int)+0x474>
   12a3c:	ebffdb5c 	bl	97b4 <LogWrite>
   12a40:	eaffff6f 	b	12804 <McManager::handleCommand(char const*, unsigned char const*, int, char*, int)+0x150>
   12a44:	e3a0c030 	mov	ip, #48	; 0x30
   12a48:	e1a01004 	mov	r1, r4
   12a4c:	e28d2004 	add	r2, sp, #4
   12a50:	e3a03014 	mov	r3, #20
   12a54:	e59f00fc 	ldr	r0, [pc, #252]	; 12b58 <McManager::handleCommand(char const*, unsigned char const*, int, char*, int)+0x4a4>
   12a58:	e1cdc0b4 	strh	ip, [sp, #4]
   12a5c:	ebffe22d 	bl	b318 <jsonGetValueForKey>
   12a60:	e3500000 	cmp	r0, #0
   12a64:	1a000003 	bne	12a78 <McManager::handleCommand(char const*, unsigned char const*, int, char*, int)+0x3c4>
   12a68:	e59f20ec 	ldr	r2, [pc, #236]	; 12b5c <McManager::handleCommand(char const*, unsigned char const*, int, char*, int)+0x4a8>
   12a6c:	e3a01004 	mov	r1, #4
   12a70:	e59f00b0 	ldr	r0, [pc, #176]	; 12b28 <McManager::handleCommand(char const*, unsigned char const*, int, char*, int)+0x474>
   12a74:	ebffdb4e 	bl	97b4 <LogWrite>
   12a78:	e35600c8 	cmp	r6, #200	; 0xc8
   12a7c:	a3a060c8 	movge	r6, #200	; 0xc8
   12a80:	e59f40a8 	ldr	r4, [pc, #168]	; 12b30 <McManager::handleCommand(char const*, unsigned char const*, int, char*, int)+0x47c>
   12a84:	e1a02006 	mov	r2, r6
   12a88:	e2843ec7 	add	r3, r4, #3184	; 0xc70
   12a8c:	e2833008 	add	r3, r3, #8
   12a90:	e1a00003 	mov	r0, r3
   12a94:	e1a01007 	mov	r1, r7
   12a98:	eb0064d5 	bl	2bdf4 <memcpy>
   12a9c:	e3a02000 	mov	r2, #0
   12aa0:	e1a03000 	mov	r3, r0
   12aa4:	e5940004 	ldr	r0, [r4, #4]
   12aa8:	e0846006 	add	r6, r4, r6
   12aac:	e1500002 	cmp	r0, r2
   12ab0:	e5c62c78 	strb	r2, [r6, #3192]	; 0xc78
   12ab4:	e5c42d44 	strb	r2, [r4, #3396]	; 0xd44
   12ab8:	0a000006 	beq	12ad8 <McManager::handleCommand(char const*, unsigned char const*, int, char*, int)+0x424>
   12abc:	e5902000 	ldr	r2, [r0]
   12ac0:	e1a01003 	mov	r1, r3
   12ac4:	e5925020 	ldr	r5, [r2, #32]
   12ac8:	e2842d35 	add	r2, r4, #3392	; 0xd40
   12acc:	e3a03e7d 	mov	r3, #2000	; 0x7d0
   12ad0:	e2822004 	add	r2, r2, #4
   12ad4:	e12fff35 	blx	r5
   12ad8:	e5940000 	ldr	r0, [r4]
   12adc:	e3500000 	cmp	r0, #0
   12ae0:	0affff47 	beq	12804 <McManager::handleCommand(char const*, unsigned char const*, int, char*, int)+0x150>
   12ae4:	e28d2004 	add	r2, sp, #4
   12ae8:	e59f1070 	ldr	r1, [pc, #112]	; 12b60 <McManager::handleCommand(char const*, unsigned char const*, int, char*, int)+0x4ac>
   12aec:	ebfff058 	bl	ec54 <CommandHandler::sendRemoteDebugProtocolMsg(char const*, char const*)>
   12af0:	eaffff43 	b	12804 <McManager::handleCommand(char const*, unsigned char const*, int, char*, int)+0x150>
   12af4:	0002e7e8 	.word	0x0002e7e8
   12af8:	0002f154 	.word	0x0002f154
   12afc:	0002f160 	.word	0x0002f160
   12b00:	0002f16c 	.word	0x0002f16c
   12b04:	0002f17c 	.word	0x0002f17c
   12b08:	0002f18c 	.word	0x0002f18c
   12b0c:	0002f198 	.word	0x0002f198
   12b10:	0002f1a4 	.word	0x0002f1a4
   12b14:	0002f1b4 	.word	0x0002f1b4
   12b18:	0002f1d0 	.word	0x0002f1d0
   12b1c:	0002f1dc 	.word	0x0002f1dc
   12b20:	0002f1e8 	.word	0x0002f1e8
   12b24:	0002f1f4 	.word	0x0002f1f4
   12b28:	0002eed0 	.word	0x0002eed0
   12b2c:	0002f108 	.word	0x0002f108
   12b30:	00045500 	.word	0x00045500
   12b34:	00011680 	.word	0x00011680
   12b38:	0002f12c 	.word	0x0002f12c
   12b3c:	0002f1c0 	.word	0x0002f1c0
   12b40:	0002f208 	.word	0x0002f208
   12b44:	0002f214 	.word	0x0002f214
   12b48:	0002f230 	.word	0x0002f230
   12b4c:	0002e8a4 	.word	0x0002e8a4
   12b50:	0002f25c 	.word	0x0002f25c
   12b54:	0002f268 	.word	0x0002f268
   12b58:	0002e6b8 	.word	0x0002e6b8
   12b5c:	0002f238 	.word	0x0002f238
   12b60:	00046244 	.word	0x00046244

00012b64 <McManager::logDebugMessage(char const*)>:
   12b64:	e59f3014 	ldr	r3, [pc, #20]	; 12b80 <McManager::logDebugMessage(char const*)+0x1c>
   12b68:	e5933000 	ldr	r3, [r3]
   12b6c:	e3530000 	cmp	r3, #0
   12b70:	012fff1e 	bxeq	lr
   12b74:	e1a01000 	mov	r1, r0
   12b78:	e1a00003 	mov	r0, r3
   12b7c:	eafff057 	b	ece0 <CommandHandler::logDebugMessage(char const*)>
   12b80:	00045500 	.word	0x00045500

00012b84 <Timers::timerISR(void*)>:
   12b84:	e3a02008 	mov	r2, #8
   12b88:	e59f3038 	ldr	r3, [pc, #56]	; 12bc8 <Timers::timerISR(void*)+0x44>
   12b8c:	e59f1038 	ldr	r1, [pc, #56]	; 12bcc <Timers::timerISR(void*)+0x48>
   12b90:	e5832000 	str	r2, [r3]
   12b94:	e5932004 	ldr	r2, [r3, #4]
   12b98:	e591c000 	ldr	ip, [r1]
   12b9c:	e59f102c 	ldr	r1, [pc, #44]	; 12bd0 <Timers::timerISR(void*)+0x4c>
   12ba0:	e082200c 	add	r2, r2, ip
   12ba4:	e5832018 	str	r2, [r3, #24]
   12ba8:	e5d13000 	ldrb	r3, [r1]
   12bac:	e3530000 	cmp	r3, #0
   12bb0:	012fff1e 	bxeq	lr
   12bb4:	e59f3018 	ldr	r3, [pc, #24]	; 12bd4 <Timers::timerISR(void*)+0x50>
   12bb8:	e5933000 	ldr	r3, [r3]
   12bbc:	e3530000 	cmp	r3, #0
   12bc0:	012fff1e 	bxeq	lr
   12bc4:	e12fff13 	bx	r3
   12bc8:	20003000 	.word	0x20003000
   12bcc:	00042244 	.word	0x00042244
   12bd0:	00052c74 	.word	0x00052c74
   12bd4:	00052c78 	.word	0x00052c78

00012bd8 <McRobsZ80::keyHandler(unsigned char, unsigned char const*)>:
   12bd8:	e12fff1e 	bx	lr

00012bdc <McRobsZ80::busAccessCallback(unsigned long, unsigned long, unsigned long, unsigned long)>:
   12bdc:	e59d0000 	ldr	r0, [sp]
   12be0:	e12fff1e 	bx	lr

00012be4 <McRobsZ80::enable(int)>:
   12be4:	e3a02000 	mov	r2, #0
   12be8:	e59f3014 	ldr	r3, [pc, #20]	; 12c04 <McRobsZ80::enable(int)+0x20>
   12bec:	e2800901 	add	r0, r0, #16384	; 0x4000
   12bf0:	e5c02004 	strb	r2, [r0, #4]
   12bf4:	e3a01004 	mov	r1, #4
   12bf8:	e5930040 	ldr	r0, [r3, #64]	; 0x40
   12bfc:	e59f2004 	ldr	r2, [pc, #4]	; 12c08 <McRobsZ80::enable(int)+0x24>
   12c00:	eaffdaeb 	b	97b4 <LogWrite>
   12c04:	000420cc 	.word	0x000420cc
   12c08:	0002f2b4 	.word	0x0002f2b4

00012c0c <McRobsZ80::disable()>:
   12c0c:	e59f300c 	ldr	r3, [pc, #12]	; 12c20 <McRobsZ80::disable()+0x14>
   12c10:	e59f200c 	ldr	r2, [pc, #12]	; 12c24 <McRobsZ80::disable()+0x18>
   12c14:	e5930040 	ldr	r0, [r3, #64]	; 0x40
   12c18:	e3a01004 	mov	r1, #4
   12c1c:	eaffdae4 	b	97b4 <LogWrite>
   12c20:	000420cc 	.word	0x000420cc
   12c24:	0002f2c0 	.word	0x0002f2c0

00012c28 <McRobsZ80::displayRefresh()>:
   12c28:	e3a03000 	mov	r3, #0
   12c2c:	e3a02901 	mov	r2, #16384	; 0x4000
   12c30:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12c34:	e24dd901 	sub	sp, sp, #16384	; 0x4000
   12c38:	e24dd014 	sub	sp, sp, #20
   12c3c:	e28da010 	add	sl, sp, #16
   12c40:	e58d3000 	str	r3, [sp]
   12c44:	e1a0b000 	mov	fp, r0
   12c48:	e1a0100a 	mov	r1, sl
   12c4c:	e1a00002 	mov	r0, r2
   12c50:	e3a03001 	mov	r3, #1
   12c54:	ebfffe2c 	bl	1250c <McManager::blockRead(unsigned long, unsigned char*, unsigned long, bool, bool)>
   12c58:	e3500000 	cmp	r0, #0
   12c5c:	0a00002f 	beq	12d20 <McRobsZ80::displayRefresh()+0xf8>
   12c60:	e59f30c4 	ldr	r3, [pc, #196]	; 12d2c <McRobsZ80::displayRefresh()+0x104>
   12c64:	e26a2001 	rsb	r2, sl, #1
   12c68:	e593300c 	ldr	r3, [r3, #12]
   12c6c:	e58d2008 	str	r2, [sp, #8]
   12c70:	e3530000 	cmp	r3, #0
   12c74:	e2832007 	add	r2, r3, #7
   12c78:	b1a03002 	movlt	r3, r2
   12c7c:	e1a031c3 	asr	r3, r3, #3
   12c80:	e28b9004 	add	r9, fp, #4
   12c84:	e24a6001 	sub	r6, sl, #1
   12c88:	e58d300c 	str	r3, [sp, #12]
   12c8c:	e28bb901 	add	fp, fp, #16384	; 0x4000
   12c90:	e5db3004 	ldrb	r3, [fp, #4]
   12c94:	e59d2008 	ldr	r2, [sp, #8]
   12c98:	e3530000 	cmp	r3, #0
   12c9c:	e0820006 	add	r0, r2, r6
   12ca0:	e5f6a001 	ldrb	sl, [r6, #1]!
   12ca4:	0a000002 	beq	12cb4 <McRobsZ80::displayRefresh()+0x8c>
   12ca8:	e5d92000 	ldrb	r2, [r9]
   12cac:	e152000a 	cmp	r2, sl
   12cb0:	0a000013 	beq	12d04 <McRobsZ80::displayRefresh()+0xdc>
   12cb4:	e5c9a000 	strb	sl, [r9]
   12cb8:	e59d100c 	ldr	r1, [sp, #12]
   12cbc:	eb006b4f 	bl	2da00 <__aeabi_uidivmod>
   12cc0:	e1a04181 	lsl	r4, r1, #3
   12cc4:	e1a08000 	mov	r8, r0
   12cc8:	e3a05080 	mov	r5, #128	; 0x80
   12ccc:	e2847008 	add	r7, r4, #8
   12cd0:	ea000000 	b	12cd8 <McRobsZ80::displayRefresh()+0xb0>
   12cd4:	e5d6a000 	ldrb	sl, [r6]
   12cd8:	e11a0005 	tst	sl, r5
   12cdc:	13a03001 	movne	r3, #1
   12ce0:	03a03000 	moveq	r3, #0
   12ce4:	e1a01004 	mov	r1, r4
   12ce8:	e1a02008 	mov	r2, r8
   12cec:	e3a00000 	mov	r0, #0
   12cf0:	e2844001 	add	r4, r4, #1
   12cf4:	ebffe5b4 	bl	c3cc <wgfxSetMonoPixel>
   12cf8:	e1570004 	cmp	r7, r4
   12cfc:	e1a050c5 	asr	r5, r5, #1
   12d00:	1afffff3 	bne	12cd4 <McRobsZ80::displayRefresh()+0xac>
   12d04:	e28d3901 	add	r3, sp, #16384	; 0x4000
   12d08:	e283300f 	add	r3, r3, #15
   12d0c:	e1560003 	cmp	r6, r3
   12d10:	e2899001 	add	r9, r9, #1
   12d14:	1affffdd 	bne	12c90 <McRobsZ80::displayRefresh()+0x68>
   12d18:	e3a03001 	mov	r3, #1
   12d1c:	e5cb3004 	strb	r3, [fp, #4]
   12d20:	e28dd901 	add	sp, sp, #16384	; 0x4000
   12d24:	e28dd014 	add	sp, sp, #20
   12d28:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12d2c:	000420cc 	.word	0x000420cc

00012d30 <McRobsZ80::fileHandler(char const*, unsigned char const*, int)>:
   12d30:	e92d4070 	push	{r4, r5, r6, lr}
   12d34:	e24dd090 	sub	sp, sp, #144	; 0x90
   12d38:	e1a06002 	mov	r6, r2
   12d3c:	e1a04003 	mov	r4, r3
   12d40:	e28d2028 	add	r2, sp, #40	; 0x28
   12d44:	e3a03064 	mov	r3, #100	; 0x64
   12d48:	e59f007c 	ldr	r0, [pc, #124]	; 12dcc <McRobsZ80::fileHandler(char const*, unsigned char const*, int)+0x9c>
   12d4c:	e1a05001 	mov	r5, r1
   12d50:	ebffe170 	bl	b318 <jsonGetValueForKey>
   12d54:	e3500000 	cmp	r0, #0
   12d58:	1a000001 	bne	12d64 <McRobsZ80::fileHandler(char const*, unsigned char const*, int)+0x34>
   12d5c:	e28dd090 	add	sp, sp, #144	; 0x90
   12d60:	e8bd8070 	pop	{r4, r5, r6, pc}
   12d64:	e1a01005 	mov	r1, r5
   12d68:	e3a0301e 	mov	r3, #30
   12d6c:	e28d2008 	add	r2, sp, #8
   12d70:	e59f0058 	ldr	r0, [pc, #88]	; 12dd0 <McRobsZ80::fileHandler(char const*, unsigned char const*, int)+0xa0>
   12d74:	ebffe167 	bl	b318 <jsonGetValueForKey>
   12d78:	e2505000 	subs	r5, r0, #0
   12d7c:	01a03005 	moveq	r3, r5
   12d80:	0a000005 	beq	12d9c <McRobsZ80::fileHandler(char const*, unsigned char const*, int)+0x6c>
   12d84:	e28d0008 	add	r0, sp, #8
   12d88:	e3a02010 	mov	r2, #16
   12d8c:	e3a01000 	mov	r1, #0
   12d90:	eb00692c 	bl	2d248 <strtol>
   12d94:	e6ff3070 	uxth	r3, r0
   12d98:	e1a05003 	mov	r5, r3
   12d9c:	e59f2030 	ldr	r2, [pc, #48]	; 12dd4 <McRobsZ80::fileHandler(char const*, unsigned char const*, int)+0xa4>
   12da0:	e58d4000 	str	r4, [sp]
   12da4:	e5920040 	ldr	r0, [r2, #64]	; 0x40
   12da8:	e3a01004 	mov	r1, #4
   12dac:	e59f2024 	ldr	r2, [pc, #36]	; 12dd8 <McRobsZ80::fileHandler(char const*, unsigned char const*, int)+0xa8>
   12db0:	ebffda7f 	bl	97b4 <LogWrite>
   12db4:	e1a02004 	mov	r2, r4
   12db8:	e1a01006 	mov	r1, r6
   12dbc:	e1a00005 	mov	r0, r5
   12dc0:	eb00238c 	bl	1bbf8 <TargetState::addMemoryBlock(unsigned long, unsigned char const*, unsigned long)>
   12dc4:	e28dd090 	add	sp, sp, #144	; 0x90
   12dc8:	e8bd8070 	pop	{r4, r5, r6, pc}
   12dcc:	0002e604 	.word	0x0002e604
   12dd0:	0002f2cc 	.word	0x0002f2cc
   12dd4:	000420cc 	.word	0x000420cc
   12dd8:	0002f2d8 	.word	0x0002f2d8

00012ddc <McRobsZ80::handleExecAddr(unsigned long)>:
   12ddc:	e92d4010 	push	{r4, lr}
   12de0:	e3e0303c 	mvn	r3, #60	; 0x3c
   12de4:	e1a04000 	mov	r4, r0
   12de8:	e24dd008 	sub	sp, sp, #8
   12dec:	e1a0c420 	lsr	ip, r0, #8
   12df0:	e28d1004 	add	r1, sp, #4
   12df4:	e3a02003 	mov	r2, #3
   12df8:	e3a00000 	mov	r0, #0
   12dfc:	e5cdc006 	strb	ip, [sp, #6]
   12e00:	e5cd3004 	strb	r3, [sp, #4]
   12e04:	e5cd4005 	strb	r4, [sp, #5]
   12e08:	eb00237a 	bl	1bbf8 <TargetState::addMemoryBlock(unsigned long, unsigned char const*, unsigned long)>
   12e0c:	e59f2018 	ldr	r2, [pc, #24]	; 12e2c <McRobsZ80::handleExecAddr(unsigned long)+0x50>
   12e10:	e1a03004 	mov	r3, r4
   12e14:	e5920040 	ldr	r0, [r2, #64]	; 0x40
   12e18:	e3a01004 	mov	r1, #4
   12e1c:	e59f200c 	ldr	r2, [pc, #12]	; 12e30 <McRobsZ80::handleExecAddr(unsigned long)+0x54>
   12e20:	ebffda63 	bl	97b4 <LogWrite>
   12e24:	e28dd008 	add	sp, sp, #8
   12e28:	e8bd8010 	pop	{r4, pc}
   12e2c:	000420cc 	.word	0x000420cc
   12e30:	0002f308 	.word	0x0002f308

00012e34 <McRobsZ80::getDescriptorTable(int)>:
   12e34:	e59f0000 	ldr	r0, [pc]	; 12e3c <McRobsZ80::getDescriptorTable(int)+0x8>
   12e38:	e12fff1e 	bx	lr
   12e3c:	000420cc 	.word	0x000420cc

00012e40 <McTRS80::enable(int)>:
   12e40:	e3a03000 	mov	r3, #0
   12e44:	e5c03404 	strb	r3, [r0, #1028]	; 0x404
   12e48:	e5c03505 	strb	r3, [r0, #1285]	; 0x505
   12e4c:	e12fff1e 	bx	lr

00012e50 <McTRS80::keyHandler(unsigned char, unsigned char const*)>:
   12e50:	e3a03000 	mov	r3, #0
   12e54:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12e58:	e24dd014 	sub	sp, sp, #20
   12e5c:	e1a0e003 	mov	lr, r3
   12e60:	e3a04001 	mov	r4, #1
   12e64:	e3e0507f 	mvn	r5, #127	; 0x7f
   12e68:	e2011002 	and	r1, r1, #2
   12e6c:	e242c001 	sub	ip, r2, #1
   12e70:	e2826005 	add	r6, r2, #5
   12e74:	e58d3008 	str	r3, [sp, #8]
   12e78:	e58d300c 	str	r3, [sp, #12]
   12e7c:	ea000008 	b	12ea4 <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x54>
   12e80:	e2433003 	sub	r3, r3, #3
   12e84:	e28d2010 	add	r2, sp, #16
   12e88:	e08271c3 	add	r7, r2, r3, asr #3
   12e8c:	e5572008 	ldrb	r2, [r7, #-8]
   12e90:	e2033007 	and	r3, r3, #7
   12e94:	e1823314 	orr	r3, r2, r4, lsl r3
   12e98:	e5473008 	strb	r3, [r7, #-8]
   12e9c:	e15c0006 	cmp	ip, r6
   12ea0:	0a000010 	beq	12ee8 <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x98>
   12ea4:	e5fc3001 	ldrb	r3, [ip, #1]!
   12ea8:	e2432004 	sub	r2, r3, #4
   12eac:	e3520019 	cmp	r2, #25
   12eb0:	9afffff2 	bls	12e80 <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x30>
   12eb4:	e353001f 	cmp	r3, #31
   12eb8:	0a000047 	beq	12fdc <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x18c>
   12ebc:	e3530023 	cmp	r3, #35	; 0x23
   12ec0:	0a00003a 	beq	12fb0 <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x160>
   12ec4:	e3530024 	cmp	r3, #36	; 0x24
   12ec8:	1a00004a 	bne	12ff8 <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x1a8>
   12ecc:	e3510000 	cmp	r1, #0
   12ed0:	0a000039 	beq	12fbc <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x16c>
   12ed4:	e5dd300c 	ldrb	r3, [sp, #12]
   12ed8:	e15c0006 	cmp	ip, r6
   12edc:	e3833040 	orr	r3, r3, #64	; 0x40
   12ee0:	e5cd300c 	strb	r3, [sp, #12]
   12ee4:	1affffee 	bne	12ea4 <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x54>
   12ee8:	e5dd600f 	ldrb	r6, [sp, #15]
   12eec:	e35e0000 	cmp	lr, #0
   12ef0:	e5dd300e 	ldrb	r3, [sp, #14]
   12ef4:	e59fc378 	ldr	ip, [pc, #888]	; 13274 <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x424>
   12ef8:	120660fc 	andne	r6, r6, #252	; 0xfc
   12efc:	e2801b01 	add	r1, r0, #1024	; 0x400
   12f00:	e280ec05 	add	lr, r0, #1280	; 0x500
   12f04:	e58d3000 	str	r3, [sp]
   12f08:	e04cc000 	sub	ip, ip, r0
   12f0c:	e2811004 	add	r1, r1, #4
   12f10:	e28ee004 	add	lr, lr, #4
   12f14:	e5ddb009 	ldrb	fp, [sp, #9]
   12f18:	e5dda00a 	ldrb	sl, [sp, #10]
   12f1c:	e5dd900b 	ldrb	r9, [sp, #11]
   12f20:	e5dd800c 	ldrb	r8, [sp, #12]
   12f24:	e5dd700d 	ldrb	r7, [sp, #13]
   12f28:	e5dd4008 	ldrb	r4, [sp, #8]
   12f2c:	e3a03000 	mov	r3, #0
   12f30:	e3a05001 	mov	r5, #1
   12f34:	e58d6004 	str	r6, [sp, #4]
   12f38:	ea000002 	b	12f48 <McTRS80::keyHandler(unsigned char, unsigned char const*)+0xf8>
   12f3c:	e3130001 	tst	r3, #1
   12f40:	11a03004 	movne	r3, r4
   12f44:	03a03000 	moveq	r3, #0
   12f48:	e08c2001 	add	r2, ip, r1
   12f4c:	e3120002 	tst	r2, #2
   12f50:	118b3003 	orrne	r3, fp, r3
   12f54:	e3120004 	tst	r2, #4
   12f58:	118a3003 	orrne	r3, sl, r3
   12f5c:	e3120008 	tst	r2, #8
   12f60:	11893003 	orrne	r3, r9, r3
   12f64:	e3120010 	tst	r2, #16
   12f68:	11883003 	orrne	r3, r8, r3
   12f6c:	e3120020 	tst	r2, #32
   12f70:	11873003 	orrne	r3, r7, r3
   12f74:	e3120040 	tst	r2, #64	; 0x40
   12f78:	159d6000 	ldrne	r6, [sp]
   12f7c:	11863003 	orrne	r3, r6, r3
   12f80:	e3120080 	tst	r2, #128	; 0x80
   12f84:	159d2004 	ldrne	r2, [sp, #4]
   12f88:	11823003 	orrne	r3, r2, r3
   12f8c:	e5f12001 	ldrb	r2, [r1, #1]!
   12f90:	e1520003 	cmp	r2, r3
   12f94:	15c13000 	strbne	r3, [r1]
   12f98:	15c05505 	strbne	r5, [r0, #1285]	; 0x505
   12f9c:	e151000e 	cmp	r1, lr
   12fa0:	e08c3001 	add	r3, ip, r1
   12fa4:	1affffe4 	bne	12f3c <McTRS80::keyHandler(unsigned char, unsigned char const*)+0xec>
   12fa8:	e28dd014 	add	sp, sp, #20
   12fac:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12fb0:	e3510000 	cmp	r1, #0
   12fb4:	13a0e001 	movne	lr, #1
   12fb8:	1affffb7 	bne	12e9c <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x4c>
   12fbc:	e243301d 	sub	r3, r3, #29
   12fc0:	e28d2010 	add	r2, sp, #16
   12fc4:	e08221c3 	add	r2, r2, r3, asr #3
   12fc8:	e5527004 	ldrb	r7, [r2, #-4]
   12fcc:	e2033007 	and	r3, r3, #7
   12fd0:	e1873314 	orr	r3, r7, r4, lsl r3
   12fd4:	e5423004 	strb	r3, [r2, #-4]
   12fd8:	eaffffaf 	b	12e9c <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x4c>
   12fdc:	e3510000 	cmp	r1, #0
   12fe0:	0afffff5 	beq	12fbc <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x16c>
   12fe4:	e3a0e001 	mov	lr, #1
   12fe8:	e5dd3008 	ldrb	r3, [sp, #8]
   12fec:	e183300e 	orr	r3, r3, lr
   12ff0:	e5cd3008 	strb	r3, [sp, #8]
   12ff4:	eaffffa8 	b	12e9c <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x4c>
   12ff8:	e3530025 	cmp	r3, #37	; 0x25
   12ffc:	1a000005 	bne	13018 <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x1c8>
   13000:	e3510000 	cmp	r1, #0
   13004:	0affffec 	beq	12fbc <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x16c>
   13008:	e5dd300d 	ldrb	r3, [sp, #13]
   1300c:	e3833004 	orr	r3, r3, #4
   13010:	e5cd300d 	strb	r3, [sp, #13]
   13014:	eaffffa0 	b	12e9c <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x4c>
   13018:	e3530026 	cmp	r3, #38	; 0x26
   1301c:	1a000008 	bne	13044 <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x1f4>
   13020:	e3510000 	cmp	r1, #0
   13024:	0affffe4 	beq	12fbc <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x16c>
   13028:	e5dd200d 	ldrb	r2, [sp, #13]
   1302c:	e5dd300f 	ldrb	r3, [sp, #15]
   13030:	e3822001 	orr	r2, r2, #1
   13034:	e3833001 	orr	r3, r3, #1
   13038:	e5cd200d 	strb	r2, [sp, #13]
   1303c:	e5cd300f 	strb	r3, [sp, #15]
   13040:	eaffff95 	b	12e9c <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x4c>
   13044:	e3530027 	cmp	r3, #39	; 0x27
   13048:	1a00000c 	bne	13080 <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x230>
   1304c:	e3510000 	cmp	r1, #0
   13050:	0a000006 	beq	13070 <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x220>
   13054:	e5dd200d 	ldrb	r2, [sp, #13]
   13058:	e5dd300f 	ldrb	r3, [sp, #15]
   1305c:	e3822002 	orr	r2, r2, #2
   13060:	e3833001 	orr	r3, r3, #1
   13064:	e5cd200d 	strb	r2, [sp, #13]
   13068:	e5cd300f 	strb	r3, [sp, #15]
   1306c:	eaffff8a 	b	12e9c <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x4c>
   13070:	e5dd300c 	ldrb	r3, [sp, #12]
   13074:	e3833001 	orr	r3, r3, #1
   13078:	e5cd300c 	strb	r3, [sp, #12]
   1307c:	eaffff86 	b	12e9c <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x4c>
   13080:	e243201e 	sub	r2, r3, #30
   13084:	e3520008 	cmp	r2, #8
   13088:	9affffcb 	bls	12fbc <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x16c>
   1308c:	e3530033 	cmp	r3, #51	; 0x33
   13090:	0a00000a 	beq	130c0 <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x270>
   13094:	e3530034 	cmp	r3, #52	; 0x34
   13098:	1a00000f 	bne	130dc <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x28c>
   1309c:	e3510000 	cmp	r1, #0
   130a0:	0a000056 	beq	13200 <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x3b0>
   130a4:	e5dd200c 	ldrb	r2, [sp, #12]
   130a8:	e5dd300f 	ldrb	r3, [sp, #15]
   130ac:	e3822004 	orr	r2, r2, #4
   130b0:	e3833001 	orr	r3, r3, #1
   130b4:	e5cd200c 	strb	r2, [sp, #12]
   130b8:	e5cd300f 	strb	r3, [sp, #15]
   130bc:	eaffff76 	b	12e9c <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x4c>
   130c0:	e3510000 	cmp	r1, #0
   130c4:	e5dd300d 	ldrb	r3, [sp, #13]
   130c8:	1a000009 	bne	130f4 <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x2a4>
   130cc:	e3833008 	orr	r3, r3, #8
   130d0:	e5cd300d 	strb	r3, [sp, #13]
   130d4:	e3a0e001 	mov	lr, #1
   130d8:	eaffff6f 	b	12e9c <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x4c>
   130dc:	e3530036 	cmp	r3, #54	; 0x36
   130e0:	1a000007 	bne	13104 <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x2b4>
   130e4:	e5dd300d 	ldrb	r3, [sp, #13]
   130e8:	e3833010 	orr	r3, r3, #16
   130ec:	e5cd300d 	strb	r3, [sp, #13]
   130f0:	eaffff69 	b	12e9c <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x4c>
   130f4:	e3833004 	orr	r3, r3, #4
   130f8:	e5cd300d 	strb	r3, [sp, #13]
   130fc:	e3a0e001 	mov	lr, #1
   13100:	eaffff65 	b	12e9c <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x4c>
   13104:	e3530037 	cmp	r3, #55	; 0x37
   13108:	05dd300d 	ldrbeq	r3, [sp, #13]
   1310c:	03833040 	orreq	r3, r3, #64	; 0x40
   13110:	05cd300d 	strbeq	r3, [sp, #13]
   13114:	0affff60 	beq	12e9c <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x4c>
   13118:	e353002e 	cmp	r3, #46	; 0x2e
   1311c:	0a00003d 	beq	13218 <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x3c8>
   13120:	e353002d 	cmp	r3, #45	; 0x2d
   13124:	0a000048 	beq	1324c <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x3fc>
   13128:	e3530038 	cmp	r3, #56	; 0x38
   1312c:	05dd300d 	ldrbeq	r3, [sp, #13]
   13130:	01853003 	orreq	r3, r5, r3
   13134:	05cd300d 	strbeq	r3, [sp, #13]
   13138:	0affff57 	beq	12e9c <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x4c>
   1313c:	e3530028 	cmp	r3, #40	; 0x28
   13140:	05dd300e 	ldrbeq	r3, [sp, #14]
   13144:	03833001 	orreq	r3, r3, #1
   13148:	05cd300e 	strbeq	r3, [sp, #14]
   1314c:	0affff52 	beq	12e9c <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x4c>
   13150:	e353002a 	cmp	r3, #42	; 0x2a
   13154:	0a000038 	beq	1323c <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x3ec>
   13158:	e3530029 	cmp	r3, #41	; 0x29
   1315c:	05dd300e 	ldrbeq	r3, [sp, #14]
   13160:	03833004 	orreq	r3, r3, #4
   13164:	05cd300e 	strbeq	r3, [sp, #14]
   13168:	0affff4b 	beq	12e9c <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x4c>
   1316c:	e3530052 	cmp	r3, #82	; 0x52
   13170:	05dd300e 	ldrbeq	r3, [sp, #14]
   13174:	03833008 	orreq	r3, r3, #8
   13178:	05cd300e 	strbeq	r3, [sp, #14]
   1317c:	0affff46 	beq	12e9c <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x4c>
   13180:	e3530051 	cmp	r3, #81	; 0x51
   13184:	05dd300e 	ldrbeq	r3, [sp, #14]
   13188:	03833010 	orreq	r3, r3, #16
   1318c:	05cd300e 	strbeq	r3, [sp, #14]
   13190:	0affff41 	beq	12e9c <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x4c>
   13194:	e3530050 	cmp	r3, #80	; 0x50
   13198:	0a000027 	beq	1323c <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x3ec>
   1319c:	e353004f 	cmp	r3, #79	; 0x4f
   131a0:	05dd300e 	ldrbeq	r3, [sp, #14]
   131a4:	03833040 	orreq	r3, r3, #64	; 0x40
   131a8:	05cd300e 	strbeq	r3, [sp, #14]
   131ac:	0affff3a 	beq	12e9c <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x4c>
   131b0:	e353002c 	cmp	r3, #44	; 0x2c
   131b4:	05dd300e 	ldrbeq	r3, [sp, #14]
   131b8:	01853003 	orreq	r3, r5, r3
   131bc:	05cd300e 	strbeq	r3, [sp, #14]
   131c0:	0affff35 	beq	12e9c <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x4c>
   131c4:	e353003a 	cmp	r3, #58	; 0x3a
   131c8:	05dd300e 	ldrbeq	r3, [sp, #14]
   131cc:	03833002 	orreq	r3, r3, #2
   131d0:	05cd300e 	strbeq	r3, [sp, #14]
   131d4:	0affff30 	beq	12e9c <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x4c>
   131d8:	e35300e1 	cmp	r3, #225	; 0xe1
   131dc:	05dd300f 	ldrbeq	r3, [sp, #15]
   131e0:	03833001 	orreq	r3, r3, #1
   131e4:	05cd300f 	strbeq	r3, [sp, #15]
   131e8:	0affff2b 	beq	12e9c <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x4c>
   131ec:	e35300e5 	cmp	r3, #229	; 0xe5
   131f0:	05dd300f 	ldrbeq	r3, [sp, #15]
   131f4:	03833002 	orreq	r3, r3, #2
   131f8:	05cd300f 	strbeq	r3, [sp, #15]
   131fc:	0affff26 	beq	12e9c <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x4c>
   13200:	e20330fb 	and	r3, r3, #251	; 0xfb
   13204:	e35300e0 	cmp	r3, #224	; 0xe0
   13208:	05dd300f 	ldrbeq	r3, [sp, #15]
   1320c:	03833010 	orreq	r3, r3, #16
   13210:	05cd300f 	strbeq	r3, [sp, #15]
   13214:	eaffff20 	b	12e9c <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x4c>
   13218:	e5dd200f 	ldrb	r2, [sp, #15]
   1321c:	e3510000 	cmp	r1, #0
   13220:	e3822001 	orr	r2, r2, #1
   13224:	e5dd300d 	ldrb	r3, [sp, #13]
   13228:	1a00000d 	bne	13264 <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x414>
   1322c:	e3833020 	orr	r3, r3, #32
   13230:	e5cd300d 	strb	r3, [sp, #13]
   13234:	e5cd200f 	strb	r2, [sp, #15]
   13238:	eaffff17 	b	12e9c <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x4c>
   1323c:	e5dd300e 	ldrb	r3, [sp, #14]
   13240:	e3833020 	orr	r3, r3, #32
   13244:	e5cd300e 	strb	r3, [sp, #14]
   13248:	eaffff13 	b	12e9c <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x4c>
   1324c:	e3510000 	cmp	r1, #0
   13250:	05dd300d 	ldrbeq	r3, [sp, #13]
   13254:	03a0e001 	moveq	lr, #1
   13258:	03833020 	orreq	r3, r3, #32
   1325c:	05cd300d 	strbeq	r3, [sp, #13]
   13260:	eaffff0d 	b	12e9c <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x4c>
   13264:	e3833008 	orr	r3, r3, #8
   13268:	e5cd300d 	strb	r3, [sp, #13]
   1326c:	e5cd200f 	strb	r2, [sp, #15]
   13270:	eaffff09 	b	12e9c <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x4c>
   13274:	fffffbfc 	.word	0xfffffbfc

00013278 <McTRS80::busAccessCallback(unsigned long, unsigned long, unsigned long, unsigned long)>:
   13278:	e2033009 	and	r3, r3, #9
   1327c:	e3530009 	cmp	r3, #9
   13280:	03510013 	cmpeq	r1, #19
   13284:	e59d0000 	ldr	r0, [sp]
   13288:	03a000ff 	moveq	r0, #255	; 0xff
   1328c:	e12fff1e 	bx	lr

00013290 <McTRS80::disable()>:
   13290:	e59f300c 	ldr	r3, [pc, #12]	; 132a4 <McTRS80::disable()+0x14>
   13294:	e59f200c 	ldr	r2, [pc, #12]	; 132a8 <McTRS80::disable()+0x18>
   13298:	e5930040 	ldr	r0, [r3, #64]	; 0x40
   1329c:	e3a01004 	mov	r1, #4
   132a0:	eaffd943 	b	97b4 <LogWrite>
   132a4:	00042110 	.word	0x00042110
   132a8:	0002f364 	.word	0x0002f364

000132ac <McTRS80::displayRefresh()>:
   132ac:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   132b0:	e3a0a000 	mov	sl, #0
   132b4:	e24dde41 	sub	sp, sp, #1040	; 0x410
   132b8:	e24dd004 	sub	sp, sp, #4
   132bc:	e1a09000 	mov	r9, r0
   132c0:	e58da000 	str	sl, [sp]
   132c4:	e28d1010 	add	r1, sp, #16
   132c8:	e3a03001 	mov	r3, #1
   132cc:	e3a02b01 	mov	r2, #1024	; 0x400
   132d0:	e3a00b0f 	mov	r0, #15360	; 0x3c00
   132d4:	ebfffc8c 	bl	1250c <McManager::blockRead(unsigned long, unsigned char*, unsigned long, bool, bool)>
   132d8:	e150000a 	cmp	r0, sl
   132dc:	0a00002f 	beq	133a0 <McTRS80::displayRefresh()+0xf4>
   132e0:	e59f40f0 	ldr	r4, [pc, #240]	; 133d8 <McTRS80::displayRefresh()+0x12c>
   132e4:	e5941014 	ldr	r1, [r4, #20]
   132e8:	e594000c 	ldr	r0, [r4, #12]
   132ec:	eb0069cb 	bl	2da20 <__divsi3>
   132f0:	e5941018 	ldr	r1, [r4, #24]
   132f4:	e1a08000 	mov	r8, r0
   132f8:	e5940010 	ldr	r0, [r4, #16]
   132fc:	eb0069c7 	bl	2da20 <__divsi3>
   13300:	e250b000 	subs	fp, r0, #0
   13304:	da000020 	ble	1338c <McTRS80::displayRefresh()+0xe0>
   13308:	e158000a 	cmp	r8, sl
   1330c:	da00001e 	ble	1338c <McTRS80::displayRefresh()+0xe0>
   13310:	e1a0700a 	mov	r7, sl
   13314:	e28d300f 	add	r3, sp, #15
   13318:	e58d3008 	str	r3, [sp, #8]
   1331c:	e2893004 	add	r3, r9, #4
   13320:	e58d300c 	str	r3, [sp, #12]
   13324:	e3a04000 	mov	r4, #0
   13328:	e59d3008 	ldr	r3, [sp, #8]
   1332c:	e083600a 	add	r6, r3, sl
   13330:	e59d300c 	ldr	r3, [sp, #12]
   13334:	e083500a 	add	r5, r3, sl
   13338:	e5d92404 	ldrb	r2, [r9, #1028]	; 0x404
   1333c:	e5f63001 	ldrb	r3, [r6, #1]!
   13340:	e3520000 	cmp	r2, #0
   13344:	0a000002 	beq	13354 <McTRS80::displayRefresh()+0xa8>
   13348:	e5d52000 	ldrb	r2, [r5]
   1334c:	e1520003 	cmp	r2, r3
   13350:	0a000005 	beq	1336c <McTRS80::displayRefresh()+0xc0>
   13354:	e1a02007 	mov	r2, r7
   13358:	e1a01004 	mov	r1, r4
   1335c:	e3a00000 	mov	r0, #0
   13360:	ebffe40e 	bl	c3a0 <wgfx_putc>
   13364:	e5d63000 	ldrb	r3, [r6]
   13368:	e5c53000 	strb	r3, [r5]
   1336c:	e2844001 	add	r4, r4, #1
   13370:	e1580004 	cmp	r8, r4
   13374:	e2855001 	add	r5, r5, #1
   13378:	1affffee 	bne	13338 <McTRS80::displayRefresh()+0x8c>
   1337c:	e2877001 	add	r7, r7, #1
   13380:	e15b0007 	cmp	fp, r7
   13384:	e08aa008 	add	sl, sl, r8
   13388:	1affffe5 	bne	13324 <McTRS80::displayRefresh()+0x78>
   1338c:	e3a03001 	mov	r3, #1
   13390:	e5d92505 	ldrb	r2, [r9, #1285]	; 0x505
   13394:	e5c93404 	strb	r3, [r9, #1028]	; 0x404
   13398:	e3520000 	cmp	r2, #0
   1339c:	1a000002 	bne	133ac <McTRS80::displayRefresh()+0x100>
   133a0:	e28dde41 	add	sp, sp, #1040	; 0x410
   133a4:	e28dd004 	add	sp, sp, #4
   133a8:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   133ac:	e3a04000 	mov	r4, #0
   133b0:	e2891b01 	add	r1, r9, #1024	; 0x400
   133b4:	e58d4000 	str	r4, [sp]
   133b8:	e2811005 	add	r1, r1, #5
   133bc:	e3a02c01 	mov	r2, #256	; 0x100
   133c0:	e3a00b0e 	mov	r0, #14336	; 0x3800
   133c4:	ebfffc2f 	bl	12488 <McManager::blockWrite(unsigned long, unsigned char const*, unsigned long, bool, bool)>
   133c8:	e5c94505 	strb	r4, [r9, #1285]	; 0x505
   133cc:	e28dde41 	add	sp, sp, #1040	; 0x410
   133d0:	e28dd004 	add	sp, sp, #4
   133d4:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   133d8:	00042110 	.word	0x00042110

000133dc <McTRS80::fileHandler(char const*, unsigned char const*, int)>:
   133dc:	e92d4070 	push	{r4, r5, r6, lr}
   133e0:	e24dd090 	sub	sp, sp, #144	; 0x90
   133e4:	e1a05002 	mov	r5, r2
   133e8:	e1a04003 	mov	r4, r3
   133ec:	e28d2028 	add	r2, sp, #40	; 0x28
   133f0:	e3a03064 	mov	r3, #100	; 0x64
   133f4:	e59f00e0 	ldr	r0, [pc, #224]	; 134dc <McTRS80::fileHandler(char const*, unsigned char const*, int)+0x100>
   133f8:	e1a06001 	mov	r6, r1
   133fc:	ebffdfc5 	bl	b318 <jsonGetValueForKey>
   13400:	e3500000 	cmp	r0, #0
   13404:	0a000017 	beq	13468 <McTRS80::fileHandler(char const*, unsigned char const*, int)+0x8c>
   13408:	e3a0102e 	mov	r1, #46	; 0x2e
   1340c:	e28d0028 	add	r0, sp, #40	; 0x28
   13410:	eb00631c 	bl	2c088 <strchr>
   13414:	e59f30c4 	ldr	r3, [pc, #196]	; 134e0 <McTRS80::fileHandler(char const*, unsigned char const*, int)+0x104>
   13418:	e3500000 	cmp	r0, #0
   1341c:	01a00003 	moveq	r0, r3
   13420:	e59f10bc 	ldr	r1, [pc, #188]	; 134e4 <McTRS80::fileHandler(char const*, unsigned char const*, int)+0x108>
   13424:	eb0062fb 	bl	2c018 <strcasecmp>
   13428:	e3500000 	cmp	r0, #0
   1342c:	1a00000f 	bne	13470 <McTRS80::fileHandler(char const*, unsigned char const*, int)+0x94>
   13430:	e28d0008 	add	r0, sp, #8
   13434:	ebfff3e5 	bl	103d0 <McTRS80CmdFormat::McTRS80CmdFormat()>
   13438:	e59f20a8 	ldr	r2, [pc, #168]	; 134e8 <McTRS80::fileHandler(char const*, unsigned char const*, int)+0x10c>
   1343c:	e1a03004 	mov	r3, r4
   13440:	e5920040 	ldr	r0, [r2, #64]	; 0x40
   13444:	e3a01004 	mov	r1, #4
   13448:	e59f209c 	ldr	r2, [pc, #156]	; 134ec <McTRS80::fileHandler(char const*, unsigned char const*, int)+0x110>
   1344c:	ebffd8d8 	bl	97b4 <LogWrite>
   13450:	e28d0008 	add	r0, sp, #8
   13454:	e58d4000 	str	r4, [sp]
   13458:	e1a03005 	mov	r3, r5
   1345c:	e59f208c 	ldr	r2, [pc, #140]	; 134f0 <McTRS80::fileHandler(char const*, unsigned char const*, int)+0x114>
   13460:	e59f108c 	ldr	r1, [pc, #140]	; 134f4 <McTRS80::fileHandler(char const*, unsigned char const*, int)+0x118>
   13464:	ebfff3da 	bl	103d4 <McTRS80CmdFormat::proc(void (*)(unsigned long, unsigned char const*, unsigned long), void (*)(Z80Registers const&), unsigned char const*, int)>
   13468:	e28dd090 	add	sp, sp, #144	; 0x90
   1346c:	e8bd8070 	pop	{r4, r5, r6, pc}
   13470:	e1a01006 	mov	r1, r6
   13474:	e3a0301e 	mov	r3, #30
   13478:	e28d2008 	add	r2, sp, #8
   1347c:	e59f0074 	ldr	r0, [pc, #116]	; 134f8 <McTRS80::fileHandler(char const*, unsigned char const*, int)+0x11c>
   13480:	ebffdfa4 	bl	b318 <jsonGetValueForKey>
   13484:	e2506000 	subs	r6, r0, #0
   13488:	01a03006 	moveq	r3, r6
   1348c:	1a00000b 	bne	134c0 <McTRS80::fileHandler(char const*, unsigned char const*, int)+0xe4>
   13490:	e59f2050 	ldr	r2, [pc, #80]	; 134e8 <McTRS80::fileHandler(char const*, unsigned char const*, int)+0x10c>
   13494:	e58d4000 	str	r4, [sp]
   13498:	e5920040 	ldr	r0, [r2, #64]	; 0x40
   1349c:	e3a01004 	mov	r1, #4
   134a0:	e59f2054 	ldr	r2, [pc, #84]	; 134fc <McTRS80::fileHandler(char const*, unsigned char const*, int)+0x120>
   134a4:	ebffd8c2 	bl	97b4 <LogWrite>
   134a8:	e1a02004 	mov	r2, r4
   134ac:	e1a01005 	mov	r1, r5
   134b0:	e1a00006 	mov	r0, r6
   134b4:	eb0021cf 	bl	1bbf8 <TargetState::addMemoryBlock(unsigned long, unsigned char const*, unsigned long)>
   134b8:	e28dd090 	add	sp, sp, #144	; 0x90
   134bc:	e8bd8070 	pop	{r4, r5, r6, pc}
   134c0:	e28d0008 	add	r0, sp, #8
   134c4:	e3a02010 	mov	r2, #16
   134c8:	e3a01000 	mov	r1, #0
   134cc:	eb00675d 	bl	2d248 <strtol>
   134d0:	e6ff3070 	uxth	r3, r0
   134d4:	e1a06003 	mov	r6, r3
   134d8:	eaffffec 	b	13490 <McTRS80::fileHandler(char const*, unsigned char const*, int)+0xb4>
   134dc:	0002e604 	.word	0x0002e604
   134e0:	00030360 	.word	0x00030360
   134e4:	0002f374 	.word	0x0002f374
   134e8:	00042110 	.word	0x00042110
   134ec:	0002f37c 	.word	0x0002f37c
   134f0:	0001bd14 	.word	0x0001bd14
   134f4:	0001bbf8 	.word	0x0001bbf8
   134f8:	0002f2cc 	.word	0x0002f2cc
   134fc:	0002f2d8 	.word	0x0002f2d8

00013500 <McTRS80::getDescriptorTable(int)>:
   13500:	e59f0000 	ldr	r0, [pc]	; 13508 <McTRS80::getDescriptorTable(int)+0x8>
   13504:	e12fff1e 	bx	lr
   13508:	00042110 	.word	0x00042110

0001350c <McTerminal::getDescriptorTableCount()>:
   1350c:	e3a00002 	mov	r0, #2
   13510:	e12fff1e 	bx	lr

00013514 <McTerminal::busAccessCallback(unsigned long, unsigned long, unsigned long, unsigned long)>:
   13514:	e59d0000 	ldr	r0, [sp]
   13518:	e12fff1e 	bx	lr

0001351c <McTerminal::disable()>:
   1351c:	e59f300c 	ldr	r3, [pc, #12]	; 13530 <McTerminal::disable()+0x14>
   13520:	e59f200c 	ldr	r2, [pc, #12]	; 13534 <McTerminal::disable()+0x18>
   13524:	e5930000 	ldr	r0, [r3]
   13528:	e3a01004 	mov	r1, #4
   1352c:	eaffd8a0 	b	97b4 <LogWrite>
   13530:	00042154 	.word	0x00042154
   13534:	0002f2c0 	.word	0x0002f2c0

00013538 <McTerminal::fileHandler(char const*, unsigned char const*, int)>:
   13538:	e92d4070 	push	{r4, r5, r6, lr}
   1353c:	e24dd090 	sub	sp, sp, #144	; 0x90
   13540:	e1a06002 	mov	r6, r2
   13544:	e1a04003 	mov	r4, r3
   13548:	e28d2028 	add	r2, sp, #40	; 0x28
   1354c:	e3a03064 	mov	r3, #100	; 0x64
   13550:	e59f007c 	ldr	r0, [pc, #124]	; 135d4 <McTerminal::fileHandler(char const*, unsigned char const*, int)+0x9c>
   13554:	e1a05001 	mov	r5, r1
   13558:	ebffdf6e 	bl	b318 <jsonGetValueForKey>
   1355c:	e3500000 	cmp	r0, #0
   13560:	1a000001 	bne	1356c <McTerminal::fileHandler(char const*, unsigned char const*, int)+0x34>
   13564:	e28dd090 	add	sp, sp, #144	; 0x90
   13568:	e8bd8070 	pop	{r4, r5, r6, pc}
   1356c:	e1a01005 	mov	r1, r5
   13570:	e3a0301e 	mov	r3, #30
   13574:	e28d2008 	add	r2, sp, #8
   13578:	e59f0058 	ldr	r0, [pc, #88]	; 135d8 <McTerminal::fileHandler(char const*, unsigned char const*, int)+0xa0>
   1357c:	ebffdf65 	bl	b318 <jsonGetValueForKey>
   13580:	e2505000 	subs	r5, r0, #0
   13584:	01a03005 	moveq	r3, r5
   13588:	0a000005 	beq	135a4 <McTerminal::fileHandler(char const*, unsigned char const*, int)+0x6c>
   1358c:	e28d0008 	add	r0, sp, #8
   13590:	e3a02010 	mov	r2, #16
   13594:	e3a01000 	mov	r1, #0
   13598:	eb00672a 	bl	2d248 <strtol>
   1359c:	e6ff3070 	uxth	r3, r0
   135a0:	e1a05003 	mov	r5, r3
   135a4:	e59f2030 	ldr	r2, [pc, #48]	; 135dc <McTerminal::fileHandler(char const*, unsigned char const*, int)+0xa4>
   135a8:	e58d4000 	str	r4, [sp]
   135ac:	e5920000 	ldr	r0, [r2]
   135b0:	e3a01004 	mov	r1, #4
   135b4:	e59f2024 	ldr	r2, [pc, #36]	; 135e0 <McTerminal::fileHandler(char const*, unsigned char const*, int)+0xa8>
   135b8:	ebffd87d 	bl	97b4 <LogWrite>
   135bc:	e1a02004 	mov	r2, r4
   135c0:	e1a01006 	mov	r1, r6
   135c4:	e1a00005 	mov	r0, r5
   135c8:	eb00218a 	bl	1bbf8 <TargetState::addMemoryBlock(unsigned long, unsigned char const*, unsigned long)>
   135cc:	e28dd090 	add	sp, sp, #144	; 0x90
   135d0:	e8bd8070 	pop	{r4, r5, r6, pc}
   135d4:	0002e604 	.word	0x0002e604
   135d8:	0002f2cc 	.word	0x0002f2cc
   135dc:	00042154 	.word	0x00042154
   135e0:	0002f2d8 	.word	0x0002f2d8

000135e4 <McTerminal::getDescriptorTable(int)>:
   135e4:	e92d4010 	push	{r4, lr}
   135e8:	e2514000 	subs	r4, r1, #0
   135ec:	ba00000a 	blt	1361c <McTerminal::getDescriptorTable(int)+0x38>
   135f0:	e5903000 	ldr	r3, [r0]
   135f4:	e59f2044 	ldr	r2, [pc, #68]	; 13640 <McTerminal::getDescriptorTable(int)+0x5c>
   135f8:	e5933008 	ldr	r3, [r3, #8]
   135fc:	e1530002 	cmp	r3, r2
   13600:	03a00002 	moveq	r0, #2
   13604:	1a000009 	bne	13630 <McTerminal::getDescriptorTable(int)+0x4c>
   13608:	e1500004 	cmp	r0, r4
   1360c:	da000002 	ble	1361c <McTerminal::getDescriptorTable(int)+0x38>
   13610:	e59f002c 	ldr	r0, [pc, #44]	; 13644 <McTerminal::getDescriptorTable(int)+0x60>
   13614:	e0800304 	add	r0, r0, r4, lsl #6
   13618:	e8bd8010 	pop	{r4, pc}
   1361c:	e59f3024 	ldr	r3, [pc, #36]	; 13648 <McTerminal::getDescriptorTable(int)+0x64>
   13620:	e59f001c 	ldr	r0, [pc, #28]	; 13644 <McTerminal::getDescriptorTable(int)+0x60>
   13624:	e5931000 	ldr	r1, [r3]
   13628:	e0800301 	add	r0, r0, r1, lsl #6
   1362c:	e8bd8010 	pop	{r4, pc}
   13630:	e12fff33 	blx	r3
   13634:	e1500004 	cmp	r0, r4
   13638:	cafffff4 	bgt	13610 <McTerminal::getDescriptorTable(int)+0x2c>
   1363c:	eafffff6 	b	1361c <McTerminal::getDescriptorTable(int)+0x38>
   13640:	0001350c 	.word	0x0001350c
   13644:	00042158 	.word	0x00042158
   13648:	00046a18 	.word	0x00046a18

0001364c <McTerminal::enable(int)>:
   1364c:	e92d4030 	push	{r4, r5, lr}
   13650:	e59f5080 	ldr	r5, [pc, #128]	; 136d8 <McTerminal::enable(int)+0x8c>
   13654:	e3510000 	cmp	r1, #0
   13658:	e24dd00c 	sub	sp, sp, #12
   1365c:	e5851000 	str	r1, [r5]
   13660:	e1a04000 	mov	r4, r0
   13664:	ba000007 	blt	13688 <McTerminal::enable(int)+0x3c>
   13668:	e5903000 	ldr	r3, [r0]
   1366c:	e59f2068 	ldr	r2, [pc, #104]	; 136dc <McTerminal::enable(int)+0x90>
   13670:	e5933008 	ldr	r3, [r3, #8]
   13674:	e1530002 	cmp	r3, r2
   13678:	03a00002 	moveq	r0, #2
   1367c:	1a00000f 	bne	136c0 <McTerminal::enable(int)+0x74>
   13680:	e1500001 	cmp	r0, r1
   13684:	ca000001 	bgt	13690 <McTerminal::enable(int)+0x44>
   13688:	e3a03000 	mov	r3, #0
   1368c:	e5853000 	str	r3, [r5]
   13690:	e3a03000 	mov	r3, #0
   13694:	e59f2044 	ldr	r2, [pc, #68]	; 136e0 <McTerminal::enable(int)+0x94>
   13698:	e2844a02 	add	r4, r4, #8192	; 0x2000
   1369c:	e0821301 	add	r1, r2, r1, lsl #6
   136a0:	e5c43eec 	strb	r3, [r4, #3820]	; 0xeec
   136a4:	e5913004 	ldr	r3, [r1, #4]
   136a8:	e3a01004 	mov	r1, #4
   136ac:	e5920000 	ldr	r0, [r2]
   136b0:	e59f202c 	ldr	r2, [pc, #44]	; 136e4 <McTerminal::enable(int)+0x98>
   136b4:	e28dd00c 	add	sp, sp, #12
   136b8:	e8bd4030 	pop	{r4, r5, lr}
   136bc:	eaffd83c 	b	97b4 <LogWrite>
   136c0:	e58d1004 	str	r1, [sp, #4]
   136c4:	e12fff33 	blx	r3
   136c8:	e59d1004 	ldr	r1, [sp, #4]
   136cc:	e1500001 	cmp	r0, r1
   136d0:	daffffec 	ble	13688 <McTerminal::enable(int)+0x3c>
   136d4:	eaffffed 	b	13690 <McTerminal::enable(int)+0x44>
   136d8:	00046a18 	.word	0x00046a18
   136dc:	0001350c 	.word	0x0001350c
   136e0:	00042154 	.word	0x00042154
   136e4:	0002f3d8 	.word	0x0002f3d8

000136e8 <McTerminal::keyHandler(unsigned char, unsigned char const*)>:
   136e8:	e5d23000 	ldrb	r3, [r2]
   136ec:	e3530001 	cmp	r3, #1
   136f0:	912fff1e 	bxls	lr
   136f4:	e2430004 	sub	r0, r3, #4
   136f8:	e3500019 	cmp	r0, #25
   136fc:	e2011022 	and	r1, r1, #34	; 0x22
   13700:	8a000004 	bhi	13718 <McTerminal::keyHandler(unsigned char, unsigned char const*)+0x30>
   13704:	e3510000 	cmp	r1, #0
   13708:	13a03041 	movne	r3, #65	; 0x41
   1370c:	03a03061 	moveq	r3, #97	; 0x61
   13710:	e0800003 	add	r0, r0, r3
   13714:	eafffb42 	b	12424 <McManager::sendKeyCodeToTarget(int)>
   13718:	e243201e 	sub	r2, r3, #30
   1371c:	e3520008 	cmp	r2, #8
   13720:	8a000008 	bhi	13748 <McTerminal::keyHandler(unsigned char, unsigned char const*)+0x60>
   13724:	e3510000 	cmp	r1, #0
   13728:	02830013 	addeq	r0, r3, #19
   1372c:	0afffff8 	beq	13714 <McTerminal::keyHandler(unsigned char, unsigned char const*)+0x2c>
   13730:	e59f315c 	ldr	r3, [pc, #348]	; 13894 <McTerminal::keyHandler(unsigned char, unsigned char const*)+0x1ac>
   13734:	e0832102 	add	r2, r3, r2, lsl #2
   13738:	e5920084 	ldr	r0, [r2, #132]	; 0x84
   1373c:	e3500000 	cmp	r0, #0
   13740:	012fff1e 	bxeq	lr
   13744:	eafffff2 	b	13714 <McTerminal::keyHandler(unsigned char, unsigned char const*)+0x2c>
   13748:	e3530027 	cmp	r3, #39	; 0x27
   1374c:	0a00001f 	beq	137d0 <McTerminal::keyHandler(unsigned char, unsigned char const*)+0xe8>
   13750:	e3530033 	cmp	r3, #51	; 0x33
   13754:	0a000028 	beq	137fc <McTerminal::keyHandler(unsigned char, unsigned char const*)+0x114>
   13758:	e3530034 	cmp	r3, #52	; 0x34
   1375c:	0a000020 	beq	137e4 <McTerminal::keyHandler(unsigned char, unsigned char const*)+0xfc>
   13760:	e3530036 	cmp	r3, #54	; 0x36
   13764:	0a000028 	beq	1380c <McTerminal::keyHandler(unsigned char, unsigned char const*)+0x124>
   13768:	e3530037 	cmp	r3, #55	; 0x37
   1376c:	0a00002a 	beq	1381c <McTerminal::keyHandler(unsigned char, unsigned char const*)+0x134>
   13770:	e353002e 	cmp	r3, #46	; 0x2e
   13774:	0a00002c 	beq	1382c <McTerminal::keyHandler(unsigned char, unsigned char const*)+0x144>
   13778:	e353002d 	cmp	r3, #45	; 0x2d
   1377c:	0a00002e 	beq	1383c <McTerminal::keyHandler(unsigned char, unsigned char const*)+0x154>
   13780:	e3530038 	cmp	r3, #56	; 0x38
   13784:	0a000030 	beq	1384c <McTerminal::keyHandler(unsigned char, unsigned char const*)+0x164>
   13788:	e3530028 	cmp	r3, #40	; 0x28
   1378c:	0a000032 	beq	1385c <McTerminal::keyHandler(unsigned char, unsigned char const*)+0x174>
   13790:	e353002a 	cmp	r3, #42	; 0x2a
   13794:	0a000032 	beq	13864 <McTerminal::keyHandler(unsigned char, unsigned char const*)+0x17c>
   13798:	e3530029 	cmp	r3, #41	; 0x29
   1379c:	0a000032 	beq	1386c <McTerminal::keyHandler(unsigned char, unsigned char const*)+0x184>
   137a0:	e3530052 	cmp	r3, #82	; 0x52
   137a4:	0a000032 	beq	13874 <McTerminal::keyHandler(unsigned char, unsigned char const*)+0x18c>
   137a8:	e3530051 	cmp	r3, #81	; 0x51
   137ac:	0a000032 	beq	1387c <McTerminal::keyHandler(unsigned char, unsigned char const*)+0x194>
   137b0:	e3530050 	cmp	r3, #80	; 0x50
   137b4:	0a000032 	beq	13884 <McTerminal::keyHandler(unsigned char, unsigned char const*)+0x19c>
   137b8:	e353004f 	cmp	r3, #79	; 0x4f
   137bc:	0a000032 	beq	1388c <McTerminal::keyHandler(unsigned char, unsigned char const*)+0x1a4>
   137c0:	e353002c 	cmp	r3, #44	; 0x2c
   137c4:	112fff1e 	bxne	lr
   137c8:	e3a00020 	mov	r0, #32
   137cc:	eaffffd0 	b	13714 <McTerminal::keyHandler(unsigned char, unsigned char const*)+0x2c>
   137d0:	e3510000 	cmp	r1, #0
   137d4:	0a000006 	beq	137f4 <McTerminal::keyHandler(unsigned char, unsigned char const*)+0x10c>
   137d8:	e59f30b4 	ldr	r3, [pc, #180]	; 13894 <McTerminal::keyHandler(unsigned char, unsigned char const*)+0x1ac>
   137dc:	e59300a8 	ldr	r0, [r3, #168]	; 0xa8
   137e0:	eaffffd5 	b	1373c <McTerminal::keyHandler(unsigned char, unsigned char const*)+0x54>
   137e4:	e3510000 	cmp	r1, #0
   137e8:	03a00027 	moveq	r0, #39	; 0x27
   137ec:	13a00040 	movne	r0, #64	; 0x40
   137f0:	eaffffc7 	b	13714 <McTerminal::keyHandler(unsigned char, unsigned char const*)+0x2c>
   137f4:	e3a00030 	mov	r0, #48	; 0x30
   137f8:	eaffffc5 	b	13714 <McTerminal::keyHandler(unsigned char, unsigned char const*)+0x2c>
   137fc:	e3510000 	cmp	r1, #0
   13800:	03a0003b 	moveq	r0, #59	; 0x3b
   13804:	13a0003a 	movne	r0, #58	; 0x3a
   13808:	eaffffc1 	b	13714 <McTerminal::keyHandler(unsigned char, unsigned char const*)+0x2c>
   1380c:	e3510000 	cmp	r1, #0
   13810:	03a0002c 	moveq	r0, #44	; 0x2c
   13814:	13a0003c 	movne	r0, #60	; 0x3c
   13818:	eaffffbd 	b	13714 <McTerminal::keyHandler(unsigned char, unsigned char const*)+0x2c>
   1381c:	e3510000 	cmp	r1, #0
   13820:	03a0002e 	moveq	r0, #46	; 0x2e
   13824:	13a0003e 	movne	r0, #62	; 0x3e
   13828:	eaffffb9 	b	13714 <McTerminal::keyHandler(unsigned char, unsigned char const*)+0x2c>
   1382c:	e3510000 	cmp	r1, #0
   13830:	03a0003d 	moveq	r0, #61	; 0x3d
   13834:	13a0002b 	movne	r0, #43	; 0x2b
   13838:	eaffffb5 	b	13714 <McTerminal::keyHandler(unsigned char, unsigned char const*)+0x2c>
   1383c:	e3510000 	cmp	r1, #0
   13840:	01a00003 	moveq	r0, r3
   13844:	13a0005f 	movne	r0, #95	; 0x5f
   13848:	eaffffb1 	b	13714 <McTerminal::keyHandler(unsigned char, unsigned char const*)+0x2c>
   1384c:	e3510000 	cmp	r1, #0
   13850:	03a0002f 	moveq	r0, #47	; 0x2f
   13854:	13a0003f 	movne	r0, #63	; 0x3f
   13858:	eaffffad 	b	13714 <McTerminal::keyHandler(unsigned char, unsigned char const*)+0x2c>
   1385c:	e3a0000d 	mov	r0, #13
   13860:	eaffffab 	b	13714 <McTerminal::keyHandler(unsigned char, unsigned char const*)+0x2c>
   13864:	e3a00008 	mov	r0, #8
   13868:	eaffffa9 	b	13714 <McTerminal::keyHandler(unsigned char, unsigned char const*)+0x2c>
   1386c:	e3a0001d 	mov	r0, #29
   13870:	eaffffa7 	b	13714 <McTerminal::keyHandler(unsigned char, unsigned char const*)+0x2c>
   13874:	e3a00011 	mov	r0, #17
   13878:	eaffffa5 	b	13714 <McTerminal::keyHandler(unsigned char, unsigned char const*)+0x2c>
   1387c:	e3a00012 	mov	r0, #18
   13880:	eaffffa3 	b	13714 <McTerminal::keyHandler(unsigned char, unsigned char const*)+0x2c>
   13884:	e3a00013 	mov	r0, #19
   13888:	eaffffa1 	b	13714 <McTerminal::keyHandler(unsigned char, unsigned char const*)+0x2c>
   1388c:	e3a00014 	mov	r0, #20
   13890:	eaffff9f 	b	13714 <McTerminal::keyHandler(unsigned char, unsigned char const*)+0x2c>
   13894:	00042154 	.word	0x00042154

00013898 <McTerminal::McTerminal()>:
   13898:	e92d4070 	push	{r4, r5, r6, lr}
   1389c:	e1a04000 	mov	r4, r0
   138a0:	ebfff76c 	bl	11658 <McBase::McBase()>
   138a4:	e3a0301e 	mov	r3, #30
   138a8:	e3a02000 	mov	r2, #0
   138ac:	e3a0c001 	mov	ip, #1
   138b0:	e3a05050 	mov	r5, #80	; 0x50
   138b4:	e3a00f7d 	mov	r0, #500	; 0x1f4
   138b8:	e3a0105f 	mov	r1, #95	; 0x5f
   138bc:	e59fe044 	ldr	lr, [pc, #68]	; 13908 <McTerminal::McTerminal()+0x70>
   138c0:	e5843008 	str	r3, [r4, #8]
   138c4:	e2843a02 	add	r3, r4, #8192	; 0x2000
   138c8:	e5845004 	str	r5, [r4, #4]
   138cc:	e584e000 	str	lr, [r4]
   138d0:	e5830f00 	str	r0, [r3, #3840]	; 0xf00
   138d4:	e5c31f05 	strb	r1, [r3, #3845]	; 0xf05
   138d8:	e5c32eec 	strb	r2, [r3, #3820]	; 0xeec
   138dc:	e5832ef4 	str	r2, [r3, #3828]	; 0xef4
   138e0:	e5832ef0 	str	r2, [r3, #3824]	; 0xef0
   138e4:	e5832efc 	str	r2, [r3, #3836]	; 0xefc
   138e8:	e5c32f04 	strb	r2, [r3, #3844]	; 0xf04
   138ec:	e5c3cef8 	strb	ip, [r3, #3832]	; 0xef8
   138f0:	e284000c 	add	r0, r4, #12
   138f4:	e3a02e96 	mov	r2, #2400	; 0x960
   138f8:	e3a01020 	mov	r1, #32
   138fc:	eb006180 	bl	2bf04 <memset>
   13900:	e1a00004 	mov	r0, r4
   13904:	e8bd8070 	pop	{r4, r5, r6, pc}
   13908:	0002f3b0 	.word	0x0002f3b0

0001390c <McTerminal::convertRawToAscii(unsigned char, unsigned char const*)>:
   1390c:	e5d12000 	ldrb	r2, [r1]
   13910:	e3520001 	cmp	r2, #1
   13914:	9a00002d 	bls	139d0 <McTerminal::convertRawToAscii(unsigned char, unsigned char const*)+0xc4>
   13918:	e2423004 	sub	r3, r2, #4
   1391c:	e3530019 	cmp	r3, #25
   13920:	e2000022 	and	r0, r0, #34	; 0x22
   13924:	8a000004 	bhi	1393c <McTerminal::convertRawToAscii(unsigned char, unsigned char const*)+0x30>
   13928:	e3500000 	cmp	r0, #0
   1392c:	13a00041 	movne	r0, #65	; 0x41
   13930:	03a00061 	moveq	r0, #97	; 0x61
   13934:	e0830000 	add	r0, r3, r0
   13938:	e12fff1e 	bx	lr
   1393c:	e242301e 	sub	r3, r2, #30
   13940:	e3530008 	cmp	r3, #8
   13944:	9a000023 	bls	139d8 <McTerminal::convertRawToAscii(unsigned char, unsigned char const*)+0xcc>
   13948:	e3520027 	cmp	r2, #39	; 0x27
   1394c:	0a000027 	beq	139f0 <McTerminal::convertRawToAscii(unsigned char, unsigned char const*)+0xe4>
   13950:	e3520033 	cmp	r2, #51	; 0x33
   13954:	0a000030 	beq	13a1c <McTerminal::convertRawToAscii(unsigned char, unsigned char const*)+0x110>
   13958:	e3520034 	cmp	r2, #52	; 0x34
   1395c:	0a000028 	beq	13a04 <McTerminal::convertRawToAscii(unsigned char, unsigned char const*)+0xf8>
   13960:	e3520036 	cmp	r2, #54	; 0x36
   13964:	0a000030 	beq	13a2c <McTerminal::convertRawToAscii(unsigned char, unsigned char const*)+0x120>
   13968:	e3520037 	cmp	r2, #55	; 0x37
   1396c:	0a000032 	beq	13a3c <McTerminal::convertRawToAscii(unsigned char, unsigned char const*)+0x130>
   13970:	e352002e 	cmp	r2, #46	; 0x2e
   13974:	0a000034 	beq	13a4c <McTerminal::convertRawToAscii(unsigned char, unsigned char const*)+0x140>
   13978:	e352002d 	cmp	r2, #45	; 0x2d
   1397c:	0a000036 	beq	13a5c <McTerminal::convertRawToAscii(unsigned char, unsigned char const*)+0x150>
   13980:	e3520038 	cmp	r2, #56	; 0x38
   13984:	0a000038 	beq	13a6c <McTerminal::convertRawToAscii(unsigned char, unsigned char const*)+0x160>
   13988:	e3520028 	cmp	r2, #40	; 0x28
   1398c:	0a00003a 	beq	13a7c <McTerminal::convertRawToAscii(unsigned char, unsigned char const*)+0x170>
   13990:	e352002a 	cmp	r2, #42	; 0x2a
   13994:	0a00003a 	beq	13a84 <McTerminal::convertRawToAscii(unsigned char, unsigned char const*)+0x178>
   13998:	e3520029 	cmp	r2, #41	; 0x29
   1399c:	0a00003a 	beq	13a8c <McTerminal::convertRawToAscii(unsigned char, unsigned char const*)+0x180>
   139a0:	e3520052 	cmp	r2, #82	; 0x52
   139a4:	0a00003a 	beq	13a94 <McTerminal::convertRawToAscii(unsigned char, unsigned char const*)+0x188>
   139a8:	e3520051 	cmp	r2, #81	; 0x51
   139ac:	0a00003a 	beq	13a9c <McTerminal::convertRawToAscii(unsigned char, unsigned char const*)+0x190>
   139b0:	e3520050 	cmp	r2, #80	; 0x50
   139b4:	0a00003a 	beq	13aa4 <McTerminal::convertRawToAscii(unsigned char, unsigned char const*)+0x198>
   139b8:	e352004f 	cmp	r2, #79	; 0x4f
   139bc:	0a00003a 	beq	13aac <McTerminal::convertRawToAscii(unsigned char, unsigned char const*)+0x1a0>
   139c0:	e352002c 	cmp	r2, #44	; 0x2c
   139c4:	13a00000 	movne	r0, #0
   139c8:	03a00020 	moveq	r0, #32
   139cc:	e12fff1e 	bx	lr
   139d0:	e3a00000 	mov	r0, #0
   139d4:	e12fff1e 	bx	lr
   139d8:	e3500000 	cmp	r0, #0
   139dc:	159f20d0 	ldrne	r2, [pc, #208]	; 13ab4 <McTerminal::convertRawToAscii(unsigned char, unsigned char const*)+0x1a8>
   139e0:	02820013 	addeq	r0, r2, #19
   139e4:	10823103 	addne	r3, r2, r3, lsl #2
   139e8:	15930084 	ldrne	r0, [r3, #132]	; 0x84
   139ec:	e12fff1e 	bx	lr
   139f0:	e3500000 	cmp	r0, #0
   139f4:	0a000006 	beq	13a14 <McTerminal::convertRawToAscii(unsigned char, unsigned char const*)+0x108>
   139f8:	e59f30b4 	ldr	r3, [pc, #180]	; 13ab4 <McTerminal::convertRawToAscii(unsigned char, unsigned char const*)+0x1a8>
   139fc:	e59300a8 	ldr	r0, [r3, #168]	; 0xa8
   13a00:	e12fff1e 	bx	lr
   13a04:	e3500000 	cmp	r0, #0
   13a08:	13a00040 	movne	r0, #64	; 0x40
   13a0c:	03a00027 	moveq	r0, #39	; 0x27
   13a10:	e12fff1e 	bx	lr
   13a14:	e3a00030 	mov	r0, #48	; 0x30
   13a18:	e12fff1e 	bx	lr
   13a1c:	e3500000 	cmp	r0, #0
   13a20:	13a0003a 	movne	r0, #58	; 0x3a
   13a24:	03a0003b 	moveq	r0, #59	; 0x3b
   13a28:	e12fff1e 	bx	lr
   13a2c:	e3500000 	cmp	r0, #0
   13a30:	13a0003c 	movne	r0, #60	; 0x3c
   13a34:	03a0002c 	moveq	r0, #44	; 0x2c
   13a38:	e12fff1e 	bx	lr
   13a3c:	e3500000 	cmp	r0, #0
   13a40:	13a0003e 	movne	r0, #62	; 0x3e
   13a44:	03a0002e 	moveq	r0, #46	; 0x2e
   13a48:	e12fff1e 	bx	lr
   13a4c:	e3500000 	cmp	r0, #0
   13a50:	13a0002b 	movne	r0, #43	; 0x2b
   13a54:	03a0003d 	moveq	r0, #61	; 0x3d
   13a58:	e12fff1e 	bx	lr
   13a5c:	e3500000 	cmp	r0, #0
   13a60:	01a00002 	moveq	r0, r2
   13a64:	13a0005f 	movne	r0, #95	; 0x5f
   13a68:	e12fff1e 	bx	lr
   13a6c:	e3500000 	cmp	r0, #0
   13a70:	13a0003f 	movne	r0, #63	; 0x3f
   13a74:	03a0002f 	moveq	r0, #47	; 0x2f
   13a78:	e12fff1e 	bx	lr
   13a7c:	e3a0000d 	mov	r0, #13
   13a80:	e12fff1e 	bx	lr
   13a84:	e3a00008 	mov	r0, #8
   13a88:	e12fff1e 	bx	lr
   13a8c:	e3a0001d 	mov	r0, #29
   13a90:	e12fff1e 	bx	lr
   13a94:	e3a00011 	mov	r0, #17
   13a98:	e12fff1e 	bx	lr
   13a9c:	e3a00012 	mov	r0, #18
   13aa0:	e12fff1e 	bx	lr
   13aa4:	e3a00013 	mov	r0, #19
   13aa8:	e12fff1e 	bx	lr
   13aac:	e3a00014 	mov	r0, #20
   13ab0:	e12fff1e 	bx	lr
   13ab4:	00042154 	.word	0x00042154

00013ab8 <McTerminal::clearScreen()>:
   13ab8:	e92d4010 	push	{r4, lr}
   13abc:	e1c020d4 	ldrd	r2, [r0, #4]
   13ac0:	e0020392 	mul	r2, r2, r3
   13ac4:	e3520000 	cmp	r2, #0
   13ac8:	e1a04000 	mov	r4, r0
   13acc:	da000002 	ble	13adc <McTerminal::clearScreen()+0x24>
   13ad0:	e3a01020 	mov	r1, #32
   13ad4:	e280000c 	add	r0, r0, #12
   13ad8:	eb006109 	bl	2bf04 <memset>
   13adc:	e3a03000 	mov	r3, #0
   13ae0:	e2844a02 	add	r4, r4, #8192	; 0x2000
   13ae4:	e5843ef0 	str	r3, [r4, #3824]	; 0xef0
   13ae8:	e5843ef4 	str	r3, [r4, #3828]	; 0xef4
   13aec:	e8bd8010 	pop	{r4, pc}

00013af0 <McTerminal::dispChar(unsigned char)>:
   13af0:	e2412008 	sub	r2, r1, #8
   13af4:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   13af8:	e1a04000 	mov	r4, r0
   13afc:	e3520005 	cmp	r2, #5
   13b00:	979ff102 	ldrls	pc, [pc, r2, lsl #2]
   13b04:	ea000049 	b	13c30 <McTerminal::dispChar(unsigned char)+0x140>
   13b08:	00013b88 	.word	0x00013b88
   13b0c:	00013b20 	.word	0x00013b20
   13b10:	00013bec 	.word	0x00013bec
   13b14:	00013c30 	.word	0x00013c30
   13b18:	00013bfc 	.word	0x00013bfc
   13b1c:	00013b24 	.word	0x00013b24
   13b20:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   13b24:	e2805a02 	add	r5, r0, #8192	; 0x2000
   13b28:	e5d53f04 	ldrb	r3, [r5, #3844]	; 0xf04
   13b2c:	e5952ef4 	ldr	r2, [r5, #3828]	; 0xef4
   13b30:	e3530000 	cmp	r3, #0
   13b34:	e5951ef0 	ldr	r1, [r5, #3824]	; 0xef0
   13b38:	e590c004 	ldr	ip, [r0, #4]
   13b3c:	1a000071 	bne	13d08 <McTerminal::dispChar(unsigned char)+0x218>
   13b40:	e3510000 	cmp	r1, #0
   13b44:	b3a03000 	movlt	r3, #0
   13b48:	b1a01003 	movlt	r1, r3
   13b4c:	b5853ef0 	strlt	r3, [r5, #3824]	; 0xef0
   13b50:	e2823001 	add	r3, r2, #1
   13b54:	e5853ef4 	str	r3, [r5, #3828]	; 0xef4
   13b58:	e15c0001 	cmp	ip, r1
   13b5c:	e5940008 	ldr	r0, [r4, #8]
   13b60:	ca00004c 	bgt	13c98 <McTerminal::dispChar(unsigned char)+0x1a8>
   13b64:	e3a01000 	mov	r1, #0
   13b68:	e2823002 	add	r3, r2, #2
   13b6c:	e1530000 	cmp	r3, r0
   13b70:	e5853ef4 	str	r3, [r5, #3828]	; 0xef4
   13b74:	e5851ef0 	str	r1, [r5, #3824]	; 0xef0
   13b78:	aa000048 	bge	13ca0 <McTerminal::dispChar(unsigned char)+0x1b0>
   13b7c:	e3530000 	cmp	r3, #0
   13b80:	a8bd81f0 	popge	{r4, r5, r6, r7, r8, pc}
   13b84:	ea000040 	b	13c8c <McTerminal::dispChar(unsigned char)+0x19c>
   13b88:	e2805a02 	add	r5, r0, #8192	; 0x2000
   13b8c:	e5d53f04 	ldrb	r3, [r5, #3844]	; 0xf04
   13b90:	e3530000 	cmp	r3, #0
   13b94:	1a000084 	bne	13dac <McTerminal::dispChar(unsigned char)+0x2bc>
   13b98:	e5953ef0 	ldr	r3, [r5, #3824]	; 0xef0
   13b9c:	e5950ef4 	ldr	r0, [r5, #3828]	; 0xef4
   13ba0:	e2433001 	sub	r3, r3, #1
   13ba4:	e1c33fc3 	bic	r3, r3, r3, asr #31
   13ba8:	e5853ef0 	str	r3, [r5, #3824]	; 0xef0
   13bac:	e5941004 	ldr	r1, [r4, #4]
   13bb0:	e1510003 	cmp	r1, r3
   13bb4:	d3a03000 	movle	r3, #0
   13bb8:	d2800001 	addle	r0, r0, #1
   13bbc:	d5850ef4 	strle	r0, [r5, #3828]	; 0xef4
   13bc0:	d5853ef0 	strle	r3, [r5, #3824]	; 0xef0
   13bc4:	e5942008 	ldr	r2, [r4, #8]
   13bc8:	e1520000 	cmp	r2, r0
   13bcc:	da00003f 	ble	13cd0 <McTerminal::dispChar(unsigned char)+0x1e0>
   13bd0:	e3500000 	cmp	r0, #0
   13bd4:	ba000048 	blt	13cfc <McTerminal::dispChar(unsigned char)+0x20c>
   13bd8:	e0233091 	mla	r3, r1, r0, r3
   13bdc:	e3a02020 	mov	r2, #32
   13be0:	e0844003 	add	r4, r4, r3
   13be4:	e5c4200c 	strb	r2, [r4, #12]
   13be8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   13bec:	e3a03000 	mov	r3, #0
   13bf0:	e2804a02 	add	r4, r0, #8192	; 0x2000
   13bf4:	e5843ef0 	str	r3, [r4, #3824]	; 0xef0
   13bf8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   13bfc:	e5903004 	ldr	r3, [r0, #4]
   13c00:	e5902008 	ldr	r2, [r0, #8]
   13c04:	e0020392 	mul	r2, r2, r3
   13c08:	e3520000 	cmp	r2, #0
   13c0c:	da000002 	ble	13c1c <McTerminal::dispChar(unsigned char)+0x12c>
   13c10:	e3a01020 	mov	r1, #32
   13c14:	e280000c 	add	r0, r0, #12
   13c18:	eb0060b9 	bl	2bf04 <memset>
   13c1c:	e3a03000 	mov	r3, #0
   13c20:	e2844a02 	add	r4, r4, #8192	; 0x2000
   13c24:	e5843ef0 	str	r3, [r4, #3824]	; 0xef0
   13c28:	e5843ef4 	str	r3, [r4, #3828]	; 0xef4
   13c2c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   13c30:	e2805a02 	add	r5, r0, #8192	; 0x2000
   13c34:	e5950ef0 	ldr	r0, [r5, #3824]	; 0xef0
   13c38:	e5952ef4 	ldr	r2, [r5, #3828]	; 0xef4
   13c3c:	e594c004 	ldr	ip, [r4, #4]
   13c40:	e0843000 	add	r3, r4, r0
   13c44:	e023329c 	mla	r3, ip, r2, r3
   13c48:	e5c3100c 	strb	r1, [r3, #12]
   13c4c:	e5d53f04 	ldrb	r3, [r5, #3844]	; 0xf04
   13c50:	e3530000 	cmp	r3, #0
   13c54:	1a00004c 	bne	13d8c <McTerminal::dispChar(unsigned char)+0x29c>
   13c58:	e2801001 	add	r1, r0, #1
   13c5c:	e1c11fc1 	bic	r1, r1, r1, asr #31
   13c60:	e15c0001 	cmp	ip, r1
   13c64:	c5851ef0 	strgt	r1, [r5, #3824]	; 0xef0
   13c68:	d3a03000 	movle	r3, #0
   13c6c:	d2822001 	addle	r2, r2, #1
   13c70:	d5852ef4 	strle	r2, [r5, #3828]	; 0xef4
   13c74:	d5853ef0 	strle	r3, [r5, #3824]	; 0xef0
   13c78:	e5943008 	ldr	r3, [r4, #8]
   13c7c:	e1530002 	cmp	r3, r2
   13c80:	da000029 	ble	13d2c <McTerminal::dispChar(unsigned char)+0x23c>
   13c84:	e3520000 	cmp	r2, #0
   13c88:	a8bd81f0 	popge	{r4, r5, r6, r7, r8, pc}
   13c8c:	e3a03000 	mov	r3, #0
   13c90:	e5853ef4 	str	r3, [r5, #3828]	; 0xef4
   13c94:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   13c98:	e1530000 	cmp	r3, r0
   13c9c:	baffffb6 	blt	13b7c <McTerminal::dispChar(unsigned char)+0x8c>
   13ca0:	e3500001 	cmp	r0, #1
   13ca4:	e0060c90 	mul	r6, r0, ip
   13ca8:	ca000048 	bgt	13dd0 <McTerminal::dispChar(unsigned char)+0x2e0>
   13cac:	e3560000 	cmp	r6, #0
   13cb0:	da000003 	ble	13cc4 <McTerminal::dispChar(unsigned char)+0x1d4>
   13cb4:	e1a02006 	mov	r2, r6
   13cb8:	e284000c 	add	r0, r4, #12
   13cbc:	e3a01020 	mov	r1, #32
   13cc0:	eb00608f 	bl	2bf04 <memset>
   13cc4:	e3a03000 	mov	r3, #0
   13cc8:	e5853ef0 	str	r3, [r5, #3824]	; 0xef0
   13ccc:	eaffffee 	b	13c8c <McTerminal::dispChar(unsigned char)+0x19c>
   13cd0:	e3520001 	cmp	r2, #1
   13cd4:	e0060192 	mul	r6, r2, r1
   13cd8:	ca000051 	bgt	13e24 <McTerminal::dispChar(unsigned char)+0x334>
   13cdc:	e3560000 	cmp	r6, #0
   13ce0:	da000003 	ble	13cf4 <McTerminal::dispChar(unsigned char)+0x204>
   13ce4:	e1a02006 	mov	r2, r6
   13ce8:	e3a01020 	mov	r1, #32
   13cec:	e284000c 	add	r0, r4, #12
   13cf0:	eb006083 	bl	2bf04 <memset>
   13cf4:	e3a03000 	mov	r3, #0
   13cf8:	e5853ef0 	str	r3, [r5, #3824]	; 0xef0
   13cfc:	e3a02000 	mov	r2, #0
   13d00:	e5852ef4 	str	r2, [r5, #3828]	; 0xef4
   13d04:	eaffffb4 	b	13bdc <McTerminal::dispChar(unsigned char)+0xec>
   13d08:	e0803001 	add	r3, r0, r1
   13d0c:	e02c3c92 	mla	ip, r2, ip, r3
   13d10:	e3a00000 	mov	r0, #0
   13d14:	e5dc300c 	ldrb	r3, [ip, #12]
   13d18:	ebffe1a0 	bl	c3a0 <wgfx_putc>
   13d1c:	e5951ef0 	ldr	r1, [r5, #3824]	; 0xef0
   13d20:	e5952ef4 	ldr	r2, [r5, #3828]	; 0xef4
   13d24:	e594c004 	ldr	ip, [r4, #4]
   13d28:	eaffff84 	b	13b40 <McTerminal::dispChar(unsigned char)+0x50>
   13d2c:	e3530001 	cmp	r3, #1
   13d30:	e0060c93 	mul	r6, r3, ip
   13d34:	daffffdc 	ble	13cac <McTerminal::dispChar(unsigned char)+0x1bc>
   13d38:	e046700c 	sub	r7, r6, ip
   13d3c:	e284000c 	add	r0, r4, #12
   13d40:	e1a02007 	mov	r2, r7
   13d44:	e080100c 	add	r1, r0, ip
   13d48:	eb006029 	bl	2bdf4 <memcpy>
   13d4c:	e1570006 	cmp	r7, r6
   13d50:	aa000004 	bge	13d68 <McTerminal::dispChar(unsigned char)+0x278>
   13d54:	e287000c 	add	r0, r7, #12
   13d58:	e0462007 	sub	r2, r6, r7
   13d5c:	e0840000 	add	r0, r4, r0
   13d60:	e3a01020 	mov	r1, #32
   13d64:	eb006066 	bl	2bf04 <memset>
   13d68:	e3a03000 	mov	r3, #0
   13d6c:	e5952ef4 	ldr	r2, [r5, #3828]	; 0xef4
   13d70:	e5951ef0 	ldr	r1, [r5, #3824]	; 0xef0
   13d74:	e2422001 	sub	r2, r2, #1
   13d78:	e1510003 	cmp	r1, r3
   13d7c:	e5852ef4 	str	r2, [r5, #3828]	; 0xef4
   13d80:	e5c53eec 	strb	r3, [r5, #3820]	; 0xeec
   13d84:	b5853ef0 	strlt	r3, [r5, #3824]	; 0xef0
   13d88:	eaffffbd 	b	13c84 <McTerminal::dispChar(unsigned char)+0x194>
   13d8c:	e1a03001 	mov	r3, r1
   13d90:	e1a01000 	mov	r1, r0
   13d94:	e3a00000 	mov	r0, #0
   13d98:	ebffe180 	bl	c3a0 <wgfx_putc>
   13d9c:	e5950ef0 	ldr	r0, [r5, #3824]	; 0xef0
   13da0:	e5952ef4 	ldr	r2, [r5, #3828]	; 0xef4
   13da4:	e594c004 	ldr	ip, [r4, #4]
   13da8:	eaffffaa 	b	13c58 <McTerminal::dispChar(unsigned char)+0x168>
   13dac:	e5951ef0 	ldr	r1, [r5, #3824]	; 0xef0
   13db0:	e5952ef4 	ldr	r2, [r5, #3828]	; 0xef4
   13db4:	e5903004 	ldr	r3, [r0, #4]
   13db8:	e0800001 	add	r0, r0, r1
   13dbc:	e0230293 	mla	r3, r3, r2, r0
   13dc0:	e3a00000 	mov	r0, #0
   13dc4:	e5d3300c 	ldrb	r3, [r3, #12]
   13dc8:	ebffe174 	bl	c3a0 <wgfx_putc>
   13dcc:	eaffff71 	b	13b98 <McTerminal::dispChar(unsigned char)+0xa8>
   13dd0:	e046700c 	sub	r7, r6, ip
   13dd4:	e284000c 	add	r0, r4, #12
   13dd8:	e1a02007 	mov	r2, r7
   13ddc:	e080100c 	add	r1, r0, ip
   13de0:	eb006003 	bl	2bdf4 <memcpy>
   13de4:	e1570006 	cmp	r7, r6
   13de8:	aa000004 	bge	13e00 <McTerminal::dispChar(unsigned char)+0x310>
   13dec:	e287000c 	add	r0, r7, #12
   13df0:	e0462007 	sub	r2, r6, r7
   13df4:	e0840000 	add	r0, r4, r0
   13df8:	e3a01020 	mov	r1, #32
   13dfc:	eb006040 	bl	2bf04 <memset>
   13e00:	e3a02000 	mov	r2, #0
   13e04:	e5953ef4 	ldr	r3, [r5, #3828]	; 0xef4
   13e08:	e5951ef0 	ldr	r1, [r5, #3824]	; 0xef0
   13e0c:	e2433001 	sub	r3, r3, #1
   13e10:	e1510002 	cmp	r1, r2
   13e14:	e5853ef4 	str	r3, [r5, #3828]	; 0xef4
   13e18:	e5c52eec 	strb	r2, [r5, #3820]	; 0xeec
   13e1c:	b5852ef0 	strlt	r2, [r5, #3824]	; 0xef0
   13e20:	eaffff55 	b	13b7c <McTerminal::dispChar(unsigned char)+0x8c>
   13e24:	e0467001 	sub	r7, r6, r1
   13e28:	e284000c 	add	r0, r4, #12
   13e2c:	e1a02007 	mov	r2, r7
   13e30:	e0801001 	add	r1, r0, r1
   13e34:	eb005fee 	bl	2bdf4 <memcpy>
   13e38:	e1560007 	cmp	r6, r7
   13e3c:	da000004 	ble	13e54 <McTerminal::dispChar(unsigned char)+0x364>
   13e40:	e287000c 	add	r0, r7, #12
   13e44:	e0462007 	sub	r2, r6, r7
   13e48:	e0840000 	add	r0, r4, r0
   13e4c:	e3a01020 	mov	r1, #32
   13e50:	eb00602b 	bl	2bf04 <memset>
   13e54:	e3a02000 	mov	r2, #0
   13e58:	e5953ef0 	ldr	r3, [r5, #3824]	; 0xef0
   13e5c:	e5950ef4 	ldr	r0, [r5, #3828]	; 0xef4
   13e60:	e1530002 	cmp	r3, r2
   13e64:	e2400001 	sub	r0, r0, #1
   13e68:	e5850ef4 	str	r0, [r5, #3828]	; 0xef4
   13e6c:	e5c52eec 	strb	r2, [r5, #3820]	; 0xeec
   13e70:	b5852ef0 	strlt	r2, [r5, #3824]	; 0xef0
   13e74:	b1a03002 	movlt	r3, r2
   13e78:	e5941004 	ldr	r1, [r4, #4]
   13e7c:	eaffff53 	b	13bd0 <McTerminal::dispChar(unsigned char)+0xe0>

00013e80 <McTerminal::displayRefresh()>:
   13e80:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   13e84:	e24dd008 	sub	sp, sp, #8
   13e88:	e1a06000 	mov	r6, r0
   13e8c:	ebfff94d 	bl	123c8 <McManager::getNumCharsReceivedFromHost()>
   13e90:	e2504000 	subs	r4, r0, #0
   13e94:	1a000022 	bne	13f24 <McTerminal::displayRefresh()+0xa4>
   13e98:	e2868a02 	add	r8, r6, #8192	; 0x2000
   13e9c:	e3a02001 	mov	r2, #1
   13ea0:	e5d83ef8 	ldrb	r3, [r8, #3832]	; 0xef8
   13ea4:	e5c82eec 	strb	r2, [r8, #3820]	; 0xeec
   13ea8:	e3530000 	cmp	r3, #0
   13eac:	1a000001 	bne	13eb8 <McTerminal::displayRefresh()+0x38>
   13eb0:	e28dd008 	add	sp, sp, #8
   13eb4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   13eb8:	eb000b97 	bl	16d1c <micros>
   13ebc:	e5982f00 	ldr	r2, [r8, #3840]	; 0xf00
   13ec0:	e5981efc 	ldr	r1, [r8, #3836]	; 0xefc
   13ec4:	e0623282 	rsb	r3, r2, r2, lsl #5
   13ec8:	e0822103 	add	r2, r2, r3, lsl #2
   13ecc:	e1a02182 	lsl	r2, r2, #3
   13ed0:	eb000ba6 	bl	16d70 <isTimeout>
   13ed4:	e3500000 	cmp	r0, #0
   13ed8:	0afffff4 	beq	13eb0 <McTerminal::displayRefresh()+0x30>
   13edc:	e5d80f04 	ldrb	r0, [r8, #3844]	; 0xf04
   13ee0:	e5981ef0 	ldr	r1, [r8, #3824]	; 0xef0
   13ee4:	e3500000 	cmp	r0, #0
   13ee8:	15963004 	ldrne	r3, [r6, #4]
   13eec:	e5982ef4 	ldr	r2, [r8, #3828]	; 0xef4
   13ef0:	10866001 	addne	r6, r6, r1
   13ef4:	10266293 	mlane	r6, r3, r2, r6
   13ef8:	05d83f05 	ldrbeq	r3, [r8, #3845]	; 0xf05
   13efc:	15d6300c 	ldrbne	r3, [r6, #12]
   13f00:	13a00000 	movne	r0, #0
   13f04:	ebffe125 	bl	c3a0 <wgfx_putc>
   13f08:	e5d83f04 	ldrb	r3, [r8, #3844]	; 0xf04
   13f0c:	e2233001 	eor	r3, r3, #1
   13f10:	e5c83f04 	strb	r3, [r8, #3844]	; 0xf04
   13f14:	eb000b80 	bl	16d1c <micros>
   13f18:	e5880efc 	str	r0, [r8, #3836]	; 0xefc
   13f1c:	e28dd008 	add	sp, sp, #8
   13f20:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   13f24:	e2840001 	add	r0, r4, #1
   13f28:	ebffdbc4 	bl	ae40 <nmalloc_malloc>
   13f2c:	e3500000 	cmp	r0, #0
   13f30:	e58d0004 	str	r0, [sp, #4]
   13f34:	0affffd7 	beq	13e98 <McTerminal::displayRefresh()+0x18>
   13f38:	e1a01004 	mov	r1, r4
   13f3c:	ebfff925 	bl	123d8 <McManager::getCharsReceivedFromHost(unsigned char*, int)>
   13f40:	e2505000 	subs	r5, r0, #0
   13f44:	da000007 	ble	13f68 <McTerminal::displayRefresh()+0xe8>
   13f48:	e3a04000 	mov	r4, #0
   13f4c:	e59d3004 	ldr	r3, [sp, #4]
   13f50:	e1a00006 	mov	r0, r6
   13f54:	e7d31004 	ldrb	r1, [r3, r4]
   13f58:	e2844001 	add	r4, r4, #1
   13f5c:	ebfffee3 	bl	13af0 <McTerminal::dispChar(unsigned char)>
   13f60:	e1550004 	cmp	r5, r4
   13f64:	1afffff8 	bne	13f4c <McTerminal::displayRefresh()+0xcc>
   13f68:	e28d0004 	add	r0, sp, #4
   13f6c:	ebffdbf0 	bl	af34 <nmalloc_free>
   13f70:	e5963008 	ldr	r3, [r6, #8]
   13f74:	e3530000 	cmp	r3, #0
   13f78:	daffffc6 	ble	13e98 <McTerminal::displayRefresh()+0x18>
   13f7c:	e3a07000 	mov	r7, #0
   13f80:	e5962004 	ldr	r2, [r6, #4]
   13f84:	e2868a02 	add	r8, r6, #8192	; 0x2000
   13f88:	e3520000 	cmp	r2, #0
   13f8c:	da000016 	ble	13fec <McTerminal::displayRefresh()+0x16c>
   13f90:	e3a05000 	mov	r5, #0
   13f94:	e0245297 	mla	r4, r7, r2, r5
   13f98:	e5d83eec 	ldrb	r3, [r8, #3820]	; 0xeec
   13f9c:	e0864004 	add	r4, r6, r4
   13fa0:	e3530000 	cmp	r3, #0
   13fa4:	e2841d5d 	add	r1, r4, #5952	; 0x1740
   13fa8:	e5d4300c 	ldrb	r3, [r4, #12]
   13fac:	0a000002 	beq	13fbc <McTerminal::displayRefresh()+0x13c>
   13fb0:	e5d1103c 	ldrb	r1, [r1, #60]	; 0x3c
   13fb4:	e1510003 	cmp	r1, r3
   13fb8:	0a000007 	beq	13fdc <McTerminal::displayRefresh()+0x15c>
   13fbc:	e1a02007 	mov	r2, r7
   13fc0:	e1a01005 	mov	r1, r5
   13fc4:	e3a00000 	mov	r0, #0
   13fc8:	ebffe0f4 	bl	c3a0 <wgfx_putc>
   13fcc:	e5d4300c 	ldrb	r3, [r4, #12]
   13fd0:	e2844d5d 	add	r4, r4, #5952	; 0x1740
   13fd4:	e5c4303c 	strb	r3, [r4, #60]	; 0x3c
   13fd8:	e5962004 	ldr	r2, [r6, #4]
   13fdc:	e2855001 	add	r5, r5, #1
   13fe0:	e1550002 	cmp	r5, r2
   13fe4:	baffffea 	blt	13f94 <McTerminal::displayRefresh()+0x114>
   13fe8:	e5963008 	ldr	r3, [r6, #8]
   13fec:	e2877001 	add	r7, r7, #1
   13ff0:	e1570003 	cmp	r7, r3
   13ff4:	baffffe3 	blt	13f88 <McTerminal::displayRefresh()+0x108>
   13ff8:	eaffffa7 	b	13e9c <McTerminal::displayRefresh()+0x1c>

00013ffc <McTerminal::vscrollBuffer(int)>:
   13ffc:	e92d4070 	push	{r4, r5, r6, lr}
   14000:	e5903008 	ldr	r3, [r0, #8]
   14004:	e590c004 	ldr	ip, [r0, #4]
   14008:	e1530001 	cmp	r3, r1
   1400c:	e1a04000 	mov	r4, r0
   14010:	e006039c 	mul	r6, ip, r3
   14014:	ca00000a 	bgt	14044 <McTerminal::vscrollBuffer(int)+0x48>
   14018:	e3560000 	cmp	r6, #0
   1401c:	da000003 	ble	14030 <McTerminal::vscrollBuffer(int)+0x34>
   14020:	e1a02006 	mov	r2, r6
   14024:	e3a01020 	mov	r1, #32
   14028:	e280000c 	add	r0, r0, #12
   1402c:	eb005fb4 	bl	2bf04 <memset>
   14030:	e3a03000 	mov	r3, #0
   14034:	e2844a02 	add	r4, r4, #8192	; 0x2000
   14038:	e5843ef0 	str	r3, [r4, #3824]	; 0xef0
   1403c:	e5843ef4 	str	r3, [r4, #3828]	; 0xef4
   14040:	e8bd8070 	pop	{r4, r5, r6, pc}
   14044:	e0433001 	sub	r3, r3, r1
   14048:	e005039c 	mul	r5, ip, r3
   1404c:	e280000c 	add	r0, r0, #12
   14050:	e1a02005 	mov	r2, r5
   14054:	e021019c 	mla	r1, ip, r1, r0
   14058:	eb005f65 	bl	2bdf4 <memcpy>
   1405c:	e1550006 	cmp	r5, r6
   14060:	aa000004 	bge	14078 <McTerminal::vscrollBuffer(int)+0x7c>
   14064:	e285000c 	add	r0, r5, #12
   14068:	e0462005 	sub	r2, r6, r5
   1406c:	e0840000 	add	r0, r4, r0
   14070:	e3a01020 	mov	r1, #32
   14074:	eb005fa2 	bl	2bf04 <memset>
   14078:	e3a03000 	mov	r3, #0
   1407c:	e2844a02 	add	r4, r4, #8192	; 0x2000
   14080:	e5c43eec 	strb	r3, [r4, #3820]	; 0xeec
   14084:	e8bd8070 	pop	{r4, r5, r6, pc}

00014088 <McTerminal::moveAndCheckCurPos(int, int, int, int)>:
   14088:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1408c:	e1a07000 	mov	r7, r0
   14090:	e2805a02 	add	r5, r0, #8192	; 0x2000
   14094:	e5d50f04 	ldrb	r0, [r5, #3844]	; 0xf04
   14098:	e1a04001 	mov	r4, r1
   1409c:	e3500000 	cmp	r0, #0
   140a0:	e1a08002 	mov	r8, r2
   140a4:	e1a09003 	mov	r9, r3
   140a8:	e597c004 	ldr	ip, [r7, #4]
   140ac:	e59d6020 	ldr	r6, [sp, #32]
   140b0:	1a000022 	bne	14140 <McTerminal::moveAndCheckCurPos(int, int, int, int)+0xb8>
   140b4:	e3540000 	cmp	r4, #0
   140b8:	b5954ef0 	ldrlt	r4, [r5, #3824]	; 0xef0
   140bc:	a5854ef0 	strge	r4, [r5, #3824]	; 0xef0
   140c0:	e3580000 	cmp	r8, #0
   140c4:	b5958ef4 	ldrlt	r8, [r5, #3828]	; 0xef4
   140c8:	e0843009 	add	r3, r4, r9
   140cc:	e1c33fc3 	bic	r3, r3, r3, asr #31
   140d0:	e0862008 	add	r2, r6, r8
   140d4:	e153000c 	cmp	r3, ip
   140d8:	e5853ef0 	str	r3, [r5, #3824]	; 0xef0
   140dc:	e5852ef4 	str	r2, [r5, #3828]	; 0xef4
   140e0:	a3a03000 	movge	r3, #0
   140e4:	a2822001 	addge	r2, r2, #1
   140e8:	a5852ef4 	strge	r2, [r5, #3828]	; 0xef4
   140ec:	a5853ef0 	strge	r3, [r5, #3824]	; 0xef0
   140f0:	e5973008 	ldr	r3, [r7, #8]
   140f4:	e1530002 	cmp	r3, r2
   140f8:	da000004 	ble	14110 <McTerminal::moveAndCheckCurPos(int, int, int, int)+0x88>
   140fc:	e3520000 	cmp	r2, #0
   14100:	a8bd87f0 	popge	{r4, r5, r6, r7, r8, r9, sl, pc}
   14104:	e3a03000 	mov	r3, #0
   14108:	e5853ef4 	str	r3, [r5, #3828]	; 0xef4
   1410c:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   14110:	e3530001 	cmp	r3, #1
   14114:	e004039c 	mul	r4, ip, r3
   14118:	ca000011 	bgt	14164 <McTerminal::moveAndCheckCurPos(int, int, int, int)+0xdc>
   1411c:	e3540000 	cmp	r4, #0
   14120:	da000003 	ble	14134 <McTerminal::moveAndCheckCurPos(int, int, int, int)+0xac>
   14124:	e1a02004 	mov	r2, r4
   14128:	e287000c 	add	r0, r7, #12
   1412c:	e3a01020 	mov	r1, #32
   14130:	eb005f73 	bl	2bf04 <memset>
   14134:	e3a03000 	mov	r3, #0
   14138:	e5853ef0 	str	r3, [r5, #3824]	; 0xef0
   1413c:	eafffff0 	b	14104 <McTerminal::moveAndCheckCurPos(int, int, int, int)+0x7c>
   14140:	e5951ef0 	ldr	r1, [r5, #3824]	; 0xef0
   14144:	e5952ef4 	ldr	r2, [r5, #3828]	; 0xef4
   14148:	e0873001 	add	r3, r7, r1
   1414c:	e02c329c 	mla	ip, ip, r2, r3
   14150:	e3a00000 	mov	r0, #0
   14154:	e5dc300c 	ldrb	r3, [ip, #12]
   14158:	ebffe090 	bl	c3a0 <wgfx_putc>
   1415c:	e597c004 	ldr	ip, [r7, #4]
   14160:	eaffffd3 	b	140b4 <McTerminal::moveAndCheckCurPos(int, int, int, int)+0x2c>
   14164:	e044600c 	sub	r6, r4, ip
   14168:	e287000c 	add	r0, r7, #12
   1416c:	e1a02006 	mov	r2, r6
   14170:	e080100c 	add	r1, r0, ip
   14174:	eb005f1e 	bl	2bdf4 <memcpy>
   14178:	e1560004 	cmp	r6, r4
   1417c:	aa000004 	bge	14194 <McTerminal::moveAndCheckCurPos(int, int, int, int)+0x10c>
   14180:	e286000c 	add	r0, r6, #12
   14184:	e0442006 	sub	r2, r4, r6
   14188:	e0870000 	add	r0, r7, r0
   1418c:	e3a01020 	mov	r1, #32
   14190:	eb005f5b 	bl	2bf04 <memset>
   14194:	e3a03000 	mov	r3, #0
   14198:	e5952ef4 	ldr	r2, [r5, #3828]	; 0xef4
   1419c:	e5951ef0 	ldr	r1, [r5, #3824]	; 0xef0
   141a0:	e2422001 	sub	r2, r2, #1
   141a4:	e1510003 	cmp	r1, r3
   141a8:	b5853ef0 	strlt	r3, [r5, #3824]	; 0xef0
   141ac:	e3520000 	cmp	r2, #0
   141b0:	e5852ef4 	str	r2, [r5, #3828]	; 0xef4
   141b4:	e5c53eec 	strb	r3, [r5, #3820]	; 0xeec
   141b8:	a8bd87f0 	popge	{r4, r5, r6, r7, r8, r9, sl, pc}
   141bc:	eaffffd0 	b	14104 <McTerminal::moveAndCheckCurPos(int, int, int, int)+0x7c>

000141c0 <McZXSpectrum::keyHandler(unsigned char, unsigned char const*)>:
   141c0:	e3e03000 	mvn	r3, #0
   141c4:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   141c8:	e59fc238 	ldr	ip, [pc, #568]	; 14408 <McZXSpectrum::keyHandler(unsigned char, unsigned char const*)+0x248>
   141cc:	e24dd014 	sub	sp, sp, #20
   141d0:	e58c3000 	str	r3, [ip]
   141d4:	e58c3004 	str	r3, [ip, #4]
   141d8:	e5d2a000 	ldrb	sl, [r2]
   141dc:	e5d29001 	ldrb	r9, [r2, #1]
   141e0:	e24a302a 	sub	r3, sl, #42	; 0x2a
   141e4:	e16f3f13 	clz	r3, r3
   141e8:	e5d28002 	ldrb	r8, [r2, #2]
   141ec:	e359002a 	cmp	r9, #42	; 0x2a
   141f0:	e5d27003 	ldrb	r7, [r2, #3]
   141f4:	e1a032a3 	lsr	r3, r3, #5
   141f8:	e5d26004 	ldrb	r6, [r2, #4]
   141fc:	03a03001 	moveq	r3, #1
   14200:	e358002a 	cmp	r8, #42	; 0x2a
   14204:	03a03001 	moveq	r3, #1
   14208:	e5d25005 	ldrb	r5, [r2, #5]
   1420c:	e357002a 	cmp	r7, #42	; 0x2a
   14210:	03a03001 	moveq	r3, #1
   14214:	e356002a 	cmp	r6, #42	; 0x2a
   14218:	03a03001 	moveq	r3, #1
   1421c:	e355002a 	cmp	r5, #42	; 0x2a
   14220:	03a03001 	moveq	r3, #1
   14224:	e59f01e0 	ldr	r0, [pc, #480]	; 1440c <McZXSpectrum::keyHandler(unsigned char, unsigned char const*)+0x24c>
   14228:	e58d300c 	str	r3, [sp, #12]
   1422c:	e58d1008 	str	r1, [sp, #8]
   14230:	e1a0300c 	mov	r3, ip
   14234:	e58dc004 	str	ip, [sp, #4]
   14238:	ea00000a 	b	14268 <McZXSpectrum::keyHandler(unsigned char, unsigned char const*)+0xa8>
   1423c:	e1510000 	cmp	r1, r0
   14240:	e59d1004 	ldr	r1, [sp, #4]
   14244:	e4c13001 	strb	r3, [r1], #1
   14248:	e58d1004 	str	r1, [sp, #4]
   1424c:	0a000051 	beq	14398 <McZXSpectrum::keyHandler(unsigned char, unsigned char const*)+0x1d8>
   14250:	e5d2a000 	ldrb	sl, [r2]
   14254:	e5d29001 	ldrb	r9, [r2, #1]
   14258:	e5d28002 	ldrb	r8, [r2, #2]
   1425c:	e5d27003 	ldrb	r7, [r2, #3]
   14260:	e5d26004 	ldrb	r6, [r2, #4]
   14264:	e5d25005 	ldrb	r5, [r2, #5]
   14268:	e590b000 	ldr	fp, [r0]
   1426c:	e5904004 	ldr	r4, [r0, #4]
   14270:	e15b000a 	cmp	fp, sl
   14274:	03a010fc 	moveq	r1, #252	; 0xfc
   14278:	03a030fe 	moveq	r3, #254	; 0xfe
   1427c:	13a010fd 	movne	r1, #253	; 0xfd
   14280:	13a030ff 	movne	r3, #255	; 0xff
   14284:	e154000a 	cmp	r4, sl
   14288:	01a03001 	moveq	r3, r1
   1428c:	e590e008 	ldr	lr, [r0, #8]
   14290:	e590c00c 	ldr	ip, [r0, #12]
   14294:	e5901010 	ldr	r1, [r0, #16]
   14298:	e15e000a 	cmp	lr, sl
   1429c:	03c33004 	biceq	r3, r3, #4
   142a0:	e15c000a 	cmp	ip, sl
   142a4:	03c33008 	biceq	r3, r3, #8
   142a8:	e151000a 	cmp	r1, sl
   142ac:	03c33010 	biceq	r3, r3, #16
   142b0:	e15b0009 	cmp	fp, r9
   142b4:	03c33001 	biceq	r3, r3, #1
   142b8:	e1540009 	cmp	r4, r9
   142bc:	03c33002 	biceq	r3, r3, #2
   142c0:	e15e0009 	cmp	lr, r9
   142c4:	03c33004 	biceq	r3, r3, #4
   142c8:	e15c0009 	cmp	ip, r9
   142cc:	03c33008 	biceq	r3, r3, #8
   142d0:	e1510009 	cmp	r1, r9
   142d4:	03c33010 	biceq	r3, r3, #16
   142d8:	e158000b 	cmp	r8, fp
   142dc:	03c33001 	biceq	r3, r3, #1
   142e0:	e1580004 	cmp	r8, r4
   142e4:	03c33002 	biceq	r3, r3, #2
   142e8:	e15e0008 	cmp	lr, r8
   142ec:	03c33004 	biceq	r3, r3, #4
   142f0:	e15c0008 	cmp	ip, r8
   142f4:	03c33008 	biceq	r3, r3, #8
   142f8:	e1510008 	cmp	r1, r8
   142fc:	03c33010 	biceq	r3, r3, #16
   14300:	e15b0007 	cmp	fp, r7
   14304:	03c33001 	biceq	r3, r3, #1
   14308:	e1540007 	cmp	r4, r7
   1430c:	03c33002 	biceq	r3, r3, #2
   14310:	e15e0007 	cmp	lr, r7
   14314:	03c33004 	biceq	r3, r3, #4
   14318:	e15c0007 	cmp	ip, r7
   1431c:	03c33008 	biceq	r3, r3, #8
   14320:	e1510007 	cmp	r1, r7
   14324:	03c33010 	biceq	r3, r3, #16
   14328:	e15b0006 	cmp	fp, r6
   1432c:	03c33001 	biceq	r3, r3, #1
   14330:	e1540006 	cmp	r4, r6
   14334:	03c33002 	biceq	r3, r3, #2
   14338:	e15e0006 	cmp	lr, r6
   1433c:	03c33004 	biceq	r3, r3, #4
   14340:	e15c0006 	cmp	ip, r6
   14344:	03c33008 	biceq	r3, r3, #8
   14348:	e1510006 	cmp	r1, r6
   1434c:	03c33010 	biceq	r3, r3, #16
   14350:	e155000b 	cmp	r5, fp
   14354:	03c33001 	biceq	r3, r3, #1
   14358:	e1550004 	cmp	r5, r4
   1435c:	03c33002 	biceq	r3, r3, #2
   14360:	e15e0005 	cmp	lr, r5
   14364:	03c33004 	biceq	r3, r3, #4
   14368:	e15c0005 	cmp	ip, r5
   1436c:	03c33008 	biceq	r3, r3, #8
   14370:	e1510005 	cmp	r1, r5
   14374:	e2800014 	add	r0, r0, #20
   14378:	e59f1090 	ldr	r1, [pc, #144]	; 14410 <McZXSpectrum::keyHandler(unsigned char, unsigned char const*)+0x250>
   1437c:	1affffae 	bne	1423c <McZXSpectrum::keyHandler(unsigned char, unsigned char const*)+0x7c>
   14380:	e1510000 	cmp	r1, r0
   14384:	e59d1004 	ldr	r1, [sp, #4]
   14388:	e3c33010 	bic	r3, r3, #16
   1438c:	e4c13001 	strb	r3, [r1], #1
   14390:	e58d1004 	str	r1, [sp, #4]
   14394:	1affffad 	bne	14250 <McZXSpectrum::keyHandler(unsigned char, unsigned char const*)+0x90>
   14398:	e59d300c 	ldr	r3, [sp, #12]
   1439c:	e3530000 	cmp	r3, #0
   143a0:	1a000009 	bne	143cc <McZXSpectrum::keyHandler(unsigned char, unsigned char const*)+0x20c>
   143a4:	e59d3008 	ldr	r3, [sp, #8]
   143a8:	e3130022 	tst	r3, #34	; 0x22
   143ac:	1a00000f 	bne	143f0 <McZXSpectrum::keyHandler(unsigned char, unsigned char const*)+0x230>
   143b0:	e3130011 	tst	r3, #17
   143b4:	159f204c 	ldrne	r2, [pc, #76]	; 14408 <McZXSpectrum::keyHandler(unsigned char, unsigned char const*)+0x248>
   143b8:	15d23007 	ldrbne	r3, [r2, #7]
   143bc:	13c33002 	bicne	r3, r3, #2
   143c0:	15c23007 	strbne	r3, [r2, #7]
   143c4:	e28dd014 	add	sp, sp, #20
   143c8:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   143cc:	e59f1034 	ldr	r1, [pc, #52]	; 14408 <McZXSpectrum::keyHandler(unsigned char, unsigned char const*)+0x248>
   143d0:	e5d12000 	ldrb	r2, [r1]
   143d4:	e5d13004 	ldrb	r3, [r1, #4]
   143d8:	e3c22001 	bic	r2, r2, #1
   143dc:	e3c33001 	bic	r3, r3, #1
   143e0:	e5c13004 	strb	r3, [r1, #4]
   143e4:	e5c12000 	strb	r2, [r1]
   143e8:	e59d3008 	ldr	r3, [sp, #8]
   143ec:	eaffffef 	b	143b0 <McZXSpectrum::keyHandler(unsigned char, unsigned char const*)+0x1f0>
   143f0:	e59f2010 	ldr	r2, [pc, #16]	; 14408 <McZXSpectrum::keyHandler(unsigned char, unsigned char const*)+0x248>
   143f4:	e5d23000 	ldrb	r3, [r2]
   143f8:	e3c33001 	bic	r3, r3, #1
   143fc:	e5c23000 	strb	r3, [r2]
   14400:	e59d3008 	ldr	r3, [sp, #8]
   14404:	eaffffe9 	b	143b0 <McZXSpectrum::keyHandler(unsigned char, unsigned char const*)+0x1f0>
   14408:	00046a1c 	.word	0x00046a1c
   1440c:	0002f414 	.word	0x0002f414
   14410:	0002f4b4 	.word	0x0002f4b4

00014414 <McZXSpectrum::enable(int)>:
   14414:	e3a02000 	mov	r2, #0
   14418:	e59f3014 	ldr	r3, [pc, #20]	; 14434 <McZXSpectrum::enable(int)+0x20>
   1441c:	e2800a01 	add	r0, r0, #4096	; 0x1000
   14420:	e5c02b04 	strb	r2, [r0, #2820]	; 0xb04
   14424:	e3a01005 	mov	r1, #5
   14428:	e5930040 	ldr	r0, [r3, #64]	; 0x40
   1442c:	e59f2004 	ldr	r2, [pc, #4]	; 14438 <McZXSpectrum::enable(int)+0x24>
   14430:	eaffd4df 	b	97b4 <LogWrite>
   14434:	00042200 	.word	0x00042200
   14438:	0002f2b4 	.word	0x0002f2b4

0001443c <McZXSpectrum::disable()>:
   1443c:	e59f300c 	ldr	r3, [pc, #12]	; 14450 <McZXSpectrum::disable()+0x14>
   14440:	e59f200c 	ldr	r2, [pc, #12]	; 14454 <McZXSpectrum::disable()+0x18>
   14444:	e5930040 	ldr	r0, [r3, #64]	; 0x40
   14448:	e3a01005 	mov	r1, #5
   1444c:	eaffd4d8 	b	97b4 <LogWrite>
   14450:	00042200 	.word	0x00042200
   14454:	0002f2c0 	.word	0x0002f2c0

00014458 <McZXSpectrum::displayRefresh()>:
   14458:	e3a03000 	mov	r3, #0
   1445c:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14460:	e24ddc1b 	sub	sp, sp, #6912	; 0x1b00
   14464:	e24dd024 	sub	sp, sp, #36	; 0x24
   14468:	e28d4020 	add	r4, sp, #32
   1446c:	e58d3000 	str	r3, [sp]
   14470:	e1a0a000 	mov	sl, r0
   14474:	e1a01004 	mov	r1, r4
   14478:	e3a03001 	mov	r3, #1
   1447c:	e3a02c1b 	mov	r2, #6912	; 0x1b00
   14480:	e3a00901 	mov	r0, #16384	; 0x4000
   14484:	ebfff820 	bl	1250c <McManager::blockRead(unsigned long, unsigned char*, unsigned long, bool, bool)>
   14488:	e3500000 	cmp	r0, #0
   1448c:	0a000070 	beq	14654 <McZXSpectrum::displayRefresh()+0x1fc>
   14490:	e28a3b06 	add	r3, sl, #6144	; 0x1800
   14494:	e2831004 	add	r1, r3, #4
   14498:	e28d2b06 	add	r2, sp, #6144	; 0x1800
   1449c:	e28acc1b 	add	ip, sl, #6912	; 0x1b00
   144a0:	e2822020 	add	r2, r2, #32
   144a4:	e58d101c 	str	r1, [sp, #28]
   144a8:	e2833003 	add	r3, r3, #3
   144ac:	e28cc003 	add	ip, ip, #3
   144b0:	ea000001 	b	144bc <McZXSpectrum::displayRefresh()+0x64>
   144b4:	e15c0003 	cmp	ip, r3
   144b8:	0a00006a 	beq	14668 <McZXSpectrum::displayRefresh()+0x210>
   144bc:	e4d21001 	ldrb	r1, [r2], #1
   144c0:	e5f30001 	ldrb	r0, [r3, #1]!
   144c4:	e1500001 	cmp	r0, r1
   144c8:	0afffff9 	beq	144b4 <McZXSpectrum::displayRefresh()+0x5c>
   144cc:	e3a05000 	mov	r5, #0
   144d0:	e28a3a01 	add	r3, sl, #4096	; 0x1000
   144d4:	e58d300c 	str	r3, [sp, #12]
   144d8:	e5c35b04 	strb	r5, [r3, #2820]	; 0xb04
   144dc:	e59f3194 	ldr	r3, [pc, #404]	; 14678 <McZXSpectrum::displayRefresh()+0x220>
   144e0:	e28aa004 	add	sl, sl, #4
   144e4:	e593000c 	ldr	r0, [r3, #12]
   144e8:	e5931014 	ldr	r1, [r3, #20]
   144ec:	e3500000 	cmp	r0, #0
   144f0:	e2803007 	add	r3, r0, #7
   144f4:	a1a03000 	movge	r3, r0
   144f8:	e1a031c3 	asr	r3, r3, #3
   144fc:	e58d3014 	str	r3, [sp, #20]
   14500:	eb006546 	bl	2da20 <__divsi3>
   14504:	e2643001 	rsb	r3, r4, #1
   14508:	e58d0018 	str	r0, [sp, #24]
   1450c:	e2448001 	sub	r8, r4, #1
   14510:	e58d3010 	str	r3, [sp, #16]
   14514:	e3550000 	cmp	r5, #0
   14518:	e0834008 	add	r4, r3, r8
   1451c:	e5f83001 	ldrb	r3, [r8, #1]!
   14520:	0a000002 	beq	14530 <McZXSpectrum::displayRefresh()+0xd8>
   14524:	e5da2000 	ldrb	r2, [sl]
   14528:	e1520003 	cmp	r2, r3
   1452c:	0a000038 	beq	14614 <McZXSpectrum::displayRefresh()+0x1bc>
   14530:	e59d5018 	ldr	r5, [sp, #24]
   14534:	e5ca3000 	strb	r3, [sl]
   14538:	e1a01005 	mov	r1, r5
   1453c:	e1a00004 	mov	r0, r4
   14540:	e58d3008 	str	r3, [sp, #8]
   14544:	eb00652d 	bl	2da00 <__aeabi_uidivmod>
   14548:	e1a021c0 	asr	r2, r0, #3
   1454c:	e28d3eb2 	add	r3, sp, #2848	; 0xb20
   14550:	e2022018 	and	r2, r2, #24
   14554:	e2000007 	and	r0, r0, #7
   14558:	e0831001 	add	r1, r3, r1
   1455c:	e1800002 	orr	r0, r0, r2
   14560:	e0221095 	mla	r2, r5, r0, r1
   14564:	e1a00004 	mov	r0, r4
   14568:	e59d1014 	ldr	r1, [sp, #20]
   1456c:	e5d24d00 	ldrb	r4, [r2, #3328]	; 0xd00
   14570:	eb006522 	bl	2da00 <__aeabi_uidivmod>
   14574:	e1a071c4 	asr	r7, r4, #3
   14578:	e59f30fc 	ldr	r3, [pc, #252]	; 1467c <McZXSpectrum::displayRefresh()+0x224>
   1457c:	e1a06180 	lsl	r6, r0, #3
   14580:	e207200f 	and	r2, r7, #15
   14584:	e204c007 	and	ip, r4, #7
   14588:	e2077008 	and	r7, r7, #8
   1458c:	e1a04181 	lsl	r4, r1, #3
   14590:	e2066038 	and	r6, r6, #56	; 0x38
   14594:	e1a01d00 	lsl	r1, r0, #26
   14598:	e0832102 	add	r2, r3, r2, lsl #2
   1459c:	e18c7007 	orr	r7, ip, r7
   145a0:	e1866ea1 	orr	r6, r6, r1, lsr #29
   145a4:	e20000c0 	and	r0, r0, #192	; 0xc0
   145a8:	e0837107 	add	r7, r3, r7, lsl #2
   145ac:	e3a05080 	mov	r5, #128	; 0x80
   145b0:	e592b0a0 	ldr	fp, [r2, #160]	; 0xa0
   145b4:	e1866000 	orr	r6, r6, r0
   145b8:	e2849008 	add	r9, r4, #8
   145bc:	e59d3008 	ldr	r3, [sp, #8]
   145c0:	ea000009 	b	145ec <McZXSpectrum::displayRefresh()+0x194>
   145c4:	e1a01004 	mov	r1, r4
   145c8:	e59730a0 	ldr	r3, [r7, #160]	; 0xa0
   145cc:	e1a02006 	mov	r2, r6
   145d0:	e3a00000 	mov	r0, #0
   145d4:	e2844001 	add	r4, r4, #1
   145d8:	ebffdfb9 	bl	c4c4 <wgfxSetColourPixel>
   145dc:	e1540009 	cmp	r4, r9
   145e0:	e1a050c5 	asr	r5, r5, #1
   145e4:	0a00000a 	beq	14614 <McZXSpectrum::displayRefresh()+0x1bc>
   145e8:	e5d83000 	ldrb	r3, [r8]
   145ec:	e0130005 	ands	r0, r3, r5
   145f0:	1afffff3 	bne	145c4 <McZXSpectrum::displayRefresh()+0x16c>
   145f4:	e1a01004 	mov	r1, r4
   145f8:	e1a0300b 	mov	r3, fp
   145fc:	e1a02006 	mov	r2, r6
   14600:	e2844001 	add	r4, r4, #1
   14604:	ebffdfae 	bl	c4c4 <wgfxSetColourPixel>
   14608:	e1590004 	cmp	r9, r4
   1460c:	e1a050c5 	asr	r5, r5, #1
   14610:	1afffff4 	bne	145e8 <McZXSpectrum::displayRefresh()+0x190>
   14614:	e28d3b06 	add	r3, sp, #6144	; 0x1800
   14618:	e283301f 	add	r3, r3, #31
   1461c:	e1530008 	cmp	r3, r8
   14620:	e28aa001 	add	sl, sl, #1
   14624:	159d300c 	ldrne	r3, [sp, #12]
   14628:	15d35b04 	ldrbne	r5, [r3, #2820]	; 0xb04
   1462c:	159d3010 	ldrne	r3, [sp, #16]
   14630:	1affffb7 	bne	14514 <McZXSpectrum::displayRefresh()+0xbc>
   14634:	e28d1b06 	add	r1, sp, #6144	; 0x1800
   14638:	e3a02c03 	mov	r2, #768	; 0x300
   1463c:	e2811020 	add	r1, r1, #32
   14640:	e59d001c 	ldr	r0, [sp, #28]
   14644:	eb005dea 	bl	2bdf4 <memcpy>
   14648:	e3a03001 	mov	r3, #1
   1464c:	e59d200c 	ldr	r2, [sp, #12]
   14650:	e5c23b04 	strb	r3, [r2, #2820]	; 0xb04
   14654:	e3e00000 	mvn	r0, #0
   14658:	ebfff638 	bl	11f40 <McManager::targetIrq(int)>
   1465c:	e28ddc1b 	add	sp, sp, #6912	; 0x1b00
   14660:	e28dd024 	add	sp, sp, #36	; 0x24
   14664:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14668:	e28a3a01 	add	r3, sl, #4096	; 0x1000
   1466c:	e58d300c 	str	r3, [sp, #12]
   14670:	e5d35b04 	ldrb	r5, [r3, #2820]	; 0xb04
   14674:	eaffff98 	b	144dc <McZXSpectrum::displayRefresh()+0x84>
   14678:	00042200 	.word	0x00042200
   1467c:	0002f414 	.word	0x0002f414

00014680 <McZXSpectrum::busAccessCallback(unsigned long, unsigned long, unsigned long, unsigned long)>:
   14680:	e3130001 	tst	r3, #1
   14684:	e59d0000 	ldr	r0, [sp]
   14688:	012fff1e 	bxeq	lr
   1468c:	e3110001 	tst	r1, #1
   14690:	1a000020 	bne	14718 <McZXSpectrum::busAccessCallback(unsigned long, unsigned long, unsigned long, unsigned long)+0x98>
   14694:	e3110c01 	tst	r1, #256	; 0x100
   14698:	059f3088 	ldreq	r3, [pc, #136]	; 14728 <McZXSpectrum::busAccessCallback(unsigned long, unsigned long, unsigned long, unsigned long)+0xa8>
   1469c:	13a000ff 	movne	r0, #255	; 0xff
   146a0:	05d30000 	ldrbeq	r0, [r3]
   146a4:	e3110c02 	tst	r1, #512	; 0x200
   146a8:	059f3078 	ldreq	r3, [pc, #120]	; 14728 <McZXSpectrum::busAccessCallback(unsigned long, unsigned long, unsigned long, unsigned long)+0xa8>
   146ac:	05d33001 	ldrbeq	r3, [r3, #1]
   146b0:	00000003 	andeq	r0, r0, r3
   146b4:	e3110b01 	tst	r1, #1024	; 0x400
   146b8:	059f3068 	ldreq	r3, [pc, #104]	; 14728 <McZXSpectrum::busAccessCallback(unsigned long, unsigned long, unsigned long, unsigned long)+0xa8>
   146bc:	05d33002 	ldrbeq	r3, [r3, #2]
   146c0:	00000003 	andeq	r0, r0, r3
   146c4:	e3110b02 	tst	r1, #2048	; 0x800
   146c8:	059f3058 	ldreq	r3, [pc, #88]	; 14728 <McZXSpectrum::busAccessCallback(unsigned long, unsigned long, unsigned long, unsigned long)+0xa8>
   146cc:	05d33003 	ldrbeq	r3, [r3, #3]
   146d0:	00000003 	andeq	r0, r0, r3
   146d4:	e3110a01 	tst	r1, #4096	; 0x1000
   146d8:	059f3048 	ldreq	r3, [pc, #72]	; 14728 <McZXSpectrum::busAccessCallback(unsigned long, unsigned long, unsigned long, unsigned long)+0xa8>
   146dc:	05d33004 	ldrbeq	r3, [r3, #4]
   146e0:	00000003 	andeq	r0, r0, r3
   146e4:	e3110a02 	tst	r1, #8192	; 0x2000
   146e8:	059f3038 	ldreq	r3, [pc, #56]	; 14728 <McZXSpectrum::busAccessCallback(unsigned long, unsigned long, unsigned long, unsigned long)+0xa8>
   146ec:	05d33005 	ldrbeq	r3, [r3, #5]
   146f0:	00000003 	andeq	r0, r0, r3
   146f4:	e3110901 	tst	r1, #16384	; 0x4000
   146f8:	059f3028 	ldreq	r3, [pc, #40]	; 14728 <McZXSpectrum::busAccessCallback(unsigned long, unsigned long, unsigned long, unsigned long)+0xa8>
   146fc:	05d33006 	ldrbeq	r3, [r3, #6]
   14700:	00000003 	andeq	r0, r0, r3
   14704:	e3110902 	tst	r1, #32768	; 0x8000
   14708:	059f3018 	ldreq	r3, [pc, #24]	; 14728 <McZXSpectrum::busAccessCallback(unsigned long, unsigned long, unsigned long, unsigned long)+0xa8>
   1470c:	05d33007 	ldrbeq	r3, [r3, #7]
   14710:	00000003 	andeq	r0, r0, r3
   14714:	e12fff1e 	bx	lr
   14718:	e6ef1071 	uxtb	r1, r1
   1471c:	e351001f 	cmp	r1, #31
   14720:	03a00000 	moveq	r0, #0
   14724:	e12fff1e 	bx	lr
   14728:	00046a1c 	.word	0x00046a1c

0001472c <McZXSpectrum::fileHandler(char const*, unsigned char const*, int)>:
   1472c:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14730:	e24ddfcf 	sub	sp, sp, #828	; 0x33c
   14734:	e1a04002 	mov	r4, r2
   14738:	e1a09003 	mov	r9, r3
   1473c:	e28d20dc 	add	r2, sp, #220	; 0xdc
   14740:	e3a03064 	mov	r3, #100	; 0x64
   14744:	e59f0be8 	ldr	r0, [pc, #3048]	; 15334 <McZXSpectrum::fileHandler(char const*, unsigned char const*, int)+0xc08>
   14748:	e1a06001 	mov	r6, r1
   1474c:	ebffdaf1 	bl	b318 <jsonGetValueForKey>
   14750:	e2503000 	subs	r3, r0, #0
   14754:	e58d3018 	str	r3, [sp, #24]
   14758:	0a000077 	beq	1493c <McZXSpectrum::fileHandler(char const*, unsigned char const*, int)+0x210>
   1475c:	e3a0102e 	mov	r1, #46	; 0x2e
   14760:	e28d00dc 	add	r0, sp, #220	; 0xdc
   14764:	eb005e47 	bl	2c088 <strchr>
   14768:	e3500000 	cmp	r0, #0
   1476c:	e59f5bc4 	ldr	r5, [pc, #3012]	; 15338 <McZXSpectrum::fileHandler(char const*, unsigned char const*, int)+0xc0c>
   14770:	11a05000 	movne	r5, r0
   14774:	e59f1bc0 	ldr	r1, [pc, #3008]	; 1533c <McZXSpectrum::fileHandler(char const*, unsigned char const*, int)+0xc10>
   14778:	e1a00005 	mov	r0, r5
   1477c:	eb005e25 	bl	2c018 <strcasecmp>
   14780:	e3500000 	cmp	r0, #0
   14784:	0a00006e 	beq	14944 <McZXSpectrum::fileHandler(char const*, unsigned char const*, int)+0x218>
   14788:	e59f1bb0 	ldr	r1, [pc, #2992]	; 15340 <McZXSpectrum::fileHandler(char const*, unsigned char const*, int)+0xc14>
   1478c:	e1a00005 	mov	r0, r5
   14790:	eb005e20 	bl	2c018 <strcasecmp>
   14794:	e2503000 	subs	r3, r0, #0
   14798:	e58d301c 	str	r3, [sp, #28]
   1479c:	0a00012e 	beq	14c5c <McZXSpectrum::fileHandler(char const*, unsigned char const*, int)+0x530>
   147a0:	e1a00005 	mov	r0, r5
   147a4:	e59f1b98 	ldr	r1, [pc, #2968]	; 15344 <McZXSpectrum::fileHandler(char const*, unsigned char const*, int)+0xc18>
   147a8:	eb005e1a 	bl	2c018 <strcasecmp>
   147ac:	e2505000 	subs	r5, r0, #0
   147b0:	1a000099 	bne	14a1c <McZXSpectrum::fileHandler(char const*, unsigned char const*, int)+0x2f0>
   147b4:	e59f2b8c 	ldr	r2, [pc, #2956]	; 15348 <McZXSpectrum::fileHandler(char const*, unsigned char const*, int)+0xc1c>
   147b8:	e1a03009 	mov	r3, r9
   147bc:	e5920040 	ldr	r0, [r2, #64]	; 0x40
   147c0:	e3a01004 	mov	r1, #4
   147c4:	e59f2b80 	ldr	r2, [pc, #2944]	; 1534c <McZXSpectrum::fileHandler(char const*, unsigned char const*, int)+0xc20>
   147c8:	ebffd3f9 	bl	97b4 <LogWrite>
   147cc:	e59f3b7c 	ldr	r3, [pc, #2940]	; 15350 <McZXSpectrum::fileHandler(char const*, unsigned char const*, int)+0xc24>
   147d0:	e1590003 	cmp	r9, r3
   147d4:	da0002d0 	ble	1531c <McZXSpectrum::fileHandler(char const*, unsigned char const*, int)+0xbf0>
   147d8:	e5d42008 	ldrb	r2, [r4, #8]
   147dc:	e5d43007 	ldrb	r3, [r4, #7]
   147e0:	e5d41016 	ldrb	r1, [r4, #22]
   147e4:	e5d4e015 	ldrb	lr, [r4, #21]
   147e8:	e5d4c00d 	ldrb	ip, [r4, #13]
   147ec:	e1833402 	orr	r3, r3, r2, lsl #8
   147f0:	e5d4200e 	ldrb	r2, [r4, #14]
   147f4:	e18ee401 	orr	lr, lr, r1, lsl #8
   147f8:	e18cc402 	orr	ip, ip, r2, lsl #8
   147fc:	e5d41005 	ldrb	r1, [r4, #5]
   14800:	e5d42006 	ldrb	r2, [r4, #6]
   14804:	e58d5174 	str	r5, [sp, #372]	; 0x174
   14808:	e1811402 	orr	r1, r1, r2, lsl #8
   1480c:	e5d4200b 	ldrb	r2, [r4, #11]
   14810:	e58d5188 	str	r5, [sp, #392]	; 0x188
   14814:	e58de158 	str	lr, [sp, #344]	; 0x158
   14818:	e5d4e00c 	ldrb	lr, [r4, #12]
   1481c:	e58d3170 	str	r3, [sp, #368]	; 0x170
   14820:	e5d43003 	ldrb	r3, [r4, #3]
   14824:	e182240e 	orr	r2, r2, lr, lsl #8
   14828:	e5d4e004 	ldrb	lr, [r4, #4]
   1482c:	e58dc154 	str	ip, [sp, #340]	; 0x154
   14830:	e5d4c009 	ldrb	ip, [r4, #9]
   14834:	e183340e 	orr	r3, r3, lr, lsl #8
   14838:	e5d4e00a 	ldrb	lr, [r4, #10]
   1483c:	e58d116c 	str	r1, [sp, #364]	; 0x16c
   14840:	e18cc40e 	orr	ip, ip, lr, lsl #8
   14844:	e5d41001 	ldrb	r1, [r4, #1]
   14848:	e5d4e002 	ldrb	lr, [r4, #2]
   1484c:	e58d2150 	str	r2, [sp, #336]	; 0x150
   14850:	e5d42011 	ldrb	r2, [r4, #17]
   14854:	e181140e 	orr	r1, r1, lr, lsl #8
   14858:	e5d4e012 	ldrb	lr, [r4, #18]
   1485c:	e58d3168 	str	r3, [sp, #360]	; 0x168
   14860:	e5d4300f 	ldrb	r3, [r4, #15]
   14864:	e182240e 	orr	r2, r2, lr, lsl #8
   14868:	e5d4e010 	ldrb	lr, [r4, #16]
   1486c:	e58dc14c 	str	ip, [sp, #332]	; 0x14c
   14870:	e183340e 	orr	r3, r3, lr, lsl #8
   14874:	e58d1164 	str	r1, [sp, #356]	; 0x164
   14878:	e58d3160 	str	r3, [sp, #352]	; 0x160
   1487c:	e58d215c 	str	r2, [sp, #348]	; 0x15c
   14880:	e5d42017 	ldrb	r2, [r4, #23]
   14884:	e5d43018 	ldrb	r3, [r4, #24]
   14888:	e28d0fce 	add	r0, sp, #824	; 0x338
   1488c:	e1822403 	orr	r2, r2, r3, lsl #8
   14890:	e2421901 	sub	r1, r2, #16384	; 0x4000
   14894:	e281c001 	add	ip, r1, #1
   14898:	e084c00c 	add	ip, r4, ip
   1489c:	e0841001 	add	r1, r4, r1
   148a0:	e5dce01b 	ldrb	lr, [ip, #27]
   148a4:	e5d1301b 	ldrb	r3, [r1, #27]
   148a8:	e2822002 	add	r2, r2, #2
   148ac:	e083340e 	add	r3, r3, lr, lsl #8
   148b0:	e6ff3073 	uxth	r3, r3
   148b4:	e52031f4 	str	r3, [r0, #-500]!	; 0xfffffe0c
   148b8:	e5d43013 	ldrb	r3, [r4, #19]
   148bc:	e5d4e019 	ldrb	lr, [r4, #25]
   148c0:	e1a03123 	lsr	r3, r3, #2
   148c4:	e2033001 	and	r3, r3, #1
   148c8:	e58d2148 	str	r2, [sp, #328]	; 0x148
   148cc:	e58d3184 	str	r3, [sp, #388]	; 0x184
   148d0:	e5d42000 	ldrb	r2, [r4]
   148d4:	e5d43014 	ldrb	r3, [r4, #20]
   148d8:	e20ee003 	and	lr, lr, #3
   148dc:	e5c1501b 	strb	r5, [r1, #27]
   148e0:	e5cc501b 	strb	r5, [ip, #27]
   148e4:	e58de180 	str	lr, [sp, #384]	; 0x180
   148e8:	e58d317c 	str	r3, [sp, #380]	; 0x17c
   148ec:	e58d2178 	str	r2, [sp, #376]	; 0x178
   148f0:	eb001d07 	bl	1bd14 <TargetState::setTargetRegisters(Z80Registers const&)>
   148f4:	e284101b 	add	r1, r4, #27
   148f8:	e3a02903 	mov	r2, #49152	; 0xc000
   148fc:	e3a00901 	mov	r0, #16384	; 0x4000
   14900:	eb001cbc 	bl	1bbf8 <TargetState::addMemoryBlock(unsigned long, unsigned char const*, unsigned long)>
   14904:	e59f2a48 	ldr	r2, [pc, #2632]	; 15354 <McZXSpectrum::fileHandler(char const*, unsigned char const*, int)+0xc28>
   14908:	e59d1158 	ldr	r1, [sp, #344]	; 0x158
   1490c:	e5920000 	ldr	r0, [r2]
   14910:	e59d4154 	ldr	r4, [sp, #340]	; 0x154
   14914:	e59d2148 	ldr	r2, [sp, #328]	; 0x148
   14918:	e59de150 	ldr	lr, [sp, #336]	; 0x150
   1491c:	e59dc14c 	ldr	ip, [sp, #332]	; 0x14c
   14920:	e58d2000 	str	r2, [sp]
   14924:	e98d5002 	stmib	sp, {r1, ip, lr}
   14928:	e59d3144 	ldr	r3, [sp, #324]	; 0x144
   1492c:	e58d4010 	str	r4, [sp, #16]
   14930:	e59f2a20 	ldr	r2, [pc, #2592]	; 15358 <McZXSpectrum::fileHandler(char const*, unsigned char const*, int)+0xc2c>
   14934:	e3a01004 	mov	r1, #4
   14938:	ebffd39d 	bl	97b4 <LogWrite>
   1493c:	e28ddfcf 	add	sp, sp, #828	; 0x33c
   14940:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14944:	e59f29fc 	ldr	r2, [pc, #2556]	; 15348 <McZXSpectrum::fileHandler(char const*, unsigned char const*, int)+0xc1c>
   14948:	e1a03009 	mov	r3, r9
   1494c:	e5920040 	ldr	r0, [r2, #64]	; 0x40
   14950:	e3a01004 	mov	r1, #4
   14954:	e59f2a00 	ldr	r2, [pc, #2560]	; 1535c <McZXSpectrum::fileHandler(char const*, unsigned char const*, int)+0xc30>
   14958:	ebffd395 	bl	97b4 <LogWrite>
   1495c:	e3a02007 	mov	r2, #7
   14960:	e59f19f8 	ldr	r1, [pc, #2552]	; 15360 <McZXSpectrum::fileHandler(char const*, unsigned char const*, int)+0xc34>
   14964:	e1a00004 	mov	r0, r4
   14968:	eb005f32 	bl	2c638 <strncmp>
   1496c:	e3500000 	cmp	r0, #0
   14970:	1a000224 	bne	15208 <McZXSpectrum::fileHandler(char const*, unsigned char const*, int)+0xadc>
   14974:	e3a0500a 	mov	r5, #10
   14978:	e59f39e4 	ldr	r3, [pc, #2532]	; 15364 <McZXSpectrum::fileHandler(char const*, unsigned char const*, int)+0xc38>
   1497c:	e59f79e4 	ldr	r7, [pc, #2532]	; 15368 <McZXSpectrum::fileHandler(char const*, unsigned char const*, int)+0xc3c>
   14980:	e58d3018 	str	r3, [sp, #24]
   14984:	e1590005 	cmp	r9, r5
   14988:	daffffeb 	ble	1493c <McZXSpectrum::fileHandler(char const*, unsigned char const*, int)+0x210>
   1498c:	e2453001 	sub	r3, r5, #1
   14990:	e0843003 	add	r3, r4, r3
   14994:	e5f32001 	ldrb	r2, [r3, #1]!
   14998:	e2856001 	add	r6, r5, #1
   1499c:	e3520010 	cmp	r2, #16
   149a0:	0a000038 	beq	14a88 <McZXSpectrum::fileHandler(char const*, unsigned char const*, int)+0x35c>
   149a4:	e3520030 	cmp	r2, #48	; 0x30
   149a8:	1a00002f 	bne	14a6c <McZXSpectrum::fileHandler(char const*, unsigned char const*, int)+0x340>
   149ac:	e1590006 	cmp	r9, r6
   149b0:	d3a0a000 	movle	sl, #0
   149b4:	c7d4a006 	ldrbgt	sl, [r4, r6]
   149b8:	e2851002 	add	r1, r5, #2
   149bc:	e0498001 	sub	r8, r9, r1
   149c0:	c28ab001 	addgt	fp, sl, #1
   149c4:	d3a0b001 	movle	fp, #1
   149c8:	e158000a 	cmp	r8, sl
   149cc:	a1a0800a 	movge	r8, sl
   149d0:	e28d5f51 	add	r5, sp, #324	; 0x144
   149d4:	e2882001 	add	r2, r8, #1
   149d8:	e0841001 	add	r1, r4, r1
   149dc:	e1a00005 	mov	r0, r5
   149e0:	eb005ec2 	bl	2c4f0 <strlcpy>
   149e4:	e3a0c000 	mov	ip, #0
   149e8:	e28d3fce 	add	r3, sp, #824	; 0x338
   149ec:	e0838008 	add	r8, r3, r8
   149f0:	e5970000 	ldr	r0, [r7]
   149f4:	e1a0300a 	mov	r3, sl
   149f8:	e58d5000 	str	r5, [sp]
   149fc:	e59f2968 	ldr	r2, [pc, #2408]	; 1536c <McZXSpectrum::fileHandler(char const*, unsigned char const*, int)+0xc40>
   14a00:	e3a01004 	mov	r1, #4
   14a04:	e086500b 	add	r5, r6, fp
   14a08:	e548c1f4 	strb	ip, [r8, #-500]	; 0xfffffe0c
   14a0c:	ebffd368 	bl	97b4 <LogWrite>
   14a10:	e1590005 	cmp	r9, r5
   14a14:	caffffdc 	bgt	1498c <McZXSpectrum::fileHandler(char const*, unsigned char const*, int)+0x260>
   14a18:	eaffffc7 	b	1493c <McZXSpectrum::fileHandler(char const*, unsigned char const*, int)+0x210>
   14a1c:	e3a0301e 	mov	r3, #30
   14a20:	e1a01006 	mov	r1, r6
   14a24:	e28d2f51 	add	r2, sp, #324	; 0x144
   14a28:	e59f0940 	ldr	r0, [pc, #2368]	; 15370 <McZXSpectrum::fileHandler(char const*, unsigned char const*, int)+0xc44>
   14a2c:	ebffda39 	bl	b318 <jsonGetValueForKey>
   14a30:	e2505000 	subs	r5, r0, #0
   14a34:	01a03005 	moveq	r3, r5
   14a38:	1a00021d 	bne	152b4 <McZXSpectrum::fileHandler(char const*, unsigned char const*, int)+0xb88>
   14a3c:	e59f2904 	ldr	r2, [pc, #2308]	; 15348 <McZXSpectrum::fileHandler(char const*, unsigned char const*, int)+0xc1c>
   14a40:	e58d9000 	str	r9, [sp]
   14a44:	e5920040 	ldr	r0, [r2, #64]	; 0x40
   14a48:	e3a01004 	mov	r1, #4
   14a4c:	e59f2920 	ldr	r2, [pc, #2336]	; 15374 <McZXSpectrum::fileHandler(char const*, unsigned char const*, int)+0xc48>
   14a50:	ebffd357 	bl	97b4 <LogWrite>
   14a54:	e1a02009 	mov	r2, r9
   14a58:	e1a01004 	mov	r1, r4
   14a5c:	e1a00005 	mov	r0, r5
   14a60:	eb001c64 	bl	1bbf8 <TargetState::addMemoryBlock(unsigned long, unsigned char const*, unsigned long)>
   14a64:	e28ddfcf 	add	sp, sp, #828	; 0x33c
   14a68:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14a6c:	e1590006 	cmp	r9, r6
   14a70:	e1a05006 	mov	r5, r6
   14a74:	0affffb0 	beq	1493c <McZXSpectrum::fileHandler(char const*, unsigned char const*, int)+0x210>
   14a78:	e5f32001 	ldrb	r2, [r3, #1]!
   14a7c:	e2856001 	add	r6, r5, #1
   14a80:	e3520010 	cmp	r2, #16
   14a84:	1affffc6 	bne	149a4 <McZXSpectrum::fileHandler(char const*, unsigned char const*, int)+0x278>
   14a88:	e2853002 	add	r3, r5, #2
   14a8c:	e1590003 	cmp	r9, r3
   14a90:	c0843006 	addgt	r3, r4, r6
   14a94:	c5d32001 	ldrbgt	r2, [r3, #1]
   14a98:	c7d43006 	ldrbgt	r3, [r4, r6]
   14a9c:	d3a03000 	movle	r3, #0
   14aa0:	c0833402 	addgt	r3, r3, r2, lsl #8
   14aa4:	e2852004 	add	r2, r5, #4
   14aa8:	e1590002 	cmp	r9, r2
   14aac:	c2852003 	addgt	r2, r5, #3
   14ab0:	c0841002 	addgt	r1, r4, r2
   14ab4:	c7d48002 	ldrbgt	r8, [r4, r2]
   14ab8:	c5d11001 	ldrbgt	r1, [r1, #1]
   14abc:	d3a0a000 	movle	sl, #0
   14ac0:	c0888401 	addgt	r8, r8, r1, lsl #8
   14ac4:	c1a0a008 	movgt	sl, r8
   14ac8:	e5970000 	ldr	r0, [r7]
   14acc:	e59f28a4 	ldr	r2, [pc, #2212]	; 15378 <McZXSpectrum::fileHandler(char const*, unsigned char const*, int)+0xc4c>
   14ad0:	e58da000 	str	sl, [sp]
   14ad4:	e3a01004 	mov	r1, #4
   14ad8:	c288b004 	addgt	fp, r8, #4
   14adc:	d3a0b004 	movle	fp, #4
   14ae0:	d1a0800a 	movle	r8, sl
   14ae4:	ebffd332 	bl	97b4 <LogWrite>
   14ae8:	e2853005 	add	r3, r5, #5
   14aec:	e7d43003 	ldrb	r3, [r4, r3]
   14af0:	e3530000 	cmp	r3, #0
   14af4:	1a000038 	bne	14bdc <McZXSpectrum::fileHandler(char const*, unsigned char const*, int)+0x4b0>
   14af8:	e2852006 	add	r2, r5, #6
   14afc:	e1590002 	cmp	r9, r2
   14b00:	ca00003c 	bgt	14bf8 <McZXSpectrum::fileHandler(char const*, unsigned char const*, int)+0x4cc>
   14b04:	e2851007 	add	r1, r5, #7
   14b08:	e0498001 	sub	r8, r9, r1
   14b0c:	e358000a 	cmp	r8, #10
   14b10:	a3a0800a 	movge	r8, #10
   14b14:	e28daf51 	add	sl, sp, #324	; 0x144
   14b18:	e2882001 	add	r2, r8, #1
   14b1c:	e0841001 	add	r1, r4, r1
   14b20:	e1a0000a 	mov	r0, sl
   14b24:	e58d301c 	str	r3, [sp, #28]
   14b28:	eb005e70 	bl	2c4f0 <strlcpy>
   14b2c:	e3a01000 	mov	r1, #0
   14b30:	e2852012 	add	r2, r5, #18
   14b34:	e1590002 	cmp	r9, r2
   14b38:	e28d3fce 	add	r3, sp, #824	; 0x338
   14b3c:	c2852011 	addgt	r2, r5, #17
   14b40:	e0838008 	add	r8, r3, r8
   14b44:	e54811f4 	strb	r1, [r8, #-500]	; 0xfffffe0c
   14b48:	c0841002 	addgt	r1, r4, r2
   14b4c:	c5d10001 	ldrbgt	r0, [r1, #1]
   14b50:	c7d41002 	ldrbgt	r1, [r4, r2]
   14b54:	e2852014 	add	r2, r5, #20
   14b58:	c0811400 	addgt	r1, r1, r0, lsl #8
   14b5c:	e1590002 	cmp	r9, r2
   14b60:	c2852013 	addgt	r2, r5, #19
   14b64:	c0840002 	addgt	r0, r4, r2
   14b68:	c5d00001 	ldrbgt	r0, [r0, #1]
   14b6c:	c7d4c002 	ldrbgt	ip, [r4, r2]
   14b70:	e2852016 	add	r2, r5, #22
   14b74:	c08cc400 	addgt	ip, ip, r0, lsl #8
   14b78:	d3a0c000 	movle	ip, #0
   14b7c:	e1590002 	cmp	r9, r2
   14b80:	d3a02000 	movle	r2, #0
   14b84:	c2852015 	addgt	r2, r5, #21
   14b88:	c0840002 	addgt	r0, r4, r2
   14b8c:	c5d00001 	ldrbgt	r0, [r0, #1]
   14b90:	c7d42002 	ldrbgt	r2, [r4, r2]
   14b94:	e2855017 	add	r5, r5, #23
   14b98:	c0822400 	addgt	r2, r2, r0, lsl #8
   14b9c:	e1590005 	cmp	r9, r5
   14ba0:	e59d301c 	ldr	r3, [sp, #28]
   14ba4:	c7d43005 	ldrbgt	r3, [r4, r5]
   14ba8:	e5970000 	ldr	r0, [r7]
   14bac:	e1cd20f8 	strd	r2, [sp, #8]
   14bb0:	e88d1002 	stm	sp, {r1, ip}
   14bb4:	e1a0300a 	mov	r3, sl
   14bb8:	e59f27bc 	ldr	r2, [pc, #1980]	; 1537c <McZXSpectrum::fileHandler(char const*, unsigned char const*, int)+0xc50>
   14bbc:	e3a01004 	mov	r1, #4
   14bc0:	ebffd2fb 	bl	97b4 <LogWrite>
   14bc4:	e59f27b4 	ldr	r2, [pc, #1972]	; 15380 <McZXSpectrum::fileHandler(char const*, unsigned char const*, int)+0xc54>
   14bc8:	e3a01004 	mov	r1, #4
   14bcc:	e5970000 	ldr	r0, [r7]
   14bd0:	e086500b 	add	r5, r6, fp
   14bd4:	ebffd2f6 	bl	97b4 <LogWrite>
   14bd8:	eaffff69 	b	14984 <McZXSpectrum::fileHandler(char const*, unsigned char const*, int)+0x258>
   14bdc:	e35300ff 	cmp	r3, #255	; 0xff
   14be0:	e5970000 	ldr	r0, [r7]
   14be4:	0a000012 	beq	14c34 <McZXSpectrum::fileHandler(char const*, unsigned char const*, int)+0x508>
   14be8:	e59f2794 	ldr	r2, [pc, #1940]	; 15384 <McZXSpectrum::fileHandler(char const*, unsigned char const*, int)+0xc58>
   14bec:	e3a01004 	mov	r1, #4
   14bf0:	ebffd2ef 	bl	97b4 <LogWrite>
   14bf4:	eafffff2 	b	14bc4 <McZXSpectrum::fileHandler(char const*, unsigned char const*, int)+0x498>
   14bf8:	e7d42002 	ldrb	r2, [r4, r2]
   14bfc:	e3520000 	cmp	r2, #0
   14c00:	0affffbf 	beq	14b04 <McZXSpectrum::fileHandler(char const*, unsigned char const*, int)+0x3d8>
   14c04:	e3520001 	cmp	r2, #1
   14c08:	0a00013a 	beq	150f8 <McZXSpectrum::fileHandler(char const*, unsigned char const*, int)+0x9cc>
   14c0c:	e3520002 	cmp	r2, #2
   14c10:	0a000182 	beq	15220 <McZXSpectrum::fileHandler(char const*, unsigned char const*, int)+0xaf4>
   14c14:	e3520003 	cmp	r2, #3
   14c18:	0a00010b 	beq	1504c <McZXSpectrum::fileHandler(char const*, unsigned char const*, int)+0x920>
   14c1c:	e1a03002 	mov	r3, r2
   14c20:	e3a01004 	mov	r1, #4
   14c24:	e59f275c 	ldr	r2, [pc, #1884]	; 15388 <McZXSpectrum::fileHandler(char const*, unsigned char const*, int)+0xc5c>
   14c28:	e5970000 	ldr	r0, [r7]
   14c2c:	ebffd2e0 	bl	97b4 <LogWrite>
   14c30:	eaffffe3 	b	14bc4 <McZXSpectrum::fileHandler(char const*, unsigned char const*, int)+0x498>
   14c34:	e1a0300a 	mov	r3, sl
   14c38:	e59f274c 	ldr	r2, [pc, #1868]	; 1538c <McZXSpectrum::fileHandler(char const*, unsigned char const*, int)+0xc60>
   14c3c:	e3a01004 	mov	r1, #4
   14c40:	ebffd2db 	bl	97b4 <LogWrite>
   14c44:	e2851006 	add	r1, r5, #6
   14c48:	e0841001 	add	r1, r4, r1
   14c4c:	e1a02008 	mov	r2, r8
   14c50:	e59d0018 	ldr	r0, [sp, #24]
   14c54:	eb001be7 	bl	1bbf8 <TargetState::addMemoryBlock(unsigned long, unsigned char const*, unsigned long)>
   14c58:	eaffffd9 	b	14bc4 <McZXSpectrum::fileHandler(char const*, unsigned char const*, int)+0x498>
   14c5c:	e59f26e4 	ldr	r2, [pc, #1764]	; 15348 <McZXSpectrum::fileHandler(char const*, unsigned char const*, int)+0xc1c>
   14c60:	e1a03009 	mov	r3, r9
   14c64:	e5920040 	ldr	r0, [r2, #64]	; 0x40
   14c68:	e3a01004 	mov	r1, #4
   14c6c:	e59f271c 	ldr	r2, [pc, #1820]	; 15390 <McZXSpectrum::fileHandler(char const*, unsigned char const*, int)+0xc64>
   14c70:	ebffd2cf 	bl	97b4 <LogWrite>
   14c74:	e3590031 	cmp	r9, #49	; 0x31
   14c78:	da000194 	ble	152d0 <McZXSpectrum::fileHandler(char const*, unsigned char const*, int)+0xba4>
   14c7c:	e5d4500c 	ldrb	r5, [r4, #12]
   14c80:	e5d42007 	ldrb	r2, [r4, #7]
   14c84:	e35500ff 	cmp	r5, #255	; 0xff
   14c88:	03a03001 	moveq	r3, #1
   14c8c:	01a05003 	moveq	r5, r3
   14c90:	05c4300c 	strbeq	r3, [r4, #12]
   14c94:	e5d43006 	ldrb	r3, [r4, #6]
   14c98:	e1933402 	orrs	r3, r3, r2, lsl #8
   14c9c:	1a00013a 	bne	1518c <McZXSpectrum::fileHandler(char const*, unsigned char const*, int)+0xa60>
   14ca0:	e5d4201f 	ldrb	r2, [r4, #31]
   14ca4:	e5d4301e 	ldrb	r3, [r4, #30]
   14ca8:	e58d9024 	str	r9, [sp, #36]	; 0x24
   14cac:	e0833402 	add	r3, r3, r2, lsl #8
   14cb0:	e3530017 	cmp	r3, #23
   14cb4:	c3a02003 	movgt	r2, #3
   14cb8:	d3a02002 	movle	r2, #2
   14cbc:	e59fb6d0 	ldr	fp, [pc, #1744]	; 15394 <McZXSpectrum::fileHandler(char const*, unsigned char const*, int)+0xc68>
   14cc0:	e58d302c 	str	r3, [sp, #44]	; 0x2c
   14cc4:	e58d2028 	str	r2, [sp, #40]	; 0x28
   14cc8:	e283a002 	add	sl, r3, #2
   14ccc:	e59f66c4 	ldr	r6, [pc, #1732]	; 15398 <McZXSpectrum::fileHandler(char const*, unsigned char const*, int)+0xc6c>
   14cd0:	e1a09004 	mov	r9, r4
   14cd4:	ea000009 	b	14d00 <McZXSpectrum::fileHandler(char const*, unsigned char const*, int)+0x5d4>
   14cd8:	e3540008 	cmp	r4, #8
   14cdc:	0a000047 	beq	14e00 <McZXSpectrum::fileHandler(char const*, unsigned char const*, int)+0x6d4>
   14ce0:	e3540004 	cmp	r4, #4
   14ce4:	0a000048 	beq	14e0c <McZXSpectrum::fileHandler(char const*, unsigned char const*, int)+0x6e0>
   14ce8:	e2877003 	add	r7, r7, #3
   14cec:	e08aa007 	add	sl, sl, r7
   14cf0:	e59d2024 	ldr	r2, [sp, #36]	; 0x24
   14cf4:	e28a301e 	add	r3, sl, #30
   14cf8:	e1520003 	cmp	r2, r3
   14cfc:	da000045 	ble	14e18 <McZXSpectrum::fileHandler(char const*, unsigned char const*, int)+0x6ec>
   14d00:	e089300a 	add	r3, r9, sl
   14d04:	e5d3201f 	ldrb	r2, [r3, #31]
   14d08:	e5d3701e 	ldrb	r7, [r3, #30]
   14d0c:	e5d34020 	ldrb	r4, [r3, #32]
   14d10:	e0877402 	add	r7, r7, r2, lsl #8
   14d14:	e59b0000 	ldr	r0, [fp]
   14d18:	e1a0300a 	mov	r3, sl
   14d1c:	e58d7000 	str	r7, [sp]
   14d20:	e58d4004 	str	r4, [sp, #4]
   14d24:	e59f2670 	ldr	r2, [pc, #1648]	; 1539c <McZXSpectrum::fileHandler(char const*, unsigned char const*, int)+0xc70>
   14d28:	e3a01005 	mov	r1, #5
   14d2c:	ebffd2a0 	bl	97b4 <LogWrite>
   14d30:	e3540005 	cmp	r4, #5
   14d34:	1affffe7 	bne	14cd8 <McZXSpectrum::fileHandler(char const*, unsigned char const*, int)+0x5ac>
   14d38:	e3a03903 	mov	r3, #49152	; 0xc000
   14d3c:	e58d3020 	str	r3, [sp, #32]
   14d40:	e089200a 	add	r2, r9, sl
   14d44:	e59f364c 	ldr	r3, [pc, #1612]	; 15398 <McZXSpectrum::fileHandler(char const*, unsigned char const*, int)+0xc6c>
   14d48:	e59f5650 	ldr	r5, [pc, #1616]	; 153a0 <McZXSpectrum::fileHandler(char const*, unsigned char const*, int)+0xc74>
   14d4c:	e2822021 	add	r2, r2, #33	; 0x21
   14d50:	ea000002 	b	14d60 <McZXSpectrum::fileHandler(char const*, unsigned char const*, int)+0x634>
   14d54:	e5c31000 	strb	r1, [r3]
   14d58:	e2822001 	add	r2, r2, #1
   14d5c:	e2833001 	add	r3, r3, #1
   14d60:	e0430006 	sub	r0, r3, r6
   14d64:	e1500005 	cmp	r0, r5
   14d68:	ca000012 	bgt	14db8 <McZXSpectrum::fileHandler(char const*, unsigned char const*, int)+0x68c>
   14d6c:	e5d21000 	ldrb	r1, [r2]
   14d70:	e35100ed 	cmp	r1, #237	; 0xed
   14d74:	1afffff6 	bne	14d54 <McZXSpectrum::fileHandler(char const*, unsigned char const*, int)+0x628>
   14d78:	e5d2c001 	ldrb	ip, [r2, #1]
   14d7c:	e35c00ed 	cmp	ip, #237	; 0xed
   14d80:	1afffff3 	bne	14d54 <McZXSpectrum::fileHandler(char const*, unsigned char const*, int)+0x628>
   14d84:	e5d28002 	ldrb	r8, [r2, #2]
   14d88:	e2824004 	add	r4, r2, #4
   14d8c:	e3580000 	cmp	r8, #0
   14d90:	0a000013 	beq	14de4 <McZXSpectrum::fileHandler(char const*, unsigned char const*, int)+0x6b8>
   14d94:	e5d21003 	ldrb	r1, [r2, #3]
   14d98:	e1a00003 	mov	r0, r3
   14d9c:	e1a02008 	mov	r2, r8
   14da0:	eb005c57 	bl	2bf04 <memset>
   14da4:	e0803008 	add	r3, r0, r8
   14da8:	e0430006 	sub	r0, r3, r6
   14dac:	e1500005 	cmp	r0, r5
   14db0:	e1a02004 	mov	r2, r4
   14db4:	daffffec 	ble	14d6c <McZXSpectrum::fileHandler(char const*, unsigned char const*, int)+0x640>
   14db8:	e3500901 	cmp	r0, #16384	; 0x4000
   14dbc:	e1a04000 	mov	r4, r0
   14dc0:	1a000008 	bne	14de8 <McZXSpectrum::fileHandler(char const*, unsigned char const*, int)+0x6bc>
   14dc4:	e59d301c 	ldr	r3, [sp, #28]
   14dc8:	e59d0020 	ldr	r0, [sp, #32]
   14dcc:	e0833004 	add	r3, r3, r4
   14dd0:	e3a02901 	mov	r2, #16384	; 0x4000
   14dd4:	e1a01006 	mov	r1, r6
   14dd8:	e58d301c 	str	r3, [sp, #28]
   14ddc:	eb001b85 	bl	1bbf8 <TargetState::addMemoryBlock(unsigned long, unsigned char const*, unsigned long)>
   14de0:	eaffffc0 	b	14ce8 <McZXSpectrum::fileHandler(char const*, unsigned char const*, int)+0x5bc>
   14de4:	e1a04000 	mov	r4, r0
   14de8:	e1a03004 	mov	r3, r4
   14dec:	e59f25b0 	ldr	r2, [pc, #1456]	; 153a4 <McZXSpectrum::fileHandler(char const*, unsigned char const*, int)+0xc78>
   14df0:	e3a01004 	mov	r1, #4
   14df4:	e59b0000 	ldr	r0, [fp]
   14df8:	ebffd26d 	bl	97b4 <LogWrite>
   14dfc:	eafffff0 	b	14dc4 <McZXSpectrum::fileHandler(char const*, unsigned char const*, int)+0x698>
   14e00:	e3a03901 	mov	r3, #16384	; 0x4000
   14e04:	e58d3020 	str	r3, [sp, #32]
   14e08:	eaffffcc 	b	14d40 <McZXSpectrum::fileHandler(char const*, unsigned char const*, int)+0x614>
   14e0c:	e3a03902 	mov	r3, #32768	; 0x8000
   14e10:	e58d3020 	str	r3, [sp, #32]
   14e14:	eaffffc9 	b	14d40 <McZXSpectrum::fileHandler(char const*, unsigned char const*, int)+0x614>
   14e18:	e1a04009 	mov	r4, r9
   14e1c:	e1a09002 	mov	r9, r2
   14e20:	e3a01000 	mov	r1, #0
   14e24:	e5d43000 	ldrb	r3, [r4]
   14e28:	e5d42001 	ldrb	r2, [r4, #1]
   14e2c:	e5d40015 	ldrb	r0, [r4, #21]
   14e30:	e0822403 	add	r2, r2, r3, lsl #8
   14e34:	e5d43016 	ldrb	r3, [r4, #22]
   14e38:	e58d2044 	str	r2, [sp, #68]	; 0x44
   14e3c:	e5d42002 	ldrb	r2, [r4, #2]
   14e40:	e0833400 	add	r3, r3, r0, lsl #8
   14e44:	e5d40003 	ldrb	r0, [r4, #3]
   14e48:	e58d305c 	str	r3, [sp, #92]	; 0x5c
   14e4c:	e5d4300f 	ldrb	r3, [r4, #15]
   14e50:	e1822400 	orr	r2, r2, r0, lsl #8
   14e54:	e5d40010 	ldrb	r0, [r4, #16]
   14e58:	e58d2040 	str	r2, [sp, #64]	; 0x40
   14e5c:	e5d4200d 	ldrb	r2, [r4, #13]
   14e60:	e1833400 	orr	r3, r3, r0, lsl #8
   14e64:	e5d4000e 	ldrb	r0, [r4, #14]
   14e68:	e58d3058 	str	r3, [sp, #88]	; 0x58
   14e6c:	e5d43011 	ldrb	r3, [r4, #17]
   14e70:	e1822400 	orr	r2, r2, r0, lsl #8
   14e74:	e5d40012 	ldrb	r0, [r4, #18]
   14e78:	e58d203c 	str	r2, [sp, #60]	; 0x3c
   14e7c:	e5d42004 	ldrb	r2, [r4, #4]
   14e80:	e1833400 	orr	r3, r3, r0, lsl #8
   14e84:	e5d40005 	ldrb	r0, [r4, #5]
   14e88:	e58d3054 	str	r3, [sp, #84]	; 0x54
   14e8c:	e5d43013 	ldrb	r3, [r4, #19]
   14e90:	e1822400 	orr	r2, r2, r0, lsl #8
   14e94:	e5d40014 	ldrb	r0, [r4, #20]
   14e98:	e58d2038 	str	r2, [sp, #56]	; 0x38
   14e9c:	e5d42019 	ldrb	r2, [r4, #25]
   14ea0:	e1833400 	orr	r3, r3, r0, lsl #8
   14ea4:	e5d4001a 	ldrb	r0, [r4, #26]
   14ea8:	e58d3050 	str	r3, [sp, #80]	; 0x50
   14eac:	e5d43017 	ldrb	r3, [r4, #23]
   14eb0:	e1822400 	orr	r2, r2, r0, lsl #8
   14eb4:	e5d40018 	ldrb	r0, [r4, #24]
   14eb8:	e58d2048 	str	r2, [sp, #72]	; 0x48
   14ebc:	e1833400 	orr	r3, r3, r0, lsl #8
   14ec0:	e58d304c 	str	r3, [sp, #76]	; 0x4c
   14ec4:	e58d1060 	str	r1, [sp, #96]	; 0x60
   14ec8:	e58d1074 	str	r1, [sp, #116]	; 0x74
   14ecc:	e5d40008 	ldrb	r0, [r4, #8]
   14ed0:	e5d43009 	ldrb	r3, [r4, #9]
   14ed4:	e59d2028 	ldr	r2, [sp, #40]	; 0x28
   14ed8:	e5d41006 	ldrb	r1, [r4, #6]
   14edc:	e3520001 	cmp	r2, #1
   14ee0:	e1800403 	orr	r0, r0, r3, lsl #8
   14ee4:	e5d4200b 	ldrb	r2, [r4, #11]
   14ee8:	e5d43007 	ldrb	r3, [r4, #7]
   14eec:	e202207f 	and	r2, r2, #127	; 0x7f
   14ef0:	e1811403 	orr	r1, r1, r3, lsl #8
   14ef4:	e5d4301d 	ldrb	r3, [r4, #29]
   14ef8:	e58d2068 	str	r2, [sp, #104]	; 0x68
   14efc:	e5d4201b 	ldrb	r2, [r4, #27]
   14f00:	e2033003 	and	r3, r3, #3
   14f04:	e58d306c 	str	r3, [sp, #108]	; 0x6c
   14f08:	e58d2070 	str	r2, [sp, #112]	; 0x70
   14f0c:	15d43020 	ldrbne	r3, [r4, #32]
   14f10:	15d42021 	ldrbne	r2, [r4, #33]	; 0x21
   14f14:	e58d1030 	str	r1, [sp, #48]	; 0x30
   14f18:	e5d4100a 	ldrb	r1, [r4, #10]
   14f1c:	10833402 	addne	r3, r3, r2, lsl #8
   14f20:	e58d0034 	str	r0, [sp, #52]	; 0x34
   14f24:	e28d0030 	add	r0, sp, #48	; 0x30
   14f28:	158d3030 	strne	r3, [sp, #48]	; 0x30
   14f2c:	e58d1064 	str	r1, [sp, #100]	; 0x64
   14f30:	eb001b77 	bl	1bd14 <TargetState::setTargetRegisters(Z80Registers const&)>
   14f34:	e59d101c 	ldr	r1, [sp, #28]
   14f38:	e59f3468 	ldr	r3, [pc, #1128]	; 153a8 <McZXSpectrum::fileHandler(char const*, unsigned char const*, int)+0xc7c>
   14f3c:	e58d100c 	str	r1, [sp, #12]
   14f40:	e59d1018 	ldr	r1, [sp, #24]
   14f44:	e59f2460 	ldr	r2, [pc, #1120]	; 153ac <McZXSpectrum::fileHandler(char const*, unsigned char const*, int)+0xc80>
   14f48:	e3510000 	cmp	r1, #0
   14f4c:	11a02003 	movne	r2, r3
   14f50:	e59d1030 	ldr	r1, [sp, #48]	; 0x30
   14f54:	e59d302c 	ldr	r3, [sp, #44]	; 0x2c
   14f58:	e59b0000 	ldr	r0, [fp]
   14f5c:	e58d3000 	str	r3, [sp]
   14f60:	e58d2004 	str	r2, [sp, #4]
   14f64:	e59d3028 	ldr	r3, [sp, #40]	; 0x28
   14f68:	e58d1010 	str	r1, [sp, #16]
   14f6c:	e58d9008 	str	r9, [sp, #8]
   14f70:	e59f2438 	ldr	r2, [pc, #1080]	; 153b0 <McZXSpectrum::fileHandler(char const*, unsigned char const*, int)+0xc84>
   14f74:	e3a01005 	mov	r1, #5
   14f78:	ebffd20d 	bl	97b4 <LogWrite>
   14f7c:	e1cd23d0 	ldrd	r2, [sp, #48]	; 0x30
   14f80:	e59d104c 	ldr	r1, [sp, #76]	; 0x4c
   14f84:	e59de03c 	ldr	lr, [sp, #60]	; 0x3c
   14f88:	e59dc038 	ldr	ip, [sp, #56]	; 0x38
   14f8c:	e59d0044 	ldr	r0, [sp, #68]	; 0x44
   14f90:	e59d4048 	ldr	r4, [sp, #72]	; 0x48
   14f94:	e58d1014 	str	r1, [sp, #20]
   14f98:	e59d1040 	ldr	r1, [sp, #64]	; 0x40
   14f9c:	e98d5001 	stmib	sp, {r0, ip, lr}
   14fa0:	e58d1000 	str	r1, [sp]
   14fa4:	e58d4010 	str	r4, [sp, #16]
   14fa8:	e28d0078 	add	r0, sp, #120	; 0x78
   14fac:	e59f1400 	ldr	r1, [pc, #1024]	; 153b4 <McZXSpectrum::fileHandler(char const*, unsigned char const*, int)+0xc88>
   14fb0:	ebffd27f 	bl	99b4 <ee_sprintf>
   14fb4:	e28d1078 	add	r1, sp, #120	; 0x78
   14fb8:	e28d0f51 	add	r0, sp, #324	; 0x144
   14fbc:	e3a02f7d 	mov	r2, #500	; 0x1f4
   14fc0:	eb005d4a 	bl	2c4f0 <strlcpy>
   14fc4:	e59d1064 	ldr	r1, [sp, #100]	; 0x64
   14fc8:	e59de068 	ldr	lr, [sp, #104]	; 0x68
   14fcc:	e59dc054 	ldr	ip, [sp, #84]	; 0x54
   14fd0:	e58d1008 	str	r1, [sp, #8]
   14fd4:	e59d1050 	ldr	r1, [sp, #80]	; 0x50
   14fd8:	e58de00c 	str	lr, [sp, #12]
   14fdc:	e88d1002 	stm	sp, {r1, ip}
   14fe0:	e59d3058 	ldr	r3, [sp, #88]	; 0x58
   14fe4:	e59d205c 	ldr	r2, [sp, #92]	; 0x5c
   14fe8:	e28d0078 	add	r0, sp, #120	; 0x78
   14fec:	e59f13c4 	ldr	r1, [pc, #964]	; 153b8 <McZXSpectrum::fileHandler(char const*, unsigned char const*, int)+0xc8c>
   14ff0:	ebffd26f 	bl	99b4 <ee_sprintf>
   14ff4:	e28d1078 	add	r1, sp, #120	; 0x78
   14ff8:	e28d0f51 	add	r0, sp, #324	; 0x144
   14ffc:	e3a02f7d 	mov	r2, #500	; 0x1f4
   15000:	eb005d0a 	bl	2c430 <strlcat>
   15004:	e59dc074 	ldr	ip, [sp, #116]	; 0x74
   15008:	e59d1070 	ldr	r1, [sp, #112]	; 0x70
   1500c:	e59d306c 	ldr	r3, [sp, #108]	; 0x6c
   15010:	e88d1002 	stm	sp, {r1, ip}
   15014:	e59d2060 	ldr	r2, [sp, #96]	; 0x60
   15018:	e28d0078 	add	r0, sp, #120	; 0x78
   1501c:	e59f1398 	ldr	r1, [pc, #920]	; 153bc <McZXSpectrum::fileHandler(char const*, unsigned char const*, int)+0xc90>
   15020:	ebffd263 	bl	99b4 <ee_sprintf>
   15024:	e28d1078 	add	r1, sp, #120	; 0x78
   15028:	e28d0f51 	add	r0, sp, #324	; 0x144
   1502c:	e3a02f7d 	mov	r2, #500	; 0x1f4
   15030:	eb005cfe 	bl	2c430 <strlcat>
   15034:	e28d3f51 	add	r3, sp, #324	; 0x144
   15038:	e59b0000 	ldr	r0, [fp]
   1503c:	e59f237c 	ldr	r2, [pc, #892]	; 153c0 <McZXSpectrum::fileHandler(char const*, unsigned char const*, int)+0xc94>
   15040:	e3a01005 	mov	r1, #5
   15044:	ebffd1da 	bl	97b4 <LogWrite>
   15048:	eafffe3b 	b	1493c <McZXSpectrum::fileHandler(char const*, unsigned char const*, int)+0x210>
   1504c:	e2851007 	add	r1, r5, #7
   15050:	e0498001 	sub	r8, r9, r1
   15054:	e358000a 	cmp	r8, #10
   15058:	a3a0800a 	movge	r8, #10
   1505c:	e28daf51 	add	sl, sp, #324	; 0x144
   15060:	e0841001 	add	r1, r4, r1
   15064:	e2882001 	add	r2, r8, #1
   15068:	e1a0000a 	mov	r0, sl
   1506c:	e58d3018 	str	r3, [sp, #24]
   15070:	eb005d1e 	bl	2c4f0 <strlcpy>
   15074:	e2852012 	add	r2, r5, #18
   15078:	e1590002 	cmp	r9, r2
   1507c:	c2852011 	addgt	r2, r5, #17
   15080:	c0841002 	addgt	r1, r4, r2
   15084:	c5d11001 	ldrbgt	r1, [r1, #1]
   15088:	c7d42002 	ldrbgt	r2, [r4, r2]
   1508c:	e28d3fce 	add	r3, sp, #824	; 0x338
   15090:	e0838008 	add	r8, r3, r8
   15094:	e59d3018 	ldr	r3, [sp, #24]
   15098:	c0822401 	addgt	r2, r2, r1, lsl #8
   1509c:	e2851014 	add	r1, r5, #20
   150a0:	d1a02003 	movle	r2, r3
   150a4:	e1590001 	cmp	r9, r1
   150a8:	d3a01000 	movle	r1, #0
   150ac:	c2851013 	addgt	r1, r5, #19
   150b0:	c0840001 	addgt	r0, r4, r1
   150b4:	c5d00001 	ldrbgt	r0, [r0, #1]
   150b8:	c7d41001 	ldrbgt	r1, [r4, r1]
   150bc:	e2855016 	add	r5, r5, #22
   150c0:	c0811400 	addgt	r1, r1, r0, lsl #8
   150c4:	e1590005 	cmp	r9, r5
   150c8:	e54831f4 	strb	r3, [r8, #-500]	; 0xfffffe0c
   150cc:	c7d43005 	ldrbgt	r3, [r4, r5]
   150d0:	e58d1018 	str	r1, [sp, #24]
   150d4:	e5970000 	ldr	r0, [r7]
   150d8:	e58d3008 	str	r3, [sp, #8]
   150dc:	e59d3018 	ldr	r3, [sp, #24]
   150e0:	e3a01004 	mov	r1, #4
   150e4:	e1cd20f0 	strd	r2, [sp]
   150e8:	e1a0300a 	mov	r3, sl
   150ec:	e59f22d0 	ldr	r2, [pc, #720]	; 153c4 <McZXSpectrum::fileHandler(char const*, unsigned char const*, int)+0xc98>
   150f0:	ebffd1af 	bl	97b4 <LogWrite>
   150f4:	eafffeb2 	b	14bc4 <McZXSpectrum::fileHandler(char const*, unsigned char const*, int)+0x498>
   150f8:	e2851007 	add	r1, r5, #7
   150fc:	e0498001 	sub	r8, r9, r1
   15100:	e358000a 	cmp	r8, #10
   15104:	a3a0800a 	movge	r8, #10
   15108:	e28daf51 	add	sl, sp, #324	; 0x144
   1510c:	e0841001 	add	r1, r4, r1
   15110:	e2882001 	add	r2, r8, #1
   15114:	e1a0000a 	mov	r0, sl
   15118:	e58d301c 	str	r3, [sp, #28]
   1511c:	eb005cf3 	bl	2c4f0 <strlcpy>
   15120:	e2852012 	add	r2, r5, #18
   15124:	e1590002 	cmp	r9, r2
   15128:	c2852011 	addgt	r2, r5, #17
   1512c:	c0841002 	addgt	r1, r4, r2
   15130:	c5d11001 	ldrbgt	r1, [r1, #1]
   15134:	c7d42002 	ldrbgt	r2, [r4, r2]
   15138:	e28d3fce 	add	r3, sp, #824	; 0x338
   1513c:	e0838008 	add	r8, r3, r8
   15140:	e59d301c 	ldr	r3, [sp, #28]
   15144:	c0822401 	addgt	r2, r2, r1, lsl #8
   15148:	e2851014 	add	r1, r5, #20
   1514c:	d1a02003 	movle	r2, r3
   15150:	e1590001 	cmp	r9, r1
   15154:	d3a01000 	movle	r1, #0
   15158:	e2855016 	add	r5, r5, #22
   1515c:	c7d41001 	ldrbgt	r1, [r4, r1]
   15160:	e1590005 	cmp	r9, r5
   15164:	e54831f4 	strb	r3, [r8, #-500]	; 0xfffffe0c
   15168:	c7d43005 	ldrbgt	r3, [r4, r5]
   1516c:	e5970000 	ldr	r0, [r7]
   15170:	e98d000a 	stmib	sp, {r1, r3}
   15174:	e58d2000 	str	r2, [sp]
   15178:	e1a0300a 	mov	r3, sl
   1517c:	e59f2244 	ldr	r2, [pc, #580]	; 153c8 <McZXSpectrum::fileHandler(char const*, unsigned char const*, int)+0xc9c>
   15180:	e3a01004 	mov	r1, #4
   15184:	ebffd18a 	bl	97b4 <LogWrite>
   15188:	eafffe8d 	b	14bc4 <McZXSpectrum::fileHandler(char const*, unsigned char const*, int)+0x498>
   1518c:	e59f6204 	ldr	r6, [pc, #516]	; 15398 <McZXSpectrum::fileHandler(char const*, unsigned char const*, int)+0xc6c>
   15190:	e2055020 	and	r5, r5, #32
   15194:	e1a03006 	mov	r3, r6
   15198:	e284201e 	add	r2, r4, #30
   1519c:	e59f7228 	ldr	r7, [pc, #552]	; 153cc <McZXSpectrum::fileHandler(char const*, unsigned char const*, int)+0xca0>
   151a0:	ea000002 	b	151b0 <McZXSpectrum::fileHandler(char const*, unsigned char const*, int)+0xa84>
   151a4:	e5c31000 	strb	r1, [r3]
   151a8:	e2822001 	add	r2, r2, #1
   151ac:	e2833001 	add	r3, r3, #1
   151b0:	e043c006 	sub	ip, r3, r6
   151b4:	e15c0007 	cmp	ip, r7
   151b8:	ca00004a 	bgt	152e8 <McZXSpectrum::fileHandler(char const*, unsigned char const*, int)+0xbbc>
   151bc:	e3550000 	cmp	r5, #0
   151c0:	e5d21000 	ldrb	r1, [r2]
   151c4:	0afffff6 	beq	151a4 <McZXSpectrum::fileHandler(char const*, unsigned char const*, int)+0xa78>
   151c8:	e35100ed 	cmp	r1, #237	; 0xed
   151cc:	1afffff4 	bne	151a4 <McZXSpectrum::fileHandler(char const*, unsigned char const*, int)+0xa78>
   151d0:	e5d20001 	ldrb	r0, [r2, #1]
   151d4:	e35000ed 	cmp	r0, #237	; 0xed
   151d8:	1afffff1 	bne	151a4 <McZXSpectrum::fileHandler(char const*, unsigned char const*, int)+0xa78>
   151dc:	e5d28002 	ldrb	r8, [r2, #2]
   151e0:	e282a004 	add	sl, r2, #4
   151e4:	e3580000 	cmp	r8, #0
   151e8:	0a00003e 	beq	152e8 <McZXSpectrum::fileHandler(char const*, unsigned char const*, int)+0xbbc>
   151ec:	e5d21003 	ldrb	r1, [r2, #3]
   151f0:	e1a00003 	mov	r0, r3
   151f4:	e1a02008 	mov	r2, r8
   151f8:	eb005b41 	bl	2bf04 <memset>
   151fc:	e1a0200a 	mov	r2, sl
   15200:	e0803008 	add	r3, r0, r8
   15204:	eaffffe9 	b	151b0 <McZXSpectrum::fileHandler(char const*, unsigned char const*, int)+0xa84>
   15208:	e59f3158 	ldr	r3, [pc, #344]	; 15368 <McZXSpectrum::fileHandler(char const*, unsigned char const*, int)+0xc3c>
   1520c:	e59f21bc 	ldr	r2, [pc, #444]	; 153d0 <McZXSpectrum::fileHandler(char const*, unsigned char const*, int)+0xca4>
   15210:	e5930000 	ldr	r0, [r3]
   15214:	e3a01004 	mov	r1, #4
   15218:	ebffd165 	bl	97b4 <LogWrite>
   1521c:	eafffdc6 	b	1493c <McZXSpectrum::fileHandler(char const*, unsigned char const*, int)+0x210>
   15220:	e2851007 	add	r1, r5, #7
   15224:	e0498001 	sub	r8, r9, r1
   15228:	e358000a 	cmp	r8, #10
   1522c:	a3a0800a 	movge	r8, #10
   15230:	e28daf51 	add	sl, sp, #324	; 0x144
   15234:	e0841001 	add	r1, r4, r1
   15238:	e2882001 	add	r2, r8, #1
   1523c:	e1a0000a 	mov	r0, sl
   15240:	e58d301c 	str	r3, [sp, #28]
   15244:	eb005ca9 	bl	2c4f0 <strlcpy>
   15248:	e2852012 	add	r2, r5, #18
   1524c:	e1590002 	cmp	r9, r2
   15250:	c2852011 	addgt	r2, r5, #17
   15254:	c0841002 	addgt	r1, r4, r2
   15258:	c5d11001 	ldrbgt	r1, [r1, #1]
   1525c:	c7d42002 	ldrbgt	r2, [r4, r2]
   15260:	e28d3fce 	add	r3, sp, #824	; 0x338
   15264:	e0838008 	add	r8, r3, r8
   15268:	e59d301c 	ldr	r3, [sp, #28]
   1526c:	c0822401 	addgt	r2, r2, r1, lsl #8
   15270:	e2851014 	add	r1, r5, #20
   15274:	d1a02003 	movle	r2, r3
   15278:	e1590001 	cmp	r9, r1
   1527c:	d3a01000 	movle	r1, #0
   15280:	e2855016 	add	r5, r5, #22
   15284:	c7d41001 	ldrbgt	r1, [r4, r1]
   15288:	e1590005 	cmp	r9, r5
   1528c:	e54831f4 	strb	r3, [r8, #-500]	; 0xfffffe0c
   15290:	c7d43005 	ldrbgt	r3, [r4, r5]
   15294:	e5970000 	ldr	r0, [r7]
   15298:	e98d000a 	stmib	sp, {r1, r3}
   1529c:	e58d2000 	str	r2, [sp]
   152a0:	e1a0300a 	mov	r3, sl
   152a4:	e59f2128 	ldr	r2, [pc, #296]	; 153d4 <McZXSpectrum::fileHandler(char const*, unsigned char const*, int)+0xca8>
   152a8:	e3a01004 	mov	r1, #4
   152ac:	ebffd140 	bl	97b4 <LogWrite>
   152b0:	eafffe43 	b	14bc4 <McZXSpectrum::fileHandler(char const*, unsigned char const*, int)+0x498>
   152b4:	e28d0f51 	add	r0, sp, #324	; 0x144
   152b8:	e3a02010 	mov	r2, #16
   152bc:	e3a01000 	mov	r1, #0
   152c0:	eb005fe0 	bl	2d248 <strtol>
   152c4:	e6ff3070 	uxth	r3, r0
   152c8:	e1a05003 	mov	r5, r3
   152cc:	eafffdda 	b	14a3c <McZXSpectrum::fileHandler(char const*, unsigned char const*, int)+0x310>
   152d0:	e59f30bc 	ldr	r3, [pc, #188]	; 15394 <McZXSpectrum::fileHandler(char const*, unsigned char const*, int)+0xc68>
   152d4:	e59f20fc 	ldr	r2, [pc, #252]	; 153d8 <McZXSpectrum::fileHandler(char const*, unsigned char const*, int)+0xcac>
   152d8:	e5930000 	ldr	r0, [r3]
   152dc:	e3a01004 	mov	r1, #4
   152e0:	ebffd133 	bl	97b4 <LogWrite>
   152e4:	eafffd94 	b	1493c <McZXSpectrum::fileHandler(char const*, unsigned char const*, int)+0x210>
   152e8:	e2953000 	adds	r3, r5, #0
   152ec:	13a03001 	movne	r3, #1
   152f0:	e59f10a0 	ldr	r1, [pc, #160]	; 15398 <McZXSpectrum::fileHandler(char const*, unsigned char const*, int)+0xc6c>
   152f4:	e3a00901 	mov	r0, #16384	; 0x4000
   152f8:	e3a02903 	mov	r2, #49152	; 0xc000
   152fc:	e58d3018 	str	r3, [sp, #24]
   15300:	e58dc01c 	str	ip, [sp, #28]
   15304:	eb001a3b 	bl	1bbf8 <TargetState::addMemoryBlock(unsigned long, unsigned char const*, unsigned long)>
   15308:	e3a00001 	mov	r0, #1
   1530c:	e3a01000 	mov	r1, #0
   15310:	e59fb07c 	ldr	fp, [pc, #124]	; 15394 <McZXSpectrum::fileHandler(char const*, unsigned char const*, int)+0xc68>
   15314:	e1cd02f8 	strd	r0, [sp, #40]	; 0x28
   15318:	eafffec0 	b	14e20 <McZXSpectrum::fileHandler(char const*, unsigned char const*, int)+0x6f4>
   1531c:	e59f3030 	ldr	r3, [pc, #48]	; 15354 <McZXSpectrum::fileHandler(char const*, unsigned char const*, int)+0xc28>
   15320:	e59f20b0 	ldr	r2, [pc, #176]	; 153d8 <McZXSpectrum::fileHandler(char const*, unsigned char const*, int)+0xcac>
   15324:	e5930000 	ldr	r0, [r3]
   15328:	e3a01004 	mov	r1, #4
   1532c:	ebffd120 	bl	97b4 <LogWrite>
   15330:	eafffd81 	b	1493c <McZXSpectrum::fileHandler(char const*, unsigned char const*, int)+0x210>
   15334:	0002e604 	.word	0x0002e604
   15338:	00030360 	.word	0x00030360
   1533c:	0002f524 	.word	0x0002f524
   15340:	0002f6e0 	.word	0x0002f6e0
   15344:	0002f7c0 	.word	0x0002f7c0
   15348:	00042200 	.word	0x00042200
   1534c:	0002f7c8 	.word	0x0002f7c8
   15350:	0000c01a 	.word	0x0000c01a
   15354:	00042070 	.word	0x00042070
   15358:	0002f7e4 	.word	0x0002f7e4
   1535c:	0002f52c 	.word	0x0002f52c
   15360:	0002f548 	.word	0x0002f548
   15364:	00005ccb 	.word	0x00005ccb
   15368:	00042074 	.word	0x00042074
   1536c:	0002f6c0 	.word	0x0002f6c0
   15370:	0002f2cc 	.word	0x0002f2cc
   15374:	0002f2d8 	.word	0x0002f2d8
   15378:	0002f560 	.word	0x0002f560
   1537c:	0002f588 	.word	0x0002f588
   15380:	0002f8e8 	.word	0x0002f8e8
   15384:	0002f6a8 	.word	0x0002f6a8
   15388:	0002f680 	.word	0x0002f680
   1538c:	0002f694 	.word	0x0002f694
   15390:	0002f6e8 	.word	0x0002f6e8
   15394:	00042078 	.word	0x00042078
   15398:	00046a24 	.word	0x00046a24
   1539c:	0002f728 	.word	0x0002f728
   153a0:	00003fff 	.word	0x00003fff
   153a4:	0002f758 	.word	0x0002f758
   153a8:	0002ee4c 	.word	0x0002ee4c
   153ac:	0002ee30 	.word	0x0002ee30
   153b0:	0002f778 	.word	0x0002f778
   153b4:	0002ef74 	.word	0x0002ef74
   153b8:	0002efb4 	.word	0x0002efb4
   153bc:	0002efe8 	.word	0x0002efe8
   153c0:	0002f024 	.word	0x0002f024
   153c4:	0002f648 	.word	0x0002f648
   153c8:	0002f5d4 	.word	0x0002f5d4
   153cc:	0000bfff 	.word	0x0000bfff
   153d0:	0002f550 	.word	0x0002f550
   153d4:	0002f60c 	.word	0x0002f60c
   153d8:	0002f704 	.word	0x0002f704

000153dc <McZXSpectrum::McZXSpectrum()>:
   153dc:	e92d4010 	push	{r4, lr}
   153e0:	e1a04000 	mov	r4, r0
   153e4:	ebfff09b 	bl	11658 <McBase::McBase()>
   153e8:	e3e02000 	mvn	r2, #0
   153ec:	e3a0c000 	mov	ip, #0
   153f0:	e59f301c 	ldr	r3, [pc, #28]	; 15414 <McZXSpectrum::McZXSpectrum()+0x38>
   153f4:	e59f001c 	ldr	r0, [pc, #28]	; 15418 <McZXSpectrum::McZXSpectrum()+0x3c>
   153f8:	e2841a01 	add	r1, r4, #4096	; 0x1000
   153fc:	e5840000 	str	r0, [r4]
   15400:	e1a00004 	mov	r0, r4
   15404:	e5c1cb04 	strb	ip, [r1, #2820]	; 0xb04
   15408:	e5832000 	str	r2, [r3]
   1540c:	e5832004 	str	r2, [r3, #4]
   15410:	e8bd8010 	pop	{r4, pc}
   15414:	00046a1c 	.word	0x00046a1c
   15418:	0002f4fc 	.word	0x0002f4fc

0001541c <McZXSpectrum::getKeyBitmap(int const*, int, unsigned char const*)>:
   1541c:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   15420:	e3a060ff 	mov	r6, #255	; 0xff
   15424:	e2400004 	sub	r0, r0, #4
   15428:	e2827006 	add	r7, r2, #6
   1542c:	e0805101 	add	r5, r0, r1, lsl #2
   15430:	e3510000 	cmp	r1, #0
   15434:	da000008 	ble	1545c <McZXSpectrum::getKeyBitmap(int const*, int, unsigned char const*)+0x40>
   15438:	e1a03000 	mov	r3, r0
   1543c:	e3a0c001 	mov	ip, #1
   15440:	e5d24000 	ldrb	r4, [r2]
   15444:	e5b3e004 	ldr	lr, [r3, #4]!
   15448:	e154000e 	cmp	r4, lr
   1544c:	01c6600c 	biceq	r6, r6, ip
   15450:	e1550003 	cmp	r5, r3
   15454:	e1a0c08c 	lsl	ip, ip, #1
   15458:	1afffff9 	bne	15444 <McZXSpectrum::getKeyBitmap(int const*, int, unsigned char const*)+0x28>
   1545c:	e2822001 	add	r2, r2, #1
   15460:	e1520007 	cmp	r2, r7
   15464:	1afffff1 	bne	15430 <McZXSpectrum::getKeyBitmap(int const*, int, unsigned char const*)+0x14>
   15468:	e1a00006 	mov	r0, r6
   1546c:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}

00015470 <McZXSpectrum::getDescriptorTable(int)>:
   15470:	e59f0000 	ldr	r0, [pc]	; 15478 <McZXSpectrum::getDescriptorTable(int)+0x8>
   15474:	e12fff1e 	bx	lr
   15478:	00042200 	.word	0x00042200

0001547c <CInterrupts::setup()>:
   1547c:	e3e02000 	mvn	r2, #0
   15480:	e3a01000 	mov	r1, #0
   15484:	e92d4010 	push	{r4, lr}
   15488:	e59f3018 	ldr	r3, [pc, #24]	; 154a8 <CInterrupts::setup()+0x2c>
   1548c:	e583120c 	str	r1, [r3, #524]	; 0x20c
   15490:	e583221c 	str	r2, [r3, #540]	; 0x21c
   15494:	e5832220 	str	r2, [r3, #544]	; 0x220
   15498:	e5832224 	str	r2, [r3, #548]	; 0x224
   1549c:	ebffcb0d 	bl	80d8 <lowlev_enable_irq>
   154a0:	e8bd4010 	pop	{r4, lr}
   154a4:	eaffcb11 	b	80f0 <lowlev_enable_fiq>
   154a8:	2000b000 	.word	0x2000b000

000154ac <CInterrupts::connectIRQ(unsigned int, void (*)(void*), void*)>:
   154ac:	e16f3f11 	clz	r3, r1
   154b0:	e1a032a3 	lsr	r3, r3, #5
   154b4:	e3500047 	cmp	r0, #71	; 0x47
   154b8:	83833001 	orrhi	r3, r3, #1
   154bc:	e3530000 	cmp	r3, #0
   154c0:	112fff1e 	bxne	lr
   154c4:	e59f303c 	ldr	r3, [pc, #60]	; 15508 <CInterrupts::connectIRQ(unsigned int, void (*)(void*), void*)+0x5c>
   154c8:	e350001f 	cmp	r0, #31
   154cc:	e083c100 	add	ip, r3, r0, lsl #2
   154d0:	e7831100 	str	r1, [r3, r0, lsl #2]
   154d4:	e58c2120 	str	r2, [ip, #288]	; 0x120
   154d8:	8a000005 	bhi	154f4 <CInterrupts::connectIRQ(unsigned int, void (*)(void*), void*)+0x48>
   154dc:	e59f2028 	ldr	r2, [pc, #40]	; 1550c <CInterrupts::connectIRQ(unsigned int, void (*)(void*), void*)+0x60>
   154e0:	e3a03001 	mov	r3, #1
   154e4:	e200001f 	and	r0, r0, #31
   154e8:	e1a00013 	lsl	r0, r3, r0
   154ec:	e5820000 	str	r0, [r2]
   154f0:	e12fff1e 	bx	lr
   154f4:	e59f3014 	ldr	r3, [pc, #20]	; 15510 <CInterrupts::connectIRQ(unsigned int, void (*)(void*), void*)+0x64>
   154f8:	e350003f 	cmp	r0, #63	; 0x3f
   154fc:	e59f2010 	ldr	r2, [pc, #16]	; 15514 <CInterrupts::connectIRQ(unsigned int, void (*)(void*), void*)+0x68>
   15500:	91a02003 	movls	r2, r3
   15504:	eafffff5 	b	154e0 <CInterrupts::connectIRQ(unsigned int, void (*)(void*), void*)+0x34>
   15508:	00052a24 	.word	0x00052a24
   1550c:	2000b210 	.word	0x2000b210
   15510:	2000b214 	.word	0x2000b214
   15514:	2000b218 	.word	0x2000b218

00015518 <CInterrupts::disconnectIRQ(unsigned int)>:
   15518:	e3500047 	cmp	r0, #71	; 0x47
   1551c:	812fff1e 	bxhi	lr
   15520:	e3a03001 	mov	r3, #1
   15524:	e200201f 	and	r2, r0, #31
   15528:	e350001f 	cmp	r0, #31
   1552c:	e1a03213 	lsl	r3, r3, r2
   15530:	8a000007 	bhi	15554 <CInterrupts::disconnectIRQ(unsigned int)+0x3c>
   15534:	e59fc02c 	ldr	ip, [pc, #44]	; 15568 <CInterrupts::disconnectIRQ(unsigned int)+0x50>
   15538:	e3a01000 	mov	r1, #0
   1553c:	e59f2028 	ldr	r2, [pc, #40]	; 1556c <CInterrupts::disconnectIRQ(unsigned int)+0x54>
   15540:	e58c3000 	str	r3, [ip]
   15544:	e0823100 	add	r3, r2, r0, lsl #2
   15548:	e5831120 	str	r1, [r3, #288]	; 0x120
   1554c:	e7821100 	str	r1, [r2, r0, lsl #2]
   15550:	e12fff1e 	bx	lr
   15554:	e59f2014 	ldr	r2, [pc, #20]	; 15570 <CInterrupts::disconnectIRQ(unsigned int)+0x58>
   15558:	e350003f 	cmp	r0, #63	; 0x3f
   1555c:	e59fc010 	ldr	ip, [pc, #16]	; 15574 <CInterrupts::disconnectIRQ(unsigned int)+0x5c>
   15560:	81a0c002 	movhi	ip, r2
   15564:	eafffff3 	b	15538 <CInterrupts::disconnectIRQ(unsigned int)+0x20>
   15568:	2000b21c 	.word	0x2000b21c
   1556c:	00052a24 	.word	0x00052a24
   15570:	2000b224 	.word	0x2000b224
   15574:	2000b220 	.word	0x2000b220

00015578 <CInterrupts::connectFIQ(unsigned int, void (*)(void*), void*)>:
   15578:	e16f3f11 	clz	r3, r1
   1557c:	e1a032a3 	lsr	r3, r3, #5
   15580:	e3500047 	cmp	r0, #71	; 0x47
   15584:	83833001 	orrhi	r3, r3, #1
   15588:	e3530000 	cmp	r3, #0
   1558c:	112fff1e 	bxne	lr
   15590:	e59f301c 	ldr	r3, [pc, #28]	; 155b4 <CInterrupts::connectFIQ(unsigned int, void (*)(void*), void*)+0x3c>
   15594:	e59fc01c 	ldr	ip, [pc, #28]	; 155b8 <CInterrupts::connectFIQ(unsigned int, void (*)(void*), void*)+0x40>
   15598:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   1559c:	e380e080 	orr	lr, r0, #128	; 0x80
   155a0:	e5830240 	str	r0, [r3, #576]	; 0x240
   155a4:	e5831244 	str	r1, [r3, #580]	; 0x244
   155a8:	e5832248 	str	r2, [r3, #584]	; 0x248
   155ac:	e58ce20c 	str	lr, [ip, #524]	; 0x20c
   155b0:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
   155b4:	00052a24 	.word	0x00052a24
   155b8:	2000b000 	.word	0x2000b000

000155bc <CInterrupts::disconnectFIQ()>:
   155bc:	e3a03000 	mov	r3, #0
   155c0:	e59f2010 	ldr	r2, [pc, #16]	; 155d8 <CInterrupts::disconnectFIQ()+0x1c>
   155c4:	e59f1010 	ldr	r1, [pc, #16]	; 155dc <CInterrupts::disconnectFIQ()+0x20>
   155c8:	e581320c 	str	r3, [r1, #524]	; 0x20c
   155cc:	e5823244 	str	r3, [r2, #580]	; 0x244
   155d0:	e5823248 	str	r3, [r2, #584]	; 0x248
   155d4:	e12fff1e 	bx	lr
   155d8:	00052a24 	.word	0x00052a24
   155dc:	2000b000 	.word	0x2000b000

000155e0 <CInterrupts::enableIRQ(unsigned int)>:
   155e0:	e3500047 	cmp	r0, #71	; 0x47
   155e4:	812fff1e 	bxhi	lr
   155e8:	e3a03001 	mov	r3, #1
   155ec:	e200201f 	and	r2, r0, #31
   155f0:	e350001f 	cmp	r0, #31
   155f4:	e1a03213 	lsl	r3, r3, r2
   155f8:	8a000002 	bhi	15608 <CInterrupts::enableIRQ(unsigned int)+0x28>
   155fc:	e59f0020 	ldr	r0, [pc, #32]	; 15624 <CInterrupts::enableIRQ(unsigned int)+0x44>
   15600:	e5803000 	str	r3, [r0]
   15604:	e12fff1e 	bx	lr
   15608:	e59f2018 	ldr	r2, [pc, #24]	; 15628 <CInterrupts::enableIRQ(unsigned int)+0x48>
   1560c:	e59f1018 	ldr	r1, [pc, #24]	; 1562c <CInterrupts::enableIRQ(unsigned int)+0x4c>
   15610:	e350003f 	cmp	r0, #63	; 0x3f
   15614:	91a00002 	movls	r0, r2
   15618:	81a00001 	movhi	r0, r1
   1561c:	e5803000 	str	r3, [r0]
   15620:	e12fff1e 	bx	lr
   15624:	2000b210 	.word	0x2000b210
   15628:	2000b214 	.word	0x2000b214
   1562c:	2000b218 	.word	0x2000b218

00015630 <CInterrupts::disableIRQ(unsigned int)>:
   15630:	e3500047 	cmp	r0, #71	; 0x47
   15634:	812fff1e 	bxhi	lr
   15638:	e3a03001 	mov	r3, #1
   1563c:	e200201f 	and	r2, r0, #31
   15640:	e350001f 	cmp	r0, #31
   15644:	e1a03213 	lsl	r3, r3, r2
   15648:	8a000002 	bhi	15658 <CInterrupts::disableIRQ(unsigned int)+0x28>
   1564c:	e59f0020 	ldr	r0, [pc, #32]	; 15674 <CInterrupts::disableIRQ(unsigned int)+0x44>
   15650:	e5803000 	str	r3, [r0]
   15654:	e12fff1e 	bx	lr
   15658:	e59f2018 	ldr	r2, [pc, #24]	; 15678 <CInterrupts::disableIRQ(unsigned int)+0x48>
   1565c:	e59f1018 	ldr	r1, [pc, #24]	; 1567c <CInterrupts::disableIRQ(unsigned int)+0x4c>
   15660:	e350003f 	cmp	r0, #63	; 0x3f
   15664:	91a00002 	movls	r0, r2
   15668:	81a00001 	movhi	r0, r1
   1566c:	e5803000 	str	r3, [r0]
   15670:	e12fff1e 	bx	lr
   15674:	2000b21c 	.word	0x2000b21c
   15678:	2000b220 	.word	0x2000b220
   1567c:	2000b224 	.word	0x2000b224

00015680 <CInterrupts::enableFIQ(unsigned int)>:
   15680:	e3500047 	cmp	r0, #71	; 0x47
   15684:	959f3008 	ldrls	r3, [pc, #8]	; 15694 <CInterrupts::enableFIQ(unsigned int)+0x14>
   15688:	93800080 	orrls	r0, r0, #128	; 0x80
   1568c:	9583020c 	strls	r0, [r3, #524]	; 0x20c
   15690:	e12fff1e 	bx	lr
   15694:	2000b000 	.word	0x2000b000

00015698 <CInterrupts::disableFIQ()>:
   15698:	e3a02000 	mov	r2, #0
   1569c:	e59f3004 	ldr	r3, [pc, #4]	; 156a8 <CInterrupts::disableFIQ()+0x10>
   156a0:	e583220c 	str	r2, [r3, #524]	; 0x20c
   156a4:	e12fff1e 	bx	lr
   156a8:	2000b000 	.word	0x2000b000

000156ac <CInterrupts::irqHandler(unsigned int)>:
   156ac:	e3500047 	cmp	r0, #71	; 0x47
   156b0:	8a000009 	bhi	156dc <CInterrupts::irqHandler(unsigned int)+0x30>
   156b4:	e59f3064 	ldr	r3, [pc, #100]	; 15720 <CInterrupts::irqHandler(unsigned int)+0x74>
   156b8:	e7932100 	ldr	r2, [r3, r0, lsl #2]
   156bc:	e3520000 	cmp	r2, #0
   156c0:	0a000007 	beq	156e4 <CInterrupts::irqHandler(unsigned int)+0x38>
   156c4:	e0830100 	add	r0, r3, r0, lsl #2
   156c8:	e92d4010 	push	{r4, lr}
   156cc:	e5900120 	ldr	r0, [r0, #288]	; 0x120
   156d0:	e12fff32 	blx	r2
   156d4:	e3a00001 	mov	r0, #1
   156d8:	e8bd8010 	pop	{r4, pc}
   156dc:	e3a00000 	mov	r0, #0
   156e0:	e12fff1e 	bx	lr
   156e4:	e3a03001 	mov	r3, #1
   156e8:	e200201f 	and	r2, r0, #31
   156ec:	e350001f 	cmp	r0, #31
   156f0:	e1a03213 	lsl	r3, r3, r2
   156f4:	9a000007 	bls	15718 <CInterrupts::irqHandler(unsigned int)+0x6c>
   156f8:	e59f2024 	ldr	r2, [pc, #36]	; 15724 <CInterrupts::irqHandler(unsigned int)+0x78>
   156fc:	e59f1024 	ldr	r1, [pc, #36]	; 15728 <CInterrupts::irqHandler(unsigned int)+0x7c>
   15700:	e350003f 	cmp	r0, #63	; 0x3f
   15704:	91a00002 	movls	r0, r2
   15708:	81a00001 	movhi	r0, r1
   1570c:	e5803000 	str	r3, [r0]
   15710:	e3a00000 	mov	r0, #0
   15714:	e12fff1e 	bx	lr
   15718:	e59f000c 	ldr	r0, [pc, #12]	; 1572c <CInterrupts::irqHandler(unsigned int)+0x80>
   1571c:	eafffffa 	b	1570c <CInterrupts::irqHandler(unsigned int)+0x60>
   15720:	00052a24 	.word	0x00052a24
   15724:	2000b220 	.word	0x2000b220
   15728:	2000b224 	.word	0x2000b224
   1572c:	2000b21c 	.word	0x2000b21c

00015730 <CInterrupts::interruptService()>:
   15730:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   15734:	e3a00000 	mov	r0, #0
   15738:	e3a05001 	mov	r5, #1
   1573c:	e59f30c0 	ldr	r3, [pc, #192]	; 15804 <CInterrupts::interruptService()+0xd4>
   15740:	e24dd010 	sub	sp, sp, #16
   15744:	e5931204 	ldr	r1, [r3, #516]	; 0x204
   15748:	e5932208 	ldr	r2, [r3, #520]	; 0x208
   1574c:	e5933200 	ldr	r3, [r3, #512]	; 0x200
   15750:	e59fc0b0 	ldr	ip, [pc, #176]	; 15808 <CInterrupts::interruptService()+0xd8>
   15754:	e6ef3073 	uxtb	r3, r3
   15758:	e1cd20f8 	strd	r2, [sp, #8]
   1575c:	e59f70a8 	ldr	r7, [pc, #168]	; 1580c <CInterrupts::interruptService()+0xdc>
   15760:	e59f80a8 	ldr	r8, [pc, #168]	; 15810 <CInterrupts::interruptService()+0xe0>
   15764:	e59f60a8 	ldr	r6, [pc, #168]	; 15814 <CInterrupts::interruptService()+0xe4>
   15768:	e58d1004 	str	r1, [sp, #4]
   1576c:	e28de004 	add	lr, sp, #4
   15770:	e79e3100 	ldr	r3, [lr, r0, lsl #2]
   15774:	e3530000 	cmp	r3, #0
   15778:	1a000004 	bne	15790 <CInterrupts::interruptService()+0x60>
   1577c:	e2800001 	add	r0, r0, #1
   15780:	e3500003 	cmp	r0, #3
   15784:	1afffff9 	bne	15770 <CInterrupts::interruptService()+0x40>
   15788:	e28dd010 	add	sp, sp, #16
   1578c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   15790:	e1a01280 	lsl	r1, r0, #5
   15794:	ea000002 	b	157a4 <CInterrupts::interruptService()+0x74>
   15798:	e1b030a3 	lsrs	r3, r3, #1
   1579c:	e2811001 	add	r1, r1, #1
   157a0:	0afffff5 	beq	1577c <CInterrupts::interruptService()+0x4c>
   157a4:	e1e02003 	mvn	r2, r3
   157a8:	e3510047 	cmp	r1, #71	; 0x47
   157ac:	83822001 	orrhi	r2, r2, #1
   157b0:	e3120001 	tst	r2, #1
   157b4:	1afffff7 	bne	15798 <CInterrupts::interruptService()+0x68>
   157b8:	e79c2101 	ldr	r2, [ip, r1, lsl #2]
   157bc:	e1a04101 	lsl	r4, r1, #2
   157c0:	e3520000 	cmp	r2, #0
   157c4:	0a000004 	beq	157dc <CInterrupts::interruptService()+0xac>
   157c8:	e08cc004 	add	ip, ip, r4
   157cc:	e59c0120 	ldr	r0, [ip, #288]	; 0x120
   157d0:	e28dd010 	add	sp, sp, #16
   157d4:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   157d8:	e12fff12 	bx	r2
   157dc:	e351001f 	cmp	r1, #31
   157e0:	e201201f 	and	r2, r1, #31
   157e4:	e1a02215 	lsl	r2, r5, r2
   157e8:	91a04007 	movls	r4, r7
   157ec:	9a000002 	bls	157fc <CInterrupts::interruptService()+0xcc>
   157f0:	e351003f 	cmp	r1, #63	; 0x3f
   157f4:	91a04008 	movls	r4, r8
   157f8:	81a04006 	movhi	r4, r6
   157fc:	e5842000 	str	r2, [r4]
   15800:	eaffffe4 	b	15798 <CInterrupts::interruptService()+0x68>
   15804:	2000b000 	.word	0x2000b000
   15808:	00052a24 	.word	0x00052a24
   1580c:	2000b21c 	.word	0x2000b21c
   15810:	2000b220 	.word	0x2000b220
   15814:	2000b224 	.word	0x2000b224

00015818 <CInterrupts::fiqService()>:
   15818:	e59f2010 	ldr	r2, [pc, #16]	; 15830 <CInterrupts::fiqService()+0x18>
   1581c:	e5923244 	ldr	r3, [r2, #580]	; 0x244
   15820:	e3530000 	cmp	r3, #0
   15824:	012fff1e 	bxeq	lr
   15828:	e5920248 	ldr	r0, [r2, #584]	; 0x248
   1582c:	e12fff13 	bx	r3
   15830:	00052a24 	.word	0x00052a24

00015834 <irq_handler_>:
   15834:	e24ee004 	sub	lr, lr, #4
   15838:	e92d51ff 	push	{r0, r1, r2, r3, r4, r5, r6, r7, r8, ip, lr}
   1583c:	e3a00000 	mov	r0, #0
   15840:	e3a05001 	mov	r5, #1
   15844:	e59f30c0 	ldr	r3, [pc, #192]	; 1590c <irq_handler_+0xd8>
   15848:	e24dd014 	sub	sp, sp, #20
   1584c:	e5931204 	ldr	r1, [r3, #516]	; 0x204
   15850:	e5932208 	ldr	r2, [r3, #520]	; 0x208
   15854:	e5933200 	ldr	r3, [r3, #512]	; 0x200
   15858:	e59fc0b0 	ldr	ip, [pc, #176]	; 15910 <irq_handler_+0xdc>
   1585c:	e6ef3073 	uxtb	r3, r3
   15860:	e1cd20f8 	strd	r2, [sp, #8]
   15864:	e59f70a8 	ldr	r7, [pc, #168]	; 15914 <irq_handler_+0xe0>
   15868:	e59f80a8 	ldr	r8, [pc, #168]	; 15918 <irq_handler_+0xe4>
   1586c:	e59f60a8 	ldr	r6, [pc, #168]	; 1591c <irq_handler_+0xe8>
   15870:	e58d1004 	str	r1, [sp, #4]
   15874:	e28de004 	add	lr, sp, #4
   15878:	e79e3100 	ldr	r3, [lr, r0, lsl #2]
   1587c:	e3530000 	cmp	r3, #0
   15880:	1a000004 	bne	15898 <irq_handler_+0x64>
   15884:	e2800001 	add	r0, r0, #1
   15888:	e3500003 	cmp	r0, #3
   1588c:	1afffff9 	bne	15878 <irq_handler_+0x44>
   15890:	e28dd014 	add	sp, sp, #20
   15894:	e8fd91ff 	ldm	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, ip, pc}^
   15898:	e1a01280 	lsl	r1, r0, #5
   1589c:	ea000002 	b	158ac <irq_handler_+0x78>
   158a0:	e1b030a3 	lsrs	r3, r3, #1
   158a4:	e2811001 	add	r1, r1, #1
   158a8:	0afffff5 	beq	15884 <irq_handler_+0x50>
   158ac:	e1e02003 	mvn	r2, r3
   158b0:	e3510047 	cmp	r1, #71	; 0x47
   158b4:	83822001 	orrhi	r2, r2, #1
   158b8:	e3120001 	tst	r2, #1
   158bc:	1afffff7 	bne	158a0 <irq_handler_+0x6c>
   158c0:	e79c2101 	ldr	r2, [ip, r1, lsl #2]
   158c4:	e1a04101 	lsl	r4, r1, #2
   158c8:	e3520000 	cmp	r2, #0
   158cc:	0a000004 	beq	158e4 <irq_handler_+0xb0>
   158d0:	e08cc004 	add	ip, ip, r4
   158d4:	e59c0120 	ldr	r0, [ip, #288]	; 0x120
   158d8:	e12fff32 	blx	r2
   158dc:	e28dd014 	add	sp, sp, #20
   158e0:	e8fd91ff 	ldm	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, ip, pc}^
   158e4:	e351001f 	cmp	r1, #31
   158e8:	e201201f 	and	r2, r1, #31
   158ec:	e1a02215 	lsl	r2, r5, r2
   158f0:	91a04007 	movls	r4, r7
   158f4:	9a000002 	bls	15904 <irq_handler_+0xd0>
   158f8:	e351003f 	cmp	r1, #63	; 0x3f
   158fc:	91a04008 	movls	r4, r8
   15900:	81a04006 	movhi	r4, r6
   15904:	e5842000 	str	r2, [r4]
   15908:	eaffffe4 	b	158a0 <irq_handler_+0x6c>
   1590c:	2000b000 	.word	0x2000b000
   15910:	00052a24 	.word	0x00052a24
   15914:	2000b21c 	.word	0x2000b21c
   15918:	2000b220 	.word	0x2000b220
   1591c:	2000b224 	.word	0x2000b224

00015920 <c_firq_handler>:
   15920:	e59f2010 	ldr	r2, [pc, #16]	; 15938 <c_firq_handler+0x18>
   15924:	e5923244 	ldr	r3, [r2, #580]	; 0x244
   15928:	e3530000 	cmp	r3, #0
   1592c:	012fff1e 	bxeq	lr
   15930:	e5920248 	ldr	r0, [r2, #584]	; 0x248
   15934:	e12fff13 	bx	r3
   15938:	00052a24 	.word	0x00052a24

0001593c <Display::Display()>:
   1593c:	e12fff1e 	bx	lr

00015940 <Display::~Display()>:
   15940:	e12fff1e 	bx	lr

00015944 <Display::init(int, int)>:
   15944:	e1a00001 	mov	r0, r1
   15948:	e92d4010 	push	{r4, lr}
   1594c:	e1a01002 	mov	r1, r2
   15950:	ebffdfd5 	bl	d8ac <wgfx_init>
   15954:	e3a00001 	mov	r0, #1
   15958:	e8bd8010 	pop	{r4, pc}

0001595c <Display::targetLayout(int, int, int, int, int, int, int, int, WgfxFont*, int, int, int, int)>:
   1595c:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15960:	e1a07002 	mov	r7, r2
   15964:	e1a08003 	mov	r8, r3
   15968:	e24dd044 	sub	sp, sp, #68	; 0x44
   1596c:	e59d3080 	ldr	r3, [sp, #128]	; 0x80
   15970:	e59d006c 	ldr	r0, [sp, #108]	; 0x6c
   15974:	e59d2084 	ldr	r2, [sp, #132]	; 0x84
   15978:	e58d3034 	str	r3, [sp, #52]	; 0x34
   1597c:	e59d308c 	ldr	r3, [sp, #140]	; 0x8c
   15980:	e59d4068 	ldr	r4, [sp, #104]	; 0x68
   15984:	e59d6078 	ldr	r6, [sp, #120]	; 0x78
   15988:	e59d5088 	ldr	r5, [sp, #136]	; 0x88
   1598c:	e58d103c 	str	r1, [sp, #60]	; 0x3c
   15990:	e58d0038 	str	r0, [sp, #56]	; 0x38
   15994:	e59d9070 	ldr	r9, [sp, #112]	; 0x70
   15998:	e59da074 	ldr	sl, [sp, #116]	; 0x74
   1599c:	e59db07c 	ldr	fp, [sp, #124]	; 0x7c
   159a0:	e58d2030 	str	r2, [sp, #48]	; 0x30
   159a4:	e58d302c 	str	r3, [sp, #44]	; 0x2c
   159a8:	ebffd8fa 	bl	bd98 <wgfx_clear>
   159ac:	e59d2030 	ldr	r2, [sp, #48]	; 0x30
   159b0:	e59d302c 	ldr	r3, [sp, #44]	; 0x2c
   159b4:	e58d201c 	str	r2, [sp, #28]
   159b8:	e1a02007 	mov	r2, r7
   159bc:	e3a07001 	mov	r7, #1
   159c0:	e59d0038 	ldr	r0, [sp, #56]	; 0x38
   159c4:	e58d3024 	str	r3, [sp, #36]	; 0x24
   159c8:	e59d3034 	ldr	r3, [sp, #52]	; 0x34
   159cc:	e58d0004 	str	r0, [sp, #4]
   159d0:	e58d3018 	str	r3, [sp, #24]
   159d4:	e59d103c 	ldr	r1, [sp, #60]	; 0x3c
   159d8:	e1a03008 	mov	r3, r8
   159dc:	e58d5020 	str	r5, [sp, #32]
   159e0:	e58db014 	str	fp, [sp, #20]
   159e4:	e58d6010 	str	r6, [sp, #16]
   159e8:	e58da00c 	str	sl, [sp, #12]
   159ec:	e58d9008 	str	r9, [sp, #8]
   159f0:	e58d4000 	str	r4, [sp]
   159f4:	e3a00000 	mov	r0, #0
   159f8:	ebffd80e 	bl	ba38 <wgfx_set_window>
   159fc:	e3e03000 	mvn	r3, #0
   15a00:	e3a01000 	mov	r1, #0
   15a04:	e3a00008 	mov	r0, #8
   15a08:	e1a02715 	lsl	r2, r5, r7
   15a0c:	e0222496 	mla	r2, r6, r4, r2
   15a10:	e58d0024 	str	r0, [sp, #36]	; 0x24
   15a14:	e282200a 	add	r2, r2, #10
   15a18:	e1a00007 	mov	r0, r7
   15a1c:	e58d1020 	str	r1, [sp, #32]
   15a20:	e58d1014 	str	r1, [sp, #20]
   15a24:	e58d301c 	str	r3, [sp, #28]
   15a28:	e58d3018 	str	r3, [sp, #24]
   15a2c:	e58d3008 	str	r3, [sp, #8]
   15a30:	e58d3004 	str	r3, [sp, #4]
   15a34:	e58d3000 	str	r3, [sp]
   15a38:	e58d7010 	str	r7, [sp, #16]
   15a3c:	e58d700c 	str	r7, [sp, #12]
   15a40:	ebffd7fc 	bl	ba38 <wgfx_set_window>
   15a44:	e1a00007 	mov	r0, r7
   15a48:	e28dd044 	add	sp, sp, #68	; 0x44
   15a4c:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15a50:	eaffd8b6 	b	bd30 <wgfx_set_console_window>

00015a54 <Display::targetSetChar()>:
   15a54:	e12fff1e 	bx	lr

00015a58 <Display::windowWrite(int, int, int, unsigned char const*)>:
   15a58:	e1a00001 	mov	r0, r1
   15a5c:	e1a01002 	mov	r1, r2
   15a60:	e1a02003 	mov	r2, r3
   15a64:	e59d3000 	ldr	r3, [sp]
   15a68:	eaffda25 	b	c304 <wgfx_puts>

00015a6c <Display::termWrite(char const*)>:
   15a6c:	e1a00001 	mov	r0, r1
   15a70:	eaffde3a 	b	d360 <wgfx_term_putstring>

00015a74 <Display::termWrite(int)>:
   15a74:	e6ef0071 	uxtb	r0, r1
   15a78:	eaffd983 	b	c08c <wgfx_term_putchar>

00015a7c <Display::termColour(int)>:
   15a7c:	e6ef0071 	uxtb	r0, r1
   15a80:	eaffe041 	b	db8c <wgfx_set_fg>

00015a84 <Display::termGetWidth()>:
   15a84:	eaffda1a 	b	c2f4 <wgfx_get_term_width>

00015a88 <OTAUpdate::performUpdate(unsigned char const*, int)>:
   15a88:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   15a8c:	e3a0564d 	mov	r5, #80740352	; 0x4d00000
   15a90:	e1a06001 	mov	r6, r1
   15a94:	e1a08000 	mov	r8, r0
   15a98:	e59f706c 	ldr	r7, [pc, #108]	; 15b0c <OTAUpdate::performUpdate(unsigned char const*, int)+0x84>
   15a9c:	e24dd008 	sub	sp, sp, #8
   15aa0:	e5974000 	ldr	r4, [r7]
   15aa4:	e1a03005 	mov	r3, r5
   15aa8:	e59f2060 	ldr	r2, [pc, #96]	; 15b10 <OTAUpdate::performUpdate(unsigned char const*, int)+0x88>
   15aac:	e3a01004 	mov	r1, #4
   15ab0:	e59f005c 	ldr	r0, [pc, #92]	; 15b14 <OTAUpdate::performUpdate(unsigned char const*, int)+0x8c>
   15ab4:	e58d4000 	str	r4, [sp]
   15ab8:	ebffcf3d 	bl	97b4 <LogWrite>
   15abc:	e0844005 	add	r4, r4, r5
   15ac0:	ebffc988 	bl	80e8 <lowlev_disable_irq>
   15ac4:	ebffc98d 	bl	8100 <lowlev_disable_fiq>
   15ac8:	ebffc99c 	bl	8140 <disable_mmu_and_cache>
   15acc:	e5972000 	ldr	r2, [r7]
   15ad0:	e1a00005 	mov	r0, r5
   15ad4:	e59f103c 	ldr	r1, [pc, #60]	; 15b18 <OTAUpdate::performUpdate(unsigned char const*, int)+0x90>
   15ad8:	eb0058c5 	bl	2bdf4 <memcpy>
   15adc:	e1a02006 	mov	r2, r6
   15ae0:	e1a01008 	mov	r1, r8
   15ae4:	e1a00004 	mov	r0, r4
   15ae8:	eb0058c1 	bl	2bdf4 <memcpy>
   15aec:	e3a03902 	mov	r3, #32768	; 0x8000
   15af0:	e1a01004 	mov	r1, r4
   15af4:	e1a02006 	mov	r2, r6
   15af8:	e1a00003 	mov	r0, r3
   15afc:	e1a0c005 	mov	ip, r5
   15b00:	e28dd008 	add	sp, sp, #8
   15b04:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   15b08:	e12fff1c 	bx	ip
   15b0c:	00008234 	.word	0x00008234
   15b10:	0002f854 	.word	0x0002f854
   15b14:	0002f848 	.word	0x0002f848
   15b18:	00008218 	.word	0x00008218

00015b1c <operator new(unsigned int)>:
   15b1c:	eaffd4c7 	b	ae40 <nmalloc_malloc>

00015b20 <operator new[](unsigned int)>:
   15b20:	eaffd4c6 	b	ae40 <nmalloc_malloc>

00015b24 <operator delete(void*)>:
   15b24:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   15b28:	e24dd00c 	sub	sp, sp, #12
   15b2c:	e28d3008 	add	r3, sp, #8
   15b30:	e5230004 	str	r0, [r3, #-4]!
   15b34:	e1a00003 	mov	r0, r3
   15b38:	ebffd4fd 	bl	af34 <nmalloc_free>
   15b3c:	e28dd00c 	add	sp, sp, #12
   15b40:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

00015b44 <operator delete[](void*)>:
   15b44:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   15b48:	e24dd00c 	sub	sp, sp, #12
   15b4c:	e28d3008 	add	r3, sp, #8
   15b50:	e5230004 	str	r0, [r3, #-4]!
   15b54:	e1a00003 	mov	r0, r3
   15b58:	ebffd4f5 	bl	af34 <nmalloc_free>
   15b5c:	e28dd00c 	add	sp, sp, #12
   15b60:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

00015b64 <operator delete(void*, unsigned int)>:
   15b64:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   15b68:	e24dd00c 	sub	sp, sp, #12
   15b6c:	e28d3008 	add	r3, sp, #8
   15b70:	e5230004 	str	r0, [r3, #-4]!
   15b74:	e1a00003 	mov	r0, r3
   15b78:	ebffd4ed 	bl	af34 <nmalloc_free>
   15b7c:	e28dd00c 	add	sp, sp, #12
   15b80:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

00015b84 <operator delete[](void*, unsigned int)>:
   15b84:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   15b88:	e24dd00c 	sub	sp, sp, #12
   15b8c:	e28d3008 	add	r3, sp, #8
   15b90:	e5230004 	str	r0, [r3, #-4]!
   15b94:	e1a00003 	mov	r0, r3
   15b98:	ebffd4e5 	bl	af34 <nmalloc_free>
   15b9c:	e28dd00c 	add	sp, sp, #12
   15ba0:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

00015ba4 <UartMaxi::isrStatic(void*)>:
   15ba4:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   15ba8:	e3a0e000 	mov	lr, #0
   15bac:	ee07ef9a 	mcr	15, 0, lr, cr7, cr10, {4}
   15bb0:	e59f3198 	ldr	r3, [pc, #408]	; 15d50 <UartMaxi::isrStatic(void*)+0x1ac>
   15bb4:	e3a04004 	mov	r4, #4
   15bb8:	e1a01003 	mov	r1, r3
   15bbc:	e3a07003 	mov	r7, #3
   15bc0:	e3a06002 	mov	r6, #2
   15bc4:	e3a05001 	mov	r5, #1
   15bc8:	e5932040 	ldr	r2, [r3, #64]	; 0x40
   15bcc:	e5832044 	str	r2, [r3, #68]	; 0x44
   15bd0:	e5913018 	ldr	r3, [r1, #24]
   15bd4:	e3130010 	tst	r3, #16
   15bd8:	1a000024 	bne	15c70 <UartMaxi::isrStatic(void*)+0xcc>
   15bdc:	e5913000 	ldr	r3, [r1]
   15be0:	e590200c 	ldr	r2, [r0, #12]
   15be4:	e3130b01 	tst	r3, #1024	; 0x400
   15be8:	0a000039 	beq	15cd4 <UartMaxi::isrStatic(void*)+0x130>
   15bec:	e5d0c010 	ldrb	ip, [r0, #16]
   15bf0:	e35c0000 	cmp	ip, #0
   15bf4:	05c05010 	strbeq	r5, [r0, #16]
   15bf8:	e3520000 	cmp	r2, #0
   15bfc:	0afffff3 	beq	15bd0 <UartMaxi::isrStatic(void*)+0x2c>
   15c00:	e5908004 	ldr	r8, [r0, #4]
   15c04:	e590c008 	ldr	ip, [r0, #8]
   15c08:	e158000c 	cmp	r8, ip
   15c0c:	0a000008 	beq	15c34 <UartMaxi::isrStatic(void*)+0x90>
   15c10:	e590c008 	ldr	ip, [r0, #8]
   15c14:	e5908004 	ldr	r8, [r0, #4]
   15c18:	e15c0008 	cmp	ip, r8
   15c1c:	2a00003e 	bcs	15d1c <UartMaxi::isrStatic(void*)+0x178>
   15c20:	e5908004 	ldr	r8, [r0, #4]
   15c24:	e2422001 	sub	r2, r2, #1
   15c28:	e35c0000 	cmp	ip, #0
   15c2c:	01520008 	cmpeq	r2, r8
   15c30:	0a00002f 	beq	15cf4 <UartMaxi::isrStatic(void*)+0x150>
   15c34:	e5902000 	ldr	r2, [r0]
   15c38:	e3520000 	cmp	r2, #0
   15c3c:	0a00002c 	beq	15cf4 <UartMaxi::isrStatic(void*)+0x150>
   15c40:	e590c004 	ldr	ip, [r0, #4]
   15c44:	e7c2300c 	strb	r3, [r2, ip]
   15c48:	e5903004 	ldr	r3, [r0, #4]
   15c4c:	e590200c 	ldr	r2, [r0, #12]
   15c50:	e2833001 	add	r3, r3, #1
   15c54:	e5803004 	str	r3, [r0, #4]
   15c58:	e5903004 	ldr	r3, [r0, #4]
   15c5c:	e1530002 	cmp	r3, r2
   15c60:	2580e004 	strcs	lr, [r0, #4]
   15c64:	e5913018 	ldr	r3, [r1, #24]
   15c68:	e3130010 	tst	r3, #16
   15c6c:	0affffda 	beq	15bdc <UartMaxi::isrStatic(void*)+0x38>
   15c70:	e59f10d8 	ldr	r1, [pc, #216]	; 15d50 <UartMaxi::isrStatic(void*)+0x1ac>
   15c74:	ea000010 	b	15cbc <UartMaxi::isrStatic(void*)+0x118>
   15c78:	e590c018 	ldr	ip, [r0, #24]
   15c7c:	e590201c 	ldr	r2, [r0, #28]
   15c80:	e15c0002 	cmp	ip, r2
   15c84:	0a00002c 	beq	15d3c <UartMaxi::isrStatic(void*)+0x198>
   15c88:	e5902014 	ldr	r2, [r0, #20]
   15c8c:	e3520000 	cmp	r2, #0
   15c90:	0a000029 	beq	15d3c <UartMaxi::isrStatic(void*)+0x198>
   15c94:	e590c01c 	ldr	ip, [r0, #28]
   15c98:	e7d2200c 	ldrb	r2, [r2, ip]
   15c9c:	e5812000 	str	r2, [r1]
   15ca0:	e590201c 	ldr	r2, [r0, #28]
   15ca4:	e590c020 	ldr	ip, [r0, #32]
   15ca8:	e2822001 	add	r2, r2, #1
   15cac:	e580201c 	str	r2, [r0, #28]
   15cb0:	e590201c 	ldr	r2, [r0, #28]
   15cb4:	e152000c 	cmp	r2, ip
   15cb8:	2580301c 	strcs	r3, [r0, #28]
   15cbc:	e5913018 	ldr	r3, [r1, #24]
   15cc0:	e2133020 	ands	r3, r3, #32
   15cc4:	0affffeb 	beq	15c78 <UartMaxi::isrStatic(void*)+0xd4>
   15cc8:	e3a03000 	mov	r3, #0
   15ccc:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   15cd0:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   15cd4:	e3130b02 	tst	r3, #2048	; 0x800
   15cd8:	0a000009 	beq	15d04 <UartMaxi::isrStatic(void*)+0x160>
   15cdc:	e5d0c010 	ldrb	ip, [r0, #16]
   15ce0:	e35c0000 	cmp	ip, #0
   15ce4:	05c06010 	strbeq	r6, [r0, #16]
   15ce8:	eaffffc2 	b	15bf8 <UartMaxi::isrStatic(void*)+0x54>
   15cec:	e3520000 	cmp	r2, #0
   15cf0:	1affffc2 	bne	15c00 <UartMaxi::isrStatic(void*)+0x5c>
   15cf4:	e5d03010 	ldrb	r3, [r0, #16]
   15cf8:	e3530000 	cmp	r3, #0
   15cfc:	05c04010 	strbeq	r4, [r0, #16]
   15d00:	eaffffb2 	b	15bd0 <UartMaxi::isrStatic(void*)+0x2c>
   15d04:	e3130c01 	tst	r3, #256	; 0x100
   15d08:	0afffff7 	beq	15cec <UartMaxi::isrStatic(void*)+0x148>
   15d0c:	e5d0c010 	ldrb	ip, [r0, #16]
   15d10:	e35c0000 	cmp	ip, #0
   15d14:	05c07010 	strbeq	r7, [r0, #16]
   15d18:	eaffffb6 	b	15bf8 <UartMaxi::isrStatic(void*)+0x54>
