
kernel.elf:     file format elf32-littlearm


Disassembly of section .init:

00008000 <_start>:
    8000:	e10f0000 	mrs	r0, CPSR
    8004:	e220001a 	eor	r0, r0, #26
    8008:	e310001f 	tst	r0, #31
    800c:	e3c0001f 	bic	r0, r0, #31
    8010:	e38000d3 	orr	r0, r0, #211	; 0xd3
    8014:	1a000004 	bne	802c <_start+0x2c>
    8018:	e3800c01 	orr	r0, r0, #256	; 0x100
    801c:	e28fe00c 	add	lr, pc, #12
    8020:	e16ff000 	msr	SPSR_fsxc, r0
    8024:	e12ef30e 	.word	0xe12ef30e
    8028:	e160006e 	.word	0xe160006e
    802c:	e121f000 	msr	CPSR_c, r0
    8030:	e3a00000 	mov	r0, #0
    8034:	ee0c0f10 	mcr	15, 0, r0, cr12, cr0, {0}
    8038:	f1020011 	cps	#17
    803c:	e3a0d709 	mov	sp, #2359296	; 0x240000
    8040:	f1020012 	cps	#18
    8044:	e3a0d98e 	mov	sp, #2326528	; 0x238000
    8048:	f1020017 	cps	#23
    804c:	e3a0d823 	mov	sp, #2293760	; 0x230000
    8050:	f102001b 	cps	#27
    8054:	e3a0d823 	mov	sp, #2293760	; 0x230000
    8058:	f102001f 	cps	#31
    805c:	e3a0d98a 	mov	sp, #2260992	; 0x228000
    8060:	ea001746 	b	dd80 <sysinit>

Disassembly of section .text:

00008068 <main>:
    8068:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    806c:	e24ddd6b 	sub	sp, sp, #6848	; 0x1ac0
    8070:	e24dd014 	sub	sp, sp, #20
    8074:	e28d0004 	add	r0, sp, #4
    8078:	eb000009 	bl	80a4 <CKernel::CKernel()>
    807c:	e28d0004 	add	r0, sp, #4
    8080:	eb000042 	bl	8190 <CKernel::Initialize()>
    8084:	e3500000 	cmp	r0, #0
    8088:	0a000004 	beq	80a0 <main+0x38>
    808c:	e28d0004 	add	r0, sp, #4
    8090:	eb00005c 	bl	8208 <CKernel::Run()>
    8094:	e3500002 	cmp	r0, #2
    8098:	1a000000 	bne	80a0 <main+0x38>
    809c:	eb00172c 	bl	dd54 <reboot>
    80a0:	eb001728 	bl	dd48 <halt>

000080a4 <CKernel::CKernel()>:
    80a4:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    80a8:	e1a04000 	mov	r4, r0
    80ac:	e280500c 	add	r5, r0, #12
    80b0:	e3a01000 	mov	r1, #0
    80b4:	eb001dec 	bl	f86c <CMemorySystem::CMemorySystem(bool)>
    80b8:	e2846018 	add	r6, r4, #24
    80bc:	e3a01000 	mov	r1, #0
    80c0:	e1a00005 	mov	r0, r5
    80c4:	eb0000a2 	bl	8354 <CActLED::CActLED(bool)>
    80c8:	e2847e87 	add	r7, r4, #2160	; 0x870
    80cc:	e1a00006 	mov	r0, r6
    80d0:	eb000623 	bl	9964 <CKernelOptions::CKernelOptions()>
    80d4:	e1a00007 	mov	r0, r7
    80d8:	eb0000f9 	bl	84c4 <CDeviceNameService::CDeviceNameService()>
    80dc:	e3a03000 	mov	r3, #0
    80e0:	e2870008 	add	r0, r7, #8
    80e4:	e3a02fe1 	mov	r2, #900	; 0x384
    80e8:	e3a01d19 	mov	r1, #1600	; 0x640
    80ec:	eb000b1e 	bl	ad6c <CScreenDevice::CScreenDevice(unsigned int, unsigned int, bool)>
    80f0:	e3a02000 	mov	r2, #0
    80f4:	e2840e8f 	add	r0, r4, #2288	; 0x8f0
    80f8:	e1a01002 	mov	r1, r2
    80fc:	e280000c 	add	r0, r0, #12
    8100:	eb000f9e 	bl	bf80 <CSerialDevice::CSerialDevice(CInterruptSystem*, bool)>
    8104:	e1a00006 	mov	r0, r6
    8108:	eb0005e3 	bl	989c <CKernelOptions::GetLogLevel() const>
    810c:	e1a01000 	mov	r1, r0
    8110:	e2840d67 	add	r0, r4, #6592	; 0x19c0
    8114:	e3a02000 	mov	r2, #0
    8118:	e2800014 	add	r0, r0, #20
    811c:	eb000717 	bl	9d80 <CLogger::CLogger(unsigned int, CTimer*)>
    8120:	e1a00005 	mov	r0, r5
    8124:	e3a03f7d 	mov	r3, #500	; 0x1f4
    8128:	e3a020c8 	mov	r2, #200	; 0xc8
    812c:	e3a01005 	mov	r1, #5
    8130:	eb0000cc 	bl	8468 <CActLED::Blink(unsigned int, unsigned int, unsigned int)>
    8134:	e1a00004 	mov	r0, r4
    8138:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

0000813c <CKernel::~CKernel()>:
    813c:	e92d4070 	push	{r4, r5, r6, lr}
    8140:	e1a04000 	mov	r4, r0
    8144:	e2800d67 	add	r0, r0, #6592	; 0x19c0
    8148:	e2800014 	add	r0, r0, #20
    814c:	eb000721 	bl	9dd8 <CLogger::~CLogger()>
    8150:	e2840e8f 	add	r0, r4, #2288	; 0x8f0
    8154:	e2845e87 	add	r5, r4, #2160	; 0x870
    8158:	e280000c 	add	r0, r0, #12
    815c:	eb000fb7 	bl	c040 <CSerialDevice::~CSerialDevice()>
    8160:	e2850008 	add	r0, r5, #8
    8164:	eb000b22 	bl	adf4 <CScreenDevice::~CScreenDevice()>
    8168:	e1a00005 	mov	r0, r5
    816c:	eb0000e7 	bl	8510 <CDeviceNameService::~CDeviceNameService()>
    8170:	e2840018 	add	r0, r4, #24
    8174:	eb0005bc 	bl	986c <CKernelOptions::~CKernelOptions()>
    8178:	e284000c 	add	r0, r4, #12
    817c:	eb00009a 	bl	83ec <CActLED::~CActLED()>
    8180:	e1a00004 	mov	r0, r4
    8184:	eb001d4a 	bl	f6b4 <CMemorySystem::~CMemorySystem()>
    8188:	e1a00004 	mov	r0, r4
    818c:	e8bd8070 	pop	{r4, r5, r6, pc}

00008190 <CKernel::Initialize()>:
    8190:	e92d4070 	push	{r4, r5, r6, lr}
    8194:	e2806e87 	add	r6, r0, #2160	; 0x870
    8198:	e2865008 	add	r5, r6, #8
    819c:	e1a04000 	mov	r4, r0
    81a0:	e1a00005 	mov	r0, r5
    81a4:	eb000b3a 	bl	ae94 <CScreenDevice::Initialize()>
    81a8:	e3500000 	cmp	r0, #0
    81ac:	1a000001 	bne	81b8 <CKernel::Initialize()+0x28>
    81b0:	e3a00000 	mov	r0, #0
    81b4:	e8bd8070 	pop	{r4, r5, r6, pc}
    81b8:	e2840e8f 	add	r0, r4, #2288	; 0x8f0
    81bc:	e280000c 	add	r0, r0, #12
    81c0:	e59f103c 	ldr	r1, [pc, #60]	; 8204 <CKernel::Initialize()+0x74>
    81c4:	eb000fd3 	bl	c118 <CSerialDevice::Initialize(unsigned int)>
    81c8:	e3500000 	cmp	r0, #0
    81cc:	0afffff7 	beq	81b0 <CKernel::Initialize()+0x20>
    81d0:	e2840018 	add	r0, r4, #24
    81d4:	eb0005ad 	bl	9890 <CKernelOptions::GetLogDevice() const>
    81d8:	e3a02000 	mov	r2, #0
    81dc:	e1a01000 	mov	r1, r0
    81e0:	e1a00006 	mov	r0, r6
    81e4:	eb000162 	bl	8774 <CDeviceNameService::GetDevice(char const*, bool)>
    81e8:	e3500000 	cmp	r0, #0
    81ec:	11a01000 	movne	r1, r0
    81f0:	e2840d67 	add	r0, r4, #6592	; 0x19c0
    81f4:	01a01005 	moveq	r1, r5
    81f8:	e8bd4070 	pop	{r4, r5, r6, lr}
    81fc:	e2800014 	add	r0, r0, #20
    8200:	ea000710 	b	9e48 <CLogger::Initialize(CDevice*)>
    8204:	0001c200 	.word	0x0001c200

00008208 <CKernel::Run()>:
    8208:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    820c:	e1a04000 	mov	r4, r0
    8210:	e24dd038 	sub	sp, sp, #56	; 0x38
    8214:	e3a03000 	mov	r3, #0
    8218:	e3a02001 	mov	r2, #1
    821c:	e3a01008 	mov	r1, #8
    8220:	e28d0010 	add	r0, sp, #16
    8224:	eb000244 	bl	8b3c <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)>
    8228:	e2840d67 	add	r0, r4, #6592	; 0x19c0
    822c:	e2800014 	add	r0, r0, #20
    8230:	e59f310c 	ldr	r3, [pc, #268]	; 8344 <CKernel::Run()+0x13c>
    8234:	e3a02003 	mov	r2, #3
    8238:	e59f1108 	ldr	r1, [pc, #264]	; 8348 <CKernel::Run()+0x140>
    823c:	eb000711 	bl	9e88 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    8240:	e3a05020 	mov	r5, #32
    8244:	e2844e87 	add	r4, r4, #2160	; 0x870
    8248:	e59f70fc 	ldr	r7, [pc, #252]	; 834c <CKernel::Run()+0x144>
    824c:	e59f60fc 	ldr	r6, [pc, #252]	; 8350 <CKernel::Run()+0x148>
    8250:	e2844008 	add	r4, r4, #8
    8254:	e3150007 	tst	r5, #7
    8258:	1a000003 	bne	826c <CKernel::Run()+0x64>
    825c:	e3a02001 	mov	r2, #1
    8260:	e1a01007 	mov	r1, r7
    8264:	e1a00004 	mov	r0, r4
    8268:	eb000bd5 	bl	b1c4 <CScreenDevice::Write(void const*, unsigned int)>
    826c:	e1a0000d 	mov	r0, sp
    8270:	eb001293 	bl	ccc4 <CString::CString()>
    8274:	e1a03005 	mov	r3, r5
    8278:	e1a02005 	mov	r2, r5
    827c:	e1a01006 	mov	r1, r6
    8280:	e1a0000d 	mov	r0, sp
    8284:	eb00169f 	bl	dd08 <CString::Format(char const*, ...)>
    8288:	e1a0000d 	mov	r0, sp
    828c:	eb0012a2 	bl	cd1c <CString::operator char const*() const>
    8290:	e1a08000 	mov	r8, r0
    8294:	e1a0000d 	mov	r0, sp
    8298:	eb0012cd 	bl	cdd4 <CString::GetLength() const>
    829c:	e1a01008 	mov	r1, r8
    82a0:	e1a02000 	mov	r2, r0
    82a4:	e1a00004 	mov	r0, r4
    82a8:	eb000bc5 	bl	b1c4 <CScreenDevice::Write(void const*, unsigned int)>
    82ac:	e2855001 	add	r5, r5, #1
    82b0:	e1a0000d 	mov	r0, sp
    82b4:	eb00124f 	bl	cbf8 <CString::~CString()>
    82b8:	e355007f 	cmp	r5, #127	; 0x7f
    82bc:	1affffe4 	bne	8254 <CKernel::Run()+0x4c>
    82c0:	e1a00004 	mov	r0, r4
    82c4:	e3a02001 	mov	r2, #1
    82c8:	e59f107c 	ldr	r1, [pc, #124]	; 834c <CKernel::Run()+0x144>
    82cc:	eb000bbc 	bl	b1c4 <CScreenDevice::Write(void const*, unsigned int)>
    82d0:	e3a04000 	mov	r4, #0
    82d4:	e3a01001 	mov	r1, #1
    82d8:	e28d0010 	add	r0, sp, #16
    82dc:	eb0002c6 	bl	8dfc <CGPIOPin::Write(unsigned int)>
    82e0:	e58d4000 	str	r4, [sp]
    82e4:	e58d4000 	str	r4, [sp]
    82e8:	e59d3000 	ldr	r3, [sp]
    82ec:	e3530009 	cmp	r3, #9
    82f0:	ca000005 	bgt	830c <CKernel::Run()+0x104>
    82f4:	e59d3000 	ldr	r3, [sp]
    82f8:	e2833001 	add	r3, r3, #1
    82fc:	e58d3000 	str	r3, [sp]
    8300:	e59d3000 	ldr	r3, [sp]
    8304:	e3530009 	cmp	r3, #9
    8308:	dafffff9 	ble	82f4 <CKernel::Run()+0xec>
    830c:	e3a01000 	mov	r1, #0
    8310:	e28d0010 	add	r0, sp, #16
    8314:	eb0002b8 	bl	8dfc <CGPIOPin::Write(unsigned int)>
    8318:	e58d4000 	str	r4, [sp]
    831c:	e59d3000 	ldr	r3, [sp]
    8320:	e3530009 	cmp	r3, #9
    8324:	caffffea 	bgt	82d4 <CKernel::Run()+0xcc>
    8328:	e59d3000 	ldr	r3, [sp]
    832c:	e2833001 	add	r3, r3, #1
    8330:	e58d3000 	str	r3, [sp]
    8334:	e59d3000 	ldr	r3, [sp]
    8338:	e3530009 	cmp	r3, #9
    833c:	dafffff9 	ble	8328 <CKernel::Run()+0x120>
    8340:	eaffffe3 	b	82d4 <CKernel::Run()+0xcc>
    8344:	000130bc 	.word	0x000130bc
    8348:	000130b4 	.word	0x000130b4
    834c:	000130e0 	.word	0x000130e0
    8350:	000130e4 	.word	0x000130e4

00008354 <CActLED::CActLED(bool)>:
    8354:	e3a03000 	mov	r3, #0
    8358:	e59f2088 	ldr	r2, [pc, #136]	; 83e8 <CActLED::CActLED(bool)+0x94>
    835c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    8360:	e5803000 	str	r3, [r0]
    8364:	e5803004 	str	r3, [r0, #4]
    8368:	e1a07001 	mov	r7, r1
    836c:	e5820000 	str	r0, [r2]
    8370:	e1a05000 	mov	r5, r0
    8374:	eb000a6e 	bl	ad34 <CMachineInfo::Get()>
    8378:	eb0009a2 	bl	aa08 <CMachineInfo::GetActLEDInfo() const>
    837c:	e2106080 	ands	r6, r0, #128	; 0x80
    8380:	e1a04000 	mov	r4, r0
    8384:	1a00000f 	bne	83c8 <CActLED::CActLED(bool)+0x74>
    8388:	e3a00028 	mov	r0, #40	; 0x28
    838c:	eb001dff 	bl	fb90 <operator new(unsigned int)>
    8390:	e1a07000 	mov	r7, r0
    8394:	e1a03006 	mov	r3, r6
    8398:	e3a02001 	mov	r2, #1
    839c:	e204103f 	and	r1, r4, #63	; 0x3f
    83a0:	eb0001e5 	bl	8b3c <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)>
    83a4:	e5857000 	str	r7, [r5]
    83a8:	e1a04324 	lsr	r4, r4, #6
    83ac:	e2244001 	eor	r4, r4, #1
    83b0:	e2044001 	and	r4, r4, #1
    83b4:	e1a00005 	mov	r0, r5
    83b8:	e5c54008 	strb	r4, [r5, #8]
    83bc:	eb00001b 	bl	8430 <CActLED::Off()>
    83c0:	e1a00005 	mov	r0, r5
    83c4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    83c8:	e3a00014 	mov	r0, #20
    83cc:	eb001def 	bl	fb90 <operator new(unsigned int)>
    83d0:	e1a06000 	mov	r6, r0
    83d4:	e1a02007 	mov	r2, r7
    83d8:	e204103f 	and	r1, r4, #63	; 0x3f
    83dc:	eb001c23 	bl	f470 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)>
    83e0:	e5856004 	str	r6, [r5, #4]
    83e4:	eaffffef 	b	83a8 <CActLED::CActLED(bool)+0x54>
    83e8:	000155c0 	.word	0x000155c0

000083ec <CActLED::~CActLED()>:
    83ec:	e3a02000 	mov	r2, #0
    83f0:	e59f3004 	ldr	r3, [pc, #4]	; 83fc <CActLED::~CActLED()+0x10>
    83f4:	e5832000 	str	r2, [r3]
    83f8:	e12fff1e 	bx	lr
    83fc:	000155c0 	.word	0x000155c0

00008400 <CActLED::On()>:
    8400:	e5903000 	ldr	r3, [r0]
    8404:	e3530000 	cmp	r3, #0
    8408:	0a000002 	beq	8418 <CActLED::On()+0x18>
    840c:	e5d01008 	ldrb	r1, [r0, #8]
    8410:	e1a00003 	mov	r0, r3
    8414:	ea000278 	b	8dfc <CGPIOPin::Write(unsigned int)>
    8418:	e5903004 	ldr	r3, [r0, #4]
    841c:	e3530000 	cmp	r3, #0
    8420:	012fff1e 	bxeq	lr
    8424:	e5d01008 	ldrb	r1, [r0, #8]
    8428:	e1a00003 	mov	r0, r3
    842c:	ea001bc0 	b	f334 <CVirtualGPIOPin::Write(unsigned int)>

00008430 <CActLED::Off()>:
    8430:	e5903000 	ldr	r3, [r0]
    8434:	e3530000 	cmp	r3, #0
    8438:	0a000003 	beq	844c <CActLED::Off()+0x1c>
    843c:	e5d01008 	ldrb	r1, [r0, #8]
    8440:	e1a00003 	mov	r0, r3
    8444:	e2211001 	eor	r1, r1, #1
    8448:	ea00026b 	b	8dfc <CGPIOPin::Write(unsigned int)>
    844c:	e5903004 	ldr	r3, [r0, #4]
    8450:	e3530000 	cmp	r3, #0
    8454:	012fff1e 	bxeq	lr
    8458:	e5d01008 	ldrb	r1, [r0, #8]
    845c:	e1a00003 	mov	r0, r3
    8460:	e2211001 	eor	r1, r1, #1
    8464:	ea001bb2 	b	f334 <CVirtualGPIOPin::Write(unsigned int)>

00008468 <CActLED::Blink(unsigned int, unsigned int, unsigned int)>:
    8468:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    846c:	e2516000 	subs	r6, r1, #0
    8470:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
    8474:	e1a08003 	mov	r8, r3
    8478:	e1a07002 	mov	r7, r2
    847c:	e1a05000 	mov	r5, r0
    8480:	e3a04001 	mov	r4, #1
    8484:	e1a00005 	mov	r0, r5
    8488:	ebffffdc 	bl	8400 <CActLED::On()>
    848c:	e1a00007 	mov	r0, r7
    8490:	eb001993 	bl	eae4 <CTimer::SimpleMsDelay(unsigned int)>
    8494:	e1a00005 	mov	r0, r5
    8498:	ebffffe4 	bl	8430 <CActLED::Off()>
    849c:	e2844001 	add	r4, r4, #1
    84a0:	e1a00008 	mov	r0, r8
    84a4:	eb00198e 	bl	eae4 <CTimer::SimpleMsDelay(unsigned int)>
    84a8:	e1560004 	cmp	r6, r4
    84ac:	2afffff4 	bcs	8484 <CActLED::Blink(unsigned int, unsigned int, unsigned int)+0x1c>
    84b0:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

000084b4 <CActLED::Get()>:
    84b4:	e59f3004 	ldr	r3, [pc, #4]	; 84c0 <CActLED::Get()+0xc>
    84b8:	e5930000 	ldr	r0, [r3]
    84bc:	e12fff1e 	bx	lr
    84c0:	000155c0 	.word	0x000155c0

000084c4 <CDeviceNameService::CDeviceNameService()>:
    84c4:	e3a03000 	mov	r3, #0
    84c8:	e92d4070 	push	{r4, r5, r6, lr}
    84cc:	e59f5030 	ldr	r5, [pc, #48]	; 8504 <CDeviceNameService::CDeviceNameService()+0x40>
    84d0:	e1a04000 	mov	r4, r0
    84d4:	e5952000 	ldr	r2, [r5]
    84d8:	e5803000 	str	r3, [r0]
    84dc:	e1520003 	cmp	r2, r3
    84e0:	e5803004 	str	r3, [r0, #4]
    84e4:	0a000003 	beq	84f8 <CDeviceNameService::CDeviceNameService()+0x34>
    84e8:	e3a0201f 	mov	r2, #31
    84ec:	e59f1014 	ldr	r1, [pc, #20]	; 8508 <CDeviceNameService::CDeviceNameService()+0x44>
    84f0:	e59f0014 	ldr	r0, [pc, #20]	; 850c <CDeviceNameService::CDeviceNameService()+0x48>
    84f4:	eb001f35 	bl	101d0 <assertion_failed>
    84f8:	e5854000 	str	r4, [r5]
    84fc:	e1a00004 	mov	r0, r4
    8500:	e8bd8070 	pop	{r4, r5, r6, pc}
    8504:	000155c4 	.word	0x000155c4
    8508:	000130f0 	.word	0x000130f0
    850c:	00013108 	.word	0x00013108

00008510 <CDeviceNameService::~CDeviceNameService()>:
    8510:	e5903000 	ldr	r3, [r0]
    8514:	e92d4070 	push	{r4, r5, r6, lr}
    8518:	e3530000 	cmp	r3, #0
    851c:	e1a05000 	mov	r5, r0
    8520:	0a00000d 	beq	855c <CDeviceNameService::~CDeviceNameService()+0x4c>
    8524:	e3a06000 	mov	r6, #0
    8528:	e5930004 	ldr	r0, [r3, #4]
    852c:	e5934000 	ldr	r4, [r3]
    8530:	e3500000 	cmp	r0, #0
    8534:	0a000000 	beq	853c <CDeviceNameService::~CDeviceNameService()+0x2c>
    8538:	eb001d97 	bl	fb9c <operator delete[](void*)>
    853c:	e5950000 	ldr	r0, [r5]
    8540:	e3a01010 	mov	r1, #16
    8544:	e5806004 	str	r6, [r0, #4]
    8548:	e5806008 	str	r6, [r0, #8]
    854c:	eb001d93 	bl	fba0 <operator delete(void*, unsigned int)>
    8550:	e2543000 	subs	r3, r4, #0
    8554:	e5854000 	str	r4, [r5]
    8558:	1afffff2 	bne	8528 <CDeviceNameService::~CDeviceNameService()+0x18>
    855c:	e3a02000 	mov	r2, #0
    8560:	e59f3008 	ldr	r3, [pc, #8]	; 8570 <CDeviceNameService::~CDeviceNameService()+0x60>
    8564:	e1a00005 	mov	r0, r5
    8568:	e5832000 	str	r2, [r3]
    856c:	e8bd8070 	pop	{r4, r5, r6, pc}
    8570:	000155c4 	.word	0x000155c4

00008574 <CDeviceNameService::AddDevice(char const*, CDevice*, bool)>:
    8574:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    8578:	e1a05000 	mov	r5, r0
    857c:	e5900004 	ldr	r0, [r0, #4]
    8580:	e1a06001 	mov	r6, r1
    8584:	e3500000 	cmp	r0, #0
    8588:	e1a07002 	mov	r7, r2
    858c:	e1a08003 	mov	r8, r3
    8590:	1a000017 	bne	85f4 <CDeviceNameService::AddDevice(char const*, CDevice*, bool)+0x80>
    8594:	e3a00010 	mov	r0, #16
    8598:	eb001d7c 	bl	fb90 <operator new(unsigned int)>
    859c:	e3560000 	cmp	r6, #0
    85a0:	e1a04000 	mov	r4, r0
    85a4:	0a000019 	beq	8610 <CDeviceNameService::AddDevice(char const*, CDevice*, bool)+0x9c>
    85a8:	e1a00006 	mov	r0, r6
    85ac:	eb0019ea 	bl	ed5c <strlen>
    85b0:	e2800001 	add	r0, r0, #1
    85b4:	eb001d76 	bl	fb94 <operator new[](unsigned int)>
    85b8:	e1a01006 	mov	r1, r6
    85bc:	e5840004 	str	r0, [r4, #4]
    85c0:	eb001a4f 	bl	ef04 <strcpy>
    85c4:	e3570000 	cmp	r7, #0
    85c8:	0a00000b 	beq	85fc <CDeviceNameService::AddDevice(char const*, CDevice*, bool)+0x88>
    85cc:	e5952004 	ldr	r2, [r5, #4]
    85d0:	e5953000 	ldr	r3, [r5]
    85d4:	e3520000 	cmp	r2, #0
    85d8:	e5847008 	str	r7, [r4, #8]
    85dc:	e5c4800c 	strb	r8, [r4, #12]
    85e0:	e5843000 	str	r3, [r4]
    85e4:	e5854000 	str	r4, [r5]
    85e8:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
    85ec:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    85f0:	ea001d39 	b	fadc <LeaveCritical>
    85f4:	eb001d0b 	bl	fa28 <EnterCritical>
    85f8:	eaffffe5 	b	8594 <CDeviceNameService::AddDevice(char const*, CDevice*, bool)+0x20>
    85fc:	e3a02040 	mov	r2, #64	; 0x40
    8600:	e59f101c 	ldr	r1, [pc, #28]	; 8624 <CDeviceNameService::AddDevice(char const*, CDevice*, bool)+0xb0>
    8604:	e59f001c 	ldr	r0, [pc, #28]	; 8628 <CDeviceNameService::AddDevice(char const*, CDevice*, bool)+0xb4>
    8608:	eb001ef0 	bl	101d0 <assertion_failed>
    860c:	eaffffee 	b	85cc <CDeviceNameService::AddDevice(char const*, CDevice*, bool)+0x58>
    8610:	e3a0203b 	mov	r2, #59	; 0x3b
    8614:	e59f1008 	ldr	r1, [pc, #8]	; 8624 <CDeviceNameService::AddDevice(char const*, CDevice*, bool)+0xb0>
    8618:	e59f000c 	ldr	r0, [pc, #12]	; 862c <CDeviceNameService::AddDevice(char const*, CDevice*, bool)+0xb8>
    861c:	eb001eeb 	bl	101d0 <assertion_failed>
    8620:	eaffffe0 	b	85a8 <CDeviceNameService::AddDevice(char const*, CDevice*, bool)+0x34>
    8624:	000130f0 	.word	0x000130f0
    8628:	00013120 	.word	0x00013120
    862c:	00013114 	.word	0x00013114

00008630 <CDeviceNameService::RemoveDevice(char const*, bool)>:
    8630:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    8634:	e2516000 	subs	r6, r1, #0
    8638:	e1a08000 	mov	r8, r0
    863c:	e1a07002 	mov	r7, r2
    8640:	0a000043 	beq	8754 <CDeviceNameService::RemoveDevice(char const*, bool)+0x124>
    8644:	e5980004 	ldr	r0, [r8, #4]
    8648:	e3500000 	cmp	r0, #0
    864c:	1a00002d 	bne	8708 <CDeviceNameService::RemoveDevice(char const*, bool)+0xd8>
    8650:	e5984000 	ldr	r4, [r8]
    8654:	e3540000 	cmp	r4, #0
    8658:	08bd87f0 	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
    865c:	e3a05000 	mov	r5, #0
    8660:	e59fa100 	ldr	sl, [pc, #256]	; 8768 <CDeviceNameService::RemoveDevice(char const*, bool)+0x138>
    8664:	e59f9100 	ldr	r9, [pc, #256]	; 876c <CDeviceNameService::RemoveDevice(char const*, bool)+0x13c>
    8668:	ea00000b 	b	869c <CDeviceNameService::RemoveDevice(char const*, bool)+0x6c>
    866c:	e1a00006 	mov	r0, r6
    8670:	eb0019c3 	bl	ed84 <strcmp>
    8674:	e3500000 	cmp	r0, #0
    8678:	1a000002 	bne	8688 <CDeviceNameService::RemoveDevice(char const*, bool)+0x58>
    867c:	e5d4300c 	ldrb	r3, [r4, #12]
    8680:	e1530007 	cmp	r3, r7
    8684:	0a00000d 	beq	86c0 <CDeviceNameService::RemoveDevice(char const*, bool)+0x90>
    8688:	e5943000 	ldr	r3, [r4]
    868c:	e1a05004 	mov	r5, r4
    8690:	e3530000 	cmp	r3, #0
    8694:	0a00001f 	beq	8718 <CDeviceNameService::RemoveDevice(char const*, bool)+0xe8>
    8698:	e1a04003 	mov	r4, r3
    869c:	e5941004 	ldr	r1, [r4, #4]
    86a0:	e3510000 	cmp	r1, #0
    86a4:	1afffff0 	bne	866c <CDeviceNameService::RemoveDevice(char const*, bool)+0x3c>
    86a8:	e1a0100a 	mov	r1, sl
    86ac:	e3a0205e 	mov	r2, #94	; 0x5e
    86b0:	e1a00009 	mov	r0, r9
    86b4:	eb001ec5 	bl	101d0 <assertion_failed>
    86b8:	e5941004 	ldr	r1, [r4, #4]
    86bc:	eaffffea 	b	866c <CDeviceNameService::RemoveDevice(char const*, bool)+0x3c>
    86c0:	e5943000 	ldr	r3, [r4]
    86c4:	e3550000 	cmp	r5, #0
    86c8:	15853000 	strne	r3, [r5]
    86cc:	0a00001b 	beq	8740 <CDeviceNameService::RemoveDevice(char const*, bool)+0x110>
    86d0:	e5983004 	ldr	r3, [r8, #4]
    86d4:	e3530000 	cmp	r3, #0
    86d8:	1a000013 	bne	872c <CDeviceNameService::RemoveDevice(char const*, bool)+0xfc>
    86dc:	e5940004 	ldr	r0, [r4, #4]
    86e0:	e3500000 	cmp	r0, #0
    86e4:	0a000000 	beq	86ec <CDeviceNameService::RemoveDevice(char const*, bool)+0xbc>
    86e8:	eb001d2b 	bl	fb9c <operator delete[](void*)>
    86ec:	e3a03000 	mov	r3, #0
    86f0:	e1a00004 	mov	r0, r4
    86f4:	e5843004 	str	r3, [r4, #4]
    86f8:	e5843008 	str	r3, [r4, #8]
    86fc:	e3a01010 	mov	r1, #16
    8700:	e8bd47f0 	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
    8704:	ea001d25 	b	fba0 <operator delete(void*, unsigned int)>
    8708:	eb001cc6 	bl	fa28 <EnterCritical>
    870c:	e5984000 	ldr	r4, [r8]
    8710:	e3540000 	cmp	r4, #0
    8714:	1affffd0 	bne	865c <CDeviceNameService::RemoveDevice(char const*, bool)+0x2c>
    8718:	e5983004 	ldr	r3, [r8, #4]
    871c:	e3530000 	cmp	r3, #0
    8720:	08bd87f0 	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
    8724:	e8bd47f0 	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
    8728:	ea001ceb 	b	fadc <LeaveCritical>
    872c:	eb001cea 	bl	fadc <LeaveCritical>
    8730:	e5940004 	ldr	r0, [r4, #4]
    8734:	e3500000 	cmp	r0, #0
    8738:	1affffea 	bne	86e8 <CDeviceNameService::RemoveDevice(char const*, bool)+0xb8>
    873c:	eaffffea 	b	86ec <CDeviceNameService::RemoveDevice(char const*, bool)+0xbc>
    8740:	e5883000 	str	r3, [r8]
    8744:	e5983004 	ldr	r3, [r8, #4]
    8748:	e3530000 	cmp	r3, #0
    874c:	0affffe2 	beq	86dc <CDeviceNameService::RemoveDevice(char const*, bool)+0xac>
    8750:	eafffff5 	b	872c <CDeviceNameService::RemoveDevice(char const*, bool)+0xfc>
    8754:	e3a02056 	mov	r2, #86	; 0x56
    8758:	e59f1008 	ldr	r1, [pc, #8]	; 8768 <CDeviceNameService::RemoveDevice(char const*, bool)+0x138>
    875c:	e59f000c 	ldr	r0, [pc, #12]	; 8770 <CDeviceNameService::RemoveDevice(char const*, bool)+0x140>
    8760:	eb001e9a 	bl	101d0 <assertion_failed>
    8764:	eaffffb6 	b	8644 <CDeviceNameService::RemoveDevice(char const*, bool)+0x14>
    8768:	000130f0 	.word	0x000130f0
    876c:	00013130 	.word	0x00013130
    8770:	00013114 	.word	0x00013114

00008774 <CDeviceNameService::GetDevice(char const*, bool)>:
    8774:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    8778:	e2515000 	subs	r5, r1, #0
    877c:	e1a07000 	mov	r7, r0
    8780:	e1a06002 	mov	r6, r2
    8784:	0a000031 	beq	8850 <CDeviceNameService::GetDevice(char const*, bool)+0xdc>
    8788:	e5970004 	ldr	r0, [r7, #4]
    878c:	e3500000 	cmp	r0, #0
    8790:	1a000018 	bne	87f8 <CDeviceNameService::GetDevice(char const*, bool)+0x84>
    8794:	e5974000 	ldr	r4, [r7]
    8798:	e3540000 	cmp	r4, #0
    879c:	0a00001d 	beq	8818 <CDeviceNameService::GetDevice(char const*, bool)+0xa4>
    87a0:	e59f90c4 	ldr	r9, [pc, #196]	; 886c <CDeviceNameService::GetDevice(char const*, bool)+0xf8>
    87a4:	e59f80c4 	ldr	r8, [pc, #196]	; 8870 <CDeviceNameService::GetDevice(char const*, bool)+0xfc>
    87a8:	ea000009 	b	87d4 <CDeviceNameService::GetDevice(char const*, bool)+0x60>
    87ac:	e1a00005 	mov	r0, r5
    87b0:	eb001973 	bl	ed84 <strcmp>
    87b4:	e3500000 	cmp	r0, #0
    87b8:	1a000002 	bne	87c8 <CDeviceNameService::GetDevice(char const*, bool)+0x54>
    87bc:	e5d4300c 	ldrb	r3, [r4, #12]
    87c0:	e1530006 	cmp	r3, r6
    87c4:	0a000016 	beq	8824 <CDeviceNameService::GetDevice(char const*, bool)+0xb0>
    87c8:	e5944000 	ldr	r4, [r4]
    87cc:	e3540000 	cmp	r4, #0
    87d0:	0a00000c 	beq	8808 <CDeviceNameService::GetDevice(char const*, bool)+0x94>
    87d4:	e5941004 	ldr	r1, [r4, #4]
    87d8:	e3510000 	cmp	r1, #0
    87dc:	1afffff2 	bne	87ac <CDeviceNameService::GetDevice(char const*, bool)+0x38>
    87e0:	e1a01009 	mov	r1, r9
    87e4:	e3a02092 	mov	r2, #146	; 0x92
    87e8:	e1a00008 	mov	r0, r8
    87ec:	eb001e77 	bl	101d0 <assertion_failed>
    87f0:	e5941004 	ldr	r1, [r4, #4]
    87f4:	eaffffec 	b	87ac <CDeviceNameService::GetDevice(char const*, bool)+0x38>
    87f8:	eb001c8a 	bl	fa28 <EnterCritical>
    87fc:	e5974000 	ldr	r4, [r7]
    8800:	e3540000 	cmp	r4, #0
    8804:	1affffe5 	bne	87a0 <CDeviceNameService::GetDevice(char const*, bool)+0x2c>
    8808:	e5973004 	ldr	r3, [r7, #4]
    880c:	e3530000 	cmp	r3, #0
    8810:	0a000000 	beq	8818 <CDeviceNameService::GetDevice(char const*, bool)+0xa4>
    8814:	eb001cb0 	bl	fadc <LeaveCritical>
    8818:	e3a04000 	mov	r4, #0
    881c:	e1a00004 	mov	r0, r4
    8820:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    8824:	e5973004 	ldr	r3, [r7, #4]
    8828:	e5944008 	ldr	r4, [r4, #8]
    882c:	e3530000 	cmp	r3, #0
    8830:	1a00000b 	bne	8864 <CDeviceNameService::GetDevice(char const*, bool)+0xf0>
    8834:	e3540000 	cmp	r4, #0
    8838:	1afffff7 	bne	881c <CDeviceNameService::GetDevice(char const*, bool)+0xa8>
    883c:	e3a0209a 	mov	r2, #154	; 0x9a
    8840:	e59f1024 	ldr	r1, [pc, #36]	; 886c <CDeviceNameService::GetDevice(char const*, bool)+0xf8>
    8844:	e59f0028 	ldr	r0, [pc, #40]	; 8874 <CDeviceNameService::GetDevice(char const*, bool)+0x100>
    8848:	eb001e60 	bl	101d0 <assertion_failed>
    884c:	eafffff2 	b	881c <CDeviceNameService::GetDevice(char const*, bool)+0xa8>
    8850:	e3a0208b 	mov	r2, #139	; 0x8b
    8854:	e59f1010 	ldr	r1, [pc, #16]	; 886c <CDeviceNameService::GetDevice(char const*, bool)+0xf8>
    8858:	e59f0018 	ldr	r0, [pc, #24]	; 8878 <CDeviceNameService::GetDevice(char const*, bool)+0x104>
    885c:	eb001e5b 	bl	101d0 <assertion_failed>
    8860:	eaffffc8 	b	8788 <CDeviceNameService::GetDevice(char const*, bool)+0x14>
    8864:	eb001c9c 	bl	fadc <LeaveCritical>
    8868:	eafffff1 	b	8834 <CDeviceNameService::GetDevice(char const*, bool)+0xc0>
    886c:	000130f0 	.word	0x000130f0
    8870:	00013130 	.word	0x00013130
    8874:	00013144 	.word	0x00013144
    8878:	00013114 	.word	0x00013114

0000887c <CDeviceNameService::Get()>:
    887c:	e92d4010 	push	{r4, lr}
    8880:	e59f4020 	ldr	r4, [pc, #32]	; 88a8 <CDeviceNameService::Get()+0x2c>
    8884:	e5940000 	ldr	r0, [r4]
    8888:	e3500000 	cmp	r0, #0
    888c:	18bd8010 	popne	{r4, pc}
    8890:	e3a020cc 	mov	r2, #204	; 0xcc
    8894:	e59f1010 	ldr	r1, [pc, #16]	; 88ac <CDeviceNameService::Get()+0x30>
    8898:	e59f0010 	ldr	r0, [pc, #16]	; 88b0 <CDeviceNameService::Get()+0x34>
    889c:	eb001e4b 	bl	101d0 <assertion_failed>
    88a0:	e5940000 	ldr	r0, [r4]
    88a4:	e8bd8010 	pop	{r4, pc}
    88a8:	000155c4 	.word	0x000155c4
    88ac:	000130f0 	.word	0x000130f0
    88b0:	00013154 	.word	0x00013154

000088b4 <CDeviceNameService::AddDevice(char const*, unsigned int, CDevice*, bool)>:
    88b4:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    88b8:	e1a07001 	mov	r7, r1
    88bc:	e1a08002 	mov	r8, r2
    88c0:	e24dd010 	sub	sp, sp, #16
    88c4:	e1a04000 	mov	r4, r0
    88c8:	e1a0000d 	mov	r0, sp
    88cc:	e1a05003 	mov	r5, r3
    88d0:	e5dd6028 	ldrb	r6, [sp, #40]	; 0x28
    88d4:	eb0010fa 	bl	ccc4 <CString::CString()>
    88d8:	e1a03008 	mov	r3, r8
    88dc:	e1a02007 	mov	r2, r7
    88e0:	e1a0000d 	mov	r0, sp
    88e4:	e59f102c 	ldr	r1, [pc, #44]	; 8918 <CDeviceNameService::AddDevice(char const*, unsigned int, CDevice*, bool)+0x64>
    88e8:	eb001506 	bl	dd08 <CString::Format(char const*, ...)>
    88ec:	e1a0000d 	mov	r0, sp
    88f0:	eb001109 	bl	cd1c <CString::operator char const*() const>
    88f4:	e1a03006 	mov	r3, r6
    88f8:	e1a01000 	mov	r1, r0
    88fc:	e1a02005 	mov	r2, r5
    8900:	e1a00004 	mov	r0, r4
    8904:	ebffff1a 	bl	8574 <CDeviceNameService::AddDevice(char const*, CDevice*, bool)>
    8908:	e1a0000d 	mov	r0, sp
    890c:	eb0010b9 	bl	cbf8 <CString::~CString()>
    8910:	e28dd010 	add	sp, sp, #16
    8914:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    8918:	00013160 	.word	0x00013160

0000891c <CDeviceNameService::RemoveDevice(char const*, unsigned int, bool)>:
    891c:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    8920:	e1a06001 	mov	r6, r1
    8924:	e1a07002 	mov	r7, r2
    8928:	e24dd014 	sub	sp, sp, #20
    892c:	e1a04000 	mov	r4, r0
    8930:	e1a0000d 	mov	r0, sp
    8934:	e1a05003 	mov	r5, r3
    8938:	eb0010e1 	bl	ccc4 <CString::CString()>
    893c:	e1a03007 	mov	r3, r7
    8940:	e1a02006 	mov	r2, r6
    8944:	e1a0000d 	mov	r0, sp
    8948:	e59f1028 	ldr	r1, [pc, #40]	; 8978 <CDeviceNameService::RemoveDevice(char const*, unsigned int, bool)+0x5c>
    894c:	eb0014ed 	bl	dd08 <CString::Format(char const*, ...)>
    8950:	e1a0000d 	mov	r0, sp
    8954:	eb0010f0 	bl	cd1c <CString::operator char const*() const>
    8958:	e1a02005 	mov	r2, r5
    895c:	e1a01000 	mov	r1, r0
    8960:	e1a00004 	mov	r0, r4
    8964:	ebffff31 	bl	8630 <CDeviceNameService::RemoveDevice(char const*, bool)>
    8968:	e1a0000d 	mov	r0, sp
    896c:	eb0010a1 	bl	cbf8 <CString::~CString()>
    8970:	e28dd014 	add	sp, sp, #20
    8974:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
    8978:	00013160 	.word	0x00013160

0000897c <CDeviceNameService::GetDevice(char const*, unsigned int, bool)>:
    897c:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    8980:	e1a06001 	mov	r6, r1
    8984:	e1a07002 	mov	r7, r2
    8988:	e24dd014 	sub	sp, sp, #20
    898c:	e1a04000 	mov	r4, r0
    8990:	e1a0000d 	mov	r0, sp
    8994:	e1a05003 	mov	r5, r3
    8998:	eb0010c9 	bl	ccc4 <CString::CString()>
    899c:	e1a03007 	mov	r3, r7
    89a0:	e1a02006 	mov	r2, r6
    89a4:	e1a0000d 	mov	r0, sp
    89a8:	e59f1030 	ldr	r1, [pc, #48]	; 89e0 <CDeviceNameService::GetDevice(char const*, unsigned int, bool)+0x64>
    89ac:	eb0014d5 	bl	dd08 <CString::Format(char const*, ...)>
    89b0:	e1a0000d 	mov	r0, sp
    89b4:	eb0010d8 	bl	cd1c <CString::operator char const*() const>
    89b8:	e1a02005 	mov	r2, r5
    89bc:	e1a01000 	mov	r1, r0
    89c0:	e1a00004 	mov	r0, r4
    89c4:	ebffff6a 	bl	8774 <CDeviceNameService::GetDevice(char const*, bool)>
    89c8:	e1a04000 	mov	r4, r0
    89cc:	e1a0000d 	mov	r0, sp
    89d0:	eb001088 	bl	cbf8 <CString::~CString()>
    89d4:	e1a00004 	mov	r0, r4
    89d8:	e28dd014 	add	sp, sp, #20
    89dc:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
    89e0:	00013160 	.word	0x00013160

000089e4 <CDeviceNameService::ListDevices(CDevice*)>:
    89e4:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    89e8:	e2516000 	subs	r6, r1, #0
    89ec:	e24dd01c 	sub	sp, sp, #28
    89f0:	e1a04000 	mov	r4, r0
    89f4:	0a000037 	beq	8ad8 <CDeviceNameService::ListDevices(CDevice*)+0xf4>
    89f8:	e5944000 	ldr	r4, [r4]
    89fc:	e3540000 	cmp	r4, #0
    8a00:	0a000032 	beq	8ad0 <CDeviceNameService::ListDevices(CDevice*)+0xec>
    8a04:	e3a05000 	mov	r5, #0
    8a08:	e59fa0dc 	ldr	sl, [pc, #220]	; 8aec <CDeviceNameService::ListDevices(CDevice*)+0x108>
    8a0c:	e59f80dc 	ldr	r8, [pc, #220]	; 8af0 <CDeviceNameService::ListDevices(CDevice*)+0x10c>
    8a10:	ea00001a 	b	8a80 <CDeviceNameService::ListDevices(CDevice*)+0x9c>
    8a14:	e5d4200c 	ldrb	r2, [r4, #12]
    8a18:	e28d0008 	add	r0, sp, #8
    8a1c:	e3520000 	cmp	r2, #0
    8a20:	03a02063 	moveq	r2, #99	; 0x63
    8a24:	13a02062 	movne	r2, #98	; 0x62
    8a28:	e215b003 	ands	fp, r5, #3
    8a2c:	13a01020 	movne	r1, #32
    8a30:	03a0100a 	moveq	r1, #10
    8a34:	e58d1000 	str	r1, [sp]
    8a38:	e1a01008 	mov	r1, r8
    8a3c:	eb0014b1 	bl	dd08 <CString::Format(char const*, ...)>
    8a40:	e5963000 	ldr	r3, [r6]
    8a44:	e28d0008 	add	r0, sp, #8
    8a48:	e593700c 	ldr	r7, [r3, #12]
    8a4c:	eb0010b2 	bl	cd1c <CString::operator char const*() const>
    8a50:	e1a09000 	mov	r9, r0
    8a54:	e28d0008 	add	r0, sp, #8
    8a58:	eb0010dd 	bl	cdd4 <CString::GetLength() const>
    8a5c:	e1a01009 	mov	r1, r9
    8a60:	e1a02000 	mov	r2, r0
    8a64:	e1a00006 	mov	r0, r6
    8a68:	e12fff37 	blx	r7
    8a6c:	e5944000 	ldr	r4, [r4]
    8a70:	e28d0008 	add	r0, sp, #8
    8a74:	eb00105f 	bl	cbf8 <CString::~CString()>
    8a78:	e3540000 	cmp	r4, #0
    8a7c:	0a00000b 	beq	8ab0 <CDeviceNameService::ListDevices(CDevice*)+0xcc>
    8a80:	e28d0008 	add	r0, sp, #8
    8a84:	eb00108e 	bl	ccc4 <CString::CString()>
    8a88:	e5943004 	ldr	r3, [r4, #4]
    8a8c:	e2855001 	add	r5, r5, #1
    8a90:	e3530000 	cmp	r3, #0
    8a94:	1affffde 	bne	8a14 <CDeviceNameService::ListDevices(CDevice*)+0x30>
    8a98:	e3a020b9 	mov	r2, #185	; 0xb9
    8a9c:	e1a0100a 	mov	r1, sl
    8aa0:	e59f004c 	ldr	r0, [pc, #76]	; 8af4 <CDeviceNameService::ListDevices(CDevice*)+0x110>
    8aa4:	eb001dc9 	bl	101d0 <assertion_failed>
    8aa8:	e5943004 	ldr	r3, [r4, #4]
    8aac:	eaffffd8 	b	8a14 <CDeviceNameService::ListDevices(CDevice*)+0x30>
    8ab0:	e35b0000 	cmp	fp, #0
    8ab4:	0a000005 	beq	8ad0 <CDeviceNameService::ListDevices(CDevice*)+0xec>
    8ab8:	e5963000 	ldr	r3, [r6]
    8abc:	e1a00006 	mov	r0, r6
    8ac0:	e593300c 	ldr	r3, [r3, #12]
    8ac4:	e3a02001 	mov	r2, #1
    8ac8:	e59f1028 	ldr	r1, [pc, #40]	; 8af8 <CDeviceNameService::ListDevices(CDevice*)+0x114>
    8acc:	e12fff33 	blx	r3
    8ad0:	e28dd01c 	add	sp, sp, #28
    8ad4:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8ad8:	e3a020b0 	mov	r2, #176	; 0xb0
    8adc:	e59f1008 	ldr	r1, [pc, #8]	; 8aec <CDeviceNameService::ListDevices(CDevice*)+0x108>
    8ae0:	e59f0014 	ldr	r0, [pc, #20]	; 8afc <CDeviceNameService::ListDevices(CDevice*)+0x118>
    8ae4:	eb001db9 	bl	101d0 <assertion_failed>
    8ae8:	eaffffc2 	b	89f8 <CDeviceNameService::ListDevices(CDevice*)+0x14>
    8aec:	000130f0 	.word	0x000130f0
    8af0:	00013178 	.word	0x00013178
    8af4:	00013130 	.word	0x00013130
    8af8:	000130e0 	.word	0x000130e0
    8afc:	00013168 	.word	0x00013168

00008b00 <CGPIOPin::CGPIOPin()>:
    8b00:	e92d4010 	push	{r4, lr}
    8b04:	e3a01000 	mov	r1, #0
    8b08:	e3a02006 	mov	r2, #6
    8b0c:	e3a04036 	mov	r4, #54	; 0x36
    8b10:	e3a0c00a 	mov	ip, #10
    8b14:	e59fe01c 	ldr	lr, [pc, #28]	; 8b38 <CGPIOPin::CGPIOPin()+0x38>
    8b18:	e5804004 	str	r4, [r0, #4]
    8b1c:	e580e000 	str	lr, [r0]
    8b20:	e5c0c010 	strb	ip, [r0, #16]
    8b24:	e5801018 	str	r1, [r0, #24]
    8b28:	e580101c 	str	r1, [r0, #28]
    8b2c:	e5c02024 	strb	r2, [r0, #36]	; 0x24
    8b30:	e5c02025 	strb	r2, [r0, #37]	; 0x25
    8b34:	e8bd8010 	pop	{r4, pc}
    8b38:	0001318c 	.word	0x0001318c

00008b3c <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)>:
    8b3c:	e92d4070 	push	{r4, r5, r6, lr}
    8b40:	e3a0c006 	mov	ip, #6
    8b44:	e3a0e00a 	mov	lr, #10
    8b48:	e1a05002 	mov	r5, r2
    8b4c:	e3a06036 	mov	r6, #54	; 0x36
    8b50:	e3a02000 	mov	r2, #0
    8b54:	e1a04000 	mov	r4, r0
    8b58:	e5803018 	str	r3, [r0, #24]
    8b5c:	e59f302c 	ldr	r3, [pc, #44]	; 8b90 <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)+0x54>
    8b60:	e5c0e010 	strb	lr, [r0, #16]
    8b64:	e8800048 	stm	r0, {r3, r6}
    8b68:	e5c0c024 	strb	ip, [r0, #36]	; 0x24
    8b6c:	e5c0c025 	strb	ip, [r0, #37]	; 0x25
    8b70:	e580201c 	str	r2, [r0, #28]
    8b74:	eb00000d 	bl	8bb0 <CGPIOPin::AssignPin(unsigned int)>
    8b78:	e1a00004 	mov	r0, r4
    8b7c:	e1a01005 	mov	r1, r5
    8b80:	e3a02001 	mov	r2, #1
    8b84:	eb00002c 	bl	8c3c <CGPIOPin::SetMode(TGPIOMode, bool)>
    8b88:	e1a00004 	mov	r0, r4
    8b8c:	e8bd8070 	pop	{r4, r5, r6, pc}
    8b90:	0001318c 	.word	0x0001318c

00008b94 <CGPIOPin::~CGPIOPin()>:
    8b94:	e12fff1e 	bx	lr

00008b98 <CGPIOPin::~CGPIOPin()>:
    8b98:	e92d4010 	push	{r4, lr}
    8b9c:	e1a04000 	mov	r4, r0
    8ba0:	e3a01028 	mov	r1, #40	; 0x28
    8ba4:	eb001bfd 	bl	fba0 <operator delete(void*, unsigned int)>
    8ba8:	e1a00004 	mov	r0, r4
    8bac:	e8bd8010 	pop	{r4, pc}

00008bb0 <CGPIOPin::AssignPin(unsigned int)>:
    8bb0:	e5903004 	ldr	r3, [r0, #4]
    8bb4:	e92d4070 	push	{r4, r5, r6, lr}
    8bb8:	e3530036 	cmp	r3, #54	; 0x36
    8bbc:	e1a05000 	mov	r5, r0
    8bc0:	e1a04001 	mov	r4, r1
    8bc4:	0a000003 	beq	8bd8 <CGPIOPin::AssignPin(unsigned int)+0x28>
    8bc8:	e59f1068 	ldr	r1, [pc, #104]	; 8c38 <CGPIOPin::AssignPin(unsigned int)+0x88>
    8bcc:	e3a02040 	mov	r2, #64	; 0x40
    8bd0:	e281000c 	add	r0, r1, #12
    8bd4:	eb001d7d 	bl	101d0 <assertion_failed>
    8bd8:	e3540035 	cmp	r4, #53	; 0x35
    8bdc:	e5854004 	str	r4, [r5, #4]
    8be0:	8a000007 	bhi	8c04 <CGPIOPin::AssignPin(unsigned int)+0x54>
    8be4:	e3a03001 	mov	r3, #1
    8be8:	e204201f 	and	r2, r4, #31
    8bec:	e1a042a4 	lsr	r4, r4, #5
    8bf0:	e1a03213 	lsl	r3, r3, r2
    8bf4:	e1a04104 	lsl	r4, r4, #2
    8bf8:	e585300c 	str	r3, [r5, #12]
    8bfc:	e5854008 	str	r4, [r5, #8]
    8c00:	e8bd8070 	pop	{r4, r5, r6, pc}
    8c04:	eb00084a 	bl	ad34 <CMachineInfo::Get()>
    8c08:	e6ef1074 	uxtb	r1, r4
    8c0c:	eb0007b5 	bl	aae8 <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const>
    8c10:	e3500035 	cmp	r0, #53	; 0x35
    8c14:	e1a04000 	mov	r4, r0
    8c18:	e5850004 	str	r0, [r5, #4]
    8c1c:	9afffff0 	bls	8be4 <CGPIOPin::AssignPin(unsigned int)+0x34>
    8c20:	e59f1010 	ldr	r1, [pc, #16]	; 8c38 <CGPIOPin::AssignPin(unsigned int)+0x88>
    8c24:	e3a02047 	mov	r2, #71	; 0x47
    8c28:	e2810020 	add	r0, r1, #32
    8c2c:	eb001d67 	bl	101d0 <assertion_failed>
    8c30:	e5954004 	ldr	r4, [r5, #4]
    8c34:	eaffffea 	b	8be4 <CGPIOPin::AssignPin(unsigned int)+0x34>
    8c38:	00013194 	.word	0x00013194

00008c3c <CGPIOPin::SetMode(TGPIOMode, bool)>:
    8c3c:	e3510009 	cmp	r1, #9
    8c40:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    8c44:	e1a05001 	mov	r5, r1
    8c48:	e1a04000 	mov	r4, r0
    8c4c:	e1a06002 	mov	r6, r2
    8c50:	8a00003f 	bhi	8d54 <CGPIOPin::SetMode(TGPIOMode, bool)+0x118>
    8c54:	e5c45010 	strb	r5, [r4, #16]
    8c58:	e3a02000 	mov	r2, #0
    8c5c:	ee072f9a 	mcr	15, 0, r2, cr7, cr10, {4}
    8c60:	e5d43010 	ldrb	r3, [r4, #16]
    8c64:	e2431004 	sub	r1, r3, #4
    8c68:	e6ef0071 	uxtb	r0, r1
    8c6c:	e3500005 	cmp	r0, #5
    8c70:	8a000006 	bhi	8c90 <CGPIOPin::SetMode(TGPIOMode, bool)+0x54>
    8c74:	e1560002 	cmp	r6, r2
    8c78:	1a00003a 	bne	8d68 <CGPIOPin::SetMode(TGPIOMode, bool)+0x12c>
    8c7c:	e1a00004 	mov	r0, r4
    8c80:	eb000251 	bl	95cc <CGPIOPin::SetAlternateFunction(unsigned int)>
    8c84:	e3a03000 	mov	r3, #0
    8c88:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
    8c8c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    8c90:	e3530001 	cmp	r3, #1
    8c94:	13a03000 	movne	r3, #0
    8c98:	02063001 	andeq	r3, r6, #1
    8c9c:	e3530000 	cmp	r3, #0
    8ca0:	1a00004e 	bne	8de0 <CGPIOPin::SetMode(TGPIOMode, bool)+0x1a4>
    8ca4:	e5943004 	ldr	r3, [r4, #4]
    8ca8:	e3530035 	cmp	r3, #53	; 0x35
    8cac:	8a000033 	bhi	8d80 <CGPIOPin::SetMode(TGPIOMode, bool)+0x144>
    8cb0:	e59f0138 	ldr	r0, [pc, #312]	; 8df0 <CGPIOPin::SetMode(TGPIOMode, bool)+0x1b4>
    8cb4:	e59f7138 	ldr	r7, [pc, #312]	; 8df4 <CGPIOPin::SetMode(TGPIOMode, bool)+0x1b8>
    8cb8:	e0810093 	umull	r0, r1, r3, r0
    8cbc:	e5970000 	ldr	r0, [r7]
    8cc0:	e1a051a1 	lsr	r5, r1, #3
    8cc4:	e2852302 	add	r2, r5, #134217728	; 0x8000000
    8cc8:	e0855105 	add	r5, r5, r5, lsl #2
    8ccc:	e2822702 	add	r2, r2, #524288	; 0x80000
    8cd0:	e0435085 	sub	r5, r3, r5, lsl #1
    8cd4:	e3500000 	cmp	r0, #0
    8cd8:	e1a08102 	lsl	r8, r2, #2
    8cdc:	e0855085 	add	r5, r5, r5, lsl #1
    8ce0:	1a00002c 	bne	8d98 <CGPIOPin::SetMode(TGPIOMode, bool)+0x15c>
    8ce4:	e5d42010 	ldrb	r2, [r4, #16]
    8ce8:	e3a01007 	mov	r1, #7
    8cec:	e2422001 	sub	r2, r2, #1
    8cf0:	e16f2f12 	clz	r2, r2
    8cf4:	e5983000 	ldr	r3, [r8]
    8cf8:	e1a022a2 	lsr	r2, r2, #5
    8cfc:	e1c33511 	bic	r3, r3, r1, lsl r5
    8d00:	e1835512 	orr	r5, r3, r2, lsl r5
    8d04:	e5885000 	str	r5, [r8]
    8d08:	e5973000 	ldr	r3, [r7]
    8d0c:	e3530000 	cmp	r3, #0
    8d10:	1a000022 	bne	8da0 <CGPIOPin::SetMode(TGPIOMode, bool)+0x164>
    8d14:	e3560000 	cmp	r6, #0
    8d18:	0a00000a 	beq	8d48 <CGPIOPin::SetMode(TGPIOMode, bool)+0x10c>
    8d1c:	e5d43010 	ldrb	r3, [r4, #16]
    8d20:	e3530003 	cmp	r3, #3
    8d24:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
    8d28:	ea000006 	b	8d48 <CGPIOPin::SetMode(TGPIOMode, bool)+0x10c>
    8d2c:	00008dd0 	.word	0x00008dd0
    8d30:	00008dc0 	.word	0x00008dc0
    8d34:	00008db0 	.word	0x00008db0
    8d38:	00008d3c 	.word	0x00008d3c
    8d3c:	e1a00004 	mov	r0, r4
    8d40:	e3a01001 	mov	r1, #1
    8d44:	eb0001fa 	bl	9534 <CGPIOPin::SetPullUpMode(unsigned int)>
    8d48:	e3a03000 	mov	r3, #0
    8d4c:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
    8d50:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    8d54:	e59f109c 	ldr	r1, [pc, #156]	; 8df8 <CGPIOPin::SetMode(TGPIOMode, bool)+0x1bc>
    8d58:	e3a0204f 	mov	r2, #79	; 0x4f
    8d5c:	e2810034 	add	r0, r1, #52	; 0x34
    8d60:	eb001d1a 	bl	101d0 <assertion_failed>
    8d64:	eaffffba 	b	8c54 <CGPIOPin::SetMode(TGPIOMode, bool)+0x18>
    8d68:	e1a01002 	mov	r1, r2
    8d6c:	e1a00004 	mov	r0, r4
    8d70:	eb0001ef 	bl	9534 <CGPIOPin::SetPullUpMode(unsigned int)>
    8d74:	e5d43010 	ldrb	r3, [r4, #16]
    8d78:	e2431004 	sub	r1, r3, #4
    8d7c:	eaffffbe 	b	8c7c <CGPIOPin::SetMode(TGPIOMode, bool)+0x40>
    8d80:	e59f1070 	ldr	r1, [pc, #112]	; 8df8 <CGPIOPin::SetMode(TGPIOMode, bool)+0x1bc>
    8d84:	e3a02068 	mov	r2, #104	; 0x68
    8d88:	e2810020 	add	r0, r1, #32
    8d8c:	eb001d0f 	bl	101d0 <assertion_failed>
    8d90:	e5943004 	ldr	r3, [r4, #4]
    8d94:	eaffffc5 	b	8cb0 <CGPIOPin::SetMode(TGPIOMode, bool)+0x74>
    8d98:	eb001b22 	bl	fa28 <EnterCritical>
    8d9c:	eaffffd0 	b	8ce4 <CGPIOPin::SetMode(TGPIOMode, bool)+0xa8>
    8da0:	eb001b4d 	bl	fadc <LeaveCritical>
    8da4:	e3560000 	cmp	r6, #0
    8da8:	0affffe6 	beq	8d48 <CGPIOPin::SetMode(TGPIOMode, bool)+0x10c>
    8dac:	eaffffda 	b	8d1c <CGPIOPin::SetMode(TGPIOMode, bool)+0xe0>
    8db0:	e1a00004 	mov	r0, r4
    8db4:	e3a01002 	mov	r1, #2
    8db8:	eb0001dd 	bl	9534 <CGPIOPin::SetPullUpMode(unsigned int)>
    8dbc:	eaffffe1 	b	8d48 <CGPIOPin::SetMode(TGPIOMode, bool)+0x10c>
    8dc0:	e1a00004 	mov	r0, r4
    8dc4:	e3a01000 	mov	r1, #0
    8dc8:	eb00000b 	bl	8dfc <CGPIOPin::Write(unsigned int)>
    8dcc:	eaffffdd 	b	8d48 <CGPIOPin::SetMode(TGPIOMode, bool)+0x10c>
    8dd0:	e1a00004 	mov	r0, r4
    8dd4:	e3a01000 	mov	r1, #0
    8dd8:	eb0001d5 	bl	9534 <CGPIOPin::SetPullUpMode(unsigned int)>
    8ddc:	eaffffd9 	b	8d48 <CGPIOPin::SetMode(TGPIOMode, bool)+0x10c>
    8de0:	e1a01002 	mov	r1, r2
    8de4:	e1a00004 	mov	r0, r4
    8de8:	eb0001d1 	bl	9534 <CGPIOPin::SetPullUpMode(unsigned int)>
    8dec:	eaffffac 	b	8ca4 <CGPIOPin::SetMode(TGPIOMode, bool)+0x68>
    8df0:	cccccccd 	.word	0xcccccccd
    8df4:	000155c8 	.word	0x000155c8
    8df8:	00013194 	.word	0x00013194

00008dfc <CGPIOPin::Write(unsigned int)>:
    8dfc:	e5903004 	ldr	r3, [r0, #4]
    8e00:	e92d4070 	push	{r4, r5, r6, lr}
    8e04:	e3530035 	cmp	r3, #53	; 0x35
    8e08:	e1a04000 	mov	r4, r0
    8e0c:	e1a05001 	mov	r5, r1
    8e10:	8a00001e 	bhi	8e90 <CGPIOPin::Write(unsigned int)+0x94>
    8e14:	e5d43010 	ldrb	r3, [r4, #16]
    8e18:	e3530003 	cmp	r3, #3
    8e1c:	8a000016 	bhi	8e7c <CGPIOPin::Write(unsigned int)+0x80>
    8e20:	e3a03000 	mov	r3, #0
    8e24:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
    8e28:	e3550001 	cmp	r5, #1
    8e2c:	8a00000b 	bhi	8e60 <CGPIOPin::Write(unsigned int)+0x64>
    8e30:	e59f306c 	ldr	r3, [pc, #108]	; 8ea4 <CGPIOPin::Write(unsigned int)+0xa8>
    8e34:	e59f206c 	ldr	r2, [pc, #108]	; 8ea8 <CGPIOPin::Write(unsigned int)+0xac>
    8e38:	e3550000 	cmp	r5, #0
    8e3c:	e5845014 	str	r5, [r4, #20]
    8e40:	11a05003 	movne	r5, r3
    8e44:	01a05002 	moveq	r5, r2
    8e48:	e594100c 	ldr	r1, [r4, #12]
    8e4c:	e5942008 	ldr	r2, [r4, #8]
    8e50:	e3a03000 	mov	r3, #0
    8e54:	e7851002 	str	r1, [r5, r2]
    8e58:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
    8e5c:	e8bd8070 	pop	{r4, r5, r6, pc}
    8e60:	e59f1044 	ldr	r1, [pc, #68]	; 8eac <CGPIOPin::Write(unsigned int)+0xb0>
    8e64:	e3a02098 	mov	r2, #152	; 0x98
    8e68:	e2810070 	add	r0, r1, #112	; 0x70
    8e6c:	eb001cd7 	bl	101d0 <assertion_failed>
    8e70:	e5845014 	str	r5, [r4, #20]
    8e74:	e59f5028 	ldr	r5, [pc, #40]	; 8ea4 <CGPIOPin::Write(unsigned int)+0xa8>
    8e78:	eafffff2 	b	8e48 <CGPIOPin::Write(unsigned int)+0x4c>
    8e7c:	e59f1028 	ldr	r1, [pc, #40]	; 8eac <CGPIOPin::Write(unsigned int)+0xb0>
    8e80:	e3a02094 	mov	r2, #148	; 0x94
    8e84:	e281004c 	add	r0, r1, #76	; 0x4c
    8e88:	eb001cd0 	bl	101d0 <assertion_failed>
    8e8c:	eaffffe3 	b	8e20 <CGPIOPin::Write(unsigned int)+0x24>
    8e90:	e59f1014 	ldr	r1, [pc, #20]	; 8eac <CGPIOPin::Write(unsigned int)+0xb0>
    8e94:	e3a02091 	mov	r2, #145	; 0x91
    8e98:	e2810020 	add	r0, r1, #32
    8e9c:	eb001ccb 	bl	101d0 <assertion_failed>
    8ea0:	eaffffdb 	b	8e14 <CGPIOPin::Write(unsigned int)+0x18>
    8ea4:	2020001c 	.word	0x2020001c
    8ea8:	20200028 	.word	0x20200028
    8eac:	00013194 	.word	0x00013194

00008eb0 <CGPIOPin::Read() const>:
    8eb0:	e5903004 	ldr	r3, [r0, #4]
    8eb4:	e92d4010 	push	{r4, lr}
    8eb8:	e3530035 	cmp	r3, #53	; 0x35
    8ebc:	e1a04000 	mov	r4, r0
    8ec0:	8a00000f 	bhi	8f04 <CGPIOPin::Read() const+0x54>
    8ec4:	e5d43010 	ldrb	r3, [r4, #16]
    8ec8:	e2432002 	sub	r2, r3, #2
    8ecc:	e3530000 	cmp	r3, #0
    8ed0:	13520001 	cmpne	r2, #1
    8ed4:	8a00000f 	bhi	8f18 <CGPIOPin::Read() const+0x68>
    8ed8:	e3a03000 	mov	r3, #0
    8edc:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
    8ee0:	e59f1044 	ldr	r1, [pc, #68]	; 8f2c <CGPIOPin::Read() const+0x7c>
    8ee4:	e5940008 	ldr	r0, [r4, #8]
    8ee8:	e594200c 	ldr	r2, [r4, #12]
    8eec:	e7901001 	ldr	r1, [r0, r1]
    8ef0:	e1110002 	tst	r1, r2
    8ef4:	13a00001 	movne	r0, #1
    8ef8:	01a00003 	moveq	r0, r3
    8efc:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
    8f00:	e8bd8010 	pop	{r4, pc}
    8f04:	e59f1024 	ldr	r1, [pc, #36]	; 8f30 <CGPIOPin::Read() const+0x80>
    8f08:	e3a020a4 	mov	r2, #164	; 0xa4
    8f0c:	e2810020 	add	r0, r1, #32
    8f10:	eb001cae 	bl	101d0 <assertion_failed>
    8f14:	eaffffea 	b	8ec4 <CGPIOPin::Read() const+0x14>
    8f18:	e59f1010 	ldr	r1, [pc, #16]	; 8f30 <CGPIOPin::Read() const+0x80>
    8f1c:	e3a020a8 	mov	r2, #168	; 0xa8
    8f20:	e2810090 	add	r0, r1, #144	; 0x90
    8f24:	eb001ca9 	bl	101d0 <assertion_failed>
    8f28:	eaffffea 	b	8ed8 <CGPIOPin::Read() const+0x28>
    8f2c:	20200034 	.word	0x20200034
    8f30:	00013194 	.word	0x00013194

00008f34 <CGPIOPin::Invert()>:
    8f34:	e5d03010 	ldrb	r3, [r0, #16]
    8f38:	e92d4010 	push	{r4, lr}
    8f3c:	e3530001 	cmp	r3, #1
    8f40:	e1a04000 	mov	r4, r0
    8f44:	0a000003 	beq	8f58 <CGPIOPin::Invert()+0x24>
    8f48:	e59f101c 	ldr	r1, [pc, #28]	; 8f6c <CGPIOPin::Invert()+0x38>
    8f4c:	e3a020b5 	mov	r2, #181	; 0xb5
    8f50:	e28100ec 	add	r0, r1, #236	; 0xec
    8f54:	eb001c9d 	bl	101d0 <assertion_failed>
    8f58:	e5941014 	ldr	r1, [r4, #20]
    8f5c:	e1a00004 	mov	r0, r4
    8f60:	e8bd4010 	pop	{r4, lr}
    8f64:	e2211001 	eor	r1, r1, #1
    8f68:	eaffffa3 	b	8dfc <CGPIOPin::Write(unsigned int)>
    8f6c:	00013194 	.word	0x00013194

00008f70 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)>:
    8f70:	e5d03010 	ldrb	r3, [r0, #16]
    8f74:	e92d4070 	push	{r4, r5, r6, lr}
    8f78:	e1a05001 	mov	r5, r1
    8f7c:	e2431002 	sub	r1, r3, #2
    8f80:	e3530000 	cmp	r3, #0
    8f84:	13510001 	cmpne	r1, #1
    8f88:	e1a04000 	mov	r4, r0
    8f8c:	e1a06002 	mov	r6, r2
    8f90:	8a00001e 	bhi	9010 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)+0xa0>
    8f94:	e5d43024 	ldrb	r3, [r4, #36]	; 0x24
    8f98:	e3530006 	cmp	r3, #6
    8f9c:	0a000003 	beq	8fb0 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)+0x40>
    8fa0:	e59f10b0 	ldr	r1, [pc, #176]	; 9058 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)+0xe8>
    8fa4:	e3a020c0 	mov	r2, #192	; 0xc0
    8fa8:	e2810f42 	add	r0, r1, #264	; 0x108
    8fac:	eb001c87 	bl	101d0 <assertion_failed>
    8fb0:	e5d43025 	ldrb	r3, [r4, #37]	; 0x25
    8fb4:	e3530006 	cmp	r3, #6
    8fb8:	0a000003 	beq	8fcc <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)+0x5c>
    8fbc:	e59f1094 	ldr	r1, [pc, #148]	; 9058 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)+0xe8>
    8fc0:	e3a020c1 	mov	r2, #193	; 0xc1
    8fc4:	e2810f4b 	add	r0, r1, #300	; 0x12c
    8fc8:	eb001c80 	bl	101d0 <assertion_failed>
    8fcc:	e3550000 	cmp	r5, #0
    8fd0:	0a00001b 	beq	9044 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)+0xd4>
    8fd4:	e594301c 	ldr	r3, [r4, #28]
    8fd8:	e3530000 	cmp	r3, #0
    8fdc:	0a000003 	beq	8ff0 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)+0x80>
    8fe0:	e59f1070 	ldr	r1, [pc, #112]	; 9058 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)+0xe8>
    8fe4:	e3a020c4 	mov	r2, #196	; 0xc4
    8fe8:	e2810f59 	add	r0, r1, #356	; 0x164
    8fec:	eb001c77 	bl	101d0 <assertion_failed>
    8ff0:	e5940018 	ldr	r0, [r4, #24]
    8ff4:	e584501c 	str	r5, [r4, #28]
    8ff8:	e3500000 	cmp	r0, #0
    8ffc:	e5846020 	str	r6, [r4, #32]
    9000:	0a000007 	beq	9024 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)+0xb4>
    9004:	e1a01004 	mov	r1, r4
    9008:	e8bd4070 	pop	{r4, r5, r6, lr}
    900c:	ea00230e 	b	11c4c <CGPIOManager::ConnectInterrupt(CGPIOPin*)>
    9010:	e59f1040 	ldr	r1, [pc, #64]	; 9058 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)+0xe8>
    9014:	e3a020be 	mov	r2, #190	; 0xbe
    9018:	e2810090 	add	r0, r1, #144	; 0x90
    901c:	eb001c6b 	bl	101d0 <assertion_failed>
    9020:	eaffffdb 	b	8f94 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)+0x24>
    9024:	e59f102c 	ldr	r1, [pc, #44]	; 9058 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)+0xe8>
    9028:	e3a020c9 	mov	r2, #201	; 0xc9
    902c:	e2810f5d 	add	r0, r1, #372	; 0x174
    9030:	eb001c66 	bl	101d0 <assertion_failed>
    9034:	e5940018 	ldr	r0, [r4, #24]
    9038:	e1a01004 	mov	r1, r4
    903c:	e8bd4070 	pop	{r4, r5, r6, lr}
    9040:	ea002301 	b	11c4c <CGPIOManager::ConnectInterrupt(CGPIOPin*)>
    9044:	e59f100c 	ldr	r1, [pc, #12]	; 9058 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)+0xe8>
    9048:	e3a020c3 	mov	r2, #195	; 0xc3
    904c:	e2810f55 	add	r0, r1, #340	; 0x154
    9050:	eb001c5e 	bl	101d0 <assertion_failed>
    9054:	eaffffde 	b	8fd4 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)+0x64>
    9058:	00013194 	.word	0x00013194

0000905c <CGPIOPin::DisconnectInterrupt()>:
    905c:	e5d03010 	ldrb	r3, [r0, #16]
    9060:	e92d4010 	push	{r4, lr}
    9064:	e2432002 	sub	r2, r3, #2
    9068:	e3530000 	cmp	r3, #0
    906c:	13520001 	cmpne	r2, #1
    9070:	e1a04000 	mov	r4, r0
    9074:	8a000018 	bhi	90dc <CGPIOPin::DisconnectInterrupt()+0x80>
    9078:	e5d43024 	ldrb	r3, [r4, #36]	; 0x24
    907c:	e3530006 	cmp	r3, #6
    9080:	0a000003 	beq	9094 <CGPIOPin::DisconnectInterrupt()+0x38>
    9084:	e59f1098 	ldr	r1, [pc, #152]	; 9124 <CGPIOPin::DisconnectInterrupt()+0xc8>
    9088:	e3a020d3 	mov	r2, #211	; 0xd3
    908c:	e2810f42 	add	r0, r1, #264	; 0x108
    9090:	eb001c4e 	bl	101d0 <assertion_failed>
    9094:	e5d43025 	ldrb	r3, [r4, #37]	; 0x25
    9098:	e3530006 	cmp	r3, #6
    909c:	0a000003 	beq	90b0 <CGPIOPin::DisconnectInterrupt()+0x54>
    90a0:	e59f107c 	ldr	r1, [pc, #124]	; 9124 <CGPIOPin::DisconnectInterrupt()+0xc8>
    90a4:	e3a020d4 	mov	r2, #212	; 0xd4
    90a8:	e2810f4b 	add	r0, r1, #300	; 0x12c
    90ac:	eb001c47 	bl	101d0 <assertion_failed>
    90b0:	e594301c 	ldr	r3, [r4, #28]
    90b4:	e3530000 	cmp	r3, #0
    90b8:	0a000014 	beq	9110 <CGPIOPin::DisconnectInterrupt()+0xb4>
    90bc:	e3a03000 	mov	r3, #0
    90c0:	e5940018 	ldr	r0, [r4, #24]
    90c4:	e584301c 	str	r3, [r4, #28]
    90c8:	e1500003 	cmp	r0, r3
    90cc:	0a000007 	beq	90f0 <CGPIOPin::DisconnectInterrupt()+0x94>
    90d0:	e1a01004 	mov	r1, r4
    90d4:	e8bd4010 	pop	{r4, lr}
    90d8:	ea002307 	b	11cfc <CGPIOManager::DisconnectInterrupt(CGPIOPin*)>
    90dc:	e59f1040 	ldr	r1, [pc, #64]	; 9124 <CGPIOPin::DisconnectInterrupt()+0xc8>
    90e0:	e3a020d1 	mov	r2, #209	; 0xd1
    90e4:	e2810090 	add	r0, r1, #144	; 0x90
    90e8:	eb001c38 	bl	101d0 <assertion_failed>
    90ec:	eaffffe1 	b	9078 <CGPIOPin::DisconnectInterrupt()+0x1c>
    90f0:	e59f102c 	ldr	r1, [pc, #44]	; 9124 <CGPIOPin::DisconnectInterrupt()+0xc8>
    90f4:	e3a020d9 	mov	r2, #217	; 0xd9
    90f8:	e2810f5d 	add	r0, r1, #372	; 0x174
    90fc:	eb001c33 	bl	101d0 <assertion_failed>
    9100:	e5940018 	ldr	r0, [r4, #24]
    9104:	e1a01004 	mov	r1, r4
    9108:	e8bd4010 	pop	{r4, lr}
    910c:	ea0022fa 	b	11cfc <CGPIOManager::DisconnectInterrupt(CGPIOPin*)>
    9110:	e59f100c 	ldr	r1, [pc, #12]	; 9124 <CGPIOPin::DisconnectInterrupt()+0xc8>
    9114:	e3a020d6 	mov	r2, #214	; 0xd6
    9118:	e2810f61 	add	r0, r1, #388	; 0x184
    911c:	eb001c2b 	bl	101d0 <assertion_failed>
    9120:	eaffffe5 	b	90bc <CGPIOPin::DisconnectInterrupt()+0x60>
    9124:	00013194 	.word	0x00013194

00009128 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)>:
    9128:	e5d03010 	ldrb	r3, [r0, #16]
    912c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    9130:	e2432002 	sub	r2, r3, #2
    9134:	e3530000 	cmp	r3, #0
    9138:	13520001 	cmpne	r2, #1
    913c:	e1a04000 	mov	r4, r0
    9140:	e1a05001 	mov	r5, r1
    9144:	8a00002f 	bhi	9208 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0xe0>
    9148:	e594301c 	ldr	r3, [r4, #28]
    914c:	e3530000 	cmp	r3, #0
    9150:	0a000033 	beq	9224 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0xfc>
    9154:	e5d43024 	ldrb	r3, [r4, #36]	; 0x24
    9158:	e3530006 	cmp	r3, #6
    915c:	0a000003 	beq	9170 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x48>
    9160:	e59f10d0 	ldr	r1, [pc, #208]	; 9238 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x110>
    9164:	e3a020e4 	mov	r2, #228	; 0xe4
    9168:	e2810f42 	add	r0, r1, #264	; 0x108
    916c:	eb001c17 	bl	101d0 <assertion_failed>
    9170:	e3550005 	cmp	r5, #5
    9174:	8a000017 	bhi	91d8 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0xb0>
    9178:	e5d43025 	ldrb	r3, [r4, #37]	; 0x25
    917c:	e1530005 	cmp	r3, r5
    9180:	0a00001b 	beq	91f4 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0xcc>
    9184:	e59f70b0 	ldr	r7, [pc, #176]	; 923c <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x114>
    9188:	e5942008 	ldr	r2, [r4, #8]
    918c:	e5970000 	ldr	r0, [r7]
    9190:	e59f60a8 	ldr	r6, [pc, #168]	; 9240 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x118>
    9194:	e0853085 	add	r3, r5, r5, lsl #1
    9198:	e3500000 	cmp	r0, #0
    919c:	e5c45024 	strb	r5, [r4, #36]	; 0x24
    91a0:	e0826006 	add	r6, r2, r6
    91a4:	e1a05103 	lsl	r5, r3, #2
    91a8:	1a000008 	bne	91d0 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0xa8>
    91ac:	e594200c 	ldr	r2, [r4, #12]
    91b0:	e7963005 	ldr	r3, [r6, r5]
    91b4:	e1833002 	orr	r3, r3, r2
    91b8:	e7863005 	str	r3, [r6, r5]
    91bc:	e5973000 	ldr	r3, [r7]
    91c0:	e3530000 	cmp	r3, #0
    91c4:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
    91c8:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    91cc:	ea001a42 	b	fadc <LeaveCritical>
    91d0:	eb001a14 	bl	fa28 <EnterCritical>
    91d4:	eafffff4 	b	91ac <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x84>
    91d8:	e59f1058 	ldr	r1, [pc, #88]	; 9238 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x110>
    91dc:	e3a020e5 	mov	r2, #229	; 0xe5
    91e0:	e2810f65 	add	r0, r1, #404	; 0x194
    91e4:	eb001bf9 	bl	101d0 <assertion_failed>
    91e8:	e5d43025 	ldrb	r3, [r4, #37]	; 0x25
    91ec:	e1530005 	cmp	r3, r5
    91f0:	1affffe3 	bne	9184 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x5c>
    91f4:	e59f103c 	ldr	r1, [pc, #60]	; 9238 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x110>
    91f8:	e3a020e6 	mov	r2, #230	; 0xe6
    91fc:	e2810f6e 	add	r0, r1, #440	; 0x1b8
    9200:	eb001bf2 	bl	101d0 <assertion_failed>
    9204:	eaffffde 	b	9184 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x5c>
    9208:	e59f1028 	ldr	r1, [pc, #40]	; 9238 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x110>
    920c:	e3a020e1 	mov	r2, #225	; 0xe1
    9210:	e2810090 	add	r0, r1, #144	; 0x90
    9214:	eb001bed 	bl	101d0 <assertion_failed>
    9218:	e594301c 	ldr	r3, [r4, #28]
    921c:	e3530000 	cmp	r3, #0
    9220:	1affffcb 	bne	9154 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x2c>
    9224:	e59f100c 	ldr	r1, [pc, #12]	; 9238 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x110>
    9228:	e3a020e2 	mov	r2, #226	; 0xe2
    922c:	e2810f61 	add	r0, r1, #388	; 0x184
    9230:	eb001be6 	bl	101d0 <assertion_failed>
    9234:	eaffffc6 	b	9154 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x2c>
    9238:	00013194 	.word	0x00013194
    923c:	000155c8 	.word	0x000155c8
    9240:	2020004c 	.word	0x2020004c

00009244 <CGPIOPin::DisableInterrupt()>:
    9244:	e5d03010 	ldrb	r3, [r0, #16]
    9248:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    924c:	e2432002 	sub	r2, r3, #2
    9250:	e3530000 	cmp	r3, #0
    9254:	13520001 	cmpne	r2, #1
    9258:	e1a05000 	mov	r5, r0
    925c:	8a00001e 	bhi	92dc <CGPIOPin::DisableInterrupt()+0x98>
    9260:	e5d53024 	ldrb	r3, [r5, #36]	; 0x24
    9264:	e3530005 	cmp	r3, #5
    9268:	8a000015 	bhi	92c4 <CGPIOPin::DisableInterrupt()+0x80>
    926c:	e59f707c 	ldr	r7, [pc, #124]	; 92f0 <CGPIOPin::DisableInterrupt()+0xac>
    9270:	e5952008 	ldr	r2, [r5, #8]
    9274:	e5970000 	ldr	r0, [r7]
    9278:	e59f6074 	ldr	r6, [pc, #116]	; 92f4 <CGPIOPin::DisableInterrupt()+0xb0>
    927c:	e0833083 	add	r3, r3, r3, lsl #1
    9280:	e3500000 	cmp	r0, #0
    9284:	e1a04103 	lsl	r4, r3, #2
    9288:	e0826006 	add	r6, r2, r6
    928c:	1a00000a 	bne	92bc <CGPIOPin::DisableInterrupt()+0x78>
    9290:	e7963004 	ldr	r3, [r6, r4]
    9294:	e595200c 	ldr	r2, [r5, #12]
    9298:	e1c33002 	bic	r3, r3, r2
    929c:	e7863004 	str	r3, [r6, r4]
    92a0:	e5973000 	ldr	r3, [r7]
    92a4:	e3530000 	cmp	r3, #0
    92a8:	0a000000 	beq	92b0 <CGPIOPin::DisableInterrupt()+0x6c>
    92ac:	eb001a0a 	bl	fadc <LeaveCritical>
    92b0:	e3a03006 	mov	r3, #6
    92b4:	e5c53024 	strb	r3, [r5, #36]	; 0x24
    92b8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    92bc:	eb0019d9 	bl	fa28 <EnterCritical>
    92c0:	eafffff2 	b	9290 <CGPIOPin::DisableInterrupt()+0x4c>
    92c4:	e59f102c 	ldr	r1, [pc, #44]	; 92f8 <CGPIOPin::DisableInterrupt()+0xb4>
    92c8:	e3a020f9 	mov	r2, #249	; 0xf9
    92cc:	e2810f75 	add	r0, r1, #468	; 0x1d4
    92d0:	eb001bbe 	bl	101d0 <assertion_failed>
    92d4:	e5d53024 	ldrb	r3, [r5, #36]	; 0x24
    92d8:	eaffffe3 	b	926c <CGPIOPin::DisableInterrupt()+0x28>
    92dc:	e59f1014 	ldr	r1, [pc, #20]	; 92f8 <CGPIOPin::DisableInterrupt()+0xb4>
    92e0:	e3a020f7 	mov	r2, #247	; 0xf7
    92e4:	e2810090 	add	r0, r1, #144	; 0x90
    92e8:	eb001bb8 	bl	101d0 <assertion_failed>
    92ec:	eaffffdb 	b	9260 <CGPIOPin::DisableInterrupt()+0x1c>
    92f0:	000155c8 	.word	0x000155c8
    92f4:	2020004c 	.word	0x2020004c
    92f8:	00013194 	.word	0x00013194

000092fc <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)>:
    92fc:	e5d03010 	ldrb	r3, [r0, #16]
    9300:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    9304:	e2432002 	sub	r2, r3, #2
    9308:	e3530000 	cmp	r3, #0
    930c:	13520001 	cmpne	r2, #1
    9310:	e1a04000 	mov	r4, r0
    9314:	e1a05001 	mov	r5, r1
    9318:	8a00002f 	bhi	93dc <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0xe0>
    931c:	e594301c 	ldr	r3, [r4, #28]
    9320:	e3530000 	cmp	r3, #0
    9324:	0a000033 	beq	93f8 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0xfc>
    9328:	e5d43025 	ldrb	r3, [r4, #37]	; 0x25
    932c:	e3530006 	cmp	r3, #6
    9330:	0a000003 	beq	9344 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x48>
    9334:	e59f10d0 	ldr	r1, [pc, #208]	; 940c <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x110>
    9338:	e59f20d0 	ldr	r2, [pc, #208]	; 9410 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x114>
    933c:	e2810f4b 	add	r0, r1, #300	; 0x12c
    9340:	eb001ba2 	bl	101d0 <assertion_failed>
    9344:	e3550005 	cmp	r5, #5
    9348:	8a000017 	bhi	93ac <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0xb0>
    934c:	e5d43024 	ldrb	r3, [r4, #36]	; 0x24
    9350:	e1530005 	cmp	r3, r5
    9354:	0a00001b 	beq	93c8 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0xcc>
    9358:	e59f70b4 	ldr	r7, [pc, #180]	; 9414 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x118>
    935c:	e5942008 	ldr	r2, [r4, #8]
    9360:	e5970000 	ldr	r0, [r7]
    9364:	e59f60ac 	ldr	r6, [pc, #172]	; 9418 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x11c>
    9368:	e0853085 	add	r3, r5, r5, lsl #1
    936c:	e3500000 	cmp	r0, #0
    9370:	e5c45025 	strb	r5, [r4, #37]	; 0x25
    9374:	e0826006 	add	r6, r2, r6
    9378:	e1a05103 	lsl	r5, r3, #2
    937c:	1a000008 	bne	93a4 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0xa8>
    9380:	e594200c 	ldr	r2, [r4, #12]
    9384:	e7963005 	ldr	r3, [r6, r5]
    9388:	e1833002 	orr	r3, r3, r2
    938c:	e7863005 	str	r3, [r6, r5]
    9390:	e5973000 	ldr	r3, [r7]
    9394:	e3530000 	cmp	r3, #0
    9398:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
    939c:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    93a0:	ea0019cd 	b	fadc <LeaveCritical>
    93a4:	eb00199f 	bl	fa28 <EnterCritical>
    93a8:	eafffff4 	b	9380 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x84>
    93ac:	e59f1058 	ldr	r1, [pc, #88]	; 940c <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x110>
    93b0:	e59f2064 	ldr	r2, [pc, #100]	; 941c <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x120>
    93b4:	e2810f65 	add	r0, r1, #404	; 0x194
    93b8:	eb001b84 	bl	101d0 <assertion_failed>
    93bc:	e5d43024 	ldrb	r3, [r4, #36]	; 0x24
    93c0:	e1530005 	cmp	r3, r5
    93c4:	1affffe3 	bne	9358 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x5c>
    93c8:	e59f103c 	ldr	r1, [pc, #60]	; 940c <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x110>
    93cc:	e59f204c 	ldr	r2, [pc, #76]	; 9420 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x124>
    93d0:	e2810f7e 	add	r0, r1, #504	; 0x1f8
    93d4:	eb001b7d 	bl	101d0 <assertion_failed>
    93d8:	eaffffde 	b	9358 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x5c>
    93dc:	e59f1028 	ldr	r1, [pc, #40]	; 940c <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x110>
    93e0:	e59f203c 	ldr	r2, [pc, #60]	; 9424 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x128>
    93e4:	e2810090 	add	r0, r1, #144	; 0x90
    93e8:	eb001b78 	bl	101d0 <assertion_failed>
    93ec:	e594301c 	ldr	r3, [r4, #28]
    93f0:	e3530000 	cmp	r3, #0
    93f4:	1affffcb 	bne	9328 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x2c>
    93f8:	e59f100c 	ldr	r1, [pc, #12]	; 940c <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x110>
    93fc:	e59f2024 	ldr	r2, [pc, #36]	; 9428 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x12c>
    9400:	e2810f61 	add	r0, r1, #388	; 0x184
    9404:	eb001b71 	bl	101d0 <assertion_failed>
    9408:	eaffffc6 	b	9328 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x2c>
    940c:	00013194 	.word	0x00013194
    9410:	0000010d 	.word	0x0000010d
    9414:	000155c8 	.word	0x000155c8
    9418:	2020004c 	.word	0x2020004c
    941c:	0000010e 	.word	0x0000010e
    9420:	0000010f 	.word	0x0000010f
    9424:	0000010a 	.word	0x0000010a
    9428:	0000010b 	.word	0x0000010b

0000942c <CGPIOPin::DisableInterrupt2()>:
    942c:	e5d03010 	ldrb	r3, [r0, #16]
    9430:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    9434:	e2432002 	sub	r2, r3, #2
    9438:	e3530000 	cmp	r3, #0
    943c:	13520001 	cmpne	r2, #1
    9440:	e1a05000 	mov	r5, r0
    9444:	8a00001e 	bhi	94c4 <CGPIOPin::DisableInterrupt2()+0x98>
    9448:	e5d53025 	ldrb	r3, [r5, #37]	; 0x25
    944c:	e3530005 	cmp	r3, #5
    9450:	8a000015 	bhi	94ac <CGPIOPin::DisableInterrupt2()+0x80>
    9454:	e59f707c 	ldr	r7, [pc, #124]	; 94d8 <CGPIOPin::DisableInterrupt2()+0xac>
    9458:	e5952008 	ldr	r2, [r5, #8]
    945c:	e5970000 	ldr	r0, [r7]
    9460:	e59f6074 	ldr	r6, [pc, #116]	; 94dc <CGPIOPin::DisableInterrupt2()+0xb0>
    9464:	e0833083 	add	r3, r3, r3, lsl #1
    9468:	e3500000 	cmp	r0, #0
    946c:	e1a04103 	lsl	r4, r3, #2
    9470:	e0826006 	add	r6, r2, r6
    9474:	1a00000a 	bne	94a4 <CGPIOPin::DisableInterrupt2()+0x78>
    9478:	e7963004 	ldr	r3, [r6, r4]
    947c:	e595200c 	ldr	r2, [r5, #12]
    9480:	e1c33002 	bic	r3, r3, r2
    9484:	e7863004 	str	r3, [r6, r4]
    9488:	e5973000 	ldr	r3, [r7]
    948c:	e3530000 	cmp	r3, #0
    9490:	0a000000 	beq	9498 <CGPIOPin::DisableInterrupt2()+0x6c>
    9494:	eb001990 	bl	fadc <LeaveCritical>
    9498:	e3a03006 	mov	r3, #6
    949c:	e5c53025 	strb	r3, [r5, #37]	; 0x25
    94a0:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    94a4:	eb00195f 	bl	fa28 <EnterCritical>
    94a8:	eafffff2 	b	9478 <CGPIOPin::DisableInterrupt2()+0x4c>
    94ac:	e59f102c 	ldr	r1, [pc, #44]	; 94e0 <CGPIOPin::DisableInterrupt2()+0xb4>
    94b0:	e59f202c 	ldr	r2, [pc, #44]	; 94e4 <CGPIOPin::DisableInterrupt2()+0xb8>
    94b4:	e2810f85 	add	r0, r1, #532	; 0x214
    94b8:	eb001b44 	bl	101d0 <assertion_failed>
    94bc:	e5d53025 	ldrb	r3, [r5, #37]	; 0x25
    94c0:	eaffffe3 	b	9454 <CGPIOPin::DisableInterrupt2()+0x28>
    94c4:	e59f1014 	ldr	r1, [pc, #20]	; 94e0 <CGPIOPin::DisableInterrupt2()+0xb4>
    94c8:	e3a02e12 	mov	r2, #288	; 0x120
    94cc:	e2810090 	add	r0, r1, #144	; 0x90
    94d0:	eb001b3e 	bl	101d0 <assertion_failed>
    94d4:	eaffffdb 	b	9448 <CGPIOPin::DisableInterrupt2()+0x1c>
    94d8:	000155c8 	.word	0x000155c8
    94dc:	2020004c 	.word	0x2020004c
    94e0:	00013194 	.word	0x00013194
    94e4:	00000122 	.word	0x00000122

000094e8 <CGPIOPin::WriteAll(unsigned int, unsigned int)>:
    94e8:	e3a03000 	mov	r3, #0
    94ec:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
    94f0:	e1d13000 	bics	r3, r1, r0
    94f4:	159f2018 	ldrne	r2, [pc, #24]	; 9514 <CGPIOPin::WriteAll(unsigned int, unsigned int)+0x2c>
    94f8:	15823028 	strne	r3, [r2, #40]	; 0x28
    94fc:	e0100001 	ands	r0, r0, r1
    9500:	159f300c 	ldrne	r3, [pc, #12]	; 9514 <CGPIOPin::WriteAll(unsigned int, unsigned int)+0x2c>
    9504:	1583001c 	strne	r0, [r3, #28]
    9508:	e3a03000 	mov	r3, #0
    950c:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
    9510:	e12fff1e 	bx	lr
    9514:	20200000 	.word	0x20200000

00009518 <CGPIOPin::ReadAll()>:
    9518:	e3a03000 	mov	r3, #0
    951c:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
    9520:	e59f2008 	ldr	r2, [pc, #8]	; 9530 <CGPIOPin::ReadAll()+0x18>
    9524:	e5920034 	ldr	r0, [r2, #52]	; 0x34
    9528:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
    952c:	e12fff1e 	bx	lr
    9530:	20200000 	.word	0x20200000

00009534 <CGPIOPin::SetPullUpMode(unsigned int)>:
    9534:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    9538:	e1a08000 	mov	r8, r0
    953c:	e59f4078 	ldr	r4, [pc, #120]	; 95bc <CGPIOPin::SetPullUpMode(unsigned int)+0x88>
    9540:	e1a09001 	mov	r9, r1
    9544:	e5940000 	ldr	r0, [r4]
    9548:	e5986008 	ldr	r6, [r8, #8]
    954c:	e3500000 	cmp	r0, #0
    9550:	e59f5068 	ldr	r5, [pc, #104]	; 95c0 <CGPIOPin::SetPullUpMode(unsigned int)+0x8c>
    9554:	1a000016 	bne	95b4 <CGPIOPin::SetPullUpMode(unsigned int)+0x80>
    9558:	e3590002 	cmp	r9, #2
    955c:	8a00000f 	bhi	95a0 <CGPIOPin::SetPullUpMode(unsigned int)+0x6c>
    9560:	e59f705c 	ldr	r7, [pc, #92]	; 95c4 <CGPIOPin::SetPullUpMode(unsigned int)+0x90>
    9564:	e3a00005 	mov	r0, #5
    9568:	e5879094 	str	r9, [r7, #148]	; 0x94
    956c:	eb001563 	bl	eb00 <CTimer::SimpleusDelay(unsigned int)>
    9570:	e598300c 	ldr	r3, [r8, #12]
    9574:	e3a00005 	mov	r0, #5
    9578:	e7863005 	str	r3, [r6, r5]
    957c:	eb00155f 	bl	eb00 <CTimer::SimpleusDelay(unsigned int)>
    9580:	e3a03000 	mov	r3, #0
    9584:	e5873094 	str	r3, [r7, #148]	; 0x94
    9588:	e7863005 	str	r3, [r6, r5]
    958c:	e5943000 	ldr	r3, [r4]
    9590:	e3530000 	cmp	r3, #0
    9594:	08bd87f0 	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
    9598:	e8bd47f0 	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
    959c:	ea00194e 	b	fadc <LeaveCritical>
    95a0:	e59f1020 	ldr	r1, [pc, #32]	; 95c8 <CGPIOPin::SetPullUpMode(unsigned int)+0x94>
    95a4:	e3a02f55 	mov	r2, #340	; 0x154
    95a8:	e2810f8e 	add	r0, r1, #568	; 0x238
    95ac:	eb001b07 	bl	101d0 <assertion_failed>
    95b0:	eaffffea 	b	9560 <CGPIOPin::SetPullUpMode(unsigned int)+0x2c>
    95b4:	eb00191b 	bl	fa28 <EnterCritical>
    95b8:	eaffffe6 	b	9558 <CGPIOPin::SetPullUpMode(unsigned int)+0x24>
    95bc:	000155c8 	.word	0x000155c8
    95c0:	20200098 	.word	0x20200098
    95c4:	20200000 	.word	0x20200000
    95c8:	00013194 	.word	0x00013194

000095cc <CGPIOPin::SetAlternateFunction(unsigned int)>:
    95cc:	e5903004 	ldr	r3, [r0, #4]
    95d0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    95d4:	e3530035 	cmp	r3, #53	; 0x35
    95d8:	e1a05001 	mov	r5, r1
    95dc:	8a000022 	bhi	966c <CGPIOPin::SetAlternateFunction(unsigned int)+0xa0>
    95e0:	e59f00a0 	ldr	r0, [pc, #160]	; 9688 <CGPIOPin::SetAlternateFunction(unsigned int)+0xbc>
    95e4:	e3550005 	cmp	r5, #5
    95e8:	e0810093 	umull	r0, r1, r3, r0
    95ec:	e1a041a1 	lsr	r4, r1, #3
    95f0:	e2842302 	add	r2, r4, #134217728	; 0x8000000
    95f4:	e0844104 	add	r4, r4, r4, lsl #2
    95f8:	e2822702 	add	r2, r2, #524288	; 0x80000
    95fc:	e0434084 	sub	r4, r3, r4, lsl #1
    9600:	e1a06102 	lsl	r6, r2, #2
    9604:	e0844084 	add	r4, r4, r4, lsl #1
    9608:	8a000012 	bhi	9658 <CGPIOPin::SetAlternateFunction(unsigned int)+0x8c>
    960c:	e59f7078 	ldr	r7, [pc, #120]	; 968c <CGPIOPin::SetAlternateFunction(unsigned int)+0xc0>
    9610:	e5970000 	ldr	r0, [r7]
    9614:	e3500000 	cmp	r0, #0
    9618:	1a00000c 	bne	9650 <CGPIOPin::SetAlternateFunction(unsigned int)+0x84>
    961c:	e3a00007 	mov	r0, #7
    9620:	e59f1068 	ldr	r1, [pc, #104]	; 9690 <CGPIOPin::SetAlternateFunction(unsigned int)+0xc4>
    9624:	e5963000 	ldr	r3, [r6]
    9628:	e0811105 	add	r1, r1, r5, lsl #2
    962c:	e5912254 	ldr	r2, [r1, #596]	; 0x254
    9630:	e1c33410 	bic	r3, r3, r0, lsl r4
    9634:	e1834412 	orr	r4, r3, r2, lsl r4
    9638:	e5864000 	str	r4, [r6]
    963c:	e5973000 	ldr	r3, [r7]
    9640:	e3530000 	cmp	r3, #0
    9644:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
    9648:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    964c:	ea001922 	b	fadc <LeaveCritical>
    9650:	eb0018f4 	bl	fa28 <EnterCritical>
    9654:	eafffff0 	b	961c <CGPIOPin::SetAlternateFunction(unsigned int)+0x50>
    9658:	e59f1034 	ldr	r1, [pc, #52]	; 9694 <CGPIOPin::SetAlternateFunction(unsigned int)+0xc8>
    965c:	e59f2034 	ldr	r2, [pc, #52]	; 9698 <CGPIOPin::SetAlternateFunction(unsigned int)+0xcc>
    9660:	e2810f97 	add	r0, r1, #604	; 0x25c
    9664:	eb001ad9 	bl	101d0 <assertion_failed>
    9668:	eaffffe7 	b	960c <CGPIOPin::SetAlternateFunction(unsigned int)+0x40>
    966c:	e1a04000 	mov	r4, r0
    9670:	e59f101c 	ldr	r1, [pc, #28]	; 9694 <CGPIOPin::SetAlternateFunction(unsigned int)+0xc8>
    9674:	e59f2020 	ldr	r2, [pc, #32]	; 969c <CGPIOPin::SetAlternateFunction(unsigned int)+0xd0>
    9678:	e2810020 	add	r0, r1, #32
    967c:	eb001ad3 	bl	101d0 <assertion_failed>
    9680:	e5943004 	ldr	r3, [r4, #4]
    9684:	eaffffd5 	b	95e0 <CGPIOPin::SetAlternateFunction(unsigned int)+0x14>
    9688:	cccccccd 	.word	0xcccccccd
    968c:	000155c8 	.word	0x000155c8
    9690:	00013184 	.word	0x00013184
    9694:	00013194 	.word	0x00013194
    9698:	00000165 	.word	0x00000165
    969c:	00000161 	.word	0x00000161

000096a0 <CGPIOPin::InterruptHandler()>:
    96a0:	e5d03010 	ldrb	r3, [r0, #16]
    96a4:	e92d4010 	push	{r4, lr}
    96a8:	e2432002 	sub	r2, r3, #2
    96ac:	e3530000 	cmp	r3, #0
    96b0:	13520001 	cmpne	r2, #1
    96b4:	e1a04000 	mov	r4, r0
    96b8:	8a00000b 	bhi	96ec <CGPIOPin::InterruptHandler()+0x4c>
    96bc:	e5d43024 	ldrb	r3, [r4, #36]	; 0x24
    96c0:	e3530005 	cmp	r3, #5
    96c4:	9a000002 	bls	96d4 <CGPIOPin::InterruptHandler()+0x34>
    96c8:	e5d43025 	ldrb	r3, [r4, #37]	; 0x25
    96cc:	e3530005 	cmp	r3, #5
    96d0:	8a00000a 	bhi	9700 <CGPIOPin::InterruptHandler()+0x60>
    96d4:	e594301c 	ldr	r3, [r4, #28]
    96d8:	e3530000 	cmp	r3, #0
    96dc:	0a00000e 	beq	971c <CGPIOPin::InterruptHandler()+0x7c>
    96e0:	e5940020 	ldr	r0, [r4, #32]
    96e4:	e8bd4010 	pop	{r4, lr}
    96e8:	e12fff13 	bx	r3
    96ec:	e59f1048 	ldr	r1, [pc, #72]	; 973c <CGPIOPin::InterruptHandler()+0x9c>
    96f0:	e3a02f5d 	mov	r2, #372	; 0x174
    96f4:	e2810090 	add	r0, r1, #144	; 0x90
    96f8:	eb001ab4 	bl	101d0 <assertion_failed>
    96fc:	eaffffee 	b	96bc <CGPIOPin::InterruptHandler()+0x1c>
    9700:	e59f1034 	ldr	r1, [pc, #52]	; 973c <CGPIOPin::InterruptHandler()+0x9c>
    9704:	e59f2034 	ldr	r2, [pc, #52]	; 9740 <CGPIOPin::InterruptHandler()+0xa0>
    9708:	e2810f9b 	add	r0, r1, #620	; 0x26c
    970c:	eb001aaf 	bl	101d0 <assertion_failed>
    9710:	e594301c 	ldr	r3, [r4, #28]
    9714:	e3530000 	cmp	r3, #0
    9718:	1afffff0 	bne	96e0 <CGPIOPin::InterruptHandler()+0x40>
    971c:	e59f1018 	ldr	r1, [pc, #24]	; 973c <CGPIOPin::InterruptHandler()+0x9c>
    9720:	e3a02f5e 	mov	r2, #376	; 0x178
    9724:	e2810f61 	add	r0, r1, #388	; 0x184
    9728:	eb001aa8 	bl	101d0 <assertion_failed>
    972c:	e594301c 	ldr	r3, [r4, #28]
    9730:	e5940020 	ldr	r0, [r4, #32]
    9734:	e8bd4010 	pop	{r4, lr}
    9738:	e12fff13 	bx	r3
    973c:	00013194 	.word	0x00013194
    9740:	00000176 	.word	0x00000176

00009744 <CGPIOPin::DisableAllInterrupts(unsigned int)>:
    9744:	e3500035 	cmp	r0, #53	; 0x35
    9748:	e92d4070 	push	{r4, r5, r6, lr}
    974c:	e1a05000 	mov	r5, r0
    9750:	8a00001d 	bhi	97cc <CGPIOPin::DisableAllInterrupts(unsigned int)+0x88>
    9754:	e3a02001 	mov	r2, #1
    9758:	e59f6080 	ldr	r6, [pc, #128]	; 97e0 <CGPIOPin::DisableAllInterrupts(unsigned int)+0x9c>
    975c:	e59f4080 	ldr	r4, [pc, #128]	; 97e4 <CGPIOPin::DisableAllInterrupts(unsigned int)+0xa0>
    9760:	e5960000 	ldr	r0, [r6]
    9764:	e08442a5 	add	r4, r4, r5, lsr #5
    9768:	e3500000 	cmp	r0, #0
    976c:	e205501f 	and	r5, r5, #31
    9770:	e1a04104 	lsl	r4, r4, #2
    9774:	e1a05512 	lsl	r5, r2, r5
    9778:	1a00000e 	bne	97b8 <CGPIOPin::DisableAllInterrupts(unsigned int)+0x74>
    977c:	e59f3064 	ldr	r3, [pc, #100]	; 97e8 <CGPIOPin::DisableAllInterrupts(unsigned int)+0xa4>
    9780:	e1540003 	cmp	r4, r3
    9784:	88bd8070 	pophi	{r4, r5, r6, pc}
    9788:	e1e02005 	mvn	r2, r5
    978c:	e59f1054 	ldr	r1, [pc, #84]	; 97e8 <CGPIOPin::DisableAllInterrupts(unsigned int)+0xa4>
    9790:	e5943000 	ldr	r3, [r4]
    9794:	e0033002 	and	r3, r3, r2
    9798:	e484300c 	str	r3, [r4], #12
    979c:	e1540001 	cmp	r4, r1
    97a0:	9afffffa 	bls	9790 <CGPIOPin::DisableAllInterrupts(unsigned int)+0x4c>
    97a4:	e5963000 	ldr	r3, [r6]
    97a8:	e3530000 	cmp	r3, #0
    97ac:	08bd8070 	popeq	{r4, r5, r6, pc}
    97b0:	e8bd4070 	pop	{r4, r5, r6, lr}
    97b4:	ea0018c8 	b	fadc <LeaveCritical>
    97b8:	eb00189a 	bl	fa28 <EnterCritical>
    97bc:	e59f3024 	ldr	r3, [pc, #36]	; 97e8 <CGPIOPin::DisableAllInterrupts(unsigned int)+0xa4>
    97c0:	e1540003 	cmp	r4, r3
    97c4:	9affffef 	bls	9788 <CGPIOPin::DisableAllInterrupts(unsigned int)+0x44>
    97c8:	eafffff5 	b	97a4 <CGPIOPin::DisableAllInterrupts(unsigned int)+0x60>
    97cc:	e59f1018 	ldr	r1, [pc, #24]	; 97ec <CGPIOPin::DisableAllInterrupts(unsigned int)+0xa8>
    97d0:	e59f2018 	ldr	r2, [pc, #24]	; 97f0 <CGPIOPin::DisableAllInterrupts(unsigned int)+0xac>
    97d4:	e2810fae 	add	r0, r1, #696	; 0x2b8
    97d8:	eb001a7c 	bl	101d0 <assertion_failed>
    97dc:	eaffffdc 	b	9754 <CGPIOPin::DisableAllInterrupts(unsigned int)+0x10>
    97e0:	000155c8 	.word	0x000155c8
    97e4:	08080013 	.word	0x08080013
    97e8:	2020008b 	.word	0x2020008b
    97ec:	00013194 	.word	0x00013194
    97f0:	0000017e 	.word	0x0000017e

000097f4 <_GLOBAL__sub_I__ZN8CGPIOPin10s_SpinLockE>:
    97f4:	e3a02001 	mov	r2, #1
    97f8:	e59f3004 	ldr	r3, [pc, #4]	; 9804 <_GLOBAL__sub_I__ZN8CGPIOPin10s_SpinLockE+0x10>
    97fc:	e5832000 	str	r2, [r3]
    9800:	e12fff1e 	bx	lr
    9804:	000155c8 	.word	0x000155c8

00009808 <CKernelOptions::GetDecimal(char*) [clone .part.0]>:
    9808:	e3a01000 	mov	r1, #0
    980c:	ea00000a 	b	983c <CKernelOptions::GetDecimal(char*) [clone .part.0]+0x34>
    9810:	e3520009 	cmp	r2, #9
    9814:	8a000011 	bhi	9860 <CKernelOptions::GetDecimal(char*) [clone .part.0]+0x58>
    9818:	e3730001 	cmn	r3, #1
    981c:	13a02000 	movne	r2, #0
    9820:	03a02001 	moveq	r2, #1
    9824:	e1510003 	cmp	r1, r3
    9828:	91a01002 	movls	r1, r2
    982c:	83821001 	orrhi	r1, r2, #1
    9830:	e3510000 	cmp	r1, #0
    9834:	1a000009 	bne	9860 <CKernelOptions::GetDecimal(char*) [clone .part.0]+0x58>
    9838:	e1a01003 	mov	r1, r3
    983c:	e0d0c0d1 	ldrsb	ip, [r0], #1
    9840:	e0813101 	add	r3, r1, r1, lsl #2
    9844:	e24c2030 	sub	r2, ip, #48	; 0x30
    9848:	e35c0000 	cmp	ip, #0
    984c:	e0823083 	add	r3, r2, r3, lsl #1
    9850:	e6ef2072 	uxtb	r2, r2
    9854:	1affffed 	bne	9810 <CKernelOptions::GetDecimal(char*) [clone .part.0]+0x8>
    9858:	e1a00001 	mov	r0, r1
    985c:	e12fff1e 	bx	lr
    9860:	e3e01000 	mvn	r1, #0
    9864:	e1a00001 	mov	r0, r1
    9868:	e12fff1e 	bx	lr

0000986c <CKernelOptions::~CKernelOptions()>:
    986c:	e3a02000 	mov	r2, #0
    9870:	e59f3004 	ldr	r3, [pc, #4]	; 987c <CKernelOptions::~CKernelOptions()+0x10>
    9874:	e5832000 	str	r2, [r3]
    9878:	e12fff1e 	bx	lr
    987c:	000155cc 	.word	0x000155cc

00009880 <CKernelOptions::GetWidth() const>:
    9880:	e5900810 	ldr	r0, [r0, #2064]	; 0x810
    9884:	e12fff1e 	bx	lr

00009888 <CKernelOptions::GetHeight() const>:
    9888:	e5900814 	ldr	r0, [r0, #2068]	; 0x814
    988c:	e12fff1e 	bx	lr

00009890 <CKernelOptions::GetLogDevice() const>:
    9890:	e2800e81 	add	r0, r0, #2064	; 0x810
    9894:	e2800008 	add	r0, r0, #8
    9898:	e12fff1e 	bx	lr

0000989c <CKernelOptions::GetLogLevel() const>:
    989c:	e590082c 	ldr	r0, [r0, #2092]	; 0x82c
    98a0:	e12fff1e 	bx	lr

000098a4 <CKernelOptions::GetKeyMap() const>:
    98a4:	e2800e83 	add	r0, r0, #2096	; 0x830
    98a8:	e12fff1e 	bx	lr

000098ac <CKernelOptions::GetUSBPowerDelay() const>:
    98ac:	e5900834 	ldr	r0, [r0, #2100]	; 0x834
    98b0:	e12fff1e 	bx	lr

000098b4 <CKernelOptions::GetSoundDevice() const>:
    98b4:	e2800e83 	add	r0, r0, #2096	; 0x830
    98b8:	e2800008 	add	r0, r0, #8
    98bc:	e12fff1e 	bx	lr

000098c0 <CKernelOptions::GetSoundOption() const>:
    98c0:	e590084c 	ldr	r0, [r0, #2124]	; 0x84c
    98c4:	e12fff1e 	bx	lr

000098c8 <CKernelOptions::GetCPUSpeed() const>:
    98c8:	e5d00850 	ldrb	r0, [r0, #2128]	; 0x850
    98cc:	e12fff1e 	bx	lr

000098d0 <CKernelOptions::GetSoCMaxTemp() const>:
    98d0:	e5900854 	ldr	r0, [r0, #2132]	; 0x854
    98d4:	e12fff1e 	bx	lr

000098d8 <CKernelOptions::Get()>:
    98d8:	e59f3004 	ldr	r3, [pc, #4]	; 98e4 <CKernelOptions::Get()+0xc>
    98dc:	e5930000 	ldr	r0, [r3]
    98e0:	e12fff1e 	bx	lr
    98e4:	000155cc 	.word	0x000155cc

000098e8 <CKernelOptions::GetToken()>:
    98e8:	e590380c 	ldr	r3, [r0, #2060]	; 0x80c
    98ec:	e1d320d0 	ldrsb	r2, [r3]
    98f0:	e3520000 	cmp	r2, #0
    98f4:	1a000005 	bne	9910 <CKernelOptions::GetToken()+0x28>
    98f8:	ea000016 	b	9958 <CKernelOptions::GetToken()+0x70>
    98fc:	e2833001 	add	r3, r3, #1
    9900:	e580380c 	str	r3, [r0, #2060]	; 0x80c
    9904:	e1d320d0 	ldrsb	r2, [r3]
    9908:	e3520000 	cmp	r2, #0
    990c:	0a000011 	beq	9958 <CKernelOptions::GetToken()+0x70>
    9910:	e3520020 	cmp	r2, #32
    9914:	0afffff8 	beq	98fc <CKernelOptions::GetToken()+0x14>
    9918:	e1a02003 	mov	r2, r3
    991c:	ea000000 	b	9924 <CKernelOptions::GetToken()+0x3c>
    9920:	e1a02001 	mov	r2, r1
    9924:	e2821001 	add	r1, r2, #1
    9928:	e580180c 	str	r1, [r0, #2060]	; 0x80c
    992c:	e1d2c0d1 	ldrsb	ip, [r2, #1]
    9930:	e35c0000 	cmp	ip, #0
    9934:	0a000008 	beq	995c <CKernelOptions::GetToken()+0x74>
    9938:	e35c0020 	cmp	ip, #32
    993c:	1afffff7 	bne	9920 <CKernelOptions::GetToken()+0x38>
    9940:	e3a0c000 	mov	ip, #0
    9944:	e2822002 	add	r2, r2, #2
    9948:	e580280c 	str	r2, [r0, #2060]	; 0x80c
    994c:	e5c1c000 	strb	ip, [r1]
    9950:	e1a00003 	mov	r0, r3
    9954:	e12fff1e 	bx	lr
    9958:	e3a03000 	mov	r3, #0
    995c:	e1a00003 	mov	r0, r3
    9960:	e12fff1e 	bx	lr

00009964 <CKernelOptions::CKernelOptions()>:
    9964:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9968:	e3a02004 	mov	r2, #4
    996c:	e1a04000 	mov	r4, r0
    9970:	e3a05000 	mov	r5, #0
    9974:	e3a0303c 	mov	r3, #60	; 0x3c
    9978:	e2806e81 	add	r6, r0, #2064	; 0x810
    997c:	e2866008 	add	r6, r6, #8
    9980:	e580282c 	str	r2, [r0, #2092]	; 0x82c
    9984:	e5803854 	str	r3, [r0, #2132]	; 0x854
    9988:	e24dd014 	sub	sp, sp, #20
    998c:	e59f134c 	ldr	r1, [pc, #844]	; 9ce0 <CKernelOptions::CKernelOptions()+0x37c>
    9990:	e1a00006 	mov	r0, r6
    9994:	e5845810 	str	r5, [r4, #2064]	; 0x810
    9998:	e5845814 	str	r5, [r4, #2068]	; 0x814
    999c:	e5845834 	str	r5, [r4, #2100]	; 0x834
    99a0:	e584584c 	str	r5, [r4, #2124]	; 0x84c
    99a4:	e5c45850 	strb	r5, [r4, #2128]	; 0x850
    99a8:	e2849e83 	add	r9, r4, #2096	; 0x830
    99ac:	eb001554 	bl	ef04 <strcpy>
    99b0:	e59f132c 	ldr	r1, [pc, #812]	; 9ce4 <CKernelOptions::CKernelOptions()+0x380>
    99b4:	e1a00009 	mov	r0, r9
    99b8:	eb001551 	bl	ef04 <strcpy>
    99bc:	e59f3324 	ldr	r3, [pc, #804]	; 9ce8 <CKernelOptions::CKernelOptions()+0x384>
    99c0:	e1a01005 	mov	r1, r5
    99c4:	e5c45838 	strb	r5, [r4, #2104]	; 0x838
    99c8:	e28d0008 	add	r0, sp, #8
    99cc:	e5834000 	str	r4, [r3]
    99d0:	eb001b45 	bl	106ec <CBcmPropertyTags::CBcmPropertyTags(bool)>
    99d4:	e58d5000 	str	r5, [sp]
    99d8:	e1a02004 	mov	r2, r4
    99dc:	e28d0008 	add	r0, sp, #8
    99e0:	e59f3304 	ldr	r3, [pc, #772]	; 9cec <CKernelOptions::CKernelOptions()+0x388>
    99e4:	e59f1304 	ldr	r1, [pc, #772]	; 9cf0 <CKernelOptions::CKernelOptions()+0x38c>
    99e8:	eb001b97 	bl	1084c <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
    99ec:	e1500005 	cmp	r0, r5
    99f0:	0a000037 	beq	9ad4 <CKernelOptions::CKernelOptions()+0x170>
    99f4:	e5943008 	ldr	r3, [r4, #8]
    99f8:	e3530b02 	cmp	r3, #2048	; 0x800
    99fc:	2a000034 	bcs	9ad4 <CKernelOptions::CKernelOptions()+0x170>
    9a00:	e0843003 	add	r3, r4, r3
    9a04:	e284200c 	add	r2, r4, #12
    9a08:	e59f82e4 	ldr	r8, [pc, #740]	; 9cf4 <CKernelOptions::CKernelOptions()+0x390>
    9a0c:	e59fa2e4 	ldr	sl, [pc, #740]	; 9cf8 <CKernelOptions::CKernelOptions()+0x394>
    9a10:	e5c3500c 	strb	r5, [r3, #12]
    9a14:	e584280c 	str	r2, [r4, #2060]	; 0x80c
    9a18:	e1a00004 	mov	r0, r4
    9a1c:	ebffffb1 	bl	98e8 <CKernelOptions::GetToken()>
    9a20:	e2507000 	subs	r7, r0, #0
    9a24:	0a00002a 	beq	9ad4 <CKernelOptions::CKernelOptions()+0x170>
    9a28:	e1d730d0 	ldrsb	r3, [r7]
    9a2c:	e3530000 	cmp	r3, #0
    9a30:	0a000008 	beq	9a58 <CKernelOptions::CKernelOptions()+0xf4>
    9a34:	e353003d 	cmp	r3, #61	; 0x3d
    9a38:	e1a05007 	mov	r5, r7
    9a3c:	1a000002 	bne	9a4c <CKernelOptions::CKernelOptions()+0xe8>
    9a40:	ea000028 	b	9ae8 <CKernelOptions::CKernelOptions()+0x184>
    9a44:	e353003d 	cmp	r3, #61	; 0x3d
    9a48:	0a000026 	beq	9ae8 <CKernelOptions::CKernelOptions()+0x184>
    9a4c:	e1f530d1 	ldrsb	r3, [r5, #1]!
    9a50:	e3530000 	cmp	r3, #0
    9a54:	1afffffa 	bne	9a44 <CKernelOptions::CKernelOptions()+0xe0>
    9a58:	e1a01008 	mov	r1, r8
    9a5c:	e1a00007 	mov	r0, r7
    9a60:	eb0014c7 	bl	ed84 <strcmp>
    9a64:	e3500000 	cmp	r0, #0
    9a68:	0affffea 	beq	9a18 <CKernelOptions::CKernelOptions()+0xb4>
    9a6c:	e1a0100a 	mov	r1, sl
    9a70:	e1a00007 	mov	r0, r7
    9a74:	eb0014c2 	bl	ed84 <strcmp>
    9a78:	e3500000 	cmp	r0, #0
    9a7c:	13a0b000 	movne	fp, #0
    9a80:	0affffe4 	beq	9a18 <CKernelOptions::CKernelOptions()+0xb4>
    9a84:	e59f1270 	ldr	r1, [pc, #624]	; 9cfc <CKernelOptions::CKernelOptions()+0x398>
    9a88:	e1a00007 	mov	r0, r7
    9a8c:	eb0014bc 	bl	ed84 <strcmp>
    9a90:	e2505000 	subs	r5, r0, #0
    9a94:	0a000037 	beq	9b78 <CKernelOptions::CKernelOptions()+0x214>
    9a98:	e59f1260 	ldr	r1, [pc, #608]	; 9d00 <CKernelOptions::CKernelOptions()+0x39c>
    9a9c:	e1a00007 	mov	r0, r7
    9aa0:	eb0014b7 	bl	ed84 <strcmp>
    9aa4:	e3500000 	cmp	r0, #0
    9aa8:	1a000038 	bne	9b90 <CKernelOptions::CKernelOptions()+0x22c>
    9aac:	e35b0000 	cmp	fp, #0
    9ab0:	0affffd8 	beq	9a18 <CKernelOptions::CKernelOptions()+0xb4>
    9ab4:	e1db30d0 	ldrsb	r3, [fp]
    9ab8:	e3530000 	cmp	r3, #0
    9abc:	0affffd5 	beq	9a18 <CKernelOptions::CKernelOptions()+0xb4>
    9ac0:	e1a0000b 	mov	r0, fp
    9ac4:	ebffff4f 	bl	9808 <CKernelOptions::GetDecimal(char*) [clone .part.0]>
    9ac8:	e3500004 	cmp	r0, #4
    9acc:	9584082c 	strls	r0, [r4, #2092]	; 0x82c
    9ad0:	eaffffd0 	b	9a18 <CKernelOptions::CKernelOptions()+0xb4>
    9ad4:	e28d0008 	add	r0, sp, #8
    9ad8:	eb001b0a 	bl	10708 <CBcmPropertyTags::~CBcmPropertyTags()>
    9adc:	e1a00004 	mov	r0, r4
    9ae0:	e28dd014 	add	sp, sp, #20
    9ae4:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9ae8:	e3a03000 	mov	r3, #0
    9aec:	e1a01008 	mov	r1, r8
    9af0:	e5c53000 	strb	r3, [r5]
    9af4:	e1a00007 	mov	r0, r7
    9af8:	eb0014a1 	bl	ed84 <strcmp>
    9afc:	e3500000 	cmp	r0, #0
    9b00:	e285b001 	add	fp, r5, #1
    9b04:	1a00000b 	bne	9b38 <CKernelOptions::CKernelOptions()+0x1d4>
    9b08:	e35b0000 	cmp	fp, #0
    9b0c:	0affffc1 	beq	9a18 <CKernelOptions::CKernelOptions()+0xb4>
    9b10:	e1d530d1 	ldrsb	r3, [r5, #1]
    9b14:	e3530000 	cmp	r3, #0
    9b18:	0affffbe 	beq	9a18 <CKernelOptions::CKernelOptions()+0xb4>
    9b1c:	e1a0000b 	mov	r0, fp
    9b20:	ebffff38 	bl	9808 <CKernelOptions::GetDecimal(char*) [clone .part.0]>
    9b24:	e59f31d8 	ldr	r3, [pc, #472]	; 9d04 <CKernelOptions::CKernelOptions()+0x3a0>
    9b28:	e2402d0a 	sub	r2, r0, #640	; 0x280
    9b2c:	e1520003 	cmp	r2, r3
    9b30:	95840810 	strls	r0, [r4, #2064]	; 0x810
    9b34:	eaffffb7 	b	9a18 <CKernelOptions::CKernelOptions()+0xb4>
    9b38:	e1a0100a 	mov	r1, sl
    9b3c:	e1a00007 	mov	r0, r7
    9b40:	eb00148f 	bl	ed84 <strcmp>
    9b44:	e3500000 	cmp	r0, #0
    9b48:	1affffcd 	bne	9a84 <CKernelOptions::CKernelOptions()+0x120>
    9b4c:	e35b0000 	cmp	fp, #0
    9b50:	0affffb0 	beq	9a18 <CKernelOptions::CKernelOptions()+0xb4>
    9b54:	e1d530d1 	ldrsb	r3, [r5, #1]
    9b58:	e3530000 	cmp	r3, #0
    9b5c:	0affffad 	beq	9a18 <CKernelOptions::CKernelOptions()+0xb4>
    9b60:	e1a0000b 	mov	r0, fp
    9b64:	ebffff27 	bl	9808 <CKernelOptions::GetDecimal(char*) [clone .part.0]>
    9b68:	e2403e1e 	sub	r3, r0, #480	; 0x1e0
    9b6c:	e3530f96 	cmp	r3, #600	; 0x258
    9b70:	95840814 	strls	r0, [r4, #2068]	; 0x814
    9b74:	eaffffa7 	b	9a18 <CKernelOptions::CKernelOptions()+0xb4>
    9b78:	e1a0100b 	mov	r1, fp
    9b7c:	e3a02013 	mov	r2, #19
    9b80:	e1a00006 	mov	r0, r6
    9b84:	eb0014e9 	bl	ef30 <strncpy>
    9b88:	e5c4582b 	strb	r5, [r4, #2091]	; 0x82b
    9b8c:	eaffffa1 	b	9a18 <CKernelOptions::CKernelOptions()+0xb4>
    9b90:	e59f1170 	ldr	r1, [pc, #368]	; 9d08 <CKernelOptions::CKernelOptions()+0x3a4>
    9b94:	e1a00007 	mov	r0, r7
    9b98:	eb001479 	bl	ed84 <strcmp>
    9b9c:	e2505000 	subs	r5, r0, #0
    9ba0:	1a000005 	bne	9bbc <CKernelOptions::CKernelOptions()+0x258>
    9ba4:	e1a0100b 	mov	r1, fp
    9ba8:	e3a02002 	mov	r2, #2
    9bac:	e1a00009 	mov	r0, r9
    9bb0:	eb0014de 	bl	ef30 <strncpy>
    9bb4:	e5c45832 	strb	r5, [r4, #2098]	; 0x832
    9bb8:	eaffff96 	b	9a18 <CKernelOptions::CKernelOptions()+0xb4>
    9bbc:	e59f1148 	ldr	r1, [pc, #328]	; 9d0c <CKernelOptions::CKernelOptions()+0x3a8>
    9bc0:	e1a00007 	mov	r0, r7
    9bc4:	eb00146e 	bl	ed84 <strcmp>
    9bc8:	e3500000 	cmp	r0, #0
    9bcc:	1a00000b 	bne	9c00 <CKernelOptions::CKernelOptions()+0x29c>
    9bd0:	e35b0000 	cmp	fp, #0
    9bd4:	0affff8f 	beq	9a18 <CKernelOptions::CKernelOptions()+0xb4>
    9bd8:	e1db30d0 	ldrsb	r3, [fp]
    9bdc:	e3530000 	cmp	r3, #0
    9be0:	0affff8c 	beq	9a18 <CKernelOptions::CKernelOptions()+0xb4>
    9be4:	e1a0000b 	mov	r0, fp
    9be8:	ebffff06 	bl	9808 <CKernelOptions::GetDecimal(char*) [clone .part.0]>
    9bec:	e59f311c 	ldr	r3, [pc, #284]	; 9d10 <CKernelOptions::CKernelOptions()+0x3ac>
    9bf0:	e24020c8 	sub	r2, r0, #200	; 0xc8
    9bf4:	e1520003 	cmp	r2, r3
    9bf8:	95840834 	strls	r0, [r4, #2100]	; 0x834
    9bfc:	eaffff85 	b	9a18 <CKernelOptions::CKernelOptions()+0xb4>
    9c00:	e59f110c 	ldr	r1, [pc, #268]	; 9d14 <CKernelOptions::CKernelOptions()+0x3b0>
    9c04:	e1a00007 	mov	r0, r7
    9c08:	eb00145d 	bl	ed84 <strcmp>
    9c0c:	e2505000 	subs	r5, r0, #0
    9c10:	1a000005 	bne	9c2c <CKernelOptions::CKernelOptions()+0x2c8>
    9c14:	e1a0100b 	mov	r1, fp
    9c18:	e3a02013 	mov	r2, #19
    9c1c:	e2890008 	add	r0, r9, #8
    9c20:	eb0014c2 	bl	ef30 <strncpy>
    9c24:	e5c4584b 	strb	r5, [r4, #2123]	; 0x84b
    9c28:	eaffff7a 	b	9a18 <CKernelOptions::CKernelOptions()+0xb4>
    9c2c:	e59f10e4 	ldr	r1, [pc, #228]	; 9d18 <CKernelOptions::CKernelOptions()+0x3b4>
    9c30:	e1a00007 	mov	r0, r7
    9c34:	eb001452 	bl	ed84 <strcmp>
    9c38:	e3500000 	cmp	r0, #0
    9c3c:	1a000009 	bne	9c68 <CKernelOptions::CKernelOptions()+0x304>
    9c40:	e35b0000 	cmp	fp, #0
    9c44:	0affff73 	beq	9a18 <CKernelOptions::CKernelOptions()+0xb4>
    9c48:	e1db30d0 	ldrsb	r3, [fp]
    9c4c:	e3530000 	cmp	r3, #0
    9c50:	0affff70 	beq	9a18 <CKernelOptions::CKernelOptions()+0xb4>
    9c54:	e1a0000b 	mov	r0, fp
    9c58:	ebfffeea 	bl	9808 <CKernelOptions::GetDecimal(char*) [clone .part.0]>
    9c5c:	e3500002 	cmp	r0, #2
    9c60:	9584084c 	strls	r0, [r4, #2124]	; 0x84c
    9c64:	eaffff6b 	b	9a18 <CKernelOptions::CKernelOptions()+0xb4>
    9c68:	e59f10ac 	ldr	r1, [pc, #172]	; 9d1c <CKernelOptions::CKernelOptions()+0x3b8>
    9c6c:	e1a00007 	mov	r0, r7
    9c70:	eb001443 	bl	ed84 <strcmp>
    9c74:	e3500000 	cmp	r0, #0
    9c78:	1a000006 	bne	9c98 <CKernelOptions::CKernelOptions()+0x334>
    9c7c:	e1a0000b 	mov	r0, fp
    9c80:	e59f1098 	ldr	r1, [pc, #152]	; 9d20 <CKernelOptions::CKernelOptions()+0x3bc>
    9c84:	eb00143e 	bl	ed84 <strcmp>
    9c88:	e3500000 	cmp	r0, #0
    9c8c:	03a03001 	moveq	r3, #1
    9c90:	05c43850 	strbeq	r3, [r4, #2128]	; 0x850
    9c94:	eaffff5f 	b	9a18 <CKernelOptions::CKernelOptions()+0xb4>
    9c98:	e1a00007 	mov	r0, r7
    9c9c:	e59f1080 	ldr	r1, [pc, #128]	; 9d24 <CKernelOptions::CKernelOptions()+0x3c0>
    9ca0:	eb001437 	bl	ed84 <strcmp>
    9ca4:	e16f3f1b 	clz	r3, fp
    9ca8:	e3500000 	cmp	r0, #0
    9cac:	e1a032a3 	lsr	r3, r3, #5
    9cb0:	13a03001 	movne	r3, #1
    9cb4:	e3530000 	cmp	r3, #0
    9cb8:	1affff56 	bne	9a18 <CKernelOptions::CKernelOptions()+0xb4>
    9cbc:	e1db30d0 	ldrsb	r3, [fp]
    9cc0:	e3530000 	cmp	r3, #0
    9cc4:	0affff53 	beq	9a18 <CKernelOptions::CKernelOptions()+0xb4>
    9cc8:	e1a0000b 	mov	r0, fp
    9ccc:	ebfffecd 	bl	9808 <CKernelOptions::GetDecimal(char*) [clone .part.0]>
    9cd0:	e2403028 	sub	r3, r0, #40	; 0x28
    9cd4:	e3530026 	cmp	r3, #38	; 0x26
    9cd8:	95840854 	strls	r0, [r4, #2132]	; 0x854
    9cdc:	eaffff4d 	b	9a18 <CKernelOptions::CKernelOptions()+0xb4>
    9ce0:	00013460 	.word	0x00013460
    9ce4:	00013468 	.word	0x00013468
    9ce8:	000155cc 	.word	0x000155cc
    9cec:	0000080c 	.word	0x0000080c
    9cf0:	00050001 	.word	0x00050001
    9cf4:	000134d4 	.word	0x000134d4
    9cf8:	0001346c 	.word	0x0001346c
    9cfc:	00013474 	.word	0x00013474
    9d00:	0001347c 	.word	0x0001347c
    9d04:	0000053c 	.word	0x0000053c
    9d08:	00013488 	.word	0x00013488
    9d0c:	00013490 	.word	0x00013490
    9d10:	00001e78 	.word	0x00001e78
    9d14:	000134a0 	.word	0x000134a0
    9d18:	000134ac 	.word	0x000134ac
    9d1c:	000134b8 	.word	0x000134b8
    9d20:	000134c0 	.word	0x000134c0
    9d24:	000134c8 	.word	0x000134c8

00009d28 <CKernelOptions::GetOptionValue(char*)>:
    9d28:	e1d030d0 	ldrsb	r3, [r0]
    9d2c:	e3530000 	cmp	r3, #0
    9d30:	1a000003 	bne	9d44 <CKernelOptions::GetOptionValue(char*)+0x1c>
    9d34:	ea000007 	b	9d58 <CKernelOptions::GetOptionValue(char*)+0x30>
    9d38:	e1f030d1 	ldrsb	r3, [r0, #1]!
    9d3c:	e3530000 	cmp	r3, #0
    9d40:	0a000004 	beq	9d58 <CKernelOptions::GetOptionValue(char*)+0x30>
    9d44:	e353003d 	cmp	r3, #61	; 0x3d
    9d48:	1afffffa 	bne	9d38 <CKernelOptions::GetOptionValue(char*)+0x10>
    9d4c:	e3a02000 	mov	r2, #0
    9d50:	e2803001 	add	r3, r0, #1
    9d54:	e5c02000 	strb	r2, [r0]
    9d58:	e1a00003 	mov	r0, r3
    9d5c:	e12fff1e 	bx	lr

00009d60 <CKernelOptions::GetDecimal(char*)>:
    9d60:	e2503000 	subs	r3, r0, #0
    9d64:	0a000003 	beq	9d78 <CKernelOptions::GetDecimal(char*)+0x18>
    9d68:	e1d330d0 	ldrsb	r3, [r3]
    9d6c:	e3530000 	cmp	r3, #0
    9d70:	0a000000 	beq	9d78 <CKernelOptions::GetDecimal(char*)+0x18>
    9d74:	eafffea3 	b	9808 <CKernelOptions::GetDecimal(char*) [clone .part.0]>
    9d78:	e3e00000 	mvn	r0, #0
    9d7c:	e12fff1e 	bx	lr

00009d80 <CLogger::CLogger(unsigned int, CTimer*)>:
    9d80:	e92d4010 	push	{r4, lr}
    9d84:	e3a03000 	mov	r3, #0
    9d88:	e1a04000 	mov	r4, r0
    9d8c:	e3a00001 	mov	r0, #1
    9d90:	e884000e 	stm	r4, {r1, r2, r3}
    9d94:	e584300c 	str	r3, [r4, #12]
    9d98:	e5843010 	str	r3, [r4, #16]
    9d9c:	e5843014 	str	r3, [r4, #20]
    9da0:	e58430e4 	str	r3, [r4, #228]	; 0xe4
    9da4:	e58430e8 	str	r3, [r4, #232]	; 0xe8
    9da8:	e58430f0 	str	r3, [r4, #240]	; 0xf0
    9dac:	e58430f4 	str	r3, [r4, #244]	; 0xf4
    9db0:	e5840018 	str	r0, [r4, #24]
    9db4:	e58400ec 	str	r0, [r4, #236]	; 0xec
    9db8:	e3a00901 	mov	r0, #16384	; 0x4000
    9dbc:	eb001774 	bl	fb94 <operator new[](unsigned int)>
    9dc0:	e59f300c 	ldr	r3, [pc, #12]	; 9dd4 <CLogger::CLogger(unsigned int, CTimer*)+0x54>
    9dc4:	e584000c 	str	r0, [r4, #12]
    9dc8:	e5834000 	str	r4, [r3]
    9dcc:	e1a00004 	mov	r0, r4
    9dd0:	e8bd8010 	pop	{r4, pc}
    9dd4:	000155d0 	.word	0x000155d0

00009dd8 <CLogger::~CLogger()>:
    9dd8:	e3a02000 	mov	r2, #0
    9ddc:	e59f1060 	ldr	r1, [pc, #96]	; 9e44 <CLogger::~CLogger()+0x6c>
    9de0:	e92d4070 	push	{r4, r5, r6, lr}
    9de4:	e59030e8 	ldr	r3, [r0, #232]	; 0xe8
    9de8:	e1a04000 	mov	r4, r0
    9dec:	e1a05002 	mov	r5, r2
    9df0:	e5812000 	str	r2, [r1]
    9df4:	ea000008 	b	9e1c <CLogger::~CLogger()+0x44>
    9df8:	e591001c 	ldr	r0, [r1, #28]
    9dfc:	e3a01f42 	mov	r1, #264	; 0x108
    9e00:	eb001766 	bl	fba0 <operator delete(void*, unsigned int)>
    9e04:	e59430e8 	ldr	r3, [r4, #232]	; 0xe8
    9e08:	e2833001 	add	r3, r3, #1
    9e0c:	e3530032 	cmp	r3, #50	; 0x32
    9e10:	e58430e8 	str	r3, [r4, #232]	; 0xe8
    9e14:	03a03000 	moveq	r3, #0
    9e18:	058450e8 	streq	r5, [r4, #232]	; 0xe8
    9e1c:	e59420e4 	ldr	r2, [r4, #228]	; 0xe4
    9e20:	e0841103 	add	r1, r4, r3, lsl #2
    9e24:	e1520003 	cmp	r2, r3
    9e28:	1afffff2 	bne	9df8 <CLogger::~CLogger()+0x20>
    9e2c:	e594000c 	ldr	r0, [r4, #12]
    9e30:	e3500000 	cmp	r0, #0
    9e34:	0a000000 	beq	9e3c <CLogger::~CLogger()+0x64>
    9e38:	eb001757 	bl	fb9c <operator delete[](void*)>
    9e3c:	e1a00004 	mov	r0, r4
    9e40:	e8bd8070 	pop	{r4, r5, r6, pc}
    9e44:	000155d0 	.word	0x000155d0

00009e48 <CLogger::Initialize(CDevice*)>:
    9e48:	e92d4010 	push	{r4, lr}
    9e4c:	e5801008 	str	r1, [r0, #8]
    9e50:	e24dd008 	sub	sp, sp, #8
    9e54:	e1a04000 	mov	r4, r0
    9e58:	eb0003b5 	bl	ad34 <CMachineInfo::Get()>
    9e5c:	eb0002d3 	bl	a9b0 <CMachineInfo::GetMachineName() const>
    9e60:	e59f301c 	ldr	r3, [pc, #28]	; 9e84 <CLogger::Initialize(CDevice*)+0x3c>
    9e64:	e58d0000 	str	r0, [sp]
    9e68:	e283101c 	add	r1, r3, #28
    9e6c:	e1a00004 	mov	r0, r4
    9e70:	e3a02003 	mov	r2, #3
    9e74:	eb000003 	bl	9e88 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    9e78:	e3a00001 	mov	r0, #1
    9e7c:	e28dd008 	add	sp, sp, #8
    9e80:	e8bd8010 	pop	{r4, pc}
    9e84:	000134dc 	.word	0x000134dc

00009e88 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>:
    9e88:	e52d3004 	push	{r3}		; (str r3, [sp, #-4]!)
    9e8c:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    9e90:	e24dd010 	sub	sp, sp, #16
    9e94:	e28dc018 	add	ip, sp, #24
    9e98:	e58dc000 	str	ip, [sp]
    9e9c:	e59d3014 	ldr	r3, [sp, #20]
    9ea0:	e58dc00c 	str	ip, [sp, #12]
    9ea4:	eb000003 	bl	9eb8 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)>
    9ea8:	e28dd010 	add	sp, sp, #16
    9eac:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
    9eb0:	e28dd004 	add	sp, sp, #4
    9eb4:	e12fff1e 	bx	lr

00009eb8 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)>:
    9eb8:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    9ebc:	e1a07003 	mov	r7, r3
    9ec0:	e24dd024 	sub	sp, sp, #36	; 0x24
    9ec4:	e1a04000 	mov	r4, r0
    9ec8:	e1a0000d 	mov	r0, sp
    9ecc:	e1a05002 	mov	r5, r2
    9ed0:	e1a06001 	mov	r6, r1
    9ed4:	eb000b7a 	bl	ccc4 <CString::CString()>
    9ed8:	e59d2038 	ldr	r2, [sp, #56]	; 0x38
    9edc:	e1a01007 	mov	r1, r7
    9ee0:	e1a0000d 	mov	r0, sp
    9ee4:	eb000d49 	bl	d410 <CString::FormatV(char const*, std::__va_list)>
    9ee8:	e1a0000d 	mov	r0, sp
    9eec:	eb000b8a 	bl	cd1c <CString::operator char const*() const>
    9ef0:	e1a02005 	mov	r2, r5
    9ef4:	e1a03000 	mov	r3, r0
    9ef8:	e1a01006 	mov	r1, r6
    9efc:	e1a00004 	mov	r0, r4
    9f00:	eb0000fe 	bl	a300 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)>
    9f04:	e5943000 	ldr	r3, [r4]
    9f08:	e1550003 	cmp	r5, r3
    9f0c:	8a00001b 	bhi	9f80 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0xc8>
    9f10:	e28d0010 	add	r0, sp, #16
    9f14:	eb000b6a 	bl	ccc4 <CString::CString()>
    9f18:	e3550000 	cmp	r5, #0
    9f1c:	0a00001b 	beq	9f90 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0xd8>
    9f20:	e5940004 	ldr	r0, [r4, #4]
    9f24:	e3500000 	cmp	r0, #0
    9f28:	1a000047 	bne	a04c <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x194>
    9f2c:	e1a01006 	mov	r1, r6
    9f30:	e28d0010 	add	r0, sp, #16
    9f34:	eb000baa 	bl	cde4 <CString::Append(char const*)>
    9f38:	e59f1148 	ldr	r1, [pc, #328]	; a088 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x1d0>
    9f3c:	e28d0010 	add	r0, sp, #16
    9f40:	eb000ba7 	bl	cde4 <CString::Append(char const*)>
    9f44:	e1a0000d 	mov	r0, sp
    9f48:	eb000b73 	bl	cd1c <CString::operator char const*() const>
    9f4c:	e1a01000 	mov	r1, r0
    9f50:	e28d0010 	add	r0, sp, #16
    9f54:	eb000ba2 	bl	cde4 <CString::Append(char const*)>
    9f58:	e59f112c 	ldr	r1, [pc, #300]	; a08c <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x1d4>
    9f5c:	e28d0010 	add	r0, sp, #16
    9f60:	eb000b9f 	bl	cde4 <CString::Append(char const*)>
    9f64:	e28d0010 	add	r0, sp, #16
    9f68:	eb000b6b 	bl	cd1c <CString::operator char const*() const>
    9f6c:	e1a01000 	mov	r1, r0
    9f70:	e1a00004 	mov	r0, r4
    9f74:	eb000082 	bl	a184 <CLogger::Write(char const*)>
    9f78:	e28d0010 	add	r0, sp, #16
    9f7c:	eb000b1d 	bl	cbf8 <CString::~CString()>
    9f80:	e1a0000d 	mov	r0, sp
    9f84:	eb000b1b 	bl	cbf8 <CString::~CString()>
    9f88:	e28dd024 	add	sp, sp, #36	; 0x24
    9f8c:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
    9f90:	e59f10f8 	ldr	r1, [pc, #248]	; a090 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x1d8>
    9f94:	e28d0010 	add	r0, sp, #16
    9f98:	eb000b65 	bl	cd34 <CString::operator=(char const*)>
    9f9c:	e5940004 	ldr	r0, [r4, #4]
    9fa0:	e3500000 	cmp	r0, #0
    9fa4:	0a00000d 	beq	9fe0 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x128>
    9fa8:	eb0010bb 	bl	e29c <CTimer::GetTimeString()>
    9fac:	e2505000 	subs	r5, r0, #0
    9fb0:	0a00000a 	beq	9fe0 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x128>
    9fb4:	eb000b58 	bl	cd1c <CString::operator char const*() const>
    9fb8:	e1a01000 	mov	r1, r0
    9fbc:	e28d0010 	add	r0, sp, #16
    9fc0:	eb000b87 	bl	cde4 <CString::Append(char const*)>
    9fc4:	e28d0010 	add	r0, sp, #16
    9fc8:	e59f10c4 	ldr	r1, [pc, #196]	; a094 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x1dc>
    9fcc:	eb000b84 	bl	cde4 <CString::Append(char const*)>
    9fd0:	e5953000 	ldr	r3, [r5]
    9fd4:	e1a00005 	mov	r0, r5
    9fd8:	e5933004 	ldr	r3, [r3, #4]
    9fdc:	e12fff33 	blx	r3
    9fe0:	e1a01006 	mov	r1, r6
    9fe4:	e28d0010 	add	r0, sp, #16
    9fe8:	eb000b7d 	bl	cde4 <CString::Append(char const*)>
    9fec:	e59f1094 	ldr	r1, [pc, #148]	; a088 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x1d0>
    9ff0:	e28d0010 	add	r0, sp, #16
    9ff4:	eb000b7a 	bl	cde4 <CString::Append(char const*)>
    9ff8:	e1a0000d 	mov	r0, sp
    9ffc:	eb000b46 	bl	cd1c <CString::operator char const*() const>
    a000:	e1a01000 	mov	r1, r0
    a004:	e28d0010 	add	r0, sp, #16
    a008:	eb000b75 	bl	cde4 <CString::Append(char const*)>
    a00c:	e59f1084 	ldr	r1, [pc, #132]	; a098 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x1e0>
    a010:	e28d0010 	add	r0, sp, #16
    a014:	eb000b72 	bl	cde4 <CString::Append(char const*)>
    a018:	e59f106c 	ldr	r1, [pc, #108]	; a08c <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x1d4>
    a01c:	e28d0010 	add	r0, sp, #16
    a020:	eb000b6f 	bl	cde4 <CString::Append(char const*)>
    a024:	e28d0010 	add	r0, sp, #16
    a028:	eb000b3b 	bl	cd1c <CString::operator char const*() const>
    a02c:	e1a01000 	mov	r1, r0
    a030:	e1a00004 	mov	r0, r4
    a034:	eb000052 	bl	a184 <CLogger::Write(char const*)>
    a038:	e59430f4 	ldr	r3, [r4, #244]	; 0xf4
    a03c:	e3530000 	cmp	r3, #0
    a040:	0a000000 	beq	a048 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x190>
    a044:	e12fff33 	blx	r3
    a048:	eb000f3e 	bl	dd48 <halt>
    a04c:	eb001092 	bl	e29c <CTimer::GetTimeString()>
    a050:	e2505000 	subs	r5, r0, #0
    a054:	0affffb4 	beq	9f2c <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x74>
    a058:	eb000b2f 	bl	cd1c <CString::operator char const*() const>
    a05c:	e1a01000 	mov	r1, r0
    a060:	e28d0010 	add	r0, sp, #16
    a064:	eb000b5e 	bl	cde4 <CString::Append(char const*)>
    a068:	e28d0010 	add	r0, sp, #16
    a06c:	e59f1020 	ldr	r1, [pc, #32]	; a094 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x1dc>
    a070:	eb000b5b 	bl	cde4 <CString::Append(char const*)>
    a074:	e5953000 	ldr	r3, [r5]
    a078:	e1a00005 	mov	r0, r5
    a07c:	e5933004 	ldr	r3, [r3, #4]
    a080:	e12fff33 	blx	r3
    a084:	eaffffa8 	b	9f2c <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x74>
    a088:	00013514 	.word	0x00013514
    a08c:	00013510 	.word	0x00013510
    a090:	00013500 	.word	0x00013500
    a094:	00013518 	.word	0x00013518
    a098:	00013508 	.word	0x00013508

0000a09c <CLogger::WriteNoAlloc(char const*, TLogSeverity, char const*)>:
    a09c:	e590c000 	ldr	ip, [r0]
    a0a0:	e152000c 	cmp	r2, ip
    a0a4:	812fff1e 	bxhi	lr
    a0a8:	e92d4070 	push	{r4, r5, r6, lr}
    a0ac:	e1a05003 	mov	r5, r3
    a0b0:	e3a03000 	mov	r3, #0
    a0b4:	e24dd0c8 	sub	sp, sp, #200	; 0xc8
    a0b8:	e1520003 	cmp	r2, r3
    a0bc:	e1a04000 	mov	r4, r0
    a0c0:	e5cd3000 	strb	r3, [sp]
    a0c4:	0a00000f 	beq	a108 <CLogger::WriteNoAlloc(char const*, TLogSeverity, char const*)+0x6c>
    a0c8:	e1a0000d 	mov	r0, sp
    a0cc:	eb0013a9 	bl	ef78 <strcat>
    a0d0:	e1a0000d 	mov	r0, sp
    a0d4:	e59f1088 	ldr	r1, [pc, #136]	; a164 <CLogger::WriteNoAlloc(char const*, TLogSeverity, char const*)+0xc8>
    a0d8:	eb0013a6 	bl	ef78 <strcat>
    a0dc:	e1a01005 	mov	r1, r5
    a0e0:	e1a0000d 	mov	r0, sp
    a0e4:	eb0013a3 	bl	ef78 <strcat>
    a0e8:	e1a0000d 	mov	r0, sp
    a0ec:	e59f1074 	ldr	r1, [pc, #116]	; a168 <CLogger::WriteNoAlloc(char const*, TLogSeverity, char const*)+0xcc>
    a0f0:	eb0013a0 	bl	ef78 <strcat>
    a0f4:	e1a0100d 	mov	r1, sp
    a0f8:	e1a00004 	mov	r0, r4
    a0fc:	eb000020 	bl	a184 <CLogger::Write(char const*)>
    a100:	e28dd0c8 	add	sp, sp, #200	; 0xc8
    a104:	e8bd8070 	pop	{r4, r5, r6, pc}
    a108:	e1a06001 	mov	r6, r1
    a10c:	e1a0000d 	mov	r0, sp
    a110:	e59f1054 	ldr	r1, [pc, #84]	; a16c <CLogger::WriteNoAlloc(char const*, TLogSeverity, char const*)+0xd0>
    a114:	eb00137a 	bl	ef04 <strcpy>
    a118:	e1a01006 	mov	r1, r6
    a11c:	e1a0000d 	mov	r0, sp
    a120:	eb001394 	bl	ef78 <strcat>
    a124:	e59f1038 	ldr	r1, [pc, #56]	; a164 <CLogger::WriteNoAlloc(char const*, TLogSeverity, char const*)+0xc8>
    a128:	e1a0000d 	mov	r0, sp
    a12c:	eb001391 	bl	ef78 <strcat>
    a130:	e1a01005 	mov	r1, r5
    a134:	e1a0000d 	mov	r0, sp
    a138:	eb00138e 	bl	ef78 <strcat>
    a13c:	e59f102c 	ldr	r1, [pc, #44]	; a170 <CLogger::WriteNoAlloc(char const*, TLogSeverity, char const*)+0xd4>
    a140:	e1a0000d 	mov	r0, sp
    a144:	eb00138b 	bl	ef78 <strcat>
    a148:	e59f1018 	ldr	r1, [pc, #24]	; a168 <CLogger::WriteNoAlloc(char const*, TLogSeverity, char const*)+0xcc>
    a14c:	e1a0000d 	mov	r0, sp
    a150:	eb001388 	bl	ef78 <strcat>
    a154:	e1a0100d 	mov	r1, sp
    a158:	e1a00004 	mov	r0, r4
    a15c:	eb000008 	bl	a184 <CLogger::Write(char const*)>
    a160:	eb000ef8 	bl	dd48 <halt>
    a164:	00013514 	.word	0x00013514
    a168:	00013510 	.word	0x00013510
    a16c:	00013500 	.word	0x00013500
    a170:	00013508 	.word	0x00013508

0000a174 <CLogger::Get()>:
    a174:	e59f3004 	ldr	r3, [pc, #4]	; a180 <CLogger::Get()+0xc>
    a178:	e5930000 	ldr	r0, [r3]
    a17c:	e12fff1e 	bx	lr
    a180:	000155d0 	.word	0x000155d0

0000a184 <CLogger::Write(char const*)>:
    a184:	e92d4070 	push	{r4, r5, r6, lr}
    a188:	e1a04000 	mov	r4, r0
    a18c:	e1a00001 	mov	r0, r1
    a190:	e1a05001 	mov	r5, r1
    a194:	eb0012f0 	bl	ed5c <strlen>
    a198:	e1a06000 	mov	r6, r0
    a19c:	e5940008 	ldr	r0, [r4, #8]
    a1a0:	e1a02006 	mov	r2, r6
    a1a4:	e5903000 	ldr	r3, [r0]
    a1a8:	e1a01005 	mov	r1, r5
    a1ac:	e593300c 	ldr	r3, [r3, #12]
    a1b0:	e12fff33 	blx	r3
    a1b4:	e5940018 	ldr	r0, [r4, #24]
    a1b8:	e3500000 	cmp	r0, #0
    a1bc:	1a000018 	bne	a224 <CLogger::Write(char const*)+0xa0>
    a1c0:	e59fe064 	ldr	lr, [pc, #100]	; a22c <CLogger::Write(char const*)+0xa8>
    a1c4:	e0850006 	add	r0, r5, r6
    a1c8:	e1500005 	cmp	r0, r5
    a1cc:	0a00000f 	beq	a210 <CLogger::Write(char const*)+0x8c>
    a1d0:	e0d510d1 	ldrsb	r1, [r5], #1
    a1d4:	e351000d 	cmp	r1, #13
    a1d8:	0afffffa 	beq	a1c8 <CLogger::Write(char const*)+0x44>
    a1dc:	e5942010 	ldr	r2, [r4, #16]
    a1e0:	e594c00c 	ldr	ip, [r4, #12]
    a1e4:	e7cc1002 	strb	r1, [ip, r2]
    a1e8:	e5943010 	ldr	r3, [r4, #16]
    a1ec:	e5942014 	ldr	r2, [r4, #20]
    a1f0:	e2833001 	add	r3, r3, #1
    a1f4:	e003300e 	and	r3, r3, lr
    a1f8:	e1530002 	cmp	r3, r2
    a1fc:	e5843010 	str	r3, [r4, #16]
    a200:	1afffff0 	bne	a1c8 <CLogger::Write(char const*)+0x44>
    a204:	e2433001 	sub	r3, r3, #1
    a208:	e003300e 	and	r3, r3, lr
    a20c:	e5843010 	str	r3, [r4, #16]
    a210:	e5943018 	ldr	r3, [r4, #24]
    a214:	e3530000 	cmp	r3, #0
    a218:	08bd8070 	popeq	{r4, r5, r6, pc}
    a21c:	e8bd4070 	pop	{r4, r5, r6, lr}
    a220:	ea00162d 	b	fadc <LeaveCritical>
    a224:	eb0015ff 	bl	fa28 <EnterCritical>
    a228:	eaffffe4 	b	a1c0 <CLogger::Write(char const*)+0x3c>
    a22c:	00003fff 	.word	0x00003fff

0000a230 <CLogger::Read(void*, unsigned int)>:
    a230:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    a234:	e1a04000 	mov	r4, r0
    a238:	e5900018 	ldr	r0, [r0, #24]
    a23c:	e1a05001 	mov	r5, r1
    a240:	e3500000 	cmp	r0, #0
    a244:	e1a06002 	mov	r6, r2
    a248:	1a00001b 	bne	a2bc <CLogger::Read(void*, unsigned int)+0x8c>
    a24c:	e1c421d0 	ldrd	r2, [r4, #16]
    a250:	e1520003 	cmp	r2, r3
    a254:	0a000020 	beq	a2dc <CLogger::Read(void*, unsigned int)+0xac>
    a258:	e1a07006 	mov	r7, r6
    a25c:	e3a0c000 	mov	ip, #0
    a260:	e59f2094 	ldr	r2, [pc, #148]	; a2fc <CLogger::Read(void*, unsigned int)+0xcc>
    a264:	ea00000a 	b	a294 <CLogger::Read(void*, unsigned int)+0x64>
    a268:	e594100c 	ldr	r1, [r4, #12]
    a26c:	e28cc001 	add	ip, ip, #1
    a270:	e19130d3 	ldrsb	r3, [r1, r3]
    a274:	e4c53001 	strb	r3, [r5], #1
    a278:	e5943014 	ldr	r3, [r4, #20]
    a27c:	e5941010 	ldr	r1, [r4, #16]
    a280:	e2833001 	add	r3, r3, #1
    a284:	e0033002 	and	r3, r3, r2
    a288:	e1530001 	cmp	r3, r1
    a28c:	e5843014 	str	r3, [r4, #20]
    a290:	0a000014 	beq	a2e8 <CLogger::Read(void*, unsigned int)+0xb8>
    a294:	e15c0006 	cmp	ip, r6
    a298:	1afffff2 	bne	a268 <CLogger::Read(void*, unsigned int)+0x38>
    a29c:	e5943018 	ldr	r3, [r4, #24]
    a2a0:	e3530000 	cmp	r3, #0
    a2a4:	1a000001 	bne	a2b0 <CLogger::Read(void*, unsigned int)+0x80>
    a2a8:	e1a00007 	mov	r0, r7
    a2ac:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    a2b0:	eb001609 	bl	fadc <LeaveCritical>
    a2b4:	e1a00007 	mov	r0, r7
    a2b8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    a2bc:	eb0015d9 	bl	fa28 <EnterCritical>
    a2c0:	e1c421d0 	ldrd	r2, [r4, #16]
    a2c4:	e1520003 	cmp	r2, r3
    a2c8:	1affffe2 	bne	a258 <CLogger::Read(void*, unsigned int)+0x28>
    a2cc:	e5943018 	ldr	r3, [r4, #24]
    a2d0:	e3530000 	cmp	r3, #0
    a2d4:	0a000000 	beq	a2dc <CLogger::Read(void*, unsigned int)+0xac>
    a2d8:	eb0015ff 	bl	fadc <LeaveCritical>
    a2dc:	e3e07000 	mvn	r7, #0
    a2e0:	e1a00007 	mov	r0, r7
    a2e4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    a2e8:	e5943018 	ldr	r3, [r4, #24]
    a2ec:	e1a0700c 	mov	r7, ip
    a2f0:	e3530000 	cmp	r3, #0
    a2f4:	0affffeb 	beq	a2a8 <CLogger::Read(void*, unsigned int)+0x78>
    a2f8:	eaffffec 	b	a2b0 <CLogger::Read(void*, unsigned int)+0x80>
    a2fc:	00003fff 	.word	0x00003fff

0000a300 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)>:
    a300:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
    a304:	e1a04000 	mov	r4, r0
    a308:	e24dd00c 	sub	sp, sp, #12
    a30c:	e3a00f42 	mov	r0, #264	; 0x108
    a310:	e1a07003 	mov	r7, r3
    a314:	e1a09002 	mov	r9, r2
    a318:	e1a08001 	mov	r8, r1
    a31c:	eb00161b 	bl	fb90 <operator new(unsigned int)>
    a320:	e3a06000 	mov	r6, #0
    a324:	e1a05000 	mov	r5, r0
    a328:	e1a01008 	mov	r1, r8
    a32c:	e3a02032 	mov	r2, #50	; 0x32
    a330:	e4c09001 	strb	r9, [r0], #1
    a334:	eb0012fd 	bl	ef30 <strncpy>
    a338:	e1a01007 	mov	r1, r7
    a33c:	e2850033 	add	r0, r5, #51	; 0x33
    a340:	e3a020c8 	mov	r2, #200	; 0xc8
    a344:	e5c56032 	strb	r6, [r5, #50]	; 0x32
    a348:	eb0012f8 	bl	ef30 <strncpy>
    a34c:	e5940004 	ldr	r0, [r4, #4]
    a350:	e5c560fa 	strb	r6, [r5, #250]	; 0xfa
    a354:	e1500006 	cmp	r0, r6
    a358:	0a000004 	beq	a370 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0x70>
    a35c:	e28d2004 	add	r2, sp, #4
    a360:	e1a0100d 	mov	r1, sp
    a364:	eb000f56 	bl	e0c4 <CTimer::GetLocalTime(unsigned int*, unsigned int*)>
    a368:	e1500006 	cmp	r0, r6
    a36c:	1a00002e 	bne	a42c <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0x12c>
    a370:	e3a03000 	mov	r3, #0
    a374:	e58530fc 	str	r3, [r5, #252]	; 0xfc
    a378:	e5853100 	str	r3, [r5, #256]	; 0x100
    a37c:	e5853104 	str	r3, [r5, #260]	; 0x104
    a380:	e59400ec 	ldr	r0, [r4, #236]	; 0xec
    a384:	e3500000 	cmp	r0, #0
    a388:	1a000024 	bne	a420 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0x120>
    a38c:	e59420e4 	ldr	r2, [r4, #228]	; 0xe4
    a390:	e2823001 	add	r3, r2, #1
    a394:	e3530032 	cmp	r3, #50	; 0x32
    a398:	e0842102 	add	r2, r4, r2, lsl #2
    a39c:	e582501c 	str	r5, [r2, #28]
    a3a0:	03a02000 	moveq	r2, #0
    a3a4:	01a03002 	moveq	r3, r2
    a3a8:	058420e4 	streq	r2, [r4, #228]	; 0xe4
    a3ac:	e59420e8 	ldr	r2, [r4, #232]	; 0xe8
    a3b0:	158430e4 	strne	r3, [r4, #228]	; 0xe4
    a3b4:	e1520003 	cmp	r2, r3
    a3b8:	0a000009 	beq	a3e4 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0xe4>
    a3bc:	e3500000 	cmp	r0, #0
    a3c0:	1a000005 	bne	a3dc <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0xdc>
    a3c4:	e59430f0 	ldr	r3, [r4, #240]	; 0xf0
    a3c8:	e3530000 	cmp	r3, #0
    a3cc:	0a000000 	beq	a3d4 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0xd4>
    a3d0:	e12fff33 	blx	r3
    a3d4:	e28dd00c 	add	sp, sp, #12
    a3d8:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
    a3dc:	eb0015be 	bl	fadc <LeaveCritical>
    a3e0:	eafffff7 	b	a3c4 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0xc4>
    a3e4:	e2832001 	add	r2, r3, #1
    a3e8:	e3520032 	cmp	r2, #50	; 0x32
    a3ec:	e0843103 	add	r3, r4, r3, lsl #2
    a3f0:	e593501c 	ldr	r5, [r3, #28]
    a3f4:	03a03000 	moveq	r3, #0
    a3f8:	158420e8 	strne	r2, [r4, #232]	; 0xe8
    a3fc:	058430e8 	streq	r3, [r4, #232]	; 0xe8
    a400:	e3500000 	cmp	r0, #0
    a404:	1a000013 	bne	a458 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0x158>
    a408:	e3550000 	cmp	r5, #0
    a40c:	0affffec 	beq	a3c4 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0xc4>
    a410:	e1a00005 	mov	r0, r5
    a414:	e3a01f42 	mov	r1, #264	; 0x108
    a418:	eb0015e0 	bl	fba0 <operator delete(void*, unsigned int)>
    a41c:	eaffffe8 	b	a3c4 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0xc4>
    a420:	eb001580 	bl	fa28 <EnterCritical>
    a424:	e59400ec 	ldr	r0, [r4, #236]	; 0xec
    a428:	eaffffd7 	b	a38c <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0x8c>
    a42c:	e59d2004 	ldr	r2, [sp, #4]
    a430:	e59f3028 	ldr	r3, [pc, #40]	; a460 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0x160>
    a434:	e59d1000 	ldr	r1, [sp]
    a438:	e0832392 	umull	r2, r3, r2, r3
    a43c:	e1a036a3 	lsr	r3, r3, #13
    a440:	e5940004 	ldr	r0, [r4, #4]
    a444:	e5853100 	str	r3, [r5, #256]	; 0x100
    a448:	e58510fc 	str	r1, [r5, #252]	; 0xfc
    a44c:	eb000eee 	bl	e00c <CTimer::GetTimeZone() const>
    a450:	e5850104 	str	r0, [r5, #260]	; 0x104
    a454:	eaffffc9 	b	a380 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0x80>
    a458:	eb00159f 	bl	fadc <LeaveCritical>
    a45c:	eaffffe9 	b	a408 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0x108>
    a460:	d1b71759 	.word	0xd1b71759

0000a464 <CLogger::ReadEvent(TLogSeverity*, char*, char*, long*, unsigned int*, int*)>:
    a464:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    a468:	e1a04000 	mov	r4, r0
    a46c:	e59000ec 	ldr	r0, [r0, #236]	; 0xec
    a470:	e1a07001 	mov	r7, r1
    a474:	e3500000 	cmp	r0, #0
    a478:	e1a08002 	mov	r8, r2
    a47c:	e1a06003 	mov	r6, r3
    a480:	1a000021 	bne	a50c <CLogger::ReadEvent(TLogSeverity*, char*, char*, long*, unsigned int*, int*)+0xa8>
    a484:	e1c42ed4 	ldrd	r2, [r4, #228]	; 0xe4
    a488:	e1530002 	cmp	r3, r2
    a48c:	0a000027 	beq	a530 <CLogger::ReadEvent(TLogSeverity*, char*, char*, long*, unsigned int*, int*)+0xcc>
    a490:	e283c001 	add	ip, r3, #1
    a494:	e35c0032 	cmp	ip, #50	; 0x32
    a498:	e0843103 	add	r3, r4, r3, lsl #2
    a49c:	e593501c 	ldr	r5, [r3, #28]
    a4a0:	03a03000 	moveq	r3, #0
    a4a4:	1584c0e8 	strne	ip, [r4, #232]	; 0xe8
    a4a8:	058430e8 	streq	r3, [r4, #232]	; 0xe8
    a4ac:	e3500000 	cmp	r0, #0
    a4b0:	1a000020 	bne	a538 <CLogger::ReadEvent(TLogSeverity*, char*, char*, long*, unsigned int*, int*)+0xd4>
    a4b4:	e1a01005 	mov	r1, r5
    a4b8:	e4d12001 	ldrb	r2, [r1], #1
    a4bc:	e1a00008 	mov	r0, r8
    a4c0:	e5c72000 	strb	r2, [r7]
    a4c4:	eb00128e 	bl	ef04 <strcpy>
    a4c8:	e2851033 	add	r1, r5, #51	; 0x33
    a4cc:	e1a00006 	mov	r0, r6
    a4d0:	eb00128b 	bl	ef04 <strcpy>
    a4d4:	e59530fc 	ldr	r3, [r5, #252]	; 0xfc
    a4d8:	e59d2018 	ldr	r2, [sp, #24]
    a4dc:	e1a00005 	mov	r0, r5
    a4e0:	e5823000 	str	r3, [r2]
    a4e4:	e5953100 	ldr	r3, [r5, #256]	; 0x100
    a4e8:	e59d201c 	ldr	r2, [sp, #28]
    a4ec:	e3a01f42 	mov	r1, #264	; 0x108
    a4f0:	e5823000 	str	r3, [r2]
    a4f4:	e5953104 	ldr	r3, [r5, #260]	; 0x104
    a4f8:	e59d2020 	ldr	r2, [sp, #32]
    a4fc:	e5823000 	str	r3, [r2]
    a500:	eb0015a6 	bl	fba0 <operator delete(void*, unsigned int)>
    a504:	e3a00001 	mov	r0, #1
    a508:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    a50c:	eb001545 	bl	fa28 <EnterCritical>
    a510:	e1c42ed4 	ldrd	r2, [r4, #228]	; 0xe4
    a514:	e1520003 	cmp	r2, r3
    a518:	159400ec 	ldrne	r0, [r4, #236]	; 0xec
    a51c:	1affffdb 	bne	a490 <CLogger::ReadEvent(TLogSeverity*, char*, char*, long*, unsigned int*, int*)+0x2c>
    a520:	e59430ec 	ldr	r3, [r4, #236]	; 0xec
    a524:	e3530000 	cmp	r3, #0
    a528:	0a000000 	beq	a530 <CLogger::ReadEvent(TLogSeverity*, char*, char*, long*, unsigned int*, int*)+0xcc>
    a52c:	eb00156a 	bl	fadc <LeaveCritical>
    a530:	e3a00000 	mov	r0, #0
    a534:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    a538:	eb001567 	bl	fadc <LeaveCritical>
    a53c:	eaffffdc 	b	a4b4 <CLogger::ReadEvent(TLogSeverity*, char*, char*, long*, unsigned int*, int*)+0x50>

0000a540 <CLogger::RegisterEventNotificationHandler(void (*)())>:
    a540:	e58010f0 	str	r1, [r0, #240]	; 0xf0
    a544:	e12fff1e 	bx	lr

0000a548 <CLogger::RegisterPanicHandler(void (*)())>:
    a548:	e58010f4 	str	r1, [r0, #244]	; 0xf4
    a54c:	e12fff1e 	bx	lr

0000a550 <CMachineInfo::CMachineInfo()>:
    a550:	e92d4810 	push	{r4, fp, lr}
    a554:	e28db008 	add	fp, sp, #8
    a558:	e24dd04c 	sub	sp, sp, #76	; 0x4c
    a55c:	e50b0048 	str	r0, [fp, #-72]	; 0xffffffb8
    a560:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
    a564:	e3a02000 	mov	r2, #0
    a568:	e5832000 	str	r2, [r3]
    a56c:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
    a570:	e3a0200f 	mov	r2, #15
    a574:	e5c32004 	strb	r2, [r3, #4]
    a578:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
    a57c:	e3a02000 	mov	r2, #0
    a580:	e5832008 	str	r2, [r3, #8]
    a584:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
    a588:	e3a02000 	mov	r2, #0
    a58c:	e583200c 	str	r2, [r3, #12]
    a590:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
    a594:	e3a02003 	mov	r2, #3
    a598:	e5c32010 	strb	r2, [r3, #16]
    a59c:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
    a5a0:	e3a02000 	mov	r2, #0
    a5a4:	e5832014 	str	r2, [r3, #20]
    a5a8:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
    a5ac:	e59f23b8 	ldr	r2, [pc, #952]	; a96c <CMachineInfo::CMachineInfo()+0x41c>
    a5b0:	e1c321b8 	strh	r2, [r3, #24]
    a5b4:	e59f33b4 	ldr	r3, [pc, #948]	; a970 <CMachineInfo::CMachineInfo()+0x420>
    a5b8:	e5933000 	ldr	r3, [r3]
    a5bc:	e3530000 	cmp	r3, #0
    a5c0:	0a00001e 	beq	a640 <CMachineInfo::CMachineInfo()+0xf0>
    a5c4:	e59f33a4 	ldr	r3, [pc, #932]	; a970 <CMachineInfo::CMachineInfo()+0x420>
    a5c8:	e5933000 	ldr	r3, [r3]
    a5cc:	e5932000 	ldr	r2, [r3]
    a5d0:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
    a5d4:	e5832000 	str	r2, [r3]
    a5d8:	e59f3390 	ldr	r3, [pc, #912]	; a970 <CMachineInfo::CMachineInfo()+0x420>
    a5dc:	e5933000 	ldr	r3, [r3]
    a5e0:	e5d32004 	ldrb	r2, [r3, #4]
    a5e4:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
    a5e8:	e5c32004 	strb	r2, [r3, #4]
    a5ec:	e59f337c 	ldr	r3, [pc, #892]	; a970 <CMachineInfo::CMachineInfo()+0x420>
    a5f0:	e5933000 	ldr	r3, [r3]
    a5f4:	e5932008 	ldr	r2, [r3, #8]
    a5f8:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
    a5fc:	e5832008 	str	r2, [r3, #8]
    a600:	e59f3368 	ldr	r3, [pc, #872]	; a970 <CMachineInfo::CMachineInfo()+0x420>
    a604:	e5933000 	ldr	r3, [r3]
    a608:	e593200c 	ldr	r2, [r3, #12]
    a60c:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
    a610:	e583200c 	str	r2, [r3, #12]
    a614:	e59f3354 	ldr	r3, [pc, #852]	; a970 <CMachineInfo::CMachineInfo()+0x420>
    a618:	e5933000 	ldr	r3, [r3]
    a61c:	e5d32010 	ldrb	r2, [r3, #16]
    a620:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
    a624:	e5c32010 	strb	r2, [r3, #16]
    a628:	e59f3340 	ldr	r3, [pc, #832]	; a970 <CMachineInfo::CMachineInfo()+0x420>
    a62c:	e5933000 	ldr	r3, [r3]
    a630:	e5932014 	ldr	r2, [r3, #20]
    a634:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
    a638:	e5832014 	str	r2, [r3, #20]
    a63c:	ea0000c6 	b	a95c <CMachineInfo::CMachineInfo()+0x40c>
    a640:	e59f2328 	ldr	r2, [pc, #808]	; a970 <CMachineInfo::CMachineInfo()+0x420>
    a644:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
    a648:	e5823000 	str	r3, [r2]
    a64c:	e24b3020 	sub	r3, fp, #32
    a650:	e3a01001 	mov	r1, #1
    a654:	e1a00003 	mov	r0, r3
    a658:	eb001823 	bl	106ec <CBcmPropertyTags::CBcmPropertyTags(bool)>
    a65c:	e24b2030 	sub	r2, fp, #48	; 0x30
    a660:	e24b0020 	sub	r0, fp, #32
    a664:	e3a03000 	mov	r3, #0
    a668:	e58d3000 	str	r3, [sp]
    a66c:	e3a03010 	mov	r3, #16
    a670:	e59f12fc 	ldr	r1, [pc, #764]	; a974 <CMachineInfo::CMachineInfo()+0x424>
    a674:	eb001874 	bl	1084c <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
    a678:	e1a03000 	mov	r3, r0
    a67c:	e3530000 	cmp	r3, #0
    a680:	0a000003 	beq	a694 <CMachineInfo::CMachineInfo()+0x144>
    a684:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
    a688:	e6ff2073 	uxth	r2, r3
    a68c:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
    a690:	e1c321b8 	strh	r2, [r3, #24]
    a694:	e24b2040 	sub	r2, fp, #64	; 0x40
    a698:	e24b0020 	sub	r0, fp, #32
    a69c:	e3a03000 	mov	r3, #0
    a6a0:	e58d3000 	str	r3, [sp]
    a6a4:	e3a03010 	mov	r3, #16
    a6a8:	e59f12c8 	ldr	r1, [pc, #712]	; a978 <CMachineInfo::CMachineInfo()+0x428>
    a6ac:	eb001866 	bl	1084c <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
    a6b0:	e1a03000 	mov	r3, r0
    a6b4:	e2233001 	eor	r3, r3, #1
    a6b8:	e6ef3073 	uxtb	r3, r3
    a6bc:	e3530000 	cmp	r3, #0
    a6c0:	0a000001 	beq	a6cc <CMachineInfo::CMachineInfo()+0x17c>
    a6c4:	e3a04000 	mov	r4, #0
    a6c8:	ea00009e 	b	a948 <CMachineInfo::CMachineInfo()+0x3f8>
    a6cc:	e51b2034 	ldr	r2, [fp, #-52]	; 0xffffffcc
    a6d0:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
    a6d4:	e5832000 	str	r2, [r3]
    a6d8:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
    a6dc:	e5933000 	ldr	r3, [r3]
    a6e0:	e2033502 	and	r3, r3, #8388608	; 0x800000
    a6e4:	e3530000 	cmp	r3, #0
    a6e8:	0a000064 	beq	a880 <CMachineInfo::CMachineInfo()+0x330>
    a6ec:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
    a6f0:	e5933000 	ldr	r3, [r3]
    a6f4:	e1a03223 	lsr	r3, r3, #4
    a6f8:	e6ef3073 	uxtb	r3, r3
    a6fc:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
    a700:	e3a03000 	mov	r3, #0
    a704:	e50b3010 	str	r3, [fp, #-16]
    a708:	e51b3010 	ldr	r3, [fp, #-16]
    a70c:	e353000c 	cmp	r3, #12
    a710:	8a00000f 	bhi	a754 <CMachineInfo::CMachineInfo()+0x204>
    a714:	e59f1260 	ldr	r1, [pc, #608]	; a97c <CMachineInfo::CMachineInfo()+0x42c>
    a718:	e51b2010 	ldr	r2, [fp, #-16]
    a71c:	e1a03002 	mov	r3, r2
    a720:	e1a03083 	lsl	r3, r3, #1
    a724:	e0833002 	add	r3, r3, r2
    a728:	e1a03103 	lsl	r3, r3, #2
    a72c:	e0813003 	add	r3, r1, r3
    a730:	e5933000 	ldr	r3, [r3]
    a734:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
    a738:	e1520003 	cmp	r2, r3
    a73c:	0a000003 	beq	a750 <CMachineInfo::CMachineInfo()+0x200>
    a740:	e51b3010 	ldr	r3, [fp, #-16]
    a744:	e2833001 	add	r3, r3, #1
    a748:	e50b3010 	str	r3, [fp, #-16]
    a74c:	eaffffed 	b	a708 <CMachineInfo::CMachineInfo()+0x1b8>
    a750:	e320f000 	nop	{0}
    a754:	e51b3010 	ldr	r3, [fp, #-16]
    a758:	e353000c 	cmp	r3, #12
    a75c:	9a000001 	bls	a768 <CMachineInfo::CMachineInfo()+0x218>
    a760:	e3a04000 	mov	r4, #0
    a764:	ea000077 	b	a948 <CMachineInfo::CMachineInfo()+0x3f8>
    a768:	e59f120c 	ldr	r1, [pc, #524]	; a97c <CMachineInfo::CMachineInfo()+0x42c>
    a76c:	e51b2010 	ldr	r2, [fp, #-16]
    a770:	e1a03002 	mov	r3, r2
    a774:	e1a03083 	lsl	r3, r3, #1
    a778:	e0833002 	add	r3, r3, r2
    a77c:	e1a03103 	lsl	r3, r3, #2
    a780:	e0813003 	add	r3, r1, r3
    a784:	e2833004 	add	r3, r3, #4
    a788:	e5d32000 	ldrb	r2, [r3]
    a78c:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
    a790:	e5c32004 	strb	r2, [r3, #4]
    a794:	e59f11e0 	ldr	r1, [pc, #480]	; a97c <CMachineInfo::CMachineInfo()+0x42c>
    a798:	e51b2010 	ldr	r2, [fp, #-16]
    a79c:	e1a03002 	mov	r3, r2
    a7a0:	e1a03083 	lsl	r3, r3, #1
    a7a4:	e0833002 	add	r3, r3, r2
    a7a8:	e1a03103 	lsl	r3, r3, #2
    a7ac:	e0813003 	add	r3, r1, r3
    a7b0:	e2833008 	add	r3, r3, #8
    a7b4:	e5932000 	ldr	r2, [r3]
    a7b8:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
    a7bc:	e5832008 	str	r2, [r3, #8]
    a7c0:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
    a7c4:	e5933000 	ldr	r3, [r3]
    a7c8:	e203300f 	and	r3, r3, #15
    a7cc:	e2832001 	add	r2, r3, #1
    a7d0:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
    a7d4:	e583200c 	str	r2, [r3, #12]
    a7d8:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
    a7dc:	e5933000 	ldr	r3, [r3]
    a7e0:	e1a03623 	lsr	r3, r3, #12
    a7e4:	e6ef3073 	uxtb	r3, r3
    a7e8:	e203300f 	and	r3, r3, #15
    a7ec:	e6ef2073 	uxtb	r2, r3
    a7f0:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
    a7f4:	e5c32010 	strb	r2, [r3, #16]
    a7f8:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
    a7fc:	e5933000 	ldr	r3, [r3]
    a800:	e1a03a23 	lsr	r3, r3, #20
    a804:	e2033007 	and	r3, r3, #7
    a808:	e3a02c01 	mov	r2, #256	; 0x100
    a80c:	e1a03312 	lsl	r3, r2, r3
    a810:	e1a02003 	mov	r2, r3
    a814:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
    a818:	e5832014 	str	r2, [r3, #20]
    a81c:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
    a820:	e5d33010 	ldrb	r3, [r3, #16]
    a824:	e3530002 	cmp	r3, #2
    a828:	9a000002 	bls	a838 <CMachineInfo::CMachineInfo()+0x2e8>
    a82c:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
    a830:	e3a02003 	mov	r2, #3
    a834:	e5c32010 	strb	r2, [r3, #16]
    a838:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
    a83c:	e5d33004 	ldrb	r3, [r3, #4]
    a840:	e3530003 	cmp	r3, #3
    a844:	1a00003e 	bne	a944 <CMachineInfo::CMachineInfo()+0x3f4>
    a848:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
    a84c:	e5933014 	ldr	r3, [r3, #20]
    a850:	e3530c01 	cmp	r3, #256	; 0x100
    a854:	1a00003a 	bne	a944 <CMachineInfo::CMachineInfo()+0x3f4>
    a858:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
    a85c:	e593300c 	ldr	r3, [r3, #12]
    a860:	e3530001 	cmp	r3, #1
    a864:	1a000001 	bne	a870 <CMachineInfo::CMachineInfo()+0x320>
    a868:	e3a02001 	mov	r2, #1
    a86c:	ea000000 	b	a874 <CMachineInfo::CMachineInfo()+0x324>
    a870:	e3a02002 	mov	r2, #2
    a874:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
    a878:	e5c32004 	strb	r2, [r3, #4]
    a87c:	ea000030 	b	a944 <CMachineInfo::CMachineInfo()+0x3f4>
    a880:	e3a03000 	mov	r3, #0
    a884:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    a888:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
    a88c:	e3530010 	cmp	r3, #16
    a890:	8a00000b 	bhi	a8c4 <CMachineInfo::CMachineInfo()+0x374>
    a894:	e59f20e4 	ldr	r2, [pc, #228]	; a980 <CMachineInfo::CMachineInfo()+0x430>
    a898:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
    a89c:	e7922203 	ldr	r2, [r2, r3, lsl #4]
    a8a0:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
    a8a4:	e5933000 	ldr	r3, [r3]
    a8a8:	e1520003 	cmp	r2, r3
    a8ac:	0a000003 	beq	a8c0 <CMachineInfo::CMachineInfo()+0x370>
    a8b0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
    a8b4:	e2833001 	add	r3, r3, #1
    a8b8:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    a8bc:	eafffff1 	b	a888 <CMachineInfo::CMachineInfo()+0x338>
    a8c0:	e320f000 	nop	{0}
    a8c4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
    a8c8:	e3530010 	cmp	r3, #16
    a8cc:	9a000001 	bls	a8d8 <CMachineInfo::CMachineInfo()+0x388>
    a8d0:	e3a04000 	mov	r4, #0
    a8d4:	ea00001b 	b	a948 <CMachineInfo::CMachineInfo()+0x3f8>
    a8d8:	e59f20a0 	ldr	r2, [pc, #160]	; a980 <CMachineInfo::CMachineInfo()+0x430>
    a8dc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
    a8e0:	e1a03203 	lsl	r3, r3, #4
    a8e4:	e0823003 	add	r3, r2, r3
    a8e8:	e5d32004 	ldrb	r2, [r3, #4]
    a8ec:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
    a8f0:	e5c32004 	strb	r2, [r3, #4]
    a8f4:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
    a8f8:	e3a02001 	mov	r2, #1
    a8fc:	e5832008 	str	r2, [r3, #8]
    a900:	e59f2078 	ldr	r2, [pc, #120]	; a980 <CMachineInfo::CMachineInfo()+0x430>
    a904:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
    a908:	e1a03203 	lsl	r3, r3, #4
    a90c:	e0823003 	add	r3, r2, r3
    a910:	e5932008 	ldr	r2, [r3, #8]
    a914:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
    a918:	e583200c 	str	r2, [r3, #12]
    a91c:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
    a920:	e3a02000 	mov	r2, #0
    a924:	e5c32010 	strb	r2, [r3, #16]
    a928:	e59f2050 	ldr	r2, [pc, #80]	; a980 <CMachineInfo::CMachineInfo()+0x430>
    a92c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
    a930:	e1a03203 	lsl	r3, r3, #4
    a934:	e0823003 	add	r3, r2, r3
    a938:	e593200c 	ldr	r2, [r3, #12]
    a93c:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
    a940:	e5832014 	str	r2, [r3, #20]
    a944:	e3a04001 	mov	r4, #1
    a948:	e24b3020 	sub	r3, fp, #32
    a94c:	e1a00003 	mov	r0, r3
    a950:	eb00176c 	bl	10708 <CBcmPropertyTags::~CBcmPropertyTags()>
    a954:	e3540001 	cmp	r4, #1
    a958:	e320f000 	nop	{0}
    a95c:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
    a960:	e1a00003 	mov	r0, r3
    a964:	e24bd008 	sub	sp, fp, #8
    a968:	e8bd8810 	pop	{r4, fp, pc}
    a96c:	00001f35 	.word	0x00001f35
    a970:	000155d4 	.word	0x000155d4
    a974:	00060001 	.word	0x00060001
    a978:	00010002 	.word	0x00010002
    a97c:	00015394 	.word	0x00015394
    a980:	00015284 	.word	0x00015284

0000a984 <CMachineInfo::~CMachineInfo()>:
    a984:	e3a0200f 	mov	r2, #15
    a988:	e59f3014 	ldr	r3, [pc, #20]	; a9a4 <CMachineInfo::~CMachineInfo()+0x20>
    a98c:	e5c02004 	strb	r2, [r0, #4]
    a990:	e5932000 	ldr	r2, [r3]
    a994:	e1520000 	cmp	r2, r0
    a998:	03a02000 	moveq	r2, #0
    a99c:	05832000 	streq	r2, [r3]
    a9a0:	e12fff1e 	bx	lr
    a9a4:	000155d4 	.word	0x000155d4

0000a9a8 <CMachineInfo::GetMachineModel() const>:
    a9a8:	e5d00004 	ldrb	r0, [r0, #4]
    a9ac:	e12fff1e 	bx	lr

0000a9b0 <CMachineInfo::GetMachineName() const>:
    a9b0:	e5d02004 	ldrb	r2, [r0, #4]
    a9b4:	e59f3008 	ldr	r3, [pc, #8]	; a9c4 <CMachineInfo::GetMachineName() const+0x14>
    a9b8:	e0833102 	add	r3, r3, r2, lsl #2
    a9bc:	e59301ac 	ldr	r0, [r3, #428]	; 0x1ac
    a9c0:	e12fff1e 	bx	lr
    a9c4:	00015284 	.word	0x00015284

0000a9c8 <CMachineInfo::GetModelMajor() const>:
    a9c8:	e5900008 	ldr	r0, [r0, #8]
    a9cc:	e12fff1e 	bx	lr

0000a9d0 <CMachineInfo::GetModelRevision() const>:
    a9d0:	e590000c 	ldr	r0, [r0, #12]
    a9d4:	e12fff1e 	bx	lr

0000a9d8 <CMachineInfo::GetSoCType() const>:
    a9d8:	e5d00010 	ldrb	r0, [r0, #16]
    a9dc:	e12fff1e 	bx	lr

0000a9e0 <CMachineInfo::GetRAMSize() const>:
    a9e0:	e5900014 	ldr	r0, [r0, #20]
    a9e4:	e12fff1e 	bx	lr

0000a9e8 <CMachineInfo::GetSoCName() const>:
    a9e8:	e5d02010 	ldrb	r2, [r0, #16]
    a9ec:	e59f3008 	ldr	r3, [pc, #8]	; a9fc <CMachineInfo::GetSoCName() const+0x14>
    a9f0:	e0833102 	add	r3, r3, r2, lsl #2
    a9f4:	e59301ec 	ldr	r0, [r3, #492]	; 0x1ec
    a9f8:	e12fff1e 	bx	lr
    a9fc:	00015284 	.word	0x00015284

0000aa00 <CMachineInfo::GetRevisionRaw() const>:
    aa00:	e5900000 	ldr	r0, [r0]
    aa04:	e12fff1e 	bx	lr

0000aa08 <CMachineInfo::GetActLEDInfo() const>:
    aa08:	e5d02004 	ldrb	r2, [r0, #4]
    aa0c:	e59f3008 	ldr	r3, [pc, #8]	; aa1c <CMachineInfo::GetActLEDInfo() const+0x14>
    aa10:	e0833102 	add	r3, r3, r2, lsl #2
    aa14:	e59301fc 	ldr	r0, [r3, #508]	; 0x1fc
    aa18:	e12fff1e 	bx	lr
    aa1c:	00015284 	.word	0x00015284

0000aa20 <CMachineInfo::GetClockRate(unsigned int) const>:
    aa20:	e92d4070 	push	{r4, r5, r6, lr}
    aa24:	e24dd028 	sub	sp, sp, #40	; 0x28
    aa28:	e1a05001 	mov	r5, r1
    aa2c:	e1a06000 	mov	r6, r0
    aa30:	e3a01000 	mov	r1, #0
    aa34:	e28d000c 	add	r0, sp, #12
    aa38:	eb00172b 	bl	106ec <CBcmPropertyTags::CBcmPropertyTags(bool)>
    aa3c:	e3a03004 	mov	r3, #4
    aa40:	e58d3000 	str	r3, [sp]
    aa44:	e3a03014 	mov	r3, #20
    aa48:	e28d000c 	add	r0, sp, #12
    aa4c:	e08d2003 	add	r2, sp, r3
    aa50:	e59f1078 	ldr	r1, [pc, #120]	; aad0 <CMachineInfo::GetClockRate(unsigned int) const+0xb0>
    aa54:	e58d5020 	str	r5, [sp, #32]
    aa58:	eb00177b 	bl	1084c <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
    aa5c:	e2504000 	subs	r4, r0, #0
    aa60:	1a00000a 	bne	aa90 <CMachineInfo::GetClockRate(unsigned int) const+0x70>
    aa64:	e3550002 	cmp	r5, #2
    aa68:	0a00000e 	beq	aaa8 <CMachineInfo::GetClockRate(unsigned int) const+0x88>
    aa6c:	e3550004 	cmp	r5, #4
    aa70:	0a000010 	beq	aab8 <CMachineInfo::GetClockRate(unsigned int) const+0x98>
    aa74:	e3550001 	cmp	r5, #1
    aa78:	0a00000c 	beq	aab0 <CMachineInfo::GetClockRate(unsigned int) const+0x90>
    aa7c:	e59f1050 	ldr	r1, [pc, #80]	; aad4 <CMachineInfo::GetClockRate(unsigned int) const+0xb4>
    aa80:	e3a02f4e 	mov	r2, #312	; 0x138
    aa84:	e2810010 	add	r0, r1, #16
    aa88:	eb0015d0 	bl	101d0 <assertion_failed>
    aa8c:	ea000000 	b	aa94 <CMachineInfo::GetClockRate(unsigned int) const+0x74>
    aa90:	e59d4024 	ldr	r4, [sp, #36]	; 0x24
    aa94:	e28d000c 	add	r0, sp, #12
    aa98:	eb00171a 	bl	10708 <CBcmPropertyTags::~CBcmPropertyTags()>
    aa9c:	e1a00004 	mov	r0, r4
    aaa0:	e28dd028 	add	sp, sp, #40	; 0x28
    aaa4:	e8bd8070 	pop	{r4, r5, r6, pc}
    aaa8:	e59f4028 	ldr	r4, [pc, #40]	; aad8 <CMachineInfo::GetClockRate(unsigned int) const+0xb8>
    aaac:	eafffff8 	b	aa94 <CMachineInfo::GetClockRate(unsigned int) const+0x74>
    aab0:	e59f4024 	ldr	r4, [pc, #36]	; aadc <CMachineInfo::GetClockRate(unsigned int) const+0xbc>
    aab4:	eafffff6 	b	aa94 <CMachineInfo::GetClockRate(unsigned int) const+0x74>
    aab8:	e5962008 	ldr	r2, [r6, #8]
    aabc:	e59f301c 	ldr	r3, [pc, #28]	; aae0 <CMachineInfo::GetClockRate(unsigned int) const+0xc0>
    aac0:	e3520002 	cmp	r2, #2
    aac4:	e59f4018 	ldr	r4, [pc, #24]	; aae4 <CMachineInfo::GetClockRate(unsigned int) const+0xc4>
    aac8:	81a04003 	movhi	r4, r3
    aacc:	eafffff0 	b	aa94 <CMachineInfo::GetClockRate(unsigned int) const+0x74>
    aad0:	00030002 	.word	0x00030002
    aad4:	00013674 	.word	0x00013674
    aad8:	02dc6c00 	.word	0x02dc6c00
    aadc:	05f5e100 	.word	0x05f5e100
    aae0:	11e1a300 	.word	0x11e1a300
    aae4:	0ee6b280 	.word	0x0ee6b280

0000aae8 <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const>:
    aae8:	e3510036 	cmp	r1, #54	; 0x36
    aaec:	0a00000d 	beq	ab28 <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const+0x40>
    aaf0:	e3510037 	cmp	r1, #55	; 0x37
    aaf4:	1a000004 	bne	ab0c <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const+0x24>
    aaf8:	e5d03004 	ldrb	r3, [r0, #4]
    aafc:	e3530003 	cmp	r3, #3
    ab00:	83a00028 	movhi	r0, #40	; 0x28
    ab04:	93a0002d 	movls	r0, #45	; 0x2d
    ab08:	e12fff1e 	bx	lr
    ab0c:	e59f103c 	ldr	r1, [pc, #60]	; ab50 <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const+0x68>
    ab10:	e92d4010 	push	{r4, lr}
    ab14:	e2810010 	add	r0, r1, #16
    ab18:	e59f2034 	ldr	r2, [pc, #52]	; ab54 <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const+0x6c>
    ab1c:	eb0015ab 	bl	101d0 <assertion_failed>
    ab20:	e3a00000 	mov	r0, #0
    ab24:	e8bd8010 	pop	{r4, pc}
    ab28:	e5d03004 	ldrb	r3, [r0, #4]
    ab2c:	e3530003 	cmp	r3, #3
    ab30:	9a000004 	bls	ab48 <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const+0x60>
    ab34:	e5903008 	ldr	r3, [r0, #8]
    ab38:	e3530003 	cmp	r3, #3
    ab3c:	33a0002d 	movcc	r0, #45	; 0x2d
    ab40:	23a00029 	movcs	r0, #41	; 0x29
    ab44:	e12fff1e 	bx	lr
    ab48:	e3a00028 	mov	r0, #40	; 0x28
    ab4c:	e12fff1e 	bx	lr
    ab50:	00013674 	.word	0x00013674
    ab54:	00000171 	.word	0x00000171

0000ab58 <CMachineInfo::GetDevice(TDeviceId) const>:
    ab58:	e3510000 	cmp	r1, #0
    ab5c:	1a000003 	bne	ab70 <CMachineInfo::GetDevice(TDeviceId) const+0x18>
    ab60:	e5d00004 	ldrb	r0, [r0, #4]
    ab64:	e2500001 	subs	r0, r0, #1
    ab68:	13a00001 	movne	r0, #1
    ab6c:	e12fff1e 	bx	lr
    ab70:	e59f1014 	ldr	r1, [pc, #20]	; ab8c <CMachineInfo::GetDevice(TDeviceId) const+0x34>
    ab74:	e92d4010 	push	{r4, lr}
    ab78:	e2810010 	add	r0, r1, #16
    ab7c:	e59f200c 	ldr	r2, [pc, #12]	; ab90 <CMachineInfo::GetDevice(TDeviceId) const+0x38>
    ab80:	eb001592 	bl	101d0 <assertion_failed>
    ab84:	e3a00000 	mov	r0, #0
    ab88:	e8bd8010 	pop	{r4, pc}
    ab8c:	00013674 	.word	0x00013674
    ab90:	0000018a 	.word	0x0000018a

0000ab94 <CMachineInfo::AllocateDMAChannel(unsigned int)>:
    ab94:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    ab98:	e59f60d8 	ldr	r6, [pc, #216]	; ac78 <CMachineInfo::AllocateDMAChannel(unsigned int)+0xe4>
    ab9c:	e1a05000 	mov	r5, r0
    aba0:	e1a04001 	mov	r4, r1
    aba4:	e5963000 	ldr	r3, [r6]
    aba8:	e59f80cc 	ldr	r8, [pc, #204]	; ac7c <CMachineInfo::AllocateDMAChannel(unsigned int)+0xe8>
    abac:	e59f70cc 	ldr	r7, [pc, #204]	; ac80 <CMachineInfo::AllocateDMAChannel(unsigned int)+0xec>
    abb0:	ea000002 	b	abc0 <CMachineInfo::AllocateDMAChannel(unsigned int)+0x2c>
    abb4:	e1550003 	cmp	r5, r3
    abb8:	0a000009 	beq	abe4 <CMachineInfo::AllocateDMAChannel(unsigned int)+0x50>
    abbc:	e1a05003 	mov	r5, r3
    abc0:	e3530000 	cmp	r3, #0
    abc4:	1afffffa 	bne	abb4 <CMachineInfo::AllocateDMAChannel(unsigned int)+0x20>
    abc8:	e1a02008 	mov	r2, r8
    abcc:	e1a01007 	mov	r1, r7
    abd0:	e59f00ac 	ldr	r0, [pc, #172]	; ac84 <CMachineInfo::AllocateDMAChannel(unsigned int)+0xf0>
    abd4:	eb00157d 	bl	101d0 <assertion_failed>
    abd8:	e5963000 	ldr	r3, [r6]
    abdc:	e1550003 	cmp	r5, r3
    abe0:	1afffff5 	bne	abbc <CMachineInfo::AllocateDMAChannel(unsigned int)+0x28>
    abe4:	e3d4300f 	bics	r3, r4, #15
    abe8:	1a00000a 	bne	ac18 <CMachineInfo::AllocateDMAChannel(unsigned int)+0x84>
    abec:	e354000c 	cmp	r4, #12
    abf0:	8a000017 	bhi	ac54 <CMachineInfo::AllocateDMAChannel(unsigned int)+0xc0>
    abf4:	e1d531b8 	ldrh	r3, [r5, #24]
    abf8:	e1a02453 	asr	r2, r3, r4
    abfc:	e3120001 	tst	r2, #1
    ac00:	0a00000d 	beq	ac3c <CMachineInfo::AllocateDMAChannel(unsigned int)+0xa8>
    ac04:	e3a02001 	mov	r2, #1
    ac08:	e1c33412 	bic	r3, r3, r2, lsl r4
    ac0c:	e1c531b8 	strh	r3, [r5, #24]
    ac10:	e1a00004 	mov	r0, r4
    ac14:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    ac18:	e3540081 	cmp	r4, #129	; 0x81
    ac1c:	13a0000c 	movne	r0, #12
    ac20:	03a00006 	moveq	r0, #6
    ac24:	e1d521b8 	ldrh	r2, [r5, #24]
    ac28:	e1a03052 	asr	r3, r2, r0
    ac2c:	e3130001 	tst	r3, #1
    ac30:	1a000003 	bne	ac44 <CMachineInfo::AllocateDMAChannel(unsigned int)+0xb0>
    ac34:	e2500001 	subs	r0, r0, #1
    ac38:	2afffffa 	bcs	ac28 <CMachineInfo::AllocateDMAChannel(unsigned int)+0x94>
    ac3c:	e3a00080 	mov	r0, #128	; 0x80
    ac40:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    ac44:	e3a03001 	mov	r3, #1
    ac48:	e1c22013 	bic	r2, r2, r3, lsl r0
    ac4c:	e1c521b8 	strh	r2, [r5, #24]
    ac50:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    ac54:	e59f1024 	ldr	r1, [pc, #36]	; ac80 <CMachineInfo::AllocateDMAChannel(unsigned int)+0xec>
    ac58:	e3a02f67 	mov	r2, #412	; 0x19c
    ac5c:	e2810024 	add	r0, r1, #36	; 0x24
    ac60:	eb00155a 	bl	101d0 <assertion_failed>
    ac64:	e1d531b8 	ldrh	r3, [r5, #24]
    ac68:	e1a02453 	asr	r2, r3, r4
    ac6c:	e3120001 	tst	r2, #1
    ac70:	1affffe3 	bne	ac04 <CMachineInfo::AllocateDMAChannel(unsigned int)+0x70>
    ac74:	eafffff0 	b	ac3c <CMachineInfo::AllocateDMAChannel(unsigned int)+0xa8>
    ac78:	000155d4 	.word	0x000155d4
    ac7c:	00000193 	.word	0x00000193
    ac80:	00013674 	.word	0x00013674
    ac84:	00013688 	.word	0x00013688

0000ac88 <CMachineInfo::FreeDMAChannel(unsigned int)>:
    ac88:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    ac8c:	e59f6090 	ldr	r6, [pc, #144]	; ad24 <CMachineInfo::FreeDMAChannel(unsigned int)+0x9c>
    ac90:	e1a04000 	mov	r4, r0
    ac94:	e1a05001 	mov	r5, r1
    ac98:	e5963000 	ldr	r3, [r6]
    ac9c:	e59f7084 	ldr	r7, [pc, #132]	; ad28 <CMachineInfo::FreeDMAChannel(unsigned int)+0xa0>
    aca0:	ea000002 	b	acb0 <CMachineInfo::FreeDMAChannel(unsigned int)+0x28>
    aca4:	e1540003 	cmp	r4, r3
    aca8:	0a000009 	beq	acd4 <CMachineInfo::FreeDMAChannel(unsigned int)+0x4c>
    acac:	e1a04003 	mov	r4, r3
    acb0:	e3530000 	cmp	r3, #0
    acb4:	1afffffa 	bne	aca4 <CMachineInfo::FreeDMAChannel(unsigned int)+0x1c>
    acb8:	e3a02f6e 	mov	r2, #440	; 0x1b8
    acbc:	e1a01007 	mov	r1, r7
    acc0:	e59f0064 	ldr	r0, [pc, #100]	; ad2c <CMachineInfo::FreeDMAChannel(unsigned int)+0xa4>
    acc4:	eb001541 	bl	101d0 <assertion_failed>
    acc8:	e5963000 	ldr	r3, [r6]
    accc:	e1540003 	cmp	r4, r3
    acd0:	1afffff5 	bne	acac <CMachineInfo::FreeDMAChannel(unsigned int)+0x24>
    acd4:	e355000c 	cmp	r5, #12
    acd8:	8a00000c 	bhi	ad10 <CMachineInfo::FreeDMAChannel(unsigned int)+0x88>
    acdc:	e1d431b8 	ldrh	r3, [r4, #24]
    ace0:	e1a02553 	asr	r2, r3, r5
    ace4:	e3120001 	tst	r2, #1
    ace8:	0a000004 	beq	ad00 <CMachineInfo::FreeDMAChannel(unsigned int)+0x78>
    acec:	e59f1034 	ldr	r1, [pc, #52]	; ad28 <CMachineInfo::FreeDMAChannel(unsigned int)+0xa0>
    acf0:	e59f2038 	ldr	r2, [pc, #56]	; ad30 <CMachineInfo::FreeDMAChannel(unsigned int)+0xa8>
    acf4:	e2810040 	add	r0, r1, #64	; 0x40
    acf8:	eb001534 	bl	101d0 <assertion_failed>
    acfc:	e1d431b8 	ldrh	r3, [r4, #24]
    ad00:	e3a02001 	mov	r2, #1
    ad04:	e1833512 	orr	r3, r3, r2, lsl r5
    ad08:	e1c431b8 	strh	r3, [r4, #24]
    ad0c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    ad10:	e59f1010 	ldr	r1, [pc, #16]	; ad28 <CMachineInfo::FreeDMAChannel(unsigned int)+0xa0>
    ad14:	e3a02d07 	mov	r2, #448	; 0x1c0
    ad18:	e2810024 	add	r0, r1, #36	; 0x24
    ad1c:	eb00152b 	bl	101d0 <assertion_failed>
    ad20:	eaffffed 	b	acdc <CMachineInfo::FreeDMAChannel(unsigned int)+0x54>
    ad24:	000155d4 	.word	0x000155d4
    ad28:	00013674 	.word	0x00013674
    ad2c:	00013688 	.word	0x00013688
    ad30:	000001c1 	.word	0x000001c1

0000ad34 <CMachineInfo::Get()>:
    ad34:	e92d4010 	push	{r4, lr}
    ad38:	e59f4020 	ldr	r4, [pc, #32]	; ad60 <CMachineInfo::Get()+0x2c>
    ad3c:	e5940000 	ldr	r0, [r4]
    ad40:	e3500000 	cmp	r0, #0
    ad44:	18bd8010 	popne	{r4, pc}
    ad48:	e59f1014 	ldr	r1, [pc, #20]	; ad64 <CMachineInfo::Get()+0x30>
    ad4c:	e59f2014 	ldr	r2, [pc, #20]	; ad68 <CMachineInfo::Get()+0x34>
    ad50:	e2810014 	add	r0, r1, #20
    ad54:	eb00151d 	bl	101d0 <assertion_failed>
    ad58:	e5940000 	ldr	r0, [r4]
    ad5c:	e8bd8010 	pop	{r4, pc}
    ad60:	000155d4 	.word	0x000155d4
    ad64:	00013674 	.word	0x00013674
    ad68:	000001c7 	.word	0x000001c7

0000ad6c <CScreenDevice::CScreenDevice(unsigned int, unsigned int, bool)>:
    ad6c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    ad70:	e1a04000 	mov	r4, r0
    ad74:	e3a05000 	mov	r5, #0
    ad78:	e1a08001 	mov	r8, r1
    ad7c:	e1a07002 	mov	r7, r2
    ad80:	e1a06003 	mov	r6, r3
    ad84:	eb001798 	bl	10bec <CDevice::CDevice()>
    ad88:	e59f0060 	ldr	r0, [pc, #96]	; adf0 <CScreenDevice::CScreenDevice(unsigned int, unsigned int, bool)+0x84>
    ad8c:	e5c4600c 	strb	r6, [r4, #12]
    ad90:	e5840000 	str	r0, [r4]
    ad94:	e5848004 	str	r8, [r4, #4]
    ad98:	e5847008 	str	r7, [r4, #8]
    ad9c:	e5845010 	str	r5, [r4, #16]
    ada0:	e2840014 	add	r0, r4, #20
    ada4:	eb0016f0 	bl	1096c <CCharGenerator::CCharGenerator()>
    ada8:	e3a06001 	mov	r6, #1
    adac:	e3e03020 	mvn	r3, #32
    adb0:	e5845018 	str	r5, [r4, #24]
    adb4:	e5845030 	str	r5, [r4, #48]	; 0x30
    adb8:	e5845034 	str	r5, [r4, #52]	; 0x34
    adbc:	e584503c 	str	r5, [r4, #60]	; 0x3c
    adc0:	e5845040 	str	r5, [r4, #64]	; 0x40
    adc4:	e5c45048 	strb	r5, [r4, #72]	; 0x48
    adc8:	e5c45054 	strb	r5, [r4, #84]	; 0x54
    adcc:	e1a02005 	mov	r2, r5
    add0:	e1c434b6 	strh	r3, [r4, #70]	; 0x46
    add4:	e5c46044 	strb	r6, [r4, #68]	; 0x44
    add8:	e2840058 	add	r0, r4, #88	; 0x58
    addc:	e3a01081 	mov	r1, #129	; 0x81
    ade0:	eb001785 	bl	10bfc <CDMAChannel::CDMAChannel(unsigned int, CInterruptSystem*)>
    ade4:	e5846080 	str	r6, [r4, #128]	; 0x80
    ade8:	e1a00004 	mov	r0, r4
    adec:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    adf0:	000136e4 	.word	0x000136e4

0000adf4 <CScreenDevice::~CScreenDevice()>:
    adf4:	e5d0200c 	ldrb	r2, [r0, #12]
    adf8:	e59f3070 	ldr	r3, [pc, #112]	; ae70 <CScreenDevice::~CScreenDevice()+0x7c>
    adfc:	e3520000 	cmp	r2, #0
    ae00:	e92d4070 	push	{r4, r5, r6, lr}
    ae04:	e1a04000 	mov	r4, r0
    ae08:	e5803000 	str	r3, [r0]
    ae0c:	0a000003 	beq	ae20 <CScreenDevice::~CScreenDevice()+0x2c>
    ae10:	e5900018 	ldr	r0, [r0, #24]
    ae14:	e3500000 	cmp	r0, #0
    ae18:	0a000000 	beq	ae20 <CScreenDevice::~CScreenDevice()+0x2c>
    ae1c:	eb00135e 	bl	fb9c <operator delete[](void*)>
    ae20:	e3a03000 	mov	r3, #0
    ae24:	e5945010 	ldr	r5, [r4, #16]
    ae28:	e5843018 	str	r3, [r4, #24]
    ae2c:	e1550003 	cmp	r5, r3
    ae30:	0a000004 	beq	ae48 <CScreenDevice::~CScreenDevice()+0x54>
    ae34:	e1a00005 	mov	r0, r5
    ae38:	eb001587 	bl	1045c <CBcmFrameBuffer::~CBcmFrameBuffer()>
    ae3c:	e1a00005 	mov	r0, r5
    ae40:	e3a01094 	mov	r1, #148	; 0x94
    ae44:	eb001355 	bl	fba0 <operator delete(void*, unsigned int)>
    ae48:	e3a03000 	mov	r3, #0
    ae4c:	e2840058 	add	r0, r4, #88	; 0x58
    ae50:	e5843010 	str	r3, [r4, #16]
    ae54:	eb0017ad 	bl	10d10 <CDMAChannel::~CDMAChannel()>
    ae58:	e2840014 	add	r0, r4, #20
    ae5c:	eb0016c5 	bl	10978 <CCharGenerator::~CCharGenerator()>
    ae60:	e1a00004 	mov	r0, r4
    ae64:	eb001754 	bl	10bbc <CDevice::~CDevice()>
    ae68:	e1a00004 	mov	r0, r4
    ae6c:	e8bd8070 	pop	{r4, r5, r6, pc}
    ae70:	000136e4 	.word	0x000136e4

0000ae74 <CScreenDevice::~CScreenDevice()>:
    ae74:	e92d4010 	push	{r4, lr}
    ae78:	e1a04000 	mov	r4, r0
    ae7c:	ebffffdc 	bl	adf4 <CScreenDevice::~CScreenDevice()>
    ae80:	e1a00004 	mov	r0, r4
    ae84:	e3a01084 	mov	r1, #132	; 0x84
    ae88:	eb001344 	bl	fba0 <operator delete(void*, unsigned int)>
    ae8c:	e1a00004 	mov	r0, r4
    ae90:	e8bd8010 	pop	{r4, pc}

0000ae94 <CScreenDevice::Initialize()>:
    ae94:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    ae98:	e5d0500c 	ldrb	r5, [r0, #12]
    ae9c:	e24dd00c 	sub	sp, sp, #12
    aea0:	e3550000 	cmp	r5, #0
    aea4:	e1a04000 	mov	r4, r0
    aea8:	0a00002c 	beq	af60 <CScreenDevice::Initialize()+0xcc>
    aeac:	e5903004 	ldr	r3, [r0, #4]
    aeb0:	e5902008 	ldr	r2, [r0, #8]
    aeb4:	e5803024 	str	r3, [r0, #36]	; 0x24
    aeb8:	e0000392 	mul	r0, r2, r3
    aebc:	e370010f 	cmn	r0, #-1073741821	; 0xc0000003
    aec0:	e1a00080 	lsl	r0, r0, #1
    aec4:	e584001c 	str	r0, [r4, #28]
    aec8:	e5843020 	str	r3, [r4, #32]
    aecc:	23e00000 	mvncs	r0, #0
    aed0:	e5842028 	str	r2, [r4, #40]	; 0x28
    aed4:	eb00132e 	bl	fb94 <operator new[](unsigned int)>
    aed8:	e5947028 	ldr	r7, [r4, #40]	; 0x28
    aedc:	e5840018 	str	r0, [r4, #24]
    aee0:	e2846014 	add	r6, r4, #20
    aee4:	e1a00006 	mov	r0, r6
    aee8:	eb0016a5 	bl	10984 <CCharGenerator::GetCharHeight() const>
    aeec:	e1a01000 	mov	r1, r0
    aef0:	e1a00007 	mov	r0, r7
    aef4:	eb002028 	bl	12f9c <__udivsi3>
    aef8:	e1a05000 	mov	r5, r0
    aefc:	e1a00006 	mov	r0, r6
    af00:	eb00169f 	bl	10984 <CCharGenerator::GetCharHeight() const>
    af04:	e3a02000 	mov	r2, #0
    af08:	e0000590 	mul	r0, r0, r5
    af0c:	e5943034 	ldr	r3, [r4, #52]	; 0x34
    af10:	e584002c 	str	r0, [r4, #44]	; 0x2c
    af14:	e5840038 	str	r0, [r4, #56]	; 0x38
    af18:	e1c423fc 	strd	r2, [r4, #60]	; 0x3c
    af1c:	e1a00004 	mov	r0, r4
    af20:	eb000213 	bl	b774 <CScreenDevice::ClearDisplayEnd()>
    af24:	e5d43044 	ldrb	r3, [r4, #68]	; 0x44
    af28:	e3530000 	cmp	r3, #0
    af2c:	1a000008 	bne	af54 <CScreenDevice::Initialize()+0xc0>
    af30:	ebfff651 	bl	887c <CDeviceNameService::Get()>
    af34:	e1a02004 	mov	r2, r4
    af38:	e3a03000 	mov	r3, #0
    af3c:	e59f10b8 	ldr	r1, [pc, #184]	; affc <CScreenDevice::Initialize()+0x168>
    af40:	ebfff58b 	bl	8574 <CDeviceNameService::AddDevice(char const*, CDevice*, bool)>
    af44:	e3a05001 	mov	r5, #1
    af48:	e1a00005 	mov	r0, r5
    af4c:	e28dd00c 	add	sp, sp, #12
    af50:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
    af54:	e1a00004 	mov	r0, r4
    af58:	eb0003e1 	bl	bee4 <CScreenDevice::InvertCursor() [clone .part.6]>
    af5c:	eafffff3 	b	af30 <CScreenDevice::Initialize()+0x9c>
    af60:	e3a00094 	mov	r0, #148	; 0x94
    af64:	eb001309 	bl	fb90 <operator new(unsigned int)>
    af68:	e9940006 	ldmib	r4, {r1, r2}
    af6c:	e1a06000 	mov	r6, r0
    af70:	e3a03010 	mov	r3, #16
    af74:	e58d5004 	str	r5, [sp, #4]
    af78:	e58d5000 	str	r5, [sp]
    af7c:	eb0014e6 	bl	1031c <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)>
    af80:	e5846010 	str	r6, [r4, #16]
    af84:	e1a00006 	mov	r0, r6
    af88:	eb00155e 	bl	10508 <CBcmFrameBuffer::Initialize()>
    af8c:	e3500000 	cmp	r0, #0
    af90:	0affffec 	beq	af48 <CScreenDevice::Initialize()+0xb4>
    af94:	e5940010 	ldr	r0, [r4, #16]
    af98:	eb001595 	bl	105f4 <CBcmFrameBuffer::GetDepth() const>
    af9c:	e3500010 	cmp	r0, #16
    afa0:	1affffe8 	bne	af48 <CScreenDevice::Initialize()+0xb4>
    afa4:	e5940010 	ldr	r0, [r4, #16]
    afa8:	eb001593 	bl	105fc <CBcmFrameBuffer::GetBuffer() const>
    afac:	e5840018 	str	r0, [r4, #24]
    afb0:	e5940010 	ldr	r0, [r4, #16]
    afb4:	eb001592 	bl	10604 <CBcmFrameBuffer::GetSize() const>
    afb8:	e584001c 	str	r0, [r4, #28]
    afbc:	e5940010 	ldr	r0, [r4, #16]
    afc0:	eb001589 	bl	105ec <CBcmFrameBuffer::GetPitch() const>
    afc4:	e5840020 	str	r0, [r4, #32]
    afc8:	e5940010 	ldr	r0, [r4, #16]
    afcc:	eb00157e 	bl	105cc <CBcmFrameBuffer::GetWidth() const>
    afd0:	e5840024 	str	r0, [r4, #36]	; 0x24
    afd4:	e5940010 	ldr	r0, [r4, #16]
    afd8:	eb00157d 	bl	105d4 <CBcmFrameBuffer::GetHeight() const>
    afdc:	e5943020 	ldr	r3, [r4, #32]
    afe0:	e1a07000 	mov	r7, r0
    afe4:	e3130003 	tst	r3, #3
    afe8:	01a030a3 	lsreq	r3, r3, #1
    afec:	e5840028 	str	r0, [r4, #40]	; 0x28
    aff0:	05843020 	streq	r3, [r4, #32]
    aff4:	0affffb9 	beq	aee0 <CScreenDevice::Initialize()+0x4c>
    aff8:	eaffffd2 	b	af48 <CScreenDevice::Initialize()+0xb4>
    affc:	00013460 	.word	0x00013460

0000b000 <CScreenDevice::GetWidth() const>:
    b000:	e5900024 	ldr	r0, [r0, #36]	; 0x24
    b004:	e12fff1e 	bx	lr

0000b008 <CScreenDevice::GetHeight() const>:
    b008:	e5900028 	ldr	r0, [r0, #40]	; 0x28
    b00c:	e12fff1e 	bx	lr

0000b010 <CScreenDevice::GetColumns() const>:
    b010:	e92d4010 	push	{r4, lr}
    b014:	e2800014 	add	r0, r0, #20
    b018:	e5904010 	ldr	r4, [r0, #16]
    b01c:	eb001656 	bl	1097c <CCharGenerator::GetCharWidth() const>
    b020:	e1a01000 	mov	r1, r0
    b024:	e1a00004 	mov	r0, r4
    b028:	eb001fdb 	bl	12f9c <__udivsi3>
    b02c:	e8bd8010 	pop	{r4, pc}

0000b030 <CScreenDevice::GetRows() const>:
    b030:	e92d4010 	push	{r4, lr}
    b034:	e2800014 	add	r0, r0, #20
    b038:	e5904018 	ldr	r4, [r0, #24]
    b03c:	eb001650 	bl	10984 <CCharGenerator::GetCharHeight() const>
    b040:	e1a01000 	mov	r1, r0
    b044:	e1a00004 	mov	r0, r4
    b048:	eb001fd3 	bl	12f9c <__udivsi3>
    b04c:	e8bd8010 	pop	{r4, pc}

0000b050 <CScreenDevice::GetStatus()>:
    b050:	e92d4010 	push	{r4, lr}
    b054:	e591c01c 	ldr	ip, [r1, #28]
    b058:	e591e018 	ldr	lr, [r1, #24]
    b05c:	e5912030 	ldr	r2, [r1, #48]	; 0x30
    b060:	e580e000 	str	lr, [r0]
    b064:	e580c004 	str	ip, [r0, #4]
    b068:	e591e034 	ldr	lr, [r1, #52]	; 0x34
    b06c:	e591c038 	ldr	ip, [r1, #56]	; 0x38
    b070:	e5802008 	str	r2, [r0, #8]
    b074:	e591203c 	ldr	r2, [r1, #60]	; 0x3c
    b078:	e580e00c 	str	lr, [r0, #12]
    b07c:	e580c010 	str	ip, [r0, #16]
    b080:	e591e040 	ldr	lr, [r1, #64]	; 0x40
    b084:	e5d1c044 	ldrb	ip, [r1, #68]	; 0x44
    b088:	e5802014 	str	r2, [r0, #20]
    b08c:	e1d124b6 	ldrh	r2, [r1, #70]	; 0x46
    b090:	e580e018 	str	lr, [r0, #24]
    b094:	e5d14048 	ldrb	r4, [r1, #72]	; 0x48
    b098:	e5c0c01c 	strb	ip, [r0, #28]
    b09c:	e591e04c 	ldr	lr, [r1, #76]	; 0x4c
    b0a0:	e1c021be 	strh	r2, [r0, #30]
    b0a4:	e591c050 	ldr	ip, [r1, #80]	; 0x50
    b0a8:	e5d12054 	ldrb	r2, [r1, #84]	; 0x54
    b0ac:	e5c04020 	strb	r4, [r0, #32]
    b0b0:	e580e024 	str	lr, [r0, #36]	; 0x24
    b0b4:	e580c028 	str	ip, [r0, #40]	; 0x28
    b0b8:	e5c0202c 	strb	r2, [r0, #44]	; 0x2c
    b0bc:	e8bd8010 	pop	{r4, pc}

0000b0c0 <CScreenDevice::SetStatus(TScreenStatus const&)>:
    b0c0:	e590201c 	ldr	r2, [r0, #28]
    b0c4:	e5913004 	ldr	r3, [r1, #4]
    b0c8:	e1520003 	cmp	r2, r3
    b0cc:	0a000001 	beq	b0d8 <CScreenDevice::SetStatus(TScreenStatus const&)+0x18>
    b0d0:	e3a00000 	mov	r0, #0
    b0d4:	e12fff1e 	bx	lr
    b0d8:	e590c020 	ldr	ip, [r0, #32]
    b0dc:	e5903024 	ldr	r3, [r0, #36]	; 0x24
    b0e0:	e15c0003 	cmp	ip, r3
    b0e4:	1afffff9 	bne	b0d0 <CScreenDevice::SetStatus(TScreenStatus const&)+0x10>
    b0e8:	e92d4070 	push	{r4, r5, r6, lr}
    b0ec:	e1a04000 	mov	r4, r0
    b0f0:	e5900080 	ldr	r0, [r0, #128]	; 0x80
    b0f4:	e1a05001 	mov	r5, r1
    b0f8:	e3500000 	cmp	r0, #0
    b0fc:	1a000020 	bne	b184 <CScreenDevice::SetStatus(TScreenStatus const&)+0xc4>
    b100:	e5d43054 	ldrb	r3, [r4, #84]	; 0x54
    b104:	e3530000 	cmp	r3, #0
    b108:	1a000029 	bne	b1b4 <CScreenDevice::SetStatus(TScreenStatus const&)+0xf4>
    b10c:	e5d1302c 	ldrb	r3, [r1, #44]	; 0x2c
    b110:	e3530000 	cmp	r3, #0
    b114:	1a000026 	bne	b1b4 <CScreenDevice::SetStatus(TScreenStatus const&)+0xf4>
    b118:	e5951000 	ldr	r1, [r5]
    b11c:	e5940018 	ldr	r0, [r4, #24]
    b120:	eb001065 	bl	f2bc <memcpy>
    b124:	e1c500dc 	ldrd	r0, [r5, #12]
    b128:	e5953008 	ldr	r3, [r5, #8]
    b12c:	e5942080 	ldr	r2, [r4, #128]	; 0x80
    b130:	e5d5c01c 	ldrb	ip, [r5, #28]
    b134:	e3520000 	cmp	r2, #0
    b138:	e5952014 	ldr	r2, [r5, #20]
    b13c:	e5843030 	str	r3, [r4, #48]	; 0x30
    b140:	e5953018 	ldr	r3, [r5, #24]
    b144:	e5840034 	str	r0, [r4, #52]	; 0x34
    b148:	e5841038 	str	r1, [r4, #56]	; 0x38
    b14c:	e1d501be 	ldrh	r0, [r5, #30]
    b150:	e5d51020 	ldrb	r1, [r5, #32]
    b154:	e584203c 	str	r2, [r4, #60]	; 0x3c
    b158:	e5843040 	str	r3, [r4, #64]	; 0x40
    b15c:	e1c522d4 	ldrd	r2, [r5, #36]	; 0x24
    b160:	e5c4c044 	strb	ip, [r4, #68]	; 0x44
    b164:	e1c404b6 	strh	r0, [r4, #70]	; 0x46
    b168:	e5c41048 	strb	r1, [r4, #72]	; 0x48
    b16c:	e1c424fc 	strd	r2, [r4, #76]	; 0x4c
    b170:	1a000011 	bne	b1bc <CScreenDevice::SetStatus(TScreenStatus const&)+0xfc>
    b174:	e3a03000 	mov	r3, #0
    b178:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
    b17c:	e3a00001 	mov	r0, #1
    b180:	e8bd8070 	pop	{r4, r5, r6, pc}
    b184:	eb001227 	bl	fa28 <EnterCritical>
    b188:	e5d43054 	ldrb	r3, [r4, #84]	; 0x54
    b18c:	e3530000 	cmp	r3, #0
    b190:	1a000003 	bne	b1a4 <CScreenDevice::SetStatus(TScreenStatus const&)+0xe4>
    b194:	e5d5302c 	ldrb	r3, [r5, #44]	; 0x2c
    b198:	e3530000 	cmp	r3, #0
    b19c:	0594201c 	ldreq	r2, [r4, #28]
    b1a0:	0affffdc 	beq	b118 <CScreenDevice::SetStatus(TScreenStatus const&)+0x58>
    b1a4:	e5943080 	ldr	r3, [r4, #128]	; 0x80
    b1a8:	e3530000 	cmp	r3, #0
    b1ac:	0a000000 	beq	b1b4 <CScreenDevice::SetStatus(TScreenStatus const&)+0xf4>
    b1b0:	eb001249 	bl	fadc <LeaveCritical>
    b1b4:	e3a00000 	mov	r0, #0
    b1b8:	e8bd8070 	pop	{r4, r5, r6, pc}
    b1bc:	eb001246 	bl	fadc <LeaveCritical>
    b1c0:	eaffffeb 	b	b174 <CScreenDevice::SetStatus(TScreenStatus const&)+0xb4>

0000b1c4 <CScreenDevice::Write(void const*, unsigned int)>:
    b1c4:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    b1c8:	e1a05000 	mov	r5, r0
    b1cc:	e5900080 	ldr	r0, [r0, #128]	; 0x80
    b1d0:	e1a04001 	mov	r4, r1
    b1d4:	e3500000 	cmp	r0, #0
    b1d8:	e1a07002 	mov	r7, r2
    b1dc:	1a000020 	bne	b264 <CScreenDevice::Write(void const*, unsigned int)+0xa0>
    b1e0:	e3a02001 	mov	r2, #1
    b1e4:	e5d53044 	ldrb	r3, [r5, #68]	; 0x44
    b1e8:	e5c52054 	strb	r2, [r5, #84]	; 0x54
    b1ec:	e3530000 	cmp	r3, #0
    b1f0:	1a000016 	bne	b250 <CScreenDevice::Write(void const*, unsigned int)+0x8c>
    b1f4:	e3570000 	cmp	r7, #0
    b1f8:	0a00000a 	beq	b228 <CScreenDevice::Write(void const*, unsigned int)+0x64>
    b1fc:	e0846007 	add	r6, r4, r7
    b200:	e0d410d1 	ldrsb	r1, [r4], #1
    b204:	e1a00005 	mov	r0, r5
    b208:	eb000017 	bl	b26c <CScreenDevice::Write(char)>
    b20c:	e1540006 	cmp	r4, r6
    b210:	1afffffa 	bne	b200 <CScreenDevice::Write(void const*, unsigned int)+0x3c>
    b214:	e5d53044 	ldrb	r3, [r5, #68]	; 0x44
    b218:	e3530000 	cmp	r3, #0
    b21c:	0a000001 	beq	b228 <CScreenDevice::Write(void const*, unsigned int)+0x64>
    b220:	e1a00005 	mov	r0, r5
    b224:	eb00032e 	bl	bee4 <CScreenDevice::InvertCursor() [clone .part.6]>
    b228:	e3a02000 	mov	r2, #0
    b22c:	e5953080 	ldr	r3, [r5, #128]	; 0x80
    b230:	e5c52054 	strb	r2, [r5, #84]	; 0x54
    b234:	e1530002 	cmp	r3, r2
    b238:	0a000000 	beq	b240 <CScreenDevice::Write(void const*, unsigned int)+0x7c>
    b23c:	eb001226 	bl	fadc <LeaveCritical>
    b240:	e3a03000 	mov	r3, #0
    b244:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
    b248:	e1a00007 	mov	r0, r7
    b24c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    b250:	e1a00005 	mov	r0, r5
    b254:	eb000322 	bl	bee4 <CScreenDevice::InvertCursor() [clone .part.6]>
    b258:	e3570000 	cmp	r7, #0
    b25c:	1affffe6 	bne	b1fc <CScreenDevice::Write(void const*, unsigned int)+0x38>
    b260:	eaffffeb 	b	b214 <CScreenDevice::Write(void const*, unsigned int)+0x50>
    b264:	eb0011ef 	bl	fa28 <EnterCritical>
    b268:	eaffffdc 	b	b1e0 <CScreenDevice::Write(void const*, unsigned int)+0x1c>

0000b26c <CScreenDevice::Write(char)>:
    b26c:	e92d4010 	push	{r4, lr}
    b270:	e5903030 	ldr	r3, [r0, #48]	; 0x30
    b274:	e24dd008 	sub	sp, sp, #8
    b278:	e1a04000 	mov	r4, r0
    b27c:	e3530007 	cmp	r3, #7
    b280:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
    b284:	ea000010 	b	b2cc <CScreenDevice::Write(char)+0x60>
    b288:	0000b318 	.word	0x0000b318
    b28c:	0000b378 	.word	0x0000b378
    b290:	0000b38c 	.word	0x0000b38c
    b294:	0000b3e4 	.word	0x0000b3e4
    b298:	0000b4c0 	.word	0x0000b4c0
    b29c:	0000b4e0 	.word	0x0000b4e0
    b2a0:	0000b500 	.word	0x0000b500
    b2a4:	0000b2dc 	.word	0x0000b2dc
    b2a8:	e5902040 	ldr	r2, [r0, #64]	; 0x40
    b2ac:	e5903034 	ldr	r3, [r0, #52]	; 0x34
    b2b0:	e1520003 	cmp	r2, r3
    b2b4:	9a000004 	bls	b2cc <CScreenDevice::Write(char)+0x60>
    b2b8:	e2800014 	add	r0, r0, #20
    b2bc:	eb0015b0 	bl	10984 <CCharGenerator::GetCharHeight() const>
    b2c0:	e5943040 	ldr	r3, [r4, #64]	; 0x40
    b2c4:	e0433000 	sub	r3, r3, r0
    b2c8:	e5843040 	str	r3, [r4, #64]	; 0x40
    b2cc:	e3a03000 	mov	r3, #0
    b2d0:	e5843030 	str	r3, [r4, #48]	; 0x30
    b2d4:	e28dd008 	add	sp, sp, #8
    b2d8:	e8bd8010 	pop	{r4, pc}
    b2dc:	e3510068 	cmp	r1, #104	; 0x68
    b2e0:	0a000095 	beq	b53c <CScreenDevice::Write(char)+0x2d0>
    b2e4:	e351006c 	cmp	r1, #108	; 0x6c
    b2e8:	0a000093 	beq	b53c <CScreenDevice::Write(char)+0x2d0>
    b2ec:	e2411030 	sub	r1, r1, #48	; 0x30
    b2f0:	e6ef3071 	uxtb	r3, r1
    b2f4:	e3530009 	cmp	r3, #9
    b2f8:	8afffff3 	bhi	b2cc <CScreenDevice::Write(char)+0x60>
    b2fc:	e594304c 	ldr	r3, [r4, #76]	; 0x4c
    b300:	e0833103 	add	r3, r3, r3, lsl #2
    b304:	e0811083 	add	r1, r1, r3, lsl #1
    b308:	e3510063 	cmp	r1, #99	; 0x63
    b30c:	e584104c 	str	r1, [r4, #76]	; 0x4c
    b310:	8affffed 	bhi	b2cc <CScreenDevice::Write(char)+0x60>
    b314:	eaffffee 	b	b2d4 <CScreenDevice::Write(char)+0x68>
    b318:	e2413008 	sub	r3, r1, #8
    b31c:	e3530013 	cmp	r3, #19
    b320:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
    b324:	ea0000cf 	b	b668 <CScreenDevice::Write(char)+0x3fc>
    b328:	0000b5a0 	.word	0x0000b5a0
    b32c:	0000b594 	.word	0x0000b594
    b330:	0000b580 	.word	0x0000b580
    b334:	0000b668 	.word	0x0000b668
    b338:	0000b668 	.word	0x0000b668
    b33c:	0000b574 	.word	0x0000b574
    b340:	0000b668 	.word	0x0000b668
    b344:	0000b668 	.word	0x0000b668
    b348:	0000b668 	.word	0x0000b668
    b34c:	0000b668 	.word	0x0000b668
    b350:	0000b668 	.word	0x0000b668
    b354:	0000b668 	.word	0x0000b668
    b358:	0000b668 	.word	0x0000b668
    b35c:	0000b668 	.word	0x0000b668
    b360:	0000b668 	.word	0x0000b668
    b364:	0000b668 	.word	0x0000b668
    b368:	0000b668 	.word	0x0000b668
    b36c:	0000b668 	.word	0x0000b668
    b370:	0000b668 	.word	0x0000b668
    b374:	0000b568 	.word	0x0000b568
    b378:	e351005b 	cmp	r1, #91	; 0x5b
    b37c:	03a03002 	moveq	r3, #2
    b380:	05803030 	streq	r3, [r0, #48]	; 0x30
    b384:	0affffd2 	beq	b2d4 <CScreenDevice::Write(char)+0x68>
    b388:	eaffffcf 	b	b2cc <CScreenDevice::Write(char)+0x60>
    b38c:	e241303f 	sub	r3, r1, #63	; 0x3f
    b390:	e3530011 	cmp	r3, #17
    b394:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
    b398:	ea0000db 	b	b70c <CScreenDevice::Write(char)+0x4a0>
    b39c:	0000b6c0 	.word	0x0000b6c0
    b3a0:	0000b70c 	.word	0x0000b70c
    b3a4:	0000b2a8 	.word	0x0000b2a8
    b3a8:	0000b6ec 	.word	0x0000b6ec
    b3ac:	0000b6dc 	.word	0x0000b6dc
    b3b0:	0000b6cc 	.word	0x0000b6cc
    b3b4:	0000b70c 	.word	0x0000b70c
    b3b8:	0000b70c 	.word	0x0000b70c
    b3bc:	0000b70c 	.word	0x0000b70c
    b3c0:	0000b6a8 	.word	0x0000b6a8
    b3c4:	0000b70c 	.word	0x0000b70c
    b3c8:	0000b698 	.word	0x0000b698
    b3cc:	0000b6fc 	.word	0x0000b6fc
    b3d0:	0000b2cc 	.word	0x0000b2cc
    b3d4:	0000b2cc 	.word	0x0000b2cc
    b3d8:	0000b70c 	.word	0x0000b70c
    b3dc:	0000b70c 	.word	0x0000b70c
    b3e0:	0000b2cc 	.word	0x0000b2cc
    b3e4:	e241303b 	sub	r3, r1, #59	; 0x3b
    b3e8:	e3530032 	cmp	r3, #50	; 0x32
    b3ec:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
    b3f0:	eaffffbd 	b	b2ec <CScreenDevice::Write(char)+0x80>
    b3f4:	0000b65c 	.word	0x0000b65c
    b3f8:	0000b2ec 	.word	0x0000b2ec
    b3fc:	0000b2ec 	.word	0x0000b2ec
    b400:	0000b2ec 	.word	0x0000b2ec
    b404:	0000b2ec 	.word	0x0000b2ec
    b408:	0000b2ec 	.word	0x0000b2ec
    b40c:	0000b2ec 	.word	0x0000b2ec
    b410:	0000b2ec 	.word	0x0000b2ec
    b414:	0000b2ec 	.word	0x0000b2ec
    b418:	0000b2ec 	.word	0x0000b2ec
    b41c:	0000b2ec 	.word	0x0000b2ec
    b420:	0000b2ec 	.word	0x0000b2ec
    b424:	0000b2ec 	.word	0x0000b2ec
    b428:	0000b2ec 	.word	0x0000b2ec
    b42c:	0000b2ec 	.word	0x0000b2ec
    b430:	0000b2ec 	.word	0x0000b2ec
    b434:	0000b2ec 	.word	0x0000b2ec
    b438:	0000b2cc 	.word	0x0000b2cc
    b43c:	0000b2cc 	.word	0x0000b2cc
    b440:	0000b2ec 	.word	0x0000b2ec
    b444:	0000b2ec 	.word	0x0000b2ec
    b448:	0000b2cc 	.word	0x0000b2cc
    b44c:	0000b2ec 	.word	0x0000b2ec
    b450:	0000b2ec 	.word	0x0000b2ec
    b454:	0000b2ec 	.word	0x0000b2ec
    b458:	0000b2ec 	.word	0x0000b2ec
    b45c:	0000b2ec 	.word	0x0000b2ec
    b460:	0000b2ec 	.word	0x0000b2ec
    b464:	0000b2ec 	.word	0x0000b2ec
    b468:	0000b5ac 	.word	0x0000b5ac
    b46c:	0000b2ec 	.word	0x0000b2ec
    b470:	0000b2ec 	.word	0x0000b2ec
    b474:	0000b2ec 	.word	0x0000b2ec
    b478:	0000b2ec 	.word	0x0000b2ec
    b47c:	0000b2ec 	.word	0x0000b2ec
    b480:	0000b2ec 	.word	0x0000b2ec
    b484:	0000b2ec 	.word	0x0000b2ec
    b488:	0000b2ec 	.word	0x0000b2ec
    b48c:	0000b2ec 	.word	0x0000b2ec
    b490:	0000b2ec 	.word	0x0000b2ec
    b494:	0000b2ec 	.word	0x0000b2ec
    b498:	0000b2ec 	.word	0x0000b2ec
    b49c:	0000b2ec 	.word	0x0000b2ec
    b4a0:	0000b2ec 	.word	0x0000b2ec
    b4a4:	0000b2ec 	.word	0x0000b2ec
    b4a8:	0000b5c0 	.word	0x0000b5c0
    b4ac:	0000b2ec 	.word	0x0000b2ec
    b4b0:	0000b2ec 	.word	0x0000b2ec
    b4b4:	0000b2ec 	.word	0x0000b2ec
    b4b8:	0000b5c0 	.word	0x0000b5c0
    b4bc:	0000b5dc 	.word	0x0000b5dc
    b4c0:	e2411030 	sub	r1, r1, #48	; 0x30
    b4c4:	e6ef3071 	uxtb	r3, r1
    b4c8:	e3530009 	cmp	r3, #9
    b4cc:	8affff7e 	bhi	b2cc <CScreenDevice::Write(char)+0x60>
    b4d0:	e3a03007 	mov	r3, #7
    b4d4:	e580104c 	str	r1, [r0, #76]	; 0x4c
    b4d8:	e5803030 	str	r3, [r0, #48]	; 0x30
    b4dc:	eaffff7c 	b	b2d4 <CScreenDevice::Write(char)+0x68>
    b4e0:	e2411030 	sub	r1, r1, #48	; 0x30
    b4e4:	e6ef3071 	uxtb	r3, r1
    b4e8:	e3530009 	cmp	r3, #9
    b4ec:	8affff76 	bhi	b2cc <CScreenDevice::Write(char)+0x60>
    b4f0:	e3a03006 	mov	r3, #6
    b4f4:	e5801050 	str	r1, [r0, #80]	; 0x50
    b4f8:	e5803030 	str	r3, [r0, #48]	; 0x30
    b4fc:	eaffff74 	b	b2d4 <CScreenDevice::Write(char)+0x68>
    b500:	e3510048 	cmp	r1, #72	; 0x48
    b504:	0a000091 	beq	b750 <CScreenDevice::Write(char)+0x4e4>
    b508:	e3510072 	cmp	r1, #114	; 0x72
    b50c:	0a000011 	beq	b558 <CScreenDevice::Write(char)+0x2ec>
    b510:	e2411030 	sub	r1, r1, #48	; 0x30
    b514:	e6ef3071 	uxtb	r3, r1
    b518:	e3530009 	cmp	r3, #9
    b51c:	8affff6a 	bhi	b2cc <CScreenDevice::Write(char)+0x60>
    b520:	e5903050 	ldr	r3, [r0, #80]	; 0x50
    b524:	e0833103 	add	r3, r3, r3, lsl #2
    b528:	e0811083 	add	r1, r1, r3, lsl #1
    b52c:	e35100c7 	cmp	r1, #199	; 0xc7
    b530:	e5801050 	str	r1, [r0, #80]	; 0x50
    b534:	8affff64 	bhi	b2cc <CScreenDevice::Write(char)+0x60>
    b538:	eaffff65 	b	b2d4 <CScreenDevice::Write(char)+0x68>
    b53c:	e594304c 	ldr	r3, [r4, #76]	; 0x4c
    b540:	e3530019 	cmp	r3, #25
    b544:	02411068 	subeq	r1, r1, #104	; 0x68
    b548:	016f1f11 	clzeq	r1, r1
    b54c:	01a012a1 	lsreq	r1, r1, #5
    b550:	05c41044 	strbeq	r1, [r4, #68]	; 0x44
    b554:	eaffff5c 	b	b2cc <CScreenDevice::Write(char)+0x60>
    b558:	e5902050 	ldr	r2, [r0, #80]	; 0x50
    b55c:	e590104c 	ldr	r1, [r0, #76]	; 0x4c
    b560:	eb000136 	bl	ba40 <CScreenDevice::SetScrollRegion(unsigned int, unsigned int)>
    b564:	eaffff58 	b	b2cc <CScreenDevice::Write(char)+0x60>
    b568:	e3a03001 	mov	r3, #1
    b56c:	e5803030 	str	r3, [r0, #48]	; 0x30
    b570:	eaffff57 	b	b2d4 <CScreenDevice::Write(char)+0x68>
    b574:	e3a03000 	mov	r3, #0
    b578:	e580303c 	str	r3, [r0, #60]	; 0x3c
    b57c:	eaffff54 	b	b2d4 <CScreenDevice::Write(char)+0x68>
    b580:	e3a03000 	mov	r3, #0
    b584:	e580303c 	str	r3, [r0, #60]	; 0x3c
    b588:	e28dd008 	add	sp, sp, #8
    b58c:	e8bd4010 	pop	{r4, lr}
    b590:	ea0000a9 	b	b83c <CScreenDevice::CursorDown()>
    b594:	e28dd008 	add	sp, sp, #8
    b598:	e8bd4010 	pop	{r4, lr}
    b59c:	ea00016f 	b	bb60 <CScreenDevice::Tabulator()>
    b5a0:	e28dd008 	add	sp, sp, #8
    b5a4:	e8bd4010 	pop	{r4, lr}
    b5a8:	ea0000ba 	b	b898 <CScreenDevice::CursorLeft()>
    b5ac:	e590104c 	ldr	r1, [r0, #76]	; 0x4c
    b5b0:	e3510000 	cmp	r1, #0
    b5b4:	0affff44 	beq	b2cc <CScreenDevice::Write(char)+0x60>
    b5b8:	eb000231 	bl	be84 <CScreenDevice::EraseChars(unsigned int) [clone .part.4]>
    b5bc:	eaffff42 	b	b2cc <CScreenDevice::Write(char)+0x60>
    b5c0:	e590304c 	ldr	r3, [r0, #76]	; 0x4c
    b5c4:	e3530004 	cmp	r3, #4
    b5c8:	02411068 	subeq	r1, r1, #104	; 0x68
    b5cc:	016f1f11 	clzeq	r1, r1
    b5d0:	01a012a1 	lsreq	r1, r1, #5
    b5d4:	05c01048 	strbeq	r1, [r0, #72]	; 0x48
    b5d8:	eaffff3b 	b	b2cc <CScreenDevice::Write(char)+0x60>
    b5dc:	e590304c 	ldr	r3, [r0, #76]	; 0x4c
    b5e0:	e353001b 	cmp	r3, #27
    b5e4:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
    b5e8:	eaffff37 	b	b2cc <CScreenDevice::Write(char)+0x60>
    b5ec:	0000b744 	.word	0x0000b744
    b5f0:	0000b738 	.word	0x0000b738
    b5f4:	0000b72c 	.word	0x0000b72c
    b5f8:	0000b2cc 	.word	0x0000b2cc
    b5fc:	0000b2cc 	.word	0x0000b2cc
    b600:	0000b2cc 	.word	0x0000b2cc
    b604:	0000b2cc 	.word	0x0000b2cc
    b608:	0000b2cc 	.word	0x0000b2cc
    b60c:	0000b2cc 	.word	0x0000b2cc
    b610:	0000b2cc 	.word	0x0000b2cc
    b614:	0000b2cc 	.word	0x0000b2cc
    b618:	0000b2cc 	.word	0x0000b2cc
    b61c:	0000b2cc 	.word	0x0000b2cc
    b620:	0000b2cc 	.word	0x0000b2cc
    b624:	0000b2cc 	.word	0x0000b2cc
    b628:	0000b2cc 	.word	0x0000b2cc
    b62c:	0000b2cc 	.word	0x0000b2cc
    b630:	0000b2cc 	.word	0x0000b2cc
    b634:	0000b2cc 	.word	0x0000b2cc
    b638:	0000b2cc 	.word	0x0000b2cc
    b63c:	0000b2cc 	.word	0x0000b2cc
    b640:	0000b2cc 	.word	0x0000b2cc
    b644:	0000b2cc 	.word	0x0000b2cc
    b648:	0000b2cc 	.word	0x0000b2cc
    b64c:	0000b2cc 	.word	0x0000b2cc
    b650:	0000b2cc 	.word	0x0000b2cc
    b654:	0000b2cc 	.word	0x0000b2cc
    b658:	0000b744 	.word	0x0000b744
    b65c:	e3a03005 	mov	r3, #5
    b660:	e5803030 	str	r3, [r0, #48]	; 0x30
    b664:	eaffff1a 	b	b2d4 <CScreenDevice::Write(char)+0x68>
    b668:	e6ef3071 	uxtb	r3, r1
    b66c:	e353001f 	cmp	r3, #31
    b670:	9affff17 	bls	b2d4 <CScreenDevice::Write(char)+0x68>
    b674:	e1c023dc 	ldrd	r2, [r0, #60]	; 0x3c
    b678:	e1d004b6 	ldrh	r0, [r0, #70]	; 0x46
    b67c:	e58d0000 	str	r0, [sp]
    b680:	e1a00004 	mov	r0, r4
    b684:	eb000178 	bl	bc6c <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)>
    b688:	e1a00004 	mov	r0, r4
    b68c:	e28dd008 	add	sp, sp, #8
    b690:	e8bd4010 	pop	{r4, lr}
    b694:	ea0000b2 	b	b964 <CScreenDevice::CursorRight()>
    b698:	eb000035 	bl	b774 <CScreenDevice::ClearDisplayEnd()>
    b69c:	e3a03000 	mov	r3, #0
    b6a0:	e5843030 	str	r3, [r4, #48]	; 0x30
    b6a4:	eaffff0a 	b	b2d4 <CScreenDevice::Write(char)+0x68>
    b6a8:	e3a03000 	mov	r3, #0
    b6ac:	e5902034 	ldr	r2, [r0, #52]	; 0x34
    b6b0:	e580303c 	str	r3, [r0, #60]	; 0x3c
    b6b4:	e5803030 	str	r3, [r0, #48]	; 0x30
    b6b8:	e5802040 	str	r2, [r0, #64]	; 0x40
    b6bc:	eaffff04 	b	b2d4 <CScreenDevice::Write(char)+0x68>
    b6c0:	e3a03004 	mov	r3, #4
    b6c4:	e5803030 	str	r3, [r0, #48]	; 0x30
    b6c8:	eaffff01 	b	b2d4 <CScreenDevice::Write(char)+0x68>
    b6cc:	eb000071 	bl	b898 <CScreenDevice::CursorLeft()>
    b6d0:	e3a03000 	mov	r3, #0
    b6d4:	e5843030 	str	r3, [r4, #48]	; 0x30
    b6d8:	eafffefd 	b	b2d4 <CScreenDevice::Write(char)+0x68>
    b6dc:	eb0000a0 	bl	b964 <CScreenDevice::CursorRight()>
    b6e0:	e3a03000 	mov	r3, #0
    b6e4:	e5843030 	str	r3, [r4, #48]	; 0x30
    b6e8:	eafffef9 	b	b2d4 <CScreenDevice::Write(char)+0x68>
    b6ec:	eb000052 	bl	b83c <CScreenDevice::CursorDown()>
    b6f0:	e3a03000 	mov	r3, #0
    b6f4:	e5843030 	str	r3, [r4, #48]	; 0x30
    b6f8:	eafffef5 	b	b2d4 <CScreenDevice::Write(char)+0x68>
    b6fc:	eb00003c 	bl	b7f4 <CScreenDevice::ClearLineEnd()>
    b700:	e3a03000 	mov	r3, #0
    b704:	e5843030 	str	r3, [r4, #48]	; 0x30
    b708:	eafffef1 	b	b2d4 <CScreenDevice::Write(char)+0x68>
    b70c:	e2411030 	sub	r1, r1, #48	; 0x30
    b710:	e6ef3071 	uxtb	r3, r1
    b714:	e3530009 	cmp	r3, #9
    b718:	8afffeeb 	bhi	b2cc <CScreenDevice::Write(char)+0x60>
    b71c:	e3a03003 	mov	r3, #3
    b720:	e580104c 	str	r1, [r0, #76]	; 0x4c
    b724:	e5803030 	str	r3, [r0, #48]	; 0x30
    b728:	eafffee9 	b	b2d4 <CScreenDevice::Write(char)+0x68>
    b72c:	e3a0301f 	mov	r3, #31
    b730:	e1c034b6 	strh	r3, [r0, #70]	; 0x46
    b734:	eafffee4 	b	b2cc <CScreenDevice::Write(char)+0x60>
    b738:	e3a03b3e 	mov	r3, #63488	; 0xf800
    b73c:	e1c034b6 	strh	r3, [r0, #70]	; 0x46
    b740:	eafffee1 	b	b2cc <CScreenDevice::Write(char)+0x60>
    b744:	e3e03020 	mvn	r3, #32
    b748:	e1c034b6 	strh	r3, [r0, #70]	; 0x46
    b74c:	eafffede 	b	b2cc <CScreenDevice::Write(char)+0x60>
    b750:	e5902050 	ldr	r2, [r0, #80]	; 0x50
    b754:	e590104c 	ldr	r1, [r0, #76]	; 0x4c
    b758:	eb000069 	bl	b904 <CScreenDevice::CursorMove(unsigned int, unsigned int)>
    b75c:	e3a03000 	mov	r3, #0
    b760:	e5843030 	str	r3, [r4, #48]	; 0x30
    b764:	eafffeda 	b	b2d4 <CScreenDevice::Write(char)+0x68>

0000b768 <CScreenDevice::CarriageReturn()>:
    b768:	e3a03000 	mov	r3, #0
    b76c:	e580303c 	str	r3, [r0, #60]	; 0x3c
    b770:	e12fff1e 	bx	lr

0000b774 <CScreenDevice::ClearDisplayEnd()>:
    b774:	e92d4070 	push	{r4, r5, r6, lr}
    b778:	e5903024 	ldr	r3, [r0, #36]	; 0x24
    b77c:	e590503c 	ldr	r5, [r0, #60]	; 0x3c
    b780:	e1a04000 	mov	r4, r0
    b784:	e1550003 	cmp	r5, r3
    b788:	e2806014 	add	r6, r0, #20
    b78c:	2a000009 	bcs	b7b8 <CScreenDevice::ClearDisplayEnd()+0x44>
    b790:	e1a01005 	mov	r1, r5
    b794:	e5942040 	ldr	r2, [r4, #64]	; 0x40
    b798:	e1a00004 	mov	r0, r4
    b79c:	eb000162 	bl	bd2c <CScreenDevice::EraseChar(unsigned int, unsigned int)>
    b7a0:	e1a00006 	mov	r0, r6
    b7a4:	eb001474 	bl	1097c <CCharGenerator::GetCharWidth() const>
    b7a8:	e5943024 	ldr	r3, [r4, #36]	; 0x24
    b7ac:	e0855000 	add	r5, r5, r0
    b7b0:	e1530005 	cmp	r3, r5
    b7b4:	8afffff5 	bhi	b790 <CScreenDevice::ClearDisplayEnd()+0x1c>
    b7b8:	e1a00006 	mov	r0, r6
    b7bc:	e5945040 	ldr	r5, [r4, #64]	; 0x40
    b7c0:	eb00146f 	bl	10984 <CCharGenerator::GetCharHeight() const>
    b7c4:	e5943020 	ldr	r3, [r4, #32]
    b7c8:	e0850000 	add	r0, r5, r0
    b7cc:	e0000093 	mul	r0, r3, r0
    b7d0:	e594201c 	ldr	r2, [r4, #28]
    b7d4:	e5943018 	ldr	r3, [r4, #24]
    b7d8:	e07020a2 	rsbs	r2, r0, r2, lsr #1
    b7dc:	08bd8070 	popeq	{r4, r5, r6, pc}
    b7e0:	e1a02082 	lsl	r2, r2, #1
    b7e4:	e0830080 	add	r0, r3, r0, lsl #1
    b7e8:	e3a01000 	mov	r1, #0
    b7ec:	e8bd4070 	pop	{r4, r5, r6, lr}
    b7f0:	ea000d09 	b	ec1c <memset>

0000b7f4 <CScreenDevice::ClearLineEnd()>:
    b7f4:	e92d4070 	push	{r4, r5, r6, lr}
    b7f8:	e5903024 	ldr	r3, [r0, #36]	; 0x24
    b7fc:	e590403c 	ldr	r4, [r0, #60]	; 0x3c
    b800:	e1540003 	cmp	r4, r3
    b804:	28bd8070 	popcs	{r4, r5, r6, pc}
    b808:	e1a05000 	mov	r5, r0
    b80c:	e2806014 	add	r6, r0, #20
    b810:	e1a01004 	mov	r1, r4
    b814:	e5952040 	ldr	r2, [r5, #64]	; 0x40
    b818:	e1a00005 	mov	r0, r5
    b81c:	eb000142 	bl	bd2c <CScreenDevice::EraseChar(unsigned int, unsigned int)>
    b820:	e1a00006 	mov	r0, r6
    b824:	eb001454 	bl	1097c <CCharGenerator::GetCharWidth() const>
    b828:	e5953024 	ldr	r3, [r5, #36]	; 0x24
    b82c:	e0844000 	add	r4, r4, r0
    b830:	e1530004 	cmp	r3, r4
    b834:	8afffff5 	bhi	b810 <CScreenDevice::ClearLineEnd()+0x1c>
    b838:	e8bd8070 	pop	{r4, r5, r6, pc}

0000b83c <CScreenDevice::CursorDown()>:
    b83c:	e92d4070 	push	{r4, r5, r6, lr}
    b840:	e1a04000 	mov	r4, r0
    b844:	e2805014 	add	r5, r0, #20
    b848:	e1a00005 	mov	r0, r5
    b84c:	eb00144c 	bl	10984 <CCharGenerator::GetCharHeight() const>
    b850:	e5943040 	ldr	r3, [r4, #64]	; 0x40
    b854:	e5942038 	ldr	r2, [r4, #56]	; 0x38
    b858:	e0800003 	add	r0, r0, r3
    b85c:	e1500002 	cmp	r0, r2
    b860:	e5840040 	str	r0, [r4, #64]	; 0x40
    b864:	38bd8070 	popcc	{r4, r5, r6, pc}
    b868:	e1a00004 	mov	r0, r4
    b86c:	eb0000ce 	bl	bbac <CScreenDevice::Scroll()>
    b870:	e1a00005 	mov	r0, r5
    b874:	eb001442 	bl	10984 <CCharGenerator::GetCharHeight() const>
    b878:	e5943040 	ldr	r3, [r4, #64]	; 0x40
    b87c:	e0430000 	sub	r0, r3, r0
    b880:	e5840040 	str	r0, [r4, #64]	; 0x40
    b884:	e8bd8070 	pop	{r4, r5, r6, pc}

0000b888 <CScreenDevice::CursorHome()>:
    b888:	e3a02000 	mov	r2, #0
    b88c:	e5903034 	ldr	r3, [r0, #52]	; 0x34
    b890:	e1c023fc 	strd	r2, [r0, #60]	; 0x3c
    b894:	e12fff1e 	bx	lr

0000b898 <CScreenDevice::CursorLeft()>:
    b898:	e590303c 	ldr	r3, [r0, #60]	; 0x3c
    b89c:	e92d4070 	push	{r4, r5, r6, lr}
    b8a0:	e3530000 	cmp	r3, #0
    b8a4:	e1a04000 	mov	r4, r0
    b8a8:	1a00000f 	bne	b8ec <CScreenDevice::CursorLeft()+0x54>
    b8ac:	e5902040 	ldr	r2, [r0, #64]	; 0x40
    b8b0:	e5903034 	ldr	r3, [r0, #52]	; 0x34
    b8b4:	e1520003 	cmp	r2, r3
    b8b8:	98bd8070 	popls	{r4, r5, r6, pc}
    b8bc:	e2806014 	add	r6, r0, #20
    b8c0:	e1a00006 	mov	r0, r6
    b8c4:	e5945024 	ldr	r5, [r4, #36]	; 0x24
    b8c8:	eb00142b 	bl	1097c <CCharGenerator::GetCharWidth() const>
    b8cc:	e0450000 	sub	r0, r5, r0
    b8d0:	e584003c 	str	r0, [r4, #60]	; 0x3c
    b8d4:	e1a00006 	mov	r0, r6
    b8d8:	eb001429 	bl	10984 <CCharGenerator::GetCharHeight() const>
    b8dc:	e5943040 	ldr	r3, [r4, #64]	; 0x40
    b8e0:	e0430000 	sub	r0, r3, r0
    b8e4:	e5840040 	str	r0, [r4, #64]	; 0x40
    b8e8:	e8bd8070 	pop	{r4, r5, r6, pc}
    b8ec:	e2800014 	add	r0, r0, #20
    b8f0:	eb001421 	bl	1097c <CCharGenerator::GetCharWidth() const>
    b8f4:	e594303c 	ldr	r3, [r4, #60]	; 0x3c
    b8f8:	e0430000 	sub	r0, r3, r0
    b8fc:	e584003c 	str	r0, [r4, #60]	; 0x3c
    b900:	e8bd8070 	pop	{r4, r5, r6, pc}

0000b904 <CScreenDevice::CursorMove(unsigned int, unsigned int)>:
    b904:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    b908:	e2806014 	add	r6, r0, #20
    b90c:	e1a04002 	mov	r4, r2
    b910:	e1a05000 	mov	r5, r0
    b914:	e1a00006 	mov	r0, r6
    b918:	e1a07001 	mov	r7, r1
    b91c:	eb001416 	bl	1097c <CCharGenerator::GetCharWidth() const>
    b920:	e2444001 	sub	r4, r4, #1
    b924:	e0040490 	mul	r4, r0, r4
    b928:	e1a00006 	mov	r0, r6
    b92c:	eb001414 	bl	10984 <CCharGenerator::GetCharHeight() const>
    b930:	e5953024 	ldr	r3, [r5, #36]	; 0x24
    b934:	e1530004 	cmp	r3, r4
    b938:	98bd81f0 	popls	{r4, r5, r6, r7, r8, pc}
    b93c:	e2477001 	sub	r7, r7, #1
    b940:	e0000790 	mul	r0, r0, r7
    b944:	e5953034 	ldr	r3, [r5, #52]	; 0x34
    b948:	e1530000 	cmp	r3, r0
    b94c:	88bd81f0 	pophi	{r4, r5, r6, r7, r8, pc}
    b950:	e5953038 	ldr	r3, [r5, #56]	; 0x38
    b954:	e1530000 	cmp	r3, r0
    b958:	8585403c 	strhi	r4, [r5, #60]	; 0x3c
    b95c:	85850040 	strhi	r0, [r5, #64]	; 0x40
    b960:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

0000b964 <CScreenDevice::CursorRight()>:
    b964:	e92d4010 	push	{r4, lr}
    b968:	e1a04000 	mov	r4, r0
    b96c:	e2800014 	add	r0, r0, #20
    b970:	eb001401 	bl	1097c <CCharGenerator::GetCharWidth() const>
    b974:	e594303c 	ldr	r3, [r4, #60]	; 0x3c
    b978:	e5942024 	ldr	r2, [r4, #36]	; 0x24
    b97c:	e0800003 	add	r0, r0, r3
    b980:	e1500002 	cmp	r0, r2
    b984:	e584003c 	str	r0, [r4, #60]	; 0x3c
    b988:	38bd8010 	popcc	{r4, pc}
    b98c:	e3a03000 	mov	r3, #0
    b990:	e1a00004 	mov	r0, r4
    b994:	e584303c 	str	r3, [r4, #60]	; 0x3c
    b998:	e8bd4010 	pop	{r4, lr}
    b99c:	eaffffa6 	b	b83c <CScreenDevice::CursorDown()>

0000b9a0 <CScreenDevice::CursorUp()>:
    b9a0:	e5902040 	ldr	r2, [r0, #64]	; 0x40
    b9a4:	e5903034 	ldr	r3, [r0, #52]	; 0x34
    b9a8:	e1520003 	cmp	r2, r3
    b9ac:	912fff1e 	bxls	lr
    b9b0:	e92d4010 	push	{r4, lr}
    b9b4:	e1a04000 	mov	r4, r0
    b9b8:	e2800014 	add	r0, r0, #20
    b9bc:	eb0013f0 	bl	10984 <CCharGenerator::GetCharHeight() const>
    b9c0:	e5943040 	ldr	r3, [r4, #64]	; 0x40
    b9c4:	e0430000 	sub	r0, r3, r0
    b9c8:	e5840040 	str	r0, [r4, #64]	; 0x40
    b9cc:	e8bd8010 	pop	{r4, pc}

0000b9d0 <CScreenDevice::DeleteChars(unsigned int)>:
    b9d0:	e12fff1e 	bx	lr

0000b9d4 <CScreenDevice::DeleteLines(unsigned int)>:
    b9d4:	e12fff1e 	bx	lr

0000b9d8 <CScreenDevice::DisplayChar(char)>:
    b9d8:	e6ef3071 	uxtb	r3, r1
    b9dc:	e353001f 	cmp	r3, #31
    b9e0:	912fff1e 	bxls	lr
    b9e4:	e92d4010 	push	{r4, lr}
    b9e8:	e1c023dc 	ldrd	r2, [r0, #60]	; 0x3c
    b9ec:	e1a04000 	mov	r4, r0
    b9f0:	e1d0c4b6 	ldrh	ip, [r0, #70]	; 0x46
    b9f4:	e24dd008 	sub	sp, sp, #8
    b9f8:	e58dc000 	str	ip, [sp]
    b9fc:	eb00009a 	bl	bc6c <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)>
    ba00:	e1a00004 	mov	r0, r4
    ba04:	e28dd008 	add	sp, sp, #8
    ba08:	e8bd4010 	pop	{r4, lr}
    ba0c:	eaffffd4 	b	b964 <CScreenDevice::CursorRight()>

0000ba10 <CScreenDevice::EraseChars(unsigned int)>:
    ba10:	e3510000 	cmp	r1, #0
    ba14:	012fff1e 	bxeq	lr
    ba18:	ea000119 	b	be84 <CScreenDevice::EraseChars(unsigned int) [clone .part.4]>

0000ba1c <CScreenDevice::InsertLines(unsigned int)>:
    ba1c:	e12fff1e 	bx	lr

0000ba20 <CScreenDevice::InsertMode(bool)>:
    ba20:	e5c01048 	strb	r1, [r0, #72]	; 0x48
    ba24:	e12fff1e 	bx	lr

0000ba28 <CScreenDevice::NewLine()>:
    ba28:	e3a02000 	mov	r2, #0
    ba2c:	e580203c 	str	r2, [r0, #60]	; 0x3c
    ba30:	eaffff81 	b	b83c <CScreenDevice::CursorDown()>

0000ba34 <CScreenDevice::ReverseScroll()>:
    ba34:	e12fff1e 	bx	lr

0000ba38 <CScreenDevice::SetCursorMode(bool)>:
    ba38:	e5c01044 	strb	r1, [r0, #68]	; 0x44
    ba3c:	e12fff1e 	bx	lr

0000ba40 <CScreenDevice::SetScrollRegion(unsigned int, unsigned int)>:
    ba40:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    ba44:	e2807014 	add	r7, r0, #20
    ba48:	e1a05000 	mov	r5, r0
    ba4c:	e1a04001 	mov	r4, r1
    ba50:	e1a00007 	mov	r0, r7
    ba54:	e1a06002 	mov	r6, r2
    ba58:	eb0013c9 	bl	10984 <CCharGenerator::GetCharHeight() const>
    ba5c:	e2444001 	sub	r4, r4, #1
    ba60:	e0040490 	mul	r4, r0, r4
    ba64:	e1a00007 	mov	r0, r7
    ba68:	eb0013c5 	bl	10984 <CCharGenerator::GetCharHeight() const>
    ba6c:	e0000096 	mul	r0, r6, r0
    ba70:	e595202c 	ldr	r2, [r5, #44]	; 0x2c
    ba74:	e1520004 	cmp	r2, r4
    ba78:	93a03000 	movls	r3, #0
    ba7c:	83a03001 	movhi	r3, #1
    ba80:	e3500000 	cmp	r0, #0
    ba84:	03a03000 	moveq	r3, #0
    ba88:	e1520000 	cmp	r2, r0
    ba8c:	33a03000 	movcc	r3, #0
    ba90:	22033001 	andcs	r3, r3, #1
    ba94:	e1540000 	cmp	r4, r0
    ba98:	23a03000 	movcs	r3, #0
    ba9c:	32033001 	andcc	r3, r3, #1
    baa0:	e3530000 	cmp	r3, #0
    baa4:	e3a03000 	mov	r3, #0
    baa8:	05954034 	ldreq	r4, [r5, #52]	; 0x34
    baac:	15854034 	strne	r4, [r5, #52]	; 0x34
    bab0:	15850038 	strne	r0, [r5, #56]	; 0x38
    bab4:	e5854040 	str	r4, [r5, #64]	; 0x40
    bab8:	e585303c 	str	r3, [r5, #60]	; 0x3c
    babc:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

0000bac0 <CScreenDevice::SetStandoutMode(unsigned int)>:
    bac0:	e351001b 	cmp	r1, #27
    bac4:	979ff101 	ldrls	pc, [pc, r1, lsl #2]
    bac8:	ea00001d 	b	bb44 <CScreenDevice::SetStandoutMode(unsigned int)+0x84>
    bacc:	0000bb54 	.word	0x0000bb54
    bad0:	0000bb48 	.word	0x0000bb48
    bad4:	0000bb3c 	.word	0x0000bb3c
    bad8:	0000bb44 	.word	0x0000bb44
    badc:	0000bb44 	.word	0x0000bb44
    bae0:	0000bb44 	.word	0x0000bb44
    bae4:	0000bb44 	.word	0x0000bb44
    bae8:	0000bb44 	.word	0x0000bb44
    baec:	0000bb44 	.word	0x0000bb44
    baf0:	0000bb44 	.word	0x0000bb44
    baf4:	0000bb44 	.word	0x0000bb44
    baf8:	0000bb44 	.word	0x0000bb44
    bafc:	0000bb44 	.word	0x0000bb44
    bb00:	0000bb44 	.word	0x0000bb44
    bb04:	0000bb44 	.word	0x0000bb44
    bb08:	0000bb44 	.word	0x0000bb44
    bb0c:	0000bb44 	.word	0x0000bb44
    bb10:	0000bb44 	.word	0x0000bb44
    bb14:	0000bb44 	.word	0x0000bb44
    bb18:	0000bb44 	.word	0x0000bb44
    bb1c:	0000bb44 	.word	0x0000bb44
    bb20:	0000bb44 	.word	0x0000bb44
    bb24:	0000bb44 	.word	0x0000bb44
    bb28:	0000bb44 	.word	0x0000bb44
    bb2c:	0000bb44 	.word	0x0000bb44
    bb30:	0000bb44 	.word	0x0000bb44
    bb34:	0000bb44 	.word	0x0000bb44
    bb38:	0000bb54 	.word	0x0000bb54
    bb3c:	e3a0301f 	mov	r3, #31
    bb40:	e1c034b6 	strh	r3, [r0, #70]	; 0x46
    bb44:	e12fff1e 	bx	lr
    bb48:	e3a03b3e 	mov	r3, #63488	; 0xf800
    bb4c:	e1c034b6 	strh	r3, [r0, #70]	; 0x46
    bb50:	e12fff1e 	bx	lr
    bb54:	e3e03020 	mvn	r3, #32
    bb58:	e1c034b6 	strh	r3, [r0, #70]	; 0x46
    bb5c:	e12fff1e 	bx	lr

0000bb60 <CScreenDevice::Tabulator()>:
    bb60:	e92d4070 	push	{r4, r5, r6, lr}
    bb64:	e1a05000 	mov	r5, r0
    bb68:	e2800014 	add	r0, r0, #20
    bb6c:	eb001382 	bl	1097c <CCharGenerator::GetCharWidth() const>
    bb70:	e595303c 	ldr	r3, [r5, #60]	; 0x3c
    bb74:	e1a04180 	lsl	r4, r0, #3
    bb78:	e0840003 	add	r0, r4, r3
    bb7c:	e1a01004 	mov	r1, r4
    bb80:	eb001d05 	bl	12f9c <__udivsi3>
    bb84:	e0000094 	mul	r0, r4, r0
    bb88:	e5953024 	ldr	r3, [r5, #36]	; 0x24
    bb8c:	e585003c 	str	r0, [r5, #60]	; 0x3c
    bb90:	e1500003 	cmp	r0, r3
    bb94:	38bd8070 	popcc	{r4, r5, r6, pc}
    bb98:	e3a03000 	mov	r3, #0
    bb9c:	e1a00005 	mov	r0, r5
    bba0:	e585303c 	str	r3, [r5, #60]	; 0x3c
    bba4:	e8bd4070 	pop	{r4, r5, r6, lr}
    bba8:	eaffff23 	b	b83c <CScreenDevice::CursorDown()>

0000bbac <CScreenDevice::Scroll()>:
    bbac:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    bbb0:	e1a05000 	mov	r5, r0
    bbb4:	e24dd008 	sub	sp, sp, #8
    bbb8:	e2800014 	add	r0, r0, #20
    bbbc:	eb001370 	bl	10984 <CCharGenerator::GetCharHeight() const>
    bbc0:	e1a06000 	mov	r6, r0
    bbc4:	e5951034 	ldr	r1, [r5, #52]	; 0x34
    bbc8:	e5954038 	ldr	r4, [r5, #56]	; 0x38
    bbcc:	e5950020 	ldr	r0, [r5, #32]
    bbd0:	e0444001 	sub	r4, r4, r1
    bbd4:	e1a03080 	lsl	r3, r0, #1
    bbd8:	e0444006 	sub	r4, r4, r6
    bbdc:	e0040493 	mul	r4, r3, r4
    bbe0:	e0000190 	mul	r0, r0, r1
    bbe4:	e5952018 	ldr	r2, [r5, #24]
    bbe8:	e3540000 	cmp	r4, #0
    bbec:	e0827080 	add	r7, r2, r0, lsl #1
    bbf0:	1a00000a 	bne	bc20 <CScreenDevice::Scroll()+0x74>
    bbf4:	e0030693 	mul	r3, r3, r6
    bbf8:	e1b03123 	lsrs	r3, r3, #2
    bbfc:	0a000005 	beq	bc18 <CScreenDevice::Scroll()+0x6c>
    bc00:	e1a00007 	mov	r0, r7
    bc04:	e3a01000 	mov	r1, #0
    bc08:	e1a02103 	lsl	r2, r3, #2
    bc0c:	e28dd008 	add	sp, sp, #8
    bc10:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    bc14:	ea000c00 	b	ec1c <memset>
    bc18:	e28dd008 	add	sp, sp, #8
    bc1c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    bc20:	e3a0c000 	mov	ip, #0
    bc24:	e3a00002 	mov	r0, #2
    bc28:	e2858058 	add	r8, r5, #88	; 0x58
    bc2c:	e0811006 	add	r1, r1, r6
    bc30:	e0222193 	mla	r2, r3, r1, r2
    bc34:	e88d1001 	stm	sp, {r0, ip}
    bc38:	e1a03004 	mov	r3, r4
    bc3c:	e1a01007 	mov	r1, r7
    bc40:	e1a00008 	mov	r0, r8
    bc44:	eb001474 	bl	10e1c <CDMAChannel::SetupMemCopy(void*, void const*, unsigned int, unsigned int, bool)>
    bc48:	e1a00008 	mov	r0, r8
    bc4c:	eb0016a1 	bl	116d8 <CDMAChannel::Start()>
    bc50:	e1a00008 	mov	r0, r8
    bc54:	eb001707 	bl	11878 <CDMAChannel::Wait()>
    bc58:	e5953020 	ldr	r3, [r5, #32]
    bc5c:	e3c44003 	bic	r4, r4, #3
    bc60:	e1a03083 	lsl	r3, r3, #1
    bc64:	e0877004 	add	r7, r7, r4
    bc68:	eaffffe1 	b	bbf4 <CScreenDevice::Scroll()+0x48>

0000bc6c <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)>:
    bc6c:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    bc70:	e24dd00c 	sub	sp, sp, #12
    bc74:	e1a0a003 	mov	sl, r3
    bc78:	e2806014 	add	r6, r0, #20
    bc7c:	e1dd33b0 	ldrh	r3, [sp, #48]	; 0x30
    bc80:	e1a07000 	mov	r7, r0
    bc84:	e1a00006 	mov	r0, r6
    bc88:	e1a0b001 	mov	fp, r1
    bc8c:	e1a09002 	mov	r9, r2
    bc90:	e3a08000 	mov	r8, #0
    bc94:	e58d3004 	str	r3, [sp, #4]
    bc98:	eb001339 	bl	10984 <CCharGenerator::GetCharHeight() const>
    bc9c:	e1500008 	cmp	r0, r8
    bca0:	9a00001f 	bls	bd24 <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)+0xb8>
    bca4:	e3a04000 	mov	r4, #0
    bca8:	ea000012 	b	bcf8 <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)+0x8c>
    bcac:	e1a03008 	mov	r3, r8
    bcb0:	e1a02004 	mov	r2, r4
    bcb4:	e1a0100b 	mov	r1, fp
    bcb8:	e1a00006 	mov	r0, r6
    bcbc:	eb001334 	bl	10994 <CCharGenerator::GetPixel(char, unsigned int, unsigned int) const>
    bcc0:	e5973024 	ldr	r3, [r7, #36]	; 0x24
    bcc4:	e3500000 	cmp	r0, #0
    bcc8:	e59d2004 	ldr	r2, [sp, #4]
    bccc:	03a02000 	moveq	r2, #0
    bcd0:	e1550003 	cmp	r5, r3
    bcd4:	2a000006 	bcs	bcf4 <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)+0x88>
    bcd8:	e5973028 	ldr	r3, [r7, #40]	; 0x28
    bcdc:	e153000a 	cmp	r3, sl
    bce0:	85973020 	ldrhi	r3, [r7, #32]
    bce4:	85971018 	ldrhi	r1, [r7, #24]
    bce8:	80255a93 	mlahi	r5, r3, sl, r5
    bcec:	81a05085 	lslhi	r5, r5, #1
    bcf0:	818120b5 	strhhi	r2, [r1, r5]
    bcf4:	e2844001 	add	r4, r4, #1
    bcf8:	e1a00006 	mov	r0, r6
    bcfc:	eb00131e 	bl	1097c <CCharGenerator::GetCharWidth() const>
    bd00:	e1500004 	cmp	r0, r4
    bd04:	e0845009 	add	r5, r4, r9
    bd08:	8affffe7 	bhi	bcac <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)+0x40>
    bd0c:	e1a00006 	mov	r0, r6
    bd10:	eb00131b 	bl	10984 <CCharGenerator::GetCharHeight() const>
    bd14:	e2888001 	add	r8, r8, #1
    bd18:	e1500008 	cmp	r0, r8
    bd1c:	e28aa001 	add	sl, sl, #1
    bd20:	8affffdf 	bhi	bca4 <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)+0x38>
    bd24:	e28dd00c 	add	sp, sp, #12
    bd28:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000bd2c <CScreenDevice::EraseChar(unsigned int, unsigned int)>:
    bd2c:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    bd30:	e3a08000 	mov	r8, #0
    bd34:	e1a0a000 	mov	sl, r0
    bd38:	e1a06001 	mov	r6, r1
    bd3c:	e1a07002 	mov	r7, r2
    bd40:	e1a09008 	mov	r9, r8
    bd44:	e2805014 	add	r5, r0, #20
    bd48:	e1a00005 	mov	r0, r5
    bd4c:	eb00130c 	bl	10984 <CCharGenerator::GetCharHeight() const>
    bd50:	e1500008 	cmp	r0, r8
    bd54:	98bd87f0 	popls	{r4, r5, r6, r7, r8, r9, sl, pc}
    bd58:	e3a04000 	mov	r4, #0
    bd5c:	e1a00005 	mov	r0, r5
    bd60:	eb001305 	bl	1097c <CCharGenerator::GetCharWidth() const>
    bd64:	e1500004 	cmp	r0, r4
    bd68:	e0843006 	add	r3, r4, r6
    bd6c:	9a00000c 	bls	bda4 <CScreenDevice::EraseChar(unsigned int, unsigned int)+0x78>
    bd70:	e59a2024 	ldr	r2, [sl, #36]	; 0x24
    bd74:	e2844001 	add	r4, r4, #1
    bd78:	e1530002 	cmp	r3, r2
    bd7c:	2afffff6 	bcs	bd5c <CScreenDevice::EraseChar(unsigned int, unsigned int)+0x30>
    bd80:	e59a2028 	ldr	r2, [sl, #40]	; 0x28
    bd84:	e1520007 	cmp	r2, r7
    bd88:	9afffff3 	bls	bd5c <CScreenDevice::EraseChar(unsigned int, unsigned int)+0x30>
    bd8c:	e59a2020 	ldr	r2, [sl, #32]
    bd90:	e59a1018 	ldr	r1, [sl, #24]
    bd94:	e0233792 	mla	r3, r2, r7, r3
    bd98:	e1a03083 	lsl	r3, r3, #1
    bd9c:	e18190b3 	strh	r9, [r1, r3]
    bda0:	eaffffed 	b	bd5c <CScreenDevice::EraseChar(unsigned int, unsigned int)+0x30>
    bda4:	e2888001 	add	r8, r8, #1
    bda8:	e2877001 	add	r7, r7, #1
    bdac:	eaffffe5 	b	bd48 <CScreenDevice::EraseChar(unsigned int, unsigned int)+0x1c>

0000bdb0 <CScreenDevice::InvertCursor()>:
    bdb0:	e5d03044 	ldrb	r3, [r0, #68]	; 0x44
    bdb4:	e3530000 	cmp	r3, #0
    bdb8:	012fff1e 	bxeq	lr
    bdbc:	ea000048 	b	bee4 <CScreenDevice::InvertCursor() [clone .part.6]>

0000bdc0 <CScreenDevice::SetPixel(unsigned int, unsigned int, unsigned short)>:
    bdc0:	e590c024 	ldr	ip, [r0, #36]	; 0x24
    bdc4:	e15c0001 	cmp	ip, r1
    bdc8:	912fff1e 	bxls	lr
    bdcc:	e590c028 	ldr	ip, [r0, #40]	; 0x28
    bdd0:	e15c0002 	cmp	ip, r2
    bdd4:	8590c020 	ldrhi	ip, [r0, #32]
    bdd8:	85900018 	ldrhi	r0, [r0, #24]
    bddc:	8022129c 	mlahi	r2, ip, r2, r1
    bde0:	81a02082 	lslhi	r2, r2, #1
    bde4:	818030b2 	strhhi	r3, [r0, r2]
    bde8:	e12fff1e 	bx	lr

0000bdec <CScreenDevice::GetPixel(unsigned int, unsigned int)>:
    bdec:	e5903024 	ldr	r3, [r0, #36]	; 0x24
    bdf0:	e1530001 	cmp	r3, r1
    bdf4:	9a000008 	bls	be1c <CScreenDevice::GetPixel(unsigned int, unsigned int)+0x30>
    bdf8:	e5903028 	ldr	r3, [r0, #40]	; 0x28
    bdfc:	e1530002 	cmp	r3, r2
    be00:	9a000005 	bls	be1c <CScreenDevice::GetPixel(unsigned int, unsigned int)+0x30>
    be04:	e590c020 	ldr	ip, [r0, #32]
    be08:	e5903018 	ldr	r3, [r0, #24]
    be0c:	e022129c 	mla	r2, ip, r2, r1
    be10:	e1a02082 	lsl	r2, r2, #1
    be14:	e19300b2 	ldrh	r0, [r3, r2]
    be18:	e12fff1e 	bx	lr
    be1c:	e3a00000 	mov	r0, #0
    be20:	e12fff1e 	bx	lr

0000be24 <CScreenDevice::Rotor(unsigned int, unsigned int)>:
    be24:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    be28:	e1a05000 	mov	r5, r0
    be2c:	e1a04001 	mov	r4, r1
    be30:	e24dd00c 	sub	sp, sp, #12
    be34:	e2800014 	add	r0, r0, #20
    be38:	e1a06002 	mov	r6, r2
    be3c:	e5957024 	ldr	r7, [r5, #36]	; 0x24
    be40:	eb0012cd 	bl	1097c <CCharGenerator::GetCharWidth() const>
    be44:	e3a0cb3e 	mov	ip, #63488	; 0xf800
    be48:	e2044003 	and	r4, r4, #3
    be4c:	e2844001 	add	r4, r4, #1
    be50:	e0040490 	mul	r4, r0, r4
    be54:	e59f3024 	ldr	r3, [pc, #36]	; be80 <CScreenDevice::Rotor(unsigned int, unsigned int)+0x5c>
    be58:	e2066003 	and	r6, r6, #3
    be5c:	e0833006 	add	r3, r3, r6
    be60:	e1d311dc 	ldrsb	r1, [r3, #28]
    be64:	e0472004 	sub	r2, r7, r4
    be68:	e1a00005 	mov	r0, r5
    be6c:	e58dc000 	str	ip, [sp]
    be70:	e3a03000 	mov	r3, #0
    be74:	ebffff7c 	bl	bc6c <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)>
    be78:	e28dd00c 	add	sp, sp, #12
    be7c:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
    be80:	000136dc 	.word	0x000136dc

0000be84 <CScreenDevice::EraseChars(unsigned int) [clone .part.4]>:
    be84:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    be88:	e1a05000 	mov	r5, r0
    be8c:	e2807014 	add	r7, r0, #20
    be90:	e1a00007 	mov	r0, r7
    be94:	e1a06001 	mov	r6, r1
    be98:	e595403c 	ldr	r4, [r5, #60]	; 0x3c
    be9c:	eb0012b6 	bl	1097c <CCharGenerator::GetCharWidth() const>
    bea0:	e0204096 	mla	r0, r6, r0, r4
    bea4:	e5956024 	ldr	r6, [r5, #36]	; 0x24
    bea8:	e595403c 	ldr	r4, [r5, #60]	; 0x3c
    beac:	e1500006 	cmp	r0, r6
    beb0:	31a06000 	movcc	r6, r0
    beb4:	e1540006 	cmp	r4, r6
    beb8:	28bd81f0 	popcs	{r4, r5, r6, r7, r8, pc}
    bebc:	e1a01004 	mov	r1, r4
    bec0:	e5952040 	ldr	r2, [r5, #64]	; 0x40
    bec4:	e1a00005 	mov	r0, r5
    bec8:	ebffff97 	bl	bd2c <CScreenDevice::EraseChar(unsigned int, unsigned int)>
    becc:	e1a00007 	mov	r0, r7
    bed0:	eb0012a9 	bl	1097c <CCharGenerator::GetCharWidth() const>
    bed4:	e0844000 	add	r4, r4, r0
    bed8:	e1540006 	cmp	r4, r6
    bedc:	3afffff6 	bcc	bebc <CScreenDevice::EraseChars(unsigned int) [clone .part.4]+0x38>
    bee0:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

0000bee4 <CScreenDevice::InvertCursor() [clone .part.6]>:
    bee4:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    bee8:	e2806014 	add	r6, r0, #20
    beec:	e1a05000 	mov	r5, r0
    bef0:	e1a00006 	mov	r0, r6
    bef4:	eb0012a4 	bl	1098c <CCharGenerator::GetUnderline() const>
    bef8:	e3a08000 	mov	r8, #0
    befc:	e1a07000 	mov	r7, r0
    bf00:	e1a00006 	mov	r0, r6
    bf04:	eb00129e 	bl	10984 <CCharGenerator::GetCharHeight() const>
    bf08:	e1500007 	cmp	r0, r7
    bf0c:	98bd81f0 	popls	{r4, r5, r6, r7, r8, pc}
    bf10:	e3a04000 	mov	r4, #0
    bf14:	ea000013 	b	bf68 <CScreenDevice::InvertCursor() [clone .part.6]+0x84>
    bf18:	e595303c 	ldr	r3, [r5, #60]	; 0x3c
    bf1c:	e5952024 	ldr	r2, [r5, #36]	; 0x24
    bf20:	e0843003 	add	r3, r4, r3
    bf24:	e1530002 	cmp	r3, r2
    bf28:	2a00000d 	bcs	bf64 <CScreenDevice::InvertCursor() [clone .part.6]+0x80>
    bf2c:	e5952040 	ldr	r2, [r5, #64]	; 0x40
    bf30:	e5951028 	ldr	r1, [r5, #40]	; 0x28
    bf34:	e0872002 	add	r2, r7, r2
    bf38:	e1520001 	cmp	r2, r1
    bf3c:	2a000008 	bcs	bf64 <CScreenDevice::InvertCursor() [clone .part.6]+0x80>
    bf40:	e5950020 	ldr	r0, [r5, #32]
    bf44:	e5951018 	ldr	r1, [r5, #24]
    bf48:	e0233290 	mla	r3, r0, r2, r3
    bf4c:	e1a03083 	lsl	r3, r3, #1
    bf50:	e19120b3 	ldrh	r2, [r1, r3]
    bf54:	e3520000 	cmp	r2, #0
    bf58:	01d524b6 	ldrheq	r2, [r5, #70]	; 0x46
    bf5c:	118180b3 	strhne	r8, [r1, r3]
    bf60:	018120b3 	strheq	r2, [r1, r3]
    bf64:	e2844001 	add	r4, r4, #1
    bf68:	e1a00006 	mov	r0, r6
    bf6c:	eb001282 	bl	1097c <CCharGenerator::GetCharWidth() const>
    bf70:	e1500004 	cmp	r0, r4
    bf74:	8affffe7 	bhi	bf18 <CScreenDevice::InvertCursor() [clone .part.6]+0x34>
    bf78:	e2877001 	add	r7, r7, #1
    bf7c:	eaffffdf 	b	bf00 <CScreenDevice::InvertCursor() [clone .part.6]+0x1c>

0000bf80 <CSerialDevice::CSerialDevice(CInterruptSystem*, bool)>:
    bf80:	e92d4070 	push	{r4, r5, r6, lr}
    bf84:	e1a04000 	mov	r4, r0
    bf88:	e1a05002 	mov	r5, r2
    bf8c:	e1a06001 	mov	r6, r1
    bf90:	eb001315 	bl	10bec <CDevice::CDevice()>
    bf94:	e1a00004 	mov	r0, r4
    bf98:	e3a03000 	mov	r3, #0
    bf9c:	e59f1098 	ldr	r1, [pc, #152]	; c03c <CSerialDevice::CSerialDevice(CInterruptSystem*, bool)+0xbc>
    bfa0:	e1a02003 	mov	r2, r3
    bfa4:	e4801004 	str	r1, [r0], #4
    bfa8:	e3a01020 	mov	r1, #32
    bfac:	ebfff2e2 	bl	8b3c <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)>
    bfb0:	e3a03000 	mov	r3, #0
    bfb4:	e284002c 	add	r0, r4, #44	; 0x2c
    bfb8:	e1a02003 	mov	r2, r3
    bfbc:	e3a01021 	mov	r1, #33	; 0x21
    bfc0:	ebfff2dd 	bl	8b3c <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)>
    bfc4:	e2840054 	add	r0, r4, #84	; 0x54
    bfc8:	e3a03000 	mov	r3, #0
    bfcc:	e3a02004 	mov	r2, #4
    bfd0:	e3a0100e 	mov	r1, #14
    bfd4:	ebfff2d8 	bl	8b3c <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)>
    bfd8:	e284007c 	add	r0, r4, #124	; 0x7c
    bfdc:	e3a03000 	mov	r3, #0
    bfe0:	e3a02004 	mov	r2, #4
    bfe4:	e3a0100f 	mov	r1, #15
    bfe8:	ebfff2d3 	bl	8b3c <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)>
    bfec:	e3550000 	cmp	r5, #0
    bff0:	e3a03000 	mov	r3, #0
    bff4:	e3a01001 	mov	r1, #1
    bff8:	13a0c002 	movne	ip, #2
    bffc:	03a0c001 	moveq	ip, #1
    c000:	e2842a01 	add	r2, r4, #4096	; 0x1000
    c004:	e58438ac 	str	r3, [r4, #2220]	; 0x8ac
    c008:	e58460a4 	str	r6, [r4, #164]	; 0xa4
    c00c:	e58438b0 	str	r3, [r4, #2224]	; 0x8b0
    c010:	e5c450a8 	strb	r5, [r4, #168]	; 0xa8
    c014:	e5c430a9 	strb	r3, [r4, #169]	; 0xa9
    c018:	e58438b4 	str	r3, [r4, #2228]	; 0x8b4
    c01c:	e1a00004 	mov	r0, r4
    c020:	e58230b8 	str	r3, [r2, #184]	; 0xb8
    c024:	e582c0d0 	str	ip, [r2, #208]	; 0xd0
    c028:	e58230c4 	str	r3, [r2, #196]	; 0xc4
    c02c:	e58230bc 	str	r3, [r2, #188]	; 0xbc
    c030:	e58210c0 	str	r1, [r2, #192]	; 0xc0
    c034:	e58210d4 	str	r1, [r2, #212]	; 0xd4
    c038:	e8bd8070 	pop	{r4, r5, r6, pc}
    c03c:	00013708 	.word	0x00013708

0000c040 <CSerialDevice::~CSerialDevice()>:
    c040:	e59fc0a4 	ldr	ip, [pc, #164]	; c0ec <CSerialDevice::~CSerialDevice()+0xac>
    c044:	e92d4010 	push	{r4, lr}
    c048:	e3a03000 	mov	r3, #0
    c04c:	e1a04000 	mov	r4, r0
    c050:	e580c000 	str	ip, [r0]
    c054:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
    c058:	e59f2090 	ldr	r2, [pc, #144]	; c0f0 <CSerialDevice::~CSerialDevice()+0xb0>
    c05c:	e5823038 	str	r3, [r2, #56]	; 0x38
    c060:	e5823030 	str	r3, [r2, #48]	; 0x30
    c064:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
    c068:	e5d030a9 	ldrb	r3, [r0, #169]	; 0xa9
    c06c:	e3530000 	cmp	r3, #0
    c070:	0a000006 	beq	c090 <CSerialDevice::~CSerialDevice()+0x50>
    c074:	e59000a4 	ldr	r0, [r0, #164]	; 0xa4
    c078:	e3500000 	cmp	r0, #0
    c07c:	0a000014 	beq	c0d4 <CSerialDevice::~CSerialDevice()+0x94>
    c080:	e5d430a8 	ldrb	r3, [r4, #168]	; 0xa8
    c084:	e3530000 	cmp	r3, #0
    c088:	0a00000e 	beq	c0c8 <CSerialDevice::~CSerialDevice()+0x88>
    c08c:	eb0017be 	bl	11f8c <CInterruptSystem::DisconnectFIQ()>
    c090:	e3a03000 	mov	r3, #0
    c094:	e284007c 	add	r0, r4, #124	; 0x7c
    c098:	e58430a4 	str	r3, [r4, #164]	; 0xa4
    c09c:	ebfff2bc 	bl	8b94 <CGPIOPin::~CGPIOPin()>
    c0a0:	e2840054 	add	r0, r4, #84	; 0x54
    c0a4:	ebfff2ba 	bl	8b94 <CGPIOPin::~CGPIOPin()>
    c0a8:	e284002c 	add	r0, r4, #44	; 0x2c
    c0ac:	ebfff2b8 	bl	8b94 <CGPIOPin::~CGPIOPin()>
    c0b0:	e2840004 	add	r0, r4, #4
    c0b4:	ebfff2b6 	bl	8b94 <CGPIOPin::~CGPIOPin()>
    c0b8:	e1a00004 	mov	r0, r4
    c0bc:	eb0012be 	bl	10bbc <CDevice::~CDevice()>
    c0c0:	e1a00004 	mov	r0, r4
    c0c4:	e8bd8010 	pop	{r4, pc}
    c0c8:	e3a01039 	mov	r1, #57	; 0x39
    c0cc:	eb001835 	bl	121a8 <CInterruptSystem::DisconnectIRQ(unsigned int)>
    c0d0:	eaffffee 	b	c090 <CSerialDevice::~CSerialDevice()+0x50>
    c0d4:	e28c0020 	add	r0, ip, #32
    c0d8:	e3a02079 	mov	r2, #121	; 0x79
    c0dc:	e28c1014 	add	r1, ip, #20
    c0e0:	eb00103a 	bl	101d0 <assertion_failed>
    c0e4:	e59400a4 	ldr	r0, [r4, #164]	; 0xa4
    c0e8:	eaffffe4 	b	c080 <CSerialDevice::~CSerialDevice()+0x40>
    c0ec:	00013708 	.word	0x00013708
    c0f0:	20201000 	.word	0x20201000

0000c0f4 <CSerialDevice::~CSerialDevice()>:
    c0f4:	e92d4010 	push	{r4, lr}
    c0f8:	e1a04000 	mov	r4, r0
    c0fc:	ebffffcf 	bl	c040 <CSerialDevice::~CSerialDevice()>
    c100:	e1a00004 	mov	r0, r4
    c104:	e59f1008 	ldr	r1, [pc, #8]	; c114 <CSerialDevice::~CSerialDevice()+0x20>
    c108:	eb000ea4 	bl	fba0 <operator delete(void*, unsigned int)>
    c10c:	e1a00004 	mov	r0, r4
    c110:	e8bd8010 	pop	{r4, pc}
    c114:	000010d8 	.word	0x000010d8

0000c118 <CSerialDevice::Initialize(unsigned int)>:
    c118:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    c11c:	e1a08001 	mov	r8, r1
    c120:	e1a04000 	mov	r4, r0
    c124:	ebfffb02 	bl	ad34 <CMachineInfo::Get()>
    c128:	e3a01002 	mov	r1, #2
    c12c:	ebfffa3b 	bl	aa20 <CMachineInfo::GetClockRate(unsigned int) const>
    c130:	e2505000 	subs	r5, r0, #0
    c134:	e2487f4b 	sub	r7, r8, #300	; 0x12c
    c138:	e1a06208 	lsl	r6, r8, #4
    c13c:	0a000045 	beq	c258 <CSerialDevice::Initialize(unsigned int)+0x140>
    c140:	e59f3158 	ldr	r3, [pc, #344]	; c2a0 <CSerialDevice::Initialize(unsigned int)+0x188>
    c144:	e1570003 	cmp	r7, r3
    c148:	8a00003d 	bhi	c244 <CSerialDevice::Initialize(unsigned int)+0x12c>
    c14c:	e1a01006 	mov	r1, r6
    c150:	e1a00005 	mov	r0, r5
    c154:	eb001b90 	bl	12f9c <__udivsi3>
    c158:	e59f3144 	ldr	r3, [pc, #324]	; c2a4 <CSerialDevice::Initialize(unsigned int)+0x18c>
    c15c:	e2402001 	sub	r2, r0, #1
    c160:	e1520003 	cmp	r2, r3
    c164:	e1a07000 	mov	r7, r0
    c168:	8a000042 	bhi	c278 <CSerialDevice::Initialize(unsigned int)+0x160>
    c16c:	e1a00005 	mov	r0, r5
    c170:	e1a01006 	mov	r1, r6
    c174:	eb001bc5 	bl	13090 <__aeabi_uidivmod>
    c178:	e1a00181 	lsl	r0, r1, #3
    c17c:	e1a01008 	mov	r1, r8
    c180:	eb001b85 	bl	12f9c <__udivsi3>
    c184:	e2005001 	and	r5, r0, #1
    c188:	e08550a0 	add	r5, r5, r0, lsr #1
    c18c:	e355003f 	cmp	r5, #63	; 0x3f
    c190:	8a00003d 	bhi	c28c <CSerialDevice::Initialize(unsigned int)+0x174>
    c194:	e59400a4 	ldr	r0, [r4, #164]	; 0xa4
    c198:	e3500000 	cmp	r0, #0
    c19c:	0a000008 	beq	c1c4 <CSerialDevice::Initialize(unsigned int)+0xac>
    c1a0:	e5d430a8 	ldrb	r3, [r4, #168]	; 0xa8
    c1a4:	e59f20fc 	ldr	r2, [pc, #252]	; c2a8 <CSerialDevice::Initialize(unsigned int)+0x190>
    c1a8:	e3530000 	cmp	r3, #0
    c1ac:	e3a01039 	mov	r1, #57	; 0x39
    c1b0:	e1a03004 	mov	r3, r4
    c1b4:	0a000020 	beq	c23c <CSerialDevice::Initialize(unsigned int)+0x124>
    c1b8:	eb00182c 	bl	12270 <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)>
    c1bc:	e3a03001 	mov	r3, #1
    c1c0:	e5c430a9 	strb	r3, [r4, #169]	; 0xa9
    c1c4:	e3a02000 	mov	r2, #0
    c1c8:	ee072f9a 	mcr	15, 0, r2, cr7, cr10, {4}
    c1cc:	e59f30d8 	ldr	r3, [pc, #216]	; c2ac <CSerialDevice::Initialize(unsigned int)+0x194>
    c1d0:	e59f10d8 	ldr	r1, [pc, #216]	; c2b0 <CSerialDevice::Initialize(unsigned int)+0x198>
    c1d4:	e5832038 	str	r2, [r3, #56]	; 0x38
    c1d8:	e5831044 	str	r1, [r3, #68]	; 0x44
    c1dc:	e5837024 	str	r7, [r3, #36]	; 0x24
    c1e0:	e5835028 	str	r5, [r3, #40]	; 0x28
    c1e4:	e59420a4 	ldr	r2, [r4, #164]	; 0xa4
    c1e8:	e3a05000 	mov	r5, #0
    c1ec:	e3520000 	cmp	r2, #0
    c1f0:	13a02e45 	movne	r2, #1104	; 0x450
    c1f4:	03a02060 	moveq	r2, #96	; 0x60
    c1f8:	13a00009 	movne	r0, #9
    c1fc:	13a01070 	movne	r1, #112	; 0x70
    c200:	15830034 	strne	r0, [r3, #52]	; 0x34
    c204:	0583202c 	streq	r2, [r3, #44]	; 0x2c
    c208:	1583102c 	strne	r1, [r3, #44]	; 0x2c
    c20c:	15832038 	strne	r2, [r3, #56]	; 0x38
    c210:	e59f3094 	ldr	r3, [pc, #148]	; c2ac <CSerialDevice::Initialize(unsigned int)+0x194>
    c214:	e59f2098 	ldr	r2, [pc, #152]	; c2b4 <CSerialDevice::Initialize(unsigned int)+0x19c>
    c218:	e5832030 	str	r2, [r3, #48]	; 0x30
    c21c:	ee075fba 	mcr	15, 0, r5, cr7, cr10, {5}
    c220:	ebfff195 	bl	887c <CDeviceNameService::Get()>
    c224:	e1a03005 	mov	r3, r5
    c228:	e1a02004 	mov	r2, r4
    c22c:	e59f1084 	ldr	r1, [pc, #132]	; c2b8 <CSerialDevice::Initialize(unsigned int)+0x1a0>
    c230:	ebfff0cf 	bl	8574 <CDeviceNameService::AddDevice(char const*, CDevice*, bool)>
    c234:	e3a00001 	mov	r0, #1
    c238:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    c23c:	eb001798 	bl	120a4 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)>
    c240:	eaffffdd 	b	c1bc <CSerialDevice::Initialize(unsigned int)+0xa4>
    c244:	e59f1070 	ldr	r1, [pc, #112]	; c2bc <CSerialDevice::Initialize(unsigned int)+0x1a4>
    c248:	e3a0208c 	mov	r2, #140	; 0x8c
    c24c:	e2810034 	add	r0, r1, #52	; 0x34
    c250:	eb000fde 	bl	101d0 <assertion_failed>
    c254:	eaffffbc 	b	c14c <CSerialDevice::Initialize(unsigned int)+0x34>
    c258:	e59f105c 	ldr	r1, [pc, #92]	; c2bc <CSerialDevice::Initialize(unsigned int)+0x1a4>
    c25c:	e3a0208a 	mov	r2, #138	; 0x8a
    c260:	e2810024 	add	r0, r1, #36	; 0x24
    c264:	eb000fd9 	bl	101d0 <assertion_failed>
    c268:	e59f3030 	ldr	r3, [pc, #48]	; c2a0 <CSerialDevice::Initialize(unsigned int)+0x188>
    c26c:	e1570003 	cmp	r7, r3
    c270:	91a07005 	movls	r7, r5
    c274:	8afffff2 	bhi	c244 <CSerialDevice::Initialize(unsigned int)+0x12c>
    c278:	e59f103c 	ldr	r1, [pc, #60]	; c2bc <CSerialDevice::Initialize(unsigned int)+0x1a4>
    c27c:	e3a0208f 	mov	r2, #143	; 0x8f
    c280:	e2810060 	add	r0, r1, #96	; 0x60
    c284:	eb000fd1 	bl	101d0 <assertion_failed>
    c288:	eaffffb7 	b	c16c <CSerialDevice::Initialize(unsigned int)+0x54>
    c28c:	e59f1028 	ldr	r1, [pc, #40]	; c2bc <CSerialDevice::Initialize(unsigned int)+0x1a4>
    c290:	e3a02092 	mov	r2, #146	; 0x92
    c294:	e2810084 	add	r0, r1, #132	; 0x84
    c298:	eb000fcc 	bl	101d0 <assertion_failed>
    c29c:	eaffffbc 	b	c194 <CSerialDevice::Initialize(unsigned int)+0x7c>
    c2a0:	003d07d4 	.word	0x003d07d4
    c2a4:	0000fffe 	.word	0x0000fffe
    c2a8:	0000cbbc 	.word	0x0000cbbc
    c2ac:	20201000 	.word	0x20201000
    c2b0:	000007ff 	.word	0x000007ff
    c2b4:	00000301 	.word	0x00000301
    c2b8:	000137b4 	.word	0x000137b4
    c2bc:	0001371c 	.word	0x0001371c

0000c2c0 <CSerialDevice::Write(void const*, unsigned int)>:
    c2c0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    c2c4:	e2806a01 	add	r6, r0, #4096	; 0x1000
    c2c8:	e1a07000 	mov	r7, r0
    c2cc:	e59600d4 	ldr	r0, [r6, #212]	; 0xd4
    c2d0:	e1a04001 	mov	r4, r1
    c2d4:	e3500000 	cmp	r0, #0
    c2d8:	e1a08002 	mov	r8, r2
    c2dc:	1a000052 	bne	c42c <CSerialDevice::Write(void const*, unsigned int)+0x16c>
    c2e0:	e3540000 	cmp	r4, #0
    c2e4:	0a000053 	beq	c438 <CSerialDevice::Write(void const*, unsigned int)+0x178>
    c2e8:	e3580000 	cmp	r8, #0
    c2ec:	0a00005b 	beq	c460 <CSerialDevice::Write(void const*, unsigned int)+0x1a0>
    c2f0:	e3a05000 	mov	r5, #0
    c2f4:	e2444001 	sub	r4, r4, #1
    c2f8:	ea000002 	b	c308 <CSerialDevice::Write(void const*, unsigned int)+0x48>
    c2fc:	e2855001 	add	r5, r5, #1
    c300:	e1550008 	cmp	r5, r8
    c304:	0a00000f 	beq	c348 <CSerialDevice::Write(void const*, unsigned int)+0x88>
    c308:	e5f41001 	ldrb	r1, [r4, #1]!
    c30c:	e1a00007 	mov	r0, r7
    c310:	eb000176 	bl	c8f0 <CSerialDevice::Write(unsigned char)>
    c314:	e3500000 	cmp	r0, #0
    c318:	0a00000a 	beq	c348 <CSerialDevice::Write(void const*, unsigned int)+0x88>
    c31c:	e5d43000 	ldrb	r3, [r4]
    c320:	e353000a 	cmp	r3, #10
    c324:	1afffff4 	bne	c2fc <CSerialDevice::Write(void const*, unsigned int)+0x3c>
    c328:	e59630c0 	ldr	r3, [r6, #192]	; 0xc0
    c32c:	e3130001 	tst	r3, #1
    c330:	0afffff1 	beq	c2fc <CSerialDevice::Write(void const*, unsigned int)+0x3c>
    c334:	e3a0100d 	mov	r1, #13
    c338:	e1a00007 	mov	r0, r7
    c33c:	eb00016b 	bl	c8f0 <CSerialDevice::Write(unsigned char)>
    c340:	e3500000 	cmp	r0, #0
    c344:	1affffec 	bne	c2fc <CSerialDevice::Write(void const*, unsigned int)+0x3c>
    c348:	e59630d4 	ldr	r3, [r6, #212]	; 0xd4
    c34c:	e3530000 	cmp	r3, #0
    c350:	1a000033 	bne	c424 <CSerialDevice::Write(void const*, unsigned int)+0x164>
    c354:	e59730a4 	ldr	r3, [r7, #164]	; 0xa4
    c358:	e3530000 	cmp	r3, #0
    c35c:	0a000028 	beq	c404 <CSerialDevice::Write(void const*, unsigned int)+0x144>
    c360:	e59600d0 	ldr	r0, [r6, #208]	; 0xd0
    c364:	e3500000 	cmp	r0, #0
    c368:	1a000027 	bne	c40c <CSerialDevice::Write(void const*, unsigned int)+0x14c>
    c36c:	e59630b8 	ldr	r3, [r6, #184]	; 0xb8
    c370:	e59620bc 	ldr	r2, [r6, #188]	; 0xbc
    c374:	e1520003 	cmp	r2, r3
    c378:	0a000021 	beq	c404 <CSerialDevice::Write(void const*, unsigned int)+0x144>
    c37c:	e3a03000 	mov	r3, #0
    c380:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
    c384:	e59630b8 	ldr	r3, [r6, #184]	; 0xb8
    c388:	e59620bc 	ldr	r2, [r6, #188]	; 0xbc
    c38c:	e1520003 	cmp	r2, r3
    c390:	0a000015 	beq	c3ec <CSerialDevice::Write(void const*, unsigned int)+0x12c>
    c394:	e59f20cc 	ldr	r2, [pc, #204]	; c468 <CSerialDevice::Write(void const*, unsigned int)+0x1a8>
    c398:	e5923018 	ldr	r3, [r2, #24]
    c39c:	e3130020 	tst	r3, #32
    c3a0:	1a000029 	bne	c44c <CSerialDevice::Write(void const*, unsigned int)+0x18c>
    c3a4:	e59f00c0 	ldr	r0, [pc, #192]	; c46c <CSerialDevice::Write(void const*, unsigned int)+0x1ac>
    c3a8:	ea000002 	b	c3b8 <CSerialDevice::Write(void const*, unsigned int)+0xf8>
    c3ac:	e5923018 	ldr	r3, [r2, #24]
    c3b0:	e3130020 	tst	r3, #32
    c3b4:	1a000024 	bne	c44c <CSerialDevice::Write(void const*, unsigned int)+0x18c>
    c3b8:	e59630bc 	ldr	r3, [r6, #188]	; 0xbc
    c3bc:	e2831001 	add	r1, r3, #1
    c3c0:	e58610bc 	str	r1, [r6, #188]	; 0xbc
    c3c4:	e0873003 	add	r3, r7, r3
    c3c8:	e5d338b8 	ldrb	r3, [r3, #2232]	; 0x8b8
    c3cc:	e5823000 	str	r3, [r2]
    c3d0:	e59630bc 	ldr	r3, [r6, #188]	; 0xbc
    c3d4:	e0033000 	and	r3, r3, r0
    c3d8:	e58630bc 	str	r3, [r6, #188]	; 0xbc
    c3dc:	e59610b8 	ldr	r1, [r6, #184]	; 0xb8
    c3e0:	e59630bc 	ldr	r3, [r6, #188]	; 0xbc
    c3e4:	e1510003 	cmp	r1, r3
    c3e8:	1affffef 	bne	c3ac <CSerialDevice::Write(void const*, unsigned int)+0xec>
    c3ec:	e3a03000 	mov	r3, #0
    c3f0:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
    c3f4:	e59630d0 	ldr	r3, [r6, #208]	; 0xd0
    c3f8:	e3530000 	cmp	r3, #0
    c3fc:	0a000000 	beq	c404 <CSerialDevice::Write(void const*, unsigned int)+0x144>
    c400:	eb000db5 	bl	fadc <LeaveCritical>
    c404:	e1a00005 	mov	r0, r5
    c408:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    c40c:	eb000d85 	bl	fa28 <EnterCritical>
    c410:	e59620b8 	ldr	r2, [r6, #184]	; 0xb8
    c414:	e59630bc 	ldr	r3, [r6, #188]	; 0xbc
    c418:	e1520003 	cmp	r2, r3
    c41c:	1affffd6 	bne	c37c <CSerialDevice::Write(void const*, unsigned int)+0xbc>
    c420:	eafffff3 	b	c3f4 <CSerialDevice::Write(void const*, unsigned int)+0x134>
    c424:	eb000dac 	bl	fadc <LeaveCritical>
    c428:	eaffffc9 	b	c354 <CSerialDevice::Write(void const*, unsigned int)+0x94>
    c42c:	eb000d7d 	bl	fa28 <EnterCritical>
    c430:	e3540000 	cmp	r4, #0
    c434:	1affffab 	bne	c2e8 <CSerialDevice::Write(void const*, unsigned int)+0x28>
    c438:	e59f1030 	ldr	r1, [pc, #48]	; c470 <CSerialDevice::Write(void const*, unsigned int)+0x1b0>
    c43c:	e3a020c3 	mov	r2, #195	; 0xc3
    c440:	e28100a0 	add	r0, r1, #160	; 0xa0
    c444:	eb000f61 	bl	101d0 <assertion_failed>
    c448:	eaffffa6 	b	c2e8 <CSerialDevice::Write(void const*, unsigned int)+0x28>
    c44c:	e59f2014 	ldr	r2, [pc, #20]	; c468 <CSerialDevice::Write(void const*, unsigned int)+0x1a8>
    c450:	e5923038 	ldr	r3, [r2, #56]	; 0x38
    c454:	e3833020 	orr	r3, r3, #32
    c458:	e5823038 	str	r3, [r2, #56]	; 0x38
    c45c:	eaffffe2 	b	c3ec <CSerialDevice::Write(void const*, unsigned int)+0x12c>
    c460:	e1a05008 	mov	r5, r8
    c464:	eaffffb7 	b	c348 <CSerialDevice::Write(void const*, unsigned int)+0x88>
    c468:	20201000 	.word	0x20201000
    c46c:	000007ff 	.word	0x000007ff
    c470:	0001371c 	.word	0x0001371c

0000c474 <CSerialDevice::Read(void*, unsigned int)>:
    c474:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    c478:	e2516000 	subs	r6, r1, #0
    c47c:	e1a04000 	mov	r4, r0
    c480:	e1a05002 	mov	r5, r2
    c484:	0a000059 	beq	c5f0 <CSerialDevice::Read(void*, unsigned int)+0x17c>
    c488:	e59430a4 	ldr	r3, [r4, #164]	; 0xa4
    c48c:	e3530000 	cmp	r3, #0
    c490:	0a000033 	beq	c564 <CSerialDevice::Read(void*, unsigned int)+0xf0>
    c494:	e2847a01 	add	r7, r4, #4096	; 0x1000
    c498:	e59700d0 	ldr	r0, [r7, #208]	; 0xd0
    c49c:	e3500000 	cmp	r0, #0
    c4a0:	1a00002a 	bne	c550 <CSerialDevice::Read(void*, unsigned int)+0xdc>
    c4a4:	e59438b4 	ldr	r3, [r4, #2228]	; 0x8b4
    c4a8:	e3530000 	cmp	r3, #0
    c4ac:	ba00001f 	blt	c530 <CSerialDevice::Read(void*, unsigned int)+0xbc>
    c4b0:	e3550000 	cmp	r5, #0
    c4b4:	0a000020 	beq	c53c <CSerialDevice::Read(void*, unsigned int)+0xc8>
    c4b8:	e59438ac 	ldr	r3, [r4, #2220]	; 0x8ac
    c4bc:	e59428b0 	ldr	r2, [r4, #2224]	; 0x8b0
    c4c0:	e1520003 	cmp	r2, r3
    c4c4:	0a000054 	beq	c61c <CSerialDevice::Read(void*, unsigned int)+0x1a8>
    c4c8:	e0862005 	add	r2, r6, r5
    c4cc:	e1a01006 	mov	r1, r6
    c4d0:	e59fc154 	ldr	ip, [pc, #340]	; c62c <CSerialDevice::Read(void*, unsigned int)+0x1b8>
    c4d4:	ea000003 	b	c4e8 <CSerialDevice::Read(void*, unsigned int)+0x74>
    c4d8:	e59408ac 	ldr	r0, [r4, #2220]	; 0x8ac
    c4dc:	e59438b0 	ldr	r3, [r4, #2224]	; 0x8b0
    c4e0:	e1500003 	cmp	r0, r3
    c4e4:	0a000014 	beq	c53c <CSerialDevice::Read(void*, unsigned int)+0xc8>
    c4e8:	e59438b0 	ldr	r3, [r4, #2224]	; 0x8b0
    c4ec:	e2830001 	add	r0, r3, #1
    c4f0:	e58408b0 	str	r0, [r4, #2224]	; 0x8b0
    c4f4:	e0843003 	add	r3, r4, r3
    c4f8:	e5d330aa 	ldrb	r3, [r3, #170]	; 0xaa
    c4fc:	e4c13001 	strb	r3, [r1], #1
    c500:	e59438b0 	ldr	r3, [r4, #2224]	; 0x8b0
    c504:	e1510002 	cmp	r1, r2
    c508:	e003300c 	and	r3, r3, ip
    c50c:	e58438b0 	str	r3, [r4, #2224]	; 0x8b0
    c510:	e0415006 	sub	r5, r1, r6
    c514:	1affffef 	bne	c4d8 <CSerialDevice::Read(void*, unsigned int)+0x64>
    c518:	e59730d0 	ldr	r3, [r7, #208]	; 0xd0
    c51c:	e3530000 	cmp	r3, #0
    c520:	0a000008 	beq	c548 <CSerialDevice::Read(void*, unsigned int)+0xd4>
    c524:	eb000d6c 	bl	fadc <LeaveCritical>
    c528:	e1a00005 	mov	r0, r5
    c52c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    c530:	e3a03000 	mov	r3, #0
    c534:	e59458b4 	ldr	r5, [r4, #2228]	; 0x8b4
    c538:	e58438b4 	str	r3, [r4, #2228]	; 0x8b4
    c53c:	e59730d0 	ldr	r3, [r7, #208]	; 0xd0
    c540:	e3530000 	cmp	r3, #0
    c544:	1afffff6 	bne	c524 <CSerialDevice::Read(void*, unsigned int)+0xb0>
    c548:	e1a00005 	mov	r0, r5
    c54c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    c550:	eb000d34 	bl	fa28 <EnterCritical>
    c554:	e59438b4 	ldr	r3, [r4, #2228]	; 0x8b4
    c558:	e3530000 	cmp	r3, #0
    c55c:	aaffffd3 	bge	c4b0 <CSerialDevice::Read(void*, unsigned int)+0x3c>
    c560:	eafffff2 	b	c530 <CSerialDevice::Read(void*, unsigned int)+0xbc>
    c564:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
    c568:	e3550000 	cmp	r5, #0
    c56c:	0a00001b 	beq	c5e0 <CSerialDevice::Read(void*, unsigned int)+0x16c>
    c570:	e59f00b8 	ldr	r0, [pc, #184]	; c630 <CSerialDevice::Read(void*, unsigned int)+0x1bc>
    c574:	e5902018 	ldr	r2, [r0, #24]
    c578:	e3120010 	tst	r2, #16
    c57c:	1a000028 	bne	c624 <CSerialDevice::Read(void*, unsigned int)+0x1b0>
    c580:	e5903000 	ldr	r3, [r0]
    c584:	e3130b01 	tst	r3, #1024	; 0x400
    c588:	1a00001d 	bne	c604 <CSerialDevice::Read(void*, unsigned int)+0x190>
    c58c:	e3130b02 	tst	r3, #2048	; 0x800
    c590:	1a00001d 	bne	c60c <CSerialDevice::Read(void*, unsigned int)+0x198>
    c594:	e3130c01 	tst	r3, #256	; 0x100
    c598:	00862005 	addeq	r2, r6, r5
    c59c:	01a01006 	moveq	r1, r6
    c5a0:	0a00000a 	beq	c5d0 <CSerialDevice::Read(void*, unsigned int)+0x15c>
    c5a4:	ea00001a 	b	c614 <CSerialDevice::Read(void*, unsigned int)+0x1a0>
    c5a8:	e5903018 	ldr	r3, [r0, #24]
    c5ac:	e3130010 	tst	r3, #16
    c5b0:	1a00000a 	bne	c5e0 <CSerialDevice::Read(void*, unsigned int)+0x16c>
    c5b4:	e5903000 	ldr	r3, [r0]
    c5b8:	e3130b01 	tst	r3, #1024	; 0x400
    c5bc:	1a000010 	bne	c604 <CSerialDevice::Read(void*, unsigned int)+0x190>
    c5c0:	e3130b02 	tst	r3, #2048	; 0x800
    c5c4:	1a000010 	bne	c60c <CSerialDevice::Read(void*, unsigned int)+0x198>
    c5c8:	e3130c01 	tst	r3, #256	; 0x100
    c5cc:	1a000010 	bne	c614 <CSerialDevice::Read(void*, unsigned int)+0x1a0>
    c5d0:	e4c13001 	strb	r3, [r1], #1
    c5d4:	e1510002 	cmp	r1, r2
    c5d8:	e0415006 	sub	r5, r1, r6
    c5dc:	1afffff1 	bne	c5a8 <CSerialDevice::Read(void*, unsigned int)+0x134>
    c5e0:	e3a03000 	mov	r3, #0
    c5e4:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
    c5e8:	e1a00005 	mov	r0, r5
    c5ec:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    c5f0:	e59f103c 	ldr	r1, [pc, #60]	; c634 <CSerialDevice::Read(void*, unsigned int)+0x1c0>
    c5f4:	e59f203c 	ldr	r2, [pc, #60]	; c638 <CSerialDevice::Read(void*, unsigned int)+0x1c4>
    c5f8:	e28100a0 	add	r0, r1, #160	; 0xa0
    c5fc:	eb000ef3 	bl	101d0 <assertion_failed>
    c600:	eaffffa0 	b	c488 <CSerialDevice::Read(void*, unsigned int)+0x14>
    c604:	e3e05000 	mvn	r5, #0
    c608:	eafffff4 	b	c5e0 <CSerialDevice::Read(void*, unsigned int)+0x16c>
    c60c:	e3e05001 	mvn	r5, #1
    c610:	eafffff2 	b	c5e0 <CSerialDevice::Read(void*, unsigned int)+0x16c>
    c614:	e3e05002 	mvn	r5, #2
    c618:	eafffff0 	b	c5e0 <CSerialDevice::Read(void*, unsigned int)+0x16c>
    c61c:	e3a05000 	mov	r5, #0
    c620:	eaffffc5 	b	c53c <CSerialDevice::Read(void*, unsigned int)+0xc8>
    c624:	e1a05003 	mov	r5, r3
    c628:	eaffffec 	b	c5e0 <CSerialDevice::Read(void*, unsigned int)+0x16c>
    c62c:	000007ff 	.word	0x000007ff
    c630:	20201000 	.word	0x20201000
    c634:	0001371c 	.word	0x0001371c
    c638:	00000101 	.word	0x00000101

0000c63c <CSerialDevice::GetOptions() const>:
    c63c:	e2800a01 	add	r0, r0, #4096	; 0x1000
    c640:	e59000c0 	ldr	r0, [r0, #192]	; 0xc0
    c644:	e12fff1e 	bx	lr

0000c648 <CSerialDevice::SetOptions(unsigned int)>:
    c648:	e2800a01 	add	r0, r0, #4096	; 0x1000
    c64c:	e58010c0 	str	r1, [r0, #192]	; 0xc0
    c650:	e12fff1e 	bx	lr

0000c654 <CSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())>:
    c654:	e92d4070 	push	{r4, r5, r6, lr}
    c658:	e59030a4 	ldr	r3, [r0, #164]	; 0xa4
    c65c:	e1a04000 	mov	r4, r0
    c660:	e3530000 	cmp	r3, #0
    c664:	e1a05001 	mov	r5, r1
    c668:	e1a06002 	mov	r6, r2
    c66c:	0a00001d 	beq	c6e8 <CSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0x94>
    c670:	e2844a01 	add	r4, r4, #4096	; 0x1000
    c674:	e59430c4 	ldr	r3, [r4, #196]	; 0xc4
    c678:	e3530000 	cmp	r3, #0
    c67c:	0a000003 	beq	c690 <CSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0x3c>
    c680:	e59f1088 	ldr	r1, [pc, #136]	; c710 <CSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0xbc>
    c684:	e59f2088 	ldr	r2, [pc, #136]	; c714 <CSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0xc0>
    c688:	e28100ac 	add	r0, r1, #172	; 0xac
    c68c:	eb000ecf 	bl	101d0 <assertion_failed>
    c690:	e3550000 	cmp	r5, #0
    c694:	0a000018 	beq	c6fc <CSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0xa8>
    c698:	e1d530d0 	ldrsb	r3, [r5]
    c69c:	e3530000 	cmp	r3, #0
    c6a0:	0a000005 	beq	c6bc <CSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0x68>
    c6a4:	e3560000 	cmp	r6, #0
    c6a8:	0a000009 	beq	c6d4 <CSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0x80>
    c6ac:	e58460cc 	str	r6, [r4, #204]	; 0xcc
    c6b0:	e58450c8 	str	r5, [r4, #200]	; 0xc8
    c6b4:	e58450c4 	str	r5, [r4, #196]	; 0xc4
    c6b8:	e8bd8070 	pop	{r4, r5, r6, pc}
    c6bc:	e59f104c 	ldr	r1, [pc, #76]	; c710 <CSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0xbc>
    c6c0:	e3a02f57 	mov	r2, #348	; 0x15c
    c6c4:	e28100c8 	add	r0, r1, #200	; 0xc8
    c6c8:	eb000ec0 	bl	101d0 <assertion_failed>
    c6cc:	e3560000 	cmp	r6, #0
    c6d0:	1afffff5 	bne	c6ac <CSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0x58>
    c6d4:	e59f1034 	ldr	r1, [pc, #52]	; c710 <CSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0xbc>
    c6d8:	e59f2038 	ldr	r2, [pc, #56]	; c718 <CSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0xc4>
    c6dc:	e28100d8 	add	r0, r1, #216	; 0xd8
    c6e0:	eb000eba 	bl	101d0 <assertion_failed>
    c6e4:	eafffff0 	b	c6ac <CSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0x58>
    c6e8:	e59f1020 	ldr	r1, [pc, #32]	; c710 <CSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0xbc>
    c6ec:	e3a02f56 	mov	r2, #344	; 0x158
    c6f0:	e281000c 	add	r0, r1, #12
    c6f4:	eb000eb5 	bl	101d0 <assertion_failed>
    c6f8:	eaffffdc 	b	c670 <CSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0x1c>
    c6fc:	e59f100c 	ldr	r1, [pc, #12]	; c710 <CSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0xbc>
    c700:	e59f2014 	ldr	r2, [pc, #20]	; c71c <CSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0xc8>
    c704:	e28100bc 	add	r0, r1, #188	; 0xbc
    c708:	eb000eb0 	bl	101d0 <assertion_failed>
    c70c:	eaffffe1 	b	c698 <CSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0x44>
    c710:	0001371c 	.word	0x0001371c
    c714:	00000159 	.word	0x00000159
    c718:	0000015d 	.word	0x0000015d
    c71c:	0000015b 	.word	0x0000015b

0000c720 <CSerialDevice::AvailableForWrite()>:
    c720:	e92d4010 	push	{r4, lr}
    c724:	e59030a4 	ldr	r3, [r0, #164]	; 0xa4
    c728:	e1a04000 	mov	r4, r0
    c72c:	e3530000 	cmp	r3, #0
    c730:	0a000014 	beq	c788 <CSerialDevice::AvailableForWrite()+0x68>
    c734:	e2844a01 	add	r4, r4, #4096	; 0x1000
    c738:	e59400d0 	ldr	r0, [r4, #208]	; 0xd0
    c73c:	e3500000 	cmp	r0, #0
    c740:	1a00000d 	bne	c77c <CSerialDevice::AvailableForWrite()+0x5c>
    c744:	e59420bc 	ldr	r2, [r4, #188]	; 0xbc
    c748:	e59430b8 	ldr	r3, [r4, #184]	; 0xb8
    c74c:	e1520003 	cmp	r2, r3
    c750:	e59430bc 	ldr	r3, [r4, #188]	; 0xbc
    c754:	e59420b8 	ldr	r2, [r4, #184]	; 0xb8
    c758:	92834e7f 	addls	r4, r3, #2032	; 0x7f0
    c75c:	9284400f 	addls	r4, r4, #15
    c760:	82434001 	subhi	r4, r3, #1
    c764:	e3500000 	cmp	r0, #0
    c768:	e0444002 	sub	r4, r4, r2
    c76c:	0a000000 	beq	c774 <CSerialDevice::AvailableForWrite()+0x54>
    c770:	eb000cd9 	bl	fadc <LeaveCritical>
    c774:	e1a00004 	mov	r0, r4
    c778:	e8bd8010 	pop	{r4, pc}
    c77c:	eb000ca9 	bl	fa28 <EnterCritical>
    c780:	e59400d0 	ldr	r0, [r4, #208]	; 0xd0
    c784:	eaffffee 	b	c744 <CSerialDevice::AvailableForWrite()+0x24>
    c788:	e59f100c 	ldr	r1, [pc, #12]	; c79c <CSerialDevice::AvailableForWrite()+0x7c>
    c78c:	e59f200c 	ldr	r2, [pc, #12]	; c7a0 <CSerialDevice::AvailableForWrite()+0x80>
    c790:	e281000c 	add	r0, r1, #12
    c794:	eb000e8d 	bl	101d0 <assertion_failed>
    c798:	eaffffe5 	b	c734 <CSerialDevice::AvailableForWrite()+0x14>
    c79c:	0001371c 	.word	0x0001371c
    c7a0:	00000167 	.word	0x00000167

0000c7a4 <CSerialDevice::AvailableForRead()>:
    c7a4:	e92d4070 	push	{r4, r5, r6, lr}
    c7a8:	e59030a4 	ldr	r3, [r0, #164]	; 0xa4
    c7ac:	e1a04000 	mov	r4, r0
    c7b0:	e3530000 	cmp	r3, #0
    c7b4:	0a000014 	beq	c80c <CSerialDevice::AvailableForRead()+0x68>
    c7b8:	e2845a01 	add	r5, r4, #4096	; 0x1000
    c7bc:	e59500d0 	ldr	r0, [r5, #208]	; 0xd0
    c7c0:	e3500000 	cmp	r0, #0
    c7c4:	1a00000d 	bne	c800 <CSerialDevice::AvailableForRead()+0x5c>
    c7c8:	e59428ac 	ldr	r2, [r4, #2220]	; 0x8ac
    c7cc:	e59438b0 	ldr	r3, [r4, #2224]	; 0x8b0
    c7d0:	e1520003 	cmp	r2, r3
    c7d4:	e59438ac 	ldr	r3, [r4, #2220]	; 0x8ac
    c7d8:	359428b0 	ldrcc	r2, [r4, #2224]	; 0x8b0
    c7dc:	259448b0 	ldrcs	r4, [r4, #2224]	; 0x8b0
    c7e0:	32834b02 	addcc	r4, r3, #2048	; 0x800
    c7e4:	30444002 	subcc	r4, r4, r2
    c7e8:	20434004 	subcs	r4, r3, r4
    c7ec:	e3500000 	cmp	r0, #0
    c7f0:	0a000000 	beq	c7f8 <CSerialDevice::AvailableForRead()+0x54>
    c7f4:	eb000cb8 	bl	fadc <LeaveCritical>
    c7f8:	e1a00004 	mov	r0, r4
    c7fc:	e8bd8070 	pop	{r4, r5, r6, pc}
    c800:	eb000c88 	bl	fa28 <EnterCritical>
    c804:	e59500d0 	ldr	r0, [r5, #208]	; 0xd0
    c808:	eaffffee 	b	c7c8 <CSerialDevice::AvailableForRead()+0x24>
    c80c:	e59f100c 	ldr	r1, [pc, #12]	; c820 <CSerialDevice::AvailableForRead()+0x7c>
    c810:	e3a02f5f 	mov	r2, #380	; 0x17c
    c814:	e281000c 	add	r0, r1, #12
    c818:	eb000e6c 	bl	101d0 <assertion_failed>
    c81c:	eaffffe5 	b	c7b8 <CSerialDevice::AvailableForRead()+0x14>
    c820:	0001371c 	.word	0x0001371c

0000c824 <CSerialDevice::Peek()>:
    c824:	e92d4070 	push	{r4, r5, r6, lr}
    c828:	e59030a4 	ldr	r3, [r0, #164]	; 0xa4
    c82c:	e1a04000 	mov	r4, r0
    c830:	e3530000 	cmp	r3, #0
    c834:	0a00001b 	beq	c8a8 <CSerialDevice::Peek()+0x84>
    c838:	e2845a01 	add	r5, r4, #4096	; 0x1000
    c83c:	e59500d0 	ldr	r0, [r5, #208]	; 0xd0
    c840:	e3500000 	cmp	r0, #0
    c844:	1a000008 	bne	c86c <CSerialDevice::Peek()+0x48>
    c848:	e59428ac 	ldr	r2, [r4, #2220]	; 0x8ac
    c84c:	e59438b0 	ldr	r3, [r4, #2224]	; 0x8b0
    c850:	e1520003 	cmp	r2, r3
    c854:	0a000018 	beq	c8bc <CSerialDevice::Peek()+0x98>
    c858:	e59438b0 	ldr	r3, [r4, #2224]	; 0x8b0
    c85c:	e0844003 	add	r4, r4, r3
    c860:	e5d440aa 	ldrb	r4, [r4, #170]	; 0xaa
    c864:	e1a00004 	mov	r0, r4
    c868:	e8bd8070 	pop	{r4, r5, r6, pc}
    c86c:	eb000c6d 	bl	fa28 <EnterCritical>
    c870:	e59428ac 	ldr	r2, [r4, #2220]	; 0x8ac
    c874:	e59438b0 	ldr	r3, [r4, #2224]	; 0x8b0
    c878:	e1520003 	cmp	r2, r3
    c87c:	159438b0 	ldrne	r3, [r4, #2224]	; 0x8b0
    c880:	059520d0 	ldreq	r2, [r5, #208]	; 0xd0
    c884:	159520d0 	ldrne	r2, [r5, #208]	; 0xd0
    c888:	10844003 	addne	r4, r4, r3
    c88c:	03e04000 	mvneq	r4, #0
    c890:	15d440aa 	ldrbne	r4, [r4, #170]	; 0xaa
    c894:	e3520000 	cmp	r2, #0
    c898:	0afffff1 	beq	c864 <CSerialDevice::Peek()+0x40>
    c89c:	eb000c8e 	bl	fadc <LeaveCritical>
    c8a0:	e1a00004 	mov	r0, r4
    c8a4:	e8bd8070 	pop	{r4, r5, r6, pc}
    c8a8:	e59f1014 	ldr	r1, [pc, #20]	; c8c4 <CSerialDevice::Peek()+0xa0>
    c8ac:	e59f2014 	ldr	r2, [pc, #20]	; c8c8 <CSerialDevice::Peek()+0xa4>
    c8b0:	e281000c 	add	r0, r1, #12
    c8b4:	eb000e45 	bl	101d0 <assertion_failed>
    c8b8:	eaffffde 	b	c838 <CSerialDevice::Peek()+0x14>
    c8bc:	e3e04000 	mvn	r4, #0
    c8c0:	eaffffe7 	b	c864 <CSerialDevice::Peek()+0x40>
    c8c4:	0001371c 	.word	0x0001371c
    c8c8:	00000191 	.word	0x00000191

0000c8cc <CSerialDevice::Flush()>:
    c8cc:	e3a03000 	mov	r3, #0
    c8d0:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
    c8d4:	e59f2010 	ldr	r2, [pc, #16]	; c8ec <CSerialDevice::Flush()+0x20>
    c8d8:	e5923018 	ldr	r3, [r2, #24]
    c8dc:	e2133008 	ands	r3, r3, #8
    c8e0:	1afffffc 	bne	c8d8 <CSerialDevice::Flush()+0xc>
    c8e4:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
    c8e8:	e12fff1e 	bx	lr
    c8ec:	20201000 	.word	0x20201000

0000c8f0 <CSerialDevice::Write(unsigned char)>:
    c8f0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    c8f4:	e59030a4 	ldr	r3, [r0, #164]	; 0xa4
    c8f8:	e3530000 	cmp	r3, #0
    c8fc:	0a000027 	beq	c9a0 <CSerialDevice::Write(unsigned char)+0xb0>
    c900:	e2805a01 	add	r5, r0, #4096	; 0x1000
    c904:	e59520d0 	ldr	r2, [r5, #208]	; 0xd0
    c908:	e1a06001 	mov	r6, r1
    c90c:	e3520000 	cmp	r2, #0
    c910:	e1a04000 	mov	r4, r0
    c914:	1a000015 	bne	c970 <CSerialDevice::Write(unsigned char)+0x80>
    c918:	e59530b8 	ldr	r3, [r5, #184]	; 0xb8
    c91c:	e59510bc 	ldr	r1, [r5, #188]	; 0xbc
    c920:	e2833001 	add	r3, r3, #1
    c924:	e1a03a83 	lsl	r3, r3, #21
    c928:	e1a03aa3 	lsr	r3, r3, #21
    c92c:	e1530001 	cmp	r3, r1
    c930:	0a000024 	beq	c9c8 <CSerialDevice::Write(unsigned char)+0xd8>
    c934:	e3a07001 	mov	r7, #1
    c938:	e59530b8 	ldr	r3, [r5, #184]	; 0xb8
    c93c:	e0840003 	add	r0, r4, r3
    c940:	e0833007 	add	r3, r3, r7
    c944:	e58530b8 	str	r3, [r5, #184]	; 0xb8
    c948:	e5c068b8 	strb	r6, [r0, #2232]	; 0x8b8
    c94c:	e59530b8 	ldr	r3, [r5, #184]	; 0xb8
    c950:	e1a03a83 	lsl	r3, r3, #21
    c954:	e1a03aa3 	lsr	r3, r3, #21
    c958:	e58530b8 	str	r3, [r5, #184]	; 0xb8
    c95c:	e3520000 	cmp	r2, #0
    c960:	0a000000 	beq	c968 <CSerialDevice::Write(unsigned char)+0x78>
    c964:	eb000c5c 	bl	fadc <LeaveCritical>
    c968:	e1a00007 	mov	r0, r7
    c96c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    c970:	e1a00002 	mov	r0, r2
    c974:	eb000c2b 	bl	fa28 <EnterCritical>
    c978:	e59530b8 	ldr	r3, [r5, #184]	; 0xb8
    c97c:	e59520bc 	ldr	r2, [r5, #188]	; 0xbc
    c980:	e2833001 	add	r3, r3, #1
    c984:	e1a03a83 	lsl	r3, r3, #21
    c988:	e1a03aa3 	lsr	r3, r3, #21
    c98c:	e1530002 	cmp	r3, r2
    c990:	03a07000 	moveq	r7, #0
    c994:	e59520d0 	ldr	r2, [r5, #208]	; 0xd0
    c998:	1affffe5 	bne	c934 <CSerialDevice::Write(unsigned char)+0x44>
    c99c:	eaffffee 	b	c95c <CSerialDevice::Write(unsigned char)+0x6c>
    c9a0:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
    c9a4:	e59f2028 	ldr	r2, [pc, #40]	; c9d4 <CSerialDevice::Write(unsigned char)+0xe4>
    c9a8:	e5923018 	ldr	r3, [r2, #24]
    c9ac:	e2133020 	ands	r3, r3, #32
    c9b0:	1afffffc 	bne	c9a8 <CSerialDevice::Write(unsigned char)+0xb8>
    c9b4:	e5821000 	str	r1, [r2]
    c9b8:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
    c9bc:	e3a07001 	mov	r7, #1
    c9c0:	e1a00007 	mov	r0, r7
    c9c4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    c9c8:	e1a07002 	mov	r7, r2
    c9cc:	e1a00007 	mov	r0, r7
    c9d0:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    c9d4:	20201000 	.word	0x20201000

0000c9d8 <CSerialDevice::InterruptHandler()>:
    c9d8:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    c9dc:	e2804a01 	add	r4, r0, #4096	; 0x1000
    c9e0:	e1a05000 	mov	r5, r0
    c9e4:	e59400d0 	ldr	r0, [r4, #208]	; 0xd0
    c9e8:	e3500000 	cmp	r0, #0
    c9ec:	1a00006a 	bne	cb9c <CSerialDevice::InterruptHandler()+0x1c4>
    c9f0:	e3a06000 	mov	r6, #0
    c9f4:	ee076f9a 	mcr	15, 0, r6, cr7, cr10, {4}
    c9f8:	e59f31b4 	ldr	r3, [pc, #436]	; cbb4 <CSerialDevice::InterruptHandler()+0x1dc>
    c9fc:	e3e07002 	mvn	r7, #2
    ca00:	e1a01003 	mov	r1, r3
    ca04:	e3e0c001 	mvn	ip, #1
    ca08:	e3e0e000 	mvn	lr, #0
    ca0c:	e5932040 	ldr	r2, [r3, #64]	; 0x40
    ca10:	e59f01a0 	ldr	r0, [pc, #416]	; cbb8 <CSerialDevice::InterruptHandler()+0x1e0>
    ca14:	e5832044 	str	r2, [r3, #68]	; 0x44
    ca18:	e5913018 	ldr	r3, [r1, #24]
    ca1c:	e3130010 	tst	r3, #16
    ca20:	1a000024 	bne	cab8 <CSerialDevice::InterruptHandler()+0xe0>
    ca24:	e5912000 	ldr	r2, [r1]
    ca28:	e3120b01 	tst	r2, #1024	; 0x400
    ca2c:	0a000045 	beq	cb48 <CSerialDevice::InterruptHandler()+0x170>
    ca30:	e59538b4 	ldr	r3, [r5, #2228]	; 0x8b4
    ca34:	e3530000 	cmp	r3, #0
    ca38:	0585e8b4 	streq	lr, [r5, #2228]	; 0x8b4
    ca3c:	e59480c4 	ldr	r8, [r4, #196]	; 0xc4
    ca40:	e3580000 	cmp	r8, #0
    ca44:	0a00000a 	beq	ca74 <CSerialDevice::InterruptHandler()+0x9c>
    ca48:	e59490c8 	ldr	r9, [r4, #200]	; 0xc8
    ca4c:	e6af3072 	sxtb	r3, r2
    ca50:	e1d9a0d0 	ldrsb	sl, [r9]
    ca54:	e15a0003 	cmp	sl, r3
    ca58:	158480c8 	strne	r8, [r4, #200]	; 0xc8
    ca5c:	1a000004 	bne	ca74 <CSerialDevice::InterruptHandler()+0x9c>
    ca60:	e2893001 	add	r3, r9, #1
    ca64:	e58430c8 	str	r3, [r4, #200]	; 0xc8
    ca68:	e1d930d1 	ldrsb	r3, [r9, #1]
    ca6c:	e3530000 	cmp	r3, #0
    ca70:	03a06001 	moveq	r6, #1
    ca74:	e59538ac 	ldr	r3, [r5, #2220]	; 0x8ac
    ca78:	e59588b0 	ldr	r8, [r5, #2224]	; 0x8b0
    ca7c:	e2833001 	add	r3, r3, #1
    ca80:	e0033000 	and	r3, r3, r0
    ca84:	e1530008 	cmp	r3, r8
    ca88:	0a000034 	beq	cb60 <CSerialDevice::InterruptHandler()+0x188>
    ca8c:	e59538ac 	ldr	r3, [r5, #2220]	; 0x8ac
    ca90:	e2838001 	add	r8, r3, #1
    ca94:	e0853003 	add	r3, r5, r3
    ca98:	e58588ac 	str	r8, [r5, #2220]	; 0x8ac
    ca9c:	e5c320aa 	strb	r2, [r3, #170]	; 0xaa
    caa0:	e59538ac 	ldr	r3, [r5, #2220]	; 0x8ac
    caa4:	e0033000 	and	r3, r3, r0
    caa8:	e58538ac 	str	r3, [r5, #2220]	; 0x8ac
    caac:	e5913018 	ldr	r3, [r1, #24]
    cab0:	e3130010 	tst	r3, #16
    cab4:	0affffda 	beq	ca24 <CSerialDevice::InterruptHandler()+0x4c>
    cab8:	e5913018 	ldr	r3, [r1, #24]
    cabc:	e3130020 	tst	r3, #32
    cac0:	1a000016 	bne	cb20 <CSerialDevice::InterruptHandler()+0x148>
    cac4:	e59430b8 	ldr	r3, [r4, #184]	; 0xb8
    cac8:	e59420bc 	ldr	r2, [r4, #188]	; 0xbc
    cacc:	e1520003 	cmp	r2, r3
    cad0:	0a00002c 	beq	cb88 <CSerialDevice::InterruptHandler()+0x1b0>
    cad4:	e59f20d8 	ldr	r2, [pc, #216]	; cbb4 <CSerialDevice::InterruptHandler()+0x1dc>
    cad8:	e59f00d8 	ldr	r0, [pc, #216]	; cbb8 <CSerialDevice::InterruptHandler()+0x1e0>
    cadc:	ea000003 	b	caf0 <CSerialDevice::InterruptHandler()+0x118>
    cae0:	e59410b8 	ldr	r1, [r4, #184]	; 0xb8
    cae4:	e59430bc 	ldr	r3, [r4, #188]	; 0xbc
    cae8:	e1510003 	cmp	r1, r3
    caec:	0a000025 	beq	cb88 <CSerialDevice::InterruptHandler()+0x1b0>
    caf0:	e59430bc 	ldr	r3, [r4, #188]	; 0xbc
    caf4:	e2831001 	add	r1, r3, #1
    caf8:	e58410bc 	str	r1, [r4, #188]	; 0xbc
    cafc:	e0853003 	add	r3, r5, r3
    cb00:	e5d338b8 	ldrb	r3, [r3, #2232]	; 0x8b8
    cb04:	e5823000 	str	r3, [r2]
    cb08:	e59430bc 	ldr	r3, [r4, #188]	; 0xbc
    cb0c:	e0033000 	and	r3, r3, r0
    cb10:	e58430bc 	str	r3, [r4, #188]	; 0xbc
    cb14:	e5923018 	ldr	r3, [r2, #24]
    cb18:	e3130020 	tst	r3, #32
    cb1c:	0affffef 	beq	cae0 <CSerialDevice::InterruptHandler()+0x108>
    cb20:	e3a03000 	mov	r3, #0
    cb24:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
    cb28:	e59430d0 	ldr	r3, [r4, #208]	; 0xd0
    cb2c:	e3530000 	cmp	r3, #0
    cb30:	1a00001b 	bne	cba4 <CSerialDevice::InterruptHandler()+0x1cc>
    cb34:	e3560000 	cmp	r6, #0
    cb38:	08bd87f0 	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
    cb3c:	e59430cc 	ldr	r3, [r4, #204]	; 0xcc
    cb40:	e8bd47f0 	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
    cb44:	e12fff13 	bx	r3
    cb48:	e3120b02 	tst	r2, #2048	; 0x800
    cb4c:	0a000007 	beq	cb70 <CSerialDevice::InterruptHandler()+0x198>
    cb50:	e59538b4 	ldr	r3, [r5, #2228]	; 0x8b4
    cb54:	e3530000 	cmp	r3, #0
    cb58:	0585c8b4 	streq	ip, [r5, #2228]	; 0x8b4
    cb5c:	eaffffb6 	b	ca3c <CSerialDevice::InterruptHandler()+0x64>
    cb60:	e59538b4 	ldr	r3, [r5, #2228]	; 0x8b4
    cb64:	e3530000 	cmp	r3, #0
    cb68:	0585c8b4 	streq	ip, [r5, #2228]	; 0x8b4
    cb6c:	eaffffa9 	b	ca18 <CSerialDevice::InterruptHandler()+0x40>
    cb70:	e3120c01 	tst	r2, #256	; 0x100
    cb74:	0affffb0 	beq	ca3c <CSerialDevice::InterruptHandler()+0x64>
    cb78:	e59538b4 	ldr	r3, [r5, #2228]	; 0x8b4
    cb7c:	e3530000 	cmp	r3, #0
    cb80:	058578b4 	streq	r7, [r5, #2228]	; 0x8b4
    cb84:	eaffffac 	b	ca3c <CSerialDevice::InterruptHandler()+0x64>
    cb88:	e59f2024 	ldr	r2, [pc, #36]	; cbb4 <CSerialDevice::InterruptHandler()+0x1dc>
    cb8c:	e5923038 	ldr	r3, [r2, #56]	; 0x38
    cb90:	e3c33020 	bic	r3, r3, #32
    cb94:	e5823038 	str	r3, [r2, #56]	; 0x38
    cb98:	eaffffe0 	b	cb20 <CSerialDevice::InterruptHandler()+0x148>
    cb9c:	eb000ba1 	bl	fa28 <EnterCritical>
    cba0:	eaffff92 	b	c9f0 <CSerialDevice::InterruptHandler()+0x18>
    cba4:	eb000bcc 	bl	fadc <LeaveCritical>
    cba8:	e3560000 	cmp	r6, #0
    cbac:	1affffe2 	bne	cb3c <CSerialDevice::InterruptHandler()+0x164>
    cbb0:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    cbb4:	20201000 	.word	0x20201000
    cbb8:	000007ff 	.word	0x000007ff

0000cbbc <CSerialDevice::InterruptStub(void*)>:
    cbbc:	e92d4010 	push	{r4, lr}
    cbc0:	e2504000 	subs	r4, r0, #0
    cbc4:	0a000002 	beq	cbd4 <CSerialDevice::InterruptStub(void*)+0x18>
    cbc8:	e1a00004 	mov	r0, r4
    cbcc:	e8bd4010 	pop	{r4, lr}
    cbd0:	eaffff80 	b	c9d8 <CSerialDevice::InterruptHandler()>
    cbd4:	e59f1014 	ldr	r1, [pc, #20]	; cbf0 <CSerialDevice::InterruptStub(void*)+0x34>
    cbd8:	e59f2014 	ldr	r2, [pc, #20]	; cbf4 <CSerialDevice::InterruptStub(void*)+0x38>
    cbdc:	e28100e8 	add	r0, r1, #232	; 0xe8
    cbe0:	eb000d7a 	bl	101d0 <assertion_failed>
    cbe4:	e1a00004 	mov	r0, r4
    cbe8:	e8bd4010 	pop	{r4, lr}
    cbec:	eaffff79 	b	c9d8 <CSerialDevice::InterruptHandler()>
    cbf0:	0001371c 	.word	0x0001371c
    cbf4:	0000022e 	.word	0x0000022e

0000cbf8 <CString::~CString()>:
    cbf8:	e92d4010 	push	{r4, lr}
    cbfc:	e1a04000 	mov	r4, r0
    cc00:	e5900004 	ldr	r0, [r0, #4]
    cc04:	e59f3014 	ldr	r3, [pc, #20]	; cc20 <CString::~CString()+0x28>
    cc08:	e3500000 	cmp	r0, #0
    cc0c:	e5843000 	str	r3, [r4]
    cc10:	0a000000 	beq	cc18 <CString::~CString()+0x20>
    cc14:	eb000be0 	bl	fb9c <operator delete[](void*)>
    cc18:	e1a00004 	mov	r0, r4
    cc1c:	e8bd8010 	pop	{r4, pc}
    cc20:	00013818 	.word	0x00013818

0000cc24 <CString::~CString()>:
    cc24:	e92d4010 	push	{r4, lr}
    cc28:	e1a04000 	mov	r4, r0
    cc2c:	e5900004 	ldr	r0, [r0, #4]
    cc30:	e59f3020 	ldr	r3, [pc, #32]	; cc58 <CString::~CString()+0x34>
    cc34:	e3500000 	cmp	r0, #0
    cc38:	e5843000 	str	r3, [r4]
    cc3c:	0a000000 	beq	cc44 <CString::~CString()+0x20>
    cc40:	eb000bd5 	bl	fb9c <operator delete[](void*)>
    cc44:	e1a00004 	mov	r0, r4
    cc48:	e3a01010 	mov	r1, #16
    cc4c:	eb000bd3 	bl	fba0 <operator delete(void*, unsigned int)>
    cc50:	e1a00004 	mov	r0, r4
    cc54:	e8bd8010 	pop	{r4, pc}
    cc58:	00013818 	.word	0x00013818

0000cc5c <CString::ReserveSpace(unsigned int) [clone .part.0]>:
    cc5c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    cc60:	e990002c 	ldmib	r0, {r2, r3, r5}
    cc64:	e0455002 	sub	r5, r5, r2
    cc68:	e0851001 	add	r1, r5, r1
    cc6c:	e2812001 	add	r2, r1, #1
    cc70:	e1520003 	cmp	r2, r3
    cc74:	98bd81f0 	popls	{r4, r5, r6, r7, r8, pc}
    cc78:	e1a04000 	mov	r4, r0
    cc7c:	e2816041 	add	r6, r1, #65	; 0x41
    cc80:	e1a00006 	mov	r0, r6
    cc84:	eb000bc2 	bl	fb94 <operator new[](unsigned int)>
    cc88:	e3a02000 	mov	r2, #0
    cc8c:	e594300c 	ldr	r3, [r4, #12]
    cc90:	e1a07000 	mov	r7, r0
    cc94:	e5c32000 	strb	r2, [r3]
    cc98:	e5941004 	ldr	r1, [r4, #4]
    cc9c:	eb000898 	bl	ef04 <strcpy>
    cca0:	e5940004 	ldr	r0, [r4, #4]
    cca4:	e3500000 	cmp	r0, #0
    cca8:	0a000000 	beq	ccb0 <CString::ReserveSpace(unsigned int) [clone .part.0]+0x54>
    ccac:	eb000bba 	bl	fb9c <operator delete[](void*)>
    ccb0:	e0875005 	add	r5, r7, r5
    ccb4:	e584500c 	str	r5, [r4, #12]
    ccb8:	e5847004 	str	r7, [r4, #4]
    ccbc:	e5846008 	str	r6, [r4, #8]
    ccc0:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

0000ccc4 <CString::CString()>:
    ccc4:	e3a02000 	mov	r2, #0
    ccc8:	e59f1008 	ldr	r1, [pc, #8]	; ccd8 <CString::CString()+0x14>
    cccc:	e5802008 	str	r2, [r0, #8]
    ccd0:	e8800006 	stm	r0, {r1, r2}
    ccd4:	e12fff1e 	bx	lr
    ccd8:	00013818 	.word	0x00013818

0000ccdc <CString::CString(char const*)>:
    ccdc:	e92d4070 	push	{r4, r5, r6, lr}
    cce0:	e1a04000 	mov	r4, r0
    cce4:	e59f302c 	ldr	r3, [pc, #44]	; cd18 <CString::CString(char const*)+0x3c>
    cce8:	e1a00001 	mov	r0, r1
    ccec:	e5843000 	str	r3, [r4]
    ccf0:	e1a05001 	mov	r5, r1
    ccf4:	eb000818 	bl	ed5c <strlen>
    ccf8:	e2800001 	add	r0, r0, #1
    ccfc:	e5840008 	str	r0, [r4, #8]
    cd00:	eb000ba3 	bl	fb94 <operator new[](unsigned int)>
    cd04:	e1a01005 	mov	r1, r5
    cd08:	e5840004 	str	r0, [r4, #4]
    cd0c:	eb00087c 	bl	ef04 <strcpy>
    cd10:	e1a00004 	mov	r0, r4
    cd14:	e8bd8070 	pop	{r4, r5, r6, pc}
    cd18:	00013818 	.word	0x00013818

0000cd1c <CString::operator char const*() const>:
    cd1c:	e5900004 	ldr	r0, [r0, #4]
    cd20:	e59f3008 	ldr	r3, [pc, #8]	; cd30 <CString::operator char const*() const+0x14>
    cd24:	e3500000 	cmp	r0, #0
    cd28:	01a00003 	moveq	r0, r3
    cd2c:	e12fff1e 	bx	lr
    cd30:	00013b08 	.word	0x00013b08

0000cd34 <CString::operator=(char const*)>:
    cd34:	e92d4070 	push	{r4, r5, r6, lr}
    cd38:	e1a04000 	mov	r4, r0
    cd3c:	e5900004 	ldr	r0, [r0, #4]
    cd40:	e1a05001 	mov	r5, r1
    cd44:	e3500000 	cmp	r0, #0
    cd48:	0a000000 	beq	cd50 <CString::operator=(char const*)+0x1c>
    cd4c:	eb000b92 	bl	fb9c <operator delete[](void*)>
    cd50:	e1a00005 	mov	r0, r5
    cd54:	eb000800 	bl	ed5c <strlen>
    cd58:	e2800001 	add	r0, r0, #1
    cd5c:	e5840008 	str	r0, [r4, #8]
    cd60:	eb000b8b 	bl	fb94 <operator new[](unsigned int)>
    cd64:	e1a01005 	mov	r1, r5
    cd68:	e5840004 	str	r0, [r4, #4]
    cd6c:	eb000864 	bl	ef04 <strcpy>
    cd70:	e5940004 	ldr	r0, [r4, #4]
    cd74:	e8bd8070 	pop	{r4, r5, r6, pc}

0000cd78 <CString::operator=(CString const&)>:
    cd78:	e92d4070 	push	{r4, r5, r6, lr}
    cd7c:	e1a04000 	mov	r4, r0
    cd80:	e5900004 	ldr	r0, [r0, #4]
    cd84:	e1a06001 	mov	r6, r1
    cd88:	e3500000 	cmp	r0, #0
    cd8c:	0a000000 	beq	cd94 <CString::operator=(CString const&)+0x1c>
    cd90:	eb000b81 	bl	fb9c <operator delete[](void*)>
    cd94:	e5960004 	ldr	r0, [r6, #4]
    cd98:	e59f5030 	ldr	r5, [pc, #48]	; cdd0 <CString::operator=(CString const&)+0x58>
    cd9c:	e3500000 	cmp	r0, #0
    cda0:	01a00005 	moveq	r0, r5
    cda4:	eb0007ec 	bl	ed5c <strlen>
    cda8:	e2800001 	add	r0, r0, #1
    cdac:	e5840008 	str	r0, [r4, #8]
    cdb0:	eb000b77 	bl	fb94 <operator new[](unsigned int)>
    cdb4:	e5840004 	str	r0, [r4, #4]
    cdb8:	e5961004 	ldr	r1, [r6, #4]
    cdbc:	e3510000 	cmp	r1, #0
    cdc0:	01a01005 	moveq	r1, r5
    cdc4:	eb00084e 	bl	ef04 <strcpy>
    cdc8:	e1a00004 	mov	r0, r4
    cdcc:	e8bd8070 	pop	{r4, r5, r6, pc}
    cdd0:	00013b08 	.word	0x00013b08

0000cdd4 <CString::GetLength() const>:
    cdd4:	e5900004 	ldr	r0, [r0, #4]
    cdd8:	e3500000 	cmp	r0, #0
    cddc:	012fff1e 	bxeq	lr
    cde0:	ea0007dd 	b	ed5c <strlen>

0000cde4 <CString::Append(char const*)>:
    cde4:	e92d4070 	push	{r4, r5, r6, lr}
    cde8:	e3a03001 	mov	r3, #1
    cdec:	e1a04000 	mov	r4, r0
    cdf0:	e5900004 	ldr	r0, [r0, #4]
    cdf4:	e1a06001 	mov	r6, r1
    cdf8:	e3500000 	cmp	r0, #0
    cdfc:	e5843008 	str	r3, [r4, #8]
    ce00:	0a000003 	beq	ce14 <CString::Append(char const*)+0x30>
    ce04:	eb0007d4 	bl	ed5c <strlen>
    ce08:	e5943008 	ldr	r3, [r4, #8]
    ce0c:	e0830000 	add	r0, r3, r0
    ce10:	e5840008 	str	r0, [r4, #8]
    ce14:	e1a00006 	mov	r0, r6
    ce18:	eb0007cf 	bl	ed5c <strlen>
    ce1c:	e5943008 	ldr	r3, [r4, #8]
    ce20:	e0800003 	add	r0, r0, r3
    ce24:	e5840008 	str	r0, [r4, #8]
    ce28:	eb000b59 	bl	fb94 <operator new[](unsigned int)>
    ce2c:	e5941004 	ldr	r1, [r4, #4]
    ce30:	e1a05000 	mov	r5, r0
    ce34:	e3510000 	cmp	r1, #0
    ce38:	05c01000 	strbeq	r1, [r0]
    ce3c:	0a000004 	beq	ce54 <CString::Append(char const*)+0x70>
    ce40:	eb00082f 	bl	ef04 <strcpy>
    ce44:	e5940004 	ldr	r0, [r4, #4]
    ce48:	e3500000 	cmp	r0, #0
    ce4c:	0a000000 	beq	ce54 <CString::Append(char const*)+0x70>
    ce50:	eb000b51 	bl	fb9c <operator delete[](void*)>
    ce54:	e1a01006 	mov	r1, r6
    ce58:	e1a00005 	mov	r0, r5
    ce5c:	eb000845 	bl	ef78 <strcat>
    ce60:	e5845004 	str	r5, [r4, #4]
    ce64:	e8bd8070 	pop	{r4, r5, r6, pc}

0000ce68 <CString::Compare(char const*) const>:
    ce68:	e5900004 	ldr	r0, [r0, #4]
    ce6c:	ea0007c4 	b	ed84 <strcmp>

0000ce70 <CString::Find(char) const>:
    ce70:	e5902004 	ldr	r2, [r0, #4]
    ce74:	e1d230d0 	ldrsb	r3, [r2]
    ce78:	e3530000 	cmp	r3, #0
    ce7c:	0a000009 	beq	cea8 <CString::Find(char) const+0x38>
    ce80:	e1510003 	cmp	r1, r3
    ce84:	e3a00000 	mov	r0, #0
    ce88:	1a000002 	bne	ce98 <CString::Find(char) const+0x28>
    ce8c:	e12fff1e 	bx	lr
    ce90:	e1530001 	cmp	r3, r1
    ce94:	012fff1e 	bxeq	lr
    ce98:	e1f230d1 	ldrsb	r3, [r2, #1]!
    ce9c:	e2800001 	add	r0, r0, #1
    cea0:	e3530000 	cmp	r3, #0
    cea4:	1afffff9 	bne	ce90 <CString::Find(char) const+0x20>
    cea8:	e3e00000 	mvn	r0, #0
    ceac:	e12fff1e 	bx	lr

0000ceb0 <CString::PutChar(char, unsigned int)>:
    ceb0:	e92d4070 	push	{r4, r5, r6, lr}
    ceb4:	e2524000 	subs	r4, r2, #0
    ceb8:	08bd8070 	popeq	{r4, r5, r6, pc}
    cebc:	e1a06001 	mov	r6, r1
    cec0:	e1a01004 	mov	r1, r4
    cec4:	e1a05000 	mov	r5, r0
    cec8:	ebffff63 	bl	cc5c <CString::ReserveSpace(unsigned int) [clone .part.0]>
    cecc:	e2443001 	sub	r3, r4, #1
    ced0:	e595200c 	ldr	r2, [r5, #12]
    ced4:	e2433001 	sub	r3, r3, #1
    ced8:	e2820001 	add	r0, r2, #1
    cedc:	e3730001 	cmn	r3, #1
    cee0:	e585000c 	str	r0, [r5, #12]
    cee4:	e5c26000 	strb	r6, [r2]
    cee8:	1afffff8 	bne	ced0 <CString::PutChar(char, unsigned int)+0x20>
    ceec:	e8bd8070 	pop	{r4, r5, r6, pc}

0000cef0 <CString::PutString(char const*)>:
    cef0:	e92d4070 	push	{r4, r5, r6, lr}
    cef4:	e1a04000 	mov	r4, r0
    cef8:	e1a00001 	mov	r0, r1
    cefc:	e1a05001 	mov	r5, r1
    cf00:	eb000795 	bl	ed5c <strlen>
    cf04:	e2506000 	subs	r6, r0, #0
    cf08:	0a000002 	beq	cf18 <CString::PutString(char const*)+0x28>
    cf0c:	e1a01006 	mov	r1, r6
    cf10:	e1a00004 	mov	r0, r4
    cf14:	ebffff50 	bl	cc5c <CString::ReserveSpace(unsigned int) [clone .part.0]>
    cf18:	e1a01005 	mov	r1, r5
    cf1c:	e594000c 	ldr	r0, [r4, #12]
    cf20:	eb0007f7 	bl	ef04 <strcpy>
    cf24:	e594100c 	ldr	r1, [r4, #12]
    cf28:	e0811006 	add	r1, r1, r6
    cf2c:	e584100c 	str	r1, [r4, #12]
    cf30:	e8bd8070 	pop	{r4, r5, r6, pc}

0000cf34 <CString::Replace(char const*, char const*)>:
    cf34:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    cf38:	e1d180d0 	ldrsb	r8, [r1]
    cf3c:	e24dd010 	sub	sp, sp, #16
    cf40:	e3580000 	cmp	r8, #0
    cf44:	1a000002 	bne	cf54 <CString::Replace(char const*, char const*)+0x20>
    cf48:	e1a00008 	mov	r0, r8
    cf4c:	e28dd010 	add	sp, sp, #16
    cf50:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    cf54:	e1a06000 	mov	r6, r0
    cf58:	e1a07001 	mov	r7, r1
    cf5c:	e5901004 	ldr	r1, [r0, #4]
    cf60:	e1a0000d 	mov	r0, sp
    cf64:	e1a09002 	mov	r9, r2
    cf68:	ebffff5b 	bl	ccdc <CString::CString(char const*)>
    cf6c:	e5960004 	ldr	r0, [r6, #4]
    cf70:	e3500000 	cmp	r0, #0
    cf74:	0a000000 	beq	cf7c <CString::Replace(char const*, char const*)+0x48>
    cf78:	eb000b07 	bl	fb9c <operator delete[](void*)>
    cf7c:	e3a00040 	mov	r0, #64	; 0x40
    cf80:	e5860008 	str	r0, [r6, #8]
    cf84:	eb000b02 	bl	fb94 <operator new[](unsigned int)>
    cf88:	e3a08000 	mov	r8, #0
    cf8c:	e59d4004 	ldr	r4, [sp, #4]
    cf90:	e5860004 	str	r0, [r6, #4]
    cf94:	e586000c 	str	r0, [r6, #12]
    cf98:	e1d710d0 	ldrsb	r1, [r7]
    cf9c:	e1a00004 	mov	r0, r4
    cfa0:	eb000805 	bl	efbc <strchr>
    cfa4:	e2505000 	subs	r5, r0, #0
    cfa8:	0a00002d 	beq	d064 <CString::Replace(char const*, char const*)+0x130>
    cfac:	e1540005 	cmp	r4, r5
    cfb0:	2a000039 	bcs	d09c <CString::Replace(char const*, char const*)+0x168>
    cfb4:	e3a01001 	mov	r1, #1
    cfb8:	e1a00006 	mov	r0, r6
    cfbc:	e0d4a0d1 	ldrsb	sl, [r4], #1
    cfc0:	ebffff25 	bl	cc5c <CString::ReserveSpace(unsigned int) [clone .part.0]>
    cfc4:	e596300c 	ldr	r3, [r6, #12]
    cfc8:	e1550004 	cmp	r5, r4
    cfcc:	e2832001 	add	r2, r3, #1
    cfd0:	e586200c 	str	r2, [r6, #12]
    cfd4:	e5c3a000 	strb	sl, [r3]
    cfd8:	1afffff5 	bne	cfb4 <CString::Replace(char const*, char const*)+0x80>
    cfdc:	e1a0c005 	mov	ip, r5
    cfe0:	e2854001 	add	r4, r5, #1
    cfe4:	e1d730d1 	ldrsb	r3, [r7, #1]
    cfe8:	e2871001 	add	r1, r7, #1
    cfec:	e3530000 	cmp	r3, #0
    cff0:	0a00000c 	beq	d028 <CString::Replace(char const*, char const*)+0xf4>
    cff4:	e1d520d1 	ldrsb	r2, [r5, #1]
    cff8:	e1520003 	cmp	r2, r3
    cffc:	1a00000e 	bne	d03c <CString::Replace(char const*, char const*)+0x108>
    d000:	e2853002 	add	r3, r5, #2
    d004:	ea000003 	b	d018 <CString::Replace(char const*, char const*)+0xe4>
    d008:	e1d400d0 	ldrsb	r0, [r4]
    d00c:	e2833001 	add	r3, r3, #1
    d010:	e1500002 	cmp	r0, r2
    d014:	1a000008 	bne	d03c <CString::Replace(char const*, char const*)+0x108>
    d018:	e1f120d1 	ldrsb	r2, [r1, #1]!
    d01c:	e1a04003 	mov	r4, r3
    d020:	e3520000 	cmp	r2, #0
    d024:	1afffff7 	bne	d008 <CString::Replace(char const*, char const*)+0xd4>
    d028:	e1a01009 	mov	r1, r9
    d02c:	e1a00006 	mov	r0, r6
    d030:	e2888001 	add	r8, r8, #1
    d034:	ebffffad 	bl	cef0 <CString::PutString(char const*)>
    d038:	eaffffd6 	b	cf98 <CString::Replace(char const*, char const*)+0x64>
    d03c:	e3a01001 	mov	r1, #1
    d040:	e1a00006 	mov	r0, r6
    d044:	e1dc50d0 	ldrsb	r5, [ip]
    d048:	e08c4001 	add	r4, ip, r1
    d04c:	ebffff02 	bl	cc5c <CString::ReserveSpace(unsigned int) [clone .part.0]>
    d050:	e596300c 	ldr	r3, [r6, #12]
    d054:	e2832001 	add	r2, r3, #1
    d058:	e586200c 	str	r2, [r6, #12]
    d05c:	e5c35000 	strb	r5, [r3]
    d060:	eaffffcc 	b	cf98 <CString::Replace(char const*, char const*)+0x64>
    d064:	e1a00006 	mov	r0, r6
    d068:	e1a01004 	mov	r1, r4
    d06c:	ebffff9f 	bl	cef0 <CString::PutString(char const*)>
    d070:	e596200c 	ldr	r2, [r6, #12]
    d074:	e59f302c 	ldr	r3, [pc, #44]	; d0a8 <CString::Replace(char const*, char const*)+0x174>
    d078:	e5c25000 	strb	r5, [r2]
    d07c:	e59d0004 	ldr	r0, [sp, #4]
    d080:	e58d3000 	str	r3, [sp]
    d084:	e3500000 	cmp	r0, #0
    d088:	0affffae 	beq	cf48 <CString::Replace(char const*, char const*)+0x14>
    d08c:	eb000ac2 	bl	fb9c <operator delete[](void*)>
    d090:	e1a00008 	mov	r0, r8
    d094:	e28dd010 	add	sp, sp, #16
    d098:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    d09c:	e1a0c004 	mov	ip, r4
    d0a0:	e2854001 	add	r4, r5, #1
    d0a4:	eaffffce 	b	cfe4 <CString::Replace(char const*, char const*)+0xb0>
    d0a8:	00013818 	.word	0x00013818

0000d0ac <CString::ReserveSpace(unsigned int)>:
    d0ac:	e3510000 	cmp	r1, #0
    d0b0:	012fff1e 	bxeq	lr
    d0b4:	eafffee8 	b	cc5c <CString::ReserveSpace(unsigned int) [clone .part.0]>

0000d0b8 <CString::ntoa(char*, unsigned long, unsigned int, bool)>:
    d0b8:	e1510002 	cmp	r1, r2
    d0bc:	e92d4ff8 	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d0c0:	e1a05001 	mov	r5, r1
    d0c4:	e1a06002 	mov	r6, r2
    d0c8:	e1a09000 	mov	r9, r0
    d0cc:	e1a07003 	mov	r7, r3
    d0d0:	23a0a001 	movcs	sl, #1
    d0d4:	3a000024 	bcc	d16c <CString::ntoa(char*, unsigned long, unsigned int, bool)+0xb4>
    d0d8:	e00a0a96 	mul	sl, r6, sl
    d0dc:	e1a00005 	mov	r0, r5
    d0e0:	e1a0100a 	mov	r1, sl
    d0e4:	eb0017ac 	bl	12f9c <__udivsi3>
    d0e8:	e1500006 	cmp	r0, r6
    d0ec:	e1a04000 	mov	r4, r0
    d0f0:	2afffff8 	bcs	d0d8 <CString::ntoa(char*, unsigned long, unsigned int, bool)+0x20>
    d0f4:	e3570000 	cmp	r7, #0
    d0f8:	13a08037 	movne	r8, #55	; 0x37
    d0fc:	03a08057 	moveq	r8, #87	; 0x57
    d100:	e1a07009 	mov	r7, r9
    d104:	ea000004 	b	d11c <CString::ntoa(char*, unsigned long, unsigned int, bool)+0x64>
    d108:	e1a0100a 	mov	r1, sl
    d10c:	e1a00005 	mov	r0, r5
    d110:	eb0017a1 	bl	12f9c <__udivsi3>
    d114:	e1a0700b 	mov	r7, fp
    d118:	e1a04000 	mov	r4, r0
    d11c:	e1a00005 	mov	r0, r5
    d120:	e1a0100a 	mov	r1, sl
    d124:	eb0017d9 	bl	13090 <__aeabi_uidivmod>
    d128:	e1a0b007 	mov	fp, r7
    d12c:	e3540009 	cmp	r4, #9
    d130:	e6ef4074 	uxtb	r4, r4
    d134:	e2843030 	add	r3, r4, #48	; 0x30
    d138:	80844008 	addhi	r4, r4, r8
    d13c:	96af4073 	sxtbls	r4, r3
    d140:	86af4074 	sxtbhi	r4, r4
    d144:	e1a0000a 	mov	r0, sl
    d148:	e1a05001 	mov	r5, r1
    d14c:	e4cb4001 	strb	r4, [fp], #1
    d150:	e1a01006 	mov	r1, r6
    d154:	eb001790 	bl	12f9c <__udivsi3>
    d158:	e250a000 	subs	sl, r0, #0
    d15c:	1affffe9 	bne	d108 <CString::ntoa(char*, unsigned long, unsigned int, bool)+0x50>
    d160:	e5c7a001 	strb	sl, [r7, #1]
    d164:	e1a00009 	mov	r0, r9
    d168:	e8bd8ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d16c:	e1a04001 	mov	r4, r1
    d170:	e3a0a001 	mov	sl, #1
    d174:	eaffffde 	b	d0f4 <CString::ntoa(char*, unsigned long, unsigned int, bool)+0x3c>

0000d178 <CString::ftoa(char*, double, unsigned int)>:
    d178:	eeb50bc0 	vcmpe.f64	d0, #0.0
    d17c:	eef1fa10 	vmrs	APSR_nzcv, fpscr
    d180:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d184:	ed9f7b9b 	vldr	d7, [pc, #620]	; d3f8 <CString::ftoa(char*, double, unsigned int)+0x280>
    d188:	ed2d8b02 	vpush	{d8}
    d18c:	eeb08b40 	vmov.f64	d8, d0
    d190:	4eb18b40 	vnegmi.f64	d8, d0
    d194:	43a0302d 	movmi	r3, #45	; 0x2d
    d198:	eeb48bc7 	vcmpe.f64	d8, d7
    d19c:	45c03000 	strbmi	r3, [r0]
    d1a0:	42808001 	addmi	r8, r0, #1
    d1a4:	51a08000 	movpl	r8, r0
    d1a8:	eef1fa10 	vmrs	APSR_nzcv, fpscr
    d1ac:	e24dd01c 	sub	sp, sp, #28
    d1b0:	e1a07000 	mov	r7, r0
    d1b4:	e58d1004 	str	r1, [sp, #4]
    d1b8:	ca00007f 	bgt	d3bc <CString::ftoa(char*, double, unsigned int)+0x244>
    d1bc:	eefc7bc8 	vcvt.u32.f64	s15, d8
    d1c0:	ee175a90 	vmov	r5, s15
    d1c4:	e3550009 	cmp	r5, #9
    d1c8:	83a09001 	movhi	r9, #1
    d1cc:	9a000081 	bls	d3d8 <CString::ftoa(char*, double, unsigned int)+0x260>
    d1d0:	e0892109 	add	r2, r9, r9, lsl #2
    d1d4:	e1a09082 	lsl	r9, r2, #1
    d1d8:	e1a01009 	mov	r1, r9
    d1dc:	e1a00005 	mov	r0, r5
    d1e0:	eb00176d 	bl	12f9c <__udivsi3>
    d1e4:	e3500009 	cmp	r0, #9
    d1e8:	e1a0a000 	mov	sl, r0
    d1ec:	8afffff7 	bhi	d1d0 <CString::ftoa(char*, double, unsigned int)+0x58>
    d1f0:	e1a04008 	mov	r4, r8
    d1f4:	e1a0b005 	mov	fp, r5
    d1f8:	e59f6208 	ldr	r6, [pc, #520]	; d408 <CString::ftoa(char*, double, unsigned int)+0x290>
    d1fc:	ea000004 	b	d214 <CString::ftoa(char*, double, unsigned int)+0x9c>
    d200:	e1a01009 	mov	r1, r9
    d204:	e1a0000b 	mov	r0, fp
    d208:	e1a0400c 	mov	r4, ip
    d20c:	eb001762 	bl	12f9c <__udivsi3>
    d210:	e1a0a000 	mov	sl, r0
    d214:	e1a0000b 	mov	r0, fp
    d218:	e1a01009 	mov	r1, r9
    d21c:	eb00179b 	bl	13090 <__aeabi_uidivmod>
    d220:	e1a0c004 	mov	ip, r4
    d224:	e35a0009 	cmp	sl, #9
    d228:	e6efa07a 	uxtb	sl, sl
    d22c:	e28a3030 	add	r3, sl, #48	; 0x30
    d230:	96afa073 	sxtbls	sl, r3
    d234:	e0832699 	umull	r2, r3, r9, r6
    d238:	828aa057 	addhi	sl, sl, #87	; 0x57
    d23c:	86afa07a 	sxtbhi	sl, sl
    d240:	e1b091a3 	lsrs	r9, r3, #3
    d244:	e1a0b001 	mov	fp, r1
    d248:	e4cca001 	strb	sl, [ip], #1
    d24c:	1affffeb 	bne	d200 <CString::ftoa(char*, double, unsigned int)+0x88>
    d250:	e59d3004 	ldr	r3, [sp, #4]
    d254:	e5c49001 	strb	r9, [r4, #1]
    d258:	e3530000 	cmp	r3, #0
    d25c:	1a000003 	bne	d270 <CString::ftoa(char*, double, unsigned int)+0xf8>
    d260:	e1a00007 	mov	r0, r7
    d264:	e28dd01c 	add	sp, sp, #28
    d268:	ecbd8b02 	vpop	{d8}
    d26c:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d270:	e1a00008 	mov	r0, r8
    d274:	eb0006b8 	bl	ed5c <strlen>
    d278:	e3a0302e 	mov	r3, #46	; 0x2e
    d27c:	e59d2004 	ldr	r2, [sp, #4]
    d280:	e0881000 	add	r1, r8, r0
    d284:	e3520009 	cmp	r2, #9
    d288:	e7c83000 	strb	r3, [r8, r0]
    d28c:	31a08002 	movcc	r8, r2
    d290:	23a08009 	movcs	r8, #9
    d294:	e3520001 	cmp	r2, #1
    d298:	e58d1004 	str	r1, [sp, #4]
    d29c:	e2819001 	add	r9, r1, #1
    d2a0:	9a000052 	bls	d3f0 <CString::ftoa(char*, double, unsigned int)+0x278>
    d2a4:	e3a02002 	mov	r2, #2
    d2a8:	e3a0300a 	mov	r3, #10
    d2ac:	e2822001 	add	r2, r2, #1
    d2b0:	e0833103 	add	r3, r3, r3, lsl #2
    d2b4:	e1520008 	cmp	r2, r8
    d2b8:	e1a03083 	lsl	r3, r3, #1
    d2bc:	9afffffa 	bls	d2ac <CString::ftoa(char*, double, unsigned int)+0x134>
    d2c0:	ee073a90 	vmov	s15, r3
    d2c4:	eeb87b67 	vcvt.f64.u32	d7, s15
    d2c8:	ee065a90 	vmov	s13, r5
    d2cc:	eeb86b66 	vcvt.f64.u32	d6, s13
    d2d0:	ee386b46 	vsub.f64	d6, d8, d6
    d2d4:	ee267b07 	vmul.f64	d7, d6, d7
    d2d8:	eefc7bc7 	vcvt.u32.f64	s15, d7
    d2dc:	ee17ba90 	vmov	fp, s15
    d2e0:	e35b0009 	cmp	fp, #9
    d2e4:	83a06001 	movhi	r6, #1
    d2e8:	9a00003d 	bls	d3e4 <CString::ftoa(char*, double, unsigned int)+0x26c>
    d2ec:	e0862106 	add	r2, r6, r6, lsl #2
    d2f0:	e1a06082 	lsl	r6, r2, #1
    d2f4:	e1a01006 	mov	r1, r6
    d2f8:	e1a0000b 	mov	r0, fp
    d2fc:	eb001726 	bl	12f9c <__udivsi3>
    d300:	e3500009 	cmp	r0, #9
    d304:	e1a0a000 	mov	sl, r0
    d308:	8afffff7 	bhi	d2ec <CString::ftoa(char*, double, unsigned int)+0x174>
    d30c:	e28d400c 	add	r4, sp, #12
    d310:	e59f50f0 	ldr	r5, [pc, #240]	; d408 <CString::ftoa(char*, double, unsigned int)+0x290>
    d314:	ea000004 	b	d32c <CString::ftoa(char*, double, unsigned int)+0x1b4>
    d318:	e1a01006 	mov	r1, r6
    d31c:	e1a0000b 	mov	r0, fp
    d320:	e1a0400c 	mov	r4, ip
    d324:	eb00171c 	bl	12f9c <__udivsi3>
    d328:	e1a0a000 	mov	sl, r0
    d32c:	e1a0000b 	mov	r0, fp
    d330:	e1a01006 	mov	r1, r6
    d334:	eb001755 	bl	13090 <__aeabi_uidivmod>
    d338:	e1a0c004 	mov	ip, r4
    d33c:	e35a0009 	cmp	sl, #9
    d340:	e6efa07a 	uxtb	sl, sl
    d344:	e28a3030 	add	r3, sl, #48	; 0x30
    d348:	96afa073 	sxtbls	sl, r3
    d34c:	e0832596 	umull	r2, r3, r6, r5
    d350:	828aa057 	addhi	sl, sl, #87	; 0x57
    d354:	86afa07a 	sxtbhi	sl, sl
    d358:	e1b061a3 	lsrs	r6, r3, #3
    d35c:	e1a0b001 	mov	fp, r1
    d360:	e4cca001 	strb	sl, [ip], #1
    d364:	1affffeb 	bne	d318 <CString::ftoa(char*, double, unsigned int)+0x1a0>
    d368:	e5c46001 	strb	r6, [r4, #1]
    d36c:	e28d000c 	add	r0, sp, #12
    d370:	eb000679 	bl	ed5c <strlen>
    d374:	e0580000 	subs	r0, r8, r0
    d378:	0a000008 	beq	d3a0 <CString::ftoa(char*, double, unsigned int)+0x228>
    d37c:	e1a03009 	mov	r3, r9
    d380:	e3a02030 	mov	r2, #48	; 0x30
    d384:	e59dc004 	ldr	ip, [sp, #4]
    d388:	e2801001 	add	r1, r0, #1
    d38c:	e08c6001 	add	r6, ip, r1
    d390:	e4c32001 	strb	r2, [r3], #1
    d394:	e1530006 	cmp	r3, r6
    d398:	1afffffc 	bne	d390 <CString::ftoa(char*, double, unsigned int)+0x218>
    d39c:	e0899000 	add	r9, r9, r0
    d3a0:	e28d100c 	add	r1, sp, #12
    d3a4:	e1a00009 	mov	r0, r9
    d3a8:	eb0006d5 	bl	ef04 <strcpy>
    d3ac:	e1a00007 	mov	r0, r7
    d3b0:	e28dd01c 	add	sp, sp, #28
    d3b4:	ecbd8b02 	vpop	{d8}
    d3b8:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d3bc:	e1a00008 	mov	r0, r8
    d3c0:	e59f1044 	ldr	r1, [pc, #68]	; d40c <CString::ftoa(char*, double, unsigned int)+0x294>
    d3c4:	eb0006ce 	bl	ef04 <strcpy>
    d3c8:	e1a00007 	mov	r0, r7
    d3cc:	e28dd01c 	add	sp, sp, #28
    d3d0:	ecbd8b02 	vpop	{d8}
    d3d4:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d3d8:	ee17aa90 	vmov	sl, s15
    d3dc:	e3a09001 	mov	r9, #1
    d3e0:	eaffff82 	b	d1f0 <CString::ftoa(char*, double, unsigned int)+0x78>
    d3e4:	ee17aa90 	vmov	sl, s15
    d3e8:	e3a06001 	mov	r6, #1
    d3ec:	eaffffc6 	b	d30c <CString::ftoa(char*, double, unsigned int)+0x194>
    d3f0:	ed9f7b02 	vldr	d7, [pc, #8]	; d400 <CString::ftoa(char*, double, unsigned int)+0x288>
    d3f4:	eaffffb3 	b	d2c8 <CString::ftoa(char*, double, unsigned int)+0x150>
    d3f8:	ffe00000 	.word	0xffe00000
    d3fc:	41efffff 	.word	0x41efffff
    d400:	00000000 	.word	0x00000000
    d404:	40240000 	.word	0x40240000
    d408:	cccccccd 	.word	0xcccccccd
    d40c:	00013820 	.word	0x00013820

0000d410 <CString::FormatV(char const*, std::__va_list)>:
    d410:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d414:	e1a0b000 	mov	fp, r0
    d418:	e5900004 	ldr	r0, [r0, #4]
    d41c:	e24dd034 	sub	sp, sp, #52	; 0x34
    d420:	e3500000 	cmp	r0, #0
    d424:	e1a05001 	mov	r5, r1
    d428:	e1a0a002 	mov	sl, r2
    d42c:	0a000000 	beq	d434 <CString::FormatV(char const*, std::__va_list)+0x24>
    d430:	eb0009d9 	bl	fb9c <operator delete[](void*)>
    d434:	e3a00040 	mov	r0, #64	; 0x40
    d438:	e58b0008 	str	r0, [fp, #8]
    d43c:	eb0009d4 	bl	fb94 <operator new[](unsigned int)>
    d440:	e58b0004 	str	r0, [fp, #4]
    d444:	e58b000c 	str	r0, [fp, #12]
    d448:	e1d540d0 	ldrsb	r4, [r5]
    d44c:	e3540000 	cmp	r4, #0
    d450:	0a00005e 	beq	d5d0 <CString::FormatV(char const*, std::__va_list)+0x1c0>
    d454:	e3540025 	cmp	r4, #37	; 0x25
    d458:	e2857001 	add	r7, r5, #1
    d45c:	1a000050 	bne	d5a4 <CString::FormatV(char const*, std::__va_list)+0x194>
    d460:	e1d560d1 	ldrsb	r6, [r5, #1]
    d464:	e3560025 	cmp	r6, #37	; 0x25
    d468:	0a00013d 	beq	d964 <CString::FormatV(char const*, std::__va_list)+0x554>
    d46c:	e356002d 	cmp	r6, #45	; 0x2d
    d470:	03a03001 	moveq	r3, #1
    d474:	13a03000 	movne	r3, #0
    d478:	01d560d2 	ldrsbeq	r6, [r5, #2]
    d47c:	02857002 	addeq	r7, r5, #2
    d480:	e3560030 	cmp	r6, #48	; 0x30
    d484:	e58d3004 	str	r3, [sp, #4]
    d488:	13a03000 	movne	r3, #0
    d48c:	03a02001 	moveq	r2, #1
    d490:	01d760d1 	ldrsbeq	r6, [r7, #1]
    d494:	02873002 	addeq	r3, r7, #2
    d498:	e2875001 	add	r5, r7, #1
    d49c:	01a07005 	moveq	r7, r5
    d4a0:	158d3008 	strne	r3, [sp, #8]
    d4a4:	01a05003 	moveq	r5, r3
    d4a8:	e2463030 	sub	r3, r6, #48	; 0x30
    d4ac:	e6ef3073 	uxtb	r3, r3
    d4b0:	058d2008 	streq	r2, [sp, #8]
    d4b4:	e3530009 	cmp	r3, #9
    d4b8:	93a04000 	movls	r4, #0
    d4bc:	9a000001 	bls	d4c8 <CString::FormatV(char const*, std::__va_list)+0xb8>
    d4c0:	ea000059 	b	d62c <CString::FormatV(char const*, std::__va_list)+0x21c>
    d4c4:	e1a07003 	mov	r7, r3
    d4c8:	e0844104 	add	r4, r4, r4, lsl #2
    d4cc:	e0864084 	add	r4, r6, r4, lsl #1
    d4d0:	e1d760d1 	ldrsb	r6, [r7, #1]
    d4d4:	e2444030 	sub	r4, r4, #48	; 0x30
    d4d8:	e2463030 	sub	r3, r6, #48	; 0x30
    d4dc:	e6ef3073 	uxtb	r3, r3
    d4e0:	e3530009 	cmp	r3, #9
    d4e4:	e2873001 	add	r3, r7, #1
    d4e8:	9afffff5 	bls	d4c4 <CString::FormatV(char const*, std::__va_list)+0xb4>
    d4ec:	e2875002 	add	r5, r7, #2
    d4f0:	e356002e 	cmp	r6, #46	; 0x2e
    d4f4:	0a000039 	beq	d5e0 <CString::FormatV(char const*, std::__va_list)+0x1d0>
    d4f8:	e3a01006 	mov	r1, #6
    d4fc:	e1d380d0 	ldrsb	r8, [r3]
    d500:	e358006c 	cmp	r8, #108	; 0x6c
    d504:	01d380d1 	ldrsbeq	r8, [r3, #1]
    d508:	01a03005 	moveq	r3, r5
    d50c:	e2482058 	sub	r2, r8, #88	; 0x58
    d510:	02855001 	addeq	r5, r5, #1
    d514:	e3520020 	cmp	r2, #32
    d518:	979ff102 	ldrls	pc, [pc, r2, lsl #2]
    d51c:	ea0000fd 	b	d918 <CString::FormatV(char const*, std::__va_list)+0x508>
    d520:	0000d910 	.word	0x0000d910
    d524:	0000d918 	.word	0x0000d918
    d528:	0000d918 	.word	0x0000d918
    d52c:	0000d918 	.word	0x0000d918
    d530:	0000d918 	.word	0x0000d918
    d534:	0000d918 	.word	0x0000d918
    d538:	0000d918 	.word	0x0000d918
    d53c:	0000d918 	.word	0x0000d918
    d540:	0000d918 	.word	0x0000d918
    d544:	0000d918 	.word	0x0000d918
    d548:	0000d918 	.word	0x0000d918
    d54c:	0000d8d0 	.word	0x0000d8d0
    d550:	0000d7b4 	.word	0x0000d7b4
    d554:	0000d918 	.word	0x0000d918
    d558:	0000d734 	.word	0x0000d734
    d55c:	0000d918 	.word	0x0000d918
    d560:	0000d918 	.word	0x0000d918
    d564:	0000d7b4 	.word	0x0000d7b4
    d568:	0000d918 	.word	0x0000d918
    d56c:	0000d918 	.word	0x0000d918
    d570:	0000d918 	.word	0x0000d918
    d574:	0000d918 	.word	0x0000d918
    d578:	0000d918 	.word	0x0000d918
    d57c:	0000d638 	.word	0x0000d638
    d580:	0000d910 	.word	0x0000d910
    d584:	0000d918 	.word	0x0000d918
    d588:	0000d918 	.word	0x0000d918
    d58c:	0000d77c 	.word	0x0000d77c
    d590:	0000d918 	.word	0x0000d918
    d594:	0000d72c 	.word	0x0000d72c
    d598:	0000d918 	.word	0x0000d918
    d59c:	0000d918 	.word	0x0000d918
    d5a0:	0000d910 	.word	0x0000d910
    d5a4:	e1a05007 	mov	r5, r7
    d5a8:	e3a01001 	mov	r1, #1
    d5ac:	e1a0000b 	mov	r0, fp
    d5b0:	ebfffda9 	bl	cc5c <CString::ReserveSpace(unsigned int) [clone .part.0]>
    d5b4:	e59b300c 	ldr	r3, [fp, #12]
    d5b8:	e2832001 	add	r2, r3, #1
    d5bc:	e58b200c 	str	r2, [fp, #12]
    d5c0:	e5c34000 	strb	r4, [r3]
    d5c4:	e1d540d0 	ldrsb	r4, [r5]
    d5c8:	e3540000 	cmp	r4, #0
    d5cc:	1affffa0 	bne	d454 <CString::FormatV(char const*, std::__va_list)+0x44>
    d5d0:	e59b300c 	ldr	r3, [fp, #12]
    d5d4:	e5c34000 	strb	r4, [r3]
    d5d8:	e28dd034 	add	sp, sp, #52	; 0x34
    d5dc:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d5e0:	e1d380d1 	ldrsb	r8, [r3, #1]
    d5e4:	e3a01000 	mov	r1, #0
    d5e8:	e2483030 	sub	r3, r8, #48	; 0x30
    d5ec:	e6ef3073 	uxtb	r3, r3
    d5f0:	e3530009 	cmp	r3, #9
    d5f4:	9a000001 	bls	d600 <CString::FormatV(char const*, std::__va_list)+0x1f0>
    d5f8:	ea00015c 	b	db70 <CString::FormatV(char const*, std::__va_list)+0x760>
    d5fc:	e1a05003 	mov	r5, r3
    d600:	e0811101 	add	r1, r1, r1, lsl #2
    d604:	e0881081 	add	r1, r8, r1, lsl #1
    d608:	e1d580d1 	ldrsb	r8, [r5, #1]
    d60c:	e2411030 	sub	r1, r1, #48	; 0x30
    d610:	e2483030 	sub	r3, r8, #48	; 0x30
    d614:	e6ef3073 	uxtb	r3, r3
    d618:	e3530009 	cmp	r3, #9
    d61c:	e2853001 	add	r3, r5, #1
    d620:	9afffff5 	bls	d5fc <CString::FormatV(char const*, std::__va_list)+0x1ec>
    d624:	e2855002 	add	r5, r5, #2
    d628:	eaffffb4 	b	d500 <CString::FormatV(char const*, std::__va_list)+0xf0>
    d62c:	e1a03007 	mov	r3, r7
    d630:	e3a04000 	mov	r4, #0
    d634:	eaffffad 	b	d4f0 <CString::FormatV(char const*, std::__va_list)+0xe0>
    d638:	e3a07008 	mov	r7, #8
    d63c:	e59a6000 	ldr	r6, [sl]
    d640:	e28a3004 	add	r3, sl, #4
    d644:	e1560007 	cmp	r6, r7
    d648:	e58d3014 	str	r3, [sp, #20]
    d64c:	23a0a001 	movcs	sl, #1
    d650:	3a000112 	bcc	daa0 <CString::FormatV(char const*, std::__va_list)+0x690>
    d654:	e00a0a97 	mul	sl, r7, sl
    d658:	e1a00006 	mov	r0, r6
    d65c:	e1a0100a 	mov	r1, sl
    d660:	eb00164d 	bl	12f9c <__udivsi3>
    d664:	e1570000 	cmp	r7, r0
    d668:	9afffff9 	bls	d654 <CString::FormatV(char const*, std::__va_list)+0x244>
    d66c:	e1a09000 	mov	r9, r0
    d670:	e3580058 	cmp	r8, #88	; 0x58
    d674:	13a03057 	movne	r3, #87	; 0x57
    d678:	03a03037 	moveq	r3, #55	; 0x37
    d67c:	e1cd40fc 	strd	r4, [sp, #12]
    d680:	e28d8018 	add	r8, sp, #24
    d684:	e1a0500a 	mov	r5, sl
    d688:	e1a04003 	mov	r4, r3
    d68c:	ea000004 	b	d6a4 <CString::FormatV(char const*, std::__va_list)+0x294>
    d690:	e1a01005 	mov	r1, r5
    d694:	e1a00006 	mov	r0, r6
    d698:	eb00163f 	bl	12f9c <__udivsi3>
    d69c:	e1a0800a 	mov	r8, sl
    d6a0:	e1a09000 	mov	r9, r0
    d6a4:	e1a00006 	mov	r0, r6
    d6a8:	e1a01005 	mov	r1, r5
    d6ac:	eb001677 	bl	13090 <__aeabi_uidivmod>
    d6b0:	e1a0a008 	mov	sl, r8
    d6b4:	e3590009 	cmp	r9, #9
    d6b8:	e6ef9079 	uxtb	r9, r9
    d6bc:	e2892030 	add	r2, r9, #48	; 0x30
    d6c0:	80899004 	addhi	r9, r9, r4
    d6c4:	96af9072 	sxtbls	r9, r2
    d6c8:	86af9079 	sxtbhi	r9, r9
    d6cc:	e1a00005 	mov	r0, r5
    d6d0:	e1a06001 	mov	r6, r1
    d6d4:	e4ca9001 	strb	r9, [sl], #1
    d6d8:	e1a01007 	mov	r1, r7
    d6dc:	eb00162e 	bl	12f9c <__udivsi3>
    d6e0:	e2505000 	subs	r5, r0, #0
    d6e4:	1affffe9 	bne	d690 <CString::FormatV(char const*, std::__va_list)+0x280>
    d6e8:	e1a0a005 	mov	sl, r5
    d6ec:	e28d0018 	add	r0, sp, #24
    d6f0:	e5c8a001 	strb	sl, [r8, #1]
    d6f4:	e59d400c 	ldr	r4, [sp, #12]
    d6f8:	e59d5010 	ldr	r5, [sp, #16]
    d6fc:	eb000596 	bl	ed5c <strlen>
    d700:	e59d3004 	ldr	r3, [sp, #4]
    d704:	e1a06000 	mov	r6, r0
    d708:	e3530000 	cmp	r3, #0
    d70c:	1a00009d 	bne	d988 <CString::FormatV(char const*, std::__va_list)+0x578>
    d710:	e1500004 	cmp	r0, r4
    d714:	3a0000a2 	bcc	d9a4 <CString::FormatV(char const*, std::__va_list)+0x594>
    d718:	e28d1018 	add	r1, sp, #24
    d71c:	e1a0000b 	mov	r0, fp
    d720:	e59da014 	ldr	sl, [sp, #20]
    d724:	ebfffdf1 	bl	cef0 <CString::PutString(char const*)>
    d728:	eaffff46 	b	d448 <CString::FormatV(char const*, std::__va_list)+0x38>
    d72c:	e3a0700a 	mov	r7, #10
    d730:	eaffffc1 	b	d63c <CString::FormatV(char const*, std::__va_list)+0x22c>
    d734:	e28aa007 	add	sl, sl, #7
    d738:	e3caa007 	bic	sl, sl, #7
    d73c:	ed9a0b00 	vldr	d0, [sl]
    d740:	e28d0018 	add	r0, sp, #24
    d744:	ebfffe8b 	bl	d178 <CString::ftoa(char*, double, unsigned int)>
    d748:	e28d0018 	add	r0, sp, #24
    d74c:	eb000582 	bl	ed5c <strlen>
    d750:	e59d3004 	ldr	r3, [sp, #4]
    d754:	e28aa008 	add	sl, sl, #8
    d758:	e3530000 	cmp	r3, #0
    d75c:	e1a06000 	mov	r6, r0
    d760:	1a0000d1 	bne	daac <CString::FormatV(char const*, std::__va_list)+0x69c>
    d764:	e1500004 	cmp	r0, r4
    d768:	3a000122 	bcc	dbf8 <CString::FormatV(char const*, std::__va_list)+0x7e8>
    d76c:	e28d1018 	add	r1, sp, #24
    d770:	e1a0000b 	mov	r0, fp
    d774:	ebfffddd 	bl	cef0 <CString::PutString(char const*)>
    d778:	eaffff32 	b	d448 <CString::FormatV(char const*, std::__va_list)+0x38>
    d77c:	e59a7000 	ldr	r7, [sl]
    d780:	e28aa004 	add	sl, sl, #4
    d784:	e1a00007 	mov	r0, r7
    d788:	eb000573 	bl	ed5c <strlen>
    d78c:	e59d3004 	ldr	r3, [sp, #4]
    d790:	e1a06000 	mov	r6, r0
    d794:	e3530000 	cmp	r3, #0
    d798:	1a0000e1 	bne	db24 <CString::FormatV(char const*, std::__va_list)+0x714>
    d79c:	e1500004 	cmp	r0, r4
    d7a0:	3a000106 	bcc	dbc0 <CString::FormatV(char const*, std::__va_list)+0x7b0>
    d7a4:	e1a01007 	mov	r1, r7
    d7a8:	e1a0000b 	mov	r0, fp
    d7ac:	ebfffdcf 	bl	cef0 <CString::PutString(char const*)>
    d7b0:	eaffff24 	b	d448 <CString::FormatV(char const*, std::__va_list)+0x38>
    d7b4:	e59a7000 	ldr	r7, [sl]
    d7b8:	e28aa004 	add	sl, sl, #4
    d7bc:	e3570000 	cmp	r7, #0
    d7c0:	b3a03001 	movlt	r3, #1
    d7c4:	a3a03000 	movge	r3, #0
    d7c8:	b2677000 	rsblt	r7, r7, #0
    d7cc:	e3570009 	cmp	r7, #9
    d7d0:	e58d300c 	str	r3, [sp, #12]
    d7d4:	e1a06007 	mov	r6, r7
    d7d8:	c3a09001 	movgt	r9, #1
    d7dc:	da0000f4 	ble	dbb4 <CString::FormatV(char const*, std::__va_list)+0x7a4>
    d7e0:	e0899109 	add	r9, r9, r9, lsl #2
    d7e4:	e1a09089 	lsl	r9, r9, #1
    d7e8:	e1a01009 	mov	r1, r9
    d7ec:	e1a00007 	mov	r0, r7
    d7f0:	eb0015e9 	bl	12f9c <__udivsi3>
    d7f4:	e3500009 	cmp	r0, #9
    d7f8:	8afffff8 	bhi	d7e0 <CString::FormatV(char const*, std::__va_list)+0x3d0>
    d7fc:	e1a08000 	mov	r8, r0
    d800:	e28d7018 	add	r7, sp, #24
    d804:	ea000004 	b	d81c <CString::FormatV(char const*, std::__va_list)+0x40c>
    d808:	e1a01009 	mov	r1, r9
    d80c:	e1a00006 	mov	r0, r6
    d810:	e1a0700c 	mov	r7, ip
    d814:	eb0015e0 	bl	12f9c <__udivsi3>
    d818:	e1a08000 	mov	r8, r0
    d81c:	e1a00006 	mov	r0, r6
    d820:	e1a01009 	mov	r1, r9
    d824:	eb001619 	bl	13090 <__aeabi_uidivmod>
    d828:	e1a0c007 	mov	ip, r7
    d82c:	e3580009 	cmp	r8, #9
    d830:	e6ef8078 	uxtb	r8, r8
    d834:	e2883030 	add	r3, r8, #48	; 0x30
    d838:	96af8073 	sxtbls	r8, r3
    d83c:	e59f34c0 	ldr	r3, [pc, #1216]	; dd04 <CString::FormatV(char const*, std::__va_list)+0x8f4>
    d840:	82888057 	addhi	r8, r8, #87	; 0x57
    d844:	e0832399 	umull	r2, r3, r9, r3
    d848:	86af8078 	sxtbhi	r8, r8
    d84c:	e1b091a3 	lsrs	r9, r3, #3
    d850:	e1a06001 	mov	r6, r1
    d854:	e4cc8001 	strb	r8, [ip], #1
    d858:	1affffea 	bne	d808 <CString::FormatV(char const*, std::__va_list)+0x3f8>
    d85c:	e5c79001 	strb	r9, [r7, #1]
    d860:	e28d0018 	add	r0, sp, #24
    d864:	eb00053c 	bl	ed5c <strlen>
    d868:	e59d300c 	ldr	r3, [sp, #12]
    d86c:	e1a06000 	mov	r6, r0
    d870:	e3530000 	cmp	r3, #0
    d874:	e59d3004 	ldr	r3, [sp, #4]
    d878:	1a00005a 	bne	d9e8 <CString::FormatV(char const*, std::__va_list)+0x5d8>
    d87c:	e3530000 	cmp	r3, #0
    d880:	0a0000f3 	beq	dc54 <CString::FormatV(char const*, std::__va_list)+0x844>
    d884:	e28d1018 	add	r1, sp, #24
    d888:	e1a0000b 	mov	r0, fp
    d88c:	ebfffd97 	bl	cef0 <CString::PutString(char const*)>
    d890:	e1540006 	cmp	r4, r6
    d894:	9afffeeb 	bls	d448 <CString::FormatV(char const*, std::__va_list)+0x38>
    d898:	e0444006 	sub	r4, r4, r6
    d89c:	e1a0000b 	mov	r0, fp
    d8a0:	e1a01004 	mov	r1, r4
    d8a4:	ebfffcec 	bl	cc5c <CString::ReserveSpace(unsigned int) [clone .part.0]>
    d8a8:	e3a00020 	mov	r0, #32
    d8ac:	e2443001 	sub	r3, r4, #1
    d8b0:	e59b200c 	ldr	r2, [fp, #12]
    d8b4:	e2433001 	sub	r3, r3, #1
    d8b8:	e2821001 	add	r1, r2, #1
    d8bc:	e3730001 	cmn	r3, #1
    d8c0:	e58b100c 	str	r1, [fp, #12]
    d8c4:	e5c20000 	strb	r0, [r2]
    d8c8:	1afffff8 	bne	d8b0 <CString::FormatV(char const*, std::__va_list)+0x4a0>
    d8cc:	eafffedd 	b	d448 <CString::FormatV(char const*, std::__va_list)+0x38>
    d8d0:	e59d3004 	ldr	r3, [sp, #4]
    d8d4:	e28a7004 	add	r7, sl, #4
    d8d8:	e3530000 	cmp	r3, #0
    d8dc:	e1da60d0 	ldrsb	r6, [sl]
    d8e0:	1a000084 	bne	daf8 <CString::FormatV(char const*, std::__va_list)+0x6e8>
    d8e4:	e3540001 	cmp	r4, #1
    d8e8:	8a00005f 	bhi	da6c <CString::FormatV(char const*, std::__va_list)+0x65c>
    d8ec:	e3a01001 	mov	r1, #1
    d8f0:	e1a0000b 	mov	r0, fp
    d8f4:	ebfffcd8 	bl	cc5c <CString::ReserveSpace(unsigned int) [clone .part.0]>
    d8f8:	e59b300c 	ldr	r3, [fp, #12]
    d8fc:	e1a0a007 	mov	sl, r7
    d900:	e2832001 	add	r2, r3, #1
    d904:	e58b200c 	str	r2, [fp, #12]
    d908:	e5c36000 	strb	r6, [r3]
    d90c:	eafffecd 	b	d448 <CString::FormatV(char const*, std::__va_list)+0x38>
    d910:	e3a07010 	mov	r7, #16
    d914:	eaffff48 	b	d63c <CString::FormatV(char const*, std::__va_list)+0x22c>
    d918:	e3a01001 	mov	r1, #1
    d91c:	e1a0000b 	mov	r0, fp
    d920:	e58d3004 	str	r3, [sp, #4]
    d924:	ebfffccc 	bl	cc5c <CString::ReserveSpace(unsigned int) [clone .part.0]>
    d928:	e3a01025 	mov	r1, #37	; 0x25
    d92c:	e59b200c 	ldr	r2, [fp, #12]
    d930:	e59d3004 	ldr	r3, [sp, #4]
    d934:	e2820001 	add	r0, r2, #1
    d938:	e58b000c 	str	r0, [fp, #12]
    d93c:	e5c21000 	strb	r1, [r2]
    d940:	e1a0000b 	mov	r0, fp
    d944:	e3a01001 	mov	r1, #1
    d948:	e1d340d0 	ldrsb	r4, [r3]
    d94c:	ebfffcc2 	bl	cc5c <CString::ReserveSpace(unsigned int) [clone .part.0]>
    d950:	e59b300c 	ldr	r3, [fp, #12]
    d954:	e2832001 	add	r2, r3, #1
    d958:	e58b200c 	str	r2, [fp, #12]
    d95c:	e5c34000 	strb	r4, [r3]
    d960:	eafffeb8 	b	d448 <CString::FormatV(char const*, std::__va_list)+0x38>
    d964:	e3a01001 	mov	r1, #1
    d968:	e1a0000b 	mov	r0, fp
    d96c:	ebfffcba 	bl	cc5c <CString::ReserveSpace(unsigned int) [clone .part.0]>
    d970:	e59b300c 	ldr	r3, [fp, #12]
    d974:	e2855002 	add	r5, r5, #2
    d978:	e2832001 	add	r2, r3, #1
    d97c:	e58b200c 	str	r2, [fp, #12]
    d980:	e5c36000 	strb	r6, [r3]
    d984:	eafffeaf 	b	d448 <CString::FormatV(char const*, std::__va_list)+0x38>
    d988:	e28d1018 	add	r1, sp, #24
    d98c:	e1a0000b 	mov	r0, fp
    d990:	ebfffd56 	bl	cef0 <CString::PutString(char const*)>
    d994:	e1560004 	cmp	r6, r4
    d998:	3a000077 	bcc	db7c <CString::FormatV(char const*, std::__va_list)+0x76c>
    d99c:	e59da014 	ldr	sl, [sp, #20]
    d9a0:	eafffea8 	b	d448 <CString::FormatV(char const*, std::__va_list)+0x38>
    d9a4:	e59d3008 	ldr	r3, [sp, #8]
    d9a8:	e0444000 	sub	r4, r4, r0
    d9ac:	e3530000 	cmp	r3, #0
    d9b0:	e1a01004 	mov	r1, r4
    d9b4:	e1a0000b 	mov	r0, fp
    d9b8:	13a06030 	movne	r6, #48	; 0x30
    d9bc:	03a06020 	moveq	r6, #32
    d9c0:	ebfffca5 	bl	cc5c <CString::ReserveSpace(unsigned int) [clone .part.0]>
    d9c4:	e2443001 	sub	r3, r4, #1
    d9c8:	e59b200c 	ldr	r2, [fp, #12]
    d9cc:	e2433001 	sub	r3, r3, #1
    d9d0:	e2821001 	add	r1, r2, #1
    d9d4:	e3730001 	cmn	r3, #1
    d9d8:	e58b100c 	str	r1, [fp, #12]
    d9dc:	e5c26000 	strb	r6, [r2]
    d9e0:	1afffff8 	bne	d9c8 <CString::FormatV(char const*, std::__va_list)+0x5b8>
    d9e4:	eaffff4b 	b	d718 <CString::FormatV(char const*, std::__va_list)+0x308>
    d9e8:	e3530000 	cmp	r3, #0
    d9ec:	e2806001 	add	r6, r0, #1
    d9f0:	1a00008e 	bne	dc30 <CString::FormatV(char const*, std::__va_list)+0x820>
    d9f4:	e59d3008 	ldr	r3, [sp, #8]
    d9f8:	e3530000 	cmp	r3, #0
    d9fc:	1a0000b4 	bne	dcd4 <CString::FormatV(char const*, std::__va_list)+0x8c4>
    da00:	e1540006 	cmp	r4, r6
    da04:	9a00000f 	bls	da48 <CString::FormatV(char const*, std::__va_list)+0x638>
    da08:	e0444006 	sub	r4, r4, r6
    da0c:	e1a0000b 	mov	r0, fp
    da10:	e1a01004 	mov	r1, r4
    da14:	ebfffc90 	bl	cc5c <CString::ReserveSpace(unsigned int) [clone .part.0]>
    da18:	e3a00020 	mov	r0, #32
    da1c:	e2443001 	sub	r3, r4, #1
    da20:	e59b200c 	ldr	r2, [fp, #12]
    da24:	e2433001 	sub	r3, r3, #1
    da28:	e2821001 	add	r1, r2, #1
    da2c:	e3730001 	cmn	r3, #1
    da30:	e58b100c 	str	r1, [fp, #12]
    da34:	e5c20000 	strb	r0, [r2]
    da38:	1afffff8 	bne	da20 <CString::FormatV(char const*, std::__va_list)+0x610>
    da3c:	e59d300c 	ldr	r3, [sp, #12]
    da40:	e3530000 	cmp	r3, #0
    da44:	0affff48 	beq	d76c <CString::FormatV(char const*, std::__va_list)+0x35c>
    da48:	e3a01001 	mov	r1, #1
    da4c:	e1a0000b 	mov	r0, fp
    da50:	ebfffc81 	bl	cc5c <CString::ReserveSpace(unsigned int) [clone .part.0]>
    da54:	e3a0202d 	mov	r2, #45	; 0x2d
    da58:	e59b300c 	ldr	r3, [fp, #12]
    da5c:	e2831001 	add	r1, r3, #1
    da60:	e58b100c 	str	r1, [fp, #12]
    da64:	e5c32000 	strb	r2, [r3]
    da68:	eaffff3f 	b	d76c <CString::FormatV(char const*, std::__va_list)+0x35c>
    da6c:	e2441001 	sub	r1, r4, #1
    da70:	e1a0000b 	mov	r0, fp
    da74:	ebfffc78 	bl	cc5c <CString::ReserveSpace(unsigned int) [clone .part.0]>
    da78:	e3a01020 	mov	r1, #32
    da7c:	e2444002 	sub	r4, r4, #2
    da80:	e59b300c 	ldr	r3, [fp, #12]
    da84:	e2444001 	sub	r4, r4, #1
    da88:	e2832001 	add	r2, r3, #1
    da8c:	e3740001 	cmn	r4, #1
    da90:	e58b200c 	str	r2, [fp, #12]
    da94:	e5c31000 	strb	r1, [r3]
    da98:	1afffff8 	bne	da80 <CString::FormatV(char const*, std::__va_list)+0x670>
    da9c:	eaffff92 	b	d8ec <CString::FormatV(char const*, std::__va_list)+0x4dc>
    daa0:	e1a09006 	mov	r9, r6
    daa4:	e3a0a001 	mov	sl, #1
    daa8:	eafffef0 	b	d670 <CString::FormatV(char const*, std::__va_list)+0x260>
    daac:	e28d1018 	add	r1, sp, #24
    dab0:	e1a0000b 	mov	r0, fp
    dab4:	ebfffd0d 	bl	cef0 <CString::PutString(char const*)>
    dab8:	e1560004 	cmp	r6, r4
    dabc:	2afffe61 	bcs	d448 <CString::FormatV(char const*, std::__va_list)+0x38>
    dac0:	e0444006 	sub	r4, r4, r6
    dac4:	e1a0000b 	mov	r0, fp
    dac8:	e1a01004 	mov	r1, r4
    dacc:	ebfffc62 	bl	cc5c <CString::ReserveSpace(unsigned int) [clone .part.0]>
    dad0:	e3a00020 	mov	r0, #32
    dad4:	e2443001 	sub	r3, r4, #1
    dad8:	e59b200c 	ldr	r2, [fp, #12]
    dadc:	e2433001 	sub	r3, r3, #1
    dae0:	e2821001 	add	r1, r2, #1
    dae4:	e3730001 	cmn	r3, #1
    dae8:	e58b100c 	str	r1, [fp, #12]
    daec:	e5c20000 	strb	r0, [r2]
    daf0:	1afffff8 	bne	dad8 <CString::FormatV(char const*, std::__va_list)+0x6c8>
    daf4:	eafffe53 	b	d448 <CString::FormatV(char const*, std::__va_list)+0x38>
    daf8:	e3a01001 	mov	r1, #1
    dafc:	e1a0000b 	mov	r0, fp
    db00:	ebfffc55 	bl	cc5c <CString::ReserveSpace(unsigned int) [clone .part.0]>
    db04:	e59b300c 	ldr	r3, [fp, #12]
    db08:	e3540001 	cmp	r4, #1
    db0c:	e2832001 	add	r2, r3, #1
    db10:	e58b200c 	str	r2, [fp, #12]
    db14:	e5c36000 	strb	r6, [r3]
    db18:	8a000060 	bhi	dca0 <CString::FormatV(char const*, std::__va_list)+0x890>
    db1c:	e1a0a007 	mov	sl, r7
    db20:	eafffe48 	b	d448 <CString::FormatV(char const*, std::__va_list)+0x38>
    db24:	e1a01007 	mov	r1, r7
    db28:	e1a0000b 	mov	r0, fp
    db2c:	ebfffcef 	bl	cef0 <CString::PutString(char const*)>
    db30:	e1560004 	cmp	r6, r4
    db34:	2afffe43 	bcs	d448 <CString::FormatV(char const*, std::__va_list)+0x38>
    db38:	e0444006 	sub	r4, r4, r6
    db3c:	e1a0000b 	mov	r0, fp
    db40:	e1a01004 	mov	r1, r4
    db44:	ebfffc44 	bl	cc5c <CString::ReserveSpace(unsigned int) [clone .part.0]>
    db48:	e3a00020 	mov	r0, #32
    db4c:	e2443001 	sub	r3, r4, #1
    db50:	e59b200c 	ldr	r2, [fp, #12]
    db54:	e2433001 	sub	r3, r3, #1
    db58:	e2821001 	add	r1, r2, #1
    db5c:	e3730001 	cmn	r3, #1
    db60:	e58b100c 	str	r1, [fp, #12]
    db64:	e5c20000 	strb	r0, [r2]
    db68:	1afffff8 	bne	db50 <CString::FormatV(char const*, std::__va_list)+0x740>
    db6c:	eafffe35 	b	d448 <CString::FormatV(char const*, std::__va_list)+0x38>
    db70:	e1a03005 	mov	r3, r5
    db74:	e2855001 	add	r5, r5, #1
    db78:	eafffe60 	b	d500 <CString::FormatV(char const*, std::__va_list)+0xf0>
    db7c:	e0444006 	sub	r4, r4, r6
    db80:	e1a0000b 	mov	r0, fp
    db84:	e1a01004 	mov	r1, r4
    db88:	ebfffc33 	bl	cc5c <CString::ReserveSpace(unsigned int) [clone .part.0]>
    db8c:	e3a00020 	mov	r0, #32
    db90:	e2443001 	sub	r3, r4, #1
    db94:	e59b200c 	ldr	r2, [fp, #12]
    db98:	e2433001 	sub	r3, r3, #1
    db9c:	e2821001 	add	r1, r2, #1
    dba0:	e3730001 	cmn	r3, #1
    dba4:	e58b100c 	str	r1, [fp, #12]
    dba8:	e5c20000 	strb	r0, [r2]
    dbac:	1afffff8 	bne	db94 <CString::FormatV(char const*, std::__va_list)+0x784>
    dbb0:	eaffff79 	b	d99c <CString::FormatV(char const*, std::__va_list)+0x58c>
    dbb4:	e1a08007 	mov	r8, r7
    dbb8:	e3a09001 	mov	r9, #1
    dbbc:	eaffff0f 	b	d800 <CString::FormatV(char const*, std::__va_list)+0x3f0>
    dbc0:	e0444000 	sub	r4, r4, r0
    dbc4:	e1a01004 	mov	r1, r4
    dbc8:	e1a0000b 	mov	r0, fp
    dbcc:	ebfffc22 	bl	cc5c <CString::ReserveSpace(unsigned int) [clone .part.0]>
    dbd0:	e3a00020 	mov	r0, #32
    dbd4:	e2443001 	sub	r3, r4, #1
    dbd8:	e59b200c 	ldr	r2, [fp, #12]
    dbdc:	e2433001 	sub	r3, r3, #1
    dbe0:	e2821001 	add	r1, r2, #1
    dbe4:	e3730001 	cmn	r3, #1
    dbe8:	e58b100c 	str	r1, [fp, #12]
    dbec:	e5c20000 	strb	r0, [r2]
    dbf0:	1afffff8 	bne	dbd8 <CString::FormatV(char const*, std::__va_list)+0x7c8>
    dbf4:	eafffeea 	b	d7a4 <CString::FormatV(char const*, std::__va_list)+0x394>
    dbf8:	e0444000 	sub	r4, r4, r0
    dbfc:	e1a01004 	mov	r1, r4
    dc00:	e1a0000b 	mov	r0, fp
    dc04:	ebfffc14 	bl	cc5c <CString::ReserveSpace(unsigned int) [clone .part.0]>
    dc08:	e3a00020 	mov	r0, #32
    dc0c:	e2443001 	sub	r3, r4, #1
    dc10:	e59b200c 	ldr	r2, [fp, #12]
    dc14:	e2433001 	sub	r3, r3, #1
    dc18:	e2821001 	add	r1, r2, #1
    dc1c:	e3730001 	cmn	r3, #1
    dc20:	e58b100c 	str	r1, [fp, #12]
    dc24:	e5c20000 	strb	r0, [r2]
    dc28:	1afffff8 	bne	dc10 <CString::FormatV(char const*, std::__va_list)+0x800>
    dc2c:	eafffece 	b	d76c <CString::FormatV(char const*, std::__va_list)+0x35c>
    dc30:	e3a01001 	mov	r1, #1
    dc34:	e1a0000b 	mov	r0, fp
    dc38:	ebfffc07 	bl	cc5c <CString::ReserveSpace(unsigned int) [clone .part.0]>
    dc3c:	e3a0202d 	mov	r2, #45	; 0x2d
    dc40:	e59b300c 	ldr	r3, [fp, #12]
    dc44:	e2831001 	add	r1, r3, #1
    dc48:	e58b100c 	str	r1, [fp, #12]
    dc4c:	e5c32000 	strb	r2, [r3]
    dc50:	eaffff0b 	b	d884 <CString::FormatV(char const*, std::__va_list)+0x474>
    dc54:	e59d3008 	ldr	r3, [sp, #8]
    dc58:	e3530000 	cmp	r3, #0
    dc5c:	0a000025 	beq	dcf8 <CString::FormatV(char const*, std::__va_list)+0x8e8>
    dc60:	e1540006 	cmp	r4, r6
    dc64:	9afffec0 	bls	d76c <CString::FormatV(char const*, std::__va_list)+0x35c>
    dc68:	e0444006 	sub	r4, r4, r6
    dc6c:	e1a0000b 	mov	r0, fp
    dc70:	e1a01004 	mov	r1, r4
    dc74:	ebfffbf8 	bl	cc5c <CString::ReserveSpace(unsigned int) [clone .part.0]>
    dc78:	e3a00030 	mov	r0, #48	; 0x30
    dc7c:	e2443001 	sub	r3, r4, #1
    dc80:	e59b200c 	ldr	r2, [fp, #12]
    dc84:	e2433001 	sub	r3, r3, #1
    dc88:	e2821001 	add	r1, r2, #1
    dc8c:	e3730001 	cmn	r3, #1
    dc90:	e58b100c 	str	r1, [fp, #12]
    dc94:	e5c20000 	strb	r0, [r2]
    dc98:	1afffff8 	bne	dc80 <CString::FormatV(char const*, std::__va_list)+0x870>
    dc9c:	eafffeb2 	b	d76c <CString::FormatV(char const*, std::__va_list)+0x35c>
    dca0:	e2441001 	sub	r1, r4, #1
    dca4:	e1a0000b 	mov	r0, fp
    dca8:	ebfffbeb 	bl	cc5c <CString::ReserveSpace(unsigned int) [clone .part.0]>
    dcac:	e3a01020 	mov	r1, #32
    dcb0:	e2444002 	sub	r4, r4, #2
    dcb4:	e59b300c 	ldr	r3, [fp, #12]
    dcb8:	e2444001 	sub	r4, r4, #1
    dcbc:	e2832001 	add	r2, r3, #1
    dcc0:	e3740001 	cmn	r4, #1
    dcc4:	e58b200c 	str	r2, [fp, #12]
    dcc8:	e5c31000 	strb	r1, [r3]
    dccc:	1afffff8 	bne	dcb4 <CString::FormatV(char const*, std::__va_list)+0x8a4>
    dcd0:	eaffff91 	b	db1c <CString::FormatV(char const*, std::__va_list)+0x70c>
    dcd4:	e3a01001 	mov	r1, #1
    dcd8:	e1a0000b 	mov	r0, fp
    dcdc:	ebfffbde 	bl	cc5c <CString::ReserveSpace(unsigned int) [clone .part.0]>
    dce0:	e3a0202d 	mov	r2, #45	; 0x2d
    dce4:	e59b300c 	ldr	r3, [fp, #12]
    dce8:	e2831001 	add	r1, r3, #1
    dcec:	e58b100c 	str	r1, [fp, #12]
    dcf0:	e5c32000 	strb	r2, [r3]
    dcf4:	eaffffd9 	b	dc60 <CString::FormatV(char const*, std::__va_list)+0x850>
    dcf8:	e1500004 	cmp	r0, r4
    dcfc:	2afffe9a 	bcs	d76c <CString::FormatV(char const*, std::__va_list)+0x35c>
    dd00:	eaffff40 	b	da08 <CString::FormatV(char const*, std::__va_list)+0x5f8>
    dd04:	cccccccd 	.word	0xcccccccd

0000dd08 <CString::Format(char const*, ...)>:
    dd08:	e92d000e 	push	{r1, r2, r3}
    dd0c:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    dd10:	e24dd008 	sub	sp, sp, #8
    dd14:	e28d3010 	add	r3, sp, #16
    dd18:	e1a02003 	mov	r2, r3
    dd1c:	e59d100c 	ldr	r1, [sp, #12]
    dd20:	e58d3004 	str	r3, [sp, #4]
    dd24:	ebfffdb9 	bl	d410 <CString::FormatV(char const*, std::__va_list)>
    dd28:	e28dd008 	add	sp, sp, #8
    dd2c:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
    dd30:	e28dd00c 	add	sp, sp, #12
    dd34:	e12fff1e 	bx	lr

0000dd38 <__aeabi_atexit>:
    dd38:	e12fff1e 	bx	lr

0000dd3c <__errno>:
    dd3c:	e59f0000 	ldr	r0, [pc]	; dd44 <__errno+0x8>
    dd40:	e12fff1e 	bx	lr
    dd44:	000155dc 	.word	0x000155dc

0000dd48 <halt>:
    dd48:	f10c0080 	cpsid	i
    dd4c:	f10c0040 	cpsid	f
    dd50:	eafffffe 	b	dd50 <halt+0x8>

0000dd54 <reboot>:
    dd54:	e3a03000 	mov	r3, #0
    dd58:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
    dd5c:	e59f3010 	ldr	r3, [pc, #16]	; dd74 <reboot+0x20>
    dd60:	e59f1010 	ldr	r1, [pc, #16]	; dd78 <reboot+0x24>
    dd64:	e59f2010 	ldr	r2, [pc, #16]	; dd7c <reboot+0x28>
    dd68:	e5831024 	str	r1, [r3, #36]	; 0x24
    dd6c:	e583201c 	str	r2, [r3, #28]
    dd70:	eafffffe 	b	dd70 <reboot+0x1c>
    dd74:	20100000 	.word	0x20100000
    dd78:	5a000001 	.word	0x5a000001
    dd7c:	5a000020 	.word	0x5a000020

0000dd80 <sysinit>:
    dd80:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    dd84:	e24dd024 	sub	sp, sp, #36	; 0x24
    dd88:	f1080040 	cpsie	f
    dd8c:	ee113f50 	mrc	15, 0, r3, cr1, cr0, {2}
    dd90:	e383360f 	orr	r3, r3, #15728640	; 0xf00000
    dd94:	ee013f50 	mcr	15, 0, r3, cr1, cr0, {2}
    dd98:	e3a02000 	mov	r2, #0
    dd9c:	ee072f95 	mcr	15, 0, r2, cr7, cr5, {4}
    dda0:	e3a03101 	mov	r3, #1073741824	; 0x40000000
    dda4:	eee83a10 	vmsr	fpexc, r3
    dda8:	e3a03402 	mov	r3, #33554432	; 0x2000000
    ddac:	eee13a10 	vmsr	fpscr, r3
    ddb0:	e59f307c 	ldr	r3, [pc, #124]	; de34 <sysinit+0xb4>
    ddb4:	e59f107c 	ldr	r1, [pc, #124]	; de38 <sysinit+0xb8>
    ddb8:	e1530001 	cmp	r3, r1
    ddbc:	2a000002 	bcs	ddcc <sysinit+0x4c>
    ddc0:	e4c32001 	strb	r2, [r3], #1
    ddc4:	e1530001 	cmp	r3, r1
    ddc8:	1afffffc 	bne	ddc0 <sysinit+0x40>
    ddcc:	e28d0004 	add	r0, sp, #4
    ddd0:	ebfff1de 	bl	a550 <CMachineInfo::CMachineInfo()>
    ddd4:	e59f4060 	ldr	r4, [pc, #96]	; de3c <sysinit+0xbc>
    ddd8:	e59f3060 	ldr	r3, [pc, #96]	; de40 <sysinit+0xc0>
    dddc:	e1540003 	cmp	r4, r3
    dde0:	2a000008 	bcs	de08 <sysinit+0x88>
    dde4:	e1e05004 	mvn	r5, r4
    dde8:	e0855003 	add	r5, r5, r3
    ddec:	e3c55003 	bic	r5, r5, #3
    ddf0:	e0855004 	add	r5, r5, r4
    ddf4:	e2444004 	sub	r4, r4, #4
    ddf8:	e5b43004 	ldr	r3, [r4, #4]!
    ddfc:	e12fff33 	blx	r3
    de00:	e1540005 	cmp	r4, r5
    de04:	1afffffb 	bne	ddf8 <sysinit+0x78>
    de08:	ebffe896 	bl	8068 <main>
    de0c:	e3500001 	cmp	r0, #1
    de10:	0a000000 	beq	de18 <sysinit+0x98>
    de14:	ebffffcb 	bl	dd48 <halt>
    de18:	eb00060f 	bl	f65c <IsChainBootEnabled>
    de1c:	e3500000 	cmp	r0, #0
    de20:	1a000000 	bne	de28 <sysinit+0xa8>
    de24:	ebffffca 	bl	dd54 <reboot>
    de28:	f10c0040 	cpsid	f
    de2c:	eb000610 	bl	f674 <DoChainBoot>
    de30:	eafffffb 	b	de24 <sysinit+0xa4>
    de34:	000155c0 	.word	0x000155c0
    de38:	00015674 	.word	0x00015674
    de3c:	00015274 	.word	0x00015274
    de40:	00015284 	.word	0x00015284

0000de44 <CTimer::SimpleusDelay(unsigned int) [clone .part.0]>:
    de44:	e2800001 	add	r0, r0, #1
    de48:	e3a03000 	mov	r3, #0
    de4c:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
    de50:	e59f3020 	ldr	r3, [pc, #32]	; de78 <CTimer::SimpleusDelay(unsigned int) [clone .part.0]+0x34>
    de54:	e1a01003 	mov	r1, r3
    de58:	e5932004 	ldr	r2, [r3, #4]
    de5c:	e5913004 	ldr	r3, [r1, #4]
    de60:	e0433002 	sub	r3, r3, r2
    de64:	e1500003 	cmp	r0, r3
    de68:	8afffffb 	bhi	de5c <CTimer::SimpleusDelay(unsigned int) [clone .part.0]+0x18>
    de6c:	e3a03000 	mov	r3, #0
    de70:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
    de74:	e12fff1e 	bx	lr
    de78:	20003000 	.word	0x20003000

0000de7c <CTimer::CTimer(CInterruptSystem*)>:
    de7c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    de80:	e3a05000 	mov	r5, #0
    de84:	e3a07001 	mov	r7, #1
    de88:	e1a04000 	mov	r4, r0
    de8c:	e59f6058 	ldr	r6, [pc, #88]	; deec <CTimer::CTimer(CInterruptSystem*)+0x70>
    de90:	e5805004 	str	r5, [r0, #4]
    de94:	e5801000 	str	r1, [r0]
    de98:	e5805008 	str	r5, [r0, #8]
    de9c:	e5805014 	str	r5, [r0, #20]
    dea0:	e5807010 	str	r7, [r0, #16]
    dea4:	e580500c 	str	r5, [r0, #12]
    dea8:	e2800018 	add	r0, r0, #24
    deac:	eb00118a 	bl	124dc <CPtrList::CPtrList()>
    deb0:	e5963000 	ldr	r3, [r6]
    deb4:	e59f2034 	ldr	r2, [pc, #52]	; def0 <CTimer::CTimer(CInterruptSystem*)+0x74>
    deb8:	e1530005 	cmp	r3, r5
    debc:	e59f3030 	ldr	r3, [pc, #48]	; def4 <CTimer::CTimer(CInterruptSystem*)+0x78>
    dec0:	e584701c 	str	r7, [r4, #28]
    dec4:	e5845028 	str	r5, [r4, #40]	; 0x28
    dec8:	e1c422f0 	strd	r2, [r4, #32]
    decc:	0a000003 	beq	dee0 <CTimer::CTimer(CInterruptSystem*)+0x64>
    ded0:	e3a0203d 	mov	r2, #61	; 0x3d
    ded4:	e59f101c 	ldr	r1, [pc, #28]	; def8 <CTimer::CTimer(CInterruptSystem*)+0x7c>
    ded8:	e59f001c 	ldr	r0, [pc, #28]	; defc <CTimer::CTimer(CInterruptSystem*)+0x80>
    dedc:	eb0008bb 	bl	101d0 <assertion_failed>
    dee0:	e5864000 	str	r4, [r6]
    dee4:	e1a00004 	mov	r0, r4
    dee8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    deec:	000155e0 	.word	0x000155e0
    def0:	00055730 	.word	0x00055730
    def4:	0000015e 	.word	0x0000015e
    def8:	00013864 	.word	0x00013864
    defc:	00013870 	.word	0x00013870

0000df00 <CTimer::~CTimer()>:
    df00:	e92d4ff8 	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    df04:	e1a09000 	mov	r9, r0
    df08:	e5900000 	ldr	r0, [r0]
    df0c:	e3500000 	cmp	r0, #0
    df10:	0a000028 	beq	dfb8 <CTimer::~CTimer()+0xb8>
    df14:	e3a01003 	mov	r1, #3
    df18:	eb0010a2 	bl	121a8 <CInterruptSystem::DisconnectIRQ(unsigned int)>
    df1c:	e59f80ac 	ldr	r8, [pc, #172]	; dfd0 <CTimer::~CTimer()+0xd0>
    df20:	e59fb0ac 	ldr	fp, [pc, #172]	; dfd4 <CTimer::~CTimer()+0xd4>
    df24:	e59f70ac 	ldr	r7, [pc, #172]	; dfd8 <CTimer::~CTimer()+0xd8>
    df28:	e59fa0ac 	ldr	sl, [pc, #172]	; dfdc <CTimer::~CTimer()+0xdc>
    df2c:	e2894018 	add	r4, r9, #24
    df30:	ea000011 	b	df7c <CTimer::~CTimer()+0x7c>
    df34:	e1a01005 	mov	r1, r5
    df38:	e1a00004 	mov	r0, r4
    df3c:	eb00118e 	bl	1257c <CPtrList::GetPtr(TPtrListElement*)>
    df40:	e2506000 	subs	r6, r0, #0
    df44:	0a000016 	beq	dfa4 <CTimer::~CTimer()+0xa4>
    df48:	e5963000 	ldr	r3, [r6]
    df4c:	e1530007 	cmp	r3, r7
    df50:	0a000003 	beq	df64 <CTimer::~CTimer()+0x64>
    df54:	e3a02055 	mov	r2, #85	; 0x55
    df58:	e1a01008 	mov	r1, r8
    df5c:	e1a0000a 	mov	r0, sl
    df60:	eb00089a 	bl	101d0 <assertion_failed>
    df64:	e1a01005 	mov	r1, r5
    df68:	e1a00004 	mov	r0, r4
    df6c:	eb001219 	bl	127d8 <CPtrList::Remove(TPtrListElement*)>
    df70:	e1a00006 	mov	r0, r6
    df74:	e3a01014 	mov	r1, #20
    df78:	eb000708 	bl	fba0 <operator delete(void*, unsigned int)>
    df7c:	e1a00004 	mov	r0, r4
    df80:	eb001165 	bl	1251c <CPtrList::GetFirst()>
    df84:	e2505000 	subs	r5, r0, #0
    df88:	1affffe9 	bne	df34 <CTimer::~CTimer()+0x34>
    df8c:	e59f304c 	ldr	r3, [pc, #76]	; dfe0 <CTimer::~CTimer()+0xe0>
    df90:	e1a00004 	mov	r0, r4
    df94:	e5835000 	str	r5, [r3]
    df98:	eb001152 	bl	124e8 <CPtrList::~CPtrList()>
    df9c:	e1a00009 	mov	r0, r9
    dfa0:	e8bd8ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    dfa4:	e3a02054 	mov	r2, #84	; 0x54
    dfa8:	e1a01008 	mov	r1, r8
    dfac:	e1a0000b 	mov	r0, fp
    dfb0:	eb000886 	bl	101d0 <assertion_failed>
    dfb4:	eaffffe3 	b	df48 <CTimer::~CTimer()+0x48>
    dfb8:	e59f0024 	ldr	r0, [pc, #36]	; dfe4 <CTimer::~CTimer()+0xe4>
    dfbc:	e3a02043 	mov	r2, #67	; 0x43
    dfc0:	e59f1008 	ldr	r1, [pc, #8]	; dfd0 <CTimer::~CTimer()+0xd0>
    dfc4:	eb000881 	bl	101d0 <assertion_failed>
    dfc8:	e5990000 	ldr	r0, [r9]
    dfcc:	eaffffd0 	b	df14 <CTimer::~CTimer()+0x14>
    dfd0:	00013864 	.word	0x00013864
    dfd4:	00013898 	.word	0x00013898
    dfd8:	4b544d43 	.word	0x4b544d43
    dfdc:	000138a4 	.word	0x000138a4
    dfe0:	000155e0 	.word	0x000155e0
    dfe4:	00013880 	.word	0x00013880

0000dfe8 <CTimer::SetTimeZone(int)>:
    dfe8:	e59f2018 	ldr	r2, [pc, #24]	; e008 <CTimer::SetTimeZone(int)+0x20>
    dfec:	e2813e59 	add	r3, r1, #1424	; 0x590
    dff0:	e283300f 	add	r3, r3, #15
    dff4:	e1530002 	cmp	r3, r2
    dff8:	95801014 	strls	r1, [r0, #20]
    dffc:	93a00001 	movls	r0, #1
    e000:	83a00000 	movhi	r0, #0
    e004:	e12fff1e 	bx	lr
    e008:	00000b3e 	.word	0x00000b3e

0000e00c <CTimer::GetTimeZone() const>:
    e00c:	e5900014 	ldr	r0, [r0, #20]
    e010:	e12fff1e 	bx	lr

0000e014 <CTimer::SetTime(unsigned int, bool)>:
    e014:	e3520000 	cmp	r2, #0
    e018:	e92d4070 	push	{r4, r5, r6, lr}
    e01c:	e1a04000 	mov	r4, r0
    e020:	e1a05001 	mov	r5, r1
    e024:	1a000004 	bne	e03c <CTimer::SetTime(unsigned int, bool)+0x28>
    e028:	e5903014 	ldr	r3, [r0, #20]
    e02c:	e0633203 	rsb	r3, r3, r3, lsl #4
    e030:	e1b03103 	lsls	r3, r3, #2
    e034:	4a00000e 	bmi	e074 <CTimer::SetTime(unsigned int, bool)+0x60>
    e038:	e0855003 	add	r5, r5, r3
    e03c:	e5940010 	ldr	r0, [r4, #16]
    e040:	e3500000 	cmp	r0, #0
    e044:	1a000002 	bne	e054 <CTimer::SetTime(unsigned int, bool)+0x40>
    e048:	e3a00001 	mov	r0, #1
    e04c:	e584500c 	str	r5, [r4, #12]
    e050:	e8bd8070 	pop	{r4, r5, r6, pc}
    e054:	eb000673 	bl	fa28 <EnterCritical>
    e058:	e5943010 	ldr	r3, [r4, #16]
    e05c:	e584500c 	str	r5, [r4, #12]
    e060:	e3530000 	cmp	r3, #0
    e064:	0a000007 	beq	e088 <CTimer::SetTime(unsigned int, bool)+0x74>
    e068:	eb00069b 	bl	fadc <LeaveCritical>
    e06c:	e3a00001 	mov	r0, #1
    e070:	e8bd8070 	pop	{r4, r5, r6, pc}
    e074:	e2631000 	rsb	r1, r3, #0
    e078:	e1510005 	cmp	r1, r5
    e07c:	daffffed 	ble	e038 <CTimer::SetTime(unsigned int, bool)+0x24>
    e080:	e1a00002 	mov	r0, r2
    e084:	e8bd8070 	pop	{r4, r5, r6, pc}
    e088:	e3a00001 	mov	r0, #1
    e08c:	e8bd8070 	pop	{r4, r5, r6, pc}

0000e090 <CTimer::GetClockTicks()>:
    e090:	e3a03000 	mov	r3, #0
    e094:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
    e098:	e59f2008 	ldr	r2, [pc, #8]	; e0a8 <CTimer::GetClockTicks()+0x18>
    e09c:	e5920004 	ldr	r0, [r2, #4]
    e0a0:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
    e0a4:	e12fff1e 	bx	lr
    e0a8:	20003000 	.word	0x20003000

0000e0ac <CTimer::GetTicks() const>:
    e0ac:	e5900004 	ldr	r0, [r0, #4]
    e0b0:	e12fff1e 	bx	lr

0000e0b4 <CTimer::GetUptime() const>:
    e0b4:	e5900008 	ldr	r0, [r0, #8]
    e0b8:	e12fff1e 	bx	lr

0000e0bc <CTimer::GetTime() const>:
    e0bc:	e590000c 	ldr	r0, [r0, #12]
    e0c0:	e12fff1e 	bx	lr

0000e0c4 <CTimer::GetLocalTime(unsigned int*, unsigned int*)>:
    e0c4:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    e0c8:	e1a04000 	mov	r4, r0
    e0cc:	e5900010 	ldr	r0, [r0, #16]
    e0d0:	e1a06001 	mov	r6, r1
    e0d4:	e3500000 	cmp	r0, #0
    e0d8:	e1a05002 	mov	r5, r2
    e0dc:	1a000013 	bne	e130 <CTimer::GetLocalTime(unsigned int*, unsigned int*)+0x6c>
    e0e0:	e594700c 	ldr	r7, [r4, #12]
    e0e4:	e5944004 	ldr	r4, [r4, #4]
    e0e8:	e3560000 	cmp	r6, #0
    e0ec:	0a000018 	beq	e154 <CTimer::GetLocalTime(unsigned int*, unsigned int*)+0x90>
    e0f0:	e3550000 	cmp	r5, #0
    e0f4:	e5867000 	str	r7, [r6]
    e0f8:	0a00001c 	beq	e170 <CTimer::GetLocalTime(unsigned int*, unsigned int*)+0xac>
    e0fc:	e59f2080 	ldr	r2, [pc, #128]	; e184 <CTimer::GetLocalTime(unsigned int*, unsigned int*)+0xc0>
    e100:	e3a00001 	mov	r0, #1
    e104:	e0832294 	umull	r2, r3, r4, r2
    e108:	e1a032a3 	lsr	r3, r3, #5
    e10c:	e0833103 	add	r3, r3, r3, lsl #2
    e110:	e0833103 	add	r3, r3, r3, lsl #2
    e114:	e0443103 	sub	r3, r4, r3, lsl #2
    e118:	e0632283 	rsb	r2, r3, r3, lsl #5
    e11c:	e0833102 	add	r3, r3, r2, lsl #2
    e120:	e0833103 	add	r3, r3, r3, lsl #2
    e124:	e1a03203 	lsl	r3, r3, #4
    e128:	e5853000 	str	r3, [r5]
    e12c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    e130:	eb00063c 	bl	fa28 <EnterCritical>
    e134:	e5943010 	ldr	r3, [r4, #16]
    e138:	e594700c 	ldr	r7, [r4, #12]
    e13c:	e3530000 	cmp	r3, #0
    e140:	e5944004 	ldr	r4, [r4, #4]
    e144:	0affffe7 	beq	e0e8 <CTimer::GetLocalTime(unsigned int*, unsigned int*)+0x24>
    e148:	eb000663 	bl	fadc <LeaveCritical>
    e14c:	e3560000 	cmp	r6, #0
    e150:	1affffe6 	bne	e0f0 <CTimer::GetLocalTime(unsigned int*, unsigned int*)+0x2c>
    e154:	e3a020fb 	mov	r2, #251	; 0xfb
    e158:	e59f1028 	ldr	r1, [pc, #40]	; e188 <CTimer::GetLocalTime(unsigned int*, unsigned int*)+0xc4>
    e15c:	e59f0028 	ldr	r0, [pc, #40]	; e18c <CTimer::GetLocalTime(unsigned int*, unsigned int*)+0xc8>
    e160:	eb00081a 	bl	101d0 <assertion_failed>
    e164:	e3550000 	cmp	r5, #0
    e168:	e5867000 	str	r7, [r6]
    e16c:	1affffe2 	bne	e0fc <CTimer::GetLocalTime(unsigned int*, unsigned int*)+0x38>
    e170:	e3a020fe 	mov	r2, #254	; 0xfe
    e174:	e59f100c 	ldr	r1, [pc, #12]	; e188 <CTimer::GetLocalTime(unsigned int*, unsigned int*)+0xc4>
    e178:	e59f0010 	ldr	r0, [pc, #16]	; e190 <CTimer::GetLocalTime(unsigned int*, unsigned int*)+0xcc>
    e17c:	eb000813 	bl	101d0 <assertion_failed>
    e180:	eaffffdd 	b	e0fc <CTimer::GetLocalTime(unsigned int*, unsigned int*)+0x38>
    e184:	51eb851f 	.word	0x51eb851f
    e188:	00013864 	.word	0x00013864
    e18c:	000138cc 	.word	0x000138cc
    e190:	000138dc 	.word	0x000138dc

0000e194 <CTimer::GetUniversalTime() const>:
    e194:	e5903014 	ldr	r3, [r0, #20]
    e198:	e590000c 	ldr	r0, [r0, #12]
    e19c:	e0633203 	rsb	r3, r3, r3, lsl #4
    e1a0:	e1a03103 	lsl	r3, r3, #2
    e1a4:	e1500003 	cmp	r0, r3
    e1a8:	a0400003 	subge	r0, r0, r3
    e1ac:	b3a00000 	movlt	r0, #0
    e1b0:	e12fff1e 	bx	lr

0000e1b4 <CTimer::GetUniversalTime(unsigned int*, unsigned int*)>:
    e1b4:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    e1b8:	e1a06000 	mov	r6, r0
    e1bc:	e5900010 	ldr	r0, [r0, #16]
    e1c0:	e1a09001 	mov	r9, r1
    e1c4:	e3500000 	cmp	r0, #0
    e1c8:	e1a04002 	mov	r4, r2
    e1cc:	1a00001b 	bne	e240 <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0x8c>
    e1d0:	e596800c 	ldr	r8, [r6, #12]
    e1d4:	e5967004 	ldr	r7, [r6, #4]
    e1d8:	e5962014 	ldr	r2, [r6, #20]
    e1dc:	e0622202 	rsb	r2, r2, r2, lsl #4
    e1e0:	e1a05102 	lsl	r5, r2, #2
    e1e4:	e1580005 	cmp	r8, r5
    e1e8:	ba000012 	blt	e238 <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0x84>
    e1ec:	e3590000 	cmp	r9, #0
    e1f0:	0a00001f 	beq	e274 <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0xc0>
    e1f4:	e0485005 	sub	r5, r8, r5
    e1f8:	e3540000 	cmp	r4, #0
    e1fc:	e5895000 	str	r5, [r9]
    e200:	0a000016 	beq	e260 <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0xac>
    e204:	e59f207c 	ldr	r2, [pc, #124]	; e288 <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0xd4>
    e208:	e3a00001 	mov	r0, #1
    e20c:	e0832297 	umull	r2, r3, r7, r2
    e210:	e1a032a3 	lsr	r3, r3, #5
    e214:	e0833103 	add	r3, r3, r3, lsl #2
    e218:	e0833103 	add	r3, r3, r3, lsl #2
    e21c:	e0473103 	sub	r3, r7, r3, lsl #2
    e220:	e0632283 	rsb	r2, r3, r3, lsl #5
    e224:	e0833102 	add	r3, r3, r2, lsl #2
    e228:	e0833103 	add	r3, r3, r3, lsl #2
    e22c:	e1a03203 	lsl	r3, r3, #4
    e230:	e5843000 	str	r3, [r4]
    e234:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    e238:	e3a00000 	mov	r0, #0
    e23c:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    e240:	eb0005f8 	bl	fa28 <EnterCritical>
    e244:	e5963010 	ldr	r3, [r6, #16]
    e248:	e596800c 	ldr	r8, [r6, #12]
    e24c:	e3530000 	cmp	r3, #0
    e250:	e5967004 	ldr	r7, [r6, #4]
    e254:	0affffdf 	beq	e1d8 <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0x24>
    e258:	eb00061f 	bl	fadc <LeaveCritical>
    e25c:	eaffffdd 	b	e1d8 <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0x24>
    e260:	e59f2024 	ldr	r2, [pc, #36]	; e28c <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0xd8>
    e264:	e59f1024 	ldr	r1, [pc, #36]	; e290 <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0xdc>
    e268:	e59f0024 	ldr	r0, [pc, #36]	; e294 <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0xe0>
    e26c:	eb0007d7 	bl	101d0 <assertion_failed>
    e270:	eaffffe3 	b	e204 <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0x50>
    e274:	e3a02e12 	mov	r2, #288	; 0x120
    e278:	e59f1010 	ldr	r1, [pc, #16]	; e290 <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0xdc>
    e27c:	e59f0014 	ldr	r0, [pc, #20]	; e298 <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0xe4>
    e280:	eb0007d2 	bl	101d0 <assertion_failed>
    e284:	eaffffda 	b	e1f4 <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0x40>
    e288:	51eb851f 	.word	0x51eb851f
    e28c:	00000123 	.word	0x00000123
    e290:	00013864 	.word	0x00013864
    e294:	000138dc 	.word	0x000138dc
    e298:	000138cc 	.word	0x000138cc

0000e29c <CTimer::GetTimeString()>:
    e29c:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e2a0:	e1a05000 	mov	r5, r0
    e2a4:	e5900010 	ldr	r0, [r0, #16]
    e2a8:	e24dd01c 	sub	sp, sp, #28
    e2ac:	e3500000 	cmp	r0, #0
    e2b0:	1a000065 	bne	e44c <CTimer::GetTimeString()+0x1b0>
    e2b4:	e595400c 	ldr	r4, [r5, #12]
    e2b8:	e595b004 	ldr	fp, [r5, #4]
    e2bc:	e194900b 	orrs	r9, r4, fp
    e2c0:	0a00004d 	beq	e3fc <CTimer::GetTimeString()+0x160>
    e2c4:	e59f61a0 	ldr	r6, [pc, #416]	; e46c <CTimer::GetTimeString()+0x1d0>
    e2c8:	e59f01a0 	ldr	r0, [pc, #416]	; e470 <CTimer::GetTimeString()+0x1d4>
    e2cc:	e0832694 	umull	r2, r3, r4, r6
    e2d0:	e1a072a3 	lsr	r7, r3, #5
    e2d4:	e1a0c007 	mov	ip, r7
    e2d8:	e59f2194 	ldr	r2, [pc, #404]	; e474 <CTimer::GetTimeString()+0x1d8>
    e2dc:	e0876697 	umull	r6, r7, r7, r6
    e2e0:	e0810094 	umull	r0, r1, r4, r0
    e2e4:	e0832294 	umull	r2, r3, r4, r2
    e2e8:	e1a062a7 	lsr	r6, r7, #5
    e2ec:	e0666206 	rsb	r6, r6, r6, lsl #4
    e2f0:	e06c720c 	rsb	r7, ip, ip, lsl #4
    e2f4:	e0447107 	sub	r7, r4, r7, lsl #2
    e2f8:	e04c6106 	sub	r6, ip, r6, lsl #2
    e2fc:	e59f5174 	ldr	r5, [pc, #372]	; e478 <CTimer::GetTimeString()+0x1dc>
    e300:	e59fe174 	ldr	lr, [pc, #372]	; e47c <CTimer::GetTimeString()+0x1e0>
    e304:	e59fc174 	ldr	ip, [pc, #372]	; e480 <CTimer::GetTimeString()+0x1e4>
    e308:	e1a0a5a1 	lsr	sl, r1, #11
    e30c:	e59f8170 	ldr	r8, [pc, #368]	; e484 <CTimer::GetTimeString()+0x1e8>
    e310:	e1a04823 	lsr	r4, r3, #16
    e314:	ea000009 	b	e340 <CTimer::GetTimeString()+0xa4>
    e318:	e1550203 	cmp	r5, r3, lsl #4
    e31c:	03a03001 	moveq	r3, #1
    e320:	13a03000 	movne	r3, #0
    e324:	e3530000 	cmp	r3, #0
    e328:	01a0100c 	moveq	r1, ip
    e32c:	11a01008 	movne	r1, r8
    e330:	e1540001 	cmp	r4, r1
    e334:	3a00000e 	bcc	e374 <CTimer::GetTimeString()+0xd8>
    e338:	e0444001 	sub	r4, r4, r1
    e33c:	e2855001 	add	r5, r5, #1
    e340:	e0810e95 	umull	r0, r1, r5, lr
    e344:	e1a032a1 	lsr	r3, r1, #5
    e348:	e1a003a1 	lsr	r0, r1, #7
    e34c:	e0831103 	add	r1, r3, r3, lsl #2
    e350:	e0811101 	add	r1, r1, r1, lsl #2
    e354:	e0803100 	add	r3, r0, r0, lsl #2
    e358:	e1550101 	cmp	r5, r1, lsl #2
    e35c:	e0833103 	add	r3, r3, r3, lsl #2
    e360:	0affffec 	beq	e318 <CTimer::GetTimeString()+0x7c>
    e364:	e3150003 	tst	r5, #3
    e368:	03a03001 	moveq	r3, #1
    e36c:	13a03000 	movne	r3, #0
    e370:	eaffffeb 	b	e324 <CTimer::GetTimeString()+0x88>
    e374:	e1a02003 	mov	r2, r3
    e378:	e59f0108 	ldr	r0, [pc, #264]	; e488 <CTimer::GetTimeString()+0x1ec>
    e37c:	e3a03000 	mov	r3, #0
    e380:	ea000001 	b	e38c <CTimer::GetTimeString()+0xf0>
    e384:	e0444001 	sub	r4, r4, r1
    e388:	e2833001 	add	r3, r3, #1
    e38c:	e3530001 	cmp	r3, #1
    e390:	13a01000 	movne	r1, #0
    e394:	02021001 	andeq	r1, r2, #1
    e398:	e3510000 	cmp	r1, #0
    e39c:	13a0101d 	movne	r1, #29
    e3a0:	07901103 	ldreq	r1, [r0, r3, lsl #2]
    e3a4:	e1540001 	cmp	r4, r1
    e3a8:	2afffff5 	bcs	e384 <CTimer::GetTimeString()+0xe8>
    e3ac:	e3a00010 	mov	r0, #16
    e3b0:	e58d3014 	str	r3, [sp, #20]
    e3b4:	eb0005f5 	bl	fb90 <operator new(unsigned int)>
    e3b8:	e59f80bc 	ldr	r8, [pc, #188]	; e47c <CTimer::GetTimeString()+0x1e0>
    e3bc:	e089889b 	umull	r8, r9, fp, r8
    e3c0:	e1a082a9 	lsr	r8, r9, #5
    e3c4:	e1a09000 	mov	r9, r0
    e3c8:	ebfffa3d 	bl	ccc4 <CString::CString()>
    e3cc:	e59f20b8 	ldr	r2, [pc, #184]	; e48c <CTimer::GetTimeString()+0x1f0>
    e3d0:	e0888108 	add	r8, r8, r8, lsl #2
    e3d4:	e0888108 	add	r8, r8, r8, lsl #2
    e3d8:	e1550002 	cmp	r5, r2
    e3dc:	e04b8108 	sub	r8, fp, r8, lsl #2
    e3e0:	8a000008 	bhi	e408 <CTimer::GetTimeString()+0x16c>
    e3e4:	e88d0180 	stm	sp, {r7, r8}
    e3e8:	e1a03006 	mov	r3, r6
    e3ec:	e1a0200a 	mov	r2, sl
    e3f0:	e59f1098 	ldr	r1, [pc, #152]	; e490 <CTimer::GetTimeString()+0x1f4>
    e3f4:	e1a00009 	mov	r0, r9
    e3f8:	ebfffe42 	bl	dd08 <CString::Format(char const*, ...)>
    e3fc:	e1a00009 	mov	r0, r9
    e400:	e28dd01c 	add	sp, sp, #28
    e404:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e408:	e59f0084 	ldr	r0, [pc, #132]	; e494 <CTimer::GetTimeString()+0x1f8>
    e40c:	e59d3014 	ldr	r3, [sp, #20]
    e410:	e081009a 	umull	r0, r1, sl, r0
    e414:	e1a02221 	lsr	r2, r1, #4
    e418:	e59fc078 	ldr	ip, [pc, #120]	; e498 <CTimer::GetTimeString()+0x1fc>
    e41c:	e0821082 	add	r1, r2, r2, lsl #1
    e420:	e04aa181 	sub	sl, sl, r1, lsl #3
    e424:	e79c2103 	ldr	r2, [ip, r3, lsl #2]
    e428:	e1a00009 	mov	r0, r9
    e42c:	e98d01c0 	stmib	sp, {r6, r7, r8}
    e430:	e2843001 	add	r3, r4, #1
    e434:	e58da000 	str	sl, [sp]
    e438:	e59f105c 	ldr	r1, [pc, #92]	; e49c <CTimer::GetTimeString()+0x200>
    e43c:	ebfffe31 	bl	dd08 <CString::Format(char const*, ...)>
    e440:	e1a00009 	mov	r0, r9
    e444:	e28dd01c 	add	sp, sp, #28
    e448:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e44c:	eb000575 	bl	fa28 <EnterCritical>
    e450:	e5953010 	ldr	r3, [r5, #16]
    e454:	e595400c 	ldr	r4, [r5, #12]
    e458:	e3530000 	cmp	r3, #0
    e45c:	e595b004 	ldr	fp, [r5, #4]
    e460:	0affff95 	beq	e2bc <CTimer::GetTimeString()+0x20>
    e464:	eb00059c 	bl	fadc <LeaveCritical>
    e468:	eaffff93 	b	e2bc <CTimer::GetTimeString()+0x20>
    e46c:	88888889 	.word	0x88888889
    e470:	91a2b3c5 	.word	0x91a2b3c5
    e474:	c22e4507 	.word	0xc22e4507
    e478:	000007b2 	.word	0x000007b2
    e47c:	51eb851f 	.word	0x51eb851f
    e480:	0000016d 	.word	0x0000016d
    e484:	0000016e 	.word	0x0000016e
    e488:	0001382c 	.word	0x0001382c
    e48c:	000007b7 	.word	0x000007b7
    e490:	0001390c 	.word	0x0001390c
    e494:	aaaaaaab 	.word	0xaaaaaaab
    e498:	000154c0 	.word	0x000154c0
    e49c:	000138f0 	.word	0x000138f0

0000e4a0 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)>:
    e4a0:	e92d4ff8 	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e4a4:	e1a0a000 	mov	sl, r0
    e4a8:	e1a04002 	mov	r4, r2
    e4ac:	e3a00014 	mov	r0, #20
    e4b0:	e1a06001 	mov	r6, r1
    e4b4:	e1a08003 	mov	r8, r3
    e4b8:	e59d5028 	ldr	r5, [sp, #40]	; 0x28
    e4bc:	eb0005b3 	bl	fb90 <operator new(unsigned int)>
    e4c0:	e59a1004 	ldr	r1, [sl, #4]
    e4c4:	e3540000 	cmp	r4, #0
    e4c8:	e1a07000 	mov	r7, r0
    e4cc:	e0816006 	add	r6, r1, r6
    e4d0:	0a00003a 	beq	e5c0 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x120>
    e4d4:	e59a001c 	ldr	r0, [sl, #28]
    e4d8:	e59f20f4 	ldr	r2, [pc, #244]	; e5d4 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x134>
    e4dc:	e3500000 	cmp	r0, #0
    e4e0:	e5874004 	str	r4, [r7, #4]
    e4e4:	e5876008 	str	r6, [r7, #8]
    e4e8:	e587800c 	str	r8, [r7, #12]
    e4ec:	e5875010 	str	r5, [r7, #16]
    e4f0:	e5872000 	str	r2, [r7]
    e4f4:	1a00002f 	bne	e5b8 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x118>
    e4f8:	e28a5018 	add	r5, sl, #24
    e4fc:	e1a00005 	mov	r0, r5
    e500:	eb001005 	bl	1251c <CPtrList::GetFirst()>
    e504:	e2504000 	subs	r4, r0, #0
    e508:	0a000025 	beq	e5a4 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x104>
    e50c:	e59f90c4 	ldr	r9, [pc, #196]	; e5d8 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x138>
    e510:	e59f80bc 	ldr	r8, [pc, #188]	; e5d4 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x134>
    e514:	ea000010 	b	e55c <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0xbc>
    e518:	e59b3000 	ldr	r3, [fp]
    e51c:	e1530008 	cmp	r3, r8
    e520:	0a000003 	beq	e534 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x94>
    e524:	e59f20b0 	ldr	r2, [pc, #176]	; e5dc <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x13c>
    e528:	e1a01009 	mov	r1, r9
    e52c:	e59f00ac 	ldr	r0, [pc, #172]	; e5e0 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x140>
    e530:	eb000726 	bl	101d0 <assertion_failed>
    e534:	e59b3008 	ldr	r3, [fp, #8]
    e538:	e1a01004 	mov	r1, r4
    e53c:	e0433006 	sub	r3, r3, r6
    e540:	e3530000 	cmp	r3, #0
    e544:	e1a00005 	mov	r0, r5
    e548:	ca00000d 	bgt	e584 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0xe4>
    e54c:	eb000ff4 	bl	12524 <CPtrList::GetNext(TPtrListElement*)>
    e550:	e3500000 	cmp	r0, #0
    e554:	0a000012 	beq	e5a4 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x104>
    e558:	e1a04000 	mov	r4, r0
    e55c:	e1a01004 	mov	r1, r4
    e560:	e1a00005 	mov	r0, r5
    e564:	eb001004 	bl	1257c <CPtrList::GetPtr(TPtrListElement*)>
    e568:	e250b000 	subs	fp, r0, #0
    e56c:	1affffe9 	bne	e518 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x78>
    e570:	e59f206c 	ldr	r2, [pc, #108]	; e5e4 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x144>
    e574:	e1a01009 	mov	r1, r9
    e578:	e59f0068 	ldr	r0, [pc, #104]	; e5e8 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x148>
    e57c:	eb000713 	bl	101d0 <assertion_failed>
    e580:	eaffffe4 	b	e518 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x78>
    e584:	e1a02007 	mov	r2, r7
    e588:	eb001011 	bl	125d4 <CPtrList::InsertBefore(TPtrListElement*, void*)>
    e58c:	e59a301c 	ldr	r3, [sl, #28]
    e590:	e3530000 	cmp	r3, #0
    e594:	0a000000 	beq	e59c <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0xfc>
    e598:	eb00054f 	bl	fadc <LeaveCritical>
    e59c:	e1a00007 	mov	r0, r7
    e5a0:	e8bd8ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e5a4:	e1a01004 	mov	r1, r4
    e5a8:	e1a00005 	mov	r0, r5
    e5ac:	e1a02007 	mov	r2, r7
    e5b0:	eb001049 	bl	126dc <CPtrList::InsertAfter(TPtrListElement*, void*)>
    e5b4:	eafffff4 	b	e58c <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0xec>
    e5b8:	eb00051a 	bl	fa28 <EnterCritical>
    e5bc:	eaffffcd 	b	e4f8 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x58>
    e5c0:	e59f2024 	ldr	r2, [pc, #36]	; e5ec <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x14c>
    e5c4:	e59f100c 	ldr	r1, [pc, #12]	; e5d8 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x138>
    e5c8:	e59f0020 	ldr	r0, [pc, #32]	; e5f0 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x150>
    e5cc:	eb0006ff 	bl	101d0 <assertion_failed>
    e5d0:	eaffffbf 	b	e4d4 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x34>
    e5d4:	4b544d43 	.word	0x4b544d43
    e5d8:	00013864 	.word	0x00013864
    e5dc:	0000018b 	.word	0x0000018b
    e5e0:	00013930 	.word	0x00013930
    e5e4:	0000018a 	.word	0x0000018a
    e5e8:	00013920 	.word	0x00013920
    e5ec:	0000017a 	.word	0x0000017a
    e5f0:	00014f84 	.word	0x00014f84

0000e5f4 <CTimer::CancelKernelTimer(unsigned int)>:
    e5f4:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    e5f8:	e2514000 	subs	r4, r1, #0
    e5fc:	e1a05000 	mov	r5, r0
    e600:	0a000020 	beq	e688 <CTimer::CancelKernelTimer(unsigned int)+0x94>
    e604:	e595001c 	ldr	r0, [r5, #28]
    e608:	e3500000 	cmp	r0, #0
    e60c:	1a00001b 	bne	e680 <CTimer::CancelKernelTimer(unsigned int)+0x8c>
    e610:	e2856018 	add	r6, r5, #24
    e614:	e1a00006 	mov	r0, r6
    e618:	e1a01004 	mov	r1, r4
    e61c:	eb0010c2 	bl	1292c <CPtrList::Find(void*)>
    e620:	e2507000 	subs	r7, r0, #0
    e624:	0a00000b 	beq	e658 <CTimer::CancelKernelTimer(unsigned int)+0x64>
    e628:	e59f306c 	ldr	r3, [pc, #108]	; e69c <CTimer::CancelKernelTimer(unsigned int)+0xa8>
    e62c:	e5942000 	ldr	r2, [r4]
    e630:	e1520003 	cmp	r2, r3
    e634:	1a00000c 	bne	e66c <CTimer::CancelKernelTimer(unsigned int)+0x78>
    e638:	e1a01007 	mov	r1, r7
    e63c:	e1a00006 	mov	r0, r6
    e640:	eb001064 	bl	127d8 <CPtrList::Remove(TPtrListElement*)>
    e644:	e3a03000 	mov	r3, #0
    e648:	e1a00004 	mov	r0, r4
    e64c:	e5843000 	str	r3, [r4]
    e650:	e3a01014 	mov	r1, #20
    e654:	eb000551 	bl	fba0 <operator delete(void*, unsigned int)>
    e658:	e595301c 	ldr	r3, [r5, #28]
    e65c:	e3530000 	cmp	r3, #0
    e660:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
    e664:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    e668:	ea00051b 	b	fadc <LeaveCritical>
    e66c:	e59f202c 	ldr	r2, [pc, #44]	; e6a0 <CTimer::CancelKernelTimer(unsigned int)+0xac>
    e670:	e59f102c 	ldr	r1, [pc, #44]	; e6a4 <CTimer::CancelKernelTimer(unsigned int)+0xb0>
    e674:	e59f002c 	ldr	r0, [pc, #44]	; e6a8 <CTimer::CancelKernelTimer(unsigned int)+0xb4>
    e678:	eb0006d4 	bl	101d0 <assertion_failed>
    e67c:	eaffffed 	b	e638 <CTimer::CancelKernelTimer(unsigned int)+0x44>
    e680:	eb0004e8 	bl	fa28 <EnterCritical>
    e684:	eaffffe1 	b	e610 <CTimer::CancelKernelTimer(unsigned int)+0x1c>
    e688:	e59f201c 	ldr	r2, [pc, #28]	; e6ac <CTimer::CancelKernelTimer(unsigned int)+0xb8>
    e68c:	e59f1010 	ldr	r1, [pc, #16]	; e6a4 <CTimer::CancelKernelTimer(unsigned int)+0xb0>
    e690:	e59f0018 	ldr	r0, [pc, #24]	; e6b0 <CTimer::CancelKernelTimer(unsigned int)+0xbc>
    e694:	eb0006cd 	bl	101d0 <assertion_failed>
    e698:	eaffffd9 	b	e604 <CTimer::CancelKernelTimer(unsigned int)+0x10>
    e69c:	4b544d43 	.word	0x4b544d43
    e6a0:	000001ae 	.word	0x000001ae
    e6a4:	00013864 	.word	0x00013864
    e6a8:	000138a4 	.word	0x000138a4
    e6ac:	000001a7 	.word	0x000001a7
    e6b0:	00013898 	.word	0x00013898

0000e6b4 <CTimer::PollKernelTimers()>:
    e6b4:	e92d4ff8 	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e6b8:	e1a05000 	mov	r5, r0
    e6bc:	e590001c 	ldr	r0, [r0, #28]
    e6c0:	e3500000 	cmp	r0, #0
    e6c4:	1a00004a 	bne	e7f4 <CTimer::PollKernelTimers()+0x140>
    e6c8:	e2856018 	add	r6, r5, #24
    e6cc:	e1a00006 	mov	r0, r6
    e6d0:	eb000f91 	bl	1251c <CPtrList::GetFirst()>
    e6d4:	e2504000 	subs	r4, r0, #0
    e6d8:	0a00003b 	beq	e7cc <CTimer::PollKernelTimers()+0x118>
    e6dc:	e59f9118 	ldr	r9, [pc, #280]	; e7fc <CTimer::PollKernelTimers()+0x148>
    e6e0:	e59f8118 	ldr	r8, [pc, #280]	; e800 <CTimer::PollKernelTimers()+0x14c>
    e6e4:	e59fa118 	ldr	sl, [pc, #280]	; e804 <CTimer::PollKernelTimers()+0x150>
    e6e8:	ea000010 	b	e730 <CTimer::PollKernelTimers()+0x7c>
    e6ec:	e5974004 	ldr	r4, [r7, #4]
    e6f0:	e3540000 	cmp	r4, #0
    e6f4:	0a00002c 	beq	e7ac <CTimer::PollKernelTimers()+0xf8>
    e6f8:	e5972010 	ldr	r2, [r7, #16]
    e6fc:	e597100c 	ldr	r1, [r7, #12]
    e700:	e1a00007 	mov	r0, r7
    e704:	e12fff34 	blx	r4
    e708:	e3a03000 	mov	r3, #0
    e70c:	e1a00007 	mov	r0, r7
    e710:	e5873000 	str	r3, [r7]
    e714:	e3a01014 	mov	r1, #20
    e718:	eb000520 	bl	fba0 <operator delete(void*, unsigned int)>
    e71c:	e595001c 	ldr	r0, [r5, #28]
    e720:	e3500000 	cmp	r0, #0
    e724:	1a000025 	bne	e7c0 <CTimer::PollKernelTimers()+0x10c>
    e728:	e25b4000 	subs	r4, fp, #0
    e72c:	0a000026 	beq	e7cc <CTimer::PollKernelTimers()+0x118>
    e730:	e1a01004 	mov	r1, r4
    e734:	e1a00006 	mov	r0, r6
    e738:	eb000f8f 	bl	1257c <CPtrList::GetPtr(TPtrListElement*)>
    e73c:	e2507000 	subs	r7, r0, #0
    e740:	0a000026 	beq	e7e0 <CTimer::PollKernelTimers()+0x12c>
    e744:	e5973000 	ldr	r3, [r7]
    e748:	e1530008 	cmp	r3, r8
    e74c:	0a000003 	beq	e760 <CTimer::PollKernelTimers()+0xac>
    e750:	e3a02f71 	mov	r2, #452	; 0x1c4
    e754:	e1a01009 	mov	r1, r9
    e758:	e1a0000a 	mov	r0, sl
    e75c:	eb00069b 	bl	101d0 <assertion_failed>
    e760:	e5952004 	ldr	r2, [r5, #4]
    e764:	e5973008 	ldr	r3, [r7, #8]
    e768:	e0433002 	sub	r3, r3, r2
    e76c:	e3530000 	cmp	r3, #0
    e770:	ca000015 	bgt	e7cc <CTimer::PollKernelTimers()+0x118>
    e774:	e1a01004 	mov	r1, r4
    e778:	e1a00006 	mov	r0, r6
    e77c:	eb000f68 	bl	12524 <CPtrList::GetNext(TPtrListElement*)>
    e780:	e1a01004 	mov	r1, r4
    e784:	e1a0b000 	mov	fp, r0
    e788:	e1a00006 	mov	r0, r6
    e78c:	eb001011 	bl	127d8 <CPtrList::Remove(TPtrListElement*)>
    e790:	e595301c 	ldr	r3, [r5, #28]
    e794:	e3530000 	cmp	r3, #0
    e798:	0affffd3 	beq	e6ec <CTimer::PollKernelTimers()+0x38>
    e79c:	eb0004ce 	bl	fadc <LeaveCritical>
    e7a0:	e5974004 	ldr	r4, [r7, #4]
    e7a4:	e3540000 	cmp	r4, #0
    e7a8:	1affffd2 	bne	e6f8 <CTimer::PollKernelTimers()+0x44>
    e7ac:	e59f2054 	ldr	r2, [pc, #84]	; e808 <CTimer::PollKernelTimers()+0x154>
    e7b0:	e1a01009 	mov	r1, r9
    e7b4:	e59f0050 	ldr	r0, [pc, #80]	; e80c <CTimer::PollKernelTimers()+0x158>
    e7b8:	eb000684 	bl	101d0 <assertion_failed>
    e7bc:	eaffffcd 	b	e6f8 <CTimer::PollKernelTimers()+0x44>
    e7c0:	eb000498 	bl	fa28 <EnterCritical>
    e7c4:	e25b4000 	subs	r4, fp, #0
    e7c8:	1affffd8 	bne	e730 <CTimer::PollKernelTimers()+0x7c>
    e7cc:	e595301c 	ldr	r3, [r5, #28]
    e7d0:	e3530000 	cmp	r3, #0
    e7d4:	08bd8ff8 	popeq	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e7d8:	e8bd4ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e7dc:	ea0004be 	b	fadc <LeaveCritical>
    e7e0:	e59f2028 	ldr	r2, [pc, #40]	; e810 <CTimer::PollKernelTimers()+0x15c>
    e7e4:	e1a01009 	mov	r1, r9
    e7e8:	e59f0024 	ldr	r0, [pc, #36]	; e814 <CTimer::PollKernelTimers()+0x160>
    e7ec:	eb000677 	bl	101d0 <assertion_failed>
    e7f0:	eaffffd3 	b	e744 <CTimer::PollKernelTimers()+0x90>
    e7f4:	eb00048b 	bl	fa28 <EnterCritical>
    e7f8:	eaffffb2 	b	e6c8 <CTimer::PollKernelTimers()+0x14>
    e7fc:	00013864 	.word	0x00013864
    e800:	4b544d43 	.word	0x4b544d43
    e804:	000138a4 	.word	0x000138a4
    e808:	000001d2 	.word	0x000001d2
    e80c:	00014f84 	.word	0x00014f84
    e810:	000001c3 	.word	0x000001c3
    e814:	00013898 	.word	0x00013898

0000e818 <CTimer::InterruptHandler()>:
    e818:	e92d4010 	push	{r4, lr}
    e81c:	e3a03000 	mov	r3, #0
    e820:	e1a04000 	mov	r4, r0
    e824:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
    e828:	e59f20e4 	ldr	r2, [pc, #228]	; e914 <CTimer::InterruptHandler()+0xfc>
    e82c:	e5923018 	ldr	r3, [r2, #24]
    e830:	e2833c27 	add	r3, r3, #9984	; 0x2700
    e834:	e2833010 	add	r3, r3, #16
    e838:	e5823018 	str	r3, [r2, #24]
    e83c:	e5921004 	ldr	r1, [r2, #4]
    e840:	e1530001 	cmp	r3, r1
    e844:	e3a01008 	mov	r1, #8
    e848:	35923004 	ldrcc	r3, [r2, #4]
    e84c:	32833c27 	addcc	r3, r3, #9984	; 0x2700
    e850:	32833010 	addcc	r3, r3, #16
    e854:	35823018 	strcc	r3, [r2, #24]
    e858:	e59f20b4 	ldr	r2, [pc, #180]	; e914 <CTimer::InterruptHandler()+0xfc>
    e85c:	e3a03000 	mov	r3, #0
    e860:	e5821000 	str	r1, [r2]
    e864:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
    e868:	e5900010 	ldr	r0, [r0, #16]
    e86c:	e1500003 	cmp	r0, r3
    e870:	1a00001a 	bne	e8e0 <CTimer::InterruptHandler()+0xc8>
    e874:	e5942004 	ldr	r2, [r4, #4]
    e878:	e59f0098 	ldr	r0, [pc, #152]	; e918 <CTimer::InterruptHandler()+0x100>
    e87c:	e2822001 	add	r2, r2, #1
    e880:	e0810092 	umull	r0, r1, r2, r0
    e884:	e1a032a1 	lsr	r3, r1, #5
    e888:	e0833103 	add	r3, r3, r3, lsl #2
    e88c:	e0833103 	add	r3, r3, r3, lsl #2
    e890:	e0523103 	subs	r3, r2, r3, lsl #2
    e894:	e5842004 	str	r2, [r4, #4]
    e898:	1a000007 	bne	e8bc <CTimer::InterruptHandler()+0xa4>
    e89c:	e5942008 	ldr	r2, [r4, #8]
    e8a0:	e2822001 	add	r2, r2, #1
    e8a4:	e5842008 	str	r2, [r4, #8]
    e8a8:	e594200c 	ldr	r2, [r4, #12]
    e8ac:	e2822001 	add	r2, r2, #1
    e8b0:	e584200c 	str	r2, [r4, #12]
    e8b4:	e3530000 	cmp	r3, #0
    e8b8:	1a000006 	bne	e8d8 <CTimer::InterruptHandler()+0xc0>
    e8bc:	e1a00004 	mov	r0, r4
    e8c0:	ebffff7b 	bl	e6b4 <CTimer::PollKernelTimers()>
    e8c4:	e5943028 	ldr	r3, [r4, #40]	; 0x28
    e8c8:	e3530000 	cmp	r3, #0
    e8cc:	08bd8010 	popeq	{r4, pc}
    e8d0:	e8bd4010 	pop	{r4, lr}
    e8d4:	e12fff13 	bx	r3
    e8d8:	eb00047f 	bl	fadc <LeaveCritical>
    e8dc:	eafffff6 	b	e8bc <CTimer::InterruptHandler()+0xa4>
    e8e0:	eb000450 	bl	fa28 <EnterCritical>
    e8e4:	e5942004 	ldr	r2, [r4, #4]
    e8e8:	e59f0028 	ldr	r0, [pc, #40]	; e918 <CTimer::InterruptHandler()+0x100>
    e8ec:	e2822001 	add	r2, r2, #1
    e8f0:	e0810092 	umull	r0, r1, r2, r0
    e8f4:	e1a032a1 	lsr	r3, r1, #5
    e8f8:	e0833103 	add	r3, r3, r3, lsl #2
    e8fc:	e0833103 	add	r3, r3, r3, lsl #2
    e900:	e1520103 	cmp	r2, r3, lsl #2
    e904:	e5842004 	str	r2, [r4, #4]
    e908:	e5943010 	ldr	r3, [r4, #16]
    e90c:	1affffe8 	bne	e8b4 <CTimer::InterruptHandler()+0x9c>
    e910:	eaffffe1 	b	e89c <CTimer::InterruptHandler()+0x84>
    e914:	20003000 	.word	0x20003000
    e918:	51eb851f 	.word	0x51eb851f

0000e91c <CTimer::InterruptHandler(void*)>:
    e91c:	e92d4010 	push	{r4, lr}
    e920:	e2504000 	subs	r4, r0, #0
    e924:	0a000002 	beq	e934 <CTimer::InterruptHandler(void*)+0x18>
    e928:	e1a00004 	mov	r0, r4
    e92c:	e8bd4010 	pop	{r4, lr}
    e930:	eaffffb8 	b	e818 <CTimer::InterruptHandler()>
    e934:	e59f0014 	ldr	r0, [pc, #20]	; e950 <CTimer::InterruptHandler(void*)+0x34>
    e938:	e59f2014 	ldr	r2, [pc, #20]	; e954 <CTimer::InterruptHandler(void*)+0x38>
    e93c:	e59f1014 	ldr	r1, [pc, #20]	; e958 <CTimer::InterruptHandler(void*)+0x3c>
    e940:	eb000622 	bl	101d0 <assertion_failed>
    e944:	e1a00004 	mov	r0, r4
    e948:	e8bd4010 	pop	{r4, lr}
    e94c:	eaffffb1 	b	e818 <CTimer::InterruptHandler()>
    e950:	00013958 	.word	0x00013958
    e954:	0000021a 	.word	0x0000021a
    e958:	00013864 	.word	0x00013864

0000e95c <CTimer::TuneMsDelay()>:
    e95c:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    e960:	e1a04000 	mov	r4, r0
    e964:	e5900020 	ldr	r0, [r0, #32]
    e968:	e24dd00c 	sub	sp, sp, #12
    e96c:	e0603280 	rsb	r3, r0, r0, lsl #5
    e970:	e0800103 	add	r0, r0, r3, lsl #2
    e974:	e1a00180 	lsl	r0, r0, #3
    e978:	e5945004 	ldr	r5, [r4, #4]
    e97c:	eb00088b 	bl	10bb0 <DelayLoop>
    e980:	e5941004 	ldr	r1, [r4, #4]
    e984:	e59f0068 	ldr	r0, [pc, #104]	; e9f4 <CTimer::TuneMsDelay()+0x98>
    e988:	e0411005 	sub	r1, r1, r5
    e98c:	eb001182 	bl	12f9c <__udivsi3>
    e990:	e1a05000 	mov	r5, r0
    e994:	e5942020 	ldr	r2, [r4, #32]
    e998:	e59f6058 	ldr	r6, [pc, #88]	; e9f8 <CTimer::TuneMsDelay()+0x9c>
    e99c:	e0020092 	mul	r2, r2, r0
    e9a0:	e0832692 	umull	r2, r3, r2, r6
    e9a4:	e1a012a3 	lsr	r1, r3, #5
    e9a8:	e59f304c 	ldr	r3, [pc, #76]	; e9fc <CTimer::TuneMsDelay()+0xa0>
    e9ac:	e2812f7d 	add	r2, r1, #500	; 0x1f4
    e9b0:	e0832392 	umull	r2, r3, r2, r3
    e9b4:	e0876695 	umull	r6, r7, r5, r6
    e9b8:	e1a03323 	lsr	r3, r3, #6
    e9bc:	e5841020 	str	r1, [r4, #32]
    e9c0:	e5843024 	str	r3, [r4, #36]	; 0x24
    e9c4:	ebffedea 	bl	a174 <CLogger::Get()>
    e9c8:	e1a022a7 	lsr	r2, r7, #5
    e9cc:	e0823102 	add	r3, r2, r2, lsl #2
    e9d0:	e0833103 	add	r3, r3, r3, lsl #2
    e9d4:	e0455103 	sub	r5, r5, r3, lsl #2
    e9d8:	e88d0024 	stm	sp, {r2, r5}
    e9dc:	e59f301c 	ldr	r3, [pc, #28]	; ea00 <CTimer::TuneMsDelay()+0xa4>
    e9e0:	e3a02003 	mov	r2, #3
    e9e4:	e59f1018 	ldr	r1, [pc, #24]	; ea04 <CTimer::TuneMsDelay()+0xa8>
    e9e8:	ebffed26 	bl	9e88 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    e9ec:	e28dd00c 	add	sp, sp, #12
    e9f0:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
    e9f4:	00002710 	.word	0x00002710
    e9f8:	51eb851f 	.word	0x51eb851f
    e9fc:	10624dd3 	.word	0x10624dd3
    ea00:	00013964 	.word	0x00013964
    ea04:	0001385c 	.word	0x0001385c

0000ea08 <CTimer::Initialize()>:
    ea08:	e92d4010 	push	{r4, lr}
    ea0c:	e1a04000 	mov	r4, r0
    ea10:	e5900000 	ldr	r0, [r0]
    ea14:	e3500000 	cmp	r0, #0
    ea18:	0a000010 	beq	ea60 <CTimer::Initialize()+0x58>
    ea1c:	e1a03004 	mov	r3, r4
    ea20:	e59f2050 	ldr	r2, [pc, #80]	; ea78 <CTimer::Initialize()+0x70>
    ea24:	e3a01003 	mov	r1, #3
    ea28:	eb000d9d 	bl	120a4 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)>
    ea2c:	e3a03000 	mov	r3, #0
    ea30:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
    ea34:	e59f2040 	ldr	r2, [pc, #64]	; ea7c <CTimer::Initialize()+0x74>
    ea38:	e59f3040 	ldr	r3, [pc, #64]	; ea80 <CTimer::Initialize()+0x78>
    ea3c:	e1a00004 	mov	r0, r4
    ea40:	e5823004 	str	r3, [r2, #4]
    ea44:	e5923004 	ldr	r3, [r2, #4]
    ea48:	e2833c27 	add	r3, r3, #9984	; 0x2700
    ea4c:	e2833010 	add	r3, r3, #16
    ea50:	e5823018 	str	r3, [r2, #24]
    ea54:	ebffffc0 	bl	e95c <CTimer::TuneMsDelay()>
    ea58:	e3a00001 	mov	r0, #1
    ea5c:	e8bd8010 	pop	{r4, pc}
    ea60:	e59f001c 	ldr	r0, [pc, #28]	; ea84 <CTimer::Initialize()+0x7c>
    ea64:	e3a02061 	mov	r2, #97	; 0x61
    ea68:	e59f1018 	ldr	r1, [pc, #24]	; ea88 <CTimer::Initialize()+0x80>
    ea6c:	eb0005d7 	bl	101d0 <assertion_failed>
    ea70:	e5940000 	ldr	r0, [r4]
    ea74:	eaffffe8 	b	ea1c <CTimer::Initialize()+0x14>
    ea78:	0000e91c 	.word	0x0000e91c
    ea7c:	20003000 	.word	0x20003000
    ea80:	fe363c80 	.word	0xfe363c80
    ea84:	00013880 	.word	0x00013880
    ea88:	00013864 	.word	0x00013864

0000ea8c <CTimer::RegisterPeriodicHandler(void (*)())>:
    ea8c:	e5903028 	ldr	r3, [r0, #40]	; 0x28
    ea90:	e92d4070 	push	{r4, r5, r6, lr}
    ea94:	e3530000 	cmp	r3, #0
    ea98:	e1a04000 	mov	r4, r0
    ea9c:	e1a05001 	mov	r5, r1
    eaa0:	0a000003 	beq	eab4 <CTimer::RegisterPeriodicHandler(void (*)())+0x28>
    eaa4:	e3a02e23 	mov	r2, #560	; 0x230
    eaa8:	e59f1024 	ldr	r1, [pc, #36]	; ead4 <CTimer::RegisterPeriodicHandler(void (*)())+0x48>
    eaac:	e59f0024 	ldr	r0, [pc, #36]	; ead8 <CTimer::RegisterPeriodicHandler(void (*)())+0x4c>
    eab0:	eb0005c6 	bl	101d0 <assertion_failed>
    eab4:	e3550000 	cmp	r5, #0
    eab8:	e5845028 	str	r5, [r4, #40]	; 0x28
    eabc:	18bd8070 	popne	{r4, r5, r6, pc}
    eac0:	e59f2014 	ldr	r2, [pc, #20]	; eadc <CTimer::RegisterPeriodicHandler(void (*)())+0x50>
    eac4:	e59f1008 	ldr	r1, [pc, #8]	; ead4 <CTimer::RegisterPeriodicHandler(void (*)())+0x48>
    eac8:	e59f0010 	ldr	r0, [pc, #16]	; eae0 <CTimer::RegisterPeriodicHandler(void (*)())+0x54>
    eacc:	e8bd4070 	pop	{r4, r5, r6, lr}
    ead0:	ea0005be 	b	101d0 <assertion_failed>
    ead4:	00013864 	.word	0x00013864
    ead8:	0001397c 	.word	0x0001397c
    eadc:	00000232 	.word	0x00000232
    eae0:	00013994 	.word	0x00013994

0000eae4 <CTimer::SimpleMsDelay(unsigned int)>:
    eae4:	e3500000 	cmp	r0, #0
    eae8:	012fff1e 	bxeq	lr
    eaec:	e0603280 	rsb	r3, r0, r0, lsl #5
    eaf0:	e0800103 	add	r0, r0, r3, lsl #2
    eaf4:	e1b00180 	lsls	r0, r0, #3
    eaf8:	012fff1e 	bxeq	lr
    eafc:	eafffcd0 	b	de44 <CTimer::SimpleusDelay(unsigned int) [clone .part.0]>

0000eb00 <CTimer::SimpleusDelay(unsigned int)>:
    eb00:	e3500000 	cmp	r0, #0
    eb04:	012fff1e 	bxeq	lr
    eb08:	eafffccd 	b	de44 <CTimer::SimpleusDelay(unsigned int) [clone .part.0]>

0000eb0c <CTimer::IsLeapYear(unsigned int)>:
    eb0c:	e92d0030 	push	{r4, r5}
    eb10:	e59f4048 	ldr	r4, [pc, #72]	; eb60 <CTimer::IsLeapYear(unsigned int)+0x54>
    eb14:	e0854490 	umull	r4, r5, r0, r4
    eb18:	e1a032a5 	lsr	r3, r5, #5
    eb1c:	e0833103 	add	r3, r3, r3, lsl #2
    eb20:	e0833103 	add	r3, r3, r3, lsl #2
    eb24:	e1500103 	cmp	r0, r3, lsl #2
    eb28:	0a000004 	beq	eb40 <CTimer::IsLeapYear(unsigned int)+0x34>
    eb2c:	e8bd0030 	pop	{r4, r5}
    eb30:	e3100003 	tst	r0, #3
    eb34:	03a00001 	moveq	r0, #1
    eb38:	13a00000 	movne	r0, #0
    eb3c:	e12fff1e 	bx	lr
    eb40:	e1a033a5 	lsr	r3, r5, #7
    eb44:	e0833103 	add	r3, r3, r3, lsl #2
    eb48:	e0833103 	add	r3, r3, r3, lsl #2
    eb4c:	e1500203 	cmp	r0, r3, lsl #4
    eb50:	03a00001 	moveq	r0, #1
    eb54:	e8bd0030 	pop	{r4, r5}
    eb58:	13a00000 	movne	r0, #0
    eb5c:	e12fff1e 	bx	lr
    eb60:	51eb851f 	.word	0x51eb851f

0000eb64 <CTimer::GetDaysOfMonth(unsigned int, unsigned int)>:
    eb64:	e3500001 	cmp	r0, #1
    eb68:	0a000002 	beq	eb78 <CTimer::GetDaysOfMonth(unsigned int, unsigned int)+0x14>
    eb6c:	e59f3064 	ldr	r3, [pc, #100]	; ebd8 <CTimer::GetDaysOfMonth(unsigned int, unsigned int)+0x74>
    eb70:	e7930100 	ldr	r0, [r3, r0, lsl #2]
    eb74:	e12fff1e 	bx	lr
    eb78:	e92d0030 	push	{r4, r5}
    eb7c:	e59f4058 	ldr	r4, [pc, #88]	; ebdc <CTimer::GetDaysOfMonth(unsigned int, unsigned int)+0x78>
    eb80:	e0854491 	umull	r4, r5, r1, r4
    eb84:	e1a032a5 	lsr	r3, r5, #5
    eb88:	e0833103 	add	r3, r3, r3, lsl #2
    eb8c:	e0833103 	add	r3, r3, r3, lsl #2
    eb90:	e1510103 	cmp	r1, r3, lsl #2
    eb94:	0a000008 	beq	ebbc <CTimer::GetDaysOfMonth(unsigned int, unsigned int)+0x58>
    eb98:	e3110003 	tst	r1, #3
    eb9c:	03a03001 	moveq	r3, #1
    eba0:	13a03000 	movne	r3, #0
    eba4:	e8bd0030 	pop	{r4, r5}
    eba8:	e3530000 	cmp	r3, #0
    ebac:	059f3024 	ldreq	r3, [pc, #36]	; ebd8 <CTimer::GetDaysOfMonth(unsigned int, unsigned int)+0x74>
    ebb0:	13a0001d 	movne	r0, #29
    ebb4:	07930100 	ldreq	r0, [r3, r0, lsl #2]
    ebb8:	e12fff1e 	bx	lr
    ebbc:	e1a033a5 	lsr	r3, r5, #7
    ebc0:	e0833103 	add	r3, r3, r3, lsl #2
    ebc4:	e0833103 	add	r3, r3, r3, lsl #2
    ebc8:	e1510203 	cmp	r1, r3, lsl #4
    ebcc:	03a03001 	moveq	r3, #1
    ebd0:	13a03000 	movne	r3, #0
    ebd4:	eafffff2 	b	eba4 <CTimer::GetDaysOfMonth(unsigned int, unsigned int)+0x40>
    ebd8:	0001382c 	.word	0x0001382c
    ebdc:	51eb851f 	.word	0x51eb851f

0000ebe0 <CTimer::Get()>:
    ebe0:	e92d4010 	push	{r4, lr}
    ebe4:	e59f4020 	ldr	r4, [pc, #32]	; ec0c <CTimer::Get()+0x2c>
    ebe8:	e5940000 	ldr	r0, [r4]
    ebec:	e3500000 	cmp	r0, #0
    ebf0:	18bd8010 	popne	{r4, pc}
    ebf4:	e59f2014 	ldr	r2, [pc, #20]	; ec10 <CTimer::Get()+0x30>
    ebf8:	e59f1014 	ldr	r1, [pc, #20]	; ec14 <CTimer::Get()+0x34>
    ebfc:	e59f0014 	ldr	r0, [pc, #20]	; ec18 <CTimer::Get()+0x38>
    ec00:	eb000572 	bl	101d0 <assertion_failed>
    ec04:	e5940000 	ldr	r0, [r4]
    ec08:	e8bd8010 	pop	{r4, pc}
    ec0c:	000155e0 	.word	0x000155e0
    ec10:	0000026e 	.word	0x0000026e
    ec14:	00013864 	.word	0x00013864
    ec18:	000139ac 	.word	0x000139ac

0000ec1c <memset>:
    ec1c:	e352000f 	cmp	r2, #15
    ec20:	e200c003 	and	ip, r0, #3
    ec24:	93a03000 	movls	r3, #0
    ec28:	83a03001 	movhi	r3, #1
    ec2c:	e35c0000 	cmp	ip, #0
    ec30:	13a03000 	movne	r3, #0
    ec34:	e3530000 	cmp	r3, #0
    ec38:	1a000008 	bne	ec60 <memset+0x44>
    ec3c:	e3520000 	cmp	r2, #0
    ec40:	e1a03000 	mov	r3, r0
    ec44:	012fff1e 	bxeq	lr
    ec48:	e6af1071 	sxtb	r1, r1
    ec4c:	e0802002 	add	r2, r0, r2
    ec50:	e4c31001 	strb	r1, [r3], #1
    ec54:	e1530002 	cmp	r3, r2
    ec58:	1afffffc 	bne	ec50 <memset+0x34>
    ec5c:	e12fff1e 	bx	lr
    ec60:	e2423010 	sub	r3, r2, #16
    ec64:	e92d4010 	push	{r4, lr}
    ec68:	e1a03223 	lsr	r3, r3, #4
    ec6c:	e2804020 	add	r4, r0, #32
    ec70:	e181e401 	orr	lr, r1, r1, lsl #8
    ec74:	e0844203 	add	r4, r4, r3, lsl #4
    ec78:	e18ee80e 	orr	lr, lr, lr, lsl #16
    ec7c:	e280c010 	add	ip, r0, #16
    ec80:	e50ce010 	str	lr, [ip, #-16]
    ec84:	e50ce00c 	str	lr, [ip, #-12]
    ec88:	e50ce008 	str	lr, [ip, #-8]
    ec8c:	e50ce004 	str	lr, [ip, #-4]
    ec90:	e28cc010 	add	ip, ip, #16
    ec94:	e15c0004 	cmp	ip, r4
    ec98:	1afffff8 	bne	ec80 <memset+0x64>
    ec9c:	e202200f 	and	r2, r2, #15
    eca0:	e2833001 	add	r3, r3, #1
    eca4:	e3520000 	cmp	r2, #0
    eca8:	e0803203 	add	r3, r0, r3, lsl #4
    ecac:	08bd8010 	popeq	{r4, pc}
    ecb0:	e6af1071 	sxtb	r1, r1
    ecb4:	e0832002 	add	r2, r3, r2
    ecb8:	e4c31001 	strb	r1, [r3], #1
    ecbc:	e1530002 	cmp	r3, r2
    ecc0:	1afffffc 	bne	ecb8 <memset+0x9c>
    ecc4:	e8bd8010 	pop	{r4, pc}

0000ecc8 <memmove>:
    ecc8:	e1500001 	cmp	r0, r1
    eccc:	9a00000a 	bls	ecfc <memmove+0x34>
    ecd0:	e0813002 	add	r3, r1, r2
    ecd4:	e1530000 	cmp	r3, r0
    ecd8:	9a000007 	bls	ecfc <memmove+0x34>
    ecdc:	e3520000 	cmp	r2, #0
    ece0:	e0802002 	add	r2, r0, r2
    ece4:	012fff1e 	bxeq	lr
    ece8:	e173c0d1 	ldrsb	ip, [r3, #-1]!
    ecec:	e1510003 	cmp	r1, r3
    ecf0:	e562c001 	strb	ip, [r2, #-1]!
    ecf4:	1afffffb 	bne	ece8 <memmove+0x20>
    ecf8:	e12fff1e 	bx	lr
    ecfc:	ea00016e 	b	f2bc <memcpy>

0000ed00 <memcmp>:
    ed00:	e3520000 	cmp	r2, #0
    ed04:	e242c001 	sub	ip, r2, #1
    ed08:	0a00000d 	beq	ed44 <memcmp+0x44>
    ed0c:	e5d02000 	ldrb	r2, [r0]
    ed10:	e5d13000 	ldrb	r3, [r1]
    ed14:	e1520003 	cmp	r2, r3
    ed18:	8a00000b 	bhi	ed4c <memcmp+0x4c>
    ed1c:	3a00000c 	bcc	ed54 <memcmp+0x54>
    ed20:	e081c00c 	add	ip, r1, ip
    ed24:	ea000004 	b	ed3c <memcmp+0x3c>
    ed28:	e5f02001 	ldrb	r2, [r0, #1]!
    ed2c:	e5f13001 	ldrb	r3, [r1, #1]!
    ed30:	e1520003 	cmp	r2, r3
    ed34:	8a000004 	bhi	ed4c <memcmp+0x4c>
    ed38:	3a000005 	bcc	ed54 <memcmp+0x54>
    ed3c:	e151000c 	cmp	r1, ip
    ed40:	1afffff8 	bne	ed28 <memcmp+0x28>
    ed44:	e3a00000 	mov	r0, #0
    ed48:	e12fff1e 	bx	lr
    ed4c:	e3a00001 	mov	r0, #1
    ed50:	e12fff1e 	bx	lr
    ed54:	e3e00000 	mvn	r0, #0
    ed58:	e12fff1e 	bx	lr

0000ed5c <strlen>:
    ed5c:	e1d010d0 	ldrsb	r1, [r0]
    ed60:	e2803001 	add	r3, r0, #1
    ed64:	e3510000 	cmp	r1, #0
    ed68:	0a000003 	beq	ed7c <strlen+0x20>
    ed6c:	e0431000 	sub	r1, r3, r0
    ed70:	e0d320d1 	ldrsb	r2, [r3], #1
    ed74:	e3520000 	cmp	r2, #0
    ed78:	1afffffb 	bne	ed6c <strlen+0x10>
    ed7c:	e1a00001 	mov	r0, r1
    ed80:	e12fff1e 	bx	lr

0000ed84 <strcmp>:
    ed84:	e1d030d0 	ldrsb	r3, [r0]
    ed88:	e1d120d0 	ldrsb	r2, [r1]
    ed8c:	e3530000 	cmp	r3, #0
    ed90:	0a00000e 	beq	edd0 <strcmp+0x4c>
    ed94:	e3520000 	cmp	r2, #0
    ed98:	0a00000c 	beq	edd0 <strcmp+0x4c>
    ed9c:	e1520003 	cmp	r2, r3
    eda0:	ba00000f 	blt	ede4 <strcmp+0x60>
    eda4:	da000005 	ble	edc0 <strcmp+0x3c>
    eda8:	ea00000f 	b	edec <strcmp+0x68>
    edac:	e3520000 	cmp	r2, #0
    edb0:	0a000006 	beq	edd0 <strcmp+0x4c>
    edb4:	e1530002 	cmp	r3, r2
    edb8:	ca000009 	bgt	ede4 <strcmp+0x60>
    edbc:	ba00000a 	blt	edec <strcmp+0x68>
    edc0:	e1f030d1 	ldrsb	r3, [r0, #1]!
    edc4:	e1f120d1 	ldrsb	r2, [r1, #1]!
    edc8:	e3530000 	cmp	r3, #0
    edcc:	1afffff6 	bne	edac <strcmp+0x28>
    edd0:	e1530002 	cmp	r3, r2
    edd4:	ca000002 	bgt	ede4 <strcmp+0x60>
    edd8:	b3e00000 	mvnlt	r0, #0
    eddc:	a3a00000 	movge	r0, #0
    ede0:	e12fff1e 	bx	lr
    ede4:	e3a00001 	mov	r0, #1
    ede8:	e12fff1e 	bx	lr
    edec:	e3e00000 	mvn	r0, #0
    edf0:	e12fff1e 	bx	lr

0000edf4 <strcasecmp>:
    edf4:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    edf8:	e2400001 	sub	r0, r0, #1
    edfc:	e2411001 	sub	r1, r1, #1
    ee00:	ea000007 	b	ee24 <strcasecmp+0x30>
    ee04:	e35e0019 	cmp	lr, #25
    ee08:	81a0c002 	movhi	ip, r2
    ee0c:	9242c020 	subls	ip, r2, #32
    ee10:	e35c0000 	cmp	ip, #0
    ee14:	0a00000a 	beq	ee44 <strcasecmp+0x50>
    ee18:	e153000c 	cmp	r3, ip
    ee1c:	ca00000f 	bgt	ee60 <strcasecmp+0x6c>
    ee20:	ba000010 	blt	ee68 <strcasecmp+0x74>
    ee24:	e1f030d1 	ldrsb	r3, [r0, #1]!
    ee28:	e2432061 	sub	r2, r3, #97	; 0x61
    ee2c:	e3520019 	cmp	r2, #25
    ee30:	92433020 	subls	r3, r3, #32
    ee34:	e1f120d1 	ldrsb	r2, [r1, #1]!
    ee38:	e3530000 	cmp	r3, #0
    ee3c:	e242e061 	sub	lr, r2, #97	; 0x61
    ee40:	1affffef 	bne	ee04 <strcasecmp+0x10>
    ee44:	e35e0019 	cmp	lr, #25
    ee48:	92422020 	subls	r2, r2, #32
    ee4c:	e1520003 	cmp	r2, r3
    ee50:	ba000002 	blt	ee60 <strcasecmp+0x6c>
    ee54:	c3e00000 	mvngt	r0, #0
    ee58:	d3a00000 	movle	r0, #0
    ee5c:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
    ee60:	e3a00001 	mov	r0, #1
    ee64:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
    ee68:	e3e00000 	mvn	r0, #0
    ee6c:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

0000ee70 <strncmp>:
    ee70:	e3520000 	cmp	r2, #0
    ee74:	0a000016 	beq	eed4 <strncmp+0x64>
    ee78:	e1d030d0 	ldrsb	r3, [r0]
    ee7c:	e1d1c0d0 	ldrsb	ip, [r1]
    ee80:	e3530000 	cmp	r3, #0
    ee84:	0a000015 	beq	eee0 <strncmp+0x70>
    ee88:	e35c0000 	cmp	ip, #0
    ee8c:	0a000013 	beq	eee0 <strncmp+0x70>
    ee90:	e153000c 	cmp	r3, ip
    ee94:	ca000016 	bgt	eef4 <strncmp+0x84>
    ee98:	ba000017 	blt	eefc <strncmp+0x8c>
    ee9c:	e2422001 	sub	r2, r2, #1
    eea0:	e0812002 	add	r2, r1, r2
    eea4:	ea000008 	b	eecc <strncmp+0x5c>
    eea8:	e1f030d1 	ldrsb	r3, [r0, #1]!
    eeac:	e3530000 	cmp	r3, #0
    eeb0:	0a000009 	beq	eedc <strncmp+0x6c>
    eeb4:	e1f1c0d1 	ldrsb	ip, [r1, #1]!
    eeb8:	e35c0000 	cmp	ip, #0
    eebc:	0a000007 	beq	eee0 <strncmp+0x70>
    eec0:	e153000c 	cmp	r3, ip
    eec4:	ca00000a 	bgt	eef4 <strncmp+0x84>
    eec8:	ba00000b 	blt	eefc <strncmp+0x8c>
    eecc:	e1510002 	cmp	r1, r2
    eed0:	1afffff4 	bne	eea8 <strncmp+0x38>
    eed4:	e3a00000 	mov	r0, #0
    eed8:	e12fff1e 	bx	lr
    eedc:	e1d1c0d1 	ldrsb	ip, [r1, #1]
    eee0:	e153000c 	cmp	r3, ip
    eee4:	ca000002 	bgt	eef4 <strncmp+0x84>
    eee8:	b3e00000 	mvnlt	r0, #0
    eeec:	a3a00000 	movge	r0, #0
    eef0:	e12fff1e 	bx	lr
    eef4:	e3a00001 	mov	r0, #1
    eef8:	e12fff1e 	bx	lr
    eefc:	e3e00000 	mvn	r0, #0
    ef00:	e12fff1e 	bx	lr

0000ef04 <strcpy>:
    ef04:	e1d130d0 	ldrsb	r3, [r1]
    ef08:	e1a02000 	mov	r2, r0
    ef0c:	e3530000 	cmp	r3, #0
    ef10:	0a000003 	beq	ef24 <strcpy+0x20>
    ef14:	e4c23001 	strb	r3, [r2], #1
    ef18:	e1f130d1 	ldrsb	r3, [r1, #1]!
    ef1c:	e3530000 	cmp	r3, #0
    ef20:	1afffffb 	bne	ef14 <strcpy+0x10>
    ef24:	e3a03000 	mov	r3, #0
    ef28:	e5c23000 	strb	r3, [r2]
    ef2c:	e12fff1e 	bx	lr

0000ef30 <strncpy>:
    ef30:	e3520000 	cmp	r2, #0
    ef34:	012fff1e 	bxeq	lr
    ef38:	e1d1c0d0 	ldrsb	ip, [r1]
    ef3c:	e35c0000 	cmp	ip, #0
    ef40:	0a00000a 	beq	ef70 <strncpy+0x40>
    ef44:	e1a03000 	mov	r3, r0
    ef48:	e0802002 	add	r2, r0, r2
    ef4c:	e4c3c001 	strb	ip, [r3], #1
    ef50:	e1530002 	cmp	r3, r2
    ef54:	012fff1e 	bxeq	lr
    ef58:	e1f1c0d1 	ldrsb	ip, [r1, #1]!
    ef5c:	e35c0000 	cmp	ip, #0
    ef60:	1afffff9 	bne	ef4c <strncpy+0x1c>
    ef64:	e3a02000 	mov	r2, #0
    ef68:	e5c32000 	strb	r2, [r3]
    ef6c:	e12fff1e 	bx	lr
    ef70:	e1a03000 	mov	r3, r0
    ef74:	eafffffa 	b	ef64 <strncpy+0x34>

0000ef78 <strcat>:
    ef78:	e1d030d0 	ldrsb	r3, [r0]
    ef7c:	e3530000 	cmp	r3, #0
    ef80:	e1a03000 	mov	r3, r0
    ef84:	0a000002 	beq	ef94 <strcat+0x1c>
    ef88:	e1f320d1 	ldrsb	r2, [r3, #1]!
    ef8c:	e3520000 	cmp	r2, #0
    ef90:	1afffffc 	bne	ef88 <strcat+0x10>
    ef94:	e1d120d0 	ldrsb	r2, [r1]
    ef98:	e3520000 	cmp	r2, #0
    ef9c:	0a000003 	beq	efb0 <strcat+0x38>
    efa0:	e4c32001 	strb	r2, [r3], #1
    efa4:	e1f120d1 	ldrsb	r2, [r1, #1]!
    efa8:	e3520000 	cmp	r2, #0
    efac:	1afffffb 	bne	efa0 <strcat+0x28>
    efb0:	e3a02000 	mov	r2, #0
    efb4:	e5c32000 	strb	r2, [r3]
    efb8:	e12fff1e 	bx	lr

0000efbc <strchr>:
    efbc:	e1d020d0 	ldrsb	r2, [r0]
    efc0:	e3520000 	cmp	r2, #0
    efc4:	0a000009 	beq	eff0 <strchr+0x34>
    efc8:	e1510002 	cmp	r1, r2
    efcc:	1a000002 	bne	efdc <strchr+0x20>
    efd0:	e12fff1e 	bx	lr
    efd4:	e1530001 	cmp	r3, r1
    efd8:	012fff1e 	bxeq	lr
    efdc:	e1f030d1 	ldrsb	r3, [r0, #1]!
    efe0:	e3530000 	cmp	r3, #0
    efe4:	1afffffa 	bne	efd4 <strchr+0x18>
    efe8:	e1a00003 	mov	r0, r3
    efec:	e12fff1e 	bx	lr
    eff0:	e1a00002 	mov	r0, r2
    eff4:	e12fff1e 	bx	lr

0000eff8 <strstr>:
    eff8:	e92d4010 	push	{r4, lr}
    effc:	e1d030d0 	ldrsb	r3, [r0]
    f000:	e1d140d0 	ldrsb	r4, [r1]
    f004:	e3530000 	cmp	r3, #0
    f008:	1a000005 	bne	f024 <strstr+0x2c>
    f00c:	e3540000 	cmp	r4, #0
    f010:	13a00000 	movne	r0, #0
    f014:	e8bd8010 	pop	{r4, pc}
    f018:	e1f030d1 	ldrsb	r3, [r0, #1]!
    f01c:	e3530000 	cmp	r3, #0
    f020:	0a00000d 	beq	f05c <strstr+0x64>
    f024:	e3540000 	cmp	r4, #0
    f028:	08bd8010 	popeq	{r4, pc}
    f02c:	e1d030d0 	ldrsb	r3, [r0]
    f030:	e1530004 	cmp	r3, r4
    f034:	1afffff7 	bne	f018 <strstr+0x20>
    f038:	e1a02001 	mov	r2, r1
    f03c:	e1a0c000 	mov	ip, r0
    f040:	e1f230d1 	ldrsb	r3, [r2, #1]!
    f044:	e3530000 	cmp	r3, #0
    f048:	08bd8010 	popeq	{r4, pc}
    f04c:	e1fce0d1 	ldrsb	lr, [ip, #1]!
    f050:	e15e0003 	cmp	lr, r3
    f054:	0afffff9 	beq	f040 <strstr+0x48>
    f058:	eaffffee 	b	f018 <strstr+0x20>
    f05c:	e1a00003 	mov	r0, r3
    f060:	e8bd8010 	pop	{r4, pc}

0000f064 <strtok_r>:
    f064:	e3500000 	cmp	r0, #0
    f068:	0a000029 	beq	f114 <strtok_r+0xb0>
    f06c:	e1d0c0d0 	ldrsb	ip, [r0]
    f070:	e35c0000 	cmp	ip, #0
    f074:	0a00002d 	beq	f130 <strtok_r+0xcc>
    f078:	e92d4030 	push	{r4, r5, lr}
    f07c:	e1d140d0 	ldrsb	r4, [r1]
    f080:	e3540000 	cmp	r4, #0
    f084:	0a000008 	beq	f0ac <strtok_r+0x48>
    f088:	e15c0004 	cmp	ip, r4
    f08c:	0a000019 	beq	f0f8 <strtok_r+0x94>
    f090:	e1a0e001 	mov	lr, r1
    f094:	ea000001 	b	f0a0 <strtok_r+0x3c>
    f098:	e15c0003 	cmp	ip, r3
    f09c:	0a000015 	beq	f0f8 <strtok_r+0x94>
    f0a0:	e1fe30d1 	ldrsb	r3, [lr, #1]!
    f0a4:	e3530000 	cmp	r3, #0
    f0a8:	1afffffa 	bne	f098 <strtok_r+0x34>
    f0ac:	e35c0000 	cmp	ip, #0
    f0b0:	0a00001b 	beq	f124 <strtok_r+0xc0>
    f0b4:	e1a05000 	mov	r5, r0
    f0b8:	e3540000 	cmp	r4, #0
    f0bc:	0a000008 	beq	f0e4 <strtok_r+0x80>
    f0c0:	e15c0004 	cmp	ip, r4
    f0c4:	0a00000d 	beq	f100 <strtok_r+0x9c>
    f0c8:	e1a0e001 	mov	lr, r1
    f0cc:	ea000001 	b	f0d8 <strtok_r+0x74>
    f0d0:	e153000c 	cmp	r3, ip
    f0d4:	0a000009 	beq	f100 <strtok_r+0x9c>
    f0d8:	e1fe30d1 	ldrsb	r3, [lr, #1]!
    f0dc:	e3530000 	cmp	r3, #0
    f0e0:	1afffffa 	bne	f0d0 <strtok_r+0x6c>
    f0e4:	e1f5c0d1 	ldrsb	ip, [r5, #1]!
    f0e8:	e35c0000 	cmp	ip, #0
    f0ec:	1afffff1 	bne	f0b8 <strtok_r+0x54>
    f0f0:	e5825000 	str	r5, [r2]
    f0f4:	e8bd8030 	pop	{r4, r5, pc}
    f0f8:	e1f0c0d1 	ldrsb	ip, [r0, #1]!
    f0fc:	eaffffdf 	b	f080 <strtok_r+0x1c>
    f100:	e3a03000 	mov	r3, #0
    f104:	e2855001 	add	r5, r5, #1
    f108:	e5453001 	strb	r3, [r5, #-1]
    f10c:	e5825000 	str	r5, [r2]
    f110:	e8bd8030 	pop	{r4, r5, pc}
    f114:	e5920000 	ldr	r0, [r2]
    f118:	e3500000 	cmp	r0, #0
    f11c:	1affffd2 	bne	f06c <strtok_r+0x8>
    f120:	e12fff1e 	bx	lr
    f124:	e3a00000 	mov	r0, #0
    f128:	e5820000 	str	r0, [r2]
    f12c:	e8bd8030 	pop	{r4, r5, pc}
    f130:	e3a00000 	mov	r0, #0
    f134:	e5820000 	str	r0, [r2]
    f138:	e12fff1e 	bx	lr

0000f13c <strtoul>:
    f13c:	e3510000 	cmp	r1, #0
    f140:	e2423002 	sub	r3, r2, #2
    f144:	e92d4070 	push	{r4, r5, r6, lr}
    f148:	15810000 	strne	r0, [r1]
    f14c:	e3520000 	cmp	r2, #0
    f150:	13530022 	cmpne	r3, #34	; 0x22
    f154:	e3c2e010 	bic	lr, r2, #16
    f158:	8a000032 	bhi	f228 <strtoul+0xec>
    f15c:	e1d030d0 	ldrsb	r3, [r0]
    f160:	e1a04000 	mov	r4, r0
    f164:	e243c009 	sub	ip, r3, #9
    f168:	e3530020 	cmp	r3, #32
    f16c:	e2800001 	add	r0, r0, #1
    f170:	e6efc07c 	uxtb	ip, ip
    f174:	0afffff8 	beq	f15c <strtoul+0x20>
    f178:	e35c0004 	cmp	ip, #4
    f17c:	9afffff6 	bls	f15c <strtoul+0x20>
    f180:	e353002b 	cmp	r3, #43	; 0x2b
    f184:	0a000029 	beq	f230 <strtoul+0xf4>
    f188:	e353002d 	cmp	r3, #45	; 0x2d
    f18c:	01d430d1 	ldrsbeq	r3, [r4, #1]
    f190:	03a06001 	moveq	r6, #1
    f194:	01a04000 	moveq	r4, r0
    f198:	13a06000 	movne	r6, #0
    f19c:	e3530030 	cmp	r3, #48	; 0x30
    f1a0:	0a000027 	beq	f244 <strtoul+0x108>
    f1a4:	e3520000 	cmp	r2, #0
    f1a8:	03a0200a 	moveq	r2, #10
    f1ac:	e353002f 	cmp	r3, #47	; 0x2f
    f1b0:	e1a0c003 	mov	ip, r3
    f1b4:	da00003a 	ble	f2a4 <strtoul+0x168>
    f1b8:	e3a05001 	mov	r5, #1
    f1bc:	e3a0e000 	mov	lr, #0
    f1c0:	ea000008 	b	f1e8 <strtoul+0xac>
    f1c4:	e020c29e 	mla	r0, lr, r2, ip
    f1c8:	e150000e 	cmp	r0, lr
    f1cc:	3a000027 	bcc	f270 <strtoul+0x134>
    f1d0:	e1f4c0d1 	ldrsb	ip, [r4, #1]!
    f1d4:	e3a05000 	mov	r5, #0
    f1d8:	e35c002f 	cmp	ip, #47	; 0x2f
    f1dc:	e1a0300c 	mov	r3, ip
    f1e0:	da000027 	ble	f284 <strtoul+0x148>
    f1e4:	e1a0e000 	mov	lr, r0
    f1e8:	e2433061 	sub	r3, r3, #97	; 0x61
    f1ec:	e3530019 	cmp	r3, #25
    f1f0:	924cc020 	subls	ip, ip, #32
    f1f4:	e35c0040 	cmp	ip, #64	; 0x40
    f1f8:	c24cc007 	subgt	ip, ip, #7
    f1fc:	e24cc030 	sub	ip, ip, #48	; 0x30
    f200:	e15c0002 	cmp	ip, r2
    f204:	baffffee 	blt	f1c4 <strtoul+0x88>
    f208:	e1a0000e 	mov	r0, lr
    f20c:	e2253001 	eor	r3, r5, #1
    f210:	e3510000 	cmp	r1, #0
    f214:	e0033006 	and	r3, r3, r6
    f218:	15814000 	strne	r4, [r1]
    f21c:	e3530000 	cmp	r3, #0
    f220:	12600000 	rsbne	r0, r0, #0
    f224:	e8bd8070 	pop	{r4, r5, r6, pc}
    f228:	e3a00000 	mov	r0, #0
    f22c:	e8bd8070 	pop	{r4, r5, r6, pc}
    f230:	e1d430d1 	ldrsb	r3, [r4, #1]
    f234:	e3a06000 	mov	r6, #0
    f238:	e3530030 	cmp	r3, #48	; 0x30
    f23c:	e1a04000 	mov	r4, r0
    f240:	1affffd7 	bne	f1a4 <strtoul+0x68>
    f244:	e1d430d1 	ldrsb	r3, [r4, #1]
    f248:	e284c001 	add	ip, r4, #1
    f24c:	e3c30020 	bic	r0, r3, #32
    f250:	e3500058 	cmp	r0, #88	; 0x58
    f254:	1a00000c 	bne	f28c <strtoul+0x150>
    f258:	e35e0000 	cmp	lr, #0
    f25c:	1afffff1 	bne	f228 <strtoul+0xec>
    f260:	e1d430d2 	ldrsb	r3, [r4, #2]
    f264:	e3a02010 	mov	r2, #16
    f268:	e2844002 	add	r4, r4, #2
    f26c:	eaffffce 	b	f1ac <strtoul+0x70>
    f270:	e3510000 	cmp	r1, #0
    f274:	0a000008 	beq	f29c <strtoul+0x160>
    f278:	e5814000 	str	r4, [r1]
    f27c:	e3e00000 	mvn	r0, #0
    f280:	e8bd8070 	pop	{r4, r5, r6, pc}
    f284:	e3a03001 	mov	r3, #1
    f288:	eaffffe0 	b	f210 <strtoul+0xd4>
    f28c:	e3520000 	cmp	r2, #0
    f290:	e1a0400c 	mov	r4, ip
    f294:	03a02008 	moveq	r2, #8
    f298:	eaffffc3 	b	f1ac <strtoul+0x70>
    f29c:	e3e00000 	mvn	r0, #0
    f2a0:	e8bd8070 	pop	{r4, r5, r6, pc}
    f2a4:	e3510000 	cmp	r1, #0
    f2a8:	0affffde 	beq	f228 <strtoul+0xec>
    f2ac:	e3a00000 	mov	r0, #0
    f2b0:	e5814000 	str	r4, [r1]
    f2b4:	e8bd8070 	pop	{r4, r5, r6, pc}

0000f2b8 <char2int>:
    f2b8:	e12fff1e 	bx	lr

0000f2bc <memcpy>:
    f2bc:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    f2c0:	e352007f 	cmp	r2, #127	; 0x7f
    f2c4:	9a00000b 	bls	f2f8 <memcpy+0x3c>
    f2c8:	e3110003 	tst	r1, #3
    f2cc:	1a000009 	bne	f2f8 <memcpy+0x3c>
    f2d0:	e3100003 	tst	r0, #3
    f2d4:	1a000007 	bne	f2f8 <memcpy+0x3c>
    f2d8:	e92d07f0 	push	{r4, r5, r6, r7, r8, r9, sl}
    f2dc:	e8b107f8 	ldm	r1!, {r3, r4, r5, r6, r7, r8, r9, sl}
    f2e0:	e2422020 	sub	r2, r2, #32
    f2e4:	e8a007f8 	stmia	r0!, {r3, r4, r5, r6, r7, r8, r9, sl}
    f2e8:	f5d1f040 	pld	[r1, #64]	; 0x40
    f2ec:	e352001f 	cmp	r2, #31
    f2f0:	8afffff9 	bhi	f2dc <memcpy+0x20>
    f2f4:	e8bd07f0 	pop	{r4, r5, r6, r7, r8, r9, sl}
    f2f8:	e3520000 	cmp	r2, #0
    f2fc:	0a000003 	beq	f310 <memcpy+0x54>
    f300:	e4d13001 	ldrb	r3, [r1], #1
    f304:	e2522001 	subs	r2, r2, #1
    f308:	e4c03001 	strb	r3, [r0], #1
    f30c:	1afffffb 	bne	f300 <memcpy+0x44>
    f310:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
    f314:	e12fff1e 	bx	lr

0000f318 <CVirtualGPIOPin::~CVirtualGPIOPin()>:
    f318:	e12fff1e 	bx	lr

0000f31c <CVirtualGPIOPin::~CVirtualGPIOPin()>:
    f31c:	e92d4010 	push	{r4, lr}
    f320:	e1a04000 	mov	r4, r0
    f324:	e3a01014 	mov	r1, #20
    f328:	eb00021c 	bl	fba0 <operator delete(void*, unsigned int)>
    f32c:	e1a00004 	mov	r0, r4
    f330:	e8bd8010 	pop	{r4, pc}

0000f334 <CVirtualGPIOPin::Write(unsigned int)>:
    f334:	e92d4070 	push	{r4, r5, r6, lr}
    f338:	e5d03004 	ldrb	r3, [r0, #4]
    f33c:	e24dd028 	sub	sp, sp, #40	; 0x28
    f340:	e3530000 	cmp	r3, #0
    f344:	e1a05001 	mov	r5, r1
    f348:	e5903008 	ldr	r3, [r0, #8]
    f34c:	0a000012 	beq	f39c <CVirtualGPIOPin::Write(unsigned int)+0x68>
    f350:	e3530000 	cmp	r3, #0
    f354:	1a000034 	bne	f42c <CVirtualGPIOPin::Write(unsigned int)+0xf8>
    f358:	e3a01000 	mov	r1, #0
    f35c:	e28d000c 	add	r0, sp, #12
    f360:	eb0004e1 	bl	106ec <CBcmPropertyTags::CBcmPropertyTags(bool)>
    f364:	e3a03008 	mov	r3, #8
    f368:	e58d3000 	str	r3, [sp]
    f36c:	e3a03014 	mov	r3, #20
    f370:	e3a0c082 	mov	ip, #130	; 0x82
    f374:	e28d000c 	add	r0, sp, #12
    f378:	e08d2003 	add	r2, sp, r3
    f37c:	e59f10dc 	ldr	r1, [pc, #220]	; f460 <CVirtualGPIOPin::Write(unsigned int)+0x12c>
    f380:	e58d5024 	str	r5, [sp, #36]	; 0x24
    f384:	e58dc020 	str	ip, [sp, #32]
    f388:	eb00052f 	bl	1084c <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
    f38c:	e28d000c 	add	r0, sp, #12
    f390:	eb0004dc 	bl	10708 <CBcmPropertyTags::~CBcmPropertyTags()>
    f394:	e28dd028 	add	sp, sp, #40	; 0x28
    f398:	e8bd8070 	pop	{r4, r5, r6, pc}
    f39c:	e3530001 	cmp	r3, #1
    f3a0:	8afffffb 	bhi	f394 <CVirtualGPIOPin::Write(unsigned int)+0x60>
    f3a4:	e59f60b8 	ldr	r6, [pc, #184]	; f464 <CVirtualGPIOPin::Write(unsigned int)+0x130>
    f3a8:	e3510001 	cmp	r1, #1
    f3ac:	e5962000 	ldr	r2, [r6]
    f3b0:	93a03000 	movls	r3, #0
    f3b4:	83a03001 	movhi	r3, #1
    f3b8:	e3520000 	cmp	r2, #0
    f3bc:	03a03001 	moveq	r3, #1
    f3c0:	e3530000 	cmp	r3, #0
    f3c4:	1afffff2 	bne	f394 <CVirtualGPIOPin::Write(unsigned int)+0x60>
    f3c8:	e1a04000 	mov	r4, r0
    f3cc:	e5960004 	ldr	r0, [r6, #4]
    f3d0:	e3500000 	cmp	r0, #0
    f3d4:	1a00001f 	bne	f458 <CVirtualGPIOPin::Write(unsigned int)+0x124>
    f3d8:	e1d411b0 	ldrh	r1, [r4, #16]
    f3dc:	e1d431b2 	ldrh	r3, [r4, #18]
    f3e0:	e584500c 	str	r5, [r4, #12]
    f3e4:	e0412003 	sub	r2, r1, r3
    f3e8:	e6bf2072 	sxth	r2, r2
    f3ec:	e3520000 	cmp	r2, #0
    f3f0:	da000012 	ble	f440 <CVirtualGPIOPin::Write(unsigned int)+0x10c>
    f3f4:	e3550000 	cmp	r5, #0
    f3f8:	1a000006 	bne	f418 <CVirtualGPIOPin::Write(unsigned int)+0xe4>
    f3fc:	e2833001 	add	r3, r3, #1
    f400:	e6ff3073 	uxth	r3, r3
    f404:	e1c431b2 	strh	r3, [r4, #18]
    f408:	e5940008 	ldr	r0, [r4, #8]
    f40c:	e5962000 	ldr	r2, [r6]
    f410:	e1833801 	orr	r3, r3, r1, lsl #16
    f414:	e7823100 	str	r3, [r2, r0, lsl #2]
    f418:	e5963004 	ldr	r3, [r6, #4]
    f41c:	e3530000 	cmp	r3, #0
    f420:	0affffdb 	beq	f394 <CVirtualGPIOPin::Write(unsigned int)+0x60>
    f424:	eb0001ac 	bl	fadc <LeaveCritical>
    f428:	eaffffd9 	b	f394 <CVirtualGPIOPin::Write(unsigned int)+0x60>
    f42c:	e3a0205b 	mov	r2, #91	; 0x5b
    f430:	e59f1030 	ldr	r1, [pc, #48]	; f468 <CVirtualGPIOPin::Write(unsigned int)+0x134>
    f434:	e59f0030 	ldr	r0, [pc, #48]	; f46c <CVirtualGPIOPin::Write(unsigned int)+0x138>
    f438:	eb000364 	bl	101d0 <assertion_failed>
    f43c:	eaffffc5 	b	f358 <CVirtualGPIOPin::Write(unsigned int)+0x24>
    f440:	e3550000 	cmp	r5, #0
    f444:	0afffff3 	beq	f418 <CVirtualGPIOPin::Write(unsigned int)+0xe4>
    f448:	e2811001 	add	r1, r1, #1
    f44c:	e6ff1071 	uxth	r1, r1
    f450:	e1c411b0 	strh	r1, [r4, #16]
    f454:	eaffffeb 	b	f408 <CVirtualGPIOPin::Write(unsigned int)+0xd4>
    f458:	eb000172 	bl	fa28 <EnterCritical>
    f45c:	eaffffdd 	b	f3d8 <CVirtualGPIOPin::Write(unsigned int)+0xa4>
    f460:	00038041 	.word	0x00038041
    f464:	000155e4 	.word	0x000155e4
    f468:	000139fc 	.word	0x000139fc
    f46c:	00013a10 	.word	0x00013a10

0000f470 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)>:
    f470:	e3a03000 	mov	r3, #0
    f474:	e3510001 	cmp	r1, #1
    f478:	91a0c002 	movls	ip, r2
    f47c:	8382c001 	orrhi	ip, r2, #1
    f480:	e92d4070 	push	{r4, r5, r6, lr}
    f484:	e1a04000 	mov	r4, r0
    f488:	e59f0114 	ldr	r0, [pc, #276]	; f5a4 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)+0x134>
    f48c:	e15c0003 	cmp	ip, r3
    f490:	e24dd020 	sub	sp, sp, #32
    f494:	e5c42004 	strb	r2, [r4, #4]
    f498:	e5841008 	str	r1, [r4, #8]
    f49c:	e5840000 	str	r0, [r4]
    f4a0:	e5843010 	str	r3, [r4, #16]
    f4a4:	0a000002 	beq	f4b4 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)+0x44>
    f4a8:	e1a00004 	mov	r0, r4
    f4ac:	e28dd020 	add	sp, sp, #32
    f4b0:	e8bd8070 	pop	{r4, r5, r6, pc}
    f4b4:	e59f50ec 	ldr	r5, [pc, #236]	; f5a8 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)+0x138>
    f4b8:	e5950004 	ldr	r0, [r5, #4]
    f4bc:	e1500003 	cmp	r0, r3
    f4c0:	1a000027 	bne	f564 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)+0xf4>
    f4c4:	e5956000 	ldr	r6, [r5]
    f4c8:	e3560000 	cmp	r6, #0
    f4cc:	0a00000b 	beq	f500 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)+0x90>
    f4d0:	e3a02000 	mov	r2, #0
    f4d4:	e5943008 	ldr	r3, [r4, #8]
    f4d8:	e7862103 	str	r2, [r6, r3, lsl #2]
    f4dc:	e5953004 	ldr	r3, [r5, #4]
    f4e0:	e3530000 	cmp	r3, #0
    f4e4:	1a000020 	bne	f56c <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)+0xfc>
    f4e8:	e1a00004 	mov	r0, r4
    f4ec:	e3a01000 	mov	r1, #0
    f4f0:	ebffff8f 	bl	f334 <CVirtualGPIOPin::Write(unsigned int)>
    f4f4:	e1a00004 	mov	r0, r4
    f4f8:	e28dd020 	add	sp, sp, #32
    f4fc:	e8bd8070 	pop	{r4, r5, r6, pc}
    f500:	e3a00001 	mov	r0, #1
    f504:	eb000114 	bl	f95c <CMemorySystem::GetCoherentPage(unsigned int)>
    f508:	e1a01006 	mov	r1, r6
    f50c:	e5850000 	str	r0, [r5]
    f510:	e28d0008 	add	r0, sp, #8
    f514:	eb000474 	bl	106ec <CBcmPropertyTags::CBcmPropertyTags(bool)>
    f518:	e3a03004 	mov	r3, #4
    f51c:	e595c000 	ldr	ip, [r5]
    f520:	e58d3000 	str	r3, [sp]
    f524:	e3ccc103 	bic	ip, ip, #-1073741824	; 0xc0000000
    f528:	e38cc101 	orr	ip, ip, #1073741824	; 0x40000000
    f52c:	e28d0008 	add	r0, sp, #8
    f530:	e28d2010 	add	r2, sp, #16
    f534:	e3a03010 	mov	r3, #16
    f538:	e59f106c 	ldr	r1, [pc, #108]	; f5ac <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)+0x13c>
    f53c:	e58dc01c 	str	ip, [sp, #28]
    f540:	eb0004c1 	bl	1084c <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
    f544:	e3500000 	cmp	r0, #0
    f548:	0a000009 	beq	f574 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)+0x104>
    f54c:	e28d0008 	add	r0, sp, #8
    f550:	eb00046c 	bl	10708 <CBcmPropertyTags::~CBcmPropertyTags()>
    f554:	e5956000 	ldr	r6, [r5]
    f558:	e3560000 	cmp	r6, #0
    f55c:	0affffde 	beq	f4dc <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)+0x6c>
    f560:	eaffffda 	b	f4d0 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)+0x60>
    f564:	eb00012f 	bl	fa28 <EnterCritical>
    f568:	eaffffd5 	b	f4c4 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)+0x54>
    f56c:	eb00015a 	bl	fadc <LeaveCritical>
    f570:	eaffffdc 	b	f4e8 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)+0x78>
    f574:	e3a03010 	mov	r3, #16
    f578:	e58d0000 	str	r0, [sp]
    f57c:	e28d2010 	add	r2, sp, #16
    f580:	e59f1028 	ldr	r1, [pc, #40]	; f5b0 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)+0x140>
    f584:	e28d0008 	add	r0, sp, #8
    f588:	eb0004af 	bl	1084c <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
    f58c:	e3500000 	cmp	r0, #0
    f590:	159d301c 	ldrne	r3, [sp, #28]
    f594:	05850000 	streq	r0, [r5]
    f598:	13c33103 	bicne	r3, r3, #-1073741824	; 0xc0000000
    f59c:	15853000 	strne	r3, [r5]
    f5a0:	eaffffe9 	b	f54c <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)+0xdc>
    f5a4:	000139f4 	.word	0x000139f4
    f5a8:	000155e4 	.word	0x000155e4
    f5ac:	00048020 	.word	0x00048020
    f5b0:	00040010 	.word	0x00040010

0000f5b4 <CVirtualGPIOPin::Invert()>:
    f5b4:	e590100c 	ldr	r1, [r0, #12]
    f5b8:	e2211001 	eor	r1, r1, #1
    f5bc:	eaffff5c 	b	f334 <CVirtualGPIOPin::Write(unsigned int)>

0000f5c0 <_GLOBAL__sub_I__ZN15CVirtualGPIOPin18s_nGPIOBaseAddressE>:
    f5c0:	e3a02000 	mov	r2, #0
    f5c4:	e59f3004 	ldr	r3, [pc, #4]	; f5d0 <_GLOBAL__sub_I__ZN15CVirtualGPIOPin18s_nGPIOBaseAddressE+0x10>
    f5c8:	e5832004 	str	r2, [r3, #4]
    f5cc:	e12fff1e 	bx	lr
    f5d0:	000155e4 	.word	0x000155e4

0000f5d4 <ChainBootStub(void const*, unsigned int)>:
    f5d4:	e2811003 	add	r1, r1, #3
    f5d8:	e1b01121 	lsrs	r1, r1, #2
    f5dc:	0a000008 	beq	f604 <ChainBootStub(void const*, unsigned int)+0x30>
    f5e0:	e3a03902 	mov	r3, #32768	; 0x8000
    f5e4:	e2811a02 	add	r1, r1, #8192	; 0x2000
    f5e8:	e1a02101 	lsl	r2, r1, #2
    f5ec:	e2400004 	sub	r0, r0, #4
    f5f0:	e5b01004 	ldr	r1, [r0, #4]!
    f5f4:	e2833004 	add	r3, r3, #4
    f5f8:	e5031004 	str	r1, [r3, #-4]
    f5fc:	e1530002 	cmp	r3, r2
    f600:	1afffffa 	bne	f5f0 <ChainBootStub(void const*, unsigned int)+0x1c>
    f604:	e3a03000 	mov	r3, #0
    f608:	ee073f15 	mcr	15, 0, r3, cr7, cr5, {0}
    f60c:	ee073fd5 	mcr	15, 0, r3, cr7, cr5, {6}
    f610:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
    f614:	ee073f95 	mcr	15, 0, r3, cr7, cr5, {4}
    f618:	e3a03902 	mov	r3, #32768	; 0x8000
    f61c:	e12fff13 	bx	r3

0000f620 <EnableChainBoot>:
    f620:	e59f302c 	ldr	r3, [pc, #44]	; f654 <EnableChainBoot+0x34>
    f624:	e92d4010 	push	{r4, lr}
    f628:	e3a02b01 	mov	r2, #1024	; 0x400
    f62c:	e1c300f0 	strd	r0, [r3]
    f630:	e59f1020 	ldr	r1, [pc, #32]	; f658 <EnableChainBoot+0x38>
    f634:	e3a00b1f 	mov	r0, #31744	; 0x7c00
    f638:	ebffff1f 	bl	f2bc <memcpy>
    f63c:	e3a03000 	mov	r3, #0
    f640:	ee073f15 	mcr	15, 0, r3, cr7, cr5, {0}
    f644:	ee073fd5 	mcr	15, 0, r3, cr7, cr5, {6}
    f648:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
    f64c:	ee073f95 	mcr	15, 0, r3, cr7, cr5, {4}
    f650:	e8bd8010 	pop	{r4, pc}
    f654:	000155ec 	.word	0x000155ec
    f658:	0000f5d4 	.word	0x0000f5d4

0000f65c <IsChainBootEnabled>:
    f65c:	e59f300c 	ldr	r3, [pc, #12]	; f670 <IsChainBootEnabled+0x14>
    f660:	e5930000 	ldr	r0, [r3]
    f664:	e2900000 	adds	r0, r0, #0
    f668:	13a00001 	movne	r0, #1
    f66c:	e12fff1e 	bx	lr
    f670:	000155ec 	.word	0x000155ec

0000f674 <DoChainBoot>:
    f674:	e59f3008 	ldr	r3, [pc, #8]	; f684 <DoChainBoot+0x10>
    f678:	e3a02b1f 	mov	r2, #31744	; 0x7c00
    f67c:	e1c300d0 	ldrd	r0, [r3]
    f680:	e12fff12 	bx	r2
    f684:	000155ec 	.word	0x000155ec

0000f688 <CMemorySystem::Destructor() [clone .part.0]>:
    f688:	ee113f10 	mrc	15, 0, r3, cr1, cr0, {0}
    f68c:	e3c33005 	bic	r3, r3, #5
    f690:	ee013f10 	mcr	15, 0, r3, cr1, cr0, {0}
    f694:	e3a03000 	mov	r3, #0
    f698:	ee073f1a 	mcr	15, 0, r3, cr7, cr10, {0}
    f69c:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
    f6a0:	ee073f16 	mcr	15, 0, r3, cr7, cr6, {0}
    f6a4:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
    f6a8:	ee083f17 	mcr	15, 0, r3, cr8, cr7, {0}
    f6ac:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
    f6b0:	e12fff1e 	bx	lr

0000f6b4 <CMemorySystem::~CMemorySystem()>:
    f6b4:	e59f3028 	ldr	r3, [pc, #40]	; f6e4 <CMemorySystem::~CMemorySystem()+0x30>
    f6b8:	e5932000 	ldr	r2, [r3]
    f6bc:	e1500002 	cmp	r0, r2
    f6c0:	112fff1e 	bxne	lr
    f6c4:	e3a01000 	mov	r1, #0
    f6c8:	e5d02000 	ldrb	r2, [r0]
    f6cc:	e5831000 	str	r1, [r3]
    f6d0:	e1520001 	cmp	r2, r1
    f6d4:	012fff1e 	bxeq	lr
    f6d8:	e92d4010 	push	{r4, lr}
    f6dc:	ebffffe9 	bl	f688 <CMemorySystem::Destructor() [clone .part.0]>
    f6e0:	e8bd8010 	pop	{r4, pc}
    f6e4:	000155f4 	.word	0x000155f4

0000f6e8 <CMemorySystem::Destructor()>:
    f6e8:	e59f3020 	ldr	r3, [pc, #32]	; f710 <CMemorySystem::Destructor()+0x28>
    f6ec:	e5932000 	ldr	r2, [r3]
    f6f0:	e1520000 	cmp	r2, r0
    f6f4:	112fff1e 	bxne	lr
    f6f8:	e3a01000 	mov	r1, #0
    f6fc:	e5d22000 	ldrb	r2, [r2]
    f700:	e5831000 	str	r1, [r3]
    f704:	e1520001 	cmp	r2, r1
    f708:	012fff1e 	bxeq	lr
    f70c:	eaffffdd 	b	f688 <CMemorySystem::Destructor() [clone .part.0]>
    f710:	000155f4 	.word	0x000155f4

0000f714 <CMemorySystem::GetMemSize() const>:
    f714:	e92d4010 	push	{r4, lr}
    f718:	e59f402c 	ldr	r4, [pc, #44]	; f74c <CMemorySystem::GetMemSize() const+0x38>
    f71c:	e5943000 	ldr	r3, [r4]
    f720:	e3530000 	cmp	r3, #0
    f724:	0a000001 	beq	f730 <CMemorySystem::GetMemSize() const+0x1c>
    f728:	e5930004 	ldr	r0, [r3, #4]
    f72c:	e8bd8010 	pop	{r4, pc}
    f730:	e3a02088 	mov	r2, #136	; 0x88
    f734:	e59f1014 	ldr	r1, [pc, #20]	; f750 <CMemorySystem::GetMemSize() const+0x3c>
    f738:	e59f0014 	ldr	r0, [pc, #20]	; f754 <CMemorySystem::GetMemSize() const+0x40>
    f73c:	eb0002a3 	bl	101d0 <assertion_failed>
    f740:	e5943000 	ldr	r3, [r4]
    f744:	e5930004 	ldr	r0, [r3, #4]
    f748:	e8bd8010 	pop	{r4, pc}
    f74c:	000155f4 	.word	0x000155f4
    f750:	00013a1c 	.word	0x00013a1c
    f754:	000139ac 	.word	0x000139ac

0000f758 <CMemorySystem::Get()>:
    f758:	e92d4010 	push	{r4, lr}
    f75c:	e59f4020 	ldr	r4, [pc, #32]	; f784 <CMemorySystem::Get()+0x2c>
    f760:	e5940000 	ldr	r0, [r4]
    f764:	e3500000 	cmp	r0, #0
    f768:	18bd8010 	popne	{r4, pc}
    f76c:	e3a0208e 	mov	r2, #142	; 0x8e
    f770:	e59f1010 	ldr	r1, [pc, #16]	; f788 <CMemorySystem::Get()+0x30>
    f774:	e59f0010 	ldr	r0, [pc, #16]	; f78c <CMemorySystem::Get()+0x34>
    f778:	eb000294 	bl	101d0 <assertion_failed>
    f77c:	e5940000 	ldr	r0, [r4]
    f780:	e8bd8010 	pop	{r4, pc}
    f784:	000155f4 	.word	0x000155f4
    f788:	00013a1c 	.word	0x00013a1c
    f78c:	000139ac 	.word	0x000139ac

0000f790 <CMemorySystem::EnableMMU()>:
    f790:	e5d03000 	ldrb	r3, [r0]
    f794:	e92d4010 	push	{r4, lr}
    f798:	e3530000 	cmp	r3, #0
    f79c:	e1a04000 	mov	r4, r0
    f7a0:	0a00001c 	beq	f818 <CMemorySystem::EnableMMU()+0x88>
    f7a4:	ee113f30 	mrc	15, 0, r3, cr1, cr0, {1}
    f7a8:	e3833040 	orr	r3, r3, #64	; 0x40
    f7ac:	ee013f30 	mcr	15, 0, r3, cr1, cr0, {1}
    f7b0:	ee103f70 	mrc	15, 0, r3, cr0, cr0, {3}
    f7b4:	e3130001 	tst	r3, #1
    f7b8:	1a00001b 	bne	f82c <CMemorySystem::EnableMMU()+0x9c>
    f7bc:	e3a03000 	mov	r3, #0
    f7c0:	ee023f50 	mcr	15, 0, r3, cr2, cr0, {2}
    f7c4:	e5940008 	ldr	r0, [r4, #8]
    f7c8:	e1500003 	cmp	r0, r3
    f7cc:	0a00001b 	beq	f840 <CMemorySystem::EnableMMU()+0xb0>
    f7d0:	eb00008b 	bl	fa04 <CPageTable::GetBaseAddress() const>
    f7d4:	ee020f10 	mcr	15, 0, r0, cr2, cr0, {0}
    f7d8:	e3a03001 	mov	r3, #1
    f7dc:	ee033f10 	mcr	15, 0, r3, cr3, cr0, {0}
    f7e0:	e3a03000 	mov	r3, #0
    f7e4:	ee073f16 	mcr	15, 0, r3, cr7, cr6, {0}
    f7e8:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
    f7ec:	ee073f15 	mcr	15, 0, r3, cr7, cr5, {0}
    f7f0:	ee073fd5 	mcr	15, 0, r3, cr7, cr5, {6}
    f7f4:	ee083f17 	mcr	15, 0, r3, cr8, cr7, {0}
    f7f8:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
    f7fc:	ee073f95 	mcr	15, 0, r3, cr7, cr5, {4}
    f800:	ee113f10 	mrc	15, 0, r3, cr1, cr0, {0}
    f804:	e59f204c 	ldr	r2, [pc, #76]	; f858 <CMemorySystem::EnableMMU()+0xc8>
    f808:	e3c33002 	bic	r3, r3, #2
    f80c:	e1832002 	orr	r2, r3, r2
    f810:	ee012f10 	mcr	15, 0, r2, cr1, cr0, {0}
    f814:	e8bd8010 	pop	{r4, pc}
    f818:	e3a02094 	mov	r2, #148	; 0x94
    f81c:	e59f1038 	ldr	r1, [pc, #56]	; f85c <CMemorySystem::EnableMMU()+0xcc>
    f820:	e59f0038 	ldr	r0, [pc, #56]	; f860 <CMemorySystem::EnableMMU()+0xd0>
    f824:	eb000269 	bl	101d0 <assertion_failed>
    f828:	eaffffdd 	b	f7a4 <CMemorySystem::EnableMMU()+0x14>
    f82c:	e3a020a1 	mov	r2, #161	; 0xa1
    f830:	e59f1024 	ldr	r1, [pc, #36]	; f85c <CMemorySystem::EnableMMU()+0xcc>
    f834:	e59f0028 	ldr	r0, [pc, #40]	; f864 <CMemorySystem::EnableMMU()+0xd4>
    f838:	eb000264 	bl	101d0 <assertion_failed>
    f83c:	eaffffde 	b	f7bc <CMemorySystem::EnableMMU()+0x2c>
    f840:	e59f0020 	ldr	r0, [pc, #32]	; f868 <CMemorySystem::EnableMMU()+0xd8>
    f844:	e3a020a7 	mov	r2, #167	; 0xa7
    f848:	e59f100c 	ldr	r1, [pc, #12]	; f85c <CMemorySystem::EnableMMU()+0xcc>
    f84c:	eb00025f 	bl	101d0 <assertion_failed>
    f850:	e5940008 	ldr	r0, [r4, #8]
    f854:	eaffffdd 	b	f7d0 <CMemorySystem::EnableMMU()+0x40>
    f858:	00c01805 	.word	0x00c01805
    f85c:	00013a1c 	.word	0x00013a1c
    f860:	00013a28 	.word	0x00013a28
    f864:	00013a38 	.word	0x00013a38
    f868:	00013a64 	.word	0x00013a64

0000f86c <CMemorySystem::CMemorySystem(bool)>:
    f86c:	e3a03000 	mov	r3, #0
    f870:	e92d4030 	push	{r4, r5, lr}
    f874:	e59f20d0 	ldr	r2, [pc, #208]	; f94c <CMemorySystem::CMemorySystem(bool)+0xe0>
    f878:	e24dd02c 	sub	sp, sp, #44	; 0x2c
    f87c:	e5925000 	ldr	r5, [r2]
    f880:	e1a04000 	mov	r4, r0
    f884:	e1550003 	cmp	r5, r3
    f888:	e5c01000 	strb	r1, [r0]
    f88c:	e5803004 	str	r3, [r0, #4]
    f890:	e5803008 	str	r3, [r0, #8]
    f894:	0a000002 	beq	f8a4 <CMemorySystem::CMemorySystem(bool)+0x38>
    f898:	e1a00004 	mov	r0, r4
    f89c:	e28dd02c 	add	sp, sp, #44	; 0x2c
    f8a0:	e8bd8030 	pop	{r4, r5, pc}
    f8a4:	e3a01001 	mov	r1, #1
    f8a8:	e28d000c 	add	r0, sp, #12
    f8ac:	e5824000 	str	r4, [r2]
    f8b0:	eb00038d 	bl	106ec <CBcmPropertyTags::CBcmPropertyTags(bool)>
    f8b4:	e3a03014 	mov	r3, #20
    f8b8:	e58d5000 	str	r5, [sp]
    f8bc:	e28d000c 	add	r0, sp, #12
    f8c0:	e08d2003 	add	r2, sp, r3
    f8c4:	e59f1084 	ldr	r1, [pc, #132]	; f950 <CMemorySystem::CMemorySystem(bool)+0xe4>
    f8c8:	eb0003df 	bl	1084c <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
    f8cc:	e3500000 	cmp	r0, #0
    f8d0:	1a000013 	bne	f924 <CMemorySystem::CMemorySystem(bool)+0xb8>
    f8d4:	e3a01303 	mov	r1, #201326592	; 0xc000000
    f8d8:	e1cd02f0 	strd	r0, [sp, #32]
    f8dc:	e5841004 	str	r1, [r4, #4]
    f8e0:	eb0000b0 	bl	fba8 <mem_init>
    f8e4:	e5d43000 	ldrb	r3, [r4]
    f8e8:	e3530000 	cmp	r3, #0
    f8ec:	0a000007 	beq	f910 <CMemorySystem::CMemorySystem(bool)+0xa4>
    f8f0:	e3a00004 	mov	r0, #4
    f8f4:	eb0000a5 	bl	fb90 <operator new(unsigned int)>
    f8f8:	e1a05000 	mov	r5, r0
    f8fc:	e5941004 	ldr	r1, [r4, #4]
    f900:	eb000018 	bl	f968 <CPageTable::CPageTable(unsigned int)>
    f904:	e5845008 	str	r5, [r4, #8]
    f908:	e1a00004 	mov	r0, r4
    f90c:	ebffff9f 	bl	f790 <CMemorySystem::EnableMMU()>
    f910:	e28d000c 	add	r0, sp, #12
    f914:	eb00037b 	bl	10708 <CBcmPropertyTags::~CBcmPropertyTags()>
    f918:	e1a00004 	mov	r0, r4
    f91c:	e28dd02c 	add	sp, sp, #44	; 0x2c
    f920:	e8bd8030 	pop	{r4, r5, pc}
    f924:	e59d0020 	ldr	r0, [sp, #32]
    f928:	e3500000 	cmp	r0, #0
    f92c:	059d1024 	ldreq	r1, [sp, #36]	; 0x24
    f930:	0affffe9 	beq	f8dc <CMemorySystem::CMemorySystem(bool)+0x70>
    f934:	e59f1018 	ldr	r1, [pc, #24]	; f954 <CMemorySystem::CMemorySystem(bool)+0xe8>
    f938:	e59f0018 	ldr	r0, [pc, #24]	; f958 <CMemorySystem::CMemorySystem(bool)+0xec>
    f93c:	e3a02047 	mov	r2, #71	; 0x47
    f940:	eb000222 	bl	101d0 <assertion_failed>
    f944:	e1cd02d0 	ldrd	r0, [sp, #32]
    f948:	eaffffe3 	b	f8dc <CMemorySystem::CMemorySystem(bool)+0x70>
    f94c:	000155f4 	.word	0x000155f4
    f950:	00010005 	.word	0x00010005
    f954:	00013a1c 	.word	0x00013a1c
    f958:	00013a78 	.word	0x00013a78

0000f95c <CMemorySystem::GetCoherentPage(unsigned int)>:
    f95c:	e1a00600 	lsl	r0, r0, #12
    f960:	e2800501 	add	r0, r0, #4194304	; 0x400000
    f964:	e12fff1e 	bx	lr

0000f968 <CPageTable::CPageTable(unsigned int)>:
    f968:	e3a0c709 	mov	ip, #2359296	; 0x240000
    f96c:	e3a03000 	mov	r3, #0
    f970:	e1a0200c 	mov	r2, ip
    f974:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    f978:	e59fe068 	ldr	lr, [pc, #104]	; f9e8 <CPageTable::CPageTable(unsigned int)+0x80>
    f97c:	e59f7068 	ldr	r7, [pc, #104]	; f9ec <CPageTable::CPageTable(unsigned int)+0x84>
    f980:	e59f6068 	ldr	r6, [pc, #104]	; f9f0 <CPageTable::CPageTable(unsigned int)+0x88>
    f984:	e59f8068 	ldr	r8, [pc, #104]	; f9f4 <CPageTable::CPageTable(unsigned int)+0x8c>
    f988:	e59f5068 	ldr	r5, [pc, #104]	; f9f8 <CPageTable::CPageTable(unsigned int)+0x90>
    f98c:	e59f4068 	ldr	r4, [pc, #104]	; f9fc <CPageTable::CPageTable(unsigned int)+0x94>
    f990:	e580c000 	str	ip, [r0]
    f994:	e15e0003 	cmp	lr, r3
    f998:	8183c004 	orrhi	ip, r3, r4
    f99c:	8a000007 	bhi	f9c0 <CPageTable::CPageTable(unsigned int)+0x58>
    f9a0:	e3530501 	cmp	r3, #4194304	; 0x400000
    f9a4:	0a00000d 	beq	f9e0 <CPageTable::CPageTable(unsigned int)+0x78>
    f9a8:	e1510003 	cmp	r1, r3
    f9ac:	8183c005 	orrhi	ip, r3, r5
    f9b0:	8a000002 	bhi	f9c0 <CPageTable::CPageTable(unsigned int)+0x58>
    f9b4:	e1530006 	cmp	r3, r6
    f9b8:	9183c008 	orrls	ip, r3, r8
    f9bc:	81a0c003 	movhi	ip, r3
    f9c0:	e482c004 	str	ip, [r2], #4
    f9c4:	e3520991 	cmp	r2, #2375680	; 0x244000
    f9c8:	e2833601 	add	r3, r3, #1048576	; 0x100000
    f9cc:	1afffff0 	bne	f994 <CPageTable::CPageTable(unsigned int)+0x2c>
    f9d0:	e3a03000 	mov	r3, #0
    f9d4:	ee073f1a 	mcr	15, 0, r3, cr7, cr10, {0}
    f9d8:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
    f9dc:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    f9e0:	e1a0c007 	mov	ip, r7
    f9e4:	eafffff5 	b	f9c0 <CPageTable::CPageTable(unsigned int)+0x58>
    f9e8:	000130b4 	.word	0x000130b4
    f9ec:	00410412 	.word	0x00410412
    f9f0:	20fffffe 	.word	0x20fffffe
    f9f4:	00010416 	.word	0x00010416
    f9f8:	0000041e 	.word	0x0000041e
    f9fc:	0000040e 	.word	0x0000040e

0000fa00 <CPageTable::~CPageTable()>:
    fa00:	e12fff1e 	bx	lr

0000fa04 <CPageTable::GetBaseAddress() const>:
    fa04:	e5900000 	ldr	r0, [r0]
    fa08:	e3800001 	orr	r0, r0, #1
    fa0c:	e12fff1e 	bx	lr

0000fa10 <CurrentExecutionLevel>:
    fa10:	e10f0000 	mrs	r0, CPSR
    fa14:	e3100040 	tst	r0, #64	; 0x40
    fa18:	01a003a0 	lsreq	r0, r0, #7
    fa1c:	02000001 	andeq	r0, r0, #1
    fa20:	13a00002 	movne	r0, #2
    fa24:	e12fff1e 	bx	lr

0000fa28 <EnterCritical>:
    fa28:	e2403001 	sub	r3, r0, #1
    fa2c:	e3530001 	cmp	r3, #1
    fa30:	e92d4070 	push	{r4, r5, r6, lr}
    fa34:	e1a05000 	mov	r5, r0
    fa38:	9a000003 	bls	fa4c <EnterCritical+0x24>
    fa3c:	e3a02064 	mov	r2, #100	; 0x64
    fa40:	e59f1080 	ldr	r1, [pc, #128]	; fac8 <EnterCritical+0xa0>
    fa44:	e59f0080 	ldr	r0, [pc, #128]	; facc <EnterCritical+0xa4>
    fa48:	eb0001e0 	bl	101d0 <assertion_failed>
    fa4c:	e10f6000 	mrs	r6, CPSR
    fa50:	e3550002 	cmp	r5, #2
    fa54:	0a000001 	beq	fa60 <EnterCritical+0x38>
    fa58:	e3160040 	tst	r6, #64	; 0x40
    fa5c:	1a00000f 	bne	faa0 <EnterCritical+0x78>
    fa60:	f10c00c0 	cpsid	if
    fa64:	e59f4064 	ldr	r4, [pc, #100]	; fad0 <EnterCritical+0xa8>
    fa68:	e5943000 	ldr	r3, [r4]
    fa6c:	e3530013 	cmp	r3, #19
    fa70:	8a00000f 	bhi	fab4 <EnterCritical+0x8c>
    fa74:	e5943000 	ldr	r3, [r4]
    fa78:	e3550001 	cmp	r5, #1
    fa7c:	e2832001 	add	r2, r3, #1
    fa80:	e0843103 	add	r3, r4, r3, lsl #2
    fa84:	e5842000 	str	r2, [r4]
    fa88:	e5836004 	str	r6, [r3, #4]
    fa8c:	1a000000 	bne	fa94 <EnterCritical+0x6c>
    fa90:	f1080040 	cpsie	f
    fa94:	e3a03000 	mov	r3, #0
    fa98:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
    fa9c:	e8bd8070 	pop	{r4, r5, r6, pc}
    faa0:	e3a0206a 	mov	r2, #106	; 0x6a
    faa4:	e59f101c 	ldr	r1, [pc, #28]	; fac8 <EnterCritical+0xa0>
    faa8:	e59f0024 	ldr	r0, [pc, #36]	; fad4 <EnterCritical+0xac>
    faac:	eb0001c7 	bl	101d0 <assertion_failed>
    fab0:	eaffffea 	b	fa60 <EnterCritical+0x38>
    fab4:	e3a0206e 	mov	r2, #110	; 0x6e
    fab8:	e59f1008 	ldr	r1, [pc, #8]	; fac8 <EnterCritical+0xa0>
    fabc:	e59f0014 	ldr	r0, [pc, #20]	; fad8 <EnterCritical+0xb0>
    fac0:	eb0001c2 	bl	101d0 <assertion_failed>
    fac4:	eaffffea 	b	fa74 <EnterCritical+0x4c>
    fac8:	00013a94 	.word	0x00013a94
    facc:	00013aa4 	.word	0x00013aa4
    fad0:	000155f8 	.word	0x000155f8
    fad4:	00013adc 	.word	0x00013adc
    fad8:	00013b0c 	.word	0x00013b0c

0000fadc <LeaveCritical>:
    fadc:	e92d4010 	push	{r4, lr}
    fae0:	e3a03000 	mov	r3, #0
    fae4:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
    fae8:	f10c0040 	cpsid	f
    faec:	e59f4034 	ldr	r4, [pc, #52]	; fb28 <LeaveCritical+0x4c>
    faf0:	e5943000 	ldr	r3, [r4]
    faf4:	e3530000 	cmp	r3, #0
    faf8:	1a000003 	bne	fb0c <LeaveCritical+0x30>
    fafc:	e3a0207f 	mov	r2, #127	; 0x7f
    fb00:	e59f1024 	ldr	r1, [pc, #36]	; fb2c <LeaveCritical+0x50>
    fb04:	e59f0024 	ldr	r0, [pc, #36]	; fb30 <LeaveCritical+0x54>
    fb08:	eb0001b0 	bl	101d0 <assertion_failed>
    fb0c:	e5943000 	ldr	r3, [r4]
    fb10:	e2433001 	sub	r3, r3, #1
    fb14:	e5843000 	str	r3, [r4]
    fb18:	e0844103 	add	r4, r4, r3, lsl #2
    fb1c:	e5943004 	ldr	r3, [r4, #4]
    fb20:	e121f003 	msr	CPSR_c, r3
    fb24:	e8bd8010 	pop	{r4, pc}
    fb28:	000155f8 	.word	0x000155f8
    fb2c:	00013a94 	.word	0x00013a94
    fb30:	00013b34 	.word	0x00013b34

0000fb34 <CleanAndInvalidateDataCacheRange>:
    fb34:	ee070f3e 	mcr	15, 0, r0, cr7, cr14, {1}
    fb38:	e2813020 	add	r3, r1, #32
    fb3c:	e353001f 	cmp	r3, #31
    fb40:	9a000007 	bls	fb64 <CleanAndInvalidateDataCacheRange+0x30>
    fb44:	e2800020 	add	r0, r0, #32
    fb48:	e3c1101f 	bic	r1, r1, #31
    fb4c:	e0801001 	add	r1, r0, r1
    fb50:	ea000000 	b	fb58 <CleanAndInvalidateDataCacheRange+0x24>
    fb54:	e2800020 	add	r0, r0, #32
    fb58:	ee070f3e 	mcr	15, 0, r0, cr7, cr14, {1}
    fb5c:	e1510000 	cmp	r1, r0
    fb60:	1afffffb 	bne	fb54 <CleanAndInvalidateDataCacheRange+0x20>
    fb64:	e3a03000 	mov	r3, #0
    fb68:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
    fb6c:	e12fff1e 	bx	lr

0000fb70 <SyncDataAndInstructionCache>:
    fb70:	e3a03000 	mov	r3, #0
    fb74:	ee073f1a 	mcr	15, 0, r3, cr7, cr10, {0}
    fb78:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
    fb7c:	ee073f15 	mcr	15, 0, r3, cr7, cr5, {0}
    fb80:	ee073fd5 	mcr	15, 0, r3, cr7, cr5, {6}
    fb84:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
    fb88:	ee073f95 	mcr	15, 0, r3, cr7, cr5, {4}
    fb8c:	e12fff1e 	bx	lr

0000fb90 <operator new(unsigned int)>:
    fb90:	ea00001d 	b	fc0c <malloc>

0000fb94 <operator new[](unsigned int)>:
    fb94:	ea00001c 	b	fc0c <malloc>

0000fb98 <operator delete(void*)>:
    fb98:	ea00009b 	b	fe0c <free>

0000fb9c <operator delete[](void*)>:
    fb9c:	ea00009a 	b	fe0c <free>

0000fba0 <operator delete(void*, unsigned int)>:
    fba0:	ea000099 	b	fe0c <free>

0000fba4 <operator delete[](void*, unsigned int)>:
    fba4:	ea000098 	b	fe0c <free>

0000fba8 <mem_init>:
    fba8:	e3500605 	cmp	r0, #5242880	; 0x500000
    fbac:	21a0c000 	movcs	ip, r0
    fbb0:	33a0c605 	movcc	ip, #5242880	; 0x500000
    fbb4:	e0801001 	add	r1, r0, r1
    fbb8:	e24139ff 	sub	r3, r1, #4177920	; 0x3fc000
    fbbc:	e2433a03 	sub	r3, r3, #12288	; 0x3000
    fbc0:	e59f2018 	ldr	r2, [pc, #24]	; fbe0 <mem_init+0x38>
    fbc4:	e3c33eff 	bic	r3, r3, #4080	; 0xff0
    fbc8:	e2410501 	sub	r0, r1, #4194304	; 0x400000
    fbcc:	e3c3300f 	bic	r3, r3, #15
    fbd0:	e582c000 	str	ip, [r2]
    fbd4:	e582100c 	str	r1, [r2, #12]
    fbd8:	e9820009 	stmib	r2, {r0, r3}
    fbdc:	e12fff1e 	bx	lr
    fbe0:	0001564c 	.word	0x0001564c

0000fbe4 <mem_get_size>:
    fbe4:	e59f301c 	ldr	r3, [pc, #28]	; fc08 <mem_get_size+0x24>
    fbe8:	e5930004 	ldr	r0, [r3, #4]
    fbec:	e5931000 	ldr	r1, [r3]
    fbf0:	e593200c 	ldr	r2, [r3, #12]
    fbf4:	e5933008 	ldr	r3, [r3, #8]
    fbf8:	e0400001 	sub	r0, r0, r1
    fbfc:	e0423003 	sub	r3, r2, r3
    fc00:	e0800003 	add	r0, r0, r3
    fc04:	e12fff1e 	bx	lr
    fc08:	0001564c 	.word	0x0001564c

0000fc0c <malloc>:
    fc0c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    fc10:	e59f71d0 	ldr	r7, [pc, #464]	; fde8 <malloc+0x1dc>
    fc14:	e1a06000 	mov	r6, r0
    fc18:	e5973000 	ldr	r3, [r7]
    fc1c:	e3530000 	cmp	r3, #0
    fc20:	0a00005d 	beq	fd9c <malloc+0x190>
    fc24:	e5970010 	ldr	r0, [r7, #16]
    fc28:	e3500000 	cmp	r0, #0
    fc2c:	1a000053 	bne	fd80 <malloc+0x174>
    fc30:	e59f21b4 	ldr	r2, [pc, #436]	; fdec <malloc+0x1e0>
    fc34:	e5923000 	ldr	r3, [r2]
    fc38:	e3530000 	cmp	r3, #0
    fc3c:	0a000008 	beq	fc64 <malloc+0x58>
    fc40:	e1560003 	cmp	r6, r3
    fc44:	e1a05002 	mov	r5, r2
    fc48:	8a000002 	bhi	fc58 <malloc+0x4c>
    fc4c:	ea000030 	b	fd14 <malloc+0x108>
    fc50:	e1530006 	cmp	r3, r6
    fc54:	2a00002e 	bcs	fd14 <malloc+0x108>
    fc58:	e5b53008 	ldr	r3, [r5, #8]!
    fc5c:	e3530000 	cmp	r3, #0
    fc60:	1afffffa 	bne	fc50 <malloc+0x44>
    fc64:	e5974000 	ldr	r4, [r7]
    fc68:	e286301f 	add	r3, r6, #31
    fc6c:	e3c3300f 	bic	r3, r3, #15
    fc70:	e0843003 	add	r3, r4, r3
    fc74:	e1540003 	cmp	r4, r3
    fc78:	2a00004c 	bcs	fdb0 <malloc+0x1a4>
    fc7c:	e5971004 	ldr	r1, [r7, #4]
    fc80:	e5920040 	ldr	r0, [r2, #64]	; 0x40
    fc84:	e0411000 	sub	r1, r1, r0
    fc88:	e1530001 	cmp	r3, r1
    fc8c:	8a000047 	bhi	fdb0 <malloc+0x1a4>
    fc90:	e3a0204d 	mov	r2, #77	; 0x4d
    fc94:	e3a0c043 	mov	ip, #67	; 0x43
    fc98:	e3a0004c 	mov	r0, #76	; 0x4c
    fc9c:	e3a01042 	mov	r1, #66	; 0x42
    fca0:	e5873000 	str	r3, [r7]
    fca4:	e1a03826 	lsr	r3, r6, #16
    fca8:	e5c43006 	strb	r3, [r4, #6]
    fcac:	e5973010 	ldr	r3, [r7, #16]
    fcb0:	e5c46004 	strb	r6, [r4, #4]
    fcb4:	e5c42001 	strb	r2, [r4, #1]
    fcb8:	e3530000 	cmp	r3, #0
    fcbc:	e1a02426 	lsr	r2, r6, #8
    fcc0:	e1a06c26 	lsr	r6, r6, #24
    fcc4:	e5c4c000 	strb	ip, [r4]
    fcc8:	e5c40002 	strb	r0, [r4, #2]
    fccc:	e5c41003 	strb	r1, [r4, #3]
    fcd0:	e5c42005 	strb	r2, [r4, #5]
    fcd4:	e5c46007 	strb	r6, [r4, #7]
    fcd8:	1a000026 	bne	fd78 <malloc+0x16c>
    fcdc:	e3a03000 	mov	r3, #0
    fce0:	e2845010 	add	r5, r4, #16
    fce4:	e315000f 	tst	r5, #15
    fce8:	e5c43008 	strb	r3, [r4, #8]
    fcec:	e5c43009 	strb	r3, [r4, #9]
    fcf0:	e5c4300a 	strb	r3, [r4, #10]
    fcf4:	e5c4300b 	strb	r3, [r4, #11]
    fcf8:	0a000003 	beq	fd0c <malloc+0x100>
    fcfc:	e3a020b3 	mov	r2, #179	; 0xb3
    fd00:	e59f10e8 	ldr	r1, [pc, #232]	; fdf0 <malloc+0x1e4>
    fd04:	e59f00e8 	ldr	r0, [pc, #232]	; fdf4 <malloc+0x1e8>
    fd08:	eb000130 	bl	101d0 <assertion_failed>
    fd0c:	e1a00005 	mov	r0, r5
    fd10:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    fd14:	e5954004 	ldr	r4, [r5, #4]
    fd18:	e3540000 	cmp	r4, #0
    fd1c:	01a06003 	moveq	r6, r3
    fd20:	0affffcf 	beq	fc64 <malloc+0x58>
    fd24:	e5d41001 	ldrb	r1, [r4, #1]
    fd28:	e5d43000 	ldrb	r3, [r4]
    fd2c:	e5d42002 	ldrb	r2, [r4, #2]
    fd30:	e1833401 	orr	r3, r3, r1, lsl #8
    fd34:	e5d41003 	ldrb	r1, [r4, #3]
    fd38:	e1833802 	orr	r3, r3, r2, lsl #16
    fd3c:	e59f20b4 	ldr	r2, [pc, #180]	; fdf8 <malloc+0x1ec>
    fd40:	e1833c01 	orr	r3, r3, r1, lsl #24
    fd44:	e1530002 	cmp	r3, r2
    fd48:	1a00000e 	bne	fd88 <malloc+0x17c>
    fd4c:	e5d42009 	ldrb	r2, [r4, #9]
    fd50:	e5d43008 	ldrb	r3, [r4, #8]
    fd54:	e5d4100a 	ldrb	r1, [r4, #10]
    fd58:	e1833402 	orr	r3, r3, r2, lsl #8
    fd5c:	e5d4200b 	ldrb	r2, [r4, #11]
    fd60:	e1833801 	orr	r3, r3, r1, lsl #16
    fd64:	e1833c02 	orr	r3, r3, r2, lsl #24
    fd68:	e5853004 	str	r3, [r5, #4]
    fd6c:	e5973010 	ldr	r3, [r7, #16]
    fd70:	e3530000 	cmp	r3, #0
    fd74:	0affffd8 	beq	fcdc <malloc+0xd0>
    fd78:	ebffff57 	bl	fadc <LeaveCritical>
    fd7c:	eaffffd6 	b	fcdc <malloc+0xd0>
    fd80:	ebffff28 	bl	fa28 <EnterCritical>
    fd84:	eaffffa9 	b	fc30 <malloc+0x24>
    fd88:	e3a0208a 	mov	r2, #138	; 0x8a
    fd8c:	e59f105c 	ldr	r1, [pc, #92]	; fdf0 <malloc+0x1e4>
    fd90:	e59f0064 	ldr	r0, [pc, #100]	; fdfc <malloc+0x1f0>
    fd94:	eb00010d 	bl	101d0 <assertion_failed>
    fd98:	eaffffeb 	b	fd4c <malloc+0x140>
    fd9c:	e3a02070 	mov	r2, #112	; 0x70
    fda0:	e59f1048 	ldr	r1, [pc, #72]	; fdf0 <malloc+0x1e4>
    fda4:	e59f0054 	ldr	r0, [pc, #84]	; fe00 <malloc+0x1f4>
    fda8:	eb000108 	bl	101d0 <assertion_failed>
    fdac:	eaffff9c 	b	fc24 <malloc+0x18>
    fdb0:	e3a01000 	mov	r1, #0
    fdb4:	e5973010 	ldr	r3, [r7, #16]
    fdb8:	e5821040 	str	r1, [r2, #64]	; 0x40
    fdbc:	e1530001 	cmp	r3, r1
    fdc0:	0a000000 	beq	fdc8 <malloc+0x1bc>
    fdc4:	ebffff44 	bl	fadc <LeaveCritical>
    fdc8:	e3a05000 	mov	r5, #0
    fdcc:	ebffe8e8 	bl	a174 <CLogger::Get()>
    fdd0:	e59f302c 	ldr	r3, [pc, #44]	; fe04 <malloc+0x1f8>
    fdd4:	e3a02000 	mov	r2, #0
    fdd8:	e59f1028 	ldr	r1, [pc, #40]	; fe08 <malloc+0x1fc>
    fddc:	ebffe829 	bl	9e88 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    fde0:	e1a00005 	mov	r0, r5
    fde4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    fde8:	0001564c 	.word	0x0001564c
    fdec:	000154f0 	.word	0x000154f0
    fdf0:	00013b4c 	.word	0x00013b4c
    fdf4:	00013ba8 	.word	0x00013ba8
    fdf8:	424c4d43 	.word	0x424c4d43
    fdfc:	00013b6c 	.word	0x00013b6c
    fe00:	00013b58 	.word	0x00013b58
    fe04:	00013b90 	.word	0x00013b90
    fe08:	00013ba0 	.word	0x00013ba0

0000fe0c <free>:
    fe0c:	e3500000 	cmp	r0, #0
    fe10:	012fff1e 	bxeq	lr
    fe14:	e92d4070 	push	{r4, r5, r6, lr}
    fe18:	e2405010 	sub	r5, r0, #16
    fe1c:	e5d51001 	ldrb	r1, [r5, #1]
    fe20:	e5503010 	ldrb	r3, [r0, #-16]
    fe24:	e5d52002 	ldrb	r2, [r5, #2]
    fe28:	e1833401 	orr	r3, r3, r1, lsl #8
    fe2c:	e5d51003 	ldrb	r1, [r5, #3]
    fe30:	e1833802 	orr	r3, r3, r2, lsl #16
    fe34:	e59f20d8 	ldr	r2, [pc, #216]	; ff14 <free+0x108>
    fe38:	e1833c01 	orr	r3, r3, r1, lsl #24
    fe3c:	e1530002 	cmp	r3, r2
    fe40:	1a00001f 	bne	fec4 <free+0xb8>
    fe44:	e59f40cc 	ldr	r4, [pc, #204]	; ff18 <free+0x10c>
    fe48:	e5943000 	ldr	r3, [r4]
    fe4c:	e3530000 	cmp	r3, #0
    fe50:	08bd8070 	popeq	{r4, r5, r6, pc}
    fe54:	e5d51005 	ldrb	r1, [r5, #5]
    fe58:	e5d52004 	ldrb	r2, [r5, #4]
    fe5c:	e5d50006 	ldrb	r0, [r5, #6]
    fe60:	e1822401 	orr	r2, r2, r1, lsl #8
    fe64:	e5d51007 	ldrb	r1, [r5, #7]
    fe68:	e1822800 	orr	r2, r2, r0, lsl #16
    fe6c:	e1822c01 	orr	r2, r2, r1, lsl #24
    fe70:	e1530002 	cmp	r3, r2
    fe74:	0a000004 	beq	fe8c <free+0x80>
    fe78:	e5b43008 	ldr	r3, [r4, #8]!
    fe7c:	e3530000 	cmp	r3, #0
    fe80:	08bd8070 	popeq	{r4, r5, r6, pc}
    fe84:	e1530002 	cmp	r3, r2
    fe88:	1afffffa 	bne	fe78 <free+0x6c>
    fe8c:	e59f6088 	ldr	r6, [pc, #136]	; ff1c <free+0x110>
    fe90:	e5960010 	ldr	r0, [r6, #16]
    fe94:	e3500000 	cmp	r0, #0
    fe98:	1a00000e 	bne	fed8 <free+0xcc>
    fe9c:	e5943004 	ldr	r3, [r4, #4]
    fea0:	e1a00423 	lsr	r0, r3, #8
    fea4:	e1a01823 	lsr	r1, r3, #16
    fea8:	e1a02c23 	lsr	r2, r3, #24
    feac:	e5c53008 	strb	r3, [r5, #8]
    feb0:	e5c50009 	strb	r0, [r5, #9]
    feb4:	e5c5100a 	strb	r1, [r5, #10]
    feb8:	e5c5200b 	strb	r2, [r5, #11]
    febc:	e5845004 	str	r5, [r4, #4]
    fec0:	e8bd8070 	pop	{r4, r5, r6, pc}
    fec4:	e3a020c0 	mov	r2, #192	; 0xc0
    fec8:	e59f1050 	ldr	r1, [pc, #80]	; ff20 <free+0x114>
    fecc:	e59f0050 	ldr	r0, [pc, #80]	; ff24 <free+0x118>
    fed0:	eb0000be 	bl	101d0 <assertion_failed>
    fed4:	eaffffda 	b	fe44 <free+0x38>
    fed8:	ebfffed2 	bl	fa28 <EnterCritical>
    fedc:	e5943004 	ldr	r3, [r4, #4]
    fee0:	e5962010 	ldr	r2, [r6, #16]
    fee4:	e1a00423 	lsr	r0, r3, #8
    fee8:	e3520000 	cmp	r2, #0
    feec:	e1a01823 	lsr	r1, r3, #16
    fef0:	e1a02c23 	lsr	r2, r3, #24
    fef4:	e5c53008 	strb	r3, [r5, #8]
    fef8:	e5c50009 	strb	r0, [r5, #9]
    fefc:	e5c5100a 	strb	r1, [r5, #10]
    ff00:	e5c5200b 	strb	r2, [r5, #11]
    ff04:	e5845004 	str	r5, [r4, #4]
    ff08:	08bd8070 	popeq	{r4, r5, r6, pc}
    ff0c:	e8bd4070 	pop	{r4, r5, r6, lr}
    ff10:	eafffef1 	b	fadc <LeaveCritical>
    ff14:	424c4d43 	.word	0x424c4d43
    ff18:	000154f0 	.word	0x000154f0
    ff1c:	0001564c 	.word	0x0001564c
    ff20:	00013b4c 	.word	0x00013b4c
    ff24:	00013b6c 	.word	0x00013b6c

0000ff28 <calloc>:
    ff28:	e92d4070 	push	{r4, r5, r6, lr}
    ff2c:	e0040190 	mul	r4, r0, r1
    ff30:	e3540000 	cmp	r4, #0
    ff34:	03a04001 	moveq	r4, #1
    ff38:	e1540000 	cmp	r4, r0
    ff3c:	3a000008 	bcc	ff64 <calloc+0x3c>
    ff40:	e1a00004 	mov	r0, r4
    ff44:	ebffff30 	bl	fc0c <malloc>
    ff48:	e2505000 	subs	r5, r0, #0
    ff4c:	0a000002 	beq	ff5c <calloc+0x34>
    ff50:	e1a02004 	mov	r2, r4
    ff54:	e3a01000 	mov	r1, #0
    ff58:	ebfffb2f 	bl	ec1c <memset>
    ff5c:	e1a00005 	mov	r0, r5
    ff60:	e8bd8070 	pop	{r4, r5, r6, pc}
    ff64:	e3a020e2 	mov	r2, #226	; 0xe2
    ff68:	e59f1008 	ldr	r1, [pc, #8]	; ff78 <calloc+0x50>
    ff6c:	e59f0008 	ldr	r0, [pc, #8]	; ff7c <calloc+0x54>
    ff70:	eb000096 	bl	101d0 <assertion_failed>
    ff74:	eafffff1 	b	ff40 <calloc+0x18>
    ff78:	00013b4c 	.word	0x00013b4c
    ff7c:	00013bd4 	.word	0x00013bd4

0000ff80 <realloc>:
    ff80:	e92d4070 	push	{r4, r5, r6, lr}
    ff84:	e2505000 	subs	r5, r0, #0
    ff88:	e1a06001 	mov	r6, r1
    ff8c:	0a00002e 	beq	1004c <realloc+0xcc>
    ff90:	e3510000 	cmp	r1, #0
    ff94:	0a000028 	beq	1003c <realloc+0xbc>
    ff98:	e2454010 	sub	r4, r5, #16
    ff9c:	e5d41001 	ldrb	r1, [r4, #1]
    ffa0:	e5553010 	ldrb	r3, [r5, #-16]
    ffa4:	e5d42002 	ldrb	r2, [r4, #2]
    ffa8:	e1833401 	orr	r3, r3, r1, lsl #8
    ffac:	e5d41003 	ldrb	r1, [r4, #3]
    ffb0:	e1833802 	orr	r3, r3, r2, lsl #16
    ffb4:	e59f20a4 	ldr	r2, [pc, #164]	; 10060 <realloc+0xe0>
    ffb8:	e1833c01 	orr	r3, r3, r1, lsl #24
    ffbc:	e1530002 	cmp	r3, r2
    ffc0:	1a00000a 	bne	fff0 <realloc+0x70>
    ffc4:	e5d42005 	ldrb	r2, [r4, #5]
    ffc8:	e5d43004 	ldrb	r3, [r4, #4]
    ffcc:	e5d41006 	ldrb	r1, [r4, #6]
    ffd0:	e1833402 	orr	r3, r3, r2, lsl #8
    ffd4:	e5d42007 	ldrb	r2, [r4, #7]
    ffd8:	e1833801 	orr	r3, r3, r1, lsl #16
    ffdc:	e1833c02 	orr	r3, r3, r2, lsl #24
    ffe0:	e1530006 	cmp	r3, r6
    ffe4:	3a000006 	bcc	10004 <realloc+0x84>
    ffe8:	e1a00005 	mov	r0, r5
    ffec:	e8bd8070 	pop	{r4, r5, r6, pc}
    fff0:	e3a020fc 	mov	r2, #252	; 0xfc
    fff4:	e59f1068 	ldr	r1, [pc, #104]	; 10064 <realloc+0xe4>
    fff8:	e59f0068 	ldr	r0, [pc, #104]	; 10068 <realloc+0xe8>
    fffc:	eb000073 	bl	101d0 <assertion_failed>
   10000:	eaffffef 	b	ffc4 <realloc+0x44>
   10004:	e1a00006 	mov	r0, r6
   10008:	ebfffeff 	bl	fc0c <malloc>
   1000c:	e2506000 	subs	r6, r0, #0
   10010:	0a000010 	beq	10058 <realloc+0xd8>
   10014:	e5d42005 	ldrb	r2, [r4, #5]
   10018:	e5d43004 	ldrb	r3, [r4, #4]
   1001c:	e5d41006 	ldrb	r1, [r4, #6]
   10020:	e1833402 	orr	r3, r3, r2, lsl #8
   10024:	e5d42007 	ldrb	r2, [r4, #7]
   10028:	e1833801 	orr	r3, r3, r1, lsl #16
   1002c:	e1832c02 	orr	r2, r3, r2, lsl #24
   10030:	e1a01005 	mov	r1, r5
   10034:	ebfffca0 	bl	f2bc <memcpy>
   10038:	e1a00005 	mov	r0, r5
   1003c:	e1a05006 	mov	r5, r6
   10040:	ebffff71 	bl	fe0c <free>
   10044:	e1a00005 	mov	r0, r5
   10048:	e8bd8070 	pop	{r4, r5, r6, pc}
   1004c:	e1a00001 	mov	r0, r1
   10050:	e8bd4070 	pop	{r4, r5, r6, lr}
   10054:	eafffeec 	b	fc0c <malloc>
   10058:	e1a05006 	mov	r5, r6
   1005c:	eaffffe1 	b	ffe8 <realloc+0x68>
   10060:	424c4d43 	.word	0x424c4d43
   10064:	00013b4c 	.word	0x00013b4c
   10068:	00013b6c 	.word	0x00013b6c

0001006c <palloc>:
   1006c:	e92d4070 	push	{r4, r5, r6, lr}
   10070:	e59f40c4 	ldr	r4, [pc, #196]	; 1013c <palloc+0xd0>
   10074:	e5943008 	ldr	r3, [r4, #8]
   10078:	e3530000 	cmp	r3, #0
   1007c:	0a000029 	beq	10128 <palloc+0xbc>
   10080:	e5940014 	ldr	r0, [r4, #20]
   10084:	e3500000 	cmp	r0, #0
   10088:	1a000015 	bne	100e4 <palloc+0x78>
   1008c:	e5945018 	ldr	r5, [r4, #24]
   10090:	e3550000 	cmp	r5, #0
   10094:	0a000016 	beq	100f4 <palloc+0x88>
   10098:	e59f30a0 	ldr	r3, [pc, #160]	; 10140 <palloc+0xd4>
   1009c:	e5952000 	ldr	r2, [r5]
   100a0:	e1520003 	cmp	r2, r3
   100a4:	1a000009 	bne	100d0 <palloc+0x64>
   100a8:	e3a02000 	mov	r2, #0
   100ac:	e5953004 	ldr	r3, [r5, #4]
   100b0:	e5852000 	str	r2, [r5]
   100b4:	e5843018 	str	r3, [r4, #24]
   100b8:	e5943014 	ldr	r3, [r4, #20]
   100bc:	e3530000 	cmp	r3, #0
   100c0:	0a000000 	beq	100c8 <palloc+0x5c>
   100c4:	ebfffe84 	bl	fadc <LeaveCritical>
   100c8:	e1a00005 	mov	r0, r5
   100cc:	e8bd8070 	pop	{r4, r5, r6, pc}
   100d0:	e59f206c 	ldr	r2, [pc, #108]	; 10144 <palloc+0xd8>
   100d4:	e59f106c 	ldr	r1, [pc, #108]	; 10148 <palloc+0xdc>
   100d8:	e59f006c 	ldr	r0, [pc, #108]	; 1014c <palloc+0xe0>
   100dc:	eb00003b 	bl	101d0 <assertion_failed>
   100e0:	eafffff0 	b	100a8 <palloc+0x3c>
   100e4:	ebfffe4f 	bl	fa28 <EnterCritical>
   100e8:	e5945018 	ldr	r5, [r4, #24]
   100ec:	e3550000 	cmp	r5, #0
   100f0:	1affffe8 	bne	10098 <palloc+0x2c>
   100f4:	e5945008 	ldr	r5, [r4, #8]
   100f8:	e594200c 	ldr	r2, [r4, #12]
   100fc:	e2853a01 	add	r3, r5, #4096	; 0x1000
   10100:	e1530002 	cmp	r3, r2
   10104:	e5843008 	str	r3, [r4, #8]
   10108:	e5943014 	ldr	r3, [r4, #20]
   1010c:	9affffea 	bls	100bc <palloc+0x50>
   10110:	e3530000 	cmp	r3, #0
   10114:	01a05003 	moveq	r5, r3
   10118:	0affffea 	beq	100c8 <palloc+0x5c>
   1011c:	ebfffe6e 	bl	fadc <LeaveCritical>
   10120:	e3a05000 	mov	r5, #0
   10124:	eaffffe7 	b	100c8 <palloc+0x5c>
   10128:	e59f2020 	ldr	r2, [pc, #32]	; 10150 <palloc+0xe4>
   1012c:	e59f1014 	ldr	r1, [pc, #20]	; 10148 <palloc+0xdc>
   10130:	e59f001c 	ldr	r0, [pc, #28]	; 10154 <palloc+0xe8>
   10134:	eb000025 	bl	101d0 <assertion_failed>
   10138:	eaffffd0 	b	10080 <palloc+0x14>
   1013c:	0001564c 	.word	0x0001564c
   10140:	50474d43 	.word	0x50474d43
   10144:	0000011f 	.word	0x0000011f
   10148:	00013b4c 	.word	0x00013b4c
   1014c:	00013bfc 	.word	0x00013bfc
   10150:	00000111 	.word	0x00000111
   10154:	00013be8 	.word	0x00013be8

00010158 <pfree>:
   10158:	e92d4070 	push	{r4, r5, r6, lr}
   1015c:	e2504000 	subs	r4, r0, #0
   10160:	08bd8070 	popeq	{r4, r5, r6, pc}
   10164:	e59f5044 	ldr	r5, [pc, #68]	; 101b0 <pfree+0x58>
   10168:	e5950014 	ldr	r0, [r5, #20]
   1016c:	e3500000 	cmp	r0, #0
   10170:	1a000004 	bne	10188 <pfree+0x30>
   10174:	e5952018 	ldr	r2, [r5, #24]
   10178:	e59f1034 	ldr	r1, [pc, #52]	; 101b4 <pfree+0x5c>
   1017c:	e5854018 	str	r4, [r5, #24]
   10180:	e8840006 	stm	r4, {r1, r2}
   10184:	e8bd8070 	pop	{r4, r5, r6, pc}
   10188:	ebfffe26 	bl	fa28 <EnterCritical>
   1018c:	e5951014 	ldr	r1, [r5, #20]
   10190:	e5953018 	ldr	r3, [r5, #24]
   10194:	e59f2018 	ldr	r2, [pc, #24]	; 101b4 <pfree+0x5c>
   10198:	e3510000 	cmp	r1, #0
   1019c:	e1c420f0 	strd	r2, [r4]
   101a0:	e5854018 	str	r4, [r5, #24]
   101a4:	08bd8070 	popeq	{r4, r5, r6, pc}
   101a8:	e8bd4070 	pop	{r4, r5, r6, lr}
   101ac:	eafffe4a 	b	fadc <LeaveCritical>
   101b0:	0001564c 	.word	0x0001564c
   101b4:	50474d43 	.word	0x50474d43

000101b8 <_GLOBAL__sub_I_mem_init>:
   101b8:	e3a02001 	mov	r2, #1
   101bc:	e59f3008 	ldr	r3, [pc, #8]	; 101cc <_GLOBAL__sub_I_mem_init+0x14>
   101c0:	e5832010 	str	r2, [r3, #16]
   101c4:	e5832014 	str	r2, [r3, #20]
   101c8:	e12fff1e 	bx	lr
   101cc:	0001564c 	.word	0x0001564c

000101d0 <assertion_failed>:
   101d0:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   101d4:	e1a05000 	mov	r5, r0
   101d8:	e24dd01c 	sub	sp, sp, #28
   101dc:	e1a06001 	mov	r6, r1
   101e0:	e1a07002 	mov	r7, r2
   101e4:	e1a0400d 	mov	r4, sp
   101e8:	eb000856 	bl	12348 <CInterruptSystem::DisableFIQ()>
   101ec:	f1080040 	cpsie	f
   101f0:	e28d0008 	add	r0, sp, #8
   101f4:	ebfff2b2 	bl	ccc4 <CString::CString()>
   101f8:	e1a03007 	mov	r3, r7
   101fc:	e1a02006 	mov	r2, r6
   10200:	e28d0008 	add	r0, sp, #8
   10204:	e59f104c 	ldr	r1, [pc, #76]	; 10258 <assertion_failed+0x88>
   10208:	ebfff6be 	bl	dd08 <CString::Format(char const*, ...)>
   1020c:	e28d0008 	add	r0, sp, #8
   10210:	ebfff2c1 	bl	cd1c <CString::operator char const*() const>
   10214:	e1a01000 	mov	r1, r0
   10218:	e1a00004 	mov	r0, r4
   1021c:	eb00023d 	bl	10b18 <debug_stacktrace(unsigned int const*, char const*)>
   10220:	ebffe7d3 	bl	a174 <CLogger::Get()>
   10224:	e1a04000 	mov	r4, r0
   10228:	e28d0008 	add	r0, sp, #8
   1022c:	ebfff2ba 	bl	cd1c <CString::operator char const*() const>
   10230:	e59f3024 	ldr	r3, [pc, #36]	; 1025c <assertion_failed+0x8c>
   10234:	e1a01000 	mov	r1, r0
   10238:	e3a02000 	mov	r2, #0
   1023c:	e1a00004 	mov	r0, r4
   10240:	e58d5000 	str	r5, [sp]
   10244:	ebffe70f 	bl	9e88 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   10248:	e28d0008 	add	r0, sp, #8
   1024c:	ebfff269 	bl	cbf8 <CString::~CString()>
   10250:	e28dd01c 	add	sp, sp, #28
   10254:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   10258:	00013c20 	.word	0x00013c20
   1025c:	00013c28 	.word	0x00013c28

00010260 <CBcmFrameBuffer::UpdatePalette() [clone .part.0]>:
   10260:	e3a01000 	mov	r1, #0
   10264:	e3a02001 	mov	r2, #1
   10268:	e92d4030 	push	{r4, r5, lr}
   1026c:	e1a04000 	mov	r4, r0
   10270:	e5903020 	ldr	r3, [r0, #32]
   10274:	e24dd014 	sub	sp, sp, #20
   10278:	e5c32011 	strb	r2, [r3, #17]
   1027c:	e5c3100c 	strb	r1, [r3, #12]
   10280:	e5c3100d 	strb	r1, [r3, #13]
   10284:	e5c3100e 	strb	r1, [r3, #14]
   10288:	e5c3100f 	strb	r1, [r3, #15]
   1028c:	e5c31010 	strb	r1, [r3, #16]
   10290:	e5c31012 	strb	r1, [r3, #18]
   10294:	e5c31013 	strb	r1, [r3, #19]
   10298:	e28d0008 	add	r0, sp, #8
   1029c:	eb000112 	bl	106ec <CBcmPropertyTags::CBcmPropertyTags(bool)>
   102a0:	e59f306c 	ldr	r3, [pc, #108]	; 10314 <CBcmFrameBuffer::UpdatePalette() [clone .part.0]+0xb4>
   102a4:	e5942020 	ldr	r2, [r4, #32]
   102a8:	e28d0008 	add	r0, sp, #8
   102ac:	e58d3000 	str	r3, [sp]
   102b0:	e59f1060 	ldr	r1, [pc, #96]	; 10318 <CBcmFrameBuffer::UpdatePalette() [clone .part.0]+0xb8>
   102b4:	e283300c 	add	r3, r3, #12
   102b8:	eb000163 	bl	1084c <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   102bc:	e2505000 	subs	r5, r0, #0
   102c0:	0a000008 	beq	102e8 <CBcmFrameBuffer::UpdatePalette() [clone .part.0]+0x88>
   102c4:	e5942020 	ldr	r2, [r4, #32]
   102c8:	e5d2300c 	ldrb	r3, [r2, #12]
   102cc:	e5d2000d 	ldrb	r0, [r2, #13]
   102d0:	e5d2100e 	ldrb	r1, [r2, #14]
   102d4:	e1833400 	orr	r3, r3, r0, lsl #8
   102d8:	e5d2200f 	ldrb	r2, [r2, #15]
   102dc:	e1833801 	orr	r3, r3, r1, lsl #16
   102e0:	e1933c02 	orrs	r3, r3, r2, lsl #24
   102e4:	0a000005 	beq	10300 <CBcmFrameBuffer::UpdatePalette() [clone .part.0]+0xa0>
   102e8:	e3a05000 	mov	r5, #0
   102ec:	e28d0008 	add	r0, sp, #8
   102f0:	eb000104 	bl	10708 <CBcmPropertyTags::~CBcmPropertyTags()>
   102f4:	e1a00005 	mov	r0, r5
   102f8:	e28dd014 	add	sp, sp, #20
   102fc:	e8bd8030 	pop	{r4, r5, pc}
   10300:	e28d0008 	add	r0, sp, #8
   10304:	eb0000ff 	bl	10708 <CBcmPropertyTags::~CBcmPropertyTags()>
   10308:	e1a00005 	mov	r0, r5
   1030c:	e28dd014 	add	sp, sp, #20
   10310:	e8bd8030 	pop	{r4, r5, pc}
   10314:	00000408 	.word	0x00000408
   10318:	0004800b 	.word	0x0004800b

0001031c <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)>:
   1031c:	e92d4030 	push	{r4, r5, lr}
   10320:	e1a04000 	mov	r4, r0
   10324:	e3a05000 	mov	r5, #0
   10328:	e3520000 	cmp	r2, #0
   1032c:	13510000 	cmpne	r1, #0
   10330:	e24dd02c 	sub	sp, sp, #44	; 0x2c
   10334:	e59d003c 	ldr	r0, [sp, #60]	; 0x3c
   10338:	e5841000 	str	r1, [r4]
   1033c:	e59d1038 	ldr	r1, [sp, #56]	; 0x38
   10340:	e5842004 	str	r2, [r4, #4]
   10344:	e5843010 	str	r3, [r4, #16]
   10348:	e584000c 	str	r0, [r4, #12]
   1034c:	e5841008 	str	r1, [r4, #8]
   10350:	e5845014 	str	r5, [r4, #20]
   10354:	e5845018 	str	r5, [r4, #24]
   10358:	e584501c 	str	r5, [r4, #28]
   1035c:	e5845020 	str	r5, [r4, #32]
   10360:	1a000011 	bne	103ac <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x90>
   10364:	e1a01005 	mov	r1, r5
   10368:	e28d000c 	add	r0, sp, #12
   1036c:	eb0000de 	bl	106ec <CBcmPropertyTags::CBcmPropertyTags(bool)>
   10370:	e3a03014 	mov	r3, #20
   10374:	e58d5000 	str	r5, [sp]
   10378:	e28d000c 	add	r0, sp, #12
   1037c:	e08d2003 	add	r2, sp, r3
   10380:	e59f10c8 	ldr	r1, [pc, #200]	; 10450 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x134>
   10384:	eb000130 	bl	1084c <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   10388:	e1500005 	cmp	r0, r5
   1038c:	1a000027 	bne	10430 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x114>
   10390:	e3a02d0a 	mov	r2, #640	; 0x280
   10394:	e3a03e1e 	mov	r3, #480	; 0x1e0
   10398:	e1c420f0 	strd	r2, [r4]
   1039c:	e28d000c 	add	r0, sp, #12
   103a0:	eb0000d8 	bl	10708 <CBcmPropertyTags::~CBcmPropertyTags()>
   103a4:	e5941008 	ldr	r1, [r4, #8]
   103a8:	e5943010 	ldr	r3, [r4, #16]
   103ac:	e3510000 	cmp	r1, #0
   103b0:	0a00001a 	beq	10420 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x104>
   103b4:	e594200c 	ldr	r2, [r4, #12]
   103b8:	e3520000 	cmp	r2, #0
   103bc:	0a000017 	beq	10420 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x104>
   103c0:	e3530008 	cmp	r3, #8
   103c4:	8a000006 	bhi	103e4 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0xc8>
   103c8:	e59f0084 	ldr	r0, [pc, #132]	; 10454 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x138>
   103cc:	ebfffdf0 	bl	fb94 <operator new[](unsigned int)>
   103d0:	e3a02b01 	mov	r2, #1024	; 0x400
   103d4:	e5840020 	str	r0, [r4, #32]
   103d8:	e3a01000 	mov	r1, #0
   103dc:	e2800014 	add	r0, r0, #20
   103e0:	ebfffa0d 	bl	ec1c <memset>
   103e4:	e3a02070 	mov	r2, #112	; 0x70
   103e8:	e59f1068 	ldr	r1, [pc, #104]	; 10458 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x13c>
   103ec:	e2840024 	add	r0, r4, #36	; 0x24
   103f0:	ebfffbb1 	bl	f2bc <memcpy>
   103f4:	e1c400d4 	ldrd	r0, [r4, #4]
   103f8:	e1c420dc 	ldrd	r2, [r4, #12]
   103fc:	e5840034 	str	r0, [r4, #52]	; 0x34
   10400:	e1a00004 	mov	r0, r4
   10404:	e594c000 	ldr	ip, [r4]
   10408:	e5841044 	str	r1, [r4, #68]	; 0x44
   1040c:	e584c030 	str	ip, [r4, #48]	; 0x30
   10410:	e5842048 	str	r2, [r4, #72]	; 0x48
   10414:	e5843058 	str	r3, [r4, #88]	; 0x58
   10418:	e28dd02c 	add	sp, sp, #44	; 0x2c
   1041c:	e8bd8030 	pop	{r4, r5, pc}
   10420:	e8940006 	ldm	r4, {r1, r2}
   10424:	e5841008 	str	r1, [r4, #8]
   10428:	e584200c 	str	r2, [r4, #12]
   1042c:	eaffffe3 	b	103c0 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0xa4>
   10430:	e1cd22d0 	ldrd	r2, [sp, #32]
   10434:	e2420d0a 	sub	r0, r2, #640	; 0x280
   10438:	e2431e1e 	sub	r1, r3, #480	; 0x1e0
   1043c:	e3510f96 	cmp	r1, #600	; 0x258
   10440:	93500c05 	cmpls	r0, #1280	; 0x500
   10444:	e1c420f0 	strd	r2, [r4]
   10448:	8affffd0 	bhi	10390 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x74>
   1044c:	eaffffd2 	b	1039c <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x80>
   10450:	00040003 	.word	0x00040003
   10454:	00000414 	.word	0x00000414
   10458:	00015534 	.word	0x00015534

0001045c <CBcmFrameBuffer::~CBcmFrameBuffer()>:
   1045c:	e92d4010 	push	{r4, lr}
   10460:	e1a04000 	mov	r4, r0
   10464:	e3a01014 	mov	r1, #20
   10468:	e5900020 	ldr	r0, [r0, #32]
   1046c:	ebfffdcb 	bl	fba0 <operator delete(void*, unsigned int)>
   10470:	e1a00004 	mov	r0, r4
   10474:	e8bd8010 	pop	{r4, pc}

00010478 <CBcmFrameBuffer::SetPalette(unsigned char, unsigned short)>:
   10478:	e5903010 	ldr	r3, [r0, #16]
   1047c:	e3530008 	cmp	r3, #8
   10480:	812fff1e 	bxhi	lr
   10484:	e1a03982 	lsl	r3, r2, #19
   10488:	e1a0c5a2 	lsr	ip, r2, #11
   1048c:	e203373e 	and	r3, r3, #16252928	; 0xf80000
   10490:	e183318c 	orr	r3, r3, ip, lsl #3
   10494:	e1a02282 	lsl	r2, r2, #5
   10498:	e5900020 	ldr	r0, [r0, #32]
   1049c:	e38334ff 	orr	r3, r3, #-16777216	; 0xff000000
   104a0:	e2022b3f 	and	r2, r2, #64512	; 0xfc00
   104a4:	e1822003 	orr	r2, r2, r3
   104a8:	e2811004 	add	r1, r1, #4
   104ac:	e0801101 	add	r1, r0, r1, lsl #2
   104b0:	e1a0c422 	lsr	ip, r2, #8
   104b4:	e1a00822 	lsr	r0, r2, #16
   104b8:	e1a03c22 	lsr	r3, r2, #24
   104bc:	e5c12004 	strb	r2, [r1, #4]
   104c0:	e5c1c005 	strb	ip, [r1, #5]
   104c4:	e5c10006 	strb	r0, [r1, #6]
   104c8:	e5c13007 	strb	r3, [r1, #7]
   104cc:	e12fff1e 	bx	lr

000104d0 <CBcmFrameBuffer::SetPalette32(unsigned char, unsigned int)>:
   104d0:	e5903010 	ldr	r3, [r0, #16]
   104d4:	e3530008 	cmp	r3, #8
   104d8:	812fff1e 	bxhi	lr
   104dc:	e5903020 	ldr	r3, [r0, #32]
   104e0:	e2811004 	add	r1, r1, #4
   104e4:	e0831101 	add	r1, r3, r1, lsl #2
   104e8:	e1a0c422 	lsr	ip, r2, #8
   104ec:	e1a00822 	lsr	r0, r2, #16
   104f0:	e1a03c22 	lsr	r3, r2, #24
   104f4:	e5c12004 	strb	r2, [r1, #4]
   104f8:	e5c1c005 	strb	ip, [r1, #5]
   104fc:	e5c10006 	strb	r0, [r1, #6]
   10500:	e5c13007 	strb	r3, [r1, #7]
   10504:	e12fff1e 	bx	lr

00010508 <CBcmFrameBuffer::Initialize()>:
   10508:	e92d4030 	push	{r4, r5, lr}
   1050c:	e1a04000 	mov	r4, r0
   10510:	e24dd00c 	sub	sp, sp, #12
   10514:	e3a01000 	mov	r1, #0
   10518:	e1a0000d 	mov	r0, sp
   1051c:	eb000072 	bl	106ec <CBcmPropertyTags::CBcmPropertyTags(bool)>
   10520:	e2841024 	add	r1, r4, #36	; 0x24
   10524:	e1a0000d 	mov	r0, sp
   10528:	e3a02070 	mov	r2, #112	; 0x70
   1052c:	eb00007a 	bl	1071c <CBcmPropertyTags::GetTags(void*, unsigned int)>
   10530:	e2505000 	subs	r5, r0, #0
   10534:	0a00001f 	beq	105b8 <CBcmFrameBuffer::Initialize()+0xb0>
   10538:	e5943030 	ldr	r3, [r4, #48]	; 0x30
   1053c:	e3530000 	cmp	r3, #0
   10540:	0a00001b 	beq	105b4 <CBcmFrameBuffer::Initialize()+0xac>
   10544:	e5943034 	ldr	r3, [r4, #52]	; 0x34
   10548:	e3530000 	cmp	r3, #0
   1054c:	0a000018 	beq	105b4 <CBcmFrameBuffer::Initialize()+0xac>
   10550:	e5943044 	ldr	r3, [r4, #68]	; 0x44
   10554:	e3530000 	cmp	r3, #0
   10558:	0a000015 	beq	105b4 <CBcmFrameBuffer::Initialize()+0xac>
   1055c:	e5943048 	ldr	r3, [r4, #72]	; 0x48
   10560:	e3530000 	cmp	r3, #0
   10564:	0a000012 	beq	105b4 <CBcmFrameBuffer::Initialize()+0xac>
   10568:	e5943058 	ldr	r3, [r4, #88]	; 0x58
   1056c:	e3530000 	cmp	r3, #0
   10570:	0a00000f 	beq	105b4 <CBcmFrameBuffer::Initialize()+0xac>
   10574:	e594307c 	ldr	r3, [r4, #124]	; 0x7c
   10578:	e3530000 	cmp	r3, #0
   1057c:	0a00000c 	beq	105b4 <CBcmFrameBuffer::Initialize()+0xac>
   10580:	e5942010 	ldr	r2, [r4, #16]
   10584:	e5941080 	ldr	r1, [r4, #128]	; 0x80
   10588:	e3520008 	cmp	r2, #8
   1058c:	e5942090 	ldr	r2, [r4, #144]	; 0x90
   10590:	e3c33103 	bic	r3, r3, #-1073741824	; 0xc0000000
   10594:	e5843014 	str	r3, [r4, #20]
   10598:	e5841018 	str	r1, [r4, #24]
   1059c:	e584201c 	str	r2, [r4, #28]
   105a0:	8a000004 	bhi	105b8 <CBcmFrameBuffer::Initialize()+0xb0>
   105a4:	e1a00004 	mov	r0, r4
   105a8:	ebffff2c 	bl	10260 <CBcmFrameBuffer::UpdatePalette() [clone .part.0]>
   105ac:	e1a05000 	mov	r5, r0
   105b0:	ea000000 	b	105b8 <CBcmFrameBuffer::Initialize()+0xb0>
   105b4:	e1a05003 	mov	r5, r3
   105b8:	e1a0000d 	mov	r0, sp
   105bc:	eb000051 	bl	10708 <CBcmPropertyTags::~CBcmPropertyTags()>
   105c0:	e1a00005 	mov	r0, r5
   105c4:	e28dd00c 	add	sp, sp, #12
   105c8:	e8bd8030 	pop	{r4, r5, pc}

000105cc <CBcmFrameBuffer::GetWidth() const>:
   105cc:	e5900000 	ldr	r0, [r0]
   105d0:	e12fff1e 	bx	lr

000105d4 <CBcmFrameBuffer::GetHeight() const>:
   105d4:	e5900004 	ldr	r0, [r0, #4]
   105d8:	e12fff1e 	bx	lr

000105dc <CBcmFrameBuffer::GetVirtWidth() const>:
   105dc:	e5900008 	ldr	r0, [r0, #8]
   105e0:	e12fff1e 	bx	lr

000105e4 <CBcmFrameBuffer::GetVirtHeight() const>:
   105e4:	e590000c 	ldr	r0, [r0, #12]
   105e8:	e12fff1e 	bx	lr

000105ec <CBcmFrameBuffer::GetPitch() const>:
   105ec:	e590001c 	ldr	r0, [r0, #28]
   105f0:	e12fff1e 	bx	lr

000105f4 <CBcmFrameBuffer::GetDepth() const>:
   105f4:	e5900010 	ldr	r0, [r0, #16]
   105f8:	e12fff1e 	bx	lr

000105fc <CBcmFrameBuffer::GetBuffer() const>:
   105fc:	e5900014 	ldr	r0, [r0, #20]
   10600:	e12fff1e 	bx	lr

00010604 <CBcmFrameBuffer::GetSize() const>:
   10604:	e5900018 	ldr	r0, [r0, #24]
   10608:	e12fff1e 	bx	lr

0001060c <CBcmFrameBuffer::UpdatePalette()>:
   1060c:	e5903010 	ldr	r3, [r0, #16]
   10610:	e3530008 	cmp	r3, #8
   10614:	9a000001 	bls	10620 <CBcmFrameBuffer::UpdatePalette()+0x14>
   10618:	e3a00001 	mov	r0, #1
   1061c:	e12fff1e 	bx	lr
   10620:	eaffff0e 	b	10260 <CBcmFrameBuffer::UpdatePalette() [clone .part.0]>

00010624 <CBcmFrameBuffer::SetVirtualOffset(unsigned int, unsigned int)>:
   10624:	e92d4070 	push	{r4, r5, r6, lr}
   10628:	e24dd028 	sub	sp, sp, #40	; 0x28
   1062c:	e1a05001 	mov	r5, r1
   10630:	e28d000c 	add	r0, sp, #12
   10634:	e3a01000 	mov	r1, #0
   10638:	e1a06002 	mov	r6, r2
   1063c:	eb00002a 	bl	106ec <CBcmPropertyTags::CBcmPropertyTags(bool)>
   10640:	e3a03008 	mov	r3, #8
   10644:	e58d3000 	str	r3, [sp]
   10648:	e3a03014 	mov	r3, #20
   1064c:	e28d000c 	add	r0, sp, #12
   10650:	e08d2003 	add	r2, sp, r3
   10654:	e59f1040 	ldr	r1, [pc, #64]	; 1069c <CBcmFrameBuffer::SetVirtualOffset(unsigned int, unsigned int)+0x78>
   10658:	e58d5020 	str	r5, [sp, #32]
   1065c:	e58d6024 	str	r6, [sp, #36]	; 0x24
   10660:	eb000079 	bl	1084c <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   10664:	e2504000 	subs	r4, r0, #0
   10668:	0a000006 	beq	10688 <CBcmFrameBuffer::SetVirtualOffset(unsigned int, unsigned int)+0x64>
   1066c:	e59d3020 	ldr	r3, [sp, #32]
   10670:	e1530005 	cmp	r3, r5
   10674:	059d4024 	ldreq	r4, [sp, #36]	; 0x24
   10678:	13a04000 	movne	r4, #0
   1067c:	00444006 	subeq	r4, r4, r6
   10680:	016f4f14 	clzeq	r4, r4
   10684:	01a042a4 	lsreq	r4, r4, #5
   10688:	e28d000c 	add	r0, sp, #12
   1068c:	eb00001d 	bl	10708 <CBcmPropertyTags::~CBcmPropertyTags()>
   10690:	e1a00004 	mov	r0, r4
   10694:	e28dd028 	add	sp, sp, #40	; 0x28
   10698:	e8bd8070 	pop	{r4, r5, r6, pc}
   1069c:	00048009 	.word	0x00048009

000106a0 <CBcmFrameBuffer::WaitForVerticalSync()>:
   106a0:	e92d4010 	push	{r4, lr}
   106a4:	e24dd020 	sub	sp, sp, #32
   106a8:	e28d0008 	add	r0, sp, #8
   106ac:	e3a01000 	mov	r1, #0
   106b0:	eb00000d 	bl	106ec <CBcmPropertyTags::CBcmPropertyTags(bool)>
   106b4:	e3a03000 	mov	r3, #0
   106b8:	e58d3000 	str	r3, [sp]
   106bc:	e3a03010 	mov	r3, #16
   106c0:	e59f1020 	ldr	r1, [pc, #32]	; 106e8 <CBcmFrameBuffer::WaitForVerticalSync()+0x48>
   106c4:	e08d2003 	add	r2, sp, r3
   106c8:	e28d0008 	add	r0, sp, #8
   106cc:	eb00005e 	bl	1084c <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   106d0:	e1a04000 	mov	r4, r0
   106d4:	e28d0008 	add	r0, sp, #8
   106d8:	eb00000a 	bl	10708 <CBcmPropertyTags::~CBcmPropertyTags()>
   106dc:	e1a00004 	mov	r0, r4
   106e0:	e28dd020 	add	sp, sp, #32
   106e4:	e8bd8010 	pop	{r4, pc}
   106e8:	0004800e 	.word	0x0004800e

000106ec <CBcmPropertyTags::CBcmPropertyTags(bool)>:
   106ec:	e92d4010 	push	{r4, lr}
   106f0:	e1a04000 	mov	r4, r0
   106f4:	e1a02001 	mov	r2, r1
   106f8:	e3a01008 	mov	r1, #8
   106fc:	eb000907 	bl	12b20 <CBcmMailBox::CBcmMailBox(unsigned int, bool)>
   10700:	e1a00004 	mov	r0, r4
   10704:	e8bd8010 	pop	{r4, pc}

00010708 <CBcmPropertyTags::~CBcmPropertyTags()>:
   10708:	e92d4010 	push	{r4, lr}
   1070c:	e1a04000 	mov	r4, r0
   10710:	eb000905 	bl	12b2c <CBcmMailBox::~CBcmMailBox()>
   10714:	e1a00004 	mov	r0, r4
   10718:	e8bd8010 	pop	{r4, pc}

0001071c <CBcmPropertyTags::GetTags(void*, unsigned int)>:
   1071c:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   10720:	e2519000 	subs	r9, r1, #0
   10724:	e1a0a000 	mov	sl, r0
   10728:	e1a07002 	mov	r7, r2
   1072c:	0a00003d 	beq	10828 <CBcmPropertyTags::GetTags(void*, unsigned int)+0x10c>
   10730:	e357000f 	cmp	r7, #15
   10734:	9a000036 	bls	10814 <CBcmPropertyTags::GetTags(void*, unsigned int)+0xf8>
   10738:	e287600c 	add	r6, r7, #12
   1073c:	e3160003 	tst	r6, #3
   10740:	1a00002e 	bne	10800 <CBcmPropertyTags::GetTags(void*, unsigned int)+0xe4>
   10744:	e3a00000 	mov	r0, #0
   10748:	ebfffc83 	bl	f95c <CMemorySystem::GetCoherentPage(unsigned int)>
   1074c:	e3a05000 	mov	r5, #0
   10750:	e1a04000 	mov	r4, r0
   10754:	e1a01426 	lsr	r1, r6, #8
   10758:	e1a02826 	lsr	r2, r6, #16
   1075c:	e1a03c26 	lsr	r3, r6, #24
   10760:	e2808008 	add	r8, r0, #8
   10764:	e5c06000 	strb	r6, [r0]
   10768:	e5c01001 	strb	r1, [r0, #1]
   1076c:	e5c02002 	strb	r2, [r0, #2]
   10770:	e5c03003 	strb	r3, [r0, #3]
   10774:	e1a02007 	mov	r2, r7
   10778:	e1a00008 	mov	r0, r8
   1077c:	e5c45004 	strb	r5, [r4, #4]
   10780:	e5c45005 	strb	r5, [r4, #5]
   10784:	e5c45006 	strb	r5, [r4, #6]
   10788:	e5c45007 	strb	r5, [r4, #7]
   1078c:	e1a01009 	mov	r1, r9
   10790:	ebfffac9 	bl	f2bc <memcpy>
   10794:	e7885007 	str	r5, [r8, r7]
   10798:	ee075f9a 	mcr	15, 0, r5, cr7, cr10, {4}
   1079c:	e3c46103 	bic	r6, r4, #-1073741824	; 0xc0000000
   107a0:	e3866101 	orr	r6, r6, #1073741824	; 0x40000000
   107a4:	e1a0000a 	mov	r0, sl
   107a8:	e1a01006 	mov	r1, r6
   107ac:	eb00090d 	bl	12be8 <CBcmMailBox::WriteRead(unsigned int)>
   107b0:	e1500006 	cmp	r0, r6
   107b4:	0a000001 	beq	107c0 <CBcmPropertyTags::GetTags(void*, unsigned int)+0xa4>
   107b8:	e3a00000 	mov	r0, #0
   107bc:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   107c0:	ee075fba 	mcr	15, 0, r5, cr7, cr10, {5}
   107c4:	e5d42005 	ldrb	r2, [r4, #5]
   107c8:	e5d43004 	ldrb	r3, [r4, #4]
   107cc:	e5d41006 	ldrb	r1, [r4, #6]
   107d0:	e1833402 	orr	r3, r3, r2, lsl #8
   107d4:	e5d42007 	ldrb	r2, [r4, #7]
   107d8:	e1833801 	orr	r3, r3, r1, lsl #16
   107dc:	e1833c02 	orr	r3, r3, r2, lsl #24
   107e0:	e3530102 	cmp	r3, #-2147483648	; 0x80000000
   107e4:	1afffff3 	bne	107b8 <CBcmPropertyTags::GetTags(void*, unsigned int)+0x9c>
   107e8:	e1a02007 	mov	r2, r7
   107ec:	e1a01008 	mov	r1, r8
   107f0:	e1a00009 	mov	r0, r9
   107f4:	ebfffab0 	bl	f2bc <memcpy>
   107f8:	e3a00001 	mov	r0, #1
   107fc:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   10800:	e3a02053 	mov	r2, #83	; 0x53
   10804:	e59f1030 	ldr	r1, [pc, #48]	; 1083c <CBcmPropertyTags::GetTags(void*, unsigned int)+0x120>
   10808:	e59f0030 	ldr	r0, [pc, #48]	; 10840 <CBcmPropertyTags::GetTags(void*, unsigned int)+0x124>
   1080c:	ebfffe6f 	bl	101d0 <assertion_failed>
   10810:	eaffffcb 	b	10744 <CBcmPropertyTags::GetTags(void*, unsigned int)+0x28>
   10814:	e3a02051 	mov	r2, #81	; 0x51
   10818:	e59f101c 	ldr	r1, [pc, #28]	; 1083c <CBcmPropertyTags::GetTags(void*, unsigned int)+0x120>
   1081c:	e59f0020 	ldr	r0, [pc, #32]	; 10844 <CBcmPropertyTags::GetTags(void*, unsigned int)+0x128>
   10820:	ebfffe6a 	bl	101d0 <assertion_failed>
   10824:	eaffffc3 	b	10738 <CBcmPropertyTags::GetTags(void*, unsigned int)+0x1c>
   10828:	e3a02050 	mov	r2, #80	; 0x50
   1082c:	e59f1008 	ldr	r1, [pc, #8]	; 1083c <CBcmPropertyTags::GetTags(void*, unsigned int)+0x120>
   10830:	e59f0010 	ldr	r0, [pc, #16]	; 10848 <CBcmPropertyTags::GetTags(void*, unsigned int)+0x12c>
   10834:	ebfffe65 	bl	101d0 <assertion_failed>
   10838:	eaffffbc 	b	10730 <CBcmPropertyTags::GetTags(void*, unsigned int)+0x14>
   1083c:	00013c40 	.word	0x00013c40
   10840:	00013c8c 	.word	0x00013c8c
   10844:	00013c60 	.word	0x00013c60
   10848:	00013c54 	.word	0x00013c54

0001084c <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>:
   1084c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   10850:	e2524000 	subs	r4, r2, #0
   10854:	e1a08000 	mov	r8, r0
   10858:	e1a06001 	mov	r6, r1
   1085c:	e1a07003 	mov	r7, r3
   10860:	e59d5018 	ldr	r5, [sp, #24]
   10864:	0a000038 	beq	1094c <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)+0x100>
   10868:	e357000f 	cmp	r7, #15
   1086c:	9a000031 	bls	10938 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)+0xec>
   10870:	e3c52102 	bic	r2, r5, #-2147483648	; 0x80000000
   10874:	e1a03422 	lsr	r3, r2, #8
   10878:	e247100c 	sub	r1, r7, #12
   1087c:	e5c43009 	strb	r3, [r4, #9]
   10880:	e1a03822 	lsr	r3, r2, #16
   10884:	e1a0c421 	lsr	ip, r1, #8
   10888:	e5c4300a 	strb	r3, [r4, #10]
   1088c:	e1a03821 	lsr	r3, r1, #16
   10890:	e5c42008 	strb	r2, [r4, #8]
   10894:	e5c46000 	strb	r6, [r4]
   10898:	e1a02c22 	lsr	r2, r2, #24
   1089c:	e5c41004 	strb	r1, [r4, #4]
   108a0:	e5c4c005 	strb	ip, [r4, #5]
   108a4:	e1a01c21 	lsr	r1, r1, #24
   108a8:	e1a0c426 	lsr	ip, r6, #8
   108ac:	e5c43006 	strb	r3, [r4, #6]
   108b0:	e1a03826 	lsr	r3, r6, #16
   108b4:	e1a06c26 	lsr	r6, r6, #24
   108b8:	e5c4200b 	strb	r2, [r4, #11]
   108bc:	e5c41007 	strb	r1, [r4, #7]
   108c0:	e1a00008 	mov	r0, r8
   108c4:	e1a02007 	mov	r2, r7
   108c8:	e5c4c001 	strb	ip, [r4, #1]
   108cc:	e5c43002 	strb	r3, [r4, #2]
   108d0:	e5c46003 	strb	r6, [r4, #3]
   108d4:	e1a01004 	mov	r1, r4
   108d8:	ebffff8f 	bl	1071c <CBcmPropertyTags::GetTags(void*, unsigned int)>
   108dc:	e3500000 	cmp	r0, #0
   108e0:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
   108e4:	e5d43009 	ldrb	r3, [r4, #9]
   108e8:	e5d40008 	ldrb	r0, [r4, #8]
   108ec:	e5d4200a 	ldrb	r2, [r4, #10]
   108f0:	e1800403 	orr	r0, r0, r3, lsl #8
   108f4:	e5d4300b 	ldrb	r3, [r4, #11]
   108f8:	e1800802 	orr	r0, r0, r2, lsl #16
   108fc:	e1900c03 	orrs	r0, r0, r3, lsl #24
   10900:	4a000001 	bmi	1090c <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)+0xc0>
   10904:	e3a00000 	mov	r0, #0
   10908:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   1090c:	e3c00102 	bic	r0, r0, #-2147483648	; 0x80000000
   10910:	e1a01420 	lsr	r1, r0, #8
   10914:	e1a02820 	lsr	r2, r0, #16
   10918:	e1a03c20 	lsr	r3, r0, #24
   1091c:	e5c40008 	strb	r0, [r4, #8]
   10920:	e2900000 	adds	r0, r0, #0
   10924:	e5c41009 	strb	r1, [r4, #9]
   10928:	e5c4200a 	strb	r2, [r4, #10]
   1092c:	e5c4300b 	strb	r3, [r4, #11]
   10930:	13a00001 	movne	r0, #1
   10934:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   10938:	e3a02034 	mov	r2, #52	; 0x34
   1093c:	e59f101c 	ldr	r1, [pc, #28]	; 10960 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)+0x114>
   10940:	e59f001c 	ldr	r0, [pc, #28]	; 10964 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)+0x118>
   10944:	ebfffe21 	bl	101d0 <assertion_failed>
   10948:	eaffffc8 	b	10870 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)+0x24>
   1094c:	e3a02033 	mov	r2, #51	; 0x33
   10950:	e59f1008 	ldr	r1, [pc, #8]	; 10960 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)+0x114>
   10954:	e59f000c 	ldr	r0, [pc, #12]	; 10968 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)+0x11c>
   10958:	ebfffe1c 	bl	101d0 <assertion_failed>
   1095c:	eaffffc1 	b	10868 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)+0x1c>
   10960:	00013c40 	.word	0x00013c40
   10964:	00013cb0 	.word	0x00013cb0
   10968:	00013ca4 	.word	0x00013ca4

0001096c <CCharGenerator::CCharGenerator()>:
   1096c:	e3a03008 	mov	r3, #8
   10970:	e5803000 	str	r3, [r0]
   10974:	e12fff1e 	bx	lr

00010978 <CCharGenerator::~CCharGenerator()>:
   10978:	e12fff1e 	bx	lr

0001097c <CCharGenerator::GetCharWidth() const>:
   1097c:	e5900000 	ldr	r0, [r0]
   10980:	e12fff1e 	bx	lr

00010984 <CCharGenerator::GetCharHeight() const>:
   10984:	e3a00013 	mov	r0, #19
   10988:	e12fff1e 	bx	lr

0001098c <CCharGenerator::GetUnderline() const>:
   1098c:	e3a00010 	mov	r0, #16
   10990:	e12fff1e 	bx	lr

00010994 <CCharGenerator::GetPixel(char, unsigned int, unsigned int) const>:
   10994:	e6ef1071 	uxtb	r1, r1
   10998:	e92d4070 	push	{r4, r5, r6, lr}
   1099c:	e2414021 	sub	r4, r1, #33	; 0x21
   109a0:	e35400de 	cmp	r4, #222	; 0xde
   109a4:	8a00000e 	bhi	109e4 <CCharGenerator::GetPixel(char, unsigned int, unsigned int) const+0x50>
   109a8:	e1a06003 	mov	r6, r3
   109ac:	e5903000 	ldr	r3, [r0]
   109b0:	e1a05002 	mov	r5, r2
   109b4:	e1530002 	cmp	r3, r2
   109b8:	9a00000b 	bls	109ec <CCharGenerator::GetPixel(char, unsigned int, unsigned int) const+0x58>
   109bc:	e356000f 	cmp	r6, #15
   109c0:	8a000007 	bhi	109e4 <CCharGenerator::GetPixel(char, unsigned int, unsigned int) const+0x50>
   109c4:	e3a02080 	mov	r2, #128	; 0x80
   109c8:	e59f1038 	ldr	r1, [pc, #56]	; 10a08 <CCharGenerator::GetPixel(char, unsigned int, unsigned int) const+0x74>
   109cc:	e0814204 	add	r4, r1, r4, lsl #4
   109d0:	e7d43006 	ldrb	r3, [r4, r6]
   109d4:	e0133552 	ands	r3, r3, r2, asr r5
   109d8:	13a00001 	movne	r0, #1
   109dc:	03a00000 	moveq	r0, #0
   109e0:	e8bd8070 	pop	{r4, r5, r6, pc}
   109e4:	e3a00000 	mov	r0, #0
   109e8:	e8bd8070 	pop	{r4, r5, r6, pc}
   109ec:	e3a0204e 	mov	r2, #78	; 0x4e
   109f0:	e59f1014 	ldr	r1, [pc, #20]	; 10a0c <CCharGenerator::GetPixel(char, unsigned int, unsigned int) const+0x78>
   109f4:	e59f0014 	ldr	r0, [pc, #20]	; 10a10 <CCharGenerator::GetPixel(char, unsigned int, unsigned int) const+0x7c>
   109f8:	ebfffdf4 	bl	101d0 <assertion_failed>
   109fc:	e356000f 	cmp	r6, #15
   10a00:	9affffef 	bls	109c4 <CCharGenerator::GetPixel(char, unsigned int, unsigned int) const+0x30>
   10a04:	eafffff6 	b	109e4 <CCharGenerator::GetPixel(char, unsigned int, unsigned int) const+0x50>
   10a08:	00013cd8 	.word	0x00013cd8
   10a0c:	00014ac8 	.word	0x00014ac8
   10a10:	00014adc 	.word	0x00014adc

00010a14 <debug_hexdump(void const*, unsigned int, char const*)>:
   10a14:	e3520000 	cmp	r2, #0
   10a18:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   10a1c:	e1a05001 	mov	r5, r1
   10a20:	e59f80e4 	ldr	r8, [pc, #228]	; 10b0c <debug_hexdump(void const*, unsigned int, char const*)+0xf8>
   10a24:	e1a04000 	mov	r4, r0
   10a28:	11a08002 	movne	r8, r2
   10a2c:	e24dd048 	sub	sp, sp, #72	; 0x48
   10a30:	ebffe5cf 	bl	a174 <CLogger::Get()>
   10a34:	e58d4004 	str	r4, [sp, #4]
   10a38:	e58d5000 	str	r5, [sp]
   10a3c:	e1a01008 	mov	r1, r8
   10a40:	e59f30c8 	ldr	r3, [pc, #200]	; 10b10 <debug_hexdump(void const*, unsigned int, char const*)+0xfc>
   10a44:	e3a02004 	mov	r2, #4
   10a48:	ebffe50e 	bl	9e88 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   10a4c:	e3550000 	cmp	r5, #0
   10a50:	0a00002b 	beq	10b04 <debug_hexdump(void const*, unsigned int, char const*)+0xf0>
   10a54:	e59f90b8 	ldr	r9, [pc, #184]	; 10b14 <debug_hexdump(void const*, unsigned int, char const*)+0x100>
   10a58:	ea000001 	b	10a64 <debug_hexdump(void const*, unsigned int, char const*)+0x50>
   10a5c:	e2555010 	subs	r5, r5, #16
   10a60:	0a000027 	beq	10b04 <debug_hexdump(void const*, unsigned int, char const*)+0xf0>
   10a64:	ebffe5c2 	bl	a174 <CLogger::Get()>
   10a68:	e5d4c00f 	ldrb	ip, [r4, #15]
   10a6c:	e5d4300e 	ldrb	r3, [r4, #14]
   10a70:	e5d4200d 	ldrb	r2, [r4, #13]
   10a74:	e5d4100c 	ldrb	r1, [r4, #12]
   10a78:	e5d4a00b 	ldrb	sl, [r4, #11]
   10a7c:	e5d4700a 	ldrb	r7, [r4, #10]
   10a80:	e5d46009 	ldrb	r6, [r4, #9]
   10a84:	e5d4e008 	ldrb	lr, [r4, #8]
   10a88:	e58dc040 	str	ip, [sp, #64]	; 0x40
   10a8c:	e5d4c007 	ldrb	ip, [r4, #7]
   10a90:	e58d303c 	str	r3, [sp, #60]	; 0x3c
   10a94:	e5d43006 	ldrb	r3, [r4, #6]
   10a98:	e58d2038 	str	r2, [sp, #56]	; 0x38
   10a9c:	e5d42005 	ldrb	r2, [r4, #5]
   10aa0:	e58d1034 	str	r1, [sp, #52]	; 0x34
   10aa4:	e5d41004 	ldrb	r1, [r4, #4]
   10aa8:	e58da030 	str	sl, [sp, #48]	; 0x30
   10aac:	e5d4a003 	ldrb	sl, [r4, #3]
   10ab0:	e58d702c 	str	r7, [sp, #44]	; 0x2c
   10ab4:	e5d47002 	ldrb	r7, [r4, #2]
   10ab8:	e58d6028 	str	r6, [sp, #40]	; 0x28
   10abc:	e5d46001 	ldrb	r6, [r4, #1]
   10ac0:	e58de024 	str	lr, [sp, #36]	; 0x24
   10ac4:	e5d4e000 	ldrb	lr, [r4]
   10ac8:	e58dc020 	str	ip, [sp, #32]
   10acc:	e58d301c 	str	r3, [sp, #28]
   10ad0:	e6ffc074 	uxth	ip, r4
   10ad4:	e58d2018 	str	r2, [sp, #24]
   10ad8:	e58d1014 	str	r1, [sp, #20]
   10adc:	e1a03009 	mov	r3, r9
   10ae0:	e3a02004 	mov	r2, #4
   10ae4:	e1a01008 	mov	r1, r8
   10ae8:	e58da010 	str	sl, [sp, #16]
   10aec:	e1cd60f8 	strd	r6, [sp, #8]
   10af0:	e88d5000 	stm	sp, {ip, lr}
   10af4:	ebffe4e3 	bl	9e88 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   10af8:	e355000f 	cmp	r5, #15
   10afc:	e2844010 	add	r4, r4, #16
   10b00:	8affffd5 	bhi	10a5c <debug_hexdump(void const*, unsigned int, char const*)+0x48>
   10b04:	e28dd048 	add	sp, sp, #72	; 0x48
   10b08:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   10b0c:	00014af4 	.word	0x00014af4
   10b10:	00014afc 	.word	0x00014afc
   10b14:	00014b24 	.word	0x00014b24

00010b18 <debug_stacktrace(unsigned int const*, char const*)>:
   10b18:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
   10b1c:	e3a04000 	mov	r4, #0
   10b20:	e1510004 	cmp	r1, r4
   10b24:	e59f8074 	ldr	r8, [pc, #116]	; 10ba0 <debug_stacktrace(unsigned int const*, char const*)+0x88>
   10b28:	e24dd00c 	sub	sp, sp, #12
   10b2c:	11a08001 	movne	r8, r1
   10b30:	e59f606c 	ldr	r6, [pc, #108]	; 10ba4 <debug_stacktrace(unsigned int const*, char const*)+0x8c>
   10b34:	e59f706c 	ldr	r7, [pc, #108]	; 10ba8 <debug_stacktrace(unsigned int const*, char const*)+0x90>
   10b38:	e59f906c 	ldr	r9, [pc, #108]	; 10bac <debug_stacktrace(unsigned int const*, char const*)+0x94>
   10b3c:	e2405004 	sub	r5, r0, #4
   10b40:	ea000002 	b	10b50 <debug_stacktrace(unsigned int const*, char const*)+0x38>
   10b44:	e2844001 	add	r4, r4, #1
   10b48:	e3540040 	cmp	r4, #64	; 0x40
   10b4c:	0a000011 	beq	10b98 <debug_stacktrace(unsigned int const*, char const*)+0x80>
   10b50:	e5b53004 	ldr	r3, [r5, #4]!
   10b54:	e1530006 	cmp	r3, r6
   10b58:	9afffff9 	bls	10b44 <debug_stacktrace(unsigned int const*, char const*)+0x2c>
   10b5c:	e1530007 	cmp	r3, r7
   10b60:	2afffff7 	bcs	10b44 <debug_stacktrace(unsigned int const*, char const*)+0x2c>
   10b64:	e3130003 	tst	r3, #3
   10b68:	1afffff5 	bne	10b44 <debug_stacktrace(unsigned int const*, char const*)+0x2c>
   10b6c:	ebffe580 	bl	a174 <CLogger::Get()>
   10b70:	e5952000 	ldr	r2, [r5]
   10b74:	e1a03009 	mov	r3, r9
   10b78:	e58d2004 	str	r2, [sp, #4]
   10b7c:	e58d4000 	str	r4, [sp]
   10b80:	e3a02004 	mov	r2, #4
   10b84:	e1a01008 	mov	r1, r8
   10b88:	e2844001 	add	r4, r4, #1
   10b8c:	ebffe4bd 	bl	9e88 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   10b90:	e3540040 	cmp	r4, #64	; 0x40
   10b94:	1affffed 	bne	10b50 <debug_stacktrace(unsigned int const*, char const*)+0x38>
   10b98:	e28dd00c 	add	sp, sp, #12
   10b9c:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   10ba0:	00014af4 	.word	0x00014af4
   10ba4:	00007fff 	.word	0x00007fff
   10ba8:	000130b4 	.word	0x000130b4
   10bac:	00014b7c 	.word	0x00014b7c

00010bb0 <DelayLoop>:
   10bb0:	e2500001 	subs	r0, r0, #1
   10bb4:	8afffffd 	bhi	10bb0 <DelayLoop>
   10bb8:	e1a0f00e 	mov	pc, lr

00010bbc <CDevice::~CDevice()>:
   10bbc:	e12fff1e 	bx	lr

00010bc0 <CDevice::Read(void*, unsigned int)>:
   10bc0:	e3e00000 	mvn	r0, #0
   10bc4:	e12fff1e 	bx	lr

00010bc8 <CDevice::Seek(unsigned long long)>:
   10bc8:	e3e00000 	mvn	r0, #0
   10bcc:	e3e01000 	mvn	r1, #0
   10bd0:	e12fff1e 	bx	lr

00010bd4 <CDevice::~CDevice()>:
   10bd4:	e92d4010 	push	{r4, lr}
   10bd8:	e1a04000 	mov	r4, r0
   10bdc:	e3a01004 	mov	r1, #4
   10be0:	ebfffbee 	bl	fba0 <operator delete(void*, unsigned int)>
   10be4:	e1a00004 	mov	r0, r4
   10be8:	e8bd8010 	pop	{r4, pc}

00010bec <CDevice::CDevice()>:
   10bec:	e59f3004 	ldr	r3, [pc, #4]	; 10bf8 <CDevice::CDevice()+0xc>
   10bf0:	e5803000 	str	r3, [r0]
   10bf4:	e12fff1e 	bx	lr
   10bf8:	00014b98 	.word	0x00014b98

00010bfc <CDMAChannel::CDMAChannel(unsigned int, CInterruptSystem*)>:
   10bfc:	e92d4070 	push	{r4, r5, r6, lr}
   10c00:	e1a06001 	mov	r6, r1
   10c04:	e1a04000 	mov	r4, r0
   10c08:	e1a05002 	mov	r5, r2
   10c0c:	ebffe848 	bl	ad34 <CMachineInfo::Get()>
   10c10:	e1a01006 	mov	r1, r6
   10c14:	ebffe7de 	bl	ab94 <CMachineInfo::AllocateDMAChannel(unsigned int)>
   10c18:	e3a03000 	mov	r3, #0
   10c1c:	e5840000 	str	r0, [r4]
   10c20:	e584500c 	str	r5, [r4, #12]
   10c24:	e5843004 	str	r3, [r4, #4]
   10c28:	e5843008 	str	r3, [r4, #8]
   10c2c:	e5c43010 	strb	r3, [r4, #16]
   10c30:	e5843014 	str	r3, [r4, #20]
   10c34:	e5843018 	str	r3, [r4, #24]
   10c38:	e5c4301c 	strb	r3, [r4, #28]
   10c3c:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   10c40:	e5943000 	ldr	r3, [r4]
   10c44:	e3530080 	cmp	r3, #128	; 0x80
   10c48:	0a000028 	beq	10cf0 <CDMAChannel::CDMAChannel(unsigned int, CInterruptSystem*)+0xf4>
   10c4c:	e353000c 	cmp	r3, #12
   10c50:	8a000021 	bhi	10cdc <CDMAChannel::CDMAChannel(unsigned int, CInterruptSystem*)+0xe0>
   10c54:	e3a0003f 	mov	r0, #63	; 0x3f
   10c58:	ebfffbcd 	bl	fb94 <operator new[](unsigned int)>
   10c5c:	e3a0c000 	mov	ip, #0
   10c60:	e3a0e001 	mov	lr, #1
   10c64:	e280301f 	add	r3, r0, #31
   10c68:	e3c3301f 	bic	r3, r3, #31
   10c6c:	e59f1094 	ldr	r1, [pc, #148]	; 10d08 <CDMAChannel::CDMAChannel(unsigned int, CInterruptSystem*)+0x10c>
   10c70:	e583c018 	str	ip, [r3, #24]
   10c74:	e583c01c 	str	ip, [r3, #28]
   10c78:	e5912ff0 	ldr	r2, [r1, #4080]	; 0xff0
   10c7c:	e594c000 	ldr	ip, [r4]
   10c80:	e5840004 	str	r0, [r4, #4]
   10c84:	e1822c1e 	orr	r2, r2, lr, lsl ip
   10c88:	e5843008 	str	r3, [r4, #8]
   10c8c:	e3a00ffa 	mov	r0, #1000	; 0x3e8
   10c90:	e5812ff0 	str	r2, [r1, #4080]	; 0xff0
   10c94:	ebfff799 	bl	eb00 <CTimer::SimpleusDelay(unsigned int)>
   10c98:	e3a02102 	mov	r2, #-2147483648	; 0x80000000
   10c9c:	e5943000 	ldr	r3, [r4]
   10ca0:	e2833602 	add	r3, r3, #2097152	; 0x200000
   10ca4:	e2833070 	add	r3, r3, #112	; 0x70
   10ca8:	e1a03403 	lsl	r3, r3, #8
   10cac:	e5832000 	str	r2, [r3]
   10cb0:	e5943000 	ldr	r3, [r4]
   10cb4:	e2833602 	add	r3, r3, #2097152	; 0x200000
   10cb8:	e2833070 	add	r3, r3, #112	; 0x70
   10cbc:	e1a03403 	lsl	r3, r3, #8
   10cc0:	e5932000 	ldr	r2, [r3]
   10cc4:	e3520000 	cmp	r2, #0
   10cc8:	bafffffc 	blt	10cc0 <CDMAChannel::CDMAChannel(unsigned int, CInterruptSystem*)+0xc4>
   10ccc:	e3a03000 	mov	r3, #0
   10cd0:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   10cd4:	e1a00004 	mov	r0, r4
   10cd8:	e8bd8070 	pop	{r4, r5, r6, pc}
   10cdc:	e59f1028 	ldr	r1, [pc, #40]	; 10d0c <CDMAChannel::CDMAChannel(unsigned int, CInterruptSystem*)+0x110>
   10ce0:	e3a02056 	mov	r2, #86	; 0x56
   10ce4:	e2810030 	add	r0, r1, #48	; 0x30
   10ce8:	ebfffd38 	bl	101d0 <assertion_failed>
   10cec:	eaffffd8 	b	10c54 <CDMAChannel::CDMAChannel(unsigned int, CInterruptSystem*)+0x58>
   10cf0:	e59f1014 	ldr	r1, [pc, #20]	; 10d0c <CDMAChannel::CDMAChannel(unsigned int, CInterruptSystem*)+0x110>
   10cf4:	e3a02055 	mov	r2, #85	; 0x55
   10cf8:	e2810010 	add	r0, r1, #16
   10cfc:	ebfffd33 	bl	101d0 <assertion_failed>
   10d00:	e5943000 	ldr	r3, [r4]
   10d04:	eaffffd0 	b	10c4c <CDMAChannel::CDMAChannel(unsigned int, CInterruptSystem*)+0x50>
   10d08:	20007000 	.word	0x20007000
   10d0c:	00014bac 	.word	0x00014bac

00010d10 <CDMAChannel::~CDMAChannel()>:
   10d10:	e92d4010 	push	{r4, lr}
   10d14:	e3a03000 	mov	r3, #0
   10d18:	e1a04000 	mov	r4, r0
   10d1c:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   10d20:	e5903000 	ldr	r3, [r0]
   10d24:	e353000c 	cmp	r3, #12
   10d28:	8a00002c 	bhi	10de0 <CDMAChannel::~CDMAChannel()+0xd0>
   10d2c:	e3a02102 	mov	r2, #-2147483648	; 0x80000000
   10d30:	e2833602 	add	r3, r3, #2097152	; 0x200000
   10d34:	e2833070 	add	r3, r3, #112	; 0x70
   10d38:	e1a03403 	lsl	r3, r3, #8
   10d3c:	e5832000 	str	r2, [r3]
   10d40:	e5940000 	ldr	r0, [r4]
   10d44:	e2802602 	add	r2, r0, #2097152	; 0x200000
   10d48:	e2822070 	add	r2, r2, #112	; 0x70
   10d4c:	e1a02402 	lsl	r2, r2, #8
   10d50:	e5923000 	ldr	r3, [r2]
   10d54:	e3530000 	cmp	r3, #0
   10d58:	bafffffc 	blt	10d50 <CDMAChannel::~CDMAChannel()+0x40>
   10d5c:	e3a0c001 	mov	ip, #1
   10d60:	e59f10ac 	ldr	r1, [pc, #172]	; 10e14 <CDMAChannel::~CDMAChannel()+0x104>
   10d64:	e3a02000 	mov	r2, #0
   10d68:	e5913ff0 	ldr	r3, [r1, #4080]	; 0xff0
   10d6c:	e1c3301c 	bic	r3, r3, ip, lsl r0
   10d70:	e5813ff0 	str	r3, [r1, #4080]	; 0xff0
   10d74:	ee072fba 	mcr	15, 0, r2, cr7, cr10, {5}
   10d78:	e594000c 	ldr	r0, [r4, #12]
   10d7c:	e5842014 	str	r2, [r4, #20]
   10d80:	e1500002 	cmp	r0, r2
   10d84:	0a000004 	beq	10d9c <CDMAChannel::~CDMAChannel()+0x8c>
   10d88:	e5d43010 	ldrb	r3, [r4, #16]
   10d8c:	e1530002 	cmp	r3, r2
   10d90:	1a00000c 	bne	10dc8 <CDMAChannel::~CDMAChannel()+0xb8>
   10d94:	e3a03000 	mov	r3, #0
   10d98:	e584300c 	str	r3, [r4, #12]
   10d9c:	ebffe7e4 	bl	ad34 <CMachineInfo::Get()>
   10da0:	e5941000 	ldr	r1, [r4]
   10da4:	ebffe7b7 	bl	ac88 <CMachineInfo::FreeDMAChannel(unsigned int)>
   10da8:	e3a03000 	mov	r3, #0
   10dac:	e5940004 	ldr	r0, [r4, #4]
   10db0:	e5843008 	str	r3, [r4, #8]
   10db4:	e1500003 	cmp	r0, r3
   10db8:	0a000000 	beq	10dc0 <CDMAChannel::~CDMAChannel()+0xb0>
   10dbc:	ebfffb76 	bl	fb9c <operator delete[](void*)>
   10dc0:	e1a00004 	mov	r0, r4
   10dc4:	e8bd8010 	pop	{r4, pc}
   10dc8:	e5941000 	ldr	r1, [r4]
   10dcc:	e351000c 	cmp	r1, #12
   10dd0:	8a000008 	bhi	10df8 <CDMAChannel::~CDMAChannel()+0xe8>
   10dd4:	e2811010 	add	r1, r1, #16
   10dd8:	eb0004f2 	bl	121a8 <CInterruptSystem::DisconnectIRQ(unsigned int)>
   10ddc:	eaffffec 	b	10d94 <CDMAChannel::~CDMAChannel()+0x84>
   10de0:	e59f1030 	ldr	r1, [pc, #48]	; 10e18 <CDMAChannel::~CDMAChannel()+0x108>
   10de4:	e3a02070 	mov	r2, #112	; 0x70
   10de8:	e2810030 	add	r0, r1, #48	; 0x30
   10dec:	ebfffcf7 	bl	101d0 <assertion_failed>
   10df0:	e5943000 	ldr	r3, [r4]
   10df4:	eaffffcc 	b	10d2c <CDMAChannel::~CDMAChannel()+0x1c>
   10df8:	e59f1018 	ldr	r1, [pc, #24]	; 10e18 <CDMAChannel::~CDMAChannel()+0x108>
   10dfc:	e3a02082 	mov	r2, #130	; 0x82
   10e00:	e281004c 	add	r0, r1, #76	; 0x4c
   10e04:	ebfffcf1 	bl	101d0 <assertion_failed>
   10e08:	e594000c 	ldr	r0, [r4, #12]
   10e0c:	e5941000 	ldr	r1, [r4]
   10e10:	eaffffef 	b	10dd4 <CDMAChannel::~CDMAChannel()+0xc4>
   10e14:	20007000 	.word	0x20007000
   10e18:	00014bac 	.word	0x00014bac

00010e1c <CDMAChannel::SetupMemCopy(void*, void const*, unsigned int, unsigned int, bool)>:
   10e1c:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   10e20:	e2518000 	subs	r8, r1, #0
   10e24:	e1a05000 	mov	r5, r0
   10e28:	e1a06002 	mov	r6, r2
   10e2c:	e1a09003 	mov	r9, r3
   10e30:	e59d4020 	ldr	r4, [sp, #32]
   10e34:	e5dd7024 	ldrb	r7, [sp, #36]	; 0x24
   10e38:	0a00006a 	beq	10fe8 <CDMAChannel::SetupMemCopy(void*, void const*, unsigned int, unsigned int, bool)+0x1cc>
   10e3c:	e3560000 	cmp	r6, #0
   10e40:	0a000063 	beq	10fd4 <CDMAChannel::SetupMemCopy(void*, void const*, unsigned int, unsigned int, bool)+0x1b8>
   10e44:	e3590000 	cmp	r9, #0
   10e48:	0a000041 	beq	10f54 <CDMAChannel::SetupMemCopy(void*, void const*, unsigned int, unsigned int, bool)+0x138>
   10e4c:	e354000f 	cmp	r4, #15
   10e50:	8a000045 	bhi	10f6c <CDMAChannel::SetupMemCopy(void*, void const*, unsigned int, unsigned int, bool)+0x150>
   10e54:	e5953008 	ldr	r3, [r5, #8]
   10e58:	e3530000 	cmp	r3, #0
   10e5c:	0a000049 	beq	10f88 <CDMAChannel::SetupMemCopy(void*, void const*, unsigned int, unsigned int, bool)+0x16c>
   10e60:	e3790107 	cmn	r9, #-1073741823	; 0xc0000001
   10e64:	8a00004d 	bhi	10fa0 <CDMAChannel::SetupMemCopy(void*, void const*, unsigned int, unsigned int, bool)+0x184>
   10e68:	e5953000 	ldr	r3, [r5]
   10e6c:	e2833602 	add	r3, r3, #2097152	; 0x200000
   10e70:	e2833070 	add	r3, r3, #112	; 0x70
   10e74:	e1a03403 	lsl	r3, r3, #8
   10e78:	e5933020 	ldr	r3, [r3, #32]
   10e7c:	e1a03e23 	lsr	r3, r3, #28
   10e80:	e2233001 	eor	r3, r3, #1
   10e84:	e3590801 	cmp	r9, #65536	; 0x10000
   10e88:	33833001 	orrcc	r3, r3, #1
   10e8c:	e3130001 	tst	r3, #1
   10e90:	0a000059 	beq	10ffc <CDMAChannel::SetupMemCopy(void*, void const*, unsigned int, unsigned int, bool)+0x1e0>
   10e94:	e3a03000 	mov	r3, #0
   10e98:	e1a01604 	lsl	r1, r4, #12
   10e9c:	e5952008 	ldr	r2, [r5, #8]
   10ea0:	e3811e33 	orr	r1, r1, #816	; 0x330
   10ea4:	e1a00421 	lsr	r0, r1, #8
   10ea8:	e3c6c103 	bic	ip, r6, #-1073741824	; 0xc0000000
   10eac:	e38cc101 	orr	ip, ip, #1073741824	; 0x40000000
   10eb0:	e5c20001 	strb	r0, [r2, #1]
   10eb4:	e5c21000 	strb	r1, [r2]
   10eb8:	e1a00821 	lsr	r0, r1, #16
   10ebc:	e1a01c21 	lsr	r1, r1, #24
   10ec0:	e5c20002 	strb	r0, [r2, #2]
   10ec4:	e5c21003 	strb	r1, [r2, #3]
   10ec8:	e3c80103 	bic	r0, r8, #-1073741824	; 0xc0000000
   10ecc:	e1a0142c 	lsr	r1, ip, #8
   10ed0:	e3800101 	orr	r0, r0, #1073741824	; 0x40000000
   10ed4:	e5c21005 	strb	r1, [r2, #5]
   10ed8:	e1a0182c 	lsr	r1, ip, #16
   10edc:	e5c21006 	strb	r1, [r2, #6]
   10ee0:	e1a01420 	lsr	r1, r0, #8
   10ee4:	e5c21009 	strb	r1, [r2, #9]
   10ee8:	e1a01820 	lsr	r1, r0, #16
   10eec:	e5c20008 	strb	r0, [r2, #8]
   10ef0:	e5c2100a 	strb	r1, [r2, #10]
   10ef4:	e1a00c20 	lsr	r0, r0, #24
   10ef8:	e1a01429 	lsr	r1, r9, #8
   10efc:	e5c2c004 	strb	ip, [r2, #4]
   10f00:	e5c2000b 	strb	r0, [r2, #11]
   10f04:	e1a0cc2c 	lsr	ip, ip, #24
   10f08:	e1a00829 	lsr	r0, r9, #16
   10f0c:	e5c2100d 	strb	r1, [r2, #13]
   10f10:	e1570003 	cmp	r7, r3
   10f14:	e1a01c29 	lsr	r1, r9, #24
   10f18:	e5c2900c 	strb	r9, [r2, #12]
   10f1c:	e5c2c007 	strb	ip, [r2, #7]
   10f20:	e5c2000e 	strb	r0, [r2, #14]
   10f24:	e5c2100f 	strb	r1, [r2, #15]
   10f28:	e5c23010 	strb	r3, [r2, #16]
   10f2c:	e5c23011 	strb	r3, [r2, #17]
   10f30:	e5c23012 	strb	r3, [r2, #18]
   10f34:	e5c23013 	strb	r3, [r2, #19]
   10f38:	e5c23014 	strb	r3, [r2, #20]
   10f3c:	e5c23015 	strb	r3, [r2, #21]
   10f40:	e5c23016 	strb	r3, [r2, #22]
   10f44:	e5c23017 	strb	r3, [r2, #23]
   10f48:	1a000019 	bne	10fb4 <CDMAChannel::SetupMemCopy(void*, void const*, unsigned int, unsigned int, bool)+0x198>
   10f4c:	e5857020 	str	r7, [r5, #32]
   10f50:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   10f54:	e59f10b4 	ldr	r1, [pc, #180]	; 11010 <CDMAChannel::SetupMemCopy(void*, void const*, unsigned int, unsigned int, bool)+0x1f4>
   10f58:	e3a02096 	mov	r2, #150	; 0x96
   10f5c:	e2810084 	add	r0, r1, #132	; 0x84
   10f60:	ebfffc9a 	bl	101d0 <assertion_failed>
   10f64:	e354000f 	cmp	r4, #15
   10f68:	9affffb9 	bls	10e54 <CDMAChannel::SetupMemCopy(void*, void const*, unsigned int, unsigned int, bool)+0x38>
   10f6c:	e59f109c 	ldr	r1, [pc, #156]	; 11010 <CDMAChannel::SetupMemCopy(void*, void const*, unsigned int, unsigned int, bool)+0x1f4>
   10f70:	e3a02097 	mov	r2, #151	; 0x97
   10f74:	e2810090 	add	r0, r1, #144	; 0x90
   10f78:	ebfffc94 	bl	101d0 <assertion_failed>
   10f7c:	e5953008 	ldr	r3, [r5, #8]
   10f80:	e3530000 	cmp	r3, #0
   10f84:	1affffb5 	bne	10e60 <CDMAChannel::SetupMemCopy(void*, void const*, unsigned int, unsigned int, bool)+0x44>
   10f88:	e59f1080 	ldr	r1, [pc, #128]	; 11010 <CDMAChannel::SetupMemCopy(void*, void const*, unsigned int, unsigned int, bool)+0x1f4>
   10f8c:	e3a02099 	mov	r2, #153	; 0x99
   10f90:	e28100a4 	add	r0, r1, #164	; 0xa4
   10f94:	ebfffc8d 	bl	101d0 <assertion_failed>
   10f98:	e3790107 	cmn	r9, #-1073741823	; 0xc0000001
   10f9c:	9affffb1 	bls	10e68 <CDMAChannel::SetupMemCopy(void*, void const*, unsigned int, unsigned int, bool)+0x4c>
   10fa0:	e59f1068 	ldr	r1, [pc, #104]	; 11010 <CDMAChannel::SetupMemCopy(void*, void const*, unsigned int, unsigned int, bool)+0x1f4>
   10fa4:	e3a0209a 	mov	r2, #154	; 0x9a
   10fa8:	e28100bc 	add	r0, r1, #188	; 0xbc
   10fac:	ebfffc87 	bl	101d0 <assertion_failed>
   10fb0:	eaffffac 	b	10e68 <CDMAChannel::SetupMemCopy(void*, void const*, unsigned int, unsigned int, bool)+0x4c>
   10fb4:	e1a00006 	mov	r0, r6
   10fb8:	e1a01009 	mov	r1, r9
   10fbc:	e1c582f0 	strd	r8, [r5, #32]
   10fc0:	ebfffadb 	bl	fb34 <CleanAndInvalidateDataCacheRange>
   10fc4:	e1a01009 	mov	r1, r9
   10fc8:	e1a00008 	mov	r0, r8
   10fcc:	e8bd47f0 	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   10fd0:	eafffad7 	b	fb34 <CleanAndInvalidateDataCacheRange>
   10fd4:	e59f1034 	ldr	r1, [pc, #52]	; 11010 <CDMAChannel::SetupMemCopy(void*, void const*, unsigned int, unsigned int, bool)+0x1f4>
   10fd8:	e3a02095 	mov	r2, #149	; 0x95
   10fdc:	e2810074 	add	r0, r1, #116	; 0x74
   10fe0:	ebfffc7a 	bl	101d0 <assertion_failed>
   10fe4:	eaffff96 	b	10e44 <CDMAChannel::SetupMemCopy(void*, void const*, unsigned int, unsigned int, bool)+0x28>
   10fe8:	e59f1020 	ldr	r1, [pc, #32]	; 11010 <CDMAChannel::SetupMemCopy(void*, void const*, unsigned int, unsigned int, bool)+0x1f4>
   10fec:	e3a02094 	mov	r2, #148	; 0x94
   10ff0:	e2810060 	add	r0, r1, #96	; 0x60
   10ff4:	ebfffc75 	bl	101d0 <assertion_failed>
   10ff8:	eaffff8f 	b	10e3c <CDMAChannel::SetupMemCopy(void*, void const*, unsigned int, unsigned int, bool)+0x20>
   10ffc:	e59f100c 	ldr	r1, [pc, #12]	; 11010 <CDMAChannel::SetupMemCopy(void*, void const*, unsigned int, unsigned int, bool)+0x1f4>
   11000:	e3a0209c 	mov	r2, #156	; 0x9c
   11004:	e28100d4 	add	r0, r1, #212	; 0xd4
   11008:	ebfffc70 	bl	101d0 <assertion_failed>
   1100c:	eaffffa0 	b	10e94 <CDMAChannel::SetupMemCopy(void*, void const*, unsigned int, unsigned int, bool)+0x78>
   11010:	00014bac 	.word	0x00014bac

00011014 <CDMAChannel::SetupIORead(void*, unsigned int, unsigned int, TDREQ)>:
   11014:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   11018:	e2517000 	subs	r7, r1, #0
   1101c:	e1a06000 	mov	r6, r0
   11020:	e1a04002 	mov	r4, r2
   11024:	e1a05003 	mov	r5, r3
   11028:	e5dd8018 	ldrb	r8, [sp, #24]
   1102c:	0a000061 	beq	111b8 <CDMAChannel::SetupIORead(void*, unsigned int, unsigned int, TDREQ)+0x1a4>
   11030:	e3550000 	cmp	r5, #0
   11034:	0a000046 	beq	11154 <CDMAChannel::SetupIORead(void*, unsigned int, unsigned int, TDREQ)+0x140>
   11038:	e3750107 	cmn	r5, #-1073741823	; 0xc0000001
   1103c:	8a00003f 	bhi	11140 <CDMAChannel::SetupIORead(void*, unsigned int, unsigned int, TDREQ)+0x12c>
   11040:	e5963000 	ldr	r3, [r6]
   11044:	e2833602 	add	r3, r3, #2097152	; 0x200000
   11048:	e2833070 	add	r3, r3, #112	; 0x70
   1104c:	e1a03403 	lsl	r3, r3, #8
   11050:	e5933020 	ldr	r3, [r3, #32]
   11054:	e1a03e23 	lsr	r3, r3, #28
   11058:	e2233001 	eor	r3, r3, #1
   1105c:	e3550801 	cmp	r5, #65536	; 0x10000
   11060:	33833001 	orrcc	r3, r3, #1
   11064:	e3130001 	tst	r3, #1
   11068:	0a000057 	beq	111cc <CDMAChannel::SetupIORead(void*, unsigned int, unsigned int, TDREQ)+0x1b8>
   1106c:	e3d444ff 	bics	r4, r4, #-16777216	; 0xff000000
   11070:	0a000042 	beq	11180 <CDMAChannel::SetupIORead(void*, unsigned int, unsigned int, TDREQ)+0x16c>
   11074:	e5961008 	ldr	r1, [r6, #8]
   11078:	e284447e 	add	r4, r4, #2113929216	; 0x7e000000
   1107c:	e3510000 	cmp	r1, #0
   11080:	0a000046 	beq	111a0 <CDMAChannel::SetupIORead(void*, unsigned int, unsigned int, TDREQ)+0x18c>
   11084:	e3a03000 	mov	r3, #0
   11088:	e59f0150 	ldr	r0, [pc, #336]	; 111e0 <CDMAChannel::SetupIORead(void*, unsigned int, unsigned int, TDREQ)+0x1cc>
   1108c:	e3c72103 	bic	r2, r7, #-1073741824	; 0xc0000000
   11090:	e1800808 	orr	r0, r0, r8, lsl #16
   11094:	e1a0c420 	lsr	ip, r0, #8
   11098:	e3822101 	orr	r2, r2, #1073741824	; 0x40000000
   1109c:	e5c10000 	strb	r0, [r1]
   110a0:	e5c1c001 	strb	ip, [r1, #1]
   110a4:	e1a0c820 	lsr	ip, r0, #16
   110a8:	e1a00c20 	lsr	r0, r0, #24
   110ac:	e5c10003 	strb	r0, [r1, #3]
   110b0:	e1a00422 	lsr	r0, r2, #8
   110b4:	e5c12008 	strb	r2, [r1, #8]
   110b8:	e5c10009 	strb	r0, [r1, #9]
   110bc:	e1a00822 	lsr	r0, r2, #16
   110c0:	e1a02c22 	lsr	r2, r2, #24
   110c4:	e5c14004 	strb	r4, [r1, #4]
   110c8:	e5c1c002 	strb	ip, [r1, #2]
   110cc:	e5c1000a 	strb	r0, [r1, #10]
   110d0:	e5c1200b 	strb	r2, [r1, #11]
   110d4:	e5c13010 	strb	r3, [r1, #16]
   110d8:	e5c13011 	strb	r3, [r1, #17]
   110dc:	e5c13012 	strb	r3, [r1, #18]
   110e0:	e5c13013 	strb	r3, [r1, #19]
   110e4:	e5c13014 	strb	r3, [r1, #20]
   110e8:	e5c13015 	strb	r3, [r1, #21]
   110ec:	e5c13016 	strb	r3, [r1, #22]
   110f0:	e5c13017 	strb	r3, [r1, #23]
   110f4:	e1a0e424 	lsr	lr, r4, #8
   110f8:	e1a00425 	lsr	r0, r5, #8
   110fc:	e1a0c824 	lsr	ip, r4, #16
   11100:	e1a02825 	lsr	r2, r5, #16
   11104:	e1a04c24 	lsr	r4, r4, #24
   11108:	e1a03c25 	lsr	r3, r5, #24
   1110c:	e5c1500c 	strb	r5, [r1, #12]
   11110:	e5c1e005 	strb	lr, [r1, #5]
   11114:	e5c14007 	strb	r4, [r1, #7]
   11118:	e5c1000d 	strb	r0, [r1, #13]
   1111c:	e5c1c006 	strb	ip, [r1, #6]
   11120:	e5c1200e 	strb	r2, [r1, #14]
   11124:	e5c1300f 	strb	r3, [r1, #15]
   11128:	e1a00007 	mov	r0, r7
   1112c:	e1a01005 	mov	r1, r5
   11130:	e5867020 	str	r7, [r6, #32]
   11134:	e5865024 	str	r5, [r6, #36]	; 0x24
   11138:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   1113c:	eafffa7c 	b	fb34 <CleanAndInvalidateDataCacheRange>
   11140:	e59f109c 	ldr	r1, [pc, #156]	; 111e4 <CDMAChannel::SetupIORead(void*, unsigned int, unsigned int, TDREQ)+0x1d0>
   11144:	e3a020bb 	mov	r2, #187	; 0xbb
   11148:	e28100bc 	add	r0, r1, #188	; 0xbc
   1114c:	ebfffc1f 	bl	101d0 <assertion_failed>
   11150:	eaffffba 	b	11040 <CDMAChannel::SetupIORead(void*, unsigned int, unsigned int, TDREQ)+0x2c>
   11154:	e59f1088 	ldr	r1, [pc, #136]	; 111e4 <CDMAChannel::SetupIORead(void*, unsigned int, unsigned int, TDREQ)+0x1d0>
   11158:	e3a020ba 	mov	r2, #186	; 0xba
   1115c:	e2810084 	add	r0, r1, #132	; 0x84
   11160:	ebfffc1a 	bl	101d0 <assertion_failed>
   11164:	e5963000 	ldr	r3, [r6]
   11168:	e3d444ff 	bics	r4, r4, #-16777216	; 0xff000000
   1116c:	e2833602 	add	r3, r3, #2097152	; 0x200000
   11170:	e2833070 	add	r3, r3, #112	; 0x70
   11174:	e1a03403 	lsl	r3, r3, #8
   11178:	e5933020 	ldr	r3, [r3, #32]
   1117c:	1affffbc 	bne	11074 <CDMAChannel::SetupIORead(void*, unsigned int, unsigned int, TDREQ)+0x60>
   11180:	e59f105c 	ldr	r1, [pc, #92]	; 111e4 <CDMAChannel::SetupIORead(void*, unsigned int, unsigned int, TDREQ)+0x1d0>
   11184:	e3a020c0 	mov	r2, #192	; 0xc0
   11188:	e2810f4b 	add	r0, r1, #300	; 0x12c
   1118c:	ebfffc0f 	bl	101d0 <assertion_failed>
   11190:	e5961008 	ldr	r1, [r6, #8]
   11194:	e284447e 	add	r4, r4, #2113929216	; 0x7e000000
   11198:	e3510000 	cmp	r1, #0
   1119c:	1affffb8 	bne	11084 <CDMAChannel::SetupIORead(void*, unsigned int, unsigned int, TDREQ)+0x70>
   111a0:	e59f103c 	ldr	r1, [pc, #60]	; 111e4 <CDMAChannel::SetupIORead(void*, unsigned int, unsigned int, TDREQ)+0x1d0>
   111a4:	e3a020c3 	mov	r2, #195	; 0xc3
   111a8:	e28100a4 	add	r0, r1, #164	; 0xa4
   111ac:	ebfffc07 	bl	101d0 <assertion_failed>
   111b0:	e5961008 	ldr	r1, [r6, #8]
   111b4:	eaffffb2 	b	11084 <CDMAChannel::SetupIORead(void*, unsigned int, unsigned int, TDREQ)+0x70>
   111b8:	e59f1024 	ldr	r1, [pc, #36]	; 111e4 <CDMAChannel::SetupIORead(void*, unsigned int, unsigned int, TDREQ)+0x1d0>
   111bc:	e3a020b9 	mov	r2, #185	; 0xb9
   111c0:	e2810060 	add	r0, r1, #96	; 0x60
   111c4:	ebfffc01 	bl	101d0 <assertion_failed>
   111c8:	eaffff98 	b	11030 <CDMAChannel::SetupIORead(void*, unsigned int, unsigned int, TDREQ)+0x1c>
   111cc:	e59f1010 	ldr	r1, [pc, #16]	; 111e4 <CDMAChannel::SetupIORead(void*, unsigned int, unsigned int, TDREQ)+0x1d0>
   111d0:	e3a020bd 	mov	r2, #189	; 0xbd
   111d4:	e28100d4 	add	r0, r1, #212	; 0xd4
   111d8:	ebfffbfc 	bl	101d0 <assertion_failed>
   111dc:	eaffffa2 	b	1106c <CDMAChannel::SetupIORead(void*, unsigned int, unsigned int, TDREQ)+0x58>
   111e0:	00000438 	.word	0x00000438
   111e4:	00014bac 	.word	0x00014bac

000111e8 <CDMAChannel::SetupIOWrite(unsigned int, void const*, unsigned int, TDREQ)>:
   111e8:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   111ec:	e2527000 	subs	r7, r2, #0
   111f0:	e1a06000 	mov	r6, r0
   111f4:	e1a04001 	mov	r4, r1
   111f8:	e1a08003 	mov	r8, r3
   111fc:	e5dd5018 	ldrb	r5, [sp, #24]
   11200:	0a000060 	beq	11388 <CDMAChannel::SetupIOWrite(unsigned int, void const*, unsigned int, TDREQ)+0x1a0>
   11204:	e3580000 	cmp	r8, #0
   11208:	0a000045 	beq	11324 <CDMAChannel::SetupIOWrite(unsigned int, void const*, unsigned int, TDREQ)+0x13c>
   1120c:	e3780107 	cmn	r8, #-1073741823	; 0xc0000001
   11210:	8a00003e 	bhi	11310 <CDMAChannel::SetupIOWrite(unsigned int, void const*, unsigned int, TDREQ)+0x128>
   11214:	e5963000 	ldr	r3, [r6]
   11218:	e2833602 	add	r3, r3, #2097152	; 0x200000
   1121c:	e2833070 	add	r3, r3, #112	; 0x70
   11220:	e1a03403 	lsl	r3, r3, #8
   11224:	e5933020 	ldr	r3, [r3, #32]
   11228:	e1a03e23 	lsr	r3, r3, #28
   1122c:	e2233001 	eor	r3, r3, #1
   11230:	e3580801 	cmp	r8, #65536	; 0x10000
   11234:	33833001 	orrcc	r3, r3, #1
   11238:	e3130001 	tst	r3, #1
   1123c:	0a000056 	beq	1139c <CDMAChannel::SetupIOWrite(unsigned int, void const*, unsigned int, TDREQ)+0x1b4>
   11240:	e3d444ff 	bics	r4, r4, #-16777216	; 0xff000000
   11244:	0a000041 	beq	11350 <CDMAChannel::SetupIOWrite(unsigned int, void const*, unsigned int, TDREQ)+0x168>
   11248:	e5962008 	ldr	r2, [r6, #8]
   1124c:	e284447e 	add	r4, r4, #2113929216	; 0x7e000000
   11250:	e3520000 	cmp	r2, #0
   11254:	0a000045 	beq	11370 <CDMAChannel::SetupIOWrite(unsigned int, void const*, unsigned int, TDREQ)+0x188>
   11258:	e3a03000 	mov	r3, #0
   1125c:	e1a01805 	lsl	r1, r5, #16
   11260:	e3811fd2 	orr	r1, r1, #840	; 0x348
   11264:	e1a00421 	lsr	r0, r1, #8
   11268:	e3c7c103 	bic	ip, r7, #-1073741824	; 0xc0000000
   1126c:	e38cc101 	orr	ip, ip, #1073741824	; 0x40000000
   11270:	e5c21000 	strb	r1, [r2]
   11274:	e5c20001 	strb	r0, [r2, #1]
   11278:	e1a00821 	lsr	r0, r1, #16
   1127c:	e1a01c21 	lsr	r1, r1, #24
   11280:	e5c21003 	strb	r1, [r2, #3]
   11284:	e1a0142c 	lsr	r1, ip, #8
   11288:	e5c21005 	strb	r1, [r2, #5]
   1128c:	e1a0182c 	lsr	r1, ip, #16
   11290:	e1a0e424 	lsr	lr, r4, #8
   11294:	e5c2c004 	strb	ip, [r2, #4]
   11298:	e5c21006 	strb	r1, [r2, #6]
   1129c:	e1a0cc2c 	lsr	ip, ip, #24
   112a0:	e1a01824 	lsr	r1, r4, #16
   112a4:	e5c24008 	strb	r4, [r2, #8]
   112a8:	e5c2c007 	strb	ip, [r2, #7]
   112ac:	e1a04c24 	lsr	r4, r4, #24
   112b0:	e5c2e009 	strb	lr, [r2, #9]
   112b4:	e5c2100a 	strb	r1, [r2, #10]
   112b8:	e1a0e428 	lsr	lr, r8, #8
   112bc:	e1a01c28 	lsr	r1, r8, #24
   112c0:	e1a0c828 	lsr	ip, r8, #16
   112c4:	e5c2800c 	strb	r8, [r2, #12]
   112c8:	e5c20002 	strb	r0, [r2, #2]
   112cc:	e5c2400b 	strb	r4, [r2, #11]
   112d0:	e5c2e00d 	strb	lr, [r2, #13]
   112d4:	e5c2100f 	strb	r1, [r2, #15]
   112d8:	e1a00007 	mov	r0, r7
   112dc:	e5c23010 	strb	r3, [r2, #16]
   112e0:	e5c23011 	strb	r3, [r2, #17]
   112e4:	e5c23012 	strb	r3, [r2, #18]
   112e8:	e5c23013 	strb	r3, [r2, #19]
   112ec:	e5c23014 	strb	r3, [r2, #20]
   112f0:	e5c23015 	strb	r3, [r2, #21]
   112f4:	e5c23016 	strb	r3, [r2, #22]
   112f8:	e5c23017 	strb	r3, [r2, #23]
   112fc:	e5c2c00e 	strb	ip, [r2, #14]
   11300:	e1a01008 	mov	r1, r8
   11304:	e5863020 	str	r3, [r6, #32]
   11308:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   1130c:	eafffa08 	b	fb34 <CleanAndInvalidateDataCacheRange>
   11310:	e59f1098 	ldr	r1, [pc, #152]	; 113b0 <CDMAChannel::SetupIOWrite(unsigned int, void const*, unsigned int, TDREQ)+0x1c8>
   11314:	e3a020da 	mov	r2, #218	; 0xda
   11318:	e28100bc 	add	r0, r1, #188	; 0xbc
   1131c:	ebfffbab 	bl	101d0 <assertion_failed>
   11320:	eaffffbb 	b	11214 <CDMAChannel::SetupIOWrite(unsigned int, void const*, unsigned int, TDREQ)+0x2c>
   11324:	e59f1084 	ldr	r1, [pc, #132]	; 113b0 <CDMAChannel::SetupIOWrite(unsigned int, void const*, unsigned int, TDREQ)+0x1c8>
   11328:	e3a020d9 	mov	r2, #217	; 0xd9
   1132c:	e2810084 	add	r0, r1, #132	; 0x84
   11330:	ebfffba6 	bl	101d0 <assertion_failed>
   11334:	e5963000 	ldr	r3, [r6]
   11338:	e3d444ff 	bics	r4, r4, #-16777216	; 0xff000000
   1133c:	e2833602 	add	r3, r3, #2097152	; 0x200000
   11340:	e2833070 	add	r3, r3, #112	; 0x70
   11344:	e1a03403 	lsl	r3, r3, #8
   11348:	e5933020 	ldr	r3, [r3, #32]
   1134c:	1affffbd 	bne	11248 <CDMAChannel::SetupIOWrite(unsigned int, void const*, unsigned int, TDREQ)+0x60>
   11350:	e59f1058 	ldr	r1, [pc, #88]	; 113b0 <CDMAChannel::SetupIOWrite(unsigned int, void const*, unsigned int, TDREQ)+0x1c8>
   11354:	e3a020df 	mov	r2, #223	; 0xdf
   11358:	e2810f4b 	add	r0, r1, #300	; 0x12c
   1135c:	ebfffb9b 	bl	101d0 <assertion_failed>
   11360:	e5962008 	ldr	r2, [r6, #8]
   11364:	e284447e 	add	r4, r4, #2113929216	; 0x7e000000
   11368:	e3520000 	cmp	r2, #0
   1136c:	1affffb9 	bne	11258 <CDMAChannel::SetupIOWrite(unsigned int, void const*, unsigned int, TDREQ)+0x70>
   11370:	e59f1038 	ldr	r1, [pc, #56]	; 113b0 <CDMAChannel::SetupIOWrite(unsigned int, void const*, unsigned int, TDREQ)+0x1c8>
   11374:	e3a020e2 	mov	r2, #226	; 0xe2
   11378:	e28100a4 	add	r0, r1, #164	; 0xa4
   1137c:	ebfffb93 	bl	101d0 <assertion_failed>
   11380:	e5962008 	ldr	r2, [r6, #8]
   11384:	eaffffb3 	b	11258 <CDMAChannel::SetupIOWrite(unsigned int, void const*, unsigned int, TDREQ)+0x70>
   11388:	e59f1020 	ldr	r1, [pc, #32]	; 113b0 <CDMAChannel::SetupIOWrite(unsigned int, void const*, unsigned int, TDREQ)+0x1c8>
   1138c:	e3a020d8 	mov	r2, #216	; 0xd8
   11390:	e2810074 	add	r0, r1, #116	; 0x74
   11394:	ebfffb8d 	bl	101d0 <assertion_failed>
   11398:	eaffff99 	b	11204 <CDMAChannel::SetupIOWrite(unsigned int, void const*, unsigned int, TDREQ)+0x1c>
   1139c:	e59f100c 	ldr	r1, [pc, #12]	; 113b0 <CDMAChannel::SetupIOWrite(unsigned int, void const*, unsigned int, TDREQ)+0x1c8>
   113a0:	e3a020dc 	mov	r2, #220	; 0xdc
   113a4:	e28100d4 	add	r0, r1, #212	; 0xd4
   113a8:	ebfffb88 	bl	101d0 <assertion_failed>
   113ac:	eaffffa3 	b	11240 <CDMAChannel::SetupIOWrite(unsigned int, void const*, unsigned int, TDREQ)+0x58>
   113b0:	00014bac 	.word	0x00014bac

000113b4 <CDMAChannel::SetupMemCopy2D(void*, void const*, unsigned int, unsigned int, unsigned int, unsigned int)>:
   113b4:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   113b8:	e251a000 	subs	sl, r1, #0
   113bc:	e1a07000 	mov	r7, r0
   113c0:	e1a08002 	mov	r8, r2
   113c4:	e1a05003 	mov	r5, r3
   113c8:	e59d6020 	ldr	r6, [sp, #32]
   113cc:	e59d4024 	ldr	r4, [sp, #36]	; 0x24
   113d0:	e59d9028 	ldr	r9, [sp, #40]	; 0x28
   113d4:	0a00007b 	beq	115c8 <CDMAChannel::SetupMemCopy2D(void*, void const*, unsigned int, unsigned int, unsigned int, unsigned int)+0x214>
   113d8:	e3580000 	cmp	r8, #0
   113dc:	0a00007f 	beq	115e0 <CDMAChannel::SetupMemCopy2D(void*, void const*, unsigned int, unsigned int, unsigned int, unsigned int)+0x22c>
   113e0:	e3550000 	cmp	r5, #0
   113e4:	0a000065 	beq	11580 <CDMAChannel::SetupMemCopy2D(void*, void const*, unsigned int, unsigned int, unsigned int, unsigned int)+0x1cc>
   113e8:	e3550801 	cmp	r5, #65536	; 0x10000
   113ec:	2a000058 	bcs	11554 <CDMAChannel::SetupMemCopy2D(void*, void const*, unsigned int, unsigned int, unsigned int, unsigned int)+0x1a0>
   113f0:	e3560000 	cmp	r6, #0
   113f4:	0a00005c 	beq	1156c <CDMAChannel::SetupMemCopy2D(void*, void const*, unsigned int, unsigned int, unsigned int, unsigned int)+0x1b8>
   113f8:	e3560901 	cmp	r6, #16384	; 0x4000
   113fc:	2a000043 	bcs	11510 <CDMAChannel::SetupMemCopy2D(void*, void const*, unsigned int, unsigned int, unsigned int, unsigned int)+0x15c>
   11400:	e3540801 	cmp	r4, #65536	; 0x10000
   11404:	2a000047 	bcs	11528 <CDMAChannel::SetupMemCopy2D(void*, void const*, unsigned int, unsigned int, unsigned int, unsigned int)+0x174>
   11408:	e359000f 	cmp	r9, #15
   1140c:	8a00004b 	bhi	11540 <CDMAChannel::SetupMemCopy2D(void*, void const*, unsigned int, unsigned int, unsigned int, unsigned int)+0x18c>
   11410:	e5973000 	ldr	r3, [r7]
   11414:	e2833602 	add	r3, r3, #2097152	; 0x200000
   11418:	e2833070 	add	r3, r3, #112	; 0x70
   1141c:	e1a03403 	lsl	r3, r3, #8
   11420:	e5933020 	ldr	r3, [r3, #32]
   11424:	e3130201 	tst	r3, #268435456	; 0x10000000
   11428:	1a000059 	bne	11594 <CDMAChannel::SetupMemCopy2D(void*, void const*, unsigned int, unsigned int, unsigned int, unsigned int)+0x1e0>
   1142c:	e5973008 	ldr	r3, [r7, #8]
   11430:	e3530000 	cmp	r3, #0
   11434:	0a00005d 	beq	115b0 <CDMAChannel::SetupMemCopy2D(void*, void const*, unsigned int, unsigned int, unsigned int, unsigned int)+0x1fc>
   11438:	e3a0c000 	mov	ip, #0
   1143c:	e3ca2103 	bic	r2, sl, #-1073741824	; 0xc0000000
   11440:	e3822101 	orr	r2, r2, #1073741824	; 0x40000000
   11444:	e59f01a8 	ldr	r0, [pc, #424]	; 115f4 <CDMAChannel::SetupMemCopy2D(void*, void const*, unsigned int, unsigned int, unsigned int, unsigned int)+0x240>
   11448:	e1a01422 	lsr	r1, r2, #8
   1144c:	e1809609 	orr	r9, r0, r9, lsl #12
   11450:	e5c32008 	strb	r2, [r3, #8]
   11454:	e5c31009 	strb	r1, [r3, #9]
   11458:	e1a01822 	lsr	r1, r2, #16
   1145c:	e1a02c22 	lsr	r2, r2, #24
   11460:	e5c3200b 	strb	r2, [r3, #11]
   11464:	e1a02429 	lsr	r2, r9, #8
   11468:	e5c3100a 	strb	r1, [r3, #10]
   1146c:	e5c32001 	strb	r2, [r3, #1]
   11470:	e3c81103 	bic	r1, r8, #-1073741824	; 0xc0000000
   11474:	e1a02829 	lsr	r2, r9, #16
   11478:	e3811101 	orr	r1, r1, #1073741824	; 0x40000000
   1147c:	e5c39000 	strb	r9, [r3]
   11480:	e5c32002 	strb	r2, [r3, #2]
   11484:	e1a09c29 	lsr	r9, r9, #24
   11488:	e2462001 	sub	r2, r6, #1
   1148c:	e1852802 	orr	r2, r5, r2, lsl #16
   11490:	e5c39003 	strb	r9, [r3, #3]
   11494:	e5c31004 	strb	r1, [r3, #4]
   11498:	e1a09421 	lsr	r9, r1, #8
   1149c:	e1a00008 	mov	r0, r8
   114a0:	e1a08821 	lsr	r8, r1, #16
   114a4:	e1a01c21 	lsr	r1, r1, #24
   114a8:	e1a04804 	lsl	r4, r4, #16
   114ac:	e5c31007 	strb	r1, [r3, #7]
   114b0:	e0010596 	mul	r1, r6, r5
   114b4:	e1a05822 	lsr	r5, r2, #16
   114b8:	e5c38006 	strb	r8, [r3, #6]
   114bc:	e5c3200c 	strb	r2, [r3, #12]
   114c0:	e1a08422 	lsr	r8, r2, #8
   114c4:	e6ef6074 	uxtb	r6, r4
   114c8:	e5c3500e 	strb	r5, [r3, #14]
   114cc:	e1a02c22 	lsr	r2, r2, #24
   114d0:	e1a05824 	lsr	r5, r4, #16
   114d4:	e1a04c24 	lsr	r4, r4, #24
   114d8:	e5c39005 	strb	r9, [r3, #5]
   114dc:	e5c3800d 	strb	r8, [r3, #13]
   114e0:	e5c3200f 	strb	r2, [r3, #15]
   114e4:	e5c36010 	strb	r6, [r3, #16]
   114e8:	e5c35012 	strb	r5, [r3, #18]
   114ec:	e5c34013 	strb	r4, [r3, #19]
   114f0:	e5c3c014 	strb	ip, [r3, #20]
   114f4:	e5c3c015 	strb	ip, [r3, #21]
   114f8:	e5c3c016 	strb	ip, [r3, #22]
   114fc:	e5c3c017 	strb	ip, [r3, #23]
   11500:	e5c3c011 	strb	ip, [r3, #17]
   11504:	e587c020 	str	ip, [r7, #32]
   11508:	e8bd47f0 	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   1150c:	eafff988 	b	fb34 <CleanAndInvalidateDataCacheRange>
   11510:	e59f10e0 	ldr	r1, [pc, #224]	; 115f8 <CDMAChannel::SetupMemCopy2D(void*, void const*, unsigned int, unsigned int, unsigned int, unsigned int)+0x244>
   11514:	e3a020fd 	mov	r2, #253	; 0xfd
   11518:	e2810f5e 	add	r0, r1, #376	; 0x178
   1151c:	ebfffb2b 	bl	101d0 <assertion_failed>
   11520:	e3540801 	cmp	r4, #65536	; 0x10000
   11524:	3affffb7 	bcc	11408 <CDMAChannel::SetupMemCopy2D(void*, void const*, unsigned int, unsigned int, unsigned int, unsigned int)+0x54>
   11528:	e59f10c8 	ldr	r1, [pc, #200]	; 115f8 <CDMAChannel::SetupMemCopy2D(void*, void const*, unsigned int, unsigned int, unsigned int, unsigned int)+0x244>
   1152c:	e3a020fe 	mov	r2, #254	; 0xfe
   11530:	e2810e19 	add	r0, r1, #400	; 0x190
   11534:	ebfffb25 	bl	101d0 <assertion_failed>
   11538:	e359000f 	cmp	r9, #15
   1153c:	9affffb3 	bls	11410 <CDMAChannel::SetupMemCopy2D(void*, void const*, unsigned int, unsigned int, unsigned int, unsigned int)+0x5c>
   11540:	e59f10b0 	ldr	r1, [pc, #176]	; 115f8 <CDMAChannel::SetupMemCopy2D(void*, void const*, unsigned int, unsigned int, unsigned int, unsigned int)+0x244>
   11544:	e3a020ff 	mov	r2, #255	; 0xff
   11548:	e2810090 	add	r0, r1, #144	; 0x90
   1154c:	ebfffb1f 	bl	101d0 <assertion_failed>
   11550:	eaffffae 	b	11410 <CDMAChannel::SetupMemCopy2D(void*, void const*, unsigned int, unsigned int, unsigned int, unsigned int)+0x5c>
   11554:	e59f109c 	ldr	r1, [pc, #156]	; 115f8 <CDMAChannel::SetupMemCopy2D(void*, void const*, unsigned int, unsigned int, unsigned int, unsigned int)+0x244>
   11558:	e3a020fb 	mov	r2, #251	; 0xfb
   1155c:	e2810e15 	add	r0, r1, #336	; 0x150
   11560:	ebfffb1a 	bl	101d0 <assertion_failed>
   11564:	e3560000 	cmp	r6, #0
   11568:	1affffa2 	bne	113f8 <CDMAChannel::SetupMemCopy2D(void*, void const*, unsigned int, unsigned int, unsigned int, unsigned int)+0x44>
   1156c:	e59f1084 	ldr	r1, [pc, #132]	; 115f8 <CDMAChannel::SetupMemCopy2D(void*, void const*, unsigned int, unsigned int, unsigned int, unsigned int)+0x244>
   11570:	e3a020fc 	mov	r2, #252	; 0xfc
   11574:	e2810f5a 	add	r0, r1, #360	; 0x168
   11578:	ebfffb14 	bl	101d0 <assertion_failed>
   1157c:	eaffff9f 	b	11400 <CDMAChannel::SetupMemCopy2D(void*, void const*, unsigned int, unsigned int, unsigned int, unsigned int)+0x4c>
   11580:	e59f1070 	ldr	r1, [pc, #112]	; 115f8 <CDMAChannel::SetupMemCopy2D(void*, void const*, unsigned int, unsigned int, unsigned int, unsigned int)+0x244>
   11584:	e3a020fa 	mov	r2, #250	; 0xfa
   11588:	e2810f4f 	add	r0, r1, #316	; 0x13c
   1158c:	ebfffb0f 	bl	101d0 <assertion_failed>
   11590:	eaffff96 	b	113f0 <CDMAChannel::SetupMemCopy2D(void*, void const*, unsigned int, unsigned int, unsigned int, unsigned int)+0x3c>
   11594:	e59f105c 	ldr	r1, [pc, #92]	; 115f8 <CDMAChannel::SetupMemCopy2D(void*, void const*, unsigned int, unsigned int, unsigned int, unsigned int)+0x244>
   11598:	e59f205c 	ldr	r2, [pc, #92]	; 115fc <CDMAChannel::SetupMemCopy2D(void*, void const*, unsigned int, unsigned int, unsigned int, unsigned int)+0x248>
   1159c:	e2810f6a 	add	r0, r1, #424	; 0x1a8
   115a0:	ebfffb0a 	bl	101d0 <assertion_failed>
   115a4:	e5973008 	ldr	r3, [r7, #8]
   115a8:	e3530000 	cmp	r3, #0
   115ac:	1affffa1 	bne	11438 <CDMAChannel::SetupMemCopy2D(void*, void const*, unsigned int, unsigned int, unsigned int, unsigned int)+0x84>
   115b0:	e59f1040 	ldr	r1, [pc, #64]	; 115f8 <CDMAChannel::SetupMemCopy2D(void*, void const*, unsigned int, unsigned int, unsigned int, unsigned int)+0x244>
   115b4:	e59f2044 	ldr	r2, [pc, #68]	; 11600 <CDMAChannel::SetupMemCopy2D(void*, void const*, unsigned int, unsigned int, unsigned int, unsigned int)+0x24c>
   115b8:	e28100a4 	add	r0, r1, #164	; 0xa4
   115bc:	ebfffb03 	bl	101d0 <assertion_failed>
   115c0:	e5973008 	ldr	r3, [r7, #8]
   115c4:	eaffff9b 	b	11438 <CDMAChannel::SetupMemCopy2D(void*, void const*, unsigned int, unsigned int, unsigned int, unsigned int)+0x84>
   115c8:	e59f1028 	ldr	r1, [pc, #40]	; 115f8 <CDMAChannel::SetupMemCopy2D(void*, void const*, unsigned int, unsigned int, unsigned int, unsigned int)+0x244>
   115cc:	e3a020f8 	mov	r2, #248	; 0xf8
   115d0:	e2810060 	add	r0, r1, #96	; 0x60
   115d4:	ebfffafd 	bl	101d0 <assertion_failed>
   115d8:	e3580000 	cmp	r8, #0
   115dc:	1affff7f 	bne	113e0 <CDMAChannel::SetupMemCopy2D(void*, void const*, unsigned int, unsigned int, unsigned int, unsigned int)+0x2c>
   115e0:	e59f1010 	ldr	r1, [pc, #16]	; 115f8 <CDMAChannel::SetupMemCopy2D(void*, void const*, unsigned int, unsigned int, unsigned int, unsigned int)+0x244>
   115e4:	e3a020f9 	mov	r2, #249	; 0xf9
   115e8:	e2810074 	add	r0, r1, #116	; 0x74
   115ec:	ebfffaf7 	bl	101d0 <assertion_failed>
   115f0:	eaffff7a 	b	113e0 <CDMAChannel::SetupMemCopy2D(void*, void const*, unsigned int, unsigned int, unsigned int, unsigned int)+0x2c>
   115f4:	00000332 	.word	0x00000332
   115f8:	00014bac 	.word	0x00014bac
   115fc:	00000101 	.word	0x00000101
   11600:	00000103 	.word	0x00000103

00011604 <CDMAChannel::SetCompletionRoutine(void (*)(unsigned int, bool, void*), void*)>:
   11604:	e5903000 	ldr	r3, [r0]
   11608:	e92d4070 	push	{r4, r5, r6, lr}
   1160c:	e353000c 	cmp	r3, #12
   11610:	e1a04000 	mov	r4, r0
   11614:	e1a05001 	mov	r5, r1
   11618:	e1a06002 	mov	r6, r2
   1161c:	8a00000a 	bhi	1164c <CDMAChannel::SetCompletionRoutine(void (*)(unsigned int, bool, void*), void*)+0x48>
   11620:	e594300c 	ldr	r3, [r4, #12]
   11624:	e3530000 	cmp	r3, #0
   11628:	0a00000e 	beq	11668 <CDMAChannel::SetCompletionRoutine(void (*)(unsigned int, bool, void*), void*)+0x64>
   1162c:	e5d43010 	ldrb	r3, [r4, #16]
   11630:	e3530000 	cmp	r3, #0
   11634:	0a000012 	beq	11684 <CDMAChannel::SetCompletionRoutine(void (*)(unsigned int, bool, void*), void*)+0x80>
   11638:	e3550000 	cmp	r5, #0
   1163c:	e5845014 	str	r5, [r4, #20]
   11640:	0a00001a 	beq	116b0 <CDMAChannel::SetCompletionRoutine(void (*)(unsigned int, bool, void*), void*)+0xac>
   11644:	e5846018 	str	r6, [r4, #24]
   11648:	e8bd8070 	pop	{r4, r5, r6, pc}
   1164c:	e59f1074 	ldr	r1, [pc, #116]	; 116c8 <CDMAChannel::SetCompletionRoutine(void (*)(unsigned int, bool, void*), void*)+0xc4>
   11650:	e59f2074 	ldr	r2, [pc, #116]	; 116cc <CDMAChannel::SetCompletionRoutine(void (*)(unsigned int, bool, void*), void*)+0xc8>
   11654:	e281004c 	add	r0, r1, #76	; 0x4c
   11658:	ebfffadc 	bl	101d0 <assertion_failed>
   1165c:	e594300c 	ldr	r3, [r4, #12]
   11660:	e3530000 	cmp	r3, #0
   11664:	1afffff0 	bne	1162c <CDMAChannel::SetCompletionRoutine(void (*)(unsigned int, bool, void*), void*)+0x28>
   11668:	e59f1058 	ldr	r1, [pc, #88]	; 116c8 <CDMAChannel::SetCompletionRoutine(void (*)(unsigned int, bool, void*), void*)+0xc4>
   1166c:	e59f205c 	ldr	r2, [pc, #92]	; 116d0 <CDMAChannel::SetCompletionRoutine(void (*)(unsigned int, bool, void*), void*)+0xcc>
   11670:	e2810e1e 	add	r0, r1, #480	; 0x1e0
   11674:	ebfffad5 	bl	101d0 <assertion_failed>
   11678:	e5d43010 	ldrb	r3, [r4, #16]
   1167c:	e3530000 	cmp	r3, #0
   11680:	1affffec 	bne	11638 <CDMAChannel::SetCompletionRoutine(void (*)(unsigned int, bool, void*), void*)+0x34>
   11684:	e5941000 	ldr	r1, [r4]
   11688:	e1a03004 	mov	r3, r4
   1168c:	e2811010 	add	r1, r1, #16
   11690:	e59f203c 	ldr	r2, [pc, #60]	; 116d4 <CDMAChannel::SetCompletionRoutine(void (*)(unsigned int, bool, void*), void*)+0xd0>
   11694:	e594000c 	ldr	r0, [r4, #12]
   11698:	eb000281 	bl	120a4 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)>
   1169c:	e3a03001 	mov	r3, #1
   116a0:	e3550000 	cmp	r5, #0
   116a4:	e5c43010 	strb	r3, [r4, #16]
   116a8:	e5845014 	str	r5, [r4, #20]
   116ac:	1affffe4 	bne	11644 <CDMAChannel::SetCompletionRoutine(void (*)(unsigned int, bool, void*), void*)+0x40>
   116b0:	e59f1010 	ldr	r1, [pc, #16]	; 116c8 <CDMAChannel::SetCompletionRoutine(void (*)(unsigned int, bool, void*), void*)+0xc4>
   116b4:	e3a02f49 	mov	r2, #292	; 0x124
   116b8:	e2810f7e 	add	r0, r1, #504	; 0x1f8
   116bc:	ebfffac3 	bl	101d0 <assertion_failed>
   116c0:	e5846018 	str	r6, [r4, #24]
   116c4:	e8bd8070 	pop	{r4, r5, r6, pc}
   116c8:	00014bac 	.word	0x00014bac
   116cc:	00000119 	.word	0x00000119
   116d0:	0000011a 	.word	0x0000011a
   116d4:	00011adc 	.word	0x00011adc

000116d8 <CDMAChannel::Start()>:
   116d8:	e5903000 	ldr	r3, [r0]
   116dc:	e92d4010 	push	{r4, lr}
   116e0:	e353000c 	cmp	r3, #12
   116e4:	e1a04000 	mov	r4, r0
   116e8:	8a00004b 	bhi	1181c <CDMAChannel::Start()+0x144>
   116ec:	e5943008 	ldr	r3, [r4, #8]
   116f0:	e3530000 	cmp	r3, #0
   116f4:	0a00004f 	beq	11838 <CDMAChannel::Start()+0x160>
   116f8:	e5943014 	ldr	r3, [r4, #20]
   116fc:	e3530000 	cmp	r3, #0
   11700:	0a000015 	beq	1175c <CDMAChannel::Start()+0x84>
   11704:	e594300c 	ldr	r3, [r4, #12]
   11708:	e3530000 	cmp	r3, #0
   1170c:	0a00004e 	beq	1184c <CDMAChannel::Start()+0x174>
   11710:	e5d43010 	ldrb	r3, [r4, #16]
   11714:	e3530000 	cmp	r3, #0
   11718:	0a000034 	beq	117f0 <CDMAChannel::Start()+0x118>
   1171c:	e5942008 	ldr	r2, [r4, #8]
   11720:	e5d21001 	ldrb	r1, [r2, #1]
   11724:	e5d23000 	ldrb	r3, [r2]
   11728:	e5d20002 	ldrb	r0, [r2, #2]
   1172c:	e1833401 	orr	r3, r3, r1, lsl #8
   11730:	e5d21003 	ldrb	r1, [r2, #3]
   11734:	e1833800 	orr	r3, r3, r0, lsl #16
   11738:	e1833c01 	orr	r3, r3, r1, lsl #24
   1173c:	e3833001 	orr	r3, r3, #1
   11740:	e1a0c423 	lsr	ip, r3, #8
   11744:	e1a00823 	lsr	r0, r3, #16
   11748:	e1a01c23 	lsr	r1, r3, #24
   1174c:	e5c23000 	strb	r3, [r2]
   11750:	e5c2c001 	strb	ip, [r2, #1]
   11754:	e5c20002 	strb	r0, [r2, #2]
   11758:	e5c21003 	strb	r1, [r2, #3]
   1175c:	e3a03000 	mov	r3, #0
   11760:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   11764:	e5943000 	ldr	r3, [r4]
   11768:	e2832602 	add	r2, r3, #2097152	; 0x200000
   1176c:	e2822070 	add	r2, r2, #112	; 0x70
   11770:	e1a02402 	lsl	r2, r2, #8
   11774:	e5922000 	ldr	r2, [r2]
   11778:	e3120004 	tst	r2, #4
   1177c:	1a000020 	bne	11804 <CDMAChannel::Start()+0x12c>
   11780:	e3a01001 	mov	r1, #1
   11784:	e59f20d4 	ldr	r2, [pc, #212]	; 11860 <CDMAChannel::Start()+0x188>
   11788:	e5922fe0 	ldr	r2, [r2, #4064]	; 0xfe0
   1178c:	e0122311 	ands	r2, r2, r1, lsl r3
   11790:	0a000004 	beq	117a8 <CDMAChannel::Start()+0xd0>
   11794:	e59f10c8 	ldr	r1, [pc, #200]	; 11864 <CDMAChannel::Start()+0x18c>
   11798:	e3a02f4e 	mov	r2, #312	; 0x138
   1179c:	e2810f96 	add	r0, r1, #600	; 0x258
   117a0:	ebfffa8a 	bl	101d0 <assertion_failed>
   117a4:	e5943000 	ldr	r3, [r4]
   117a8:	e5940008 	ldr	r0, [r4, #8]
   117ac:	e2833602 	add	r3, r3, #2097152	; 0x200000
   117b0:	e3c02103 	bic	r2, r0, #-1073741824	; 0xc0000000
   117b4:	e2833070 	add	r3, r3, #112	; 0x70
   117b8:	e1a03403 	lsl	r3, r3, #8
   117bc:	e3822101 	orr	r2, r2, #1073741824	; 0x40000000
   117c0:	e5832004 	str	r2, [r3, #4]
   117c4:	e3a01020 	mov	r1, #32
   117c8:	ebfff8d9 	bl	fb34 <CleanAndInvalidateDataCacheRange>
   117cc:	e5943000 	ldr	r3, [r4]
   117d0:	e59f2090 	ldr	r2, [pc, #144]	; 11868 <CDMAChannel::Start()+0x190>
   117d4:	e2833602 	add	r3, r3, #2097152	; 0x200000
   117d8:	e2833070 	add	r3, r3, #112	; 0x70
   117dc:	e1a03403 	lsl	r3, r3, #8
   117e0:	e5832000 	str	r2, [r3]
   117e4:	e3a03000 	mov	r3, #0
   117e8:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   117ec:	e8bd8010 	pop	{r4, pc}
   117f0:	e59f106c 	ldr	r1, [pc, #108]	; 11864 <CDMAChannel::Start()+0x18c>
   117f4:	e59f2070 	ldr	r2, [pc, #112]	; 1186c <CDMAChannel::Start()+0x194>
   117f8:	e2810f85 	add	r0, r1, #532	; 0x214
   117fc:	ebfffa73 	bl	101d0 <assertion_failed>
   11800:	eaffffc5 	b	1171c <CDMAChannel::Start()+0x44>
   11804:	e59f1058 	ldr	r1, [pc, #88]	; 11864 <CDMAChannel::Start()+0x18c>
   11808:	e59f2060 	ldr	r2, [pc, #96]	; 11870 <CDMAChannel::Start()+0x198>
   1180c:	e2810f89 	add	r0, r1, #548	; 0x224
   11810:	ebfffa6e 	bl	101d0 <assertion_failed>
   11814:	e5943000 	ldr	r3, [r4]
   11818:	eaffffd8 	b	11780 <CDMAChannel::Start()+0xa8>
   1181c:	e59f1040 	ldr	r1, [pc, #64]	; 11864 <CDMAChannel::Start()+0x18c>
   11820:	e59f204c 	ldr	r2, [pc, #76]	; 11874 <CDMAChannel::Start()+0x19c>
   11824:	e2810030 	add	r0, r1, #48	; 0x30
   11828:	ebfffa68 	bl	101d0 <assertion_failed>
   1182c:	e5943008 	ldr	r3, [r4, #8]
   11830:	e3530000 	cmp	r3, #0
   11834:	1affffaf 	bne	116f8 <CDMAChannel::Start()+0x20>
   11838:	e59f1024 	ldr	r1, [pc, #36]	; 11864 <CDMAChannel::Start()+0x18c>
   1183c:	e3a02f4b 	mov	r2, #300	; 0x12c
   11840:	e28100a4 	add	r0, r1, #164	; 0xa4
   11844:	ebfffa61 	bl	101d0 <assertion_failed>
   11848:	eaffffaa 	b	116f8 <CDMAChannel::Start()+0x20>
   1184c:	e59f1010 	ldr	r1, [pc, #16]	; 11864 <CDMAChannel::Start()+0x18c>
   11850:	e3a02e13 	mov	r2, #304	; 0x130
   11854:	e2810e1e 	add	r0, r1, #480	; 0x1e0
   11858:	ebfffa5c 	bl	101d0 <assertion_failed>
   1185c:	eaffffab 	b	11710 <CDMAChannel::Start()+0x38>
   11860:	20007000 	.word	0x20007000
   11864:	00014bac 	.word	0x00014bac
   11868:	10f10001 	.word	0x10f10001
   1186c:	00000131 	.word	0x00000131
   11870:	00000137 	.word	0x00000137
   11874:	0000012b 	.word	0x0000012b

00011878 <CDMAChannel::Wait()>:
   11878:	e5903000 	ldr	r3, [r0]
   1187c:	e92d4010 	push	{r4, lr}
   11880:	e353000c 	cmp	r3, #12
   11884:	e1a04000 	mov	r4, r0
   11888:	8a00001c 	bhi	11900 <CDMAChannel::Wait()+0x88>
   1188c:	e5943014 	ldr	r3, [r4, #20]
   11890:	e3530000 	cmp	r3, #0
   11894:	0a000003 	beq	118a8 <CDMAChannel::Wait()+0x30>
   11898:	e59f1074 	ldr	r1, [pc, #116]	; 11914 <CDMAChannel::Wait()+0x9c>
   1189c:	e59f2074 	ldr	r2, [pc, #116]	; 11918 <CDMAChannel::Wait()+0xa0>
   118a0:	e2810fa3 	add	r0, r1, #652	; 0x28c
   118a4:	ebfffa49 	bl	101d0 <assertion_failed>
   118a8:	e3a03000 	mov	r3, #0
   118ac:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   118b0:	e5942000 	ldr	r2, [r4]
   118b4:	e2822602 	add	r2, r2, #2097152	; 0x200000
   118b8:	e2822070 	add	r2, r2, #112	; 0x70
   118bc:	e1a02402 	lsl	r2, r2, #8
   118c0:	e5923000 	ldr	r3, [r2]
   118c4:	e3130001 	tst	r3, #1
   118c8:	1afffffc 	bne	118c0 <CDMAChannel::Wait()+0x48>
   118cc:	e1a03423 	lsr	r3, r3, #8
   118d0:	e5940020 	ldr	r0, [r4, #32]
   118d4:	e2233001 	eor	r3, r3, #1
   118d8:	e2033001 	and	r3, r3, #1
   118dc:	e3500000 	cmp	r0, #0
   118e0:	e5c4301c 	strb	r3, [r4, #28]
   118e4:	0a000001 	beq	118f0 <CDMAChannel::Wait()+0x78>
   118e8:	e5941024 	ldr	r1, [r4, #36]	; 0x24
   118ec:	ebfff890 	bl	fb34 <CleanAndInvalidateDataCacheRange>
   118f0:	e3a03000 	mov	r3, #0
   118f4:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   118f8:	e5d4001c 	ldrb	r0, [r4, #28]
   118fc:	e8bd8010 	pop	{r4, pc}
   11900:	e59f100c 	ldr	r1, [pc, #12]	; 11914 <CDMAChannel::Wait()+0x9c>
   11904:	e3a02f52 	mov	r2, #328	; 0x148
   11908:	e2810030 	add	r0, r1, #48	; 0x30
   1190c:	ebfffa2f 	bl	101d0 <assertion_failed>
   11910:	eaffffdd 	b	1188c <CDMAChannel::Wait()+0x14>
   11914:	00014bac 	.word	0x00014bac
   11918:	00000149 	.word	0x00000149

0001191c <CDMAChannel::GetStatus()>:
   1191c:	e5903000 	ldr	r3, [r0]
   11920:	e92d4010 	push	{r4, lr}
   11924:	e353000c 	cmp	r3, #12
   11928:	e1a04000 	mov	r4, r0
   1192c:	8a00000b 	bhi	11960 <CDMAChannel::GetStatus()+0x44>
   11930:	e2833602 	add	r3, r3, #2097152	; 0x200000
   11934:	e2833070 	add	r3, r3, #112	; 0x70
   11938:	e1a03403 	lsl	r3, r3, #8
   1193c:	e5933000 	ldr	r3, [r3]
   11940:	e3130001 	tst	r3, #1
   11944:	0a000003 	beq	11958 <CDMAChannel::GetStatus()+0x3c>
   11948:	e59f1028 	ldr	r1, [pc, #40]	; 11978 <CDMAChannel::GetStatus()+0x5c>
   1194c:	e59f2028 	ldr	r2, [pc, #40]	; 1197c <CDMAChannel::GetStatus()+0x60>
   11950:	e2810faa 	add	r0, r1, #680	; 0x2a8
   11954:	ebfffa1d 	bl	101d0 <assertion_failed>
   11958:	e5d4001c 	ldrb	r0, [r4, #28]
   1195c:	e8bd8010 	pop	{r4, pc}
   11960:	e59f1010 	ldr	r1, [pc, #16]	; 11978 <CDMAChannel::GetStatus()+0x5c>
   11964:	e59f2014 	ldr	r2, [pc, #20]	; 11980 <CDMAChannel::GetStatus()+0x64>
   11968:	e2810030 	add	r0, r1, #48	; 0x30
   1196c:	ebfffa17 	bl	101d0 <assertion_failed>
   11970:	e5943000 	ldr	r3, [r4]
   11974:	eaffffed 	b	11930 <CDMAChannel::GetStatus()+0x14>
   11978:	00014bac 	.word	0x00014bac
   1197c:	00000162 	.word	0x00000162
   11980:	00000161 	.word	0x00000161

00011984 <CDMAChannel::InterruptHandler()>:
   11984:	e92d4070 	push	{r4, r5, r6, lr}
   11988:	e1a05000 	mov	r5, r0
   1198c:	e5900020 	ldr	r0, [r0, #32]
   11990:	e3500000 	cmp	r0, #0
   11994:	1a000028 	bne	11a3c <CDMAChannel::InterruptHandler()+0xb8>
   11998:	e3a03000 	mov	r3, #0
   1199c:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   119a0:	e5953000 	ldr	r3, [r5]
   119a4:	e353000c 	cmp	r3, #12
   119a8:	8a000035 	bhi	11a84 <CDMAChannel::InterruptHandler()+0x100>
   119ac:	e3a04001 	mov	r4, #1
   119b0:	e59f210c 	ldr	r2, [pc, #268]	; 11ac4 <CDMAChannel::InterruptHandler()+0x140>
   119b4:	e1a04314 	lsl	r4, r4, r3
   119b8:	e5923fe0 	ldr	r3, [r2, #4064]	; 0xfe0
   119bc:	e1140003 	tst	r4, r3
   119c0:	0a00002a 	beq	11a70 <CDMAChannel::InterruptHandler()+0xec>
   119c4:	e59f30f8 	ldr	r3, [pc, #248]	; 11ac4 <CDMAChannel::InterruptHandler()+0x140>
   119c8:	e5834fe0 	str	r4, [r3, #4064]	; 0xfe0
   119cc:	e5953000 	ldr	r3, [r5]
   119d0:	e2833602 	add	r3, r3, #2097152	; 0x200000
   119d4:	e2833070 	add	r3, r3, #112	; 0x70
   119d8:	e1a03403 	lsl	r3, r3, #8
   119dc:	e5934000 	ldr	r4, [r3]
   119e0:	e3140004 	tst	r4, #4
   119e4:	0a00001c 	beq	11a5c <CDMAChannel::InterruptHandler()+0xd8>
   119e8:	e3140001 	tst	r4, #1
   119ec:	1a000015 	bne	11a48 <CDMAChannel::InterruptHandler()+0xc4>
   119f0:	e3a01004 	mov	r1, #4
   119f4:	e5953000 	ldr	r3, [r5]
   119f8:	e3a02000 	mov	r2, #0
   119fc:	e2833602 	add	r3, r3, #2097152	; 0x200000
   11a00:	e2833070 	add	r3, r3, #112	; 0x70
   11a04:	e1a03403 	lsl	r3, r3, #8
   11a08:	e5831000 	str	r1, [r3]
   11a0c:	ee072fba 	mcr	15, 0, r2, cr7, cr10, {5}
   11a10:	e1a01424 	lsr	r1, r4, #8
   11a14:	e5953014 	ldr	r3, [r5, #20]
   11a18:	e2211001 	eor	r1, r1, #1
   11a1c:	e2011001 	and	r1, r1, #1
   11a20:	e1530002 	cmp	r3, r2
   11a24:	e5c5101c 	strb	r1, [r5, #28]
   11a28:	0a00001b 	beq	11a9c <CDMAChannel::InterruptHandler()+0x118>
   11a2c:	e5952018 	ldr	r2, [r5, #24]
   11a30:	e5950000 	ldr	r0, [r5]
   11a34:	e8bd4070 	pop	{r4, r5, r6, lr}
   11a38:	e12fff13 	bx	r3
   11a3c:	e5951024 	ldr	r1, [r5, #36]	; 0x24
   11a40:	ebfff83b 	bl	fb34 <CleanAndInvalidateDataCacheRange>
   11a44:	eaffffd3 	b	11998 <CDMAChannel::InterruptHandler()+0x14>
   11a48:	e59f1078 	ldr	r1, [pc, #120]	; 11ac8 <CDMAChannel::InterruptHandler()+0x144>
   11a4c:	e59f2078 	ldr	r2, [pc, #120]	; 11acc <CDMAChannel::InterruptHandler()+0x148>
   11a50:	e2810fc1 	add	r0, r1, #772	; 0x304
   11a54:	ebfff9dd 	bl	101d0 <assertion_failed>
   11a58:	eaffffe4 	b	119f0 <CDMAChannel::InterruptHandler()+0x6c>
   11a5c:	e59f1064 	ldr	r1, [pc, #100]	; 11ac8 <CDMAChannel::InterruptHandler()+0x144>
   11a60:	e59f2068 	ldr	r2, [pc, #104]	; 11ad0 <CDMAChannel::InterruptHandler()+0x14c>
   11a64:	e2810fbd 	add	r0, r1, #756	; 0x2f4
   11a68:	ebfff9d8 	bl	101d0 <assertion_failed>
   11a6c:	eaffffdd 	b	119e8 <CDMAChannel::InterruptHandler()+0x64>
   11a70:	e59f1050 	ldr	r1, [pc, #80]	; 11ac8 <CDMAChannel::InterruptHandler()+0x144>
   11a74:	e59f2058 	ldr	r2, [pc, #88]	; 11ad4 <CDMAChannel::InterruptHandler()+0x150>
   11a78:	e2810fb7 	add	r0, r1, #732	; 0x2dc
   11a7c:	ebfff9d3 	bl	101d0 <assertion_failed>
   11a80:	eaffffcf 	b	119c4 <CDMAChannel::InterruptHandler()+0x40>
   11a84:	e59f103c 	ldr	r1, [pc, #60]	; 11ac8 <CDMAChannel::InterruptHandler()+0x144>
   11a88:	e3a02e17 	mov	r2, #368	; 0x170
   11a8c:	e2810030 	add	r0, r1, #48	; 0x30
   11a90:	ebfff9ce 	bl	101d0 <assertion_failed>
   11a94:	e5953000 	ldr	r3, [r5]
   11a98:	eaffffc3 	b	119ac <CDMAChannel::InterruptHandler()+0x28>
   11a9c:	e59f1024 	ldr	r1, [pc, #36]	; 11ac8 <CDMAChannel::InterruptHandler()+0x144>
   11aa0:	e59f2030 	ldr	r2, [pc, #48]	; 11ad8 <CDMAChannel::InterruptHandler()+0x154>
   11aa4:	e2810f7e 	add	r0, r1, #504	; 0x1f8
   11aa8:	ebfff9c8 	bl	101d0 <assertion_failed>
   11aac:	e5953014 	ldr	r3, [r5, #20]
   11ab0:	e5d5101c 	ldrb	r1, [r5, #28]
   11ab4:	e5952018 	ldr	r2, [r5, #24]
   11ab8:	e5950000 	ldr	r0, [r5]
   11abc:	e8bd4070 	pop	{r4, r5, r6, lr}
   11ac0:	e12fff13 	bx	r3
   11ac4:	20007000 	.word	0x20007000
   11ac8:	00014bac 	.word	0x00014bac
   11acc:	0000017b 	.word	0x0000017b
   11ad0:	0000017a 	.word	0x0000017a
   11ad4:	00000176 	.word	0x00000176
   11ad8:	00000182 	.word	0x00000182

00011adc <CDMAChannel::InterruptStub(void*)>:
   11adc:	e92d4010 	push	{r4, lr}
   11ae0:	e2504000 	subs	r4, r0, #0
   11ae4:	0a000002 	beq	11af4 <CDMAChannel::InterruptStub(void*)+0x18>
   11ae8:	e1a00004 	mov	r0, r4
   11aec:	e8bd4010 	pop	{r4, lr}
   11af0:	eaffffa3 	b	11984 <CDMAChannel::InterruptHandler()>
   11af4:	e59f1014 	ldr	r1, [pc, #20]	; 11b10 <CDMAChannel::InterruptStub(void*)+0x34>
   11af8:	e59f2014 	ldr	r2, [pc, #20]	; 11b14 <CDMAChannel::InterruptStub(void*)+0x38>
   11afc:	e2810fc6 	add	r0, r1, #792	; 0x318
   11b00:	ebfff9b2 	bl	101d0 <assertion_failed>
   11b04:	e1a00004 	mov	r0, r4
   11b08:	e8bd4010 	pop	{r4, lr}
   11b0c:	eaffff9c 	b	11984 <CDMAChannel::InterruptHandler()>
   11b10:	00014bac 	.word	0x00014bac
   11b14:	00000189 	.word	0x00000189

00011b18 <CGPIOManager::CGPIOManager(CInterruptSystem*)>:
   11b18:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   11b1c:	e3a0e000 	mov	lr, #0
   11b20:	e1a03000 	mov	r3, r0
   11b24:	e1a0c00e 	mov	ip, lr
   11b28:	e5801000 	str	r1, [r0]
   11b2c:	e28020dc 	add	r2, r0, #220	; 0xdc
   11b30:	e5e3e004 	strb	lr, [r3, #4]!
   11b34:	e5a3c004 	str	ip, [r3, #4]!
   11b38:	e1530002 	cmp	r3, r2
   11b3c:	1afffffc 	bne	11b34 <CGPIOManager::CGPIOManager(CInterruptSystem*)+0x1c>
   11b40:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

00011b44 <CGPIOManager::~CGPIOManager()>:
   11b44:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   11b48:	e1a08000 	mov	r8, r0
   11b4c:	e59f706c 	ldr	r7, [pc, #108]	; 11bc0 <CGPIOManager::~CGPIOManager()+0x7c>
   11b50:	e59f606c 	ldr	r6, [pc, #108]	; 11bc4 <CGPIOManager::~CGPIOManager()+0x80>
   11b54:	e2804004 	add	r4, r0, #4
   11b58:	e28050dc 	add	r5, r0, #220	; 0xdc
   11b5c:	e5b43004 	ldr	r3, [r4, #4]!
   11b60:	e3530000 	cmp	r3, #0
   11b64:	0a000003 	beq	11b78 <CGPIOManager::~CGPIOManager()+0x34>
   11b68:	e3a0202c 	mov	r2, #44	; 0x2c
   11b6c:	e1a01007 	mov	r1, r7
   11b70:	e1a00006 	mov	r0, r6
   11b74:	ebfff995 	bl	101d0 <assertion_failed>
   11b78:	e1540005 	cmp	r4, r5
   11b7c:	1afffff6 	bne	11b5c <CGPIOManager::~CGPIOManager()+0x18>
   11b80:	e5d83004 	ldrb	r3, [r8, #4]
   11b84:	e3530000 	cmp	r3, #0
   11b88:	0a000004 	beq	11ba0 <CGPIOManager::~CGPIOManager()+0x5c>
   11b8c:	e5980000 	ldr	r0, [r8]
   11b90:	e3500000 	cmp	r0, #0
   11b94:	0a000003 	beq	11ba8 <CGPIOManager::~CGPIOManager()+0x64>
   11b98:	e3a01034 	mov	r1, #52	; 0x34
   11b9c:	eb000181 	bl	121a8 <CInterruptSystem::DisconnectIRQ(unsigned int)>
   11ba0:	e1a00008 	mov	r0, r8
   11ba4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   11ba8:	e59f0018 	ldr	r0, [pc, #24]	; 11bc8 <CGPIOManager::~CGPIOManager()+0x84>
   11bac:	e3a02032 	mov	r2, #50	; 0x32
   11bb0:	e59f1008 	ldr	r1, [pc, #8]	; 11bc0 <CGPIOManager::~CGPIOManager()+0x7c>
   11bb4:	ebfff985 	bl	101d0 <assertion_failed>
   11bb8:	e5980000 	ldr	r0, [r8]
   11bbc:	eafffff5 	b	11b98 <CGPIOManager::~CGPIOManager()+0x54>
   11bc0:	00014ed0 	.word	0x00014ed0
   11bc4:	00014ee0 	.word	0x00014ee0
   11bc8:	00014ef4 	.word	0x00014ef4

00011bcc <CGPIOManager::Initialize()>:
   11bcc:	e5d03004 	ldrb	r3, [r0, #4]
   11bd0:	e92d4010 	push	{r4, lr}
   11bd4:	e3530000 	cmp	r3, #0
   11bd8:	e1a04000 	mov	r4, r0
   11bdc:	1a000009 	bne	11c08 <CGPIOManager::Initialize()+0x3c>
   11be0:	e5940000 	ldr	r0, [r4]
   11be4:	e3500000 	cmp	r0, #0
   11be8:	0a00000d 	beq	11c24 <CGPIOManager::Initialize()+0x58>
   11bec:	e1a03004 	mov	r3, r4
   11bf0:	e59f2044 	ldr	r2, [pc, #68]	; 11c3c <CGPIOManager::Initialize()+0x70>
   11bf4:	e3a01034 	mov	r1, #52	; 0x34
   11bf8:	eb000129 	bl	120a4 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)>
   11bfc:	e3a00001 	mov	r0, #1
   11c00:	e5c40004 	strb	r0, [r4, #4]
   11c04:	e8bd8010 	pop	{r4, pc}
   11c08:	e59f0030 	ldr	r0, [pc, #48]	; 11c40 <CGPIOManager::Initialize()+0x74>
   11c0c:	e3a0203b 	mov	r2, #59	; 0x3b
   11c10:	e59f102c 	ldr	r1, [pc, #44]	; 11c44 <CGPIOManager::Initialize()+0x78>
   11c14:	ebfff96d 	bl	101d0 <assertion_failed>
   11c18:	e5940000 	ldr	r0, [r4]
   11c1c:	e3500000 	cmp	r0, #0
   11c20:	1afffff1 	bne	11bec <CGPIOManager::Initialize()+0x20>
   11c24:	e59f001c 	ldr	r0, [pc, #28]	; 11c48 <CGPIOManager::Initialize()+0x7c>
   11c28:	e3a0203c 	mov	r2, #60	; 0x3c
   11c2c:	e59f1010 	ldr	r1, [pc, #16]	; 11c44 <CGPIOManager::Initialize()+0x78>
   11c30:	ebfff966 	bl	101d0 <assertion_failed>
   11c34:	e5940000 	ldr	r0, [r4]
   11c38:	eaffffeb 	b	11bec <CGPIOManager::Initialize()+0x20>
   11c3c:	00011e74 	.word	0x00011e74
   11c40:	00014f08 	.word	0x00014f08
   11c44:	00014ed0 	.word	0x00014ed0
   11c48:	00014ef4 	.word	0x00014ef4

00011c4c <CGPIOManager::ConnectInterrupt(CGPIOPin*)>:
   11c4c:	e5d03004 	ldrb	r3, [r0, #4]
   11c50:	e92d4070 	push	{r4, r5, r6, lr}
   11c54:	e3530000 	cmp	r3, #0
   11c58:	e1a04000 	mov	r4, r0
   11c5c:	e1a05001 	mov	r5, r1
   11c60:	0a00000e 	beq	11ca0 <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x54>
   11c64:	e3550000 	cmp	r5, #0
   11c68:	0a000012 	beq	11cb8 <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x6c>
   11c6c:	e5956004 	ldr	r6, [r5, #4]
   11c70:	e3560035 	cmp	r6, #53	; 0x35
   11c74:	8a000016 	bhi	11cd4 <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x88>
   11c78:	e0844106 	add	r4, r4, r6, lsl #2
   11c7c:	e5943008 	ldr	r3, [r4, #8]
   11c80:	e3530000 	cmp	r3, #0
   11c84:	0a000003 	beq	11c98 <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x4c>
   11c88:	e3a0204b 	mov	r2, #75	; 0x4b
   11c8c:	e59f1054 	ldr	r1, [pc, #84]	; 11ce8 <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x9c>
   11c90:	e59f0054 	ldr	r0, [pc, #84]	; 11cec <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0xa0>
   11c94:	ebfff94d 	bl	101d0 <assertion_failed>
   11c98:	e5845008 	str	r5, [r4, #8]
   11c9c:	e8bd8070 	pop	{r4, r5, r6, pc}
   11ca0:	e3a02045 	mov	r2, #69	; 0x45
   11ca4:	e59f103c 	ldr	r1, [pc, #60]	; 11ce8 <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x9c>
   11ca8:	e59f0040 	ldr	r0, [pc, #64]	; 11cf0 <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0xa4>
   11cac:	ebfff947 	bl	101d0 <assertion_failed>
   11cb0:	e3550000 	cmp	r5, #0
   11cb4:	1affffec 	bne	11c6c <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x20>
   11cb8:	e3a02047 	mov	r2, #71	; 0x47
   11cbc:	e59f1024 	ldr	r1, [pc, #36]	; 11ce8 <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x9c>
   11cc0:	e59f002c 	ldr	r0, [pc, #44]	; 11cf4 <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0xa8>
   11cc4:	ebfff941 	bl	101d0 <assertion_failed>
   11cc8:	e5956004 	ldr	r6, [r5, #4]
   11ccc:	e3560035 	cmp	r6, #53	; 0x35
   11cd0:	9affffe8 	bls	11c78 <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x2c>
   11cd4:	e3a02049 	mov	r2, #73	; 0x49
   11cd8:	e59f1008 	ldr	r1, [pc, #8]	; 11ce8 <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x9c>
   11cdc:	e59f0014 	ldr	r0, [pc, #20]	; 11cf8 <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0xac>
   11ce0:	ebfff93a 	bl	101d0 <assertion_failed>
   11ce4:	eaffffe3 	b	11c78 <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x2c>
   11ce8:	00014ed0 	.word	0x00014ed0
   11cec:	00014ee0 	.word	0x00014ee0
   11cf0:	00014f1c 	.word	0x00014f1c
   11cf4:	00014f2c 	.word	0x00014f2c
   11cf8:	00014f38 	.word	0x00014f38

00011cfc <CGPIOManager::DisconnectInterrupt(CGPIOPin*)>:
   11cfc:	e5d03004 	ldrb	r3, [r0, #4]
   11d00:	e92d4070 	push	{r4, r5, r6, lr}
   11d04:	e3530000 	cmp	r3, #0
   11d08:	e1a04000 	mov	r4, r0
   11d0c:	e1a05001 	mov	r5, r1
   11d10:	0a00000b 	beq	11d44 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x48>
   11d14:	e3550000 	cmp	r5, #0
   11d18:	0a00000f 	beq	11d5c <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x60>
   11d1c:	e5955004 	ldr	r5, [r5, #4]
   11d20:	e3550035 	cmp	r5, #53	; 0x35
   11d24:	8a000013 	bhi	11d78 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x7c>
   11d28:	e0844105 	add	r4, r4, r5, lsl #2
   11d2c:	e5943008 	ldr	r3, [r4, #8]
   11d30:	e3530000 	cmp	r3, #0
   11d34:	0a000017 	beq	11d98 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x9c>
   11d38:	e3a03000 	mov	r3, #0
   11d3c:	e5843008 	str	r3, [r4, #8]
   11d40:	e8bd8070 	pop	{r4, r5, r6, pc}
   11d44:	e3a02052 	mov	r2, #82	; 0x52
   11d48:	e59f105c 	ldr	r1, [pc, #92]	; 11dac <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0xb0>
   11d4c:	e59f005c 	ldr	r0, [pc, #92]	; 11db0 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0xb4>
   11d50:	ebfff91e 	bl	101d0 <assertion_failed>
   11d54:	e3550000 	cmp	r5, #0
   11d58:	1affffef 	bne	11d1c <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x20>
   11d5c:	e3a02054 	mov	r2, #84	; 0x54
   11d60:	e59f1044 	ldr	r1, [pc, #68]	; 11dac <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0xb0>
   11d64:	e59f0048 	ldr	r0, [pc, #72]	; 11db4 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0xb8>
   11d68:	ebfff918 	bl	101d0 <assertion_failed>
   11d6c:	e5955004 	ldr	r5, [r5, #4]
   11d70:	e3550035 	cmp	r5, #53	; 0x35
   11d74:	9affffeb 	bls	11d28 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x2c>
   11d78:	e3a02056 	mov	r2, #86	; 0x56
   11d7c:	e59f1028 	ldr	r1, [pc, #40]	; 11dac <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0xb0>
   11d80:	e59f0030 	ldr	r0, [pc, #48]	; 11db8 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0xbc>
   11d84:	e0844105 	add	r4, r4, r5, lsl #2
   11d88:	ebfff910 	bl	101d0 <assertion_failed>
   11d8c:	e5943008 	ldr	r3, [r4, #8]
   11d90:	e3530000 	cmp	r3, #0
   11d94:	1affffe7 	bne	11d38 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x3c>
   11d98:	e3a02058 	mov	r2, #88	; 0x58
   11d9c:	e59f1008 	ldr	r1, [pc, #8]	; 11dac <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0xb0>
   11da0:	e59f0014 	ldr	r0, [pc, #20]	; 11dbc <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0xc0>
   11da4:	ebfff909 	bl	101d0 <assertion_failed>
   11da8:	eaffffe2 	b	11d38 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x3c>
   11dac:	00014ed0 	.word	0x00014ed0
   11db0:	00014f1c 	.word	0x00014f1c
   11db4:	00014f2c 	.word	0x00014f2c
   11db8:	00014f38 	.word	0x00014f38
   11dbc:	00014f4c 	.word	0x00014f4c

00011dc0 <CGPIOManager::InterruptHandler()>:
   11dc0:	e5d03004 	ldrb	r3, [r0, #4]
   11dc4:	e92d4070 	push	{r4, r5, r6, lr}
   11dc8:	e3530000 	cmp	r3, #0
   11dcc:	e1a05000 	mov	r5, r0
   11dd0:	0a00001b 	beq	11e44 <CGPIOManager::InterruptHandler()+0x84>
   11dd4:	e3a04000 	mov	r4, #0
   11dd8:	ee074f9a 	mcr	15, 0, r4, cr7, cr10, {4}
   11ddc:	e59f2080 	ldr	r2, [pc, #128]	; 11e64 <CGPIOManager::InterruptHandler()+0xa4>
   11de0:	e5923040 	ldr	r3, [r2, #64]	; 0x40
   11de4:	ea000005 	b	11e00 <CGPIOManager::InterruptHandler()+0x40>
   11de8:	e2844001 	add	r4, r4, #1
   11dec:	e314001f 	tst	r4, #31
   11df0:	11a030a3 	lsrne	r3, r3, #1
   11df4:	05923044 	ldreq	r3, [r2, #68]	; 0x44
   11df8:	e3540036 	cmp	r4, #54	; 0x36
   11dfc:	0a00000d 	beq	11e38 <CGPIOManager::InterruptHandler()+0x78>
   11e00:	e3130001 	tst	r3, #1
   11e04:	0afffff7 	beq	11de8 <CGPIOManager::InterruptHandler()+0x28>
   11e08:	e2843002 	add	r3, r4, #2
   11e0c:	e7950103 	ldr	r0, [r5, r3, lsl #2]
   11e10:	e3500000 	cmp	r0, #0
   11e14:	0a00000f 	beq	11e58 <CGPIOManager::InterruptHandler()+0x98>
   11e18:	ebffde20 	bl	96a0 <CGPIOPin::InterruptHandler()>
   11e1c:	e3a02001 	mov	r2, #1
   11e20:	e59f3040 	ldr	r3, [pc, #64]	; 11e68 <CGPIOManager::InterruptHandler()+0xa8>
   11e24:	e204101f 	and	r1, r4, #31
   11e28:	e08342a4 	add	r4, r3, r4, lsr #5
   11e2c:	e1a04104 	lsl	r4, r4, #2
   11e30:	e1a03112 	lsl	r3, r2, r1
   11e34:	e5843000 	str	r3, [r4]
   11e38:	e3a03000 	mov	r3, #0
   11e3c:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   11e40:	e8bd8070 	pop	{r4, r5, r6, pc}
   11e44:	e3a0205e 	mov	r2, #94	; 0x5e
   11e48:	e59f101c 	ldr	r1, [pc, #28]	; 11e6c <CGPIOManager::InterruptHandler()+0xac>
   11e4c:	e59f001c 	ldr	r0, [pc, #28]	; 11e70 <CGPIOManager::InterruptHandler()+0xb0>
   11e50:	ebfff8de 	bl	101d0 <assertion_failed>
   11e54:	eaffffde 	b	11dd4 <CGPIOManager::InterruptHandler()+0x14>
   11e58:	e1a00004 	mov	r0, r4
   11e5c:	ebffde38 	bl	9744 <CGPIOPin::DisableAllInterrupts(unsigned int)>
   11e60:	eaffffed 	b	11e1c <CGPIOManager::InterruptHandler()+0x5c>
   11e64:	20200000 	.word	0x20200000
   11e68:	08080010 	.word	0x08080010
   11e6c:	00014ed0 	.word	0x00014ed0
   11e70:	00014f1c 	.word	0x00014f1c

00011e74 <CGPIOManager::InterruptStub(void*)>:
   11e74:	e92d4010 	push	{r4, lr}
   11e78:	e2504000 	subs	r4, r0, #0
   11e7c:	0a000002 	beq	11e8c <CGPIOManager::InterruptStub(void*)+0x18>
   11e80:	e1a00004 	mov	r0, r4
   11e84:	e8bd4010 	pop	{r4, lr}
   11e88:	eaffffcc 	b	11dc0 <CGPIOManager::InterruptHandler()>
   11e8c:	e59f0014 	ldr	r0, [pc, #20]	; 11ea8 <CGPIOManager::InterruptStub(void*)+0x34>
   11e90:	e3a0208a 	mov	r2, #138	; 0x8a
   11e94:	e59f1010 	ldr	r1, [pc, #16]	; 11eac <CGPIOManager::InterruptStub(void*)+0x38>
   11e98:	ebfff8cc 	bl	101d0 <assertion_failed>
   11e9c:	e1a00004 	mov	r0, r4
   11ea0:	e8bd4010 	pop	{r4, lr}
   11ea4:	eaffffc5 	b	11dc0 <CGPIOManager::InterruptHandler()>
   11ea8:	00014f60 	.word	0x00014f60
   11eac:	00014ed0 	.word	0x00014ed0

00011eb0 <CInterruptSystem::CInterruptSystem()>:
   11eb0:	e1a0c000 	mov	ip, r0
   11eb4:	e2802f47 	add	r2, r0, #284	; 0x11c
   11eb8:	e1a00002 	mov	r0, r2
   11ebc:	e3a01000 	mov	r1, #0
   11ec0:	e24c3004 	sub	r3, ip, #4
   11ec4:	e5a31004 	str	r1, [r3, #4]!
   11ec8:	e1530000 	cmp	r3, r0
   11ecc:	e5a21004 	str	r1, [r2, #4]!
   11ed0:	1afffffb 	bne	11ec4 <CInterruptSystem::CInterruptSystem()+0x14>
   11ed4:	e59f3008 	ldr	r3, [pc, #8]	; 11ee4 <CInterruptSystem::CInterruptSystem()+0x34>
   11ed8:	e1a0000c 	mov	r0, ip
   11edc:	e583c000 	str	ip, [r3]
   11ee0:	e12fff1e 	bx	lr
   11ee4:	00015668 	.word	0x00015668

00011ee8 <CInterruptSystem::~CInterruptSystem()>:
   11ee8:	f10c0080 	cpsid	i
   11eec:	e3a03000 	mov	r3, #0
   11ef0:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   11ef4:	e3e01000 	mvn	r1, #0
   11ef8:	e59f201c 	ldr	r2, [pc, #28]	; 11f1c <CInterruptSystem::~CInterruptSystem()+0x34>
   11efc:	e582320c 	str	r3, [r2, #524]	; 0x20c
   11f00:	e582121c 	str	r1, [r2, #540]	; 0x21c
   11f04:	e5821220 	str	r1, [r2, #544]	; 0x220
   11f08:	e5821224 	str	r1, [r2, #548]	; 0x224
   11f0c:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   11f10:	e59f2008 	ldr	r2, [pc, #8]	; 11f20 <CInterruptSystem::~CInterruptSystem()+0x38>
   11f14:	e5823000 	str	r3, [r2]
   11f18:	e12fff1e 	bx	lr
   11f1c:	2000b000 	.word	0x2000b000
   11f20:	00015668 	.word	0x00015668

00011f24 <CInterruptSystem::Initialize()>:
   11f24:	e92d4010 	push	{r4, lr}
   11f28:	e3a04000 	mov	r4, #0
   11f2c:	e59f204c 	ldr	r2, [pc, #76]	; 11f80 <CInterruptSystem::Initialize()+0x5c>
   11f30:	e59f304c 	ldr	r3, [pc, #76]	; 11f84 <CInterruptSystem::Initialize()+0x60>
   11f34:	e1a02142 	asr	r2, r2, #2
   11f38:	e1a03143 	asr	r3, r3, #2
   11f3c:	e2422002 	sub	r2, r2, #2
   11f40:	e2433002 	sub	r3, r3, #2
   11f44:	e38224ea 	orr	r2, r2, #-369098752	; 0xea000000
   11f48:	e38334ea 	orr	r3, r3, #-369098752	; 0xea000000
   11f4c:	e1c421f8 	strd	r2, [r4, #24]
   11f50:	ebfff706 	bl	fb70 <SyncDataAndInstructionCache>
   11f54:	ee074f9a 	mcr	15, 0, r4, cr7, cr10, {4}
   11f58:	e3e02000 	mvn	r2, #0
   11f5c:	e59f3024 	ldr	r3, [pc, #36]	; 11f88 <CInterruptSystem::Initialize()+0x64>
   11f60:	e583420c 	str	r4, [r3, #524]	; 0x20c
   11f64:	e583221c 	str	r2, [r3, #540]	; 0x21c
   11f68:	e5832220 	str	r2, [r3, #544]	; 0x220
   11f6c:	e5832224 	str	r2, [r3, #548]	; 0x224
   11f70:	ee074fba 	mcr	15, 0, r4, cr7, cr10, {5}
   11f74:	f1080080 	cpsie	i
   11f78:	e3a00001 	mov	r0, #1
   11f7c:	e8bd8010 	pop	{r4, pc}
   11f80:	00012a98 	.word	0x00012a98
   11f84:	00012aa4 	.word	0x00012aa4
   11f88:	2000b000 	.word	0x2000b000

00011f8c <CInterruptSystem::DisconnectFIQ()>:
   11f8c:	e92d4010 	push	{r4, lr}
   11f90:	e59f4068 	ldr	r4, [pc, #104]	; 12000 <CInterruptSystem::DisconnectFIQ()+0x74>
   11f94:	e5d42001 	ldrb	r2, [r4, #1]
   11f98:	e5d43000 	ldrb	r3, [r4]
   11f9c:	e5d41002 	ldrb	r1, [r4, #2]
   11fa0:	e1833402 	orr	r3, r3, r2, lsl #8
   11fa4:	e5d42003 	ldrb	r2, [r4, #3]
   11fa8:	e1833801 	orr	r3, r3, r1, lsl #16
   11fac:	e1933c02 	orrs	r3, r3, r2, lsl #24
   11fb0:	0a00000d 	beq	11fec <CInterruptSystem::DisconnectFIQ()+0x60>
   11fb4:	e3a03000 	mov	r3, #0
   11fb8:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   11fbc:	e59f2040 	ldr	r2, [pc, #64]	; 12004 <CInterruptSystem::DisconnectFIQ()+0x78>
   11fc0:	e582320c 	str	r3, [r2, #524]	; 0x20c
   11fc4:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   11fc8:	e5c43000 	strb	r3, [r4]
   11fcc:	e5c43001 	strb	r3, [r4, #1]
   11fd0:	e5c43002 	strb	r3, [r4, #2]
   11fd4:	e5c43003 	strb	r3, [r4, #3]
   11fd8:	e5c43004 	strb	r3, [r4, #4]
   11fdc:	e5c43005 	strb	r3, [r4, #5]
   11fe0:	e5c43006 	strb	r3, [r4, #6]
   11fe4:	e5c43007 	strb	r3, [r4, #7]
   11fe8:	e8bd8010 	pop	{r4, pc}
   11fec:	e3a0209b 	mov	r2, #155	; 0x9b
   11ff0:	e59f1010 	ldr	r1, [pc, #16]	; 12008 <CInterruptSystem::DisconnectFIQ()+0x7c>
   11ff4:	e59f0010 	ldr	r0, [pc, #16]	; 1200c <CInterruptSystem::DisconnectFIQ()+0x80>
   11ff8:	ebfff874 	bl	101d0 <assertion_failed>
   11ffc:	eaffffec 	b	11fb4 <CInterruptSystem::DisconnectFIQ()+0x28>
   12000:	000155a4 	.word	0x000155a4
   12004:	2000b000 	.word	0x2000b000
   12008:	00014f6c 	.word	0x00014f6c
   1200c:	00014f7c 	.word	0x00014f7c

00012010 <CInterruptSystem::EnableIRQ(unsigned int)>:
   12010:	e3a03000 	mov	r3, #0
   12014:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   12018:	e3500047 	cmp	r0, #71	; 0x47
   1201c:	8a00000e 	bhi	1205c <CInterruptSystem::EnableIRQ(unsigned int)+0x4c>
   12020:	e350001f 	cmp	r0, #31
   12024:	9a00000a 	bls	12054 <CInterruptSystem::EnableIRQ(unsigned int)+0x44>
   12028:	e59f305c 	ldr	r3, [pc, #92]	; 1208c <CInterruptSystem::EnableIRQ(unsigned int)+0x7c>
   1202c:	e350003f 	cmp	r0, #63	; 0x3f
   12030:	e59f2058 	ldr	r2, [pc, #88]	; 12090 <CInterruptSystem::EnableIRQ(unsigned int)+0x80>
   12034:	91a02003 	movls	r2, r3
   12038:	e3a03001 	mov	r3, #1
   1203c:	e200001f 	and	r0, r0, #31
   12040:	e1a00013 	lsl	r0, r3, r0
   12044:	e5820000 	str	r0, [r2]
   12048:	e3a03000 	mov	r3, #0
   1204c:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   12050:	e12fff1e 	bx	lr
   12054:	e59f2038 	ldr	r2, [pc, #56]	; 12094 <CInterruptSystem::EnableIRQ(unsigned int)+0x84>
   12058:	eafffff6 	b	12038 <CInterruptSystem::EnableIRQ(unsigned int)+0x28>
   1205c:	e92d4010 	push	{r4, lr}
   12060:	e3a020a7 	mov	r2, #167	; 0xa7
   12064:	e59f102c 	ldr	r1, [pc, #44]	; 12098 <CInterruptSystem::EnableIRQ(unsigned int)+0x88>
   12068:	e59f002c 	ldr	r0, [pc, #44]	; 1209c <CInterruptSystem::EnableIRQ(unsigned int)+0x8c>
   1206c:	ebfff857 	bl	101d0 <assertion_failed>
   12070:	e3a020b4 	mov	r2, #180	; 0xb4
   12074:	e59f101c 	ldr	r1, [pc, #28]	; 12098 <CInterruptSystem::EnableIRQ(unsigned int)+0x88>
   12078:	e59f0020 	ldr	r0, [pc, #32]	; 120a0 <CInterruptSystem::EnableIRQ(unsigned int)+0x90>
   1207c:	ebfff853 	bl	101d0 <assertion_failed>
   12080:	e3a03000 	mov	r3, #0
   12084:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   12088:	e8bd8010 	pop	{r4, pc}
   1208c:	2000b214 	.word	0x2000b214
   12090:	2000b218 	.word	0x2000b218
   12094:	2000b210 	.word	0x2000b210
   12098:	00014f6c 	.word	0x00014f6c
   1209c:	00014f94 	.word	0x00014f94
   120a0:	00014fdc 	.word	0x00014fdc

000120a4 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)>:
   120a4:	e3510047 	cmp	r1, #71	; 0x47
   120a8:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   120ac:	e1a04001 	mov	r4, r1
   120b0:	e1a05000 	mov	r5, r0
   120b4:	e1a08002 	mov	r8, r2
   120b8:	e1a07003 	mov	r7, r3
   120bc:	8a00000c 	bhi	120f4 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)+0x50>
   120c0:	e7953104 	ldr	r3, [r5, r4, lsl #2]
   120c4:	e0856104 	add	r6, r5, r4, lsl #2
   120c8:	e3530000 	cmp	r3, #0
   120cc:	0a000003 	beq	120e0 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)+0x3c>
   120d0:	e3a02077 	mov	r2, #119	; 0x77
   120d4:	e59f102c 	ldr	r1, [pc, #44]	; 12108 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)+0x64>
   120d8:	e59f002c 	ldr	r0, [pc, #44]	; 1210c <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)+0x68>
   120dc:	ebfff83b 	bl	101d0 <assertion_failed>
   120e0:	e7858104 	str	r8, [r5, r4, lsl #2]
   120e4:	e1a00004 	mov	r0, r4
   120e8:	e5867120 	str	r7, [r6, #288]	; 0x120
   120ec:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   120f0:	eaffffc6 	b	12010 <CInterruptSystem::EnableIRQ(unsigned int)>
   120f4:	e3a02076 	mov	r2, #118	; 0x76
   120f8:	e59f1008 	ldr	r1, [pc, #8]	; 12108 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)+0x64>
   120fc:	e59f000c 	ldr	r0, [pc, #12]	; 12110 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)+0x6c>
   12100:	ebfff832 	bl	101d0 <assertion_failed>
   12104:	eaffffed 	b	120c0 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)+0x1c>
   12108:	00014f6c 	.word	0x00014f6c
   1210c:	00014fa8 	.word	0x00014fa8
   12110:	00014f94 	.word	0x00014f94

00012114 <CInterruptSystem::DisableIRQ(unsigned int)>:
   12114:	e3a03000 	mov	r3, #0
   12118:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   1211c:	e3500047 	cmp	r0, #71	; 0x47
   12120:	8a00000e 	bhi	12160 <CInterruptSystem::DisableIRQ(unsigned int)+0x4c>
   12124:	e350001f 	cmp	r0, #31
   12128:	9a00000a 	bls	12158 <CInterruptSystem::DisableIRQ(unsigned int)+0x44>
   1212c:	e59f305c 	ldr	r3, [pc, #92]	; 12190 <CInterruptSystem::DisableIRQ(unsigned int)+0x7c>
   12130:	e350003f 	cmp	r0, #63	; 0x3f
   12134:	e59f2058 	ldr	r2, [pc, #88]	; 12194 <CInterruptSystem::DisableIRQ(unsigned int)+0x80>
   12138:	91a02003 	movls	r2, r3
   1213c:	e3a03001 	mov	r3, #1
   12140:	e200001f 	and	r0, r0, #31
   12144:	e1a00013 	lsl	r0, r3, r0
   12148:	e5820000 	str	r0, [r2]
   1214c:	e3a03000 	mov	r3, #0
   12150:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   12154:	e12fff1e 	bx	lr
   12158:	e59f2038 	ldr	r2, [pc, #56]	; 12198 <CInterruptSystem::DisableIRQ(unsigned int)+0x84>
   1215c:	eafffff6 	b	1213c <CInterruptSystem::DisableIRQ(unsigned int)+0x28>
   12160:	e92d4010 	push	{r4, lr}
   12164:	e3a020bf 	mov	r2, #191	; 0xbf
   12168:	e59f102c 	ldr	r1, [pc, #44]	; 1219c <CInterruptSystem::DisableIRQ(unsigned int)+0x88>
   1216c:	e59f002c 	ldr	r0, [pc, #44]	; 121a0 <CInterruptSystem::DisableIRQ(unsigned int)+0x8c>
   12170:	ebfff816 	bl	101d0 <assertion_failed>
   12174:	e3a020cc 	mov	r2, #204	; 0xcc
   12178:	e59f101c 	ldr	r1, [pc, #28]	; 1219c <CInterruptSystem::DisableIRQ(unsigned int)+0x88>
   1217c:	e59f0020 	ldr	r0, [pc, #32]	; 121a4 <CInterruptSystem::DisableIRQ(unsigned int)+0x90>
   12180:	ebfff812 	bl	101d0 <assertion_failed>
   12184:	e3a03000 	mov	r3, #0
   12188:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   1218c:	e8bd8010 	pop	{r4, pc}
   12190:	2000b220 	.word	0x2000b220
   12194:	2000b224 	.word	0x2000b224
   12198:	2000b21c 	.word	0x2000b21c
   1219c:	00014f6c 	.word	0x00014f6c
   121a0:	00014f94 	.word	0x00014f94
   121a4:	00014fdc 	.word	0x00014fdc

000121a8 <CInterruptSystem::DisconnectIRQ(unsigned int)>:
   121a8:	e3510047 	cmp	r1, #71	; 0x47
   121ac:	e92d4070 	push	{r4, r5, r6, lr}
   121b0:	e1a04001 	mov	r4, r1
   121b4:	e1a05000 	mov	r5, r0
   121b8:	8a000009 	bhi	121e4 <CInterruptSystem::DisconnectIRQ(unsigned int)+0x3c>
   121bc:	e7953104 	ldr	r3, [r5, r4, lsl #2]
   121c0:	e0856104 	add	r6, r5, r4, lsl #2
   121c4:	e3530000 	cmp	r3, #0
   121c8:	0a00000d 	beq	12204 <CInterruptSystem::DisconnectIRQ(unsigned int)+0x5c>
   121cc:	e1a00004 	mov	r0, r4
   121d0:	ebffffcf 	bl	12114 <CInterruptSystem::DisableIRQ(unsigned int)>
   121d4:	e3a03000 	mov	r3, #0
   121d8:	e7853104 	str	r3, [r5, r4, lsl #2]
   121dc:	e5863120 	str	r3, [r6, #288]	; 0x120
   121e0:	e8bd8070 	pop	{r4, r5, r6, pc}
   121e4:	e3a02081 	mov	r2, #129	; 0x81
   121e8:	e59f1028 	ldr	r1, [pc, #40]	; 12218 <CInterruptSystem::DisconnectIRQ(unsigned int)+0x70>
   121ec:	e59f0028 	ldr	r0, [pc, #40]	; 1221c <CInterruptSystem::DisconnectIRQ(unsigned int)+0x74>
   121f0:	ebfff7f6 	bl	101d0 <assertion_failed>
   121f4:	e7953104 	ldr	r3, [r5, r4, lsl #2]
   121f8:	e0856104 	add	r6, r5, r4, lsl #2
   121fc:	e3530000 	cmp	r3, #0
   12200:	1afffff1 	bne	121cc <CInterruptSystem::DisconnectIRQ(unsigned int)+0x24>
   12204:	e3a02082 	mov	r2, #130	; 0x82
   12208:	e59f1008 	ldr	r1, [pc, #8]	; 12218 <CInterruptSystem::DisconnectIRQ(unsigned int)+0x70>
   1220c:	e59f000c 	ldr	r0, [pc, #12]	; 12220 <CInterruptSystem::DisconnectIRQ(unsigned int)+0x78>
   12210:	ebfff7ee 	bl	101d0 <assertion_failed>
   12214:	eaffffec 	b	121cc <CInterruptSystem::DisconnectIRQ(unsigned int)+0x24>
   12218:	00014f6c 	.word	0x00014f6c
   1221c:	00014f94 	.word	0x00014f94
   12220:	00014fc4 	.word	0x00014fc4

00012224 <CInterruptSystem::EnableFIQ(unsigned int)>:
   12224:	e92d4010 	push	{r4, lr}
   12228:	e3a03000 	mov	r3, #0
   1222c:	e1a04000 	mov	r4, r0
   12230:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   12234:	e3500047 	cmp	r0, #71	; 0x47
   12238:	9a000003 	bls	1224c <CInterruptSystem::EnableFIQ(unsigned int)+0x28>
   1223c:	e3a020d7 	mov	r2, #215	; 0xd7
   12240:	e59f101c 	ldr	r1, [pc, #28]	; 12264 <CInterruptSystem::EnableFIQ(unsigned int)+0x40>
   12244:	e59f001c 	ldr	r0, [pc, #28]	; 12268 <CInterruptSystem::EnableFIQ(unsigned int)+0x44>
   12248:	ebfff7e0 	bl	101d0 <assertion_failed>
   1224c:	e59f3018 	ldr	r3, [pc, #24]	; 1226c <CInterruptSystem::EnableFIQ(unsigned int)+0x48>
   12250:	e3844080 	orr	r4, r4, #128	; 0x80
   12254:	e583420c 	str	r4, [r3, #524]	; 0x20c
   12258:	e3a03000 	mov	r3, #0
   1225c:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   12260:	e8bd8010 	pop	{r4, pc}
   12264:	00014f6c 	.word	0x00014f6c
   12268:	00014fe0 	.word	0x00014fe0
   1226c:	2000b000 	.word	0x2000b000

00012270 <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)>:
   12270:	e3510047 	cmp	r1, #71	; 0x47
   12274:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   12278:	e1a07001 	mov	r7, r1
   1227c:	e1a05002 	mov	r5, r2
   12280:	e1a06003 	mov	r6, r3
   12284:	8a00001f 	bhi	12308 <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)+0x98>
   12288:	e3550000 	cmp	r5, #0
   1228c:	0a000023 	beq	12320 <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)+0xb0>
   12290:	e59f409c 	ldr	r4, [pc, #156]	; 12334 <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)+0xc4>
   12294:	e5d42001 	ldrb	r2, [r4, #1]
   12298:	e5d43000 	ldrb	r3, [r4]
   1229c:	e5d41002 	ldrb	r1, [r4, #2]
   122a0:	e1833402 	orr	r3, r3, r2, lsl #8
   122a4:	e5d42003 	ldrb	r2, [r4, #3]
   122a8:	e1833801 	orr	r3, r3, r1, lsl #16
   122ac:	e1933c02 	orrs	r3, r3, r2, lsl #24
   122b0:	0a000003 	beq	122c4 <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)+0x54>
   122b4:	e3a02091 	mov	r2, #145	; 0x91
   122b8:	e59f1078 	ldr	r1, [pc, #120]	; 12338 <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)+0xc8>
   122bc:	e59f0078 	ldr	r0, [pc, #120]	; 1233c <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)+0xcc>
   122c0:	ebfff7c2 	bl	101d0 <assertion_failed>
   122c4:	e1a02425 	lsr	r2, r5, #8
   122c8:	e1a03825 	lsr	r3, r5, #16
   122cc:	e5c45000 	strb	r5, [r4]
   122d0:	e5c46004 	strb	r6, [r4, #4]
   122d4:	e1a05c25 	lsr	r5, r5, #24
   122d8:	e5c42001 	strb	r2, [r4, #1]
   122dc:	e5c43002 	strb	r3, [r4, #2]
   122e0:	e1a02426 	lsr	r2, r6, #8
   122e4:	e1a03826 	lsr	r3, r6, #16
   122e8:	e1a06c26 	lsr	r6, r6, #24
   122ec:	e1a00007 	mov	r0, r7
   122f0:	e5c45003 	strb	r5, [r4, #3]
   122f4:	e5c42005 	strb	r2, [r4, #5]
   122f8:	e5c43006 	strb	r3, [r4, #6]
   122fc:	e5c46007 	strb	r6, [r4, #7]
   12300:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   12304:	eaffffc6 	b	12224 <CInterruptSystem::EnableFIQ(unsigned int)>
   12308:	e3a0208f 	mov	r2, #143	; 0x8f
   1230c:	e59f1024 	ldr	r1, [pc, #36]	; 12338 <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)+0xc8>
   12310:	e59f0028 	ldr	r0, [pc, #40]	; 12340 <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)+0xd0>
   12314:	ebfff7ad 	bl	101d0 <assertion_failed>
   12318:	e3550000 	cmp	r5, #0
   1231c:	1affffdb 	bne	12290 <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)+0x20>
   12320:	e3a02090 	mov	r2, #144	; 0x90
   12324:	e59f100c 	ldr	r1, [pc, #12]	; 12338 <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)+0xc8>
   12328:	e59f0014 	ldr	r0, [pc, #20]	; 12344 <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)+0xd4>
   1232c:	ebfff7a7 	bl	101d0 <assertion_failed>
   12330:	eaffffd6 	b	12290 <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)+0x20>
   12334:	000155a4 	.word	0x000155a4
   12338:	00014f6c 	.word	0x00014f6c
   1233c:	00014ff4 	.word	0x00014ff4
   12340:	00014fe0 	.word	0x00014fe0
   12344:	00014f84 	.word	0x00014f84

00012348 <CInterruptSystem::DisableFIQ()>:
   12348:	e3a03000 	mov	r3, #0
   1234c:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   12350:	e59f2008 	ldr	r2, [pc, #8]	; 12360 <CInterruptSystem::DisableFIQ()+0x18>
   12354:	e582320c 	str	r3, [r2, #524]	; 0x20c
   12358:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   1235c:	e12fff1e 	bx	lr
   12360:	2000b000 	.word	0x2000b000

00012364 <CInterruptSystem::Get()>:
   12364:	e92d4010 	push	{r4, lr}
   12368:	e59f4020 	ldr	r4, [pc, #32]	; 12390 <CInterruptSystem::Get()+0x2c>
   1236c:	e5940000 	ldr	r0, [r4]
   12370:	e3500000 	cmp	r0, #0
   12374:	18bd8010 	popne	{r4, pc}
   12378:	e3a020e9 	mov	r2, #233	; 0xe9
   1237c:	e59f1010 	ldr	r1, [pc, #16]	; 12394 <CInterruptSystem::Get()+0x30>
   12380:	e59f0010 	ldr	r0, [pc, #16]	; 12398 <CInterruptSystem::Get()+0x34>
   12384:	ebfff791 	bl	101d0 <assertion_failed>
   12388:	e5940000 	ldr	r0, [r4]
   1238c:	e8bd8010 	pop	{r4, pc}
   12390:	00015668 	.word	0x00015668
   12394:	00014f6c 	.word	0x00014f6c
   12398:	000139ac 	.word	0x000139ac

0001239c <CInterruptSystem::CallIRQHandler(unsigned int)>:
   1239c:	e3510047 	cmp	r1, #71	; 0x47
   123a0:	e92d4070 	push	{r4, r5, r6, lr}
   123a4:	e1a06001 	mov	r6, r1
   123a8:	e1a05000 	mov	r5, r0
   123ac:	8a000007 	bhi	123d0 <CInterruptSystem::CallIRQHandler(unsigned int)+0x34>
   123b0:	e7954106 	ldr	r4, [r5, r6, lsl #2]
   123b4:	e0855106 	add	r5, r5, r6, lsl #2
   123b8:	e3540000 	cmp	r4, #0
   123bc:	0a000008 	beq	123e4 <CInterruptSystem::CallIRQHandler(unsigned int)+0x48>
   123c0:	e5950120 	ldr	r0, [r5, #288]	; 0x120
   123c4:	e12fff34 	blx	r4
   123c8:	e3a00001 	mov	r0, #1
   123cc:	e8bd8070 	pop	{r4, r5, r6, pc}
   123d0:	e3a020ef 	mov	r2, #239	; 0xef
   123d4:	e59f1018 	ldr	r1, [pc, #24]	; 123f4 <CInterruptSystem::CallIRQHandler(unsigned int)+0x58>
   123d8:	e59f0018 	ldr	r0, [pc, #24]	; 123f8 <CInterruptSystem::CallIRQHandler(unsigned int)+0x5c>
   123dc:	ebfff77b 	bl	101d0 <assertion_failed>
   123e0:	eafffff2 	b	123b0 <CInterruptSystem::CallIRQHandler(unsigned int)+0x14>
   123e4:	e1a00006 	mov	r0, r6
   123e8:	ebffff49 	bl	12114 <CInterruptSystem::DisableIRQ(unsigned int)>
   123ec:	e1a00004 	mov	r0, r4
   123f0:	e8bd8070 	pop	{r4, r5, r6, pc}
   123f4:	00014f6c 	.word	0x00014f6c
   123f8:	00014f94 	.word	0x00014f94

000123fc <CInterruptSystem::InterruptHandler()>:
   123fc:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   12400:	e59f70a8 	ldr	r7, [pc, #168]	; 124b0 <CInterruptSystem::InterruptHandler()+0xb4>
   12404:	e24dd010 	sub	sp, sp, #16
   12408:	e5973000 	ldr	r3, [r7]
   1240c:	e3530000 	cmp	r3, #0
   12410:	0a000021 	beq	1249c <CInterruptSystem::InterruptHandler()+0xa0>
   12414:	e3a06000 	mov	r6, #0
   12418:	ee076f9a 	mcr	15, 0, r6, cr7, cr10, {4}
   1241c:	e59f3090 	ldr	r3, [pc, #144]	; 124b4 <CInterruptSystem::InterruptHandler()+0xb8>
   12420:	e5932204 	ldr	r2, [r3, #516]	; 0x204
   12424:	e58d2004 	str	r2, [sp, #4]
   12428:	e5932208 	ldr	r2, [r3, #520]	; 0x208
   1242c:	e58d2008 	str	r2, [sp, #8]
   12430:	e5933200 	ldr	r3, [r3, #512]	; 0x200
   12434:	e6ef3073 	uxtb	r3, r3
   12438:	e58d300c 	str	r3, [sp, #12]
   1243c:	ee076fba 	mcr	15, 0, r6, cr7, cr10, {5}
   12440:	e28d8004 	add	r8, sp, #4
   12444:	e7984106 	ldr	r4, [r8, r6, lsl #2]
   12448:	e3540000 	cmp	r4, #0
   1244c:	1a000004 	bne	12464 <CInterruptSystem::InterruptHandler()+0x68>
   12450:	e2866001 	add	r6, r6, #1
   12454:	e3560003 	cmp	r6, #3
   12458:	1afffff9 	bne	12444 <CInterruptSystem::InterruptHandler()+0x48>
   1245c:	e28dd010 	add	sp, sp, #16
   12460:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   12464:	e1a05286 	lsl	r5, r6, #5
   12468:	ea000002 	b	12478 <CInterruptSystem::InterruptHandler()+0x7c>
   1246c:	e1b040a4 	lsrs	r4, r4, #1
   12470:	e2855001 	add	r5, r5, #1
   12474:	0afffff5 	beq	12450 <CInterruptSystem::InterruptHandler()+0x54>
   12478:	e3140001 	tst	r4, #1
   1247c:	0afffffa 	beq	1246c <CInterruptSystem::InterruptHandler()+0x70>
   12480:	e1a01005 	mov	r1, r5
   12484:	e5970000 	ldr	r0, [r7]
   12488:	ebffffc3 	bl	1239c <CInterruptSystem::CallIRQHandler(unsigned int)>
   1248c:	e3500000 	cmp	r0, #0
   12490:	0afffff5 	beq	1246c <CInterruptSystem::InterruptHandler()+0x70>
   12494:	e28dd010 	add	sp, sp, #16
   12498:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   1249c:	e59f2014 	ldr	r2, [pc, #20]	; 124b8 <CInterruptSystem::InterruptHandler()+0xbc>
   124a0:	e59f1014 	ldr	r1, [pc, #20]	; 124bc <CInterruptSystem::InterruptHandler()+0xc0>
   124a4:	e59f0014 	ldr	r0, [pc, #20]	; 124c0 <CInterruptSystem::InterruptHandler()+0xc4>
   124a8:	ebfff748 	bl	101d0 <assertion_failed>
   124ac:	eaffffd8 	b	12414 <CInterruptSystem::InterruptHandler()+0x18>
   124b0:	00015668 	.word	0x00015668
   124b4:	2000b000 	.word	0x2000b000
   124b8:	00000102 	.word	0x00000102
   124bc:	00014f6c 	.word	0x00014f6c
   124c0:	000139ac 	.word	0x000139ac

000124c4 <InterruptHandler>:
   124c4:	e92d4010 	push	{r4, lr}
   124c8:	e3a04000 	mov	r4, #0
   124cc:	ee074fba 	mcr	15, 0, r4, cr7, cr10, {5}
   124d0:	ebffffc9 	bl	123fc <CInterruptSystem::InterruptHandler()>
   124d4:	ee074f9a 	mcr	15, 0, r4, cr7, cr10, {4}
   124d8:	e8bd8010 	pop	{r4, pc}

000124dc <CPtrList::CPtrList()>:
   124dc:	e3a02000 	mov	r2, #0
   124e0:	e5802000 	str	r2, [r0]
   124e4:	e12fff1e 	bx	lr

000124e8 <CPtrList::~CPtrList()>:
   124e8:	e5903000 	ldr	r3, [r0]
   124ec:	e92d4010 	push	{r4, lr}
   124f0:	e3530000 	cmp	r3, #0
   124f4:	e1a04000 	mov	r4, r0
   124f8:	0a000003 	beq	1250c <CPtrList::~CPtrList()+0x24>
   124fc:	e3a0202a 	mov	r2, #42	; 0x2a
   12500:	e59f100c 	ldr	r1, [pc, #12]	; 12514 <CPtrList::~CPtrList()+0x2c>
   12504:	e59f000c 	ldr	r0, [pc, #12]	; 12518 <CPtrList::~CPtrList()+0x30>
   12508:	ebfff730 	bl	101d0 <assertion_failed>
   1250c:	e1a00004 	mov	r0, r4
   12510:	e8bd8010 	pop	{r4, pc}
   12514:	0001500c 	.word	0x0001500c
   12518:	00015018 	.word	0x00015018

0001251c <CPtrList::GetFirst()>:
   1251c:	e5900000 	ldr	r0, [r0]
   12520:	e12fff1e 	bx	lr

00012524 <CPtrList::GetNext(TPtrListElement*)>:
   12524:	e92d4010 	push	{r4, lr}
   12528:	e2514000 	subs	r4, r1, #0
   1252c:	0a000009 	beq	12558 <CPtrList::GetNext(TPtrListElement*)+0x34>
   12530:	e59f3034 	ldr	r3, [pc, #52]	; 1256c <CPtrList::GetNext(TPtrListElement*)+0x48>
   12534:	e5942000 	ldr	r2, [r4]
   12538:	e1520003 	cmp	r2, r3
   1253c:	0a000003 	beq	12550 <CPtrList::GetNext(TPtrListElement*)+0x2c>
   12540:	e3a02035 	mov	r2, #53	; 0x35
   12544:	e59f1024 	ldr	r1, [pc, #36]	; 12570 <CPtrList::GetNext(TPtrListElement*)+0x4c>
   12548:	e59f0024 	ldr	r0, [pc, #36]	; 12574 <CPtrList::GetNext(TPtrListElement*)+0x50>
   1254c:	ebfff71f 	bl	101d0 <assertion_failed>
   12550:	e5940008 	ldr	r0, [r4, #8]
   12554:	e8bd8010 	pop	{r4, pc}
   12558:	e3a02034 	mov	r2, #52	; 0x34
   1255c:	e59f100c 	ldr	r1, [pc, #12]	; 12570 <CPtrList::GetNext(TPtrListElement*)+0x4c>
   12560:	e59f0010 	ldr	r0, [pc, #16]	; 12578 <CPtrList::GetNext(TPtrListElement*)+0x54>
   12564:	ebfff719 	bl	101d0 <assertion_failed>
   12568:	eafffff0 	b	12530 <CPtrList::GetNext(TPtrListElement*)+0xc>
   1256c:	504c4d43 	.word	0x504c4d43
   12570:	0001500c 	.word	0x0001500c
   12574:	00015038 	.word	0x00015038
   12578:	00015028 	.word	0x00015028

0001257c <CPtrList::GetPtr(TPtrListElement*)>:
   1257c:	e92d4010 	push	{r4, lr}
   12580:	e2514000 	subs	r4, r1, #0
   12584:	0a000009 	beq	125b0 <CPtrList::GetPtr(TPtrListElement*)+0x34>
   12588:	e59f3034 	ldr	r3, [pc, #52]	; 125c4 <CPtrList::GetPtr(TPtrListElement*)+0x48>
   1258c:	e5942000 	ldr	r2, [r4]
   12590:	e1520003 	cmp	r2, r3
   12594:	0a000003 	beq	125a8 <CPtrList::GetPtr(TPtrListElement*)+0x2c>
   12598:	e3a0203d 	mov	r2, #61	; 0x3d
   1259c:	e59f1024 	ldr	r1, [pc, #36]	; 125c8 <CPtrList::GetPtr(TPtrListElement*)+0x4c>
   125a0:	e59f0024 	ldr	r0, [pc, #36]	; 125cc <CPtrList::GetPtr(TPtrListElement*)+0x50>
   125a4:	ebfff709 	bl	101d0 <assertion_failed>
   125a8:	e594000c 	ldr	r0, [r4, #12]
   125ac:	e8bd8010 	pop	{r4, pc}
   125b0:	e3a0203c 	mov	r2, #60	; 0x3c
   125b4:	e59f100c 	ldr	r1, [pc, #12]	; 125c8 <CPtrList::GetPtr(TPtrListElement*)+0x4c>
   125b8:	e59f0010 	ldr	r0, [pc, #16]	; 125d0 <CPtrList::GetPtr(TPtrListElement*)+0x54>
   125bc:	ebfff703 	bl	101d0 <assertion_failed>
   125c0:	eafffff0 	b	12588 <CPtrList::GetPtr(TPtrListElement*)+0xc>
   125c4:	504c4d43 	.word	0x504c4d43
   125c8:	0001500c 	.word	0x0001500c
   125cc:	00015038 	.word	0x00015038
   125d0:	00015028 	.word	0x00015028

000125d4 <CPtrList::InsertBefore(TPtrListElement*, void*)>:
   125d4:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   125d8:	e1a06000 	mov	r6, r0
   125dc:	e3a00010 	mov	r0, #16
   125e0:	e1a07002 	mov	r7, r2
   125e4:	e1a04001 	mov	r4, r1
   125e8:	ebfff568 	bl	fb90 <operator new(unsigned int)>
   125ec:	e5962000 	ldr	r2, [r6]
   125f0:	e59f30cc 	ldr	r3, [pc, #204]	; 126c4 <CPtrList::InsertBefore(TPtrListElement*, void*)+0xf0>
   125f4:	e3520000 	cmp	r2, #0
   125f8:	e1a05000 	mov	r5, r0
   125fc:	e580700c 	str	r7, [r0, #12]
   12600:	e5803000 	str	r3, [r0]
   12604:	0a000029 	beq	126b0 <CPtrList::InsertBefore(TPtrListElement*, void*)+0xdc>
   12608:	e3540000 	cmp	r4, #0
   1260c:	0a000022 	beq	1269c <CPtrList::InsertBefore(TPtrListElement*, void*)+0xc8>
   12610:	e59f30ac 	ldr	r3, [pc, #172]	; 126c4 <CPtrList::InsertBefore(TPtrListElement*, void*)+0xf0>
   12614:	e5942000 	ldr	r2, [r4]
   12618:	e1520003 	cmp	r2, r3
   1261c:	0a000003 	beq	12630 <CPtrList::InsertBefore(TPtrListElement*, void*)+0x5c>
   12620:	e3a0204e 	mov	r2, #78	; 0x4e
   12624:	e59f109c 	ldr	r1, [pc, #156]	; 126c8 <CPtrList::InsertBefore(TPtrListElement*, void*)+0xf4>
   12628:	e59f009c 	ldr	r0, [pc, #156]	; 126cc <CPtrList::InsertBefore(TPtrListElement*, void*)+0xf8>
   1262c:	ebfff6e7 	bl	101d0 <assertion_failed>
   12630:	e5963000 	ldr	r3, [r6]
   12634:	e1530004 	cmp	r3, r4
   12638:	0a000011 	beq	12684 <CPtrList::InsertBefore(TPtrListElement*, void*)+0xb0>
   1263c:	e5943004 	ldr	r3, [r4, #4]
   12640:	e5854008 	str	r4, [r5, #8]
   12644:	e3530000 	cmp	r3, #0
   12648:	e5853004 	str	r3, [r5, #4]
   1264c:	0a000004 	beq	12664 <CPtrList::InsertBefore(TPtrListElement*, void*)+0x90>
   12650:	e59f206c 	ldr	r2, [pc, #108]	; 126c4 <CPtrList::InsertBefore(TPtrListElement*, void*)+0xf0>
   12654:	e5931000 	ldr	r1, [r3]
   12658:	e1510002 	cmp	r1, r2
   1265c:	1a000002 	bne	1266c <CPtrList::InsertBefore(TPtrListElement*, void*)+0x98>
   12660:	e5835008 	str	r5, [r3, #8]
   12664:	e5845004 	str	r5, [r4, #4]
   12668:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   1266c:	e3a02060 	mov	r2, #96	; 0x60
   12670:	e59f1050 	ldr	r1, [pc, #80]	; 126c8 <CPtrList::InsertBefore(TPtrListElement*, void*)+0xf4>
   12674:	e59f0054 	ldr	r0, [pc, #84]	; 126d0 <CPtrList::InsertBefore(TPtrListElement*, void*)+0xfc>
   12678:	ebfff6d4 	bl	101d0 <assertion_failed>
   1267c:	e5943004 	ldr	r3, [r4, #4]
   12680:	eafffff6 	b	12660 <CPtrList::InsertBefore(TPtrListElement*, void*)+0x8c>
   12684:	e3a03000 	mov	r3, #0
   12688:	e5845004 	str	r5, [r4, #4]
   1268c:	e5854008 	str	r4, [r5, #8]
   12690:	e5865000 	str	r5, [r6]
   12694:	e5853004 	str	r3, [r5, #4]
   12698:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   1269c:	e3a0204d 	mov	r2, #77	; 0x4d
   126a0:	e59f1020 	ldr	r1, [pc, #32]	; 126c8 <CPtrList::InsertBefore(TPtrListElement*, void*)+0xf4>
   126a4:	e59f0028 	ldr	r0, [pc, #40]	; 126d4 <CPtrList::InsertBefore(TPtrListElement*, void*)+0x100>
   126a8:	ebfff6c8 	bl	101d0 <assertion_failed>
   126ac:	eaffffd7 	b	12610 <CPtrList::InsertBefore(TPtrListElement*, void*)+0x3c>
   126b0:	e3a0204c 	mov	r2, #76	; 0x4c
   126b4:	e59f100c 	ldr	r1, [pc, #12]	; 126c8 <CPtrList::InsertBefore(TPtrListElement*, void*)+0xf4>
   126b8:	e59f0018 	ldr	r0, [pc, #24]	; 126d8 <CPtrList::InsertBefore(TPtrListElement*, void*)+0x104>
   126bc:	ebfff6c3 	bl	101d0 <assertion_failed>
   126c0:	eaffffd0 	b	12608 <CPtrList::InsertBefore(TPtrListElement*, void*)+0x34>
   126c4:	504c4d43 	.word	0x504c4d43
   126c8:	0001500c 	.word	0x0001500c
   126cc:	00015078 	.word	0x00015078
   126d0:	0001509c 	.word	0x0001509c
   126d4:	0001506c 	.word	0x0001506c
   126d8:	0001505c 	.word	0x0001505c

000126dc <CPtrList::InsertAfter(TPtrListElement*, void*)>:
   126dc:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   126e0:	e1a06000 	mov	r6, r0
   126e4:	e1a05001 	mov	r5, r1
   126e8:	e3a00010 	mov	r0, #16
   126ec:	e1a07002 	mov	r7, r2
   126f0:	ebfff526 	bl	fb90 <operator new(unsigned int)>
   126f4:	e59f30c4 	ldr	r3, [pc, #196]	; 127c0 <CPtrList::InsertAfter(TPtrListElement*, void*)+0xe4>
   126f8:	e3550000 	cmp	r5, #0
   126fc:	e5803000 	str	r3, [r0]
   12700:	e1a04000 	mov	r4, r0
   12704:	e580700c 	str	r7, [r0, #12]
   12708:	e5963000 	ldr	r3, [r6]
   1270c:	0a00001b 	beq	12780 <CPtrList::InsertAfter(TPtrListElement*, void*)+0xa4>
   12710:	e3530000 	cmp	r3, #0
   12714:	0a000024 	beq	127ac <CPtrList::InsertAfter(TPtrListElement*, void*)+0xd0>
   12718:	e59f30a0 	ldr	r3, [pc, #160]	; 127c0 <CPtrList::InsertAfter(TPtrListElement*, void*)+0xe4>
   1271c:	e5952000 	ldr	r2, [r5]
   12720:	e1520003 	cmp	r2, r3
   12724:	1a000010 	bne	1276c <CPtrList::InsertAfter(TPtrListElement*, void*)+0x90>
   12728:	e5953008 	ldr	r3, [r5, #8]
   1272c:	e5845004 	str	r5, [r4, #4]
   12730:	e3530000 	cmp	r3, #0
   12734:	e5843008 	str	r3, [r4, #8]
   12738:	0a000009 	beq	12764 <CPtrList::InsertAfter(TPtrListElement*, void*)+0x88>
   1273c:	e59f207c 	ldr	r2, [pc, #124]	; 127c0 <CPtrList::InsertAfter(TPtrListElement*, void*)+0xe4>
   12740:	e5931000 	ldr	r1, [r3]
   12744:	e1510002 	cmp	r1, r2
   12748:	0a000004 	beq	12760 <CPtrList::InsertAfter(TPtrListElement*, void*)+0x84>
   1274c:	e3a02085 	mov	r2, #133	; 0x85
   12750:	e59f106c 	ldr	r1, [pc, #108]	; 127c4 <CPtrList::InsertAfter(TPtrListElement*, void*)+0xe8>
   12754:	e59f006c 	ldr	r0, [pc, #108]	; 127c8 <CPtrList::InsertAfter(TPtrListElement*, void*)+0xec>
   12758:	ebfff69c 	bl	101d0 <assertion_failed>
   1275c:	e5953008 	ldr	r3, [r5, #8]
   12760:	e5834004 	str	r4, [r3, #4]
   12764:	e5854008 	str	r4, [r5, #8]
   12768:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   1276c:	e3a0207e 	mov	r2, #126	; 0x7e
   12770:	e59f104c 	ldr	r1, [pc, #76]	; 127c4 <CPtrList::InsertAfter(TPtrListElement*, void*)+0xe8>
   12774:	e59f0050 	ldr	r0, [pc, #80]	; 127cc <CPtrList::InsertAfter(TPtrListElement*, void*)+0xf0>
   12778:	ebfff694 	bl	101d0 <assertion_failed>
   1277c:	eaffffe9 	b	12728 <CPtrList::InsertAfter(TPtrListElement*, void*)+0x4c>
   12780:	e3530000 	cmp	r3, #0
   12784:	0a000003 	beq	12798 <CPtrList::InsertAfter(TPtrListElement*, void*)+0xbc>
   12788:	e3a02074 	mov	r2, #116	; 0x74
   1278c:	e59f1030 	ldr	r1, [pc, #48]	; 127c4 <CPtrList::InsertAfter(TPtrListElement*, void*)+0xe8>
   12790:	e59f0038 	ldr	r0, [pc, #56]	; 127d0 <CPtrList::InsertAfter(TPtrListElement*, void*)+0xf4>
   12794:	ebfff68d 	bl	101d0 <assertion_failed>
   12798:	e3a03000 	mov	r3, #0
   1279c:	e5864000 	str	r4, [r6]
   127a0:	e5843004 	str	r3, [r4, #4]
   127a4:	e5843008 	str	r3, [r4, #8]
   127a8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   127ac:	e3a0207d 	mov	r2, #125	; 0x7d
   127b0:	e59f100c 	ldr	r1, [pc, #12]	; 127c4 <CPtrList::InsertAfter(TPtrListElement*, void*)+0xe8>
   127b4:	e59f0018 	ldr	r0, [pc, #24]	; 127d4 <CPtrList::InsertAfter(TPtrListElement*, void*)+0xf8>
   127b8:	ebfff684 	bl	101d0 <assertion_failed>
   127bc:	eaffffd5 	b	12718 <CPtrList::InsertAfter(TPtrListElement*, void*)+0x3c>
   127c0:	504c4d43 	.word	0x504c4d43
   127c4:	0001500c 	.word	0x0001500c
   127c8:	000150e8 	.word	0x000150e8
   127cc:	000150c4 	.word	0x000150c4
   127d0:	00015018 	.word	0x00015018
   127d4:	0001505c 	.word	0x0001505c

000127d8 <CPtrList::Remove(TPtrListElement*)>:
   127d8:	e92d4070 	push	{r4, r5, r6, lr}
   127dc:	e2514000 	subs	r4, r1, #0
   127e0:	e1a05000 	mov	r5, r0
   127e4:	0a00003e 	beq	128e4 <CPtrList::Remove(TPtrListElement*)+0x10c>
   127e8:	e59f3120 	ldr	r3, [pc, #288]	; 12910 <CPtrList::Remove(TPtrListElement*)+0x138>
   127ec:	e5942000 	ldr	r2, [r4]
   127f0:	e1520003 	cmp	r2, r3
   127f4:	0a000003 	beq	12808 <CPtrList::Remove(TPtrListElement*)+0x30>
   127f8:	e3a02090 	mov	r2, #144	; 0x90
   127fc:	e59f1110 	ldr	r1, [pc, #272]	; 12914 <CPtrList::Remove(TPtrListElement*)+0x13c>
   12800:	e59f0110 	ldr	r0, [pc, #272]	; 12918 <CPtrList::Remove(TPtrListElement*)+0x140>
   12804:	ebfff671 	bl	101d0 <assertion_failed>
   12808:	e5953000 	ldr	r3, [r5]
   1280c:	e1530004 	cmp	r3, r4
   12810:	0a000023 	beq	128a4 <CPtrList::Remove(TPtrListElement*)+0xcc>
   12814:	e5943004 	ldr	r3, [r4, #4]
   12818:	e3530000 	cmp	r3, #0
   1281c:	0a000035 	beq	128f8 <CPtrList::Remove(TPtrListElement*)+0x120>
   12820:	e59f20e8 	ldr	r2, [pc, #232]	; 12910 <CPtrList::Remove(TPtrListElement*)+0x138>
   12824:	e5931000 	ldr	r1, [r3]
   12828:	e1510002 	cmp	r1, r2
   1282c:	1a00000f 	bne	12870 <CPtrList::Remove(TPtrListElement*)+0x98>
   12830:	e5942008 	ldr	r2, [r4, #8]
   12834:	e5832008 	str	r2, [r3, #8]
   12838:	e5942008 	ldr	r2, [r4, #8]
   1283c:	e3520000 	cmp	r2, #0
   12840:	0a000004 	beq	12858 <CPtrList::Remove(TPtrListElement*)+0x80>
   12844:	e59f10c4 	ldr	r1, [pc, #196]	; 12910 <CPtrList::Remove(TPtrListElement*)+0x138>
   12848:	e5920000 	ldr	r0, [r2]
   1284c:	e1500001 	cmp	r0, r1
   12850:	1a00000c 	bne	12888 <CPtrList::Remove(TPtrListElement*)+0xb0>
   12854:	e5823004 	str	r3, [r2, #4]
   12858:	e3a03000 	mov	r3, #0
   1285c:	e1a00004 	mov	r0, r4
   12860:	e5843000 	str	r3, [r4]
   12864:	e3a01010 	mov	r1, #16
   12868:	e8bd4070 	pop	{r4, r5, r6, lr}
   1286c:	eafff4cb 	b	fba0 <operator delete(void*, unsigned int)>
   12870:	e3a0209f 	mov	r2, #159	; 0x9f
   12874:	e59f1098 	ldr	r1, [pc, #152]	; 12914 <CPtrList::Remove(TPtrListElement*)+0x13c>
   12878:	e59f009c 	ldr	r0, [pc, #156]	; 1291c <CPtrList::Remove(TPtrListElement*)+0x144>
   1287c:	ebfff653 	bl	101d0 <assertion_failed>
   12880:	e5943004 	ldr	r3, [r4, #4]
   12884:	eaffffe9 	b	12830 <CPtrList::Remove(TPtrListElement*)+0x58>
   12888:	e3a020a4 	mov	r2, #164	; 0xa4
   1288c:	e59f1080 	ldr	r1, [pc, #128]	; 12914 <CPtrList::Remove(TPtrListElement*)+0x13c>
   12890:	e59f0088 	ldr	r0, [pc, #136]	; 12920 <CPtrList::Remove(TPtrListElement*)+0x148>
   12894:	ebfff64d 	bl	101d0 <assertion_failed>
   12898:	e5942008 	ldr	r2, [r4, #8]
   1289c:	e5943004 	ldr	r3, [r4, #4]
   128a0:	eaffffeb 	b	12854 <CPtrList::Remove(TPtrListElement*)+0x7c>
   128a4:	e5943008 	ldr	r3, [r4, #8]
   128a8:	e3530000 	cmp	r3, #0
   128ac:	e5853000 	str	r3, [r5]
   128b0:	0affffe8 	beq	12858 <CPtrList::Remove(TPtrListElement*)+0x80>
   128b4:	e59f2054 	ldr	r2, [pc, #84]	; 12910 <CPtrList::Remove(TPtrListElement*)+0x138>
   128b8:	e5931000 	ldr	r1, [r3]
   128bc:	e1510002 	cmp	r1, r2
   128c0:	0a000004 	beq	128d8 <CPtrList::Remove(TPtrListElement*)+0x100>
   128c4:	e3a02098 	mov	r2, #152	; 0x98
   128c8:	e59f1044 	ldr	r1, [pc, #68]	; 12914 <CPtrList::Remove(TPtrListElement*)+0x13c>
   128cc:	e59f004c 	ldr	r0, [pc, #76]	; 12920 <CPtrList::Remove(TPtrListElement*)+0x148>
   128d0:	ebfff63e 	bl	101d0 <assertion_failed>
   128d4:	e5943008 	ldr	r3, [r4, #8]
   128d8:	e3a02000 	mov	r2, #0
   128dc:	e5832004 	str	r2, [r3, #4]
   128e0:	eaffffdc 	b	12858 <CPtrList::Remove(TPtrListElement*)+0x80>
   128e4:	e3a0208f 	mov	r2, #143	; 0x8f
   128e8:	e59f1024 	ldr	r1, [pc, #36]	; 12914 <CPtrList::Remove(TPtrListElement*)+0x13c>
   128ec:	e59f0030 	ldr	r0, [pc, #48]	; 12924 <CPtrList::Remove(TPtrListElement*)+0x14c>
   128f0:	ebfff636 	bl	101d0 <assertion_failed>
   128f4:	eaffffbb 	b	127e8 <CPtrList::Remove(TPtrListElement*)+0x10>
   128f8:	e3a0209e 	mov	r2, #158	; 0x9e
   128fc:	e59f1010 	ldr	r1, [pc, #16]	; 12914 <CPtrList::Remove(TPtrListElement*)+0x13c>
   12900:	e59f0020 	ldr	r0, [pc, #32]	; 12928 <CPtrList::Remove(TPtrListElement*)+0x150>
   12904:	ebfff631 	bl	101d0 <assertion_failed>
   12908:	e5943004 	ldr	r3, [r4, #4]
   1290c:	eaffffc3 	b	12820 <CPtrList::Remove(TPtrListElement*)+0x48>
   12910:	504c4d43 	.word	0x504c4d43
   12914:	0001500c 	.word	0x0001500c
   12918:	00015038 	.word	0x00015038
   1291c:	00015158 	.word	0x00015158
   12920:	00015114 	.word	0x00015114
   12924:	00015028 	.word	0x00015028
   12928:	00015140 	.word	0x00015140

0001292c <CPtrList::Find(void*)>:
   1292c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   12930:	e5904000 	ldr	r4, [r0]
   12934:	e3540000 	cmp	r4, #0
   12938:	0a000013 	beq	1298c <CPtrList::Find(void*)+0x60>
   1293c:	e1a05001 	mov	r5, r1
   12940:	e59f6050 	ldr	r6, [pc, #80]	; 12998 <CPtrList::Find(void*)+0x6c>
   12944:	e59f8050 	ldr	r8, [pc, #80]	; 1299c <CPtrList::Find(void*)+0x70>
   12948:	e59f7050 	ldr	r7, [pc, #80]	; 129a0 <CPtrList::Find(void*)+0x74>
   1294c:	ea000002 	b	1295c <CPtrList::Find(void*)+0x30>
   12950:	e5944008 	ldr	r4, [r4, #8]
   12954:	e3540000 	cmp	r4, #0
   12958:	0a00000b 	beq	1298c <CPtrList::Find(void*)+0x60>
   1295c:	e5943000 	ldr	r3, [r4]
   12960:	e1530006 	cmp	r3, r6
   12964:	0a000003 	beq	12978 <CPtrList::Find(void*)+0x4c>
   12968:	e3a020b3 	mov	r2, #179	; 0xb3
   1296c:	e1a01008 	mov	r1, r8
   12970:	e1a00007 	mov	r0, r7
   12974:	ebfff615 	bl	101d0 <assertion_failed>
   12978:	e594300c 	ldr	r3, [r4, #12]
   1297c:	e1530005 	cmp	r3, r5
   12980:	1afffff2 	bne	12950 <CPtrList::Find(void*)+0x24>
   12984:	e1a00004 	mov	r0, r4
   12988:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   1298c:	e3a04000 	mov	r4, #0
   12990:	e1a00004 	mov	r0, r4
   12994:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   12998:	504c4d43 	.word	0x504c4d43
   1299c:	0001500c 	.word	0x0001500c
   129a0:	00015038 	.word	0x00015038

000129a4 <UndefinedInstructionInternal>:
   129a4:	e24dd004 	sub	sp, sp, #4
   129a8:	e24ee004 	sub	lr, lr, #4
   129ac:	e92d4000 	stmfd	sp!, {lr}
   129b0:	e14fe000 	mrs	lr, SPSR
   129b4:	e92d4000 	stmfd	sp!, {lr}
   129b8:	e94d7fff 	stmdb	sp, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr}^
   129bc:	e24dd03c 	sub	sp, sp, #60	; 0x3c
   129c0:	e1a0100d 	mov	r1, sp
   129c4:	f1020012 	cps	#18
   129c8:	e1a0200d 	mov	r2, sp
   129cc:	e1a0300e 	mov	r3, lr
   129d0:	f1020011 	cps	#17
   129d4:	e1a0400d 	mov	r4, sp
   129d8:	e1a0500e 	mov	r5, lr
   129dc:	f102001f 	cps	#31
   129e0:	e1a0d001 	mov	sp, r1
   129e4:	e92d003c 	push	{r2, r3, r4, r5}
   129e8:	e1a0100d 	mov	r1, sp
   129ec:	e3a00001 	mov	r0, #1
   129f0:	ea00013c 	b	12ee8 <ExceptionHandler>

000129f4 <PrefetchAbortStub>:
   129f4:	e24dd004 	sub	sp, sp, #4
   129f8:	e24ee004 	sub	lr, lr, #4
   129fc:	e92d4000 	stmfd	sp!, {lr}
   12a00:	e14fe000 	mrs	lr, SPSR
   12a04:	e92d4000 	stmfd	sp!, {lr}
   12a08:	e94d7fff 	stmdb	sp, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr}^
   12a0c:	e24dd03c 	sub	sp, sp, #60	; 0x3c
   12a10:	e1a0100d 	mov	r1, sp
   12a14:	f1020012 	cps	#18
   12a18:	e1a0200d 	mov	r2, sp
   12a1c:	e1a0300e 	mov	r3, lr
   12a20:	f1020011 	cps	#17
   12a24:	e1a0400d 	mov	r4, sp
   12a28:	e1a0500e 	mov	r5, lr
   12a2c:	f102001f 	cps	#31
   12a30:	e1a0d001 	mov	sp, r1
   12a34:	e92d003c 	push	{r2, r3, r4, r5}
   12a38:	e1a0100d 	mov	r1, sp
   12a3c:	e3a00002 	mov	r0, #2
   12a40:	ea000128 	b	12ee8 <ExceptionHandler>

00012a44 <DataAbortStub>:
   12a44:	e24dd004 	sub	sp, sp, #4
   12a48:	e24ee008 	sub	lr, lr, #8
   12a4c:	e92d4000 	stmfd	sp!, {lr}
   12a50:	e14fe000 	mrs	lr, SPSR
   12a54:	e92d4000 	stmfd	sp!, {lr}
   12a58:	e94d7fff 	stmdb	sp, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr}^
   12a5c:	e24dd03c 	sub	sp, sp, #60	; 0x3c
   12a60:	e1a0100d 	mov	r1, sp
   12a64:	f1020012 	cps	#18
   12a68:	e1a0200d 	mov	r2, sp
   12a6c:	e1a0300e 	mov	r3, lr
   12a70:	f1020011 	cps	#17
   12a74:	e1a0400d 	mov	r4, sp
   12a78:	e1a0500e 	mov	r5, lr
   12a7c:	f102001f 	cps	#31
   12a80:	e1a0d001 	mov	sp, r1
   12a84:	e92d003c 	push	{r2, r3, r4, r5}
   12a88:	e1a0100d 	mov	r1, sp
   12a8c:	e3a00003 	mov	r0, #3
   12a90:	ea000114 	b	12ee8 <ExceptionHandler>

00012a94 <UndefinedInstructionStub>:
   12a94:	e92d4001 	push	{r0, lr}
   12a98:	eef80a10 	vmrs	r0, fpexc
   12a9c:	e3100102 	tst	r0, #-2147483648	; 0x80000000
   12aa0:	0affffbf 	beq	129a4 <UndefinedInstructionInternal>
   12aa4:	e3c00102 	bic	r0, r0, #-2147483648	; 0x80000000
   12aa8:	eee80a10 	vmsr	fpexc, r0
   12aac:	e8fd8001 	ldm	sp!, {r0, pc}^

00012ab0 <IRQStub>:
   12ab0:	e24ee004 	sub	lr, lr, #4
   12ab4:	e92d500f 	push	{r0, r1, r2, r3, ip, lr}
   12ab8:	ebfffe81 	bl	124c4 <InterruptHandler>
   12abc:	e8fd900f 	ldm	sp!, {r0, r1, r2, r3, ip, pc}^

00012ac0 <FIQStub>:
   12ac0:	e24ee004 	sub	lr, lr, #4
   12ac4:	e92d500f 	push	{r0, r1, r2, r3, ip, lr}
   12ac8:	e3a03000 	mov	r3, #0
   12acc:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   12ad0:	e59f2040 	ldr	r2, [pc, #64]	; 12b18 <FIQStub+0x58>
   12ad4:	e5921000 	ldr	r1, [r2]
   12ad8:	e3510000 	cmp	r1, #0
   12adc:	0a000004 	beq	12af4 <FIQStub+0x34>
   12ae0:	e5920004 	ldr	r0, [r2, #4]
   12ae4:	e12fff31 	blx	r1
   12ae8:	e3a03000 	mov	r3, #0
   12aec:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   12af0:	e8fd900f 	ldm	sp!, {r0, r1, r2, r3, ip, pc}^
   12af4:	e3a03000 	mov	r3, #0
   12af8:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   12afc:	e59f1018 	ldr	r1, [pc, #24]	; 12b1c <FIQStub+0x5c>
   12b00:	e3a00000 	mov	r0, #0
   12b04:	e5810000 	str	r0, [r1]
   12b08:	e3a03000 	mov	r3, #0
   12b0c:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   12b10:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   12b14:	e8fd900f 	ldm	sp!, {r0, r1, r2, r3, ip, pc}^
   12b18:	000155a4 	.word	0x000155a4
   12b1c:	2000b20c 	.word	0x2000b20c

00012b20 <CBcmMailBox::CBcmMailBox(unsigned int, bool)>:
   12b20:	e5801000 	str	r1, [r0]
   12b24:	e5c02004 	strb	r2, [r0, #4]
   12b28:	e12fff1e 	bx	lr

00012b2c <CBcmMailBox::~CBcmMailBox()>:
   12b2c:	e12fff1e 	bx	lr

00012b30 <CBcmMailBox::Flush()>:
   12b30:	e92d4010 	push	{r4, lr}
   12b34:	e59f4024 	ldr	r4, [pc, #36]	; 12b60 <CBcmMailBox::Flush()+0x30>
   12b38:	e5943898 	ldr	r3, [r4, #2200]	; 0x898
   12b3c:	e3130101 	tst	r3, #1073741824	; 0x40000000
   12b40:	18bd8010 	popne	{r4, pc}
   12b44:	e3a00014 	mov	r0, #20
   12b48:	e5943880 	ldr	r3, [r4, #2176]	; 0x880
   12b4c:	ebffefe4 	bl	eae4 <CTimer::SimpleMsDelay(unsigned int)>
   12b50:	e5943898 	ldr	r3, [r4, #2200]	; 0x898
   12b54:	e3130101 	tst	r3, #1073741824	; 0x40000000
   12b58:	0afffff9 	beq	12b44 <CBcmMailBox::Flush()+0x14>
   12b5c:	e8bd8010 	pop	{r4, pc}
   12b60:	2000b000 	.word	0x2000b000

00012b64 <CBcmMailBox::Read()>:
   12b64:	e5901000 	ldr	r1, [r0]
   12b68:	e59f2020 	ldr	r2, [pc, #32]	; 12b90 <CBcmMailBox::Read()+0x2c>
   12b6c:	e5923898 	ldr	r3, [r2, #2200]	; 0x898
   12b70:	e3130101 	tst	r3, #1073741824	; 0x40000000
   12b74:	1afffffc 	bne	12b6c <CBcmMailBox::Read()+0x8>
   12b78:	e5920880 	ldr	r0, [r2, #2176]	; 0x880
   12b7c:	e200300f 	and	r3, r0, #15
   12b80:	e1530001 	cmp	r3, r1
   12b84:	1afffff8 	bne	12b6c <CBcmMailBox::Read()+0x8>
   12b88:	e3c0000f 	bic	r0, r0, #15
   12b8c:	e12fff1e 	bx	lr
   12b90:	2000b000 	.word	0x2000b000

00012b94 <CBcmMailBox::Write(unsigned int)>:
   12b94:	e92d4070 	push	{r4, r5, r6, lr}
   12b98:	e1a05000 	mov	r5, r0
   12b9c:	e1a04001 	mov	r4, r1
   12ba0:	e59f2034 	ldr	r2, [pc, #52]	; 12bdc <CBcmMailBox::Write(unsigned int)+0x48>
   12ba4:	e59238b8 	ldr	r3, [r2, #2232]	; 0x8b8
   12ba8:	e3530000 	cmp	r3, #0
   12bac:	bafffffc 	blt	12ba4 <CBcmMailBox::Write(unsigned int)+0x10>
   12bb0:	e314000f 	tst	r4, #15
   12bb4:	0a000003 	beq	12bc8 <CBcmMailBox::Write(unsigned int)+0x34>
   12bb8:	e3a02062 	mov	r2, #98	; 0x62
   12bbc:	e59f101c 	ldr	r1, [pc, #28]	; 12be0 <CBcmMailBox::Write(unsigned int)+0x4c>
   12bc0:	e59f001c 	ldr	r0, [pc, #28]	; 12be4 <CBcmMailBox::Write(unsigned int)+0x50>
   12bc4:	ebfff581 	bl	101d0 <assertion_failed>
   12bc8:	e5952000 	ldr	r2, [r5]
   12bcc:	e59f3008 	ldr	r3, [pc, #8]	; 12bdc <CBcmMailBox::Write(unsigned int)+0x48>
   12bd0:	e1844002 	orr	r4, r4, r2
   12bd4:	e58348a0 	str	r4, [r3, #2208]	; 0x8a0
   12bd8:	e8bd8070 	pop	{r4, r5, r6, pc}
   12bdc:	2000b000 	.word	0x2000b000
   12be0:	00015184 	.word	0x00015184
   12be4:	00015194 	.word	0x00015194

00012be8 <CBcmMailBox::WriteRead(unsigned int)>:
   12be8:	e92d4070 	push	{r4, r5, r6, lr}
   12bec:	e3a03000 	mov	r3, #0
   12bf0:	e24dd008 	sub	sp, sp, #8
   12bf4:	e1a05000 	mov	r5, r0
   12bf8:	e1a06001 	mov	r6, r1
   12bfc:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   12c00:	e5d03004 	ldrb	r3, [r0, #4]
   12c04:	e3530000 	cmp	r3, #0
   12c08:	1a000003 	bne	12c1c <CBcmMailBox::WriteRead(unsigned int)+0x34>
   12c0c:	e59f30b4 	ldr	r3, [pc, #180]	; 12cc8 <CBcmMailBox::WriteRead(unsigned int)+0xe0>
   12c10:	e5930000 	ldr	r0, [r3]
   12c14:	e3500000 	cmp	r0, #0
   12c18:	1a000028 	bne	12cc0 <CBcmMailBox::WriteRead(unsigned int)+0xd8>
   12c1c:	e59f40a8 	ldr	r4, [pc, #168]	; 12ccc <CBcmMailBox::WriteRead(unsigned int)+0xe4>
   12c20:	e5943898 	ldr	r3, [r4, #2200]	; 0x898
   12c24:	e3130101 	tst	r3, #1073741824	; 0x40000000
   12c28:	1a000005 	bne	12c44 <CBcmMailBox::WriteRead(unsigned int)+0x5c>
   12c2c:	e3a00014 	mov	r0, #20
   12c30:	e5943880 	ldr	r3, [r4, #2176]	; 0x880
   12c34:	ebffefaa 	bl	eae4 <CTimer::SimpleMsDelay(unsigned int)>
   12c38:	e5943898 	ldr	r3, [r4, #2200]	; 0x898
   12c3c:	e3130101 	tst	r3, #1073741824	; 0x40000000
   12c40:	0afffff9 	beq	12c2c <CBcmMailBox::WriteRead(unsigned int)+0x44>
   12c44:	e1a01006 	mov	r1, r6
   12c48:	e1a00005 	mov	r0, r5
   12c4c:	ebffffd0 	bl	12b94 <CBcmMailBox::Write(unsigned int)>
   12c50:	e5951000 	ldr	r1, [r5]
   12c54:	e59f2070 	ldr	r2, [pc, #112]	; 12ccc <CBcmMailBox::WriteRead(unsigned int)+0xe4>
   12c58:	e5923898 	ldr	r3, [r2, #2200]	; 0x898
   12c5c:	e3130101 	tst	r3, #1073741824	; 0x40000000
   12c60:	1afffffc 	bne	12c58 <CBcmMailBox::WriteRead(unsigned int)+0x70>
   12c64:	e5920880 	ldr	r0, [r2, #2176]	; 0x880
   12c68:	e200300f 	and	r3, r0, #15
   12c6c:	e1530001 	cmp	r3, r1
   12c70:	1afffff8 	bne	12c58 <CBcmMailBox::WriteRead(unsigned int)+0x70>
   12c74:	e5d53004 	ldrb	r3, [r5, #4]
   12c78:	e3c0000f 	bic	r0, r0, #15
   12c7c:	e3530000 	cmp	r3, #0
   12c80:	1a000003 	bne	12c94 <CBcmMailBox::WriteRead(unsigned int)+0xac>
   12c84:	e59f303c 	ldr	r3, [pc, #60]	; 12cc8 <CBcmMailBox::WriteRead(unsigned int)+0xe0>
   12c88:	e5933000 	ldr	r3, [r3]
   12c8c:	e3530000 	cmp	r3, #0
   12c90:	1a000003 	bne	12ca4 <CBcmMailBox::WriteRead(unsigned int)+0xbc>
   12c94:	e3a03000 	mov	r3, #0
   12c98:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   12c9c:	e28dd008 	add	sp, sp, #8
   12ca0:	e8bd8070 	pop	{r4, r5, r6, pc}
   12ca4:	e58d0004 	str	r0, [sp, #4]
   12ca8:	ebfff38b 	bl	fadc <LeaveCritical>
   12cac:	e59d0004 	ldr	r0, [sp, #4]
   12cb0:	e3a03000 	mov	r3, #0
   12cb4:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   12cb8:	e28dd008 	add	sp, sp, #8
   12cbc:	e8bd8070 	pop	{r4, r5, r6, pc}
   12cc0:	ebfff358 	bl	fa28 <EnterCritical>
   12cc4:	eaffffd4 	b	12c1c <CBcmMailBox::WriteRead(unsigned int)+0x34>
   12cc8:	0001566c 	.word	0x0001566c
   12ccc:	2000b000 	.word	0x2000b000

00012cd0 <_GLOBAL__sub_I__ZN11CBcmMailBox10s_SpinLockE>:
   12cd0:	e3a02000 	mov	r2, #0
   12cd4:	e59f3004 	ldr	r3, [pc, #4]	; 12ce0 <_GLOBAL__sub_I__ZN11CBcmMailBox10s_SpinLockE+0x10>
   12cd8:	e5832000 	str	r2, [r3]
   12cdc:	e12fff1e 	bx	lr
   12ce0:	0001566c 	.word	0x0001566c

00012ce4 <CExceptionHandler::CExceptionHandler()>:
   12ce4:	e92d4070 	push	{r4, r5, r6, lr}
   12ce8:	e59f5068 	ldr	r5, [pc, #104]	; 12d58 <CExceptionHandler::CExceptionHandler()+0x74>
   12cec:	e1a04000 	mov	r4, r0
   12cf0:	e5953000 	ldr	r3, [r5]
   12cf4:	e3530000 	cmp	r3, #0
   12cf8:	0a000003 	beq	12d0c <CExceptionHandler::CExceptionHandler()+0x28>
   12cfc:	e3a02030 	mov	r2, #48	; 0x30
   12d00:	e59f1054 	ldr	r1, [pc, #84]	; 12d5c <CExceptionHandler::CExceptionHandler()+0x78>
   12d04:	e59f0054 	ldr	r0, [pc, #84]	; 12d60 <CExceptionHandler::CExceptionHandler()+0x7c>
   12d08:	ebfff530 	bl	101d0 <assertion_failed>
   12d0c:	e3a00000 	mov	r0, #0
   12d10:	e59f104c 	ldr	r1, [pc, #76]	; 12d64 <CExceptionHandler::CExceptionHandler()+0x80>
   12d14:	e59f204c 	ldr	r2, [pc, #76]	; 12d68 <CExceptionHandler::CExceptionHandler()+0x84>
   12d18:	e59f304c 	ldr	r3, [pc, #76]	; 12d6c <CExceptionHandler::CExceptionHandler()+0x88>
   12d1c:	e1a01141 	asr	r1, r1, #2
   12d20:	e1a02142 	asr	r2, r2, #2
   12d24:	e1a03143 	asr	r3, r3, #2
   12d28:	e2411002 	sub	r1, r1, #2
   12d2c:	e2422002 	sub	r2, r2, #2
   12d30:	e2433002 	sub	r3, r3, #2
   12d34:	e38114ea 	orr	r1, r1, #-369098752	; 0xea000000
   12d38:	e38224ea 	orr	r2, r2, #-369098752	; 0xea000000
   12d3c:	e38334ea 	orr	r3, r3, #-369098752	; 0xea000000
   12d40:	e5854000 	str	r4, [r5]
   12d44:	e5801004 	str	r1, [r0, #4]
   12d48:	e1c020fc 	strd	r2, [r0, #12]
   12d4c:	ebfff387 	bl	fb70 <SyncDataAndInstructionCache>
   12d50:	e1a00004 	mov	r0, r4
   12d54:	e8bd8070 	pop	{r4, r5, r6, pc}
   12d58:	00015670 	.word	0x00015670
   12d5c:	000151b0 	.word	0x000151b0
   12d60:	00013870 	.word	0x00013870
   12d64:	00012a90 	.word	0x00012a90
   12d68:	000129e8 	.word	0x000129e8
   12d6c:	00012a34 	.word	0x00012a34

00012d70 <CExceptionHandler::~CExceptionHandler()>:
   12d70:	e3a02000 	mov	r2, #0
   12d74:	e59f3004 	ldr	r3, [pc, #4]	; 12d80 <CExceptionHandler::~CExceptionHandler()+0x10>
   12d78:	e5832000 	str	r2, [r3]
   12d7c:	e12fff1e 	bx	lr
   12d80:	00015670 	.word	0x00015670

00012d84 <CExceptionHandler::Throw(unsigned int)>:
   12d84:	e92d4010 	push	{r4, lr}
   12d88:	e1a04001 	mov	r4, r1
   12d8c:	e24dd008 	sub	sp, sp, #8
   12d90:	ebffdcf7 	bl	a174 <CLogger::Get()>
   12d94:	e59f201c 	ldr	r2, [pc, #28]	; 12db8 <CExceptionHandler::Throw(unsigned int)+0x34>
   12d98:	e59f301c 	ldr	r3, [pc, #28]	; 12dbc <CExceptionHandler::Throw(unsigned int)+0x38>
   12d9c:	e7921104 	ldr	r1, [r2, r4, lsl #2]
   12da0:	e3a02000 	mov	r2, #0
   12da4:	e58d1000 	str	r1, [sp]
   12da8:	e59f1010 	ldr	r1, [pc, #16]	; 12dc0 <CExceptionHandler::Throw(unsigned int)+0x3c>
   12dac:	ebffdc35 	bl	9e88 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   12db0:	e28dd008 	add	sp, sp, #8
   12db4:	e8bd8010 	pop	{r4, pc}
   12db8:	000155ac 	.word	0x000155ac
   12dbc:	000151c8 	.word	0x000151c8
   12dc0:	000151a8 	.word	0x000151a8

00012dc4 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)>:
   12dc4:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
   12dc8:	e3510002 	cmp	r1, #2
   12dcc:	e24dd024 	sub	sp, sp, #36	; 0x24
   12dd0:	e1a05001 	mov	r5, r1
   12dd4:	e1a04002 	mov	r4, r2
   12dd8:	0a00002c 	beq	12e90 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0xcc>
   12ddc:	e3510003 	cmp	r1, #3
   12de0:	0a00001f 	beq	12e64 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0xa0>
   12de4:	e3a08000 	mov	r8, #0
   12de8:	e1a09008 	mov	r9, r8
   12dec:	e3540000 	cmp	r4, #0
   12df0:	0a00001f 	beq	12e74 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0xb0>
   12df4:	e594304c 	ldr	r3, [r4, #76]	; 0x4c
   12df8:	e5947048 	ldr	r7, [r4, #72]	; 0x48
   12dfc:	e203301f 	and	r3, r3, #31
   12e00:	e3530011 	cmp	r3, #17
   12e04:	e5946044 	ldr	r6, [r4, #68]	; 0x44
   12e08:	0a00001e 	beq	12e88 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0xc4>
   12e0c:	e3530012 	cmp	r3, #18
   12e10:	01c460d0 	ldrdeq	r6, [r4]
   12e14:	e59f1080 	ldr	r1, [pc, #128]	; 12e9c <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0xd8>
   12e18:	e1a00006 	mov	r0, r6
   12e1c:	ebfff73d 	bl	10b18 <debug_stacktrace(unsigned int const*, char const*)>
   12e20:	ebffdcd3 	bl	a174 <CLogger::Get()>
   12e24:	e59f3074 	ldr	r3, [pc, #116]	; 12ea0 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0xdc>
   12e28:	e594204c 	ldr	r2, [r4, #76]	; 0x4c
   12e2c:	e7931105 	ldr	r1, [r3, r5, lsl #2]
   12e30:	e5943050 	ldr	r3, [r4, #80]	; 0x50
   12e34:	e58d1000 	str	r1, [sp]
   12e38:	e58d2018 	str	r2, [sp, #24]
   12e3c:	e58d3004 	str	r3, [sp, #4]
   12e40:	e1cd61f0 	strd	r6, [sp, #16]
   12e44:	e58d800c 	str	r8, [sp, #12]
   12e48:	e58d9008 	str	r9, [sp, #8]
   12e4c:	e59f3050 	ldr	r3, [pc, #80]	; 12ea4 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0xe0>
   12e50:	e3a02000 	mov	r2, #0
   12e54:	e59f1040 	ldr	r1, [pc, #64]	; 12e9c <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0xd8>
   12e58:	ebffdc0a 	bl	9e88 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   12e5c:	e28dd024 	add	sp, sp, #36	; 0x24
   12e60:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   12e64:	ee159f10 	mrc	15, 0, r9, cr5, cr0, {0}
   12e68:	ee168f10 	mrc	15, 0, r8, cr6, cr0, {0}
   12e6c:	e3540000 	cmp	r4, #0
   12e70:	1affffdf 	bne	12df4 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0x30>
   12e74:	e3a02069 	mov	r2, #105	; 0x69
   12e78:	e59f1028 	ldr	r1, [pc, #40]	; 12ea8 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0xe4>
   12e7c:	e59f0028 	ldr	r0, [pc, #40]	; 12eac <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0xe8>
   12e80:	ebfff4d2 	bl	101d0 <assertion_failed>
   12e84:	eaffffda 	b	12df4 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0x30>
   12e88:	e1c460d8 	ldrd	r6, [r4, #8]
   12e8c:	eaffffe0 	b	12e14 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0x50>
   12e90:	ee159f30 	mrc	15, 0, r9, cr5, cr0, {1}
   12e94:	ee168f50 	mrc	15, 0, r8, cr6, cr0, {2}
   12e98:	eaffffd3 	b	12dec <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0x28>
   12e9c:	000151a8 	.word	0x000151a8
   12ea0:	000155ac 	.word	0x000155ac
   12ea4:	000151e4 	.word	0x000151e4
   12ea8:	000151b0 	.word	0x000151b0
   12eac:	000151d8 	.word	0x000151d8

00012eb0 <CExceptionHandler::Get()>:
   12eb0:	e92d4010 	push	{r4, lr}
   12eb4:	e59f4020 	ldr	r4, [pc, #32]	; 12edc <CExceptionHandler::Get()+0x2c>
   12eb8:	e5940000 	ldr	r0, [r4]
   12ebc:	e3500000 	cmp	r0, #0
   12ec0:	18bd8010 	popne	{r4, pc}
   12ec4:	e3a02087 	mov	r2, #135	; 0x87
   12ec8:	e59f1010 	ldr	r1, [pc, #16]	; 12ee0 <CExceptionHandler::Get()+0x30>
   12ecc:	e59f0010 	ldr	r0, [pc, #16]	; 12ee4 <CExceptionHandler::Get()+0x34>
   12ed0:	ebfff4be 	bl	101d0 <assertion_failed>
   12ed4:	e5940000 	ldr	r0, [r4]
   12ed8:	e8bd8010 	pop	{r4, pc}
   12edc:	00015670 	.word	0x00015670
   12ee0:	000151b0 	.word	0x000151b0
   12ee4:	000139ac 	.word	0x000139ac

00012ee8 <ExceptionHandler>:
   12ee8:	e92d4070 	push	{r4, r5, r6, lr}
   12eec:	e3a03000 	mov	r3, #0
   12ef0:	e1a05000 	mov	r5, r0
   12ef4:	e1a06001 	mov	r6, r1
   12ef8:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   12efc:	ebfffd11 	bl	12348 <CInterruptSystem::DisableFIQ()>
   12f00:	f1080040 	cpsie	f
   12f04:	e59f403c 	ldr	r4, [pc, #60]	; 12f48 <ExceptionHandler+0x60>
   12f08:	e5940000 	ldr	r0, [r4]
   12f0c:	e3500000 	cmp	r0, #0
   12f10:	0a000003 	beq	12f24 <ExceptionHandler+0x3c>
   12f14:	e1a02006 	mov	r2, r6
   12f18:	e1a01005 	mov	r1, r5
   12f1c:	e8bd4070 	pop	{r4, r5, r6, lr}
   12f20:	eaffffa7 	b	12dc4 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)>
   12f24:	e3a02087 	mov	r2, #135	; 0x87
   12f28:	e59f101c 	ldr	r1, [pc, #28]	; 12f4c <ExceptionHandler+0x64>
   12f2c:	e59f001c 	ldr	r0, [pc, #28]	; 12f50 <ExceptionHandler+0x68>
   12f30:	ebfff4a6 	bl	101d0 <assertion_failed>
   12f34:	e5940000 	ldr	r0, [r4]
   12f38:	e1a02006 	mov	r2, r6
   12f3c:	e1a01005 	mov	r1, r5
   12f40:	e8bd4070 	pop	{r4, r5, r6, lr}
   12f44:	eaffff9e 	b	12dc4 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)>
   12f48:	00015670 	.word	0x00015670
   12f4c:	000151b0 	.word	0x000151b0
   12f50:	000139ac 	.word	0x000139ac

00012f54 <raise>:
   12f54:	e92d4010 	push	{r4, lr}
   12f58:	e59f4030 	ldr	r4, [pc, #48]	; 12f90 <raise+0x3c>
   12f5c:	e5940000 	ldr	r0, [r4]
   12f60:	e3500000 	cmp	r0, #0
   12f64:	0a000003 	beq	12f78 <raise+0x24>
   12f68:	e3a01004 	mov	r1, #4
   12f6c:	ebffff84 	bl	12d84 <CExceptionHandler::Throw(unsigned int)>
   12f70:	e3a00000 	mov	r0, #0
   12f74:	e8bd8010 	pop	{r4, pc}
   12f78:	e59f0014 	ldr	r0, [pc, #20]	; 12f94 <raise+0x40>
   12f7c:	e3a02087 	mov	r2, #135	; 0x87
   12f80:	e59f1010 	ldr	r1, [pc, #16]	; 12f98 <raise+0x44>
   12f84:	ebfff491 	bl	101d0 <assertion_failed>
   12f88:	e5940000 	ldr	r0, [r4]
   12f8c:	eafffff5 	b	12f68 <raise+0x14>
   12f90:	00015670 	.word	0x00015670
   12f94:	000139ac 	.word	0x000139ac
   12f98:	000151b0 	.word	0x000151b0

00012f9c <__udivsi3>:
   12f9c:	e2512001 	subs	r2, r1, #1
   12fa0:	012fff1e 	bxeq	lr
   12fa4:	3a000036 	bcc	13084 <__udivsi3+0xe8>
   12fa8:	e1500001 	cmp	r0, r1
   12fac:	9a000022 	bls	1303c <__udivsi3+0xa0>
   12fb0:	e1110002 	tst	r1, r2
   12fb4:	0a000023 	beq	13048 <__udivsi3+0xac>
   12fb8:	e311020e 	tst	r1, #-536870912	; 0xe0000000
   12fbc:	01a01181 	lsleq	r1, r1, #3
   12fc0:	03a03008 	moveq	r3, #8
   12fc4:	13a03001 	movne	r3, #1
   12fc8:	e3510201 	cmp	r1, #268435456	; 0x10000000
   12fcc:	31510000 	cmpcc	r1, r0
   12fd0:	31a01201 	lslcc	r1, r1, #4
   12fd4:	31a03203 	lslcc	r3, r3, #4
   12fd8:	3afffffa 	bcc	12fc8 <__udivsi3+0x2c>
   12fdc:	e3510102 	cmp	r1, #-2147483648	; 0x80000000
   12fe0:	31510000 	cmpcc	r1, r0
   12fe4:	31a01081 	lslcc	r1, r1, #1
   12fe8:	31a03083 	lslcc	r3, r3, #1
   12fec:	3afffffa 	bcc	12fdc <__udivsi3+0x40>
   12ff0:	e3a02000 	mov	r2, #0
   12ff4:	e1500001 	cmp	r0, r1
   12ff8:	20400001 	subcs	r0, r0, r1
   12ffc:	21822003 	orrcs	r2, r2, r3
   13000:	e15000a1 	cmp	r0, r1, lsr #1
   13004:	204000a1 	subcs	r0, r0, r1, lsr #1
   13008:	218220a3 	orrcs	r2, r2, r3, lsr #1
   1300c:	e1500121 	cmp	r0, r1, lsr #2
   13010:	20400121 	subcs	r0, r0, r1, lsr #2
   13014:	21822123 	orrcs	r2, r2, r3, lsr #2
   13018:	e15001a1 	cmp	r0, r1, lsr #3
   1301c:	204001a1 	subcs	r0, r0, r1, lsr #3
   13020:	218221a3 	orrcs	r2, r2, r3, lsr #3
   13024:	e3500000 	cmp	r0, #0
   13028:	11b03223 	lsrsne	r3, r3, #4
   1302c:	11a01221 	lsrne	r1, r1, #4
   13030:	1affffef 	bne	12ff4 <__udivsi3+0x58>
   13034:	e1a00002 	mov	r0, r2
   13038:	e12fff1e 	bx	lr
   1303c:	03a00001 	moveq	r0, #1
   13040:	13a00000 	movne	r0, #0
   13044:	e12fff1e 	bx	lr
   13048:	e3510801 	cmp	r1, #65536	; 0x10000
   1304c:	21a01821 	lsrcs	r1, r1, #16
   13050:	23a02010 	movcs	r2, #16
   13054:	33a02000 	movcc	r2, #0
   13058:	e3510c01 	cmp	r1, #256	; 0x100
   1305c:	21a01421 	lsrcs	r1, r1, #8
   13060:	22822008 	addcs	r2, r2, #8
   13064:	e3510010 	cmp	r1, #16
   13068:	21a01221 	lsrcs	r1, r1, #4
   1306c:	22822004 	addcs	r2, r2, #4
   13070:	e3510004 	cmp	r1, #4
   13074:	82822003 	addhi	r2, r2, #3
   13078:	908220a1 	addls	r2, r2, r1, lsr #1
   1307c:	e1a00230 	lsr	r0, r0, r2
   13080:	e12fff1e 	bx	lr
   13084:	e3500000 	cmp	r0, #0
   13088:	13e00000 	mvnne	r0, #0
   1308c:	ea000007 	b	130b0 <__aeabi_idiv0>

00013090 <__aeabi_uidivmod>:
   13090:	e3510000 	cmp	r1, #0
   13094:	0afffffa 	beq	13084 <__udivsi3+0xe8>
   13098:	e92d4003 	push	{r0, r1, lr}
   1309c:	ebffffbe 	bl	12f9c <__udivsi3>
   130a0:	e8bd4006 	pop	{r1, r2, lr}
   130a4:	e0030092 	mul	r3, r2, r0
   130a8:	e0411003 	sub	r1, r1, r3
   130ac:	e12fff1e 	bx	lr

000130b0 <__aeabi_idiv0>:
   130b0:	e12fff1e 	bx	lr
